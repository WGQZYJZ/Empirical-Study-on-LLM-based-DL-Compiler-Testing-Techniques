==========mod==========
#[version = "0.0.5"]
def @func_2524() -> Tensor[(?, 5, 4), uint64] {
  %0 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %0.0
}

def @func_4475(%var_4460: Tensor[(600), float64]) -> (Tensor[(12), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), uint64]) {
  %1 = @func_1597() /* ty=(Tensor[(12), float64],) */;
  %2 = cast(%var_4460, dtype="float64") /* ty=Tensor[(600), float64] */;
  %3 = reshape(%2, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %4 = @func_4066(%3) /* ty=(Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) */;
  %5 = @func_2885() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), uint64], Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */;
  %6 = %1.0;
  %7 = %4.3;
  %8 = %5.1;
  (%6, %7, %var_4460, %8)
}

def @func_3934() -> (Tensor[(?, 5, 4), int8],) {
  %9 = @func_2921() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(16, 5, 4), float32]) */;
  %10 = %9.0;
  (%10,)
}

def @func_3850(%var_3837: Tensor[(784), float32]) -> (Tensor[(?, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) {
  %11 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %12 = cast(%var_3837, dtype="float32") /* ty=Tensor[(784), float32] */;
  %13 = reshape(%12, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %14 = @func_2406(%13) /* ty=(Tensor[(7, 7, 16), float32],) */;
  %15 = %11.0;
  %16 = %14.0;
  (%15, %16, %var_3837)
}

def @func_4250(%var_4169: Tensor[(260, 1), int8]) -> (Tensor[(1, 5, 4), float32], Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), int8], Tensor[(260, 1), int8], Tensor[(3, 4), float64], Tensor[(13, 5, 4), float32], Tensor[(13, 5, 4), float64]) {
  %17 = @func_3464() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %18 = @func_3981() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), float32]) */;
  %19 = @func_3934() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %20 = cast(%var_4169, dtype="int8") /* ty=Tensor[(260, 1), int8] */;
  %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 4), float64] */;
  %22 = reshape(%20, newshape=[13, 5, 4]) /* ty=Tensor[(13, 5, 4), int8] */;
  %23 = reshape(%21, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %24 = @func_2605(%22, %23) /* ty=(Tensor[(13, 5, 4), bool], Tensor[(1, 88), float32], Tensor[(12), float64], Tensor[(?, 5, 4), uint64], Tensor[(1, 8, 11), float32], Tensor[(12), float64], Tensor[(?, 5, 4), float32]) */;
  %25 = %24.0;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %27 = acosh(%26) /* ty=Tensor[(13, 5, 4), float64] */;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(13, 5, 4), float32] */;
  %29 = atanh(%28) /* ty=Tensor[(13, 5, 4), float32] */;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(13, 5, 4), float32] */;
  %31 = cast(%25, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %32 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%29, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %35 = %17.2;
  %36 = %18.0;
  %37 = %19.0;
  %38 = log2(%30) /* ty=Tensor[(13, 5, 4), float32] */;
  %39 = mod(%33, %34) /* ty=Tensor[(13, 5, 4), float64] */;
  (%35, %36, %37, %var_4169, meta[relay.Constant][0] /* ty=Tensor[(3, 4), float64] */, %38, %39)
}

def @func_5055() -> (Tensor[(?, 5, 4), float32],) {
  %40 = @func_4364() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(12), float64]) */;
  %41 = %40.1;
  (%41,)
}

def @func_2085() -> (Tensor[(?, 5, 4), float32],) {
  %42 = @func_1957() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) */;
  %43 = %42.0;
  (%43,)
}

def @func_7181(%var_7122: Tensor[(14, 5, 4), int8]) -> (Tensor[(12), float64], Tensor[(12), float64], Tensor[(600), float64], Tensor[(14, 5, 4), int8], Tensor[(6, 5, 4), int64]) {
  %44 = @func_1597() /* ty=(Tensor[(12), float64],) */;
  %45 = cast(meta[relay.Constant][1] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %46 = reshape(%45, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %47 = @func_4475(%46) /* ty=(Tensor[(12), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), uint64]) */;
  %48 = @func_5048() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %49 = %48.0;
  %50 = cast(%49, dtype="int8") /* ty=Tensor[(?, 5, 4), int8] */;
  %51 = cast(%var_7122, dtype="int8") /* ty=Tensor[(14, 5, 4), int8] */;
  %52 = @func_4543() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(6, 5, 4), uint16]) */;
  %53 = %52.1;
  %54 = cast(%53, dtype="int64") /* ty=Tensor[(6, 5, 4), int64] */;
  %55 = cast(%49, dtype="int64") /* ty=Tensor[(?, 5, 4), int64] */;
  %56 = %44.0;
  %57 = %47.0;
  %58 = bitwise_xor(%50, %51) /* ty=Tensor[(14, 5, 4), int8] */;
  %59 = subtract(%54, %55) /* ty=Tensor[(6, 5, 4), int64] */;
  (%56, %57, meta[relay.Constant][1] /* ty=Tensor[(600), float64] */, %58, %59)
}

def @func_2605(%var_2541: Tensor[(13, 5, 4), int8], %var_2551: Tensor[(12), float64]) -> (Tensor[(13, 5, 4), bool], Tensor[(1, 88), float32], Tensor[(12), float64], Tensor[(?, 5, 4), uint64], Tensor[(1, 8, 11), float32], Tensor[(12), float64], Tensor[(?, 5, 4), float32]) {
  %60 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %61 = %60.0;
  %62 = cast(%61, dtype="bool") /* ty=Tensor[(?, 5, 4), bool] */;
  %63 = cast(%var_2541, dtype="bool") /* ty=Tensor[(13, 5, 4), bool] */;
  %64 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 88), float32] */, dtype="float32") /* ty=Tensor[(1, 88), float32] */;
  %66 = cast(%var_2551, dtype="float64") /* ty=Tensor[(12), float64] */;
  %67 = reshape(%65, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float32] */;
  %68 = reshape(%66, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %69 = @func_567(%67, %68) /* ty=(Tensor[(1, 8, 11), float32], Tensor[(2, 2, 3), float64], Tensor[(12), float64], Tensor[(?, 8, 11), bool], Tensor[(600), float64]) */;
  %70 = %69.0;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(1, 8, 11), float32] */;
  %72 = @func_1431() /* ty=(Tensor[(12), float64],) */;
  %73 = @func_1957() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) */;
  %74 = equal(%62, %63) /* ty=Tensor[(13, 5, 4), bool] */;
  %75 = %64.0;
  %76 = cosh(%71) /* ty=Tensor[(1, 8, 11), float32] */;
  %77 = %72.0;
  %78 = %73.0;
  (%74, meta[relay.Constant][2] /* ty=Tensor[(1, 88), float32] */, %var_2551, %75, %76, %77, %78)
}

def @func_1957() -> (Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) {
  %79 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %80 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %81 = %79.1;
  %82 = %80.1;
  (%81, %82)
}

def @func_6962(%var_6953: Tensor[(1, 3, 3), float64]) -> (Tensor[(1, 3, 3), float64],) {
  %83 = cast(%var_6953, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
  %84 = sin(%83) /* ty=Tensor[(1, 3, 3), float64] */;
  (%84,)
}

def @func_2406(%var_2402: Tensor[(7, 7, 16), float32]) -> (Tensor[(7, 7, 16), float32],) {
  %85 = cast(%var_2402, dtype="float32") /* ty=Tensor[(7, 7, 16), float32] */;
  %86 = sigmoid(%85) /* ty=Tensor[(7, 7, 16), float32] */;
  (%86,)
}

def @func_5854() -> (Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  %87 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %88 = %87.0;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %90 = @func_2757() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %91 = @func_5239() /* ty=(Tensor[(?, 5, 4), uint16], Tensor[(15, 5, 4), int64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %92 = @func_5287() /* ty=Tensor[(?, 5, 4), float32] */;
  %93 = tan(%89) /* ty=Tensor[(1, 5, 4), float32] */;
  %94 = %90.0;
  %95 = %91.3;
  (%92, %93, %94, %95)
}

def @func_3253(%var_3230: Tensor[(5, 5, 4), int8]) -> (Tensor[(5, 5, 4), uint32], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(200), float32]) {
  %96 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %97 = %96.0;
  %98 = cast(%97, dtype="uint32") /* ty=Tensor[(?, 5, 4), uint32] */;
  %99 = cast(%var_3230, dtype="uint32") /* ty=Tensor[(5, 5, 4), uint32] */;
  %100 = cast(meta[relay.Constant][3] /* ty=Tensor[(300, 2), float64] */, dtype="float64") /* ty=Tensor[(300, 2), float64] */;
  %101 = cast(meta[relay.Constant][4] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %102 = reshape(%100, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %103 = reshape(%101, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), float32] */;
  %104 = @func_1814(%102, %103) /* ty=(Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(12, 5, 4), uint16], Tensor[(?, 5, 4), float64], Tensor[(10, 5, 4), bool], Tensor[(12, 5, 4), float32]) */;
  %105 = bitwise_or(%98, %99) /* ty=Tensor[(5, 5, 4), uint32] */;
  %106 = %104.0;
  (%105, %106, meta[relay.Constant][3] /* ty=Tensor[(300, 2), float64] */, meta[relay.Constant][4] /* ty=Tensor[(200), float32] */)
}

def @func_2336() -> (Tensor[(1, 5, 4), float32],) {
  %107 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  (%107,)
}

def @func_3981() -> (Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), float32]) {
  %108 = @func_3746() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(12), float64]) */;
  %109 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %110 = %108.0;
  %111 = %109.1;
  (%110, %111)
}

def @func_7223() -> (Tensor[(15, 5, 4), int64], Tensor[(15, 7, 1), float32]) {
  %112 = @func_5239() /* ty=(Tensor[(?, 5, 4), uint16], Tensor[(15, 5, 4), int64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %113 = @func_6548() /* ty=(Tensor[(15, 7, 1), float32],) */;
  %114 = %112.1;
  %115 = %113.0;
  (%114, %115)
}

def @func_1888(%var_1867: Tensor[(12, 5, 4), uint64]) -> (Tensor[(?, 5, 4), uint64], Tensor[(12, 5, 4), float32]) {
  %116 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %117 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="int16") /* ty=Tensor[(?, 5, 4), int16] */;
  %120 = cast(%var_1867, dtype="int16") /* ty=Tensor[(12, 5, 4), int16] */;
  %121 = left_shift(%119, %120) /* ty=Tensor[(12, 5, 4), int16] */;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
  %123 = %116.0;
  %124 = atan(%122) /* ty=Tensor[(12, 5, 4), float32] */;
  (%123, %124)
}

def @func_6923(%var_6889: Tensor[(14, 5, 4), float32], %var_6896: Tensor[(600), float64]) -> (Tensor[(14, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64], Tensor[(1, 5, 4), float32]) {
  %125 = @func_5131() /* ty=(Tensor[(6, 5, 4), float64], Tensor[(1, 5, 4), float32], Tensor[(3, 4), float64]) */;
  %126 = %125.1;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %128 = cast(%var_6889, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %129 = cast(%var_6896, dtype="float64") /* ty=Tensor[(600), float64] */;
  %130 = reshape(%129, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %131 = @func_4905(%130) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64]) */;
  %132 = @func_2682() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %133 = floor_mod(%127, %128) /* ty=Tensor[(14, 5, 4), float32] */;
  %134 = %131.1;
  %135 = %132.0;
  (%133, %134, %var_6896, %135)
}

def @func_4364() -> (Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(12), float64]) {
  %136 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %137 = @func_3806() /* ty=(Tensor[(12), float64],) */;
  %138 = @func_3904() /* ty=Tensor[(?, 5, 4), float32] */;
  %139 = %136.1;
  %140 = %137.0;
  (%138, %139, %140)
}

def @func_2359() -> Tensor[(6, 5, 4), uint16] {
  %141 = @func_1851() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %141.0
}

def @func_2682() -> (Tensor[(1, 5, 4), float32],) {
  %142 = @func_2336() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %143 = %142.0;
  (%143,)
}

def @func_2065() -> Tensor[(?, 5, 4), int8] {
  %144 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %144.0
}

def @func_4776(%var_4743: Tensor[(4, 15, 6), uint32]) -> (Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64], Tensor[(4, 15, 6), float32]) {
  %145 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 2), float64] */;
  %146 = reshape(%145, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %147 = @func_887(%146) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(12), float64]) */;
  %148 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 15, 6), uint32] */, dtype="uint32") /* ty=Tensor[(4, 15, 6), uint32] */;
  %149 = shape_of(%var_4743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_4743, dtype="uint32") /* ty=Tensor[(4, 15, 6), uint32] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %152 = multiply(%150, %151) /* ty=Tensor[(4, 15, 6), uint32] */;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(4, 15, 6), float32] */;
  %154 = %147.2;
  %155 = acos(%153) /* ty=Tensor[(4, 15, 6), float32] */;
  (%154, meta[relay.Constant][5] /* ty=Tensor[(6, 2), float64] */, %155)
}

def @func_3438() -> Tensor[(1, 5, 4), float32] {
  %156 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %156.0
}

def @func_4543() -> (Tensor[(6, 5, 4), float32], Tensor[(6, 5, 4), uint16]) {
  %157 = @func_3507() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %158 = @func_2944() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %159 = %157.0;
  %160 = %158.0;
  (%159, %160)
}

def @func_6453(%var_6412: Tensor[(600), float64]) -> (Tensor[(?, 5, 4), bool], Tensor[(?, 5, 4), int32], Tensor[(600), int32], Tensor[(?, 5, 4), float64]) {
  %161 = @func_3879() /* ty=Tensor[(?, 5, 4), int8] */;
  %162 = @func_2921() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(16, 5, 4), float32]) */;
  %163 = %162.0;
  %164 = cast(%163, dtype="bool") /* ty=Tensor[(?, 5, 4), bool] */;
  %165 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%161, dtype="bool") /* ty=Tensor[(?, 5, 4), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = cast(%163, dtype="int32") /* ty=Tensor[(?, 5, 4), int32] */;
  %169 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%161, dtype="int32") /* ty=Tensor[(?, 5, 4), int32] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %172 = cast(%var_6412, dtype="float64") /* ty=Tensor[(600), float64] */;
  %173 = reshape(%172, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %174 = @func_4905(%173) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64]) */;
  %175 = %174.2;
  %176 = cast(%175, dtype="int32") /* ty=Tensor[(600), int32] */;
  %177 = shape_of(%var_6412, dtype="int32") /* ty=Tensor[(1), int32] */;
  %178 = cast(%var_6412, dtype="int32") /* ty=Tensor[(600), int32] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?), int32] */;
  %180 = @func_5585() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(1, 5, 4), float32]) */;
  %181 = %180.0;
  %182 = cast(%181, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
  %183 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%161, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %186 = logical_or(%166, %167) /* ty=Tensor[(?, 5, 4), bool] */;
  %187 = left_shift(%170, %171) /* ty=Tensor[(?, 5, 4), int32] */;
  %188 = maximum(%178, %179) /* ty=Tensor[(600), int32] */;
  %189 = mod(%184, %185) /* ty=Tensor[(?, 5, 4), float64] */;
  (%186, %187, %188, %189)
}

def @func_6370(%var_6342: Tensor[(24, 10), uint64]) -> (Tensor[(?, 5, 4), float32], Tensor[(1, 240), uint64], Tensor[(24, 10), uint64], Tensor[(12), float64], Tensor[(1, 5, 4), float32]) {
  %190 = @func_2085() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %191 = cast(%var_6342, dtype="uint64") /* ty=Tensor[(24, 10), uint64] */;
  %192 = cast(meta[relay.Constant][7] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %193 = reshape(%191, newshape=[1, 240]) /* ty=Tensor[(1, 240), uint64] */;
  %194 = reshape(%192, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %195 = @func_4941(%193, %194) /* ty=(Tensor[(?, 5, 4), int8], Tensor[(300, 2), float64], Tensor[(12, 5, 4), float32], Tensor[(1, 240), uint64], Tensor[(?, 5, 4), float32], Tensor[(12), float64], Tensor[(15, 5, 4), int64]) */;
  %196 = %190.0;
  %197 = %195.3;
  %198 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
  (%196, %197, %var_6342, meta[relay.Constant][7] /* ty=Tensor[(12), float64] */, %198)
}

def @func_1056(%var_991: Tensor[(10, 5, 4), int8], %var_1046: Tensor[(800), float32]) -> (Tensor[(10, 5, 4), int64], Tensor[(10, 5, 16), float32], Tensor[(800), float32], Tensor[(?, 5, 4), int32]) {
  %199 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %200 = %199.0;
  %201 = cast(%200, dtype="int64") /* ty=Tensor[(?, 5, 4), int64] */;
  %202 = cast(%var_991, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
  %203 = cast(%var_1046, dtype="float32") /* ty=Tensor[(800), float32] */;
  %204 = reshape(%203, newshape=[10, 5, 16]) /* ty=Tensor[(10, 5, 16), float32] */;
  %205 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="float32") /* ty=Tensor[(?, 5, 4), float32] */;
  %208 = log2(%207) /* ty=Tensor[(?, 5, 4), float32] */;
  %209 = cast(%200, dtype="int32") /* ty=Tensor[(?, 5, 4), int32] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="int32") /* ty=Tensor[(?, 5, 4), int32] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %213 = multiply(%201, %202) /* ty=Tensor[(10, 5, 4), int64] */;
  %214 = @func_489(%204) /* ty=Tensor[(10, 5, 16), float32] */;
  %215 = bitwise_and(%211, %212) /* ty=Tensor[(?, 5, 4), int32] */;
  (%213, %214, %var_1046, %215)
}

def @func_4438() -> (Tensor[(?, 5, 4), int8],) {
  %216 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %217 = %216.0;
  (%217,)
}

def @func_256(%var_210: Tensor[(2, 2, 3), float64], %var_234: Tensor[(2, 2, 3), float64]) -> (Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) {
  %218 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
  %219 = shape_of(%var_210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_210, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %222 = cast(%var_234, dtype="float32") /* ty=Tensor[(2, 2, 3), float32] */;
  %223 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(2, 2, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 2, 3), float64] */, dtype="float32") /* ty=Tensor[(2, 2, 3), float32] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %226 = cast(meta[relay.Constant][9] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %227 = reshape(%226, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
  %228 = @func_88(%227) /* ty=(Tensor[(10, 5, 12), float64],) */;
  %229 = %228.0;
  %230 = cast(%229, dtype="float64") /* ty=Tensor[(10, 5, 12), float64] */;
  %231 = reshape(%230, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
  %232 = @func_88(%231) /* ty=(Tensor[(10, 5, 12), float64],) */;
  %233 = mod(%220, %221) /* ty=Tensor[(2, 2, 3), float64] */;
  %234 = power(%224, %225) /* ty=Tensor[(2, 2, 3), float32] */;
  %235 = %232.0;
  (%233, %234, %229, meta[relay.Constant][9] /* ty=Tensor[(600), float64] */, %235)
}

def @func_6100() -> (Tensor[(8, 5, 4), float64],) {
  %236 = @func_4275() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(80), int8], Tensor[(12), float64], Tensor[(8, 5, 4), float64]) */;
  %237 = %236.3;
  (%237,)
}

def @func_2295(%var_2277: Tensor[(4, 5, 4), int8]) -> (Tensor[(4, 5, 4), float32], Tensor[(?, 5, 4), bool]) {
  %238 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %239 = %238.0;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(?, 5, 4), float32] */;
  %241 = cast(%var_2277, dtype="float32") /* ty=Tensor[(4, 5, 4), float32] */;
  %242 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 5, 4), int8] */, dtype="bool") /* ty=Tensor[(1, 5, 4), bool] */;
  %243 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%239, dtype="bool") /* ty=Tensor[(?, 5, 4), bool] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %246 = floor_divide(%240, %241) /* ty=Tensor[(4, 5, 4), float32] */;
  %247 = less(%244, %245) /* ty=Tensor[(?, 5, 4), bool] */;
  (%246, %247)
}

def @func_3618(%var_3553: Tensor[(14, 5, 4), uint16], %var_3604: Tensor[(600), float64]) -> (Tensor[(14, 5, 4), uint32], Tensor[(14, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(40, 2), int8]) {
  %248 = @func_1921() /* ty=Tensor[(?, 5, 4), uint16] */;
  %249 = cast(%248, dtype="uint32") /* ty=Tensor[(?, 5, 4), uint32] */;
  %250 = cast(%var_3553, dtype="uint32") /* ty=Tensor[(14, 5, 4), uint32] */;
  %251 = cast(%var_3553, dtype="float64") /* ty=Tensor[(14, 5, 4), float64] */;
  %252 = cast(%248, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
  %253 = mod(%251, %252) /* ty=Tensor[(14, 5, 4), float64] */;
  %254 = cast(%253, dtype="float64") /* ty=Tensor[(14, 5, 4), float64] */;
  %255 = rsqrt(%254) /* ty=Tensor[(14, 5, 4), float64] */;
  %256 = cast(%255, dtype="float64") /* ty=Tensor[(14, 5, 4), float64] */;
  %257 = cast(%var_3604, dtype="float64") /* ty=Tensor[(600), float64] */;
  %258 = reshape(%257, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
  %259 = @func_88(%258) /* ty=(Tensor[(10, 5, 12), float64],) */;
  %260 = @func_2808() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) */;
  %261 = cast(meta[relay.Constant][11] /* ty=Tensor[(40, 2), int8] */, dtype="int8") /* ty=Tensor[(40, 2), int8] */;
  %262 = reshape(%261, newshape=[4, 5, 4]) /* ty=Tensor[(4, 5, 4), int8] */;
  %263 = @func_2295(%262) /* ty=(Tensor[(4, 5, 4), float32], Tensor[(?, 5, 4), bool]) */;
  %264 = multiply(%249, %250) /* ty=Tensor[(14, 5, 4), uint32] */;
  %265 = cos(%256) /* ty=Tensor[(14, 5, 4), float64] */;
  %266 = %259.0;
  %267 = %260.0;
  %268 = %263.1;
  (%264, %265, %266, %var_3604, %267, %268, meta[relay.Constant][11] /* ty=Tensor[(40, 2), int8] */)
}

def @func_849() -> (Tensor[(?, 5, 4), int8],) {
  %269 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
  %270 = cast(%269, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %271 = rsqrt(%270) /* ty=Tensor[(1, 5, 4), float32] */;
  %272 = cast(%269, dtype="int8") /* ty=Tensor[(1, 5, 4), int8] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="int8") /* ty=Tensor[(1, 5, 4), int8] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %276 = bitwise_or(%274, %275) /* ty=Tensor[(?, 5, 4), int8] */;
  (%276,)
}

def @func_2031() -> (Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  %277 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %278 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  %279 = %277.0;
  (%278, %279)
}

def @func_4885(%var_4878: Tensor[(2, 5, 4), float32]) -> (Tensor[(?, 5, 4), int8], Tensor[(2, 5, 4), uint16]) {
  %280 = @func_4716() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %281 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %282 = %281.0;
  %283 = cast(%282, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
  %284 = cast(%var_4878, dtype="uint16") /* ty=Tensor[(2, 5, 4), uint16] */;
  %285 = %280.0;
  %286 = right_shift(%283, %284) /* ty=Tensor[(2, 5, 4), uint16] */;
  (%285, %286)
}

def @func_5102(%var_5095: Tensor[(13, 1, 3), float32], %var_5096: Tensor[(13, 6, 3), float32]) -> (Tensor[(13, 6, 3), float32],) {
  %287 = cast(%var_5095, dtype="float32") /* ty=Tensor[(13, 1, 3), float32] */;
  %288 = cast(%var_5096, dtype="float32") /* ty=Tensor[(13, 6, 3), float32] */;
  %289 = floor_divide(%287, %288) /* ty=Tensor[(13, 6, 3), float32] */;
  (%289,)
}

def @func_5025(%var_5001: Tensor[(16, 12, 4), float32]) -> (Tensor[(16, 12, 4), float32], Tensor[(16, 12, 4), float32]) {
  %290 = cast(%var_5001, dtype="float32") /* ty=Tensor[(16, 12, 4), float32] */;
  %291 = cast(%var_5001, dtype="float32") /* ty=Tensor[(16, 12, 4), float32] */;
  %292 = exp(%290) /* ty=Tensor[(16, 12, 4), float32] */;
  %293 = acosh(%291) /* ty=Tensor[(16, 12, 4), float32] */;
  (%292, %293)
}

def @func_4066(%var_4063: Tensor[(600), float64]) -> (Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) {
  %294 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %295 = @func_2197() /* ty=(Tensor[(12), float64], Tensor[(12), float64]) */;
  %296 = cast(%var_4063, dtype="float64") /* ty=Tensor[(600), float64] */;
  %297 = reshape(%296, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %298 = @func_2427(%297) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) */;
  %299 = %294.0;
  %300 = %295.0;
  %301 = @func_3438() /* ty=Tensor[(1, 5, 4), float32] */;
  %302 = %298.2;
  (%299, %300, %301, %302, %var_4063)
}

def @func_489(%var_474: Tensor[(10, 5, 16), float32]) -> Tensor[(10, 5, 16), float32] {
  %303 = cast(%var_474, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  rsqrt(%303) /* ty=Tensor[(10, 5, 16), float32] */
}

def @func_3295() -> (Tensor[(12), float64], Tensor[(1, 5, 4), float32]) {
  %304 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %305 = @func_2031() /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %306 = %304.0;
  %307 = %305.1;
  (%306, %307)
}

def @func_6784() -> Tensor[(12), float64] {
  %308 = @func_1431() /* ty=(Tensor[(12), float64],) */;
  %308.0
}

def @func_5287() -> Tensor[(?, 5, 4), float32] {
  %309 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %309.1
}

def @func_5341() -> Tensor[(12), float64] {
  %310 = @func_3806() /* ty=(Tensor[(12), float64],) */;
  %310.0
}

def @func_4572() -> (Tensor[(6, 5, 4), float32],) {
  %311 = @func_4543() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(6, 5, 4), uint16]) */;
  %312 = %311.0;
  (%312,)
}

def @func_2921() -> (Tensor[(?, 5, 4), int8], Tensor[(16, 5, 4), float32]) {
  %313 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %314 = @func_2494() /* ty=(Tensor[(16, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32], Tensor[(16, 5, 4), bool]) */;
  %315 = %313.0;
  %316 = %314.0;
  (%315, %316)
}

def @func_6548() -> (Tensor[(15, 7, 1), float32],) {
  %317 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %318 = log(%317) /* ty=Tensor[(15, 7, 1), float32] */;
  (%318,)
}

def @func_811() -> Tensor[(1, 5, 4), float32] {
  %319 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  acosh(%319) /* ty=Tensor[(1, 5, 4), float32] */
}

def @func_5131() -> (Tensor[(6, 5, 4), float64], Tensor[(1, 5, 4), float32], Tensor[(3, 4), float64]) {
  %320 = @func_4543() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(6, 5, 4), uint16]) */;
  %321 = %320.1;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(6, 5, 4), float64] */;
  %323 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 4), float64] */;
  %324 = reshape(%323, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %325 = @func_887(%324) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(12), float64]) */;
  %326 = sqrt(%322) /* ty=Tensor[(6, 5, 4), float64] */;
  %327 = %325.1;
  (%326, %327, meta[relay.Constant][14] /* ty=Tensor[(3, 4), float64] */)
}

def @func_4826(%var_4788: Tensor[(1, 2, 1), int16], %var_4789: Tensor[(7, 2, 16), int16]) -> (Tensor[(7, 2, 16), int64], Tensor[(?, 5, 4), int8], Tensor[(7, 2, 16), int8], Tensor[(1, 2, 1), float64]) {
  %328 = cast(%var_4788, dtype="int16") /* ty=Tensor[(1, 2, 1), int16] */;
  %329 = cast(%var_4789, dtype="int16") /* ty=Tensor[(7, 2, 16), int16] */;
  %330 = maximum(%328, %329) /* ty=Tensor[(7, 2, 16), int16] */;
  %331 = cast(%330, dtype="int64") /* ty=Tensor[(7, 2, 16), int64] */;
  %332 = cast(%var_4788, dtype="int64") /* ty=Tensor[(1, 2, 1), int64] */;
  %333 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %334 = cast(%330, dtype="int8") /* ty=Tensor[(7, 2, 16), int8] */;
  %335 = cast(%var_4788, dtype="int8") /* ty=Tensor[(1, 2, 1), int8] */;
  %336 = cast(%var_4788, dtype="float64") /* ty=Tensor[(1, 2, 1), float64] */;
  %337 = multiply(%331, %332) /* ty=Tensor[(7, 2, 16), int64] */;
  %338 = %333.0;
  %339 = right_shift(%334, %335) /* ty=Tensor[(7, 2, 16), int8] */;
  %340 = acosh(%336) /* ty=Tensor[(1, 2, 1), float64] */;
  (%337, %338, %339, %340)
}

def @func_6223() -> (Tensor[(100), int8], Tensor[(12), float64]) {
  %341 = @func_5396() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(100), int8], Tensor[(100), int8]) */;
  %342 = %341.1;
  %343 = @func_5341() /* ty=Tensor[(12), float64] */;
  (%342, %343)
}

def @func_5797(%var_5718: Tensor[(8, 3, 16), int16], %var_5724: Tensor[(8, 3, 16), int16]) -> (Tensor[(6, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(8, 3, 16), float64], Tensor[(?, 5, 4), int8]) {
  %344 = @func_3507() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %345 = @func_4438() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %346 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %347 = @func_2808() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) */;
  %348 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 3, 16), int16] */, dtype="int16") /* ty=Tensor[(8, 3, 16), int16] */;
  %349 = shape_of(%var_5718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_5718, dtype="int16") /* ty=Tensor[(8, 3, 16), int16] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %352 = multiply(%350, %351) /* ty=Tensor[(8, 3, 16), int16] */;
  %353 = cast(%var_5724, dtype="bool") /* ty=Tensor[(8, 3, 16), bool] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="bool") /* ty=Tensor[(8, 3, 16), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = equal(%355, %356) /* ty=Tensor[(8, 3, 16), bool] */;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(8, 3, 16), float64] */;
  %359 = shape_of(%var_5718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%var_5718, dtype="float64") /* ty=Tensor[(8, 3, 16), float64] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %362 = @func_3934() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %363 = %344.0;
  %364 = %345.0;
  %365 = %346.0;
  %366 = %347.0;
  %367 = @func_5341() /* ty=Tensor[(12), float64] */;
  %368 = divide(%360, %361) /* ty=Tensor[(8, 3, 16), float64] */;
  %369 = %362.0;
  (%363, %364, %365, %366, %367, %368, %369)
}

def @func_2944() -> (Tensor[(6, 5, 4), uint16],) {
  %370 = @func_1851() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %371 = %370.0;
  (%371,)
}

def @func_928() -> (Tensor[(?, 5, 4), int8],) {
  %372 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %373 = %372.0;
  (%373,)
}

def @func_5396() -> (Tensor[(?, 5, 4), int8], Tensor[(100), int8], Tensor[(100), int8]) {
  %374 = @func_2921() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(16, 5, 4), float32]) */;
  %375 = cast(meta[relay.Constant][16] /* ty=Tensor[(100), int8] */, dtype="int8") /* ty=Tensor[(100), int8] */;
  %376 = reshape(%375, newshape=[100]) /* ty=Tensor[(100), int8] */;
  %377 = @func_3418(%376) /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), int8], Tensor[(200), float32], Tensor[(100), int8]) */;
  %378 = %374.0;
  %379 = %377.3;
  (%378, %379, meta[relay.Constant][16] /* ty=Tensor[(100), int8] */)
}

def @func_6035(%var_6032: Tensor[(12), float64]) -> (Tensor[(1, 5, 4), float64], Tensor[(12), float64], Tensor[(12), float64]) {
  %380 = cast(%var_6032, dtype="float64") /* ty=Tensor[(12), float64] */;
  %381 = reshape(%380, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %382 = @func_3705(%381) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(1, 88), float32], Tensor[(5, 52), int8], Tensor[(12), float64]) */;
  %383 = @func_5873() /* ty=Tensor[(1, 5, 4), float64] */;
  %384 = %382.3;
  (%383, %384, %var_6032)
}

def @func_1814(%var_1765: Tensor[(600), float64], %var_1767: Tensor[(10, 5, 4), float32]) -> (Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(12, 5, 4), uint16], Tensor[(?, 5, 4), float64], Tensor[(10, 5, 4), bool], Tensor[(12, 5, 4), float32]) {
  %385 = cast(%var_1765, dtype="float64") /* ty=Tensor[(600), float64] */;
  %386 = reshape(%385, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
  %387 = @func_88(%386) /* ty=(Tensor[(10, 5, 12), float64],) */;
  %388 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  %389 = cast(%388, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %390 = atan(%389) /* ty=Tensor[(1, 5, 4), float32] */;
  %391 = cast(%390, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
  %392 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 5, 4), float32] */, dtype="uint16") /* ty=Tensor[(12, 5, 4), uint16] */;
  %393 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
  %396 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %397 = %396.0;
  %398 = cast(%390, dtype="float64") /* ty=Tensor[(1, 5, 4), float64] */;
  %399 = cast(%var_1767, dtype="float64") /* ty=Tensor[(10, 5, 4), float64] */;
  %400 = power(%398, %399) /* ty=Tensor[(10, 5, 4), float64] */;
  %401 = cast(%390, dtype="bool") /* ty=Tensor[(1, 5, 4), bool] */;
  %402 = cast(%400, dtype="bool") /* ty=Tensor[(10, 5, 4), bool] */;
  %403 = greater_equal(%401, %402) /* ty=Tensor[(10, 5, 4), bool] */;
  %404 = cast(%397, dtype="bool") /* ty=Tensor[(?, 5, 4), bool] */;
  %405 = cast(%403, dtype="bool") /* ty=Tensor[(10, 5, 4), bool] */;
  %406 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
  %407 = %387.0;
  %408 = maximum(%391, %392) /* ty=Tensor[(12, 5, 4), uint16] */;
  %409 = sqrt(%395) /* ty=Tensor[(?, 5, 4), float64] */;
  %410 = not_equal(%404, %405) /* ty=Tensor[(10, 5, 4), bool] */;
  %411 = log(%406) /* ty=Tensor[(12, 5, 4), float32] */;
  (%407, %var_1765, %408, %409, %410, %411)
}

def @func_3099() -> (Tensor[(16, 5, 4), bool], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(?, 5, 4), int8]) {
  %412 = @func_2494() /* ty=(Tensor[(16, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32], Tensor[(16, 5, 4), bool]) */;
  %413 = cast(meta[relay.Constant][18] /* ty=Tensor[(300, 2), float64] */, dtype="float64") /* ty=Tensor[(300, 2), float64] */;
  %414 = reshape(%413, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
  %415 = @func_88(%414) /* ty=(Tensor[(10, 5, 12), float64],) */;
  %416 = @func_2312() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %417 = %412.3;
  %418 = %415.0;
  %419 = %416.0;
  (%417, %418, meta[relay.Constant][18] /* ty=Tensor[(300, 2), float64] */, %419)
}

def @func_1246(%var_1218: Tensor[(8, 16, 1), float64]) -> (Tensor[(8, 16, ?), bool],) {
  %420 = cast(%var_1218, dtype="float64") /* ty=Tensor[(8, 16, 1), float64] */;
  %421 = exp(%420) /* ty=Tensor[(8, 16, 1), float64] */;
  %422 = cast(%var_1218, dtype="float64") /* ty=Tensor[(8, 16, 1), float64] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="float64") /* ty=Tensor[(8, 16, 1), float64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %426 = mod(%424, %425) /* ty=Tensor[(8, 16, ?), float64] */;
  %427 = cast(%421, dtype="bool") /* ty=Tensor[(8, 16, 1), bool] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="bool") /* ty=Tensor[(8, 16, ?), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = logical_or(%429, %430) /* ty=Tensor[(8, 16, ?), bool] */;
  (%431,)
}

def @func_6699() -> Tensor[(12), float64] {
  %432 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %432.0
}

def @func_1213() -> (Tensor[(1, 5, 4), float32],) {
  %433 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %435 = exp(%434) /* ty=Tensor[(1, 5, 4), float32] */;
  (%435,)
}

def @func_2966(%var_2954: Tensor[(13, 5, 2), float64], %var_2955: Tensor[(13, 5, 2), float64]) -> (Tensor[(13, 5, 2), bool],) {
  %436 = cast(%var_2955, dtype="float64") /* ty=Tensor[(13, 5, 2), float64] */;
  %437 = shape_of(%var_2954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%var_2954, dtype="float64") /* ty=Tensor[(13, 5, 2), float64] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %440 = maximum(%438, %439) /* ty=Tensor[(13, 5, 2), float64] */;
  %441 = cast(%440, dtype="bool") /* ty=Tensor[(13, 5, 2), bool] */;
  %442 = shape_of(%var_2955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_2955, dtype="bool") /* ty=Tensor[(13, 5, 2), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %445 = less(%443, %444) /* ty=Tensor[(13, 5, 2), bool] */;
  (%445,)
}

def @func_1270() -> Tensor[(1, 5, 4), float32] {
  @func_811() /* ty=Tensor[(1, 5, 4), float32] */
}

def @func_4905(%var_4900: Tensor[(600), float64]) -> (Tensor[(?, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64]) {
  %446 = cast(%var_4900, dtype="float64") /* ty=Tensor[(600), float64] */;
  %447 = reshape(%446, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %448 = @func_4475(%447) /* ty=(Tensor[(12), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), uint64]) */;
  %449 = @func_3904() /* ty=Tensor[(?, 5, 4), float32] */;
  %450 = %448.2;
  (%449, %450, %var_4900)
}

def @func_3904() -> Tensor[(?, 5, 4), float32] {
  %451 = @func_2757() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %451.0
}

def @func_5048() -> (Tensor[(?, 5, 4), int8],) {
  %452 = @func_3934() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %453 = %452.0;
  (%453,)
}

def @func_4011() -> (Tensor[(6, 5, 4), uint16],) {
  %454 = @func_2944() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %455 = %454.0;
  (%455,)
}

def @func_2808() -> (Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) {
  %456 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %457 = cast(meta[relay.Constant][19] /* ty=Tensor[(80), int8] */, dtype="int8") /* ty=Tensor[(80), int8] */;
  %458 = reshape(%457, newshape=[4, 5, 4]) /* ty=Tensor[(4, 5, 4), int8] */;
  %459 = @func_2295(%458) /* ty=(Tensor[(4, 5, 4), float32], Tensor[(?, 5, 4), bool]) */;
  %460 = %456.0;
  %461 = %459.1;
  (%460, %461, meta[relay.Constant][19] /* ty=Tensor[(80), int8] */)
}

def @func_6628() -> (Tensor[(15, 5, 4), int64], Tensor[(12), float64]) {
  %462 = @func_4344() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(12), float64]) */;
  %463 = @func_4344() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(12), float64]) */;
  %464 = %462.0;
  %465 = %463.1;
  (%464, %465)
}

def @func_6616() -> (Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float32], Tensor[(16, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(784), float32], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), uint64]) {
  %466 = @func_3981() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), float32]) */;
  %467 = @func_3464() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %468 = @func_2494() /* ty=(Tensor[(16, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32], Tensor[(16, 5, 4), bool]) */;
  %469 = cast(meta[relay.Constant][20] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %470 = reshape(%469, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %471 = @func_3850(%470) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */;
  %472 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %473 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %474 = %466.0;
  %475 = %467.2;
  %476 = %468.0;
  %477 = %471.0;
  %478 = %472.0;
  %479 = %473.0;
  (%474, %475, %476, %477, meta[relay.Constant][20] /* ty=Tensor[(784), float32] */, %478, %479)
}

def @func_4275() -> (Tensor[(?, 5, 4), float32], Tensor[(80), int8], Tensor[(12), float64], Tensor[(8, 5, 4), float64]) {
  %480 = @func_2757() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %481 = @func_2808() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) */;
  %482 = @func_1597() /* ty=(Tensor[(12), float64],) */;
  %483 = @func_3197() /* ty=(Tensor[(8, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64]) */;
  %484 = %480.0;
  %485 = %481.2;
  %486 = %482.0;
  %487 = %483.0;
  (%484, %485, %486, %487)
}

def @func_2197() -> (Tensor[(12), float64], Tensor[(12), float64]) {
  %488 = @func_1597() /* ty=(Tensor[(12), float64],) */;
  %489 = @func_1597() /* ty=(Tensor[(12), float64],) */;
  %490 = %488.0;
  %491 = %489.0;
  (%490, %491)
}

def @func_2757() -> (Tensor[(?, 5, 4), float32],) {
  %492 = @func_2085() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %493 = %492.0;
  (%493,)
}

def @func_3037() -> (Tensor[(?, 5, 4), float32],) {
  %494 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %495 = %494.1;
  (%495,)
}

def @func_2037() -> (Tensor[(?, 5, 4), int8],) {
  %496 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %497 = %496.0;
  (%497,)
}

def @func_4344() -> (Tensor[(15, 5, 4), int64], Tensor[(12), float64]) {
  %498 = @func_1921() /* ty=Tensor[(?, 5, 4), uint16] */;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
  %500 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 5, 4), uint16] */, dtype="float64") /* ty=Tensor[(15, 5, 4), float64] */;
  %501 = divide(%499, %500) /* ty=Tensor[(15, 5, 4), float64] */;
  %502 = cast(%501, dtype="int64") /* ty=Tensor[(15, 5, 4), int64] */;
  %503 = cast(%498, dtype="int64") /* ty=Tensor[(?, 5, 4), int64] */;
  %504 = @func_4275() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(80), int8], Tensor[(12), float64], Tensor[(8, 5, 4), float64]) */;
  %505 = left_shift(%502, %503) /* ty=Tensor[(15, 5, 4), int64] */;
  %506 = %504.2;
  (%505, %506)
}

def @func_1397() -> (Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) {
  %507 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %509 = asin(%508) /* ty=Tensor[(1, 5, 4), float32] */;
  %510 = cast(%507, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %514 = cast(meta[relay.Constant][22] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %515 = reshape(%514, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %516 = @func_887(%515) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(12), float64]) */;
  %517 = %516.2;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %519 = floor_mod(%512, %513) /* ty=Tensor[(?, 5, 4), float32] */;
  %520 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  %521 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  %522 = rsqrt(%518) /* ty=Tensor[(10, 5, 12), float32] */;
  (meta[relay.Constant][22] /* ty=Tensor[(12), float64] */, %519, %520, %521, %522)
}

def @func_2494() -> (Tensor[(16, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32], Tensor[(16, 5, 4), bool]) {
  %523 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %524 = %523.0;
  %525 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 4), float32] */;
  %526 = cast(%524, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %527 = cast(meta[relay.Constant][24] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %528 = reshape(%527, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %529 = @func_2406(%528) /* ty=(Tensor[(7, 7, 16), float32],) */;
  %530 = cast(%524, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
  %531 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 5, 4), float32] */, dtype="uint16") /* ty=Tensor[(16, 5, 4), uint16] */;
  %532 = left_shift(%530, %531) /* ty=Tensor[(16, 5, 4), uint16] */;
  %533 = cast(%532, dtype="bool") /* ty=Tensor[(16, 5, 4), bool] */;
  %534 = cast(%524, dtype="bool") /* ty=Tensor[(1, 5, 4), bool] */;
  %535 = mod(%525, %526) /* ty=Tensor[(16, 5, 4), float32] */;
  %536 = %529.0;
  %537 = not_equal(%533, %534) /* ty=Tensor[(16, 5, 4), bool] */;
  (%535, %536, meta[relay.Constant][24] /* ty=Tensor[(784), float32] */, %537)
}

def @func_5316(%var_5308: Tensor[(3, 14, 2), float32]) -> Tensor[(3, 14, 2), float32] {
  %538 = cast(%var_5308, dtype="float32") /* ty=Tensor[(3, 14, 2), float32] */;
  log10(%538) /* ty=Tensor[(3, 14, 2), float32] */
}

def @func_1716() -> (Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) {
  %539 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %540 = %539.0;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
  %542 = sin(%541) /* ty=Tensor[(?, 5, 4), float64] */;
  %543 = cast(%540, dtype="uint64") /* ty=Tensor[(?, 5, 4), uint64] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="uint64") /* ty=Tensor[(?, 5, 4), uint64] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %547 = cast(%542, dtype="float32") /* ty=Tensor[(?, 5, 4), float32] */;
  %548 = minimum(%545, %546) /* ty=Tensor[(?, 5, 4), uint64] */;
  %549 = erf(%547) /* ty=Tensor[(?, 5, 4), float32] */;
  (%548, %549)
}

def @func_5508() -> (Tensor[(1, 5, 4), float32],) {
  %550 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
  (%550,)
}

def @func_3507() -> (Tensor[(6, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  %551 = @func_2635() /* ty=Tensor[(6, 5, 4), uint16] */;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(6, 5, 4), float32] */;
  %553 = @func_3295() /* ty=(Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */;
  %554 = asinh(%552) /* ty=Tensor[(6, 5, 4), float32] */;
  %555 = %553.1;
  (%554, %555)
}

def @func_5239() -> (Tensor[(?, 5, 4), uint16], Tensor[(15, 5, 4), int64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  %556 = @func_4344() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(12), float64]) */;
  %557 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %558 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %559 = @func_1921() /* ty=Tensor[(?, 5, 4), uint16] */;
  %560 = %556.0;
  %561 = %557.0;
  %562 = %558.0;
  (%559, %560, %561, %562)
}

def @func_1586() -> (Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float64]) {
  %563 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  %564 = cast(%563, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
  %565 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 5, 4), float32] */, dtype="uint16") /* ty=Tensor[(6, 5, 4), uint16] */;
  %566 = cast(%563, dtype="float64") /* ty=Tensor[(1, 5, 4), float64] */;
  %567 = logical_xor(%564, %565) /* ty=Tensor[(6, 5, 4), uint16] */;
  %568 = log(%566) /* ty=Tensor[(1, 5, 4), float64] */;
  (%567, %568)
}

def @func_6171() -> (Tensor[(?, 5, 4), float32], Tensor[(6, 5, 4), float64]) {
  %569 = @func_5055() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %570 = @func_4011() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(6, 5, 4), float64] */;
  %573 = %569.0;
  %574 = acosh(%572) /* ty=Tensor[(6, 5, 4), float64] */;
  (%573, %574)
}

def @func_4694(%var_4687: Tensor[(7, 5, 4), int8]) -> (Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64], Tensor[(7, 5, 4), uint64]) {
  %575 = @func_3806() /* ty=(Tensor[(12), float64],) */;
  %576 = cast(meta[relay.Constant][26] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %577 = reshape(%576, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %578 = @func_4066(%577) /* ty=(Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) */;
  %579 = @func_4438() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="uint64") /* ty=Tensor[(?, 5, 4), uint64] */;
  %582 = cast(%var_4687, dtype="uint64") /* ty=Tensor[(7, 5, 4), uint64] */;
  %583 = %575.0;
  %584 = @func_3438() /* ty=Tensor[(1, 5, 4), float32] */;
  %585 = %578.4;
  %586 = logical_xor(%581, %582) /* ty=Tensor[(7, 5, 4), uint64] */;
  (%583, %584, %585, meta[relay.Constant][26] /* ty=Tensor[(600), float64] */, %586)
}

def @func_6679(%var_6671: Tensor[(6, 5, 4), uint16]) -> Tensor[(6, 5, 4), bool] {
  %587 = @func_2944() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %588 = %587.0;
  %589 = cast(%var_6671, dtype="bool") /* ty=Tensor[(6, 5, 4), bool] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="bool") /* ty=Tensor[(6, 5, 4), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%591, %592) /* ty=Tensor[(6, 5, 4), bool] */
}

def @func_1126() -> Tensor[(1, 5, 4), float32] {
  @func_811() /* ty=Tensor[(1, 5, 4), float32] */
}

def @main(%var_7302: Tensor[(4, 1, 12), float32]) -> (Tensor[(?, 5, 4), float32], Tensor[(4, 1, 12), float32]) {
  %593 = @func_5055() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %594 = cast(%var_7302, dtype="float32") /* ty=Tensor[(4, 1, 12), float32] */;
  %595 = atanh(%594) /* ty=Tensor[(4, 1, 12), float32] */;
  %596 = cast(%595, dtype="float32") /* ty=Tensor[(4, 1, 12), float32] */;
  %597 = %593.0;
  %598 = atan(%596) /* ty=Tensor[(4, 1, 12), float32] */;
  (%597, %598)
}

def @func_3806() -> (Tensor[(12), float64],) {
  %599 = @func_1597() /* ty=(Tensor[(12), float64],) */;
  %600 = %599.0;
  (%600,)
}

def @func_5426() -> (Tensor[(12), float64], Tensor[(6, 5, 4), float32]) {
  %601 = @func_4275() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(80), int8], Tensor[(12), float64], Tensor[(8, 5, 4), float64]) */;
  %602 = @func_4572() /* ty=(Tensor[(6, 5, 4), float32],) */;
  %603 = %601.2;
  %604 = %602.0;
  (%603, %604)
}

def @func_4617() -> (Tensor[(7, 5, 4), uint64],) {
  %605 = @func_2682() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %606 = %605.0;
  %607 = cast(%606, dtype="uint64") /* ty=Tensor[(1, 5, 4), uint64] */;
  %608 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 5, 4), float32] */, dtype="uint64") /* ty=Tensor[(7, 5, 4), uint64] */;
  %609 = minimum(%607, %608) /* ty=Tensor[(7, 5, 4), uint64] */;
  (%609,)
}

def @func_2635() -> Tensor[(6, 5, 4), uint16] {
  %610 = @func_1851() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %610.0
}

def @func_4716() -> (Tensor[(?, 5, 4), int8],) {
  %611 = @func_4438() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %612 = %611.0;
  (%612,)
}

def @func_2427(%var_2423: Tensor[(600), float64]) -> (Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) {
  %613 = @func_2031() /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %614 = @func_2312() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %615 = cast(%var_2423, dtype="float64") /* ty=Tensor[(600), float64] */;
  %616 = reshape(%615, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
  %617 = @func_88(%616) /* ty=(Tensor[(10, 5, 12), float64],) */;
  %618 = %613.1;
  %619 = %614.0;
  %620 = %617.0;
  (%618, %619, %620, %var_2423)
}

def @func_7266() -> (Tensor[(?, 5, 4), int8],) {
  %621 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %622 = %621.0;
  (%622,)
}

def @func_3746() -> (Tensor[(6, 5, 4), uint16], Tensor[(12), float64]) {
  %623 = @func_1851() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %624 = @func_2197() /* ty=(Tensor[(12), float64], Tensor[(12), float64]) */;
  %625 = %623.0;
  %626 = %624.1;
  (%625, %626)
}

def @func_3216(%var_3209: Tensor[(7, 5, 4), float64]) -> (Tensor[(7, 5, 4), uint32],) {
  %627 = @func_1586() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float64]) */;
  %628 = %627.1;
  %629 = cast(%628, dtype="uint32") /* ty=Tensor[(1, 5, 4), uint32] */;
  %630 = cast(%var_3209, dtype="uint32") /* ty=Tensor[(7, 5, 4), uint32] */;
  %631 = subtract(%629, %630) /* ty=Tensor[(7, 5, 4), uint32] */;
  (%631,)
}

def @func_5679(%var_5608: Tensor[(13, 10, 8), float32], %var_5620: Tensor[(13, 10, 8), float32], %var_5671: Tensor[(100), int8]) -> (Tensor[(13, 10, 8), int64], Tensor[(?, 5, 4), float32], Tensor[(13, 10, 8), float64], Tensor[(12), float64], Tensor[(200), float32], Tensor[(100), int8], Tensor[(?, 5, 4), uint16]) {
  %632 = cast(%var_5608, dtype="float32") /* ty=Tensor[(13, 10, 8), float32] */;
  %633 = log(%632) /* ty=Tensor[(13, 10, 8), float32] */;
  %634 = cast(%var_5620, dtype="int64") /* ty=Tensor[(13, 10, 8), int64] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="int64") /* ty=Tensor[(13, 10, 8), int64] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %638 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %639 = cast(%var_5620, dtype="float64") /* ty=Tensor[(13, 10, 8), float64] */;
  %640 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%633, dtype="float64") /* ty=Tensor[(13, 10, 8), float64] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %643 = cast(meta[relay.Constant][28] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %644 = cast(%var_5671, dtype="int8") /* ty=Tensor[(100), int8] */;
  %645 = reshape(%643, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %646 = reshape(%644, newshape=[100]) /* ty=Tensor[(100), int8] */;
  %647 = @func_3789(%645, %646) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(10, 5, 4), bool], Tensor[(600), float64], Tensor[(200), float32], Tensor[(300, 2), float64], Tensor[(100), int8], Tensor[(12), float64]) */;
  %648 = minimum(%636, %637) /* ty=Tensor[(13, 10, 8), int64] */;
  %649 = %638.0;
  %650 = power(%641, %642) /* ty=Tensor[(13, 10, 8), float64] */;
  %651 = %647.6;
  %652 = @func_1921() /* ty=Tensor[(?, 5, 4), uint16] */;
  (%648, %649, %650, %651, meta[relay.Constant][28] /* ty=Tensor[(200), float32] */, %var_5671, %652)
}

def @func_5873() -> Tensor[(1, 5, 4), float64] {
  %653 = @func_1586() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float64]) */;
  %653.1
}

def @func_6529() -> (Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) {
  %654 = @func_5131() /* ty=(Tensor[(6, 5, 4), float64], Tensor[(1, 5, 4), float32], Tensor[(3, 4), float64]) */;
  %655 = @func_3464() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %656 = @func_2808() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) */;
  %657 = %656.0;
  %658 = cast(%657, dtype="float32") /* ty=Tensor[(?, 5, 4), float32] */;
  %659 = @func_5055() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %660 = %654.1;
  %661 = %655.2;
  %662 = cos(%658) /* ty=Tensor[(?, 5, 4), float32] */;
  %663 = %659.0;
  (%660, %661, %662, %663)
}

def @func_1431() -> (Tensor[(12), float64],) {
  %664 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %665 = %664.0;
  (%665,)
}

def @func_3879() -> Tensor[(?, 5, 4), int8] {
  %666 = @func_2312() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %666.0
}

def @func_5933() -> (Tensor[(?, 5, 4), uint64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(60, 10), float64], Tensor[(200, 1), float32]) {
  %667 = @func_5177() /* ty=(Tensor[(?, 5, 4), uint64],) */;
  %668 = @func_5585() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(1, 5, 4), float32]) */;
  %669 = cast(meta[relay.Constant][29] /* ty=Tensor[(60, 10), float64] */, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %670 = cast(meta[relay.Constant][30] /* ty=Tensor[(200, 1), float32] */, dtype="float32") /* ty=Tensor[(200, 1), float32] */;
  %671 = reshape(%669, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %672 = reshape(%670, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), float32] */;
  %673 = @func_1814(%671, %672) /* ty=(Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(12, 5, 4), uint16], Tensor[(?, 5, 4), float64], Tensor[(10, 5, 4), bool], Tensor[(12, 5, 4), float32]) */;
  %674 = %667.0;
  %675 = %668.1;
  %676 = %673.0;
  (%674, %675, %676, meta[relay.Constant][29] /* ty=Tensor[(60, 10), float64] */, meta[relay.Constant][30] /* ty=Tensor[(200, 1), float32] */)
}

def @func_6330() -> (Tensor[(?, 5, 4), int8], Tensor[(800), float32], Tensor[(200), int8], Tensor[(800), float32]) {
  %677 = cast(meta[relay.Constant][31] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %678 = cast(meta[relay.Constant][32] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %679 = reshape(%677, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int8] */;
  %680 = reshape(%678, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %681 = @func_1056(%679, %680) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(10, 5, 16), float32], Tensor[(800), float32], Tensor[(?, 5, 4), int32]) */;
  %682 = @func_3879() /* ty=Tensor[(?, 5, 4), int8] */;
  %683 = %681.2;
  (%682, %683, meta[relay.Constant][31] /* ty=Tensor[(200), int8] */, meta[relay.Constant][32] /* ty=Tensor[(800), float32] */)
}

def @func_1851() -> (Tensor[(6, 5, 4), uint16],) {
  %684 = @func_1586() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float64]) */;
  %685 = %684.0;
  (%685,)
}

def @func_5585() -> (Tensor[(?, 5, 4), int8], Tensor[(1, 5, 4), float32]) {
  %686 = @func_2312() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %687 = %686.0;
  %688 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  (%687, %688)
}

def @func_567(%var_495: Tensor[(1, 8, 11), float32], %var_509: Tensor[(12), float64]) -> (Tensor[(1, 8, 11), float32], Tensor[(2, 2, 3), float64], Tensor[(12), float64], Tensor[(?, 8, 11), bool], Tensor[(600), float64]) {
  %689 = cast(-9.91226f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %690 = cast(%var_495, dtype="float32") /* ty=Tensor[(1, 8, 11), float32] */;
  %691 = cast(%var_509, dtype="float64") /* ty=Tensor[(12), float64] */;
  %692 = cast(%var_509, dtype="float64") /* ty=Tensor[(12), float64] */;
  %693 = reshape(%691, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %694 = reshape(%692, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %695 = @func_256(%693, %694) /* ty=(Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) */;
  %696 = cast(%var_495, dtype="float64") /* ty=Tensor[(1, 8, 11), float64] */;
  %697 = asin(%696) /* ty=Tensor[(1, 8, 11), float64] */;
  %698 = cast(%var_495, dtype="bool") /* ty=Tensor[(1, 8, 11), bool] */;
  %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%697, dtype="bool") /* ty=Tensor[(1, 8, 11), bool] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %702 = %695.0;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
  %704 = cast(%702, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
  %705 = reshape(%703, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %706 = reshape(%704, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %707 = @func_256(%705, %706) /* ty=(Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) */;
  %708 = %707.3;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(600), float64] */;
  %710 = power(%689, %690) /* ty=Tensor[(1, 8, 11), float32] */;
  %711 = not_equal(%700, %701) /* ty=Tensor[(?, 8, 11), bool] */;
  %712 = log2(%709) /* ty=Tensor[(600), float64] */;
  (%710, %702, %var_509, %711, %712)
}

def @func_1921() -> Tensor[(?, 5, 4), uint16] {
  %713 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
  %714 = cast(%713, dtype="float64") /* ty=Tensor[(1, 5, 4), float64] */;
  %715 = acos(%714) /* ty=Tensor[(1, 5, 4), float64] */;
  %716 = cast(%713, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
  %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%715, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%718, %719) /* ty=Tensor[(?, 5, 4), uint16] */
}

def @func_3337(%var_3330: Tensor[(7, 10, 11), int32], %var_3331: Tensor[(7, 10, 11), int32]) -> Tensor[(7, 10, 11), int32] {
  %720 = cast(%var_3331, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
  %721 = shape_of(%var_3330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%var_3330, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%722, %723) /* ty=Tensor[(7, 10, 11), int32] */
}

def @func_3418(%var_3403: Tensor[(100), int8]) -> (Tensor[(12), float64], Tensor[(?, 5, 4), int8], Tensor[(200), float32], Tensor[(100), int8]) {
  %724 = @func_3295() /* ty=(Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */;
  %725 = @func_2037() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %726 = cast(%var_3403, dtype="int8") /* ty=Tensor[(100), int8] */;
  %727 = reshape(%726, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), int8] */;
  %728 = @func_3253(%727) /* ty=(Tensor[(5, 5, 4), uint32], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(200), float32]) */;
  %729 = %724.0;
  %730 = %725.0;
  %731 = %728.3;
  (%729, %730, %731, %var_3403)
}

def @func_5969(%var_5959: Tensor[(1, 7, 10), float32]) -> Tensor[(1, 7, 10), float32] {
  %732 = cast(%var_5959, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  cos(%732) /* ty=Tensor[(1, 7, 10), float32] */
}

def @func_6662() -> (Tensor[(12), float64], Tensor[(3, 4), float64]) {
  %733 = @func_3295() /* ty=(Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */;
  %734 = @func_5131() /* ty=(Tensor[(6, 5, 4), float64], Tensor[(1, 5, 4), float32], Tensor[(3, 4), float64]) */;
  %735 = %733.0;
  %736 = %734.2;
  (%735, %736)
}

def @func_2885() -> (Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), uint64], Tensor[(12), float64], Tensor[(1, 5, 4), float32]) {
  %737 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %738 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %739 = @func_1597() /* ty=(Tensor[(12), float64],) */;
  %740 = %737.1;
  %741 = %738.0;
  %742 = %739.0;
  %743 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  (%740, %741, %742, %743)
}

def @func_1597() -> (Tensor[(12), float64],) {
  %744 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %745 = %744.0;
  (%745,)
}

def @func_5177() -> (Tensor[(?, 5, 4), uint64],) {
  %746 = @func_2524() /* ty=Tensor[(?, 5, 4), uint64] */;
  (%746,)
}

def @func_3789(%var_3768: Tensor[(200), float32], %var_3777: Tensor[(100), int8]) -> (Tensor[(1, 5, 4), float32], Tensor[(10, 5, 4), bool], Tensor[(600), float64], Tensor[(200), float32], Tensor[(300, 2), float64], Tensor[(100), int8], Tensor[(12), float64]) {
  %747 = cast(meta[relay.Constant][33] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %748 = cast(%var_3768, dtype="float32") /* ty=Tensor[(200), float32] */;
  %749 = reshape(%747, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %750 = reshape(%748, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), float32] */;
  %751 = @func_1814(%749, %750) /* ty=(Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(12, 5, 4), uint16], Tensor[(?, 5, 4), float64], Tensor[(10, 5, 4), bool], Tensor[(12, 5, 4), float32]) */;
  %752 = cast(%var_3777, dtype="int8") /* ty=Tensor[(100), int8] */;
  %753 = reshape(%752, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), int8] */;
  %754 = @func_3253(%753) /* ty=(Tensor[(5, 5, 4), uint32], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(200), float32]) */;
  %755 = @func_1431() /* ty=(Tensor[(12), float64],) */;
  %756 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  %757 = %751.4;
  %758 = %754.2;
  %759 = %755.0;
  (%756, %757, meta[relay.Constant][33] /* ty=Tensor[(600), float64] */, %var_3768, %758, %var_3777, %759)
}

def @func_3197() -> (Tensor[(8, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64]) {
  %760 = @func_1957() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) */;
  %761 = %760.1;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
  %763 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 5, 4), float32] */, dtype="float64") /* ty=Tensor[(8, 5, 4), float64] */;
  %764 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 2), float64] */;
  %765 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 2), float64] */;
  %766 = reshape(%764, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %767 = reshape(%765, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %768 = @func_256(%766, %767) /* ty=(Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) */;
  %769 = mod(%762, %763) /* ty=Tensor[(8, 5, 4), float64] */;
  %770 = %768.2;
  (%769, %770, meta[relay.Constant][35] /* ty=Tensor[(6, 2), float64] */)
}

def @func_3705(%var_3680: Tensor[(12), float64]) -> (Tensor[(?, 5, 4), float32], Tensor[(1, 88), float32], Tensor[(5, 52), int8], Tensor[(12), float64]) {
  %771 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %772 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 52), int8] */, dtype="int8") /* ty=Tensor[(5, 52), int8] */;
  %773 = cast(%var_3680, dtype="float64") /* ty=Tensor[(12), float64] */;
  %774 = reshape(%772, newshape=[13, 5, 4]) /* ty=Tensor[(13, 5, 4), int8] */;
  %775 = reshape(%773, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %776 = @func_2605(%774, %775) /* ty=(Tensor[(13, 5, 4), bool], Tensor[(1, 88), float32], Tensor[(12), float64], Tensor[(?, 5, 4), uint64], Tensor[(1, 8, 11), float32], Tensor[(12), float64], Tensor[(?, 5, 4), float32]) */;
  %777 = %771.0;
  %778 = %776.1;
  (%777, %778, meta[relay.Constant][36] /* ty=Tensor[(5, 52), int8] */, %var_3680)
}

def @func_3464() -> (Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  %779 = @func_3295() /* ty=(Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */;
  %780 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %781 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %782 = %779.0;
  %783 = %780.0;
  %784 = %781.0;
  (%782, %783, %784)
}

def @func_6285() -> (Tensor[(6, 5, 4), uint16],) {
  %785 = @func_2944() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %786 = %785.0;
  (%786,)
}

def @func_88(%var_74: Tensor[(10, 5, 12), float64]) -> (Tensor[(10, 5, 12), float64],) {
  %787 = cast(%var_74, dtype="float64") /* ty=Tensor[(10, 5, 12), float64] */;
  %788 = acosh(%787) /* ty=Tensor[(10, 5, 12), float64] */;
  (%788,)
}

def @func_887(%var_883: Tensor[(12), float64]) -> (Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(12), float64]) {
  %789 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(1, 5, 4), float64] */;
  %791 = sinh(%790) /* ty=Tensor[(1, 5, 4), float64] */;
  %792 = cast(%791, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %793 = cast(%var_883, dtype="float64") /* ty=Tensor[(12), float64] */;
  %794 = cast(%var_883, dtype="float64") /* ty=Tensor[(12), float64] */;
  %795 = reshape(%793, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %796 = reshape(%794, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %797 = @func_256(%795, %796) /* ty=(Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) */;
  %798 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
  %799 = cosh(%792) /* ty=Tensor[(1, 5, 4), float32] */;
  %800 = %797.4;
  (%798, %799, %800, %var_883)
}

def @func_6857() -> (Tensor[(6, 5, 4), float64], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(6, 2), float64], Tensor[(1, 5, 4), float32], Tensor[(8, 5, 4), float64]) {
  %801 = @func_6171() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(6, 5, 4), float64]) */;
  %802 = @func_3981() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), float32]) */;
  %803 = @func_3197() /* ty=(Tensor[(8, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64]) */;
  %804 = @func_6100() /* ty=(Tensor[(8, 5, 4), float64],) */;
  %805 = %801.1;
  %806 = @func_3904() /* ty=Tensor[(?, 5, 4), float32] */;
  %807 = %802.1;
  %808 = %803.2;
  %809 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  %810 = %804.0;
  (%805, %806, %807, %808, %809, %810)
}

def @func_4941(%var_4929: Tensor[(1, 240), uint64], %var_4937: Tensor[(12), float64]) -> (Tensor[(?, 5, 4), int8], Tensor[(300, 2), float64], Tensor[(12, 5, 4), float32], Tensor[(1, 240), uint64], Tensor[(?, 5, 4), float32], Tensor[(12), float64], Tensor[(15, 5, 4), int64]) {
  %811 = @func_4438() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %812 = @func_3099() /* ty=(Tensor[(16, 5, 4), bool], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(?, 5, 4), int8]) */;
  %813 = cast(%var_4929, dtype="uint64") /* ty=Tensor[(1, 240), uint64] */;
  %814 = reshape(%813, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), uint64] */;
  %815 = @func_1888(%814) /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(12, 5, 4), float32]) */;
  %816 = cast(%var_4937, dtype="float64") /* ty=Tensor[(12), float64] */;
  %817 = reshape(%816, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %818 = @func_3705(%817) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(1, 88), float32], Tensor[(5, 52), int8], Tensor[(12), float64]) */;
  %819 = @func_4344() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(12), float64]) */;
  %820 = %811.0;
  %821 = %812.2;
  %822 = %815.1;
  %823 = %818.0;
  %824 = %819.0;
  (%820, %821, %822, %var_4929, %823, %var_4937, %824)
}

def @func_2312() -> (Tensor[(?, 5, 4), int8],) {
  %825 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %826 = %825.0;
  (%826,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6373(%var_6371: Tensor[(24, 10), uint64]) -> (Tensor[(?, 5, 4), float32], Tensor[(1, 240), uint64], Tensor[(24, 10), uint64], Tensor[(12), float64], Tensor[(1, 5, 4), float32]) {
  @func_6370(%var_6371) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(1, 240), uint64], Tensor[(24, 10), uint64], Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */
}

def @func_6859() -> (Tensor[(6, 5, 4), float64], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(6, 2), float64], Tensor[(1, 5, 4), float32], Tensor[(8, 5, 4), float64]) {
  @func_6857() /* ty=(Tensor[(6, 5, 4), float64], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(6, 2), float64], Tensor[(1, 5, 4), float32], Tensor[(8, 5, 4), float64]) */
}

def @func_3906() -> Tensor[(?, 5, 4), float32] {
  @func_3904() /* ty=Tensor[(?, 5, 4), float32] */
}

def @func_5935() -> (Tensor[(?, 5, 4), uint64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(60, 10), float64], Tensor[(200, 1), float32]) {
  @func_5933() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(60, 10), float64], Tensor[(200, 1), float32]) */
}

def @func_2408(%var_2407: Tensor[(7, 7, 16), float32]) -> (Tensor[(7, 7, 16), float32],) {
  %2 = fn (%var_2402: Tensor[(7, 7, 16), float32]) -> (Tensor[(7, 7, 16), float32],) {
    %0 = cast(%var_2402, dtype="float32") /* ty=Tensor[(7, 7, 16), float32] */;
    %1 = sigmoid(%0) /* ty=Tensor[(7, 7, 16), float32] */;
    (%1,)
  };
  %2(%var_2407) /* ty=(Tensor[(7, 7, 16), float32],) */
}

def @func_4069(%var_4067: Tensor[(600), float64]) -> (Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) {
  @func_4066(%var_4067) /* ty=(Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) */
}

def @func_5027(%var_5026: Tensor[(16, 12, 4), float32]) -> (Tensor[(16, 12, 4), float32], Tensor[(16, 12, 4), float32]) {
  %7 = fn (%var_5001: Tensor[(16, 12, 4), float32]) -> (Tensor[(16, 12, 4), float32], Tensor[(16, 12, 4), float32]) {
    %3 = cast(%var_5001, dtype="float32") /* ty=Tensor[(16, 12, 4), float32] */;
    %4 = cast(%var_5001, dtype="float32") /* ty=Tensor[(16, 12, 4), float32] */;
    %5 = exp(%3) /* ty=Tensor[(16, 12, 4), float32] */;
    %6 = acosh(%4) /* ty=Tensor[(16, 12, 4), float32] */;
    (%5, %6)
  };
  %7(%var_5026) /* ty=(Tensor[(16, 12, 4), float32], Tensor[(16, 12, 4), float32]) */
}

def @func_3296() -> (Tensor[(12), float64], Tensor[(1, 5, 4), float32]) {
  %12 = fn () -> (Tensor[(12), float64], Tensor[(1, 5, 4), float32]) {
    %8 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
    %9 = @func_2031() /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
    %10 = %8.0;
    %11 = %9.1;
    (%10, %11)
  };
  %12() /* ty=(Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */
}

def @func_4716() -> (Tensor[(?, 5, 4), int8],) {
  %13 = @func_4438() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %14 = %13.0;
  (%14,)
}

def @func_2970(%var_2968: Tensor[(13, 5, 2), float64], %var_2969: Tensor[(13, 5, 2), float64]) -> (Tensor[(13, 5, 2), bool],) {
  @func_2966(%var_2968, %var_2969) /* ty=(Tensor[(13, 5, 2), bool],) */
}

def @func_5241() -> (Tensor[(?, 5, 4), uint16], Tensor[(15, 5, 4), int64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  @func_5239() /* ty=(Tensor[(?, 5, 4), uint16], Tensor[(15, 5, 4), int64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */
}

def @func_1215() -> (Tensor[(1, 5, 4), float32],) {
  @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */
}

def @func_2086() -> (Tensor[(?, 5, 4), float32],) {
  %17 = fn () -> (Tensor[(?, 5, 4), float32],) {
    %15 = @func_1957() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) */;
    %16 = %15.0;
    (%16,)
  };
  %17() /* ty=(Tensor[(?, 5, 4), float32],) */
}

def @func_4276() -> (Tensor[(?, 5, 4), float32], Tensor[(80), int8], Tensor[(12), float64], Tensor[(8, 5, 4), float64]) {
  %26 = fn () -> (Tensor[(?, 5, 4), float32], Tensor[(80), int8], Tensor[(12), float64], Tensor[(8, 5, 4), float64]) {
    %18 = @func_2757() /* ty=(Tensor[(?, 5, 4), float32],) */;
    %19 = @func_2808() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) */;
    %20 = @func_1597() /* ty=(Tensor[(12), float64],) */;
    %21 = @func_3197() /* ty=(Tensor[(8, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64]) */;
    %22 = %18.0;
    %23 = %19.2;
    %24 = %20.0;
    %25 = %21.0;
    (%22, %23, %24, %25)
  };
  %26() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(80), int8], Tensor[(12), float64], Tensor[(8, 5, 4), float64]) */
}

def @func_3853(%var_3851: Tensor[(784), float32]) -> (Tensor[(?, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) {
  @func_3850(%var_3851) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */
}

def @func_4776(%var_4743: Tensor[(4, 15, 6), uint32]) -> (Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64], Tensor[(4, 15, 6), float32]) {
  %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 2), float64] */;
  %28 = reshape(%27, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %29 = @func_887(%28) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(12), float64]) */;
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 15, 6), uint32] */, dtype="uint32") /* ty=Tensor[(4, 15, 6), uint32] */;
  %31 = shape_of(%var_4743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_4743, dtype="uint32") /* ty=Tensor[(4, 15, 6), uint32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %34 = multiply(%32, %33) /* ty=Tensor[(4, 15, 6), uint32] */;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(4, 15, 6), float32] */;
  %36 = %29.2;
  %37 = acos(%35) /* ty=Tensor[(4, 15, 6), float32] */;
  (%36, meta[relay.Constant][0] /* ty=Tensor[(6, 2), float64] */, %37)
}

def @func_6927(%var_6925: Tensor[(14, 5, 4), float32], %var_6926: Tensor[(600), float64]) -> (Tensor[(14, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64], Tensor[(1, 5, 4), float32]) {
  @func_6923(%var_6925, %var_6926) /* ty=(Tensor[(14, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64], Tensor[(1, 5, 4), float32]) */
}

def @func_2966(%var_2954: Tensor[(13, 5, 2), float64], %var_2955: Tensor[(13, 5, 2), float64]) -> (Tensor[(13, 5, 2), bool],) {
  %38 = cast(%var_2955, dtype="float64") /* ty=Tensor[(13, 5, 2), float64] */;
  %39 = shape_of(%var_2954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%var_2954, dtype="float64") /* ty=Tensor[(13, 5, 2), float64] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %42 = maximum(%40, %41) /* ty=Tensor[(13, 5, 2), float64] */;
  %43 = cast(%42, dtype="bool") /* ty=Tensor[(13, 5, 2), bool] */;
  %44 = shape_of(%var_2955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_2955, dtype="bool") /* ty=Tensor[(13, 5, 2), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %47 = less(%45, %46) /* ty=Tensor[(13, 5, 2), bool] */;
  (%47,)
}

def @func_3101() -> (Tensor[(16, 5, 4), bool], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(?, 5, 4), int8]) {
  @func_3099() /* ty=(Tensor[(16, 5, 4), bool], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(?, 5, 4), int8]) */
}

def @func_4887(%var_4886: Tensor[(2, 5, 4), float32]) -> (Tensor[(?, 5, 4), int8], Tensor[(2, 5, 4), uint16]) {
  %55 = fn (%var_4878: Tensor[(2, 5, 4), float32]) -> (Tensor[(?, 5, 4), int8], Tensor[(2, 5, 4), uint16]) {
    %48 = @func_4716() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %49 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
    %50 = %49.0;
    %51 = cast(%50, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
    %52 = cast(%var_4878, dtype="uint16") /* ty=Tensor[(2, 5, 4), uint16] */;
    %53 = %48.0;
    %54 = right_shift(%51, %52) /* ty=Tensor[(2, 5, 4), uint16] */;
    (%53, %54)
  };
  %55(%var_4886) /* ty=(Tensor[(?, 5, 4), int8], Tensor[(2, 5, 4), uint16]) */
}

def @func_5131() -> (Tensor[(6, 5, 4), float64], Tensor[(1, 5, 4), float32], Tensor[(3, 4), float64]) {
  %56 = @func_4543() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(6, 5, 4), uint16]) */;
  %57 = %56.1;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(6, 5, 4), float64] */;
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 4), float64] */;
  %60 = reshape(%59, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %61 = @func_887(%60) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(12), float64]) */;
  %62 = sqrt(%58) /* ty=Tensor[(6, 5, 4), float64] */;
  %63 = %61.1;
  (%62, %63, meta[relay.Constant][2] /* ty=Tensor[(3, 4), float64] */)
}

def @func_3507() -> (Tensor[(6, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  %64 = @func_2635() /* ty=Tensor[(6, 5, 4), uint16] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(6, 5, 4), float32] */;
  %66 = @func_3295() /* ty=(Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */;
  %67 = asinh(%65) /* ty=Tensor[(6, 5, 4), float32] */;
  %68 = %66.1;
  (%67, %68)
}

def @func_1888(%var_1867: Tensor[(12, 5, 4), uint64]) -> (Tensor[(?, 5, 4), uint64], Tensor[(12, 5, 4), float32]) {
  %69 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %70 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %71 = %70.0;
  %72 = cast(%71, dtype="int16") /* ty=Tensor[(?, 5, 4), int16] */;
  %73 = cast(%var_1867, dtype="int16") /* ty=Tensor[(12, 5, 4), int16] */;
  %74 = left_shift(%72, %73) /* ty=Tensor[(12, 5, 4), int16] */;
  %75 = cast(%74, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
  %76 = %69.0;
  %77 = atan(%75) /* ty=Tensor[(12, 5, 4), float32] */;
  (%76, %77)
}

def @func_2336() -> (Tensor[(1, 5, 4), float32],) {
  %78 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  (%78,)
}

def @func_3509() -> (Tensor[(6, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  @func_3507() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(1, 5, 4), float32]) */
}

def @func_1248(%var_1247: Tensor[(8, 16, 1), float64]) -> (Tensor[(8, 16, ?), bool],) {
  %91 = fn (%var_1218: Tensor[(8, 16, 1), float64]) -> (Tensor[(8, 16, ?), bool],) {
    %79 = cast(%var_1218, dtype="float64") /* ty=Tensor[(8, 16, 1), float64] */;
    %80 = exp(%79) /* ty=Tensor[(8, 16, 1), float64] */;
    %81 = cast(%var_1218, dtype="float64") /* ty=Tensor[(8, 16, 1), float64] */;
    %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
    %83 = cast(%80, dtype="float64") /* ty=Tensor[(8, 16, 1), float64] */;
    %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %85 = mod(%83, %84) /* ty=Tensor[(8, 16, ?), float64] */;
    %86 = cast(%80, dtype="bool") /* ty=Tensor[(8, 16, 1), bool] */;
    %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
    %88 = cast(%85, dtype="bool") /* ty=Tensor[(8, 16, ?), bool] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %90 = logical_or(%88, %89) /* ty=Tensor[(8, 16, ?), bool] */;
    (%90,)
  };
  %91(%var_1247) /* ty=(Tensor[(8, 16, ?), bool],) */
}

def @func_4573() -> (Tensor[(6, 5, 4), float32],) {
  %94 = fn () -> (Tensor[(6, 5, 4), float32],) {
    %92 = @func_4543() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(6, 5, 4), uint16]) */;
    %93 = %92.0;
    (%93,)
  };
  %94() /* ty=(Tensor[(6, 5, 4), float32],) */
}

def @func_3807() -> (Tensor[(12), float64],) {
  %97 = fn () -> (Tensor[(12), float64],) {
    %95 = @func_1597() /* ty=(Tensor[(12), float64],) */;
    %96 = %95.0;
    (%96,)
  };
  %97() /* ty=(Tensor[(12), float64],) */
}

def @func_7183(%var_7182: Tensor[(14, 5, 4), int8]) -> (Tensor[(12), float64], Tensor[(12), float64], Tensor[(600), float64], Tensor[(14, 5, 4), int8], Tensor[(6, 5, 4), int64]) {
  %114 = fn (%var_7122: Tensor[(14, 5, 4), int8]) -> (Tensor[(12), float64], Tensor[(12), float64], Tensor[(600), float64], Tensor[(14, 5, 4), int8], Tensor[(6, 5, 4), int64]) {
    %98 = @func_1597() /* ty=(Tensor[(12), float64],) */;
    %99 = cast(meta[relay.Constant][3] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
    %100 = reshape(%99, newshape=[600]) /* ty=Tensor[(600), float64] */;
    %101 = @func_4475(%100) /* ty=(Tensor[(12), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), uint64]) */;
    %102 = @func_5048() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %103 = %102.0;
    %104 = cast(%103, dtype="int8") /* ty=Tensor[(?, 5, 4), int8] */;
    %105 = cast(%var_7122, dtype="int8") /* ty=Tensor[(14, 5, 4), int8] */;
    %106 = @func_4543() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(6, 5, 4), uint16]) */;
    %107 = %106.1;
    %108 = cast(%107, dtype="int64") /* ty=Tensor[(6, 5, 4), int64] */;
    %109 = cast(%103, dtype="int64") /* ty=Tensor[(?, 5, 4), int64] */;
    %110 = %98.0;
    %111 = %101.0;
    %112 = bitwise_xor(%104, %105) /* ty=Tensor[(14, 5, 4), int8] */;
    %113 = subtract(%108, %109) /* ty=Tensor[(6, 5, 4), int64] */;
    (%110, %111, meta[relay.Constant][3] /* ty=Tensor[(600), float64] */, %112, %113)
  };
  %114(%var_7182) /* ty=(Tensor[(12), float64], Tensor[(12), float64], Tensor[(600), float64], Tensor[(14, 5, 4), int8], Tensor[(6, 5, 4), int64]) */
}

def @func_5106(%var_5104: Tensor[(13, 1, 3), float32], %var_5105: Tensor[(13, 6, 3), float32]) -> (Tensor[(13, 6, 3), float32],) {
  @func_5102(%var_5104, %var_5105) /* ty=(Tensor[(13, 6, 3), float32],) */
}

def @func_2684() -> (Tensor[(1, 5, 4), float32],) {
  @func_2682() /* ty=(Tensor[(1, 5, 4), float32],) */
}

def @func_3439() -> Tensor[(1, 5, 4), float32] {
  %116 = fn () -> Tensor[(1, 5, 4), float32] {
    %115 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
    %115.0
  };
  %116() /* ty=Tensor[(1, 5, 4), float32] */
}

def @func_3197() -> (Tensor[(8, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64]) {
  %117 = @func_1957() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) */;
  %118 = %117.1;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
  %120 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 5, 4), float32] */, dtype="float64") /* ty=Tensor[(8, 5, 4), float64] */;
  %121 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 2), float64] */;
  %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 2), float64] */;
  %123 = reshape(%121, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %124 = reshape(%122, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %125 = @func_256(%123, %124) /* ty=(Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) */;
  %126 = mod(%119, %120) /* ty=Tensor[(8, 5, 4), float64] */;
  %127 = %125.2;
  (%126, %127, meta[relay.Constant][5] /* ty=Tensor[(6, 2), float64] */)
}

def @func_2635() -> Tensor[(6, 5, 4), uint16] {
  %128 = @func_1851() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %128.0
}

def @func_90(%var_89: Tensor[(10, 5, 12), float64]) -> (Tensor[(10, 5, 12), float64],) {
  %131 = fn (%var_74: Tensor[(10, 5, 12), float64]) -> (Tensor[(10, 5, 12), float64],) {
    %129 = cast(%var_74, dtype="float64") /* ty=Tensor[(10, 5, 12), float64] */;
    %130 = acosh(%129) /* ty=Tensor[(10, 5, 12), float64] */;
    (%130,)
  };
  %131(%var_89) /* ty=(Tensor[(10, 5, 12), float64],) */
}

def @func_6370(%var_6342: Tensor[(24, 10), uint64]) -> (Tensor[(?, 5, 4), float32], Tensor[(1, 240), uint64], Tensor[(24, 10), uint64], Tensor[(12), float64], Tensor[(1, 5, 4), float32]) {
  %132 = @func_2085() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %133 = cast(%var_6342, dtype="uint64") /* ty=Tensor[(24, 10), uint64] */;
  %134 = cast(meta[relay.Constant][6] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %135 = reshape(%133, newshape=[1, 240]) /* ty=Tensor[(1, 240), uint64] */;
  %136 = reshape(%134, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %137 = @func_4941(%135, %136) /* ty=(Tensor[(?, 5, 4), int8], Tensor[(300, 2), float64], Tensor[(12, 5, 4), float32], Tensor[(1, 240), uint64], Tensor[(?, 5, 4), float32], Tensor[(12), float64], Tensor[(15, 5, 4), int64]) */;
  %138 = %132.0;
  %139 = %137.3;
  %140 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
  (%138, %139, %var_6342, meta[relay.Constant][6] /* ty=Tensor[(12), float64] */, %140)
}

def @func_4438() -> (Tensor[(?, 5, 4), int8],) {
  %141 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %142 = %141.0;
  (%142,)
}

def @func_1817(%var_1815: Tensor[(600), float64], %var_1816: Tensor[(10, 5, 4), float32]) -> (Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(12, 5, 4), uint16], Tensor[(?, 5, 4), float64], Tensor[(10, 5, 4), bool], Tensor[(12, 5, 4), float32]) {
  %170 = fn (%var_1765: Tensor[(600), float64], %var_1767: Tensor[(10, 5, 4), float32]) -> (Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(12, 5, 4), uint16], Tensor[(?, 5, 4), float64], Tensor[(10, 5, 4), bool], Tensor[(12, 5, 4), float32]) {
    %143 = cast(%var_1765, dtype="float64") /* ty=Tensor[(600), float64] */;
    %144 = reshape(%143, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
    %145 = @func_88(%144) /* ty=(Tensor[(10, 5, 12), float64],) */;
    %146 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
    %147 = cast(%146, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
    %148 = atan(%147) /* ty=Tensor[(1, 5, 4), float32] */;
    %149 = cast(%148, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
    %150 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 5, 4), float32] */, dtype="uint16") /* ty=Tensor[(12, 5, 4), uint16] */;
    %151 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %152 = %151.0;
    %153 = cast(%152, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
    %154 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %155 = %154.0;
    %156 = cast(%148, dtype="float64") /* ty=Tensor[(1, 5, 4), float64] */;
    %157 = cast(%var_1767, dtype="float64") /* ty=Tensor[(10, 5, 4), float64] */;
    %158 = power(%156, %157) /* ty=Tensor[(10, 5, 4), float64] */;
    %159 = cast(%148, dtype="bool") /* ty=Tensor[(1, 5, 4), bool] */;
    %160 = cast(%158, dtype="bool") /* ty=Tensor[(10, 5, 4), bool] */;
    %161 = greater_equal(%159, %160) /* ty=Tensor[(10, 5, 4), bool] */;
    %162 = cast(%155, dtype="bool") /* ty=Tensor[(?, 5, 4), bool] */;
    %163 = cast(%161, dtype="bool") /* ty=Tensor[(10, 5, 4), bool] */;
    %164 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 4), float32] */;
    %165 = %145.0;
    %166 = maximum(%149, %150) /* ty=Tensor[(12, 5, 4), uint16] */;
    %167 = sqrt(%153) /* ty=Tensor[(?, 5, 4), float64] */;
    %168 = not_equal(%162, %163) /* ty=Tensor[(10, 5, 4), bool] */;
    %169 = log(%164) /* ty=Tensor[(12, 5, 4), float32] */;
    (%165, %var_1765, %166, %167, %168, %169)
  };
  %170(%var_1815, %var_1816) /* ty=(Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(12, 5, 4), uint16], Tensor[(?, 5, 4), float64], Tensor[(10, 5, 4), bool], Tensor[(12, 5, 4), float32]) */
}

def @func_6616() -> (Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float32], Tensor[(16, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(784), float32], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), uint64]) {
  %171 = @func_3981() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), float32]) */;
  %172 = @func_3464() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %173 = @func_2494() /* ty=(Tensor[(16, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32], Tensor[(16, 5, 4), bool]) */;
  %174 = cast(meta[relay.Constant][8] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %175 = reshape(%174, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %176 = @func_3850(%175) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */;
  %177 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %178 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %179 = %171.0;
  %180 = %172.2;
  %181 = %173.0;
  %182 = %176.0;
  %183 = %177.0;
  %184 = %178.0;
  (%179, %180, %181, %182, meta[relay.Constant][8] /* ty=Tensor[(784), float32] */, %183, %184)
}

def @func_5287() -> Tensor[(?, 5, 4), float32] {
  %185 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %185.1
}

def @func_6701() -> Tensor[(12), float64] {
  @func_6699() /* ty=Tensor[(12), float64] */
}

def @func_6618() -> (Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float32], Tensor[(16, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(784), float32], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), uint64]) {
  @func_6616() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float32], Tensor[(16, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(784), float32], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), uint64]) */
}

def @func_4250(%var_4169: Tensor[(260, 1), int8]) -> (Tensor[(1, 5, 4), float32], Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), int8], Tensor[(260, 1), int8], Tensor[(3, 4), float64], Tensor[(13, 5, 4), float32], Tensor[(13, 5, 4), float64]) {
  %186 = @func_3464() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %187 = @func_3981() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), float32]) */;
  %188 = @func_3934() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %189 = cast(%var_4169, dtype="int8") /* ty=Tensor[(260, 1), int8] */;
  %190 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 4), float64] */;
  %191 = reshape(%189, newshape=[13, 5, 4]) /* ty=Tensor[(13, 5, 4), int8] */;
  %192 = reshape(%190, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %193 = @func_2605(%191, %192) /* ty=(Tensor[(13, 5, 4), bool], Tensor[(1, 88), float32], Tensor[(12), float64], Tensor[(?, 5, 4), uint64], Tensor[(1, 8, 11), float32], Tensor[(12), float64], Tensor[(?, 5, 4), float32]) */;
  %194 = %193.0;
  %195 = cast(%194, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %196 = acosh(%195) /* ty=Tensor[(13, 5, 4), float64] */;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(13, 5, 4), float32] */;
  %198 = atanh(%197) /* ty=Tensor[(13, 5, 4), float32] */;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(13, 5, 4), float32] */;
  %200 = cast(%194, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %201 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%198, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %204 = %186.2;
  %205 = %187.0;
  %206 = %188.0;
  %207 = log2(%199) /* ty=Tensor[(13, 5, 4), float32] */;
  %208 = mod(%202, %203) /* ty=Tensor[(13, 5, 4), float64] */;
  (%204, %205, %206, %var_4169, meta[relay.Constant][9] /* ty=Tensor[(3, 4), float64] */, %207, %208)
}

def @func_6784() -> Tensor[(12), float64] {
  %209 = @func_1431() /* ty=(Tensor[(12), float64],) */;
  %209.0
}

def @func_5177() -> (Tensor[(?, 5, 4), uint64],) {
  %210 = @func_2524() /* ty=Tensor[(?, 5, 4), uint64] */;
  (%210,)
}

def @func_1397() -> (Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) {
  %211 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %213 = asin(%212) /* ty=Tensor[(1, 5, 4), float32] */;
  %214 = cast(%211, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%213, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %218 = cast(meta[relay.Constant][10] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %219 = reshape(%218, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %220 = @func_887(%219) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(12), float64]) */;
  %221 = %220.2;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %223 = floor_mod(%216, %217) /* ty=Tensor[(?, 5, 4), float32] */;
  %224 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  %225 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  %226 = rsqrt(%222) /* ty=Tensor[(10, 5, 12), float32] */;
  (meta[relay.Constant][10] /* ty=Tensor[(12), float64] */, %223, %224, %225, %226)
}

def @func_5800(%var_5798: Tensor[(8, 3, 16), int16], %var_5799: Tensor[(8, 3, 16), int16]) -> (Tensor[(6, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(8, 3, 16), float64], Tensor[(?, 5, 4), int8]) {
  %253 = fn (%var_5718: Tensor[(8, 3, 16), int16], %var_5724: Tensor[(8, 3, 16), int16]) -> (Tensor[(6, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(8, 3, 16), float64], Tensor[(?, 5, 4), int8]) {
    %227 = @func_3507() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
    %228 = @func_4438() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %229 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
    %230 = @func_2808() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) */;
    %231 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 3, 16), int16] */, dtype="int16") /* ty=Tensor[(8, 3, 16), int16] */;
    %232 = shape_of(%var_5718, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%var_5718, dtype="int16") /* ty=Tensor[(8, 3, 16), int16] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %235 = multiply(%233, %234) /* ty=Tensor[(8, 3, 16), int16] */;
    %236 = cast(%var_5724, dtype="bool") /* ty=Tensor[(8, 3, 16), bool] */;
    %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(%235, dtype="bool") /* ty=Tensor[(8, 3, 16), bool] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %240 = equal(%238, %239) /* ty=Tensor[(8, 3, 16), bool] */;
    %241 = cast(%240, dtype="float64") /* ty=Tensor[(8, 3, 16), float64] */;
    %242 = shape_of(%var_5718, dtype="int32") /* ty=Tensor[(3), int32] */;
    %243 = cast(%var_5718, dtype="float64") /* ty=Tensor[(8, 3, 16), float64] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %245 = @func_3934() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %246 = %227.0;
    %247 = %228.0;
    %248 = %229.0;
    %249 = %230.0;
    %250 = @func_5341() /* ty=Tensor[(12), float64] */;
    %251 = divide(%243, %244) /* ty=Tensor[(8, 3, 16), float64] */;
    %252 = %245.0;
    (%246, %247, %248, %249, %250, %251, %252)
  };
  %253(%var_5798, %var_5799) /* ty=(Tensor[(6, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(8, 3, 16), float64], Tensor[(?, 5, 4), int8]) */
}

def @func_5587() -> (Tensor[(?, 5, 4), int8], Tensor[(1, 5, 4), float32]) {
  @func_5585() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(1, 5, 4), float32]) */
}

def @func_890(%var_888: Tensor[(12), float64]) -> (Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(12), float64]) {
  @func_887(%var_888) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(12), float64]) */
}

def @func_1127() -> Tensor[(1, 5, 4), float32] {
  %254 = fn () -> Tensor[(1, 5, 4), float32] {
    @func_811() /* ty=Tensor[(1, 5, 4), float32] */
  };
  %254() /* ty=Tensor[(1, 5, 4), float32] */
}

def @func_2066() -> Tensor[(?, 5, 4), int8] {
  %256 = fn () -> Tensor[(?, 5, 4), int8] {
    %255 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %255.0
  };
  %256() /* ty=Tensor[(?, 5, 4), int8] */
}

def @func_2810() -> (Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) {
  @func_2808() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) */
}

def @func_1431() -> (Tensor[(12), float64],) {
  %257 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %258 = %257.0;
  (%258,)
}

def @func_2360() -> Tensor[(6, 5, 4), uint16] {
  %260 = fn () -> Tensor[(6, 5, 4), uint16] {
    %259 = @func_1851() /* ty=(Tensor[(6, 5, 4), uint16],) */;
    %259.0
  };
  %260() /* ty=Tensor[(6, 5, 4), uint16] */
}

def @func_3935() -> (Tensor[(?, 5, 4), int8],) {
  %263 = fn () -> (Tensor[(?, 5, 4), int8],) {
    %261 = @func_2921() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(16, 5, 4), float32]) */;
    %262 = %261.0;
    (%262,)
  };
  %263() /* ty=(Tensor[(?, 5, 4), int8],) */
}

def @func_6662() -> (Tensor[(12), float64], Tensor[(3, 4), float64]) {
  %264 = @func_3295() /* ty=(Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */;
  %265 = @func_5131() /* ty=(Tensor[(6, 5, 4), float64], Tensor[(1, 5, 4), float32], Tensor[(3, 4), float64]) */;
  %266 = %264.0;
  %267 = %265.2;
  (%266, %267)
}

def @func_6664() -> (Tensor[(12), float64], Tensor[(3, 4), float64]) {
  @func_6662() /* ty=(Tensor[(12), float64], Tensor[(3, 4), float64]) */
}

def @func_3255(%var_3254: Tensor[(5, 5, 4), int8]) -> (Tensor[(5, 5, 4), uint32], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(200), float32]) {
  %279 = fn (%var_3230: Tensor[(5, 5, 4), int8]) -> (Tensor[(5, 5, 4), uint32], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(200), float32]) {
    %268 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %269 = %268.0;
    %270 = cast(%269, dtype="uint32") /* ty=Tensor[(?, 5, 4), uint32] */;
    %271 = cast(%var_3230, dtype="uint32") /* ty=Tensor[(5, 5, 4), uint32] */;
    %272 = cast(meta[relay.Constant][12] /* ty=Tensor[(300, 2), float64] */, dtype="float64") /* ty=Tensor[(300, 2), float64] */;
    %273 = cast(meta[relay.Constant][13] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
    %274 = reshape(%272, newshape=[600]) /* ty=Tensor[(600), float64] */;
    %275 = reshape(%273, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), float32] */;
    %276 = @func_1814(%274, %275) /* ty=(Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(12, 5, 4), uint16], Tensor[(?, 5, 4), float64], Tensor[(10, 5, 4), bool], Tensor[(12, 5, 4), float32]) */;
    %277 = bitwise_or(%270, %271) /* ty=Tensor[(5, 5, 4), uint32] */;
    %278 = %276.0;
    (%277, %278, meta[relay.Constant][12] /* ty=Tensor[(300, 2), float64] */, meta[relay.Constant][13] /* ty=Tensor[(200), float32] */)
  };
  %279(%var_3254) /* ty=(Tensor[(5, 5, 4), uint32], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(200), float32]) */
}

def @func_4366() -> (Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(12), float64]) {
  @func_4364() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(12), float64]) */
}

def @func_5133() -> (Tensor[(6, 5, 4), float64], Tensor[(1, 5, 4), float32], Tensor[(3, 4), float64]) {
  @func_5131() /* ty=(Tensor[(6, 5, 4), float64], Tensor[(1, 5, 4), float32], Tensor[(3, 4), float64]) */
}

def @func_567(%var_495: Tensor[(1, 8, 11), float32], %var_509: Tensor[(12), float64]) -> (Tensor[(1, 8, 11), float32], Tensor[(2, 2, 3), float64], Tensor[(12), float64], Tensor[(?, 8, 11), bool], Tensor[(600), float64]) {
  %280 = cast(-9.91226f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %281 = cast(%var_495, dtype="float32") /* ty=Tensor[(1, 8, 11), float32] */;
  %282 = cast(%var_509, dtype="float64") /* ty=Tensor[(12), float64] */;
  %283 = cast(%var_509, dtype="float64") /* ty=Tensor[(12), float64] */;
  %284 = reshape(%282, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %285 = reshape(%283, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %286 = @func_256(%284, %285) /* ty=(Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) */;
  %287 = cast(%var_495, dtype="float64") /* ty=Tensor[(1, 8, 11), float64] */;
  %288 = asin(%287) /* ty=Tensor[(1, 8, 11), float64] */;
  %289 = cast(%var_495, dtype="bool") /* ty=Tensor[(1, 8, 11), bool] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="bool") /* ty=Tensor[(1, 8, 11), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = %286.0;
  %294 = cast(%293, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
  %295 = cast(%293, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
  %296 = reshape(%294, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %297 = reshape(%295, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %298 = @func_256(%296, %297) /* ty=(Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) */;
  %299 = %298.3;
  %300 = cast(%299, dtype="float64") /* ty=Tensor[(600), float64] */;
  %301 = power(%280, %281) /* ty=Tensor[(1, 8, 11), float32] */;
  %302 = not_equal(%291, %292) /* ty=Tensor[(?, 8, 11), bool] */;
  %303 = log2(%300) /* ty=Tensor[(600), float64] */;
  (%301, %293, %var_509, %302, %303)
}

def @func_2525() -> Tensor[(?, 5, 4), uint64] {
  %305 = fn () -> Tensor[(?, 5, 4), uint64] {
    %304 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
    %304.0
  };
  %305() /* ty=Tensor[(?, 5, 4), uint64] */
}

def @func_6962(%var_6953: Tensor[(1, 3, 3), float64]) -> (Tensor[(1, 3, 3), float64],) {
  %306 = cast(%var_6953, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
  %307 = sin(%306) /* ty=Tensor[(1, 3, 3), float64] */;
  (%307,)
}

def @func_2608(%var_2606: Tensor[(13, 5, 4), int8], %var_2607: Tensor[(12), float64]) -> (Tensor[(13, 5, 4), bool], Tensor[(1, 88), float32], Tensor[(12), float64], Tensor[(?, 5, 4), uint64], Tensor[(1, 8, 11), float32], Tensor[(12), float64], Tensor[(?, 5, 4), float32]) {
  %327 = fn (%var_2541: Tensor[(13, 5, 4), int8], %var_2551: Tensor[(12), float64]) -> (Tensor[(13, 5, 4), bool], Tensor[(1, 88), float32], Tensor[(12), float64], Tensor[(?, 5, 4), uint64], Tensor[(1, 8, 11), float32], Tensor[(12), float64], Tensor[(?, 5, 4), float32]) {
    %308 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %309 = %308.0;
    %310 = cast(%309, dtype="bool") /* ty=Tensor[(?, 5, 4), bool] */;
    %311 = cast(%var_2541, dtype="bool") /* ty=Tensor[(13, 5, 4), bool] */;
    %312 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
    %313 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 88), float32] */, dtype="float32") /* ty=Tensor[(1, 88), float32] */;
    %314 = cast(%var_2551, dtype="float64") /* ty=Tensor[(12), float64] */;
    %315 = reshape(%313, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float32] */;
    %316 = reshape(%314, newshape=[12]) /* ty=Tensor[(12), float64] */;
    %317 = @func_567(%315, %316) /* ty=(Tensor[(1, 8, 11), float32], Tensor[(2, 2, 3), float64], Tensor[(12), float64], Tensor[(?, 8, 11), bool], Tensor[(600), float64]) */;
    %318 = %317.0;
    %319 = cast(%318, dtype="float32") /* ty=Tensor[(1, 8, 11), float32] */;
    %320 = @func_1431() /* ty=(Tensor[(12), float64],) */;
    %321 = @func_1957() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) */;
    %322 = equal(%310, %311) /* ty=Tensor[(13, 5, 4), bool] */;
    %323 = %312.0;
    %324 = cosh(%319) /* ty=Tensor[(1, 8, 11), float32] */;
    %325 = %320.0;
    %326 = %321.0;
    (%322, meta[relay.Constant][14] /* ty=Tensor[(1, 88), float32] */, %var_2551, %323, %324, %325, %326)
  };
  %327(%var_2606, %var_2607) /* ty=(Tensor[(13, 5, 4), bool], Tensor[(1, 88), float32], Tensor[(12), float64], Tensor[(?, 5, 4), uint64], Tensor[(1, 8, 11), float32], Tensor[(12), float64], Tensor[(?, 5, 4), float32]) */
}

def @func_3747() -> (Tensor[(6, 5, 4), uint16], Tensor[(12), float64]) {
  %332 = fn () -> (Tensor[(6, 5, 4), uint16], Tensor[(12), float64]) {
    %328 = @func_1851() /* ty=(Tensor[(6, 5, 4), uint16],) */;
    %329 = @func_2197() /* ty=(Tensor[(12), float64], Tensor[(12), float64]) */;
    %330 = %328.0;
    %331 = %329.1;
    (%330, %331)
  };
  %332() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(12), float64]) */
}

def @func_2427(%var_2423: Tensor[(600), float64]) -> (Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) {
  %333 = @func_2031() /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %334 = @func_2312() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %335 = cast(%var_2423, dtype="float64") /* ty=Tensor[(600), float64] */;
  %336 = reshape(%335, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
  %337 = @func_88(%336) /* ty=(Tensor[(10, 5, 12), float64],) */;
  %338 = %333.1;
  %339 = %334.0;
  %340 = %337.0;
  (%338, %339, %340, %var_2423)
}

def @func_5933() -> (Tensor[(?, 5, 4), uint64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(60, 10), float64], Tensor[(200, 1), float32]) {
  %341 = @func_5177() /* ty=(Tensor[(?, 5, 4), uint64],) */;
  %342 = @func_5585() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(1, 5, 4), float32]) */;
  %343 = cast(meta[relay.Constant][15] /* ty=Tensor[(60, 10), float64] */, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %344 = cast(meta[relay.Constant][16] /* ty=Tensor[(200, 1), float32] */, dtype="float32") /* ty=Tensor[(200, 1), float32] */;
  %345 = reshape(%343, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %346 = reshape(%344, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), float32] */;
  %347 = @func_1814(%345, %346) /* ty=(Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(12, 5, 4), uint16], Tensor[(?, 5, 4), float64], Tensor[(10, 5, 4), bool], Tensor[(12, 5, 4), float32]) */;
  %348 = %341.0;
  %349 = %342.1;
  %350 = %347.0;
  (%348, %349, %350, meta[relay.Constant][15] /* ty=Tensor[(60, 10), float64] */, meta[relay.Constant][16] /* ty=Tensor[(200, 1), float32] */)
}

def @func_6629() -> (Tensor[(15, 5, 4), int64], Tensor[(12), float64]) {
  %355 = fn () -> (Tensor[(15, 5, 4), int64], Tensor[(12), float64]) {
    %351 = @func_4344() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(12), float64]) */;
    %352 = @func_4344() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(12), float64]) */;
    %353 = %351.0;
    %354 = %352.1;
    (%353, %354)
  };
  %355() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(12), float64]) */
}

def @func_6455(%var_6454: Tensor[(600), float64]) -> (Tensor[(?, 5, 4), bool], Tensor[(?, 5, 4), int32], Tensor[(600), int32], Tensor[(?, 5, 4), float64]) {
  %385 = fn (%var_6412: Tensor[(600), float64]) -> (Tensor[(?, 5, 4), bool], Tensor[(?, 5, 4), int32], Tensor[(600), int32], Tensor[(?, 5, 4), float64]) {
    %356 = @func_3879() /* ty=Tensor[(?, 5, 4), int8] */;
    %357 = @func_2921() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(16, 5, 4), float32]) */;
    %358 = %357.0;
    %359 = cast(%358, dtype="bool") /* ty=Tensor[(?, 5, 4), bool] */;
    %360 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %361 = cast(%356, dtype="bool") /* ty=Tensor[(?, 5, 4), bool] */;
    %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %363 = cast(%358, dtype="int32") /* ty=Tensor[(?, 5, 4), int32] */;
    %364 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %365 = cast(%356, dtype="int32") /* ty=Tensor[(?, 5, 4), int32] */;
    %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %367 = cast(%var_6412, dtype="float64") /* ty=Tensor[(600), float64] */;
    %368 = reshape(%367, newshape=[600]) /* ty=Tensor[(600), float64] */;
    %369 = @func_4905(%368) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64]) */;
    %370 = %369.2;
    %371 = cast(%370, dtype="int32") /* ty=Tensor[(600), int32] */;
    %372 = shape_of(%var_6412, dtype="int32") /* ty=Tensor[(1), int32] */;
    %373 = cast(%var_6412, dtype="int32") /* ty=Tensor[(600), int32] */;
    %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?), int32] */;
    %375 = @func_5585() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(1, 5, 4), float32]) */;
    %376 = %375.0;
    %377 = cast(%376, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
    %378 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %379 = cast(%356, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %381 = logical_or(%361, %362) /* ty=Tensor[(?, 5, 4), bool] */;
    %382 = left_shift(%365, %366) /* ty=Tensor[(?, 5, 4), int32] */;
    %383 = maximum(%373, %374) /* ty=Tensor[(600), int32] */;
    %384 = mod(%379, %380) /* ty=Tensor[(?, 5, 4), float64] */;
    (%381, %382, %383, %384)
  };
  %385(%var_6454) /* ty=(Tensor[(?, 5, 4), bool], Tensor[(?, 5, 4), int32], Tensor[(600), int32], Tensor[(?, 5, 4), float64]) */
}

def @func_6857() -> (Tensor[(6, 5, 4), float64], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(6, 2), float64], Tensor[(1, 5, 4), float32], Tensor[(8, 5, 4), float64]) {
  %386 = @func_6171() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(6, 5, 4), float64]) */;
  %387 = @func_3981() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), float32]) */;
  %388 = @func_3197() /* ty=(Tensor[(8, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64]) */;
  %389 = @func_6100() /* ty=(Tensor[(8, 5, 4), float64],) */;
  %390 = %386.1;
  %391 = @func_3904() /* ty=Tensor[(?, 5, 4), float32] */;
  %392 = %387.1;
  %393 = %388.2;
  %394 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  %395 = %389.0;
  (%390, %391, %392, %393, %394, %395)
}

def @func_5428() -> (Tensor[(12), float64], Tensor[(6, 5, 4), float32]) {
  @func_5426() /* ty=(Tensor[(12), float64], Tensor[(6, 5, 4), float32]) */
}

def @func_3879() -> Tensor[(?, 5, 4), int8] {
  %396 = @func_2312() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %396.0
}

def @func_4066(%var_4063: Tensor[(600), float64]) -> (Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) {
  %397 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %398 = @func_2197() /* ty=(Tensor[(12), float64], Tensor[(12), float64]) */;
  %399 = cast(%var_4063, dtype="float64") /* ty=Tensor[(600), float64] */;
  %400 = reshape(%399, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %401 = @func_2427(%400) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) */;
  %402 = %397.0;
  %403 = %398.0;
  %404 = @func_3438() /* ty=Tensor[(1, 5, 4), float32] */;
  %405 = %401.2;
  (%402, %403, %404, %405, %var_4063)
}

def @func_3707(%var_3706: Tensor[(12), float64]) -> (Tensor[(?, 5, 4), float32], Tensor[(1, 88), float32], Tensor[(5, 52), int8], Tensor[(12), float64]) {
  %414 = fn (%var_3680: Tensor[(12), float64]) -> (Tensor[(?, 5, 4), float32], Tensor[(1, 88), float32], Tensor[(5, 52), int8], Tensor[(12), float64]) {
    %406 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
    %407 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 52), int8] */, dtype="int8") /* ty=Tensor[(5, 52), int8] */;
    %408 = cast(%var_3680, dtype="float64") /* ty=Tensor[(12), float64] */;
    %409 = reshape(%407, newshape=[13, 5, 4]) /* ty=Tensor[(13, 5, 4), int8] */;
    %410 = reshape(%408, newshape=[12]) /* ty=Tensor[(12), float64] */;
    %411 = @func_2605(%409, %410) /* ty=(Tensor[(13, 5, 4), bool], Tensor[(1, 88), float32], Tensor[(12), float64], Tensor[(?, 5, 4), uint64], Tensor[(1, 8, 11), float32], Tensor[(12), float64], Tensor[(?, 5, 4), float32]) */;
    %412 = %406.0;
    %413 = %411.1;
    (%412, %413, meta[relay.Constant][17] /* ty=Tensor[(5, 52), int8] */, %var_3680)
  };
  %414(%var_3706) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(1, 88), float32], Tensor[(5, 52), int8], Tensor[(12), float64]) */
}

def @func_3621(%var_3619: Tensor[(14, 5, 4), uint16], %var_3620: Tensor[(600), float64]) -> (Tensor[(14, 5, 4), uint32], Tensor[(14, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(40, 2), int8]) {
  %436 = fn (%var_3553: Tensor[(14, 5, 4), uint16], %var_3604: Tensor[(600), float64]) -> (Tensor[(14, 5, 4), uint32], Tensor[(14, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(40, 2), int8]) {
    %415 = @func_1921() /* ty=Tensor[(?, 5, 4), uint16] */;
    %416 = cast(%415, dtype="uint32") /* ty=Tensor[(?, 5, 4), uint32] */;
    %417 = cast(%var_3553, dtype="uint32") /* ty=Tensor[(14, 5, 4), uint32] */;
    %418 = cast(%var_3553, dtype="float64") /* ty=Tensor[(14, 5, 4), float64] */;
    %419 = cast(%415, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
    %420 = mod(%418, %419) /* ty=Tensor[(14, 5, 4), float64] */;
    %421 = cast(%420, dtype="float64") /* ty=Tensor[(14, 5, 4), float64] */;
    %422 = rsqrt(%421) /* ty=Tensor[(14, 5, 4), float64] */;
    %423 = cast(%422, dtype="float64") /* ty=Tensor[(14, 5, 4), float64] */;
    %424 = cast(%var_3604, dtype="float64") /* ty=Tensor[(600), float64] */;
    %425 = reshape(%424, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
    %426 = @func_88(%425) /* ty=(Tensor[(10, 5, 12), float64],) */;
    %427 = @func_2808() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) */;
    %428 = cast(meta[relay.Constant][18] /* ty=Tensor[(40, 2), int8] */, dtype="int8") /* ty=Tensor[(40, 2), int8] */;
    %429 = reshape(%428, newshape=[4, 5, 4]) /* ty=Tensor[(4, 5, 4), int8] */;
    %430 = @func_2295(%429) /* ty=(Tensor[(4, 5, 4), float32], Tensor[(?, 5, 4), bool]) */;
    %431 = multiply(%416, %417) /* ty=Tensor[(14, 5, 4), uint32] */;
    %432 = cos(%423) /* ty=Tensor[(14, 5, 4), float64] */;
    %433 = %426.0;
    %434 = %427.0;
    %435 = %430.1;
    (%431, %432, %433, %var_3604, %434, %435, meta[relay.Constant][18] /* ty=Tensor[(40, 2), int8] */)
  };
  %436(%var_3619, %var_3620) /* ty=(Tensor[(14, 5, 4), uint32], Tensor[(14, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(40, 2), int8]) */
}

def @func_1586() -> (Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float64]) {
  %437 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  %438 = cast(%437, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
  %439 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 5, 4), float32] */, dtype="uint16") /* ty=Tensor[(6, 5, 4), uint16] */;
  %440 = cast(%437, dtype="float64") /* ty=Tensor[(1, 5, 4), float64] */;
  %441 = logical_xor(%438, %439) /* ty=Tensor[(6, 5, 4), uint16] */;
  %442 = log(%440) /* ty=Tensor[(1, 5, 4), float64] */;
  (%441, %442)
}

def @func_5049() -> (Tensor[(?, 5, 4), int8],) {
  %445 = fn () -> (Tensor[(?, 5, 4), int8],) {
    %443 = @func_3934() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %444 = %443.0;
    (%444,)
  };
  %445() /* ty=(Tensor[(?, 5, 4), int8],) */
}

def @func_1399() -> (Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) {
  @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */
}

def @func_4253(%var_4251: Tensor[(260, 1), int8]) -> (Tensor[(1, 5, 4), float32], Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), int8], Tensor[(260, 1), int8], Tensor[(3, 4), float64], Tensor[(13, 5, 4), float32], Tensor[(13, 5, 4), float64]) {
  @func_4250(%var_4251) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), int8], Tensor[(260, 1), int8], Tensor[(3, 4), float64], Tensor[(13, 5, 4), float32], Tensor[(13, 5, 4), float64]) */
}

def @func_2922() -> (Tensor[(?, 5, 4), int8], Tensor[(16, 5, 4), float32]) {
  %450 = fn () -> (Tensor[(?, 5, 4), int8], Tensor[(16, 5, 4), float32]) {
    %446 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %447 = @func_2494() /* ty=(Tensor[(16, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32], Tensor[(16, 5, 4), bool]) */;
    %448 = %446.0;
    %449 = %447.0;
    (%448, %449)
  };
  %450() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(16, 5, 4), float32]) */
}

def @func_1922() -> Tensor[(?, 5, 4), uint16] {
  %458 = fn () -> Tensor[(?, 5, 4), uint16] {
    %451 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
    %452 = cast(%451, dtype="float64") /* ty=Tensor[(1, 5, 4), float64] */;
    %453 = acos(%452) /* ty=Tensor[(1, 5, 4), float64] */;
    %454 = cast(%451, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
    %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
    %456 = cast(%453, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
    %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_xor(%456, %457) /* ty=Tensor[(?, 5, 4), uint16] */
  };
  %458() /* ty=Tensor[(?, 5, 4), uint16] */
}

def @func_5179() -> (Tensor[(?, 5, 4), uint64],) {
  @func_5177() /* ty=(Tensor[(?, 5, 4), uint64],) */
}

def @func_5684(%var_5681: Tensor[(13, 10, 8), float32], %var_5682: Tensor[(13, 10, 8), float32], %var_5683: Tensor[(100), int8]) -> (Tensor[(13, 10, 8), int64], Tensor[(?, 5, 4), float32], Tensor[(13, 10, 8), float64], Tensor[(12), float64], Tensor[(200), float32], Tensor[(100), int8], Tensor[(?, 5, 4), uint16]) {
  @func_5679(%var_5681, %var_5682, %var_5683) /* ty=(Tensor[(13, 10, 8), int64], Tensor[(?, 5, 4), float32], Tensor[(13, 10, 8), float64], Tensor[(12), float64], Tensor[(200), float32], Tensor[(100), int8], Tensor[(?, 5, 4), uint16]) */
}

def @func_5855() -> (Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  %468 = fn () -> (Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
    %459 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
    %460 = %459.0;
    %461 = cast(%460, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
    %462 = @func_2757() /* ty=(Tensor[(?, 5, 4), float32],) */;
    %463 = @func_5239() /* ty=(Tensor[(?, 5, 4), uint16], Tensor[(15, 5, 4), int64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
    %464 = @func_5287() /* ty=Tensor[(?, 5, 4), float32] */;
    %465 = tan(%461) /* ty=Tensor[(1, 5, 4), float32] */;
    %466 = %462.0;
    %467 = %463.3;
    (%464, %465, %466, %467)
  };
  %468() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */
}

def @func_5972(%var_5970: Tensor[(1, 7, 10), float32]) -> Tensor[(1, 7, 10), float32] {
  @func_5969(%var_5970) /* ty=Tensor[(1, 7, 10), float32] */
}

def @func_3904() -> Tensor[(?, 5, 4), float32] {
  %469 = @func_2757() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %469.0
}

def @func_7267() -> (Tensor[(?, 5, 4), int8],) {
  %472 = fn () -> (Tensor[(?, 5, 4), int8],) {
    %470 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %471 = %470.0;
    (%471,)
  };
  %472() /* ty=(Tensor[(?, 5, 4), int8],) */
}

def @func_7223() -> (Tensor[(15, 5, 4), int64], Tensor[(15, 7, 1), float32]) {
  %473 = @func_5239() /* ty=(Tensor[(?, 5, 4), uint16], Tensor[(15, 5, 4), int64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %474 = @func_6548() /* ty=(Tensor[(15, 7, 1), float32],) */;
  %475 = %473.1;
  %476 = %474.0;
  (%475, %476)
}

def @func_3793(%var_3791: Tensor[(200), float32], %var_3792: Tensor[(100), int8]) -> (Tensor[(1, 5, 4), float32], Tensor[(10, 5, 4), bool], Tensor[(600), float64], Tensor[(200), float32], Tensor[(300, 2), float64], Tensor[(100), int8], Tensor[(12), float64]) {
  @func_3789(%var_3791, %var_3792) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(10, 5, 4), bool], Tensor[(600), float64], Tensor[(200), float32], Tensor[(300, 2), float64], Tensor[(100), int8], Tensor[(12), float64]) */
}

def @func_3981() -> (Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), float32]) {
  %477 = @func_3746() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(12), float64]) */;
  %478 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %479 = %477.0;
  %480 = %478.1;
  (%479, %480)
}

def @func_4718() -> (Tensor[(?, 5, 4), int8],) {
  @func_4716() /* ty=(Tensor[(?, 5, 4), int8],) */
}

def @main(%var_7302: Tensor[(4, 1, 12), float32]) -> (Tensor[(?, 5, 4), float32], Tensor[(4, 1, 12), float32]) {
  %481 = @func_5056() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %482 = cast(%var_7302, dtype="float32") /* ty=Tensor[(4, 1, 12), float32] */;
  %483 = atanh(%482) /* ty=Tensor[(4, 1, 12), float32] */;
  %484 = cast(%483, dtype="float32") /* ty=Tensor[(4, 1, 12), float32] */;
  %485 = %481.0;
  %486 = atan(%484) /* ty=Tensor[(4, 1, 12), float32] */;
  (%485, %486)
}

def @func_4618() -> (Tensor[(7, 5, 4), uint64],) {
  %492 = fn () -> (Tensor[(7, 5, 4), uint64],) {
    %487 = @func_2682() /* ty=(Tensor[(1, 5, 4), float32],) */;
    %488 = %487.0;
    %489 = cast(%488, dtype="uint64") /* ty=Tensor[(1, 5, 4), uint64] */;
    %490 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 5, 4), float32] */, dtype="uint64") /* ty=Tensor[(7, 5, 4), uint64] */;
    %491 = minimum(%489, %490) /* ty=Tensor[(7, 5, 4), uint64] */;
    (%491,)
  };
  %492() /* ty=(Tensor[(7, 5, 4), uint64],) */
}

def @func_6285() -> (Tensor[(6, 5, 4), uint16],) {
  %493 = @func_2944() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %494 = %493.0;
  (%494,)
}

def @func_1272() -> Tensor[(1, 5, 4), float32] {
  @func_1270() /* ty=Tensor[(1, 5, 4), float32] */
}

def @func_3464() -> (Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  %495 = @func_3295() /* ty=(Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */;
  %496 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %497 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %498 = %495.0;
  %499 = %496.0;
  %500 = %497.0;
  (%498, %499, %500)
}

def @func_5341() -> Tensor[(12), float64] {
  %501 = @func_3806() /* ty=(Tensor[(12), float64],) */;
  %501.0
}

def @func_1717() -> (Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) {
  %513 = fn () -> (Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) {
    %502 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %503 = %502.0;
    %504 = cast(%503, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
    %505 = sin(%504) /* ty=Tensor[(?, 5, 4), float64] */;
    %506 = cast(%503, dtype="uint64") /* ty=Tensor[(?, 5, 4), uint64] */;
    %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
    %508 = cast(%505, dtype="uint64") /* ty=Tensor[(?, 5, 4), uint64] */;
    %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %510 = cast(%505, dtype="float32") /* ty=Tensor[(?, 5, 4), float32] */;
    %511 = minimum(%508, %509) /* ty=Tensor[(?, 5, 4), uint64] */;
    %512 = erf(%510) /* ty=Tensor[(?, 5, 4), float32] */;
    (%511, %512)
  };
  %513() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */
}

def @func_4011() -> (Tensor[(6, 5, 4), uint16],) {
  %514 = @func_2944() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %515 = %514.0;
  (%515,)
}

def @func_6172() -> (Tensor[(?, 5, 4), float32], Tensor[(6, 5, 4), float64]) {
  %522 = fn () -> (Tensor[(?, 5, 4), float32], Tensor[(6, 5, 4), float64]) {
    %516 = @func_5055() /* ty=(Tensor[(?, 5, 4), float32],) */;
    %517 = @func_4011() /* ty=(Tensor[(6, 5, 4), uint16],) */;
    %518 = %517.0;
    %519 = cast(%518, dtype="float64") /* ty=Tensor[(6, 5, 4), float64] */;
    %520 = %516.0;
    %521 = acosh(%519) /* ty=Tensor[(6, 5, 4), float64] */;
    (%520, %521)
  };
  %522() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(6, 5, 4), float64]) */
}

def @func_6224() -> (Tensor[(100), int8], Tensor[(12), float64]) {
  %526 = fn () -> (Tensor[(100), int8], Tensor[(12), float64]) {
    %523 = @func_5396() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(100), int8], Tensor[(100), int8]) */;
    %524 = %523.1;
    %525 = @func_5341() /* ty=Tensor[(12), float64] */;
    (%524, %525)
  };
  %526() /* ty=(Tensor[(100), int8], Tensor[(12), float64]) */
}

def @func_5318(%var_5317: Tensor[(3, 14, 2), float32]) -> Tensor[(3, 14, 2), float32] {
  %528 = fn (%var_5308: Tensor[(3, 14, 2), float32]) -> Tensor[(3, 14, 2), float32] {
    %527 = cast(%var_5308, dtype="float32") /* ty=Tensor[(3, 14, 2), float32] */;
    log10(%527) /* ty=Tensor[(3, 14, 2), float32] */
  };
  %528(%var_5317) /* ty=Tensor[(3, 14, 2), float32] */
}

def @func_929() -> (Tensor[(?, 5, 4), int8],) {
  %531 = fn () -> (Tensor[(?, 5, 4), int8],) {
    %529 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %530 = %529.0;
    (%530,)
  };
  %531() /* ty=(Tensor[(?, 5, 4), int8],) */
}

def @func_5056() -> (Tensor[(?, 5, 4), float32],) {
  %534 = fn () -> (Tensor[(?, 5, 4), float32],) {
    %532 = @func_4364() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(12), float64]) */;
    %533 = %532.1;
    (%533,)
  };
  %534() /* ty=(Tensor[(?, 5, 4), float32],) */
}

def @func_259(%var_257: Tensor[(2, 2, 3), float64], %var_258: Tensor[(2, 2, 3), float64]) -> (Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) {
  %553 = fn (%var_210: Tensor[(2, 2, 3), float64], %var_234: Tensor[(2, 2, 3), float64]) -> (Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) {
    %535 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
    %536 = shape_of(%var_210, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%var_210, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %539 = cast(%var_234, dtype="float32") /* ty=Tensor[(2, 2, 3), float32] */;
    %540 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(2, 2, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 2, 3), float64] */, dtype="float32") /* ty=Tensor[(2, 2, 3), float32] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %543 = cast(meta[relay.Constant][22] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
    %544 = reshape(%543, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
    %545 = @func_88(%544) /* ty=(Tensor[(10, 5, 12), float64],) */;
    %546 = %545.0;
    %547 = cast(%546, dtype="float64") /* ty=Tensor[(10, 5, 12), float64] */;
    %548 = reshape(%547, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
    %549 = @func_88(%548) /* ty=(Tensor[(10, 5, 12), float64],) */;
    %550 = mod(%537, %538) /* ty=Tensor[(2, 2, 3), float64] */;
    %551 = power(%541, %542) /* ty=Tensor[(2, 2, 3), float32] */;
    %552 = %549.0;
    (%550, %551, %546, meta[relay.Constant][22] /* ty=Tensor[(600), float64] */, %552)
  };
  %553(%var_257, %var_258) /* ty=(Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) */
}

def @func_5585() -> (Tensor[(?, 5, 4), int8], Tensor[(1, 5, 4), float32]) {
  %554 = @func_2312() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %555 = %554.0;
  %556 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  (%555, %556)
}

def @func_3850(%var_3837: Tensor[(784), float32]) -> (Tensor[(?, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) {
  %557 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %558 = cast(%var_3837, dtype="float32") /* ty=Tensor[(784), float32] */;
  %559 = reshape(%558, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %560 = @func_2406(%559) /* ty=(Tensor[(7, 7, 16), float32],) */;
  %561 = %557.0;
  %562 = %560.0;
  (%561, %562, %var_3837)
}

def @func_4543() -> (Tensor[(6, 5, 4), float32], Tensor[(6, 5, 4), uint16]) {
  %563 = @func_3507() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
  %564 = @func_2944() /* ty=(Tensor[(6, 5, 4), uint16],) */;
  %565 = %563.0;
  %566 = %564.0;
  (%565, %566)
}

def @func_5509() -> (Tensor[(1, 5, 4), float32],) {
  %568 = fn () -> (Tensor[(1, 5, 4), float32],) {
    %567 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
    (%567,)
  };
  %568() /* ty=(Tensor[(1, 5, 4), float32],) */
}

def @func_6331() -> (Tensor[(?, 5, 4), int8], Tensor[(800), float32], Tensor[(200), int8], Tensor[(800), float32]) {
  %576 = fn () -> (Tensor[(?, 5, 4), int8], Tensor[(800), float32], Tensor[(200), int8], Tensor[(800), float32]) {
    %569 = cast(meta[relay.Constant][23] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
    %570 = cast(meta[relay.Constant][24] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
    %571 = reshape(%569, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int8] */;
    %572 = reshape(%570, newshape=[800]) /* ty=Tensor[(800), float32] */;
    %573 = @func_1056(%571, %572) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(10, 5, 16), float32], Tensor[(800), float32], Tensor[(?, 5, 4), int32]) */;
    %574 = @func_3879() /* ty=Tensor[(?, 5, 4), int8] */;
    %575 = %573.2;
    (%574, %575, meta[relay.Constant][23] /* ty=Tensor[(200), int8] */, meta[relay.Constant][24] /* ty=Tensor[(800), float32] */)
  };
  %576() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(800), float32], Tensor[(200), int8], Tensor[(800), float32]) */
}

def @func_2637() -> Tensor[(6, 5, 4), uint16] {
  @func_2635() /* ty=Tensor[(6, 5, 4), uint16] */
}

def @func_1433() -> (Tensor[(12), float64],) {
  @func_1431() /* ty=(Tensor[(12), float64],) */
}

def @func_2338() -> (Tensor[(1, 5, 4), float32],) {
  @func_2336() /* ty=(Tensor[(1, 5, 4), float32],) */
}

def @func_6699() -> Tensor[(12), float64] {
  %577 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %577.0
}

def @func_2682() -> (Tensor[(1, 5, 4), float32],) {
  %578 = @func_2336() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %579 = %578.0;
  (%579,)
}

def @func_887(%var_883: Tensor[(12), float64]) -> (Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(12), float64]) {
  %580 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(1, 5, 4), float64] */;
  %582 = sinh(%581) /* ty=Tensor[(1, 5, 4), float64] */;
  %583 = cast(%582, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %584 = cast(%var_883, dtype="float64") /* ty=Tensor[(12), float64] */;
  %585 = cast(%var_883, dtype="float64") /* ty=Tensor[(12), float64] */;
  %586 = reshape(%584, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %587 = reshape(%585, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %588 = @func_256(%586, %587) /* ty=(Tensor[(2, 2, 3), float64], Tensor[(2, 2, 3), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(10, 5, 12), float64]) */;
  %589 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
  %590 = cosh(%583) /* ty=Tensor[(1, 5, 4), float32] */;
  %591 = %588.4;
  (%589, %590, %591, %var_883)
}

def @func_1270() -> Tensor[(1, 5, 4), float32] {
  @func_811() /* ty=Tensor[(1, 5, 4), float32] */
}

def @func_3199() -> (Tensor[(8, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64]) {
  @func_3197() /* ty=(Tensor[(8, 5, 4), float64], Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64]) */
}

def @func_4944(%var_4942: Tensor[(1, 240), uint64], %var_4943: Tensor[(12), float64]) -> (Tensor[(?, 5, 4), int8], Tensor[(300, 2), float64], Tensor[(12, 5, 4), float32], Tensor[(1, 240), uint64], Tensor[(?, 5, 4), float32], Tensor[(12), float64], Tensor[(15, 5, 4), int64]) {
  %606 = fn (%var_4929: Tensor[(1, 240), uint64], %var_4937: Tensor[(12), float64]) -> (Tensor[(?, 5, 4), int8], Tensor[(300, 2), float64], Tensor[(12, 5, 4), float32], Tensor[(1, 240), uint64], Tensor[(?, 5, 4), float32], Tensor[(12), float64], Tensor[(15, 5, 4), int64]) {
    %592 = @func_4438() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %593 = @func_3099() /* ty=(Tensor[(16, 5, 4), bool], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(?, 5, 4), int8]) */;
    %594 = cast(%var_4929, dtype="uint64") /* ty=Tensor[(1, 240), uint64] */;
    %595 = reshape(%594, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), uint64] */;
    %596 = @func_1888(%595) /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(12, 5, 4), float32]) */;
    %597 = cast(%var_4937, dtype="float64") /* ty=Tensor[(12), float64] */;
    %598 = reshape(%597, newshape=[12]) /* ty=Tensor[(12), float64] */;
    %599 = @func_3705(%598) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(1, 88), float32], Tensor[(5, 52), int8], Tensor[(12), float64]) */;
    %600 = @func_4344() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(12), float64]) */;
    %601 = %592.0;
    %602 = %593.2;
    %603 = %596.1;
    %604 = %599.0;
    %605 = %600.0;
    (%601, %602, %603, %var_4929, %604, %var_4937, %605)
  };
  %606(%var_4942, %var_4943) /* ty=(Tensor[(?, 5, 4), int8], Tensor[(300, 2), float64], Tensor[(12, 5, 4), float32], Tensor[(1, 240), uint64], Tensor[(?, 5, 4), float32], Tensor[(12), float64], Tensor[(15, 5, 4), int64]) */
}

def @func_5875() -> Tensor[(1, 5, 4), float64] {
  @func_5873() /* ty=Tensor[(1, 5, 4), float64] */
}

def @func_2758() -> (Tensor[(?, 5, 4), float32],) {
  %609 = fn () -> (Tensor[(?, 5, 4), float32],) {
    %607 = @func_2085() /* ty=(Tensor[(?, 5, 4), float32],) */;
    %608 = %607.0;
    (%608,)
  };
  %609() /* ty=(Tensor[(?, 5, 4), float32],) */
}

def @func_2033() -> (Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  @func_2031() /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32]) */
}

def @func_1852() -> (Tensor[(6, 5, 4), uint16],) {
  %612 = fn () -> (Tensor[(6, 5, 4), uint16],) {
    %610 = @func_1586() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float64]) */;
    %611 = %610.0;
    (%611,)
  };
  %612() /* ty=(Tensor[(6, 5, 4), uint16],) */
}

def @func_5426() -> (Tensor[(12), float64], Tensor[(6, 5, 4), float32]) {
  %613 = @func_4275() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(80), int8], Tensor[(12), float64], Tensor[(8, 5, 4), float64]) */;
  %614 = @func_4572() /* ty=(Tensor[(6, 5, 4), float32],) */;
  %615 = %613.2;
  %616 = %614.0;
  (%615, %616)
}

def @func_3420(%var_3419: Tensor[(100), int8]) -> (Tensor[(12), float64], Tensor[(?, 5, 4), int8], Tensor[(200), float32], Tensor[(100), int8]) {
  %625 = fn (%var_3403: Tensor[(100), int8]) -> (Tensor[(12), float64], Tensor[(?, 5, 4), int8], Tensor[(200), float32], Tensor[(100), int8]) {
    %617 = @func_3295() /* ty=(Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */;
    %618 = @func_2037() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %619 = cast(%var_3403, dtype="int8") /* ty=Tensor[(100), int8] */;
    %620 = reshape(%619, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), int8] */;
    %621 = @func_3253(%620) /* ty=(Tensor[(5, 5, 4), uint32], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(200), float32]) */;
    %622 = %617.0;
    %623 = %618.0;
    %624 = %621.3;
    (%622, %623, %624, %var_3403)
  };
  %625(%var_3419) /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), int8], Tensor[(200), float32], Tensor[(100), int8]) */
}

def @func_3099() -> (Tensor[(16, 5, 4), bool], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(?, 5, 4), int8]) {
  %626 = @func_2494() /* ty=(Tensor[(16, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32], Tensor[(16, 5, 4), bool]) */;
  %627 = cast(meta[relay.Constant][25] /* ty=Tensor[(300, 2), float64] */, dtype="float64") /* ty=Tensor[(300, 2), float64] */;
  %628 = reshape(%627, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float64] */;
  %629 = @func_88(%628) /* ty=(Tensor[(10, 5, 12), float64],) */;
  %630 = @func_2312() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %631 = %626.3;
  %632 = %629.0;
  %633 = %630.0;
  (%631, %632, meta[relay.Constant][25] /* ty=Tensor[(300, 2), float64] */, %633)
}

def @func_2031() -> (Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  %634 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %635 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  %636 = %634.0;
  (%635, %636)
}

def @func_4779(%var_4777: Tensor[(4, 15, 6), uint32]) -> (Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64], Tensor[(4, 15, 6), float32]) {
  @func_4776(%var_4777) /* ty=(Tensor[(10, 5, 12), float64], Tensor[(6, 2), float64], Tensor[(4, 15, 6), float32]) */
}

def @func_5239() -> (Tensor[(?, 5, 4), uint16], Tensor[(15, 5, 4), int64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  %637 = @func_4344() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(12), float64]) */;
  %638 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %639 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %640 = @func_1921() /* ty=Tensor[(?, 5, 4), uint16] */;
  %641 = %637.0;
  %642 = %638.0;
  %643 = %639.0;
  (%640, %641, %642, %643)
}

def @func_5398() -> (Tensor[(?, 5, 4), int8], Tensor[(100), int8], Tensor[(100), int8]) {
  @func_5396() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(100), int8], Tensor[(100), int8]) */
}

def @func_3881() -> Tensor[(?, 5, 4), int8] {
  @func_3879() /* ty=Tensor[(?, 5, 4), int8] */
}

def @func_4013() -> (Tensor[(6, 5, 4), uint16],) {
  @func_4011() /* ty=(Tensor[(6, 5, 4), uint16],) */
}

def @func_6681(%var_6680: Tensor[(6, 5, 4), uint16]) -> Tensor[(6, 5, 4), bool] {
  %650 = fn (%var_6671: Tensor[(6, 5, 4), uint16]) -> Tensor[(6, 5, 4), bool] {
    %644 = @func_2944() /* ty=(Tensor[(6, 5, 4), uint16],) */;
    %645 = %644.0;
    %646 = cast(%var_6671, dtype="bool") /* ty=Tensor[(6, 5, 4), bool] */;
    %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
    %648 = cast(%645, dtype="bool") /* ty=Tensor[(6, 5, 4), bool] */;
    %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%648, %649) /* ty=Tensor[(6, 5, 4), bool] */
  };
  %650(%var_6680) /* ty=Tensor[(6, 5, 4), bool] */
}

def @func_2945() -> (Tensor[(6, 5, 4), uint16],) {
  %653 = fn () -> (Tensor[(6, 5, 4), uint16],) {
    %651 = @func_1851() /* ty=(Tensor[(6, 5, 4), uint16],) */;
    %652 = %651.0;
    (%652,)
  };
  %653() /* ty=(Tensor[(6, 5, 4), uint16],) */
}

def @func_2297(%var_2296: Tensor[(4, 5, 4), int8]) -> (Tensor[(4, 5, 4), float32], Tensor[(?, 5, 4), bool]) {
  %664 = fn (%var_2277: Tensor[(4, 5, 4), int8]) -> (Tensor[(4, 5, 4), float32], Tensor[(?, 5, 4), bool]) {
    %654 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %655 = %654.0;
    %656 = cast(%655, dtype="float32") /* ty=Tensor[(?, 5, 4), float32] */;
    %657 = cast(%var_2277, dtype="float32") /* ty=Tensor[(4, 5, 4), float32] */;
    %658 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 5, 4), int8] */, dtype="bool") /* ty=Tensor[(1, 5, 4), bool] */;
    %659 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%655, dtype="bool") /* ty=Tensor[(?, 5, 4), bool] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %662 = floor_divide(%656, %657) /* ty=Tensor[(4, 5, 4), float32] */;
    %663 = less(%660, %661) /* ty=Tensor[(?, 5, 4), bool] */;
    (%662, %663)
  };
  %664(%var_2296) /* ty=(Tensor[(4, 5, 4), float32], Tensor[(?, 5, 4), bool]) */
}

def @func_5396() -> (Tensor[(?, 5, 4), int8], Tensor[(100), int8], Tensor[(100), int8]) {
  %665 = @func_2921() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(16, 5, 4), float32]) */;
  %666 = cast(meta[relay.Constant][27] /* ty=Tensor[(100), int8] */, dtype="int8") /* ty=Tensor[(100), int8] */;
  %667 = reshape(%666, newshape=[100]) /* ty=Tensor[(100), int8] */;
  %668 = @func_3418(%667) /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), int8], Tensor[(200), float32], Tensor[(100), int8]) */;
  %669 = %665.0;
  %670 = %668.3;
  (%669, %670, meta[relay.Constant][27] /* ty=Tensor[(100), int8] */)
}

def @func_4697(%var_4695: Tensor[(7, 5, 4), int8]) -> (Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64], Tensor[(7, 5, 4), uint64]) {
  @func_4694(%var_4695) /* ty=(Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64], Tensor[(7, 5, 4), uint64]) */
}

def @func_2430(%var_2428: Tensor[(600), float64]) -> (Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) {
  @func_2427(%var_2428) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), int8], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) */
}

def @func_6035(%var_6032: Tensor[(12), float64]) -> (Tensor[(1, 5, 4), float64], Tensor[(12), float64], Tensor[(12), float64]) {
  %671 = cast(%var_6032, dtype="float64") /* ty=Tensor[(12), float64] */;
  %672 = reshape(%671, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %673 = @func_3705(%672) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(1, 88), float32], Tensor[(5, 52), int8], Tensor[(12), float64]) */;
  %674 = @func_5873() /* ty=Tensor[(1, 5, 4), float64] */;
  %675 = %673.3;
  (%674, %675, %var_6032)
}

def @func_5102(%var_5095: Tensor[(13, 1, 3), float32], %var_5096: Tensor[(13, 6, 3), float32]) -> (Tensor[(13, 6, 3), float32],) {
  %676 = cast(%var_5095, dtype="float32") /* ty=Tensor[(13, 1, 3), float32] */;
  %677 = cast(%var_5096, dtype="float32") /* ty=Tensor[(13, 6, 3), float32] */;
  %678 = floor_divide(%676, %677) /* ty=Tensor[(13, 6, 3), float32] */;
  (%678,)
}

def @func_6965(%var_6963: Tensor[(1, 3, 3), float64]) -> (Tensor[(1, 3, 3), float64],) {
  @func_6962(%var_6963) /* ty=(Tensor[(1, 3, 3), float64],) */
}

def @func_812() -> Tensor[(1, 5, 4), float32] {
  %680 = fn () -> Tensor[(1, 5, 4), float32] {
    %679 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
    acosh(%679) /* ty=Tensor[(1, 5, 4), float32] */
  };
  %680() /* ty=Tensor[(1, 5, 4), float32] */
}

def @func_4694(%var_4687: Tensor[(7, 5, 4), int8]) -> (Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64], Tensor[(7, 5, 4), uint64]) {
  %681 = @func_3806() /* ty=(Tensor[(12), float64],) */;
  %682 = cast(meta[relay.Constant][29] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %683 = reshape(%682, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %684 = @func_4066(%683) /* ty=(Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) */;
  %685 = @func_4438() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %686 = %685.0;
  %687 = cast(%686, dtype="uint64") /* ty=Tensor[(?, 5, 4), uint64] */;
  %688 = cast(%var_4687, dtype="uint64") /* ty=Tensor[(7, 5, 4), uint64] */;
  %689 = %681.0;
  %690 = @func_3438() /* ty=Tensor[(1, 5, 4), float32] */;
  %691 = %684.4;
  %692 = logical_xor(%687, %688) /* ty=Tensor[(7, 5, 4), uint64] */;
  (%689, %690, %691, meta[relay.Constant][29] /* ty=Tensor[(600), float64] */, %692)
}

def @func_3340(%var_3338: Tensor[(7, 10, 11), int32], %var_3339: Tensor[(7, 10, 11), int32]) -> Tensor[(7, 10, 11), int32] {
  %697 = fn (%var_3330: Tensor[(7, 10, 11), int32], %var_3331: Tensor[(7, 10, 11), int32]) -> Tensor[(7, 10, 11), int32] {
    %693 = cast(%var_3331, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
    %694 = shape_of(%var_3330, dtype="int32") /* ty=Tensor[(3), int32] */;
    %695 = cast(%var_3330, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
    %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    bitwise_or(%695, %696) /* ty=Tensor[(7, 10, 11), int32] */
  };
  %697(%var_3338, %var_3339) /* ty=Tensor[(7, 10, 11), int32] */
}

def @func_2038() -> (Tensor[(?, 5, 4), int8],) {
  %700 = fn () -> (Tensor[(?, 5, 4), int8],) {
    %698 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %699 = %698.0;
    (%699,)
  };
  %700() /* ty=(Tensor[(?, 5, 4), int8],) */
}

def @func_4545() -> (Tensor[(6, 5, 4), float32], Tensor[(6, 5, 4), uint16]) {
  @func_4543() /* ty=(Tensor[(6, 5, 4), float32], Tensor[(6, 5, 4), uint16]) */
}

def @func_5969(%var_5959: Tensor[(1, 7, 10), float32]) -> Tensor[(1, 7, 10), float32] {
  %701 = cast(%var_5959, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  cos(%701) /* ty=Tensor[(1, 7, 10), float32] */
}

def @func_6287() -> (Tensor[(6, 5, 4), uint16],) {
  @func_6285() /* ty=(Tensor[(6, 5, 4), uint16],) */
}

def @func_7225() -> (Tensor[(15, 5, 4), int64], Tensor[(15, 7, 1), float32]) {
  @func_7223() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(15, 7, 1), float32]) */
}

def @func_5873() -> Tensor[(1, 5, 4), float64] {
  %702 = @func_1586() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float64]) */;
  %702.1
}

def @func_2495() -> (Tensor[(16, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32], Tensor[(16, 5, 4), bool]) {
  %718 = fn () -> (Tensor[(16, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32], Tensor[(16, 5, 4), bool]) {
    %703 = @func_1213() /* ty=(Tensor[(1, 5, 4), float32],) */;
    %704 = %703.0;
    %705 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 4), float32] */;
    %706 = cast(%704, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
    %707 = cast(meta[relay.Constant][31] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
    %708 = reshape(%707, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
    %709 = @func_2406(%708) /* ty=(Tensor[(7, 7, 16), float32],) */;
    %710 = cast(%704, dtype="uint16") /* ty=Tensor[(1, 5, 4), uint16] */;
    %711 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 5, 4), float32] */, dtype="uint16") /* ty=Tensor[(16, 5, 4), uint16] */;
    %712 = left_shift(%710, %711) /* ty=Tensor[(16, 5, 4), uint16] */;
    %713 = cast(%712, dtype="bool") /* ty=Tensor[(16, 5, 4), bool] */;
    %714 = cast(%704, dtype="bool") /* ty=Tensor[(1, 5, 4), bool] */;
    %715 = mod(%705, %706) /* ty=Tensor[(16, 5, 4), float32] */;
    %716 = %709.0;
    %717 = not_equal(%713, %714) /* ty=Tensor[(16, 5, 4), bool] */;
    (%715, %716, meta[relay.Constant][31] /* ty=Tensor[(784), float32] */, %717)
  };
  %718() /* ty=(Tensor[(16, 5, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(784), float32], Tensor[(16, 5, 4), bool]) */
}

def @func_6786() -> Tensor[(12), float64] {
  @func_6784() /* ty=Tensor[(12), float64] */
}

def @func_4826(%var_4788: Tensor[(1, 2, 1), int16], %var_4789: Tensor[(7, 2, 16), int16]) -> (Tensor[(7, 2, 16), int64], Tensor[(?, 5, 4), int8], Tensor[(7, 2, 16), int8], Tensor[(1, 2, 1), float64]) {
  %719 = cast(%var_4788, dtype="int16") /* ty=Tensor[(1, 2, 1), int16] */;
  %720 = cast(%var_4789, dtype="int16") /* ty=Tensor[(7, 2, 16), int16] */;
  %721 = maximum(%719, %720) /* ty=Tensor[(7, 2, 16), int16] */;
  %722 = cast(%721, dtype="int64") /* ty=Tensor[(7, 2, 16), int64] */;
  %723 = cast(%var_4788, dtype="int64") /* ty=Tensor[(1, 2, 1), int64] */;
  %724 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %725 = cast(%721, dtype="int8") /* ty=Tensor[(7, 2, 16), int8] */;
  %726 = cast(%var_4788, dtype="int8") /* ty=Tensor[(1, 2, 1), int8] */;
  %727 = cast(%var_4788, dtype="float64") /* ty=Tensor[(1, 2, 1), float64] */;
  %728 = multiply(%722, %723) /* ty=Tensor[(7, 2, 16), int64] */;
  %729 = %724.0;
  %730 = right_shift(%725, %726) /* ty=Tensor[(7, 2, 16), int8] */;
  %731 = acosh(%727) /* ty=Tensor[(1, 2, 1), float64] */;
  (%728, %729, %730, %731)
}

def @func_1959() -> (Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) {
  @func_1957() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) */
}

def @func_4907(%var_4906: Tensor[(600), float64]) -> (Tensor[(?, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64]) {
  %737 = fn (%var_4900: Tensor[(600), float64]) -> (Tensor[(?, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64]) {
    %732 = cast(%var_4900, dtype="float64") /* ty=Tensor[(600), float64] */;
    %733 = reshape(%732, newshape=[600]) /* ty=Tensor[(600), float64] */;
    %734 = @func_4475(%733) /* ty=(Tensor[(12), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), uint64]) */;
    %735 = @func_3904() /* ty=Tensor[(?, 5, 4), float32] */;
    %736 = %734.2;
    (%735, %736, %var_4900)
  };
  %737(%var_4906) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64]) */
}

def @func_6101() -> (Tensor[(8, 5, 4), float64],) {
  %740 = fn () -> (Tensor[(8, 5, 4), float64],) {
    %738 = @func_4275() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(80), int8], Tensor[(12), float64], Tensor[(8, 5, 4), float64]) */;
    %739 = %738.3;
    (%739,)
  };
  %740() /* ty=(Tensor[(8, 5, 4), float64],) */
}

def @func_4440() -> (Tensor[(?, 5, 4), int8],) {
  @func_4438() /* ty=(Tensor[(?, 5, 4), int8],) */
}

def @func_2885() -> (Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), uint64], Tensor[(12), float64], Tensor[(1, 5, 4), float32]) {
  %741 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %742 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %743 = @func_1597() /* ty=(Tensor[(12), float64],) */;
  %744 = %741.1;
  %745 = %742.0;
  %746 = %743.0;
  %747 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  (%744, %745, %746, %747)
}

def @func_851() -> (Tensor[(?, 5, 4), int8],) {
  @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */
}

def @func_1599() -> (Tensor[(12), float64],) {
  @func_1597() /* ty=(Tensor[(12), float64],) */
}

def @func_6548() -> (Tensor[(15, 7, 1), float32],) {
  %748 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %749 = log(%748) /* ty=Tensor[(15, 7, 1), float32] */;
  (%749,)
}

def @func_2887() -> (Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), uint64], Tensor[(12), float64], Tensor[(1, 5, 4), float32]) {
  @func_2885() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), uint64], Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */
}

def @func_4345() -> (Tensor[(15, 5, 4), int64], Tensor[(12), float64]) {
  %759 = fn () -> (Tensor[(15, 5, 4), int64], Tensor[(12), float64]) {
    %750 = @func_1921() /* ty=Tensor[(?, 5, 4), uint16] */;
    %751 = cast(%750, dtype="float64") /* ty=Tensor[(?, 5, 4), float64] */;
    %752 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 5, 4), uint16] */, dtype="float64") /* ty=Tensor[(15, 5, 4), float64] */;
    %753 = divide(%751, %752) /* ty=Tensor[(15, 5, 4), float64] */;
    %754 = cast(%753, dtype="int64") /* ty=Tensor[(15, 5, 4), int64] */;
    %755 = cast(%750, dtype="int64") /* ty=Tensor[(?, 5, 4), int64] */;
    %756 = @func_4275() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(80), int8], Tensor[(12), float64], Tensor[(8, 5, 4), float64]) */;
    %757 = left_shift(%754, %755) /* ty=Tensor[(15, 5, 4), int64] */;
    %758 = %756.2;
    (%757, %758)
  };
  %759() /* ty=(Tensor[(15, 5, 4), int64], Tensor[(12), float64]) */
}

def @func_571(%var_569: Tensor[(1, 8, 11), float32], %var_570: Tensor[(12), float64]) -> (Tensor[(1, 8, 11), float32], Tensor[(2, 2, 3), float64], Tensor[(12), float64], Tensor[(?, 8, 11), bool], Tensor[(600), float64]) {
  @func_567(%var_569, %var_570) /* ty=(Tensor[(1, 8, 11), float32], Tensor[(2, 2, 3), float64], Tensor[(12), float64], Tensor[(?, 8, 11), bool], Tensor[(600), float64]) */
}

def @func_5289() -> Tensor[(?, 5, 4), float32] {
  @func_5287() /* ty=Tensor[(?, 5, 4), float32] */
}

def @func_492(%var_490: Tensor[(10, 5, 16), float32]) -> Tensor[(10, 5, 16), float32] {
  @func_489(%var_490) /* ty=Tensor[(10, 5, 16), float32] */
}

def @func_1059(%var_1057: Tensor[(10, 5, 4), int8], %var_1058: Tensor[(800), float32]) -> (Tensor[(10, 5, 4), int64], Tensor[(10, 5, 16), float32], Tensor[(800), float32], Tensor[(?, 5, 4), int32]) {
  %777 = fn (%var_991: Tensor[(10, 5, 4), int8], %var_1046: Tensor[(800), float32]) -> (Tensor[(10, 5, 4), int64], Tensor[(10, 5, 16), float32], Tensor[(800), float32], Tensor[(?, 5, 4), int32]) {
    %760 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %761 = %760.0;
    %762 = cast(%761, dtype="int64") /* ty=Tensor[(?, 5, 4), int64] */;
    %763 = cast(%var_991, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
    %764 = cast(%var_1046, dtype="float32") /* ty=Tensor[(800), float32] */;
    %765 = reshape(%764, newshape=[10, 5, 16]) /* ty=Tensor[(10, 5, 16), float32] */;
    %766 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %767 = %766.0;
    %768 = cast(%767, dtype="float32") /* ty=Tensor[(?, 5, 4), float32] */;
    %769 = log2(%768) /* ty=Tensor[(?, 5, 4), float32] */;
    %770 = cast(%761, dtype="int32") /* ty=Tensor[(?, 5, 4), int32] */;
    %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%769, dtype="int32") /* ty=Tensor[(?, 5, 4), int32] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %774 = multiply(%762, %763) /* ty=Tensor[(10, 5, 4), int64] */;
    %775 = @func_489(%765) /* ty=Tensor[(10, 5, 16), float32] */;
    %776 = bitwise_and(%772, %773) /* ty=Tensor[(?, 5, 4), int32] */;
    (%774, %775, %var_1046, %776)
  };
  %777(%var_1057, %var_1058) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(10, 5, 16), float32], Tensor[(800), float32], Tensor[(?, 5, 4), int32]) */
}

def @func_1588() -> (Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float64]) {
  @func_1586() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float64]) */
}

def @func_6550() -> (Tensor[(15, 7, 1), float32],) {
  @func_6548() /* ty=(Tensor[(15, 7, 1), float32],) */
}

def @func_4478(%var_4476: Tensor[(600), float64]) -> (Tensor[(12), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), uint64]) {
  @func_4475(%var_4476) /* ty=(Tensor[(12), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), uint64]) */
}

def @func_1597() -> (Tensor[(12), float64],) {
  %778 = @func_1397() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float32]) */;
  %779 = %778.0;
  (%779,)
}

def @func_3038() -> (Tensor[(?, 5, 4), float32],) {
  %782 = fn () -> (Tensor[(?, 5, 4), float32],) {
    %780 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
    %781 = %780.1;
    (%781,)
  };
  %782() /* ty=(Tensor[(?, 5, 4), float32],) */
}

def @func_3789(%var_3768: Tensor[(200), float32], %var_3777: Tensor[(100), int8]) -> (Tensor[(1, 5, 4), float32], Tensor[(10, 5, 4), bool], Tensor[(600), float64], Tensor[(200), float32], Tensor[(300, 2), float64], Tensor[(100), int8], Tensor[(12), float64]) {
  %783 = cast(meta[relay.Constant][34] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %784 = cast(%var_3768, dtype="float32") /* ty=Tensor[(200), float32] */;
  %785 = reshape(%783, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %786 = reshape(%784, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), float32] */;
  %787 = @func_1814(%785, %786) /* ty=(Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(12, 5, 4), uint16], Tensor[(?, 5, 4), float64], Tensor[(10, 5, 4), bool], Tensor[(12, 5, 4), float32]) */;
  %788 = cast(%var_3777, dtype="int8") /* ty=Tensor[(100), int8] */;
  %789 = reshape(%788, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), int8] */;
  %790 = @func_3253(%789) /* ty=(Tensor[(5, 5, 4), uint32], Tensor[(10, 5, 12), float64], Tensor[(300, 2), float64], Tensor[(200), float32]) */;
  %791 = @func_1431() /* ty=(Tensor[(12), float64],) */;
  %792 = @func_1270() /* ty=Tensor[(1, 5, 4), float32] */;
  %793 = %787.4;
  %794 = %790.2;
  %795 = %791.0;
  (%792, %793, meta[relay.Constant][34] /* ty=Tensor[(600), float64] */, %var_3768, %794, %var_3777, %795)
}

def @func_6038(%var_6036: Tensor[(12), float64]) -> (Tensor[(1, 5, 4), float64], Tensor[(12), float64], Tensor[(12), float64]) {
  @func_6035(%var_6036) /* ty=(Tensor[(1, 5, 4), float64], Tensor[(12), float64], Tensor[(12), float64]) */
}

def @func_2313() -> (Tensor[(?, 5, 4), int8],) {
  %798 = fn () -> (Tensor[(?, 5, 4), int8],) {
    %796 = @func_849() /* ty=(Tensor[(?, 5, 4), int8],) */;
    %797 = %796.0;
    (%797,)
  };
  %798() /* ty=(Tensor[(?, 5, 4), int8],) */
}

def @func_5679(%var_5608: Tensor[(13, 10, 8), float32], %var_5620: Tensor[(13, 10, 8), float32], %var_5671: Tensor[(100), int8]) -> (Tensor[(13, 10, 8), int64], Tensor[(?, 5, 4), float32], Tensor[(13, 10, 8), float64], Tensor[(12), float64], Tensor[(200), float32], Tensor[(100), int8], Tensor[(?, 5, 4), uint16]) {
  %799 = cast(%var_5608, dtype="float32") /* ty=Tensor[(13, 10, 8), float32] */;
  %800 = log(%799) /* ty=Tensor[(13, 10, 8), float32] */;
  %801 = cast(%var_5620, dtype="int64") /* ty=Tensor[(13, 10, 8), int64] */;
  %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%800, dtype="int64") /* ty=Tensor[(13, 10, 8), int64] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %805 = @func_3037() /* ty=(Tensor[(?, 5, 4), float32],) */;
  %806 = cast(%var_5620, dtype="float64") /* ty=Tensor[(13, 10, 8), float64] */;
  %807 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%800, dtype="float64") /* ty=Tensor[(13, 10, 8), float64] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %810 = cast(meta[relay.Constant][35] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %811 = cast(%var_5671, dtype="int8") /* ty=Tensor[(100), int8] */;
  %812 = reshape(%810, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %813 = reshape(%811, newshape=[100]) /* ty=Tensor[(100), int8] */;
  %814 = @func_3789(%812, %813) /* ty=(Tensor[(1, 5, 4), float32], Tensor[(10, 5, 4), bool], Tensor[(600), float64], Tensor[(200), float32], Tensor[(300, 2), float64], Tensor[(100), int8], Tensor[(12), float64]) */;
  %815 = minimum(%803, %804) /* ty=Tensor[(13, 10, 8), int64] */;
  %816 = %805.0;
  %817 = power(%808, %809) /* ty=Tensor[(13, 10, 8), float64] */;
  %818 = %814.6;
  %819 = @func_1921() /* ty=Tensor[(?, 5, 4), uint16] */;
  (%815, %816, %817, %818, meta[relay.Constant][35] /* ty=Tensor[(200), float32] */, %var_5671, %819)
}

def @func_4475(%var_4460: Tensor[(600), float64]) -> (Tensor[(12), float64], Tensor[(10, 5, 12), float64], Tensor[(600), float64], Tensor[(?, 5, 4), uint64]) {
  %820 = @func_1597() /* ty=(Tensor[(12), float64],) */;
  %821 = cast(%var_4460, dtype="float64") /* ty=Tensor[(600), float64] */;
  %822 = reshape(%821, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %823 = @func_4066(%822) /* ty=(Tensor[(?, 5, 4), int8], Tensor[(12), float64], Tensor[(1, 5, 4), float32], Tensor[(10, 5, 12), float64], Tensor[(600), float64]) */;
  %824 = @func_2885() /* ty=(Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), uint64], Tensor[(12), float64], Tensor[(1, 5, 4), float32]) */;
  %825 = %820.0;
  %826 = %823.3;
  %827 = %824.1;
  (%825, %826, %var_4460, %827)
}

def @func_4364() -> (Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(12), float64]) {
  %828 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %829 = @func_3806() /* ty=(Tensor[(12), float64],) */;
  %830 = @func_3904() /* ty=Tensor[(?, 5, 4), float32] */;
  %831 = %828.1;
  %832 = %829.0;
  (%830, %831, %832)
}

def @func_4830(%var_4828: Tensor[(1, 2, 1), int16], %var_4829: Tensor[(7, 2, 16), int16]) -> (Tensor[(7, 2, 16), int64], Tensor[(?, 5, 4), int8], Tensor[(7, 2, 16), int8], Tensor[(1, 2, 1), float64]) {
  @func_4826(%var_4828, %var_4829) /* ty=(Tensor[(7, 2, 16), int64], Tensor[(?, 5, 4), int8], Tensor[(7, 2, 16), int8], Tensor[(1, 2, 1), float64]) */
}

def @func_1957() -> (Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) {
  %833 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %834 = @func_1716() /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(?, 5, 4), float32]) */;
  %835 = %833.1;
  %836 = %834.1;
  (%835, %836)
}

def @func_6530() -> (Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) {
  %847 = fn () -> (Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) {
    %837 = @func_5131() /* ty=(Tensor[(6, 5, 4), float64], Tensor[(1, 5, 4), float32], Tensor[(3, 4), float64]) */;
    %838 = @func_3464() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */;
    %839 = @func_2808() /* ty=(Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) */;
    %840 = %839.0;
    %841 = cast(%840, dtype="float32") /* ty=Tensor[(?, 5, 4), float32] */;
    %842 = @func_5055() /* ty=(Tensor[(?, 5, 4), float32],) */;
    %843 = %837.1;
    %844 = %838.2;
    %845 = cos(%841) /* ty=Tensor[(?, 5, 4), float32] */;
    %846 = %842.0;
    (%843, %844, %845, %846)
  };
  %847() /* ty=(Tensor[(1, 5, 4), float32], Tensor[(1, 5, 4), float32], Tensor[(?, 5, 4), float32], Tensor[(?, 5, 4), float32]) */
}

def @func_6923(%var_6889: Tensor[(14, 5, 4), float32], %var_6896: Tensor[(600), float64]) -> (Tensor[(14, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64], Tensor[(1, 5, 4), float32]) {
  %848 = @func_5131() /* ty=(Tensor[(6, 5, 4), float64], Tensor[(1, 5, 4), float32], Tensor[(3, 4), float64]) */;
  %849 = %848.1;
  %850 = cast(%849, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %851 = cast(%var_6889, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %852 = cast(%var_6896, dtype="float64") /* ty=Tensor[(600), float64] */;
  %853 = reshape(%852, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %854 = @func_4905(%853) /* ty=(Tensor[(?, 5, 4), float32], Tensor[(600), float64], Tensor[(600), float64]) */;
  %855 = @func_2682() /* ty=(Tensor[(1, 5, 4), float32],) */;
  %856 = floor_mod(%850, %851) /* ty=Tensor[(14, 5, 4), float32] */;
  %857 = %854.1;
  %858 = %855.0;
  (%856, %857, %var_6896, %858)
}

def @func_3983() -> (Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), float32]) {
  @func_3981() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(?, 5, 4), float32]) */
}

def @func_2808() -> (Tensor[(?, 5, 4), int8], Tensor[(?, 5, 4), bool], Tensor[(80), int8]) {
  %859 = @func_928() /* ty=(Tensor[(?, 5, 4), int8],) */;
  %860 = cast(meta[relay.Constant][36] /* ty=Tensor[(80), int8] */, dtype="int8") /* ty=Tensor[(80), int8] */;
  %861 = reshape(%860, newshape=[4, 5, 4]) /* ty=Tensor[(4, 5, 4), int8] */;
  %862 = @func_2295(%861) /* ty=(Tensor[(4, 5, 4), float32], Tensor[(?, 5, 4), bool]) */;
  %863 = %859.0;
  %864 = %862.1;
  (%863, %864, meta[relay.Constant][36] /* ty=Tensor[(80), int8] */)
}

def @func_3466() -> (Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) {
  @func_3464() /* ty=(Tensor[(12), float64], Tensor[(?, 5, 4), float32], Tensor[(1, 5, 4), float32]) */
}

def @func_849() -> (Tensor[(?, 5, 4), int8],) {
  %865 = @func_811() /* ty=Tensor[(1, 5, 4), float32] */;
  %866 = cast(%865, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %867 = rsqrt(%866) /* ty=Tensor[(1, 5, 4), float32] */;
  %868 = cast(%865, dtype="int8") /* ty=Tensor[(1, 5, 4), int8] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%867, dtype="int8") /* ty=Tensor[(1, 5, 4), int8] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %872 = bitwise_or(%870, %871) /* ty=Tensor[(?, 5, 4), int8] */;
  (%872,)
}

def @func_1891(%var_1889: Tensor[(12, 5, 4), uint64]) -> (Tensor[(?, 5, 4), uint64], Tensor[(12, 5, 4), float32]) {
  @func_1888(%var_1889) /* ty=(Tensor[(?, 5, 4), uint64], Tensor[(12, 5, 4), float32]) */
}

def @func_2198() -> (Tensor[(12), float64], Tensor[(12), float64]) {
  %877 = fn () -> (Tensor[(12), float64], Tensor[(12), float64]) {
    %873 = @func_1597() /* ty=(Tensor[(12), float64],) */;
    %874 = @func_1597() /* ty=(Tensor[(12), float64],) */;
    %875 = %873.0;
    %876 = %874.0;
    (%875, %876)
  };
  %877() /* ty=(Tensor[(12), float64], Tensor[(12), float64]) */
}

def @func_1213() -> (Tensor[(1, 5, 4), float32],) {
  %878 = @func_1126() /* ty=Tensor[(1, 5, 4), float32] */;
  %879 = cast(%878, dtype="float32") /* ty=Tensor[(1, 5, 4), float32] */;
  %880 = exp(%879) /* ty=Tensor[(1, 5, 4), float32] */;
  (%880,)
}

def @func_489(%var_474: Tensor[(10, 5, 16), float32]) -> Tensor[(10, 5, 16), float32] {
  %881 = cast(%var_474, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  rsqrt(%881) /* ty=Tensor[(10, 5, 16), float32] */
}

def @func_3218(%var_3217: Tensor[(7, 5, 4), float64]) -> (Tensor[(7, 5, 4), uint32],) {
  %887 = fn (%var_3209: Tensor[(7, 5, 4), float64]) -> (Tensor[(7, 5, 4), uint32],) {
    %882 = @func_1586() /* ty=(Tensor[(6, 5, 4), uint16], Tensor[(1, 5, 4), float64]) */;
    %883 = %882.1;
    %884 = cast(%883, dtype="uint32") /* ty=Tensor[(1, 5, 4), uint32] */;
    %885 = cast(%var_3209, dtype="uint32") /* ty=Tensor[(7, 5, 4), uint32] */;
    %886 = subtract(%884, %885) /* ty=Tensor[(7, 5, 4), uint32] */;
    (%886,)
  };
  %887(%var_3217) /* ty=(Tensor[(7, 5, 4), uint32],) */
}

def @func_5343() -> Tensor[(12), float64] {
  @func_5341() /* ty=Tensor[(12), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen135/build/output.py", line 2678, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:52:17] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

