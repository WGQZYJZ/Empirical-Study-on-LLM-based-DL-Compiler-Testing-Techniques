==========mod==========
#[version = "0.0.5"]
def @func_3942() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %0 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
  %1 = @func_3586() /* ty=Tensor[(?, 5, 9), float64] */;
  (%0, %1)
}

def @func_2982(%var_2978: Tensor[(11, 16, 15), float64]) -> (Tensor[(11, 16, 15), float64],) {
  %2 = cast(%var_2978, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %3 = cos(%2) /* ty=Tensor[(11, 16, 15), float64] */;
  (%3,)
}

def @func_3780(%var_3775: Tensor[(1, 5, 9), uint64]) -> Tensor[(?, 5, 9), float64] {
  %4 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
  %5 = cast(%var_3775, dtype="float64") /* ty=Tensor[(1, 5, 9), float64] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%7, %8) /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_1845() -> Tensor[(?, 5, 9), float64] {
  %9 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %9.0
}

def @func_8190(%var_8164: Tensor[(15, 16, 8), float32], %var_8165: Tensor[(15, 16, 8), float32]) -> (Tensor[(15, 16, 8), float32], Tensor[(5, 126), uint64]) {
  %10 = cast(%var_8165, dtype="float32") /* ty=Tensor[(15, 16, 8), float32] */;
  %11 = shape_of(%var_8164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%var_8164, dtype="float32") /* ty=Tensor[(15, 16, 8), float32] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %14 = @func_6303() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) */;
  %15 = divide(%12, %13) /* ty=Tensor[(15, 16, 8), float32] */;
  %16 = %14.2;
  (%15, %16)
}

def @func_6224() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %17 = @func_5461() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %18 = %17.0;
  %19 = @func_4823() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%18, %19)
}

def @func_5726() -> (Tensor[(?, 5, 9), float64],) {
  %20 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %22 = sinh(%21) /* ty=Tensor[(?, 5, 9), float64] */;
  (%22,)
}

def @func_4650() -> (Tensor[(?, 5, 9), uint64],) {
  %23 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %24 = %23.1;
  (%24,)
}

def @func_7109() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %25 = @func_1307() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %26 = @func_5110() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %27 = %25.0;
  %28 = %26.1;
  (%27, %28)
}

def @func_704() -> (Tensor[(?, 5, 9), uint64],) {
  %29 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %30 = %29.1;
  (%30,)
}

def @func_2643() -> (Tensor[(?, 5, 9), float32], Tensor[(3, 2, 8), float64], Tensor[(24, 2), float64]) {
  %31 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %32 = %31.0;
  %33 = cast(%32, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %34 = cast(meta[relay.Constant][0] /* ty=Tensor[(24, 2), float64] */, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
  %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(24, 2), float64] */, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
  %36 = reshape(%34, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
  %37 = reshape(%35, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
  %38 = @func_506(%36, %37) /* ty=(Tensor[(3, 2, 8), float64],) */;
  %39 = rsqrt(%33) /* ty=Tensor[(?, 5, 9), float32] */;
  %40 = %38.0;
  (%39, %40, meta[relay.Constant][0] /* ty=Tensor[(24, 2), float64] */)
}

def @func_6540() -> (Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) {
  %41 = @func_1985() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %42 = @func_3214() /* ty=Tensor[(?, 5, 9), uint64] */;
  %43 = @func_5351() /* ty=Tensor[(336), int32] */;
  %44 = %41.2;
  (%42, %43, %44)
}

def @func_3728(%var_3720: Tensor[(75, 3), float64], %var_3723: Tensor[(675), bool]) -> (Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), int64], Tensor[(405), float64], Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(75, 3), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) {
  %45 = cast(meta[relay.Constant][1] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %46 = reshape(%45, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float64] */;
  %47 = @func_1431(%46) /* ty=(Tensor[(9, 5, 9), int64], Tensor[(?, 5, 9), float64]) */;
  %48 = cast(meta[relay.Constant][1] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %50 = cast(%var_3720, dtype="float64") /* ty=Tensor[(75, 3), float64] */;
  %51 = reshape(%49, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %52 = reshape(%50, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), float64] */;
  %53 = @func_2089(%51, %52) /* ty=(Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(5, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %54 = cast(%var_3723, dtype="bool") /* ty=Tensor[(675), bool] */;
  %55 = cast(%var_3723, dtype="bool") /* ty=Tensor[(675), bool] */;
  %56 = reshape(%54, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %57 = reshape(%55, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %58 = @func_2180(%56, %57) /* ty=(Tensor[(15, 5, 9), bool],) */;
  %59 = @func_1803() /* ty=Tensor[(?, 5, 9), uint64] */;
  %60 = %47.0;
  %61 = sigmoid(%48) /* ty=Tensor[(405), float64] */;
  %62 = %53.4;
  %63 = %58.0;
  (%59, %60, %61, %62, meta[relay.Constant][2] /* ty=Tensor[(336), int32] */, %var_3720, %63, %var_3723)
}

def @func_11911(%var_11898: Tensor[(11, 9, 3), bool]) -> (Tensor[(11, 9, 3), bool], Tensor[(?, 5, 9), uint64]) {
  %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 9, 3), bool] */, dtype="bool") /* ty=Tensor[(11, 9, 3), bool] */;
  %65 = shape_of(%var_11898, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_11898, dtype="bool") /* ty=Tensor[(11, 9, 3), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %68 = @func_2958() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %69 = logical_or(%66, %67) /* ty=Tensor[(11, 9, 3), bool] */;
  %70 = %68.0;
  (%69, %70)
}

def @func_935() -> (Tensor[(?, 5, 9), uint64],) {
  %71 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %72 = %71.0;
  (%72,)
}

def @func_314() -> Tensor[(?, 5, 9), float64] {
  %73 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 9), float64] */;
  %74 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(1, 5, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 9), float64] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%75, %76) /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_6157(%var_6113: float64, %var_6114: Tensor[(6, 14, 14), float64]) -> Tensor[(6, 14, 14), float64] {
  %77 = cast(%var_6113, dtype="float64") /* ty=float64 */;
  %78 = cast(%var_6114, dtype="float64") /* ty=Tensor[(6, 14, 14), float64] */;
  %79 = minimum(%77, %78) /* ty=Tensor[(6, 14, 14), float64] */;
  %80 = cast(%var_6113, dtype="float64") /* ty=float64 */;
  %81 = cast(%79, dtype="float64") /* ty=Tensor[(6, 14, 14), float64] */;
  add(%80, %81) /* ty=Tensor[(6, 14, 14), float64] */
}

def @func_5583() -> Tensor[(336), int32] {
  @func_5351() /* ty=Tensor[(336), int32] */
}

def @func_11836() -> (Tensor[(?, 5, 9), float64],) {
  %82 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %83 = %82.0;
  (%83,)
}

def @func_7687() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %84 = @func_4411() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), bool]) */;
  %85 = @func_1307() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %86 = %84.2;
  %87 = %85.0;
  (%86, %87)
}

def @func_1791() -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int32], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) {
  %88 = @func_1024() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %89 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %91 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %92 = reshape(%89, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %93 = reshape(%90, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %94 = reshape(%91, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %95 = @func_1077(%92, %93, %94) /* ty=(Tensor[(14, 3, 8), int32], Tensor[(14, 3, 8), int16]) */;
  %96 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %97 = %88.0;
  %98 = %95.0;
  %99 = %96.0;
  (%97, %98, meta[relay.Constant][6] /* ty=Tensor[(336), int32] */, %99)
}

def @func_8806(%var_8796: Tensor[(585), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(585), float32]) {
  %100 = @func_5135() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %101 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %103 = reshape(%102, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float32] */;
  %104 = @func_1594(%103) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(?, 5, 9), uint64]) */;
  %105 = cast(meta[relay.Constant][7] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %106 = cast(%var_8796, dtype="float32") /* ty=Tensor[(585), float32] */;
  %107 = reshape(%105, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %108 = reshape(%106, newshape=[195, 3]) /* ty=Tensor[(195, 3), float32] */;
  %109 = @func_7855(%107, %108) /* ty=(Tensor[(336), int32], Tensor[(1, 63), float32], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(?, 5, 9), uint64], Tensor[(195, 3), float64], Tensor[(1, 5, 9), float64], Tensor[(195, 3), int8]) */;
  %110 = %100.0;
  %111 = %101.0;
  %112 = %104.1;
  %113 = %109.3;
  (%110, %111, %112, meta[relay.Constant][7] /* ty=Tensor[(63), float32] */, %113, %var_8796)
}

def @func_689(%var_684: int32, %var_685: Tensor[(7, 1, 10), int32]) -> (Tensor[(7, 1, 10), bool],) {
  %114 = cast(%var_684, dtype="bool") /* ty=bool */;
  %115 = cast(%var_685, dtype="bool") /* ty=Tensor[(7, 1, 10), bool] */;
  %116 = less(%114, %115) /* ty=Tensor[(7, 1, 10), bool] */;
  (%116,)
}

def @func_3883() -> Tensor[(7, 5, 9), uint16] {
  %117 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="uint16") /* ty=Tensor[(?, 5, 9), uint16] */;
  %120 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 5, 9), uint64] */, dtype="uint16") /* ty=Tensor[(7, 5, 9), uint16] */;
  right_shift(%119, %120) /* ty=Tensor[(7, 5, 9), uint16] */
}

def @func_1431(%var_1416: Tensor[(9, 5, 9), float64]) -> (Tensor[(9, 5, 9), int64], Tensor[(?, 5, 9), float64]) {
  %121 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %122 = %121.0;
  %123 = cast(%122, dtype="int64") /* ty=Tensor[(?, 5, 9), int64] */;
  %124 = cast(%var_1416, dtype="int64") /* ty=Tensor[(9, 5, 9), int64] */;
  %125 = cast(%122, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %126 = asin(%125) /* ty=Tensor[(?, 5, 9), float64] */;
  %127 = cast(%126, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %128 = add(%123, %124) /* ty=Tensor[(9, 5, 9), int64] */;
  %129 = cosh(%127) /* ty=Tensor[(?, 5, 9), float64] */;
  (%128, %129)
}

def @func_1307() -> (Tensor[(?, 5, 9), uint64],) {
  %130 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %131 = %130.0;
  (%131,)
}

def @func_1803() -> Tensor[(?, 5, 9), uint64] {
  %132 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %132.0
}

def @func_7882() -> Tensor[(336), int32] {
  @func_5583() /* ty=Tensor[(336), int32] */
}

def @func_10920() -> (Tensor[(?, 5, 9), float64],) {
  %133 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  (%133,)
}

def @func_4785() -> (Tensor[(?, 5, 9), uint64],) {
  %134 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%134,)
}

def @func_1124() -> Tensor[(?, 5, 9), float64] {
  @func_314() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_1232(%var_1222: Tensor[(336), int32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32]) {
  %135 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %136 = @func_1124() /* ty=Tensor[(?, 5, 9), float64] */;
  %137 = cast(%136, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %138 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 5, 9), float64] */, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %139 = greater_equal(%137, %138) /* ty=Tensor[(9, 5, 9), bool] */;
  %140 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 5, 9), float64] */, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %145 = cast(%var_1222, dtype="int32") /* ty=Tensor[(336), int32] */;
  %146 = cast(%var_1222, dtype="int32") /* ty=Tensor[(336), int32] */;
  %147 = cast(%var_1222, dtype="int32") /* ty=Tensor[(336), int32] */;
  %148 = reshape(%145, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %149 = reshape(%146, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %150 = reshape(%147, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %151 = @func_1077(%148, %149, %150) /* ty=(Tensor[(14, 3, 8), int32], Tensor[(14, 3, 8), int16]) */;
  %152 = %135.1;
  %153 = less(%142, %143) /* ty=Tensor[(9, 5, 9), bool] */;
  %154 = %144.0;
  %155 = %151.1;
  (%152, %153, %154, %155, %var_1222)
}

def @func_4773(%var_4743: Tensor[(63), float32]) -> (Tensor[(14, 3, 8), int16], Tensor[(7, 3, 3), float32], Tensor[(63), float32], Tensor[(16, 5, 9), int64]) {
  %156 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %157 = cast(%var_4743, dtype="float32") /* ty=Tensor[(63), float32] */;
  %158 = reshape(%157, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float32] */;
  %159 = @func_1594(%158) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(?, 5, 9), uint64]) */;
  %160 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  %161 = cast(%160, dtype="int64") /* ty=Tensor[(?, 5, 9), int64] */;
  %162 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 5, 9), float64] */, dtype="int64") /* ty=Tensor[(16, 5, 9), int64] */;
  %163 = %156.1;
  %164 = %159.0;
  %165 = bitwise_or(%161, %162) /* ty=Tensor[(16, 5, 9), int64] */;
  (%163, %164, %var_4743, %165)
}

def @func_10636(%var_10560: Tensor[(6, 5, 9), uint64], %var_10585: Tensor[(1120), int64], %var_10627: Tensor[(585), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(6, 5, 9), bool], Tensor[(70), int32], Tensor[(1120), int64], Tensor[(6, 5, 9), float64], Tensor[(585), float32], Tensor[(585), float32]) {
  %166 = @func_10202() /* ty=Tensor[(?, 5, 9), uint64] */;
  %167 = cast(%166, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %168 = cast(%var_10560, dtype="bool") /* ty=Tensor[(6, 5, 9), bool] */;
  %169 = cast(%var_10585, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %170 = reshape(%169, newshape=[56, 20]) /* ty=Tensor[(56, 20), int64] */;
  %171 = @func_10123(%170) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(16, 7, 10), int64], Tensor[(9, 5, 9), float64], Tensor[(56, 20), uint8], Tensor[(?, 5, 9), uint64], Tensor[(405), float64], Tensor[(70), int32], Tensor[(70), int32], Tensor[(504), float32]) */;
  %172 = cast(%166, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %173 = cast(%var_10560, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %174 = floor_mod(%172, %173) /* ty=Tensor[(6, 5, 9), float64] */;
  %175 = cast(%174, dtype="float32") /* ty=Tensor[(6, 5, 9), float32] */;
  %176 = asinh(%175) /* ty=Tensor[(6, 5, 9), float32] */;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %178 = cast(%var_10627, dtype="float32") /* ty=Tensor[(585), float32] */;
  %179 = reshape(%178, newshape=[585]) /* ty=Tensor[(585), float32] */;
  %180 = @func_8806(%179) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(585), float32]) */;
  %181 = @func_10202() /* ty=Tensor[(?, 5, 9), uint64] */;
  %182 = greater_equal(%167, %168) /* ty=Tensor[(6, 5, 9), bool] */;
  %183 = %171.8;
  %184 = exp(%177) /* ty=Tensor[(6, 5, 9), float64] */;
  %185 = %180.5;
  (%181, %182, %183, %var_10585, %184, %185, %var_10627)
}

def @func_4624() -> (Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) {
  %186 = @func_2943() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %187 = %186.1;
  %188 = @func_2872() /* ty=Tensor[(?, 5, 9), float64] */;
  %189 = cast(%188, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %190 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%187, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = cast(meta[relay.Constant][11] /* ty=Tensor[(75, 9), bool] */, dtype="bool") /* ty=Tensor[(75, 9), bool] */;
  %194 = cast(meta[relay.Constant][11] /* ty=Tensor[(75, 9), bool] */, dtype="bool") /* ty=Tensor[(75, 9), bool] */;
  %195 = reshape(%193, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %196 = reshape(%194, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %197 = @func_2180(%195, %196) /* ty=(Tensor[(15, 5, 9), bool],) */;
  %198 = @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %199 = not_equal(%191, %192) /* ty=Tensor[(?, 5, 9), bool] */;
  %200 = %197.0;
  %201 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
  %202 = %198.0;
  (%199, %200, meta[relay.Constant][11] /* ty=Tensor[(75, 9), bool] */, %201, %202)
}

def @func_5324() -> Tensor[(336), int32] {
  %203 = @func_1791() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int32], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %203.2
}

def @func_2680() -> (Tensor[(?, 5, 9), uint64],) {
  %204 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%204,)
}

def @func_4198(%var_4194: Tensor[(405), float64]) -> (Tensor[(?, 5, 9), float64], Tensor[(9, 5, 9), int64], Tensor[(405), float64]) {
  %205 = cast(%var_4194, dtype="float64") /* ty=Tensor[(405), float64] */;
  %206 = reshape(%205, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float64] */;
  %207 = @func_1431(%206) /* ty=(Tensor[(9, 5, 9), int64], Tensor[(?, 5, 9), float64]) */;
  %208 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
  %209 = %207.0;
  (%208, %209, %var_4194)
}

def @func_3299() -> (Tensor[(?, 5, 9), uint64],) {
  %210 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %211 = %210.1;
  (%211,)
}

def @func_4675() -> (Tensor[(?, 5, 9), uint64],) {
  %212 = @func_3214() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%212,)
}

def @func_9188() -> Tensor[(?, 5, 9), uint64] {
  %213 = @func_3247() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %213.0
}

def @func_5937(%var_5917: Tensor[(585), uint64], %var_5918: Tensor[(63), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(10, 9, 11), float32], Tensor[(990), float32], Tensor[(?, 5, 9), uint64], Tensor[(585), uint64], Tensor[(63), float32]) {
  %214 = @func_5597() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %215 = cast(meta[relay.Constant][12] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %216 = reshape(%215, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float32] */;
  %217 = cast(%var_5917, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %218 = cast(%var_5918, dtype="float32") /* ty=Tensor[(63), float32] */;
  %219 = reshape(%217, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
  %220 = reshape(%218, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
  %221 = @func_2392(%219, %220) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(13, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(1, 63), float32]) */;
  %222 = %214.0;
  %223 = @func_1515(%216) /* ty=Tensor[(10, 9, 11), float32] */;
  %224 = %221.2;
  (%222, %223, meta[relay.Constant][12] /* ty=Tensor[(990), float32] */, %224, %var_5917, %var_5918)
}

def @func_10393() -> Tensor[(?, 5, 9), uint64] {
  %225 = @func_7067() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(7, 5, 9), uint16]) */;
  %225.0
}

def @func_9764() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %226 = @func_7109() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %227 = @func_3586() /* ty=Tensor[(?, 5, 9), float64] */;
  %228 = %226.1;
  (%227, %228)
}

def @func_10853(%var_10848: Tensor[(6, 5, 9), uint64]) -> Tensor[(6, 5, 9), uint32] {
  %229 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %230 = %229.1;
  %231 = cast(%230, dtype="uint32") /* ty=Tensor[(?, 5, 9), uint32] */;
  %232 = cast(%var_10848, dtype="uint32") /* ty=Tensor[(6, 5, 9), uint32] */;
  minimum(%231, %232) /* ty=Tensor[(6, 5, 9), uint32] */
}

def @func_11685(%var_11679: int8) -> (Tensor[(16, 12, 3), bool],) {
  %233 = cast(%var_11679, dtype="bool") /* ty=bool */;
  %234 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 12, 3), int8] */, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
  %235 = less(%233, %234) /* ty=Tensor[(16, 12, 3), bool] */;
  (%235,)
}

def @func_1737() -> (Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) {
  %236 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %238 = erf(%237) /* ty=Tensor[(?, 5, 9), float64] */;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %240 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %241 = sigmoid(%239) /* ty=Tensor[(?, 5, 9), float32] */;
  %242 = %240.0;
  (%241, %242)
}

def @func_9974() -> Tensor[(?, 5, 9), uint8] {
  %243 = @func_4737() /* ty=(Tensor[(?, 5, 9), uint8],) */;
  %243.0
}

def @func_11710() -> (Tensor[(?, 5, 9), float64],) {
  %244 = @func_6976() /* ty=Tensor[(?, 5, 9), float64] */;
  (%244,)
}

def @func_3155() -> Tensor[(?, 5, 9), uint64] {
  %245 = @func_1469() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %245.1
}

def @func_1515(%var_1490: Tensor[(10, 9, 11), float32]) -> Tensor[(10, 9, 11), float32] {
  %246 = cast(%var_1490, dtype="float32") /* ty=Tensor[(10, 9, 11), float32] */;
  asin(%246) /* ty=Tensor[(10, 9, 11), float32] */
}

def @func_6799(%var_6790: int32) -> (Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(7, 1, 10), bool], int32, Tensor[(70, 1), int32], Tensor[(?, 5, 9), uint64]) {
  %247 = @func_1791() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int32], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %248 = %247.3;
  %249 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %250 = %249.0;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %252 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%248, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %255 = @func_5110() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %256 = cast(%var_6790, dtype="int32") /* ty=int32 */;
  %257 = cast(meta[relay.Constant][14] /* ty=Tensor[(70, 1), int32] */, dtype="int32") /* ty=Tensor[(70, 1), int32] */;
  %258 = reshape(%256, newshape=[]) /* ty=int32 */;
  %259 = reshape(%257, newshape=[7, 1, 10]) /* ty=Tensor[(7, 1, 10), int32] */;
  %260 = @func_689(%258, %259) /* ty=(Tensor[(7, 1, 10), bool],) */;
  %261 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %262 = floor_mod(%253, %254) /* ty=Tensor[(?, 5, 9), float32] */;
  %263 = %255.0;
  %264 = @func_5324() /* ty=Tensor[(336), int32] */;
  %265 = %260.0;
  %266 = %261.1;
  (%262, %263, %264, %265, %var_6790, meta[relay.Constant][14] /* ty=Tensor[(70, 1), int32] */, %266)
}

def @func_2392(%var_2372: Tensor[(13, 5, 9), uint64], %var_2389: Tensor[(1, 63), float32]) -> (Tensor[(?, 5, 9), float64], Tensor[(13, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(1, 63), float32]) {
  %267 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %268 = %267.0;
  %269 = cast(%268, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %270 = cast(%var_2372, dtype="bool") /* ty=Tensor[(13, 5, 9), bool] */;
  %271 = cast(%var_2389, dtype="float32") /* ty=Tensor[(1, 63), float32] */;
  %272 = reshape(%271, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float32] */;
  %273 = @func_1594(%272) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(?, 5, 9), uint64]) */;
  %274 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
  %275 = logical_and(%269, %270) /* ty=Tensor[(13, 5, 9), bool] */;
  %276 = %273.1;
  (%274, %275, %276, %var_2389)
}

def @func_10162() -> (Tensor[(336), int32],) {
  %277 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %278 = %277.2;
  (%278,)
}

def @func_10713() -> Tensor[(336), int32] {
  %279 = @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %279.0
}

def @func_8349() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %280 = @func_4675() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %281 = @func_5144() /* ty=Tensor[(?, 5, 9), float64] */;
  %282 = %280.0;
  %283 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%281, %282, %283)
}

def @func_1077(%var_1051: Tensor[(14, 3, 8), int32], %var_1052: Tensor[(14, 3, 8), int32], %var_1073: Tensor[(14, 3, 8), int32]) -> (Tensor[(14, 3, 8), int32], Tensor[(14, 3, 8), int16]) {
  %284 = cast(%var_1052, dtype="int32") /* ty=Tensor[(14, 3, 8), int32] */;
  %285 = shape_of(%var_1051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%var_1051, dtype="int32") /* ty=Tensor[(14, 3, 8), int32] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %288 = cast(%var_1073, dtype="int16") /* ty=Tensor[(14, 3, 8), int16] */;
  %289 = shape_of(%var_1052, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%var_1052, dtype="int16") /* ty=Tensor[(14, 3, 8), int16] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %292 = subtract(%286, %287) /* ty=Tensor[(14, 3, 8), int32] */;
  %293 = right_shift(%290, %291) /* ty=Tensor[(14, 3, 8), int16] */;
  (%292, %293)
}

def @func_1336() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %294 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  %295 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%294, %295)
}

def @func_7338(%var_7333: Tensor[(16, 7, 10), int64], %var_7334: Tensor[(16, 7, 10), int64]) -> Tensor[(16, 7, 10), int64] {
  %296 = cast(%var_7334, dtype="int64") /* ty=Tensor[(16, 7, 10), int64] */;
  %297 = shape_of(%var_7333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_7333, dtype="int64") /* ty=Tensor[(16, 7, 10), int64] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%298, %299) /* ty=Tensor[(16, 7, 10), int64] */
}

def @func_564() -> (Tensor[(?, 5, 9), uint64],) {
  %300 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%300,)
}

def @func_7981(%var_7947: Tensor[(70), int32], %var_7956: Tensor[(6, 84), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(7, 1, 10), bool], int32, Tensor[(70), int32], Tensor[(?, 5, 9), uint64], Tensor[(6, 84), float32], Tensor[(?, 5, 9), uint8], Tensor[(15, 5, 9), bool]) {
  %301 = @func_5597() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %302 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %303 = cast(%var_7947, dtype="int32") /* ty=Tensor[(70), int32] */;
  %304 = reshape(%302, newshape=[]) /* ty=int32 */;
  %305 = reshape(%303, newshape=[7, 1, 10]) /* ty=Tensor[(7, 1, 10), int32] */;
  %306 = @func_689(%304, %305) /* ty=(Tensor[(7, 1, 10), bool],) */;
  %307 = cast(%var_7956, dtype="float32") /* ty=Tensor[(6, 84), float32] */;
  %308 = reshape(%307, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %309 = @func_4850(%308) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(?, 5, 9), uint64]) */;
  %310 = @func_7489() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(?, 5, 9), uint8]) */;
  %311 = @func_4624() /* ty=(Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */;
  %312 = %301.0;
  %313 = %306.0;
  %314 = %309.1;
  %315 = %310.1;
  %316 = %311.1;
  (%312, %313, -9 /* ty=int32 */, %var_7947, %314, %var_7956, %315, %316)
}

def @func_10202() -> Tensor[(?, 5, 9), uint64] {
  %317 = @func_4675() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %317.0
}

def @func_7462() -> (Tensor[(?, 5, 9), uint64],) {
  %318 = @func_3299() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %319 = %318.0;
  (%319,)
}

def @func_5597() -> (Tensor[(?, 5, 9), uint64],) {
  %320 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %321 = %320.0;
  (%321,)
}

def @func_6303() -> (Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) {
  %322 = @func_6087() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %323 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 126), uint64] */, dtype="uint64") /* ty=Tensor[(5, 126), uint64] */;
  %324 = reshape(%323, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint64] */;
  %325 = %322.1;
  %326 = @func_5853(%324) /* ty=Tensor[(14, 5, 9), bool] */;
  (%325, %326, meta[relay.Constant][15] /* ty=Tensor[(5, 126), uint64] */)
}

def @func_4543() -> Tensor[(13, 14, 3), float64] {
  %327 = cast(4.23621f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %328 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 14, 3), float64] */;
  power(%327, %328) /* ty=Tensor[(13, 14, 3), float64] */
}

def @func_5135() -> (Tensor[(?, 5, 9), uint64],) {
  %329 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %330 = %329.1;
  (%330,)
}

def @func_8633() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(288), float32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %331 = cast(meta[relay.Constant][17] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %332 = reshape(%331, newshape=[3, 12, 8]) /* ty=Tensor[(3, 12, 8), float32] */;
  %333 = @func_1706(%332) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(3, 12, 8), uint32]) */;
  %334 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %335 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %336 = @func_7890() /* ty=Tensor[(?, 5, 9), uint64] */;
  %337 = %333.0;
  %338 = %334.0;
  %339 = %335.0;
  (%336, %337, meta[relay.Constant][17] /* ty=Tensor[(288), float32] */, %338, %339)
}

def @func_2089(%var_2055: Tensor[(336), int32], %var_2057: Tensor[(5, 5, 9), float64]) -> (Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(5, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %340 = cast(%var_2055, dtype="int32") /* ty=Tensor[(336), int32] */;
  %341 = reshape(%340, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %342 = @func_1232(%341) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32]) */;
  %343 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %344 = %343.0;
  %345 = cast(%344, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %346 = cast(%var_2057, dtype="bool") /* ty=Tensor[(5, 5, 9), bool] */;
  %347 = @func_1024() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %348 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %349 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %350 = %342.3;
  %351 = logical_or(%345, %346) /* ty=Tensor[(5, 5, 9), bool] */;
  %352 = %347.0;
  %353 = %348.0;
  %354 = %349.0;
  (%350, %var_2055, %351, %352, %353, %354)
}

def @func_7067() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(7, 5, 9), uint16]) {
  %355 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %356 = @func_5817() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(336), int32], Tensor[(7, 5, 9), uint16]) */;
  %357 = @func_4823() /* ty=Tensor[(?, 5, 9), uint64] */;
  %358 = %355.0;
  %359 = %356.3;
  (%357, %358, %359)
}

def @func_8285() -> (Tensor[(?, 5, 9), uint8],) {
  %360 = @func_3398() /* ty=(Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) */;
  %361 = %360.0;
  (%361,)
}

def @func_1567() -> (Tensor[(?, 5, 9), uint64],) {
  %362 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %363 = %362.1;
  (%363,)
}

def @func_5195() -> Tensor[(?, 5, 9), uint64] {
  %364 = @func_4160() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %364.1
}

def @func_7489() -> (Tensor[(15, 5, 9), bool], Tensor[(?, 5, 9), uint8]) {
  %365 = @func_4624() /* ty=(Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */;
  %366 = @func_4737() /* ty=(Tensor[(?, 5, 9), uint8],) */;
  %367 = %365.1;
  %368 = %366.0;
  (%367, %368)
}

def @func_4160() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %369 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %370 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  %371 = %369.1;
  (%370, %371)
}

def @func_6976() -> Tensor[(?, 5, 9), float64] {
  %372 = @func_6303() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) */;
  %372.0
}

def @func_1024() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) {
  %373 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %374 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %375 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  %376 = cast(%375, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %377 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %378 = %373.0;
  %379 = %374.0;
  %380 = acos(%376) /* ty=Tensor[(?, 5, 9), float32] */;
  %381 = %377.0;
  (%378, %379, %380, %381)
}

def @func_9227(%var_9218: Tensor[(11, 5, 9), uint64]) -> Tensor[(11, 5, 9), float32] {
  %382 = @func_2290() /* ty=Tensor[(?, 5, 9), uint64] */;
  %383 = cast(%382, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %384 = cast(%var_9218, dtype="float32") /* ty=Tensor[(11, 5, 9), float32] */;
  divide(%383, %384) /* ty=Tensor[(11, 5, 9), float32] */
}

def @func_6599(%var_6588: Tensor[(63), float32]) -> (Tensor[(?, 5, 9), uint16], Tensor[(10, 9, 11), float32], Tensor[(585), uint64], Tensor[(63), float32]) {
  %385 = @func_4270() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(11, 16, 15), float64], Tensor[(660, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %386 = %385.4;
  %387 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %388 = %387.0;
  %389 = cast(%388, dtype="uint16") /* ty=Tensor[(?, 5, 9), uint16] */;
  %390 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%386, dtype="uint16") /* ty=Tensor[(?, 5, 9), uint16] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %393 = cast(meta[relay.Constant][18] /* ty=Tensor[(585), uint64] */, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %394 = cast(%var_6588, dtype="float32") /* ty=Tensor[(63), float32] */;
  %395 = reshape(%393, newshape=[585]) /* ty=Tensor[(585), uint64] */;
  %396 = reshape(%394, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %397 = @func_5937(%395, %396) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(10, 9, 11), float32], Tensor[(990), float32], Tensor[(?, 5, 9), uint64], Tensor[(585), uint64], Tensor[(63), float32]) */;
  %398 = bitwise_or(%391, %392) /* ty=Tensor[(?, 5, 9), uint16] */;
  %399 = %397.1;
  (%398, %399, meta[relay.Constant][18] /* ty=Tensor[(585), uint64] */, %var_6588)
}

def @func_2747(%var_2705: Tensor[(8, 5, 9), float64]) -> (Tensor[(8, 5, 9), uint8], Tensor[(?, 5, 9), float64]) {
  %400 = @func_1124() /* ty=Tensor[(?, 5, 9), float64] */;
  %401 = cast(%400, dtype="uint8") /* ty=Tensor[(?, 5, 9), uint8] */;
  %402 = cast(%var_2705, dtype="uint8") /* ty=Tensor[(8, 5, 9), uint8] */;
  %403 = right_shift(%401, %402) /* ty=Tensor[(8, 5, 9), uint8] */;
  %404 = @func_1124() /* ty=Tensor[(?, 5, 9), float64] */;
  (%403, %404)
}

def @func_11352() -> Tensor[(11, 16, 15), float64] {
  %405 = @func_4270() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(11, 16, 15), float64], Tensor[(660, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %405.1
}

def @func_2958() -> (Tensor[(?, 5, 9), uint64],) {
  %406 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %407 = %406.0;
  (%407,)
}

def @func_4118() -> (Tensor[(?, 5, 9), float64],) {
  %408 = @func_2643() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(3, 2, 8), float64], Tensor[(24, 2), float64]) */;
  %409 = %408.0;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %411 = asinh(%410) /* ty=Tensor[(?, 5, 9), float64] */;
  (%411,)
}

def @func_5853(%var_5848: Tensor[(14, 5, 9), uint64]) -> Tensor[(14, 5, 9), bool] {
  %412 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %413 = %412.0;
  %414 = cast(%413, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %415 = cast(%var_5848, dtype="bool") /* ty=Tensor[(14, 5, 9), bool] */;
  equal(%414, %415) /* ty=Tensor[(14, 5, 9), bool] */
}

def @func_5071() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %416 = @func_3586() /* ty=Tensor[(?, 5, 9), float64] */;
  %417 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%416, %417)
}

def @func_10323() -> (Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(14, 5, 9), bool]) {
  %418 = @func_7656() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) */;
  %419 = @func_9188() /* ty=Tensor[(?, 5, 9), uint64] */;
  %420 = @func_5324() /* ty=Tensor[(336), int32] */;
  %421 = %418.1;
  (%419, %420, %421)
}

def @func_10517() -> (Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(80), float32], Tensor[(2, 10, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %422 = cast(meta[relay.Constant][19] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %423 = cast(meta[relay.Constant][19] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %424 = reshape(%422, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), float32] */;
  %425 = reshape(%423, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), float32] */;
  %426 = @func_6289(%424, %425) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(2, 10, 4), float64]) */;
  %427 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
  %428 = cast(meta[relay.Constant][19] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %429 = cast(meta[relay.Constant][19] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %430 = reshape(%428, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), float32] */;
  %431 = reshape(%429, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), float32] */;
  %432 = @func_6289(%430, %431) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(2, 10, 4), float64]) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
  %435 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%427, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %438 = @func_7882() /* ty=Tensor[(336), int32] */;
  %439 = @func_7890() /* ty=Tensor[(?, 5, 9), uint64] */;
  %440 = %426.1;
  %441 = @func_4924() /* ty=Tensor[(?, 5, 9), uint64] */;
  %442 = multiply(%436, %437) /* ty=Tensor[(?, 5, 9), uint64] */;
  (%438, %439, meta[relay.Constant][19] /* ty=Tensor[(80), float32] */, %440, %441, %442)
}

def @func_7008() -> (Tensor[(?, 5, 9), uint64],) {
  %443 = @func_5195() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%443,)
}

def @func_8970() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32]) {
  %444 = @func_6224() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %445 = @func_8285() /* ty=(Tensor[(?, 5, 9), uint8],) */;
  %446 = %445.0;
  %447 = @func_5461() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %448 = %447.0;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %450 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%446, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %453 = %444.0;
  %454 = add(%451, %452) /* ty=Tensor[(?, 5, 9), float32] */;
  (%453, %454)
}

def @func_7533(%var_7516: Tensor[(48), float64]) -> (Tensor[(336), int32], Tensor[(3, 2, 8), float64], Tensor[(48), float64], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), uint64]) {
  %455 = cast(%var_7516, dtype="float64") /* ty=Tensor[(48), float64] */;
  %456 = cast(%var_7516, dtype="float64") /* ty=Tensor[(48), float64] */;
  %457 = reshape(%455, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
  %458 = reshape(%456, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
  %459 = @func_506(%457, %458) /* ty=(Tensor[(3, 2, 8), float64],) */;
  %460 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %461 = @func_2958() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %462 = @func_5583() /* ty=Tensor[(336), int32] */;
  %463 = %459.0;
  %464 = %460.1;
  %465 = %461.0;
  (%462, %463, %var_7516, %464, %465)
}

def @func_1985() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %466 = @func_1469() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %467 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %468 = %466.1;
  %469 = @func_1124() /* ty=Tensor[(?, 5, 9), float64] */;
  %470 = %467.0;
  (%468, %469, %470)
}

def @func_5817() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(336), int32], Tensor[(7, 5, 9), uint16]) {
  %471 = @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %472 = @func_5144() /* ty=Tensor[(?, 5, 9), float64] */;
  %473 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  %474 = %471.0;
  %475 = @func_5231() /* ty=Tensor[(7, 5, 9), uint16] */;
  (%472, %473, %474, %475)
}

def @func_1594(%var_1585: Tensor[(7, 3, 3), float32]) -> (Tensor[(7, 3, 3), float32], Tensor[(?, 5, 9), uint64]) {
  %476 = cast(%var_1585, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %477 = @func_1469() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %478 = atan(%476) /* ty=Tensor[(7, 3, 3), float32] */;
  %479 = %477.1;
  (%478, %479)
}

def @func_1706(%var_1690: Tensor[(3, 12, 8), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(3, 12, 8), uint32]) {
  %480 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %481 = cast(%var_1690, dtype="float32") /* ty=Tensor[(3, 12, 8), float32] */;
  %482 = cos(%481) /* ty=Tensor[(3, 12, 8), float32] */;
  %483 = cast(%var_1690, dtype="uint32") /* ty=Tensor[(3, 12, 8), uint32] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="uint32") /* ty=Tensor[(3, 12, 8), uint32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %487 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  %488 = %480.0;
  %489 = bitwise_xor(%485, %486) /* ty=Tensor[(3, 12, 8), uint32] */;
  (%487, %488, %489)
}

def @func_8898() -> Tensor[(?, 5, 9), uint64] {
  %490 = @func_7109() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %490.0
}

def @func_7081(%var_7075: Tensor[(14, 9, 10), int16]) -> (Tensor[(14, 9, 10), bool],) {
  %491 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 9, 10), int16] */, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
  %492 = shape_of(%var_7075, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%var_7075, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = greater(%493, %494) /* ty=Tensor[(14, 9, 10), bool] */;
  (%495,)
}

def @func_10347(%var_10342: Tensor[(36, 14), float32]) -> (Tensor[(336), int32], Tensor[(12, 3, 14), float32], Tensor[(36, 14), float32], Tensor[(?, 5, 9), uint64]) {
  %496 = cast(%var_10342, dtype="float32") /* ty=Tensor[(36, 14), float32] */;
  %497 = reshape(%496, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %498 = @func_4850(%497) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(?, 5, 9), uint64]) */;
  %499 = @func_9202() /* ty=Tensor[(336), int32] */;
  %500 = %498.0;
  %501 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%499, %500, %var_10342, %501)
}

def @func_9515() -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) {
  %502 = @func_2958() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %503 = @func_7656() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) */;
  %504 = @func_4160() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %505 = %502.0;
  %506 = %503.1;
  %507 = %504.0;
  (%505, %506, %507)
}

def @func_9884() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %508 = @func_7008() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %509 = @func_8103() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(1, 5, 9), float64]) */;
  %510 = %508.0;
  %511 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
  %512 = %509.0;
  (%510, %511, %512)
}

def @main() -> (Tensor[(2, 10, 4), uint64],) {
  %513 = @func_10517() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(80), float32], Tensor[(2, 10, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %514 = %513.3;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %516 = log2(%515) /* ty=Tensor[(2, 10, 4), float32] */;
  %517 = cast(%516, dtype="uint64") /* ty=Tensor[(2, 10, 4), uint64] */;
  %518 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%514, dtype="uint64") /* ty=Tensor[(2, 10, 4), uint64] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %521 = right_shift(%519, %520) /* ty=Tensor[(2, 10, 4), uint64] */;
  (%521,)
}

def @func_2943() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %522 = @func_1567() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %523 = @func_1469() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %524 = %522.0;
  %525 = %523.0;
  (%524, %525)
}

def @func_11663() -> (Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32]) {
  %526 = @func_4118() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %527 = @func_2643() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(3, 2, 8), float64], Tensor[(24, 2), float64]) */;
  %528 = @func_4924() /* ty=Tensor[(?, 5, 9), uint64] */;
  %529 = @func_9384() /* ty=Tensor[(336), int32] */;
  %530 = %526.0;
  %531 = %527.0;
  (%528, %529, %530, %531)
}

def @func_6087() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %532 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
  %533 = cast(%532, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
  %534 = reshape(%533, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint64] */;
  %535 = @func_3299() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %536 = @func_3780(%534) /* ty=Tensor[(?, 5, 9), float64] */;
  %537 = %535.0;
  (%532, %536, %537)
}

def @func_11523(%var_11500: int32) -> (Tensor[(336), int32], Tensor[(70, 1), int32], int32) {
  %538 = cast(%var_11500, dtype="int32") /* ty=int32 */;
  %539 = reshape(%538, newshape=[]) /* ty=int32 */;
  %540 = @func_6799(%539) /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(7, 1, 10), bool], int32, Tensor[(70, 1), int32], Tensor[(?, 5, 9), uint64]) */;
  %541 = @func_5351() /* ty=Tensor[(336), int32] */;
  %542 = %540.5;
  (%541, %542, %var_11500)
}

def @func_1469() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %543 = @func_1307() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %544 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
  %545 = %543.0;
  (%544, %545)
}

def @func_10879() -> Tensor[(?, 5, 9), uint64] {
  %546 = @func_9794() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %546.2
}

def @func_6907(%var_6868: Tensor[(48), float64]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(3, 2, 8), float64], Tensor[(48), float64]) {
  %547 = @func_1567() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %548 = cast(%var_6868, dtype="float64") /* ty=Tensor[(48), float64] */;
  %549 = cast(%var_6868, dtype="float64") /* ty=Tensor[(48), float64] */;
  %550 = reshape(%548, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
  %551 = reshape(%549, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
  %552 = @func_506(%550, %551) /* ty=(Tensor[(3, 2, 8), float64],) */;
  %553 = @func_4215() /* ty=Tensor[(?, 5, 9), uint64] */;
  %554 = %547.0;
  %555 = @func_1124() /* ty=Tensor[(?, 5, 9), float64] */;
  %556 = %552.0;
  (%553, %554, %555, %556, %var_6868)
}

def @func_7645() -> Tensor[(5, 126), uint64] {
  %557 = @func_6303() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) */;
  %557.2
}

def @func_10821(%var_10810: Tensor[(990), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(10, 9, 11), float32], Tensor[(990), float32], Tensor[(?, 5, 9), uint64]) {
  %558 = @func_1307() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %559 = cast(%var_10810, dtype="float32") /* ty=Tensor[(990), float32] */;
  %560 = reshape(%559, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float32] */;
  %561 = %558.0;
  %562 = @func_1515(%560) /* ty=Tensor[(10, 9, 11), float32] */;
  %563 = @func_1803() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%561, %562, %var_10810, %563)
}

def @func_791() -> Tensor[(?, 5, 9), uint64] {
  @func_480() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_7310() -> (Tensor[(?, 5, 9), uint64],) {
  %564 = @func_4675() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %565 = %564.0;
  (%565,)
}

def @func_2849(%var_2771: Tensor[(12, 10, 12), uint32], %var_2772: Tensor[(12, 10, 12), uint32], %var_2790: Tensor[(63), float32], %var_2797: Tensor[(12, 10, 12), uint32]) -> (Tensor[(1, 63), float32], Tensor[(585), uint64], Tensor[(63), float32], Tensor[(?, 5, 9), float32], Tensor[(12, 10, 12), int16], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %566 = cast(meta[relay.Constant][21] /* ty=Tensor[(585), uint64] */, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %567 = cast(%var_2790, dtype="float32") /* ty=Tensor[(63), float32] */;
  %568 = reshape(%566, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
  %569 = reshape(%567, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
  %570 = @func_2392(%568, %569) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(13, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(1, 63), float32]) */;
  %571 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %572 = cast(%var_2772, dtype="uint32") /* ty=Tensor[(12, 10, 12), uint32] */;
  %573 = shape_of(%var_2771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%var_2771, dtype="uint32") /* ty=Tensor[(12, 10, 12), uint32] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %576 = left_shift(%574, %575) /* ty=Tensor[(12, 10, 12), uint32] */;
  %577 = cast(%var_2797, dtype="int16") /* ty=Tensor[(12, 10, 12), int16] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="int16") /* ty=Tensor[(12, 10, 12), int16] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %581 = @func_1985() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %582 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %583 = %570.3;
  %584 = %571.0;
  %585 = bitwise_or(%579, %580) /* ty=Tensor[(12, 10, 12), int16] */;
  %586 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
  %587 = %581.1;
  %588 = %582.0;
  (%583, meta[relay.Constant][21] /* ty=Tensor[(585), uint64] */, %var_2790, %584, %585, %586, %587, %588)
}

def @func_7656() -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) {
  %589 = cast(meta[relay.Constant][22] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %590 = reshape(%589, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint64] */;
  %591 = @func_5110() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %592 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
  %593 = @func_5853(%590) /* ty=Tensor[(14, 5, 9), bool] */;
  %594 = %591.1;
  (%592, %593, meta[relay.Constant][22] /* ty=Tensor[(630), uint64] */, %594)
}

def @func_10242() -> (Tensor[(?, 5, 9), uint64],) {
  %595 = @func_4557() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %596 = %595.0;
  (%596,)
}

def @func_11123(%var_11081: Tensor[(15, 14, 11), float32], %var_11086: Tensor[(1120), int64], %var_11095: Tensor[(63), float32]) -> (Tensor[(70), int32], Tensor[(1120), int64], Tensor[(5, 126), uint64], Tensor[(96, 20), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(1, 585), float32], Tensor[(15, 14, 11), float32]) {
  %597 = cast(%var_11086, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %598 = reshape(%597, newshape=[56, 20]) /* ty=Tensor[(56, 20), int64] */;
  %599 = @func_10123(%598) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(16, 7, 10), int64], Tensor[(9, 5, 9), float64], Tensor[(56, 20), uint8], Tensor[(?, 5, 9), uint64], Tensor[(405), float64], Tensor[(70), int32], Tensor[(70), int32], Tensor[(504), float32]) */;
  %600 = cast(meta[relay.Constant][23] /* ty=Tensor[(96, 20), float32] */, dtype="float32") /* ty=Tensor[(96, 20), float32] */;
  %601 = cast(meta[relay.Constant][23] /* ty=Tensor[(96, 20), float32] */, dtype="float32") /* ty=Tensor[(96, 20), float32] */;
  %602 = reshape(%600, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float32] */;
  %603 = reshape(%601, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float32] */;
  %604 = @func_8190(%602, %603) /* ty=(Tensor[(15, 16, 8), float32], Tensor[(5, 126), uint64]) */;
  %605 = cast(%var_11095, dtype="float32") /* ty=Tensor[(63), float32] */;
  %606 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 585), float32] */, dtype="float32") /* ty=Tensor[(1, 585), float32] */;
  %607 = reshape(%605, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %608 = reshape(%606, newshape=[195, 3]) /* ty=Tensor[(195, 3), float32] */;
  %609 = @func_7855(%607, %608) /* ty=(Tensor[(336), int32], Tensor[(1, 63), float32], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(?, 5, 9), uint64], Tensor[(195, 3), float64], Tensor[(1, 5, 9), float64], Tensor[(195, 3), int8]) */;
  %610 = cast(%var_11081, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %611 = exp(%610) /* ty=Tensor[(15, 14, 11), float32] */;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  %613 = sin(%612) /* ty=Tensor[(15, 14, 11), float64] */;
  %614 = cast(%var_11081, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%613, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %618 = %599.7;
  %619 = %604.1;
  %620 = %609.2;
  %621 = power(%616, %617) /* ty=Tensor[(15, 14, 11), float32] */;
  (%618, %var_11086, %619, meta[relay.Constant][23] /* ty=Tensor[(96, 20), float32] */, %620, %var_11095, meta[relay.Constant][24] /* ty=Tensor[(1, 585), float32] */, %621)
}

def @func_3398() -> (Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) {
  %622 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  %623 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 5, 9), uint64] */, dtype="uint8") /* ty=Tensor[(1, 5, 9), uint8] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="uint8") /* ty=Tensor[(?, 5, 9), uint8] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %627 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 5, 9), uint64] */, dtype="float64") /* ty=Tensor[(1, 5, 9), float64] */;
  %628 = bitwise_xor(%625, %626) /* ty=Tensor[(?, 5, 9), uint8] */;
  %629 = log2(%627) /* ty=Tensor[(1, 5, 9), float64] */;
  (%628, %629)
}

def @func_454() -> (Tensor[(?, 5, 9), uint64],) {
  %630 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%630,)
}

def @func_9990(%var_9984: Tensor[(15, 6, 16), float64], %var_9985: Tensor[(15, 6, 16), float64]) -> (Tensor[(15, 6, 16), float64],) {
  %631 = cast(%var_9985, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %632 = shape_of(%var_9984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_9984, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %635 = mod(%633, %634) /* ty=Tensor[(15, 6, 16), float64] */;
  (%635,)
}

def @func_4270() -> (Tensor[(?, 5, 9), uint64], Tensor[(11, 16, 15), float64], Tensor[(660, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %636 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %637 = cast(meta[relay.Constant][26] /* ty=Tensor[(660, 4), float64] */, dtype="float64") /* ty=Tensor[(660, 4), float64] */;
  %638 = reshape(%637, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), float64] */;
  %639 = @func_2982(%638) /* ty=(Tensor[(11, 16, 15), float64],) */;
  %640 = @func_1307() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %641 = %636.0;
  %642 = %639.0;
  %643 = @func_4215() /* ty=Tensor[(?, 5, 9), uint64] */;
  %644 = %640.0;
  (%641, %642, meta[relay.Constant][26] /* ty=Tensor[(660, 4), float64] */, %643, %644)
}

def @func_10274() -> (Tensor[(?, 5, 9), float64],) {
  %645 = @func_8349() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %646 = %645.0;
  (%646,)
}

def @func_4737() -> (Tensor[(?, 5, 9), uint8],) {
  %647 = @func_3398() /* ty=(Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) */;
  %648 = %647.0;
  (%648,)
}

def @func_4490(%var_4457: Tensor[(10, 2, 6), float32], %var_4458: Tensor[(10, 2, 6), float32]) -> (Tensor[(10, 2, 6), float32], Tensor[(?, 5, 9), float64], Tensor[(10, 2, 6), int16]) {
  %649 = cast(%var_4458, dtype="float32") /* ty=Tensor[(10, 2, 6), float32] */;
  %650 = shape_of(%var_4457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%var_4457, dtype="float32") /* ty=Tensor[(10, 2, 6), float32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %653 = @func_3942() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %654 = cast(%var_4458, dtype="float64") /* ty=Tensor[(10, 2, 6), float64] */;
  %655 = sinh(%654) /* ty=Tensor[(10, 2, 6), float64] */;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(10, 2, 6), float32] */;
  %657 = sigmoid(%656) /* ty=Tensor[(10, 2, 6), float32] */;
  %658 = cast(%655, dtype="int16") /* ty=Tensor[(10, 2, 6), int16] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%657, dtype="int16") /* ty=Tensor[(10, 2, 6), int16] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %662 = mod(%651, %652) /* ty=Tensor[(10, 2, 6), float32] */;
  %663 = %653.1;
  %664 = subtract(%660, %661) /* ty=Tensor[(10, 2, 6), int16] */;
  (%662, %663, %664)
}

def @func_9794() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %665 = @func_1567() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %666 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  %667 = @func_4924() /* ty=Tensor[(?, 5, 9), uint64] */;
  %668 = %665.0;
  (%666, %667, %668)
}

def @func_6964() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %669 = @func_1567() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %670 = @func_3247() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %671 = %669.0;
  %672 = %670.0;
  (%671, %672)
}

def @func_12054() -> (Tensor[(336), int32],) {
  %673 = @func_7882() /* ty=Tensor[(336), int32] */;
  (%673,)
}

def @func_11369() -> (Tensor[(?, 5, 9), float32],) {
  %674 = @func_8970() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32]) */;
  %675 = %674.1;
  (%675,)
}

def @func_2582() -> Tensor[(?, 5, 9), uint64] {
  @func_791() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_3247() -> (Tensor[(?, 5, 9), uint64],) {
  %676 = @func_3214() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%676,)
}

def @func_9298() -> (Tensor[(10, 5, 9), uint32],) {
  %677 = @func_5110() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %678 = %677.1;
  %679 = cast(%678, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %680 = tan(%679) /* ty=Tensor[(?, 5, 9), float32] */;
  %681 = cast(%680, dtype="uint32") /* ty=Tensor[(?, 5, 9), uint32] */;
  %682 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 5, 9), float32] */, dtype="uint32") /* ty=Tensor[(10, 5, 9), uint32] */;
  %683 = left_shift(%681, %682) /* ty=Tensor[(10, 5, 9), uint32] */;
  (%683,)
}

def @func_11326(%var_11322: Tensor[(360), float64]) -> (Tensor[(75, 9), bool], Tensor[(8, 5, 9), uint8], Tensor[(360), float64]) {
  %684 = @func_4624() /* ty=(Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */;
  %685 = cast(%var_11322, dtype="float64") /* ty=Tensor[(360), float64] */;
  %686 = reshape(%685, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %687 = @func_2747(%686) /* ty=(Tensor[(8, 5, 9), uint8], Tensor[(?, 5, 9), float64]) */;
  %688 = %684.2;
  %689 = %687.0;
  (%688, %689, %var_11322)
}

def @func_10230() -> (Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) {
  %690 = @func_7656() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) */;
  %691 = %690.1;
  %692 = @func_4924() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%691, %692)
}

def @func_5744() -> Tensor[(?, 5, 9), float64] {
  %693 = @func_4118() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %693.0
}

def @func_4850(%var_4843: Tensor[(12, 3, 14), float32]) -> (Tensor[(12, 3, 14), float32], Tensor[(?, 5, 9), uint64]) {
  %694 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %695 = shape_of(%var_4843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%var_4843, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %698 = mod(%696, %697) /* ty=Tensor[(12, 3, 14), float32] */;
  %699 = @func_3214() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%698, %699)
}

def @func_8255(%var_8234: Tensor[(2, 5, 9), uint64]) -> (Tensor[(2, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %700 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
  %701 = cast(%700, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %702 = cast(%var_8234, dtype="bool") /* ty=Tensor[(2, 5, 9), bool] */;
  %703 = @func_1024() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %704 = @func_7067() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(7, 5, 9), uint16]) */;
  %705 = greater(%701, %702) /* ty=Tensor[(2, 5, 9), bool] */;
  %706 = %703.0;
  %707 = %704.0;
  (%705, %706, %707)
}

def @func_3115(%var_3109: Tensor[(5, 5, 9), uint64]) -> (Tensor[(5, 5, 9), bool],) {
  %708 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  %709 = cast(%708, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %710 = cast(%var_3109, dtype="bool") /* ty=Tensor[(5, 5, 9), bool] */;
  %711 = not_equal(%709, %710) /* ty=Tensor[(5, 5, 9), bool] */;
  (%711,)
}

def @func_9915(%var_9905: float64, %var_9906: Tensor[(1176), float64]) -> (Tensor[(?, 5, 9), uint64], Tensor[(6, 14, 14), float64], float64, Tensor[(1176), float64]) {
  %712 = @func_7462() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %713 = cast(%var_9905, dtype="float64") /* ty=float64 */;
  %714 = cast(%var_9906, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %715 = reshape(%713, newshape=[]) /* ty=float64 */;
  %716 = reshape(%714, newshape=[6, 14, 14]) /* ty=Tensor[(6, 14, 14), float64] */;
  %717 = cast(%var_9906, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %718 = %712.0;
  %719 = @func_6157(%715, %716) /* ty=Tensor[(6, 14, 14), float64] */;
  %720 = sqrt(%717) /* ty=Tensor[(1176), float64] */;
  (%718, %719, %var_9905, %720)
}

def @func_2290() -> Tensor[(?, 5, 9), uint64] {
  @func_1803() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_10135() -> (Tensor[(10, 2, 16), float64],) {
  %721 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 16), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %722 = asin(%721) /* ty=Tensor[(10, 2, 16), float64] */;
  (%722,)
}

def @func_6469() -> (Tensor[(?, 5, 9), uint64],) {
  %723 = @func_4411() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), bool]) */;
  %724 = %723.1;
  (%724,)
}

def @func_10123(%var_10063: Tensor[(56, 20), int64]) -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(16, 7, 10), int64], Tensor[(9, 5, 9), float64], Tensor[(56, 20), uint8], Tensor[(?, 5, 9), uint64], Tensor[(405), float64], Tensor[(70), int32], Tensor[(70), int32], Tensor[(504), float32]) {
  %725 = @func_5597() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %726 = @func_6303() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) */;
  %727 = cast(%var_10063, dtype="int64") /* ty=Tensor[(56, 20), int64] */;
  %728 = cast(%var_10063, dtype="int64") /* ty=Tensor[(56, 20), int64] */;
  %729 = reshape(%727, newshape=[16, 7, 10]) /* ty=Tensor[(16, 7, 10), int64] */;
  %730 = reshape(%728, newshape=[16, 7, 10]) /* ty=Tensor[(16, 7, 10), int64] */;
  %731 = cast(meta[relay.Constant][30] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %732 = reshape(%731, newshape=[405]) /* ty=Tensor[(405), float64] */;
  %733 = @func_2140(%732) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(9, 5, 9), int64], Tensor[(405), float64]) */;
  %734 = %733.1;
  %735 = cast(meta[relay.Constant][30] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%734, dtype="float64") /* ty=Tensor[(9, 5, 9), float64] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %739 = cast(meta[relay.Constant][31] /* ty=Tensor[(56, 20), int64] */, dtype="uint8") /* ty=Tensor[(56, 20), uint8] */;
  %740 = shape_of(%var_10063, dtype="int32") /* ty=Tensor[(2), int32] */;
  %741 = cast(%var_10063, dtype="uint8") /* ty=Tensor[(56, 20), uint8] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %743 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %744 = cast(meta[relay.Constant][30] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %745 = log(%744) /* ty=Tensor[(405), float64] */;
  %746 = cast(%734, dtype="float64") /* ty=Tensor[(9, 5, 9), float64] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(1), int32] */;
  %748 = cast(%745, dtype="float64") /* ty=Tensor[(405), float64] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?), float64] */;
  %750 = cast(meta[relay.Constant][32] /* ty=Tensor[(70), int32] */, dtype="int32") /* ty=Tensor[(70), int32] */;
  %751 = cast(meta[relay.Constant][33] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %752 = reshape(%750, newshape=[70]) /* ty=Tensor[(70), int32] */;
  %753 = reshape(%751, newshape=[6, 84]) /* ty=Tensor[(6, 84), float32] */;
  %754 = @func_7981(%752, %753) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(7, 1, 10), bool], int32, Tensor[(70), int32], Tensor[(?, 5, 9), uint64], Tensor[(6, 84), float32], Tensor[(?, 5, 9), uint8], Tensor[(15, 5, 9), bool]) */;
  %755 = %725.0;
  %756 = %726.1;
  %757 = @func_7338(%729, %730) /* ty=Tensor[(16, 7, 10), int64] */;
  %758 = floor_mod(%737, %738) /* ty=Tensor[(9, 5, 9), float64] */;
  %759 = add(%741, %742) /* ty=Tensor[(56, 20), uint8] */;
  %760 = %743.0;
  %761 = divide(%748, %749) /* ty=Tensor[(405), float64] */;
  %762 = %754.3;
  (%755, %756, %757, %758, %759, %760, %761, %762, meta[relay.Constant][32] /* ty=Tensor[(70), int32] */, meta[relay.Constant][33] /* ty=Tensor[(504), float32] */)
}

def @func_11034() -> Tensor[(?, 5, 9), uint64] {
  %763 = @func_2958() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %763.0
}

def @func_4924() -> Tensor[(?, 5, 9), uint64] {
  %764 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %764.0
}

def @func_11971() -> (Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) {
  %765 = @func_7656() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) */;
  %766 = @func_10517() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(80), float32], Tensor[(2, 10, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %767 = %765.1;
  %768 = %766.5;
  (%767, %768)
}

def @func_5144() -> Tensor[(?, 5, 9), float64] {
  %769 = @func_4118() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %769.0
}

def @func_6038(%var_6030: Tensor[(1440), uint32], %var_6031: Tensor[(63), float32]) -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(585), uint64], Tensor[(1440), uint32], Tensor[(63), float32]) {
  %770 = cast(%var_6030, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %771 = cast(%var_6030, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %772 = cast(%var_6031, dtype="float32") /* ty=Tensor[(63), float32] */;
  %773 = cast(%var_6030, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %774 = reshape(%770, newshape=[12, 10, 12]) /* ty=Tensor[(12, 10, 12), uint32] */;
  %775 = reshape(%771, newshape=[12, 10, 12]) /* ty=Tensor[(12, 10, 12), uint32] */;
  %776 = reshape(%772, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %777 = reshape(%773, newshape=[12, 10, 12]) /* ty=Tensor[(12, 10, 12), uint32] */;
  %778 = @func_2849(%774, %775, %776, %777) /* ty=(Tensor[(1, 63), float32], Tensor[(585), uint64], Tensor[(63), float32], Tensor[(?, 5, 9), float32], Tensor[(12, 10, 12), int16], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %779 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  %780 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  %781 = %778.1;
  (%779, %780, %781, %var_6030, %var_6031)
}

def @func_9384() -> Tensor[(336), int32] {
  %782 = @func_4624() /* ty=(Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */;
  %782.4
}

def @func_9687() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %783 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %784 = @func_3299() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %785 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %786 = %783.0;
  %787 = %784.0;
  %788 = @func_4215() /* ty=Tensor[(?, 5, 9), uint64] */;
  %789 = %785.0;
  (%786, %787, %788, %789)
}

def @func_6642() -> (Tensor[(?, 5, 9), float64], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), uint64]) {
  %790 = @func_5726() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %791 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %792 = @func_4557() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %793 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %794 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %795 = %790.0;
  %796 = %791.1;
  %797 = %792.1;
  %798 = %793.0;
  %799 = %794.1;
  %800 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%795, %796, %797, %798, %799, %800)
}

def @func_2140(%var_2133: Tensor[(405), float64]) -> (Tensor[(?, 5, 9), float64], Tensor[(9, 5, 9), int64], Tensor[(405), float64]) {
  %801 = @func_1469() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %802 = cast(%var_2133, dtype="float64") /* ty=Tensor[(405), float64] */;
  %803 = reshape(%802, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float64] */;
  %804 = @func_1431(%803) /* ty=(Tensor[(9, 5, 9), int64], Tensor[(?, 5, 9), float64]) */;
  %805 = %801.0;
  %806 = %804.0;
  (%805, %806, %var_2133)
}

def @func_10994() -> Tensor[(?, 5, 9), float64] {
  %807 = @func_5071() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %807.0
}

def @func_7167() -> (Tensor[(?, 5, 9), uint64],) {
  %808 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %809 = %808.0;
  (%809,)
}

def @func_7855(%var_7776: Tensor[(63), float32], %var_7831: Tensor[(195, 3), float32]) -> (Tensor[(336), int32], Tensor[(1, 63), float32], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(?, 5, 9), uint64], Tensor[(195, 3), float64], Tensor[(1, 5, 9), float64], Tensor[(195, 3), int8]) {
  %810 = cast(meta[relay.Constant][34] /* ty=Tensor[(195, 3), uint64] */, dtype="uint64") /* ty=Tensor[(195, 3), uint64] */;
  %811 = cast(%var_7776, dtype="float32") /* ty=Tensor[(63), float32] */;
  %812 = reshape(%810, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
  %813 = reshape(%811, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
  %814 = @func_2392(%812, %813) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(13, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(1, 63), float32]) */;
  %815 = cast(meta[relay.Constant][34] /* ty=Tensor[(195, 3), uint64] */, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
  %816 = tan(%815) /* ty=Tensor[(195, 3), float64] */;
  %817 = cast(%816, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
  %818 = acos(%817) /* ty=Tensor[(195, 3), float64] */;
  %819 = cast(%816, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
  %820 = asin(%819) /* ty=Tensor[(195, 3), float64] */;
  %821 = cast(%820, dtype="bool") /* ty=Tensor[(195, 3), bool] */;
  %822 = shape_of(%818, dtype="int32") /* ty=Tensor[(2), int32] */;
  %823 = cast(%818, dtype="bool") /* ty=Tensor[(195, 3), bool] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %825 = @func_5240() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %826 = cast(%818, dtype="float32") /* ty=Tensor[(195, 3), float32] */;
  %827 = sin(%826) /* ty=Tensor[(195, 3), float32] */;
  %828 = cast(%827, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
  %829 = @func_3398() /* ty=(Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) */;
  %830 = cast(%var_7831, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
  %831 = shape_of(%827, dtype="int32") /* ty=Tensor[(2), int32] */;
  %832 = cast(%827, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %834 = mod(%832, %833) /* ty=Tensor[(195, 3), float64] */;
  %835 = cast(meta[relay.Constant][34] /* ty=Tensor[(195, 3), uint64] */, dtype="int8") /* ty=Tensor[(195, 3), int8] */;
  %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(2), int32] */;
  %837 = cast(%834, dtype="int8") /* ty=Tensor[(195, 3), int8] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %839 = @func_5583() /* ty=Tensor[(336), int32] */;
  %840 = %814.3;
  %841 = equal(%823, %824) /* ty=Tensor[(195, 3), bool] */;
  %842 = %825.0;
  %843 = log(%828) /* ty=Tensor[(195, 3), float64] */;
  %844 = %829.1;
  %845 = bitwise_or(%837, %838) /* ty=Tensor[(195, 3), int8] */;
  (%839, %840, %var_7776, %841, %842, %843, %844, %845)
}

def @func_592() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %846 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  %847 = cast(%846, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %848 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %849 = acosh(%847) /* ty=Tensor[(?, 5, 9), float64] */;
  %850 = %848.0;
  (%849, %850)
}

def @func_11402(%var_11374: Tensor[(6, 1, 12), uint64], %var_11382: Tensor[(14, 165), float64], %var_11398: Tensor[(14, 165), float64]) -> (Tensor[(6, ?, 12), uint64], Tensor[(336), int32], Tensor[(14, 165), float32]) {
  %851 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 1, 12), uint64] */, dtype="uint64") /* ty=Tensor[(6, 1, 12), uint64] */;
  %852 = shape_of(%var_11374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%var_11374, dtype="uint64") /* ty=Tensor[(6, 1, 12), uint64] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %855 = cast(%var_11382, dtype="float64") /* ty=Tensor[(14, 165), float64] */;
  %856 = reshape(%855, newshape=[11, 14, 15]) /* ty=Tensor[(11, 14, 15), float64] */;
  %857 = @func_4020(%856) /* ty=(Tensor[(11, 14, 15), float64], Tensor[(336), int32]) */;
  %858 = cast(%var_11398, dtype="float32") /* ty=Tensor[(14, 165), float32] */;
  %859 = shape_of(%var_11382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %860 = cast(%var_11382, dtype="float32") /* ty=Tensor[(14, 165), float32] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %862 = right_shift(%853, %854) /* ty=Tensor[(6, ?, 12), uint64] */;
  %863 = %857.1;
  %864 = mod(%860, %861) /* ty=Tensor[(14, 165), float32] */;
  (%862, %863, %864)
}

def @func_6289(%var_6266: Tensor[(2, 10, 4), float32], %var_6267: Tensor[(2, 10, 4), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(2, 10, 4), float64]) {
  %865 = @func_5110() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %866 = cast(%var_6267, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %867 = shape_of(%var_6266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%var_6266, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %870 = mod(%868, %869) /* ty=Tensor[(2, 10, 4), float32] */;
  %871 = cast(%870, dtype="float64") /* ty=Tensor[(2, 10, 4), float64] */;
  %872 = %865.1;
  %873 = asin(%871) /* ty=Tensor[(2, 10, 4), float64] */;
  (%872, %873)
}

def @func_7890() -> Tensor[(?, 5, 9), uint64] {
  %874 = @func_3247() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %874.0
}

def @func_8081() -> Tensor[(?, 5, 9), float64] {
  %875 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %875.0
}

def @func_4411() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), bool]) {
  %876 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %877 = @func_4118() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %878 = @func_1567() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %879 = %878.0;
  %880 = cast(%879, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %881 = log(%880) /* ty=Tensor[(?, 5, 9), float32] */;
  %882 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  %883 = cast(%882, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %884 = shape_of(%881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%881, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %887 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  %888 = %876.0;
  %889 = %877.0;
  %890 = less_equal(%885, %886) /* ty=Tensor[(?, 5, 9), bool] */;
  (%887, %888, %889, %890)
}

def @func_6093(%var_6090: Tensor[(16, 16, 14), float32]) -> (Tensor[(16, 16, 14), float32],) {
  %891 = cast(%var_6090, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %892 = atanh(%891) /* ty=Tensor[(16, 16, 14), float32] */;
  (%892,)
}

def @func_6732() -> (Tensor[(7, 5, 9), uint16], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) {
  %893 = @func_5597() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %894 = @func_5817() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(336), int32], Tensor[(7, 5, 9), uint16]) */;
  %895 = @func_3883() /* ty=Tensor[(7, 5, 9), uint16] */;
  %896 = %893.0;
  %897 = %894.2;
  (%895, %896, %897)
}

def @func_9945(%var_9933: Tensor[(7, 5, 9), uint16]) -> (Tensor[(7, 5, 9), float64],) {
  %898 = @func_5231() /* ty=Tensor[(7, 5, 9), uint16] */;
  %899 = cast(%var_9933, dtype="int64") /* ty=Tensor[(7, 5, 9), int64] */;
  %900 = shape_of(%898, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%898, dtype="int64") /* ty=Tensor[(7, 5, 9), int64] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %903 = bitwise_and(%901, %902) /* ty=Tensor[(7, 5, 9), int64] */;
  %904 = cast(%898, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(3), int32] */;
  %906 = cast(%903, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %908 = mod(%906, %907) /* ty=Tensor[(7, 5, 9), float64] */;
  (%908,)
}

def @func_5240() -> (Tensor[(?, 5, 9), uint64],) {
  %909 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%909,)
}

def @func_11774() -> Tensor[(7, 5, 9), uint16] {
  @func_3883() /* ty=Tensor[(7, 5, 9), uint16] */
}

def @func_9202() -> Tensor[(336), int32] {
  @func_5583() /* ty=Tensor[(336), int32] */
}

def @func_4215() -> Tensor[(?, 5, 9), uint64] {
  @func_791() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_7148() -> (Tensor[(?, 5, 9), uint64],) {
  %910 = @func_4270() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(11, 16, 15), float64], Tensor[(660, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %911 = %910.0;
  (%911,)
}

def @func_480() -> Tensor[(?, 5, 9), uint64] {
  @func_380() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_3523() -> (Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %912 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %913 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %914 = %912.2;
  %915 = %913.0;
  %916 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  (%914, %915, %916)
}

def @func_8577(%var_8574: Tensor[(1260), int16]) -> (Tensor[(7, 5, 9), uint16], Tensor[(7, 5, 9), uint16], Tensor[(14, 9, 10), bool], Tensor[(1260), int16]) {
  %917 = @func_6732() /* ty=(Tensor[(7, 5, 9), uint16], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */;
  %918 = cast(%var_8574, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %919 = reshape(%918, newshape=[14, 9, 10]) /* ty=Tensor[(14, 9, 10), int16] */;
  %920 = @func_7081(%919) /* ty=(Tensor[(14, 9, 10), bool],) */;
  %921 = @func_5231() /* ty=Tensor[(7, 5, 9), uint16] */;
  %922 = %917.0;
  %923 = %920.0;
  (%921, %922, %923, %var_8574)
}

def @func_11896() -> (Tensor[(?, 5, 9), uint64], Tensor[(13, 14, 3), float64]) {
  %924 = @func_10393() /* ty=Tensor[(?, 5, 9), uint64] */;
  %925 = @func_4543() /* ty=Tensor[(13, 14, 3), float64] */;
  (%924, %925)
}

def @func_380() -> Tensor[(?, 5, 9), uint64] {
  %926 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
  %927 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
  %928 = cast(%927, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
  %929 = shape_of(%926, dtype="int32") /* ty=Tensor[(3), int32] */;
  %930 = cast(%926, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
  %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %932 = logical_xor(%930, %931) /* ty=Tensor[(?, 5, 9), uint64] */;
  %933 = cast(%926, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
  %934 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %935 = cast(%932, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%935, %936) /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_5231() -> Tensor[(7, 5, 9), uint16] {
  @func_3883() /* ty=Tensor[(7, 5, 9), uint16] */
}

def @func_4020(%var_3945: Tensor[(11, 14, 15), float64]) -> (Tensor[(11, 14, 15), float64], Tensor[(336), int32]) {
  %937 = cast(%var_3945, dtype="float64") /* ty=Tensor[(11, 14, 15), float64] */;
  %938 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(11, 14, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 14, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 15), float64] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %941 = @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %942 = power(%939, %940) /* ty=Tensor[(11, 14, 15), float64] */;
  %943 = %941.0;
  (%942, %943)
}

def @func_4557() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %944 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %945 = @func_2943() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %946 = %945.0;
  %947 = cast(%946, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %948 = %944.1;
  %949 = log10(%947) /* ty=Tensor[(?, 5, 9), float64] */;
  (%948, %949)
}

def @func_7427() -> Tensor[(?, 5, 9), uint64] {
  %950 = @func_5240() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %950.0
}

def @func_2180(%var_2167: Tensor[(15, 5, 9), bool], %var_2168: Tensor[(15, 5, 9), bool]) -> (Tensor[(15, 5, 9), bool],) {
  %951 = cast(%var_2168, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %952 = shape_of(%var_2167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %953 = cast(%var_2167, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %955 = logical_or(%953, %954) /* ty=Tensor[(15, 5, 9), bool] */;
  (%955,)
}

def @func_12103() -> Tensor[(?, 5, 9), uint64] {
  %956 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %956.0
}

def @func_5351() -> Tensor[(336), int32] {
  @func_5324() /* ty=Tensor[(336), int32] */
}

def @func_12195(%var_12189: Tensor[(5, 117), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(5, 117), bool]) {
  %957 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %958 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 117), float32] */, dtype="float32") /* ty=Tensor[(5, 117), float32] */;
  %959 = reshape(%958, newshape=[585]) /* ty=Tensor[(585), float32] */;
  %960 = @func_8806(%959) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(585), float32]) */;
  %961 = cast(%var_12189, dtype="bool") /* ty=Tensor[(5, 117), bool] */;
  %962 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(5, 117), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %963 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 117), float32] */, dtype="bool") /* ty=Tensor[(5, 117), bool] */;
  %964 = dyn.reshape(%961, %962, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %965 = %957.1;
  %966 = %960.1;
  %967 = not_equal(%963, %964) /* ty=Tensor[(5, 117), bool] */;
  (%965, %966, %967)
}

def @func_3586() -> Tensor[(?, 5, 9), float64] {
  %968 = @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %968.2
}

def @func_506(%var_501: Tensor[(3, 2, 8), float64], %var_502: Tensor[(3, 2, 8), float64]) -> (Tensor[(3, 2, 8), float64],) {
  %969 = cast(%var_502, dtype="float64") /* ty=Tensor[(3, 2, 8), float64] */;
  %970 = shape_of(%var_501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %971 = cast(%var_501, dtype="float64") /* ty=Tensor[(3, 2, 8), float64] */;
  %972 = dyn.reshape(%969, %970, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %973 = mod(%971, %972) /* ty=Tensor[(3, 2, 8), float64] */;
  (%973,)
}

def @func_3069() -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) {
  %974 = cast(meta[relay.Constant][38] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %975 = reshape(%974, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %976 = @func_1232(%975) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32]) */;
  %977 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  %978 = %976.3;
  %979 = @func_1803() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%977, %978, meta[relay.Constant][38] /* ty=Tensor[(336), int32] */, %979)
}

def @func_5461() -> (Tensor[(?, 5, 9), float64],) {
  %980 = @func_3586() /* ty=Tensor[(?, 5, 9), float64] */;
  (%980,)
}

def @func_4823() -> Tensor[(?, 5, 9), uint64] {
  %981 = @func_4557() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %981.0
}

def @func_8103() -> (Tensor[(?, 5, 9), uint64], Tensor[(1, 5, 9), float64]) {
  %982 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %983 = @func_3398() /* ty=(Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) */;
  %984 = %982.1;
  %985 = %983.1;
  (%984, %985)
}

def @func_11610() -> Tensor[(?, 5, 9), uint64] {
  @func_2290() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_7622(%var_7582: Tensor[(11, 7, 2), float64], %var_7600: Tensor[(11, 7, 2), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(11, 7, 2), int16]) {
  %986 = @func_4160() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %987 = cast(%var_7582, dtype="float64") /* ty=Tensor[(11, 7, 2), float64] */;
  %988 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(11, 7, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %989 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 7, 2), float64] */;
  %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %991 = floor_mod(%989, %990) /* ty=Tensor[(11, 7, 2), float64] */;
  %992 = cast(%991, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
  %993 = atanh(%992) /* ty=Tensor[(11, 7, 2), float32] */;
  %994 = cast(%var_7600, dtype="int16") /* ty=Tensor[(11, 7, 2), int16] */;
  %995 = shape_of(%993, dtype="int32") /* ty=Tensor[(3), int32] */;
  %996 = cast(%993, dtype="int16") /* ty=Tensor[(11, 7, 2), int16] */;
  %997 = dyn.reshape(%994, %995, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %998 = %986.1;
  %999 = logical_xor(%996, %997) /* ty=Tensor[(11, 7, 2), int16] */;
  (%998, %999)
}

def @func_3214() -> Tensor[(?, 5, 9), uint64] {
  @func_791() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_8374() -> (Tensor[(?, 5, 9), uint64],) {
  %1000 = @func_3942() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %1001 = %1000.0;
  (%1001,)
}

def @func_2872() -> Tensor[(?, 5, 9), float64] {
  @func_1124() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_5110() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %1002 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %1003 = @func_2943() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %1004 = %1002.0;
  %1005 = %1003.0;
  (%1004, %1005)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4824() -> Tensor[(?, 5, 9), uint64] {
  %1 = fn () -> Tensor[(?, 5, 9), uint64] {
    %0 = @func_4557() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
    %0.0
  };
  %1() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_1433(%var_1432: Tensor[(9, 5, 9), float64]) -> (Tensor[(9, 5, 9), int64], Tensor[(?, 5, 9), float64]) {
  %11 = fn (%var_1416: Tensor[(9, 5, 9), float64]) -> (Tensor[(9, 5, 9), int64], Tensor[(?, 5, 9), float64]) {
    %2 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %3 = %2.0;
    %4 = cast(%3, dtype="int64") /* ty=Tensor[(?, 5, 9), int64] */;
    %5 = cast(%var_1416, dtype="int64") /* ty=Tensor[(9, 5, 9), int64] */;
    %6 = cast(%3, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
    %7 = asin(%6) /* ty=Tensor[(?, 5, 9), float64] */;
    %8 = cast(%7, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
    %9 = add(%4, %5) /* ty=Tensor[(9, 5, 9), int64] */;
    %10 = cosh(%8) /* ty=Tensor[(?, 5, 9), float64] */;
    (%9, %10)
  };
  %11(%var_1432) /* ty=(Tensor[(9, 5, 9), int64], Tensor[(?, 5, 9), float64]) */
}

def @func_11913(%var_11912: Tensor[(11, 9, 3), bool]) -> (Tensor[(11, 9, 3), bool], Tensor[(?, 5, 9), uint64]) {
  %19 = fn (%var_11898: Tensor[(11, 9, 3), bool]) -> (Tensor[(11, 9, 3), bool], Tensor[(?, 5, 9), uint64]) {
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 9, 3), bool] */, dtype="bool") /* ty=Tensor[(11, 9, 3), bool] */;
    %13 = shape_of(%var_11898, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%var_11898, dtype="bool") /* ty=Tensor[(11, 9, 3), bool] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %16 = @func_2958() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %17 = logical_or(%14, %15) /* ty=Tensor[(11, 9, 3), bool] */;
    %18 = %16.0;
    (%17, %18)
  };
  %19(%var_11912) /* ty=(Tensor[(11, 9, 3), bool], Tensor[(?, 5, 9), uint64]) */
}

def @func_6224() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %20 = @func_5461() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %21 = %20.0;
  %22 = @func_4823() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%21, %22)
}

def @func_4413() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), bool]) {
  @func_4411() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), bool]) */
}

def @func_10636(%var_10560: Tensor[(6, 5, 9), uint64], %var_10585: Tensor[(1120), int64], %var_10627: Tensor[(585), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(6, 5, 9), bool], Tensor[(70), int32], Tensor[(1120), int64], Tensor[(6, 5, 9), float64], Tensor[(585), float32], Tensor[(585), float32]) {
  %23 = @func_10202() /* ty=Tensor[(?, 5, 9), uint64] */;
  %24 = cast(%23, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %25 = cast(%var_10560, dtype="bool") /* ty=Tensor[(6, 5, 9), bool] */;
  %26 = cast(%var_10585, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %27 = reshape(%26, newshape=[56, 20]) /* ty=Tensor[(56, 20), int64] */;
  %28 = @func_10123(%27) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(16, 7, 10), int64], Tensor[(9, 5, 9), float64], Tensor[(56, 20), uint8], Tensor[(?, 5, 9), uint64], Tensor[(405), float64], Tensor[(70), int32], Tensor[(70), int32], Tensor[(504), float32]) */;
  %29 = cast(%23, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %30 = cast(%var_10560, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %31 = floor_mod(%29, %30) /* ty=Tensor[(6, 5, 9), float64] */;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(6, 5, 9), float32] */;
  %33 = asinh(%32) /* ty=Tensor[(6, 5, 9), float32] */;
  %34 = cast(%33, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %35 = cast(%var_10627, dtype="float32") /* ty=Tensor[(585), float32] */;
  %36 = reshape(%35, newshape=[585]) /* ty=Tensor[(585), float32] */;
  %37 = @func_8806(%36) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(585), float32]) */;
  %38 = @func_10202() /* ty=Tensor[(?, 5, 9), uint64] */;
  %39 = greater_equal(%24, %25) /* ty=Tensor[(6, 5, 9), bool] */;
  %40 = %28.8;
  %41 = exp(%34) /* ty=Tensor[(6, 5, 9), float64] */;
  %42 = %37.5;
  (%38, %39, %40, %var_10585, %41, %42, %var_10627)
}

def @func_5599() -> (Tensor[(?, 5, 9), uint64],) {
  @func_5597() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_11523(%var_11500: int32) -> (Tensor[(336), int32], Tensor[(70, 1), int32], int32) {
  %43 = cast(%var_11500, dtype="int32") /* ty=int32 */;
  %44 = reshape(%43, newshape=[]) /* ty=int32 */;
  %45 = @func_6799(%44) /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(7, 1, 10), bool], int32, Tensor[(70, 1), int32], Tensor[(?, 5, 9), uint64]) */;
  %46 = @func_5351() /* ty=Tensor[(336), int32] */;
  %47 = %45.5;
  (%46, %47, %var_11500)
}

def @func_6801(%var_6800: int32) -> (Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(7, 1, 10), bool], int32, Tensor[(70, 1), int32], Tensor[(?, 5, 9), uint64]) {
  %68 = fn (%var_6790: int32) -> (Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(7, 1, 10), bool], int32, Tensor[(70, 1), int32], Tensor[(?, 5, 9), uint64]) {
    %48 = @func_1791() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int32], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
    %49 = %48.3;
    %50 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %51 = %50.0;
    %52 = cast(%51, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
    %53 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
    %54 = cast(%49, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
    %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %56 = @func_5110() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %57 = cast(%var_6790, dtype="int32") /* ty=int32 */;
    %58 = cast(meta[relay.Constant][1] /* ty=Tensor[(70, 1), int32] */, dtype="int32") /* ty=Tensor[(70, 1), int32] */;
    %59 = reshape(%57, newshape=[]) /* ty=int32 */;
    %60 = reshape(%58, newshape=[7, 1, 10]) /* ty=Tensor[(7, 1, 10), int32] */;
    %61 = @func_689(%59, %60) /* ty=(Tensor[(7, 1, 10), bool],) */;
    %62 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %63 = floor_mod(%54, %55) /* ty=Tensor[(?, 5, 9), float32] */;
    %64 = %56.0;
    %65 = @func_5324() /* ty=Tensor[(336), int32] */;
    %66 = %61.0;
    %67 = %62.1;
    (%63, %64, %65, %66, %var_6790, meta[relay.Constant][1] /* ty=Tensor[(70, 1), int32] */, %67)
  };
  %68(%var_6800) /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(7, 1, 10), bool], int32, Tensor[(70, 1), int32], Tensor[(?, 5, 9), uint64]) */
}

def @func_2644() -> (Tensor[(?, 5, 9), float32], Tensor[(3, 2, 8), float64], Tensor[(24, 2), float64]) {
  %79 = fn () -> (Tensor[(?, 5, 9), float32], Tensor[(3, 2, 8), float64], Tensor[(24, 2), float64]) {
    %69 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %70 = %69.0;
    %71 = cast(%70, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
    %72 = cast(meta[relay.Constant][2] /* ty=Tensor[(24, 2), float64] */, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
    %73 = cast(meta[relay.Constant][2] /* ty=Tensor[(24, 2), float64] */, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
    %74 = reshape(%72, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
    %75 = reshape(%73, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
    %76 = @func_506(%74, %75) /* ty=(Tensor[(3, 2, 8), float64],) */;
    %77 = rsqrt(%71) /* ty=Tensor[(?, 5, 9), float32] */;
    %78 = %76.0;
    (%77, %78, meta[relay.Constant][2] /* ty=Tensor[(24, 2), float64] */)
  };
  %79() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(3, 2, 8), float64], Tensor[(24, 2), float64]) */
}

def @func_8971() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32]) {
  %91 = fn () -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32]) {
    %80 = @func_6224() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %81 = @func_8285() /* ty=(Tensor[(?, 5, 9), uint8],) */;
    %82 = %81.0;
    %83 = @func_5461() /* ty=(Tensor[(?, 5, 9), float64],) */;
    %84 = %83.0;
    %85 = cast(%84, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
    %86 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
    %87 = cast(%82, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
    %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %89 = %80.0;
    %90 = add(%87, %88) /* ty=Tensor[(?, 5, 9), float32] */;
    (%89, %90)
  };
  %91() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32]) */
}

def @func_1594(%var_1585: Tensor[(7, 3, 3), float32]) -> (Tensor[(7, 3, 3), float32], Tensor[(?, 5, 9), uint64]) {
  %92 = cast(%var_1585, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %93 = @func_1469() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %94 = atan(%92) /* ty=Tensor[(7, 3, 3), float32] */;
  %95 = %93.1;
  (%94, %95)
}

def @func_10349(%var_10348: Tensor[(36, 14), float32]) -> (Tensor[(336), int32], Tensor[(12, 3, 14), float32], Tensor[(36, 14), float32], Tensor[(?, 5, 9), uint64]) {
  %102 = fn (%var_10342: Tensor[(36, 14), float32]) -> (Tensor[(336), int32], Tensor[(12, 3, 14), float32], Tensor[(36, 14), float32], Tensor[(?, 5, 9), uint64]) {
    %96 = cast(%var_10342, dtype="float32") /* ty=Tensor[(36, 14), float32] */;
    %97 = reshape(%96, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
    %98 = @func_4850(%97) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(?, 5, 9), uint64]) */;
    %99 = @func_9202() /* ty=Tensor[(336), int32] */;
    %100 = %98.0;
    %101 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
    (%99, %100, %var_10342, %101)
  };
  %102(%var_10348) /* ty=(Tensor[(336), int32], Tensor[(12, 3, 14), float32], Tensor[(36, 14), float32], Tensor[(?, 5, 9), uint64]) */
}

def @func_5726() -> (Tensor[(?, 5, 9), float64],) {
  %103 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
  %104 = cast(%103, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %105 = sinh(%104) /* ty=Tensor[(?, 5, 9), float64] */;
  (%105,)
}

def @func_12198(%var_12196: Tensor[(5, 117), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(5, 117), bool]) {
  @func_12195(%var_12196) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(5, 117), bool]) */
}

def @func_5326() -> Tensor[(336), int32] {
  @func_5324() /* ty=Tensor[(336), int32] */
}

def @func_9993(%var_9991: Tensor[(15, 6, 16), float64], %var_9992: Tensor[(15, 6, 16), float64]) -> (Tensor[(15, 6, 16), float64],) {
  %111 = fn (%var_9984: Tensor[(15, 6, 16), float64], %var_9985: Tensor[(15, 6, 16), float64]) -> (Tensor[(15, 6, 16), float64],) {
    %106 = cast(%var_9985, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
    %107 = shape_of(%var_9984, dtype="int32") /* ty=Tensor[(3), int32] */;
    %108 = cast(%var_9984, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %110 = mod(%108, %109) /* ty=Tensor[(15, 6, 16), float64] */;
    (%110,)
  };
  %111(%var_9991, %var_9992) /* ty=(Tensor[(15, 6, 16), float64],) */
}

def @func_6305() -> (Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) {
  @func_6303() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) */
}

def @func_2681() -> (Tensor[(?, 5, 9), uint64],) {
  %113 = fn () -> (Tensor[(?, 5, 9), uint64],) {
    %112 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
    (%112,)
  };
  %113() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_3215() -> Tensor[(?, 5, 9), uint64] {
  %114 = fn () -> Tensor[(?, 5, 9), uint64] {
    @func_791() /* ty=Tensor[(?, 5, 9), uint64] */
  };
  %114() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_9298() -> (Tensor[(10, 5, 9), uint32],) {
  %115 = @func_5110() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %116 = %115.1;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %118 = tan(%117) /* ty=Tensor[(?, 5, 9), float32] */;
  %119 = cast(%118, dtype="uint32") /* ty=Tensor[(?, 5, 9), uint32] */;
  %120 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 5, 9), float32] */, dtype="uint32") /* ty=Tensor[(10, 5, 9), uint32] */;
  %121 = left_shift(%119, %120) /* ty=Tensor[(10, 5, 9), uint32] */;
  (%121,)
}

def @func_315() -> Tensor[(?, 5, 9), float64] {
  %126 = fn () -> Tensor[(?, 5, 9), float64] {
    %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 9), float64] */;
    %123 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(1, 5, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %124 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 9), float64] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%124, %125) /* ty=Tensor[(?, 5, 9), float64] */
  };
  %126() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_4215() -> Tensor[(?, 5, 9), uint64] {
  @func_791() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_9204() -> Tensor[(336), int32] {
  @func_9202() /* ty=Tensor[(336), int32] */
}

def @func_4558() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %133 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
    %127 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %128 = @func_2943() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
    %129 = %128.0;
    %130 = cast(%129, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
    %131 = %127.1;
    %132 = log10(%130) /* ty=Tensor[(?, 5, 9), float64] */;
    (%131, %132)
  };
  %133() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */
}

def @func_7984(%var_7982: Tensor[(70), int32], %var_7983: Tensor[(6, 84), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(7, 1, 10), bool], int32, Tensor[(70), int32], Tensor[(?, 5, 9), uint64], Tensor[(6, 84), float32], Tensor[(?, 5, 9), uint8], Tensor[(15, 5, 9), bool]) {
  %150 = fn (%var_7947: Tensor[(70), int32], %var_7956: Tensor[(6, 84), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(7, 1, 10), bool], int32, Tensor[(70), int32], Tensor[(?, 5, 9), uint64], Tensor[(6, 84), float32], Tensor[(?, 5, 9), uint8], Tensor[(15, 5, 9), bool]) {
    %134 = @func_5597() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %135 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %136 = cast(%var_7947, dtype="int32") /* ty=Tensor[(70), int32] */;
    %137 = reshape(%135, newshape=[]) /* ty=int32 */;
    %138 = reshape(%136, newshape=[7, 1, 10]) /* ty=Tensor[(7, 1, 10), int32] */;
    %139 = @func_689(%137, %138) /* ty=(Tensor[(7, 1, 10), bool],) */;
    %140 = cast(%var_7956, dtype="float32") /* ty=Tensor[(6, 84), float32] */;
    %141 = reshape(%140, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
    %142 = @func_4850(%141) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(?, 5, 9), uint64]) */;
    %143 = @func_7489() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(?, 5, 9), uint8]) */;
    %144 = @func_4624() /* ty=(Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */;
    %145 = %134.0;
    %146 = %139.0;
    %147 = %142.1;
    %148 = %143.1;
    %149 = %144.1;
    (%145, %146, -9 /* ty=int32 */, %var_7947, %147, %var_7956, %148, %149)
  };
  %150(%var_7982, %var_7983) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(7, 1, 10), bool], int32, Tensor[(70), int32], Tensor[(?, 5, 9), uint64], Tensor[(6, 84), float32], Tensor[(?, 5, 9), uint8], Tensor[(15, 5, 9), bool]) */
}

def @func_1026() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) {
  @func_1024() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */
}

def @func_10641(%var_10638: Tensor[(6, 5, 9), uint64], %var_10639: Tensor[(1120), int64], %var_10640: Tensor[(585), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(6, 5, 9), bool], Tensor[(70), int32], Tensor[(1120), int64], Tensor[(6, 5, 9), float64], Tensor[(585), float32], Tensor[(585), float32]) {
  @func_10636(%var_10638, %var_10639, %var_10640) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(6, 5, 9), bool], Tensor[(70), int32], Tensor[(1120), int64], Tensor[(6, 5, 9), float64], Tensor[(585), float32], Tensor[(585), float32]) */
}

def @func_2984(%var_2983: Tensor[(11, 16, 15), float64]) -> (Tensor[(11, 16, 15), float64],) {
  %153 = fn (%var_2978: Tensor[(11, 16, 15), float64]) -> (Tensor[(11, 16, 15), float64],) {
    %151 = cast(%var_2978, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
    %152 = cos(%151) /* ty=Tensor[(11, 16, 15), float64] */;
    (%152,)
  };
  %153(%var_2983) /* ty=(Tensor[(11, 16, 15), float64],) */
}

def @func_8083() -> Tensor[(?, 5, 9), float64] {
  @func_8081() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_7427() -> Tensor[(?, 5, 9), uint64] {
  %154 = @func_5240() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %154.0
}

def @func_10126(%var_10124: Tensor[(56, 20), int64]) -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(16, 7, 10), int64], Tensor[(9, 5, 9), float64], Tensor[(56, 20), uint8], Tensor[(?, 5, 9), uint64], Tensor[(405), float64], Tensor[(70), int32], Tensor[(70), int32], Tensor[(504), float32]) {
  @func_10123(%var_10124) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(16, 7, 10), int64], Tensor[(9, 5, 9), float64], Tensor[(56, 20), uint8], Tensor[(?, 5, 9), uint64], Tensor[(405), float64], Tensor[(70), int32], Tensor[(70), int32], Tensor[(504), float32]) */
}

def @func_3525() -> (Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */
}

def @func_11685(%var_11679: int8) -> (Tensor[(16, 12, 3), bool],) {
  %155 = cast(%var_11679, dtype="bool") /* ty=bool */;
  %156 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 12, 3), int8] */, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
  %157 = less(%155, %156) /* ty=Tensor[(16, 12, 3), bool] */;
  (%157,)
}

def @func_8351() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  @func_8349() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_7535(%var_7534: Tensor[(48), float64]) -> (Tensor[(336), int32], Tensor[(3, 2, 8), float64], Tensor[(48), float64], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), uint64]) {
  %169 = fn (%var_7516: Tensor[(48), float64]) -> (Tensor[(336), int32], Tensor[(3, 2, 8), float64], Tensor[(48), float64], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), uint64]) {
    %158 = cast(%var_7516, dtype="float64") /* ty=Tensor[(48), float64] */;
    %159 = cast(%var_7516, dtype="float64") /* ty=Tensor[(48), float64] */;
    %160 = reshape(%158, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
    %161 = reshape(%159, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
    %162 = @func_506(%160, %161) /* ty=(Tensor[(3, 2, 8), float64],) */;
    %163 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
    %164 = @func_2958() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %165 = @func_5583() /* ty=Tensor[(336), int32] */;
    %166 = %162.0;
    %167 = %163.1;
    %168 = %164.0;
    (%165, %166, %var_7516, %167, %168)
  };
  %169(%var_7534) /* ty=(Tensor[(336), int32], Tensor[(3, 2, 8), float64], Tensor[(48), float64], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), uint64]) */
}

def @func_11353() -> Tensor[(11, 16, 15), float64] {
  %171 = fn () -> Tensor[(11, 16, 15), float64] {
    %170 = @func_4270() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(11, 16, 15), float64], Tensor[(660, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %170.1
  };
  %171() /* ty=Tensor[(11, 16, 15), float64] */
}

def @func_10855(%var_10854: Tensor[(6, 5, 9), uint64]) -> Tensor[(6, 5, 9), uint32] {
  %176 = fn (%var_10848: Tensor[(6, 5, 9), uint64]) -> Tensor[(6, 5, 9), uint32] {
    %172 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
    %173 = %172.1;
    %174 = cast(%173, dtype="uint32") /* ty=Tensor[(?, 5, 9), uint32] */;
    %175 = cast(%var_10848, dtype="uint32") /* ty=Tensor[(6, 5, 9), uint32] */;
    minimum(%174, %175) /* ty=Tensor[(6, 5, 9), uint32] */
  };
  %176(%var_10854) /* ty=Tensor[(6, 5, 9), uint32] */
}

def @func_6226() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  @func_6224() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */
}

def @func_1739() -> (Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) {
  @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */
}

def @func_10242() -> (Tensor[(?, 5, 9), uint64],) {
  %177 = @func_4557() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %178 = %177.0;
  (%178,)
}

def @func_4411() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), bool]) {
  %179 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %180 = @func_4118() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %181 = @func_1567() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %184 = log(%183) /* ty=Tensor[(?, 5, 9), float32] */;
  %185 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  %186 = cast(%185, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %187 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%184, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %190 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  %191 = %179.0;
  %192 = %180.0;
  %193 = less_equal(%188, %189) /* ty=Tensor[(?, 5, 9), bool] */;
  (%190, %191, %192, %193)
}

def @func_5728() -> (Tensor[(?, 5, 9), float64],) {
  @func_5726() /* ty=(Tensor[(?, 5, 9), float64],) */
}

def @func_3400() -> (Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) {
  @func_3398() /* ty=(Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) */
}

def @func_706() -> (Tensor[(?, 5, 9), uint64],) {
  @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_11371() -> (Tensor[(?, 5, 9), float32],) {
  @func_11369() /* ty=(Tensor[(?, 5, 9), float32],) */
}

def @func_454() -> (Tensor[(?, 5, 9), uint64],) {
  %194 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%194,)
}

def @func_4270() -> (Tensor[(?, 5, 9), uint64], Tensor[(11, 16, 15), float64], Tensor[(660, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %195 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %196 = cast(meta[relay.Constant][7] /* ty=Tensor[(660, 4), float64] */, dtype="float64") /* ty=Tensor[(660, 4), float64] */;
  %197 = reshape(%196, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), float64] */;
  %198 = @func_2982(%197) /* ty=(Tensor[(11, 16, 15), float64],) */;
  %199 = @func_1307() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %200 = %195.0;
  %201 = %198.0;
  %202 = @func_4215() /* ty=Tensor[(?, 5, 9), uint64] */;
  %203 = %199.0;
  (%200, %201, meta[relay.Constant][7] /* ty=Tensor[(660, 4), float64] */, %202, %203)
}

def @func_1985() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %204 = @func_1469() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %205 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %206 = %204.1;
  %207 = @func_1124() /* ty=Tensor[(?, 5, 9), float64] */;
  %208 = %205.0;
  (%206, %207, %208)
}

def @func_1987() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  @func_1985() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */
}

def @func_7622(%var_7582: Tensor[(11, 7, 2), float64], %var_7600: Tensor[(11, 7, 2), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(11, 7, 2), int16]) {
  %209 = @func_4160() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %210 = cast(%var_7582, dtype="float64") /* ty=Tensor[(11, 7, 2), float64] */;
  %211 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(11, 7, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 7, 2), float64] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %214 = floor_mod(%212, %213) /* ty=Tensor[(11, 7, 2), float64] */;
  %215 = cast(%214, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
  %216 = atanh(%215) /* ty=Tensor[(11, 7, 2), float32] */;
  %217 = cast(%var_7600, dtype="int16") /* ty=Tensor[(11, 7, 2), int16] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="int16") /* ty=Tensor[(11, 7, 2), int16] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %221 = %209.1;
  %222 = logical_xor(%219, %220) /* ty=Tensor[(11, 7, 2), int16] */;
  (%221, %222)
}

def @func_6303() -> (Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) {
  %223 = @func_6087() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %224 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 126), uint64] */, dtype="uint64") /* ty=Tensor[(5, 126), uint64] */;
  %225 = reshape(%224, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint64] */;
  %226 = %223.1;
  %227 = @func_5853(%225) /* ty=Tensor[(14, 5, 9), bool] */;
  (%226, %227, meta[relay.Constant][9] /* ty=Tensor[(5, 126), uint64] */)
}

def @func_8809(%var_8807: Tensor[(585), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(585), float32]) {
  @func_8806(%var_8807) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(585), float32]) */
}

def @func_5195() -> Tensor[(?, 5, 9), uint64] {
  %228 = @func_4160() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %228.1
}

def @func_1803() -> Tensor[(?, 5, 9), uint64] {
  %229 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %229.0
}

def @func_6093(%var_6090: Tensor[(16, 16, 14), float32]) -> (Tensor[(16, 16, 14), float32],) {
  %230 = cast(%var_6090, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %231 = atanh(%230) /* ty=Tensor[(16, 16, 14), float32] */;
  (%231,)
}

def @func_9516() -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) {
  %238 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) {
    %232 = @func_2958() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %233 = @func_7656() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) */;
    %234 = @func_4160() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %235 = %232.0;
    %236 = %233.1;
    %237 = %234.0;
    (%235, %236, %237)
  };
  %238() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) */
}

def @func_3780(%var_3775: Tensor[(1, 5, 9), uint64]) -> Tensor[(?, 5, 9), float64] {
  %239 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
  %240 = cast(%var_3775, dtype="float64") /* ty=Tensor[(1, 5, 9), float64] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%242, %243) /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_7882() -> Tensor[(336), int32] {
  @func_5583() /* ty=Tensor[(336), int32] */
}

def @func_11838() -> (Tensor[(?, 5, 9), float64],) {
  @func_11836() /* ty=(Tensor[(?, 5, 9), float64],) */
}

def @func_482() -> Tensor[(?, 5, 9), uint64] {
  @func_480() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_5146() -> Tensor[(?, 5, 9), float64] {
  @func_5144() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_12056() -> (Tensor[(336), int32],) {
  @func_12054() /* ty=(Tensor[(336), int32],) */
}

def @func_7067() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(7, 5, 9), uint16]) {
  %244 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %245 = @func_5817() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(336), int32], Tensor[(7, 5, 9), uint16]) */;
  %246 = @func_4823() /* ty=Tensor[(?, 5, 9), uint64] */;
  %247 = %244.0;
  %248 = %245.3;
  (%246, %247, %248)
}

def @func_10880() -> Tensor[(?, 5, 9), uint64] {
  %250 = fn () -> Tensor[(?, 5, 9), uint64] {
    %249 = @func_9794() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %249.2
  };
  %250() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_10922() -> (Tensor[(?, 5, 9), float64],) {
  @func_10920() /* ty=(Tensor[(?, 5, 9), float64],) */
}

def @func_10164() -> (Tensor[(336), int32],) {
  @func_10162() /* ty=(Tensor[(336), int32],) */
}

def @func_8257(%var_8256: Tensor[(2, 5, 9), uint64]) -> (Tensor[(2, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %259 = fn (%var_8234: Tensor[(2, 5, 9), uint64]) -> (Tensor[(2, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
    %251 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
    %252 = cast(%251, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
    %253 = cast(%var_8234, dtype="bool") /* ty=Tensor[(2, 5, 9), bool] */;
    %254 = @func_1024() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
    %255 = @func_7067() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(7, 5, 9), uint16]) */;
    %256 = greater(%252, %253) /* ty=Tensor[(2, 5, 9), bool] */;
    %257 = %254.0;
    %258 = %255.0;
    (%256, %257, %258)
  };
  %259(%var_8256) /* ty=(Tensor[(2, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_12195(%var_12189: Tensor[(5, 117), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(5, 117), bool]) {
  %260 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %261 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 117), float32] */, dtype="float32") /* ty=Tensor[(5, 117), float32] */;
  %262 = reshape(%261, newshape=[585]) /* ty=Tensor[(585), float32] */;
  %263 = @func_8806(%262) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(585), float32]) */;
  %264 = cast(%var_12189, dtype="bool") /* ty=Tensor[(5, 117), bool] */;
  %265 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(5, 117), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %266 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 117), float32] */, dtype="bool") /* ty=Tensor[(5, 117), bool] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %268 = %260.1;
  %269 = %263.1;
  %270 = not_equal(%266, %267) /* ty=Tensor[(5, 117), bool] */;
  (%268, %269, %270)
}

def @func_10995() -> Tensor[(?, 5, 9), float64] {
  %272 = fn () -> Tensor[(?, 5, 9), float64] {
    %271 = @func_5071() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %271.0
  };
  %272() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_5937(%var_5917: Tensor[(585), uint64], %var_5918: Tensor[(63), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(10, 9, 11), float32], Tensor[(990), float32], Tensor[(?, 5, 9), uint64], Tensor[(585), uint64], Tensor[(63), float32]) {
  %273 = @func_5597() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %274 = cast(meta[relay.Constant][11] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %275 = reshape(%274, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float32] */;
  %276 = cast(%var_5917, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %277 = cast(%var_5918, dtype="float32") /* ty=Tensor[(63), float32] */;
  %278 = reshape(%276, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
  %279 = reshape(%277, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
  %280 = @func_2392(%278, %279) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(13, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(1, 63), float32]) */;
  %281 = %273.0;
  %282 = @func_1515(%275) /* ty=Tensor[(10, 9, 11), float32] */;
  %283 = %280.2;
  (%281, %282, meta[relay.Constant][11] /* ty=Tensor[(990), float32] */, %283, %var_5917, %var_5918)
}

def @func_6976() -> Tensor[(?, 5, 9), float64] {
  %284 = @func_6303() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) */;
  %284.0
}

def @func_7462() -> (Tensor[(?, 5, 9), uint64],) {
  %285 = @func_3299() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %286 = %285.0;
  (%286,)
}

def @func_5353() -> Tensor[(336), int32] {
  @func_5351() /* ty=Tensor[(336), int32] */
}

def @func_4675() -> (Tensor[(?, 5, 9), uint64],) {
  %287 = @func_3214() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%287,)
}

def @func_10715() -> Tensor[(336), int32] {
  @func_10713() /* ty=Tensor[(336), int32] */
}

def @func_10821(%var_10810: Tensor[(990), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(10, 9, 11), float32], Tensor[(990), float32], Tensor[(?, 5, 9), uint64]) {
  %288 = @func_1307() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %289 = cast(%var_10810, dtype="float32") /* ty=Tensor[(990), float32] */;
  %290 = reshape(%289, newshape=[10, 9, 11]) /* ty=Tensor[(10, 9, 11), float32] */;
  %291 = %288.0;
  %292 = @func_1515(%290) /* ty=Tensor[(10, 9, 11), float32] */;
  %293 = @func_1803() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%291, %292, %var_10810, %293)
}

def @func_7464() -> (Tensor[(?, 5, 9), uint64],) {
  @func_7462() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_6602(%var_6600: Tensor[(63), float32]) -> (Tensor[(?, 5, 9), uint16], Tensor[(10, 9, 11), float32], Tensor[(585), uint64], Tensor[(63), float32]) {
  @func_6599(%var_6600) /* ty=(Tensor[(?, 5, 9), uint16], Tensor[(10, 9, 11), float32], Tensor[(585), uint64], Tensor[(63), float32]) */
}

def @func_2872() -> Tensor[(?, 5, 9), float64] {
  @func_1124() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_6734() -> (Tensor[(7, 5, 9), uint16], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) {
  @func_6732() /* ty=(Tensor[(7, 5, 9), uint16], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */
}

def @func_5584() -> Tensor[(336), int32] {
  %294 = fn () -> Tensor[(336), int32] {
    @func_5351() /* ty=Tensor[(336), int32] */
  };
  %294() /* ty=Tensor[(336), int32] */
}

def @func_5351() -> Tensor[(336), int32] {
  @func_5324() /* ty=Tensor[(336), int32] */
}

def @func_9384() -> Tensor[(336), int32] {
  %295 = @func_4624() /* ty=(Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */;
  %295.4
}

def @func_1708(%var_1707: Tensor[(3, 12, 8), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(3, 12, 8), uint32]) {
  %306 = fn (%var_1690: Tensor[(3, 12, 8), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(3, 12, 8), uint32]) {
    %296 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %297 = cast(%var_1690, dtype="float32") /* ty=Tensor[(3, 12, 8), float32] */;
    %298 = cos(%297) /* ty=Tensor[(3, 12, 8), float32] */;
    %299 = cast(%var_1690, dtype="uint32") /* ty=Tensor[(3, 12, 8), uint32] */;
    %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%298, dtype="uint32") /* ty=Tensor[(3, 12, 8), uint32] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %303 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
    %304 = %296.0;
    %305 = bitwise_xor(%301, %302) /* ty=Tensor[(3, 12, 8), uint32] */;
    (%303, %304, %305)
  };
  %306(%var_1707) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(3, 12, 8), uint32]) */
}

def @func_11034() -> Tensor[(?, 5, 9), uint64] {
  %307 = @func_2958() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %307.0
}

def @func_2093(%var_2091: Tensor[(336), int32], %var_2092: Tensor[(5, 5, 9), float64]) -> (Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(5, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  @func_2089(%var_2091, %var_2092) /* ty=(Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(5, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */
}

def @func_10162() -> (Tensor[(336), int32],) {
  %308 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %309 = %308.2;
  (%309,)
}

def @func_8105() -> (Tensor[(?, 5, 9), uint64], Tensor[(1, 5, 9), float64]) {
  @func_8103() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(1, 5, 9), float64]) */
}

def @func_4776(%var_4774: Tensor[(63), float32]) -> (Tensor[(14, 3, 8), int16], Tensor[(7, 3, 3), float32], Tensor[(63), float32], Tensor[(16, 5, 9), int64]) {
  @func_4773(%var_4774) /* ty=(Tensor[(14, 3, 8), int16], Tensor[(7, 3, 3), float32], Tensor[(63), float32], Tensor[(16, 5, 9), int64]) */
}

def @func_6965() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %314 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
    %310 = @func_1567() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %311 = @func_3247() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %312 = %310.0;
    %313 = %311.0;
    (%312, %313)
  };
  %314() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_11329(%var_11327: Tensor[(360), float64]) -> (Tensor[(75, 9), bool], Tensor[(8, 5, 9), uint8], Tensor[(360), float64]) {
  @func_11326(%var_11327) /* ty=(Tensor[(75, 9), bool], Tensor[(8, 5, 9), uint8], Tensor[(360), float64]) */
}

def @func_12104() -> Tensor[(?, 5, 9), uint64] {
  %316 = fn () -> Tensor[(?, 5, 9), uint64] {
    %315 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %315.0
  };
  %316() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_2849(%var_2771: Tensor[(12, 10, 12), uint32], %var_2772: Tensor[(12, 10, 12), uint32], %var_2790: Tensor[(63), float32], %var_2797: Tensor[(12, 10, 12), uint32]) -> (Tensor[(1, 63), float32], Tensor[(585), uint64], Tensor[(63), float32], Tensor[(?, 5, 9), float32], Tensor[(12, 10, 12), int16], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %317 = cast(meta[relay.Constant][12] /* ty=Tensor[(585), uint64] */, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %318 = cast(%var_2790, dtype="float32") /* ty=Tensor[(63), float32] */;
  %319 = reshape(%317, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
  %320 = reshape(%318, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
  %321 = @func_2392(%319, %320) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(13, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(1, 63), float32]) */;
  %322 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %323 = cast(%var_2772, dtype="uint32") /* ty=Tensor[(12, 10, 12), uint32] */;
  %324 = shape_of(%var_2771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_2771, dtype="uint32") /* ty=Tensor[(12, 10, 12), uint32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %327 = left_shift(%325, %326) /* ty=Tensor[(12, 10, 12), uint32] */;
  %328 = cast(%var_2797, dtype="int16") /* ty=Tensor[(12, 10, 12), int16] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="int16") /* ty=Tensor[(12, 10, 12), int16] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %332 = @func_1985() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %333 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %334 = %321.3;
  %335 = %322.0;
  %336 = bitwise_or(%330, %331) /* ty=Tensor[(12, 10, 12), int16] */;
  %337 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
  %338 = %332.1;
  %339 = %333.0;
  (%334, meta[relay.Constant][12] /* ty=Tensor[(585), uint64] */, %var_2790, %335, %336, %337, %338, %339)
}

def @func_2089(%var_2055: Tensor[(336), int32], %var_2057: Tensor[(5, 5, 9), float64]) -> (Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(5, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %340 = cast(%var_2055, dtype="int32") /* ty=Tensor[(336), int32] */;
  %341 = reshape(%340, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %342 = @func_1232(%341) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32]) */;
  %343 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %344 = %343.0;
  %345 = cast(%344, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %346 = cast(%var_2057, dtype="bool") /* ty=Tensor[(5, 5, 9), bool] */;
  %347 = @func_1024() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %348 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %349 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %350 = %342.3;
  %351 = logical_or(%345, %346) /* ty=Tensor[(5, 5, 9), bool] */;
  %352 = %347.0;
  %353 = %348.0;
  %354 = %349.0;
  (%350, %var_2055, %351, %352, %353, %354)
}

def @func_4272() -> (Tensor[(?, 5, 9), uint64], Tensor[(11, 16, 15), float64], Tensor[(660, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  @func_4270() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(11, 16, 15), float64], Tensor[(660, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_7169() -> (Tensor[(?, 5, 9), uint64],) {
  @func_7167() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_11369() -> (Tensor[(?, 5, 9), float32],) {
  %355 = @func_8970() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32]) */;
  %356 = %355.1;
  (%356,)
}

def @func_6541() -> (Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) {
  %361 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) {
    %357 = @func_1985() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %358 = @func_3214() /* ty=Tensor[(?, 5, 9), uint64] */;
    %359 = @func_5351() /* ty=Tensor[(336), int32] */;
    %360 = %357.2;
    (%358, %359, %360)
  };
  %361() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */
}

def @func_11774() -> Tensor[(7, 5, 9), uint16] {
  @func_3883() /* ty=Tensor[(7, 5, 9), uint16] */
}

def @func_5071() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %362 = @func_3586() /* ty=Tensor[(?, 5, 9), float64] */;
  %363 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%362, %363)
}

def @func_5241() -> (Tensor[(?, 5, 9), uint64],) {
  %365 = fn () -> (Tensor[(?, 5, 9), uint64],) {
    %364 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
    (%364,)
  };
  %365() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_8081() -> Tensor[(?, 5, 9), float64] {
  %366 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %366.0
}

def @func_9795() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %371 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
    %367 = @func_1567() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %368 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
    %369 = @func_4924() /* ty=Tensor[(?, 5, 9), uint64] */;
    %370 = %367.0;
    (%368, %369, %370)
  };
  %371() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_1568() -> (Tensor[(?, 5, 9), uint64],) {
  %374 = fn () -> (Tensor[(?, 5, 9), uint64],) {
    %372 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %373 = %372.1;
    (%373,)
  };
  %374() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_7081(%var_7075: Tensor[(14, 9, 10), int16]) -> (Tensor[(14, 9, 10), bool],) {
  %375 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 9, 10), int16] */, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
  %376 = shape_of(%var_7075, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%var_7075, dtype="bool") /* ty=Tensor[(14, 9, 10), bool] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %379 = greater(%377, %378) /* ty=Tensor[(14, 9, 10), bool] */;
  (%379,)
}

def @func_3117(%var_3116: Tensor[(5, 5, 9), uint64]) -> (Tensor[(5, 5, 9), bool],) {
  %384 = fn (%var_3109: Tensor[(5, 5, 9), uint64]) -> (Tensor[(5, 5, 9), bool],) {
    %380 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
    %381 = cast(%380, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
    %382 = cast(%var_3109, dtype="bool") /* ty=Tensor[(5, 5, 9), bool] */;
    %383 = not_equal(%381, %382) /* ty=Tensor[(5, 5, 9), bool] */;
    (%383,)
  };
  %384(%var_3116) /* ty=(Tensor[(5, 5, 9), bool],) */
}

def @func_6909(%var_6908: Tensor[(48), float64]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(3, 2, 8), float64], Tensor[(48), float64]) {
  %395 = fn (%var_6868: Tensor[(48), float64]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(3, 2, 8), float64], Tensor[(48), float64]) {
    %385 = @func_1567() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %386 = cast(%var_6868, dtype="float64") /* ty=Tensor[(48), float64] */;
    %387 = cast(%var_6868, dtype="float64") /* ty=Tensor[(48), float64] */;
    %388 = reshape(%386, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
    %389 = reshape(%387, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), float64] */;
    %390 = @func_506(%388, %389) /* ty=(Tensor[(3, 2, 8), float64],) */;
    %391 = @func_4215() /* ty=Tensor[(?, 5, 9), uint64] */;
    %392 = %385.0;
    %393 = @func_1124() /* ty=Tensor[(?, 5, 9), float64] */;
    %394 = %390.0;
    (%391, %392, %393, %394, %var_6868)
  };
  %395(%var_6908) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(3, 2, 8), float64], Tensor[(48), float64]) */
}

def @func_10824(%var_10822: Tensor[(990), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(10, 9, 11), float32], Tensor[(990), float32], Tensor[(?, 5, 9), uint64]) {
  @func_10821(%var_10822) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(10, 9, 11), float32], Tensor[(990), float32], Tensor[(?, 5, 9), uint64]) */
}

def @func_9386() -> Tensor[(336), int32] {
  @func_9384() /* ty=Tensor[(336), int32] */
}

def @func_11407(%var_11404: Tensor[(6, 1, 12), uint64], %var_11405: Tensor[(14, 165), float64], %var_11406: Tensor[(14, 165), float64]) -> (Tensor[(6, ?, 12), uint64], Tensor[(336), int32], Tensor[(14, 165), float32]) {
  @func_11402(%var_11404, %var_11405, %var_11406) /* ty=(Tensor[(6, ?, 12), uint64], Tensor[(336), int32], Tensor[(14, 165), float32]) */
}

def @func_8287() -> (Tensor[(?, 5, 9), uint8],) {
  @func_8285() /* ty=(Tensor[(?, 5, 9), uint8],) */
}

def @func_8374() -> (Tensor[(?, 5, 9), uint64],) {
  %396 = @func_3942() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %397 = %396.0;
  (%397,)
}

def @func_1517(%var_1516: Tensor[(10, 9, 11), float32]) -> Tensor[(10, 9, 11), float32] {
  %399 = fn (%var_1490: Tensor[(10, 9, 11), float32]) -> Tensor[(10, 9, 11), float32] {
    %398 = cast(%var_1490, dtype="float32") /* ty=Tensor[(10, 9, 11), float32] */;
    asin(%398) /* ty=Tensor[(10, 9, 11), float32] */
  };
  %399(%var_1516) /* ty=Tensor[(10, 9, 11), float32] */
}

def @func_4924() -> Tensor[(?, 5, 9), uint64] {
  %400 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %400.0
}

def @func_5744() -> Tensor[(?, 5, 9), float64] {
  %401 = @func_4118() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %401.0
}

def @func_10324() -> (Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(14, 5, 9), bool]) {
  %406 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(14, 5, 9), bool]) {
    %402 = @func_7656() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) */;
    %403 = @func_9188() /* ty=Tensor[(?, 5, 9), uint64] */;
    %404 = @func_5324() /* ty=Tensor[(336), int32] */;
    %405 = %402.1;
    (%403, %404, %405)
  };
  %406() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(14, 5, 9), bool]) */
}

def @func_5856(%var_5854: Tensor[(14, 5, 9), uint64]) -> Tensor[(14, 5, 9), bool] {
  @func_5853(%var_5854) /* ty=Tensor[(14, 5, 9), bool] */
}

def @func_2291() -> Tensor[(?, 5, 9), uint64] {
  %407 = fn () -> Tensor[(?, 5, 9), uint64] {
    @func_1803() /* ty=Tensor[(?, 5, 9), uint64] */
  };
  %407() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_1126() -> Tensor[(?, 5, 9), float64] {
  @func_1124() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_7891() -> Tensor[(?, 5, 9), uint64] {
  %409 = fn () -> Tensor[(?, 5, 9), uint64] {
    %408 = @func_3247() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %408.0
  };
  %409() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_9885() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %415 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
    %410 = @func_7008() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %411 = @func_8103() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(1, 5, 9), float64]) */;
    %412 = %410.0;
    %413 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
    %414 = %411.0;
    (%412, %413, %414)
  };
  %415() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_9945(%var_9933: Tensor[(7, 5, 9), uint16]) -> (Tensor[(7, 5, 9), float64],) {
  %416 = @func_5231() /* ty=Tensor[(7, 5, 9), uint16] */;
  %417 = cast(%var_9933, dtype="int64") /* ty=Tensor[(7, 5, 9), int64] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="int64") /* ty=Tensor[(7, 5, 9), int64] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %421 = bitwise_and(%419, %420) /* ty=Tensor[(7, 5, 9), int64] */;
  %422 = cast(%416, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %426 = mod(%424, %425) /* ty=Tensor[(7, 5, 9), float64] */;
  (%426,)
}

def @func_564() -> (Tensor[(?, 5, 9), uint64],) {
  %427 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%427,)
}

def @func_566() -> (Tensor[(?, 5, 9), uint64],) {
  @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_5597() -> (Tensor[(?, 5, 9), uint64],) {
  %428 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %429 = %428.0;
  (%429,)
}

def @func_5746() -> Tensor[(?, 5, 9), float64] {
  @func_5744() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_10123(%var_10063: Tensor[(56, 20), int64]) -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(16, 7, 10), int64], Tensor[(9, 5, 9), float64], Tensor[(56, 20), uint8], Tensor[(?, 5, 9), uint64], Tensor[(405), float64], Tensor[(70), int32], Tensor[(70), int32], Tensor[(504), float32]) {
  %430 = @func_5597() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %431 = @func_6303() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) */;
  %432 = cast(%var_10063, dtype="int64") /* ty=Tensor[(56, 20), int64] */;
  %433 = cast(%var_10063, dtype="int64") /* ty=Tensor[(56, 20), int64] */;
  %434 = reshape(%432, newshape=[16, 7, 10]) /* ty=Tensor[(16, 7, 10), int64] */;
  %435 = reshape(%433, newshape=[16, 7, 10]) /* ty=Tensor[(16, 7, 10), int64] */;
  %436 = cast(meta[relay.Constant][14] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %437 = reshape(%436, newshape=[405]) /* ty=Tensor[(405), float64] */;
  %438 = @func_2140(%437) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(9, 5, 9), int64], Tensor[(405), float64]) */;
  %439 = %438.1;
  %440 = cast(meta[relay.Constant][14] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="float64") /* ty=Tensor[(9, 5, 9), float64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %444 = cast(meta[relay.Constant][15] /* ty=Tensor[(56, 20), int64] */, dtype="uint8") /* ty=Tensor[(56, 20), uint8] */;
  %445 = shape_of(%var_10063, dtype="int32") /* ty=Tensor[(2), int32] */;
  %446 = cast(%var_10063, dtype="uint8") /* ty=Tensor[(56, 20), uint8] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %448 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %449 = cast(meta[relay.Constant][14] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %450 = log(%449) /* ty=Tensor[(405), float64] */;
  %451 = cast(%439, dtype="float64") /* ty=Tensor[(9, 5, 9), float64] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(1), int32] */;
  %453 = cast(%450, dtype="float64") /* ty=Tensor[(405), float64] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?), float64] */;
  %455 = cast(meta[relay.Constant][16] /* ty=Tensor[(70), int32] */, dtype="int32") /* ty=Tensor[(70), int32] */;
  %456 = cast(meta[relay.Constant][17] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %457 = reshape(%455, newshape=[70]) /* ty=Tensor[(70), int32] */;
  %458 = reshape(%456, newshape=[6, 84]) /* ty=Tensor[(6, 84), float32] */;
  %459 = @func_7981(%457, %458) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(7, 1, 10), bool], int32, Tensor[(70), int32], Tensor[(?, 5, 9), uint64], Tensor[(6, 84), float32], Tensor[(?, 5, 9), uint8], Tensor[(15, 5, 9), bool]) */;
  %460 = %430.0;
  %461 = %431.1;
  %462 = @func_7338(%434, %435) /* ty=Tensor[(16, 7, 10), int64] */;
  %463 = floor_mod(%442, %443) /* ty=Tensor[(9, 5, 9), float64] */;
  %464 = add(%446, %447) /* ty=Tensor[(56, 20), uint8] */;
  %465 = %448.0;
  %466 = divide(%453, %454) /* ty=Tensor[(405), float64] */;
  %467 = %459.3;
  (%460, %461, %462, %463, %464, %465, %466, %467, meta[relay.Constant][16] /* ty=Tensor[(70), int32] */, meta[relay.Constant][17] /* ty=Tensor[(504), float32] */)
}

def @func_7657() -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) {
  %474 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) {
    %468 = cast(meta[relay.Constant][18] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
    %469 = reshape(%468, newshape=[14, 5, 9]) /* ty=Tensor[(14, 5, 9), uint64] */;
    %470 = @func_5110() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %471 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
    %472 = @func_5853(%469) /* ty=Tensor[(14, 5, 9), bool] */;
    %473 = %470.1;
    (%471, %472, meta[relay.Constant][18] /* ty=Tensor[(630), uint64] */, %473)
  };
  %474() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_10394() -> Tensor[(?, 5, 9), uint64] {
  %476 = fn () -> Tensor[(?, 5, 9), uint64] {
    %475 = @func_7067() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(7, 5, 9), uint16]) */;
    %475.0
  };
  %476() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_7626(%var_7624: Tensor[(11, 7, 2), float64], %var_7625: Tensor[(11, 7, 2), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(11, 7, 2), int16]) {
  @func_7622(%var_7624, %var_7625) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(11, 7, 2), int16]) */
}

def @func_2874() -> Tensor[(?, 5, 9), float64] {
  @func_2872() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_2584() -> Tensor[(?, 5, 9), uint64] {
  @func_2582() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_5197() -> Tensor[(?, 5, 9), uint64] {
  @func_5195() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_1235(%var_1233: Tensor[(336), int32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32]) {
  @func_1232(%var_1233) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32]) */
}

def @func_4852(%var_4851: Tensor[(12, 3, 14), float32]) -> (Tensor[(12, 3, 14), float32], Tensor[(?, 5, 9), uint64]) {
  %483 = fn (%var_4843: Tensor[(12, 3, 14), float32]) -> (Tensor[(12, 3, 14), float32], Tensor[(?, 5, 9), uint64]) {
    %477 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
    %478 = shape_of(%var_4843, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%var_4843, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %481 = mod(%479, %480) /* ty=Tensor[(12, 3, 14), float32] */;
    %482 = @func_3214() /* ty=Tensor[(?, 5, 9), uint64] */;
    (%481, %482)
  };
  %483(%var_4851) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(?, 5, 9), uint64]) */
}

def @func_5137() -> (Tensor[(?, 5, 9), uint64],) {
  @func_5135() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_11897() -> (Tensor[(?, 5, 9), uint64], Tensor[(13, 14, 3), float64]) {
  %486 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(13, 14, 3), float64]) {
    %484 = @func_10393() /* ty=Tensor[(?, 5, 9), uint64] */;
    %485 = @func_4543() /* ty=Tensor[(13, 14, 3), float64] */;
    (%484, %485)
  };
  %486() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(13, 14, 3), float64]) */
}

def @func_4493(%var_4491: Tensor[(10, 2, 6), float32], %var_4492: Tensor[(10, 2, 6), float32]) -> (Tensor[(10, 2, 6), float32], Tensor[(?, 5, 9), float64], Tensor[(10, 2, 6), int16]) {
  %503 = fn (%var_4457: Tensor[(10, 2, 6), float32], %var_4458: Tensor[(10, 2, 6), float32]) -> (Tensor[(10, 2, 6), float32], Tensor[(?, 5, 9), float64], Tensor[(10, 2, 6), int16]) {
    %487 = cast(%var_4458, dtype="float32") /* ty=Tensor[(10, 2, 6), float32] */;
    %488 = shape_of(%var_4457, dtype="int32") /* ty=Tensor[(3), int32] */;
    %489 = cast(%var_4457, dtype="float32") /* ty=Tensor[(10, 2, 6), float32] */;
    %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %491 = @func_3942() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
    %492 = cast(%var_4458, dtype="float64") /* ty=Tensor[(10, 2, 6), float64] */;
    %493 = sinh(%492) /* ty=Tensor[(10, 2, 6), float64] */;
    %494 = cast(%493, dtype="float32") /* ty=Tensor[(10, 2, 6), float32] */;
    %495 = sigmoid(%494) /* ty=Tensor[(10, 2, 6), float32] */;
    %496 = cast(%493, dtype="int16") /* ty=Tensor[(10, 2, 6), int16] */;
    %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%495, dtype="int16") /* ty=Tensor[(10, 2, 6), int16] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %500 = mod(%489, %490) /* ty=Tensor[(10, 2, 6), float32] */;
    %501 = %491.1;
    %502 = subtract(%498, %499) /* ty=Tensor[(10, 2, 6), int16] */;
    (%500, %501, %502)
  };
  %503(%var_4491, %var_4492) /* ty=(Tensor[(10, 2, 6), float32], Tensor[(?, 5, 9), float64], Tensor[(10, 2, 6), int16]) */
}

def @func_4625() -> (Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) {
  %521 = fn () -> (Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) {
    %504 = @func_2943() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
    %505 = %504.1;
    %506 = @func_2872() /* ty=Tensor[(?, 5, 9), float64] */;
    %507 = cast(%506, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
    %508 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
    %509 = cast(%505, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
    %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %511 = cast(meta[relay.Constant][20] /* ty=Tensor[(75, 9), bool] */, dtype="bool") /* ty=Tensor[(75, 9), bool] */;
    %512 = cast(meta[relay.Constant][20] /* ty=Tensor[(75, 9), bool] */, dtype="bool") /* ty=Tensor[(75, 9), bool] */;
    %513 = reshape(%511, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
    %514 = reshape(%512, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
    %515 = @func_2180(%513, %514) /* ty=(Tensor[(15, 5, 9), bool],) */;
    %516 = @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
    %517 = not_equal(%509, %510) /* ty=Tensor[(?, 5, 9), bool] */;
    %518 = %515.0;
    %519 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
    %520 = %516.0;
    (%517, %518, meta[relay.Constant][20] /* ty=Tensor[(75, 9), bool] */, %519, %520)
  };
  %521() /* ty=(Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */
}

def @func_2143(%var_2141: Tensor[(405), float64]) -> (Tensor[(?, 5, 9), float64], Tensor[(9, 5, 9), int64], Tensor[(405), float64]) {
  @func_2140(%var_2141) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(9, 5, 9), int64], Tensor[(405), float64]) */
}

def @func_6160(%var_6158: float64, %var_6159: Tensor[(6, 14, 14), float64]) -> Tensor[(6, 14, 14), float64] {
  %527 = fn (%var_6113: float64, %var_6114: Tensor[(6, 14, 14), float64]) -> Tensor[(6, 14, 14), float64] {
    %522 = cast(%var_6113, dtype="float64") /* ty=float64 */;
    %523 = cast(%var_6114, dtype="float64") /* ty=Tensor[(6, 14, 14), float64] */;
    %524 = minimum(%522, %523) /* ty=Tensor[(6, 14, 14), float64] */;
    %525 = cast(%var_6113, dtype="float64") /* ty=float64 */;
    %526 = cast(%524, dtype="float64") /* ty=Tensor[(6, 14, 14), float64] */;
    add(%525, %526) /* ty=Tensor[(6, 14, 14), float64] */
  };
  %527(%var_6158, %var_6159) /* ty=Tensor[(6, 14, 14), float64] */
}

def @func_5853(%var_5848: Tensor[(14, 5, 9), uint64]) -> Tensor[(14, 5, 9), bool] {
  %528 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %529 = %528.0;
  %530 = cast(%529, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %531 = cast(%var_5848, dtype="bool") /* ty=Tensor[(14, 5, 9), bool] */;
  equal(%530, %531) /* ty=Tensor[(14, 5, 9), bool] */
}

def @func_9202() -> Tensor[(336), int32] {
  @func_5583() /* ty=Tensor[(336), int32] */
}

def @func_6599(%var_6588: Tensor[(63), float32]) -> (Tensor[(?, 5, 9), uint16], Tensor[(10, 9, 11), float32], Tensor[(585), uint64], Tensor[(63), float32]) {
  %532 = @func_4270() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(11, 16, 15), float64], Tensor[(660, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %533 = %532.4;
  %534 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="uint16") /* ty=Tensor[(?, 5, 9), uint16] */;
  %537 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%533, dtype="uint16") /* ty=Tensor[(?, 5, 9), uint16] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %540 = cast(meta[relay.Constant][21] /* ty=Tensor[(585), uint64] */, dtype="uint64") /* ty=Tensor[(585), uint64] */;
  %541 = cast(%var_6588, dtype="float32") /* ty=Tensor[(63), float32] */;
  %542 = reshape(%540, newshape=[585]) /* ty=Tensor[(585), uint64] */;
  %543 = reshape(%541, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %544 = @func_5937(%542, %543) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(10, 9, 11), float32], Tensor[(990), float32], Tensor[(?, 5, 9), uint64], Tensor[(585), uint64], Tensor[(63), float32]) */;
  %545 = bitwise_or(%538, %539) /* ty=Tensor[(?, 5, 9), uint16] */;
  %546 = %544.1;
  (%545, %546, meta[relay.Constant][21] /* ty=Tensor[(585), uint64] */, %var_6588)
}

def @func_1597(%var_1595: Tensor[(7, 3, 3), float32]) -> (Tensor[(7, 3, 3), float32], Tensor[(?, 5, 9), uint64]) {
  @func_1594(%var_1595) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(?, 5, 9), uint64]) */
}

def @func_1024() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) {
  %547 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %548 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %549 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %551 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %552 = %547.0;
  %553 = %548.0;
  %554 = acos(%550) /* ty=Tensor[(?, 5, 9), float32] */;
  %555 = %551.0;
  (%552, %553, %554, %555)
}

def @func_5324() -> Tensor[(336), int32] {
  %556 = @func_1791() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int32], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %556.2
}

def @func_5941(%var_5939: Tensor[(585), uint64], %var_5940: Tensor[(63), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(10, 9, 11), float32], Tensor[(990), float32], Tensor[(?, 5, 9), uint64], Tensor[(585), uint64], Tensor[(63), float32]) {
  @func_5937(%var_5939, %var_5940) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(10, 9, 11), float32], Tensor[(990), float32], Tensor[(?, 5, 9), uint64], Tensor[(585), uint64], Tensor[(63), float32]) */
}

def @func_11711() -> (Tensor[(?, 5, 9), float64],) {
  %558 = fn () -> (Tensor[(?, 5, 9), float64],) {
    %557 = @func_6976() /* ty=Tensor[(?, 5, 9), float64] */;
    (%557,)
  };
  %558() /* ty=(Tensor[(?, 5, 9), float64],) */
}

def @func_2582() -> Tensor[(?, 5, 9), uint64] {
  @func_791() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_7110() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %563 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
    %559 = @func_1307() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %560 = @func_5110() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %561 = %559.0;
    %562 = %560.1;
    (%561, %562)
  };
  %563() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_4651() -> (Tensor[(?, 5, 9), uint64],) {
  %566 = fn () -> (Tensor[(?, 5, 9), uint64],) {
    %564 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
    %565 = %564.1;
    (%565,)
  };
  %566() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_10244() -> (Tensor[(?, 5, 9), uint64],) {
  @func_10242() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_6978() -> Tensor[(?, 5, 9), float64] {
  @func_6976() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_935() -> (Tensor[(?, 5, 9), uint64],) {
  %567 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %568 = %567.0;
  (%568,)
}

def @func_1791() -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int32], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) {
  %569 = @func_1024() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %570 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %571 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %572 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %573 = reshape(%570, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %574 = reshape(%571, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %575 = reshape(%572, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %576 = @func_1077(%573, %574, %575) /* ty=(Tensor[(14, 3, 8), int32], Tensor[(14, 3, 8), int16]) */;
  %577 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %578 = %569.0;
  %579 = %576.0;
  %580 = %577.0;
  (%578, %579, meta[relay.Constant][22] /* ty=Tensor[(336), int32] */, %580)
}

def @func_1793() -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int32], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) {
  @func_1791() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int32], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */
}

def @func_1737() -> (Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) {
  %581 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %583 = erf(%582) /* ty=Tensor[(?, 5, 9), float64] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %585 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %586 = sigmoid(%584) /* ty=Tensor[(?, 5, 9), float32] */;
  %587 = %585.0;
  (%586, %587)
}

def @func_10137() -> (Tensor[(10, 2, 16), float64],) {
  @func_10135() /* ty=(Tensor[(10, 2, 16), float64],) */
}

def @func_10204() -> Tensor[(?, 5, 9), uint64] {
  @func_10202() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_7858(%var_7856: Tensor[(63), float32], %var_7857: Tensor[(195, 3), float32]) -> (Tensor[(336), int32], Tensor[(1, 63), float32], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(?, 5, 9), uint64], Tensor[(195, 3), float64], Tensor[(1, 5, 9), float64], Tensor[(195, 3), int8]) {
  %624 = fn (%var_7776: Tensor[(63), float32], %var_7831: Tensor[(195, 3), float32]) -> (Tensor[(336), int32], Tensor[(1, 63), float32], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(?, 5, 9), uint64], Tensor[(195, 3), float64], Tensor[(1, 5, 9), float64], Tensor[(195, 3), int8]) {
    %588 = cast(meta[relay.Constant][23] /* ty=Tensor[(195, 3), uint64] */, dtype="uint64") /* ty=Tensor[(195, 3), uint64] */;
    %589 = cast(%var_7776, dtype="float32") /* ty=Tensor[(63), float32] */;
    %590 = reshape(%588, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), uint64] */;
    %591 = reshape(%589, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
    %592 = @func_2392(%590, %591) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(13, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(1, 63), float32]) */;
    %593 = cast(meta[relay.Constant][23] /* ty=Tensor[(195, 3), uint64] */, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
    %594 = tan(%593) /* ty=Tensor[(195, 3), float64] */;
    %595 = cast(%594, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
    %596 = acos(%595) /* ty=Tensor[(195, 3), float64] */;
    %597 = cast(%594, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
    %598 = asin(%597) /* ty=Tensor[(195, 3), float64] */;
    %599 = cast(%598, dtype="bool") /* ty=Tensor[(195, 3), bool] */;
    %600 = shape_of(%596, dtype="int32") /* ty=Tensor[(2), int32] */;
    %601 = cast(%596, dtype="bool") /* ty=Tensor[(195, 3), bool] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %603 = @func_5240() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %604 = cast(%596, dtype="float32") /* ty=Tensor[(195, 3), float32] */;
    %605 = sin(%604) /* ty=Tensor[(195, 3), float32] */;
    %606 = cast(%605, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
    %607 = @func_3398() /* ty=(Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) */;
    %608 = cast(%var_7831, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
    %609 = shape_of(%605, dtype="int32") /* ty=Tensor[(2), int32] */;
    %610 = cast(%605, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %612 = mod(%610, %611) /* ty=Tensor[(195, 3), float64] */;
    %613 = cast(meta[relay.Constant][23] /* ty=Tensor[(195, 3), uint64] */, dtype="int8") /* ty=Tensor[(195, 3), int8] */;
    %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(2), int32] */;
    %615 = cast(%612, dtype="int8") /* ty=Tensor[(195, 3), int8] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %617 = @func_5583() /* ty=Tensor[(336), int32] */;
    %618 = %592.3;
    %619 = equal(%601, %602) /* ty=Tensor[(195, 3), bool] */;
    %620 = %603.0;
    %621 = log(%606) /* ty=Tensor[(195, 3), float64] */;
    %622 = %607.1;
    %623 = bitwise_or(%615, %616) /* ty=Tensor[(195, 3), int8] */;
    (%617, %618, %var_7776, %619, %620, %621, %622, %623)
  };
  %624(%var_7856, %var_7857) /* ty=(Tensor[(336), int32], Tensor[(1, 63), float32], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(?, 5, 9), uint64], Tensor[(195, 3), float64], Tensor[(1, 5, 9), float64], Tensor[(195, 3), int8]) */
}

def @func_456() -> (Tensor[(?, 5, 9), uint64],) {
  @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_3301() -> (Tensor[(?, 5, 9), uint64],) {
  @func_3299() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_7084(%var_7082: Tensor[(14, 9, 10), int16]) -> (Tensor[(14, 9, 10), bool],) {
  @func_7081(%var_7082) /* ty=(Tensor[(14, 9, 10), bool],) */
}

def @func_5232() -> Tensor[(7, 5, 9), uint16] {
  %625 = fn () -> Tensor[(7, 5, 9), uint16] {
    @func_3883() /* ty=Tensor[(7, 5, 9), uint16] */
  };
  %625() /* ty=Tensor[(7, 5, 9), uint16] */
}

def @func_792() -> Tensor[(?, 5, 9), uint64] {
  %626 = fn () -> Tensor[(?, 5, 9), uint64] {
    @func_480() /* ty=Tensor[(?, 5, 9), uint64] */
  };
  %626() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_1805() -> Tensor[(?, 5, 9), uint64] {
  @func_1803() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_3248() -> (Tensor[(?, 5, 9), uint64],) {
  %628 = fn () -> (Tensor[(?, 5, 9), uint64],) {
    %627 = @func_3214() /* ty=Tensor[(?, 5, 9), uint64] */;
    (%627,)
  };
  %628() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_12054() -> (Tensor[(336), int32],) {
  %629 = @func_7882() /* ty=Tensor[(336), int32] */;
  (%629,)
}

def @func_9765() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %633 = fn () -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
    %630 = @func_7109() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %631 = @func_3586() /* ty=Tensor[(?, 5, 9), float64] */;
    %632 = %630.1;
    (%631, %632)
  };
  %633() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */
}

def @func_4545() -> Tensor[(13, 14, 3), float64] {
  @func_4543() /* ty=Tensor[(13, 14, 3), float64] */
}

def @func_8285() -> (Tensor[(?, 5, 9), uint8],) {
  %634 = @func_3398() /* ty=(Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) */;
  %635 = %634.0;
  (%635,)
}

def @func_9300() -> (Tensor[(10, 5, 9), uint32],) {
  @func_9298() /* ty=(Tensor[(10, 5, 9), uint32],) */
}

def @func_10517() -> (Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(80), float32], Tensor[(2, 10, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %636 = cast(meta[relay.Constant][24] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %637 = cast(meta[relay.Constant][24] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %638 = reshape(%636, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), float32] */;
  %639 = reshape(%637, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), float32] */;
  %640 = @func_6289(%638, %639) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(2, 10, 4), float64]) */;
  %641 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
  %642 = cast(meta[relay.Constant][24] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %643 = cast(meta[relay.Constant][24] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %644 = reshape(%642, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), float32] */;
  %645 = reshape(%643, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), float32] */;
  %646 = @func_6289(%644, %645) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(2, 10, 4), float64]) */;
  %647 = %646.0;
  %648 = cast(%647, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
  %649 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%641, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %652 = @func_7882() /* ty=Tensor[(336), int32] */;
  %653 = @func_7890() /* ty=Tensor[(?, 5, 9), uint64] */;
  %654 = %640.1;
  %655 = @func_4924() /* ty=Tensor[(?, 5, 9), uint64] */;
  %656 = multiply(%650, %651) /* ty=Tensor[(?, 5, 9), uint64] */;
  (%652, %653, meta[relay.Constant][24] /* ty=Tensor[(80), float32] */, %654, %655, %656)
}

def @func_4677() -> (Tensor[(?, 5, 9), uint64],) {
  @func_4675() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_11123(%var_11081: Tensor[(15, 14, 11), float32], %var_11086: Tensor[(1120), int64], %var_11095: Tensor[(63), float32]) -> (Tensor[(70), int32], Tensor[(1120), int64], Tensor[(5, 126), uint64], Tensor[(96, 20), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(1, 585), float32], Tensor[(15, 14, 11), float32]) {
  %657 = cast(%var_11086, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %658 = reshape(%657, newshape=[56, 20]) /* ty=Tensor[(56, 20), int64] */;
  %659 = @func_10123(%658) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(16, 7, 10), int64], Tensor[(9, 5, 9), float64], Tensor[(56, 20), uint8], Tensor[(?, 5, 9), uint64], Tensor[(405), float64], Tensor[(70), int32], Tensor[(70), int32], Tensor[(504), float32]) */;
  %660 = cast(meta[relay.Constant][25] /* ty=Tensor[(96, 20), float32] */, dtype="float32") /* ty=Tensor[(96, 20), float32] */;
  %661 = cast(meta[relay.Constant][25] /* ty=Tensor[(96, 20), float32] */, dtype="float32") /* ty=Tensor[(96, 20), float32] */;
  %662 = reshape(%660, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float32] */;
  %663 = reshape(%661, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float32] */;
  %664 = @func_8190(%662, %663) /* ty=(Tensor[(15, 16, 8), float32], Tensor[(5, 126), uint64]) */;
  %665 = cast(%var_11095, dtype="float32") /* ty=Tensor[(63), float32] */;
  %666 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 585), float32] */, dtype="float32") /* ty=Tensor[(1, 585), float32] */;
  %667 = reshape(%665, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %668 = reshape(%666, newshape=[195, 3]) /* ty=Tensor[(195, 3), float32] */;
  %669 = @func_7855(%667, %668) /* ty=(Tensor[(336), int32], Tensor[(1, 63), float32], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(?, 5, 9), uint64], Tensor[(195, 3), float64], Tensor[(1, 5, 9), float64], Tensor[(195, 3), int8]) */;
  %670 = cast(%var_11081, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %671 = exp(%670) /* ty=Tensor[(15, 14, 11), float32] */;
  %672 = cast(%671, dtype="float64") /* ty=Tensor[(15, 14, 11), float64] */;
  %673 = sin(%672) /* ty=Tensor[(15, 14, 11), float64] */;
  %674 = cast(%var_11081, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%673, dtype="float32") /* ty=Tensor[(15, 14, 11), float32] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %678 = %659.7;
  %679 = %664.1;
  %680 = %669.2;
  %681 = power(%676, %677) /* ty=Tensor[(15, 14, 11), float32] */;
  (%678, %var_11086, %679, meta[relay.Constant][25] /* ty=Tensor[(96, 20), float32] */, %680, %var_11095, meta[relay.Constant][26] /* ty=Tensor[(1, 585), float32] */, %681)
}

def @func_2140(%var_2133: Tensor[(405), float64]) -> (Tensor[(?, 5, 9), float64], Tensor[(9, 5, 9), int64], Tensor[(405), float64]) {
  %682 = @func_1469() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %683 = cast(%var_2133, dtype="float64") /* ty=Tensor[(405), float64] */;
  %684 = reshape(%683, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float64] */;
  %685 = @func_1431(%684) /* ty=(Tensor[(9, 5, 9), int64], Tensor[(?, 5, 9), float64]) */;
  %686 = %682.0;
  %687 = %685.0;
  (%686, %687, %var_2133)
}

def @func_3398() -> (Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) {
  %688 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  %689 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 5, 9), uint64] */, dtype="uint8") /* ty=Tensor[(1, 5, 9), uint8] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%688, dtype="uint8") /* ty=Tensor[(?, 5, 9), uint8] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %693 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 5, 9), uint64] */, dtype="float64") /* ty=Tensor[(1, 5, 9), float64] */;
  %694 = bitwise_xor(%691, %692) /* ty=Tensor[(?, 5, 9), uint8] */;
  %695 = log2(%693) /* ty=Tensor[(1, 5, 9), float64] */;
  (%694, %695)
}

def @func_11663() -> (Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32]) {
  %696 = @func_4118() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %697 = @func_2643() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(3, 2, 8), float64], Tensor[(24, 2), float64]) */;
  %698 = @func_4924() /* ty=Tensor[(?, 5, 9), uint64] */;
  %699 = @func_9384() /* ty=Tensor[(336), int32] */;
  %700 = %696.0;
  %701 = %697.0;
  (%698, %699, %700, %701)
}

def @func_3731(%var_3729: Tensor[(75, 3), float64], %var_3730: Tensor[(675), bool]) -> (Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), int64], Tensor[(405), float64], Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(75, 3), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) {
  %721 = fn (%var_3720: Tensor[(75, 3), float64], %var_3723: Tensor[(675), bool]) -> (Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), int64], Tensor[(405), float64], Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(75, 3), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) {
    %702 = cast(meta[relay.Constant][28] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
    %703 = reshape(%702, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float64] */;
    %704 = @func_1431(%703) /* ty=(Tensor[(9, 5, 9), int64], Tensor[(?, 5, 9), float64]) */;
    %705 = cast(meta[relay.Constant][28] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
    %706 = cast(meta[relay.Constant][29] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %707 = cast(%var_3720, dtype="float64") /* ty=Tensor[(75, 3), float64] */;
    %708 = reshape(%706, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %709 = reshape(%707, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), float64] */;
    %710 = @func_2089(%708, %709) /* ty=(Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(5, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
    %711 = cast(%var_3723, dtype="bool") /* ty=Tensor[(675), bool] */;
    %712 = cast(%var_3723, dtype="bool") /* ty=Tensor[(675), bool] */;
    %713 = reshape(%711, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
    %714 = reshape(%712, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
    %715 = @func_2180(%713, %714) /* ty=(Tensor[(15, 5, 9), bool],) */;
    %716 = @func_1803() /* ty=Tensor[(?, 5, 9), uint64] */;
    %717 = %704.0;
    %718 = sigmoid(%705) /* ty=Tensor[(405), float64] */;
    %719 = %710.4;
    %720 = %715.0;
    (%716, %717, %718, %719, meta[relay.Constant][29] /* ty=Tensor[(336), int32] */, %var_3720, %720, %var_3723)
  };
  %721(%var_3729, %var_3730) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), int64], Tensor[(405), float64], Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(75, 3), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) */
}

def @func_8103() -> (Tensor[(?, 5, 9), uint64], Tensor[(1, 5, 9), float64]) {
  %722 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %723 = @func_3398() /* ty=(Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) */;
  %724 = %722.1;
  %725 = %723.1;
  (%724, %725)
}

def @func_11128(%var_11125: Tensor[(15, 14, 11), float32], %var_11126: Tensor[(1120), int64], %var_11127: Tensor[(63), float32]) -> (Tensor[(70), int32], Tensor[(1120), int64], Tensor[(5, 126), uint64], Tensor[(96, 20), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(1, 585), float32], Tensor[(15, 14, 11), float32]) {
  @func_11123(%var_11125, %var_11126, %var_11127) /* ty=(Tensor[(70), int32], Tensor[(1120), int64], Tensor[(5, 126), uint64], Tensor[(96, 20), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(1, 585), float32], Tensor[(15, 14, 11), float32]) */
}

def @func_2749(%var_2748: Tensor[(8, 5, 9), float64]) -> (Tensor[(8, 5, 9), uint8], Tensor[(?, 5, 9), float64]) {
  %731 = fn (%var_2705: Tensor[(8, 5, 9), float64]) -> (Tensor[(8, 5, 9), uint8], Tensor[(?, 5, 9), float64]) {
    %726 = @func_1124() /* ty=Tensor[(?, 5, 9), float64] */;
    %727 = cast(%726, dtype="uint8") /* ty=Tensor[(?, 5, 9), uint8] */;
    %728 = cast(%var_2705, dtype="uint8") /* ty=Tensor[(8, 5, 9), uint8] */;
    %729 = right_shift(%727, %728) /* ty=Tensor[(8, 5, 9), uint8] */;
    %730 = @func_1124() /* ty=Tensor[(?, 5, 9), float64] */;
    (%729, %730)
  };
  %731(%var_2748) /* ty=(Tensor[(8, 5, 9), uint8], Tensor[(?, 5, 9), float64]) */
}

def @func_7148() -> (Tensor[(?, 5, 9), uint64],) {
  %732 = @func_4270() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(11, 16, 15), float64], Tensor[(660, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %733 = %732.0;
  (%733,)
}

def @func_1336() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %734 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  %735 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%734, %735)
}

def @func_3299() -> (Tensor[(?, 5, 9), uint64],) {
  %736 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %737 = %736.1;
  (%737,)
}

def @func_4926() -> Tensor[(?, 5, 9), uint64] {
  @func_4924() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_11526(%var_11524: int32) -> (Tensor[(336), int32], Tensor[(70, 1), int32], int32) {
  @func_11523(%var_11524) /* ty=(Tensor[(336), int32], Tensor[(70, 1), int32], int32) */
}

def @func_6643() -> (Tensor[(?, 5, 9), float64], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), uint64]) {
  %749 = fn () -> (Tensor[(?, 5, 9), float64], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), uint64]) {
    %738 = @func_5726() /* ty=(Tensor[(?, 5, 9), float64],) */;
    %739 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
    %740 = @func_4557() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
    %741 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
    %742 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
    %743 = %738.0;
    %744 = %739.1;
    %745 = %740.1;
    %746 = %741.0;
    %747 = %742.1;
    %748 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
    (%743, %744, %745, %746, %747, %748)
  };
  %749() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32], Tensor[(14, 3, 8), int16], Tensor[(?, 5, 9), uint64]) */
}

def @func_6292(%var_6290: Tensor[(2, 10, 4), float32], %var_6291: Tensor[(2, 10, 4), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(2, 10, 4), float64]) {
  %759 = fn (%var_6266: Tensor[(2, 10, 4), float32], %var_6267: Tensor[(2, 10, 4), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(2, 10, 4), float64]) {
    %750 = @func_5110() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %751 = cast(%var_6267, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
    %752 = shape_of(%var_6266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %753 = cast(%var_6266, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
    %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %755 = mod(%753, %754) /* ty=Tensor[(2, 10, 4), float32] */;
    %756 = cast(%755, dtype="float64") /* ty=Tensor[(2, 10, 4), float64] */;
    %757 = %750.1;
    %758 = asin(%756) /* ty=Tensor[(2, 10, 4), float64] */;
    (%757, %758)
  };
  %759(%var_6290, %var_6291) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(2, 10, 4), float64]) */
}

def @func_7167() -> (Tensor[(?, 5, 9), uint64],) {
  %760 = @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %761 = %760.0;
  (%761,)
}

def @func_11971() -> (Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) {
  %762 = @func_7656() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) */;
  %763 = @func_10517() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(80), float32], Tensor[(2, 10, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %764 = %762.1;
  %765 = %763.5;
  (%764, %765)
}

def @func_6087() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %766 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
  %767 = cast(%766, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
  %768 = reshape(%767, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint64] */;
  %769 = @func_3299() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %770 = @func_3780(%768) /* ty=Tensor[(?, 5, 9), float64] */;
  %771 = %769.0;
  (%766, %770, %771)
}

def @func_7491() -> (Tensor[(15, 5, 9), bool], Tensor[(?, 5, 9), uint8]) {
  @func_7489() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(?, 5, 9), uint8]) */
}

def @func_10135() -> (Tensor[(10, 2, 16), float64],) {
  %772 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 2, 16), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %773 = asin(%772) /* ty=Tensor[(10, 2, 16), float64] */;
  (%773,)
}

def @func_6041(%var_6039: Tensor[(1440), uint32], %var_6040: Tensor[(63), float32]) -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(585), uint64], Tensor[(1440), uint32], Tensor[(63), float32]) {
  %786 = fn (%var_6030: Tensor[(1440), uint32], %var_6031: Tensor[(63), float32]) -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(585), uint64], Tensor[(1440), uint32], Tensor[(63), float32]) {
    %774 = cast(%var_6030, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
    %775 = cast(%var_6030, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
    %776 = cast(%var_6031, dtype="float32") /* ty=Tensor[(63), float32] */;
    %777 = cast(%var_6030, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
    %778 = reshape(%774, newshape=[12, 10, 12]) /* ty=Tensor[(12, 10, 12), uint32] */;
    %779 = reshape(%775, newshape=[12, 10, 12]) /* ty=Tensor[(12, 10, 12), uint32] */;
    %780 = reshape(%776, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %781 = reshape(%777, newshape=[12, 10, 12]) /* ty=Tensor[(12, 10, 12), uint32] */;
    %782 = @func_2849(%778, %779, %780, %781) /* ty=(Tensor[(1, 63), float32], Tensor[(585), uint64], Tensor[(63), float32], Tensor[(?, 5, 9), float32], Tensor[(12, 10, 12), int16], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %783 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
    %784 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
    %785 = %782.1;
    (%783, %784, %785, %var_6030, %var_6031)
  };
  %786(%var_6039, %var_6040) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(585), uint64], Tensor[(1440), uint32], Tensor[(63), float32]) */
}

def @func_2855(%var_2851: Tensor[(12, 10, 12), uint32], %var_2852: Tensor[(12, 10, 12), uint32], %var_2853: Tensor[(63), float32], %var_2854: Tensor[(12, 10, 12), uint32]) -> (Tensor[(1, 63), float32], Tensor[(585), uint64], Tensor[(63), float32], Tensor[(?, 5, 9), float32], Tensor[(12, 10, 12), int16], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  @func_2849(%var_2851, %var_2852, %var_2853, %var_2854) /* ty=(Tensor[(1, 63), float32], Tensor[(585), uint64], Tensor[(63), float32], Tensor[(?, 5, 9), float32], Tensor[(12, 10, 12), int16], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */
}

def @func_9688() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %794 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
    %787 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %788 = @func_3299() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %789 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %790 = %787.0;
    %791 = %788.0;
    %792 = @func_4215() /* ty=Tensor[(?, 5, 9), uint64] */;
    %793 = %789.0;
    (%790, %791, %792, %793)
  };
  %794() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */
}

def @func_2959() -> (Tensor[(?, 5, 9), uint64],) {
  %797 = fn () -> (Tensor[(?, 5, 9), uint64],) {
    %795 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %796 = %795.0;
    (%796,)
  };
  %797() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_594() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */
}

def @func_10202() -> Tensor[(?, 5, 9), uint64] {
  %798 = @func_4675() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %798.0
}

def @func_3156() -> Tensor[(?, 5, 9), uint64] {
  %800 = fn () -> Tensor[(?, 5, 9), uint64] {
    %799 = @func_1469() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %799.1
  };
  %800() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_5144() -> Tensor[(?, 5, 9), float64] {
  %801 = @func_4118() /* ty=(Tensor[(?, 5, 9), float64],) */;
  %801.0
}

def @func_7489() -> (Tensor[(15, 5, 9), bool], Tensor[(?, 5, 9), uint8]) {
  %802 = @func_4624() /* ty=(Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */;
  %803 = @func_4737() /* ty=(Tensor[(?, 5, 9), uint8],) */;
  %804 = %802.1;
  %805 = %803.0;
  (%804, %805)
}

def @func_5817() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(336), int32], Tensor[(7, 5, 9), uint16]) {
  %806 = @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %807 = @func_5144() /* ty=Tensor[(?, 5, 9), float64] */;
  %808 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  %809 = %806.0;
  %810 = @func_5231() /* ty=Tensor[(7, 5, 9), uint16] */;
  (%807, %808, %809, %810)
}

def @func_1124() -> Tensor[(?, 5, 9), float64] {
  @func_314() /* ty=Tensor[(?, 5, 9), float64] */
}

def @main() -> (Tensor[(2, 10, 4), uint64],) {
  %811 = @func_10519() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(80), float32], Tensor[(2, 10, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
  %812 = %811.3;
  %813 = cast(%812, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %814 = log2(%813) /* ty=Tensor[(2, 10, 4), float32] */;
  %815 = cast(%814, dtype="uint64") /* ty=Tensor[(2, 10, 4), uint64] */;
  %816 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%812, dtype="uint64") /* ty=Tensor[(2, 10, 4), uint64] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %819 = right_shift(%817, %818) /* ty=Tensor[(2, 10, 4), uint64] */;
  (%819,)
}

def @func_7646() -> Tensor[(5, 126), uint64] {
  %821 = fn () -> Tensor[(5, 126), uint64] {
    %820 = @func_6303() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) */;
    %820.2
  };
  %821() /* ty=Tensor[(5, 126), uint64] */
}

def @func_3070() -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) {
  %828 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) {
    %822 = cast(meta[relay.Constant][31] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %823 = reshape(%822, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %824 = @func_1232(%823) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32]) */;
    %825 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
    %826 = %824.3;
    %827 = @func_1803() /* ty=Tensor[(?, 5, 9), uint64] */;
    (%825, %826, meta[relay.Constant][31] /* ty=Tensor[(336), int32] */, %827)
  };
  %828() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */
}

def @func_11836() -> (Tensor[(?, 5, 9), float64],) {
  %829 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %830 = %829.0;
  (%830,)
}

def @func_9975() -> Tensor[(?, 5, 9), uint8] {
  %832 = fn () -> Tensor[(?, 5, 9), uint8] {
    %831 = @func_4737() /* ty=(Tensor[(?, 5, 9), uint8],) */;
    %831.0
  };
  %832() /* ty=Tensor[(?, 5, 9), uint8] */
}

def @func_4162() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  @func_4160() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_937() -> (Tensor[(?, 5, 9), uint64],) {
  @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_9227(%var_9218: Tensor[(11, 5, 9), uint64]) -> Tensor[(11, 5, 9), float32] {
  %833 = @func_2290() /* ty=Tensor[(?, 5, 9), uint64] */;
  %834 = cast(%833, dtype="float32") /* ty=Tensor[(?, 5, 9), float32] */;
  %835 = cast(%var_9218, dtype="float32") /* ty=Tensor[(11, 5, 9), float32] */;
  divide(%834, %835) /* ty=Tensor[(11, 5, 9), float32] */
}

def @func_9948(%var_9946: Tensor[(7, 5, 9), uint16]) -> (Tensor[(7, 5, 9), float64],) {
  @func_9945(%var_9946) /* ty=(Tensor[(7, 5, 9), float64],) */
}

def @func_10519() -> (Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(80), float32], Tensor[(2, 10, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  @func_10517() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(80), float32], Tensor[(2, 10, 4), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_1470() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %839 = fn () -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
    %836 = @func_1307() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %837 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
    %838 = %836.0;
    (%837, %838)
  };
  %839() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */
}

def @func_8190(%var_8164: Tensor[(15, 16, 8), float32], %var_8165: Tensor[(15, 16, 8), float32]) -> (Tensor[(15, 16, 8), float32], Tensor[(5, 126), uint64]) {
  %840 = cast(%var_8165, dtype="float32") /* ty=Tensor[(15, 16, 8), float32] */;
  %841 = shape_of(%var_8164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%var_8164, dtype="float32") /* ty=Tensor[(15, 16, 8), float32] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %844 = @func_6303() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(14, 5, 9), bool], Tensor[(5, 126), uint64]) */;
  %845 = divide(%842, %843) /* ty=Tensor[(15, 16, 8), float32] */;
  %846 = %844.2;
  (%845, %846)
}

def @func_6089() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  @func_6087() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */
}

def @func_4543() -> Tensor[(13, 14, 3), float64] {
  %847 = cast(4.23621f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %848 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 14, 3), float64] */;
  power(%847, %848) /* ty=Tensor[(13, 14, 3), float64] */
}

def @func_7009() -> (Tensor[(?, 5, 9), uint64],) {
  %850 = fn () -> (Tensor[(?, 5, 9), uint64],) {
    %849 = @func_5195() /* ty=Tensor[(?, 5, 9), uint64] */;
    (%849,)
  };
  %850() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_5819() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(336), int32], Tensor[(7, 5, 9), uint16]) {
  @func_5817() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(336), int32], Tensor[(7, 5, 9), uint16]) */
}

def @func_8806(%var_8796: Tensor[(585), float32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(585), float32]) {
  %851 = @func_5135() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %852 = @func_454() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %853 = cast(meta[relay.Constant][33] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %854 = reshape(%853, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float32] */;
  %855 = @func_1594(%854) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(?, 5, 9), uint64]) */;
  %856 = cast(meta[relay.Constant][33] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %857 = cast(%var_8796, dtype="float32") /* ty=Tensor[(585), float32] */;
  %858 = reshape(%856, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %859 = reshape(%857, newshape=[195, 3]) /* ty=Tensor[(195, 3), float32] */;
  %860 = @func_7855(%858, %859) /* ty=(Tensor[(336), int32], Tensor[(1, 63), float32], Tensor[(63), float32], Tensor[(195, 3), bool], Tensor[(?, 5, 9), uint64], Tensor[(195, 3), float64], Tensor[(1, 5, 9), float64], Tensor[(195, 3), int8]) */;
  %861 = %851.0;
  %862 = %852.0;
  %863 = %855.1;
  %864 = %860.3;
  (%861, %862, %863, meta[relay.Constant][33] /* ty=Tensor[(63), float32] */, %864, %var_8796)
}

def @func_7884() -> Tensor[(336), int32] {
  @func_7882() /* ty=Tensor[(336), int32] */
}

def @func_4119() -> (Tensor[(?, 5, 9), float64],) {
  %869 = fn () -> (Tensor[(?, 5, 9), float64],) {
    %865 = @func_2643() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(3, 2, 8), float64], Tensor[(24, 2), float64]) */;
    %866 = %865.0;
    %867 = cast(%866, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
    %868 = asinh(%867) /* ty=Tensor[(?, 5, 9), float64] */;
    (%868,)
  };
  %869() /* ty=(Tensor[(?, 5, 9), float64],) */
}

def @func_3783(%var_3781: Tensor[(1, 5, 9), uint64]) -> Tensor[(?, 5, 9), float64] {
  @func_3780(%var_3781) /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_7310() -> (Tensor[(?, 5, 9), uint64],) {
  %870 = @func_4675() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %871 = %870.0;
  (%871,)
}

def @func_7342(%var_7340: Tensor[(16, 7, 10), int64], %var_7341: Tensor[(16, 7, 10), int64]) -> Tensor[(16, 7, 10), int64] {
  @func_7338(%var_7340, %var_7341) /* ty=Tensor[(16, 7, 10), int64] */
}

def @func_7312() -> (Tensor[(?, 5, 9), uint64],) {
  @func_7310() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_3523() -> (Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %872 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %873 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %874 = %872.2;
  %875 = %873.0;
  %876 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  (%874, %875, %876)
}

def @func_704() -> (Tensor[(?, 5, 9), uint64],) {
  %877 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %878 = %877.1;
  (%878,)
}

def @func_2396(%var_2394: Tensor[(13, 5, 9), uint64], %var_2395: Tensor[(1, 63), float32]) -> (Tensor[(?, 5, 9), float64], Tensor[(13, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(1, 63), float32]) {
  @func_2392(%var_2394, %var_2395) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(13, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(1, 63), float32]) */
}

def @func_7150() -> (Tensor[(?, 5, 9), uint64],) {
  @func_7148() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_7338(%var_7333: Tensor[(16, 7, 10), int64], %var_7334: Tensor[(16, 7, 10), int64]) -> Tensor[(16, 7, 10), int64] {
  %879 = cast(%var_7334, dtype="int64") /* ty=Tensor[(16, 7, 10), int64] */;
  %880 = shape_of(%var_7333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(%var_7333, dtype="int64") /* ty=Tensor[(16, 7, 10), int64] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%881, %882) /* ty=Tensor[(16, 7, 10), int64] */
}

def @func_8634() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(288), float32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %892 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(288), float32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
    %883 = cast(meta[relay.Constant][34] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %884 = reshape(%883, newshape=[3, 12, 8]) /* ty=Tensor[(3, 12, 8), float32] */;
    %885 = @func_1706(%884) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(3, 12, 8), uint32]) */;
    %886 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %887 = @func_7687() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %888 = @func_7890() /* ty=Tensor[(?, 5, 9), uint64] */;
    %889 = %885.0;
    %890 = %886.0;
    %891 = %887.0;
    (%888, %889, meta[relay.Constant][34] /* ty=Tensor[(288), float32] */, %890, %891)
  };
  %892() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(288), float32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */
}

def @func_3587() -> Tensor[(?, 5, 9), float64] {
  %894 = fn () -> Tensor[(?, 5, 9), float64] {
    %893 = @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
    %893.2
  };
  %894() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_2944() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %899 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
    %895 = @func_1567() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %896 = @func_1469() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %897 = %895.0;
    %898 = %896.0;
    (%897, %898)
  };
  %899() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */
}

def @func_1308() -> (Tensor[(?, 5, 9), uint64],) {
  %902 = fn () -> (Tensor[(?, 5, 9), uint64],) {
    %900 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %901 = %900.0;
    (%901,)
  };
  %902() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_4737() -> (Tensor[(?, 5, 9), uint8],) {
  %903 = @func_3398() /* ty=(Tensor[(?, 5, 9), uint8], Tensor[(1, 5, 9), float64]) */;
  %904 = %903.0;
  (%904,)
}

def @func_6470() -> (Tensor[(?, 5, 9), uint64],) {
  %907 = fn () -> (Tensor[(?, 5, 9), uint64],) {
    %905 = @func_4411() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), bool]) */;
    %906 = %905.1;
    (%906,)
  };
  %907() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_5462() -> (Tensor[(?, 5, 9), float64],) {
  %909 = fn () -> (Tensor[(?, 5, 9), float64],) {
    %908 = @func_3586() /* ty=Tensor[(?, 5, 9), float64] */;
    (%908,)
  };
  %909() /* ty=(Tensor[(?, 5, 9), float64],) */
}

def @func_11973() -> (Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) {
  @func_11971() /* ty=(Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) */
}

def @func_4160() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %910 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %911 = @func_380() /* ty=Tensor[(?, 5, 9), uint64] */;
  %912 = %910.1;
  (%911, %912)
}

def @func_4200(%var_4199: Tensor[(405), float64]) -> (Tensor[(?, 5, 9), float64], Tensor[(9, 5, 9), int64], Tensor[(405), float64]) {
  %918 = fn (%var_4194: Tensor[(405), float64]) -> (Tensor[(?, 5, 9), float64], Tensor[(9, 5, 9), int64], Tensor[(405), float64]) {
    %913 = cast(%var_4194, dtype="float64") /* ty=Tensor[(405), float64] */;
    %914 = reshape(%913, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float64] */;
    %915 = @func_1431(%914) /* ty=(Tensor[(9, 5, 9), int64], Tensor[(?, 5, 9), float64]) */;
    %916 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
    %917 = %915.0;
    (%916, %917, %var_4194)
  };
  %918(%var_4199) /* ty=(Tensor[(?, 5, 9), float64], Tensor[(9, 5, 9), int64], Tensor[(405), float64]) */
}

def @func_4739() -> (Tensor[(?, 5, 9), uint8],) {
  @func_4737() /* ty=(Tensor[(?, 5, 9), uint8],) */
}

def @func_11688(%var_11686: int8) -> (Tensor[(16, 12, 3), bool],) {
  @func_11685(%var_11686) /* ty=(Tensor[(16, 12, 3), bool],) */
}

def @func_10713() -> Tensor[(336), int32] {
  %919 = @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
  %919.0
}

def @func_6096(%var_6094: Tensor[(16, 16, 14), float32]) -> (Tensor[(16, 16, 14), float32],) {
  @func_6093(%var_6094) /* ty=(Tensor[(16, 16, 14), float32],) */
}

def @func_5073() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  @func_5071() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */
}

def @func_381() -> Tensor[(?, 5, 9), uint64] {
  %931 = fn () -> Tensor[(?, 5, 9), uint64] {
    %920 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
    %921 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
    %922 = cast(%921, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
    %923 = shape_of(%920, dtype="int32") /* ty=Tensor[(3), int32] */;
    %924 = cast(%920, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
    %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %926 = logical_xor(%924, %925) /* ty=Tensor[(?, 5, 9), uint64] */;
    %927 = cast(%920, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
    %928 = shape_of(%926, dtype="int32") /* ty=Tensor[(3), int32] */;
    %929 = cast(%926, dtype="uint64") /* ty=Tensor[(?, 5, 9), uint64] */;
    %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    right_shift(%929, %930) /* ty=Tensor[(?, 5, 9), uint64] */
  };
  %931() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_4217() -> Tensor[(?, 5, 9), uint64] {
  @func_4215() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_8899() -> Tensor[(?, 5, 9), uint64] {
  %933 = fn () -> Tensor[(?, 5, 9), uint64] {
    %932 = @func_7109() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %932.0
  };
  %933() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_1846() -> Tensor[(?, 5, 9), float64] {
  %935 = fn () -> Tensor[(?, 5, 9), float64] {
    %934 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
    %934.0
  };
  %935() /* ty=Tensor[(?, 5, 9), float64] */
}

def @func_4785() -> (Tensor[(?, 5, 9), uint64],) {
  %936 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%936,)
}

def @func_2183(%var_2181: Tensor[(15, 5, 9), bool], %var_2182: Tensor[(15, 5, 9), bool]) -> (Tensor[(15, 5, 9), bool],) {
  %942 = fn (%var_2167: Tensor[(15, 5, 9), bool], %var_2168: Tensor[(15, 5, 9), bool]) -> (Tensor[(15, 5, 9), bool],) {
    %937 = cast(%var_2168, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %938 = shape_of(%var_2167, dtype="int32") /* ty=Tensor[(3), int32] */;
    %939 = cast(%var_2167, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %941 = logical_or(%939, %940) /* ty=Tensor[(15, 5, 9), bool] */;
    (%941,)
  };
  %942(%var_2181, %var_2182) /* ty=(Tensor[(15, 5, 9), bool],) */
}

def @func_5111() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %947 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
    %943 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %944 = @func_2943() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
    %945 = %943.0;
    %946 = %944.0;
    (%945, %946)
  };
  %947() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_1338() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  @func_1336() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */
}

def @func_4787() -> (Tensor[(?, 5, 9), uint64],) {
  @func_4785() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_7429() -> Tensor[(?, 5, 9), uint64] {
  @func_7427() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_10920() -> (Tensor[(?, 5, 9), float64],) {
  %948 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  (%948,)
}

def @func_3943() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
  %951 = fn () -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) {
    %949 = @func_3155() /* ty=Tensor[(?, 5, 9), uint64] */;
    %950 = @func_3586() /* ty=Tensor[(?, 5, 9), float64] */;
    (%949, %950)
  };
  %951() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */
}

def @func_1232(%var_1222: Tensor[(336), int32]) -> (Tensor[(?, 5, 9), uint64], Tensor[(9, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32]) {
  %952 = @func_592() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */;
  %953 = @func_1124() /* ty=Tensor[(?, 5, 9), float64] */;
  %954 = cast(%953, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %955 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 5, 9), float64] */, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %956 = greater_equal(%954, %955) /* ty=Tensor[(9, 5, 9), bool] */;
  %957 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 5, 9), float64] */, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %958 = shape_of(%956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %959 = cast(%956, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %961 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %962 = cast(%var_1222, dtype="int32") /* ty=Tensor[(336), int32] */;
  %963 = cast(%var_1222, dtype="int32") /* ty=Tensor[(336), int32] */;
  %964 = cast(%var_1222, dtype="int32") /* ty=Tensor[(336), int32] */;
  %965 = reshape(%962, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %966 = reshape(%963, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %967 = reshape(%964, newshape=[14, 3, 8]) /* ty=Tensor[(14, 3, 8), int32] */;
  %968 = @func_1077(%965, %966, %967) /* ty=(Tensor[(14, 3, 8), int32], Tensor[(14, 3, 8), int16]) */;
  %969 = %952.1;
  %970 = less(%959, %960) /* ty=Tensor[(9, 5, 9), bool] */;
  %971 = %961.0;
  %972 = %968.1;
  (%969, %970, %971, %972, %var_1222)
}

def @func_11611() -> Tensor[(?, 5, 9), uint64] {
  %973 = fn () -> Tensor[(?, 5, 9), uint64] {
    @func_2290() /* ty=Tensor[(?, 5, 9), uint64] */
  };
  %973() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_8579(%var_8578: Tensor[(1260), int16]) -> (Tensor[(7, 5, 9), uint16], Tensor[(7, 5, 9), uint16], Tensor[(14, 9, 10), bool], Tensor[(1260), int16]) {
  %981 = fn (%var_8574: Tensor[(1260), int16]) -> (Tensor[(7, 5, 9), uint16], Tensor[(7, 5, 9), uint16], Tensor[(14, 9, 10), bool], Tensor[(1260), int16]) {
    %974 = @func_6732() /* ty=(Tensor[(7, 5, 9), uint16], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */;
    %975 = cast(%var_8574, dtype="int16") /* ty=Tensor[(1260), int16] */;
    %976 = reshape(%975, newshape=[14, 9, 10]) /* ty=Tensor[(14, 9, 10), int16] */;
    %977 = @func_7081(%976) /* ty=(Tensor[(14, 9, 10), bool],) */;
    %978 = @func_5231() /* ty=Tensor[(7, 5, 9), uint16] */;
    %979 = %974.0;
    %980 = %977.0;
    (%978, %979, %980, %var_8574)
  };
  %981(%var_8578) /* ty=(Tensor[(7, 5, 9), uint16], Tensor[(7, 5, 9), uint16], Tensor[(14, 9, 10), bool], Tensor[(1260), int16]) */
}

def @func_3884() -> Tensor[(7, 5, 9), uint16] {
  %986 = fn () -> Tensor[(7, 5, 9), uint16] {
    %982 = @func_935() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %983 = %982.0;
    %984 = cast(%983, dtype="uint16") /* ty=Tensor[(?, 5, 9), uint16] */;
    %985 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 5, 9), uint64] */, dtype="uint16") /* ty=Tensor[(7, 5, 9), uint16] */;
    right_shift(%984, %985) /* ty=Tensor[(7, 5, 9), uint16] */
  };
  %986() /* ty=Tensor[(7, 5, 9), uint16] */
}

def @func_1081(%var_1078: Tensor[(14, 3, 8), int32], %var_1079: Tensor[(14, 3, 8), int32], %var_1080: Tensor[(14, 3, 8), int32]) -> (Tensor[(14, 3, 8), int32], Tensor[(14, 3, 8), int16]) {
  %997 = fn (%var_1051: Tensor[(14, 3, 8), int32], %var_1052: Tensor[(14, 3, 8), int32], %var_1073: Tensor[(14, 3, 8), int32]) -> (Tensor[(14, 3, 8), int32], Tensor[(14, 3, 8), int16]) {
    %987 = cast(%var_1052, dtype="int32") /* ty=Tensor[(14, 3, 8), int32] */;
    %988 = shape_of(%var_1051, dtype="int32") /* ty=Tensor[(3), int32] */;
    %989 = cast(%var_1051, dtype="int32") /* ty=Tensor[(14, 3, 8), int32] */;
    %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %991 = cast(%var_1073, dtype="int16") /* ty=Tensor[(14, 3, 8), int16] */;
    %992 = shape_of(%var_1052, dtype="int32") /* ty=Tensor[(3), int32] */;
    %993 = cast(%var_1052, dtype="int16") /* ty=Tensor[(14, 3, 8), int16] */;
    %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %995 = subtract(%989, %990) /* ty=Tensor[(14, 3, 8), int32] */;
    %996 = right_shift(%993, %994) /* ty=Tensor[(14, 3, 8), int16] */;
    (%995, %996)
  };
  %997(%var_1078, %var_1079, %var_1080) /* ty=(Tensor[(14, 3, 8), int32], Tensor[(14, 3, 8), int16]) */
}

def @func_8376() -> (Tensor[(?, 5, 9), uint64],) {
  @func_8374() /* ty=(Tensor[(?, 5, 9), uint64],) */
}

def @func_692(%var_690: int32, %var_691: Tensor[(7, 1, 10), int32]) -> (Tensor[(7, 1, 10), bool],) {
  %1001 = fn (%var_684: int32, %var_685: Tensor[(7, 1, 10), int32]) -> (Tensor[(7, 1, 10), bool],) {
    %998 = cast(%var_684, dtype="bool") /* ty=bool */;
    %999 = cast(%var_685, dtype="bool") /* ty=Tensor[(7, 1, 10), bool] */;
    %1000 = less(%998, %999) /* ty=Tensor[(7, 1, 10), bool] */;
    (%1000,)
  };
  %1001(%var_690, %var_691) /* ty=(Tensor[(7, 1, 10), bool],) */
}

def @func_9230(%var_9228: Tensor[(11, 5, 9), uint64]) -> Tensor[(11, 5, 9), float32] {
  @func_9227(%var_9228) /* ty=Tensor[(11, 5, 9), float32] */
}

def @func_11326(%var_11322: Tensor[(360), float64]) -> (Tensor[(75, 9), bool], Tensor[(8, 5, 9), uint8], Tensor[(360), float64]) {
  %1002 = @func_4624() /* ty=(Tensor[(?, 5, 9), bool], Tensor[(15, 5, 9), bool], Tensor[(75, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) */;
  %1003 = cast(%var_11322, dtype="float64") /* ty=Tensor[(360), float64] */;
  %1004 = reshape(%1003, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %1005 = @func_2747(%1004) /* ty=(Tensor[(8, 5, 9), uint8], Tensor[(?, 5, 9), float64]) */;
  %1006 = %1002.2;
  %1007 = %1005.0;
  (%1006, %1007, %var_11322)
}

def @func_8349() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) {
  %1008 = @func_4675() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %1009 = @func_5144() /* ty=Tensor[(?, 5, 9), float64] */;
  %1010 = %1008.0;
  %1011 = @func_791() /* ty=Tensor[(?, 5, 9), uint64] */;
  (%1009, %1010, %1011)
}

def @func_6732() -> (Tensor[(7, 5, 9), uint16], Tensor[(?, 5, 9), uint64], Tensor[(336), int32]) {
  %1012 = @func_5597() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %1013 = @func_5817() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float64], Tensor[(336), int32], Tensor[(7, 5, 9), uint16]) */;
  %1014 = @func_3883() /* ty=Tensor[(7, 5, 9), uint16] */;
  %1015 = %1012.0;
  %1016 = %1013.2;
  (%1014, %1015, %1016)
}

def @func_7688() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %1021 = fn () -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
    %1017 = @func_4411() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), bool]) */;
    %1018 = @func_1307() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %1019 = %1017.2;
    %1020 = %1018.0;
    (%1019, %1020)
  };
  %1021() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) */
}

def @func_4773(%var_4743: Tensor[(63), float32]) -> (Tensor[(14, 3, 8), int16], Tensor[(7, 3, 3), float32], Tensor[(63), float32], Tensor[(16, 5, 9), int64]) {
  %1022 = @func_3069() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 3, 8), int16], Tensor[(336), int32], Tensor[(?, 5, 9), uint64]) */;
  %1023 = cast(%var_4743, dtype="float32") /* ty=Tensor[(63), float32] */;
  %1024 = reshape(%1023, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float32] */;
  %1025 = @func_1594(%1024) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(?, 5, 9), uint64]) */;
  %1026 = @func_1845() /* ty=Tensor[(?, 5, 9), float64] */;
  %1027 = cast(%1026, dtype="int64") /* ty=Tensor[(?, 5, 9), int64] */;
  %1028 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 5, 9), float64] */, dtype="int64") /* ty=Tensor[(16, 5, 9), int64] */;
  %1029 = %1022.1;
  %1030 = %1025.0;
  %1031 = bitwise_or(%1027, %1028) /* ty=Tensor[(16, 5, 9), int64] */;
  (%1029, %1030, %var_4743, %1031)
}

def @func_592() -> (Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64]) {
  %1032 = @func_480() /* ty=Tensor[(?, 5, 9), uint64] */;
  %1033 = cast(%1032, dtype="float64") /* ty=Tensor[(?, 5, 9), float64] */;
  %1034 = @func_564() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %1035 = acosh(%1033) /* ty=Tensor[(?, 5, 9), float64] */;
  %1036 = %1034.0;
  (%1035, %1036)
}

def @func_8194(%var_8192: Tensor[(15, 16, 8), float32], %var_8193: Tensor[(15, 16, 8), float32]) -> (Tensor[(15, 16, 8), float32], Tensor[(5, 126), uint64]) {
  @func_8190(%var_8192, %var_8193) /* ty=(Tensor[(15, 16, 8), float32], Tensor[(5, 126), uint64]) */
}

def @func_10275() -> (Tensor[(?, 5, 9), float64],) {
  %1039 = fn () -> (Tensor[(?, 5, 9), float64],) {
    %1037 = @func_8349() /* ty=(Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64]) */;
    %1038 = %1037.0;
    (%1038,)
  };
  %1039() /* ty=(Tensor[(?, 5, 9), float64],) */
}

def @func_9189() -> Tensor[(?, 5, 9), uint64] {
  %1041 = fn () -> Tensor[(?, 5, 9), uint64] {
    %1040 = @func_3247() /* ty=(Tensor[(?, 5, 9), uint64],) */;
    %1040.0
  };
  %1041() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_11036() -> Tensor[(?, 5, 9), uint64] {
  @func_11034() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_11402(%var_11374: Tensor[(6, 1, 12), uint64], %var_11382: Tensor[(14, 165), float64], %var_11398: Tensor[(14, 165), float64]) -> (Tensor[(6, ?, 12), uint64], Tensor[(336), int32], Tensor[(14, 165), float32]) {
  %1042 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 1, 12), uint64] */, dtype="uint64") /* ty=Tensor[(6, 1, 12), uint64] */;
  %1043 = shape_of(%var_11374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1044 = cast(%var_11374, dtype="uint64") /* ty=Tensor[(6, 1, 12), uint64] */;
  %1045 = dyn.reshape(%1042, %1043, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1046 = cast(%var_11382, dtype="float64") /* ty=Tensor[(14, 165), float64] */;
  %1047 = reshape(%1046, newshape=[11, 14, 15]) /* ty=Tensor[(11, 14, 15), float64] */;
  %1048 = @func_4020(%1047) /* ty=(Tensor[(11, 14, 15), float64], Tensor[(336), int32]) */;
  %1049 = cast(%var_11398, dtype="float32") /* ty=Tensor[(14, 165), float32] */;
  %1050 = shape_of(%var_11382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1051 = cast(%var_11382, dtype="float32") /* ty=Tensor[(14, 165), float32] */;
  %1052 = dyn.reshape(%1049, %1050, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1053 = right_shift(%1044, %1045) /* ty=Tensor[(6, ?, 12), uint64] */;
  %1054 = %1048.1;
  %1055 = mod(%1051, %1052) /* ty=Tensor[(14, 165), float32] */;
  (%1053, %1054, %1055)
}

def @func_2392(%var_2372: Tensor[(13, 5, 9), uint64], %var_2389: Tensor[(1, 63), float32]) -> (Tensor[(?, 5, 9), float64], Tensor[(13, 5, 9), bool], Tensor[(?, 5, 9), uint64], Tensor[(1, 63), float32]) {
  %1056 = @func_704() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %1057 = %1056.0;
  %1058 = cast(%1057, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %1059 = cast(%var_2372, dtype="bool") /* ty=Tensor[(13, 5, 9), bool] */;
  %1060 = cast(%var_2389, dtype="float32") /* ty=Tensor[(1, 63), float32] */;
  %1061 = reshape(%1060, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float32] */;
  %1062 = @func_1594(%1061) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(?, 5, 9), uint64]) */;
  %1063 = @func_314() /* ty=Tensor[(?, 5, 9), float64] */;
  %1064 = logical_and(%1058, %1059) /* ty=Tensor[(13, 5, 9), bool] */;
  %1065 = %1062.1;
  (%1063, %1064, %1065, %var_2389)
}

def @func_11776() -> Tensor[(7, 5, 9), uint16] {
  @func_11774() /* ty=Tensor[(7, 5, 9), uint16] */
}

def @func_10231() -> (Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) {
  %1069 = fn () -> (Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) {
    %1066 = @func_7656() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(14, 5, 9), bool], Tensor[(630), uint64], Tensor[(?, 5, 9), uint64]) */;
    %1067 = %1066.1;
    %1068 = @func_4924() /* ty=Tensor[(?, 5, 9), uint64] */;
    (%1067, %1068)
  };
  %1069() /* ty=(Tensor[(14, 5, 9), bool], Tensor[(?, 5, 9), uint64]) */
}

def @func_5135() -> (Tensor[(?, 5, 9), uint64],) {
  %1070 = @func_1737() /* ty=(Tensor[(?, 5, 9), float32], Tensor[(?, 5, 9), uint64]) */;
  %1071 = %1070.1;
  (%1071,)
}

def @func_9915(%var_9905: float64, %var_9906: Tensor[(1176), float64]) -> (Tensor[(?, 5, 9), uint64], Tensor[(6, 14, 14), float64], float64, Tensor[(1176), float64]) {
  %1072 = @func_7462() /* ty=(Tensor[(?, 5, 9), uint64],) */;
  %1073 = cast(%var_9905, dtype="float64") /* ty=float64 */;
  %1074 = cast(%var_9906, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %1075 = reshape(%1073, newshape=[]) /* ty=float64 */;
  %1076 = reshape(%1074, newshape=[6, 14, 14]) /* ty=Tensor[(6, 14, 14), float64] */;
  %1077 = cast(%var_9906, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %1078 = %1072.0;
  %1079 = @func_6157(%1075, %1076) /* ty=Tensor[(6, 14, 14), float64] */;
  %1080 = sqrt(%1077) /* ty=Tensor[(1176), float64] */;
  (%1078, %1079, %var_9905, %1080)
}

def @func_480() -> Tensor[(?, 5, 9), uint64] {
  @func_380() /* ty=Tensor[(?, 5, 9), uint64] */
}

def @func_11665() -> (Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32]) {
  @func_11663() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(336), int32], Tensor[(?, 5, 9), float64], Tensor[(?, 5, 9), float32]) */
}

def @func_4022(%var_4021: Tensor[(11, 14, 15), float64]) -> (Tensor[(11, 14, 15), float64], Tensor[(336), int32]) {
  %1088 = fn (%var_3945: Tensor[(11, 14, 15), float64]) -> (Tensor[(11, 14, 15), float64], Tensor[(336), int32]) {
    %1081 = cast(%var_3945, dtype="float64") /* ty=Tensor[(11, 14, 15), float64] */;
    %1082 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(11, 14, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1083 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 14, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 15), float64] */;
    %1084 = dyn.reshape(%1081, %1082, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1085 = @func_3523() /* ty=(Tensor[(336), int32], Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), float64]) */;
    %1086 = power(%1083, %1084) /* ty=Tensor[(11, 14, 15), float64] */;
    %1087 = %1085.0;
    (%1086, %1087)
  };
  %1088(%var_4021) /* ty=(Tensor[(11, 14, 15), float64], Tensor[(336), int32]) */
}

def @func_7069() -> (Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(7, 5, 9), uint16]) {
  @func_7067() /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(?, 5, 9), uint64], Tensor[(7, 5, 9), uint16]) */
}

def @func_9919(%var_9917: float64, %var_9918: Tensor[(1176), float64]) -> (Tensor[(?, 5, 9), uint64], Tensor[(6, 14, 14), float64], float64, Tensor[(1176), float64]) {
  @func_9915(%var_9917, %var_9918) /* ty=(Tensor[(?, 5, 9), uint64], Tensor[(6, 14, 14), float64], float64, Tensor[(1176), float64]) */
}

def @func_509(%var_507: Tensor[(3, 2, 8), float64], %var_508: Tensor[(3, 2, 8), float64]) -> (Tensor[(3, 2, 8), float64],) {
  %1094 = fn (%var_501: Tensor[(3, 2, 8), float64], %var_502: Tensor[(3, 2, 8), float64]) -> (Tensor[(3, 2, 8), float64],) {
    %1089 = cast(%var_502, dtype="float64") /* ty=Tensor[(3, 2, 8), float64] */;
    %1090 = shape_of(%var_501, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1091 = cast(%var_501, dtype="float64") /* ty=Tensor[(3, 2, 8), float64] */;
    %1092 = dyn.reshape(%1089, %1090, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1093 = mod(%1091, %1092) /* ty=Tensor[(3, 2, 8), float64] */;
    (%1093,)
  };
  %1094(%var_507, %var_508) /* ty=(Tensor[(3, 2, 8), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen617/build/output.py", line 3842, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:40:27] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

