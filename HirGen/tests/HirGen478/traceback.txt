==========mod==========
#[version = "0.0.5"]
def @func_5043() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %0 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %1 = %0.0;
  %2 = @func_3704() /* ty=Tensor[(4, 3, 11), float64] */;
  (%1, %2)
}

def @func_3049() -> Tensor[(13, 1, 11), float32] {
  %3 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %3.4
}

def @func_3239(%var_3198: Tensor[(8, 42), int32], %var_3210: int64) -> (Tensor[(4, 3, 11), float64], Tensor[(14, 8, 3), bool], Tensor[(8, 42), int32], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) {
  %4 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %5 = cast(%var_3198, dtype="int32") /* ty=Tensor[(8, 42), int32] */;
  %6 = reshape(%5, newshape=[14, 8, 3]) /* ty=Tensor[(14, 8, 3), int32] */;
  %7 = @func_2897(%6) /* ty=(Tensor[(14, 8, 3), bool], Tensor[(1, 352), uint32], Tensor[(154), float32], Tensor[(110, 9), float32], Tensor[(2, 120), float32]) */;
  %8 = cast(%var_3210, dtype="int64") /* ty=int64 */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(70), int64] */, dtype="int64") /* ty=Tensor[(70), int64] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %12 = reshape(%8, newshape=[]) /* ty=int64 */;
  %13 = reshape(%9, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
  %14 = reshape(%10, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %15 = reshape(%11, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %16 = @func_2388(%12, %13, %14, %15) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
  %17 = %4.0;
  %18 = %7.0;
  %19 = %16.0;
  (%17, %18, %var_3198, %19, %var_3210, meta[relay.Constant][0] /* ty=Tensor[(70), int64] */, meta[relay.Constant][1] /* ty=Tensor[(770), float32] */, meta[relay.Constant][2] /* ty=Tensor[(143), float32] */)
}

def @func_8536(%var_8529: uint16, %var_8530: Tensor[(2, 1, 3), uint16]) -> (Tensor[(2, 1, 3), uint16],) {
  %20 = cast(%var_8529, dtype="uint16") /* ty=uint16 */;
  %21 = cast(%var_8530, dtype="uint16") /* ty=Tensor[(2, 1, 3), uint16] */;
  %22 = logical_xor(%20, %21) /* ty=Tensor[(2, 1, 3), uint16] */;
  (%22,)
}

def @func_6471(%var_6467: Tensor[(165), int8]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(770), float32], Tensor[(4, 3, 11), float64], Tensor[(165), int8]) {
  %23 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %24 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %25 = cast(%var_6467, dtype="int8") /* ty=Tensor[(165), int8] */;
  %26 = reshape(%25, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), int8] */;
  %27 = @func_4711(%26) /* ty=(Tensor[(15, 15, 11), bool], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %28 = %23.0;
  %29 = @func_3704() /* ty=Tensor[(4, 3, 11), float64] */;
  %30 = %24.3;
  %31 = %27.2;
  (%28, %29, %30, %31, %var_6467)
}

def @func_687(%var_679: Tensor[(13, 1, 11), float32]) -> (Tensor[(13, 1, 11), float32],) {
  %32 = cast(%var_679, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
  %33 = asin(%32) /* ty=Tensor[(13, 1, 11), float32] */;
  (%33,)
}

def @func_2320(%var_2307: Tensor[(9, 14, 10), int8], %var_2308: Tensor[(9, 14, 10), int8], %var_2317: float32, %var_2318: Tensor[(240), float32]) -> (Tensor[(9, 14, 10), int8], Tensor[(15, 16, 1), float32], float32, Tensor[(240), float32]) {
  %34 = cast(%var_2308, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
  %35 = shape_of(%var_2307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%var_2307, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %38 = cast(%var_2317, dtype="float32") /* ty=float32 */;
  %39 = cast(%var_2318, dtype="float32") /* ty=Tensor[(240), float32] */;
  %40 = reshape(%38, newshape=[]) /* ty=float32 */;
  %41 = reshape(%39, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
  %42 = @func_192(%40, %41) /* ty=(Tensor[(15, 16, 1), float32],) */;
  %43 = multiply(%36, %37) /* ty=Tensor[(9, 14, 10), int8] */;
  %44 = %42.0;
  (%43, %44, %var_2317, %var_2318)
}

def @func_3646() -> (Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) {
  %45 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %46 = %45.0;
  %47 = cast(%46, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %48 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  %50 = exp(%49) /* ty=Tensor[(14, 5, 5), float64] */;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  %52 = log(%47) /* ty=Tensor[(4, 3, 11), float64] */;
  %53 = %48.1;
  %54 = erf(%51) /* ty=Tensor[(14, 5, 5), float64] */;
  (%52, %53, %54)
}

def @func_4336() -> (Tensor[(4, 3, 11), float64],) {
  %55 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  (%55,)
}

def @func_3854() -> Tensor[(3, 15, 13), float32] {
  %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 13), float64] */;
  %57 = exp(%56) /* ty=Tensor[(3, 15, 13), float64] */;
  %58 = cast(%57, dtype="bool") /* ty=Tensor[(3, 15, 13), bool] */;
  %59 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(3, 15, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 15, 13), float64] */, dtype="bool") /* ty=Tensor[(3, 15, 13), bool] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %62 = greater_equal(%60, %61) /* ty=Tensor[(3, 15, 13), bool] */;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(3, 15, 13), float32] */;
  tan(%63) /* ty=Tensor[(3, 15, 13), float32] */
}

def @func_6657() -> (Tensor[(4, 8, 3), float32],) {
  %64 = @func_5064() /* ty=Tensor[(4, 8, 3), float32] */;
  (%64,)
}

def @func_3001(%var_2971: Tensor[(9, 7, 14), uint32], %var_2991: Tensor[(121), float64]) -> (Tensor[(9, 7, 14), uint32], Tensor[(240), float32], Tensor[(121), float64], int64, Tensor[(360), float32], Tensor[(64), uint64], Tensor[(240), float32]) {
  %65 = cast(%var_2971, dtype="uint32") /* ty=Tensor[(9, 7, 14), uint32] */;
  %66 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(9, 7, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 7, 14), uint32] */, dtype="uint32") /* ty=Tensor[(9, 7, 14), uint32] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %69 = cast(%var_2991, dtype="float64") /* ty=Tensor[(121), float64] */;
  %70 = cast(9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %71 = cast(meta[relay.Constant][6] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %72 = cast(meta[relay.Constant][7] /* ty=Tensor[(64), uint64] */, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %73 = cast(meta[relay.Constant][8] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %74 = reshape(%69, newshape=[11, 11]) /* ty=Tensor[(11, 11), float64] */;
  %75 = reshape(%70, newshape=[]) /* ty=int64 */;
  %76 = reshape(%71, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %77 = reshape(%72, newshape=[64]) /* ty=Tensor[(64), uint64] */;
  %78 = reshape(%73, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %79 = @func_2480(%74, %75, %76, %77, %78) /* ty=(Tensor[(11, 11), float64], Tensor[(143), float32], int64, Tensor[(70), int64], Tensor[(385, 2), float32], Tensor[(143), float32], float32, Tensor[(360), float32], Tensor[(240), float32], Tensor[(64), uint64], Tensor[(240), float32], Tensor[(990), float32], Tensor[(11, 15, 6), uint8]) */;
  %80 = logical_xor(%67, %68) /* ty=Tensor[(9, 7, 14), uint32] */;
  %81 = %79.10;
  (%80, %81, %var_2991, 9 /* ty=int64 */, meta[relay.Constant][6] /* ty=Tensor[(360), float32] */, meta[relay.Constant][7] /* ty=Tensor[(64), uint64] */, meta[relay.Constant][8] /* ty=Tensor[(240), float32] */)
}

def @func_7282() -> (Tensor[(4, 3, 11), float64],) {
  %82 = @func_6206() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(7, 4, 6), float64]) */;
  %83 = %82.0;
  (%83,)
}

def @func_7451() -> Tensor[(4, 3, 11), float64] {
  @func_4255() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_2191(%var_2177: Tensor[(11, 7, 2), float32], %var_2188: Tensor[(990), float32], %var_2189: Tensor[(240, 1), float32]) -> (Tensor[(11, 7, 2), float32], Tensor[(11, 7, 2), bool], float32, Tensor[(1, 352), uint32], Tensor[(990), float32], Tensor[(240, 1), float32]) {
  %84 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
  %85 = cast(%var_2177, dtype="bool") /* ty=Tensor[(11, 7, 2), bool] */;
  %86 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(11, 7, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 7, 2), float32] */, dtype="bool") /* ty=Tensor[(11, 7, 2), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %89 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 352), uint32] */, dtype="uint32") /* ty=Tensor[(1, 352), uint32] */;
  %90 = cast(%var_2188, dtype="float32") /* ty=Tensor[(990), float32] */;
  %91 = cast(%var_2189, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %92 = reshape(%89, newshape=[16, 11, 2]) /* ty=Tensor[(16, 11, 2), uint32] */;
  %93 = reshape(%90, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %94 = reshape(%91, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %95 = @func_646(%92, %93, %94) /* ty=(Tensor[(16, 11, 2), float64], Tensor[(16, 11, 2), uint16], Tensor[(24, 10), float32], Tensor[(990), float32], float32, Tensor[(240), float32], Tensor[(15, 16, 1), float32], float32) */;
  %96 = cos(%84) /* ty=Tensor[(11, 7, 2), float32] */;
  %97 = logical_and(%87, %88) /* ty=Tensor[(11, 7, 2), bool] */;
  %98 = %95.4;
  (%96, %97, %98, meta[relay.Constant][10] /* ty=Tensor[(1, 352), uint32] */, %var_2188, %var_2189)
}

def @func_4819() -> Tensor[(3, 15, 13), float32] {
  @func_3854() /* ty=Tensor[(3, 15, 13), float32] */
}

def @func_7674() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %99 = @func_5642() /* ty=(Tensor[(3, 15, 13), float32], Tensor[(4, 3, 11), float64]) */;
  %100 = %99.1;
  %101 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  (%100, %101)
}

def @func_7602() -> Tensor[(4, 3, 11), float64] {
  %102 = @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */;
  %102.0
}

def @func_9536() -> Tensor[(13, 1, 11), float32] {
  @func_8083() /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_5161() -> (Tensor[(4, 8, 3), float32],) {
  %103 = @func_5064() /* ty=Tensor[(4, 8, 3), float32] */;
  (%103,)
}

def @func_9589() -> (float32,) {
  %104 = @func_8413() /* ty=float32 */;
  (%104,)
}

def @func_7896() -> (Tensor[(6, 3, 6), float64], Tensor[(4, 3, 11), float32]) {
  %105 = @func_3889() /* ty=Tensor[(6, 3, 6), float32] */;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %107 = sqrt(%106) /* ty=Tensor[(6, 3, 6), float64] */;
  %108 = @func_7866() /* ty=Tensor[(4, 3, 11), float32] */;
  (%107, %108)
}

def @func_3816(%var_3805: Tensor[(70), int64], %var_3806: Tensor[(7, 110), float32], %var_3807: Tensor[(143), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), float32], int64, Tensor[(70), int64], Tensor[(7, 110), float32], Tensor[(143), float32]) {
  %109 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %110 = cast(%var_3805, dtype="int64") /* ty=Tensor[(70), int64] */;
  %111 = cast(%var_3806, dtype="float32") /* ty=Tensor[(7, 110), float32] */;
  %112 = cast(%var_3807, dtype="float32") /* ty=Tensor[(143), float32] */;
  %113 = reshape(%109, newshape=[]) /* ty=int64 */;
  %114 = reshape(%110, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
  %115 = reshape(%111, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %116 = reshape(%112, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %117 = @func_2388(%113, %114, %115, %116) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
  %118 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
  %119 = %117.1;
  (%118, %119, 7 /* ty=int64 */, %var_3805, %var_3806, %var_3807)
}

def @func_2241(%var_2217: Tensor[(5, 8, 9), float32], %var_2222: float32, %var_2223: Tensor[(143), float32]) -> (Tensor[(5, 8, 9), float32], Tensor[(240), float32], float32, Tensor[(143), float32], Tensor[(770), float32]) {
  %120 = cast(%var_2217, dtype="float32") /* ty=Tensor[(5, 8, 9), float32] */;
  %121 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(5, 8, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 8, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 9), float32] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %124 = cast(%var_2222, dtype="float32") /* ty=float32 */;
  %125 = cast(%var_2223, dtype="float32") /* ty=Tensor[(143), float32] */;
  %126 = cast(meta[relay.Constant][12] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %127 = reshape(%124, newshape=[]) /* ty=float32 */;
  %128 = reshape(%125, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %129 = reshape(%126, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %130 = @func_1526(%127, %128, %129) /* ty=(Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) */;
  %131 = multiply(%122, %123) /* ty=Tensor[(5, 8, 9), float32] */;
  %132 = %130.4;
  (%131, %132, %var_2222, %var_2223, meta[relay.Constant][12] /* ty=Tensor[(770), float32] */)
}

def @func_1526(%var_1452: float32, %var_1488: Tensor[(143), float32], %var_1492: Tensor[(770), float32]) -> (Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) {
  %133 = cast(%var_1452, dtype="float32") /* ty=float32 */;
  %134 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
  %135 = cast(%var_1452, dtype="int64") /* ty=int64 */;
  %136 = cast(meta[relay.Constant][14] /* ty=Tensor[(56, 1), int64] */, dtype="int64") /* ty=Tensor[(56, 1), int64] */;
  %137 = cast(meta[relay.Constant][15] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %138 = cast(meta[relay.Constant][16] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %139 = reshape(%135, newshape=[]) /* ty=int64 */;
  %140 = reshape(%136, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), int64] */;
  %141 = reshape(%137, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %142 = reshape(%138, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %143 = @func_1414(%139, %140, %141, %142) /* ty=(Tensor[(4, 1, 14), bool], Tensor[(11, 15, 6), uint8], Tensor[(990), float32], Tensor[(240), float32]) */;
  %144 = cast(%var_1452, dtype="float32") /* ty=float32 */;
  %145 = %143.3;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(240), float32] */;
  %147 = reshape(%144, newshape=[]) /* ty=float32 */;
  %148 = reshape(%146, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
  %149 = @func_192(%147, %148) /* ty=(Tensor[(15, 16, 1), float32],) */;
  %150 = cast(%var_1488, dtype="float32") /* ty=Tensor[(143), float32] */;
  %151 = reshape(%150, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %152 = @func_687(%151) /* ty=(Tensor[(13, 1, 11), float32],) */;
  %153 = cast(%var_1492, dtype="float32") /* ty=Tensor[(770), float32] */;
  %154 = %152.0;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
  %156 = reshape(%153, newshape=[14, 5, 11]) /* ty=Tensor[(14, 5, 11), float32] */;
  %157 = reshape(%155, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %158 = @func_896(%156, %157) /* ty=(Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) */;
  %159 = cast(%var_1492, dtype="float32") /* ty=Tensor[(770), float32] */;
  %160 = cast(%var_1488, dtype="float32") /* ty=Tensor[(143), float32] */;
  %161 = reshape(%159, newshape=[14, 5, 11]) /* ty=Tensor[(14, 5, 11), float32] */;
  %162 = reshape(%160, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %163 = @func_896(%161, %162) /* ty=(Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) */;
  %164 = %163.1;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
  %166 = floor_mod(%133, %134) /* ty=Tensor[(1, 1, 16), float32] */;
  %167 = %149.0;
  %168 = %158.0;
  %169 = asinh(%165) /* ty=Tensor[(13, 1, 11), float32] */;
  (%166, %145, meta[relay.Constant][14] /* ty=Tensor[(56, 1), int64] */, meta[relay.Constant][15] /* ty=Tensor[(990), float32] */, meta[relay.Constant][16] /* ty=Tensor[(240), float32] */, %167, %154, %var_1488, %168, %var_1492, %169)
}

def @func_5555() -> Tensor[(4, 3, 11), float64] {
  %170 = @func_4788() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %170.1
}

def @func_6018() -> (Tensor[(4, 8, 3), uint64],) {
  %171 = @func_5161() /* ty=(Tensor[(4, 8, 3), float32],) */;
  %172 = %171.0;
  %173 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 8, 3), float32] */, dtype="uint64") /* ty=Tensor[(4, 8, 3), uint64] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="uint64") /* ty=Tensor[(4, 8, 3), uint64] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %177 = left_shift(%175, %176) /* ty=Tensor[(4, 8, 3), uint64] */;
  (%177,)
}

def @func_7949() -> Tensor[(4, 3, 11), float64] {
  %178 = @func_7282() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %179 = %178.0;
  %180 = @func_6690() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) */;
  %181 = %180.0;
  %182 = cast(%181, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %183 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%179, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%184, %185) /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_192(%var_162: float32, %var_163: Tensor[(15, 16, 1), float32]) -> (Tensor[(15, 16, 1), float32],) {
  %186 = cast(%var_162, dtype="float32") /* ty=float32 */;
  %187 = cast(%var_163, dtype="float32") /* ty=Tensor[(15, 16, 1), float32] */;
  %188 = floor_mod(%186, %187) /* ty=Tensor[(15, 16, 1), float32] */;
  (%188,)
}

def @func_6494() -> Tensor[(3, 15, 13), float32] {
  %189 = @func_6419() /* ty=(Tensor[(3, 15, 13), float32],) */;
  %189.0
}

def @func_7866() -> Tensor[(4, 3, 11), float32] {
  %190 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %191 = %190.0;
  %192 = cast(%191, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  atanh(%192) /* ty=Tensor[(4, 3, 11), float32] */
}

def @func_7498(%var_7485: Tensor[(770), float32], %var_7489: Tensor[(143), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(770), float32], Tensor[(143), uint64], Tensor[(4, 3, 11), float64]) {
  %193 = @func_5084() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %194 = cast(%var_7485, dtype="float32") /* ty=Tensor[(770), float32] */;
  %195 = reshape(%194, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %196 = @func_6957(%195) /* ty=(Tensor[(4, 8, 3), uint8], Tensor[(13, 1, 11), float32], Tensor[(143), float32], float32, Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float64], Tensor[(4, 8, 3), float32], Tensor[(4, 3, 11), float64], Tensor[(135), float32]) */;
  %197 = %196.2;
  %198 = cast(%var_7489, dtype="uint64") /* ty=Tensor[(143), uint64] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(1), int32] */;
  %200 = cast(%197, dtype="uint64") /* ty=Tensor[(143), uint64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %202 = %193.0;
  %203 = logical_xor(%200, %201) /* ty=Tensor[(143), uint64] */;
  %204 = @func_3179() /* ty=Tensor[(4, 3, 11), float64] */;
  (%202, %var_7485, %203, %204)
}

def @func_3696(%var_3682: Tensor[(4, 3, 11), float64]) -> (Tensor[(4, 3, 11), uint32],) {
  %205 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
  %206 = cast(%var_3682, dtype="bool") /* ty=Tensor[(4, 3, 11), bool] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%205, dtype="bool") /* ty=Tensor[(4, 3, 11), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %210 = not_equal(%208, %209) /* ty=Tensor[(4, 3, 11), bool] */;
  %211 = cast(%205, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %215 = bitwise_xor(%213, %214) /* ty=Tensor[(4, 3, 11), uint32] */;
  (%215,)
}

def @func_3785(%var_3777: Tensor[(13, 4, 11), float32]) -> Tensor[(13, 4, 11), uint64] {
  %216 = @func_3049() /* ty=Tensor[(13, 1, 11), float32] */;
  %217 = cast(%216, dtype="uint64") /* ty=Tensor[(13, 1, 11), uint64] */;
  %218 = cast(%var_3777, dtype="uint64") /* ty=Tensor[(13, 4, 11), uint64] */;
  maximum(%217, %218) /* ty=Tensor[(13, 4, 11), uint64] */
}

def @func_5175(%var_5170: Tensor[(9, 10, 1), float64]) -> (Tensor[(9, 10, 1), float64],) {
  %219 = cast(%var_5170, dtype="float64") /* ty=Tensor[(9, 10, 1), float64] */;
  %220 = log(%219) /* ty=Tensor[(9, 10, 1), float64] */;
  (%220,)
}

def @func_8014() -> (Tensor[(3, 15, 13), int8], Tensor[(154), float32], Tensor[(4, 84), int32]) {
  %221 = @func_5642() /* ty=(Tensor[(3, 15, 13), float32], Tensor[(4, 3, 11), float64]) */;
  %222 = %221.0;
  %223 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 15, 13), float32] */, dtype="int8") /* ty=Tensor[(3, 15, 13), int8] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="int8") /* ty=Tensor[(3, 15, 13), int8] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %227 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 84), int32] */, dtype="int32") /* ty=Tensor[(4, 84), int32] */;
  %228 = reshape(%227, newshape=[14, 8, 3]) /* ty=Tensor[(14, 8, 3), int32] */;
  %229 = @func_2897(%228) /* ty=(Tensor[(14, 8, 3), bool], Tensor[(1, 352), uint32], Tensor[(154), float32], Tensor[(110, 9), float32], Tensor[(2, 120), float32]) */;
  %230 = add(%225, %226) /* ty=Tensor[(3, 15, 13), int8] */;
  %231 = %229.2;
  (%230, %231, meta[relay.Constant][19] /* ty=Tensor[(4, 84), int32] */)
}

def @func_8343() -> Tensor[(4, 3, 11), float64] {
  %232 = @func_4336() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %232.0
}

def @func_1414(%var_1389: int64, %var_1390: Tensor[(4, 1, 14), int64], %var_1397: Tensor[(990), float32], %var_1398: Tensor[(240), float32]) -> (Tensor[(4, 1, 14), bool], Tensor[(11, 15, 6), uint8], Tensor[(990), float32], Tensor[(240), float32]) {
  %233 = cast(%var_1389, dtype="bool") /* ty=bool */;
  %234 = cast(%var_1390, dtype="bool") /* ty=Tensor[(4, 1, 14), bool] */;
  %235 = cast(%var_1397, dtype="float32") /* ty=Tensor[(990), float32] */;
  %236 = cast(%var_1389, dtype="float32") /* ty=float32 */;
  %237 = cast(%var_1398, dtype="float32") /* ty=Tensor[(240), float32] */;
  %238 = reshape(%235, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float32] */;
  %239 = reshape(%236, newshape=[]) /* ty=float32 */;
  %240 = reshape(%237, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %241 = @func_441(%238, %239, %240) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */;
  %242 = not_equal(%233, %234) /* ty=Tensor[(4, 1, 14), bool] */;
  %243 = %241.0;
  (%242, %243, %var_1397, %var_1398)
}

def @func_7385() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 8, 3), float32]) {
  %244 = @func_5811() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %245 = @func_6657() /* ty=(Tensor[(4, 8, 3), float32],) */;
  %246 = %244.1;
  %247 = %245.0;
  (%246, %247)
}

def @func_1984(%var_1978: Tensor[(5, 6, 13), float32]) -> (Tensor[(5, 6, 13), float32],) {
  %248 = cast(%var_1978, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
  %249 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 6, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %252 = divide(%250, %251) /* ty=Tensor[(5, 6, 13), float32] */;
  (%252,)
}

def @func_896(%var_834: Tensor[(14, 5, 11), float32], %var_846: Tensor[(143), float32]) -> (Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) {
  %253 = cast(%var_834, dtype="float32") /* ty=Tensor[(14, 5, 11), float32] */;
  %254 = cast(%var_846, dtype="float32") /* ty=Tensor[(143), float32] */;
  %255 = reshape(%254, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %256 = @func_687(%255) /* ty=(Tensor[(13, 1, 11), float32],) */;
  %257 = cast(%var_846, dtype="float32") /* ty=Tensor[(143), float32] */;
  %258 = reshape(%257, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %259 = @func_687(%258) /* ty=(Tensor[(13, 1, 11), float32],) */;
  %260 = %259.0;
  %261 = cast(%var_846, dtype="float32") /* ty=Tensor[(143), float32] */;
  %262 = reshape(%261, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %263 = @func_687(%262) /* ty=(Tensor[(13, 1, 11), float32],) */;
  %264 = %263.0;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(13, 1, 11), float64] */;
  %266 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%260, dtype="float64") /* ty=Tensor[(13, 1, 11), float64] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %269 = cosh(%253) /* ty=Tensor[(14, 5, 11), float32] */;
  %270 = %256.0;
  %271 = floor_mod(%267, %268) /* ty=Tensor[(13, ?, 11), float64] */;
  (%269, %270, %var_846, %271)
}

def @func_2388(%var_2348: int64, %var_2349: Tensor[(5, 14, 1), int64], %var_2375: Tensor[(770), float32], %var_2376: Tensor[(143), float32]) -> (Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) {
  %272 = cast(%var_2348, dtype="int64") /* ty=int64 */;
  %273 = cast(%var_2349, dtype="int64") /* ty=Tensor[(5, 14, 1), int64] */;
  %274 = cast(%var_2349, dtype="float32") /* ty=Tensor[(5, 14, 1), float32] */;
  %275 = acos(%274) /* ty=Tensor[(5, 14, 1), float32] */;
  %276 = cast(%275, dtype="float32") /* ty=Tensor[(5, 14, 1), float32] */;
  %277 = cast(%var_2375, dtype="float32") /* ty=Tensor[(770), float32] */;
  %278 = cast(%var_2376, dtype="float32") /* ty=Tensor[(143), float32] */;
  %279 = reshape(%277, newshape=[14, 5, 11]) /* ty=Tensor[(14, 5, 11), float32] */;
  %280 = reshape(%278, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %281 = @func_896(%279, %280) /* ty=(Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) */;
  %282 = bitwise_and(%272, %273) /* ty=Tensor[(5, 14, 1), int64] */;
  %283 = log(%276) /* ty=Tensor[(5, 14, 1), float32] */;
  %284 = %281.1;
  (%282, %283, %284, %var_2375, %var_2376)
}

def @func_8368(%var_8362: Tensor[(1, 15, 13), float64]) -> Tensor[(1, 15, 13), float64] {
  %285 = cast(%var_8362, dtype="float64") /* ty=Tensor[(1, 15, 13), float64] */;
  acosh(%285) /* ty=Tensor[(1, 15, 13), float64] */
}

def @func_9074(%var_9044: Tensor[(154), float32]) -> (Tensor[(154), int32], Tensor[(4, 8, 3), uint64], Tensor[(4, 3, 11), uint32], Tensor[(132), float64]) {
  %286 = @func_8020() /* ty=Tensor[(154), float32] */;
  %287 = cast(%var_9044, dtype="int32") /* ty=Tensor[(154), int32] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(1), int32] */;
  %289 = cast(%286, dtype="int32") /* ty=Tensor[(154), int32] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?), int32] */;
  %291 = @func_6018() /* ty=(Tensor[(4, 8, 3), uint64],) */;
  %292 = cast(meta[relay.Constant][21] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %293 = reshape(%292, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), float64] */;
  %294 = @func_3696(%293) /* ty=(Tensor[(4, 3, 11), uint32],) */;
  %295 = bitwise_and(%289, %290) /* ty=Tensor[(154), int32] */;
  %296 = %291.0;
  %297 = %294.0;
  (%295, %296, %297, meta[relay.Constant][21] /* ty=Tensor[(132), float64] */)
}

def @func_8986() -> (Tensor[(4, 8, 3), uint64], Tensor[(3, 15, 13), float32]) {
  %298 = @func_6018() /* ty=(Tensor[(4, 8, 3), uint64],) */;
  %299 = @func_6419() /* ty=(Tensor[(3, 15, 13), float32],) */;
  %300 = %298.0;
  %301 = %299.0;
  (%300, %301)
}

def @func_4711(%var_4690: Tensor[(1, 15, 11), int8]) -> (Tensor[(15, 15, 11), bool], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %302 = cast(%var_4690, dtype="bool") /* ty=Tensor[(1, 15, 11), bool] */;
  %303 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 15, 11), int8] */, dtype="bool") /* ty=Tensor[(15, 15, 11), bool] */;
  %304 = equal(%302, %303) /* ty=Tensor[(15, 15, 11), bool] */;
  %305 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  %306 = @func_3068() /* ty=Tensor[(4, 3, 11), float64] */;
  (%304, %305, %306)
}

def @func_9216() -> (Tensor[(13, 1, 11), float32],) {
  %307 = @func_8083() /* ty=Tensor[(13, 1, 11), float32] */;
  (%307,)
}

def @func_7593(%var_7571: Tensor[(15, 9, 9), int8], %var_7579: Tensor[(90), float64], %var_7581: Tensor[(770), float32]) -> (Tensor[(15, 9, 9), bool], Tensor[(105), uint32], Tensor[(90), float64], Tensor[(105), uint32], Tensor[(770), float32]) {
  %308 = cast(%var_7571, dtype="bool") /* ty=Tensor[(15, 9, 9), bool] */;
  %309 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(15, 9, 9), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 9, 9), int8] */, dtype="bool") /* ty=Tensor[(15, 9, 9), bool] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %312 = cast(%var_7579, dtype="float64") /* ty=Tensor[(90), float64] */;
  %313 = cast(meta[relay.Constant][24] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %314 = cast(%var_7581, dtype="float32") /* ty=Tensor[(770), float32] */;
  %315 = reshape(%312, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %316 = reshape(%313, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %317 = reshape(%314, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %318 = @func_5284(%315, %316, %317) /* ty=(Tensor[(4, 3, 11), float32], Tensor[(4, 3, 11), float32], Tensor[(9, 10, 1), float64], Tensor[(90), float64], Tensor[(770), float32], Tensor[(105), uint32], Tensor[(770), float32], Tensor[(143), float32]) */;
  %319 = less_equal(%310, %311) /* ty=Tensor[(15, 9, 9), bool] */;
  %320 = %318.5;
  (%319, %320, %var_7579, meta[relay.Constant][24] /* ty=Tensor[(105), uint32] */, %var_7581)
}

def @func_8517(%var_8498: Tensor[(352), uint32]) -> (Tensor[(7, 4, 6), float64], Tensor[(2, 176), uint32], Tensor[(352), uint32]) {
  %321 = @func_6206() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(7, 4, 6), float64]) */;
  %322 = cast(%var_8498, dtype="uint32") /* ty=Tensor[(352), uint32] */;
  %323 = reshape(%322, newshape=[2, 176]) /* ty=Tensor[(2, 176), uint32] */;
  %324 = @func_2804(%323) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(240), float32], Tensor[(2, 176), uint32], Tensor[(990), float32], Tensor[(240), float32]) */;
  %325 = %321.1;
  %326 = %324.2;
  (%325, %326, %var_8498)
}

def @func_9647(%var_9642: Tensor[(4, 3, 12), uint16]) -> Tensor[(4, 3, 12), uint16] {
  %327 = cast(%var_9642, dtype="uint16") /* ty=Tensor[(4, 3, 12), uint16] */;
  %328 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(4, 3, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 3, 12), uint16] */, dtype="uint16") /* ty=Tensor[(4, 3, 12), uint16] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%329, %330) /* ty=Tensor[(4, 3, 12), uint16] */
}

def @func_4165(%var_4090: float32, %var_4116: Tensor[(352), uint32], %var_4117: Tensor[(330, 3), float32]) -> (Tensor[(4, 3, 11), float64], float32, Tensor[(240), float32], Tensor[(4, 3, 11), float64], float32, Tensor[(352), uint32], Tensor[(330, 3), float32], Tensor[(3, 15, 13), float32], Tensor[(15, 16, 1260), float32]) {
  %331 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %332 = cast(%var_4116, dtype="uint32") /* ty=Tensor[(352), uint32] */;
  %333 = cast(%var_4117, dtype="float32") /* ty=Tensor[(330, 3), float32] */;
  %334 = cast(meta[relay.Constant][27] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %335 = cast(meta[relay.Constant][27] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %336 = cast(%var_4090, dtype="float32") /* ty=float32 */;
  %337 = cast(meta[relay.Constant][26] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %338 = reshape(%334, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %339 = reshape(%335, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %340 = reshape(%336, newshape=[]) /* ty=float32 */;
  %341 = reshape(%337, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %342 = @func_2320(%338, %339, %340, %341) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(15, 16, 1), float32], float32, Tensor[(240), float32]) */;
  %343 = %342.1;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(15, 16, 1), float32] */;
  %345 = reshape(%332, newshape=[16, 11, 2]) /* ty=Tensor[(16, 11, 2), uint32] */;
  %346 = reshape(%333, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %347 = reshape(%344, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %348 = @func_646(%345, %346, %347) /* ty=(Tensor[(16, 11, 2), float64], Tensor[(16, 11, 2), uint16], Tensor[(24, 10), float32], Tensor[(990), float32], float32, Tensor[(240), float32], Tensor[(15, 16, 1), float32], float32) */;
  %349 = cast(meta[relay.Constant][27] /* ty=Tensor[(1260), int8] */, dtype="uint64") /* ty=Tensor[(1260), uint64] */;
  %350 = cast(%343, dtype="uint64") /* ty=Tensor[(15, 16, 1), uint64] */;
  %351 = minimum(%349, %350) /* ty=Tensor[(15, 16, 1260), uint64] */;
  %352 = cast(%351, dtype="bool") /* ty=Tensor[(15, 16, 1260), bool] */;
  %353 = cast(meta[relay.Constant][27] /* ty=Tensor[(1260), int8] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %354 = greater(%352, %353) /* ty=Tensor[(15, 16, 1260), bool] */;
  %355 = cast(%351, dtype="int32") /* ty=Tensor[(15, 16, 1260), int32] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="int32") /* ty=Tensor[(15, 16, 1260), int32] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %359 = logical_xor(%357, %358) /* ty=Tensor[(15, 16, 1260), int32] */;
  %360 = cast(%359, dtype="float32") /* ty=Tensor[(15, 16, 1260), float32] */;
  %361 = %331.0;
  %362 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  %363 = %348.7;
  %364 = @func_3854() /* ty=Tensor[(3, 15, 13), float32] */;
  %365 = erf(%360) /* ty=Tensor[(15, 16, 1260), float32] */;
  (%361, %var_4090, meta[relay.Constant][26] /* ty=Tensor[(240), float32] */, %362, %363, %var_4116, %var_4117, %364, %365)
}

def @func_6124(%var_6090: uint64, %var_6091: Tensor[(1, 64), uint64], %var_6092: Tensor[(240), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(4, 8, 3), float32], Tensor[(9, 10, ?), float32], uint64, Tensor[(15, 15, 11), bool], Tensor[(1, 165), int8], Tensor[(9, 10, 240), bool], Tensor[(?, 64), int16]) {
  %366 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %367 = @func_5043() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %368 = cast(meta[relay.Constant][28] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %369 = reshape(%368, newshape=[9, 10, 1]) /* ty=Tensor[(9, 10, 1), float64] */;
  %370 = @func_5175(%369) /* ty=(Tensor[(9, 10, 1), float64],) */;
  %371 = %370.0;
  %372 = cast(meta[relay.Constant][28] /* ty=Tensor[(90), float64] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="bool") /* ty=Tensor[(9, 10, 1), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = less_equal(%374, %375) /* ty=Tensor[(9, 10, ?), bool] */;
  %377 = cast(%371, dtype="float32") /* ty=Tensor[(9, 10, 1), float32] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%376, dtype="float32") /* ty=Tensor[(9, 10, ?), float32] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %381 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 165), int8] */, dtype="int8") /* ty=Tensor[(1, 165), int8] */;
  %382 = reshape(%381, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), int8] */;
  %383 = @func_4711(%382) /* ty=(Tensor[(15, 15, 11), bool], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %384 = cast(%var_6092, dtype="bool") /* ty=Tensor[(240), bool] */;
  %385 = cast(%371, dtype="bool") /* ty=Tensor[(9, 10, 1), bool] */;
  %386 = cast(%var_6090, dtype="uint64") /* ty=uint64 */;
  %387 = cast(%var_6091, dtype="uint64") /* ty=Tensor[(1, 64), uint64] */;
  %388 = cast(%var_6092, dtype="float32") /* ty=Tensor[(240), float32] */;
  %389 = reshape(%386, newshape=[]) /* ty=uint64 */;
  %390 = reshape(%387, newshape=[1, 16, 4]) /* ty=Tensor[(1, 16, 4), uint64] */;
  %391 = reshape(%388, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %392 = @func_1645(%389, %390, %391) /* ty=(Tensor[(1, 16, 4), uint64], Tensor[(15, 16, 1), float32], Tensor[(240), float32]) */;
  %393 = %392.0;
  %394 = cast(%393, dtype="int16") /* ty=Tensor[(1, 16, 4), int16] */;
  %395 = shape_of(%var_6091, dtype="int32") /* ty=Tensor[(2), int32] */;
  %396 = cast(%var_6091, dtype="int16") /* ty=Tensor[(1, 64), int16] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %398 = %366.0;
  %399 = %367.0;
  %400 = @func_5064() /* ty=Tensor[(4, 8, 3), float32] */;
  %401 = subtract(%379, %380) /* ty=Tensor[(9, 10, ?), float32] */;
  %402 = %383.0;
  %403 = logical_or(%384, %385) /* ty=Tensor[(9, 10, 240), bool] */;
  %404 = right_shift(%396, %397) /* ty=Tensor[(?, 64), int16] */;
  (%398, %399, %400, %401, %var_6090, %402, meta[relay.Constant][29] /* ty=Tensor[(1, 165), int8] */, %403, %404)
}

def @func_5064() -> Tensor[(4, 8, 3), float32] {
  %405 = @func_5058() /* ty=(Tensor[(4, 8, 3), float32],) */;
  %405.0
}

def @func_8083() -> Tensor[(13, 1, 11), float32] {
  @func_3049() /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_5642() -> (Tensor[(3, 15, 13), float32], Tensor[(4, 3, 11), float64]) {
  %406 = @func_3854() /* ty=Tensor[(3, 15, 13), float32] */;
  %407 = @func_3179() /* ty=Tensor[(4, 3, 11), float64] */;
  (%406, %407)
}

def @func_9344() -> Tensor[(286, 2), float64] {
  %408 = @func_7433() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(572), float32], Tensor[(286, 2), float32], Tensor[(990), float32], Tensor[(352), uint32], Tensor[(4, 3, 11), float64]) */;
  %409 = %408.2;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(286, 2), float64] */;
  sqrt(%410) /* ty=Tensor[(286, 2), float64] */
}

def @func_8837(%var_8829: int16, %var_8830: Tensor[(11, 15, 7), int16]) -> Tensor[(11, 15, 7), bool] {
  %411 = cast(%var_8829, dtype="bool") /* ty=bool */;
  %412 = cast(%var_8830, dtype="bool") /* ty=Tensor[(11, 15, 7), bool] */;
  equal(%411, %412) /* ty=Tensor[(11, 15, 7), bool] */
}

def @func_6957(%var_6900: Tensor[(770), float32]) -> (Tensor[(4, 8, 3), uint8], Tensor[(13, 1, 11), float32], Tensor[(143), float32], float32, Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float64], Tensor[(4, 8, 3), float32], Tensor[(4, 3, 11), float64], Tensor[(135), float32]) {
  %413 = @func_5064() /* ty=Tensor[(4, 8, 3), float32] */;
  %414 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 8, 3), float32] */, dtype="uint8") /* ty=Tensor[(4, 8, 3), uint8] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="uint8") /* ty=Tensor[(4, 8, 3), uint8] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %418 = cast(meta[relay.Constant][31] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %419 = reshape(%418, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %420 = @func_687(%419) /* ty=(Tensor[(13, 1, 11), float32],) */;
  %421 = %420.0;
  %422 = cast(%421, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
  %423 = reshape(%422, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %424 = @func_687(%423) /* ty=(Tensor[(13, 1, 11), float32],) */;
  %425 = cast(-9.88026f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %426 = cast(meta[relay.Constant][31] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %427 = cast(%var_6900, dtype="float32") /* ty=Tensor[(770), float32] */;
  %428 = reshape(%425, newshape=[]) /* ty=float32 */;
  %429 = reshape(%426, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %430 = reshape(%427, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %431 = @func_1526(%428, %429, %430) /* ty=(Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) */;
  %432 = %431.7;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(143), float64] */;
  %434 = cast(%413, dtype="float64") /* ty=Tensor[(4, 8, 3), float64] */;
  %435 = sigmoid(%434) /* ty=Tensor[(4, 8, 3), float64] */;
  %436 = cast(%435, dtype="float64") /* ty=Tensor[(4, 8, 3), float64] */;
  %437 = log10(%436) /* ty=Tensor[(4, 8, 3), float64] */;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(4, 8, 3), float32] */;
  %439 = cast(meta[relay.Constant][32] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %440 = reshape(%439, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %441 = @func_4478(%440) /* ty=(Tensor[(15, 9, 9), bool], Tensor[(6, 3, 6), float32], Tensor[(4, 3, 11), float64]) */;
  %442 = minimum(%416, %417) /* ty=Tensor[(4, 8, 3), uint8] */;
  %443 = %424.0;
  %444 = cosh(%433) /* ty=Tensor[(143), float64] */;
  %445 = tan(%438) /* ty=Tensor[(4, 8, 3), float32] */;
  %446 = %441.2;
  (%442, %421, meta[relay.Constant][31] /* ty=Tensor[(143), float32] */, -9.88026f /* ty=float32 */, %var_6900, %443, %444, %445, %446, meta[relay.Constant][32] /* ty=Tensor[(135), float32] */)
}

def @func_5019(%var_4995: Tensor[(70), int64], %var_4996: Tensor[(770), float32], %var_4997: Tensor[(143), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(143), float32], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32], Tensor[(4, 3, 11), float64]) {
  %447 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %448 = cast(%var_4995, dtype="int64") /* ty=Tensor[(70), int64] */;
  %449 = cast(%var_4996, dtype="float32") /* ty=Tensor[(770), float32] */;
  %450 = cast(%var_4997, dtype="float32") /* ty=Tensor[(143), float32] */;
  %451 = reshape(%447, newshape=[]) /* ty=int64 */;
  %452 = reshape(%448, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
  %453 = reshape(%449, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %454 = reshape(%450, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %455 = @func_2388(%451, %452, %453, %454) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
  %456 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  %457 = %455.4;
  %458 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  (%456, %457, -6 /* ty=int64 */, %var_4995, %var_4996, %var_4997, %458)
}

def @func_7519(%var_7508: Tensor[(165), int8]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(165), int8]) {
  %459 = cast(%var_7508, dtype="int8") /* ty=Tensor[(165), int8] */;
  %460 = reshape(%459, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), int8] */;
  %461 = @func_4711(%460) /* ty=(Tensor[(15, 15, 11), bool], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %462 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
  %463 = %461.1;
  (%462, %463, %var_7508)
}

def @func_9723() -> (Tensor[(4, 3, 11), float64],) {
  %464 = @func_7296() /* ty=Tensor[(4, 3, 11), float64] */;
  (%464,)
}

def @func_3068() -> Tensor[(4, 3, 11), float64] {
  %465 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %465.0
}

def @func_7433() -> (Tensor[(4, 3, 11), float64], Tensor[(572), float32], Tensor[(286, 2), float32], Tensor[(990), float32], Tensor[(352), uint32], Tensor[(4, 3, 11), float64]) {
  %466 = @func_5811() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %467 = cast(meta[relay.Constant][33] /* ty=Tensor[(286, 2), float32] */, dtype="float32") /* ty=Tensor[(286, 2), float32] */;
  %468 = reshape(%467, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %469 = @func_4206(%468) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) */;
  %470 = cast(meta[relay.Constant][34] /* ty=Tensor[(352), uint32] */, dtype="uint32") /* ty=Tensor[(352), uint32] */;
  %471 = reshape(%470, newshape=[2, 176]) /* ty=Tensor[(2, 176), uint32] */;
  %472 = @func_2804(%471) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(240), float32], Tensor[(2, 176), uint32], Tensor[(990), float32], Tensor[(240), float32]) */;
  %473 = @func_5811() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %474 = %466.1;
  %475 = %469.2;
  %476 = %472.3;
  %477 = %473.1;
  (%474, %475, meta[relay.Constant][33] /* ty=Tensor[(286, 2), float32] */, %476, meta[relay.Constant][34] /* ty=Tensor[(352), uint32] */, %477)
}

def @func_8058(%var_8054: float32, %var_8055: Tensor[(240), float32]) -> (Tensor[(13, 1, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(15, 16, 1), float32], Tensor[(990), float32], float32, Tensor[(240), float32]) {
  %478 = @func_3049() /* ty=Tensor[(13, 1, 11), float32] */;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(13, 1, 11), float64] */;
  %480 = cast(meta[relay.Constant][35] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %481 = cast(%var_8054, dtype="float32") /* ty=float32 */;
  %482 = cast(%var_8055, dtype="float32") /* ty=Tensor[(240), float32] */;
  %483 = reshape(%480, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float32] */;
  %484 = reshape(%481, newshape=[]) /* ty=float32 */;
  %485 = reshape(%482, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %486 = @func_441(%483, %484, %485) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */;
  %487 = sqrt(%479) /* ty=Tensor[(13, 1, 11), float64] */;
  %488 = @func_7296() /* ty=Tensor[(4, 3, 11), float64] */;
  %489 = %486.1;
  (%487, %488, %489, meta[relay.Constant][35] /* ty=Tensor[(990), float32] */, %var_8054, %var_8055)
}

def @func_8413() -> float32 {
  %490 = @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */;
  %490.1
}

def @func_8638() -> (Tensor[(3, 15, 13), float32], Tensor[(165), int8], Tensor[(165), int8]) {
  %491 = @func_6419() /* ty=(Tensor[(3, 15, 13), float32],) */;
  %492 = %491.0;
  %493 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 15, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 15, 13), float32] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="float32") /* ty=Tensor[(3, 15, 13), float32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %497 = cast(meta[relay.Constant][37] /* ty=Tensor[(165), int8] */, dtype="int8") /* ty=Tensor[(165), int8] */;
  %498 = reshape(%497, newshape=[165]) /* ty=Tensor[(165), int8] */;
  %499 = @func_7519(%498) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(165), int8]) */;
  %500 = floor_divide(%495, %496) /* ty=Tensor[(3, 15, 13), float32] */;
  %501 = %499.2;
  (%500, %501, meta[relay.Constant][37] /* ty=Tensor[(165), int8] */)
}

def @func_3318() -> Tensor[(4, 3, 11), float64] {
  %502 = @func_3179() /* ty=Tensor[(4, 3, 11), float64] */;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  atan(%503) /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_4788() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %504 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %505 = %504.0;
  %506 = @func_4255() /* ty=Tensor[(4, 3, 11), float64] */;
  (%505, %506)
}

def @func_7021() -> (Tensor[(4, 3, 11), float64], Tensor[(3, 15, 13), float64], Tensor[(572), float32]) {
  %507 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %508 = cast(meta[relay.Constant][38] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
  %509 = reshape(%508, newshape=[143, 4]) /* ty=Tensor[(143, 4), float32] */;
  %510 = @func_5327(%509) /* ty=(Tensor[(3, 15, 13), float64], Tensor[(13, 4, 11), uint64], Tensor[(143, 4), float32]) */;
  %511 = %507.0;
  %512 = %510.0;
  (%511, %512, meta[relay.Constant][38] /* ty=Tensor[(572), float32] */)
}

def @func_2804(%var_2800: Tensor[(2, 176), uint32]) -> (Tensor[(4, 3, 11), float64], Tensor[(240), float32], Tensor[(2, 176), uint32], Tensor[(990), float32], Tensor[(240), float32]) {
  %513 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %514 = cast(%var_2800, dtype="uint32") /* ty=Tensor[(2, 176), uint32] */;
  %515 = cast(meta[relay.Constant][39] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %516 = cast(meta[relay.Constant][40] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %517 = reshape(%514, newshape=[16, 11, 2]) /* ty=Tensor[(16, 11, 2), uint32] */;
  %518 = reshape(%515, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %519 = reshape(%516, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %520 = @func_646(%517, %518, %519) /* ty=(Tensor[(16, 11, 2), float64], Tensor[(16, 11, 2), uint16], Tensor[(24, 10), float32], Tensor[(990), float32], float32, Tensor[(240), float32], Tensor[(15, 16, 1), float32], float32) */;
  %521 = %513.0;
  %522 = %520.5;
  (%521, %522, %var_2800, meta[relay.Constant][39] /* ty=Tensor[(990), float32] */, meta[relay.Constant][40] /* ty=Tensor[(240), float32] */)
}

def @func_5736() -> (Tensor[(4, 3, 11), float64],) {
  %523 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  (%523,)
}

def @func_646(%var_600: Tensor[(16, 11, 2), uint32], %var_622: Tensor[(990), float32], %var_624: Tensor[(240), float32]) -> (Tensor[(16, 11, 2), float64], Tensor[(16, 11, 2), uint16], Tensor[(24, 10), float32], Tensor[(990), float32], float32, Tensor[(240), float32], Tensor[(15, 16, 1), float32], float32) {
  %524 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 11, 2), uint32] */, dtype="bool") /* ty=Tensor[(16, 11, 2), bool] */;
  %525 = shape_of(%var_600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%var_600, dtype="bool") /* ty=Tensor[(16, 11, 2), bool] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %528 = equal(%526, %527) /* ty=Tensor[(16, 11, 2), bool] */;
  %529 = cast(%528, dtype="float64") /* ty=Tensor[(16, 11, 2), float64] */;
  %530 = sqrt(%529) /* ty=Tensor[(16, 11, 2), float64] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(16, 11, 2), float64] */;
  %532 = cast(%530, dtype="uint16") /* ty=Tensor[(16, 11, 2), uint16] */;
  %533 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(16, 11, 2), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 11, 2), uint32] */, dtype="uint16") /* ty=Tensor[(16, 11, 2), uint16] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %536 = cast(%var_622, dtype="float32") /* ty=Tensor[(990), float32] */;
  %537 = cast(-1.66469f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %538 = cast(%var_624, dtype="float32") /* ty=Tensor[(240), float32] */;
  %539 = reshape(%536, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float32] */;
  %540 = reshape(%537, newshape=[]) /* ty=float32 */;
  %541 = reshape(%538, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %542 = @func_441(%539, %540, %541) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */;
  %543 = cast(-1.66469f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %544 = %542.3;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %546 = reshape(%543, newshape=[]) /* ty=float32 */;
  %547 = reshape(%545, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
  %548 = @func_192(%546, %547) /* ty=(Tensor[(15, 16, 1), float32],) */;
  %549 = cast(%var_622, dtype="float32") /* ty=Tensor[(990), float32] */;
  %550 = cast(-1.66469f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %551 = %548.0;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(15, 16, 1), float32] */;
  %553 = reshape(%549, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float32] */;
  %554 = reshape(%550, newshape=[]) /* ty=float32 */;
  %555 = reshape(%552, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %556 = @func_441(%553, %554, %555) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */;
  %557 = exp(%531) /* ty=Tensor[(16, 11, 2), float64] */;
  %558 = logical_xor(%534, %535) /* ty=Tensor[(16, 11, 2), uint16] */;
  %559 = %556.2;
  (%557, %558, %544, %var_622, -1.66469f /* ty=float32 */, %var_624, %551, %559)
}

def @main(%var_9769: Tensor[(4, 3, 11), float64]) -> Tensor[(4, 3, 11), uint32] {
  %560 = @func_5043() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %561 = %560.0;
  %562 = cast(%var_9769, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%561, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%564, %565) /* ty=Tensor[(4, 3, 11), uint32] */
}

def @func_3889() -> Tensor[(6, 3, 6), float32] {
  %566 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %567 = rsqrt(%566) /* ty=Tensor[(6, 3, 6), float64] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  atan(%568) /* ty=Tensor[(6, 3, 6), float32] */
}

def @func_9111(%var_9098: Tensor[(143), float32]) -> (Tensor[(143), float32],) {
  %569 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %570 = %569.0;
  %571 = cast(%var_9098, dtype="float32") /* ty=Tensor[(143), float32] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(1), int32] */;
  %573 = cast(%570, dtype="float32") /* ty=Tensor[(143), float32] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?), float32] */;
  %575 = mod(%573, %574) /* ty=Tensor[(143), float32] */;
  (%575,)
}

def @func_4206(%var_4204: Tensor[(572), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) {
  %576 = cast(%var_4204, dtype="float32") /* ty=Tensor[(572), float32] */;
  %577 = reshape(%576, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %578 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  %579 = @func_3785(%577) /* ty=Tensor[(13, 4, 11), uint64] */;
  (%578, %579, %var_4204)
}

def @func_4255() -> Tensor[(4, 3, 11), float64] {
  %580 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %580.0
}

def @func_1645(%var_1627: uint64, %var_1628: Tensor[(1, 16, 4), uint64], %var_1633: Tensor[(240), float32]) -> (Tensor[(1, 16, 4), uint64], Tensor[(15, 16, 1), float32], Tensor[(240), float32]) {
  %581 = cast(%var_1627, dtype="uint64") /* ty=uint64 */;
  %582 = cast(%var_1628, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
  %583 = cast(%var_1627, dtype="float32") /* ty=float32 */;
  %584 = cast(%var_1633, dtype="float32") /* ty=Tensor[(240), float32] */;
  %585 = reshape(%583, newshape=[]) /* ty=float32 */;
  %586 = reshape(%584, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
  %587 = @func_192(%585, %586) /* ty=(Tensor[(15, 16, 1), float32],) */;
  %588 = right_shift(%581, %582) /* ty=Tensor[(1, 16, 4), uint64] */;
  %589 = %587.0;
  (%588, %589, %var_1633)
}

def @func_5932() -> (Tensor[(3, 15, 13), float32],) {
  %590 = @func_3854() /* ty=Tensor[(3, 15, 13), float32] */;
  (%590,)
}

def @func_3983() -> Tensor[(4, 3, 11), float32] {
  %591 = @func_3068() /* ty=Tensor[(4, 3, 11), float64] */;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  tan(%592) /* ty=Tensor[(4, 3, 11), float32] */
}

def @func_3149(%var_3109: Tensor[(16, 4, 3), float64], %var_3113: int64, %var_3125: Tensor[(16, 4, 3), float64]) -> (Tensor[(990), float32], int64, Tensor[(56), int64], Tensor[(240), float32], Tensor[(16, 4, 3), uint16], Tensor[(990), float64]) {
  %593 = cast(%var_3113, dtype="int64") /* ty=int64 */;
  %594 = cast(meta[relay.Constant][43] /* ty=Tensor[(56), int64] */, dtype="int64") /* ty=Tensor[(56), int64] */;
  %595 = cast(meta[relay.Constant][44] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %596 = cast(meta[relay.Constant][45] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %597 = reshape(%593, newshape=[]) /* ty=int64 */;
  %598 = reshape(%594, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), int64] */;
  %599 = reshape(%595, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %600 = reshape(%596, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %601 = @func_1414(%597, %598, %599, %600) /* ty=(Tensor[(4, 1, 14), bool], Tensor[(11, 15, 6), uint8], Tensor[(990), float32], Tensor[(240), float32]) */;
  %602 = cast(%var_3109, dtype="float64") /* ty=Tensor[(16, 4, 3), float64] */;
  %603 = log10(%602) /* ty=Tensor[(16, 4, 3), float64] */;
  %604 = cast(%var_3125, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %608 = cast(meta[relay.Constant][44] /* ty=Tensor[(990), float32] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %609 = %601.2;
  %610 = bitwise_or(%606, %607) /* ty=Tensor[(16, 4, 3), uint16] */;
  %611 = sinh(%608) /* ty=Tensor[(990), float64] */;
  (%609, %var_3113, meta[relay.Constant][43] /* ty=Tensor[(56), int64] */, meta[relay.Constant][45] /* ty=Tensor[(240), float32] */, %610, %611)
}

def @func_2666() -> (Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) {
  %612 = cast(8.00204f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %613 = cast(meta[relay.Constant][46] /* ty=Tensor[(143, 1), float32] */, dtype="float32") /* ty=Tensor[(143, 1), float32] */;
  %614 = cast(meta[relay.Constant][47] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %615 = reshape(%612, newshape=[]) /* ty=float32 */;
  %616 = reshape(%613, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %617 = reshape(%614, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %618 = @func_1526(%615, %616, %617) /* ty=(Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) */;
  %619 = cast(meta[relay.Constant][47] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %620 = cast(meta[relay.Constant][46] /* ty=Tensor[(143, 1), float32] */, dtype="float32") /* ty=Tensor[(143, 1), float32] */;
  %621 = reshape(%619, newshape=[14, 5, 11]) /* ty=Tensor[(14, 5, 11), float32] */;
  %622 = reshape(%620, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %623 = @func_896(%621, %622) /* ty=(Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) */;
  %624 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %625 = cos(%624) /* ty=Tensor[(4, 3, 11), float64] */;
  %626 = cast(%625, dtype="uint16") /* ty=Tensor[(4, 3, 11), uint16] */;
  %627 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(4, 3, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 3, 11), float64] */, dtype="uint16") /* ty=Tensor[(4, 3, 11), uint16] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %630 = %618.7;
  %631 = %623.1;
  %632 = subtract(%628, %629) /* ty=Tensor[(4, 3, 11), uint16] */;
  (%630, 8.00204f /* ty=float32 */, meta[relay.Constant][46] /* ty=Tensor[(143, 1), float32] */, meta[relay.Constant][47] /* ty=Tensor[(770), float32] */, %631, %632)
}

def @func_4676(%var_4625: Tensor[(572), float32], %var_4654: Tensor[(143), float32]) -> (Tensor[(770), float32], Tensor[(572), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(143), float32], Tensor[(572), float32]) {
  %633 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %634 = cast(meta[relay.Constant][49] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
  %635 = reshape(%634, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %636 = @func_4206(%635) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) */;
  %637 = cast(%var_4654, dtype="float32") /* ty=Tensor[(143), float32] */;
  %638 = reshape(%637, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %639 = @func_687(%638) /* ty=(Tensor[(13, 1, 11), float32],) */;
  %640 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %641 = cast(%var_4625, dtype="int32") /* ty=Tensor[(572), int32] */;
  %642 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(572), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %643 = cast(meta[relay.Constant][49] /* ty=Tensor[(572), float32] */, dtype="int32") /* ty=Tensor[(572), int32] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?), int32] */;
  %645 = bitwise_or(%643, %644) /* ty=Tensor[(572), int32] */;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(572), float32] */;
  %647 = %633.3;
  %648 = %636.2;
  %649 = %639.0;
  %650 = %640.0;
  %651 = log(%646) /* ty=Tensor[(572), float32] */;
  (%647, %648, %649, %var_4654, %650, %651)
}

def @func_2692() -> (Tensor[(4, 3, 11), float64],) {
  %652 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %653 = %652.5;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %655 = exp(%654) /* ty=Tensor[(4, 3, 11), float64] */;
  (%655,)
}

def @func_4478(%var_4426: Tensor[(15, 1, 9), float32]) -> (Tensor[(15, 9, 9), bool], Tensor[(6, 3, 6), float32], Tensor[(4, 3, 11), float64]) {
  %656 = cast(%var_4426, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %657 = cos(%656) /* ty=Tensor[(15, 1, 9), float32] */;
  %658 = cast(%657, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
  %659 = shape_of(%var_4426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_4426, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %662 = less_equal(%660, %661) /* ty=Tensor[(15, ?, 9), bool] */;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(15, ?, 9), float32] */;
  %664 = exp(%663) /* ty=Tensor[(15, ?, 9), float32] */;
  %665 = cast(%662, dtype="int16") /* ty=Tensor[(15, ?, 9), int16] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="int16") /* ty=Tensor[(15, ?, 9), int16] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %669 = add(%667, %668) /* ty=Tensor[(15, ?, 9), int16] */;
  %670 = cast(%669, dtype="bool") /* ty=Tensor[(15, ?, 9), bool] */;
  %671 = cast(meta[relay.Constant][50] /* ty=Tensor[(15, 9, 9), int16] */, dtype="bool") /* ty=Tensor[(15, 9, 9), bool] */;
  %672 = not_equal(%670, %671) /* ty=Tensor[(15, 9, 9), bool] */;
  %673 = @func_3889() /* ty=Tensor[(6, 3, 6), float32] */;
  %674 = @func_3068() /* ty=Tensor[(4, 3, 11), float64] */;
  (%672, %673, %674)
}

def @func_6388(%var_6383: Tensor[(13, 3, 11), float32]) -> (Tensor[(13, 3, 11), bool],) {
  %675 = @func_3049() /* ty=Tensor[(13, 1, 11), float32] */;
  %676 = cast(%675, dtype="bool") /* ty=Tensor[(13, 1, 11), bool] */;
  %677 = cast(%var_6383, dtype="bool") /* ty=Tensor[(13, 3, 11), bool] */;
  %678 = logical_and(%676, %677) /* ty=Tensor[(13, 3, 11), bool] */;
  (%678,)
}

def @func_7339(%var_7335: uint64, %var_7336: Tensor[(64), uint64]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], uint64, Tensor[(64), uint64], Tensor[(240), float32]) {
  %679 = @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */;
  %680 = cast(%var_7335, dtype="uint64") /* ty=uint64 */;
  %681 = cast(%var_7336, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %682 = cast(meta[relay.Constant][51] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %683 = reshape(%680, newshape=[]) /* ty=uint64 */;
  %684 = reshape(%681, newshape=[1, 64]) /* ty=Tensor[(1, 64), uint64] */;
  %685 = reshape(%682, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %686 = @func_6124(%683, %684, %685) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(4, 8, 3), float32], Tensor[(9, 10, ?), float32], uint64, Tensor[(15, 15, 11), bool], Tensor[(1, 165), int8], Tensor[(9, 10, 240), bool], Tensor[(?, 64), int16]) */;
  %687 = %679.0;
  %688 = %686.1;
  (%687, %688, %var_7335, %var_7336, meta[relay.Constant][51] /* ty=Tensor[(240), float32] */)
}

def @func_7068(%var_7045: Tensor[(64), uint64]) -> (Tensor[(4, 3, 11), float64], Tensor[(15, 16, 1), float32], uint64, Tensor[(64), uint64], Tensor[(240), float32]) {
  %689 = @func_6690() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) */;
  %690 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %691 = cast(%var_7045, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %692 = cast(meta[relay.Constant][53] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %693 = reshape(%690, newshape=[]) /* ty=uint64 */;
  %694 = reshape(%691, newshape=[1, 16, 4]) /* ty=Tensor[(1, 16, 4), uint64] */;
  %695 = reshape(%692, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %696 = @func_1645(%693, %694, %695) /* ty=(Tensor[(1, 16, 4), uint64], Tensor[(15, 16, 1), float32], Tensor[(240), float32]) */;
  %697 = %689.0;
  %698 = %696.1;
  (%697, %698, meta[relay.Constant][52] /* ty=uint64 */, %var_7045, meta[relay.Constant][53] /* ty=Tensor[(240), float32] */)
}

def @func_6419() -> (Tensor[(3, 15, 13), float32],) {
  %699 = @func_3854() /* ty=Tensor[(3, 15, 13), float32] */;
  (%699,)
}

def @func_441(%var_399: Tensor[(11, 15, 6), float32], %var_411: float32, %var_412: Tensor[(24, 10), float32]) -> (Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) {
  %700 = cast(%var_399, dtype="float32") /* ty=Tensor[(11, 15, 6), float32] */;
  %701 = sqrt(%700) /* ty=Tensor[(11, 15, 6), float32] */;
  %702 = cast(%701, dtype="uint8") /* ty=Tensor[(11, 15, 6), uint8] */;
  %703 = shape_of(%var_399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%var_399, dtype="uint8") /* ty=Tensor[(11, 15, 6), uint8] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %706 = cast(%var_411, dtype="float32") /* ty=float32 */;
  %707 = cast(%var_412, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %708 = reshape(%706, newshape=[]) /* ty=float32 */;
  %709 = reshape(%707, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
  %710 = @func_192(%708, %709) /* ty=(Tensor[(15, 16, 1), float32],) */;
  %711 = minimum(%704, %705) /* ty=Tensor[(11, 15, 6), uint8] */;
  %712 = %710.0;
  (%711, %712, %var_411, %var_412)
}

def @func_5510(%var_5430: Tensor[(10, 14, 4), float32], %var_5504: Tensor[(572), float32]) -> (Tensor[(10, 14, 4), float32], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(10, 14, 4), float64], Tensor[(143), float32], Tensor[(572), float32], Tensor[(1, 143), float32]) {
  %713 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 4), float32] */;
  %714 = shape_of(%var_5430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%var_5430, dtype="float32") /* ty=Tensor[(10, 14, 4), float32] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %717 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %718 = @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */;
  %719 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 14, 4), float32] */, dtype="float64") /* ty=Tensor[(10, 14, 4), float64] */;
  %720 = sqrt(%719) /* ty=Tensor[(10, 14, 4), float64] */;
  %721 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 14, 4), float32] */, dtype="uint8") /* ty=Tensor[(10, 14, 4), uint8] */;
  %722 = shape_of(%var_5430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%var_5430, dtype="uint8") /* ty=Tensor[(10, 14, 4), uint8] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %725 = subtract(%723, %724) /* ty=Tensor[(10, 14, 4), uint8] */;
  %726 = cast(%725, dtype="int16") /* ty=Tensor[(10, 14, 4), int16] */;
  %727 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%720, dtype="int16") /* ty=Tensor[(10, 14, 4), int16] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %730 = multiply(%728, %729) /* ty=Tensor[(10, 14, 4), int16] */;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(10, 14, 4), float32] */;
  %732 = atan(%731) /* ty=Tensor[(10, 14, 4), float32] */;
  %733 = cast(%732, dtype="float64") /* ty=Tensor[(10, 14, 4), float64] */;
  %734 = cast(%var_5504, dtype="float32") /* ty=Tensor[(572), float32] */;
  %735 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 143), float32] */, dtype="float32") /* ty=Tensor[(1, 143), float32] */;
  %736 = reshape(%734, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %737 = reshape(%735, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %738 = @func_4676(%736, %737) /* ty=(Tensor[(770), float32], Tensor[(572), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(143), float32], Tensor[(572), float32]) */;
  %739 = add(%715, %716) /* ty=Tensor[(10, 14, 4), float32] */;
  %740 = %717.0;
  %741 = %718.0;
  %742 = sin(%733) /* ty=Tensor[(10, 14, 4), float64] */;
  %743 = %738.3;
  (%739, %740, %741, %742, %743, %var_5504, meta[relay.Constant][55] /* ty=Tensor[(1, 143), float32] */)
}

def @func_6690() -> (Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) {
  %744 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %745 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %746 = cast(meta[relay.Constant][56] /* ty=Tensor[(70), int64] */, dtype="int64") /* ty=Tensor[(70), int64] */;
  %747 = cast(meta[relay.Constant][57] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %748 = cast(meta[relay.Constant][58] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %749 = reshape(%745, newshape=[]) /* ty=int64 */;
  %750 = reshape(%746, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
  %751 = reshape(%747, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %752 = reshape(%748, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %753 = @func_2388(%749, %750, %751, %752) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
  %754 = %744.0;
  %755 = %753.0;
  (%754, %755, -1 /* ty=int64 */, meta[relay.Constant][56] /* ty=Tensor[(70), int64] */, meta[relay.Constant][57] /* ty=Tensor[(770), float32] */, meta[relay.Constant][58] /* ty=Tensor[(143), float32] */)
}

def @func_8826() -> (Tensor[(3, 15, 13), float32],) {
  %756 = @func_4819() /* ty=Tensor[(3, 15, 13), float32] */;
  (%756,)
}

def @func_7296() -> Tensor[(4, 3, 11), float64] {
  @func_3318() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_3179() -> Tensor[(4, 3, 11), float64] {
  %757 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %757.0
}

def @func_4038() -> Tensor[(4, 3, 11), float64] {
  @func_3704() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_2897(%var_2873: Tensor[(14, 8, 3), int32]) -> (Tensor[(14, 8, 3), bool], Tensor[(1, 352), uint32], Tensor[(154), float32], Tensor[(110, 9), float32], Tensor[(2, 120), float32]) {
  %758 = cast(%var_2873, dtype="bool") /* ty=Tensor[(14, 8, 3), bool] */;
  %759 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(14, 8, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(meta[relay.Constant][59] /* ty=Tensor[(14, 8, 3), int32] */, dtype="bool") /* ty=Tensor[(14, 8, 3), bool] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %762 = cast(meta[relay.Constant][60] /* ty=Tensor[(154), float32] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %763 = cast(meta[relay.Constant][61] /* ty=Tensor[(110, 9), float32] */, dtype="float32") /* ty=Tensor[(110, 9), float32] */;
  %764 = cast(meta[relay.Constant][62] /* ty=Tensor[(2, 120), float32] */, dtype="float32") /* ty=Tensor[(2, 120), float32] */;
  %765 = reshape(%762, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), float32] */;
  %766 = reshape(%763, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %767 = reshape(%764, newshape=[240, 1]) /* ty=Tensor[(240, 1), float32] */;
  %768 = @func_2191(%765, %766, %767) /* ty=(Tensor[(11, 7, 2), float32], Tensor[(11, 7, 2), bool], float32, Tensor[(1, 352), uint32], Tensor[(990), float32], Tensor[(240, 1), float32]) */;
  %769 = less(%760, %761) /* ty=Tensor[(14, 8, 3), bool] */;
  %770 = %768.3;
  (%769, %770, meta[relay.Constant][60] /* ty=Tensor[(154), float32] */, meta[relay.Constant][61] /* ty=Tensor[(110, 9), float32] */, meta[relay.Constant][62] /* ty=Tensor[(2, 120), float32] */)
}

def @func_5811() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %771 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
  %772 = @func_3704() /* ty=Tensor[(4, 3, 11), float64] */;
  (%771, %772)
}

def @func_3429() -> (Tensor[(4, 3, 11), float64],) {
  %773 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
  (%773,)
}

def @func_5139() -> (Tensor[(7, 4, 6), float64],) {
  %774 = cast(meta[relay.Constant][63] /* ty=Tensor[(7, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 6), float64] */;
  %775 = atan(%774) /* ty=Tensor[(7, 4, 6), float64] */;
  (%775,)
}

def @func_5084() -> (Tensor[(4, 3, 11), float64],) {
  %776 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
  (%776,)
}

def @func_3704() -> Tensor[(4, 3, 11), float64] {
  @func_3318() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_8331() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %777 = @func_7433() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(572), float32], Tensor[(286, 2), float32], Tensor[(990), float32], Tensor[(352), uint32], Tensor[(4, 3, 11), float64]) */;
  %778 = %777.0;
  %779 = @func_4255() /* ty=Tensor[(4, 3, 11), float64] */;
  (%778, %779)
}

def @func_5058() -> (Tensor[(4, 8, 3), float32],) {
  %780 = cast(meta[relay.Constant][64] /* ty=Tensor[(4, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 3), float32] */;
  %781 = sinh(%780) /* ty=Tensor[(4, 8, 3), float32] */;
  (%781,)
}

def @func_8270(%var_8222: Tensor[(121), float64], %var_8262: float32) -> (Tensor[(4, 8, 3), float32], Tensor[(360), float32], Tensor[(1, 882), uint32], Tensor[(121), float64], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(572), uint32], Tensor[(4, 3, 11), float64], float32, Tensor[(352), uint32], Tensor[(990), float32]) {
  %782 = @func_5058() /* ty=(Tensor[(4, 8, 3), float32],) */;
  %783 = cast(meta[relay.Constant][65] /* ty=Tensor[(1, 882), uint32] */, dtype="uint32") /* ty=Tensor[(1, 882), uint32] */;
  %784 = cast(%var_8222, dtype="float64") /* ty=Tensor[(121), float64] */;
  %785 = reshape(%783, newshape=[9, 7, 14]) /* ty=Tensor[(9, 7, 14), uint32] */;
  %786 = reshape(%784, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %787 = @func_3001(%785, %786) /* ty=(Tensor[(9, 7, 14), uint32], Tensor[(240), float32], Tensor[(121), float64], int64, Tensor[(360), float32], Tensor[(64), uint64], Tensor[(240), float32]) */;
  %788 = cast(meta[relay.Constant][66] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
  %789 = reshape(%788, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %790 = @func_4206(%789) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) */;
  %791 = cast(meta[relay.Constant][67] /* ty=Tensor[(572), float32] */, dtype="uint32") /* ty=Tensor[(572), uint32] */;
  %792 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(572), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %793 = cast(meta[relay.Constant][66] /* ty=Tensor[(572), float32] */, dtype="uint32") /* ty=Tensor[(572), uint32] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %795 = cast(%var_8262, dtype="float32") /* ty=float32 */;
  %796 = cast(meta[relay.Constant][68] /* ty=Tensor[(352), uint32] */, dtype="uint32") /* ty=Tensor[(352), uint32] */;
  %797 = cast(meta[relay.Constant][69] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %798 = reshape(%795, newshape=[]) /* ty=float32 */;
  %799 = reshape(%796, newshape=[352]) /* ty=Tensor[(352), uint32] */;
  %800 = reshape(%797, newshape=[330, 3]) /* ty=Tensor[(330, 3), float32] */;
  %801 = @func_4165(%798, %799, %800) /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(240), float32], Tensor[(4, 3, 11), float64], float32, Tensor[(352), uint32], Tensor[(330, 3), float32], Tensor[(3, 15, 13), float32], Tensor[(15, 16, 1260), float32]) */;
  %802 = %782.0;
  %803 = %787.4;
  %804 = @func_3179() /* ty=Tensor[(4, 3, 11), float64] */;
  %805 = %790.0;
  %806 = add(%793, %794) /* ty=Tensor[(572), uint32] */;
  %807 = %801.0;
  (%802, %803, meta[relay.Constant][65] /* ty=Tensor[(1, 882), uint32] */, %var_8222, %804, %805, %806, %807, %var_8262, meta[relay.Constant][68] /* ty=Tensor[(352), uint32] */, meta[relay.Constant][69] /* ty=Tensor[(990), float32] */)
}

def @func_7221() -> (Tensor[(4, 3, 11), float64], int64, Tensor[(882), uint32], Tensor[(121), float64]) {
  %808 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %809 = cast(meta[relay.Constant][70] /* ty=Tensor[(882), uint32] */, dtype="uint32") /* ty=Tensor[(882), uint32] */;
  %810 = cast(meta[relay.Constant][71] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %811 = reshape(%809, newshape=[9, 7, 14]) /* ty=Tensor[(9, 7, 14), uint32] */;
  %812 = reshape(%810, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %813 = @func_3001(%811, %812) /* ty=(Tensor[(9, 7, 14), uint32], Tensor[(240), float32], Tensor[(121), float64], int64, Tensor[(360), float32], Tensor[(64), uint64], Tensor[(240), float32]) */;
  %814 = %808.0;
  %815 = %813.3;
  (%814, %815, meta[relay.Constant][70] /* ty=Tensor[(882), uint32] */, meta[relay.Constant][71] /* ty=Tensor[(121), float64] */)
}

def @func_8020() -> Tensor[(154), float32] {
  %816 = @func_8014() /* ty=(Tensor[(3, 15, 13), int8], Tensor[(154), float32], Tensor[(4, 84), int32]) */;
  %816.1
}

def @func_8394() -> (Tensor[(4, 3, 11), float64],) {
  %817 = @func_7451() /* ty=Tensor[(4, 3, 11), float64] */;
  (%817,)
}

def @func_6206() -> (Tensor[(4, 3, 11), float64], Tensor[(7, 4, 6), float64]) {
  %818 = @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */;
  %819 = @func_5139() /* ty=(Tensor[(7, 4, 6), float64],) */;
  %820 = %818.0;
  %821 = %819.0;
  (%820, %821)
}

def @func_5284(%var_5271: Tensor[(90), float64], %var_5274: Tensor[(105), uint32], %var_5275: Tensor[(770), float32]) -> (Tensor[(4, 3, 11), float32], Tensor[(4, 3, 11), float32], Tensor[(9, 10, 1), float64], Tensor[(90), float64], Tensor[(770), float32], Tensor[(105), uint32], Tensor[(770), float32], Tensor[(143), float32]) {
  %822 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  %823 = cast(%822, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %824 = asinh(%823) /* ty=Tensor[(4, 3, 11), float64] */;
  %825 = cast(%824, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %826 = cast(%822, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %827 = cast(%var_5271, dtype="float64") /* ty=Tensor[(90), float64] */;
  %828 = reshape(%827, newshape=[9, 10, 1]) /* ty=Tensor[(9, 10, 1), float64] */;
  %829 = @func_5175(%828) /* ty=(Tensor[(9, 10, 1), float64],) */;
  %830 = cast(%var_5274, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %831 = cast(%var_5275, dtype="float32") /* ty=Tensor[(770), float32] */;
  %832 = cast(meta[relay.Constant][72] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %833 = reshape(%830, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), uint32] */;
  %834 = reshape(%831, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %835 = reshape(%832, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %836 = @func_4863(%833, %834, %835) /* ty=(Tensor[(5, 3, 7), uint32], Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32], Tensor[(143), bool]) */;
  %837 = erf(%825) /* ty=Tensor[(4, 3, 11), float32] */;
  %838 = acos(%826) /* ty=Tensor[(4, 3, 11), float32] */;
  %839 = %829.0;
  %840 = %836.2;
  (%837, %838, %839, %var_5271, %840, %var_5274, %var_5275, meta[relay.Constant][72] /* ty=Tensor[(143), float32] */)
}

def @func_2480(%var_2412: Tensor[(11, 11), float64], %var_2419: int64, %var_2444: Tensor[(360), float32], %var_2448: Tensor[(64), uint64], %var_2449: Tensor[(240), float32]) -> (Tensor[(11, 11), float64], Tensor[(143), float32], int64, Tensor[(70), int64], Tensor[(385, 2), float32], Tensor[(143), float32], float32, Tensor[(360), float32], Tensor[(240), float32], Tensor[(64), uint64], Tensor[(240), float32], Tensor[(990), float32], Tensor[(11, 15, 6), uint8]) {
  %841 = cast(%var_2412, dtype="float64") /* ty=Tensor[(11, 11), float64] */;
  %842 = cast(%var_2419, dtype="int64") /* ty=int64 */;
  %843 = cast(meta[relay.Constant][73] /* ty=Tensor[(70), int64] */, dtype="int64") /* ty=Tensor[(70), int64] */;
  %844 = cast(meta[relay.Constant][74] /* ty=Tensor[(385, 2), float32] */, dtype="float32") /* ty=Tensor[(385, 2), float32] */;
  %845 = cast(meta[relay.Constant][75] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %846 = reshape(%842, newshape=[]) /* ty=int64 */;
  %847 = reshape(%843, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
  %848 = reshape(%844, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %849 = reshape(%845, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %850 = @func_2388(%846, %847, %848, %849) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
  %851 = cast(%var_2444, dtype="float32") /* ty=Tensor[(360), float32] */;
  %852 = cast(%var_2419, dtype="float32") /* ty=float32 */;
  %853 = %850.4;
  %854 = cast(%853, dtype="float32") /* ty=Tensor[(143), float32] */;
  %855 = reshape(%851, newshape=[5, 8, 9]) /* ty=Tensor[(5, 8, 9), float32] */;
  %856 = reshape(%852, newshape=[]) /* ty=float32 */;
  %857 = reshape(%854, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %858 = @func_2241(%855, %856, %857) /* ty=(Tensor[(5, 8, 9), float32], Tensor[(240), float32], float32, Tensor[(143), float32], Tensor[(770), float32]) */;
  %859 = %858.2;
  %860 = cast(%859, dtype="uint64") /* ty=uint64 */;
  %861 = cast(%var_2448, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %862 = cast(%var_2449, dtype="float32") /* ty=Tensor[(240), float32] */;
  %863 = reshape(%860, newshape=[]) /* ty=uint64 */;
  %864 = reshape(%861, newshape=[1, 16, 4]) /* ty=Tensor[(1, 16, 4), uint64] */;
  %865 = reshape(%862, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %866 = @func_1645(%863, %864, %865) /* ty=(Tensor[(1, 16, 4), uint64], Tensor[(15, 16, 1), float32], Tensor[(240), float32]) */;
  %867 = cast(%var_2419, dtype="float32") /* ty=float32 */;
  %868 = cast(%853, dtype="float32") /* ty=Tensor[(143), float32] */;
  %869 = cast(meta[relay.Constant][74] /* ty=Tensor[(385, 2), float32] */, dtype="float32") /* ty=Tensor[(385, 2), float32] */;
  %870 = reshape(%867, newshape=[]) /* ty=float32 */;
  %871 = reshape(%868, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %872 = reshape(%869, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %873 = @func_1526(%870, %871, %872) /* ty=(Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) */;
  %874 = %873.3;
  %875 = cast(%874, dtype="float32") /* ty=Tensor[(990), float32] */;
  %876 = cast(%var_2419, dtype="float32") /* ty=float32 */;
  %877 = cast(%var_2449, dtype="float32") /* ty=Tensor[(240), float32] */;
  %878 = reshape(%875, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float32] */;
  %879 = reshape(%876, newshape=[]) /* ty=float32 */;
  %880 = reshape(%877, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %881 = @func_441(%878, %879, %880) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */;
  %882 = sqrt(%841) /* ty=Tensor[(11, 11), float64] */;
  %883 = %866.2;
  %884 = %881.0;
  (%882, %853, %var_2419, meta[relay.Constant][73] /* ty=Tensor[(70), int64] */, meta[relay.Constant][74] /* ty=Tensor[(385, 2), float32] */, meta[relay.Constant][75] /* ty=Tensor[(143), float32] */, %859, %var_2444, %883, %var_2448, %var_2449, %874, %884)
}

def @func_5327(%var_5324: Tensor[(143, 4), float32]) -> (Tensor[(3, 15, 13), float64], Tensor[(13, 4, 11), uint64], Tensor[(143, 4), float32]) {
  %885 = @func_3854() /* ty=Tensor[(3, 15, 13), float32] */;
  %886 = cast(%885, dtype="float64") /* ty=Tensor[(3, 15, 13), float64] */;
  %887 = cast(%var_5324, dtype="float32") /* ty=Tensor[(143, 4), float32] */;
  %888 = reshape(%887, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %889 = @func_4206(%888) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) */;
  %890 = asinh(%886) /* ty=Tensor[(3, 15, 13), float64] */;
  %891 = %889.1;
  (%890, %891, %var_5324)
}

def @func_5861(%var_5840: Tensor[(6, 7, 2), uint64], %var_5841: Tensor[(6, 7, 2), uint64]) -> (Tensor[(6, 7, 2), uint64], Tensor[(4, 3, 11), float64]) {
  %892 = cast(%var_5841, dtype="uint64") /* ty=Tensor[(6, 7, 2), uint64] */;
  %893 = shape_of(%var_5840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%var_5840, dtype="uint64") /* ty=Tensor[(6, 7, 2), uint64] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %896 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %897 = add(%894, %895) /* ty=Tensor[(6, 7, 2), uint64] */;
  %898 = %896.0;
  (%897, %898)
}

def @func_4863(%var_4833: Tensor[(5, 3, 7), uint32], %var_4847: Tensor[(770), float32], %var_4848: Tensor[(143), float32]) -> (Tensor[(5, 3, 7), uint32], Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32], Tensor[(143), bool]) {
  %899 = cast(%var_4833, dtype="uint32") /* ty=Tensor[(5, 3, 7), uint32] */;
  %900 = shape_of(meta[relay.Constant][76] /* ty=Tensor[(5, 3, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(meta[relay.Constant][76] /* ty=Tensor[(5, 3, 7), uint32] */, dtype="uint32") /* ty=Tensor[(5, 3, 7), uint32] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %903 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %904 = cast(meta[relay.Constant][77] /* ty=Tensor[(70), int64] */, dtype="int64") /* ty=Tensor[(70), int64] */;
  %905 = cast(%var_4847, dtype="float32") /* ty=Tensor[(770), float32] */;
  %906 = cast(%var_4848, dtype="float32") /* ty=Tensor[(143), float32] */;
  %907 = reshape(%903, newshape=[]) /* ty=int64 */;
  %908 = reshape(%904, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
  %909 = reshape(%905, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %910 = reshape(%906, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %911 = @func_2388(%907, %908, %909, %910) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
  %912 = %911.4;
  %913 = cast(%912, dtype="bool") /* ty=Tensor[(143), bool] */;
  %914 = cast(7 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %915 = minimum(%901, %902) /* ty=Tensor[(5, 3, 7), uint32] */;
  %916 = greater(%913, %914) /* ty=Tensor[(143), bool] */;
  (%915, meta[relay.Constant][77] /* ty=Tensor[(70), int64] */, %var_4847, %var_4848, %916)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7223() -> (Tensor[(4, 3, 11), float64], int64, Tensor[(882), uint32], Tensor[(121), float64]) {
  @func_7221() /* ty=(Tensor[(4, 3, 11), float64], int64, Tensor[(882), uint32], Tensor[(121), float64]) */
}

def @func_7521(%var_7520: Tensor[(165), int8]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(165), int8]) {
  %5 = fn (%var_7508: Tensor[(165), int8]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(165), int8]) {
    %0 = cast(%var_7508, dtype="int8") /* ty=Tensor[(165), int8] */;
    %1 = reshape(%0, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), int8] */;
    %2 = @func_4711(%1) /* ty=(Tensor[(15, 15, 11), bool], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
    %3 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
    %4 = %2.1;
    (%3, %4, %var_7508)
  };
  %5(%var_7520) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(165), int8]) */
}

def @func_6420() -> (Tensor[(3, 15, 13), float32],) {
  %7 = fn () -> (Tensor[(3, 15, 13), float32],) {
    %6 = @func_3854() /* ty=Tensor[(3, 15, 13), float32] */;
    (%6,)
  };
  %7() /* ty=(Tensor[(3, 15, 13), float32],) */
}

def @func_4165(%var_4090: float32, %var_4116: Tensor[(352), uint32], %var_4117: Tensor[(330, 3), float32]) -> (Tensor[(4, 3, 11), float64], float32, Tensor[(240), float32], Tensor[(4, 3, 11), float64], float32, Tensor[(352), uint32], Tensor[(330, 3), float32], Tensor[(3, 15, 13), float32], Tensor[(15, 16, 1260), float32]) {
  %8 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %9 = cast(%var_4116, dtype="uint32") /* ty=Tensor[(352), uint32] */;
  %10 = cast(%var_4117, dtype="float32") /* ty=Tensor[(330, 3), float32] */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %13 = cast(%var_4090, dtype="float32") /* ty=float32 */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %15 = reshape(%11, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %16 = reshape(%12, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %17 = reshape(%13, newshape=[]) /* ty=float32 */;
  %18 = reshape(%14, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %19 = @func_2320(%15, %16, %17, %18) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(15, 16, 1), float32], float32, Tensor[(240), float32]) */;
  %20 = %19.1;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(15, 16, 1), float32] */;
  %22 = reshape(%9, newshape=[16, 11, 2]) /* ty=Tensor[(16, 11, 2), uint32] */;
  %23 = reshape(%10, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %24 = reshape(%21, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %25 = @func_646(%22, %23, %24) /* ty=(Tensor[(16, 11, 2), float64], Tensor[(16, 11, 2), uint16], Tensor[(24, 10), float32], Tensor[(990), float32], float32, Tensor[(240), float32], Tensor[(15, 16, 1), float32], float32) */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(1260), int8] */, dtype="uint64") /* ty=Tensor[(1260), uint64] */;
  %27 = cast(%20, dtype="uint64") /* ty=Tensor[(15, 16, 1), uint64] */;
  %28 = minimum(%26, %27) /* ty=Tensor[(15, 16, 1260), uint64] */;
  %29 = cast(%28, dtype="bool") /* ty=Tensor[(15, 16, 1260), bool] */;
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(1260), int8] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %31 = greater(%29, %30) /* ty=Tensor[(15, 16, 1260), bool] */;
  %32 = cast(%28, dtype="int32") /* ty=Tensor[(15, 16, 1260), int32] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="int32") /* ty=Tensor[(15, 16, 1260), int32] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %36 = logical_xor(%34, %35) /* ty=Tensor[(15, 16, 1260), int32] */;
  %37 = cast(%36, dtype="float32") /* ty=Tensor[(15, 16, 1260), float32] */;
  %38 = %8.0;
  %39 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  %40 = %25.7;
  %41 = @func_3854() /* ty=Tensor[(3, 15, 13), float32] */;
  %42 = erf(%37) /* ty=Tensor[(15, 16, 1260), float32] */;
  (%38, %var_4090, meta[relay.Constant][0] /* ty=Tensor[(240), float32] */, %39, %40, %var_4116, %var_4117, %41, %42)
}

def @func_4676(%var_4625: Tensor[(572), float32], %var_4654: Tensor[(143), float32]) -> (Tensor[(770), float32], Tensor[(572), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(143), float32], Tensor[(572), float32]) {
  %43 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
  %45 = reshape(%44, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %46 = @func_4206(%45) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) */;
  %47 = cast(%var_4654, dtype="float32") /* ty=Tensor[(143), float32] */;
  %48 = reshape(%47, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %49 = @func_687(%48) /* ty=(Tensor[(13, 1, 11), float32],) */;
  %50 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %51 = cast(%var_4625, dtype="int32") /* ty=Tensor[(572), int32] */;
  %52 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(572), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(572), float32] */, dtype="int32") /* ty=Tensor[(572), int32] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?), int32] */;
  %55 = bitwise_or(%53, %54) /* ty=Tensor[(572), int32] */;
  %56 = cast(%55, dtype="float32") /* ty=Tensor[(572), float32] */;
  %57 = %43.3;
  %58 = %46.2;
  %59 = %49.0;
  %60 = %50.0;
  %61 = log(%56) /* ty=Tensor[(572), float32] */;
  (%57, %58, %59, %var_4654, %60, %61)
}

def @func_6206() -> (Tensor[(4, 3, 11), float64], Tensor[(7, 4, 6), float64]) {
  %62 = @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */;
  %63 = @func_5139() /* ty=(Tensor[(7, 4, 6), float64],) */;
  %64 = %62.0;
  %65 = %63.0;
  (%64, %65)
}

def @func_9114(%var_9112: Tensor[(143), float32]) -> (Tensor[(143), float32],) {
  @func_9111(%var_9112) /* ty=(Tensor[(143), float32],) */
}

def @func_5178(%var_5176: Tensor[(9, 10, 1), float64]) -> (Tensor[(9, 10, 1), float64],) {
  @func_5175(%var_5176) /* ty=(Tensor[(9, 10, 1), float64],) */
}

def @func_3050() -> Tensor[(13, 1, 11), float32] {
  %67 = fn () -> Tensor[(13, 1, 11), float32] {
    %66 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
    %66.4
  };
  %67() /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_2804(%var_2800: Tensor[(2, 176), uint32]) -> (Tensor[(4, 3, 11), float64], Tensor[(240), float32], Tensor[(2, 176), uint32], Tensor[(990), float32], Tensor[(240), float32]) {
  %68 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %69 = cast(%var_2800, dtype="uint32") /* ty=Tensor[(2, 176), uint32] */;
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %72 = reshape(%69, newshape=[16, 11, 2]) /* ty=Tensor[(16, 11, 2), uint32] */;
  %73 = reshape(%70, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %74 = reshape(%71, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %75 = @func_646(%72, %73, %74) /* ty=(Tensor[(16, 11, 2), float64], Tensor[(16, 11, 2), uint16], Tensor[(24, 10), float32], Tensor[(990), float32], float32, Tensor[(240), float32], Tensor[(15, 16, 1), float32], float32) */;
  %76 = %68.0;
  %77 = %75.5;
  (%76, %77, %var_2800, meta[relay.Constant][3] /* ty=Tensor[(990), float32] */, meta[relay.Constant][4] /* ty=Tensor[(240), float32] */)
}

def @func_4170(%var_4167: float32, %var_4168: Tensor[(352), uint32], %var_4169: Tensor[(330, 3), float32]) -> (Tensor[(4, 3, 11), float64], float32, Tensor[(240), float32], Tensor[(4, 3, 11), float64], float32, Tensor[(352), uint32], Tensor[(330, 3), float32], Tensor[(3, 15, 13), float32], Tensor[(15, 16, 1260), float32]) {
  @func_4165(%var_4167, %var_4168, %var_4169) /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(240), float32], Tensor[(4, 3, 11), float64], float32, Tensor[(352), uint32], Tensor[(330, 3), float32], Tensor[(3, 15, 13), float32], Tensor[(15, 16, 1260), float32]) */
}

def @func_3239(%var_3198: Tensor[(8, 42), int32], %var_3210: int64) -> (Tensor[(4, 3, 11), float64], Tensor[(14, 8, 3), bool], Tensor[(8, 42), int32], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) {
  %78 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %79 = cast(%var_3198, dtype="int32") /* ty=Tensor[(8, 42), int32] */;
  %80 = reshape(%79, newshape=[14, 8, 3]) /* ty=Tensor[(14, 8, 3), int32] */;
  %81 = @func_2897(%80) /* ty=(Tensor[(14, 8, 3), bool], Tensor[(1, 352), uint32], Tensor[(154), float32], Tensor[(110, 9), float32], Tensor[(2, 120), float32]) */;
  %82 = cast(%var_3210, dtype="int64") /* ty=int64 */;
  %83 = cast(meta[relay.Constant][5] /* ty=Tensor[(70), int64] */, dtype="int64") /* ty=Tensor[(70), int64] */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %85 = cast(meta[relay.Constant][7] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %86 = reshape(%82, newshape=[]) /* ty=int64 */;
  %87 = reshape(%83, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
  %88 = reshape(%84, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %89 = reshape(%85, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %90 = @func_2388(%86, %87, %88, %89) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
  %91 = %78.0;
  %92 = %81.0;
  %93 = %90.0;
  (%91, %92, %var_3198, %93, %var_3210, meta[relay.Constant][5] /* ty=Tensor[(70), int64] */, meta[relay.Constant][6] /* ty=Tensor[(770), float32] */, meta[relay.Constant][7] /* ty=Tensor[(143), float32] */)
}

def @func_8639() -> (Tensor[(3, 15, 13), float32], Tensor[(165), int8], Tensor[(165), int8]) {
  %105 = fn () -> (Tensor[(3, 15, 13), float32], Tensor[(165), int8], Tensor[(165), int8]) {
    %94 = @func_6419() /* ty=(Tensor[(3, 15, 13), float32],) */;
    %95 = %94.0;
    %96 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 15, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 15, 13), float32] */;
    %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
    %98 = cast(%95, dtype="float32") /* ty=Tensor[(3, 15, 13), float32] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %100 = cast(meta[relay.Constant][9] /* ty=Tensor[(165), int8] */, dtype="int8") /* ty=Tensor[(165), int8] */;
    %101 = reshape(%100, newshape=[165]) /* ty=Tensor[(165), int8] */;
    %102 = @func_7519(%101) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(165), int8]) */;
    %103 = floor_divide(%98, %99) /* ty=Tensor[(3, 15, 13), float32] */;
    %104 = %102.2;
    (%103, %104, meta[relay.Constant][9] /* ty=Tensor[(165), int8] */)
  };
  %105() /* ty=(Tensor[(3, 15, 13), float32], Tensor[(165), int8], Tensor[(165), int8]) */
}

def @func_5023(%var_5020: Tensor[(70), int64], %var_5021: Tensor[(770), float32], %var_5022: Tensor[(143), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(143), float32], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32], Tensor[(4, 3, 11), float64]) {
  %118 = fn (%var_4995: Tensor[(70), int64], %var_4996: Tensor[(770), float32], %var_4997: Tensor[(143), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(143), float32], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32], Tensor[(4, 3, 11), float64]) {
    %106 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %107 = cast(%var_4995, dtype="int64") /* ty=Tensor[(70), int64] */;
    %108 = cast(%var_4996, dtype="float32") /* ty=Tensor[(770), float32] */;
    %109 = cast(%var_4997, dtype="float32") /* ty=Tensor[(143), float32] */;
    %110 = reshape(%106, newshape=[]) /* ty=int64 */;
    %111 = reshape(%107, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
    %112 = reshape(%108, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %113 = reshape(%109, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %114 = @func_2388(%110, %111, %112, %113) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
    %115 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
    %116 = %114.4;
    %117 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
    (%115, %116, -6 /* ty=int64 */, %var_4995, %var_4996, %var_4997, %117)
  };
  %118(%var_5020, %var_5021, %var_5022) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(143), float32], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32], Tensor[(4, 3, 11), float64]) */
}

def @func_8021() -> Tensor[(154), float32] {
  %120 = fn () -> Tensor[(154), float32] {
    %119 = @func_8014() /* ty=(Tensor[(3, 15, 13), int8], Tensor[(154), float32], Tensor[(4, 84), int32]) */;
    %119.1
  };
  %120() /* ty=Tensor[(154), float32] */
}

def @func_8841(%var_8839: int16, %var_8840: Tensor[(11, 15, 7), int16]) -> Tensor[(11, 15, 7), bool] {
  @func_8837(%var_8839, %var_8840) /* ty=Tensor[(11, 15, 7), bool] */
}

def @func_2245(%var_2242: Tensor[(5, 8, 9), float32], %var_2243: float32, %var_2244: Tensor[(143), float32]) -> (Tensor[(5, 8, 9), float32], Tensor[(240), float32], float32, Tensor[(143), float32], Tensor[(770), float32]) {
  %134 = fn (%var_2217: Tensor[(5, 8, 9), float32], %var_2222: float32, %var_2223: Tensor[(143), float32]) -> (Tensor[(5, 8, 9), float32], Tensor[(240), float32], float32, Tensor[(143), float32], Tensor[(770), float32]) {
    %121 = cast(%var_2217, dtype="float32") /* ty=Tensor[(5, 8, 9), float32] */;
    %122 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(5, 8, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %123 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 8, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 9), float32] */;
    %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %125 = cast(%var_2222, dtype="float32") /* ty=float32 */;
    %126 = cast(%var_2223, dtype="float32") /* ty=Tensor[(143), float32] */;
    %127 = cast(meta[relay.Constant][11] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
    %128 = reshape(%125, newshape=[]) /* ty=float32 */;
    %129 = reshape(%126, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %130 = reshape(%127, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %131 = @func_1526(%128, %129, %130) /* ty=(Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) */;
    %132 = multiply(%123, %124) /* ty=Tensor[(5, 8, 9), float32] */;
    %133 = %131.4;
    (%132, %133, %var_2222, %var_2223, meta[relay.Constant][11] /* ty=Tensor[(770), float32] */)
  };
  %134(%var_2242, %var_2243, %var_2244) /* ty=(Tensor[(5, 8, 9), float32], Tensor[(240), float32], float32, Tensor[(143), float32], Tensor[(770), float32]) */
}

def @func_3984() -> Tensor[(4, 3, 11), float32] {
  %137 = fn () -> Tensor[(4, 3, 11), float32] {
    %135 = @func_3068() /* ty=Tensor[(4, 3, 11), float64] */;
    %136 = cast(%135, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
    tan(%136) /* ty=Tensor[(4, 3, 11), float32] */
  };
  %137() /* ty=Tensor[(4, 3, 11), float32] */
}

def @func_5644() -> (Tensor[(3, 15, 13), float32], Tensor[(4, 3, 11), float64]) {
  @func_5642() /* ty=(Tensor[(3, 15, 13), float32], Tensor[(4, 3, 11), float64]) */
}

def @func_8371(%var_8369: Tensor[(1, 15, 13), float64]) -> Tensor[(1, 15, 13), float64] {
  @func_8368(%var_8369) /* ty=Tensor[(1, 15, 13), float64] */
}

def @func_5737() -> (Tensor[(4, 3, 11), float64],) {
  %139 = fn () -> (Tensor[(4, 3, 11), float64],) {
    %138 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
    (%138,)
  };
  %139() /* ty=(Tensor[(4, 3, 11), float64],) */
}

def @func_6019() -> (Tensor[(4, 8, 3), uint64],) {
  %147 = fn () -> (Tensor[(4, 8, 3), uint64],) {
    %140 = @func_5161() /* ty=(Tensor[(4, 8, 3), float32],) */;
    %141 = %140.0;
    %142 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 8, 3), float32] */, dtype="uint64") /* ty=Tensor[(4, 8, 3), uint64] */;
    %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %144 = cast(%141, dtype="uint64") /* ty=Tensor[(4, 8, 3), uint64] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %146 = left_shift(%144, %145) /* ty=Tensor[(4, 8, 3), uint64] */;
    (%146,)
  };
  %147() /* ty=(Tensor[(4, 8, 3), uint64],) */
}

def @func_4257() -> Tensor[(4, 3, 11), float64] {
  @func_4255() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_1420(%var_1416: int64, %var_1417: Tensor[(4, 1, 14), int64], %var_1418: Tensor[(990), float32], %var_1419: Tensor[(240), float32]) -> (Tensor[(4, 1, 14), bool], Tensor[(11, 15, 6), uint8], Tensor[(990), float32], Tensor[(240), float32]) {
  @func_1414(%var_1416, %var_1417, %var_1418, %var_1419) /* ty=(Tensor[(4, 1, 14), bool], Tensor[(11, 15, 6), uint8], Tensor[(990), float32], Tensor[(240), float32]) */
}

def @func_7284() -> (Tensor[(4, 3, 11), float64],) {
  @func_7282() /* ty=(Tensor[(4, 3, 11), float64],) */
}

def @func_4867(%var_4864: Tensor[(5, 3, 7), uint32], %var_4865: Tensor[(770), float32], %var_4866: Tensor[(143), float32]) -> (Tensor[(5, 3, 7), uint32], Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32], Tensor[(143), bool]) {
  %166 = fn (%var_4833: Tensor[(5, 3, 7), uint32], %var_4847: Tensor[(770), float32], %var_4848: Tensor[(143), float32]) -> (Tensor[(5, 3, 7), uint32], Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32], Tensor[(143), bool]) {
    %148 = cast(%var_4833, dtype="uint32") /* ty=Tensor[(5, 3, 7), uint32] */;
    %149 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(5, 3, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %150 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 3, 7), uint32] */, dtype="uint32") /* ty=Tensor[(5, 3, 7), uint32] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %152 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %153 = cast(meta[relay.Constant][14] /* ty=Tensor[(70), int64] */, dtype="int64") /* ty=Tensor[(70), int64] */;
    %154 = cast(%var_4847, dtype="float32") /* ty=Tensor[(770), float32] */;
    %155 = cast(%var_4848, dtype="float32") /* ty=Tensor[(143), float32] */;
    %156 = reshape(%152, newshape=[]) /* ty=int64 */;
    %157 = reshape(%153, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
    %158 = reshape(%154, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %159 = reshape(%155, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %160 = @func_2388(%156, %157, %158, %159) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
    %161 = %160.4;
    %162 = cast(%161, dtype="bool") /* ty=Tensor[(143), bool] */;
    %163 = cast(7 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %164 = minimum(%150, %151) /* ty=Tensor[(5, 3, 7), uint32] */;
    %165 = greater(%162, %163) /* ty=Tensor[(143), bool] */;
    (%164, meta[relay.Constant][14] /* ty=Tensor[(70), int64] */, %var_4847, %var_4848, %165)
  };
  %166(%var_4864, %var_4865, %var_4866) /* ty=(Tensor[(5, 3, 7), uint32], Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32], Tensor[(143), bool]) */
}

def @func_3068() -> Tensor[(4, 3, 11), float64] {
  %167 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %167.0
}

def @func_3243(%var_3241: Tensor[(8, 42), int32], %var_3242: int64) -> (Tensor[(4, 3, 11), float64], Tensor[(14, 8, 3), bool], Tensor[(8, 42), int32], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) {
  @func_3239(%var_3241, %var_3242) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(14, 8, 3), bool], Tensor[(8, 42), int32], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) */
}

def @func_195(%var_193: float32, %var_194: Tensor[(15, 16, 1), float32]) -> (Tensor[(15, 16, 1), float32],) {
  %171 = fn (%var_162: float32, %var_163: Tensor[(15, 16, 1), float32]) -> (Tensor[(15, 16, 1), float32],) {
    %168 = cast(%var_162, dtype="float32") /* ty=float32 */;
    %169 = cast(%var_163, dtype="float32") /* ty=Tensor[(15, 16, 1), float32] */;
    %170 = floor_mod(%168, %169) /* ty=Tensor[(15, 16, 1), float32] */;
    (%170,)
  };
  %171(%var_193, %var_194) /* ty=(Tensor[(15, 16, 1), float32],) */
}

def @func_4680(%var_4678: Tensor[(572), float32], %var_4679: Tensor[(143), float32]) -> (Tensor[(770), float32], Tensor[(572), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(143), float32], Tensor[(572), float32]) {
  @func_4676(%var_4678, %var_4679) /* ty=(Tensor[(770), float32], Tensor[(572), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(143), float32], Tensor[(572), float32]) */
}

def @func_2897(%var_2873: Tensor[(14, 8, 3), int32]) -> (Tensor[(14, 8, 3), bool], Tensor[(1, 352), uint32], Tensor[(154), float32], Tensor[(110, 9), float32], Tensor[(2, 120), float32]) {
  %172 = cast(%var_2873, dtype="bool") /* ty=Tensor[(14, 8, 3), bool] */;
  %173 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(14, 8, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 8, 3), int32] */, dtype="bool") /* ty=Tensor[(14, 8, 3), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = cast(meta[relay.Constant][16] /* ty=Tensor[(154), float32] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %177 = cast(meta[relay.Constant][17] /* ty=Tensor[(110, 9), float32] */, dtype="float32") /* ty=Tensor[(110, 9), float32] */;
  %178 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 120), float32] */, dtype="float32") /* ty=Tensor[(2, 120), float32] */;
  %179 = reshape(%176, newshape=[11, 7, 2]) /* ty=Tensor[(11, 7, 2), float32] */;
  %180 = reshape(%177, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %181 = reshape(%178, newshape=[240, 1]) /* ty=Tensor[(240, 1), float32] */;
  %182 = @func_2191(%179, %180, %181) /* ty=(Tensor[(11, 7, 2), float32], Tensor[(11, 7, 2), bool], float32, Tensor[(1, 352), uint32], Tensor[(990), float32], Tensor[(240, 1), float32]) */;
  %183 = less(%174, %175) /* ty=Tensor[(14, 8, 3), bool] */;
  %184 = %182.3;
  (%183, %184, meta[relay.Constant][16] /* ty=Tensor[(154), float32] */, meta[relay.Constant][17] /* ty=Tensor[(110, 9), float32] */, meta[relay.Constant][18] /* ty=Tensor[(2, 120), float32] */)
}

def @func_4039() -> Tensor[(4, 3, 11), float64] {
  %185 = fn () -> Tensor[(4, 3, 11), float64] {
    @func_3704() /* ty=Tensor[(4, 3, 11), float64] */
  };
  %185() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_5044() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %189 = fn () -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
    %186 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
    %187 = %186.0;
    %188 = @func_3704() /* ty=Tensor[(4, 3, 11), float64] */;
    (%187, %188)
  };
  %189() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */
}

def @func_3005(%var_3003: Tensor[(9, 7, 14), uint32], %var_3004: Tensor[(121), float64]) -> (Tensor[(9, 7, 14), uint32], Tensor[(240), float32], Tensor[(121), float64], int64, Tensor[(360), float32], Tensor[(64), uint64], Tensor[(240), float32]) {
  @func_3001(%var_3003, %var_3004) /* ty=(Tensor[(9, 7, 14), uint32], Tensor[(240), float32], Tensor[(121), float64], int64, Tensor[(360), float32], Tensor[(64), uint64], Tensor[(240), float32]) */
}

def @func_5140() -> (Tensor[(7, 4, 6), float64],) {
  %192 = fn () -> (Tensor[(7, 4, 6), float64],) {
    %190 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 6), float64] */;
    %191 = atan(%190) /* ty=Tensor[(7, 4, 6), float64] */;
    (%191,)
  };
  %192() /* ty=(Tensor[(7, 4, 6), float64],) */
}

def @func_2326(%var_2322: Tensor[(9, 14, 10), int8], %var_2323: Tensor[(9, 14, 10), int8], %var_2324: float32, %var_2325: Tensor[(240), float32]) -> (Tensor[(9, 14, 10), int8], Tensor[(15, 16, 1), float32], float32, Tensor[(240), float32]) {
  @func_2320(%var_2322, %var_2323, %var_2324, %var_2325) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(15, 16, 1), float32], float32, Tensor[(240), float32]) */
}

def @func_7896() -> (Tensor[(6, 3, 6), float64], Tensor[(4, 3, 11), float32]) {
  %193 = @func_3889() /* ty=Tensor[(6, 3, 6), float32] */;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %195 = sqrt(%194) /* ty=Tensor[(6, 3, 6), float64] */;
  %196 = @func_7866() /* ty=Tensor[(4, 3, 11), float32] */;
  (%195, %196)
}

def @func_646(%var_600: Tensor[(16, 11, 2), uint32], %var_622: Tensor[(990), float32], %var_624: Tensor[(240), float32]) -> (Tensor[(16, 11, 2), float64], Tensor[(16, 11, 2), uint16], Tensor[(24, 10), float32], Tensor[(990), float32], float32, Tensor[(240), float32], Tensor[(15, 16, 1), float32], float32) {
  %197 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 11, 2), uint32] */, dtype="bool") /* ty=Tensor[(16, 11, 2), bool] */;
  %198 = shape_of(%var_600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_600, dtype="bool") /* ty=Tensor[(16, 11, 2), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = equal(%199, %200) /* ty=Tensor[(16, 11, 2), bool] */;
  %202 = cast(%201, dtype="float64") /* ty=Tensor[(16, 11, 2), float64] */;
  %203 = sqrt(%202) /* ty=Tensor[(16, 11, 2), float64] */;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(16, 11, 2), float64] */;
  %205 = cast(%203, dtype="uint16") /* ty=Tensor[(16, 11, 2), uint16] */;
  %206 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(16, 11, 2), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 11, 2), uint32] */, dtype="uint16") /* ty=Tensor[(16, 11, 2), uint16] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %209 = cast(%var_622, dtype="float32") /* ty=Tensor[(990), float32] */;
  %210 = cast(-1.66469f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %211 = cast(%var_624, dtype="float32") /* ty=Tensor[(240), float32] */;
  %212 = reshape(%209, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float32] */;
  %213 = reshape(%210, newshape=[]) /* ty=float32 */;
  %214 = reshape(%211, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %215 = @func_441(%212, %213, %214) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */;
  %216 = cast(-1.66469f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %217 = %215.3;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %219 = reshape(%216, newshape=[]) /* ty=float32 */;
  %220 = reshape(%218, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
  %221 = @func_192(%219, %220) /* ty=(Tensor[(15, 16, 1), float32],) */;
  %222 = cast(%var_622, dtype="float32") /* ty=Tensor[(990), float32] */;
  %223 = cast(-1.66469f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %224 = %221.0;
  %225 = cast(%224, dtype="float32") /* ty=Tensor[(15, 16, 1), float32] */;
  %226 = reshape(%222, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float32] */;
  %227 = reshape(%223, newshape=[]) /* ty=float32 */;
  %228 = reshape(%225, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %229 = @func_441(%226, %227, %228) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */;
  %230 = exp(%204) /* ty=Tensor[(16, 11, 2), float64] */;
  %231 = logical_xor(%207, %208) /* ty=Tensor[(16, 11, 2), uint16] */;
  %232 = %229.2;
  (%230, %231, %217, %var_622, -1.66469f /* ty=float32 */, %var_624, %224, %232)
}

def @func_7593(%var_7571: Tensor[(15, 9, 9), int8], %var_7579: Tensor[(90), float64], %var_7581: Tensor[(770), float32]) -> (Tensor[(15, 9, 9), bool], Tensor[(105), uint32], Tensor[(90), float64], Tensor[(105), uint32], Tensor[(770), float32]) {
  %233 = cast(%var_7571, dtype="bool") /* ty=Tensor[(15, 9, 9), bool] */;
  %234 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(15, 9, 9), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 9, 9), int8] */, dtype="bool") /* ty=Tensor[(15, 9, 9), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %237 = cast(%var_7579, dtype="float64") /* ty=Tensor[(90), float64] */;
  %238 = cast(meta[relay.Constant][22] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %239 = cast(%var_7581, dtype="float32") /* ty=Tensor[(770), float32] */;
  %240 = reshape(%237, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %241 = reshape(%238, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %242 = reshape(%239, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %243 = @func_5284(%240, %241, %242) /* ty=(Tensor[(4, 3, 11), float32], Tensor[(4, 3, 11), float32], Tensor[(9, 10, 1), float64], Tensor[(90), float64], Tensor[(770), float32], Tensor[(105), uint32], Tensor[(770), float32], Tensor[(143), float32]) */;
  %244 = less_equal(%235, %236) /* ty=Tensor[(15, 9, 9), bool] */;
  %245 = %243.5;
  (%244, %245, %var_7579, meta[relay.Constant][22] /* ty=Tensor[(105), uint32] */, %var_7581)
}

def @func_3699(%var_3697: Tensor[(4, 3, 11), float64]) -> (Tensor[(4, 3, 11), uint32],) {
  @func_3696(%var_3697) /* ty=(Tensor[(4, 3, 11), uint32],) */
}

def @func_7674() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %246 = @func_5642() /* ty=(Tensor[(3, 15, 13), float32], Tensor[(4, 3, 11), float64]) */;
  %247 = %246.1;
  %248 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  (%247, %248)
}

def @func_4790() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  @func_4788() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */
}

def @func_7951() -> Tensor[(4, 3, 11), float64] {
  @func_7949() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_1650(%var_1647: uint64, %var_1648: Tensor[(1, 16, 4), uint64], %var_1649: Tensor[(240), float32]) -> (Tensor[(1, 16, 4), uint64], Tensor[(15, 16, 1), float32], Tensor[(240), float32]) {
  @func_1645(%var_1647, %var_1648, %var_1649) /* ty=(Tensor[(1, 16, 4), uint64], Tensor[(15, 16, 1), float32], Tensor[(240), float32]) */
}

def @func_8344() -> Tensor[(4, 3, 11), float64] {
  %250 = fn () -> Tensor[(4, 3, 11), float64] {
    %249 = @func_4336() /* ty=(Tensor[(4, 3, 11), float64],) */;
    %249.0
  };
  %250() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_4480(%var_4479: Tensor[(15, 1, 9), float32]) -> (Tensor[(15, 9, 9), bool], Tensor[(6, 3, 6), float32], Tensor[(4, 3, 11), float64]) {
  %270 = fn (%var_4426: Tensor[(15, 1, 9), float32]) -> (Tensor[(15, 9, 9), bool], Tensor[(6, 3, 6), float32], Tensor[(4, 3, 11), float64]) {
    %251 = cast(%var_4426, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
    %252 = cos(%251) /* ty=Tensor[(15, 1, 9), float32] */;
    %253 = cast(%252, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
    %254 = shape_of(%var_4426, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%var_4426, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %257 = less_equal(%255, %256) /* ty=Tensor[(15, ?, 9), bool] */;
    %258 = cast(%257, dtype="float32") /* ty=Tensor[(15, ?, 9), float32] */;
    %259 = exp(%258) /* ty=Tensor[(15, ?, 9), float32] */;
    %260 = cast(%257, dtype="int16") /* ty=Tensor[(15, ?, 9), int16] */;
    %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%259, dtype="int16") /* ty=Tensor[(15, ?, 9), int16] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %264 = add(%262, %263) /* ty=Tensor[(15, ?, 9), int16] */;
    %265 = cast(%264, dtype="bool") /* ty=Tensor[(15, ?, 9), bool] */;
    %266 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 9, 9), int16] */, dtype="bool") /* ty=Tensor[(15, 9, 9), bool] */;
    %267 = not_equal(%265, %266) /* ty=Tensor[(15, 9, 9), bool] */;
    %268 = @func_3889() /* ty=Tensor[(6, 3, 6), float32] */;
    %269 = @func_3068() /* ty=Tensor[(4, 3, 11), float64] */;
    (%267, %268, %269)
  };
  %270(%var_4479) /* ty=(Tensor[(15, 9, 9), bool], Tensor[(6, 3, 6), float32], Tensor[(4, 3, 11), float64]) */
}

def @func_5289(%var_5286: Tensor[(90), float64], %var_5287: Tensor[(105), uint32], %var_5288: Tensor[(770), float32]) -> (Tensor[(4, 3, 11), float32], Tensor[(4, 3, 11), float32], Tensor[(9, 10, 1), float64], Tensor[(90), float64], Tensor[(770), float32], Tensor[(105), uint32], Tensor[(770), float32], Tensor[(143), float32]) {
  @func_5284(%var_5286, %var_5287, %var_5288) /* ty=(Tensor[(4, 3, 11), float32], Tensor[(4, 3, 11), float32], Tensor[(9, 10, 1), float64], Tensor[(90), float64], Tensor[(770), float32], Tensor[(105), uint32], Tensor[(770), float32], Tensor[(143), float32]) */
}

def @func_6496() -> Tensor[(3, 15, 13), float32] {
  @func_6494() /* ty=Tensor[(3, 15, 13), float32] */
}

def @func_8084() -> Tensor[(13, 1, 11), float32] {
  %271 = fn () -> Tensor[(13, 1, 11), float32] {
    @func_3049() /* ty=Tensor[(13, 1, 11), float32] */
  };
  %271() /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_6692() -> (Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) {
  @func_6690() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) */
}

def @func_1987(%var_1985: Tensor[(5, 6, 13), float32]) -> (Tensor[(5, 6, 13), float32],) {
  @func_1984(%var_1985) /* ty=(Tensor[(5, 6, 13), float32],) */
}

def @func_5813() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  @func_5811() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */
}

def @func_6494() -> Tensor[(3, 15, 13), float32] {
  %272 = @func_6419() /* ty=(Tensor[(3, 15, 13), float32],) */;
  %272.0
}

def @func_5163() -> (Tensor[(4, 8, 3), float32],) {
  @func_5161() /* ty=(Tensor[(4, 8, 3), float32],) */
}

def @func_6960(%var_6958: Tensor[(770), float32]) -> (Tensor[(4, 8, 3), uint8], Tensor[(13, 1, 11), float32], Tensor[(143), float32], float32, Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float64], Tensor[(4, 8, 3), float32], Tensor[(4, 3, 11), float64], Tensor[(135), float32]) {
  @func_6957(%var_6958) /* ty=(Tensor[(4, 8, 3), uint8], Tensor[(13, 1, 11), float32], Tensor[(143), float32], float32, Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float64], Tensor[(4, 8, 3), float32], Tensor[(4, 3, 11), float64], Tensor[(135), float32]) */
}

def @func_2666() -> (Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) {
  %273 = cast(8.00204f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %274 = cast(meta[relay.Constant][24] /* ty=Tensor[(143, 1), float32] */, dtype="float32") /* ty=Tensor[(143, 1), float32] */;
  %275 = cast(meta[relay.Constant][25] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %276 = reshape(%273, newshape=[]) /* ty=float32 */;
  %277 = reshape(%274, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %278 = reshape(%275, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %279 = @func_1526(%276, %277, %278) /* ty=(Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) */;
  %280 = cast(meta[relay.Constant][25] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %281 = cast(meta[relay.Constant][24] /* ty=Tensor[(143, 1), float32] */, dtype="float32") /* ty=Tensor[(143, 1), float32] */;
  %282 = reshape(%280, newshape=[14, 5, 11]) /* ty=Tensor[(14, 5, 11), float32] */;
  %283 = reshape(%281, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %284 = @func_896(%282, %283) /* ty=(Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) */;
  %285 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %286 = cos(%285) /* ty=Tensor[(4, 3, 11), float64] */;
  %287 = cast(%286, dtype="uint16") /* ty=Tensor[(4, 3, 11), uint16] */;
  %288 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(4, 3, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 3, 11), float64] */, dtype="uint16") /* ty=Tensor[(4, 3, 11), uint16] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %291 = %279.7;
  %292 = %284.1;
  %293 = subtract(%289, %290) /* ty=Tensor[(4, 3, 11), uint16] */;
  (%291, 8.00204f /* ty=float32 */, meta[relay.Constant][24] /* ty=Tensor[(143, 1), float32] */, meta[relay.Constant][25] /* ty=Tensor[(770), float32] */, %292, %293)
}

def @func_8987() -> (Tensor[(4, 8, 3), uint64], Tensor[(3, 15, 13), float32]) {
  %298 = fn () -> (Tensor[(4, 8, 3), uint64], Tensor[(3, 15, 13), float32]) {
    %294 = @func_6018() /* ty=(Tensor[(4, 8, 3), uint64],) */;
    %295 = @func_6419() /* ty=(Tensor[(3, 15, 13), float32],) */;
    %296 = %294.0;
    %297 = %295.0;
    (%296, %297)
  };
  %298() /* ty=(Tensor[(4, 8, 3), uint64], Tensor[(3, 15, 13), float32]) */
}

def @func_3070() -> Tensor[(4, 3, 11), float64] {
  @func_3068() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_9344() -> Tensor[(286, 2), float64] {
  %299 = @func_7433() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(572), float32], Tensor[(286, 2), float32], Tensor[(990), float32], Tensor[(352), uint32], Tensor[(4, 3, 11), float64]) */;
  %300 = %299.2;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(286, 2), float64] */;
  sqrt(%301) /* ty=Tensor[(286, 2), float64] */
}

def @func_5811() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %302 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
  %303 = @func_3704() /* ty=Tensor[(4, 3, 11), float64] */;
  (%302, %303)
}

def @func_9346() -> Tensor[(286, 2), float64] {
  @func_9344() /* ty=Tensor[(286, 2), float64] */
}

def @func_1645(%var_1627: uint64, %var_1628: Tensor[(1, 16, 4), uint64], %var_1633: Tensor[(240), float32]) -> (Tensor[(1, 16, 4), uint64], Tensor[(15, 16, 1), float32], Tensor[(240), float32]) {
  %304 = cast(%var_1627, dtype="uint64") /* ty=uint64 */;
  %305 = cast(%var_1628, dtype="uint64") /* ty=Tensor[(1, 16, 4), uint64] */;
  %306 = cast(%var_1627, dtype="float32") /* ty=float32 */;
  %307 = cast(%var_1633, dtype="float32") /* ty=Tensor[(240), float32] */;
  %308 = reshape(%306, newshape=[]) /* ty=float32 */;
  %309 = reshape(%307, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
  %310 = @func_192(%308, %309) /* ty=(Tensor[(15, 16, 1), float32],) */;
  %311 = right_shift(%304, %305) /* ty=Tensor[(1, 16, 4), uint64] */;
  %312 = %310.0;
  (%311, %312, %var_1633)
}

def @func_9589() -> (float32,) {
  %313 = @func_8413() /* ty=float32 */;
  (%313,)
}

def @func_9649(%var_9648: Tensor[(4, 3, 12), uint16]) -> Tensor[(4, 3, 12), uint16] {
  %318 = fn (%var_9642: Tensor[(4, 3, 12), uint16]) -> Tensor[(4, 3, 12), uint16] {
    %314 = cast(%var_9642, dtype="uint16") /* ty=Tensor[(4, 3, 12), uint16] */;
    %315 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(4, 3, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %316 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 3, 12), uint16] */, dtype="uint16") /* ty=Tensor[(4, 3, 12), uint16] */;
    %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    logical_xor(%316, %317) /* ty=Tensor[(4, 3, 12), uint16] */
  };
  %318(%var_9648) /* ty=Tensor[(4, 3, 12), uint16] */
}

def @func_7433() -> (Tensor[(4, 3, 11), float64], Tensor[(572), float32], Tensor[(286, 2), float32], Tensor[(990), float32], Tensor[(352), uint32], Tensor[(4, 3, 11), float64]) {
  %319 = @func_5811() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %320 = cast(meta[relay.Constant][28] /* ty=Tensor[(286, 2), float32] */, dtype="float32") /* ty=Tensor[(286, 2), float32] */;
  %321 = reshape(%320, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %322 = @func_4206(%321) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) */;
  %323 = cast(meta[relay.Constant][29] /* ty=Tensor[(352), uint32] */, dtype="uint32") /* ty=Tensor[(352), uint32] */;
  %324 = reshape(%323, newshape=[2, 176]) /* ty=Tensor[(2, 176), uint32] */;
  %325 = @func_2804(%324) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(240), float32], Tensor[(2, 176), uint32], Tensor[(990), float32], Tensor[(240), float32]) */;
  %326 = @func_5811() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %327 = %319.1;
  %328 = %322.2;
  %329 = %325.3;
  %330 = %326.1;
  (%327, %328, meta[relay.Constant][28] /* ty=Tensor[(286, 2), float32] */, %329, meta[relay.Constant][29] /* ty=Tensor[(352), uint32] */, %330)
}

def @func_9725() -> (Tensor[(4, 3, 11), float64],) {
  @func_9723() /* ty=(Tensor[(4, 3, 11), float64],) */
}

def @func_7451() -> Tensor[(4, 3, 11), float64] {
  @func_4255() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_8014() -> (Tensor[(3, 15, 13), int8], Tensor[(154), float32], Tensor[(4, 84), int32]) {
  %331 = @func_5642() /* ty=(Tensor[(3, 15, 13), float32], Tensor[(4, 3, 11), float64]) */;
  %332 = %331.0;
  %333 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 15, 13), float32] */, dtype="int8") /* ty=Tensor[(3, 15, 13), int8] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="int8") /* ty=Tensor[(3, 15, 13), int8] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %337 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 84), int32] */, dtype="int32") /* ty=Tensor[(4, 84), int32] */;
  %338 = reshape(%337, newshape=[14, 8, 3]) /* ty=Tensor[(14, 8, 3), int32] */;
  %339 = @func_2897(%338) /* ty=(Tensor[(14, 8, 3), bool], Tensor[(1, 352), uint32], Tensor[(154), float32], Tensor[(110, 9), float32], Tensor[(2, 120), float32]) */;
  %340 = add(%335, %336) /* ty=Tensor[(3, 15, 13), int8] */;
  %341 = %339.2;
  (%340, %341, meta[relay.Constant][31] /* ty=Tensor[(4, 84), int32] */)
}

def @func_2320(%var_2307: Tensor[(9, 14, 10), int8], %var_2308: Tensor[(9, 14, 10), int8], %var_2317: float32, %var_2318: Tensor[(240), float32]) -> (Tensor[(9, 14, 10), int8], Tensor[(15, 16, 1), float32], float32, Tensor[(240), float32]) {
  %342 = cast(%var_2308, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
  %343 = shape_of(%var_2307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%var_2307, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %346 = cast(%var_2317, dtype="float32") /* ty=float32 */;
  %347 = cast(%var_2318, dtype="float32") /* ty=Tensor[(240), float32] */;
  %348 = reshape(%346, newshape=[]) /* ty=float32 */;
  %349 = reshape(%347, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
  %350 = @func_192(%348, %349) /* ty=(Tensor[(15, 16, 1), float32],) */;
  %351 = multiply(%344, %345) /* ty=Tensor[(9, 14, 10), int8] */;
  %352 = %350.0;
  (%351, %352, %var_2317, %var_2318)
}

def @func_9077(%var_9075: Tensor[(154), float32]) -> (Tensor[(154), int32], Tensor[(4, 8, 3), uint64], Tensor[(4, 3, 11), uint32], Tensor[(132), float64]) {
  @func_9074(%var_9075) /* ty=(Tensor[(154), int32], Tensor[(4, 8, 3), uint64], Tensor[(4, 3, 11), uint32], Tensor[(132), float64]) */
}

def @func_7898() -> (Tensor[(6, 3, 6), float64], Tensor[(4, 3, 11), float32]) {
  @func_7896() /* ty=(Tensor[(6, 3, 6), float64], Tensor[(4, 3, 11), float32]) */
}

def @func_3646() -> (Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) {
  %353 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %354 = %353.0;
  %355 = cast(%354, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %356 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %357 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  %358 = exp(%357) /* ty=Tensor[(14, 5, 5), float64] */;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  %360 = log(%355) /* ty=Tensor[(4, 3, 11), float64] */;
  %361 = %356.1;
  %362 = erf(%359) /* ty=Tensor[(14, 5, 5), float64] */;
  (%360, %361, %362)
}

def @func_2807(%var_2805: Tensor[(2, 176), uint32]) -> (Tensor[(4, 3, 11), float64], Tensor[(240), float32], Tensor[(2, 176), uint32], Tensor[(990), float32], Tensor[(240), float32]) {
  @func_2804(%var_2805) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(240), float32], Tensor[(2, 176), uint32], Tensor[(990), float32], Tensor[(240), float32]) */
}

def @func_5060() -> (Tensor[(4, 8, 3), float32],) {
  @func_5058() /* ty=(Tensor[(4, 8, 3), float32],) */
}

def @func_8273(%var_8271: Tensor[(121), float64], %var_8272: float32) -> (Tensor[(4, 8, 3), float32], Tensor[(360), float32], Tensor[(1, 882), uint32], Tensor[(121), float64], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(572), uint32], Tensor[(4, 3, 11), float64], float32, Tensor[(352), uint32], Tensor[(990), float32]) {
  %389 = fn (%var_8222: Tensor[(121), float64], %var_8262: float32) -> (Tensor[(4, 8, 3), float32], Tensor[(360), float32], Tensor[(1, 882), uint32], Tensor[(121), float64], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(572), uint32], Tensor[(4, 3, 11), float64], float32, Tensor[(352), uint32], Tensor[(990), float32]) {
    %363 = @func_5058() /* ty=(Tensor[(4, 8, 3), float32],) */;
    %364 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 882), uint32] */, dtype="uint32") /* ty=Tensor[(1, 882), uint32] */;
    %365 = cast(%var_8222, dtype="float64") /* ty=Tensor[(121), float64] */;
    %366 = reshape(%364, newshape=[9, 7, 14]) /* ty=Tensor[(9, 7, 14), uint32] */;
    %367 = reshape(%365, newshape=[121]) /* ty=Tensor[(121), float64] */;
    %368 = @func_3001(%366, %367) /* ty=(Tensor[(9, 7, 14), uint32], Tensor[(240), float32], Tensor[(121), float64], int64, Tensor[(360), float32], Tensor[(64), uint64], Tensor[(240), float32]) */;
    %369 = cast(meta[relay.Constant][34] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
    %370 = reshape(%369, newshape=[572]) /* ty=Tensor[(572), float32] */;
    %371 = @func_4206(%370) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) */;
    %372 = cast(meta[relay.Constant][35] /* ty=Tensor[(572), float32] */, dtype="uint32") /* ty=Tensor[(572), uint32] */;
    %373 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(572), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %374 = cast(meta[relay.Constant][34] /* ty=Tensor[(572), float32] */, dtype="uint32") /* ty=Tensor[(572), uint32] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %376 = cast(%var_8262, dtype="float32") /* ty=float32 */;
    %377 = cast(meta[relay.Constant][36] /* ty=Tensor[(352), uint32] */, dtype="uint32") /* ty=Tensor[(352), uint32] */;
    %378 = cast(meta[relay.Constant][37] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
    %379 = reshape(%376, newshape=[]) /* ty=float32 */;
    %380 = reshape(%377, newshape=[352]) /* ty=Tensor[(352), uint32] */;
    %381 = reshape(%378, newshape=[330, 3]) /* ty=Tensor[(330, 3), float32] */;
    %382 = @func_4165(%379, %380, %381) /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(240), float32], Tensor[(4, 3, 11), float64], float32, Tensor[(352), uint32], Tensor[(330, 3), float32], Tensor[(3, 15, 13), float32], Tensor[(15, 16, 1260), float32]) */;
    %383 = %363.0;
    %384 = %368.4;
    %385 = @func_3179() /* ty=Tensor[(4, 3, 11), float64] */;
    %386 = %371.0;
    %387 = add(%374, %375) /* ty=Tensor[(572), uint32] */;
    %388 = %382.0;
    (%383, %384, meta[relay.Constant][33] /* ty=Tensor[(1, 882), uint32] */, %var_8222, %385, %386, %387, %388, %var_8262, meta[relay.Constant][36] /* ty=Tensor[(352), uint32] */, meta[relay.Constant][37] /* ty=Tensor[(990), float32] */)
  };
  %389(%var_8271, %var_8272) /* ty=(Tensor[(4, 8, 3), float32], Tensor[(360), float32], Tensor[(1, 882), uint32], Tensor[(121), float64], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(572), uint32], Tensor[(4, 3, 11), float64], float32, Tensor[(352), uint32], Tensor[(990), float32]) */
}

def @func_4788() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %390 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %391 = %390.0;
  %392 = @func_4255() /* ty=Tensor[(4, 3, 11), float64] */;
  (%391, %392)
}

def @func_3890() -> Tensor[(6, 3, 6), float32] {
  %396 = fn () -> Tensor[(6, 3, 6), float32] {
    %393 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
    %394 = rsqrt(%393) /* ty=Tensor[(6, 3, 6), float64] */;
    %395 = cast(%394, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
    atan(%395) /* ty=Tensor[(6, 3, 6), float32] */
  };
  %396() /* ty=Tensor[(6, 3, 6), float32] */
}

def @func_3705() -> Tensor[(4, 3, 11), float64] {
  %397 = fn () -> Tensor[(4, 3, 11), float64] {
    @func_3318() /* ty=Tensor[(4, 3, 11), float64] */
  };
  %397() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_4820() -> Tensor[(3, 15, 13), float32] {
  %398 = fn () -> Tensor[(3, 15, 13), float32] {
    @func_3854() /* ty=Tensor[(3, 15, 13), float32] */
  };
  %398() /* ty=Tensor[(3, 15, 13), float32] */
}

def @func_3820(%var_3817: Tensor[(70), int64], %var_3818: Tensor[(7, 110), float32], %var_3819: Tensor[(143), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), float32], int64, Tensor[(70), int64], Tensor[(7, 110), float32], Tensor[(143), float32]) {
  %410 = fn (%var_3805: Tensor[(70), int64], %var_3806: Tensor[(7, 110), float32], %var_3807: Tensor[(143), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), float32], int64, Tensor[(70), int64], Tensor[(7, 110), float32], Tensor[(143), float32]) {
    %399 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %400 = cast(%var_3805, dtype="int64") /* ty=Tensor[(70), int64] */;
    %401 = cast(%var_3806, dtype="float32") /* ty=Tensor[(7, 110), float32] */;
    %402 = cast(%var_3807, dtype="float32") /* ty=Tensor[(143), float32] */;
    %403 = reshape(%399, newshape=[]) /* ty=int64 */;
    %404 = reshape(%400, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
    %405 = reshape(%401, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %406 = reshape(%402, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %407 = @func_2388(%403, %404, %405, %406) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
    %408 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
    %409 = %407.1;
    (%408, %409, 7 /* ty=int64 */, %var_3805, %var_3806, %var_3807)
  };
  %410(%var_3817, %var_3818, %var_3819) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), float32], int64, Tensor[(70), int64], Tensor[(7, 110), float32], Tensor[(143), float32]) */
}

def @func_3319() -> Tensor[(4, 3, 11), float64] {
  %413 = fn () -> Tensor[(4, 3, 11), float64] {
    %411 = @func_3179() /* ty=Tensor[(4, 3, 11), float64] */;
    %412 = cast(%411, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
    atan(%412) /* ty=Tensor[(4, 3, 11), float64] */
  };
  %413() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_5934() -> (Tensor[(3, 15, 13), float32],) {
  @func_5932() /* ty=(Tensor[(3, 15, 13), float32],) */
}

def @func_8536(%var_8529: uint16, %var_8530: Tensor[(2, 1, 3), uint16]) -> (Tensor[(2, 1, 3), uint16],) {
  %414 = cast(%var_8529, dtype="uint16") /* ty=uint16 */;
  %415 = cast(%var_8530, dtype="uint16") /* ty=Tensor[(2, 1, 3), uint16] */;
  %416 = logical_xor(%414, %415) /* ty=Tensor[(2, 1, 3), uint16] */;
  (%416,)
}

def @func_3153(%var_3150: Tensor[(16, 4, 3), float64], %var_3151: int64, %var_3152: Tensor[(16, 4, 3), float64]) -> (Tensor[(990), float32], int64, Tensor[(56), int64], Tensor[(240), float32], Tensor[(16, 4, 3), uint16], Tensor[(990), float64]) {
  %436 = fn (%var_3109: Tensor[(16, 4, 3), float64], %var_3113: int64, %var_3125: Tensor[(16, 4, 3), float64]) -> (Tensor[(990), float32], int64, Tensor[(56), int64], Tensor[(240), float32], Tensor[(16, 4, 3), uint16], Tensor[(990), float64]) {
    %417 = cast(%var_3113, dtype="int64") /* ty=int64 */;
    %418 = cast(meta[relay.Constant][39] /* ty=Tensor[(56), int64] */, dtype="int64") /* ty=Tensor[(56), int64] */;
    %419 = cast(meta[relay.Constant][40] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
    %420 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %421 = reshape(%417, newshape=[]) /* ty=int64 */;
    %422 = reshape(%418, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), int64] */;
    %423 = reshape(%419, newshape=[990]) /* ty=Tensor[(990), float32] */;
    %424 = reshape(%420, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %425 = @func_1414(%421, %422, %423, %424) /* ty=(Tensor[(4, 1, 14), bool], Tensor[(11, 15, 6), uint8], Tensor[(990), float32], Tensor[(240), float32]) */;
    %426 = cast(%var_3109, dtype="float64") /* ty=Tensor[(16, 4, 3), float64] */;
    %427 = log10(%426) /* ty=Tensor[(16, 4, 3), float64] */;
    %428 = cast(%var_3125, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
    %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
    %430 = cast(%427, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
    %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %432 = cast(meta[relay.Constant][40] /* ty=Tensor[(990), float32] */, dtype="float64") /* ty=Tensor[(990), float64] */;
    %433 = %425.2;
    %434 = bitwise_or(%430, %431) /* ty=Tensor[(16, 4, 3), uint16] */;
    %435 = sinh(%432) /* ty=Tensor[(990), float64] */;
    (%433, %var_3113, meta[relay.Constant][39] /* ty=Tensor[(56), int64] */, meta[relay.Constant][41] /* ty=Tensor[(240), float32] */, %434, %435)
  };
  %436(%var_3150, %var_3151, %var_3152) /* ty=(Tensor[(990), float32], int64, Tensor[(56), int64], Tensor[(240), float32], Tensor[(16, 4, 3), uint16], Tensor[(990), float64]) */
}

def @func_7342(%var_7340: uint64, %var_7341: Tensor[(64), uint64]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], uint64, Tensor[(64), uint64], Tensor[(240), float32]) {
  %447 = fn (%var_7335: uint64, %var_7336: Tensor[(64), uint64]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], uint64, Tensor[(64), uint64], Tensor[(240), float32]) {
    %437 = @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */;
    %438 = cast(%var_7335, dtype="uint64") /* ty=uint64 */;
    %439 = cast(%var_7336, dtype="uint64") /* ty=Tensor[(64), uint64] */;
    %440 = cast(meta[relay.Constant][42] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %441 = reshape(%438, newshape=[]) /* ty=uint64 */;
    %442 = reshape(%439, newshape=[1, 64]) /* ty=Tensor[(1, 64), uint64] */;
    %443 = reshape(%440, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %444 = @func_6124(%441, %442, %443) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(4, 8, 3), float32], Tensor[(9, 10, ?), float32], uint64, Tensor[(15, 15, 11), bool], Tensor[(1, 165), int8], Tensor[(9, 10, 240), bool], Tensor[(?, 64), int16]) */;
    %445 = %437.0;
    %446 = %444.1;
    (%445, %446, %var_7335, %var_7336, meta[relay.Constant][42] /* ty=Tensor[(240), float32] */)
  };
  %447(%var_7340, %var_7341) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], uint64, Tensor[(64), uint64], Tensor[(240), float32]) */
}

def @func_7676() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  @func_7674() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */
}

def @func_7453() -> Tensor[(4, 3, 11), float64] {
  @func_7451() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_8540(%var_8538: uint16, %var_8539: Tensor[(2, 1, 3), uint16]) -> (Tensor[(2, 1, 3), uint16],) {
  @func_8536(%var_8538, %var_8539) /* ty=(Tensor[(2, 1, 3), uint16],) */
}

def @func_7435() -> (Tensor[(4, 3, 11), float64], Tensor[(572), float32], Tensor[(286, 2), float32], Tensor[(990), float32], Tensor[(352), uint32], Tensor[(4, 3, 11), float64]) {
  @func_7433() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(572), float32], Tensor[(286, 2), float32], Tensor[(990), float32], Tensor[(352), uint32], Tensor[(4, 3, 11), float64]) */
}

def @func_4206(%var_4204: Tensor[(572), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) {
  %448 = cast(%var_4204, dtype="float32") /* ty=Tensor[(572), float32] */;
  %449 = reshape(%448, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %450 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  %451 = @func_3785(%449) /* ty=Tensor[(13, 4, 11), uint64] */;
  (%450, %451, %var_4204)
}

def @func_4209(%var_4207: Tensor[(572), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) {
  @func_4206(%var_4207) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) */
}

def @func_1984(%var_1978: Tensor[(5, 6, 13), float32]) -> (Tensor[(5, 6, 13), float32],) {
  %452 = cast(%var_1978, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
  %453 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(5, 6, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %456 = divide(%454, %455) /* ty=Tensor[(5, 6, 13), float32] */;
  (%456,)
}

def @func_5932() -> (Tensor[(3, 15, 13), float32],) {
  %457 = @func_3854() /* ty=Tensor[(3, 15, 13), float32] */;
  (%457,)
}

def @func_8837(%var_8829: int16, %var_8830: Tensor[(11, 15, 7), int16]) -> Tensor[(11, 15, 7), bool] {
  %458 = cast(%var_8829, dtype="bool") /* ty=bool */;
  %459 = cast(%var_8830, dtype="bool") /* ty=Tensor[(11, 15, 7), bool] */;
  equal(%458, %459) /* ty=Tensor[(11, 15, 7), bool] */
}

def @func_3854() -> Tensor[(3, 15, 13), float32] {
  %460 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 13), float64] */;
  %461 = exp(%460) /* ty=Tensor[(3, 15, 13), float64] */;
  %462 = cast(%461, dtype="bool") /* ty=Tensor[(3, 15, 13), bool] */;
  %463 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(3, 15, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 15, 13), float64] */, dtype="bool") /* ty=Tensor[(3, 15, 13), bool] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %466 = greater_equal(%464, %465) /* ty=Tensor[(3, 15, 13), bool] */;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(3, 15, 13), float32] */;
  tan(%467) /* ty=Tensor[(3, 15, 13), float32] */
}

def @func_7023() -> (Tensor[(4, 3, 11), float64], Tensor[(3, 15, 13), float64], Tensor[(572), float32]) {
  @func_7021() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(3, 15, 13), float64], Tensor[(572), float32]) */
}

def @func_2196(%var_2193: Tensor[(11, 7, 2), float32], %var_2194: Tensor[(990), float32], %var_2195: Tensor[(240, 1), float32]) -> (Tensor[(11, 7, 2), float32], Tensor[(11, 7, 2), bool], float32, Tensor[(1, 352), uint32], Tensor[(990), float32], Tensor[(240, 1), float32]) {
  @func_2191(%var_2193, %var_2194, %var_2195) /* ty=(Tensor[(11, 7, 2), float32], Tensor[(11, 7, 2), bool], float32, Tensor[(1, 352), uint32], Tensor[(990), float32], Tensor[(240, 1), float32]) */
}

def @func_7386() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 8, 3), float32]) {
  %472 = fn () -> (Tensor[(4, 3, 11), float64], Tensor[(4, 8, 3), float32]) {
    %468 = @func_5811() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
    %469 = @func_6657() /* ty=(Tensor[(4, 8, 3), float32],) */;
    %470 = %468.1;
    %471 = %469.0;
    (%470, %471)
  };
  %472() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 8, 3), float32]) */
}

def @func_5065() -> Tensor[(4, 8, 3), float32] {
  %474 = fn () -> Tensor[(4, 8, 3), float32] {
    %473 = @func_5058() /* ty=(Tensor[(4, 8, 3), float32],) */;
    %473.0
  };
  %474() /* ty=Tensor[(4, 8, 3), float32] */
}

def @func_5058() -> (Tensor[(4, 8, 3), float32],) {
  %475 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 3), float32] */;
  %476 = sinh(%475) /* ty=Tensor[(4, 8, 3), float32] */;
  (%476,)
}

def @func_9216() -> (Tensor[(13, 1, 11), float32],) {
  %477 = @func_8083() /* ty=Tensor[(13, 1, 11), float32] */;
  (%477,)
}

def @func_5084() -> (Tensor[(4, 3, 11), float64],) {
  %478 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
  (%478,)
}

def @func_1530(%var_1527: float32, %var_1528: Tensor[(143), float32], %var_1529: Tensor[(770), float32]) -> (Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) {
  %516 = fn (%var_1452: float32, %var_1488: Tensor[(143), float32], %var_1492: Tensor[(770), float32]) -> (Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) {
    %479 = cast(%var_1452, dtype="float32") /* ty=float32 */;
    %480 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
    %481 = cast(%var_1452, dtype="int64") /* ty=int64 */;
    %482 = cast(meta[relay.Constant][47] /* ty=Tensor[(56, 1), int64] */, dtype="int64") /* ty=Tensor[(56, 1), int64] */;
    %483 = cast(meta[relay.Constant][48] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
    %484 = cast(meta[relay.Constant][49] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %485 = reshape(%481, newshape=[]) /* ty=int64 */;
    %486 = reshape(%482, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), int64] */;
    %487 = reshape(%483, newshape=[990]) /* ty=Tensor[(990), float32] */;
    %488 = reshape(%484, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %489 = @func_1414(%485, %486, %487, %488) /* ty=(Tensor[(4, 1, 14), bool], Tensor[(11, 15, 6), uint8], Tensor[(990), float32], Tensor[(240), float32]) */;
    %490 = cast(%var_1452, dtype="float32") /* ty=float32 */;
    %491 = %489.3;
    %492 = cast(%491, dtype="float32") /* ty=Tensor[(240), float32] */;
    %493 = reshape(%490, newshape=[]) /* ty=float32 */;
    %494 = reshape(%492, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
    %495 = @func_192(%493, %494) /* ty=(Tensor[(15, 16, 1), float32],) */;
    %496 = cast(%var_1488, dtype="float32") /* ty=Tensor[(143), float32] */;
    %497 = reshape(%496, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
    %498 = @func_687(%497) /* ty=(Tensor[(13, 1, 11), float32],) */;
    %499 = cast(%var_1492, dtype="float32") /* ty=Tensor[(770), float32] */;
    %500 = %498.0;
    %501 = cast(%500, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
    %502 = reshape(%499, newshape=[14, 5, 11]) /* ty=Tensor[(14, 5, 11), float32] */;
    %503 = reshape(%501, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %504 = @func_896(%502, %503) /* ty=(Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) */;
    %505 = cast(%var_1492, dtype="float32") /* ty=Tensor[(770), float32] */;
    %506 = cast(%var_1488, dtype="float32") /* ty=Tensor[(143), float32] */;
    %507 = reshape(%505, newshape=[14, 5, 11]) /* ty=Tensor[(14, 5, 11), float32] */;
    %508 = reshape(%506, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %509 = @func_896(%507, %508) /* ty=(Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) */;
    %510 = %509.1;
    %511 = cast(%510, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
    %512 = floor_mod(%479, %480) /* ty=Tensor[(1, 1, 16), float32] */;
    %513 = %495.0;
    %514 = %504.0;
    %515 = asinh(%511) /* ty=Tensor[(13, 1, 11), float32] */;
    (%512, %491, meta[relay.Constant][47] /* ty=Tensor[(56, 1), int64] */, meta[relay.Constant][48] /* ty=Tensor[(990), float32] */, meta[relay.Constant][49] /* ty=Tensor[(240), float32] */, %513, %500, %var_1488, %514, %var_1492, %515)
  };
  %516(%var_1527, %var_1528, %var_1529) /* ty=(Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) */
}

def @func_2486(%var_2481: Tensor[(11, 11), float64], %var_2482: int64, %var_2483: Tensor[(360), float32], %var_2484: Tensor[(64), uint64], %var_2485: Tensor[(240), float32]) -> (Tensor[(11, 11), float64], Tensor[(143), float32], int64, Tensor[(70), int64], Tensor[(385, 2), float32], Tensor[(143), float32], float32, Tensor[(360), float32], Tensor[(240), float32], Tensor[(64), uint64], Tensor[(240), float32], Tensor[(990), float32], Tensor[(11, 15, 6), uint8]) {
  %561 = fn (%var_2412: Tensor[(11, 11), float64], %var_2419: int64, %var_2444: Tensor[(360), float32], %var_2448: Tensor[(64), uint64], %var_2449: Tensor[(240), float32]) -> (Tensor[(11, 11), float64], Tensor[(143), float32], int64, Tensor[(70), int64], Tensor[(385, 2), float32], Tensor[(143), float32], float32, Tensor[(360), float32], Tensor[(240), float32], Tensor[(64), uint64], Tensor[(240), float32], Tensor[(990), float32], Tensor[(11, 15, 6), uint8]) {
    %517 = cast(%var_2412, dtype="float64") /* ty=Tensor[(11, 11), float64] */;
    %518 = cast(%var_2419, dtype="int64") /* ty=int64 */;
    %519 = cast(meta[relay.Constant][50] /* ty=Tensor[(70), int64] */, dtype="int64") /* ty=Tensor[(70), int64] */;
    %520 = cast(meta[relay.Constant][51] /* ty=Tensor[(385, 2), float32] */, dtype="float32") /* ty=Tensor[(385, 2), float32] */;
    %521 = cast(meta[relay.Constant][52] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
    %522 = reshape(%518, newshape=[]) /* ty=int64 */;
    %523 = reshape(%519, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
    %524 = reshape(%520, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %525 = reshape(%521, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %526 = @func_2388(%522, %523, %524, %525) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
    %527 = cast(%var_2444, dtype="float32") /* ty=Tensor[(360), float32] */;
    %528 = cast(%var_2419, dtype="float32") /* ty=float32 */;
    %529 = %526.4;
    %530 = cast(%529, dtype="float32") /* ty=Tensor[(143), float32] */;
    %531 = reshape(%527, newshape=[5, 8, 9]) /* ty=Tensor[(5, 8, 9), float32] */;
    %532 = reshape(%528, newshape=[]) /* ty=float32 */;
    %533 = reshape(%530, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %534 = @func_2241(%531, %532, %533) /* ty=(Tensor[(5, 8, 9), float32], Tensor[(240), float32], float32, Tensor[(143), float32], Tensor[(770), float32]) */;
    %535 = %534.2;
    %536 = cast(%535, dtype="uint64") /* ty=uint64 */;
    %537 = cast(%var_2448, dtype="uint64") /* ty=Tensor[(64), uint64] */;
    %538 = cast(%var_2449, dtype="float32") /* ty=Tensor[(240), float32] */;
    %539 = reshape(%536, newshape=[]) /* ty=uint64 */;
    %540 = reshape(%537, newshape=[1, 16, 4]) /* ty=Tensor[(1, 16, 4), uint64] */;
    %541 = reshape(%538, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %542 = @func_1645(%539, %540, %541) /* ty=(Tensor[(1, 16, 4), uint64], Tensor[(15, 16, 1), float32], Tensor[(240), float32]) */;
    %543 = cast(%var_2419, dtype="float32") /* ty=float32 */;
    %544 = cast(%529, dtype="float32") /* ty=Tensor[(143), float32] */;
    %545 = cast(meta[relay.Constant][51] /* ty=Tensor[(385, 2), float32] */, dtype="float32") /* ty=Tensor[(385, 2), float32] */;
    %546 = reshape(%543, newshape=[]) /* ty=float32 */;
    %547 = reshape(%544, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %548 = reshape(%545, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %549 = @func_1526(%546, %547, %548) /* ty=(Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) */;
    %550 = %549.3;
    %551 = cast(%550, dtype="float32") /* ty=Tensor[(990), float32] */;
    %552 = cast(%var_2419, dtype="float32") /* ty=float32 */;
    %553 = cast(%var_2449, dtype="float32") /* ty=Tensor[(240), float32] */;
    %554 = reshape(%551, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float32] */;
    %555 = reshape(%552, newshape=[]) /* ty=float32 */;
    %556 = reshape(%553, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
    %557 = @func_441(%554, %555, %556) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */;
    %558 = sqrt(%517) /* ty=Tensor[(11, 11), float64] */;
    %559 = %542.2;
    %560 = %557.0;
    (%558, %529, %var_2419, meta[relay.Constant][50] /* ty=Tensor[(70), int64] */, meta[relay.Constant][51] /* ty=Tensor[(385, 2), float32] */, meta[relay.Constant][52] /* ty=Tensor[(143), float32] */, %535, %var_2444, %559, %var_2448, %var_2449, %550, %560)
  };
  %561(%var_2481, %var_2482, %var_2483, %var_2484, %var_2485) /* ty=(Tensor[(11, 11), float64], Tensor[(143), float32], int64, Tensor[(70), int64], Tensor[(385, 2), float32], Tensor[(143), float32], float32, Tensor[(360), float32], Tensor[(240), float32], Tensor[(64), uint64], Tensor[(240), float32], Tensor[(990), float32], Tensor[(11, 15, 6), uint8]) */
}

def @func_8061(%var_8059: float32, %var_8060: Tensor[(240), float32]) -> (Tensor[(13, 1, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(15, 16, 1), float32], Tensor[(990), float32], float32, Tensor[(240), float32]) {
  %574 = fn (%var_8054: float32, %var_8055: Tensor[(240), float32]) -> (Tensor[(13, 1, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(15, 16, 1), float32], Tensor[(990), float32], float32, Tensor[(240), float32]) {
    %562 = @func_3049() /* ty=Tensor[(13, 1, 11), float32] */;
    %563 = cast(%562, dtype="float64") /* ty=Tensor[(13, 1, 11), float64] */;
    %564 = cast(meta[relay.Constant][53] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
    %565 = cast(%var_8054, dtype="float32") /* ty=float32 */;
    %566 = cast(%var_8055, dtype="float32") /* ty=Tensor[(240), float32] */;
    %567 = reshape(%564, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float32] */;
    %568 = reshape(%565, newshape=[]) /* ty=float32 */;
    %569 = reshape(%566, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
    %570 = @func_441(%567, %568, %569) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */;
    %571 = sqrt(%563) /* ty=Tensor[(13, 1, 11), float64] */;
    %572 = @func_7296() /* ty=Tensor[(4, 3, 11), float64] */;
    %573 = %570.1;
    (%571, %572, %573, meta[relay.Constant][53] /* ty=Tensor[(990), float32] */, %var_8054, %var_8055)
  };
  %574(%var_8059, %var_8060) /* ty=(Tensor[(13, 1, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(15, 16, 1), float32], Tensor[(990), float32], float32, Tensor[(240), float32]) */
}

def @func_9074(%var_9044: Tensor[(154), float32]) -> (Tensor[(154), int32], Tensor[(4, 8, 3), uint64], Tensor[(4, 3, 11), uint32], Tensor[(132), float64]) {
  %575 = @func_8020() /* ty=Tensor[(154), float32] */;
  %576 = cast(%var_9044, dtype="int32") /* ty=Tensor[(154), int32] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(1), int32] */;
  %578 = cast(%575, dtype="int32") /* ty=Tensor[(154), int32] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?), int32] */;
  %580 = @func_6018() /* ty=(Tensor[(4, 8, 3), uint64],) */;
  %581 = cast(meta[relay.Constant][54] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %582 = reshape(%581, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), float64] */;
  %583 = @func_3696(%582) /* ty=(Tensor[(4, 3, 11), uint32],) */;
  %584 = bitwise_and(%578, %579) /* ty=Tensor[(154), int32] */;
  %585 = %580.0;
  %586 = %583.0;
  (%584, %585, %586, meta[relay.Constant][54] /* ty=Tensor[(132), float64] */)
}

def @func_9537() -> Tensor[(13, 1, 11), float32] {
  %587 = fn () -> Tensor[(13, 1, 11), float32] {
    @func_8083() /* ty=Tensor[(13, 1, 11), float32] */
  };
  %587() /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_2191(%var_2177: Tensor[(11, 7, 2), float32], %var_2188: Tensor[(990), float32], %var_2189: Tensor[(240, 1), float32]) -> (Tensor[(11, 7, 2), float32], Tensor[(11, 7, 2), bool], float32, Tensor[(1, 352), uint32], Tensor[(990), float32], Tensor[(240, 1), float32]) {
  %588 = cast(meta[relay.Constant][55] /* ty=Tensor[(11, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
  %589 = cast(%var_2177, dtype="bool") /* ty=Tensor[(11, 7, 2), bool] */;
  %590 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(11, 7, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(meta[relay.Constant][55] /* ty=Tensor[(11, 7, 2), float32] */, dtype="bool") /* ty=Tensor[(11, 7, 2), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 352), uint32] */, dtype="uint32") /* ty=Tensor[(1, 352), uint32] */;
  %594 = cast(%var_2188, dtype="float32") /* ty=Tensor[(990), float32] */;
  %595 = cast(%var_2189, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %596 = reshape(%593, newshape=[16, 11, 2]) /* ty=Tensor[(16, 11, 2), uint32] */;
  %597 = reshape(%594, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %598 = reshape(%595, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %599 = @func_646(%596, %597, %598) /* ty=(Tensor[(16, 11, 2), float64], Tensor[(16, 11, 2), uint16], Tensor[(24, 10), float32], Tensor[(990), float32], float32, Tensor[(240), float32], Tensor[(15, 16, 1), float32], float32) */;
  %600 = cos(%588) /* ty=Tensor[(11, 7, 2), float32] */;
  %601 = logical_and(%591, %592) /* ty=Tensor[(11, 7, 2), bool] */;
  %602 = %599.4;
  (%600, %601, %602, meta[relay.Constant][56] /* ty=Tensor[(1, 352), uint32] */, %var_2188, %var_2189)
}

def @func_9591() -> (float32,) {
  @func_9589() /* ty=(float32,) */
}

def @func_4711(%var_4690: Tensor[(1, 15, 11), int8]) -> (Tensor[(15, 15, 11), bool], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %603 = cast(%var_4690, dtype="bool") /* ty=Tensor[(1, 15, 11), bool] */;
  %604 = cast(meta[relay.Constant][57] /* ty=Tensor[(15, 15, 11), int8] */, dtype="bool") /* ty=Tensor[(15, 15, 11), bool] */;
  %605 = equal(%603, %604) /* ty=Tensor[(15, 15, 11), bool] */;
  %606 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  %607 = @func_3068() /* ty=Tensor[(4, 3, 11), float64] */;
  (%605, %606, %607)
}

def @func_5642() -> (Tensor[(3, 15, 13), float32], Tensor[(4, 3, 11), float64]) {
  %608 = @func_3854() /* ty=Tensor[(3, 15, 13), float32] */;
  %609 = @func_3179() /* ty=Tensor[(4, 3, 11), float64] */;
  (%608, %609)
}

def @func_6208() -> (Tensor[(4, 3, 11), float64], Tensor[(7, 4, 6), float64]) {
  @func_6206() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(7, 4, 6), float64]) */
}

def @func_3787(%var_3786: Tensor[(13, 4, 11), float32]) -> Tensor[(13, 4, 11), uint64] {
  %613 = fn (%var_3777: Tensor[(13, 4, 11), float32]) -> Tensor[(13, 4, 11), uint64] {
    %610 = @func_3049() /* ty=Tensor[(13, 1, 11), float32] */;
    %611 = cast(%610, dtype="uint64") /* ty=Tensor[(13, 1, 11), uint64] */;
    %612 = cast(%var_3777, dtype="uint64") /* ty=Tensor[(13, 4, 11), uint64] */;
    maximum(%611, %612) /* ty=Tensor[(13, 4, 11), uint64] */
  };
  %613(%var_3786) /* ty=Tensor[(13, 4, 11), uint64] */
}

def @func_8332() -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  %617 = fn () -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
    %614 = @func_7433() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(572), float32], Tensor[(286, 2), float32], Tensor[(990), float32], Tensor[(352), uint32], Tensor[(4, 3, 11), float64]) */;
    %615 = %614.0;
    %616 = @func_4255() /* ty=Tensor[(4, 3, 11), float64] */;
    (%615, %616)
  };
  %617() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */
}

def @func_9723() -> (Tensor[(4, 3, 11), float64],) {
  %618 = @func_7296() /* ty=Tensor[(4, 3, 11), float64] */;
  (%618,)
}

def @func_3856() -> Tensor[(3, 15, 13), float32] {
  @func_3854() /* ty=Tensor[(3, 15, 13), float32] */
}

def @func_6390(%var_6389: Tensor[(13, 3, 11), float32]) -> (Tensor[(13, 3, 11), bool],) {
  %623 = fn (%var_6383: Tensor[(13, 3, 11), float32]) -> (Tensor[(13, 3, 11), bool],) {
    %619 = @func_3049() /* ty=Tensor[(13, 1, 11), float32] */;
    %620 = cast(%619, dtype="bool") /* ty=Tensor[(13, 1, 11), bool] */;
    %621 = cast(%var_6383, dtype="bool") /* ty=Tensor[(13, 3, 11), bool] */;
    %622 = logical_and(%620, %621) /* ty=Tensor[(13, 3, 11), bool] */;
    (%622,)
  };
  %623(%var_6389) /* ty=(Tensor[(13, 3, 11), bool],) */
}

def @func_9218() -> (Tensor[(13, 1, 11), float32],) {
  @func_9216() /* ty=(Tensor[(13, 1, 11), float32],) */
}

def @func_2668() -> (Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) {
  @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */
}

def @func_7282() -> (Tensor[(4, 3, 11), float64],) {
  %624 = @func_6206() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(7, 4, 6), float64]) */;
  %625 = %624.0;
  (%625,)
}

def @func_7949() -> Tensor[(4, 3, 11), float64] {
  %626 = @func_7282() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %627 = %626.0;
  %628 = @func_6690() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) */;
  %629 = %628.0;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %631 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%627, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%632, %633) /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_7221() -> (Tensor[(4, 3, 11), float64], int64, Tensor[(882), uint32], Tensor[(121), float64]) {
  %634 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %635 = cast(meta[relay.Constant][58] /* ty=Tensor[(882), uint32] */, dtype="uint32") /* ty=Tensor[(882), uint32] */;
  %636 = cast(meta[relay.Constant][59] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %637 = reshape(%635, newshape=[9, 7, 14]) /* ty=Tensor[(9, 7, 14), uint32] */;
  %638 = reshape(%636, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %639 = @func_3001(%637, %638) /* ty=(Tensor[(9, 7, 14), uint32], Tensor[(240), float32], Tensor[(121), float64], int64, Tensor[(360), float32], Tensor[(64), uint64], Tensor[(240), float32]) */;
  %640 = %634.0;
  %641 = %639.3;
  (%640, %641, meta[relay.Constant][58] /* ty=Tensor[(882), uint32] */, meta[relay.Constant][59] /* ty=Tensor[(121), float64] */)
}

def @func_8395() -> (Tensor[(4, 3, 11), float64],) {
  %643 = fn () -> (Tensor[(4, 3, 11), float64],) {
    %642 = @func_7451() /* ty=Tensor[(4, 3, 11), float64] */;
    (%642,)
  };
  %643() /* ty=(Tensor[(4, 3, 11), float64],) */
}

def @func_5161() -> (Tensor[(4, 8, 3), float32],) {
  %644 = @func_5064() /* ty=Tensor[(4, 8, 3), float32] */;
  (%644,)
}

def @func_5284(%var_5271: Tensor[(90), float64], %var_5274: Tensor[(105), uint32], %var_5275: Tensor[(770), float32]) -> (Tensor[(4, 3, 11), float32], Tensor[(4, 3, 11), float32], Tensor[(9, 10, 1), float64], Tensor[(90), float64], Tensor[(770), float32], Tensor[(105), uint32], Tensor[(770), float32], Tensor[(143), float32]) {
  %645 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %647 = asinh(%646) /* ty=Tensor[(4, 3, 11), float64] */;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %649 = cast(%645, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %650 = cast(%var_5271, dtype="float64") /* ty=Tensor[(90), float64] */;
  %651 = reshape(%650, newshape=[9, 10, 1]) /* ty=Tensor[(9, 10, 1), float64] */;
  %652 = @func_5175(%651) /* ty=(Tensor[(9, 10, 1), float64],) */;
  %653 = cast(%var_5274, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %654 = cast(%var_5275, dtype="float32") /* ty=Tensor[(770), float32] */;
  %655 = cast(meta[relay.Constant][60] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %656 = reshape(%653, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), uint32] */;
  %657 = reshape(%654, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %658 = reshape(%655, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %659 = @func_4863(%656, %657, %658) /* ty=(Tensor[(5, 3, 7), uint32], Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32], Tensor[(143), bool]) */;
  %660 = erf(%648) /* ty=Tensor[(4, 3, 11), float32] */;
  %661 = acos(%649) /* ty=Tensor[(4, 3, 11), float32] */;
  %662 = %652.0;
  %663 = %659.2;
  (%660, %661, %662, %var_5271, %663, %var_5274, %var_5275, meta[relay.Constant][60] /* ty=Tensor[(143), float32] */)
}

def @func_3430() -> (Tensor[(4, 3, 11), float64],) {
  %665 = fn () -> (Tensor[(4, 3, 11), float64],) {
    %664 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
    (%664,)
  };
  %665() /* ty=(Tensor[(4, 3, 11), float64],) */
}

def @func_2393(%var_2389: int64, %var_2390: Tensor[(5, 14, 1), int64], %var_2391: Tensor[(770), float32], %var_2392: Tensor[(143), float32]) -> (Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) {
  %679 = fn (%var_2348: int64, %var_2349: Tensor[(5, 14, 1), int64], %var_2375: Tensor[(770), float32], %var_2376: Tensor[(143), float32]) -> (Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) {
    %666 = cast(%var_2348, dtype="int64") /* ty=int64 */;
    %667 = cast(%var_2349, dtype="int64") /* ty=Tensor[(5, 14, 1), int64] */;
    %668 = cast(%var_2349, dtype="float32") /* ty=Tensor[(5, 14, 1), float32] */;
    %669 = acos(%668) /* ty=Tensor[(5, 14, 1), float32] */;
    %670 = cast(%669, dtype="float32") /* ty=Tensor[(5, 14, 1), float32] */;
    %671 = cast(%var_2375, dtype="float32") /* ty=Tensor[(770), float32] */;
    %672 = cast(%var_2376, dtype="float32") /* ty=Tensor[(143), float32] */;
    %673 = reshape(%671, newshape=[14, 5, 11]) /* ty=Tensor[(14, 5, 11), float32] */;
    %674 = reshape(%672, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %675 = @func_896(%673, %674) /* ty=(Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) */;
    %676 = bitwise_and(%666, %667) /* ty=Tensor[(5, 14, 1), int64] */;
    %677 = log(%670) /* ty=Tensor[(5, 14, 1), float32] */;
    %678 = %675.1;
    (%676, %677, %678, %var_2375, %var_2376)
  };
  %679(%var_2389, %var_2390, %var_2391, %var_2392) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */
}

def @func_4255() -> Tensor[(4, 3, 11), float64] {
  %680 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %680.0
}

def @func_3181() -> Tensor[(4, 3, 11), float64] {
  @func_3179() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_7297() -> Tensor[(4, 3, 11), float64] {
  %681 = fn () -> Tensor[(4, 3, 11), float64] {
    @func_3318() /* ty=Tensor[(4, 3, 11), float64] */
  };
  %681() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_7867() -> Tensor[(4, 3, 11), float32] {
  %685 = fn () -> Tensor[(4, 3, 11), float32] {
    %682 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
    %683 = %682.0;
    %684 = cast(%683, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
    atanh(%684) /* ty=Tensor[(4, 3, 11), float32] */
  };
  %685() /* ty=Tensor[(4, 3, 11), float32] */
}

def @func_1414(%var_1389: int64, %var_1390: Tensor[(4, 1, 14), int64], %var_1397: Tensor[(990), float32], %var_1398: Tensor[(240), float32]) -> (Tensor[(4, 1, 14), bool], Tensor[(11, 15, 6), uint8], Tensor[(990), float32], Tensor[(240), float32]) {
  %686 = cast(%var_1389, dtype="bool") /* ty=bool */;
  %687 = cast(%var_1390, dtype="bool") /* ty=Tensor[(4, 1, 14), bool] */;
  %688 = cast(%var_1397, dtype="float32") /* ty=Tensor[(990), float32] */;
  %689 = cast(%var_1389, dtype="float32") /* ty=float32 */;
  %690 = cast(%var_1398, dtype="float32") /* ty=Tensor[(240), float32] */;
  %691 = reshape(%688, newshape=[11, 15, 6]) /* ty=Tensor[(11, 15, 6), float32] */;
  %692 = reshape(%689, newshape=[]) /* ty=float32 */;
  %693 = reshape(%690, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %694 = @func_441(%691, %692, %693) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */;
  %695 = not_equal(%686, %687) /* ty=Tensor[(4, 1, 14), bool] */;
  %696 = %694.0;
  (%695, %696, %var_1397, %var_1398)
}

def @func_8519(%var_8518: Tensor[(352), uint32]) -> (Tensor[(7, 4, 6), float64], Tensor[(2, 176), uint32], Tensor[(352), uint32]) {
  %703 = fn (%var_8498: Tensor[(352), uint32]) -> (Tensor[(7, 4, 6), float64], Tensor[(2, 176), uint32], Tensor[(352), uint32]) {
    %697 = @func_6206() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(7, 4, 6), float64]) */;
    %698 = cast(%var_8498, dtype="uint32") /* ty=Tensor[(352), uint32] */;
    %699 = reshape(%698, newshape=[2, 176]) /* ty=Tensor[(2, 176), uint32] */;
    %700 = @func_2804(%699) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(240), float32], Tensor[(2, 176), uint32], Tensor[(990), float32], Tensor[(240), float32]) */;
    %701 = %697.1;
    %702 = %700.2;
    (%701, %702, %var_8498)
  };
  %703(%var_8518) /* ty=(Tensor[(7, 4, 6), float64], Tensor[(2, 176), uint32], Tensor[(352), uint32]) */
}

def @func_651(%var_648: Tensor[(16, 11, 2), uint32], %var_649: Tensor[(990), float32], %var_650: Tensor[(240), float32]) -> (Tensor[(16, 11, 2), float64], Tensor[(16, 11, 2), uint16], Tensor[(24, 10), float32], Tensor[(990), float32], float32, Tensor[(240), float32], Tensor[(15, 16, 1), float32], float32) {
  @func_646(%var_648, %var_649, %var_650) /* ty=(Tensor[(16, 11, 2), float64], Tensor[(16, 11, 2), uint16], Tensor[(24, 10), float32], Tensor[(990), float32], float32, Tensor[(240), float32], Tensor[(15, 16, 1), float32], float32) */
}

def @func_3001(%var_2971: Tensor[(9, 7, 14), uint32], %var_2991: Tensor[(121), float64]) -> (Tensor[(9, 7, 14), uint32], Tensor[(240), float32], Tensor[(121), float64], int64, Tensor[(360), float32], Tensor[(64), uint64], Tensor[(240), float32]) {
  %704 = cast(%var_2971, dtype="uint32") /* ty=Tensor[(9, 7, 14), uint32] */;
  %705 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(9, 7, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(meta[relay.Constant][61] /* ty=Tensor[(9, 7, 14), uint32] */, dtype="uint32") /* ty=Tensor[(9, 7, 14), uint32] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %708 = cast(%var_2991, dtype="float64") /* ty=Tensor[(121), float64] */;
  %709 = cast(9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %710 = cast(meta[relay.Constant][62] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %711 = cast(meta[relay.Constant][63] /* ty=Tensor[(64), uint64] */, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %712 = cast(meta[relay.Constant][64] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %713 = reshape(%708, newshape=[11, 11]) /* ty=Tensor[(11, 11), float64] */;
  %714 = reshape(%709, newshape=[]) /* ty=int64 */;
  %715 = reshape(%710, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %716 = reshape(%711, newshape=[64]) /* ty=Tensor[(64), uint64] */;
  %717 = reshape(%712, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %718 = @func_2480(%713, %714, %715, %716, %717) /* ty=(Tensor[(11, 11), float64], Tensor[(143), float32], int64, Tensor[(70), int64], Tensor[(385, 2), float32], Tensor[(143), float32], float32, Tensor[(360), float32], Tensor[(240), float32], Tensor[(64), uint64], Tensor[(240), float32], Tensor[(990), float32], Tensor[(11, 15, 6), uint8]) */;
  %719 = logical_xor(%706, %707) /* ty=Tensor[(9, 7, 14), uint32] */;
  %720 = %718.10;
  (%719, %720, %var_2991, 9 /* ty=int64 */, meta[relay.Constant][62] /* ty=Tensor[(360), float32] */, meta[relay.Constant][63] /* ty=Tensor[(64), uint64] */, meta[relay.Constant][64] /* ty=Tensor[(240), float32] */)
}

def @func_7501(%var_7499: Tensor[(770), float32], %var_7500: Tensor[(143), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(770), float32], Tensor[(143), uint64], Tensor[(4, 3, 11), float64]) {
  %733 = fn (%var_7485: Tensor[(770), float32], %var_7489: Tensor[(143), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(770), float32], Tensor[(143), uint64], Tensor[(4, 3, 11), float64]) {
    %721 = @func_5084() /* ty=(Tensor[(4, 3, 11), float64],) */;
    %722 = cast(%var_7485, dtype="float32") /* ty=Tensor[(770), float32] */;
    %723 = reshape(%722, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %724 = @func_6957(%723) /* ty=(Tensor[(4, 8, 3), uint8], Tensor[(13, 1, 11), float32], Tensor[(143), float32], float32, Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float64], Tensor[(4, 8, 3), float32], Tensor[(4, 3, 11), float64], Tensor[(135), float32]) */;
    %725 = %724.2;
    %726 = cast(%var_7489, dtype="uint64") /* ty=Tensor[(143), uint64] */;
    %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(1), int32] */;
    %728 = cast(%725, dtype="uint64") /* ty=Tensor[(143), uint64] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %730 = %721.0;
    %731 = logical_xor(%728, %729) /* ty=Tensor[(143), uint64] */;
    %732 = @func_3179() /* ty=Tensor[(4, 3, 11), float64] */;
    (%730, %var_7485, %731, %732)
  };
  %733(%var_7499, %var_7500) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(770), float32], Tensor[(143), uint64], Tensor[(4, 3, 11), float64]) */
}

def @func_7070(%var_7069: Tensor[(64), uint64]) -> (Tensor[(4, 3, 11), float64], Tensor[(15, 16, 1), float32], uint64, Tensor[(64), uint64], Tensor[(240), float32]) {
  %744 = fn (%var_7045: Tensor[(64), uint64]) -> (Tensor[(4, 3, 11), float64], Tensor[(15, 16, 1), float32], uint64, Tensor[(64), uint64], Tensor[(240), float32]) {
    %734 = @func_6690() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) */;
    %735 = cast(meta[relay.Constant][65] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %736 = cast(%var_7045, dtype="uint64") /* ty=Tensor[(64), uint64] */;
    %737 = cast(meta[relay.Constant][66] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %738 = reshape(%735, newshape=[]) /* ty=uint64 */;
    %739 = reshape(%736, newshape=[1, 16, 4]) /* ty=Tensor[(1, 16, 4), uint64] */;
    %740 = reshape(%737, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %741 = @func_1645(%738, %739, %740) /* ty=(Tensor[(1, 16, 4), uint64], Tensor[(15, 16, 1), float32], Tensor[(240), float32]) */;
    %742 = %734.0;
    %743 = %741.1;
    (%742, %743, meta[relay.Constant][65] /* ty=uint64 */, %var_7045, meta[relay.Constant][66] /* ty=Tensor[(240), float32] */)
  };
  %744(%var_7069) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(15, 16, 1), float32], uint64, Tensor[(64), uint64], Tensor[(240), float32]) */
}

def @func_9111(%var_9098: Tensor[(143), float32]) -> (Tensor[(143), float32],) {
  %745 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %746 = %745.0;
  %747 = cast(%var_9098, dtype="float32") /* ty=Tensor[(143), float32] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(1), int32] */;
  %749 = cast(%746, dtype="float32") /* ty=Tensor[(143), float32] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?), float32] */;
  %751 = mod(%749, %750) /* ty=Tensor[(143), float32] */;
  (%751,)
}

def @main(%var_9769: Tensor[(4, 3, 11), float64]) -> Tensor[(4, 3, 11), uint32] {
  %752 = @func_5044() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
  %753 = %752.0;
  %754 = cast(%var_9769, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%753, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%756, %757) /* ty=Tensor[(4, 3, 11), uint32] */
}

def @func_5086() -> (Tensor[(4, 3, 11), float64],) {
  @func_5084() /* ty=(Tensor[(4, 3, 11), float64],) */
}

def @func_7598(%var_7595: Tensor[(15, 9, 9), int8], %var_7596: Tensor[(90), float64], %var_7597: Tensor[(770), float32]) -> (Tensor[(15, 9, 9), bool], Tensor[(105), uint32], Tensor[(90), float64], Tensor[(105), uint32], Tensor[(770), float32]) {
  @func_7593(%var_7595, %var_7596, %var_7597) /* ty=(Tensor[(15, 9, 9), bool], Tensor[(105), uint32], Tensor[(90), float64], Tensor[(105), uint32], Tensor[(770), float32]) */
}

def @func_4714(%var_4712: Tensor[(1, 15, 11), int8]) -> (Tensor[(15, 15, 11), bool], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) {
  @func_4711(%var_4712) /* ty=(Tensor[(15, 15, 11), bool], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */
}

def @func_8826() -> (Tensor[(3, 15, 13), float32],) {
  %758 = @func_4819() /* ty=Tensor[(3, 15, 13), float32] */;
  (%758,)
}

def @func_8413() -> float32 {
  %759 = @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */;
  %759.1
}

def @func_4337() -> (Tensor[(4, 3, 11), float64],) {
  %761 = fn () -> (Tensor[(4, 3, 11), float64],) {
    %760 = @func_4038() /* ty=Tensor[(4, 3, 11), float64] */;
    (%760,)
  };
  %761() /* ty=(Tensor[(4, 3, 11), float64],) */
}

def @func_5864(%var_5862: Tensor[(6, 7, 2), uint64], %var_5863: Tensor[(6, 7, 2), uint64]) -> (Tensor[(6, 7, 2), uint64], Tensor[(4, 3, 11), float64]) {
  %769 = fn (%var_5840: Tensor[(6, 7, 2), uint64], %var_5841: Tensor[(6, 7, 2), uint64]) -> (Tensor[(6, 7, 2), uint64], Tensor[(4, 3, 11), float64]) {
    %762 = cast(%var_5841, dtype="uint64") /* ty=Tensor[(6, 7, 2), uint64] */;
    %763 = shape_of(%var_5840, dtype="int32") /* ty=Tensor[(3), int32] */;
    %764 = cast(%var_5840, dtype="uint64") /* ty=Tensor[(6, 7, 2), uint64] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %766 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
    %767 = add(%764, %765) /* ty=Tensor[(6, 7, 2), uint64] */;
    %768 = %766.0;
    (%767, %768)
  };
  %769(%var_5862, %var_5863) /* ty=(Tensor[(6, 7, 2), uint64], Tensor[(4, 3, 11), float64]) */
}

def @func_5329(%var_5328: Tensor[(143, 4), float32]) -> (Tensor[(3, 15, 13), float64], Tensor[(13, 4, 11), uint64], Tensor[(143, 4), float32]) {
  %777 = fn (%var_5324: Tensor[(143, 4), float32]) -> (Tensor[(3, 15, 13), float64], Tensor[(13, 4, 11), uint64], Tensor[(143, 4), float32]) {
    %770 = @func_3854() /* ty=Tensor[(3, 15, 13), float32] */;
    %771 = cast(%770, dtype="float64") /* ty=Tensor[(3, 15, 13), float64] */;
    %772 = cast(%var_5324, dtype="float32") /* ty=Tensor[(143, 4), float32] */;
    %773 = reshape(%772, newshape=[572]) /* ty=Tensor[(572), float32] */;
    %774 = @func_4206(%773) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(13, 4, 11), uint64], Tensor[(572), float32]) */;
    %775 = asinh(%771) /* ty=Tensor[(3, 15, 13), float64] */;
    %776 = %774.1;
    (%775, %776, %var_5324)
  };
  %777(%var_5328) /* ty=(Tensor[(3, 15, 13), float64], Tensor[(13, 4, 11), uint64], Tensor[(143, 4), float32]) */
}

def @func_689(%var_688: Tensor[(13, 1, 11), float32]) -> (Tensor[(13, 1, 11), float32],) {
  %780 = fn (%var_679: Tensor[(13, 1, 11), float32]) -> (Tensor[(13, 1, 11), float32],) {
    %778 = cast(%var_679, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
    %779 = asin(%778) /* ty=Tensor[(13, 1, 11), float32] */;
    (%779,)
  };
  %780(%var_688) /* ty=(Tensor[(13, 1, 11), float32],) */
}

def @func_7602() -> Tensor[(4, 3, 11), float64] {
  %781 = @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */;
  %781.0
}

def @func_2900(%var_2898: Tensor[(14, 8, 3), int32]) -> (Tensor[(14, 8, 3), bool], Tensor[(1, 352), uint32], Tensor[(154), float32], Tensor[(110, 9), float32], Tensor[(2, 120), float32]) {
  @func_2897(%var_2898) /* ty=(Tensor[(14, 8, 3), bool], Tensor[(1, 352), uint32], Tensor[(154), float32], Tensor[(110, 9), float32], Tensor[(2, 120), float32]) */
}

def @func_2692() -> (Tensor[(4, 3, 11), float64],) {
  %782 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
  %783 = %782.5;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %785 = exp(%784) /* ty=Tensor[(4, 3, 11), float64] */;
  (%785,)
}

def @func_7021() -> (Tensor[(4, 3, 11), float64], Tensor[(3, 15, 13), float64], Tensor[(572), float32]) {
  %786 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %787 = cast(meta[relay.Constant][67] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
  %788 = reshape(%787, newshape=[143, 4]) /* ty=Tensor[(143, 4), float32] */;
  %789 = @func_5327(%788) /* ty=(Tensor[(3, 15, 13), float64], Tensor[(13, 4, 11), uint64], Tensor[(143, 4), float32]) */;
  %790 = %786.0;
  %791 = %789.0;
  (%790, %791, meta[relay.Constant][67] /* ty=Tensor[(572), float32] */)
}

def @func_6473(%var_6472: Tensor[(165), int8]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(770), float32], Tensor[(4, 3, 11), float64], Tensor[(165), int8]) {
  %801 = fn (%var_6467: Tensor[(165), int8]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(770), float32], Tensor[(4, 3, 11), float64], Tensor[(165), int8]) {
    %792 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
    %793 = @func_2666() /* ty=(Tensor[(143), float32], float32, Tensor[(143, 1), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(4, 3, 11), uint16]) */;
    %794 = cast(%var_6467, dtype="int8") /* ty=Tensor[(165), int8] */;
    %795 = reshape(%794, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), int8] */;
    %796 = @func_4711(%795) /* ty=(Tensor[(15, 15, 11), bool], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
    %797 = %792.0;
    %798 = @func_3704() /* ty=Tensor[(4, 3, 11), float64] */;
    %799 = %793.3;
    %800 = %796.2;
    (%797, %798, %799, %800, %var_6467)
  };
  %801(%var_6472) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(770), float32], Tensor[(4, 3, 11), float64], Tensor[(165), int8]) */
}

def @func_445(%var_442: Tensor[(11, 15, 6), float32], %var_443: float32, %var_444: Tensor[(24, 10), float32]) -> (Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) {
  %815 = fn (%var_399: Tensor[(11, 15, 6), float32], %var_411: float32, %var_412: Tensor[(24, 10), float32]) -> (Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) {
    %802 = cast(%var_399, dtype="float32") /* ty=Tensor[(11, 15, 6), float32] */;
    %803 = sqrt(%802) /* ty=Tensor[(11, 15, 6), float32] */;
    %804 = cast(%803, dtype="uint8") /* ty=Tensor[(11, 15, 6), uint8] */;
    %805 = shape_of(%var_399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %806 = cast(%var_399, dtype="uint8") /* ty=Tensor[(11, 15, 6), uint8] */;
    %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %808 = cast(%var_411, dtype="float32") /* ty=float32 */;
    %809 = cast(%var_412, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
    %810 = reshape(%808, newshape=[]) /* ty=float32 */;
    %811 = reshape(%809, newshape=[15, 16, 1]) /* ty=Tensor[(15, 16, 1), float32] */;
    %812 = @func_192(%810, %811) /* ty=(Tensor[(15, 16, 1), float32],) */;
    %813 = minimum(%806, %807) /* ty=Tensor[(11, 15, 6), uint8] */;
    %814 = %812.0;
    (%813, %814, %var_411, %var_412)
  };
  %815(%var_442, %var_443, %var_444) /* ty=(Tensor[(11, 15, 6), uint8], Tensor[(15, 16, 1), float32], float32, Tensor[(24, 10), float32]) */
}

def @func_5175(%var_5170: Tensor[(9, 10, 1), float64]) -> (Tensor[(9, 10, 1), float64],) {
  %816 = cast(%var_5170, dtype="float64") /* ty=Tensor[(9, 10, 1), float64] */;
  %817 = log(%816) /* ty=Tensor[(9, 10, 1), float64] */;
  (%817,)
}

def @func_3696(%var_3682: Tensor[(4, 3, 11), float64]) -> (Tensor[(4, 3, 11), uint32],) {
  %818 = @func_3318() /* ty=Tensor[(4, 3, 11), float64] */;
  %819 = cast(%var_3682, dtype="bool") /* ty=Tensor[(4, 3, 11), bool] */;
  %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%818, dtype="bool") /* ty=Tensor[(4, 3, 11), bool] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %823 = not_equal(%821, %822) /* ty=Tensor[(4, 3, 11), bool] */;
  %824 = cast(%818, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %828 = bitwise_xor(%826, %827) /* ty=Tensor[(4, 3, 11), uint32] */;
  (%828,)
}

def @func_3648() -> (Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) {
  @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */
}

def @func_6957(%var_6900: Tensor[(770), float32]) -> (Tensor[(4, 8, 3), uint8], Tensor[(13, 1, 11), float32], Tensor[(143), float32], float32, Tensor[(770), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float64], Tensor[(4, 8, 3), float32], Tensor[(4, 3, 11), float64], Tensor[(135), float32]) {
  %829 = @func_5064() /* ty=Tensor[(4, 8, 3), float32] */;
  %830 = cast(meta[relay.Constant][68] /* ty=Tensor[(4, 8, 3), float32] */, dtype="uint8") /* ty=Tensor[(4, 8, 3), uint8] */;
  %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%829, dtype="uint8") /* ty=Tensor[(4, 8, 3), uint8] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %834 = cast(meta[relay.Constant][69] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %835 = reshape(%834, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %836 = @func_687(%835) /* ty=(Tensor[(13, 1, 11), float32],) */;
  %837 = %836.0;
  %838 = cast(%837, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
  %839 = reshape(%838, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %840 = @func_687(%839) /* ty=(Tensor[(13, 1, 11), float32],) */;
  %841 = cast(-9.88026f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %842 = cast(meta[relay.Constant][69] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %843 = cast(%var_6900, dtype="float32") /* ty=Tensor[(770), float32] */;
  %844 = reshape(%841, newshape=[]) /* ty=float32 */;
  %845 = reshape(%842, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %846 = reshape(%843, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %847 = @func_1526(%844, %845, %846) /* ty=(Tensor[(1, 1, 16), float32], Tensor[(240), float32], Tensor[(56, 1), int64], Tensor[(990), float32], Tensor[(240), float32], Tensor[(15, 16, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(14, 5, 11), float32], Tensor[(770), float32], Tensor[(13, 1, 11), float32]) */;
  %848 = %847.7;
  %849 = cast(%848, dtype="float64") /* ty=Tensor[(143), float64] */;
  %850 = cast(%829, dtype="float64") /* ty=Tensor[(4, 8, 3), float64] */;
  %851 = sigmoid(%850) /* ty=Tensor[(4, 8, 3), float64] */;
  %852 = cast(%851, dtype="float64") /* ty=Tensor[(4, 8, 3), float64] */;
  %853 = log10(%852) /* ty=Tensor[(4, 8, 3), float64] */;
  %854 = cast(%853, dtype="float32") /* ty=Tensor[(4, 8, 3), float32] */;
  %855 = cast(meta[relay.Constant][70] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %856 = reshape(%855, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %857 = @func_4478(%856) /* ty=(Tensor[(15, 9, 9), bool], Tensor[(6, 3, 6), float32], Tensor[(4, 3, 11), float64]) */;
  %858 = minimum(%832, %833) /* ty=Tensor[(4, 8, 3), uint8] */;
  %859 = %840.0;
  %860 = cosh(%849) /* ty=Tensor[(143), float64] */;
  %861 = tan(%854) /* ty=Tensor[(4, 8, 3), float32] */;
  %862 = %857.2;
  (%858, %837, meta[relay.Constant][69] /* ty=Tensor[(143), float32] */, -9.88026f /* ty=float32 */, %var_6900, %859, %860, %861, %862, meta[relay.Constant][70] /* ty=Tensor[(135), float32] */)
}

def @func_8828() -> (Tensor[(3, 15, 13), float32],) {
  @func_8826() /* ty=(Tensor[(3, 15, 13), float32],) */
}

def @func_2694() -> (Tensor[(4, 3, 11), float64],) {
  @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */
}

def @func_6658() -> (Tensor[(4, 8, 3), float32],) {
  %864 = fn () -> (Tensor[(4, 8, 3), float32],) {
    %863 = @func_5064() /* ty=Tensor[(4, 8, 3), float32] */;
    (%863,)
  };
  %864() /* ty=(Tensor[(4, 8, 3), float32],) */
}

def @func_8368(%var_8362: Tensor[(1, 15, 13), float64]) -> Tensor[(1, 15, 13), float64] {
  %865 = cast(%var_8362, dtype="float64") /* ty=Tensor[(1, 15, 13), float64] */;
  acosh(%865) /* ty=Tensor[(1, 15, 13), float64] */
}

def @func_6690() -> (Tensor[(4, 3, 11), float64], Tensor[(5, 14, 1), int64], int64, Tensor[(70), int64], Tensor[(770), float32], Tensor[(143), float32]) {
  %866 = @func_3429() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %867 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %868 = cast(meta[relay.Constant][71] /* ty=Tensor[(70), int64] */, dtype="int64") /* ty=Tensor[(70), int64] */;
  %869 = cast(meta[relay.Constant][72] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %870 = cast(meta[relay.Constant][73] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %871 = reshape(%867, newshape=[]) /* ty=int64 */;
  %872 = reshape(%868, newshape=[5, 14, 1]) /* ty=Tensor[(5, 14, 1), int64] */;
  %873 = reshape(%869, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %874 = reshape(%870, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %875 = @func_2388(%871, %872, %873, %874) /* ty=(Tensor[(5, 14, 1), int64], Tensor[(5, 14, 1), float32], Tensor[(13, 1, 11), float32], Tensor[(770), float32], Tensor[(143), float32]) */;
  %876 = %866.0;
  %877 = %875.0;
  (%876, %877, -1 /* ty=int64 */, meta[relay.Constant][71] /* ty=Tensor[(70), int64] */, meta[relay.Constant][72] /* ty=Tensor[(770), float32] */, meta[relay.Constant][73] /* ty=Tensor[(143), float32] */)
}

def @func_6128(%var_6125: uint64, %var_6126: Tensor[(1, 64), uint64], %var_6127: Tensor[(240), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(4, 8, 3), float32], Tensor[(9, 10, ?), float32], uint64, Tensor[(15, 15, 11), bool], Tensor[(1, 165), int8], Tensor[(9, 10, 240), bool], Tensor[(?, 64), int16]) {
  %917 = fn (%var_6090: uint64, %var_6091: Tensor[(1, 64), uint64], %var_6092: Tensor[(240), float32]) -> (Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(4, 8, 3), float32], Tensor[(9, 10, ?), float32], uint64, Tensor[(15, 15, 11), bool], Tensor[(1, 165), int8], Tensor[(9, 10, 240), bool], Tensor[(?, 64), int16]) {
    %878 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
    %879 = @func_5043() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
    %880 = cast(meta[relay.Constant][74] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %881 = reshape(%880, newshape=[9, 10, 1]) /* ty=Tensor[(9, 10, 1), float64] */;
    %882 = @func_5175(%881) /* ty=(Tensor[(9, 10, 1), float64],) */;
    %883 = %882.0;
    %884 = cast(meta[relay.Constant][74] /* ty=Tensor[(90), float64] */, dtype="bool") /* ty=Tensor[(90), bool] */;
    %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
    %886 = cast(%883, dtype="bool") /* ty=Tensor[(9, 10, 1), bool] */;
    %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %888 = less_equal(%886, %887) /* ty=Tensor[(9, 10, ?), bool] */;
    %889 = cast(%883, dtype="float32") /* ty=Tensor[(9, 10, 1), float32] */;
    %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
    %891 = cast(%888, dtype="float32") /* ty=Tensor[(9, 10, ?), float32] */;
    %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %893 = cast(meta[relay.Constant][75] /* ty=Tensor[(1, 165), int8] */, dtype="int8") /* ty=Tensor[(1, 165), int8] */;
    %894 = reshape(%893, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), int8] */;
    %895 = @func_4711(%894) /* ty=(Tensor[(15, 15, 11), bool], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
    %896 = cast(%var_6092, dtype="bool") /* ty=Tensor[(240), bool] */;
    %897 = cast(%883, dtype="bool") /* ty=Tensor[(9, 10, 1), bool] */;
    %898 = cast(%var_6090, dtype="uint64") /* ty=uint64 */;
    %899 = cast(%var_6091, dtype="uint64") /* ty=Tensor[(1, 64), uint64] */;
    %900 = cast(%var_6092, dtype="float32") /* ty=Tensor[(240), float32] */;
    %901 = reshape(%898, newshape=[]) /* ty=uint64 */;
    %902 = reshape(%899, newshape=[1, 16, 4]) /* ty=Tensor[(1, 16, 4), uint64] */;
    %903 = reshape(%900, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %904 = @func_1645(%901, %902, %903) /* ty=(Tensor[(1, 16, 4), uint64], Tensor[(15, 16, 1), float32], Tensor[(240), float32]) */;
    %905 = %904.0;
    %906 = cast(%905, dtype="int16") /* ty=Tensor[(1, 16, 4), int16] */;
    %907 = shape_of(%var_6091, dtype="int32") /* ty=Tensor[(2), int32] */;
    %908 = cast(%var_6091, dtype="int16") /* ty=Tensor[(1, 64), int16] */;
    %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %910 = %878.0;
    %911 = %879.0;
    %912 = @func_5064() /* ty=Tensor[(4, 8, 3), float32] */;
    %913 = subtract(%891, %892) /* ty=Tensor[(9, 10, ?), float32] */;
    %914 = %895.0;
    %915 = logical_or(%896, %897) /* ty=Tensor[(9, 10, 240), bool] */;
    %916 = right_shift(%908, %909) /* ty=Tensor[(?, 64), int16] */;
    (%910, %911, %912, %913, %var_6090, %914, meta[relay.Constant][75] /* ty=Tensor[(1, 165), int8] */, %915, %916)
  };
  %917(%var_6125, %var_6126, %var_6127) /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(4, 8, 3), float32], Tensor[(9, 10, ?), float32], uint64, Tensor[(15, 15, 11), bool], Tensor[(1, 165), int8], Tensor[(9, 10, 240), bool], Tensor[(?, 64), int16]) */
}

def @func_5513(%var_5511: Tensor[(10, 14, 4), float32], %var_5512: Tensor[(572), float32]) -> (Tensor[(10, 14, 4), float32], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(10, 14, 4), float64], Tensor[(143), float32], Tensor[(572), float32], Tensor[(1, 143), float32]) {
  %949 = fn (%var_5430: Tensor[(10, 14, 4), float32], %var_5504: Tensor[(572), float32]) -> (Tensor[(10, 14, 4), float32], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(10, 14, 4), float64], Tensor[(143), float32], Tensor[(572), float32], Tensor[(1, 143), float32]) {
    %918 = cast(meta[relay.Constant][76] /* ty=Tensor[(10, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 4), float32] */;
    %919 = shape_of(%var_5430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %920 = cast(%var_5430, dtype="float32") /* ty=Tensor[(10, 14, 4), float32] */;
    %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %922 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
    %923 = @func_3646() /* ty=(Tensor[(4, 3, 11), float64], float32, Tensor[(14, 5, 5), float64]) */;
    %924 = cast(meta[relay.Constant][76] /* ty=Tensor[(10, 14, 4), float32] */, dtype="float64") /* ty=Tensor[(10, 14, 4), float64] */;
    %925 = sqrt(%924) /* ty=Tensor[(10, 14, 4), float64] */;
    %926 = cast(meta[relay.Constant][76] /* ty=Tensor[(10, 14, 4), float32] */, dtype="uint8") /* ty=Tensor[(10, 14, 4), uint8] */;
    %927 = shape_of(%var_5430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %928 = cast(%var_5430, dtype="uint8") /* ty=Tensor[(10, 14, 4), uint8] */;
    %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %930 = subtract(%928, %929) /* ty=Tensor[(10, 14, 4), uint8] */;
    %931 = cast(%930, dtype="int16") /* ty=Tensor[(10, 14, 4), int16] */;
    %932 = shape_of(%925, dtype="int32") /* ty=Tensor[(3), int32] */;
    %933 = cast(%925, dtype="int16") /* ty=Tensor[(10, 14, 4), int16] */;
    %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %935 = multiply(%933, %934) /* ty=Tensor[(10, 14, 4), int16] */;
    %936 = cast(%935, dtype="float32") /* ty=Tensor[(10, 14, 4), float32] */;
    %937 = atan(%936) /* ty=Tensor[(10, 14, 4), float32] */;
    %938 = cast(%937, dtype="float64") /* ty=Tensor[(10, 14, 4), float64] */;
    %939 = cast(%var_5504, dtype="float32") /* ty=Tensor[(572), float32] */;
    %940 = cast(meta[relay.Constant][77] /* ty=Tensor[(1, 143), float32] */, dtype="float32") /* ty=Tensor[(1, 143), float32] */;
    %941 = reshape(%939, newshape=[572]) /* ty=Tensor[(572), float32] */;
    %942 = reshape(%940, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %943 = @func_4676(%941, %942) /* ty=(Tensor[(770), float32], Tensor[(572), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(143), float32], Tensor[(572), float32]) */;
    %944 = add(%920, %921) /* ty=Tensor[(10, 14, 4), float32] */;
    %945 = %922.0;
    %946 = %923.0;
    %947 = sin(%938) /* ty=Tensor[(10, 14, 4), float64] */;
    %948 = %943.3;
    (%944, %945, %946, %947, %948, %var_5504, meta[relay.Constant][77] /* ty=Tensor[(1, 143), float32] */)
  };
  %949(%var_5511, %var_5512) /* ty=(Tensor[(10, 14, 4), float32], Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64], Tensor[(10, 14, 4), float64], Tensor[(143), float32], Tensor[(572), float32], Tensor[(1, 143), float32]) */
}

def @func_7604() -> Tensor[(4, 3, 11), float64] {
  @func_7602() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_8016() -> (Tensor[(3, 15, 13), int8], Tensor[(154), float32], Tensor[(4, 84), int32]) {
  @func_8014() /* ty=(Tensor[(3, 15, 13), int8], Tensor[(154), float32], Tensor[(4, 84), int32]) */
}

def @func_899(%var_897: Tensor[(14, 5, 11), float32], %var_898: Tensor[(143), float32]) -> (Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) {
  %969 = fn (%var_834: Tensor[(14, 5, 11), float32], %var_846: Tensor[(143), float32]) -> (Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) {
    %950 = cast(%var_834, dtype="float32") /* ty=Tensor[(14, 5, 11), float32] */;
    %951 = cast(%var_846, dtype="float32") /* ty=Tensor[(143), float32] */;
    %952 = reshape(%951, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
    %953 = @func_687(%952) /* ty=(Tensor[(13, 1, 11), float32],) */;
    %954 = cast(%var_846, dtype="float32") /* ty=Tensor[(143), float32] */;
    %955 = reshape(%954, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
    %956 = @func_687(%955) /* ty=(Tensor[(13, 1, 11), float32],) */;
    %957 = %956.0;
    %958 = cast(%var_846, dtype="float32") /* ty=Tensor[(143), float32] */;
    %959 = reshape(%958, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
    %960 = @func_687(%959) /* ty=(Tensor[(13, 1, 11), float32],) */;
    %961 = %960.0;
    %962 = cast(%961, dtype="float64") /* ty=Tensor[(13, 1, 11), float64] */;
    %963 = shape_of(%957, dtype="int32") /* ty=Tensor[(3), int32] */;
    %964 = cast(%957, dtype="float64") /* ty=Tensor[(13, 1, 11), float64] */;
    %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %966 = cosh(%950) /* ty=Tensor[(14, 5, 11), float32] */;
    %967 = %953.0;
    %968 = floor_mod(%964, %965) /* ty=Tensor[(13, ?, 11), float64] */;
    (%966, %967, %var_846, %968)
  };
  %969(%var_897, %var_898) /* ty=(Tensor[(14, 5, 11), float32], Tensor[(13, 1, 11), float32], Tensor[(143), float32], Tensor[(13, ?, 11), float64]) */
}

def @func_5556() -> Tensor[(4, 3, 11), float64] {
  %971 = fn () -> Tensor[(4, 3, 11), float64] {
    %970 = @func_4788() /* ty=(Tensor[(4, 3, 11), float64], Tensor[(4, 3, 11), float64]) */;
    %970.1
  };
  %971() /* ty=Tensor[(4, 3, 11), float64] */
}

def @func_3179() -> Tensor[(4, 3, 11), float64] {
  %972 = @func_2692() /* ty=(Tensor[(4, 3, 11), float64],) */;
  %972.0
}

def @func_8415() -> float32 {
  @func_8413() /* ty=float32 */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen478/build/output.py", line 2434, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:22:00] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

