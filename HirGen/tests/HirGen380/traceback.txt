==========mod==========
#[version = "0.0.5"]
def @func_1393() -> (Tensor[(3, 13, 2), float32],) {
  %0 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %1 = %0.0;
  (%1,)
}

def @func_523(%var_495: Tensor[(3, 13, 2), float32], %var_515: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) {
  %2 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  %3 = cast(%var_495, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = cast(%var_515, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %8 = shape_of(%var_495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%var_495, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = cast(%var_515, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %12 = shape_of(%var_495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%var_495, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %15 = greater(%5, %6) /* ty=Tensor[(3, 13, 2), bool] */;
  %16 = less_equal(%9, %10) /* ty=Tensor[(3, 13, 2), bool] */;
  %17 = minimum(%13, %14) /* ty=Tensor[(3, 13, 2), float32] */;
  (%15, %16, %17)
}

def @func_1886() -> (Tensor[(3, 13, 2), float64],) {
  %18 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %20 = log(%19) /* ty=Tensor[(3, 13, 2), float64] */;
  (%20,)
}

def @func_407() -> Tensor[(3, 13, 2), float32] {
  %21 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %21.0
}

def @func_6542() -> (Tensor[(3, 13, 2), float64],) {
  %22 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %23 = %22.0;
  (%23,)
}

def @func_5324() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) {
  %24 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %25 = @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %26 = @func_5090() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %27 = %24.0;
  %28 = %25.0;
  %29 = %26.0;
  (%27, %28, %29)
}

def @func_4474() -> (Tensor[(3, 13, 2), float32],) {
  %30 = @func_3096() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %31 = %30.1;
  (%31,)
}

def @func_5333(%var_5327: Tensor[(6, 2, 9), int16], %var_5328: Tensor[(6, 2, 9), int16]) -> Tensor[(6, 2, 9), bool] {
  %32 = cast(%var_5328, dtype="bool") /* ty=Tensor[(6, 2, 9), bool] */;
  %33 = shape_of(%var_5327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%var_5327, dtype="bool") /* ty=Tensor[(6, 2, 9), bool] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%34, %35) /* ty=Tensor[(6, 2, 9), bool] */
}

def @func_5974(%var_5967: int64, %var_5969: Tensor[(11550), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], int64, Tensor[(770), float64], Tensor[(11550), float64]) {
  %36 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
  %37 = @func_4533() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %38 = cast(%var_5967, dtype="int64") /* ty=int64 */;
  %39 = cast(meta[relay.Constant][0] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %40 = cast(%var_5969, dtype="float64") /* ty=Tensor[(11550), float64] */;
  %41 = reshape(%38, newshape=[]) /* ty=int64 */;
  %42 = reshape(%39, newshape=[1, 770]) /* ty=Tensor[(1, 770), float64] */;
  %43 = reshape(%40, newshape=[15, 770]) /* ty=Tensor[(15, 770), float64] */;
  %44 = @func_1278(%41, %42, %43) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(15, 770), float64], Tensor[(3, 13, 2), float64]) */;
  %45 = %36.0;
  %46 = @func_4858() /* ty=Tensor[(3, 13, 2), float64] */;
  %47 = %37.0;
  %48 = %44.7;
  (%45, %46, %47, %48, %var_5967, meta[relay.Constant][0] /* ty=Tensor[(770), float64] */, %var_5969)
}

def @func_7269(%var_7217: Tensor[(3, 16, 3), float64]) -> (Tensor[(3, 16, 3), float64], Tensor[(3, 13, 2), float32]) {
  %49 = cast(%var_7217, dtype="float64") /* ty=Tensor[(3, 16, 3), float64] */;
  %50 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %51 = cos(%49) /* ty=Tensor[(3, 16, 3), float64] */;
  %52 = %50.1;
  (%51, %52)
}

def @func_1971(%var_1933: Tensor[(8, 2, 6), bool]) -> Tensor[(8, 2, 6), bool] {
  %53 = cast(%var_1933, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
  %54 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(8, 2, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 2, 6), bool] */, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%55, %56) /* ty=Tensor[(8, 2, 6), bool] */
}

def @func_6291() -> Tensor[(2640), uint16] {
  %57 = @func_4359() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(9, 2, 8), int8], Tensor[(144), int8], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16]) */;
  %57.4
}

def @func_8309() -> (Tensor[(3, 13, 2), float32],) {
  %58 = @func_6015() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) */;
  %59 = %58.0;
  (%59,)
}

def @func_7610() -> (Tensor[(3, 13, 2), float64],) {
  %60 = @func_2660() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) */;
  %61 = %60.1;
  (%61,)
}

def @func_7476() -> (Tensor[(3, 13, 2), float32],) {
  %62 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %63 = %62.0;
  (%63,)
}

def @func_268(%var_229: int64) -> Tensor[(16, 12, 2), int32] {
  %64 = cast(%var_229, dtype="bool") /* ty=bool */;
  %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 12, 2), int64] */, dtype="bool") /* ty=Tensor[(16, 12, 2), bool] */;
  %66 = less_equal(%64, %65) /* ty=Tensor[(16, 12, 2), bool] */;
  %67 = cast(%var_229, dtype="int32") /* ty=int32 */;
  %68 = cast(%66, dtype="int32") /* ty=Tensor[(16, 12, 2), int32] */;
  left_shift(%67, %68) /* ty=Tensor[(16, 12, 2), int32] */
}

def @func_6760(%var_6731: int64) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], int64, Tensor[(1, 770), float64], Tensor[(11550), float64], Tensor[(3, 13, 2), float64]) {
  %69 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
  %70 = cast(%var_6731, dtype="int64") /* ty=int64 */;
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 770), float64] */, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
  %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(11550), float64] */, dtype="float64") /* ty=Tensor[(11550), float64] */;
  %73 = reshape(%70, newshape=[]) /* ty=int64 */;
  %74 = reshape(%71, newshape=[1, 770]) /* ty=Tensor[(1, 770), float64] */;
  %75 = reshape(%72, newshape=[15, 770]) /* ty=Tensor[(15, 770), float64] */;
  %76 = @func_1278(%73, %74, %75) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(15, 770), float64], Tensor[(3, 13, 2), float64]) */;
  %77 = %69.2;
  %78 = %76.4;
  %79 = @func_6212() /* ty=Tensor[(3, 13, 2), float64] */;
  (%77, %78, %var_6731, meta[relay.Constant][3] /* ty=Tensor[(1, 770), float64] */, meta[relay.Constant][4] /* ty=Tensor[(11550), float64] */, %79)
}

def @func_4971() -> (Tensor[(3, 13, 2), float32],) {
  %80 = @func_2364() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %81 = %80.0;
  (%81,)
}

def @func_810() -> Tensor[(3, 13, 2), float64] {
  @func_648() /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_5654(%var_5644: Tensor[(15, 16, 5), float64], %var_5645: Tensor[(15, 16, 5), float64]) -> Tensor[(15, 16, 5), bool] {
  %82 = cast(%var_5645, dtype="bool") /* ty=Tensor[(15, 16, 5), bool] */;
  %83 = shape_of(%var_5644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%var_5644, dtype="bool") /* ty=Tensor[(15, 16, 5), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%84, %85) /* ty=Tensor[(15, 16, 5), bool] */
}

def @func_831() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %86 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %87 = %86.0;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %89 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %90 = log10(%88) /* ty=Tensor[(3, 13, 2), float32] */;
  (%89, %90)
}

def @func_7748(%var_7734: Tensor[(1365), float64], %var_7735: int64, %var_7737: Tensor[(2640, 1), uint16]) -> (Tensor[(3, 13, 2), float32], Tensor[(770), float64], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640, 1), uint16], Tensor[(2, 48), int64]) {
  %91 = cast(%var_7734, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %92 = cast(%var_7735, dtype="int64") /* ty=int64 */;
  %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %94 = cast(%var_7737, dtype="uint16") /* ty=Tensor[(2640, 1), uint16] */;
  %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 48), int64] */, dtype="int64") /* ty=Tensor[(2, 48), int64] */;
  %96 = reshape(%91, newshape=[7, 15, 13]) /* ty=Tensor[(7, 15, 13), float64] */;
  %97 = reshape(%92, newshape=[]) /* ty=int64 */;
  %98 = reshape(%93, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %99 = reshape(%94, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %100 = reshape(%95, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %101 = @func_3398(%96, %97, %98, %99, %100) /* ty=(Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) */;
  %102 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %103 = %101.7;
  (%102, %103, %var_7734, %var_7735, meta[relay.Constant][5] /* ty=Tensor[(770), float64] */, %var_7737, meta[relay.Constant][6] /* ty=Tensor[(2, 48), int64] */)
}

def @func_7876() -> Tensor[(3, 13, 2), float32] {
  @func_458() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_4942(%var_4925: Tensor[(1365), float64], %var_4926: int64, %var_4927: Tensor[(770), float64], %var_4929: Tensor[(96), int64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640), uint16], Tensor[(96), int64]) {
  %104 = @func_2003() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) */;
  %105 = cast(%var_4925, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %106 = cast(%var_4926, dtype="int64") /* ty=int64 */;
  %107 = cast(%var_4927, dtype="float64") /* ty=Tensor[(770), float64] */;
  %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %109 = cast(%var_4929, dtype="int64") /* ty=Tensor[(96), int64] */;
  %110 = reshape(%105, newshape=[7, 15, 13]) /* ty=Tensor[(7, 15, 13), float64] */;
  %111 = reshape(%106, newshape=[]) /* ty=int64 */;
  %112 = reshape(%107, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %113 = reshape(%108, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %114 = reshape(%109, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %115 = @func_3398(%110, %111, %112, %113, %114) /* ty=(Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) */;
  %116 = %104.0;
  %117 = %115.8;
  (%116, %117, %var_4925, %var_4926, %var_4927, meta[relay.Constant][7] /* ty=Tensor[(2640), uint16] */, %var_4929)
}

def @func_6258() -> (Tensor[(3, 13, 2), float32],) {
  %118 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  (%118,)
}

def @func_4858() -> Tensor[(3, 13, 2), float64] {
  %119 = @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %119.0
}

def @func_6271(%var_6266: int16, %var_6267: Tensor[(14, 9, 11), int16]) -> (Tensor[(14, 9, 11), int16],) {
  %120 = cast(%var_6266, dtype="int16") /* ty=int16 */;
  %121 = cast(%var_6267, dtype="int16") /* ty=Tensor[(14, 9, 11), int16] */;
  %122 = multiply(%120, %121) /* ty=Tensor[(14, 9, 11), int16] */;
  (%122,)
}

def @func_4128(%var_4123: Tensor[(7, 13, 15), uint8]) -> (Tensor[(7, 13, 15), bool],) {
  %123 = cast(meta[relay.Constant][8] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %124 = cast(%var_4123, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %125 = greater_equal(%123, %124) /* ty=Tensor[(7, 13, 15), bool] */;
  (%125,)
}

def @func_2083() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) {
  %126 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %127 = %126.0;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %129 = sinh(%128) /* ty=Tensor[(3, 13, 2), float32] */;
  %130 = @func_648() /* ty=Tensor[(3, 13, 2), float64] */;
  %131 = cast(%130, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %132 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%129, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %135 = @func_2003() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) */;
  %136 = power(%133, %134) /* ty=Tensor[(3, 13, 2), float64] */;
  %137 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  %138 = %135.1;
  (%136, %137, %138)
}

def @func_2782() -> (Tensor[(3, 13, 2), float32],) {
  %139 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %140 = %139.1;
  (%140,)
}

def @func_8209(%var_8137: Tensor[(10, 7, 6), float64]) -> (Tensor[(10, 7, 6), bool], Tensor[(10, 7, 6), float64], Tensor[(3, 13, 2), float32], Tensor[(11, 1, 8), float64], Tensor[(10, 7, 6), float32], Tensor[(10, 7, 6), float32]) {
  %141 = cast(%var_8137, dtype="float64") /* ty=Tensor[(10, 7, 6), float64] */;
  %142 = atanh(%141) /* ty=Tensor[(10, 7, 6), float64] */;
  %143 = cast(%var_8137, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = cast(%var_8137, dtype="float64") /* ty=Tensor[(10, 7, 6), float64] */;
  %148 = @func_5204() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %149 = cast(%142, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  %150 = cos(%149) /* ty=Tensor[(10, 7, 6), float32] */;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  %152 = cast(%150, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  %153 = greater_equal(%145, %146) /* ty=Tensor[(10, 7, 6), bool] */;
  %154 = tan(%147) /* ty=Tensor[(10, 7, 6), float64] */;
  %155 = %148.0;
  %156 = @func_2625() /* ty=Tensor[(11, 1, 8), float64] */;
  %157 = log10(%151) /* ty=Tensor[(10, 7, 6), float32] */;
  %158 = sigmoid(%152) /* ty=Tensor[(10, 7, 6), float32] */;
  (%153, %154, %155, %156, %157, %158)
}

def @func_5475(%var_5457: Tensor[(16, 9, 16), float32]) -> (Tensor[(16, 9, 16), bool],) {
  %159 = cast(%var_5457, dtype="float32") /* ty=Tensor[(16, 9, 16), float32] */;
  %160 = asin(%159) /* ty=Tensor[(16, 9, 16), float32] */;
  %161 = cast(%var_5457, dtype="bool") /* ty=Tensor[(16, 9, 16), bool] */;
  %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%160, dtype="bool") /* ty=Tensor[(16, 9, 16), bool] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %165 = equal(%163, %164) /* ty=Tensor[(16, 9, 16), bool] */;
  (%165,)
}

def @main(%var_8847: Tensor[(3, 16, 10), float32]) -> Tensor[(3, 16, 10), float32] {
  %166 = cast(%var_8847, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  acos(%166) /* ty=Tensor[(3, 16, 10), float32] */
}

def @func_1631(%var_1627: int64) -> (Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64) {
  %167 = @func_1076() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %168 = cast(%var_1627, dtype="int64") /* ty=int64 */;
  %169 = reshape(%168, newshape=[]) /* ty=int64 */;
  %170 = %167.2;
  %171 = @func_268(%169) /* ty=Tensor[(16, 12, 2), int32] */;
  (%170, %171, %var_1627)
}

def @func_4630() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) {
  %172 = @func_4474() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %173 = @func_4005() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
  %174 = %172.0;
  %175 = %173.1;
  (%174, %175)
}

def @func_6881(%var_6876: Tensor[(4, 9, 6), float32]) -> (Tensor[(4, 9, 6), float32],) {
  %176 = cast(%var_6876, dtype="float32") /* ty=Tensor[(4, 9, 6), float32] */;
  %177 = erf(%176) /* ty=Tensor[(4, 9, 6), float32] */;
  (%177,)
}

def @func_2364() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %178 = @func_989() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %179 = @func_2284() /* ty=Tensor[(3, 13, 2), float32] */;
  %180 = %178.2;
  (%179, %180)
}

def @func_2547(%var_2540: Tensor[(7, 11, 9), float64]) -> Tensor[(7, 11, 9), float64] {
  %181 = cast(%var_2540, dtype="float64") /* ty=Tensor[(7, 11, 9), float64] */;
  log10(%181) /* ty=Tensor[(7, 11, 9), float64] */
}

def @func_458() -> Tensor[(3, 13, 2), float32] {
  @func_407() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_7533() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) {
  %182 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %183 = @func_989() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %184 = %182.0;
  %185 = %183.1;
  (%184, %185)
}

def @func_6356(%var_6353: Tensor[(3, 40), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 40), float64], int64) {
  %186 = @func_2083() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) */;
  %187 = cast(%var_6353, dtype="float64") /* ty=Tensor[(3, 40), float64] */;
  %188 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %189 = reshape(%187, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float64] */;
  %190 = reshape(%188, newshape=[]) /* ty=int64 */;
  %191 = @func_4163(%189, %190) /* ty=(Tensor[(6, 4, 5), float64], Tensor[(3, 13, 2), float32], int64, Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) */;
  %192 = %186.1;
  %193 = %191.4;
  (%192, %193, %var_6353, -2 /* ty=int64 */)
}

def @func_699(%var_691: int64) -> (Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) {
  %194 = cast(%var_691, dtype="int64") /* ty=int64 */;
  %195 = reshape(%194, newshape=[]) /* ty=int64 */;
  %196 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %197 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %198 = @func_268(%195) /* ty=Tensor[(16, 12, 2), int32] */;
  %199 = %196.0;
  (%197, %198, %var_691, %199)
}

def @func_1653(%var_1648: Tensor[(12, 12, 14), uint16], %var_1649: Tensor[(12, 12, 14), uint16]) -> Tensor[(12, 12, 14), bool] {
  %200 = cast(%var_1649, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %201 = shape_of(%var_1648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%var_1648, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%202, %203) /* ty=Tensor[(12, 12, 14), bool] */
}

def @func_4067(%var_4017: Tensor[(4, 3, 16), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), int64], Tensor[(4, 3, 16), float32], Tensor[(3, 13, 2), float32]) {
  %204 = @func_489() /* ty=(Tensor[(3, 13, 2), int64],) */;
  %205 = cast(%var_4017, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %206 = atan(%205) /* ty=Tensor[(4, 3, 16), float64] */;
  %207 = cast(%206, dtype="uint32") /* ty=Tensor[(4, 3, 16), uint32] */;
  %208 = shape_of(%var_4017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_4017, dtype="uint32") /* ty=Tensor[(4, 3, 16), uint32] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %211 = subtract(%209, %210) /* ty=Tensor[(4, 3, 16), uint32] */;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %213 = @func_2284() /* ty=Tensor[(3, 13, 2), float32] */;
  %214 = %204.0;
  %215 = exp(%212) /* ty=Tensor[(4, 3, 16), float32] */;
  %216 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  (%213, %214, %215, %216)
}

def @func_4709(%var_4667: Tensor[(8, 2, 11), float64], %var_4674: Tensor[(78), int64], %var_4675: Tensor[(96), int64]) -> (Tensor[(3, 13, 2), bool], Tensor[(78), int64], Tensor[(96), int64], Tensor[(8, 2, 11), uint16]) {
  %217 = cast(%var_4674, dtype="int64") /* ty=Tensor[(78), int64] */;
  %218 = cast(%var_4675, dtype="int64") /* ty=Tensor[(96), int64] */;
  %219 = reshape(%217, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), int64] */;
  %220 = reshape(%218, newshape=[1, 96]) /* ty=Tensor[(1, 96), int64] */;
  %221 = @func_1815(%219, %220) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), float64], Tensor[(1, 96), int64]) */;
  %222 = cast(%var_4667, dtype="float64") /* ty=Tensor[(8, 2, 11), float64] */;
  %223 = erf(%222) /* ty=Tensor[(8, 2, 11), float64] */;
  %224 = cast(%var_4667, dtype="uint16") /* ty=Tensor[(8, 2, 11), uint16] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="uint16") /* ty=Tensor[(8, 2, 11), uint16] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %228 = %221.0;
  %229 = maximum(%226, %227) /* ty=Tensor[(8, 2, 11), uint16] */;
  (%228, %var_4674, %var_4675, %229)
}

def @func_6579() -> Tensor[(3, 13, 2), float64] {
  %230 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
  %230.1
}

def @func_2965(%var_2896: Tensor[(2640), uint16]) -> (Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(12, 12, 14), float64], Tensor[(3, 13, 2), float64]) {
  %231 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %232 = cast(%var_2896, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %233 = cast(%var_2896, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %234 = reshape(%232, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %235 = reshape(%233, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %236 = @func_2463(%234, %235) /* ty=(Tensor[(3, 13, 2), float64], Tensor[(12, 12, 14), bool], Tensor[(28, 72), uint16], Tensor[(2640), uint16], Tensor[(15, 16, 11), uint32], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), int64], Tensor[(96), int64]) */;
  %237 = %236.1;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %239 = acosh(%238) /* ty=Tensor[(12, 12, 14), float32] */;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %241 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %242 = %231.0;
  %243 = erf(%240) /* ty=Tensor[(12, 12, 14), float64] */;
  %244 = %241.0;
  (%242, %var_2896, %243, %244)
}

def @func_3078(%var_3050: Tensor[(6, 14, 2), uint8], %var_3051: Tensor[(6, 14, 2), uint8]) -> Tensor[(6, 14, 2), bool] {
  %245 = cast(%var_3051, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
  %246 = shape_of(%var_3050, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%var_3050, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%247, %248) /* ty=Tensor[(6, 14, 2), bool] */
}

def @func_1304() -> (Tensor[(3, 13, 2), float32],) {
  %249 = @func_1076() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %250 = %249.2;
  (%250,)
}

def @func_5759() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), int64], Tensor[(3, 13, 2), float32]) {
  %251 = @func_3096() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %252 = @func_489() /* ty=(Tensor[(3, 13, 2), int64],) */;
  %253 = @func_4474() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %254 = %251.1;
  %255 = %252.0;
  %256 = %253.0;
  (%254, %255, %256)
}

def @func_6408() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), bool], Tensor[(176), float64], Tensor[(2, 48), int64], Tensor[(3, 13, 2), float64]) {
  %257 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %258 = %257.0;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %260 = cast(meta[relay.Constant][9] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %261 = cast(%258, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %262 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 48), int64] */, dtype="int64") /* ty=Tensor[(2, 48), int64] */;
  %263 = reshape(%260, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float64] */;
  %264 = reshape(%261, newshape=[78]) /* ty=Tensor[(78), int64] */;
  %265 = reshape(%262, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %266 = @func_4709(%263, %264, %265) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(78), int64], Tensor[(96), int64], Tensor[(8, 2, 11), uint16]) */;
  %267 = acos(%259) /* ty=Tensor[(3, 13, 2), float64] */;
  %268 = %266.0;
  %269 = @func_6212() /* ty=Tensor[(3, 13, 2), float64] */;
  (%267, %268, meta[relay.Constant][9] /* ty=Tensor[(176), float64] */, meta[relay.Constant][10] /* ty=Tensor[(2, 48), int64] */, %269)
}

def @func_2256(%var_2213: Tensor[(2016), uint16], %var_2232: Tensor[(12, 12, 14), bool]) -> (Tensor[(15, 16, 11), uint16], Tensor[(3, 13, 2), float32], Tensor[(2640), float64], Tensor[(6, 4, 4), float64], Tensor[(96), int64], Tensor[(2016), uint16], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), float64], Tensor[(3, 13, 2), float32]) {
  %270 = cast(meta[relay.Constant][11] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %271 = reshape(%270, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %272 = @func_1304() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %273 = cast(meta[relay.Constant][11] /* ty=Tensor[(2640), uint16] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %274 = cast(meta[relay.Constant][12] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %275 = cast(meta[relay.Constant][12] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %276 = reshape(%274, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
  %277 = reshape(%275, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
  %278 = @func_1677(%276, %277) /* ty=(Tensor[(6, 4, 4), int64], Tensor[(6, 4, 4), float64]) */;
  %279 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  %280 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 13, 2), float32] */, dtype="uint8") /* ty=Tensor[(3, 13, 2), uint8] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%279, dtype="uint8") /* ty=Tensor[(3, 13, 2), uint8] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %284 = maximum(%282, %283) /* ty=Tensor[(3, 13, 2), uint8] */;
  %285 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %288 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%284, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %291 = cast(%var_2213, dtype="uint16") /* ty=Tensor[(2016), uint16] */;
  %292 = cast(%var_2213, dtype="uint16") /* ty=Tensor[(2016), uint16] */;
  %293 = reshape(%291, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %294 = reshape(%292, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %295 = @func_1653(%293, %294) /* ty=Tensor[(12, 12, 14), bool] */;
  %296 = cast(%var_2232, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %300 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %301 = @func_1707(%271) /* ty=Tensor[(15, 16, 11), uint16] */;
  %302 = %272.0;
  %303 = sinh(%273) /* ty=Tensor[(2640), float64] */;
  %304 = %278.1;
  %305 = divide(%289, %290) /* ty=Tensor[(3, 13, 2), float32] */;
  %306 = mod(%298, %299) /* ty=Tensor[(12, 12, 14), float64] */;
  %307 = %300.0;
  (%301, %302, %303, %304, meta[relay.Constant][12] /* ty=Tensor[(96), int64] */, %var_2213, %305, %306, %307)
}

def @func_3571(%var_3493: bool, %var_3494: Tensor[(12, 9, 15), bool], %var_3517: Tensor[(12, 9, 15), bool], %var_3546: Tensor[(12, 9, 15), float32]) -> (Tensor[(12, 9, 15), uint16], Tensor[(3, 13, 2), float32], Tensor[(15, 16, 11), uint16], Tensor[(2640), uint16], Tensor[(12, 9, 15), bool]) {
  %308 = cast(%var_3493, dtype="bool") /* ty=bool */;
  %309 = cast(%var_3494, dtype="bool") /* ty=Tensor[(12, 9, 15), bool] */;
  %310 = logical_and(%308, %309) /* ty=Tensor[(12, 9, 15), bool] */;
  %311 = cast(%var_3517, dtype="uint16") /* ty=Tensor[(12, 9, 15), uint16] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%310, dtype="uint16") /* ty=Tensor[(12, 9, 15), uint16] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %315 = @func_989() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %316 = cast(meta[relay.Constant][14] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %317 = reshape(%316, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %318 = cast(%var_3494, dtype="float32") /* ty=Tensor[(12, 9, 15), float32] */;
  %319 = erf(%318) /* ty=Tensor[(12, 9, 15), float32] */;
  %320 = cast(%var_3546, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%319, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %324 = power(%322, %323) /* ty=Tensor[(12, 9, 15), float64] */;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
  %326 = asin(%325) /* ty=Tensor[(12, 9, 15), float64] */;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
  %328 = atan(%327) /* ty=Tensor[(12, 9, 15), float64] */;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
  %330 = asinh(%329) /* ty=Tensor[(12, 9, 15), float64] */;
  %331 = cast(%310, dtype="bool") /* ty=Tensor[(12, 9, 15), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(12, 9, 15), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = maximum(%313, %314) /* ty=Tensor[(12, 9, 15), uint16] */;
  %336 = %315.0;
  %337 = @func_1707(%317) /* ty=Tensor[(15, 16, 11), uint16] */;
  %338 = greater(%333, %334) /* ty=Tensor[(12, 9, 15), bool] */;
  (%335, %336, %337, meta[relay.Constant][14] /* ty=Tensor[(2640), uint16] */, %338)
}

def @func_3747(%var_3728: Tensor[(3, 13, 2), float32], %var_3744: Tensor[(2640), uint16]) -> (Tensor[(3, 13, 2), uint16], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(2640), uint16]) {
  %339 = @func_3096() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %340 = %339.0;
  %341 = cast(%var_3728, dtype="uint16") /* ty=Tensor[(3, 13, 2), uint16] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%340, dtype="uint16") /* ty=Tensor[(3, 13, 2), uint16] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %345 = cast(%var_3744, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %346 = cast(%var_3744, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %347 = reshape(%345, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %348 = reshape(%346, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %349 = @func_2463(%347, %348) /* ty=(Tensor[(3, 13, 2), float64], Tensor[(12, 12, 14), bool], Tensor[(28, 72), uint16], Tensor[(2640), uint16], Tensor[(15, 16, 11), uint32], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), int64], Tensor[(96), int64]) */;
  %350 = bitwise_xor(%343, %344) /* ty=Tensor[(3, 13, 2), uint16] */;
  %351 = @func_2284() /* ty=Tensor[(3, 13, 2), float32] */;
  %352 = %349.3;
  (%350, %351, %352, %var_3744)
}

def @func_6609() -> Tensor[(3, 13, 2), float32] {
  @func_3468() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_7966() -> (Tensor[(3, 13, 2), float32],) {
  %353 = @func_2284() /* ty=Tensor[(3, 13, 2), float32] */;
  (%353,)
}

def @func_853(%var_838: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), float32],) {
  %354 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %355 = %354.0;
  %356 = cast(%var_838, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %360 = floor_mod(%358, %359) /* ty=Tensor[(3, 13, 2), float64] */;
  %361 = cast(%360, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %362 = erf(%361) /* ty=Tensor[(3, 13, 2), float32] */;
  (%362,)
}

def @func_6230() -> Tensor[(3, 13, 2), float32] {
  %363 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
  %363.2
}

def @func_7388() -> (Tensor[(3, 13, 2), float32],) {
  %364 = @func_5035() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %365 = %364.1;
  (%365,)
}

def @func_3683(%var_3625: Tensor[(3, 13, 2), float32], %var_3657: Tensor[(770), float64], %var_3659: Tensor[(48, 2), int64], %var_3670: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), int64], Tensor[(11, 1, 8), float64], Tensor[(11, 1, 8), float64], Tensor[(96), int64], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640), uint16], Tensor[(48, 2), int64], Tensor[(3, 13, 2), float32]) {
  %366 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %367 = %366.1;
  %368 = cast(%var_3625, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %372 = @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */;
  %373 = cast(meta[relay.Constant][15] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %374 = cast(9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %375 = cast(%var_3657, dtype="float64") /* ty=Tensor[(770), float64] */;
  %376 = cast(meta[relay.Constant][16] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %377 = cast(%var_3659, dtype="int64") /* ty=Tensor[(48, 2), int64] */;
  %378 = reshape(%373, newshape=[7, 15, 13]) /* ty=Tensor[(7, 15, 13), float64] */;
  %379 = reshape(%374, newshape=[]) /* ty=int64 */;
  %380 = reshape(%375, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %381 = reshape(%376, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %382 = reshape(%377, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %383 = @func_3398(%378, %379, %380, %381, %382) /* ty=(Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) */;
  %384 = cast(%var_3625, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %385 = tan(%384) /* ty=Tensor[(3, 13, 2), float32] */;
  %386 = cast(%var_3670, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %390 = left_shift(%370, %371) /* ty=Tensor[(3, 13, 2), int64] */;
  %391 = @func_2625() /* ty=Tensor[(11, 1, 8), float64] */;
  %392 = %372.0;
  %393 = %383.11;
  %394 = mod(%388, %389) /* ty=Tensor[(3, 13, 2), float32] */;
  (%390, %391, %392, %393, meta[relay.Constant][15] /* ty=Tensor[(1365), float64] */, 9 /* ty=int64 */, %var_3657, meta[relay.Constant][16] /* ty=Tensor[(2640), uint16] */, %var_3659, %394)
}

def @func_6212() -> Tensor[(3, 13, 2), float64] {
  %395 = @func_2660() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) */;
  %395.1
}

def @func_8604() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], int64) {
  %396 = cast(-7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %397 = reshape(%396, newshape=[]) /* ty=int64 */;
  %398 = @func_699(%397) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
  %399 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %400 = %398.0;
  (%399, %400, -7 /* ty=int64 */)
}

def @func_5558() -> (Tensor[(11, 1, 8), float64], Tensor[(3, 13, 2), float32]) {
  %401 = @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */;
  %402 = @func_4533() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %403 = %401.0;
  %404 = %402.0;
  (%403, %404)
}

def @func_4359() -> (Tensor[(3, 13, 2), float64], Tensor[(9, 2, 8), int8], Tensor[(144), int8], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16]) {
  %405 = @func_3305() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
  %406 = cast(meta[relay.Constant][17] /* ty=Tensor[(144), int8] */, dtype="int8") /* ty=Tensor[(144), int8] */;
  %407 = reshape(%406, newshape=[9, 2, 8]) /* ty=Tensor[(9, 2, 8), int8] */;
  %408 = @func_2529(%407) /* ty=(Tensor[(9, 2, 8), int8],) */;
  %409 = %405.1;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %411 = cast(meta[relay.Constant][18] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %412 = reshape(%410, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %413 = reshape(%411, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %414 = @func_3747(%412, %413) /* ty=(Tensor[(3, 13, 2), uint16], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(2640), uint16]) */;
  %415 = %408.0;
  %416 = %414.1;
  (%409, %415, meta[relay.Constant][17] /* ty=Tensor[(144), int8] */, %416, meta[relay.Constant][18] /* ty=Tensor[(2640), uint16] */)
}

def @func_5453(%var_5439: Tensor[(11, 12, 8), float64]) -> Tensor[(11, 12, 8), int64] {
  %417 = @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */;
  %418 = %417.0;
  %419 = cast(%418, dtype="int64") /* ty=Tensor[(11, 1, 8), int64] */;
  %420 = cast(%var_5439, dtype="int64") /* ty=Tensor[(11, 12, 8), int64] */;
  bitwise_and(%419, %420) /* ty=Tensor[(11, 12, 8), int64] */
}

def @func_4604(%var_4592: int64, %var_4593: Tensor[(7, 110), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], int64, Tensor[(7, 110), float64], Tensor[(11550), float64]) {
  %421 = cast(%var_4592, dtype="int64") /* ty=int64 */;
  %422 = cast(%var_4593, dtype="float64") /* ty=Tensor[(7, 110), float64] */;
  %423 = cast(meta[relay.Constant][19] /* ty=Tensor[(11550), float64] */, dtype="float64") /* ty=Tensor[(11550), float64] */;
  %424 = reshape(%421, newshape=[]) /* ty=int64 */;
  %425 = reshape(%422, newshape=[1, 770]) /* ty=Tensor[(1, 770), float64] */;
  %426 = reshape(%423, newshape=[15, 770]) /* ty=Tensor[(15, 770), float64] */;
  %427 = @func_1278(%424, %425, %426) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(15, 770), float64], Tensor[(3, 13, 2), float64]) */;
  %428 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %429 = %427.9;
  (%428, %429, %var_4592, %var_4593, meta[relay.Constant][19] /* ty=Tensor[(11550), float64] */)
}

def @func_6788() -> (Tensor[(3, 13, 2), float32],) {
  %430 = @func_1915() /* ty=Tensor[(3, 13, 2), float32] */;
  (%430,)
}

def @func_5204() -> (Tensor[(3, 13, 2), float32],) {
  %431 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %432 = %431.0;
  (%432,)
}

def @func_7334(%var_7314: Tensor[(13, 6, 14), int32]) -> Tensor[(13, 6, 14), int32] {
  %433 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 6, 14), int32] */, dtype="int32") /* ty=Tensor[(13, 6, 14), int32] */;
  %434 = shape_of(%var_7314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%var_7314, dtype="int32") /* ty=Tensor[(13, 6, 14), int32] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%435, %436) /* ty=Tensor[(13, 6, 14), int32] */
}

def @func_5129(%var_5114: Tensor[(12, 9, 4), float32], %var_5115: Tensor[(12, 9, 4), float32]) -> Tensor[(12, 9, 4), float32] {
  %437 = cast(%var_5115, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %438 = shape_of(%var_5114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_5114, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%439, %440) /* ty=Tensor[(12, 9, 4), float32] */
}

def @func_3769(%var_3752: int8) -> (Tensor[(12, 13, 8), bool], Tensor[(78), float32], Tensor[(3, 13, 2), float64]) {
  %441 = cast(%var_3752, dtype="bool") /* ty=bool */;
  %442 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 13, 8), int8] */, dtype="bool") /* ty=Tensor[(12, 13, 8), bool] */;
  %443 = cast(meta[relay.Constant][22] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %444 = cast(meta[relay.Constant][22] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %445 = reshape(%443, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %446 = reshape(%444, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %447 = @func_523(%445, %446) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
  %448 = %447.1;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %450 = equal(%441, %442) /* ty=Tensor[(12, 13, 8), bool] */;
  %451 = atan(%449) /* ty=Tensor[(3, 13, 2), float64] */;
  (%450, meta[relay.Constant][22] /* ty=Tensor[(78), float32] */, %451)
}

def @func_4824() -> (Tensor[(3, 13, 2), float32],) {
  %452 = @func_1304() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %453 = %452.0;
  (%453,)
}

def @func_6718() -> (Tensor[(3, 13, 2), float64], Tensor[(15, 16, 11), uint16], Tensor[(2640), uint16]) {
  %454 = @func_1514() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
  %455 = cast(meta[relay.Constant][23] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %456 = reshape(%455, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %457 = %454.1;
  %458 = @func_1707(%456) /* ty=Tensor[(15, 16, 11), uint16] */;
  (%457, %458, meta[relay.Constant][23] /* ty=Tensor[(2640), uint16] */)
}

def @func_4573() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  %459 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %460 = @func_3305() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
  %461 = %459.0;
  %462 = %460.0;
  (%461, %462)
}

def @func_8544() -> Tensor[(3, 13, 2), float32] {
  @func_458() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_1677(%var_1662: Tensor[(6, 4, 4), int64], %var_1663: Tensor[(6, 4, 4), int64]) -> (Tensor[(6, 4, 4), int64], Tensor[(6, 4, 4), float64]) {
  %463 = cast(%var_1663, dtype="int64") /* ty=Tensor[(6, 4, 4), int64] */;
  %464 = shape_of(%var_1662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_1662, dtype="int64") /* ty=Tensor[(6, 4, 4), int64] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %467 = cast(%var_1662, dtype="float64") /* ty=Tensor[(6, 4, 4), float64] */;
  %468 = bitwise_or(%465, %466) /* ty=Tensor[(6, 4, 4), int64] */;
  %469 = cosh(%467) /* ty=Tensor[(6, 4, 4), float64] */;
  (%468, %469)
}

def @func_8350() -> (Tensor[(3, 13, 2), float32],) {
  %470 = @func_7966() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %471 = %470.0;
  (%471,)
}

def @func_1915() -> Tensor[(3, 13, 2), float32] {
  @func_407() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_353() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %472 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %473 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %474 = %472.0;
  %475 = %473.0;
  (%474, %475)
}

def @func_2625() -> Tensor[(11, 1, 8), float64] {
  %476 = @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */;
  %476.0
}

def @func_489() -> (Tensor[(3, 13, 2), int64],) {
  %477 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %478 = %477.1;
  %479 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 13, 2), float32] */, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %483 = add(%481, %482) /* ty=Tensor[(3, 13, 2), int64] */;
  (%483,)
}

def @func_5253() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) {
  %484 = @func_2494() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %485 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %486 = %484.0;
  %487 = %485.0;
  (%486, %487)
}

def @func_2097() -> Tensor[(3, 13, 2), float32] {
  %488 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %488.0
}

def @func_6173(%var_6152: Tensor[(8, 4, 8), int16], %var_6153: Tensor[(8, 4, 8), int16], %var_6170: Tensor[(78), float32]) -> (Tensor[(8, 4, 8), bool], Tensor[(7, 11, 9), float64], Tensor[(78), float32]) {
  %489 = cast(%var_6153, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %490 = shape_of(%var_6152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%var_6152, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = cast(%var_6170, dtype="float32") /* ty=Tensor[(78), float32] */;
  %494 = reshape(%493, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %495 = @func_4241(%494) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(7, 11, 9), float64], Tensor[(693), float64]) */;
  %496 = less_equal(%491, %492) /* ty=Tensor[(8, 4, 8), bool] */;
  %497 = %495.1;
  (%496, %497, %var_6170)
}

def @func_1514() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  %498 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
  %499 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
  (%498, %499)
}

def @func_5090() -> (Tensor[(3, 13, 2), float32],) {
  %500 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %501 = %500.0;
  (%501,)
}

def @func_219(%var_208: Tensor[(10, 7, 11), float64], %var_209: Tensor[(10, 7, 11), float64]) -> (Tensor[(10, 7, 11), float64],) {
  %502 = cast(%var_209, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
  %503 = shape_of(%var_208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_208, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %506 = power(%504, %505) /* ty=Tensor[(10, 7, 11), float64] */;
  (%506,)
}

def @func_1108() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %507 = @func_1076() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %508 = %507.2;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %510 = reshape(%509, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %511 = @func_853(%510) /* ty=(Tensor[(3, 13, 2), float32],) */;
  %512 = %511.0;
  (%508, %512)
}

def @func_5592() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %513 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %514 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %515 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %516 = %513.0;
  %517 = %514.1;
  %518 = %515.1;
  (%516, %517, %518)
}

def @func_6015() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) {
  %519 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %520 = %519.1;
  %521 = cast(%520, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %522 = cast(%520, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %523 = reshape(%521, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %524 = reshape(%522, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %525 = @func_523(%523, %524) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
  %526 = %525.1;
  (%520, %526)
}

def @func_2494() -> (Tensor[(3, 13, 2), float64],) {
  %527 = @func_989() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %528 = %527.0;
  %529 = cast(%528, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %530 = asin(%529) /* ty=Tensor[(3, 13, 2), float64] */;
  (%530,)
}

def @func_2558() -> (Tensor[(3, 13, 2), float64],) {
  %531 = @func_2083() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) */;
  %532 = %531.0;
  (%532,)
}

def @func_1076() -> (Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %533 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
  %534 = cast(%533, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %535 = cast(%533, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %536 = reshape(%534, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %537 = reshape(%535, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %538 = @func_523(%536, %537) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
  %539 = cast(%533, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %540 = %538.1;
  %541 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %542 = sin(%539) /* ty=Tensor[(3, 13, 2), float32] */;
  (%540, %541, %542)
}

def @func_2877() -> (Tensor[(11, 1, 8), float32], Tensor[(11, 1, 8), float64]) {
  %543 = @func_2625() /* ty=Tensor[(11, 1, 8), float64] */;
  %544 = cast(%543, dtype="float32") /* ty=Tensor[(11, 1, 8), float32] */;
  %545 = cast(%543, dtype="float32") /* ty=Tensor[(11, 1, 8), float32] */;
  %546 = tan(%545) /* ty=Tensor[(11, 1, 8), float32] */;
  %547 = cast(%546, dtype="float64") /* ty=Tensor[(11, 1, 8), float64] */;
  %548 = log(%544) /* ty=Tensor[(11, 1, 8), float32] */;
  %549 = sigmoid(%547) /* ty=Tensor[(11, 1, 8), float64] */;
  (%548, %549)
}

def @func_4907() -> Tensor[(3, 13, 2), float64] {
  @func_810() /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_3926(%var_3886: bool, %var_3887: Tensor[(7, 12, 8), bool]) -> (Tensor[(7, 12, 8), float32], Tensor[(3, 13, 2), float32]) {
  %550 = cast(%var_3886, dtype="bool") /* ty=bool */;
  %551 = cast(%var_3887, dtype="bool") /* ty=Tensor[(7, 12, 8), bool] */;
  %552 = logical_and(%550, %551) /* ty=Tensor[(7, 12, 8), bool] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(7, 12, 8), float32] */;
  %554 = cast(%var_3886, dtype="float32") /* ty=float32 */;
  %555 = @func_1076() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %556 = power(%553, %554) /* ty=Tensor[(7, 12, 8), float32] */;
  %557 = %555.1;
  (%556, %557)
}

def @func_7199() -> (Tensor[(3, 13, 2), float64], Tensor[(11, 1, 8), float64]) {
  %558 = @func_2083() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) */;
  %559 = %558.0;
  %560 = @func_2625() /* ty=Tensor[(11, 1, 8), float64] */;
  (%559, %560)
}

def @func_3179(%var_3165: Tensor[(96), int64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(96), int64], Tensor[(8, 2, 6), bool]) {
  %561 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %562 = %561.1;
  %563 = cast(%562, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %564 = cast(%var_3165, dtype="int64") /* ty=Tensor[(96), int64] */;
  %565 = reshape(%563, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), int64] */;
  %566 = reshape(%564, newshape=[1, 96]) /* ty=Tensor[(1, 96), int64] */;
  %567 = @func_1815(%565, %566) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), float64], Tensor[(1, 96), int64]) */;
  %568 = cast(%var_3165, dtype="bool") /* ty=Tensor[(96), bool] */;
  %569 = reshape(%568, newshape=[8, 2, 6]) /* ty=Tensor[(8, 2, 6), bool] */;
  %570 = %567.0;
  %571 = @func_1971(%569) /* ty=Tensor[(8, 2, 6), bool] */;
  (%562, %570, %var_3165, %571)
}

def @func_281() -> (Tensor[(3, 13, 2), float32],) {
  %572 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 13, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %573 = atanh(%572) /* ty=Tensor[(3, 13, 2), float32] */;
  (%573,)
}

def @func_1278(%var_1176: int64, %var_1179: Tensor[(1, 770), float64], %var_1233: Tensor[(15, 770), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(15, 770), float64], Tensor[(3, 13, 2), float64]) {
  %574 = cast(%var_1176, dtype="int64") /* ty=int64 */;
  %575 = reshape(%574, newshape=[]) /* ty=int64 */;
  %576 = @func_699(%575) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
  %577 = cast(%var_1179, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
  %578 = cast(%var_1179, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
  %579 = reshape(%577, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %580 = reshape(%578, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %581 = @func_219(%579, %580) /* ty=(Tensor[(10, 7, 11), float64],) */;
  %582 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %583 = %582.0;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %585 = %576.0;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %587 = reshape(%584, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %588 = reshape(%586, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %589 = @func_523(%587, %588) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
  %590 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %591 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %592 = cast(%var_1179, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
  %593 = %581.0;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
  %595 = reshape(%592, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %596 = reshape(%594, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %597 = @func_219(%595, %596) /* ty=(Tensor[(10, 7, 11), float64],) */;
  %598 = cast(%var_1179, dtype="int64") /* ty=Tensor[(1, 770), int64] */;
  %599 = cast(%var_1233, dtype="int64") /* ty=Tensor[(15, 770), int64] */;
  %600 = multiply(%598, %599) /* ty=Tensor[(15, 770), int64] */;
  %601 = cast(%var_1176, dtype="float64") /* ty=float64 */;
  %602 = cast(%600, dtype="float64") /* ty=Tensor[(15, 770), float64] */;
  %603 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  %604 = %589.1;
  %605 = %590.0;
  %606 = %591.0;
  %607 = %597.0;
  %608 = divide(%601, %602) /* ty=Tensor[(15, 770), float64] */;
  %609 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
  (%603, %585, %593, %583, %604, %605, %606, %607, %608, %609)
}

def @func_8718() -> (Tensor[(3, 13, 2), float32],) {
  %610 = @func_4533() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %611 = %610.0;
  (%611,)
}

def @func_4005() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  %612 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %613 = %612.1;
  %614 = cast(%613, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %615 = @func_2494() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %616 = cosh(%614) /* ty=Tensor[(3, 13, 2), float64] */;
  %617 = %615.0;
  (%616, %617)
}

def @func_2334() -> (Tensor[(11, 1, 8), float64],) {
  %618 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(11, 1, 8), float64] */;
  %619 = asin(%618) /* ty=Tensor[(11, 1, 8), float64] */;
  (%619,)
}

def @func_2003() -> (Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) {
  %620 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %621 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 144), uint16] */, dtype="uint16") /* ty=Tensor[(14, 144), uint16] */;
  %622 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 144), uint16] */, dtype="uint16") /* ty=Tensor[(14, 144), uint16] */;
  %623 = reshape(%621, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %624 = reshape(%622, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %625 = %620.0;
  %626 = @func_1653(%623, %624) /* ty=Tensor[(12, 12, 14), bool] */;
  (%625, %626, meta[relay.Constant][27] /* ty=Tensor[(14, 144), uint16] */)
}

def @func_648() -> Tensor[(3, 13, 2), float64] {
  %627 = @func_489() /* ty=(Tensor[(3, 13, 2), int64],) */;
  %628 = %627.0;
  %629 = cast(%628, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  sigmoid(%629) /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_4786(%var_4765: Tensor[(770), float64], %var_4767: Tensor[(1, 96), int64], %var_4771: Tensor[(1620), bool]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2, 1320), uint16], Tensor[(1, 96), int64], Tensor[(15, 16, 11), uint16], Tensor[(1620), bool]) {
  %630 = cast(meta[relay.Constant][28] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %631 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %632 = cast(%var_4765, dtype="float64") /* ty=Tensor[(770), float64] */;
  %633 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 1320), uint16] */, dtype="uint16") /* ty=Tensor[(2, 1320), uint16] */;
  %634 = cast(%var_4767, dtype="int64") /* ty=Tensor[(1, 96), int64] */;
  %635 = reshape(%630, newshape=[7, 15, 13]) /* ty=Tensor[(7, 15, 13), float64] */;
  %636 = reshape(%631, newshape=[]) /* ty=int64 */;
  %637 = reshape(%632, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %638 = reshape(%633, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %639 = reshape(%634, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %640 = @func_3398(%635, %636, %637, %638, %639) /* ty=(Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) */;
  %641 = cast(-3 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %642 = cast(%var_4771, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %643 = cast(%var_4771, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %644 = cast(%var_4771, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %645 = reshape(%641, newshape=[]) /* ty=bool */;
  %646 = reshape(%642, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), bool] */;
  %647 = reshape(%643, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), bool] */;
  %648 = reshape(%644, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float32] */;
  %649 = @func_3571(%645, %646, %647, %648) /* ty=(Tensor[(12, 9, 15), uint16], Tensor[(3, 13, 2), float32], Tensor[(15, 16, 11), uint16], Tensor[(2640), uint16], Tensor[(12, 9, 15), bool]) */;
  %650 = @func_2097() /* ty=Tensor[(3, 13, 2), float32] */;
  %651 = %640.5;
  %652 = %649.2;
  (%650, %651, meta[relay.Constant][28] /* ty=Tensor[(1365), float64] */, -3 /* ty=int64 */, %var_4765, meta[relay.Constant][29] /* ty=Tensor[(2, 1320), uint16] */, %var_4767, %652, %var_4771)
}

def @func_4163(%var_4135: Tensor[(6, 4, 5), float64], %var_4140: int64) -> (Tensor[(6, 4, 5), float64], Tensor[(3, 13, 2), float32], int64, Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) {
  %653 = cast(%var_4135, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
  %654 = cast(%var_4140, dtype="int64") /* ty=int64 */;
  %655 = reshape(%654, newshape=[]) /* ty=int64 */;
  %656 = @func_699(%655) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
  %657 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %658 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
  %659 = acosh(%653) /* ty=Tensor[(6, 4, 5), float64] */;
  %660 = %656.3;
  %661 = %657.1;
  %662 = %658.1;
  (%659, %660, %var_4140, %661, %662)
}

def @func_757() -> (Tensor[(3, 13, 2), int64],) {
  %663 = @func_489() /* ty=(Tensor[(3, 13, 2), int64],) */;
  %664 = %663.0;
  (%664,)
}

def @func_4533() -> (Tensor[(3, 13, 2), float32],) {
  %665 = @func_1076() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %666 = %665.2;
  (%666,)
}

def @func_7708() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  %667 = @func_3305() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
  %668 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  %669 = %667.0;
  %670 = @func_4858() /* ty=Tensor[(3, 13, 2), float64] */;
  (%668, %669, %670)
}

def @func_3305() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  %671 = @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %672 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
  %673 = %671.0;
  (%672, %673)
}

def @func_5418(%var_5411: Tensor[(3, 13, 2), float64]) -> (Tensor[(3, 13, 2), bool],) {
  %674 = @func_3305() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
  %675 = %674.1;
  %676 = cast(%var_5411, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = logical_and(%678, %679) /* ty=Tensor[(3, 13, 2), bool] */;
  (%680,)
}

def @func_2774() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) {
  %681 = @func_423() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %682 = @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %683 = %681.2;
  %684 = %682.0;
  %685 = @func_1915() /* ty=Tensor[(3, 13, 2), float32] */;
  (%683, %684, %685)
}

def @func_6116() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %686 = @func_5204() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %687 = @func_648() /* ty=Tensor[(3, 13, 2), float64] */;
  %688 = %686.0;
  %689 = @func_3468() /* ty=Tensor[(3, 13, 2), float32] */;
  (%687, %688, %689)
}

def @func_5726() -> (Tensor[(3, 13, 2), float32], Tensor[(11, 1, 8), float64], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %690 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %691 = @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */;
  %692 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %693 = %690.0;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %695 = reshape(%694, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %696 = @func_853(%695) /* ty=(Tensor[(3, 13, 2), float32],) */;
  %697 = %691.0;
  %698 = %692.0;
  %699 = %696.0;
  %700 = @func_2097() /* ty=Tensor[(3, 13, 2), float32] */;
  (%693, %697, %698, %699, %700)
}

def @func_5882(%var_5880: Tensor[(770), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(14, 144), float64], Tensor[(3, 13, 2), float32], Tensor[(14, 144), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64]) {
  %701 = @func_3096() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %702 = @func_2003() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) */;
  %703 = %702.2;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %705 = asin(%704) /* ty=Tensor[(14, 144), float32] */;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(14, 144), float64] */;
  %707 = %701.1;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %709 = cast(%707, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %710 = reshape(%708, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %711 = reshape(%709, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %712 = @func_523(%710, %711) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
  %713 = cast(%703, dtype="uint64") /* ty=Tensor[(14, 144), uint64] */;
  %714 = shape_of(%705, dtype="int32") /* ty=Tensor[(2), int32] */;
  %715 = cast(%705, dtype="uint64") /* ty=Tensor[(14, 144), uint64] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %717 = subtract(%715, %716) /* ty=Tensor[(14, 144), uint64] */;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %719 = cast(%var_5880, dtype="float64") /* ty=Tensor[(770), float64] */;
  %720 = cast(%var_5880, dtype="float64") /* ty=Tensor[(770), float64] */;
  %721 = reshape(%719, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %722 = reshape(%720, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %723 = @func_219(%721, %722) /* ty=(Tensor[(10, 7, 11), float64],) */;
  %724 = atan(%706) /* ty=Tensor[(14, 144), float64] */;
  %725 = %712.2;
  %726 = sigmoid(%718) /* ty=Tensor[(14, 144), float32] */;
  %727 = %723.0;
  (%707, %724, %725, %726, %727, %var_5880)
}

def @func_585(%var_529: Tensor[(14, 2, 15), float32], %var_564: Tensor[(78), float32]) -> (Tensor[(14, 2, 15), float32], Tensor[(3, 13, 2), bool], Tensor[(78), float32], Tensor[(3, 13, 2), float32]) {
  %728 = cast(%var_529, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %729 = cast(%var_564, dtype="float32") /* ty=Tensor[(78), float32] */;
  %730 = cast(%var_564, dtype="float32") /* ty=Tensor[(78), float32] */;
  %731 = reshape(%729, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %732 = reshape(%730, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %733 = @func_523(%731, %732) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
  %734 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %735 = sigmoid(%728) /* ty=Tensor[(14, 2, 15), float32] */;
  %736 = %733.0;
  %737 = %734.1;
  (%735, %736, %var_564, %737)
}

def @func_2463(%var_2434: Tensor[(2640), uint16], %var_2436: Tensor[(15, 16, 11), uint16]) -> (Tensor[(3, 13, 2), float64], Tensor[(12, 12, 14), bool], Tensor[(28, 72), uint16], Tensor[(2640), uint16], Tensor[(15, 16, 11), uint32], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), int64], Tensor[(96), int64]) {
  %738 = cast(meta[relay.Constant][30] /* ty=Tensor[(28, 72), uint16] */, dtype="uint16") /* ty=Tensor[(28, 72), uint16] */;
  %739 = cast(meta[relay.Constant][30] /* ty=Tensor[(28, 72), uint16] */, dtype="uint16") /* ty=Tensor[(28, 72), uint16] */;
  %740 = reshape(%738, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %741 = reshape(%739, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %742 = cast(%var_2434, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %743 = reshape(%742, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %744 = @func_1707(%743) /* ty=Tensor[(15, 16, 11), uint16] */;
  %745 = cast(%var_2436, dtype="uint32") /* ty=Tensor[(15, 16, 11), uint32] */;
  %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%744, dtype="uint32") /* ty=Tensor[(15, 16, 11), uint32] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %749 = cast(meta[relay.Constant][31] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %750 = cast(meta[relay.Constant][31] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %751 = reshape(%749, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
  %752 = reshape(%750, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
  %753 = @func_1677(%751, %752) /* ty=(Tensor[(6, 4, 4), int64], Tensor[(6, 4, 4), float64]) */;
  %754 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
  %755 = @func_1653(%740, %741) /* ty=Tensor[(12, 12, 14), bool] */;
  %756 = bitwise_xor(%747, %748) /* ty=Tensor[(15, 16, 11), uint32] */;
  %757 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %758 = %753.0;
  (%754, %755, meta[relay.Constant][30] /* ty=Tensor[(28, 72), uint16] */, %var_2434, %756, %757, %758, meta[relay.Constant][31] /* ty=Tensor[(96), int64] */)
}

def @func_1707(%var_1689: Tensor[(15, 16, 11), uint16]) -> Tensor[(15, 16, 11), uint16] {
  %759 = cast(%var_1689, dtype="uint16") /* ty=Tensor[(15, 16, 11), uint16] */;
  %760 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(15, 16, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 16, 11), uint16] */, dtype="uint16") /* ty=Tensor[(15, 16, 11), uint16] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%761, %762) /* ty=Tensor[(15, 16, 11), uint16] */
}

def @func_2529(%var_2509: Tensor[(9, 2, 8), int8]) -> (Tensor[(9, 2, 8), int8],) {
  %763 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 1, 8), int8] */, dtype="int8") /* ty=Tensor[(9, 1, 8), int8] */;
  %764 = cast(%var_2509, dtype="int8") /* ty=Tensor[(9, 2, 8), int8] */;
  %765 = bitwise_or(%763, %764) /* ty=Tensor[(9, 2, 8), int8] */;
  (%765,)
}

def @func_6975() -> Tensor[(3, 13, 2), float32] {
  %766 = @func_2364() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %766.1
}

def @func_423() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %767 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %768 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %769 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %770 = %767.1;
  %771 = %768.0;
  %772 = %769.0;
  (%770, %771, %772)
}

def @func_3398(%var_3325: Tensor[(7, 15, 13), float64], %var_3345: int64, %var_3385: Tensor[(770), float64], %var_3391: Tensor[(2640), uint16], %var_3395: Tensor[(96), int64]) -> (Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) {
  %773 = cast(%var_3345, dtype="int64") /* ty=int64 */;
  %774 = reshape(%773, newshape=[]) /* ty=int64 */;
  %775 = @func_699(%774) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
  %776 = cast(%var_3325, dtype="float64") /* ty=Tensor[(7, 15, 13), float64] */;
  %777 = sin(%776) /* ty=Tensor[(7, 15, 13), float64] */;
  %778 = cast(%var_3325, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%777, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %782 = floor_divide(%780, %781) /* ty=Tensor[(7, 15, 13), float32] */;
  %783 = cast(%var_3325, dtype="float64") /* ty=Tensor[(7, 15, 13), float64] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="float64") /* ty=Tensor[(7, 15, 13), float64] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %787 = @func_2083() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) */;
  %788 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %789 = @func_2003() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) */;
  %790 = cast(%var_3385, dtype="float64") /* ty=Tensor[(770), float64] */;
  %791 = cast(%var_3385, dtype="float64") /* ty=Tensor[(770), float64] */;
  %792 = reshape(%790, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %793 = reshape(%791, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %794 = @func_219(%792, %793) /* ty=(Tensor[(10, 7, 11), float64],) */;
  %795 = cast(%var_3391, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %796 = cast(%var_3391, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %797 = reshape(%795, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %798 = reshape(%796, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %799 = @func_2463(%797, %798) /* ty=(Tensor[(3, 13, 2), float64], Tensor[(12, 12, 14), bool], Tensor[(28, 72), uint16], Tensor[(2640), uint16], Tensor[(15, 16, 11), uint32], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), int64], Tensor[(96), int64]) */;
  %800 = cast(%var_3395, dtype="int64") /* ty=Tensor[(96), int64] */;
  %801 = reshape(%800, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %802 = @func_3179(%801) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(96), int64], Tensor[(8, 2, 6), bool]) */;
  %803 = %775.1;
  %804 = mod(%785, %786) /* ty=Tensor[(7, 15, 13), float64] */;
  %805 = %787.1;
  %806 = %788.0;
  %807 = %789.0;
  %808 = %794.0;
  %809 = %799.5;
  %810 = %802.3;
  (%803, %var_3345, %804, %805, %806, %807, %808, %var_3385, %809, %var_3391, %810, %var_3395)
}

def @func_8491() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(693), float64], Tensor[(10, 7, 11), float64]) {
  %811 = @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %812 = @func_6015() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) */;
  %813 = %812.0;
  %814 = cast(%813, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %815 = reshape(%814, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %816 = @func_4241(%815) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(7, 11, 9), float64], Tensor[(693), float64]) */;
  %817 = cast(meta[relay.Constant][34] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %818 = cast(meta[relay.Constant][34] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %819 = reshape(%817, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %820 = reshape(%818, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %821 = @func_219(%819, %820) /* ty=(Tensor[(10, 7, 11), float64],) */;
  %822 = %821.0;
  %823 = cast(meta[relay.Constant][34] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%822, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %827 = %811.0;
  %828 = %816.2;
  %829 = add(%825, %826) /* ty=Tensor[(10, 7, 11), float64] */;
  (%827, %813, %828, %829)
}

def @func_989() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %830 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %831 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %832 = cast(%831, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %833 = rsqrt(%832) /* ty=Tensor[(3, 13, 2), float64] */;
  %834 = cast(%831, dtype="uint8") /* ty=Tensor[(3, 13, 2), uint8] */;
  %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%833, dtype="uint8") /* ty=Tensor[(3, 13, 2), uint8] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %838 = bitwise_or(%836, %837) /* ty=Tensor[(3, 13, 2), uint8] */;
  %839 = cast(%833, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%838, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %843 = equal(%841, %842) /* ty=Tensor[(3, 13, 2), bool] */;
  %844 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %845 = reshape(%844, newshape=[]) /* ty=int64 */;
  %846 = @func_699(%845) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
  %847 = %846.0;
  %848 = cast(%847, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %849 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%843, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %852 = cast(%833, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %853 = cast(%843, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %854 = %830.1;
  %855 = cast(%854, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %856 = reshape(%853, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %857 = reshape(%855, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %858 = @func_523(%856, %857) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
  %859 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 770), float64] */, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
  %860 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 770), float64] */, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
  %861 = reshape(%859, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %862 = reshape(%860, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %863 = @func_219(%861, %862) /* ty=(Tensor[(10, 7, 11), float64],) */;
  %864 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %865 = reshape(%864, newshape=[]) /* ty=int64 */;
  %866 = @func_699(%865) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
  %867 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 770), float64] */, dtype="int8") /* ty=Tensor[(1, 770), int8] */;
  %868 = cast(-2 /* ty=int64 */, dtype="int8") /* ty=int8 */;
  %869 = cast(%838, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %870 = reshape(%869, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %871 = @func_853(%870) /* ty=(Tensor[(3, 13, 2), float32],) */;
  %872 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %873 = logical_or(%850, %851) /* ty=Tensor[(3, 13, 2), bool] */;
  %874 = cast(%873, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %875 = reshape(%874, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %876 = @func_853(%875) /* ty=(Tensor[(3, 13, 2), float32],) */;
  %877 = exp(%852) /* ty=Tensor[(3, 13, 2), float32] */;
  %878 = %858.1;
  %879 = %863.0;
  %880 = %866.3;
  %881 = minimum(%867, %868) /* ty=Tensor[(1, 770), int8] */;
  %882 = %871.0;
  %883 = %872.0;
  %884 = %876.0;
  (%854, %873, %877, %878, %879, %880, %881, %882, %883, %884)
}

def @func_4241(%var_4206: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), bool], Tensor[(7, 11, 9), float64], Tensor[(693), float64]) {
  %885 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %886 = %885.0;
  %887 = cast(%var_4206, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %891 = cast(meta[relay.Constant][36] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %892 = reshape(%891, newshape=[7, 11, 9]) /* ty=Tensor[(7, 11, 9), float64] */;
  %893 = greater_equal(%889, %890) /* ty=Tensor[(3, 13, 2), bool] */;
  %894 = @func_2547(%892) /* ty=Tensor[(7, 11, 9), float64] */;
  (%893, %894, meta[relay.Constant][36] /* ty=Tensor[(693), float64] */)
}

def @func_2660() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) {
  %895 = @func_2364() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %896 = %895.1;
  %897 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
  (%896, %897)
}

def @func_3096() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %898 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
  %899 = %898.2;
  %900 = @func_2284() /* ty=Tensor[(3, 13, 2), float32] */;
  (%899, %900)
}

def @func_2284() -> Tensor[(3, 13, 2), float32] {
  %901 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %902 = cast(%901, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  cos(%902) /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_1815(%var_1775: Tensor[(3, 13, 2), int64], %var_1799: Tensor[(1, 96), int64]) -> (Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), float64], Tensor[(1, 96), int64]) {
  %903 = @func_757() /* ty=(Tensor[(3, 13, 2), int64],) */;
  %904 = %903.0;
  %905 = cast(%var_1775, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%904, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %909 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %910 = cast(%var_1799, dtype="int64") /* ty=Tensor[(1, 96), int64] */;
  %911 = cast(%var_1799, dtype="int64") /* ty=Tensor[(1, 96), int64] */;
  %912 = reshape(%910, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
  %913 = reshape(%911, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
  %914 = @func_1677(%912, %913) /* ty=(Tensor[(6, 4, 4), int64], Tensor[(6, 4, 4), float64]) */;
  %915 = less(%907, %908) /* ty=Tensor[(3, 13, 2), bool] */;
  %916 = %909.0;
  %917 = %914.1;
  (%915, %916, %917, %var_1799)
}

def @func_5035() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %918 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %919 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %920 = %918.0;
  %921 = @func_2097() /* ty=Tensor[(3, 13, 2), float32] */;
  %922 = %919.0;
  (%920, %921, %922)
}

def @func_3468() -> Tensor[(3, 13, 2), float32] {
  %923 = @func_423() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %923.1
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2003() -> (Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) {
  %0 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 144), uint16] */, dtype="uint16") /* ty=Tensor[(14, 144), uint16] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 144), uint16] */, dtype="uint16") /* ty=Tensor[(14, 144), uint16] */;
  %3 = reshape(%1, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %4 = reshape(%2, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %5 = %0.0;
  %6 = @func_1653(%3, %4) /* ty=Tensor[(12, 12, 14), bool] */;
  (%5, %6, meta[relay.Constant][0] /* ty=Tensor[(14, 144), uint16] */)
}

def @func_5036() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %12 = fn () -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
    %7 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
    %8 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %9 = %7.0;
    %10 = @func_2097() /* ty=Tensor[(3, 13, 2), float32] */;
    %11 = %8.0;
    (%9, %10, %11)
  };
  %12() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_3926(%var_3886: bool, %var_3887: Tensor[(7, 12, 8), bool]) -> (Tensor[(7, 12, 8), float32], Tensor[(3, 13, 2), float32]) {
  %13 = cast(%var_3886, dtype="bool") /* ty=bool */;
  %14 = cast(%var_3887, dtype="bool") /* ty=Tensor[(7, 12, 8), bool] */;
  %15 = logical_and(%13, %14) /* ty=Tensor[(7, 12, 8), bool] */;
  %16 = cast(%15, dtype="float32") /* ty=Tensor[(7, 12, 8), float32] */;
  %17 = cast(%var_3886, dtype="float32") /* ty=float32 */;
  %18 = @func_1076() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %19 = power(%16, %17) /* ty=Tensor[(7, 12, 8), float32] */;
  %20 = %18.1;
  (%19, %20)
}

def @func_648() -> Tensor[(3, 13, 2), float64] {
  %21 = @func_489() /* ty=(Tensor[(3, 13, 2), int64],) */;
  %22 = %21.0;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  sigmoid(%23) /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_283() -> (Tensor[(3, 13, 2), float32],) {
  @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_2626() -> Tensor[(11, 1, 8), float64] {
  %25 = fn () -> Tensor[(11, 1, 8), float64] {
    %24 = @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */;
    %24.0
  };
  %25() /* ty=Tensor[(11, 1, 8), float64] */
}

def @func_2532(%var_2530: Tensor[(9, 2, 8), int8]) -> (Tensor[(9, 2, 8), int8],) {
  @func_2529(%var_2530) /* ty=(Tensor[(9, 2, 8), int8],) */
}

def @func_3081(%var_3079: Tensor[(6, 14, 2), uint8], %var_3080: Tensor[(6, 14, 2), uint8]) -> Tensor[(6, 14, 2), bool] {
  %30 = fn (%var_3050: Tensor[(6, 14, 2), uint8], %var_3051: Tensor[(6, 14, 2), uint8]) -> Tensor[(6, 14, 2), bool] {
    %26 = cast(%var_3051, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
    %27 = shape_of(%var_3050, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%var_3050, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%28, %29) /* ty=Tensor[(6, 14, 2), bool] */
  };
  %30(%var_3079, %var_3080) /* ty=Tensor[(6, 14, 2), bool] */
}

def @func_7535() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) {
  @func_7533() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) */
}

def @func_7476() -> (Tensor[(3, 13, 2), float32],) {
  %31 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %32 = %31.0;
  (%32,)
}

def @func_3930(%var_3928: bool, %var_3929: Tensor[(7, 12, 8), bool]) -> (Tensor[(7, 12, 8), float32], Tensor[(3, 13, 2), float32]) {
  @func_3926(%var_3928, %var_3929) /* ty=(Tensor[(7, 12, 8), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_2660() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) {
  %33 = @func_2364() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %34 = %33.1;
  %35 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
  (%34, %35)
}

def @func_2364() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %36 = @func_989() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %37 = @func_2284() /* ty=Tensor[(3, 13, 2), float32] */;
  %38 = %36.2;
  (%37, %38)
}

def @func_353() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %39 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %40 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %41 = %39.0;
  %42 = %40.0;
  (%41, %42)
}

def @func_812() -> Tensor[(3, 13, 2), float64] {
  @func_810() /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_4005() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  %43 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %44 = %43.1;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %46 = @func_2494() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %47 = cosh(%45) /* ty=Tensor[(3, 13, 2), float64] */;
  %48 = %46.0;
  (%47, %48)
}

def @func_2560() -> (Tensor[(3, 13, 2), float64],) {
  @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */
}

def @func_523(%var_495: Tensor[(3, 13, 2), float32], %var_515: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) {
  %49 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  %50 = cast(%var_495, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%49, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %54 = cast(%var_515, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %55 = shape_of(%var_495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%var_495, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %58 = cast(%var_515, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %59 = shape_of(%var_495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_495, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %62 = greater(%52, %53) /* ty=Tensor[(3, 13, 2), bool] */;
  %63 = less_equal(%56, %57) /* ty=Tensor[(3, 13, 2), bool] */;
  %64 = minimum(%60, %61) /* ty=Tensor[(3, 13, 2), float32] */;
  (%62, %63, %64)
}

def @func_3307() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  @func_3305() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */
}

def @func_4007() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  @func_4005() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */
}

def @func_856(%var_854: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), float32],) {
  @func_853(%var_854) /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_4241(%var_4206: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), bool], Tensor[(7, 11, 9), float64], Tensor[(693), float64]) {
  %65 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %66 = %65.0;
  %67 = cast(%var_4206, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = cast(meta[relay.Constant][1] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %72 = reshape(%71, newshape=[7, 11, 9]) /* ty=Tensor[(7, 11, 9), float64] */;
  %73 = greater_equal(%69, %70) /* ty=Tensor[(3, 13, 2), bool] */;
  %74 = @func_2547(%72) /* ty=Tensor[(7, 11, 9), float64] */;
  (%73, %74, meta[relay.Constant][1] /* ty=Tensor[(693), float64] */)
}

def @func_1917() -> Tensor[(3, 13, 2), float32] {
  @func_1915() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_5978(%var_5976: int64, %var_5977: Tensor[(11550), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], int64, Tensor[(770), float64], Tensor[(11550), float64]) {
  @func_5974(%var_5976, %var_5977) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], int64, Tensor[(770), float64], Tensor[(11550), float64]) */
}

def @func_3683(%var_3625: Tensor[(3, 13, 2), float32], %var_3657: Tensor[(770), float64], %var_3659: Tensor[(48, 2), int64], %var_3670: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), int64], Tensor[(11, 1, 8), float64], Tensor[(11, 1, 8), float64], Tensor[(96), int64], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640), uint16], Tensor[(48, 2), int64], Tensor[(3, 13, 2), float32]) {
  %75 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %76 = %75.1;
  %77 = cast(%var_3625, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %81 = @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */;
  %82 = cast(meta[relay.Constant][2] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %83 = cast(9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %84 = cast(%var_3657, dtype="float64") /* ty=Tensor[(770), float64] */;
  %85 = cast(meta[relay.Constant][3] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %86 = cast(%var_3659, dtype="int64") /* ty=Tensor[(48, 2), int64] */;
  %87 = reshape(%82, newshape=[7, 15, 13]) /* ty=Tensor[(7, 15, 13), float64] */;
  %88 = reshape(%83, newshape=[]) /* ty=int64 */;
  %89 = reshape(%84, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %90 = reshape(%85, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %91 = reshape(%86, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %92 = @func_3398(%87, %88, %89, %90, %91) /* ty=(Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) */;
  %93 = cast(%var_3625, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %94 = tan(%93) /* ty=Tensor[(3, 13, 2), float32] */;
  %95 = cast(%var_3670, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %99 = left_shift(%79, %80) /* ty=Tensor[(3, 13, 2), int64] */;
  %100 = @func_2625() /* ty=Tensor[(11, 1, 8), float64] */;
  %101 = %81.0;
  %102 = %92.11;
  %103 = mod(%97, %98) /* ty=Tensor[(3, 13, 2), float32] */;
  (%99, %100, %101, %102, meta[relay.Constant][2] /* ty=Tensor[(1365), float64] */, 9 /* ty=int64 */, %var_3657, meta[relay.Constant][3] /* ty=Tensor[(2640), uint16] */, %var_3659, %103)
}

def @func_8606() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], int64) {
  @func_8604() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], int64) */
}

def @func_6581() -> Tensor[(3, 13, 2), float64] {
  @func_6579() /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_1077() -> (Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %114 = fn () -> (Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
    %104 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
    %105 = cast(%104, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %106 = cast(%104, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %107 = reshape(%105, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %108 = reshape(%106, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %109 = @func_523(%107, %108) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
    %110 = cast(%104, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %111 = %109.1;
    %112 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
    %113 = sin(%110) /* ty=Tensor[(3, 13, 2), float32] */;
    (%111, %112, %113)
  };
  %114() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_831() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %115 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %116 = %115.0;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %118 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %119 = log10(%117) /* ty=Tensor[(3, 13, 2), float32] */;
  (%118, %119)
}

def @func_458() -> Tensor[(3, 13, 2), float32] {
  @func_407() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_268(%var_229: int64) -> Tensor[(16, 12, 2), int32] {
  %120 = cast(%var_229, dtype="bool") /* ty=bool */;
  %121 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 12, 2), int64] */, dtype="bool") /* ty=Tensor[(16, 12, 2), bool] */;
  %122 = less_equal(%120, %121) /* ty=Tensor[(16, 12, 2), bool] */;
  %123 = cast(%var_229, dtype="int32") /* ty=int32 */;
  %124 = cast(%122, dtype="int32") /* ty=Tensor[(16, 12, 2), int32] */;
  left_shift(%123, %124) /* ty=Tensor[(16, 12, 2), int32] */
}

def @func_2547(%var_2540: Tensor[(7, 11, 9), float64]) -> Tensor[(7, 11, 9), float64] {
  %125 = cast(%var_2540, dtype="float64") /* ty=Tensor[(7, 11, 9), float64] */;
  log10(%125) /* ty=Tensor[(7, 11, 9), float64] */
}

def @func_6292() -> Tensor[(2640), uint16] {
  %127 = fn () -> Tensor[(2640), uint16] {
    %126 = @func_4359() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(9, 2, 8), int8], Tensor[(144), int8], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16]) */;
    %126.4
  };
  %127() /* ty=Tensor[(2640), uint16] */
}

def @func_7533() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) {
  %128 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %129 = @func_989() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %130 = %128.0;
  %131 = %129.1;
  (%130, %131)
}

def @func_2098() -> Tensor[(3, 13, 2), float32] {
  %133 = fn () -> Tensor[(3, 13, 2), float32] {
    %132 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %132.0
  };
  %133() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_4130(%var_4129: Tensor[(7, 13, 15), uint8]) -> (Tensor[(7, 13, 15), bool],) {
  %137 = fn (%var_4123: Tensor[(7, 13, 15), uint8]) -> (Tensor[(7, 13, 15), bool],) {
    %134 = cast(meta[relay.Constant][5] /* ty=uint8 */, dtype="bool") /* ty=bool */;
    %135 = cast(%var_4123, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
    %136 = greater_equal(%134, %135) /* ty=Tensor[(7, 13, 15), bool] */;
    (%136,)
  };
  %137(%var_4129) /* ty=(Tensor[(7, 13, 15), bool],) */
}

def @func_5205() -> (Tensor[(3, 13, 2), float32],) {
  %140 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %138 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %139 = %138.0;
    (%139,)
  };
  %140() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_4972() -> (Tensor[(3, 13, 2), float32],) {
  %143 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %141 = @func_2364() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %142 = %141.0;
    (%142,)
  };
  %143() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_5336(%var_5334: Tensor[(6, 2, 9), int16], %var_5335: Tensor[(6, 2, 9), int16]) -> Tensor[(6, 2, 9), bool] {
  %148 = fn (%var_5327: Tensor[(6, 2, 9), int16], %var_5328: Tensor[(6, 2, 9), int16]) -> Tensor[(6, 2, 9), bool] {
    %144 = cast(%var_5328, dtype="bool") /* ty=Tensor[(6, 2, 9), bool] */;
    %145 = shape_of(%var_5327, dtype="int32") /* ty=Tensor[(3), int32] */;
    %146 = cast(%var_5327, dtype="bool") /* ty=Tensor[(6, 2, 9), bool] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%146, %147) /* ty=Tensor[(6, 2, 9), bool] */
  };
  %148(%var_5334, %var_5335) /* ty=Tensor[(6, 2, 9), bool] */
}

def @func_7337(%var_7335: Tensor[(13, 6, 14), int32]) -> Tensor[(13, 6, 14), int32] {
  @func_7334(%var_7335) /* ty=Tensor[(13, 6, 14), int32] */
}

def @func_833() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_2285() -> Tensor[(3, 13, 2), float32] {
  %151 = fn () -> Tensor[(3, 13, 2), float32] {
    %149 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
    %150 = cast(%149, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    cos(%150) /* ty=Tensor[(3, 13, 2), float32] */
  };
  %151() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_1515() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  %154 = fn () -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
    %152 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
    %153 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
    (%152, %153)
  };
  %154() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */
}

def @func_7877() -> Tensor[(3, 13, 2), float32] {
  %155 = fn () -> Tensor[(3, 13, 2), float32] {
    @func_458() /* ty=Tensor[(3, 13, 2), float32] */
  };
  %155() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_5324() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) {
  %156 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %157 = @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %158 = @func_5090() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %159 = %156.0;
  %160 = %157.0;
  %161 = %158.0;
  (%159, %160, %161)
}

def @func_6718() -> (Tensor[(3, 13, 2), float64], Tensor[(15, 16, 11), uint16], Tensor[(2640), uint16]) {
  %162 = @func_1514() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
  %163 = cast(meta[relay.Constant][6] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %164 = reshape(%163, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %165 = %162.1;
  %166 = @func_1707(%164) /* ty=Tensor[(15, 16, 11), uint16] */;
  (%165, %166, meta[relay.Constant][6] /* ty=Tensor[(2640), uint16] */)
}

def @func_5455(%var_5454: Tensor[(11, 12, 8), float64]) -> Tensor[(11, 12, 8), int64] {
  %171 = fn (%var_5439: Tensor[(11, 12, 8), float64]) -> Tensor[(11, 12, 8), int64] {
    %167 = @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */;
    %168 = %167.0;
    %169 = cast(%168, dtype="int64") /* ty=Tensor[(11, 1, 8), int64] */;
    %170 = cast(%var_5439, dtype="int64") /* ty=Tensor[(11, 12, 8), int64] */;
    bitwise_and(%169, %170) /* ty=Tensor[(11, 12, 8), int64] */
  };
  %171(%var_5454) /* ty=Tensor[(11, 12, 8), int64] */
}

def @func_4604(%var_4592: int64, %var_4593: Tensor[(7, 110), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], int64, Tensor[(7, 110), float64], Tensor[(11550), float64]) {
  %172 = cast(%var_4592, dtype="int64") /* ty=int64 */;
  %173 = cast(%var_4593, dtype="float64") /* ty=Tensor[(7, 110), float64] */;
  %174 = cast(meta[relay.Constant][7] /* ty=Tensor[(11550), float64] */, dtype="float64") /* ty=Tensor[(11550), float64] */;
  %175 = reshape(%172, newshape=[]) /* ty=int64 */;
  %176 = reshape(%173, newshape=[1, 770]) /* ty=Tensor[(1, 770), float64] */;
  %177 = reshape(%174, newshape=[15, 770]) /* ty=Tensor[(15, 770), float64] */;
  %178 = @func_1278(%175, %176, %177) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(15, 770), float64], Tensor[(3, 13, 2), float64]) */;
  %179 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %180 = %178.9;
  (%179, %180, %var_4592, %var_4593, meta[relay.Constant][7] /* ty=Tensor[(11550), float64] */)
}

def @func_6213() -> Tensor[(3, 13, 2), float64] {
  %182 = fn () -> Tensor[(3, 13, 2), float64] {
    %181 = @func_2660() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) */;
    %181.1
  };
  %182() /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_6410() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), bool], Tensor[(176), float64], Tensor[(2, 48), int64], Tensor[(3, 13, 2), float64]) {
  @func_6408() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), bool], Tensor[(176), float64], Tensor[(2, 48), int64], Tensor[(3, 13, 2), float64]) */
}

def @func_7709() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  %187 = fn () -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
    %183 = @func_3305() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
    %184 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
    %185 = %183.0;
    %186 = @func_4858() /* ty=Tensor[(3, 13, 2), float64] */;
    (%184, %185, %186)
  };
  %187() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */
}

def @func_4069(%var_4068: Tensor[(4, 3, 16), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), int64], Tensor[(4, 3, 16), float32], Tensor[(3, 13, 2), float32]) {
  %201 = fn (%var_4017: Tensor[(4, 3, 16), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), int64], Tensor[(4, 3, 16), float32], Tensor[(3, 13, 2), float32]) {
    %188 = @func_489() /* ty=(Tensor[(3, 13, 2), int64],) */;
    %189 = cast(%var_4017, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
    %190 = atan(%189) /* ty=Tensor[(4, 3, 16), float64] */;
    %191 = cast(%190, dtype="uint32") /* ty=Tensor[(4, 3, 16), uint32] */;
    %192 = shape_of(%var_4017, dtype="int32") /* ty=Tensor[(3), int32] */;
    %193 = cast(%var_4017, dtype="uint32") /* ty=Tensor[(4, 3, 16), uint32] */;
    %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %195 = subtract(%193, %194) /* ty=Tensor[(4, 3, 16), uint32] */;
    %196 = cast(%195, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
    %197 = @func_2284() /* ty=Tensor[(3, 13, 2), float32] */;
    %198 = %188.0;
    %199 = exp(%196) /* ty=Tensor[(4, 3, 16), float32] */;
    %200 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
    (%197, %198, %199, %200)
  };
  %201(%var_4068) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), int64], Tensor[(4, 3, 16), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_1657(%var_1655: Tensor[(12, 12, 14), uint16], %var_1656: Tensor[(12, 12, 14), uint16]) -> Tensor[(12, 12, 14), bool] {
  @func_1653(%var_1655, %var_1656) /* ty=Tensor[(12, 12, 14), bool] */
}

def @func_6260() -> (Tensor[(3, 13, 2), float32],) {
  @func_6258() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_527(%var_525: Tensor[(3, 13, 2), float32], %var_526: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) {
  @func_523(%var_525, %var_526) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */
}

def @func_3405(%var_3400: Tensor[(7, 15, 13), float64], %var_3401: int64, %var_3402: Tensor[(770), float64], %var_3403: Tensor[(2640), uint16], %var_3404: Tensor[(96), int64]) -> (Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) {
  @func_3398(%var_3400, %var_3401, %var_3402, %var_3403, %var_3404) /* ty=(Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) */
}

def @func_5593() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %208 = fn () -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
    %202 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %203 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %204 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %205 = %202.0;
    %206 = %203.1;
    %207 = %204.1;
    (%205, %206, %207)
  };
  %208() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_4790(%var_4787: Tensor[(770), float64], %var_4788: Tensor[(1, 96), int64], %var_4789: Tensor[(1620), bool]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2, 1320), uint16], Tensor[(1, 96), int64], Tensor[(15, 16, 11), uint16], Tensor[(1620), bool]) {
  %232 = fn (%var_4765: Tensor[(770), float64], %var_4767: Tensor[(1, 96), int64], %var_4771: Tensor[(1620), bool]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2, 1320), uint16], Tensor[(1, 96), int64], Tensor[(15, 16, 11), uint16], Tensor[(1620), bool]) {
    %209 = cast(meta[relay.Constant][8] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
    %210 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %211 = cast(%var_4765, dtype="float64") /* ty=Tensor[(770), float64] */;
    %212 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 1320), uint16] */, dtype="uint16") /* ty=Tensor[(2, 1320), uint16] */;
    %213 = cast(%var_4767, dtype="int64") /* ty=Tensor[(1, 96), int64] */;
    %214 = reshape(%209, newshape=[7, 15, 13]) /* ty=Tensor[(7, 15, 13), float64] */;
    %215 = reshape(%210, newshape=[]) /* ty=int64 */;
    %216 = reshape(%211, newshape=[770]) /* ty=Tensor[(770), float64] */;
    %217 = reshape(%212, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
    %218 = reshape(%213, newshape=[96]) /* ty=Tensor[(96), int64] */;
    %219 = @func_3398(%214, %215, %216, %217, %218) /* ty=(Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) */;
    %220 = cast(-3 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %221 = cast(%var_4771, dtype="bool") /* ty=Tensor[(1620), bool] */;
    %222 = cast(%var_4771, dtype="bool") /* ty=Tensor[(1620), bool] */;
    %223 = cast(%var_4771, dtype="float32") /* ty=Tensor[(1620), float32] */;
    %224 = reshape(%220, newshape=[]) /* ty=bool */;
    %225 = reshape(%221, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), bool] */;
    %226 = reshape(%222, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), bool] */;
    %227 = reshape(%223, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float32] */;
    %228 = @func_3571(%224, %225, %226, %227) /* ty=(Tensor[(12, 9, 15), uint16], Tensor[(3, 13, 2), float32], Tensor[(15, 16, 11), uint16], Tensor[(2640), uint16], Tensor[(12, 9, 15), bool]) */;
    %229 = @func_2097() /* ty=Tensor[(3, 13, 2), float32] */;
    %230 = %219.5;
    %231 = %228.2;
    (%229, %230, meta[relay.Constant][8] /* ty=Tensor[(1365), float64] */, -3 /* ty=int64 */, %var_4765, meta[relay.Constant][9] /* ty=Tensor[(2, 1320), uint16] */, %var_4767, %231, %var_4771)
  };
  %232(%var_4787, %var_4788, %var_4789) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2, 1320), uint16], Tensor[(1, 96), int64], Tensor[(15, 16, 11), uint16], Tensor[(1620), bool]) */
}

def @func_4534() -> (Tensor[(3, 13, 2), float32],) {
  %235 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %233 = @func_1076() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %234 = %233.2;
    (%234,)
  };
  %235() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_6977() -> Tensor[(3, 13, 2), float32] {
  @func_6975() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_7753(%var_7750: Tensor[(1365), float64], %var_7751: int64, %var_7752: Tensor[(2640, 1), uint16]) -> (Tensor[(3, 13, 2), float32], Tensor[(770), float64], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640, 1), uint16], Tensor[(2, 48), int64]) {
  @func_7748(%var_7750, %var_7751, %var_7752) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(770), float64], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640, 1), uint16], Tensor[(2, 48), int64]) */
}

def @func_3305() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  %236 = @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %237 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
  %238 = %236.0;
  (%237, %238)
}

def @func_1886() -> (Tensor[(3, 13, 2), float64],) {
  %239 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %241 = log(%240) /* ty=Tensor[(3, 13, 2), float64] */;
  (%241,)
}

def @func_8718() -> (Tensor[(3, 13, 2), float32],) {
  %242 = @func_4533() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %243 = %242.0;
  (%243,)
}

def @func_7388() -> (Tensor[(3, 13, 2), float32],) {
  %244 = @func_5035() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %245 = %244.1;
  (%245,)
}

def @func_5882(%var_5880: Tensor[(770), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(14, 144), float64], Tensor[(3, 13, 2), float32], Tensor[(14, 144), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64]) {
  %246 = @func_3096() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %247 = @func_2003() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) */;
  %248 = %247.2;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %250 = asin(%249) /* ty=Tensor[(14, 144), float32] */;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(14, 144), float64] */;
  %252 = %246.1;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %254 = cast(%252, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %255 = reshape(%253, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %256 = reshape(%254, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %257 = @func_523(%255, %256) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
  %258 = cast(%248, dtype="uint64") /* ty=Tensor[(14, 144), uint64] */;
  %259 = shape_of(%250, dtype="int32") /* ty=Tensor[(2), int32] */;
  %260 = cast(%250, dtype="uint64") /* ty=Tensor[(14, 144), uint64] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %262 = subtract(%260, %261) /* ty=Tensor[(14, 144), uint64] */;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %264 = cast(%var_5880, dtype="float64") /* ty=Tensor[(770), float64] */;
  %265 = cast(%var_5880, dtype="float64") /* ty=Tensor[(770), float64] */;
  %266 = reshape(%264, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %267 = reshape(%265, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %268 = @func_219(%266, %267) /* ty=(Tensor[(10, 7, 11), float64],) */;
  %269 = atan(%251) /* ty=Tensor[(14, 144), float64] */;
  %270 = %257.2;
  %271 = sigmoid(%263) /* ty=Tensor[(14, 144), float32] */;
  %272 = %268.0;
  (%252, %269, %270, %271, %272, %var_5880)
}

def @func_489() -> (Tensor[(3, 13, 2), int64],) {
  %273 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %274 = %273.1;
  %275 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 13, 2), float32] */, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%274, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %279 = add(%277, %278) /* ty=Tensor[(3, 13, 2), int64] */;
  (%279,)
}

def @func_2005() -> (Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) {
  @func_2003() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) */
}

def @func_1109() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %286 = fn () -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
    %280 = @func_1076() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %281 = %280.2;
    %282 = cast(%281, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %283 = reshape(%282, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %284 = @func_853(%283) /* ty=(Tensor[(3, 13, 2), float32],) */;
    %285 = %284.0;
    (%281, %285)
  };
  %286() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_4359() -> (Tensor[(3, 13, 2), float64], Tensor[(9, 2, 8), int8], Tensor[(144), int8], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16]) {
  %287 = @func_3305() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
  %288 = cast(meta[relay.Constant][11] /* ty=Tensor[(144), int8] */, dtype="int8") /* ty=Tensor[(144), int8] */;
  %289 = reshape(%288, newshape=[9, 2, 8]) /* ty=Tensor[(9, 2, 8), int8] */;
  %290 = @func_2529(%289) /* ty=(Tensor[(9, 2, 8), int8],) */;
  %291 = %287.1;
  %292 = cast(%291, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %293 = cast(meta[relay.Constant][12] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %294 = reshape(%292, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %295 = reshape(%293, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %296 = @func_3747(%294, %295) /* ty=(Tensor[(3, 13, 2), uint16], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(2640), uint16]) */;
  %297 = %290.0;
  %298 = %296.1;
  (%291, %297, meta[relay.Constant][11] /* ty=Tensor[(144), int8] */, %298, meta[relay.Constant][12] /* ty=Tensor[(2640), uint16] */)
}

def @func_6789() -> (Tensor[(3, 13, 2), float32],) {
  %300 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %299 = @func_1915() /* ty=Tensor[(3, 13, 2), float32] */;
    (%299,)
  };
  %300() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_6975() -> Tensor[(3, 13, 2), float32] {
  %301 = @func_2364() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %301.1
}

def @func_1304() -> (Tensor[(3, 13, 2), float32],) {
  %302 = @func_1076() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %303 = %302.2;
  (%303,)
}

def @func_281() -> (Tensor[(3, 13, 2), float32],) {
  %304 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 13, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %305 = atanh(%304) /* ty=Tensor[(3, 13, 2), float32] */;
  (%305,)
}

def @func_6544() -> (Tensor[(3, 13, 2), float64],) {
  @func_6542() /* ty=(Tensor[(3, 13, 2), float64],) */
}

def @func_407() -> Tensor[(3, 13, 2), float32] {
  %306 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %306.0
}

def @func_589(%var_587: Tensor[(14, 2, 15), float32], %var_588: Tensor[(78), float32]) -> (Tensor[(14, 2, 15), float32], Tensor[(3, 13, 2), bool], Tensor[(78), float32], Tensor[(3, 13, 2), float32]) {
  @func_585(%var_587, %var_588) /* ty=(Tensor[(14, 2, 15), float32], Tensor[(3, 13, 2), bool], Tensor[(78), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_1634(%var_1632: int64) -> (Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64) {
  @func_1631(%var_1632) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64) */
}

def @func_2463(%var_2434: Tensor[(2640), uint16], %var_2436: Tensor[(15, 16, 11), uint16]) -> (Tensor[(3, 13, 2), float64], Tensor[(12, 12, 14), bool], Tensor[(28, 72), uint16], Tensor[(2640), uint16], Tensor[(15, 16, 11), uint32], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), int64], Tensor[(96), int64]) {
  %307 = cast(meta[relay.Constant][14] /* ty=Tensor[(28, 72), uint16] */, dtype="uint16") /* ty=Tensor[(28, 72), uint16] */;
  %308 = cast(meta[relay.Constant][14] /* ty=Tensor[(28, 72), uint16] */, dtype="uint16") /* ty=Tensor[(28, 72), uint16] */;
  %309 = reshape(%307, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %310 = reshape(%308, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %311 = cast(%var_2434, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %312 = reshape(%311, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %313 = @func_1707(%312) /* ty=Tensor[(15, 16, 11), uint16] */;
  %314 = cast(%var_2436, dtype="uint32") /* ty=Tensor[(15, 16, 11), uint32] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="uint32") /* ty=Tensor[(15, 16, 11), uint32] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %318 = cast(meta[relay.Constant][15] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %319 = cast(meta[relay.Constant][15] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %320 = reshape(%318, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
  %321 = reshape(%319, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
  %322 = @func_1677(%320, %321) /* ty=(Tensor[(6, 4, 4), int64], Tensor[(6, 4, 4), float64]) */;
  %323 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
  %324 = @func_1653(%309, %310) /* ty=Tensor[(12, 12, 14), bool] */;
  %325 = bitwise_xor(%316, %317) /* ty=Tensor[(15, 16, 11), uint32] */;
  %326 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %327 = %322.0;
  (%323, %324, meta[relay.Constant][14] /* ty=Tensor[(28, 72), uint16] */, %var_2434, %325, %326, %327, meta[relay.Constant][15] /* ty=Tensor[(96), int64] */)
}

def @func_4475() -> (Tensor[(3, 13, 2), float32],) {
  %330 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %328 = @func_3096() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %329 = %328.1;
    (%329,)
  };
  %330() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_5559() -> (Tensor[(11, 1, 8), float64], Tensor[(3, 13, 2), float32]) {
  %335 = fn () -> (Tensor[(11, 1, 8), float64], Tensor[(3, 13, 2), float32]) {
    %331 = @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */;
    %332 = @func_4533() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %333 = %331.0;
    %334 = %332.0;
    (%333, %334)
  };
  %335() /* ty=(Tensor[(11, 1, 8), float64], Tensor[(3, 13, 2), float32]) */
}

def @func_2494() -> (Tensor[(3, 13, 2), float64],) {
  %336 = @func_989() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %337 = %336.0;
  %338 = cast(%337, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %339 = asin(%338) /* ty=Tensor[(3, 13, 2), float64] */;
  (%339,)
}

def @func_5326() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) {
  @func_5324() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */
}

def @func_4166(%var_4164: Tensor[(6, 4, 5), float64], %var_4165: int64) -> (Tensor[(6, 4, 5), float64], Tensor[(3, 13, 2), float32], int64, Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) {
  %350 = fn (%var_4135: Tensor[(6, 4, 5), float64], %var_4140: int64) -> (Tensor[(6, 4, 5), float64], Tensor[(3, 13, 2), float32], int64, Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) {
    %340 = cast(%var_4135, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
    %341 = cast(%var_4140, dtype="int64") /* ty=int64 */;
    %342 = reshape(%341, newshape=[]) /* ty=int64 */;
    %343 = @func_699(%342) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
    %344 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %345 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
    %346 = acosh(%340) /* ty=Tensor[(6, 4, 5), float64] */;
    %347 = %343.3;
    %348 = %344.1;
    %349 = %345.1;
    (%346, %347, %var_4140, %348, %349)
  };
  %350(%var_4164, %var_4165) /* ty=(Tensor[(6, 4, 5), float64], Tensor[(3, 13, 2), float32], int64, Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) */
}

def @func_2967(%var_2966: Tensor[(2640), uint16]) -> (Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(12, 12, 14), float64], Tensor[(3, 13, 2), float64]) {
  %365 = fn (%var_2896: Tensor[(2640), uint16]) -> (Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(12, 12, 14), float64], Tensor[(3, 13, 2), float64]) {
    %351 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %352 = cast(%var_2896, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
    %353 = cast(%var_2896, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
    %354 = reshape(%352, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
    %355 = reshape(%353, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
    %356 = @func_2463(%354, %355) /* ty=(Tensor[(3, 13, 2), float64], Tensor[(12, 12, 14), bool], Tensor[(28, 72), uint16], Tensor[(2640), uint16], Tensor[(15, 16, 11), uint32], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), int64], Tensor[(96), int64]) */;
    %357 = %356.1;
    %358 = cast(%357, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
    %359 = acosh(%358) /* ty=Tensor[(12, 12, 14), float32] */;
    %360 = cast(%359, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
    %361 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
    %362 = %351.0;
    %363 = erf(%360) /* ty=Tensor[(12, 12, 14), float64] */;
    %364 = %361.0;
    (%362, %var_2896, %363, %364)
  };
  %365(%var_2966) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(12, 12, 14), float64], Tensor[(3, 13, 2), float64]) */
}

def @func_5478(%var_5476: Tensor[(16, 9, 16), float32]) -> (Tensor[(16, 9, 16), bool],) {
  @func_5475(%var_5476) /* ty=(Tensor[(16, 9, 16), bool],) */
}

def @func_5728() -> (Tensor[(3, 13, 2), float32], Tensor[(11, 1, 8), float64], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  @func_5726() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(11, 1, 8), float64], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_1677(%var_1662: Tensor[(6, 4, 4), int64], %var_1663: Tensor[(6, 4, 4), int64]) -> (Tensor[(6, 4, 4), int64], Tensor[(6, 4, 4), float64]) {
  %366 = cast(%var_1663, dtype="int64") /* ty=Tensor[(6, 4, 4), int64] */;
  %367 = shape_of(%var_1662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%var_1662, dtype="int64") /* ty=Tensor[(6, 4, 4), int64] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %370 = cast(%var_1662, dtype="float64") /* ty=Tensor[(6, 4, 4), float64] */;
  %371 = bitwise_or(%368, %369) /* ty=Tensor[(6, 4, 4), int64] */;
  %372 = cosh(%370) /* ty=Tensor[(6, 4, 4), float64] */;
  (%371, %372)
}

def @func_6173(%var_6152: Tensor[(8, 4, 8), int16], %var_6153: Tensor[(8, 4, 8), int16], %var_6170: Tensor[(78), float32]) -> (Tensor[(8, 4, 8), bool], Tensor[(7, 11, 9), float64], Tensor[(78), float32]) {
  %373 = cast(%var_6153, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %374 = shape_of(%var_6152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%var_6152, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %377 = cast(%var_6170, dtype="float32") /* ty=Tensor[(78), float32] */;
  %378 = reshape(%377, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %379 = @func_4241(%378) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(7, 11, 9), float64], Tensor[(693), float64]) */;
  %380 = less_equal(%375, %376) /* ty=Tensor[(8, 4, 8), bool] */;
  %381 = %379.1;
  (%380, %381, %var_6170)
}

def @func_7611() -> (Tensor[(3, 13, 2), float64],) {
  %384 = fn () -> (Tensor[(3, 13, 2), float64],) {
    %382 = @func_2660() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) */;
    %383 = %382.1;
    (%383,)
  };
  %384() /* ty=(Tensor[(3, 13, 2), float64],) */
}

def @func_6542() -> (Tensor[(3, 13, 2), float64],) {
  %385 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %386 = %385.0;
  (%386,)
}

def @func_4942(%var_4925: Tensor[(1365), float64], %var_4926: int64, %var_4927: Tensor[(770), float64], %var_4929: Tensor[(96), int64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640), uint16], Tensor[(96), int64]) {
  %387 = @func_2003() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) */;
  %388 = cast(%var_4925, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %389 = cast(%var_4926, dtype="int64") /* ty=int64 */;
  %390 = cast(%var_4927, dtype="float64") /* ty=Tensor[(770), float64] */;
  %391 = cast(meta[relay.Constant][16] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %392 = cast(%var_4929, dtype="int64") /* ty=Tensor[(96), int64] */;
  %393 = reshape(%388, newshape=[7, 15, 13]) /* ty=Tensor[(7, 15, 13), float64] */;
  %394 = reshape(%389, newshape=[]) /* ty=int64 */;
  %395 = reshape(%390, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %396 = reshape(%391, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %397 = reshape(%392, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %398 = @func_3398(%393, %394, %395, %396, %397) /* ty=(Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) */;
  %399 = %387.0;
  %400 = %398.8;
  (%399, %400, %var_4925, %var_4926, %var_4927, meta[relay.Constant][16] /* ty=Tensor[(2640), uint16] */, %var_4929)
}

def @func_4908() -> Tensor[(3, 13, 2), float64] {
  %401 = fn () -> Tensor[(3, 13, 2), float64] {
    @func_810() /* ty=Tensor[(3, 13, 2), float64] */
  };
  %401() /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_3098() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  @func_3096() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_2496() -> (Tensor[(3, 13, 2), float64],) {
  @func_2494() /* ty=(Tensor[(3, 13, 2), float64],) */
}

def @func_6258() -> (Tensor[(3, 13, 2), float32],) {
  %402 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  (%402,)
}

def @func_2529(%var_2509: Tensor[(9, 2, 8), int8]) -> (Tensor[(9, 2, 8), int8],) {
  %403 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 1, 8), int8] */, dtype="int8") /* ty=Tensor[(9, 1, 8), int8] */;
  %404 = cast(%var_2509, dtype="int8") /* ty=Tensor[(9, 2, 8), int8] */;
  %405 = bitwise_or(%403, %404) /* ty=Tensor[(9, 2, 8), int8] */;
  (%405,)
}

def @func_2334() -> (Tensor[(11, 1, 8), float64],) {
  %406 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(11, 1, 8), float64] */;
  %407 = asin(%406) /* ty=Tensor[(11, 1, 8), float64] */;
  (%407,)
}

def @func_810() -> Tensor[(3, 13, 2), float64] {
  @func_648() /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_8351() -> (Tensor[(3, 13, 2), float32],) {
  %410 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %408 = @func_7966() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %409 = %408.0;
    (%409,)
  };
  %410() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_4826() -> (Tensor[(3, 13, 2), float32],) {
  @func_4824() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_3771(%var_3770: int8) -> (Tensor[(12, 13, 8), bool], Tensor[(78), float32], Tensor[(3, 13, 2), float64]) {
  %422 = fn (%var_3752: int8) -> (Tensor[(12, 13, 8), bool], Tensor[(78), float32], Tensor[(3, 13, 2), float64]) {
    %411 = cast(%var_3752, dtype="bool") /* ty=bool */;
    %412 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 13, 8), int8] */, dtype="bool") /* ty=Tensor[(12, 13, 8), bool] */;
    %413 = cast(meta[relay.Constant][20] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %414 = cast(meta[relay.Constant][20] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %415 = reshape(%413, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %416 = reshape(%414, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %417 = @func_523(%415, %416) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
    %418 = %417.1;
    %419 = cast(%418, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
    %420 = equal(%411, %412) /* ty=Tensor[(12, 13, 8), bool] */;
    %421 = atan(%419) /* ty=Tensor[(3, 13, 2), float64] */;
    (%420, meta[relay.Constant][20] /* ty=Tensor[(78), float32] */, %421)
  };
  %422(%var_3770) /* ty=(Tensor[(12, 13, 8), bool], Tensor[(78), float32], Tensor[(3, 13, 2), float64]) */
}

def @func_6231() -> Tensor[(3, 13, 2), float32] {
  %424 = fn () -> Tensor[(3, 13, 2), float32] {
    %423 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
    %423.2
  };
  %424() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_4859() -> Tensor[(3, 13, 2), float64] {
  %426 = fn () -> Tensor[(3, 13, 2), float64] {
    %425 = @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */;
    %425.0
  };
  %426() /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_3398(%var_3325: Tensor[(7, 15, 13), float64], %var_3345: int64, %var_3385: Tensor[(770), float64], %var_3391: Tensor[(2640), uint16], %var_3395: Tensor[(96), int64]) -> (Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) {
  %427 = cast(%var_3345, dtype="int64") /* ty=int64 */;
  %428 = reshape(%427, newshape=[]) /* ty=int64 */;
  %429 = @func_699(%428) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
  %430 = cast(%var_3325, dtype="float64") /* ty=Tensor[(7, 15, 13), float64] */;
  %431 = sin(%430) /* ty=Tensor[(7, 15, 13), float64] */;
  %432 = cast(%var_3325, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %436 = floor_divide(%434, %435) /* ty=Tensor[(7, 15, 13), float32] */;
  %437 = cast(%var_3325, dtype="float64") /* ty=Tensor[(7, 15, 13), float64] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="float64") /* ty=Tensor[(7, 15, 13), float64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %441 = @func_2083() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) */;
  %442 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %443 = @func_2003() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) */;
  %444 = cast(%var_3385, dtype="float64") /* ty=Tensor[(770), float64] */;
  %445 = cast(%var_3385, dtype="float64") /* ty=Tensor[(770), float64] */;
  %446 = reshape(%444, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %447 = reshape(%445, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %448 = @func_219(%446, %447) /* ty=(Tensor[(10, 7, 11), float64],) */;
  %449 = cast(%var_3391, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %450 = cast(%var_3391, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %451 = reshape(%449, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %452 = reshape(%450, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %453 = @func_2463(%451, %452) /* ty=(Tensor[(3, 13, 2), float64], Tensor[(12, 12, 14), bool], Tensor[(28, 72), uint16], Tensor[(2640), uint16], Tensor[(15, 16, 11), uint32], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), int64], Tensor[(96), int64]) */;
  %454 = cast(%var_3395, dtype="int64") /* ty=Tensor[(96), int64] */;
  %455 = reshape(%454, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %456 = @func_3179(%455) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(96), int64], Tensor[(8, 2, 6), bool]) */;
  %457 = %429.1;
  %458 = mod(%439, %440) /* ty=Tensor[(7, 15, 13), float64] */;
  %459 = %441.1;
  %460 = %442.0;
  %461 = %443.0;
  %462 = %448.0;
  %463 = %453.5;
  %464 = %456.3;
  (%457, %var_3345, %458, %459, %460, %461, %462, %var_3385, %463, %var_3391, %464, %var_3395)
}

def @func_6118() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  @func_6116() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_6178(%var_6175: Tensor[(8, 4, 8), int16], %var_6176: Tensor[(8, 4, 8), int16], %var_6177: Tensor[(78), float32]) -> (Tensor[(8, 4, 8), bool], Tensor[(7, 11, 9), float64], Tensor[(78), float32]) {
  @func_6173(%var_6175, %var_6176, %var_6177) /* ty=(Tensor[(8, 4, 8), bool], Tensor[(7, 11, 9), float64], Tensor[(78), float32]) */
}

def @func_6720() -> (Tensor[(3, 13, 2), float64], Tensor[(15, 16, 11), uint16], Tensor[(2640), uint16]) {
  @func_6718() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(15, 16, 11), uint16], Tensor[(2640), uint16]) */
}

def @func_6579() -> Tensor[(3, 13, 2), float64] {
  %465 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
  %465.1
}

def @func_7478() -> (Tensor[(3, 13, 2), float32],) {
  @func_7476() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_8604() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], int64) {
  %466 = cast(-7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %467 = reshape(%466, newshape=[]) /* ty=int64 */;
  %468 = @func_699(%467) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
  %469 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %470 = %468.0;
  (%469, %470, -7 /* ty=int64 */)
}

def @func_1681(%var_1679: Tensor[(6, 4, 4), int64], %var_1680: Tensor[(6, 4, 4), int64]) -> (Tensor[(6, 4, 4), int64], Tensor[(6, 4, 4), float64]) {
  @func_1677(%var_1679, %var_1680) /* ty=(Tensor[(6, 4, 4), int64], Tensor[(6, 4, 4), float64]) */
}

def @func_1306() -> (Tensor[(3, 13, 2), float32],) {
  @func_1304() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_1818(%var_1816: Tensor[(3, 13, 2), int64], %var_1817: Tensor[(1, 96), int64]) -> (Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), float64], Tensor[(1, 96), int64]) {
  %486 = fn (%var_1775: Tensor[(3, 13, 2), int64], %var_1799: Tensor[(1, 96), int64]) -> (Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), float64], Tensor[(1, 96), int64]) {
    %471 = @func_757() /* ty=(Tensor[(3, 13, 2), int64],) */;
    %472 = %471.0;
    %473 = cast(%var_1775, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
    %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%472, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %477 = @func_1393() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %478 = cast(%var_1799, dtype="int64") /* ty=Tensor[(1, 96), int64] */;
    %479 = cast(%var_1799, dtype="int64") /* ty=Tensor[(1, 96), int64] */;
    %480 = reshape(%478, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
    %481 = reshape(%479, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
    %482 = @func_1677(%480, %481) /* ty=(Tensor[(6, 4, 4), int64], Tensor[(6, 4, 4), float64]) */;
    %483 = less(%475, %476) /* ty=Tensor[(3, 13, 2), bool] */;
    %484 = %477.0;
    %485 = %482.1;
    (%483, %484, %485, %var_1799)
  };
  %486(%var_1816, %var_1817) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), float64], Tensor[(1, 96), int64]) */
}

def @func_990() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %542 = fn () -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
    %487 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %488 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
    %489 = cast(%488, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
    %490 = rsqrt(%489) /* ty=Tensor[(3, 13, 2), float64] */;
    %491 = cast(%488, dtype="uint8") /* ty=Tensor[(3, 13, 2), uint8] */;
    %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
    %493 = cast(%490, dtype="uint8") /* ty=Tensor[(3, 13, 2), uint8] */;
    %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %495 = bitwise_or(%493, %494) /* ty=Tensor[(3, 13, 2), uint8] */;
    %496 = cast(%490, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
    %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%495, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %500 = equal(%498, %499) /* ty=Tensor[(3, 13, 2), bool] */;
    %501 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %502 = reshape(%501, newshape=[]) /* ty=int64 */;
    %503 = @func_699(%502) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
    %504 = %503.0;
    %505 = cast(%504, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
    %506 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%500, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %509 = cast(%490, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %510 = cast(%500, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %511 = %487.1;
    %512 = cast(%511, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %513 = reshape(%510, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %514 = reshape(%512, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %515 = @func_523(%513, %514) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
    %516 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 770), float64] */, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
    %517 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 770), float64] */, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
    %518 = reshape(%516, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
    %519 = reshape(%517, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
    %520 = @func_219(%518, %519) /* ty=(Tensor[(10, 7, 11), float64],) */;
    %521 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %522 = reshape(%521, newshape=[]) /* ty=int64 */;
    %523 = @func_699(%522) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
    %524 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 770), float64] */, dtype="int8") /* ty=Tensor[(1, 770), int8] */;
    %525 = cast(-2 /* ty=int64 */, dtype="int8") /* ty=int8 */;
    %526 = cast(%495, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %527 = reshape(%526, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %528 = @func_853(%527) /* ty=(Tensor[(3, 13, 2), float32],) */;
    %529 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %530 = logical_or(%507, %508) /* ty=Tensor[(3, 13, 2), bool] */;
    %531 = cast(%530, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %532 = reshape(%531, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %533 = @func_853(%532) /* ty=(Tensor[(3, 13, 2), float32],) */;
    %534 = exp(%509) /* ty=Tensor[(3, 13, 2), float32] */;
    %535 = %515.1;
    %536 = %520.0;
    %537 = %523.3;
    %538 = minimum(%524, %525) /* ty=Tensor[(1, 770), int8] */;
    %539 = %528.0;
    %540 = %529.0;
    %541 = %533.0;
    (%511, %530, %534, %535, %536, %537, %538, %539, %540, %541)
  };
  %542() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_5091() -> (Tensor[(3, 13, 2), float32],) {
  %545 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %543 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %544 = %543.0;
    (%544,)
  };
  %545() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_1653(%var_1648: Tensor[(12, 12, 14), uint16], %var_1649: Tensor[(12, 12, 14), uint16]) -> Tensor[(12, 12, 14), bool] {
  %546 = cast(%var_1649, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %547 = shape_of(%var_1648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%var_1648, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%548, %549) /* ty=Tensor[(12, 12, 14), bool] */
}

def @func_7200() -> (Tensor[(3, 13, 2), float64], Tensor[(11, 1, 8), float64]) {
  %553 = fn () -> (Tensor[(3, 13, 2), float64], Tensor[(11, 1, 8), float64]) {
    %550 = @func_2083() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) */;
    %551 = %550.0;
    %552 = @func_2625() /* ty=Tensor[(11, 1, 8), float64] */;
    (%551, %552)
  };
  %553() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(11, 1, 8), float64]) */
}

def @func_8546() -> Tensor[(3, 13, 2), float32] {
  @func_8544() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_2878() -> (Tensor[(11, 1, 8), float32], Tensor[(11, 1, 8), float64]) {
  %561 = fn () -> (Tensor[(11, 1, 8), float32], Tensor[(11, 1, 8), float64]) {
    %554 = @func_2625() /* ty=Tensor[(11, 1, 8), float64] */;
    %555 = cast(%554, dtype="float32") /* ty=Tensor[(11, 1, 8), float32] */;
    %556 = cast(%554, dtype="float32") /* ty=Tensor[(11, 1, 8), float32] */;
    %557 = tan(%556) /* ty=Tensor[(11, 1, 8), float32] */;
    %558 = cast(%557, dtype="float64") /* ty=Tensor[(11, 1, 8), float64] */;
    %559 = log(%555) /* ty=Tensor[(11, 1, 8), float32] */;
    %560 = sigmoid(%558) /* ty=Tensor[(11, 1, 8), float64] */;
    (%559, %560)
  };
  %561() /* ty=(Tensor[(11, 1, 8), float32], Tensor[(11, 1, 8), float64]) */
}

def @func_650() -> Tensor[(3, 13, 2), float64] {
  @func_648() /* ty=Tensor[(3, 13, 2), float64] */
}

def @func_2783() -> (Tensor[(3, 13, 2), float32],) {
  %564 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %562 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %563 = %562.1;
    (%563,)
  };
  %564() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_5658(%var_5656: Tensor[(15, 16, 5), float64], %var_5657: Tensor[(15, 16, 5), float64]) -> Tensor[(15, 16, 5), bool] {
  @func_5654(%var_5656, %var_5657) /* ty=Tensor[(15, 16, 5), bool] */
}

def @func_6271(%var_6266: int16, %var_6267: Tensor[(14, 9, 11), int16]) -> (Tensor[(14, 9, 11), int16],) {
  %565 = cast(%var_6266, dtype="int16") /* ty=int16 */;
  %566 = cast(%var_6267, dtype="int16") /* ty=Tensor[(14, 9, 11), int16] */;
  %567 = multiply(%565, %566) /* ty=Tensor[(14, 9, 11), int16] */;
  (%567,)
}

def @func_6609() -> Tensor[(3, 13, 2), float32] {
  @func_3468() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_424() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %574 = fn () -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
    %568 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %569 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %570 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %571 = %568.1;
    %572 = %569.0;
    %573 = %570.0;
    (%571, %572, %573)
  };
  %574() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_2256(%var_2213: Tensor[(2016), uint16], %var_2232: Tensor[(12, 12, 14), bool]) -> (Tensor[(15, 16, 11), uint16], Tensor[(3, 13, 2), float32], Tensor[(2640), float64], Tensor[(6, 4, 4), float64], Tensor[(96), int64], Tensor[(2016), uint16], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), float64], Tensor[(3, 13, 2), float32]) {
  %575 = cast(meta[relay.Constant][22] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
  %576 = reshape(%575, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
  %577 = @func_1304() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %578 = cast(meta[relay.Constant][22] /* ty=Tensor[(2640), uint16] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %579 = cast(meta[relay.Constant][23] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %580 = cast(meta[relay.Constant][23] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %581 = reshape(%579, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
  %582 = reshape(%580, newshape=[6, 4, 4]) /* ty=Tensor[(6, 4, 4), int64] */;
  %583 = @func_1677(%581, %582) /* ty=(Tensor[(6, 4, 4), int64], Tensor[(6, 4, 4), float64]) */;
  %584 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  %585 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 13, 2), float32] */, dtype="uint8") /* ty=Tensor[(3, 13, 2), uint8] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%584, dtype="uint8") /* ty=Tensor[(3, 13, 2), uint8] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %589 = maximum(%587, %588) /* ty=Tensor[(3, 13, 2), uint8] */;
  %590 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %593 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%589, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %596 = cast(%var_2213, dtype="uint16") /* ty=Tensor[(2016), uint16] */;
  %597 = cast(%var_2213, dtype="uint16") /* ty=Tensor[(2016), uint16] */;
  %598 = reshape(%596, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %599 = reshape(%597, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), uint16] */;
  %600 = @func_1653(%598, %599) /* ty=Tensor[(12, 12, 14), bool] */;
  %601 = cast(%var_2232, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %605 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %606 = @func_1707(%576) /* ty=Tensor[(15, 16, 11), uint16] */;
  %607 = %577.0;
  %608 = sinh(%578) /* ty=Tensor[(2640), float64] */;
  %609 = %583.1;
  %610 = divide(%594, %595) /* ty=Tensor[(3, 13, 2), float32] */;
  %611 = mod(%603, %604) /* ty=Tensor[(12, 12, 14), float64] */;
  %612 = %605.0;
  (%606, %607, %608, %609, meta[relay.Constant][23] /* ty=Tensor[(96), int64] */, %var_2213, %610, %611, %612)
}

def @func_409() -> Tensor[(3, 13, 2), float32] {
  @func_407() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_2467(%var_2465: Tensor[(2640), uint16], %var_2466: Tensor[(15, 16, 11), uint16]) -> (Tensor[(3, 13, 2), float64], Tensor[(12, 12, 14), bool], Tensor[(28, 72), uint16], Tensor[(2640), uint16], Tensor[(15, 16, 11), uint32], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), int64], Tensor[(96), int64]) {
  @func_2463(%var_2465, %var_2466) /* ty=(Tensor[(3, 13, 2), float64], Tensor[(12, 12, 14), bool], Tensor[(28, 72), uint16], Tensor[(2640), uint16], Tensor[(15, 16, 11), uint32], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), int64], Tensor[(96), int64]) */
}

def @func_1282(%var_1279: int64, %var_1280: Tensor[(1, 770), float64], %var_1281: Tensor[(15, 770), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(15, 770), float64], Tensor[(3, 13, 2), float64]) {
  %649 = fn (%var_1176: int64, %var_1179: Tensor[(1, 770), float64], %var_1233: Tensor[(15, 770), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(15, 770), float64], Tensor[(3, 13, 2), float64]) {
    %613 = cast(%var_1176, dtype="int64") /* ty=int64 */;
    %614 = reshape(%613, newshape=[]) /* ty=int64 */;
    %615 = @func_699(%614) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */;
    %616 = cast(%var_1179, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
    %617 = cast(%var_1179, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
    %618 = reshape(%616, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
    %619 = reshape(%617, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
    %620 = @func_219(%618, %619) /* ty=(Tensor[(10, 7, 11), float64],) */;
    %621 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %622 = %621.0;
    %623 = cast(%622, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %624 = %615.0;
    %625 = cast(%624, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %626 = reshape(%623, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %627 = reshape(%625, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %628 = @func_523(%626, %627) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
    %629 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %630 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %631 = cast(%var_1179, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
    %632 = %620.0;
    %633 = cast(%632, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
    %634 = reshape(%631, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
    %635 = reshape(%633, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
    %636 = @func_219(%634, %635) /* ty=(Tensor[(10, 7, 11), float64],) */;
    %637 = cast(%var_1179, dtype="int64") /* ty=Tensor[(1, 770), int64] */;
    %638 = cast(%var_1233, dtype="int64") /* ty=Tensor[(15, 770), int64] */;
    %639 = multiply(%637, %638) /* ty=Tensor[(15, 770), int64] */;
    %640 = cast(%var_1176, dtype="float64") /* ty=float64 */;
    %641 = cast(%639, dtype="float64") /* ty=Tensor[(15, 770), float64] */;
    %642 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
    %643 = %628.1;
    %644 = %629.0;
    %645 = %630.0;
    %646 = %636.0;
    %647 = divide(%640, %641) /* ty=Tensor[(15, 770), float64] */;
    %648 = @func_810() /* ty=Tensor[(3, 13, 2), float64] */;
    (%642, %624, %632, %622, %643, %644, %645, %646, %647, %648)
  };
  %649(%var_1279, %var_1280, %var_1281) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(15, 770), float64], Tensor[(3, 13, 2), float64]) */
}

def @func_271(%var_269: int64) -> Tensor[(16, 12, 2), int32] {
  @func_268(%var_269) /* ty=Tensor[(16, 12, 2), int32] */
}

def @func_8544() -> Tensor[(3, 13, 2), float32] {
  @func_458() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_3750(%var_3748: Tensor[(3, 13, 2), float32], %var_3749: Tensor[(2640), uint16]) -> (Tensor[(3, 13, 2), uint16], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(2640), uint16]) {
  %664 = fn (%var_3728: Tensor[(3, 13, 2), float32], %var_3744: Tensor[(2640), uint16]) -> (Tensor[(3, 13, 2), uint16], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(2640), uint16]) {
    %650 = @func_3096() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %651 = %650.0;
    %652 = cast(%var_3728, dtype="uint16") /* ty=Tensor[(3, 13, 2), uint16] */;
    %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
    %654 = cast(%651, dtype="uint16") /* ty=Tensor[(3, 13, 2), uint16] */;
    %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %656 = cast(%var_3744, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
    %657 = cast(%var_3744, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
    %658 = reshape(%656, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
    %659 = reshape(%657, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
    %660 = @func_2463(%658, %659) /* ty=(Tensor[(3, 13, 2), float64], Tensor[(12, 12, 14), bool], Tensor[(28, 72), uint16], Tensor[(2640), uint16], Tensor[(15, 16, 11), uint32], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), int64], Tensor[(96), int64]) */;
    %661 = bitwise_xor(%654, %655) /* ty=Tensor[(3, 13, 2), uint16] */;
    %662 = @func_2284() /* ty=Tensor[(3, 13, 2), float32] */;
    %663 = %660.3;
    (%661, %662, %663, %var_3744)
  };
  %664(%var_3748, %var_3749) /* ty=(Tensor[(3, 13, 2), uint16], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(2640), uint16]) */
}

def @func_5654(%var_5644: Tensor[(15, 16, 5), float64], %var_5645: Tensor[(15, 16, 5), float64]) -> Tensor[(15, 16, 5), bool] {
  %665 = cast(%var_5645, dtype="bool") /* ty=Tensor[(15, 16, 5), bool] */;
  %666 = shape_of(%var_5644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%var_5644, dtype="bool") /* ty=Tensor[(15, 16, 5), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%667, %668) /* ty=Tensor[(15, 16, 5), bool] */
}

def @func_6883(%var_6882: Tensor[(4, 9, 6), float32]) -> (Tensor[(4, 9, 6), float32],) {
  %671 = fn (%var_6876: Tensor[(4, 9, 6), float32]) -> (Tensor[(4, 9, 6), float32],) {
    %669 = cast(%var_6876, dtype="float32") /* ty=Tensor[(4, 9, 6), float32] */;
    %670 = erf(%669) /* ty=Tensor[(4, 9, 6), float32] */;
    (%670,)
  };
  %671(%var_6882) /* ty=(Tensor[(4, 9, 6), float32],) */
}

def @func_3689(%var_3685: Tensor[(3, 13, 2), float32], %var_3686: Tensor[(770), float64], %var_3687: Tensor[(48, 2), int64], %var_3688: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), int64], Tensor[(11, 1, 8), float64], Tensor[(11, 1, 8), float64], Tensor[(96), int64], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640), uint16], Tensor[(48, 2), int64], Tensor[(3, 13, 2), float32]) {
  @func_3683(%var_3685, %var_3686, %var_3687, %var_3688) /* ty=(Tensor[(3, 13, 2), int64], Tensor[(11, 1, 8), float64], Tensor[(11, 1, 8), float64], Tensor[(96), int64], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640), uint16], Tensor[(48, 2), int64], Tensor[(3, 13, 2), float32]) */
}

def @func_6408() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), bool], Tensor[(176), float64], Tensor[(2, 48), int64], Tensor[(3, 13, 2), float64]) {
  %672 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %673 = %672.0;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %675 = cast(meta[relay.Constant][25] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %676 = cast(%673, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %677 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 48), int64] */, dtype="int64") /* ty=Tensor[(2, 48), int64] */;
  %678 = reshape(%675, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float64] */;
  %679 = reshape(%676, newshape=[78]) /* ty=Tensor[(78), int64] */;
  %680 = reshape(%677, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %681 = @func_4709(%678, %679, %680) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(78), int64], Tensor[(96), int64], Tensor[(8, 2, 11), uint16]) */;
  %682 = acos(%674) /* ty=Tensor[(3, 13, 2), float64] */;
  %683 = %681.0;
  %684 = @func_6212() /* ty=Tensor[(3, 13, 2), float64] */;
  (%682, %683, meta[relay.Constant][25] /* ty=Tensor[(176), float64] */, meta[relay.Constant][26] /* ty=Tensor[(2, 48), int64] */, %684)
}

def @func_6116() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %685 = @func_5204() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %686 = @func_648() /* ty=Tensor[(3, 13, 2), float64] */;
  %687 = %685.0;
  %688 = @func_3468() /* ty=Tensor[(3, 13, 2), float32] */;
  (%686, %687, %688)
}

def @func_4631() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) {
  %693 = fn () -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) {
    %689 = @func_4474() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %690 = @func_4005() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
    %691 = %689.0;
    %692 = %690.1;
    (%691, %692)
  };
  %693() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) */
}

def @func_222(%var_220: Tensor[(10, 7, 11), float64], %var_221: Tensor[(10, 7, 11), float64]) -> (Tensor[(10, 7, 11), float64],) {
  %699 = fn (%var_208: Tensor[(10, 7, 11), float64], %var_209: Tensor[(10, 7, 11), float64]) -> (Tensor[(10, 7, 11), float64],) {
    %694 = cast(%var_209, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
    %695 = shape_of(%var_208, dtype="int32") /* ty=Tensor[(3), int32] */;
    %696 = cast(%var_208, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
    %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %698 = power(%696, %697) /* ty=Tensor[(10, 7, 11), float64] */;
    (%698,)
  };
  %699(%var_220, %var_221) /* ty=(Tensor[(10, 7, 11), float64],) */
}

def @func_4608(%var_4606: int64, %var_4607: Tensor[(7, 110), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], int64, Tensor[(7, 110), float64], Tensor[(11550), float64]) {
  @func_4604(%var_4606, %var_4607) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], int64, Tensor[(7, 110), float64], Tensor[(11550), float64]) */
}

def @func_2083() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) {
  %700 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %701 = %700.0;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %703 = sinh(%702) /* ty=Tensor[(3, 13, 2), float32] */;
  %704 = @func_648() /* ty=Tensor[(3, 13, 2), float64] */;
  %705 = cast(%704, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %706 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%703, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %709 = @func_2003() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool], Tensor[(14, 144), uint16]) */;
  %710 = power(%707, %708) /* ty=Tensor[(3, 13, 2), float64] */;
  %711 = @func_407() /* ty=Tensor[(3, 13, 2), float32] */;
  %712 = %709.1;
  (%710, %711, %712)
}

def @func_6275(%var_6273: int16, %var_6274: Tensor[(14, 9, 11), int16]) -> (Tensor[(14, 9, 11), int16],) {
  @func_6271(%var_6273, %var_6274) /* ty=(Tensor[(14, 9, 11), int16],) */
}

def @func_1631(%var_1627: int64) -> (Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64) {
  %713 = @func_1076() /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %714 = cast(%var_1627, dtype="int64") /* ty=int64 */;
  %715 = reshape(%714, newshape=[]) /* ty=int64 */;
  %716 = %713.2;
  %717 = @func_268(%715) /* ty=Tensor[(16, 12, 2), int32] */;
  (%716, %717, %var_1627)
}

def @func_5726() -> (Tensor[(3, 13, 2), float32], Tensor[(11, 1, 8), float64], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %718 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %719 = @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */;
  %720 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
  %721 = %718.0;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %723 = reshape(%722, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %724 = @func_853(%723) /* ty=(Tensor[(3, 13, 2), float32],) */;
  %725 = %719.0;
  %726 = %720.0;
  %727 = %724.0;
  %728 = @func_2097() /* ty=Tensor[(3, 13, 2), float32] */;
  (%721, %725, %726, %727, %728)
}

def @main(%var_8847: Tensor[(3, 16, 10), float32]) -> Tensor[(3, 16, 10), float32] {
  %729 = cast(%var_8847, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  acos(%729) /* ty=Tensor[(3, 16, 10), float32] */
}

def @func_4244(%var_4242: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), bool], Tensor[(7, 11, 9), float64], Tensor[(693), float64]) {
  @func_4241(%var_4242) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(7, 11, 9), float64], Tensor[(693), float64]) */
}

def @func_2558() -> (Tensor[(3, 13, 2), float64],) {
  %730 = @func_2083() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) */;
  %731 = %730.0;
  (%731,)
}

def @func_1394() -> (Tensor[(3, 13, 2), float32],) {
  %734 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %732 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %733 = %732.0;
    (%733,)
  };
  %734() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_3182(%var_3180: Tensor[(96), int64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(96), int64], Tensor[(8, 2, 6), bool]) {
  @func_3179(%var_3180) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(96), int64], Tensor[(8, 2, 6), bool]) */
}

def @func_3576(%var_3572: bool, %var_3573: Tensor[(12, 9, 15), bool], %var_3574: Tensor[(12, 9, 15), bool], %var_3575: Tensor[(12, 9, 15), float32]) -> (Tensor[(12, 9, 15), uint16], Tensor[(3, 13, 2), float32], Tensor[(15, 16, 11), uint16], Tensor[(2640), uint16], Tensor[(12, 9, 15), bool]) {
  %766 = fn (%var_3493: bool, %var_3494: Tensor[(12, 9, 15), bool], %var_3517: Tensor[(12, 9, 15), bool], %var_3546: Tensor[(12, 9, 15), float32]) -> (Tensor[(12, 9, 15), uint16], Tensor[(3, 13, 2), float32], Tensor[(15, 16, 11), uint16], Tensor[(2640), uint16], Tensor[(12, 9, 15), bool]) {
    %735 = cast(%var_3493, dtype="bool") /* ty=bool */;
    %736 = cast(%var_3494, dtype="bool") /* ty=Tensor[(12, 9, 15), bool] */;
    %737 = logical_and(%735, %736) /* ty=Tensor[(12, 9, 15), bool] */;
    %738 = cast(%var_3517, dtype="uint16") /* ty=Tensor[(12, 9, 15), uint16] */;
    %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(%737, dtype="uint16") /* ty=Tensor[(12, 9, 15), uint16] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %742 = @func_989() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(1, 770), int8], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %743 = cast(meta[relay.Constant][27] /* ty=Tensor[(2640), uint16] */, dtype="uint16") /* ty=Tensor[(2640), uint16] */;
    %744 = reshape(%743, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint16] */;
    %745 = cast(%var_3494, dtype="float32") /* ty=Tensor[(12, 9, 15), float32] */;
    %746 = erf(%745) /* ty=Tensor[(12, 9, 15), float32] */;
    %747 = cast(%var_3546, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
    %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
    %749 = cast(%746, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
    %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %751 = power(%749, %750) /* ty=Tensor[(12, 9, 15), float64] */;
    %752 = cast(%751, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
    %753 = asin(%752) /* ty=Tensor[(12, 9, 15), float64] */;
    %754 = cast(%753, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
    %755 = atan(%754) /* ty=Tensor[(12, 9, 15), float64] */;
    %756 = cast(%755, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
    %757 = asinh(%756) /* ty=Tensor[(12, 9, 15), float64] */;
    %758 = cast(%737, dtype="bool") /* ty=Tensor[(12, 9, 15), bool] */;
    %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(%757, dtype="bool") /* ty=Tensor[(12, 9, 15), bool] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %762 = maximum(%740, %741) /* ty=Tensor[(12, 9, 15), uint16] */;
    %763 = %742.0;
    %764 = @func_1707(%744) /* ty=Tensor[(15, 16, 11), uint16] */;
    %765 = greater(%760, %761) /* ty=Tensor[(12, 9, 15), bool] */;
    (%762, %763, %764, meta[relay.Constant][27] /* ty=Tensor[(2640), uint16] */, %765)
  };
  %766(%var_3572, %var_3573, %var_3574, %var_3575) /* ty=(Tensor[(12, 9, 15), uint16], Tensor[(3, 13, 2), float32], Tensor[(15, 16, 11), uint16], Tensor[(2640), uint16], Tensor[(12, 9, 15), bool]) */
}

def @func_6015() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) {
  %767 = @func_831() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %768 = %767.1;
  %769 = cast(%768, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %770 = cast(%768, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %771 = reshape(%769, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %772 = reshape(%770, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %773 = @func_523(%771, %772) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
  %774 = %773.1;
  (%768, %774)
}

def @func_8720() -> (Tensor[(3, 13, 2), float32],) {
  @func_8718() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_585(%var_529: Tensor[(14, 2, 15), float32], %var_564: Tensor[(78), float32]) -> (Tensor[(14, 2, 15), float32], Tensor[(3, 13, 2), bool], Tensor[(78), float32], Tensor[(3, 13, 2), float32]) {
  %775 = cast(%var_529, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %776 = cast(%var_564, dtype="float32") /* ty=Tensor[(78), float32] */;
  %777 = cast(%var_564, dtype="float32") /* ty=Tensor[(78), float32] */;
  %778 = reshape(%776, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %779 = reshape(%777, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
  %780 = @func_523(%778, %779) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32]) */;
  %781 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %782 = sigmoid(%775) /* ty=Tensor[(14, 2, 15), float32] */;
  %783 = %780.0;
  %784 = %781.1;
  (%782, %783, %var_564, %784)
}

def @func_1888() -> (Tensor[(3, 13, 2), float64],) {
  @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */
}

def @func_701(%var_700: int64) -> (Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) {
  %791 = fn (%var_691: int64) -> (Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) {
    %785 = cast(%var_691, dtype="int64") /* ty=int64 */;
    %786 = reshape(%785, newshape=[]) /* ty=int64 */;
    %787 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %788 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
    %789 = @func_268(%786) /* ty=Tensor[(16, 12, 2), int32] */;
    %790 = %787.0;
    (%788, %789, %var_691, %790)
  };
  %791(%var_700) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(16, 12, 2), int32], int64, Tensor[(3, 13, 2), float32]) */
}

def @func_5885(%var_5883: Tensor[(770), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(14, 144), float64], Tensor[(3, 13, 2), float32], Tensor[(14, 144), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64]) {
  @func_5882(%var_5883) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(14, 144), float64], Tensor[(3, 13, 2), float32], Tensor[(14, 144), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64]) */
}

def @func_4361() -> (Tensor[(3, 13, 2), float64], Tensor[(9, 2, 8), int8], Tensor[(144), int8], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16]) {
  @func_4359() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(9, 2, 8), int8], Tensor[(144), int8], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16]) */
}

def @func_7271(%var_7270: Tensor[(3, 16, 3), float64]) -> (Tensor[(3, 16, 3), float64], Tensor[(3, 13, 2), float32]) {
  %796 = fn (%var_7217: Tensor[(3, 16, 3), float64]) -> (Tensor[(3, 16, 3), float64], Tensor[(3, 13, 2), float32]) {
    %792 = cast(%var_7217, dtype="float64") /* ty=Tensor[(3, 16, 3), float64] */;
    %793 = @func_1108() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %794 = cos(%792) /* ty=Tensor[(3, 16, 3), float64] */;
    %795 = %793.1;
    (%794, %795)
  };
  %796(%var_7270) /* ty=(Tensor[(3, 16, 3), float64], Tensor[(3, 13, 2), float32]) */
}

def @func_3179(%var_3165: Tensor[(96), int64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(96), int64], Tensor[(8, 2, 6), bool]) {
  %797 = @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
  %798 = %797.1;
  %799 = cast(%798, dtype="int64") /* ty=Tensor[(3, 13, 2), int64] */;
  %800 = cast(%var_3165, dtype="int64") /* ty=Tensor[(96), int64] */;
  %801 = reshape(%799, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), int64] */;
  %802 = reshape(%800, newshape=[1, 96]) /* ty=Tensor[(1, 96), int64] */;
  %803 = @func_1815(%801, %802) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), float64], Tensor[(1, 96), int64]) */;
  %804 = cast(%var_3165, dtype="bool") /* ty=Tensor[(96), bool] */;
  %805 = reshape(%804, newshape=[8, 2, 6]) /* ty=Tensor[(8, 2, 6), bool] */;
  %806 = %803.0;
  %807 = @func_1971(%805) /* ty=Tensor[(8, 2, 6), bool] */;
  (%798, %806, %var_3165, %807)
}

def @func_6762(%var_6761: int64) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], int64, Tensor[(1, 770), float64], Tensor[(11550), float64], Tensor[(3, 13, 2), float64]) {
  %819 = fn (%var_6731: int64) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], int64, Tensor[(1, 770), float64], Tensor[(11550), float64], Tensor[(3, 13, 2), float64]) {
    %808 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
    %809 = cast(%var_6731, dtype="int64") /* ty=int64 */;
    %810 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 770), float64] */, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
    %811 = cast(meta[relay.Constant][29] /* ty=Tensor[(11550), float64] */, dtype="float64") /* ty=Tensor[(11550), float64] */;
    %812 = reshape(%809, newshape=[]) /* ty=int64 */;
    %813 = reshape(%810, newshape=[1, 770]) /* ty=Tensor[(1, 770), float64] */;
    %814 = reshape(%811, newshape=[15, 770]) /* ty=Tensor[(15, 770), float64] */;
    %815 = @func_1278(%812, %813, %814) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(15, 770), float64], Tensor[(3, 13, 2), float64]) */;
    %816 = %808.2;
    %817 = %815.4;
    %818 = @func_6212() /* ty=Tensor[(3, 13, 2), float64] */;
    (%816, %817, %var_6731, meta[relay.Constant][28] /* ty=Tensor[(1, 770), float64] */, meta[relay.Constant][29] /* ty=Tensor[(11550), float64] */, %818)
  };
  %819(%var_6761) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], int64, Tensor[(1, 770), float64], Tensor[(11550), float64], Tensor[(3, 13, 2), float64]) */
}

def @func_355() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  @func_353() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_2550(%var_2548: Tensor[(7, 11, 9), float64]) -> Tensor[(7, 11, 9), float64] {
  @func_2547(%var_2548) /* ty=Tensor[(7, 11, 9), float64] */
}

def @func_6017() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) {
  @func_6015() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) */
}

def @func_5132(%var_5130: Tensor[(12, 9, 4), float32], %var_5131: Tensor[(12, 9, 4), float32]) -> Tensor[(12, 9, 4), float32] {
  %824 = fn (%var_5114: Tensor[(12, 9, 4), float32], %var_5115: Tensor[(12, 9, 4), float32]) -> Tensor[(12, 9, 4), float32] {
    %820 = cast(%var_5115, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
    %821 = shape_of(%var_5114, dtype="int32") /* ty=Tensor[(3), int32] */;
    %822 = cast(%var_5114, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
    %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%822, %823) /* ty=Tensor[(12, 9, 4), float32] */
  };
  %824(%var_5130, %var_5131) /* ty=Tensor[(12, 9, 4), float32] */
}

def @func_1915() -> Tensor[(3, 13, 2), float32] {
  @func_407() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_8209(%var_8137: Tensor[(10, 7, 6), float64]) -> (Tensor[(10, 7, 6), bool], Tensor[(10, 7, 6), float64], Tensor[(3, 13, 2), float32], Tensor[(11, 1, 8), float64], Tensor[(10, 7, 6), float32], Tensor[(10, 7, 6), float32]) {
  %825 = cast(%var_8137, dtype="float64") /* ty=Tensor[(10, 7, 6), float64] */;
  %826 = atanh(%825) /* ty=Tensor[(10, 7, 6), float64] */;
  %827 = cast(%var_8137, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
  %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%826, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %831 = cast(%var_8137, dtype="float64") /* ty=Tensor[(10, 7, 6), float64] */;
  %832 = @func_5204() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %833 = cast(%826, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  %834 = cos(%833) /* ty=Tensor[(10, 7, 6), float32] */;
  %835 = cast(%834, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  %836 = cast(%834, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  %837 = greater_equal(%829, %830) /* ty=Tensor[(10, 7, 6), bool] */;
  %838 = tan(%831) /* ty=Tensor[(10, 7, 6), float64] */;
  %839 = %832.0;
  %840 = @func_2625() /* ty=Tensor[(11, 1, 8), float64] */;
  %841 = log10(%835) /* ty=Tensor[(10, 7, 6), float32] */;
  %842 = sigmoid(%836) /* ty=Tensor[(10, 7, 6), float32] */;
  (%837, %838, %839, %840, %841, %842)
}

def @func_2775() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) {
  %848 = fn () -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) {
    %843 = @func_423() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %844 = @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */;
    %845 = %843.2;
    %846 = %844.0;
    %847 = @func_1915() /* ty=Tensor[(3, 13, 2), float32] */;
    (%845, %846, %847)
  };
  %848() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */
}

def @func_8212(%var_8210: Tensor[(10, 7, 6), float64]) -> (Tensor[(10, 7, 6), bool], Tensor[(10, 7, 6), float64], Tensor[(3, 13, 2), float32], Tensor[(11, 1, 8), float64], Tensor[(10, 7, 6), float32], Tensor[(10, 7, 6), float32]) {
  @func_8209(%var_8210) /* ty=(Tensor[(10, 7, 6), bool], Tensor[(10, 7, 6), float64], Tensor[(3, 13, 2), float32], Tensor[(11, 1, 8), float64], Tensor[(10, 7, 6), float32], Tensor[(10, 7, 6), float32]) */
}

def @func_2260(%var_2258: Tensor[(2016), uint16], %var_2259: Tensor[(12, 12, 14), bool]) -> (Tensor[(15, 16, 11), uint16], Tensor[(3, 13, 2), float32], Tensor[(2640), float64], Tensor[(6, 4, 4), float64], Tensor[(96), int64], Tensor[(2016), uint16], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), float64], Tensor[(3, 13, 2), float32]) {
  @func_2256(%var_2258, %var_2259) /* ty=(Tensor[(15, 16, 11), uint16], Tensor[(3, 13, 2), float32], Tensor[(2640), float64], Tensor[(6, 4, 4), float64], Tensor[(96), int64], Tensor[(2016), uint16], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), float64], Tensor[(3, 13, 2), float32]) */
}

def @func_1709(%var_1708: Tensor[(15, 16, 11), uint16]) -> Tensor[(15, 16, 11), uint16] {
  %853 = fn (%var_1689: Tensor[(15, 16, 11), uint16]) -> Tensor[(15, 16, 11), uint16] {
    %849 = cast(%var_1689, dtype="uint16") /* ty=Tensor[(15, 16, 11), uint16] */;
    %850 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(15, 16, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %851 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 16, 11), uint16] */, dtype="uint16") /* ty=Tensor[(15, 16, 11), uint16] */;
    %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    subtract(%851, %852) /* ty=Tensor[(15, 16, 11), uint16] */
  };
  %853(%var_1708) /* ty=Tensor[(15, 16, 11), uint16] */
}

def @func_5760() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), int64], Tensor[(3, 13, 2), float32]) {
  %860 = fn () -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), int64], Tensor[(3, 13, 2), float32]) {
    %854 = @func_3096() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %855 = @func_489() /* ty=(Tensor[(3, 13, 2), int64],) */;
    %856 = @func_4474() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %857 = %854.1;
    %858 = %855.0;
    %859 = %856.0;
    (%857, %858, %859)
  };
  %860() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), int64], Tensor[(3, 13, 2), float32]) */
}

def @func_1973(%var_1972: Tensor[(8, 2, 6), bool]) -> Tensor[(8, 2, 6), bool] {
  %865 = fn (%var_1933: Tensor[(8, 2, 6), bool]) -> Tensor[(8, 2, 6), bool] {
    %861 = cast(%var_1933, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
    %862 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(8, 2, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %863 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 2, 6), bool] */, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%863, %864) /* ty=Tensor[(8, 2, 6), bool] */
  };
  %865(%var_1972) /* ty=Tensor[(8, 2, 6), bool] */
}

def @func_6358(%var_6357: Tensor[(3, 40), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 40), float64], int64) {
  %874 = fn (%var_6353: Tensor[(3, 40), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 40), float64], int64) {
    %866 = @func_2083() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) */;
    %867 = cast(%var_6353, dtype="float64") /* ty=Tensor[(3, 40), float64] */;
    %868 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %869 = reshape(%867, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float64] */;
    %870 = reshape(%868, newshape=[]) /* ty=int64 */;
    %871 = @func_4163(%869, %870) /* ty=(Tensor[(6, 4, 5), float64], Tensor[(3, 13, 2), float32], int64, Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) */;
    %872 = %866.1;
    %873 = %871.4;
    (%872, %873, %var_6353, -2 /* ty=int64 */)
  };
  %874(%var_6357) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 40), float64], int64) */
}

def @func_7748(%var_7734: Tensor[(1365), float64], %var_7735: int64, %var_7737: Tensor[(2640, 1), uint16]) -> (Tensor[(3, 13, 2), float32], Tensor[(770), float64], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640, 1), uint16], Tensor[(2, 48), int64]) {
  %875 = cast(%var_7734, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %876 = cast(%var_7735, dtype="int64") /* ty=int64 */;
  %877 = cast(meta[relay.Constant][32] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %878 = cast(%var_7737, dtype="uint16") /* ty=Tensor[(2640, 1), uint16] */;
  %879 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 48), int64] */, dtype="int64") /* ty=Tensor[(2, 48), int64] */;
  %880 = reshape(%875, newshape=[7, 15, 13]) /* ty=Tensor[(7, 15, 13), float64] */;
  %881 = reshape(%876, newshape=[]) /* ty=int64 */;
  %882 = reshape(%877, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %883 = reshape(%878, newshape=[2640]) /* ty=Tensor[(2640), uint16] */;
  %884 = reshape(%879, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %885 = @func_3398(%880, %881, %882, %883, %884) /* ty=(Tensor[(16, 12, 2), int32], int64, Tensor[(7, 15, 13), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(770), float64], Tensor[(3, 13, 2), float32], Tensor[(2640), uint16], Tensor[(8, 2, 6), bool], Tensor[(96), int64]) */;
  %886 = @func_458() /* ty=Tensor[(3, 13, 2), float32] */;
  %887 = %885.7;
  (%886, %887, %var_7734, %var_7735, meta[relay.Constant][32] /* ty=Tensor[(770), float64] */, %var_7737, meta[relay.Constant][33] /* ty=Tensor[(2, 48), int64] */)
}

def @func_5420(%var_5419: Tensor[(3, 13, 2), float64]) -> (Tensor[(3, 13, 2), bool],) {
  %895 = fn (%var_5411: Tensor[(3, 13, 2), float64]) -> (Tensor[(3, 13, 2), bool],) {
    %888 = @func_3305() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
    %889 = %888.1;
    %890 = cast(%var_5411, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
    %891 = shape_of(%889, dtype="int32") /* ty=Tensor[(3), int32] */;
    %892 = cast(%889, dtype="bool") /* ty=Tensor[(3, 13, 2), bool] */;
    %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %894 = logical_and(%892, %893) /* ty=Tensor[(3, 13, 2), bool] */;
    (%894,)
  };
  %895(%var_5419) /* ty=(Tensor[(3, 13, 2), bool],) */
}

def @func_4948(%var_4944: Tensor[(1365), float64], %var_4945: int64, %var_4946: Tensor[(770), float64], %var_4947: Tensor[(96), int64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640), uint16], Tensor[(96), int64]) {
  @func_4942(%var_4944, %var_4945, %var_4946, %var_4947) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(1365), float64], int64, Tensor[(770), float64], Tensor[(2640), uint16], Tensor[(96), int64]) */
}

def @func_6611() -> Tensor[(3, 13, 2), float32] {
  @func_6609() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_3469() -> Tensor[(3, 13, 2), float32] {
  %897 = fn () -> Tensor[(3, 13, 2), float32] {
    %896 = @func_423() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */;
    %896.1
  };
  %897() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_4824() -> (Tensor[(3, 13, 2), float32],) {
  %898 = @func_1304() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %899 = %898.0;
  (%899,)
}

def @func_2336() -> (Tensor[(11, 1, 8), float64],) {
  @func_2334() /* ty=(Tensor[(11, 1, 8), float64],) */
}

def @func_4574() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
  %904 = fn () -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) {
    %900 = @func_1886() /* ty=(Tensor[(3, 13, 2), float64],) */;
    %901 = @func_3305() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */;
    %902 = %900.0;
    %903 = %901.0;
    (%902, %903)
  };
  %904() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float64]) */
}

def @func_8492() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(693), float64], Tensor[(10, 7, 11), float64]) {
  %924 = fn () -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(693), float64], Tensor[(10, 7, 11), float64]) {
    %905 = @func_2558() /* ty=(Tensor[(3, 13, 2), float64],) */;
    %906 = @func_6015() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) */;
    %907 = %906.0;
    %908 = cast(%907, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
    %909 = reshape(%908, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), float32] */;
    %910 = @func_4241(%909) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(7, 11, 9), float64], Tensor[(693), float64]) */;
    %911 = cast(meta[relay.Constant][34] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
    %912 = cast(meta[relay.Constant][34] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
    %913 = reshape(%911, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
    %914 = reshape(%912, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
    %915 = @func_219(%913, %914) /* ty=(Tensor[(10, 7, 11), float64],) */;
    %916 = %915.0;
    %917 = cast(meta[relay.Constant][34] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
    %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
    %919 = cast(%916, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
    %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %921 = %905.0;
    %922 = %910.2;
    %923 = add(%919, %920) /* ty=Tensor[(10, 7, 11), float64] */;
    (%921, %907, %922, %923)
  };
  %924() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(693), float64], Tensor[(10, 7, 11), float64]) */
}

def @func_2366() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  @func_2364() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) */
}

def @func_5475(%var_5457: Tensor[(16, 9, 16), float32]) -> (Tensor[(16, 9, 16), bool],) {
  %925 = cast(%var_5457, dtype="float32") /* ty=Tensor[(16, 9, 16), float32] */;
  %926 = asin(%925) /* ty=Tensor[(16, 9, 16), float32] */;
  %927 = cast(%var_5457, dtype="bool") /* ty=Tensor[(16, 9, 16), bool] */;
  %928 = shape_of(%926, dtype="int32") /* ty=Tensor[(3), int32] */;
  %929 = cast(%926, dtype="bool") /* ty=Tensor[(16, 9, 16), bool] */;
  %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %931 = equal(%929, %930) /* ty=Tensor[(16, 9, 16), bool] */;
  (%931,)
}

def @func_5254() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) {
  %936 = fn () -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) {
    %932 = @func_2494() /* ty=(Tensor[(3, 13, 2), float64],) */;
    %933 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
    %934 = %932.0;
    %935 = %933.0;
    (%934, %935)
  };
  %936() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */
}

def @func_758() -> (Tensor[(3, 13, 2), int64],) {
  %939 = fn () -> (Tensor[(3, 13, 2), int64],) {
    %937 = @func_489() /* ty=(Tensor[(3, 13, 2), int64],) */;
    %938 = %937.0;
    (%938,)
  };
  %939() /* ty=(Tensor[(3, 13, 2), int64],) */
}

def @func_8310() -> (Tensor[(3, 13, 2), float32],) {
  %942 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %940 = @func_6015() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool]) */;
    %941 = %940.0;
    (%941,)
  };
  %942() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_7390() -> (Tensor[(3, 13, 2), float32],) {
  @func_7388() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_491() -> (Tensor[(3, 13, 2), int64],) {
  @func_489() /* ty=(Tensor[(3, 13, 2), int64],) */
}

def @func_3096() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32]) {
  %943 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
  %944 = %943.2;
  %945 = @func_2284() /* ty=Tensor[(3, 13, 2), float32] */;
  (%944, %945)
}

def @func_7967() -> (Tensor[(3, 13, 2), float32],) {
  %947 = fn () -> (Tensor[(3, 13, 2), float32],) {
    %946 = @func_2284() /* ty=Tensor[(3, 13, 2), float32] */;
    (%946,)
  };
  %947() /* ty=(Tensor[(3, 13, 2), float32],) */
}

def @func_4713(%var_4710: Tensor[(8, 2, 11), float64], %var_4711: Tensor[(78), int64], %var_4712: Tensor[(96), int64]) -> (Tensor[(3, 13, 2), bool], Tensor[(78), int64], Tensor[(96), int64], Tensor[(8, 2, 11), uint16]) {
  %961 = fn (%var_4667: Tensor[(8, 2, 11), float64], %var_4674: Tensor[(78), int64], %var_4675: Tensor[(96), int64]) -> (Tensor[(3, 13, 2), bool], Tensor[(78), int64], Tensor[(96), int64], Tensor[(8, 2, 11), uint16]) {
    %948 = cast(%var_4674, dtype="int64") /* ty=Tensor[(78), int64] */;
    %949 = cast(%var_4675, dtype="int64") /* ty=Tensor[(96), int64] */;
    %950 = reshape(%948, newshape=[3, 13, 2]) /* ty=Tensor[(3, 13, 2), int64] */;
    %951 = reshape(%949, newshape=[1, 96]) /* ty=Tensor[(1, 96), int64] */;
    %952 = @func_1815(%950, %951) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(6, 4, 4), float64], Tensor[(1, 96), int64]) */;
    %953 = cast(%var_4667, dtype="float64") /* ty=Tensor[(8, 2, 11), float64] */;
    %954 = erf(%953) /* ty=Tensor[(8, 2, 11), float64] */;
    %955 = cast(%var_4667, dtype="uint16") /* ty=Tensor[(8, 2, 11), uint16] */;
    %956 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
    %957 = cast(%954, dtype="uint16") /* ty=Tensor[(8, 2, 11), uint16] */;
    %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %959 = %952.0;
    %960 = maximum(%957, %958) /* ty=Tensor[(8, 2, 11), uint16] */;
    (%959, %var_4674, %var_4675, %960)
  };
  %961(%var_4710, %var_4711, %var_4712) /* ty=(Tensor[(3, 13, 2), bool], Tensor[(78), int64], Tensor[(96), int64], Tensor[(8, 2, 11), uint16]) */
}

def @func_2085() -> (Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) {
  @func_2083() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(12, 12, 14), bool]) */
}

def @func_460() -> Tensor[(3, 13, 2), float32] {
  @func_458() /* ty=Tensor[(3, 13, 2), float32] */
}

def @func_5974(%var_5967: int64, %var_5969: Tensor[(11550), float64]) -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], int64, Tensor[(770), float64], Tensor[(11550), float64]) {
  %962 = @func_2774() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64], Tensor[(3, 13, 2), float32]) */;
  %963 = @func_4533() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %964 = cast(%var_5967, dtype="int64") /* ty=int64 */;
  %965 = cast(meta[relay.Constant][35] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %966 = cast(%var_5969, dtype="float64") /* ty=Tensor[(11550), float64] */;
  %967 = reshape(%964, newshape=[]) /* ty=int64 */;
  %968 = reshape(%965, newshape=[1, 770]) /* ty=Tensor[(1, 770), float64] */;
  %969 = reshape(%966, newshape=[15, 770]) /* ty=Tensor[(15, 770), float64] */;
  %970 = @func_1278(%967, %968, %969) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), bool], Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float32], Tensor[(10, 7, 11), float64], Tensor[(15, 770), float64], Tensor[(3, 13, 2), float64]) */;
  %971 = %962.0;
  %972 = @func_4858() /* ty=Tensor[(3, 13, 2), float64] */;
  %973 = %963.0;
  %974 = %970.7;
  (%971, %972, %973, %974, %var_5967, meta[relay.Constant][35] /* ty=Tensor[(770), float64] */, %var_5969)
}

def @func_7334(%var_7314: Tensor[(13, 6, 14), int32]) -> Tensor[(13, 6, 14), int32] {
  %975 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 6, 14), int32] */, dtype="int32") /* ty=Tensor[(13, 6, 14), int32] */;
  %976 = shape_of(%var_7314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %977 = cast(%var_7314, dtype="int32") /* ty=Tensor[(13, 6, 14), int32] */;
  %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%977, %978) /* ty=Tensor[(13, 6, 14), int32] */
}

def @func_2662() -> (Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) {
  @func_2660() /* ty=(Tensor[(3, 13, 2), float32], Tensor[(3, 13, 2), float64]) */
}

def @func_853(%var_838: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), float32],) {
  %979 = @func_281() /* ty=(Tensor[(3, 13, 2), float32],) */;
  %980 = %979.0;
  %981 = cast(%var_838, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %982 = shape_of(%980, dtype="int32") /* ty=Tensor[(3), int32] */;
  %983 = cast(%980, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %985 = floor_mod(%983, %984) /* ty=Tensor[(3, 13, 2), float64] */;
  %986 = cast(%985, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %987 = erf(%986) /* ty=Tensor[(3, 13, 2), float32] */;
  (%987,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen380/build/output.py:2760: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen380/build/output.py", line 2765, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(480) tvmgen_default_fused_acos_kernel0(float* __restrict__ T_acos, float* __restrict__ placeholder) {
  T_acos[(((int)threadIdx.x))] = acosf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

