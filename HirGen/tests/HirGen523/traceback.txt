==========mod==========
#[version = "0.0.5"]
def @func_6953() -> Tensor[(11, 5, 5), float32] {
  @func_6442() /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_6009() -> Tensor[(4, 12, 13), float64] {
  %0 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
  exp(%2) /* ty=Tensor[(4, 12, 13), float64] */
}

def @func_4331() -> (Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) {
  %3 = @func_4317() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %4 = cast(-5.60396f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(275, 1), float64] */, dtype="float64") /* ty=Tensor[(275, 1), float64] */;
  %7 = reshape(%4, newshape=[]) /* ty=float64 */;
  %8 = reshape(%5, newshape=[9, 7, 1]) /* ty=Tensor[(9, 7, 1), float64] */;
  %9 = reshape(%6, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %10 = @func_3505(%7, %8, %9) /* ty=(Tensor[(11, 5, 5), float64], Tensor[(275), float64], Tensor[(9, 7, ?), uint64]) */;
  %11 = %3.0;
  %12 = %10.0;
  (%11, %12, -5.60396f64 /* ty=float64 */, meta[relay.Constant][0] /* ty=Tensor[(63), float64] */, meta[relay.Constant][1] /* ty=Tensor[(275, 1), float64] */)
}

def @func_7355(%var_7350: Tensor[(273), int32]) -> (Tensor[(3, 12, 3), float32], Tensor[(273, 1), int32], Tensor[(273), int32]) {
  %13 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  %14 = cast(%var_7350, dtype="int32") /* ty=Tensor[(273), int32] */;
  %15 = reshape(%14, newshape=[273, 1]) /* ty=Tensor[(273, 1), int32] */;
  %16 = @func_4291(%15) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(7, 13, 3), bool], Tensor[(273, 1), int32]) */;
  %17 = sqrt(%13) /* ty=Tensor[(3, 12, 3), float32] */;
  %18 = %16.2;
  (%17, %18, %var_7350)
}

def @func_7485() -> (Tensor[(7, 16, 13), float64], Tensor[(7, 10, 10), bool], Tensor[(700, 1), float64], Tensor[(11, 15, 2), int16], Tensor[(55, 6), int16], Tensor[(275, 1), float64], Tensor[(4, 12, 13), float64]) {
  %19 = cast(meta[relay.Constant][3] /* ty=Tensor[(700, 1), float32] */, dtype="float32") /* ty=Tensor[(700, 1), float32] */;
  %20 = reshape(%19, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
  %21 = cast(meta[relay.Constant][3] /* ty=Tensor[(700, 1), float32] */, dtype="float64") /* ty=Tensor[(700, 1), float64] */;
  %22 = cast(meta[relay.Constant][4] /* ty=Tensor[(55, 6), int16] */, dtype="int16") /* ty=Tensor[(55, 6), int16] */;
  %23 = reshape(%22, newshape=[11, 15, 2]) /* ty=Tensor[(11, 15, 2), int16] */;
  %24 = @func_3831(%23) /* ty=(Tensor[(11, 15, 2), int16], Tensor[(11, 15, 2), float32]) */;
  %25 = @func_6656() /* ty=Tensor[(4, 12, 13), bool] */;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
  %27 = @func_7192() /* ty=Tensor[(7, 16, 13), float64] */;
  %28 = @func_6699(%20) /* ty=Tensor[(7, 10, 10), bool] */;
  %29 = tan(%21) /* ty=Tensor[(700, 1), float64] */;
  %30 = %24.0;
  %31 = @func_5551() /* ty=Tensor[(275, 1), float64] */;
  %32 = cos(%26) /* ty=Tensor[(4, 12, 13), float64] */;
  (%27, %28, %29, %30, meta[relay.Constant][4] /* ty=Tensor[(55, 6), int16] */, %31, %32)
}

def @func_4914() -> (Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) {
  %33 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
  %34 = %33.0;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(4, 12, 13), float32] */;
  %36 = cast(-4.60992f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %37 = cast(meta[relay.Constant][5] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %38 = reshape(%36, newshape=[]) /* ty=float64 */;
  %39 = reshape(%37, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %40 = @func_4851(%38, %39) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(2, 13, 1), float64], float64, Tensor[(26), float64], float64) */;
  %41 = @func_4821() /* ty=Tensor[(11, 5, 5), float32] */;
  %42 = atan(%35) /* ty=Tensor[(4, 12, 13), float32] */;
  %43 = %40.2;
  (%41, %42, %43, -4.60992f64 /* ty=float64 */, meta[relay.Constant][5] /* ty=Tensor[(26), float64] */)
}

def @main() -> Tensor[(275, 1), float32] {
  %44 = @func_8100() /* ty=(Tensor[(275, 1), float32],) */;
  %45 = %44.0;
  %46 = cast(%45, dtype="float32") /* ty=Tensor[(275, 1), float32] */;
  sinh(%46) /* ty=Tensor[(275, 1), float32] */
}

def @func_6127() -> (Tensor[(4, 12, 13), bool],) {
  %47 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
  %48 = %47.0;
  (%48,)
}

def @func_6074(%var_6069: Tensor[(3, 16, 14), float64]) -> (Tensor[(3, 16, 14), bool],) {
  %49 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %50 = %49.2;
  %51 = cast(%50, dtype="bool") /* ty=bool */;
  %52 = cast(%var_6069, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %53 = logical_and(%51, %52) /* ty=Tensor[(3, 16, 14), bool] */;
  (%53,)
}

def @func_1890(%var_1840: Tensor[(2, 16, 15), float32]) -> (Tensor[(3, 6, 14), uint64], uint64, Tensor[(2, 16, 15), float32]) {
  %54 = cast(meta[relay.Constant][6] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %55 = reshape(%54, newshape=[]) /* ty=uint64 */;
  %56 = @func_492(%55) /* ty=(Tensor[(3, 6, 14), uint64],) */;
  %57 = cast(%var_1840, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %58 = log2(%57) /* ty=Tensor[(2, 16, 15), float32] */;
  %59 = cast(%58, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %60 = %56.0;
  %61 = atan(%59) /* ty=Tensor[(2, 16, 15), float32] */;
  (%60, meta[relay.Constant][6] /* ty=uint64 */, %61)
}

def @func_7953() -> (Tensor[(7, 10, 10), float32],) {
  %62 = @func_6218() /* ty=Tensor[(7, 10, 10), float32] */;
  (%62,)
}

def @func_7852(%var_7843: Tensor[(1, 26), float64], %var_7844: Tensor[(273), int32], %var_7845: Tensor[(832), float64], %var_7846: Tensor[(63), int16]) -> (Tensor[(7, 16, 13), float64], Tensor[(16, 16, 12), float64], Tensor[(1, 26), float64], Tensor[(273), int32], Tensor[(832), float64], Tensor[(63), int16]) {
  %63 = cast(%var_7843, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
  %64 = cast(%var_7844, dtype="int32") /* ty=Tensor[(273), int32] */;
  %65 = cast(%var_7845, dtype="float64") /* ty=Tensor[(832), float64] */;
  %66 = cast(%var_7846, dtype="int16") /* ty=Tensor[(63), int16] */;
  %67 = reshape(%63, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %68 = reshape(%64, newshape=[273]) /* ty=Tensor[(273), int32] */;
  %69 = reshape(%65, newshape=[832]) /* ty=Tensor[(832), float64] */;
  %70 = reshape(%66, newshape=[63]) /* ty=Tensor[(63), int16] */;
  %71 = @func_4676(%67, %68, %69, %70) /* ty=(Tensor[(3, 6, 14), uint64], Tensor[(90, 1), int32], Tensor[(1170), int32], Tensor[(26), float64], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), int32], Tensor[(120), int32], uint64, Tensor[(11, 5, 5), float64], Tensor[(16, 16, 12), float64], Tensor[(3072), float64], Tensor[(3, 3, 7), bool], Tensor[(63), int16]) */;
  %72 = @func_7192() /* ty=Tensor[(7, 16, 13), float64] */;
  %73 = %71.12;
  (%72, %73, %var_7843, %var_7844, %var_7845, %var_7846)
}

def @func_6391() -> Tensor[(2, 5, ?), float64] {
  @func_5476() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_6656() -> Tensor[(4, 12, 13), bool] {
  %74 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
  %74.0
}

def @func_1577(%var_1525: Tensor[(13, 6, 1), float32], %var_1530: uint64, %var_1537: Tensor[(7, 9), int16]) -> (Tensor[(13, 6, 1), float32], Tensor[(10, 3, 4), float32], Tensor[(120), int32], uint64, Tensor[(26), float64], Tensor[(7, 9), int16], Tensor[(26), float64], Tensor[(3, 6, 14), uint64], Tensor[(3, 6, 14), uint64]) {
  %75 = cast(%var_1525, dtype="float32") /* ty=Tensor[(13, 6, 1), float32] */;
  %76 = cast(meta[relay.Constant][7] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %77 = cast(%var_1530, dtype="uint64") /* ty=uint64 */;
  %78 = reshape(%76, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int32] */;
  %79 = reshape(%77, newshape=[]) /* ty=uint64 */;
  %80 = @func_761(%78, %79) /* ty=(Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) */;
  %81 = cast(%var_1530, dtype="int16") /* ty=int16 */;
  %82 = cast(%var_1537, dtype="int16") /* ty=Tensor[(7, 9), int16] */;
  %83 = cast(meta[relay.Constant][8] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %84 = reshape(%81, newshape=[]) /* ty=int16 */;
  %85 = reshape(%82, newshape=[3, 3, 7]) /* ty=Tensor[(3, 3, 7), int16] */;
  %86 = reshape(%83, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %87 = @func_443(%84, %85, %86) /* ty=(Tensor[(3, 3, 7), bool], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %88 = cast(%var_1530, dtype="uint64") /* ty=uint64 */;
  %89 = reshape(%88, newshape=[]) /* ty=uint64 */;
  %90 = @func_492(%89) /* ty=(Tensor[(3, 6, 14), uint64],) */;
  %91 = cast(%var_1530, dtype="uint64") /* ty=uint64 */;
  %92 = reshape(%91, newshape=[]) /* ty=uint64 */;
  %93 = @func_492(%92) /* ty=(Tensor[(3, 6, 14), uint64],) */;
  %94 = sinh(%75) /* ty=Tensor[(13, 6, 1), float32] */;
  %95 = %80.3;
  %96 = %87.2;
  %97 = %90.0;
  %98 = %93.0;
  (%94, %95, meta[relay.Constant][7] /* ty=Tensor[(120), int32] */, %var_1530, %96, %var_1537, meta[relay.Constant][8] /* ty=Tensor[(26), float64] */, %97, %98)
}

def @func_5551() -> Tensor[(275, 1), float64] {
  %99 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %99.4
}

def @func_6321() -> (float64, Tensor[(11, 5, 5), float32]) {
  %100 = @func_5646() /* ty=(float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) */;
  %101 = @func_6205() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(7, 10, 10), uint32]) */;
  %102 = %100.0;
  %103 = %101.0;
  (%102, %103)
}

def @func_3244(%var_3229: Tensor[(8, 8, 13), float64], %var_3230: Tensor[(8, 8, 13), float64]) -> (Tensor[(8, 8, 13), float64],) {
  %104 = cast(%var_3230, dtype="bool") /* ty=Tensor[(8, 8, 13), bool] */;
  %105 = shape_of(%var_3229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%var_3229, dtype="bool") /* ty=Tensor[(8, 8, 13), bool] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %108 = equal(%106, %107) /* ty=Tensor[(8, 8, 13), bool] */;
  %109 = cast(%108, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %110 = sqrt(%109) /* ty=Tensor[(8, 8, 13), float64] */;
  (%110,)
}

def @func_3477(%var_3470: Tensor[(16, 4, 6), float32]) -> Tensor[(16, 4, 6), float32] {
  %111 = cast(%var_3470, dtype="float32") /* ty=Tensor[(16, 4, 6), float32] */;
  atan(%111) /* ty=Tensor[(16, 4, 6), float32] */
}

def @func_2531(%var_2510: float64, %var_2511: Tensor[(16, 16, 12), float64], %var_2523: Tensor[(26), float64]) -> (Tensor[(16, 16, 12), float64], Tensor[(26), float64], Tensor[(90), int32], Tensor[(5, 234), int32], Tensor[(26), float64]) {
  %112 = cast(%var_2510, dtype="float64") /* ty=float64 */;
  %113 = cast(%var_2511, dtype="float64") /* ty=Tensor[(16, 16, 12), float64] */;
  %114 = cast(meta[relay.Constant][9] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
  %115 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 234), int32] */, dtype="int32") /* ty=Tensor[(5, 234), int32] */;
  %116 = cast(%var_2523, dtype="float64") /* ty=Tensor[(26), float64] */;
  %117 = reshape(%114, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %118 = reshape(%115, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), int32] */;
  %119 = reshape(%116, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %120 = @func_2375(%117, %118, %119) /* ty=(Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %121 = minimum(%112, %113) /* ty=Tensor[(16, 16, 12), float64] */;
  %122 = %120.5;
  (%121, %122, meta[relay.Constant][9] /* ty=Tensor[(90), int32] */, meta[relay.Constant][10] /* ty=Tensor[(5, 234), int32] */, %var_2523)
}

def @func_5287(%var_5198: Tensor[(546), float32], %var_5225: Tensor[(480), float32], %var_5226: Tensor[(7, 10), float64], %var_5274: Tensor[(90), int32], %var_5275: Tensor[(1170), int32]) -> (Tensor[(11, 5, 5), float32], Tensor[(6, 7, 13), float32], Tensor[(546), float32], float64, float64, Tensor[(144, 2), bool], Tensor[(480), float32], Tensor[(7, 10), float64], Tensor[(63), int16], Tensor[(26), uint16], Tensor[(26), float32], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(26), float64], Tensor[(90), int32], Tensor[(1170), int32]) {
  %123 = cast(%var_5198, dtype="float32") /* ty=Tensor[(546), float32] */;
  %124 = reshape(%123, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), float32] */;
  %125 = @func_3222(%124) /* ty=(Tensor[(6, 7, 13), float32],) */;
  %126 = cast(2.39053f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %127 = cast(meta[relay.Constant][11] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %128 = reshape(%126, newshape=[]) /* ty=float64 */;
  %129 = reshape(%127, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %130 = @func_4851(%128, %129) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(2, 13, 1), float64], float64, Tensor[(26), float64], float64) */;
  %131 = cast(%var_5225, dtype="float32") /* ty=Tensor[(480), float32] */;
  %132 = cast(%var_5226, dtype="float64") /* ty=Tensor[(7, 10), float64] */;
  %133 = cast(meta[relay.Constant][12] /* ty=Tensor[(63), int16] */, dtype="int16") /* ty=Tensor[(63), int16] */;
  %134 = reshape(%131, newshape=[240, 2]) /* ty=Tensor[(240, 2), float32] */;
  %135 = reshape(%132, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), float64] */;
  %136 = reshape(%133, newshape=[63]) /* ty=Tensor[(63), int16] */;
  %137 = @func_4797(%134, %135, %136) /* ty=(uint64, Tensor[(240, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(64), float32], Tensor[(2, 16, 15), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), float32], Tensor[(78), float32], Tensor[(63), int16], Tensor[(2, 5, 7), bool], Tensor[(2, 5, 7), float64], Tensor[(3, 16, 6), bool], Tensor[(144, 2), bool]) */;
  %138 = cast(meta[relay.Constant][13] /* ty=Tensor[(26), float64] */, dtype="uint16") /* ty=Tensor[(26), uint16] */;
  %139 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(26), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %140 = cast(meta[relay.Constant][11] /* ty=Tensor[(26), float64] */, dtype="uint16") /* ty=Tensor[(26), uint16] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %142 = cast(meta[relay.Constant][13] /* ty=Tensor[(26), float64] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %143 = cast(meta[relay.Constant][14] /* ty=Tensor[(273), int32] */, dtype="int32") /* ty=Tensor[(273), int32] */;
  %144 = cast(meta[relay.Constant][14] /* ty=Tensor[(273), int32] */, dtype="int32") /* ty=Tensor[(273), int32] */;
  %145 = reshape(%143, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %146 = reshape(%144, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %147 = @func_3977(%145, %146) /* ty=(Tensor[(7, 13, 3), bool],) */;
  %148 = cast(%var_5274, dtype="int32") /* ty=Tensor[(90), int32] */;
  %149 = cast(%var_5275, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %150 = bitwise_xor(%140, %141) /* ty=Tensor[(26), uint16] */;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(26), float64] */;
  %152 = reshape(%148, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %153 = reshape(%149, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), int32] */;
  %154 = reshape(%151, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %155 = @func_2375(%152, %153, %154) /* ty=(Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %156 = @func_4821() /* ty=Tensor[(11, 5, 5), float32] */;
  %157 = %125.0;
  %158 = %130.2;
  %159 = %137.13;
  %160 = cos(%142) /* ty=Tensor[(26), float32] */;
  %161 = %147.0;
  %162 = %155.5;
  (%156, %157, %var_5198, %158, 2.39053f64 /* ty=float64 */, %159, %var_5225, %var_5226, meta[relay.Constant][12] /* ty=Tensor[(63), int16] */, %150, %160, %161, meta[relay.Constant][14] /* ty=Tensor[(273), int32] */, %162, %var_5274, %var_5275)
}

def @func_8402() -> (Tensor[(275, 1), float32],) {
  %163 = @func_8100() /* ty=(Tensor[(275, 1), float32],) */;
  %164 = %163.0;
  (%164,)
}

def @func_6835(%var_6825: Tensor[(2, 5, 12), float64]) -> Tensor[(2, 5, 12), int16] {
  %165 = @func_4250() /* ty=Tensor[(2, 5, ?), float64] */;
  %166 = cast(%165, dtype="int16") /* ty=Tensor[(2, 5, ?), int16] */;
  %167 = cast(%var_6825, dtype="int16") /* ty=Tensor[(2, 5, 12), int16] */;
  bitwise_xor(%166, %167) /* ty=Tensor[(2, 5, 12), int16] */
}

def @func_4250() -> Tensor[(2, 5, ?), float64] {
  %168 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 1), float32] */;
  %169 = log(%168) /* ty=Tensor[(2, 5, 1), float32] */;
  %170 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 5, 1), float32] */, dtype="int32") /* ty=Tensor[(2, 5, 1), int32] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="int32") /* ty=Tensor[(2, 5, 1), int32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %174 = add(%172, %173) /* ty=Tensor[(2, 5, ?), int32] */;
  %175 = cast(%174, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  %176 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(2, 5, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 5, 1), float32] */, dtype="float64") /* ty=Tensor[(2, 5, 1), float64] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%177, %178) /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_7828() -> (Tensor[(2, 5, ?), float64], Tensor[(2, 5, ?), float64]) {
  %179 = @func_6376() /* ty=Tensor[(2, 5, ?), float64] */;
  %180 = @func_6391() /* ty=Tensor[(2, 5, ?), float64] */;
  (%179, %180)
}

def @func_4797(%var_4707: Tensor[(240, 2), float32], %var_4737: Tensor[(2, 5, 7), float64], %var_4753: Tensor[(63), int16]) -> (uint64, Tensor[(240, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(64), float32], Tensor[(2, 16, 15), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), float32], Tensor[(78), float32], Tensor[(63), int16], Tensor[(2, 5, 7), bool], Tensor[(2, 5, 7), float64], Tensor[(3, 16, 6), bool], Tensor[(144, 2), bool]) {
  %181 = cast(%var_4707, dtype="float32") /* ty=Tensor[(240, 2), float32] */;
  %182 = reshape(%181, newshape=[2, 16, 15]) /* ty=Tensor[(2, 16, 15), float32] */;
  %183 = @func_1890(%182) /* ty=(Tensor[(3, 6, 14), uint64], uint64, Tensor[(2, 16, 15), float32]) */;
  %184 = cast(meta[relay.Constant][16] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %185 = cast(meta[relay.Constant][16] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %186 = reshape(%184, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float32] */;
  %187 = reshape(%185, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float32] */;
  %188 = @func_4442(%186, %187) /* ty=(Tensor[(8, 4, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(546, 1), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), int16], Tensor[(2, 5, ?), bool]) */;
  %189 = cast(%var_4707, dtype="float32") /* ty=Tensor[(240, 2), float32] */;
  %190 = reshape(%189, newshape=[2, 16, 15]) /* ty=Tensor[(2, 16, 15), float32] */;
  %191 = @func_1890(%190) /* ty=(Tensor[(3, 6, 14), uint64], uint64, Tensor[(2, 16, 15), float32]) */;
  %192 = cast(meta[relay.Constant][17] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %193 = cast(meta[relay.Constant][17] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %194 = reshape(%192, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %195 = reshape(%193, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %196 = @func_3244(%194, %195) /* ty=(Tensor[(8, 8, 13), float64],) */;
  %197 = cast(meta[relay.Constant][18] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %198 = %183.1;
  %199 = cast(%198, dtype="uint64") /* ty=uint64 */;
  %200 = cast(%var_4753, dtype="int16") /* ty=Tensor[(63), int16] */;
  %201 = reshape(%197, newshape=[13, 6, 1]) /* ty=Tensor[(13, 6, 1), float32] */;
  %202 = reshape(%199, newshape=[]) /* ty=uint64 */;
  %203 = reshape(%200, newshape=[7, 9]) /* ty=Tensor[(7, 9), int16] */;
  %204 = @func_1577(%201, %202, %203) /* ty=(Tensor[(13, 6, 1), float32], Tensor[(10, 3, 4), float32], Tensor[(120), int32], uint64, Tensor[(26), float64], Tensor[(7, 9), int16], Tensor[(26), float64], Tensor[(3, 6, 14), uint64], Tensor[(3, 6, 14), uint64]) */;
  %205 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 5, 7), float64] */;
  %206 = sin(%205) /* ty=Tensor[(2, 5, 7), float64] */;
  %207 = cast(%var_4737, dtype="int8") /* ty=Tensor[(2, 5, 7), int8] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%206, dtype="int8") /* ty=Tensor[(2, 5, 7), int8] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %211 = left_shift(%209, %210) /* ty=Tensor[(2, 5, 7), int8] */;
  %212 = @func_4250() /* ty=Tensor[(2, 5, ?), float64] */;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  %214 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 5, 7), float64] */;
  %215 = divide(%213, %214) /* ty=Tensor[(2, 5, 7), float64] */;
  %216 = cast(%215, dtype="bool") /* ty=Tensor[(2, 5, 7), bool] */;
  %217 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%211, dtype="bool") /* ty=Tensor[(2, 5, 7), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = cast(%206, dtype="float64") /* ty=Tensor[(2, 5, 7), float64] */;
  %221 = cast(meta[relay.Constant][20] /* ty=Tensor[(144, 2), bool] */, dtype="bool") /* ty=Tensor[(144, 2), bool] */;
  %222 = reshape(%221, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %223 = @func_2639(%222) /* ty=(Tensor[(3, 16, 6), bool],) */;
  %224 = %188.1;
  %225 = %191.2;
  %226 = %196.0;
  %227 = %204.1;
  %228 = greater(%218, %219) /* ty=Tensor[(2, 5, 7), bool] */;
  %229 = exp(%220) /* ty=Tensor[(2, 5, 7), float64] */;
  %230 = %223.0;
  (%198, %var_4707, %224, meta[relay.Constant][16] /* ty=Tensor[(64), float32] */, %225, %226, meta[relay.Constant][17] /* ty=Tensor[(832), float64] */, %227, meta[relay.Constant][18] /* ty=Tensor[(78), float32] */, %var_4753, %228, %229, %230, meta[relay.Constant][20] /* ty=Tensor[(144, 2), bool] */)
}

def @func_5646() -> (float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) {
  %231 = @func_4542() /* ty=(float64,) */;
  %232 = cast(meta[relay.Constant][21] /* ty=Tensor[(273), int32] */, dtype="int32") /* ty=Tensor[(273), int32] */;
  %233 = cast(meta[relay.Constant][21] /* ty=Tensor[(273), int32] */, dtype="int32") /* ty=Tensor[(273), int32] */;
  %234 = reshape(%232, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %235 = reshape(%233, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %236 = @func_3977(%234, %235) /* ty=(Tensor[(7, 13, 3), bool],) */;
  %237 = %231.0;
  %238 = %236.0;
  (%237, %238, meta[relay.Constant][21] /* ty=Tensor[(273), int32] */)
}

def @func_5327(%var_5314: Tensor[(26, 3), float32], %var_5315: uint64, %var_5316: Tensor[(63), int16]) -> (Tensor[(2, 5, ?), float64], Tensor[(26), float64], Tensor[(26, 3), float32], uint64, Tensor[(63), int16], Tensor[(16, 16, 12), float64], Tensor[(3072), float64]) {
  %239 = @func_4317() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %240 = cast(%var_5314, dtype="float32") /* ty=Tensor[(26, 3), float32] */;
  %241 = cast(%var_5315, dtype="uint64") /* ty=uint64 */;
  %242 = cast(%var_5316, dtype="int16") /* ty=Tensor[(63), int16] */;
  %243 = reshape(%240, newshape=[13, 6, 1]) /* ty=Tensor[(13, 6, 1), float32] */;
  %244 = reshape(%241, newshape=[]) /* ty=uint64 */;
  %245 = reshape(%242, newshape=[7, 9]) /* ty=Tensor[(7, 9), int16] */;
  %246 = @func_1577(%243, %244, %245) /* ty=(Tensor[(13, 6, 1), float32], Tensor[(10, 3, 4), float32], Tensor[(120), int32], uint64, Tensor[(26), float64], Tensor[(7, 9), int16], Tensor[(26), float64], Tensor[(3, 6, 14), uint64], Tensor[(3, 6, 14), uint64]) */;
  %247 = cast(%var_5315, dtype="float64") /* ty=float64 */;
  %248 = cast(meta[relay.Constant][22] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %249 = %246.6;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(26), float64] */;
  %251 = reshape(%247, newshape=[]) /* ty=float64 */;
  %252 = reshape(%248, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), float64] */;
  %253 = reshape(%250, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %254 = @func_2531(%251, %252, %253) /* ty=(Tensor[(16, 16, 12), float64], Tensor[(26), float64], Tensor[(90), int32], Tensor[(5, 234), int32], Tensor[(26), float64]) */;
  %255 = %239.0;
  %256 = %254.0;
  (%255, %249, %var_5314, %var_5315, %var_5316, %256, meta[relay.Constant][22] /* ty=Tensor[(3072), float64] */)
}

def @func_3977(%var_3958: Tensor[(7, 13, 3), int32], %var_3959: Tensor[(7, 13, 3), int32]) -> (Tensor[(7, 13, 3), bool],) {
  %257 = cast(%var_3959, dtype="bool") /* ty=Tensor[(7, 13, 3), bool] */;
  %258 = shape_of(%var_3958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%var_3958, dtype="bool") /* ty=Tensor[(7, 13, 3), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %261 = greater_equal(%259, %260) /* ty=Tensor[(7, 13, 3), bool] */;
  (%261,)
}

def @func_5476() -> Tensor[(2, 5, ?), float64] {
  %262 = @func_4364() /* ty=(Tensor[(275, 1), float32], Tensor[(275, 1), float32], Tensor[(2, 5, ?), float64]) */;
  %262.2
}

def @func_4821() -> Tensor[(11, 5, 5), float32] {
  %263 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %264 = %263.1;
  %265 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 5, 5), float64] */, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%267, %268) /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_7516() -> Tensor[(11, 5, 5), float64] {
  %269 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %269.1
}

def @func_7566() -> (Tensor[(275, 1), float64],) {
  %270 = @func_5653() /* ty=(Tensor[(275, 1), float64],) */;
  %271 = %270.0;
  (%271,)
}

def @func_8378() -> (float64, Tensor[(11, 5, 5), float32]) {
  %272 = @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */;
  %273 = @func_6321() /* ty=(float64, Tensor[(11, 5, 5), float32]) */;
  %274 = %273.1;
  %275 = cast(%274, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %276 = %272.3;
  %277 = atan(%275) /* ty=Tensor[(11, 5, 5), float32] */;
  (%276, %277)
}

def @func_8450() -> (Tensor[(11, 5, 5), float32],) {
  %278 = @func_6442() /* ty=Tensor[(11, 5, 5), float32] */;
  (%278,)
}

def @func_7326() -> Tensor[(2, 5, ?), float64] {
  @func_5476() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_8231() -> (float64,) {
  %279 = @func_4542() /* ty=(float64,) */;
  %280 = %279.0;
  (%280,)
}

def @func_5176(%var_5173: Tensor[(550), float32]) -> (Tensor[(11, 5, 5), float64], Tensor[(275, 1), float64], Tensor[(550), float32]) {
  %281 = @func_4821() /* ty=Tensor[(11, 5, 5), float32] */;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
  %283 = cast(%var_5173, dtype="float32") /* ty=Tensor[(550), float32] */;
  %284 = reshape(%283, newshape=[275, 2]) /* ty=Tensor[(275, 2), float32] */;
  %285 = @func_4962(%284) /* ty=(Tensor[(275, ?), int32], Tensor[(275, 1), float64], Tensor[(275, 2), bool]) */;
  %286 = rsqrt(%282) /* ty=Tensor[(11, 5, 5), float64] */;
  %287 = %285.1;
  (%286, %287, %var_5173)
}

def @func_8129() -> Tensor[(11, 5, 5), float32] {
  %288 = @func_6475() /* ty=(Tensor[(11, 5, 5), float32],) */;
  %288.0
}

def @func_2375(%var_2340: Tensor[(15, 1, 6), int32], %var_2354: Tensor[(15, 13, 6), int32], %var_2373: Tensor[(26), float64]) -> (Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) {
  %289 = cast(%var_2340, dtype="bool") /* ty=Tensor[(15, 1, 6), bool] */;
  %290 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 13, 6), int32] */, dtype="bool") /* ty=Tensor[(15, 13, 6), bool] */;
  %291 = cast(meta[relay.Constant][25] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %292 = reshape(%291, newshape=[]) /* ty=uint64 */;
  %293 = @func_492(%292) /* ty=(Tensor[(3, 6, 14), uint64],) */;
  %294 = cast(%var_2340, dtype="int16") /* ty=Tensor[(15, 1, 6), int16] */;
  %295 = cast(%var_2354, dtype="int16") /* ty=Tensor[(15, 13, 6), int16] */;
  %296 = logical_xor(%294, %295) /* ty=Tensor[(15, 13, 6), int16] */;
  %297 = cast(%296, dtype="uint64") /* ty=Tensor[(15, 13, 6), uint64] */;
  %298 = cast(%var_2340, dtype="uint64") /* ty=Tensor[(15, 1, 6), uint64] */;
  %299 = cast(meta[relay.Constant][25] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %300 = cast(%var_2373, dtype="float64") /* ty=Tensor[(26), float64] */;
  %301 = reshape(%299, newshape=[]) /* ty=float64 */;
  %302 = reshape(%300, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
  %303 = greater_equal(%289, %290) /* ty=Tensor[(15, 13, 6), bool] */;
  %304 = %293.0;
  %305 = bitwise_xor(%297, %298) /* ty=Tensor[(15, 13, 6), uint64] */;
  %306 = @func_418(%301, %302) /* ty=Tensor[(2, 13, 1), float64] */;
  (%303, %304, meta[relay.Constant][25] /* ty=uint64 */, %305, %306, %var_2373)
}

def @func_8628(%var_8615: Tensor[(2, 5, 2), float64]) -> Tensor[(2, 5, 2), bool] {
  %307 = @func_6391() /* ty=Tensor[(2, 5, ?), float64] */;
  %308 = cast(%307, dtype="bool") /* ty=Tensor[(2, 5, ?), bool] */;
  %309 = cast(%var_8615, dtype="bool") /* ty=Tensor[(2, 5, 2), bool] */;
  equal(%308, %309) /* ty=Tensor[(2, 5, 2), bool] */
}

def @func_5102() -> Tensor[(11, 5, 5), float32] {
  %310 = @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */;
  %310.0
}

def @func_7937(%var_7931: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 2, 2), float64],) {
  %311 = cast(%var_7931, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %312 = exp(%311) /* ty=Tensor[(3, 2, 2), float64] */;
  (%312,)
}

def @func_6218() -> Tensor[(7, 10, 10), float32] {
  %313 = @func_5785() /* ty=(Tensor[(7, 10, 10), uint32],) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
  asinh(%315) /* ty=Tensor[(7, 10, 10), float32] */
}

def @func_6205() -> (Tensor[(11, 5, 5), float32], Tensor[(7, 10, 10), uint32]) {
  %316 = @func_5785() /* ty=(Tensor[(7, 10, 10), uint32],) */;
  %317 = @func_4821() /* ty=Tensor[(11, 5, 5), float32] */;
  %318 = %316.0;
  (%317, %318)
}

def @func_4542() -> (float64,) {
  %319 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %320 = %319.2;
  (%320,)
}

def @func_4962(%var_4957: Tensor[(275, 2), float32]) -> (Tensor[(275, ?), int32], Tensor[(275, 1), float64], Tensor[(275, 2), bool]) {
  %321 = @func_4364() /* ty=(Tensor[(275, 1), float32], Tensor[(275, 1), float32], Tensor[(2, 5, ?), float64]) */;
  %322 = %321.1;
  %323 = cast(meta[relay.Constant][26] /* ty=Tensor[(275, 1), float32] */, dtype="int32") /* ty=Tensor[(275, 1), int32] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(2), int32] */;
  %325 = cast(%322, dtype="int32") /* ty=Tensor[(275, 1), int32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %327 = cast(%322, dtype="float64") /* ty=Tensor[(275, 1), float64] */;
  %328 = cast(meta[relay.Constant][26] /* ty=Tensor[(275, 1), float32] */, dtype="bool") /* ty=Tensor[(275, 1), bool] */;
  %329 = cast(%var_4957, dtype="bool") /* ty=Tensor[(275, 2), bool] */;
  %330 = bitwise_or(%325, %326) /* ty=Tensor[(275, ?), int32] */;
  %331 = tan(%327) /* ty=Tensor[(275, 1), float64] */;
  %332 = greater_equal(%328, %329) /* ty=Tensor[(275, 2), bool] */;
  (%330, %331, %332)
}

def @func_5033(%var_5004: Tensor[(480), float32], %var_5006: Tensor[(63), int16]) -> (Tensor[(5, 4, 13), uint64], Tensor[(144, 2), bool], Tensor[(480), float32], Tensor[(14, 5), float64], Tensor[(63), int16], Tensor[(7, 13, 3), bool], Tensor[(1, 273), int32], Tensor[(4, 12, 13), bool]) {
  %333 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 4, 1), int64] */, dtype="int64") /* ty=Tensor[(5, 4, 1), int64] */;
  %334 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 4, 13), int64] */, dtype="int64") /* ty=Tensor[(5, 4, 13), int64] */;
  %335 = subtract(%333, %334) /* ty=Tensor[(5, 4, 13), int64] */;
  %336 = cast(%335, dtype="uint64") /* ty=Tensor[(5, 4, 13), uint64] */;
  %337 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 4, 1), int64] */, dtype="uint64") /* ty=Tensor[(5, 4, 1), uint64] */;
  %338 = cast(%var_5004, dtype="float32") /* ty=Tensor[(480), float32] */;
  %339 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 5), float64] */;
  %340 = cast(%var_5006, dtype="int16") /* ty=Tensor[(63), int16] */;
  %341 = reshape(%338, newshape=[240, 2]) /* ty=Tensor[(240, 2), float32] */;
  %342 = reshape(%339, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), float64] */;
  %343 = reshape(%340, newshape=[63]) /* ty=Tensor[(63), int16] */;
  %344 = @func_4797(%341, %342, %343) /* ty=(uint64, Tensor[(240, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(64), float32], Tensor[(2, 16, 15), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), float32], Tensor[(78), float32], Tensor[(63), int16], Tensor[(2, 5, 7), bool], Tensor[(2, 5, 7), float64], Tensor[(3, 16, 6), bool], Tensor[(144, 2), bool]) */;
  %345 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 273), int32] */, dtype="int32") /* ty=Tensor[(1, 273), int32] */;
  %346 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 273), int32] */, dtype="int32") /* ty=Tensor[(1, 273), int32] */;
  %347 = reshape(%345, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %348 = reshape(%346, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %349 = @func_3977(%347, %348) /* ty=(Tensor[(7, 13, 3), bool],) */;
  %350 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
  %351 = add(%336, %337) /* ty=Tensor[(5, 4, 13), uint64] */;
  %352 = %344.13;
  %353 = %349.0;
  %354 = %350.0;
  (%351, %352, %var_5004, meta[relay.Constant][29] /* ty=Tensor[(14, 5), float64] */, %var_5006, %353, meta[relay.Constant][30] /* ty=Tensor[(1, 273), int32] */, %354)
}

def @func_443(%var_431: int16, %var_432: Tensor[(3, 3, 7), int16], %var_440: Tensor[(26), float64]) -> (Tensor[(3, 3, 7), bool], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) {
  %355 = cast(%var_431, dtype="bool") /* ty=bool */;
  %356 = cast(%var_432, dtype="bool") /* ty=Tensor[(3, 3, 7), bool] */;
  %357 = cast(%var_431, dtype="float64") /* ty=float64 */;
  %358 = cast(%var_440, dtype="float64") /* ty=Tensor[(26), float64] */;
  %359 = reshape(%357, newshape=[]) /* ty=float64 */;
  %360 = reshape(%358, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
  %361 = not_equal(%355, %356) /* ty=Tensor[(3, 3, 7), bool] */;
  %362 = @func_418(%359, %360) /* ty=Tensor[(2, 13, 1), float64] */;
  (%361, %362, %var_440)
}

def @func_1965(%var_1943: Tensor[(14, 14, 8), int16], %var_1944: Tensor[(14, 14, 8), int16]) -> Tensor[(14, 14, 8), bool] {
  %363 = cast(%var_1944, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
  %364 = shape_of(%var_1943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%var_1943, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%365, %366) /* ty=Tensor[(14, 14, 8), bool] */
}

def @func_3831(%var_3813: Tensor[(11, 15, 2), int16]) -> (Tensor[(11, 15, 2), int16], Tensor[(11, 15, 2), float32]) {
  %367 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 1, 2), int16] */, dtype="int16") /* ty=Tensor[(11, 1, 2), int16] */;
  %368 = cast(%var_3813, dtype="int16") /* ty=Tensor[(11, 15, 2), int16] */;
  %369 = cast(%var_3813, dtype="float32") /* ty=Tensor[(11, 15, 2), float32] */;
  %370 = maximum(%367, %368) /* ty=Tensor[(11, 15, 2), int16] */;
  %371 = sin(%369) /* ty=Tensor[(11, 15, 2), float32] */;
  (%370, %371)
}

def @func_7097(%var_7091: Tensor[(11, 5, 5), float32]) -> Tensor[(11, 5, 5), bool] {
  %372 = @func_6442() /* ty=Tensor[(11, 5, 5), float32] */;
  %373 = cast(%var_7091, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%375, %376) /* ty=Tensor[(11, 5, 5), bool] */
}

def @func_5915(%var_5901: uint64) -> (Tensor[(275, 1), float64], uint64, Tensor[(3, 40), int32], uint64, float64) {
  %377 = @func_5551() /* ty=Tensor[(275, 1), float64] */;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(275, 1), float64] */;
  %379 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 40), int32] */, dtype="int32") /* ty=Tensor[(3, 40), int32] */;
  %380 = cast(%var_5901, dtype="uint64") /* ty=uint64 */;
  %381 = reshape(%379, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int32] */;
  %382 = reshape(%380, newshape=[]) /* ty=uint64 */;
  %383 = @func_761(%381, %382) /* ty=(Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) */;
  %384 = @func_5646() /* ty=(float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) */;
  %385 = cos(%378) /* ty=Tensor[(275, 1), float64] */;
  %386 = %383.2;
  %387 = %384.0;
  (%385, %386, meta[relay.Constant][32] /* ty=Tensor[(3, 40), int32] */, %var_5901, %387)
}

def @func_4442(%var_4367: Tensor[(8, 4, 2), float32], %var_4368: Tensor[(8, 4, 2), float32]) -> (Tensor[(8, 4, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(546, 1), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), int16], Tensor[(2, 5, ?), bool]) {
  %388 = cast(%var_4368, dtype="float32") /* ty=Tensor[(8, 4, 2), float32] */;
  %389 = shape_of(%var_4367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%var_4367, dtype="float32") /* ty=Tensor[(8, 4, 2), float32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %392 = cast(meta[relay.Constant][33] /* ty=Tensor[(546, 1), float32] */, dtype="float32") /* ty=Tensor[(546, 1), float32] */;
  %393 = reshape(%392, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), float32] */;
  %394 = @func_3222(%393) /* ty=(Tensor[(6, 7, 13), float32],) */;
  %395 = cast(meta[relay.Constant][34] /* ty=Tensor[(1568), int16] */, dtype="int16") /* ty=Tensor[(1568), int16] */;
  %396 = cast(meta[relay.Constant][34] /* ty=Tensor[(1568), int16] */, dtype="int16") /* ty=Tensor[(1568), int16] */;
  %397 = reshape(%395, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), int16] */;
  %398 = reshape(%396, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), int16] */;
  %399 = @func_4317() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %400 = %399.0;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(2, 5, ?), float32] */;
  %402 = acosh(%401) /* ty=Tensor[(2, 5, ?), float32] */;
  %403 = cast(%400, dtype="bool") /* ty=Tensor[(2, 5, ?), bool] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="bool") /* ty=Tensor[(2, 5, ?), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %407 = divide(%390, %391) /* ty=Tensor[(8, 4, 2), float32] */;
  %408 = %394.0;
  %409 = @func_1965(%397, %398) /* ty=Tensor[(14, 14, 8), bool] */;
  %410 = logical_and(%405, %406) /* ty=Tensor[(2, 5, ?), bool] */;
  (%407, %408, meta[relay.Constant][33] /* ty=Tensor[(546, 1), float32] */, %409, meta[relay.Constant][34] /* ty=Tensor[(1568), int16] */, %410)
}

def @func_4567() -> (Tensor[(4, 12, 13), bool],) {
  %411 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 12, 13), uint64] */, dtype="bool") /* ty=Tensor[(4, 12, 13), bool] */;
  %412 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(4, 12, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 12, 13), uint64] */, dtype="bool") /* ty=Tensor[(4, 12, 13), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %415 = greater_equal(%413, %414) /* ty=Tensor[(4, 12, 13), bool] */;
  (%415,)
}

def @func_5707(%var_5693: Tensor[(275), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], Tensor[(275), float64], Tensor[(3, 6, 14), uint64], Tensor[(120), int32], uint64) {
  %416 = @func_4317() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %417 = cast(%var_5693, dtype="float64") /* ty=Tensor[(275), float64] */;
  %418 = reshape(%417, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float64] */;
  %419 = cast(meta[relay.Constant][37] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %420 = cast(meta[relay.Constant][38] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %421 = reshape(%419, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int32] */;
  %422 = reshape(%420, newshape=[]) /* ty=uint64 */;
  %423 = @func_761(%421, %422) /* ty=(Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) */;
  %424 = %416.0;
  %425 = @func_1142(%418) /* ty=Tensor[(11, 5, 5), float64] */;
  %426 = %423.1;
  (%424, %425, %var_5693, %426, meta[relay.Constant][37] /* ty=Tensor[(120), int32] */, meta[relay.Constant][38] /* ty=uint64 */)
}

def @func_761(%var_737: Tensor[(10, 3, 4), int32], %var_743: uint64) -> (Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) {
  %427 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 3, 4), int32] */, dtype="int32") /* ty=Tensor[(10, 3, 4), int32] */;
  %428 = shape_of(%var_737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_737, dtype="int32") /* ty=Tensor[(10, 3, 4), int32] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %431 = cast(%var_743, dtype="uint64") /* ty=uint64 */;
  %432 = reshape(%431, newshape=[]) /* ty=uint64 */;
  %433 = @func_492(%432) /* ty=(Tensor[(3, 6, 14), uint64],) */;
  %434 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 3, 4), int32] */, dtype="float32") /* ty=Tensor[(10, 3, 4), float32] */;
  %435 = maximum(%429, %430) /* ty=Tensor[(10, 3, 4), int32] */;
  %436 = %433.0;
  %437 = acosh(%434) /* ty=Tensor[(10, 3, 4), float32] */;
  (%435, %436, %var_743, %437)
}

def @func_7162(%var_7154: Tensor[(63), int16]) -> (Tensor[(4, 12, 13), float64], Tensor[(3, 6, 14), uint64], Tensor[(26), float64], Tensor[(273), int32], Tensor[(4, 208), float64], Tensor[(63), int16], float64, uint64) {
  %438 = @func_6661() /* ty=(Tensor[(4, 12, 13), float64],) */;
  %439 = cast(meta[relay.Constant][40] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %440 = cast(meta[relay.Constant][41] /* ty=Tensor[(273), int32] */, dtype="int32") /* ty=Tensor[(273), int32] */;
  %441 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 208), float64] */, dtype="float64") /* ty=Tensor[(4, 208), float64] */;
  %442 = cast(%var_7154, dtype="int16") /* ty=Tensor[(63), int16] */;
  %443 = reshape(%439, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %444 = reshape(%440, newshape=[273]) /* ty=Tensor[(273), int32] */;
  %445 = reshape(%441, newshape=[832]) /* ty=Tensor[(832), float64] */;
  %446 = reshape(%442, newshape=[63]) /* ty=Tensor[(63), int16] */;
  %447 = @func_4676(%443, %444, %445, %446) /* ty=(Tensor[(3, 6, 14), uint64], Tensor[(90, 1), int32], Tensor[(1170), int32], Tensor[(26), float64], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), int32], Tensor[(120), int32], uint64, Tensor[(11, 5, 5), float64], Tensor[(16, 16, 12), float64], Tensor[(3072), float64], Tensor[(3, 3, 7), bool], Tensor[(63), int16]) */;
  %448 = cast(meta[relay.Constant][43] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %449 = reshape(%448, newshape=[]) /* ty=uint64 */;
  %450 = @func_5915(%449) /* ty=(Tensor[(275, 1), float64], uint64, Tensor[(3, 40), int32], uint64, float64) */;
  %451 = %438.0;
  %452 = %447.0;
  %453 = %450.4;
  (%451, %452, meta[relay.Constant][40] /* ty=Tensor[(26), float64] */, meta[relay.Constant][41] /* ty=Tensor[(273), int32] */, meta[relay.Constant][42] /* ty=Tensor[(4, 208), float64] */, %var_7154, %453, meta[relay.Constant][43] /* ty=uint64 */)
}

def @func_4317() -> (Tensor[(2, 5, ?), float64],) {
  %454 = @func_4250() /* ty=Tensor[(2, 5, ?), float64] */;
  (%454,)
}

def @func_7014(%var_6992: Tensor[(2, 5, 13), float64]) -> (Tensor[(2, 5, 13), int64], Tensor[(7, 13, 3), bool]) {
  %455 = @func_6376() /* ty=Tensor[(2, 5, ?), float64] */;
  %456 = cast(%455, dtype="int64") /* ty=Tensor[(2, 5, ?), int64] */;
  %457 = cast(%var_6992, dtype="int64") /* ty=Tensor[(2, 5, 13), int64] */;
  %458 = @func_5646() /* ty=(float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) */;
  %459 = multiply(%456, %457) /* ty=Tensor[(2, 5, 13), int64] */;
  %460 = %458.1;
  (%459, %460)
}

def @func_6628(%var_6528: Tensor[(11, 5, 5), float32], %var_6569: Tensor[(288), bool], %var_6590: Tensor[(7, 9), int16]) -> (Tensor[(11, 5, 5), uint64], Tensor[(7, 10, 10), uint32], float64, Tensor[(11, 5, 5), float32], Tensor[(288), bool], Tensor[(11, 5, 5), float32], Tensor[(3, 16, 6), float32], Tensor[(2, 5, ?), float64], Tensor[(78), float32], Tensor[(7, 9), int16], Tensor[(11, 15, 2), float32], Tensor[(330), int16]) {
  %461 = @func_4821() /* ty=Tensor[(11, 5, 5), float32] */;
  %462 = cast(%var_6528, dtype="uint64") /* ty=Tensor[(11, 5, 5), uint64] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="uint64") /* ty=Tensor[(11, 5, 5), uint64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %466 = @func_5785() /* ty=(Tensor[(7, 10, 10), uint32],) */;
  %467 = @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */;
  %468 = cast(%461, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %469 = cast(%var_6569, dtype="bool") /* ty=Tensor[(288), bool] */;
  %470 = reshape(%469, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %471 = @func_2639(%470) /* ty=(Tensor[(3, 16, 6), bool],) */;
  %472 = %471.0;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %474 = cast(meta[relay.Constant][44] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %475 = %467.2;
  %476 = cast(%475, dtype="uint64") /* ty=uint64 */;
  %477 = cast(%var_6590, dtype="int16") /* ty=Tensor[(7, 9), int16] */;
  %478 = reshape(%474, newshape=[26, 3]) /* ty=Tensor[(26, 3), float32] */;
  %479 = reshape(%476, newshape=[]) /* ty=uint64 */;
  %480 = reshape(%477, newshape=[63]) /* ty=Tensor[(63), int16] */;
  %481 = @func_5327(%478, %479, %480) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(26), float64], Tensor[(26, 3), float32], uint64, Tensor[(63), int16], Tensor[(16, 16, 12), float64], Tensor[(3072), float64]) */;
  %482 = cast(meta[relay.Constant][45] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %483 = reshape(%482, newshape=[11, 15, 2]) /* ty=Tensor[(11, 15, 2), int16] */;
  %484 = @func_3831(%483) /* ty=(Tensor[(11, 15, 2), int16], Tensor[(11, 15, 2), float32]) */;
  %485 = maximum(%464, %465) /* ty=Tensor[(11, 5, 5), uint64] */;
  %486 = %466.0;
  %487 = @func_6442() /* ty=Tensor[(11, 5, 5), float32] */;
  %488 = sigmoid(%468) /* ty=Tensor[(11, 5, 5), float32] */;
  %489 = atan(%473) /* ty=Tensor[(3, 16, 6), float32] */;
  %490 = %481.0;
  %491 = %484.1;
  (%485, %486, %475, %487, %var_6569, %488, %489, %490, meta[relay.Constant][44] /* ty=Tensor[(78), float32] */, %var_6590, %491, meta[relay.Constant][45] /* ty=Tensor[(330), int16] */)
}

def @func_8665(%var_8650: Tensor[(15, 2, 3), float32]) -> (Tensor[(15, 2, 3), float32], Tensor[(11, 5, 5), float64], Tensor[(275), float64]) {
  %492 = cast(%var_8650, dtype="float32") /* ty=Tensor[(15, 2, 3), float32] */;
  %493 = cast(meta[relay.Constant][46] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %494 = reshape(%493, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float64] */;
  %495 = log10(%492) /* ty=Tensor[(15, 2, 3), float32] */;
  %496 = @func_1142(%494) /* ty=Tensor[(11, 5, 5), float64] */;
  (%495, %496, meta[relay.Constant][46] /* ty=Tensor[(275), float64] */)
}

def @func_5785() -> (Tensor[(7, 10, 10), uint32],) {
  %497 = @func_5749() /* ty=(Tensor[(7, 10, 10), uint32],) */;
  %498 = %497.0;
  (%498,)
}

def @func_4364() -> (Tensor[(275, 1), float32], Tensor[(275, 1), float32], Tensor[(2, 5, ?), float64]) {
  %499 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %500 = %499.4;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(275, 1), float32] */;
  %502 = cast(%500, dtype="float32") /* ty=Tensor[(275, 1), float32] */;
  %503 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %504 = sqrt(%501) /* ty=Tensor[(275, 1), float32] */;
  %505 = sin(%502) /* ty=Tensor[(275, 1), float32] */;
  %506 = %503.0;
  (%504, %505, %506)
}

def @func_3675(%var_3659: Tensor[(16, 4, 13), float64]) -> Tensor[(16, 4, 13), float64] {
  %507 = cast(%var_3659, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
  atanh(%507) /* ty=Tensor[(16, 4, 13), float64] */
}

def @func_1142(%var_1135: Tensor[(11, 5, 5), float64]) -> Tensor[(11, 5, 5), float64] {
  %508 = cast(%var_1135, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
  log(%508) /* ty=Tensor[(11, 5, 5), float64] */
}

def @func_4291(%var_4280: Tensor[(273, 1), int32]) -> (Tensor[(2, 5, ?), float64], Tensor[(7, 13, 3), bool], Tensor[(273, 1), int32]) {
  %509 = @func_4250() /* ty=Tensor[(2, 5, ?), float64] */;
  %510 = cast(%509, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  %511 = cast(%var_4280, dtype="int32") /* ty=Tensor[(273, 1), int32] */;
  %512 = cast(%var_4280, dtype="int32") /* ty=Tensor[(273, 1), int32] */;
  %513 = reshape(%511, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %514 = reshape(%512, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %515 = @func_3977(%513, %514) /* ty=(Tensor[(7, 13, 3), bool],) */;
  %516 = asinh(%510) /* ty=Tensor[(2, 5, ?), float64] */;
  %517 = %515.0;
  (%516, %517, %var_4280)
}

def @func_7752(%var_7735: Tensor[(4, 12, 13), float64]) -> (Tensor[(4, 12, 13), uint16], Tensor[(4, 12, 13), uint32]) {
  %518 = @func_6009() /* ty=Tensor[(4, 12, 13), float64] */;
  %519 = cast(%var_7735, dtype="uint16") /* ty=Tensor[(4, 12, 13), uint16] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="uint16") /* ty=Tensor[(4, 12, 13), uint16] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %523 = cast(%var_7735, dtype="uint32") /* ty=Tensor[(4, 12, 13), uint32] */;
  %524 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%518, dtype="uint32") /* ty=Tensor[(4, 12, 13), uint32] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %527 = bitwise_and(%521, %522) /* ty=Tensor[(4, 12, 13), uint16] */;
  %528 = multiply(%525, %526) /* ty=Tensor[(4, 12, 13), uint32] */;
  (%527, %528)
}

def @func_6442() -> Tensor[(11, 5, 5), float32] {
  @func_4821() /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_5834(%var_5813: Tensor[(26), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(26), bool], Tensor[(1320), uint32], Tensor[(26), float64], Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), bool]) {
  %529 = cast(meta[relay.Constant][47] /* ty=Tensor[(1320), uint32] */, dtype="uint32") /* ty=Tensor[(1320), uint32] */;
  %530 = cast(%var_5813, dtype="float64") /* ty=Tensor[(26), float64] */;
  %531 = reshape(%529, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), uint32] */;
  %532 = reshape(%530, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %533 = @func_988(%531, %532) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(3, 6, 14), uint64], Tensor[(26), bool], Tensor[(2, 13, 1), float64]) */;
  %534 = @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */;
  %535 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
  %536 = @func_5773() /* ty=Tensor[(2, 5, ?), float64] */;
  %537 = %533.2;
  %538 = %534.0;
  %539 = %535.0;
  (%536, %537, meta[relay.Constant][47] /* ty=Tensor[(1320), uint32] */, %var_5813, %538, %539)
}

def @func_6781() -> float64 {
  %540 = @func_4542() /* ty=(float64,) */;
  %540.0
}

def @func_8100() -> (Tensor[(275, 1), float32],) {
  %541 = @func_4364() /* ty=(Tensor[(275, 1), float32], Tensor[(275, 1), float32], Tensor[(2, 5, ?), float64]) */;
  %542 = %541.0;
  (%542,)
}

def @func_6376() -> Tensor[(2, 5, ?), float64] {
  @func_5476() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_4851(%var_4831: float64, %var_4832: Tensor[(26), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(2, 13, 1), float64], float64, Tensor[(26), float64], float64) {
  %543 = @func_4317() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %544 = cast(%var_4831, dtype="float64") /* ty=float64 */;
  %545 = cast(%var_4832, dtype="float64") /* ty=Tensor[(26), float64] */;
  %546 = reshape(%544, newshape=[]) /* ty=float64 */;
  %547 = reshape(%545, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
  %548 = @func_4542() /* ty=(float64,) */;
  %549 = %543.0;
  %550 = @func_418(%546, %547) /* ty=Tensor[(2, 13, 1), float64] */;
  %551 = %548.0;
  (%549, %550, %var_4831, %var_4832, %551)
}

def @func_8711(%var_8696: Tensor[(1, 11, 13), float32]) -> (Tensor[(5, 11, 13), float32], Tensor[(4, 12, 13), float64]) {
  %552 = cast(%var_8696, dtype="float32") /* ty=Tensor[(1, 11, 13), float32] */;
  %553 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
  %554 = minimum(%552, %553) /* ty=Tensor[(5, 11, 13), float32] */;
  %555 = @func_6009() /* ty=Tensor[(4, 12, 13), float64] */;
  (%554, %555)
}

def @func_492(%var_480: uint64) -> (Tensor[(3, 6, 14), uint64],) {
  %556 = cast(%var_480, dtype="uint64") /* ty=uint64 */;
  %557 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 6, 14), uint64] */, dtype="uint64") /* ty=Tensor[(3, 6, 14), uint64] */;
  %558 = bitwise_xor(%556, %557) /* ty=Tensor[(3, 6, 14), uint64] */;
  (%558,)
}

def @func_2639(%var_2630: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), bool],) {
  %559 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 16, 6), bool] */, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %560 = shape_of(%var_2630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%var_2630, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %563 = logical_or(%561, %562) /* ty=Tensor[(3, 16, 6), bool] */;
  (%563,)
}

def @func_6475() -> (Tensor[(11, 5, 5), float32],) {
  %564 = @func_6321() /* ty=(float64, Tensor[(11, 5, 5), float32]) */;
  %565 = %564.1;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %567 = tan(%566) /* ty=Tensor[(11, 5, 5), float32] */;
  (%567,)
}

def @func_5358(%var_5353: Tensor[(13, 15, 6), float64]) -> Tensor[(13, 15, 6), bool] {
  %568 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %569 = %568.2;
  %570 = cast(%569, dtype="bool") /* ty=bool */;
  %571 = cast(%var_5353, dtype="bool") /* ty=Tensor[(13, 15, 6), bool] */;
  less(%570, %571) /* ty=Tensor[(13, 15, 6), bool] */
}

def @func_6646() -> Tensor[(2, 5, ?), float64] {
  @func_5476() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_5773() -> Tensor[(2, 5, ?), float64] {
  %572 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %572.0
}

def @func_4676(%var_4583: Tensor[(26), float64], %var_4590: Tensor[(273), int32], %var_4600: Tensor[(832), float64], %var_4662: Tensor[(63), int16]) -> (Tensor[(3, 6, 14), uint64], Tensor[(90, 1), int32], Tensor[(1170), int32], Tensor[(26), float64], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), int32], Tensor[(120), int32], uint64, Tensor[(11, 5, 5), float64], Tensor[(16, 16, 12), float64], Tensor[(3072), float64], Tensor[(3, 3, 7), bool], Tensor[(63), int16]) {
  %573 = cast(meta[relay.Constant][51] /* ty=Tensor[(90, 1), int32] */, dtype="int32") /* ty=Tensor[(90, 1), int32] */;
  %574 = cast(meta[relay.Constant][52] /* ty=Tensor[(1170), int32] */, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %575 = cast(%var_4583, dtype="float64") /* ty=Tensor[(26), float64] */;
  %576 = reshape(%573, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %577 = reshape(%574, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), int32] */;
  %578 = reshape(%575, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %579 = @func_2375(%576, %577, %578) /* ty=(Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %580 = cast(%var_4590, dtype="int32") /* ty=Tensor[(273), int32] */;
  %581 = cast(%var_4590, dtype="int32") /* ty=Tensor[(273), int32] */;
  %582 = reshape(%580, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %583 = reshape(%581, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %584 = @func_3977(%582, %583) /* ty=(Tensor[(7, 13, 3), bool],) */;
  %585 = cast(%var_4600, dtype="float64") /* ty=Tensor[(832), float64] */;
  %586 = cast(%var_4600, dtype="float64") /* ty=Tensor[(832), float64] */;
  %587 = reshape(%585, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %588 = reshape(%586, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %589 = @func_3244(%587, %588) /* ty=(Tensor[(8, 8, 13), float64],) */;
  %590 = cast(meta[relay.Constant][53] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %591 = cast(meta[relay.Constant][54] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %592 = reshape(%590, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int32] */;
  %593 = reshape(%591, newshape=[]) /* ty=uint64 */;
  %594 = @func_761(%592, %593) /* ty=(Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) */;
  %595 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %596 = %595.1;
  %597 = cast(%596, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %598 = cosh(%597) /* ty=Tensor[(11, 5, 5), float32] */;
  %599 = cast(meta[relay.Constant][55] /* ty=Tensor[(11, 5, 5), float32] */, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
  %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%598, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %603 = greater(%601, %602) /* ty=Tensor[(11, 5, 5), bool] */;
  %604 = cast(%603, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
  %605 = atanh(%604) /* ty=Tensor[(11, 5, 5), float64] */;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
  %607 = cast(meta[relay.Constant][54] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %608 = cast(meta[relay.Constant][56] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %609 = cast(%var_4583, dtype="float64") /* ty=Tensor[(26), float64] */;
  %610 = reshape(%607, newshape=[]) /* ty=float64 */;
  %611 = reshape(%608, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), float64] */;
  %612 = reshape(%609, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %613 = @func_2531(%610, %611, %612) /* ty=(Tensor[(16, 16, 12), float64], Tensor[(26), float64], Tensor[(90), int32], Tensor[(5, 234), int32], Tensor[(26), float64]) */;
  %614 = cast(meta[relay.Constant][54] /* ty=uint64 */, dtype="int16") /* ty=int16 */;
  %615 = cast(%var_4662, dtype="int16") /* ty=Tensor[(63), int16] */;
  %616 = cast(%var_4583, dtype="float64") /* ty=Tensor[(26), float64] */;
  %617 = reshape(%614, newshape=[]) /* ty=int16 */;
  %618 = reshape(%615, newshape=[3, 3, 7]) /* ty=Tensor[(3, 3, 7), int16] */;
  %619 = reshape(%616, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %620 = @func_443(%617, %618, %619) /* ty=(Tensor[(3, 3, 7), bool], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %621 = %579.1;
  %622 = %584.0;
  %623 = %589.0;
  %624 = %594.0;
  %625 = sinh(%606) /* ty=Tensor[(11, 5, 5), float64] */;
  %626 = %613.0;
  %627 = %620.0;
  (%621, meta[relay.Constant][51] /* ty=Tensor[(90, 1), int32] */, meta[relay.Constant][52] /* ty=Tensor[(1170), int32] */, %var_4583, %622, %var_4590, %623, %var_4600, %624, meta[relay.Constant][53] /* ty=Tensor[(120), int32] */, meta[relay.Constant][54] /* ty=uint64 */, %625, %626, meta[relay.Constant][56] /* ty=Tensor[(3072), float64] */, %627, %var_4662)
}

def @func_6504() -> (float64,) {
  %628 = @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */;
  %629 = %628.3;
  (%629,)
}

def @func_7255(%var_7238: Tensor[(7, 13, 3), bool]) -> (Tensor[(7, 13, 3), float32], Tensor[(7, 13, 3), float32]) {
  %630 = @func_5646() /* ty=(float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) */;
  %631 = %630.1;
  %632 = cast(%var_7238, dtype="float32") /* ty=Tensor[(7, 13, 3), float32] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="float32") /* ty=Tensor[(7, 13, 3), float32] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %636 = cast(%var_7238, dtype="float32") /* ty=Tensor[(7, 13, 3), float32] */;
  %637 = divide(%634, %635) /* ty=Tensor[(7, 13, 3), float32] */;
  %638 = log2(%636) /* ty=Tensor[(7, 13, 3), float32] */;
  (%637, %638)
}

def @func_988(%var_917: Tensor[(8, 15, 11), uint32], %var_949: Tensor[(26), float64]) -> (Tensor[(8, 15, 11), bool], Tensor[(3, 6, 14), uint64], Tensor[(26), bool], Tensor[(2, 13, 1), float64]) {
  %639 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 15, 11), uint32] */, dtype="bool") /* ty=Tensor[(1, 15, 11), bool] */;
  %640 = cast(%var_917, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
  %641 = cast(meta[relay.Constant][58] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %642 = reshape(%641, newshape=[]) /* ty=uint64 */;
  %643 = @func_492(%642) /* ty=(Tensor[(3, 6, 14), uint64],) */;
  %644 = cast(%var_949, dtype="bool") /* ty=Tensor[(26), bool] */;
  %645 = cast(meta[relay.Constant][58] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %646 = greater(%644, %645) /* ty=Tensor[(26), bool] */;
  %647 = cast(meta[relay.Constant][58] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %648 = cast(%var_949, dtype="float64") /* ty=Tensor[(26), float64] */;
  %649 = reshape(%647, newshape=[]) /* ty=float64 */;
  %650 = reshape(%648, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
  %651 = @func_418(%649, %650) /* ty=Tensor[(2, 13, 1), float64] */;
  %652 = cast(%651, dtype="bool") /* ty=Tensor[(2, 13, 1), bool] */;
  %653 = cast(meta[relay.Constant][58] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %654 = logical_or(%652, %653) /* ty=Tensor[(2, 13, 1), bool] */;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(2, 13, 1), float64] */;
  %656 = atanh(%655) /* ty=Tensor[(2, 13, 1), float64] */;
  %657 = cast(%656, dtype="bool") /* ty=Tensor[(2, 13, 1), bool] */;
  %658 = shape_of(%646, dtype="int32") /* ty=Tensor[(1), int32] */;
  %659 = cast(%646, dtype="bool") /* ty=Tensor[(26), bool] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?), bool] */;
  %661 = cast(meta[relay.Constant][58] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %662 = cast(%654, dtype="float64") /* ty=Tensor[(2, 13, 1), float64] */;
  %663 = reshape(%661, newshape=[]) /* ty=float64 */;
  %664 = reshape(%662, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
  %665 = less_equal(%639, %640) /* ty=Tensor[(8, 15, 11), bool] */;
  %666 = %643.0;
  %667 = equal(%659, %660) /* ty=Tensor[(26), bool] */;
  %668 = @func_418(%663, %664) /* ty=Tensor[(2, 13, 1), float64] */;
  (%665, %666, %667, %668)
}

def @func_7687() -> (Tensor[(11, 5, 5), uint32], Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float32]) {
  %669 = @func_6205() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(7, 10, 10), uint32]) */;
  %670 = %669.0;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %672 = exp(%671) /* ty=Tensor[(11, 5, 5), float32] */;
  %673 = cast(%670, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
  %674 = cos(%673) /* ty=Tensor[(11, 5, 5), float64] */;
  %675 = cast(%674, dtype="uint32") /* ty=Tensor[(11, 5, 5), uint32] */;
  %676 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%672, dtype="uint32") /* ty=Tensor[(11, 5, 5), uint32] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %679 = cast(%670, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %680 = minimum(%677, %678) /* ty=Tensor[(11, 5, 5), uint32] */;
  %681 = @func_6646() /* ty=Tensor[(2, 5, ?), float64] */;
  %682 = sin(%679) /* ty=Tensor[(11, 5, 5), float32] */;
  (%680, %681, %682)
}

def @func_418(%var_412: float64, %var_413: Tensor[(2, 13, 1), float64]) -> Tensor[(2, 13, 1), float64] {
  %683 = cast(%var_412, dtype="float64") /* ty=float64 */;
  %684 = cast(%var_413, dtype="float64") /* ty=Tensor[(2, 13, 1), float64] */;
  floor_divide(%683, %684) /* ty=Tensor[(2, 13, 1), float64] */
}

def @func_5653() -> (Tensor[(275, 1), float64],) {
  %685 = @func_5551() /* ty=Tensor[(275, 1), float64] */;
  (%685,)
}

def @func_5749() -> (Tensor[(7, 10, 10), uint32],) {
  %686 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %687 = cast(meta[relay.Constant][59] /* ty=Tensor[(7, 10, 10), bool] */, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %688 = logical_or(%686, %687) /* ty=Tensor[(7, 10, 10), bool] */;
  %689 = cast(%688, dtype="uint32") /* ty=Tensor[(7, 10, 10), uint32] */;
  %690 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(7, 10, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(meta[relay.Constant][59] /* ty=Tensor[(7, 10, 10), bool] */, dtype="uint32") /* ty=Tensor[(7, 10, 10), uint32] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %693 = add(%691, %692) /* ty=Tensor[(7, 10, 10), uint32] */;
  (%693,)
}

def @func_5974(%var_5953: Tensor[(7, 78), float32]) -> (float64, Tensor[(6, 7, 13), float32], Tensor[(7, 78), uint8]) {
  %694 = @func_4542() /* ty=(float64,) */;
  %695 = cast(meta[relay.Constant][60] /* ty=Tensor[(7, 78), float32] */, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %696 = reshape(%695, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), float32] */;
  %697 = @func_3222(%696) /* ty=(Tensor[(6, 7, 13), float32],) */;
  %698 = cast(%var_5953, dtype="uint8") /* ty=Tensor[(7, 78), uint8] */;
  %699 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(7, 78), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %700 = cast(meta[relay.Constant][60] /* ty=Tensor[(7, 78), float32] */, dtype="uint8") /* ty=Tensor[(7, 78), uint8] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %702 = %694.0;
  %703 = %697.0;
  %704 = logical_xor(%700, %701) /* ty=Tensor[(7, 78), uint8] */;
  (%702, %703, %704)
}

def @func_7192() -> Tensor[(7, 16, 13), float64] {
  %705 = cast(meta[relay.Constant][61] /* ty=Tensor[(7, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 13), float64] */;
  erf(%705) /* ty=Tensor[(7, 16, 13), float64] */
}

def @func_3222(%var_3208: Tensor[(6, 7, 13), float32]) -> (Tensor[(6, 7, 13), float32],) {
  %706 = cast(%var_3208, dtype="float32") /* ty=Tensor[(6, 7, 13), float32] */;
  %707 = log10(%706) /* ty=Tensor[(6, 7, 13), float32] */;
  (%707,)
}

def @func_8159() -> (Tensor[(7, 10, 10), float64], Tensor[(3, 6, 14), uint64], Tensor[(1320), uint32], Tensor[(26), float64]) {
  %708 = @func_6218() /* ty=Tensor[(7, 10, 10), float32] */;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(7, 10, 10), float64] */;
  %710 = cast(meta[relay.Constant][62] /* ty=Tensor[(1320), uint32] */, dtype="uint32") /* ty=Tensor[(1320), uint32] */;
  %711 = cast(meta[relay.Constant][63] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %712 = reshape(%710, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), uint32] */;
  %713 = reshape(%711, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %714 = @func_988(%712, %713) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(3, 6, 14), uint64], Tensor[(26), bool], Tensor[(2, 13, 1), float64]) */;
  %715 = acosh(%709) /* ty=Tensor[(7, 10, 10), float64] */;
  %716 = %714.1;
  (%715, %716, meta[relay.Constant][62] /* ty=Tensor[(1320), uint32] */, meta[relay.Constant][63] /* ty=Tensor[(26), float64] */)
}

def @func_3505(%var_3482: float64, %var_3483: Tensor[(9, 7, 1), float64], %var_3495: Tensor[(275), float64]) -> (Tensor[(11, 5, 5), float64], Tensor[(275), float64], Tensor[(9, 7, ?), uint64]) {
  %717 = cast(%var_3495, dtype="float64") /* ty=Tensor[(275), float64] */;
  %718 = reshape(%717, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float64] */;
  %719 = cast(%var_3482, dtype="float64") /* ty=float64 */;
  %720 = cast(%var_3483, dtype="float64") /* ty=Tensor[(9, 7, 1), float64] */;
  %721 = multiply(%719, %720) /* ty=Tensor[(9, 7, 1), float64] */;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(9, 7, 1), float64] */;
  %723 = exp(%722) /* ty=Tensor[(9, 7, 1), float64] */;
  %724 = cast(%var_3483, dtype="uint64") /* ty=Tensor[(9, 7, 1), uint64] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%723, dtype="uint64") /* ty=Tensor[(9, 7, 1), uint64] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %728 = @func_1142(%718) /* ty=Tensor[(11, 5, 5), float64] */;
  %729 = left_shift(%726, %727) /* ty=Tensor[(9, 7, ?), uint64] */;
  (%728, %var_3495, %729)
}

def @func_8586(%var_8498: Tensor[(90), int32], %var_8499: Tensor[(1170), int32], %var_8500: Tensor[(26), float64], %var_8568: Tensor[(130), float64]) -> (Tensor[(275, 1), float32], Tensor[(15, 13, 6), uint64], Tensor[(90), int32], Tensor[(1170), int32], float64, Tensor[(2, 5, 26), int16], Tensor[(2, 5, ?), float32], Tensor[(7, 13, 3), bool], Tensor[(130), float64], Tensor[(2, 5, ?), float64], Tensor[(7, 10, 10), float32]) {
  %730 = @func_8402() /* ty=(Tensor[(275, 1), float32],) */;
  %731 = cast(%var_8498, dtype="int32") /* ty=Tensor[(90), int32] */;
  %732 = cast(%var_8499, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %733 = cast(%var_8500, dtype="float64") /* ty=Tensor[(26), float64] */;
  %734 = reshape(%731, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %735 = reshape(%732, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), int32] */;
  %736 = reshape(%733, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %737 = @func_2375(%734, %735, %736) /* ty=(Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %738 = @func_8231() /* ty=(float64,) */;
  %739 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %740 = %739.0;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  %742 = sqrt(%741) /* ty=Tensor[(2, 5, ?), float64] */;
  %743 = cast(%742, dtype="int16") /* ty=Tensor[(2, 5, ?), int16] */;
  %744 = cast(%var_8500, dtype="int16") /* ty=Tensor[(26), int16] */;
  %745 = cast(%742, dtype="float32") /* ty=Tensor[(2, 5, ?), float32] */;
  %746 = cast(%var_8568, dtype="float64") /* ty=Tensor[(130), float64] */;
  %747 = reshape(%746, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), float64] */;
  %748 = @func_7014(%747) /* ty=(Tensor[(2, 5, 13), int64], Tensor[(7, 13, 3), bool]) */;
  %749 = cast(%740, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  %750 = %730.0;
  %751 = %737.3;
  %752 = %738.0;
  %753 = right_shift(%743, %744) /* ty=Tensor[(2, 5, 26), int16] */;
  %754 = cos(%745) /* ty=Tensor[(2, 5, ?), float32] */;
  %755 = %748.1;
  %756 = cosh(%749) /* ty=Tensor[(2, 5, ?), float64] */;
  %757 = @func_6218() /* ty=Tensor[(7, 10, 10), float32] */;
  (%750, %751, %var_8498, %var_8499, %752, %753, %754, %755, %var_8568, %756, %757)
}

def @func_6661() -> (Tensor[(4, 12, 13), float64],) {
  %758 = @func_6009() /* ty=Tensor[(4, 12, 13), float64] */;
  (%758,)
}

def @func_6699(%var_6689: Tensor[(7, 10, 10), float32]) -> Tensor[(7, 10, 10), bool] {
  %759 = @func_6218() /* ty=Tensor[(7, 10, 10), float32] */;
  %760 = cast(%var_6689, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%759, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%762, %763) /* ty=Tensor[(7, 10, 10), bool] */
}

def @func_8007() -> (float64, Tensor[(2, 13, ?), float64]) {
  %764 = @func_4542() /* ty=(float64,) */;
  %765 = %764.0;
  %766 = cast(%765, dtype="float64") /* ty=float64 */;
  %767 = cast(meta[relay.Constant][64] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %768 = reshape(%766, newshape=[]) /* ty=float64 */;
  %769 = reshape(%767, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
  %770 = @func_418(%768, %769) /* ty=Tensor[(2, 13, 1), float64] */;
  %771 = cast(meta[relay.Constant][64] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="float64") /* ty=Tensor[(2, 13, 1), float64] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %775 = power(%773, %774) /* ty=Tensor[(2, 13, ?), float64] */;
  (%765, %775)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8450() -> (Tensor[(11, 5, 5), float32],) {
  %0 = @func_6442() /* ty=Tensor[(11, 5, 5), float32] */;
  (%0,)
}

def @func_7940(%var_7938: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 2, 2), float64],) {
  @func_7937(%var_7938) /* ty=(Tensor[(3, 2, 2), float64],) */
}

def @func_6393() -> Tensor[(2, 5, ?), float64] {
  @func_6391() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_8711(%var_8696: Tensor[(1, 11, 13), float32]) -> (Tensor[(5, 11, 13), float32], Tensor[(4, 12, 13), float64]) {
  %1 = cast(%var_8696, dtype="float32") /* ty=Tensor[(1, 11, 13), float32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 13), float32] */;
  %3 = minimum(%1, %2) /* ty=Tensor[(5, 11, 13), float32] */;
  %4 = @func_6009() /* ty=Tensor[(4, 12, 13), float64] */;
  (%3, %4)
}

def @func_494(%var_493: uint64) -> (Tensor[(3, 6, 14), uint64],) {
  %8 = fn (%var_480: uint64) -> (Tensor[(3, 6, 14), uint64],) {
    %5 = cast(%var_480, dtype="uint64") /* ty=uint64 */;
    %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 6, 14), uint64] */, dtype="uint64") /* ty=Tensor[(3, 6, 14), uint64] */;
    %7 = bitwise_xor(%5, %6) /* ty=Tensor[(3, 6, 14), uint64] */;
    (%7,)
  };
  %8(%var_493) /* ty=(Tensor[(3, 6, 14), uint64],) */
}

def @func_7516() -> Tensor[(11, 5, 5), float64] {
  %9 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %9.1
}

def @func_421(%var_419: float64, %var_420: Tensor[(2, 13, 1), float64]) -> Tensor[(2, 13, 1), float64] {
  %12 = fn (%var_412: float64, %var_413: Tensor[(2, 13, 1), float64]) -> Tensor[(2, 13, 1), float64] {
    %10 = cast(%var_412, dtype="float64") /* ty=float64 */;
    %11 = cast(%var_413, dtype="float64") /* ty=Tensor[(2, 13, 1), float64] */;
    floor_divide(%10, %11) /* ty=Tensor[(2, 13, 1), float64] */
  };
  %12(%var_419, %var_420) /* ty=Tensor[(2, 13, 1), float64] */
}

def @func_5033(%var_5004: Tensor[(480), float32], %var_5006: Tensor[(63), int16]) -> (Tensor[(5, 4, 13), uint64], Tensor[(144, 2), bool], Tensor[(480), float32], Tensor[(14, 5), float64], Tensor[(63), int16], Tensor[(7, 13, 3), bool], Tensor[(1, 273), int32], Tensor[(4, 12, 13), bool]) {
  %13 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 4, 1), int64] */, dtype="int64") /* ty=Tensor[(5, 4, 1), int64] */;
  %14 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 4, 13), int64] */, dtype="int64") /* ty=Tensor[(5, 4, 13), int64] */;
  %15 = subtract(%13, %14) /* ty=Tensor[(5, 4, 13), int64] */;
  %16 = cast(%15, dtype="uint64") /* ty=Tensor[(5, 4, 13), uint64] */;
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 4, 1), int64] */, dtype="uint64") /* ty=Tensor[(5, 4, 1), uint64] */;
  %18 = cast(%var_5004, dtype="float32") /* ty=Tensor[(480), float32] */;
  %19 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 5), float64] */;
  %20 = cast(%var_5006, dtype="int16") /* ty=Tensor[(63), int16] */;
  %21 = reshape(%18, newshape=[240, 2]) /* ty=Tensor[(240, 2), float32] */;
  %22 = reshape(%19, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), float64] */;
  %23 = reshape(%20, newshape=[63]) /* ty=Tensor[(63), int16] */;
  %24 = @func_4797(%21, %22, %23) /* ty=(uint64, Tensor[(240, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(64), float32], Tensor[(2, 16, 15), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), float32], Tensor[(78), float32], Tensor[(63), int16], Tensor[(2, 5, 7), bool], Tensor[(2, 5, 7), float64], Tensor[(3, 16, 6), bool], Tensor[(144, 2), bool]) */;
  %25 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 273), int32] */, dtype="int32") /* ty=Tensor[(1, 273), int32] */;
  %26 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 273), int32] */, dtype="int32") /* ty=Tensor[(1, 273), int32] */;
  %27 = reshape(%25, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %28 = reshape(%26, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %29 = @func_3977(%27, %28) /* ty=(Tensor[(7, 13, 3), bool],) */;
  %30 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
  %31 = add(%16, %17) /* ty=Tensor[(5, 4, 13), uint64] */;
  %32 = %24.13;
  %33 = %29.0;
  %34 = %30.0;
  (%31, %32, %var_5004, meta[relay.Constant][4] /* ty=Tensor[(14, 5), float64] */, %var_5006, %33, meta[relay.Constant][5] /* ty=Tensor[(1, 273), int32] */, %34)
}

def @func_5977(%var_5975: Tensor[(7, 78), float32]) -> (float64, Tensor[(6, 7, 13), float32], Tensor[(7, 78), uint8]) {
  @func_5974(%var_5975) /* ty=(float64, Tensor[(6, 7, 13), float32], Tensor[(7, 78), uint8]) */
}

def @func_6378() -> Tensor[(2, 5, ?), float64] {
  @func_6376() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_8403() -> (Tensor[(275, 1), float32],) {
  %37 = fn () -> (Tensor[(275, 1), float32],) {
    %35 = @func_8100() /* ty=(Tensor[(275, 1), float32],) */;
    %36 = %35.0;
    (%36,)
  };
  %37() /* ty=(Tensor[(275, 1), float32],) */
}

def @func_6628(%var_6528: Tensor[(11, 5, 5), float32], %var_6569: Tensor[(288), bool], %var_6590: Tensor[(7, 9), int16]) -> (Tensor[(11, 5, 5), uint64], Tensor[(7, 10, 10), uint32], float64, Tensor[(11, 5, 5), float32], Tensor[(288), bool], Tensor[(11, 5, 5), float32], Tensor[(3, 16, 6), float32], Tensor[(2, 5, ?), float64], Tensor[(78), float32], Tensor[(7, 9), int16], Tensor[(11, 15, 2), float32], Tensor[(330), int16]) {
  %38 = @func_4821() /* ty=Tensor[(11, 5, 5), float32] */;
  %39 = cast(%var_6528, dtype="uint64") /* ty=Tensor[(11, 5, 5), uint64] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="uint64") /* ty=Tensor[(11, 5, 5), uint64] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %43 = @func_5785() /* ty=(Tensor[(7, 10, 10), uint32],) */;
  %44 = @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */;
  %45 = cast(%38, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %46 = cast(%var_6569, dtype="bool") /* ty=Tensor[(288), bool] */;
  %47 = reshape(%46, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %48 = @func_2639(%47) /* ty=(Tensor[(3, 16, 6), bool],) */;
  %49 = %48.0;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %51 = cast(meta[relay.Constant][6] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %52 = %44.2;
  %53 = cast(%52, dtype="uint64") /* ty=uint64 */;
  %54 = cast(%var_6590, dtype="int16") /* ty=Tensor[(7, 9), int16] */;
  %55 = reshape(%51, newshape=[26, 3]) /* ty=Tensor[(26, 3), float32] */;
  %56 = reshape(%53, newshape=[]) /* ty=uint64 */;
  %57 = reshape(%54, newshape=[63]) /* ty=Tensor[(63), int16] */;
  %58 = @func_5327(%55, %56, %57) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(26), float64], Tensor[(26, 3), float32], uint64, Tensor[(63), int16], Tensor[(16, 16, 12), float64], Tensor[(3072), float64]) */;
  %59 = cast(meta[relay.Constant][7] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %60 = reshape(%59, newshape=[11, 15, 2]) /* ty=Tensor[(11, 15, 2), int16] */;
  %61 = @func_3831(%60) /* ty=(Tensor[(11, 15, 2), int16], Tensor[(11, 15, 2), float32]) */;
  %62 = maximum(%41, %42) /* ty=Tensor[(11, 5, 5), uint64] */;
  %63 = %43.0;
  %64 = @func_6442() /* ty=Tensor[(11, 5, 5), float32] */;
  %65 = sigmoid(%45) /* ty=Tensor[(11, 5, 5), float32] */;
  %66 = atan(%50) /* ty=Tensor[(3, 16, 6), float32] */;
  %67 = %58.0;
  %68 = %61.1;
  (%62, %63, %52, %64, %var_6569, %65, %66, %67, meta[relay.Constant][6] /* ty=Tensor[(78), float32] */, %var_6590, %68, meta[relay.Constant][7] /* ty=Tensor[(330), int16] */)
}

def @func_6782() -> float64 {
  %70 = fn () -> float64 {
    %69 = @func_4542() /* ty=(float64,) */;
    %69.0
  };
  %70() /* ty=float64 */
}

def @func_6953() -> Tensor[(11, 5, 5), float32] {
  @func_6442() /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_5655() -> (Tensor[(275, 1), float64],) {
  @func_5653() /* ty=(Tensor[(275, 1), float64],) */
}

def @func_3980(%var_3978: Tensor[(7, 13, 3), int32], %var_3979: Tensor[(7, 13, 3), int32]) -> (Tensor[(7, 13, 3), bool],) {
  %76 = fn (%var_3958: Tensor[(7, 13, 3), int32], %var_3959: Tensor[(7, 13, 3), int32]) -> (Tensor[(7, 13, 3), bool],) {
    %71 = cast(%var_3959, dtype="bool") /* ty=Tensor[(7, 13, 3), bool] */;
    %72 = shape_of(%var_3958, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%var_3958, dtype="bool") /* ty=Tensor[(7, 13, 3), bool] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %75 = greater_equal(%73, %74) /* ty=Tensor[(7, 13, 3), bool] */;
    (%75,)
  };
  %76(%var_3978, %var_3979) /* ty=(Tensor[(7, 13, 3), bool],) */
}

def @func_6699(%var_6689: Tensor[(7, 10, 10), float32]) -> Tensor[(7, 10, 10), bool] {
  %77 = @func_6218() /* ty=Tensor[(7, 10, 10), float32] */;
  %78 = cast(%var_6689, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%77, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%80, %81) /* ty=Tensor[(7, 10, 10), bool] */
}

def @func_7193() -> Tensor[(7, 16, 13), float64] {
  %83 = fn () -> Tensor[(7, 16, 13), float64] {
    %82 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 13), float64] */;
    erf(%82) /* ty=Tensor[(7, 16, 13), float64] */
  };
  %83() /* ty=Tensor[(7, 16, 13), float64] */
}

def @func_4318() -> (Tensor[(2, 5, ?), float64],) {
  %85 = fn () -> (Tensor[(2, 5, ?), float64],) {
    %84 = @func_4250() /* ty=Tensor[(2, 5, ?), float64] */;
    (%84,)
  };
  %85() /* ty=(Tensor[(2, 5, ?), float64],) */
}

def @func_3477(%var_3470: Tensor[(16, 4, 6), float32]) -> Tensor[(16, 4, 6), float32] {
  %86 = cast(%var_3470, dtype="float32") /* ty=Tensor[(16, 4, 6), float32] */;
  atan(%86) /* ty=Tensor[(16, 4, 6), float32] */
}

def @func_8379() -> (float64, Tensor[(11, 5, 5), float32]) {
  %93 = fn () -> (float64, Tensor[(11, 5, 5), float32]) {
    %87 = @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */;
    %88 = @func_6321() /* ty=(float64, Tensor[(11, 5, 5), float32]) */;
    %89 = %88.1;
    %90 = cast(%89, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
    %91 = %87.3;
    %92 = atan(%90) /* ty=Tensor[(11, 5, 5), float32] */;
    (%91, %92)
  };
  %93() /* ty=(float64, Tensor[(11, 5, 5), float32]) */
}

def @func_5358(%var_5353: Tensor[(13, 15, 6), float64]) -> Tensor[(13, 15, 6), bool] {
  %94 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %95 = %94.2;
  %96 = cast(%95, dtype="bool") /* ty=bool */;
  %97 = cast(%var_5353, dtype="bool") /* ty=Tensor[(13, 15, 6), bool] */;
  less(%96, %97) /* ty=Tensor[(13, 15, 6), bool] */
}

def @func_7689() -> (Tensor[(11, 5, 5), uint32], Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float32]) {
  @func_7687() /* ty=(Tensor[(11, 5, 5), uint32], Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float32]) */
}

def @func_4801(%var_4798: Tensor[(240, 2), float32], %var_4799: Tensor[(2, 5, 7), float64], %var_4800: Tensor[(63), int16]) -> (uint64, Tensor[(240, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(64), float32], Tensor[(2, 16, 15), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), float32], Tensor[(78), float32], Tensor[(63), int16], Tensor[(2, 5, 7), bool], Tensor[(2, 5, 7), float64], Tensor[(3, 16, 6), bool], Tensor[(144, 2), bool]) {
  %148 = fn (%var_4707: Tensor[(240, 2), float32], %var_4737: Tensor[(2, 5, 7), float64], %var_4753: Tensor[(63), int16]) -> (uint64, Tensor[(240, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(64), float32], Tensor[(2, 16, 15), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), float32], Tensor[(78), float32], Tensor[(63), int16], Tensor[(2, 5, 7), bool], Tensor[(2, 5, 7), float64], Tensor[(3, 16, 6), bool], Tensor[(144, 2), bool]) {
    %98 = cast(%var_4707, dtype="float32") /* ty=Tensor[(240, 2), float32] */;
    %99 = reshape(%98, newshape=[2, 16, 15]) /* ty=Tensor[(2, 16, 15), float32] */;
    %100 = @func_1890(%99) /* ty=(Tensor[(3, 6, 14), uint64], uint64, Tensor[(2, 16, 15), float32]) */;
    %101 = cast(meta[relay.Constant][9] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %102 = cast(meta[relay.Constant][9] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %103 = reshape(%101, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float32] */;
    %104 = reshape(%102, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float32] */;
    %105 = @func_4442(%103, %104) /* ty=(Tensor[(8, 4, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(546, 1), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), int16], Tensor[(2, 5, ?), bool]) */;
    %106 = cast(%var_4707, dtype="float32") /* ty=Tensor[(240, 2), float32] */;
    %107 = reshape(%106, newshape=[2, 16, 15]) /* ty=Tensor[(2, 16, 15), float32] */;
    %108 = @func_1890(%107) /* ty=(Tensor[(3, 6, 14), uint64], uint64, Tensor[(2, 16, 15), float32]) */;
    %109 = cast(meta[relay.Constant][10] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %110 = cast(meta[relay.Constant][10] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %111 = reshape(%109, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
    %112 = reshape(%110, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
    %113 = @func_3244(%111, %112) /* ty=(Tensor[(8, 8, 13), float64],) */;
    %114 = cast(meta[relay.Constant][11] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %115 = %100.1;
    %116 = cast(%115, dtype="uint64") /* ty=uint64 */;
    %117 = cast(%var_4753, dtype="int16") /* ty=Tensor[(63), int16] */;
    %118 = reshape(%114, newshape=[13, 6, 1]) /* ty=Tensor[(13, 6, 1), float32] */;
    %119 = reshape(%116, newshape=[]) /* ty=uint64 */;
    %120 = reshape(%117, newshape=[7, 9]) /* ty=Tensor[(7, 9), int16] */;
    %121 = @func_1577(%118, %119, %120) /* ty=(Tensor[(13, 6, 1), float32], Tensor[(10, 3, 4), float32], Tensor[(120), int32], uint64, Tensor[(26), float64], Tensor[(7, 9), int16], Tensor[(26), float64], Tensor[(3, 6, 14), uint64], Tensor[(3, 6, 14), uint64]) */;
    %122 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 5, 7), float64] */;
    %123 = sin(%122) /* ty=Tensor[(2, 5, 7), float64] */;
    %124 = cast(%var_4737, dtype="int8") /* ty=Tensor[(2, 5, 7), int8] */;
    %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
    %126 = cast(%123, dtype="int8") /* ty=Tensor[(2, 5, 7), int8] */;
    %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %128 = left_shift(%126, %127) /* ty=Tensor[(2, 5, 7), int8] */;
    %129 = @func_4250() /* ty=Tensor[(2, 5, ?), float64] */;
    %130 = cast(%129, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
    %131 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 5, 7), float64] */;
    %132 = divide(%130, %131) /* ty=Tensor[(2, 5, 7), float64] */;
    %133 = cast(%132, dtype="bool") /* ty=Tensor[(2, 5, 7), bool] */;
    %134 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %135 = cast(%128, dtype="bool") /* ty=Tensor[(2, 5, 7), bool] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %137 = cast(%123, dtype="float64") /* ty=Tensor[(2, 5, 7), float64] */;
    %138 = cast(meta[relay.Constant][13] /* ty=Tensor[(144, 2), bool] */, dtype="bool") /* ty=Tensor[(144, 2), bool] */;
    %139 = reshape(%138, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
    %140 = @func_2639(%139) /* ty=(Tensor[(3, 16, 6), bool],) */;
    %141 = %105.1;
    %142 = %108.2;
    %143 = %113.0;
    %144 = %121.1;
    %145 = greater(%135, %136) /* ty=Tensor[(2, 5, 7), bool] */;
    %146 = exp(%137) /* ty=Tensor[(2, 5, 7), float64] */;
    %147 = %140.0;
    (%115, %var_4707, %141, meta[relay.Constant][9] /* ty=Tensor[(64), float32] */, %142, %143, meta[relay.Constant][10] /* ty=Tensor[(832), float64] */, %144, meta[relay.Constant][11] /* ty=Tensor[(78), float32] */, %var_4753, %145, %146, %147, meta[relay.Constant][13] /* ty=Tensor[(144, 2), bool] */)
  };
  %148(%var_4798, %var_4799, %var_4800) /* ty=(uint64, Tensor[(240, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(64), float32], Tensor[(2, 16, 15), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), float32], Tensor[(78), float32], Tensor[(63), int16], Tensor[(2, 5, 7), bool], Tensor[(2, 5, 7), float64], Tensor[(3, 16, 6), bool], Tensor[(144, 2), bool]) */
}

def @func_5179(%var_5177: Tensor[(550), float32]) -> (Tensor[(11, 5, 5), float64], Tensor[(275, 1), float64], Tensor[(550), float32]) {
  @func_5176(%var_5177) /* ty=(Tensor[(11, 5, 5), float64], Tensor[(275, 1), float64], Tensor[(550), float32]) */
}

def @func_5647() -> (float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) {
  %157 = fn () -> (float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) {
    %149 = @func_4542() /* ty=(float64,) */;
    %150 = cast(meta[relay.Constant][14] /* ty=Tensor[(273), int32] */, dtype="int32") /* ty=Tensor[(273), int32] */;
    %151 = cast(meta[relay.Constant][14] /* ty=Tensor[(273), int32] */, dtype="int32") /* ty=Tensor[(273), int32] */;
    %152 = reshape(%150, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
    %153 = reshape(%151, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
    %154 = @func_3977(%152, %153) /* ty=(Tensor[(7, 13, 3), bool],) */;
    %155 = %149.0;
    %156 = %154.0;
    (%155, %156, meta[relay.Constant][14] /* ty=Tensor[(273), int32] */)
  };
  %157() /* ty=(float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) */
}

def @func_7518() -> Tensor[(11, 5, 5), float64] {
  @func_7516() /* ty=Tensor[(11, 5, 5), float64] */
}

def @func_447(%var_444: int16, %var_445: Tensor[(3, 3, 7), int16], %var_446: Tensor[(26), float64]) -> (Tensor[(3, 3, 7), bool], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) {
  %166 = fn (%var_431: int16, %var_432: Tensor[(3, 3, 7), int16], %var_440: Tensor[(26), float64]) -> (Tensor[(3, 3, 7), bool], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) {
    %158 = cast(%var_431, dtype="bool") /* ty=bool */;
    %159 = cast(%var_432, dtype="bool") /* ty=Tensor[(3, 3, 7), bool] */;
    %160 = cast(%var_431, dtype="float64") /* ty=float64 */;
    %161 = cast(%var_440, dtype="float64") /* ty=Tensor[(26), float64] */;
    %162 = reshape(%160, newshape=[]) /* ty=float64 */;
    %163 = reshape(%161, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
    %164 = not_equal(%158, %159) /* ty=Tensor[(3, 3, 7), bool] */;
    %165 = @func_418(%162, %163) /* ty=Tensor[(2, 13, 1), float64] */;
    (%164, %165, %var_440)
  };
  %166(%var_444, %var_445, %var_446) /* ty=(Tensor[(3, 3, 7), bool], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */
}

def @func_7828() -> (Tensor[(2, 5, ?), float64], Tensor[(2, 5, ?), float64]) {
  %167 = @func_6376() /* ty=Tensor[(2, 5, ?), float64] */;
  %168 = @func_6391() /* ty=Tensor[(2, 5, ?), float64] */;
  (%167, %168)
}

def @func_5287(%var_5198: Tensor[(546), float32], %var_5225: Tensor[(480), float32], %var_5226: Tensor[(7, 10), float64], %var_5274: Tensor[(90), int32], %var_5275: Tensor[(1170), int32]) -> (Tensor[(11, 5, 5), float32], Tensor[(6, 7, 13), float32], Tensor[(546), float32], float64, float64, Tensor[(144, 2), bool], Tensor[(480), float32], Tensor[(7, 10), float64], Tensor[(63), int16], Tensor[(26), uint16], Tensor[(26), float32], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(26), float64], Tensor[(90), int32], Tensor[(1170), int32]) {
  %169 = cast(%var_5198, dtype="float32") /* ty=Tensor[(546), float32] */;
  %170 = reshape(%169, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), float32] */;
  %171 = @func_3222(%170) /* ty=(Tensor[(6, 7, 13), float32],) */;
  %172 = cast(2.39053f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %173 = cast(meta[relay.Constant][15] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %174 = reshape(%172, newshape=[]) /* ty=float64 */;
  %175 = reshape(%173, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %176 = @func_4851(%174, %175) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(2, 13, 1), float64], float64, Tensor[(26), float64], float64) */;
  %177 = cast(%var_5225, dtype="float32") /* ty=Tensor[(480), float32] */;
  %178 = cast(%var_5226, dtype="float64") /* ty=Tensor[(7, 10), float64] */;
  %179 = cast(meta[relay.Constant][16] /* ty=Tensor[(63), int16] */, dtype="int16") /* ty=Tensor[(63), int16] */;
  %180 = reshape(%177, newshape=[240, 2]) /* ty=Tensor[(240, 2), float32] */;
  %181 = reshape(%178, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), float64] */;
  %182 = reshape(%179, newshape=[63]) /* ty=Tensor[(63), int16] */;
  %183 = @func_4797(%180, %181, %182) /* ty=(uint64, Tensor[(240, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(64), float32], Tensor[(2, 16, 15), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), float32], Tensor[(78), float32], Tensor[(63), int16], Tensor[(2, 5, 7), bool], Tensor[(2, 5, 7), float64], Tensor[(3, 16, 6), bool], Tensor[(144, 2), bool]) */;
  %184 = cast(meta[relay.Constant][17] /* ty=Tensor[(26), float64] */, dtype="uint16") /* ty=Tensor[(26), uint16] */;
  %185 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(26), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %186 = cast(meta[relay.Constant][15] /* ty=Tensor[(26), float64] */, dtype="uint16") /* ty=Tensor[(26), uint16] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %188 = cast(meta[relay.Constant][17] /* ty=Tensor[(26), float64] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %189 = cast(meta[relay.Constant][18] /* ty=Tensor[(273), int32] */, dtype="int32") /* ty=Tensor[(273), int32] */;
  %190 = cast(meta[relay.Constant][18] /* ty=Tensor[(273), int32] */, dtype="int32") /* ty=Tensor[(273), int32] */;
  %191 = reshape(%189, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %192 = reshape(%190, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %193 = @func_3977(%191, %192) /* ty=(Tensor[(7, 13, 3), bool],) */;
  %194 = cast(%var_5274, dtype="int32") /* ty=Tensor[(90), int32] */;
  %195 = cast(%var_5275, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %196 = bitwise_xor(%186, %187) /* ty=Tensor[(26), uint16] */;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(26), float64] */;
  %198 = reshape(%194, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %199 = reshape(%195, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), int32] */;
  %200 = reshape(%197, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %201 = @func_2375(%198, %199, %200) /* ty=(Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %202 = @func_4821() /* ty=Tensor[(11, 5, 5), float32] */;
  %203 = %171.0;
  %204 = %176.2;
  %205 = %183.13;
  %206 = cos(%188) /* ty=Tensor[(26), float32] */;
  %207 = %193.0;
  %208 = %201.5;
  (%202, %203, %var_5198, %204, 2.39053f64 /* ty=float64 */, %205, %var_5225, %var_5226, meta[relay.Constant][16] /* ty=Tensor[(63), int16] */, %196, %206, %207, meta[relay.Constant][18] /* ty=Tensor[(273), int32] */, %208, %var_5274, %var_5275)
}

def @func_3833(%var_3832: Tensor[(11, 15, 2), int16]) -> (Tensor[(11, 15, 2), int16], Tensor[(11, 15, 2), float32]) {
  %214 = fn (%var_3813: Tensor[(11, 15, 2), int16]) -> (Tensor[(11, 15, 2), int16], Tensor[(11, 15, 2), float32]) {
    %209 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 1, 2), int16] */, dtype="int16") /* ty=Tensor[(11, 1, 2), int16] */;
    %210 = cast(%var_3813, dtype="int16") /* ty=Tensor[(11, 15, 2), int16] */;
    %211 = cast(%var_3813, dtype="float32") /* ty=Tensor[(11, 15, 2), float32] */;
    %212 = maximum(%209, %210) /* ty=Tensor[(11, 15, 2), int16] */;
    %213 = sin(%211) /* ty=Tensor[(11, 15, 2), float32] */;
    (%212, %213)
  };
  %214(%var_3832) /* ty=(Tensor[(11, 15, 2), int16], Tensor[(11, 15, 2), float32]) */
}

def @func_6219() -> Tensor[(7, 10, 10), float32] {
  %218 = fn () -> Tensor[(7, 10, 10), float32] {
    %215 = @func_5785() /* ty=(Tensor[(7, 10, 10), uint32],) */;
    %216 = %215.0;
    %217 = cast(%216, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
    asinh(%217) /* ty=Tensor[(7, 10, 10), float32] */
  };
  %218() /* ty=Tensor[(7, 10, 10), float32] */
}

def @func_6633(%var_6630: Tensor[(11, 5, 5), float32], %var_6631: Tensor[(288), bool], %var_6632: Tensor[(7, 9), int16]) -> (Tensor[(11, 5, 5), uint64], Tensor[(7, 10, 10), uint32], float64, Tensor[(11, 5, 5), float32], Tensor[(288), bool], Tensor[(11, 5, 5), float32], Tensor[(3, 16, 6), float32], Tensor[(2, 5, ?), float64], Tensor[(78), float32], Tensor[(7, 9), int16], Tensor[(11, 15, 2), float32], Tensor[(330), int16]) {
  @func_6628(%var_6630, %var_6631, %var_6632) /* ty=(Tensor[(11, 5, 5), uint64], Tensor[(7, 10, 10), uint32], float64, Tensor[(11, 5, 5), float32], Tensor[(288), bool], Tensor[(11, 5, 5), float32], Tensor[(3, 16, 6), float32], Tensor[(2, 5, ?), float64], Tensor[(78), float32], Tensor[(7, 9), int16], Tensor[(11, 15, 2), float32], Tensor[(330), int16]) */
}

def @func_4914() -> (Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) {
  %219 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
  %220 = %219.0;
  %221 = cast(%220, dtype="float32") /* ty=Tensor[(4, 12, 13), float32] */;
  %222 = cast(-4.60992f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %223 = cast(meta[relay.Constant][20] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %224 = reshape(%222, newshape=[]) /* ty=float64 */;
  %225 = reshape(%223, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %226 = @func_4851(%224, %225) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(2, 13, 1), float64], float64, Tensor[(26), float64], float64) */;
  %227 = @func_4821() /* ty=Tensor[(11, 5, 5), float32] */;
  %228 = atan(%221) /* ty=Tensor[(4, 12, 13), float32] */;
  %229 = %226.2;
  (%227, %228, %229, -4.60992f64 /* ty=float64 */, meta[relay.Constant][20] /* ty=Tensor[(26), float64] */)
}

def @func_1893(%var_1891: Tensor[(2, 16, 15), float32]) -> (Tensor[(3, 6, 14), uint64], uint64, Tensor[(2, 16, 15), float32]) {
  @func_1890(%var_1891) /* ty=(Tensor[(3, 6, 14), uint64], uint64, Tensor[(2, 16, 15), float32]) */
}

def @func_5331(%var_5328: Tensor[(26, 3), float32], %var_5329: uint64, %var_5330: Tensor[(63), int16]) -> (Tensor[(2, 5, ?), float64], Tensor[(26), float64], Tensor[(26, 3), float32], uint64, Tensor[(63), int16], Tensor[(16, 16, 12), float64], Tensor[(3072), float64]) {
  %248 = fn (%var_5314: Tensor[(26, 3), float32], %var_5315: uint64, %var_5316: Tensor[(63), int16]) -> (Tensor[(2, 5, ?), float64], Tensor[(26), float64], Tensor[(26, 3), float32], uint64, Tensor[(63), int16], Tensor[(16, 16, 12), float64], Tensor[(3072), float64]) {
    %230 = @func_4317() /* ty=(Tensor[(2, 5, ?), float64],) */;
    %231 = cast(%var_5314, dtype="float32") /* ty=Tensor[(26, 3), float32] */;
    %232 = cast(%var_5315, dtype="uint64") /* ty=uint64 */;
    %233 = cast(%var_5316, dtype="int16") /* ty=Tensor[(63), int16] */;
    %234 = reshape(%231, newshape=[13, 6, 1]) /* ty=Tensor[(13, 6, 1), float32] */;
    %235 = reshape(%232, newshape=[]) /* ty=uint64 */;
    %236 = reshape(%233, newshape=[7, 9]) /* ty=Tensor[(7, 9), int16] */;
    %237 = @func_1577(%234, %235, %236) /* ty=(Tensor[(13, 6, 1), float32], Tensor[(10, 3, 4), float32], Tensor[(120), int32], uint64, Tensor[(26), float64], Tensor[(7, 9), int16], Tensor[(26), float64], Tensor[(3, 6, 14), uint64], Tensor[(3, 6, 14), uint64]) */;
    %238 = cast(%var_5315, dtype="float64") /* ty=float64 */;
    %239 = cast(meta[relay.Constant][21] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
    %240 = %237.6;
    %241 = cast(%240, dtype="float64") /* ty=Tensor[(26), float64] */;
    %242 = reshape(%238, newshape=[]) /* ty=float64 */;
    %243 = reshape(%239, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), float64] */;
    %244 = reshape(%241, newshape=[26]) /* ty=Tensor[(26), float64] */;
    %245 = @func_2531(%242, %243, %244) /* ty=(Tensor[(16, 16, 12), float64], Tensor[(26), float64], Tensor[(90), int32], Tensor[(5, 234), int32], Tensor[(26), float64]) */;
    %246 = %230.0;
    %247 = %245.0;
    (%246, %240, %var_5314, %var_5315, %var_5316, %247, meta[relay.Constant][21] /* ty=Tensor[(3072), float64] */)
  };
  %248(%var_5328, %var_5329, %var_5330) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(26), float64], Tensor[(26, 3), float32], uint64, Tensor[(63), int16], Tensor[(16, 16, 12), float64], Tensor[(3072), float64]) */
}

def @func_7257(%var_7256: Tensor[(7, 13, 3), bool]) -> (Tensor[(7, 13, 3), float32], Tensor[(7, 13, 3), float32]) {
  %258 = fn (%var_7238: Tensor[(7, 13, 3), bool]) -> (Tensor[(7, 13, 3), float32], Tensor[(7, 13, 3), float32]) {
    %249 = @func_5646() /* ty=(float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) */;
    %250 = %249.1;
    %251 = cast(%var_7238, dtype="float32") /* ty=Tensor[(7, 13, 3), float32] */;
    %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(%250, dtype="float32") /* ty=Tensor[(7, 13, 3), float32] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %255 = cast(%var_7238, dtype="float32") /* ty=Tensor[(7, 13, 3), float32] */;
    %256 = divide(%253, %254) /* ty=Tensor[(7, 13, 3), float32] */;
    %257 = log2(%255) /* ty=Tensor[(7, 13, 3), float32] */;
    (%256, %257)
  };
  %258(%var_7256) /* ty=(Tensor[(7, 13, 3), float32], Tensor[(7, 13, 3), float32]) */
}

def @func_5037(%var_5035: Tensor[(480), float32], %var_5036: Tensor[(63), int16]) -> (Tensor[(5, 4, 13), uint64], Tensor[(144, 2), bool], Tensor[(480), float32], Tensor[(14, 5), float64], Tensor[(63), int16], Tensor[(7, 13, 3), bool], Tensor[(1, 273), int32], Tensor[(4, 12, 13), bool]) {
  @func_5033(%var_5035, %var_5036) /* ty=(Tensor[(5, 4, 13), uint64], Tensor[(144, 2), bool], Tensor[(480), float32], Tensor[(14, 5), float64], Tensor[(63), int16], Tensor[(7, 13, 3), bool], Tensor[(1, 273), int32], Tensor[(4, 12, 13), bool]) */
}

def @func_8667(%var_8666: Tensor[(15, 2, 3), float32]) -> (Tensor[(15, 2, 3), float32], Tensor[(11, 5, 5), float64], Tensor[(275), float64]) {
  %264 = fn (%var_8650: Tensor[(15, 2, 3), float32]) -> (Tensor[(15, 2, 3), float32], Tensor[(11, 5, 5), float64], Tensor[(275), float64]) {
    %259 = cast(%var_8650, dtype="float32") /* ty=Tensor[(15, 2, 3), float32] */;
    %260 = cast(meta[relay.Constant][22] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
    %261 = reshape(%260, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float64] */;
    %262 = log10(%259) /* ty=Tensor[(15, 2, 3), float32] */;
    %263 = @func_1142(%261) /* ty=Tensor[(11, 5, 5), float64] */;
    (%262, %263, meta[relay.Constant][22] /* ty=Tensor[(275), float64] */)
  };
  %264(%var_8666) /* ty=(Tensor[(15, 2, 3), float32], Tensor[(11, 5, 5), float64], Tensor[(275), float64]) */
}

def @func_5361(%var_5359: Tensor[(13, 15, 6), float64]) -> Tensor[(13, 15, 6), bool] {
  @func_5358(%var_5359) /* ty=Tensor[(13, 15, 6), bool] */
}

def @func_5710(%var_5708: Tensor[(275), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], Tensor[(275), float64], Tensor[(3, 6, 14), uint64], Tensor[(120), int32], uint64) {
  @func_5707(%var_5708) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], Tensor[(275), float64], Tensor[(3, 6, 14), uint64], Tensor[(120), int32], uint64) */
}

def @func_5774() -> Tensor[(2, 5, ?), float64] {
  %266 = fn () -> Tensor[(2, 5, ?), float64] {
    %265 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
    %265.0
  };
  %266() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_5749() -> (Tensor[(7, 10, 10), uint32],) {
  %267 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %268 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 10, 10), bool] */, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %269 = logical_or(%267, %268) /* ty=Tensor[(7, 10, 10), bool] */;
  %270 = cast(%269, dtype="uint32") /* ty=Tensor[(7, 10, 10), uint32] */;
  %271 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(7, 10, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 10, 10), bool] */, dtype="uint32") /* ty=Tensor[(7, 10, 10), uint32] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %274 = add(%272, %273) /* ty=Tensor[(7, 10, 10), uint32] */;
  (%274,)
}

def @func_8009() -> (float64, Tensor[(2, 13, ?), float64]) {
  @func_8007() /* ty=(float64, Tensor[(2, 13, ?), float64]) */
}

def @func_4916() -> (Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) {
  @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */
}

def @func_6442() -> Tensor[(11, 5, 5), float32] {
  @func_4821() /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_4294(%var_4292: Tensor[(273, 1), int32]) -> (Tensor[(2, 5, ?), float64], Tensor[(7, 13, 3), bool], Tensor[(273, 1), int32]) {
  @func_4291(%var_4292) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(7, 13, 3), bool], Tensor[(273, 1), int32]) */
}

def @func_6505() -> (float64,) {
  %277 = fn () -> (float64,) {
    %275 = @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */;
    %276 = %275.3;
    (%276,)
  };
  %277() /* ty=(float64,) */
}

def @func_8452() -> (Tensor[(11, 5, 5), float32],) {
  @func_8450() /* ty=(Tensor[(11, 5, 5), float32],) */
}

def @func_8591(%var_8587: Tensor[(90), int32], %var_8588: Tensor[(1170), int32], %var_8589: Tensor[(26), float64], %var_8590: Tensor[(130), float64]) -> (Tensor[(275, 1), float32], Tensor[(15, 13, 6), uint64], Tensor[(90), int32], Tensor[(1170), int32], float64, Tensor[(2, 5, 26), int16], Tensor[(2, 5, ?), float32], Tensor[(7, 13, 3), bool], Tensor[(130), float64], Tensor[(2, 5, ?), float64], Tensor[(7, 10, 10), float32]) {
  %306 = fn (%var_8498: Tensor[(90), int32], %var_8499: Tensor[(1170), int32], %var_8500: Tensor[(26), float64], %var_8568: Tensor[(130), float64]) -> (Tensor[(275, 1), float32], Tensor[(15, 13, 6), uint64], Tensor[(90), int32], Tensor[(1170), int32], float64, Tensor[(2, 5, 26), int16], Tensor[(2, 5, ?), float32], Tensor[(7, 13, 3), bool], Tensor[(130), float64], Tensor[(2, 5, ?), float64], Tensor[(7, 10, 10), float32]) {
    %278 = @func_8402() /* ty=(Tensor[(275, 1), float32],) */;
    %279 = cast(%var_8498, dtype="int32") /* ty=Tensor[(90), int32] */;
    %280 = cast(%var_8499, dtype="int32") /* ty=Tensor[(1170), int32] */;
    %281 = cast(%var_8500, dtype="float64") /* ty=Tensor[(26), float64] */;
    %282 = reshape(%279, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
    %283 = reshape(%280, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), int32] */;
    %284 = reshape(%281, newshape=[26]) /* ty=Tensor[(26), float64] */;
    %285 = @func_2375(%282, %283, %284) /* ty=(Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
    %286 = @func_8231() /* ty=(float64,) */;
    %287 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
    %288 = %287.0;
    %289 = cast(%288, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
    %290 = sqrt(%289) /* ty=Tensor[(2, 5, ?), float64] */;
    %291 = cast(%290, dtype="int16") /* ty=Tensor[(2, 5, ?), int16] */;
    %292 = cast(%var_8500, dtype="int16") /* ty=Tensor[(26), int16] */;
    %293 = cast(%290, dtype="float32") /* ty=Tensor[(2, 5, ?), float32] */;
    %294 = cast(%var_8568, dtype="float64") /* ty=Tensor[(130), float64] */;
    %295 = reshape(%294, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), float64] */;
    %296 = @func_7014(%295) /* ty=(Tensor[(2, 5, 13), int64], Tensor[(7, 13, 3), bool]) */;
    %297 = cast(%288, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
    %298 = %278.0;
    %299 = %285.3;
    %300 = %286.0;
    %301 = right_shift(%291, %292) /* ty=Tensor[(2, 5, 26), int16] */;
    %302 = cos(%293) /* ty=Tensor[(2, 5, ?), float32] */;
    %303 = %296.1;
    %304 = cosh(%297) /* ty=Tensor[(2, 5, ?), float64] */;
    %305 = @func_6218() /* ty=Tensor[(7, 10, 10), float32] */;
    (%298, %299, %var_8498, %var_8499, %300, %301, %302, %303, %var_8568, %304, %305)
  };
  %306(%var_8587, %var_8588, %var_8589, %var_8590) /* ty=(Tensor[(275, 1), float32], Tensor[(15, 13, 6), uint64], Tensor[(90), int32], Tensor[(1170), int32], float64, Tensor[(2, 5, 26), int16], Tensor[(2, 5, ?), float32], Tensor[(7, 13, 3), bool], Tensor[(130), float64], Tensor[(2, 5, ?), float64], Tensor[(7, 10, 10), float32]) */
}

def @func_8714(%var_8712: Tensor[(1, 11, 13), float32]) -> (Tensor[(5, 11, 13), float32], Tensor[(4, 12, 13), float64]) {
  @func_8711(%var_8712) /* ty=(Tensor[(5, 11, 13), float32], Tensor[(4, 12, 13), float64]) */
}

def @func_7830() -> (Tensor[(2, 5, ?), float64], Tensor[(2, 5, ?), float64]) {
  @func_7828() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(2, 5, ?), float64]) */
}

def @func_7937(%var_7931: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 2, 2), float64],) {
  %307 = cast(%var_7931, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %308 = exp(%307) /* ty=Tensor[(3, 2, 2), float64] */;
  (%308,)
}

def @func_5551() -> Tensor[(275, 1), float64] {
  %309 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %309.4
}

def @func_4366() -> (Tensor[(275, 1), float32], Tensor[(275, 1), float32], Tensor[(2, 5, ?), float64]) {
  @func_4364() /* ty=(Tensor[(275, 1), float32], Tensor[(275, 1), float32], Tensor[(2, 5, ?), float64]) */
}

def @func_4544() -> (float64,) {
  @func_4542() /* ty=(float64,) */
}

def @func_3222(%var_3208: Tensor[(6, 7, 13), float32]) -> (Tensor[(6, 7, 13), float32],) {
  %310 = cast(%var_3208, dtype="float32") /* ty=Tensor[(6, 7, 13), float32] */;
  %311 = log10(%310) /* ty=Tensor[(6, 7, 13), float32] */;
  (%311,)
}

def @func_1965(%var_1943: Tensor[(14, 14, 8), int16], %var_1944: Tensor[(14, 14, 8), int16]) -> Tensor[(14, 14, 8), bool] {
  %312 = cast(%var_1944, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
  %313 = shape_of(%var_1943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_1943, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%314, %315) /* ty=Tensor[(14, 14, 8), bool] */
}

def @func_3225(%var_3223: Tensor[(6, 7, 13), float32]) -> (Tensor[(6, 7, 13), float32],) {
  @func_3222(%var_3223) /* ty=(Tensor[(6, 7, 13), float32],) */
}

def @func_4364() -> (Tensor[(275, 1), float32], Tensor[(275, 1), float32], Tensor[(2, 5, ?), float64]) {
  %316 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %317 = %316.4;
  %318 = cast(%317, dtype="float32") /* ty=Tensor[(275, 1), float32] */;
  %319 = cast(%317, dtype="float32") /* ty=Tensor[(275, 1), float32] */;
  %320 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %321 = sqrt(%318) /* ty=Tensor[(275, 1), float32] */;
  %322 = sin(%319) /* ty=Tensor[(275, 1), float32] */;
  %323 = %320.0;
  (%321, %322, %323)
}

def @func_3480(%var_3478: Tensor[(16, 4, 6), float32]) -> Tensor[(16, 4, 6), float32] {
  @func_3477(%var_3478) /* ty=Tensor[(16, 4, 6), float32] */
}

def @func_1577(%var_1525: Tensor[(13, 6, 1), float32], %var_1530: uint64, %var_1537: Tensor[(7, 9), int16]) -> (Tensor[(13, 6, 1), float32], Tensor[(10, 3, 4), float32], Tensor[(120), int32], uint64, Tensor[(26), float64], Tensor[(7, 9), int16], Tensor[(26), float64], Tensor[(3, 6, 14), uint64], Tensor[(3, 6, 14), uint64]) {
  %324 = cast(%var_1525, dtype="float32") /* ty=Tensor[(13, 6, 1), float32] */;
  %325 = cast(meta[relay.Constant][24] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %326 = cast(%var_1530, dtype="uint64") /* ty=uint64 */;
  %327 = reshape(%325, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int32] */;
  %328 = reshape(%326, newshape=[]) /* ty=uint64 */;
  %329 = @func_761(%327, %328) /* ty=(Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) */;
  %330 = cast(%var_1530, dtype="int16") /* ty=int16 */;
  %331 = cast(%var_1537, dtype="int16") /* ty=Tensor[(7, 9), int16] */;
  %332 = cast(meta[relay.Constant][25] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %333 = reshape(%330, newshape=[]) /* ty=int16 */;
  %334 = reshape(%331, newshape=[3, 3, 7]) /* ty=Tensor[(3, 3, 7), int16] */;
  %335 = reshape(%332, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %336 = @func_443(%333, %334, %335) /* ty=(Tensor[(3, 3, 7), bool], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %337 = cast(%var_1530, dtype="uint64") /* ty=uint64 */;
  %338 = reshape(%337, newshape=[]) /* ty=uint64 */;
  %339 = @func_492(%338) /* ty=(Tensor[(3, 6, 14), uint64],) */;
  %340 = cast(%var_1530, dtype="uint64") /* ty=uint64 */;
  %341 = reshape(%340, newshape=[]) /* ty=uint64 */;
  %342 = @func_492(%341) /* ty=(Tensor[(3, 6, 14), uint64],) */;
  %343 = sinh(%324) /* ty=Tensor[(13, 6, 1), float32] */;
  %344 = %329.3;
  %345 = %336.2;
  %346 = %339.0;
  %347 = %342.0;
  (%343, %344, meta[relay.Constant][24] /* ty=Tensor[(120), int32] */, %var_1530, %345, %var_1537, meta[relay.Constant][25] /* ty=Tensor[(26), float64] */, %346, %347)
}

def @func_7099(%var_7098: Tensor[(11, 5, 5), float32]) -> Tensor[(11, 5, 5), bool] {
  %353 = fn (%var_7091: Tensor[(11, 5, 5), float32]) -> Tensor[(11, 5, 5), bool] {
    %348 = @func_6442() /* ty=Tensor[(11, 5, 5), float32] */;
    %349 = cast(%var_7091, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
    %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(%348, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%351, %352) /* ty=Tensor[(11, 5, 5), bool] */
  };
  %353(%var_7098) /* ty=Tensor[(11, 5, 5), bool] */
}

def @func_3247(%var_3245: Tensor[(8, 8, 13), float64], %var_3246: Tensor[(8, 8, 13), float64]) -> (Tensor[(8, 8, 13), float64],) {
  %361 = fn (%var_3229: Tensor[(8, 8, 13), float64], %var_3230: Tensor[(8, 8, 13), float64]) -> (Tensor[(8, 8, 13), float64],) {
    %354 = cast(%var_3230, dtype="bool") /* ty=Tensor[(8, 8, 13), bool] */;
    %355 = shape_of(%var_3229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %356 = cast(%var_3229, dtype="bool") /* ty=Tensor[(8, 8, 13), bool] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %358 = equal(%356, %357) /* ty=Tensor[(8, 8, 13), bool] */;
    %359 = cast(%358, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
    %360 = sqrt(%359) /* ty=Tensor[(8, 8, 13), float64] */;
    (%360,)
  };
  %361(%var_3245, %var_3246) /* ty=(Tensor[(8, 8, 13), float64],) */
}

def @func_4854(%var_4852: float64, %var_4853: Tensor[(26), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(2, 13, 1), float64], float64, Tensor[(26), float64], float64) {
  %371 = fn (%var_4831: float64, %var_4832: Tensor[(26), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(2, 13, 1), float64], float64, Tensor[(26), float64], float64) {
    %362 = @func_4317() /* ty=(Tensor[(2, 5, ?), float64],) */;
    %363 = cast(%var_4831, dtype="float64") /* ty=float64 */;
    %364 = cast(%var_4832, dtype="float64") /* ty=Tensor[(26), float64] */;
    %365 = reshape(%363, newshape=[]) /* ty=float64 */;
    %366 = reshape(%364, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
    %367 = @func_4542() /* ty=(float64,) */;
    %368 = %362.0;
    %369 = @func_418(%365, %366) /* ty=Tensor[(2, 13, 1), float64] */;
    %370 = %367.0;
    (%368, %369, %var_4831, %var_4832, %370)
  };
  %371(%var_4852, %var_4853) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(2, 13, 1), float64], float64, Tensor[(26), float64], float64) */
}

def @func_2379(%var_2376: Tensor[(15, 1, 6), int32], %var_2377: Tensor[(15, 13, 6), int32], %var_2378: Tensor[(26), float64]) -> (Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) {
  %390 = fn (%var_2340: Tensor[(15, 1, 6), int32], %var_2354: Tensor[(15, 13, 6), int32], %var_2373: Tensor[(26), float64]) -> (Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) {
    %372 = cast(%var_2340, dtype="bool") /* ty=Tensor[(15, 1, 6), bool] */;
    %373 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 13, 6), int32] */, dtype="bool") /* ty=Tensor[(15, 13, 6), bool] */;
    %374 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %375 = reshape(%374, newshape=[]) /* ty=uint64 */;
    %376 = @func_492(%375) /* ty=(Tensor[(3, 6, 14), uint64],) */;
    %377 = cast(%var_2340, dtype="int16") /* ty=Tensor[(15, 1, 6), int16] */;
    %378 = cast(%var_2354, dtype="int16") /* ty=Tensor[(15, 13, 6), int16] */;
    %379 = logical_xor(%377, %378) /* ty=Tensor[(15, 13, 6), int16] */;
    %380 = cast(%379, dtype="uint64") /* ty=Tensor[(15, 13, 6), uint64] */;
    %381 = cast(%var_2340, dtype="uint64") /* ty=Tensor[(15, 1, 6), uint64] */;
    %382 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
    %383 = cast(%var_2373, dtype="float64") /* ty=Tensor[(26), float64] */;
    %384 = reshape(%382, newshape=[]) /* ty=float64 */;
    %385 = reshape(%383, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
    %386 = greater_equal(%372, %373) /* ty=Tensor[(15, 13, 6), bool] */;
    %387 = %376.0;
    %388 = bitwise_xor(%380, %381) /* ty=Tensor[(15, 13, 6), uint64] */;
    %389 = @func_418(%384, %385) /* ty=Tensor[(2, 13, 1), float64] */;
    (%386, %387, meta[relay.Constant][27] /* ty=uint64 */, %388, %389, %var_2373)
  };
  %390(%var_2376, %var_2377, %var_2378) /* ty=(Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */
}

def @func_6077(%var_6075: Tensor[(3, 16, 14), float64]) -> (Tensor[(3, 16, 14), bool],) {
  @func_6074(%var_6075) /* ty=(Tensor[(3, 16, 14), bool],) */
}

def @func_5786() -> (Tensor[(7, 10, 10), uint32],) {
  %393 = fn () -> (Tensor[(7, 10, 10), uint32],) {
    %391 = @func_5749() /* ty=(Tensor[(7, 10, 10), uint32],) */;
    %392 = %391.0;
    (%392,)
  };
  %393() /* ty=(Tensor[(7, 10, 10), uint32],) */
}

def @func_7327() -> Tensor[(2, 5, ?), float64] {
  %394 = fn () -> Tensor[(2, 5, ?), float64] {
    @func_5476() /* ty=Tensor[(2, 5, ?), float64] */
  };
  %394() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_7687() -> (Tensor[(11, 5, 5), uint32], Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float32]) {
  %395 = @func_6205() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(7, 10, 10), uint32]) */;
  %396 = %395.0;
  %397 = cast(%396, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %398 = exp(%397) /* ty=Tensor[(11, 5, 5), float32] */;
  %399 = cast(%396, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
  %400 = cos(%399) /* ty=Tensor[(11, 5, 5), float64] */;
  %401 = cast(%400, dtype="uint32") /* ty=Tensor[(11, 5, 5), uint32] */;
  %402 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%398, dtype="uint32") /* ty=Tensor[(11, 5, 5), uint32] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %405 = cast(%396, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %406 = minimum(%403, %404) /* ty=Tensor[(11, 5, 5), uint32] */;
  %407 = @func_6646() /* ty=Tensor[(2, 5, ?), float64] */;
  %408 = sin(%405) /* ty=Tensor[(11, 5, 5), float32] */;
  (%406, %407, %408)
}

def @func_4821() -> Tensor[(11, 5, 5), float32] {
  %409 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %410 = %409.1;
  %411 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 5, 5), float64] */, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%413, %414) /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_4965(%var_4963: Tensor[(275, 2), float32]) -> (Tensor[(275, ?), int32], Tensor[(275, 1), float64], Tensor[(275, 2), bool]) {
  @func_4962(%var_4963) /* ty=(Tensor[(275, ?), int32], Tensor[(275, 1), float64], Tensor[(275, 2), bool]) */
}

def @func_5837(%var_5835: Tensor[(26), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(26), bool], Tensor[(1320), uint32], Tensor[(26), float64], Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), bool]) {
  @func_5834(%var_5835) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(26), bool], Tensor[(1320), uint32], Tensor[(26), float64], Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), bool]) */
}

def @func_8232() -> (float64,) {
  %417 = fn () -> (float64,) {
    %415 = @func_4542() /* ty=(float64,) */;
    %416 = %415.0;
    (%416,)
  };
  %417() /* ty=(float64,) */
}

def @func_5294(%var_5289: Tensor[(546), float32], %var_5290: Tensor[(480), float32], %var_5291: Tensor[(7, 10), float64], %var_5292: Tensor[(90), int32], %var_5293: Tensor[(1170), int32]) -> (Tensor[(11, 5, 5), float32], Tensor[(6, 7, 13), float32], Tensor[(546), float32], float64, float64, Tensor[(144, 2), bool], Tensor[(480), float32], Tensor[(7, 10), float64], Tensor[(63), int16], Tensor[(26), uint16], Tensor[(26), float32], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(26), float64], Tensor[(90), int32], Tensor[(1170), int32]) {
  @func_5287(%var_5289, %var_5290, %var_5291, %var_5292, %var_5293) /* ty=(Tensor[(11, 5, 5), float32], Tensor[(6, 7, 13), float32], Tensor[(546), float32], float64, float64, Tensor[(144, 2), bool], Tensor[(480), float32], Tensor[(7, 10), float64], Tensor[(63), int16], Tensor[(26), uint16], Tensor[(26), float32], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(26), float64], Tensor[(90), int32], Tensor[(1170), int32]) */
}

def @func_764(%var_762: Tensor[(10, 3, 4), int32], %var_763: uint64) -> (Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) {
  %429 = fn (%var_737: Tensor[(10, 3, 4), int32], %var_743: uint64) -> (Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) {
    %418 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 3, 4), int32] */, dtype="int32") /* ty=Tensor[(10, 3, 4), int32] */;
    %419 = shape_of(%var_737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%var_737, dtype="int32") /* ty=Tensor[(10, 3, 4), int32] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %422 = cast(%var_743, dtype="uint64") /* ty=uint64 */;
    %423 = reshape(%422, newshape=[]) /* ty=uint64 */;
    %424 = @func_492(%423) /* ty=(Tensor[(3, 6, 14), uint64],) */;
    %425 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 3, 4), int32] */, dtype="float32") /* ty=Tensor[(10, 3, 4), float32] */;
    %426 = maximum(%420, %421) /* ty=Tensor[(10, 3, 4), int32] */;
    %427 = %424.0;
    %428 = acosh(%425) /* ty=Tensor[(10, 3, 4), float32] */;
    (%426, %427, %var_743, %428)
  };
  %429(%var_762, %var_763) /* ty=(Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) */
}

def @func_3510(%var_3507: float64, %var_3508: Tensor[(9, 7, 1), float64], %var_3509: Tensor[(275), float64]) -> (Tensor[(11, 5, 5), float64], Tensor[(275), float64], Tensor[(9, 7, ?), uint64]) {
  @func_3505(%var_3507, %var_3508, %var_3509) /* ty=(Tensor[(11, 5, 5), float64], Tensor[(275), float64], Tensor[(9, 7, ?), uint64]) */
}

def @func_7955() -> (Tensor[(7, 10, 10), float32],) {
  @func_7953() /* ty=(Tensor[(7, 10, 10), float32],) */
}

def @func_1969(%var_1967: Tensor[(14, 14, 8), int16], %var_1968: Tensor[(14, 14, 8), int16]) -> Tensor[(14, 14, 8), bool] {
  @func_1965(%var_1967, %var_1968) /* ty=Tensor[(14, 14, 8), bool] */
}

def @func_6128() -> (Tensor[(4, 12, 13), bool],) {
  %432 = fn () -> (Tensor[(4, 12, 13), bool],) {
    %430 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
    %431 = %430.0;
    (%431,)
  };
  %432() /* ty=(Tensor[(4, 12, 13), bool],) */
}

def @func_3505(%var_3482: float64, %var_3483: Tensor[(9, 7, 1), float64], %var_3495: Tensor[(275), float64]) -> (Tensor[(11, 5, 5), float64], Tensor[(275), float64], Tensor[(9, 7, ?), uint64]) {
  %433 = cast(%var_3495, dtype="float64") /* ty=Tensor[(275), float64] */;
  %434 = reshape(%433, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float64] */;
  %435 = cast(%var_3482, dtype="float64") /* ty=float64 */;
  %436 = cast(%var_3483, dtype="float64") /* ty=Tensor[(9, 7, 1), float64] */;
  %437 = multiply(%435, %436) /* ty=Tensor[(9, 7, 1), float64] */;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(9, 7, 1), float64] */;
  %439 = exp(%438) /* ty=Tensor[(9, 7, 1), float64] */;
  %440 = cast(%var_3483, dtype="uint64") /* ty=Tensor[(9, 7, 1), uint64] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="uint64") /* ty=Tensor[(9, 7, 1), uint64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %444 = @func_1142(%434) /* ty=Tensor[(11, 5, 5), float64] */;
  %445 = left_shift(%442, %443) /* ty=Tensor[(9, 7, ?), uint64] */;
  (%444, %var_3495, %445)
}

def @func_7953() -> (Tensor[(7, 10, 10), float32],) {
  %446 = @func_6218() /* ty=Tensor[(7, 10, 10), float32] */;
  (%446,)
}

def @func_6702(%var_6700: Tensor[(7, 10, 10), float32]) -> Tensor[(7, 10, 10), bool] {
  @func_6699(%var_6700) /* ty=Tensor[(7, 10, 10), bool] */
}

def @func_4251() -> Tensor[(2, 5, ?), float64] {
  %458 = fn () -> Tensor[(2, 5, ?), float64] {
    %447 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 1), float32] */;
    %448 = log(%447) /* ty=Tensor[(2, 5, 1), float32] */;
    %449 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 5, 1), float32] */, dtype="int32") /* ty=Tensor[(2, 5, 1), int32] */;
    %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
    %451 = cast(%448, dtype="int32") /* ty=Tensor[(2, 5, 1), int32] */;
    %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %453 = add(%451, %452) /* ty=Tensor[(2, 5, ?), int32] */;
    %454 = cast(%453, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
    %455 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(2, 5, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %456 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 5, 1), float32] */, dtype="float64") /* ty=Tensor[(2, 5, 1), float64] */;
    %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%456, %457) /* ty=Tensor[(2, 5, ?), float64] */
  };
  %458() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_5707(%var_5693: Tensor[(275), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], Tensor[(275), float64], Tensor[(3, 6, 14), uint64], Tensor[(120), int32], uint64) {
  %459 = @func_4317() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %460 = cast(%var_5693, dtype="float64") /* ty=Tensor[(275), float64] */;
  %461 = reshape(%460, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float64] */;
  %462 = cast(meta[relay.Constant][31] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %463 = cast(meta[relay.Constant][32] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %464 = reshape(%462, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int32] */;
  %465 = reshape(%463, newshape=[]) /* ty=uint64 */;
  %466 = @func_761(%464, %465) /* ty=(Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) */;
  %467 = %459.0;
  %468 = @func_1142(%461) /* ty=Tensor[(11, 5, 5), float64] */;
  %469 = %466.1;
  (%467, %468, %var_5693, %469, meta[relay.Constant][31] /* ty=Tensor[(120), int32] */, meta[relay.Constant][32] /* ty=uint64 */)
}

def @func_1890(%var_1840: Tensor[(2, 16, 15), float32]) -> (Tensor[(3, 6, 14), uint64], uint64, Tensor[(2, 16, 15), float32]) {
  %470 = cast(meta[relay.Constant][33] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %471 = reshape(%470, newshape=[]) /* ty=uint64 */;
  %472 = @func_492(%471) /* ty=(Tensor[(3, 6, 14), uint64],) */;
  %473 = cast(%var_1840, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %474 = log2(%473) /* ty=Tensor[(2, 16, 15), float32] */;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %476 = %472.0;
  %477 = atan(%475) /* ty=Tensor[(2, 16, 15), float32] */;
  (%476, meta[relay.Constant][33] /* ty=uint64 */, %477)
}

def @func_991(%var_989: Tensor[(8, 15, 11), uint32], %var_990: Tensor[(26), float64]) -> (Tensor[(8, 15, 11), bool], Tensor[(3, 6, 14), uint64], Tensor[(26), bool], Tensor[(2, 13, 1), float64]) {
  %508 = fn (%var_917: Tensor[(8, 15, 11), uint32], %var_949: Tensor[(26), float64]) -> (Tensor[(8, 15, 11), bool], Tensor[(3, 6, 14), uint64], Tensor[(26), bool], Tensor[(2, 13, 1), float64]) {
    %478 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 15, 11), uint32] */, dtype="bool") /* ty=Tensor[(1, 15, 11), bool] */;
    %479 = cast(%var_917, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
    %480 = cast(meta[relay.Constant][35] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %481 = reshape(%480, newshape=[]) /* ty=uint64 */;
    %482 = @func_492(%481) /* ty=(Tensor[(3, 6, 14), uint64],) */;
    %483 = cast(%var_949, dtype="bool") /* ty=Tensor[(26), bool] */;
    %484 = cast(meta[relay.Constant][35] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %485 = greater(%483, %484) /* ty=Tensor[(26), bool] */;
    %486 = cast(meta[relay.Constant][35] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
    %487 = cast(%var_949, dtype="float64") /* ty=Tensor[(26), float64] */;
    %488 = reshape(%486, newshape=[]) /* ty=float64 */;
    %489 = reshape(%487, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
    %490 = @func_418(%488, %489) /* ty=Tensor[(2, 13, 1), float64] */;
    %491 = cast(%490, dtype="bool") /* ty=Tensor[(2, 13, 1), bool] */;
    %492 = cast(meta[relay.Constant][35] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %493 = logical_or(%491, %492) /* ty=Tensor[(2, 13, 1), bool] */;
    %494 = cast(%493, dtype="float64") /* ty=Tensor[(2, 13, 1), float64] */;
    %495 = atanh(%494) /* ty=Tensor[(2, 13, 1), float64] */;
    %496 = cast(%495, dtype="bool") /* ty=Tensor[(2, 13, 1), bool] */;
    %497 = shape_of(%485, dtype="int32") /* ty=Tensor[(1), int32] */;
    %498 = cast(%485, dtype="bool") /* ty=Tensor[(26), bool] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?), bool] */;
    %500 = cast(meta[relay.Constant][35] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
    %501 = cast(%493, dtype="float64") /* ty=Tensor[(2, 13, 1), float64] */;
    %502 = reshape(%500, newshape=[]) /* ty=float64 */;
    %503 = reshape(%501, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
    %504 = less_equal(%478, %479) /* ty=Tensor[(8, 15, 11), bool] */;
    %505 = %482.0;
    %506 = equal(%498, %499) /* ty=Tensor[(26), bool] */;
    %507 = @func_418(%502, %503) /* ty=Tensor[(2, 13, 1), float64] */;
    (%504, %505, %506, %507)
  };
  %508(%var_989, %var_990) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(3, 6, 14), uint64], Tensor[(26), bool], Tensor[(2, 13, 1), float64]) */
}

def @func_4445(%var_4443: Tensor[(8, 4, 2), float32], %var_4444: Tensor[(8, 4, 2), float32]) -> (Tensor[(8, 4, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(546, 1), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), int16], Tensor[(2, 5, ?), bool]) {
  %532 = fn (%var_4367: Tensor[(8, 4, 2), float32], %var_4368: Tensor[(8, 4, 2), float32]) -> (Tensor[(8, 4, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(546, 1), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), int16], Tensor[(2, 5, ?), bool]) {
    %509 = cast(%var_4368, dtype="float32") /* ty=Tensor[(8, 4, 2), float32] */;
    %510 = shape_of(%var_4367, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%var_4367, dtype="float32") /* ty=Tensor[(8, 4, 2), float32] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %513 = cast(meta[relay.Constant][36] /* ty=Tensor[(546, 1), float32] */, dtype="float32") /* ty=Tensor[(546, 1), float32] */;
    %514 = reshape(%513, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), float32] */;
    %515 = @func_3222(%514) /* ty=(Tensor[(6, 7, 13), float32],) */;
    %516 = cast(meta[relay.Constant][37] /* ty=Tensor[(1568), int16] */, dtype="int16") /* ty=Tensor[(1568), int16] */;
    %517 = cast(meta[relay.Constant][37] /* ty=Tensor[(1568), int16] */, dtype="int16") /* ty=Tensor[(1568), int16] */;
    %518 = reshape(%516, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), int16] */;
    %519 = reshape(%517, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), int16] */;
    %520 = @func_4317() /* ty=(Tensor[(2, 5, ?), float64],) */;
    %521 = %520.0;
    %522 = cast(%521, dtype="float32") /* ty=Tensor[(2, 5, ?), float32] */;
    %523 = acosh(%522) /* ty=Tensor[(2, 5, ?), float32] */;
    %524 = cast(%521, dtype="bool") /* ty=Tensor[(2, 5, ?), bool] */;
    %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
    %526 = cast(%523, dtype="bool") /* ty=Tensor[(2, 5, ?), bool] */;
    %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %528 = divide(%511, %512) /* ty=Tensor[(8, 4, 2), float32] */;
    %529 = %515.0;
    %530 = @func_1965(%518, %519) /* ty=Tensor[(14, 14, 8), bool] */;
    %531 = logical_and(%526, %527) /* ty=Tensor[(2, 5, ?), bool] */;
    (%528, %529, meta[relay.Constant][36] /* ty=Tensor[(546, 1), float32] */, %530, meta[relay.Constant][37] /* ty=Tensor[(1568), int16] */, %531)
  };
  %532(%var_4443, %var_4444) /* ty=(Tensor[(8, 4, 2), float32], Tensor[(6, 7, 13), float32], Tensor[(546, 1), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), int16], Tensor[(2, 5, ?), bool]) */
}

def @func_5553() -> Tensor[(275, 1), float64] {
  @func_5551() /* ty=Tensor[(275, 1), float64] */
}

def @func_8628(%var_8615: Tensor[(2, 5, 2), float64]) -> Tensor[(2, 5, 2), bool] {
  %533 = @func_6391() /* ty=Tensor[(2, 5, ?), float64] */;
  %534 = cast(%533, dtype="bool") /* ty=Tensor[(2, 5, ?), bool] */;
  %535 = cast(%var_8615, dtype="bool") /* ty=Tensor[(2, 5, 2), bool] */;
  equal(%534, %535) /* ty=Tensor[(2, 5, 2), bool] */
}

def @func_5834(%var_5813: Tensor[(26), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(26), bool], Tensor[(1320), uint32], Tensor[(26), float64], Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), bool]) {
  %536 = cast(meta[relay.Constant][38] /* ty=Tensor[(1320), uint32] */, dtype="uint32") /* ty=Tensor[(1320), uint32] */;
  %537 = cast(%var_5813, dtype="float64") /* ty=Tensor[(26), float64] */;
  %538 = reshape(%536, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), uint32] */;
  %539 = reshape(%537, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %540 = @func_988(%538, %539) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(3, 6, 14), uint64], Tensor[(26), bool], Tensor[(2, 13, 1), float64]) */;
  %541 = @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */;
  %542 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
  %543 = @func_5773() /* ty=Tensor[(2, 5, ?), float64] */;
  %544 = %540.2;
  %545 = %541.0;
  %546 = %542.0;
  (%543, %544, meta[relay.Constant][38] /* ty=Tensor[(1320), uint32] */, %var_5813, %545, %546)
}

def @func_2639(%var_2630: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), bool],) {
  %547 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 16, 6), bool] */, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %548 = shape_of(%var_2630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%var_2630, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = logical_or(%549, %550) /* ty=Tensor[(3, 16, 6), bool] */;
  (%551,)
}

def @func_7486() -> (Tensor[(7, 16, 13), float64], Tensor[(7, 10, 10), bool], Tensor[(700, 1), float64], Tensor[(11, 15, 2), int16], Tensor[(55, 6), int16], Tensor[(275, 1), float64], Tensor[(4, 12, 13), float64]) {
  %566 = fn () -> (Tensor[(7, 16, 13), float64], Tensor[(7, 10, 10), bool], Tensor[(700, 1), float64], Tensor[(11, 15, 2), int16], Tensor[(55, 6), int16], Tensor[(275, 1), float64], Tensor[(4, 12, 13), float64]) {
    %552 = cast(meta[relay.Constant][40] /* ty=Tensor[(700, 1), float32] */, dtype="float32") /* ty=Tensor[(700, 1), float32] */;
    %553 = reshape(%552, newshape=[7, 10, 10]) /* ty=Tensor[(7, 10, 10), float32] */;
    %554 = cast(meta[relay.Constant][40] /* ty=Tensor[(700, 1), float32] */, dtype="float64") /* ty=Tensor[(700, 1), float64] */;
    %555 = cast(meta[relay.Constant][41] /* ty=Tensor[(55, 6), int16] */, dtype="int16") /* ty=Tensor[(55, 6), int16] */;
    %556 = reshape(%555, newshape=[11, 15, 2]) /* ty=Tensor[(11, 15, 2), int16] */;
    %557 = @func_3831(%556) /* ty=(Tensor[(11, 15, 2), int16], Tensor[(11, 15, 2), float32]) */;
    %558 = @func_6656() /* ty=Tensor[(4, 12, 13), bool] */;
    %559 = cast(%558, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
    %560 = @func_7192() /* ty=Tensor[(7, 16, 13), float64] */;
    %561 = @func_6699(%553) /* ty=Tensor[(7, 10, 10), bool] */;
    %562 = tan(%554) /* ty=Tensor[(700, 1), float64] */;
    %563 = %557.0;
    %564 = @func_5551() /* ty=Tensor[(275, 1), float64] */;
    %565 = cos(%559) /* ty=Tensor[(4, 12, 13), float64] */;
    (%560, %561, %562, %563, meta[relay.Constant][41] /* ty=Tensor[(55, 6), int16] */, %564, %565)
  };
  %566() /* ty=(Tensor[(7, 16, 13), float64], Tensor[(7, 10, 10), bool], Tensor[(700, 1), float64], Tensor[(11, 15, 2), int16], Tensor[(55, 6), int16], Tensor[(275, 1), float64], Tensor[(4, 12, 13), float64]) */
}

def @func_6662() -> (Tensor[(4, 12, 13), float64],) {
  %568 = fn () -> (Tensor[(4, 12, 13), float64],) {
    %567 = @func_6009() /* ty=Tensor[(4, 12, 13), float64] */;
    (%567,)
  };
  %568() /* ty=(Tensor[(4, 12, 13), float64],) */
}

def @func_3678(%var_3676: Tensor[(16, 4, 13), float64]) -> Tensor[(16, 4, 13), float64] {
  @func_3675(%var_3676) /* ty=Tensor[(16, 4, 13), float64] */
}

def @func_5653() -> (Tensor[(275, 1), float64],) {
  %569 = @func_5551() /* ty=Tensor[(275, 1), float64] */;
  (%569,)
}

def @func_4333() -> (Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) {
  @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */
}

def @func_2531(%var_2510: float64, %var_2511: Tensor[(16, 16, 12), float64], %var_2523: Tensor[(26), float64]) -> (Tensor[(16, 16, 12), float64], Tensor[(26), float64], Tensor[(90), int32], Tensor[(5, 234), int32], Tensor[(26), float64]) {
  %570 = cast(%var_2510, dtype="float64") /* ty=float64 */;
  %571 = cast(%var_2511, dtype="float64") /* ty=Tensor[(16, 16, 12), float64] */;
  %572 = cast(meta[relay.Constant][42] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
  %573 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 234), int32] */, dtype="int32") /* ty=Tensor[(5, 234), int32] */;
  %574 = cast(%var_2523, dtype="float64") /* ty=Tensor[(26), float64] */;
  %575 = reshape(%572, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %576 = reshape(%573, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), int32] */;
  %577 = reshape(%574, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %578 = @func_2375(%575, %576, %577) /* ty=(Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %579 = minimum(%570, %571) /* ty=Tensor[(16, 16, 12), float64] */;
  %580 = %578.5;
  (%579, %580, meta[relay.Constant][42] /* ty=Tensor[(90), int32] */, meta[relay.Constant][43] /* ty=Tensor[(5, 234), int32] */, %var_2523)
}

def @func_6646() -> Tensor[(2, 5, ?), float64] {
  @func_5476() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_7165(%var_7163: Tensor[(63), int16]) -> (Tensor[(4, 12, 13), float64], Tensor[(3, 6, 14), uint64], Tensor[(26), float64], Tensor[(273), int32], Tensor[(4, 208), float64], Tensor[(63), int16], float64, uint64) {
  @func_7162(%var_7163) /* ty=(Tensor[(4, 12, 13), float64], Tensor[(3, 6, 14), uint64], Tensor[(26), float64], Tensor[(273), int32], Tensor[(4, 208), float64], Tensor[(63), int16], float64, uint64) */
}

def @func_5915(%var_5901: uint64) -> (Tensor[(275, 1), float64], uint64, Tensor[(3, 40), int32], uint64, float64) {
  %581 = @func_5551() /* ty=Tensor[(275, 1), float64] */;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(275, 1), float64] */;
  %583 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 40), int32] */, dtype="int32") /* ty=Tensor[(3, 40), int32] */;
  %584 = cast(%var_5901, dtype="uint64") /* ty=uint64 */;
  %585 = reshape(%583, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int32] */;
  %586 = reshape(%584, newshape=[]) /* ty=uint64 */;
  %587 = @func_761(%585, %586) /* ty=(Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) */;
  %588 = @func_5646() /* ty=(float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) */;
  %589 = cos(%582) /* ty=Tensor[(275, 1), float64] */;
  %590 = %587.2;
  %591 = %588.0;
  (%589, %590, meta[relay.Constant][44] /* ty=Tensor[(3, 40), int32] */, %var_5901, %591)
}

def @func_2536(%var_2533: float64, %var_2534: Tensor[(16, 16, 12), float64], %var_2535: Tensor[(26), float64]) -> (Tensor[(16, 16, 12), float64], Tensor[(26), float64], Tensor[(90), int32], Tensor[(5, 234), int32], Tensor[(26), float64]) {
  @func_2531(%var_2533, %var_2534, %var_2535) /* ty=(Tensor[(16, 16, 12), float64], Tensor[(26), float64], Tensor[(90), int32], Tensor[(5, 234), int32], Tensor[(26), float64]) */
}

def @func_4676(%var_4583: Tensor[(26), float64], %var_4590: Tensor[(273), int32], %var_4600: Tensor[(832), float64], %var_4662: Tensor[(63), int16]) -> (Tensor[(3, 6, 14), uint64], Tensor[(90, 1), int32], Tensor[(1170), int32], Tensor[(26), float64], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), int32], Tensor[(120), int32], uint64, Tensor[(11, 5, 5), float64], Tensor[(16, 16, 12), float64], Tensor[(3072), float64], Tensor[(3, 3, 7), bool], Tensor[(63), int16]) {
  %592 = cast(meta[relay.Constant][45] /* ty=Tensor[(90, 1), int32] */, dtype="int32") /* ty=Tensor[(90, 1), int32] */;
  %593 = cast(meta[relay.Constant][46] /* ty=Tensor[(1170), int32] */, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %594 = cast(%var_4583, dtype="float64") /* ty=Tensor[(26), float64] */;
  %595 = reshape(%592, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %596 = reshape(%593, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), int32] */;
  %597 = reshape(%594, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %598 = @func_2375(%595, %596, %597) /* ty=(Tensor[(15, 13, 6), bool], Tensor[(3, 6, 14), uint64], uint64, Tensor[(15, 13, 6), uint64], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %599 = cast(%var_4590, dtype="int32") /* ty=Tensor[(273), int32] */;
  %600 = cast(%var_4590, dtype="int32") /* ty=Tensor[(273), int32] */;
  %601 = reshape(%599, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %602 = reshape(%600, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %603 = @func_3977(%601, %602) /* ty=(Tensor[(7, 13, 3), bool],) */;
  %604 = cast(%var_4600, dtype="float64") /* ty=Tensor[(832), float64] */;
  %605 = cast(%var_4600, dtype="float64") /* ty=Tensor[(832), float64] */;
  %606 = reshape(%604, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %607 = reshape(%605, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %608 = @func_3244(%606, %607) /* ty=(Tensor[(8, 8, 13), float64],) */;
  %609 = cast(meta[relay.Constant][47] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %610 = cast(meta[relay.Constant][48] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %611 = reshape(%609, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), int32] */;
  %612 = reshape(%610, newshape=[]) /* ty=uint64 */;
  %613 = @func_761(%611, %612) /* ty=(Tensor[(10, 3, 4), int32], Tensor[(3, 6, 14), uint64], uint64, Tensor[(10, 3, 4), float32]) */;
  %614 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %615 = %614.1;
  %616 = cast(%615, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %617 = cosh(%616) /* ty=Tensor[(11, 5, 5), float32] */;
  %618 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 5, 5), float32] */, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%617, dtype="bool") /* ty=Tensor[(11, 5, 5), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %622 = greater(%620, %621) /* ty=Tensor[(11, 5, 5), bool] */;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
  %624 = atanh(%623) /* ty=Tensor[(11, 5, 5), float64] */;
  %625 = cast(%624, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
  %626 = cast(meta[relay.Constant][48] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %627 = cast(meta[relay.Constant][50] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %628 = cast(%var_4583, dtype="float64") /* ty=Tensor[(26), float64] */;
  %629 = reshape(%626, newshape=[]) /* ty=float64 */;
  %630 = reshape(%627, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), float64] */;
  %631 = reshape(%628, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %632 = @func_2531(%629, %630, %631) /* ty=(Tensor[(16, 16, 12), float64], Tensor[(26), float64], Tensor[(90), int32], Tensor[(5, 234), int32], Tensor[(26), float64]) */;
  %633 = cast(meta[relay.Constant][48] /* ty=uint64 */, dtype="int16") /* ty=int16 */;
  %634 = cast(%var_4662, dtype="int16") /* ty=Tensor[(63), int16] */;
  %635 = cast(%var_4583, dtype="float64") /* ty=Tensor[(26), float64] */;
  %636 = reshape(%633, newshape=[]) /* ty=int16 */;
  %637 = reshape(%634, newshape=[3, 3, 7]) /* ty=Tensor[(3, 3, 7), int16] */;
  %638 = reshape(%635, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %639 = @func_443(%636, %637, %638) /* ty=(Tensor[(3, 3, 7), bool], Tensor[(2, 13, 1), float64], Tensor[(26), float64]) */;
  %640 = %598.1;
  %641 = %603.0;
  %642 = %608.0;
  %643 = %613.0;
  %644 = sinh(%625) /* ty=Tensor[(11, 5, 5), float64] */;
  %645 = %632.0;
  %646 = %639.0;
  (%640, meta[relay.Constant][45] /* ty=Tensor[(90, 1), int32] */, meta[relay.Constant][46] /* ty=Tensor[(1170), int32] */, %var_4583, %641, %var_4590, %642, %var_4600, %643, meta[relay.Constant][47] /* ty=Tensor[(120), int32] */, meta[relay.Constant][48] /* ty=uint64 */, %644, %645, meta[relay.Constant][50] /* ty=Tensor[(3072), float64] */, %646, %var_4662)
}

def @func_5176(%var_5173: Tensor[(550), float32]) -> (Tensor[(11, 5, 5), float64], Tensor[(275, 1), float64], Tensor[(550), float32]) {
  %647 = @func_4821() /* ty=Tensor[(11, 5, 5), float32] */;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
  %649 = cast(%var_5173, dtype="float32") /* ty=Tensor[(550), float32] */;
  %650 = reshape(%649, newshape=[275, 2]) /* ty=Tensor[(275, 2), float32] */;
  %651 = @func_4962(%650) /* ty=(Tensor[(275, ?), int32], Tensor[(275, 1), float64], Tensor[(275, 2), bool]) */;
  %652 = rsqrt(%648) /* ty=Tensor[(11, 5, 5), float64] */;
  %653 = %651.1;
  (%652, %653, %var_5173)
}

def @main() -> Tensor[(275, 1), float32] {
  %654 = @func_8101() /* ty=(Tensor[(275, 1), float32],) */;
  %655 = %654.0;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(275, 1), float32] */;
  sinh(%656) /* ty=Tensor[(275, 1), float32] */
}

def @func_7857(%var_7853: Tensor[(1, 26), float64], %var_7854: Tensor[(273), int32], %var_7855: Tensor[(832), float64], %var_7856: Tensor[(63), int16]) -> (Tensor[(7, 16, 13), float64], Tensor[(16, 16, 12), float64], Tensor[(1, 26), float64], Tensor[(273), int32], Tensor[(832), float64], Tensor[(63), int16]) {
  %668 = fn (%var_7843: Tensor[(1, 26), float64], %var_7844: Tensor[(273), int32], %var_7845: Tensor[(832), float64], %var_7846: Tensor[(63), int16]) -> (Tensor[(7, 16, 13), float64], Tensor[(16, 16, 12), float64], Tensor[(1, 26), float64], Tensor[(273), int32], Tensor[(832), float64], Tensor[(63), int16]) {
    %657 = cast(%var_7843, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
    %658 = cast(%var_7844, dtype="int32") /* ty=Tensor[(273), int32] */;
    %659 = cast(%var_7845, dtype="float64") /* ty=Tensor[(832), float64] */;
    %660 = cast(%var_7846, dtype="int16") /* ty=Tensor[(63), int16] */;
    %661 = reshape(%657, newshape=[26]) /* ty=Tensor[(26), float64] */;
    %662 = reshape(%658, newshape=[273]) /* ty=Tensor[(273), int32] */;
    %663 = reshape(%659, newshape=[832]) /* ty=Tensor[(832), float64] */;
    %664 = reshape(%660, newshape=[63]) /* ty=Tensor[(63), int16] */;
    %665 = @func_4676(%661, %662, %663, %664) /* ty=(Tensor[(3, 6, 14), uint64], Tensor[(90, 1), int32], Tensor[(1170), int32], Tensor[(26), float64], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), int32], Tensor[(120), int32], uint64, Tensor[(11, 5, 5), float64], Tensor[(16, 16, 12), float64], Tensor[(3072), float64], Tensor[(3, 3, 7), bool], Tensor[(63), int16]) */;
    %666 = @func_7192() /* ty=Tensor[(7, 16, 13), float64] */;
    %667 = %665.12;
    (%666, %667, %var_7843, %var_7844, %var_7845, %var_7846)
  };
  %668(%var_7853, %var_7854, %var_7855, %var_7856) /* ty=(Tensor[(7, 16, 13), float64], Tensor[(16, 16, 12), float64], Tensor[(1, 26), float64], Tensor[(273), int32], Tensor[(832), float64], Tensor[(63), int16]) */
}

def @func_6476() -> (Tensor[(11, 5, 5), float32],) {
  %673 = fn () -> (Tensor[(11, 5, 5), float32],) {
    %669 = @func_6321() /* ty=(float64, Tensor[(11, 5, 5), float32]) */;
    %670 = %669.1;
    %671 = cast(%670, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
    %672 = tan(%671) /* ty=Tensor[(11, 5, 5), float32] */;
    (%672,)
  };
  %673() /* ty=(Tensor[(11, 5, 5), float32],) */
}

def @func_5477() -> Tensor[(2, 5, ?), float64] {
  %675 = fn () -> Tensor[(2, 5, ?), float64] {
    %674 = @func_4364() /* ty=(Tensor[(275, 1), float32], Tensor[(275, 1), float32], Tensor[(2, 5, ?), float64]) */;
    %674.2
  };
  %675() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_6010() -> Tensor[(4, 12, 13), float64] {
  %679 = fn () -> Tensor[(4, 12, 13), float64] {
    %676 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
    %677 = %676.0;
    %678 = cast(%677, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
    exp(%678) /* ty=Tensor[(4, 12, 13), float64] */
  };
  %679() /* ty=Tensor[(4, 12, 13), float64] */
}

def @func_6376() -> Tensor[(2, 5, ?), float64] {
  @func_5476() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_5974(%var_5953: Tensor[(7, 78), float32]) -> (float64, Tensor[(6, 7, 13), float32], Tensor[(7, 78), uint8]) {
  %680 = @func_4542() /* ty=(float64,) */;
  %681 = cast(meta[relay.Constant][51] /* ty=Tensor[(7, 78), float32] */, dtype="float32") /* ty=Tensor[(7, 78), float32] */;
  %682 = reshape(%681, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), float32] */;
  %683 = @func_3222(%682) /* ty=(Tensor[(6, 7, 13), float32],) */;
  %684 = cast(%var_5953, dtype="uint8") /* ty=Tensor[(7, 78), uint8] */;
  %685 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(7, 78), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %686 = cast(meta[relay.Constant][51] /* ty=Tensor[(7, 78), float32] */, dtype="uint8") /* ty=Tensor[(7, 78), uint8] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %688 = %680.0;
  %689 = %683.0;
  %690 = logical_xor(%686, %687) /* ty=Tensor[(7, 78), uint8] */;
  (%688, %689, %690)
}

def @func_6206() -> (Tensor[(11, 5, 5), float32], Tensor[(7, 10, 10), uint32]) {
  %694 = fn () -> (Tensor[(11, 5, 5), float32], Tensor[(7, 10, 10), uint32]) {
    %691 = @func_5785() /* ty=(Tensor[(7, 10, 10), uint32],) */;
    %692 = @func_4821() /* ty=Tensor[(11, 5, 5), float32] */;
    %693 = %691.0;
    (%692, %693)
  };
  %694() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(7, 10, 10), uint32]) */
}

def @func_8631(%var_8629: Tensor[(2, 5, 2), float64]) -> Tensor[(2, 5, 2), bool] {
  @func_8628(%var_8629) /* ty=Tensor[(2, 5, 2), bool] */
}

def @func_2642(%var_2640: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), bool],) {
  @func_2639(%var_2640) /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_4331() -> (Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) {
  %695 = @func_4317() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %696 = cast(-5.60396f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %697 = cast(meta[relay.Constant][52] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %698 = cast(meta[relay.Constant][53] /* ty=Tensor[(275, 1), float64] */, dtype="float64") /* ty=Tensor[(275, 1), float64] */;
  %699 = reshape(%696, newshape=[]) /* ty=float64 */;
  %700 = reshape(%697, newshape=[9, 7, 1]) /* ty=Tensor[(9, 7, 1), float64] */;
  %701 = reshape(%698, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %702 = @func_3505(%699, %700, %701) /* ty=(Tensor[(11, 5, 5), float64], Tensor[(275), float64], Tensor[(9, 7, ?), uint64]) */;
  %703 = %695.0;
  %704 = %702.0;
  (%703, %704, -5.60396f64 /* ty=float64 */, meta[relay.Constant][52] /* ty=Tensor[(63), float64] */, meta[relay.Constant][53] /* ty=Tensor[(275, 1), float64] */)
}

def @func_5918(%var_5916: uint64) -> (Tensor[(275, 1), float64], uint64, Tensor[(3, 40), int32], uint64, float64) {
  @func_5915(%var_5916) /* ty=(Tensor[(275, 1), float64], uint64, Tensor[(3, 40), int32], uint64, float64) */
}

def @func_8101() -> (Tensor[(275, 1), float32],) {
  %707 = fn () -> (Tensor[(275, 1), float32],) {
    %705 = @func_4364() /* ty=(Tensor[(275, 1), float32], Tensor[(275, 1), float32], Tensor[(2, 5, ?), float64]) */;
    %706 = %705.0;
    (%706,)
  };
  %707() /* ty=(Tensor[(275, 1), float32],) */
}

def @func_6648() -> Tensor[(2, 5, ?), float64] {
  @func_6646() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_7357(%var_7356: Tensor[(273), int32]) -> (Tensor[(3, 12, 3), float32], Tensor[(273, 1), int32], Tensor[(273), int32]) {
  %714 = fn (%var_7350: Tensor[(273), int32]) -> (Tensor[(3, 12, 3), float32], Tensor[(273, 1), int32], Tensor[(273), int32]) {
    %708 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
    %709 = cast(%var_7350, dtype="int32") /* ty=Tensor[(273), int32] */;
    %710 = reshape(%709, newshape=[273, 1]) /* ty=Tensor[(273, 1), int32] */;
    %711 = @func_4291(%710) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(7, 13, 3), bool], Tensor[(273, 1), int32]) */;
    %712 = sqrt(%708) /* ty=Tensor[(3, 12, 3), float32] */;
    %713 = %711.2;
    (%712, %713, %var_7350)
  };
  %714(%var_7356) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(273, 1), int32], Tensor[(273), int32]) */
}

def @func_5103() -> Tensor[(11, 5, 5), float32] {
  %716 = fn () -> Tensor[(11, 5, 5), float32] {
    %715 = @func_4914() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(4, 12, 13), float32], float64, float64, Tensor[(26), float64]) */;
    %715.0
  };
  %716() /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_4682(%var_4678: Tensor[(26), float64], %var_4679: Tensor[(273), int32], %var_4680: Tensor[(832), float64], %var_4681: Tensor[(63), int16]) -> (Tensor[(3, 6, 14), uint64], Tensor[(90, 1), int32], Tensor[(1170), int32], Tensor[(26), float64], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), int32], Tensor[(120), int32], uint64, Tensor[(11, 5, 5), float64], Tensor[(16, 16, 12), float64], Tensor[(3072), float64], Tensor[(3, 3, 7), bool], Tensor[(63), int16]) {
  @func_4676(%var_4678, %var_4679, %var_4680, %var_4681) /* ty=(Tensor[(3, 6, 14), uint64], Tensor[(90, 1), int32], Tensor[(1170), int32], Tensor[(26), float64], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), int32], Tensor[(120), int32], uint64, Tensor[(11, 5, 5), float64], Tensor[(16, 16, 12), float64], Tensor[(3072), float64], Tensor[(3, 3, 7), bool], Tensor[(63), int16]) */
}

def @func_4542() -> (float64,) {
  %717 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %718 = %717.2;
  (%718,)
}

def @func_6391() -> Tensor[(2, 5, ?), float64] {
  @func_5476() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_6955() -> Tensor[(11, 5, 5), float32] {
  @func_6953() /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_8130() -> Tensor[(11, 5, 5), float32] {
  %720 = fn () -> Tensor[(11, 5, 5), float32] {
    %719 = @func_6475() /* ty=(Tensor[(11, 5, 5), float32],) */;
    %719.0
  };
  %720() /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_5751() -> (Tensor[(7, 10, 10), uint32],) {
  @func_5749() /* ty=(Tensor[(7, 10, 10), uint32],) */
}

def @func_6444() -> Tensor[(11, 5, 5), float32] {
  @func_6442() /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_7162(%var_7154: Tensor[(63), int16]) -> (Tensor[(4, 12, 13), float64], Tensor[(3, 6, 14), uint64], Tensor[(26), float64], Tensor[(273), int32], Tensor[(4, 208), float64], Tensor[(63), int16], float64, uint64) {
  %721 = @func_6661() /* ty=(Tensor[(4, 12, 13), float64],) */;
  %722 = cast(meta[relay.Constant][55] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %723 = cast(meta[relay.Constant][56] /* ty=Tensor[(273), int32] */, dtype="int32") /* ty=Tensor[(273), int32] */;
  %724 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 208), float64] */, dtype="float64") /* ty=Tensor[(4, 208), float64] */;
  %725 = cast(%var_7154, dtype="int16") /* ty=Tensor[(63), int16] */;
  %726 = reshape(%722, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %727 = reshape(%723, newshape=[273]) /* ty=Tensor[(273), int32] */;
  %728 = reshape(%724, newshape=[832]) /* ty=Tensor[(832), float64] */;
  %729 = reshape(%725, newshape=[63]) /* ty=Tensor[(63), int16] */;
  %730 = @func_4676(%726, %727, %728, %729) /* ty=(Tensor[(3, 6, 14), uint64], Tensor[(90, 1), int32], Tensor[(1170), int32], Tensor[(26), float64], Tensor[(7, 13, 3), bool], Tensor[(273), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(10, 3, 4), int32], Tensor[(120), int32], uint64, Tensor[(11, 5, 5), float64], Tensor[(16, 16, 12), float64], Tensor[(3072), float64], Tensor[(3, 3, 7), bool], Tensor[(63), int16]) */;
  %731 = cast(meta[relay.Constant][58] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %732 = reshape(%731, newshape=[]) /* ty=uint64 */;
  %733 = @func_5915(%732) /* ty=(Tensor[(275, 1), float64], uint64, Tensor[(3, 40), int32], uint64, float64) */;
  %734 = %721.0;
  %735 = %730.0;
  %736 = %733.4;
  (%734, %735, meta[relay.Constant][55] /* ty=Tensor[(26), float64] */, meta[relay.Constant][56] /* ty=Tensor[(273), int32] */, meta[relay.Constant][57] /* ty=Tensor[(4, 208), float64] */, %var_7154, %736, meta[relay.Constant][58] /* ty=uint64 */)
}

def @func_7567() -> (Tensor[(275, 1), float64],) {
  %739 = fn () -> (Tensor[(275, 1), float64],) {
    %737 = @func_5653() /* ty=(Tensor[(275, 1), float64],) */;
    %738 = %737.0;
    (%738,)
  };
  %739() /* ty=(Tensor[(275, 1), float64],) */
}

def @func_8160() -> (Tensor[(7, 10, 10), float64], Tensor[(3, 6, 14), uint64], Tensor[(1320), uint32], Tensor[(26), float64]) {
  %749 = fn () -> (Tensor[(7, 10, 10), float64], Tensor[(3, 6, 14), uint64], Tensor[(1320), uint32], Tensor[(26), float64]) {
    %740 = @func_6218() /* ty=Tensor[(7, 10, 10), float32] */;
    %741 = cast(%740, dtype="float64") /* ty=Tensor[(7, 10, 10), float64] */;
    %742 = cast(meta[relay.Constant][59] /* ty=Tensor[(1320), uint32] */, dtype="uint32") /* ty=Tensor[(1320), uint32] */;
    %743 = cast(meta[relay.Constant][60] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
    %744 = reshape(%742, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), uint32] */;
    %745 = reshape(%743, newshape=[26]) /* ty=Tensor[(26), float64] */;
    %746 = @func_988(%744, %745) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(3, 6, 14), uint64], Tensor[(26), bool], Tensor[(2, 13, 1), float64]) */;
    %747 = acosh(%741) /* ty=Tensor[(7, 10, 10), float64] */;
    %748 = %746.1;
    (%747, %748, meta[relay.Constant][59] /* ty=Tensor[(1320), uint32] */, meta[relay.Constant][60] /* ty=Tensor[(26), float64] */)
  };
  %749() /* ty=(Tensor[(7, 10, 10), float64], Tensor[(3, 6, 14), uint64], Tensor[(1320), uint32], Tensor[(26), float64]) */
}

def @func_6321() -> (float64, Tensor[(11, 5, 5), float32]) {
  %750 = @func_5646() /* ty=(float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) */;
  %751 = @func_6205() /* ty=(Tensor[(11, 5, 5), float32], Tensor[(7, 10, 10), uint32]) */;
  %752 = %750.0;
  %753 = %751.0;
  (%752, %753)
}

def @func_3675(%var_3659: Tensor[(16, 4, 13), float64]) -> Tensor[(16, 4, 13), float64] {
  %754 = cast(%var_3659, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
  atanh(%754) /* ty=Tensor[(16, 4, 13), float64] */
}

def @func_6837(%var_6836: Tensor[(2, 5, 12), float64]) -> Tensor[(2, 5, 12), int16] {
  %758 = fn (%var_6825: Tensor[(2, 5, 12), float64]) -> Tensor[(2, 5, 12), int16] {
    %755 = @func_4250() /* ty=Tensor[(2, 5, ?), float64] */;
    %756 = cast(%755, dtype="int16") /* ty=Tensor[(2, 5, ?), int16] */;
    %757 = cast(%var_6825, dtype="int16") /* ty=Tensor[(2, 5, 12), int16] */;
    bitwise_xor(%756, %757) /* ty=Tensor[(2, 5, 12), int16] */
  };
  %758(%var_6836) /* ty=Tensor[(2, 5, 12), int16] */
}

def @func_7016(%var_7015: Tensor[(2, 5, 13), float64]) -> (Tensor[(2, 5, 13), int64], Tensor[(7, 13, 3), bool]) {
  %765 = fn (%var_6992: Tensor[(2, 5, 13), float64]) -> (Tensor[(2, 5, 13), int64], Tensor[(7, 13, 3), bool]) {
    %759 = @func_6376() /* ty=Tensor[(2, 5, ?), float64] */;
    %760 = cast(%759, dtype="int64") /* ty=Tensor[(2, 5, ?), int64] */;
    %761 = cast(%var_6992, dtype="int64") /* ty=Tensor[(2, 5, 13), int64] */;
    %762 = @func_5646() /* ty=(float64, Tensor[(7, 13, 3), bool], Tensor[(273), int32]) */;
    %763 = multiply(%760, %761) /* ty=Tensor[(2, 5, 13), int64] */;
    %764 = %762.1;
    (%763, %764)
  };
  %765(%var_7015) /* ty=(Tensor[(2, 5, 13), int64], Tensor[(7, 13, 3), bool]) */
}

def @func_4962(%var_4957: Tensor[(275, 2), float32]) -> (Tensor[(275, ?), int32], Tensor[(275, 1), float64], Tensor[(275, 2), bool]) {
  %766 = @func_4364() /* ty=(Tensor[(275, 1), float32], Tensor[(275, 1), float32], Tensor[(2, 5, ?), float64]) */;
  %767 = %766.1;
  %768 = cast(meta[relay.Constant][61] /* ty=Tensor[(275, 1), float32] */, dtype="int32") /* ty=Tensor[(275, 1), int32] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(2), int32] */;
  %770 = cast(%767, dtype="int32") /* ty=Tensor[(275, 1), int32] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %772 = cast(%767, dtype="float64") /* ty=Tensor[(275, 1), float64] */;
  %773 = cast(meta[relay.Constant][61] /* ty=Tensor[(275, 1), float32] */, dtype="bool") /* ty=Tensor[(275, 1), bool] */;
  %774 = cast(%var_4957, dtype="bool") /* ty=Tensor[(275, 2), bool] */;
  %775 = bitwise_or(%770, %771) /* ty=Tensor[(275, ?), int32] */;
  %776 = tan(%772) /* ty=Tensor[(275, 1), float64] */;
  %777 = greater_equal(%773, %774) /* ty=Tensor[(275, 2), bool] */;
  (%775, %776, %777)
}

def @func_1582(%var_1579: Tensor[(13, 6, 1), float32], %var_1580: uint64, %var_1581: Tensor[(7, 9), int16]) -> (Tensor[(13, 6, 1), float32], Tensor[(10, 3, 4), float32], Tensor[(120), int32], uint64, Tensor[(26), float64], Tensor[(7, 9), int16], Tensor[(26), float64], Tensor[(3, 6, 14), uint64], Tensor[(3, 6, 14), uint64]) {
  @func_1577(%var_1579, %var_1580, %var_1581) /* ty=(Tensor[(13, 6, 1), float32], Tensor[(10, 3, 4), float32], Tensor[(120), int32], uint64, Tensor[(26), float64], Tensor[(7, 9), int16], Tensor[(26), float64], Tensor[(3, 6, 14), uint64], Tensor[(3, 6, 14), uint64]) */
}

def @func_6657() -> Tensor[(4, 12, 13), bool] {
  %779 = fn () -> Tensor[(4, 12, 13), bool] {
    %778 = @func_4567() /* ty=(Tensor[(4, 12, 13), bool],) */;
    %778.0
  };
  %779() /* ty=Tensor[(4, 12, 13), bool] */
}

def @func_8007() -> (float64, Tensor[(2, 13, ?), float64]) {
  %780 = @func_4542() /* ty=(float64,) */;
  %781 = %780.0;
  %782 = cast(%781, dtype="float64") /* ty=float64 */;
  %783 = cast(meta[relay.Constant][62] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %784 = reshape(%782, newshape=[]) /* ty=float64 */;
  %785 = reshape(%783, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float64] */;
  %786 = @func_418(%784, %785) /* ty=Tensor[(2, 13, 1), float64] */;
  %787 = cast(meta[relay.Constant][62] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%786, dtype="float64") /* ty=Tensor[(2, 13, 1), float64] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %791 = power(%789, %790) /* ty=Tensor[(2, 13, ?), float64] */;
  (%781, %791)
}

def @func_7754(%var_7753: Tensor[(4, 12, 13), float64]) -> (Tensor[(4, 12, 13), uint16], Tensor[(4, 12, 13), uint32]) {
  %803 = fn (%var_7735: Tensor[(4, 12, 13), float64]) -> (Tensor[(4, 12, 13), uint16], Tensor[(4, 12, 13), uint32]) {
    %792 = @func_6009() /* ty=Tensor[(4, 12, 13), float64] */;
    %793 = cast(%var_7735, dtype="uint16") /* ty=Tensor[(4, 12, 13), uint16] */;
    %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(3), int32] */;
    %795 = cast(%792, dtype="uint16") /* ty=Tensor[(4, 12, 13), uint16] */;
    %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %797 = cast(%var_7735, dtype="uint32") /* ty=Tensor[(4, 12, 13), uint32] */;
    %798 = shape_of(%792, dtype="int32") /* ty=Tensor[(3), int32] */;
    %799 = cast(%792, dtype="uint32") /* ty=Tensor[(4, 12, 13), uint32] */;
    %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %801 = bitwise_and(%795, %796) /* ty=Tensor[(4, 12, 13), uint16] */;
    %802 = multiply(%799, %800) /* ty=Tensor[(4, 12, 13), uint32] */;
    (%801, %802)
  };
  %803(%var_7753) /* ty=(Tensor[(4, 12, 13), uint16], Tensor[(4, 12, 13), uint32]) */
}

def @func_4568() -> (Tensor[(4, 12, 13), bool],) {
  %809 = fn () -> (Tensor[(4, 12, 13), bool],) {
    %804 = cast(meta[relay.Constant][64] /* ty=Tensor[(4, 12, 13), uint64] */, dtype="bool") /* ty=Tensor[(4, 12, 13), bool] */;
    %805 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(4, 12, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %806 = cast(meta[relay.Constant][63] /* ty=Tensor[(4, 12, 13), uint64] */, dtype="bool") /* ty=Tensor[(4, 12, 13), bool] */;
    %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %808 = greater_equal(%806, %807) /* ty=Tensor[(4, 12, 13), bool] */;
    (%808,)
  };
  %809() /* ty=(Tensor[(4, 12, 13), bool],) */
}

def @func_6323() -> (float64, Tensor[(11, 5, 5), float32]) {
  @func_6321() /* ty=(float64, Tensor[(11, 5, 5), float32]) */
}

def @func_4291(%var_4280: Tensor[(273, 1), int32]) -> (Tensor[(2, 5, ?), float64], Tensor[(7, 13, 3), bool], Tensor[(273, 1), int32]) {
  %810 = @func_4250() /* ty=Tensor[(2, 5, ?), float64] */;
  %811 = cast(%810, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  %812 = cast(%var_4280, dtype="int32") /* ty=Tensor[(273, 1), int32] */;
  %813 = cast(%var_4280, dtype="int32") /* ty=Tensor[(273, 1), int32] */;
  %814 = reshape(%812, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %815 = reshape(%813, newshape=[7, 13, 3]) /* ty=Tensor[(7, 13, 3), int32] */;
  %816 = @func_3977(%814, %815) /* ty=(Tensor[(7, 13, 3), bool],) */;
  %817 = asinh(%811) /* ty=Tensor[(2, 5, ?), float64] */;
  %818 = %816.0;
  (%817, %818, %var_4280)
}

def @func_6074(%var_6069: Tensor[(3, 16, 14), float64]) -> (Tensor[(3, 16, 14), bool],) {
  %819 = @func_4331() /* ty=(Tensor[(2, 5, ?), float64], Tensor[(11, 5, 5), float64], float64, Tensor[(63), float64], Tensor[(275, 1), float64]) */;
  %820 = %819.2;
  %821 = cast(%820, dtype="bool") /* ty=bool */;
  %822 = cast(%var_6069, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %823 = logical_and(%821, %822) /* ty=Tensor[(3, 16, 14), bool] */;
  (%823,)
}

def @func_1144(%var_1143: Tensor[(11, 5, 5), float64]) -> Tensor[(11, 5, 5), float64] {
  %825 = fn (%var_1135: Tensor[(11, 5, 5), float64]) -> Tensor[(11, 5, 5), float64] {
    %824 = cast(%var_1135, dtype="float64") /* ty=Tensor[(11, 5, 5), float64] */;
    log(%824) /* ty=Tensor[(11, 5, 5), float64] */
  };
  %825(%var_1143) /* ty=Tensor[(11, 5, 5), float64] */
}

def @func_4823() -> Tensor[(11, 5, 5), float32] {
  @func_4821() /* ty=Tensor[(11, 5, 5), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen523/build/output.py", line 2093, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:27:52] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

