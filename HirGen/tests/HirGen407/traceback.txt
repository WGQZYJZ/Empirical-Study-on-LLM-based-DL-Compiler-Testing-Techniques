==========mod==========
#[version = "0.0.5"]
def @func_2931(%var_2920: Tensor[(6, 4), float64], %var_2921: Tensor[(1575, 2), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], Tensor[(6, 4), float64], Tensor[(1575, 2), float64], Tensor[(12, 2, 9), float64]) {
  %0 = cast(%var_2920, dtype="float64") /* ty=Tensor[(6, 4), float64] */;
  %1 = cast(%var_2921, dtype="float64") /* ty=Tensor[(1575, 2), float64] */;
  %2 = cast(%var_2921, dtype="float64") /* ty=Tensor[(1575, 2), float64] */;
  %3 = reshape(%0, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %4 = reshape(%1, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %5 = reshape(%2, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %6 = @func_2668(%3, %4, %5) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), bool]) */;
  %7 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %8 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
  %9 = %6.0;
  %10 = %7.0;
  (%8, %9, %var_2920, %var_2921, %10)
}

def @func_5550(%var_5539: Tensor[(2, 7, 10), uint64]) -> (Tensor[(2, 7, 10), bool], Tensor[(2, 7, 10), float64]) {
  %11 = @func_3164() /* ty=Tensor[(1, 7, 10), uint64] */;
  %12 = cast(%11, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %13 = cast(%var_5539, dtype="bool") /* ty=Tensor[(2, 7, 10), bool] */;
  %14 = cast(%var_5539, dtype="float64") /* ty=Tensor[(2, 7, 10), float64] */;
  %15 = greater(%12, %13) /* ty=Tensor[(2, 7, 10), bool] */;
  %16 = exp(%14) /* ty=Tensor[(2, 7, 10), float64] */;
  (%15, %16)
}

def @func_3238() -> Tensor[(1, 7, 10), uint64] {
  %17 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %17.1
}

def @func_4350(%var_4337: Tensor[(9, 2, 5), float64]) -> (Tensor[(9, 2, 5), int32],) {
  %18 = @func_4303() /* ty=(Tensor[(9, 2, 5), float64],) */;
  %19 = %18.0;
  %20 = cast(%var_4337, dtype="int32") /* ty=Tensor[(9, 2, 5), int32] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="int32") /* ty=Tensor[(9, 2, 5), int32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %24 = bitwise_and(%22, %23) /* ty=Tensor[(9, 2, 5), int32] */;
  (%24,)
}

def @func_6963() -> Tensor[(1, 7, 10), uint64] {
  @func_5586() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_5581() -> (Tensor[(9, 2, 5), float64],) {
  %25 = @func_4303() /* ty=(Tensor[(9, 2, 5), float64],) */;
  %26 = %25.0;
  (%26,)
}

def @func_3582() -> (Tensor[(1, 7, 10), uint64], Tensor[(3150), bool], Tensor[(24), float64], Tensor[(45, 70), float64]) {
  %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(45, 70), float64] */, dtype="float64") /* ty=Tensor[(45, 70), float64] */;
  %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(45, 70), float64] */, dtype="float64") /* ty=Tensor[(45, 70), float64] */;
  %30 = reshape(%27, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %31 = reshape(%28, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %32 = reshape(%29, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %33 = @func_2668(%30, %31, %32) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), bool]) */;
  %34 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
  %35 = %33.3;
  (%34, %35, meta[relay.Constant][0] /* ty=Tensor[(24), float64] */, meta[relay.Constant][1] /* ty=Tensor[(45, 70), float64] */)
}

def @func_6758() -> Tensor[(15, 13, 15), float64] {
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 13, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 15), float32] */;
  %37 = log10(%36) /* ty=Tensor[(15, 13, 15), float32] */;
  %38 = cast(%37, dtype="float64") /* ty=Tensor[(15, 13, 15), float64] */;
  %39 = cos(%38) /* ty=Tensor[(15, 13, 15), float64] */;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(15, 13, 15), float64] */;
  atan(%40) /* ty=Tensor[(15, 13, 15), float64] */
}

def @func_4625() -> (Tensor[(12, 2, 9), int32],) {
  %41 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %42 = %41.0;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %44 = cosh(%43) /* ty=Tensor[(12, 2, 9), float64] */;
  %45 = cast(%44, dtype="int32") /* ty=Tensor[(12, 2, 9), int32] */;
  %46 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%42, dtype="int32") /* ty=Tensor[(12, 2, 9), int32] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %49 = minimum(%47, %48) /* ty=Tensor[(12, 2, 9), int32] */;
  (%49,)
}

def @func_6624() -> (uint64,) {
  %50 = @func_4522() /* ty=uint64 */;
  (%50,)
}

def @func_6279(%var_6201: Tensor[(4, 3, 11), float32], %var_6202: Tensor[(4, 3, 11), float32], %var_6218: Tensor[(2160), float64], %var_6238: Tensor[(360), float32]) -> (Tensor[(4, 3, 11), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(3, 10, 12), uint64], Tensor[(360), float32], Tensor[(4, 3, 11), int64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) {
  %51 = cast(%var_6202, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %52 = shape_of(%var_6201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%var_6201, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %55 = cast(%var_6218, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %56 = reshape(%55, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %57 = @func_4732(%56) /* ty=(Tensor[(16, 9, 15), float64],) */;
  %58 = cast(%var_6238, dtype="float32") /* ty=Tensor[(360), float32] */;
  %59 = reshape(%58, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
  %60 = @func_4485(%59) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(3, 10, 12), uint64]) */;
  %61 = cast(%var_6201, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %62 = sinh(%61) /* ty=Tensor[(4, 3, 11), float32] */;
  %63 = cast(%var_6202, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %67 = power(%65, %66) /* ty=Tensor[(4, 3, 11), float32] */;
  %68 = cast(%var_6202, dtype="int64") /* ty=Tensor[(4, 3, 11), int64] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="int64") /* ty=Tensor[(4, 3, 11), int64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %72 = cast(meta[relay.Constant][3] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %73 = reshape(%72, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
  %74 = @func_664(%73) /* ty=(Tensor[(15, 15, 14), float64],) */;
  %75 = floor_divide(%53, %54) /* ty=Tensor[(4, 3, 11), float32] */;
  %76 = %57.0;
  %77 = %60.1;
  %78 = bitwise_and(%70, %71) /* ty=Tensor[(4, 3, 11), int64] */;
  %79 = %74.0;
  (%75, %76, %var_6218, %77, %var_6238, %78, %79, meta[relay.Constant][3] /* ty=Tensor[(3150), float64] */)
}

def @func_2810(%var_2795: Tensor[(1, 24), float64]) -> (Tensor[(12, 2, 9), uint16], Tensor[(2, 3, 4), bool], Tensor[(1, 24), float64], Tensor[(3150), float64]) {
  %80 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %81 = %80.0;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(12, 2, 9), float32] */;
  %83 = cos(%82) /* ty=Tensor[(12, 2, 9), float32] */;
  %84 = cast(%83, dtype="uint16") /* ty=Tensor[(12, 2, 9), uint16] */;
  %85 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%81, dtype="uint16") /* ty=Tensor[(12, 2, 9), uint16] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %88 = cast(%var_2795, dtype="float64") /* ty=Tensor[(1, 24), float64] */;
  %89 = cast(meta[relay.Constant][4] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %90 = reshape(%88, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %91 = reshape(%89, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %92 = @func_2385(%90, %91) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), float64]) */;
  %93 = logical_xor(%86, %87) /* ty=Tensor[(12, 2, 9), uint16] */;
  %94 = %92.1;
  (%93, %94, %var_2795, meta[relay.Constant][4] /* ty=Tensor[(3150), float64] */)
}

def @func_4673(%var_4666: uint64) -> (Tensor[(12, 2, 9), float64], Tensor[(15, 15, 14), int8], uint64) {
  %95 = @func_4625() /* ty=(Tensor[(12, 2, 9), int32],) */;
  %96 = %95.0;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %98 = asin(%97) /* ty=Tensor[(12, 2, 9), float64] */;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %100 = cast(%var_4666, dtype="uint64") /* ty=uint64 */;
  %101 = reshape(%100, newshape=[]) /* ty=uint64 */;
  %102 = @func_3417(%101) /* ty=(Tensor[(15, 15, 14), int8], Tensor[(15, 15, 14), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), float32], Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) */;
  %103 = exp(%99) /* ty=Tensor[(12, 2, 9), float64] */;
  %104 = %102.0;
  (%103, %104, %var_4666)
}

def @func_2518() -> (Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) {
  %105 = @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */;
  %106 = %105.2;
  %107 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
  (%106, %107)
}

def @func_2427() -> (Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) {
  %108 = cast(meta[relay.Constant][5] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %109 = reshape(%108, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
  %110 = @func_664(%109) /* ty=(Tensor[(15, 15, 14), float64],) */;
  %111 = %110.0;
  %112 = cast(meta[relay.Constant][5] /* ty=Tensor[(3150), float64] */, dtype="uint16") /* ty=Tensor[(3150), uint16] */;
  %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%111, dtype="uint16") /* ty=Tensor[(15, 15, 14), uint16] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %116 = cast(meta[relay.Constant][5] /* ty=Tensor[(3150), float64] */, dtype="int8") /* ty=Tensor[(3150), int8] */;
  %117 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%111, dtype="int8") /* ty=Tensor[(15, 15, 14), int8] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %120 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %121 = maximum(%114, %115) /* ty=Tensor[(15, 15, 14), uint16] */;
  %122 = bitwise_or(%118, %119) /* ty=Tensor[(15, 15, 14), int8] */;
  (%120, %121, %122)
}

def @func_5310(%var_5272: Tensor[(11, 10, 6), uint64], %var_5281: Tensor[(24), float64]) -> (Tensor[(11, 10, 6), uint64], Tensor[(11, 10, 6), float64], Tensor[(1, 7, 10), uint64], Tensor[(24), float64], Tensor[(3150), float64]) {
  %123 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 10, 6), uint64] */, dtype="uint64") /* ty=Tensor[(11, 10, 6), uint64] */;
  %124 = shape_of(%var_5272, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%var_5272, dtype="uint64") /* ty=Tensor[(11, 10, 6), uint64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %127 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 10, 6), uint64] */, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %128 = cast(%var_5281, dtype="float64") /* ty=Tensor[(24), float64] */;
  %129 = cast(meta[relay.Constant][7] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %130 = reshape(%128, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
  %131 = reshape(%129, newshape=[1575, 2]) /* ty=Tensor[(1575, 2), float64] */;
  %132 = @func_2931(%130, %131) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], Tensor[(6, 4), float64], Tensor[(1575, 2), float64], Tensor[(12, 2, 9), float64]) */;
  %133 = bitwise_xor(%125, %126) /* ty=Tensor[(11, 10, 6), uint64] */;
  %134 = sqrt(%127) /* ty=Tensor[(11, 10, 6), float64] */;
  %135 = %132.1;
  (%133, %134, %135, %var_5281, meta[relay.Constant][7] /* ty=Tensor[(3150), float64] */)
}

def @func_6391(%var_6312: Tensor[(16, 13, 5), float64]) -> Tensor[(16, 13, 5), uint64] {
  %136 = cast(%var_6312, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
  %137 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(16, 13, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 13, 5), float64] */, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %140 = less(%138, %139) /* ty=Tensor[(16, 13, 5), bool] */;
  %141 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 13, 5), float64] */, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
  %142 = shape_of(%var_6312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%var_6312, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %145 = equal(%143, %144) /* ty=Tensor[(16, 13, 5), bool] */;
  %146 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 13, 5), bool] */, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %150 = not_equal(%148, %149) /* ty=Tensor[(16, 13, 5), bool] */;
  %151 = cast(%150, dtype="uint64") /* ty=Tensor[(16, 13, 5), uint64] */;
  %152 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%140, dtype="uint64") /* ty=Tensor[(16, 13, 5), uint64] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%153, %154) /* ty=Tensor[(16, 13, 5), uint64] */
}

def @func_3648(%var_3601: Tensor[(4, 7, 10), uint64]) -> (Tensor[(4, 7, 10), float32], Tensor[(12, 2, 9), float64], Tensor[(4, 7, 10), uint8], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) {
  %155 = cast(%var_3601, dtype="float32") /* ty=Tensor[(4, 7, 10), float32] */;
  %156 = log(%155) /* ty=Tensor[(4, 7, 10), float32] */;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(4, 7, 10), float32] */;
  %158 = acosh(%157) /* ty=Tensor[(4, 7, 10), float32] */;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(4, 7, 10), float32] */;
  %160 = asin(%159) /* ty=Tensor[(4, 7, 10), float32] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(4, 7, 10), float32] */;
  %162 = @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %163 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %164 = %163.1;
  %165 = cast(%164, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %166 = cast(%var_3601, dtype="bool") /* ty=Tensor[(4, 7, 10), bool] */;
  %167 = equal(%165, %166) /* ty=Tensor[(4, 7, 10), bool] */;
  %168 = cast(%167, dtype="uint8") /* ty=Tensor[(4, 7, 10), uint8] */;
  %169 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%156, dtype="uint8") /* ty=Tensor[(4, 7, 10), uint8] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %172 = @func_3467() /* ty=(uint64, Tensor[(1, 7, 10), uint64]) */;
  %173 = exp(%161) /* ty=Tensor[(4, 7, 10), float32] */;
  %174 = %162.0;
  %175 = minimum(%170, %171) /* ty=Tensor[(4, 7, 10), uint8] */;
  %176 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %177 = %172.1;
  (%173, %174, %175, %176, %177)
}

def @func_3279() -> (Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) {
  %178 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %179 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
  %180 = %178.0;
  (%179, %180)
}

def @func_5141() -> (Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) {
  %181 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %182 = @func_4535() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %183 = %181.1;
  %184 = %182.0;
  (%183, %184)
}

def @func_4303() -> (Tensor[(9, 2, 5), float64],) {
  %185 = @func_3945() /* ty=(Tensor[(70), uint64], Tensor[(90), float32], Tensor[(1, 7, 10), uint64], Tensor[(35, 4), uint64], Tensor[(9, 2, 5), float64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(12, 2, 9), float64]) */;
  %186 = %185.4;
  (%186,)
}

def @func_3945() -> (Tensor[(70), uint64], Tensor[(90), float32], Tensor[(1, 7, 10), uint64], Tensor[(35, 4), uint64], Tensor[(9, 2, 5), float64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(12, 2, 9), float64]) {
  %187 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %188 = cast(meta[relay.Constant][11] /* ty=Tensor[(35, 4), uint64] */, dtype="uint64") /* ty=Tensor[(35, 4), uint64] */;
  %189 = reshape(%188, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint64] */;
  %190 = @func_3822(%189) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(70), uint64], uint64, Tensor[(2, 7, 10), bool]) */;
  %191 = cast(meta[relay.Constant][10] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %192 = reshape(%191, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), float32] */;
  %193 = @func_1385(%192) /* ty=(Tensor[(9, 2, 5), float32],) */;
  %194 = %193.0;
  %195 = cast(%194, dtype="float64") /* ty=Tensor[(9, 2, 5), float64] */;
  %196 = cast(meta[relay.Constant][12] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %197 = reshape(%196, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
  %198 = @func_664(%197) /* ty=(Tensor[(15, 15, 14), float64],) */;
  %199 = cast(meta[relay.Constant][13] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %200 = cast(meta[relay.Constant][13] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %201 = reshape(%199, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int16] */;
  %202 = reshape(%200, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int16] */;
  %203 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %204 = %187.3;
  %205 = %190.0;
  %206 = exp(%195) /* ty=Tensor[(9, 2, 5), float64] */;
  %207 = %198.0;
  %208 = @func_807(%201, %202) /* ty=Tensor[(4, 7, 9), int16] */;
  %209 = %203.0;
  (%204, meta[relay.Constant][10] /* ty=Tensor[(90), float32] */, %205, meta[relay.Constant][11] /* ty=Tensor[(35, 4), uint64] */, %206, %207, meta[relay.Constant][12] /* ty=Tensor[(3150), float64] */, %208, meta[relay.Constant][13] /* ty=Tensor[(252), int16] */, %209)
}

def @func_3822(%var_3743: Tensor[(2, 7, 10), uint64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(70), uint64], uint64, Tensor[(2, 7, 10), bool]) {
  %210 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %211 = cast(meta[relay.Constant][14] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %212 = reshape(%211, newshape=[]) /* ty=uint64 */;
  %213 = @func_3081(%212) /* ty=(Tensor[(70), uint64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), uint64]) */;
  %214 = @func_3311() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %215 = %214.0;
  %216 = cast(%215, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %217 = cast(%var_3743, dtype="bool") /* ty=Tensor[(2, 7, 10), bool] */;
  %218 = less_equal(%216, %217) /* ty=Tensor[(2, 7, 10), bool] */;
  %219 = cast(%218, dtype="bool") /* ty=Tensor[(2, 7, 10), bool] */;
  %220 = cast(%215, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %221 = %210.2;
  %222 = %213.0;
  %223 = logical_and(%219, %220) /* ty=Tensor[(2, 7, 10), bool] */;
  (%221, %222, meta[relay.Constant][14] /* ty=uint64 */, %223)
}

def @func_3164() -> Tensor[(1, 7, 10), uint64] {
  %224 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %224.1
}

def @func_3680() -> (Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), int8]) {
  %225 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %226 = @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */;
  %227 = %225.1;
  %228 = %226.2;
  (%227, %228)
}

def @func_2243() -> Tensor[(1, 7, 10), uint64] {
  %229 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %229.1
}

def @func_782(%var_737: Tensor[(2, 3, 4), float64], %var_779: Tensor[(3150), float64]) -> (Tensor[(2, 3, 4), bool], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) {
  %230 = cast(%var_737, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
  %231 = sinh(%230) /* ty=Tensor[(2, 3, 4), float64] */;
  %232 = cast(%var_737, dtype="bool") /* ty=Tensor[(2, 3, 4), bool] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="bool") /* ty=Tensor[(2, 3, 4), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %236 = cast(%var_779, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %237 = reshape(%236, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
  %238 = @func_664(%237) /* ty=(Tensor[(15, 15, 14), float64],) */;
  %239 = greater_equal(%234, %235) /* ty=Tensor[(2, 3, 4), bool] */;
  %240 = %238.0;
  (%239, %240, %var_779)
}

def @func_2848() -> Tensor[(12, 2, 9), float64] {
  %241 = @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %241.0
}

def @func_1046(%var_1001: Tensor[(3, 10, 8), float64]) -> (Tensor[(3, 10, 8), float32], Tensor[(3, 10, 8), float64], Tensor[(3, 10, 8), bool], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) {
  %242 = cast(%var_1001, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
  %243 = log(%242) /* ty=Tensor[(3, 10, 8), float64] */;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(3, 10, 8), float32] */;
  %245 = asinh(%244) /* ty=Tensor[(3, 10, 8), float32] */;
  %246 = cast(%245, dtype="float32") /* ty=Tensor[(3, 10, 8), float32] */;
  %247 = cast(%245, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
  %248 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 10, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 10, 8), bool] */;
  %249 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%245, dtype="bool") /* ty=Tensor[(3, 10, 8), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = cast(meta[relay.Constant][16] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %253 = cast(meta[relay.Constant][17] /* ty=Tensor[(70), uint64] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %254 = reshape(%252, newshape=[]) /* ty=uint64 */;
  %255 = reshape(%253, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
  %256 = sinh(%246) /* ty=Tensor[(3, 10, 8), float32] */;
  %257 = exp(%247) /* ty=Tensor[(3, 10, 8), float64] */;
  %258 = greater(%250, %251) /* ty=Tensor[(3, 10, 8), bool] */;
  %259 = @func_612(%254, %255) /* ty=Tensor[(1, 7, 10), uint64] */;
  (%256, %257, %258, %259, meta[relay.Constant][16] /* ty=uint64 */, meta[relay.Constant][17] /* ty=Tensor[(70), uint64] */)
}

def @func_6180(%var_6123: Tensor[(24), float64]) -> (Tensor[(24), float64], Tensor[(1, 7, 10), uint64], Tensor[(9, 2, 5), float64], uint64, Tensor[(12, 2, 9), bool], Tensor[(12, 2, 9), float64]) {
  %260 = @func_4303() /* ty=(Tensor[(9, 2, 5), float64],) */;
  %261 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %262 = %261.0;
  %263 = cast(%var_6123, dtype="float64") /* ty=Tensor[(24), float64] */;
  %264 = reshape(%263, newshape=[1, 24]) /* ty=Tensor[(1, 24), float64] */;
  %265 = @func_2810(%264) /* ty=(Tensor[(12, 2, 9), uint16], Tensor[(2, 3, 4), bool], Tensor[(1, 24), float64], Tensor[(3150), float64]) */;
  %266 = %265.0;
  %267 = cast(%266, dtype="bool") /* ty=Tensor[(12, 2, 9), bool] */;
  %268 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%262, dtype="bool") /* ty=Tensor[(12, 2, 9), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %271 = @func_4491() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %272 = @func_5332() /* ty=Tensor[(1, 7, 10), uint64] */;
  %273 = %260.0;
  %274 = @func_5763() /* ty=uint64 */;
  %275 = less(%269, %270) /* ty=Tensor[(12, 2, 9), bool] */;
  %276 = %271.0;
  (%var_6123, %272, %273, %274, %275, %276)
}

def @func_5699() -> Tensor[(1, 7, 10), float32] {
  %277 = @func_5007() /* ty=(Tensor[(1, 7, 10), float32],) */;
  %277.0
}

def @func_3730() -> Tensor[(1, 7, 10), float32] {
  %278 = @func_3311() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  %281 = cosh(%280) /* ty=Tensor[(1, 7, 10), float32] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  log10(%282) /* ty=Tensor[(1, 7, 10), float32] */
}

def @func_4090() -> (Tensor[(12, 2, 9), float64],) {
  %283 = @func_2848() /* ty=Tensor[(12, 2, 9), float64] */;
  (%283,)
}

def @func_3157(%var_3140: Tensor[(1, 3150), float64]) -> (Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], Tensor[(1, 3150), float64]) {
  %284 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %287 = log10(%286) /* ty=Tensor[(12, 2, 9), float64] */;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %289 = cast(%285, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %290 = @func_2965() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %291 = cast(%var_3140, dtype="float64") /* ty=Tensor[(1, 3150), float64] */;
  %292 = reshape(%291, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
  %293 = @func_664(%292) /* ty=(Tensor[(15, 15, 14), float64],) */;
  %294 = log(%288) /* ty=Tensor[(12, 2, 9), float64] */;
  %295 = sqrt(%289) /* ty=Tensor[(12, 2, 9), float64] */;
  %296 = %290.0;
  %297 = %293.0;
  (%294, %295, %296, %297, %var_3140)
}

def @func_664(%var_636: Tensor[(15, 15, 14), float64]) -> (Tensor[(15, 15, 14), float64],) {
  %298 = cast(%var_636, dtype="float64") /* ty=Tensor[(15, 15, 14), float64] */;
  %299 = exp(%298) /* ty=Tensor[(15, 15, 14), float64] */;
  (%299,)
}

def @func_4485(%var_4413: Tensor[(3, 10, 12), float32]) -> (Tensor[(1, 7, 10), uint64], Tensor[(3, 10, 12), uint64]) {
  %300 = @func_2965() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %301 = cast(%var_4413, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %302 = cos(%301) /* ty=Tensor[(3, 10, 12), float32] */;
  %303 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 10, 12), float32] */, dtype="bool") /* ty=Tensor[(3, 10, 12), bool] */;
  %304 = shape_of(%var_4413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_4413, dtype="bool") /* ty=Tensor[(3, 10, 12), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = not_equal(%305, %306) /* ty=Tensor[(3, 10, 12), bool] */;
  %308 = cast(%307, dtype="uint64") /* ty=Tensor[(3, 10, 12), uint64] */;
  %309 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%302, dtype="uint64") /* ty=Tensor[(3, 10, 12), uint64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %312 = %300.0;
  %313 = logical_xor(%310, %311) /* ty=Tensor[(3, 10, 12), uint64] */;
  (%312, %313)
}

def @func_5586() -> Tensor[(1, 7, 10), uint64] {
  @func_3238() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_7482() -> (Tensor[(1, 7, 10), uint64], Tensor[(15, 13, 15), float64]) {
  %314 = @func_5141() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) */;
  %315 = %314.1;
  %316 = @func_6758() /* ty=Tensor[(15, 13, 15), float64] */;
  (%315, %316)
}

def @func_5453(%var_5397: Tensor[(3, 5, 2), uint32], %var_5398: Tensor[(3, 5, 2), uint32]) -> (Tensor[(3, 5, 2), bool], Tensor[(1, 7, 10), uint64], Tensor[(?, 7, 10), float64], Tensor[(3150), float64], Tensor[(24), float64], Tensor[(3150), float64], Tensor[(1, 7, 10), uint64]) {
  %317 = cast(%var_5398, dtype="bool") /* ty=Tensor[(3, 5, 2), bool] */;
  %318 = shape_of(%var_5397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%var_5397, dtype="bool") /* ty=Tensor[(3, 5, 2), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %321 = @func_3311() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %322 = @func_4716() /* ty=(Tensor[(?, 7, 10), float64], uint64) */;
  %323 = cast(meta[relay.Constant][19] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %324 = cast(meta[relay.Constant][20] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %325 = reshape(%323, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %326 = reshape(%324, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %327 = @func_782(%325, %326) /* ty=(Tensor[(2, 3, 4), bool], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) */;
  %328 = cast(meta[relay.Constant][19] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %329 = %327.2;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %331 = cast(meta[relay.Constant][20] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %332 = reshape(%328, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %333 = reshape(%330, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %334 = reshape(%331, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %335 = @func_2668(%332, %333, %334) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), bool]) */;
  %336 = not_equal(%319, %320) /* ty=Tensor[(3, 5, 2), bool] */;
  %337 = %321.0;
  %338 = %322.0;
  %339 = %335.0;
  (%336, %337, %338, %329, meta[relay.Constant][19] /* ty=Tensor[(24), float64] */, meta[relay.Constant][20] /* ty=Tensor[(3150), float64] */, %339)
}

def @func_5711() -> uint64 {
  %340 = @func_3706() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], uint64) */;
  %340.2
}

def @func_5007() -> (Tensor[(1, 7, 10), float32],) {
  %341 = @func_3730() /* ty=Tensor[(1, 7, 10), float32] */;
  (%341,)
}

def @func_6448() -> Tensor[(1, 7, 10), float32] {
  @func_5699() /* ty=Tensor[(1, 7, 10), float32] */
}

def @func_5036() -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) {
  %342 = @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %343 = @func_2965() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %344 = @func_4491() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %345 = @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %346 = %342.0;
  %347 = %343.0;
  %348 = %344.0;
  %349 = %345.0;
  (%346, %347, %348, %349)
}

def @func_4522() -> uint64 {
  %350 = @func_3467() /* ty=(uint64, Tensor[(1, 7, 10), uint64]) */;
  %350.0
}

def @func_5763() -> uint64 {
  @func_4522() /* ty=uint64 */
}

def @func_5197(%var_5167: Tensor[(6, 7, 10), float32], %var_5181: Tensor[(350), uint64]) -> (Tensor[(6, 7, 10), int16], Tensor[(1, 7, 10), uint64], Tensor[(350), uint64]) {
  %351 = @func_3730() /* ty=Tensor[(1, 7, 10), float32] */;
  %352 = cast(%351, dtype="int16") /* ty=Tensor[(1, 7, 10), int16] */;
  %353 = cast(%var_5167, dtype="int16") /* ty=Tensor[(6, 7, 10), int16] */;
  %354 = cast(%var_5181, dtype="uint64") /* ty=Tensor[(350), uint64] */;
  %355 = reshape(%354, newshape=[5, 7, 10]) /* ty=Tensor[(5, 7, 10), uint64] */;
  %356 = @func_4068(%355) /* ty=(Tensor[(5, 7, 10), int8], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64]) */;
  %357 = bitwise_and(%352, %353) /* ty=Tensor[(6, 7, 10), int16] */;
  %358 = %356.4;
  (%357, %358, %var_5181)
}

def @func_5693() -> (Tensor[(9, 7, 10), bool], Tensor[(9, 7, 10), float32]) {
  %359 = @func_2965() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %360 = %359.0;
  %361 = cast(%360, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %362 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 7, 10), uint64] */, dtype="bool") /* ty=Tensor[(9, 7, 10), bool] */;
  %363 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 7, 10), uint64] */, dtype="float32") /* ty=Tensor[(9, 7, 10), float32] */;
  %364 = cast(%360, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  %365 = not_equal(%361, %362) /* ty=Tensor[(9, 7, 10), bool] */;
  %366 = floor_mod(%363, %364) /* ty=Tensor[(9, 7, 10), float32] */;
  (%365, %366)
}

def @func_3706() -> (Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], uint64) {
  %367 = @func_3680() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), int8]) */;
  %368 = cast(meta[relay.Constant][22] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %369 = %367.0;
  %370 = cast(%369, dtype="uint64") /* ty=Tensor[(1, 7, 10), uint64] */;
  %371 = reshape(%368, newshape=[]) /* ty=uint64 */;
  %372 = reshape(%370, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
  %373 = @func_612(%371, %372) /* ty=Tensor[(1, 7, 10), uint64] */;
  (%369, %373, meta[relay.Constant][22] /* ty=uint64 */)
}

def @func_7031(%var_7017: Tensor[(1728), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(9, 12, 16), float64], Tensor[(1728), float64]) {
  %374 = @func_4535() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %375 = cast(%var_7017, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %376 = reshape(%375, newshape=[9, 12, 16]) /* ty=Tensor[(9, 12, 16), float64] */;
  %377 = %374.0;
  %378 = @func_4781(%376) /* ty=Tensor[(9, 12, 16), float64] */;
  (%377, %378, %var_7017)
}

def @func_3987(%var_3949: Tensor[(7, 7, 8), float64], %var_3950: Tensor[(7, 7, 8), float64], %var_3985: uint64) -> (Tensor[(7, 7, 8), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], uint64) {
  %379 = cast(%var_3950, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %380 = shape_of(%var_3949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%var_3949, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %383 = @func_3311() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %384 = cast(%var_3985, dtype="uint64") /* ty=uint64 */;
  %385 = reshape(%384, newshape=[]) /* ty=uint64 */;
  %386 = @func_3417(%385) /* ty=(Tensor[(15, 15, 14), int8], Tensor[(15, 15, 14), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), float32], Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) */;
  %387 = floor_mod(%381, %382) /* ty=Tensor[(7, 7, 8), float64] */;
  %388 = %383.0;
  %389 = %386.1;
  (%387, %388, %389, %var_3985)
}

def @func_7494(%var_7487: bool) -> Tensor[(5, 13, 1), bool] {
  %390 = cast(%var_7487, dtype="bool") /* ty=bool */;
  %391 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 13, 1), bool] */, dtype="bool") /* ty=Tensor[(5, 13, 1), bool] */;
  logical_and(%390, %391) /* ty=Tensor[(5, 13, 1), bool] */
}

def @func_2163() -> (Tensor[(12, 2, 9), float64],) {
  %392 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 9), float32] */;
  %393 = acosh(%392) /* ty=Tensor[(12, 2, 9), float32] */;
  %394 = cast(%393, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %395 = asinh(%394) /* ty=Tensor[(12, 2, 9), float64] */;
  (%395,)
}

def @func_6798(%var_6790: Tensor[(858), int16]) -> (Tensor[(1, 7, 10), uint64], Tensor[(4, 3, 11), float32], Tensor[(132), float32], Tensor[(2160), float64], Tensor[(360), float32], Tensor[(12, 2), float64], Tensor[(858), int16]) {
  %396 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %397 = cast(meta[relay.Constant][25] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %398 = cast(meta[relay.Constant][25] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %399 = cast(meta[relay.Constant][26] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %400 = cast(meta[relay.Constant][27] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %401 = reshape(%397, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), float32] */;
  %402 = reshape(%398, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), float32] */;
  %403 = reshape(%399, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %404 = reshape(%400, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %405 = @func_6279(%401, %402, %403, %404) /* ty=(Tensor[(4, 3, 11), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(3, 10, 12), uint64], Tensor[(360), float32], Tensor[(4, 3, 11), int64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) */;
  %406 = cast(%var_6790, dtype="int16") /* ty=Tensor[(858), int16] */;
  %407 = reshape(%406, newshape=[13, 6, 11]) /* ty=Tensor[(13, 6, 11), int16] */;
  %408 = @func_6573(%407) /* ty=(Tensor[(13, 6, 11), bool], Tensor[(1, 7, 10), uint64], Tensor[(12, 2), float64], Tensor[(45, 70), float64]) */;
  %409 = %396.1;
  %410 = %405.0;
  %411 = %408.2;
  (%409, %410, meta[relay.Constant][25] /* ty=Tensor[(132), float32] */, meta[relay.Constant][26] /* ty=Tensor[(2160), float64] */, meta[relay.Constant][27] /* ty=Tensor[(360), float32] */, %411, %var_6790)
}

def @func_612(%var_592: uint64, %var_593: Tensor[(1, 7, 10), uint64]) -> Tensor[(1, 7, 10), uint64] {
  %412 = cast(%var_592, dtype="uint64") /* ty=uint64 */;
  %413 = cast(%var_593, dtype="uint64") /* ty=Tensor[(1, 7, 10), uint64] */;
  logical_xor(%412, %413) /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_2668(%var_2636: Tensor[(24), float64], %var_2637: Tensor[(3150), float64], %var_2652: Tensor[(3150), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), bool]) {
  %414 = @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */;
  %415 = cast(%var_2636, dtype="float64") /* ty=Tensor[(24), float64] */;
  %416 = cast(%var_2637, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %417 = reshape(%415, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %418 = reshape(%416, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %419 = @func_2385(%417, %418) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), float64]) */;
  %420 = cast(%var_2652, dtype="bool") /* ty=Tensor[(3150), bool] */;
  %421 = shape_of(%var_2637, dtype="int32") /* ty=Tensor[(1), int32] */;
  %422 = cast(%var_2637, dtype="bool") /* ty=Tensor[(3150), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?), bool] */;
  %424 = %414.0;
  %425 = %419.1;
  %426 = not_equal(%422, %423) /* ty=Tensor[(3150), bool] */;
  (%424, %425, %var_2636, %426)
}

def @func_5115() -> Tensor[(15, 15, 14), int8] {
  %427 = @func_3680() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), int8]) */;
  %427.1
}

def @func_6573(%var_6559: Tensor[(13, 6, 11), int16]) -> (Tensor[(13, 6, 11), bool], Tensor[(1, 7, 10), uint64], Tensor[(12, 2), float64], Tensor[(45, 70), float64]) {
  %428 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 6, 1), int16] */, dtype="bool") /* ty=Tensor[(13, 6, 1), bool] */;
  %429 = cast(%var_6559, dtype="bool") /* ty=Tensor[(13, 6, 11), bool] */;
  %430 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
  %431 = cast(meta[relay.Constant][30] /* ty=Tensor[(45, 70), float64] */, dtype="float64") /* ty=Tensor[(45, 70), float64] */;
  %432 = reshape(%430, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
  %433 = reshape(%431, newshape=[1575, 2]) /* ty=Tensor[(1575, 2), float64] */;
  %434 = @func_2931(%432, %433) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], Tensor[(6, 4), float64], Tensor[(1575, 2), float64], Tensor[(12, 2, 9), float64]) */;
  %435 = equal(%428, %429) /* ty=Tensor[(13, 6, 11), bool] */;
  %436 = %434.0;
  (%435, %436, meta[relay.Constant][29] /* ty=Tensor[(12, 2), float64] */, meta[relay.Constant][30] /* ty=Tensor[(45, 70), float64] */)
}

def @func_2745() -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) {
  %437 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %438 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %439 = %438.1;
  %440 = cast(%439, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %441 = cast(%439, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  %442 = atan(%441) /* ty=Tensor[(1, 7, 10), float32] */;
  %443 = cast(%442, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %444 = %437.0;
  %445 = sin(%440) /* ty=Tensor[(1, 7, 10), float64] */;
  %446 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %447 = log(%443) /* ty=Tensor[(1, 7, 10), float64] */;
  (%444, %445, %446, %447)
}

def @func_4732(%var_4718: Tensor[(16, 9, 15), float64]) -> (Tensor[(16, 9, 15), float64],) {
  %448 = cast(%var_4718, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  %449 = tan(%448) /* ty=Tensor[(16, 9, 15), float64] */;
  (%449,)
}

def @func_3081(%var_3073: uint64) -> (Tensor[(70), uint64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), uint64]) {
  %450 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %451 = cast(%var_3073, dtype="uint64") /* ty=uint64 */;
  %452 = %450.3;
  %453 = cast(%452, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %454 = reshape(%451, newshape=[]) /* ty=uint64 */;
  %455 = reshape(%453, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
  %456 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %457 = @func_612(%454, %455) /* ty=Tensor[(1, 7, 10), uint64] */;
  %458 = %456.2;
  (%452, %457, %var_3073, %458)
}

def @func_1698(%var_1679: Tensor[(11, 7, 16), float64], %var_1684: uint64, %var_1685: Tensor[(70), uint64]) -> (Tensor[(11, 7, 16), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) {
  %459 = cast(%var_1679, dtype="float64") /* ty=Tensor[(11, 7, 16), float64] */;
  %460 = cast(%var_1684, dtype="uint64") /* ty=uint64 */;
  %461 = cast(%var_1685, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %462 = reshape(%460, newshape=[]) /* ty=uint64 */;
  %463 = reshape(%461, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
  %464 = sin(%459) /* ty=Tensor[(11, 7, 16), float64] */;
  %465 = @func_612(%462, %463) /* ty=Tensor[(1, 7, 10), uint64] */;
  (%464, %465, %var_1684, %var_1685)
}

def @func_3467() -> (uint64, Tensor[(1, 7, 10), uint64]) {
  %466 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %467 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %468 = %466.2;
  %469 = %467.1;
  (%468, %469)
}

def @func_1385(%var_1381: Tensor[(9, 2, 5), float32]) -> (Tensor[(9, 2, 5), float32],) {
  %470 = cast(%var_1381, dtype="float32") /* ty=Tensor[(9, 2, 5), float32] */;
  %471 = sinh(%470) /* ty=Tensor[(9, 2, 5), float32] */;
  (%471,)
}

def @func_6550() -> Tensor[(1, 7, 10), uint64] {
  %472 = @func_3680() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), int8]) */;
  %472.0
}

def @func_7255(%var_7237: float64, %var_7238: Tensor[(1, 10, 3), float64]) -> (Tensor[(1, 10, 3), float64],) {
  %473 = cast(%var_7237, dtype="bool") /* ty=bool */;
  %474 = cast(%var_7238, dtype="bool") /* ty=Tensor[(1, 10, 3), bool] */;
  %475 = equal(%473, %474) /* ty=Tensor[(1, 10, 3), bool] */;
  %476 = cast(%475, dtype="float64") /* ty=Tensor[(1, 10, 3), float64] */;
  %477 = cast(%var_7237, dtype="float64") /* ty=float64 */;
  %478 = divide(%476, %477) /* ty=Tensor[(1, 10, 3), float64] */;
  (%478,)
}

def @main(%var_7577: Tensor[(1, 7, 10), float32]) -> (uint64, Tensor[(?, 7, 10), int64]) {
  %479 = @func_6624() /* ty=(uint64,) */;
  %480 = @func_5699() /* ty=Tensor[(1, 7, 10), float32] */;
  %481 = cast(%var_7577, dtype="int64") /* ty=Tensor[(1, 7, 10), int64] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="int64") /* ty=Tensor[(1, 7, 10), int64] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %485 = %479.0;
  %486 = subtract(%483, %484) /* ty=Tensor[(?, 7, 10), int64] */;
  (%485, %486)
}

def @func_5928(%var_5899: Tensor[(5, 7, 10), uint8], %var_5909: Tensor[(14, 28), float64], %var_5910: uint64) -> (Tensor[(?, 7, 10), int64], Tensor[(5, 7, 10), float64], Tensor[(15, 15, 14), float64], Tensor[(14, 28), float64], uint64, Tensor[(5, 7, 10), int8]) {
  %487 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %488 = %487.1;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  %490 = exp(%489) /* ty=Tensor[(1, 7, 10), float32] */;
  %491 = cast(%490, dtype="int64") /* ty=Tensor[(1, 7, 10), int64] */;
  %492 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%488, dtype="int64") /* ty=Tensor[(1, 7, 10), int64] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %495 = cast(%490, dtype="uint8") /* ty=Tensor[(1, 7, 10), uint8] */;
  %496 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%488, dtype="uint8") /* ty=Tensor[(1, 7, 10), uint8] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %499 = maximum(%497, %498) /* ty=Tensor[(?, 7, 10), uint8] */;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(?, 7, 10), float64] */;
  %501 = cast(%var_5899, dtype="float64") /* ty=Tensor[(5, 7, 10), float64] */;
  %502 = cast(%var_5909, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %503 = cast(%var_5909, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %504 = cast(%var_5910, dtype="uint64") /* ty=uint64 */;
  %505 = reshape(%502, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), float64] */;
  %506 = reshape(%503, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), float64] */;
  %507 = reshape(%504, newshape=[]) /* ty=uint64 */;
  %508 = @func_3987(%505, %506, %507) /* ty=(Tensor[(7, 7, 8), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], uint64) */;
  %509 = cast(%var_5899, dtype="int8") /* ty=Tensor[(5, 7, 10), int8] */;
  %510 = cast(%490, dtype="int8") /* ty=Tensor[(1, 7, 10), int8] */;
  %511 = left_shift(%493, %494) /* ty=Tensor[(?, 7, 10), int64] */;
  %512 = mod(%500, %501) /* ty=Tensor[(5, 7, 10), float64] */;
  %513 = %508.2;
  %514 = bitwise_or(%509, %510) /* ty=Tensor[(5, 7, 10), int8] */;
  (%511, %512, %513, %var_5909, %var_5910, %514)
}

def @func_7528() -> (uint64,) {
  %515 = @func_4522() /* ty=uint64 */;
  (%515,)
}

def @func_4781(%var_4763: Tensor[(9, 12, 16), float64]) -> Tensor[(9, 12, 16), float64] {
  %516 = cast(%var_4763, dtype="float64") /* ty=Tensor[(9, 12, 16), float64] */;
  sqrt(%516) /* ty=Tensor[(9, 12, 16), float64] */
}

def @func_6919(%var_6898: Tensor[(360), float32]) -> (Tensor[(6, 7, 10), bool], Tensor[(1, 7, 10), float64], Tensor[(15, 15, 14), float64], uint64, Tensor[(3, 10, 12), uint64], Tensor[(360), float32], Tensor[(12, 2, 9), float64]) {
  %517 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %519 = acos(%518) /* ty=Tensor[(1, 7, 10), float64] */;
  %520 = cast(%519, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %521 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 7, 10), float64] */, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
  %522 = cast(%519, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %523 = @func_3945() /* ty=(Tensor[(70), uint64], Tensor[(90), float32], Tensor[(1, 7, 10), uint64], Tensor[(35, 4), uint64], Tensor[(9, 2, 5), float64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(12, 2, 9), float64]) */;
  %524 = cast(%var_6898, dtype="float32") /* ty=Tensor[(360), float32] */;
  %525 = reshape(%524, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
  %526 = @func_4485(%525) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(3, 10, 12), uint64]) */;
  %527 = equal(%520, %521) /* ty=Tensor[(6, 7, 10), bool] */;
  %528 = log2(%522) /* ty=Tensor[(1, 7, 10), float64] */;
  %529 = %523.5;
  %530 = @func_5763() /* ty=uint64 */;
  %531 = %526.1;
  %532 = @func_2848() /* ty=Tensor[(12, 2, 9), float64] */;
  (%527, %528, %529, %530, %531, %var_6898, %532)
}

def @func_2226() -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) {
  %533 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %534 = cast(meta[relay.Constant][32] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %535 = cast(meta[relay.Constant][33] /* ty=Tensor[(70), uint64] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %536 = reshape(%534, newshape=[]) /* ty=uint64 */;
  %537 = reshape(%535, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
  %538 = %533.0;
  %539 = @func_612(%536, %537) /* ty=Tensor[(1, 7, 10), uint64] */;
  (%538, %539, meta[relay.Constant][32] /* ty=uint64 */, meta[relay.Constant][33] /* ty=Tensor[(70), uint64] */)
}

def @func_3311() -> (Tensor[(1, 7, 10), uint64],) {
  %540 = @func_3279() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) */;
  %541 = %540.0;
  (%541,)
}

def @func_7428() -> (Tensor[(12, 2, 9), float64],) {
  %542 = @func_4090() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %543 = %542.0;
  (%543,)
}

def @func_2610(%var_2574: Tensor[(1, 7, 14), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(70), uint64], Tensor[(1, 7, 14), float64]) {
  %544 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %545 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %546 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %547 = cast(%var_2574, dtype="float64") /* ty=Tensor[(1, 7, 14), float64] */;
  %548 = acos(%547) /* ty=Tensor[(1, 7, 14), float64] */;
  %549 = cast(%548, dtype="float64") /* ty=Tensor[(1, 7, 14), float64] */;
  %550 = %544.1;
  %551 = %545.0;
  %552 = %546.3;
  %553 = cos(%549) /* ty=Tensor[(1, 7, 14), float64] */;
  (%550, %551, %552, %553)
}

def @func_6052(%var_5993: Tensor[(252), int16]) -> (Tensor[(24), float64], Tensor[(1, 30), uint32], Tensor[(6, 4), float64], Tensor[(1, 7, 10), uint64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(3150), float64], Tensor[(?, 7, 10), uint64], Tensor[(?, 7, 10), int64]) {
  %554 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 30), uint32] */, dtype="uint32") /* ty=Tensor[(1, 30), uint32] */;
  %555 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 30), uint32] */, dtype="uint32") /* ty=Tensor[(1, 30), uint32] */;
  %556 = reshape(%554, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), uint32] */;
  %557 = reshape(%555, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), uint32] */;
  %558 = @func_5453(%556, %557) /* ty=(Tensor[(3, 5, 2), bool], Tensor[(1, 7, 10), uint64], Tensor[(?, 7, 10), float64], Tensor[(3150), float64], Tensor[(24), float64], Tensor[(3150), float64], Tensor[(1, 7, 10), uint64]) */;
  %559 = %558.4;
  %560 = cast(%559, dtype="float64") /* ty=Tensor[(24), float64] */;
  %561 = cast(meta[relay.Constant][35] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %562 = reshape(%560, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %563 = reshape(%561, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %564 = @func_4910(%562, %563) /* ty=(Tensor[(12, 2, 9), int32], uint64, uint64, Tensor[(1, 7, 10), uint64], uint64, Tensor[(6, 4), float64], Tensor[(24), float64], Tensor[(3150), float64]) */;
  %565 = @func_4131() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) */;
  %566 = cast(%var_5993, dtype="int16") /* ty=Tensor[(252), int16] */;
  %567 = cast(%var_5993, dtype="int16") /* ty=Tensor[(252), int16] */;
  %568 = reshape(%566, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int16] */;
  %569 = reshape(%567, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int16] */;
  %570 = cast(meta[relay.Constant][35] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %571 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %572 = %571.1;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %574 = asinh(%573) /* ty=Tensor[(1, 7, 10), float64] */;
  %575 = cast(%572, dtype="uint64") /* ty=Tensor[(1, 7, 10), uint64] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="uint64") /* ty=Tensor[(1, 7, 10), uint64] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %579 = cast(%574, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %580 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%572, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %583 = greater(%581, %582) /* ty=Tensor[(?, 7, 10), bool] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(?, 7, 10), float32] */;
  %585 = tan(%584) /* ty=Tensor[(?, 7, 10), float32] */;
  %586 = cast(%583, dtype="int32") /* ty=Tensor[(?, 7, 10), int32] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="int32") /* ty=Tensor[(?, 7, 10), int32] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %590 = right_shift(%588, %589) /* ty=Tensor[(?, 7, 10), int32] */;
  %591 = cast(%590, dtype="int64") /* ty=Tensor[(?, 7, 10), int64] */;
  %592 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%583, dtype="int64") /* ty=Tensor[(?, 7, 10), int64] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %595 = %564.5;
  %596 = %565.0;
  %597 = @func_807(%568, %569) /* ty=Tensor[(4, 7, 9), int16] */;
  %598 = asin(%570) /* ty=Tensor[(3150), float64] */;
  %599 = multiply(%577, %578) /* ty=Tensor[(?, 7, 10), uint64] */;
  %600 = add(%593, %594) /* ty=Tensor[(?, 7, 10), int64] */;
  (%559, meta[relay.Constant][34] /* ty=Tensor[(1, 30), uint32] */, %595, %596, %597, %var_5993, %598, %599, %600)
}

def @func_3885(%var_3858: Tensor[(3150), bool]) -> (Tensor[(3150), bool], Tensor[(3150), float32]) {
  %601 = @func_3582() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(3150), bool], Tensor[(24), float64], Tensor[(45, 70), float64]) */;
  %602 = %601.1;
  %603 = cast(%var_3858, dtype="bool") /* ty=Tensor[(3150), bool] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(1), int32] */;
  %605 = cast(%602, dtype="bool") /* ty=Tensor[(3150), bool] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?), bool] */;
  %607 = cast(%var_3858, dtype="float32") /* ty=Tensor[(3150), float32] */;
  %608 = greater_equal(%605, %606) /* ty=Tensor[(3150), bool] */;
  %609 = cos(%607) /* ty=Tensor[(3150), float32] */;
  (%608, %609)
}

def @func_4491() -> (Tensor[(12, 2, 9), float64],) {
  %610 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %611 = %610.0;
  (%611,)
}

def @func_4716() -> (Tensor[(?, 7, 10), float64], uint64) {
  %612 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %613 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %614 = %613.3;
  %615 = cast(%614, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %616 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%612, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %619 = mod(%617, %618) /* ty=Tensor[(?, 7, 10), float64] */;
  %620 = @func_4522() /* ty=uint64 */;
  (%619, %620)
}

def @func_3417(%var_3373: uint64) -> (Tensor[(15, 15, 14), int8], Tensor[(15, 15, 14), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), float32], Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) {
  %621 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %622 = %621.0;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(15, 15, 14), float64] */;
  %624 = reshape(%623, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
  %625 = @func_664(%624) /* ty=(Tensor[(15, 15, 14), float64],) */;
  %626 = cast(%var_3373, dtype="uint64") /* ty=uint64 */;
  %627 = @func_3238() /* ty=Tensor[(1, 7, 10), uint64] */;
  %628 = cast(%627, dtype="uint64") /* ty=Tensor[(1, 7, 10), uint64] */;
  %629 = reshape(%626, newshape=[]) /* ty=uint64 */;
  %630 = reshape(%628, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
  %631 = cast(%627, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  %632 = @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */;
  %633 = @func_2965() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %634 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %635 = %632.2;
  %636 = cast(%635, dtype="float64") /* ty=Tensor[(15, 15, 14), float64] */;
  %637 = reshape(%636, newshape=[1, 3150]) /* ty=Tensor[(1, 3150), float64] */;
  %638 = @func_3157(%637) /* ty=(Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], Tensor[(1, 3150), float64]) */;
  %639 = %625.0;
  %640 = @func_612(%629, %630) /* ty=Tensor[(1, 7, 10), uint64] */;
  %641 = sqrt(%631) /* ty=Tensor[(1, 7, 10), float32] */;
  %642 = %633.0;
  %643 = %634.0;
  %644 = %638.0;
  (%622, %639, %640, %var_3373, %641, %635, %642, %643, %644)
}

def @func_5332() -> Tensor[(1, 7, 10), uint64] {
  %645 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %645.2
}

def @func_2541(%var_2534: Tensor[(1, 7, 10), uint64]) -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(?, 7, 10), bool]) {
  %646 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %647 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %648 = cast(%var_2534, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %652 = %646.0;
  %653 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
  %654 = less_equal(%650, %651) /* ty=Tensor[(?, 7, 10), bool] */;
  (%652, %653, %654)
}

def @func_4131() -> (Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) {
  %655 = @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %656 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
  %657 = %655.0;
  (%656, %657)
}

def @func_5152() -> Tensor[(12, 2, 9), int32] {
  %658 = @func_4625() /* ty=(Tensor[(12, 2, 9), int32],) */;
  %658.0
}

def @func_6080() -> Tensor[(?, 7, 10), float64] {
  %659 = @func_4716() /* ty=(Tensor[(?, 7, 10), float64], uint64) */;
  %659.0
}

def @func_5630() -> (Tensor[(1, 7, 10), uint64],) {
  %660 = @func_5141() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) */;
  %661 = %660.1;
  (%661,)
}

def @func_2824() -> (Tensor[(12, 2, 9), float64],) {
  %662 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %663 = %662.0;
  (%663,)
}

def @func_4910(%var_4904: Tensor[(24), float64], %var_4905: Tensor[(3150), float64]) -> (Tensor[(12, 2, 9), int32], uint64, uint64, Tensor[(1, 7, 10), uint64], uint64, Tensor[(6, 4), float64], Tensor[(24), float64], Tensor[(3150), float64]) {
  %664 = @func_2848() /* ty=Tensor[(12, 2, 9), float64] */;
  %665 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 2, 9), float64] */, dtype="int32") /* ty=Tensor[(12, 2, 9), int32] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="int32") /* ty=Tensor[(12, 2, 9), int32] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %669 = cast(meta[relay.Constant][37] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %670 = reshape(%669, newshape=[]) /* ty=uint64 */;
  %671 = @func_4673(%670) /* ty=(Tensor[(12, 2, 9), float64], Tensor[(15, 15, 14), int8], uint64) */;
  %672 = cast(%var_4904, dtype="float64") /* ty=Tensor[(24), float64] */;
  %673 = cast(%var_4905, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %674 = reshape(%672, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
  %675 = reshape(%673, newshape=[1575, 2]) /* ty=Tensor[(1575, 2), float64] */;
  %676 = @func_2931(%674, %675) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], Tensor[(6, 4), float64], Tensor[(1575, 2), float64], Tensor[(12, 2, 9), float64]) */;
  %677 = bitwise_xor(%667, %668) /* ty=Tensor[(12, 2, 9), int32] */;
  %678 = %671.2;
  %679 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %680 = @func_4522() /* ty=uint64 */;
  %681 = %676.2;
  (%677, %678, meta[relay.Constant][37] /* ty=uint64 */, %679, %680, %681, %var_4904, %var_4905)
}

def @func_2385(%var_2356: Tensor[(24), float64], %var_2357: Tensor[(3150), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), float64]) {
  %682 = cast(%var_2356, dtype="float64") /* ty=Tensor[(24), float64] */;
  %683 = cast(%var_2357, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %684 = reshape(%682, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %685 = reshape(%683, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %686 = @func_782(%684, %685) /* ty=(Tensor[(2, 3, 4), bool], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) */;
  %687 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %688 = %686.0;
  (%687, %688, %var_2356, %var_2357)
}

def @func_807(%var_800: Tensor[(4, 7, 9), int16], %var_801: Tensor[(4, 7, 9), int16]) -> Tensor[(4, 7, 9), int16] {
  %689 = cast(%var_801, dtype="int16") /* ty=Tensor[(4, 7, 9), int16] */;
  %690 = shape_of(%var_800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%var_800, dtype="int16") /* ty=Tensor[(4, 7, 9), int16] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%691, %692) /* ty=Tensor[(4, 7, 9), int16] */
}

def @func_2316() -> Tensor[(1, 7, 10), uint64] {
  @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_4856(%var_4851: Tensor[(14, 7), float64]) -> (uint64, Tensor[(70), uint64], Tensor[(12, 2, 9), float64], Tensor[(14, 7), float64]) {
  %693 = @func_3467() /* ty=(uint64, Tensor[(1, 7, 10), uint64]) */;
  %694 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %695 = cast(%var_4851, dtype="float64") /* ty=Tensor[(14, 7), float64] */;
  %696 = reshape(%695, newshape=[1, 7, 14]) /* ty=Tensor[(1, 7, 14), float64] */;
  %697 = @func_2610(%696) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(70), uint64], Tensor[(1, 7, 14), float64]) */;
  %698 = %693.0;
  %699 = %694.3;
  %700 = %697.1;
  (%698, %699, %700, %var_4851)
}

def @func_4068(%var_4026: Tensor[(5, 7, 10), uint64]) -> (Tensor[(5, 7, 10), int8], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64]) {
  %701 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %702 = %701.1;
  %703 = cast(%702, dtype="int8") /* ty=Tensor[(1, 7, 10), int8] */;
  %704 = cast(%var_4026, dtype="int8") /* ty=Tensor[(5, 7, 10), int8] */;
  %705 = cast(%702, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %706 = @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */;
  %707 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %708 = add(%703, %704) /* ty=Tensor[(5, 7, 10), int8] */;
  %709 = erf(%705) /* ty=Tensor[(1, 7, 10), float64] */;
  %710 = %706.0;
  %711 = %707.3;
  %712 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  (%708, %709, %710, %711, %712)
}

def @func_6092(%var_6088: Tensor[(1, 3, 3), float64]) -> (Tensor[(1, 3, 3), float64],) {
  %713 = cast(%var_6088, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
  %714 = acosh(%713) /* ty=Tensor[(1, 3, 3), float64] */;
  (%714,)
}

def @func_7302(%var_7299: Tensor[(660), uint64], %var_7300: Tensor[(24), float64]) -> (Tensor[(1, 7, 10), float32], Tensor[(1, 7, 10), uint64], Tensor[(13, 6, 11), bool], Tensor[(858), int16], Tensor[(11, 10, 6), uint64], Tensor[(660), uint64], Tensor[(24), float64]) {
  %715 = @func_5007() /* ty=(Tensor[(1, 7, 10), float32],) */;
  %716 = cast(meta[relay.Constant][38] /* ty=Tensor[(858), int16] */, dtype="int16") /* ty=Tensor[(858), int16] */;
  %717 = reshape(%716, newshape=[13, 6, 11]) /* ty=Tensor[(13, 6, 11), int16] */;
  %718 = @func_6573(%717) /* ty=(Tensor[(13, 6, 11), bool], Tensor[(1, 7, 10), uint64], Tensor[(12, 2), float64], Tensor[(45, 70), float64]) */;
  %719 = cast(%var_7299, dtype="uint64") /* ty=Tensor[(660), uint64] */;
  %720 = cast(%var_7300, dtype="float64") /* ty=Tensor[(24), float64] */;
  %721 = reshape(%719, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), uint64] */;
  %722 = reshape(%720, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %723 = @func_5310(%721, %722) /* ty=(Tensor[(11, 10, 6), uint64], Tensor[(11, 10, 6), float64], Tensor[(1, 7, 10), uint64], Tensor[(24), float64], Tensor[(3150), float64]) */;
  %724 = %715.0;
  %725 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
  %726 = %718.0;
  %727 = %723.0;
  (%724, %725, %726, meta[relay.Constant][38] /* ty=Tensor[(858), int16] */, %727, %var_7299, %var_7300)
}

def @func_4535() -> (Tensor[(1, 7, 10), uint64],) {
  %728 = @func_3582() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(3150), bool], Tensor[(24), float64], Tensor[(45, 70), float64]) */;
  %729 = %728.0;
  (%729,)
}

def @func_2965() -> (Tensor[(1, 7, 10), uint64],) {
  %730 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
  (%730,)
}

def @func_6677() -> Tensor[(1, 7, 10), uint64] {
  %731 = @func_3467() /* ty=(uint64, Tensor[(1, 7, 10), uint64]) */;
  %731.1
}

def @func_7115(%var_7092: Tensor[(3, 30), float64]) -> (Tensor[(9, 7, 10), float64], Tensor[(9, 2, 5), int32], Tensor[(3, 30), float64], Tensor[(1, 7, 10), float64], Tensor[(9, 2, 5), float64]) {
  %732 = @func_5693() /* ty=(Tensor[(9, 7, 10), bool], Tensor[(9, 7, 10), float32]) */;
  %733 = %732.1;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(9, 7, 10), float64] */;
  %735 = cast(%var_7092, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %736 = reshape(%735, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), float64] */;
  %737 = @func_4350(%736) /* ty=(Tensor[(9, 2, 5), int32],) */;
  %738 = @func_5699() /* ty=Tensor[(1, 7, 10), float32] */;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %740 = @func_5581() /* ty=(Tensor[(9, 2, 5), float64],) */;
  %741 = rsqrt(%734) /* ty=Tensor[(9, 7, 10), float64] */;
  %742 = %737.0;
  %743 = asin(%739) /* ty=Tensor[(1, 7, 10), float64] */;
  %744 = %740.0;
  (%741, %742, %var_7092, %743, %744)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3164() -> Tensor[(1, 7, 10), uint64] {
  %0 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %0.1
}

def @func_2427() -> (Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %2 = reshape(%1, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
  %3 = @func_664(%2) /* ty=(Tensor[(15, 15, 14), float64],) */;
  %4 = %3.0;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(3150), float64] */, dtype="uint16") /* ty=Tensor[(3150), uint16] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="uint16") /* ty=Tensor[(15, 15, 14), uint16] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(3150), float64] */, dtype="int8") /* ty=Tensor[(3150), int8] */;
  %10 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%4, dtype="int8") /* ty=Tensor[(15, 15, 14), int8] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %13 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %14 = maximum(%7, %8) /* ty=Tensor[(15, 15, 14), uint16] */;
  %15 = bitwise_or(%11, %12) /* ty=Tensor[(15, 15, 14), int8] */;
  (%13, %14, %15)
}

def @func_4132() -> (Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) {
  %19 = fn () -> (Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) {
    %16 = @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */;
    %17 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
    %18 = %16.0;
    (%17, %18)
  };
  %19() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) */
}

def @func_2672(%var_2669: Tensor[(24), float64], %var_2670: Tensor[(3150), float64], %var_2671: Tensor[(3150), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), bool]) {
  %33 = fn (%var_2636: Tensor[(24), float64], %var_2637: Tensor[(3150), float64], %var_2652: Tensor[(3150), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), bool]) {
    %20 = @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */;
    %21 = cast(%var_2636, dtype="float64") /* ty=Tensor[(24), float64] */;
    %22 = cast(%var_2637, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %23 = reshape(%21, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %24 = reshape(%22, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
    %25 = @func_2385(%23, %24) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), float64]) */;
    %26 = cast(%var_2652, dtype="bool") /* ty=Tensor[(3150), bool] */;
    %27 = shape_of(%var_2637, dtype="int32") /* ty=Tensor[(1), int32] */;
    %28 = cast(%var_2637, dtype="bool") /* ty=Tensor[(3150), bool] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?), bool] */;
    %30 = %20.0;
    %31 = %25.1;
    %32 = not_equal(%28, %29) /* ty=Tensor[(3150), bool] */;
    (%30, %31, %var_2636, %32)
  };
  %33(%var_2669, %var_2670, %var_2671) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), bool]) */
}

def @func_5313(%var_5311: Tensor[(11, 10, 6), uint64], %var_5312: Tensor[(24), float64]) -> (Tensor[(11, 10, 6), uint64], Tensor[(11, 10, 6), float64], Tensor[(1, 7, 10), uint64], Tensor[(24), float64], Tensor[(3150), float64]) {
  %47 = fn (%var_5272: Tensor[(11, 10, 6), uint64], %var_5281: Tensor[(24), float64]) -> (Tensor[(11, 10, 6), uint64], Tensor[(11, 10, 6), float64], Tensor[(1, 7, 10), uint64], Tensor[(24), float64], Tensor[(3150), float64]) {
    %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 10, 6), uint64] */, dtype="uint64") /* ty=Tensor[(11, 10, 6), uint64] */;
    %35 = shape_of(%var_5272, dtype="int32") /* ty=Tensor[(3), int32] */;
    %36 = cast(%var_5272, dtype="uint64") /* ty=Tensor[(11, 10, 6), uint64] */;
    %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 10, 6), uint64] */, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
    %39 = cast(%var_5281, dtype="float64") /* ty=Tensor[(24), float64] */;
    %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %41 = reshape(%39, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
    %42 = reshape(%40, newshape=[1575, 2]) /* ty=Tensor[(1575, 2), float64] */;
    %43 = @func_2931(%41, %42) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], Tensor[(6, 4), float64], Tensor[(1575, 2), float64], Tensor[(12, 2, 9), float64]) */;
    %44 = bitwise_xor(%36, %37) /* ty=Tensor[(11, 10, 6), uint64] */;
    %45 = sqrt(%38) /* ty=Tensor[(11, 10, 6), float64] */;
    %46 = %43.1;
    (%44, %45, %46, %var_5281, meta[relay.Constant][2] /* ty=Tensor[(3150), float64] */)
  };
  %47(%var_5311, %var_5312) /* ty=(Tensor[(11, 10, 6), uint64], Tensor[(11, 10, 6), float64], Tensor[(1, 7, 10), uint64], Tensor[(24), float64], Tensor[(3150), float64]) */
}

def @func_3648(%var_3601: Tensor[(4, 7, 10), uint64]) -> (Tensor[(4, 7, 10), float32], Tensor[(12, 2, 9), float64], Tensor[(4, 7, 10), uint8], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) {
  %48 = cast(%var_3601, dtype="float32") /* ty=Tensor[(4, 7, 10), float32] */;
  %49 = log(%48) /* ty=Tensor[(4, 7, 10), float32] */;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(4, 7, 10), float32] */;
  %51 = acosh(%50) /* ty=Tensor[(4, 7, 10), float32] */;
  %52 = cast(%51, dtype="float32") /* ty=Tensor[(4, 7, 10), float32] */;
  %53 = asin(%52) /* ty=Tensor[(4, 7, 10), float32] */;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(4, 7, 10), float32] */;
  %55 = @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %56 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %57 = %56.1;
  %58 = cast(%57, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %59 = cast(%var_3601, dtype="bool") /* ty=Tensor[(4, 7, 10), bool] */;
  %60 = equal(%58, %59) /* ty=Tensor[(4, 7, 10), bool] */;
  %61 = cast(%60, dtype="uint8") /* ty=Tensor[(4, 7, 10), uint8] */;
  %62 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%49, dtype="uint8") /* ty=Tensor[(4, 7, 10), uint8] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %65 = @func_3467() /* ty=(uint64, Tensor[(1, 7, 10), uint64]) */;
  %66 = exp(%54) /* ty=Tensor[(4, 7, 10), float32] */;
  %67 = %55.0;
  %68 = minimum(%63, %64) /* ty=Tensor[(4, 7, 10), uint8] */;
  %69 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %70 = %65.1;
  (%66, %67, %68, %69, %70)
}

def @func_3238() -> Tensor[(1, 7, 10), uint64] {
  %71 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %71.1
}

def @func_2745() -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) {
  %72 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %73 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %74 = %73.1;
  %75 = cast(%74, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %76 = cast(%74, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  %77 = atan(%76) /* ty=Tensor[(1, 7, 10), float32] */;
  %78 = cast(%77, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
  %79 = %72.0;
  %80 = sin(%75) /* ty=Tensor[(1, 7, 10), float64] */;
  %81 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %82 = log(%78) /* ty=Tensor[(1, 7, 10), float64] */;
  (%79, %80, %81, %82)
}

def @func_6054(%var_6053: Tensor[(252), int16]) -> (Tensor[(24), float64], Tensor[(1, 30), uint32], Tensor[(6, 4), float64], Tensor[(1, 7, 10), uint64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(3150), float64], Tensor[(?, 7, 10), uint64], Tensor[(?, 7, 10), int64]) {
  %130 = fn (%var_5993: Tensor[(252), int16]) -> (Tensor[(24), float64], Tensor[(1, 30), uint32], Tensor[(6, 4), float64], Tensor[(1, 7, 10), uint64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(3150), float64], Tensor[(?, 7, 10), uint64], Tensor[(?, 7, 10), int64]) {
    %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 30), uint32] */, dtype="uint32") /* ty=Tensor[(1, 30), uint32] */;
    %84 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 30), uint32] */, dtype="uint32") /* ty=Tensor[(1, 30), uint32] */;
    %85 = reshape(%83, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), uint32] */;
    %86 = reshape(%84, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), uint32] */;
    %87 = @func_5453(%85, %86) /* ty=(Tensor[(3, 5, 2), bool], Tensor[(1, 7, 10), uint64], Tensor[(?, 7, 10), float64], Tensor[(3150), float64], Tensor[(24), float64], Tensor[(3150), float64], Tensor[(1, 7, 10), uint64]) */;
    %88 = %87.4;
    %89 = cast(%88, dtype="float64") /* ty=Tensor[(24), float64] */;
    %90 = cast(meta[relay.Constant][4] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %91 = reshape(%89, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %92 = reshape(%90, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
    %93 = @func_4910(%91, %92) /* ty=(Tensor[(12, 2, 9), int32], uint64, uint64, Tensor[(1, 7, 10), uint64], uint64, Tensor[(6, 4), float64], Tensor[(24), float64], Tensor[(3150), float64]) */;
    %94 = @func_4131() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) */;
    %95 = cast(%var_5993, dtype="int16") /* ty=Tensor[(252), int16] */;
    %96 = cast(%var_5993, dtype="int16") /* ty=Tensor[(252), int16] */;
    %97 = reshape(%95, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int16] */;
    %98 = reshape(%96, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int16] */;
    %99 = cast(meta[relay.Constant][4] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %100 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
    %101 = %100.1;
    %102 = cast(%101, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
    %103 = asinh(%102) /* ty=Tensor[(1, 7, 10), float64] */;
    %104 = cast(%101, dtype="uint64") /* ty=Tensor[(1, 7, 10), uint64] */;
    %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
    %106 = cast(%103, dtype="uint64") /* ty=Tensor[(1, 7, 10), uint64] */;
    %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %108 = cast(%103, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
    %109 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %110 = cast(%101, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
    %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %112 = greater(%110, %111) /* ty=Tensor[(?, 7, 10), bool] */;
    %113 = cast(%112, dtype="float32") /* ty=Tensor[(?, 7, 10), float32] */;
    %114 = tan(%113) /* ty=Tensor[(?, 7, 10), float32] */;
    %115 = cast(%112, dtype="int32") /* ty=Tensor[(?, 7, 10), int32] */;
    %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
    %117 = cast(%114, dtype="int32") /* ty=Tensor[(?, 7, 10), int32] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %119 = right_shift(%117, %118) /* ty=Tensor[(?, 7, 10), int32] */;
    %120 = cast(%119, dtype="int64") /* ty=Tensor[(?, 7, 10), int64] */;
    %121 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
    %122 = cast(%112, dtype="int64") /* ty=Tensor[(?, 7, 10), int64] */;
    %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %124 = %93.5;
    %125 = %94.0;
    %126 = @func_807(%97, %98) /* ty=Tensor[(4, 7, 9), int16] */;
    %127 = asin(%99) /* ty=Tensor[(3150), float64] */;
    %128 = multiply(%106, %107) /* ty=Tensor[(?, 7, 10), uint64] */;
    %129 = add(%122, %123) /* ty=Tensor[(?, 7, 10), int64] */;
    (%88, meta[relay.Constant][3] /* ty=Tensor[(1, 30), uint32] */, %124, %125, %126, %var_5993, %127, %128, %129)
  };
  %130(%var_6053) /* ty=(Tensor[(24), float64], Tensor[(1, 30), uint32], Tensor[(6, 4), float64], Tensor[(1, 7, 10), uint64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(3150), float64], Tensor[(?, 7, 10), uint64], Tensor[(?, 7, 10), int64]) */
}

def @func_6448() -> Tensor[(1, 7, 10), float32] {
  @func_5699() /* ty=Tensor[(1, 7, 10), float32] */
}

def @func_3707() -> (Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], uint64) {
  %138 = fn () -> (Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], uint64) {
    %131 = @func_3680() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), int8]) */;
    %132 = cast(meta[relay.Constant][5] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %133 = %131.0;
    %134 = cast(%133, dtype="uint64") /* ty=Tensor[(1, 7, 10), uint64] */;
    %135 = reshape(%132, newshape=[]) /* ty=uint64 */;
    %136 = reshape(%134, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
    %137 = @func_612(%135, %136) /* ty=Tensor[(1, 7, 10), uint64] */;
    (%133, %137, meta[relay.Constant][5] /* ty=uint64 */)
  };
  %138() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], uint64) */
}

def @func_3467() -> (uint64, Tensor[(1, 7, 10), uint64]) {
  %139 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %140 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %141 = %139.2;
  %142 = %140.1;
  (%141, %142)
}

def @func_2520() -> (Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) {
  @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */
}

def @func_5701() -> Tensor[(1, 7, 10), float32] {
  @func_5699() /* ty=Tensor[(1, 7, 10), float32] */
}

def @func_4493() -> (Tensor[(12, 2, 9), float64],) {
  @func_4491() /* ty=(Tensor[(12, 2, 9), float64],) */
}

def @func_2613(%var_2611: Tensor[(1, 7, 14), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(70), uint64], Tensor[(1, 7, 14), float64]) {
  @func_2610(%var_2611) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(70), uint64], Tensor[(1, 7, 14), float64]) */
}

def @func_5713() -> uint64 {
  @func_5711() /* ty=uint64 */
}

def @func_5928(%var_5899: Tensor[(5, 7, 10), uint8], %var_5909: Tensor[(14, 28), float64], %var_5910: uint64) -> (Tensor[(?, 7, 10), int64], Tensor[(5, 7, 10), float64], Tensor[(15, 15, 14), float64], Tensor[(14, 28), float64], uint64, Tensor[(5, 7, 10), int8]) {
  %143 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %144 = %143.1;
  %145 = cast(%144, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  %146 = exp(%145) /* ty=Tensor[(1, 7, 10), float32] */;
  %147 = cast(%146, dtype="int64") /* ty=Tensor[(1, 7, 10), int64] */;
  %148 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%144, dtype="int64") /* ty=Tensor[(1, 7, 10), int64] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %151 = cast(%146, dtype="uint8") /* ty=Tensor[(1, 7, 10), uint8] */;
  %152 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%144, dtype="uint8") /* ty=Tensor[(1, 7, 10), uint8] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %155 = maximum(%153, %154) /* ty=Tensor[(?, 7, 10), uint8] */;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(?, 7, 10), float64] */;
  %157 = cast(%var_5899, dtype="float64") /* ty=Tensor[(5, 7, 10), float64] */;
  %158 = cast(%var_5909, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %159 = cast(%var_5909, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %160 = cast(%var_5910, dtype="uint64") /* ty=uint64 */;
  %161 = reshape(%158, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), float64] */;
  %162 = reshape(%159, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), float64] */;
  %163 = reshape(%160, newshape=[]) /* ty=uint64 */;
  %164 = @func_3987(%161, %162, %163) /* ty=(Tensor[(7, 7, 8), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], uint64) */;
  %165 = cast(%var_5899, dtype="int8") /* ty=Tensor[(5, 7, 10), int8] */;
  %166 = cast(%146, dtype="int8") /* ty=Tensor[(1, 7, 10), int8] */;
  %167 = left_shift(%149, %150) /* ty=Tensor[(?, 7, 10), int64] */;
  %168 = mod(%156, %157) /* ty=Tensor[(5, 7, 10), float64] */;
  %169 = %164.2;
  %170 = bitwise_or(%165, %166) /* ty=Tensor[(5, 7, 10), int8] */;
  (%167, %168, %169, %var_5909, %var_5910, %170)
}

def @func_667(%var_665: Tensor[(15, 15, 14), float64]) -> (Tensor[(15, 15, 14), float64],) {
  @func_664(%var_665) /* ty=(Tensor[(15, 15, 14), float64],) */
}

def @func_6575(%var_6574: Tensor[(13, 6, 11), int16]) -> (Tensor[(13, 6, 11), bool], Tensor[(1, 7, 10), uint64], Tensor[(12, 2), float64], Tensor[(45, 70), float64]) {
  %180 = fn (%var_6559: Tensor[(13, 6, 11), int16]) -> (Tensor[(13, 6, 11), bool], Tensor[(1, 7, 10), uint64], Tensor[(12, 2), float64], Tensor[(45, 70), float64]) {
    %171 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 6, 1), int16] */, dtype="bool") /* ty=Tensor[(13, 6, 1), bool] */;
    %172 = cast(%var_6559, dtype="bool") /* ty=Tensor[(13, 6, 11), bool] */;
    %173 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
    %174 = cast(meta[relay.Constant][8] /* ty=Tensor[(45, 70), float64] */, dtype="float64") /* ty=Tensor[(45, 70), float64] */;
    %175 = reshape(%173, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
    %176 = reshape(%174, newshape=[1575, 2]) /* ty=Tensor[(1575, 2), float64] */;
    %177 = @func_2931(%175, %176) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], Tensor[(6, 4), float64], Tensor[(1575, 2), float64], Tensor[(12, 2, 9), float64]) */;
    %178 = equal(%171, %172) /* ty=Tensor[(13, 6, 11), bool] */;
    %179 = %177.0;
    (%178, %179, meta[relay.Constant][7] /* ty=Tensor[(12, 2), float64] */, meta[relay.Constant][8] /* ty=Tensor[(45, 70), float64] */)
  };
  %180(%var_6574) /* ty=(Tensor[(13, 6, 11), bool], Tensor[(1, 7, 10), uint64], Tensor[(12, 2), float64], Tensor[(45, 70), float64]) */
}

def @func_7429() -> (Tensor[(12, 2, 9), float64],) {
  %183 = fn () -> (Tensor[(12, 2, 9), float64],) {
    %181 = @func_4090() /* ty=(Tensor[(12, 2, 9), float64],) */;
    %182 = %181.0;
    (%182,)
  };
  %183() /* ty=(Tensor[(12, 2, 9), float64],) */
}

def @func_2244() -> Tensor[(1, 7, 10), uint64] {
  %185 = fn () -> Tensor[(1, 7, 10), uint64] {
    %184 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
    %184.1
  };
  %185() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_3084(%var_3082: uint64) -> (Tensor[(70), uint64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), uint64]) {
  @func_3081(%var_3082) /* ty=(Tensor[(70), uint64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), uint64]) */
}

def @func_4781(%var_4763: Tensor[(9, 12, 16), float64]) -> Tensor[(9, 12, 16), float64] {
  %186 = cast(%var_4763, dtype="float64") /* ty=Tensor[(9, 12, 16), float64] */;
  sqrt(%186) /* ty=Tensor[(9, 12, 16), float64] */
}

def @func_5587() -> Tensor[(1, 7, 10), uint64] {
  %187 = fn () -> Tensor[(1, 7, 10), uint64] {
    @func_3238() /* ty=Tensor[(1, 7, 10), uint64] */
  };
  %187() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_3081(%var_3073: uint64) -> (Tensor[(70), uint64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), uint64]) {
  %188 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %189 = cast(%var_3073, dtype="uint64") /* ty=uint64 */;
  %190 = %188.3;
  %191 = cast(%190, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %192 = reshape(%189, newshape=[]) /* ty=uint64 */;
  %193 = reshape(%191, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
  %194 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %195 = @func_612(%192, %193) /* ty=Tensor[(1, 7, 10), uint64] */;
  %196 = %194.2;
  (%190, %195, %var_3073, %196)
}

def @func_7305(%var_7303: Tensor[(660), uint64], %var_7304: Tensor[(24), float64]) -> (Tensor[(1, 7, 10), float32], Tensor[(1, 7, 10), uint64], Tensor[(13, 6, 11), bool], Tensor[(858), int16], Tensor[(11, 10, 6), uint64], Tensor[(660), uint64], Tensor[(24), float64]) {
  %210 = fn (%var_7299: Tensor[(660), uint64], %var_7300: Tensor[(24), float64]) -> (Tensor[(1, 7, 10), float32], Tensor[(1, 7, 10), uint64], Tensor[(13, 6, 11), bool], Tensor[(858), int16], Tensor[(11, 10, 6), uint64], Tensor[(660), uint64], Tensor[(24), float64]) {
    %197 = @func_5007() /* ty=(Tensor[(1, 7, 10), float32],) */;
    %198 = cast(meta[relay.Constant][9] /* ty=Tensor[(858), int16] */, dtype="int16") /* ty=Tensor[(858), int16] */;
    %199 = reshape(%198, newshape=[13, 6, 11]) /* ty=Tensor[(13, 6, 11), int16] */;
    %200 = @func_6573(%199) /* ty=(Tensor[(13, 6, 11), bool], Tensor[(1, 7, 10), uint64], Tensor[(12, 2), float64], Tensor[(45, 70), float64]) */;
    %201 = cast(%var_7299, dtype="uint64") /* ty=Tensor[(660), uint64] */;
    %202 = cast(%var_7300, dtype="float64") /* ty=Tensor[(24), float64] */;
    %203 = reshape(%201, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), uint64] */;
    %204 = reshape(%202, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %205 = @func_5310(%203, %204) /* ty=(Tensor[(11, 10, 6), uint64], Tensor[(11, 10, 6), float64], Tensor[(1, 7, 10), uint64], Tensor[(24), float64], Tensor[(3150), float64]) */;
    %206 = %197.0;
    %207 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
    %208 = %200.0;
    %209 = %205.0;
    (%206, %207, %208, meta[relay.Constant][9] /* ty=Tensor[(858), int16] */, %209, %var_7299, %var_7300)
  };
  %210(%var_7303, %var_7304) /* ty=(Tensor[(1, 7, 10), float32], Tensor[(1, 7, 10), uint64], Tensor[(13, 6, 11), bool], Tensor[(858), int16], Tensor[(11, 10, 6), uint64], Tensor[(660), uint64], Tensor[(24), float64]) */
}

def @func_6182(%var_6181: Tensor[(24), float64]) -> (Tensor[(24), float64], Tensor[(1, 7, 10), uint64], Tensor[(9, 2, 5), float64], uint64, Tensor[(12, 2, 9), bool], Tensor[(12, 2, 9), float64]) {
  %228 = fn (%var_6123: Tensor[(24), float64]) -> (Tensor[(24), float64], Tensor[(1, 7, 10), uint64], Tensor[(9, 2, 5), float64], uint64, Tensor[(12, 2, 9), bool], Tensor[(12, 2, 9), float64]) {
    %211 = @func_4303() /* ty=(Tensor[(9, 2, 5), float64],) */;
    %212 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
    %213 = %212.0;
    %214 = cast(%var_6123, dtype="float64") /* ty=Tensor[(24), float64] */;
    %215 = reshape(%214, newshape=[1, 24]) /* ty=Tensor[(1, 24), float64] */;
    %216 = @func_2810(%215) /* ty=(Tensor[(12, 2, 9), uint16], Tensor[(2, 3, 4), bool], Tensor[(1, 24), float64], Tensor[(3150), float64]) */;
    %217 = %216.0;
    %218 = cast(%217, dtype="bool") /* ty=Tensor[(12, 2, 9), bool] */;
    %219 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%213, dtype="bool") /* ty=Tensor[(12, 2, 9), bool] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %222 = @func_4491() /* ty=(Tensor[(12, 2, 9), float64],) */;
    %223 = @func_5332() /* ty=Tensor[(1, 7, 10), uint64] */;
    %224 = %211.0;
    %225 = @func_5763() /* ty=uint64 */;
    %226 = less(%220, %221) /* ty=Tensor[(12, 2, 9), bool] */;
    %227 = %222.0;
    (%var_6123, %223, %224, %225, %226, %227)
  };
  %228(%var_6181) /* ty=(Tensor[(24), float64], Tensor[(1, 7, 10), uint64], Tensor[(9, 2, 5), float64], uint64, Tensor[(12, 2, 9), bool], Tensor[(12, 2, 9), float64]) */
}

def @func_807(%var_800: Tensor[(4, 7, 9), int16], %var_801: Tensor[(4, 7, 9), int16]) -> Tensor[(4, 7, 9), int16] {
  %229 = cast(%var_801, dtype="int16") /* ty=Tensor[(4, 7, 9), int16] */;
  %230 = shape_of(%var_800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%var_800, dtype="int16") /* ty=Tensor[(4, 7, 9), int16] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%231, %232) /* ty=Tensor[(4, 7, 9), int16] */
}

def @func_5117() -> Tensor[(15, 15, 14), int8] {
  @func_5115() /* ty=Tensor[(15, 15, 14), int8] */
}

def @func_5550(%var_5539: Tensor[(2, 7, 10), uint64]) -> (Tensor[(2, 7, 10), bool], Tensor[(2, 7, 10), float64]) {
  %233 = @func_3164() /* ty=Tensor[(1, 7, 10), uint64] */;
  %234 = cast(%233, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %235 = cast(%var_5539, dtype="bool") /* ty=Tensor[(2, 7, 10), bool] */;
  %236 = cast(%var_5539, dtype="float64") /* ty=Tensor[(2, 7, 10), float64] */;
  %237 = greater(%234, %235) /* ty=Tensor[(2, 7, 10), bool] */;
  %238 = exp(%236) /* ty=Tensor[(2, 7, 10), float64] */;
  (%237, %238)
}

def @func_3824(%var_3823: Tensor[(2, 7, 10), uint64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(70), uint64], uint64, Tensor[(2, 7, 10), bool]) {
  %253 = fn (%var_3743: Tensor[(2, 7, 10), uint64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(70), uint64], uint64, Tensor[(2, 7, 10), bool]) {
    %239 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
    %240 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %241 = reshape(%240, newshape=[]) /* ty=uint64 */;
    %242 = @func_3081(%241) /* ty=(Tensor[(70), uint64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), uint64]) */;
    %243 = @func_3311() /* ty=(Tensor[(1, 7, 10), uint64],) */;
    %244 = %243.0;
    %245 = cast(%244, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
    %246 = cast(%var_3743, dtype="bool") /* ty=Tensor[(2, 7, 10), bool] */;
    %247 = less_equal(%245, %246) /* ty=Tensor[(2, 7, 10), bool] */;
    %248 = cast(%247, dtype="bool") /* ty=Tensor[(2, 7, 10), bool] */;
    %249 = cast(%244, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
    %250 = %239.2;
    %251 = %242.0;
    %252 = logical_and(%248, %249) /* ty=Tensor[(2, 7, 10), bool] */;
    (%250, %251, meta[relay.Constant][10] /* ty=uint64 */, %252)
  };
  %253(%var_3823) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(70), uint64], uint64, Tensor[(2, 7, 10), bool]) */
}

def @func_6393(%var_6392: Tensor[(16, 13, 5), float64]) -> Tensor[(16, 13, 5), uint64] {
  %273 = fn (%var_6312: Tensor[(16, 13, 5), float64]) -> Tensor[(16, 13, 5), uint64] {
    %254 = cast(%var_6312, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
    %255 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(16, 13, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %256 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 13, 5), float64] */, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
    %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %258 = less(%256, %257) /* ty=Tensor[(16, 13, 5), bool] */;
    %259 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 13, 5), float64] */, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
    %260 = shape_of(%var_6312, dtype="int32") /* ty=Tensor[(3), int32] */;
    %261 = cast(%var_6312, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
    %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %263 = equal(%261, %262) /* ty=Tensor[(16, 13, 5), bool] */;
    %264 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 13, 5), bool] */, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
    %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
    %266 = cast(%263, dtype="bool") /* ty=Tensor[(16, 13, 5), bool] */;
    %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %268 = not_equal(%266, %267) /* ty=Tensor[(16, 13, 5), bool] */;
    %269 = cast(%268, dtype="uint64") /* ty=Tensor[(16, 13, 5), uint64] */;
    %270 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
    %271 = cast(%258, dtype="uint64") /* ty=Tensor[(16, 13, 5), uint64] */;
    %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    logical_xor(%271, %272) /* ty=Tensor[(16, 13, 5), uint64] */
  };
  %273(%var_6392) /* ty=Tensor[(16, 13, 5), uint64] */
}

def @func_4350(%var_4337: Tensor[(9, 2, 5), float64]) -> (Tensor[(9, 2, 5), int32],) {
  %274 = @func_4303() /* ty=(Tensor[(9, 2, 5), float64],) */;
  %275 = %274.0;
  %276 = cast(%var_4337, dtype="int32") /* ty=Tensor[(9, 2, 5), int32] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="int32") /* ty=Tensor[(9, 2, 5), int32] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %280 = bitwise_and(%278, %279) /* ty=Tensor[(9, 2, 5), int32] */;
  (%280,)
}

def @func_2813(%var_2811: Tensor[(1, 24), float64]) -> (Tensor[(12, 2, 9), uint16], Tensor[(2, 3, 4), bool], Tensor[(1, 24), float64], Tensor[(3150), float64]) {
  @func_2810(%var_2811) /* ty=(Tensor[(12, 2, 9), uint16], Tensor[(2, 3, 4), bool], Tensor[(1, 24), float64], Tensor[(3150), float64]) */
}

def @func_4536() -> (Tensor[(1, 7, 10), uint64],) {
  %283 = fn () -> (Tensor[(1, 7, 10), uint64],) {
    %281 = @func_3582() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(3150), bool], Tensor[(24), float64], Tensor[(45, 70), float64]) */;
    %282 = %281.0;
    (%282,)
  };
  %283() /* ty=(Tensor[(1, 7, 10), uint64],) */
}

def @func_2747() -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) {
  @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */
}

def @func_1387(%var_1386: Tensor[(9, 2, 5), float32]) -> (Tensor[(9, 2, 5), float32],) {
  %286 = fn (%var_1381: Tensor[(9, 2, 5), float32]) -> (Tensor[(9, 2, 5), float32],) {
    %284 = cast(%var_1381, dtype="float32") /* ty=Tensor[(9, 2, 5), float32] */;
    %285 = sinh(%284) /* ty=Tensor[(9, 2, 5), float32] */;
    (%285,)
  };
  %286(%var_1386) /* ty=(Tensor[(9, 2, 5), float32],) */
}

def @func_4491() -> (Tensor[(12, 2, 9), float64],) {
  %287 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %288 = %287.0;
  (%288,)
}

def @func_6758() -> Tensor[(15, 13, 15), float64] {
  %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 13, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 15), float32] */;
  %290 = log10(%289) /* ty=Tensor[(15, 13, 15), float32] */;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(15, 13, 15), float64] */;
  %292 = cos(%291) /* ty=Tensor[(15, 13, 15), float64] */;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(15, 13, 15), float64] */;
  atan(%293) /* ty=Tensor[(15, 13, 15), float64] */
}

def @func_3583() -> (Tensor[(1, 7, 10), uint64], Tensor[(3150), bool], Tensor[(24), float64], Tensor[(45, 70), float64]) {
  %303 = fn () -> (Tensor[(1, 7, 10), uint64], Tensor[(3150), bool], Tensor[(24), float64], Tensor[(45, 70), float64]) {
    %294 = cast(meta[relay.Constant][14] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %295 = cast(meta[relay.Constant][15] /* ty=Tensor[(45, 70), float64] */, dtype="float64") /* ty=Tensor[(45, 70), float64] */;
    %296 = cast(meta[relay.Constant][15] /* ty=Tensor[(45, 70), float64] */, dtype="float64") /* ty=Tensor[(45, 70), float64] */;
    %297 = reshape(%294, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %298 = reshape(%295, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
    %299 = reshape(%296, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
    %300 = @func_2668(%297, %298, %299) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), bool]) */;
    %301 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
    %302 = %300.3;
    (%301, %302, meta[relay.Constant][14] /* ty=Tensor[(24), float64] */, meta[relay.Constant][15] /* ty=Tensor[(45, 70), float64] */)
  };
  %303() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(3150), bool], Tensor[(24), float64], Tensor[(45, 70), float64]) */
}

def @func_7259(%var_7257: float64, %var_7258: Tensor[(1, 10, 3), float64]) -> (Tensor[(1, 10, 3), float64],) {
  @func_7255(%var_7257, %var_7258) /* ty=(Tensor[(1, 10, 3), float64],) */
}

def @func_7483() -> (Tensor[(1, 7, 10), uint64], Tensor[(15, 13, 15), float64]) {
  %307 = fn () -> (Tensor[(1, 7, 10), uint64], Tensor[(15, 13, 15), float64]) {
    %304 = @func_5141() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) */;
    %305 = %304.1;
    %306 = @func_6758() /* ty=Tensor[(15, 13, 15), float64] */;
    (%305, %306)
  };
  %307() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 13, 15), float64]) */
}

def @func_3312() -> (Tensor[(1, 7, 10), uint64],) {
  %310 = fn () -> (Tensor[(1, 7, 10), uint64],) {
    %308 = @func_3279() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) */;
    %309 = %308.0;
    (%309,)
  };
  %310() /* ty=(Tensor[(1, 7, 10), uint64],) */
}

def @main(%var_7577: Tensor[(1, 7, 10), float32]) -> (uint64, Tensor[(?, 7, 10), int64]) {
  %311 = @func_6626() /* ty=(uint64,) */;
  %312 = @func_5699() /* ty=Tensor[(1, 7, 10), float32] */;
  %313 = cast(%var_7577, dtype="int64") /* ty=Tensor[(1, 7, 10), int64] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="int64") /* ty=Tensor[(1, 7, 10), int64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %317 = %311.0;
  %318 = subtract(%315, %316) /* ty=Tensor[(?, 7, 10), int64] */;
  (%317, %318)
}

def @func_7529() -> (uint64,) {
  %320 = fn () -> (uint64,) {
    %319 = @func_4522() /* ty=uint64 */;
    (%319,)
  };
  %320() /* ty=(uint64,) */
}

def @func_5115() -> Tensor[(15, 15, 14), int8] {
  %321 = @func_3680() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), int8]) */;
  %321.1
}

def @func_2388(%var_2386: Tensor[(24), float64], %var_2387: Tensor[(3150), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), float64]) {
  %329 = fn (%var_2356: Tensor[(24), float64], %var_2357: Tensor[(3150), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), float64]) {
    %322 = cast(%var_2356, dtype="float64") /* ty=Tensor[(24), float64] */;
    %323 = cast(%var_2357, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %324 = reshape(%322, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
    %325 = reshape(%323, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
    %326 = @func_782(%324, %325) /* ty=(Tensor[(2, 3, 4), bool], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) */;
    %327 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
    %328 = %326.0;
    (%327, %328, %var_2356, %var_2357)
  };
  %329(%var_2386, %var_2387) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), float64]) */
}

def @func_5553(%var_5551: Tensor[(2, 7, 10), uint64]) -> (Tensor[(2, 7, 10), bool], Tensor[(2, 7, 10), float64]) {
  @func_5550(%var_5551) /* ty=(Tensor[(2, 7, 10), bool], Tensor[(2, 7, 10), float64]) */
}

def @func_7033(%var_7032: Tensor[(1728), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(9, 12, 16), float64], Tensor[(1728), float64]) {
  %335 = fn (%var_7017: Tensor[(1728), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(9, 12, 16), float64], Tensor[(1728), float64]) {
    %330 = @func_4535() /* ty=(Tensor[(1, 7, 10), uint64],) */;
    %331 = cast(%var_7017, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %332 = reshape(%331, newshape=[9, 12, 16]) /* ty=Tensor[(9, 12, 16), float64] */;
    %333 = %330.0;
    %334 = @func_4781(%332) /* ty=Tensor[(9, 12, 16), float64] */;
    (%333, %334, %var_7017)
  };
  %335(%var_7032) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(9, 12, 16), float64], Tensor[(1728), float64]) */
}

def @func_4353(%var_4351: Tensor[(9, 2, 5), float64]) -> (Tensor[(9, 2, 5), int32],) {
  @func_4350(%var_4351) /* ty=(Tensor[(9, 2, 5), int32],) */
}

def @func_2610(%var_2574: Tensor[(1, 7, 14), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(70), uint64], Tensor[(1, 7, 14), float64]) {
  %336 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
  %337 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %338 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %339 = cast(%var_2574, dtype="float64") /* ty=Tensor[(1, 7, 14), float64] */;
  %340 = acos(%339) /* ty=Tensor[(1, 7, 14), float64] */;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(1, 7, 14), float64] */;
  %342 = %336.1;
  %343 = %337.0;
  %344 = %338.3;
  %345 = cos(%341) /* ty=Tensor[(1, 7, 14), float64] */;
  (%342, %343, %344, %345)
}

def @func_5333() -> Tensor[(1, 7, 10), uint64] {
  %347 = fn () -> Tensor[(1, 7, 10), uint64] {
    %346 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
    %346.2
  };
  %347() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_7117(%var_7116: Tensor[(3, 30), float64]) -> (Tensor[(9, 7, 10), float64], Tensor[(9, 2, 5), int32], Tensor[(3, 30), float64], Tensor[(1, 7, 10), float64], Tensor[(9, 2, 5), float64]) {
  %361 = fn (%var_7092: Tensor[(3, 30), float64]) -> (Tensor[(9, 7, 10), float64], Tensor[(9, 2, 5), int32], Tensor[(3, 30), float64], Tensor[(1, 7, 10), float64], Tensor[(9, 2, 5), float64]) {
    %348 = @func_5693() /* ty=(Tensor[(9, 7, 10), bool], Tensor[(9, 7, 10), float32]) */;
    %349 = %348.1;
    %350 = cast(%349, dtype="float64") /* ty=Tensor[(9, 7, 10), float64] */;
    %351 = cast(%var_7092, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
    %352 = reshape(%351, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), float64] */;
    %353 = @func_4350(%352) /* ty=(Tensor[(9, 2, 5), int32],) */;
    %354 = @func_5699() /* ty=Tensor[(1, 7, 10), float32] */;
    %355 = cast(%354, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
    %356 = @func_5581() /* ty=(Tensor[(9, 2, 5), float64],) */;
    %357 = rsqrt(%350) /* ty=Tensor[(9, 7, 10), float64] */;
    %358 = %353.0;
    %359 = asin(%355) /* ty=Tensor[(1, 7, 10), float64] */;
    %360 = %356.0;
    (%357, %358, %var_7092, %359, %360)
  };
  %361(%var_7116) /* ty=(Tensor[(9, 7, 10), float64], Tensor[(9, 2, 5), int32], Tensor[(3, 30), float64], Tensor[(1, 7, 10), float64], Tensor[(9, 2, 5), float64]) */
}

def @func_2228() -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) {
  @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */
}

def @func_664(%var_636: Tensor[(15, 15, 14), float64]) -> (Tensor[(15, 15, 14), float64],) {
  %362 = cast(%var_636, dtype="float64") /* ty=Tensor[(15, 15, 14), float64] */;
  %363 = exp(%362) /* ty=Tensor[(15, 15, 14), float64] */;
  (%363,)
}

def @func_616(%var_614: uint64, %var_615: Tensor[(1, 7, 10), uint64]) -> Tensor[(1, 7, 10), uint64] {
  @func_612(%var_614, %var_615) /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_6284(%var_6280: Tensor[(4, 3, 11), float32], %var_6281: Tensor[(4, 3, 11), float32], %var_6282: Tensor[(2160), float64], %var_6283: Tensor[(360), float32]) -> (Tensor[(4, 3, 11), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(3, 10, 12), uint64], Tensor[(360), float32], Tensor[(4, 3, 11), int64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) {
  %393 = fn (%var_6201: Tensor[(4, 3, 11), float32], %var_6202: Tensor[(4, 3, 11), float32], %var_6218: Tensor[(2160), float64], %var_6238: Tensor[(360), float32]) -> (Tensor[(4, 3, 11), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(3, 10, 12), uint64], Tensor[(360), float32], Tensor[(4, 3, 11), int64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) {
    %364 = cast(%var_6202, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
    %365 = shape_of(%var_6201, dtype="int32") /* ty=Tensor[(3), int32] */;
    %366 = cast(%var_6201, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
    %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %368 = cast(%var_6218, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %369 = reshape(%368, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
    %370 = @func_4732(%369) /* ty=(Tensor[(16, 9, 15), float64],) */;
    %371 = cast(%var_6238, dtype="float32") /* ty=Tensor[(360), float32] */;
    %372 = reshape(%371, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
    %373 = @func_4485(%372) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(3, 10, 12), uint64]) */;
    %374 = cast(%var_6201, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
    %375 = sinh(%374) /* ty=Tensor[(4, 3, 11), float32] */;
    %376 = cast(%var_6202, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
    %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%375, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %380 = power(%378, %379) /* ty=Tensor[(4, 3, 11), float32] */;
    %381 = cast(%var_6202, dtype="int64") /* ty=Tensor[(4, 3, 11), int64] */;
    %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
    %383 = cast(%380, dtype="int64") /* ty=Tensor[(4, 3, 11), int64] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %385 = cast(meta[relay.Constant][16] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %386 = reshape(%385, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
    %387 = @func_664(%386) /* ty=(Tensor[(15, 15, 14), float64],) */;
    %388 = floor_divide(%366, %367) /* ty=Tensor[(4, 3, 11), float32] */;
    %389 = %370.0;
    %390 = %373.1;
    %391 = bitwise_and(%383, %384) /* ty=Tensor[(4, 3, 11), int64] */;
    %392 = %387.0;
    (%388, %389, %var_6218, %390, %var_6238, %391, %392, meta[relay.Constant][16] /* ty=Tensor[(3150), float64] */)
  };
  %393(%var_6280, %var_6281, %var_6282, %var_6283) /* ty=(Tensor[(4, 3, 11), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(3, 10, 12), uint64], Tensor[(360), float32], Tensor[(4, 3, 11), int64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) */
}

def @func_6624() -> (uint64,) {
  %394 = @func_4522() /* ty=uint64 */;
  (%394,)
}

def @func_1048(%var_1047: Tensor[(3, 10, 8), float64]) -> (Tensor[(3, 10, 8), float32], Tensor[(3, 10, 8), float64], Tensor[(3, 10, 8), bool], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) {
  %413 = fn (%var_1001: Tensor[(3, 10, 8), float64]) -> (Tensor[(3, 10, 8), float32], Tensor[(3, 10, 8), float64], Tensor[(3, 10, 8), bool], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) {
    %395 = cast(%var_1001, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
    %396 = log(%395) /* ty=Tensor[(3, 10, 8), float64] */;
    %397 = cast(%396, dtype="float32") /* ty=Tensor[(3, 10, 8), float32] */;
    %398 = asinh(%397) /* ty=Tensor[(3, 10, 8), float32] */;
    %399 = cast(%398, dtype="float32") /* ty=Tensor[(3, 10, 8), float32] */;
    %400 = cast(%398, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
    %401 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 10, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 10, 8), bool] */;
    %402 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
    %403 = cast(%398, dtype="bool") /* ty=Tensor[(3, 10, 8), bool] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %405 = cast(meta[relay.Constant][18] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %406 = cast(meta[relay.Constant][19] /* ty=Tensor[(70), uint64] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
    %407 = reshape(%405, newshape=[]) /* ty=uint64 */;
    %408 = reshape(%406, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
    %409 = sinh(%399) /* ty=Tensor[(3, 10, 8), float32] */;
    %410 = exp(%400) /* ty=Tensor[(3, 10, 8), float64] */;
    %411 = greater(%403, %404) /* ty=Tensor[(3, 10, 8), bool] */;
    %412 = @func_612(%407, %408) /* ty=Tensor[(1, 7, 10), uint64] */;
    (%409, %410, %411, %412, meta[relay.Constant][18] /* ty=uint64 */, meta[relay.Constant][19] /* ty=Tensor[(70), uint64] */)
  };
  %413(%var_1047) /* ty=(Tensor[(3, 10, 8), float32], Tensor[(3, 10, 8), float64], Tensor[(3, 10, 8), bool], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */
}

def @func_2848() -> Tensor[(12, 2, 9), float64] {
  %414 = @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %414.0
}

def @func_4717() -> (Tensor[(?, 7, 10), float64], uint64) {
  %424 = fn () -> (Tensor[(?, 7, 10), float64], uint64) {
    %415 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
    %416 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
    %417 = %416.3;
    %418 = cast(%417, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
    %419 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%415, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %422 = mod(%420, %421) /* ty=Tensor[(?, 7, 10), float64] */;
    %423 = @func_4522() /* ty=uint64 */;
    (%422, %423)
  };
  %424() /* ty=(Tensor[(?, 7, 10), float64], uint64) */
}

def @func_5693() -> (Tensor[(9, 7, 10), bool], Tensor[(9, 7, 10), float32]) {
  %425 = @func_2965() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %426 = %425.0;
  %427 = cast(%426, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %428 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 7, 10), uint64] */, dtype="bool") /* ty=Tensor[(9, 7, 10), bool] */;
  %429 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 7, 10), uint64] */, dtype="float32") /* ty=Tensor[(9, 7, 10), float32] */;
  %430 = cast(%426, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  %431 = not_equal(%427, %428) /* ty=Tensor[(9, 7, 10), bool] */;
  %432 = floor_mod(%429, %430) /* ty=Tensor[(9, 7, 10), float32] */;
  (%431, %432)
}

def @func_3240() -> Tensor[(1, 7, 10), uint64] {
  @func_3238() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_4858(%var_4857: Tensor[(14, 7), float64]) -> (uint64, Tensor[(70), uint64], Tensor[(12, 2, 9), float64], Tensor[(14, 7), float64]) {
  %441 = fn (%var_4851: Tensor[(14, 7), float64]) -> (uint64, Tensor[(70), uint64], Tensor[(12, 2, 9), float64], Tensor[(14, 7), float64]) {
    %433 = @func_3467() /* ty=(uint64, Tensor[(1, 7, 10), uint64]) */;
    %434 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
    %435 = cast(%var_4851, dtype="float64") /* ty=Tensor[(14, 7), float64] */;
    %436 = reshape(%435, newshape=[1, 7, 14]) /* ty=Tensor[(1, 7, 14), float64] */;
    %437 = @func_2610(%436) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(70), uint64], Tensor[(1, 7, 14), float64]) */;
    %438 = %433.0;
    %439 = %434.3;
    %440 = %437.1;
    (%438, %439, %440, %var_4851)
  };
  %441(%var_4857) /* ty=(uint64, Tensor[(70), uint64], Tensor[(12, 2, 9), float64], Tensor[(14, 7), float64]) */
}

def @func_5699() -> Tensor[(1, 7, 10), float32] {
  %442 = @func_5007() /* ty=(Tensor[(1, 7, 10), float32],) */;
  %442.0
}

def @func_5581() -> (Tensor[(9, 2, 5), float64],) {
  %443 = @func_4303() /* ty=(Tensor[(9, 2, 5), float64],) */;
  %444 = %443.0;
  (%444,)
}

def @func_6679() -> Tensor[(1, 7, 10), uint64] {
  @func_6677() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_5765() -> uint64 {
  @func_5763() /* ty=uint64 */
}

def @func_4305() -> (Tensor[(9, 2, 5), float64],) {
  @func_4303() /* ty=(Tensor[(9, 2, 5), float64],) */
}

def @func_811(%var_809: Tensor[(4, 7, 9), int16], %var_810: Tensor[(4, 7, 9), int16]) -> Tensor[(4, 7, 9), int16] {
  @func_807(%var_809, %var_810) /* ty=Tensor[(4, 7, 9), int16] */
}

def @func_5153() -> Tensor[(12, 2, 9), int32] {
  %446 = fn () -> Tensor[(12, 2, 9), int32] {
    %445 = @func_4625() /* ty=(Tensor[(12, 2, 9), int32],) */;
    %445.0
  };
  %446() /* ty=Tensor[(12, 2, 9), int32] */
}

def @func_4090() -> (Tensor[(12, 2, 9), float64],) {
  %447 = @func_2848() /* ty=Tensor[(12, 2, 9), float64] */;
  (%447,)
}

def @func_3280() -> (Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) {
  %451 = fn () -> (Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) {
    %448 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
    %449 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
    %450 = %448.0;
    (%449, %450)
  };
  %451() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64]) */
}

def @func_3887(%var_3886: Tensor[(3150), bool]) -> (Tensor[(3150), bool], Tensor[(3150), float32]) {
  %461 = fn (%var_3858: Tensor[(3150), bool]) -> (Tensor[(3150), bool], Tensor[(3150), float32]) {
    %452 = @func_3582() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(3150), bool], Tensor[(24), float64], Tensor[(45, 70), float64]) */;
    %453 = %452.1;
    %454 = cast(%var_3858, dtype="bool") /* ty=Tensor[(3150), bool] */;
    %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(1), int32] */;
    %456 = cast(%453, dtype="bool") /* ty=Tensor[(3150), bool] */;
    %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?), bool] */;
    %458 = cast(%var_3858, dtype="float32") /* ty=Tensor[(3150), float32] */;
    %459 = greater_equal(%456, %457) /* ty=Tensor[(3150), bool] */;
    %460 = cos(%458) /* ty=Tensor[(3150), float32] */;
    (%459, %460)
  };
  %461(%var_3886) /* ty=(Tensor[(3150), bool], Tensor[(3150), float32]) */
}

def @func_5037() -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) {
  %470 = fn () -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) {
    %462 = @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */;
    %463 = @func_2965() /* ty=(Tensor[(1, 7, 10), uint64],) */;
    %464 = @func_4491() /* ty=(Tensor[(12, 2, 9), float64],) */;
    %465 = @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */;
    %466 = %462.0;
    %467 = %463.0;
    %468 = %464.0;
    %469 = %465.0;
    (%466, %467, %468, %469)
  };
  %470() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) */
}

def @func_4784(%var_4782: Tensor[(9, 12, 16), float64]) -> Tensor[(9, 12, 16), float64] {
  @func_4781(%var_4782) /* ty=Tensor[(9, 12, 16), float64] */
}

def @func_3469() -> (uint64, Tensor[(1, 7, 10), uint64]) {
  @func_3467() /* ty=(uint64, Tensor[(1, 7, 10), uint64]) */
}

def @func_2544(%var_2542: Tensor[(1, 7, 10), uint64]) -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(?, 7, 10), bool]) {
  @func_2541(%var_2542) /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(?, 7, 10), bool]) */
}

def @func_5008() -> (Tensor[(1, 7, 10), float32],) {
  %472 = fn () -> (Tensor[(1, 7, 10), float32],) {
    %471 = @func_3730() /* ty=Tensor[(1, 7, 10), float32] */;
    (%471,)
  };
  %472() /* ty=(Tensor[(1, 7, 10), float32],) */
}

def @func_6082() -> Tensor[(?, 7, 10), float64] {
  @func_6080() /* ty=Tensor[(?, 7, 10), float64] */
}

def @func_1702(%var_1699: Tensor[(11, 7, 16), float64], %var_1700: uint64, %var_1701: Tensor[(70), uint64]) -> (Tensor[(11, 7, 16), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) {
  %480 = fn (%var_1679: Tensor[(11, 7, 16), float64], %var_1684: uint64, %var_1685: Tensor[(70), uint64]) -> (Tensor[(11, 7, 16), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) {
    %473 = cast(%var_1679, dtype="float64") /* ty=Tensor[(11, 7, 16), float64] */;
    %474 = cast(%var_1684, dtype="uint64") /* ty=uint64 */;
    %475 = cast(%var_1685, dtype="uint64") /* ty=Tensor[(70), uint64] */;
    %476 = reshape(%474, newshape=[]) /* ty=uint64 */;
    %477 = reshape(%475, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
    %478 = sin(%473) /* ty=Tensor[(11, 7, 16), float64] */;
    %479 = @func_612(%476, %477) /* ty=Tensor[(1, 7, 10), uint64] */;
    (%478, %479, %var_1684, %var_1685)
  };
  %480(%var_1699, %var_1700, %var_1701) /* ty=(Tensor[(11, 7, 16), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */
}

def @func_2966() -> (Tensor[(1, 7, 10), uint64],) {
  %482 = fn () -> (Tensor[(1, 7, 10), uint64],) {
    %481 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
    (%481,)
  };
  %482() /* ty=(Tensor[(1, 7, 10), uint64],) */
}

def @func_6550() -> Tensor[(1, 7, 10), uint64] {
  %483 = @func_3680() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), int8]) */;
  %483.0
}

def @func_3992(%var_3989: Tensor[(7, 7, 8), float64], %var_3990: Tensor[(7, 7, 8), float64], %var_3991: uint64) -> (Tensor[(7, 7, 8), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], uint64) {
  @func_3987(%var_3989, %var_3990, %var_3991) /* ty=(Tensor[(7, 7, 8), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], uint64) */
}

def @func_2429() -> (Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) {
  @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */
}

def @func_2824() -> (Tensor[(12, 2, 9), float64],) {
  %484 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %485 = %484.0;
  (%485,)
}

def @func_3419(%var_3418: uint64) -> (Tensor[(15, 15, 14), int8], Tensor[(15, 15, 14), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), float32], Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) {
  %510 = fn (%var_3373: uint64) -> (Tensor[(15, 15, 14), int8], Tensor[(15, 15, 14), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), float32], Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) {
    %486 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
    %487 = %486.0;
    %488 = cast(%487, dtype="float64") /* ty=Tensor[(15, 15, 14), float64] */;
    %489 = reshape(%488, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
    %490 = @func_664(%489) /* ty=(Tensor[(15, 15, 14), float64],) */;
    %491 = cast(%var_3373, dtype="uint64") /* ty=uint64 */;
    %492 = @func_3238() /* ty=Tensor[(1, 7, 10), uint64] */;
    %493 = cast(%492, dtype="uint64") /* ty=Tensor[(1, 7, 10), uint64] */;
    %494 = reshape(%491, newshape=[]) /* ty=uint64 */;
    %495 = reshape(%493, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
    %496 = cast(%492, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
    %497 = @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */;
    %498 = @func_2965() /* ty=(Tensor[(1, 7, 10), uint64],) */;
    %499 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
    %500 = %497.2;
    %501 = cast(%500, dtype="float64") /* ty=Tensor[(15, 15, 14), float64] */;
    %502 = reshape(%501, newshape=[1, 3150]) /* ty=Tensor[(1, 3150), float64] */;
    %503 = @func_3157(%502) /* ty=(Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], Tensor[(1, 3150), float64]) */;
    %504 = %490.0;
    %505 = @func_612(%494, %495) /* ty=Tensor[(1, 7, 10), uint64] */;
    %506 = sqrt(%496) /* ty=Tensor[(1, 7, 10), float32] */;
    %507 = %498.0;
    %508 = %499.0;
    %509 = %503.0;
    (%487, %504, %505, %var_3373, %506, %500, %507, %508, %509)
  };
  %510(%var_3418) /* ty=(Tensor[(15, 15, 14), int8], Tensor[(15, 15, 14), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), float32], Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) */
}

def @func_4913(%var_4911: Tensor[(24), float64], %var_4912: Tensor[(3150), float64]) -> (Tensor[(12, 2, 9), int32], uint64, uint64, Tensor[(1, 7, 10), uint64], uint64, Tensor[(6, 4), float64], Tensor[(24), float64], Tensor[(3150), float64]) {
  %529 = fn (%var_4904: Tensor[(24), float64], %var_4905: Tensor[(3150), float64]) -> (Tensor[(12, 2, 9), int32], uint64, uint64, Tensor[(1, 7, 10), uint64], uint64, Tensor[(6, 4), float64], Tensor[(24), float64], Tensor[(3150), float64]) {
    %511 = @func_2848() /* ty=Tensor[(12, 2, 9), float64] */;
    %512 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 2, 9), float64] */, dtype="int32") /* ty=Tensor[(12, 2, 9), int32] */;
    %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
    %514 = cast(%511, dtype="int32") /* ty=Tensor[(12, 2, 9), int32] */;
    %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %516 = cast(meta[relay.Constant][22] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %517 = reshape(%516, newshape=[]) /* ty=uint64 */;
    %518 = @func_4673(%517) /* ty=(Tensor[(12, 2, 9), float64], Tensor[(15, 15, 14), int8], uint64) */;
    %519 = cast(%var_4904, dtype="float64") /* ty=Tensor[(24), float64] */;
    %520 = cast(%var_4905, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %521 = reshape(%519, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
    %522 = reshape(%520, newshape=[1575, 2]) /* ty=Tensor[(1575, 2), float64] */;
    %523 = @func_2931(%521, %522) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], Tensor[(6, 4), float64], Tensor[(1575, 2), float64], Tensor[(12, 2, 9), float64]) */;
    %524 = bitwise_xor(%514, %515) /* ty=Tensor[(12, 2, 9), int32] */;
    %525 = %518.2;
    %526 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
    %527 = @func_4522() /* ty=uint64 */;
    %528 = %523.2;
    (%524, %525, meta[relay.Constant][22] /* ty=uint64 */, %526, %527, %528, %var_4904, %var_4905)
  };
  %529(%var_4911, %var_4912) /* ty=(Tensor[(12, 2, 9), int32], uint64, uint64, Tensor[(1, 7, 10), uint64], uint64, Tensor[(6, 4), float64], Tensor[(24), float64], Tensor[(3150), float64]) */
}

def @func_3946() -> (Tensor[(70), uint64], Tensor[(90), float32], Tensor[(1, 7, 10), uint64], Tensor[(35, 4), uint64], Tensor[(9, 2, 5), float64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(12, 2, 9), float64]) {
  %553 = fn () -> (Tensor[(70), uint64], Tensor[(90), float32], Tensor[(1, 7, 10), uint64], Tensor[(35, 4), uint64], Tensor[(9, 2, 5), float64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(12, 2, 9), float64]) {
    %530 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
    %531 = cast(meta[relay.Constant][24] /* ty=Tensor[(35, 4), uint64] */, dtype="uint64") /* ty=Tensor[(35, 4), uint64] */;
    %532 = reshape(%531, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint64] */;
    %533 = @func_3822(%532) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(70), uint64], uint64, Tensor[(2, 7, 10), bool]) */;
    %534 = cast(meta[relay.Constant][23] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
    %535 = reshape(%534, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), float32] */;
    %536 = @func_1385(%535) /* ty=(Tensor[(9, 2, 5), float32],) */;
    %537 = %536.0;
    %538 = cast(%537, dtype="float64") /* ty=Tensor[(9, 2, 5), float64] */;
    %539 = cast(meta[relay.Constant][25] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %540 = reshape(%539, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
    %541 = @func_664(%540) /* ty=(Tensor[(15, 15, 14), float64],) */;
    %542 = cast(meta[relay.Constant][26] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
    %543 = cast(meta[relay.Constant][26] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
    %544 = reshape(%542, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int16] */;
    %545 = reshape(%543, newshape=[4, 7, 9]) /* ty=Tensor[(4, 7, 9), int16] */;
    %546 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
    %547 = %530.3;
    %548 = %533.0;
    %549 = exp(%538) /* ty=Tensor[(9, 2, 5), float64] */;
    %550 = %541.0;
    %551 = @func_807(%544, %545) /* ty=Tensor[(4, 7, 9), int16] */;
    %552 = %546.0;
    (%547, meta[relay.Constant][23] /* ty=Tensor[(90), float32] */, %548, meta[relay.Constant][24] /* ty=Tensor[(35, 4), uint64] */, %549, %550, meta[relay.Constant][25] /* ty=Tensor[(3150), float64] */, %551, meta[relay.Constant][26] /* ty=Tensor[(252), int16] */, %552)
  };
  %553() /* ty=(Tensor[(70), uint64], Tensor[(90), float32], Tensor[(1, 7, 10), uint64], Tensor[(35, 4), uint64], Tensor[(9, 2, 5), float64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(12, 2, 9), float64]) */
}

def @func_3987(%var_3949: Tensor[(7, 7, 8), float64], %var_3950: Tensor[(7, 7, 8), float64], %var_3985: uint64) -> (Tensor[(7, 7, 8), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], uint64) {
  %554 = cast(%var_3950, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %555 = shape_of(%var_3949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_3949, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %558 = @func_3311() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %559 = cast(%var_3985, dtype="uint64") /* ty=uint64 */;
  %560 = reshape(%559, newshape=[]) /* ty=uint64 */;
  %561 = @func_3417(%560) /* ty=(Tensor[(15, 15, 14), int8], Tensor[(15, 15, 14), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), float32], Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) */;
  %562 = floor_mod(%556, %557) /* ty=Tensor[(7, 7, 8), float64] */;
  %563 = %558.0;
  %564 = %561.1;
  (%562, %563, %564, %var_3985)
}

def @func_3160(%var_3158: Tensor[(1, 3150), float64]) -> (Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], Tensor[(1, 3150), float64]) {
  @func_3157(%var_3158) /* ty=(Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], Tensor[(1, 3150), float64]) */
}

def @func_2934(%var_2932: Tensor[(6, 4), float64], %var_2933: Tensor[(1575, 2), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], Tensor[(6, 4), float64], Tensor[(1575, 2), float64], Tensor[(12, 2, 9), float64]) {
  %576 = fn (%var_2920: Tensor[(6, 4), float64], %var_2921: Tensor[(1575, 2), float64]) -> (Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], Tensor[(6, 4), float64], Tensor[(1575, 2), float64], Tensor[(12, 2, 9), float64]) {
    %565 = cast(%var_2920, dtype="float64") /* ty=Tensor[(6, 4), float64] */;
    %566 = cast(%var_2921, dtype="float64") /* ty=Tensor[(1575, 2), float64] */;
    %567 = cast(%var_2921, dtype="float64") /* ty=Tensor[(1575, 2), float64] */;
    %568 = reshape(%565, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %569 = reshape(%566, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
    %570 = reshape(%567, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
    %571 = @func_2668(%568, %569, %570) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), bool]) */;
    %572 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
    %573 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
    %574 = %571.0;
    %575 = %572.0;
    (%573, %574, %var_2920, %var_2921, %575)
  };
  %576(%var_2932, %var_2933) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], Tensor[(6, 4), float64], Tensor[(1575, 2), float64], Tensor[(12, 2, 9), float64]) */
}

def @func_5583() -> (Tensor[(9, 2, 5), float64],) {
  @func_5581() /* ty=(Tensor[(9, 2, 5), float64],) */
}

def @func_6552() -> Tensor[(1, 7, 10), uint64] {
  @func_6550() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_2165() -> (Tensor[(12, 2, 9), float64],) {
  @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */
}

def @func_7255(%var_7237: float64, %var_7238: Tensor[(1, 10, 3), float64]) -> (Tensor[(1, 10, 3), float64],) {
  %577 = cast(%var_7237, dtype="bool") /* ty=bool */;
  %578 = cast(%var_7238, dtype="bool") /* ty=Tensor[(1, 10, 3), bool] */;
  %579 = equal(%577, %578) /* ty=Tensor[(1, 10, 3), bool] */;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(1, 10, 3), float64] */;
  %581 = cast(%var_7237, dtype="float64") /* ty=float64 */;
  %582 = divide(%580, %581) /* ty=Tensor[(1, 10, 3), float64] */;
  (%582,)
}

def @func_5200(%var_5198: Tensor[(6, 7, 10), float32], %var_5199: Tensor[(350), uint64]) -> (Tensor[(6, 7, 10), int16], Tensor[(1, 7, 10), uint64], Tensor[(350), uint64]) {
  %591 = fn (%var_5167: Tensor[(6, 7, 10), float32], %var_5181: Tensor[(350), uint64]) -> (Tensor[(6, 7, 10), int16], Tensor[(1, 7, 10), uint64], Tensor[(350), uint64]) {
    %583 = @func_3730() /* ty=Tensor[(1, 7, 10), float32] */;
    %584 = cast(%583, dtype="int16") /* ty=Tensor[(1, 7, 10), int16] */;
    %585 = cast(%var_5167, dtype="int16") /* ty=Tensor[(6, 7, 10), int16] */;
    %586 = cast(%var_5181, dtype="uint64") /* ty=Tensor[(350), uint64] */;
    %587 = reshape(%586, newshape=[5, 7, 10]) /* ty=Tensor[(5, 7, 10), uint64] */;
    %588 = @func_4068(%587) /* ty=(Tensor[(5, 7, 10), int8], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64]) */;
    %589 = bitwise_and(%584, %585) /* ty=Tensor[(6, 7, 10), int16] */;
    %590 = %588.4;
    (%589, %590, %var_5181)
  };
  %591(%var_5198, %var_5199) /* ty=(Tensor[(6, 7, 10), int16], Tensor[(1, 7, 10), uint64], Tensor[(350), uint64]) */
}

def @func_2826() -> (Tensor[(12, 2, 9), float64],) {
  @func_2824() /* ty=(Tensor[(12, 2, 9), float64],) */
}

def @func_4625() -> (Tensor[(12, 2, 9), int32],) {
  %592 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
  %593 = %592.0;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %595 = cosh(%594) /* ty=Tensor[(12, 2, 9), float64] */;
  %596 = cast(%595, dtype="int32") /* ty=Tensor[(12, 2, 9), int32] */;
  %597 = shape_of(%593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%593, dtype="int32") /* ty=Tensor[(12, 2, 9), int32] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %600 = minimum(%598, %599) /* ty=Tensor[(12, 2, 9), int32] */;
  (%600,)
}

def @func_6800(%var_6799: Tensor[(858), int16]) -> (Tensor[(1, 7, 10), uint64], Tensor[(4, 3, 11), float32], Tensor[(132), float32], Tensor[(2160), float64], Tensor[(360), float32], Tensor[(12, 2), float64], Tensor[(858), int16]) {
  %617 = fn (%var_6790: Tensor[(858), int16]) -> (Tensor[(1, 7, 10), uint64], Tensor[(4, 3, 11), float32], Tensor[(132), float32], Tensor[(2160), float64], Tensor[(360), float32], Tensor[(12, 2), float64], Tensor[(858), int16]) {
    %601 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
    %602 = cast(meta[relay.Constant][27] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
    %603 = cast(meta[relay.Constant][27] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
    %604 = cast(meta[relay.Constant][28] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %605 = cast(meta[relay.Constant][29] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %606 = reshape(%602, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), float32] */;
    %607 = reshape(%603, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), float32] */;
    %608 = reshape(%604, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
    %609 = reshape(%605, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %610 = @func_6279(%606, %607, %608, %609) /* ty=(Tensor[(4, 3, 11), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(3, 10, 12), uint64], Tensor[(360), float32], Tensor[(4, 3, 11), int64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) */;
    %611 = cast(%var_6790, dtype="int16") /* ty=Tensor[(858), int16] */;
    %612 = reshape(%611, newshape=[13, 6, 11]) /* ty=Tensor[(13, 6, 11), int16] */;
    %613 = @func_6573(%612) /* ty=(Tensor[(13, 6, 11), bool], Tensor[(1, 7, 10), uint64], Tensor[(12, 2), float64], Tensor[(45, 70), float64]) */;
    %614 = %601.1;
    %615 = %610.0;
    %616 = %613.2;
    (%614, %615, meta[relay.Constant][27] /* ty=Tensor[(132), float32] */, meta[relay.Constant][28] /* ty=Tensor[(2160), float64] */, meta[relay.Constant][29] /* ty=Tensor[(360), float32] */, %616, %var_6790)
  };
  %617(%var_6799) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(4, 3, 11), float32], Tensor[(132), float32], Tensor[(2160), float64], Tensor[(360), float32], Tensor[(12, 2), float64], Tensor[(858), int16]) */
}

def @func_785(%var_783: Tensor[(2, 3, 4), float64], %var_784: Tensor[(3150), float64]) -> (Tensor[(2, 3, 4), bool], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) {
  %629 = fn (%var_737: Tensor[(2, 3, 4), float64], %var_779: Tensor[(3150), float64]) -> (Tensor[(2, 3, 4), bool], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) {
    %618 = cast(%var_737, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
    %619 = sinh(%618) /* ty=Tensor[(2, 3, 4), float64] */;
    %620 = cast(%var_737, dtype="bool") /* ty=Tensor[(2, 3, 4), bool] */;
    %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %622 = cast(%619, dtype="bool") /* ty=Tensor[(2, 3, 4), bool] */;
    %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %624 = cast(%var_779, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %625 = reshape(%624, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
    %626 = @func_664(%625) /* ty=(Tensor[(15, 15, 14), float64],) */;
    %627 = greater_equal(%622, %623) /* ty=Tensor[(2, 3, 4), bool] */;
    %628 = %626.0;
    (%627, %628, %var_779)
  };
  %629(%var_783, %var_784) /* ty=(Tensor[(2, 3, 4), bool], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) */
}

def @func_3682() -> (Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), int8]) {
  @func_3680() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), int8]) */
}

def @func_3157(%var_3140: Tensor[(1, 3150), float64]) -> (Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), float64], Tensor[(1, 3150), float64]) {
  %630 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %633 = log10(%632) /* ty=Tensor[(12, 2, 9), float64] */;
  %634 = cast(%633, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %635 = cast(%631, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %636 = @func_2965() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %637 = cast(%var_3140, dtype="float64") /* ty=Tensor[(1, 3150), float64] */;
  %638 = reshape(%637, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), float64] */;
  %639 = @func_664(%638) /* ty=(Tensor[(15, 15, 14), float64],) */;
  %640 = log(%634) /* ty=Tensor[(12, 2, 9), float64] */;
  %641 = sqrt(%635) /* ty=Tensor[(12, 2, 9), float64] */;
  %642 = %636.0;
  %643 = %639.0;
  (%640, %641, %642, %643, %var_3140)
}

def @func_6094(%var_6093: Tensor[(1, 3, 3), float64]) -> (Tensor[(1, 3, 3), float64],) {
  %646 = fn (%var_6088: Tensor[(1, 3, 3), float64]) -> (Tensor[(1, 3, 3), float64],) {
    %644 = cast(%var_6088, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
    %645 = acosh(%644) /* ty=Tensor[(1, 3, 3), float64] */;
    (%645,)
  };
  %646(%var_6093) /* ty=(Tensor[(1, 3, 3), float64],) */
}

def @func_4487(%var_4486: Tensor[(3, 10, 12), float32]) -> (Tensor[(1, 7, 10), uint64], Tensor[(3, 10, 12), uint64]) {
  %661 = fn (%var_4413: Tensor[(3, 10, 12), float32]) -> (Tensor[(1, 7, 10), uint64], Tensor[(3, 10, 12), uint64]) {
    %647 = @func_2965() /* ty=(Tensor[(1, 7, 10), uint64],) */;
    %648 = cast(%var_4413, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
    %649 = cos(%648) /* ty=Tensor[(3, 10, 12), float32] */;
    %650 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 10, 12), float32] */, dtype="bool") /* ty=Tensor[(3, 10, 12), bool] */;
    %651 = shape_of(%var_4413, dtype="int32") /* ty=Tensor[(3), int32] */;
    %652 = cast(%var_4413, dtype="bool") /* ty=Tensor[(3, 10, 12), bool] */;
    %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %654 = not_equal(%652, %653) /* ty=Tensor[(3, 10, 12), bool] */;
    %655 = cast(%654, dtype="uint64") /* ty=Tensor[(3, 10, 12), uint64] */;
    %656 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
    %657 = cast(%649, dtype="uint64") /* ty=Tensor[(3, 10, 12), uint64] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %659 = %647.0;
    %660 = logical_xor(%657, %658) /* ty=Tensor[(3, 10, 12), uint64] */;
    (%659, %660)
  };
  %661(%var_4486) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(3, 10, 12), uint64]) */
}

def @func_4734(%var_4733: Tensor[(16, 9, 15), float64]) -> (Tensor[(16, 9, 15), float64],) {
  %664 = fn (%var_4718: Tensor[(16, 9, 15), float64]) -> (Tensor[(16, 9, 15), float64],) {
    %662 = cast(%var_4718, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
    %663 = tan(%662) /* ty=Tensor[(16, 9, 15), float64] */;
    (%663,)
  };
  %664(%var_4733) /* ty=(Tensor[(16, 9, 15), float64],) */
}

def @func_4303() -> (Tensor[(9, 2, 5), float64],) {
  %665 = @func_3945() /* ty=(Tensor[(70), uint64], Tensor[(90), float32], Tensor[(1, 7, 10), uint64], Tensor[(35, 4), uint64], Tensor[(9, 2, 5), float64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(12, 2, 9), float64]) */;
  %666 = %665.4;
  (%666,)
}

def @func_7494(%var_7487: bool) -> Tensor[(5, 13, 1), bool] {
  %667 = cast(%var_7487, dtype="bool") /* ty=bool */;
  %668 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 13, 1), bool] */, dtype="bool") /* ty=Tensor[(5, 13, 1), bool] */;
  logical_and(%667, %668) /* ty=Tensor[(5, 13, 1), bool] */
}

def @func_4092() -> (Tensor[(12, 2, 9), float64],) {
  @func_4090() /* ty=(Tensor[(12, 2, 9), float64],) */
}

def @func_5142() -> (Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) {
  %673 = fn () -> (Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) {
    %669 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
    %670 = @func_4535() /* ty=(Tensor[(1, 7, 10), uint64],) */;
    %671 = %669.1;
    %672 = %670.0;
    (%671, %672)
  };
  %673() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) */
}

def @func_5631() -> (Tensor[(1, 7, 10), uint64],) {
  %676 = fn () -> (Tensor[(1, 7, 10), uint64],) {
    %674 = @func_5141() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) */;
    %675 = %674.1;
    (%675,)
  };
  %676() /* ty=(Tensor[(1, 7, 10), uint64],) */
}

def @func_6677() -> Tensor[(1, 7, 10), uint64] {
  %677 = @func_3467() /* ty=(uint64, Tensor[(1, 7, 10), uint64]) */;
  %677.1
}

def @func_3680() -> (Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), int8]) {
  %678 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %679 = @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */;
  %680 = %678.1;
  %681 = %679.2;
  (%680, %681)
}

def @func_5695() -> (Tensor[(9, 7, 10), bool], Tensor[(9, 7, 10), float32]) {
  @func_5693() /* ty=(Tensor[(9, 7, 10), bool], Tensor[(9, 7, 10), float32]) */
}

def @func_3730() -> Tensor[(1, 7, 10), float32] {
  %682 = @func_3311() /* ty=(Tensor[(1, 7, 10), uint64],) */;
  %683 = %682.0;
  %684 = cast(%683, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  %685 = cosh(%684) /* ty=Tensor[(1, 7, 10), float32] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(1, 7, 10), float32] */;
  log10(%686) /* ty=Tensor[(1, 7, 10), float32] */
}

def @func_2850() -> Tensor[(12, 2, 9), float64] {
  @func_2848() /* ty=Tensor[(12, 2, 9), float64] */
}

def @func_6921(%var_6920: Tensor[(360), float32]) -> (Tensor[(6, 7, 10), bool], Tensor[(1, 7, 10), float64], Tensor[(15, 15, 14), float64], uint64, Tensor[(3, 10, 12), uint64], Tensor[(360), float32], Tensor[(12, 2, 9), float64]) {
  %703 = fn (%var_6898: Tensor[(360), float32]) -> (Tensor[(6, 7, 10), bool], Tensor[(1, 7, 10), float64], Tensor[(15, 15, 14), float64], uint64, Tensor[(3, 10, 12), uint64], Tensor[(360), float32], Tensor[(12, 2, 9), float64]) {
    %687 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
    %688 = cast(%687, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
    %689 = acos(%688) /* ty=Tensor[(1, 7, 10), float64] */;
    %690 = cast(%689, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
    %691 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 7, 10), float64] */, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
    %692 = cast(%689, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
    %693 = @func_3945() /* ty=(Tensor[(70), uint64], Tensor[(90), float32], Tensor[(1, 7, 10), uint64], Tensor[(35, 4), uint64], Tensor[(9, 2, 5), float64], Tensor[(15, 15, 14), float64], Tensor[(3150), float64], Tensor[(4, 7, 9), int16], Tensor[(252), int16], Tensor[(12, 2, 9), float64]) */;
    %694 = cast(%var_6898, dtype="float32") /* ty=Tensor[(360), float32] */;
    %695 = reshape(%694, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
    %696 = @func_4485(%695) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(3, 10, 12), uint64]) */;
    %697 = equal(%690, %691) /* ty=Tensor[(6, 7, 10), bool] */;
    %698 = log2(%692) /* ty=Tensor[(1, 7, 10), float64] */;
    %699 = %693.5;
    %700 = @func_5763() /* ty=uint64 */;
    %701 = %696.1;
    %702 = @func_2848() /* ty=Tensor[(12, 2, 9), float64] */;
    (%697, %698, %699, %700, %701, %var_6898, %702)
  };
  %703(%var_6920) /* ty=(Tensor[(6, 7, 10), bool], Tensor[(1, 7, 10), float64], Tensor[(15, 15, 14), float64], uint64, Tensor[(3, 10, 12), uint64], Tensor[(360), float32], Tensor[(12, 2, 9), float64]) */
}

def @func_5711() -> uint64 {
  %704 = @func_3706() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64], uint64) */;
  %704.2
}

def @func_2541(%var_2534: Tensor[(1, 7, 10), uint64]) -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], Tensor[(?, 7, 10), bool]) {
  %705 = @func_2226() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) */;
  %706 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
  %707 = cast(%var_2534, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%706, dtype="bool") /* ty=Tensor[(1, 7, 10), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %711 = %705.0;
  %712 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
  %713 = less_equal(%709, %710) /* ty=Tensor[(?, 7, 10), bool] */;
  (%711, %712, %713)
}

def @func_5763() -> uint64 {
  @func_4522() /* ty=uint64 */
}

def @func_6450() -> Tensor[(1, 7, 10), float32] {
  @func_6448() /* ty=Tensor[(1, 7, 10), float32] */
}

def @func_2317() -> Tensor[(1, 7, 10), uint64] {
  %714 = fn () -> Tensor[(1, 7, 10), uint64] {
    @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */
  };
  %714() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_7497(%var_7495: bool) -> Tensor[(5, 13, 1), bool] {
  @func_7494(%var_7495) /* ty=Tensor[(5, 13, 1), bool] */
}

def @func_2163() -> (Tensor[(12, 2, 9), float64],) {
  %715 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 9), float32] */;
  %716 = acosh(%715) /* ty=Tensor[(12, 2, 9), float32] */;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
  %718 = asinh(%717) /* ty=Tensor[(12, 2, 9), float64] */;
  (%718,)
}

def @func_3166() -> Tensor[(1, 7, 10), uint64] {
  @func_3164() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_4675(%var_4674: uint64) -> (Tensor[(12, 2, 9), float64], Tensor[(15, 15, 14), int8], uint64) {
  %729 = fn (%var_4666: uint64) -> (Tensor[(12, 2, 9), float64], Tensor[(15, 15, 14), int8], uint64) {
    %719 = @func_4625() /* ty=(Tensor[(12, 2, 9), int32],) */;
    %720 = %719.0;
    %721 = cast(%720, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
    %722 = asin(%721) /* ty=Tensor[(12, 2, 9), float64] */;
    %723 = cast(%722, dtype="float64") /* ty=Tensor[(12, 2, 9), float64] */;
    %724 = cast(%var_4666, dtype="uint64") /* ty=uint64 */;
    %725 = reshape(%724, newshape=[]) /* ty=uint64 */;
    %726 = @func_3417(%725) /* ty=(Tensor[(15, 15, 14), int8], Tensor[(15, 15, 14), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(1, 7, 10), float32], Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64], Tensor[(12, 2, 9), float64], Tensor[(12, 2, 9), float64]) */;
    %727 = exp(%723) /* ty=Tensor[(12, 2, 9), float64] */;
    %728 = %726.0;
    (%727, %728, %var_4666)
  };
  %729(%var_4674) /* ty=(Tensor[(12, 2, 9), float64], Tensor[(15, 15, 14), int8], uint64) */
}

def @func_2518() -> (Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) {
  %730 = @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */;
  %731 = %730.2;
  %732 = @func_2243() /* ty=Tensor[(1, 7, 10), uint64] */;
  (%731, %732)
}

def @func_2226() -> (Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), uint64], uint64, Tensor[(70), uint64]) {
  %733 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %734 = cast(meta[relay.Constant][34] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %735 = cast(meta[relay.Constant][35] /* ty=Tensor[(70), uint64] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %736 = reshape(%734, newshape=[]) /* ty=uint64 */;
  %737 = reshape(%735, newshape=[1, 7, 10]) /* ty=Tensor[(1, 7, 10), uint64] */;
  %738 = %733.0;
  %739 = @func_612(%736, %737) /* ty=Tensor[(1, 7, 10), uint64] */;
  (%738, %739, meta[relay.Constant][34] /* ty=uint64 */, meta[relay.Constant][35] /* ty=Tensor[(70), uint64] */)
}

def @func_4070(%var_4069: Tensor[(5, 7, 10), uint64]) -> (Tensor[(5, 7, 10), int8], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64]) {
  %752 = fn (%var_4026: Tensor[(5, 7, 10), uint64]) -> (Tensor[(5, 7, 10), int8], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64]) {
    %740 = @func_2518() /* ty=(Tensor[(15, 15, 14), int8], Tensor[(1, 7, 10), uint64]) */;
    %741 = %740.1;
    %742 = cast(%741, dtype="int8") /* ty=Tensor[(1, 7, 10), int8] */;
    %743 = cast(%var_4026, dtype="int8") /* ty=Tensor[(5, 7, 10), int8] */;
    %744 = cast(%741, dtype="float64") /* ty=Tensor[(1, 7, 10), float64] */;
    %745 = @func_2427() /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(15, 15, 14), uint16], Tensor[(15, 15, 14), int8]) */;
    %746 = @func_2745() /* ty=(Tensor[(12, 2, 9), float64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64]) */;
    %747 = add(%742, %743) /* ty=Tensor[(5, 7, 10), int8] */;
    %748 = erf(%744) /* ty=Tensor[(1, 7, 10), float64] */;
    %749 = %745.0;
    %750 = %746.3;
    %751 = @func_2316() /* ty=Tensor[(1, 7, 10), uint64] */;
    (%747, %748, %749, %750, %751)
  };
  %752(%var_4069) /* ty=(Tensor[(5, 7, 10), int8], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), float64], Tensor[(1, 7, 10), uint64]) */
}

def @func_4523() -> uint64 {
  %754 = fn () -> uint64 {
    %753 = @func_3467() /* ty=(uint64, Tensor[(1, 7, 10), uint64]) */;
    %753.0
  };
  %754() /* ty=uint64 */
}

def @func_3732() -> Tensor[(1, 7, 10), float32] {
  @func_3730() /* ty=Tensor[(1, 7, 10), float32] */
}

def @func_5456(%var_5454: Tensor[(3, 5, 2), uint32], %var_5455: Tensor[(3, 5, 2), uint32]) -> (Tensor[(3, 5, 2), bool], Tensor[(1, 7, 10), uint64], Tensor[(?, 7, 10), float64], Tensor[(3150), float64], Tensor[(24), float64], Tensor[(3150), float64], Tensor[(1, 7, 10), uint64]) {
  %778 = fn (%var_5397: Tensor[(3, 5, 2), uint32], %var_5398: Tensor[(3, 5, 2), uint32]) -> (Tensor[(3, 5, 2), bool], Tensor[(1, 7, 10), uint64], Tensor[(?, 7, 10), float64], Tensor[(3150), float64], Tensor[(24), float64], Tensor[(3150), float64], Tensor[(1, 7, 10), uint64]) {
    %755 = cast(%var_5398, dtype="bool") /* ty=Tensor[(3, 5, 2), bool] */;
    %756 = shape_of(%var_5397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %757 = cast(%var_5397, dtype="bool") /* ty=Tensor[(3, 5, 2), bool] */;
    %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %759 = @func_3311() /* ty=(Tensor[(1, 7, 10), uint64],) */;
    %760 = @func_4716() /* ty=(Tensor[(?, 7, 10), float64], uint64) */;
    %761 = cast(meta[relay.Constant][36] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %762 = cast(meta[relay.Constant][37] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %763 = reshape(%761, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
    %764 = reshape(%762, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
    %765 = @func_782(%763, %764) /* ty=(Tensor[(2, 3, 4), bool], Tensor[(15, 15, 14), float64], Tensor[(3150), float64]) */;
    %766 = cast(meta[relay.Constant][36] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %767 = %765.2;
    %768 = cast(%767, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %769 = cast(meta[relay.Constant][37] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %770 = reshape(%766, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %771 = reshape(%768, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
    %772 = reshape(%769, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
    %773 = @func_2668(%770, %771, %772) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), bool]) */;
    %774 = not_equal(%757, %758) /* ty=Tensor[(3, 5, 2), bool] */;
    %775 = %759.0;
    %776 = %760.0;
    %777 = %773.0;
    (%774, %775, %776, %767, meta[relay.Constant][36] /* ty=Tensor[(24), float64] */, meta[relay.Constant][37] /* ty=Tensor[(3150), float64] */, %777)
  };
  %778(%var_5454, %var_5455) /* ty=(Tensor[(3, 5, 2), bool], Tensor[(1, 7, 10), uint64], Tensor[(?, 7, 10), float64], Tensor[(3150), float64], Tensor[(24), float64], Tensor[(3150), float64], Tensor[(1, 7, 10), uint64]) */
}

def @func_6964() -> Tensor[(1, 7, 10), uint64] {
  %779 = fn () -> Tensor[(1, 7, 10), uint64] {
    @func_5586() /* ty=Tensor[(1, 7, 10), uint64] */
  };
  %779() /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_612(%var_592: uint64, %var_593: Tensor[(1, 7, 10), uint64]) -> Tensor[(1, 7, 10), uint64] {
  %780 = cast(%var_592, dtype="uint64") /* ty=uint64 */;
  %781 = cast(%var_593, dtype="uint64") /* ty=Tensor[(1, 7, 10), uint64] */;
  logical_xor(%780, %781) /* ty=Tensor[(1, 7, 10), uint64] */
}

def @func_6626() -> (uint64,) {
  @func_6624() /* ty=(uint64,) */
}

def @func_6080() -> Tensor[(?, 7, 10), float64] {
  %782 = @func_4716() /* ty=(Tensor[(?, 7, 10), float64], uint64) */;
  %782.0
}

def @func_6760() -> Tensor[(15, 13, 15), float64] {
  @func_6758() /* ty=Tensor[(15, 13, 15), float64] */
}

def @func_5933(%var_5930: Tensor[(5, 7, 10), uint8], %var_5931: Tensor[(14, 28), float64], %var_5932: uint64) -> (Tensor[(?, 7, 10), int64], Tensor[(5, 7, 10), float64], Tensor[(15, 15, 14), float64], Tensor[(14, 28), float64], uint64, Tensor[(5, 7, 10), int8]) {
  @func_5928(%var_5930, %var_5931, %var_5932) /* ty=(Tensor[(?, 7, 10), int64], Tensor[(5, 7, 10), float64], Tensor[(15, 15, 14), float64], Tensor[(14, 28), float64], uint64, Tensor[(5, 7, 10), int8]) */
}

def @func_4627() -> (Tensor[(12, 2, 9), int32],) {
  @func_4625() /* ty=(Tensor[(12, 2, 9), int32],) */
}

def @func_3651(%var_3649: Tensor[(4, 7, 10), uint64]) -> (Tensor[(4, 7, 10), float32], Tensor[(12, 2, 9), float64], Tensor[(4, 7, 10), uint8], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) {
  @func_3648(%var_3649) /* ty=(Tensor[(4, 7, 10), float32], Tensor[(12, 2, 9), float64], Tensor[(4, 7, 10), uint8], Tensor[(1, 7, 10), uint64], Tensor[(1, 7, 10), uint64]) */
}

def @func_2810(%var_2795: Tensor[(1, 24), float64]) -> (Tensor[(12, 2, 9), uint16], Tensor[(2, 3, 4), bool], Tensor[(1, 24), float64], Tensor[(3150), float64]) {
  %783 = @func_2163() /* ty=(Tensor[(12, 2, 9), float64],) */;
  %784 = %783.0;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(12, 2, 9), float32] */;
  %786 = cos(%785) /* ty=Tensor[(12, 2, 9), float32] */;
  %787 = cast(%786, dtype="uint16") /* ty=Tensor[(12, 2, 9), uint16] */;
  %788 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%784, dtype="uint16") /* ty=Tensor[(12, 2, 9), uint16] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %791 = cast(%var_2795, dtype="float64") /* ty=Tensor[(1, 24), float64] */;
  %792 = cast(meta[relay.Constant][38] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %793 = reshape(%791, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %794 = reshape(%792, newshape=[3150]) /* ty=Tensor[(3150), float64] */;
  %795 = @func_2385(%793, %794) /* ty=(Tensor[(1, 7, 10), uint64], Tensor[(2, 3, 4), bool], Tensor[(24), float64], Tensor[(3150), float64]) */;
  %796 = logical_xor(%789, %790) /* ty=Tensor[(12, 2, 9), uint16] */;
  %797 = %795.1;
  (%796, %797, %var_2795, meta[relay.Constant][38] /* ty=Tensor[(3150), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen407/build/output.py", line 2098, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:14:44] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

