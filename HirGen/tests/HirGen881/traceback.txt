==========mod==========
#[version = "0.0.5"]
def @func_10278() -> Tensor[(378), float32] {
  %0 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %0.0
}

def @func_14494() -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(128), int64]) {
  %1 = @func_12242() /* ty=(Tensor[(378), float32],) */;
  %2 = @func_11146() /* ty=(Tensor[(378), float32],) */;
  %3 = @func_13236() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) */;
  %4 = %1.0;
  %5 = %2.0;
  %6 = %3.2;
  (%4, %5, %6)
}

def @func_17757() -> (Tensor[(378), float64], Tensor[(378), float32]) {
  %7 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %8 = @func_16403() /* ty=Tensor[(378), float64] */;
  %9 = %7.1;
  (%8, %9)
}

def @func_15202() -> (Tensor[(378), float32],) {
  %10 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %11 = %10.0;
  (%11,)
}

def @func_14238() -> Tensor[(378), float32] {
  %12 = @func_12242() /* ty=(Tensor[(378), float32],) */;
  %12.0
}

def @func_10998() -> Tensor[(378), float32] {
  @func_10211() /* ty=Tensor[(378), float32] */
}

def @func_9776() -> (Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) {
  %13 = @func_9546() /* ty=(Tensor[(378), float32],) */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %15 = reshape(%14, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %16 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %17 = %13.0;
  %18 = @func_6118(%15) /* ty=Tensor[(4, 8, 15), float32] */;
  %19 = %16.2;
  (%17, %18, meta[relay.Constant][0] /* ty=Tensor[(480), float32] */, %19)
}

def @func_16763() -> Tensor[(378), float32] {
  @func_13609() /* ty=Tensor[(378), float32] */
}

def @func_9658(%var_9652: Tensor[(2, 160), bool]) -> (Tensor[(378), float32], Tensor[(16, 5, 4), bool], Tensor[(2, 160), bool], Tensor[(5, 8, 7), int16]) {
  %20 = @func_9546() /* ty=(Tensor[(378), float32],) */;
  %21 = cast(%var_9652, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
  %22 = reshape(%21, newshape=[16, 5, 4]) /* ty=Tensor[(16, 5, 4), bool] */;
  %23 = @func_6762(%22) /* ty=(Tensor[(16, 5, 4), bool],) */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 28), int32] */, dtype="int32") /* ty=Tensor[(10, 28), int32] */;
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 28), int32] */, dtype="int32") /* ty=Tensor[(10, 28), int32] */;
  %26 = reshape(%24, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %27 = reshape(%25, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %28 = @func_7409(%26, %27) /* ty=(Tensor[(5, 8, 7), int32],) */;
  %29 = %28.0;
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 28), int32] */, dtype="int16") /* ty=Tensor[(10, 28), int16] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="int16") /* ty=Tensor[(5, 8, 7), int16] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %34 = %20.0;
  %35 = %23.0;
  %36 = logical_xor(%32, %33) /* ty=Tensor[(5, 8, 7), int16] */;
  (%34, %35, %var_9652, %36)
}

def @func_9981() -> Tensor[(378), float32] {
  %37 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %37.1
}

def @func_1041(%var_1027: Tensor[(3, 13, 16), float64], %var_1031: Tensor[(128), int64]) -> (Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) {
  %38 = cast(%var_1027, dtype="float64") /* ty=Tensor[(3, 13, 16), float64] */;
  %39 = cast(%var_1031, dtype="int64") /* ty=Tensor[(128), int64] */;
  %40 = cast(%var_1031, dtype="int64") /* ty=Tensor[(128), int64] */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %42 = reshape(%39, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %43 = reshape(%40, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %44 = reshape(%41, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %45 = @func_679(%42, %43, %44) /* ty=(Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) */;
  %46 = atanh(%38) /* ty=Tensor[(3, 13, 16), float64] */;
  %47 = %45.6;
  (%46, %47, %var_1031, meta[relay.Constant][2] /* ty=Tensor[(14), float32] */)
}

def @func_9349() -> (Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) {
  %48 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %50 = reshape(%49, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
  %51 = @func_540(%50) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
  %52 = %48.1;
  %53 = %51.4;
  (%52, %53, meta[relay.Constant][3] /* ty=Tensor[(14), float32] */)
}

def @func_17703() -> (Tensor[(378), float32],) {
  %54 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %55 = %54.1;
  (%55,)
}

def @func_8260(%var_8257: Tensor[(9, 7, 6), float32]) -> (Tensor[(9, 7, 6), float32],) {
  %56 = cast(%var_8257, dtype="float32") /* ty=Tensor[(9, 7, 6), float32] */;
  %57 = exp(%56) /* ty=Tensor[(9, 7, 6), float32] */;
  (%57,)
}

def @func_10443() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  %58 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %59 = %58.0;
  %60 = @func_10211() /* ty=Tensor[(378), float32] */;
  (%59, %60)
}

def @func_12635(%var_12632: Tensor[(1800), int32], %var_12633: uint16) -> (Tensor[(378), float32], Tensor[(280), int32], Tensor[(280), int32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) {
  %61 = cast(meta[relay.Constant][4] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
  %62 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 385), int64] */, dtype="int64") /* ty=Tensor[(1, 385), int64] */;
  %63 = cast(%var_12632, dtype="int32") /* ty=Tensor[(1800), int32] */;
  %64 = cast(%var_12633, dtype="uint16") /* ty=uint16 */;
  %65 = reshape(%61, newshape=[280]) /* ty=Tensor[(280), int32] */;
  %66 = reshape(%62, newshape=[385]) /* ty=Tensor[(385), int64] */;
  %67 = reshape(%63, newshape=[1800]) /* ty=Tensor[(1800), int32] */;
  %68 = reshape(%64, newshape=[]) /* ty=uint16 */;
  %69 = @func_9328(%65, %66, %67, %68) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14), float64], Tensor[(1800), int32], Tensor[(5, 12, ?), bool], uint16) */;
  %70 = @func_10211() /* ty=Tensor[(378), float32] */;
  %71 = %69.3;
  (%70, %71, meta[relay.Constant][4] /* ty=Tensor[(280), int32] */, meta[relay.Constant][5] /* ty=Tensor[(1, 385), int64] */, %var_12632, %var_12633)
}

def @func_13678(%var_13649: uint16, %var_13660: Tensor[(14, 8, 78), float32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(5, 12, ?), bool], uint16, Tensor[(128), int64], Tensor[(1584), float64], Tensor[(14, 8, 78), bool]) {
  %72 = @func_11515() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 8, 78), float32]) */;
  %73 = cast(%var_13649, dtype="uint16") /* ty=uint16 */;
  %74 = reshape(%73, newshape=[]) /* ty=uint16 */;
  %75 = @func_4598(%74) /* ty=(Tensor[(5, 12, ?), bool],) */;
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %77 = reshape(%76, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float64] */;
  %78 = @func_2825(%77) /* ty=(Tensor[(16, 11, 9), float64], Tensor[(14), float32], Tensor[(128), int64], Tensor[(14), float32]) */;
  %79 = @func_11515() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 8, 78), float32]) */;
  %80 = %79.2;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(14, 8, 78), float64] */;
  %82 = log(%81) /* ty=Tensor[(14, 8, 78), float64] */;
  %83 = cast(%82, dtype="float32") /* ty=Tensor[(14, 8, 78), float32] */;
  %84 = cosh(%83) /* ty=Tensor[(14, 8, 78), float32] */;
  %85 = cast(%var_13660, dtype="float32") /* ty=Tensor[(14, 8, 78), float32] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="float32") /* ty=Tensor[(14, 8, 78), float32] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %89 = floor_mod(%87, %88) /* ty=Tensor[(14, 8, 78), float32] */;
  %90 = cast(%89, dtype="bool") /* ty=Tensor[(14, 8, 78), bool] */;
  %91 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%84, dtype="bool") /* ty=Tensor[(14, 8, 78), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %94 = @func_10779() /* ty=Tensor[(378), float32] */;
  %95 = %72.1;
  %96 = %75.0;
  %97 = %78.2;
  %98 = logical_or(%92, %93) /* ty=Tensor[(14, 8, 78), bool] */;
  (%94, %95, %96, %var_13649, %97, meta[relay.Constant][6] /* ty=Tensor[(1584), float64] */, %98)
}

def @func_9328(%var_9310: Tensor[(280), int32], %var_9313: Tensor[(385), int64], %var_9316: Tensor[(1800), int32], %var_9322: uint16) -> (Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14), float64], Tensor[(1800), int32], Tensor[(5, 12, ?), bool], uint16) {
  %99 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %100 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %101 = cast(%var_9310, dtype="int32") /* ty=Tensor[(280), int32] */;
  %102 = cast(%var_9310, dtype="int32") /* ty=Tensor[(280), int32] */;
  %103 = reshape(%101, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %104 = reshape(%102, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %105 = @func_7409(%103, %104) /* ty=(Tensor[(5, 8, 7), int32],) */;
  %106 = cast(%var_9313, dtype="int64") /* ty=Tensor[(385), int64] */;
  %107 = cast(%var_9313, dtype="int64") /* ty=Tensor[(385), int64] */;
  %108 = reshape(%106, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %109 = reshape(%107, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %110 = cast(%var_9316, dtype="int32") /* ty=Tensor[(1800), int32] */;
  %111 = reshape(%110, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), int32] */;
  %112 = @func_967(%111) /* ty=(Tensor[(15, 15, 8), int32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %113 = cast(%var_9322, dtype="uint16") /* ty=uint16 */;
  %114 = reshape(%113, newshape=[]) /* ty=uint16 */;
  %115 = @func_4598(%114) /* ty=(Tensor[(5, 12, ?), bool],) */;
  %116 = %99.2;
  %117 = %100.3;
  %118 = %105.0;
  %119 = @func_134(%108, %109) /* ty=Tensor[(11, 5, 7), int64] */;
  %120 = %112.2;
  %121 = %115.0;
  (%116, %117, %118, %var_9310, %119, %var_9313, %120, %var_9316, %121, %var_9322)
}

def @func_15276(%var_15241: Tensor[(14), float32], %var_15270: Tensor[(320), bool]) -> (Tensor[(480), float32], Tensor[(6, 10, 1), bool], bool, Tensor[(14), float32], Tensor[(128), int64], Tensor[(378), float32], Tensor[(2, 160), bool], Tensor[(320), bool]) {
  %122 = @func_12500() /* ty=(Tensor[(128), int64], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */;
  %123 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %124 = cast(%var_15241, dtype="float32") /* ty=Tensor[(14), float32] */;
  %125 = reshape(%123, newshape=[]) /* ty=bool */;
  %126 = reshape(%124, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %127 = @func_12302(%125, %126) /* ty=(Tensor[(320), bool], Tensor[(6, 10, 1), bool], bool, Tensor[(320), bool], Tensor[(14, 1, 1), float32], Tensor[(14), float32]) */;
  %128 = @func_10641() /* ty=(Tensor[(128), int64],) */;
  %129 = cast(%var_15270, dtype="bool") /* ty=Tensor[(320), bool] */;
  %130 = reshape(%129, newshape=[2, 160]) /* ty=Tensor[(2, 160), bool] */;
  %131 = @func_9658(%130) /* ty=(Tensor[(378), float32], Tensor[(16, 5, 4), bool], Tensor[(2, 160), bool], Tensor[(5, 8, 7), int16]) */;
  %132 = %122.2;
  %133 = %127.1;
  %134 = %128.0;
  %135 = @func_10242() /* ty=Tensor[(378), float32] */;
  %136 = %131.2;
  (%132, %133, True /* ty=bool */, %var_15241, %134, %135, %136, %var_15270)
}

def @func_15449() -> (Tensor[(16, 14, 9), uint32], Tensor[(720), float64]) {
  %137 = @func_13236() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) */;
  %138 = @func_10026() /* ty=Tensor[(16, 14, 9), uint32] */;
  %139 = %137.4;
  (%138, %139)
}

def @func_10041() -> Tensor[(720), float64] {
  %140 = @func_9868() /* ty=(Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) */;
  %140.2
}

def @func_12500() -> (Tensor[(128), int64], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) {
  %141 = @func_10641() /* ty=(Tensor[(128), int64],) */;
  %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %143 = reshape(%142, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %144 = %141.0;
  %145 = @func_6118(%143) /* ty=Tensor[(4, 8, 15), float32] */;
  (%144, %145, meta[relay.Constant][7] /* ty=Tensor[(480), float32] */)
}

def @func_17244() -> (Tensor[(720), float64], Tensor[(378), float32], Tensor[(378), float32]) {
  %146 = @func_13810() /* ty=(Tensor[(480), float32], Tensor[(720), float64], Tensor[(9, 7, 6), float32]) */;
  %147 = @func_12840() /* ty=(Tensor[(378), float32],) */;
  %148 = %146.1;
  %149 = @func_10779() /* ty=Tensor[(378), float32] */;
  %150 = %147.0;
  (%148, %149, %150)
}

def @func_9383() -> (Tensor[(378), float32],) {
  %151 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %152 = %151.1;
  (%152,)
}

def @func_9895() -> (Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) {
  %153 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %154 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %155 = reshape(%154, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %156 = %153.2;
  %157 = @func_6118(%155) /* ty=Tensor[(4, 8, 15), float32] */;
  (%156, %157, meta[relay.Constant][8] /* ty=Tensor[(480), float32] */)
}

def @func_11427() -> (Tensor[(4, 8, 15), float32], Tensor[(720), float64], Tensor[(126, 3), float32], Tensor[(64, 2), int64], Tensor[(16, 5, 4), bool], Tensor[(320), bool]) {
  %158 = @func_9776() /* ty=(Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) */;
  %159 = cast(meta[relay.Constant][9] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %160 = reshape(%159, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %161 = @func_8481(%160) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %162 = %161.5;
  %163 = cast(%162, dtype="float32") /* ty=Tensor[(126, 3), float32] */;
  %164 = cast(meta[relay.Constant][9] /* ty=Tensor[(720), float64] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %165 = reshape(%164, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
  %166 = @func_11238(%165) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(9, 7, 6), float32], Tensor[(720, ?), int64], Tensor[(64, 2), int64], Tensor[(720, ?), uint64]) */;
  %167 = cast(meta[relay.Constant][10] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %168 = reshape(%167, newshape=[16, 5, 4]) /* ty=Tensor[(16, 5, 4), bool] */;
  %169 = @func_6762(%168) /* ty=(Tensor[(16, 5, 4), bool],) */;
  %170 = %158.1;
  %171 = sigmoid(%163) /* ty=Tensor[(126, 3), float32] */;
  %172 = %166.3;
  %173 = %169.0;
  (%170, meta[relay.Constant][9] /* ty=Tensor[(720), float64] */, %171, %172, %173, meta[relay.Constant][10] /* ty=Tensor[(320), bool] */)
}

def @func_10942() -> (Tensor[(14), float64],) {
  %174 = @func_10619() /* ty=Tensor[(14), float64] */;
  (%174,)
}

def @func_9567() -> (Tensor[(378), float32],) {
  %175 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %176 = %175.0;
  (%176,)
}

def @func_11319() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  %177 = @func_10662() /* ty=(Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) */;
  %178 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %179 = %177.0;
  %180 = %178.1;
  (%179, %180)
}

def @func_17499(%var_17457: Tensor[(144), uint32], %var_17458: Tensor[(2016, 1), uint32], %var_17485: Tensor[(2016, 1), uint32]) -> (Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016, 378), uint32], Tensor[(2016, 378), uint8], Tensor[(2016, ?), uint64]) {
  %181 = cast(%var_17457, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %182 = cast(%var_17458, dtype="uint32") /* ty=Tensor[(2016, 1), uint32] */;
  %183 = reshape(%181, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint32] */;
  %184 = reshape(%182, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), uint32] */;
  %185 = @func_436(%183, %184) /* ty=(Tensor[(16, 14, 9), uint32],) */;
  %186 = @func_15468() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %187 = %186.1;
  %188 = cast(%187, dtype="uint32") /* ty=Tensor[(378), uint32] */;
  %189 = cast(%var_17458, dtype="uint32") /* ty=Tensor[(2016, 1), uint32] */;
  %190 = cast(%187, dtype="uint8") /* ty=Tensor[(378), uint8] */;
  %191 = cast(%var_17458, dtype="uint8") /* ty=Tensor[(2016, 1), uint8] */;
  %192 = cast(%var_17485, dtype="uint64") /* ty=Tensor[(2016, 1), uint64] */;
  %193 = shape_of(%var_17458, dtype="int32") /* ty=Tensor[(2), int32] */;
  %194 = cast(%var_17458, dtype="uint64") /* ty=Tensor[(2016, 1), uint64] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %196 = %185.0;
  %197 = bitwise_or(%188, %189) /* ty=Tensor[(2016, 378), uint32] */;
  %198 = left_shift(%190, %191) /* ty=Tensor[(2016, 378), uint8] */;
  %199 = bitwise_or(%194, %195) /* ty=Tensor[(2016, ?), uint64] */;
  (%196, %var_17457, %197, %198, %199)
}

def @func_16571(%var_16566: Tensor[(14, 5, 9), float32]) -> Tensor[(14, 5, 9), float32] {
  %200 = cast(%var_16566, dtype="float32") /* ty=Tensor[(14, 5, 9), float32] */;
  tan(%200) /* ty=Tensor[(14, 5, 9), float32] */
}

def @func_6838(%var_6813: Tensor[(8, 5, 3), float64], %var_6827: Tensor[(20, 2), bool]) -> (Tensor[(8, 5, 3), float64], Tensor[(4, 14, 10), bool], Tensor[(20, 2), bool], Tensor[(560), bool]) {
  %201 = cast(%var_6813, dtype="float64") /* ty=Tensor[(8, 5, 3), float64] */;
  %202 = cast(%var_6827, dtype="bool") /* ty=Tensor[(20, 2), bool] */;
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %204 = reshape(%202, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), bool] */;
  %205 = reshape(%203, newshape=[4, 14, 10]) /* ty=Tensor[(4, 14, 10), bool] */;
  %206 = asin(%201) /* ty=Tensor[(8, 5, 3), float64] */;
  %207 = @func_3525(%204, %205) /* ty=Tensor[(4, 14, 10), bool] */;
  (%206, %207, %var_6827, meta[relay.Constant][11] /* ty=Tensor[(560), bool] */)
}

def @func_14829() -> (Tensor[(4, 8, 15), float32],) {
  %208 = @func_10594() /* ty=(Tensor[(4, 8, 15), float32],) */;
  %209 = %208.0;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(4, 8, 15), float32] */;
  %211 = sin(%210) /* ty=Tensor[(4, 8, 15), float32] */;
  (%211,)
}

def @func_14209() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  %212 = @func_13609() /* ty=Tensor[(378), float32] */;
  %213 = @func_11941() /* ty=Tensor[(378), float32] */;
  (%212, %213)
}

def @func_4145(%var_4135: Tensor[(16, 16, 16), float64]) -> Tensor[(16, 16, 16), float64] {
  %214 = cast(%var_4135, dtype="float64") /* ty=Tensor[(16, 16, 16), float64] */;
  %215 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(16, 16, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 16, 16), float64] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%216, %217) /* ty=Tensor[(16, 16, 16), float64] */
}

def @func_16261() -> (Tensor[(378), float32], Tensor[(14), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(11, 5, 7), int64], Tensor[(540), uint32], Tensor[(385), int64], Tensor[(14), float64], Tensor[(220), bool]) {
  %218 = @func_14843() /* ty=(Tensor[(378), float32],) */;
  %219 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %220 = cast(meta[relay.Constant][13] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %221 = reshape(%220, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %222 = @func_8481(%221) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %223 = cast(meta[relay.Constant][14] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %224 = cast(meta[relay.Constant][15] /* ty=Tensor[(385), int64] */, dtype="int64") /* ty=Tensor[(385), int64] */;
  %225 = reshape(%223, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), uint32] */;
  %226 = reshape(%224, newshape=[385]) /* ty=Tensor[(385), int64] */;
  %227 = @func_15587(%225, %226) /* ty=(Tensor[(6, 6, 15), uint32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) */;
  %228 = cast(meta[relay.Constant][16] /* ty=Tensor[(220), bool] */, dtype="bool") /* ty=Tensor[(220), bool] */;
  %229 = %219.2;
  %230 = cast(%229, dtype="float64") /* ty=Tensor[(14), float64] */;
  %231 = reshape(%228, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), bool] */;
  %232 = reshape(%230, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %233 = @func_5163(%231, %232) /* ty=(Tensor[(10, 11, 2), bool], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %234 = %218.0;
  %235 = %222.2;
  %236 = %227.1;
  %237 = %233.2;
  (%234, %229, %235, meta[relay.Constant][13] /* ty=Tensor[(720), float64] */, %236, meta[relay.Constant][14] /* ty=Tensor[(540), uint32] */, meta[relay.Constant][15] /* ty=Tensor[(385), int64] */, %237, meta[relay.Constant][16] /* ty=Tensor[(220), bool] */)
}

def @func_15620() -> (Tensor[(16, 14, 9), uint32], Tensor[(378), float32]) {
  %238 = @func_10058() /* ty=(Tensor[(378), float32],) */;
  %239 = @func_10026() /* ty=Tensor[(16, 14, 9), uint32] */;
  %240 = %238.0;
  (%239, %240)
}

def @func_13743(%var_13738: Tensor[(4, 2, 3), float64]) -> Tensor[(4, 2, 3), float64] {
  %241 = cast(%var_13738, dtype="float64") /* ty=Tensor[(4, 2, 3), float64] */;
  log(%241) /* ty=Tensor[(4, 2, 3), float64] */
}

def @func_16329() -> Tensor[(378), float32] {
  %242 = @func_11319() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %242.1
}

def @func_10058() -> (Tensor[(378), float32],) {
  %243 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %244 = %243.0;
  (%244,)
}

def @func_13464() -> Tensor[(480), float32] {
  %245 = @func_9908() /* ty=(Tensor[(480), float32],) */;
  %245.0
}

def @func_5512(%var_5431: Tensor[(13, 15, 7), float32], %var_5487: Tensor[(40), bool], %var_5488: Tensor[(40, 14), bool]) -> (Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(16, 16, 16), float64], Tensor[(4096), float64], Tensor[(5, 12, ?), bool], uint16, Tensor[(13, 15, 7), float32], Tensor[(13, 15, 7), int64], Tensor[(1800), int32], Tensor[(720), float64], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(40, 14), bool], Tensor[(14, 1, 1), float64], Tensor[(13, 15, 7), float32]) {
  %246 = cast(meta[relay.Constant][17] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %247 = cast(meta[relay.Constant][17] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %248 = cast(meta[relay.Constant][18] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %249 = reshape(%246, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %250 = reshape(%247, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %251 = reshape(%248, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %252 = @func_679(%249, %250, %251) /* ty=(Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) */;
  %253 = cast(meta[relay.Constant][19] /* ty=Tensor[(4096), float64] */, dtype="float64") /* ty=Tensor[(4096), float64] */;
  %254 = reshape(%253, newshape=[16, 16, 16]) /* ty=Tensor[(16, 16, 16), float64] */;
  %255 = cast(meta[relay.Constant][20] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %256 = reshape(%255, newshape=[]) /* ty=uint16 */;
  %257 = @func_4598(%256) /* ty=(Tensor[(5, 12, ?), bool],) */;
  %258 = cast(%var_5431, dtype="float32") /* ty=Tensor[(13, 15, 7), float32] */;
  %259 = asinh(%258) /* ty=Tensor[(13, 15, 7), float32] */;
  %260 = cast(%var_5431, dtype="float32") /* ty=Tensor[(13, 15, 7), float32] */;
  %261 = sin(%260) /* ty=Tensor[(13, 15, 7), float32] */;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(13, 15, 7), float32] */;
  %263 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%259, dtype="float32") /* ty=Tensor[(13, 15, 7), float32] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %266 = cast(%259, dtype="int64") /* ty=Tensor[(13, 15, 7), int64] */;
  %267 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%261, dtype="int64") /* ty=Tensor[(13, 15, 7), int64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %270 = cast(meta[relay.Constant][21] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %271 = cast(meta[relay.Constant][17] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %272 = reshape(%270, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %273 = reshape(%271, newshape=[8, 16]) /* ty=Tensor[(8, 16), int64] */;
  %274 = @func_3396(%272, %273) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) */;
  %275 = cast(%var_5487, dtype="bool") /* ty=Tensor[(40), bool] */;
  %276 = cast(%var_5488, dtype="bool") /* ty=Tensor[(40, 14), bool] */;
  %277 = reshape(%275, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), bool] */;
  %278 = reshape(%276, newshape=[4, 14, 10]) /* ty=Tensor[(4, 14, 10), bool] */;
  %279 = cast(meta[relay.Constant][18] /* ty=Tensor[(14), float32] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %280 = reshape(%279, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %281 = cast(%261, dtype="float32") /* ty=Tensor[(13, 15, 7), float32] */;
  %282 = %252.6;
  %283 = @func_4145(%254) /* ty=Tensor[(16, 16, 16), float64] */;
  %284 = %257.0;
  %285 = floor_divide(%264, %265) /* ty=Tensor[(13, 15, 7), float32] */;
  %286 = minimum(%268, %269) /* ty=Tensor[(13, 15, 7), int64] */;
  %287 = %274.4;
  %288 = @func_3525(%277, %278) /* ty=Tensor[(4, 14, 10), bool] */;
  %289 = @func_166(%280) /* ty=Tensor[(14, 1, 1), float64] */;
  %290 = log2(%281) /* ty=Tensor[(13, 15, 7), float32] */;
  (%282, meta[relay.Constant][17] /* ty=Tensor[(128), int64] */, meta[relay.Constant][18] /* ty=Tensor[(14), float32] */, %283, meta[relay.Constant][19] /* ty=Tensor[(4096), float64] */, %284, meta[relay.Constant][20] /* ty=uint16 */, %285, %286, %287, meta[relay.Constant][21] /* ty=Tensor[(720), float64] */, %288, %var_5487, %var_5488, %289, %290)
}

def @func_4598(%var_4582: uint16) -> (Tensor[(5, 12, ?), bool],) {
  %291 = cast(%var_4582, dtype="uint16") /* ty=uint16 */;
  %292 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 12, 1), uint16] */, dtype="uint16") /* ty=Tensor[(5, 12, 1), uint16] */;
  %293 = bitwise_or(%291, %292) /* ty=Tensor[(5, 12, 1), uint16] */;
  %294 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 12, 1), uint16] */, dtype="bool") /* ty=Tensor[(5, 12, 1), bool] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="bool") /* ty=Tensor[(5, 12, 1), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %298 = less(%296, %297) /* ty=Tensor[(5, 12, ?), bool] */;
  (%298,)
}

def @func_13236() -> (Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) {
  %299 = @func_10594() /* ty=(Tensor[(4, 8, 15), float32],) */;
  %300 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
  %301 = cast(meta[relay.Constant][23] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %302 = reshape(%301, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %303 = @func_8481(%302) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %304 = %299.0;
  %305 = @func_11041() /* ty=Tensor[(378), float32] */;
  %306 = %300.0;
  %307 = %303.0;
  (%304, %305, %306, %307, meta[relay.Constant][23] /* ty=Tensor[(720), float64] */)
}

def @func_9635(%var_9622: Tensor[(14), float32]) -> (Tensor[(378), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14), float32], Tensor[(9, 7, 6), float32]) {
  %308 = cast(meta[relay.Constant][24] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %309 = cast(%var_9622, dtype="float32") /* ty=Tensor[(14), float32] */;
  %310 = reshape(%308, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %311 = reshape(%309, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %312 = @func_2422(%310, %311) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
  %313 = @func_9416() /* ty=Tensor[(378), float32] */;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(378), float32] */;
  %315 = reshape(%314, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), float32] */;
  %316 = @func_8260(%315) /* ty=(Tensor[(9, 7, 6), float32],) */;
  %317 = %312.6;
  %318 = %316.0;
  (%313, %317, meta[relay.Constant][24] /* ty=Tensor[(624), float64] */, %var_9622, %318)
}

def @func_10026() -> Tensor[(16, 14, 9), uint32] {
  %319 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %319.1
}

def @func_10124() -> (Tensor[(378), float32], Tensor[(64, 2), int64]) {
  %320 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %321 = @func_9868() /* ty=(Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) */;
  %322 = %320.0;
  %323 = %321.1;
  (%322, %323)
}

def @func_11643() -> Tensor[(128), int64] {
  %324 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
  %324.0
}

def @func_11706() -> Tensor[(378), float32] {
  %325 = @func_10124() /* ty=(Tensor[(378), float32], Tensor[(64, 2), int64]) */;
  %325.0
}

def @func_540(%var_509: Tensor[(14, 1, 1), float32]) -> (Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) {
  %326 = cast(-6.27894f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %327 = cast(%var_509, dtype="float32") /* ty=Tensor[(14, 1, 1), float32] */;
  %328 = cast(meta[relay.Constant][25] /* ty=Tensor[(385), int64] */, dtype="int64") /* ty=Tensor[(385), int64] */;
  %329 = cast(meta[relay.Constant][25] /* ty=Tensor[(385), int64] */, dtype="int64") /* ty=Tensor[(385), int64] */;
  %330 = reshape(%328, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %331 = reshape(%329, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %332 = cast(%var_509, dtype="float64") /* ty=Tensor[(14, 1, 1), float64] */;
  %333 = reshape(%332, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %334 = cast(meta[relay.Constant][26] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %335 = cast(meta[relay.Constant][27] /* ty=Tensor[(2016), uint32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %336 = reshape(%334, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint32] */;
  %337 = reshape(%335, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), uint32] */;
  %338 = @func_436(%336, %337) /* ty=(Tensor[(16, 14, 9), uint32],) */;
  %339 = maximum(%326, %327) /* ty=Tensor[(14, 1, 1), float32] */;
  %340 = @func_134(%330, %331) /* ty=Tensor[(11, 5, 7), int64] */;
  %341 = @func_166(%333) /* ty=Tensor[(14, 1, 1), float64] */;
  %342 = %338.0;
  (%339, %340, meta[relay.Constant][25] /* ty=Tensor[(385), int64] */, %341, %342, meta[relay.Constant][26] /* ty=Tensor[(144), uint32] */, meta[relay.Constant][27] /* ty=Tensor[(2016), uint32] */)
}

def @func_9452(%var_9442: Tensor[(385, 1), int64]) -> (Tensor[(11, 5, 7), int64], Tensor[(385, 378), bool]) {
  %343 = cast(%var_9442, dtype="int64") /* ty=Tensor[(385, 1), int64] */;
  %344 = cast(%var_9442, dtype="int64") /* ty=Tensor[(385, 1), int64] */;
  %345 = reshape(%343, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %346 = reshape(%344, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %347 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %348 = %347.0;
  %349 = cast(%var_9442, dtype="bool") /* ty=Tensor[(385, 1), bool] */;
  %350 = cast(%348, dtype="bool") /* ty=Tensor[(378), bool] */;
  %351 = @func_134(%345, %346) /* ty=Tensor[(11, 5, 7), int64] */;
  %352 = equal(%349, %350) /* ty=Tensor[(385, 378), bool] */;
  (%351, %352)
}

def @func_10662() -> (Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) {
  %353 = @func_10058() /* ty=(Tensor[(378), float32],) */;
  %354 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 720), float64] */, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
  %355 = reshape(%354, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %356 = @func_9200(%355) /* ty=(Tensor[(14), float64], Tensor[(1120), float64], Tensor[(720), float64]) */;
  %357 = %353.0;
  %358 = %356.0;
  (%357, %358, meta[relay.Constant][28] /* ty=Tensor[(1, 720), float64] */)
}

def @func_11973(%var_11968: Tensor[(624), float64], %var_11969: Tensor[(14, 1), float32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(5, 7, 7), float32], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(624), float64]) {
  %359 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %360 = @func_11872() /* ty=(Tensor[(480), float32], Tensor[(378), float32], Tensor[(320), bool]) */;
  %361 = cast(%var_11968, dtype="float64") /* ty=Tensor[(624), float64] */;
  %362 = cast(%var_11969, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
  %363 = reshape(%361, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %364 = reshape(%362, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %365 = @func_2422(%363, %364) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
  %366 = cast(%var_11969, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
  %367 = reshape(%366, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %368 = @func_9635(%367) /* ty=(Tensor[(378), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14), float32], Tensor[(9, 7, 6), float32]) */;
  %369 = %359.0;
  %370 = %360.1;
  %371 = %365.0;
  %372 = %368.2;
  (%369, %370, %371, %var_11968, %var_11969, %372)
}

def @func_679(%var_629: Tensor[(8, 4, 4), int64], %var_630: Tensor[(8, 4, 4), int64], %var_640: Tensor[(14), float32]) -> (Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) {
  %373 = cast(%var_630, dtype="bool") /* ty=Tensor[(8, 4, 4), bool] */;
  %374 = shape_of(%var_629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%var_629, dtype="bool") /* ty=Tensor[(8, 4, 4), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %377 = cast(%var_640, dtype="float32") /* ty=Tensor[(14), float32] */;
  %378 = reshape(%377, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
  %379 = @func_540(%378) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
  %380 = cast(%var_640, dtype="float64") /* ty=Tensor[(14), float64] */;
  %381 = reshape(%380, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %382 = cast(%var_640, dtype="float64") /* ty=Tensor[(14), float64] */;
  %383 = reshape(%382, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %384 = %379.2;
  %385 = cast(%384, dtype="int64") /* ty=Tensor[(385), int64] */;
  %386 = cast(%384, dtype="int64") /* ty=Tensor[(385), int64] */;
  %387 = reshape(%385, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %388 = reshape(%386, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %389 = cast(%var_640, dtype="float64") /* ty=Tensor[(14), float64] */;
  %390 = reshape(%389, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %391 = not_equal(%375, %376) /* ty=Tensor[(8, 4, 4), bool] */;
  %392 = @func_166(%381) /* ty=Tensor[(14, 1, 1), float64] */;
  %393 = @func_166(%383) /* ty=Tensor[(14, 1, 1), float64] */;
  %394 = @func_134(%387, %388) /* ty=Tensor[(11, 5, 7), int64] */;
  %395 = @func_166(%390) /* ty=Tensor[(14, 1, 1), float64] */;
  (%391, %384, %var_640, %392, %393, %394, %395)
}

def @func_13895(%var_13883: Tensor[(1040), uint32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(1040), uint32]) {
  %396 = cast(%var_13883, dtype="uint32") /* ty=Tensor[(1040), uint32] */;
  %397 = reshape(%396, newshape=[10, 13, 8]) /* ty=Tensor[(10, 13, 8), uint32] */;
  %398 = @func_12949(%397) /* ty=(Tensor[(480), float32], Tensor[(10, 13, 8), bool], Tensor[(378), float32]) */;
  %399 = @func_11381() /* ty=Tensor[(378), float32] */;
  %400 = @func_12174() /* ty=Tensor[(378), float32] */;
  %401 = %398.2;
  (%399, %400, %401, %var_13883)
}

def @func_15925() -> (Tensor[(14), float32], Tensor[(128), int64]) {
  %402 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %403 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
  %404 = %402.2;
  %405 = %403.0;
  (%404, %405)
}

def @func_16403() -> Tensor[(378), float64] {
  %406 = @func_10381() /* ty=(Tensor[(720), float64], Tensor[(378), float64]) */;
  %406.1
}

def @func_16461() -> (Tensor[(4, 8, 15), float32], Tensor[(378), float32]) {
  %407 = @func_14829() /* ty=(Tensor[(4, 8, 15), float32],) */;
  %408 = @func_14908() /* ty=(Tensor[(378), float32], Tensor[(7, 195), float32], Tensor[(600), float32], Tensor[(624), float64]) */;
  %409 = %407.0;
  %410 = %408.0;
  (%409, %410)
}

def @func_13989(%var_13986: Tensor[(1, 7, 9), float64]) -> Tensor[(1, 7, 9), float64] {
  %411 = cast(%var_13986, dtype="float64") /* ty=Tensor[(1, 7, 9), float64] */;
  sin(%411) /* ty=Tensor[(1, 7, 9), float64] */
}

def @func_10242() -> Tensor[(378), float32] {
  @func_10211() /* ty=Tensor[(378), float32] */
}

def @func_17529() -> (Tensor[(378), float32],) {
  %412 = @func_14843() /* ty=(Tensor[(378), float32],) */;
  %413 = %412.0;
  (%413,)
}

def @func_3525(%var_3513: Tensor[(4, 1, 10), bool], %var_3514: Tensor[(4, 14, 10), bool]) -> Tensor[(4, 14, 10), bool] {
  %414 = cast(%var_3513, dtype="bool") /* ty=Tensor[(4, 1, 10), bool] */;
  %415 = cast(%var_3514, dtype="bool") /* ty=Tensor[(4, 14, 10), bool] */;
  logical_or(%414, %415) /* ty=Tensor[(4, 14, 10), bool] */
}

def @func_14072() -> Tensor[(720), float64] {
  @func_10041() /* ty=Tensor[(720), float64] */
}

def @func_10641() -> (Tensor[(128), int64],) {
  %416 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
  %417 = %416.0;
  (%417,)
}

def @func_14317(%var_14304: Tensor[(1, 40), bool]) -> (Tensor[(480), float32], Tensor[(378), float32], Tensor[(4, 14, 10), bool], Tensor[(120), float64], Tensor[(1, 40), bool]) {
  %418 = @func_13970() /* ty=(Tensor[(378), float32],) */;
  %419 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %420 = cast(%var_14304, dtype="bool") /* ty=Tensor[(1, 40), bool] */;
  %421 = reshape(%419, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), float64] */;
  %422 = reshape(%420, newshape=[20, 2]) /* ty=Tensor[(20, 2), bool] */;
  %423 = @func_6838(%421, %422) /* ty=(Tensor[(8, 5, 3), float64], Tensor[(4, 14, 10), bool], Tensor[(20, 2), bool], Tensor[(560), bool]) */;
  %424 = @func_13464() /* ty=Tensor[(480), float32] */;
  %425 = %418.0;
  %426 = %423.1;
  (%424, %425, %426, meta[relay.Constant][29] /* ty=Tensor[(120), float64] */, %var_14304)
}

def @func_16638() -> (Tensor[(378), float32], Tensor[(64, 2), int64]) {
  %427 = @func_15202() /* ty=(Tensor[(378), float32],) */;
  %428 = @func_9868() /* ty=(Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) */;
  %429 = %427.0;
  %430 = %428.1;
  (%429, %430)
}

def @func_11269() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  %431 = @func_10058() /* ty=(Tensor[(378), float32],) */;
  %432 = @func_10278() /* ty=Tensor[(378), float32] */;
  %433 = %431.0;
  (%432, %433)
}

def @func_16129(%var_16118: Tensor[(14, 5, 16), int32], %var_16119: Tensor[(14, 5, 16), int32]) -> (Tensor[(14, 5, 16), bool],) {
  %434 = cast(%var_16119, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %435 = shape_of(%var_16118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%var_16118, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %438 = greater(%436, %437) /* ty=Tensor[(14, 5, 16), bool] */;
  (%438,)
}

def @func_14751(%var_14723: Tensor[(1, 720), float64]) -> (Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(560), bool], Tensor[(?, 720), bool]) {
  %439 = cast(meta[relay.Constant][30] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %440 = cast(meta[relay.Constant][31] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %441 = reshape(%439, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), bool] */;
  %442 = reshape(%440, newshape=[4, 14, 10]) /* ty=Tensor[(4, 14, 10), bool] */;
  %443 = @func_10662() /* ty=(Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) */;
  %444 = %443.2;
  %445 = cast(%var_14723, dtype="int16") /* ty=Tensor[(1, 720), int16] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(2), int32] */;
  %447 = cast(%444, dtype="int16") /* ty=Tensor[(1, 720), int16] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %449 = right_shift(%447, %448) /* ty=Tensor[(?, 720), int16] */;
  %450 = cast(%449, dtype="int16") /* ty=Tensor[(?, 720), int16] */;
  %451 = shape_of(%var_14723, dtype="int32") /* ty=Tensor[(2), int32] */;
  %452 = cast(%var_14723, dtype="int16") /* ty=Tensor[(1, 720), int16] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %454 = subtract(%452, %453) /* ty=Tensor[(?, 720), int16] */;
  %455 = cast(%454, dtype="bool") /* ty=Tensor[(?, 720), bool] */;
  %456 = shape_of(%449, dtype="int32") /* ty=Tensor[(2), int32] */;
  %457 = cast(%449, dtype="bool") /* ty=Tensor[(?, 720), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %459 = @func_3525(%441, %442) /* ty=Tensor[(4, 14, 10), bool] */;
  %460 = less_equal(%457, %458) /* ty=Tensor[(?, 720), bool] */;
  (%459, meta[relay.Constant][30] /* ty=Tensor[(40), bool] */, meta[relay.Constant][31] /* ty=Tensor[(560), bool] */, %460)
}

def @func_9742(%var_9739: Tensor[(40), bool]) -> (Tensor[(378), float32], Tensor[(14), float32], Tensor[(1365), float32], Tensor[(40), bool], Tensor[(560), bool]) {
  %461 = @func_9567() /* ty=(Tensor[(378), float32],) */;
  %462 = cast(meta[relay.Constant][32] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %463 = cast(%var_9739, dtype="bool") /* ty=Tensor[(40), bool] */;
  %464 = cast(meta[relay.Constant][33] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %465 = reshape(%462, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float32] */;
  %466 = reshape(%463, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %467 = reshape(%464, newshape=[40, 14]) /* ty=Tensor[(40, 14), bool] */;
  %468 = @func_5512(%465, %466, %467) /* ty=(Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(16, 16, 16), float64], Tensor[(4096), float64], Tensor[(5, 12, ?), bool], uint16, Tensor[(13, 15, 7), float32], Tensor[(13, 15, 7), int64], Tensor[(1800), int32], Tensor[(720), float64], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(40, 14), bool], Tensor[(14, 1, 1), float64], Tensor[(13, 15, 7), float32]) */;
  %469 = %461.0;
  %470 = %468.2;
  (%469, %470, meta[relay.Constant][32] /* ty=Tensor[(1365), float32] */, %var_9739, meta[relay.Constant][33] /* ty=Tensor[(560), bool] */)
}

def @func_10931(%var_10847: Tensor[(4, 8, 15), float32]) -> (Tensor[(4, 8, 15), float64], Tensor[(720), float64], Tensor[(720), float64]) {
  %471 = cast(%var_10847, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %472 = sqrt(%471) /* ty=Tensor[(4, 8, 15), float64] */;
  %473 = @func_10594() /* ty=(Tensor[(4, 8, 15), float32],) */;
  %474 = %473.0;
  %475 = cast(%var_10847, dtype="int32") /* ty=Tensor[(4, 8, 15), int32] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="int32") /* ty=Tensor[(4, 8, 15), int32] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %479 = right_shift(%477, %478) /* ty=Tensor[(4, 8, 15), int32] */;
  %480 = cast(%479, dtype="uint16") /* ty=Tensor[(4, 8, 15), uint16] */;
  %481 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%472, dtype="uint16") /* ty=Tensor[(4, 8, 15), uint16] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %484 = bitwise_or(%482, %483) /* ty=Tensor[(4, 8, 15), uint16] */;
  %485 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 8, 15), uint16] */, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %489 = cast(meta[relay.Constant][35] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %490 = reshape(%489, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %491 = @func_8481(%490) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %492 = divide(%487, %488) /* ty=Tensor[(4, 8, 15), float64] */;
  %493 = %491.2;
  (%492, %493, meta[relay.Constant][35] /* ty=Tensor[(720), float64] */)
}

def @func_9170(%var_9165: Tensor[(10, 13, 8), uint32]) -> Tensor[(10, 13, 8), bool] {
  %494 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %495 = %494.2;
  %496 = cast(%var_9165, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%498, %499) /* ty=Tensor[(10, 13, 8), bool] */
}

def @func_17414() -> Tensor[(378), float32] {
  %500 = @func_9567() /* ty=(Tensor[(378), float32],) */;
  %500.0
}

def @func_14908() -> (Tensor[(378), float32], Tensor[(7, 195), float32], Tensor[(600), float32], Tensor[(624), float64]) {
  %501 = @func_10747() /* ty=(Tensor[(378), float32],) */;
  %502 = cast(meta[relay.Constant][36] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %503 = cast(meta[relay.Constant][37] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %504 = reshape(%502, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
  %505 = reshape(%503, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %506 = @func_5592(%504, %505) /* ty=(Tensor[(40), bool], Tensor[(7, 195), float32], Tensor[(40), bool], Tensor[(560), bool], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(5, 12, 10), float64]) */;
  %507 = %501.0;
  %508 = %506.1;
  (%507, %508, meta[relay.Constant][36] /* ty=Tensor[(600), float32] */, meta[relay.Constant][37] /* ty=Tensor[(624), float64] */)
}

def @func_13609() -> Tensor[(378), float32] {
  %509 = @func_12242() /* ty=(Tensor[(378), float32],) */;
  %509.0
}

def @func_2825(%var_2795: Tensor[(16, 11, 9), float64]) -> (Tensor[(16, 11, 9), float64], Tensor[(14), float32], Tensor[(128), int64], Tensor[(14), float32]) {
  %510 = cast(%var_2795, dtype="float64") /* ty=Tensor[(16, 11, 9), float64] */;
  %511 = cast(meta[relay.Constant][38] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %512 = cast(meta[relay.Constant][38] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %513 = cast(meta[relay.Constant][39] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %514 = reshape(%511, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %515 = reshape(%512, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %516 = reshape(%513, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %517 = @func_679(%514, %515, %516) /* ty=(Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) */;
  %518 = log10(%510) /* ty=Tensor[(16, 11, 9), float64] */;
  %519 = %517.2;
  (%518, %519, meta[relay.Constant][38] /* ty=Tensor[(128), int64] */, meta[relay.Constant][39] /* ty=Tensor[(14), float32] */)
}

def @func_11238(%var_11206: Tensor[(720, 1), float32]) -> (Tensor[(10, 13, 8), uint32], Tensor[(9, 7, 6), float32], Tensor[(720, ?), int64], Tensor[(64, 2), int64], Tensor[(720, ?), uint64]) {
  %520 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %521 = cast(meta[relay.Constant][40] /* ty=Tensor[(720, 1), float64] */, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %522 = reshape(%521, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %523 = @func_8481(%522) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %524 = cast(meta[relay.Constant][40] /* ty=Tensor[(720, 1), float64] */, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %525 = atan(%524) /* ty=Tensor[(720, 1), float32] */;
  %526 = cast(%var_11206, dtype="int16") /* ty=Tensor[(720, 1), int16] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(2), int32] */;
  %528 = cast(%525, dtype="int16") /* ty=Tensor[(720, 1), int16] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %530 = bitwise_xor(%528, %529) /* ty=Tensor[(720, ?), int16] */;
  %531 = cast(%525, dtype="int64") /* ty=Tensor[(720, 1), int64] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(2), int32] */;
  %533 = cast(%530, dtype="int64") /* ty=Tensor[(720, ?), int64] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %535 = @func_10124() /* ty=(Tensor[(378), float32], Tensor[(64, 2), int64]) */;
  %536 = cast(%525, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %537 = sin(%536) /* ty=Tensor[(720, 1), float32] */;
  %538 = cast(%530, dtype="uint64") /* ty=Tensor[(720, ?), uint64] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(2), int32] */;
  %540 = cast(%537, dtype="uint64") /* ty=Tensor[(720, 1), uint64] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %542 = %520.2;
  %543 = %523.4;
  %544 = multiply(%533, %534) /* ty=Tensor[(720, ?), int64] */;
  %545 = %535.1;
  %546 = right_shift(%540, %541) /* ty=Tensor[(720, ?), uint64] */;
  (%542, %543, %544, %545, %546)
}

def @func_9416() -> Tensor[(378), float32] {
  %547 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %547.0
}

def @func_14718() -> (Tensor[(14, 1, 1), float64], Tensor[(64, 2), float32], Tensor[(64, 2), float64]) {
  %548 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %549 = @func_10124() /* ty=(Tensor[(378), float32], Tensor[(64, 2), int64]) */;
  %550 = %549.1;
  %551 = cast(%550, dtype="float64") /* ty=Tensor[(64, 2), float64] */;
  %552 = atan(%551) /* ty=Tensor[(64, 2), float64] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(64, 2), float32] */;
  %554 = cast(%552, dtype="float64") /* ty=Tensor[(64, 2), float64] */;
  %555 = %548.3;
  %556 = sin(%553) /* ty=Tensor[(64, 2), float32] */;
  %557 = cos(%554) /* ty=Tensor[(64, 2), float64] */;
  (%555, %556, %557)
}

def @func_166(%var_160: Tensor[(14, 1, 1), float64]) -> Tensor[(14, 1, 1), float64] {
  %558 = cast(%var_160, dtype="float64") /* ty=Tensor[(14, 1, 1), float64] */;
  rsqrt(%558) /* ty=Tensor[(14, 1, 1), float64] */
}

def @func_11872() -> (Tensor[(480), float32], Tensor[(378), float32], Tensor[(320), bool]) {
  %559 = cast(meta[relay.Constant][41] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %560 = reshape(%559, newshape=[2, 160]) /* ty=Tensor[(2, 160), bool] */;
  %561 = @func_9658(%560) /* ty=(Tensor[(378), float32], Tensor[(16, 5, 4), bool], Tensor[(2, 160), bool], Tensor[(5, 8, 7), int16]) */;
  %562 = @func_11162() /* ty=Tensor[(480), float32] */;
  %563 = %561.0;
  (%562, %563, meta[relay.Constant][41] /* ty=Tensor[(320), bool] */)
}

def @func_15468() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  %564 = @func_11760() /* ty=(Tensor[(378), float32],) */;
  %565 = @func_11381() /* ty=Tensor[(378), float32] */;
  %566 = %564.0;
  (%565, %566)
}

def @func_15739() -> (Tensor[(64, 2), float32],) {
  %567 = @func_14718() /* ty=(Tensor[(14, 1, 1), float64], Tensor[(64, 2), float32], Tensor[(64, 2), float64]) */;
  %568 = %567.1;
  (%568,)
}

def @func_14655(%var_14653: Tensor[(385), int64]) -> (Tensor[(378), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) {
  %569 = cast(%var_14653, dtype="int64") /* ty=Tensor[(385), int64] */;
  %570 = reshape(%569, newshape=[385, 1]) /* ty=Tensor[(385, 1), int64] */;
  %571 = @func_9452(%570) /* ty=(Tensor[(11, 5, 7), int64], Tensor[(385, 378), bool]) */;
  %572 = @func_10779() /* ty=Tensor[(378), float32] */;
  %573 = %571.0;
  (%572, %573, %var_14653)
}

def @func_13970() -> (Tensor[(378), float32],) {
  %574 = @func_11269() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %575 = %574.1;
  (%575,)
}

def @func_15780(%var_15753: Tensor[(144), uint32], %var_15769: Tensor[(40), bool]) -> (Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32], Tensor[(1, 40), bool], Tensor[(40), bool]) {
  %576 = @func_11760() /* ty=(Tensor[(378), float32],) */;
  %577 = cast(%var_15753, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %578 = cast(meta[relay.Constant][42] /* ty=Tensor[(2016), uint32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %579 = reshape(%577, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint32] */;
  %580 = reshape(%578, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), uint32] */;
  %581 = @func_436(%579, %580) /* ty=(Tensor[(16, 14, 9), uint32],) */;
  %582 = cast(%var_15769, dtype="bool") /* ty=Tensor[(40), bool] */;
  %583 = reshape(%582, newshape=[1, 40]) /* ty=Tensor[(1, 40), bool] */;
  %584 = @func_14317(%583) /* ty=(Tensor[(480), float32], Tensor[(378), float32], Tensor[(4, 14, 10), bool], Tensor[(120), float64], Tensor[(1, 40), bool]) */;
  %585 = %576.0;
  %586 = %581.0;
  %587 = %584.4;
  (%585, %586, %var_15753, meta[relay.Constant][42] /* ty=Tensor[(2016), uint32] */, %587, %var_15769)
}

def @func_10211() -> Tensor[(378), float32] {
  %588 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %588.0
}

def @func_15722(%var_15715: Tensor[(385), int64]) -> (Tensor[(378), float32], Tensor[(385, 378), bool], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(220), bool], Tensor[(14, 1), float64]) {
  %589 = cast(%var_15715, dtype="int64") /* ty=Tensor[(385), int64] */;
  %590 = reshape(%589, newshape=[385, 1]) /* ty=Tensor[(385, 1), int64] */;
  %591 = @func_9452(%590) /* ty=(Tensor[(11, 5, 7), int64], Tensor[(385, 378), bool]) */;
  %592 = cast(meta[relay.Constant][43] /* ty=Tensor[(220), bool] */, dtype="bool") /* ty=Tensor[(220), bool] */;
  %593 = cast(meta[relay.Constant][44] /* ty=Tensor[(14, 1), float64] */, dtype="float64") /* ty=Tensor[(14, 1), float64] */;
  %594 = reshape(%592, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), bool] */;
  %595 = reshape(%593, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %596 = @func_5163(%594, %595) /* ty=(Tensor[(10, 11, 2), bool], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %597 = @func_10998() /* ty=Tensor[(378), float32] */;
  %598 = %591.1;
  %599 = %596.1;
  (%597, %598, %var_15715, %599, meta[relay.Constant][43] /* ty=Tensor[(220), bool] */, meta[relay.Constant][44] /* ty=Tensor[(14, 1), float64] */)
}

def @func_9200(%var_9181: Tensor[(720), float64]) -> (Tensor[(14), float64], Tensor[(1120), float64], Tensor[(720), float64]) {
  %600 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %601 = cast(%var_9181, dtype="float64") /* ty=Tensor[(720), float64] */;
  %602 = reshape(%601, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %603 = @func_8481(%602) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %604 = %600.4;
  %605 = %603.1;
  (%604, %605, %var_9181)
}

def @func_10779() -> Tensor[(378), float32] {
  %606 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %606.0
}

def @func_12949(%var_12937: Tensor[(10, 13, 8), uint32]) -> (Tensor[(480), float32], Tensor[(10, 13, 8), bool], Tensor[(378), float32]) {
  %607 = @func_9908() /* ty=(Tensor[(480), float32],) */;
  %608 = @func_9895() /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */;
  %609 = %608.0;
  %610 = cast(%var_12937, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %614 = @func_10747() /* ty=(Tensor[(378), float32],) */;
  %615 = %607.0;
  %616 = greater_equal(%612, %613) /* ty=Tensor[(10, 13, 8), bool] */;
  %617 = %614.0;
  (%615, %616, %617)
}

def @func_17047() -> (Tensor[(378), float32],) {
  %618 = @func_10998() /* ty=Tensor[(378), float32] */;
  (%618,)
}

def @func_16588() -> Tensor[(378), float32] {
  @func_13609() /* ty=Tensor[(378), float32] */
}

def @main(%var_18047: Tensor[(8, 60), float32]) -> (Tensor[(378), float64], Tensor[(4, 8, 15), float64], Tensor[(378), float32], Tensor[(8, 60), bool]) {
  %619 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 60), float32] */, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %620 = reshape(%619, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %621 = @func_10931(%620) /* ty=(Tensor[(4, 8, 15), float64], Tensor[(720), float64], Tensor[(720), float64]) */;
  %622 = @func_14209() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %623 = cast(%var_18047, dtype="bool") /* ty=Tensor[(8, 60), bool] */;
  %624 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(8, 60), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %625 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 60), float32] */, dtype="bool") /* ty=Tensor[(8, 60), bool] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %627 = @func_16403() /* ty=Tensor[(378), float64] */;
  %628 = %621.0;
  %629 = %622.1;
  %630 = greater_equal(%625, %626) /* ty=Tensor[(8, 60), bool] */;
  (%627, %628, %629, %630)
}

def @func_11941() -> Tensor[(378), float32] {
  %631 = @func_9567() /* ty=(Tensor[(378), float32],) */;
  %631.0
}

def @func_16926() -> (Tensor[(624), float64], Tensor[(16, 14, 9), float64]) {
  %632 = @func_14908() /* ty=(Tensor[(378), float32], Tensor[(7, 195), float32], Tensor[(600), float32], Tensor[(624), float64]) */;
  %633 = @func_15449() /* ty=(Tensor[(16, 14, 9), uint32], Tensor[(720), float64]) */;
  %634 = %633.0;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(16, 14, 9), float64] */;
  %636 = %632.3;
  %637 = sigmoid(%635) /* ty=Tensor[(16, 14, 9), float64] */;
  (%636, %637)
}

def @func_10226(%var_10224: Tensor[(2, 360), float64]) -> (Tensor[(16, 14, 9), uint32], Tensor[(378), float32], Tensor[(720), float64], Tensor[(2, 360), float64]) {
  %638 = @func_10124() /* ty=(Tensor[(378), float32], Tensor[(64, 2), int64]) */;
  %639 = cast(%var_10224, dtype="float64") /* ty=Tensor[(2, 360), float64] */;
  %640 = reshape(%639, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %641 = @func_9200(%640) /* ty=(Tensor[(14), float64], Tensor[(1120), float64], Tensor[(720), float64]) */;
  %642 = @func_10026() /* ty=Tensor[(16, 14, 9), uint32] */;
  %643 = %638.0;
  %644 = %641.2;
  (%642, %643, %644, %var_10224)
}

def @func_10505(%var_10455: Tensor[(192), float64], %var_10457: Tensor[(64, 2), int64]) -> (Tensor[(16, 14, 9), uint32], Tensor[(280), int32], Tensor[(192), float64], Tensor[(280), int32], Tensor[(64, 2), int64], Tensor[(32, 128), float64]) {
  %645 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %646 = cast(%var_10455, dtype="float64") /* ty=Tensor[(192), float64] */;
  %647 = cast(meta[relay.Constant][46] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
  %648 = cast(%var_10457, dtype="int64") /* ty=Tensor[(64, 2), int64] */;
  %649 = cast(meta[relay.Constant][47] /* ty=Tensor[(32, 128), float64] */, dtype="float64") /* ty=Tensor[(32, 128), float64] */;
  %650 = reshape(%646, newshape=[6, 8, 4]) /* ty=Tensor[(6, 8, 4), float64] */;
  %651 = reshape(%647, newshape=[280]) /* ty=Tensor[(280), int32] */;
  %652 = reshape(%648, newshape=[32, 4]) /* ty=Tensor[(32, 4), int64] */;
  %653 = reshape(%649, newshape=[4096]) /* ty=Tensor[(4096), float64] */;
  %654 = @func_8886(%650, %651, %652, %653) /* ty=(Tensor[(6, 8, 4), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(32, 4), int64], Tensor[(16, 16, 16), float64], Tensor[(4096), float64]) */;
  %655 = %645.1;
  %656 = %654.2;
  (%655, %656, %var_10455, meta[relay.Constant][46] /* ty=Tensor[(280), int32] */, %var_10457, meta[relay.Constant][47] /* ty=Tensor[(32, 128), float64] */)
}

def @func_17022(%var_17018: Tensor[(1800), int32], %var_17019: uint16) -> (Tensor[(378), float32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) {
  %657 = @func_11760() /* ty=(Tensor[(378), float32],) */;
  %658 = cast(%var_17018, dtype="int32") /* ty=Tensor[(1800), int32] */;
  %659 = cast(%var_17019, dtype="uint16") /* ty=uint16 */;
  %660 = reshape(%658, newshape=[1800]) /* ty=Tensor[(1800), int32] */;
  %661 = reshape(%659, newshape=[]) /* ty=uint16 */;
  %662 = @func_12635(%660, %661) /* ty=(Tensor[(378), float32], Tensor[(280), int32], Tensor[(280), int32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) */;
  %663 = %657.0;
  %664 = %662.3;
  (%663, %664, %var_17018, %var_17019)
}

def @func_11760() -> (Tensor[(378), float32],) {
  %665 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %666 = %665.0;
  (%666,)
}

def @func_17939() -> (Tensor[(378), float32], Tensor[(2, 160), bool], Tensor[(2, 160), bool], Tensor[(15, 15, 8), int32], Tensor[(1800), int32]) {
  %667 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 160), bool] */, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
  %668 = reshape(%667, newshape=[2, 160]) /* ty=Tensor[(2, 160), bool] */;
  %669 = @func_9658(%668) /* ty=(Tensor[(378), float32], Tensor[(16, 5, 4), bool], Tensor[(2, 160), bool], Tensor[(5, 8, 7), int16]) */;
  %670 = cast(meta[relay.Constant][49] /* ty=Tensor[(1800), int32] */, dtype="int32") /* ty=Tensor[(1800), int32] */;
  %671 = reshape(%670, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), int32] */;
  %672 = @func_967(%671) /* ty=(Tensor[(15, 15, 8), int32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %673 = @func_11941() /* ty=Tensor[(378), float32] */;
  %674 = %669.2;
  %675 = %672.0;
  (%673, %674, meta[relay.Constant][48] /* ty=Tensor[(2, 160), bool] */, %675, meta[relay.Constant][49] /* ty=Tensor[(1800), int32] */)
}

def @func_5592(%var_5541: Tensor[(5, 12, 10), float32], %var_5550: Tensor[(624), float64]) -> (Tensor[(40), bool], Tensor[(7, 195), float32], Tensor[(40), bool], Tensor[(560), bool], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(5, 12, 10), float64]) {
  %676 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 195), float32] */, dtype="float32") /* ty=Tensor[(7, 195), float32] */;
  %677 = cast(meta[relay.Constant][51] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %678 = cast(meta[relay.Constant][52] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %679 = reshape(%676, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float32] */;
  %680 = reshape(%677, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %681 = reshape(%678, newshape=[40, 14]) /* ty=Tensor[(40, 14), bool] */;
  %682 = @func_5512(%679, %680, %681) /* ty=(Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(16, 16, 16), float64], Tensor[(4096), float64], Tensor[(5, 12, ?), bool], uint16, Tensor[(13, 15, 7), float32], Tensor[(13, 15, 7), int64], Tensor[(1800), int32], Tensor[(720), float64], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(40, 14), bool], Tensor[(14, 1, 1), float64], Tensor[(13, 15, 7), float32]) */;
  %683 = cast(%var_5550, dtype="float64") /* ty=Tensor[(624), float64] */;
  %684 = cast(meta[relay.Constant][53] /* ty=Tensor[(14, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
  %685 = reshape(%683, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %686 = reshape(%684, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %687 = @func_2422(%685, %686) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
  %688 = cast(%var_5541, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
  %689 = cosh(%688) /* ty=Tensor[(5, 12, 10), float32] */;
  %690 = cast(%689, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %691 = %682.12;
  %692 = %687.3;
  %693 = atanh(%690) /* ty=Tensor[(5, 12, 10), float64] */;
  (%691, meta[relay.Constant][50] /* ty=Tensor[(7, 195), float32] */, meta[relay.Constant][51] /* ty=Tensor[(40), bool] */, meta[relay.Constant][52] /* ty=Tensor[(560), bool] */, %692, %var_5550, meta[relay.Constant][53] /* ty=Tensor[(14, 1), float32] */, %693)
}

def @func_10594() -> (Tensor[(4, 8, 15), float32],) {
  %694 = @func_9895() /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */;
  %695 = %694.1;
  (%695,)
}

def @func_8571(%var_8567: Tensor[(2, 15, 15), float64]) -> (Tensor[(2, 15, 15), float64],) {
  %696 = cast(%var_8567, dtype="float64") /* ty=Tensor[(2, 15, 15), float64] */;
  %697 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(2, 15, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 15), float64] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %700 = mod(%698, %699) /* ty=Tensor[(2, 15, 15), float64] */;
  (%700,)
}

def @func_2422(%var_2395: Tensor[(624), float64], %var_2406: Tensor[(14), float32]) -> (Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) {
  %701 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 7, 7), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 7), float32] */;
  %702 = cast(%var_2395, dtype="float64") /* ty=Tensor[(624), float64] */;
  %703 = cast(meta[relay.Constant][56] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %704 = reshape(%702, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), float64] */;
  %705 = reshape(%703, newshape=[128]) /* ty=Tensor[(128), int64] */;
  %706 = @func_1041(%704, %705) /* ty=(Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) */;
  %707 = cast(%var_2406, dtype="float32") /* ty=Tensor[(14), float32] */;
  %708 = reshape(%707, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
  %709 = @func_540(%708) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
  %710 = cast(%var_2395, dtype="float64") /* ty=Tensor[(624), float64] */;
  %711 = cast(meta[relay.Constant][56] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %712 = reshape(%710, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), float64] */;
  %713 = reshape(%711, newshape=[128]) /* ty=Tensor[(128), int64] */;
  %714 = @func_1041(%712, %713) /* ty=(Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) */;
  %715 = sin(%701) /* ty=Tensor[(5, 7, 7), float32] */;
  %716 = %706.2;
  %717 = %709.0;
  %718 = %714.2;
  (%715, %716, %var_2395, meta[relay.Constant][56] /* ty=Tensor[(128), int64] */, %717, %var_2406, %718)
}

def @func_17645() -> (Tensor[(480), float32], Tensor[(128), int64]) {
  %719 = @func_9868() /* ty=(Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) */;
  %720 = @func_11162() /* ty=Tensor[(480), float32] */;
  %721 = %719.0;
  (%720, %721)
}

def @func_13004() -> (Tensor[(378), float32],) {
  %722 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %723 = %722.0;
  (%723,)
}

def @func_1667(%var_1632: Tensor[(10, 14, 8), float64]) -> (Tensor[(10, 14, 8), float64], Tensor[(16, 14, 9), uint32], Tensor[(14), float32], Tensor[(14), float64], Tensor[(1800), int32]) {
  %724 = cast(%var_1632, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %725 = cast(meta[relay.Constant][57] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %726 = reshape(%725, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
  %727 = @func_540(%726) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
  %728 = cast(meta[relay.Constant][58] /* ty=Tensor[(1800), int32] */, dtype="int32") /* ty=Tensor[(1800), int32] */;
  %729 = reshape(%728, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), int32] */;
  %730 = @func_967(%729) /* ty=(Tensor[(15, 15, 8), int32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %731 = tan(%724) /* ty=Tensor[(10, 14, 8), float64] */;
  %732 = %727.4;
  %733 = %730.2;
  (%731, %732, meta[relay.Constant][57] /* ty=Tensor[(14), float32] */, %733, meta[relay.Constant][58] /* ty=Tensor[(1800), int32] */)
}

def @func_6762(%var_6755: Tensor[(16, 5, 4), bool]) -> (Tensor[(16, 5, 4), bool],) {
  %734 = cast(%var_6755, dtype="bool") /* ty=Tensor[(16, 5, 4), bool] */;
  %735 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(16, 5, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(meta[relay.Constant][59] /* ty=Tensor[(16, 5, 4), bool] */, dtype="bool") /* ty=Tensor[(16, 5, 4), bool] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %738 = logical_and(%736, %737) /* ty=Tensor[(16, 5, 4), bool] */;
  (%738,)
}

def @func_14039() -> Tensor[(128), int64] {
  @func_11643() /* ty=Tensor[(128), int64] */
}

def @func_15166() -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(1040), uint32], Tensor[(378), float32]) {
  %739 = @func_12073() /* ty=(Tensor[(378), float32],) */;
  %740 = cast(meta[relay.Constant][60] /* ty=Tensor[(1040), uint32] */, dtype="uint32") /* ty=Tensor[(1040), uint32] */;
  %741 = reshape(%740, newshape=[1040]) /* ty=Tensor[(1040), uint32] */;
  %742 = @func_13895(%741) /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(1040), uint32]) */;
  %743 = %739.0;
  %744 = %742.2;
  %745 = @func_14238() /* ty=Tensor[(378), float32] */;
  (%743, %744, meta[relay.Constant][60] /* ty=Tensor[(1040), uint32] */, %745)
}

def @func_14431(%var_14365: Tensor[(14, 8, 78), float32], %var_14413: Tensor[(4, 48), float64], %var_14419: Tensor[(280, 2), bool], %var_14422: Tensor[(1, 14), float32]) -> (Tensor[(14, 8, 78), int16], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(4096), float64], Tensor[(4, 48), bool], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(280, 2), bool], Tensor[(11, 5, 7), int64], Tensor[(1, 14), float32]) {
  %746 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
  %747 = %746.1;
  %748 = cast(%var_14365, dtype="uint16") /* ty=Tensor[(14, 8, 78), uint16] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="uint16") /* ty=Tensor[(14, 8, 78), uint16] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %752 = left_shift(%750, %751) /* ty=Tensor[(14, 8, 78), uint16] */;
  %753 = cast(%752, dtype="int16") /* ty=Tensor[(14, 8, 78), int16] */;
  %754 = shape_of(%var_14365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%var_14365, dtype="int16") /* ty=Tensor[(14, 8, 78), int16] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %757 = cast(meta[relay.Constant][61] /* ty=Tensor[(4, 48), float64] */, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
  %758 = cast(meta[relay.Constant][62] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
  %759 = cast(meta[relay.Constant][63] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %760 = cast(meta[relay.Constant][64] /* ty=Tensor[(4096), float64] */, dtype="float64") /* ty=Tensor[(4096), float64] */;
  %761 = reshape(%757, newshape=[6, 8, 4]) /* ty=Tensor[(6, 8, 4), float64] */;
  %762 = reshape(%758, newshape=[280]) /* ty=Tensor[(280), int32] */;
  %763 = reshape(%759, newshape=[32, 4]) /* ty=Tensor[(32, 4), int64] */;
  %764 = reshape(%760, newshape=[4096]) /* ty=Tensor[(4096), float64] */;
  %765 = @func_8886(%761, %762, %763, %764) /* ty=(Tensor[(6, 8, 4), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(32, 4), int64], Tensor[(16, 16, 16), float64], Tensor[(4096), float64]) */;
  %766 = cast(%var_14413, dtype="bool") /* ty=Tensor[(4, 48), bool] */;
  %767 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(4, 48), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %768 = cast(meta[relay.Constant][61] /* ty=Tensor[(4, 48), float64] */, dtype="bool") /* ty=Tensor[(4, 48), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %770 = cast(meta[relay.Constant][65] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %771 = cast(%var_14419, dtype="bool") /* ty=Tensor[(280, 2), bool] */;
  %772 = reshape(%770, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), bool] */;
  %773 = reshape(%771, newshape=[4, 14, 10]) /* ty=Tensor[(4, 14, 10), bool] */;
  %774 = cast(%var_14422, dtype="float32") /* ty=Tensor[(1, 14), float32] */;
  %775 = reshape(%774, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
  %776 = @func_540(%775) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
  %777 = subtract(%755, %756) /* ty=Tensor[(14, 8, 78), int16] */;
  %778 = %765.1;
  %779 = greater(%768, %769) /* ty=Tensor[(4, 48), bool] */;
  %780 = @func_3525(%772, %773) /* ty=Tensor[(4, 14, 10), bool] */;
  %781 = %776.1;
  (%777, %778, meta[relay.Constant][62] /* ty=Tensor[(280), int32] */, meta[relay.Constant][63] /* ty=Tensor[(128), int64] */, meta[relay.Constant][64] /* ty=Tensor[(4096), float64] */, %779, %780, meta[relay.Constant][65] /* ty=Tensor[(40), bool] */, %var_14419, %781, %var_14422)
}

def @func_17805() -> (Tensor[(9, 4, 9), bool],) {
  %782 = cast(meta[relay.Constant][66] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %783 = cast(meta[relay.Constant][67] /* ty=Tensor[(9, 4, 9), int16] */, dtype="bool") /* ty=Tensor[(9, 4, 9), bool] */;
  %784 = equal(%782, %783) /* ty=Tensor[(9, 4, 9), bool] */;
  (%784,)
}

def @func_9868() -> (Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) {
  %785 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
  %786 = cast(meta[relay.Constant][68] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %787 = reshape(%786, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %788 = @func_8481(%787) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %789 = %785.0;
  %790 = %788.3;
  (%789, %790, meta[relay.Constant][68] /* ty=Tensor[(720), float64] */)
}

def @func_6166(%var_6161: Tensor[(7, 8, 8), int8], %var_6162: Tensor[(7, 8, 8), int8]) -> (Tensor[(7, 8, 8), bool],) {
  %791 = cast(%var_6162, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
  %792 = shape_of(%var_6161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%var_6161, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %795 = greater_equal(%793, %794) /* ty=Tensor[(7, 8, 8), bool] */;
  (%795,)
}

def @func_11146() -> (Tensor[(378), float32],) {
  %796 = @func_10998() /* ty=Tensor[(378), float32] */;
  (%796,)
}

def @func_15587(%var_15561: Tensor[(6, 6, 15), uint32], %var_15571: Tensor[(385), int64]) -> (Tensor[(6, 6, 15), uint32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) {
  %797 = cast(meta[relay.Constant][69] /* ty=Tensor[(6, 6, 15), uint32] */, dtype="uint32") /* ty=Tensor[(6, 6, 15), uint32] */;
  %798 = shape_of(%var_15561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %799 = cast(%var_15561, dtype="uint32") /* ty=Tensor[(6, 6, 15), uint32] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %801 = cast(%var_15571, dtype="int64") /* ty=Tensor[(385), int64] */;
  %802 = cast(%var_15571, dtype="int64") /* ty=Tensor[(385), int64] */;
  %803 = reshape(%801, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %804 = reshape(%802, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %805 = logical_xor(%799, %800) /* ty=Tensor[(6, 6, 15), uint32] */;
  %806 = @func_134(%803, %804) /* ty=Tensor[(11, 5, 7), int64] */;
  (%805, %806, %var_15571)
}

def @func_13810() -> (Tensor[(480), float32], Tensor[(720), float64], Tensor[(9, 7, 6), float32]) {
  %807 = @func_10381() /* ty=(Tensor[(720), float64], Tensor[(378), float64]) */;
  %808 = %807.0;
  %809 = cast(%808, dtype="float32") /* ty=Tensor[(720), float32] */;
  %810 = reshape(%809, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
  %811 = @func_11238(%810) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(9, 7, 6), float32], Tensor[(720, ?), int64], Tensor[(64, 2), int64], Tensor[(720, ?), uint64]) */;
  %812 = @func_11162() /* ty=Tensor[(480), float32] */;
  %813 = %811.1;
  (%812, %808, %813)
}

def @func_11896(%var_11887: Tensor[(3, 720), float64]) -> (Tensor[(3, 720), float64], Tensor[(128), int64]) {
  %814 = @func_10662() /* ty=(Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) */;
  %815 = %814.2;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
  %817 = cast(%var_11887, dtype="float64") /* ty=Tensor[(3, 720), float64] */;
  %818 = @func_10641() /* ty=(Tensor[(128), int64],) */;
  %819 = floor_divide(%816, %817) /* ty=Tensor[(3, 720), float64] */;
  %820 = %818.0;
  (%819, %820)
}

def @func_15069(%var_14943: Tensor[(1040), uint32], %var_14952: Tensor[(720), float64], %var_14966: Tensor[(14, 624), float64], %var_14980: Tensor[(140, 2), int32], %var_15038: Tensor[(40, 14), bool]) -> (Tensor[(14), float64], Tensor[(10, 1, 15), float64], Tensor[(150), int32], Tensor[(480), float32], Tensor[(720), float64], Tensor[(128), int64], Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 624), bool], Tensor[(192), float64], Tensor[(140, 2), int32], Tensor[(128, 32), float64], Tensor[(128), int64], Tensor[(14, 1, 1040), uint16], Tensor[(14), float32], Tensor[(10, 4), bool], Tensor[(280), int32], Tensor[(40, 14), bool], Tensor[(14), float32], Tensor[(220, 4096), float64]) {
  %821 = cast(meta[relay.Constant][70] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %822 = cast(meta[relay.Constant][70] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %823 = reshape(%821, newshape=[10, 1, 15]) /* ty=Tensor[(10, 1, 15), int32] */;
  %824 = reshape(%822, newshape=[10, 1, 15]) /* ty=Tensor[(10, 1, 15), int32] */;
  %825 = @func_14635(%823, %824) /* ty=(Tensor[(10, ?, 15), float32], Tensor[(10, 1, 15), float64]) */;
  %826 = cast(%var_14943, dtype="uint32") /* ty=Tensor[(1040), uint32] */;
  %827 = reshape(%826, newshape=[10, 13, 8]) /* ty=Tensor[(10, 13, 8), uint32] */;
  %828 = @func_12949(%827) /* ty=(Tensor[(480), float32], Tensor[(10, 13, 8), bool], Tensor[(378), float32]) */;
  %829 = @func_12840() /* ty=(Tensor[(378), float32],) */;
  %830 = cast(%var_14952, dtype="float64") /* ty=Tensor[(720), float64] */;
  %831 = cast(meta[relay.Constant][71] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %832 = reshape(%830, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %833 = reshape(%831, newshape=[8, 16]) /* ty=Tensor[(8, 16), int64] */;
  %834 = @func_3396(%832, %833) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) */;
  %835 = %834.7;
  %836 = cast(%835, dtype="bool") /* ty=Tensor[(1, 624), bool] */;
  %837 = cast(%var_14966, dtype="bool") /* ty=Tensor[(14, 624), bool] */;
  %838 = cast(meta[relay.Constant][74] /* ty=Tensor[(220, 1), bool] */, dtype="bool") /* ty=Tensor[(220, 1), bool] */;
  %839 = @func_10619() /* ty=Tensor[(14), float64] */;
  %840 = cast(%839, dtype="float64") /* ty=Tensor[(14), float64] */;
  %841 = reshape(%838, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), bool] */;
  %842 = reshape(%840, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %843 = @func_5163(%841, %842) /* ty=(Tensor[(10, 11, 2), bool], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %844 = %843.1;
  %845 = cast(%var_14943, dtype="uint16") /* ty=Tensor[(1040), uint16] */;
  %846 = cast(%844, dtype="uint16") /* ty=Tensor[(14, 1, 1), uint16] */;
  %847 = cast(meta[relay.Constant][75] /* ty=Tensor[(10, 4), bool] */, dtype="bool") /* ty=Tensor[(10, 4), bool] */;
  %848 = reshape(%847, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %849 = @func_10573(%848) /* ty=(Tensor[(14), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float32]) */;
  %850 = cast(%var_14966, dtype="float32") /* ty=Tensor[(14, 624), float32] */;
  %851 = cast(meta[relay.Constant][72] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %852 = cast(%var_15038, dtype="bool") /* ty=Tensor[(40, 14), bool] */;
  %853 = cast(%839, dtype="float32") /* ty=Tensor[(14), float32] */;
  %854 = reshape(%850, newshape=[14, 8, 78]) /* ty=Tensor[(14, 8, 78), float32] */;
  %855 = reshape(%851, newshape=[4, 48]) /* ty=Tensor[(4, 48), float64] */;
  %856 = reshape(%852, newshape=[280, 2]) /* ty=Tensor[(280, 2), bool] */;
  %857 = reshape(%853, newshape=[1, 14]) /* ty=Tensor[(1, 14), float32] */;
  %858 = @func_14431(%854, %855, %856, %857) /* ty=(Tensor[(14, 8, 78), int16], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(4096), float64], Tensor[(4, 48), bool], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(280, 2), bool], Tensor[(11, 5, 7), int64], Tensor[(1, 14), float32]) */;
  %859 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %860 = cast(meta[relay.Constant][72] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %861 = cast(%var_14980, dtype="int32") /* ty=Tensor[(140, 2), int32] */;
  %862 = cast(meta[relay.Constant][71] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %863 = cast(meta[relay.Constant][73] /* ty=Tensor[(128, 32), float64] */, dtype="float64") /* ty=Tensor[(128, 32), float64] */;
  %864 = reshape(%860, newshape=[6, 8, 4]) /* ty=Tensor[(6, 8, 4), float64] */;
  %865 = reshape(%861, newshape=[280]) /* ty=Tensor[(280), int32] */;
  %866 = reshape(%862, newshape=[32, 4]) /* ty=Tensor[(32, 4), int64] */;
  %867 = reshape(%863, newshape=[4096]) /* ty=Tensor[(4096), float64] */;
  %868 = @func_8886(%864, %865, %866, %867) /* ty=(Tensor[(6, 8, 4), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(32, 4), int64], Tensor[(16, 16, 16), float64], Tensor[(4096), float64]) */;
  %869 = %868.7;
  %870 = cast(%869, dtype="uint32") /* ty=Tensor[(4096), uint32] */;
  %871 = cast(meta[relay.Constant][74] /* ty=Tensor[(220, 1), bool] */, dtype="uint32") /* ty=Tensor[(220, 1), uint32] */;
  %872 = add(%870, %871) /* ty=Tensor[(220, 4096), uint32] */;
  %873 = cast(%872, dtype="float64") /* ty=Tensor[(220, 4096), float64] */;
  %874 = %825.1;
  %875 = %828.0;
  %876 = @func_10998() /* ty=Tensor[(378), float32] */;
  %877 = %829.0;
  %878 = logical_or(%836, %837) /* ty=Tensor[(14, 624), bool] */;
  %879 = @func_14039() /* ty=Tensor[(128), int64] */;
  %880 = bitwise_and(%845, %846) /* ty=Tensor[(14, 1, 1040), uint16] */;
  %881 = %849.0;
  %882 = %858.2;
  %883 = %859.2;
  %884 = cosh(%873) /* ty=Tensor[(220, 4096), float64] */;
  (%839, %874, meta[relay.Constant][70] /* ty=Tensor[(150), int32] */, %875, %var_14952, meta[relay.Constant][71] /* ty=Tensor[(128), int64] */, %876, %877, %878, meta[relay.Constant][72] /* ty=Tensor[(192), float64] */, %var_14980, meta[relay.Constant][73] /* ty=Tensor[(128, 32), float64] */, %879, %880, %881, meta[relay.Constant][75] /* ty=Tensor[(10, 4), bool] */, %882, %var_15038, %883, %884)
}

def @func_17376() -> Tensor[(378), float32] {
  %885 = @func_14209() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %885.1
}

def @func_17451() -> (Tensor[(16, 14, 9), uint32], Tensor[(378), float32], Tensor[(7, 2), float32], Tensor[(385), int64], Tensor[(1, 624), float32]) {
  %886 = @func_15620() /* ty=(Tensor[(16, 14, 9), uint32], Tensor[(378), float32]) */;
  %887 = cast(meta[relay.Constant][76] /* ty=Tensor[(1, 624), float64] */, dtype="float64") /* ty=Tensor[(1, 624), float64] */;
  %888 = cast(meta[relay.Constant][77] /* ty=Tensor[(7, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 2), float32] */;
  %889 = reshape(%887, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %890 = reshape(%888, newshape=[14, 1]) /* ty=Tensor[(14, 1), float32] */;
  %891 = @func_11973(%889, %890) /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(5, 7, 7), float32], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(624), float64]) */;
  %892 = @func_16261() /* ty=(Tensor[(378), float32], Tensor[(14), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(11, 5, 7), int64], Tensor[(540), uint32], Tensor[(385), int64], Tensor[(14), float64], Tensor[(220), bool]) */;
  %893 = cast(meta[relay.Constant][76] /* ty=Tensor[(1, 624), float64] */, dtype="float32") /* ty=Tensor[(1, 624), float32] */;
  %894 = %886.0;
  %895 = %891.1;
  %896 = %892.6;
  %897 = asinh(%893) /* ty=Tensor[(1, 624), float32] */;
  (%894, %895, meta[relay.Constant][77] /* ty=Tensor[(7, 2), float32] */, %896, %897)
}

def @func_9546() -> (Tensor[(378), float32],) {
  %898 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %899 = %898.0;
  (%899,)
}

def @func_6118(%var_6105: Tensor[(4, 8, 15), float32]) -> Tensor[(4, 8, 15), float32] {
  %900 = cast(meta[relay.Constant][78] /* ty=Tensor[(4, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
  %901 = cast(%var_6105, dtype="float32") /* ty=Tensor[(4, 8, 15), float32] */;
  floor_divide(%900, %901) /* ty=Tensor[(4, 8, 15), float32] */
}

def @func_9484() -> (Tensor[(128), int64], Tensor[(14, 8, 78), float32]) {
  %902 = cast(meta[relay.Constant][79] /* ty=Tensor[(8, 78), float64] */, dtype="float64") /* ty=Tensor[(8, 78), float64] */;
  %903 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %904 = %903.3;
  %905 = cast(%904, dtype="float32") /* ty=Tensor[(14, 1, 1), float32] */;
  %906 = reshape(%902, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %907 = reshape(%905, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %908 = @func_2422(%906, %907) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
  %909 = cast(meta[relay.Constant][79] /* ty=Tensor[(8, 78), float64] */, dtype="float32") /* ty=Tensor[(8, 78), float32] */;
  %910 = cast(%904, dtype="float32") /* ty=Tensor[(14, 1, 1), float32] */;
  %911 = %908.1;
  %912 = add(%909, %910) /* ty=Tensor[(14, 8, 78), float32] */;
  (%911, %912)
}

def @func_16771() -> (Tensor[(480), float32],) {
  %913 = @func_11162() /* ty=Tensor[(480), float32] */;
  (%913,)
}

def @func_15385() -> Tensor[(378), float32] {
  %914 = @func_11760() /* ty=(Tensor[(378), float32],) */;
  %914.0
}

def @func_17595() -> (Tensor[(378), float32],) {
  %915 = @func_10998() /* ty=Tensor[(378), float32] */;
  (%915,)
}

def @func_9908() -> (Tensor[(480), float32],) {
  %916 = @func_9895() /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */;
  %917 = %916.2;
  (%917,)
}

def @func_10573(%var_10542: Tensor[(40), bool]) -> (Tensor[(14), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float32]) {
  %918 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %919 = cast(%var_10542, dtype="bool") /* ty=Tensor[(40), bool] */;
  %920 = reshape(%919, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %921 = @func_9742(%920) /* ty=(Tensor[(378), float32], Tensor[(14), float32], Tensor[(1365), float32], Tensor[(40), bool], Tensor[(560), bool]) */;
  %922 = %918.2;
  %923 = @func_10278() /* ty=Tensor[(378), float32] */;
  %924 = %921.0;
  %925 = @func_10242() /* ty=Tensor[(378), float32] */;
  (%922, %923, %924, %var_10542, %925)
}

def @func_12150() -> (Tensor[(14), float64], Tensor[(720), float64], Tensor[(14), float32], Tensor[(1584), float64], Tensor[(720), float64], Tensor[(480), float32]) {
  %926 = @func_10942() /* ty=(Tensor[(14), float64],) */;
  %927 = @func_10381() /* ty=(Tensor[(720), float64], Tensor[(378), float64]) */;
  %928 = cast(meta[relay.Constant][80] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %929 = reshape(%928, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float64] */;
  %930 = @func_2825(%929) /* ty=(Tensor[(16, 11, 9), float64], Tensor[(14), float32], Tensor[(128), int64], Tensor[(14), float32]) */;
  %931 = cast(meta[relay.Constant][81] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %932 = reshape(%931, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %933 = @func_10931(%932) /* ty=(Tensor[(4, 8, 15), float64], Tensor[(720), float64], Tensor[(720), float64]) */;
  %934 = %926.0;
  %935 = %927.0;
  %936 = %930.1;
  %937 = %933.1;
  (%934, %935, %936, meta[relay.Constant][80] /* ty=Tensor[(1584), float64] */, %937, meta[relay.Constant][81] /* ty=Tensor[(480), float32] */)
}

def @func_16981() -> (Tensor[(378), float32], Tensor[(385), int64], Tensor[(11, 35), int64], Tensor[(378), float32]) {
  %938 = @func_13004() /* ty=(Tensor[(378), float32],) */;
  %939 = cast(meta[relay.Constant][82] /* ty=Tensor[(11, 35), int64] */, dtype="int64") /* ty=Tensor[(11, 35), int64] */;
  %940 = reshape(%939, newshape=[385]) /* ty=Tensor[(385), int64] */;
  %941 = @func_14655(%940) /* ty=(Tensor[(378), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) */;
  %942 = @func_11515() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 8, 78), float32]) */;
  %943 = %938.0;
  %944 = %941.2;
  %945 = %942.1;
  (%943, %944, meta[relay.Constant][82] /* ty=Tensor[(11, 35), int64] */, %945)
}

def @func_436(%var_427: Tensor[(16, 1, 9), uint32], %var_428: Tensor[(16, 14, 9), uint32]) -> (Tensor[(16, 14, 9), uint32],) {
  %946 = cast(%var_427, dtype="uint32") /* ty=Tensor[(16, 1, 9), uint32] */;
  %947 = cast(%var_428, dtype="uint32") /* ty=Tensor[(16, 14, 9), uint32] */;
  %948 = minimum(%946, %947) /* ty=Tensor[(16, 14, 9), uint32] */;
  (%948,)
}

def @func_13297(%var_13256: Tensor[(40), bool], %var_13263: Tensor[(4, 36), uint32], %var_13264: Tensor[(2016), uint32]) -> (Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float64], Tensor[(4, 36), uint32], Tensor[(14), float64], Tensor[(16, 14, 9), bool]) {
  %949 = cast(%var_13256, dtype="bool") /* ty=Tensor[(40), bool] */;
  %950 = reshape(%949, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %951 = @func_10573(%950) /* ty=(Tensor[(14), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float32]) */;
  %952 = %951.2;
  %953 = cast(%952, dtype="float64") /* ty=Tensor[(378), float64] */;
  %954 = cast(%var_13263, dtype="uint32") /* ty=Tensor[(4, 36), uint32] */;
  %955 = cast(%var_13264, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %956 = reshape(%954, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint32] */;
  %957 = reshape(%955, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), uint32] */;
  %958 = @func_436(%956, %957) /* ty=(Tensor[(16, 14, 9), uint32],) */;
  %959 = %958.0;
  %960 = cast(%var_13264, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %961 = shape_of(%959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %962 = cast(%959, dtype="bool") /* ty=Tensor[(16, 14, 9), bool] */;
  %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %964 = @func_11706() /* ty=Tensor[(378), float32] */;
  %965 = asinh(%953) /* ty=Tensor[(378), float64] */;
  %966 = @func_10619() /* ty=Tensor[(14), float64] */;
  %967 = less_equal(%962, %963) /* ty=Tensor[(16, 14, 9), bool] */;
  (%964, %var_13256, %965, %var_13263, %966, %967)
}

def @func_16074(%var_16056: Tensor[(1365), float32]) -> (Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(1365), float32]) {
  %968 = @func_13236() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) */;
  %969 = cast(%var_16056, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %970 = cast(%var_16056, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %971 = reshape(%969, newshape=[455, 3]) /* ty=Tensor[(455, 3), float32] */;
  %972 = reshape(%970, newshape=[455, 3]) /* ty=Tensor[(455, 3), float32] */;
  %973 = @func_12378(%971, %972) /* ty=(Tensor[(378), float32], Tensor[(16, 16, 16), float64], Tensor[(40), bool], Tensor[(560), bool], Tensor[(455, 3), float32], Tensor[(16, 14, 9), uint32]) */;
  %974 = %968.0;
  %975 = %973.0;
  (%974, %975, %var_16056)
}

def @func_11381() -> Tensor[(378), float32] {
  %976 = @func_9567() /* ty=(Tensor[(378), float32],) */;
  %976.0
}

def @func_12073() -> (Tensor[(378), float32],) {
  %977 = @func_11706() /* ty=Tensor[(378), float32] */;
  (%977,)
}

def @func_12696() -> (Tensor[(378), float32], Tensor[(480), float32], Tensor[(378), float32], bool, bool, Tensor[(14), float32]) {
  %978 = @func_11319() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %979 = @func_9908() /* ty=(Tensor[(480), float32],) */;
  %980 = @func_9546() /* ty=(Tensor[(378), float32],) */;
  %981 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %982 = cast(meta[relay.Constant][83] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %983 = reshape(%981, newshape=[]) /* ty=bool */;
  %984 = reshape(%982, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %985 = @func_12302(%983, %984) /* ty=(Tensor[(320), bool], Tensor[(6, 10, 1), bool], bool, Tensor[(320), bool], Tensor[(14, 1, 1), float32], Tensor[(14), float32]) */;
  %986 = %978.1;
  %987 = %979.0;
  %988 = %980.0;
  %989 = %985.2;
  (%986, %987, %988, %989, False /* ty=bool */, meta[relay.Constant][83] /* ty=Tensor[(14), float32] */)
}

def @func_12033(%var_12019: uint64, %var_12020: Tensor[(6, 3, 7), uint64]) -> (Tensor[(6, 3, 7), uint64], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) {
  %990 = cast(%var_12019, dtype="uint64") /* ty=uint64 */;
  %991 = cast(%var_12020, dtype="uint64") /* ty=Tensor[(6, 3, 7), uint64] */;
  %992 = cast(meta[relay.Constant][84] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %993 = reshape(%992, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %994 = add(%990, %991) /* ty=Tensor[(6, 3, 7), uint64] */;
  %995 = @func_6118(%993) /* ty=Tensor[(4, 8, 15), float32] */;
  (%994, %995, meta[relay.Constant][84] /* ty=Tensor[(480), float32] */)
}

def @func_10747() -> (Tensor[(378), float32],) {
  %996 = @func_10662() /* ty=(Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) */;
  %997 = %996.0;
  (%997,)
}

def @func_16949() -> (Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(378), float32]) {
  %998 = @func_14494() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(128), int64]) */;
  %999 = @func_13236() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) */;
  %1000 = %998.1;
  %1001 = %999.0;
  %1002 = @func_12174() /* ty=Tensor[(378), float32] */;
  (%1000, %1001, %1002)
}

def @func_11630() -> (Tensor[(480), float32], Tensor[(378), float32], Tensor[(720), float64], Tensor[(4, 180), float64]) {
  %1003 = @func_10058() /* ty=(Tensor[(378), float32],) */;
  %1004 = cast(meta[relay.Constant][85] /* ty=Tensor[(4, 180), float64] */, dtype="float64") /* ty=Tensor[(4, 180), float64] */;
  %1005 = reshape(%1004, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %1006 = @func_8481(%1005) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %1007 = @func_11162() /* ty=Tensor[(480), float32] */;
  %1008 = %1003.0;
  %1009 = %1006.2;
  (%1007, %1008, %1009, meta[relay.Constant][85] /* ty=Tensor[(4, 180), float64] */)
}

def @func_11831() -> (Tensor[(378), float32],) {
  %1010 = @func_9981() /* ty=Tensor[(378), float32] */;
  (%1010,)
}

def @func_14635(%var_14583: Tensor[(10, 1, 15), int32], %var_14584: Tensor[(10, 1, 15), int32]) -> (Tensor[(10, ?, 15), float32], Tensor[(10, 1, 15), float64]) {
  %1011 = cast(%var_14584, dtype="bool") /* ty=Tensor[(10, 1, 15), bool] */;
  %1012 = shape_of(%var_14583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1013 = cast(%var_14583, dtype="bool") /* ty=Tensor[(10, 1, 15), bool] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1015 = equal(%1013, %1014) /* ty=Tensor[(10, ?, 15), bool] */;
  %1016 = cast(%1015, dtype="float32") /* ty=Tensor[(10, ?, 15), float32] */;
  %1017 = shape_of(%var_14583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1018 = cast(%var_14583, dtype="float32") /* ty=Tensor[(10, 1, 15), float32] */;
  %1019 = dyn.reshape(%1016, %1017, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1020 = cast(%var_14584, dtype="float64") /* ty=Tensor[(10, 1, 15), float64] */;
  %1021 = floor_mod(%1018, %1019) /* ty=Tensor[(10, ?, 15), float32] */;
  %1022 = atanh(%1020) /* ty=Tensor[(10, 1, 15), float64] */;
  (%1021, %1022)
}

def @func_11656() -> Tensor[(378), float32] {
  %1023 = @func_9567() /* ty=(Tensor[(378), float32],) */;
  %1023.0
}

def @func_16340() -> Tensor[(378), float32] {
  %1024 = @func_10747() /* ty=(Tensor[(378), float32],) */;
  %1024.0
}

def @func_3396(%var_3365: Tensor[(3, 16, 15), float64], %var_3373: Tensor[(8, 16), int64]) -> (Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) {
  %1025 = cast(%var_3365, dtype="float64") /* ty=Tensor[(3, 16, 15), float64] */;
  %1026 = cast(%var_3373, dtype="int64") /* ty=Tensor[(8, 16), int64] */;
  %1027 = cast(%var_3373, dtype="int64") /* ty=Tensor[(8, 16), int64] */;
  %1028 = cast(meta[relay.Constant][86] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %1029 = reshape(%1026, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %1030 = reshape(%1027, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %1031 = reshape(%1028, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %1032 = @func_679(%1029, %1030, %1031) /* ty=(Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) */;
  %1033 = cast(meta[relay.Constant][87] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %1034 = reshape(%1033, newshape=[10, 14, 8]) /* ty=Tensor[(10, 14, 8), float64] */;
  %1035 = @func_1667(%1034) /* ty=(Tensor[(10, 14, 8), float64], Tensor[(16, 14, 9), uint32], Tensor[(14), float32], Tensor[(14), float64], Tensor[(1800), int32]) */;
  %1036 = cast(meta[relay.Constant][88] /* ty=Tensor[(1, 624), float64] */, dtype="float64") /* ty=Tensor[(1, 624), float64] */;
  %1037 = cast(meta[relay.Constant][86] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %1038 = reshape(%1036, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %1039 = reshape(%1037, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %1040 = @func_2422(%1038, %1039) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
  %1041 = tan(%1025) /* ty=Tensor[(3, 16, 15), float64] */;
  %1042 = %1032.0;
  %1043 = %1035.4;
  %1044 = %1040.6;
  (%1041, %1042, %var_3373, meta[relay.Constant][86] /* ty=Tensor[(14), float32] */, %1043, meta[relay.Constant][87] /* ty=Tensor[(1120), float64] */, %1044, meta[relay.Constant][88] /* ty=Tensor[(1, 624), float64] */)
}

def @func_5163(%var_5152: Tensor[(10, 11, 2), bool], %var_5160: Tensor[(14), float64]) -> (Tensor[(10, 11, 2), bool], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) {
  %1045 = cast(meta[relay.Constant][89] /* ty=Tensor[(10, 11, 2), bool] */, dtype="bool") /* ty=Tensor[(10, 11, 2), bool] */;
  %1046 = shape_of(%var_5152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1047 = cast(%var_5152, dtype="bool") /* ty=Tensor[(10, 11, 2), bool] */;
  %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1049 = cast(%var_5160, dtype="float64") /* ty=Tensor[(14), float64] */;
  %1050 = reshape(%1049, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %1051 = logical_or(%1047, %1048) /* ty=Tensor[(10, 11, 2), bool] */;
  %1052 = @func_166(%1050) /* ty=Tensor[(14, 1, 1), float64] */;
  (%1051, %1052, %var_5160)
}

def @func_967(%var_949: Tensor[(15, 15, 8), int32]) -> (Tensor[(15, 15, 8), int32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) {
  %1053 = cast(meta[relay.Constant][90] /* ty=Tensor[(15, 15, 8), int32] */, dtype="int32") /* ty=Tensor[(15, 15, 8), int32] */;
  %1054 = shape_of(%var_949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1055 = cast(%var_949, dtype="int32") /* ty=Tensor[(15, 15, 8), int32] */;
  %1056 = dyn.reshape(%1053, %1054, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1057 = cast(meta[relay.Constant][91] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %1058 = reshape(%1057, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %1059 = right_shift(%1055, %1056) /* ty=Tensor[(15, 15, 8), int32] */;
  %1060 = @func_166(%1058) /* ty=Tensor[(14, 1, 1), float64] */;
  (%1059, %1060, meta[relay.Constant][91] /* ty=Tensor[(14), float64] */)
}

def @func_11041() -> Tensor[(378), float32] {
  @func_10278() /* ty=Tensor[(378), float32] */
}

def @func_12242() -> (Tensor[(378), float32],) {
  %1061 = @func_9416() /* ty=Tensor[(378), float32] */;
  (%1061,)
}

def @func_16181(%var_16171: Tensor[(132, 12), float64]) -> (Tensor[(378), float32], Tensor[(16, 11, 9), float64], Tensor[(132, 12), int32]) {
  %1062 = @func_15468() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %1063 = cast(meta[relay.Constant][92] /* ty=Tensor[(132, 12), float64] */, dtype="float64") /* ty=Tensor[(132, 12), float64] */;
  %1064 = reshape(%1063, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float64] */;
  %1065 = @func_2825(%1064) /* ty=(Tensor[(16, 11, 9), float64], Tensor[(14), float32], Tensor[(128), int64], Tensor[(14), float32]) */;
  %1066 = cast(%var_16171, dtype="int32") /* ty=Tensor[(132, 12), int32] */;
  %1067 = shape_of(meta[relay.Constant][92] /* ty=Tensor[(132, 12), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1068 = cast(meta[relay.Constant][92] /* ty=Tensor[(132, 12), float64] */, dtype="int32") /* ty=Tensor[(132, 12), int32] */;
  %1069 = dyn.reshape(%1066, %1067, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %1070 = %1062.0;
  %1071 = %1065.0;
  %1072 = bitwise_xor(%1068, %1069) /* ty=Tensor[(132, 12), int32] */;
  (%1070, %1071, %1072)
}

def @func_11162() -> Tensor[(480), float32] {
  %1073 = @func_9776() /* ty=(Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) */;
  %1073.2
}

def @func_17293() -> (Tensor[(378), float32],) {
  %1074 = @func_16340() /* ty=Tensor[(378), float32] */;
  (%1074,)
}

def @func_9062() -> (Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) {
  %1075 = cast(meta[relay.Constant][93] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %1076 = reshape(%1075, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), float32] */;
  %1077 = @func_8260(%1076) /* ty=(Tensor[(9, 7, 6), float32],) */;
  %1078 = cast(meta[relay.Constant][94] /* ty=Tensor[(10, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %1079 = sin(%1078) /* ty=Tensor[(10, 13, 8), float32] */;
  %1080 = cast(meta[relay.Constant][95] /* ty=Tensor[(10, 13, 8), float32] */, dtype="uint32") /* ty=Tensor[(10, 13, 8), uint32] */;
  %1081 = shape_of(%1079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1082 = cast(%1079, dtype="uint32") /* ty=Tensor[(10, 13, 8), uint32] */;
  %1083 = dyn.reshape(%1080, %1081, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1084 = cast(meta[relay.Constant][96] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %1085 = reshape(%1084, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %1086 = %1077.0;
  %1087 = multiply(%1082, %1083) /* ty=Tensor[(10, 13, 8), uint32] */;
  %1088 = @func_166(%1085) /* ty=Tensor[(14, 1, 1), float64] */;
  (%1086, meta[relay.Constant][93] /* ty=Tensor[(378), float32] */, %1087, %1088, meta[relay.Constant][96] /* ty=Tensor[(14), float64] */)
}

def @func_16887() -> (Tensor[(480), float32], Tensor[(480), float32]) {
  %1089 = @func_16370() /* ty=Tensor[(480), float32] */;
  %1090 = @func_11162() /* ty=Tensor[(480), float32] */;
  (%1089, %1090)
}

def @func_12378(%var_12339: Tensor[(455, 3), float32], %var_12353: Tensor[(455, 3), float32]) -> (Tensor[(378), float32], Tensor[(16, 16, 16), float64], Tensor[(40), bool], Tensor[(560), bool], Tensor[(455, 3), float32], Tensor[(16, 14, 9), uint32]) {
  %1091 = @func_10747() /* ty=(Tensor[(378), float32],) */;
  %1092 = cast(%var_12339, dtype="float32") /* ty=Tensor[(455, 3), float32] */;
  %1093 = cast(meta[relay.Constant][97] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %1094 = cast(meta[relay.Constant][98] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %1095 = reshape(%1092, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float32] */;
  %1096 = reshape(%1093, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %1097 = reshape(%1094, newshape=[40, 14]) /* ty=Tensor[(40, 14), bool] */;
  %1098 = @func_5512(%1095, %1096, %1097) /* ty=(Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(16, 16, 16), float64], Tensor[(4096), float64], Tensor[(5, 12, ?), bool], uint16, Tensor[(13, 15, 7), float32], Tensor[(13, 15, 7), int64], Tensor[(1800), int32], Tensor[(720), float64], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(40, 14), bool], Tensor[(14, 1, 1), float64], Tensor[(13, 15, 7), float32]) */;
  %1099 = cast(%var_12353, dtype="float32") /* ty=Tensor[(455, 3), float32] */;
  %1100 = shape_of(%var_12339, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1101 = cast(%var_12339, dtype="float32") /* ty=Tensor[(455, 3), float32] */;
  %1102 = dyn.reshape(%1099, %1100, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1103 = %1091.0;
  %1104 = %1098.3;
  %1105 = mod(%1101, %1102) /* ty=Tensor[(455, 3), float32] */;
  %1106 = @func_10026() /* ty=Tensor[(16, 14, 9), uint32] */;
  (%1103, %1104, meta[relay.Constant][97] /* ty=Tensor[(40), bool] */, meta[relay.Constant][98] /* ty=Tensor[(560), bool] */, %1105, %1106)
}

def @func_16370() -> Tensor[(480), float32] {
  %1107 = @func_12696() /* ty=(Tensor[(378), float32], Tensor[(480), float32], Tensor[(378), float32], bool, bool, Tensor[(14), float32]) */;
  %1107.1
}

def @func_12302(%var_12275: bool, %var_12287: Tensor[(14), float32]) -> (Tensor[(320), bool], Tensor[(6, 10, 1), bool], bool, Tensor[(320), bool], Tensor[(14, 1, 1), float32], Tensor[(14), float32]) {
  %1108 = @func_11872() /* ty=(Tensor[(480), float32], Tensor[(378), float32], Tensor[(320), bool]) */;
  %1109 = cast(%var_12275, dtype="bool") /* ty=bool */;
  %1110 = reshape(%1109, newshape=[]) /* ty=bool */;
  %1111 = @func_11427() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(720), float64], Tensor[(126, 3), float32], Tensor[(64, 2), int64], Tensor[(16, 5, 4), bool], Tensor[(320), bool]) */;
  %1112 = cast(%var_12287, dtype="float32") /* ty=Tensor[(14), float32] */;
  %1113 = reshape(%1112, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
  %1114 = @func_540(%1113) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
  %1115 = %1108.2;
  %1116 = @func_7500(%1110) /* ty=Tensor[(6, 10, 1), bool] */;
  %1117 = %1111.5;
  %1118 = %1114.0;
  (%1115, %1116, %var_12275, %1117, %1118, %var_12287)
}

def @func_10381() -> (Tensor[(720), float64], Tensor[(378), float64]) {
  %1119 = @func_10058() /* ty=(Tensor[(378), float32],) */;
  %1120 = %1119.0;
  %1121 = cast(%1120, dtype="float64") /* ty=Tensor[(378), float64] */;
  %1122 = @func_10041() /* ty=Tensor[(720), float64] */;
  %1123 = rsqrt(%1121) /* ty=Tensor[(378), float64] */;
  (%1122, %1123)
}

def @func_9842(%var_9819: Tensor[(720, 1), float64]) -> (Tensor[(378), float32], Tensor[(9, 7, 6), float32], Tensor[(128), int64], Tensor[(720, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(624), float64], Tensor[(14), float32], Tensor[(14), float64]) {
  %1124 = @func_9776() /* ty=(Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) */;
  %1125 = %1124.0;
  %1126 = cast(%1125, dtype="float32") /* ty=Tensor[(378), float32] */;
  %1127 = reshape(%1126, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), float32] */;
  %1128 = @func_8260(%1127) /* ty=(Tensor[(9, 7, 6), float32],) */;
  %1129 = cast(%var_9819, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %1130 = cast(meta[relay.Constant][99] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %1131 = reshape(%1129, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %1132 = reshape(%1130, newshape=[8, 16]) /* ty=Tensor[(8, 16), int64] */;
  %1133 = @func_3396(%1131, %1132) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) */;
  %1134 = cast(meta[relay.Constant][100] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %1135 = cast(meta[relay.Constant][101] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %1136 = reshape(%1134, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %1137 = reshape(%1135, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %1138 = @func_2422(%1136, %1137) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
  %1139 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %1140 = %1128.0;
  %1141 = %1133.6;
  %1142 = %1138.5;
  %1143 = %1139.4;
  (%1125, %1140, %1141, %var_9819, meta[relay.Constant][99] /* ty=Tensor[(128), int64] */, %1142, meta[relay.Constant][100] /* ty=Tensor[(624), float64] */, meta[relay.Constant][101] /* ty=Tensor[(14), float32] */, %1143)
}

def @func_8886(%var_8855: Tensor[(6, 8, 4), float64], %var_8859: Tensor[(280), int32], %var_8876: Tensor[(32, 4), int64], %var_8879: Tensor[(4096), float64]) -> (Tensor[(6, 8, 4), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(32, 4), int64], Tensor[(16, 16, 16), float64], Tensor[(4096), float64]) {
  %1144 = cast(%var_8855, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %1145 = cast(%var_8859, dtype="int32") /* ty=Tensor[(280), int32] */;
  %1146 = cast(%var_8859, dtype="int32") /* ty=Tensor[(280), int32] */;
  %1147 = reshape(%1145, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %1148 = reshape(%1146, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %1149 = @func_7409(%1147, %1148) /* ty=(Tensor[(5, 8, 7), int32],) */;
  %1150 = cast(meta[relay.Constant][102] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %1151 = cast(%var_8876, dtype="int64") /* ty=Tensor[(32, 4), int64] */;
  %1152 = reshape(%1150, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), float64] */;
  %1153 = reshape(%1151, newshape=[128]) /* ty=Tensor[(128), int64] */;
  %1154 = @func_1041(%1152, %1153) /* ty=(Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) */;
  %1155 = cast(%var_8879, dtype="float64") /* ty=Tensor[(4096), float64] */;
  %1156 = reshape(%1155, newshape=[16, 16, 16]) /* ty=Tensor[(16, 16, 16), float64] */;
  %1157 = exp(%1144) /* ty=Tensor[(6, 8, 4), float64] */;
  %1158 = %1149.0;
  %1159 = %1154.2;
  %1160 = @func_4145(%1156) /* ty=Tensor[(16, 16, 16), float64] */;
  (%1157, %1158, %var_8859, %1159, meta[relay.Constant][102] /* ty=Tensor[(624), float64] */, %var_8876, %1160, %var_8879)
}

def @func_12840() -> (Tensor[(378), float32],) {
  %1161 = @func_11941() /* ty=Tensor[(378), float32] */;
  (%1161,)
}

def @func_14843() -> (Tensor[(378), float32],) {
  %1162 = @func_10211() /* ty=Tensor[(378), float32] */;
  (%1162,)
}

def @func_11479(%var_11437: Tensor[(2, 312), float64], %var_11458: Tensor[(2, 312), float64]) -> (Tensor[(378), float32], Tensor[(128), int64], Tensor[(14), float32], Tensor[(378), float32], Tensor[(2, 312), int8], Tensor[(378), float32]) {
  %1163 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %1164 = cast(%var_11437, dtype="float64") /* ty=Tensor[(2, 312), float64] */;
  %1165 = cast(meta[relay.Constant][103] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %1166 = reshape(%1164, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %1167 = reshape(%1165, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %1168 = @func_2422(%1166, %1167) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
  %1169 = @func_9567() /* ty=(Tensor[(378), float32],) */;
  %1170 = cast(%var_11458, dtype="int8") /* ty=Tensor[(2, 312), int8] */;
  %1171 = shape_of(%var_11437, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1172 = cast(%var_11437, dtype="int8") /* ty=Tensor[(2, 312), int8] */;
  %1173 = dyn.reshape(%1170, %1171, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %1174 = @func_11146() /* ty=(Tensor[(378), float32],) */;
  %1175 = %1163.1;
  %1176 = %1168.1;
  %1177 = %1169.0;
  %1178 = right_shift(%1172, %1173) /* ty=Tensor[(2, 312), int8] */;
  %1179 = %1174.0;
  (%1175, %1176, meta[relay.Constant][103] /* ty=Tensor[(14), float32] */, %1177, %1178, %1179)
}

def @func_13428(%var_13393: Tensor[(16, 10, 8), bool], %var_13394: Tensor[(16, 10, 8), bool]) -> (Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(16, 10, 8), int32]) {
  %1180 = cast(meta[relay.Constant][104] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %1181 = reshape(%1180, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %1182 = cast(%var_13393, dtype="float64") /* ty=Tensor[(16, 10, 8), float64] */;
  %1183 = cosh(%1182) /* ty=Tensor[(16, 10, 8), float64] */;
  %1184 = cast(%var_13394, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %1185 = shape_of(%var_13393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1186 = cast(%var_13393, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %1187 = dyn.reshape(%1184, %1185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1188 = logical_or(%1186, %1187) /* ty=Tensor[(16, 10, 8), bool] */;
  %1189 = cast(%1188, dtype="int32") /* ty=Tensor[(16, 10, 8), int32] */;
  %1190 = shape_of(%1183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1191 = cast(%1183, dtype="int32") /* ty=Tensor[(16, 10, 8), int32] */;
  %1192 = dyn.reshape(%1189, %1190, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1193 = @func_6118(%1181) /* ty=Tensor[(4, 8, 15), float32] */;
  %1194 = subtract(%1191, %1192) /* ty=Tensor[(16, 10, 8), int32] */;
  (%1193, meta[relay.Constant][104] /* ty=Tensor[(480), float32] */, %1194)
}

def @func_8481(%var_8467: Tensor[(720), float64]) -> (Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) {
  %1195 = cast(meta[relay.Constant][105] /* ty=Tensor[(15, 2, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 6), float32] */;
  %1196 = rsqrt(%1195) /* ty=Tensor[(15, 2, 6), float32] */;
  %1197 = cast(%1196, dtype="uint8") /* ty=Tensor[(15, 2, 6), uint8] */;
  %1198 = shape_of(meta[relay.Constant][105] /* ty=Tensor[(15, 2, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1199 = cast(meta[relay.Constant][105] /* ty=Tensor[(15, 2, 6), float32] */, dtype="uint8") /* ty=Tensor[(15, 2, 6), uint8] */;
  %1200 = dyn.reshape(%1197, %1198, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1201 = cast(%var_8467, dtype="float64") /* ty=Tensor[(720), float64] */;
  %1202 = cast(meta[relay.Constant][106] /* ty=Tensor[(64, 2), int64] */, dtype="int64") /* ty=Tensor[(64, 2), int64] */;
  %1203 = reshape(%1201, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %1204 = reshape(%1202, newshape=[8, 16]) /* ty=Tensor[(8, 16), int64] */;
  %1205 = @func_3396(%1203, %1204) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) */;
  %1206 = cast(meta[relay.Constant][107] /* ty=Tensor[(126, 3), float32] */, dtype="float32") /* ty=Tensor[(126, 3), float32] */;
  %1207 = reshape(%1206, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), float32] */;
  %1208 = @func_8260(%1207) /* ty=(Tensor[(9, 7, 6), float32],) */;
  %1209 = bitwise_xor(%1199, %1200) /* ty=Tensor[(15, 2, 6), uint8] */;
  %1210 = %1205.5;
  %1211 = %1208.0;
  (%1209, %1210, %var_8467, meta[relay.Constant][106] /* ty=Tensor[(64, 2), int64] */, %1211, meta[relay.Constant][107] /* ty=Tensor[(126, 3), float32] */)
}

def @func_7409(%var_7392: Tensor[(5, 8, 7), int32], %var_7393: Tensor[(5, 8, 7), int32]) -> (Tensor[(5, 8, 7), int32],) {
  %1212 = cast(%var_7393, dtype="int32") /* ty=Tensor[(5, 8, 7), int32] */;
  %1213 = shape_of(%var_7392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1214 = cast(%var_7392, dtype="int32") /* ty=Tensor[(5, 8, 7), int32] */;
  %1215 = dyn.reshape(%1212, %1213, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1216 = left_shift(%1214, %1215) /* ty=Tensor[(5, 8, 7), int32] */;
  (%1216,)
}

def @func_16689() -> Tensor[(378), float32] {
  %1217 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %1217.0
}

def @func_11515() -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 8, 78), float32]) {
  %1218 = @func_9567() /* ty=(Tensor[(378), float32],) */;
  %1219 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
  %1220 = %1219.1;
  %1221 = cast(%1220, dtype="float32") /* ty=Tensor[(14, 8, 78), float32] */;
  %1222 = tan(%1221) /* ty=Tensor[(14, 8, 78), float32] */;
  %1223 = cast(%1222, dtype="float32") /* ty=Tensor[(14, 8, 78), float32] */;
  %1224 = %1218.0;
  %1225 = @func_9981() /* ty=Tensor[(378), float32] */;
  %1226 = log10(%1223) /* ty=Tensor[(14, 8, 78), float32] */;
  (%1224, %1225, %1226)
}

def @func_12174() -> Tensor[(378), float32] {
  @func_11381() /* ty=Tensor[(378), float32] */
}

def @func_17683(%var_17664: Tensor[(64, 2), float32]) -> (Tensor[(64, 2), bool], Tensor[(480), float32], Tensor[(378), float32]) {
  %1227 = @func_15739() /* ty=(Tensor[(64, 2), float32],) */;
  %1228 = %1227.0;
  %1229 = cast(%var_17664, dtype="bool") /* ty=Tensor[(64, 2), bool] */;
  %1230 = shape_of(%1228, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1231 = cast(%1228, dtype="bool") /* ty=Tensor[(64, 2), bool] */;
  %1232 = dyn.reshape(%1229, %1230, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1233 = @func_9776() /* ty=(Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) */;
  %1234 = @func_11760() /* ty=(Tensor[(378), float32],) */;
  %1235 = greater(%1231, %1232) /* ty=Tensor[(64, 2), bool] */;
  %1236 = %1233.2;
  %1237 = %1234.0;
  (%1235, %1236, %1237)
}

def @func_10619() -> Tensor[(14), float64] {
  %1238 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %1238.4
}

def @func_7500(%var_7492: bool) -> Tensor[(6, 10, 1), bool] {
  %1239 = cast(%var_7492, dtype="bool") /* ty=bool */;
  %1240 = cast(meta[relay.Constant][108] /* ty=Tensor[(6, 10, 1), bool] */, dtype="bool") /* ty=Tensor[(6, 10, 1), bool] */;
  logical_and(%1239, %1240) /* ty=Tensor[(6, 10, 1), bool] */
}

def @func_134(%var_123: Tensor[(11, 5, 7), int64], %var_124: Tensor[(11, 5, 7), int64]) -> Tensor[(11, 5, 7), int64] {
  %1241 = cast(%var_124, dtype="int64") /* ty=Tensor[(11, 5, 7), int64] */;
  %1242 = shape_of(%var_123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1243 = cast(%var_123, dtype="int64") /* ty=Tensor[(11, 5, 7), int64] */;
  %1244 = dyn.reshape(%1241, %1242, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%1243, %1244) /* ty=Tensor[(11, 5, 7), int64] */
}

def @func_17164() -> (Tensor[(378), float32], Tensor[(16, 14, 9), float64], Tensor[(378), float32], Tensor[(480), float32], Tensor[(378), float32], Tensor[(128), int64]) {
  %1245 = @func_16926() /* ty=(Tensor[(624), float64], Tensor[(16, 14, 9), float64]) */;
  %1246 = @func_16771() /* ty=(Tensor[(480), float32],) */;
  %1247 = @func_11706() /* ty=Tensor[(378), float32] */;
  %1248 = %1245.1;
  %1249 = @func_11656() /* ty=Tensor[(378), float32] */;
  %1250 = %1246.0;
  %1251 = @func_15385() /* ty=Tensor[(378), float32] */;
  %1252 = @func_14039() /* ty=Tensor[(128), int64] */;
  (%1247, %1248, %1249, %1250, %1251, %1252)
}

def @func_15693(%var_15665: Tensor[(7, 10, 10), int8], %var_15666: Tensor[(7, 10, 10), int8], %var_15679: Tensor[(720), float32]) -> (Tensor[(7, 10, 10), int8], Tensor[(720, ?), int64], Tensor[(720), float32], Tensor[(10, 13, 8), uint32]) {
  %1253 = cast(%var_15666, dtype="int8") /* ty=Tensor[(7, 10, 10), int8] */;
  %1254 = shape_of(%var_15665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1255 = cast(%var_15665, dtype="int8") /* ty=Tensor[(7, 10, 10), int8] */;
  %1256 = dyn.reshape(%1253, %1254, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1257 = cast(%var_15679, dtype="float32") /* ty=Tensor[(720), float32] */;
  %1258 = reshape(%1257, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
  %1259 = @func_11238(%1258) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(9, 7, 6), float32], Tensor[(720, ?), int64], Tensor[(64, 2), int64], Tensor[(720, ?), uint64]) */;
  %1260 = @func_9895() /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */;
  %1261 = logical_xor(%1255, %1256) /* ty=Tensor[(7, 10, 10), int8] */;
  %1262 = %1259.2;
  %1263 = %1260.0;
  (%1261, %1262, %var_15679, %1263)
}

def @func_12771(%var_12723: Tensor[(624), float64], %var_12750: Tensor[(1, 385), int64]) -> (Tensor[(128), float64], Tensor[(3, 13, 16), float64], Tensor[(624), float64], Tensor[(378), float32], Tensor[(5, 8, 7), int32], Tensor[(10, 28), int32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) {
  %1264 = @func_10641() /* ty=(Tensor[(128), int64],) */;
  %1265 = %1264.0;
  %1266 = cast(%1265, dtype="float64") /* ty=Tensor[(128), float64] */;
  %1267 = cast(%var_12723, dtype="float64") /* ty=Tensor[(624), float64] */;
  %1268 = sigmoid(%1266) /* ty=Tensor[(128), float64] */;
  %1269 = cast(%1268, dtype="int64") /* ty=Tensor[(128), int64] */;
  %1270 = reshape(%1267, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), float64] */;
  %1271 = reshape(%1269, newshape=[128]) /* ty=Tensor[(128), int64] */;
  %1272 = @func_1041(%1270, %1271) /* ty=(Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) */;
  %1273 = cast(meta[relay.Constant][109] /* ty=Tensor[(10, 28), int32] */, dtype="int32") /* ty=Tensor[(10, 28), int32] */;
  %1274 = cast(%var_12750, dtype="int64") /* ty=Tensor[(1, 385), int64] */;
  %1275 = cast(meta[relay.Constant][110] /* ty=Tensor[(1800), int32] */, dtype="int32") /* ty=Tensor[(1800), int32] */;
  %1276 = cast(meta[relay.Constant][111] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1277 = reshape(%1273, newshape=[280]) /* ty=Tensor[(280), int32] */;
  %1278 = reshape(%1274, newshape=[385]) /* ty=Tensor[(385), int64] */;
  %1279 = reshape(%1275, newshape=[1800]) /* ty=Tensor[(1800), int32] */;
  %1280 = reshape(%1276, newshape=[]) /* ty=uint16 */;
  %1281 = @func_9328(%1277, %1278, %1279, %1280) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14), float64], Tensor[(1800), int32], Tensor[(5, 12, ?), bool], uint16) */;
  %1282 = %1272.0;
  %1283 = @func_10242() /* ty=Tensor[(378), float32] */;
  %1284 = %1281.2;
  (%1268, %1282, %var_12723, %1283, %1284, meta[relay.Constant][109] /* ty=Tensor[(10, 28), int32] */, %var_12750, meta[relay.Constant][110] /* ty=Tensor[(1800), int32] */, meta[relay.Constant][111] /* ty=uint16 */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6118(%var_6105: Tensor[(4, 8, 15), float32]) -> Tensor[(4, 8, 15), float32] {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
  %1 = cast(%var_6105, dtype="float32") /* ty=Tensor[(4, 8, 15), float32] */;
  floor_divide(%0, %1) /* ty=Tensor[(4, 8, 15), float32] */
}

def @func_17246() -> (Tensor[(720), float64], Tensor[(378), float32], Tensor[(378), float32]) {
  @func_17244() /* ty=(Tensor[(720), float64], Tensor[(378), float32], Tensor[(378), float32]) */
}

def @func_11269() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  %2 = @func_10058() /* ty=(Tensor[(378), float32],) */;
  %3 = @func_10278() /* ty=Tensor[(378), float32] */;
  %4 = %2.0;
  (%3, %4)
}

def @main(%var_18047: Tensor[(8, 60), float32]) -> (Tensor[(378), float64], Tensor[(4, 8, 15), float64], Tensor[(378), float32], Tensor[(8, 60), bool]) {
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 60), float32] */, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %6 = reshape(%5, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %7 = @func_10933(%6) /* ty=(Tensor[(4, 8, 15), float64], Tensor[(720), float64], Tensor[(720), float64]) */;
  %8 = @func_14211() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
  %9 = cast(%var_18047, dtype="bool") /* ty=Tensor[(8, 60), bool] */;
  %10 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(8, 60), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 60), float32] */, dtype="bool") /* ty=Tensor[(8, 60), bool] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %13 = @func_16403() /* ty=Tensor[(378), float64] */;
  %14 = %7.0;
  %15 = %8.1;
  %16 = greater_equal(%11, %12) /* ty=Tensor[(8, 60), bool] */;
  (%13, %14, %15, %16)
}

def @func_13238() -> (Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) {
  @func_13236() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) */
}

def @func_14317(%var_14304: Tensor[(1, 40), bool]) -> (Tensor[(480), float32], Tensor[(378), float32], Tensor[(4, 14, 10), bool], Tensor[(120), float64], Tensor[(1, 40), bool]) {
  %17 = @func_13970() /* ty=(Tensor[(378), float32],) */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %19 = cast(%var_14304, dtype="bool") /* ty=Tensor[(1, 40), bool] */;
  %20 = reshape(%18, newshape=[8, 5, 3]) /* ty=Tensor[(8, 5, 3), float64] */;
  %21 = reshape(%19, newshape=[20, 2]) /* ty=Tensor[(20, 2), bool] */;
  %22 = @func_6838(%20, %21) /* ty=(Tensor[(8, 5, 3), float64], Tensor[(4, 14, 10), bool], Tensor[(20, 2), bool], Tensor[(560), bool]) */;
  %23 = @func_13464() /* ty=Tensor[(480), float32] */;
  %24 = %17.0;
  %25 = %22.1;
  (%23, %24, %25, meta[relay.Constant][2] /* ty=Tensor[(120), float64] */, %var_14304)
}

def @func_10242() -> Tensor[(378), float32] {
  @func_10211() /* ty=Tensor[(378), float32] */
}

def @func_12501() -> (Tensor[(128), int64], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) {
  %31 = fn () -> (Tensor[(128), int64], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) {
    %26 = @func_10641() /* ty=(Tensor[(128), int64],) */;
    %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %28 = reshape(%27, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
    %29 = %26.0;
    %30 = @func_6118(%28) /* ty=Tensor[(4, 8, 15), float32] */;
    (%29, %30, meta[relay.Constant][3] /* ty=Tensor[(480), float32] */)
  };
  %31() /* ty=(Tensor[(128), int64], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */
}

def @func_6121(%var_6119: Tensor[(4, 8, 15), float32]) -> Tensor[(4, 8, 15), float32] {
  @func_6118(%var_6119) /* ty=Tensor[(4, 8, 15), float32] */
}

def @func_17026(%var_17024: Tensor[(1800), int32], %var_17025: uint16) -> (Tensor[(378), float32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) {
  @func_17022(%var_17024, %var_17025) /* ty=(Tensor[(378), float32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) */
}

def @func_15279(%var_15277: Tensor[(14), float32], %var_15278: Tensor[(320), bool]) -> (Tensor[(480), float32], Tensor[(6, 10, 1), bool], bool, Tensor[(14), float32], Tensor[(128), int64], Tensor[(378), float32], Tensor[(2, 160), bool], Tensor[(320), bool]) {
  %47 = fn (%var_15241: Tensor[(14), float32], %var_15270: Tensor[(320), bool]) -> (Tensor[(480), float32], Tensor[(6, 10, 1), bool], bool, Tensor[(14), float32], Tensor[(128), int64], Tensor[(378), float32], Tensor[(2, 160), bool], Tensor[(320), bool]) {
    %32 = @func_12500() /* ty=(Tensor[(128), int64], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */;
    %33 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %34 = cast(%var_15241, dtype="float32") /* ty=Tensor[(14), float32] */;
    %35 = reshape(%33, newshape=[]) /* ty=bool */;
    %36 = reshape(%34, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %37 = @func_12302(%35, %36) /* ty=(Tensor[(320), bool], Tensor[(6, 10, 1), bool], bool, Tensor[(320), bool], Tensor[(14, 1, 1), float32], Tensor[(14), float32]) */;
    %38 = @func_10641() /* ty=(Tensor[(128), int64],) */;
    %39 = cast(%var_15270, dtype="bool") /* ty=Tensor[(320), bool] */;
    %40 = reshape(%39, newshape=[2, 160]) /* ty=Tensor[(2, 160), bool] */;
    %41 = @func_9658(%40) /* ty=(Tensor[(378), float32], Tensor[(16, 5, 4), bool], Tensor[(2, 160), bool], Tensor[(5, 8, 7), int16]) */;
    %42 = %32.2;
    %43 = %37.1;
    %44 = %38.0;
    %45 = @func_10242() /* ty=Tensor[(378), float32] */;
    %46 = %41.2;
    (%42, %43, True /* ty=bool */, %var_15241, %44, %45, %46, %var_15270)
  };
  %47(%var_15277, %var_15278) /* ty=(Tensor[(480), float32], Tensor[(6, 10, 1), bool], bool, Tensor[(14), float32], Tensor[(128), int64], Tensor[(378), float32], Tensor[(2, 160), bool], Tensor[(320), bool]) */
}

def @func_10779() -> Tensor[(378), float32] {
  %48 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %48.0
}

def @func_13811() -> (Tensor[(480), float32], Tensor[(720), float64], Tensor[(9, 7, 6), float32]) {
  %56 = fn () -> (Tensor[(480), float32], Tensor[(720), float64], Tensor[(9, 7, 6), float32]) {
    %49 = @func_10381() /* ty=(Tensor[(720), float64], Tensor[(378), float64]) */;
    %50 = %49.0;
    %51 = cast(%50, dtype="float32") /* ty=Tensor[(720), float32] */;
    %52 = reshape(%51, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
    %53 = @func_11238(%52) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(9, 7, 6), float32], Tensor[(720, ?), int64], Tensor[(64, 2), int64], Tensor[(720, ?), uint64]) */;
    %54 = @func_11162() /* ty=Tensor[(480), float32] */;
    %55 = %53.1;
    (%54, %50, %55)
  };
  %56() /* ty=(Tensor[(480), float32], Tensor[(720), float64], Tensor[(9, 7, 6), float32]) */
}

def @func_7502(%var_7501: bool) -> Tensor[(6, 10, 1), bool] {
  %59 = fn (%var_7492: bool) -> Tensor[(6, 10, 1), bool] {
    %57 = cast(%var_7492, dtype="bool") /* ty=bool */;
    %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 10, 1), bool] */, dtype="bool") /* ty=Tensor[(6, 10, 1), bool] */;
    logical_and(%57, %58) /* ty=Tensor[(6, 10, 1), bool] */
  };
  %59(%var_7501) /* ty=Tensor[(6, 10, 1), bool] */
}

def @func_16461() -> (Tensor[(4, 8, 15), float32], Tensor[(378), float32]) {
  %60 = @func_14829() /* ty=(Tensor[(4, 8, 15), float32],) */;
  %61 = @func_14908() /* ty=(Tensor[(378), float32], Tensor[(7, 195), float32], Tensor[(600), float32], Tensor[(624), float64]) */;
  %62 = %60.0;
  %63 = %61.0;
  (%62, %63)
}

def @func_10126() -> (Tensor[(378), float32], Tensor[(64, 2), int64]) {
  @func_10124() /* ty=(Tensor[(378), float32], Tensor[(64, 2), int64]) */
}

def @func_970(%var_968: Tensor[(15, 15, 8), int32]) -> (Tensor[(15, 15, 8), int32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) {
  @func_967(%var_968) /* ty=(Tensor[(15, 15, 8), int32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */
}

def @func_10060() -> (Tensor[(378), float32],) {
  @func_10058() /* ty=(Tensor[(378), float32],) */
}

def @func_16263() -> (Tensor[(378), float32], Tensor[(14), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(11, 5, 7), int64], Tensor[(540), uint32], Tensor[(385), int64], Tensor[(14), float64], Tensor[(220), bool]) {
  @func_16261() /* ty=(Tensor[(378), float32], Tensor[(14), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(11, 5, 7), int64], Tensor[(540), uint32], Tensor[(385), int64], Tensor[(14), float64], Tensor[(220), bool]) */
}

def @func_14436(%var_14432: Tensor[(14, 8, 78), float32], %var_14433: Tensor[(4, 48), float64], %var_14434: Tensor[(280, 2), bool], %var_14435: Tensor[(1, 14), float32]) -> (Tensor[(14, 8, 78), int16], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(4096), float64], Tensor[(4, 48), bool], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(280, 2), bool], Tensor[(11, 5, 7), int64], Tensor[(1, 14), float32]) {
  %100 = fn (%var_14365: Tensor[(14, 8, 78), float32], %var_14413: Tensor[(4, 48), float64], %var_14419: Tensor[(280, 2), bool], %var_14422: Tensor[(1, 14), float32]) -> (Tensor[(14, 8, 78), int16], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(4096), float64], Tensor[(4, 48), bool], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(280, 2), bool], Tensor[(11, 5, 7), int64], Tensor[(1, 14), float32]) {
    %64 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
    %65 = %64.1;
    %66 = cast(%var_14365, dtype="uint16") /* ty=Tensor[(14, 8, 78), uint16] */;
    %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
    %68 = cast(%65, dtype="uint16") /* ty=Tensor[(14, 8, 78), uint16] */;
    %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %70 = left_shift(%68, %69) /* ty=Tensor[(14, 8, 78), uint16] */;
    %71 = cast(%70, dtype="int16") /* ty=Tensor[(14, 8, 78), int16] */;
    %72 = shape_of(%var_14365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%var_14365, dtype="int16") /* ty=Tensor[(14, 8, 78), int16] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 48), float64] */, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
    %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
    %77 = cast(meta[relay.Constant][7] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %78 = cast(meta[relay.Constant][8] /* ty=Tensor[(4096), float64] */, dtype="float64") /* ty=Tensor[(4096), float64] */;
    %79 = reshape(%75, newshape=[6, 8, 4]) /* ty=Tensor[(6, 8, 4), float64] */;
    %80 = reshape(%76, newshape=[280]) /* ty=Tensor[(280), int32] */;
    %81 = reshape(%77, newshape=[32, 4]) /* ty=Tensor[(32, 4), int64] */;
    %82 = reshape(%78, newshape=[4096]) /* ty=Tensor[(4096), float64] */;
    %83 = @func_8886(%79, %80, %81, %82) /* ty=(Tensor[(6, 8, 4), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(32, 4), int64], Tensor[(16, 16, 16), float64], Tensor[(4096), float64]) */;
    %84 = cast(%var_14413, dtype="bool") /* ty=Tensor[(4, 48), bool] */;
    %85 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(4, 48), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %86 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 48), float64] */, dtype="bool") /* ty=Tensor[(4, 48), bool] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %88 = cast(meta[relay.Constant][9] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
    %89 = cast(%var_14419, dtype="bool") /* ty=Tensor[(280, 2), bool] */;
    %90 = reshape(%88, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), bool] */;
    %91 = reshape(%89, newshape=[4, 14, 10]) /* ty=Tensor[(4, 14, 10), bool] */;
    %92 = cast(%var_14422, dtype="float32") /* ty=Tensor[(1, 14), float32] */;
    %93 = reshape(%92, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
    %94 = @func_540(%93) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
    %95 = subtract(%73, %74) /* ty=Tensor[(14, 8, 78), int16] */;
    %96 = %83.1;
    %97 = greater(%86, %87) /* ty=Tensor[(4, 48), bool] */;
    %98 = @func_3525(%90, %91) /* ty=Tensor[(4, 14, 10), bool] */;
    %99 = %94.1;
    (%95, %96, meta[relay.Constant][6] /* ty=Tensor[(280), int32] */, meta[relay.Constant][7] /* ty=Tensor[(128), int64] */, meta[relay.Constant][8] /* ty=Tensor[(4096), float64] */, %97, %98, meta[relay.Constant][9] /* ty=Tensor[(40), bool] */, %var_14419, %99, %var_14422)
  };
  %100(%var_14432, %var_14433, %var_14434, %var_14435) /* ty=(Tensor[(14, 8, 78), int16], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(4096), float64], Tensor[(4, 48), bool], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(280, 2), bool], Tensor[(11, 5, 7), int64], Tensor[(1, 14), float32]) */
}

def @func_15926() -> (Tensor[(14), float32], Tensor[(128), int64]) {
  %105 = fn () -> (Tensor[(14), float32], Tensor[(128), int64]) {
    %101 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
    %102 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
    %103 = %101.2;
    %104 = %102.0;
    (%103, %104)
  };
  %105() /* ty=(Tensor[(14), float32], Tensor[(128), int64]) */
}

def @func_11043() -> Tensor[(378), float32] {
  @func_11041() /* ty=Tensor[(378), float32] */
}

def @func_16261() -> (Tensor[(378), float32], Tensor[(14), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(11, 5, 7), int64], Tensor[(540), uint32], Tensor[(385), int64], Tensor[(14), float64], Tensor[(220), bool]) {
  %106 = @func_14843() /* ty=(Tensor[(378), float32],) */;
  %107 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %108 = cast(meta[relay.Constant][10] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %109 = reshape(%108, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %110 = @func_8481(%109) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %111 = cast(meta[relay.Constant][11] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %112 = cast(meta[relay.Constant][12] /* ty=Tensor[(385), int64] */, dtype="int64") /* ty=Tensor[(385), int64] */;
  %113 = reshape(%111, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), uint32] */;
  %114 = reshape(%112, newshape=[385]) /* ty=Tensor[(385), int64] */;
  %115 = @func_15587(%113, %114) /* ty=(Tensor[(6, 6, 15), uint32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) */;
  %116 = cast(meta[relay.Constant][13] /* ty=Tensor[(220), bool] */, dtype="bool") /* ty=Tensor[(220), bool] */;
  %117 = %107.2;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(14), float64] */;
  %119 = reshape(%116, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), bool] */;
  %120 = reshape(%118, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %121 = @func_5163(%119, %120) /* ty=(Tensor[(10, 11, 2), bool], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %122 = %106.0;
  %123 = %110.2;
  %124 = %115.1;
  %125 = %121.2;
  (%122, %117, %123, meta[relay.Constant][10] /* ty=Tensor[(720), float64] */, %124, meta[relay.Constant][11] /* ty=Tensor[(540), uint32] */, meta[relay.Constant][12] /* ty=Tensor[(385), int64] */, %125, meta[relay.Constant][13] /* ty=Tensor[(220), bool] */)
}

def @func_9485() -> (Tensor[(128), int64], Tensor[(14, 8, 78), float32]) {
  %137 = fn () -> (Tensor[(128), int64], Tensor[(14, 8, 78), float32]) {
    %126 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 78), float64] */, dtype="float64") /* ty=Tensor[(8, 78), float64] */;
    %127 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
    %128 = %127.3;
    %129 = cast(%128, dtype="float32") /* ty=Tensor[(14, 1, 1), float32] */;
    %130 = reshape(%126, newshape=[624]) /* ty=Tensor[(624), float64] */;
    %131 = reshape(%129, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %132 = @func_2422(%130, %131) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
    %133 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 78), float64] */, dtype="float32") /* ty=Tensor[(8, 78), float32] */;
    %134 = cast(%128, dtype="float32") /* ty=Tensor[(14, 1, 1), float32] */;
    %135 = %132.1;
    %136 = add(%133, %134) /* ty=Tensor[(14, 8, 78), float32] */;
    (%135, %136)
  };
  %137() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */
}

def @func_10573(%var_10542: Tensor[(40), bool]) -> (Tensor[(14), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float32]) {
  %138 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %139 = cast(%var_10542, dtype="bool") /* ty=Tensor[(40), bool] */;
  %140 = reshape(%139, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %141 = @func_9742(%140) /* ty=(Tensor[(378), float32], Tensor[(14), float32], Tensor[(1365), float32], Tensor[(40), bool], Tensor[(560), bool]) */;
  %142 = %138.2;
  %143 = @func_10278() /* ty=Tensor[(378), float32] */;
  %144 = %141.0;
  %145 = @func_10242() /* ty=Tensor[(378), float32] */;
  (%142, %143, %144, %var_10542, %145)
}

def @func_13681(%var_13679: uint16, %var_13680: Tensor[(14, 8, 78), float32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(5, 12, ?), bool], uint16, Tensor[(128), int64], Tensor[(1584), float64], Tensor[(14, 8, 78), bool]) {
  %173 = fn (%var_13649: uint16, %var_13660: Tensor[(14, 8, 78), float32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(5, 12, ?), bool], uint16, Tensor[(128), int64], Tensor[(1584), float64], Tensor[(14, 8, 78), bool]) {
    %146 = @func_11515() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 8, 78), float32]) */;
    %147 = cast(%var_13649, dtype="uint16") /* ty=uint16 */;
    %148 = reshape(%147, newshape=[]) /* ty=uint16 */;
    %149 = @func_4598(%148) /* ty=(Tensor[(5, 12, ?), bool],) */;
    %150 = cast(meta[relay.Constant][15] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %151 = reshape(%150, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float64] */;
    %152 = @func_2825(%151) /* ty=(Tensor[(16, 11, 9), float64], Tensor[(14), float32], Tensor[(128), int64], Tensor[(14), float32]) */;
    %153 = @func_11515() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 8, 78), float32]) */;
    %154 = %153.2;
    %155 = cast(%154, dtype="float64") /* ty=Tensor[(14, 8, 78), float64] */;
    %156 = log(%155) /* ty=Tensor[(14, 8, 78), float64] */;
    %157 = cast(%156, dtype="float32") /* ty=Tensor[(14, 8, 78), float32] */;
    %158 = cosh(%157) /* ty=Tensor[(14, 8, 78), float32] */;
    %159 = cast(%var_13660, dtype="float32") /* ty=Tensor[(14, 8, 78), float32] */;
    %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
    %161 = cast(%158, dtype="float32") /* ty=Tensor[(14, 8, 78), float32] */;
    %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %163 = floor_mod(%161, %162) /* ty=Tensor[(14, 8, 78), float32] */;
    %164 = cast(%163, dtype="bool") /* ty=Tensor[(14, 8, 78), bool] */;
    %165 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
    %166 = cast(%158, dtype="bool") /* ty=Tensor[(14, 8, 78), bool] */;
    %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %168 = @func_10779() /* ty=Tensor[(378), float32] */;
    %169 = %146.1;
    %170 = %149.0;
    %171 = %152.2;
    %172 = logical_or(%166, %167) /* ty=Tensor[(14, 8, 78), bool] */;
    (%168, %169, %170, %var_13649, %171, meta[relay.Constant][15] /* ty=Tensor[(1584), float64] */, %172)
  };
  %173(%var_13679, %var_13680) /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(5, 12, ?), bool], uint16, Tensor[(128), int64], Tensor[(1584), float64], Tensor[(14, 8, 78), bool]) */
}

def @func_9983() -> Tensor[(378), float32] {
  @func_9981() /* ty=Tensor[(378), float32] */
}

def @func_436(%var_427: Tensor[(16, 1, 9), uint32], %var_428: Tensor[(16, 14, 9), uint32]) -> (Tensor[(16, 14, 9), uint32],) {
  %174 = cast(%var_427, dtype="uint32") /* ty=Tensor[(16, 1, 9), uint32] */;
  %175 = cast(%var_428, dtype="uint32") /* ty=Tensor[(16, 14, 9), uint32] */;
  %176 = minimum(%174, %175) /* ty=Tensor[(16, 14, 9), uint32] */;
  (%176,)
}

def @func_15469() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  %180 = fn () -> (Tensor[(378), float32], Tensor[(378), float32]) {
    %177 = @func_11760() /* ty=(Tensor[(378), float32],) */;
    %178 = @func_11381() /* ty=Tensor[(378), float32] */;
    %179 = %177.0;
    (%178, %179)
  };
  %180() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */
}

def @func_9062() -> (Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) {
  %181 = cast(meta[relay.Constant][16] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %182 = reshape(%181, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), float32] */;
  %183 = @func_8260(%182) /* ty=(Tensor[(9, 7, 6), float32],) */;
  %184 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %185 = sin(%184) /* ty=Tensor[(10, 13, 8), float32] */;
  %186 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 13, 8), float32] */, dtype="uint32") /* ty=Tensor[(10, 13, 8), uint32] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="uint32") /* ty=Tensor[(10, 13, 8), uint32] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %190 = cast(meta[relay.Constant][19] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %191 = reshape(%190, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %192 = %183.0;
  %193 = multiply(%188, %189) /* ty=Tensor[(10, 13, 8), uint32] */;
  %194 = @func_166(%191) /* ty=Tensor[(14, 1, 1), float64] */;
  (%192, meta[relay.Constant][16] /* ty=Tensor[(378), float32] */, %193, %194, meta[relay.Constant][19] /* ty=Tensor[(14), float64] */)
}

def @func_11000() -> Tensor[(378), float32] {
  @func_10998() /* ty=Tensor[(378), float32] */
}

def @func_11320() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  %199 = fn () -> (Tensor[(378), float32], Tensor[(378), float32]) {
    %195 = @func_10662() /* ty=(Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) */;
    %196 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %197 = %195.0;
    %198 = %196.1;
    (%197, %198)
  };
  %199() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */
}

def @func_12638(%var_12636: Tensor[(1800), int32], %var_12637: uint16) -> (Tensor[(378), float32], Tensor[(280), int32], Tensor[(280), int32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) {
  %211 = fn (%var_12632: Tensor[(1800), int32], %var_12633: uint16) -> (Tensor[(378), float32], Tensor[(280), int32], Tensor[(280), int32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) {
    %200 = cast(meta[relay.Constant][20] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
    %201 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 385), int64] */, dtype="int64") /* ty=Tensor[(1, 385), int64] */;
    %202 = cast(%var_12632, dtype="int32") /* ty=Tensor[(1800), int32] */;
    %203 = cast(%var_12633, dtype="uint16") /* ty=uint16 */;
    %204 = reshape(%200, newshape=[280]) /* ty=Tensor[(280), int32] */;
    %205 = reshape(%201, newshape=[385]) /* ty=Tensor[(385), int64] */;
    %206 = reshape(%202, newshape=[1800]) /* ty=Tensor[(1800), int32] */;
    %207 = reshape(%203, newshape=[]) /* ty=uint16 */;
    %208 = @func_9328(%204, %205, %206, %207) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14), float64], Tensor[(1800), int32], Tensor[(5, 12, ?), bool], uint16) */;
    %209 = @func_10211() /* ty=Tensor[(378), float32] */;
    %210 = %208.3;
    (%209, %210, meta[relay.Constant][20] /* ty=Tensor[(280), int32] */, meta[relay.Constant][21] /* ty=Tensor[(1, 385), int64] */, %var_12632, %var_12633)
  };
  %211(%var_12636, %var_12637) /* ty=(Tensor[(378), float32], Tensor[(280), int32], Tensor[(280), int32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) */
}

def @func_14830() -> (Tensor[(4, 8, 15), float32],) {
  %216 = fn () -> (Tensor[(4, 8, 15), float32],) {
    %212 = @func_10594() /* ty=(Tensor[(4, 8, 15), float32],) */;
    %213 = %212.0;
    %214 = cast(%213, dtype="float32") /* ty=Tensor[(4, 8, 15), float32] */;
    %215 = sin(%214) /* ty=Tensor[(4, 8, 15), float32] */;
    (%215,)
  };
  %216() /* ty=(Tensor[(4, 8, 15), float32],) */
}

def @func_14655(%var_14653: Tensor[(385), int64]) -> (Tensor[(378), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) {
  %217 = cast(%var_14653, dtype="int64") /* ty=Tensor[(385), int64] */;
  %218 = reshape(%217, newshape=[385, 1]) /* ty=Tensor[(385, 1), int64] */;
  %219 = @func_9452(%218) /* ty=(Tensor[(11, 5, 7), int64], Tensor[(385, 378), bool]) */;
  %220 = @func_10779() /* ty=Tensor[(378), float32] */;
  %221 = %219.0;
  (%220, %221, %var_14653)
}

def @func_542(%var_541: Tensor[(14, 1, 1), float32]) -> (Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) {
  %239 = fn (%var_509: Tensor[(14, 1, 1), float32]) -> (Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) {
    %222 = cast(-6.27894f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %223 = cast(%var_509, dtype="float32") /* ty=Tensor[(14, 1, 1), float32] */;
    %224 = cast(meta[relay.Constant][22] /* ty=Tensor[(385), int64] */, dtype="int64") /* ty=Tensor[(385), int64] */;
    %225 = cast(meta[relay.Constant][22] /* ty=Tensor[(385), int64] */, dtype="int64") /* ty=Tensor[(385), int64] */;
    %226 = reshape(%224, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
    %227 = reshape(%225, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
    %228 = cast(%var_509, dtype="float64") /* ty=Tensor[(14, 1, 1), float64] */;
    %229 = reshape(%228, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
    %230 = cast(meta[relay.Constant][23] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
    %231 = cast(meta[relay.Constant][24] /* ty=Tensor[(2016), uint32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
    %232 = reshape(%230, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint32] */;
    %233 = reshape(%231, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), uint32] */;
    %234 = @func_436(%232, %233) /* ty=(Tensor[(16, 14, 9), uint32],) */;
    %235 = maximum(%222, %223) /* ty=Tensor[(14, 1, 1), float32] */;
    %236 = @func_134(%226, %227) /* ty=Tensor[(11, 5, 7), int64] */;
    %237 = @func_166(%229) /* ty=Tensor[(14, 1, 1), float64] */;
    %238 = %234.0;
    (%235, %236, meta[relay.Constant][22] /* ty=Tensor[(385), int64] */, %237, %238, meta[relay.Constant][23] /* ty=Tensor[(144), uint32] */, meta[relay.Constant][24] /* ty=Tensor[(2016), uint32] */)
  };
  %239(%var_541) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */
}

def @func_10124() -> (Tensor[(378), float32], Tensor[(64, 2), int64]) {
  %240 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %241 = @func_9868() /* ty=(Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) */;
  %242 = %240.0;
  %243 = %241.1;
  (%242, %243)
}

def @func_13428(%var_13393: Tensor[(16, 10, 8), bool], %var_13394: Tensor[(16, 10, 8), bool]) -> (Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(16, 10, 8), int32]) {
  %244 = cast(meta[relay.Constant][25] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %245 = reshape(%244, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %246 = cast(%var_13393, dtype="float64") /* ty=Tensor[(16, 10, 8), float64] */;
  %247 = cosh(%246) /* ty=Tensor[(16, 10, 8), float64] */;
  %248 = cast(%var_13394, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %249 = shape_of(%var_13393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%var_13393, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = logical_or(%250, %251) /* ty=Tensor[(16, 10, 8), bool] */;
  %253 = cast(%252, dtype="int32") /* ty=Tensor[(16, 10, 8), int32] */;
  %254 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%247, dtype="int32") /* ty=Tensor[(16, 10, 8), int32] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %257 = @func_6118(%245) /* ty=Tensor[(4, 8, 15), float32] */;
  %258 = subtract(%255, %256) /* ty=Tensor[(16, 10, 8), int32] */;
  (%257, meta[relay.Constant][25] /* ty=Tensor[(480), float32] */, %258)
}

def @func_15698(%var_15695: Tensor[(7, 10, 10), int8], %var_15696: Tensor[(7, 10, 10), int8], %var_15697: Tensor[(720), float32]) -> (Tensor[(7, 10, 10), int8], Tensor[(720, ?), int64], Tensor[(720), float32], Tensor[(10, 13, 8), uint32]) {
  @func_15693(%var_15695, %var_15696, %var_15697) /* ty=(Tensor[(7, 10, 10), int8], Tensor[(720, ?), int64], Tensor[(720), float32], Tensor[(10, 13, 8), uint32]) */
}

def @func_16640() -> (Tensor[(378), float32], Tensor[(64, 2), int64]) {
  @func_16638() /* ty=(Tensor[(378), float32], Tensor[(64, 2), int64]) */
}

def @func_10445() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */
}

def @func_11146() -> (Tensor[(378), float32],) {
  %259 = @func_10998() /* ty=Tensor[(378), float32] */;
  (%259,)
}

def @func_9981() -> Tensor[(378), float32] {
  %260 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %260.1
}

def @func_11382() -> Tensor[(378), float32] {
  %262 = fn () -> Tensor[(378), float32] {
    %261 = @func_9567() /* ty=(Tensor[(378), float32],) */;
    %261.0
  };
  %262() /* ty=Tensor[(378), float32] */
}

def @func_12151() -> (Tensor[(14), float64], Tensor[(720), float64], Tensor[(14), float32], Tensor[(1584), float64], Tensor[(720), float64], Tensor[(480), float32]) {
  %275 = fn () -> (Tensor[(14), float64], Tensor[(720), float64], Tensor[(14), float32], Tensor[(1584), float64], Tensor[(720), float64], Tensor[(480), float32]) {
    %263 = @func_10942() /* ty=(Tensor[(14), float64],) */;
    %264 = @func_10381() /* ty=(Tensor[(720), float64], Tensor[(378), float64]) */;
    %265 = cast(meta[relay.Constant][26] /* ty=Tensor[(1584), float64] */, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %266 = reshape(%265, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float64] */;
    %267 = @func_2825(%266) /* ty=(Tensor[(16, 11, 9), float64], Tensor[(14), float32], Tensor[(128), int64], Tensor[(14), float32]) */;
    %268 = cast(meta[relay.Constant][27] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %269 = reshape(%268, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
    %270 = @func_10931(%269) /* ty=(Tensor[(4, 8, 15), float64], Tensor[(720), float64], Tensor[(720), float64]) */;
    %271 = %263.0;
    %272 = %264.0;
    %273 = %267.1;
    %274 = %270.1;
    (%271, %272, %273, meta[relay.Constant][26] /* ty=Tensor[(1584), float64] */, %274, meta[relay.Constant][27] /* ty=Tensor[(480), float32] */)
  };
  %275() /* ty=(Tensor[(14), float64], Tensor[(720), float64], Tensor[(14), float32], Tensor[(1584), float64], Tensor[(720), float64], Tensor[(480), float32]) */
}

def @func_11041() -> Tensor[(378), float32] {
  @func_10278() /* ty=Tensor[(378), float32] */
}

def @func_15075(%var_15070: Tensor[(1040), uint32], %var_15071: Tensor[(720), float64], %var_15072: Tensor[(14, 624), float64], %var_15073: Tensor[(140, 2), int32], %var_15074: Tensor[(40, 14), bool]) -> (Tensor[(14), float64], Tensor[(10, 1, 15), float64], Tensor[(150), int32], Tensor[(480), float32], Tensor[(720), float64], Tensor[(128), int64], Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 624), bool], Tensor[(192), float64], Tensor[(140, 2), int32], Tensor[(128, 32), float64], Tensor[(128), int64], Tensor[(14, 1, 1040), uint16], Tensor[(14), float32], Tensor[(10, 4), bool], Tensor[(280), int32], Tensor[(40, 14), bool], Tensor[(14), float32], Tensor[(220, 4096), float64]) {
  %340 = fn (%var_14943: Tensor[(1040), uint32], %var_14952: Tensor[(720), float64], %var_14966: Tensor[(14, 624), float64], %var_14980: Tensor[(140, 2), int32], %var_15038: Tensor[(40, 14), bool]) -> (Tensor[(14), float64], Tensor[(10, 1, 15), float64], Tensor[(150), int32], Tensor[(480), float32], Tensor[(720), float64], Tensor[(128), int64], Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 624), bool], Tensor[(192), float64], Tensor[(140, 2), int32], Tensor[(128, 32), float64], Tensor[(128), int64], Tensor[(14, 1, 1040), uint16], Tensor[(14), float32], Tensor[(10, 4), bool], Tensor[(280), int32], Tensor[(40, 14), bool], Tensor[(14), float32], Tensor[(220, 4096), float64]) {
    %276 = cast(meta[relay.Constant][28] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
    %277 = cast(meta[relay.Constant][28] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
    %278 = reshape(%276, newshape=[10, 1, 15]) /* ty=Tensor[(10, 1, 15), int32] */;
    %279 = reshape(%277, newshape=[10, 1, 15]) /* ty=Tensor[(10, 1, 15), int32] */;
    %280 = @func_14635(%278, %279) /* ty=(Tensor[(10, ?, 15), float32], Tensor[(10, 1, 15), float64]) */;
    %281 = cast(%var_14943, dtype="uint32") /* ty=Tensor[(1040), uint32] */;
    %282 = reshape(%281, newshape=[10, 13, 8]) /* ty=Tensor[(10, 13, 8), uint32] */;
    %283 = @func_12949(%282) /* ty=(Tensor[(480), float32], Tensor[(10, 13, 8), bool], Tensor[(378), float32]) */;
    %284 = @func_12840() /* ty=(Tensor[(378), float32],) */;
    %285 = cast(%var_14952, dtype="float64") /* ty=Tensor[(720), float64] */;
    %286 = cast(meta[relay.Constant][29] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %287 = reshape(%285, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
    %288 = reshape(%286, newshape=[8, 16]) /* ty=Tensor[(8, 16), int64] */;
    %289 = @func_3396(%287, %288) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) */;
    %290 = %289.7;
    %291 = cast(%290, dtype="bool") /* ty=Tensor[(1, 624), bool] */;
    %292 = cast(%var_14966, dtype="bool") /* ty=Tensor[(14, 624), bool] */;
    %293 = cast(meta[relay.Constant][32] /* ty=Tensor[(220, 1), bool] */, dtype="bool") /* ty=Tensor[(220, 1), bool] */;
    %294 = @func_10619() /* ty=Tensor[(14), float64] */;
    %295 = cast(%294, dtype="float64") /* ty=Tensor[(14), float64] */;
    %296 = reshape(%293, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), bool] */;
    %297 = reshape(%295, newshape=[14]) /* ty=Tensor[(14), float64] */;
    %298 = @func_5163(%296, %297) /* ty=(Tensor[(10, 11, 2), bool], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
    %299 = %298.1;
    %300 = cast(%var_14943, dtype="uint16") /* ty=Tensor[(1040), uint16] */;
    %301 = cast(%299, dtype="uint16") /* ty=Tensor[(14, 1, 1), uint16] */;
    %302 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 4), bool] */, dtype="bool") /* ty=Tensor[(10, 4), bool] */;
    %303 = reshape(%302, newshape=[40]) /* ty=Tensor[(40), bool] */;
    %304 = @func_10573(%303) /* ty=(Tensor[(14), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float32]) */;
    %305 = cast(%var_14966, dtype="float32") /* ty=Tensor[(14, 624), float32] */;
    %306 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %307 = cast(%var_15038, dtype="bool") /* ty=Tensor[(40, 14), bool] */;
    %308 = cast(%294, dtype="float32") /* ty=Tensor[(14), float32] */;
    %309 = reshape(%305, newshape=[14, 8, 78]) /* ty=Tensor[(14, 8, 78), float32] */;
    %310 = reshape(%306, newshape=[4, 48]) /* ty=Tensor[(4, 48), float64] */;
    %311 = reshape(%307, newshape=[280, 2]) /* ty=Tensor[(280, 2), bool] */;
    %312 = reshape(%308, newshape=[1, 14]) /* ty=Tensor[(1, 14), float32] */;
    %313 = @func_14431(%309, %310, %311, %312) /* ty=(Tensor[(14, 8, 78), int16], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(4096), float64], Tensor[(4, 48), bool], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(280, 2), bool], Tensor[(11, 5, 7), int64], Tensor[(1, 14), float32]) */;
    %314 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
    %315 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %316 = cast(%var_14980, dtype="int32") /* ty=Tensor[(140, 2), int32] */;
    %317 = cast(meta[relay.Constant][29] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %318 = cast(meta[relay.Constant][31] /* ty=Tensor[(128, 32), float64] */, dtype="float64") /* ty=Tensor[(128, 32), float64] */;
    %319 = reshape(%315, newshape=[6, 8, 4]) /* ty=Tensor[(6, 8, 4), float64] */;
    %320 = reshape(%316, newshape=[280]) /* ty=Tensor[(280), int32] */;
    %321 = reshape(%317, newshape=[32, 4]) /* ty=Tensor[(32, 4), int64] */;
    %322 = reshape(%318, newshape=[4096]) /* ty=Tensor[(4096), float64] */;
    %323 = @func_8886(%319, %320, %321, %322) /* ty=(Tensor[(6, 8, 4), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(32, 4), int64], Tensor[(16, 16, 16), float64], Tensor[(4096), float64]) */;
    %324 = %323.7;
    %325 = cast(%324, dtype="uint32") /* ty=Tensor[(4096), uint32] */;
    %326 = cast(meta[relay.Constant][32] /* ty=Tensor[(220, 1), bool] */, dtype="uint32") /* ty=Tensor[(220, 1), uint32] */;
    %327 = add(%325, %326) /* ty=Tensor[(220, 4096), uint32] */;
    %328 = cast(%327, dtype="float64") /* ty=Tensor[(220, 4096), float64] */;
    %329 = %280.1;
    %330 = %283.0;
    %331 = @func_10998() /* ty=Tensor[(378), float32] */;
    %332 = %284.0;
    %333 = logical_or(%291, %292) /* ty=Tensor[(14, 624), bool] */;
    %334 = @func_14039() /* ty=Tensor[(128), int64] */;
    %335 = bitwise_and(%300, %301) /* ty=Tensor[(14, 1, 1040), uint16] */;
    %336 = %304.0;
    %337 = %313.2;
    %338 = %314.2;
    %339 = cosh(%328) /* ty=Tensor[(220, 4096), float64] */;
    (%294, %329, meta[relay.Constant][28] /* ty=Tensor[(150), int32] */, %330, %var_14952, meta[relay.Constant][29] /* ty=Tensor[(128), int64] */, %331, %332, %333, meta[relay.Constant][30] /* ty=Tensor[(192), float64] */, %var_14980, meta[relay.Constant][31] /* ty=Tensor[(128, 32), float64] */, %334, %335, %336, meta[relay.Constant][33] /* ty=Tensor[(10, 4), bool] */, %337, %var_15038, %338, %339)
  };
  %340(%var_15070, %var_15071, %var_15072, %var_15073, %var_15074) /* ty=(Tensor[(14), float64], Tensor[(10, 1, 15), float64], Tensor[(150), int32], Tensor[(480), float32], Tensor[(720), float64], Tensor[(128), int64], Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 624), bool], Tensor[(192), float64], Tensor[(140, 2), int32], Tensor[(128, 32), float64], Tensor[(128), int64], Tensor[(14, 1, 1040), uint16], Tensor[(14), float32], Tensor[(10, 4), bool], Tensor[(280), int32], Tensor[(40, 14), bool], Tensor[(14), float32], Tensor[(220, 4096), float64]) */
}

def @func_15587(%var_15561: Tensor[(6, 6, 15), uint32], %var_15571: Tensor[(385), int64]) -> (Tensor[(6, 6, 15), uint32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) {
  %341 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 6, 15), uint32] */, dtype="uint32") /* ty=Tensor[(6, 6, 15), uint32] */;
  %342 = shape_of(%var_15561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_15561, dtype="uint32") /* ty=Tensor[(6, 6, 15), uint32] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %345 = cast(%var_15571, dtype="int64") /* ty=Tensor[(385), int64] */;
  %346 = cast(%var_15571, dtype="int64") /* ty=Tensor[(385), int64] */;
  %347 = reshape(%345, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %348 = reshape(%346, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %349 = logical_xor(%343, %344) /* ty=Tensor[(6, 6, 15), uint32] */;
  %350 = @func_134(%347, %348) /* ty=Tensor[(11, 5, 7), int64] */;
  (%349, %350, %var_15571)
}

def @func_16132(%var_16130: Tensor[(14, 5, 16), int32], %var_16131: Tensor[(14, 5, 16), int32]) -> (Tensor[(14, 5, 16), bool],) {
  %356 = fn (%var_16118: Tensor[(14, 5, 16), int32], %var_16119: Tensor[(14, 5, 16), int32]) -> (Tensor[(14, 5, 16), bool],) {
    %351 = cast(%var_16119, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
    %352 = shape_of(%var_16118, dtype="int32") /* ty=Tensor[(3), int32] */;
    %353 = cast(%var_16118, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
    %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %355 = greater(%353, %354) /* ty=Tensor[(14, 5, 16), bool] */;
    (%355,)
  };
  %356(%var_16130, %var_16131) /* ty=(Tensor[(14, 5, 16), bool],) */
}

def @func_440(%var_438: Tensor[(16, 1, 9), uint32], %var_439: Tensor[(16, 14, 9), uint32]) -> (Tensor[(16, 14, 9), uint32],) {
  @func_436(%var_438, %var_439) /* ty=(Tensor[(16, 14, 9), uint32],) */
}

def @func_11164() -> Tensor[(480), float32] {
  @func_11162() /* ty=Tensor[(480), float32] */
}

def @func_17166() -> (Tensor[(378), float32], Tensor[(16, 14, 9), float64], Tensor[(378), float32], Tensor[(480), float32], Tensor[(378), float32], Tensor[(128), int64]) {
  @func_17164() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), float64], Tensor[(378), float32], Tensor[(480), float32], Tensor[(378), float32], Tensor[(128), int64]) */
}

def @func_11271() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  @func_11269() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */
}

def @func_10279() -> Tensor[(378), float32] {
  %358 = fn () -> Tensor[(378), float32] {
    %357 = @func_9383() /* ty=(Tensor[(378), float32],) */;
    %357.0
  };
  %358() /* ty=Tensor[(378), float32] */
}

def @func_14843() -> (Tensor[(378), float32],) {
  %359 = @func_10211() /* ty=Tensor[(378), float32] */;
  (%359,)
}

def @func_16463() -> (Tensor[(4, 8, 15), float32], Tensor[(378), float32]) {
  @func_16461() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32]) */
}

def @func_10781() -> Tensor[(378), float32] {
  @func_10779() /* ty=Tensor[(378), float32] */
}

def @func_16928() -> (Tensor[(624), float64], Tensor[(16, 14, 9), float64]) {
  @func_16926() /* ty=(Tensor[(624), float64], Tensor[(16, 14, 9), float64]) */
}

def @func_10505(%var_10455: Tensor[(192), float64], %var_10457: Tensor[(64, 2), int64]) -> (Tensor[(16, 14, 9), uint32], Tensor[(280), int32], Tensor[(192), float64], Tensor[(280), int32], Tensor[(64, 2), int64], Tensor[(32, 128), float64]) {
  %360 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %361 = cast(%var_10455, dtype="float64") /* ty=Tensor[(192), float64] */;
  %362 = cast(meta[relay.Constant][35] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
  %363 = cast(%var_10457, dtype="int64") /* ty=Tensor[(64, 2), int64] */;
  %364 = cast(meta[relay.Constant][36] /* ty=Tensor[(32, 128), float64] */, dtype="float64") /* ty=Tensor[(32, 128), float64] */;
  %365 = reshape(%361, newshape=[6, 8, 4]) /* ty=Tensor[(6, 8, 4), float64] */;
  %366 = reshape(%362, newshape=[280]) /* ty=Tensor[(280), int32] */;
  %367 = reshape(%363, newshape=[32, 4]) /* ty=Tensor[(32, 4), int64] */;
  %368 = reshape(%364, newshape=[4096]) /* ty=Tensor[(4096), float64] */;
  %369 = @func_8886(%365, %366, %367, %368) /* ty=(Tensor[(6, 8, 4), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(32, 4), int64], Tensor[(16, 16, 16), float64], Tensor[(4096), float64]) */;
  %370 = %360.1;
  %371 = %369.2;
  (%370, %371, %var_10455, meta[relay.Constant][35] /* ty=Tensor[(280), int32] */, %var_10457, meta[relay.Constant][36] /* ty=Tensor[(32, 128), float64] */)
}

def @func_8892(%var_8888: Tensor[(6, 8, 4), float64], %var_8889: Tensor[(280), int32], %var_8890: Tensor[(32, 4), int64], %var_8891: Tensor[(4096), float64]) -> (Tensor[(6, 8, 4), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(32, 4), int64], Tensor[(16, 16, 16), float64], Tensor[(4096), float64]) {
  @func_8886(%var_8888, %var_8889, %var_8890, %var_8891) /* ty=(Tensor[(6, 8, 4), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(32, 4), int64], Tensor[(16, 16, 16), float64], Tensor[(4096), float64]) */
}

def @func_5592(%var_5541: Tensor[(5, 12, 10), float32], %var_5550: Tensor[(624), float64]) -> (Tensor[(40), bool], Tensor[(7, 195), float32], Tensor[(40), bool], Tensor[(560), bool], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(5, 12, 10), float64]) {
  %372 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 195), float32] */, dtype="float32") /* ty=Tensor[(7, 195), float32] */;
  %373 = cast(meta[relay.Constant][38] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %374 = cast(meta[relay.Constant][39] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %375 = reshape(%372, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float32] */;
  %376 = reshape(%373, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %377 = reshape(%374, newshape=[40, 14]) /* ty=Tensor[(40, 14), bool] */;
  %378 = @func_5512(%375, %376, %377) /* ty=(Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(16, 16, 16), float64], Tensor[(4096), float64], Tensor[(5, 12, ?), bool], uint16, Tensor[(13, 15, 7), float32], Tensor[(13, 15, 7), int64], Tensor[(1800), int32], Tensor[(720), float64], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(40, 14), bool], Tensor[(14, 1, 1), float64], Tensor[(13, 15, 7), float32]) */;
  %379 = cast(%var_5550, dtype="float64") /* ty=Tensor[(624), float64] */;
  %380 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
  %381 = reshape(%379, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %382 = reshape(%380, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %383 = @func_2422(%381, %382) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
  %384 = cast(%var_5541, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
  %385 = cosh(%384) /* ty=Tensor[(5, 12, 10), float32] */;
  %386 = cast(%385, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %387 = %378.12;
  %388 = %383.3;
  %389 = atanh(%386) /* ty=Tensor[(5, 12, 10), float64] */;
  (%387, meta[relay.Constant][37] /* ty=Tensor[(7, 195), float32] */, meta[relay.Constant][38] /* ty=Tensor[(40), bool] */, meta[relay.Constant][39] /* ty=Tensor[(560), bool] */, %388, %var_5550, meta[relay.Constant][40] /* ty=Tensor[(14, 1), float32] */, %389)
}

def @func_17377() -> Tensor[(378), float32] {
  %391 = fn () -> Tensor[(378), float32] {
    %390 = @func_14209() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %390.1
  };
  %391() /* ty=Tensor[(378), float32] */
}

def @func_9869() -> (Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) {
  %398 = fn () -> (Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) {
    %392 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
    %393 = cast(meta[relay.Constant][41] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %394 = reshape(%393, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %395 = @func_8481(%394) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
    %396 = %392.0;
    %397 = %395.3;
    (%396, %397, meta[relay.Constant][41] /* ty=Tensor[(720), float64] */)
  };
  %398() /* ty=(Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) */
}

def @func_11941() -> Tensor[(378), float32] {
  %399 = @func_9567() /* ty=(Tensor[(378), float32],) */;
  %399.0
}

def @func_16330() -> Tensor[(378), float32] {
  %401 = fn () -> Tensor[(378), float32] {
    %400 = @func_11319() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %400.1
  };
  %401() /* ty=Tensor[(378), float32] */
}

def @func_8574(%var_8572: Tensor[(2, 15, 15), float64]) -> (Tensor[(2, 15, 15), float64],) {
  @func_8571(%var_8572) /* ty=(Tensor[(2, 15, 15), float64],) */
}

def @func_8571(%var_8567: Tensor[(2, 15, 15), float64]) -> (Tensor[(2, 15, 15), float64],) {
  %402 = cast(%var_8567, dtype="float64") /* ty=Tensor[(2, 15, 15), float64] */;
  %403 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(2, 15, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 15), float64] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %406 = mod(%404, %405) /* ty=Tensor[(2, 15, 15), float64] */;
  (%406,)
}

def @func_13432(%var_13430: Tensor[(16, 10, 8), bool], %var_13431: Tensor[(16, 10, 8), bool]) -> (Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(16, 10, 8), int32]) {
  @func_13428(%var_13430, %var_13431) /* ty=(Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(16, 10, 8), int32]) */
}

def @func_11238(%var_11206: Tensor[(720, 1), float32]) -> (Tensor[(10, 13, 8), uint32], Tensor[(9, 7, 6), float32], Tensor[(720, ?), int64], Tensor[(64, 2), int64], Tensor[(720, ?), uint64]) {
  %407 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %408 = cast(meta[relay.Constant][43] /* ty=Tensor[(720, 1), float64] */, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %409 = reshape(%408, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %410 = @func_8481(%409) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %411 = cast(meta[relay.Constant][43] /* ty=Tensor[(720, 1), float64] */, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %412 = atan(%411) /* ty=Tensor[(720, 1), float32] */;
  %413 = cast(%var_11206, dtype="int16") /* ty=Tensor[(720, 1), int16] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(2), int32] */;
  %415 = cast(%412, dtype="int16") /* ty=Tensor[(720, 1), int16] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %417 = bitwise_xor(%415, %416) /* ty=Tensor[(720, ?), int16] */;
  %418 = cast(%412, dtype="int64") /* ty=Tensor[(720, 1), int64] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(2), int32] */;
  %420 = cast(%417, dtype="int64") /* ty=Tensor[(720, ?), int64] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %422 = @func_10124() /* ty=(Tensor[(378), float32], Tensor[(64, 2), int64]) */;
  %423 = cast(%412, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %424 = sin(%423) /* ty=Tensor[(720, 1), float32] */;
  %425 = cast(%417, dtype="uint64") /* ty=Tensor[(720, ?), uint64] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(2), int32] */;
  %427 = cast(%424, dtype="uint64") /* ty=Tensor[(720, 1), uint64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %429 = %407.2;
  %430 = %410.4;
  %431 = multiply(%420, %421) /* ty=Tensor[(720, ?), int64] */;
  %432 = %422.1;
  %433 = right_shift(%427, %428) /* ty=Tensor[(720, ?), uint64] */;
  (%429, %430, %431, %432, %433)
}

def @func_12949(%var_12937: Tensor[(10, 13, 8), uint32]) -> (Tensor[(480), float32], Tensor[(10, 13, 8), bool], Tensor[(378), float32]) {
  %434 = @func_9908() /* ty=(Tensor[(480), float32],) */;
  %435 = @func_9895() /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */;
  %436 = %435.0;
  %437 = cast(%var_12937, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %441 = @func_10747() /* ty=(Tensor[(378), float32],) */;
  %442 = %434.0;
  %443 = greater_equal(%439, %440) /* ty=Tensor[(10, 13, 8), bool] */;
  %444 = %441.0;
  (%442, %443, %444)
}

def @func_679(%var_629: Tensor[(8, 4, 4), int64], %var_630: Tensor[(8, 4, 4), int64], %var_640: Tensor[(14), float32]) -> (Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) {
  %445 = cast(%var_630, dtype="bool") /* ty=Tensor[(8, 4, 4), bool] */;
  %446 = shape_of(%var_629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%var_629, dtype="bool") /* ty=Tensor[(8, 4, 4), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %449 = cast(%var_640, dtype="float32") /* ty=Tensor[(14), float32] */;
  %450 = reshape(%449, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
  %451 = @func_540(%450) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
  %452 = cast(%var_640, dtype="float64") /* ty=Tensor[(14), float64] */;
  %453 = reshape(%452, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %454 = cast(%var_640, dtype="float64") /* ty=Tensor[(14), float64] */;
  %455 = reshape(%454, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %456 = %451.2;
  %457 = cast(%456, dtype="int64") /* ty=Tensor[(385), int64] */;
  %458 = cast(%456, dtype="int64") /* ty=Tensor[(385), int64] */;
  %459 = reshape(%457, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %460 = reshape(%458, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %461 = cast(%var_640, dtype="float64") /* ty=Tensor[(14), float64] */;
  %462 = reshape(%461, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %463 = not_equal(%447, %448) /* ty=Tensor[(8, 4, 4), bool] */;
  %464 = @func_166(%453) /* ty=Tensor[(14, 1, 1), float64] */;
  %465 = @func_166(%455) /* ty=Tensor[(14, 1, 1), float64] */;
  %466 = @func_134(%459, %460) /* ty=Tensor[(11, 5, 7), int64] */;
  %467 = @func_166(%462) /* ty=Tensor[(14, 1, 1), float64] */;
  (%463, %456, %var_640, %464, %465, %466, %467)
}

def @func_10226(%var_10224: Tensor[(2, 360), float64]) -> (Tensor[(16, 14, 9), uint32], Tensor[(378), float32], Tensor[(720), float64], Tensor[(2, 360), float64]) {
  %468 = @func_10124() /* ty=(Tensor[(378), float32], Tensor[(64, 2), int64]) */;
  %469 = cast(%var_10224, dtype="float64") /* ty=Tensor[(2, 360), float64] */;
  %470 = reshape(%469, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %471 = @func_9200(%470) /* ty=(Tensor[(14), float64], Tensor[(1120), float64], Tensor[(720), float64]) */;
  %472 = @func_10026() /* ty=Tensor[(16, 14, 9), uint32] */;
  %473 = %468.0;
  %474 = %471.2;
  (%472, %473, %474, %var_10224)
}

def @func_11645() -> Tensor[(128), int64] {
  @func_11643() /* ty=Tensor[(128), int64] */
}

def @func_11631() -> (Tensor[(480), float32], Tensor[(378), float32], Tensor[(720), float64], Tensor[(4, 180), float64]) {
  %482 = fn () -> (Tensor[(480), float32], Tensor[(378), float32], Tensor[(720), float64], Tensor[(4, 180), float64]) {
    %475 = @func_10058() /* ty=(Tensor[(378), float32],) */;
    %476 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 180), float64] */, dtype="float64") /* ty=Tensor[(4, 180), float64] */;
    %477 = reshape(%476, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %478 = @func_8481(%477) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
    %479 = @func_11162() /* ty=Tensor[(480), float32] */;
    %480 = %475.0;
    %481 = %478.2;
    (%479, %480, %481, meta[relay.Constant][44] /* ty=Tensor[(4, 180), float64] */)
  };
  %482() /* ty=(Tensor[(480), float32], Tensor[(378), float32], Tensor[(720), float64], Tensor[(4, 180), float64]) */
}

def @func_10933(%var_10932: Tensor[(4, 8, 15), float32]) -> (Tensor[(4, 8, 15), float64], Tensor[(720), float64], Tensor[(720), float64]) {
  %506 = fn (%var_10847: Tensor[(4, 8, 15), float32]) -> (Tensor[(4, 8, 15), float64], Tensor[(720), float64], Tensor[(720), float64]) {
    %483 = cast(%var_10847, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
    %484 = sqrt(%483) /* ty=Tensor[(4, 8, 15), float64] */;
    %485 = @func_10594() /* ty=(Tensor[(4, 8, 15), float32],) */;
    %486 = %485.0;
    %487 = cast(%var_10847, dtype="int32") /* ty=Tensor[(4, 8, 15), int32] */;
    %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
    %489 = cast(%486, dtype="int32") /* ty=Tensor[(4, 8, 15), int32] */;
    %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %491 = right_shift(%489, %490) /* ty=Tensor[(4, 8, 15), int32] */;
    %492 = cast(%491, dtype="uint16") /* ty=Tensor[(4, 8, 15), uint16] */;
    %493 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %494 = cast(%484, dtype="uint16") /* ty=Tensor[(4, 8, 15), uint16] */;
    %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %496 = bitwise_or(%494, %495) /* ty=Tensor[(4, 8, 15), uint16] */;
    %497 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 8, 15), uint16] */, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
    %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(%496, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %501 = cast(meta[relay.Constant][46] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %502 = reshape(%501, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %503 = @func_8481(%502) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
    %504 = divide(%499, %500) /* ty=Tensor[(4, 8, 15), float64] */;
    %505 = %503.2;
    (%504, %505, meta[relay.Constant][46] /* ty=Tensor[(720), float64] */)
  };
  %506(%var_10932) /* ty=(Tensor[(4, 8, 15), float64], Tensor[(720), float64], Tensor[(720), float64]) */
}

def @func_9334(%var_9330: Tensor[(280), int32], %var_9331: Tensor[(385), int64], %var_9332: Tensor[(1800), int32], %var_9333: uint16) -> (Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14), float64], Tensor[(1800), int32], Tensor[(5, 12, ?), bool], uint16) {
  @func_9328(%var_9330, %var_9331, %var_9332, %var_9333) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14), float64], Tensor[(1800), int32], Tensor[(5, 12, ?), bool], uint16) */
}

def @func_6166(%var_6161: Tensor[(7, 8, 8), int8], %var_6162: Tensor[(7, 8, 8), int8]) -> (Tensor[(7, 8, 8), bool],) {
  %507 = cast(%var_6162, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
  %508 = shape_of(%var_6161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_6161, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = greater_equal(%509, %510) /* ty=Tensor[(7, 8, 8), bool] */;
  (%511,)
}

def @func_16949() -> (Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(378), float32]) {
  %512 = @func_14494() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(128), int64]) */;
  %513 = @func_13236() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) */;
  %514 = %512.1;
  %515 = %513.0;
  %516 = @func_12174() /* ty=Tensor[(378), float32] */;
  (%514, %515, %516)
}

def @func_10596() -> (Tensor[(4, 8, 15), float32],) {
  @func_10594() /* ty=(Tensor[(4, 8, 15), float32],) */
}

def @func_15722(%var_15715: Tensor[(385), int64]) -> (Tensor[(378), float32], Tensor[(385, 378), bool], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(220), bool], Tensor[(14, 1), float64]) {
  %517 = cast(%var_15715, dtype="int64") /* ty=Tensor[(385), int64] */;
  %518 = reshape(%517, newshape=[385, 1]) /* ty=Tensor[(385, 1), int64] */;
  %519 = @func_9452(%518) /* ty=(Tensor[(11, 5, 7), int64], Tensor[(385, 378), bool]) */;
  %520 = cast(meta[relay.Constant][47] /* ty=Tensor[(220), bool] */, dtype="bool") /* ty=Tensor[(220), bool] */;
  %521 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 1), float64] */, dtype="float64") /* ty=Tensor[(14, 1), float64] */;
  %522 = reshape(%520, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), bool] */;
  %523 = reshape(%521, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %524 = @func_5163(%522, %523) /* ty=(Tensor[(10, 11, 2), bool], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %525 = @func_10998() /* ty=Tensor[(378), float32] */;
  %526 = %519.1;
  %527 = %524.1;
  (%525, %526, %var_15715, %527, meta[relay.Constant][47] /* ty=Tensor[(220), bool] */, meta[relay.Constant][48] /* ty=Tensor[(14, 1), float64] */)
}

def @func_3525(%var_3513: Tensor[(4, 1, 10), bool], %var_3514: Tensor[(4, 14, 10), bool]) -> Tensor[(4, 14, 10), bool] {
  %528 = cast(%var_3513, dtype="bool") /* ty=Tensor[(4, 1, 10), bool] */;
  %529 = cast(%var_3514, dtype="bool") /* ty=Tensor[(4, 14, 10), bool] */;
  logical_or(%528, %529) /* ty=Tensor[(4, 14, 10), bool] */
}

def @func_12243() -> (Tensor[(378), float32],) {
  %531 = fn () -> (Tensor[(378), float32],) {
    %530 = @func_9416() /* ty=Tensor[(378), float32] */;
    (%530,)
  };
  %531() /* ty=(Tensor[(378), float32],) */
}

def @func_12075() -> (Tensor[(378), float32],) {
  @func_12073() /* ty=(Tensor[(378), float32],) */
}

def @func_10509(%var_10507: Tensor[(192), float64], %var_10508: Tensor[(64, 2), int64]) -> (Tensor[(16, 14, 9), uint32], Tensor[(280), int32], Tensor[(192), float64], Tensor[(280), int32], Tensor[(64, 2), int64], Tensor[(32, 128), float64]) {
  @func_10505(%var_10507, %var_10508) /* ty=(Tensor[(16, 14, 9), uint32], Tensor[(280), int32], Tensor[(192), float64], Tensor[(280), int32], Tensor[(64, 2), int64], Tensor[(32, 128), float64]) */
}

def @func_10058() -> (Tensor[(378), float32],) {
  %532 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %533 = %532.0;
  (%533,)
}

def @func_17704() -> (Tensor[(378), float32],) {
  %536 = fn () -> (Tensor[(378), float32],) {
    %534 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %535 = %534.1;
    (%535,)
  };
  %536() /* ty=(Tensor[(378), float32],) */
}

def @func_16183(%var_16182: Tensor[(132, 12), float64]) -> (Tensor[(378), float32], Tensor[(16, 11, 9), float64], Tensor[(132, 12), int32]) {
  %548 = fn (%var_16171: Tensor[(132, 12), float64]) -> (Tensor[(378), float32], Tensor[(16, 11, 9), float64], Tensor[(132, 12), int32]) {
    %537 = @func_15468() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %538 = cast(meta[relay.Constant][49] /* ty=Tensor[(132, 12), float64] */, dtype="float64") /* ty=Tensor[(132, 12), float64] */;
    %539 = reshape(%538, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float64] */;
    %540 = @func_2825(%539) /* ty=(Tensor[(16, 11, 9), float64], Tensor[(14), float32], Tensor[(128), int64], Tensor[(14), float32]) */;
    %541 = cast(%var_16171, dtype="int32") /* ty=Tensor[(132, 12), int32] */;
    %542 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(132, 12), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %543 = cast(meta[relay.Constant][49] /* ty=Tensor[(132, 12), float64] */, dtype="int32") /* ty=Tensor[(132, 12), int32] */;
    %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %545 = %537.0;
    %546 = %540.0;
    %547 = bitwise_xor(%543, %544) /* ty=Tensor[(132, 12), int32] */;
    (%545, %546, %547)
  };
  %548(%var_16182) /* ty=(Tensor[(378), float32], Tensor[(16, 11, 9), float64], Tensor[(132, 12), int32]) */
}

def @func_10381() -> (Tensor[(720), float64], Tensor[(378), float64]) {
  %549 = @func_10058() /* ty=(Tensor[(378), float32],) */;
  %550 = %549.0;
  %551 = cast(%550, dtype="float64") /* ty=Tensor[(378), float64] */;
  %552 = @func_10041() /* ty=Tensor[(720), float64] */;
  %553 = rsqrt(%551) /* ty=Tensor[(378), float64] */;
  (%552, %553)
}

def @func_11896(%var_11887: Tensor[(3, 720), float64]) -> (Tensor[(3, 720), float64], Tensor[(128), int64]) {
  %554 = @func_10662() /* ty=(Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) */;
  %555 = %554.2;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
  %557 = cast(%var_11887, dtype="float64") /* ty=Tensor[(3, 720), float64] */;
  %558 = @func_10641() /* ty=(Tensor[(128), int64],) */;
  %559 = floor_divide(%556, %557) /* ty=Tensor[(3, 720), float64] */;
  %560 = %558.0;
  (%559, %560)
}

def @func_684(%var_681: Tensor[(8, 4, 4), int64], %var_682: Tensor[(8, 4, 4), int64], %var_683: Tensor[(14), float32]) -> (Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) {
  @func_679(%var_681, %var_682, %var_683) /* ty=(Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) */
}

def @func_12774(%var_12772: Tensor[(624), float64], %var_12773: Tensor[(1, 385), int64]) -> (Tensor[(128), float64], Tensor[(3, 13, 16), float64], Tensor[(624), float64], Tensor[(378), float32], Tensor[(5, 8, 7), int32], Tensor[(10, 28), int32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) {
  %582 = fn (%var_12723: Tensor[(624), float64], %var_12750: Tensor[(1, 385), int64]) -> (Tensor[(128), float64], Tensor[(3, 13, 16), float64], Tensor[(624), float64], Tensor[(378), float32], Tensor[(5, 8, 7), int32], Tensor[(10, 28), int32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) {
    %561 = @func_10641() /* ty=(Tensor[(128), int64],) */;
    %562 = %561.0;
    %563 = cast(%562, dtype="float64") /* ty=Tensor[(128), float64] */;
    %564 = cast(%var_12723, dtype="float64") /* ty=Tensor[(624), float64] */;
    %565 = sigmoid(%563) /* ty=Tensor[(128), float64] */;
    %566 = cast(%565, dtype="int64") /* ty=Tensor[(128), int64] */;
    %567 = reshape(%564, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), float64] */;
    %568 = reshape(%566, newshape=[128]) /* ty=Tensor[(128), int64] */;
    %569 = @func_1041(%567, %568) /* ty=(Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) */;
    %570 = cast(meta[relay.Constant][50] /* ty=Tensor[(10, 28), int32] */, dtype="int32") /* ty=Tensor[(10, 28), int32] */;
    %571 = cast(%var_12750, dtype="int64") /* ty=Tensor[(1, 385), int64] */;
    %572 = cast(meta[relay.Constant][51] /* ty=Tensor[(1800), int32] */, dtype="int32") /* ty=Tensor[(1800), int32] */;
    %573 = cast(meta[relay.Constant][52] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %574 = reshape(%570, newshape=[280]) /* ty=Tensor[(280), int32] */;
    %575 = reshape(%571, newshape=[385]) /* ty=Tensor[(385), int64] */;
    %576 = reshape(%572, newshape=[1800]) /* ty=Tensor[(1800), int32] */;
    %577 = reshape(%573, newshape=[]) /* ty=uint16 */;
    %578 = @func_9328(%574, %575, %576, %577) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14), float64], Tensor[(1800), int32], Tensor[(5, 12, ?), bool], uint16) */;
    %579 = %569.0;
    %580 = @func_10242() /* ty=Tensor[(378), float32] */;
    %581 = %578.2;
    (%565, %579, %var_12723, %580, %581, meta[relay.Constant][50] /* ty=Tensor[(10, 28), int32] */, %var_12750, meta[relay.Constant][51] /* ty=Tensor[(1800), int32] */, meta[relay.Constant][52] /* ty=uint16 */)
  };
  %582(%var_12772, %var_12773) /* ty=(Tensor[(128), float64], Tensor[(3, 13, 16), float64], Tensor[(624), float64], Tensor[(378), float32], Tensor[(5, 8, 7), int32], Tensor[(10, 28), int32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) */
}

def @func_13609() -> Tensor[(378), float32] {
  %583 = @func_12242() /* ty=(Tensor[(378), float32],) */;
  %583.0
}

def @func_9744(%var_9743: Tensor[(40), bool]) -> (Tensor[(378), float32], Tensor[(14), float32], Tensor[(1365), float32], Tensor[(40), bool], Tensor[(560), bool]) {
  %594 = fn (%var_9739: Tensor[(40), bool]) -> (Tensor[(378), float32], Tensor[(14), float32], Tensor[(1365), float32], Tensor[(40), bool], Tensor[(560), bool]) {
    %584 = @func_9567() /* ty=(Tensor[(378), float32],) */;
    %585 = cast(meta[relay.Constant][53] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %586 = cast(%var_9739, dtype="bool") /* ty=Tensor[(40), bool] */;
    %587 = cast(meta[relay.Constant][54] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
    %588 = reshape(%585, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float32] */;
    %589 = reshape(%586, newshape=[40]) /* ty=Tensor[(40), bool] */;
    %590 = reshape(%587, newshape=[40, 14]) /* ty=Tensor[(40, 14), bool] */;
    %591 = @func_5512(%588, %589, %590) /* ty=(Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(16, 16, 16), float64], Tensor[(4096), float64], Tensor[(5, 12, ?), bool], uint16, Tensor[(13, 15, 7), float32], Tensor[(13, 15, 7), int64], Tensor[(1800), int32], Tensor[(720), float64], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(40, 14), bool], Tensor[(14, 1, 1), float64], Tensor[(13, 15, 7), float32]) */;
    %592 = %584.0;
    %593 = %591.2;
    (%592, %593, meta[relay.Constant][53] /* ty=Tensor[(1365), float32] */, %var_9739, meta[relay.Constant][54] /* ty=Tensor[(560), bool] */)
  };
  %594(%var_9743) /* ty=(Tensor[(378), float32], Tensor[(14), float32], Tensor[(1365), float32], Tensor[(40), bool], Tensor[(560), bool]) */
}

def @func_10943() -> (Tensor[(14), float64],) {
  %596 = fn () -> (Tensor[(14), float64],) {
    %595 = @func_10619() /* ty=Tensor[(14), float64] */;
    (%595,)
  };
  %596() /* ty=(Tensor[(14), float64],) */
}

def @func_13465() -> Tensor[(480), float32] {
  %598 = fn () -> Tensor[(480), float32] {
    %597 = @func_9908() /* ty=(Tensor[(480), float32],) */;
    %597.0
  };
  %598() /* ty=Tensor[(480), float32] */
}

def @func_15203() -> (Tensor[(378), float32],) {
  %601 = fn () -> (Tensor[(378), float32],) {
    %599 = @func_9383() /* ty=(Tensor[(378), float32],) */;
    %600 = %599.0;
    (%600,)
  };
  %601() /* ty=(Tensor[(378), float32],) */
}

def @func_4145(%var_4135: Tensor[(16, 16, 16), float64]) -> Tensor[(16, 16, 16), float64] {
  %602 = cast(%var_4135, dtype="float64") /* ty=Tensor[(16, 16, 16), float64] */;
  %603 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(16, 16, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(meta[relay.Constant][55] /* ty=Tensor[(16, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 16, 16), float64] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%604, %605) /* ty=Tensor[(16, 16, 16), float64] */
}

def @func_16981() -> (Tensor[(378), float32], Tensor[(385), int64], Tensor[(11, 35), int64], Tensor[(378), float32]) {
  %606 = @func_13004() /* ty=(Tensor[(378), float32],) */;
  %607 = cast(meta[relay.Constant][56] /* ty=Tensor[(11, 35), int64] */, dtype="int64") /* ty=Tensor[(11, 35), int64] */;
  %608 = reshape(%607, newshape=[385]) /* ty=Tensor[(385), int64] */;
  %609 = @func_14655(%608) /* ty=(Tensor[(378), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) */;
  %610 = @func_11515() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 8, 78), float32]) */;
  %611 = %606.0;
  %612 = %609.2;
  %613 = %610.1;
  (%611, %612, meta[relay.Constant][56] /* ty=Tensor[(11, 35), int64] */, %613)
}

def @func_10212() -> Tensor[(378), float32] {
  %615 = fn () -> Tensor[(378), float32] {
    %614 = @func_9383() /* ty=(Tensor[(378), float32],) */;
    %614.0
  };
  %615() /* ty=Tensor[(378), float32] */
}

def @func_9658(%var_9652: Tensor[(2, 160), bool]) -> (Tensor[(378), float32], Tensor[(16, 5, 4), bool], Tensor[(2, 160), bool], Tensor[(5, 8, 7), int16]) {
  %616 = @func_9546() /* ty=(Tensor[(378), float32],) */;
  %617 = cast(%var_9652, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
  %618 = reshape(%617, newshape=[16, 5, 4]) /* ty=Tensor[(16, 5, 4), bool] */;
  %619 = @func_6762(%618) /* ty=(Tensor[(16, 5, 4), bool],) */;
  %620 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 28), int32] */, dtype="int32") /* ty=Tensor[(10, 28), int32] */;
  %621 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 28), int32] */, dtype="int32") /* ty=Tensor[(10, 28), int32] */;
  %622 = reshape(%620, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %623 = reshape(%621, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %624 = @func_7409(%622, %623) /* ty=(Tensor[(5, 8, 7), int32],) */;
  %625 = %624.0;
  %626 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 28), int32] */, dtype="int16") /* ty=Tensor[(10, 28), int16] */;
  %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%625, dtype="int16") /* ty=Tensor[(5, 8, 7), int16] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %630 = %616.0;
  %631 = %619.0;
  %632 = logical_xor(%628, %629) /* ty=Tensor[(5, 8, 7), int16] */;
  (%630, %631, %var_9652, %632)
}

def @func_14211() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  @func_14209() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */
}

def @func_11943() -> Tensor[(378), float32] {
  @func_11941() /* ty=Tensor[(378), float32] */
}

def @func_138(%var_136: Tensor[(11, 5, 7), int64], %var_137: Tensor[(11, 5, 7), int64]) -> Tensor[(11, 5, 7), int64] {
  @func_134(%var_136, %var_137) /* ty=Tensor[(11, 5, 7), int64] */
}

def @func_10443() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  %633 = @func_9383() /* ty=(Tensor[(378), float32],) */;
  %634 = %633.0;
  %635 = @func_10211() /* ty=Tensor[(378), float32] */;
  (%634, %635)
}

def @func_12697() -> (Tensor[(378), float32], Tensor[(480), float32], Tensor[(378), float32], bool, bool, Tensor[(14), float32]) {
  %648 = fn () -> (Tensor[(378), float32], Tensor[(480), float32], Tensor[(378), float32], bool, bool, Tensor[(14), float32]) {
    %636 = @func_11319() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %637 = @func_9908() /* ty=(Tensor[(480), float32],) */;
    %638 = @func_9546() /* ty=(Tensor[(378), float32],) */;
    %639 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %640 = cast(meta[relay.Constant][58] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
    %641 = reshape(%639, newshape=[]) /* ty=bool */;
    %642 = reshape(%640, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %643 = @func_12302(%641, %642) /* ty=(Tensor[(320), bool], Tensor[(6, 10, 1), bool], bool, Tensor[(320), bool], Tensor[(14, 1, 1), float32], Tensor[(14), float32]) */;
    %644 = %636.1;
    %645 = %637.0;
    %646 = %638.0;
    %647 = %643.2;
    (%644, %645, %646, %647, False /* ty=bool */, meta[relay.Constant][58] /* ty=Tensor[(14), float32] */)
  };
  %648() /* ty=(Tensor[(378), float32], Tensor[(480), float32], Tensor[(378), float32], bool, bool, Tensor[(14), float32]) */
}

def @func_13971() -> (Tensor[(378), float32],) {
  %651 = fn () -> (Tensor[(378), float32],) {
    %649 = @func_11269() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %650 = %649.1;
    (%650,)
  };
  %651() /* ty=(Tensor[(378), float32],) */
}

def @func_14039() -> Tensor[(128), int64] {
  @func_11643() /* ty=Tensor[(128), int64] */
}

def @func_16888() -> (Tensor[(480), float32], Tensor[(480), float32]) {
  %654 = fn () -> (Tensor[(480), float32], Tensor[(480), float32]) {
    %652 = @func_16370() /* ty=Tensor[(480), float32] */;
    %653 = @func_11162() /* ty=Tensor[(480), float32] */;
    (%652, %653)
  };
  %654() /* ty=(Tensor[(480), float32], Tensor[(480), float32]) */
}

def @func_17530() -> (Tensor[(378), float32],) {
  %657 = fn () -> (Tensor[(378), float32],) {
    %655 = @func_14843() /* ty=(Tensor[(378), float32],) */;
    %656 = %655.0;
    (%656,)
  };
  %657() /* ty=(Tensor[(378), float32],) */
}

def @func_11429() -> (Tensor[(4, 8, 15), float32], Tensor[(720), float64], Tensor[(126, 3), float32], Tensor[(64, 2), int64], Tensor[(16, 5, 4), bool], Tensor[(320), bool]) {
  @func_11427() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(720), float64], Tensor[(126, 3), float32], Tensor[(64, 2), int64], Tensor[(16, 5, 4), bool], Tensor[(320), bool]) */
}

def @func_15622() -> (Tensor[(16, 14, 9), uint32], Tensor[(378), float32]) {
  @func_15620() /* ty=(Tensor[(16, 14, 9), uint32], Tensor[(378), float32]) */
}

def @func_14073() -> Tensor[(720), float64] {
  %658 = fn () -> Tensor[(720), float64] {
    @func_10041() /* ty=Tensor[(720), float64] */
  };
  %658() /* ty=Tensor[(720), float64] */
}

def @func_14909() -> (Tensor[(378), float32], Tensor[(7, 195), float32], Tensor[(600), float32], Tensor[(624), float64]) {
  %667 = fn () -> (Tensor[(378), float32], Tensor[(7, 195), float32], Tensor[(600), float32], Tensor[(624), float64]) {
    %659 = @func_10747() /* ty=(Tensor[(378), float32],) */;
    %660 = cast(meta[relay.Constant][59] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %661 = cast(meta[relay.Constant][60] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
    %662 = reshape(%660, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
    %663 = reshape(%661, newshape=[624]) /* ty=Tensor[(624), float64] */;
    %664 = @func_5592(%662, %663) /* ty=(Tensor[(40), bool], Tensor[(7, 195), float32], Tensor[(40), bool], Tensor[(560), bool], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(5, 12, 10), float64]) */;
    %665 = %659.0;
    %666 = %664.1;
    (%665, %666, meta[relay.Constant][59] /* ty=Tensor[(600), float32] */, meta[relay.Constant][60] /* ty=Tensor[(624), float64] */)
  };
  %667() /* ty=(Tensor[(378), float32], Tensor[(7, 195), float32], Tensor[(600), float32], Tensor[(624), float64]) */
}

def @func_14845() -> (Tensor[(378), float32],) {
  @func_14843() /* ty=(Tensor[(378), float32],) */
}

def @func_10594() -> (Tensor[(4, 8, 15), float32],) {
  %668 = @func_9895() /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */;
  %669 = %668.1;
  (%669,)
}

def @func_10643() -> (Tensor[(128), int64],) {
  @func_10641() /* ty=(Tensor[(128), int64],) */
}

def @func_13236() -> (Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) {
  %670 = @func_10594() /* ty=(Tensor[(4, 8, 15), float32],) */;
  %671 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
  %672 = cast(meta[relay.Constant][61] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %673 = reshape(%672, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %674 = @func_8481(%673) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %675 = %670.0;
  %676 = @func_11041() /* ty=Tensor[(378), float32] */;
  %677 = %671.0;
  %678 = %674.0;
  (%675, %676, %677, %678, meta[relay.Constant][61] /* ty=Tensor[(720), float64] */)
}

def @func_16765() -> Tensor[(378), float32] {
  @func_16763() /* ty=Tensor[(378), float32] */
}

def @func_15725(%var_15723: Tensor[(385), int64]) -> (Tensor[(378), float32], Tensor[(385, 378), bool], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(220), bool], Tensor[(14, 1), float64]) {
  @func_15722(%var_15723) /* ty=(Tensor[(378), float32], Tensor[(385, 378), bool], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(220), bool], Tensor[(14, 1), float64]) */
}

def @func_10244() -> Tensor[(378), float32] {
  @func_10242() /* ty=Tensor[(378), float32] */
}

def @func_17806() -> (Tensor[(9, 4, 9), bool],) {
  %682 = fn () -> (Tensor[(9, 4, 9), bool],) {
    %679 = cast(meta[relay.Constant][62] /* ty=int16 */, dtype="bool") /* ty=bool */;
    %680 = cast(meta[relay.Constant][63] /* ty=Tensor[(9, 4, 9), int16] */, dtype="bool") /* ty=Tensor[(9, 4, 9), bool] */;
    %681 = equal(%679, %680) /* ty=Tensor[(9, 4, 9), bool] */;
    (%681,)
  };
  %682() /* ty=(Tensor[(9, 4, 9), bool],) */
}

def @func_11162() -> Tensor[(480), float32] {
  %683 = @func_9776() /* ty=(Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) */;
  %683.2
}

def @func_11241(%var_11239: Tensor[(720, 1), float32]) -> (Tensor[(10, 13, 8), uint32], Tensor[(9, 7, 6), float32], Tensor[(720, ?), int64], Tensor[(64, 2), int64], Tensor[(720, ?), uint64]) {
  @func_11238(%var_11239) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(9, 7, 6), float32], Tensor[(720, ?), int64], Tensor[(64, 2), int64], Tensor[(720, ?), uint64]) */
}

def @func_17294() -> (Tensor[(378), float32],) {
  %685 = fn () -> (Tensor[(378), float32],) {
    %684 = @func_16340() /* ty=Tensor[(378), float32] */;
    (%684,)
  };
  %685() /* ty=(Tensor[(378), float32],) */
}

def @func_6764(%var_6763: Tensor[(16, 5, 4), bool]) -> (Tensor[(16, 5, 4), bool],) {
  %691 = fn (%var_6755: Tensor[(16, 5, 4), bool]) -> (Tensor[(16, 5, 4), bool],) {
    %686 = cast(%var_6755, dtype="bool") /* ty=Tensor[(16, 5, 4), bool] */;
    %687 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(16, 5, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %688 = cast(meta[relay.Constant][64] /* ty=Tensor[(16, 5, 4), bool] */, dtype="bool") /* ty=Tensor[(16, 5, 4), bool] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %690 = logical_and(%688, %689) /* ty=Tensor[(16, 5, 4), bool] */;
    (%690,)
  };
  %691(%var_6763) /* ty=(Tensor[(16, 5, 4), bool],) */
}

def @func_10027() -> Tensor[(16, 14, 9), uint32] {
  %693 = fn () -> Tensor[(16, 14, 9), uint32] {
    %692 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
    %692.1
  };
  %693() /* ty=Tensor[(16, 14, 9), uint32] */
}

def @func_17596() -> (Tensor[(378), float32],) {
  %695 = fn () -> (Tensor[(378), float32],) {
    %694 = @func_10998() /* ty=Tensor[(378), float32] */;
    (%694,)
  };
  %695() /* ty=(Tensor[(378), float32],) */
}

def @func_12840() -> (Tensor[(378), float32],) {
  %696 = @func_11941() /* ty=Tensor[(378), float32] */;
  (%696,)
}

def @func_16951() -> (Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(378), float32]) {
  @func_16949() /* ty=(Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(378), float32]) */
}

def @func_13302(%var_13299: Tensor[(40), bool], %var_13300: Tensor[(4, 36), uint32], %var_13301: Tensor[(2016), uint32]) -> (Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float64], Tensor[(4, 36), uint32], Tensor[(14), float64], Tensor[(16, 14, 9), bool]) {
  @func_13297(%var_13299, %var_13300, %var_13301) /* ty=(Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float64], Tensor[(4, 36), uint32], Tensor[(14), float64], Tensor[(16, 14, 9), bool]) */
}

def @func_15693(%var_15665: Tensor[(7, 10, 10), int8], %var_15666: Tensor[(7, 10, 10), int8], %var_15679: Tensor[(720), float32]) -> (Tensor[(7, 10, 10), int8], Tensor[(720, ?), int64], Tensor[(720), float32], Tensor[(10, 13, 8), uint32]) {
  %697 = cast(%var_15666, dtype="int8") /* ty=Tensor[(7, 10, 10), int8] */;
  %698 = shape_of(%var_15665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%var_15665, dtype="int8") /* ty=Tensor[(7, 10, 10), int8] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %701 = cast(%var_15679, dtype="float32") /* ty=Tensor[(720), float32] */;
  %702 = reshape(%701, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
  %703 = @func_11238(%702) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(9, 7, 6), float32], Tensor[(720, ?), int64], Tensor[(64, 2), int64], Tensor[(720, ?), uint64]) */;
  %704 = @func_9895() /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */;
  %705 = logical_xor(%699, %700) /* ty=Tensor[(7, 10, 10), int8] */;
  %706 = %703.2;
  %707 = %704.0;
  (%705, %706, %var_15679, %707)
}

def @func_11976(%var_11974: Tensor[(624), float64], %var_11975: Tensor[(14, 1), float32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(5, 7, 7), float32], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(624), float64]) {
  %722 = fn (%var_11968: Tensor[(624), float64], %var_11969: Tensor[(14, 1), float32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(5, 7, 7), float32], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(624), float64]) {
    %708 = @func_9383() /* ty=(Tensor[(378), float32],) */;
    %709 = @func_11872() /* ty=(Tensor[(480), float32], Tensor[(378), float32], Tensor[(320), bool]) */;
    %710 = cast(%var_11968, dtype="float64") /* ty=Tensor[(624), float64] */;
    %711 = cast(%var_11969, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
    %712 = reshape(%710, newshape=[624]) /* ty=Tensor[(624), float64] */;
    %713 = reshape(%711, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %714 = @func_2422(%712, %713) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
    %715 = cast(%var_11969, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
    %716 = reshape(%715, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %717 = @func_9635(%716) /* ty=(Tensor[(378), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14), float32], Tensor[(9, 7, 6), float32]) */;
    %718 = %708.0;
    %719 = %709.1;
    %720 = %714.0;
    %721 = %717.2;
    (%718, %719, %720, %var_11968, %var_11969, %721)
  };
  %722(%var_11974, %var_11975) /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(5, 7, 7), float32], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(624), float64]) */
}

def @func_16638() -> (Tensor[(378), float32], Tensor[(64, 2), int64]) {
  %723 = @func_15202() /* ty=(Tensor[(378), float32],) */;
  %724 = @func_9868() /* ty=(Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) */;
  %725 = %723.0;
  %726 = %724.1;
  (%725, %726)
}

def @func_11899(%var_11897: Tensor[(3, 720), float64]) -> (Tensor[(3, 720), float64], Tensor[(128), int64]) {
  @func_11896(%var_11897) /* ty=(Tensor[(3, 720), float64], Tensor[(128), int64]) */
}

def @func_11427() -> (Tensor[(4, 8, 15), float32], Tensor[(720), float64], Tensor[(126, 3), float32], Tensor[(64, 2), int64], Tensor[(16, 5, 4), bool], Tensor[(320), bool]) {
  %727 = @func_9776() /* ty=(Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) */;
  %728 = cast(meta[relay.Constant][65] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %729 = reshape(%728, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %730 = @func_8481(%729) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
  %731 = %730.5;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(126, 3), float32] */;
  %733 = cast(meta[relay.Constant][65] /* ty=Tensor[(720), float64] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %734 = reshape(%733, newshape=[720, 1]) /* ty=Tensor[(720, 1), float32] */;
  %735 = @func_11238(%734) /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(9, 7, 6), float32], Tensor[(720, ?), int64], Tensor[(64, 2), int64], Tensor[(720, ?), uint64]) */;
  %736 = cast(meta[relay.Constant][66] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %737 = reshape(%736, newshape=[16, 5, 4]) /* ty=Tensor[(16, 5, 4), bool] */;
  %738 = @func_6762(%737) /* ty=(Tensor[(16, 5, 4), bool],) */;
  %739 = %727.1;
  %740 = sigmoid(%732) /* ty=Tensor[(126, 3), float32] */;
  %741 = %735.3;
  %742 = %738.0;
  (%739, meta[relay.Constant][65] /* ty=Tensor[(720), float64] */, %740, %741, %742, meta[relay.Constant][66] /* ty=Tensor[(320), bool] */)
}

def @func_11707() -> Tensor[(378), float32] {
  %744 = fn () -> Tensor[(378), float32] {
    %743 = @func_10124() /* ty=(Tensor[(378), float32], Tensor[(64, 2), int64]) */;
    %743.0
  };
  %744() /* ty=Tensor[(378), float32] */
}

def @func_16074(%var_16056: Tensor[(1365), float32]) -> (Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(1365), float32]) {
  %745 = @func_13236() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) */;
  %746 = cast(%var_16056, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %747 = cast(%var_16056, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %748 = reshape(%746, newshape=[455, 3]) /* ty=Tensor[(455, 3), float32] */;
  %749 = reshape(%747, newshape=[455, 3]) /* ty=Tensor[(455, 3), float32] */;
  %750 = @func_12378(%748, %749) /* ty=(Tensor[(378), float32], Tensor[(16, 16, 16), float64], Tensor[(40), bool], Tensor[(560), bool], Tensor[(455, 3), float32], Tensor[(16, 14, 9), uint32]) */;
  %751 = %745.0;
  %752 = %750.0;
  (%751, %752, %var_16056)
}

def @func_9172(%var_9171: Tensor[(10, 13, 8), uint32]) -> Tensor[(10, 13, 8), bool] {
  %759 = fn (%var_9165: Tensor[(10, 13, 8), uint32]) -> Tensor[(10, 13, 8), bool] {
    %753 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
    %754 = %753.2;
    %755 = cast(%var_9165, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
    %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
    %757 = cast(%754, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
    %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%757, %758) /* ty=Tensor[(10, 13, 8), bool] */
  };
  %759(%var_9171) /* ty=Tensor[(10, 13, 8), bool] */
}

def @func_967(%var_949: Tensor[(15, 15, 8), int32]) -> (Tensor[(15, 15, 8), int32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) {
  %760 = cast(meta[relay.Constant][67] /* ty=Tensor[(15, 15, 8), int32] */, dtype="int32") /* ty=Tensor[(15, 15, 8), int32] */;
  %761 = shape_of(%var_949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%var_949, dtype="int32") /* ty=Tensor[(15, 15, 8), int32] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %764 = cast(meta[relay.Constant][68] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %765 = reshape(%764, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
  %766 = right_shift(%762, %763) /* ty=Tensor[(15, 15, 8), int32] */;
  %767 = @func_166(%765) /* ty=Tensor[(14, 1, 1), float64] */;
  (%766, %767, meta[relay.Constant][68] /* ty=Tensor[(14), float64] */)
}

def @func_8262(%var_8261: Tensor[(9, 7, 6), float32]) -> (Tensor[(9, 7, 6), float32],) {
  %770 = fn (%var_8257: Tensor[(9, 7, 6), float32]) -> (Tensor[(9, 7, 6), float32],) {
    %768 = cast(%var_8257, dtype="float32") /* ty=Tensor[(9, 7, 6), float32] */;
    %769 = exp(%768) /* ty=Tensor[(9, 7, 6), float32] */;
    (%769,)
  };
  %770(%var_8261) /* ty=(Tensor[(9, 7, 6), float32],) */
}

def @func_10620() -> Tensor[(14), float64] {
  %772 = fn () -> Tensor[(14), float64] {
    %771 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
    %771.4
  };
  %772() /* ty=Tensor[(14), float64] */
}

def @func_11657() -> Tensor[(378), float32] {
  %774 = fn () -> Tensor[(378), float32] {
    %773 = @func_9567() /* ty=(Tensor[(378), float32],) */;
    %773.0
  };
  %774() /* ty=Tensor[(378), float32] */
}

def @func_14209() -> (Tensor[(378), float32], Tensor[(378), float32]) {
  %775 = @func_13609() /* ty=Tensor[(378), float32] */;
  %776 = @func_11941() /* ty=Tensor[(378), float32] */;
  (%775, %776)
}

def @func_14238() -> Tensor[(378), float32] {
  %777 = @func_12242() /* ty=(Tensor[(378), float32],) */;
  %777.0
}

def @func_9568() -> (Tensor[(378), float32],) {
  %780 = fn () -> (Tensor[(378), float32],) {
    %778 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
    %779 = %778.0;
    (%779,)
  };
  %780() /* ty=(Tensor[(378), float32],) */
}

def @func_9546() -> (Tensor[(378), float32],) {
  %781 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
  %782 = %781.0;
  (%782,)
}

def @func_10229(%var_10227: Tensor[(2, 360), float64]) -> (Tensor[(16, 14, 9), uint32], Tensor[(378), float32], Tensor[(720), float64], Tensor[(2, 360), float64]) {
  @func_10226(%var_10227) /* ty=(Tensor[(16, 14, 9), uint32], Tensor[(378), float32], Tensor[(720), float64], Tensor[(2, 360), float64]) */
}

def @func_1041(%var_1027: Tensor[(3, 13, 16), float64], %var_1031: Tensor[(128), int64]) -> (Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) {
  %783 = cast(%var_1027, dtype="float64") /* ty=Tensor[(3, 13, 16), float64] */;
  %784 = cast(%var_1031, dtype="int64") /* ty=Tensor[(128), int64] */;
  %785 = cast(%var_1031, dtype="int64") /* ty=Tensor[(128), int64] */;
  %786 = cast(meta[relay.Constant][69] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %787 = reshape(%784, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %788 = reshape(%785, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %789 = reshape(%786, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %790 = @func_679(%787, %788, %789) /* ty=(Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) */;
  %791 = atanh(%783) /* ty=Tensor[(3, 13, 16), float64] */;
  %792 = %790.6;
  (%791, %792, %var_1031, meta[relay.Constant][69] /* ty=Tensor[(14), float32] */)
}

def @func_8886(%var_8855: Tensor[(6, 8, 4), float64], %var_8859: Tensor[(280), int32], %var_8876: Tensor[(32, 4), int64], %var_8879: Tensor[(4096), float64]) -> (Tensor[(6, 8, 4), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(32, 4), int64], Tensor[(16, 16, 16), float64], Tensor[(4096), float64]) {
  %793 = cast(%var_8855, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %794 = cast(%var_8859, dtype="int32") /* ty=Tensor[(280), int32] */;
  %795 = cast(%var_8859, dtype="int32") /* ty=Tensor[(280), int32] */;
  %796 = reshape(%794, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %797 = reshape(%795, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %798 = @func_7409(%796, %797) /* ty=(Tensor[(5, 8, 7), int32],) */;
  %799 = cast(meta[relay.Constant][70] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %800 = cast(%var_8876, dtype="int64") /* ty=Tensor[(32, 4), int64] */;
  %801 = reshape(%799, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), float64] */;
  %802 = reshape(%800, newshape=[128]) /* ty=Tensor[(128), int64] */;
  %803 = @func_1041(%801, %802) /* ty=(Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) */;
  %804 = cast(%var_8879, dtype="float64") /* ty=Tensor[(4096), float64] */;
  %805 = reshape(%804, newshape=[16, 16, 16]) /* ty=Tensor[(16, 16, 16), float64] */;
  %806 = exp(%793) /* ty=Tensor[(6, 8, 4), float64] */;
  %807 = %798.0;
  %808 = %803.2;
  %809 = @func_4145(%805) /* ty=Tensor[(16, 16, 16), float64] */;
  (%806, %807, %var_8859, %808, meta[relay.Constant][70] /* ty=Tensor[(624), float64] */, %var_8876, %809, %var_8879)
}

def @func_14754(%var_14752: Tensor[(1, 720), float64]) -> (Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(560), bool], Tensor[(?, 720), bool]) {
  @func_14751(%var_14752) /* ty=(Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(560), bool], Tensor[(?, 720), bool]) */
}

def @func_14041() -> Tensor[(128), int64] {
  @func_14039() /* ty=Tensor[(128), int64] */
}

def @func_6838(%var_6813: Tensor[(8, 5, 3), float64], %var_6827: Tensor[(20, 2), bool]) -> (Tensor[(8, 5, 3), float64], Tensor[(4, 14, 10), bool], Tensor[(20, 2), bool], Tensor[(560), bool]) {
  %810 = cast(%var_6813, dtype="float64") /* ty=Tensor[(8, 5, 3), float64] */;
  %811 = cast(%var_6827, dtype="bool") /* ty=Tensor[(20, 2), bool] */;
  %812 = cast(meta[relay.Constant][71] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %813 = reshape(%811, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), bool] */;
  %814 = reshape(%812, newshape=[4, 14, 10]) /* ty=Tensor[(4, 14, 10), bool] */;
  %815 = asin(%810) /* ty=Tensor[(8, 5, 3), float64] */;
  %816 = @func_3525(%813, %814) /* ty=Tensor[(4, 14, 10), bool] */;
  (%815, %816, %var_6827, meta[relay.Constant][71] /* ty=Tensor[(560), bool] */)
}

def @func_12175() -> Tensor[(378), float32] {
  %817 = fn () -> Tensor[(378), float32] {
    @func_11381() /* ty=Tensor[(378), float32] */
  };
  %817() /* ty=Tensor[(378), float32] */
}

def @func_14320(%var_14318: Tensor[(1, 40), bool]) -> (Tensor[(480), float32], Tensor[(378), float32], Tensor[(4, 14, 10), bool], Tensor[(120), float64], Tensor[(1, 40), bool]) {
  @func_14317(%var_14318) /* ty=(Tensor[(480), float32], Tensor[(378), float32], Tensor[(4, 14, 10), bool], Tensor[(120), float64], Tensor[(1, 40), bool]) */
}

def @func_16589() -> Tensor[(378), float32] {
  %818 = fn () -> Tensor[(378), float32] {
    @func_13609() /* ty=Tensor[(378), float32] */
  };
  %818() /* ty=Tensor[(378), float32] */
}

def @func_7413(%var_7411: Tensor[(5, 8, 7), int32], %var_7412: Tensor[(5, 8, 7), int32]) -> (Tensor[(5, 8, 7), int32],) {
  @func_7409(%var_7411, %var_7412) /* ty=(Tensor[(5, 8, 7), int32],) */
}

def @func_2425(%var_2423: Tensor[(624), float64], %var_2424: Tensor[(14), float32]) -> (Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) {
  %837 = fn (%var_2395: Tensor[(624), float64], %var_2406: Tensor[(14), float32]) -> (Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) {
    %819 = cast(meta[relay.Constant][72] /* ty=Tensor[(5, 7, 7), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 7), float32] */;
    %820 = cast(%var_2395, dtype="float64") /* ty=Tensor[(624), float64] */;
    %821 = cast(meta[relay.Constant][73] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %822 = reshape(%820, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), float64] */;
    %823 = reshape(%821, newshape=[128]) /* ty=Tensor[(128), int64] */;
    %824 = @func_1041(%822, %823) /* ty=(Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) */;
    %825 = cast(%var_2406, dtype="float32") /* ty=Tensor[(14), float32] */;
    %826 = reshape(%825, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
    %827 = @func_540(%826) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
    %828 = cast(%var_2395, dtype="float64") /* ty=Tensor[(624), float64] */;
    %829 = cast(meta[relay.Constant][73] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %830 = reshape(%828, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), float64] */;
    %831 = reshape(%829, newshape=[128]) /* ty=Tensor[(128), int64] */;
    %832 = @func_1041(%830, %831) /* ty=(Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) */;
    %833 = sin(%819) /* ty=Tensor[(5, 7, 7), float32] */;
    %834 = %824.2;
    %835 = %827.0;
    %836 = %832.2;
    (%833, %834, %var_2395, meta[relay.Constant][73] /* ty=Tensor[(128), int64] */, %835, %var_2406, %836)
  };
  %837(%var_2423, %var_2424) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */
}

def @func_11516() -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 8, 78), float32]) {
  %847 = fn () -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 8, 78), float32]) {
    %838 = @func_9567() /* ty=(Tensor[(378), float32],) */;
    %839 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
    %840 = %839.1;
    %841 = cast(%840, dtype="float32") /* ty=Tensor[(14, 8, 78), float32] */;
    %842 = tan(%841) /* ty=Tensor[(14, 8, 78), float32] */;
    %843 = cast(%842, dtype="float32") /* ty=Tensor[(14, 8, 78), float32] */;
    %844 = %838.0;
    %845 = @func_9981() /* ty=Tensor[(378), float32] */;
    %846 = log10(%843) /* ty=Tensor[(14, 8, 78), float32] */;
    (%844, %845, %846)
  };
  %847() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(14, 8, 78), float32]) */
}

def @func_17416() -> Tensor[(378), float32] {
  @func_17414() /* ty=Tensor[(378), float32] */
}

def @func_5516(%var_5513: Tensor[(13, 15, 7), float32], %var_5514: Tensor[(40), bool], %var_5515: Tensor[(40, 14), bool]) -> (Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(16, 16, 16), float64], Tensor[(4096), float64], Tensor[(5, 12, ?), bool], uint16, Tensor[(13, 15, 7), float32], Tensor[(13, 15, 7), int64], Tensor[(1800), int32], Tensor[(720), float64], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(40, 14), bool], Tensor[(14, 1, 1), float64], Tensor[(13, 15, 7), float32]) {
  %893 = fn (%var_5431: Tensor[(13, 15, 7), float32], %var_5487: Tensor[(40), bool], %var_5488: Tensor[(40, 14), bool]) -> (Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(16, 16, 16), float64], Tensor[(4096), float64], Tensor[(5, 12, ?), bool], uint16, Tensor[(13, 15, 7), float32], Tensor[(13, 15, 7), int64], Tensor[(1800), int32], Tensor[(720), float64], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(40, 14), bool], Tensor[(14, 1, 1), float64], Tensor[(13, 15, 7), float32]) {
    %848 = cast(meta[relay.Constant][74] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %849 = cast(meta[relay.Constant][74] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %850 = cast(meta[relay.Constant][75] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
    %851 = reshape(%848, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
    %852 = reshape(%849, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
    %853 = reshape(%850, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %854 = @func_679(%851, %852, %853) /* ty=(Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) */;
    %855 = cast(meta[relay.Constant][76] /* ty=Tensor[(4096), float64] */, dtype="float64") /* ty=Tensor[(4096), float64] */;
    %856 = reshape(%855, newshape=[16, 16, 16]) /* ty=Tensor[(16, 16, 16), float64] */;
    %857 = cast(meta[relay.Constant][77] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %858 = reshape(%857, newshape=[]) /* ty=uint16 */;
    %859 = @func_4598(%858) /* ty=(Tensor[(5, 12, ?), bool],) */;
    %860 = cast(%var_5431, dtype="float32") /* ty=Tensor[(13, 15, 7), float32] */;
    %861 = asinh(%860) /* ty=Tensor[(13, 15, 7), float32] */;
    %862 = cast(%var_5431, dtype="float32") /* ty=Tensor[(13, 15, 7), float32] */;
    %863 = sin(%862) /* ty=Tensor[(13, 15, 7), float32] */;
    %864 = cast(%863, dtype="float32") /* ty=Tensor[(13, 15, 7), float32] */;
    %865 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
    %866 = cast(%861, dtype="float32") /* ty=Tensor[(13, 15, 7), float32] */;
    %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %868 = cast(%861, dtype="int64") /* ty=Tensor[(13, 15, 7), int64] */;
    %869 = shape_of(%863, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%863, dtype="int64") /* ty=Tensor[(13, 15, 7), int64] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %872 = cast(meta[relay.Constant][78] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %873 = cast(meta[relay.Constant][74] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %874 = reshape(%872, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
    %875 = reshape(%873, newshape=[8, 16]) /* ty=Tensor[(8, 16), int64] */;
    %876 = @func_3396(%874, %875) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) */;
    %877 = cast(%var_5487, dtype="bool") /* ty=Tensor[(40), bool] */;
    %878 = cast(%var_5488, dtype="bool") /* ty=Tensor[(40, 14), bool] */;
    %879 = reshape(%877, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), bool] */;
    %880 = reshape(%878, newshape=[4, 14, 10]) /* ty=Tensor[(4, 14, 10), bool] */;
    %881 = cast(meta[relay.Constant][75] /* ty=Tensor[(14), float32] */, dtype="float64") /* ty=Tensor[(14), float64] */;
    %882 = reshape(%881, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
    %883 = cast(%863, dtype="float32") /* ty=Tensor[(13, 15, 7), float32] */;
    %884 = %854.6;
    %885 = @func_4145(%856) /* ty=Tensor[(16, 16, 16), float64] */;
    %886 = %859.0;
    %887 = floor_divide(%866, %867) /* ty=Tensor[(13, 15, 7), float32] */;
    %888 = minimum(%870, %871) /* ty=Tensor[(13, 15, 7), int64] */;
    %889 = %876.4;
    %890 = @func_3525(%879, %880) /* ty=Tensor[(4, 14, 10), bool] */;
    %891 = @func_166(%882) /* ty=Tensor[(14, 1, 1), float64] */;
    %892 = log2(%883) /* ty=Tensor[(13, 15, 7), float32] */;
    (%884, meta[relay.Constant][74] /* ty=Tensor[(128), int64] */, meta[relay.Constant][75] /* ty=Tensor[(14), float32] */, %885, meta[relay.Constant][76] /* ty=Tensor[(4096), float64] */, %886, meta[relay.Constant][77] /* ty=uint16 */, %887, %888, %889, meta[relay.Constant][78] /* ty=Tensor[(720), float64] */, %890, %var_5487, %var_5488, %891, %892)
  };
  %893(%var_5513, %var_5514, %var_5515) /* ty=(Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(16, 16, 16), float64], Tensor[(4096), float64], Tensor[(5, 12, ?), bool], uint16, Tensor[(13, 15, 7), float32], Tensor[(13, 15, 7), int64], Tensor[(1800), int32], Tensor[(720), float64], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(40, 14), bool], Tensor[(14, 1, 1), float64], Tensor[(13, 15, 7), float32]) */
}

def @func_13005() -> (Tensor[(378), float32],) {
  %896 = fn () -> (Tensor[(378), float32],) {
    %894 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %895 = %894.0;
    (%895,)
  };
  %896() /* ty=(Tensor[(378), float32],) */
}

def @func_17244() -> (Tensor[(720), float64], Tensor[(378), float32], Tensor[(378), float32]) {
  %897 = @func_13810() /* ty=(Tensor[(480), float32], Tensor[(720), float64], Tensor[(9, 7, 6), float32]) */;
  %898 = @func_12840() /* ty=(Tensor[(378), float32],) */;
  %899 = %897.1;
  %900 = @func_10779() /* ty=Tensor[(378), float32] */;
  %901 = %898.0;
  (%899, %900, %901)
}

def @func_17503(%var_17500: Tensor[(144), uint32], %var_17501: Tensor[(2016, 1), uint32], %var_17502: Tensor[(2016, 1), uint32]) -> (Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016, 378), uint32], Tensor[(2016, 378), uint8], Tensor[(2016, ?), uint64]) {
  %921 = fn (%var_17457: Tensor[(144), uint32], %var_17458: Tensor[(2016, 1), uint32], %var_17485: Tensor[(2016, 1), uint32]) -> (Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016, 378), uint32], Tensor[(2016, 378), uint8], Tensor[(2016, ?), uint64]) {
    %902 = cast(%var_17457, dtype="uint32") /* ty=Tensor[(144), uint32] */;
    %903 = cast(%var_17458, dtype="uint32") /* ty=Tensor[(2016, 1), uint32] */;
    %904 = reshape(%902, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint32] */;
    %905 = reshape(%903, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), uint32] */;
    %906 = @func_436(%904, %905) /* ty=(Tensor[(16, 14, 9), uint32],) */;
    %907 = @func_15468() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %908 = %907.1;
    %909 = cast(%908, dtype="uint32") /* ty=Tensor[(378), uint32] */;
    %910 = cast(%var_17458, dtype="uint32") /* ty=Tensor[(2016, 1), uint32] */;
    %911 = cast(%908, dtype="uint8") /* ty=Tensor[(378), uint8] */;
    %912 = cast(%var_17458, dtype="uint8") /* ty=Tensor[(2016, 1), uint8] */;
    %913 = cast(%var_17485, dtype="uint64") /* ty=Tensor[(2016, 1), uint64] */;
    %914 = shape_of(%var_17458, dtype="int32") /* ty=Tensor[(2), int32] */;
    %915 = cast(%var_17458, dtype="uint64") /* ty=Tensor[(2016, 1), uint64] */;
    %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %917 = %906.0;
    %918 = bitwise_or(%909, %910) /* ty=Tensor[(2016, 378), uint32] */;
    %919 = left_shift(%911, %912) /* ty=Tensor[(2016, 378), uint8] */;
    %920 = bitwise_or(%915, %916) /* ty=Tensor[(2016, ?), uint64] */;
    (%917, %var_17457, %918, %919, %920)
  };
  %921(%var_17500, %var_17501, %var_17502) /* ty=(Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016, 378), uint32], Tensor[(2016, 378), uint8], Tensor[(2016, ?), uint64]) */
}

def @func_10998() -> Tensor[(378), float32] {
  @func_10211() /* ty=Tensor[(378), float32] */
}

def @func_11761() -> (Tensor[(378), float32],) {
  %924 = fn () -> (Tensor[(378), float32],) {
    %922 = @func_9383() /* ty=(Tensor[(378), float32],) */;
    %923 = %922.0;
    (%923,)
  };
  %924() /* ty=(Tensor[(378), float32],) */
}

def @func_15620() -> (Tensor[(16, 14, 9), uint32], Tensor[(378), float32]) {
  %925 = @func_10058() /* ty=(Tensor[(378), float32],) */;
  %926 = @func_10026() /* ty=Tensor[(16, 14, 9), uint32] */;
  %927 = %925.0;
  (%926, %927)
}

def @func_9777() -> (Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) {
  %935 = fn () -> (Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) {
    %928 = @func_9546() /* ty=(Tensor[(378), float32],) */;
    %929 = cast(meta[relay.Constant][79] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %930 = reshape(%929, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
    %931 = @func_9349() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */;
    %932 = %928.0;
    %933 = @func_6118(%930) /* ty=Tensor[(4, 8, 15), float32] */;
    %934 = %931.2;
    (%932, %933, meta[relay.Constant][79] /* ty=Tensor[(480), float32] */, %934)
  };
  %935() /* ty=(Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) */
}

def @func_5166(%var_5164: Tensor[(10, 11, 2), bool], %var_5165: Tensor[(14), float64]) -> (Tensor[(10, 11, 2), bool], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) {
  %944 = fn (%var_5152: Tensor[(10, 11, 2), bool], %var_5160: Tensor[(14), float64]) -> (Tensor[(10, 11, 2), bool], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) {
    %936 = cast(meta[relay.Constant][80] /* ty=Tensor[(10, 11, 2), bool] */, dtype="bool") /* ty=Tensor[(10, 11, 2), bool] */;
    %937 = shape_of(%var_5152, dtype="int32") /* ty=Tensor[(3), int32] */;
    %938 = cast(%var_5152, dtype="bool") /* ty=Tensor[(10, 11, 2), bool] */;
    %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %940 = cast(%var_5160, dtype="float64") /* ty=Tensor[(14), float64] */;
    %941 = reshape(%940, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float64] */;
    %942 = logical_or(%938, %939) /* ty=Tensor[(10, 11, 2), bool] */;
    %943 = @func_166(%941) /* ty=Tensor[(14, 1, 1), float64] */;
    (%942, %943, %var_5160)
  };
  %944(%var_5164, %var_5165) /* ty=(Tensor[(10, 11, 2), bool], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */
}

def @func_10042() -> Tensor[(720), float64] {
  %946 = fn () -> Tensor[(720), float64] {
    %945 = @func_9868() /* ty=(Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) */;
    %945.2
  };
  %946() /* ty=Tensor[(720), float64] */
}

def @func_13897(%var_13896: Tensor[(1040), uint32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(1040), uint32]) {
  %953 = fn (%var_13883: Tensor[(1040), uint32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(1040), uint32]) {
    %947 = cast(%var_13883, dtype="uint32") /* ty=Tensor[(1040), uint32] */;
    %948 = reshape(%947, newshape=[10, 13, 8]) /* ty=Tensor[(10, 13, 8), uint32] */;
    %949 = @func_12949(%948) /* ty=(Tensor[(480), float32], Tensor[(10, 13, 8), bool], Tensor[(378), float32]) */;
    %950 = @func_11381() /* ty=Tensor[(378), float32] */;
    %951 = @func_12174() /* ty=Tensor[(378), float32] */;
    %952 = %949.2;
    (%950, %951, %952, %var_13883)
  };
  %953(%var_13896) /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(1040), uint32]) */
}

def @func_14240() -> Tensor[(378), float32] {
  @func_14238() /* ty=Tensor[(378), float32] */
}

def @func_16341() -> Tensor[(378), float32] {
  %955 = fn () -> Tensor[(378), float32] {
    %954 = @func_10747() /* ty=(Tensor[(378), float32],) */;
    %954.0
  };
  %955() /* ty=Tensor[(378), float32] */
}

def @func_12036(%var_12034: uint64, %var_12035: Tensor[(6, 3, 7), uint64]) -> (Tensor[(6, 3, 7), uint64], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) {
  %962 = fn (%var_12019: uint64, %var_12020: Tensor[(6, 3, 7), uint64]) -> (Tensor[(6, 3, 7), uint64], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) {
    %956 = cast(%var_12019, dtype="uint64") /* ty=uint64 */;
    %957 = cast(%var_12020, dtype="uint64") /* ty=Tensor[(6, 3, 7), uint64] */;
    %958 = cast(meta[relay.Constant][81] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %959 = reshape(%958, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
    %960 = add(%956, %957) /* ty=Tensor[(6, 3, 7), uint64] */;
    %961 = @func_6118(%959) /* ty=Tensor[(4, 8, 15), float32] */;
    (%960, %961, meta[relay.Constant][81] /* ty=Tensor[(480), float32] */)
  };
  %962(%var_12034, %var_12035) /* ty=(Tensor[(6, 3, 7), uint64], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */
}

def @func_10749() -> (Tensor[(378), float32],) {
  @func_10747() /* ty=(Tensor[(378), float32],) */
}

def @func_11832() -> (Tensor[(378), float32],) {
  %964 = fn () -> (Tensor[(378), float32],) {
    %963 = @func_9981() /* ty=Tensor[(378), float32] */;
    (%963,)
  };
  %964() /* ty=(Tensor[(378), float32],) */
}

def @func_16690() -> Tensor[(378), float32] {
  %966 = fn () -> Tensor[(378), float32] {
    %965 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %965.0
  };
  %966() /* ty=Tensor[(378), float32] */
}

def @func_134(%var_123: Tensor[(11, 5, 7), int64], %var_124: Tensor[(11, 5, 7), int64]) -> Tensor[(11, 5, 7), int64] {
  %967 = cast(%var_124, dtype="int64") /* ty=Tensor[(11, 5, 7), int64] */;
  %968 = shape_of(%var_123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %969 = cast(%var_123, dtype="int64") /* ty=Tensor[(11, 5, 7), int64] */;
  %970 = dyn.reshape(%967, %968, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%969, %970) /* ty=Tensor[(11, 5, 7), int64] */
}

def @func_17683(%var_17664: Tensor[(64, 2), float32]) -> (Tensor[(64, 2), bool], Tensor[(480), float32], Tensor[(378), float32]) {
  %971 = @func_15739() /* ty=(Tensor[(64, 2), float32],) */;
  %972 = %971.0;
  %973 = cast(%var_17664, dtype="bool") /* ty=Tensor[(64, 2), bool] */;
  %974 = shape_of(%972, dtype="int32") /* ty=Tensor[(2), int32] */;
  %975 = cast(%972, dtype="bool") /* ty=Tensor[(64, 2), bool] */;
  %976 = dyn.reshape(%973, %974, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %977 = @func_9776() /* ty=(Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) */;
  %978 = @func_11760() /* ty=(Tensor[(378), float32],) */;
  %979 = greater(%975, %976) /* ty=Tensor[(64, 2), bool] */;
  %980 = %977.2;
  %981 = %978.0;
  (%979, %980, %981)
}

def @func_5596(%var_5594: Tensor[(5, 12, 10), float32], %var_5595: Tensor[(624), float64]) -> (Tensor[(40), bool], Tensor[(7, 195), float32], Tensor[(40), bool], Tensor[(560), bool], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(5, 12, 10), float64]) {
  @func_5592(%var_5594, %var_5595) /* ty=(Tensor[(40), bool], Tensor[(7, 195), float32], Tensor[(40), bool], Tensor[(560), bool], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(5, 12, 10), float64]) */
}

def @func_16404() -> Tensor[(378), float64] {
  %983 = fn () -> Tensor[(378), float64] {
    %982 = @func_10381() /* ty=(Tensor[(720), float64], Tensor[(378), float64]) */;
    %982.1
  };
  %983() /* ty=Tensor[(378), float64] */
}

def @func_9064() -> (Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) {
  @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */
}

def @func_17047() -> (Tensor[(378), float32],) {
  %984 = @func_10998() /* ty=Tensor[(378), float32] */;
  (%984,)
}

def @func_16573(%var_16572: Tensor[(14, 5, 9), float32]) -> Tensor[(14, 5, 9), float32] {
  %986 = fn (%var_16566: Tensor[(14, 5, 9), float32]) -> Tensor[(14, 5, 9), float32] {
    %985 = cast(%var_16566, dtype="float32") /* ty=Tensor[(14, 5, 9), float32] */;
    tan(%985) /* ty=Tensor[(14, 5, 9), float32] */
  };
  %986(%var_16572) /* ty=Tensor[(14, 5, 9), float32] */
}

def @func_17453() -> (Tensor[(16, 14, 9), uint32], Tensor[(378), float32], Tensor[(7, 2), float32], Tensor[(385), int64], Tensor[(1, 624), float32]) {
  @func_17451() /* ty=(Tensor[(16, 14, 9), uint32], Tensor[(378), float32], Tensor[(7, 2), float32], Tensor[(385), int64], Tensor[(1, 624), float32]) */
}

def @func_9202(%var_9201: Tensor[(720), float64]) -> (Tensor[(14), float64], Tensor[(1120), float64], Tensor[(720), float64]) {
  %993 = fn (%var_9181: Tensor[(720), float64]) -> (Tensor[(14), float64], Tensor[(1120), float64], Tensor[(720), float64]) {
    %987 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
    %988 = cast(%var_9181, dtype="float64") /* ty=Tensor[(720), float64] */;
    %989 = reshape(%988, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %990 = @func_8481(%989) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */;
    %991 = %987.4;
    %992 = %990.1;
    (%991, %992, %var_9181)
  };
  %993(%var_9201) /* ty=(Tensor[(14), float64], Tensor[(1120), float64], Tensor[(720), float64]) */
}

def @func_1669(%var_1668: Tensor[(10, 14, 8), float64]) -> (Tensor[(10, 14, 8), float64], Tensor[(16, 14, 9), uint32], Tensor[(14), float32], Tensor[(14), float64], Tensor[(1800), int32]) {
  %1004 = fn (%var_1632: Tensor[(10, 14, 8), float64]) -> (Tensor[(10, 14, 8), float64], Tensor[(16, 14, 9), uint32], Tensor[(14), float32], Tensor[(14), float64], Tensor[(1800), int32]) {
    %994 = cast(%var_1632, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
    %995 = cast(meta[relay.Constant][82] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
    %996 = reshape(%995, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
    %997 = @func_540(%996) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
    %998 = cast(meta[relay.Constant][83] /* ty=Tensor[(1800), int32] */, dtype="int32") /* ty=Tensor[(1800), int32] */;
    %999 = reshape(%998, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), int32] */;
    %1000 = @func_967(%999) /* ty=(Tensor[(15, 15, 8), int32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
    %1001 = tan(%994) /* ty=Tensor[(10, 14, 8), float64] */;
    %1002 = %997.4;
    %1003 = %1000.2;
    (%1001, %1002, meta[relay.Constant][82] /* ty=Tensor[(14), float32] */, %1003, meta[relay.Constant][83] /* ty=Tensor[(1800), int32] */)
  };
  %1004(%var_1668) /* ty=(Tensor[(10, 14, 8), float64], Tensor[(16, 14, 9), uint32], Tensor[(14), float32], Tensor[(14), float64], Tensor[(1800), int32]) */
}

def @func_13989(%var_13986: Tensor[(1, 7, 9), float64]) -> Tensor[(1, 7, 9), float64] {
  %1005 = cast(%var_13986, dtype="float64") /* ty=Tensor[(1, 7, 9), float64] */;
  sin(%1005) /* ty=Tensor[(1, 7, 9), float64] */
}

def @func_9637(%var_9636: Tensor[(14), float32]) -> (Tensor[(378), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14), float32], Tensor[(9, 7, 6), float32]) {
  %1017 = fn (%var_9622: Tensor[(14), float32]) -> (Tensor[(378), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14), float32], Tensor[(9, 7, 6), float32]) {
    %1006 = cast(meta[relay.Constant][84] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
    %1007 = cast(%var_9622, dtype="float32") /* ty=Tensor[(14), float32] */;
    %1008 = reshape(%1006, newshape=[624]) /* ty=Tensor[(624), float64] */;
    %1009 = reshape(%1007, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %1010 = @func_2422(%1008, %1009) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
    %1011 = @func_9416() /* ty=Tensor[(378), float32] */;
    %1012 = cast(%1011, dtype="float32") /* ty=Tensor[(378), float32] */;
    %1013 = reshape(%1012, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), float32] */;
    %1014 = @func_8260(%1013) /* ty=(Tensor[(9, 7, 6), float32],) */;
    %1015 = %1010.6;
    %1016 = %1014.0;
    (%1011, %1015, meta[relay.Constant][84] /* ty=Tensor[(624), float64] */, %var_9622, %1016)
  };
  %1017(%var_9636) /* ty=(Tensor[(378), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(14), float32], Tensor[(9, 7, 6), float32]) */
}

def @func_9328(%var_9310: Tensor[(280), int32], %var_9313: Tensor[(385), int64], %var_9316: Tensor[(1800), int32], %var_9322: uint16) -> (Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(5, 8, 7), int32], Tensor[(280), int32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14), float64], Tensor[(1800), int32], Tensor[(5, 12, ?), bool], uint16) {
  %1018 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %1019 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %1020 = cast(%var_9310, dtype="int32") /* ty=Tensor[(280), int32] */;
  %1021 = cast(%var_9310, dtype="int32") /* ty=Tensor[(280), int32] */;
  %1022 = reshape(%1020, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %1023 = reshape(%1021, newshape=[5, 8, 7]) /* ty=Tensor[(5, 8, 7), int32] */;
  %1024 = @func_7409(%1022, %1023) /* ty=(Tensor[(5, 8, 7), int32],) */;
  %1025 = cast(%var_9313, dtype="int64") /* ty=Tensor[(385), int64] */;
  %1026 = cast(%var_9313, dtype="int64") /* ty=Tensor[(385), int64] */;
  %1027 = reshape(%1025, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %1028 = reshape(%1026, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
  %1029 = cast(%var_9316, dtype="int32") /* ty=Tensor[(1800), int32] */;
  %1030 = reshape(%1029, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), int32] */;
  %1031 = @func_967(%1030) /* ty=(Tensor[(15, 15, 8), int32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %1032 = cast(%var_9322, dtype="uint16") /* ty=uint16 */;
  %1033 = reshape(%1032, newshape=[]) /* ty=uint16 */;
  %1034 = @func_4598(%1033) /* ty=(Tensor[(5, 12, ?), bool],) */;
  %1035 = %1018.2;
  %1036 = %1019.3;
  %1037 = %1024.0;
  %1038 = @func_134(%1027, %1028) /* ty=Tensor[(11, 5, 7), int64] */;
  %1039 = %1031.2;
  %1040 = %1034.0;
  (%1035, %1036, %1037, %var_9310, %1038, %var_9313, %1039, %var_9316, %1040, %var_9322)
}

def @func_13743(%var_13738: Tensor[(4, 2, 3), float64]) -> Tensor[(4, 2, 3), float64] {
  %1041 = cast(%var_13738, dtype="float64") /* ty=Tensor[(4, 2, 3), float64] */;
  log(%1041) /* ty=Tensor[(4, 2, 3), float64] */
}

def @func_11873() -> (Tensor[(480), float32], Tensor[(378), float32], Tensor[(320), bool]) {
  %1047 = fn () -> (Tensor[(480), float32], Tensor[(378), float32], Tensor[(320), bool]) {
    %1042 = cast(meta[relay.Constant][85] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
    %1043 = reshape(%1042, newshape=[2, 160]) /* ty=Tensor[(2, 160), bool] */;
    %1044 = @func_9658(%1043) /* ty=(Tensor[(378), float32], Tensor[(16, 5, 4), bool], Tensor[(2, 160), bool], Tensor[(5, 8, 7), int16]) */;
    %1045 = @func_11162() /* ty=Tensor[(480), float32] */;
    %1046 = %1044.0;
    (%1045, %1046, meta[relay.Constant][85] /* ty=Tensor[(320), bool] */)
  };
  %1047() /* ty=(Tensor[(480), float32], Tensor[(378), float32], Tensor[(320), bool]) */
}

def @func_9844(%var_9843: Tensor[(720, 1), float64]) -> (Tensor[(378), float32], Tensor[(9, 7, 6), float32], Tensor[(128), int64], Tensor[(720, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(624), float64], Tensor[(14), float32], Tensor[(14), float64]) {
  %1068 = fn (%var_9819: Tensor[(720, 1), float64]) -> (Tensor[(378), float32], Tensor[(9, 7, 6), float32], Tensor[(128), int64], Tensor[(720, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(624), float64], Tensor[(14), float32], Tensor[(14), float64]) {
    %1048 = @func_9776() /* ty=(Tensor[(378), float32], Tensor[(4, 8, 15), float32], Tensor[(480), float32], Tensor[(14), float32]) */;
    %1049 = %1048.0;
    %1050 = cast(%1049, dtype="float32") /* ty=Tensor[(378), float32] */;
    %1051 = reshape(%1050, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), float32] */;
    %1052 = @func_8260(%1051) /* ty=(Tensor[(9, 7, 6), float32],) */;
    %1053 = cast(%var_9819, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
    %1054 = cast(meta[relay.Constant][86] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %1055 = reshape(%1053, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
    %1056 = reshape(%1054, newshape=[8, 16]) /* ty=Tensor[(8, 16), int64] */;
    %1057 = @func_3396(%1055, %1056) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) */;
    %1058 = cast(meta[relay.Constant][87] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
    %1059 = cast(meta[relay.Constant][88] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
    %1060 = reshape(%1058, newshape=[624]) /* ty=Tensor[(624), float64] */;
    %1061 = reshape(%1059, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %1062 = @func_2422(%1060, %1061) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
    %1063 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
    %1064 = %1052.0;
    %1065 = %1057.6;
    %1066 = %1062.5;
    %1067 = %1063.4;
    (%1049, %1064, %1065, %var_9819, meta[relay.Constant][86] /* ty=Tensor[(128), int64] */, %1066, meta[relay.Constant][87] /* ty=Tensor[(624), float64] */, meta[relay.Constant][88] /* ty=Tensor[(14), float32] */, %1067)
  };
  %1068(%var_9843) /* ty=(Tensor[(378), float32], Tensor[(9, 7, 6), float32], Tensor[(128), int64], Tensor[(720, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(624), float64], Tensor[(14), float32], Tensor[(14), float64]) */
}

def @func_16772() -> (Tensor[(480), float32],) {
  %1070 = fn () -> (Tensor[(480), float32],) {
    %1069 = @func_11162() /* ty=Tensor[(480), float32] */;
    (%1069,)
  };
  %1070() /* ty=(Tensor[(480), float32],) */
}

def @func_10747() -> (Tensor[(378), float32],) {
  %1071 = @func_10662() /* ty=(Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) */;
  %1072 = %1071.0;
  (%1072,)
}

def @func_14639(%var_14637: Tensor[(10, 1, 15), int32], %var_14638: Tensor[(10, 1, 15), int32]) -> (Tensor[(10, ?, 15), float32], Tensor[(10, 1, 15), float64]) {
  @func_14635(%var_14637, %var_14638) /* ty=(Tensor[(10, ?, 15), float32], Tensor[(10, 1, 15), float64]) */
}

def @func_10663() -> (Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) {
  %1079 = fn () -> (Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) {
    %1073 = @func_10058() /* ty=(Tensor[(378), float32],) */;
    %1074 = cast(meta[relay.Constant][89] /* ty=Tensor[(1, 720), float64] */, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
    %1075 = reshape(%1074, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %1076 = @func_9200(%1075) /* ty=(Tensor[(14), float64], Tensor[(1120), float64], Tensor[(720), float64]) */;
    %1077 = %1073.0;
    %1078 = %1076.0;
    (%1077, %1078, meta[relay.Constant][89] /* ty=Tensor[(1, 720), float64] */)
  };
  %1079() /* ty=(Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) */
}

def @func_17686(%var_17684: Tensor[(64, 2), float32]) -> (Tensor[(64, 2), bool], Tensor[(480), float32], Tensor[(378), float32]) {
  @func_17683(%var_17684) /* ty=(Tensor[(64, 2), bool], Tensor[(480), float32], Tensor[(378), float32]) */
}

def @func_9895() -> (Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) {
  %1080 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %1081 = cast(meta[relay.Constant][90] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %1082 = reshape(%1081, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %1083 = %1080.2;
  %1084 = @func_6118(%1082) /* ty=Tensor[(4, 8, 15), float32] */;
  (%1083, %1084, meta[relay.Constant][90] /* ty=Tensor[(480), float32] */)
}

def @func_168(%var_167: Tensor[(14, 1, 1), float64]) -> Tensor[(14, 1, 1), float64] {
  %1086 = fn (%var_160: Tensor[(14, 1, 1), float64]) -> Tensor[(14, 1, 1), float64] {
    %1085 = cast(%var_160, dtype="float64") /* ty=Tensor[(14, 1, 1), float64] */;
    rsqrt(%1085) /* ty=Tensor[(14, 1, 1), float64] */
  };
  %1086(%var_167) /* ty=Tensor[(14, 1, 1), float64] */
}

def @func_16926() -> (Tensor[(624), float64], Tensor[(16, 14, 9), float64]) {
  %1087 = @func_14908() /* ty=(Tensor[(378), float32], Tensor[(7, 195), float32], Tensor[(600), float32], Tensor[(624), float64]) */;
  %1088 = @func_15449() /* ty=(Tensor[(16, 14, 9), uint32], Tensor[(720), float64]) */;
  %1089 = %1088.0;
  %1090 = cast(%1089, dtype="float64") /* ty=Tensor[(16, 14, 9), float64] */;
  %1091 = %1087.3;
  %1092 = sigmoid(%1090) /* ty=Tensor[(16, 14, 9), float64] */;
  (%1091, %1092)
}

def @func_16983() -> (Tensor[(378), float32], Tensor[(385), int64], Tensor[(11, 35), int64], Tensor[(378), float32]) {
  @func_16981() /* ty=(Tensor[(378), float32], Tensor[(385), int64], Tensor[(11, 35), int64], Tensor[(378), float32]) */
}

def @func_12302(%var_12275: bool, %var_12287: Tensor[(14), float32]) -> (Tensor[(320), bool], Tensor[(6, 10, 1), bool], bool, Tensor[(320), bool], Tensor[(14, 1, 1), float32], Tensor[(14), float32]) {
  %1093 = @func_11872() /* ty=(Tensor[(480), float32], Tensor[(378), float32], Tensor[(320), bool]) */;
  %1094 = cast(%var_12275, dtype="bool") /* ty=bool */;
  %1095 = reshape(%1094, newshape=[]) /* ty=bool */;
  %1096 = @func_11427() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(720), float64], Tensor[(126, 3), float32], Tensor[(64, 2), int64], Tensor[(16, 5, 4), bool], Tensor[(320), bool]) */;
  %1097 = cast(%var_12287, dtype="float32") /* ty=Tensor[(14), float32] */;
  %1098 = reshape(%1097, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
  %1099 = @func_540(%1098) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
  %1100 = %1093.2;
  %1101 = @func_7500(%1095) /* ty=Tensor[(6, 10, 1), bool] */;
  %1102 = %1096.5;
  %1103 = %1099.0;
  (%1100, %1101, %var_12275, %1102, %1103, %var_12287)
}

def @func_15591(%var_15589: Tensor[(6, 6, 15), uint32], %var_15590: Tensor[(385), int64]) -> (Tensor[(6, 6, 15), uint32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) {
  @func_15587(%var_15589, %var_15590) /* ty=(Tensor[(6, 6, 15), uint32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) */
}

def @func_9661(%var_9659: Tensor[(2, 160), bool]) -> (Tensor[(378), float32], Tensor[(16, 5, 4), bool], Tensor[(2, 160), bool], Tensor[(5, 8, 7), int16]) {
  @func_9658(%var_9659) /* ty=(Tensor[(378), float32], Tensor[(16, 5, 4), bool], Tensor[(2, 160), bool], Tensor[(5, 8, 7), int16]) */
}

def @func_7409(%var_7392: Tensor[(5, 8, 7), int32], %var_7393: Tensor[(5, 8, 7), int32]) -> (Tensor[(5, 8, 7), int32],) {
  %1104 = cast(%var_7393, dtype="int32") /* ty=Tensor[(5, 8, 7), int32] */;
  %1105 = shape_of(%var_7392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1106 = cast(%var_7392, dtype="int32") /* ty=Tensor[(5, 8, 7), int32] */;
  %1107 = dyn.reshape(%1104, %1105, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1108 = left_shift(%1106, %1107) /* ty=Tensor[(5, 8, 7), int32] */;
  (%1108,)
}

def @func_6842(%var_6840: Tensor[(8, 5, 3), float64], %var_6841: Tensor[(20, 2), bool]) -> (Tensor[(8, 5, 3), float64], Tensor[(4, 14, 10), bool], Tensor[(20, 2), bool], Tensor[(560), bool]) {
  @func_6838(%var_6840, %var_6841) /* ty=(Tensor[(8, 5, 3), float64], Tensor[(4, 14, 10), bool], Tensor[(20, 2), bool], Tensor[(560), bool]) */
}

def @func_12952(%var_12950: Tensor[(10, 13, 8), uint32]) -> (Tensor[(480), float32], Tensor[(10, 13, 8), bool], Tensor[(378), float32]) {
  @func_12949(%var_12950) /* ty=(Tensor[(480), float32], Tensor[(10, 13, 8), bool], Tensor[(378), float32]) */
}

def @func_9548() -> (Tensor[(378), float32],) {
  @func_9546() /* ty=(Tensor[(378), float32],) */
}

def @func_16077(%var_16075: Tensor[(1365), float32]) -> (Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(1365), float32]) {
  @func_16074(%var_16075) /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(1365), float32]) */
}

def @func_17022(%var_17018: Tensor[(1800), int32], %var_17019: uint16) -> (Tensor[(378), float32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) {
  %1109 = @func_11760() /* ty=(Tensor[(378), float32],) */;
  %1110 = cast(%var_17018, dtype="int32") /* ty=Tensor[(1800), int32] */;
  %1111 = cast(%var_17019, dtype="uint16") /* ty=uint16 */;
  %1112 = reshape(%1110, newshape=[1800]) /* ty=Tensor[(1800), int32] */;
  %1113 = reshape(%1111, newshape=[]) /* ty=uint16 */;
  %1114 = @func_12635(%1112, %1113) /* ty=(Tensor[(378), float32], Tensor[(280), int32], Tensor[(280), int32], Tensor[(1, 385), int64], Tensor[(1800), int32], uint16) */;
  %1115 = %1109.0;
  %1116 = %1114.3;
  (%1115, %1116, %var_17018, %var_17019)
}

def @func_13992(%var_13990: Tensor[(1, 7, 9), float64]) -> Tensor[(1, 7, 9), float64] {
  @func_13989(%var_13990) /* ty=Tensor[(1, 7, 9), float64] */
}

def @func_9385() -> (Tensor[(378), float32],) {
  @func_9383() /* ty=(Tensor[(378), float32],) */
}

def @func_15740() -> (Tensor[(64, 2), float32],) {
  %1119 = fn () -> (Tensor[(64, 2), float32],) {
    %1117 = @func_14718() /* ty=(Tensor[(14, 1, 1), float64], Tensor[(64, 2), float32], Tensor[(64, 2), float64]) */;
    %1118 = %1117.1;
    (%1118,)
  };
  %1119() /* ty=(Tensor[(64, 2), float32],) */
}

def @func_13746(%var_13744: Tensor[(4, 2, 3), float64]) -> Tensor[(4, 2, 3), float64] {
  @func_13743(%var_13744) /* ty=Tensor[(4, 2, 3), float64] */
}

def @func_17646() -> (Tensor[(480), float32], Tensor[(128), int64]) {
  %1123 = fn () -> (Tensor[(480), float32], Tensor[(128), int64]) {
    %1120 = @func_9868() /* ty=(Tensor[(128), int64], Tensor[(64, 2), int64], Tensor[(720), float64]) */;
    %1121 = @func_11162() /* ty=Tensor[(480), float32] */;
    %1122 = %1120.0;
    (%1121, %1122)
  };
  %1123() /* ty=(Tensor[(480), float32], Tensor[(128), int64]) */
}

def @func_12381(%var_12379: Tensor[(455, 3), float32], %var_12380: Tensor[(455, 3), float32]) -> (Tensor[(378), float32], Tensor[(16, 16, 16), float64], Tensor[(40), bool], Tensor[(560), bool], Tensor[(455, 3), float32], Tensor[(16, 14, 9), uint32]) {
  %1140 = fn (%var_12339: Tensor[(455, 3), float32], %var_12353: Tensor[(455, 3), float32]) -> (Tensor[(378), float32], Tensor[(16, 16, 16), float64], Tensor[(40), bool], Tensor[(560), bool], Tensor[(455, 3), float32], Tensor[(16, 14, 9), uint32]) {
    %1124 = @func_10747() /* ty=(Tensor[(378), float32],) */;
    %1125 = cast(%var_12339, dtype="float32") /* ty=Tensor[(455, 3), float32] */;
    %1126 = cast(meta[relay.Constant][91] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
    %1127 = cast(meta[relay.Constant][92] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
    %1128 = reshape(%1125, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), float32] */;
    %1129 = reshape(%1126, newshape=[40]) /* ty=Tensor[(40), bool] */;
    %1130 = reshape(%1127, newshape=[40, 14]) /* ty=Tensor[(40, 14), bool] */;
    %1131 = @func_5512(%1128, %1129, %1130) /* ty=(Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32], Tensor[(16, 16, 16), float64], Tensor[(4096), float64], Tensor[(5, 12, ?), bool], uint16, Tensor[(13, 15, 7), float32], Tensor[(13, 15, 7), int64], Tensor[(1800), int32], Tensor[(720), float64], Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(40, 14), bool], Tensor[(14, 1, 1), float64], Tensor[(13, 15, 7), float32]) */;
    %1132 = cast(%var_12353, dtype="float32") /* ty=Tensor[(455, 3), float32] */;
    %1133 = shape_of(%var_12339, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1134 = cast(%var_12339, dtype="float32") /* ty=Tensor[(455, 3), float32] */;
    %1135 = dyn.reshape(%1132, %1133, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1136 = %1124.0;
    %1137 = %1131.3;
    %1138 = mod(%1134, %1135) /* ty=Tensor[(455, 3), float32] */;
    %1139 = @func_10026() /* ty=Tensor[(16, 14, 9), uint32] */;
    (%1136, %1137, meta[relay.Constant][91] /* ty=Tensor[(40), bool] */, meta[relay.Constant][92] /* ty=Tensor[(560), bool] */, %1138, %1139)
  };
  %1140(%var_12379, %var_12380) /* ty=(Tensor[(378), float32], Tensor[(16, 16, 16), float64], Tensor[(40), bool], Tensor[(560), bool], Tensor[(455, 3), float32], Tensor[(16, 14, 9), uint32]) */
}

def @func_16371() -> Tensor[(480), float32] {
  %1142 = fn () -> Tensor[(480), float32] {
    %1141 = @func_12696() /* ty=(Tensor[(378), float32], Tensor[(480), float32], Tensor[(378), float32], bool, bool, Tensor[(14), float32]) */;
    %1141.1
  };
  %1142() /* ty=Tensor[(480), float32] */
}

def @func_9383() -> (Tensor[(378), float32],) {
  %1143 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
  %1144 = %1143.1;
  (%1144,)
}

def @func_11482(%var_11480: Tensor[(2, 312), float64], %var_11481: Tensor[(2, 312), float64]) -> (Tensor[(378), float32], Tensor[(128), int64], Tensor[(14), float32], Tensor[(378), float32], Tensor[(2, 312), int8], Tensor[(378), float32]) {
  %1162 = fn (%var_11437: Tensor[(2, 312), float64], %var_11458: Tensor[(2, 312), float64]) -> (Tensor[(378), float32], Tensor[(128), int64], Tensor[(14), float32], Tensor[(378), float32], Tensor[(2, 312), int8], Tensor[(378), float32]) {
    %1145 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %1146 = cast(%var_11437, dtype="float64") /* ty=Tensor[(2, 312), float64] */;
    %1147 = cast(meta[relay.Constant][93] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
    %1148 = reshape(%1146, newshape=[624]) /* ty=Tensor[(624), float64] */;
    %1149 = reshape(%1147, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %1150 = @func_2422(%1148, %1149) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
    %1151 = @func_9567() /* ty=(Tensor[(378), float32],) */;
    %1152 = cast(%var_11458, dtype="int8") /* ty=Tensor[(2, 312), int8] */;
    %1153 = shape_of(%var_11437, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1154 = cast(%var_11437, dtype="int8") /* ty=Tensor[(2, 312), int8] */;
    %1155 = dyn.reshape(%1152, %1153, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %1156 = @func_11146() /* ty=(Tensor[(378), float32],) */;
    %1157 = %1145.1;
    %1158 = %1150.1;
    %1159 = %1151.0;
    %1160 = right_shift(%1154, %1155) /* ty=Tensor[(2, 312), int8] */;
    %1161 = %1156.0;
    (%1157, %1158, meta[relay.Constant][93] /* ty=Tensor[(14), float32] */, %1159, %1160, %1161)
  };
  %1162(%var_11480, %var_11481) /* ty=(Tensor[(378), float32], Tensor[(128), int64], Tensor[(14), float32], Tensor[(378), float32], Tensor[(2, 312), int8], Tensor[(378), float32]) */
}

def @func_11643() -> Tensor[(128), int64] {
  %1163 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
  %1163.0
}

def @func_14719() -> (Tensor[(14, 1, 1), float64], Tensor[(64, 2), float32], Tensor[(64, 2), float64]) {
  %1174 = fn () -> (Tensor[(14, 1, 1), float64], Tensor[(64, 2), float32], Tensor[(64, 2), float64]) {
    %1164 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
    %1165 = @func_10124() /* ty=(Tensor[(378), float32], Tensor[(64, 2), int64]) */;
    %1166 = %1165.1;
    %1167 = cast(%1166, dtype="float64") /* ty=Tensor[(64, 2), float64] */;
    %1168 = atan(%1167) /* ty=Tensor[(64, 2), float64] */;
    %1169 = cast(%1168, dtype="float32") /* ty=Tensor[(64, 2), float32] */;
    %1170 = cast(%1168, dtype="float64") /* ty=Tensor[(64, 2), float64] */;
    %1171 = %1164.3;
    %1172 = sin(%1169) /* ty=Tensor[(64, 2), float32] */;
    %1173 = cos(%1170) /* ty=Tensor[(64, 2), float64] */;
    (%1171, %1172, %1173)
  };
  %1174() /* ty=(Tensor[(14, 1, 1), float64], Tensor[(64, 2), float32], Tensor[(64, 2), float64]) */
}

def @func_14495() -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(128), int64]) {
  %1181 = fn () -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(128), int64]) {
    %1175 = @func_12242() /* ty=(Tensor[(378), float32],) */;
    %1176 = @func_11146() /* ty=(Tensor[(378), float32],) */;
    %1177 = @func_13236() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) */;
    %1178 = %1175.0;
    %1179 = %1176.0;
    %1180 = %1177.2;
    (%1178, %1179, %1180)
  };
  %1181() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(128), int64]) */
}

def @func_4600(%var_4599: uint16) -> (Tensor[(5, 12, ?), bool],) {
  %1190 = fn (%var_4582: uint16) -> (Tensor[(5, 12, ?), bool],) {
    %1182 = cast(%var_4582, dtype="uint16") /* ty=uint16 */;
    %1183 = cast(meta[relay.Constant][94] /* ty=Tensor[(5, 12, 1), uint16] */, dtype="uint16") /* ty=Tensor[(5, 12, 1), uint16] */;
    %1184 = bitwise_or(%1182, %1183) /* ty=Tensor[(5, 12, 1), uint16] */;
    %1185 = cast(meta[relay.Constant][94] /* ty=Tensor[(5, 12, 1), uint16] */, dtype="bool") /* ty=Tensor[(5, 12, 1), bool] */;
    %1186 = shape_of(%1184, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1187 = cast(%1184, dtype="bool") /* ty=Tensor[(5, 12, 1), bool] */;
    %1188 = dyn.reshape(%1185, %1186, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1189 = less(%1187, %1188) /* ty=Tensor[(5, 12, ?), bool] */;
    (%1189,)
  };
  %1190(%var_4599) /* ty=(Tensor[(5, 12, ?), bool],) */
}

def @func_2827(%var_2826: Tensor[(16, 11, 9), float64]) -> (Tensor[(16, 11, 9), float64], Tensor[(14), float32], Tensor[(128), int64], Tensor[(14), float32]) {
  %1201 = fn (%var_2795: Tensor[(16, 11, 9), float64]) -> (Tensor[(16, 11, 9), float64], Tensor[(14), float32], Tensor[(128), int64], Tensor[(14), float32]) {
    %1191 = cast(%var_2795, dtype="float64") /* ty=Tensor[(16, 11, 9), float64] */;
    %1192 = cast(meta[relay.Constant][95] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %1193 = cast(meta[relay.Constant][95] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %1194 = cast(meta[relay.Constant][96] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
    %1195 = reshape(%1192, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
    %1196 = reshape(%1193, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
    %1197 = reshape(%1194, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %1198 = @func_679(%1195, %1196, %1197) /* ty=(Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) */;
    %1199 = log10(%1191) /* ty=Tensor[(16, 11, 9), float64] */;
    %1200 = %1198.2;
    (%1199, %1200, meta[relay.Constant][95] /* ty=Tensor[(128), int64] */, meta[relay.Constant][96] /* ty=Tensor[(14), float32] */)
  };
  %1201(%var_2826) /* ty=(Tensor[(16, 11, 9), float64], Tensor[(14), float32], Tensor[(128), int64], Tensor[(14), float32]) */
}

def @func_3400(%var_3398: Tensor[(3, 16, 15), float64], %var_3399: Tensor[(8, 16), int64]) -> (Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) {
  @func_3396(%var_3398, %var_3399) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) */
}

def @func_10641() -> (Tensor[(128), int64],) {
  %1202 = @func_9484() /* ty=(Tensor[(128), int64], Tensor[(14, 8, 78), float32]) */;
  %1203 = %1202.0;
  (%1203,)
}

def @func_14635(%var_14583: Tensor[(10, 1, 15), int32], %var_14584: Tensor[(10, 1, 15), int32]) -> (Tensor[(10, ?, 15), float32], Tensor[(10, 1, 15), float64]) {
  %1204 = cast(%var_14584, dtype="bool") /* ty=Tensor[(10, 1, 15), bool] */;
  %1205 = shape_of(%var_14583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1206 = cast(%var_14583, dtype="bool") /* ty=Tensor[(10, 1, 15), bool] */;
  %1207 = dyn.reshape(%1204, %1205, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1208 = equal(%1206, %1207) /* ty=Tensor[(10, ?, 15), bool] */;
  %1209 = cast(%1208, dtype="float32") /* ty=Tensor[(10, ?, 15), float32] */;
  %1210 = shape_of(%var_14583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1211 = cast(%var_14583, dtype="float32") /* ty=Tensor[(10, 1, 15), float32] */;
  %1212 = dyn.reshape(%1209, %1210, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1213 = cast(%var_14584, dtype="float64") /* ty=Tensor[(10, 1, 15), float64] */;
  %1214 = floor_mod(%1211, %1212) /* ty=Tensor[(10, ?, 15), float32] */;
  %1215 = atanh(%1213) /* ty=Tensor[(10, 1, 15), float64] */;
  (%1214, %1215)
}

def @func_17164() -> (Tensor[(378), float32], Tensor[(16, 14, 9), float64], Tensor[(378), float32], Tensor[(480), float32], Tensor[(378), float32], Tensor[(128), int64]) {
  %1216 = @func_16926() /* ty=(Tensor[(624), float64], Tensor[(16, 14, 9), float64]) */;
  %1217 = @func_16771() /* ty=(Tensor[(480), float32],) */;
  %1218 = @func_11706() /* ty=Tensor[(378), float32] */;
  %1219 = %1216.1;
  %1220 = @func_11656() /* ty=Tensor[(378), float32] */;
  %1221 = %1217.0;
  %1222 = @func_15385() /* ty=Tensor[(378), float32] */;
  %1223 = @func_14039() /* ty=Tensor[(128), int64] */;
  (%1218, %1219, %1220, %1221, %1222, %1223)
}

def @func_12842() -> (Tensor[(378), float32],) {
  @func_12840() /* ty=(Tensor[(378), float32],) */
}

def @func_12073() -> (Tensor[(378), float32],) {
  %1224 = @func_11706() /* ty=Tensor[(378), float32] */;
  (%1224,)
}

def @func_9909() -> (Tensor[(480), float32],) {
  %1227 = fn () -> (Tensor[(480), float32],) {
    %1225 = @func_9895() /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */;
    %1226 = %1225.2;
    (%1226,)
  };
  %1227() /* ty=(Tensor[(480), float32],) */
}

def @func_15386() -> Tensor[(378), float32] {
  %1229 = fn () -> Tensor[(378), float32] {
    %1228 = @func_11760() /* ty=(Tensor[(378), float32],) */;
    %1228.0
  };
  %1229() /* ty=Tensor[(378), float32] */
}

def @func_13297(%var_13256: Tensor[(40), bool], %var_13263: Tensor[(4, 36), uint32], %var_13264: Tensor[(2016), uint32]) -> (Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float64], Tensor[(4, 36), uint32], Tensor[(14), float64], Tensor[(16, 14, 9), bool]) {
  %1230 = cast(%var_13256, dtype="bool") /* ty=Tensor[(40), bool] */;
  %1231 = reshape(%1230, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %1232 = @func_10573(%1231) /* ty=(Tensor[(14), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float32]) */;
  %1233 = %1232.2;
  %1234 = cast(%1233, dtype="float64") /* ty=Tensor[(378), float64] */;
  %1235 = cast(%var_13263, dtype="uint32") /* ty=Tensor[(4, 36), uint32] */;
  %1236 = cast(%var_13264, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %1237 = reshape(%1235, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint32] */;
  %1238 = reshape(%1236, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), uint32] */;
  %1239 = @func_436(%1237, %1238) /* ty=(Tensor[(16, 14, 9), uint32],) */;
  %1240 = %1239.0;
  %1241 = cast(%var_13264, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %1242 = shape_of(%1240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1243 = cast(%1240, dtype="bool") /* ty=Tensor[(16, 14, 9), bool] */;
  %1244 = dyn.reshape(%1241, %1242, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1245 = @func_11706() /* ty=Tensor[(378), float32] */;
  %1246 = asinh(%1234) /* ty=Tensor[(378), float64] */;
  %1247 = @func_10619() /* ty=Tensor[(14), float64] */;
  %1248 = less_equal(%1243, %1244) /* ty=Tensor[(16, 14, 9), bool] */;
  (%1245, %var_13256, %1246, %var_13263, %1247, %1248)
}

def @func_12306(%var_12304: bool, %var_12305: Tensor[(14), float32]) -> (Tensor[(320), bool], Tensor[(6, 10, 1), bool], bool, Tensor[(320), bool], Tensor[(14, 1, 1), float32], Tensor[(14), float32]) {
  @func_12302(%var_12304, %var_12305) /* ty=(Tensor[(320), bool], Tensor[(6, 10, 1), bool], bool, Tensor[(320), bool], Tensor[(14, 1, 1), float32], Tensor[(14), float32]) */
}

def @func_11148() -> (Tensor[(378), float32],) {
  @func_11146() /* ty=(Tensor[(378), float32],) */
}

def @func_15783(%var_15781: Tensor[(144), uint32], %var_15782: Tensor[(40), bool]) -> (Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32], Tensor[(1, 40), bool], Tensor[(40), bool]) {
  %1261 = fn (%var_15753: Tensor[(144), uint32], %var_15769: Tensor[(40), bool]) -> (Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32], Tensor[(1, 40), bool], Tensor[(40), bool]) {
    %1249 = @func_11760() /* ty=(Tensor[(378), float32],) */;
    %1250 = cast(%var_15753, dtype="uint32") /* ty=Tensor[(144), uint32] */;
    %1251 = cast(meta[relay.Constant][97] /* ty=Tensor[(2016), uint32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
    %1252 = reshape(%1250, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint32] */;
    %1253 = reshape(%1251, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), uint32] */;
    %1254 = @func_436(%1252, %1253) /* ty=(Tensor[(16, 14, 9), uint32],) */;
    %1255 = cast(%var_15769, dtype="bool") /* ty=Tensor[(40), bool] */;
    %1256 = reshape(%1255, newshape=[1, 40]) /* ty=Tensor[(1, 40), bool] */;
    %1257 = @func_14317(%1256) /* ty=(Tensor[(480), float32], Tensor[(378), float32], Tensor[(4, 14, 10), bool], Tensor[(120), float64], Tensor[(1, 40), bool]) */;
    %1258 = %1249.0;
    %1259 = %1254.0;
    %1260 = %1257.4;
    (%1258, %1259, %var_15753, meta[relay.Constant][97] /* ty=Tensor[(2016), uint32] */, %1260, %var_15769)
  };
  %1261(%var_15781, %var_15782) /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32], Tensor[(1, 40), bool], Tensor[(40), bool]) */
}

def @func_17414() -> Tensor[(378), float32] {
  %1262 = @func_9567() /* ty=(Tensor[(378), float32],) */;
  %1262.0
}

def @func_10576(%var_10574: Tensor[(40), bool]) -> (Tensor[(14), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float32]) {
  @func_10573(%var_10574) /* ty=(Tensor[(14), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(40), bool], Tensor[(378), float32]) */
}

def @func_9897() -> (Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) {
  @func_9895() /* ty=(Tensor[(10, 13, 8), uint32], Tensor[(4, 8, 15), float32], Tensor[(480), float32]) */
}

def @func_14658(%var_14656: Tensor[(385), int64]) -> (Tensor[(378), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) {
  @func_14655(%var_14656) /* ty=(Tensor[(378), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64]) */
}

def @func_14751(%var_14723: Tensor[(1, 720), float64]) -> (Tensor[(4, 14, 10), bool], Tensor[(40), bool], Tensor[(560), bool], Tensor[(?, 720), bool]) {
  %1263 = cast(meta[relay.Constant][98] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %1264 = cast(meta[relay.Constant][99] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %1265 = reshape(%1263, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), bool] */;
  %1266 = reshape(%1264, newshape=[4, 14, 10]) /* ty=Tensor[(4, 14, 10), bool] */;
  %1267 = @func_10662() /* ty=(Tensor[(378), float32], Tensor[(14), float64], Tensor[(1, 720), float64]) */;
  %1268 = %1267.2;
  %1269 = cast(%var_14723, dtype="int16") /* ty=Tensor[(1, 720), int16] */;
  %1270 = shape_of(%1268, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1271 = cast(%1268, dtype="int16") /* ty=Tensor[(1, 720), int16] */;
  %1272 = dyn.reshape(%1269, %1270, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1273 = right_shift(%1271, %1272) /* ty=Tensor[(?, 720), int16] */;
  %1274 = cast(%1273, dtype="int16") /* ty=Tensor[(?, 720), int16] */;
  %1275 = shape_of(%var_14723, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1276 = cast(%var_14723, dtype="int16") /* ty=Tensor[(1, 720), int16] */;
  %1277 = dyn.reshape(%1274, %1275, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1278 = subtract(%1276, %1277) /* ty=Tensor[(?, 720), int16] */;
  %1279 = cast(%1278, dtype="bool") /* ty=Tensor[(?, 720), bool] */;
  %1280 = shape_of(%1273, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1281 = cast(%1273, dtype="bool") /* ty=Tensor[(?, 720), bool] */;
  %1282 = dyn.reshape(%1279, %1280, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1283 = @func_3525(%1265, %1266) /* ty=Tensor[(4, 14, 10), bool] */;
  %1284 = less_equal(%1281, %1282) /* ty=Tensor[(?, 720), bool] */;
  (%1283, meta[relay.Constant][98] /* ty=Tensor[(40), bool] */, meta[relay.Constant][99] /* ty=Tensor[(560), bool] */, %1284)
}

def @func_9417() -> Tensor[(378), float32] {
  %1286 = fn () -> Tensor[(378), float32] {
    %1285 = @func_9383() /* ty=(Tensor[(378), float32],) */;
    %1285.0
  };
  %1286() /* ty=Tensor[(378), float32] */
}

def @func_1045(%var_1043: Tensor[(3, 13, 16), float64], %var_1044: Tensor[(128), int64]) -> (Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) {
  @func_1041(%var_1043, %var_1044) /* ty=(Tensor[(3, 13, 16), float64], Tensor[(14, 1, 1), float64], Tensor[(128), int64], Tensor[(14), float32]) */
}

def @func_16763() -> Tensor[(378), float32] {
  @func_13609() /* ty=Tensor[(378), float32] */
}

def @func_15451() -> (Tensor[(16, 14, 9), uint32], Tensor[(720), float64]) {
  @func_15449() /* ty=(Tensor[(16, 14, 9), uint32], Tensor[(720), float64]) */
}

def @func_3529(%var_3527: Tensor[(4, 1, 10), bool], %var_3528: Tensor[(4, 14, 10), bool]) -> Tensor[(4, 14, 10), bool] {
  @func_3525(%var_3527, %var_3528) /* ty=Tensor[(4, 14, 10), bool] */
}

def @func_17940() -> (Tensor[(378), float32], Tensor[(2, 160), bool], Tensor[(2, 160), bool], Tensor[(15, 15, 8), int32], Tensor[(1800), int32]) {
  %1296 = fn () -> (Tensor[(378), float32], Tensor[(2, 160), bool], Tensor[(2, 160), bool], Tensor[(15, 15, 8), int32], Tensor[(1800), int32]) {
    %1287 = cast(meta[relay.Constant][100] /* ty=Tensor[(2, 160), bool] */, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
    %1288 = reshape(%1287, newshape=[2, 160]) /* ty=Tensor[(2, 160), bool] */;
    %1289 = @func_9658(%1288) /* ty=(Tensor[(378), float32], Tensor[(16, 5, 4), bool], Tensor[(2, 160), bool], Tensor[(5, 8, 7), int16]) */;
    %1290 = cast(meta[relay.Constant][101] /* ty=Tensor[(1800), int32] */, dtype="int32") /* ty=Tensor[(1800), int32] */;
    %1291 = reshape(%1290, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), int32] */;
    %1292 = @func_967(%1291) /* ty=(Tensor[(15, 15, 8), int32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
    %1293 = @func_11941() /* ty=Tensor[(378), float32] */;
    %1294 = %1289.2;
    %1295 = %1292.0;
    (%1293, %1294, meta[relay.Constant][100] /* ty=Tensor[(2, 160), bool] */, %1295, meta[relay.Constant][101] /* ty=Tensor[(1800), int32] */)
  };
  %1296() /* ty=(Tensor[(378), float32], Tensor[(2, 160), bool], Tensor[(2, 160), bool], Tensor[(15, 15, 8), int32], Tensor[(1800), int32]) */
}

def @func_15449() -> (Tensor[(16, 14, 9), uint32], Tensor[(720), float64]) {
  %1297 = @func_13236() /* ty=(Tensor[(4, 8, 15), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(15, 2, 6), uint8], Tensor[(720), float64]) */;
  %1298 = @func_10026() /* ty=Tensor[(16, 14, 9), uint32] */;
  %1299 = %1297.4;
  (%1298, %1299)
}

def @func_10383() -> (Tensor[(720), float64], Tensor[(378), float64]) {
  @func_10381() /* ty=(Tensor[(720), float64], Tensor[(378), float64]) */
}

def @func_4148(%var_4146: Tensor[(16, 16, 16), float64]) -> Tensor[(16, 16, 16), float64] {
  @func_4145(%var_4146) /* ty=Tensor[(16, 16, 16), float64] */
}

def @func_9454(%var_9453: Tensor[(385, 1), int64]) -> (Tensor[(11, 5, 7), int64], Tensor[(385, 378), bool]) {
  %1310 = fn (%var_9442: Tensor[(385, 1), int64]) -> (Tensor[(11, 5, 7), int64], Tensor[(385, 378), bool]) {
    %1300 = cast(%var_9442, dtype="int64") /* ty=Tensor[(385, 1), int64] */;
    %1301 = cast(%var_9442, dtype="int64") /* ty=Tensor[(385, 1), int64] */;
    %1302 = reshape(%1300, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
    %1303 = reshape(%1301, newshape=[11, 5, 7]) /* ty=Tensor[(11, 5, 7), int64] */;
    %1304 = @func_9383() /* ty=(Tensor[(378), float32],) */;
    %1305 = %1304.0;
    %1306 = cast(%var_9442, dtype="bool") /* ty=Tensor[(385, 1), bool] */;
    %1307 = cast(%1305, dtype="bool") /* ty=Tensor[(378), bool] */;
    %1308 = @func_134(%1302, %1303) /* ty=Tensor[(11, 5, 7), int64] */;
    %1309 = equal(%1306, %1307) /* ty=Tensor[(385, 378), bool] */;
    (%1308, %1309)
  };
  %1310(%var_9453) /* ty=(Tensor[(11, 5, 7), int64], Tensor[(385, 378), bool]) */
}

def @func_8481(%var_8467: Tensor[(720), float64]) -> (Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) {
  %1311 = cast(meta[relay.Constant][102] /* ty=Tensor[(15, 2, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 6), float32] */;
  %1312 = rsqrt(%1311) /* ty=Tensor[(15, 2, 6), float32] */;
  %1313 = cast(%1312, dtype="uint8") /* ty=Tensor[(15, 2, 6), uint8] */;
  %1314 = shape_of(meta[relay.Constant][102] /* ty=Tensor[(15, 2, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1315 = cast(meta[relay.Constant][102] /* ty=Tensor[(15, 2, 6), float32] */, dtype="uint8") /* ty=Tensor[(15, 2, 6), uint8] */;
  %1316 = dyn.reshape(%1313, %1314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1317 = cast(%var_8467, dtype="float64") /* ty=Tensor[(720), float64] */;
  %1318 = cast(meta[relay.Constant][103] /* ty=Tensor[(64, 2), int64] */, dtype="int64") /* ty=Tensor[(64, 2), int64] */;
  %1319 = reshape(%1317, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), float64] */;
  %1320 = reshape(%1318, newshape=[8, 16]) /* ty=Tensor[(8, 16), int64] */;
  %1321 = @func_3396(%1319, %1320) /* ty=(Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) */;
  %1322 = cast(meta[relay.Constant][104] /* ty=Tensor[(126, 3), float32] */, dtype="float32") /* ty=Tensor[(126, 3), float32] */;
  %1323 = reshape(%1322, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), float32] */;
  %1324 = @func_8260(%1323) /* ty=(Tensor[(9, 7, 6), float32],) */;
  %1325 = bitwise_xor(%1315, %1316) /* ty=Tensor[(15, 2, 6), uint8] */;
  %1326 = %1321.5;
  %1327 = %1324.0;
  (%1325, %1326, %var_8467, meta[relay.Constant][103] /* ty=Tensor[(64, 2), int64] */, %1327, meta[relay.Constant][104] /* ty=Tensor[(126, 3), float32] */)
}

def @func_17758() -> (Tensor[(378), float64], Tensor[(378), float32]) {
  %1331 = fn () -> (Tensor[(378), float64], Tensor[(378), float32]) {
    %1328 = @func_10443() /* ty=(Tensor[(378), float32], Tensor[(378), float32]) */;
    %1329 = @func_16403() /* ty=Tensor[(378), float64] */;
    %1330 = %1328.1;
    (%1329, %1330)
  };
  %1331() /* ty=(Tensor[(378), float64], Tensor[(378), float32]) */
}

def @func_17049() -> (Tensor[(378), float32],) {
  @func_17047() /* ty=(Tensor[(378), float32],) */
}

def @func_15167() -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(1040), uint32], Tensor[(378), float32]) {
  %1339 = fn () -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(1040), uint32], Tensor[(378), float32]) {
    %1332 = @func_12073() /* ty=(Tensor[(378), float32],) */;
    %1333 = cast(meta[relay.Constant][105] /* ty=Tensor[(1040), uint32] */, dtype="uint32") /* ty=Tensor[(1040), uint32] */;
    %1334 = reshape(%1333, newshape=[1040]) /* ty=Tensor[(1040), uint32] */;
    %1335 = @func_13895(%1334) /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(378), float32], Tensor[(1040), uint32]) */;
    %1336 = %1332.0;
    %1337 = %1335.2;
    %1338 = @func_14238() /* ty=Tensor[(378), float32] */;
    (%1336, %1337, meta[relay.Constant][105] /* ty=Tensor[(1040), uint32] */, %1338)
  };
  %1339() /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(1040), uint32], Tensor[(378), float32]) */
}

def @func_9350() -> (Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) {
  %1346 = fn () -> (Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) {
    %1340 = @func_9062() /* ty=(Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(10, 13, 8), uint32], Tensor[(14, 1, 1), float64], Tensor[(14), float64]) */;
    %1341 = cast(meta[relay.Constant][106] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
    %1342 = reshape(%1341, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), float32] */;
    %1343 = @func_540(%1342) /* ty=(Tensor[(14, 1, 1), float32], Tensor[(11, 5, 7), int64], Tensor[(385), int64], Tensor[(14, 1, 1), float64], Tensor[(16, 14, 9), uint32], Tensor[(144), uint32], Tensor[(2016), uint32]) */;
    %1344 = %1340.1;
    %1345 = %1343.4;
    (%1344, %1345, meta[relay.Constant][106] /* ty=Tensor[(14), float32] */)
  };
  %1346() /* ty=(Tensor[(378), float32], Tensor[(16, 14, 9), uint32], Tensor[(14), float32]) */
}

def @func_17451() -> (Tensor[(16, 14, 9), uint32], Tensor[(378), float32], Tensor[(7, 2), float32], Tensor[(385), int64], Tensor[(1, 624), float32]) {
  %1347 = @func_15620() /* ty=(Tensor[(16, 14, 9), uint32], Tensor[(378), float32]) */;
  %1348 = cast(meta[relay.Constant][107] /* ty=Tensor[(1, 624), float64] */, dtype="float64") /* ty=Tensor[(1, 624), float64] */;
  %1349 = cast(meta[relay.Constant][108] /* ty=Tensor[(7, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 2), float32] */;
  %1350 = reshape(%1348, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %1351 = reshape(%1349, newshape=[14, 1]) /* ty=Tensor[(14, 1), float32] */;
  %1352 = @func_11973(%1350, %1351) /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(5, 7, 7), float32], Tensor[(624), float64], Tensor[(14, 1), float32], Tensor[(624), float64]) */;
  %1353 = @func_16261() /* ty=(Tensor[(378), float32], Tensor[(14), float32], Tensor[(720), float64], Tensor[(720), float64], Tensor[(11, 5, 7), int64], Tensor[(540), uint32], Tensor[(385), int64], Tensor[(14), float64], Tensor[(220), bool]) */;
  %1354 = cast(meta[relay.Constant][107] /* ty=Tensor[(1, 624), float64] */, dtype="float32") /* ty=Tensor[(1, 624), float32] */;
  %1355 = %1347.0;
  %1356 = %1352.1;
  %1357 = %1353.6;
  %1358 = asinh(%1354) /* ty=Tensor[(1, 624), float32] */;
  (%1355, %1356, meta[relay.Constant][108] /* ty=Tensor[(7, 2), float32] */, %1357, %1358)
}

def @func_3396(%var_3365: Tensor[(3, 16, 15), float64], %var_3373: Tensor[(8, 16), int64]) -> (Tensor[(3, 16, 15), float64], Tensor[(8, 4, 4), bool], Tensor[(8, 16), int64], Tensor[(14), float32], Tensor[(1800), int32], Tensor[(1120), float64], Tensor[(128), int64], Tensor[(1, 624), float64]) {
  %1359 = cast(%var_3365, dtype="float64") /* ty=Tensor[(3, 16, 15), float64] */;
  %1360 = cast(%var_3373, dtype="int64") /* ty=Tensor[(8, 16), int64] */;
  %1361 = cast(%var_3373, dtype="int64") /* ty=Tensor[(8, 16), int64] */;
  %1362 = cast(meta[relay.Constant][109] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %1363 = reshape(%1360, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %1364 = reshape(%1361, newshape=[8, 4, 4]) /* ty=Tensor[(8, 4, 4), int64] */;
  %1365 = reshape(%1362, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %1366 = @func_679(%1363, %1364, %1365) /* ty=(Tensor[(8, 4, 4), bool], Tensor[(385), int64], Tensor[(14), float32], Tensor[(14, 1, 1), float64], Tensor[(14, 1, 1), float64], Tensor[(11, 5, 7), int64], Tensor[(14, 1, 1), float64]) */;
  %1367 = cast(meta[relay.Constant][110] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %1368 = reshape(%1367, newshape=[10, 14, 8]) /* ty=Tensor[(10, 14, 8), float64] */;
  %1369 = @func_1667(%1368) /* ty=(Tensor[(10, 14, 8), float64], Tensor[(16, 14, 9), uint32], Tensor[(14), float32], Tensor[(14), float64], Tensor[(1800), int32]) */;
  %1370 = cast(meta[relay.Constant][111] /* ty=Tensor[(1, 624), float64] */, dtype="float64") /* ty=Tensor[(1, 624), float64] */;
  %1371 = cast(meta[relay.Constant][109] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %1372 = reshape(%1370, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %1373 = reshape(%1371, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %1374 = @func_2422(%1372, %1373) /* ty=(Tensor[(5, 7, 7), float32], Tensor[(128), int64], Tensor[(624), float64], Tensor[(128), int64], Tensor[(14, 1, 1), float32], Tensor[(14), float32], Tensor[(128), int64]) */;
  %1375 = tan(%1359) /* ty=Tensor[(3, 16, 15), float64] */;
  %1376 = %1366.0;
  %1377 = %1369.4;
  %1378 = %1374.6;
  (%1375, %1376, %var_3373, meta[relay.Constant][109] /* ty=Tensor[(14), float32] */, %1377, meta[relay.Constant][110] /* ty=Tensor[(1120), float64] */, %1378, meta[relay.Constant][111] /* ty=Tensor[(1, 624), float64] */)
}

def @func_6170(%var_6168: Tensor[(7, 8, 8), int8], %var_6169: Tensor[(7, 8, 8), int8]) -> (Tensor[(7, 8, 8), bool],) {
  @func_6166(%var_6168, %var_6169) /* ty=(Tensor[(7, 8, 8), bool],) */
}

def @func_8484(%var_8482: Tensor[(720), float64]) -> (Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) {
  @func_8481(%var_8482) /* ty=(Tensor[(15, 2, 6), uint8], Tensor[(1120), float64], Tensor[(720), float64], Tensor[(64, 2), int64], Tensor[(9, 7, 6), float32], Tensor[(126, 3), float32]) */
}

def @func_13611() -> Tensor[(378), float32] {
  @func_13609() /* ty=Tensor[(378), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen881/build/output.py", line 3786, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:35:39] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

