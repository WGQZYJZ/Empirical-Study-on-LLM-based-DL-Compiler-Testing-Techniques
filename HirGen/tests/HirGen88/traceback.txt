==========mod==========
#[version = "0.0.5"]
def @func_6244(%var_6241: Tensor[(1, 1452), float32], %var_6242: Tensor[(26), float64]) -> (Tensor[(320), bool], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(1452), float32], Tensor[(1, 1452), float32], Tensor[(26), float64]) {
  %0 = @func_5462() /* ty=(Tensor[(320), float32], Tensor[(320), float64], Tensor[(320), bool]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %2 = reshape(%1, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %3 = @func_5252(%2) /* ty=(Tensor[(320), float32], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(196, 2), uint8], Tensor[(1452), float32], Tensor[(35, 4), float32]) */;
  %4 = cast(%var_6241, dtype="float32") /* ty=Tensor[(1, 1452), float32] */;
  %5 = %0.2;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(320), float32] */;
  %7 = cast(%var_6242, dtype="float64") /* ty=Tensor[(26), float64] */;
  %8 = reshape(%4, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %9 = reshape(%6, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %10 = reshape(%7, newshape=[13, 2]) /* ty=Tensor[(13, 2), float64] */;
  %11 = @func_5701(%8, %9, %10) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(1452), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64]) */;
  %12 = %3.1;
  %13 = %11.3;
  (%5, %12, meta[relay.Constant][0] /* ty=Tensor[(20), float64] */, %13, %var_6241, %var_6242)
}

def @func_5537() -> Tensor[(7, 13, 2), uint64] {
  %14 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %14.0
}

def @func_6126() -> (Tensor[(7, 13, 2), uint64],) {
  %15 = @func_5525() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%15,)
}

def @func_7126(%var_7089: Tensor[(50, 4), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(50, 4), float32], Tensor[(10, 4, 5), int64], Tensor[(7, 13, 2), float64]) {
  %16 = cast(%var_7089, dtype="float32") /* ty=Tensor[(50, 4), float32] */;
  %17 = reshape(%16, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float32] */;
  %18 = @func_4043(%17) /* ty=(Tensor[(10, 4, 5), bool],) */;
  %19 = %18.0;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 4, 5), bool] */, dtype="int64") /* ty=Tensor[(10, 4, 5), int64] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="int64") /* ty=Tensor[(10, 4, 5), int64] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %24 = @func_6716() /* ty=(Tensor[(7, 13, 2), float64], Tensor[(7, 13, 2), float64]) */;
  %25 = @func_4125() /* ty=Tensor[(7, 13, 2), uint64] */;
  %26 = subtract(%22, %23) /* ty=Tensor[(10, 4, 5), int64] */;
  %27 = %24.0;
  (%25, %var_7089, %26, %27)
}

def @func_5069() -> (Tensor[(7, 13, 2), uint64],) {
  %28 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%28,)
}

def @func_2501(%var_2468: Tensor[(1452), float32], %var_2470: Tensor[(320), float32], %var_2471: Tensor[(26), float64]) -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(840, 1), float64], Tensor[(320), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float64]) {
  %29 = cast(3.15414f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %30 = cast(%var_2468, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(840, 1), float64] */, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
  %32 = cast(%var_2470, dtype="float32") /* ty=Tensor[(320), float32] */;
  %33 = cast(%var_2471, dtype="float64") /* ty=Tensor[(26), float64] */;
  %34 = reshape(%29, newshape=[]) /* ty=float32 */;
  %35 = reshape(%30, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float32] */;
  %36 = reshape(%31, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %37 = reshape(%32, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %38 = reshape(%33, newshape=[13, 2]) /* ty=Tensor[(13, 2), float64] */;
  %39 = @func_782(%34, %35, %36, %37, %38) /* ty=(Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) */;
  %40 = cast(%var_2468, dtype="float64") /* ty=Tensor[(1452), float64] */;
  %41 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %42 = %39.1;
  %43 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %44 = cosh(%40) /* ty=Tensor[(1452), float64] */;
  (%41, %42, 3.15414f /* ty=float32 */, meta[relay.Constant][2] /* ty=Tensor[(840, 1), float64] */, %var_2470, %var_2471, %43, %44)
}

def @func_3484(%var_3475: Tensor[(780), float32], %var_3476: Tensor[(225), int64], %var_3477: Tensor[(140), float32]) -> (Tensor[(320), float64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(780), float32], Tensor[(225), int64], Tensor[(140), float32]) {
  %45 = @func_3286() /* ty=(Tensor[(320), float64],) */;
  %46 = cast(%var_3475, dtype="float32") /* ty=Tensor[(780), float32] */;
  %47 = cast(%var_3476, dtype="int64") /* ty=Tensor[(225), int64] */;
  %48 = cast(%var_3477, dtype="float32") /* ty=Tensor[(140), float32] */;
  %49 = reshape(%46, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %50 = reshape(%47, newshape=[225]) /* ty=Tensor[(225), int64] */;
  %51 = reshape(%48, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
  %52 = @func_3199(%49, %50, %51) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(7, 13, 2), float64], Tensor[(140), int64], Tensor[(225), int64], Tensor[(140, 1), float32]) */;
  %53 = %45.0;
  %54 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %55 = %52.2;
  (%53, %54, %55, %var_3475, %var_3476, %var_3477)
}

def @func_4904(%var_4887: Tensor[(780), float32], %var_4888: Tensor[(225), int64]) -> (Tensor[(7, 13, 2), bool], Tensor[(320), float64], Tensor[(140), float32], Tensor[(780), float32], Tensor[(225), int64], Tensor[(140), float32]) {
  %56 = @func_4053() /* ty=Tensor[(7, 13, 2), uint64] */;
  %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 13, 2), uint64] */, dtype="bool") /* ty=Tensor[(7, 13, 2), bool] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="bool") /* ty=Tensor[(7, 13, 2), bool] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %61 = cast(%var_4887, dtype="float32") /* ty=Tensor[(780), float32] */;
  %62 = cast(%var_4888, dtype="int64") /* ty=Tensor[(225), int64] */;
  %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %64 = reshape(%61, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %65 = reshape(%62, newshape=[225]) /* ty=Tensor[(225), int64] */;
  %66 = reshape(%63, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %67 = @func_3484(%64, %65, %66) /* ty=(Tensor[(320), float64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(780), float32], Tensor[(225), int64], Tensor[(140), float32]) */;
  %68 = less_equal(%59, %60) /* ty=Tensor[(7, 13, 2), bool] */;
  %69 = @func_4671() /* ty=Tensor[(320), float64] */;
  %70 = %67.5;
  (%68, %69, %70, %var_4887, %var_4888, meta[relay.Constant][4] /* ty=Tensor[(140), float32] */)
}

def @func_7154() -> (Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) {
  %71 = @func_6147() /* ty=(Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %72 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %73 = %71.0;
  %74 = %72.0;
  %75 = @func_5537() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%73, %74, %75)
}

def @func_492(%var_484: Tensor[(392), uint8]) -> (Tensor[(16, 10, 15), float64], Tensor[(16, 10, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(392), uint8], Tensor[(840), float64]) {
  %76 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 10, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 15), float32] */;
  %77 = sin(%76) /* ty=Tensor[(16, 10, 15), float32] */;
  %78 = cast(%77, dtype="float64") /* ty=Tensor[(16, 10, 15), float64] */;
  %79 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 10, 15), float32] */, dtype="float64") /* ty=Tensor[(16, 10, 15), float64] */;
  %80 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%77, dtype="float64") /* ty=Tensor[(16, 10, 15), float64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %83 = cast(%var_484, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %84 = cast(%var_484, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %85 = reshape(%83, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
  %86 = reshape(%84, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
  %87 = @func_373(%85, %86) /* ty=(Tensor[(2, 14, 14), uint8], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float64], Tensor[(2, 14, 14), int32]) */;
  %88 = cast(%var_484, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %89 = cast(%var_484, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %90 = reshape(%88, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
  %91 = reshape(%89, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
  %92 = @func_373(%90, %91) /* ty=(Tensor[(2, 14, 14), uint8], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float64], Tensor[(2, 14, 14), int32]) */;
  %93 = cos(%78) /* ty=Tensor[(16, 10, 15), float64] */;
  %94 = multiply(%81, %82) /* ty=Tensor[(16, 10, 15), float64] */;
  %95 = %87.6;
  %96 = %92.2;
  (%93, %94, %95, %var_484, %96)
}

def @func_4206(%var_4165: Tensor[(840), float64], %var_4167: Tensor[(1452), float32], %var_4168: Tensor[(26), float64]) -> (Tensor[(320), float64], Tensor[(12, 5, 13), uint64], Tensor[(294), float32], Tensor[(840), float64], Tensor[(780), float32], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32]) {
  %97 = @func_3286() /* ty=(Tensor[(320), float64],) */;
  %98 = cast(meta[relay.Constant][6] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %99 = cast(%var_4165, dtype="float64") /* ty=Tensor[(840), float64] */;
  %100 = cast(meta[relay.Constant][7] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %101 = cast(%var_4167, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %102 = %97.0;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(320), float32] */;
  %104 = cast(%var_4168, dtype="float64") /* ty=Tensor[(26), float64] */;
  %105 = reshape(%98, newshape=[294]) /* ty=Tensor[(294), float32] */;
  %106 = reshape(%99, newshape=[840, 1]) /* ty=Tensor[(840, 1), float64] */;
  %107 = reshape(%100, newshape=[10, 78]) /* ty=Tensor[(10, 78), float32] */;
  %108 = reshape(%101, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %109 = reshape(%103, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %110 = reshape(%104, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %111 = @func_3395(%105, %106, %107, %108, %109, %110) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 13, 2), float64], Tensor[(60, 14), float64], Tensor[(840, 1), float64], Tensor[(10, 78), float32], Tensor[(13, 2), float64], float32, Tensor[(1452), float32], Tensor[(320), float32], Tensor[(26), float64], Tensor[(12, 5, 13), uint64], Tensor[(60), uint64], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), int32]) */;
  %112 = cast(meta[relay.Constant][6] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %113 = reshape(%112, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %114 = @func_2297(%113) /* ty=(Tensor[(7, 14, 3), float32],) */;
  %115 = %111.11;
  %116 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %117 = %114.0;
  (%102, %115, meta[relay.Constant][6] /* ty=Tensor[(294), float32] */, %var_4165, meta[relay.Constant][7] /* ty=Tensor[(780), float32] */, %var_4167, %var_4168, %116, %117)
}

def @func_6147() -> (Tensor[(320), float32], Tensor[(1, 26), float64]) {
  %118 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %119 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %120 = %118.3;
  %121 = %119.4;
  (%120, %121)
}

def @func_782(%var_743: float32, %var_744: Tensor[(12, 11, 11), float32], %var_750: Tensor[(840), float64], %var_751: Tensor[(320), float32], %var_756: Tensor[(13, 2), float64]) -> (Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) {
  %122 = cast(%var_743, dtype="float32") /* ty=float32 */;
  %123 = cast(%var_744, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %124 = cast(%var_750, dtype="float64") /* ty=Tensor[(840), float64] */;
  %125 = cast(%var_751, dtype="float32") /* ty=Tensor[(320), float32] */;
  %126 = reshape(%124, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %127 = reshape(%125, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %128 = @func_269(%126, %127) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %129 = cast(%var_756, dtype="float64") /* ty=Tensor[(13, 2), float64] */;
  %130 = reshape(%129, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %131 = @func_690(%130) /* ty=(Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) */;
  %132 = %131.2;
  %133 = cast(%132, dtype="float64") /* ty=Tensor[(392), float64] */;
  %134 = sqrt(%133) /* ty=Tensor[(392), float64] */;
  %135 = cast(%134, dtype="float64") /* ty=Tensor[(392), float64] */;
  %136 = divide(%122, %123) /* ty=Tensor[(12, 11, 11), float32] */;
  %137 = %128.2;
  %138 = atan(%135) /* ty=Tensor[(392), float64] */;
  (%136, %137, %var_750, %var_751, %var_756, %138)
}

def @func_7401() -> Tensor[(7, 13, 2), uint64] {
  %139 = @func_4371() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) */;
  %139.1
}

def @func_3695(%var_3680: Tensor[(14, 9, 2), uint64]) -> (Tensor[(14, 9, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64]) {
  %140 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 9, 2), uint64] */, dtype="uint64") /* ty=Tensor[(1, 9, 2), uint64] */;
  %141 = cast(%var_3680, dtype="uint64") /* ty=Tensor[(14, 9, 2), uint64] */;
  %142 = cast(meta[relay.Constant][9] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %143 = reshape(%142, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %144 = bitwise_xor(%140, %141) /* ty=Tensor[(14, 9, 2), uint64] */;
  %145 = @func_1957(%143) /* ty=Tensor[(1, 4, 13), float64] */;
  (%144, %145, meta[relay.Constant][9] /* ty=Tensor[(52), float64] */)
}

def @func_911(%var_903: Tensor[(13, 6, 10), float32], %var_904: Tensor[(13, 6, 10), float32]) -> Tensor[(13, 6, 10), bool] {
  %146 = cast(%var_904, dtype="bool") /* ty=Tensor[(13, 6, 10), bool] */;
  %147 = shape_of(%var_903, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%var_903, dtype="bool") /* ty=Tensor[(13, 6, 10), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%148, %149) /* ty=Tensor[(13, 6, 10), bool] */
}

def @func_2137(%var_2132: Tensor[(12, 5, 1), uint64], %var_2133: Tensor[(12, 5, 13), uint64]) -> (Tensor[(12, 5, 13), uint64],) {
  %150 = cast(%var_2132, dtype="uint64") /* ty=Tensor[(12, 5, 1), uint64] */;
  %151 = cast(%var_2133, dtype="uint64") /* ty=Tensor[(12, 5, 13), uint64] */;
  %152 = multiply(%150, %151) /* ty=Tensor[(12, 5, 13), uint64] */;
  (%152,)
}

def @func_5525() -> Tensor[(7, 13, 2), uint64] {
  @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_3947(%var_3919: Tensor[(1, 11, 1), float32], %var_3937: Tensor[(140), float32]) -> (Tensor[(780), float32], Tensor[(780), float32], Tensor[(140), float32], Tensor[(1, 11, 225), float64]) {
  %153 = cast(meta[relay.Constant][10] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(225), int64] */, dtype="int64") /* ty=Tensor[(225), int64] */;
  %155 = cast(%var_3937, dtype="float32") /* ty=Tensor[(140), float32] */;
  %156 = reshape(%153, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %157 = reshape(%154, newshape=[225]) /* ty=Tensor[(225), int64] */;
  %158 = reshape(%155, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
  %159 = @func_3199(%156, %157, %158) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(7, 13, 2), float64], Tensor[(140), int64], Tensor[(225), int64], Tensor[(140, 1), float32]) */;
  %160 = cast(%var_3919, dtype="float32") /* ty=Tensor[(1, 11, 1), float32] */;
  %161 = sqrt(%160) /* ty=Tensor[(1, 11, 1), float32] */;
  %162 = cast(meta[relay.Constant][11] /* ty=Tensor[(225), int64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %163 = cast(%161, dtype="float64") /* ty=Tensor[(1, 11, 1), float64] */;
  %164 = %159.2;
  %165 = floor_divide(%162, %163) /* ty=Tensor[(1, 11, 225), float64] */;
  (%164, meta[relay.Constant][10] /* ty=Tensor[(780), float32] */, %var_3937, %165)
}

def @func_5617(%var_5592: Tensor[(3, 1, 5), uint64], %var_5593: Tensor[(3, 11, 5), uint64]) -> Tensor[(3, 11, 5), bool] {
  %166 = cast(%var_5592, dtype="uint64") /* ty=Tensor[(3, 1, 5), uint64] */;
  %167 = cast(%var_5593, dtype="uint64") /* ty=Tensor[(3, 11, 5), uint64] */;
  %168 = left_shift(%166, %167) /* ty=Tensor[(3, 11, 5), uint64] */;
  %169 = cast(%168, dtype="bool") /* ty=Tensor[(3, 11, 5), bool] */;
  %170 = cast(%var_5592, dtype="bool") /* ty=Tensor[(3, 1, 5), bool] */;
  logical_or(%169, %170) /* ty=Tensor[(3, 11, 5), bool] */
}

def @func_5996(%var_5959: Tensor[(16, 15, 10), float32], %var_5978: Tensor[(70, 2), float32]) -> (Tensor[(16, 15, 10), float64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(25, 9), int64], Tensor[(70, 2), float32]) {
  %171 = cast(%var_5959, dtype="float32") /* ty=Tensor[(16, 15, 10), float32] */;
  %172 = rsqrt(%171) /* ty=Tensor[(16, 15, 10), float32] */;
  %173 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 15, 10), float32] */, dtype="float64") /* ty=Tensor[(16, 15, 10), float64] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="float64") /* ty=Tensor[(16, 15, 10), float64] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %177 = cast(meta[relay.Constant][13] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %178 = cast(meta[relay.Constant][14] /* ty=Tensor[(25, 9), int64] */, dtype="int64") /* ty=Tensor[(25, 9), int64] */;
  %179 = cast(%var_5978, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
  %180 = reshape(%177, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %181 = reshape(%178, newshape=[225]) /* ty=Tensor[(225), int64] */;
  %182 = reshape(%179, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
  %183 = @func_3199(%180, %181, %182) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(7, 13, 2), float64], Tensor[(140), int64], Tensor[(225), int64], Tensor[(140, 1), float32]) */;
  %184 = floor_divide(%175, %176) /* ty=Tensor[(16, 15, 10), float64] */;
  %185 = %183.0;
  (%184, %185, meta[relay.Constant][13] /* ty=Tensor[(780), float32] */, meta[relay.Constant][14] /* ty=Tensor[(25, 9), int64] */, %var_5978)
}

def @func_2891(%var_2880: Tensor[(60, 14), float64], %var_2881: Tensor[(320), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(60, 14), float32]) {
  %186 = cast(%var_2880, dtype="float64") /* ty=Tensor[(60, 14), float64] */;
  %187 = cast(%var_2881, dtype="float32") /* ty=Tensor[(320), float32] */;
  %188 = reshape(%186, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %189 = reshape(%187, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %190 = @func_269(%188, %189) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %191 = cast(%var_2880, dtype="float32") /* ty=Tensor[(60, 14), float32] */;
  %192 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %193 = %190.2;
  %194 = rsqrt(%191) /* ty=Tensor[(60, 14), float32] */;
  (%192, %193, %var_2881, %194)
}

def @func_5317(%var_5312: Tensor[(11, 8, 14), int16]) -> (Tensor[(11, 8, 14), int16],) {
  %195 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 8, 14), int16] */, dtype="int16") /* ty=Tensor[(11, 8, 14), int16] */;
  %196 = shape_of(%var_5312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%var_5312, dtype="int16") /* ty=Tensor[(11, 8, 14), int16] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %199 = bitwise_xor(%197, %198) /* ty=Tensor[(11, 8, 14), int16] */;
  (%199,)
}

def @func_6299(%var_6286: Tensor[(1573), uint32], %var_6292: Tensor[(20), float64]) -> (Tensor[(7, 13, 2), uint64], Tensor[(1573), uint32], Tensor[(26), float64], Tensor[(20), float64], Tensor[(13, 2, 320), uint32]) {
  %200 = @func_4371() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) */;
  %201 = cast(%var_6292, dtype="float64") /* ty=Tensor[(20), float64] */;
  %202 = reshape(%201, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %203 = @func_5252(%202) /* ty=(Tensor[(320), float32], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(196, 2), uint8], Tensor[(1452), float32], Tensor[(35, 4), float32]) */;
  %204 = %203.0;
  %205 = cast(%var_6286, dtype="uint32") /* ty=Tensor[(1573), uint32] */;
  %206 = cast(%var_6286, dtype="uint32") /* ty=Tensor[(1573), uint32] */;
  %207 = cast(meta[relay.Constant][16] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %208 = reshape(%205, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), uint32] */;
  %209 = reshape(%206, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), uint32] */;
  %210 = reshape(%207, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %211 = @func_1306(%208, %209, %210) /* ty=(Tensor[(11, 11, 13), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(13, 6, 10), bool], Tensor[(13, 2, 1), float64], Tensor[(26), float64], Tensor[(840), float64]) */;
  %212 = %211.4;
  %213 = cast(%204, dtype="uint32") /* ty=Tensor[(320), uint32] */;
  %214 = cast(%212, dtype="uint32") /* ty=Tensor[(13, 2, 1), uint32] */;
  %215 = %200.0;
  %216 = right_shift(%213, %214) /* ty=Tensor[(13, 2, 320), uint32] */;
  (%215, %var_6286, meta[relay.Constant][16] /* ty=Tensor[(26), float64] */, %var_6292, %216)
}

def @func_6761(%var_6729: Tensor[(52), float64], %var_6758: Tensor[(60), uint64]) -> (Tensor[(320), float64], Tensor[(?, 4, 13), bool], Tensor[(12, 5, 13), uint64], Tensor[(60), uint64], Tensor[(780), uint64]) {
  %217 = @func_6389() /* ty=(Tensor[(320), float64],) */;
  %218 = cast(%var_6729, dtype="float64") /* ty=Tensor[(52), float64] */;
  %219 = reshape(%218, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %220 = @func_1957(%219) /* ty=Tensor[(1, 4, 13), float64] */;
  %221 = cast(%var_6729, dtype="bool") /* ty=Tensor[(52), bool] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="bool") /* ty=Tensor[(1, 4, 13), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = cast(%var_6758, dtype="uint64") /* ty=Tensor[(60), uint64] */;
  %226 = cast(meta[relay.Constant][17] /* ty=Tensor[(780), uint64] */, dtype="uint64") /* ty=Tensor[(780), uint64] */;
  %227 = reshape(%225, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), uint64] */;
  %228 = reshape(%226, newshape=[12, 5, 13]) /* ty=Tensor[(12, 5, 13), uint64] */;
  %229 = @func_2137(%227, %228) /* ty=(Tensor[(12, 5, 13), uint64],) */;
  %230 = %217.0;
  %231 = greater_equal(%223, %224) /* ty=Tensor[(?, 4, 13), bool] */;
  %232 = %229.0;
  (%230, %231, %232, %var_6758, meta[relay.Constant][17] /* ty=Tensor[(780), uint64] */)
}

def @func_690(%var_682: Tensor[(13, 2, 1), float64]) -> (Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) {
  %233 = cast(%var_682, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
  %234 = cast(meta[relay.Constant][18] /* ty=Tensor[(392), uint8] */, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %235 = reshape(%234, newshape=[392]) /* ty=Tensor[(392), uint8] */;
  %236 = @func_492(%235) /* ty=(Tensor[(16, 10, 15), float64], Tensor[(16, 10, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(392), uint8], Tensor[(840), float64]) */;
  %237 = sigmoid(%233) /* ty=Tensor[(13, 2, 1), float64] */;
  %238 = %236.4;
  (%237, %238, meta[relay.Constant][18] /* ty=Tensor[(392), uint8] */)
}

def @func_4479(%var_4399: Tensor[(2, 1, 10), float64], %var_4411: Tensor[(140), float32], %var_4423: Tensor[(392), uint8], %var_4449: Tensor[(1452), float32]) -> (Tensor[(320), float32], Tensor[(140), float32], Tensor[(5, 8, 8), uint64], Tensor[(2912), float32], Tensor[(2, 14, 14), uint8], Tensor[(392), uint8], Tensor[(780), float32], Tensor[(11), float32], Tensor[(2, 1, 10), float32], float64, Tensor[(52), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(1, 26), float64], Tensor[(2, ?, 10), bool], Tensor[(1452), float32], Tensor[(7, 13, 2), uint64]) {
  %239 = cast(%var_4411, dtype="float32") /* ty=Tensor[(140), float32] */;
  %240 = reshape(%239, newshape=[1, 14, 10]) /* ty=Tensor[(1, 14, 10), float32] */;
  %241 = @func_1489(%240) /* ty=(Tensor[(1, 14, 10), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) */;
  %242 = cast(meta[relay.Constant][19] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %243 = %241.1;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(320), float32] */;
  %245 = reshape(%242, newshape=[16, 13, 14]) /* ty=Tensor[(16, 13, 14), float32] */;
  %246 = reshape(%244, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %247 = @func_1345(%245, %246) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */;
  %248 = cast(%var_4423, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %249 = cast(%var_4423, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %250 = reshape(%248, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
  %251 = reshape(%249, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
  %252 = @func_373(%250, %251) /* ty=(Tensor[(2, 14, 14), uint8], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float64], Tensor[(2, 14, 14), int32]) */;
  %253 = cast(meta[relay.Constant][20] /* ty=Tensor[(11), float32] */, dtype="float32") /* ty=Tensor[(11), float32] */;
  %254 = cast(%var_4411, dtype="float32") /* ty=Tensor[(140), float32] */;
  %255 = reshape(%253, newshape=[1, 11, 1]) /* ty=Tensor[(1, 11, 1), float32] */;
  %256 = reshape(%254, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %257 = @func_3947(%255, %256) /* ty=(Tensor[(780), float32], Tensor[(780), float32], Tensor[(140), float32], Tensor[(1, 11, 225), float64]) */;
  %258 = cast(%var_4399, dtype="float64") /* ty=Tensor[(2, 1, 10), float64] */;
  %259 = atan(%258) /* ty=Tensor[(2, 1, 10), float64] */;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(2, 1, 10), float32] */;
  %261 = cast(meta[relay.Constant][21] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %262 = %257.0;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(780), float32] */;
  %264 = reshape(%261, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %265 = reshape(%263, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %266 = @func_2802(%264, %265) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64], Tensor[(13, 6, 10), bool], float64, Tensor[(224), float64], Tensor[(780), float32], Tensor[(320), float32]) */;
  %267 = cast(%var_4449, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %268 = cast(%243, dtype="float32") /* ty=Tensor[(320), float32] */;
  %269 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 26), float64] */, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
  %270 = reshape(%267, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %271 = reshape(%268, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %272 = reshape(%269, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %273 = @func_2501(%270, %271, %272) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(840, 1), float64], Tensor[(320), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float64]) */;
  %274 = cast(%259, dtype="float64") /* ty=Tensor[(2, 1, 10), float64] */;
  %275 = atanh(%274) /* ty=Tensor[(2, 1, 10), float64] */;
  %276 = cast(%259, dtype="bool") /* ty=Tensor[(2, 1, 10), bool] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="bool") /* ty=Tensor[(2, 1, 10), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %280 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %281 = cast(%var_4449, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %282 = %247.0;
  %283 = cast(%282, dtype="float32") /* ty=Tensor[(5, 8, 8), float32] */;
  %284 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 26), float64] */, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
  %285 = reshape(%281, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %286 = reshape(%283, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %287 = reshape(%284, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %288 = @func_2501(%285, %286, %287) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(840, 1), float64], Tensor[(320), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float64]) */;
  %289 = %252.0;
  %290 = exp(%260) /* ty=Tensor[(2, 1, 10), float32] */;
  %291 = %266.4;
  %292 = %273.4;
  %293 = less(%278, %279) /* ty=Tensor[(2, ?, 10), bool] */;
  %294 = %280.2;
  %295 = %288.6;
  (%243, %var_4411, %282, meta[relay.Constant][19] /* ty=Tensor[(2912), float32] */, %289, %var_4423, %262, meta[relay.Constant][20] /* ty=Tensor[(11), float32] */, %290, %291, meta[relay.Constant][21] /* ty=Tensor[(52), float64] */, %292, %var_4449, meta[relay.Constant][22] /* ty=Tensor[(1, 26), float64] */, %293, %294, %295)
}

def @func_3149(%var_3126: Tensor[(60, 14), float64], %var_3132: Tensor[(780), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(60, 14), float64], Tensor[(160, 2), float32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(780), float32], Tensor[(5, 8, 8), float64], Tensor[(1, 26), float64]) {
  %296 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %297 = cast(meta[relay.Constant][24] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %298 = cast(%var_3132, dtype="float32") /* ty=Tensor[(780), float32] */;
  %299 = reshape(%297, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %300 = reshape(%298, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %301 = @func_2802(%299, %300) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64], Tensor[(13, 6, 10), bool], float64, Tensor[(224), float64], Tensor[(780), float32], Tensor[(320), float32]) */;
  %302 = cast(%var_3126, dtype="float64") /* ty=Tensor[(60, 14), float64] */;
  %303 = cast(meta[relay.Constant][23] /* ty=Tensor[(160, 2), float32] */, dtype="float32") /* ty=Tensor[(160, 2), float32] */;
  %304 = reshape(%302, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %305 = reshape(%303, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %306 = @func_269(%304, %305) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %307 = %306.1;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(5, 8, 8), float64] */;
  %309 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %310 = %296.1;
  %311 = %301.2;
  %312 = cos(%308) /* ty=Tensor[(5, 8, 8), float64] */;
  %313 = %309.4;
  (%310, %var_3126, meta[relay.Constant][23] /* ty=Tensor[(160, 2), float32] */, %311, meta[relay.Constant][24] /* ty=Tensor[(52), float64] */, %var_3132, %312, %313)
}

def @func_2753(%var_2736: Tensor[(7, 13, 2), float64]) -> (Tensor[(7, 13, 2), float64],) {
  %314 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %316 = acosh(%315) /* ty=Tensor[(7, 13, 2), float64] */;
  %317 = cast(%var_2736, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %321 = power(%319, %320) /* ty=Tensor[(7, 13, 2), float64] */;
  (%321,)
}

def @func_7267(%var_7227: Tensor[(12, 26), float64], %var_7236: Tensor[(20), float64]) -> (Tensor[(12, 26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1573), uint32], Tensor[(20), float64], Tensor[(?, 26), int32]) {
  %322 = @func_6905() /* ty=Tensor[(1, 26), float64] */;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
  %324 = asin(%323) /* ty=Tensor[(1, 26), float64] */;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
  %326 = cast(%var_7227, dtype="float64") /* ty=Tensor[(12, 26), float64] */;
  %327 = cast(meta[relay.Constant][25] /* ty=Tensor[(1573), uint32] */, dtype="uint32") /* ty=Tensor[(1573), uint32] */;
  %328 = cast(%var_7236, dtype="float64") /* ty=Tensor[(20), float64] */;
  %329 = reshape(%327, newshape=[1573]) /* ty=Tensor[(1573), uint32] */;
  %330 = reshape(%328, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %331 = @func_6299(%329, %330) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1573), uint32], Tensor[(26), float64], Tensor[(20), float64], Tensor[(13, 2, 320), uint32]) */;
  %332 = cast(%322, dtype="float32") /* ty=Tensor[(1, 26), float32] */;
  %333 = tan(%332) /* ty=Tensor[(1, 26), float32] */;
  %334 = cast(%324, dtype="int32") /* ty=Tensor[(1, 26), int32] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(2), int32] */;
  %336 = cast(%333, dtype="int32") /* ty=Tensor[(1, 26), int32] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %338 = mod(%325, %326) /* ty=Tensor[(12, 26), float64] */;
  %339 = %331.0;
  %340 = add(%336, %337) /* ty=Tensor[(?, 26), int32] */;
  (%338, %339, meta[relay.Constant][25] /* ty=Tensor[(1573), uint32] */, %var_7236, %340)
}

def @func_3199(%var_3176: Tensor[(780), float32], %var_3185: Tensor[(225), int64], %var_3186: Tensor[(140, 1), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(7, 13, 2), float64], Tensor[(140), int64], Tensor[(225), int64], Tensor[(140, 1), float32]) {
  %341 = cast(%var_3176, dtype="float32") /* ty=Tensor[(780), float32] */;
  %342 = cast(%var_3176, dtype="float32") /* ty=Tensor[(780), float32] */;
  %343 = reshape(%341, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %344 = reshape(%342, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %345 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %346 = cast(%345, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %347 = reshape(%346, newshape=[7, 13, 2]) /* ty=Tensor[(7, 13, 2), float64] */;
  %348 = @func_2753(%347) /* ty=(Tensor[(7, 13, 2), float64],) */;
  %349 = cast(%var_3185, dtype="int64") /* ty=Tensor[(225), int64] */;
  %350 = cast(%var_3185, dtype="int64") /* ty=Tensor[(225), int64] */;
  %351 = cast(%var_3186, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %352 = reshape(%349, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %353 = reshape(%350, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %354 = reshape(%351, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %355 = @func_3022(%352, %353, %354) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(320), float32], Tensor[(140), int64]) */;
  %356 = @func_911(%343, %344) /* ty=Tensor[(13, 6, 10), bool] */;
  %357 = %348.0;
  %358 = %355.2;
  (%345, %356, %var_3176, %357, %358, %var_3185, %var_3186)
}

def @func_3870(%var_3853: Tensor[(294), float32], %var_3862: Tensor[(2912), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 14, 3), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) {
  %359 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %360 = cast(%var_3853, dtype="float32") /* ty=Tensor[(294), float32] */;
  %361 = reshape(%360, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %362 = @func_2297(%361) /* ty=(Tensor[(7, 14, 3), float32],) */;
  %363 = %362.0;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(7, 14, 3), float32] */;
  %365 = reshape(%364, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %366 = @func_2297(%365) /* ty=(Tensor[(7, 14, 3), float32],) */;
  %367 = cast(%var_3862, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %368 = cast(meta[relay.Constant][26] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %369 = reshape(%367, newshape=[16, 13, 14]) /* ty=Tensor[(16, 13, 14), float32] */;
  %370 = reshape(%368, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %371 = @func_1345(%369, %370) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */;
  %372 = %359.0;
  %373 = %366.0;
  %374 = %371.1;
  (%372, %363, %var_3853, %373, %374, %var_3862, meta[relay.Constant][26] /* ty=Tensor[(320), float32] */)
}

def @func_5023(%var_5010: Tensor[(7, 13, 2), float32]) -> (Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), float32]) {
  %375 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %376 = @func_2813() /* ty=(Tensor[(320), float32],) */;
  %377 = @func_4559() /* ty=(Tensor[(7, 13, 2), float64],) */;
  %378 = %377.0;
  %379 = cast(%378, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
  %380 = sigmoid(%379) /* ty=Tensor[(7, 13, 2), float32] */;
  %381 = cast(%var_5010, dtype="uint64") /* ty=Tensor[(7, 13, 2), uint64] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%380, dtype="uint64") /* ty=Tensor[(7, 13, 2), uint64] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %385 = cast(%var_5010, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
  %386 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%380, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %389 = %375.3;
  %390 = %376.0;
  %391 = bitwise_or(%383, %384) /* ty=Tensor[(7, 13, 2), uint64] */;
  %392 = floor_divide(%387, %388) /* ty=Tensor[(7, 13, 2), float32] */;
  (%389, %390, %391, %392)
}

def @func_6943(%var_6929: Tensor[(840), float64], %var_6934: Tensor[(140), float32]) -> (Tensor[(12, 5, 1), float64], Tensor[(5, 8, 8), float64], Tensor[(840), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(20), float64], Tensor[(140), float32], Tensor[(392), uint8], Tensor[(1452), float32], Tensor[(7, 13, 2), float64], Tensor[(10, 6, 14), float32]) {
  %393 = cast(%var_6929, dtype="float64") /* ty=Tensor[(840), float64] */;
  %394 = cast(meta[relay.Constant][27] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %395 = reshape(%393, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %396 = reshape(%394, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %397 = @func_269(%395, %396) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %398 = cast(meta[relay.Constant][28] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %399 = cast(%var_6934, dtype="float32") /* ty=Tensor[(140), float32] */;
  %400 = cast(meta[relay.Constant][29] /* ty=Tensor[(392), uint8] */, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %401 = cast(meta[relay.Constant][30] /* ty=Tensor[(1452), float32] */, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %402 = reshape(%398, newshape=[2, 1, 10]) /* ty=Tensor[(2, 1, 10), float64] */;
  %403 = reshape(%399, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %404 = reshape(%400, newshape=[392]) /* ty=Tensor[(392), uint8] */;
  %405 = reshape(%401, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %406 = @func_4479(%402, %403, %404, %405) /* ty=(Tensor[(320), float32], Tensor[(140), float32], Tensor[(5, 8, 8), uint64], Tensor[(2912), float32], Tensor[(2, 14, 14), uint8], Tensor[(392), uint8], Tensor[(780), float32], Tensor[(11), float32], Tensor[(2, 1, 10), float32], float64, Tensor[(52), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(1, 26), float64], Tensor[(2, ?, 10), bool], Tensor[(1452), float32], Tensor[(7, 13, 2), uint64]) */;
  %407 = @func_4559() /* ty=(Tensor[(7, 13, 2), float64],) */;
  %408 = cast(%var_6929, dtype="float64") /* ty=Tensor[(840), float64] */;
  %409 = reshape(%408, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
  %410 = @func_4075(%409) /* ty=(Tensor[(10, 6, 14), uint8], Tensor[(10, 6, 14), float32]) */;
  %411 = @func_5134() /* ty=Tensor[(12, 5, 1), float64] */;
  %412 = %397.1;
  %413 = %406.12;
  %414 = %407.0;
  %415 = %410.1;
  (%411, %412, %var_6929, meta[relay.Constant][27] /* ty=Tensor[(320), float32] */, %413, meta[relay.Constant][28] /* ty=Tensor[(20), float64] */, %var_6934, meta[relay.Constant][29] /* ty=Tensor[(392), uint8] */, meta[relay.Constant][30] /* ty=Tensor[(1452), float32] */, %414, %415)
}

def @func_4306(%var_4293: Tensor[(65), uint64]) -> (Tensor[(320), float64], Tensor[(392), uint8], Tensor[(7, 13, 2), uint64], Tensor[(840), float64], Tensor[(7, 13, 2), uint64], Tensor[(392), float32], Tensor[(5, 13, 11), int64], Tensor[(65), uint64], Tensor[(715), uint64]) {
  %416 = @func_3286() /* ty=(Tensor[(320), float64],) */;
  %417 = cast(meta[relay.Constant][31] /* ty=Tensor[(392), uint8] */, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %418 = reshape(%417, newshape=[392]) /* ty=Tensor[(392), uint8] */;
  %419 = @func_492(%418) /* ty=(Tensor[(16, 10, 15), float64], Tensor[(16, 10, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(392), uint8], Tensor[(840), float64]) */;
  %420 = cast(meta[relay.Constant][32] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %421 = %416.0;
  %422 = cast(%421, dtype="float32") /* ty=Tensor[(320), float32] */;
  %423 = reshape(%420, newshape=[60, 14]) /* ty=Tensor[(60, 14), float64] */;
  %424 = reshape(%422, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %425 = @func_2891(%423, %424) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(60, 14), float32]) */;
  %426 = cast(meta[relay.Constant][31] /* ty=Tensor[(392), uint8] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %427 = cast(%var_4293, dtype="uint64") /* ty=Tensor[(65), uint64] */;
  %428 = cast(meta[relay.Constant][33] /* ty=Tensor[(715), uint64] */, dtype="uint64") /* ty=Tensor[(715), uint64] */;
  %429 = reshape(%427, newshape=[5, 13, 1]) /* ty=Tensor[(5, 13, 1), uint64] */;
  %430 = reshape(%428, newshape=[5, 13, 11]) /* ty=Tensor[(5, 13, 11), uint64] */;
  %431 = @func_3603(%429, %430) /* ty=(Tensor[(5, 13, 11), int64],) */;
  %432 = %419.3;
  %433 = %425.0;
  %434 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %435 = atanh(%426) /* ty=Tensor[(392), float32] */;
  %436 = %431.0;
  (%421, %432, %433, meta[relay.Constant][32] /* ty=Tensor[(840), float64] */, %434, %435, %436, %var_4293, meta[relay.Constant][33] /* ty=Tensor[(715), uint64] */)
}

def @func_4371() -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) {
  %437 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %438 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %439 = %437.0;
  %440 = %438.1;
  (%439, %440)
}

def @func_7453(%var_7417: Tensor[(840), float64], %var_7418: Tensor[(1452), float32], %var_7419: Tensor[(26), float64], %var_7443: Tensor[(140), float32]) -> (Tensor[(13, 6, 10), uint8], Tensor[(1452), float32], Tensor[(840), float64], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), float32], Tensor[(320), float32], Tensor[(225), int64], Tensor[(140), float32]) {
  %441 = @func_6517() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8]) */;
  %442 = cast(%var_7417, dtype="float64") /* ty=Tensor[(840), float64] */;
  %443 = cast(%var_7418, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %444 = cast(%var_7419, dtype="float64") /* ty=Tensor[(26), float64] */;
  %445 = reshape(%442, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %446 = reshape(%443, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %447 = reshape(%444, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %448 = @func_4206(%445, %446, %447) /* ty=(Tensor[(320), float64], Tensor[(12, 5, 13), uint64], Tensor[(294), float32], Tensor[(840), float64], Tensor[(780), float32], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32]) */;
  %449 = @func_7154() /* ty=(Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) */;
  %450 = @func_6126() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %451 = %450.0;
  %452 = cast(%451, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
  %453 = cast(meta[relay.Constant][34] /* ty=Tensor[(225), int64] */, dtype="int64") /* ty=Tensor[(225), int64] */;
  %454 = cast(meta[relay.Constant][34] /* ty=Tensor[(225), int64] */, dtype="int64") /* ty=Tensor[(225), int64] */;
  %455 = cast(%var_7443, dtype="float32") /* ty=Tensor[(140), float32] */;
  %456 = reshape(%453, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %457 = reshape(%454, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %458 = reshape(%455, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %459 = @func_3022(%456, %457, %458) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(320), float32], Tensor[(140), int64]) */;
  %460 = %441.1;
  %461 = %448.5;
  %462 = %449.1;
  %463 = cosh(%452) /* ty=Tensor[(7, 13, 2), float32] */;
  %464 = %459.1;
  (%460, %461, %var_7417, %var_7418, %var_7419, %462, %463, %464, meta[relay.Constant][34] /* ty=Tensor[(225), int64] */, %var_7443)
}

def @func_6517() -> (Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8]) {
  %465 = @func_3991() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */;
  %466 = @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */;
  %467 = %465.1;
  (%466, %467)
}

def @func_2813() -> (Tensor[(320), float32],) {
  %468 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %469 = %468.3;
  (%469,)
}

def @func_4053() -> Tensor[(7, 13, 2), uint64] {
  %470 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %470.0
}

def @func_7530(%var_7509: Tensor[(11, 1), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(11, 1), float32], Tensor[(140), float32]) {
  %471 = @func_5748() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1, 225), int64], Tensor[(225), int64]) */;
  %472 = @func_5502() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(5, 13, 11), int64], Tensor[(65), uint64], Tensor[(1, 715), uint64]) */;
  %473 = cast(%var_7509, dtype="float32") /* ty=Tensor[(11, 1), float32] */;
  %474 = cast(meta[relay.Constant][35] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %475 = reshape(%473, newshape=[1, 11, 1]) /* ty=Tensor[(1, 11, 1), float32] */;
  %476 = reshape(%474, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %477 = @func_3947(%475, %476) /* ty=(Tensor[(780), float32], Tensor[(780), float32], Tensor[(140), float32], Tensor[(1, 11, 225), float64]) */;
  %478 = %471.0;
  %479 = %472.0;
  %480 = %477.1;
  (%478, %479, %480, %var_7509, meta[relay.Constant][35] /* ty=Tensor[(140), float32] */)
}

def @func_1489(%var_1459: Tensor[(1, 14, 10), float32]) -> (Tensor[(1, 14, 10), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) {
  %481 = cast(%var_1459, dtype="float32") /* ty=Tensor[(1, 14, 10), float32] */;
  %482 = cast(meta[relay.Constant][36] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %483 = cast(meta[relay.Constant][37] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %484 = reshape(%482, newshape=[16, 13, 14]) /* ty=Tensor[(16, 13, 14), float32] */;
  %485 = reshape(%483, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %486 = @func_1345(%484, %485) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */;
  %487 = exp(%481) /* ty=Tensor[(1, 14, 10), float32] */;
  %488 = %486.1;
  (%487, %488, meta[relay.Constant][36] /* ty=Tensor[(2912), float32] */, meta[relay.Constant][37] /* ty=Tensor[(320), float32] */)
}

def @func_6469(%var_6460: Tensor[(100, 2), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(10, 4, 5), bool], Tensor[(100, 2), float64], Tensor[(100, 2), float64]) {
  %489 = @func_4789() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float64]) */;
  %490 = cast(meta[relay.Constant][38] /* ty=Tensor[(100, 2), float32] */, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %491 = reshape(%490, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float32] */;
  %492 = @func_4043(%491) /* ty=(Tensor[(10, 4, 5), bool],) */;
  %493 = cast(%var_6460, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
  %494 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(100, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %495 = cast(meta[relay.Constant][38] /* ty=Tensor[(100, 2), float32] */, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %497 = cast(%var_6460, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
  %498 = %489.0;
  %499 = %492.0;
  %500 = divide(%495, %496) /* ty=Tensor[(100, 2), float64] */;
  %501 = cosh(%497) /* ty=Tensor[(100, 2), float64] */;
  (%498, %499, %500, %501)
}

def @func_2802(%var_2784: Tensor[(52), float64], %var_2790: Tensor[(780), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64], Tensor[(13, 6, 10), bool], float64, Tensor[(224), float64], Tensor[(780), float32], Tensor[(320), float32]) {
  %502 = cast(%var_2784, dtype="float64") /* ty=Tensor[(52), float64] */;
  %503 = reshape(%502, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %504 = cast(7.40485f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %505 = cast(meta[relay.Constant][39] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %506 = cast(%var_2790, dtype="float32") /* ty=Tensor[(780), float32] */;
  %507 = cast(meta[relay.Constant][40] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %508 = reshape(%504, newshape=[]) /* ty=float64 */;
  %509 = reshape(%505, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float64] */;
  %510 = reshape(%506, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %511 = reshape(%507, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %512 = @func_2281(%508, %509, %510, %511) /* ty=(Tensor[(16, 1, 14), float64], Tensor[(16, 1, 14), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) */;
  %513 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %514 = @func_1957(%503) /* ty=Tensor[(1, 4, 13), float64] */;
  %515 = %512.2;
  (%513, %514, %var_2784, %515, 7.40485f64 /* ty=float64 */, meta[relay.Constant][39] /* ty=Tensor[(224), float64] */, %var_2790, meta[relay.Constant][40] /* ty=Tensor[(320), float32] */)
}

def @func_3756(%var_3749: Tensor[(1, 225), int64]) -> (Tensor[(320), float64], Tensor[(7, 13, 2), float32], Tensor[(140), int64], Tensor[(1, 225), int64], Tensor[(140), float32]) {
  %516 = @func_3286() /* ty=(Tensor[(320), float64],) */;
  %517 = @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
  %519 = cast(%var_3749, dtype="int64") /* ty=Tensor[(1, 225), int64] */;
  %520 = cast(%var_3749, dtype="int64") /* ty=Tensor[(1, 225), int64] */;
  %521 = cast(meta[relay.Constant][41] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %522 = reshape(%519, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %523 = reshape(%520, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %524 = reshape(%521, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %525 = @func_3022(%522, %523, %524) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(320), float32], Tensor[(140), int64]) */;
  %526 = %516.0;
  %527 = acos(%518) /* ty=Tensor[(7, 13, 2), float32] */;
  %528 = %525.2;
  (%526, %527, %528, %var_3749, meta[relay.Constant][41] /* ty=Tensor[(140), float32] */)
}

def @func_3286() -> (Tensor[(320), float64],) {
  %529 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %530 = %529.3;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(320), float64] */;
  %532 = erf(%531) /* ty=Tensor[(320), float64] */;
  (%532,)
}

def @func_6657(%var_6629: Tensor[(6, 10, 4), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(6, 10, 4), uint16], Tensor[(7, 13, 2), uint64]) {
  %533 = cast(%var_6629, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %534 = tan(%533) /* ty=Tensor[(6, 10, 4), float32] */;
  %535 = cast(%534, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %536 = shape_of(%var_6629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%var_6629, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %539 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %540 = bitwise_and(%537, %538) /* ty=Tensor[(6, 10, 4), uint16] */;
  %541 = @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%539, %540, %541)
}

def @func_6905() -> Tensor[(1, 26), float64] {
  %542 = @func_6147() /* ty=(Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %542.1
}

def @func_5462() -> (Tensor[(320), float32], Tensor[(320), float64], Tensor[(320), bool]) {
  %543 = @func_3286() /* ty=(Tensor[(320), float64],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(320), float32] */;
  %546 = reshape(%545, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %547 = @func_4332() /* ty=Tensor[(320), float32] */;
  %548 = @func_5104(%546) /* ty=Tensor[(320), bool] */;
  (%547, %544, %548)
}

def @func_1957(%var_1945: Tensor[(1, 4, 13), float64]) -> Tensor[(1, 4, 13), float64] {
  %549 = cast(%var_1945, dtype="float64") /* ty=Tensor[(1, 4, 13), float64] */;
  %550 = log10(%549) /* ty=Tensor[(1, 4, 13), float64] */;
  %551 = cast(%550, dtype="float64") /* ty=Tensor[(1, 4, 13), float64] */;
  %552 = cos(%551) /* ty=Tensor[(1, 4, 13), float64] */;
  %553 = cast(%552, dtype="float64") /* ty=Tensor[(1, 4, 13), float64] */;
  exp(%553) /* ty=Tensor[(1, 4, 13), float64] */
}

def @func_6716() -> (Tensor[(7, 13, 2), float64], Tensor[(7, 13, 2), float64]) {
  %554 = @func_4125() /* ty=Tensor[(7, 13, 2), uint64] */;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %556 = tan(%555) /* ty=Tensor[(7, 13, 2), float64] */;
  %557 = cast(%554, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%556, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %561 = cast(%554, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %562 = floor_mod(%559, %560) /* ty=Tensor[(7, 13, 2), float64] */;
  %563 = erf(%561) /* ty=Tensor[(7, 13, 2), float64] */;
  (%562, %563)
}

def @func_5134() -> Tensor[(12, 5, 1), float64] {
  %564 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 1), float64] */;
  acosh(%564) /* ty=Tensor[(12, 5, 1), float64] */
}

def @func_5476(%var_5472: Tensor[(3, 11, 1), float32]) -> Tensor[(3, 11, 1), float32] {
  %565 = cast(%var_5472, dtype="float32") /* ty=Tensor[(3, 11, 1), float32] */;
  sinh(%565) /* ty=Tensor[(3, 11, 1), float32] */
}

def @func_4075(%var_4063: Tensor[(10, 6, 14), float64]) -> (Tensor[(10, 6, 14), uint8], Tensor[(10, 6, 14), float32]) {
  %566 = cast(%var_4063, dtype="uint8") /* ty=Tensor[(10, 6, 14), uint8] */;
  %567 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(10, 6, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 6, 14), float64] */, dtype="uint8") /* ty=Tensor[(10, 6, 14), uint8] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %570 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 14), float64] */;
  %571 = log(%570) /* ty=Tensor[(10, 6, 14), float64] */;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(10, 6, 14), float32] */;
  %573 = minimum(%568, %569) /* ty=Tensor[(10, 6, 14), uint8] */;
  %574 = atan(%572) /* ty=Tensor[(10, 6, 14), float32] */;
  (%573, %574)
}

def @func_4332() -> Tensor[(320), float32] {
  %575 = @func_2862() /* ty=(Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780, 1), float32], Tensor[(7, 13, 2), uint64]) */;
  %575.0
}

def @func_3647() -> (Tensor[(7, 13, 2), uint64],) {
  %576 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%576,)
}

def @func_7064(%var_7050: Tensor[(1452), float32]) -> (Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(840), float64], Tensor[(12, 5, 13), uint64], Tensor[(1452), float32], Tensor[(33), uint16], Tensor[(26), float32]) {
  %577 = cast(meta[relay.Constant][44] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %578 = @func_4332() /* ty=Tensor[(320), float32] */;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(320), float32] */;
  %580 = reshape(%577, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %581 = reshape(%579, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %582 = @func_269(%580, %581) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %583 = %582.0;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(7, 8, 15), float64] */;
  %585 = cast(%var_7050, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %586 = cast(meta[relay.Constant][45] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %587 = reshape(%584, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %588 = reshape(%585, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %589 = reshape(%586, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %590 = @func_4206(%587, %588, %589) /* ty=(Tensor[(320), float64], Tensor[(12, 5, 13), uint64], Tensor[(294), float32], Tensor[(840), float64], Tensor[(780), float32], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32]) */;
  %591 = cast(meta[relay.Constant][46] /* ty=Tensor[(33), float32] */, dtype="float32") /* ty=Tensor[(33), float32] */;
  %592 = reshape(%591, newshape=[3, 11, 1]) /* ty=Tensor[(3, 11, 1), float32] */;
  %593 = @func_5476(%592) /* ty=Tensor[(3, 11, 1), float32] */;
  %594 = cast(%593, dtype="uint16") /* ty=Tensor[(3, 11, 1), uint16] */;
  %595 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(33), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %596 = cast(meta[relay.Constant][46] /* ty=Tensor[(33), float32] */, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %598 = cast(meta[relay.Constant][45] /* ty=Tensor[(26), float64] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %599 = %590.1;
  %600 = logical_xor(%596, %597) /* ty=Tensor[(33), uint16] */;
  %601 = sigmoid(%598) /* ty=Tensor[(26), float32] */;
  (%578, %583, meta[relay.Constant][44] /* ty=Tensor[(840), float64] */, %599, %var_7050, %600, %601)
}

def @func_4789() -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float64]) {
  %602 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %603 = %602.0;
  %604 = @func_4671() /* ty=Tensor[(320), float64] */;
  (%603, %604)
}

def @func_5388() -> Tensor[(7, 13, 2), uint64] {
  %605 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %605.1
}

def @func_5748() -> (Tensor[(7, 13, 2), uint64], Tensor[(1, 225), int64], Tensor[(225), int64]) {
  %606 = cast(meta[relay.Constant][47] /* ty=Tensor[(225), int64] */, dtype="int64") /* ty=Tensor[(225), int64] */;
  %607 = reshape(%606, newshape=[1, 225]) /* ty=Tensor[(1, 225), int64] */;
  %608 = @func_3756(%607) /* ty=(Tensor[(320), float64], Tensor[(7, 13, 2), float32], Tensor[(140), int64], Tensor[(1, 225), int64], Tensor[(140), float32]) */;
  %609 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %610 = %608.3;
  (%609, %610, meta[relay.Constant][47] /* ty=Tensor[(225), int64] */)
}

def @func_6993(%var_6959: Tensor[(16, 14, 12), uint32]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
  %611 = cast(%var_6959, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %612 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(16, 14, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 14, 12), uint32] */, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = greater(%613, %614) /* ty=Tensor[(16, 14, 12), bool] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %617 = cast(%var_6959, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %618 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(16, 14, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 14, 12), uint32] */, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = erf(%616) /* ty=Tensor[(16, 14, 12), float64] */;
  %622 = greater_equal(%619, %620) /* ty=Tensor[(16, 14, 12), bool] */;
  (%621, %622)
}

def @func_2862() -> (Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780, 1), float32], Tensor[(7, 13, 2), uint64]) {
  %623 = @func_2813() /* ty=(Tensor[(320), float32],) */;
  %624 = cast(meta[relay.Constant][49] /* ty=Tensor[(780, 1), float32] */, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %625 = cast(meta[relay.Constant][49] /* ty=Tensor[(780, 1), float32] */, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %626 = reshape(%624, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %627 = reshape(%625, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %628 = %623.0;
  %629 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %630 = @func_911(%626, %627) /* ty=Tensor[(13, 6, 10), bool] */;
  %631 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%628, %629, %630, meta[relay.Constant][49] /* ty=Tensor[(780, 1), float32] */, %631)
}

def @func_5701(%var_5687: Tensor[(1452), float32], %var_5689: Tensor[(320), float32], %var_5690: Tensor[(13, 2), float64]) -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(1452), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64]) {
  %632 = cast(-2.488f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %633 = cast(%var_5687, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %634 = cast(meta[relay.Constant][50] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %635 = cast(%var_5689, dtype="float32") /* ty=Tensor[(320), float32] */;
  %636 = cast(%var_5690, dtype="float64") /* ty=Tensor[(13, 2), float64] */;
  %637 = reshape(%632, newshape=[]) /* ty=float32 */;
  %638 = reshape(%633, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float32] */;
  %639 = reshape(%634, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %640 = reshape(%635, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %641 = reshape(%636, newshape=[13, 2]) /* ty=Tensor[(13, 2), float64] */;
  %642 = @func_782(%637, %638, %639, %640, %641) /* ty=(Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) */;
  %643 = @func_5537() /* ty=Tensor[(7, 13, 2), uint64] */;
  %644 = %642.1;
  (%643, %644, -2.488f /* ty=float32 */, %var_5687, meta[relay.Constant][50] /* ty=Tensor[(840), float64] */, %var_5689, %var_5690)
}

def @func_4671() -> Tensor[(320), float64] {
  %645 = @func_3286() /* ty=(Tensor[(320), float64],) */;
  %645.0
}

def @func_373(%var_292: Tensor[(2, 14, 14), uint8], %var_293: Tensor[(2, 14, 14), uint8]) -> (Tensor[(2, 14, 14), uint8], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float64], Tensor[(2, 14, 14), int32]) {
  %646 = cast(%var_293, dtype="uint8") /* ty=Tensor[(2, 14, 14), uint8] */;
  %647 = shape_of(%var_292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%var_292, dtype="uint8") /* ty=Tensor[(2, 14, 14), uint8] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %650 = cast(meta[relay.Constant][51] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %651 = cast(meta[relay.Constant][52] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %652 = reshape(%650, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %653 = reshape(%651, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %654 = @func_269(%652, %653) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %655 = cast(meta[relay.Constant][51] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %656 = cast(meta[relay.Constant][52] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %657 = reshape(%655, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %658 = reshape(%656, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %659 = @func_269(%657, %658) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %660 = cast(meta[relay.Constant][51] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %661 = %654.2;
  %662 = cast(%661, dtype="float32") /* ty=Tensor[(320), float32] */;
  %663 = reshape(%660, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %664 = reshape(%662, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %665 = @func_269(%663, %664) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %666 = %659.2;
  %667 = cast(%666, dtype="float32") /* ty=Tensor[(320), float32] */;
  %668 = cast(%661, dtype="float32") /* ty=Tensor[(320), float32] */;
  %669 = reshape(%667, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %670 = reshape(%668, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %671 = @func_91(%669, %670) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) */;
  %672 = cast(%661, dtype="float32") /* ty=Tensor[(320), float32] */;
  %673 = cast(meta[relay.Constant][52] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %674 = reshape(%672, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %675 = reshape(%673, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %676 = @func_91(%674, %675) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) */;
  %677 = cast(%var_293, dtype="int32") /* ty=Tensor[(2, 14, 14), int32] */;
  %678 = shape_of(%var_292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_292, dtype="int32") /* ty=Tensor[(2, 14, 14), int32] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %681 = minimum(%648, %649) /* ty=Tensor[(2, 14, 14), uint8] */;
  %682 = %665.0;
  %683 = %671.1;
  %684 = %676.1;
  %685 = add(%679, %680) /* ty=Tensor[(2, 14, 14), int32] */;
  (%681, %661, meta[relay.Constant][51] /* ty=Tensor[(840), float64] */, meta[relay.Constant][52] /* ty=Tensor[(320), float32] */, %666, %682, %683, %684, %685)
}

def @func_4125() -> Tensor[(7, 13, 2), uint64] {
  @func_4053() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_4739() -> Tensor[(7, 13, 2), uint64] {
  %686 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %686.0
}

def @func_5860() -> Tensor[(7, 13, 2), uint64] {
  %687 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %687.0
}

def @func_2281(%var_2266: float64, %var_2267: Tensor[(16, 1, 14), float64], %var_2274: Tensor[(780), float32], %var_2278: Tensor[(320), float32]) -> (Tensor[(16, 1, 14), float64], Tensor[(16, 1, 14), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) {
  %688 = cast(%var_2266, dtype="float64") /* ty=float64 */;
  %689 = cast(%var_2267, dtype="float64") /* ty=Tensor[(16, 1, 14), float64] */;
  %690 = cast(%var_2267, dtype="float64") /* ty=Tensor[(16, 1, 14), float64] */;
  %691 = cast(%var_2274, dtype="float32") /* ty=Tensor[(780), float32] */;
  %692 = cast(%var_2274, dtype="float32") /* ty=Tensor[(780), float32] */;
  %693 = reshape(%691, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %694 = reshape(%692, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %695 = cast(meta[relay.Constant][53] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %696 = cast(%var_2278, dtype="float32") /* ty=Tensor[(320), float32] */;
  %697 = reshape(%695, newshape=[16, 13, 14]) /* ty=Tensor[(16, 13, 14), float32] */;
  %698 = reshape(%696, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %699 = @func_1345(%697, %698) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */;
  %700 = floor_divide(%688, %689) /* ty=Tensor[(16, 1, 14), float64] */;
  %701 = rsqrt(%690) /* ty=Tensor[(16, 1, 14), float64] */;
  %702 = @func_911(%693, %694) /* ty=Tensor[(13, 6, 10), bool] */;
  %703 = %699.1;
  (%700, %701, %702, %var_2274, %703, meta[relay.Constant][53] /* ty=Tensor[(2912), float32] */, %var_2278)
}

def @func_7134() -> Tensor[(320), float32] {
  %704 = @func_2813() /* ty=(Tensor[(320), float32],) */;
  %704.0
}

def @func_2297(%var_2291: Tensor[(7, 14, 3), float32]) -> (Tensor[(7, 14, 3), float32],) {
  %705 = cast(%var_2291, dtype="float32") /* ty=Tensor[(7, 14, 3), float32] */;
  %706 = sinh(%705) /* ty=Tensor[(7, 14, 3), float32] */;
  (%706,)
}

def @func_6114(%var_6076: Tensor[(320), float32]) -> (Tensor[(392), uint8], Tensor[(320), uint64]) {
  %707 = @func_3991() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */;
  %708 = @func_5049() /* ty=Tensor[(320), float32] */;
  %709 = cast(%var_6076, dtype="int32") /* ty=Tensor[(320), int32] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(1), int32] */;
  %711 = cast(%708, dtype="int32") /* ty=Tensor[(320), int32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?), int32] */;
  %713 = bitwise_and(%711, %712) /* ty=Tensor[(320), int32] */;
  %714 = cast(%var_6076, dtype="uint64") /* ty=Tensor[(320), uint64] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(1), int32] */;
  %716 = cast(%713, dtype="uint64") /* ty=Tensor[(320), uint64] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %718 = %707.2;
  %719 = add(%716, %717) /* ty=Tensor[(320), uint64] */;
  (%718, %719)
}

def @func_3395(%var_3325: Tensor[(294), float32], %var_3361: Tensor[(840, 1), float64], %var_3362: Tensor[(10, 78), float32], %var_3369: Tensor[(1452), float32], %var_3370: Tensor[(320), float32], %var_3371: Tensor[(26), float64]) -> (Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 13, 2), float64], Tensor[(60, 14), float64], Tensor[(840, 1), float64], Tensor[(10, 78), float32], Tensor[(13, 2), float64], float32, Tensor[(1452), float32], Tensor[(320), float32], Tensor[(26), float64], Tensor[(12, 5, 13), uint64], Tensor[(60), uint64], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), int32]) {
  %720 = cast(%var_3325, dtype="float32") /* ty=Tensor[(294), float32] */;
  %721 = reshape(%720, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %722 = @func_2297(%721) /* ty=(Tensor[(7, 14, 3), float32],) */;
  %723 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
  %725 = cos(%724) /* ty=Tensor[(7, 13, 2), float32] */;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
  %727 = sinh(%726) /* ty=Tensor[(7, 13, 2), float32] */;
  %728 = cast(%725, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%727, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %732 = cast(%var_3361, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
  %733 = cast(%var_3362, dtype="float32") /* ty=Tensor[(10, 78), float32] */;
  %734 = reshape(%732, newshape=[60, 14]) /* ty=Tensor[(60, 14), float64] */;
  %735 = reshape(%733, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %736 = @func_3149(%734, %735) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(60, 14), float64], Tensor[(160, 2), float32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(780), float32], Tensor[(5, 8, 8), float64], Tensor[(1, 26), float64]) */;
  %737 = cast(-0.527944f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %738 = cast(%var_3369, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %739 = cast(%var_3361, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
  %740 = cast(%var_3370, dtype="float32") /* ty=Tensor[(320), float32] */;
  %741 = cast(%var_3371, dtype="float64") /* ty=Tensor[(26), float64] */;
  %742 = reshape(%737, newshape=[]) /* ty=float32 */;
  %743 = reshape(%738, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float32] */;
  %744 = reshape(%739, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %745 = reshape(%740, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %746 = reshape(%741, newshape=[13, 2]) /* ty=Tensor[(13, 2), float64] */;
  %747 = @func_782(%742, %743, %744, %745, %746) /* ty=(Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) */;
  %748 = cast(meta[relay.Constant][54] /* ty=Tensor[(60), uint64] */, dtype="uint64") /* ty=Tensor[(60), uint64] */;
  %749 = cast(%var_3362, dtype="uint64") /* ty=Tensor[(10, 78), uint64] */;
  %750 = reshape(%748, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), uint64] */;
  %751 = reshape(%749, newshape=[12, 5, 13]) /* ty=Tensor[(12, 5, 13), uint64] */;
  %752 = @func_2137(%750, %751) /* ty=(Tensor[(12, 5, 13), uint64],) */;
  %753 = cast(%725, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %754 = sin(%753) /* ty=Tensor[(7, 13, 2), float64] */;
  %755 = cast(%754, dtype="int32") /* ty=Tensor[(7, 13, 2), int32] */;
  %756 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%727, dtype="int32") /* ty=Tensor[(7, 13, 2), int32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %759 = %722.0;
  %760 = divide(%730, %731) /* ty=Tensor[(7, 13, 2), float64] */;
  %761 = %736.1;
  %762 = %747.4;
  %763 = %752.0;
  %764 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %765 = left_shift(%757, %758) /* ty=Tensor[(7, 13, 2), int32] */;
  (%759, %var_3325, %760, %761, %var_3361, %var_3362, %762, -0.527944f /* ty=float32 */, %var_3369, %var_3370, %var_3371, %763, meta[relay.Constant][54] /* ty=Tensor[(60), uint64] */, %764, %765)
}

def @func_5104(%var_5088: Tensor[(320), float32]) -> Tensor[(320), bool] {
  %766 = @func_5049() /* ty=Tensor[(320), float32] */;
  %767 = cast(%var_5088, dtype="bool") /* ty=Tensor[(320), bool] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(1), int32] */;
  %769 = cast(%766, dtype="bool") /* ty=Tensor[(320), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?), bool] */;
  less_equal(%769, %770) /* ty=Tensor[(320), bool] */
}

def @func_269(%var_250: Tensor[(7, 8, 15), float64], %var_260: Tensor[(320), float32]) -> (Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) {
  %771 = cast(%var_250, dtype="float64") /* ty=Tensor[(7, 8, 15), float64] */;
  %772 = cast(%var_260, dtype="float32") /* ty=Tensor[(320), float32] */;
  %773 = cast(%var_260, dtype="float32") /* ty=Tensor[(320), float32] */;
  %774 = reshape(%772, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %775 = reshape(%773, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %776 = @func_91(%774, %775) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) */;
  %777 = log2(%771) /* ty=Tensor[(7, 8, 15), float64] */;
  %778 = %776.1;
  (%777, %778, %var_260)
}

def @func_1306(%var_1267: Tensor[(11, 11, 13), uint32], %var_1268: Tensor[(11, 11, 13), uint32], %var_1288: Tensor[(26), float64]) -> (Tensor[(11, 11, 13), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(13, 6, 10), bool], Tensor[(13, 2, 1), float64], Tensor[(26), float64], Tensor[(840), float64]) {
  %779 = cast(%var_1268, dtype="uint32") /* ty=Tensor[(11, 11, 13), uint32] */;
  %780 = shape_of(%var_1267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%var_1267, dtype="uint32") /* ty=Tensor[(11, 11, 13), uint32] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %783 = maximum(%781, %782) /* ty=Tensor[(11, 11, 13), uint32] */;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %785 = cast(meta[relay.Constant][55] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %786 = cast(meta[relay.Constant][55] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %787 = reshape(%785, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %788 = reshape(%786, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %789 = cast(meta[relay.Constant][55] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %790 = @func_911(%787, %788) /* ty=Tensor[(13, 6, 10), bool] */;
  %791 = cast(%790, dtype="float32") /* ty=Tensor[(13, 6, 10), float32] */;
  %792 = reshape(%789, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %793 = reshape(%791, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %794 = cast(%var_1288, dtype="float64") /* ty=Tensor[(26), float64] */;
  %795 = reshape(%794, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %796 = @func_690(%795) /* ty=(Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) */;
  %797 = cast(%var_1288, dtype="float64") /* ty=Tensor[(26), float64] */;
  %798 = reshape(%797, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %799 = @func_690(%798) /* ty=(Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) */;
  %800 = cosh(%784) /* ty=Tensor[(11, 11, 13), float64] */;
  %801 = @func_911(%792, %793) /* ty=Tensor[(13, 6, 10), bool] */;
  %802 = %796.0;
  %803 = %799.1;
  (%800, %790, meta[relay.Constant][55] /* ty=Tensor[(780), float32] */, %801, %802, %var_1288, %803)
}

def @func_3423() -> Tensor[(7, 13, 2), uint64] {
  %804 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %804.0
}

def @func_1345(%var_1328: Tensor[(16, 13, 14), float32], %var_1336: Tensor[(320), float32]) -> (Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) {
  %805 = cast(%var_1336, dtype="float32") /* ty=Tensor[(320), float32] */;
  %806 = cast(%var_1336, dtype="float32") /* ty=Tensor[(320), float32] */;
  %807 = reshape(%805, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %808 = reshape(%806, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %809 = @func_91(%807, %808) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) */;
  %810 = cast(%var_1328, dtype="float32") /* ty=Tensor[(16, 13, 14), float32] */;
  %811 = log10(%810) /* ty=Tensor[(16, 13, 14), float32] */;
  %812 = cast(%811, dtype="float64") /* ty=Tensor[(16, 13, 14), float64] */;
  %813 = sin(%812) /* ty=Tensor[(16, 13, 14), float64] */;
  %814 = cast(%811, dtype="uint32") /* ty=Tensor[(16, 13, 14), uint32] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%813, dtype="uint32") /* ty=Tensor[(16, 13, 14), uint32] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %818 = %809.0;
  %819 = logical_xor(%816, %817) /* ty=Tensor[(16, 13, 14), uint32] */;
  (%818, %var_1336, %819)
}

def @func_4684(%var_4673: Tensor[(13, 4, 5), float64], %var_4681: Tensor[(2912), float32], %var_4682: Tensor[(320), float32]) -> (Tensor[(13, 4, 5), float64], Tensor[(16, 13, 14), uint32], Tensor[(2912), float32], Tensor[(320), float32]) {
  %820 = cast(%var_4673, dtype="float64") /* ty=Tensor[(13, 4, 5), float64] */;
  %821 = cast(%var_4681, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %822 = cast(%var_4682, dtype="float32") /* ty=Tensor[(320), float32] */;
  %823 = reshape(%821, newshape=[16, 13, 14]) /* ty=Tensor[(16, 13, 14), float32] */;
  %824 = reshape(%822, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %825 = @func_1345(%823, %824) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */;
  %826 = asinh(%820) /* ty=Tensor[(13, 4, 5), float64] */;
  %827 = %825.2;
  (%826, %827, %var_4681, %var_4682)
}

def @func_4043(%var_4036: Tensor[(10, 4, 5), float32]) -> (Tensor[(10, 4, 5), bool],) {
  %828 = cast(-1.43946f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %829 = cast(%var_4036, dtype="bool") /* ty=Tensor[(10, 4, 5), bool] */;
  %830 = less(%828, %829) /* ty=Tensor[(10, 4, 5), bool] */;
  (%830,)
}

def @func_4559() -> (Tensor[(7, 13, 2), float64],) {
  %831 = @func_2862() /* ty=(Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780, 1), float32], Tensor[(7, 13, 2), uint64]) */;
  %832 = %831.4;
  %833 = cast(%832, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %834 = log10(%833) /* ty=Tensor[(7, 13, 2), float64] */;
  (%834,)
}

def @func_5502() -> (Tensor[(7, 13, 2), uint64], Tensor[(5, 13, 11), int64], Tensor[(65), uint64], Tensor[(1, 715), uint64]) {
  %835 = @func_3991() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */;
  %836 = cast(meta[relay.Constant][56] /* ty=Tensor[(65), uint64] */, dtype="uint64") /* ty=Tensor[(65), uint64] */;
  %837 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 715), uint64] */, dtype="uint64") /* ty=Tensor[(1, 715), uint64] */;
  %838 = reshape(%836, newshape=[5, 13, 1]) /* ty=Tensor[(5, 13, 1), uint64] */;
  %839 = reshape(%837, newshape=[5, 13, 11]) /* ty=Tensor[(5, 13, 11), uint64] */;
  %840 = @func_3603(%838, %839) /* ty=(Tensor[(5, 13, 11), int64],) */;
  %841 = %835.0;
  %842 = %840.0;
  (%841, %842, meta[relay.Constant][56] /* ty=Tensor[(65), uint64] */, meta[relay.Constant][57] /* ty=Tensor[(1, 715), uint64] */)
}

def @func_5669() -> (Tensor[(7, 13, 2), uint64],) {
  %843 = @func_5388() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%843,)
}

def @func_91(%var_35: Tensor[(5, 8, 8), float32], %var_36: Tensor[(5, 8, 8), float32]) -> (Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) {
  %844 = cast(%var_36, dtype="bool") /* ty=Tensor[(5, 8, 8), bool] */;
  %845 = shape_of(%var_35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%var_35, dtype="bool") /* ty=Tensor[(5, 8, 8), bool] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %848 = greater(%846, %847) /* ty=Tensor[(5, 8, 8), bool] */;
  %849 = cast(%var_35, dtype="uint64") /* ty=Tensor[(5, 8, 8), uint64] */;
  %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%848, dtype="uint64") /* ty=Tensor[(5, 8, 8), uint64] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %853 = cast(%var_35, dtype="float32") /* ty=Tensor[(5, 8, 8), float32] */;
  %854 = exp(%853) /* ty=Tensor[(5, 8, 8), float32] */;
  %855 = cast(%854, dtype="float64") /* ty=Tensor[(5, 8, 8), float64] */;
  %856 = cast(%var_36, dtype="float32") /* ty=Tensor[(5, 8, 8), float32] */;
  %857 = maximum(%851, %852) /* ty=Tensor[(5, 8, 8), uint64] */;
  %858 = asin(%855) /* ty=Tensor[(5, 8, 8), float64] */;
  %859 = sin(%856) /* ty=Tensor[(5, 8, 8), float32] */;
  (%857, %858, %859)
}

def @func_7644() -> Tensor[(7, 13, 2), uint64] {
  %860 = @func_5799() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint8]) */;
  %860.0
}

def @func_3991() -> (Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) {
  %861 = @func_2862() /* ty=(Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780, 1), float32], Tensor[(7, 13, 2), uint64]) */;
  %862 = %861.2;
  %863 = cast(meta[relay.Constant][58] /* ty=Tensor[(13, 6, 10), bool] */, dtype="uint8") /* ty=Tensor[(13, 6, 10), uint8] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="uint8") /* ty=Tensor[(13, 6, 10), uint8] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %867 = cast(meta[relay.Constant][59] /* ty=Tensor[(26, 1), float64] */, dtype="float64") /* ty=Tensor[(26, 1), float64] */;
  %868 = reshape(%867, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %869 = @func_690(%868) /* ty=(Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) */;
  %870 = @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */;
  %871 = bitwise_xor(%865, %866) /* ty=Tensor[(13, 6, 10), uint8] */;
  %872 = %869.2;
  (%870, %871, %872, meta[relay.Constant][59] /* ty=Tensor[(26, 1), float64] */)
}

def @func_2461() -> Tensor[(7, 13, 2), uint64] {
  %873 = cast(meta[relay.Constant][61] /* ty=Tensor[(7, 13, 2), uint64] */, dtype="uint64") /* ty=Tensor[(7, 13, 2), uint64] */;
  %874 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(7, 13, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(meta[relay.Constant][60] /* ty=Tensor[(7, 13, 2), uint64] */, dtype="uint64") /* ty=Tensor[(7, 13, 2), uint64] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%875, %876) /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_6622(%var_6584: Tensor[(12, 9, 3), uint64], %var_6585: Tensor[(12, 9, 3), uint64], %var_6610: Tensor[(12, 9, 3), uint64]) -> (Tensor[(12, 9, 3), uint64], Tensor[(7, 13, 2), uint64], Tensor[(12, 9, 3), int8]) {
  %877 = cast(%var_6585, dtype="uint64") /* ty=Tensor[(12, 9, 3), uint64] */;
  %878 = shape_of(%var_6584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%var_6584, dtype="uint64") /* ty=Tensor[(12, 9, 3), uint64] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %881 = cast(%var_6610, dtype="int8") /* ty=Tensor[(12, 9, 3), int8] */;
  %882 = shape_of(%var_6585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%var_6585, dtype="int8") /* ty=Tensor[(12, 9, 3), int8] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %885 = left_shift(%879, %880) /* ty=Tensor[(12, 9, 3), uint64] */;
  %886 = @func_4739() /* ty=Tensor[(7, 13, 2), uint64] */;
  %887 = right_shift(%883, %884) /* ty=Tensor[(12, 9, 3), int8] */;
  (%885, %886, %887)
}

def @func_6389() -> (Tensor[(320), float64],) {
  %888 = @func_4671() /* ty=Tensor[(320), float64] */;
  (%888,)
}

def @func_4944() -> (Tensor[(320), float32],) {
  %889 = @func_4332() /* ty=Tensor[(320), float32] */;
  (%889,)
}

def @func_3022(%var_2979: Tensor[(3, 5, 15), int64], %var_2980: Tensor[(3, 5, 15), int64], %var_2990: Tensor[(140), float32]) -> (Tensor[(3, 5, 15), int64], Tensor[(320), float32], Tensor[(140), int64]) {
  %890 = cast(%var_2980, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
  %891 = shape_of(%var_2979, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(%var_2979, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %894 = cast(%var_2990, dtype="float32") /* ty=Tensor[(140), float32] */;
  %895 = reshape(%894, newshape=[1, 14, 10]) /* ty=Tensor[(1, 14, 10), float32] */;
  %896 = @func_1489(%895) /* ty=(Tensor[(1, 14, 10), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) */;
  %897 = cast(meta[relay.Constant][62] /* ty=Tensor[(140), float32] */, dtype="int64") /* ty=Tensor[(140), int64] */;
  %898 = shape_of(%var_2990, dtype="int32") /* ty=Tensor[(1), int32] */;
  %899 = cast(%var_2990, dtype="int64") /* ty=Tensor[(140), int64] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?), int64] */;
  %901 = bitwise_and(%892, %893) /* ty=Tensor[(3, 5, 15), int64] */;
  %902 = %896.1;
  %903 = minimum(%899, %900) /* ty=Tensor[(140), int64] */;
  (%901, %902, %903)
}

def @func_3603(%var_3578: Tensor[(5, 13, 1), uint64], %var_3579: Tensor[(5, 13, 11), uint64]) -> (Tensor[(5, 13, 11), int64],) {
  %904 = cast(%var_3578, dtype="uint64") /* ty=Tensor[(5, 13, 1), uint64] */;
  %905 = cast(%var_3579, dtype="uint64") /* ty=Tensor[(5, 13, 11), uint64] */;
  %906 = bitwise_or(%904, %905) /* ty=Tensor[(5, 13, 11), uint64] */;
  %907 = cast(%906, dtype="int64") /* ty=Tensor[(5, 13, 11), int64] */;
  %908 = shape_of(%var_3579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %909 = cast(%var_3579, dtype="int64") /* ty=Tensor[(5, 13, 11), int64] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %911 = right_shift(%909, %910) /* ty=Tensor[(5, 13, 11), int64] */;
  (%911,)
}

def @main() -> (Tensor[(320), float32],) {
  %912 = @func_5462() /* ty=(Tensor[(320), float32], Tensor[(320), float64], Tensor[(320), bool]) */;
  %913 = %912.2;
  %914 = cast(%913, dtype="float32") /* ty=Tensor[(320), float32] */;
  %915 = acosh(%914) /* ty=Tensor[(320), float32] */;
  (%915,)
}

def @func_5049() -> Tensor[(320), float32] {
  @func_4332() /* ty=Tensor[(320), float32] */
}

def @func_5252(%var_5229: Tensor[(20), float64]) -> (Tensor[(320), float32], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(196, 2), uint8], Tensor[(1452), float32], Tensor[(35, 4), float32]) {
  %916 = cast(%var_5229, dtype="float64") /* ty=Tensor[(20), float64] */;
  %917 = cast(meta[relay.Constant][63] /* ty=Tensor[(35, 4), float32] */, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %918 = cast(meta[relay.Constant][64] /* ty=Tensor[(196, 2), uint8] */, dtype="uint8") /* ty=Tensor[(196, 2), uint8] */;
  %919 = cast(meta[relay.Constant][65] /* ty=Tensor[(1452), float32] */, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %920 = reshape(%916, newshape=[2, 1, 10]) /* ty=Tensor[(2, 1, 10), float64] */;
  %921 = reshape(%917, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %922 = reshape(%918, newshape=[392]) /* ty=Tensor[(392), uint8] */;
  %923 = reshape(%919, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %924 = @func_4479(%920, %921, %922, %923) /* ty=(Tensor[(320), float32], Tensor[(140), float32], Tensor[(5, 8, 8), uint64], Tensor[(2912), float32], Tensor[(2, 14, 14), uint8], Tensor[(392), uint8], Tensor[(780), float32], Tensor[(11), float32], Tensor[(2, 1, 10), float32], float64, Tensor[(52), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(1, 26), float64], Tensor[(2, ?, 10), bool], Tensor[(1452), float32], Tensor[(7, 13, 2), uint64]) */;
  %925 = cast(meta[relay.Constant][63] /* ty=Tensor[(35, 4), float32] */, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %926 = @func_5049() /* ty=Tensor[(320), float32] */;
  %927 = %924.3;
  %928 = log2(%925) /* ty=Tensor[(35, 4), float32] */;
  (%926, %927, %var_5229, meta[relay.Constant][64] /* ty=Tensor[(196, 2), uint8] */, meta[relay.Constant][65] /* ty=Tensor[(1452), float32] */, %928)
}

def @func_6564(%var_6557: Tensor[(6, 140), float64]) -> (Tensor[(392), uint8], Tensor[(320), float32], float32, Tensor[(1452), float32], Tensor[(6, 140), float64], Tensor[(320), float32], Tensor[(26), float64]) {
  %929 = @func_3991() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */;
  %930 = cast(-2.61869f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %931 = cast(meta[relay.Constant][66] /* ty=Tensor[(1452), float32] */, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %932 = cast(%var_6557, dtype="float64") /* ty=Tensor[(6, 140), float64] */;
  %933 = cast(meta[relay.Constant][67] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %934 = cast(meta[relay.Constant][68] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %935 = reshape(%930, newshape=[]) /* ty=float32 */;
  %936 = reshape(%931, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float32] */;
  %937 = reshape(%932, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %938 = reshape(%933, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %939 = reshape(%934, newshape=[13, 2]) /* ty=Tensor[(13, 2), float64] */;
  %940 = @func_782(%935, %936, %937, %938, %939) /* ty=(Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) */;
  %941 = %929.2;
  %942 = %940.3;
  (%941, %942, -2.61869f /* ty=float32 */, meta[relay.Constant][66] /* ty=Tensor[(1452), float32] */, %var_6557, meta[relay.Constant][67] /* ty=Tensor[(320), float32] */, meta[relay.Constant][68] /* ty=Tensor[(26), float64] */)
}

def @func_7613() -> (Tensor[(7, 13, 2), uint64],) {
  %943 = @func_6541() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %944 = %943.0;
  (%944,)
}

def @func_2714() -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) {
  %945 = cast(meta[relay.Constant][69] /* ty=Tensor[(1452), float32] */, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %946 = cast(meta[relay.Constant][70] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %947 = cast(meta[relay.Constant][71] /* ty=Tensor[(1, 26), float64] */, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
  %948 = reshape(%945, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %949 = reshape(%946, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %950 = reshape(%947, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %951 = @func_2501(%948, %949, %950) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(840, 1), float64], Tensor[(320), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float64]) */;
  %952 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %953 = %951.6;
  (%952, %953, meta[relay.Constant][69] /* ty=Tensor[(1452), float32] */, meta[relay.Constant][70] /* ty=Tensor[(320), float32] */, meta[relay.Constant][71] /* ty=Tensor[(1, 26), float64] */)
}

def @func_6541() -> (Tensor[(7, 13, 2), uint64],) {
  %954 = @func_4739() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%954,)
}

def @func_5799() -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint8]) {
  %955 = @func_3991() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */;
  %956 = %955.0;
  %957 = @func_4125() /* ty=Tensor[(7, 13, 2), uint64] */;
  %958 = cast(%957, dtype="uint8") /* ty=Tensor[(7, 13, 2), uint8] */;
  %959 = shape_of(%956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %960 = cast(%956, dtype="uint8") /* ty=Tensor[(7, 13, 2), uint8] */;
  %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %962 = @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */;
  %963 = right_shift(%960, %961) /* ty=Tensor[(7, 13, 2), uint8] */;
  (%962, %963)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5136() -> Tensor[(12, 5, 1), float64] {
  @func_5134() /* ty=Tensor[(12, 5, 1), float64] */
}

def @func_5319(%var_5318: Tensor[(11, 8, 14), int16]) -> (Tensor[(11, 8, 14), int16],) {
  %5 = fn (%var_5312: Tensor[(11, 8, 14), int16]) -> (Tensor[(11, 8, 14), int16],) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 8, 14), int16] */, dtype="int16") /* ty=Tensor[(11, 8, 14), int16] */;
    %1 = shape_of(%var_5312, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_5312, dtype="int16") /* ty=Tensor[(11, 8, 14), int16] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %4 = bitwise_xor(%2, %3) /* ty=Tensor[(11, 8, 14), int16] */;
    (%4,)
  };
  %5(%var_5318) /* ty=(Tensor[(11, 8, 14), int16],) */
}

def @func_782(%var_743: float32, %var_744: Tensor[(12, 11, 11), float32], %var_750: Tensor[(840), float64], %var_751: Tensor[(320), float32], %var_756: Tensor[(13, 2), float64]) -> (Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) {
  %6 = cast(%var_743, dtype="float32") /* ty=float32 */;
  %7 = cast(%var_744, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %8 = cast(%var_750, dtype="float64") /* ty=Tensor[(840), float64] */;
  %9 = cast(%var_751, dtype="float32") /* ty=Tensor[(320), float32] */;
  %10 = reshape(%8, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %11 = reshape(%9, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %12 = @func_269(%10, %11) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %13 = cast(%var_756, dtype="float64") /* ty=Tensor[(13, 2), float64] */;
  %14 = reshape(%13, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %15 = @func_690(%14) /* ty=(Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) */;
  %16 = %15.2;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(392), float64] */;
  %18 = sqrt(%17) /* ty=Tensor[(392), float64] */;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(392), float64] */;
  %20 = divide(%6, %7) /* ty=Tensor[(12, 11, 11), float32] */;
  %21 = %12.2;
  %22 = atan(%19) /* ty=Tensor[(392), float64] */;
  (%20, %21, %var_750, %var_751, %var_756, %22)
}

def @func_7403() -> Tensor[(7, 13, 2), uint64] {
  @func_7401() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_1489(%var_1459: Tensor[(1, 14, 10), float32]) -> (Tensor[(1, 14, 10), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) {
  %23 = cast(%var_1459, dtype="float32") /* ty=Tensor[(1, 14, 10), float32] */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %26 = reshape(%24, newshape=[16, 13, 14]) /* ty=Tensor[(16, 13, 14), float32] */;
  %27 = reshape(%25, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %28 = @func_1345(%26, %27) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */;
  %29 = exp(%23) /* ty=Tensor[(1, 14, 10), float32] */;
  %30 = %28.1;
  (%29, %30, meta[relay.Constant][1] /* ty=Tensor[(2912), float32] */, meta[relay.Constant][2] /* ty=Tensor[(320), float32] */)
}

def @func_5527() -> Tensor[(7, 13, 2), uint64] {
  @func_5525() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_2297(%var_2291: Tensor[(7, 14, 3), float32]) -> (Tensor[(7, 14, 3), float32],) {
  %31 = cast(%var_2291, dtype="float32") /* ty=Tensor[(7, 14, 3), float32] */;
  %32 = sinh(%31) /* ty=Tensor[(7, 14, 3), float32] */;
  (%32,)
}

def @func_6995(%var_6994: Tensor[(16, 14, 12), uint32]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
  %45 = fn (%var_6959: Tensor[(16, 14, 12), uint32]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) {
    %33 = cast(%var_6959, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
    %34 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(16, 14, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 14, 12), uint32] */, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %37 = greater(%35, %36) /* ty=Tensor[(16, 14, 12), bool] */;
    %38 = cast(%37, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
    %39 = cast(%var_6959, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
    %40 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(16, 14, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 14, 12), uint32] */, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
    %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %43 = erf(%38) /* ty=Tensor[(16, 14, 12), float64] */;
    %44 = greater_equal(%41, %42) /* ty=Tensor[(16, 14, 12), bool] */;
    (%43, %44)
  };
  %45(%var_6994) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), bool]) */
}

def @func_377(%var_375: Tensor[(2, 14, 14), uint8], %var_376: Tensor[(2, 14, 14), uint8]) -> (Tensor[(2, 14, 14), uint8], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float64], Tensor[(2, 14, 14), int32]) {
  @func_373(%var_375, %var_376) /* ty=(Tensor[(2, 14, 14), uint8], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float64], Tensor[(2, 14, 14), int32]) */
}

def @func_4789() -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float64]) {
  %46 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %47 = %46.0;
  %48 = @func_4671() /* ty=Tensor[(320), float64] */;
  (%47, %48)
}

def @func_5749() -> (Tensor[(7, 13, 2), uint64], Tensor[(1, 225), int64], Tensor[(225), int64]) {
  %54 = fn () -> (Tensor[(7, 13, 2), uint64], Tensor[(1, 225), int64], Tensor[(225), int64]) {
    %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(225), int64] */, dtype="int64") /* ty=Tensor[(225), int64] */;
    %50 = reshape(%49, newshape=[1, 225]) /* ty=Tensor[(1, 225), int64] */;
    %51 = @func_3756(%50) /* ty=(Tensor[(320), float64], Tensor[(7, 13, 2), float32], Tensor[(140), int64], Tensor[(1, 225), int64], Tensor[(140), float32]) */;
    %52 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    %53 = %51.3;
    (%52, %53, meta[relay.Constant][4] /* ty=Tensor[(225), int64] */)
  };
  %54() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1, 225), int64], Tensor[(225), int64]) */
}

def @func_2140(%var_2138: Tensor[(12, 5, 1), uint64], %var_2139: Tensor[(12, 5, 13), uint64]) -> (Tensor[(12, 5, 13), uint64],) {
  %58 = fn (%var_2132: Tensor[(12, 5, 1), uint64], %var_2133: Tensor[(12, 5, 13), uint64]) -> (Tensor[(12, 5, 13), uint64],) {
    %55 = cast(%var_2132, dtype="uint64") /* ty=Tensor[(12, 5, 1), uint64] */;
    %56 = cast(%var_2133, dtype="uint64") /* ty=Tensor[(12, 5, 13), uint64] */;
    %57 = multiply(%55, %56) /* ty=Tensor[(12, 5, 13), uint64] */;
    (%57,)
  };
  %58(%var_2138, %var_2139) /* ty=(Tensor[(12, 5, 13), uint64],) */
}

def @func_5106(%var_5105: Tensor[(320), float32]) -> Tensor[(320), bool] {
  %64 = fn (%var_5088: Tensor[(320), float32]) -> Tensor[(320), bool] {
    %59 = @func_5049() /* ty=Tensor[(320), float32] */;
    %60 = cast(%var_5088, dtype="bool") /* ty=Tensor[(320), bool] */;
    %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(1), int32] */;
    %62 = cast(%59, dtype="bool") /* ty=Tensor[(320), bool] */;
    %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?), bool] */;
    less_equal(%62, %63) /* ty=Tensor[(320), bool] */
  };
  %64(%var_5105) /* ty=Tensor[(320), bool] */
}

def @func_6718() -> (Tensor[(7, 13, 2), float64], Tensor[(7, 13, 2), float64]) {
  @func_6716() /* ty=(Tensor[(7, 13, 2), float64], Tensor[(7, 13, 2), float64]) */
}

def @func_2463() -> Tensor[(7, 13, 2), uint64] {
  @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_2715() -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) {
  %74 = fn () -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) {
    %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(1452), float32] */, dtype="float32") /* ty=Tensor[(1452), float32] */;
    %66 = cast(meta[relay.Constant][6] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %67 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 26), float64] */, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
    %68 = reshape(%65, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
    %69 = reshape(%66, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %70 = reshape(%67, newshape=[26]) /* ty=Tensor[(26), float64] */;
    %71 = @func_2501(%68, %69, %70) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(840, 1), float64], Tensor[(320), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float64]) */;
    %72 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    %73 = %71.6;
    (%72, %73, meta[relay.Constant][5] /* ty=Tensor[(1452), float32] */, meta[relay.Constant][6] /* ty=Tensor[(320), float32] */, meta[relay.Constant][7] /* ty=Tensor[(1, 26), float64] */)
  };
  %74() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */
}

def @func_3870(%var_3853: Tensor[(294), float32], %var_3862: Tensor[(2912), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 14, 3), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) {
  %75 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %76 = cast(%var_3853, dtype="float32") /* ty=Tensor[(294), float32] */;
  %77 = reshape(%76, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %78 = @func_2297(%77) /* ty=(Tensor[(7, 14, 3), float32],) */;
  %79 = %78.0;
  %80 = cast(%79, dtype="float32") /* ty=Tensor[(7, 14, 3), float32] */;
  %81 = reshape(%80, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %82 = @func_2297(%81) /* ty=(Tensor[(7, 14, 3), float32],) */;
  %83 = cast(%var_3862, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %84 = cast(meta[relay.Constant][8] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %85 = reshape(%83, newshape=[16, 13, 14]) /* ty=Tensor[(16, 13, 14), float32] */;
  %86 = reshape(%84, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %87 = @func_1345(%85, %86) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */;
  %88 = %75.0;
  %89 = %82.0;
  %90 = %87.1;
  (%88, %79, %var_3853, %89, %90, %var_3862, meta[relay.Constant][8] /* ty=Tensor[(320), float32] */)
}

def @func_4211(%var_4208: Tensor[(840), float64], %var_4209: Tensor[(1452), float32], %var_4210: Tensor[(26), float64]) -> (Tensor[(320), float64], Tensor[(12, 5, 13), uint64], Tensor[(294), float32], Tensor[(840), float64], Tensor[(780), float32], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32]) {
  @func_4206(%var_4208, %var_4209, %var_4210) /* ty=(Tensor[(320), float64], Tensor[(12, 5, 13), uint64], Tensor[(294), float32], Tensor[(840), float64], Tensor[(780), float32], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32]) */
}

def @func_273(%var_271: Tensor[(7, 8, 15), float64], %var_272: Tensor[(320), float32]) -> (Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) {
  @func_269(%var_271, %var_272) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */
}

def @func_6117(%var_6115: Tensor[(320), float32]) -> (Tensor[(392), uint8], Tensor[(320), uint64]) {
  @func_6114(%var_6115) /* ty=(Tensor[(392), uint8], Tensor[(320), uint64]) */
}

def @func_6517() -> (Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8]) {
  %91 = @func_3991() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */;
  %92 = @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */;
  %93 = %91.1;
  (%92, %93)
}

def @func_1345(%var_1328: Tensor[(16, 13, 14), float32], %var_1336: Tensor[(320), float32]) -> (Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) {
  %94 = cast(%var_1336, dtype="float32") /* ty=Tensor[(320), float32] */;
  %95 = cast(%var_1336, dtype="float32") /* ty=Tensor[(320), float32] */;
  %96 = reshape(%94, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %97 = reshape(%95, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %98 = @func_91(%96, %97) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) */;
  %99 = cast(%var_1328, dtype="float32") /* ty=Tensor[(16, 13, 14), float32] */;
  %100 = log10(%99) /* ty=Tensor[(16, 13, 14), float32] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(16, 13, 14), float64] */;
  %102 = sin(%101) /* ty=Tensor[(16, 13, 14), float64] */;
  %103 = cast(%100, dtype="uint32") /* ty=Tensor[(16, 13, 14), uint32] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="uint32") /* ty=Tensor[(16, 13, 14), uint32] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %107 = %98.0;
  %108 = logical_xor(%105, %106) /* ty=Tensor[(16, 13, 14), uint32] */;
  (%107, %var_1336, %108)
}

def @func_5476(%var_5472: Tensor[(3, 11, 1), float32]) -> Tensor[(3, 11, 1), float32] {
  %109 = cast(%var_5472, dtype="float32") /* ty=Tensor[(3, 11, 1), float32] */;
  sinh(%109) /* ty=Tensor[(3, 11, 1), float32] */
}

def @func_1311(%var_1308: Tensor[(11, 11, 13), uint32], %var_1309: Tensor[(11, 11, 13), uint32], %var_1310: Tensor[(26), float64]) -> (Tensor[(11, 11, 13), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(13, 6, 10), bool], Tensor[(13, 2, 1), float64], Tensor[(26), float64], Tensor[(840), float64]) {
  @func_1306(%var_1308, %var_1309, %var_1310) /* ty=(Tensor[(11, 11, 13), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(13, 6, 10), bool], Tensor[(13, 2, 1), float64], Tensor[(26), float64], Tensor[(840), float64]) */
}

def @func_690(%var_682: Tensor[(13, 2, 1), float64]) -> (Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) {
  %110 = cast(%var_682, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
  %111 = cast(meta[relay.Constant][9] /* ty=Tensor[(392), uint8] */, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %112 = reshape(%111, newshape=[392]) /* ty=Tensor[(392), uint8] */;
  %113 = @func_492(%112) /* ty=(Tensor[(16, 10, 15), float64], Tensor[(16, 10, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(392), uint8], Tensor[(840), float64]) */;
  %114 = sigmoid(%110) /* ty=Tensor[(13, 2, 1), float64] */;
  %115 = %113.4;
  (%114, %115, meta[relay.Constant][9] /* ty=Tensor[(392), uint8] */)
}

def @func_914(%var_912: Tensor[(13, 6, 10), float32], %var_913: Tensor[(13, 6, 10), float32]) -> Tensor[(13, 6, 10), bool] {
  %120 = fn (%var_903: Tensor[(13, 6, 10), float32], %var_904: Tensor[(13, 6, 10), float32]) -> Tensor[(13, 6, 10), bool] {
    %116 = cast(%var_904, dtype="bool") /* ty=Tensor[(13, 6, 10), bool] */;
    %117 = shape_of(%var_903, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%var_903, dtype="bool") /* ty=Tensor[(13, 6, 10), bool] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%118, %119) /* ty=Tensor[(13, 6, 10), bool] */
  };
  %120(%var_912, %var_913) /* ty=Tensor[(13, 6, 10), bool] */
}

def @func_5701(%var_5687: Tensor[(1452), float32], %var_5689: Tensor[(320), float32], %var_5690: Tensor[(13, 2), float64]) -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(1452), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64]) {
  %121 = cast(-2.488f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %122 = cast(%var_5687, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %123 = cast(meta[relay.Constant][10] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %124 = cast(%var_5689, dtype="float32") /* ty=Tensor[(320), float32] */;
  %125 = cast(%var_5690, dtype="float64") /* ty=Tensor[(13, 2), float64] */;
  %126 = reshape(%121, newshape=[]) /* ty=float32 */;
  %127 = reshape(%122, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float32] */;
  %128 = reshape(%123, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %129 = reshape(%124, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %130 = reshape(%125, newshape=[13, 2]) /* ty=Tensor[(13, 2), float64] */;
  %131 = @func_782(%126, %127, %128, %129, %130) /* ty=(Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) */;
  %132 = @func_5537() /* ty=Tensor[(7, 13, 2), uint64] */;
  %133 = %131.1;
  (%132, %133, -2.488f /* ty=float32 */, %var_5687, meta[relay.Constant][10] /* ty=Tensor[(840), float64] */, %var_5689, %var_5690)
}

def @func_4372() -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) {
  %138 = fn () -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) {
    %134 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
    %135 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %136 = %134.0;
    %137 = %135.1;
    (%136, %137)
  };
  %138() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) */
}

def @func_6907() -> Tensor[(1, 26), float64] {
  @func_6905() /* ty=Tensor[(1, 26), float64] */
}

def @func_7267(%var_7227: Tensor[(12, 26), float64], %var_7236: Tensor[(20), float64]) -> (Tensor[(12, 26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1573), uint32], Tensor[(20), float64], Tensor[(?, 26), int32]) {
  %139 = @func_6905() /* ty=Tensor[(1, 26), float64] */;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
  %141 = asin(%140) /* ty=Tensor[(1, 26), float64] */;
  %142 = cast(%141, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
  %143 = cast(%var_7227, dtype="float64") /* ty=Tensor[(12, 26), float64] */;
  %144 = cast(meta[relay.Constant][11] /* ty=Tensor[(1573), uint32] */, dtype="uint32") /* ty=Tensor[(1573), uint32] */;
  %145 = cast(%var_7236, dtype="float64") /* ty=Tensor[(20), float64] */;
  %146 = reshape(%144, newshape=[1573]) /* ty=Tensor[(1573), uint32] */;
  %147 = reshape(%145, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %148 = @func_6299(%146, %147) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1573), uint32], Tensor[(26), float64], Tensor[(20), float64], Tensor[(13, 2, 320), uint32]) */;
  %149 = cast(%139, dtype="float32") /* ty=Tensor[(1, 26), float32] */;
  %150 = tan(%149) /* ty=Tensor[(1, 26), float32] */;
  %151 = cast(%141, dtype="int32") /* ty=Tensor[(1, 26), int32] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(2), int32] */;
  %153 = cast(%150, dtype="int32") /* ty=Tensor[(1, 26), int32] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %155 = mod(%142, %143) /* ty=Tensor[(12, 26), float64] */;
  %156 = %148.0;
  %157 = add(%153, %154) /* ty=Tensor[(?, 26), int32] */;
  (%155, %156, meta[relay.Constant][11] /* ty=Tensor[(1573), uint32] */, %var_7236, %157)
}

def @func_492(%var_484: Tensor[(392), uint8]) -> (Tensor[(16, 10, 15), float64], Tensor[(16, 10, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(392), uint8], Tensor[(840), float64]) {
  %158 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 10, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 15), float32] */;
  %159 = sin(%158) /* ty=Tensor[(16, 10, 15), float32] */;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(16, 10, 15), float64] */;
  %161 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 10, 15), float32] */, dtype="float64") /* ty=Tensor[(16, 10, 15), float64] */;
  %162 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%159, dtype="float64") /* ty=Tensor[(16, 10, 15), float64] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %165 = cast(%var_484, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %166 = cast(%var_484, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %167 = reshape(%165, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
  %168 = reshape(%166, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
  %169 = @func_373(%167, %168) /* ty=(Tensor[(2, 14, 14), uint8], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float64], Tensor[(2, 14, 14), int32]) */;
  %170 = cast(%var_484, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %171 = cast(%var_484, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %172 = reshape(%170, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
  %173 = reshape(%171, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
  %174 = @func_373(%172, %173) /* ty=(Tensor[(2, 14, 14), uint8], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float64], Tensor[(2, 14, 14), int32]) */;
  %175 = cos(%160) /* ty=Tensor[(16, 10, 15), float64] */;
  %176 = multiply(%163, %164) /* ty=Tensor[(16, 10, 15), float64] */;
  %177 = %169.6;
  %178 = %174.2;
  (%175, %176, %177, %var_484, %178)
}

def @func_5134() -> Tensor[(12, 5, 1), float64] {
  %179 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 1), float64] */;
  acosh(%179) /* ty=Tensor[(12, 5, 1), float64] */
}

def @func_6567(%var_6565: Tensor[(6, 140), float64]) -> (Tensor[(392), uint8], Tensor[(320), float32], float32, Tensor[(1452), float32], Tensor[(6, 140), float64], Tensor[(320), float32], Tensor[(26), float64]) {
  @func_6564(%var_6565) /* ty=(Tensor[(392), uint8], Tensor[(320), float32], float32, Tensor[(1452), float32], Tensor[(6, 140), float64], Tensor[(320), float32], Tensor[(26), float64]) */
}

def @func_3402(%var_3396: Tensor[(294), float32], %var_3397: Tensor[(840, 1), float64], %var_3398: Tensor[(10, 78), float32], %var_3399: Tensor[(1452), float32], %var_3400: Tensor[(320), float32], %var_3401: Tensor[(26), float64]) -> (Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 13, 2), float64], Tensor[(60, 14), float64], Tensor[(840, 1), float64], Tensor[(10, 78), float32], Tensor[(13, 2), float64], float32, Tensor[(1452), float32], Tensor[(320), float32], Tensor[(26), float64], Tensor[(12, 5, 13), uint64], Tensor[(60), uint64], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), int32]) {
  %226 = fn (%var_3325: Tensor[(294), float32], %var_3361: Tensor[(840, 1), float64], %var_3362: Tensor[(10, 78), float32], %var_3369: Tensor[(1452), float32], %var_3370: Tensor[(320), float32], %var_3371: Tensor[(26), float64]) -> (Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 13, 2), float64], Tensor[(60, 14), float64], Tensor[(840, 1), float64], Tensor[(10, 78), float32], Tensor[(13, 2), float64], float32, Tensor[(1452), float32], Tensor[(320), float32], Tensor[(26), float64], Tensor[(12, 5, 13), uint64], Tensor[(60), uint64], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), int32]) {
    %180 = cast(%var_3325, dtype="float32") /* ty=Tensor[(294), float32] */;
    %181 = reshape(%180, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
    %182 = @func_2297(%181) /* ty=(Tensor[(7, 14, 3), float32],) */;
    %183 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    %184 = cast(%183, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
    %185 = cos(%184) /* ty=Tensor[(7, 13, 2), float32] */;
    %186 = cast(%185, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
    %187 = sinh(%186) /* ty=Tensor[(7, 13, 2), float32] */;
    %188 = cast(%185, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
    %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %190 = cast(%187, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
    %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %192 = cast(%var_3361, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
    %193 = cast(%var_3362, dtype="float32") /* ty=Tensor[(10, 78), float32] */;
    %194 = reshape(%192, newshape=[60, 14]) /* ty=Tensor[(60, 14), float64] */;
    %195 = reshape(%193, newshape=[780]) /* ty=Tensor[(780), float32] */;
    %196 = @func_3149(%194, %195) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(60, 14), float64], Tensor[(160, 2), float32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(780), float32], Tensor[(5, 8, 8), float64], Tensor[(1, 26), float64]) */;
    %197 = cast(-0.527944f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %198 = cast(%var_3369, dtype="float32") /* ty=Tensor[(1452), float32] */;
    %199 = cast(%var_3361, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
    %200 = cast(%var_3370, dtype="float32") /* ty=Tensor[(320), float32] */;
    %201 = cast(%var_3371, dtype="float64") /* ty=Tensor[(26), float64] */;
    %202 = reshape(%197, newshape=[]) /* ty=float32 */;
    %203 = reshape(%198, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float32] */;
    %204 = reshape(%199, newshape=[840]) /* ty=Tensor[(840), float64] */;
    %205 = reshape(%200, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %206 = reshape(%201, newshape=[13, 2]) /* ty=Tensor[(13, 2), float64] */;
    %207 = @func_782(%202, %203, %204, %205, %206) /* ty=(Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) */;
    %208 = cast(meta[relay.Constant][14] /* ty=Tensor[(60), uint64] */, dtype="uint64") /* ty=Tensor[(60), uint64] */;
    %209 = cast(%var_3362, dtype="uint64") /* ty=Tensor[(10, 78), uint64] */;
    %210 = reshape(%208, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), uint64] */;
    %211 = reshape(%209, newshape=[12, 5, 13]) /* ty=Tensor[(12, 5, 13), uint64] */;
    %212 = @func_2137(%210, %211) /* ty=(Tensor[(12, 5, 13), uint64],) */;
    %213 = cast(%185, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
    %214 = sin(%213) /* ty=Tensor[(7, 13, 2), float64] */;
    %215 = cast(%214, dtype="int32") /* ty=Tensor[(7, 13, 2), int32] */;
    %216 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %217 = cast(%187, dtype="int32") /* ty=Tensor[(7, 13, 2), int32] */;
    %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %219 = %182.0;
    %220 = divide(%190, %191) /* ty=Tensor[(7, 13, 2), float64] */;
    %221 = %196.1;
    %222 = %207.4;
    %223 = %212.0;
    %224 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    %225 = left_shift(%217, %218) /* ty=Tensor[(7, 13, 2), int32] */;
    (%219, %var_3325, %220, %221, %var_3361, %var_3362, %222, -0.527944f /* ty=float32 */, %var_3369, %var_3370, %var_3371, %223, meta[relay.Constant][14] /* ty=Tensor[(60), uint64] */, %224, %225)
  };
  %226(%var_3396, %var_3397, %var_3398, %var_3399, %var_3400, %var_3401) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 13, 2), float64], Tensor[(60, 14), float64], Tensor[(840, 1), float64], Tensor[(10, 78), float32], Tensor[(13, 2), float64], float32, Tensor[(1452), float32], Tensor[(320), float32], Tensor[(26), float64], Tensor[(12, 5, 13), uint64], Tensor[(60), uint64], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), int32]) */
}

def @func_2755(%var_2754: Tensor[(7, 13, 2), float64]) -> (Tensor[(7, 13, 2), float64],) {
  %235 = fn (%var_2736: Tensor[(7, 13, 2), float64]) -> (Tensor[(7, 13, 2), float64],) {
    %227 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    %228 = cast(%227, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
    %229 = acosh(%228) /* ty=Tensor[(7, 13, 2), float64] */;
    %230 = cast(%var_2736, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
    %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %232 = cast(%229, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %234 = power(%232, %233) /* ty=Tensor[(7, 13, 2), float64] */;
    (%234,)
  };
  %235(%var_2754) /* ty=(Tensor[(7, 13, 2), float64],) */
}

def @func_4077(%var_4076: Tensor[(10, 6, 14), float64]) -> (Tensor[(10, 6, 14), uint8], Tensor[(10, 6, 14), float32]) {
  %245 = fn (%var_4063: Tensor[(10, 6, 14), float64]) -> (Tensor[(10, 6, 14), uint8], Tensor[(10, 6, 14), float32]) {
    %236 = cast(%var_4063, dtype="uint8") /* ty=Tensor[(10, 6, 14), uint8] */;
    %237 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(10, 6, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 6, 14), float64] */, dtype="uint8") /* ty=Tensor[(10, 6, 14), uint8] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %240 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 14), float64] */;
    %241 = log(%240) /* ty=Tensor[(10, 6, 14), float64] */;
    %242 = cast(%241, dtype="float32") /* ty=Tensor[(10, 6, 14), float32] */;
    %243 = minimum(%238, %239) /* ty=Tensor[(10, 6, 14), uint8] */;
    %244 = atan(%242) /* ty=Tensor[(10, 6, 14), float32] */;
    (%243, %244)
  };
  %245(%var_4076) /* ty=(Tensor[(10, 6, 14), uint8], Tensor[(10, 6, 14), float32]) */
}

def @func_7067(%var_7065: Tensor[(1452), float32]) -> (Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(840), float64], Tensor[(12, 5, 13), uint64], Tensor[(1452), float32], Tensor[(33), uint16], Tensor[(26), float32]) {
  @func_7064(%var_7065) /* ty=(Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(840), float64], Tensor[(12, 5, 13), uint64], Tensor[(1452), float32], Tensor[(33), uint16], Tensor[(26), float32]) */
}

def @func_3287() -> (Tensor[(320), float64],) {
  %250 = fn () -> (Tensor[(320), float64],) {
    %246 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %247 = %246.3;
    %248 = cast(%247, dtype="float64") /* ty=Tensor[(320), float64] */;
    %249 = erf(%248) /* ty=Tensor[(320), float64] */;
    (%249,)
  };
  %250() /* ty=(Tensor[(320), float64],) */
}

def @func_4560() -> (Tensor[(7, 13, 2), float64],) {
  %255 = fn () -> (Tensor[(7, 13, 2), float64],) {
    %251 = @func_2862() /* ty=(Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780, 1), float32], Tensor[(7, 13, 2), uint64]) */;
    %252 = %251.4;
    %253 = cast(%252, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
    %254 = log10(%253) /* ty=Tensor[(7, 13, 2), float64] */;
    (%254,)
  };
  %255() /* ty=(Tensor[(7, 13, 2), float64],) */
}

def @func_5463() -> (Tensor[(320), float32], Tensor[(320), float64], Tensor[(320), bool]) {
  %262 = fn () -> (Tensor[(320), float32], Tensor[(320), float64], Tensor[(320), bool]) {
    %256 = @func_3286() /* ty=(Tensor[(320), float64],) */;
    %257 = %256.0;
    %258 = cast(%257, dtype="float32") /* ty=Tensor[(320), float32] */;
    %259 = reshape(%258, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %260 = @func_4332() /* ty=Tensor[(320), float32] */;
    %261 = @func_5104(%259) /* ty=Tensor[(320), bool] */;
    (%260, %257, %261)
  };
  %262() /* ty=(Tensor[(320), float32], Tensor[(320), float64], Tensor[(320), bool]) */
}

def @func_4688(%var_4685: Tensor[(13, 4, 5), float64], %var_4686: Tensor[(2912), float32], %var_4687: Tensor[(320), float32]) -> (Tensor[(13, 4, 5), float64], Tensor[(16, 13, 14), uint32], Tensor[(2912), float32], Tensor[(320), float32]) {
  %271 = fn (%var_4673: Tensor[(13, 4, 5), float64], %var_4681: Tensor[(2912), float32], %var_4682: Tensor[(320), float32]) -> (Tensor[(13, 4, 5), float64], Tensor[(16, 13, 14), uint32], Tensor[(2912), float32], Tensor[(320), float32]) {
    %263 = cast(%var_4673, dtype="float64") /* ty=Tensor[(13, 4, 5), float64] */;
    %264 = cast(%var_4681, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %265 = cast(%var_4682, dtype="float32") /* ty=Tensor[(320), float32] */;
    %266 = reshape(%264, newshape=[16, 13, 14]) /* ty=Tensor[(16, 13, 14), float32] */;
    %267 = reshape(%265, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %268 = @func_1345(%266, %267) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */;
    %269 = asinh(%263) /* ty=Tensor[(13, 4, 5), float64] */;
    %270 = %268.2;
    (%269, %270, %var_4681, %var_4682)
  };
  %271(%var_4685, %var_4686, %var_4687) /* ty=(Tensor[(13, 4, 5), float64], Tensor[(16, 13, 14), uint32], Tensor[(2912), float32], Tensor[(320), float32]) */
}

def @func_1492(%var_1490: Tensor[(1, 14, 10), float32]) -> (Tensor[(1, 14, 10), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) {
  @func_1489(%var_1490) /* ty=(Tensor[(1, 14, 10), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) */
}

def @func_2286(%var_2282: float64, %var_2283: Tensor[(16, 1, 14), float64], %var_2284: Tensor[(780), float32], %var_2285: Tensor[(320), float32]) -> (Tensor[(16, 1, 14), float64], Tensor[(16, 1, 14), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) {
  %288 = fn (%var_2266: float64, %var_2267: Tensor[(16, 1, 14), float64], %var_2274: Tensor[(780), float32], %var_2278: Tensor[(320), float32]) -> (Tensor[(16, 1, 14), float64], Tensor[(16, 1, 14), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) {
    %272 = cast(%var_2266, dtype="float64") /* ty=float64 */;
    %273 = cast(%var_2267, dtype="float64") /* ty=Tensor[(16, 1, 14), float64] */;
    %274 = cast(%var_2267, dtype="float64") /* ty=Tensor[(16, 1, 14), float64] */;
    %275 = cast(%var_2274, dtype="float32") /* ty=Tensor[(780), float32] */;
    %276 = cast(%var_2274, dtype="float32") /* ty=Tensor[(780), float32] */;
    %277 = reshape(%275, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
    %278 = reshape(%276, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
    %279 = cast(meta[relay.Constant][16] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %280 = cast(%var_2278, dtype="float32") /* ty=Tensor[(320), float32] */;
    %281 = reshape(%279, newshape=[16, 13, 14]) /* ty=Tensor[(16, 13, 14), float32] */;
    %282 = reshape(%280, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %283 = @func_1345(%281, %282) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */;
    %284 = floor_divide(%272, %273) /* ty=Tensor[(16, 1, 14), float64] */;
    %285 = rsqrt(%274) /* ty=Tensor[(16, 1, 14), float64] */;
    %286 = @func_911(%277, %278) /* ty=Tensor[(13, 6, 10), bool] */;
    %287 = %283.1;
    (%284, %285, %286, %var_2274, %287, meta[relay.Constant][16] /* ty=Tensor[(2912), float32] */, %var_2278)
  };
  %288(%var_2282, %var_2283, %var_2284, %var_2285) /* ty=(Tensor[(16, 1, 14), float64], Tensor[(16, 1, 14), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) */
}

def @func_6657(%var_6629: Tensor[(6, 10, 4), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(6, 10, 4), uint16], Tensor[(7, 13, 2), uint64]) {
  %289 = cast(%var_6629, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %290 = tan(%289) /* ty=Tensor[(6, 10, 4), float32] */;
  %291 = cast(%290, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %292 = shape_of(%var_6629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_6629, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %295 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %296 = bitwise_and(%293, %294) /* ty=Tensor[(6, 10, 4), uint16] */;
  %297 = @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%295, %296, %297)
}

def @func_3647() -> (Tensor[(7, 13, 2), uint64],) {
  %298 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%298,)
}

def @func_4672() -> Tensor[(320), float64] {
  %300 = fn () -> Tensor[(320), float64] {
    %299 = @func_3286() /* ty=(Tensor[(320), float64],) */;
    %299.0
  };
  %300() /* ty=Tensor[(320), float64] */
}

def @func_495(%var_493: Tensor[(392), uint8]) -> (Tensor[(16, 10, 15), float64], Tensor[(16, 10, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(392), uint8], Tensor[(840), float64]) {
  @func_492(%var_493) /* ty=(Tensor[(16, 10, 15), float64], Tensor[(16, 10, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(392), uint8], Tensor[(840), float64]) */
}

def @func_1959(%var_1958: Tensor[(1, 4, 13), float64]) -> Tensor[(1, 4, 13), float64] {
  %306 = fn (%var_1945: Tensor[(1, 4, 13), float64]) -> Tensor[(1, 4, 13), float64] {
    %301 = cast(%var_1945, dtype="float64") /* ty=Tensor[(1, 4, 13), float64] */;
    %302 = log10(%301) /* ty=Tensor[(1, 4, 13), float64] */;
    %303 = cast(%302, dtype="float64") /* ty=Tensor[(1, 4, 13), float64] */;
    %304 = cos(%303) /* ty=Tensor[(1, 4, 13), float64] */;
    %305 = cast(%304, dtype="float64") /* ty=Tensor[(1, 4, 13), float64] */;
    exp(%305) /* ty=Tensor[(1, 4, 13), float64] */
  };
  %306(%var_1958) /* ty=Tensor[(1, 4, 13), float64] */
}

def @func_5026(%var_5024: Tensor[(7, 13, 2), float32]) -> (Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), float32]) {
  @func_5023(%var_5024) /* ty=(Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), float32]) */
}

def @func_6469(%var_6460: Tensor[(100, 2), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(10, 4, 5), bool], Tensor[(100, 2), float64], Tensor[(100, 2), float64]) {
  %307 = @func_4789() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float64]) */;
  %308 = cast(meta[relay.Constant][17] /* ty=Tensor[(100, 2), float32] */, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %309 = reshape(%308, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float32] */;
  %310 = @func_4043(%309) /* ty=(Tensor[(10, 4, 5), bool],) */;
  %311 = cast(%var_6460, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
  %312 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(100, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %313 = cast(meta[relay.Constant][17] /* ty=Tensor[(100, 2), float32] */, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %315 = cast(%var_6460, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
  %316 = %307.0;
  %317 = %310.0;
  %318 = divide(%313, %314) /* ty=Tensor[(100, 2), float64] */;
  %319 = cosh(%315) /* ty=Tensor[(100, 2), float64] */;
  (%316, %317, %318, %319)
}

def @func_4046(%var_4044: Tensor[(10, 4, 5), float32]) -> (Tensor[(10, 4, 5), bool],) {
  @func_4043(%var_4044) /* ty=(Tensor[(10, 4, 5), bool],) */
}

def @func_5706(%var_5703: Tensor[(1452), float32], %var_5704: Tensor[(320), float32], %var_5705: Tensor[(13, 2), float64]) -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(1452), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64]) {
  @func_5701(%var_5703, %var_5704, %var_5705) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(1452), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64]) */
}

def @func_3947(%var_3919: Tensor[(1, 11, 1), float32], %var_3937: Tensor[(140), float32]) -> (Tensor[(780), float32], Tensor[(780), float32], Tensor[(140), float32], Tensor[(1, 11, 225), float64]) {
  %320 = cast(meta[relay.Constant][18] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %321 = cast(meta[relay.Constant][19] /* ty=Tensor[(225), int64] */, dtype="int64") /* ty=Tensor[(225), int64] */;
  %322 = cast(%var_3937, dtype="float32") /* ty=Tensor[(140), float32] */;
  %323 = reshape(%320, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %324 = reshape(%321, newshape=[225]) /* ty=Tensor[(225), int64] */;
  %325 = reshape(%322, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
  %326 = @func_3199(%323, %324, %325) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(7, 13, 2), float64], Tensor[(140), int64], Tensor[(225), int64], Tensor[(140, 1), float32]) */;
  %327 = cast(%var_3919, dtype="float32") /* ty=Tensor[(1, 11, 1), float32] */;
  %328 = sqrt(%327) /* ty=Tensor[(1, 11, 1), float32] */;
  %329 = cast(meta[relay.Constant][19] /* ty=Tensor[(225), int64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %330 = cast(%328, dtype="float64") /* ty=Tensor[(1, 11, 1), float64] */;
  %331 = %326.2;
  %332 = floor_divide(%329, %330) /* ty=Tensor[(1, 11, 225), float64] */;
  (%331, meta[relay.Constant][18] /* ty=Tensor[(780), float32] */, %var_3937, %332)
}

def @func_5999(%var_5997: Tensor[(16, 15, 10), float32], %var_5998: Tensor[(70, 2), float32]) -> (Tensor[(16, 15, 10), float64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(25, 9), int64], Tensor[(70, 2), float32]) {
  %348 = fn (%var_5959: Tensor[(16, 15, 10), float32], %var_5978: Tensor[(70, 2), float32]) -> (Tensor[(16, 15, 10), float64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(25, 9), int64], Tensor[(70, 2), float32]) {
    %333 = cast(%var_5959, dtype="float32") /* ty=Tensor[(16, 15, 10), float32] */;
    %334 = rsqrt(%333) /* ty=Tensor[(16, 15, 10), float32] */;
    %335 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 15, 10), float32] */, dtype="float64") /* ty=Tensor[(16, 15, 10), float64] */;
    %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
    %337 = cast(%334, dtype="float64") /* ty=Tensor[(16, 15, 10), float64] */;
    %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %339 = cast(meta[relay.Constant][21] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
    %340 = cast(meta[relay.Constant][22] /* ty=Tensor[(25, 9), int64] */, dtype="int64") /* ty=Tensor[(25, 9), int64] */;
    %341 = cast(%var_5978, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
    %342 = reshape(%339, newshape=[780]) /* ty=Tensor[(780), float32] */;
    %343 = reshape(%340, newshape=[225]) /* ty=Tensor[(225), int64] */;
    %344 = reshape(%341, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
    %345 = @func_3199(%342, %343, %344) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(7, 13, 2), float64], Tensor[(140), int64], Tensor[(225), int64], Tensor[(140, 1), float32]) */;
    %346 = floor_divide(%337, %338) /* ty=Tensor[(16, 15, 10), float64] */;
    %347 = %345.0;
    (%346, %347, meta[relay.Constant][21] /* ty=Tensor[(780), float32] */, meta[relay.Constant][22] /* ty=Tensor[(25, 9), int64] */, %var_5978)
  };
  %348(%var_5997, %var_5998) /* ty=(Tensor[(16, 15, 10), float64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(25, 9), int64], Tensor[(70, 2), float32]) */
}

def @func_4332() -> Tensor[(320), float32] {
  %349 = @func_2862() /* ty=(Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780, 1), float32], Tensor[(7, 13, 2), uint64]) */;
  %349.0
}

def @func_94(%var_92: Tensor[(5, 8, 8), float32], %var_93: Tensor[(5, 8, 8), float32]) -> (Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) {
  %366 = fn (%var_35: Tensor[(5, 8, 8), float32], %var_36: Tensor[(5, 8, 8), float32]) -> (Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) {
    %350 = cast(%var_36, dtype="bool") /* ty=Tensor[(5, 8, 8), bool] */;
    %351 = shape_of(%var_35, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%var_35, dtype="bool") /* ty=Tensor[(5, 8, 8), bool] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %354 = greater(%352, %353) /* ty=Tensor[(5, 8, 8), bool] */;
    %355 = cast(%var_35, dtype="uint64") /* ty=Tensor[(5, 8, 8), uint64] */;
    %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
    %357 = cast(%354, dtype="uint64") /* ty=Tensor[(5, 8, 8), uint64] */;
    %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %359 = cast(%var_35, dtype="float32") /* ty=Tensor[(5, 8, 8), float32] */;
    %360 = exp(%359) /* ty=Tensor[(5, 8, 8), float32] */;
    %361 = cast(%360, dtype="float64") /* ty=Tensor[(5, 8, 8), float64] */;
    %362 = cast(%var_36, dtype="float32") /* ty=Tensor[(5, 8, 8), float32] */;
    %363 = maximum(%357, %358) /* ty=Tensor[(5, 8, 8), uint64] */;
    %364 = asin(%361) /* ty=Tensor[(5, 8, 8), float64] */;
    %365 = sin(%362) /* ty=Tensor[(5, 8, 8), float32] */;
    (%363, %364, %365)
  };
  %366(%var_92, %var_93) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) */
}

def @func_3992() -> (Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) {
  %379 = fn () -> (Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) {
    %367 = @func_2862() /* ty=(Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780, 1), float32], Tensor[(7, 13, 2), uint64]) */;
    %368 = %367.2;
    %369 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 6, 10), bool] */, dtype="uint8") /* ty=Tensor[(13, 6, 10), uint8] */;
    %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
    %371 = cast(%368, dtype="uint8") /* ty=Tensor[(13, 6, 10), uint8] */;
    %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %373 = cast(meta[relay.Constant][24] /* ty=Tensor[(26, 1), float64] */, dtype="float64") /* ty=Tensor[(26, 1), float64] */;
    %374 = reshape(%373, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
    %375 = @func_690(%374) /* ty=(Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) */;
    %376 = @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */;
    %377 = bitwise_xor(%371, %372) /* ty=Tensor[(13, 6, 10), uint8] */;
    %378 = %375.2;
    (%376, %377, %378, meta[relay.Constant][24] /* ty=Tensor[(26, 1), float64] */)
  };
  %379() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */
}

def @func_3649() -> (Tensor[(7, 13, 2), uint64],) {
  @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */
}

def @func_3951(%var_3949: Tensor[(1, 11, 1), float32], %var_3950: Tensor[(140), float32]) -> (Tensor[(780), float32], Tensor[(780), float32], Tensor[(140), float32], Tensor[(1, 11, 225), float64]) {
  @func_3947(%var_3949, %var_3950) /* ty=(Tensor[(780), float32], Tensor[(780), float32], Tensor[(140), float32], Tensor[(1, 11, 225), float64]) */
}

def @func_2891(%var_2880: Tensor[(60, 14), float64], %var_2881: Tensor[(320), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(60, 14), float32]) {
  %380 = cast(%var_2880, dtype="float64") /* ty=Tensor[(60, 14), float64] */;
  %381 = cast(%var_2881, dtype="float32") /* ty=Tensor[(320), float32] */;
  %382 = reshape(%380, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %383 = reshape(%381, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %384 = @func_269(%382, %383) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %385 = cast(%var_2880, dtype="float32") /* ty=Tensor[(60, 14), float32] */;
  %386 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %387 = %384.2;
  %388 = rsqrt(%385) /* ty=Tensor[(60, 14), float32] */;
  (%386, %387, %var_2881, %388)
}

def @func_3152(%var_3150: Tensor[(60, 14), float64], %var_3151: Tensor[(780), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(60, 14), float64], Tensor[(160, 2), float32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(780), float32], Tensor[(5, 8, 8), float64], Tensor[(1, 26), float64]) {
  %407 = fn (%var_3126: Tensor[(60, 14), float64], %var_3132: Tensor[(780), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(60, 14), float64], Tensor[(160, 2), float32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(780), float32], Tensor[(5, 8, 8), float64], Tensor[(1, 26), float64]) {
    %389 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %390 = cast(meta[relay.Constant][26] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %391 = cast(%var_3132, dtype="float32") /* ty=Tensor[(780), float32] */;
    %392 = reshape(%390, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %393 = reshape(%391, newshape=[780]) /* ty=Tensor[(780), float32] */;
    %394 = @func_2802(%392, %393) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64], Tensor[(13, 6, 10), bool], float64, Tensor[(224), float64], Tensor[(780), float32], Tensor[(320), float32]) */;
    %395 = cast(%var_3126, dtype="float64") /* ty=Tensor[(60, 14), float64] */;
    %396 = cast(meta[relay.Constant][25] /* ty=Tensor[(160, 2), float32] */, dtype="float32") /* ty=Tensor[(160, 2), float32] */;
    %397 = reshape(%395, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
    %398 = reshape(%396, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %399 = @func_269(%397, %398) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
    %400 = %399.1;
    %401 = cast(%400, dtype="float64") /* ty=Tensor[(5, 8, 8), float64] */;
    %402 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %403 = %389.1;
    %404 = %394.2;
    %405 = cos(%401) /* ty=Tensor[(5, 8, 8), float64] */;
    %406 = %402.4;
    (%403, %var_3126, meta[relay.Constant][25] /* ty=Tensor[(160, 2), float32] */, %404, meta[relay.Constant][26] /* ty=Tensor[(52), float64] */, %var_3132, %405, %406)
  };
  %407(%var_3150, %var_3151) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(60, 14), float64], Tensor[(160, 2), float32], Tensor[(52), float64], Tensor[(52), float64], Tensor[(780), float32], Tensor[(5, 8, 8), float64], Tensor[(1, 26), float64]) */
}

def @func_7134() -> Tensor[(320), float32] {
  %408 = @func_2813() /* ty=(Tensor[(320), float32],) */;
  %408.0
}

def @func_3026(%var_3023: Tensor[(3, 5, 15), int64], %var_3024: Tensor[(3, 5, 15), int64], %var_3025: Tensor[(140), float32]) -> (Tensor[(3, 5, 15), int64], Tensor[(320), float32], Tensor[(140), int64]) {
  %423 = fn (%var_2979: Tensor[(3, 5, 15), int64], %var_2980: Tensor[(3, 5, 15), int64], %var_2990: Tensor[(140), float32]) -> (Tensor[(3, 5, 15), int64], Tensor[(320), float32], Tensor[(140), int64]) {
    %409 = cast(%var_2980, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
    %410 = shape_of(%var_2979, dtype="int32") /* ty=Tensor[(3), int32] */;
    %411 = cast(%var_2979, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
    %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %413 = cast(%var_2990, dtype="float32") /* ty=Tensor[(140), float32] */;
    %414 = reshape(%413, newshape=[1, 14, 10]) /* ty=Tensor[(1, 14, 10), float32] */;
    %415 = @func_1489(%414) /* ty=(Tensor[(1, 14, 10), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) */;
    %416 = cast(meta[relay.Constant][27] /* ty=Tensor[(140), float32] */, dtype="int64") /* ty=Tensor[(140), int64] */;
    %417 = shape_of(%var_2990, dtype="int32") /* ty=Tensor[(1), int32] */;
    %418 = cast(%var_2990, dtype="int64") /* ty=Tensor[(140), int64] */;
    %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?), int64] */;
    %420 = bitwise_and(%411, %412) /* ty=Tensor[(3, 5, 15), int64] */;
    %421 = %415.1;
    %422 = minimum(%418, %419) /* ty=Tensor[(140), int64] */;
    (%420, %421, %422)
  };
  %423(%var_3023, %var_3024, %var_3025) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(320), float32], Tensor[(140), int64]) */
}

def @func_4741() -> Tensor[(7, 13, 2), uint64] {
  @func_4739() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_4791() -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float64]) {
  @func_4789() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float64]) */
}

def @func_4206(%var_4165: Tensor[(840), float64], %var_4167: Tensor[(1452), float32], %var_4168: Tensor[(26), float64]) -> (Tensor[(320), float64], Tensor[(12, 5, 13), uint64], Tensor[(294), float32], Tensor[(840), float64], Tensor[(780), float32], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32]) {
  %424 = @func_3286() /* ty=(Tensor[(320), float64],) */;
  %425 = cast(meta[relay.Constant][28] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %426 = cast(%var_4165, dtype="float64") /* ty=Tensor[(840), float64] */;
  %427 = cast(meta[relay.Constant][29] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %428 = cast(%var_4167, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %429 = %424.0;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(320), float32] */;
  %431 = cast(%var_4168, dtype="float64") /* ty=Tensor[(26), float64] */;
  %432 = reshape(%425, newshape=[294]) /* ty=Tensor[(294), float32] */;
  %433 = reshape(%426, newshape=[840, 1]) /* ty=Tensor[(840, 1), float64] */;
  %434 = reshape(%427, newshape=[10, 78]) /* ty=Tensor[(10, 78), float32] */;
  %435 = reshape(%428, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %436 = reshape(%430, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %437 = reshape(%431, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %438 = @func_3395(%432, %433, %434, %435, %436, %437) /* ty=(Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 13, 2), float64], Tensor[(60, 14), float64], Tensor[(840, 1), float64], Tensor[(10, 78), float32], Tensor[(13, 2), float64], float32, Tensor[(1452), float32], Tensor[(320), float32], Tensor[(26), float64], Tensor[(12, 5, 13), uint64], Tensor[(60), uint64], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), int32]) */;
  %439 = cast(meta[relay.Constant][28] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %440 = reshape(%439, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), float32] */;
  %441 = @func_2297(%440) /* ty=(Tensor[(7, 14, 3), float32],) */;
  %442 = %438.11;
  %443 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %444 = %441.0;
  (%429, %442, meta[relay.Constant][28] /* ty=Tensor[(294), float32] */, %var_4165, meta[relay.Constant][29] /* ty=Tensor[(780), float32] */, %var_4167, %var_4168, %443, %444)
}

def @func_3874(%var_3872: Tensor[(294), float32], %var_3873: Tensor[(2912), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 14, 3), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) {
  @func_3870(%var_3872, %var_3873) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32], Tensor[(294), float32], Tensor[(7, 14, 3), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) */
}

def @func_4125() -> Tensor[(7, 13, 2), uint64] {
  @func_4053() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_5862() -> Tensor[(7, 13, 2), uint64] {
  @func_5860() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_5254(%var_5253: Tensor[(20), float64]) -> (Tensor[(320), float32], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(196, 2), uint8], Tensor[(1452), float32], Tensor[(35, 4), float32]) {
  %458 = fn (%var_5229: Tensor[(20), float64]) -> (Tensor[(320), float32], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(196, 2), uint8], Tensor[(1452), float32], Tensor[(35, 4), float32]) {
    %445 = cast(%var_5229, dtype="float64") /* ty=Tensor[(20), float64] */;
    %446 = cast(meta[relay.Constant][30] /* ty=Tensor[(35, 4), float32] */, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
    %447 = cast(meta[relay.Constant][31] /* ty=Tensor[(196, 2), uint8] */, dtype="uint8") /* ty=Tensor[(196, 2), uint8] */;
    %448 = cast(meta[relay.Constant][32] /* ty=Tensor[(1452), float32] */, dtype="float32") /* ty=Tensor[(1452), float32] */;
    %449 = reshape(%445, newshape=[2, 1, 10]) /* ty=Tensor[(2, 1, 10), float64] */;
    %450 = reshape(%446, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %451 = reshape(%447, newshape=[392]) /* ty=Tensor[(392), uint8] */;
    %452 = reshape(%448, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
    %453 = @func_4479(%449, %450, %451, %452) /* ty=(Tensor[(320), float32], Tensor[(140), float32], Tensor[(5, 8, 8), uint64], Tensor[(2912), float32], Tensor[(2, 14, 14), uint8], Tensor[(392), uint8], Tensor[(780), float32], Tensor[(11), float32], Tensor[(2, 1, 10), float32], float64, Tensor[(52), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(1, 26), float64], Tensor[(2, ?, 10), bool], Tensor[(1452), float32], Tensor[(7, 13, 2), uint64]) */;
    %454 = cast(meta[relay.Constant][30] /* ty=Tensor[(35, 4), float32] */, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
    %455 = @func_5049() /* ty=Tensor[(320), float32] */;
    %456 = %453.3;
    %457 = log2(%454) /* ty=Tensor[(35, 4), float32] */;
    (%455, %456, %var_5229, meta[relay.Constant][31] /* ty=Tensor[(196, 2), uint8] */, meta[relay.Constant][32] /* ty=Tensor[(1452), float32] */, %457)
  };
  %458(%var_5253) /* ty=(Tensor[(320), float32], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(196, 2), uint8], Tensor[(1452), float32], Tensor[(35, 4), float32]) */
}

def @func_4739() -> Tensor[(7, 13, 2), uint64] {
  %459 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %459.0
}

def @func_4945() -> (Tensor[(320), float32],) {
  %461 = fn () -> (Tensor[(320), float32],) {
    %460 = @func_4332() /* ty=Tensor[(320), float32] */;
    (%460,)
  };
  %461() /* ty=(Tensor[(320), float32],) */
}

def @func_1306(%var_1267: Tensor[(11, 11, 13), uint32], %var_1268: Tensor[(11, 11, 13), uint32], %var_1288: Tensor[(26), float64]) -> (Tensor[(11, 11, 13), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(13, 6, 10), bool], Tensor[(13, 2, 1), float64], Tensor[(26), float64], Tensor[(840), float64]) {
  %462 = cast(%var_1268, dtype="uint32") /* ty=Tensor[(11, 11, 13), uint32] */;
  %463 = shape_of(%var_1267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%var_1267, dtype="uint32") /* ty=Tensor[(11, 11, 13), uint32] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %466 = maximum(%464, %465) /* ty=Tensor[(11, 11, 13), uint32] */;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %468 = cast(meta[relay.Constant][33] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %469 = cast(meta[relay.Constant][33] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %470 = reshape(%468, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %471 = reshape(%469, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %472 = cast(meta[relay.Constant][33] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %473 = @func_911(%470, %471) /* ty=Tensor[(13, 6, 10), bool] */;
  %474 = cast(%473, dtype="float32") /* ty=Tensor[(13, 6, 10), float32] */;
  %475 = reshape(%472, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %476 = reshape(%474, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %477 = cast(%var_1288, dtype="float64") /* ty=Tensor[(26), float64] */;
  %478 = reshape(%477, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %479 = @func_690(%478) /* ty=(Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) */;
  %480 = cast(%var_1288, dtype="float64") /* ty=Tensor[(26), float64] */;
  %481 = reshape(%480, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %482 = @func_690(%481) /* ty=(Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) */;
  %483 = cosh(%467) /* ty=Tensor[(11, 11, 13), float64] */;
  %484 = @func_911(%475, %476) /* ty=Tensor[(13, 6, 10), bool] */;
  %485 = %479.0;
  %486 = %482.1;
  (%483, %473, meta[relay.Constant][33] /* ty=Tensor[(780), float32] */, %484, %485, %var_1288, %486)
}

def @func_6543() -> (Tensor[(7, 13, 2), uint64],) {
  @func_6541() /* ty=(Tensor[(7, 13, 2), uint64],) */
}

def @func_5023(%var_5010: Tensor[(7, 13, 2), float32]) -> (Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), float32]) {
  %487 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %488 = @func_2813() /* ty=(Tensor[(320), float32],) */;
  %489 = @func_4559() /* ty=(Tensor[(7, 13, 2), float64],) */;
  %490 = %489.0;
  %491 = cast(%490, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
  %492 = sigmoid(%491) /* ty=Tensor[(7, 13, 2), float32] */;
  %493 = cast(%var_5010, dtype="uint64") /* ty=Tensor[(7, 13, 2), uint64] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="uint64") /* ty=Tensor[(7, 13, 2), uint64] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %497 = cast(%var_5010, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
  %498 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%492, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %501 = %487.3;
  %502 = %488.0;
  %503 = bitwise_or(%495, %496) /* ty=Tensor[(7, 13, 2), uint64] */;
  %504 = floor_divide(%499, %500) /* ty=Tensor[(7, 13, 2), float32] */;
  (%501, %502, %503, %504)
}

def @func_5860() -> Tensor[(7, 13, 2), uint64] {
  %505 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %505.0
}

def @func_7645() -> Tensor[(7, 13, 2), uint64] {
  %507 = fn () -> Tensor[(7, 13, 2), uint64] {
    %506 = @func_5799() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint8]) */;
    %506.0
  };
  %507() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_7271(%var_7269: Tensor[(12, 26), float64], %var_7270: Tensor[(20), float64]) -> (Tensor[(12, 26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1573), uint32], Tensor[(20), float64], Tensor[(?, 26), int32]) {
  @func_7267(%var_7269, %var_7270) /* ty=(Tensor[(12, 26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1573), uint32], Tensor[(20), float64], Tensor[(?, 26), int32]) */
}

def @func_789(%var_784: float32, %var_785: Tensor[(12, 11, 11), float32], %var_786: Tensor[(840), float64], %var_787: Tensor[(320), float32], %var_788: Tensor[(13, 2), float64]) -> (Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) {
  @func_782(%var_784, %var_785, %var_786, %var_787, %var_788) /* ty=(Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) */
}

def @func_6248(%var_6246: Tensor[(1, 1452), float32], %var_6247: Tensor[(26), float64]) -> (Tensor[(320), bool], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(1452), float32], Tensor[(1, 1452), float32], Tensor[(26), float64]) {
  @func_6244(%var_6246, %var_6247) /* ty=(Tensor[(320), bool], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(1452), float32], Tensor[(1, 1452), float32], Tensor[(26), float64]) */
}

def @func_2806(%var_2804: Tensor[(52), float64], %var_2805: Tensor[(780), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64], Tensor[(13, 6, 10), bool], float64, Tensor[(224), float64], Tensor[(780), float32], Tensor[(320), float32]) {
  @func_2802(%var_2804, %var_2805) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64], Tensor[(13, 6, 10), bool], float64, Tensor[(224), float64], Tensor[(780), float32], Tensor[(320), float32]) */
}

def @func_5620(%var_5618: Tensor[(3, 1, 5), uint64], %var_5619: Tensor[(3, 11, 5), uint64]) -> Tensor[(3, 11, 5), bool] {
  %513 = fn (%var_5592: Tensor[(3, 1, 5), uint64], %var_5593: Tensor[(3, 11, 5), uint64]) -> Tensor[(3, 11, 5), bool] {
    %508 = cast(%var_5592, dtype="uint64") /* ty=Tensor[(3, 1, 5), uint64] */;
    %509 = cast(%var_5593, dtype="uint64") /* ty=Tensor[(3, 11, 5), uint64] */;
    %510 = left_shift(%508, %509) /* ty=Tensor[(3, 11, 5), uint64] */;
    %511 = cast(%510, dtype="bool") /* ty=Tensor[(3, 11, 5), bool] */;
    %512 = cast(%var_5592, dtype="bool") /* ty=Tensor[(3, 1, 5), bool] */;
    logical_or(%511, %512) /* ty=Tensor[(3, 11, 5), bool] */
  };
  %513(%var_5618, %var_5619) /* ty=Tensor[(3, 11, 5), bool] */
}

def @func_4308(%var_4307: Tensor[(65), uint64]) -> (Tensor[(320), float64], Tensor[(392), uint8], Tensor[(7, 13, 2), uint64], Tensor[(840), float64], Tensor[(7, 13, 2), uint64], Tensor[(392), float32], Tensor[(5, 13, 11), int64], Tensor[(65), uint64], Tensor[(715), uint64]) {
  %535 = fn (%var_4293: Tensor[(65), uint64]) -> (Tensor[(320), float64], Tensor[(392), uint8], Tensor[(7, 13, 2), uint64], Tensor[(840), float64], Tensor[(7, 13, 2), uint64], Tensor[(392), float32], Tensor[(5, 13, 11), int64], Tensor[(65), uint64], Tensor[(715), uint64]) {
    %514 = @func_3286() /* ty=(Tensor[(320), float64],) */;
    %515 = cast(meta[relay.Constant][34] /* ty=Tensor[(392), uint8] */, dtype="uint8") /* ty=Tensor[(392), uint8] */;
    %516 = reshape(%515, newshape=[392]) /* ty=Tensor[(392), uint8] */;
    %517 = @func_492(%516) /* ty=(Tensor[(16, 10, 15), float64], Tensor[(16, 10, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(392), uint8], Tensor[(840), float64]) */;
    %518 = cast(meta[relay.Constant][35] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
    %519 = %514.0;
    %520 = cast(%519, dtype="float32") /* ty=Tensor[(320), float32] */;
    %521 = reshape(%518, newshape=[60, 14]) /* ty=Tensor[(60, 14), float64] */;
    %522 = reshape(%520, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %523 = @func_2891(%521, %522) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(60, 14), float32]) */;
    %524 = cast(meta[relay.Constant][34] /* ty=Tensor[(392), uint8] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %525 = cast(%var_4293, dtype="uint64") /* ty=Tensor[(65), uint64] */;
    %526 = cast(meta[relay.Constant][36] /* ty=Tensor[(715), uint64] */, dtype="uint64") /* ty=Tensor[(715), uint64] */;
    %527 = reshape(%525, newshape=[5, 13, 1]) /* ty=Tensor[(5, 13, 1), uint64] */;
    %528 = reshape(%526, newshape=[5, 13, 11]) /* ty=Tensor[(5, 13, 11), uint64] */;
    %529 = @func_3603(%527, %528) /* ty=(Tensor[(5, 13, 11), int64],) */;
    %530 = %517.3;
    %531 = %523.0;
    %532 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    %533 = atanh(%524) /* ty=Tensor[(392), float32] */;
    %534 = %529.0;
    (%519, %530, %531, meta[relay.Constant][35] /* ty=Tensor[(840), float64] */, %532, %533, %534, %var_4293, meta[relay.Constant][36] /* ty=Tensor[(715), uint64] */)
  };
  %535(%var_4307) /* ty=(Tensor[(320), float64], Tensor[(392), uint8], Tensor[(7, 13, 2), uint64], Tensor[(840), float64], Tensor[(7, 13, 2), uint64], Tensor[(392), float32], Tensor[(5, 13, 11), int64], Tensor[(65), uint64], Tensor[(715), uint64]) */
}

def @func_3488(%var_3485: Tensor[(780), float32], %var_3486: Tensor[(225), int64], %var_3487: Tensor[(140), float32]) -> (Tensor[(320), float64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(780), float32], Tensor[(225), int64], Tensor[(140), float32]) {
  %547 = fn (%var_3475: Tensor[(780), float32], %var_3476: Tensor[(225), int64], %var_3477: Tensor[(140), float32]) -> (Tensor[(320), float64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(780), float32], Tensor[(225), int64], Tensor[(140), float32]) {
    %536 = @func_3286() /* ty=(Tensor[(320), float64],) */;
    %537 = cast(%var_3475, dtype="float32") /* ty=Tensor[(780), float32] */;
    %538 = cast(%var_3476, dtype="int64") /* ty=Tensor[(225), int64] */;
    %539 = cast(%var_3477, dtype="float32") /* ty=Tensor[(140), float32] */;
    %540 = reshape(%537, newshape=[780]) /* ty=Tensor[(780), float32] */;
    %541 = reshape(%538, newshape=[225]) /* ty=Tensor[(225), int64] */;
    %542 = reshape(%539, newshape=[140, 1]) /* ty=Tensor[(140, 1), float32] */;
    %543 = @func_3199(%540, %541, %542) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(7, 13, 2), float64], Tensor[(140), int64], Tensor[(225), int64], Tensor[(140, 1), float32]) */;
    %544 = %536.0;
    %545 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    %546 = %543.2;
    (%544, %545, %546, %var_3475, %var_3476, %var_3477)
  };
  %547(%var_3485, %var_3486, %var_3487) /* ty=(Tensor[(320), float64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(780), float32], Tensor[(225), int64], Tensor[(140), float32]) */
}

def @func_7401() -> Tensor[(7, 13, 2), uint64] {
  %548 = @func_4371() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) */;
  %548.1
}

def @func_5071() -> (Tensor[(7, 13, 2), uint64],) {
  @func_5069() /* ty=(Tensor[(7, 13, 2), uint64],) */
}

def @func_2895(%var_2893: Tensor[(60, 14), float64], %var_2894: Tensor[(320), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(60, 14), float32]) {
  @func_2891(%var_2893, %var_2894) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(60, 14), float32]) */
}

def @func_5525() -> Tensor[(7, 13, 2), uint64] {
  @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_693(%var_691: Tensor[(13, 2, 1), float64]) -> (Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) {
  @func_690(%var_691) /* ty=(Tensor[(13, 2, 1), float64], Tensor[(840), float64], Tensor[(392), uint8]) */
}

def @func_4127() -> Tensor[(7, 13, 2), uint64] {
  @func_4125() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_6622(%var_6584: Tensor[(12, 9, 3), uint64], %var_6585: Tensor[(12, 9, 3), uint64], %var_6610: Tensor[(12, 9, 3), uint64]) -> (Tensor[(12, 9, 3), uint64], Tensor[(7, 13, 2), uint64], Tensor[(12, 9, 3), int8]) {
  %549 = cast(%var_6585, dtype="uint64") /* ty=Tensor[(12, 9, 3), uint64] */;
  %550 = shape_of(%var_6584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%var_6584, dtype="uint64") /* ty=Tensor[(12, 9, 3), uint64] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %553 = cast(%var_6610, dtype="int8") /* ty=Tensor[(12, 9, 3), int8] */;
  %554 = shape_of(%var_6585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_6585, dtype="int8") /* ty=Tensor[(12, 9, 3), int8] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %557 = left_shift(%551, %552) /* ty=Tensor[(12, 9, 3), uint64] */;
  %558 = @func_4739() /* ty=Tensor[(7, 13, 2), uint64] */;
  %559 = right_shift(%555, %556) /* ty=Tensor[(12, 9, 3), int8] */;
  (%557, %558, %559)
}

def @func_4054() -> Tensor[(7, 13, 2), uint64] {
  %561 = fn () -> Tensor[(7, 13, 2), uint64] {
    %560 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %560.0
  };
  %561() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_2815() -> (Tensor[(320), float32],) {
  @func_2813() /* ty=(Tensor[(320), float32],) */
}

def @func_5049() -> Tensor[(320), float32] {
  @func_4332() /* ty=Tensor[(320), float32] */
}

def @func_6564(%var_6557: Tensor[(6, 140), float64]) -> (Tensor[(392), uint8], Tensor[(320), float32], float32, Tensor[(1452), float32], Tensor[(6, 140), float64], Tensor[(320), float32], Tensor[(26), float64]) {
  %562 = @func_3991() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */;
  %563 = cast(-2.61869f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %564 = cast(meta[relay.Constant][37] /* ty=Tensor[(1452), float32] */, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %565 = cast(%var_6557, dtype="float64") /* ty=Tensor[(6, 140), float64] */;
  %566 = cast(meta[relay.Constant][38] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %567 = cast(meta[relay.Constant][39] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %568 = reshape(%563, newshape=[]) /* ty=float32 */;
  %569 = reshape(%564, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float32] */;
  %570 = reshape(%565, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %571 = reshape(%566, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %572 = reshape(%567, newshape=[13, 2]) /* ty=Tensor[(13, 2), float64] */;
  %573 = @func_782(%568, %569, %570, %571, %572) /* ty=(Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) */;
  %574 = %562.2;
  %575 = %573.3;
  (%574, %575, -2.61869f /* ty=float32 */, meta[relay.Constant][37] /* ty=Tensor[(1452), float32] */, %var_6557, meta[relay.Constant][38] /* ty=Tensor[(320), float32] */, meta[relay.Constant][39] /* ty=Tensor[(26), float64] */)
}

def @func_3424() -> Tensor[(7, 13, 2), uint64] {
  %577 = fn () -> Tensor[(7, 13, 2), uint64] {
    %576 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %576.0
  };
  %577() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_6472(%var_6470: Tensor[(100, 2), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(10, 4, 5), bool], Tensor[(100, 2), float64], Tensor[(100, 2), float64]) {
  @func_6469(%var_6470) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(10, 4, 5), bool], Tensor[(100, 2), float64], Tensor[(100, 2), float64]) */
}

def @func_6947(%var_6945: Tensor[(840), float64], %var_6946: Tensor[(140), float32]) -> (Tensor[(12, 5, 1), float64], Tensor[(5, 8, 8), float64], Tensor[(840), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(20), float64], Tensor[(140), float32], Tensor[(392), uint8], Tensor[(1452), float32], Tensor[(7, 13, 2), float64], Tensor[(10, 6, 14), float32]) {
  @func_6943(%var_6945, %var_6946) /* ty=(Tensor[(12, 5, 1), float64], Tensor[(5, 8, 8), float64], Tensor[(840), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(20), float64], Tensor[(140), float32], Tensor[(392), uint8], Tensor[(1452), float32], Tensor[(7, 13, 2), float64], Tensor[(10, 6, 14), float32]) */
}

def @func_2813() -> (Tensor[(320), float32],) {
  %578 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %579 = %578.3;
  (%579,)
}

def @func_3697(%var_3696: Tensor[(14, 9, 2), uint64]) -> (Tensor[(14, 9, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64]) {
  %586 = fn (%var_3680: Tensor[(14, 9, 2), uint64]) -> (Tensor[(14, 9, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64]) {
    %580 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 9, 2), uint64] */, dtype="uint64") /* ty=Tensor[(1, 9, 2), uint64] */;
    %581 = cast(%var_3680, dtype="uint64") /* ty=Tensor[(14, 9, 2), uint64] */;
    %582 = cast(meta[relay.Constant][41] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %583 = reshape(%582, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
    %584 = bitwise_xor(%580, %581) /* ty=Tensor[(14, 9, 2), uint64] */;
    %585 = @func_1957(%583) /* ty=Tensor[(1, 4, 13), float64] */;
    (%584, %585, meta[relay.Constant][41] /* ty=Tensor[(52), float64] */)
  };
  %586(%var_3696) /* ty=(Tensor[(14, 9, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64]) */
}

def @func_6627(%var_6624: Tensor[(12, 9, 3), uint64], %var_6625: Tensor[(12, 9, 3), uint64], %var_6626: Tensor[(12, 9, 3), uint64]) -> (Tensor[(12, 9, 3), uint64], Tensor[(7, 13, 2), uint64], Tensor[(12, 9, 3), int8]) {
  @func_6622(%var_6624, %var_6625, %var_6626) /* ty=(Tensor[(12, 9, 3), uint64], Tensor[(7, 13, 2), uint64], Tensor[(12, 9, 3), int8]) */
}

def @func_6390() -> (Tensor[(320), float64],) {
  %588 = fn () -> (Tensor[(320), float64],) {
    %587 = @func_4671() /* ty=Tensor[(320), float64] */;
    (%587,)
  };
  %588() /* ty=(Tensor[(320), float64],) */
}

def @func_5479(%var_5477: Tensor[(3, 11, 1), float32]) -> Tensor[(3, 11, 1), float32] {
  @func_5476(%var_5477) /* ty=Tensor[(3, 11, 1), float32] */
}

def @func_2300(%var_2298: Tensor[(7, 14, 3), float32]) -> (Tensor[(7, 14, 3), float32],) {
  @func_2297(%var_2298) /* ty=(Tensor[(7, 14, 3), float32],) */
}

def @func_6943(%var_6929: Tensor[(840), float64], %var_6934: Tensor[(140), float32]) -> (Tensor[(12, 5, 1), float64], Tensor[(5, 8, 8), float64], Tensor[(840), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(20), float64], Tensor[(140), float32], Tensor[(392), uint8], Tensor[(1452), float32], Tensor[(7, 13, 2), float64], Tensor[(10, 6, 14), float32]) {
  %589 = cast(%var_6929, dtype="float64") /* ty=Tensor[(840), float64] */;
  %590 = cast(meta[relay.Constant][42] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %591 = reshape(%589, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %592 = reshape(%590, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %593 = @func_269(%591, %592) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %594 = cast(meta[relay.Constant][43] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %595 = cast(%var_6934, dtype="float32") /* ty=Tensor[(140), float32] */;
  %596 = cast(meta[relay.Constant][44] /* ty=Tensor[(392), uint8] */, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %597 = cast(meta[relay.Constant][45] /* ty=Tensor[(1452), float32] */, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %598 = reshape(%594, newshape=[2, 1, 10]) /* ty=Tensor[(2, 1, 10), float64] */;
  %599 = reshape(%595, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %600 = reshape(%596, newshape=[392]) /* ty=Tensor[(392), uint8] */;
  %601 = reshape(%597, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %602 = @func_4479(%598, %599, %600, %601) /* ty=(Tensor[(320), float32], Tensor[(140), float32], Tensor[(5, 8, 8), uint64], Tensor[(2912), float32], Tensor[(2, 14, 14), uint8], Tensor[(392), uint8], Tensor[(780), float32], Tensor[(11), float32], Tensor[(2, 1, 10), float32], float64, Tensor[(52), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(1, 26), float64], Tensor[(2, ?, 10), bool], Tensor[(1452), float32], Tensor[(7, 13, 2), uint64]) */;
  %603 = @func_4559() /* ty=(Tensor[(7, 13, 2), float64],) */;
  %604 = cast(%var_6929, dtype="float64") /* ty=Tensor[(840), float64] */;
  %605 = reshape(%604, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
  %606 = @func_4075(%605) /* ty=(Tensor[(10, 6, 14), uint8], Tensor[(10, 6, 14), float32]) */;
  %607 = @func_5134() /* ty=Tensor[(12, 5, 1), float64] */;
  %608 = %593.1;
  %609 = %602.12;
  %610 = %603.0;
  %611 = %606.1;
  (%607, %608, %var_6929, meta[relay.Constant][42] /* ty=Tensor[(320), float32] */, %609, meta[relay.Constant][43] /* ty=Tensor[(20), float64] */, %var_6934, meta[relay.Constant][44] /* ty=Tensor[(392), uint8] */, meta[relay.Constant][45] /* ty=Tensor[(1452), float32] */, %610, %611)
}

def @func_3758(%var_3757: Tensor[(1, 225), int64]) -> (Tensor[(320), float64], Tensor[(7, 13, 2), float32], Tensor[(140), int64], Tensor[(1, 225), int64], Tensor[(140), float32]) {
  %625 = fn (%var_3749: Tensor[(1, 225), int64]) -> (Tensor[(320), float64], Tensor[(7, 13, 2), float32], Tensor[(140), int64], Tensor[(1, 225), int64], Tensor[(140), float32]) {
    %612 = @func_3286() /* ty=(Tensor[(320), float64],) */;
    %613 = @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */;
    %614 = cast(%613, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
    %615 = cast(%var_3749, dtype="int64") /* ty=Tensor[(1, 225), int64] */;
    %616 = cast(%var_3749, dtype="int64") /* ty=Tensor[(1, 225), int64] */;
    %617 = cast(meta[relay.Constant][46] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %618 = reshape(%615, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
    %619 = reshape(%616, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
    %620 = reshape(%617, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %621 = @func_3022(%618, %619, %620) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(320), float32], Tensor[(140), int64]) */;
    %622 = %612.0;
    %623 = acos(%614) /* ty=Tensor[(7, 13, 2), float32] */;
    %624 = %621.2;
    (%622, %623, %624, %var_3749, meta[relay.Constant][46] /* ty=Tensor[(140), float32] */)
  };
  %625(%var_3757) /* ty=(Tensor[(320), float64], Tensor[(7, 13, 2), float32], Tensor[(140), int64], Tensor[(1, 225), int64], Tensor[(140), float32]) */
}

def @func_4907(%var_4905: Tensor[(780), float32], %var_4906: Tensor[(225), int64]) -> (Tensor[(7, 13, 2), bool], Tensor[(320), float64], Tensor[(140), float32], Tensor[(780), float32], Tensor[(225), int64], Tensor[(140), float32]) {
  %641 = fn (%var_4887: Tensor[(780), float32], %var_4888: Tensor[(225), int64]) -> (Tensor[(7, 13, 2), bool], Tensor[(320), float64], Tensor[(140), float32], Tensor[(780), float32], Tensor[(225), int64], Tensor[(140), float32]) {
    %626 = @func_4053() /* ty=Tensor[(7, 13, 2), uint64] */;
    %627 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 13, 2), uint64] */, dtype="bool") /* ty=Tensor[(7, 13, 2), bool] */;
    %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
    %629 = cast(%626, dtype="bool") /* ty=Tensor[(7, 13, 2), bool] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %631 = cast(%var_4887, dtype="float32") /* ty=Tensor[(780), float32] */;
    %632 = cast(%var_4888, dtype="int64") /* ty=Tensor[(225), int64] */;
    %633 = cast(meta[relay.Constant][48] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %634 = reshape(%631, newshape=[780]) /* ty=Tensor[(780), float32] */;
    %635 = reshape(%632, newshape=[225]) /* ty=Tensor[(225), int64] */;
    %636 = reshape(%633, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %637 = @func_3484(%634, %635, %636) /* ty=(Tensor[(320), float64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(780), float32], Tensor[(225), int64], Tensor[(140), float32]) */;
    %638 = less_equal(%629, %630) /* ty=Tensor[(7, 13, 2), bool] */;
    %639 = @func_4671() /* ty=Tensor[(320), float64] */;
    %640 = %637.5;
    (%638, %639, %640, %var_4887, %var_4888, meta[relay.Constant][48] /* ty=Tensor[(140), float32] */)
  };
  %641(%var_4905, %var_4906) /* ty=(Tensor[(7, 13, 2), bool], Tensor[(320), float64], Tensor[(140), float32], Tensor[(780), float32], Tensor[(225), int64], Tensor[(140), float32]) */
}

def @func_2863() -> (Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780, 1), float32], Tensor[(7, 13, 2), uint64]) {
  %651 = fn () -> (Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780, 1), float32], Tensor[(7, 13, 2), uint64]) {
    %642 = @func_2813() /* ty=(Tensor[(320), float32],) */;
    %643 = cast(meta[relay.Constant][49] /* ty=Tensor[(780, 1), float32] */, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %644 = cast(meta[relay.Constant][49] /* ty=Tensor[(780, 1), float32] */, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %645 = reshape(%643, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
    %646 = reshape(%644, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
    %647 = %642.0;
    %648 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    %649 = @func_911(%645, %646) /* ty=Tensor[(13, 6, 10), bool] */;
    %650 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    (%647, %648, %649, meta[relay.Constant][49] /* ty=Tensor[(780, 1), float32] */, %650)
  };
  %651() /* ty=(Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780, 1), float32], Tensor[(7, 13, 2), uint64]) */
}

def @func_6302(%var_6300: Tensor[(1573), uint32], %var_6301: Tensor[(20), float64]) -> (Tensor[(7, 13, 2), uint64], Tensor[(1573), uint32], Tensor[(26), float64], Tensor[(20), float64], Tensor[(13, 2, 320), uint32]) {
  %669 = fn (%var_6286: Tensor[(1573), uint32], %var_6292: Tensor[(20), float64]) -> (Tensor[(7, 13, 2), uint64], Tensor[(1573), uint32], Tensor[(26), float64], Tensor[(20), float64], Tensor[(13, 2, 320), uint32]) {
    %652 = @func_4371() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) */;
    %653 = cast(%var_6292, dtype="float64") /* ty=Tensor[(20), float64] */;
    %654 = reshape(%653, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %655 = @func_5252(%654) /* ty=(Tensor[(320), float32], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(196, 2), uint8], Tensor[(1452), float32], Tensor[(35, 4), float32]) */;
    %656 = %655.0;
    %657 = cast(%var_6286, dtype="uint32") /* ty=Tensor[(1573), uint32] */;
    %658 = cast(%var_6286, dtype="uint32") /* ty=Tensor[(1573), uint32] */;
    %659 = cast(meta[relay.Constant][50] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
    %660 = reshape(%657, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), uint32] */;
    %661 = reshape(%658, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), uint32] */;
    %662 = reshape(%659, newshape=[26]) /* ty=Tensor[(26), float64] */;
    %663 = @func_1306(%660, %661, %662) /* ty=(Tensor[(11, 11, 13), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(13, 6, 10), bool], Tensor[(13, 2, 1), float64], Tensor[(26), float64], Tensor[(840), float64]) */;
    %664 = %663.4;
    %665 = cast(%656, dtype="uint32") /* ty=Tensor[(320), uint32] */;
    %666 = cast(%664, dtype="uint32") /* ty=Tensor[(13, 2, 1), uint32] */;
    %667 = %652.0;
    %668 = right_shift(%665, %666) /* ty=Tensor[(13, 2, 320), uint32] */;
    (%667, %var_6286, meta[relay.Constant][50] /* ty=Tensor[(26), float64] */, %var_6292, %668)
  };
  %669(%var_6300, %var_6301) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1573), uint32], Tensor[(26), float64], Tensor[(20), float64], Tensor[(13, 2, 320), uint32]) */
}

def @func_7530(%var_7509: Tensor[(11, 1), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(11, 1), float32], Tensor[(140), float32]) {
  %670 = @func_5748() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1, 225), int64], Tensor[(225), int64]) */;
  %671 = @func_5502() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(5, 13, 11), int64], Tensor[(65), uint64], Tensor[(1, 715), uint64]) */;
  %672 = cast(%var_7509, dtype="float32") /* ty=Tensor[(11, 1), float32] */;
  %673 = cast(meta[relay.Constant][51] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %674 = reshape(%672, newshape=[1, 11, 1]) /* ty=Tensor[(1, 11, 1), float32] */;
  %675 = reshape(%673, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %676 = @func_3947(%674, %675) /* ty=(Tensor[(780), float32], Tensor[(780), float32], Tensor[(140), float32], Tensor[(1, 11, 225), float64]) */;
  %677 = %670.0;
  %678 = %671.0;
  %679 = %676.1;
  (%677, %678, %679, %var_7509, meta[relay.Constant][51] /* ty=Tensor[(140), float32] */)
}

def @func_5389() -> Tensor[(7, 13, 2), uint64] {
  %681 = fn () -> Tensor[(7, 13, 2), uint64] {
    %680 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %680.1
  };
  %681() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_4043(%var_4036: Tensor[(10, 4, 5), float32]) -> (Tensor[(10, 4, 5), bool],) {
  %682 = cast(-1.43946f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %683 = cast(%var_4036, dtype="bool") /* ty=Tensor[(10, 4, 5), bool] */;
  %684 = less(%682, %683) /* ty=Tensor[(10, 4, 5), bool] */;
  (%684,)
}

def @func_5069() -> (Tensor[(7, 13, 2), uint64],) {
  %685 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%685,)
}

def @func_6127() -> (Tensor[(7, 13, 2), uint64],) {
  %687 = fn () -> (Tensor[(7, 13, 2), uint64],) {
    %686 = @func_5525() /* ty=Tensor[(7, 13, 2), uint64] */;
    (%686,)
  };
  %687() /* ty=(Tensor[(7, 13, 2), uint64],) */
}

def @func_2505(%var_2502: Tensor[(1452), float32], %var_2503: Tensor[(320), float32], %var_2504: Tensor[(26), float64]) -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(840, 1), float64], Tensor[(320), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float64]) {
  %704 = fn (%var_2468: Tensor[(1452), float32], %var_2470: Tensor[(320), float32], %var_2471: Tensor[(26), float64]) -> (Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(840, 1), float64], Tensor[(320), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float64]) {
    %688 = cast(3.15414f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %689 = cast(%var_2468, dtype="float32") /* ty=Tensor[(1452), float32] */;
    %690 = cast(meta[relay.Constant][52] /* ty=Tensor[(840, 1), float64] */, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
    %691 = cast(%var_2470, dtype="float32") /* ty=Tensor[(320), float32] */;
    %692 = cast(%var_2471, dtype="float64") /* ty=Tensor[(26), float64] */;
    %693 = reshape(%688, newshape=[]) /* ty=float32 */;
    %694 = reshape(%689, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float32] */;
    %695 = reshape(%690, newshape=[840]) /* ty=Tensor[(840), float64] */;
    %696 = reshape(%691, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %697 = reshape(%692, newshape=[13, 2]) /* ty=Tensor[(13, 2), float64] */;
    %698 = @func_782(%693, %694, %695, %696, %697) /* ty=(Tensor[(12, 11, 11), float32], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64], Tensor[(392), float64]) */;
    %699 = cast(%var_2468, dtype="float64") /* ty=Tensor[(1452), float64] */;
    %700 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    %701 = %698.1;
    %702 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
    %703 = cosh(%699) /* ty=Tensor[(1452), float64] */;
    (%700, %701, 3.15414f /* ty=float32 */, meta[relay.Constant][52] /* ty=Tensor[(840, 1), float64] */, %var_2470, %var_2471, %702, %703)
  };
  %704(%var_2502, %var_2503, %var_2504) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(840, 1), float64], Tensor[(320), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float64]) */
}

def @func_5503() -> (Tensor[(7, 13, 2), uint64], Tensor[(5, 13, 11), int64], Tensor[(65), uint64], Tensor[(1, 715), uint64]) {
  %713 = fn () -> (Tensor[(7, 13, 2), uint64], Tensor[(5, 13, 11), int64], Tensor[(65), uint64], Tensor[(1, 715), uint64]) {
    %705 = @func_3991() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */;
    %706 = cast(meta[relay.Constant][53] /* ty=Tensor[(65), uint64] */, dtype="uint64") /* ty=Tensor[(65), uint64] */;
    %707 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 715), uint64] */, dtype="uint64") /* ty=Tensor[(1, 715), uint64] */;
    %708 = reshape(%706, newshape=[5, 13, 1]) /* ty=Tensor[(5, 13, 1), uint64] */;
    %709 = reshape(%707, newshape=[5, 13, 11]) /* ty=Tensor[(5, 13, 11), uint64] */;
    %710 = @func_3603(%708, %709) /* ty=(Tensor[(5, 13, 11), int64],) */;
    %711 = %705.0;
    %712 = %710.0;
    (%711, %712, meta[relay.Constant][53] /* ty=Tensor[(65), uint64] */, meta[relay.Constant][54] /* ty=Tensor[(1, 715), uint64] */)
  };
  %713() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(5, 13, 11), int64], Tensor[(65), uint64], Tensor[(1, 715), uint64]) */
}

def @func_2802(%var_2784: Tensor[(52), float64], %var_2790: Tensor[(780), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64], Tensor[(13, 6, 10), bool], float64, Tensor[(224), float64], Tensor[(780), float32], Tensor[(320), float32]) {
  %714 = cast(%var_2784, dtype="float64") /* ty=Tensor[(52), float64] */;
  %715 = reshape(%714, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %716 = cast(7.40485f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %717 = cast(meta[relay.Constant][55] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %718 = cast(%var_2790, dtype="float32") /* ty=Tensor[(780), float32] */;
  %719 = cast(meta[relay.Constant][56] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %720 = reshape(%716, newshape=[]) /* ty=float64 */;
  %721 = reshape(%717, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float64] */;
  %722 = reshape(%718, newshape=[780]) /* ty=Tensor[(780), float32] */;
  %723 = reshape(%719, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %724 = @func_2281(%720, %721, %722, %723) /* ty=(Tensor[(16, 1, 14), float64], Tensor[(16, 1, 14), float64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) */;
  %725 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %726 = @func_1957(%715) /* ty=Tensor[(1, 4, 13), float64] */;
  %727 = %724.2;
  (%725, %726, %var_2784, %727, 7.40485f64 /* ty=float64 */, meta[relay.Constant][55] /* ty=Tensor[(224), float64] */, %var_2790, meta[relay.Constant][56] /* ty=Tensor[(320), float32] */)
}

def @func_6148() -> (Tensor[(320), float32], Tensor[(1, 26), float64]) {
  %732 = fn () -> (Tensor[(320), float32], Tensor[(1, 26), float64]) {
    %728 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %729 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %730 = %728.3;
    %731 = %729.4;
    (%730, %731)
  };
  %732() /* ty=(Tensor[(320), float32], Tensor[(1, 26), float64]) */
}

def @func_269(%var_250: Tensor[(7, 8, 15), float64], %var_260: Tensor[(320), float32]) -> (Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) {
  %733 = cast(%var_250, dtype="float64") /* ty=Tensor[(7, 8, 15), float64] */;
  %734 = cast(%var_260, dtype="float32") /* ty=Tensor[(320), float32] */;
  %735 = cast(%var_260, dtype="float32") /* ty=Tensor[(320), float32] */;
  %736 = reshape(%734, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %737 = reshape(%735, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %738 = @func_91(%736, %737) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) */;
  %739 = log2(%733) /* ty=Tensor[(7, 8, 15), float64] */;
  %740 = %738.1;
  (%739, %740, %var_260)
}

def @func_6519() -> (Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8]) {
  @func_6517() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8]) */
}

def @func_3606(%var_3604: Tensor[(5, 13, 1), uint64], %var_3605: Tensor[(5, 13, 11), uint64]) -> (Tensor[(5, 13, 11), int64],) {
  %749 = fn (%var_3578: Tensor[(5, 13, 1), uint64], %var_3579: Tensor[(5, 13, 11), uint64]) -> (Tensor[(5, 13, 11), int64],) {
    %741 = cast(%var_3578, dtype="uint64") /* ty=Tensor[(5, 13, 1), uint64] */;
    %742 = cast(%var_3579, dtype="uint64") /* ty=Tensor[(5, 13, 11), uint64] */;
    %743 = bitwise_or(%741, %742) /* ty=Tensor[(5, 13, 11), uint64] */;
    %744 = cast(%743, dtype="int64") /* ty=Tensor[(5, 13, 11), int64] */;
    %745 = shape_of(%var_3579, dtype="int32") /* ty=Tensor[(3), int32] */;
    %746 = cast(%var_3579, dtype="int64") /* ty=Tensor[(5, 13, 11), int64] */;
    %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %748 = right_shift(%746, %747) /* ty=Tensor[(5, 13, 11), int64] */;
    (%748,)
  };
  %749(%var_3604, %var_3605) /* ty=(Tensor[(5, 13, 11), int64],) */
}

def @func_6660(%var_6658: Tensor[(6, 10, 4), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(6, 10, 4), uint16], Tensor[(7, 13, 2), uint64]) {
  @func_6657(%var_6658) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(6, 10, 4), uint16], Tensor[(7, 13, 2), uint64]) */
}

def @func_6541() -> (Tensor[(7, 13, 2), uint64],) {
  %750 = @func_4739() /* ty=Tensor[(7, 13, 2), uint64] */;
  (%750,)
}

def @func_4484(%var_4480: Tensor[(2, 1, 10), float64], %var_4481: Tensor[(140), float32], %var_4482: Tensor[(392), uint8], %var_4483: Tensor[(1452), float32]) -> (Tensor[(320), float32], Tensor[(140), float32], Tensor[(5, 8, 8), uint64], Tensor[(2912), float32], Tensor[(2, 14, 14), uint8], Tensor[(392), uint8], Tensor[(780), float32], Tensor[(11), float32], Tensor[(2, 1, 10), float32], float64, Tensor[(52), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(1, 26), float64], Tensor[(2, ?, 10), bool], Tensor[(1452), float32], Tensor[(7, 13, 2), uint64]) {
  %808 = fn (%var_4399: Tensor[(2, 1, 10), float64], %var_4411: Tensor[(140), float32], %var_4423: Tensor[(392), uint8], %var_4449: Tensor[(1452), float32]) -> (Tensor[(320), float32], Tensor[(140), float32], Tensor[(5, 8, 8), uint64], Tensor[(2912), float32], Tensor[(2, 14, 14), uint8], Tensor[(392), uint8], Tensor[(780), float32], Tensor[(11), float32], Tensor[(2, 1, 10), float32], float64, Tensor[(52), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(1, 26), float64], Tensor[(2, ?, 10), bool], Tensor[(1452), float32], Tensor[(7, 13, 2), uint64]) {
    %751 = cast(%var_4411, dtype="float32") /* ty=Tensor[(140), float32] */;
    %752 = reshape(%751, newshape=[1, 14, 10]) /* ty=Tensor[(1, 14, 10), float32] */;
    %753 = @func_1489(%752) /* ty=(Tensor[(1, 14, 10), float32], Tensor[(320), float32], Tensor[(2912), float32], Tensor[(320), float32]) */;
    %754 = cast(meta[relay.Constant][57] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %755 = %753.1;
    %756 = cast(%755, dtype="float32") /* ty=Tensor[(320), float32] */;
    %757 = reshape(%754, newshape=[16, 13, 14]) /* ty=Tensor[(16, 13, 14), float32] */;
    %758 = reshape(%756, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %759 = @func_1345(%757, %758) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */;
    %760 = cast(%var_4423, dtype="uint8") /* ty=Tensor[(392), uint8] */;
    %761 = cast(%var_4423, dtype="uint8") /* ty=Tensor[(392), uint8] */;
    %762 = reshape(%760, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
    %763 = reshape(%761, newshape=[2, 14, 14]) /* ty=Tensor[(2, 14, 14), uint8] */;
    %764 = @func_373(%762, %763) /* ty=(Tensor[(2, 14, 14), uint8], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float64], Tensor[(2, 14, 14), int32]) */;
    %765 = cast(meta[relay.Constant][58] /* ty=Tensor[(11), float32] */, dtype="float32") /* ty=Tensor[(11), float32] */;
    %766 = cast(%var_4411, dtype="float32") /* ty=Tensor[(140), float32] */;
    %767 = reshape(%765, newshape=[1, 11, 1]) /* ty=Tensor[(1, 11, 1), float32] */;
    %768 = reshape(%766, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %769 = @func_3947(%767, %768) /* ty=(Tensor[(780), float32], Tensor[(780), float32], Tensor[(140), float32], Tensor[(1, 11, 225), float64]) */;
    %770 = cast(%var_4399, dtype="float64") /* ty=Tensor[(2, 1, 10), float64] */;
    %771 = atan(%770) /* ty=Tensor[(2, 1, 10), float64] */;
    %772 = cast(%771, dtype="float32") /* ty=Tensor[(2, 1, 10), float32] */;
    %773 = cast(meta[relay.Constant][59] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %774 = %769.0;
    %775 = cast(%774, dtype="float32") /* ty=Tensor[(780), float32] */;
    %776 = reshape(%773, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %777 = reshape(%775, newshape=[780]) /* ty=Tensor[(780), float32] */;
    %778 = @func_2802(%776, %777) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(1, 4, 13), float64], Tensor[(52), float64], Tensor[(13, 6, 10), bool], float64, Tensor[(224), float64], Tensor[(780), float32], Tensor[(320), float32]) */;
    %779 = cast(%var_4449, dtype="float32") /* ty=Tensor[(1452), float32] */;
    %780 = cast(%755, dtype="float32") /* ty=Tensor[(320), float32] */;
    %781 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 26), float64] */, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
    %782 = reshape(%779, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
    %783 = reshape(%780, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %784 = reshape(%781, newshape=[26]) /* ty=Tensor[(26), float64] */;
    %785 = @func_2501(%782, %783, %784) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(840, 1), float64], Tensor[(320), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float64]) */;
    %786 = cast(%771, dtype="float64") /* ty=Tensor[(2, 1, 10), float64] */;
    %787 = atanh(%786) /* ty=Tensor[(2, 1, 10), float64] */;
    %788 = cast(%771, dtype="bool") /* ty=Tensor[(2, 1, 10), bool] */;
    %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
    %790 = cast(%787, dtype="bool") /* ty=Tensor[(2, 1, 10), bool] */;
    %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %792 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %793 = cast(%var_4449, dtype="float32") /* ty=Tensor[(1452), float32] */;
    %794 = %759.0;
    %795 = cast(%794, dtype="float32") /* ty=Tensor[(5, 8, 8), float32] */;
    %796 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 26), float64] */, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
    %797 = reshape(%793, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
    %798 = reshape(%795, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %799 = reshape(%796, newshape=[26]) /* ty=Tensor[(26), float64] */;
    %800 = @func_2501(%797, %798, %799) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(840, 1), float64], Tensor[(320), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float64]) */;
    %801 = %764.0;
    %802 = exp(%772) /* ty=Tensor[(2, 1, 10), float32] */;
    %803 = %778.4;
    %804 = %785.4;
    %805 = less(%790, %791) /* ty=Tensor[(2, ?, 10), bool] */;
    %806 = %792.2;
    %807 = %800.6;
    (%755, %var_4411, %794, meta[relay.Constant][57] /* ty=Tensor[(2912), float32] */, %801, %var_4423, %774, meta[relay.Constant][58] /* ty=Tensor[(11), float32] */, %802, %803, meta[relay.Constant][59] /* ty=Tensor[(52), float64] */, %804, %var_4449, meta[relay.Constant][60] /* ty=Tensor[(1, 26), float64] */, %805, %806, %807)
  };
  %808(%var_4480, %var_4481, %var_4482, %var_4483) /* ty=(Tensor[(320), float32], Tensor[(140), float32], Tensor[(5, 8, 8), uint64], Tensor[(2912), float32], Tensor[(2, 14, 14), uint8], Tensor[(392), uint8], Tensor[(780), float32], Tensor[(11), float32], Tensor[(2, 1, 10), float32], float64, Tensor[(52), float64], Tensor[(320), float32], Tensor[(1452), float32], Tensor[(1, 26), float64], Tensor[(2, ?, 10), bool], Tensor[(1452), float32], Tensor[(7, 13, 2), uint64]) */
}

def @func_6716() -> (Tensor[(7, 13, 2), float64], Tensor[(7, 13, 2), float64]) {
  %809 = @func_4125() /* ty=Tensor[(7, 13, 2), uint64] */;
  %810 = cast(%809, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %811 = tan(%810) /* ty=Tensor[(7, 13, 2), float64] */;
  %812 = cast(%809, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(%811, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %816 = cast(%809, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %817 = floor_mod(%814, %815) /* ty=Tensor[(7, 13, 2), float64] */;
  %818 = erf(%816) /* ty=Tensor[(7, 13, 2), float64] */;
  (%817, %818)
}

def @func_7155() -> (Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) {
  %824 = fn () -> (Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) {
    %819 = @func_6147() /* ty=(Tensor[(320), float32], Tensor[(1, 26), float64]) */;
    %820 = @func_3647() /* ty=(Tensor[(7, 13, 2), uint64],) */;
    %821 = %819.0;
    %822 = %820.0;
    %823 = @func_5537() /* ty=Tensor[(7, 13, 2), uint64] */;
    (%821, %822, %823)
  };
  %824() /* ty=(Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) */
}

def @func_6114(%var_6076: Tensor[(320), float32]) -> (Tensor[(392), uint8], Tensor[(320), uint64]) {
  %825 = @func_3991() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */;
  %826 = @func_5049() /* ty=Tensor[(320), float32] */;
  %827 = cast(%var_6076, dtype="int32") /* ty=Tensor[(320), int32] */;
  %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(1), int32] */;
  %829 = cast(%826, dtype="int32") /* ty=Tensor[(320), int32] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?), int32] */;
  %831 = bitwise_and(%829, %830) /* ty=Tensor[(320), int32] */;
  %832 = cast(%var_6076, dtype="uint64") /* ty=Tensor[(320), uint64] */;
  %833 = shape_of(%831, dtype="int32") /* ty=Tensor[(1), int32] */;
  %834 = cast(%831, dtype="uint64") /* ty=Tensor[(320), uint64] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %836 = %825.2;
  %837 = add(%834, %835) /* ty=Tensor[(320), uint64] */;
  (%836, %837)
}

def @func_2461() -> Tensor[(7, 13, 2), uint64] {
  %838 = cast(meta[relay.Constant][62] /* ty=Tensor[(7, 13, 2), uint64] */, dtype="uint64") /* ty=Tensor[(7, 13, 2), uint64] */;
  %839 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(7, 13, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(meta[relay.Constant][61] /* ty=Tensor[(7, 13, 2), uint64] */, dtype="uint64") /* ty=Tensor[(7, 13, 2), uint64] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%840, %841) /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_7128(%var_7127: Tensor[(50, 4), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(50, 4), float32], Tensor[(10, 4, 5), int64], Tensor[(7, 13, 2), float64]) {
  %854 = fn (%var_7089: Tensor[(50, 4), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(50, 4), float32], Tensor[(10, 4, 5), int64], Tensor[(7, 13, 2), float64]) {
    %842 = cast(%var_7089, dtype="float32") /* ty=Tensor[(50, 4), float32] */;
    %843 = reshape(%842, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float32] */;
    %844 = @func_4043(%843) /* ty=(Tensor[(10, 4, 5), bool],) */;
    %845 = %844.0;
    %846 = cast(meta[relay.Constant][63] /* ty=Tensor[(10, 4, 5), bool] */, dtype="int64") /* ty=Tensor[(10, 4, 5), int64] */;
    %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
    %848 = cast(%845, dtype="int64") /* ty=Tensor[(10, 4, 5), int64] */;
    %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %850 = @func_6716() /* ty=(Tensor[(7, 13, 2), float64], Tensor[(7, 13, 2), float64]) */;
    %851 = @func_4125() /* ty=Tensor[(7, 13, 2), uint64] */;
    %852 = subtract(%848, %849) /* ty=Tensor[(10, 4, 5), int64] */;
    %853 = %850.0;
    (%851, %var_7089, %852, %853)
  };
  %854(%var_7127) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(50, 4), float32], Tensor[(10, 4, 5), int64], Tensor[(7, 13, 2), float64]) */
}

def @func_3199(%var_3176: Tensor[(780), float32], %var_3185: Tensor[(225), int64], %var_3186: Tensor[(140, 1), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(7, 13, 2), float64], Tensor[(140), int64], Tensor[(225), int64], Tensor[(140, 1), float32]) {
  %855 = cast(%var_3176, dtype="float32") /* ty=Tensor[(780), float32] */;
  %856 = cast(%var_3176, dtype="float32") /* ty=Tensor[(780), float32] */;
  %857 = reshape(%855, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %858 = reshape(%856, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float32] */;
  %859 = @func_2461() /* ty=Tensor[(7, 13, 2), uint64] */;
  %860 = cast(%859, dtype="float64") /* ty=Tensor[(7, 13, 2), float64] */;
  %861 = reshape(%860, newshape=[7, 13, 2]) /* ty=Tensor[(7, 13, 2), float64] */;
  %862 = @func_2753(%861) /* ty=(Tensor[(7, 13, 2), float64],) */;
  %863 = cast(%var_3185, dtype="int64") /* ty=Tensor[(225), int64] */;
  %864 = cast(%var_3185, dtype="int64") /* ty=Tensor[(225), int64] */;
  %865 = cast(%var_3186, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %866 = reshape(%863, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %867 = reshape(%864, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %868 = reshape(%865, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %869 = @func_3022(%866, %867, %868) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(320), float32], Tensor[(140), int64]) */;
  %870 = @func_911(%857, %858) /* ty=Tensor[(13, 6, 10), bool] */;
  %871 = %862.0;
  %872 = %869.2;
  (%859, %870, %var_3176, %871, %872, %var_3185, %var_3186)
}

def @func_7615() -> (Tensor[(7, 13, 2), uint64],) {
  @func_7613() /* ty=(Tensor[(7, 13, 2), uint64],) */
}

def @func_7064(%var_7050: Tensor[(1452), float32]) -> (Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(840), float64], Tensor[(12, 5, 13), uint64], Tensor[(1452), float32], Tensor[(33), uint16], Tensor[(26), float32]) {
  %873 = cast(meta[relay.Constant][64] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %874 = @func_4332() /* ty=Tensor[(320), float32] */;
  %875 = cast(%874, dtype="float32") /* ty=Tensor[(320), float32] */;
  %876 = reshape(%873, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %877 = reshape(%875, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %878 = @func_269(%876, %877) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %879 = %878.0;
  %880 = cast(%879, dtype="float64") /* ty=Tensor[(7, 8, 15), float64] */;
  %881 = cast(%var_7050, dtype="float32") /* ty=Tensor[(1452), float32] */;
  %882 = cast(meta[relay.Constant][65] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %883 = reshape(%880, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %884 = reshape(%881, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %885 = reshape(%882, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %886 = @func_4206(%883, %884, %885) /* ty=(Tensor[(320), float64], Tensor[(12, 5, 13), uint64], Tensor[(294), float32], Tensor[(840), float64], Tensor[(780), float32], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32]) */;
  %887 = cast(meta[relay.Constant][66] /* ty=Tensor[(33), float32] */, dtype="float32") /* ty=Tensor[(33), float32] */;
  %888 = reshape(%887, newshape=[3, 11, 1]) /* ty=Tensor[(3, 11, 1), float32] */;
  %889 = @func_5476(%888) /* ty=Tensor[(3, 11, 1), float32] */;
  %890 = cast(%889, dtype="uint16") /* ty=Tensor[(3, 11, 1), uint16] */;
  %891 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(33), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %892 = cast(meta[relay.Constant][66] /* ty=Tensor[(33), float32] */, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %894 = cast(meta[relay.Constant][65] /* ty=Tensor[(26), float64] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %895 = %886.1;
  %896 = logical_xor(%892, %893) /* ty=Tensor[(33), uint16] */;
  %897 = sigmoid(%894) /* ty=Tensor[(26), float32] */;
  (%874, %879, meta[relay.Constant][64] /* ty=Tensor[(840), float64] */, %895, %var_7050, %896, %897)
}

def @func_5051() -> Tensor[(320), float32] {
  @func_5049() /* ty=Tensor[(320), float32] */
}

def @func_5801() -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint8]) {
  @func_5799() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint8]) */
}

def @func_1349(%var_1347: Tensor[(16, 13, 14), float32], %var_1348: Tensor[(320), float32]) -> (Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) {
  @func_1345(%var_1347, %var_1348) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(320), float32], Tensor[(16, 13, 14), uint32]) */
}

def @func_5539() -> Tensor[(7, 13, 2), uint64] {
  @func_5537() /* ty=Tensor[(7, 13, 2), uint64] */
}

def @func_7458(%var_7454: Tensor[(840), float64], %var_7455: Tensor[(1452), float32], %var_7456: Tensor[(26), float64], %var_7457: Tensor[(140), float32]) -> (Tensor[(13, 6, 10), uint8], Tensor[(1452), float32], Tensor[(840), float64], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), float32], Tensor[(320), float32], Tensor[(225), int64], Tensor[(140), float32]) {
  %922 = fn (%var_7417: Tensor[(840), float64], %var_7418: Tensor[(1452), float32], %var_7419: Tensor[(26), float64], %var_7443: Tensor[(140), float32]) -> (Tensor[(13, 6, 10), uint8], Tensor[(1452), float32], Tensor[(840), float64], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), float32], Tensor[(320), float32], Tensor[(225), int64], Tensor[(140), float32]) {
    %898 = @func_6517() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8]) */;
    %899 = cast(%var_7417, dtype="float64") /* ty=Tensor[(840), float64] */;
    %900 = cast(%var_7418, dtype="float32") /* ty=Tensor[(1452), float32] */;
    %901 = cast(%var_7419, dtype="float64") /* ty=Tensor[(26), float64] */;
    %902 = reshape(%899, newshape=[840]) /* ty=Tensor[(840), float64] */;
    %903 = reshape(%900, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
    %904 = reshape(%901, newshape=[26]) /* ty=Tensor[(26), float64] */;
    %905 = @func_4206(%902, %903, %904) /* ty=(Tensor[(320), float64], Tensor[(12, 5, 13), uint64], Tensor[(294), float32], Tensor[(840), float64], Tensor[(780), float32], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 14, 3), float32]) */;
    %906 = @func_7154() /* ty=(Tensor[(320), float32], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64]) */;
    %907 = @func_6126() /* ty=(Tensor[(7, 13, 2), uint64],) */;
    %908 = %907.0;
    %909 = cast(%908, dtype="float32") /* ty=Tensor[(7, 13, 2), float32] */;
    %910 = cast(meta[relay.Constant][67] /* ty=Tensor[(225), int64] */, dtype="int64") /* ty=Tensor[(225), int64] */;
    %911 = cast(meta[relay.Constant][67] /* ty=Tensor[(225), int64] */, dtype="int64") /* ty=Tensor[(225), int64] */;
    %912 = cast(%var_7443, dtype="float32") /* ty=Tensor[(140), float32] */;
    %913 = reshape(%910, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
    %914 = reshape(%911, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
    %915 = reshape(%912, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %916 = @func_3022(%913, %914, %915) /* ty=(Tensor[(3, 5, 15), int64], Tensor[(320), float32], Tensor[(140), int64]) */;
    %917 = %898.1;
    %918 = %905.5;
    %919 = %906.1;
    %920 = cosh(%909) /* ty=Tensor[(7, 13, 2), float32] */;
    %921 = %916.1;
    (%917, %918, %var_7417, %var_7418, %var_7419, %919, %920, %921, meta[relay.Constant][67] /* ty=Tensor[(225), int64] */, %var_7443)
  };
  %922(%var_7454, %var_7455, %var_7456, %var_7457) /* ty=(Tensor[(13, 6, 10), uint8], Tensor[(1452), float32], Tensor[(840), float64], Tensor[(1452), float32], Tensor[(26), float64], Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), float32], Tensor[(320), float32], Tensor[(225), int64], Tensor[(140), float32]) */
}

def @func_3204(%var_3201: Tensor[(780), float32], %var_3202: Tensor[(225), int64], %var_3203: Tensor[(140, 1), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(7, 13, 2), float64], Tensor[(140), int64], Tensor[(225), int64], Tensor[(140, 1), float32]) {
  @func_3199(%var_3201, %var_3202, %var_3203) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), bool], Tensor[(780), float32], Tensor[(7, 13, 2), float64], Tensor[(140), int64], Tensor[(225), int64], Tensor[(140, 1), float32]) */
}

def @func_6905() -> Tensor[(1, 26), float64] {
  %923 = @func_6147() /* ty=(Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %923.1
}

def @func_7533(%var_7531: Tensor[(11, 1), float32]) -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(11, 1), float32], Tensor[(140), float32]) {
  @func_7530(%var_7531) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(780), float32], Tensor[(11, 1), float32], Tensor[(140), float32]) */
}

def @func_6244(%var_6241: Tensor[(1, 1452), float32], %var_6242: Tensor[(26), float64]) -> (Tensor[(320), bool], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(1452), float32], Tensor[(1, 1452), float32], Tensor[(26), float64]) {
  %924 = @func_5462() /* ty=(Tensor[(320), float32], Tensor[(320), float64], Tensor[(320), bool]) */;
  %925 = cast(meta[relay.Constant][68] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %926 = reshape(%925, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %927 = @func_5252(%926) /* ty=(Tensor[(320), float32], Tensor[(2912), float32], Tensor[(20), float64], Tensor[(196, 2), uint8], Tensor[(1452), float32], Tensor[(35, 4), float32]) */;
  %928 = cast(%var_6241, dtype="float32") /* ty=Tensor[(1, 1452), float32] */;
  %929 = %924.2;
  %930 = cast(%929, dtype="float32") /* ty=Tensor[(320), float32] */;
  %931 = cast(%var_6242, dtype="float64") /* ty=Tensor[(26), float64] */;
  %932 = reshape(%928, newshape=[1452]) /* ty=Tensor[(1452), float32] */;
  %933 = reshape(%930, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %934 = reshape(%931, newshape=[13, 2]) /* ty=Tensor[(13, 2), float64] */;
  %935 = @func_5701(%932, %933, %934) /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(320), float32], float32, Tensor[(1452), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(13, 2), float64]) */;
  %936 = %927.1;
  %937 = %935.3;
  (%929, %936, meta[relay.Constant][68] /* ty=Tensor[(20), float64] */, %937, %var_6241, %var_6242)
}

def @func_5799() -> (Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint8]) {
  %938 = @func_3991() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(13, 6, 10), uint8], Tensor[(392), uint8], Tensor[(26, 1), float64]) */;
  %939 = %938.0;
  %940 = @func_4125() /* ty=Tensor[(7, 13, 2), uint64] */;
  %941 = cast(%940, dtype="uint8") /* ty=Tensor[(7, 13, 2), uint8] */;
  %942 = shape_of(%939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%939, dtype="uint8") /* ty=Tensor[(7, 13, 2), uint8] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %945 = @func_3423() /* ty=Tensor[(7, 13, 2), uint64] */;
  %946 = right_shift(%943, %944) /* ty=Tensor[(7, 13, 2), uint8] */;
  (%945, %946)
}

def @func_4334() -> Tensor[(320), float32] {
  @func_4332() /* ty=Tensor[(320), float32] */
}

def @func_7136() -> Tensor[(320), float32] {
  @func_7134() /* ty=Tensor[(320), float32] */
}

def @func_5537() -> Tensor[(7, 13, 2), uint64] {
  %947 = @func_2714() /* ty=(Tensor[(7, 13, 2), uint64], Tensor[(7, 13, 2), uint64], Tensor[(1452), float32], Tensor[(320), float32], Tensor[(1, 26), float64]) */;
  %947.0
}

def @func_5670() -> (Tensor[(7, 13, 2), uint64],) {
  %949 = fn () -> (Tensor[(7, 13, 2), uint64],) {
    %948 = @func_5388() /* ty=Tensor[(7, 13, 2), uint64] */;
    (%948,)
  };
  %949() /* ty=(Tensor[(7, 13, 2), uint64],) */
}

def @func_373(%var_292: Tensor[(2, 14, 14), uint8], %var_293: Tensor[(2, 14, 14), uint8]) -> (Tensor[(2, 14, 14), uint8], Tensor[(320), float32], Tensor[(840), float64], Tensor[(320), float32], Tensor[(320), float32], Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float64], Tensor[(2, 14, 14), int32]) {
  %950 = cast(%var_293, dtype="uint8") /* ty=Tensor[(2, 14, 14), uint8] */;
  %951 = shape_of(%var_292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %952 = cast(%var_292, dtype="uint8") /* ty=Tensor[(2, 14, 14), uint8] */;
  %953 = dyn.reshape(%950, %951, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %954 = cast(meta[relay.Constant][69] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %955 = cast(meta[relay.Constant][70] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %956 = reshape(%954, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %957 = reshape(%955, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %958 = @func_269(%956, %957) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %959 = cast(meta[relay.Constant][69] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %960 = cast(meta[relay.Constant][70] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %961 = reshape(%959, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %962 = reshape(%960, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %963 = @func_269(%961, %962) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %964 = cast(meta[relay.Constant][69] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %965 = %958.2;
  %966 = cast(%965, dtype="float32") /* ty=Tensor[(320), float32] */;
  %967 = reshape(%964, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float64] */;
  %968 = reshape(%966, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %969 = @func_269(%967, %968) /* ty=(Tensor[(7, 8, 15), float64], Tensor[(5, 8, 8), float64], Tensor[(320), float32]) */;
  %970 = %963.2;
  %971 = cast(%970, dtype="float32") /* ty=Tensor[(320), float32] */;
  %972 = cast(%965, dtype="float32") /* ty=Tensor[(320), float32] */;
  %973 = reshape(%971, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %974 = reshape(%972, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %975 = @func_91(%973, %974) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) */;
  %976 = cast(%965, dtype="float32") /* ty=Tensor[(320), float32] */;
  %977 = cast(meta[relay.Constant][70] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %978 = reshape(%976, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %979 = reshape(%977, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %980 = @func_91(%978, %979) /* ty=(Tensor[(5, 8, 8), uint64], Tensor[(5, 8, 8), float64], Tensor[(5, 8, 8), float32]) */;
  %981 = cast(%var_293, dtype="int32") /* ty=Tensor[(2, 14, 14), int32] */;
  %982 = shape_of(%var_292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %983 = cast(%var_292, dtype="int32") /* ty=Tensor[(2, 14, 14), int32] */;
  %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %985 = minimum(%952, %953) /* ty=Tensor[(2, 14, 14), uint8] */;
  %986 = %969.0;
  %987 = %975.1;
  %988 = %980.1;
  %989 = add(%983, %984) /* ty=Tensor[(2, 14, 14), int32] */;
  (%985, %965, meta[relay.Constant][69] /* ty=Tensor[(840), float64] */, meta[relay.Constant][70] /* ty=Tensor[(320), float32] */, %970, %986, %987, %988, %989)
}

def @func_7613() -> (Tensor[(7, 13, 2), uint64],) {
  %990 = @func_6541() /* ty=(Tensor[(7, 13, 2), uint64],) */;
  %991 = %990.0;
  (%991,)
}

def @func_6764(%var_6762: Tensor[(52), float64], %var_6763: Tensor[(60), uint64]) -> (Tensor[(320), float64], Tensor[(?, 4, 13), bool], Tensor[(12, 5, 13), uint64], Tensor[(60), uint64], Tensor[(780), uint64]) {
  %1008 = fn (%var_6729: Tensor[(52), float64], %var_6758: Tensor[(60), uint64]) -> (Tensor[(320), float64], Tensor[(?, 4, 13), bool], Tensor[(12, 5, 13), uint64], Tensor[(60), uint64], Tensor[(780), uint64]) {
    %992 = @func_6389() /* ty=(Tensor[(320), float64],) */;
    %993 = cast(%var_6729, dtype="float64") /* ty=Tensor[(52), float64] */;
    %994 = reshape(%993, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
    %995 = @func_1957(%994) /* ty=Tensor[(1, 4, 13), float64] */;
    %996 = cast(%var_6729, dtype="bool") /* ty=Tensor[(52), bool] */;
    %997 = shape_of(%995, dtype="int32") /* ty=Tensor[(3), int32] */;
    %998 = cast(%995, dtype="bool") /* ty=Tensor[(1, 4, 13), bool] */;
    %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1000 = cast(%var_6758, dtype="uint64") /* ty=Tensor[(60), uint64] */;
    %1001 = cast(meta[relay.Constant][71] /* ty=Tensor[(780), uint64] */, dtype="uint64") /* ty=Tensor[(780), uint64] */;
    %1002 = reshape(%1000, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), uint64] */;
    %1003 = reshape(%1001, newshape=[12, 5, 13]) /* ty=Tensor[(12, 5, 13), uint64] */;
    %1004 = @func_2137(%1002, %1003) /* ty=(Tensor[(12, 5, 13), uint64],) */;
    %1005 = %992.0;
    %1006 = greater_equal(%998, %999) /* ty=Tensor[(?, 4, 13), bool] */;
    %1007 = %1004.0;
    (%1005, %1006, %1007, %var_6758, meta[relay.Constant][71] /* ty=Tensor[(780), uint64] */)
  };
  %1008(%var_6762, %var_6763) /* ty=(Tensor[(320), float64], Tensor[(?, 4, 13), bool], Tensor[(12, 5, 13), uint64], Tensor[(60), uint64], Tensor[(780), uint64]) */
}

def @main() -> (Tensor[(320), float32],) {
  %1009 = @func_5463() /* ty=(Tensor[(320), float32], Tensor[(320), float64], Tensor[(320), bool]) */;
  %1010 = %1009.2;
  %1011 = cast(%1010, dtype="float32") /* ty=Tensor[(320), float32] */;
  %1012 = acosh(%1011) /* ty=Tensor[(320), float32] */;
  (%1012,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen88/build/output.py", line 2286, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:48:50] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

