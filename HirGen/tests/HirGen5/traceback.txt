==========mod==========
#[version = "0.0.5"]
def @func_1692() -> (Tensor[(5, 11, 6), float64],) {
  %0 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %1 = %0.2;
  (%1,)
}

def @func_2318() -> (Tensor[(13, 7, 11), bool],) {
  %2 = @func_1599() /* ty=(Tensor[(3, 16, 2), float64], Tensor[(13, 7, 11), bool]) */;
  %3 = %2.1;
  (%3,)
}

def @func_2033() -> Tensor[(13, 7, 11), float32] {
  %4 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %4.0
}

def @func_2692() -> (Tensor[(13, 7, 11), float32],) {
  %5 = @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %6 = %5.0;
  (%6,)
}

def @func_6369() -> (Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(72), float32]) {
  %7 = @func_4203() /* ty=(Tensor[(5, 11, 6), float32],) */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %9 = reshape(%8, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %10 = @func_4508(%9) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(72), float32], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %11 = %7.0;
  %12 = @func_3001() /* ty=Tensor[(13, 7, 11), float32] */;
  %13 = %10.1;
  (%11, %12, %13, meta[relay.Constant][0] /* ty=Tensor[(72), float32] */)
}

def @func_5046(%var_5012: Tensor[(11, 7, 6), int64]) -> (Tensor[(11, 7, 6), bool], Tensor[(11, 7, 6), float32]) {
  %14 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %15 = %14.1;
  %16 = cast(%var_5012, dtype="uint8") /* ty=Tensor[(11, 7, 6), uint8] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%15, dtype="uint8") /* ty=Tensor[(11, 7, 6), uint8] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %20 = subtract(%18, %19) /* ty=Tensor[(11, 7, 6), uint8] */;
  %21 = cast(%var_5012, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%20, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %25 = cast(%var_5012, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %26 = sinh(%25) /* ty=Tensor[(11, 7, 6), float32] */;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %28 = log(%27) /* ty=Tensor[(11, 7, 6), float32] */;
  %29 = cast(%15, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %33 = greater_equal(%23, %24) /* ty=Tensor[(11, 7, 6), bool] */;
  %34 = power(%31, %32) /* ty=Tensor[(11, 7, 6), float32] */;
  (%33, %34)
}

def @func_1847(%var_1829: Tensor[(3, 16, 2), float64]) -> (Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) {
  %35 = @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %36 = @func_1599() /* ty=(Tensor[(3, 16, 2), float64], Tensor[(13, 7, 11), bool]) */;
  %37 = %36.0;
  %38 = cast(%var_1829, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %42 = %35.0;
  %43 = greater(%40, %41) /* ty=Tensor[(3, 16, 2), bool] */;
  (%42, %43)
}

def @func_6931(%var_6926: Tensor[(11, 12, 9), float64]) -> Tensor[(11, 12, 9), float64] {
  %44 = cast(%var_6926, dtype="float64") /* ty=Tensor[(11, 12, 9), float64] */;
  atan(%44) /* ty=Tensor[(11, 12, 9), float64] */
}

def @func_1167() -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) {
  %45 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %46 = cos(%45) /* ty=Tensor[(13, 7, 11), float64] */;
  %47 = cast(%46, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %48 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(13, 7, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %51 = floor_mod(%49, %50) /* ty=Tensor[(13, 7, 11), float64] */;
  %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 7, 11), float64] */, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%51, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %56 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 7, 11), float64] */, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %57 = greater(%54, %55) /* ty=Tensor[(13, 7, 11), bool] */;
  %58 = acosh(%56) /* ty=Tensor[(13, 7, 11), float32] */;
  (%57, %58)
}

def @func_6009() -> (Tensor[(13, 7, 11), bool],) {
  %59 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %60 = %59.4;
  (%60,)
}

def @func_5959() -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) {
  %61 = @func_5289() /* ty=(Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %62 = @func_4739() /* ty=Tensor[(13, 7, 11), bool] */;
  %63 = %61.2;
  (%62, %63)
}

def @func_802(%var_793: Tensor[(11, 7, 6), int64], %var_794: Tensor[(11, 7, 6), int64]) -> (Tensor[(11, 7, 6), int64],) {
  %64 = cast(%var_794, dtype="int64") /* ty=Tensor[(11, 7, 6), int64] */;
  %65 = shape_of(%var_793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_793, dtype="int64") /* ty=Tensor[(11, 7, 6), int64] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %68 = minimum(%66, %67) /* ty=Tensor[(11, 7, 6), int64] */;
  (%68,)
}

def @func_2667() -> (Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64]) {
  %69 = @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %70 = %69.0;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %72 = @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %73 = exp(%71) /* ty=Tensor[(1, 3, 15), float64] */;
  %74 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %75 = %72.0;
  (%73, %74, %75)
}

def @func_4797(%var_4784: Tensor[(2, 8, 2), float64]) -> (Tensor[(2, 8, 2), float64],) {
  %76 = cast(%var_4784, dtype="float64") /* ty=Tensor[(2, 8, 2), float64] */;
  %77 = atanh(%76) /* ty=Tensor[(2, 8, 2), float64] */;
  %78 = cast(%77, dtype="float64") /* ty=Tensor[(2, 8, 2), float64] */;
  %79 = sinh(%78) /* ty=Tensor[(2, 8, 2), float64] */;
  (%79,)
}

def @func_6673(%var_6631: Tensor[(14, 12, 13), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), int16]) {
  %80 = cast(%var_6631, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %81 = atanh(%80) /* ty=Tensor[(14, 12, 13), float32] */;
  %82 = cast(%81, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %83 = shape_of(%var_6631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%var_6631, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %86 = less_equal(%84, %85) /* ty=Tensor[(14, 12, 13), bool] */;
  %87 = cast(%81, dtype="uint16") /* ty=Tensor[(14, 12, 13), uint16] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="uint16") /* ty=Tensor[(14, 12, 13), uint16] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %91 = add(%89, %90) /* ty=Tensor[(14, 12, 13), uint16] */;
  %92 = cast(%91, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %93 = cast(%var_6631, dtype="int16") /* ty=Tensor[(14, 12, 13), int16] */;
  %94 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%91, dtype="int16") /* ty=Tensor[(14, 12, 13), int16] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %97 = log2(%92) /* ty=Tensor[(14, 12, 13), float64] */;
  %98 = right_shift(%95, %96) /* ty=Tensor[(14, 12, 13), int16] */;
  (%97, %98)
}

def @func_2078() -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %99 = @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %100 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %102 = cast(%100, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %103 = %99.0;
  %104 = log(%101) /* ty=Tensor[(13, 7, 11), float64] */;
  %105 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %106 = rsqrt(%102) /* ty=Tensor[(13, 7, 11), float32] */;
  (%103, %104, %105, %106)
}

def @func_2249(%var_2239: Tensor[(6, 9, 6), float32], %var_2240: Tensor[(6, 9, 6), float32]) -> (Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32], Tensor[(13, 7, 11), float32]) {
  %107 = cast(%var_2240, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %108 = shape_of(%var_2239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%var_2239, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %111 = cast(%var_2240, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %112 = subtract(%109, %110) /* ty=Tensor[(6, 9, 6), float32] */;
  %113 = acosh(%111) /* ty=Tensor[(6, 9, 6), float32] */;
  %114 = @func_2033() /* ty=Tensor[(13, 7, 11), float32] */;
  (%112, %113, %114)
}

def @func_2506(%var_2503: int32, %var_2504: Tensor[(960), int32]) -> (Tensor[(5, 11, 6), float64], Tensor[(10, 16, 6), bool], int32, Tensor[(960), int32]) {
  %115 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %116 = cast(%var_2503, dtype="int32") /* ty=int32 */;
  %117 = cast(%var_2504, dtype="int32") /* ty=Tensor[(960), int32] */;
  %118 = reshape(%116, newshape=[]) /* ty=int32 */;
  %119 = reshape(%117, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), int32] */;
  %120 = @func_1090(%118, %119) /* ty=(Tensor[(10, 16, 6), bool],) */;
  %121 = %115.1;
  %122 = %120.0;
  (%121, %122, %var_2503, %var_2504)
}

def @func_1481() -> Tensor[(13, 7, 11), float32] {
  %123 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %123.0
}

def @func_574(%var_569: Tensor[(7, 10, 10), int16], %var_570: Tensor[(7, 10, 10), int16]) -> (Tensor[(7, 10, 10), int16],) {
  %124 = cast(%var_570, dtype="int16") /* ty=Tensor[(7, 10, 10), int16] */;
  %125 = shape_of(%var_569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_569, dtype="int16") /* ty=Tensor[(7, 10, 10), int16] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %128 = multiply(%126, %127) /* ty=Tensor[(7, 10, 10), int16] */;
  (%128,)
}

def @func_6504(%var_6466: Tensor[(8, 3, 15), float64]) -> (Tensor[(8, 3, 15), float32], Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32], Tensor[(8, 3, 15), float64], Tensor[(13, 7, 11), float32]) {
  %129 = @func_1790() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) */;
  %130 = %129.0;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(1, 3, 15), float32] */;
  %132 = cast(%var_6466, dtype="float32") /* ty=Tensor[(8, 3, 15), float32] */;
  %133 = @func_6279() /* ty=(Tensor[(5, 11, 6), float32],) */;
  %134 = @func_5408() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %135 = cast(%var_6466, dtype="float32") /* ty=Tensor[(8, 3, 15), float32] */;
  %136 = sin(%135) /* ty=Tensor[(8, 3, 15), float32] */;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(8, 3, 15), float64] */;
  %138 = @func_3794() /* ty=(Tensor[(5, 11, 6), int32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), uint8]) */;
  %139 = add(%131, %132) /* ty=Tensor[(8, 3, 15), float32] */;
  %140 = %133.0;
  %141 = %134.0;
  %142 = acosh(%137) /* ty=Tensor[(8, 3, 15), float64] */;
  %143 = %138.2;
  (%139, %140, %141, %142, %143)
}

def @func_2619() -> (Tensor[(13, 7, 11), float32],) {
  %144 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %145 = %144.0;
  (%145,)
}

def @func_4136() -> Tensor[(5, 11, 6), int32] {
  %146 = @func_3794() /* ty=(Tensor[(5, 11, 6), int32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), uint8]) */;
  %146.0
}

def @func_2871() -> Tensor[(5, 11, 6), float64] {
  %147 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %147.2
}

def @func_505(%var_495: Tensor[(8, 9, 6), float32]) -> (Tensor[(8, 9, 6), bool],) {
  %148 = cast(%var_495, dtype="float32") /* ty=Tensor[(8, 9, 6), float32] */;
  %149 = acosh(%148) /* ty=Tensor[(8, 9, 6), float32] */;
  %150 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(8, 9, 6), bool] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="bool") /* ty=Tensor[(8, 9, 6), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = greater_equal(%152, %153) /* ty=Tensor[(8, 9, 6), bool] */;
  (%154,)
}

def @func_3001() -> Tensor[(13, 7, 11), float32] {
  %155 = @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %155.0
}

def @func_5833() -> (Tensor[(13, 7, 11), float32],) {
  %156 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %157 = %156.0;
  (%157,)
}

def @func_2993(%var_2945: Tensor[(11, 7, 3), float32], %var_2959: Tensor[(11, 7, 3), float32]) -> (Tensor[(11, 7, 3), float32], Tensor[(11, 7, 3), bool], Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], Tensor[(960), int32]) {
  %158 = cast(%var_2945, dtype="float32") /* ty=Tensor[(11, 7, 3), float32] */;
  %159 = cast(%var_2959, dtype="bool") /* ty=Tensor[(11, 7, 3), bool] */;
  %160 = shape_of(%var_2945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%var_2945, dtype="bool") /* ty=Tensor[(11, 7, 3), bool] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %163 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %164 = cast(meta[relay.Constant][3] /* ty=Tensor[(960), int32] */, dtype="int32") /* ty=Tensor[(960), int32] */;
  %165 = reshape(%164, newshape=[960]) /* ty=Tensor[(960), int32] */;
  %166 = @func_1503(%165) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], int32, Tensor[(960), int32]) */;
  %167 = sigmoid(%158) /* ty=Tensor[(11, 7, 3), float32] */;
  %168 = less(%161, %162) /* ty=Tensor[(11, 7, 3), bool] */;
  %169 = %163.0;
  %170 = %166.1;
  (%167, %168, %169, %170, meta[relay.Constant][3] /* ty=Tensor[(960), int32] */)
}

def @func_5146() -> Tensor[(13, 7, 11), float64] {
  @func_2928() /* ty=Tensor[(13, 7, 11), float64] */
}

def @func_1355(%var_1345: int32) -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), bool], Tensor[(10, 16, 6), bool], int32, Tensor[(120, 8), int32]) {
  %171 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %172 = %171.0;
  %173 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 7, 11), float32] */, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = cast(%172, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %178 = asin(%177) /* ty=Tensor[(13, 7, 11), float32] */;
  %179 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 7, 11), float32] */, dtype="uint64") /* ty=Tensor[(13, 7, 11), uint64] */;
  %180 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%172, dtype="uint64") /* ty=Tensor[(13, 7, 11), uint64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %183 = add(%181, %182) /* ty=Tensor[(13, 7, 11), uint64] */;
  %184 = cast(%183, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %185 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%178, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = cast(%var_1345, dtype="int32") /* ty=int32 */;
  %189 = cast(meta[relay.Constant][5] /* ty=Tensor[(120, 8), int32] */, dtype="int32") /* ty=Tensor[(120, 8), int32] */;
  %190 = reshape(%188, newshape=[]) /* ty=int32 */;
  %191 = reshape(%189, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), int32] */;
  %192 = @func_1090(%190, %191) /* ty=(Tensor[(10, 16, 6), bool],) */;
  %193 = logical_and(%175, %176) /* ty=Tensor[(13, 7, 11), bool] */;
  %194 = logical_or(%186, %187) /* ty=Tensor[(13, 7, 11), bool] */;
  %195 = %192.0;
  (%193, %194, %195, %var_1345, meta[relay.Constant][5] /* ty=Tensor[(120, 8), int32] */)
}

def @func_4903() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %196 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %197 = @func_2692() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %198 = %196.0;
  %199 = %197.0;
  (%198, %199)
}

def @func_5581() -> (Tensor[(11, 7, 6), int64],) {
  %200 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %201 = %200.1;
  (%201,)
}

def @func_7430() -> (Tensor[(13, 7, 11), float32],) {
  %202 = @func_2563() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %203 = %202.0;
  (%203,)
}

def @func_2265() -> (Tensor[(13, 7, 11), float32],) {
  %204 = @func_2156() /* ty=Tensor[(13, 7, 11), float32] */;
  (%204,)
}

def @func_6279() -> (Tensor[(5, 11, 6), float32],) {
  %205 = @func_3387() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="float32") /* ty=Tensor[(5, 11, 6), float32] */;
  %208 = sigmoid(%207) /* ty=Tensor[(5, 11, 6), float32] */;
  (%208,)
}

def @func_6768() -> Tensor[(13, 7, 11), float32] {
  %209 = @func_4814() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %209.0
}

def @func_4229(%var_4213: Tensor[(11, 12), float32]) -> (Tensor[(11, 12), float32], Tensor[(5, 11, 6), int8]) {
  %210 = cast(%var_4213, dtype="float32") /* ty=Tensor[(11, 12), float32] */;
  %211 = @func_3943() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), int8], Tensor[(13, 7, 11), float32]) */;
  %212 = acos(%210) /* ty=Tensor[(11, 12), float32] */;
  %213 = %211.2;
  (%212, %213)
}

def @func_4850(%var_4840: Tensor[(16, 6, 8), int64], %var_4848: Tensor[(162, 2), float32]) -> (Tensor[(16, 6, 8), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float32]) {
  %214 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 6, 8), int64] */, dtype="int64") /* ty=Tensor[(16, 6, 8), int64] */;
  %215 = shape_of(%var_4840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%var_4840, dtype="int64") /* ty=Tensor[(16, 6, 8), int64] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %218 = cast(%var_4848, dtype="float32") /* ty=Tensor[(162, 2), float32] */;
  %219 = cast(%var_4848, dtype="float32") /* ty=Tensor[(162, 2), float32] */;
  %220 = reshape(%218, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), float32] */;
  %221 = reshape(%219, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), float32] */;
  %222 = @func_2249(%220, %221) /* ty=(Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32], Tensor[(13, 7, 11), float32]) */;
  %223 = bitwise_or(%216, %217) /* ty=Tensor[(16, 6, 8), int64] */;
  %224 = %222.0;
  (%223, %224, %var_4848)
}

def @func_7114() -> (Tensor[(5, 11, 6), float64],) {
  %225 = @func_2871() /* ty=Tensor[(5, 11, 6), float64] */;
  (%225,)
}

def @func_6241() -> Tensor[(13, 7, 11), float32] {
  %226 = @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %226.0
}

def @func_6041(%var_6017: Tensor[(1, 11, 9), float64]) -> (Tensor[(?, 11, 9), bool], Tensor[(13, 7, 11), bool]) {
  %227 = cast(%var_6017, dtype="float64") /* ty=Tensor[(1, 11, 9), float64] */;
  %228 = cos(%227) /* ty=Tensor[(1, 11, 9), float64] */;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(1, 11, 9), float32] */;
  %230 = erf(%229) /* ty=Tensor[(1, 11, 9), float32] */;
  %231 = cast(%var_6017, dtype="bool") /* ty=Tensor[(1, 11, 9), bool] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="bool") /* ty=Tensor[(1, 11, 9), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = equal(%233, %234) /* ty=Tensor[(?, 11, 9), bool] */;
  %236 = cast(%235, dtype="bool") /* ty=Tensor[(?, 11, 9), bool] */;
  %237 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%228, dtype="bool") /* ty=Tensor[(1, 11, 9), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %240 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %241 = not_equal(%238, %239) /* ty=Tensor[(?, 11, 9), bool] */;
  %242 = %240.0;
  (%241, %242)
}

def @func_1503(%var_1499: Tensor[(960), int32]) -> (Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], int32, Tensor[(960), int32]) {
  %243 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %244 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %245 = cast(%var_1499, dtype="int32") /* ty=Tensor[(960), int32] */;
  %246 = reshape(%244, newshape=[]) /* ty=int32 */;
  %247 = reshape(%245, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), int32] */;
  %248 = @func_1090(%246, %247) /* ty=(Tensor[(10, 16, 6), bool],) */;
  %249 = %243.0;
  %250 = %248.0;
  (%249, %250, 4 /* ty=int32 */, %var_1499)
}

def @func_2928() -> Tensor[(13, 7, 11), float64] {
  %251 = @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %252 = %251.0;
  %253 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %256 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%252, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%257, %258) /* ty=Tensor[(13, 7, 11), float64] */
}

def @func_4157() -> (Tensor[(13, 7, 11), float32], Tensor[(96), float64], Tensor[(96), float64]) {
  %259 = @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %260 = cast(meta[relay.Constant][7] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %261 = reshape(%260, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %262 = @func_2486(%261) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(96), float64]) */;
  %263 = %259.0;
  %264 = %262.2;
  (%263, %264, meta[relay.Constant][7] /* ty=Tensor[(96), float64] */)
}

def @func_5363() -> Tensor[(13, 7, 11), bool] {
  %265 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %265.0
}

def @func_6904(%var_6891: Tensor[(14, 14, 8), int64]) -> (Tensor[(14, 14, 8), int64], Tensor[(13, 7, 11), float32], Tensor[(14, 14, 8), float32]) {
  %266 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 14, 8), int64] */, dtype="int64") /* ty=Tensor[(14, 14, 8), int64] */;
  %267 = shape_of(%var_6891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_6891, dtype="int64") /* ty=Tensor[(14, 14, 8), int64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %270 = @func_5408() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %271 = cast(%var_6891, dtype="float32") /* ty=Tensor[(14, 14, 8), float32] */;
  %272 = bitwise_or(%268, %269) /* ty=Tensor[(14, 14, 8), int64] */;
  %273 = %270.0;
  %274 = acos(%271) /* ty=Tensor[(14, 14, 8), float32] */;
  (%272, %273, %274)
}

def @func_3536() -> Tensor[(11, 7, 6), int64] {
  %275 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %275.1
}

def @func_4508(%var_4468: Tensor[(72), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(72), float32], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %276 = cast(%var_4468, dtype="float32") /* ty=Tensor[(72), float32] */;
  %277 = reshape(%276, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %278 = @func_2830(%277) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(1, 8, 9), float32], Tensor[(72), float32]) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %281 = cast(%279, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %282 = reshape(%280, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), bool] */;
  %283 = reshape(%281, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), float64] */;
  %284 = @func_1290(%282, %283) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) */;
  %285 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %286 = %284.0;
  %287 = @func_3001() /* ty=Tensor[(13, 7, 11), float32] */;
  (%285, %279, %var_4468, %286, %287)
}

def @func_2156() -> Tensor[(13, 7, 11), float32] {
  @func_2033() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_1995(%var_1982: Tensor[(3, 10, 14), float32]) -> Tensor[(3, 10, 14), float32] {
  %288 = cast(%var_1982, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
  sigmoid(%288) /* ty=Tensor[(3, 10, 14), float32] */
}

def @func_3172() -> (Tensor[(13, 7, 11), float32],) {
  %289 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %290 = %289.0;
  (%290,)
}

def @func_4401(%var_4390: Tensor[(324), float32], %var_4395: Tensor[(9, 3, 15), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(324), float32], Tensor[(9, 3, 15), int16]) {
  %291 = cast(%var_4390, dtype="float32") /* ty=Tensor[(324), float32] */;
  %292 = reshape(%291, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %293 = @func_2777(%292) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(324), float32]) */;
  %294 = @func_1790() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) */;
  %295 = %294.0;
  %296 = cast(%295, dtype="int16") /* ty=Tensor[(1, 3, 15), int16] */;
  %297 = cast(%var_4395, dtype="int16") /* ty=Tensor[(9, 3, 15), int16] */;
  %298 = %293.0;
  %299 = bitwise_or(%296, %297) /* ty=Tensor[(9, 3, 15), int16] */;
  (%298, %var_4390, %299)
}

def @func_4939() -> (Tensor[(13, 7, 11), float32],) {
  %300 = @func_4903() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %301 = %300.0;
  (%301,)
}

def @func_6194() -> (Tensor[(13, 7, 11), float32], Tensor[(4, 12, 7), bool]) {
  %302 = @func_5564() /* ty=(Tensor[(4, 12, 7), bool], Tensor[(13, 7, 11), float64]) */;
  %303 = @func_3978() /* ty=Tensor[(13, 7, 11), float32] */;
  %304 = %302.0;
  (%303, %304)
}

def @func_7051() -> (Tensor[(13, 7, 11), float32],) {
  %305 = @func_2563() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %306 = %305.0;
  (%306,)
}

def @func_3312() -> Tensor[(13, 7, 11), float32] {
  %307 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %307.0
}

def @func_7184(%var_7163: Tensor[(2, 16, 5), int32], %var_7164: Tensor[(2, 16, 5), int32]) -> (Tensor[(2, 16, 5), int32], Tensor[(2, 16, 5), int16]) {
  %308 = cast(%var_7164, dtype="int32") /* ty=Tensor[(2, 16, 5), int32] */;
  %309 = shape_of(%var_7163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_7163, dtype="int32") /* ty=Tensor[(2, 16, 5), int32] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %312 = cast(%var_7163, dtype="int16") /* ty=Tensor[(2, 16, 5), int16] */;
  %313 = shape_of(%var_7164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_7164, dtype="int16") /* ty=Tensor[(2, 16, 5), int16] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %316 = add(%310, %311) /* ty=Tensor[(2, 16, 5), int32] */;
  %317 = bitwise_xor(%314, %315) /* ty=Tensor[(2, 16, 5), int16] */;
  (%316, %317)
}

def @func_6856() -> Tensor[(4, 12, 7), float32] {
  %318 = @func_5564() /* ty=(Tensor[(4, 12, 7), bool], Tensor[(13, 7, 11), float64]) */;
  %319 = %318.0;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
  cos(%320) /* ty=Tensor[(4, 12, 7), float32] */
}

def @func_2099() -> (Tensor[(1, 3, 15), float64],) {
  %321 = @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %322 = %321.0;
  (%322,)
}

def @func_6520() -> Tensor[(11, 7, 6), int64] {
  %323 = @func_4995() /* ty=(Tensor[(11, 7, 6), int64],) */;
  %323.0
}

def @main(%var_7477: Tensor[(45), float64], %var_7478: Tensor[(270, 1), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(3, 15, 6), float64], Tensor[(270, 1), float64], Tensor[(45), float32]) {
  %324 = cast(%var_7477, dtype="float64") /* ty=Tensor[(45), float64] */;
  %325 = cast(%var_7478, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %326 = reshape(%324, newshape=[3, 15, 1]) /* ty=Tensor[(3, 15, 1), float64] */;
  %327 = reshape(%325, newshape=[3, 15, 6]) /* ty=Tensor[(3, 15, 6), float64] */;
  %328 = @func_6108(%326, %327) /* ty=(Tensor[(3, 15, 6), float64],) */;
  %329 = cast(%var_7477, dtype="float32") /* ty=Tensor[(45), float32] */;
  %330 = @func_6241() /* ty=Tensor[(13, 7, 11), float32] */;
  %331 = %328.0;
  %332 = acos(%329) /* ty=Tensor[(45), float32] */;
  (%330, %331, %var_7478, %332)
}

def @func_1461() -> (Tensor[(13, 7, 11), bool],) {
  %333 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
  %334 = %333.0;
  (%334,)
}

def @func_2486(%var_2484: Tensor[(96), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(96), float64]) {
  %335 = @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %336 = cast(%var_2484, dtype="float64") /* ty=Tensor[(96), float64] */;
  %337 = reshape(%336, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float64] */;
  %338 = @func_1847(%337) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) */;
  %339 = %335.0;
  %340 = %338.0;
  (%339, %340, %var_2484)
}

def @func_6321(%var_6309: Tensor[(2, 12, 9), uint32], %var_6310: Tensor[(2, 12, 9), uint32]) -> Tensor[(2, 12, 9), bool] {
  %341 = cast(%var_6310, dtype="bool") /* ty=Tensor[(2, 12, 9), bool] */;
  %342 = shape_of(%var_6309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_6309, dtype="bool") /* ty=Tensor[(2, 12, 9), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%343, %344) /* ty=Tensor[(2, 12, 9), bool] */
}

def @func_4917(%var_4907: Tensor[(9, 1), float32]) -> Tensor[(9, 1), float32] {
  %345 = cast(%var_4907, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
  atanh(%345) /* ty=Tensor[(9, 1), float32] */
}

def @func_7268(%var_7257: Tensor[(72), float32], %var_7258: Tensor[(420), float32], %var_7259: Tensor[(462), int16], %var_7260: Tensor[(50, 9), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int8], Tensor[(72), float32], Tensor[(420), float32], Tensor[(462), int16], Tensor[(50, 9), float64]) {
  %346 = cast(%var_7257, dtype="float32") /* ty=Tensor[(72), float32] */;
  %347 = cast(%var_7258, dtype="float32") /* ty=Tensor[(420), float32] */;
  %348 = cast(%var_7259, dtype="int16") /* ty=Tensor[(462), int16] */;
  %349 = cast(%var_7260, dtype="float64") /* ty=Tensor[(50, 9), float64] */;
  %350 = cast(%var_7259, dtype="float64") /* ty=Tensor[(462), float64] */;
  %351 = reshape(%346, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %352 = reshape(%347, newshape=[1, 420]) /* ty=Tensor[(1, 420), float32] */;
  %353 = reshape(%348, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), int16] */;
  %354 = reshape(%349, newshape=[10, 3, 15]) /* ty=Tensor[(10, 3, 15), float64] */;
  %355 = reshape(%350, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), float64] */;
  %356 = @func_3702(%351, %352, %353, %354, %355) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(36, 2), float32], Tensor[(1, 420), float32], Tensor[(11, 7, 6), int64], Tensor[(11, 7, 6), int8], Tensor[(10, 3, 15), uint32], Tensor[(11, 7, 6), bool], Tensor[(11, 7, 6), int8], Tensor[(11, 7, 6), int64]) */;
  %357 = @func_6768() /* ty=Tensor[(13, 7, 11), float32] */;
  %358 = %356.5;
  (%357, %358, %var_7257, %var_7258, %var_7259, %var_7260)
}

def @func_1599() -> (Tensor[(3, 16, 2), float64], Tensor[(13, 7, 11), bool]) {
  %359 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 16, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
  %360 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
  %361 = asinh(%359) /* ty=Tensor[(3, 16, 2), float64] */;
  %362 = %360.0;
  (%361, %362)
}

def @func_4758() -> (Tensor[(13, 7, 11), bool],) {
  %363 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %364 = %363.0;
  (%364,)
}

def @func_5635() -> Tensor[(4, 12, 7), bool] {
  %365 = @func_5564() /* ty=(Tensor[(4, 12, 7), bool], Tensor[(13, 7, 11), float64]) */;
  %365.0
}

def @func_1368() -> Tensor[(13, 7, 11), float32] {
  %366 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
  %366.1
}

def @func_3372(%var_3360: Tensor[(72), float32], %var_3368: Tensor[(420), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(72), float32], Tensor[(3, 10, 14), float32], Tensor[(420), float32]) {
  %367 = @func_2078() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %368 = cast(%var_3360, dtype="float32") /* ty=Tensor[(72), float32] */;
  %369 = reshape(%368, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %370 = @func_2830(%369) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(1, 8, 9), float32], Tensor[(72), float32]) */;
  %371 = cast(%var_3368, dtype="float32") /* ty=Tensor[(420), float32] */;
  %372 = reshape(%371, newshape=[3, 10, 14]) /* ty=Tensor[(3, 10, 14), float32] */;
  %373 = @func_2787() /* ty=Tensor[(13, 7, 11), float32] */;
  %374 = %367.2;
  %375 = %370.1;
  %376 = @func_1995(%372) /* ty=Tensor[(3, 10, 14), float32] */;
  (%373, %374, %375, %var_3360, %376, %var_3368)
}

def @func_5616() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %377 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %378 = @func_5348() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %379 = %377.0;
  %380 = %378.0;
  (%379, %380)
}

def @func_1750() -> (Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) {
  %381 = cast(meta[relay.Constant][10] /* ty=Tensor[(462), int64] */, dtype="int64") /* ty=Tensor[(462), int64] */;
  %382 = cast(meta[relay.Constant][10] /* ty=Tensor[(462), int64] */, dtype="int64") /* ty=Tensor[(462), int64] */;
  %383 = reshape(%381, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), int64] */;
  %384 = reshape(%382, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), int64] */;
  %385 = @func_802(%383, %384) /* ty=(Tensor[(11, 7, 6), int64],) */;
  %386 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %387 = %385.0;
  (%386, %387, meta[relay.Constant][10] /* ty=Tensor[(462), int64] */)
}

def @func_5594() -> Tensor[(4, 12, 7), bool] {
  %388 = @func_5385() /* ty=(Tensor[(4, 12, 7), bool],) */;
  %388.0
}

def @func_2533(%var_2524: Tensor[(1, 8, 9), float32]) -> (Tensor[(1, 8, 9), float32],) {
  %389 = cast(%var_2524, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %390 = erf(%389) /* ty=Tensor[(1, 8, 9), float32] */;
  (%390,)
}

def @func_6829() -> Tensor[(13, 7, 11), float64] {
  %391 = @func_6615() /* ty=(Tensor[(13, 7, 11), float64],) */;
  %391.0
}

def @func_3185() -> (Tensor[(1, 3, 15), float64],) {
  %392 = @func_2099() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %393 = %392.0;
  (%393,)
}

def @func_3961() -> Tensor[(13, 7, 11), float32] {
  @func_2787() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_6536() -> Tensor[(13, 7, 11), float32] {
  %394 = @func_2278() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %394.0
}

def @func_5564() -> (Tensor[(4, 12, 7), bool], Tensor[(13, 7, 11), float64]) {
  %395 = @func_5385() /* ty=(Tensor[(4, 12, 7), bool],) */;
  %396 = @func_5289() /* ty=(Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %397 = %396.0;
  %398 = cast(%397, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %399 = %395.0;
  %400 = erf(%398) /* ty=Tensor[(13, 7, 11), float64] */;
  (%399, %400)
}

def @func_6888() -> Tensor[(5, 11, 6), float64] {
  %401 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %401.2
}

def @func_3957() -> Tensor[(13, 7, 11), bool] {
  %402 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %402.0
}

def @func_6451(%var_6443: Tensor[(1, 3, 15), float64]) -> (Tensor[(?, 3, 15), float64],) {
  %403 = @func_5922() /* ty=Tensor[(1, 3, 15), float64] */;
  %404 = cast(%var_6443, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %408 = floor_divide(%406, %407) /* ty=Tensor[(?, 3, 15), float64] */;
  (%408,)
}

def @func_6777() -> (Tensor[(11, 7, 6), int64], Tensor[(13, 7, 11), float64]) {
  %409 = @func_5581() /* ty=(Tensor[(11, 7, 6), int64],) */;
  %410 = %409.0;
  %411 = @func_4247() /* ty=Tensor[(13, 7, 11), float64] */;
  (%410, %411)
}

def @func_3794() -> (Tensor[(5, 11, 6), int32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), uint8]) {
  %412 = @func_2667() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64]) */;
  %413 = %412.2;
  %414 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %415 = %414.2;
  %416 = cast(%415, dtype="int32") /* ty=Tensor[(5, 11, 6), int32] */;
  %417 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%413, dtype="int32") /* ty=Tensor[(5, 11, 6), int32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %420 = @func_3172() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %421 = @func_3453() /* ty=(Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), uint8]) */;
  %422 = left_shift(%418, %419) /* ty=Tensor[(5, 11, 6), int32] */;
  %423 = @func_3024() /* ty=Tensor[(13, 7, 11), bool] */;
  %424 = %420.0;
  %425 = %421.1;
  (%422, %423, %424, %425)
}

def @func_4995() -> (Tensor[(11, 7, 6), int64],) {
  %426 = @func_3536() /* ty=Tensor[(11, 7, 6), int64] */;
  (%426,)
}

def @func_2777(%var_2771: Tensor[(324), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(324), float32]) {
  %427 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %428 = @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %429 = cast(%var_2771, dtype="float32") /* ty=Tensor[(324), float32] */;
  %430 = cast(%var_2771, dtype="float32") /* ty=Tensor[(324), float32] */;
  %431 = reshape(%429, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), float32] */;
  %432 = reshape(%430, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), float32] */;
  %433 = @func_2249(%431, %432) /* ty=(Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32], Tensor[(13, 7, 11), float32]) */;
  %434 = %427.0;
  %435 = %428.0;
  %436 = %433.2;
  (%434, %435, %436, %var_2771)
}

def @func_3024() -> Tensor[(13, 7, 11), bool] {
  %437 = @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %437.0
}

def @func_2278() -> (Tensor[(13, 7, 11), float32],) {
  %438 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %439 = %438.0;
  (%439,)
}

def @func_2830(%var_2808: Tensor[(72), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(1, 8, 9), float32], Tensor[(72), float32]) {
  %440 = @func_2563() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %441 = @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %442 = cast(%var_2808, dtype="float32") /* ty=Tensor[(72), float32] */;
  %443 = reshape(%442, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), float32] */;
  %444 = @func_2533(%443) /* ty=(Tensor[(1, 8, 9), float32],) */;
  %445 = %440.0;
  %446 = %441.0;
  %447 = %444.0;
  (%445, %446, %447, %var_2808)
}

def @func_3702(%var_3642: Tensor[(36, 2), float32], %var_3643: Tensor[(1, 420), float32], %var_3657: Tensor[(11, 7, 6), int16], %var_3666: Tensor[(10, 3, 15), float64], %var_3686: Tensor[(11, 7, 6), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(36, 2), float32], Tensor[(1, 420), float32], Tensor[(11, 7, 6), int64], Tensor[(11, 7, 6), int8], Tensor[(10, 3, 15), uint32], Tensor[(11, 7, 6), bool], Tensor[(11, 7, 6), int8], Tensor[(11, 7, 6), int64]) {
  %448 = cast(%var_3642, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %449 = cast(%var_3643, dtype="float32") /* ty=Tensor[(1, 420), float32] */;
  %450 = reshape(%448, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %451 = reshape(%449, newshape=[420]) /* ty=Tensor[(420), float32] */;
  %452 = @func_3372(%450, %451) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(72), float32], Tensor[(3, 10, 14), float32], Tensor[(420), float32]) */;
  %453 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %454 = @func_3536() /* ty=Tensor[(11, 7, 6), int64] */;
  %455 = cast(%454, dtype="float64") /* ty=Tensor[(11, 7, 6), float64] */;
  %456 = rsqrt(%455) /* ty=Tensor[(11, 7, 6), float64] */;
  %457 = cast(%454, dtype="int16") /* ty=Tensor[(11, 7, 6), int16] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="int16") /* ty=Tensor[(11, 7, 6), int16] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %461 = left_shift(%459, %460) /* ty=Tensor[(11, 7, 6), int16] */;
  %462 = cast(%var_3657, dtype="int8") /* ty=Tensor[(11, 7, 6), int8] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="int8") /* ty=Tensor[(11, 7, 6), int8] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %466 = @func_2099() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %467 = %466.0;
  %468 = cast(%467, dtype="uint32") /* ty=Tensor[(1, 3, 15), uint32] */;
  %469 = cast(%var_3666, dtype="uint32") /* ty=Tensor[(10, 3, 15), uint32] */;
  %470 = cast(%var_3686, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %471 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%456, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = cast(%456, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %475 = asin(%474) /* ty=Tensor[(11, 7, 6), float32] */;
  %476 = cast(%var_3657, dtype="int8") /* ty=Tensor[(11, 7, 6), int8] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="int8") /* ty=Tensor[(11, 7, 6), int8] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %480 = bitwise_or(%478, %479) /* ty=Tensor[(11, 7, 6), int8] */;
  %481 = cast(%480, dtype="int64") /* ty=Tensor[(11, 7, 6), int64] */;
  %482 = cast(%480, dtype="int64") /* ty=Tensor[(11, 7, 6), int64] */;
  %483 = reshape(%481, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), int64] */;
  %484 = reshape(%482, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), int64] */;
  %485 = @func_802(%483, %484) /* ty=(Tensor[(11, 7, 6), int64],) */;
  %486 = @func_2156() /* ty=Tensor[(13, 7, 11), float32] */;
  %487 = %452.0;
  %488 = %453.1;
  %489 = add(%464, %465) /* ty=Tensor[(11, 7, 6), int8] */;
  %490 = logical_xor(%468, %469) /* ty=Tensor[(10, 3, 15), uint32] */;
  %491 = logical_and(%472, %473) /* ty=Tensor[(11, 7, 6), bool] */;
  %492 = %485.0;
  (%486, %487, %var_3642, %var_3643, %488, %489, %490, %491, %480, %492)
}

def @func_2787() -> Tensor[(13, 7, 11), float32] {
  %493 = @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %493.0
}

def @func_5385() -> (Tensor[(4, 12, 7), bool],) {
  %494 = cast(8.78006f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %495 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 12, 7), float32] */, dtype="bool") /* ty=Tensor[(4, 12, 7), bool] */;
  %496 = greater(%494, %495) /* ty=Tensor[(4, 12, 7), bool] */;
  (%496,)
}

def @func_1230() -> (Tensor[(13, 7, 11), float32],) {
  %497 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
  %498 = %497.0;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %500 = sinh(%499) /* ty=Tensor[(13, 7, 11), float32] */;
  (%500,)
}

def @func_6108(%var_6083: Tensor[(3, 15, 1), float64], %var_6084: Tensor[(3, 15, 6), float64]) -> (Tensor[(3, 15, 6), float64],) {
  %501 = cast(%var_6083, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %502 = cast(%var_6084, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
  %503 = floor_mod(%501, %502) /* ty=Tensor[(3, 15, 6), float64] */;
  (%503,)
}

def @func_2228() -> (Tensor[(13, 7, 11), float32],) {
  %504 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %505 = %504.0;
  (%505,)
}

def @func_5794(%var_5782: uint8, %var_5783: Tensor[(16, 5, 12), uint8]) -> Tensor[(16, 5, 12), bool] {
  %506 = cast(%var_5782, dtype="bool") /* ty=bool */;
  %507 = cast(%var_5783, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
  %508 = greater(%506, %507) /* ty=Tensor[(16, 5, 12), bool] */;
  %509 = cast(%508, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
  %510 = cast(%var_5782, dtype="bool") /* ty=bool */;
  less_equal(%509, %510) /* ty=Tensor[(16, 5, 12), bool] */
}

def @func_5730() -> (Tensor[(5, 1, 15), float64],) {
  %511 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %512 = sigmoid(%511) /* ty=Tensor[(5, 1, 15), float64] */;
  %513 = cast(%512, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %514 = log(%513) /* ty=Tensor[(5, 1, 15), float64] */;
  (%514,)
}

def @func_3453() -> (Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), uint8]) {
  %515 = @func_2928() /* ty=Tensor[(13, 7, 11), float64] */;
  %516 = cast(%515, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %517 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %518 = sqrt(%516) /* ty=Tensor[(13, 7, 11), float64] */;
  %519 = %517.3;
  (%518, %519)
}

def @func_5922() -> Tensor[(1, 3, 15), float64] {
  %520 = @func_2667() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64]) */;
  %520.0
}

def @func_4203() -> (Tensor[(5, 11, 6), float32],) {
  %521 = @func_3387() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %522 = %521.0;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(5, 11, 6), float32] */;
  %524 = cos(%523) /* ty=Tensor[(5, 11, 6), float32] */;
  (%524,)
}

def @func_3978() -> Tensor[(13, 7, 11), float32] {
  @func_2156() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_5509() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %525 = @func_2078() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %526 = @func_2787() /* ty=Tensor[(13, 7, 11), float32] */;
  %527 = %525.3;
  (%526, %527)
}

def @func_7244() -> (Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32]) {
  %528 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %529 = @func_6279() /* ty=(Tensor[(5, 11, 6), float32],) */;
  %530 = @func_5363() /* ty=Tensor[(13, 7, 11), bool] */;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %532 = %528.0;
  %533 = %529.0;
  %534 = exp(%531) /* ty=Tensor[(13, 7, 11), float32] */;
  (%532, %533, %534)
}

def @func_2563() -> (Tensor[(13, 7, 11), float32],) {
  %535 = @func_2033() /* ty=Tensor[(13, 7, 11), float32] */;
  (%535,)
}

def @func_5201(%var_5179: Tensor[(432), float32]) -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(432), float32], Tensor[(5, 11, 6), float64]) {
  %536 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %537 = @func_4939() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %538 = cast(%var_5179, dtype="float32") /* ty=Tensor[(432), float32] */;
  %539 = reshape(%538, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %540 = @func_3859(%539) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(8, 9, 6), bool], Tensor[(432), float32]) */;
  %541 = %540.0;
  %542 = cast(%541, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %543 = cast(%541, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %544 = reshape(%542, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), bool] */;
  %545 = reshape(%543, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), float64] */;
  %546 = @func_1290(%544, %545) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) */;
  %547 = %536.0;
  %548 = %537.0;
  %549 = %546.1;
  (%547, %548, %541, %var_5179, %549)
}

def @func_770(%var_756: Tensor[(5, 11, 6), float64], %var_761: Tensor[(5, 11, 6), float64]) -> (Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) {
  %550 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 1), float64] */;
  %551 = cast(%var_756, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
  %552 = cast(%var_761, dtype="uint8") /* ty=Tensor[(5, 11, 6), uint8] */;
  %553 = shape_of(%var_756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%var_756, dtype="uint8") /* ty=Tensor[(5, 11, 6), uint8] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %556 = cast(%var_756, dtype="float32") /* ty=Tensor[(5, 11, 6), float32] */;
  %557 = mod(%550, %551) /* ty=Tensor[(5, 11, 6), float64] */;
  %558 = bitwise_xor(%554, %555) /* ty=Tensor[(5, 11, 6), uint8] */;
  %559 = asinh(%556) /* ty=Tensor[(5, 11, 6), float32] */;
  (%557, %558, %559)
}

def @func_5742(%var_5735: Tensor[(12, 2, 7), float32], %var_5738: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), int8],) {
  %560 = cast(%var_5735, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %561 = asin(%560) /* ty=Tensor[(12, 2, 7), float32] */;
  %562 = cast(%var_5738, dtype="int8") /* ty=Tensor[(12, 2, 7), int8] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%561, dtype="int8") /* ty=Tensor[(12, 2, 7), int8] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %566 = logical_xor(%564, %565) /* ty=Tensor[(12, 2, 7), int8] */;
  (%566,)
}

def @func_4739() -> Tensor[(13, 7, 11), bool] {
  %567 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %567.0
}

def @func_6961(%var_6943: Tensor[(13, 7, 11), float32]) -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), uint64]) {
  %568 = @func_2156() /* ty=Tensor[(13, 7, 11), float32] */;
  %569 = cast(%var_6943, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = cast(%568, dtype="uint64") /* ty=Tensor[(13, 7, 11), uint64] */;
  %574 = shape_of(%var_6943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_6943, dtype="uint64") /* ty=Tensor[(13, 7, 11), uint64] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %577 = less(%571, %572) /* ty=Tensor[(13, 7, 11), bool] */;
  %578 = maximum(%575, %576) /* ty=Tensor[(13, 7, 11), uint64] */;
  (%577, %578)
}

def @func_1971(%var_1960: Tensor[(1, 3, 15), float64]) -> (Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float64], Tensor[(96), float64], Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), bool], Tensor[(?, 3, 15), bool], Tensor[(13, 7, 11), float32], Tensor[(?, 3, 15), bool]) {
  %579 = @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %580 = @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %581 = cast(meta[relay.Constant][14] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %582 = reshape(%581, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float64] */;
  %583 = @func_1847(%582) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) */;
  %584 = cast(meta[relay.Constant][14] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %585 = reshape(%584, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float64] */;
  %586 = @func_1847(%585) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) */;
  %587 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
  %588 = @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %589 = %588.0;
  %590 = @func_1790() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %593 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%589, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %596 = cast(%var_1960, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %597 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%589, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %600 = %579.0;
  %601 = %580.0;
  %602 = %583.0;
  %603 = %586.0;
  %604 = %587.0;
  %605 = logical_or(%594, %595) /* ty=Tensor[(?, 3, 15), bool] */;
  %606 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %607 = greater_equal(%598, %599) /* ty=Tensor[(?, 3, 15), bool] */;
  (%600, %601, %602, meta[relay.Constant][14] /* ty=Tensor[(96), float64] */, %603, %604, %605, %606, %607)
}

def @func_6399() -> Tensor[(11, 7, 6), int64] {
  %608 = @func_5581() /* ty=(Tensor[(11, 7, 6), int64],) */;
  %608.0
}

def @func_1450() -> (Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) {
  %609 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %610 = cast(%609, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %611 = cast(%609, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %612 = reshape(%610, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), bool] */;
  %613 = reshape(%611, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), float64] */;
  %614 = @func_1290(%612, %613) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) */;
  %615 = %614.1;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
  %617 = cast(%615, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
  %618 = reshape(%616, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %619 = reshape(%617, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %620 = @func_770(%618, %619) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) */;
  %621 = %620.1;
  %622 = cast(%621, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
  %623 = cast(%609, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %624 = cast(%609, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %625 = reshape(%623, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), bool] */;
  %626 = reshape(%624, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), float64] */;
  %627 = @func_1290(%625, %626) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) */;
  %628 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %629 = reshape(%628, newshape=[]) /* ty=int32 */;
  %630 = @func_1355(%629) /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), bool], Tensor[(10, 16, 6), bool], int32, Tensor[(120, 8), int32]) */;
  %631 = sin(%622) /* ty=Tensor[(5, 11, 6), float64] */;
  %632 = %627.3;
  %633 = %630.1;
  (%609, %615, %631, %632, %633, 4 /* ty=int32 */)
}

def @func_5408() -> (Tensor[(13, 7, 11), float32],) {
  %634 = @func_1481() /* ty=Tensor[(13, 7, 11), float32] */;
  (%634,)
}

def @func_6615() -> (Tensor[(13, 7, 11), float64],) {
  %635 = @func_2928() /* ty=Tensor[(13, 7, 11), float64] */;
  (%635,)
}

def @func_5230() -> (Tensor[(13, 7, 11), float32],) {
  %636 = @func_3961() /* ty=Tensor[(13, 7, 11), float32] */;
  (%636,)
}

def @func_4373(%var_4368: Tensor[(96), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(330), float64], Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), float32], Tensor[(8, 9, 6), bool], Tensor[(108, 4), float32], Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float64], Tensor[(96), float64]) {
  %637 = cast(meta[relay.Constant][15] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %638 = cast(meta[relay.Constant][15] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %639 = reshape(%637, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %640 = reshape(%638, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %641 = @func_770(%639, %640) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) */;
  %642 = %641.1;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
  %644 = cast(meta[relay.Constant][16] /* ty=Tensor[(108, 4), float32] */, dtype="float32") /* ty=Tensor[(108, 4), float32] */;
  %645 = reshape(%644, newshape=[8, 9, 6]) /* ty=Tensor[(8, 9, 6), float32] */;
  %646 = @func_505(%645) /* ty=(Tensor[(8, 9, 6), bool],) */;
  %647 = @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %648 = cast(%var_4368, dtype="float64") /* ty=Tensor[(96), float64] */;
  %649 = reshape(%648, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float64] */;
  %650 = @func_1847(%649) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) */;
  %651 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %652 = atanh(%643) /* ty=Tensor[(5, 11, 6), float64] */;
  %653 = @func_2787() /* ty=Tensor[(13, 7, 11), float32] */;
  %654 = %646.0;
  %655 = %647.0;
  %656 = %650.0;
  (%651, meta[relay.Constant][15] /* ty=Tensor[(330), float64] */, %652, %653, %654, meta[relay.Constant][16] /* ty=Tensor[(108, 4), float32] */, %655, %656, %var_4368)
}

def @func_5853() -> (Tensor[(13, 7, 11), float32],) {
  %657 = @func_5509() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %658 = %657.1;
  %659 = cast(%658, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %660 = atanh(%659) /* ty=Tensor[(13, 7, 11), float32] */;
  (%660,)
}

def @func_3943() -> (Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), int8], Tensor[(13, 7, 11), float32]) {
  %661 = @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %662 = @func_2033() /* ty=Tensor[(13, 7, 11), float32] */;
  %663 = cast(%662, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %664 = @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %665 = %664.0;
  %666 = @func_3453() /* ty=(Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), uint8]) */;
  %667 = %666.1;
  %668 = cast(%667, dtype="int8") /* ty=Tensor[(5, 11, 6), int8] */;
  %669 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%665, dtype="int8") /* ty=Tensor[(5, 11, 6), int8] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %672 = %661.0;
  %673 = asinh(%663) /* ty=Tensor[(13, 7, 11), float64] */;
  %674 = minimum(%670, %671) /* ty=Tensor[(5, 11, 6), int8] */;
  %675 = @func_2787() /* ty=Tensor[(13, 7, 11), float32] */;
  (%672, %673, %674, %675)
}

def @func_5348() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %676 = @func_5230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %677 = @func_3943() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), int8], Tensor[(13, 7, 11), float32]) */;
  %678 = %676.0;
  %679 = %677.3;
  (%678, %679)
}

def @func_6297(%var_6291: Tensor[(12, 3, 6), float32]) -> Tensor[(12, 3, 6), float32] {
  %680 = cast(%var_6291, dtype="float32") /* ty=Tensor[(12, 3, 6), float32] */;
  log10(%680) /* ty=Tensor[(12, 3, 6), float32] */
}

def @func_3219(%var_3203: Tensor[(13, 7, 11), float32], %var_3216: int32, %var_3217: Tensor[(60, 16), int32]) -> (Tensor[(13, 7, 11), int64], Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], int32, Tensor[(60, 16), int32]) {
  %681 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %682 = %681.0;
  %683 = cast(%var_3203, dtype="int64") /* ty=Tensor[(13, 7, 11), int64] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%682, dtype="int64") /* ty=Tensor[(13, 7, 11), int64] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %687 = cast(%var_3216, dtype="int32") /* ty=int32 */;
  %688 = cast(%var_3217, dtype="int32") /* ty=Tensor[(60, 16), int32] */;
  %689 = reshape(%687, newshape=[]) /* ty=int32 */;
  %690 = reshape(%688, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), int32] */;
  %691 = @func_1090(%689, %690) /* ty=(Tensor[(10, 16, 6), bool],) */;
  %692 = bitwise_or(%685, %686) /* ty=Tensor[(13, 7, 11), int64] */;
  %693 = @func_2033() /* ty=Tensor[(13, 7, 11), float32] */;
  %694 = %691.0;
  (%692, %693, %694, %var_3216, %var_3217)
}

def @func_4448() -> (Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), float32]) {
  %695 = @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %696 = %695.0;
  %697 = @func_3001() /* ty=Tensor[(13, 7, 11), float32] */;
  (%696, %697)
}

def @func_3859(%var_3849: Tensor[(432), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(8, 9, 6), bool], Tensor[(432), float32]) {
  %698 = @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %699 = cast(%var_3849, dtype="float32") /* ty=Tensor[(432), float32] */;
  %700 = reshape(%699, newshape=[8, 9, 6]) /* ty=Tensor[(8, 9, 6), float32] */;
  %701 = @func_505(%700) /* ty=(Tensor[(8, 9, 6), bool],) */;
  %702 = %698.0;
  %703 = %701.0;
  (%702, %703, %var_3849)
}

def @func_5289() -> (Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %704 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %705 = @func_4157() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(96), float64], Tensor[(96), float64]) */;
  %706 = @func_4247() /* ty=Tensor[(13, 7, 11), float64] */;
  %707 = %704.0;
  %708 = %705.0;
  (%706, %707, %708)
}

def @func_3387() -> (Tensor[(5, 11, 6), float64],) {
  %709 = @func_2871() /* ty=Tensor[(5, 11, 6), float64] */;
  (%709,)
}

def @func_5704() -> Tensor[(13, 7, 11), float32] {
  %710 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %710.0
}

def @func_1790() -> (Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) {
  %711 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 3, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %712 = @func_1599() /* ty=(Tensor[(3, 16, 2), float64], Tensor[(13, 7, 11), bool]) */;
  %713 = atan(%711) /* ty=Tensor[(1, 3, 15), float64] */;
  %714 = %712.1;
  (%713, %714)
}

def @func_1290(%var_1238: Tensor[(13, 7, 11), bool], %var_1274: Tensor[(13, 7, 11), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) {
  %715 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
  %716 = %715.0;
  %717 = cast(%var_1238, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %721 = cast(meta[relay.Constant][18] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %722 = cast(meta[relay.Constant][18] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %723 = reshape(%721, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %724 = reshape(%722, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %725 = @func_770(%723, %724) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) */;
  %726 = %725.0;
  %727 = cast(%726, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
  %728 = cast(meta[relay.Constant][18] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %729 = reshape(%727, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %730 = reshape(%728, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %731 = @func_770(%729, %730) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) */;
  %732 = cast(%716, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %733 = sin(%732) /* ty=Tensor[(13, 7, 11), float64] */;
  %734 = cast(%var_1274, dtype="int16") /* ty=Tensor[(13, 7, 11), int16] */;
  %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%733, dtype="int16") /* ty=Tensor[(13, 7, 11), int16] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %738 = bitwise_and(%736, %737) /* ty=Tensor[(13, 7, 11), int16] */;
  %739 = cast(%733, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %743 = floor_divide(%719, %720) /* ty=Tensor[(13, 7, 11), float32] */;
  %744 = %731.1;
  %745 = multiply(%741, %742) /* ty=Tensor[(13, 7, 11), float64] */;
  (%743, %726, meta[relay.Constant][18] /* ty=Tensor[(330), float64] */, %744, %745)
}

def @func_4247() -> Tensor[(13, 7, 11), float64] {
  %746 = @func_3943() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), int8], Tensor[(13, 7, 11), float32]) */;
  %746.1
}

def @func_1090(%var_1085: int32, %var_1086: Tensor[(10, 16, 6), int32]) -> (Tensor[(10, 16, 6), bool],) {
  %747 = cast(%var_1085, dtype="bool") /* ty=bool */;
  %748 = cast(%var_1086, dtype="bool") /* ty=Tensor[(10, 16, 6), bool] */;
  %749 = less(%747, %748) /* ty=Tensor[(10, 16, 6), bool] */;
  (%749,)
}

def @func_4814() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %750 = @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %751 = @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %752 = %750.0;
  %753 = %751.0;
  (%752, %753)
}

def @func_7308() -> Tensor[(3, 3, 14), float64] {
  %754 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(3, 3, 14), float32] */;
  %755 = sigmoid(%754) /* ty=Tensor[(3, 3, 14), float32] */;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(3, 3, 14), float64] */;
  atanh(%756) /* ty=Tensor[(3, 3, 14), float64] */
}

def @func_1864() -> (Tensor[(1, 3, 15), float64],) {
  %757 = @func_1790() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) */;
  %758 = %757.0;
  (%758,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1355(%var_1345: int32) -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), bool], Tensor[(10, 16, 6), bool], int32, Tensor[(120, 8), int32]) {
  %0 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %1 = %0.0;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 7, 11), float32] */, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = cast(%1, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %7 = asin(%6) /* ty=Tensor[(13, 7, 11), float32] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 7, 11), float32] */, dtype="uint64") /* ty=Tensor[(13, 7, 11), uint64] */;
  %9 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%1, dtype="uint64") /* ty=Tensor[(13, 7, 11), uint64] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %12 = add(%10, %11) /* ty=Tensor[(13, 7, 11), uint64] */;
  %13 = cast(%12, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %14 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%7, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %17 = cast(%var_1345, dtype="int32") /* ty=int32 */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(120, 8), int32] */, dtype="int32") /* ty=Tensor[(120, 8), int32] */;
  %19 = reshape(%17, newshape=[]) /* ty=int32 */;
  %20 = reshape(%18, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), int32] */;
  %21 = @func_1090(%19, %20) /* ty=(Tensor[(10, 16, 6), bool],) */;
  %22 = logical_and(%4, %5) /* ty=Tensor[(13, 7, 11), bool] */;
  %23 = logical_or(%15, %16) /* ty=Tensor[(13, 7, 11), bool] */;
  %24 = %21.0;
  (%22, %23, %24, %var_1345, meta[relay.Constant][1] /* ty=Tensor[(120, 8), int32] */)
}

def @func_2536(%var_2534: Tensor[(1, 8, 9), float32]) -> (Tensor[(1, 8, 9), float32],) {
  @func_2533(%var_2534) /* ty=(Tensor[(1, 8, 9), float32],) */
}

def @func_6673(%var_6631: Tensor[(14, 12, 13), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), int16]) {
  %25 = cast(%var_6631, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %26 = atanh(%25) /* ty=Tensor[(14, 12, 13), float32] */;
  %27 = cast(%26, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %28 = shape_of(%var_6631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%var_6631, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %31 = less_equal(%29, %30) /* ty=Tensor[(14, 12, 13), bool] */;
  %32 = cast(%26, dtype="uint16") /* ty=Tensor[(14, 12, 13), uint16] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="uint16") /* ty=Tensor[(14, 12, 13), uint16] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %36 = add(%34, %35) /* ty=Tensor[(14, 12, 13), uint16] */;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %38 = cast(%var_6631, dtype="int16") /* ty=Tensor[(14, 12, 13), int16] */;
  %39 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%36, dtype="int16") /* ty=Tensor[(14, 12, 13), int16] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %42 = log2(%37) /* ty=Tensor[(14, 12, 13), float64] */;
  %43 = right_shift(%40, %41) /* ty=Tensor[(14, 12, 13), int16] */;
  (%42, %43)
}

def @func_7187(%var_7185: Tensor[(2, 16, 5), int32], %var_7186: Tensor[(2, 16, 5), int32]) -> (Tensor[(2, 16, 5), int32], Tensor[(2, 16, 5), int16]) {
  %54 = fn (%var_7163: Tensor[(2, 16, 5), int32], %var_7164: Tensor[(2, 16, 5), int32]) -> (Tensor[(2, 16, 5), int32], Tensor[(2, 16, 5), int16]) {
    %44 = cast(%var_7164, dtype="int32") /* ty=Tensor[(2, 16, 5), int32] */;
    %45 = shape_of(%var_7163, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%var_7163, dtype="int32") /* ty=Tensor[(2, 16, 5), int32] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %48 = cast(%var_7163, dtype="int16") /* ty=Tensor[(2, 16, 5), int16] */;
    %49 = shape_of(%var_7164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %50 = cast(%var_7164, dtype="int16") /* ty=Tensor[(2, 16, 5), int16] */;
    %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %52 = add(%46, %47) /* ty=Tensor[(2, 16, 5), int32] */;
    %53 = bitwise_xor(%50, %51) /* ty=Tensor[(2, 16, 5), int16] */;
    (%52, %53)
  };
  %54(%var_7185, %var_7186) /* ty=(Tensor[(2, 16, 5), int32], Tensor[(2, 16, 5), int16]) */
}

def @func_6931(%var_6926: Tensor[(11, 12, 9), float64]) -> Tensor[(11, 12, 9), float64] {
  %55 = cast(%var_6926, dtype="float64") /* ty=Tensor[(11, 12, 9), float64] */;
  atan(%55) /* ty=Tensor[(11, 12, 9), float64] */
}

def @func_2318() -> (Tensor[(13, 7, 11), bool],) {
  %56 = @func_1599() /* ty=(Tensor[(3, 16, 2), float64], Tensor[(13, 7, 11), bool]) */;
  %57 = %56.1;
  (%57,)
}

def @func_1503(%var_1499: Tensor[(960), int32]) -> (Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], int32, Tensor[(960), int32]) {
  %58 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %59 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %60 = cast(%var_1499, dtype="int32") /* ty=Tensor[(960), int32] */;
  %61 = reshape(%59, newshape=[]) /* ty=int32 */;
  %62 = reshape(%60, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), int32] */;
  %63 = @func_1090(%61, %62) /* ty=(Tensor[(10, 16, 6), bool],) */;
  %64 = %58.0;
  %65 = %63.0;
  (%64, %65, 4 /* ty=int32 */, %var_1499)
}

def @func_1849(%var_1848: Tensor[(3, 16, 2), float64]) -> (Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) {
  %75 = fn (%var_1829: Tensor[(3, 16, 2), float64]) -> (Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) {
    %66 = @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */;
    %67 = @func_1599() /* ty=(Tensor[(3, 16, 2), float64], Tensor[(13, 7, 11), bool]) */;
    %68 = %67.0;
    %69 = cast(%var_1829, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
    %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%68, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %73 = %66.0;
    %74 = greater(%71, %72) /* ty=Tensor[(3, 16, 2), bool] */;
    (%73, %74)
  };
  %75(%var_1848) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) */
}

def @func_1463() -> (Tensor[(13, 7, 11), bool],) {
  @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */
}

def @func_5961() -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) {
  @func_5959() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */
}

def @func_6371() -> (Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(72), float32]) {
  @func_6369() /* ty=(Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(72), float32]) */
}

def @func_5350() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  @func_5348() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */
}

def @func_5203(%var_5202: Tensor[(432), float32]) -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(432), float32], Tensor[(5, 11, 6), float64]) {
  %90 = fn (%var_5179: Tensor[(432), float32]) -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(432), float32], Tensor[(5, 11, 6), float64]) {
    %76 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
    %77 = @func_4939() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %78 = cast(%var_5179, dtype="float32") /* ty=Tensor[(432), float32] */;
    %79 = reshape(%78, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %80 = @func_3859(%79) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(8, 9, 6), bool], Tensor[(432), float32]) */;
    %81 = %80.0;
    %82 = cast(%81, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
    %83 = cast(%81, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
    %84 = reshape(%82, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), bool] */;
    %85 = reshape(%83, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), float64] */;
    %86 = @func_1290(%84, %85) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) */;
    %87 = %76.0;
    %88 = %77.0;
    %89 = %86.1;
    (%87, %88, %81, %var_5179, %89)
  };
  %90(%var_5202) /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(432), float32], Tensor[(5, 11, 6), float64]) */
}

def @func_6399() -> Tensor[(11, 7, 6), int64] {
  %91 = @func_5581() /* ty=(Tensor[(11, 7, 6), int64],) */;
  %91.0
}

def @func_5385() -> (Tensor[(4, 12, 7), bool],) {
  %92 = cast(8.78006f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %93 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 12, 7), float32] */, dtype="bool") /* ty=Tensor[(4, 12, 7), bool] */;
  %94 = greater(%92, %93) /* ty=Tensor[(4, 12, 7), bool] */;
  (%94,)
}

def @func_6676(%var_6674: Tensor[(14, 12, 13), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), int16]) {
  @func_6673(%var_6674) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), int16]) */
}

def @func_6830() -> Tensor[(13, 7, 11), float64] {
  %96 = fn () -> Tensor[(13, 7, 11), float64] {
    %95 = @func_6615() /* ty=(Tensor[(13, 7, 11), float64],) */;
    %95.0
  };
  %96() /* ty=Tensor[(13, 7, 11), float64] */
}

def @func_5834() -> (Tensor[(13, 7, 11), float32],) {
  %99 = fn () -> (Tensor[(13, 7, 11), float32],) {
    %97 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %98 = %97.0;
    (%98,)
  };
  %99() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_5959() -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) {
  %100 = @func_5289() /* ty=(Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %101 = @func_4739() /* ty=Tensor[(13, 7, 11), bool] */;
  %102 = %100.2;
  (%101, %102)
}

def @func_4904() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %107 = fn () -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
    %103 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %104 = @func_2692() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %105 = %103.0;
    %106 = %104.0;
    (%105, %106)
  };
  %107() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */
}

def @func_3173() -> (Tensor[(13, 7, 11), float32],) {
  %110 = fn () -> (Tensor[(13, 7, 11), float32],) {
    %108 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %109 = %108.0;
    (%109,)
  };
  %110() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_6010() -> (Tensor[(13, 7, 11), bool],) {
  %113 = fn () -> (Tensor[(13, 7, 11), bool],) {
    %111 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
    %112 = %111.4;
    (%112,)
  };
  %113() /* ty=(Tensor[(13, 7, 11), bool],) */
}

def @func_4405(%var_4403: Tensor[(324), float32], %var_4404: Tensor[(9, 3, 15), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(324), float32], Tensor[(9, 3, 15), int16]) {
  @func_4401(%var_4403, %var_4404) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(324), float32], Tensor[(9, 3, 15), int16]) */
}

def @func_1790() -> (Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) {
  %114 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 3, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %115 = @func_1599() /* ty=(Tensor[(3, 16, 2), float64], Tensor[(13, 7, 11), bool]) */;
  %116 = atan(%114) /* ty=Tensor[(1, 3, 15), float64] */;
  %117 = %115.1;
  (%116, %117)
}

def @func_2228() -> (Tensor[(13, 7, 11), float32],) {
  %118 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %119 = %118.0;
  (%119,)
}

def @func_4511(%var_4509: Tensor[(72), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(72), float32], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  @func_4508(%var_4509) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(72), float32], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */
}

def @func_6112(%var_6110: Tensor[(3, 15, 1), float64], %var_6111: Tensor[(3, 15, 6), float64]) -> (Tensor[(3, 15, 6), float64],) {
  @func_6108(%var_6110, %var_6111) /* ty=(Tensor[(3, 15, 6), float64],) */
}

def @func_2079() -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %128 = fn () -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
    %120 = @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */;
    %121 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
    %122 = cast(%121, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
    %123 = cast(%121, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
    %124 = %120.0;
    %125 = log(%122) /* ty=Tensor[(13, 7, 11), float64] */;
    %126 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
    %127 = rsqrt(%123) /* ty=Tensor[(13, 7, 11), float32] */;
    (%124, %125, %126, %127)
  };
  %128() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */
}

def @func_5147() -> Tensor[(13, 7, 11), float64] {
  %129 = fn () -> Tensor[(13, 7, 11), float64] {
    @func_2928() /* ty=Tensor[(13, 7, 11), float64] */
  };
  %129() /* ty=Tensor[(13, 7, 11), float64] */
}

def @func_2278() -> (Tensor[(13, 7, 11), float32],) {
  %130 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %131 = %130.0;
  (%131,)
}

def @func_2157() -> Tensor[(13, 7, 11), float32] {
  %132 = fn () -> Tensor[(13, 7, 11), float32] {
    @func_2033() /* ty=Tensor[(13, 7, 11), float32] */
  };
  %132() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_2620() -> (Tensor[(13, 7, 11), float32],) {
  %135 = fn () -> (Tensor[(13, 7, 11), float32],) {
    %133 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %134 = %133.0;
    (%134,)
  };
  %135() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_4759() -> (Tensor[(13, 7, 11), bool],) {
  %138 = fn () -> (Tensor[(13, 7, 11), bool],) {
    %136 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
    %137 = %136.0;
    (%137,)
  };
  %138() /* ty=(Tensor[(13, 7, 11), bool],) */
}

def @func_2509(%var_2507: int32, %var_2508: Tensor[(960), int32]) -> (Tensor[(5, 11, 6), float64], Tensor[(10, 16, 6), bool], int32, Tensor[(960), int32]) {
  %147 = fn (%var_2503: int32, %var_2504: Tensor[(960), int32]) -> (Tensor[(5, 11, 6), float64], Tensor[(10, 16, 6), bool], int32, Tensor[(960), int32]) {
    %139 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
    %140 = cast(%var_2503, dtype="int32") /* ty=int32 */;
    %141 = cast(%var_2504, dtype="int32") /* ty=Tensor[(960), int32] */;
    %142 = reshape(%140, newshape=[]) /* ty=int32 */;
    %143 = reshape(%141, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), int32] */;
    %144 = @func_1090(%142, %143) /* ty=(Tensor[(10, 16, 6), bool],) */;
    %145 = %139.1;
    %146 = %144.0;
    (%145, %146, %var_2503, %var_2504)
  };
  %147(%var_2507, %var_2508) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(10, 16, 6), bool], int32, Tensor[(960), int32]) */
}

def @func_4814() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %148 = @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %149 = @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %150 = %148.0;
  %151 = %149.0;
  (%150, %151)
}

def @func_577(%var_575: Tensor[(7, 10, 10), int16], %var_576: Tensor[(7, 10, 10), int16]) -> (Tensor[(7, 10, 10), int16],) {
  %157 = fn (%var_569: Tensor[(7, 10, 10), int16], %var_570: Tensor[(7, 10, 10), int16]) -> (Tensor[(7, 10, 10), int16],) {
    %152 = cast(%var_570, dtype="int16") /* ty=Tensor[(7, 10, 10), int16] */;
    %153 = shape_of(%var_569, dtype="int32") /* ty=Tensor[(3), int32] */;
    %154 = cast(%var_569, dtype="int16") /* ty=Tensor[(7, 10, 10), int16] */;
    %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %156 = multiply(%154, %155) /* ty=Tensor[(7, 10, 10), int16] */;
    (%156,)
  };
  %157(%var_575, %var_576) /* ty=(Tensor[(7, 10, 10), int16],) */
}

def @func_4137() -> Tensor[(5, 11, 6), int32] {
  %159 = fn () -> Tensor[(5, 11, 6), int32] {
    %158 = @func_3794() /* ty=(Tensor[(5, 11, 6), int32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), uint8]) */;
    %158.0
  };
  %159() /* ty=Tensor[(5, 11, 6), int32] */
}

def @func_2267() -> (Tensor[(13, 7, 11), float32],) {
  @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_6615() -> (Tensor[(13, 7, 11), float64],) {
  %160 = @func_2928() /* ty=Tensor[(13, 7, 11), float64] */;
  (%160,)
}

def @func_4996() -> (Tensor[(11, 7, 6), int64],) {
  %162 = fn () -> (Tensor[(11, 7, 6), int64],) {
    %161 = @func_3536() /* ty=Tensor[(11, 7, 6), int64] */;
    (%161,)
  };
  %162() /* ty=(Tensor[(11, 7, 6), int64],) */
}

def @func_2265() -> (Tensor[(13, 7, 11), float32],) {
  %163 = @func_2156() /* ty=Tensor[(13, 7, 11), float32] */;
  (%163,)
}

def @func_4203() -> (Tensor[(5, 11, 6), float32],) {
  %164 = @func_3387() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %165 = %164.0;
  %166 = cast(%165, dtype="float32") /* ty=Tensor[(5, 11, 6), float32] */;
  %167 = cos(%166) /* ty=Tensor[(5, 11, 6), float32] */;
  (%167,)
}

def @func_1506(%var_1504: Tensor[(960), int32]) -> (Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], int32, Tensor[(960), int32]) {
  @func_1503(%var_1504) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], int32, Tensor[(960), int32]) */
}

def @func_2564() -> (Tensor[(13, 7, 11), float32],) {
  %169 = fn () -> (Tensor[(13, 7, 11), float32],) {
    %168 = @func_2033() /* ty=Tensor[(13, 7, 11), float32] */;
    (%168,)
  };
  %169() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_3375(%var_3373: Tensor[(72), float32], %var_3374: Tensor[(420), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(72), float32], Tensor[(3, 10, 14), float32], Tensor[(420), float32]) {
  %180 = fn (%var_3360: Tensor[(72), float32], %var_3368: Tensor[(420), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(72), float32], Tensor[(3, 10, 14), float32], Tensor[(420), float32]) {
    %170 = @func_2078() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
    %171 = cast(%var_3360, dtype="float32") /* ty=Tensor[(72), float32] */;
    %172 = reshape(%171, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %173 = @func_2830(%172) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(1, 8, 9), float32], Tensor[(72), float32]) */;
    %174 = cast(%var_3368, dtype="float32") /* ty=Tensor[(420), float32] */;
    %175 = reshape(%174, newshape=[3, 10, 14]) /* ty=Tensor[(3, 10, 14), float32] */;
    %176 = @func_2787() /* ty=Tensor[(13, 7, 11), float32] */;
    %177 = %170.2;
    %178 = %173.1;
    %179 = @func_1995(%175) /* ty=Tensor[(3, 10, 14), float32] */;
    (%176, %177, %178, %var_3360, %179, %var_3368)
  };
  %180(%var_3373, %var_3374) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(72), float32], Tensor[(3, 10, 14), float32], Tensor[(420), float32]) */
}

def @func_1792() -> (Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) {
  @func_1790() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) */
}

def @func_4231(%var_4230: Tensor[(11, 12), float32]) -> (Tensor[(11, 12), float32], Tensor[(5, 11, 6), int8]) {
  %185 = fn (%var_4213: Tensor[(11, 12), float32]) -> (Tensor[(11, 12), float32], Tensor[(5, 11, 6), int8]) {
    %181 = cast(%var_4213, dtype="float32") /* ty=Tensor[(11, 12), float32] */;
    %182 = @func_3943() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), int8], Tensor[(13, 7, 11), float32]) */;
    %183 = acos(%181) /* ty=Tensor[(11, 12), float32] */;
    %184 = %182.2;
    (%183, %184)
  };
  %185(%var_4230) /* ty=(Tensor[(11, 12), float32], Tensor[(5, 11, 6), int8]) */
}

def @func_5635() -> Tensor[(4, 12, 7), bool] {
  %186 = @func_5564() /* ty=(Tensor[(4, 12, 7), bool], Tensor[(13, 7, 11), float64]) */;
  %186.0
}

def @main(%var_7477: Tensor[(45), float64], %var_7478: Tensor[(270, 1), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(3, 15, 6), float64], Tensor[(270, 1), float64], Tensor[(45), float32]) {
  %187 = cast(%var_7477, dtype="float64") /* ty=Tensor[(45), float64] */;
  %188 = cast(%var_7478, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %189 = reshape(%187, newshape=[3, 15, 1]) /* ty=Tensor[(3, 15, 1), float64] */;
  %190 = reshape(%188, newshape=[3, 15, 6]) /* ty=Tensor[(3, 15, 6), float64] */;
  %191 = @func_6112(%189, %190) /* ty=(Tensor[(3, 15, 6), float64],) */;
  %192 = cast(%var_7477, dtype="float32") /* ty=Tensor[(45), float32] */;
  %193 = @func_6241() /* ty=Tensor[(13, 7, 11), float32] */;
  %194 = %191.0;
  %195 = acos(%192) /* ty=Tensor[(45), float32] */;
  (%193, %194, %var_7478, %195)
}

def @func_6451(%var_6443: Tensor[(1, 3, 15), float64]) -> (Tensor[(?, 3, 15), float64],) {
  %196 = @func_5922() /* ty=Tensor[(1, 3, 15), float64] */;
  %197 = cast(%var_6443, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %201 = floor_divide(%199, %200) /* ty=Tensor[(?, 3, 15), float64] */;
  (%201,)
}

def @func_6520() -> Tensor[(11, 7, 6), int64] {
  %202 = @func_4995() /* ty=(Tensor[(11, 7, 6), int64],) */;
  %202.0
}

def @func_1370() -> Tensor[(13, 7, 11), float32] {
  @func_1368() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_5596() -> Tensor[(4, 12, 7), bool] {
  @func_5594() /* ty=Tensor[(4, 12, 7), bool] */
}

def @func_3024() -> Tensor[(13, 7, 11), bool] {
  %203 = @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %203.0
}

def @func_5509() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %204 = @func_2078() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %205 = @func_2787() /* ty=Tensor[(13, 7, 11), float32] */;
  %206 = %204.3;
  (%205, %206)
}

def @func_6279() -> (Tensor[(5, 11, 6), float32],) {
  %207 = @func_3387() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %208 = %207.0;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(5, 11, 6), float32] */;
  %210 = sigmoid(%209) /* ty=Tensor[(5, 11, 6), float32] */;
  (%210,)
}

def @func_6299(%var_6298: Tensor[(12, 3, 6), float32]) -> Tensor[(12, 3, 6), float32] {
  %212 = fn (%var_6291: Tensor[(12, 3, 6), float32]) -> Tensor[(12, 3, 6), float32] {
    %211 = cast(%var_6291, dtype="float32") /* ty=Tensor[(12, 3, 6), float32] */;
    log10(%211) /* ty=Tensor[(12, 3, 6), float32] */
  };
  %212(%var_6298) /* ty=Tensor[(12, 3, 6), float32] */
}

def @func_2034() -> Tensor[(13, 7, 11), float32] {
  %214 = fn () -> Tensor[(13, 7, 11), float32] {
    %213 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %213.0
  };
  %214() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_3002() -> Tensor[(13, 7, 11), float32] {
  %216 = fn () -> Tensor[(13, 7, 11), float32] {
    %215 = @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %215.0
  };
  %216() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_6108(%var_6083: Tensor[(3, 15, 1), float64], %var_6084: Tensor[(3, 15, 6), float64]) -> (Tensor[(3, 15, 6), float64],) {
  %217 = cast(%var_6083, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %218 = cast(%var_6084, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
  %219 = floor_mod(%217, %218) /* ty=Tensor[(3, 15, 6), float64] */;
  (%219,)
}

def @func_3980() -> Tensor[(13, 7, 11), float32] {
  @func_3978() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_5730() -> (Tensor[(5, 1, 15), float64],) {
  %220 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %221 = sigmoid(%220) /* ty=Tensor[(5, 1, 15), float64] */;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %223 = log(%222) /* ty=Tensor[(5, 1, 15), float64] */;
  (%223,)
}

def @func_4158() -> (Tensor[(13, 7, 11), float32], Tensor[(96), float64], Tensor[(96), float64]) {
  %230 = fn () -> (Tensor[(13, 7, 11), float32], Tensor[(96), float64], Tensor[(96), float64]) {
    %224 = @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %225 = cast(meta[relay.Constant][5] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %226 = reshape(%225, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %227 = @func_2486(%226) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(96), float64]) */;
    %228 = %224.0;
    %229 = %227.2;
    (%228, %229, meta[relay.Constant][5] /* ty=Tensor[(96), float64] */)
  };
  %230() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(96), float64], Tensor[(96), float64]) */
}

def @func_3944() -> (Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), int8], Tensor[(13, 7, 11), float32]) {
  %246 = fn () -> (Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), int8], Tensor[(13, 7, 11), float32]) {
    %231 = @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */;
    %232 = @func_2033() /* ty=Tensor[(13, 7, 11), float32] */;
    %233 = cast(%232, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
    %234 = @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */;
    %235 = %234.0;
    %236 = @func_3453() /* ty=(Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), uint8]) */;
    %237 = %236.1;
    %238 = cast(%237, dtype="int8") /* ty=Tensor[(5, 11, 6), int8] */;
    %239 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
    %240 = cast(%235, dtype="int8") /* ty=Tensor[(5, 11, 6), int8] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %242 = %231.0;
    %243 = asinh(%233) /* ty=Tensor[(13, 7, 11), float64] */;
    %244 = minimum(%240, %241) /* ty=Tensor[(5, 11, 6), int8] */;
    %245 = @func_2787() /* ty=Tensor[(13, 7, 11), float32] */;
    (%242, %243, %244, %245)
  };
  %246() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), int8], Tensor[(13, 7, 11), float32]) */
}

def @func_6770() -> Tensor[(13, 7, 11), float32] {
  @func_6768() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_7052() -> (Tensor[(13, 7, 11), float32],) {
  %249 = fn () -> (Tensor[(13, 7, 11), float32],) {
    %247 = @func_2563() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %248 = %247.0;
    (%248,)
  };
  %249() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_3794() -> (Tensor[(5, 11, 6), int32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), uint8]) {
  %250 = @func_2667() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64]) */;
  %251 = %250.2;
  %252 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %253 = %252.2;
  %254 = cast(%253, dtype="int32") /* ty=Tensor[(5, 11, 6), int32] */;
  %255 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%251, dtype="int32") /* ty=Tensor[(5, 11, 6), int32] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %258 = @func_3172() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %259 = @func_3453() /* ty=(Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), uint8]) */;
  %260 = left_shift(%256, %257) /* ty=Tensor[(5, 11, 6), int32] */;
  %261 = @func_3024() /* ty=Tensor[(13, 7, 11), bool] */;
  %262 = %258.0;
  %263 = %259.1;
  (%260, %261, %262, %263)
}

def @func_5617() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %268 = fn () -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
    %264 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %265 = @func_5348() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
    %266 = %264.0;
    %267 = %265.0;
    (%266, %267)
  };
  %268() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */
}

def @func_2230() -> (Tensor[(13, 7, 11), float32],) {
  @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_5046(%var_5012: Tensor[(11, 7, 6), int64]) -> (Tensor[(11, 7, 6), bool], Tensor[(11, 7, 6), float32]) {
  %269 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %270 = %269.1;
  %271 = cast(%var_5012, dtype="uint8") /* ty=Tensor[(11, 7, 6), uint8] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="uint8") /* ty=Tensor[(11, 7, 6), uint8] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %275 = subtract(%273, %274) /* ty=Tensor[(11, 7, 6), uint8] */;
  %276 = cast(%var_5012, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %280 = cast(%var_5012, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %281 = sinh(%280) /* ty=Tensor[(11, 7, 6), float32] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %283 = log(%282) /* ty=Tensor[(11, 7, 6), float32] */;
  %284 = cast(%270, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %288 = greater_equal(%278, %279) /* ty=Tensor[(11, 7, 6), bool] */;
  %289 = power(%286, %287) /* ty=Tensor[(11, 7, 6), float32] */;
  (%288, %289)
}

def @func_2320() -> (Tensor[(13, 7, 11), bool],) {
  @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */
}

def @func_6964(%var_6962: Tensor[(13, 7, 11), float32]) -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), uint64]) {
  @func_6961(%var_6962) /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), uint64]) */
}

def @func_6904(%var_6891: Tensor[(14, 14, 8), int64]) -> (Tensor[(14, 14, 8), int64], Tensor[(13, 7, 11), float32], Tensor[(14, 14, 8), float32]) {
  %290 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 14, 8), int64] */, dtype="int64") /* ty=Tensor[(14, 14, 8), int64] */;
  %291 = shape_of(%var_6891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_6891, dtype="int64") /* ty=Tensor[(14, 14, 8), int64] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %294 = @func_5408() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %295 = cast(%var_6891, dtype="float32") /* ty=Tensor[(14, 14, 8), float32] */;
  %296 = bitwise_or(%292, %293) /* ty=Tensor[(14, 14, 8), int64] */;
  %297 = %294.0;
  %298 = acos(%295) /* ty=Tensor[(14, 14, 8), float32] */;
  (%296, %297, %298)
}

def @func_4919(%var_4918: Tensor[(9, 1), float32]) -> Tensor[(9, 1), float32] {
  %300 = fn (%var_4907: Tensor[(9, 1), float32]) -> Tensor[(9, 1), float32] {
    %299 = cast(%var_4907, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
    atanh(%299) /* ty=Tensor[(9, 1), float32] */
  };
  %300(%var_4918) /* ty=Tensor[(9, 1), float32] */
}

def @func_4800(%var_4798: Tensor[(2, 8, 2), float64]) -> (Tensor[(2, 8, 2), float64],) {
  @func_4797(%var_4798) /* ty=(Tensor[(2, 8, 2), float64],) */
}

def @func_1231() -> (Tensor[(13, 7, 11), float32],) {
  %305 = fn () -> (Tensor[(13, 7, 11), float32],) {
    %301 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
    %302 = %301.0;
    %303 = cast(%302, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
    %304 = sinh(%303) /* ty=Tensor[(13, 7, 11), float32] */;
    (%304,)
  };
  %305() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_1866() -> (Tensor[(1, 3, 15), float64],) {
  @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */
}

def @func_6369() -> (Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(72), float32]) {
  %306 = @func_4203() /* ty=(Tensor[(5, 11, 6), float32],) */;
  %307 = cast(meta[relay.Constant][7] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %308 = reshape(%307, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %309 = @func_4508(%308) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(72), float32], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %310 = %306.0;
  %311 = @func_3001() /* ty=Tensor[(13, 7, 11), float32] */;
  %312 = %309.1;
  (%310, %311, %312, meta[relay.Constant][7] /* ty=Tensor[(72), float32] */)
}

def @func_6768() -> Tensor[(13, 7, 11), float32] {
  %313 = @func_4814() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
  %313.0
}

def @func_6907(%var_6905: Tensor[(14, 14, 8), int64]) -> (Tensor[(14, 14, 8), int64], Tensor[(13, 7, 11), float32], Tensor[(14, 14, 8), float32]) {
  @func_6904(%var_6905) /* ty=(Tensor[(14, 14, 8), int64], Tensor[(13, 7, 11), float32], Tensor[(14, 14, 8), float32]) */
}

def @func_5230() -> (Tensor[(13, 7, 11), float32],) {
  %314 = @func_3961() /* ty=Tensor[(13, 7, 11), float32] */;
  (%314,)
}

def @func_507(%var_506: Tensor[(8, 9, 6), float32]) -> (Tensor[(8, 9, 6), bool],) {
  %322 = fn (%var_495: Tensor[(8, 9, 6), float32]) -> (Tensor[(8, 9, 6), bool],) {
    %315 = cast(%var_495, dtype="float32") /* ty=Tensor[(8, 9, 6), float32] */;
    %316 = acosh(%315) /* ty=Tensor[(8, 9, 6), float32] */;
    %317 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(8, 9, 6), bool] */;
    %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%316, dtype="bool") /* ty=Tensor[(8, 9, 6), bool] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %321 = greater_equal(%319, %320) /* ty=Tensor[(8, 9, 6), bool] */;
    (%321,)
  };
  %322(%var_506) /* ty=(Tensor[(8, 9, 6), bool],) */
}

def @func_2833(%var_2831: Tensor[(72), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(1, 8, 9), float32], Tensor[(72), float32]) {
  @func_2830(%var_2831) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(1, 8, 9), float32], Tensor[(72), float32]) */
}

def @func_1864() -> (Tensor[(1, 3, 15), float64],) {
  %323 = @func_1790() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) */;
  %324 = %323.0;
  (%324,)
}

def @func_3185() -> (Tensor[(1, 3, 15), float64],) {
  %325 = @func_2099() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %326 = %325.0;
  (%326,)
}

def @func_2788() -> Tensor[(13, 7, 11), float32] {
  %328 = fn () -> Tensor[(13, 7, 11), float32] {
    %327 = @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %327.0
  };
  %328() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_3453() -> (Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), uint8]) {
  %329 = @func_2928() /* ty=Tensor[(13, 7, 11), float64] */;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %331 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %332 = sqrt(%330) /* ty=Tensor[(13, 7, 11), float64] */;
  %333 = %331.3;
  (%332, %333)
}

def @func_7116() -> (Tensor[(5, 11, 6), float64],) {
  @func_7114() /* ty=(Tensor[(5, 11, 6), float64],) */
}

def @func_6890() -> Tensor[(5, 11, 6), float64] {
  @func_6888() /* ty=Tensor[(5, 11, 6), float64] */
}

def @func_6194() -> (Tensor[(13, 7, 11), float32], Tensor[(4, 12, 7), bool]) {
  %334 = @func_5564() /* ty=(Tensor[(4, 12, 7), bool], Tensor[(13, 7, 11), float64]) */;
  %335 = @func_3978() /* ty=Tensor[(13, 7, 11), float32] */;
  %336 = %334.0;
  (%335, %336)
}

def @func_6325(%var_6323: Tensor[(2, 12, 9), uint32], %var_6324: Tensor[(2, 12, 9), uint32]) -> Tensor[(2, 12, 9), bool] {
  @func_6321(%var_6323, %var_6324) /* ty=Tensor[(2, 12, 9), bool] */
}

def @func_6522() -> Tensor[(11, 7, 6), int64] {
  @func_6520() /* ty=Tensor[(11, 7, 6), int64] */
}

def @func_4401(%var_4390: Tensor[(324), float32], %var_4395: Tensor[(9, 3, 15), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(324), float32], Tensor[(9, 3, 15), int16]) {
  %337 = cast(%var_4390, dtype="float32") /* ty=Tensor[(324), float32] */;
  %338 = reshape(%337, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %339 = @func_2777(%338) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(324), float32]) */;
  %340 = @func_1790() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="int16") /* ty=Tensor[(1, 3, 15), int16] */;
  %343 = cast(%var_4395, dtype="int16") /* ty=Tensor[(9, 3, 15), int16] */;
  %344 = %339.0;
  %345 = bitwise_or(%342, %343) /* ty=Tensor[(9, 3, 15), int16] */;
  (%344, %var_4390, %345)
}

def @func_1971(%var_1960: Tensor[(1, 3, 15), float64]) -> (Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float64], Tensor[(96), float64], Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), bool], Tensor[(?, 3, 15), bool], Tensor[(13, 7, 11), float32], Tensor[(?, 3, 15), bool]) {
  %346 = @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %347 = @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %348 = cast(meta[relay.Constant][9] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %349 = reshape(%348, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float64] */;
  %350 = @func_1847(%349) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) */;
  %351 = cast(meta[relay.Constant][9] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %352 = reshape(%351, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float64] */;
  %353 = @func_1847(%352) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) */;
  %354 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
  %355 = @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %356 = %355.0;
  %357 = @func_1790() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) */;
  %358 = %357.0;
  %359 = cast(%358, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %360 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%356, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = cast(%var_1960, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %364 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%356, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %367 = %346.0;
  %368 = %347.0;
  %369 = %350.0;
  %370 = %353.0;
  %371 = %354.0;
  %372 = logical_or(%361, %362) /* ty=Tensor[(?, 3, 15), bool] */;
  %373 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %374 = greater_equal(%365, %366) /* ty=Tensor[(?, 3, 15), bool] */;
  (%367, %368, %369, meta[relay.Constant][9] /* ty=Tensor[(96), float64] */, %370, %371, %372, %373, %374)
}

def @func_3978() -> Tensor[(13, 7, 11), float32] {
  @func_2156() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_4375(%var_4374: Tensor[(96), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(330), float64], Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), float32], Tensor[(8, 9, 6), bool], Tensor[(108, 4), float32], Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float64], Tensor[(96), float64]) {
  %395 = fn (%var_4368: Tensor[(96), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(330), float64], Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), float32], Tensor[(8, 9, 6), bool], Tensor[(108, 4), float32], Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float64], Tensor[(96), float64]) {
    %375 = cast(meta[relay.Constant][10] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
    %376 = cast(meta[relay.Constant][10] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
    %377 = reshape(%375, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
    %378 = reshape(%376, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
    %379 = @func_770(%377, %378) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) */;
    %380 = %379.1;
    %381 = cast(%380, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
    %382 = cast(meta[relay.Constant][11] /* ty=Tensor[(108, 4), float32] */, dtype="float32") /* ty=Tensor[(108, 4), float32] */;
    %383 = reshape(%382, newshape=[8, 9, 6]) /* ty=Tensor[(8, 9, 6), float32] */;
    %384 = @func_505(%383) /* ty=(Tensor[(8, 9, 6), bool],) */;
    %385 = @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */;
    %386 = cast(%var_4368, dtype="float64") /* ty=Tensor[(96), float64] */;
    %387 = reshape(%386, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float64] */;
    %388 = @func_1847(%387) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) */;
    %389 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
    %390 = atanh(%381) /* ty=Tensor[(5, 11, 6), float64] */;
    %391 = @func_2787() /* ty=Tensor[(13, 7, 11), float32] */;
    %392 = %384.0;
    %393 = %385.0;
    %394 = %388.0;
    (%389, meta[relay.Constant][10] /* ty=Tensor[(330), float64] */, %390, %391, %392, meta[relay.Constant][11] /* ty=Tensor[(108, 4), float32] */, %393, %394, %var_4368)
  };
  %395(%var_4374) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(330), float64], Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), float32], Tensor[(8, 9, 6), bool], Tensor[(108, 4), float32], Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float64], Tensor[(96), float64]) */
}

def @func_5387() -> (Tensor[(4, 12, 7), bool],) {
  @func_5385() /* ty=(Tensor[(4, 12, 7), bool],) */
}

def @func_4816() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  @func_4814() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */
}

def @func_5409() -> (Tensor[(13, 7, 11), float32],) {
  %397 = fn () -> (Tensor[(13, 7, 11), float32],) {
    %396 = @func_1481() /* ty=Tensor[(13, 7, 11), float32] */;
    (%396,)
  };
  %397() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_3026() -> Tensor[(13, 7, 11), bool] {
  @func_3024() /* ty=Tensor[(13, 7, 11), bool] */
}

def @func_5594() -> Tensor[(4, 12, 7), bool] {
  %398 = @func_5385() /* ty=(Tensor[(4, 12, 7), bool],) */;
  %398.0
}

def @func_3958() -> Tensor[(13, 7, 11), bool] {
  %400 = fn () -> Tensor[(13, 7, 11), bool] {
    %399 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
    %399.0
  };
  %400() /* ty=Tensor[(13, 7, 11), bool] */
}

def @func_6537() -> Tensor[(13, 7, 11), float32] {
  %402 = fn () -> Tensor[(13, 7, 11), float32] {
    %401 = @func_2278() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %401.0
  };
  %402() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_773(%var_771: Tensor[(5, 11, 6), float64], %var_772: Tensor[(5, 11, 6), float64]) -> (Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) {
  %413 = fn (%var_756: Tensor[(5, 11, 6), float64], %var_761: Tensor[(5, 11, 6), float64]) -> (Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) {
    %403 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 1), float64] */;
    %404 = cast(%var_756, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
    %405 = cast(%var_761, dtype="uint8") /* ty=Tensor[(5, 11, 6), uint8] */;
    %406 = shape_of(%var_756, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(%var_756, dtype="uint8") /* ty=Tensor[(5, 11, 6), uint8] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %409 = cast(%var_756, dtype="float32") /* ty=Tensor[(5, 11, 6), float32] */;
    %410 = mod(%403, %404) /* ty=Tensor[(5, 11, 6), float64] */;
    %411 = bitwise_xor(%407, %408) /* ty=Tensor[(5, 11, 6), uint8] */;
    %412 = asinh(%409) /* ty=Tensor[(5, 11, 6), float32] */;
    (%410, %411, %412)
  };
  %413(%var_771, %var_772) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) */
}

def @func_3455() -> (Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), uint8]) {
  @func_3453() /* ty=(Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), uint8]) */
}

def @func_1169() -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) {
  @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */
}

def @func_2253(%var_2251: Tensor[(6, 9, 6), float32], %var_2252: Tensor[(6, 9, 6), float32]) -> (Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32], Tensor[(13, 7, 11), float32]) {
  @func_2249(%var_2251, %var_2252) /* ty=(Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32], Tensor[(13, 7, 11), float32]) */
}

def @func_5232() -> (Tensor[(13, 7, 11), float32],) {
  @func_5230() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_2694() -> (Tensor[(13, 7, 11), float32],) {
  @func_2692() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_2692() -> (Tensor[(13, 7, 11), float32],) {
  %414 = @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %415 = %414.0;
  (%415,)
}

def @func_6934(%var_6932: Tensor[(11, 12, 9), float64]) -> Tensor[(11, 12, 9), float64] {
  @func_6931(%var_6932) /* ty=Tensor[(11, 12, 9), float64] */
}

def @func_5348() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %416 = @func_5230() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %417 = @func_3943() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), int8], Tensor[(13, 7, 11), float32]) */;
  %418 = %416.0;
  %419 = %417.3;
  (%418, %419)
}

def @func_1974(%var_1972: Tensor[(1, 3, 15), float64]) -> (Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float64], Tensor[(96), float64], Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), bool], Tensor[(?, 3, 15), bool], Tensor[(13, 7, 11), float32], Tensor[(?, 3, 15), bool]) {
  @func_1971(%var_1972) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float64], Tensor[(96), float64], Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), bool], Tensor[(?, 3, 15), bool], Tensor[(13, 7, 11), float32], Tensor[(?, 3, 15), bool]) */
}

def @func_3187() -> (Tensor[(1, 3, 15), float64],) {
  @func_3185() /* ty=(Tensor[(1, 3, 15), float64],) */
}

def @func_1694() -> (Tensor[(5, 11, 6), float64],) {
  @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */
}

def @func_4740() -> Tensor[(13, 7, 11), bool] {
  %421 = fn () -> Tensor[(13, 7, 11), bool] {
    %420 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
    %420.0
  };
  %421() /* ty=Tensor[(13, 7, 11), bool] */
}

def @func_7273(%var_7269: Tensor[(72), float32], %var_7270: Tensor[(420), float32], %var_7271: Tensor[(462), int16], %var_7272: Tensor[(50, 9), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int8], Tensor[(72), float32], Tensor[(420), float32], Tensor[(462), int16], Tensor[(50, 9), float64]) {
  %435 = fn (%var_7257: Tensor[(72), float32], %var_7258: Tensor[(420), float32], %var_7259: Tensor[(462), int16], %var_7260: Tensor[(50, 9), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int8], Tensor[(72), float32], Tensor[(420), float32], Tensor[(462), int16], Tensor[(50, 9), float64]) {
    %422 = cast(%var_7257, dtype="float32") /* ty=Tensor[(72), float32] */;
    %423 = cast(%var_7258, dtype="float32") /* ty=Tensor[(420), float32] */;
    %424 = cast(%var_7259, dtype="int16") /* ty=Tensor[(462), int16] */;
    %425 = cast(%var_7260, dtype="float64") /* ty=Tensor[(50, 9), float64] */;
    %426 = cast(%var_7259, dtype="float64") /* ty=Tensor[(462), float64] */;
    %427 = reshape(%422, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
    %428 = reshape(%423, newshape=[1, 420]) /* ty=Tensor[(1, 420), float32] */;
    %429 = reshape(%424, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), int16] */;
    %430 = reshape(%425, newshape=[10, 3, 15]) /* ty=Tensor[(10, 3, 15), float64] */;
    %431 = reshape(%426, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), float64] */;
    %432 = @func_3702(%427, %428, %429, %430, %431) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(36, 2), float32], Tensor[(1, 420), float32], Tensor[(11, 7, 6), int64], Tensor[(11, 7, 6), int8], Tensor[(10, 3, 15), uint32], Tensor[(11, 7, 6), bool], Tensor[(11, 7, 6), int8], Tensor[(11, 7, 6), int64]) */;
    %433 = @func_6768() /* ty=Tensor[(13, 7, 11), float32] */;
    %434 = %432.5;
    (%433, %434, %var_7257, %var_7258, %var_7259, %var_7260)
  };
  %435(%var_7269, %var_7270, %var_7271, %var_7272) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int8], Tensor[(72), float32], Tensor[(420), float32], Tensor[(462), int16], Tensor[(50, 9), float64]) */
}

def @func_5365() -> Tensor[(13, 7, 11), bool] {
  @func_5363() /* ty=Tensor[(13, 7, 11), bool] */
}

def @func_1290(%var_1238: Tensor[(13, 7, 11), bool], %var_1274: Tensor[(13, 7, 11), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) {
  %436 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
  %437 = %436.0;
  %438 = cast(%var_1238, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %442 = cast(meta[relay.Constant][13] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %443 = cast(meta[relay.Constant][13] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %444 = reshape(%442, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %445 = reshape(%443, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %446 = @func_770(%444, %445) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) */;
  %447 = %446.0;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
  %449 = cast(meta[relay.Constant][13] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %450 = reshape(%448, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %451 = reshape(%449, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
  %452 = @func_770(%450, %451) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) */;
  %453 = cast(%437, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %454 = sin(%453) /* ty=Tensor[(13, 7, 11), float64] */;
  %455 = cast(%var_1274, dtype="int16") /* ty=Tensor[(13, 7, 11), int16] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="int16") /* ty=Tensor[(13, 7, 11), int16] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %459 = bitwise_and(%457, %458) /* ty=Tensor[(13, 7, 11), int16] */;
  %460 = cast(%454, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%459, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %464 = floor_divide(%440, %441) /* ty=Tensor[(13, 7, 11), float32] */;
  %465 = %452.1;
  %466 = multiply(%462, %463) /* ty=Tensor[(13, 7, 11), float64] */;
  (%464, %447, meta[relay.Constant][13] /* ty=Tensor[(330), float64] */, %465, %466)
}

def @func_2996(%var_2994: Tensor[(11, 7, 3), float32], %var_2995: Tensor[(11, 7, 3), float32]) -> (Tensor[(11, 7, 3), float32], Tensor[(11, 7, 3), bool], Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], Tensor[(960), int32]) {
  %480 = fn (%var_2945: Tensor[(11, 7, 3), float32], %var_2959: Tensor[(11, 7, 3), float32]) -> (Tensor[(11, 7, 3), float32], Tensor[(11, 7, 3), bool], Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], Tensor[(960), int32]) {
    %467 = cast(%var_2945, dtype="float32") /* ty=Tensor[(11, 7, 3), float32] */;
    %468 = cast(%var_2959, dtype="bool") /* ty=Tensor[(11, 7, 3), bool] */;
    %469 = shape_of(%var_2945, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%var_2945, dtype="bool") /* ty=Tensor[(11, 7, 3), bool] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %472 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %473 = cast(meta[relay.Constant][14] /* ty=Tensor[(960), int32] */, dtype="int32") /* ty=Tensor[(960), int32] */;
    %474 = reshape(%473, newshape=[960]) /* ty=Tensor[(960), int32] */;
    %475 = @func_1503(%474) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], int32, Tensor[(960), int32]) */;
    %476 = sigmoid(%467) /* ty=Tensor[(11, 7, 3), float32] */;
    %477 = less(%470, %471) /* ty=Tensor[(11, 7, 3), bool] */;
    %478 = %472.0;
    %479 = %475.1;
    (%476, %477, %478, %479, meta[relay.Constant][14] /* ty=Tensor[(960), int32] */)
  };
  %480(%var_2994, %var_2995) /* ty=(Tensor[(11, 7, 3), float32], Tensor[(11, 7, 3), bool], Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], Tensor[(960), int32]) */
}

def @func_6196() -> (Tensor[(13, 7, 11), float32], Tensor[(4, 12, 7), bool]) {
  @func_6194() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(4, 12, 7), bool]) */
}

def @func_2489(%var_2487: Tensor[(96), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(96), float64]) {
  @func_2486(%var_2487) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(96), float64]) */
}

def @func_6506(%var_6505: Tensor[(8, 3, 15), float64]) -> (Tensor[(8, 3, 15), float32], Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32], Tensor[(8, 3, 15), float64], Tensor[(13, 7, 11), float32]) {
  %496 = fn (%var_6466: Tensor[(8, 3, 15), float64]) -> (Tensor[(8, 3, 15), float32], Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32], Tensor[(8, 3, 15), float64], Tensor[(13, 7, 11), float32]) {
    %481 = @func_1790() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), bool]) */;
    %482 = %481.0;
    %483 = cast(%482, dtype="float32") /* ty=Tensor[(1, 3, 15), float32] */;
    %484 = cast(%var_6466, dtype="float32") /* ty=Tensor[(8, 3, 15), float32] */;
    %485 = @func_6279() /* ty=(Tensor[(5, 11, 6), float32],) */;
    %486 = @func_5408() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %487 = cast(%var_6466, dtype="float32") /* ty=Tensor[(8, 3, 15), float32] */;
    %488 = sin(%487) /* ty=Tensor[(8, 3, 15), float32] */;
    %489 = cast(%488, dtype="float64") /* ty=Tensor[(8, 3, 15), float64] */;
    %490 = @func_3794() /* ty=(Tensor[(5, 11, 6), int32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), uint8]) */;
    %491 = add(%483, %484) /* ty=Tensor[(8, 3, 15), float32] */;
    %492 = %485.0;
    %493 = %486.0;
    %494 = acosh(%489) /* ty=Tensor[(8, 3, 15), float64] */;
    %495 = %490.2;
    (%491, %492, %493, %494, %495)
  };
  %496(%var_6505) /* ty=(Tensor[(8, 3, 15), float32], Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32], Tensor[(8, 3, 15), float64], Tensor[(13, 7, 11), float32]) */
}

def @func_6858() -> Tensor[(4, 12, 7), float32] {
  @func_6856() /* ty=Tensor[(4, 12, 7), float32] */
}

def @func_2667() -> (Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64]) {
  %497 = @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %498 = %497.0;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %500 = @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */;
  %501 = exp(%499) /* ty=Tensor[(1, 3, 15), float64] */;
  %502 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %503 = %500.0;
  (%501, %502, %503)
}

def @func_6321(%var_6309: Tensor[(2, 12, 9), uint32], %var_6310: Tensor[(2, 12, 9), uint32]) -> Tensor[(2, 12, 9), bool] {
  %504 = cast(%var_6310, dtype="bool") /* ty=Tensor[(2, 12, 9), bool] */;
  %505 = shape_of(%var_6309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%var_6309, dtype="bool") /* ty=Tensor[(2, 12, 9), bool] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%506, %507) /* ty=Tensor[(2, 12, 9), bool] */
}

def @func_4205() -> (Tensor[(5, 11, 6), float32],) {
  @func_4203() /* ty=(Tensor[(5, 11, 6), float32],) */
}

def @func_2533(%var_2524: Tensor[(1, 8, 9), float32]) -> (Tensor[(1, 8, 9), float32],) {
  %508 = cast(%var_2524, dtype="float32") /* ty=Tensor[(1, 8, 9), float32] */;
  %509 = erf(%508) /* ty=Tensor[(1, 8, 9), float32] */;
  (%509,)
}

def @func_3963() -> Tensor[(13, 7, 11), float32] {
  @func_3961() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_4940() -> (Tensor[(13, 7, 11), float32],) {
  %512 = fn () -> (Tensor[(13, 7, 11), float32],) {
    %510 = @func_4903() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
    %511 = %510.0;
    (%511,)
  };
  %512() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_6454(%var_6452: Tensor[(1, 3, 15), float64]) -> (Tensor[(?, 3, 15), float64],) {
  @func_6451(%var_6452) /* ty=(Tensor[(?, 3, 15), float64],) */
}

def @func_2280() -> (Tensor[(13, 7, 11), float32],) {
  @func_2278() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_2929() -> Tensor[(13, 7, 11), float64] {
  %521 = fn () -> Tensor[(13, 7, 11), float64] {
    %513 = @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %514 = %513.0;
    %515 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %516 = %515.0;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
    %518 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %519 = cast(%514, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
    %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%519, %520) /* ty=Tensor[(13, 7, 11), float64] */
  };
  %521() /* ty=Tensor[(13, 7, 11), float64] */
}

def @func_5582() -> (Tensor[(11, 7, 6), int64],) {
  %524 = fn () -> (Tensor[(11, 7, 6), int64],) {
    %522 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
    %523 = %522.1;
    (%523,)
  };
  %524() /* ty=(Tensor[(11, 7, 6), int64],) */
}

def @func_6778() -> (Tensor[(11, 7, 6), int64], Tensor[(13, 7, 11), float64]) {
  %528 = fn () -> (Tensor[(11, 7, 6), int64], Tensor[(13, 7, 11), float64]) {
    %525 = @func_5581() /* ty=(Tensor[(11, 7, 6), int64],) */;
    %526 = %525.0;
    %527 = @func_4247() /* ty=Tensor[(13, 7, 11), float64] */;
    (%526, %527)
  };
  %528() /* ty=(Tensor[(11, 7, 6), int64], Tensor[(13, 7, 11), float64]) */
}

def @func_1692() -> (Tensor[(5, 11, 6), float64],) {
  %529 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %530 = %529.2;
  (%530,)
}

def @func_5290() -> (Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %536 = fn () -> (Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
    %531 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
    %532 = @func_4157() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(96), float64], Tensor[(96), float64]) */;
    %533 = @func_4247() /* ty=Tensor[(13, 7, 11), float64] */;
    %534 = %531.0;
    %535 = %532.0;
    (%533, %534, %535)
  };
  %536() /* ty=(Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */
}

def @func_7244() -> (Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32]) {
  %537 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %538 = @func_6279() /* ty=(Tensor[(5, 11, 6), float32],) */;
  %539 = @func_5363() /* ty=Tensor[(13, 7, 11), bool] */;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %541 = %537.0;
  %542 = %538.0;
  %543 = exp(%540) /* ty=Tensor[(13, 7, 11), float32] */;
  (%541, %542, %543)
}

def @func_5923() -> Tensor[(1, 3, 15), float64] {
  %545 = fn () -> Tensor[(1, 3, 15), float64] {
    %544 = @func_2667() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64]) */;
    %544.0
  };
  %545() /* ty=Tensor[(1, 3, 15), float64] */
}

def @func_5565() -> (Tensor[(4, 12, 7), bool], Tensor[(13, 7, 11), float64]) {
  %552 = fn () -> (Tensor[(4, 12, 7), bool], Tensor[(13, 7, 11), float64]) {
    %546 = @func_5385() /* ty=(Tensor[(4, 12, 7), bool],) */;
    %547 = @func_5289() /* ty=(Tensor[(13, 7, 11), float64], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
    %548 = %547.0;
    %549 = cast(%548, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
    %550 = %546.0;
    %551 = erf(%549) /* ty=Tensor[(13, 7, 11), float64] */;
    (%550, %551)
  };
  %552() /* ty=(Tensor[(4, 12, 7), bool], Tensor[(13, 7, 11), float64]) */
}

def @func_2777(%var_2771: Tensor[(324), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(324), float32]) {
  %553 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %554 = @func_1461() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %555 = cast(%var_2771, dtype="float32") /* ty=Tensor[(324), float32] */;
  %556 = cast(%var_2771, dtype="float32") /* ty=Tensor[(324), float32] */;
  %557 = reshape(%555, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), float32] */;
  %558 = reshape(%556, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), float32] */;
  %559 = @func_2249(%557, %558) /* ty=(Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32], Tensor[(13, 7, 11), float32]) */;
  %560 = %553.0;
  %561 = %554.0;
  %562 = %559.2;
  (%560, %561, %562, %var_2771)
}

def @func_1294(%var_1292: Tensor[(13, 7, 11), bool], %var_1293: Tensor[(13, 7, 11), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) {
  @func_1290(%var_1292, %var_1293) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) */
}

def @func_805(%var_803: Tensor[(11, 7, 6), int64], %var_804: Tensor[(11, 7, 6), int64]) -> (Tensor[(11, 7, 6), int64],) {
  %568 = fn (%var_793: Tensor[(11, 7, 6), int64], %var_794: Tensor[(11, 7, 6), int64]) -> (Tensor[(11, 7, 6), int64],) {
    %563 = cast(%var_794, dtype="int64") /* ty=Tensor[(11, 7, 6), int64] */;
    %564 = shape_of(%var_793, dtype="int32") /* ty=Tensor[(3), int32] */;
    %565 = cast(%var_793, dtype="int64") /* ty=Tensor[(11, 7, 6), int64] */;
    %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %567 = minimum(%565, %566) /* ty=Tensor[(11, 7, 6), int64] */;
    (%567,)
  };
  %568(%var_803, %var_804) /* ty=(Tensor[(11, 7, 6), int64],) */
}

def @func_2830(%var_2808: Tensor[(72), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(1, 8, 9), float32], Tensor[(72), float32]) {
  %569 = @func_2563() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %570 = @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %571 = cast(%var_2808, dtype="float32") /* ty=Tensor[(72), float32] */;
  %572 = reshape(%571, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), float32] */;
  %573 = @func_2533(%572) /* ty=(Tensor[(1, 8, 9), float32],) */;
  %574 = %569.0;
  %575 = %570.0;
  %576 = %573.0;
  (%574, %575, %576, %var_2808)
}

def @func_7114() -> (Tensor[(5, 11, 6), float64],) {
  %577 = @func_2871() /* ty=Tensor[(5, 11, 6), float64] */;
  (%577,)
}

def @func_7430() -> (Tensor[(13, 7, 11), float32],) {
  %578 = @func_2563() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %579 = %578.0;
  (%579,)
}

def @func_4797(%var_4784: Tensor[(2, 8, 2), float64]) -> (Tensor[(2, 8, 2), float64],) {
  %580 = cast(%var_4784, dtype="float64") /* ty=Tensor[(2, 8, 2), float64] */;
  %581 = atanh(%580) /* ty=Tensor[(2, 8, 2), float64] */;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(2, 8, 2), float64] */;
  %583 = sinh(%582) /* ty=Tensor[(2, 8, 2), float64] */;
  (%583,)
}

def @func_6888() -> Tensor[(5, 11, 6), float64] {
  %584 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
  %584.2
}

def @func_2249(%var_2239: Tensor[(6, 9, 6), float32], %var_2240: Tensor[(6, 9, 6), float32]) -> (Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32], Tensor[(13, 7, 11), float32]) {
  %585 = cast(%var_2240, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %586 = shape_of(%var_2239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%var_2239, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %589 = cast(%var_2240, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %590 = subtract(%587, %588) /* ty=Tensor[(6, 9, 6), float32] */;
  %591 = acosh(%589) /* ty=Tensor[(6, 9, 6), float32] */;
  %592 = @func_2033() /* ty=Tensor[(13, 7, 11), float32] */;
  (%590, %591, %592)
}

def @func_1995(%var_1982: Tensor[(3, 10, 14), float32]) -> Tensor[(3, 10, 14), float32] {
  %593 = cast(%var_1982, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
  sigmoid(%593) /* ty=Tensor[(3, 10, 14), float32] */
}

def @func_3537() -> Tensor[(11, 7, 6), int64] {
  %595 = fn () -> Tensor[(11, 7, 6), int64] {
    %594 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
    %594.1
  };
  %595() /* ty=Tensor[(11, 7, 6), int64] */
}

def @func_3961() -> Tensor[(13, 7, 11), float32] {
  @func_2787() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_6617() -> (Tensor[(13, 7, 11), float64],) {
  @func_6615() /* ty=(Tensor[(13, 7, 11), float64],) */
}

def @func_2780(%var_2778: Tensor[(324), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(324), float32]) {
  @func_2777(%var_2778) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(324), float32]) */
}

def @func_3313() -> Tensor[(13, 7, 11), float32] {
  %597 = fn () -> Tensor[(13, 7, 11), float32] {
    %596 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %596.0
  };
  %597() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_3388() -> (Tensor[(5, 11, 6), float64],) {
  %599 = fn () -> (Tensor[(5, 11, 6), float64],) {
    %598 = @func_2871() /* ty=Tensor[(5, 11, 6), float64] */;
    (%598,)
  };
  %599() /* ty=(Tensor[(5, 11, 6), float64],) */
}

def @func_5363() -> Tensor[(13, 7, 11), bool] {
  %600 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %600.0
}

def @func_2486(%var_2484: Tensor[(96), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(96), float64]) {
  %601 = @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %602 = cast(%var_2484, dtype="float64") /* ty=Tensor[(96), float64] */;
  %603 = reshape(%602, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float64] */;
  %604 = @func_1847(%603) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(3, 16, 2), bool]) */;
  %605 = %601.0;
  %606 = %604.0;
  (%605, %606, %var_2484)
}

def @func_5511() -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  @func_5509() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */
}

def @func_6241() -> Tensor[(13, 7, 11), float32] {
  %607 = @func_2265() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %607.0
}

def @func_4853(%var_4851: Tensor[(16, 6, 8), int64], %var_4852: Tensor[(162, 2), float32]) -> (Tensor[(16, 6, 8), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float32]) {
  %619 = fn (%var_4840: Tensor[(16, 6, 8), int64], %var_4848: Tensor[(162, 2), float32]) -> (Tensor[(16, 6, 8), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float32]) {
    %608 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 6, 8), int64] */, dtype="int64") /* ty=Tensor[(16, 6, 8), int64] */;
    %609 = shape_of(%var_4840, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%var_4840, dtype="int64") /* ty=Tensor[(16, 6, 8), int64] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %612 = cast(%var_4848, dtype="float32") /* ty=Tensor[(162, 2), float32] */;
    %613 = cast(%var_4848, dtype="float32") /* ty=Tensor[(162, 2), float32] */;
    %614 = reshape(%612, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), float32] */;
    %615 = reshape(%613, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), float32] */;
    %616 = @func_2249(%614, %615) /* ty=(Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32], Tensor[(13, 7, 11), float32]) */;
    %617 = bitwise_or(%610, %611) /* ty=Tensor[(16, 6, 8), int64] */;
    %618 = %616.0;
    (%617, %618, %var_4848)
  };
  %619(%var_4851, %var_4852) /* ty=(Tensor[(16, 6, 8), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float32]) */
}

def @func_3796() -> (Tensor[(5, 11, 6), int32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), uint8]) {
  @func_3794() /* ty=(Tensor[(5, 11, 6), int32], Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), uint8]) */
}

def @func_6243() -> Tensor[(13, 7, 11), float32] {
  @func_6241() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_2100() -> (Tensor[(1, 3, 15), float64],) {
  %622 = fn () -> (Tensor[(1, 3, 15), float64],) {
    %620 = @func_1864() /* ty=(Tensor[(1, 3, 15), float64],) */;
    %621 = %620.0;
    (%621,)
  };
  %622() /* ty=(Tensor[(1, 3, 15), float64],) */
}

def @func_4248() -> Tensor[(13, 7, 11), float64] {
  %624 = fn () -> Tensor[(13, 7, 11), float64] {
    %623 = @func_3943() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float64], Tensor[(5, 11, 6), int8], Tensor[(13, 7, 11), float32]) */;
    %623.1
  };
  %624() /* ty=Tensor[(13, 7, 11), float64] */
}

def @func_6281() -> (Tensor[(5, 11, 6), float32],) {
  @func_6279() /* ty=(Tensor[(5, 11, 6), float32],) */
}

def @func_1998(%var_1996: Tensor[(3, 10, 14), float32]) -> Tensor[(3, 10, 14), float32] {
  @func_1995(%var_1996) /* ty=Tensor[(3, 10, 14), float32] */
}

def @func_5705() -> Tensor[(13, 7, 11), float32] {
  %626 = fn () -> Tensor[(13, 7, 11), float32] {
    %625 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %625.0
  };
  %626() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_1451() -> (Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) {
  %652 = fn () -> (Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) {
    %627 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
    %628 = cast(%627, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
    %629 = cast(%627, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
    %630 = reshape(%628, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), bool] */;
    %631 = reshape(%629, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), float64] */;
    %632 = @func_1290(%630, %631) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) */;
    %633 = %632.1;
    %634 = cast(%633, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
    %635 = cast(%633, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
    %636 = reshape(%634, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
    %637 = reshape(%635, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), float64] */;
    %638 = @func_770(%636, %637) /* ty=(Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(5, 11, 6), float32]) */;
    %639 = %638.1;
    %640 = cast(%639, dtype="float64") /* ty=Tensor[(5, 11, 6), float64] */;
    %641 = cast(%627, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
    %642 = cast(%627, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
    %643 = reshape(%641, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), bool] */;
    %644 = reshape(%642, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), float64] */;
    %645 = @func_1290(%643, %644) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) */;
    %646 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %647 = reshape(%646, newshape=[]) /* ty=int32 */;
    %648 = @func_1355(%647) /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), bool], Tensor[(10, 16, 6), bool], int32, Tensor[(120, 8), int32]) */;
    %649 = sin(%640) /* ty=Tensor[(5, 11, 6), float64] */;
    %650 = %645.3;
    %651 = %648.1;
    (%627, %633, %649, %650, %651, 4 /* ty=int32 */)
  };
  %652() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */
}

def @func_1600() -> (Tensor[(3, 16, 2), float64], Tensor[(13, 7, 11), bool]) {
  %657 = fn () -> (Tensor[(3, 16, 2), float64], Tensor[(13, 7, 11), bool]) {
    %653 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 16, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
    %654 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
    %655 = asinh(%653) /* ty=Tensor[(3, 16, 2), float64] */;
    %656 = %654.0;
    (%655, %656)
  };
  %657() /* ty=(Tensor[(3, 16, 2), float64], Tensor[(13, 7, 11), bool]) */
}

def @func_3859(%var_3849: Tensor[(432), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(8, 9, 6), bool], Tensor[(432), float32]) {
  %658 = @func_2228() /* ty=(Tensor[(13, 7, 11), float32],) */;
  %659 = cast(%var_3849, dtype="float32") /* ty=Tensor[(432), float32] */;
  %660 = reshape(%659, newshape=[8, 9, 6]) /* ty=Tensor[(8, 9, 6), float32] */;
  %661 = @func_505(%660) /* ty=(Tensor[(8, 9, 6), bool],) */;
  %662 = %658.0;
  %663 = %661.0;
  (%662, %663, %var_3849)
}

def @func_1358(%var_1356: int32) -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), bool], Tensor[(10, 16, 6), bool], int32, Tensor[(120, 8), int32]) {
  @func_1355(%var_1356) /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), bool], Tensor[(10, 16, 6), bool], int32, Tensor[(120, 8), int32]) */
}

def @func_3862(%var_3860: Tensor[(432), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(8, 9, 6), bool], Tensor[(432), float32]) {
  @func_3859(%var_3860) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(8, 9, 6), bool], Tensor[(432), float32]) */
}

def @func_4449() -> (Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), float32]) {
  %667 = fn () -> (Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), float32]) {
    %664 = @func_1692() /* ty=(Tensor[(5, 11, 6), float64],) */;
    %665 = %664.0;
    %666 = @func_3001() /* ty=Tensor[(13, 7, 11), float32] */;
    (%665, %666)
  };
  %667() /* ty=(Tensor[(5, 11, 6), float64], Tensor[(13, 7, 11), float32]) */
}

def @func_5745(%var_5743: Tensor[(12, 2, 7), float32], %var_5744: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), int8],) {
  %675 = fn (%var_5735: Tensor[(12, 2, 7), float32], %var_5738: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), int8],) {
    %668 = cast(%var_5735, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %669 = asin(%668) /* ty=Tensor[(12, 2, 7), float32] */;
    %670 = cast(%var_5738, dtype="int8") /* ty=Tensor[(12, 2, 7), int8] */;
    %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
    %672 = cast(%669, dtype="int8") /* ty=Tensor[(12, 2, 7), int8] */;
    %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %674 = logical_xor(%672, %673) /* ty=Tensor[(12, 2, 7), int8] */;
    (%674,)
  };
  %675(%var_5743, %var_5744) /* ty=(Tensor[(12, 2, 7), int8],) */
}

def @func_1093(%var_1091: int32, %var_1092: Tensor[(10, 16, 6), int32]) -> (Tensor[(10, 16, 6), bool],) {
  %679 = fn (%var_1085: int32, %var_1086: Tensor[(10, 16, 6), int32]) -> (Tensor[(10, 16, 6), bool],) {
    %676 = cast(%var_1085, dtype="bool") /* ty=bool */;
    %677 = cast(%var_1086, dtype="bool") /* ty=Tensor[(10, 16, 6), bool] */;
    %678 = less(%676, %677) /* ty=Tensor[(10, 16, 6), bool] */;
    (%678,)
  };
  %679(%var_1091, %var_1092) /* ty=(Tensor[(10, 16, 6), bool],) */
}

def @func_1750() -> (Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) {
  %680 = cast(meta[relay.Constant][17] /* ty=Tensor[(462), int64] */, dtype="int64") /* ty=Tensor[(462), int64] */;
  %681 = cast(meta[relay.Constant][17] /* ty=Tensor[(462), int64] */, dtype="int64") /* ty=Tensor[(462), int64] */;
  %682 = reshape(%680, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), int64] */;
  %683 = reshape(%681, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), int64] */;
  %684 = @func_802(%682, %683) /* ty=(Tensor[(11, 7, 6), int64],) */;
  %685 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %686 = %684.0;
  (%685, %686, meta[relay.Constant][17] /* ty=Tensor[(462), int64] */)
}

def @func_7309() -> Tensor[(3, 3, 14), float64] {
  %690 = fn () -> Tensor[(3, 3, 14), float64] {
    %687 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(3, 3, 14), float32] */;
    %688 = sigmoid(%687) /* ty=Tensor[(3, 3, 14), float32] */;
    %689 = cast(%688, dtype="float64") /* ty=Tensor[(3, 3, 14), float64] */;
    atanh(%689) /* ty=Tensor[(3, 3, 14), float64] */
  };
  %690() /* ty=Tensor[(3, 3, 14), float64] */
}

def @func_1461() -> (Tensor[(13, 7, 11), bool],) {
  %691 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
  %692 = %691.0;
  (%692,)
}

def @func_3223(%var_3220: Tensor[(13, 7, 11), float32], %var_3221: int32, %var_3222: Tensor[(60, 16), int32]) -> (Tensor[(13, 7, 11), int64], Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], int32, Tensor[(60, 16), int32]) {
  %707 = fn (%var_3203: Tensor[(13, 7, 11), float32], %var_3216: int32, %var_3217: Tensor[(60, 16), int32]) -> (Tensor[(13, 7, 11), int64], Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], int32, Tensor[(60, 16), int32]) {
    %693 = @func_2619() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %694 = %693.0;
    %695 = cast(%var_3203, dtype="int64") /* ty=Tensor[(13, 7, 11), int64] */;
    %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(%694, dtype="int64") /* ty=Tensor[(13, 7, 11), int64] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %699 = cast(%var_3216, dtype="int32") /* ty=int32 */;
    %700 = cast(%var_3217, dtype="int32") /* ty=Tensor[(60, 16), int32] */;
    %701 = reshape(%699, newshape=[]) /* ty=int32 */;
    %702 = reshape(%700, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), int32] */;
    %703 = @func_1090(%701, %702) /* ty=(Tensor[(10, 16, 6), bool],) */;
    %704 = bitwise_or(%697, %698) /* ty=Tensor[(13, 7, 11), int64] */;
    %705 = @func_2033() /* ty=Tensor[(13, 7, 11), float32] */;
    %706 = %703.0;
    (%704, %705, %706, %var_3216, %var_3217)
  };
  %707(%var_3220, %var_3221, %var_3222) /* ty=(Tensor[(13, 7, 11), int64], Tensor[(13, 7, 11), float32], Tensor[(10, 16, 6), bool], int32, Tensor[(60, 16), int32]) */
}

def @func_3709(%var_3704: Tensor[(36, 2), float32], %var_3705: Tensor[(1, 420), float32], %var_3706: Tensor[(11, 7, 6), int16], %var_3707: Tensor[(10, 3, 15), float64], %var_3708: Tensor[(11, 7, 6), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(36, 2), float32], Tensor[(1, 420), float32], Tensor[(11, 7, 6), int64], Tensor[(11, 7, 6), int8], Tensor[(10, 3, 15), uint32], Tensor[(11, 7, 6), bool], Tensor[(11, 7, 6), int8], Tensor[(11, 7, 6), int64]) {
  @func_3702(%var_3704, %var_3705, %var_3706, %var_3707, %var_3708) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(36, 2), float32], Tensor[(1, 420), float32], Tensor[(11, 7, 6), int64], Tensor[(11, 7, 6), int8], Tensor[(10, 3, 15), uint32], Tensor[(11, 7, 6), bool], Tensor[(11, 7, 6), int8], Tensor[(11, 7, 6), int64]) */
}

def @func_1482() -> Tensor[(13, 7, 11), float32] {
  %709 = fn () -> Tensor[(13, 7, 11), float32] {
    %708 = @func_1230() /* ty=(Tensor[(13, 7, 11), float32],) */;
    %708.0
  };
  %709() /* ty=Tensor[(13, 7, 11), float32] */
}

def @func_3702(%var_3642: Tensor[(36, 2), float32], %var_3643: Tensor[(1, 420), float32], %var_3657: Tensor[(11, 7, 6), int16], %var_3666: Tensor[(10, 3, 15), float64], %var_3686: Tensor[(11, 7, 6), float64]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(36, 2), float32], Tensor[(1, 420), float32], Tensor[(11, 7, 6), int64], Tensor[(11, 7, 6), int8], Tensor[(10, 3, 15), uint32], Tensor[(11, 7, 6), bool], Tensor[(11, 7, 6), int8], Tensor[(11, 7, 6), int64]) {
  %710 = cast(%var_3642, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %711 = cast(%var_3643, dtype="float32") /* ty=Tensor[(1, 420), float32] */;
  %712 = reshape(%710, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %713 = reshape(%711, newshape=[420]) /* ty=Tensor[(420), float32] */;
  %714 = @func_3372(%712, %713) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(72), float32], Tensor[(3, 10, 14), float32], Tensor[(420), float32]) */;
  %715 = @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */;
  %716 = @func_3536() /* ty=Tensor[(11, 7, 6), int64] */;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(11, 7, 6), float64] */;
  %718 = rsqrt(%717) /* ty=Tensor[(11, 7, 6), float64] */;
  %719 = cast(%716, dtype="int16") /* ty=Tensor[(11, 7, 6), int16] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%718, dtype="int16") /* ty=Tensor[(11, 7, 6), int16] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %723 = left_shift(%721, %722) /* ty=Tensor[(11, 7, 6), int16] */;
  %724 = cast(%var_3657, dtype="int8") /* ty=Tensor[(11, 7, 6), int8] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%723, dtype="int8") /* ty=Tensor[(11, 7, 6), int8] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %728 = @func_2099() /* ty=(Tensor[(1, 3, 15), float64],) */;
  %729 = %728.0;
  %730 = cast(%729, dtype="uint32") /* ty=Tensor[(1, 3, 15), uint32] */;
  %731 = cast(%var_3666, dtype="uint32") /* ty=Tensor[(10, 3, 15), uint32] */;
  %732 = cast(%var_3686, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %733 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%718, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %736 = cast(%718, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %737 = asin(%736) /* ty=Tensor[(11, 7, 6), float32] */;
  %738 = cast(%var_3657, dtype="int8") /* ty=Tensor[(11, 7, 6), int8] */;
  %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%737, dtype="int8") /* ty=Tensor[(11, 7, 6), int8] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %742 = bitwise_or(%740, %741) /* ty=Tensor[(11, 7, 6), int8] */;
  %743 = cast(%742, dtype="int64") /* ty=Tensor[(11, 7, 6), int64] */;
  %744 = cast(%742, dtype="int64") /* ty=Tensor[(11, 7, 6), int64] */;
  %745 = reshape(%743, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), int64] */;
  %746 = reshape(%744, newshape=[11, 7, 6]) /* ty=Tensor[(11, 7, 6), int64] */;
  %747 = @func_802(%745, %746) /* ty=(Tensor[(11, 7, 6), int64],) */;
  %748 = @func_2156() /* ty=Tensor[(13, 7, 11), float32] */;
  %749 = %714.0;
  %750 = %715.1;
  %751 = add(%726, %727) /* ty=Tensor[(11, 7, 6), int8] */;
  %752 = logical_xor(%730, %731) /* ty=Tensor[(10, 3, 15), uint32] */;
  %753 = logical_and(%734, %735) /* ty=Tensor[(11, 7, 6), bool] */;
  %754 = %747.0;
  (%748, %749, %var_3642, %var_3643, %750, %751, %752, %753, %742, %754)
}

def @func_1368() -> Tensor[(13, 7, 11), float32] {
  %755 = @func_1167() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) */;
  %755.1
}

def @func_6041(%var_6017: Tensor[(1, 11, 9), float64]) -> (Tensor[(?, 11, 9), bool], Tensor[(13, 7, 11), bool]) {
  %756 = cast(%var_6017, dtype="float64") /* ty=Tensor[(1, 11, 9), float64] */;
  %757 = cos(%756) /* ty=Tensor[(1, 11, 9), float64] */;
  %758 = cast(%757, dtype="float32") /* ty=Tensor[(1, 11, 9), float32] */;
  %759 = erf(%758) /* ty=Tensor[(1, 11, 9), float32] */;
  %760 = cast(%var_6017, dtype="bool") /* ty=Tensor[(1, 11, 9), bool] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%759, dtype="bool") /* ty=Tensor[(1, 11, 9), bool] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %764 = equal(%762, %763) /* ty=Tensor[(?, 11, 9), bool] */;
  %765 = cast(%764, dtype="bool") /* ty=Tensor[(?, 11, 9), bool] */;
  %766 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%757, dtype="bool") /* ty=Tensor[(1, 11, 9), bool] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %769 = @func_2318() /* ty=(Tensor[(13, 7, 11), bool],) */;
  %770 = not_equal(%767, %768) /* ty=Tensor[(?, 11, 9), bool] */;
  %771 = %769.0;
  (%770, %771)
}

def @func_7432() -> (Tensor[(13, 7, 11), float32],) {
  @func_7430() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_5732() -> (Tensor[(5, 1, 15), float64],) {
  @func_5730() /* ty=(Tensor[(5, 1, 15), float64],) */
}

def @func_5854() -> (Tensor[(13, 7, 11), float32],) {
  %776 = fn () -> (Tensor[(13, 7, 11), float32],) {
    %772 = @func_5509() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) */;
    %773 = %772.1;
    %774 = cast(%773, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
    %775 = atanh(%774) /* ty=Tensor[(13, 7, 11), float32] */;
    (%775,)
  };
  %776() /* ty=(Tensor[(13, 7, 11), float32],) */
}

def @func_4508(%var_4468: Tensor[(72), float32]) -> (Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32], Tensor[(72), float32], Tensor[(13, 7, 11), float32], Tensor[(13, 7, 11), float32]) {
  %777 = cast(%var_4468, dtype="float32") /* ty=Tensor[(72), float32] */;
  %778 = reshape(%777, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %779 = @func_2830(%778) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(1, 3, 15), float64], Tensor[(1, 8, 9), float32], Tensor[(72), float32]) */;
  %780 = %779.0;
  %781 = cast(%780, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %782 = cast(%780, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %783 = reshape(%781, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), bool] */;
  %784 = reshape(%782, newshape=[13, 7, 11]) /* ty=Tensor[(13, 7, 11), float64] */;
  %785 = @func_1290(%783, %784) /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(330), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), float64]) */;
  %786 = @func_1368() /* ty=Tensor[(13, 7, 11), float32] */;
  %787 = %785.0;
  %788 = @func_3001() /* ty=Tensor[(13, 7, 11), float32] */;
  (%786, %780, %var_4468, %787, %788)
}

def @func_6044(%var_6042: Tensor[(1, 11, 9), float64]) -> (Tensor[(?, 11, 9), bool], Tensor[(13, 7, 11), bool]) {
  @func_6041(%var_6042) /* ty=(Tensor[(?, 11, 9), bool], Tensor[(13, 7, 11), bool]) */
}

def @func_6856() -> Tensor[(4, 12, 7), float32] {
  %789 = @func_5564() /* ty=(Tensor[(4, 12, 7), bool], Tensor[(13, 7, 11), float64]) */;
  %790 = %789.0;
  %791 = cast(%790, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
  cos(%791) /* ty=Tensor[(4, 12, 7), float32] */
}

def @func_2872() -> Tensor[(5, 11, 6), float64] {
  %793 = fn () -> Tensor[(5, 11, 6), float64] {
    %792 = @func_1450() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), float64], Tensor[(5, 11, 6), uint8], Tensor[(13, 7, 11), bool], int32) */;
    %792.2
  };
  %793() /* ty=Tensor[(5, 11, 6), float64] */
}

def @func_5637() -> Tensor[(4, 12, 7), bool] {
  @func_5635() /* ty=Tensor[(4, 12, 7), bool] */
}

def @func_2669() -> (Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64]) {
  @func_2667() /* ty=(Tensor[(1, 3, 15), float64], Tensor[(13, 7, 11), float32], Tensor[(5, 11, 6), float64]) */
}

def @func_5797(%var_5795: uint8, %var_5796: Tensor[(16, 5, 12), uint8]) -> Tensor[(16, 5, 12), bool] {
  %799 = fn (%var_5782: uint8, %var_5783: Tensor[(16, 5, 12), uint8]) -> Tensor[(16, 5, 12), bool] {
    %794 = cast(%var_5782, dtype="bool") /* ty=bool */;
    %795 = cast(%var_5783, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
    %796 = greater(%794, %795) /* ty=Tensor[(16, 5, 12), bool] */;
    %797 = cast(%796, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
    %798 = cast(%var_5782, dtype="bool") /* ty=bool */;
    less_equal(%797, %798) /* ty=Tensor[(16, 5, 12), bool] */
  };
  %799(%var_5795, %var_5796) /* ty=Tensor[(16, 5, 12), bool] */
}

def @func_1752() -> (Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) {
  @func_1750() /* ty=(Tensor[(13, 7, 11), float32], Tensor[(11, 7, 6), int64], Tensor[(462), int64]) */
}

def @func_6401() -> Tensor[(11, 7, 6), int64] {
  @func_6399() /* ty=Tensor[(11, 7, 6), int64] */
}

def @func_5049(%var_5047: Tensor[(11, 7, 6), int64]) -> (Tensor[(11, 7, 6), bool], Tensor[(11, 7, 6), float32]) {
  @func_5046(%var_5047) /* ty=(Tensor[(11, 7, 6), bool], Tensor[(11, 7, 6), float32]) */
}

def @func_1167() -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), float32]) {
  %800 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %801 = cos(%800) /* ty=Tensor[(13, 7, 11), float64] */;
  %802 = cast(%801, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %803 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(13, 7, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 11), float64] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %806 = floor_mod(%804, %805) /* ty=Tensor[(13, 7, 11), float64] */;
  %807 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 7, 11), float64] */, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %808 = shape_of(%806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%806, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %811 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 7, 11), float64] */, dtype="float32") /* ty=Tensor[(13, 7, 11), float32] */;
  %812 = greater(%809, %810) /* ty=Tensor[(13, 7, 11), bool] */;
  %813 = acosh(%811) /* ty=Tensor[(13, 7, 11), float32] */;
  (%812, %813)
}

def @func_7246() -> (Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32]) {
  @func_7244() /* ty=(Tensor[(13, 7, 11), bool], Tensor[(5, 11, 6), float32], Tensor[(13, 7, 11), float32]) */
}

def @func_6961(%var_6943: Tensor[(13, 7, 11), float32]) -> (Tensor[(13, 7, 11), bool], Tensor[(13, 7, 11), uint64]) {
  %814 = @func_2156() /* ty=Tensor[(13, 7, 11), float32] */;
  %815 = cast(%var_6943, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%814, dtype="bool") /* ty=Tensor[(13, 7, 11), bool] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %819 = cast(%814, dtype="uint64") /* ty=Tensor[(13, 7, 11), uint64] */;
  %820 = shape_of(%var_6943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%var_6943, dtype="uint64") /* ty=Tensor[(13, 7, 11), uint64] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %823 = less(%817, %818) /* ty=Tensor[(13, 7, 11), bool] */;
  %824 = maximum(%821, %822) /* ty=Tensor[(13, 7, 11), uint64] */;
  (%823, %824)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen5/build/output.py", line 2580, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:43:28] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

