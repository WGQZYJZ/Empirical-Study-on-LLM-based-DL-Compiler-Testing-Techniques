==========mod==========
#[version = "0.0.5"]
def @func_2502() -> Tensor[(2, 12, 11), float64] {
  %0 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %0.0
}

def @func_3481(%var_3471: Tensor[(16, 1, 3), float64]) -> (Tensor[(16, 1, 3), float64],) {
  %1 = cast(%var_3471, dtype="float64") /* ty=Tensor[(16, 1, 3), float64] */;
  %2 = tan(%1) /* ty=Tensor[(16, 1, 3), float64] */;
  (%2,)
}

def @func_2219() -> (Tensor[(2, 12, 11), float32], Tensor[(273), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32], Tensor[(4, 3, 16), float64]) {
  %3 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %5 = reshape(%4, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
  %6 = @func_1012(%5) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(192, 14), uint32], Tensor[(192, 14), bool]) */;
  %7 = @func_1134() /* ty=(Tensor[(4, 3, 16), float32],) */;
  %8 = %7.0;
  %9 = cast(%8, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %10 = sqrt(%9) /* ty=Tensor[(4, 3, 16), float32] */;
  %11 = cast(%10, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %12 = @func_1827() /* ty=Tensor[(2, 12, 11), float32] */;
  %13 = %3.1;
  %14 = %6.0;
  %15 = asin(%11) /* ty=Tensor[(4, 3, 16), float64] */;
  (%12, %13, %14, meta[relay.Constant][0] /* ty=Tensor[(2688), float32] */, %15)
}

def @func_1927() -> (Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) {
  %16 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %17 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %18 = %17.0;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %20 = %16.0;
  %21 = acosh(%19) /* ty=Tensor[(192, 14), float32] */;
  (%20, %21)
}

def @func_4748() -> (Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2688), float32]) {
  %22 = @func_4554() /* ty=(Tensor[(2, 12, 11), float32],) */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %24 = reshape(%23, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
  %25 = @func_4345(%24) /* ty=(Tensor[(192, 14), bool], Tensor[(192, 14), float32], Tensor[(33), float64], Tensor[(1, 26880), float32]) */;
  %26 = %22.0;
  %27 = %25.1;
  (%26, %27, meta[relay.Constant][1] /* ty=Tensor[(2688), float32] */)
}

def @func_5658() -> (Tensor[(2688), float32], Tensor[(2, 12, 11), float32]) {
  %28 = @func_5211() /* ty=(Tensor[(2688), float32],) */;
  %29 = @func_2219() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(273), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32], Tensor[(4, 3, 16), float64]) */;
  %30 = %28.0;
  %31 = %29.0;
  (%30, %31)
}

def @func_3808() -> (Tensor[(192, 14), uint64],) {
  %32 = @func_3258() /* ty=(Tensor[(192, 14), uint64],) */;
  %33 = %32.0;
  (%33,)
}

def @func_4046(%var_4033: Tensor[(192), float32]) -> (Tensor[(273), float32], Tensor[(2112), float32], Tensor[(192), float32]) {
  %34 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
  %35 = %34.1;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(273), float32] */;
  %37 = cast(%var_4033, dtype="float32") /* ty=Tensor[(192), float32] */;
  %38 = reshape(%37, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %39 = @func_3943(%38) /* ty=(Tensor[(273), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(2112), float32]) */;
  %40 = sinh(%36) /* ty=Tensor[(273), float32] */;
  %41 = %39.3;
  (%40, %41, %var_4033)
}

def @func_3943(%var_3932: Tensor[(192), float32]) -> (Tensor[(273), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(2112), float32]) {
  %42 = @func_3536() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(192, 14), float32], Tensor[(192, 14), int64], Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(273), float64], Tensor[(33), float64], Tensor[(26880), float32]) */;
  %43 = cast(%var_3932, dtype="float32") /* ty=Tensor[(192), float32] */;
  %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %45 = reshape(%43, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
  %46 = reshape(%44, newshape=[192, 11]) /* ty=Tensor[(192, 11), float32] */;
  %47 = @func_1240(%45, %46) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 11), int32]) */;
  %48 = %42.5;
  %49 = %47.0;
  (%48, %49, %var_3932, meta[relay.Constant][2] /* ty=Tensor[(2112), float32] */)
}

def @func_5211() -> (Tensor[(2688), float32],) {
  %50 = @func_2219() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(273), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32], Tensor[(4, 3, 16), float64]) */;
  %51 = %50.3;
  (%51,)
}

def @main(%var_5854: uint64, %var_5855: Tensor[(11, 11, 3), uint64], %var_5875: Tensor[(4, 48), float32], %var_5960: Tensor[(273), float64]) -> (Tensor[(11, 11, 3), uint64], Tensor[(5, 15, 3), float32], Tensor[(4, 48), float32], Tensor[(192, 14), float32], Tensor[(2, 12, 11), bool], Tensor[(1, 264), float32], Tensor[(192, 14), float32], Tensor[(273), bool], Tensor[(273), float64], Tensor[(273), bool], Tensor[(192, 1), float32], Tensor[(33), float64], Tensor[(192, 14), bool], Tensor[(192, 14), uint32]) {
  %52 = cast(%var_5854, dtype="uint64") /* ty=uint64 */;
  %53 = cast(%var_5855, dtype="uint64") /* ty=Tensor[(11, 11, 3), uint64] */;
  %54 = cast(%var_5854, dtype="float32") /* ty=float32 */;
  %55 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 15, 3), uint64] */, dtype="float32") /* ty=Tensor[(5, 15, 3), float32] */;
  %56 = @func_3207() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2, 12, 11), int64]) */;
  %57 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 264), float32] */, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %58 = reshape(%57, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float32] */;
  %59 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %60 = cast(%var_5960, dtype="float64") /* ty=Tensor[(273), float64] */;
  %61 = reshape(%60, newshape=[273]) /* ty=Tensor[(273), float64] */;
  %62 = cast(%var_5960, dtype="float64") /* ty=Tensor[(273), float64] */;
  %63 = reshape(%62, newshape=[273]) /* ty=Tensor[(273), float64] */;
  %64 = cast(meta[relay.Constant][5] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %65 = reshape(%64, newshape=[11, 3, 1]) /* ty=Tensor[(11, 3, 1), float64] */;
  %66 = @func_1958(%65) /* ty=(Tensor[(11, 3, 1), float64], Tensor[(192, 1), float32]) */;
  %67 = cast(%var_5875, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
  %68 = reshape(%67, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %69 = @func_3038(%68) /* ty=(Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(2112), float32], Tensor[(192, 14), float64], Tensor[(192, 14), bool], Tensor[(192, 14), bool]) */;
  %70 = %69.4;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %72 = log(%71) /* ty=Tensor[(192, 14), float32] */;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %74 = asin(%73) /* ty=Tensor[(192, 14), float32] */;
  %75 = cast(%74, dtype="int8") /* ty=Tensor[(192, 14), int8] */;
  %76 = shape_of(%72, dtype="int32") /* ty=Tensor[(2), int32] */;
  %77 = cast(%72, dtype="int8") /* ty=Tensor[(192, 14), int8] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %79 = add(%77, %78) /* ty=Tensor[(192, 14), int8] */;
  %80 = cast(%74, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %81 = cast(%var_5854, dtype="bool") /* ty=bool */;
  %82 = greater(%80, %81) /* ty=Tensor[(192, 14), bool] */;
  %83 = cast(%82, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %84 = shape_of(%79, dtype="int32") /* ty=Tensor[(2), int32] */;
  %85 = cast(%79, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %87 = cast(%82, dtype="uint32") /* ty=Tensor[(192, 14), uint32] */;
  %88 = shape_of(%79, dtype="int32") /* ty=Tensor[(2), int32] */;
  %89 = cast(%79, dtype="uint32") /* ty=Tensor[(192, 14), uint32] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %91 = minimum(%52, %53) /* ty=Tensor[(11, 11, 3), uint64] */;
  %92 = floor_mod(%54, %55) /* ty=Tensor[(5, 15, 3), float32] */;
  %93 = %56.1;
  %94 = @func_5548(%58) /* ty=Tensor[(2, 12, 11), bool] */;
  %95 = %59.0;
  %96 = @func_5643(%61) /* ty=Tensor[(273), bool] */;
  %97 = @func_5643(%63) /* ty=Tensor[(273), bool] */;
  %98 = %66.1;
  %99 = equal(%85, %86) /* ty=Tensor[(192, 14), bool] */;
  %100 = left_shift(%89, %90) /* ty=Tensor[(192, 14), uint32] */;
  (%91, %92, %var_5875, %93, %94, meta[relay.Constant][4] /* ty=Tensor[(1, 264), float32] */, %95, %96, %var_5960, %97, %98, meta[relay.Constant][5] /* ty=Tensor[(33), float64] */, %99, %100)
}

def @func_4147(%var_4133: int16, %var_4134: Tensor[(13, 1, 9), int16]) -> Tensor[(13, 1, 9), int16] {
  %101 = cast(%var_4133, dtype="int16") /* ty=int16 */;
  %102 = cast(%var_4134, dtype="int16") /* ty=Tensor[(13, 1, 9), int16] */;
  bitwise_or(%101, %102) /* ty=Tensor[(13, 1, 9), int16] */
}

def @func_3536() -> (Tensor[(10, 1, 14), float32], Tensor[(192, 14), float32], Tensor[(192, 14), int64], Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(273), float64], Tensor[(33), float64], Tensor[(26880), float32]) {
  %103 = @func_1403() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) */;
  %104 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %105 = %104.0;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %107 = reshape(%106, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
  %108 = @func_869(%107) /* ty=(Tensor[(192, 1), float64], Tensor[(192, 14), int64]) */;
  %109 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %110 = reshape(%109, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %111 = @func_3038(%110) /* ty=(Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(2112), float32], Tensor[(192, 14), float64], Tensor[(192, 14), bool], Tensor[(192, 14), bool]) */;
  %112 = @func_1419() /* ty=(Tensor[(273), float64],) */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(26880), float32] */, dtype="float32") /* ty=Tensor[(26880), float32] */;
  %114 = reshape(%113, newshape=[10, 192, 14]) /* ty=Tensor[(10, 192, 14), float32] */;
  %115 = @func_2679(%114) /* ty=(Tensor[(10, 192, 14), float64], Tensor[(10, 192, 14), bool], Tensor[(192, 1), float32], Tensor[(33), float64]) */;
  %116 = %103.0;
  %117 = %108.1;
  %118 = %111.0;
  %119 = %112.0;
  %120 = %115.3;
  (%116, %105, %117, %118, meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, %119, %120, meta[relay.Constant][7] /* ty=Tensor[(26880), float32] */)
}

def @func_5268() -> (Tensor[(192, 14), float32],) {
  %121 = @func_5000() /* ty=Tensor[(192, 14), float32] */;
  (%121,)
}

def @func_2526() -> (Tensor[(192, 14), float32],) {
  %122 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %123 = %122.0;
  (%123,)
}

def @func_3823(%var_3815: Tensor[(9, 1, 7), uint16], %var_3816: Tensor[(9, 11, 7), uint16]) -> Tensor[(9, 11, 7), uint16] {
  %124 = cast(%var_3815, dtype="uint16") /* ty=Tensor[(9, 1, 7), uint16] */;
  %125 = cast(%var_3816, dtype="uint16") /* ty=Tensor[(9, 11, 7), uint16] */;
  maximum(%124, %125) /* ty=Tensor[(9, 11, 7), uint16] */
}

def @func_1403() -> (Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) {
  %126 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 1, 14), float32] */, dtype="float32") /* ty=Tensor[(10, 1, 14), float32] */;
  %127 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %128 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %129 = log(%126) /* ty=Tensor[(10, 1, 14), float32] */;
  %130 = %127.0;
  %131 = %128.0;
  (%129, %130, %131)
}

def @func_5420(%var_5390: int16) -> (Tensor[(192, 14), float32], Tensor[(192), float32], Tensor[(2, 12, 11), float32]) {
  %132 = cast(meta[relay.Constant][9] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %133 = cast(%var_5390, dtype="int16") /* ty=int16 */;
  %134 = reshape(%132, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %135 = reshape(%133, newshape=[]) /* ty=int16 */;
  %136 = @func_4725(%134, %135) /* ty=(Tensor[(4, 3, 16), int32], Tensor[(4, 3, 16), float64], Tensor[(13, 1, 9), int16], int16, Tensor[(1, 117), int16], Tensor[(192, 14), float32]) */;
  %137 = @func_4554() /* ty=(Tensor[(2, 12, 11), float32],) */;
  %138 = %137.0;
  %139 = cast(%var_5390, dtype="float32") /* ty=float32 */;
  %140 = cast(%138, dtype="float32") /* ty=Tensor[(2, 12, 11), float32] */;
  %141 = %136.5;
  %142 = divide(%139, %140) /* ty=Tensor[(2, 12, 11), float32] */;
  (%141, meta[relay.Constant][9] /* ty=Tensor[(192), float32] */, %142)
}

def @func_2494() -> Tensor[(192, 1), float32] {
  %143 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %143.2
}

def @func_1318() -> (Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) {
  %144 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %145 = %144.3;
  %146 = cast(meta[relay.Constant][10] /* ty=Tensor[(273), int64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(1), int32] */;
  %148 = cast(%145, dtype="float64") /* ty=Tensor[(273), float64] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?), float64] */;
  %150 = cast(meta[relay.Constant][11] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %151 = reshape(%150, newshape=[192, 9]) /* ty=Tensor[(192, 9), float32] */;
  %152 = @func_1079(%151) /* ty=(Tensor[(192, 9), float64], Tensor[(273), int64]) */;
  %153 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %154 = cast(meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %155 = cast(meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %156 = reshape(%154, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %157 = reshape(%155, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %158 = @func_299(%156, %157) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %159 = cast(meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %160 = cast(meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %161 = reshape(%159, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %162 = reshape(%160, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %163 = @func_299(%161, %162) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %164 = floor_divide(%148, %149) /* ty=Tensor[(273), float64] */;
  %165 = %152.1;
  %166 = %153.0;
  %167 = %158.0;
  %168 = %163.0;
  (%164, %165, meta[relay.Constant][11] /* ty=Tensor[(1728), float32] */, %166, %167, meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, %168)
}

def @func_2237() -> Tensor[(192, 14), float64] {
  %169 = @func_1927() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */;
  %170 = %169.1;
  %171 = cast(%170, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  %172 = cos(%171) /* ty=Tensor[(192, 14), float64] */;
  %173 = cast(%172, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  rsqrt(%173) /* ty=Tensor[(192, 14), float64] */
}

def @func_3038(%var_3011: Tensor[(192), float32]) -> (Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(2112), float32], Tensor[(192, 14), float64], Tensor[(192, 14), bool], Tensor[(192, 14), bool]) {
  %174 = cast(%var_3011, dtype="float32") /* ty=Tensor[(192), float32] */;
  %175 = cast(meta[relay.Constant][13] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %176 = reshape(%174, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
  %177 = reshape(%175, newshape=[192, 11]) /* ty=Tensor[(192, 11), float32] */;
  %178 = @func_1240(%176, %177) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 11), int32]) */;
  %179 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %180 = %179.0;
  %181 = cast(%180, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  %182 = cosh(%181) /* ty=Tensor[(192, 14), float64] */;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  %184 = acos(%183) /* ty=Tensor[(192, 14), float64] */;
  %185 = cast(%184, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %186 = shape_of(%182, dtype="int32") /* ty=Tensor[(2), int32] */;
  %187 = cast(%182, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %189 = cast(meta[relay.Constant][14] /* ty=Tensor[(192, 14), float64] */, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %190 = shape_of(%182, dtype="int32") /* ty=Tensor[(2), int32] */;
  %191 = cast(%182, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %193 = %178.1;
  %194 = @func_2237() /* ty=Tensor[(192, 14), float64] */;
  %195 = logical_or(%187, %188) /* ty=Tensor[(192, 14), bool] */;
  %196 = greater_equal(%191, %192) /* ty=Tensor[(192, 14), bool] */;
  (%193, %var_3011, meta[relay.Constant][13] /* ty=Tensor[(2112), float32] */, %194, %195, %196)
}

def @func_4128() -> (Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) {
  %197 = @func_1927() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */;
  %198 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %199 = %197.0;
  %200 = %198.0;
  (%199, %200)
}

def @func_4756() -> (Tensor[(2, 12, 11), float32],) {
  %201 = @func_4554() /* ty=(Tensor[(2, 12, 11), float32],) */;
  %202 = %201.0;
  (%202,)
}

def @func_663() -> (Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) {
  %203 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %204 = cast(meta[relay.Constant][15] /* ty=Tensor[(192, 1), float32] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %205 = cast(meta[relay.Constant][15] /* ty=Tensor[(192, 1), float32] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %206 = reshape(%204, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %207 = reshape(%205, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %208 = @func_299(%206, %207) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %209 = %203.1;
  %210 = %208.0;
  (%209, %210, meta[relay.Constant][15] /* ty=Tensor[(192, 1), float32] */)
}

def @func_3460(%var_3429: Tensor[(4, 3, 16), float32], %var_3437: Tensor[(192, 14), int64], %var_3444: Tensor[(33, 1), float64]) -> (Tensor[(2688), float32], Tensor[(192, 1), float64], Tensor[(4, 3, 16), int64], Tensor[(192, 14), uint64], Tensor[(11, 3, 1), float64], Tensor[(33, 1), float64], Tensor[(192, ?), int16], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32]) {
  %211 = @func_2494() /* ty=Tensor[(192, 1), float32] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %213 = @func_2219() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(273), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32], Tensor[(4, 3, 16), float64]) */;
  %214 = %213.4;
  %215 = cast(%211, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %216 = log(%215) /* ty=Tensor[(192, 1), float32] */;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %218 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%214, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %221 = maximum(%219, %220) /* ty=Tensor[(4, 3, 16), float32] */;
  %222 = cast(%var_3429, dtype="int64") /* ty=Tensor[(4, 3, 16), int64] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%221, dtype="int64") /* ty=Tensor[(4, 3, 16), int64] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %226 = cast(meta[relay.Constant][16] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %227 = reshape(%226, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
  %228 = @func_869(%227) /* ty=(Tensor[(192, 1), float64], Tensor[(192, 14), int64]) */;
  %229 = %228.1;
  %230 = cast(%var_3437, dtype="uint64") /* ty=Tensor[(192, 14), uint64] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(2), int32] */;
  %232 = cast(%229, dtype="uint64") /* ty=Tensor[(192, 14), uint64] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %234 = cast(%var_3444, dtype="float64") /* ty=Tensor[(33, 1), float64] */;
  %235 = reshape(%234, newshape=[11, 3, 1]) /* ty=Tensor[(11, 3, 1), float64] */;
  %236 = @func_1958(%235) /* ty=(Tensor[(11, 3, 1), float64], Tensor[(192, 1), float32]) */;
  %237 = cast(%214, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %238 = shape_of(%216, dtype="int32") /* ty=Tensor[(2), int32] */;
  %239 = cast(%216, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %241 = floor_divide(%239, %240) /* ty=Tensor[(192, ?), float32] */;
  %242 = cast(%216, dtype="int16") /* ty=Tensor[(192, 1), int16] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(2), int32] */;
  %244 = cast(%241, dtype="int16") /* ty=Tensor[(192, ?), int16] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %246 = cast(%211, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %247 = cast(%214, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %248 = reshape(%246, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %249 = reshape(%247, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %250 = @func_299(%248, %249) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %251 = cast(%214, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %252 = sqrt(%212) /* ty=Tensor[(192, 1), float64] */;
  %253 = bitwise_or(%224, %225) /* ty=Tensor[(4, 3, 16), int64] */;
  %254 = maximum(%232, %233) /* ty=Tensor[(192, 14), uint64] */;
  %255 = %236.0;
  %256 = right_shift(%244, %245) /* ty=Tensor[(192, ?), int16] */;
  %257 = %250.0;
  %258 = sin(%251) /* ty=Tensor[(4, 3, 16), float32] */;
  (meta[relay.Constant][16] /* ty=Tensor[(2688), float32] */, %252, %253, %254, %255, %var_3444, %256, %257, %258)
}

def @func_299(%var_237: Tensor[(4, 3, 16), float32], %var_238: Tensor[(4, 3, 16), float32]) -> (Tensor[(4, 3, 16), float32],) {
  %259 = cast(%var_238, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %260 = shape_of(%var_237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%var_237, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %263 = mod(%261, %262) /* ty=Tensor[(4, 3, 16), float32] */;
  (%263,)
}

def @func_731() -> (Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) {
  %264 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %265 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %266 = cast(meta[relay.Constant][17] /* ty=Tensor[(273), int64] */, dtype="int64") /* ty=Tensor[(273), int64] */;
  %267 = %265.2;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %269 = reshape(%266, newshape=[13, 3, 7]) /* ty=Tensor[(13, 3, 7), int64] */;
  %270 = reshape(%268, newshape=[48, 4]) /* ty=Tensor[(48, 4), float32] */;
  %271 = @func_560(%269, %270) /* ty=(Tensor[(13, 3, 7), bool], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32], Tensor[(48, 4), float64]) */;
  %272 = %264.1;
  %273 = %271.1;
  (%272, %267, %273, meta[relay.Constant][17] /* ty=Tensor[(273), int64] */)
}

def @func_3258() -> (Tensor[(192, 14), uint64],) {
  %274 = @func_2237() /* ty=Tensor[(192, 14), float64] */;
  %275 = cast(%274, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  %276 = log10(%275) /* ty=Tensor[(192, 14), float64] */;
  %277 = cast(%276, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %278 = sinh(%277) /* ty=Tensor[(192, 14), float32] */;
  %279 = cast(%278, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %280 = atanh(%279) /* ty=Tensor[(192, 14), float32] */;
  %281 = cast(%276, dtype="uint64") /* ty=Tensor[(192, 14), uint64] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(2), int32] */;
  %283 = cast(%280, dtype="uint64") /* ty=Tensor[(192, 14), uint64] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %285 = right_shift(%283, %284) /* ty=Tensor[(192, 14), uint64] */;
  (%285,)
}

def @func_4554() -> (Tensor[(2, 12, 11), float32],) {
  %286 = @func_2911() /* ty=Tensor[(2, 12, 11), float32] */;
  (%286,)
}

def @func_5000() -> Tensor[(192, 14), float32] {
  %287 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
  %287.0
}

def @func_1079(%var_1059: Tensor[(192, 9), float32]) -> (Tensor[(192, 9), float64], Tensor[(273), int64]) {
  %288 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %289 = %288.2;
  %290 = cast(%289, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %291 = cast(%var_1059, dtype="float64") /* ty=Tensor[(192, 9), float64] */;
  %292 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %293 = power(%290, %291) /* ty=Tensor[(192, 9), float64] */;
  %294 = %292.3;
  (%293, %294)
}

def @func_5378() -> (Tensor[(192, 14), float32], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(2, 12, 11), float64], Tensor[(192, 1), float32], Tensor[(2, 12, 11), float64]) {
  %295 = @func_3536() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(192, 14), float32], Tensor[(192, 14), int64], Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(273), float64], Tensor[(33), float64], Tensor[(26880), float32]) */;
  %296 = %295.1;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %298 = cast(meta[relay.Constant][18] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %299 = cast(meta[relay.Constant][18] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %300 = reshape(%298, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %301 = reshape(%299, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %302 = @func_299(%300, %301) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %303 = @func_1560() /* ty=(Tensor[(192, 1), float64], Tensor[(192, 1), float32]) */;
  %304 = @func_4866() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */;
  %305 = tan(%297) /* ty=Tensor[(192, 14), float32] */;
  %306 = %302.0;
  %307 = @func_3214() /* ty=Tensor[(2, 12, 11), float64] */;
  %308 = %303.1;
  %309 = %304.0;
  (%305, %306, meta[relay.Constant][18] /* ty=Tensor[(192), float32] */, %307, %308, %309)
}

def @func_2732(%var_2716: Tensor[(192, 14), float32]) -> (Tensor[(192, 14), int32], Tensor[(273), float64], Tensor[(4, 3, 16), float32]) {
  %310 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %311 = %310.0;
  %312 = cast(%var_2716, dtype="int32") /* ty=Tensor[(192, 14), int32] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(2), int32] */;
  %314 = cast(%311, dtype="int32") /* ty=Tensor[(192, 14), int32] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %316 = @func_1419() /* ty=(Tensor[(273), float64],) */;
  %317 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %318 = multiply(%314, %315) /* ty=Tensor[(192, 14), int32] */;
  %319 = %316.0;
  %320 = %317.0;
  (%318, %319, %320)
}

def @func_1385(%var_1375: Tensor[(2688), float32]) -> (Tensor[(2, 12, 11), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32]) {
  %321 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %322 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %323 = %322.0;
  %324 = cast(%323, dtype="float32") /* ty=Tensor[(2, 12, 11), float32] */;
  %325 = reshape(%324, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float32] */;
  %326 = cast(%var_1375, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %327 = reshape(%326, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
  %328 = @func_1012(%327) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(192, 14), uint32], Tensor[(192, 14), bool]) */;
  %329 = %321.0;
  %330 = @func_1120(%325) /* ty=Tensor[(2, 12, 11), int64] */;
  %331 = %328.0;
  (%329, %323, %330, %331, %var_1375)
}

def @func_4454() -> (Tensor[(14, 4, 5), float64], Tensor[(273), float64]) {
  %332 = @func_1853() /* ty=Tensor[(14, 4, 5), float64] */;
  %333 = cast(%332, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %334 = @func_1419() /* ty=(Tensor[(273), float64],) */;
  %335 = atanh(%333) /* ty=Tensor[(14, 4, 5), float64] */;
  %336 = %334.0;
  (%335, %336)
}

def @func_4617() -> (Tensor[(192, 14), float32],) {
  %337 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %338 = %337.0;
  (%338,)
}

def @func_1134() -> (Tensor[(4, 3, 16), float32],) {
  %339 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %340 = %339.1;
  (%340,)
}

def @func_1827() -> Tensor[(2, 12, 11), float32] {
  %341 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %341.0
}

def @func_5338() -> (Tensor[(192, 14), uint64], Tensor[(2, 12, 11), float32]) {
  %342 = @func_3808() /* ty=(Tensor[(192, 14), uint64],) */;
  %343 = %342.0;
  %344 = @func_2795() /* ty=Tensor[(2, 12, 11), float32] */;
  (%343, %344)
}

def @func_869(%var_862: Tensor[(192, 14), float32]) -> (Tensor[(192, 1), float64], Tensor[(192, 14), int64]) {
  %345 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %346 = %345.1;
  %347 = cast(%346, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %348 = cast(%346, dtype="int64") /* ty=Tensor[(192, 1), int64] */;
  %349 = cast(%var_862, dtype="int64") /* ty=Tensor[(192, 14), int64] */;
  %350 = cos(%347) /* ty=Tensor[(192, 1), float64] */;
  %351 = subtract(%348, %349) /* ty=Tensor[(192, 14), int64] */;
  (%350, %351)
}

def @func_2414() -> Tensor[(2, 12, 11), float32] {
  %352 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %352.1
}

def @func_5165() -> (Tensor[(192, 1), float32],) {
  %353 = @func_3871() /* ty=(Tensor[(192, 1), float32], Tensor[(2, 12, 11), float64]) */;
  %354 = %353.0;
  (%354,)
}

def @func_5548(%var_5538: Tensor[(2, 12, 11), float32]) -> Tensor[(2, 12, 11), bool] {
  %355 = @func_4748() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2688), float32]) */;
  %356 = %355.0;
  %357 = cast(%var_5538, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
  %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%356, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%359, %360) /* ty=Tensor[(2, 12, 11), bool] */
}

def @func_3214() -> Tensor[(2, 12, 11), float64] {
  @func_2502() /* ty=Tensor[(2, 12, 11), float64] */
}

def @func_4673(%var_4661: Tensor[(192), float32], %var_4662: Tensor[(33), float64]) -> (Tensor[(192, 14), float64], Tensor[(4, 3, 16), int64], Tensor[(192), float32], Tensor[(33), float64]) {
  %361 = cast(%var_4661, dtype="float32") /* ty=Tensor[(192), float32] */;
  %362 = @func_2237() /* ty=Tensor[(192, 14), float64] */;
  %363 = cast(%362, dtype="int64") /* ty=Tensor[(192, 14), int64] */;
  %364 = cast(%var_4662, dtype="float64") /* ty=Tensor[(33), float64] */;
  %365 = reshape(%361, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %366 = reshape(%363, newshape=[192, 14]) /* ty=Tensor[(192, 14), int64] */;
  %367 = reshape(%364, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %368 = @func_3460(%365, %366, %367) /* ty=(Tensor[(2688), float32], Tensor[(192, 1), float64], Tensor[(4, 3, 16), int64], Tensor[(192, 14), uint64], Tensor[(11, 3, 1), float64], Tensor[(33, 1), float64], Tensor[(192, ?), int16], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32]) */;
  %369 = %368.2;
  (%362, %369, %var_4661, %var_4662)
}

def @func_1560() -> (Tensor[(192, 1), float64], Tensor[(192, 1), float32]) {
  %370 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %371 = %370.1;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %373 = asin(%372) /* ty=Tensor[(192, 1), float64] */;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %375 = cast(%371, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %376 = cosh(%374) /* ty=Tensor[(192, 1), float64] */;
  %377 = tan(%375) /* ty=Tensor[(192, 1), float32] */;
  (%376, %377)
}

def @func_1672(%var_1636: Tensor[(273), float64]) -> (Tensor[(273), bool], Tensor[(273), int32]) {
  %378 = @func_1419() /* ty=(Tensor[(273), float64],) */;
  %379 = %378.0;
  %380 = cast(%var_1636, dtype="bool") /* ty=Tensor[(273), bool] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(1), int32] */;
  %382 = cast(%379, dtype="bool") /* ty=Tensor[(273), bool] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?), bool] */;
  %384 = cast(%var_1636, dtype="float32") /* ty=Tensor[(273), float32] */;
  %385 = sqrt(%384) /* ty=Tensor[(273), float32] */;
  %386 = cast(%379, dtype="int32") /* ty=Tensor[(273), int32] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(1), int32] */;
  %388 = cast(%385, dtype="int32") /* ty=Tensor[(273), int32] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?), int32] */;
  %390 = greater_equal(%382, %383) /* ty=Tensor[(273), bool] */;
  %391 = right_shift(%388, %389) /* ty=Tensor[(273), int32] */;
  (%390, %391)
}

def @func_4866() -> (Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) {
  %392 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %393 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %394 = %392.0;
  %395 = %393.0;
  (%394, %395)
}

def @func_4345(%var_4325: Tensor[(192, 14), float32]) -> (Tensor[(192, 14), bool], Tensor[(192, 14), float32], Tensor[(33), float64], Tensor[(1, 26880), float32]) {
  %396 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
  %397 = %396.0;
  %398 = cast(%var_4325, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(2), int32] */;
  %400 = cast(%397, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %402 = cast(%var_4325, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %403 = shape_of(%397, dtype="int32") /* ty=Tensor[(2), int32] */;
  %404 = cast(%397, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %406 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 26880), float32] */, dtype="float32") /* ty=Tensor[(1, 26880), float32] */;
  %407 = reshape(%406, newshape=[10, 192, 14]) /* ty=Tensor[(10, 192, 14), float32] */;
  %408 = @func_2679(%407) /* ty=(Tensor[(10, 192, 14), float64], Tensor[(10, 192, 14), bool], Tensor[(192, 1), float32], Tensor[(33), float64]) */;
  %409 = logical_and(%400, %401) /* ty=Tensor[(192, 14), bool] */;
  %410 = divide(%404, %405) /* ty=Tensor[(192, 14), float32] */;
  %411 = %408.3;
  (%409, %410, %411, meta[relay.Constant][19] /* ty=Tensor[(1, 26880), float32] */)
}

def @func_1419() -> (Tensor[(273), float64],) {
  %412 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
  %413 = %412.0;
  (%413,)
}

def @func_4767(%var_4761: Tensor[(16, 8, 7), float32]) -> (Tensor[(16, 8, 7), float32],) {
  %414 = cast(%var_4761, dtype="float32") /* ty=Tensor[(16, 8, 7), float32] */;
  %415 = cos(%414) /* ty=Tensor[(16, 8, 7), float32] */;
  (%415,)
}

def @func_1120(%var_1109: Tensor[(2, 12, 11), float32]) -> Tensor[(2, 12, 11), int64] {
  %416 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %417 = %416.0;
  %418 = cast(%var_1109, dtype="int64") /* ty=Tensor[(2, 12, 11), int64] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="int64") /* ty=Tensor[(2, 12, 11), int64] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%420, %421) /* ty=Tensor[(2, 12, 11), int64] */
}

def @func_5744() -> (Tensor[(2, 12, 11), float64],) {
  %422 = @func_4866() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */;
  %423 = %422.0;
  (%423,)
}

def @func_4478() -> Tensor[(12, 1, 16), float64] {
  %424 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 1, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 1, 16), float64] */;
  acosh(%424) /* ty=Tensor[(12, 1, 16), float64] */
}

def @func_2911() -> Tensor[(2, 12, 11), float32] {
  @func_2795() /* ty=Tensor[(2, 12, 11), float32] */
}

def @func_5833(%var_5819: uint8, %var_5820: Tensor[(1, 13, 14), uint8]) -> Tensor[(1, 13, 14), bool] {
  %425 = cast(%var_5819, dtype="bool") /* ty=bool */;
  %426 = cast(%var_5820, dtype="bool") /* ty=Tensor[(1, 13, 14), bool] */;
  less(%425, %426) /* ty=Tensor[(1, 13, 14), bool] */
}

def @func_3207() -> (Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2, 12, 11), int64]) {
  %427 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %428 = @func_2795() /* ty=Tensor[(2, 12, 11), float32] */;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(2, 12, 11), float32] */;
  %430 = reshape(%429, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float32] */;
  %431 = %427.0;
  %432 = @func_1120(%430) /* ty=Tensor[(2, 12, 11), int64] */;
  (%428, %431, %432)
}

def @func_3649(%var_3602: Tensor[(273), int64], %var_3609: Tensor[(273), float64], %var_3626: Tensor[(192), float32], %var_3627: Tensor[(2688), int64], %var_3628: Tensor[(33), float64], %var_3639: Tensor[(264), float64]) -> (Tensor[(273), float64], Tensor[(273), uint64], Tensor[(33, 1), float64], Tensor[(192), float32], Tensor[(2688), int64], Tensor[(33), float64], Tensor[(16, 1, 3), float64], Tensor[(48), float64], Tensor[(2, 12, 11), bool], Tensor[(264), float64]) {
  %433 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %434 = %433.1;
  %435 = cast(%var_3602, dtype="float64") /* ty=Tensor[(273), float64] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(1), int32] */;
  %437 = cast(%434, dtype="float64") /* ty=Tensor[(273), float64] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?), float64] */;
  %439 = floor_mod(%437, %438) /* ty=Tensor[(273), float64] */;
  %440 = cast(%var_3609, dtype="float64") /* ty=Tensor[(273), float64] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(1), int32] */;
  %442 = cast(%439, dtype="float64") /* ty=Tensor[(273), float64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?), float64] */;
  %444 = cast(%var_3609, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %445 = shape_of(%439, dtype="int32") /* ty=Tensor[(1), int32] */;
  %446 = cast(%439, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %448 = cast(%var_3626, dtype="float32") /* ty=Tensor[(192), float32] */;
  %449 = cast(%var_3627, dtype="int64") /* ty=Tensor[(2688), int64] */;
  %450 = cast(%var_3628, dtype="float64") /* ty=Tensor[(33), float64] */;
  %451 = reshape(%448, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %452 = reshape(%449, newshape=[192, 14]) /* ty=Tensor[(192, 14), int64] */;
  %453 = reshape(%450, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %454 = @func_3460(%451, %452, %453) /* ty=(Tensor[(2688), float32], Tensor[(192, 1), float64], Tensor[(4, 3, 16), int64], Tensor[(192, 14), uint64], Tensor[(11, 3, 1), float64], Tensor[(33, 1), float64], Tensor[(192, ?), int16], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32]) */;
  %455 = cast(meta[relay.Constant][21] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %456 = reshape(%455, newshape=[16, 1, 3]) /* ty=Tensor[(16, 1, 3), float64] */;
  %457 = @func_3481(%456) /* ty=(Tensor[(16, 1, 3), float64],) */;
  %458 = cast(%var_3627, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %459 = cast(%var_3639, dtype="float64") /* ty=Tensor[(264), float64] */;
  %460 = reshape(%458, newshape=[2688]) /* ty=Tensor[(2688), float32] */;
  %461 = reshape(%459, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float64] */;
  %462 = @func_2131(%460, %461) /* ty=(Tensor[(192), float32], Tensor[(2688), float32], Tensor[(2, 12, 11), bool], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), bool]) */;
  %463 = divide(%442, %443) /* ty=Tensor[(273), float64] */;
  %464 = bitwise_or(%446, %447) /* ty=Tensor[(273), uint64] */;
  %465 = %454.5;
  %466 = %457.0;
  %467 = %462.5;
  (%463, %464, %465, %var_3626, %var_3627, %var_3628, %466, meta[relay.Constant][21] /* ty=Tensor[(48), float64] */, %467, %var_3639)
}

def @func_2795() -> Tensor[(2, 12, 11), float32] {
  @func_1827() /* ty=Tensor[(2, 12, 11), float32] */
}

def @func_4397(%var_4360: Tensor[(273), int64]) -> (Tensor[(2, 12, 11), float64], Tensor[(273), int16], Tensor[(273), float64], Tensor[(273), int16]) {
  %468 = @func_4128() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */;
  %469 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
  %470 = %469.1;
  %471 = cast(%var_4360, dtype="int16") /* ty=Tensor[(273), int16] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(1), int32] */;
  %473 = cast(%470, dtype="int16") /* ty=Tensor[(273), int16] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?), int16] */;
  %475 = cast(%var_4360, dtype="float64") /* ty=Tensor[(273), float64] */;
  %476 = cast(%470, dtype="int16") /* ty=Tensor[(273), int16] */;
  %477 = shape_of(%var_4360, dtype="int32") /* ty=Tensor[(1), int32] */;
  %478 = cast(%var_4360, dtype="int16") /* ty=Tensor[(273), int16] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?), int16] */;
  %480 = %468.0;
  %481 = logical_xor(%473, %474) /* ty=Tensor[(273), int16] */;
  %482 = cosh(%475) /* ty=Tensor[(273), float64] */;
  %483 = minimum(%478, %479) /* ty=Tensor[(273), int16] */;
  (%480, %481, %482, %483)
}

def @func_3871() -> (Tensor[(192, 1), float32], Tensor[(2, 12, 11), float64]) {
  %484 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %485 = @func_2494() /* ty=Tensor[(192, 1), float32] */;
  %486 = %484.0;
  (%485, %486)
}

def @func_5119() -> (Tensor[(192, 14), float32], Tensor[(192, 14), float32]) {
  %487 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
  %488 = @func_3258() /* ty=(Tensor[(192, 14), uint64],) */;
  %489 = %488.0;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %491 = %487.0;
  %492 = atan(%490) /* ty=Tensor[(192, 14), float32] */;
  (%491, %492)
}

def @func_2288(%var_2267: Tensor[(273), int64]) -> (Tensor[(273), bool], Tensor[(2, 12, 11), int64], Tensor[(1, 264), float32]) {
  %493 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %494 = %493.3;
  %495 = cast(%var_2267, dtype="float64") /* ty=Tensor[(273), float64] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(1), int32] */;
  %497 = cast(%494, dtype="float64") /* ty=Tensor[(273), float64] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?), float64] */;
  %499 = power(%497, %498) /* ty=Tensor[(273), float64] */;
  %500 = cast(%499, dtype="bool") /* ty=Tensor[(273), bool] */;
  %501 = shape_of(%494, dtype="int32") /* ty=Tensor[(1), int32] */;
  %502 = cast(%494, dtype="bool") /* ty=Tensor[(273), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?), bool] */;
  %504 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 264), float32] */, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %505 = reshape(%504, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float32] */;
  %506 = logical_and(%502, %503) /* ty=Tensor[(273), bool] */;
  %507 = @func_1120(%505) /* ty=Tensor[(2, 12, 11), int64] */;
  (%506, %507, meta[relay.Constant][22] /* ty=Tensor[(1, 264), float32] */)
}

def @func_4725(%var_4687: Tensor[(4, 3, 16), float32], %var_4705: int16) -> (Tensor[(4, 3, 16), int32], Tensor[(4, 3, 16), float64], Tensor[(13, 1, 9), int16], int16, Tensor[(1, 117), int16], Tensor[(192, 14), float32]) {
  %508 = @func_4596() /* ty=Tensor[(4, 3, 16), float32] */;
  %509 = cast(%var_4687, dtype="int32") /* ty=Tensor[(4, 3, 16), int32] */;
  %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%508, dtype="int32") /* ty=Tensor[(4, 3, 16), int32] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %513 = cast(%508, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %514 = cast(%var_4705, dtype="int16") /* ty=int16 */;
  %515 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 117), int16] */, dtype="int16") /* ty=Tensor[(1, 117), int16] */;
  %516 = reshape(%514, newshape=[]) /* ty=int16 */;
  %517 = reshape(%515, newshape=[13, 1, 9]) /* ty=Tensor[(13, 1, 9), int16] */;
  %518 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
  %519 = bitwise_and(%511, %512) /* ty=Tensor[(4, 3, 16), int32] */;
  %520 = atanh(%513) /* ty=Tensor[(4, 3, 16), float64] */;
  %521 = @func_4147(%516, %517) /* ty=Tensor[(13, 1, 9), int16] */;
  %522 = %518.0;
  (%519, %520, %521, %var_4705, meta[relay.Constant][23] /* ty=Tensor[(1, 117), int16] */, %522)
}

def @func_2052(%var_2030: Tensor[(2112), float32]) -> (Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(2112), float32], Tensor[(273), int64]) {
  %523 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %524 = %523.2;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %526 = cast(%var_2030, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %527 = reshape(%525, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
  %528 = reshape(%526, newshape=[192, 11]) /* ty=Tensor[(192, 11), float32] */;
  %529 = @func_1240(%527, %528) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 11), int32]) */;
  %530 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %531 = %529.0;
  %532 = %530.1;
  (%524, %531, %var_2030, %532)
}

def @func_4596() -> Tensor[(4, 3, 16), float32] {
  %533 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
  %533.6
}

def @func_2865(%var_2862: Tensor[(192), float32]) -> (Tensor[(14, 4, 5), float64], Tensor[(273), float32], Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(192, 14), float32], Tensor[(4, 3, 16), float32], Tensor[(192), float32]) {
  %534 = @func_1419() /* ty=(Tensor[(273), float64],) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="float32") /* ty=Tensor[(273), float32] */;
  %537 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
  %538 = @func_2788() /* ty=(Tensor[(273), float64], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float32]) */;
  %539 = cast(%var_2862, dtype="float32") /* ty=Tensor[(192), float32] */;
  %540 = cast(%var_2862, dtype="float32") /* ty=Tensor[(192), float32] */;
  %541 = reshape(%539, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %542 = reshape(%540, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %543 = @func_299(%541, %542) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %544 = @func_1853() /* ty=Tensor[(14, 4, 5), float64] */;
  %545 = acosh(%536) /* ty=Tensor[(273), float32] */;
  %546 = @func_2414() /* ty=Tensor[(2, 12, 11), float32] */;
  %547 = %537.0;
  %548 = %538.1;
  %549 = %543.0;
  (%544, %545, %546, %547, %548, %549, %var_2862)
}

def @func_2788() -> (Tensor[(273), float64], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float32]) {
  %550 = @func_1419() /* ty=(Tensor[(273), float64],) */;
  %551 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %552 = @func_1522() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float32]) */;
  %553 = %550.0;
  %554 = %551.0;
  %555 = %552.2;
  (%553, %554, %555)
}

def @func_643() -> (Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) {
  %556 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %557 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 12, 11), float64] */, dtype="float32") /* ty=Tensor[(2, 12, 11), float32] */;
  %558 = sin(%556) /* ty=Tensor[(2, 12, 11), float64] */;
  %559 = sigmoid(%557) /* ty=Tensor[(2, 12, 11), float32] */;
  (%558, %559)
}

def @func_1012(%var_922: Tensor[(192, 14), float32]) -> (Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(192, 14), uint32], Tensor[(192, 14), bool]) {
  %560 = cast(meta[relay.Constant][25] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %561 = cast(meta[relay.Constant][25] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %562 = reshape(%560, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %563 = reshape(%561, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %564 = @func_299(%562, %563) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %565 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %566 = %565.0;
  %567 = cast(%var_922, dtype="uint32") /* ty=Tensor[(192, 14), uint32] */;
  %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(2), int32] */;
  %569 = cast(%566, dtype="uint32") /* ty=Tensor[(192, 14), uint32] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %571 = cast(%var_922, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %572 = shape_of(%566, dtype="int32") /* ty=Tensor[(2), int32] */;
  %573 = cast(%566, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %575 = not_equal(%573, %574) /* ty=Tensor[(192, 14), bool] */;
  %576 = cast(%566, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(2), int32] */;
  %578 = cast(%575, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %580 = %564.0;
  %581 = bitwise_and(%569, %570) /* ty=Tensor[(192, 14), uint32] */;
  %582 = less_equal(%578, %579) /* ty=Tensor[(192, 14), bool] */;
  (%580, meta[relay.Constant][25] /* ty=Tensor[(192), float32] */, %581, %582)
}

def @func_829() -> (Tensor[(192, 14), float32], Tensor[(273), int64]) {
  %583 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %584 = %583.2;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %586 = cast(meta[relay.Constant][26] /* ty=Tensor[(192, 14), float32] */, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %587 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %588 = floor_mod(%585, %586) /* ty=Tensor[(192, 14), float32] */;
  %589 = %587.3;
  (%588, %589)
}

def @func_560(%var_536: Tensor[(13, 3, 7), int64], %var_543: Tensor[(48, 4), float32]) -> (Tensor[(13, 3, 7), bool], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32], Tensor[(48, 4), float64]) {
  %590 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 3, 7), int64] */, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
  %591 = shape_of(%var_536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%var_536, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %594 = cast(%var_543, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %595 = cast(%var_543, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %596 = reshape(%594, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %597 = reshape(%595, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %598 = @func_299(%596, %597) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %599 = cast(%var_543, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %600 = %598.0;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %602 = reshape(%599, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %603 = reshape(%601, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %604 = @func_299(%602, %603) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %605 = cast(%var_543, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
  %606 = not_equal(%592, %593) /* ty=Tensor[(13, 3, 7), bool] */;
  %607 = %604.0;
  %608 = log10(%605) /* ty=Tensor[(48, 4), float64] */;
  (%606, %600, %607, %608)
}

def @func_2131(%var_2089: Tensor[(2688), float32], %var_2093: Tensor[(2, 12, 11), float64]) -> (Tensor[(192), float32], Tensor[(2688), float32], Tensor[(2, 12, 11), bool], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), bool]) {
  %609 = cast(%var_2089, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %610 = reshape(%609, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
  %611 = @func_1012(%610) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(192, 14), uint32], Tensor[(192, 14), bool]) */;
  %612 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %613 = %612.0;
  %614 = cast(%613, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %615 = acosh(%614) /* ty=Tensor[(2, 12, 11), float64] */;
  %616 = cast(%var_2093, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %620 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %621 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
  %622 = cast(%var_2093, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
  %623 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%615, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = %611.1;
  %627 = greater_equal(%618, %619) /* ty=Tensor[(2, 12, 11), bool] */;
  %628 = %620.0;
  %629 = %621.3;
  %630 = greater(%624, %625) /* ty=Tensor[(2, 12, 11), bool] */;
  (%626, %var_2089, %627, %628, %629, %630)
}

def @func_4469() -> (Tensor[(2, 12, 11), float64], Tensor[(192), float32]) {
  %631 = @func_1403() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) */;
  %632 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
  %633 = %631.1;
  %634 = %632.5;
  (%633, %634)
}

def @func_4904(%var_4891: Tensor[(192, 11), int32]) -> (Tensor[(192, 11), bool],) {
  %635 = @func_3536() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(192, 14), float32], Tensor[(192, 14), int64], Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(273), float64], Tensor[(33), float64], Tensor[(26880), float32]) */;
  %636 = %635.3;
  %637 = cast(%var_4891, dtype="bool") /* ty=Tensor[(192, 11), bool] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(2), int32] */;
  %639 = cast(%636, dtype="bool") /* ty=Tensor[(192, 11), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %641 = logical_or(%639, %640) /* ty=Tensor[(192, 11), bool] */;
  (%641,)
}

def @func_1240(%var_1187: Tensor[(192, 1), float32], %var_1202: Tensor[(192, 11), float32]) -> (Tensor[(4, 3, 16), float32], Tensor[(192, 11), int32]) {
  %642 = @func_1134() /* ty=(Tensor[(4, 3, 16), float32],) */;
  %643 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %644 = %643.2;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %646 = cast(%var_1202, dtype="float64") /* ty=Tensor[(192, 11), float64] */;
  %647 = floor_mod(%645, %646) /* ty=Tensor[(192, 11), float64] */;
  %648 = cast(%var_1187, dtype="uint8") /* ty=Tensor[(192, 1), uint8] */;
  %649 = shape_of(%644, dtype="int32") /* ty=Tensor[(2), int32] */;
  %650 = cast(%644, dtype="uint8") /* ty=Tensor[(192, 1), uint8] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %652 = maximum(%650, %651) /* ty=Tensor[(192, ?), uint8] */;
  %653 = cast(%647, dtype="int32") /* ty=Tensor[(192, 11), int32] */;
  %654 = cast(%652, dtype="int32") /* ty=Tensor[(192, ?), int32] */;
  %655 = %642.0;
  %656 = bitwise_xor(%653, %654) /* ty=Tensor[(192, 11), int32] */;
  (%655, %656)
}

def @func_5049() -> (Tensor[(2, 12, 11), float32], Tensor[(192, 14), int64], Tensor[(2688), uint64]) {
  %657 = cast(meta[relay.Constant][28] /* ty=Tensor[(2688), uint64] */, dtype="uint64") /* ty=Tensor[(2688), uint64] */;
  %658 = reshape(%657, newshape=[192, 14]) /* ty=Tensor[(192, 14), uint64] */;
  %659 = @func_4114(%658) /* ty=(Tensor[(192, 14), int64],) */;
  %660 = @func_2414() /* ty=Tensor[(2, 12, 11), float32] */;
  %661 = %659.0;
  (%660, %661, meta[relay.Constant][28] /* ty=Tensor[(2688), uint64] */)
}

def @func_1702() -> (Tensor[(192, 14), float32],) {
  %662 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %663 = %662.0;
  (%663,)
}

def @func_5607() -> (Tensor[(192, 14), float64],) {
  %664 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %665 = %664.0;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  %667 = log2(%666) /* ty=Tensor[(192, 14), float64] */;
  (%667,)
}

def @func_1958(%var_1941: Tensor[(11, 3, 1), float64]) -> (Tensor[(11, 3, 1), float64], Tensor[(192, 1), float32]) {
  %668 = cast(%var_1941, dtype="float64") /* ty=Tensor[(11, 3, 1), float64] */;
  %669 = @func_1560() /* ty=(Tensor[(192, 1), float64], Tensor[(192, 1), float32]) */;
  %670 = asinh(%668) /* ty=Tensor[(11, 3, 1), float64] */;
  %671 = %669.1;
  (%670, %671)
}

def @func_3757() -> (Tensor[(4, 3, 16), float32],) {
  %672 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %673 = %672.1;
  (%673,)
}

def @func_5729(%var_5722: Tensor[(2688), uint64]) -> (Tensor[(192, 14), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), bool]) {
  %674 = cast(meta[relay.Constant][29] /* ty=Tensor[(2688), uint64] */, dtype="uint64") /* ty=Tensor[(2688), uint64] */;
  %675 = reshape(%674, newshape=[192, 14]) /* ty=Tensor[(192, 14), uint64] */;
  %676 = @func_4114(%675) /* ty=(Tensor[(192, 14), int64],) */;
  %677 = @func_3757() /* ty=(Tensor[(4, 3, 16), float32],) */;
  %678 = %677.0;
  %679 = cast(%678, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %680 = cast(%var_5722, dtype="bool") /* ty=Tensor[(2688), bool] */;
  %681 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(2688), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %682 = cast(meta[relay.Constant][29] /* ty=Tensor[(2688), uint64] */, dtype="bool") /* ty=Tensor[(2688), bool] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?), bool] */;
  %684 = %676.0;
  %685 = cosh(%679) /* ty=Tensor[(4, 3, 16), float32] */;
  %686 = less(%682, %683) /* ty=Tensor[(2688), bool] */;
  (%684, %685, %686)
}

def @func_1853() -> Tensor[(14, 4, 5), float64] {
  %687 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 4, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  cosh(%687) /* ty=Tensor[(14, 4, 5), float64] */
}

def @func_2679(%var_2642: Tensor[(10, 192, 14), float32]) -> (Tensor[(10, 192, 14), float64], Tensor[(10, 192, 14), bool], Tensor[(192, 1), float32], Tensor[(33), float64]) {
  %688 = @func_1522() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float32]) */;
  %689 = %688.1;
  %690 = @func_2237() /* ty=Tensor[(192, 14), float64] */;
  %691 = cast(%689, dtype="float32") /* ty=Tensor[(10, 1, 14), float32] */;
  %692 = cast(%690, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %693 = multiply(%691, %692) /* ty=Tensor[(10, 192, 14), float32] */;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(10, 192, 14), float32] */;
  %695 = cosh(%694) /* ty=Tensor[(10, 192, 14), float32] */;
  %696 = cast(%var_2642, dtype="float32") /* ty=Tensor[(10, 192, 14), float32] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%695, dtype="float32") /* ty=Tensor[(10, 192, 14), float32] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %700 = floor_divide(%698, %699) /* ty=Tensor[(10, 192, 14), float32] */;
  %701 = cast(%700, dtype="float64") /* ty=Tensor[(10, 192, 14), float64] */;
  %702 = cast(%689, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
  %703 = cast(%700, dtype="bool") /* ty=Tensor[(10, 192, 14), bool] */;
  %704 = cast(meta[relay.Constant][31] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %705 = reshape(%704, newshape=[11, 3, 1]) /* ty=Tensor[(11, 3, 1), float64] */;
  %706 = @func_1958(%705) /* ty=(Tensor[(11, 3, 1), float64], Tensor[(192, 1), float32]) */;
  %707 = sin(%701) /* ty=Tensor[(10, 192, 14), float64] */;
  %708 = greater(%702, %703) /* ty=Tensor[(10, 192, 14), bool] */;
  %709 = %706.1;
  (%707, %708, %709, meta[relay.Constant][31] /* ty=Tensor[(33), float64] */)
}

def @func_4432() -> Tensor[(192, 14), float32] {
  %710 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
  %710.0
}

def @func_5643(%var_5635: Tensor[(273), float64]) -> Tensor[(273), bool] {
  %711 = @func_1419() /* ty=(Tensor[(273), float64],) */;
  %712 = %711.0;
  %713 = cast(%var_5635, dtype="bool") /* ty=Tensor[(273), bool] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(1), int32] */;
  %715 = cast(%712, dtype="bool") /* ty=Tensor[(273), bool] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%715, %716) /* ty=Tensor[(273), bool] */
}

def @func_5144() -> (Tensor[(2, 12, 11), float32],) {
  %717 = @func_4554() /* ty=(Tensor[(2, 12, 11), float32],) */;
  %718 = %717.0;
  (%718,)
}

def @func_3919(%var_3916: Tensor[(2688), float32]) -> (Tensor[(2, 12, 11), float32], Tensor[(2688), float32], Tensor[(2688), float32]) {
  %719 = cast(%var_3916, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %720 = @func_1827() /* ty=Tensor[(2, 12, 11), float32] */;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %722 = reshape(%719, newshape=[2688]) /* ty=Tensor[(2688), float32] */;
  %723 = reshape(%721, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float64] */;
  %724 = @func_2131(%722, %723) /* ty=(Tensor[(192), float32], Tensor[(2688), float32], Tensor[(2, 12, 11), bool], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), bool]) */;
  %725 = %724.1;
  (%720, %725, %var_3916)
}

def @func_1522() -> (Tensor[(2, 12, 11), float64], Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float32]) {
  %726 = @func_1403() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) */;
  %727 = @func_1403() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) */;
  %728 = %727.0;
  %729 = cast(%728, dtype="float32") /* ty=Tensor[(10, 1, 14), float32] */;
  %730 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %731 = %726.2;
  %732 = atanh(%729) /* ty=Tensor[(10, 1, 14), float32] */;
  %733 = %730.1;
  (%731, %732, %733)
}

def @func_2965(%var_2913: Tensor[(15, 7, 13), float32], %var_2954: Tensor[(26880), float32]) -> (Tensor[(15, 7, 13), float32], Tensor[(192, 1), float32], Tensor[(26880), float32]) {
  %734 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 13), float32] */;
  %735 = shape_of(%var_2913, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%var_2913, dtype="float32") /* ty=Tensor[(15, 7, 13), float32] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %738 = mod(%736, %737) /* ty=Tensor[(15, 7, 13), float32] */;
  %739 = cast(%var_2913, dtype="bool") /* ty=Tensor[(15, 7, 13), bool] */;
  %740 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(15, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 7, 13), float32] */, dtype="bool") /* ty=Tensor[(15, 7, 13), bool] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %743 = equal(%741, %742) /* ty=Tensor[(15, 7, 13), bool] */;
  %744 = cast(%743, dtype="uint8") /* ty=Tensor[(15, 7, 13), uint8] */;
  %745 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%738, dtype="uint8") /* ty=Tensor[(15, 7, 13), uint8] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %748 = maximum(%746, %747) /* ty=Tensor[(15, 7, 13), uint8] */;
  %749 = cast(%748, dtype="float32") /* ty=Tensor[(15, 7, 13), float32] */;
  %750 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(15, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 13), float32] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %753 = cast(%var_2954, dtype="float32") /* ty=Tensor[(26880), float32] */;
  %754 = reshape(%753, newshape=[10, 192, 14]) /* ty=Tensor[(10, 192, 14), float32] */;
  %755 = @func_2679(%754) /* ty=(Tensor[(10, 192, 14), float64], Tensor[(10, 192, 14), bool], Tensor[(192, 1), float32], Tensor[(33), float64]) */;
  %756 = multiply(%751, %752) /* ty=Tensor[(15, 7, 13), float32] */;
  %757 = %755.2;
  (%756, %757, %var_2954)
}

def @func_4114(%var_4092: Tensor[(192, 14), uint64]) -> (Tensor[(192, 14), int64],) {
  %758 = @func_3258() /* ty=(Tensor[(192, 14), uint64],) */;
  %759 = %758.0;
  %760 = cast(%var_4092, dtype="int64") /* ty=Tensor[(192, 14), int64] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(2), int32] */;
  %762 = cast(%759, dtype="int64") /* ty=Tensor[(192, 14), int64] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %764 = bitwise_xor(%762, %763) /* ty=Tensor[(192, 14), int64] */;
  (%764,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_869(%var_862: Tensor[(192, 14), float32]) -> (Tensor[(192, 1), float64], Tensor[(192, 14), int64]) {
  %0 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %3 = cast(%1, dtype="int64") /* ty=Tensor[(192, 1), int64] */;
  %4 = cast(%var_862, dtype="int64") /* ty=Tensor[(192, 14), int64] */;
  %5 = cos(%2) /* ty=Tensor[(192, 1), float64] */;
  %6 = subtract(%3, %4) /* ty=Tensor[(192, 14), int64] */;
  (%5, %6)
}

def @func_299(%var_237: Tensor[(4, 3, 16), float32], %var_238: Tensor[(4, 3, 16), float32]) -> (Tensor[(4, 3, 16), float32],) {
  %7 = cast(%var_238, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %8 = shape_of(%var_237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%var_237, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %11 = mod(%9, %10) /* ty=Tensor[(4, 3, 16), float32] */;
  (%11,)
}

def @func_1120(%var_1109: Tensor[(2, 12, 11), float32]) -> Tensor[(2, 12, 11), int64] {
  %12 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %13 = %12.0;
  %14 = cast(%var_1109, dtype="int64") /* ty=Tensor[(2, 12, 11), int64] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="int64") /* ty=Tensor[(2, 12, 11), int64] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%16, %17) /* ty=Tensor[(2, 12, 11), int64] */
}

def @func_1421() -> (Tensor[(273), float64],) {
  @func_1419() /* ty=(Tensor[(273), float64],) */
}

def @func_1522() -> (Tensor[(2, 12, 11), float64], Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float32]) {
  %18 = @func_1403() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) */;
  %19 = @func_1403() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) */;
  %20 = %19.0;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(10, 1, 14), float32] */;
  %22 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %23 = %18.2;
  %24 = atanh(%21) /* ty=Tensor[(10, 1, 14), float32] */;
  %25 = %22.1;
  (%23, %24, %25)
}

def @func_3657(%var_3651: Tensor[(273), int64], %var_3652: Tensor[(273), float64], %var_3653: Tensor[(192), float32], %var_3654: Tensor[(2688), int64], %var_3655: Tensor[(33), float64], %var_3656: Tensor[(264), float64]) -> (Tensor[(273), float64], Tensor[(273), uint64], Tensor[(33, 1), float64], Tensor[(192), float32], Tensor[(2688), int64], Tensor[(33), float64], Tensor[(16, 1, 3), float64], Tensor[(48), float64], Tensor[(2, 12, 11), bool], Tensor[(264), float64]) {
  @func_3649(%var_3651, %var_3652, %var_3653, %var_3654, %var_3655, %var_3656) /* ty=(Tensor[(273), float64], Tensor[(273), uint64], Tensor[(33, 1), float64], Tensor[(192), float32], Tensor[(2688), int64], Tensor[(33), float64], Tensor[(16, 1, 3), float64], Tensor[(48), float64], Tensor[(2, 12, 11), bool], Tensor[(264), float64]) */
}

def @func_1240(%var_1187: Tensor[(192, 1), float32], %var_1202: Tensor[(192, 11), float32]) -> (Tensor[(4, 3, 16), float32], Tensor[(192, 11), int32]) {
  %26 = @func_1134() /* ty=(Tensor[(4, 3, 16), float32],) */;
  %27 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %28 = %27.2;
  %29 = cast(%28, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %30 = cast(%var_1202, dtype="float64") /* ty=Tensor[(192, 11), float64] */;
  %31 = floor_mod(%29, %30) /* ty=Tensor[(192, 11), float64] */;
  %32 = cast(%var_1187, dtype="uint8") /* ty=Tensor[(192, 1), uint8] */;
  %33 = shape_of(%28, dtype="int32") /* ty=Tensor[(2), int32] */;
  %34 = cast(%28, dtype="uint8") /* ty=Tensor[(192, 1), uint8] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %36 = maximum(%34, %35) /* ty=Tensor[(192, ?), uint8] */;
  %37 = cast(%31, dtype="int32") /* ty=Tensor[(192, 11), int32] */;
  %38 = cast(%36, dtype="int32") /* ty=Tensor[(192, ?), int32] */;
  %39 = %26.0;
  %40 = bitwise_xor(%37, %38) /* ty=Tensor[(192, 11), int32] */;
  (%39, %40)
}

def @func_3826(%var_3824: Tensor[(9, 1, 7), uint16], %var_3825: Tensor[(9, 11, 7), uint16]) -> Tensor[(9, 11, 7), uint16] {
  %43 = fn (%var_3815: Tensor[(9, 1, 7), uint16], %var_3816: Tensor[(9, 11, 7), uint16]) -> Tensor[(9, 11, 7), uint16] {
    %41 = cast(%var_3815, dtype="uint16") /* ty=Tensor[(9, 1, 7), uint16] */;
    %42 = cast(%var_3816, dtype="uint16") /* ty=Tensor[(9, 11, 7), uint16] */;
    maximum(%41, %42) /* ty=Tensor[(9, 11, 7), uint16] */
  };
  %43(%var_3824, %var_3825) /* ty=Tensor[(9, 11, 7), uint16] */
}

def @func_1960(%var_1959: Tensor[(11, 3, 1), float64]) -> (Tensor[(11, 3, 1), float64], Tensor[(192, 1), float32]) {
  %48 = fn (%var_1941: Tensor[(11, 3, 1), float64]) -> (Tensor[(11, 3, 1), float64], Tensor[(192, 1), float32]) {
    %44 = cast(%var_1941, dtype="float64") /* ty=Tensor[(11, 3, 1), float64] */;
    %45 = @func_1560() /* ty=(Tensor[(192, 1), float64], Tensor[(192, 1), float32]) */;
    %46 = asinh(%44) /* ty=Tensor[(11, 3, 1), float64] */;
    %47 = %45.1;
    (%46, %47)
  };
  %48(%var_1959) /* ty=(Tensor[(11, 3, 1), float64], Tensor[(192, 1), float32]) */
}

def @func_5270() -> (Tensor[(192, 14), float32],) {
  @func_5268() /* ty=(Tensor[(192, 14), float32],) */
}

def @func_4676(%var_4674: Tensor[(192), float32], %var_4675: Tensor[(33), float64]) -> (Tensor[(192, 14), float64], Tensor[(4, 3, 16), int64], Tensor[(192), float32], Tensor[(33), float64]) {
  %58 = fn (%var_4661: Tensor[(192), float32], %var_4662: Tensor[(33), float64]) -> (Tensor[(192, 14), float64], Tensor[(4, 3, 16), int64], Tensor[(192), float32], Tensor[(33), float64]) {
    %49 = cast(%var_4661, dtype="float32") /* ty=Tensor[(192), float32] */;
    %50 = @func_2237() /* ty=Tensor[(192, 14), float64] */;
    %51 = cast(%50, dtype="int64") /* ty=Tensor[(192, 14), int64] */;
    %52 = cast(%var_4662, dtype="float64") /* ty=Tensor[(33), float64] */;
    %53 = reshape(%49, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
    %54 = reshape(%51, newshape=[192, 14]) /* ty=Tensor[(192, 14), int64] */;
    %55 = reshape(%52, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
    %56 = @func_3460(%53, %54, %55) /* ty=(Tensor[(2688), float32], Tensor[(192, 1), float64], Tensor[(4, 3, 16), int64], Tensor[(192, 14), uint64], Tensor[(11, 3, 1), float64], Tensor[(33, 1), float64], Tensor[(192, ?), int16], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32]) */;
    %57 = %56.2;
    (%50, %57, %var_4661, %var_4662)
  };
  %58(%var_4674, %var_4675) /* ty=(Tensor[(192, 14), float64], Tensor[(4, 3, 16), int64], Tensor[(192), float32], Tensor[(33), float64]) */
}

def @func_3536() -> (Tensor[(10, 1, 14), float32], Tensor[(192, 14), float32], Tensor[(192, 14), int64], Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(273), float64], Tensor[(33), float64], Tensor[(26880), float32]) {
  %59 = @func_1403() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) */;
  %60 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %61 = %60.0;
  %62 = cast(%61, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %63 = reshape(%62, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
  %64 = @func_869(%63) /* ty=(Tensor[(192, 1), float64], Tensor[(192, 14), int64]) */;
  %65 = cast(meta[relay.Constant][0] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %66 = reshape(%65, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %67 = @func_3038(%66) /* ty=(Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(2112), float32], Tensor[(192, 14), float64], Tensor[(192, 14), bool], Tensor[(192, 14), bool]) */;
  %68 = @func_1419() /* ty=(Tensor[(273), float64],) */;
  %69 = cast(meta[relay.Constant][1] /* ty=Tensor[(26880), float32] */, dtype="float32") /* ty=Tensor[(26880), float32] */;
  %70 = reshape(%69, newshape=[10, 192, 14]) /* ty=Tensor[(10, 192, 14), float32] */;
  %71 = @func_2679(%70) /* ty=(Tensor[(10, 192, 14), float64], Tensor[(10, 192, 14), bool], Tensor[(192, 1), float32], Tensor[(33), float64]) */;
  %72 = %59.0;
  %73 = %64.1;
  %74 = %67.0;
  %75 = %68.0;
  %76 = %71.3;
  (%72, %61, %73, %74, meta[relay.Constant][0] /* ty=Tensor[(192), float32] */, %75, %76, meta[relay.Constant][1] /* ty=Tensor[(26880), float32] */)
}

def @func_1929() -> (Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) {
  @func_1927() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */
}

def @func_2219() -> (Tensor[(2, 12, 11), float32], Tensor[(273), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32], Tensor[(4, 3, 16), float64]) {
  %77 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %78 = cast(meta[relay.Constant][2] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %79 = reshape(%78, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
  %80 = @func_1012(%79) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(192, 14), uint32], Tensor[(192, 14), bool]) */;
  %81 = @func_1134() /* ty=(Tensor[(4, 3, 16), float32],) */;
  %82 = %81.0;
  %83 = cast(%82, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %84 = sqrt(%83) /* ty=Tensor[(4, 3, 16), float32] */;
  %85 = cast(%84, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %86 = @func_1827() /* ty=Tensor[(2, 12, 11), float32] */;
  %87 = %77.1;
  %88 = %80.0;
  %89 = asin(%85) /* ty=Tensor[(4, 3, 16), float64] */;
  (%86, %87, %88, meta[relay.Constant][2] /* ty=Tensor[(2688), float32] */, %89)
}

def @func_2239() -> Tensor[(192, 14), float64] {
  @func_2237() /* ty=Tensor[(192, 14), float64] */
}

def @main(%var_5854: uint64, %var_5855: Tensor[(11, 11, 3), uint64], %var_5875: Tensor[(4, 48), float32], %var_5960: Tensor[(273), float64]) -> (Tensor[(11, 11, 3), uint64], Tensor[(5, 15, 3), float32], Tensor[(4, 48), float32], Tensor[(192, 14), float32], Tensor[(2, 12, 11), bool], Tensor[(1, 264), float32], Tensor[(192, 14), float32], Tensor[(273), bool], Tensor[(273), float64], Tensor[(273), bool], Tensor[(192, 1), float32], Tensor[(33), float64], Tensor[(192, 14), bool], Tensor[(192, 14), uint32]) {
  %90 = cast(%var_5854, dtype="uint64") /* ty=uint64 */;
  %91 = cast(%var_5855, dtype="uint64") /* ty=Tensor[(11, 11, 3), uint64] */;
  %92 = cast(%var_5854, dtype="float32") /* ty=float32 */;
  %93 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 15, 3), uint64] */, dtype="float32") /* ty=Tensor[(5, 15, 3), float32] */;
  %94 = @func_3208() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2, 12, 11), int64]) */;
  %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 264), float32] */, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %96 = reshape(%95, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float32] */;
  %97 = @func_830() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %98 = cast(%var_5960, dtype="float64") /* ty=Tensor[(273), float64] */;
  %99 = reshape(%98, newshape=[273]) /* ty=Tensor[(273), float64] */;
  %100 = cast(%var_5960, dtype="float64") /* ty=Tensor[(273), float64] */;
  %101 = reshape(%100, newshape=[273]) /* ty=Tensor[(273), float64] */;
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %103 = reshape(%102, newshape=[11, 3, 1]) /* ty=Tensor[(11, 3, 1), float64] */;
  %104 = @func_1960(%103) /* ty=(Tensor[(11, 3, 1), float64], Tensor[(192, 1), float32]) */;
  %105 = cast(%var_5875, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
  %106 = reshape(%105, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %107 = @func_3041(%106) /* ty=(Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(2112), float32], Tensor[(192, 14), float64], Tensor[(192, 14), bool], Tensor[(192, 14), bool]) */;
  %108 = %107.4;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %110 = log(%109) /* ty=Tensor[(192, 14), float32] */;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %112 = asin(%111) /* ty=Tensor[(192, 14), float32] */;
  %113 = cast(%112, dtype="int8") /* ty=Tensor[(192, 14), int8] */;
  %114 = shape_of(%110, dtype="int32") /* ty=Tensor[(2), int32] */;
  %115 = cast(%110, dtype="int8") /* ty=Tensor[(192, 14), int8] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %117 = add(%115, %116) /* ty=Tensor[(192, 14), int8] */;
  %118 = cast(%112, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %119 = cast(%var_5854, dtype="bool") /* ty=bool */;
  %120 = greater(%118, %119) /* ty=Tensor[(192, 14), bool] */;
  %121 = cast(%120, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %122 = shape_of(%117, dtype="int32") /* ty=Tensor[(2), int32] */;
  %123 = cast(%117, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %125 = cast(%120, dtype="uint32") /* ty=Tensor[(192, 14), uint32] */;
  %126 = shape_of(%117, dtype="int32") /* ty=Tensor[(2), int32] */;
  %127 = cast(%117, dtype="uint32") /* ty=Tensor[(192, 14), uint32] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %129 = minimum(%90, %91) /* ty=Tensor[(11, 11, 3), uint64] */;
  %130 = floor_mod(%92, %93) /* ty=Tensor[(5, 15, 3), float32] */;
  %131 = %94.1;
  %132 = @func_5548(%96) /* ty=Tensor[(2, 12, 11), bool] */;
  %133 = %97.0;
  %134 = @func_5643(%99) /* ty=Tensor[(273), bool] */;
  %135 = @func_5643(%101) /* ty=Tensor[(273), bool] */;
  %136 = %104.1;
  %137 = equal(%123, %124) /* ty=Tensor[(192, 14), bool] */;
  %138 = left_shift(%127, %128) /* ty=Tensor[(192, 14), uint32] */;
  (%129, %130, %var_5875, %131, %132, meta[relay.Constant][4] /* ty=Tensor[(1, 264), float32] */, %133, %134, %var_5960, %135, %136, meta[relay.Constant][5] /* ty=Tensor[(33), float64] */, %137, %138)
}

def @func_5144() -> (Tensor[(2, 12, 11), float32],) {
  %139 = @func_4554() /* ty=(Tensor[(2, 12, 11), float32],) */;
  %140 = %139.0;
  (%140,)
}

def @func_3919(%var_3916: Tensor[(2688), float32]) -> (Tensor[(2, 12, 11), float32], Tensor[(2688), float32], Tensor[(2688), float32]) {
  %141 = cast(%var_3916, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %142 = @func_1827() /* ty=Tensor[(2, 12, 11), float32] */;
  %143 = cast(%142, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %144 = reshape(%141, newshape=[2688]) /* ty=Tensor[(2688), float32] */;
  %145 = reshape(%143, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float64] */;
  %146 = @func_2131(%144, %145) /* ty=(Tensor[(192), float32], Tensor[(2688), float32], Tensor[(2, 12, 11), bool], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), bool]) */;
  %147 = %146.1;
  (%142, %147, %var_3916)
}

def @func_4345(%var_4325: Tensor[(192, 14), float32]) -> (Tensor[(192, 14), bool], Tensor[(192, 14), float32], Tensor[(33), float64], Tensor[(1, 26880), float32]) {
  %148 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
  %149 = %148.0;
  %150 = cast(%var_4325, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(2), int32] */;
  %152 = cast(%149, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %154 = cast(%var_4325, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %155 = shape_of(%149, dtype="int32") /* ty=Tensor[(2), int32] */;
  %156 = cast(%149, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %158 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 26880), float32] */, dtype="float32") /* ty=Tensor[(1, 26880), float32] */;
  %159 = reshape(%158, newshape=[10, 192, 14]) /* ty=Tensor[(10, 192, 14), float32] */;
  %160 = @func_2679(%159) /* ty=(Tensor[(10, 192, 14), float64], Tensor[(10, 192, 14), bool], Tensor[(192, 1), float32], Tensor[(33), float64]) */;
  %161 = logical_and(%152, %153) /* ty=Tensor[(192, 14), bool] */;
  %162 = divide(%156, %157) /* ty=Tensor[(192, 14), float32] */;
  %163 = %160.3;
  (%161, %162, %163, meta[relay.Constant][6] /* ty=Tensor[(1, 26880), float32] */)
}

def @func_5551(%var_5549: Tensor[(2, 12, 11), float32]) -> Tensor[(2, 12, 11), bool] {
  @func_5548(%var_5549) /* ty=Tensor[(2, 12, 11), bool] */
}

def @func_5166() -> (Tensor[(192, 1), float32],) {
  %166 = fn () -> (Tensor[(192, 1), float32],) {
    %164 = @func_3871() /* ty=(Tensor[(192, 1), float32], Tensor[(2, 12, 11), float64]) */;
    %165 = %164.0;
    (%165,)
  };
  %166() /* ty=(Tensor[(192, 1), float32],) */
}

def @func_5146() -> (Tensor[(2, 12, 11), float32],) {
  @func_5144() /* ty=(Tensor[(2, 12, 11), float32],) */
}

def @func_2679(%var_2642: Tensor[(10, 192, 14), float32]) -> (Tensor[(10, 192, 14), float64], Tensor[(10, 192, 14), bool], Tensor[(192, 1), float32], Tensor[(33), float64]) {
  %167 = @func_1522() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float32]) */;
  %168 = %167.1;
  %169 = @func_2237() /* ty=Tensor[(192, 14), float64] */;
  %170 = cast(%168, dtype="float32") /* ty=Tensor[(10, 1, 14), float32] */;
  %171 = cast(%169, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %172 = multiply(%170, %171) /* ty=Tensor[(10, 192, 14), float32] */;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(10, 192, 14), float32] */;
  %174 = cosh(%173) /* ty=Tensor[(10, 192, 14), float32] */;
  %175 = cast(%var_2642, dtype="float32") /* ty=Tensor[(10, 192, 14), float32] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="float32") /* ty=Tensor[(10, 192, 14), float32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %179 = floor_divide(%177, %178) /* ty=Tensor[(10, 192, 14), float32] */;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(10, 192, 14), float64] */;
  %181 = cast(%168, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
  %182 = cast(%179, dtype="bool") /* ty=Tensor[(10, 192, 14), bool] */;
  %183 = cast(meta[relay.Constant][7] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %184 = reshape(%183, newshape=[11, 3, 1]) /* ty=Tensor[(11, 3, 1), float64] */;
  %185 = @func_1958(%184) /* ty=(Tensor[(11, 3, 1), float64], Tensor[(192, 1), float32]) */;
  %186 = sin(%180) /* ty=Tensor[(10, 192, 14), float64] */;
  %187 = greater(%181, %182) /* ty=Tensor[(10, 192, 14), bool] */;
  %188 = %185.1;
  (%186, %187, %188, meta[relay.Constant][7] /* ty=Tensor[(33), float64] */)
}

def @func_1829() -> Tensor[(2, 12, 11), float32] {
  @func_1827() /* ty=Tensor[(2, 12, 11), float32] */
}

def @func_664() -> (Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) {
  %197 = fn () -> (Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) {
    %189 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
    %190 = cast(meta[relay.Constant][8] /* ty=Tensor[(192, 1), float32] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %191 = cast(meta[relay.Constant][8] /* ty=Tensor[(192, 1), float32] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %192 = reshape(%190, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
    %193 = reshape(%191, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
    %194 = @func_299(%192, %193) /* ty=(Tensor[(4, 3, 16), float32],) */;
    %195 = %189.1;
    %196 = %194.0;
    (%195, %196, meta[relay.Constant][8] /* ty=Tensor[(192, 1), float32] */)
  };
  %197() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */
}

def @func_4456() -> (Tensor[(14, 4, 5), float64], Tensor[(273), float64]) {
  @func_4454() /* ty=(Tensor[(14, 4, 5), float64], Tensor[(273), float64]) */
}

def @func_1387(%var_1386: Tensor[(2688), float32]) -> (Tensor[(2, 12, 11), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32]) {
  %209 = fn (%var_1375: Tensor[(2688), float32]) -> (Tensor[(2, 12, 11), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32]) {
    %198 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
    %199 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
    %200 = %199.0;
    %201 = cast(%200, dtype="float32") /* ty=Tensor[(2, 12, 11), float32] */;
    %202 = reshape(%201, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float32] */;
    %203 = cast(%var_1375, dtype="float32") /* ty=Tensor[(2688), float32] */;
    %204 = reshape(%203, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
    %205 = @func_1012(%204) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(192, 14), uint32], Tensor[(192, 14), bool]) */;
    %206 = %198.0;
    %207 = @func_1120(%202) /* ty=Tensor[(2, 12, 11), int64] */;
    %208 = %205.0;
    (%206, %200, %207, %208, %var_1375)
  };
  %209(%var_1386) /* ty=(Tensor[(2, 12, 11), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32]) */
}

def @func_4757() -> (Tensor[(2, 12, 11), float32],) {
  %212 = fn () -> (Tensor[(2, 12, 11), float32],) {
    %210 = @func_4554() /* ty=(Tensor[(2, 12, 11), float32],) */;
    %211 = %210.0;
    (%211,)
  };
  %212() /* ty=(Tensor[(2, 12, 11), float32],) */
}

def @func_3871() -> (Tensor[(192, 1), float32], Tensor[(2, 12, 11), float64]) {
  %213 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %214 = @func_2494() /* ty=Tensor[(192, 1), float32] */;
  %215 = %213.0;
  (%214, %215)
}

def @func_5833(%var_5819: uint8, %var_5820: Tensor[(1, 13, 14), uint8]) -> Tensor[(1, 13, 14), bool] {
  %216 = cast(%var_5819, dtype="bool") /* ty=bool */;
  %217 = cast(%var_5820, dtype="bool") /* ty=Tensor[(1, 13, 14), bool] */;
  less(%216, %217) /* ty=Tensor[(1, 13, 14), bool] */
}

def @func_1082(%var_1080: Tensor[(192, 9), float32]) -> (Tensor[(192, 9), float64], Tensor[(273), int64]) {
  @func_1079(%var_1080) /* ty=(Tensor[(192, 9), float64], Tensor[(273), int64]) */
}

def @func_5050() -> (Tensor[(2, 12, 11), float32], Tensor[(192, 14), int64], Tensor[(2688), uint64]) {
  %223 = fn () -> (Tensor[(2, 12, 11), float32], Tensor[(192, 14), int64], Tensor[(2688), uint64]) {
    %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(2688), uint64] */, dtype="uint64") /* ty=Tensor[(2688), uint64] */;
    %219 = reshape(%218, newshape=[192, 14]) /* ty=Tensor[(192, 14), uint64] */;
    %220 = @func_4114(%219) /* ty=(Tensor[(192, 14), int64],) */;
    %221 = @func_2414() /* ty=Tensor[(2, 12, 11), float32] */;
    %222 = %220.0;
    (%221, %222, meta[relay.Constant][9] /* ty=Tensor[(2688), uint64] */)
  };
  %223() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(192, 14), int64], Tensor[(2688), uint64]) */
}

def @func_4749() -> (Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2688), float32]) {
  %230 = fn () -> (Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2688), float32]) {
    %224 = @func_4554() /* ty=(Tensor[(2, 12, 11), float32],) */;
    %225 = cast(meta[relay.Constant][10] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
    %226 = reshape(%225, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
    %227 = @func_4345(%226) /* ty=(Tensor[(192, 14), bool], Tensor[(192, 14), float32], Tensor[(33), float64], Tensor[(1, 26880), float32]) */;
    %228 = %224.0;
    %229 = %227.1;
    (%228, %229, meta[relay.Constant][10] /* ty=Tensor[(2688), float32] */)
  };
  %230() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2688), float32]) */
}

def @func_2968(%var_2966: Tensor[(15, 7, 13), float32], %var_2967: Tensor[(26880), float32]) -> (Tensor[(15, 7, 13), float32], Tensor[(192, 1), float32], Tensor[(26880), float32]) {
  %255 = fn (%var_2913: Tensor[(15, 7, 13), float32], %var_2954: Tensor[(26880), float32]) -> (Tensor[(15, 7, 13), float32], Tensor[(192, 1), float32], Tensor[(26880), float32]) {
    %231 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 13), float32] */;
    %232 = shape_of(%var_2913, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%var_2913, dtype="float32") /* ty=Tensor[(15, 7, 13), float32] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %235 = mod(%233, %234) /* ty=Tensor[(15, 7, 13), float32] */;
    %236 = cast(%var_2913, dtype="bool") /* ty=Tensor[(15, 7, 13), bool] */;
    %237 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(15, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 7, 13), float32] */, dtype="bool") /* ty=Tensor[(15, 7, 13), bool] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %240 = equal(%238, %239) /* ty=Tensor[(15, 7, 13), bool] */;
    %241 = cast(%240, dtype="uint8") /* ty=Tensor[(15, 7, 13), uint8] */;
    %242 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
    %243 = cast(%235, dtype="uint8") /* ty=Tensor[(15, 7, 13), uint8] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %245 = maximum(%243, %244) /* ty=Tensor[(15, 7, 13), uint8] */;
    %246 = cast(%245, dtype="float32") /* ty=Tensor[(15, 7, 13), float32] */;
    %247 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(15, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 13), float32] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %250 = cast(%var_2954, dtype="float32") /* ty=Tensor[(26880), float32] */;
    %251 = reshape(%250, newshape=[10, 192, 14]) /* ty=Tensor[(10, 192, 14), float32] */;
    %252 = @func_2679(%251) /* ty=(Tensor[(10, 192, 14), float64], Tensor[(10, 192, 14), bool], Tensor[(192, 1), float32], Tensor[(33), float64]) */;
    %253 = multiply(%248, %249) /* ty=Tensor[(15, 7, 13), float32] */;
    %254 = %252.2;
    (%253, %254, %var_2954)
  };
  %255(%var_2966, %var_2967) /* ty=(Tensor[(15, 7, 13), float32], Tensor[(192, 1), float32], Tensor[(26880), float32]) */
}

def @func_1854() -> Tensor[(14, 4, 5), float64] {
  %257 = fn () -> Tensor[(14, 4, 5), float64] {
    %256 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 4, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
    cosh(%256) /* ty=Tensor[(14, 4, 5), float64] */
  };
  %257() /* ty=Tensor[(14, 4, 5), float64] */
}

def @func_3214() -> Tensor[(2, 12, 11), float64] {
  @func_2502() /* ty=Tensor[(2, 12, 11), float64] */
}

def @func_3873() -> (Tensor[(192, 1), float32], Tensor[(2, 12, 11), float64]) {
  @func_3871() /* ty=(Tensor[(192, 1), float32], Tensor[(2, 12, 11), float64]) */
}

def @func_5607() -> (Tensor[(192, 14), float64],) {
  %258 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %259 = %258.0;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  %261 = log2(%260) /* ty=Tensor[(192, 14), float64] */;
  (%261,)
}

def @func_1827() -> Tensor[(2, 12, 11), float32] {
  %262 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %262.0
}

def @func_1562() -> (Tensor[(192, 1), float64], Tensor[(192, 1), float32]) {
  @func_1560() /* ty=(Tensor[(192, 1), float64], Tensor[(192, 1), float32]) */
}

def @func_2788() -> (Tensor[(273), float64], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float32]) {
  %263 = @func_1419() /* ty=(Tensor[(273), float64],) */;
  %264 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %265 = @func_1522() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float32]) */;
  %266 = %263.0;
  %267 = %264.0;
  %268 = %265.2;
  (%266, %267, %268)
}

def @func_2416() -> Tensor[(2, 12, 11), float32] {
  @func_2414() /* ty=Tensor[(2, 12, 11), float32] */
}

def @func_644() -> (Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) {
  %273 = fn () -> (Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) {
    %269 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
    %270 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 12, 11), float64] */, dtype="float32") /* ty=Tensor[(2, 12, 11), float32] */;
    %271 = sin(%269) /* ty=Tensor[(2, 12, 11), float64] */;
    %272 = sigmoid(%270) /* ty=Tensor[(2, 12, 11), float32] */;
    (%271, %272)
  };
  %273() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */
}

def @func_4150(%var_4148: int16, %var_4149: Tensor[(13, 1, 9), int16]) -> Tensor[(13, 1, 9), int16] {
  %276 = fn (%var_4133: int16, %var_4134: Tensor[(13, 1, 9), int16]) -> Tensor[(13, 1, 9), int16] {
    %274 = cast(%var_4133, dtype="int16") /* ty=int16 */;
    %275 = cast(%var_4134, dtype="int16") /* ty=Tensor[(13, 1, 9), int16] */;
    bitwise_or(%274, %275) /* ty=Tensor[(13, 1, 9), int16] */
  };
  %276(%var_4148, %var_4149) /* ty=Tensor[(13, 1, 9), int16] */
}

def @func_4598() -> Tensor[(4, 3, 16), float32] {
  @func_4596() /* ty=Tensor[(4, 3, 16), float32] */
}

def @func_3483(%var_3482: Tensor[(16, 1, 3), float64]) -> (Tensor[(16, 1, 3), float64],) {
  %279 = fn (%var_3471: Tensor[(16, 1, 3), float64]) -> (Tensor[(16, 1, 3), float64],) {
    %277 = cast(%var_3471, dtype="float64") /* ty=Tensor[(16, 1, 3), float64] */;
    %278 = tan(%277) /* ty=Tensor[(16, 1, 3), float64] */;
    (%278,)
  };
  %279(%var_3482) /* ty=(Tensor[(16, 1, 3), float64],) */
}

def @func_2495() -> Tensor[(192, 1), float32] {
  %281 = fn () -> Tensor[(192, 1), float32] {
    %280 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
    %280.2
  };
  %281() /* ty=Tensor[(192, 1), float32] */
}

def @func_3945(%var_3944: Tensor[(192), float32]) -> (Tensor[(273), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(2112), float32]) {
  %290 = fn (%var_3932: Tensor[(192), float32]) -> (Tensor[(273), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(2112), float32]) {
    %282 = @func_3536() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(192, 14), float32], Tensor[(192, 14), int64], Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(273), float64], Tensor[(33), float64], Tensor[(26880), float32]) */;
    %283 = cast(%var_3932, dtype="float32") /* ty=Tensor[(192), float32] */;
    %284 = cast(meta[relay.Constant][14] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %285 = reshape(%283, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
    %286 = reshape(%284, newshape=[192, 11]) /* ty=Tensor[(192, 11), float32] */;
    %287 = @func_1240(%285, %286) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 11), int32]) */;
    %288 = %282.5;
    %289 = %287.0;
    (%288, %289, %var_3932, meta[relay.Constant][14] /* ty=Tensor[(2112), float32] */)
  };
  %290(%var_3944) /* ty=(Tensor[(273), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(2112), float32]) */
}

def @func_2237() -> Tensor[(192, 14), float64] {
  %291 = @func_1927() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */;
  %292 = %291.1;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  %294 = cos(%293) /* ty=Tensor[(192, 14), float64] */;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  rsqrt(%295) /* ty=Tensor[(192, 14), float64] */
}

def @func_4454() -> (Tensor[(14, 4, 5), float64], Tensor[(273), float64]) {
  %296 = @func_1853() /* ty=Tensor[(14, 4, 5), float64] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %298 = @func_1419() /* ty=(Tensor[(273), float64],) */;
  %299 = atanh(%297) /* ty=Tensor[(14, 4, 5), float64] */;
  %300 = %298.0;
  (%299, %300)
}

def @func_2291(%var_2289: Tensor[(273), int64]) -> (Tensor[(273), bool], Tensor[(2, 12, 11), int64], Tensor[(1, 264), float32]) {
  @func_2288(%var_2289) /* ty=(Tensor[(273), bool], Tensor[(2, 12, 11), int64], Tensor[(1, 264), float32]) */
}

def @func_1318() -> (Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) {
  %301 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %302 = %301.3;
  %303 = cast(meta[relay.Constant][15] /* ty=Tensor[(273), int64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(1), int32] */;
  %305 = cast(%302, dtype="float64") /* ty=Tensor[(273), float64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?), float64] */;
  %307 = cast(meta[relay.Constant][16] /* ty=Tensor[(1728), float32] */, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %308 = reshape(%307, newshape=[192, 9]) /* ty=Tensor[(192, 9), float32] */;
  %309 = @func_1079(%308) /* ty=(Tensor[(192, 9), float64], Tensor[(273), int64]) */;
  %310 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %311 = cast(meta[relay.Constant][17] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %312 = cast(meta[relay.Constant][17] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %313 = reshape(%311, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %314 = reshape(%312, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %315 = @func_299(%313, %314) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %316 = cast(meta[relay.Constant][17] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %317 = cast(meta[relay.Constant][17] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %318 = reshape(%316, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %319 = reshape(%317, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %320 = @func_299(%318, %319) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %321 = floor_divide(%305, %306) /* ty=Tensor[(273), float64] */;
  %322 = %309.1;
  %323 = %310.0;
  %324 = %315.0;
  %325 = %320.0;
  (%321, %322, meta[relay.Constant][16] /* ty=Tensor[(1728), float32] */, %323, %324, meta[relay.Constant][17] /* ty=Tensor[(192), float32] */, %325)
}

def @func_2134(%var_2132: Tensor[(2688), float32], %var_2133: Tensor[(2, 12, 11), float64]) -> (Tensor[(192), float32], Tensor[(2688), float32], Tensor[(2, 12, 11), bool], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), bool]) {
  %348 = fn (%var_2089: Tensor[(2688), float32], %var_2093: Tensor[(2, 12, 11), float64]) -> (Tensor[(192), float32], Tensor[(2688), float32], Tensor[(2, 12, 11), bool], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), bool]) {
    %326 = cast(%var_2089, dtype="float32") /* ty=Tensor[(2688), float32] */;
    %327 = reshape(%326, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
    %328 = @func_1012(%327) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(192, 14), uint32], Tensor[(192, 14), bool]) */;
    %329 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
    %330 = %329.0;
    %331 = cast(%330, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
    %332 = acosh(%331) /* ty=Tensor[(2, 12, 11), float64] */;
    %333 = cast(%var_2093, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
    %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%332, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %337 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
    %338 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
    %339 = cast(%var_2093, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
    %340 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%332, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %343 = %328.1;
    %344 = greater_equal(%335, %336) /* ty=Tensor[(2, 12, 11), bool] */;
    %345 = %337.0;
    %346 = %338.3;
    %347 = greater(%341, %342) /* ty=Tensor[(2, 12, 11), bool] */;
    (%343, %var_2089, %344, %345, %346, %347)
  };
  %348(%var_2132, %var_2133) /* ty=(Tensor[(192), float32], Tensor[(2688), float32], Tensor[(2, 12, 11), bool], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), bool]) */
}

def @func_830() -> (Tensor[(192, 14), float32], Tensor[(273), int64]) {
  %356 = fn () -> (Tensor[(192, 14), float32], Tensor[(273), int64]) {
    %349 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
    %350 = %349.2;
    %351 = cast(%350, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %352 = cast(meta[relay.Constant][18] /* ty=Tensor[(192, 14), float32] */, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
    %353 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
    %354 = floor_mod(%351, %352) /* ty=Tensor[(192, 14), float32] */;
    %355 = %353.3;
    (%354, %355)
  };
  %356() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */
}

def @func_2526() -> (Tensor[(192, 14), float32],) {
  %357 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %358 = %357.0;
  (%358,)
}

def @func_4728(%var_4726: Tensor[(4, 3, 16), float32], %var_4727: int16) -> (Tensor[(4, 3, 16), int32], Tensor[(4, 3, 16), float64], Tensor[(13, 1, 9), int16], int16, Tensor[(1, 117), int16], Tensor[(192, 14), float32]) {
  %374 = fn (%var_4687: Tensor[(4, 3, 16), float32], %var_4705: int16) -> (Tensor[(4, 3, 16), int32], Tensor[(4, 3, 16), float64], Tensor[(13, 1, 9), int16], int16, Tensor[(1, 117), int16], Tensor[(192, 14), float32]) {
    %359 = @func_4596() /* ty=Tensor[(4, 3, 16), float32] */;
    %360 = cast(%var_4687, dtype="int32") /* ty=Tensor[(4, 3, 16), int32] */;
    %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
    %362 = cast(%359, dtype="int32") /* ty=Tensor[(4, 3, 16), int32] */;
    %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %364 = cast(%359, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
    %365 = cast(%var_4705, dtype="int16") /* ty=int16 */;
    %366 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 117), int16] */, dtype="int16") /* ty=Tensor[(1, 117), int16] */;
    %367 = reshape(%365, newshape=[]) /* ty=int16 */;
    %368 = reshape(%366, newshape=[13, 1, 9]) /* ty=Tensor[(13, 1, 9), int16] */;
    %369 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
    %370 = bitwise_and(%362, %363) /* ty=Tensor[(4, 3, 16), int32] */;
    %371 = atanh(%364) /* ty=Tensor[(4, 3, 16), float64] */;
    %372 = @func_4147(%367, %368) /* ty=Tensor[(13, 1, 9), int16] */;
    %373 = %369.0;
    (%370, %371, %372, %var_4705, meta[relay.Constant][19] /* ty=Tensor[(1, 117), int16] */, %373)
  };
  %374(%var_4726, %var_4727) /* ty=(Tensor[(4, 3, 16), int32], Tensor[(4, 3, 16), float64], Tensor[(13, 1, 9), int16], int16, Tensor[(1, 117), int16], Tensor[(192, 14), float32]) */
}

def @func_4046(%var_4033: Tensor[(192), float32]) -> (Tensor[(273), float32], Tensor[(2112), float32], Tensor[(192), float32]) {
  %375 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
  %376 = %375.1;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(273), float32] */;
  %378 = cast(%var_4033, dtype="float32") /* ty=Tensor[(192), float32] */;
  %379 = reshape(%378, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %380 = @func_3943(%379) /* ty=(Tensor[(273), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(2112), float32]) */;
  %381 = sinh(%377) /* ty=Tensor[(273), float32] */;
  %382 = %380.3;
  (%381, %382, %var_4033)
}

def @func_4867() -> (Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) {
  %387 = fn () -> (Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) {
    %383 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
    %384 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
    %385 = %383.0;
    %386 = %384.0;
    (%385, %386)
  };
  %387() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */
}

def @func_564(%var_562: Tensor[(13, 3, 7), int64], %var_563: Tensor[(48, 4), float32]) -> (Tensor[(13, 3, 7), bool], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32], Tensor[(48, 4), float64]) {
  @func_560(%var_562, %var_563) /* ty=(Tensor[(13, 3, 7), bool], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32], Tensor[(48, 4), float64]) */
}

def @func_4906(%var_4905: Tensor[(192, 11), int32]) -> (Tensor[(192, 11), bool],) {
  %395 = fn (%var_4891: Tensor[(192, 11), int32]) -> (Tensor[(192, 11), bool],) {
    %388 = @func_3536() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(192, 14), float32], Tensor[(192, 14), int64], Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(273), float64], Tensor[(33), float64], Tensor[(26880), float32]) */;
    %389 = %388.3;
    %390 = cast(%var_4891, dtype="bool") /* ty=Tensor[(192, 11), bool] */;
    %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(2), int32] */;
    %392 = cast(%389, dtype="bool") /* ty=Tensor[(192, 11), bool] */;
    %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %394 = logical_or(%392, %393) /* ty=Tensor[(192, 11), bool] */;
    (%394,)
  };
  %395(%var_4905) /* ty=(Tensor[(192, 11), bool],) */
}

def @func_5548(%var_5538: Tensor[(2, 12, 11), float32]) -> Tensor[(2, 12, 11), bool] {
  %396 = @func_4748() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2688), float32]) */;
  %397 = %396.0;
  %398 = cast(%var_5538, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%400, %401) /* ty=Tensor[(2, 12, 11), bool] */
}

def @func_5001() -> Tensor[(192, 14), float32] {
  %403 = fn () -> Tensor[(192, 14), float32] {
    %402 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
    %402.0
  };
  %403() /* ty=Tensor[(192, 14), float32] */
}

def @func_4767(%var_4761: Tensor[(16, 8, 7), float32]) -> (Tensor[(16, 8, 7), float32],) {
  %404 = cast(%var_4761, dtype="float32") /* ty=Tensor[(16, 8, 7), float32] */;
  %405 = cos(%404) /* ty=Tensor[(16, 8, 7), float32] */;
  (%405,)
}

def @func_3041(%var_3039: Tensor[(192), float32]) -> (Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(2112), float32], Tensor[(192, 14), float64], Tensor[(192, 14), bool], Tensor[(192, 14), bool]) {
  @func_3038(%var_3039) /* ty=(Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(2112), float32], Tensor[(192, 14), float64], Tensor[(192, 14), bool], Tensor[(192, 14), bool]) */
}

def @func_1012(%var_922: Tensor[(192, 14), float32]) -> (Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(192, 14), uint32], Tensor[(192, 14), bool]) {
  %406 = cast(meta[relay.Constant][20] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %407 = cast(meta[relay.Constant][20] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %408 = reshape(%406, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %409 = reshape(%407, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %410 = @func_299(%408, %409) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %411 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %412 = %411.0;
  %413 = cast(%var_922, dtype="uint32") /* ty=Tensor[(192, 14), uint32] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(2), int32] */;
  %415 = cast(%412, dtype="uint32") /* ty=Tensor[(192, 14), uint32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %417 = cast(%var_922, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %418 = shape_of(%412, dtype="int32") /* ty=Tensor[(2), int32] */;
  %419 = cast(%412, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %421 = not_equal(%419, %420) /* ty=Tensor[(192, 14), bool] */;
  %422 = cast(%412, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(2), int32] */;
  %424 = cast(%421, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %426 = %410.0;
  %427 = bitwise_and(%415, %416) /* ty=Tensor[(192, 14), uint32] */;
  %428 = less_equal(%424, %425) /* ty=Tensor[(192, 14), bool] */;
  (%426, meta[relay.Constant][20] /* ty=Tensor[(192), float32] */, %427, %428)
}

def @func_3260() -> (Tensor[(192, 14), uint64],) {
  @func_3258() /* ty=(Tensor[(192, 14), uint64],) */
}

def @func_5379() -> (Tensor[(192, 14), float32], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(2, 12, 11), float64], Tensor[(192, 1), float32], Tensor[(2, 12, 11), float64]) {
  %444 = fn () -> (Tensor[(192, 14), float32], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(2, 12, 11), float64], Tensor[(192, 1), float32], Tensor[(2, 12, 11), float64]) {
    %429 = @func_3536() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(192, 14), float32], Tensor[(192, 14), int64], Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(273), float64], Tensor[(33), float64], Tensor[(26880), float32]) */;
    %430 = %429.1;
    %431 = cast(%430, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
    %432 = cast(meta[relay.Constant][21] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %433 = cast(meta[relay.Constant][21] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %434 = reshape(%432, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
    %435 = reshape(%433, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
    %436 = @func_299(%434, %435) /* ty=(Tensor[(4, 3, 16), float32],) */;
    %437 = @func_1560() /* ty=(Tensor[(192, 1), float64], Tensor[(192, 1), float32]) */;
    %438 = @func_4866() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */;
    %439 = tan(%431) /* ty=Tensor[(192, 14), float32] */;
    %440 = %436.0;
    %441 = @func_3214() /* ty=Tensor[(2, 12, 11), float64] */;
    %442 = %437.1;
    %443 = %438.0;
    (%439, %440, meta[relay.Constant][21] /* ty=Tensor[(192), float32] */, %441, %442, %443)
  };
  %444() /* ty=(Tensor[(192, 14), float32], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(2, 12, 11), float64], Tensor[(192, 1), float32], Tensor[(2, 12, 11), float64]) */
}

def @func_4130() -> (Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) {
  @func_4128() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */
}

def @func_3757() -> (Tensor[(4, 3, 16), float32],) {
  %445 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %446 = %445.1;
  (%446,)
}

def @func_4348(%var_4346: Tensor[(192, 14), float32]) -> (Tensor[(192, 14), bool], Tensor[(192, 14), float32], Tensor[(33), float64], Tensor[(1, 26880), float32]) {
  @func_4345(%var_4346) /* ty=(Tensor[(192, 14), bool], Tensor[(192, 14), float32], Tensor[(33), float64], Tensor[(1, 26880), float32]) */
}

def @func_560(%var_536: Tensor[(13, 3, 7), int64], %var_543: Tensor[(48, 4), float32]) -> (Tensor[(13, 3, 7), bool], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32], Tensor[(48, 4), float64]) {
  %447 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 3, 7), int64] */, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
  %448 = shape_of(%var_536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%var_536, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %451 = cast(%var_543, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %452 = cast(%var_543, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %453 = reshape(%451, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %454 = reshape(%452, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %455 = @func_299(%453, %454) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %456 = cast(%var_543, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %457 = %455.0;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
  %459 = reshape(%456, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %460 = reshape(%458, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %461 = @func_299(%459, %460) /* ty=(Tensor[(4, 3, 16), float32],) */;
  %462 = cast(%var_543, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
  %463 = not_equal(%449, %450) /* ty=Tensor[(13, 3, 7), bool] */;
  %464 = %461.0;
  %465 = log10(%462) /* ty=Tensor[(48, 4), float64] */;
  (%463, %457, %464, %465)
}

def @func_4618() -> (Tensor[(192, 14), float32],) {
  %468 = fn () -> (Tensor[(192, 14), float32],) {
    %466 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
    %467 = %466.0;
    (%467,)
  };
  %468() /* ty=(Tensor[(192, 14), float32],) */
}

def @func_5645(%var_5644: Tensor[(273), float64]) -> Tensor[(273), bool] {
  %475 = fn (%var_5635: Tensor[(273), float64]) -> Tensor[(273), bool] {
    %469 = @func_1419() /* ty=(Tensor[(273), float64],) */;
    %470 = %469.0;
    %471 = cast(%var_5635, dtype="bool") /* ty=Tensor[(273), bool] */;
    %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(1), int32] */;
    %473 = cast(%470, dtype="bool") /* ty=Tensor[(273), bool] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?), bool] */;
    logical_or(%473, %474) /* ty=Tensor[(273), bool] */
  };
  %475(%var_5644) /* ty=Tensor[(273), bool] */
}

def @func_3538() -> (Tensor[(10, 1, 14), float32], Tensor[(192, 14), float32], Tensor[(192, 14), int64], Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(273), float64], Tensor[(33), float64], Tensor[(26880), float32]) {
  @func_3536() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(192, 14), float32], Tensor[(192, 14), int64], Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(273), float64], Tensor[(33), float64], Tensor[(26880), float32]) */
}

def @func_5609() -> (Tensor[(192, 14), float64],) {
  @func_5607() /* ty=(Tensor[(192, 14), float64],) */
}

def @func_1123(%var_1121: Tensor[(2, 12, 11), float32]) -> Tensor[(2, 12, 11), int64] {
  @func_1120(%var_1121) /* ty=Tensor[(2, 12, 11), int64] */
}

def @func_1135() -> (Tensor[(4, 3, 16), float32],) {
  %478 = fn () -> (Tensor[(4, 3, 16), float32],) {
    %476 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
    %477 = %476.1;
    (%477,)
  };
  %478() /* ty=(Tensor[(4, 3, 16), float32],) */
}

def @func_4479() -> Tensor[(12, 1, 16), float64] {
  %480 = fn () -> Tensor[(12, 1, 16), float64] {
    %479 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 1, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 1, 16), float64] */;
    acosh(%479) /* ty=Tensor[(12, 1, 16), float64] */
  };
  %480() /* ty=Tensor[(12, 1, 16), float64] */
}

def @func_2867(%var_2866: Tensor[(192), float32]) -> (Tensor[(14, 4, 5), float64], Tensor[(273), float32], Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(192, 14), float32], Tensor[(4, 3, 16), float32], Tensor[(192), float32]) {
  %497 = fn (%var_2862: Tensor[(192), float32]) -> (Tensor[(14, 4, 5), float64], Tensor[(273), float32], Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(192, 14), float32], Tensor[(4, 3, 16), float32], Tensor[(192), float32]) {
    %481 = @func_1419() /* ty=(Tensor[(273), float64],) */;
    %482 = %481.0;
    %483 = cast(%482, dtype="float32") /* ty=Tensor[(273), float32] */;
    %484 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
    %485 = @func_2788() /* ty=(Tensor[(273), float64], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float32]) */;
    %486 = cast(%var_2862, dtype="float32") /* ty=Tensor[(192), float32] */;
    %487 = cast(%var_2862, dtype="float32") /* ty=Tensor[(192), float32] */;
    %488 = reshape(%486, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
    %489 = reshape(%487, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
    %490 = @func_299(%488, %489) /* ty=(Tensor[(4, 3, 16), float32],) */;
    %491 = @func_1853() /* ty=Tensor[(14, 4, 5), float64] */;
    %492 = acosh(%483) /* ty=Tensor[(273), float32] */;
    %493 = @func_2414() /* ty=Tensor[(2, 12, 11), float32] */;
    %494 = %484.0;
    %495 = %485.1;
    %496 = %490.0;
    (%491, %492, %493, %494, %495, %496, %var_2862)
  };
  %497(%var_2866) /* ty=(Tensor[(14, 4, 5), float64], Tensor[(273), float32], Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(192, 14), float32], Tensor[(4, 3, 16), float32], Tensor[(192), float32]) */
}

def @func_3208() -> (Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2, 12, 11), int64]) {
  %504 = fn () -> (Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2, 12, 11), int64]) {
    %498 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
    %499 = @func_2795() /* ty=Tensor[(2, 12, 11), float32] */;
    %500 = cast(%499, dtype="float32") /* ty=Tensor[(2, 12, 11), float32] */;
    %501 = reshape(%500, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float32] */;
    %502 = %498.0;
    %503 = @func_1120(%501) /* ty=Tensor[(2, 12, 11), int64] */;
    (%499, %502, %503)
  };
  %504() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(192, 14), float32], Tensor[(2, 12, 11), int64]) */
}

def @func_2682(%var_2680: Tensor[(10, 192, 14), float32]) -> (Tensor[(10, 192, 14), float64], Tensor[(10, 192, 14), bool], Tensor[(192, 1), float32], Tensor[(33), float64]) {
  @func_2679(%var_2680) /* ty=(Tensor[(10, 192, 14), float64], Tensor[(10, 192, 14), bool], Tensor[(192, 1), float32], Tensor[(33), float64]) */
}

def @func_3649(%var_3602: Tensor[(273), int64], %var_3609: Tensor[(273), float64], %var_3626: Tensor[(192), float32], %var_3627: Tensor[(2688), int64], %var_3628: Tensor[(33), float64], %var_3639: Tensor[(264), float64]) -> (Tensor[(273), float64], Tensor[(273), uint64], Tensor[(33, 1), float64], Tensor[(192), float32], Tensor[(2688), int64], Tensor[(33), float64], Tensor[(16, 1, 3), float64], Tensor[(48), float64], Tensor[(2, 12, 11), bool], Tensor[(264), float64]) {
  %505 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %506 = %505.1;
  %507 = cast(%var_3602, dtype="float64") /* ty=Tensor[(273), float64] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(1), int32] */;
  %509 = cast(%506, dtype="float64") /* ty=Tensor[(273), float64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?), float64] */;
  %511 = floor_mod(%509, %510) /* ty=Tensor[(273), float64] */;
  %512 = cast(%var_3609, dtype="float64") /* ty=Tensor[(273), float64] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(1), int32] */;
  %514 = cast(%511, dtype="float64") /* ty=Tensor[(273), float64] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?), float64] */;
  %516 = cast(%var_3609, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %517 = shape_of(%511, dtype="int32") /* ty=Tensor[(1), int32] */;
  %518 = cast(%511, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %520 = cast(%var_3626, dtype="float32") /* ty=Tensor[(192), float32] */;
  %521 = cast(%var_3627, dtype="int64") /* ty=Tensor[(2688), int64] */;
  %522 = cast(%var_3628, dtype="float64") /* ty=Tensor[(33), float64] */;
  %523 = reshape(%520, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %524 = reshape(%521, newshape=[192, 14]) /* ty=Tensor[(192, 14), int64] */;
  %525 = reshape(%522, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %526 = @func_3460(%523, %524, %525) /* ty=(Tensor[(2688), float32], Tensor[(192, 1), float64], Tensor[(4, 3, 16), int64], Tensor[(192, 14), uint64], Tensor[(11, 3, 1), float64], Tensor[(33, 1), float64], Tensor[(192, ?), int16], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32]) */;
  %527 = cast(meta[relay.Constant][24] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %528 = reshape(%527, newshape=[16, 1, 3]) /* ty=Tensor[(16, 1, 3), float64] */;
  %529 = @func_3481(%528) /* ty=(Tensor[(16, 1, 3), float64],) */;
  %530 = cast(%var_3627, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %531 = cast(%var_3639, dtype="float64") /* ty=Tensor[(264), float64] */;
  %532 = reshape(%530, newshape=[2688]) /* ty=Tensor[(2688), float32] */;
  %533 = reshape(%531, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float64] */;
  %534 = @func_2131(%532, %533) /* ty=(Tensor[(192), float32], Tensor[(2688), float32], Tensor[(2, 12, 11), bool], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), bool]) */;
  %535 = divide(%514, %515) /* ty=Tensor[(273), float64] */;
  %536 = bitwise_or(%518, %519) /* ty=Tensor[(273), uint64] */;
  %537 = %526.5;
  %538 = %529.0;
  %539 = %534.5;
  (%535, %536, %537, %var_3626, %var_3627, %var_3628, %538, meta[relay.Constant][24] /* ty=Tensor[(48), float64] */, %539, %var_3639)
}

def @func_4470() -> (Tensor[(2, 12, 11), float64], Tensor[(192), float32]) {
  %544 = fn () -> (Tensor[(2, 12, 11), float64], Tensor[(192), float32]) {
    %540 = @func_1403() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) */;
    %541 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
    %542 = %540.1;
    %543 = %541.5;
    (%542, %543)
  };
  %544() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192), float32]) */
}

def @func_2504() -> Tensor[(2, 12, 11), float64] {
  @func_2502() /* ty=Tensor[(2, 12, 11), float64] */
}

def @func_303(%var_301: Tensor[(4, 3, 16), float32], %var_302: Tensor[(4, 3, 16), float32]) -> (Tensor[(4, 3, 16), float32],) {
  @func_299(%var_301, %var_302) /* ty=(Tensor[(4, 3, 16), float32],) */
}

def @func_3038(%var_3011: Tensor[(192), float32]) -> (Tensor[(192, 11), int32], Tensor[(192), float32], Tensor[(2112), float32], Tensor[(192, 14), float64], Tensor[(192, 14), bool], Tensor[(192, 14), bool]) {
  %545 = cast(%var_3011, dtype="float32") /* ty=Tensor[(192), float32] */;
  %546 = cast(meta[relay.Constant][25] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %547 = reshape(%545, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
  %548 = reshape(%546, newshape=[192, 11]) /* ty=Tensor[(192, 11), float32] */;
  %549 = @func_1240(%547, %548) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 11), int32]) */;
  %550 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  %553 = cosh(%552) /* ty=Tensor[(192, 14), float64] */;
  %554 = cast(%553, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  %555 = acos(%554) /* ty=Tensor[(192, 14), float64] */;
  %556 = cast(%555, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %557 = shape_of(%553, dtype="int32") /* ty=Tensor[(2), int32] */;
  %558 = cast(%553, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %560 = cast(meta[relay.Constant][26] /* ty=Tensor[(192, 14), float64] */, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %561 = shape_of(%553, dtype="int32") /* ty=Tensor[(2), int32] */;
  %562 = cast(%553, dtype="bool") /* ty=Tensor[(192, 14), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %564 = %549.1;
  %565 = @func_2237() /* ty=Tensor[(192, 14), float64] */;
  %566 = logical_or(%558, %559) /* ty=Tensor[(192, 14), bool] */;
  %567 = greater_equal(%562, %563) /* ty=Tensor[(192, 14), bool] */;
  (%564, %var_3011, meta[relay.Constant][25] /* ty=Tensor[(2112), float32] */, %565, %566, %567)
}

def @func_2288(%var_2267: Tensor[(273), int64]) -> (Tensor[(273), bool], Tensor[(2, 12, 11), int64], Tensor[(1, 264), float32]) {
  %568 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %569 = %568.3;
  %570 = cast(%var_2267, dtype="float64") /* ty=Tensor[(273), float64] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(1), int32] */;
  %572 = cast(%569, dtype="float64") /* ty=Tensor[(273), float64] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?), float64] */;
  %574 = power(%572, %573) /* ty=Tensor[(273), float64] */;
  %575 = cast(%574, dtype="bool") /* ty=Tensor[(273), bool] */;
  %576 = shape_of(%569, dtype="int32") /* ty=Tensor[(1), int32] */;
  %577 = cast(%569, dtype="bool") /* ty=Tensor[(273), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?), bool] */;
  %579 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 264), float32] */, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %580 = reshape(%579, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), float32] */;
  %581 = logical_and(%577, %578) /* ty=Tensor[(273), bool] */;
  %582 = @func_1120(%580) /* ty=Tensor[(2, 12, 11), int64] */;
  (%581, %582, meta[relay.Constant][27] /* ty=Tensor[(1, 264), float32] */)
}

def @func_732() -> (Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) {
  %593 = fn () -> (Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) {
    %583 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
    %584 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
    %585 = cast(meta[relay.Constant][28] /* ty=Tensor[(273), int64] */, dtype="int64") /* ty=Tensor[(273), int64] */;
    %586 = %584.2;
    %587 = cast(%586, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %588 = reshape(%585, newshape=[13, 3, 7]) /* ty=Tensor[(13, 3, 7), int64] */;
    %589 = reshape(%587, newshape=[48, 4]) /* ty=Tensor[(48, 4), float32] */;
    %590 = @func_560(%588, %589) /* ty=(Tensor[(13, 3, 7), bool], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32], Tensor[(48, 4), float64]) */;
    %591 = %583.1;
    %592 = %590.1;
    (%591, %586, %592, meta[relay.Constant][28] /* ty=Tensor[(273), int64] */)
  };
  %593() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */
}

def @func_2414() -> Tensor[(2, 12, 11), float32] {
  %594 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %594.1
}

def @func_5423(%var_5421: int16) -> (Tensor[(192, 14), float32], Tensor[(192), float32], Tensor[(2, 12, 11), float32]) {
  @func_5420(%var_5421) /* ty=(Tensor[(192, 14), float32], Tensor[(192), float32], Tensor[(2, 12, 11), float32]) */
}

def @func_5268() -> (Tensor[(192, 14), float32],) {
  %595 = @func_5000() /* ty=Tensor[(192, 14), float32] */;
  (%595,)
}

def @func_3216() -> Tensor[(2, 12, 11), float64] {
  @func_3214() /* ty=Tensor[(2, 12, 11), float64] */
}

def @func_5837(%var_5835: uint8, %var_5836: Tensor[(1, 13, 14), uint8]) -> Tensor[(1, 13, 14), bool] {
  @func_5833(%var_5835, %var_5836) /* ty=Tensor[(1, 13, 14), bool] */
}

def @func_3464(%var_3461: Tensor[(4, 3, 16), float32], %var_3462: Tensor[(192, 14), int64], %var_3463: Tensor[(33, 1), float64]) -> (Tensor[(2688), float32], Tensor[(192, 1), float64], Tensor[(4, 3, 16), int64], Tensor[(192, 14), uint64], Tensor[(11, 3, 1), float64], Tensor[(33, 1), float64], Tensor[(192, ?), int16], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32]) {
  %644 = fn (%var_3429: Tensor[(4, 3, 16), float32], %var_3437: Tensor[(192, 14), int64], %var_3444: Tensor[(33, 1), float64]) -> (Tensor[(2688), float32], Tensor[(192, 1), float64], Tensor[(4, 3, 16), int64], Tensor[(192, 14), uint64], Tensor[(11, 3, 1), float64], Tensor[(33, 1), float64], Tensor[(192, ?), int16], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32]) {
    %596 = @func_2494() /* ty=Tensor[(192, 1), float32] */;
    %597 = cast(%596, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
    %598 = @func_2219() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(273), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32], Tensor[(4, 3, 16), float64]) */;
    %599 = %598.4;
    %600 = cast(%596, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %601 = log(%600) /* ty=Tensor[(192, 1), float32] */;
    %602 = cast(%601, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %603 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
    %604 = cast(%599, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
    %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %606 = maximum(%604, %605) /* ty=Tensor[(4, 3, 16), float32] */;
    %607 = cast(%var_3429, dtype="int64") /* ty=Tensor[(4, 3, 16), int64] */;
    %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
    %609 = cast(%606, dtype="int64") /* ty=Tensor[(4, 3, 16), int64] */;
    %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %611 = cast(meta[relay.Constant][29] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
    %612 = reshape(%611, newshape=[192, 14]) /* ty=Tensor[(192, 14), float32] */;
    %613 = @func_869(%612) /* ty=(Tensor[(192, 1), float64], Tensor[(192, 14), int64]) */;
    %614 = %613.1;
    %615 = cast(%var_3437, dtype="uint64") /* ty=Tensor[(192, 14), uint64] */;
    %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(2), int32] */;
    %617 = cast(%614, dtype="uint64") /* ty=Tensor[(192, 14), uint64] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %619 = cast(%var_3444, dtype="float64") /* ty=Tensor[(33, 1), float64] */;
    %620 = reshape(%619, newshape=[11, 3, 1]) /* ty=Tensor[(11, 3, 1), float64] */;
    %621 = @func_1958(%620) /* ty=(Tensor[(11, 3, 1), float64], Tensor[(192, 1), float32]) */;
    %622 = cast(%599, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
    %623 = shape_of(%601, dtype="int32") /* ty=Tensor[(2), int32] */;
    %624 = cast(%601, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %626 = floor_divide(%624, %625) /* ty=Tensor[(192, ?), float32] */;
    %627 = cast(%601, dtype="int16") /* ty=Tensor[(192, 1), int16] */;
    %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(2), int32] */;
    %629 = cast(%626, dtype="int16") /* ty=Tensor[(192, ?), int16] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %631 = cast(%596, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %632 = cast(%599, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
    %633 = reshape(%631, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
    %634 = reshape(%632, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
    %635 = @func_299(%633, %634) /* ty=(Tensor[(4, 3, 16), float32],) */;
    %636 = cast(%599, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
    %637 = sqrt(%597) /* ty=Tensor[(192, 1), float64] */;
    %638 = bitwise_or(%609, %610) /* ty=Tensor[(4, 3, 16), int64] */;
    %639 = maximum(%617, %618) /* ty=Tensor[(192, 14), uint64] */;
    %640 = %621.0;
    %641 = right_shift(%629, %630) /* ty=Tensor[(192, ?), int16] */;
    %642 = %635.0;
    %643 = sin(%636) /* ty=Tensor[(4, 3, 16), float32] */;
    (meta[relay.Constant][29] /* ty=Tensor[(2688), float32] */, %637, %638, %639, %640, %var_3444, %641, %642, %643)
  };
  %644(%var_3461, %var_3462, %var_3463) /* ty=(Tensor[(2688), float32], Tensor[(192, 1), float64], Tensor[(4, 3, 16), int64], Tensor[(192, 14), uint64], Tensor[(11, 3, 1), float64], Tensor[(33, 1), float64], Tensor[(192, ?), int16], Tensor[(4, 3, 16), float32], Tensor[(4, 3, 16), float32]) */
}

def @func_5659() -> (Tensor[(2688), float32], Tensor[(2, 12, 11), float32]) {
  %649 = fn () -> (Tensor[(2688), float32], Tensor[(2, 12, 11), float32]) {
    %645 = @func_5211() /* ty=(Tensor[(2688), float32],) */;
    %646 = @func_2219() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(273), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32], Tensor[(4, 3, 16), float64]) */;
    %647 = %645.0;
    %648 = %646.0;
    (%647, %648)
  };
  %649() /* ty=(Tensor[(2688), float32], Tensor[(2, 12, 11), float32]) */
}

def @func_3922(%var_3920: Tensor[(2688), float32]) -> (Tensor[(2, 12, 11), float32], Tensor[(2688), float32], Tensor[(2688), float32]) {
  @func_3919(%var_3920) /* ty=(Tensor[(2, 12, 11), float32], Tensor[(2688), float32], Tensor[(2688), float32]) */
}

def @func_1560() -> (Tensor[(192, 1), float64], Tensor[(192, 1), float32]) {
  %650 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %651 = %650.1;
  %652 = cast(%651, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %653 = asin(%652) /* ty=Tensor[(192, 1), float64] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %655 = cast(%651, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %656 = cosh(%654) /* ty=Tensor[(192, 1), float64] */;
  %657 = tan(%655) /* ty=Tensor[(192, 1), float32] */;
  (%656, %657)
}

def @func_872(%var_870: Tensor[(192, 14), float32]) -> (Tensor[(192, 1), float64], Tensor[(192, 14), int64]) {
  @func_869(%var_870) /* ty=(Tensor[(192, 1), float64], Tensor[(192, 14), int64]) */
}

def @func_5212() -> (Tensor[(2688), float32],) {
  %660 = fn () -> (Tensor[(2688), float32],) {
    %658 = @func_2219() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(273), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32], Tensor[(4, 3, 16), float64]) */;
    %659 = %658.3;
    (%659,)
  };
  %660() /* ty=(Tensor[(2688), float32],) */
}

def @func_2734(%var_2733: Tensor[(192, 14), float32]) -> (Tensor[(192, 14), int32], Tensor[(273), float64], Tensor[(4, 3, 16), float32]) {
  %672 = fn (%var_2716: Tensor[(192, 14), float32]) -> (Tensor[(192, 14), int32], Tensor[(273), float64], Tensor[(4, 3, 16), float32]) {
    %661 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
    %662 = %661.0;
    %663 = cast(%var_2716, dtype="int32") /* ty=Tensor[(192, 14), int32] */;
    %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(2), int32] */;
    %665 = cast(%662, dtype="int32") /* ty=Tensor[(192, 14), int32] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %667 = @func_1419() /* ty=(Tensor[(273), float64],) */;
    %668 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
    %669 = multiply(%665, %666) /* ty=Tensor[(192, 14), int32] */;
    %670 = %667.0;
    %671 = %668.0;
    (%669, %670, %671)
  };
  %672(%var_2733) /* ty=(Tensor[(192, 14), int32], Tensor[(273), float64], Tensor[(4, 3, 16), float32]) */
}

def @func_2796() -> Tensor[(2, 12, 11), float32] {
  %673 = fn () -> Tensor[(2, 12, 11), float32] {
    @func_1827() /* ty=Tensor[(2, 12, 11), float32] */
  };
  %673() /* ty=Tensor[(2, 12, 11), float32] */
}

def @func_1703() -> (Tensor[(192, 14), float32],) {
  %676 = fn () -> (Tensor[(192, 14), float32],) {
    %674 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
    %675 = %674.0;
    (%675,)
  };
  %676() /* ty=(Tensor[(192, 14), float32],) */
}

def @func_3759() -> (Tensor[(4, 3, 16), float32],) {
  @func_3757() /* ty=(Tensor[(4, 3, 16), float32],) */
}

def @func_1674(%var_1673: Tensor[(273), float64]) -> (Tensor[(273), bool], Tensor[(273), int32]) {
  %691 = fn (%var_1636: Tensor[(273), float64]) -> (Tensor[(273), bool], Tensor[(273), int32]) {
    %677 = @func_1419() /* ty=(Tensor[(273), float64],) */;
    %678 = %677.0;
    %679 = cast(%var_1636, dtype="bool") /* ty=Tensor[(273), bool] */;
    %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(1), int32] */;
    %681 = cast(%678, dtype="bool") /* ty=Tensor[(273), bool] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?), bool] */;
    %683 = cast(%var_1636, dtype="float32") /* ty=Tensor[(273), float32] */;
    %684 = sqrt(%683) /* ty=Tensor[(273), float32] */;
    %685 = cast(%678, dtype="int32") /* ty=Tensor[(273), int32] */;
    %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(1), int32] */;
    %687 = cast(%684, dtype="int32") /* ty=Tensor[(273), int32] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?), int32] */;
    %689 = greater_equal(%681, %682) /* ty=Tensor[(273), bool] */;
    %690 = right_shift(%687, %688) /* ty=Tensor[(273), int32] */;
    (%689, %690)
  };
  %691(%var_1673) /* ty=(Tensor[(273), bool], Tensor[(273), int32]) */
}

def @func_5120() -> (Tensor[(192, 14), float32], Tensor[(192, 14), float32]) {
  %698 = fn () -> (Tensor[(192, 14), float32], Tensor[(192, 14), float32]) {
    %692 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
    %693 = @func_3258() /* ty=(Tensor[(192, 14), uint64],) */;
    %694 = %693.0;
    %695 = cast(%694, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
    %696 = %692.0;
    %697 = atan(%695) /* ty=Tensor[(192, 14), float32] */;
    (%696, %697)
  };
  %698() /* ty=(Tensor[(192, 14), float32], Tensor[(192, 14), float32]) */
}

def @func_1524() -> (Tensor[(2, 12, 11), float64], Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float32]) {
  @func_1522() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float32]) */
}

def @func_2054(%var_2053: Tensor[(2112), float32]) -> (Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(2112), float32], Tensor[(273), int64]) {
  %709 = fn (%var_2030: Tensor[(2112), float32]) -> (Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(2112), float32], Tensor[(273), int64]) {
    %699 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
    %700 = %699.2;
    %701 = cast(%700, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %702 = cast(%var_2030, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %703 = reshape(%701, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
    %704 = reshape(%702, newshape=[192, 11]) /* ty=Tensor[(192, 11), float32] */;
    %705 = @func_1240(%703, %704) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 11), int32]) */;
    %706 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
    %707 = %705.0;
    %708 = %706.1;
    (%700, %707, %var_2030, %708)
  };
  %709(%var_2053) /* ty=(Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(2112), float32], Tensor[(273), int64]) */
}

def @func_5339() -> (Tensor[(192, 14), uint64], Tensor[(2, 12, 11), float32]) {
  %713 = fn () -> (Tensor[(192, 14), uint64], Tensor[(2, 12, 11), float32]) {
    %710 = @func_3808() /* ty=(Tensor[(192, 14), uint64],) */;
    %711 = %710.0;
    %712 = @func_2795() /* ty=Tensor[(2, 12, 11), float32] */;
    (%711, %712)
  };
  %713() /* ty=(Tensor[(192, 14), uint64], Tensor[(2, 12, 11), float32]) */
}

def @func_1320() -> (Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) {
  @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */
}

def @func_2221() -> (Tensor[(2, 12, 11), float32], Tensor[(273), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32], Tensor[(4, 3, 16), float64]) {
  @func_2219() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(273), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), float32], Tensor[(4, 3, 16), float64]) */
}

def @func_3258() -> (Tensor[(192, 14), uint64],) {
  %714 = @func_2237() /* ty=Tensor[(192, 14), float64] */;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(192, 14), float64] */;
  %716 = log10(%715) /* ty=Tensor[(192, 14), float64] */;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %718 = sinh(%717) /* ty=Tensor[(192, 14), float32] */;
  %719 = cast(%718, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %720 = atanh(%719) /* ty=Tensor[(192, 14), float32] */;
  %721 = cast(%716, dtype="uint64") /* ty=Tensor[(192, 14), uint64] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(2), int32] */;
  %723 = cast(%720, dtype="uint64") /* ty=Tensor[(192, 14), uint64] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %725 = right_shift(%723, %724) /* ty=Tensor[(192, 14), uint64] */;
  (%725,)
}

def @func_1015(%var_1013: Tensor[(192, 14), float32]) -> (Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(192, 14), uint32], Tensor[(192, 14), bool]) {
  @func_1012(%var_1013) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(192, 14), uint32], Tensor[(192, 14), bool]) */
}

def @func_1244(%var_1242: Tensor[(192, 1), float32], %var_1243: Tensor[(192, 11), float32]) -> (Tensor[(4, 3, 16), float32], Tensor[(192, 11), int32]) {
  @func_1240(%var_1242, %var_1243) /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 11), int32]) */
}

def @func_1927() -> (Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) {
  %726 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %727 = @func_829() /* ty=(Tensor[(192, 14), float32], Tensor[(273), int64]) */;
  %728 = %727.0;
  %729 = cast(%728, dtype="float32") /* ty=Tensor[(192, 14), float32] */;
  %730 = %726.0;
  %731 = acosh(%729) /* ty=Tensor[(192, 14), float32] */;
  (%730, %731)
}

def @func_4399(%var_4398: Tensor[(273), int64]) -> (Tensor[(2, 12, 11), float64], Tensor[(273), int16], Tensor[(273), float64], Tensor[(273), int16]) {
  %748 = fn (%var_4360: Tensor[(273), int64]) -> (Tensor[(2, 12, 11), float64], Tensor[(273), int16], Tensor[(273), float64], Tensor[(273), int16]) {
    %732 = @func_4128() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */;
    %733 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
    %734 = %733.1;
    %735 = cast(%var_4360, dtype="int16") /* ty=Tensor[(273), int16] */;
    %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(1), int32] */;
    %737 = cast(%734, dtype="int16") /* ty=Tensor[(273), int16] */;
    %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?), int16] */;
    %739 = cast(%var_4360, dtype="float64") /* ty=Tensor[(273), float64] */;
    %740 = cast(%734, dtype="int16") /* ty=Tensor[(273), int16] */;
    %741 = shape_of(%var_4360, dtype="int32") /* ty=Tensor[(1), int32] */;
    %742 = cast(%var_4360, dtype="int16") /* ty=Tensor[(273), int16] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?), int16] */;
    %744 = %732.0;
    %745 = logical_xor(%737, %738) /* ty=Tensor[(273), int16] */;
    %746 = cosh(%739) /* ty=Tensor[(273), float64] */;
    %747 = minimum(%742, %743) /* ty=Tensor[(273), int16] */;
    (%744, %745, %746, %747)
  };
  %748(%var_4398) /* ty=(Tensor[(2, 12, 11), float64], Tensor[(273), int16], Tensor[(273), float64], Tensor[(273), int16]) */
}

def @func_4049(%var_4047: Tensor[(192), float32]) -> (Tensor[(273), float32], Tensor[(2112), float32], Tensor[(192), float32]) {
  @func_4046(%var_4047) /* ty=(Tensor[(273), float32], Tensor[(2112), float32], Tensor[(192), float32]) */
}

def @func_4433() -> Tensor[(192, 14), float32] {
  %750 = fn () -> Tensor[(192, 14), float32] {
    %749 = @func_2526() /* ty=(Tensor[(192, 14), float32],) */;
    %749.0
  };
  %750() /* ty=Tensor[(192, 14), float32] */
}

def @func_2502() -> Tensor[(2, 12, 11), float64] {
  %751 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
  %751.0
}

def @func_5420(%var_5390: int16) -> (Tensor[(192, 14), float32], Tensor[(192), float32], Tensor[(2, 12, 11), float32]) {
  %752 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %753 = cast(%var_5390, dtype="int16") /* ty=int16 */;
  %754 = reshape(%752, newshape=[4, 3, 16]) /* ty=Tensor[(4, 3, 16), float32] */;
  %755 = reshape(%753, newshape=[]) /* ty=int16 */;
  %756 = @func_4725(%754, %755) /* ty=(Tensor[(4, 3, 16), int32], Tensor[(4, 3, 16), float64], Tensor[(13, 1, 9), int16], int16, Tensor[(1, 117), int16], Tensor[(192, 14), float32]) */;
  %757 = @func_4554() /* ty=(Tensor[(2, 12, 11), float32],) */;
  %758 = %757.0;
  %759 = cast(%var_5390, dtype="float32") /* ty=float32 */;
  %760 = cast(%758, dtype="float32") /* ty=Tensor[(2, 12, 11), float32] */;
  %761 = %756.5;
  %762 = divide(%759, %760) /* ty=Tensor[(2, 12, 11), float32] */;
  (%761, meta[relay.Constant][30] /* ty=Tensor[(192), float32] */, %762)
}

def @func_1419() -> (Tensor[(273), float64],) {
  %763 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
  %764 = %763.0;
  (%764,)
}

def @func_5731(%var_5730: Tensor[(2688), uint64]) -> (Tensor[(192, 14), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), bool]) {
  %778 = fn (%var_5722: Tensor[(2688), uint64]) -> (Tensor[(192, 14), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), bool]) {
    %765 = cast(meta[relay.Constant][31] /* ty=Tensor[(2688), uint64] */, dtype="uint64") /* ty=Tensor[(2688), uint64] */;
    %766 = reshape(%765, newshape=[192, 14]) /* ty=Tensor[(192, 14), uint64] */;
    %767 = @func_4114(%766) /* ty=(Tensor[(192, 14), int64],) */;
    %768 = @func_3757() /* ty=(Tensor[(4, 3, 16), float32],) */;
    %769 = %768.0;
    %770 = cast(%769, dtype="float32") /* ty=Tensor[(4, 3, 16), float32] */;
    %771 = cast(%var_5722, dtype="bool") /* ty=Tensor[(2688), bool] */;
    %772 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(2688), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %773 = cast(meta[relay.Constant][31] /* ty=Tensor[(2688), uint64] */, dtype="bool") /* ty=Tensor[(2688), bool] */;
    %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?), bool] */;
    %775 = %767.0;
    %776 = cosh(%770) /* ty=Tensor[(4, 3, 16), float32] */;
    %777 = less(%773, %774) /* ty=Tensor[(2688), bool] */;
    (%775, %776, %777)
  };
  %778(%var_5730) /* ty=(Tensor[(192, 14), int64], Tensor[(4, 3, 16), float32], Tensor[(2688), bool]) */
}

def @func_1404() -> (Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) {
  %785 = fn () -> (Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) {
    %779 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 1, 14), float32] */, dtype="float32") /* ty=Tensor[(10, 1, 14), float32] */;
    %780 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
    %781 = @func_643() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float32]) */;
    %782 = log(%779) /* ty=Tensor[(10, 1, 14), float32] */;
    %783 = %780.0;
    %784 = %781.0;
    (%782, %783, %784)
  };
  %785() /* ty=(Tensor[(10, 1, 14), float32], Tensor[(2, 12, 11), float64], Tensor[(2, 12, 11), float64]) */
}

def @func_4555() -> (Tensor[(2, 12, 11), float32],) {
  %787 = fn () -> (Tensor[(2, 12, 11), float32],) {
    %786 = @func_2911() /* ty=Tensor[(2, 12, 11), float32] */;
    (%786,)
  };
  %787() /* ty=(Tensor[(2, 12, 11), float32],) */
}

def @func_2912() -> Tensor[(2, 12, 11), float32] {
  %788 = fn () -> Tensor[(2, 12, 11), float32] {
    @func_2795() /* ty=Tensor[(2, 12, 11), float32] */
  };
  %788() /* ty=Tensor[(2, 12, 11), float32] */
}

def @func_4596() -> Tensor[(4, 3, 16), float32] {
  %789 = @func_1318() /* ty=(Tensor[(273), float64], Tensor[(273), int64], Tensor[(1728), float32], Tensor[(2, 12, 11), float64], Tensor[(4, 3, 16), float32], Tensor[(192), float32], Tensor[(4, 3, 16), float32]) */;
  %789.6
}

def @func_4770(%var_4768: Tensor[(16, 8, 7), float32]) -> (Tensor[(16, 8, 7), float32],) {
  @func_4767(%var_4768) /* ty=(Tensor[(16, 8, 7), float32],) */
}

def @func_4116(%var_4115: Tensor[(192, 14), uint64]) -> (Tensor[(192, 14), int64],) {
  %797 = fn (%var_4092: Tensor[(192, 14), uint64]) -> (Tensor[(192, 14), int64],) {
    %790 = @func_3258() /* ty=(Tensor[(192, 14), uint64],) */;
    %791 = %790.0;
    %792 = cast(%var_4092, dtype="int64") /* ty=Tensor[(192, 14), int64] */;
    %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(2), int32] */;
    %794 = cast(%791, dtype="int64") /* ty=Tensor[(192, 14), int64] */;
    %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %796 = bitwise_xor(%794, %795) /* ty=Tensor[(192, 14), int64] */;
    (%796,)
  };
  %797(%var_4115) /* ty=(Tensor[(192, 14), int64],) */
}

def @func_5745() -> (Tensor[(2, 12, 11), float64],) {
  %800 = fn () -> (Tensor[(2, 12, 11), float64],) {
    %798 = @func_4866() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */;
    %799 = %798.0;
    (%799,)
  };
  %800() /* ty=(Tensor[(2, 12, 11), float64],) */
}

def @func_3809() -> (Tensor[(192, 14), uint64],) {
  %803 = fn () -> (Tensor[(192, 14), uint64],) {
    %801 = @func_3258() /* ty=(Tensor[(192, 14), uint64],) */;
    %802 = %801.0;
    (%802,)
  };
  %803() /* ty=(Tensor[(192, 14), uint64],) */
}

def @func_4128() -> (Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) {
  %804 = @func_1927() /* ty=(Tensor[(2, 12, 11), float64], Tensor[(192, 14), float32]) */;
  %805 = @func_1702() /* ty=(Tensor[(192, 14), float32],) */;
  %806 = %804.0;
  %807 = %805.0;
  (%806, %807)
}

def @func_1079(%var_1059: Tensor[(192, 9), float32]) -> (Tensor[(192, 9), float64], Tensor[(273), int64]) {
  %808 = @func_663() /* ty=(Tensor[(2, 12, 11), float32], Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32]) */;
  %809 = %808.2;
  %810 = cast(%809, dtype="float64") /* ty=Tensor[(192, 1), float64] */;
  %811 = cast(%var_1059, dtype="float64") /* ty=Tensor[(192, 9), float64] */;
  %812 = @func_731() /* ty=(Tensor[(4, 3, 16), float32], Tensor[(192, 1), float32], Tensor[(4, 3, 16), float32], Tensor[(273), int64]) */;
  %813 = power(%810, %811) /* ty=Tensor[(192, 9), float64] */;
  %814 = %812.3;
  (%813, %814)
}

def @func_2790() -> (Tensor[(273), float64], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float32]) {
  @func_2788() /* ty=(Tensor[(273), float64], Tensor[(192, 14), float32], Tensor[(2, 12, 11), float32]) */
}

def @func_2528() -> (Tensor[(192, 14), float32],) {
  @func_2526() /* ty=(Tensor[(192, 14), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen650/build/output.py", line 2001, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:45:11] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

