==========mod==========
#[version = "0.0.5"]
def @func_7672() -> (Tensor[(8, 15, 10), float64], Tensor[(1232), int32], Tensor[(8, 15, 10), float64]) {
  %0 = @func_4909() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 14, 11), float64], Tensor[(1232), float64]) */;
  %1 = %0.2;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %3 = cosh(%2) /* ty=Tensor[(1232), float32] */;
  %4 = cast(%1, dtype="uint8") /* ty=Tensor[(1232), uint8] */;
  %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(1), int32] */;
  %6 = cast(%3, dtype="uint8") /* ty=Tensor[(1232), uint8] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %8 = logical_xor(%6, %7) /* ty=Tensor[(1232), uint8] */;
  %9 = cast(%8, dtype="int32") /* ty=Tensor[(1232), int32] */;
  %10 = shape_of(%3, dtype="int32") /* ty=Tensor[(1), int32] */;
  %11 = cast(%3, dtype="int32") /* ty=Tensor[(1232), int32] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?), int32] */;
  %13 = @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %14 = @func_5436() /* ty=Tensor[(8, 15, 10), float64] */;
  %15 = bitwise_xor(%11, %12) /* ty=Tensor[(1232), int32] */;
  %16 = %13.0;
  (%14, %15, %16)
}

def @func_965(%var_928: Tensor[(8, 15, 10), float64], %var_957: Tensor[(2, 160), float32], %var_959: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), int64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32], Tensor[(8, 15, 10), bool]) {
  %17 = @func_860() /* ty=Tensor[(8, 15, 10), float64] */;
  %18 = cast(%var_928, dtype="int64") /* ty=Tensor[(8, 15, 10), int64] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="int64") /* ty=Tensor[(8, 15, 10), int64] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %22 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %23 = cast(%var_957, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %24 = reshape(%23, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %25 = @func_727(%24) /* ty=(Tensor[(8, 15, 10), int8], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %26 = cast(%var_959, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %27 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%17, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %30 = right_shift(%20, %21) /* ty=Tensor[(8, 15, 10), int64] */;
  %31 = %22.0;
  %32 = %25.2;
  %33 = greater_equal(%28, %29) /* ty=Tensor[(8, 15, 10), bool] */;
  (%30, %31, %32, %var_957, %33)
}

def @func_7376() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %34 = @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %35 = @func_1349() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %36 = @func_3486() /* ty=Tensor[(8, 15, 10), float64] */;
  %37 = %34.0;
  %38 = %35.0;
  (%36, %37, %38)
}

def @func_8080() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %39 = @func_7765() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %40 = @func_2523() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %41 = @func_6241() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %42 = cast(meta[relay.Constant][0] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %43 = reshape(%42, newshape=[80, 4]) /* ty=Tensor[(80, 4), float32] */;
  %44 = @func_2919(%43) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(80, 4), float32]) */;
  %45 = @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %46 = %39.1;
  %47 = %40.0;
  %48 = %41.0;
  %49 = %44.1;
  %50 = %45.0;
  %51 = @func_1290() /* ty=Tensor[(8, 15, 10), float64] */;
  (%46, %47, %48, %49, meta[relay.Constant][0] /* ty=Tensor[(320), float32] */, %50, %51)
}

def @func_1719(%var_1712: Tensor[(15, 12), float64]) -> (Tensor[(15, 12), float64], Tensor[(8, 15, 10), float64]) {
  %52 = cast(%var_1712, dtype="float64") /* ty=Tensor[(15, 12), float64] */;
  %53 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %54 = exp(%52) /* ty=Tensor[(15, 12), float64] */;
  %55 = %53.0;
  (%54, %55)
}

def @func_1185(%var_1147: Tensor[(7, 9, 4), float64]) -> (Tensor[(7, 9, 4), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %56 = cast(%var_1147, dtype="float64") /* ty=Tensor[(7, 9, 4), float64] */;
  %57 = erf(%56) /* ty=Tensor[(7, 9, 4), float64] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(7, 9, 4), float32] */;
  %59 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %60 = sin(%58) /* ty=Tensor[(7, 9, 4), float32] */;
  %61 = @func_788() /* ty=Tensor[(8, 15, 10), float64] */;
  %62 = %59.1;
  (%60, %61, %62)
}

def @func_582(%var_560: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), float32],) {
  %63 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %64 = %63.0;
  %65 = cast(%var_560, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = logical_and(%67, %68) /* ty=Tensor[(8, 15, 10), bool] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(8, 15, 10), float32] */;
  %71 = rsqrt(%70) /* ty=Tensor[(8, 15, 10), float32] */;
  (%71,)
}

def @func_1797() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  %72 = @func_1265() /* ty=Tensor[(8, 15, 10), float32] */;
  %73 = cast(%72, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %74 = reshape(%73, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
  %75 = @func_582(%74) /* ty=(Tensor[(8, 15, 10), float32],) */;
  %76 = %75.0;
  %77 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  (%72, %76, %77)
}

def @func_3106(%var_3103: Tensor[(8, 14, 11), float64]) -> (Tensor[(8, 14, 11), float64],) {
  %78 = cast(%var_3103, dtype="float64") /* ty=Tensor[(8, 14, 11), float64] */;
  %79 = acosh(%78) /* ty=Tensor[(8, 14, 11), float64] */;
  (%79,)
}

def @func_3154() -> (Tensor[(8, 15, 10), float32], Tensor[(2, 264), float32], Tensor[(11, 16, 3), float64]) {
  %80 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 264), float32] */, dtype="float32") /* ty=Tensor[(2, 264), float32] */;
  %81 = reshape(%80, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %82 = @func_2448(%81) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), uint16], Tensor[(11, 16, 3), uint16]) */;
  %83 = %82.3;
  %84 = cast(%83, dtype="float64") /* ty=Tensor[(11, 16, 3), float64] */;
  %85 = @func_2802() /* ty=Tensor[(8, 15, 10), float32] */;
  %86 = sigmoid(%84) /* ty=Tensor[(11, 16, 3), float64] */;
  (%85, meta[relay.Constant][1] /* ty=Tensor[(2, 264), float32] */, %86)
}

def @func_6811() -> (Tensor[(8, 15, 10), float64],) {
  %87 = @func_6241() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %88 = %87.2;
  (%88,)
}

def @func_7583() -> (Tensor[(8, 14, 11), float64],) {
  %89 = @func_4909() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 14, 11), float64], Tensor[(1232), float64]) */;
  %90 = %89.1;
  (%90,)
}

def @func_3563(%var_3555: Tensor[(5, 6), float32]) -> (Tensor[(5, 6), float32], Tensor[(8, 15, 10), float64]) {
  %91 = cast(%var_3555, dtype="float32") /* ty=Tensor[(5, 6), float32] */;
  %92 = log2(%91) /* ty=Tensor[(5, 6), float32] */;
  %93 = @func_1290() /* ty=Tensor[(8, 15, 10), float64] */;
  (%92, %93)
}

def @func_5043() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  %94 = @func_2761() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %95 = @func_4650() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %96 = %94.0;
  %97 = %95.0;
  (%96, %97)
}

def @func_5821(%var_5813: Tensor[(28), float32]) -> (Tensor[(8, 15, 10), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) {
  %98 = @func_4428() /* ty=(Tensor[(8, 15, 10), float32],) */;
  %99 = cast(%var_5813, dtype="float32") /* ty=Tensor[(28), float32] */;
  %100 = reshape(%99, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %101 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %102 = %98.0;
  %103 = @func_4168(%100) /* ty=Tensor[(1, 4, 7), float32] */;
  %104 = %101.0;
  (%102, %103, %var_5813, %104)
}

def @func_2448(%var_2394: Tensor[(11, 16, 3), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), uint16], Tensor[(11, 16, 3), uint16]) {
  %105 = cast(%var_2394, dtype="float32") /* ty=Tensor[(11, 16, 3), float32] */;
  %106 = acosh(%105) /* ty=Tensor[(11, 16, 3), float32] */;
  %107 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 16, 3), float32] */, dtype="bool") /* ty=Tensor[(11, 16, 3), bool] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%106, dtype="bool") /* ty=Tensor[(11, 16, 3), bool] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %111 = logical_or(%109, %110) /* ty=Tensor[(11, 16, 3), bool] */;
  %112 = cast(%111, dtype="uint64") /* ty=Tensor[(11, 16, 3), uint64] */;
  %113 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%106, dtype="uint64") /* ty=Tensor[(11, 16, 3), uint64] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %116 = bitwise_or(%114, %115) /* ty=Tensor[(11, 16, 3), uint64] */;
  %117 = cast(%106, dtype="uint16") /* ty=Tensor[(11, 16, 3), uint16] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="uint16") /* ty=Tensor[(11, 16, 3), uint16] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %121 = cast(%111, dtype="bool") /* ty=Tensor[(11, 16, 3), bool] */;
  %122 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%106, dtype="bool") /* ty=Tensor[(11, 16, 3), bool] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %125 = less(%123, %124) /* ty=Tensor[(11, 16, 3), bool] */;
  %126 = cast(%106, dtype="uint16") /* ty=Tensor[(11, 16, 3), uint16] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%125, dtype="uint16") /* ty=Tensor[(11, 16, 3), uint16] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %130 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  %131 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  %132 = right_shift(%119, %120) /* ty=Tensor[(11, 16, 3), uint16] */;
  %133 = subtract(%128, %129) /* ty=Tensor[(11, 16, 3), uint16] */;
  (%130, %131, %132, %133)
}

def @func_5297() -> Tensor[(8, 15, 10), float32] {
  %134 = @func_2882() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */;
  %134.1
}

def @func_2251(%var_2194: Tensor[(16, 1, 3), int8], %var_2195: Tensor[(16, 8, 3), int8], %var_2204: Tensor[(16, 8, 3), int8], %var_2224: Tensor[(320), float32]) -> (Tensor[(16, 8, 3), int8], Tensor[(16, 8, 3), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  %135 = cast(%var_2194, dtype="int8") /* ty=Tensor[(16, 1, 3), int8] */;
  %136 = cast(%var_2195, dtype="int8") /* ty=Tensor[(16, 8, 3), int8] */;
  %137 = cast(%var_2204, dtype="float64") /* ty=Tensor[(16, 8, 3), float64] */;
  %138 = shape_of(%var_2195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_2195, dtype="float64") /* ty=Tensor[(16, 8, 3), float64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %141 = cast(%var_2224, dtype="float32") /* ty=Tensor[(320), float32] */;
  %142 = reshape(%141, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %143 = @func_1698(%142) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */;
  %144 = bitwise_and(%135, %136) /* ty=Tensor[(16, 8, 3), int8] */;
  %145 = divide(%139, %140) /* ty=Tensor[(16, 8, 3), float64] */;
  %146 = %143.0;
  (%144, %145, %146, %var_2224)
}

def @func_6431(%var_6389: int32) -> (Tensor[(15, 10, 6), int32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) {
  %147 = cast(%var_6389, dtype="int32") /* ty=int32 */;
  %148 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 10, 6), int32] */, dtype="int32") /* ty=Tensor[(15, 10, 6), int32] */;
  %149 = @func_2761() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %150 = multiply(%147, %148) /* ty=Tensor[(15, 10, 6), int32] */;
  %151 = %149.0;
  %152 = @func_1265() /* ty=Tensor[(8, 15, 10), float32] */;
  (%150, %151, %152)
}

def @func_7242(%var_7224: Tensor[(4, 40), uint64]) -> (Tensor[(8, 15, 10), float64], Tensor[(4, 8, 5), uint64], Tensor[(4, 40), uint64]) {
  %153 = cast(%var_7224, dtype="uint64") /* ty=Tensor[(4, 40), uint64] */;
  %154 = reshape(%153, newshape=[4, 8, 5]) /* ty=Tensor[(4, 8, 5), uint64] */;
  %155 = @func_3486() /* ty=Tensor[(8, 15, 10), float64] */;
  %156 = @func_4547(%154) /* ty=Tensor[(4, 8, 5), uint64] */;
  (%155, %156, %var_7224)
}

def @func_7390(%var_7383: Tensor[(8, 11), float32]) -> (Tensor[(8, 11), float32],) {
  %157 = cast(%var_7383, dtype="float32") /* ty=Tensor[(8, 11), float32] */;
  %158 = exp(%157) /* ty=Tensor[(8, 11), float32] */;
  (%158,)
}

def @func_7453(%var_7448: uint32, %var_7449: Tensor[(10, 15, 6), uint32]) -> Tensor[(10, 15, 6), uint32] {
  %159 = cast(%var_7448, dtype="uint32") /* ty=uint32 */;
  %160 = cast(%var_7449, dtype="uint32") /* ty=Tensor[(10, 15, 6), uint32] */;
  logical_xor(%159, %160) /* ty=Tensor[(10, 15, 6), uint32] */
}

def @func_1619() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %161 = @func_215() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %162 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %163 = %161.0;
  %164 = %162.0;
  %165 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  (%163, %164, %165)
}

def @func_6644() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %166 = @func_4650() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %167 = @func_4126() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %168 = %166.0;
  %169 = @func_1912() /* ty=Tensor[(8, 15, 10), float64] */;
  %170 = %167.1;
  (%168, %169, %170)
}

def @func_7841() -> (Tensor[(8, 15, 10), float64],) {
  %171 = @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %172 = %171.0;
  (%172,)
}

def @func_6089() -> (Tensor[(8, 15, 10), float64], Tensor[(4, 10, 8), int8], Tensor[(320), float64]) {
  %173 = cast(meta[relay.Constant][4] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %174 = reshape(%173, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), float64] */;
  %175 = @func_5534(%174) /* ty=(Tensor[(4, 10, 8), int8],) */;
  %176 = @func_5436() /* ty=Tensor[(8, 15, 10), float64] */;
  %177 = %175.0;
  (%176, %177, meta[relay.Constant][4] /* ty=Tensor[(320), float64] */)
}

def @func_8161() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(3528), bool], Tensor[(252), uint16], Tensor[(3528), uint16], Tensor[(28, 1), float32]) {
  %178 = @func_6253() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %179 = cast(meta[relay.Constant][5] /* ty=Tensor[(28, 1), float32] */, dtype="float32") /* ty=Tensor[(28, 1), float32] */;
  %180 = reshape(%179, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %181 = @func_4371(%180) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) */;
  %182 = @func_4428() /* ty=(Tensor[(8, 15, 10), float32],) */;
  %183 = cast(meta[relay.Constant][6] /* ty=Tensor[(252), uint16] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %184 = cast(meta[relay.Constant][7] /* ty=Tensor[(3528), uint16] */, dtype="uint16") /* ty=Tensor[(3528), uint16] */;
  %185 = cast(meta[relay.Constant][7] /* ty=Tensor[(3528), uint16] */, dtype="float64") /* ty=Tensor[(3528), float64] */;
  %186 = reshape(%183, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %187 = reshape(%184, newshape=[3528]) /* ty=Tensor[(3528), uint16] */;
  %188 = reshape(%185, newshape=[3528]) /* ty=Tensor[(3528), float64] */;
  %189 = @func_5594(%186, %187, %188) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16], Tensor[(252), uint16], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(3528), bool]) */;
  %190 = cast(meta[relay.Constant][5] /* ty=Tensor[(28, 1), float32] */, dtype="float32") /* ty=Tensor[(28, 1), float32] */;
  %191 = %178.0;
  %192 = %181.3;
  %193 = %182.0;
  %194 = %189.6;
  %195 = cosh(%190) /* ty=Tensor[(28, 1), float32] */;
  (%191, %192, %193, %194, meta[relay.Constant][6] /* ty=Tensor[(252), uint16] */, meta[relay.Constant][7] /* ty=Tensor[(3528), uint16] */, %195)
}

def @func_5696() -> (Tensor[(8, 15, 10), float32], Tensor[(3, 84), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %196 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 84), float64] */, dtype="float64") /* ty=Tensor[(3, 84), float64] */;
  %197 = reshape(%196, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), float64] */;
  %198 = @func_1185(%197) /* ty=(Tensor[(7, 9, 4), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %199 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %201 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %202 = %198.2;
  %203 = log2(%200) /* ty=Tensor[(8, 15, 10), float64] */;
  %204 = %201.1;
  (%202, meta[relay.Constant][8] /* ty=Tensor[(3, 84), float64] */, %203, %204)
}

def @func_2070(%var_2023: Tensor[(3, 11, 15), float32], %var_2043: Tensor[(80, 4), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(3, 11, 15), float32], Tensor[(80, 4), float32], Tensor[(8, 15, 10), float32]) {
  %205 = cast(meta[relay.Constant][9] /* ty=Tensor[(80, 4), float32] */, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %206 = reshape(%205, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %207 = @func_727(%206) /* ty=(Tensor[(8, 15, 10), int8], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %208 = cast(%var_2023, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %209 = sqrt(%208) /* ty=Tensor[(3, 11, 15), float32] */;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %211 = sin(%210) /* ty=Tensor[(3, 11, 15), float32] */;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %213 = cast(%var_2043, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %214 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(80, 4), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %215 = cast(meta[relay.Constant][9] /* ty=Tensor[(80, 4), float32] */, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %217 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %218 = %207.2;
  %219 = log(%212) /* ty=Tensor[(3, 11, 15), float32] */;
  %220 = power(%215, %216) /* ty=Tensor[(80, 4), float32] */;
  %221 = %217.1;
  (%218, %219, %220, %221)
}

def @func_2637(%var_2605: Tensor[(1200), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(1200), float64], Tensor[(1, 320), float32], Tensor[(14, 2, 4), float32]) {
  %222 = cast(%var_2605, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %223 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 320), float32] */, dtype="float32") /* ty=Tensor[(1, 320), float32] */;
  %224 = cast(%var_2605, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %225 = reshape(%222, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
  %226 = reshape(%223, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
  %227 = reshape(%224, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
  %228 = @func_965(%225, %226, %227) /* ty=(Tensor[(8, 15, 10), int64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32], Tensor[(8, 15, 10), bool]) */;
  %229 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 2, 4), float64] */;
  %230 = atan(%229) /* ty=Tensor[(14, 2, 4), float64] */;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(14, 2, 4), float32] */;
  %232 = %228.1;
  %233 = acos(%231) /* ty=Tensor[(14, 2, 4), float32] */;
  (%232, %var_2605, meta[relay.Constant][10] /* ty=Tensor[(1, 320), float32] */, %233)
}

def @func_4168(%var_4160: Tensor[(1, 4, 7), float32]) -> Tensor[(1, 4, 7), float32] {
  %234 = cast(%var_4160, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  acosh(%234) /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_4547(%var_4539: Tensor[(4, 8, 5), uint64]) -> Tensor[(4, 8, 5), uint64] {
  %235 = cast(%var_4539, dtype="uint64") /* ty=Tensor[(4, 8, 5), uint64] */;
  %236 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(4, 8, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 8, 5), uint64] */, dtype="uint64") /* ty=Tensor[(4, 8, 5), uint64] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%237, %238) /* ty=Tensor[(4, 8, 5), uint64] */
}

def @func_6026(%var_6009: Tensor[(320), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(4, 10, 8), int8], Tensor[(320), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %239 = cast(%var_6009, dtype="float64") /* ty=Tensor[(320), float64] */;
  %240 = reshape(%239, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), float64] */;
  %241 = @func_5534(%240) /* ty=(Tensor[(4, 10, 8), int8],) */;
  %242 = @func_3097() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %243 = @func_5724() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %244 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
  %245 = %241.0;
  %246 = %242.0;
  %247 = %243.0;
  (%244, %245, %var_6009, %246, %247)
}

def @func_3519(%var_3499: float64, %var_3500: Tensor[(2, 16, 16), float64]) -> Tensor[(2, 16, 16), bool] {
  %248 = cast(%var_3499, dtype="bool") /* ty=bool */;
  %249 = cast(%var_3500, dtype="bool") /* ty=Tensor[(2, 16, 16), bool] */;
  greater(%248, %249) /* ty=Tensor[(2, 16, 16), bool] */
}

def @func_6802(%var_6792: Tensor[(15, 14, 13), uint16]) -> (Tensor[(15, 14, 13), bool], Tensor[(8, 15, 10), float64]) {
  %250 = cast(%var_6792, dtype="bool") /* ty=Tensor[(15, 14, 13), bool] */;
  %251 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(15, 14, 13), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 14, 13), uint16] */, dtype="bool") /* ty=Tensor[(15, 14, 13), bool] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %254 = @func_6365() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %255 = less(%252, %253) /* ty=Tensor[(15, 14, 13), bool] */;
  %256 = %254.2;
  (%255, %256)
}

def @func_1992() -> Tensor[(8, 15, 10), float64] {
  %257 = @func_215() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %257.1
}

def @func_5140() -> Tensor[(8, 15, 10), float64] {
  %258 = @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %258.0
}

def @func_4186() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %259 = @func_4126() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %260 = @func_3806() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %261 = %259.0;
  %262 = %260.0;
  (%261, %262)
}

def @func_6253() -> (Tensor[(8, 15, 10), float64],) {
  %263 = @func_4765() /* ty=Tensor[(8, 15, 10), float64] */;
  (%263,)
}

def @func_4435() -> Tensor[(8, 15, 10), float32] {
  %264 = @func_3787() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), float64], Tensor[(8, 15, 10), float64]) */;
  %264.0
}

def @func_5223() -> (Tensor[(1232), float64],) {
  %265 = @func_4909() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 14, 11), float64], Tensor[(1232), float64]) */;
  %266 = %265.2;
  (%266,)
}

def @func_5436() -> Tensor[(8, 15, 10), float64] {
  %267 = @func_3806() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %267.1
}

def @func_5534(%var_5521: Tensor[(4, 10, 8), float64]) -> (Tensor[(4, 10, 8), int8],) {
  %268 = cast(%var_5521, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
  %269 = sqrt(%268) /* ty=Tensor[(4, 10, 8), float64] */;
  %270 = cast(%var_5521, dtype="int8") /* ty=Tensor[(4, 10, 8), int8] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%269, dtype="int8") /* ty=Tensor[(4, 10, 8), int8] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %274 = minimum(%272, %273) /* ty=Tensor[(4, 10, 8), int8] */;
  (%274,)
}

def @func_3621(%var_3569: Tensor[(7, 12, 3), uint16], %var_3570: Tensor[(7, 12, 3), uint16], %var_3591: Tensor[(1200), float64]) -> (Tensor[(7, 12, 3), uint16], Tensor[(8, 15, 10), bool], Tensor[(1200), float64], Tensor[(7, 12, 3), float64], Tensor[(8, 15, 10), float32]) {
  %275 = cast(%var_3570, dtype="uint16") /* ty=Tensor[(7, 12, 3), uint16] */;
  %276 = shape_of(%var_3569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%var_3569, dtype="uint16") /* ty=Tensor[(7, 12, 3), uint16] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %279 = cast(%var_3591, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %280 = reshape(%279, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
  %281 = @func_1442(%280) /* ty=(Tensor[(8, 15, 10), bool],) */;
  %282 = cast(%var_3570, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
  %283 = log10(%282) /* ty=Tensor[(7, 12, 3), float32] */;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %285 = @func_3154() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(2, 264), float32], Tensor[(11, 16, 3), float64]) */;
  %286 = subtract(%277, %278) /* ty=Tensor[(7, 12, 3), uint16] */;
  %287 = %281.0;
  %288 = sinh(%284) /* ty=Tensor[(7, 12, 3), float64] */;
  %289 = %285.0;
  (%286, %287, %var_3591, %288, %289)
}

def @func_5645(%var_5636: Tensor[(9, 4, 8), int32], %var_5637: Tensor[(9, 4, 8), int32]) -> Tensor[(9, 4, 8), int32] {
  %290 = cast(%var_5637, dtype="int32") /* ty=Tensor[(9, 4, 8), int32] */;
  %291 = shape_of(%var_5636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_5636, dtype="int32") /* ty=Tensor[(9, 4, 8), int32] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  left_shift(%292, %293) /* ty=Tensor[(9, 4, 8), int32] */
}

def @func_8515() -> (Tensor[(8, 15, 10), float64],) {
  %294 = @func_5621() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %295 = %294.0;
  (%295,)
}

def @func_2919(%var_2914: Tensor[(80, 4), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(80, 4), float32]) {
  %296 = @func_2695() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %297 = @func_2695() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %298 = cast(%var_2914, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %299 = cast(%var_2914, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %300 = reshape(%298, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %301 = reshape(%299, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %302 = @func_533(%300, %301) /* ty=(Tensor[(16, 2, 10), bool], Tensor[(16, 2, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %303 = %296.0;
  %304 = %297.0;
  %305 = %302.0;
  (%303, %304, %305, %var_2914)
}

def @func_5274() -> Tensor[(8, 15, 10), float64] {
  %306 = @func_4186() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %306.0
}

def @func_5621() -> (Tensor[(8, 15, 10), float64],) {
  %307 = @func_3953() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %308 = %307.0;
  (%308,)
}

def @func_1653() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %309 = @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %310 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %311 = %309.0;
  %312 = %310.1;
  (%311, %312)
}

def @func_4810() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %313 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %314 = @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %315 = %313.3;
  %316 = %314.2;
  (%315, %316)
}

def @func_6693() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  %317 = @func_5621() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %318 = @func_5297() /* ty=Tensor[(8, 15, 10), float32] */;
  %319 = %317.0;
  (%318, %319)
}

def @func_1407() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) {
  %320 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %321 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 160), float32] */, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %322 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 160), float32] */, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %323 = reshape(%321, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %324 = reshape(%322, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %325 = @func_533(%323, %324) /* ty=(Tensor[(16, 2, 10), bool], Tensor[(16, 2, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %326 = %320.0;
  %327 = %325.2;
  (%326, %327, meta[relay.Constant][14] /* ty=Tensor[(2, 160), float32] */)
}

def @func_8463() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %328 = @func_2523() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %329 = @func_3347() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) */;
  %330 = %328.0;
  %331 = %329.2;
  (%330, %331)
}

def @func_4126() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %332 = @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %333 = %332.0;
  %334 = @func_1992() /* ty=Tensor[(8, 15, 10), float64] */;
  (%333, %334)
}

def @func_3048() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(15, 12), float64], Tensor[(180), float64], Tensor[(8, 15, 10), float64]) {
  %335 = @func_2695() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %336 = cast(meta[relay.Constant][15] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %337 = reshape(%336, newshape=[15, 12]) /* ty=Tensor[(15, 12), float64] */;
  %338 = @func_1719(%337) /* ty=(Tensor[(15, 12), float64], Tensor[(8, 15, 10), float64]) */;
  %339 = @func_2695() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %340 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
  %341 = %335.0;
  %342 = %338.0;
  %343 = %339.0;
  (%340, %341, %342, meta[relay.Constant][15] /* ty=Tensor[(180), float64] */, %343)
}

def @func_4093(%var_4054: Tensor[(1, 252), uint16], %var_4064: Tensor[(14, 252), uint16]) -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(14, 252), bool]) {
  %344 = cast(%var_4054, dtype="uint16") /* ty=Tensor[(1, 252), uint16] */;
  %345 = cast(%var_4054, dtype="uint16") /* ty=Tensor[(1, 252), uint16] */;
  %346 = @func_2802() /* ty=Tensor[(8, 15, 10), float32] */;
  %347 = cast(%346, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %348 = reshape(%344, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), uint16] */;
  %349 = reshape(%345, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), uint16] */;
  %350 = reshape(%347, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %351 = @func_3621(%348, %349, %350) /* ty=(Tensor[(7, 12, 3), uint16], Tensor[(8, 15, 10), bool], Tensor[(1200), float64], Tensor[(7, 12, 3), float64], Tensor[(8, 15, 10), float32]) */;
  %352 = cast(%var_4054, dtype="float64") /* ty=Tensor[(1, 252), float64] */;
  %353 = cast(%var_4064, dtype="float64") /* ty=Tensor[(14, 252), float64] */;
  %354 = floor_divide(%352, %353) /* ty=Tensor[(14, 252), float64] */;
  %355 = cast(%354, dtype="bool") /* ty=Tensor[(14, 252), bool] */;
  %356 = cast(%var_4054, dtype="bool") /* ty=Tensor[(1, 252), bool] */;
  %357 = %351.4;
  %358 = logical_or(%355, %356) /* ty=Tensor[(14, 252), bool] */;
  (%346, %357, %358)
}

def @func_3967() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %359 = @func_3466() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %360 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
  %361 = %359.0;
  (%360, %361)
}

def @func_8575(%var_8562: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(8, 15, 10), float32]) {
  %362 = cast(%var_8562, dtype="float32") /* ty=Tensor[(320), float32] */;
  %363 = reshape(%362, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %364 = @func_3251(%363) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) */;
  %365 = @func_5436() /* ty=Tensor[(8, 15, 10), float64] */;
  %366 = %364.0;
  %367 = @func_1265() /* ty=Tensor[(8, 15, 10), float32] */;
  (%365, %366, %var_8562, %367)
}

def @func_2882() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) {
  %368 = cast(meta[relay.Constant][16] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %369 = reshape(%368, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
  %370 = @func_1576(%369) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) */;
  %371 = @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %372 = @func_2582() /* ty=Tensor[(8, 15, 10), float64] */;
  %373 = %370.0;
  %374 = %371.0;
  (%372, %373, meta[relay.Constant][16] /* ty=Tensor[(320), float32] */, %374)
}

def @func_3787() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), float64], Tensor[(8, 15, 10), float64]) {
  %375 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %376 = @func_860() /* ty=Tensor[(8, 15, 10), float64] */;
  %377 = cast(%376, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %378 = @func_3154() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(2, 264), float32], Tensor[(11, 16, 3), float64]) */;
  %379 = %375.1;
  %380 = sin(%377) /* ty=Tensor[(8, 15, 10), float64] */;
  %381 = %378.2;
  %382 = @func_860() /* ty=Tensor[(8, 15, 10), float64] */;
  (%379, %380, %381, %382)
}

def @func_2761() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  %383 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(8, 15, 10), float32] */;
  %385 = tan(%384) /* ty=Tensor[(8, 15, 10), float32] */;
  %386 = @func_2582() /* ty=Tensor[(8, 15, 10), float64] */;
  (%385, %386)
}

def @func_2523() -> (Tensor[(8, 15, 10), float64],) {
  %387 = @func_1290() /* ty=Tensor[(8, 15, 10), float64] */;
  (%387,)
}

def @func_3251(%var_3249: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  %388 = cast(%var_3249, dtype="float32") /* ty=Tensor[(320), float32] */;
  %389 = reshape(%388, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %390 = @func_1698(%389) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */;
  %391 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  %392 = %390.0;
  (%391, %392, %var_3249)
}

def @func_1349() -> (Tensor[(8, 15, 10), float64],) {
  %393 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %394 = %393.0;
  (%394,)
}

def @func_398() -> (Tensor[(8, 15, 10), float64],) {
  %395 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %396 = %395.0;
  (%396,)
}

def @func_6241() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %397 = @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %398 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  %399 = cast(%398, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %400 = @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %401 = %397.0;
  %402 = sigmoid(%399) /* ty=Tensor[(8, 15, 10), float64] */;
  %403 = %400.0;
  (%401, %402, %403)
}

def @func_1698(%var_1673: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) {
  %404 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %405 = cast(%var_1673, dtype="float32") /* ty=Tensor[(320), float32] */;
  %406 = reshape(%405, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
  %407 = @func_1576(%406) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) */;
  %408 = @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %409 = %404.0;
  %410 = %407.3;
  %411 = %408.0;
  (%409, %410, %var_1673, %411)
}

def @func_3718() -> (Tensor[(8, 15, 10), float64],) {
  %412 = @func_788() /* ty=Tensor[(8, 15, 10), float64] */;
  (%412,)
}

def @func_3347() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) {
  %413 = @func_1653() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %414 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %415 = @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %416 = %415.0;
  %417 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(8, 15, 10), float32] */;
  %419 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%416, dtype="float32") /* ty=Tensor[(8, 15, 10), float32] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %422 = %413.1;
  %423 = %414.1;
  %424 = power(%420, %421) /* ty=Tensor[(8, 15, 10), float32] */;
  (%422, %423, %424)
}

def @func_1030() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %425 = @func_860() /* ty=Tensor[(8, 15, 10), float64] */;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %427 = reshape(%426, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
  %428 = @func_582(%427) /* ty=(Tensor[(8, 15, 10), float32],) */;
  %429 = %428.0;
  (%425, %429)
}

def @func_3953() -> (Tensor[(8, 15, 10), float64],) {
  %430 = @func_1619() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %431 = %430.0;
  (%431,)
}

def @func_7482(%var_7462: Tensor[(14, 5, 3), float32]) -> (Tensor[(14, 5, 3), float32], Tensor[(14, 2, 4), float32], Tensor[(1200), float64]) {
  %432 = cast(%var_7462, dtype="float32") /* ty=Tensor[(14, 5, 3), float32] */;
  %433 = cast(meta[relay.Constant][17] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %434 = reshape(%433, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %435 = @func_2637(%434) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(1200), float64], Tensor[(1, 320), float32], Tensor[(14, 2, 4), float32]) */;
  %436 = atan(%432) /* ty=Tensor[(14, 5, 3), float32] */;
  %437 = %435.3;
  (%436, %437, meta[relay.Constant][17] /* ty=Tensor[(1200), float64] */)
}

def @func_860() -> Tensor[(8, 15, 10), float64] {
  %438 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %438.0
}

def @func_4650() -> (Tensor[(8, 15, 10), float64],) {
  %439 = @func_2695() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %440 = %439.0;
  (%440,)
}

def @func_5724() -> (Tensor[(8, 15, 10), float64],) {
  %441 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  (%441,)
}

def @func_4521() -> Tensor[(2, 160), bool] {
  %442 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
  %443 = %442.2;
  %444 = cast(%443, dtype="float64") /* ty=Tensor[(2, 160), float64] */;
  %445 = atanh(%444) /* ty=Tensor[(2, 160), float64] */;
  %446 = cast(%443, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(2), int32] */;
  %448 = cast(%445, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %450 = greater_equal(%448, %449) /* ty=Tensor[(2, 160), bool] */;
  %451 = cast(%445, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(2), int32] */;
  %453 = cast(%450, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_and(%453, %454) /* ty=Tensor[(2, 160), bool] */
}

def @func_8623() -> Tensor[(8, 15, 10), float64] {
  %455 = @func_6241() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %455.2
}

def @func_1912() -> Tensor[(8, 15, 10), float64] {
  %456 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %456.0
}

def @func_5354(%var_5339: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), bool],) {
  %457 = @func_1349() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %458 = %457.0;
  %459 = cast(%var_5339, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %463 = logical_or(%461, %462) /* ty=Tensor[(8, 15, 10), bool] */;
  (%463,)
}

def @func_7765() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %464 = @func_5260() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %465 = @func_5043() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %466 = %464.0;
  %467 = %465.1;
  (%466, %467)
}

def @func_3918() -> (Tensor[(8, 15, 10), float32],) {
  %468 = @func_3347() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) */;
  %469 = %468.2;
  (%469,)
}

def @func_7115() -> Tensor[(8, 15, 10), float64] {
  @func_1773() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_5895() -> (Tensor[(8, 15, 10), float32],) {
  %470 = @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %471 = %470.4;
  (%471,)
}

def @func_4318() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %472 = @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %473 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %474 = %472.0;
  %475 = %473.0;
  (%474, %475)
}

def @func_6759() -> Tensor[(8, 15, 10), float32] {
  @func_2802() /* ty=Tensor[(8, 15, 10), float32] */
}

def @func_4765() -> Tensor[(8, 15, 10), float64] {
  %476 = @func_4126() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %476.0
}

def @func_128() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %477 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %478 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %479 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %480 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %481 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %482 = %477.0;
  %483 = %478.0;
  %484 = %479.0;
  %485 = %480.0;
  %486 = %481.0;
  (%482, %483, %484, %485, %486)
}

def @func_5594(%var_5568: Tensor[(252), uint16], %var_5569: Tensor[(3528), uint16], %var_5586: Tensor[(3528), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16], Tensor[(252), uint16], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(3528), bool]) {
  %487 = @func_4824() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %488 = cast(%var_5568, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %489 = cast(%var_5569, dtype="uint16") /* ty=Tensor[(3528), uint16] */;
  %490 = reshape(%488, newshape=[1, 252]) /* ty=Tensor[(1, 252), uint16] */;
  %491 = reshape(%489, newshape=[14, 252]) /* ty=Tensor[(14, 252), uint16] */;
  %492 = @func_4093(%490, %491) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(14, 252), bool]) */;
  %493 = cast(%var_5568, dtype="float64") /* ty=Tensor[(252), float64] */;
  %494 = reshape(%493, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %495 = @func_1319(%494) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16]) */;
  %496 = cast(%var_5568, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %497 = cast(%var_5569, dtype="uint16") /* ty=Tensor[(3528), uint16] */;
  %498 = reshape(%496, newshape=[1, 252]) /* ty=Tensor[(1, 252), uint16] */;
  %499 = reshape(%497, newshape=[14, 252]) /* ty=Tensor[(14, 252), uint16] */;
  %500 = @func_4093(%498, %499) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(14, 252), bool]) */;
  %501 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
  %502 = cast(%var_5569, dtype="float64") /* ty=Tensor[(3528), float64] */;
  %503 = acosh(%502) /* ty=Tensor[(3528), float64] */;
  %504 = cast(%var_5586, dtype="bool") /* ty=Tensor[(3528), bool] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(1), int32] */;
  %506 = cast(%503, dtype="bool") /* ty=Tensor[(3528), bool] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?), bool] */;
  %508 = %487.1;
  %509 = %492.0;
  %510 = %495.2;
  %511 = %500.0;
  %512 = %501.0;
  %513 = less(%506, %507) /* ty=Tensor[(3528), bool] */;
  (%508, %509, %var_5568, %510, %511, %512, %513)
}

def @func_7305() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) {
  %514 = @func_5043() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %515 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %516 = cast(meta[relay.Constant][18] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %517 = reshape(%516, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
  %518 = @func_1576(%517) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) */;
  %519 = @func_4650() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %520 = %514.1;
  %521 = %515.1;
  %522 = %518.3;
  %523 = %519.0;
  (%520, %521, %522, meta[relay.Constant][18] /* ty=Tensor[(320), float32] */, %523)
}

def @func_3806() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %524 = @func_3347() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) */;
  %525 = %524.2;
  %526 = @func_2582() /* ty=Tensor[(8, 15, 10), float64] */;
  %527 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  (%525, %526, %527)
}

def @func_4267() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %528 = @func_3787() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), float64], Tensor[(8, 15, 10), float64]) */;
  %529 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %530 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %531 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
  %532 = %528.1;
  %533 = @func_1290() /* ty=Tensor[(8, 15, 10), float64] */;
  %534 = %529.0;
  %535 = %530.1;
  (%531, %532, %533, %534, %535)
}

def @func_2501() -> (Tensor[(8, 15, 10), float64],) {
  %536 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %537 = %536.0;
  (%537,)
}

def @func_215() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %538 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %539 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %540 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %541 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %542 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %543 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %544 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %545 = %538.3;
  %546 = %539.0;
  %547 = %540.0;
  %548 = %541.0;
  %549 = %542.0;
  %550 = %543.1;
  %551 = %544.0;
  (%545, %546, %547, %548, %549, %550, %551)
}

def @func_1265() -> Tensor[(8, 15, 10), float32] {
  %552 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %552.1
}

def @func_1442(%var_1430: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), bool],) {
  %553 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  %554 = cast(%var_1430, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = not_equal(%556, %557) /* ty=Tensor[(8, 15, 10), bool] */;
  %559 = cast(%var_1430, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %563 = less(%561, %562) /* ty=Tensor[(8, 15, 10), bool] */;
  (%563,)
}

def @func_3466() -> (Tensor[(8, 15, 10), float64],) {
  %564 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %567 = log(%566) /* ty=Tensor[(8, 15, 10), float64] */;
  (%567,)
}

def @func_7993() -> (Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32], Tensor[(8, 15, 10), float64]) {
  %568 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
  %569 = @func_7765() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %570 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
  %571 = %568.2;
  %572 = %569.1;
  (%570, %571, %572)
}

def @func_4371(%var_4356: Tensor[(28), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) {
  %573 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %574 = %573.2;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %576 = cast(%var_4356, dtype="float32") /* ty=Tensor[(28), float32] */;
  %577 = reshape(%576, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %578 = @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %579 = atanh(%575) /* ty=Tensor[(8, 15, 10), float64] */;
  %580 = @func_4168(%577) /* ty=Tensor[(1, 4, 7), float32] */;
  %581 = %578.0;
  (%579, %580, %var_4356, %581)
}

def @func_1576(%var_1557: Tensor[(2, 160), float32]) -> (Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) {
  %582 = cast(meta[relay.Constant][19] /* ty=Tensor[(600, 2), float64] */, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %583 = reshape(%582, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
  %584 = @func_582(%583) /* ty=(Tensor[(8, 15, 10), float32],) */;
  %585 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %586 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
  %587 = %586.2;
  %588 = cast(%var_1557, dtype="int16") /* ty=Tensor[(2, 160), int16] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(2), int32] */;
  %590 = cast(%587, dtype="int16") /* ty=Tensor[(2, 160), int16] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %592 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
  %593 = %584.0;
  %594 = %585.0;
  %595 = add(%590, %591) /* ty=Tensor[(2, 160), int16] */;
  %596 = %592.2;
  (%593, meta[relay.Constant][19] /* ty=Tensor[(600, 2), float64] */, %594, %595, %596)
}

def @func_3097() -> (Tensor[(8, 15, 10), float64],) {
  %597 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  (%597,)
}

def @func_7415(%var_7407: Tensor[(252), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(7, 9, 4), float32], Tensor[(252), float64], Tensor[(8, 15, 10), float32]) {
  %598 = @func_4650() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %599 = cast(%var_7407, dtype="float64") /* ty=Tensor[(252), float64] */;
  %600 = reshape(%599, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), float64] */;
  %601 = @func_1185(%600) /* ty=(Tensor[(7, 9, 4), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %602 = %598.0;
  %603 = %601.0;
  %604 = @func_2802() /* ty=Tensor[(8, 15, 10), float32] */;
  (%602, %603, %var_7407, %604)
}

def @func_4824() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %605 = @func_1619() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %606 = @func_1290() /* ty=Tensor[(8, 15, 10), float64] */;
  %607 = %605.1;
  (%606, %607)
}

def @func_6608(%var_6574: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  %608 = @func_3466() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %609 = cast(%var_6574, dtype="float32") /* ty=Tensor[(320), float32] */;
  %610 = reshape(%609, newshape=[80, 4]) /* ty=Tensor[(80, 4), float32] */;
  %611 = @func_2919(%610) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(80, 4), float32]) */;
  %612 = @func_4435() /* ty=Tensor[(8, 15, 10), float32] */;
  %613 = %608.0;
  %614 = %611.1;
  (%612, %613, %614, %var_6574)
}

def @func_5260() -> (Tensor[(8, 15, 10), float64],) {
  %615 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %616 = %615.0;
  %617 = cast(%616, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %618 = asin(%617) /* ty=Tensor[(8, 15, 10), float64] */;
  (%618,)
}

def @func_1773() -> Tensor[(8, 15, 10), float64] {
  %619 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
  %619.0
}

def @func_6987() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  %620 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %621 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %622 = %620.0;
  %623 = @func_1265() /* ty=Tensor[(8, 15, 10), float32] */;
  %624 = %621.0;
  (%622, %623, %624)
}

def @func_6365() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %625 = @func_2523() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %626 = @func_4824() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %627 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %628 = %625.0;
  %629 = %626.1;
  %630 = %627.0;
  (%628, %629, %630)
}

def @func_496() -> (Tensor[(8, 15, 10), float64],) {
  %631 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %632 = %631.0;
  (%632,)
}

def @func_5516(%var_5502: Tensor[(11, 11, 16), float64], %var_5503: Tensor[(11, 11, 16), float64]) -> (Tensor[(11, 11, 16), float64],) {
  %633 = cast(%var_5503, dtype="float64") /* ty=Tensor[(11, 11, 16), float64] */;
  %634 = shape_of(%var_5502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_5502, dtype="float64") /* ty=Tensor[(11, 11, 16), float64] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %637 = multiply(%635, %636) /* ty=Tensor[(11, 11, 16), float64] */;
  (%637,)
}

def @func_8316(%var_8257: int64, %var_8258: Tensor[(4, 15, 1), int64]) -> (Tensor[(10, 8, 9), float64], Tensor[(720), float64], Tensor[(8, 15, 10), float64], Tensor[(80, 4), float64], Tensor[(8, 15, 10), float64], Tensor[(4, 15, ?), bool], Tensor[(4, 15, ?), uint8]) {
  %638 = cast(meta[relay.Constant][20] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %639 = reshape(%638, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
  %640 = @func_1197(%639) /* ty=(Tensor[(10, 8, 9), float64],) */;
  %641 = cast(meta[relay.Constant][21] /* ty=Tensor[(80, 4), float64] */, dtype="float64") /* ty=Tensor[(80, 4), float64] */;
  %642 = reshape(%641, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %643 = @func_6026(%642) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(4, 10, 8), int8], Tensor[(320), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %644 = @func_5260() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %645 = cast(%var_8257, dtype="int64") /* ty=int64 */;
  %646 = cast(%var_8258, dtype="int64") /* ty=Tensor[(4, 15, 1), int64] */;
  %647 = logical_xor(%645, %646) /* ty=Tensor[(4, 15, 1), int64] */;
  %648 = cast(%var_8257, dtype="bool") /* ty=bool */;
  %649 = cast(%var_8258, dtype="bool") /* ty=Tensor[(4, 15, 1), bool] */;
  %650 = logical_and(%648, %649) /* ty=Tensor[(4, 15, 1), bool] */;
  %651 = cast(%650, dtype="bool") /* ty=Tensor[(4, 15, 1), bool] */;
  %652 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%647, dtype="bool") /* ty=Tensor[(4, 15, 1), bool] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %655 = cast(%var_8257, dtype="float64") /* ty=float64 */;
  %656 = cast(%647, dtype="float64") /* ty=Tensor[(4, 15, 1), float64] */;
  %657 = mod(%655, %656) /* ty=Tensor[(4, 15, 1), float64] */;
  %658 = cast(%657, dtype="uint8") /* ty=Tensor[(4, 15, 1), uint8] */;
  %659 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%650, dtype="uint8") /* ty=Tensor[(4, 15, 1), uint8] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %662 = %640.0;
  %663 = %643.0;
  %664 = %644.0;
  %665 = greater_equal(%653, %654) /* ty=Tensor[(4, 15, ?), bool] */;
  %666 = bitwise_xor(%660, %661) /* ty=Tensor[(4, 15, ?), uint8] */;
  (%662, meta[relay.Constant][20] /* ty=Tensor[(720), float64] */, %663, meta[relay.Constant][21] /* ty=Tensor[(80, 4), float64] */, %664, %665, %666)
}

def @func_1319(%var_1307: Tensor[(252), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16]) {
  %667 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %668 = cast(meta[relay.Constant][22] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %669 = reshape(%668, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), float64] */;
  %670 = @func_1185(%669) /* ty=(Tensor[(7, 9, 4), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %671 = cast(%var_1307, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %672 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(252), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %673 = cast(meta[relay.Constant][22] /* ty=Tensor[(252), float64] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %675 = %667.3;
  %676 = %670.2;
  %677 = multiply(%673, %674) /* ty=Tensor[(252), uint16] */;
  (%675, %676, %677)
}

def @func_7086() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %678 = @func_5043() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %679 = @func_5274() /* ty=Tensor[(8, 15, 10), float64] */;
  %680 = %678.1;
  (%679, %680)
}

def @func_4909() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 14, 11), float64], Tensor[(1232), float64]) {
  %681 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %682 = cast(meta[relay.Constant][23] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %683 = reshape(%682, newshape=[8, 14, 11]) /* ty=Tensor[(8, 14, 11), float64] */;
  %684 = @func_3106(%683) /* ty=(Tensor[(8, 14, 11), float64],) */;
  %685 = %681.0;
  %686 = %684.0;
  (%685, %686, meta[relay.Constant][23] /* ty=Tensor[(1232), float64] */)
}

def @func_4618(%var_4582: Tensor[(15, 10, 11), float32], %var_4604: Tensor[(320), float32]) -> (Tensor[(15, 10, 11), float32], Tensor[(320), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(495), float32]) {
  %687 = cast(%var_4582, dtype="float32") /* ty=Tensor[(15, 10, 11), float32] */;
  %688 = cast(%var_4604, dtype="float32") /* ty=Tensor[(320), float32] */;
  %689 = reshape(%688, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %690 = @func_1698(%689) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */;
  %691 = cast(meta[relay.Constant][24] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %692 = cast(%var_4604, dtype="float32") /* ty=Tensor[(320), float32] */;
  %693 = reshape(%691, newshape=[3, 11, 15]) /* ty=Tensor[(3, 11, 15), float32] */;
  %694 = reshape(%692, newshape=[80, 4]) /* ty=Tensor[(80, 4), float32] */;
  %695 = @func_2070(%693, %694) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(3, 11, 15), float32], Tensor[(80, 4), float32], Tensor[(8, 15, 10), float32]) */;
  %696 = sigmoid(%687) /* ty=Tensor[(15, 10, 11), float32] */;
  %697 = %690.2;
  %698 = %695.0;
  (%696, %697, %var_4604, %698, meta[relay.Constant][24] /* ty=Tensor[(495), float32] */)
}

def @func_5790(%var_5776: Tensor[(5, 3, 4), uint64]) -> Tensor[(5, 3, 4), uint64] {
  %699 = cast(%var_5776, dtype="uint64") /* ty=Tensor[(5, 3, 4), uint64] */;
  %700 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(5, 3, 4), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 3, 4), uint64] */, dtype="uint64") /* ty=Tensor[(5, 3, 4), uint64] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%701, %702) /* ty=Tensor[(5, 3, 4), uint64] */
}

def @func_1197(%var_1194: Tensor[(10, 8, 9), float64]) -> (Tensor[(10, 8, 9), float64],) {
  %703 = cast(%var_1194, dtype="float64") /* ty=Tensor[(10, 8, 9), float64] */;
  %704 = acos(%703) /* ty=Tensor[(10, 8, 9), float64] */;
  (%704,)
}

def @func_4874(%var_4857: Tensor[(3528), uint16]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(3, 84), uint16], Tensor[(3528), uint16], Tensor[(8, 15, 10), float64], Tensor[(14, 2), float32]) {
  %705 = @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %706 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 84), uint16] */, dtype="uint16") /* ty=Tensor[(3, 84), uint16] */;
  %707 = cast(%var_4857, dtype="uint16") /* ty=Tensor[(3528), uint16] */;
  %708 = reshape(%706, newshape=[1, 252]) /* ty=Tensor[(1, 252), uint16] */;
  %709 = reshape(%707, newshape=[14, 252]) /* ty=Tensor[(14, 252), uint16] */;
  %710 = @func_4093(%708, %709) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(14, 252), bool]) */;
  %711 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 2), float32] */;
  %712 = reshape(%711, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %713 = @func_4371(%712) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) */;
  %714 = %705.0;
  %715 = %710.0;
  %716 = %713.3;
  (%714, %715, meta[relay.Constant][26] /* ty=Tensor[(3, 84), uint16] */, %var_4857, %716, meta[relay.Constant][27] /* ty=Tensor[(14, 2), float32] */)
}

def @func_324(%var_310: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), int16], Tensor[(8, 15, 10), float64]) {
  %717 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %718 = %717.3;
  %719 = cast(%var_310, dtype="int16") /* ty=Tensor[(8, 15, 10), int16] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%718, dtype="int16") /* ty=Tensor[(8, 15, 10), int16] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %723 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %724 = bitwise_and(%721, %722) /* ty=Tensor[(8, 15, 10), int16] */;
  %725 = %723.4;
  (%724, %725)
}

def @func_2962() -> (Tensor[(8, 15, 10), float64],) {
  %726 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %727 = %726.0;
  (%727,)
}

def @func_3398() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %728 = @func_2523() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %729 = @func_3048() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(15, 12), float64], Tensor[(180), float64], Tensor[(8, 15, 10), float64]) */;
  %730 = @func_1349() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %731 = %728.0;
  %732 = %729.0;
  %733 = %730.0;
  (%731, %732, %733)
}

def @main(%var_8634: Tensor[(9, 7, 13), float64]) -> (Tensor[(9, 7, 13), float64],) {
  %734 = cast(%var_8634, dtype="float64") /* ty=Tensor[(9, 7, 13), float64] */;
  %735 = log2(%734) /* ty=Tensor[(9, 7, 13), float64] */;
  (%735,)
}

def @func_788() -> Tensor[(8, 15, 10), float64] {
  %736 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %736.3
}

def @func_819() -> Tensor[(8, 15, 10), float64] {
  %737 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %737.0
}

def @func_4476() -> Tensor[(8, 15, 10), float64] {
  %738 = @func_1349() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %738.0
}

def @func_91() -> (Tensor[(8, 15, 10), float64],) {
  %739 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %740 = log10(%739) /* ty=Tensor[(8, 15, 10), float64] */;
  (%740,)
}

def @func_5004() -> (Tensor[(8, 15, 10), float64],) {
  %741 = @func_4476() /* ty=Tensor[(8, 15, 10), float64] */;
  (%741,)
}

def @func_7598(%var_7585: Tensor[(8, 5, 8), uint64], %var_7586: Tensor[(8, 5, 8), uint64]) -> Tensor[(8, 5, 8), bool] {
  %742 = cast(%var_7586, dtype="bool") /* ty=Tensor[(8, 5, 8), bool] */;
  %743 = shape_of(%var_7585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%var_7585, dtype="bool") /* ty=Tensor[(8, 5, 8), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%744, %745) /* ty=Tensor[(8, 5, 8), bool] */
}

def @func_7944() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %746 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %747 = %746.0;
  %748 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  %749 = @func_4476() /* ty=Tensor[(8, 15, 10), float64] */;
  (%747, %748, %749)
}

def @func_2114(%var_2098: Tensor[(252), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(252), uint16], Tensor[(252), float64]) {
  %750 = cast(%var_2098, dtype="float64") /* ty=Tensor[(252), float64] */;
  %751 = reshape(%750, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %752 = @func_1319(%751) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16]) */;
  %753 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  %754 = %752.2;
  (%753, %754, %var_2098)
}

def @func_533(%var_506: Tensor[(16, 2, 10), float32], %var_515: Tensor[(16, 2, 10), float32]) -> (Tensor[(16, 2, 10), bool], Tensor[(16, 2, 10), float32], Tensor[(8, 15, 10), float64]) {
  %755 = cast(%var_515, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
  %756 = shape_of(%var_506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%var_506, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %759 = cast(%var_506, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %760 = log10(%759) /* ty=Tensor[(16, 2, 10), float32] */;
  %761 = cast(%760, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %762 = @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %763 = logical_and(%757, %758) /* ty=Tensor[(16, 2, 10), bool] */;
  %764 = asin(%761) /* ty=Tensor[(16, 2, 10), float32] */;
  %765 = %762.0;
  (%763, %764, %765)
}

def @func_2654(%var_2648: bool, %var_2649: Tensor[(5, 12, 4), bool]) -> (Tensor[(5, 12, 4), bool],) {
  %766 = cast(%var_2648, dtype="bool") /* ty=bool */;
  %767 = cast(%var_2649, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
  %768 = logical_or(%766, %767) /* ty=Tensor[(5, 12, 4), bool] */;
  (%768,)
}

def @func_1220() -> Tensor[(8, 15, 10), float64] {
  @func_788() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_727(%var_716: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), int8], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %769 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %770 = %769.0;
  %771 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 15, 10), float64] */, dtype="int8") /* ty=Tensor[(8, 15, 10), int8] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="int8") /* ty=Tensor[(8, 15, 10), int8] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %775 = add(%773, %774) /* ty=Tensor[(8, 15, 10), int8] */;
  %776 = cast(%775, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %777 = reshape(%776, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
  %778 = @func_582(%777) /* ty=(Tensor[(8, 15, 10), float32],) */;
  %779 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %780 = %779.0;
  %781 = cast(%770, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%780, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %785 = cast(%var_716, dtype="float32") /* ty=Tensor[(320), float32] */;
  %786 = cast(%var_716, dtype="float32") /* ty=Tensor[(320), float32] */;
  %787 = reshape(%785, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %788 = reshape(%786, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %789 = @func_533(%787, %788) /* ty=(Tensor[(16, 2, 10), bool], Tensor[(16, 2, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %790 = cast(%780, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %791 = @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %792 = %778.0;
  %793 = mod(%783, %784) /* ty=Tensor[(8, 15, 10), float64] */;
  %794 = %789.0;
  %795 = asinh(%790) /* ty=Tensor[(8, 15, 10), float64] */;
  %796 = %791.0;
  (%775, %792, %793, %794, %var_716, %795, %796)
}

def @func_6884(%var_6880: Tensor[(13, 13, 6), float64]) -> (Tensor[(13, 13, 6), int64], Tensor[(8, 15, 10), float64], Tensor[(13, 13, 6), float64]) {
  %797 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 6), float32] */;
  %798 = cosh(%797) /* ty=Tensor[(13, 13, 6), float32] */;
  %799 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 13, 6), float32] */, dtype="uint8") /* ty=Tensor[(13, 13, 6), uint8] */;
  %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%798, dtype="uint8") /* ty=Tensor[(13, 13, 6), uint8] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %803 = bitwise_or(%801, %802) /* ty=Tensor[(13, 13, 6), uint8] */;
  %804 = cast(%798, dtype="int64") /* ty=Tensor[(13, 13, 6), int64] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="int64") /* ty=Tensor[(13, 13, 6), int64] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %808 = @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %809 = cast(%798, dtype="uint32") /* ty=Tensor[(13, 13, 6), uint32] */;
  %810 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(13, 13, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 13, 6), float32] */, dtype="uint32") /* ty=Tensor[(13, 13, 6), uint32] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %813 = subtract(%811, %812) /* ty=Tensor[(13, 13, 6), uint32] */;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(13, 13, 6), float64] */;
  %815 = sin(%814) /* ty=Tensor[(13, 13, 6), float64] */;
  %816 = cast(%var_6880, dtype="float64") /* ty=Tensor[(13, 13, 6), float64] */;
  %817 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%815, dtype="float64") /* ty=Tensor[(13, 13, 6), float64] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %820 = bitwise_xor(%806, %807) /* ty=Tensor[(13, 13, 6), int64] */;
  %821 = %808.0;
  %822 = floor_mod(%818, %819) /* ty=Tensor[(13, 13, 6), float64] */;
  (%820, %821, %822)
}

def @func_2695() -> (Tensor[(8, 15, 10), float64],) {
  %823 = @func_2582() /* ty=Tensor[(8, 15, 10), float64] */;
  (%823,)
}

def @func_5287() -> (Tensor[(1232), float64],) {
  %824 = @func_5223() /* ty=(Tensor[(1232), float64],) */;
  %825 = %824.0;
  (%825,)
}

def @func_2582() -> Tensor[(8, 15, 10), float64] {
  %826 = @func_1349() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %826.0
}

def @func_5972() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(9, 2, 3), bool], Tensor[(54), int64]) {
  %827 = @func_4126() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %828 = @func_3953() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %829 = @func_3048() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(15, 12), float64], Tensor[(180), float64], Tensor[(8, 15, 10), float64]) */;
  %830 = cast(meta[relay.Constant][31] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %831 = reshape(%830, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), int64] */;
  %832 = @func_5452(%831) /* ty=(Tensor[(9, 2, 3), bool], Tensor[(8, 15, 10), float64]) */;
  %833 = %827.1;
  %834 = %828.0;
  %835 = %829.0;
  %836 = %832.0;
  (%833, %834, %835, %836, meta[relay.Constant][31] /* ty=Tensor[(54), int64] */)
}

def @func_6522(%var_6500: Tensor[(3, 10, 2), uint32]) -> (Tensor[(3, 10, 2), uint32], Tensor[(8, 15, 10), float64]) {
  %837 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 10, 2), uint32] */, dtype="uint32") /* ty=Tensor[(1, 10, 2), uint32] */;
  %838 = cast(%var_6500, dtype="uint32") /* ty=Tensor[(3, 10, 2), uint32] */;
  %839 = @func_4824() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %840 = minimum(%837, %838) /* ty=Tensor[(3, 10, 2), uint32] */;
  %841 = %839.0;
  (%840, %841)
}

def @func_7263() -> Tensor[(1232), float64] {
  %842 = @func_5287() /* ty=(Tensor[(1232), float64],) */;
  %842.0
}

def @func_4158() -> (Tensor[(8, 15, 10), float64],) {
  %843 = @func_3806() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %844 = %843.1;
  (%844,)
}

def @func_3486() -> Tensor[(8, 15, 10), float64] {
  @func_788() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_7907(%var_7861: uint32, %var_7862: Tensor[(900), uint32]) -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(10, 15, 6), uint32], uint32, Tensor[(900), uint32], Tensor[(13, 13, 6), float64], Tensor[(1, 1014), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(320), float64]) {
  %845 = @func_3953() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %846 = cast(%var_7861, dtype="uint32") /* ty=uint32 */;
  %847 = cast(%var_7862, dtype="uint32") /* ty=Tensor[(900), uint32] */;
  %848 = reshape(%846, newshape=[]) /* ty=uint32 */;
  %849 = reshape(%847, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint32] */;
  %850 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 1014), float64] */, dtype="float64") /* ty=Tensor[(1, 1014), float64] */;
  %851 = reshape(%850, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), float64] */;
  %852 = @func_6884(%851) /* ty=(Tensor[(13, 13, 6), int64], Tensor[(8, 15, 10), float64], Tensor[(13, 13, 6), float64]) */;
  %853 = @func_7841() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %854 = @func_3347() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) */;
  %855 = cast(meta[relay.Constant][34] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %856 = reshape(%855, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %857 = @func_1698(%856) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */;
  %858 = cast(meta[relay.Constant][34] /* ty=Tensor[(320), float32] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %859 = @func_4435() /* ty=Tensor[(8, 15, 10), float32] */;
  %860 = %845.0;
  %861 = @func_7453(%848, %849) /* ty=Tensor[(10, 15, 6), uint32] */;
  %862 = %852.2;
  %863 = %853.0;
  %864 = %854.1;
  %865 = %857.0;
  %866 = sigmoid(%858) /* ty=Tensor[(320), float64] */;
  (%859, %860, %861, %var_7861, %var_7862, %862, meta[relay.Constant][33] /* ty=Tensor[(1, 1014), float64] */, %863, %864, %865, %866)
}

def @func_8197(%var_8189: Tensor[(3, 5, 3), float64]) -> (Tensor[(3, 5, 3), int8],) {
  %867 = cast(%var_8189, dtype="float64") /* ty=Tensor[(3, 5, 3), float64] */;
  %868 = asin(%867) /* ty=Tensor[(3, 5, 3), float64] */;
  %869 = cast(%var_8189, dtype="int8") /* ty=Tensor[(3, 5, 3), int8] */;
  %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%868, dtype="int8") /* ty=Tensor[(3, 5, 3), int8] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %873 = add(%871, %872) /* ty=Tensor[(3, 5, 3), int8] */;
  (%873,)
}

def @func_1290() -> Tensor[(8, 15, 10), float64] {
  %874 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %874.0
}

def @func_4428() -> (Tensor[(8, 15, 10), float32],) {
  %875 = @func_4186() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %876 = %875.1;
  (%876,)
}

def @func_5452(%var_5440: Tensor[(9, 2, 3), int64]) -> (Tensor[(9, 2, 3), bool], Tensor[(8, 15, 10), float64]) {
  %877 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 2, 3), int64] */, dtype="bool") /* ty=Tensor[(9, 2, 3), bool] */;
  %878 = shape_of(%var_5440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%var_5440, dtype="bool") /* ty=Tensor[(9, 2, 3), bool] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %881 = @func_4318() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %882 = less_equal(%879, %880) /* ty=Tensor[(9, 2, 3), bool] */;
  %883 = %881.0;
  (%882, %883)
}

def @func_6289(%var_6269: Tensor[(1, 16, 13), int8], %var_6270: Tensor[(12, 16, 13), int8]) -> (Tensor[(12, 16, 13), bool], Tensor[(12, 16, 13), float32]) {
  %884 = cast(%var_6269, dtype="bool") /* ty=Tensor[(1, 16, 13), bool] */;
  %885 = cast(%var_6270, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %886 = cast(%var_6270, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %887 = less(%884, %885) /* ty=Tensor[(12, 16, 13), bool] */;
  %888 = atan(%886) /* ty=Tensor[(12, 16, 13), float32] */;
  (%887, %888)
}

def @func_3671(%var_3638: Tensor[(11, 1, 16), bool], %var_3639: Tensor[(11, 15, 16), bool], %var_3661: Tensor[(11, 15, 16), bool], %var_3669: Tensor[(320), float32]) -> (Tensor[(11, 15, 16), bool], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  %889 = cast(%var_3638, dtype="bool") /* ty=Tensor[(11, 1, 16), bool] */;
  %890 = cast(%var_3639, dtype="bool") /* ty=Tensor[(11, 15, 16), bool] */;
  %891 = logical_and(%889, %890) /* ty=Tensor[(11, 15, 16), bool] */;
  %892 = cast(%var_3661, dtype="bool") /* ty=Tensor[(11, 15, 16), bool] */;
  %893 = shape_of(%891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%891, dtype="bool") /* ty=Tensor[(11, 15, 16), bool] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %896 = cast(%var_3669, dtype="float32") /* ty=Tensor[(320), float32] */;
  %897 = reshape(%896, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
  %898 = @func_1576(%897) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) */;
  %899 = equal(%894, %895) /* ty=Tensor[(11, 15, 16), bool] */;
  %900 = %898.2;
  (%899, %900, %var_3669)
}

def @func_6208() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %901 = @func_4186() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %902 = @func_215() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %903 = @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %904 = @func_3953() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %905 = %901.0;
  %906 = %902.2;
  %907 = @func_4435() /* ty=Tensor[(8, 15, 10), float32] */;
  %908 = %903.0;
  %909 = %904.0;
  (%905, %906, %907, %908, %909)
}

def @func_2802() -> Tensor[(8, 15, 10), float32] {
  @func_1265() /* ty=Tensor[(8, 15, 10), float32] */
}

def @func_4757(%var_4687: Tensor[(320), float32]) -> (Tensor[(15, 8, 15), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(10, 165), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %910 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 8, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 8, 15), float32] */;
  %911 = rsqrt(%910) /* ty=Tensor[(15, 8, 15), float32] */;
  %912 = cast(%911, dtype="float64") /* ty=Tensor[(15, 8, 15), float64] */;
  %913 = @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %914 = @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %915 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 165), float32] */, dtype="float32") /* ty=Tensor[(10, 165), float32] */;
  %916 = cast(%var_4687, dtype="float32") /* ty=Tensor[(320), float32] */;
  %917 = reshape(%915, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float32] */;
  %918 = reshape(%916, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %919 = @func_4618(%917, %918) /* ty=(Tensor[(15, 10, 11), float32], Tensor[(320), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(495), float32]) */;
  %920 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %921 = @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %922 = @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %923 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %924 = cosh(%912) /* ty=Tensor[(15, 8, 15), float64] */;
  %925 = %913.0;
  %926 = %914.0;
  %927 = %919.1;
  %928 = %920.2;
  %929 = %921.0;
  %930 = %922.0;
  %931 = %923.0;
  (%924, %925, %926, %927, meta[relay.Constant][37] /* ty=Tensor[(10, 165), float32] */, %var_4687, %928, %929, %930, %931)
}

def @func_8414(%var_8408: Tensor[(10, 3, 1), float64]) -> Tensor[(10, 3, 1), float64] {
  %932 = cast(%var_8408, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  tan(%932) /* ty=Tensor[(10, 3, 1), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8625() -> Tensor[(8, 15, 10), float64] {
  @func_8623() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_7484(%var_7483: Tensor[(14, 5, 3), float32]) -> (Tensor[(14, 5, 3), float32], Tensor[(14, 2, 4), float32], Tensor[(1200), float64]) {
  %6 = fn (%var_7462: Tensor[(14, 5, 3), float32]) -> (Tensor[(14, 5, 3), float32], Tensor[(14, 2, 4), float32], Tensor[(1200), float64]) {
    %0 = cast(%var_7462, dtype="float32") /* ty=Tensor[(14, 5, 3), float32] */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %2 = reshape(%1, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
    %3 = @func_2637(%2) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(1200), float64], Tensor[(1, 320), float32], Tensor[(14, 2, 4), float32]) */;
    %4 = atan(%0) /* ty=Tensor[(14, 5, 3), float32] */;
    %5 = %3.3;
    (%4, %5, meta[relay.Constant][0] /* ty=Tensor[(1200), float64] */)
  };
  %6(%var_7483) /* ty=(Tensor[(14, 5, 3), float32], Tensor[(14, 2, 4), float32], Tensor[(1200), float64]) */
}

def @func_1994() -> Tensor[(8, 15, 10), float64] {
  @func_1992() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_2070(%var_2023: Tensor[(3, 11, 15), float32], %var_2043: Tensor[(80, 4), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(3, 11, 15), float32], Tensor[(80, 4), float32], Tensor[(8, 15, 10), float32]) {
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(80, 4), float32] */, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %8 = reshape(%7, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %9 = @func_727(%8) /* ty=(Tensor[(8, 15, 10), int8], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %10 = cast(%var_2023, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %11 = sqrt(%10) /* ty=Tensor[(3, 11, 15), float32] */;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %13 = sin(%12) /* ty=Tensor[(3, 11, 15), float32] */;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %15 = cast(%var_2043, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %16 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(80, 4), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(80, 4), float32] */, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %19 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %20 = %9.2;
  %21 = log(%14) /* ty=Tensor[(3, 11, 15), float32] */;
  %22 = power(%17, %18) /* ty=Tensor[(80, 4), float32] */;
  %23 = %19.1;
  (%20, %21, %22, %23)
}

def @func_1992() -> Tensor[(8, 15, 10), float64] {
  %24 = @func_215() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %24.1
}

def @func_4187() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %29 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
    %25 = @func_4126() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %26 = @func_3806() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %27 = %25.0;
    %28 = %26.0;
    (%27, %28)
  };
  %29() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */
}

def @func_3466() -> (Tensor[(8, 15, 10), float64],) {
  %30 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %33 = log(%32) /* ty=Tensor[(8, 15, 10), float64] */;
  (%33,)
}

def @func_1265() -> Tensor[(8, 15, 10), float32] {
  %34 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %34.1
}

def @func_3488() -> Tensor[(8, 15, 10), float64] {
  @func_3486() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_5649(%var_5647: Tensor[(9, 4, 8), int32], %var_5648: Tensor[(9, 4, 8), int32]) -> Tensor[(9, 4, 8), int32] {
  @func_5645(%var_5647, %var_5648) /* ty=Tensor[(9, 4, 8), int32] */
}

def @func_6029(%var_6027: Tensor[(320), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(4, 10, 8), int8], Tensor[(320), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_6026(%var_6027) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(4, 10, 8), int8], Tensor[(320), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_8578(%var_8576: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(8, 15, 10), float32]) {
  @func_8575(%var_8576) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(8, 15, 10), float32]) */
}

def @func_1774() -> Tensor[(8, 15, 10), float64] {
  %36 = fn () -> Tensor[(8, 15, 10), float64] {
    %35 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
    %35.0
  };
  %36() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_5973() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(9, 2, 3), bool], Tensor[(54), int64]) {
  %47 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(9, 2, 3), bool], Tensor[(54), int64]) {
    %37 = @func_4126() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %38 = @func_3953() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %39 = @func_3048() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(15, 12), float64], Tensor[(180), float64], Tensor[(8, 15, 10), float64]) */;
    %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
    %41 = reshape(%40, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), int64] */;
    %42 = @func_5452(%41) /* ty=(Tensor[(9, 2, 3), bool], Tensor[(8, 15, 10), float64]) */;
    %43 = %37.1;
    %44 = %38.0;
    %45 = %39.0;
    %46 = %42.0;
    (%43, %44, %45, %46, meta[relay.Constant][2] /* ty=Tensor[(54), int64] */)
  };
  %47() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(9, 2, 3), bool], Tensor[(54), int64]) */
}

def @func_5289() -> (Tensor[(1232), float64],) {
  @func_5287() /* ty=(Tensor[(1232), float64],) */
}

def @func_6608(%var_6574: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  %48 = @func_3466() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %49 = cast(%var_6574, dtype="float32") /* ty=Tensor[(320), float32] */;
  %50 = reshape(%49, newshape=[80, 4]) /* ty=Tensor[(80, 4), float32] */;
  %51 = @func_2919(%50) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(80, 4), float32]) */;
  %52 = @func_4435() /* ty=Tensor[(8, 15, 10), float32] */;
  %53 = %48.0;
  %54 = %51.1;
  (%52, %53, %54, %var_6574)
}

def @func_6761() -> Tensor[(8, 15, 10), float32] {
  @func_6759() /* ty=Tensor[(8, 15, 10), float32] */
}

def @func_5896() -> (Tensor[(8, 15, 10), float32],) {
  %57 = fn () -> (Tensor[(8, 15, 10), float32],) {
    %55 = @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
    %56 = %55.4;
    (%56,)
  };
  %57() /* ty=(Tensor[(8, 15, 10), float32],) */
}

def @func_2583() -> Tensor[(8, 15, 10), float64] {
  %59 = fn () -> Tensor[(8, 15, 10), float64] {
    %58 = @func_1349() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %58.0
  };
  %59() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_4267() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %60 = @func_3787() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), float64], Tensor[(8, 15, 10), float64]) */;
  %61 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %62 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %63 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
  %64 = %60.1;
  %65 = @func_1290() /* ty=Tensor[(8, 15, 10), float64] */;
  %66 = %61.0;
  %67 = %62.1;
  (%63, %64, %65, %66, %67)
}

def @func_1914() -> Tensor[(8, 15, 10), float64] {
  @func_1912() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_860() -> Tensor[(8, 15, 10), float64] {
  %68 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %68.0
}

def @func_1350() -> (Tensor[(8, 15, 10), float64],) {
  %71 = fn () -> (Tensor[(8, 15, 10), float64],) {
    %69 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %70 = %69.0;
    (%70,)
  };
  %71() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_6292(%var_6290: Tensor[(1, 16, 13), int8], %var_6291: Tensor[(12, 16, 13), int8]) -> (Tensor[(12, 16, 13), bool], Tensor[(12, 16, 13), float32]) {
  %77 = fn (%var_6269: Tensor[(1, 16, 13), int8], %var_6270: Tensor[(12, 16, 13), int8]) -> (Tensor[(12, 16, 13), bool], Tensor[(12, 16, 13), float32]) {
    %72 = cast(%var_6269, dtype="bool") /* ty=Tensor[(1, 16, 13), bool] */;
    %73 = cast(%var_6270, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
    %74 = cast(%var_6270, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
    %75 = less(%72, %73) /* ty=Tensor[(12, 16, 13), bool] */;
    %76 = atan(%74) /* ty=Tensor[(12, 16, 13), float32] */;
    (%75, %76)
  };
  %77(%var_6290, %var_6291) /* ty=(Tensor[(12, 16, 13), bool], Tensor[(12, 16, 13), float32]) */
}

def @func_965(%var_928: Tensor[(8, 15, 10), float64], %var_957: Tensor[(2, 160), float32], %var_959: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), int64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32], Tensor[(8, 15, 10), bool]) {
  %78 = @func_860() /* ty=Tensor[(8, 15, 10), float64] */;
  %79 = cast(%var_928, dtype="int64") /* ty=Tensor[(8, 15, 10), int64] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="int64") /* ty=Tensor[(8, 15, 10), int64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %83 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %84 = cast(%var_957, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %85 = reshape(%84, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %86 = @func_727(%85) /* ty=(Tensor[(8, 15, 10), int8], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %87 = cast(%var_959, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %88 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%78, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %91 = right_shift(%81, %82) /* ty=Tensor[(8, 15, 10), int64] */;
  %92 = %83.0;
  %93 = %86.2;
  %94 = greater_equal(%89, %90) /* ty=Tensor[(8, 15, 10), bool] */;
  (%91, %92, %93, %var_957, %94)
}

def @func_6987() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  %95 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %96 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %97 = %95.0;
  %98 = @func_1265() /* ty=Tensor[(8, 15, 10), float32] */;
  %99 = %96.0;
  (%97, %98, %99)
}

def @func_2654(%var_2648: bool, %var_2649: Tensor[(5, 12, 4), bool]) -> (Tensor[(5, 12, 4), bool],) {
  %100 = cast(%var_2648, dtype="bool") /* ty=bool */;
  %101 = cast(%var_2649, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
  %102 = logical_or(%100, %101) /* ty=Tensor[(5, 12, 4), bool] */;
  (%102,)
}

def @func_2503() -> (Tensor[(8, 15, 10), float64],) {
  @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_3806() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %103 = @func_3347() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) */;
  %104 = %103.2;
  %105 = @func_2582() /* ty=Tensor[(8, 15, 10), float64] */;
  %106 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  (%104, %105, %106)
}

def @func_2696() -> (Tensor[(8, 15, 10), float64],) {
  %108 = fn () -> (Tensor[(8, 15, 10), float64],) {
    %107 = @func_2582() /* ty=Tensor[(8, 15, 10), float64] */;
    (%107,)
  };
  %108() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_8163() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(3528), bool], Tensor[(252), uint16], Tensor[(3528), uint16], Tensor[(28, 1), float32]) {
  @func_8161() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(3528), bool], Tensor[(252), uint16], Tensor[(3528), uint16], Tensor[(28, 1), float32]) */
}

def @func_4436() -> Tensor[(8, 15, 10), float32] {
  %110 = fn () -> Tensor[(8, 15, 10), float32] {
    %109 = @func_3787() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), float64], Tensor[(8, 15, 10), float64]) */;
    %109.0
  };
  %110() /* ty=Tensor[(8, 15, 10), float32] */
}

def @func_8081() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %124 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %111 = @func_7765() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %112 = @func_2523() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %113 = @func_6241() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %114 = cast(meta[relay.Constant][3] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %115 = reshape(%114, newshape=[80, 4]) /* ty=Tensor[(80, 4), float32] */;
    %116 = @func_2919(%115) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(80, 4), float32]) */;
    %117 = @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %118 = %111.1;
    %119 = %112.0;
    %120 = %113.0;
    %121 = %116.1;
    %122 = %117.0;
    %123 = @func_1290() /* ty=Tensor[(8, 15, 10), float64] */;
    (%118, %119, %120, %121, meta[relay.Constant][3] /* ty=Tensor[(320), float32] */, %122, %123)
  };
  %124() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_2962() -> (Tensor[(8, 15, 10), float64],) {
  %125 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %126 = %125.0;
  (%126,)
}

def @func_6210() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_6208() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_3486() -> Tensor[(8, 15, 10), float64] {
  @func_788() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_4269() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */
}

def @func_2523() -> (Tensor[(8, 15, 10), float64],) {
  %127 = @func_1290() /* ty=Tensor[(8, 15, 10), float64] */;
  (%127,)
}

def @func_4909() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 14, 11), float64], Tensor[(1232), float64]) {
  %128 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %129 = cast(meta[relay.Constant][4] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %130 = reshape(%129, newshape=[8, 14, 11]) /* ty=Tensor[(8, 14, 11), float64] */;
  %131 = @func_3106(%130) /* ty=(Tensor[(8, 14, 11), float64],) */;
  %132 = %128.0;
  %133 = %131.0;
  (%132, %133, meta[relay.Constant][4] /* ty=Tensor[(1232), float64] */)
}

def @func_5454(%var_5453: Tensor[(9, 2, 3), int64]) -> (Tensor[(9, 2, 3), bool], Tensor[(8, 15, 10), float64]) {
  %141 = fn (%var_5440: Tensor[(9, 2, 3), int64]) -> (Tensor[(9, 2, 3), bool], Tensor[(8, 15, 10), float64]) {
    %134 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 2, 3), int64] */, dtype="bool") /* ty=Tensor[(9, 2, 3), bool] */;
    %135 = shape_of(%var_5440, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%var_5440, dtype="bool") /* ty=Tensor[(9, 2, 3), bool] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %138 = @func_4318() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %139 = less_equal(%136, %137) /* ty=Tensor[(9, 2, 3), bool] */;
    %140 = %138.0;
    (%139, %140)
  };
  %141(%var_5453) /* ty=(Tensor[(9, 2, 3), bool], Tensor[(8, 15, 10), float64]) */
}

def @func_1722(%var_1720: Tensor[(15, 12), float64]) -> (Tensor[(15, 12), float64], Tensor[(8, 15, 10), float64]) {
  @func_1719(%var_1720) /* ty=(Tensor[(15, 12), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_5724() -> (Tensor[(8, 15, 10), float64],) {
  %142 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  (%142,)
}

def @func_6811() -> (Tensor[(8, 15, 10), float64],) {
  %143 = @func_6241() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %144 = %143.2;
  (%144,)
}

def @func_5299() -> Tensor[(8, 15, 10), float32] {
  @func_5297() /* ty=Tensor[(8, 15, 10), float32] */
}

def @func_7946() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_7944() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_7457(%var_7455: uint32, %var_7456: Tensor[(10, 15, 6), uint32]) -> Tensor[(10, 15, 6), uint32] {
  @func_7453(%var_7455, %var_7456) /* ty=Tensor[(10, 15, 6), uint32] */
}

def @func_3097() -> (Tensor[(8, 15, 10), float64],) {
  %145 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  (%145,)
}

def @func_3254(%var_3252: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  @func_3251(%var_3252) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) */
}

def @func_3347() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) {
  %146 = @func_1653() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %147 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %148 = @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %149 = %148.0;
  %150 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(8, 15, 10), float32] */;
  %152 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%149, dtype="float32") /* ty=Tensor[(8, 15, 10), float32] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %155 = %146.1;
  %156 = %147.1;
  %157 = power(%153, %154) /* ty=Tensor[(8, 15, 10), float32] */;
  (%155, %156, %157)
}

def @func_5043() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  %158 = @func_2761() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %159 = @func_4650() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %160 = %158.0;
  %161 = %159.0;
  (%160, %161)
}

def @func_5297() -> Tensor[(8, 15, 10), float32] {
  %162 = @func_2882() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */;
  %162.1
}

def @func_4096(%var_4094: Tensor[(1, 252), uint16], %var_4095: Tensor[(14, 252), uint16]) -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(14, 252), bool]) {
  %178 = fn (%var_4054: Tensor[(1, 252), uint16], %var_4064: Tensor[(14, 252), uint16]) -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(14, 252), bool]) {
    %163 = cast(%var_4054, dtype="uint16") /* ty=Tensor[(1, 252), uint16] */;
    %164 = cast(%var_4054, dtype="uint16") /* ty=Tensor[(1, 252), uint16] */;
    %165 = @func_2802() /* ty=Tensor[(8, 15, 10), float32] */;
    %166 = cast(%165, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %167 = reshape(%163, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), uint16] */;
    %168 = reshape(%164, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), uint16] */;
    %169 = reshape(%166, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
    %170 = @func_3621(%167, %168, %169) /* ty=(Tensor[(7, 12, 3), uint16], Tensor[(8, 15, 10), bool], Tensor[(1200), float64], Tensor[(7, 12, 3), float64], Tensor[(8, 15, 10), float32]) */;
    %171 = cast(%var_4054, dtype="float64") /* ty=Tensor[(1, 252), float64] */;
    %172 = cast(%var_4064, dtype="float64") /* ty=Tensor[(14, 252), float64] */;
    %173 = floor_divide(%171, %172) /* ty=Tensor[(14, 252), float64] */;
    %174 = cast(%173, dtype="bool") /* ty=Tensor[(14, 252), bool] */;
    %175 = cast(%var_4054, dtype="bool") /* ty=Tensor[(1, 252), bool] */;
    %176 = %170.4;
    %177 = logical_or(%174, %175) /* ty=Tensor[(14, 252), bool] */;
    (%165, %176, %177)
  };
  %178(%var_4094, %var_4095) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(14, 252), bool]) */
}

def @func_1319(%var_1307: Tensor[(252), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16]) {
  %179 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %180 = cast(meta[relay.Constant][6] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %181 = reshape(%180, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), float64] */;
  %182 = @func_1185(%181) /* ty=(Tensor[(7, 9, 4), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %183 = cast(%var_1307, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %184 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(252), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %185 = cast(meta[relay.Constant][6] /* ty=Tensor[(252), float64] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %187 = %179.3;
  %188 = %182.2;
  %189 = multiply(%185, %186) /* ty=Tensor[(252), uint16] */;
  (%187, %188, %189)
}

def @func_4652() -> (Tensor[(8, 15, 10), float64],) {
  @func_4650() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_582(%var_560: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), float32],) {
  %190 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %191 = %190.0;
  %192 = cast(%var_560, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %196 = logical_and(%194, %195) /* ty=Tensor[(8, 15, 10), bool] */;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(8, 15, 10), float32] */;
  %198 = rsqrt(%197) /* ty=Tensor[(8, 15, 10), float32] */;
  (%198,)
}

def @func_6886(%var_6885: Tensor[(13, 13, 6), float64]) -> (Tensor[(13, 13, 6), int64], Tensor[(8, 15, 10), float64], Tensor[(13, 13, 6), float64]) {
  %225 = fn (%var_6880: Tensor[(13, 13, 6), float64]) -> (Tensor[(13, 13, 6), int64], Tensor[(8, 15, 10), float64], Tensor[(13, 13, 6), float64]) {
    %199 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 6), float32] */;
    %200 = cosh(%199) /* ty=Tensor[(13, 13, 6), float32] */;
    %201 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 13, 6), float32] */, dtype="uint8") /* ty=Tensor[(13, 13, 6), uint8] */;
    %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%200, dtype="uint8") /* ty=Tensor[(13, 13, 6), uint8] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %205 = bitwise_or(%203, %204) /* ty=Tensor[(13, 13, 6), uint8] */;
    %206 = cast(%200, dtype="int64") /* ty=Tensor[(13, 13, 6), int64] */;
    %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
    %208 = cast(%205, dtype="int64") /* ty=Tensor[(13, 13, 6), int64] */;
    %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %210 = @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %211 = cast(%200, dtype="uint32") /* ty=Tensor[(13, 13, 6), uint32] */;
    %212 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(13, 13, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %213 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 13, 6), float32] */, dtype="uint32") /* ty=Tensor[(13, 13, 6), uint32] */;
    %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %215 = subtract(%213, %214) /* ty=Tensor[(13, 13, 6), uint32] */;
    %216 = cast(%215, dtype="float64") /* ty=Tensor[(13, 13, 6), float64] */;
    %217 = sin(%216) /* ty=Tensor[(13, 13, 6), float64] */;
    %218 = cast(%var_6880, dtype="float64") /* ty=Tensor[(13, 13, 6), float64] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%217, dtype="float64") /* ty=Tensor[(13, 13, 6), float64] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %222 = bitwise_xor(%208, %209) /* ty=Tensor[(13, 13, 6), int64] */;
    %223 = %210.0;
    %224 = floor_mod(%220, %221) /* ty=Tensor[(13, 13, 6), float64] */;
    (%222, %223, %224)
  };
  %225(%var_6885) /* ty=(Tensor[(13, 13, 6), int64], Tensor[(8, 15, 10), float64], Tensor[(13, 13, 6), float64]) */
}

def @func_7843() -> (Tensor[(8, 15, 10), float64],) {
  @func_7841() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_5536(%var_5535: Tensor[(4, 10, 8), float64]) -> (Tensor[(4, 10, 8), int8],) {
  %233 = fn (%var_5521: Tensor[(4, 10, 8), float64]) -> (Tensor[(4, 10, 8), int8],) {
    %226 = cast(%var_5521, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
    %227 = sqrt(%226) /* ty=Tensor[(4, 10, 8), float64] */;
    %228 = cast(%var_5521, dtype="int8") /* ty=Tensor[(4, 10, 8), int8] */;
    %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
    %230 = cast(%227, dtype="int8") /* ty=Tensor[(4, 10, 8), int8] */;
    %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %232 = minimum(%230, %231) /* ty=Tensor[(4, 10, 8), int8] */;
    (%232,)
  };
  %233(%var_5535) /* ty=(Tensor[(4, 10, 8), int8],) */
}

def @func_7602(%var_7600: Tensor[(8, 5, 8), uint64], %var_7601: Tensor[(8, 5, 8), uint64]) -> Tensor[(8, 5, 8), bool] {
  @func_7598(%var_7600, %var_7601) /* ty=Tensor[(8, 5, 8), bool] */
}

def @func_4159() -> (Tensor[(8, 15, 10), float64],) {
  %236 = fn () -> (Tensor[(8, 15, 10), float64],) {
    %234 = @func_3806() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %235 = %234.1;
    (%235,)
  };
  %236() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_5357(%var_5355: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), bool],) {
  @func_5354(%var_5355) /* ty=(Tensor[(8, 15, 10), bool],) */
}

def @func_7376() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %237 = @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %238 = @func_1349() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %239 = @func_3486() /* ty=Tensor[(8, 15, 10), float64] */;
  %240 = %237.0;
  %241 = %238.0;
  (%239, %240, %241)
}

def @func_1719(%var_1712: Tensor[(15, 12), float64]) -> (Tensor[(15, 12), float64], Tensor[(8, 15, 10), float64]) {
  %242 = cast(%var_1712, dtype="float64") /* ty=Tensor[(15, 12), float64] */;
  %243 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %244 = exp(%242) /* ty=Tensor[(15, 12), float64] */;
  %245 = %243.0;
  (%244, %245)
}

def @func_8417(%var_8415: Tensor[(10, 3, 1), float64]) -> Tensor[(10, 3, 1), float64] {
  @func_8414(%var_8415) /* ty=Tensor[(10, 3, 1), float64] */
}

def @func_2451(%var_2449: Tensor[(11, 16, 3), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), uint16], Tensor[(11, 16, 3), uint16]) {
  @func_2448(%var_2449) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), uint16], Tensor[(11, 16, 3), uint16]) */
}

def @func_1030() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %246 = @func_860() /* ty=Tensor[(8, 15, 10), float64] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %248 = reshape(%247, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
  %249 = @func_582(%248) /* ty=(Tensor[(8, 15, 10), float32],) */;
  %250 = %249.0;
  (%246, %250)
}

def @func_6524(%var_6523: Tensor[(3, 10, 2), uint32]) -> (Tensor[(3, 10, 2), uint32], Tensor[(8, 15, 10), float64]) {
  %256 = fn (%var_6500: Tensor[(3, 10, 2), uint32]) -> (Tensor[(3, 10, 2), uint32], Tensor[(8, 15, 10), float64]) {
    %251 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 10, 2), uint32] */, dtype="uint32") /* ty=Tensor[(1, 10, 2), uint32] */;
    %252 = cast(%var_6500, dtype="uint32") /* ty=Tensor[(3, 10, 2), uint32] */;
    %253 = @func_4824() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %254 = minimum(%251, %252) /* ty=Tensor[(3, 10, 2), uint32] */;
    %255 = %253.0;
    (%254, %255)
  };
  %256(%var_6523) /* ty=(Tensor[(3, 10, 2), uint32], Tensor[(8, 15, 10), float64]) */
}

def @func_4621(%var_4619: Tensor[(15, 10, 11), float32], %var_4620: Tensor[(320), float32]) -> (Tensor[(15, 10, 11), float32], Tensor[(320), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(495), float32]) {
  %269 = fn (%var_4582: Tensor[(15, 10, 11), float32], %var_4604: Tensor[(320), float32]) -> (Tensor[(15, 10, 11), float32], Tensor[(320), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(495), float32]) {
    %257 = cast(%var_4582, dtype="float32") /* ty=Tensor[(15, 10, 11), float32] */;
    %258 = cast(%var_4604, dtype="float32") /* ty=Tensor[(320), float32] */;
    %259 = reshape(%258, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %260 = @func_1698(%259) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */;
    %261 = cast(meta[relay.Constant][9] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %262 = cast(%var_4604, dtype="float32") /* ty=Tensor[(320), float32] */;
    %263 = reshape(%261, newshape=[3, 11, 15]) /* ty=Tensor[(3, 11, 15), float32] */;
    %264 = reshape(%262, newshape=[80, 4]) /* ty=Tensor[(80, 4), float32] */;
    %265 = @func_2070(%263, %264) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(3, 11, 15), float32], Tensor[(80, 4), float32], Tensor[(8, 15, 10), float32]) */;
    %266 = sigmoid(%257) /* ty=Tensor[(15, 10, 11), float32] */;
    %267 = %260.2;
    %268 = %265.0;
    (%266, %267, %var_4604, %268, meta[relay.Constant][9] /* ty=Tensor[(495), float32] */)
  };
  %269(%var_4619, %var_4620) /* ty=(Tensor[(15, 10, 11), float32], Tensor[(320), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(495), float32]) */
}

def @func_970(%var_967: Tensor[(8, 15, 10), float64], %var_968: Tensor[(2, 160), float32], %var_969: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), int64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32], Tensor[(8, 15, 10), bool]) {
  @func_965(%var_967, %var_968, %var_969) /* ty=(Tensor[(8, 15, 10), int64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32], Tensor[(8, 15, 10), bool]) */
}

def @func_6989() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  @func_6987() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_1267() -> Tensor[(8, 15, 10), float32] {
  @func_1265() /* ty=Tensor[(8, 15, 10), float32] */
}

def @func_7453(%var_7448: uint32, %var_7449: Tensor[(10, 15, 6), uint32]) -> Tensor[(10, 15, 6), uint32] {
  %270 = cast(%var_7448, dtype="uint32") /* ty=uint32 */;
  %271 = cast(%var_7449, dtype="uint32") /* ty=Tensor[(10, 15, 6), uint32] */;
  logical_xor(%270, %271) /* ty=Tensor[(10, 15, 6), uint32] */
}

def @func_5598(%var_5595: Tensor[(252), uint16], %var_5596: Tensor[(3528), uint16], %var_5597: Tensor[(3528), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16], Tensor[(252), uint16], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(3528), bool]) {
  %299 = fn (%var_5568: Tensor[(252), uint16], %var_5569: Tensor[(3528), uint16], %var_5586: Tensor[(3528), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16], Tensor[(252), uint16], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(3528), bool]) {
    %272 = @func_4824() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %273 = cast(%var_5568, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %274 = cast(%var_5569, dtype="uint16") /* ty=Tensor[(3528), uint16] */;
    %275 = reshape(%273, newshape=[1, 252]) /* ty=Tensor[(1, 252), uint16] */;
    %276 = reshape(%274, newshape=[14, 252]) /* ty=Tensor[(14, 252), uint16] */;
    %277 = @func_4093(%275, %276) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(14, 252), bool]) */;
    %278 = cast(%var_5568, dtype="float64") /* ty=Tensor[(252), float64] */;
    %279 = reshape(%278, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %280 = @func_1319(%279) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16]) */;
    %281 = cast(%var_5568, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %282 = cast(%var_5569, dtype="uint16") /* ty=Tensor[(3528), uint16] */;
    %283 = reshape(%281, newshape=[1, 252]) /* ty=Tensor[(1, 252), uint16] */;
    %284 = reshape(%282, newshape=[14, 252]) /* ty=Tensor[(14, 252), uint16] */;
    %285 = @func_4093(%283, %284) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(14, 252), bool]) */;
    %286 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
    %287 = cast(%var_5569, dtype="float64") /* ty=Tensor[(3528), float64] */;
    %288 = acosh(%287) /* ty=Tensor[(3528), float64] */;
    %289 = cast(%var_5586, dtype="bool") /* ty=Tensor[(3528), bool] */;
    %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(1), int32] */;
    %291 = cast(%288, dtype="bool") /* ty=Tensor[(3528), bool] */;
    %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?), bool] */;
    %293 = %272.1;
    %294 = %277.0;
    %295 = %280.2;
    %296 = %285.0;
    %297 = %286.0;
    %298 = less(%291, %292) /* ty=Tensor[(3528), bool] */;
    (%293, %294, %var_5568, %295, %296, %297, %298)
  };
  %299(%var_5595, %var_5596, %var_5597) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16], Tensor[(252), uint16], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(3528), bool]) */
}

def @func_4522() -> Tensor[(2, 160), bool] {
  %313 = fn () -> Tensor[(2, 160), bool] {
    %300 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
    %301 = %300.2;
    %302 = cast(%301, dtype="float64") /* ty=Tensor[(2, 160), float64] */;
    %303 = atanh(%302) /* ty=Tensor[(2, 160), float64] */;
    %304 = cast(%301, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
    %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(2), int32] */;
    %306 = cast(%303, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
    %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %308 = greater_equal(%306, %307) /* ty=Tensor[(2, 160), bool] */;
    %309 = cast(%303, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
    %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(2), int32] */;
    %311 = cast(%308, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
    %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    logical_and(%311, %312) /* ty=Tensor[(2, 160), bool] */
  };
  %313() /* ty=Tensor[(2, 160), bool] */
}

def @func_1442(%var_1430: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), bool],) {
  %314 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  %315 = cast(%var_1430, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = not_equal(%317, %318) /* ty=Tensor[(8, 15, 10), bool] */;
  %320 = cast(%var_1430, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%319, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %324 = less(%322, %323) /* ty=Tensor[(8, 15, 10), bool] */;
  (%324,)
}

def @func_2658(%var_2656: bool, %var_2657: Tensor[(5, 12, 4), bool]) -> (Tensor[(5, 12, 4), bool],) {
  @func_2654(%var_2656, %var_2657) /* ty=(Tensor[(5, 12, 4), bool],) */
}

def @func_1655() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  @func_1653() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */
}

def @func_2525() -> (Tensor[(8, 15, 10), float64],) {
  @func_2523() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_4812() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_4810() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_1700(%var_1699: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) {
  %333 = fn (%var_1673: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) {
    %325 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
    %326 = cast(%var_1673, dtype="float32") /* ty=Tensor[(320), float32] */;
    %327 = reshape(%326, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
    %328 = @func_1576(%327) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) */;
    %329 = @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %330 = %325.0;
    %331 = %328.3;
    %332 = %329.0;
    (%330, %331, %var_1673, %332)
  };
  %333(%var_1699) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_5793(%var_5791: Tensor[(5, 3, 4), uint64]) -> Tensor[(5, 3, 4), uint64] {
  @func_5790(%var_5791) /* ty=Tensor[(5, 3, 4), uint64] */
}

def @func_6802(%var_6792: Tensor[(15, 14, 13), uint16]) -> (Tensor[(15, 14, 13), bool], Tensor[(8, 15, 10), float64]) {
  %334 = cast(%var_6792, dtype="bool") /* ty=Tensor[(15, 14, 13), bool] */;
  %335 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(15, 14, 13), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 14, 13), uint16] */, dtype="bool") /* ty=Tensor[(15, 14, 13), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = @func_6365() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %339 = less(%336, %337) /* ty=Tensor[(15, 14, 13), bool] */;
  %340 = %338.2;
  (%339, %340)
}

def @func_6365() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %341 = @func_2523() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %342 = @func_4824() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %343 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %344 = %341.0;
  %345 = %342.1;
  %346 = %343.0;
  (%344, %345, %346)
}

def @func_6646() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_6644() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_862() -> Tensor[(8, 15, 10), float64] {
  @func_860() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_1032() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */
}

def @func_3968() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %350 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %347 = @func_3466() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %348 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
    %349 = %347.0;
    (%348, %349)
  };
  %350() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_1445(%var_1443: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), bool],) {
  @func_1442(%var_1443) /* ty=(Tensor[(8, 15, 10), bool],) */
}

def @func_1579(%var_1577: Tensor[(2, 160), float32]) -> (Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) {
  @func_1576(%var_1577) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) */
}

def @func_2921(%var_2920: Tensor[(80, 4), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(80, 4), float32]) {
  %361 = fn (%var_2914: Tensor[(80, 4), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(80, 4), float32]) {
    %351 = @func_2695() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %352 = @func_2695() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %353 = cast(%var_2914, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
    %354 = cast(%var_2914, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
    %355 = reshape(%353, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %356 = reshape(%354, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %357 = @func_533(%355, %356) /* ty=(Tensor[(16, 2, 10), bool], Tensor[(16, 2, 10), float32], Tensor[(8, 15, 10), float64]) */;
    %358 = %351.0;
    %359 = %352.0;
    %360 = %357.0;
    (%358, %359, %360, %var_2914)
  };
  %361(%var_2920) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(80, 4), float32]) */
}

def @func_7672() -> (Tensor[(8, 15, 10), float64], Tensor[(1232), int32], Tensor[(8, 15, 10), float64]) {
  %362 = @func_4909() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 14, 11), float64], Tensor[(1232), float64]) */;
  %363 = %362.2;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %365 = cosh(%364) /* ty=Tensor[(1232), float32] */;
  %366 = cast(%363, dtype="uint8") /* ty=Tensor[(1232), uint8] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(1), int32] */;
  %368 = cast(%365, dtype="uint8") /* ty=Tensor[(1232), uint8] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %370 = logical_xor(%368, %369) /* ty=Tensor[(1232), uint8] */;
  %371 = cast(%370, dtype="int32") /* ty=Tensor[(1232), int32] */;
  %372 = shape_of(%365, dtype="int32") /* ty=Tensor[(1), int32] */;
  %373 = cast(%365, dtype="int32") /* ty=Tensor[(1232), int32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?), int32] */;
  %375 = @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %376 = @func_5436() /* ty=Tensor[(8, 15, 10), float64] */;
  %377 = bitwise_xor(%373, %374) /* ty=Tensor[(1232), int32] */;
  %378 = %375.0;
  (%376, %377, %378)
}

def @func_8516() -> (Tensor[(8, 15, 10), float64],) {
  %381 = fn () -> (Tensor[(8, 15, 10), float64],) {
    %379 = @func_5621() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %380 = %379.0;
    (%380,)
  };
  %381() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_3108(%var_3107: Tensor[(8, 14, 11), float64]) -> (Tensor[(8, 14, 11), float64],) {
  %384 = fn (%var_3103: Tensor[(8, 14, 11), float64]) -> (Tensor[(8, 14, 11), float64],) {
    %382 = cast(%var_3103, dtype="float64") /* ty=Tensor[(8, 14, 11), float64] */;
    %383 = acosh(%382) /* ty=Tensor[(8, 14, 11), float64] */;
    (%383,)
  };
  %384(%var_3107) /* ty=(Tensor[(8, 14, 11), float64],) */
}

def @func_5005() -> (Tensor[(8, 15, 10), float64],) {
  %386 = fn () -> (Tensor[(8, 15, 10), float64],) {
    %385 = @func_4476() /* ty=Tensor[(8, 15, 10), float64] */;
    (%385,)
  };
  %386() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_7264() -> Tensor[(1232), float64] {
  %388 = fn () -> Tensor[(1232), float64] {
    %387 = @func_5287() /* ty=(Tensor[(1232), float64],) */;
    %387.0
  };
  %388() /* ty=Tensor[(1232), float64] */
}

def @func_3099() -> (Tensor[(8, 15, 10), float64],) {
  @func_3097() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_4810() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %389 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %390 = @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %391 = %389.3;
  %392 = %390.2;
  (%391, %392)
}

def @func_2761() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  %393 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(8, 15, 10), float32] */;
  %395 = tan(%394) /* ty=Tensor[(8, 15, 10), float32] */;
  %396 = @func_2582() /* ty=Tensor[(8, 15, 10), float64] */;
  (%395, %396)
}

def @func_216() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %411 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %397 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %398 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %399 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %400 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %401 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %402 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %403 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %404 = %397.3;
    %405 = %398.0;
    %406 = %399.0;
    %407 = %400.0;
    %408 = %401.0;
    %409 = %402.1;
    %410 = %403.0;
    (%404, %405, %406, %407, %408, %409, %410)
  };
  %411() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_5696() -> (Tensor[(8, 15, 10), float32], Tensor[(3, 84), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %412 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 84), float64] */, dtype="float64") /* ty=Tensor[(3, 84), float64] */;
  %413 = reshape(%412, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), float64] */;
  %414 = @func_1185(%413) /* ty=(Tensor[(7, 9, 4), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %415 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
  %417 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %418 = %414.2;
  %419 = log2(%416) /* ty=Tensor[(8, 15, 10), float64] */;
  %420 = %417.1;
  (%418, meta[relay.Constant][11] /* ty=Tensor[(3, 84), float64] */, %419, %420)
}

def @func_7087() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %424 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %421 = @func_5043() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
    %422 = @func_5274() /* ty=Tensor[(8, 15, 10), float64] */;
    %423 = %421.1;
    (%422, %423)
  };
  %424() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_3954() -> (Tensor[(8, 15, 10), float64],) {
  %427 = fn () -> (Tensor[(8, 15, 10), float64],) {
    %425 = @func_1619() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %426 = %425.0;
    (%426,)
  };
  %427() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_5261() -> (Tensor[(8, 15, 10), float64],) {
  %432 = fn () -> (Tensor[(8, 15, 10), float64],) {
    %428 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
    %429 = %428.0;
    %430 = cast(%429, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %431 = asin(%430) /* ty=Tensor[(8, 15, 10), float64] */;
    (%431,)
  };
  %432() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_7417(%var_7416: Tensor[(252), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(7, 9, 4), float32], Tensor[(252), float64], Tensor[(8, 15, 10), float32]) {
  %440 = fn (%var_7407: Tensor[(252), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(7, 9, 4), float32], Tensor[(252), float64], Tensor[(8, 15, 10), float32]) {
    %433 = @func_4650() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %434 = cast(%var_7407, dtype="float64") /* ty=Tensor[(252), float64] */;
    %435 = reshape(%434, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), float64] */;
    %436 = @func_1185(%435) /* ty=(Tensor[(7, 9, 4), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
    %437 = %433.0;
    %438 = %436.0;
    %439 = @func_2802() /* ty=Tensor[(8, 15, 10), float32] */;
    (%437, %438, %var_7407, %439)
  };
  %440(%var_7416) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(7, 9, 4), float32], Tensor[(252), float64], Tensor[(8, 15, 10), float32]) */
}

def @func_1221() -> Tensor[(8, 15, 10), float64] {
  %441 = fn () -> Tensor[(8, 15, 10), float64] {
    @func_788() /* ty=Tensor[(8, 15, 10), float64] */
  };
  %441() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_400() -> (Tensor[(8, 15, 10), float64],) {
  @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_2448(%var_2394: Tensor[(11, 16, 3), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), uint16], Tensor[(11, 16, 3), uint16]) {
  %442 = cast(%var_2394, dtype="float32") /* ty=Tensor[(11, 16, 3), float32] */;
  %443 = acosh(%442) /* ty=Tensor[(11, 16, 3), float32] */;
  %444 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 16, 3), float32] */, dtype="bool") /* ty=Tensor[(11, 16, 3), bool] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="bool") /* ty=Tensor[(11, 16, 3), bool] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %448 = logical_or(%446, %447) /* ty=Tensor[(11, 16, 3), bool] */;
  %449 = cast(%448, dtype="uint64") /* ty=Tensor[(11, 16, 3), uint64] */;
  %450 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%443, dtype="uint64") /* ty=Tensor[(11, 16, 3), uint64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %453 = bitwise_or(%451, %452) /* ty=Tensor[(11, 16, 3), uint64] */;
  %454 = cast(%443, dtype="uint16") /* ty=Tensor[(11, 16, 3), uint16] */;
  %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%453, dtype="uint16") /* ty=Tensor[(11, 16, 3), uint16] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %458 = cast(%448, dtype="bool") /* ty=Tensor[(11, 16, 3), bool] */;
  %459 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%443, dtype="bool") /* ty=Tensor[(11, 16, 3), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = less(%460, %461) /* ty=Tensor[(11, 16, 3), bool] */;
  %463 = cast(%443, dtype="uint16") /* ty=Tensor[(11, 16, 3), uint16] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="uint16") /* ty=Tensor[(11, 16, 3), uint16] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %467 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  %468 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  %469 = right_shift(%456, %457) /* ty=Tensor[(11, 16, 3), uint16] */;
  %470 = subtract(%465, %466) /* ty=Tensor[(11, 16, 3), uint16] */;
  (%467, %468, %469, %470)
}

def @func_4428() -> (Tensor[(8, 15, 10), float32],) {
  %471 = @func_4186() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %472 = %471.1;
  (%472,)
}

def @func_3625(%var_3622: Tensor[(7, 12, 3), uint16], %var_3623: Tensor[(7, 12, 3), uint16], %var_3624: Tensor[(1200), float64]) -> (Tensor[(7, 12, 3), uint16], Tensor[(8, 15, 10), bool], Tensor[(1200), float64], Tensor[(7, 12, 3), float64], Tensor[(8, 15, 10), float32]) {
  %488 = fn (%var_3569: Tensor[(7, 12, 3), uint16], %var_3570: Tensor[(7, 12, 3), uint16], %var_3591: Tensor[(1200), float64]) -> (Tensor[(7, 12, 3), uint16], Tensor[(8, 15, 10), bool], Tensor[(1200), float64], Tensor[(7, 12, 3), float64], Tensor[(8, 15, 10), float32]) {
    %473 = cast(%var_3570, dtype="uint16") /* ty=Tensor[(7, 12, 3), uint16] */;
    %474 = shape_of(%var_3569, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%var_3569, dtype="uint16") /* ty=Tensor[(7, 12, 3), uint16] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %477 = cast(%var_3591, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %478 = reshape(%477, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
    %479 = @func_1442(%478) /* ty=(Tensor[(8, 15, 10), bool],) */;
    %480 = cast(%var_3570, dtype="float32") /* ty=Tensor[(7, 12, 3), float32] */;
    %481 = log10(%480) /* ty=Tensor[(7, 12, 3), float32] */;
    %482 = cast(%481, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
    %483 = @func_3154() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(2, 264), float32], Tensor[(11, 16, 3), float64]) */;
    %484 = subtract(%475, %476) /* ty=Tensor[(7, 12, 3), uint16] */;
    %485 = %479.0;
    %486 = sinh(%482) /* ty=Tensor[(7, 12, 3), float64] */;
    %487 = %483.0;
    (%484, %485, %var_3591, %486, %487)
  };
  %488(%var_3622, %var_3623, %var_3624) /* ty=(Tensor[(7, 12, 3), uint16], Tensor[(8, 15, 10), bool], Tensor[(1200), float64], Tensor[(7, 12, 3), float64], Tensor[(8, 15, 10), float32]) */
}

def @func_3919() -> (Tensor[(8, 15, 10), float32],) {
  %491 = fn () -> (Tensor[(8, 15, 10), float32],) {
    %489 = @func_3347() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) */;
    %490 = %489.2;
    (%490,)
  };
  %491() /* ty=(Tensor[(8, 15, 10), float32],) */
}

def @func_6208() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %492 = @func_4186() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %493 = @func_215() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %494 = @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %495 = @func_3953() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %496 = %492.0;
  %497 = %493.2;
  %498 = @func_4435() /* ty=Tensor[(8, 15, 10), float32] */;
  %499 = %494.0;
  %500 = %495.0;
  (%496, %497, %498, %499, %500)
}

def @func_5140() -> Tensor[(8, 15, 10), float64] {
  %501 = @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %501.0
}

def @func_3349() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) {
  @func_3347() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) */
}

def @func_5224() -> (Tensor[(1232), float64],) {
  %504 = fn () -> (Tensor[(1232), float64],) {
    %502 = @func_4909() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 14, 11), float64], Tensor[(1232), float64]) */;
    %503 = %502.2;
    (%503,)
  };
  %504() /* ty=(Tensor[(1232), float64],) */
}

def @func_3720() -> (Tensor[(8, 15, 10), float64],) {
  @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_3251(%var_3249: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  %505 = cast(%var_3249, dtype="float32") /* ty=Tensor[(320), float32] */;
  %506 = reshape(%505, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %507 = @func_1698(%506) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */;
  %508 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
  %509 = %507.0;
  (%508, %509, %var_3249)
}

def @func_6805(%var_6803: Tensor[(15, 14, 13), uint16]) -> (Tensor[(15, 14, 13), bool], Tensor[(8, 15, 10), float64]) {
  @func_6802(%var_6803) /* ty=(Tensor[(15, 14, 13), bool], Tensor[(8, 15, 10), float64]) */
}

def @func_4911() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 14, 11), float64], Tensor[(1232), float64]) {
  @func_4909() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 14, 11), float64], Tensor[(1232), float64]) */
}

def @func_2882() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) {
  %510 = cast(meta[relay.Constant][13] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %511 = reshape(%510, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
  %512 = @func_1576(%511) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) */;
  %513 = @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %514 = @func_2582() /* ty=Tensor[(8, 15, 10), float64] */;
  %515 = %512.0;
  %516 = %513.0;
  (%514, %515, meta[relay.Constant][13] /* ty=Tensor[(320), float32] */, %516)
}

def @func_3468() -> (Tensor[(8, 15, 10), float64],) {
  @func_3466() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_5645(%var_5636: Tensor[(9, 4, 8), int32], %var_5637: Tensor[(9, 4, 8), int32]) -> Tensor[(9, 4, 8), int32] {
  %517 = cast(%var_5637, dtype="int32") /* ty=Tensor[(9, 4, 8), int32] */;
  %518 = shape_of(%var_5636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%var_5636, dtype="int32") /* ty=Tensor[(9, 4, 8), int32] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  left_shift(%519, %520) /* ty=Tensor[(9, 4, 8), int32] */
}

def @func_5698() -> (Tensor[(8, 15, 10), float32], Tensor[(3, 84), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  @func_5696() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(3, 84), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */
}

def @func_3399() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %527 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %521 = @func_2523() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %522 = @func_3048() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(15, 12), float64], Tensor[(180), float64], Tensor[(8, 15, 10), float64]) */;
    %523 = @func_1349() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %524 = %521.0;
    %525 = %522.0;
    %526 = %523.0;
    (%524, %525, %526)
  };
  %527() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_3718() -> (Tensor[(8, 15, 10), float64],) {
  %528 = @func_788() /* ty=Tensor[(8, 15, 10), float64] */;
  (%528,)
}

def @func_4126() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %529 = @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %530 = %529.0;
  %531 = @func_1992() /* ty=Tensor[(8, 15, 10), float64] */;
  (%530, %531)
}

def @func_1912() -> Tensor[(8, 15, 10), float64] {
  %532 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %532.0
}

def @func_6367() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_6365() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_2639(%var_2638: Tensor[(1200), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(1200), float64], Tensor[(1, 320), float32], Tensor[(14, 2, 4), float32]) {
  %545 = fn (%var_2605: Tensor[(1200), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(1200), float64], Tensor[(1, 320), float32], Tensor[(14, 2, 4), float32]) {
    %533 = cast(%var_2605, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %534 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 320), float32] */, dtype="float32") /* ty=Tensor[(1, 320), float32] */;
    %535 = cast(%var_2605, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %536 = reshape(%533, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
    %537 = reshape(%534, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
    %538 = reshape(%535, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
    %539 = @func_965(%536, %537, %538) /* ty=(Tensor[(8, 15, 10), int64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32], Tensor[(8, 15, 10), bool]) */;
    %540 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 2, 4), float64] */;
    %541 = atan(%540) /* ty=Tensor[(14, 2, 4), float64] */;
    %542 = cast(%541, dtype="float32") /* ty=Tensor[(14, 2, 4), float32] */;
    %543 = %539.1;
    %544 = acos(%542) /* ty=Tensor[(14, 2, 4), float32] */;
    (%543, %var_2605, meta[relay.Constant][14] /* ty=Tensor[(1, 320), float32] */, %544)
  };
  %545(%var_2638) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(1200), float64], Tensor[(1, 320), float32], Tensor[(14, 2, 4), float32]) */
}

def @func_3788() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), float64], Tensor[(8, 15, 10), float64]) {
  %554 = fn () -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), float64], Tensor[(8, 15, 10), float64]) {
    %546 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
    %547 = @func_860() /* ty=Tensor[(8, 15, 10), float64] */;
    %548 = cast(%547, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %549 = @func_3154() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(2, 264), float32], Tensor[(11, 16, 3), float64]) */;
    %550 = %546.1;
    %551 = sin(%548) /* ty=Tensor[(8, 15, 10), float64] */;
    %552 = %549.2;
    %553 = @func_860() /* ty=Tensor[(8, 15, 10), float64] */;
    (%550, %551, %552, %553)
  };
  %554() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_4876(%var_4875: Tensor[(3528), uint16]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(3, 84), uint16], Tensor[(3528), uint16], Tensor[(8, 15, 10), float64], Tensor[(14, 2), float32]) {
  %567 = fn (%var_4857: Tensor[(3528), uint16]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(3, 84), uint16], Tensor[(3528), uint16], Tensor[(8, 15, 10), float64], Tensor[(14, 2), float32]) {
    %555 = @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
    %556 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 84), uint16] */, dtype="uint16") /* ty=Tensor[(3, 84), uint16] */;
    %557 = cast(%var_4857, dtype="uint16") /* ty=Tensor[(3528), uint16] */;
    %558 = reshape(%556, newshape=[1, 252]) /* ty=Tensor[(1, 252), uint16] */;
    %559 = reshape(%557, newshape=[14, 252]) /* ty=Tensor[(14, 252), uint16] */;
    %560 = @func_4093(%558, %559) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(14, 252), bool]) */;
    %561 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 2), float32] */;
    %562 = reshape(%561, newshape=[28]) /* ty=Tensor[(28), float32] */;
    %563 = @func_4371(%562) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) */;
    %564 = %555.0;
    %565 = %560.0;
    %566 = %563.3;
    (%564, %565, meta[relay.Constant][16] /* ty=Tensor[(3, 84), uint16] */, %var_4857, %566, meta[relay.Constant][17] /* ty=Tensor[(14, 2), float32] */)
  };
  %567(%var_4875) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(3, 84), uint16], Tensor[(3528), uint16], Tensor[(8, 15, 10), float64], Tensor[(14, 2), float32]) */
}

def @func_2501() -> (Tensor[(8, 15, 10), float64],) {
  %568 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %569 = %568.0;
  (%569,)
}

def @func_129() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %580 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %570 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %571 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %572 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %573 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %574 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %575 = %570.0;
    %576 = %571.0;
    %577 = %572.0;
    %578 = %573.0;
    %579 = %574.0;
    (%575, %576, %577, %578, %579)
  };
  %580() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_6434(%var_6432: int32) -> (Tensor[(15, 10, 6), int32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) {
  @func_6431(%var_6432) /* ty=(Tensor[(15, 10, 6), int32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) */
}

def @func_1197(%var_1194: Tensor[(10, 8, 9), float64]) -> (Tensor[(10, 8, 9), float64],) {
  %581 = cast(%var_1194, dtype="float64") /* ty=Tensor[(10, 8, 9), float64] */;
  %582 = acos(%581) /* ty=Tensor[(10, 8, 9), float64] */;
  (%582,)
}

def @func_4767() -> Tensor[(8, 15, 10), float64] {
  @func_4765() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_585(%var_583: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), float32],) {
  @func_582(%var_583) /* ty=(Tensor[(8, 15, 10), float32],) */
}

def @func_6694() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  %586 = fn () -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
    %583 = @func_5621() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %584 = @func_5297() /* ty=Tensor[(8, 15, 10), float32] */;
    %585 = %583.0;
    (%584, %585)
  };
  %586() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_7115() -> Tensor[(8, 15, 10), float64] {
  @func_1773() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_6759() -> Tensor[(8, 15, 10), float32] {
  @func_2802() /* ty=Tensor[(8, 15, 10), float32] */
}

def @func_7392(%var_7391: Tensor[(8, 11), float32]) -> (Tensor[(8, 11), float32],) {
  %589 = fn (%var_7383: Tensor[(8, 11), float32]) -> (Tensor[(8, 11), float32],) {
    %587 = cast(%var_7383, dtype="float32") /* ty=Tensor[(8, 11), float32] */;
    %588 = exp(%587) /* ty=Tensor[(8, 11), float32] */;
    (%588,)
  };
  %589(%var_7391) /* ty=(Tensor[(8, 11), float32],) */
}

def @func_8197(%var_8189: Tensor[(3, 5, 3), float64]) -> (Tensor[(3, 5, 3), int8],) {
  %590 = cast(%var_8189, dtype="float64") /* ty=Tensor[(3, 5, 3), float64] */;
  %591 = asin(%590) /* ty=Tensor[(3, 5, 3), float64] */;
  %592 = cast(%var_8189, dtype="int8") /* ty=Tensor[(3, 5, 3), int8] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="int8") /* ty=Tensor[(3, 5, 3), int8] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %596 = add(%594, %595) /* ty=Tensor[(3, 5, 3), int8] */;
  (%596,)
}

def @func_820() -> Tensor[(8, 15, 10), float64] {
  %598 = fn () -> Tensor[(8, 15, 10), float64] {
    %597 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %597.0
  };
  %598() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_2257(%var_2253: Tensor[(16, 1, 3), int8], %var_2254: Tensor[(16, 8, 3), int8], %var_2255: Tensor[(16, 8, 3), int8], %var_2256: Tensor[(320), float32]) -> (Tensor[(16, 8, 3), int8], Tensor[(16, 8, 3), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  @func_2251(%var_2253, %var_2254, %var_2255, %var_2256) /* ty=(Tensor[(16, 8, 3), int8], Tensor[(16, 8, 3), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) */
}

def @func_5274() -> Tensor[(8, 15, 10), float64] {
  %599 = @func_4186() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %599.0
}

def @func_7378() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_7376() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_3048() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(15, 12), float64], Tensor[(180), float64], Tensor[(8, 15, 10), float64]) {
  %600 = @func_2695() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %601 = cast(meta[relay.Constant][18] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %602 = reshape(%601, newshape=[15, 12]) /* ty=Tensor[(15, 12), float64] */;
  %603 = @func_1719(%602) /* ty=(Tensor[(15, 12), float64], Tensor[(8, 15, 10), float64]) */;
  %604 = @func_2695() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %605 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
  %606 = %600.0;
  %607 = %603.0;
  %608 = %604.0;
  (%605, %606, %607, meta[relay.Constant][18] /* ty=Tensor[(180), float64] */, %608)
}

def @func_7117() -> Tensor[(8, 15, 10), float64] {
  @func_7115() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_7245(%var_7243: Tensor[(4, 40), uint64]) -> (Tensor[(8, 15, 10), float64], Tensor[(4, 8, 5), uint64], Tensor[(4, 40), uint64]) {
  @func_7242(%var_7243) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(4, 8, 5), uint64], Tensor[(4, 40), uint64]) */
}

def @func_5437() -> Tensor[(8, 15, 10), float64] {
  %610 = fn () -> Tensor[(8, 15, 10), float64] {
    %609 = @func_3806() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %609.1
  };
  %610() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_7994() -> (Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32], Tensor[(8, 15, 10), float64]) {
  %616 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32], Tensor[(8, 15, 10), float64]) {
    %611 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
    %612 = @func_7765() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %613 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
    %614 = %611.2;
    %615 = %612.1;
    (%613, %614, %615)
  };
  %616() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_1653() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %617 = @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %618 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %619 = %617.0;
  %620 = %618.1;
  (%619, %620)
}

def @func_1620() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %626 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %621 = @func_215() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %622 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %623 = %621.0;
    %624 = %622.0;
    %625 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
    (%623, %624, %625)
  };
  %626() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_2074(%var_2072: Tensor[(3, 11, 15), float32], %var_2073: Tensor[(80, 4), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(3, 11, 15), float32], Tensor[(80, 4), float32], Tensor[(8, 15, 10), float32]) {
  @func_2070(%var_2072, %var_2073) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(3, 11, 15), float32], Tensor[(80, 4), float32], Tensor[(8, 15, 10), float32]) */
}

def @func_4128() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_4126() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_1200(%var_1198: Tensor[(10, 8, 9), float64]) -> (Tensor[(10, 8, 9), float64],) {
  @func_1197(%var_1198) /* ty=(Tensor[(10, 8, 9), float64],) */
}

def @func_4760(%var_4758: Tensor[(320), float32]) -> (Tensor[(15, 8, 15), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(10, 165), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_4757(%var_4758) /* ty=(Tensor[(15, 8, 15), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(10, 165), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_8161() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(3528), bool], Tensor[(252), uint16], Tensor[(3528), uint16], Tensor[(28, 1), float32]) {
  %627 = @func_6253() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %628 = cast(meta[relay.Constant][19] /* ty=Tensor[(28, 1), float32] */, dtype="float32") /* ty=Tensor[(28, 1), float32] */;
  %629 = reshape(%628, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %630 = @func_4371(%629) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) */;
  %631 = @func_4428() /* ty=(Tensor[(8, 15, 10), float32],) */;
  %632 = cast(meta[relay.Constant][20] /* ty=Tensor[(252), uint16] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %633 = cast(meta[relay.Constant][21] /* ty=Tensor[(3528), uint16] */, dtype="uint16") /* ty=Tensor[(3528), uint16] */;
  %634 = cast(meta[relay.Constant][21] /* ty=Tensor[(3528), uint16] */, dtype="float64") /* ty=Tensor[(3528), float64] */;
  %635 = reshape(%632, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %636 = reshape(%633, newshape=[3528]) /* ty=Tensor[(3528), uint16] */;
  %637 = reshape(%634, newshape=[3528]) /* ty=Tensor[(3528), float64] */;
  %638 = @func_5594(%635, %636, %637) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16], Tensor[(252), uint16], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(3528), bool]) */;
  %639 = cast(meta[relay.Constant][19] /* ty=Tensor[(28, 1), float32] */, dtype="float32") /* ty=Tensor[(28, 1), float32] */;
  %640 = %627.0;
  %641 = %630.3;
  %642 = %631.0;
  %643 = %638.6;
  %644 = cosh(%639) /* ty=Tensor[(28, 1), float32] */;
  (%640, %641, %642, %643, meta[relay.Constant][20] /* ty=Tensor[(252), uint16] */, meta[relay.Constant][21] /* ty=Tensor[(3528), uint16] */, %644)
}

def @func_1798() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  %651 = fn () -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
    %645 = @func_1265() /* ty=Tensor[(8, 15, 10), float32] */;
    %646 = cast(%645, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %647 = reshape(%646, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
    %648 = @func_582(%647) /* ty=(Tensor[(8, 15, 10), float32],) */;
    %649 = %648.0;
    %650 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
    (%645, %649, %650)
  };
  %651() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_326(%var_325: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), int16], Tensor[(8, 15, 10), float64]) {
  %661 = fn (%var_310: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), int16], Tensor[(8, 15, 10), float64]) {
    %652 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %653 = %652.3;
    %654 = cast(%var_310, dtype="int16") /* ty=Tensor[(8, 15, 10), int16] */;
    %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %656 = cast(%653, dtype="int16") /* ty=Tensor[(8, 15, 10), int16] */;
    %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %658 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %659 = bitwise_and(%656, %657) /* ty=Tensor[(8, 15, 10), int16] */;
    %660 = %658.4;
    (%659, %660)
  };
  %661(%var_325) /* ty=(Tensor[(8, 15, 10), int16], Tensor[(8, 15, 10), float64]) */
}

def @func_3154() -> (Tensor[(8, 15, 10), float32], Tensor[(2, 264), float32], Tensor[(11, 16, 3), float64]) {
  %662 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 264), float32] */, dtype="float32") /* ty=Tensor[(2, 264), float32] */;
  %663 = reshape(%662, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %664 = @func_2448(%663) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(11, 16, 3), uint16], Tensor[(11, 16, 3), uint16]) */;
  %665 = %664.3;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(11, 16, 3), float64] */;
  %667 = @func_2802() /* ty=Tensor[(8, 15, 10), float32] */;
  %668 = sigmoid(%666) /* ty=Tensor[(11, 16, 3), float64] */;
  (%667, meta[relay.Constant][22] /* ty=Tensor[(2, 264), float32] */, %668)
}

def @func_4373(%var_4372: Tensor[(28), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) {
  %678 = fn (%var_4356: Tensor[(28), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) {
    %669 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
    %670 = %669.2;
    %671 = cast(%670, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %672 = cast(%var_4356, dtype="float32") /* ty=Tensor[(28), float32] */;
    %673 = reshape(%672, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
    %674 = @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %675 = atanh(%671) /* ty=Tensor[(8, 15, 10), float64] */;
    %676 = @func_4168(%673) /* ty=Tensor[(1, 4, 7), float32] */;
    %677 = %674.0;
    (%675, %676, %var_4356, %677)
  };
  %678(%var_4372) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_789() -> Tensor[(8, 15, 10), float64] {
  %680 = fn () -> Tensor[(8, 15, 10), float64] {
    %679 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %679.3
  };
  %680() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_7674() -> (Tensor[(8, 15, 10), float64], Tensor[(1232), int32], Tensor[(8, 15, 10), float64]) {
  @func_7672() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(1232), int32], Tensor[(8, 15, 10), float64]) */
}

def @func_1409() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) {
  @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */
}

def @func_3565(%var_3564: Tensor[(5, 6), float32]) -> (Tensor[(5, 6), float32], Tensor[(8, 15, 10), float64]) {
  %684 = fn (%var_3555: Tensor[(5, 6), float32]) -> (Tensor[(5, 6), float32], Tensor[(8, 15, 10), float64]) {
    %681 = cast(%var_3555, dtype="float32") /* ty=Tensor[(5, 6), float32] */;
    %682 = log2(%681) /* ty=Tensor[(5, 6), float32] */;
    %683 = @func_1290() /* ty=Tensor[(8, 15, 10), float64] */;
    (%682, %683)
  };
  %684(%var_3564) /* ty=(Tensor[(5, 6), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_6254() -> (Tensor[(8, 15, 10), float64],) {
  %686 = fn () -> (Tensor[(8, 15, 10), float64],) {
    %685 = @func_4765() /* ty=Tensor[(8, 15, 10), float64] */;
    (%685,)
  };
  %686() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_7765() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %687 = @func_5260() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %688 = @func_5043() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %689 = %687.0;
  %690 = %688.1;
  (%689, %690)
}

def @func_7944() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %691 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %692 = %691.0;
  %693 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
  %694 = @func_4476() /* ty=Tensor[(8, 15, 10), float64] */;
  (%692, %693, %694)
}

def @func_5623() -> (Tensor[(8, 15, 10), float64],) {
  @func_5621() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_7910(%var_7908: uint32, %var_7909: Tensor[(900), uint32]) -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(10, 15, 6), uint32], uint32, Tensor[(900), uint32], Tensor[(13, 13, 6), float64], Tensor[(1, 1014), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(320), float64]) {
  %717 = fn (%var_7861: uint32, %var_7862: Tensor[(900), uint32]) -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(10, 15, 6), uint32], uint32, Tensor[(900), uint32], Tensor[(13, 13, 6), float64], Tensor[(1, 1014), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(320), float64]) {
    %695 = @func_3953() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %696 = cast(%var_7861, dtype="uint32") /* ty=uint32 */;
    %697 = cast(%var_7862, dtype="uint32") /* ty=Tensor[(900), uint32] */;
    %698 = reshape(%696, newshape=[]) /* ty=uint32 */;
    %699 = reshape(%697, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), uint32] */;
    %700 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 1014), float64] */, dtype="float64") /* ty=Tensor[(1, 1014), float64] */;
    %701 = reshape(%700, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), float64] */;
    %702 = @func_6884(%701) /* ty=(Tensor[(13, 13, 6), int64], Tensor[(8, 15, 10), float64], Tensor[(13, 13, 6), float64]) */;
    %703 = @func_7841() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %704 = @func_3347() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) */;
    %705 = cast(meta[relay.Constant][24] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %706 = reshape(%705, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %707 = @func_1698(%706) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */;
    %708 = cast(meta[relay.Constant][24] /* ty=Tensor[(320), float32] */, dtype="float64") /* ty=Tensor[(320), float64] */;
    %709 = @func_4435() /* ty=Tensor[(8, 15, 10), float32] */;
    %710 = %695.0;
    %711 = @func_7453(%698, %699) /* ty=Tensor[(10, 15, 6), uint32] */;
    %712 = %702.2;
    %713 = %703.0;
    %714 = %704.1;
    %715 = %707.0;
    %716 = sigmoid(%708) /* ty=Tensor[(320), float64] */;
    (%709, %710, %711, %var_7861, %var_7862, %712, meta[relay.Constant][23] /* ty=Tensor[(1, 1014), float64] */, %713, %714, %715, %716)
  };
  %717(%var_7908, %var_7909) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(10, 15, 6), uint32], uint32, Tensor[(900), uint32], Tensor[(13, 13, 6), float64], Tensor[(1, 1014), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(320), float64]) */
}

def @func_5354(%var_5339: Tensor[(8, 15, 10), float64]) -> (Tensor[(8, 15, 10), bool],) {
  %718 = @func_1349() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %719 = %718.0;
  %720 = cast(%var_5339, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="bool") /* ty=Tensor[(8, 15, 10), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %724 = logical_or(%722, %723) /* ty=Tensor[(8, 15, 10), bool] */;
  (%724,)
}

def @func_8414(%var_8408: Tensor[(10, 3, 1), float64]) -> Tensor[(10, 3, 1), float64] {
  %725 = cast(%var_8408, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  tan(%725) /* ty=Tensor[(10, 3, 1), float64] */
}

def @func_729(%var_728: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), int8], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %754 = fn (%var_716: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), int8], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %726 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %727 = %726.0;
    %728 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 15, 10), float64] */, dtype="int8") /* ty=Tensor[(8, 15, 10), int8] */;
    %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%727, dtype="int8") /* ty=Tensor[(8, 15, 10), int8] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %732 = add(%730, %731) /* ty=Tensor[(8, 15, 10), int8] */;
    %733 = cast(%732, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %734 = reshape(%733, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
    %735 = @func_582(%734) /* ty=(Tensor[(8, 15, 10), float32],) */;
    %736 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %737 = %736.0;
    %738 = cast(%727, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(%737, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %742 = cast(%var_716, dtype="float32") /* ty=Tensor[(320), float32] */;
    %743 = cast(%var_716, dtype="float32") /* ty=Tensor[(320), float32] */;
    %744 = reshape(%742, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %745 = reshape(%743, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %746 = @func_533(%744, %745) /* ty=(Tensor[(16, 2, 10), bool], Tensor[(16, 2, 10), float32], Tensor[(8, 15, 10), float64]) */;
    %747 = cast(%737, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %748 = @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %749 = %735.0;
    %750 = mod(%740, %741) /* ty=Tensor[(8, 15, 10), float64] */;
    %751 = %746.0;
    %752 = asinh(%747) /* ty=Tensor[(8, 15, 10), float64] */;
    %753 = %748.0;
    (%732, %749, %750, %751, %var_716, %752, %753)
  };
  %754(%var_728) /* ty=(Tensor[(8, 15, 10), int8], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(16, 2, 10), bool], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_8200(%var_8198: Tensor[(3, 5, 3), float64]) -> (Tensor[(3, 5, 3), int8],) {
  @func_8197(%var_8198) /* ty=(Tensor[(3, 5, 3), int8],) */
}

def @func_1322(%var_1320: Tensor[(252), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16]) {
  @func_1319(%var_1320) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16]) */
}

def @func_4319() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %759 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %755 = @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
    %756 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %757 = %755.0;
    %758 = %756.0;
    (%757, %758)
  };
  %759() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_8623() -> Tensor[(8, 15, 10), float64] {
  %760 = @func_6241() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %760.2
}

def @func_6026(%var_6009: Tensor[(320), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(4, 10, 8), int8], Tensor[(320), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %761 = cast(%var_6009, dtype="float64") /* ty=Tensor[(320), float64] */;
  %762 = reshape(%761, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), float64] */;
  %763 = @func_5534(%762) /* ty=(Tensor[(4, 10, 8), int8],) */;
  %764 = @func_3097() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %765 = @func_5724() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %766 = @func_1773() /* ty=Tensor[(8, 15, 10), float64] */;
  %767 = %763.0;
  %768 = %764.0;
  %769 = %765.0;
  (%766, %767, %var_6009, %768, %769)
}

def @main(%var_8634: Tensor[(9, 7, 13), float64]) -> (Tensor[(9, 7, 13), float64],) {
  %770 = cast(%var_8634, dtype="float64") /* ty=Tensor[(9, 7, 13), float64] */;
  %771 = log2(%770) /* ty=Tensor[(9, 7, 13), float64] */;
  (%771,)
}

def @func_6813() -> (Tensor[(8, 15, 10), float64],) {
  @func_6811() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_7584() -> (Tensor[(8, 14, 11), float64],) {
  %774 = fn () -> (Tensor[(8, 14, 11), float64],) {
    %772 = @func_4909() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 14, 11), float64], Tensor[(1232), float64]) */;
    %773 = %772.1;
    (%773,)
  };
  %774() /* ty=(Tensor[(8, 14, 11), float64],) */
}

def @func_8464() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %779 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
    %775 = @func_2523() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %776 = @func_3347() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) */;
    %777 = %775.0;
    %778 = %776.2;
    (%777, %778)
  };
  %779() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */
}

def @func_4477() -> Tensor[(8, 15, 10), float64] {
  %781 = fn () -> Tensor[(8, 15, 10), float64] {
    %780 = @func_1349() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %780.0
  };
  %781() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_1291() -> Tensor[(8, 15, 10), float64] {
  %783 = fn () -> Tensor[(8, 15, 10), float64] {
    %782 = @func_398() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %782.0
  };
  %783() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_92() -> (Tensor[(8, 15, 10), float64],) {
  %786 = fn () -> (Tensor[(8, 15, 10), float64],) {
    %784 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %785 = log10(%784) /* ty=Tensor[(8, 15, 10), float64] */;
    (%785,)
  };
  %786() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_5519(%var_5517: Tensor[(11, 11, 16), float64], %var_5518: Tensor[(11, 11, 16), float64]) -> (Tensor[(11, 11, 16), float64],) {
  %792 = fn (%var_5502: Tensor[(11, 11, 16), float64], %var_5503: Tensor[(11, 11, 16), float64]) -> (Tensor[(11, 11, 16), float64],) {
    %787 = cast(%var_5503, dtype="float64") /* ty=Tensor[(11, 11, 16), float64] */;
    %788 = shape_of(%var_5502, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(%var_5502, dtype="float64") /* ty=Tensor[(11, 11, 16), float64] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %791 = multiply(%789, %790) /* ty=Tensor[(11, 11, 16), float64] */;
    (%791,)
  };
  %792(%var_5517, %var_5518) /* ty=(Tensor[(11, 11, 16), float64],) */
}

def @func_8316(%var_8257: int64, %var_8258: Tensor[(4, 15, 1), int64]) -> (Tensor[(10, 8, 9), float64], Tensor[(720), float64], Tensor[(8, 15, 10), float64], Tensor[(80, 4), float64], Tensor[(8, 15, 10), float64], Tensor[(4, 15, ?), bool], Tensor[(4, 15, ?), uint8]) {
  %793 = cast(meta[relay.Constant][27] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %794 = reshape(%793, newshape=[10, 8, 9]) /* ty=Tensor[(10, 8, 9), float64] */;
  %795 = @func_1197(%794) /* ty=(Tensor[(10, 8, 9), float64],) */;
  %796 = cast(meta[relay.Constant][28] /* ty=Tensor[(80, 4), float64] */, dtype="float64") /* ty=Tensor[(80, 4), float64] */;
  %797 = reshape(%796, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %798 = @func_6026(%797) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(4, 10, 8), int8], Tensor[(320), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %799 = @func_5260() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %800 = cast(%var_8257, dtype="int64") /* ty=int64 */;
  %801 = cast(%var_8258, dtype="int64") /* ty=Tensor[(4, 15, 1), int64] */;
  %802 = logical_xor(%800, %801) /* ty=Tensor[(4, 15, 1), int64] */;
  %803 = cast(%var_8257, dtype="bool") /* ty=bool */;
  %804 = cast(%var_8258, dtype="bool") /* ty=Tensor[(4, 15, 1), bool] */;
  %805 = logical_and(%803, %804) /* ty=Tensor[(4, 15, 1), bool] */;
  %806 = cast(%805, dtype="bool") /* ty=Tensor[(4, 15, 1), bool] */;
  %807 = shape_of(%802, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%802, dtype="bool") /* ty=Tensor[(4, 15, 1), bool] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %810 = cast(%var_8257, dtype="float64") /* ty=float64 */;
  %811 = cast(%802, dtype="float64") /* ty=Tensor[(4, 15, 1), float64] */;
  %812 = mod(%810, %811) /* ty=Tensor[(4, 15, 1), float64] */;
  %813 = cast(%812, dtype="uint8") /* ty=Tensor[(4, 15, 1), uint8] */;
  %814 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(%805, dtype="uint8") /* ty=Tensor[(4, 15, 1), uint8] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %817 = %795.0;
  %818 = %798.0;
  %819 = %799.0;
  %820 = greater_equal(%808, %809) /* ty=Tensor[(4, 15, ?), bool] */;
  %821 = bitwise_xor(%815, %816) /* ty=Tensor[(4, 15, ?), uint8] */;
  (%817, meta[relay.Constant][27] /* ty=Tensor[(720), float64] */, %818, meta[relay.Constant][28] /* ty=Tensor[(80, 4), float64] */, %819, %820, %821)
}

def @func_2251(%var_2194: Tensor[(16, 1, 3), int8], %var_2195: Tensor[(16, 8, 3), int8], %var_2204: Tensor[(16, 8, 3), int8], %var_2224: Tensor[(320), float32]) -> (Tensor[(16, 8, 3), int8], Tensor[(16, 8, 3), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  %822 = cast(%var_2194, dtype="int8") /* ty=Tensor[(16, 1, 3), int8] */;
  %823 = cast(%var_2195, dtype="int8") /* ty=Tensor[(16, 8, 3), int8] */;
  %824 = cast(%var_2204, dtype="float64") /* ty=Tensor[(16, 8, 3), float64] */;
  %825 = shape_of(%var_2195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%var_2195, dtype="float64") /* ty=Tensor[(16, 8, 3), float64] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %828 = cast(%var_2224, dtype="float32") /* ty=Tensor[(320), float32] */;
  %829 = reshape(%828, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %830 = @func_1698(%829) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */;
  %831 = bitwise_and(%822, %823) /* ty=Tensor[(16, 8, 3), int8] */;
  %832 = divide(%826, %827) /* ty=Tensor[(16, 8, 3), float64] */;
  %833 = %830.0;
  (%831, %832, %833, %var_2224)
}

def @func_5621() -> (Tensor[(8, 15, 10), float64],) {
  %834 = @func_3953() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %835 = %834.0;
  (%835,)
}

def @func_2116(%var_2115: Tensor[(252), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(252), uint16], Tensor[(252), float64]) {
  %841 = fn (%var_2098: Tensor[(252), float64]) -> (Tensor[(8, 15, 10), float64], Tensor[(252), uint16], Tensor[(252), float64]) {
    %836 = cast(%var_2098, dtype="float64") /* ty=Tensor[(252), float64] */;
    %837 = reshape(%836, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %838 = @func_1319(%837) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(252), uint16]) */;
    %839 = @func_1220() /* ty=Tensor[(8, 15, 10), float64] */;
    %840 = %838.2;
    (%839, %840, %var_2098)
  };
  %841(%var_2115) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(252), uint16], Tensor[(252), float64]) */
}

def @func_4825() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %845 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %842 = @func_1619() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %843 = @func_1290() /* ty=Tensor[(8, 15, 10), float64] */;
    %844 = %842.1;
    (%843, %844)
  };
  %845() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_7598(%var_7585: Tensor[(8, 5, 8), uint64], %var_7586: Tensor[(8, 5, 8), uint64]) -> Tensor[(8, 5, 8), bool] {
  %846 = cast(%var_7586, dtype="bool") /* ty=Tensor[(8, 5, 8), bool] */;
  %847 = shape_of(%var_7585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%var_7585, dtype="bool") /* ty=Tensor[(8, 5, 8), bool] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%848, %849) /* ty=Tensor[(8, 5, 8), bool] */
}

def @func_496() -> (Tensor[(8, 15, 10), float64],) {
  %850 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %851 = %850.0;
  (%851,)
}

def @func_2803() -> Tensor[(8, 15, 10), float32] {
  %852 = fn () -> Tensor[(8, 15, 10), float32] {
    @func_1265() /* ty=Tensor[(8, 15, 10), float32] */
  };
  %852() /* ty=Tensor[(8, 15, 10), float32] */
}

def @func_2964() -> (Tensor[(8, 15, 10), float64],) {
  @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_5276() -> Tensor[(8, 15, 10), float64] {
  @func_5274() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_7767() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_7765() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_3522(%var_3520: float64, %var_3521: Tensor[(2, 16, 16), float64]) -> Tensor[(2, 16, 16), bool] {
  %855 = fn (%var_3499: float64, %var_3500: Tensor[(2, 16, 16), float64]) -> Tensor[(2, 16, 16), bool] {
    %853 = cast(%var_3499, dtype="bool") /* ty=bool */;
    %854 = cast(%var_3500, dtype="bool") /* ty=Tensor[(2, 16, 16), bool] */;
    greater(%853, %854) /* ty=Tensor[(2, 16, 16), bool] */
  };
  %855(%var_3520, %var_3521) /* ty=Tensor[(2, 16, 16), bool] */
}

def @func_3156() -> (Tensor[(8, 15, 10), float32], Tensor[(2, 264), float32], Tensor[(11, 16, 3), float64]) {
  @func_3154() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(2, 264), float32], Tensor[(11, 16, 3), float64]) */
}

def @func_1187(%var_1186: Tensor[(7, 9, 4), float64]) -> (Tensor[(7, 9, 4), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
  %863 = fn (%var_1147: Tensor[(7, 9, 4), float64]) -> (Tensor[(7, 9, 4), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) {
    %856 = cast(%var_1147, dtype="float64") /* ty=Tensor[(7, 9, 4), float64] */;
    %857 = erf(%856) /* ty=Tensor[(7, 9, 4), float64] */;
    %858 = cast(%857, dtype="float32") /* ty=Tensor[(7, 9, 4), float32] */;
    %859 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
    %860 = sin(%858) /* ty=Tensor[(7, 9, 4), float32] */;
    %861 = @func_788() /* ty=Tensor[(8, 15, 10), float64] */;
    %862 = %859.1;
    (%860, %861, %862)
  };
  %863(%var_1186) /* ty=(Tensor[(7, 9, 4), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */
}

def @func_7841() -> (Tensor[(8, 15, 10), float64],) {
  %864 = @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %865 = %864.0;
  (%865,)
}

def @func_1407() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) {
  %866 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %867 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 160), float32] */, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %868 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 160), float32] */, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %869 = reshape(%867, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %870 = reshape(%868, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %871 = @func_533(%869, %870) /* ty=(Tensor[(16, 2, 10), bool], Tensor[(16, 2, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %872 = %866.0;
  %873 = %871.2;
  (%872, %873, meta[relay.Constant][29] /* ty=Tensor[(2, 160), float32] */)
}

def @func_5142() -> Tensor[(8, 15, 10), float64] {
  @func_5140() /* ty=Tensor[(8, 15, 10), float64] */
}

def @func_5726() -> (Tensor[(8, 15, 10), float64],) {
  @func_5724() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_7242(%var_7224: Tensor[(4, 40), uint64]) -> (Tensor[(8, 15, 10), float64], Tensor[(4, 8, 5), uint64], Tensor[(4, 40), uint64]) {
  %874 = cast(%var_7224, dtype="uint64") /* ty=Tensor[(4, 40), uint64] */;
  %875 = reshape(%874, newshape=[4, 8, 5]) /* ty=Tensor[(4, 8, 5), uint64] */;
  %876 = @func_3486() /* ty=Tensor[(8, 15, 10), float64] */;
  %877 = @func_4547(%875) /* ty=Tensor[(4, 8, 5), uint64] */;
  (%876, %877, %var_7224)
}

def @func_6090() -> (Tensor[(8, 15, 10), float64], Tensor[(4, 10, 8), int8], Tensor[(320), float64]) {
  %883 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(4, 10, 8), int8], Tensor[(320), float64]) {
    %878 = cast(meta[relay.Constant][30] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
    %879 = reshape(%878, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), float64] */;
    %880 = @func_5534(%879) /* ty=(Tensor[(4, 10, 8), int8],) */;
    %881 = @func_5436() /* ty=Tensor[(8, 15, 10), float64] */;
    %882 = %880.0;
    (%881, %882, meta[relay.Constant][30] /* ty=Tensor[(320), float64] */)
  };
  %883() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(4, 10, 8), int8], Tensor[(320), float64]) */
}

def @func_4650() -> (Tensor[(8, 15, 10), float64],) {
  %884 = @func_2695() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %885 = %884.0;
  (%885,)
}

def @func_498() -> (Tensor[(8, 15, 10), float64],) {
  @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */
}

def @func_4170(%var_4169: Tensor[(1, 4, 7), float32]) -> Tensor[(1, 4, 7), float32] {
  %887 = fn (%var_4160: Tensor[(1, 4, 7), float32]) -> Tensor[(1, 4, 7), float32] {
    %886 = cast(%var_4160, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
    acosh(%886) /* ty=Tensor[(1, 4, 7), float32] */
  };
  %887(%var_4169) /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_4550(%var_4548: Tensor[(4, 8, 5), uint64]) -> Tensor[(4, 8, 5), uint64] {
  @func_4547(%var_4548) /* ty=Tensor[(4, 8, 5), uint64] */
}

def @func_398() -> (Tensor[(8, 15, 10), float64],) {
  %888 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %889 = %888.0;
  (%889,)
}

def @func_2763() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  @func_2761() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_3050() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(15, 12), float64], Tensor[(180), float64], Tensor[(8, 15, 10), float64]) {
  @func_3048() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(15, 12), float64], Tensor[(180), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_6242() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %897 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
    %890 = @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %891 = @func_819() /* ty=Tensor[(8, 15, 10), float64] */;
    %892 = cast(%891, dtype="float64") /* ty=Tensor[(8, 15, 10), float64] */;
    %893 = @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %894 = %890.0;
    %895 = sigmoid(%892) /* ty=Tensor[(8, 15, 10), float64] */;
    %896 = %893.0;
    (%894, %895, %896)
  };
  %897() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_3676(%var_3672: Tensor[(11, 1, 16), bool], %var_3673: Tensor[(11, 15, 16), bool], %var_3674: Tensor[(11, 15, 16), bool], %var_3675: Tensor[(320), float32]) -> (Tensor[(11, 15, 16), bool], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  %910 = fn (%var_3638: Tensor[(11, 1, 16), bool], %var_3639: Tensor[(11, 15, 16), bool], %var_3661: Tensor[(11, 15, 16), bool], %var_3669: Tensor[(320), float32]) -> (Tensor[(11, 15, 16), bool], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
    %898 = cast(%var_3638, dtype="bool") /* ty=Tensor[(11, 1, 16), bool] */;
    %899 = cast(%var_3639, dtype="bool") /* ty=Tensor[(11, 15, 16), bool] */;
    %900 = logical_and(%898, %899) /* ty=Tensor[(11, 15, 16), bool] */;
    %901 = cast(%var_3661, dtype="bool") /* ty=Tensor[(11, 15, 16), bool] */;
    %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
    %903 = cast(%900, dtype="bool") /* ty=Tensor[(11, 15, 16), bool] */;
    %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %905 = cast(%var_3669, dtype="float32") /* ty=Tensor[(320), float32] */;
    %906 = reshape(%905, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
    %907 = @func_1576(%906) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) */;
    %908 = equal(%903, %904) /* ty=Tensor[(11, 15, 16), bool] */;
    %909 = %907.2;
    (%908, %909, %var_3669)
  };
  %910(%var_3672, %var_3673, %var_3674, %var_3675) /* ty=(Tensor[(11, 15, 16), bool], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) */
}

def @func_5823(%var_5822: Tensor[(28), float32]) -> (Tensor[(8, 15, 10), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) {
  %918 = fn (%var_5813: Tensor[(28), float32]) -> (Tensor[(8, 15, 10), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) {
    %911 = @func_4428() /* ty=(Tensor[(8, 15, 10), float32],) */;
    %912 = cast(%var_5813, dtype="float32") /* ty=Tensor[(28), float32] */;
    %913 = reshape(%912, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
    %914 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %915 = %911.0;
    %916 = @func_4168(%913) /* ty=Tensor[(1, 4, 7), float32] */;
    %917 = %914.0;
    (%915, %916, %var_5813, %917)
  };
  %918(%var_5822) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_4430() -> (Tensor[(8, 15, 10), float32],) {
  @func_4428() /* ty=(Tensor[(8, 15, 10), float32],) */
}

def @func_2884() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) {
  @func_2882() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_4547(%var_4539: Tensor[(4, 8, 5), uint64]) -> Tensor[(4, 8, 5), uint64] {
  %919 = cast(%var_4539, dtype="uint64") /* ty=Tensor[(4, 8, 5), uint64] */;
  %920 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(4, 8, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %921 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 8, 5), uint64] */, dtype="uint64") /* ty=Tensor[(4, 8, 5), uint64] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%921, %922) /* ty=Tensor[(4, 8, 5), uint64] */
}

def @func_4765() -> Tensor[(8, 15, 10), float64] {
  %923 = @func_4126() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %923.0
}

def @func_5790(%var_5776: Tensor[(5, 3, 4), uint64]) -> Tensor[(5, 3, 4), uint64] {
  %924 = cast(%var_5776, dtype="uint64") /* ty=Tensor[(5, 3, 4), uint64] */;
  %925 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(5, 3, 4), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 3, 4), uint64] */, dtype="uint64") /* ty=Tensor[(5, 3, 4), uint64] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%926, %927) /* ty=Tensor[(5, 3, 4), uint64] */
}

def @func_5045() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) {
  @func_5043() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_3808() -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  @func_3806() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */
}

def @func_6431(%var_6389: int32) -> (Tensor[(15, 10, 6), int32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32]) {
  %928 = cast(%var_6389, dtype="int32") /* ty=int32 */;
  %929 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 10, 6), int32] */, dtype="int32") /* ty=Tensor[(15, 10, 6), int32] */;
  %930 = @func_2761() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %931 = multiply(%928, %929) /* ty=Tensor[(15, 10, 6), int32] */;
  %932 = %930.0;
  %933 = @func_1265() /* ty=Tensor[(8, 15, 10), float32] */;
  (%931, %932, %933)
}

def @func_7306() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) {
  %944 = fn () -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) {
    %934 = @func_5043() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
    %935 = @func_128() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
    %936 = cast(meta[relay.Constant][34] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %937 = reshape(%936, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
    %938 = @func_1576(%937) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) */;
    %939 = @func_4650() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %940 = %934.1;
    %941 = %935.1;
    %942 = %938.3;
    %943 = %939.0;
    (%940, %941, %942, meta[relay.Constant][34] /* ty=Tensor[(320), float32] */, %943)
  };
  %944() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(320), float32], Tensor[(8, 15, 10), float64]) */
}

def @func_8320(%var_8318: int64, %var_8319: Tensor[(4, 15, 1), int64]) -> (Tensor[(10, 8, 9), float64], Tensor[(720), float64], Tensor[(8, 15, 10), float64], Tensor[(80, 4), float64], Tensor[(8, 15, 10), float64], Tensor[(4, 15, ?), bool], Tensor[(4, 15, ?), uint8]) {
  @func_8316(%var_8318, %var_8319) /* ty=(Tensor[(10, 8, 9), float64], Tensor[(720), float64], Tensor[(8, 15, 10), float64], Tensor[(80, 4), float64], Tensor[(8, 15, 10), float64], Tensor[(4, 15, ?), bool], Tensor[(4, 15, ?), uint8]) */
}

def @func_8575(%var_8562: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(8, 15, 10), float32]) {
  %945 = cast(%var_8562, dtype="float32") /* ty=Tensor[(320), float32] */;
  %946 = reshape(%945, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %947 = @func_3251(%946) /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) */;
  %948 = @func_5436() /* ty=Tensor[(8, 15, 10), float64] */;
  %949 = %947.0;
  %950 = @func_1265() /* ty=Tensor[(8, 15, 10), float32] */;
  (%948, %949, %var_8562, %950)
}

def @func_5287() -> (Tensor[(1232), float64],) {
  %951 = @func_5223() /* ty=(Tensor[(1232), float64],) */;
  %952 = %951.0;
  (%952,)
}

def @func_6611(%var_6609: Tensor[(320), float32]) -> (Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) {
  @func_6608(%var_6609) /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32]) */
}

def @func_4757(%var_4687: Tensor[(320), float32]) -> (Tensor[(15, 8, 15), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(320), float32], Tensor[(10, 165), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %953 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 8, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 8, 15), float32] */;
  %954 = rsqrt(%953) /* ty=Tensor[(15, 8, 15), float32] */;
  %955 = cast(%954, dtype="float64") /* ty=Tensor[(15, 8, 15), float64] */;
  %956 = @func_3718() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %957 = @func_2501() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %958 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 165), float32] */, dtype="float32") /* ty=Tensor[(10, 165), float32] */;
  %959 = cast(%var_4687, dtype="float32") /* ty=Tensor[(320), float32] */;
  %960 = reshape(%958, newshape=[15, 10, 11]) /* ty=Tensor[(15, 10, 11), float32] */;
  %961 = reshape(%959, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %962 = @func_4618(%960, %961) /* ty=(Tensor[(15, 10, 11), float32], Tensor[(320), float32], Tensor[(320), float32], Tensor[(8, 15, 10), float64], Tensor[(495), float32]) */;
  %963 = @func_1797() /* ty=(Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float32], Tensor[(8, 15, 10), float64]) */;
  %964 = @func_4267() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %965 = @func_2962() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %966 = @func_1030() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float32]) */;
  %967 = cosh(%955) /* ty=Tensor[(15, 8, 15), float64] */;
  %968 = %956.0;
  %969 = %957.0;
  %970 = %962.1;
  %971 = %963.2;
  %972 = %964.0;
  %973 = %965.0;
  %974 = %966.0;
  (%967, %968, %969, %970, meta[relay.Constant][36] /* ty=Tensor[(10, 165), float32] */, %var_4687, %971, %972, %973, %974)
}

def @func_6644() -> (Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) {
  %975 = @func_4650() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %976 = @func_4126() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64]) */;
  %977 = %975.0;
  %978 = @func_1912() /* ty=Tensor[(8, 15, 10), float64] */;
  %979 = %976.1;
  (%977, %978, %979)
}

def @func_1576(%var_1557: Tensor[(2, 160), float32]) -> (Tensor[(8, 15, 10), float32], Tensor[(600, 2), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), int16], Tensor[(2, 160), float32]) {
  %980 = cast(meta[relay.Constant][37] /* ty=Tensor[(600, 2), float64] */, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %981 = reshape(%980, newshape=[8, 15, 10]) /* ty=Tensor[(8, 15, 10), float64] */;
  %982 = @func_582(%981) /* ty=(Tensor[(8, 15, 10), float32],) */;
  %983 = @func_91() /* ty=(Tensor[(8, 15, 10), float64],) */;
  %984 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
  %985 = %984.2;
  %986 = cast(%var_1557, dtype="int16") /* ty=Tensor[(2, 160), int16] */;
  %987 = shape_of(%985, dtype="int32") /* ty=Tensor[(2), int32] */;
  %988 = cast(%985, dtype="int16") /* ty=Tensor[(2, 160), int16] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %990 = @func_1407() /* ty=(Tensor[(8, 15, 10), float64], Tensor[(8, 15, 10), float64], Tensor[(2, 160), float32]) */;
  %991 = %982.0;
  %992 = %983.0;
  %993 = add(%988, %989) /* ty=Tensor[(2, 160), int16] */;
  %994 = %990.2;
  (%991, meta[relay.Constant][37] /* ty=Tensor[(600, 2), float64] */, %992, %993, %994)
}

def @func_536(%var_534: Tensor[(16, 2, 10), float32], %var_535: Tensor[(16, 2, 10), float32]) -> (Tensor[(16, 2, 10), bool], Tensor[(16, 2, 10), float32], Tensor[(8, 15, 10), float64]) {
  %1006 = fn (%var_506: Tensor[(16, 2, 10), float32], %var_515: Tensor[(16, 2, 10), float32]) -> (Tensor[(16, 2, 10), bool], Tensor[(16, 2, 10), float32], Tensor[(8, 15, 10), float64]) {
    %995 = cast(%var_515, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
    %996 = shape_of(%var_506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %997 = cast(%var_506, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
    %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %999 = cast(%var_506, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %1000 = log10(%999) /* ty=Tensor[(16, 2, 10), float32] */;
    %1001 = cast(%1000, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %1002 = @func_496() /* ty=(Tensor[(8, 15, 10), float64],) */;
    %1003 = logical_and(%997, %998) /* ty=Tensor[(16, 2, 10), bool] */;
    %1004 = asin(%1001) /* ty=Tensor[(16, 2, 10), float32] */;
    %1005 = %1002.0;
    (%1003, %1004, %1005)
  };
  %1006(%var_534, %var_535) /* ty=(Tensor[(16, 2, 10), bool], Tensor[(16, 2, 10), float32], Tensor[(8, 15, 10), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen18/build/output.py:3171: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen18/build/output.py", line 3176, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(819) tvmgen_default_fused_log2_kernel0(double* __restrict__ T_log2, double* __restrict__ placeholder) {
  T_log2[(((int)threadIdx.x))] = log2(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

