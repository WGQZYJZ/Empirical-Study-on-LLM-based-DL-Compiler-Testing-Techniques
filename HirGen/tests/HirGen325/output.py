import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_214 = relay.const([[[0.521616,-3.622564,-7.560797,6.092731,-4.142852,9.368009,-9.556253,4.971120,-2.556095,-1.249123,-4.177260,9.601729,7.150878],[3.487107,1.388905,8.414221,-6.664288,-2.025127,2.018891,3.384318,-5.295359,-8.101863,-0.611740,8.847113,-6.246439,3.667763],[-7.511302,-1.344472,-1.723012,6.648661,-6.673050,-9.559123,-1.462929,2.682193,-5.804921,-2.889807,5.454482,2.308039,-0.652039],[-5.330416,-4.546052,9.203904,9.551727,-5.563737,-7.888913,8.994696,4.774906,7.588385,-0.919948,0.348076,6.811064,9.269353],[-8.129305,2.566813,-9.257512,1.928762,7.099009,2.531665,-5.148651,-9.210186,8.212954,-5.571645,6.755557,2.379409,-8.812651],[-7.001079,-3.555019,2.881104,-7.723297,7.289940,-8.225889,-5.448118,9.440985,-7.747418,2.883382,-3.804966,-4.149056,9.688559],[-8.585062,1.168051,3.101338,7.391981,-5.441535,-9.327468,2.766048,8.341335,-9.733478,8.608678,7.116933,-2.269939,0.493167],[-3.653495,2.464492,7.765896,-1.544393,-9.838321,6.918470,9.425808,-3.073052,-2.505857,7.792273,-3.874399,5.546443,5.246171],[8.797109,-1.912085,9.601049,0.447109,-6.356544,-6.267699,6.862992,8.791363,-0.482401,-2.054067,-0.644100,-6.387315,-3.688851]]], dtype = "float32")#candidate|214|(1, 9, 13)|const|float32
uop_215 = relay.sinh(const_214.astype('float32')) # shape=(1, 9, 13)
output = uop_215
output2 = uop_215
func_217 = relay.Function([], output)
mod['func_217'] = func_217
mod = relay.transform.InferType()(mod)
mutated_mod['func_217'] = func_217
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mutated_mod.get_global_var('func_217')
call_218 = func_217_call()
output = call_218
func_219 = relay.Function([], output)
mutated_mod['func_219'] = func_219
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_250 = func_217_call()
call_251 = func_217_call()
uop_252 = relay.acosh(call_250.astype('float32')) # shape=(1, 9, 13)
uop_254 = relay.acosh(call_251.astype('float32')) # shape=(1, 9, 13)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_255 = func_217_call()
call_256 = func_217_call()
output = relay.Tuple([uop_252,call_255,])
output2 = relay.Tuple([uop_254,call_256,])
func_262 = relay.Function([], output)
mod['func_262'] = func_262
mod = relay.transform.InferType()(mod)
mutated_mod['func_262'] = func_262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_262_call = mutated_mod.get_global_var('func_262')
call_263 = func_262_call()
output = call_263
func_264 = relay.Function([], output)
mutated_mod['func_264'] = func_264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_325 = func_217_call()
call_326 = func_217_call()
var_351 = relay.var("var_351", dtype = "float32", shape = (13, 9, 13))#candidate|351|(13, 9, 13)|var|float32
bop_352 = relay.not_equal(call_325.astype('bool'), var_351.astype('bool')) # shape=(13, 9, 13)
bop_355 = relay.not_equal(call_326.astype('bool'), var_351.astype('bool')) # shape=(13, 9, 13)
output = bop_352
output2 = bop_355
func_360 = relay.Function([var_351,], output)
mod['func_360'] = func_360
mod = relay.transform.InferType()(mod)
var_361 = relay.var("var_361", dtype = "float32", shape = (13, 9, 13))#candidate|361|(13, 9, 13)|var|float32
output = func_360(var_361)
func_362 = relay.Function([var_361], output)
mutated_mod['func_362'] = func_362
mutated_mod = relay.transform.InferType()(mutated_mod)
var_402 = relay.var("var_402", dtype = "int8", shape = ())#candidate|402|()|var|int8
var_403 = relay.var("var_403", dtype = "int8", shape = (12, 13, 16))#candidate|403|(12, 13, 16)|var|int8
bop_404 = relay.bitwise_or(var_402.astype('int8'), var_403.astype('int8')) # shape=(12, 13, 16)
func_360_call = mod.get_global_var('func_360')
func_362_call = mutated_mod.get_global_var('func_362')
const_413 = relay.const([9.424951,-2.944607,-5.556893,-1.446851,7.711329,8.668463,-7.769183,-2.209993,4.949907,6.834427,-6.686822,-2.315603,6.949490,-1.016820,2.781193,-3.409911,4.118137,-7.998174,-8.127448,4.102975,2.301006,9.757477,7.207286,4.985685,-7.272589,4.934769,-2.970910,-4.043809,-5.819856,4.982265,8.222021,-5.072266,-7.319142,-1.693970,4.873365,-8.176883,-0.577104,1.913388,7.670887,0.530686,4.994463,-3.441327,-9.699810,8.127644,2.740984,0.727896,-3.388405,5.575854,-2.695621,7.387720,6.887622,-2.205815,3.317602,3.494792,9.269540,-5.801253,1.211588,-7.726851,-3.640050,-8.717881,-7.453225,-9.506539,7.977055,1.321175,9.437798,-6.616037,-4.462981,-8.218442,-2.691531,-3.968231,-3.158601,-4.656723,-4.229269,-5.740317,-3.426906,-0.335085,-1.089981,-5.135314,3.628716,6.994317,-2.168051,1.570473,5.258955,2.125312,-9.762325,8.656055,-4.130412,-8.314300,-6.646845,8.528211,-4.612219,-7.627267,-8.922675,-4.695058,-0.112637,-8.951020,1.591779,-3.274176,-8.732890,-3.852407,4.279452,1.716552,7.115099,-4.392113,-4.135358,7.651056,-4.838636,4.241096,-2.759019,-4.112622,-2.014196,7.383535,-5.898447,-6.209054,2.532052,6.278549,-1.112639,3.519114,3.723791,4.003142,6.636474,-9.316100,-0.965442,2.194860,9.714493,-5.991049,-0.959606,-2.857747,1.426386,2.764298,2.569032,9.971704,-0.227780,-5.872813,7.058206,6.564297,-3.669248,-2.626113,-2.082734,0.318298,7.324154,8.213411,0.439725,-2.752397,-4.160373,-2.445161,5.646463,6.556558,-8.405901,6.041406,8.776355,-5.691489,-3.535528,9.192653,-6.651990,-5.088328,-7.148890,-2.119728,4.825278,-0.156914,-4.294600,-1.738502,-7.613684,7.793117,4.624592,-8.652963,-5.876952,-4.492282,6.874104,9.215993,-7.267925,6.837566,7.154925,-3.883718,9.689304,-5.151545,6.528461,8.569558,-6.109551,-0.702582,4.231100,-3.785828,-9.158110,-1.604073,-0.502333,1.125473,8.715591,6.284889,-2.130606,-0.671664,-6.730707,-5.710852,4.471705,-0.718252,-9.399707,3.548822,7.750032,5.846067,-2.217933,-6.574618,0.615674,5.485684,-4.583500,0.205643,-8.954102,-7.420930,-2.454270,6.735562,-4.281228,6.323394,-6.781220,-7.800735,7.722229,9.940337,4.801830,-9.409213,-5.480758,-6.174261,2.074607,9.778338,6.947899,-4.456526,-2.316092,4.438558,6.146367,-1.925116,0.808753,-5.524413,-3.404040,-1.646017,3.861249,6.499936,-5.183644,-5.608545,7.633824,3.255079,-3.240105,5.004276,0.244420,2.149347,0.768295,5.052194,1.047630,9.429529,3.331645,2.440330,8.768956,-7.791008,-8.511922,3.511455,5.499726,-6.192944,-4.426162,-2.946152,-3.053168,0.315362,4.491125,-4.427467,-6.376630,6.259489,9.635425,-8.647413,6.558691,-1.607513,2.608343,0.543295,1.561879,-8.374574,1.135999,6.056106,5.374475,-7.929732,6.064777,3.499319,-4.324708,-7.702877,7.426819,-0.819566,4.868315,9.843935,-0.008751,0.151439,-4.357708,-4.741763,9.721529,-5.317748,-6.156666,2.758833,8.600260,5.950602,3.969624,-8.764154,-8.145733,4.805747,8.541208,-6.135024,-2.651548,9.497481,-7.979571,-1.937342,-0.755607,-0.763164,5.651153,-1.535728,-1.782392,4.176727,0.603592,-2.737737,-9.023885,-5.881103,-0.283173,-9.492178,-0.874091,-6.718033,4.565436,-2.837960,2.323137,-1.935328,0.690116,0.717161,-0.308012,2.632737,-9.112375,1.983671,-3.084878,2.893829,-6.664965,7.610659,2.023849,1.852648,-0.261452,-5.396665,-1.802679,7.551862,-2.748361,6.963297,2.860563,-6.221032,9.517504,-6.459464,1.830975,-5.094906,4.434438,2.744389,4.345070,9.666346,-5.521460,5.842132,-0.027124,-4.210894,-1.760188,2.135719,3.030398,4.561590,8.212389,-1.824818,7.664358,6.271615,-7.836467,-7.725569,8.783471,7.151608,3.343881,3.989907,4.708155,-6.357045,5.500823,7.455968,-2.754989,3.890635,0.947218,-0.256224,4.914434,8.466697,-1.834327,4.680640,-6.053043,-9.710789,-1.524582,9.316460,3.849304,9.978463,-3.353486,9.368848,6.061462,-1.932294,-3.710058,-0.721503,-0.865172,2.392973,2.330242,0.468944,-8.440655,5.410793,0.523340,-7.422103,2.109284,1.826600,8.453287,-4.064780,-7.881634,0.230938,5.829008,-1.041131,1.081397,6.665935,-9.555210,-2.273083,-5.583279,5.795568,1.054657,-3.058233,5.651975,-6.811230,6.241537,-5.142964,9.524176,-6.048554,3.226563,2.942873,3.903560,5.158520,4.847240,-9.788959,0.821696,9.667520,3.293953,2.750548,2.454581,6.009945,-9.453143,-1.379919,3.628969,6.580664,1.394794,-4.410623,4.083303,2.806203,1.015474,-6.661736,8.113722,5.018453,9.002181,-1.405002,-1.902875,4.768451,2.958862,1.410162,7.424754,5.035328,8.765967,1.177844,3.144017,2.815008,-2.235256,1.588263,4.803970,-5.726658,-8.921362,1.781582,9.003301,7.873136,3.219125,5.602378,5.233052,9.817275,-3.422941,5.561458,2.822332,0.085850,-3.526434,-2.875752,3.964768,7.705827,4.273772,4.551349,9.241180,7.095219,4.633877,5.295347,6.099716,2.496722,4.850074,4.995096,9.713785,-1.074114,8.388478,2.367425,-5.473943,-7.048304,7.652656,-3.275940,3.693689,7.066726,-3.204760,8.750997,-4.983259,-0.429616,-8.960379,-8.199343,-4.510894,7.148063,2.251644,-4.340553,1.755601,1.478122,-9.027059,-8.777404,7.885970,-6.014918,-3.869226,9.210296,-2.980137,7.044048,0.066796,-3.946320,-7.952719,-6.935483,-8.797515,8.200104,8.588475,3.268203,-3.762897,2.330067,4.001223,-3.898080,-3.552784,-9.628633,0.481279,4.649603,-4.419543,-4.178461,9.154277,-8.853826,0.332775,-0.639557,9.245878,5.585634,0.236712,6.801774,-2.231911,-0.802915,-5.093943,-0.508396,-8.951365,-1.328614,1.306691,-9.262804,9.771370,7.317201,-3.157926,-9.815220,9.569121,-2.535584,-3.363932,3.898104,1.265065,1.568130,0.064674,7.608182,5.341729,-4.752977,-9.430230,-7.215486,0.700476,-8.965410,6.035882,5.846038,-4.839002,2.855651,-3.304027,-0.185263,-7.408154,0.387324,4.730326,-6.153872,-2.097364,2.009262,0.371029,4.816815,0.178761,-0.046731,-1.753520,1.306575,6.120387,1.559846,-1.815365,7.686103,-0.837027,-2.180130,3.922255,-7.439886,9.230540,-8.446583,6.648897,1.417078,-1.356051,7.612909,-4.541621,6.372100,5.211087,5.312696,-2.503400,1.709516,5.132628,-3.563821,-4.702191,-2.998666,9.330778,-7.565678,-9.280669,6.604192,3.999307,7.945946,-1.987160,-4.764104,-9.060158,9.978653,-6.991225,7.735163,-7.212111,4.799050,-3.604957,-5.341631,-3.389140,9.479782,-1.195250,0.920148,0.555436,0.826450,-0.928471,-1.388039,2.100675,8.356510,-1.225276,9.386448,1.968454,1.246731,1.165012,8.426102,-4.905310,-7.047508,7.823209,-8.532099,7.997804,-9.141660,6.925324,-4.044317,-5.827750,7.836824,-2.377016,1.184820,0.216088,7.373199,-7.603720,-7.685145,7.035758,-9.075376,2.366065,-1.209213,-9.025419,-1.670857,9.190775,3.259769,-7.754580,-0.706088,5.390811,-8.843144,-0.202121,5.572288,-7.224511,8.701320,1.790332,4.467997,-0.691307,2.813163,-3.139014,6.597719,-1.632520,-1.661721,0.030593,9.010915,-2.582982,9.978041,4.855031,-1.466490,-9.073223,-3.154105,7.568380,-3.030700,6.125592,-0.671210,1.135030,0.264201,-5.239194,3.274692,-4.262535,9.695803,-8.982180,4.950946,1.125090,-4.497558,4.941464,4.109214,-0.484890,-9.281412,6.197725,9.234517,-3.281752,-6.408107,-6.148307,-3.373607,-2.560815,-0.312191,-3.444279,7.709077,6.881070,-1.223136,-1.300390,1.894556,9.666312,-5.370910,-3.806504,-7.535206,-8.233498,-7.983028,-5.175713,6.140802,-6.733279,8.181718,3.764690,-5.632352,-3.289364,2.180970,0.783174,6.098154,-0.048213,9.374421,-2.066061,-2.132060,8.439825,9.009872,4.620951,-1.254946,-2.396128,8.217998,-6.148085,-9.798682,-7.297703,9.300919,-4.436810,-9.386768,-0.854835,-5.651653,7.852562,3.719205,0.816222,-3.351274,8.403953,-4.129170,4.384584,0.353286,1.243945,-9.732912,8.478412,3.313358,1.414474,1.496942,-6.523234,-6.920093,-8.128858,-4.688342,-1.945613,-9.832320,1.842656,-1.374843,-2.722701,7.617329,3.385304,6.299259,8.870697,8.651175,1.341059,6.797889,-2.039217,1.855856,1.829181,-2.421481,7.770017,-3.317972,3.214505,4.579992,-4.044426,8.299373,-0.037477,3.475879,-8.933557,-5.054724,3.576885,3.104977,7.822543,-4.958247,-9.551969,2.268534,2.638836,-8.805106,-2.297607,1.905327,-3.492307,-6.993845,7.978141,6.823254,-7.649654,7.595220,0.282024,5.461570,-1.979040,1.526607,-7.359246,-3.800631,-8.939180,-1.627585,-5.626958,-8.579373,9.031188,8.293373,-4.638492,-9.943245,0.407646,-4.080691,-6.096186,3.478756,7.594456,0.968118,6.759419,7.365110,-0.730376,-9.999640,5.749290,-2.080715,-7.670558,-6.855683,-2.965865,5.158543,-4.856238,-8.478543,-4.268804,2.762782,-1.317412,5.258330,-3.685613,-8.126778,0.012456,8.675076,2.296270,8.132693,-8.487961,-4.323388,-1.381154,-2.691571,7.350684,6.709932,-7.336861,3.662009,2.059832,6.033468,2.968447,-3.862126,-8.530800,-9.105628,6.020337,5.991405,3.750046,-4.216350,-5.741129,-3.271732,5.815002,1.288276,5.670520,0.988079,2.176854,-2.916850,-8.305608,0.704765,6.553298,-3.647270,9.001326,-2.574063,5.379914,-3.824033,3.344516,7.810792,-7.224372,-1.295474,7.990206,-7.726640,-8.026798,2.692291,-4.356832,-4.252623,-9.974380,-9.984204,-4.923873,-8.549706,-1.196474,2.440851,-8.852463,-0.324471,4.862273,-6.629382,-0.843870,-1.116887,8.524429,2.985499,-1.826173,0.151499,-4.582841,1.657880,-4.461633,-0.592012,-7.108822,-1.281868,-7.932504,-0.858525,-3.065232,-2.297869,7.405307,6.411296,6.733445,-7.468874,-1.989971,-7.318589,-6.885540,-0.874195,-8.488200,1.563825,-5.268289,3.131739,-2.711341,5.866650,-4.804393,-1.775249,-5.373341,-2.834269,-2.954634,2.452750,6.564209,-4.951243,2.993153,-9.288054,0.496615,2.298715,-5.500123,6.353039,-4.384686,8.792520,-3.939909,-9.887959,0.861416,-9.877700,-3.339555,2.475389,-6.984503,4.327141,-3.643937,9.110806,7.711664,0.028705,6.339663,-3.578696,2.312149,-4.119740,4.895662,-7.540886,2.366848,3.571037,4.543909,5.036953,-1.898275,4.341877,7.064121,-6.267683,5.703975,-2.210357,-5.797851,-0.172347,-4.852171,-2.198080,-3.006650,-2.304679,7.938974,6.743372,-0.296098,-7.855596,3.901001,0.124118,-5.152728,1.046111,-8.060611,-8.764961,-1.934040,-2.600095,6.026011,2.625926,-3.717764,-3.579769,6.333435,-4.531059,-1.411185,-2.686628,-5.660743,-2.030878,1.058420,2.917742,6.797156,1.044905,-4.780201,-6.448113,-2.331809,9.609864,-8.571004,-6.467622,2.504464,4.163370,-2.588406,0.249731,-5.827476,2.807653,3.695054,1.653377,7.592387,5.736965,-7.258835,0.767659,2.732365,2.852902,-9.595598,1.900054,-1.563347,-5.583690,-2.015414,-6.492192,4.777873,-8.600397,-8.928571,-7.105012,-5.798635,4.318987,1.257762,1.315934,-7.360003,-5.619844,6.526305,-0.908683,9.626183,-2.692822,2.912494,-2.841572,-9.254681,6.237151,-4.021569,-8.301618,7.993726,1.374028,9.354360,8.508433,-5.839450,-8.716997,4.444610,9.567208,2.804793,-6.498731,-1.338811,-1.083395,-1.201019,0.068487,3.310049,2.117525,-7.320707,5.287204,-3.878583,6.294337,0.964989,-4.906215,-3.370347,8.859977,7.081536,-6.821882,-1.104465,-3.498107,2.296160,9.129178,-7.356700,3.941471,2.365562,-1.763680,-2.758061,-1.157605,3.896110,-7.929686,7.952931,-2.398510,-3.273062,-1.644163,2.056145,2.783221,3.032259,7.267667,0.135412,-9.970270,6.453589,-5.383664,-8.517436,5.781095,4.184420,4.625944,3.592705,9.726670,0.037943,-3.079041,0.383559,3.353717,-4.478150,-3.220673,9.508653,7.136764,9.831307,-2.206436,-0.920979,9.825583,-0.842491,-8.739177,-2.683505,1.142869,-3.356468,-8.121398,6.384737,-3.954733,-6.559653,6.600916,1.602027,1.968976,7.211726,-6.388233,5.076763,6.016899,-1.913360,-2.215599,-8.130233,-5.005795,9.832820,-0.689269,-9.977838,5.274316,6.685502,9.747017,8.792920,9.669787,-6.363639,-9.165639,4.692406,8.620013,-5.456015,1.282462,3.297380,8.754682,-0.144528,1.919365,-1.100722,-1.726420,-0.295497,-3.934741,-6.684836,-9.414945,3.972570,-0.713994,-5.317565,-6.048037,1.588741,0.894817,-5.528280,-3.356156,-0.953544,5.895106,-8.644187,-6.428273,4.735071,-8.177686,-4.523084,5.985799,1.627440,7.440303,1.696353,-0.429839,4.348924,-2.038960,-0.307119,-0.265446,-4.344185,1.386456,0.054092,2.161924,-3.375863,-1.054813,-4.869563,-7.514311,-5.159309,-3.655357,-5.148116,-9.865844,-8.795980,1.386693,9.623911,-8.032272,4.339228,-2.827645,2.905624,-4.411964,5.922722,5.158097,-8.192203,-7.079682,7.576716,-4.913639,8.998054,8.342831,4.371466,9.249391,-2.002745,7.024975,8.192135,4.702114,3.377288,6.689446,-1.287495,5.820885,-4.491869,2.892216,-4.134872,9.196674,5.678266,4.429061,0.152349,3.883866,-2.246405,-3.448134,7.395465,0.739500,2.046271,2.149663,5.234767,-9.115490,-3.095619,7.901555,7.545199,1.833523,0.027693,-7.823818,5.637431,-1.576746,-0.683380,0.725643,-2.726692,-2.598652,7.215227,-7.356777,-7.688387,5.661930,-6.459492,6.813666,0.012140,-0.824752,-1.270341,-8.615788,1.217961,5.680931,8.435799,5.153874,2.892805,9.047260,4.225408,2.555690,-3.643172,5.663281,4.027367,-1.784841,2.971397,3.519321,9.558468,6.940286,3.075775,-1.551788,8.338806,-0.586122,-5.397666,-9.592444,2.105515,3.660863,-7.332587,3.902405,-4.585932,-6.369472,-6.519732,1.025869,6.959862,-3.789606,0.216616,8.074890,-2.446052,-2.966236,8.875697,8.147014,-7.455142,-8.432269,7.670595,4.724038,-1.902646,4.427218,6.060911,-2.438916,8.101683,3.241850,-1.385110,9.946010,5.113008,7.454029,-9.861139,4.642503,1.364590,1.521725,2.673411,-6.188421,5.134597,0.570781,-7.053148,7.582214,-2.800381,3.649378,-5.887511,-6.812491,-1.629599,-2.535685,-1.578216,8.162525,-9.346985,-3.179301,5.434356,3.086921,-8.738167,-4.920844,-0.306496,-4.720487,-7.753991,5.395649,-2.826005,-7.586914,3.488643,-0.522606,1.741113,-9.528235,-4.617485,5.660265,2.304120,-0.808754,7.300831,3.367599,9.606300,1.679945,7.203972,-6.032595,-9.060093,-2.183810,4.481114,4.391726,-2.733852,-4.652116,-0.142180,0.813717,-7.146198,1.880563,-4.882742,-4.882176,-8.392609,2.946970,-3.007674,4.000182,8.903127,8.258346,-6.896918,4.034110,-9.582061,-2.786629,5.084784,-9.613913,5.153279,-0.259776,-8.054424,2.870553,-5.346382,-0.225770,-4.899753,8.805510,3.859557,2.227165,3.161837,6.478355,-2.964113,-5.868228,3.303102,-8.638843,-9.609905,-7.612658,1.778567,7.203304,-2.922279,-0.806568,7.739668,-6.535312,-0.418473,5.345550,-4.805191,6.245791,-0.027485,1.945309,0.300129,-0.578633,-4.847529,-0.524581,8.469117,4.622421,-2.597508,-7.458585,2.858481,-2.250829,-7.322198,8.956669,-9.742644,-6.367606,-2.448836,-8.279159,6.699239,9.043235,0.701472,9.089429,3.882204,4.849339,-4.466021,4.693262,-9.085896,-1.281056,9.887461,-5.801826,-4.860446,-4.796612,-3.807990,-4.128557,-2.126082,0.060823,-5.758715,-3.614993,3.827042,4.661327,1.923912,9.334274,-5.021679,6.109716,0.634314,-8.865649,-9.703886,-1.172609,8.698179,-8.769002,-5.384269,-6.413530,-2.925444,-8.971361,-2.341638,8.239369,-1.750239,8.119491,-8.328360,6.493621,-5.188907,-0.801157,-2.539329,5.432929,9.022702,5.170418,7.493359,-7.210681,-0.252884,4.371472,-0.219661,7.932960,4.779925,-6.593689,8.538692,0.956000,3.207130,-0.379392,-1.575723,9.191631,9.727095,5.656081,-9.225728,-4.020835,-6.671516,2.444430,-7.113638,-8.593397,-3.944062,-2.554413,-1.768856,1.044475,1.439894,0.858326,-3.603000,6.984078,-4.275154,-4.851215,5.065219], dtype = "float32")#candidate|413|(1521,)|const|float32
call_412 = func_360_call(relay.reshape(const_413.astype('float32'), [13, 9, 13]))
call_414 = func_360_call(relay.reshape(const_413.astype('float32'), [13, 9, 13]))
func_262_call = mod.get_global_var('func_262')
func_264_call = mutated_mod.get_global_var('func_264')
call_417 = relay.TupleGetItem(func_262_call(), 1)
call_418 = relay.TupleGetItem(func_264_call(), 1)
output = relay.Tuple([bop_404,call_412,const_413,call_417,])
output2 = relay.Tuple([bop_404,call_414,const_413,call_418,])
func_438 = relay.Function([var_402,var_403,], output)
mod['func_438'] = func_438
mod = relay.transform.InferType()(mod)
var_439 = relay.var("var_439", dtype = "int8", shape = ())#candidate|439|()|var|int8
var_440 = relay.var("var_440", dtype = "int8", shape = (12, 13, 16))#candidate|440|(12, 13, 16)|var|int8
output = func_438(var_439,var_440,)
func_441 = relay.Function([var_439,var_440,], output)
mutated_mod['func_441'] = func_441
mutated_mod = relay.transform.InferType()(mutated_mod)
func_262_call = mod.get_global_var('func_262')
func_264_call = mutated_mod.get_global_var('func_264')
call_464 = relay.TupleGetItem(func_262_call(), 0)
call_465 = relay.TupleGetItem(func_264_call(), 0)
uop_471 = relay.atan(call_464.astype('float32')) # shape=(1, 9, 13)
uop_473 = relay.atan(call_465.astype('float32')) # shape=(1, 9, 13)
func_438_call = mod.get_global_var('func_438')
func_441_call = mutated_mod.get_global_var('func_441')
const_475 = relay.const(10, dtype = "int8")#candidate|475|()|const|int8
const_476 = relay.const([-8,7,5,-1,-2,4,8,-10,-5,-10,8,1,6,1,7,-7,-2,-8,6,8,10,8,7,4,6,-7,5,6,-2,-9,-10,4,1,-2,1,-3,-5,-10,8,-4,-7,-9,-1,-8,-1,-3,-1,6,9,7,10,-3,-2,7,9,6,-4,-2,9,1,-5,4,3,8,-8,4,-4,2,1,7,1,-10,8,4,-2,-9,9,-2,3,-4,4,8,-4,5,-10,-7,-6,7,-9,-1,-6,-5,-4,-5,7,-8,7,1,6,9,8,8,3,8,-6,10,-1,-7,3,2,3,-3,7,2,-1,1,6,-3,-5,-10,2,-3,6,8,1,-1,3,5,-9,-3,-9,-10,-6,-4,6,3,4,8,5,-1,-9,1,8,10,-4,-10,9,-9,-4,7,-7,-7,6,2,3,-8,-8,4,4,5,-9,2,-6,-5,4,-10,4,-3,-3,2,8,8,-8,2,-8,-1,-4,7,3,-10,-5,7,6,-8,5,-4,-9,-1,-7,-8,-1,-2,-3,7,-10,-3,5,-4,10,-9,3,7,10,-8,2,1,-6,-10,-1,-5,2,-8,7,-10,-8,-1,-6,5,-8,-2,1,-4,6,8,-1,-2,10,-1,-4,4,-2,4,-3,2,4,-2,7,3,-1,3,-3,-4,7,-10,6,4,8,4,9,-3,-1,-9,2,-4,-7,3,-3,5,-2,-10,8,4,4,-7,5,-7,6,7,-1,3,9,8,-4,-10,5,-5,-4,8,9,10,-7,2,-4,-5,9,1,-3,8,1,4,-9,-10,7,2,5,-10,10,8,-1,9,1,8,10,-3,-7,6,7,-1,-5,-10,5,-5,-4,-1,7,4,1,-2,-9,3,-2,-2,-6,-5,5,5,7,-7,4,3,9,9,-1,-4,-6,8,5,-8,2,3,-9,9,10,-5,5,6,-9,-7,-8,3,-7,3,-3,-4,4,-4,8,9,1,-2,3,-4,5,-3,2,6,-8,-5,9,6,9,-8,-3,-6,-10,3,-6,-4,-8,-3,-2,2,-7,-1,-6,-2,8,3,7,-8,-8,8,7,7,10,6,1,4,-4,-6,3,-7,-8,-4,10,9,4,3,1,7,-10,-3,-10,8,-3,6,2,7,-6,2,5,-3,1,2,-6,3,-1,-6,5,-7,-6,-2,-8,8,-4,-9,6,-9,8,8,8,9,-8,-2,-8,-9,4,5,-4,8,-5,-8,9,-7,9,-2,-7,-6,-9,-9,-7,-3,2,5,-3,6,7,1,1,6,3,7,-2,-8,3,-8,-6,3,9,5,-10,9,7,5,8,-10,-1,3,-1,-2,8,9,1,1,-2,1,1,9,-10,6,8,-10,-2,-10,-6,1,4,-8,-4,2,-9,-7,-5,-8,3,-4,1,-7,1,-8,-2,10,9,-9,-1,8,-6,-10,-3,7,-2,4,6,-6,9,-1,5,8,-3,8,10,4,2,8,-2,-9,5,-10,7,6,-4,-8,2,2,3,-9,-7,-10,9,-4,2,-9,-9,5,-7,-3,-10,9,-6,-7,-10,-3,-3,5,10,5,3,8,5,9,6,2,-2,10,-1,-9,7,-7,5,-2,-1,9,-1,7,2,-7,-7,-6,1,9,5,4,-9,10,-2,9,9,9,-4,-5,2,5,-2,-10,-9,6,6,5,10,-7,10,-8,-3,9,3,4,-8,7,-1,1,-6,3,-7,-5,-4,1,-8,2,-6,-1,-7,-4,-5,4,-8,6,-4,-5,-7,-7,-3,-4,-9,-4,-9,4,1,2,-9,-6,1,-10,-2,5,-5,10,-5,9,-1,7,-10,-6,10,-1,-4,7,-8,2,4,-9,4,-7,2,-10,-8,2,9,3,6,8,10,7,2,9,-7,-5,8,7,-7,-4,6,-5,4,4,-1,-9,-8,8,-4,-6,-3,-3,2,-2,8,3,10,1,-5,3,9,-6,8,9,-9,4,-7,-5,-8,-7,1,-2,-10,-6,-8,-3,-10,-4,-1,10,-9,3,3,6,-3,8,4,6,3,-1,2,7,-2,-2,-5,4,9,1,-5,3,-9,1,-3,7,2,6,-3,6,8,-10,-10,-9,2,-3,9,5,7,1,-7,-5,-8,3,-7,-7,-8,-8,-1,-9,10,-10,-8,-7,10,-6,-8,-6,-3,8,-9,-5,-9,-5,-3,-3,-6,10,-7,10,4,-6,6,-9,-2,-3,9,8,-2,-10,7,5,-6,9,1,3,-3,8,-3,-2,-1,6,2,9,6,6,3,-9,6,4,-7,-1,-8,-4,5,7,-1,-7,8,-7,-7,10,-4,-9,-8,6,-2,8,7,10,-7,7,10,1,1,-2,10,-8,-2,-5,-2,6,9,3,-5,7,9,-8,-9,9,-6,8,-5,-8,-7,-9,-3,4,-10,-9,9,-5,-9,1,3,-8,3,2,-4,8,5,-2,-2,-2,3,-7,7,-1,6,-4,2,-7,6,6,4,-3,9,9,10,-4,-3,5,5,-8,-10,2,-2,10,10,10,-7,-3,8,8,3,3,6,-8,6,4,8,-1,-4,-10,4,-10,-5,-7,-5,1,10,-6,3,-7,-1,6,-6,-2,5,-7,-2,-10,-2,-9,6,4,5,-2,7,-9,10,-10,4,9,3,-10,4,3,-9,-2,-4,10,-8,10,-2,4,6,-10,-5,10,4,-3,2,-4,-8,-5,-3,-4,7,-6,4,-3,-5,3,-2,8,-6,4,-6,-8,-5,9,-10,-8,-8,8,-4,6,-3,-7,-5,1,-5,7,3,8,-10,5,1,-1,-6,2,-9,9,-9,-5,3,-4,-10,2,10,-3,-10,-2,-2,1,-1,9,-3,-2,-7,7,-4,10,5,9,-5,-6,3,-5,1,2,-7,2,7,2,-2,6,1,-9,-10,-2,3,8,-5,10,7,10,10,5,7,-3,-10,4,-5,-10,3,9,-9,3,-10,-2,4,-4,-5,4,-8,-4,8,-2,2,9,3,5,-7,-5,-3,5,-10,-4,9,8,8,8,1,10,-1,1,9,5,6,4,-9,-9,-9,4,2,5,-6,-4,2,-10,-3,8,-7,-7,-5,2,-1,10,3,-5,-6,3,-5,8,-2,-2,-9,8,-3,1,-7,9,4,-5,-3,-2,-5,2,-3,-5,9,2,8,-8,-7,7,1,-2,-5,-2,1,7,8,-4,-10,-5,-8,8,7,5,4,9,-7,-10,10,-1,5,-5,-7,-3,-9,5,7,3,1,9,-9,-1,-9,-1,1,8,-1,-9,3,3,-2,9,-6,-3,-10,2,-3,10,-4,-1,-4,-2,-3,1,-3,-7,-7,-4,1,-9,2,-2,4,6,-4,2,-5,1,5,5,-8,-3,-1,7,-4,4,-8,2,-8,-2,7,-10,-8,2,3,-3,2,-10,-3,-6,3,-5,-6,-5,-9,-9,-10,-9,-10,-4,-8,5,-3,4,2,-2,-10,10,-8,-2,-1,-1,10,1,-1,-2,-4,-1,-4,2,5,-4,3,-2,-6,-7,-7,-2,-8,-6,10,10,-9,-2,7,10,9,8,-6,4,7,1,-8,1,-7,-9,-7,2,1,8,7,-10,1,-8,-8,-9,2,9,4,-9,6,-8,6,-10,4,-7,-5,-7,4,-1,8,7,3,-3,5,8,10,6,-7,-7,4,2,-2,4,-6,10,9,5,3,-9,-2,2,4,-9,4,-2,1,-8,4,-9,-8,-4,6,7,9,-10,2,4,1,6,1,-4,1,3,3,-6,1,-8,-1,-8,10,3,3,-9,-1,10,5,2,5,3,-7,8,9,7,-8,10,7,3,9,2,1,1,5,3,-9,7,3,6,-9,2,7,7,-5,2,4,-3,-8,-10,6,-3,8,-2,3,-3,-8,2,-6,9,-1,5,-7,-10,-3,-7,4,5,-10,-4,-5,-7,-3,10,8,-1,10,-4,-4,-3,-7,-7,10,2,9,5,5,8,-3,-9,8,1,8,7,2,-1,8,-9,-10,-10,-8,-2,9,1,8,4,-2,4,-10,1,8,-10,-10,7,-1,6,4,-2,-9,6,5,-1,-4,-4,-5,8,-7,-2,-9,-6,7,-10,1,5,-7,9,-10,-6,7,-9,-6,-6,7,-9,-6,-9,-6,-6,-10,-1,10,8,10,4,-3,10,10,-2,3,-5,6,-3,-2,-3,10,9,4,9,1,-1,-6,4,6,-5,9,9,-4,10,-3,-8,9,-2,7,8,7,-4,10,-1,4,-9,-9,-8,3,9,-5,7,-8,-8,2,-5,-3,2,-7,-4,-2,-5,1,4,-5,8,-1,5,-7,4,-7,6,8,-5,-4,9,2,-7,-9,-7,-3,4,3,3,10,-9,8,9,5,2,-5,-5,5,1,2,-10,-4,-9,4,7,9,3,1,-5,5,6,-8,-8,3,-9,-7,10,-3,-10,-2,5,5,1,1,4,3,6,3,6,-3,-2,4,-2,2,-8,-9,8,-10,-9,4,6,5,9,-8,-3,10,1,-9,4,5,8,2,7,6,4,-1,-9,4,2,3,-5,5,8,7,9,-2,5,4,10,9,-2,-6,-7,-7,4,-8,-4,5,9,3,-3,5,-3,-3,9,-8,-4,-9,5,-10,7,-10,-3,2,6,-7,4,-8,-9,1,2,-8,-2,-7,-3,7,-7,1,-1,-9,2,-5,-8,-5,-5,6,6,6,-8,-8,-2,-3,4,-8,-8,-4,-2,9,4,-8,2,8,5,9,-9,-6,-4,9,-4,-4,3,-7,7,-7,-1,1,7,5,-7,7,3,-6,-4,-4,-1,5,6,-9,7,5,-10,-3,-8,-9,3,1,-1,3,-2,-6,-9,5,10,-10,1,-6,2,8,-8,-4,-4,8,-10,1,-2,-4,-7,-6,-4,-7,-10,6,10,3,-10,10,-2,9,9,-5,-8,-2,8,5,2,9,-3,-7,8,3,-7,-1,-9,-2,-2,-1,-3,-7,-1,-5,4,-7,8,2,-4,-3,7,-1,-6,-9,7,9,3,3,2,-6,-1,-5,-9,-2,-1,-5,10,-7,6,-5,5,4,-1,1,4,-10,-2,-3,-2,-5,1,3,3,-8,-5,-3,6,-8,4,-2,7,-3,-7,-2,-1,-3,-5,4,8,9,2,6,1,6,-3,2,-10,-1,-9,-7,-7,5,-9,-2,-10,2,4,3,-2,-1,-7,7,7,-4,10,-9,4,-9,-4,3,3,-9,3,-4,-8,2,-7,-3,-4,1,10,10,-5,-8,1,4,-7,5,-2,7,-4,-7,7,-5,9,-6,7,3,-7,10,2,-6,-6,9,9,-10,-6,-4,-7,5,-5,4,-8,-6,10,7,-10,9,3,4,7,-3,-10,-7,7,6,-6,6,9,-1,7,-9,2,-3,-9,4,-10,8,-7,-1,-8,6,7,-7,3,-5,7,-7,3,3,6,7,-6,8,-9,-8,5,-8,8,-9,3,-1,-10,-9,-6,-7,10,8,7,1,-6,1,-5,-4,-4,3,-8,8,-1,-3,7,-1,1,5,7,4,-7,3,-5,6,-9,-7,-3,5,9,-3,7,7,5,-8,10,-4,-8,-10,5,10,-2,10,-1,-1,4,-9,10,-1,-8,5,-10,4,9,8,-9,-7,7,-8,6,-9,5,-3,3,-8,-2,10,6,-9,7,7,10,-7,-3,5,4,10,-3,-2,7,-9,7,-3,3,-7,3,-8,-8,-10,-10,8,1,3,1,2,9,8,-3,8,5,10,-9,-1,-1,-8,9,7,6,-6,5,-6,1,10,-7,4,4,-9,10,10,4,4,-5,-3,-1,9,-9,10,-1,6,9,-9,3,3,-10,9,-10,7,-4,-6,9,10,-2,-10,3,10,-7,6,-9,-7,4,4,7,-9,4,-7,-3,-3,-9,8,8,-5,-9,6,10,8,7,7,-5,-8,-6,-2,-10,-3,-7,-3,1,1,-9,-9,-10,6,-10,5,1,-6,6,5,-2,-7,1,5,9,1,3,-8,8,-2,7,6,1,-7,2,5,10,5,1,5,-4,-8,8,-1,2,-7,-1,10,-6,10,-9,-2,-6,-2,6,7,-4,8,4,8,-1,6,-7,7,-3,1,-2,1,-9,5,8,7,10,6,3,2,1,9,4,3,-2,9,7,-10,-1,-4,-8,3,-6,-1,-2,-4,-1,-3,10,-4,8,6,1,4,2,3,10,-9,-4,7,3,9,6,-3,-5,9,-10,3,-1,-5,6,3,3,-4,2,3,5,-3,3,7,1,-5,1,2,4,4,-5,-10,1,-3,7,10,7,5,9,10,-10,-1,-3,-2,2,1,-7,8,-4,10,-9,7,6,-8,6,5,4,-6,10,-8,-7,4,9,-9,2,-6,4,7,-5,-2,-4,6,2,-7,-3,-9,-1,4,4,2,-5,-7,4,-8,10,10,5,-3,10,-1,4,-5,2,6,-3,2,-9,-8,4,1,-3,7,7,-7,10,1,-10,9,-6,-6,3,8,6,4,1,1,6,-6,-9,-1,-2,1,1,-4,4,7,-7,-9,2,-10,-9,-6,2,-10,-4,-8,-5,10,10,4,-1,9,-7,-10,2,-9,4,7,-9,5,-8,-2,3,-1,-6,-6,8,-7,-4,4,-9,-10,-10,9,4,3,-8,-4,-8,5,-4,1,4,6,4,-7,-5,-6,-4,4,-8,7,-3,8,-10,5,1,5,-3,7,-3,10,1,-10,-10,2,-3,-3,-4,10,-1,-7,3,10,-2,-5,1,-2,-3,9,1,9,-4], dtype = "int8")#candidate|476|(2496,)|const|int8
call_474 = relay.TupleGetItem(func_438_call(relay.reshape(const_475.astype('int8'), []), relay.reshape(const_476.astype('int8'), [12, 13, 16]), ), 0)
call_477 = relay.TupleGetItem(func_441_call(relay.reshape(const_475.astype('int8'), []), relay.reshape(const_476.astype('int8'), [12, 13, 16]), ), 0)
func_360_call = mod.get_global_var('func_360')
func_362_call = mutated_mod.get_global_var('func_362')
var_482 = relay.var("var_482", dtype = "float32", shape = (1521,))#candidate|482|(1521,)|var|float32
call_481 = func_360_call(relay.reshape(var_482.astype('float32'), [13, 9, 13]))
call_483 = func_360_call(relay.reshape(var_482.astype('float32'), [13, 9, 13]))
func_262_call = mod.get_global_var('func_262')
func_264_call = mutated_mod.get_global_var('func_264')
call_484 = relay.TupleGetItem(func_262_call(), 1)
call_485 = relay.TupleGetItem(func_264_call(), 1)
output = relay.Tuple([uop_471,call_474,const_475,const_476,call_481,var_482,call_484,])
output2 = relay.Tuple([uop_473,call_477,const_475,const_476,call_483,var_482,call_485,])
func_486 = relay.Function([var_482,], output)
mod['func_486'] = func_486
mod = relay.transform.InferType()(mod)
var_487 = relay.var("var_487", dtype = "float32", shape = (1521,))#candidate|487|(1521,)|var|float32
output = func_486(var_487)
func_488 = relay.Function([var_487], output)
mutated_mod['func_488'] = func_488
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_494 = func_217_call()
call_495 = func_217_call()
func_262_call = mod.get_global_var('func_262')
func_264_call = mutated_mod.get_global_var('func_264')
call_496 = relay.TupleGetItem(func_262_call(), 1)
call_497 = relay.TupleGetItem(func_264_call(), 1)
output = relay.Tuple([call_494,call_496,])
output2 = relay.Tuple([call_495,call_497,])
func_499 = relay.Function([], output)
mod['func_499'] = func_499
mod = relay.transform.InferType()(mod)
output = func_499()
func_500 = relay.Function([], output)
mutated_mod['func_500'] = func_500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_506 = relay.TupleGetItem(func_499_call(), 0)
call_507 = relay.TupleGetItem(func_500_call(), 0)
func_438_call = mod.get_global_var('func_438')
func_441_call = mutated_mod.get_global_var('func_441')
var_511 = relay.var("var_511", dtype = "int8", shape = ())#candidate|511|()|var|int8
var_512 = relay.var("var_512", dtype = "int8", shape = (624, 4))#candidate|512|(624, 4)|var|int8
call_510 = relay.TupleGetItem(func_438_call(relay.reshape(var_511.astype('int8'), []), relay.reshape(var_512.astype('int8'), [12, 13, 16]), ), 1)
call_513 = relay.TupleGetItem(func_441_call(relay.reshape(var_511.astype('int8'), []), relay.reshape(var_512.astype('int8'), [12, 13, 16]), ), 1)
var_521 = relay.var("var_521", dtype = "int8", shape = (624, 4))#candidate|521|(624, 4)|var|int8
bop_522 = relay.not_equal(var_512.astype('bool'), relay.reshape(var_521.astype('bool'), relay.shape_of(var_512))) # shape=(624, 4)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_525 = func_217_call()
call_526 = func_217_call()
uop_534 = relay.sigmoid(call_525.astype('float64')) # shape=(1, 9, 13)
uop_536 = relay.sigmoid(call_526.astype('float64')) # shape=(1, 9, 13)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_539 = func_217_call()
call_540 = func_217_call()
uop_542 = relay.asin(uop_534.astype('float32')) # shape=(1, 9, 13)
uop_544 = relay.asin(uop_536.astype('float32')) # shape=(1, 9, 13)
output = relay.Tuple([call_506,call_510,var_511,bop_522,call_539,uop_542,])
output2 = relay.Tuple([call_507,call_513,var_511,bop_522,call_540,uop_544,])
func_547 = relay.Function([var_511,var_512,var_521,], output)
mod['func_547'] = func_547
mod = relay.transform.InferType()(mod)
mutated_mod['func_547'] = func_547
mutated_mod = relay.transform.InferType()(mutated_mod)
func_547_call = mutated_mod.get_global_var('func_547')
var_549 = relay.var("var_549", dtype = "int8", shape = ())#candidate|549|()|var|int8
var_550 = relay.var("var_550", dtype = "int8", shape = (624, 4))#candidate|550|(624, 4)|var|int8
var_551 = relay.var("var_551", dtype = "int8", shape = (624, 4))#candidate|551|(624, 4)|var|int8
call_548 = func_547_call(var_549,var_550,var_551,)
output = call_548
func_552 = relay.Function([var_549,var_550,var_551,], output)
mutated_mod['func_552'] = func_552
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_599 = func_217_call()
call_600 = func_217_call()
var_603 = relay.var("var_603", dtype = "float32", shape = (12, 9, 13))#candidate|603|(12, 9, 13)|var|float32
bop_604 = relay.floor_divide(call_599.astype('float32'), var_603.astype('float32')) # shape=(12, 9, 13)
bop_607 = relay.floor_divide(call_600.astype('float32'), var_603.astype('float32')) # shape=(12, 9, 13)
uop_611 = relay.cosh(var_603.astype('float64')) # shape=(12, 9, 13)
func_547_call = mod.get_global_var('func_547')
func_552_call = mutated_mod.get_global_var('func_552')
const_646 = relay.const(-2, dtype = "int8")#candidate|646|()|const|int8
var_647 = relay.var("var_647", dtype = "int8", shape = (2496,))#candidate|647|(2496,)|var|int8
call_645 = relay.TupleGetItem(func_547_call(relay.reshape(const_646.astype('int8'), []), relay.reshape(var_647.astype('int8'), [624, 4]), relay.reshape(var_647.astype('int8'), [624, 4]), ), 2)
call_648 = relay.TupleGetItem(func_552_call(relay.reshape(const_646.astype('int8'), []), relay.reshape(var_647.astype('int8'), [624, 4]), relay.reshape(var_647.astype('int8'), [624, 4]), ), 2)
func_438_call = mod.get_global_var('func_438')
func_441_call = mutated_mod.get_global_var('func_441')
call_656 = relay.TupleGetItem(func_438_call(relay.reshape(const_646.astype('int8'), []), relay.reshape(var_647.astype('int8'), [12, 13, 16]), ), 3)
call_657 = relay.TupleGetItem(func_441_call(relay.reshape(const_646.astype('int8'), []), relay.reshape(var_647.astype('int8'), [12, 13, 16]), ), 3)
output = relay.Tuple([bop_604,uop_611,call_645,const_646,var_647,call_656,])
output2 = relay.Tuple([bop_607,uop_611,call_648,const_646,var_647,call_657,])
func_660 = relay.Function([var_603,var_647,], output)
mod['func_660'] = func_660
mod = relay.transform.InferType()(mod)
var_661 = relay.var("var_661", dtype = "float32", shape = (12, 9, 13))#candidate|661|(12, 9, 13)|var|float32
var_662 = relay.var("var_662", dtype = "int8", shape = (2496,))#candidate|662|(2496,)|var|int8
output = func_660(var_661,var_662,)
func_663 = relay.Function([var_661,var_662,], output)
mutated_mod['func_663'] = func_663
mutated_mod = relay.transform.InferType()(mutated_mod)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_702 = relay.TupleGetItem(func_499_call(), 0)
call_703 = relay.TupleGetItem(func_500_call(), 0)
output = call_702
output2 = call_703
func_710 = relay.Function([], output)
mod['func_710'] = func_710
mod = relay.transform.InferType()(mod)
output = func_710()
func_711 = relay.Function([], output)
mutated_mod['func_711'] = func_711
mutated_mod = relay.transform.InferType()(mutated_mod)
func_710_call = mod.get_global_var('func_710')
func_711_call = mutated_mod.get_global_var('func_711')
call_740 = func_710_call()
call_741 = func_710_call()
output = call_740
output2 = call_741
func_742 = relay.Function([], output)
mod['func_742'] = func_742
mod = relay.transform.InferType()(mod)
mutated_mod['func_742'] = func_742
mutated_mod = relay.transform.InferType()(mutated_mod)
func_742_call = mutated_mod.get_global_var('func_742')
call_743 = func_742_call()
output = call_743
func_744 = relay.Function([], output)
mutated_mod['func_744'] = func_744
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_770 = func_217_call()
call_771 = func_217_call()
func_742_call = mod.get_global_var('func_742')
func_744_call = mutated_mod.get_global_var('func_744')
call_778 = func_742_call()
call_779 = func_742_call()
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_784 = func_217_call()
call_785 = func_217_call()
output = relay.Tuple([call_770,call_778,call_784,])
output2 = relay.Tuple([call_771,call_779,call_785,])
func_793 = relay.Function([], output)
mod['func_793'] = func_793
mod = relay.transform.InferType()(mod)
output = func_793()
func_794 = relay.Function([], output)
mutated_mod['func_794'] = func_794
mutated_mod = relay.transform.InferType()(mutated_mod)
var_806 = relay.var("var_806", dtype = "int8", shape = (6, 16, 3))#candidate|806|(6, 16, 3)|var|int8
var_807 = relay.var("var_807", dtype = "int8", shape = (6, 16, 3))#candidate|807|(6, 16, 3)|var|int8
bop_808 = relay.bitwise_or(var_806.astype('int8'), relay.reshape(var_807.astype('int8'), relay.shape_of(var_806))) # shape=(6, 16, 3)
output = relay.Tuple([bop_808,])
output2 = relay.Tuple([bop_808,])
func_816 = relay.Function([var_806,var_807,], output)
mod['func_816'] = func_816
mod = relay.transform.InferType()(mod)
var_817 = relay.var("var_817", dtype = "int8", shape = (6, 16, 3))#candidate|817|(6, 16, 3)|var|int8
var_818 = relay.var("var_818", dtype = "int8", shape = (6, 16, 3))#candidate|818|(6, 16, 3)|var|int8
output = func_816(var_817,var_818,)
func_819 = relay.Function([var_817,var_818,], output)
mutated_mod['func_819'] = func_819
mutated_mod = relay.transform.InferType()(mutated_mod)
func_710_call = mod.get_global_var('func_710')
func_711_call = mutated_mod.get_global_var('func_711')
call_875 = func_710_call()
call_876 = func_710_call()
func_660_call = mod.get_global_var('func_660')
func_663_call = mutated_mod.get_global_var('func_663')
const_883 = relay.const([[3.186419,3.041545,-8.134943,-9.659766,-0.919739,-3.019317,3.879530,-2.505529,-6.358464,5.672052,-1.757903,-1.640519,-0.733725,-1.097544,-1.718278,-9.605880,-2.490206,9.223943,1.054769,-1.376194,-1.985904,-0.960729,-9.303520,-8.250565,7.512670,5.845084,1.026060,-1.750708,2.477098,-4.893472,3.700383,7.187163,5.630422,4.717962,-3.690972,-4.853134,-6.782577,-9.356509,9.600566,3.331379,3.208542,5.533436,-7.608001,-4.697490,-0.010451,-5.505247,6.038220,5.054071,-6.828328,2.086120,-0.845105,8.095202,-0.103447,-7.106303,7.950544,-4.100314,-3.139326,7.142652,-6.511468,-3.442739,0.328846,-2.016088,-4.576288,5.719746,-9.927705,2.417086,-2.201482,7.650683,5.692771,2.315028,9.351339,3.725530,8.778447,0.174908,-9.715346,-4.500191,-5.819288,-1.908701],[-6.566272,1.933182,-0.704576,1.535067,-9.753149,-9.058323,-8.233034,-5.553318,4.879763,8.186321,-9.139261,-9.235561,-6.739314,-4.309612,-9.502996,7.813304,-7.404845,8.688300,-2.332777,-0.542200,-1.590065,-6.294727,-9.825426,-8.951306,-5.693877,-4.174571,-6.744889,9.596726,2.677469,3.242230,-6.386532,-7.983698,-2.656293,9.082449,-0.914339,5.554151,-1.385321,-8.548453,-3.948469,7.362876,-7.660600,8.109467,-8.514804,-1.365319,6.696496,9.163397,-9.907856,-5.750503,-1.850350,4.574270,6.450619,0.221688,-9.206620,-5.157943,-9.735976,5.865326,9.642839,-1.000091,0.315309,9.721758,-1.763460,-0.205709,-6.222930,9.266904,3.073584,-4.523356,9.677133,-6.430979,9.920981,-1.844538,-0.573764,-4.902116,7.530684,-1.431345,3.383383,5.345808,-8.127726,0.190793],[-4.194451,5.370604,9.835323,5.892397,4.314295,2.892107,-5.446893,7.734528,6.013904,4.120425,-4.113857,-9.188602,1.691407,9.944809,2.401815,9.854784,-2.387080,1.957219,-9.865687,-9.145939,6.045773,-2.576358,-3.060510,-5.228643,4.271891,-3.185362,8.503462,-4.008941,-1.991205,0.919364,-5.337606,0.860342,1.184701,-2.912931,9.105097,-5.438507,-1.793959,8.787572,-3.960960,8.043466,9.705402,2.218167,-9.586797,9.752053,0.103635,-1.407432,3.236326,-8.686627,7.642101,-6.731595,-6.257090,9.440140,7.928951,4.989138,-3.265221,-8.195011,-9.263073,1.857540,6.035448,9.002716,8.896540,-4.738326,6.548816,2.421210,6.177719,-4.763258,-7.123130,3.574023,-9.213746,7.537013,2.138293,-2.842102,2.671847,-1.645386,-6.762278,-4.099507,5.772217,5.222964],[1.454073,3.224691,-3.038734,-3.043135,9.844112,2.860443,-3.262219,2.136620,-3.319725,5.748517,5.004027,-9.208286,9.849323,4.601391,6.151018,-1.182544,4.329884,5.485278,5.643364,8.793014,8.637278,-9.648925,2.489149,9.333225,4.894910,-4.600861,-9.404186,-4.841984,5.966132,2.187581,-7.399057,6.798325,4.203876,-6.752998,5.139479,-7.549219,-3.745835,-4.892807,-6.324250,6.148652,4.822379,-2.986044,-8.615516,1.282260,-8.470010,-6.140788,-2.613064,-3.772191,-1.652228,-0.762584,-0.022116,7.139694,6.622207,5.070512,4.700843,1.989924,-3.612658,3.575784,7.669058,-1.104472,2.471396,-7.133308,-8.900365,0.452791,6.163360,-1.393290,-6.777104,-6.383939,-9.871146,7.020007,-3.660728,-6.127401,-1.808514,8.883889,-7.598435,1.611802,-6.430374,-0.110327],[1.978795,-9.414665,7.152901,-5.547946,-4.690426,-5.385171,-3.901078,-4.736031,-1.577780,1.422667,-6.339527,-9.023517,-7.176386,-5.011957,-7.623307,-7.116436,1.058499,-5.024452,0.672947,-6.909426,-1.456706,-4.186563,1.891437,2.213991,2.081273,-3.170283,-8.284789,0.251915,2.205346,6.705428,-4.448596,2.884514,-5.399327,-6.682797,-6.749187,3.520285,1.913555,-2.468836,8.834027,7.355000,-6.370484,-4.914272,-1.986069,-9.247343,-2.069878,1.207503,5.724869,-3.735221,2.026948,2.563031,0.142428,-7.157339,6.364304,0.181405,-5.908911,2.731388,6.923612,2.690297,4.837173,4.393573,-2.098058,-4.343894,8.151777,5.211209,-0.367468,-4.364366,-1.340246,-6.070564,1.806875,-5.209373,-6.493904,2.416203,0.034542,-7.076873,-6.187154,-8.970630,-7.964223,-2.464183],[5.182899,-1.859780,-3.973867,-5.439659,9.925761,-1.297788,-6.337251,7.333990,4.219623,-3.492011,2.165986,9.569289,-7.117950,-8.161015,8.992538,-0.872162,6.648442,-2.987566,-7.228721,-2.722217,3.090765,-4.149113,5.385990,9.124948,-2.810628,9.077283,-3.665713,4.392762,7.455315,1.877399,-8.875821,0.792812,4.952701,-4.965887,-3.983317,0.871307,4.151771,-7.453910,3.063630,6.507580,1.591932,-9.167031,-0.562043,0.370578,4.055997,-1.266042,-2.485061,1.302823,3.576869,7.133406,-0.236010,5.491461,8.588923,-8.416660,9.022702,-0.701425,1.176998,-1.232526,9.345464,1.772435,0.822448,-3.910046,2.703954,6.703899,5.042177,0.314871,5.379528,-3.989412,-1.110130,-5.690918,-3.726690,-4.942639,6.392407,3.893051,-6.544291,4.061382,-3.022952,-9.010778],[-6.850186,-0.072398,-2.215675,1.431936,0.742997,-4.246036,4.757233,7.393012,-2.364836,2.494068,3.950966,-6.054535,1.063369,0.041332,8.331870,2.470632,0.857168,-6.736507,2.768365,9.355503,7.282289,-2.204928,-3.924041,-3.902034,-5.244211,-5.009379,0.029668,2.304481,0.381758,-4.167774,-9.803348,-0.492805,-5.905064,-1.725385,-6.026397,-2.813602,5.732206,-9.459849,-9.009293,-4.866948,-2.810486,-9.089445,9.372893,-6.844594,-6.471785,-8.147404,1.043405,-7.648080,4.634754,9.418217,8.948398,1.214562,9.518625,-0.423301,-1.306759,-7.520724,-4.810297,-4.962169,-9.597793,-8.369880,-9.422213,-9.610171,2.431358,5.314345,3.571984,-3.127544,-3.685681,0.306487,-7.796051,9.306624,6.239778,6.051026,9.460352,9.863907,7.715075,-2.233234,-5.697927,3.985676],[-1.812078,-9.794478,4.330967,-3.280557,-3.667626,6.948086,6.679779,-8.136154,-1.230982,-3.894976,1.907905,-2.037185,8.209777,-1.555374,8.596123,4.213800,-4.044093,3.283901,3.927639,5.900266,9.818331,-2.477859,-6.342147,6.262830,-1.422305,-5.472753,-1.609526,-8.395070,3.069510,3.586448,-2.827584,-0.345963,6.055895,7.063522,2.034603,-5.079249,8.455675,-2.649587,7.785359,4.536412,1.955355,-2.889380,-9.090521,-0.332518,4.025497,-9.628650,-5.104770,9.386150,-6.852379,-0.421760,3.879437,-6.463821,7.631744,-1.352490,0.252169,6.204368,2.949344,-8.266463,-6.192041,-2.139310,-0.705784,-8.017979,1.723231,-7.299548,-6.296499,-8.869758,-9.156193,-9.395262,3.319571,-3.064438,-2.568516,8.237733,7.802375,6.063895,-6.751612,-0.406801,-9.357929,-6.548202],[-4.829191,0.504335,6.659944,-5.495530,7.165062,-3.889159,-4.420080,6.005820,-1.712969,-8.311534,-4.567084,6.911968,6.321516,2.506549,-3.759188,-7.099740,8.745540,3.115505,1.896968,-2.249571,9.927925,4.426537,3.454990,-1.214700,5.594821,-3.211826,2.484872,9.984828,2.401665,-1.879120,-8.362567,-9.438213,5.016769,-0.929777,3.194368,6.324020,9.146854,-4.828900,9.045796,-9.128421,-2.734382,-7.489066,2.470550,-0.010722,-3.728902,-2.664866,4.528884,-0.057585,4.850217,6.855065,8.729368,0.796506,4.156444,-9.729786,-8.543321,-1.641019,9.247510,-9.724567,-8.999715,3.949854,-4.521909,9.534098,-0.011399,-5.771516,-2.540385,-0.477924,-1.638227,6.644953,-4.486079,-9.791820,-1.954997,1.621956,0.213148,-9.148450,-6.813115,-1.545716,-1.784733,1.813138],[-0.394335,-9.937075,2.097681,-4.754138,-9.199439,-3.123280,7.299909,5.331479,8.083494,0.462617,4.040584,-4.540079,8.050614,-6.042230,-9.603427,-4.529151,3.479947,8.120689,-3.160855,-7.032934,7.385543,0.185385,8.443678,2.083233,0.059026,1.217276,-4.528110,-0.924982,-4.025436,6.028960,-1.781678,7.574151,-7.906061,2.123556,4.643221,8.387275,-2.368512,4.083414,-6.695858,-9.119975,-2.185446,-8.637928,7.383225,-2.979594,4.144000,-6.653539,-4.651297,9.914262,-5.415203,4.286030,-7.925648,7.132129,3.800063,-4.793688,8.203471,5.891117,-3.282295,-5.547098,-0.923784,4.108080,4.242201,-1.954332,-4.414807,-4.475330,-9.390606,-6.311165,0.165403,0.303031,-2.700774,-6.515069,-8.170552,5.541414,2.117703,-6.633790,2.673444,7.409123,2.553762,-0.429919],[8.930793,-2.743239,-3.302738,-9.980460,-3.257553,-0.046977,8.618208,-0.023352,-0.288514,-2.069449,-0.280249,6.325361,-0.598689,-9.163030,-5.779702,3.401647,1.236603,5.286988,-4.075504,5.334843,0.045360,-2.850335,-5.304916,-1.019623,-3.012016,-9.633359,2.718446,-7.434632,-7.563140,5.355714,0.911372,-8.293824,3.354212,-8.073272,3.191338,-3.093437,1.211831,0.921345,-2.698682,-3.660737,-9.935080,1.214620,4.324409,-4.266342,-5.368088,-2.387082,-4.063275,-1.918796,1.151518,-8.281995,8.520748,5.357578,6.522304,-7.211025,6.418913,-8.862228,-7.277779,5.713286,-8.855180,6.649750,-4.194193,-9.414708,0.993913,-0.698379,-6.812725,6.638225,2.434502,-0.727712,-6.451951,-0.795218,-5.614467,3.558523,-5.233782,-8.214406,-5.993274,6.586433,3.510896,-2.021178],[5.700103,8.060006,2.441629,6.629129,-1.815760,1.202847,-8.176286,-2.732471,-1.947929,2.731364,-6.774085,9.761963,-8.198406,8.737289,2.608595,-1.723369,-2.443748,-8.563845,-8.740337,6.051159,8.561991,1.812696,-6.070224,-1.803005,-1.524825,-0.575248,5.384741,6.605429,-1.827000,-0.987048,-0.881714,-4.290851,-4.075755,-3.888984,-0.937888,2.986319,-3.633637,-8.079023,-8.815915,-4.969434,-1.576073,-6.507107,-5.723916,1.406215,-0.500475,-0.539693,-1.351740,-2.981427,1.213186,-2.920707,-8.494553,-2.111216,-8.458480,5.115508,3.035257,3.643150,-7.363104,-9.384637,-2.123871,-6.047940,9.332524,0.503149,3.864849,-2.681401,9.908879,4.575074,7.651239,-5.187454,-7.419158,-7.238796,1.330581,5.626686,1.286518,1.476207,-3.170444,0.965798,-4.901658,0.367474],[-9.608614,7.400132,-4.930028,6.498634,-7.221310,-3.407115,9.795840,-1.215521,-1.899352,7.016838,2.449786,5.169505,-4.912294,4.852696,-2.675158,-9.324936,5.430704,-3.583261,-9.606931,8.799916,3.287459,7.801352,-4.070132,-0.734868,-7.185085,6.602323,-7.305162,9.465728,7.188464,7.923884,5.566412,-1.246369,6.799142,0.440277,-9.965240,-1.756792,-7.179677,-4.467088,-2.744782,6.123501,-0.488893,-2.111502,-9.695176,3.361720,2.598989,9.987441,0.631588,4.561116,-8.481720,-6.618647,7.369008,-9.442622,3.135046,-8.205268,4.943988,-0.234252,-2.321167,-8.942571,-6.557697,-2.863940,1.341960,-0.246619,2.604030,3.684790,-5.120749,-7.716113,6.383368,9.853979,-7.388444,-6.376281,-0.860619,4.459507,0.322307,0.459371,-3.447583,6.588251,3.826919,-2.623226],[0.864877,-6.207644,6.813820,5.924230,3.115426,5.546452,6.590871,-4.552346,-4.670999,-1.364818,5.593190,1.492740,-7.540004,8.890190,0.936813,-7.966707,-2.853872,-3.763132,-6.993982,-5.979596,5.209186,8.391498,1.821750,-8.363976,9.753127,6.520294,-5.174286,-7.578969,-3.167609,-8.621238,6.598215,-1.226550,1.285403,-0.522338,2.452256,0.523323,-2.212502,1.233590,-8.508124,-0.404503,-2.781767,6.138551,-8.860058,8.061973,2.640460,-8.768991,5.542711,-1.372175,-2.119461,-5.318611,1.825580,-8.775209,-3.625238,9.576783,2.850557,-4.930749,-9.131927,-7.443198,-1.181054,6.989762,3.690070,-4.260836,-7.998184,4.620383,3.322838,-7.362469,2.735743,4.680153,-8.278244,3.789085,-4.058879,-5.279648,6.928456,9.211091,-1.689467,1.071580,2.149542,-5.378506],[3.859490,-3.092923,9.828142,3.607806,3.070090,-8.710883,-2.090198,4.657995,-1.202484,9.551551,-6.338926,7.773210,7.393879,-8.962994,-6.403734,-4.566604,-4.061552,5.409106,-9.679239,-3.037436,9.466406,7.242963,-2.519148,-3.481252,-4.873843,-4.099155,-1.098334,-3.977875,6.117625,-5.011638,3.910952,7.344275,0.948690,-0.864233,9.701259,5.405138,4.393881,-7.019714,8.289882,-2.676509,-1.783029,-7.304982,-5.881636,-2.978186,8.870312,-3.298662,-6.183948,-7.895586,-3.975262,8.780254,-7.734597,-7.370112,1.089648,9.260597,3.721411,5.721781,4.699487,-7.264511,-2.341878,9.843538,-3.044947,-0.315883,9.385350,-1.006756,0.244181,1.943976,3.673024,-4.075148,5.683386,2.463253,7.336425,-3.765032,3.455923,8.964818,-3.009639,1.065645,-0.256754,3.287010],[7.056647,5.305073,2.033337,-1.339952,-1.306730,6.565007,-0.780942,-1.332892,8.050159,-7.487703,8.125188,-4.322077,-1.646186,-8.968682,-6.497324,-0.179752,-0.861465,-8.255038,7.106448,-5.467697,6.921227,1.778339,-3.827627,-7.525458,-0.703226,-9.725289,-0.313732,7.744410,1.637168,6.433011,5.165230,4.595163,0.400055,5.598081,-6.911265,-8.380515,-6.033378,8.658303,5.115170,-4.439380,5.191616,4.067401,-3.754090,-6.345610,3.805240,0.917089,-9.167944,-3.250256,-4.825034,-1.644551,1.531403,2.968434,-2.679968,-1.176348,-2.234852,1.232369,-8.237628,9.832063,-8.204973,-6.478595,7.820999,-1.146771,-2.106326,8.770901,6.383086,9.909367,-9.330952,-4.117283,9.564550,-1.154171,5.198492,9.075468,-3.040699,-1.026086,7.365963,-2.831443,-0.549071,-0.328175],[6.930586,-2.333210,1.351918,2.648630,-4.861590,-2.576762,1.155062,1.557608,-4.727972,-4.503863,2.312822,9.224266,5.588019,3.745329,5.010810,-1.892260,2.997995,2.693416,-9.475907,-0.471003,-1.592858,-2.372120,4.724693,-9.294861,7.091069,-5.853681,-6.184352,5.194071,-4.003861,3.738738,-0.440766,-6.161963,-4.549413,-1.124548,7.711591,4.014293,3.950679,6.026576,7.023430,-4.245103,-5.759122,3.301085,1.744302,-1.676727,4.093242,1.953552,2.000817,9.650515,0.237210,-3.880789,-0.477954,-5.096784,4.154752,-0.731311,3.464163,7.803699,-4.113017,-6.129417,3.743392,6.184534,3.790834,-8.433940,-0.693694,-5.159552,5.920302,-6.591261,9.156866,6.609831,-9.702790,6.073097,3.642827,8.452499,-3.245894,5.801630,-6.674216,-1.180638,9.470416,-3.202054],[2.061425,2.299440,9.637047,-1.485839,-7.751931,-5.930833,-0.982663,-1.506351,-8.713980,7.325024,-0.217383,3.887460,2.102867,-3.946429,-4.277120,-1.022563,5.217568,2.857826,-8.294262,8.028001,0.099790,8.785388,-0.230341,6.581553,-4.675139,9.242034,6.660423,3.404833,-8.182931,9.043620,8.772973,-6.917625,8.613768,5.248958,-1.089385,-5.266951,-0.727303,7.988521,-1.556818,-7.774287,2.414624,0.859244,-9.943916,5.248083,-4.399287,6.892082,-1.895526,-9.882199,7.545933,0.624952,5.903493,-1.609299,-0.017386,-2.739860,-0.006862,4.461443,-2.128195,4.487007,4.078905,4.216577,7.962255,0.759775,4.049814,-4.632563,-1.212749,-0.681253,3.900608,9.156372,-6.924369,-2.072349,-0.481612,-3.684065,-3.254780,1.816152,-1.724600,4.118758,-0.855016,3.488844]], dtype = "float32")#candidate|883|(18, 78)|const|float32
const_884 = relay.const([2,1,2,7,7,5,4,2,4,5,8,-10,9,-6,-6,4,-10,3,6,-5,-7,-5,-4,-6,4,-2,-7,7,-8,7,-10,1,7,2,-5,-8,-9,7,2,4,5,10,-8,-9,2,10,8,9,-9,-3,-10,-9,6,2,9,5,4,7,-2,8,-2,-3,-2,-8,-7,-3,9,-4,10,-4,6,5,5,-9,8,-3,6,1,-10,6,7,4,5,-3,-6,6,-6,-9,4,-2,-7,-3,8,-2,-10,-8,2,-2,-10,4,2,7,2,3,-7,-10,-7,-1,6,5,-4,4,-5,-10,3,-10,-5,-7,6,-5,-2,-9,-10,3,-4,4,3,1,-6,2,7,6,-10,9,2,1,10,2,10,8,6,-3,1,9,-9,9,-5,-7,10,3,1,6,3,3,-3,-9,-4,2,-8,-5,1,2,10,1,7,-2,5,4,-5,-3,-10,9,-7,-9,1,-2,7,6,-3,-7,-10,-3,-4,5,3,-8,-2,-7,10,-4,10,-3,9,-4,8,-7,8,-3,4,-2,6,10,-8,7,-2,9,6,-1,-3,9,6,-8,-5,-9,-1,-6,2,4,-2,8,-1,-6,-10,4,-1,3,-1,4,-3,5,-7,-2,-6,10,9,-1,-8,-9,-3,-10,-8,-2,5,4,-2,-2,9,-7,-2,2,9,-2,-8,3,-8,6,5,6,5,-8,9,5,5,3,-2,-7,-8,-6,-3,-10,4,-6,5,9,-2,-6,-8,-10,-4,10,-10,5,-7,-6,1,-9,3,4,-7,-7,-1,-1,5,-3,6,5,10,8,2,-10,-2,-10,6,3,8,-4,5,7,9,-9,3,5,-3,-5,-6,1,-3,3,4,5,-7,8,-4,-10,-7,10,-4,-7,7,-3,6,3,3,-1,3,9,-2,-10,4,-3,-2,4,9,2,-3,1,8,-9,9,10,-5,-9,-5,-5,-2,3,1,-7,-7,8,-3,9,2,-4,7,2,2,9,2,-8,4,10,7,8,6,5,-5,-3,-4,8,1,-3,1,2,-8,2,2,-7,-9,6,-1,9,7,2,8,-3,10,-4,8,8,6,7,-2,-10,9,8,-7,7,6,-5,1,-5,-2,6,7,-5,2,3,-6,4,-9,9,-7,9,-8,-2,-10,2,8,-3,9,-9,10,6,-5,3,-3,9,7,-7,-2,-5,-6,6,4,10,-7,-8,-1,3,7,7,8,-3,-3,1,-9,-10,3,10,7,-3,-1,1,5,5,10,3,-9,3,7,9,-2,3,-7,3,5,6,6,5,3,-5,-3,1,5,5,-1,7,3,7,3,4,7,-5,9,-4,1,5,8,-7,3,-4,-8,8,-1,3,-6,-3,7,5,9,10,1,-5,3,-3,-5,1,-7,5,5,-3,5,3,5,9,1,3,5,2,-9,-4,-1,-8,-5,8,10,-10,-9,-6,3,10,3,8,1,-5,5,7,-6,4,-7,-1,4,-2,4,-1,1,3,-5,3,-10,-8,-8,1,-9,5,-7,-3,-10,8,-2,5,10,-9,-8,3,-9,-1,8,-10,6,3,6,8,2,1,7,-7,-1,-2,-9,7,9,-4,9,-4,-3,-2,-6,2,8,-9,-9,-2,5,1,10,-3,-5,6,2,1,-8,2,-5,9,10,-8,8,-1,-3,-8,-10,4,7,1,1,-5,-7,2,-3,-5,2,-4,-1,-3,9,1,-10,5,4,-7,10,-3,-10,8,7,8,5,10,-7,2,4,-5,8,-4,-8,7,-4,6,7,-9,5,2,9,6,4,-2,-1,5,-1,-2,-1,-8,1,-8,5,-1,-5,10,6,10,8,-8,-2,-8,3,3,-1,10,-4,10,-8,-2,7,-6,2,1,-1,8,-6,-6,8,-5,-10,-3,-5,-6,6,-7,3,-4,-1,-4,-7,-8,1,-4,-3,8,-5,-10,5,-5,-5,4,8,-3,-4,-3,-1,6,5,1,-8,-3,-1,3,-8,-7,-3,-1,8,1,-2,6,7,5,9,-4,-6,-10,-10,3,3,1,10,8,7,-3,-6,-4,9,7,-5,5,-7,-8,-9,-5,10,8,-7,9,4,4,-9,4,-8,-7,3,-4,-8,7,3,10,5,5,-2,7,4,-7,10,4,4,10,-5,8,-9,3,-7,7,-8,-6,-5,-8,6,6,9,-3,3,-10,10,-4,-7,10,1,-7,-8,-1,8,3,-5,10,-1,6,-6,2,8,-2,-4,-6,10,4,-8,2,-4,-10,6,-4,-2,-8,-9,-4,-8,-10,1,-7,-1,10,8,5,-6,5,-6,-8,-9,9,-7,-5,-1,7,-4,4,7,-7,5,9,9,-5,2,3,10,-1,7,1,-2,-10,5,2,-8,-7,10,-8,9,-4,-7,-2,1,5,9,5,-6,-8,1,-3,10,5,5,1,-5,6,-3,10,-2,-1,-4,-4,3,3,3,-6,5,5,3,5,10,-1,-10,7,9,-2,-6,5,-10,3,4,8,-1,1,-10,1,8,5,6,-9,-9,7,-9,5,3,-5,-9,8,8,3,8,2,-7,-5,8,-9,-6,4,-1,7,9,2,-4,8,-2,4,7,9,10,9,9,-6,-6,-2,-9,10,-10,-6,5,-10,6,-8,-7,-9,10,-6,-7,3,1,10,-6,-6,5,3,-7,-8,5,8,-4,1,-8,-4,-7,8,-4,-8,1,7,7,9,-10,-8,4,9,6,5,-6,9,-7,1,-7,2,-2,-5,8,4,-2,5,2,-5,5,-10,-8,6,6,-7,-6,-1,7,-1,2,2,-10,10,-2,-8,-5,-10,7,-6,-3,6,-1,2,-6,10,-8,2,9,10,8,-10,8,4,8,-10,3,2,4,-2,9,-10,4,7,-5,7,-6,-6,9,-2,2,-7,10,10,5,6,-4,1,10,1,6,9,-7,8,5,-4,-4,1,-4,1,3,-3,6,2,3,-1,3,1,-3,9,-1,-4,-6,2,-7,7,-2,6,-8,4,-4,-10,-3,1,2,-5,-1,-9,-5,6,3,10,6,3,-4,5,4,-9,8,4,-7,4,-9,6,-5,-3,-6,6,-1,-5,-8,5,6,8,3,4,2,-8,1,4,-6,6,2,-3,-1,-7,1,-2,7,10,5,-10,4,-7,-3,2,-7,-1,-10,-1,-5,3,-2,2,6,-1,-8,5,10,6,2,3,6,-8,10,-9,-8,10,7,3,-6,2,5,5,-3,1,10,-7,-7,5,4,2,-6,6,-4,5,-1,-5,8,4,-2,-7,8,-1,10,-6,-9,8,1,-9,3,9,2,-2,4,4,-2,10,-6,9,-6,10,-3,1,4,-1,3,-3,-3,-7,-3,-3,-1,-9,4,3,-2,3,3,9,1,6,-1,-1,6,-1,9,5,7,-7,1,10,2,7,7,-7,-8,-4,-4,3,-3,8,-10,-1,7,9,7,9,5,5,4,2,-6,10,3,7,-2,9,-8,-3,10,10,3,5,5,-10,3,-10,-2,9,8,5,-1,-3,7,-1,-8,-2,-10,9,-8,-6,-4,-2,-1,-4,-6,-10,-5,3,9,-9,-7,-9,10,4,-10,-3,-7,3,-5,-6,5,-8,-8,-2,-9,3,-4,2,-2,-5,5,7,2,-1,-6,-10,2,3,10,-7,8,4,-4,-9,-1,9,2,-1,5,-5,-10,3,-4,-1,2,5,10,6,-6,-10,-9,4,-6,-10,-6,1,-2,7,1,-2,8,6,7,-1,5,9,-2,-7,-7,-9,-2,8,-7,9,2,4,9,9,-2,-10,-4,2,3,6,6,2,8,-3,-4,6,6,-8,-9,-2,9,-7,2,-1,-9,-6,4,7,9,-8,2,10,3,-4,7,3,-9,-1,10,-7,-10,-5,10,-4,-2,3,6,4,3,4,-4,-8,-5,-6,-10,3,-8,2,-10,9,1,-10,3,-8,1,-8,9,8,2,9,6,2,2,-2,-2,-8,2,2,9,-4,4,-5,-6,6,-6,-2,9,-6,9,7,10,-6,1,-8,2,3,1,-8,1,-7,-9,9,2,-10,5,4,-3,8,2,8,-7,9,-1,5,9,8,10,9,-5,4,-6,-5,-1,-5,-8,-7,6,-5,1,8,3,-1,5,4,6,-10,-8,-5,10,2,-5,-5,2,-7,-1,4,-10,6,4,-5,-9,5,2,6,2,-9,6,-5,3,3,6,7,-4,-3,-2,9,5,-9,-5,-8,3,-1,3,-9,-9,-2,2,3,2,-4,-4,6,-8,8,-9,10,8,-1,1,-9,2,7,3,-10,4,9,-1,-1,9,-4,-8,10,-10,-8,3,-1,-1,9,-8,10,6,-2,-4,6,2,4,6,9,7,5,5,4,-6,-3,-3,6,2,-6,1,-10,2,7,9,2,-1,5,6,-5,2,5,-1,-7,-9,7,-5,-6,-2,6,9,7,-6,-8,-2,5,3,1,10,-4,1,2,-2,-4,1,8,-8,2,7,-6,-4,-3,10,-10,-10,-3,8,8,6,-6,1,-7,-7,5,-8,3,2,1,-7,-4,5,-1,-5,-5,-2,7,5,4,-4,5,2,8,-3,-7,7,-1,-1,9,1,8,-5,7,-1,-1,2,9,-6,-7,3,1,-7,6,5,5,-9,9,8,-3,9,-5,4,4,-10,-10,6,7,-6,-3,-8,8,1,-1,-5,1,-10,6,10,-3,2,-5,7,-4,-5,-5,-5,-2,2,7,-8,3,5,-2,-1,5,-10,-4,4,-1,4,4,9,-6,-9,-8,3,7,-3,3,5,9,-8,-4,2,-1,-9,6,3,9,-6,1,8,-7,8,-5,8,10,-7,-10,8,-5,-8,-5,4,-5,2,-2,-3,-3,1,-3,2,-8,-6,9,-2,10,-9,3,2,-6,1,7,10,-2,-10,1,8,4,-8,9,9,-9,6,-2,9,5,7,-3,-3,-8,-2,4,6,6,-1,3,-4,-8,4,1,9,3,-7,1,-3,-3,-7,5,-5,9,-5,7,5,-4,-7,-4,10,-2,-4,-10,-1,-2,-10,-2,-9,2,-3,5,-4,1,-3,-8,10,3,3,1,-6,4,1,10,9,5,-1,-2,-1,-8,5,1,-8,-1,8,8,-8,-2,8,-8,6,-9,-4,-3,5,9,-9,-7,-7,-1,4,-10,10,1,4,5,3,-6,-8,-1,-2,2,3,2,2,4,1,-10,4,2,-1,9,-2,10,-5,2,-3,1,-6,5,-4,-3,5,-9,5,8,-8,-9,-1,10,-9,-5,7,-8,9,-10,-4,-2,-8,-9,-10,-8,-3,1,-5,-2,-3,5,-3,4,10,-6,7,-5,-9,-8,1,-9,5,8,1,4,-7,6,4,3,-4,-8,7,5,-8,-4,3,1,1,7,1,8,2,9,3,-10,9,7,-3,-1,-9,8,-6,1,-2,1,-10,1,-4,8,10,-4,7,-6,-8,-1,-10,1,10,5,-10,5,-5,2,5,-7,-9,6,6,6,9,-3,8,4,3,10,-8,-3,-1,2,-8,-3,-4,5,-10,-6,-10,-9,10,-6,5,-8,1,5,10,-8,-8,5,9,-4,3,-10,-6,3,2,-10,-5,9,-2,10,4,8,8,-6,7,9,-9,-5,8,2,5,-9,2,10,4,6,7,-10,9,-5,-7,8,-3,-2,9,3,7,8,-1,5,-8,3,-5,4,10,-2,-2,-2,1,6,-7,-8,2,-8,-4,-10,2,-2,8,-2,-3,-5,3,2,1,-8,8,7,-1,4,-5,-2,8,5,9,-4,10,-9,-9,10,10,10,-5,-7,1,-4,6,5,-9,1,6,10,9,2,2,-7,10,-8,6,1,-7,-4,-2,-8,-9,-1,-8,-2,2,-4,6,5,-9,-10,10,-2,10,-1,-5,5,10,9,-9,-5,-5,-5,10,-6,5,-6,1,2,-4,-4,-4,4,-7,3,6,-6,9,-1,-1,10,6,3,-5,-7,-9,-9,1,8,8,3,1,4,-1,1,-3,10,-8,-5,7,4,-4,-9,-6,-1,10,8,-3,3,7,-6,6,2,-10,-9,-10,2,-5,6,-10,8,1,1,-8,8,10,-8,3,-2,-6,9,-3,-9,-6,2,2,-7,-5,8,5,-9,-3,3,6,8,-6,7,10,10,2,1,3,8,-6,-1,6,6,-6,7,4,-5,2,2,9,7,5,5,6,7,-2,3,-8,-9,-9,8,2,4,7,-4,-9,8,-9,-3,8,6,-8,-10,-7,-3,-5,-10,6,1,-1,10,7,5,2,-10,-7,10,3,-2,-9,9,-7,3,2,-9,-8,-4,-8,1,-4,-8,-5,-6,8,-1,2,5,8,5,1,-4,2,3,6,7,5,10,-6,10,-4,-3,2,8,-5,1,-6,6,-4,7,3,9,1,-9,6,3,10,-8,3,2,10,5,-10,-7,1,6,10,-3,-5,-10,-10,2,-8,-2,-8,-10,-8,6,7,2,-7,-4,-4,-10,9,-1,-2,1,-5,2,5,-4,8,-1,-5,-4,3,-1,-5,7,4,3,3,7,-4,3,-10,2,-9,2,-8,-6,4,-8,-2,-1,3,4,9,-3,-10,-2,-3,8,-9,-4,7,-8,1,10,-10,-10,6,-8,5,7,8,-6,8,-3,-4,-4,8,4,7,-3,-6,10,6,6,-9,-5,-6,8,-4,-1,-7,-1,-8,-2,-10,3,-7,7,-1,5,10,7], dtype = "int8")#candidate|884|(2496,)|const|int8
call_882 = relay.TupleGetItem(func_660_call(relay.reshape(const_883.astype('float32'), [12, 9, 13]), relay.reshape(const_884.astype('int8'), [2496,]), ), 1)
call_885 = relay.TupleGetItem(func_663_call(relay.reshape(const_883.astype('float32'), [12, 9, 13]), relay.reshape(const_884.astype('int8'), [2496,]), ), 1)
uop_889 = relay.log10(const_884.astype('float32')) # shape=(2496,)
uop_891 = relay.cos(uop_889.astype('float64')) # shape=(2496,)
output = relay.Tuple([call_875,call_882,const_883,uop_891,])
output2 = relay.Tuple([call_876,call_885,const_883,uop_891,])
func_895 = relay.Function([], output)
mod['func_895'] = func_895
mod = relay.transform.InferType()(mod)
output = func_895()
func_896 = relay.Function([], output)
mutated_mod['func_896'] = func_896
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_933 = func_217_call()
call_934 = func_217_call()
var_942 = relay.var("var_942", dtype = "float32", shape = (15, 9, 13))#candidate|942|(15, 9, 13)|var|float32
bop_943 = relay.less(call_933.astype('bool'), var_942.astype('bool')) # shape=(15, 9, 13)
bop_946 = relay.less(call_934.astype('bool'), var_942.astype('bool')) # shape=(15, 9, 13)
func_895_call = mod.get_global_var('func_895')
func_896_call = mutated_mod.get_global_var('func_896')
call_948 = relay.TupleGetItem(func_895_call(), 0)
call_949 = relay.TupleGetItem(func_896_call(), 0)
bop_951 = relay.bitwise_xor(call_948.astype('int8'), relay.reshape(call_933.astype('int8'), relay.shape_of(call_948))) # shape=(1, 9, 13)
bop_954 = relay.bitwise_xor(call_949.astype('int8'), relay.reshape(call_934.astype('int8'), relay.shape_of(call_949))) # shape=(1, 9, 13)
uop_956 = relay.cos(bop_943.astype('float32')) # shape=(15, 9, 13)
uop_958 = relay.cos(bop_946.astype('float32')) # shape=(15, 9, 13)
func_816_call = mod.get_global_var('func_816')
func_819_call = mutated_mod.get_global_var('func_819')
const_960 = relay.const([6,-8,-6,8,-6,-4,9,-9,8,9,2,-10,5,-10,-5,-3,-8,-5,3,-8,8,9,8,6,2,7,-1,3,-7,1,9,-3,6,-1,-3,7,3,-9,-5,-6,2,-1,10,-9,6,-9,7,-3,-1,-3,5,6,-9,8,-9,1,8,4,-7,-7,4,-9,1,5,6,8,9,9,8,10,-2,9,-6,-9,8,7,5,3,7,10,6,-5,4,3,-1,-9,5,-4,3,-5,1,-2,-7,2,3,-7,2,5,10,-7,-10,-4,6,-7,1,-9,3,9,-6,-4,-5,-7,-7,-2,-10,-7,-5,5,-9,10,4,2,-1,-5,-2,-6,-2,-3,-7,3,5,-6,-1,4,3,1,5,3,4,1,-9,-4,-1,-9,5,-4,3,1,-2,5,-8,3,2,9,5,4,8,4,-9,6,6,2,-1,-3,-7,8,-7,-9,8,4,10,7,8,-5,-6,-10,-10,-2,-5,-2,5,10,-3,-2,-8,4,6,6,-7,-2,-2,5,-7,1,-4,-6,6,-3,-4,-10,3,10,7,7,7,-7,4,-8,-1,-2,-5,3,4,-10,1,3,-4,-5,-9,7,4,4,5,8,5,10,8,-1,9,3,3,-6,-8,-8,-5,-4,8,-8,2,-1,-6,6,4,10,-1,5,-6,-1,-4,-1,5,-10,5,-7,4,3,1,-5,9,8,8,-3,4,9,4,-9,-7,-3,-4,9,-10,-7,-4,-8,10,4,-1,2,-3,-3,1,8,-10,-8,1,2,2,6], dtype = "int8")#candidate|960|(288,)|const|int8
call_959 = relay.TupleGetItem(func_816_call(relay.reshape(const_960.astype('int8'), [6, 16, 3]), relay.reshape(const_960.astype('int8'), [6, 16, 3]), ), 0)
call_961 = relay.TupleGetItem(func_819_call(relay.reshape(const_960.astype('int8'), [6, 16, 3]), relay.reshape(const_960.astype('int8'), [6, 16, 3]), ), 0)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_962 = relay.TupleGetItem(func_499_call(), 0)
call_963 = relay.TupleGetItem(func_500_call(), 0)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_964 = relay.TupleGetItem(func_499_call(), 0)
call_965 = relay.TupleGetItem(func_500_call(), 0)
func_710_call = mod.get_global_var('func_710')
func_711_call = mutated_mod.get_global_var('func_711')
call_970 = func_710_call()
call_971 = func_710_call()
output = relay.Tuple([bop_951,uop_956,call_959,const_960,call_962,call_964,call_970,])
output2 = relay.Tuple([bop_954,uop_958,call_961,const_960,call_963,call_965,call_971,])
func_974 = relay.Function([var_942,], output)
mod['func_974'] = func_974
mod = relay.transform.InferType()(mod)
mutated_mod['func_974'] = func_974
mutated_mod = relay.transform.InferType()(mutated_mod)
var_975 = relay.var("var_975", dtype = "float32", shape = (15, 9, 13))#candidate|975|(15, 9, 13)|var|float32
func_974_call = mutated_mod.get_global_var('func_974')
call_976 = func_974_call(var_975)
output = call_976
func_977 = relay.Function([var_975], output)
mutated_mod['func_977'] = func_977
mutated_mod = relay.transform.InferType()(mutated_mod)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_979 = relay.TupleGetItem(func_499_call(), 0)
call_980 = relay.TupleGetItem(func_500_call(), 0)
uop_997 = relay.cos(call_979.astype('float32')) # shape=(1, 9, 13)
uop_999 = relay.cos(call_980.astype('float32')) # shape=(1, 9, 13)
func_486_call = mod.get_global_var('func_486')
func_488_call = mutated_mod.get_global_var('func_488')
const_1001 = relay.const([3.798705,2.050520,-9.112389,6.471763,-2.493197,-7.969155,7.636344,4.056795,8.510861,6.954108,7.484814,-3.571629,-2.428424,6.324655,-1.448739,-1.103906,9.069711,-2.492843,-0.714484,-0.764588,3.813882,-3.411343,3.655946,-4.774915,-2.995368,6.363802,1.699785,-5.649563,-5.057401,0.135727,8.209201,-3.849546,-4.240442,-2.199846,-2.934601,5.214636,3.025034,9.564472,9.491553,-4.253574,0.043472,1.677780,7.165378,-5.197262,5.171929,-9.350211,-1.788623,1.182741,9.133836,3.006097,-1.099227,0.846190,-1.373636,-3.078412,-1.100060,3.865402,-8.772356,1.242428,6.906254,9.494745,0.545865,4.634067,-5.615856,-9.703602,6.035823,-1.074502,4.121522,1.166214,-6.432696,5.227563,-6.023126,-7.536371,-4.795213,-0.165103,1.696332,-1.824282,5.119347,-6.798999,1.895301,-3.835399,1.656731,-4.171123,-1.309947,-4.443636,-2.374737,-6.045088,4.913456,2.120803,-7.478445,1.975342,-4.162161,-1.483066,4.166531,7.353057,-1.419164,4.640220,-8.849861,-7.655174,-1.381403,3.850008,-4.460246,8.722819,-1.410338,7.840840,9.328960,7.677116,8.437867,6.273696,-7.049214,0.917536,-3.975750,-0.956618,-9.397125,-0.009884,-7.271909,0.594626,4.697493,-7.951537,-9.879908,-2.326029,-0.826966,5.243217,9.805476,-6.230224,9.659980,-3.862020,9.156156,6.868095,3.720906,-2.263997,0.666629,2.162452,-5.679203,0.863805,9.089605,-9.617025,5.034685,5.845336,6.801249,-8.099762,9.151583,-9.764289,-5.173771,0.905720,8.062266,2.650079,5.096236,2.214394,-4.835848,-9.383367,-4.923119,4.921913,-3.251784,8.064337,-0.395197,3.877744,-1.412327,-2.393718,7.475663,1.865927,6.094376,8.960951,6.677223,2.264993,6.888594,6.058998,-1.359112,5.327190,-1.288112,-2.187933,9.722929,-1.712107,-9.110495,-4.174731,-1.152180,-0.850109,-2.968921,5.057806,1.565302,3.255826,-6.965744,-8.544312,0.710826,-2.928753,-8.480096,-5.494393,-0.735968,-7.366468,-2.495178,-9.142888,-1.724568,-3.342895,-9.621640,-7.363657,-7.422696,0.153056,-4.706533,-6.476563,3.630854,4.344110,5.967194,6.406798,4.030093,-2.633155,-1.165093,-2.408148,-2.045164,5.790842,-1.729433,-2.716129,9.068450,-3.258167,0.859387,0.960358,4.721730,5.755260,3.398498,-1.864105,-7.942940,-8.374754,1.479659,7.379840,5.570802,-7.128827,-5.349571,1.097395,-6.242459,2.819368,-1.541176,7.657493,-5.056670,-7.206772,8.173895,-1.241504,-1.785336,4.580475,2.046597,8.762040,0.094271,7.377968,-8.996089,-3.782590,-2.275025,-6.804250,-6.125476,-8.600028,-2.166240,-2.758391,5.729817,6.693582,3.152299,3.812769,6.064766,-0.118241,-4.709033,-9.114156,-0.713715,-1.934902,4.311045,2.094054,-2.095445,-5.705108,-0.449451,-6.404707,3.498061,6.020440,-9.861483,0.938025,0.548992,9.309315,8.982418,-3.002848,-0.103914,-2.467172,-9.785082,1.613753,6.835825,5.894894,9.453622,8.324361,-2.058050,1.626131,8.786201,-7.585281,-3.562501,7.137493,-1.747006,5.232180,-3.983902,-1.748976,6.730100,4.574636,7.316201,6.438561,-2.304986,3.101796,2.180991,-9.434779,6.099215,-5.985179,-1.444244,-5.842090,9.486422,6.950523,6.100395,-6.015209,0.662226,-8.050694,8.228126,1.861252,-5.480678,-7.503780,-9.502768,7.285550,2.192477,3.888332,5.648070,-2.654093,-6.707919,-7.616256,4.957080,-7.570446,-2.637533,0.883320,-7.783414,9.086672,4.085077,4.504770,-4.507834,-3.900933,-8.894190,3.879818,3.849214,-0.185488,8.199082,0.213094,-4.281065,-5.872479,-5.191148,-1.797452,-7.125625,-8.110051,5.613125,1.568997,-3.709165,2.730643,-0.493182,-8.689487,8.605424,1.943637,7.221139,2.338002,-2.142048,-7.814351,-3.388412,-0.674496,-2.675905,-5.876664,-3.568853,-1.236350,8.554461,3.496184,-7.388932,4.678462,-6.913515,0.241686,-4.376313,0.259606,-2.584172,2.681519,-6.537784,4.510036,-5.211018,-4.754786,-3.843427,0.934361,4.561312,9.570886,-6.865126,1.797450,2.909238,-3.215888,6.621168,-7.438772,5.263198,-5.105540,1.819084,8.589202,-7.196734,-8.377162,-2.853915,-0.722120,-0.318865,0.872136,4.232846,-7.846729,5.488672,-7.002366,-9.503875,-3.182809,-9.046810,-4.039654,7.767916,-2.512473,5.144566,-7.865993,-8.277970,0.722124,-6.475865,-0.199549,8.637294,-9.770338,8.468064,-8.094993,8.491138,-1.163400,5.377310,-4.643227,-1.170042,-0.901206,4.925425,5.783027,-5.060291,3.363424,4.887089,-6.219641,-8.418256,-9.159598,5.163184,9.646124,5.766116,-6.657512,-4.231810,1.845133,1.417754,9.665187,-1.701795,7.370472,8.726401,8.505896,-4.393933,-4.665282,-3.764675,-7.116584,2.533702,9.366312,4.502067,8.203171,-2.924505,-8.711253,0.568134,-0.805244,-8.485247,-5.894953,-2.382382,3.979248,2.513443,2.429435,-8.901106,5.738128,-8.198724,-2.419231,-3.444716,1.894390,6.760882,4.479485,6.213566,-0.792473,5.214008,-5.650554,9.131778,-0.201482,8.697113,-4.152958,1.997679,7.421807,-2.379498,-5.838709,4.055491,1.789709,1.867121,4.365167,5.400771,5.899113,-1.488280,-1.787917,3.458000,-8.780939,4.626809,-8.706064,-8.238132,-1.111246,0.985011,-7.878754,-2.778652,1.258325,-0.752987,2.705753,4.915322,-3.221008,-7.970266,3.548860,0.693731,-2.551539,-7.177185,3.668043,-5.081049,-5.861272,-8.596012,-4.263178,-8.210671,1.738254,9.822776,-4.985530,1.861443,-1.913630,-2.236769,6.611328,-6.566024,-1.705782,-1.155927,3.495069,0.459093,-8.719621,-3.057805,-8.369489,3.892178,7.639693,-4.372009,7.015478,-3.880725,8.367833,6.149545,-6.908293,-6.238890,-9.687634,0.108824,5.281571,5.575104,-5.730882,1.820890,5.045262,-5.965301,9.122780,-0.599548,-0.859435,-7.865332,0.074184,-1.285216,6.440625,-5.000718,4.615196,-7.111306,-0.900356,1.754751,1.478541,-2.527003,4.918386,-7.909629,9.169066,2.138824,9.716947,-1.801408,8.598027,2.028686,4.379845,-8.962633,7.447422,-0.103179,2.410544,-1.810798,-6.034206,7.045325,-8.137618,-5.520856,-3.185646,8.512203,8.383722,2.351417,5.827005,-8.999085,-9.876022,7.987213,1.878767,-4.355734,1.765589,9.946177,4.639152,1.099783,-3.910395,5.113956,0.166506,5.747862,-5.013526,6.078311,5.749597,8.710297,3.803622,2.098940,-1.381350,4.444092,-0.033124,6.015572,6.548442,7.713988,-2.016834,-2.265720,-6.383842,-9.989271,-5.976665,-7.497827,9.836642,-1.399569,-0.273715,7.253737,3.963481,9.208031,-1.643420,5.059102,7.709011,7.180006,9.899050,-8.748435,2.973049,5.920536,-7.556407,4.627150,0.232039,-9.369020,6.903119,-5.575648,-2.965020,4.108359,-9.963879,-5.334292,5.157024,2.804864,-1.423594,-6.779009,-0.524894,6.209790,8.627784,3.051490,-0.670983,9.301602,4.926461,-7.045376,5.051523,-2.770092,-7.478320,3.598137,9.221226,5.032348,-6.178265,1.904061,8.756506,-7.437532,-4.018046,5.718006,8.006626,-5.557887,-4.632402,5.884661,-2.430744,1.844366,-4.144073,6.432700,5.132701,9.396830,-3.522839,-3.909732,-8.371588,1.970056,-2.404899,9.746441,5.982011,4.397664,5.073086,4.892150,-5.712617,-4.056783,9.671070,-8.894648,-6.774743,2.118077,5.937894,-8.119130,-1.628265,-3.984396,-1.916277,-8.874060,4.073729,2.207966,-9.368843,0.537454,4.463486,-1.562402,2.325087,8.581371,-2.518837,-5.548790,5.433406,0.426577,-7.446405,-3.070276,-9.850860,-4.434091,-7.184026,-4.354519,-2.228603,-1.377273,4.630463,6.795642,4.100057,6.882566,4.512684,2.699127,-4.424914,-7.686577,-4.945671,-9.092153,3.894127,1.420391,-3.082560,7.936320,8.533908,1.544226,-9.317670,7.098393,5.169403,2.047990,-7.900378,4.841255,-9.530839,-9.906576,2.471938,6.149827,8.966346,-5.702592,-0.069734,8.855573,4.045023,-9.494617,5.025655,-0.089170,-9.473834,7.234606,-3.419571,-5.569592,-9.686209,-4.665557,9.304902,-2.715716,-6.990099,-5.111803,-8.233723,-1.068473,-9.281050,0.470655,-7.155825,1.609777,-6.221410,5.769159,9.013348,9.910986,-6.603283,4.681200,4.843085,6.430471,4.195454,-3.851469,8.158823,8.363444,2.857957,0.172069,-3.136506,8.037208,3.585118,-9.538461,-5.723413,-1.997381,6.820073,-7.269931,3.368255,-9.681948,6.849966,0.711010,0.403978,1.548452,6.324437,-4.337519,0.048537,-1.329392,-5.535675,7.094526,-0.903182,-0.730281,-4.525578,-3.383768,-4.924834,-2.607334,4.337762,-4.224943,-1.009407,-8.244230,-0.434088,-0.380695,-3.683646,-9.256421,6.774473,8.161086,7.357724,8.379927,-3.828936,9.770376,-0.846582,-2.234769,7.432715,-7.711769,-7.646546,-0.254315,6.728689,-0.113770,7.727982,-7.418510,0.726872,6.670186,3.984473,-8.236484,-5.088800,-9.782953,0.131328,5.460447,8.308245,-1.992636,-1.472430,-8.265251,5.121089,1.741832,0.984236,9.387191,7.804780,7.422408,7.774577,-7.796382,-6.721055,-5.643435,3.118253,-8.932305,9.329536,9.390519,7.947069,8.996626,-4.094875,-5.758983,4.758596,-7.553252,-2.599321,1.410034,4.317458,8.062369,4.690307,1.513820,7.727520,7.112803,3.517995,-8.996121,0.621423,7.942952,-6.570425,2.041205,-3.913097,-7.137727,-5.964886,-5.724301,3.476324,5.126332,-6.967290,-2.734449,-7.773968,-3.559869,-2.942290,4.946994,3.730034,4.972192,-4.748535,1.424391,2.078806,3.119660,4.138439,6.292866,5.813139,8.662874,-0.083716,-5.908588,-5.040733,-0.349339,6.421051,-2.621863,-9.433599,9.077786,-4.951309,0.734348,-5.766493,9.730754,2.217271,3.413955,6.044172,-8.949836,-4.390909,5.837034,7.023900,7.465331,1.006922,0.352390,0.262519,-1.429814,9.050248,9.430619,-5.685759,-0.476500,-7.728594,-4.467330,-3.229580,9.598500,6.719607,0.803820,-2.196709,-6.476705,-0.606415,7.196993,-6.745760,-8.958922,-2.056438,8.825786,-5.428558,-5.889644,9.701728,2.778815,3.569867,-0.273939,0.623919,3.293693,-0.435595,8.351976,-3.971329,9.865482,-9.892252,-8.190097,3.980959,9.851822,6.652052,-9.953591,-0.705662,6.758261,-2.222329,2.252233,7.577201,7.474586,-2.670594,1.255762,-2.038474,5.157586,-3.948755,8.354285,9.718882,3.968012,-7.040996,-7.975714,5.269063,-1.333896,7.786369,4.405943,-9.033285,2.657335,3.277140,3.805964,0.781424,-0.071351,7.176504,3.996050,-7.621005,7.215623,3.075571,-7.522552,2.863766,-4.134646,-9.003186,-7.483434,5.692415,1.387211,-8.090686,-9.757892,3.198630,0.901247,-7.883404,6.202079,8.809243,0.671240,-2.232623,-5.263629,-6.024670,0.170676,-4.697354,7.369750,4.865221,6.646526,-2.058136,6.568150,-8.789103,-6.940916,2.131789,-0.814751,-5.229157,7.630588,5.392968,6.141727,7.401188,-4.252750,-9.828811,7.535213,-9.464453,6.877204,-9.256874,-2.880671,2.819576,2.272811,-3.557842,0.662035,7.981970,-6.243940,-1.085562,-5.556075,-4.950789,-2.590048,-6.436906,-0.639590,-5.457977,8.502874,-7.077550,8.492665,-3.451339,-6.550133,-0.437776,-9.979497,4.365185,-0.283361,-4.160651,2.703517,9.970489,7.239974,6.612217,-3.271463,7.688563,-6.844124,5.438171,8.098033,-1.393420,6.544757,7.866612,-9.327848,-6.187571,1.911243,2.443143,4.727186,-0.351278,-4.684502,-8.193434,1.807285,8.183094,8.075329,3.869418,-4.980442,-0.264838,9.468836,0.850022,-3.346412,-1.261339,-4.472856,-3.474220,0.621509,-5.188893,-4.059487,-3.994733,-7.032483,7.292691,2.982524,-3.615733,-2.162859,5.240198,2.867096,2.848480,-9.822038,8.179182,3.555657,-2.913705,-4.034433,1.978306,3.525220,-4.844889,0.377862,2.473682,-8.611491,-6.232282,-1.029493,-6.240272,3.969037,-7.311075,-4.260938,-0.290586,8.316206,-0.933124,-9.591122,1.254896,1.266688,1.365381,4.402115,7.754286,3.424454,6.588729,6.603706,5.599958,3.392298,-5.368663,4.829061,-1.236248,6.778935,-0.383858,-3.139009,6.597357,0.544989,-9.656541,9.482612,-6.385102,6.404644,9.362341,-0.235155,7.136562,-2.114155,8.750501,7.234760,-0.487546,-6.151224,-2.652584,-4.396015,-4.471798,-7.450174,4.392354,8.437487,-9.360516,7.827062,4.985708,-9.259175,3.973469,2.916579,-0.527757,-8.995663,8.280344,0.326365,2.065969,-0.761281,0.855920,-5.838641,-9.017000,9.806932,4.367574,-5.831648,-3.389072,3.651691,7.083189,-3.789726,0.481533,4.143031,5.814625,-3.988783,-2.778084,-6.834514,-6.745770,-2.405855,-0.801268,4.428842,-9.491104,2.298774,2.091745,7.929760,9.133821,-0.708074,-0.859545,6.024218,8.621640,3.529658,-6.270006,5.557682,-7.996985,-6.996306,2.464463,-3.649439,4.524581,-3.409961,6.181526,-1.238557,3.499984,4.665442,-8.418298,0.777590,6.360880,7.691389,2.163068,-1.925170,0.507292,-8.122150,-0.718571,-5.983128,-2.019391,-0.753752,-7.290474,-5.293795,-1.190745,-8.574203,2.797937,-0.543984,-6.130964,-0.415241,-3.505051,0.212523,3.986005,4.080965,0.498717,-0.153657,-2.682503,6.205982,8.782674,2.037417,7.398646,-0.927462,6.997240,8.239244,-0.234287,9.403024,-7.591519,-3.334461,8.050691,-8.569719,-5.313148,-8.602719,3.631088,6.024999,-3.607616,-4.085674,-7.370825,-4.630263,4.268755,3.473802,2.317359,8.403130,-5.803731,-8.449692,9.895501,-0.385670,7.392145,-0.561690,-9.484680,8.607298,-6.132515,-7.726347,-1.722103,8.214953,3.842111,0.066665,6.126198,-6.957523,4.975989,4.311870,7.866495,-6.927478,2.829029,-5.145323,-5.151521,-0.484321,8.006953,-0.828483,0.546015,-9.531448,-7.780071,9.035294,-2.984086,2.693504,-3.102869,-8.884772,-7.322011,-6.242370,4.385588,3.489094,-2.813181,0.330701,5.771098,0.034530,1.283147,7.385566,-2.651026,5.387091,-1.043826,-2.102909,-8.881235,7.633653,9.760350,-8.978603,-4.839787,-5.738558,5.719491,-9.070073,5.713773,9.513929,5.809666,5.946985,0.325783,-1.145416,9.999510,6.664053,9.923483,5.857558,-2.527761,-2.644146,4.224751,-3.913957,-0.758822,2.841501,-2.345006,-8.620353,1.324169,6.601574,-4.729505,3.229977,-4.528674,2.185281,6.695796,-1.376678,-7.060389,-2.434597,-5.014608,-1.207090,6.554189,-6.620827,-1.846342,-2.037270,-2.420868,7.371235,5.533852,7.895558,2.274627,-3.815842,5.382390,-4.121714,9.667201,9.404092,4.939357,-0.812500,-5.887059,0.651420,6.422082,-9.420020,5.243657,-2.031604,-1.057042,5.715589,0.220441,-2.509917,-0.082876,-6.368867,8.435679,7.513964,-0.166799,-6.909791,2.299916,6.454580,5.344478,-4.680464,3.967855,1.299861,-4.890656,7.680187,-4.781432,-5.339145,0.354103,-7.714027,0.615404,8.188219,2.111009,-1.043778,4.986389,2.994674,3.460544,-4.977744,3.086949,1.462914,-1.577657,3.620809,-9.623716,7.909842,-9.995212,3.007447,-1.360984,2.812094,-1.470423,-5.078581,-0.973264,-2.232444,5.374501,-4.714576,-0.341532,7.866744,7.360742,-3.484483,-1.603830,6.746074,8.046420,-2.705887,5.740287,-4.345142,0.684367,-3.993551,-5.121933,-7.469254,7.580582,-3.290226,-2.183326,-7.852427,-5.075181,6.106114,-9.221426,-6.845483,7.112580,0.462973,-4.061488,-2.069646,-1.868363,0.852490,3.717357,0.234802,2.843617,3.401012,7.428817,1.044721,-5.329140,-5.655315,6.102157,-1.220326,-8.880900,2.015436,7.228329,-2.760038,-3.760367,8.395655,8.835315,-7.149632,-9.351861,-5.920770,1.480091,-6.064061,7.468849,4.089624,8.769853,6.113475,7.901790,-3.754278,9.664634,1.938583,9.507927,9.948053,4.745077,3.885870,8.895932,6.460312,2.626034,-6.469314,-4.910564,2.024497,-1.279709,8.875684,5.219176,-3.900771,9.298548,8.802010,-7.116569,3.250299,-5.243977,-5.649969,0.615739,5.044557,9.697730,8.858773,0.820230,2.627567,1.125013,6.498502,-5.917163,3.525596,1.472084,-6.418729,-1.964027,6.099078,-2.832228,-3.940657,1.166954,-2.252850,-1.695635,8.136504,-1.307849,4.957755,2.426837,3.661354,-1.060526,7.289094,2.619122,-8.822263,-8.370520,-6.735662,9.288202,-7.139920,-0.552663,8.378671], dtype = "float32")#candidate|1001|(1521,)|const|float32
call_1000 = relay.TupleGetItem(func_486_call(relay.reshape(const_1001.astype('float32'), [1521,])), 5)
call_1002 = relay.TupleGetItem(func_488_call(relay.reshape(const_1001.astype('float32'), [1521,])), 5)
const_1009 = relay.const([[[8.579827,-2.260101,-0.648791,6.095499,-2.856105,-5.674230,5.697513,3.747420,0.948727,-8.440170,5.544857,3.961753,8.177708],[-4.160457,-3.454357,5.882389,3.782726,6.576144,4.891060,-7.117006,-6.039257,2.752564,9.274702,-9.805571,7.431758,-5.498944],[-1.017029,0.769803,0.151581,-5.549763,0.563148,7.100718,-4.441297,-6.264395,-9.469470,7.751476,7.409121,-7.630049,8.516373],[-9.452059,0.288122,-8.950321,-6.055106,-5.292202,5.447034,5.056116,-1.086945,4.648577,-5.335803,3.556596,-5.914921,6.930694],[1.009579,8.353973,-5.044400,-9.163604,-7.510741,5.741266,-1.140159,0.062735,-1.511889,-6.506059,7.772072,4.649437,-4.897351],[-6.671110,9.120033,-1.025240,2.514654,-9.351724,8.025716,-6.086865,1.902931,-4.336854,3.079888,8.970567,1.849918,-3.301072],[4.164825,-8.470887,-0.364147,4.526634,-4.833378,3.208771,3.951279,4.723889,-9.697562,-7.752689,1.906363,1.180922,-4.554617],[-3.130903,-8.828329,1.208958,7.260346,9.689712,-0.323511,2.317383,8.999488,9.562171,-3.375819,8.648250,-9.294588,-1.274899],[1.772678,-2.801025,-3.258691,9.763422,9.460294,6.095244,-5.437346,0.204657,0.018162,1.918133,6.210159,5.629592,5.782233]],[[-1.528564,-5.836649,5.534446,-5.543900,-4.471468,-5.710683,1.005115,-9.462185,-8.541275,-4.410642,6.438188,8.214242,-6.113390],[4.298960,-0.362671,-2.488851,-0.447625,-7.500771,-6.638070,5.049960,9.669547,-4.060893,-1.139538,4.203688,0.962061,-6.705403],[6.369633,8.635973,-1.007676,3.774989,7.017939,9.155801,2.801245,2.783253,-3.928187,-2.637051,6.748795,-1.952015,6.794876],[-2.834994,2.787034,3.288238,-8.690161,-2.044949,-0.135141,-2.545470,-8.329255,8.760373,4.785505,5.942417,-9.911425,6.391773],[4.696700,5.483158,-9.827233,2.156023,-9.412707,-4.701228,-6.516959,3.577546,1.527742,-2.565753,6.204386,4.032660,1.661971],[-7.023680,-0.082562,6.810857,2.682116,-5.975116,-0.261304,-3.017560,-2.824160,-1.049570,4.301358,1.671091,0.939195,-6.362714],[-2.850194,0.235179,3.401746,5.763177,9.574222,5.121016,4.799115,-5.533123,6.779512,-7.343709,-5.584440,-3.482934,-4.388624],[-0.203838,-0.067050,-0.627822,-4.130167,-3.754746,9.020598,8.846884,-1.655795,9.910625,-6.368601,3.211366,-5.941980,2.208263],[-0.892043,0.121659,-3.705417,-1.370966,-4.704495,4.771537,-2.254995,-2.065394,9.803917,1.347858,-4.833296,2.704391,-6.517185]],[[3.920555,-3.732053,4.432232,-2.708444,2.626381,-8.862684,7.804069,-8.724493,1.492815,-2.918819,-4.486476,4.745401,8.067981],[-5.567596,-0.627010,-7.730806,-8.230923,2.500935,1.110872,-7.493909,-6.788643,1.261396,2.495260,-5.413293,-4.929749,3.038963],[-0.902453,-2.776319,-1.283220,-3.347581,-7.304431,-5.748560,8.195831,-7.144169,-7.235203,1.845502,-7.775329,-1.213368,-8.416065],[-0.165778,-0.653107,8.355074,3.864732,-8.826775,-0.314452,-2.433136,6.401927,3.199550,-6.028751,-4.016244,-9.975631,8.551620],[-4.292314,9.085210,-8.611989,9.838745,3.956856,1.913635,1.380492,-3.735720,-1.988278,-5.315557,-0.223571,-2.918937,9.302208],[9.734604,-8.615808,-9.582263,-3.063004,0.739112,-6.133676,5.505978,0.925494,-0.088742,5.987930,8.470137,7.309303,2.078270],[4.268281,1.012891,-3.046278,4.712652,3.943303,9.662855,4.718321,4.675009,-9.528611,1.778864,3.731380,-2.235236,-8.244741],[1.435609,2.679795,7.963466,-1.999933,8.441869,0.225755,-1.511387,3.414506,6.216584,-3.720909,-0.709051,5.680978,5.605117],[9.402941,0.550075,0.594753,5.526755,-7.897866,1.687533,5.159690,3.629090,6.214175,-6.626882,-2.551707,2.605857,-4.836459]],[[1.486525,8.317134,-2.509757,-6.522149,2.967342,-0.615005,-3.454929,4.216584,-3.968193,-1.649491,-4.269078,6.139426,-7.371453],[-6.464504,-9.717732,3.207390,-2.883252,-3.741565,3.813974,8.160993,-3.834124,-6.314352,-9.949056,9.429373,-8.293443,-9.526105],[3.501328,3.484396,0.105073,-2.722239,-2.245256,6.356536,-5.056323,-7.081459,-9.655577,-8.599007,5.040487,0.927109,7.082699],[-8.034314,6.707437,-0.870116,-9.603481,-9.048720,2.866939,-8.846593,3.855390,-7.736903,0.725466,8.007394,-3.365695,8.116951],[-8.509656,2.422766,6.080110,-1.304293,5.860590,8.405115,-3.240246,6.427662,-8.122415,-2.730901,-9.284112,-2.880645,8.729934],[2.813194,8.870792,4.274508,-4.514648,9.351150,1.781631,-4.232025,-1.188169,-7.281708,6.169384,-8.107076,5.626284,1.760986],[-5.427787,-2.584399,-2.843307,6.756198,-0.760045,9.486160,-0.062880,-1.889503,-5.645969,-1.622371,-6.636455,-5.107856,-8.412991],[-3.727558,1.703741,9.091403,4.155701,2.095480,-3.771363,2.609550,9.683271,8.883040,-8.012105,2.332312,-6.905840,3.534020],[2.314142,-8.639404,6.076627,3.402385,8.992281,-0.513398,-2.811507,-3.368913,-0.869269,7.123994,-2.720297,4.471034,-1.116878]],[[-5.158780,-4.685884,-5.132026,7.087730,-7.488532,3.036382,2.687063,-4.810540,0.633099,7.963455,7.489071,4.759154,9.914376],[5.042938,-9.022480,-3.391917,-7.467887,9.690358,-4.401219,-4.952950,0.431454,-6.402453,-3.798666,-3.574587,-9.016674,5.951943],[1.722366,-4.503496,-0.491508,-1.183432,-1.599447,5.763867,9.528892,2.520918,3.259136,-9.255276,0.809117,2.851735,-9.766108],[1.109313,0.384795,-7.396536,7.454632,-5.814918,4.833071,3.342655,8.430657,-7.369178,8.704556,-2.258895,6.047429,0.708219],[5.264025,-0.089579,-6.424923,-6.198078,-7.591331,-7.506649,-6.130117,-0.187953,8.287131,8.926008,-8.057260,-4.656382,9.248032],[1.575354,6.238107,8.132367,6.078063,-4.371735,8.565934,-3.209629,-6.667107,1.571282,0.768370,-6.461014,7.774391,0.168810],[8.461604,5.106972,-2.435406,-7.203647,4.194934,-4.122324,2.275769,-9.339865,-6.306455,0.353893,-0.132284,1.829011,-1.405510],[-7.651744,6.404726,1.035975,7.095555,9.069170,8.584747,-5.745023,4.572244,-6.441817,6.526064,9.156412,2.579152,-8.809285],[4.614241,4.461271,5.514390,-0.162303,6.939621,-5.985172,-5.602530,-3.616529,5.119721,8.657476,4.390318,2.477210,-2.717905]],[[-1.153496,9.475895,3.119689,-1.781551,-6.857875,4.367848,-8.147673,5.944486,3.480669,-5.340477,2.153858,-6.048905,-7.256609],[-3.182572,7.393020,-9.025025,-6.567075,-7.150361,5.366734,-6.948261,8.469641,-5.097862,-9.796399,-9.023251,8.287120,7.920394],[-1.118557,2.468963,-2.672147,-8.702954,3.888450,4.958595,4.776419,1.151953,0.615328,-9.129716,8.798236,-7.818915,-4.332937],[-0.994123,-8.514678,0.969648,6.498759,8.853141,-1.716230,5.876362,1.525168,-1.916113,0.033854,0.165605,9.420769,2.834006],[-6.164279,9.778264,-7.189120,-3.157804,3.292444,2.182836,8.985123,-8.337283,-1.174926,5.144698,2.629712,-7.613241,2.741076],[3.548758,-9.709774,-4.589759,-9.574878,6.150157,7.586115,0.092050,7.527617,0.517156,-0.620267,7.470766,-6.644180,-2.939785],[-7.200154,-5.969949,-1.696796,-6.808053,-5.843948,1.358635,-9.549365,5.479792,-3.815297,6.673365,1.124805,-3.144262,-2.505976],[-4.199564,-3.077228,-7.523380,-2.359779,3.082024,-9.537020,1.335265,-2.902617,-2.476597,5.537304,-4.185272,-5.695000,-5.520302],[-0.035789,3.596577,-0.106531,7.922630,-1.757670,3.222322,-7.430013,1.960460,-2.067220,3.433386,9.202057,-4.223867,1.613397]],[[7.310840,-7.108598,1.707752,-5.143069,0.710997,3.762882,-2.138451,7.610822,-5.073467,-3.591979,-7.677133,-1.909965,8.751063],[8.250519,-4.577824,-8.719669,6.279677,2.047078,1.844502,2.648047,-8.604067,-0.248979,4.558289,-8.225723,5.059916,4.155322],[-4.785606,-2.444340,-8.782237,1.440790,-3.251382,-2.594252,-9.327336,3.152525,4.931860,-5.726640,5.410872,-5.669890,-8.681599],[-6.151158,0.907301,-7.358189,2.837972,0.364654,-3.612024,-2.138342,-3.207015,-5.879569,0.076026,3.298210,8.151990,-7.510005],[-3.209013,5.561341,-6.141188,-9.959122,0.122460,0.490572,3.441061,-9.034653,3.320714,7.636299,9.561963,-2.123932,8.982059],[-9.587294,7.854577,5.013149,8.911480,0.042993,-4.123297,-6.886300,-0.328918,-1.941461,-4.852182,9.217480,5.440647,-4.191040],[8.350962,2.715819,-1.225378,3.723689,5.322000,2.818687,0.887786,-0.076113,-5.739495,6.564574,-1.433949,5.714385,4.323719],[-2.790497,9.762234,9.877845,1.500870,1.163478,-0.247987,1.000798,6.968139,0.581958,2.157893,-4.965182,-7.267526,-6.799379],[7.439135,5.466686,7.800622,8.994813,-6.912239,8.087919,-9.679729,9.184887,5.183332,-2.657462,7.294387,7.097526,0.908114]],[[5.107373,0.575956,-8.012177,4.093079,4.992300,7.222940,2.784143,-4.472789,9.521493,7.826481,9.377873,4.041529,8.220114],[2.834774,-6.168662,-0.266383,-5.236490,7.333889,-3.684462,5.143054,5.235734,-7.734313,-6.450173,8.176210,0.529875,3.958730],[5.826292,-2.384649,9.605214,2.916364,-9.555375,6.210717,-9.275613,5.130116,8.810449,-3.847506,9.306202,5.958948,8.534683],[6.983659,5.859935,-4.833813,-6.613593,1.375201,-6.837314,8.720408,-2.480499,-4.282692,7.892640,8.060776,-7.303009,-4.000973],[0.963004,9.445905,-3.134239,2.588241,9.789032,4.630549,7.110958,-4.302154,4.389378,-3.939728,-6.595888,-5.464143,6.690915],[0.296968,-7.778397,2.274839,0.172117,-5.172578,-6.641185,-4.498357,4.533860,6.841202,-1.435802,5.156596,8.365621,-7.082114],[-9.428338,1.671858,-6.566101,4.529448,-5.339985,-5.718163,5.407401,-8.749962,8.703832,-7.838411,-9.483861,6.923031,3.173763],[-7.165563,-3.707083,-5.153812,-4.594296,-0.307572,-5.323964,9.917107,0.580105,4.860853,-7.511533,-0.085691,-5.891482,8.153157],[-6.089694,1.630787,2.384444,-3.602656,-7.333381,-5.465206,-1.404357,-2.315389,-8.079805,-5.402802,5.637997,-2.973030,1.846546]],[[4.500233,3.387005,-7.074625,4.853420,5.312785,2.123407,4.055570,2.562324,-0.619509,-4.356836,-6.553495,-2.730593,-9.831688],[-0.603733,-5.375991,7.040985,6.974624,-2.990576,-0.920320,-0.190132,-6.925398,1.770318,0.628039,6.863326,1.835804,-6.512406],[-0.487637,-2.432788,5.399028,7.362482,-4.281490,6.589510,-3.970958,7.510083,-6.514251,-6.915108,2.938734,-3.139313,-5.736004],[6.805715,7.792036,-9.126008,-3.924694,3.766042,0.440100,8.034771,6.024002,-5.828860,-7.799243,6.141651,9.316913,2.202254],[5.421449,6.775214,1.121904,9.013184,3.741495,-2.755964,-9.024143,4.462619,7.068433,2.141173,6.145578,-4.138833,3.273634],[-4.230596,7.480327,-1.937117,8.924191,1.033666,-9.322962,-9.615696,-4.332393,0.449983,-2.731809,-0.872677,-4.933071,-5.990175],[1.369399,3.387203,-3.499266,8.928883,-2.914553,4.938014,-7.568711,-7.011264,8.156138,-1.235722,-8.034905,6.921575,-9.788665],[-4.923158,6.313132,-8.763122,4.231576,-8.668084,-8.414567,8.924933,5.567243,-0.510984,8.153474,-1.547158,6.981917,-8.314498],[-6.108809,-6.644610,-2.969897,8.177084,-1.571225,-4.288201,-4.593777,1.051321,8.804230,7.452377,4.789555,-5.709969,-4.213978]],[[-3.079090,7.291793,9.142005,-6.316295,-0.596614,-4.842615,-3.730425,1.069073,-0.551145,5.320578,-2.398847,2.807758,2.319211],[-3.825123,7.669430,-6.844201,-1.430697,2.524408,-3.188795,-4.182671,-4.311538,-4.781734,9.750848,3.508938,0.996217,7.919875],[3.572938,5.714732,-0.420959,-9.456160,8.686732,3.813944,-7.428263,8.023920,-6.745132,7.449422,4.084572,1.676105,-8.213009],[-3.037551,-9.018547,4.046610,-7.069595,-3.456470,-7.286389,7.613564,-1.816477,-1.329007,6.421445,4.822569,1.655071,-1.905463],[-2.173183,5.156462,-5.657871,9.099700,6.239323,3.436739,6.895992,-3.244584,-8.489698,5.919342,-2.779625,-1.369486,-0.972243],[9.785824,-6.121272,-9.184493,-3.958421,1.870038,1.113182,7.010734,-4.777330,6.665175,-1.876955,1.534741,6.982149,8.100332],[-1.649674,3.862192,8.358040,-4.754096,-9.835266,0.430772,-8.787578,6.912559,4.876232,0.695167,3.199743,7.012859,-8.526292],[7.991049,-3.111845,-3.944109,-6.117388,8.950696,-7.903073,1.817980,-4.416465,7.323810,-0.339961,-5.123090,8.377746,8.309462],[-8.017267,8.616035,1.255522,-8.760684,8.929353,9.496761,-2.648289,-9.953244,-6.674227,1.257894,-9.931150,-7.895059,-9.149080]],[[-8.967807,-5.175749,-8.235577,-7.190260,5.068803,-1.478578,3.470100,-6.169479,9.410488,2.100200,-2.591987,-7.486345,-0.832516],[-8.910433,0.015691,-2.085776,6.501331,4.669312,5.548573,1.505816,1.321914,8.111071,8.408781,2.721472,-2.675335,-3.402697],[2.742922,7.696853,3.803098,-8.497528,-1.906925,-0.754130,6.677180,7.498158,-9.237679,5.673574,4.224668,-6.337185,1.353200],[4.545749,7.801577,-3.094176,-9.123982,-1.559334,8.984529,-2.925503,8.715825,7.323690,-2.343107,-4.333594,2.377585,6.145145],[-8.578984,-9.686075,1.341399,8.434236,1.003675,7.644290,7.160362,-9.190200,-0.545100,-6.049612,0.663040,-0.646223,9.660512],[-5.249169,7.112739,4.804908,-6.214505,4.480745,3.196782,-1.527148,-4.390866,4.181191,5.583731,-2.170286,-1.347252,-4.626054],[2.552709,-3.133063,8.451771,4.378729,-9.064063,-0.304861,-6.908617,-2.812803,-0.195617,9.436465,8.561789,1.985497,-8.327874],[-7.072062,-9.657183,-8.734010,-1.024615,-1.609461,-3.650871,-3.184137,-2.590054,8.348476,-7.165300,3.155069,-4.040586,8.192416],[2.410048,-2.288334,-0.482740,-7.800276,0.020332,-7.442872,6.339832,1.006613,7.345411,-9.020598,-8.768630,-8.637569,-3.519179]]], dtype = "float32")#candidate|1009|(11, 9, 13)|const|float32
bop_1010 = relay.bitwise_and(uop_997.astype('uint32'), const_1009.astype('uint32')) # shape=(11, 9, 13)
bop_1013 = relay.bitwise_and(uop_999.astype('uint32'), const_1009.astype('uint32')) # shape=(11, 9, 13)
var_1021 = relay.var("var_1021", dtype = "float32", shape = (1521,))#candidate|1021|(1521,)|var|float32
bop_1022 = relay.bitwise_or(call_1000.astype('uint32'), relay.reshape(var_1021.astype('uint32'), relay.shape_of(call_1000))) # shape=(1521,)
bop_1025 = relay.bitwise_or(call_1002.astype('uint32'), relay.reshape(var_1021.astype('uint32'), relay.shape_of(call_1002))) # shape=(1521,)
uop_1031 = relay.log10(bop_1010.astype('float64')) # shape=(11, 9, 13)
uop_1033 = relay.log10(bop_1013.astype('float64')) # shape=(11, 9, 13)
output = relay.Tuple([const_1001,bop_1022,uop_1031,])
output2 = relay.Tuple([const_1001,bop_1025,uop_1033,])
func_1036 = relay.Function([var_1021,], output)
mod['func_1036'] = func_1036
mod = relay.transform.InferType()(mod)
mutated_mod['func_1036'] = func_1036
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1037 = relay.var("var_1037", dtype = "float32", shape = (1521,))#candidate|1037|(1521,)|var|float32
func_1036_call = mutated_mod.get_global_var('func_1036')
call_1038 = func_1036_call(var_1037)
output = call_1038
func_1039 = relay.Function([var_1037], output)
mutated_mod['func_1039'] = func_1039
mutated_mod = relay.transform.InferType()(mutated_mod)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_1101 = relay.TupleGetItem(func_499_call(), 1)
call_1102 = relay.TupleGetItem(func_500_call(), 1)
output = relay.Tuple([call_1101,])
output2 = relay.Tuple([call_1102,])
func_1106 = relay.Function([], output)
mod['func_1106'] = func_1106
mod = relay.transform.InferType()(mod)
mutated_mod['func_1106'] = func_1106
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1106_call = mutated_mod.get_global_var('func_1106')
call_1107 = func_1106_call()
output = call_1107
func_1108 = relay.Function([], output)
mutated_mod['func_1108'] = func_1108
mutated_mod = relay.transform.InferType()(mutated_mod)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_1161 = relay.TupleGetItem(func_499_call(), 0)
call_1162 = relay.TupleGetItem(func_500_call(), 0)
func_793_call = mod.get_global_var('func_793')
func_794_call = mutated_mod.get_global_var('func_794')
call_1167 = relay.TupleGetItem(func_793_call(), 2)
call_1168 = relay.TupleGetItem(func_794_call(), 2)
bop_1169 = relay.mod(call_1167.astype('float32'), relay.reshape(call_1161.astype('float32'), relay.shape_of(call_1167))) # shape=(1, 9, 13)
bop_1172 = relay.mod(call_1168.astype('float32'), relay.reshape(call_1162.astype('float32'), relay.shape_of(call_1168))) # shape=(1, 9, 13)
bop_1175 = relay.floor_mod(call_1167.astype('float32'), relay.reshape(bop_1169.astype('float32'), relay.shape_of(call_1167))) # shape=(1, 9, 13)
bop_1178 = relay.floor_mod(call_1168.astype('float32'), relay.reshape(bop_1172.astype('float32'), relay.shape_of(call_1168))) # shape=(1, 9, 13)
func_895_call = mod.get_global_var('func_895')
func_896_call = mutated_mod.get_global_var('func_896')
call_1181 = relay.TupleGetItem(func_895_call(), 0)
call_1182 = relay.TupleGetItem(func_896_call(), 0)
bop_1199 = relay.not_equal(call_1161.astype('bool'), relay.reshape(bop_1175.astype('bool'), relay.shape_of(call_1161))) # shape=(1, 9, 13)
bop_1202 = relay.not_equal(call_1162.astype('bool'), relay.reshape(bop_1178.astype('bool'), relay.shape_of(call_1162))) # shape=(1, 9, 13)
bop_1204 = relay.right_shift(bop_1169.astype('uint32'), relay.reshape(call_1181.astype('uint32'), relay.shape_of(bop_1169))) # shape=(1, 9, 13)
bop_1207 = relay.right_shift(bop_1172.astype('uint32'), relay.reshape(call_1182.astype('uint32'), relay.shape_of(bop_1172))) # shape=(1, 9, 13)
var_1217 = relay.var("var_1217", dtype = "uint32", shape = (12, 9, 13))#candidate|1217|(12, 9, 13)|var|uint32
bop_1218 = relay.maximum(bop_1204.astype('int32'), var_1217.astype('int32')) # shape=(12, 9, 13)
bop_1221 = relay.maximum(bop_1207.astype('int32'), var_1217.astype('int32')) # shape=(12, 9, 13)
func_486_call = mod.get_global_var('func_486')
func_488_call = mutated_mod.get_global_var('func_488')
var_1225 = relay.var("var_1225", dtype = "float32", shape = (1, 1521))#candidate|1225|(1, 1521)|var|float32
call_1224 = relay.TupleGetItem(func_486_call(relay.reshape(var_1225.astype('float32'), [1521,])), 3)
call_1226 = relay.TupleGetItem(func_488_call(relay.reshape(var_1225.astype('float32'), [1521,])), 3)
func_742_call = mod.get_global_var('func_742')
func_744_call = mutated_mod.get_global_var('func_744')
call_1231 = func_742_call()
call_1232 = func_742_call()
var_1238 = relay.var("var_1238", dtype = "int8", shape = (2496,))#candidate|1238|(2496,)|var|int8
bop_1239 = relay.less(call_1224.astype('bool'), relay.reshape(var_1238.astype('bool'), relay.shape_of(call_1224))) # shape=(2496,)
bop_1242 = relay.less(call_1226.astype('bool'), relay.reshape(var_1238.astype('bool'), relay.shape_of(call_1226))) # shape=(2496,)
func_1036_call = mod.get_global_var('func_1036')
func_1039_call = mutated_mod.get_global_var('func_1039')
call_1244 = relay.TupleGetItem(func_1036_call(relay.reshape(var_1225.astype('float32'), [1521,])), 2)
call_1245 = relay.TupleGetItem(func_1039_call(relay.reshape(var_1225.astype('float32'), [1521,])), 2)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_1246 = relay.TupleGetItem(func_499_call(), 1)
call_1247 = relay.TupleGetItem(func_500_call(), 1)
uop_1269 = relay.atanh(var_1217.astype('float64')) # shape=(12, 9, 13)
bop_1272 = relay.minimum(uop_1269.astype('int64'), bop_1204.astype('int64')) # shape=(12, 9, 13)
bop_1275 = relay.minimum(uop_1269.astype('int64'), bop_1207.astype('int64')) # shape=(12, 9, 13)
output = relay.Tuple([bop_1199,bop_1218,var_1225,call_1231,bop_1239,call_1244,call_1246,bop_1272,])
output2 = relay.Tuple([bop_1202,bop_1221,var_1225,call_1232,bop_1242,call_1245,call_1247,bop_1275,])
func_1277 = relay.Function([var_1217,var_1225,var_1238,], output)
mod['func_1277'] = func_1277
mod = relay.transform.InferType()(mod)
mutated_mod['func_1277'] = func_1277
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1277_call = mutated_mod.get_global_var('func_1277')
var_1279 = relay.var("var_1279", dtype = "uint32", shape = (12, 9, 13))#candidate|1279|(12, 9, 13)|var|uint32
var_1280 = relay.var("var_1280", dtype = "float32", shape = (1, 1521))#candidate|1280|(1, 1521)|var|float32
var_1281 = relay.var("var_1281", dtype = "int8", shape = (2496,))#candidate|1281|(2496,)|var|int8
call_1278 = func_1277_call(var_1279,var_1280,var_1281,)
output = call_1278
func_1282 = relay.Function([var_1279,var_1280,var_1281,], output)
mutated_mod['func_1282'] = func_1282
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1106_call = mod.get_global_var('func_1106')
func_1108_call = mutated_mod.get_global_var('func_1108')
call_1287 = relay.TupleGetItem(func_1106_call(), 0)
call_1288 = relay.TupleGetItem(func_1108_call(), 0)
output = call_1287
output2 = call_1288
func_1290 = relay.Function([], output)
mod['func_1290'] = func_1290
mod = relay.transform.InferType()(mod)
output = func_1290()
func_1291 = relay.Function([], output)
mutated_mod['func_1291'] = func_1291
mutated_mod = relay.transform.InferType()(mutated_mod)
func_710_call = mod.get_global_var('func_710')
func_711_call = mutated_mod.get_global_var('func_711')
call_1320 = func_710_call()
call_1321 = func_710_call()
func_438_call = mod.get_global_var('func_438')
func_441_call = mutated_mod.get_global_var('func_441')
const_1325 = relay.const(-6, dtype = "int8")#candidate|1325|()|const|int8
const_1326 = relay.const([-1,-5,-3,-7,-8,9,-10,2,3,-4,-5,9,3,-5,8,-3,7,6,-2,-10,-7,-10,-10,-10,2,-1,4,-10,-5,-6,-6,-1,-9,-2,1,5,1,-4,-8,3,10,-6,5,3,-10,2,-2,-1,-2,-3,-5,1,-4,8,-1,1,-6,-8,-2,8,2,1,4,4,-5,9,5,-7,-4,10,-7,-7,-9,-3,-7,-6,2,2,7,2,-3,3,8,9,-4,-7,2,-3,8,6,6,6,-7,-4,6,-8,6,9,3,3,-8,10,4,-3,-9,10,10,5,-6,-4,4,1,5,-3,-7,8,7,-5,1,-5,-8,-8,-5,-4,2,1,-1,-8,-2,7,-7,5,2,7,2,4,1,6,4,4,9,-6,10,9,2,1,8,5,10,3,-8,-1,10,-4,9,-2,7,-9,1,7,1,-5,8,10,6,9,4,-2,7,-1,-5,-5,3,9,1,9,6,4,6,1,9,5,-1,-10,-4,-5,3,1,-5,10,-6,9,-5,-5,6,2,-9,-3,-3,-1,1,5,-7,2,9,-5,2,-7,6,7,-2,-1,5,1,4,-4,7,1,-8,-3,6,1,3,-7,4,5,1,6,10,6,1,-1,1,-2,6,5,-7,-3,8,3,2,-9,2,10,5,7,8,-6,-9,-8,-8,-10,1,7,-3,-3,-8,9,10,-3,-9,-2,-6,4,9,-4,-4,3,-8,-9,1,-8,-6,1,10,2,-4,-4,5,8,9,2,-8,1,5,7,-3,7,3,5,3,3,-4,-10,7,4,1,1,10,5,3,-3,8,6,-9,-9,10,2,10,-4,9,5,3,9,-8,-9,8,-7,-4,-2,-4,7,-2,8,8,-9,8,-9,7,-4,-4,-8,-7,-1,-6,3,-3,-3,-7,6,-1,-4,-8,1,3,-4,10,-1,7,-5,-6,-4,-9,3,6,-3,6,-7,10,-4,3,10,-10,-10,3,-9,-6,-10,-7,-2,4,-3,1,-7,-10,-4,8,8,-4,-4,-4,8,5,-6,10,-9,-1,7,2,3,-6,7,-10,2,3,-3,-9,8,6,8,10,-2,-10,5,4,6,-6,4,5,-9,1,5,2,6,7,-6,3,-10,-7,-7,-4,1,-3,5,10,-8,8,3,-7,8,6,3,-1,4,-7,-1,3,10,-6,6,10,6,-7,8,9,10,-9,5,-5,2,-10,-4,4,9,-8,5,-8,6,2,-9,-9,8,-9,9,-2,7,-3,-2,-4,8,-5,10,6,7,9,10,-5,5,1,-8,-5,4,-6,5,-9,-10,6,8,-7,9,-2,-1,5,-1,-9,1,5,-10,-4,-9,-7,-9,-2,-4,-5,4,-10,-6,-10,-3,-7,-3,-10,3,9,8,4,1,-4,4,10,7,-2,6,10,-3,6,1,-10,-1,-8,-8,-4,-8,-6,10,-10,-7,-9,-6,-4,8,-4,7,3,6,-5,-4,3,-9,-4,-6,-5,-7,-8,5,-2,4,-4,-4,9,8,2,2,4,8,-10,4,-9,-2,-6,9,-4,7,-3,6,-1,-5,8,2,-1,-2,5,8,9,-1,1,-4,-4,-2,2,-9,2,-7,3,2,10,-5,-2,-10,-5,7,-2,10,3,-5,9,1,-9,-2,8,4,-10,2,4,-6,-3,-4,5,3,5,7,1,7,-6,10,-3,-1,-5,-8,3,9,-6,-2,-8,-10,-10,-9,7,-9,-3,7,5,-2,9,9,-3,-9,-3,1,-6,4,-10,-7,7,9,6,9,-2,-10,-2,-4,-9,-5,3,-2,8,5,9,6,7,-9,1,-4,10,3,-5,8,-9,-6,10,1,6,-8,9,4,-9,-1,-4,1,-9,7,-1,-9,7,-5,7,-4,4,-9,-6,-1,9,-3,-6,-6,-1,10,9,4,-7,2,-5,-7,10,5,3,9,7,5,-8,-8,-6,-1,-8,-1,-4,-8,-3,1,3,9,2,-7,2,2,-5,-9,9,-5,6,3,-3,2,-6,-9,-9,-2,-6,9,1,8,-2,-8,-6,9,1,4,2,9,-9,6,7,-10,-7,3,-10,5,-5,-4,-5,4,6,-9,-4,-8,-9,10,4,-8,-8,-10,-1,2,-9,-8,-3,2,8,2,2,-4,6,-4,5,1,5,4,10,2,6,4,2,-1,-7,-4,-2,-7,-4,9,5,3,-3,7,-4,-3,-9,-10,-2,3,3,-10,6,3,10,-9,2,-6,8,-10,-2,-3,-1,2,-5,5,-10,2,2,-6,-9,-9,7,-8,9,-7,3,2,4,-9,8,-6,-9,-6,8,-5,-9,8,10,-10,5,1,-9,4,-6,-4,-5,5,-3,-8,5,7,-10,9,-4,10,-6,9,-4,1,-4,-6,-7,6,4,-10,9,-2,-4,-8,7,8,-9,-1,2,4,-6,6,3,-3,5,-5,-3,-3,9,-5,-1,2,-2,4,-4,9,-1,3,-6,-3,2,-7,-7,9,-4,-4,9,-5,-8,4,-9,2,-7,-6,-3,-6,-8,-7,-5,-3,-1,4,-3,-1,-9,-5,-8,-10,1,-10,8,-7,-10,3,3,6,3,5,10,8,-1,-10,9,-3,-10,5,8,-2,8,-8,3,6,6,3,7,9,-4,6,1,-4,-4,-6,-2,-3,-6,-3,4,7,1,8,-1,8,6,-1,-5,5,-5,-2,-1,-1,-5,-8,-6,-9,-4,6,5,-3,8,-5,8,-10,3,1,-6,-1,-7,-10,-3,-9,-9,2,-9,-3,6,7,10,-6,1,6,-10,-8,7,7,10,-7,-2,-3,4,7,-5,-6,4,-9,1,-2,-6,5,10,-5,9,1,3,-10,9,-8,4,3,-6,-4,-10,6,-7,-1,-3,9,-2,-3,4,3,3,-10,-3,-6,5,-6,6,-5,4,-2,-4,-1,3,3,-7,1,-8,-8,5,-2,4,7,1,-5,-8,4,-9,-10,8,10,-10,7,3,8,1,-6,7,7,7,-3,-10,-9,-1,-1,-2,6,1,9,1,2,7,-1,3,-4,-1,-7,5,1,-5,-5,-3,-1,6,-10,9,-3,10,-1,-3,5,-4,-4,-8,-3,7,-4,-2,-9,-6,7,1,-2,-5,7,-9,-1,-7,-10,-2,-10,4,1,10,4,1,1,-3,-4,-7,-6,5,1,-2,7,-5,-5,10,5,-8,-5,-2,10,1,-4,8,9,7,5,1,5,8,7,8,9,-2,-6,3,2,1,-4,-5,-2,1,4,-9,9,1,-7,-9,6,1,8,7,9,7,8,-6,-6,8,-10,1,4,5,-4,8,-6,1,4,-5,9,-6,-3,7,-9,1,10,9,5,-5,-6,8,-1,-7,10,-6,1,-6,-4,6,-8,5,9,1,-7,3,-9,-7,-2,5,-6,1,-5,-4,9,-4,-8,-2,4,3,2,-5,6,1,-8,-10,-9,2,7,5,-7,-3,-10,2,-10,3,10,5,4,6,4,6,10,-7,5,2,-1,-9,-2,2,5,-6,-7,-2,8,-1,-7,-4,-7,3,3,6,-2,6,5,8,5,-4,6,1,6,-4,1,10,-3,1,-10,-1,-3,6,4,7,-7,-4,-9,-7,-7,9,-3,7,4,1,5,4,-8,6,-4,5,-4,-4,-2,-9,4,-10,-7,-10,-2,-4,-2,7,-1,-5,-5,-8,-7,-3,5,-1,-10,-5,-5,7,-7,-8,-1,2,9,-9,-6,-5,-1,-6,-10,9,-6,-6,-1,-2,-8,-9,7,-3,7,-1,10,9,-6,-2,-10,6,-5,-10,-9,-5,3,6,-5,6,-2,6,3,-7,-10,5,2,-7,6,-3,10,-2,4,-2,-8,3,-5,3,-4,-7,1,-4,3,-10,-7,-4,3,-9,-5,-7,3,-2,-9,-6,-7,-7,5,1,-5,7,-4,-10,-8,-5,3,-5,-10,-3,-3,-1,-4,-1,2,-8,-3,-8,7,-5,8,-9,9,-5,4,7,-9,-10,-7,-3,-4,-7,-6,-5,4,10,-9,-10,5,-7,-3,6,3,6,-8,-2,-10,9,-5,-10,4,8,9,2,-3,-4,-5,10,-8,-1,-7,-7,1,2,-10,-4,2,-8,2,-8,-10,3,5,-5,-10,-1,9,-6,6,8,-2,-10,4,7,9,1,10,-7,5,-9,-2,6,8,4,9,10,2,-6,-10,-2,-10,10,-5,6,3,-7,-4,6,4,-6,2,4,5,-10,-5,-6,5,7,-5,2,-6,10,-3,-6,6,9,9,2,3,1,-6,5,2,-1,-4,-4,-3,2,3,-10,1,5,-3,4,-10,-6,-3,-8,-2,4,4,-6,-4,-1,-8,6,-2,-9,-9,-1,-9,5,-7,-7,-4,4,-8,-4,-1,-9,-8,10,5,3,2,3,2,-3,3,-9,-8,-4,5,9,3,-7,-3,8,-6,-2,-6,2,-4,-8,-3,-5,-2,-9,7,7,6,-2,2,-6,3,-1,-6,-9,-7,9,-6,3,5,8,-10,3,-8,-4,5,1,10,8,-2,-8,6,1,2,-1,-7,-9,4,4,9,2,-10,3,-4,7,10,7,3,-9,5,3,10,1,-6,-8,5,-8,-5,-4,-1,-5,6,-6,-3,5,-8,-1,10,2,7,10,2,-6,6,5,2,-8,-3,9,-1,5,-3,-8,8,-1,-2,8,1,-10,-3,4,-5,6,-9,6,-1,7,-7,9,7,-2,-2,-2,2,10,6,-3,-8,-1,-3,-7,9,-8,-1,4,8,-6,4,-5,-1,-4,-3,-8,-5,10,-7,10,-2,-2,7,2,2,8,-7,6,2,-5,-6,-7,-3,9,-3,5,9,-8,-7,-2,8,7,-6,5,3,-2,4,-2,-6,6,1,-5,-3,5,-3,9,10,9,8,-4,4,4,5,5,-6,-3,4,-5,2,7,10,9,3,-4,3,-6,3,-5,3,-2,-8,-5,-2,1,4,-1,5,2,9,-3,-3,-9,6,-5,-1,9,1,-4,-6,-6,5,5,-7,-2,-3,9,1,-2,-2,-7,5,4,1,8,-5,10,-4,-3,-3,9,9,4,8,8,-5,4,-2,6,10,-3,-10,6,9,7,4,8,4,3,1,5,-6,-6,9,2,-7,6,-5,3,2,5,-6,7,-6,3,2,3,-6,6,4,7,-2,-1,5,-2,4,5,10,-9,4,6,-1,-4,2,4,-10,7,6,-9,-4,2,-8,-9,8,-9,-1,8,5,-10,-6,3,9,-7,10,8,9,-5,6,9,1,6,-2,5,-8,6,-1,-9,-1,-5,-4,-6,-2,2,-4,-2,9,-8,-2,-10,-7,-4,5,9,2,6,7,-1,-4,9,-5,2,10,-5,-2,5,-1,-8,-4,2,-10,-10,-2,-8,-5,4,-7,-4,-8,-1,3,-10,5,-3,-6,3,-3,3,-5,4,7,9,-6,-2,1,-5,-9,3,4,3,8,3,10,-9,-6,-6,-10,-8,-10,-3,4,-9,2,7,5,3,5,-7,6,1,-6,5,-5,-4,-5,-8,-4,2,-7,1,8,-7,2,1,7,-9,10,-1,-1,2,4,3,-6,-4,-5,-7,9,-9,8,-10,-1,-10,-5,7,-9,-1,8,-1,-10,-9,9,1,2,10,7,6,9,10,10,1,8,-2,-8,3,9,-5,2,8,-6,-5,-8,-3,-9,-2,-4,-6,-7,-1,3,-4,-9,-1,-7,-4,-7,7,2,-4,-5,-9,1,1,6,-4,-7,-1,9,7,3,10,2,7,7,4,8,-1,9,-9,-6,-5,-3,-1,-10,-10,-2,7,6,-8,5,-5,3,4,-7,-8,5,-6,-10,1,-5,-5,1,-1,-5,-2,-10,5,-10,-7,3,-10,1,-7,10,2,-8,2,-10,8,9,8,-6,5,6,-5,-9,5,8,10,-9,3,1,7,-8,7,-5,-9,1,-7,5,-6,-4,2,-5,1,-7,1,2,9,3,9,4,8,-9,-4,4,9,-1,1,-5,9,-1,-10,-8,-2,5,-10,-9,-4,-1,5,8,-7,-4,6,3,1,-6,6,10,-7,-1,-3,5,-1,8,4,-9,-5,-1,2,6,9,-6,10,-5,10,3,-4,-5,-5,-10,-6,-1,-2,4,8,9,6,4,-1,2,-3,-7,5,4,2,2,3,-3,-8,8,8,5,3,9,-8,-5,10,-2,3,-7,-1,5,2,8,-6,8,-4,-8,-4,-10,2,7,-5,-4,-4,5,10,1,9,-6,6,9,-8,-10,5,-7,3,-8,-3,-9,5,-4,4,-9,-5,-8,-8,4,5,8,-1,-7,-1,7,7,-4,-1,-7,6,-10,10,3,-4,-4,10,-8,-1,9,2,-7,-3,-1,-1,-1,-6,-7,8,6,8,10,-6,-9,5,-10,-6,-6,-9,-3,-9,7,-3,2,4,-3,10,10,-4,-4,9,-8,10,-3,-4,1,-9,7,-3,-3,-8,1,2,5,-2,-6,10,7,-9,3,5,5,2,-5,-2,2,-5,-10,-6,-2,4,9,-2,-8,-5,4,-4,-3,10,1,-6,-6,8,7,-2,2,7,-2,8,-9,10,4,-2,-2,4,-8,8,1,-9,10,7,7,-3,-2,10,5,-7,-6,5,3,3,4,-3,-7,-3,-4,-7,6,-2,1,4,-4,5,9,-9,-3,-4,-4,-2,-1,-8,-7,8,6,-4,5,-5,10,-10,1,-1,-4,9,-2,-8,6,-8,10,-8,9,5,1,-1,-9,-10,-10,5,6,1,5,-10,5,5,5,2,-7,-6,-5], dtype = "int8")#candidate|1326|(2496,)|const|int8
call_1324 = relay.TupleGetItem(func_438_call(relay.reshape(const_1325.astype('int8'), []), relay.reshape(const_1326.astype('int8'), [12, 13, 16]), ), 2)
call_1327 = relay.TupleGetItem(func_441_call(relay.reshape(const_1325.astype('int8'), []), relay.reshape(const_1326.astype('int8'), [12, 13, 16]), ), 2)
output = relay.Tuple([call_1320,call_1324,const_1325,const_1326,])
output2 = relay.Tuple([call_1321,call_1327,const_1325,const_1326,])
func_1337 = relay.Function([], output)
mod['func_1337'] = func_1337
mod = relay.transform.InferType()(mod)
mutated_mod['func_1337'] = func_1337
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1337_call = mutated_mod.get_global_var('func_1337')
call_1338 = func_1337_call()
output = call_1338
func_1339 = relay.Function([], output)
mutated_mod['func_1339'] = func_1339
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_1342 = func_217_call()
call_1343 = func_217_call()
var_1344 = relay.var("var_1344", dtype = "float32", shape = (6, 9, 13))#candidate|1344|(6, 9, 13)|var|float32
bop_1345 = relay.greater_equal(call_1342.astype('bool'), var_1344.astype('bool')) # shape=(6, 9, 13)
bop_1348 = relay.greater_equal(call_1343.astype('bool'), var_1344.astype('bool')) # shape=(6, 9, 13)
func_1277_call = mod.get_global_var('func_1277')
func_1282_call = mutated_mod.get_global_var('func_1282')
const_1355 = relay.const([2,-3,-2,8,9,-6,-6,5,-2,-4,2,-8,-1,5,10,2,-1,-4,2,-1,-1,8,-6,9,-3,-4,-8,-7,7,-9,-3,8,3,-1,3,-10,10,4,-8,6,5,-6,2,1,7,-6,-8,6,-6,8,10,-8,3,8,6,-5,-6,3,8,7,6,6,10,7,1,-7,-5,-3,6,2,-7,-2,-1,1,1,-5,-3,-2,4,-9,7,8,-3,-10,4,1,-10,2,-2,-1,3,9,-6,9,2,-7,-5,1,-9,7,5,-5,-4,6,-2,-8,-2,2,-10,2,-10,3,5,5,4,-7,1,4,9,-1,9,-5,-8,1,-10,2,-1,7,-8,1,-6,3,-8,-5,6,-7,5,6,-1,-1,-1,10,7,-9,10,7,8,-3,6,3,-4,-7,-4,-2,3,5,8,5,1,-8,-5,6,4,10,-7,-2,-7,10,5,6,7,1,7,1,-3,10,4,1,-7,-10,8,-5,-4,-6,-9,6,-6,-3,4,-10,3,-4,7,-4,10,7,7,-1,-9,7,-1,-5,-1,-9,-2,-1,8,9,3,-10,-9,-9,10,-7,-10,6,9,-8,10,5,-4,-5,4,-10,1,-9,8,7,9,7,-10,1,-6,10,-4,-8,-3,-3,-8,3,-2,2,-10,7,4,-1,9,-2,10,-1,-6,5,3,-8,10,2,4,3,4,-7,6,-1,-1,9,4,6,-10,-3,8,6,3,-3,4,2,7,-6,-9,-5,-9,-2,6,-7,8,1,-1,7,9,-10,-7,2,-2,-5,5,-9,-6,-9,8,3,8,-5,5,3,-3,8,5,-2,-8,6,-6,-10,-8,9,7,-6,-7,3,5,5,-9,6,3,-1,-6,4,3,-6,-3,1,-8,4,-7,5,-5,10,3,7,5,-9,-6,2,-7,2,-5,1,-9,-7,5,8,6,3,-3,7,10,-8,-9,8,1,9,5,7,6,-10,-10,1,6,7,-6,-7,10,-5,-8,-8,-4,-2,6,3,-7,-5,1,5,9,7,6,-4,-1,-7,1,-5,4,-4,-1,4,-9,-9,4,10,-5,1,-2,10,-5,2,4,-2,7,1,-2,9,4,6,9,-1,2,8,8,-7,6,-10,-7,1,8,-5,6,4,10,-8,-5,-5,-3,-2,2,-6,9,9,10,-3,1,-9,-1,-7,-2,-2,-3,3,-2,9,-4,-2,-4,-2,-2,-1,2,10,-4,4,1,2,-5,-10,-9,10,-7,-8,-3,3,5,6,7,-1,-4,-6,3,7,-2,4,9,7,-4,6,5,-1,-5,-8,-7,-3,5,4,-7,5,-9,3,1,-3,-8,4,-8,6,4,-8,-4,-9,-2,7,5,1,9,1,7,-6,-3,-8,5,-6,7,-1,-7,-8,-3,-8,-6,-2,2,-6,-9,2,5,5,-4,-1,7,2,2,2,-6,6,7,7,-5,-10,7,8,-4,4,-4,-10,8,-6,3,-8,6,1,3,-7,-4,5,-9,-5,-6,2,5,2,2,-4,3,6,-7,7,8,10,-10,-3,-8,3,-7,-3,-7,-8,2,-5,-5,8,-9,-5,8,-7,2,9,-8,3,9,10,2,4,9,3,-2,9,6,6,-1,4,5,-3,-10,-10,6,-5,-7,4,-10,-1,10,2,4,-1,3,8,1,-2,-10,1,10,6,-7,-5,-9,-9,-8,4,1,9,-3,3,-10,6,-5,8,3,5,6,4,8,-4,-6,-10,-6,-2,-6,4,8,-6,6,-10,-7,8,-7,-9,-8,3,3,-1,-10,9,-6,10,4,-8,-9,1,5,1,4,9,3,3,5,9,7,-1,-5,-8,8,-1,-6,5,4,5,4,-7,8,-6,-6,-8,5,7,-10,-8,2,-5,4,2,-6,3,3,-10,1,-3,1,3,1,-7,-6,-1,-4,7,-8,5,7,5,-9,-2,3,1,-9,1,4,-2,2,-9,4,6,4,-8,-1,-1,-8,-5,8,-4,-10,-8,-4,5,6,2,-9,-1,-2,-3,2,7,9,-2,8,4,2,4,-2,9,10,-9,-2,3,-9,-10,2,-10,9,-10,7,-7,-5,4,8,7,-9,-9,7,8,8,-7,-3,-3,-9,1,6,7,-7,-1,8,-4,-4,-9,-5,-7,3,7,-10,-10,3,9,7,3,8,-2,-1,3,-1,8,-9,3,10,-2,10,3,3,-5,5,6,-1,2,-7,9,9,-6,-4,-2,6,-9,6,-2,-2,-9,4,-2,6,-6,9,10,5,-6,-2,-5,4,7,-6,7,7,-4,-3,-5,-10,-1,8,-9,-7,2,-5,10,-3,-9,7,6,4,-4,-8,-6,-1,9,8,2,3,5,-5,9,-5,8,6,7,-5,9,-1,4,-1,1,1,5,9,3,-8,-1,-1,-6,-2,7,5,3,-10,-7,-9,2,-2,-3,-8,5,9,10,3,-6,-8,-6,-10,8,5,-3,-6,2,2,10,-2,-8,9,10,4,10,-1,-7,-3,-3,2,1,-10,5,10,4,8,-4,9,-10,-2,-7,5,5,10,-6,-3,8,4,5,-9,-10,10,6,8,4,-6,-4,-8,-9,-5,1,-4,1,-2,-3,-5,10,7,-5,-1,6,4,6,-6,-10,-2,1,10,5,8,5,-9,7,10,-2,4,8,-7,-2,1,-6,-3,-8,-8,-4,-1,10,-3,-7,-2,4,6,-6,6,5,-9,2,-9,2,-3,6,5,-5,4,1,-10,1,-9,-8,2,4,-6,1,7,5,-10,-6,-6,3,-1,-5,3,7,-1,-9,-8,-6,1,2,-3,-10,9,-9,-6,-4,-9,10,-4,-4,-1,10,5,-6,5,4,6,-2,9,9,-6,-4,3,-6,8,4,2,1,-1,-6,6,6,-6,-4,-2,2,-9,4,8,-10,10,10,-7,-3,-7,-7,-1,-4,3,-3,2,-4,2,2,8,10,6,-3,-10,-3,3,9,-5,10,2,5,-9,-4,1,-4,-8,8,-4,-6,7,-1,-1,6,-5,4,-10,-1,1,3,-3,-10,9,6,-1,8,-4,-8,-9,-9,-1,-2,-3,1,8,6,8,4,-6,-3,-3,-2,-9,-1,5,5,-2,-8,-9,1,-10,1,-4,9,5,6,-4,6,1,4,-5,5,-7,6,-9,-5,5,10,1,1,1,6,8,-9,-7,-6,-5,4,1,7,-7,10,8,-3,-9,-5,-2,6,-10,8,9,2,6,-3,5,8,2,-8,-9,-9,7,-9,-4,-10,9,4,3,-1,3,5,-7,2,10,10,-10,8,-3,-6,-1,1,-4,9,4,-6,7,5,-4,-3,-8,4,2,-7,8,-1,-2,10,-1,5,10,-10,-5,-8,5,-5,-4,3,2,10,3,-10,8,-1,10,2,-9,6,-9,-5,6,9,1,-8,2,-5,-1,-2,-9,-6,10,9,-2,3,9,-8,-10,-7,-1,-5,2,9,-9,2,3,6,-8,3,8,-3,-8,2,-8,-8,-3,-1,5,8,-1,1,-2,7,2,2,-8,8,4,3,-8,-2,-5,6,4,-5,6,-9,5,-8,8,6,5,-1,4,4,4,-5,-8,9,2,-7,2,-7,-1,-1,-7,4,-2,2,8,10,-1,-1,3,-10,-5,-5,10,1,7,8,-2,-7,-7,10,4,-7,4,-1,-1,-4,-8,3,-1,9,10,-3,2,-5,-8,4,7,-6,-3,-10,7,-1,4,-3,2,-2,-1,-3,4,4,6,-3,-1,-6,5,-7,1,-9,3,10,8,-8,-9,-4,10,7,5,-1], dtype = "uint32")#candidate|1355|(1404,)|const|uint32
const_1356 = relay.const([7.401972,1.758506,-0.695177,6.517406,-0.859020,-9.076319,2.946863,1.657130,3.781988,9.281531,9.577772,-5.676003,5.824748,-6.592359,3.889416,-7.333600,-8.430714,8.214134,2.740086,1.667438,-9.930280,-3.739445,8.539939,-8.732194,2.365666,2.314862,3.620934,9.845197,-8.630883,7.267860,-5.907959,-0.332334,1.242516,8.594338,-0.263425,1.355481,-4.669019,-3.621187,3.669439,-1.872109,7.059695,2.950485,-5.361393,4.882196,6.660252,-6.573281,1.219495,-1.023786,-4.601738,2.350053,-0.239387,2.773898,0.248159,-8.761957,9.529855,0.337555,-5.770902,8.156774,4.499807,-4.292768,6.760763,-7.642138,3.612158,7.672754,-6.137642,1.134064,7.655828,7.636679,-5.989650,4.569113,-0.655468,-2.170684,-7.877471,0.374011,9.643527,-6.334507,-9.873370,9.964415,8.122913,6.575833,1.096481,-9.985217,-4.598796,7.944507,2.550098,-9.227571,3.609685,-1.829516,-7.551875,6.667936,8.303046,-2.698498,-3.410452,-6.486864,-5.820640,7.665572,-9.360748,0.629409,1.687979,7.059120,8.574204,0.118104,0.099580,-5.102349,0.403006,5.879134,6.157451,7.974414,4.355299,7.932663,6.880726,2.383364,-1.376346,-6.800714,-2.553247,-3.244840,1.195411,-2.563577,-3.816778,-1.937664,6.285023,-2.213054,7.303501,-1.078595,8.037780,7.799661,9.696635,-7.342096,3.070922,1.891067,5.038316,5.072533,1.420115,0.367576,4.851257,-8.905509,4.159179,2.292579,-9.141863,6.056155,-5.045941,-0.942963,4.406979,7.415062,-3.126995,-3.477415,1.964574,-0.097912,-2.422022,-7.062568,-2.258300,-1.744632,3.863911,-2.910750,1.255949,-2.790253,-2.213381,8.324929,2.171838,-9.708297,-6.246871,3.369558,2.247051,-4.307093,6.814935,7.543935,4.622383,2.260419,5.070219,-3.078885,1.444057,-8.437981,-9.090731,-6.409891,4.030780,8.153669,0.655703,5.014122,-4.942620,-5.433320,-6.494305,3.895436,1.255551,-5.117923,9.394623,-5.743189,9.197606,-2.934853,-2.438019,-2.624859,-1.595802,1.605972,-7.483630,-0.627575,6.237387,7.616699,-4.590837,5.015679,0.136119,-4.842486,2.094740,-9.484721,-2.406624,-8.164027,2.777904,-6.342749,-3.723444,7.611150,-6.009949,8.745775,6.060096,6.145857,-6.210006,9.956698,-2.942427,-0.172907,-9.374183,1.838996,2.784836,-9.098275,-6.637838,-9.902497,-9.086191,2.530185,9.635620,-0.685243,7.822771,-4.275820,2.072772,-6.318354,-7.349967,8.168155,3.765558,3.717225,-1.194407,3.115695,-7.415062,8.524848,6.761980,2.236484,8.977599,6.952227,0.076696,-0.596109,-5.375103,-8.818858,7.982504,7.710875,-3.216581,-6.374275,-2.261762,0.787798,2.774814,-6.404655,-5.729274,-3.535506,9.707925,-9.039711,6.879904,6.102320,1.632971,-8.588858,8.296784,9.263277,-7.664193,-8.863545,1.003318,7.201585,-5.051844,-2.041087,6.969172,9.763660,-5.398212,7.652875,-7.565795,3.051296,3.024705,3.987901,-2.850629,-3.457413,-4.575248,5.504381,8.377418,-2.520748,-2.524080,-0.277367,1.628876,4.388086,3.950074,-5.571198,2.891556,-0.881321,4.163204,-6.904525,-6.091984,6.866513,9.581788,5.805303,2.380157,8.150744,-2.156091,-7.317658,8.075117,4.583365,-1.101652,-6.172769,-8.197914,-8.886097,-8.309223,3.689118,-3.093346,7.599377,7.292292,-1.764976,4.330159,0.671556,1.520022,2.427364,8.897436,0.265897,-8.167659,8.472358,-7.310398,1.551042,-6.019513,-8.938844,8.467653,3.331778,-4.105899,2.119288,7.373109,8.259803,-4.334250,6.979721,6.022783,-6.106076,-5.459855,-7.306204,4.911334,-2.537116,-8.480816,-8.412125,-8.598143,3.445919,6.702896,-0.424236,2.137282,2.812617,6.104256,2.030756,-6.734381,-8.940575,1.891139,7.549142,-9.159403,2.159758,-1.636298,-3.030714,2.360835,9.495058,7.073844,4.756420,3.258448,-1.483950,3.736759,-4.562854,9.933945,-2.085096,4.357053,-1.803121,8.216106,7.931861,4.435066,6.436591,0.070750,-3.317030,-3.687152,8.333143,-1.627509,-6.304554,1.777827,7.779783,-7.616840,7.283763,-4.383184,4.321949,6.731654,1.165701,5.819765,7.536870,-2.199813,4.559613,9.654068,-7.737445,-7.806711,3.934540,1.120959,7.174469,5.307110,-4.294419,-9.791169,5.914018,-8.628564,-1.066545,1.201661,-8.343041,3.384759,4.626424,-6.729476,1.468125,-3.266656,-6.484181,4.098876,0.924396,-2.114483,-2.542724,-3.690687,1.650440,7.863308,-9.795675,9.013731,-0.209468,-9.261908,-2.613897,0.016721,4.958584,-8.128372,-5.769146,9.570752,-1.351860,6.245692,-0.731888,8.859242,-4.900943,-7.031567,2.339345,8.084457,-5.020185,5.665828,-1.990095,-1.250774,9.246230,9.038137,5.167226,1.249229,-2.041797,-5.203812,-1.109700,-3.060980,-0.398209,1.737809,9.964377,0.378563,-3.690619,-4.658115,-2.011842,9.066937,8.564254,6.473112,7.596361,6.313297,3.387783,6.423222,9.037490,-6.495090,-2.950842,0.711228,-2.529866,7.836230,-3.366174,4.515233,9.902576,-7.380247,3.326265,2.757919,-4.936369,-5.602577,-4.074029,-2.330496,-7.621506,-7.491543,-2.472203,-4.748392,-9.558020,-9.443679,2.437290,2.064675,-3.352279,7.561218,2.433203,-1.479183,9.882841,8.838912,-2.690339,4.354118,-9.648219,8.711666,-2.656018,6.592252,-1.862384,5.385628,4.073979,-1.793794,-5.754602,0.258025,-9.170908,7.917990,3.679386,1.385407,-2.213061,-6.683992,-5.885915,-8.874547,0.735513,-5.585371,4.126058,2.997419,-3.511814,-1.668145,2.578825,1.285900,0.033257,-0.292693,1.620094,2.163062,-8.601602,0.334045,9.571585,5.294578,4.689437,-6.811383,0.837681,-2.046069,2.658848,-5.777232,-4.481141,-5.533766,1.126449,-7.201043,9.616498,-6.968720,0.693385,-1.500475,3.032537,2.167707,8.247490,5.508255,7.811262,8.587026,-4.241394,-7.689723,2.937104,2.886636,9.173687,1.262432,7.577936,-4.909564,0.304816,2.930451,5.591563,-5.021811,7.118364,3.281148,9.821878,0.895115,8.635105,-2.469483,8.455770,6.448330,-1.915586,4.587195,-4.288926,-8.100940,-1.194605,5.345317,3.683163,3.131053,9.041061,0.905133,0.897847,8.650538,-4.954347,3.786290,3.686473,-2.317275,4.064909,6.896783,-1.619311,-9.621398,9.935739,-9.648860,5.103677,8.200906,-7.646688,6.944687,-7.594324,-3.269962,-7.137455,-9.196502,-4.246025,3.791477,-5.865575,-7.036959,5.498344,6.343805,-5.584963,5.252618,4.897153,-7.010584,4.486162,3.193189,-6.747546,7.823888,6.571302,-4.088319,-8.356993,-6.715857,-1.758059,1.027522,9.667008,1.065386,-6.113913,0.919746,3.656461,-9.971511,9.572596,-8.288712,0.155515,-0.075543,8.594708,7.145925,2.148418,-4.373616,-4.680613,9.532260,3.612426,3.668358,7.970172,2.280752,-4.998731,3.448753,-9.714361,-3.348103,8.121801,-2.920011,8.971970,4.545528,4.129299,3.453788,7.278688,0.280797,3.881297,4.313826,4.503159,7.861369,-8.700382,9.025809,7.621745,-6.966030,0.101078,9.315939,-5.852469,4.009007,0.069012,2.518809,6.205041,6.496970,9.780040,7.866591,9.609632,8.082682,2.248225,-9.221864,-4.500468,-1.352733,-6.552038,-7.653116,-2.829308,-4.826812,-7.786941,-7.341049,1.758613,-4.179012,-1.665688,6.898588,7.069943,1.992969,-5.027952,4.883233,4.152513,-7.328397,8.460551,-8.201279,-7.825742,7.854611,0.288585,-2.592487,4.338212,1.204784,-0.226163,-9.623905,6.096900,-8.657567,8.066567,-6.263781,1.914603,-5.645757,-0.393086,-6.542300,-7.721538,1.587137,-8.592168,-5.601264,7.631078,6.217708,-1.001570,5.831779,-2.271075,0.484268,5.820375,-9.904932,-4.053205,2.523068,2.649559,1.815698,-2.670161,1.244183,-8.320148,-9.269971,-7.917108,4.499417,0.269359,-2.909272,1.816120,-0.475233,-2.377866,6.257660,5.962365,5.037086,8.528747,-7.561090,7.111064,-9.155768,7.592771,7.985994,-6.603088,5.937576,9.515445,9.746696,7.190333,9.636949,-0.086028,0.783262,-0.437967,0.098984,5.445120,1.584378,1.545664,8.083726,-2.383266,-1.091722,3.307216,5.063807,-8.255762,6.475675,-2.392920,2.506755,-3.276438,-8.976795,8.192577,-6.769777,-4.379398,7.460114,3.413290,-2.830954,-7.305504,-7.381409,-4.760753,-8.025271,4.659783,1.244978,1.231062,-7.323995,0.754971,-6.955709,-5.247464,7.269639,-0.820430,8.005559,9.888201,7.273955,-0.393920,-0.697453,4.414542,7.604241,-5.853642,-7.822115,1.481733,0.980259,-0.687819,0.592820,-1.279188,7.098873,-4.678616,-5.388127,-7.891882,6.815419,-7.946989,-5.137950,-4.180650,-3.464680,-1.111099,-3.796235,0.521775,-3.092505,7.376247,2.414995,-5.734575,-3.554649,3.655011,4.242586,5.199147,-4.435613,-6.830408,0.756764,3.574503,2.879342,7.511266,0.046471,-0.256655,-9.626836,-8.622957,2.643534,-6.027399,3.317047,3.303988,9.751572,9.512884,-7.856602,-0.178502,-3.067607,1.945662,8.096132,-4.561915,2.017393,-8.426916,-6.168888,5.738907,-4.577238,-2.990105,9.048258,-9.345616,-2.132527,1.545353,7.375413,-0.100801,3.255780,0.184716,-1.692750,9.403948,-8.953101,4.681904,-7.086280,2.744754,-1.785360,-1.544816,3.739757,2.552349,-0.922351,-9.918062,-6.354970,-7.068753,-4.427123,1.086288,1.073195,-6.014542,-1.922568,-7.489648,8.149243,9.099580,5.870034,2.417532,-8.355379,-2.639900,4.975773,-0.738830,-2.905622,4.771188,3.668887,4.617388,-1.389869,-1.464217,-1.548711,9.249301,-4.562201,6.110686,1.645880,-1.437843,6.245497,-0.499049,3.818512,2.863059,3.808685,-4.737794,7.868630,6.558289,-5.980932,-7.297390,8.380689,-3.285501,1.173650,0.894710,-5.506179,-8.515961,8.051862,7.342581,-9.510965,-8.502845,9.350919,-0.974335,-4.750328,-6.272116,6.485436,2.271393,3.021166,0.949730,-3.528427,1.532744,-8.782125,-6.544299,-0.929544,4.084653,-2.133608,1.295265,-1.579687,-3.298722,0.928439,1.304569,-4.916539,4.277612,-7.655011,-1.495252,-7.339720,-7.478696,6.206262,-6.883825,-7.004951,-6.491770,2.889627,-7.079283,4.266498,-9.841940,-2.071693,-1.296736,8.572862,-5.432922,-4.577889,-0.828334,-4.308726,1.135505,1.468695,1.070735,3.277608,7.908842,2.616982,0.474195,-0.802542,-2.883307,0.070348,7.211924,-2.992813,0.711537,-6.255605,4.179497,-3.536732,3.419884,-0.354609,4.200473,-5.835351,-3.417243,-1.583743,2.934596,-1.350510,4.584550,-9.947967,-1.592434,-3.980042,9.924988,0.424603,9.709334,7.967481,5.502551,-4.567305,-9.212619,8.786862,-2.560816,-6.792372,8.158984,7.268462,-8.913682,0.685431,1.691479,-7.013738,0.530612,6.538235,6.861850,1.810715,7.650129,0.246256,-8.834005,-0.697382,6.642721,-5.590719,4.217267,4.950839,3.992607,-8.163678,7.987388,5.959415,-0.723772,3.276580,-6.876014,0.135121,-7.411355,4.554887,1.703948,-0.720425,-1.538933,2.454826,-9.307812,2.951227,-6.618179,-4.835493,3.656987,-0.415530,2.353860,0.948335,-6.123189,3.440633,-6.905778,0.409386,-5.620640,-8.591764,4.052441,4.830970,-5.261995,8.761561,-2.262570,-4.300798,-3.006040,-4.300756,6.284348,8.164170,-6.327865,-8.664275,2.543291,-2.264515,5.834310,-7.323413,1.520925,0.530250,-1.234610,-8.505211,-8.784780,-9.882995,9.386570,-8.930248,4.051265,-6.555271,-3.804792,-9.785979,-0.895994,-7.229097,7.034138,-7.304548,-9.764087,-9.012236,0.846704,3.040256,-2.463622,-2.894222,-6.074644,-9.121858,-7.322313,6.769289,3.046449,-1.956791,9.170227,-4.993640,2.960425,2.432553,-9.131744,-7.220644,-7.899437,7.332128,-3.968411,-5.716022,1.649117,-7.605014,7.422388,-6.948761,0.496672,-1.596202,8.036291,0.424488,-4.580159,-9.281446,-7.727576,-7.850208,1.883980,3.324687,8.211090,-6.306418,-6.501647,-7.108775,0.519765,4.636010,1.652263,9.522487,-5.367159,4.723136,3.029294,8.563820,-1.125731,-9.114730,6.183932,3.971125,0.066956,1.973962,-8.238232,4.660287,1.053150,-6.921385,-5.725331,2.679687,-1.127770,6.171405,5.484380,-8.162849,-8.910046,3.786530,-6.550367,-3.465241,-3.236734,-3.332111,5.718457,-9.519409,-6.985913,6.776586,-9.412158,4.377845,4.525306,-4.417393,1.266099,5.789511,6.916091,2.388919,5.165267,0.652967,-4.520680,1.680638,1.407744,-8.659654,-6.435996,1.492528,-4.697494,-4.316345,0.048118,-2.095897,0.239243,8.710606,-0.400843,-1.780424,-7.749169,-6.325359,4.863844,2.548742,7.624296,-6.369150,1.835900,2.715995,-9.197053,-9.407515,-1.720719,-6.381176,-6.659804,8.912431,0.403376,-8.431001,5.060222,-8.723631,-4.530529,-6.028943,4.076659,-5.413251,-8.444633,-3.623497,7.086631,-9.539422,-9.091091,0.590761,-9.487932,7.537701,-5.869201,-9.280314,-5.548136,7.489007,-7.717646,3.235835,-5.146744,-2.260790,9.996330,-5.769471,8.677158,-5.364665,2.277850,-9.350394,-8.226248,3.423831,-2.354649,2.000232,-4.241517,7.774781,-4.114312,-9.015682,-9.628393,9.544218,-6.164310,-6.196917,-0.951791,8.504471,-1.791705,-6.619589,7.158985,-4.304974,7.583227,9.467483,-1.420451,-7.255035,0.201959,2.503714,2.203814,7.999524,-6.272213,-9.319445,-9.813160,2.056799,7.470614,-8.786244,9.474832,-7.054590,-3.404149,4.980942,7.998178,0.397660,-4.319541,-2.986272,2.180717,6.086855,-6.154881,-1.658293,1.402408,0.609771,0.962889,-0.394895,-1.916676,4.823882,-1.125838,6.535927,-9.502072,-2.352964,-1.043176,3.571581,-1.431126,9.309460,-4.821176,5.161538,7.503310,-6.124556,-2.894704,-3.937131,-3.073003,0.858386,-3.568139,-0.970259,6.624249,0.931588,2.436530,7.381463,-5.629457,-8.376137,9.858660,-5.322745,0.923460,9.736315,1.370085,-6.640315,-2.405994,-1.071582,2.949872,4.833153,9.821449,-5.682495,3.182668,-4.085949,-8.579458,-2.544585,9.013062,7.676786,-4.482061,-5.501990,-2.695274,0.710151,7.980080,9.050415,-7.502643,4.255939,4.269893,-1.081415,-6.981085,-2.915374,-3.947750,-8.373221,-5.780293,-4.445003,-5.703354,-5.298824,4.710798,7.904553,-6.315191,3.024685,-5.834116,-3.325912,-3.560367,-1.617164,-7.313434,-0.083323,-4.560009,-2.188408,-5.471687,2.580142,0.389441,4.553578,9.886575,9.787903,1.893513,-8.215557,-8.720751,4.045135,2.749657,0.624614,0.443177,-6.114636,-5.021501,-4.316648,5.260847,8.640683,7.272731,-8.968143,-0.537864,-2.828676,-0.937397,6.292229,-3.169883,-3.311663,-7.459364,5.924345,7.935180,0.905563,-3.740435,-5.306781,0.787739,-9.639668,-0.821474,9.609598,7.930919,-0.277147,-1.223307,-0.028100,-2.606707,1.573439,-5.358429,-3.659717,-0.018505,4.956983,8.219122,0.236703,8.330405,-9.226894,-8.300944,-9.855136,6.763765,6.382277,-3.421428,-4.433351,-5.808246,-0.736437,-1.485901,-8.266635,-5.041725,2.646024,2.749701,0.498988,7.174761,-4.587473,8.381640,7.747228,9.670849,3.499229,-9.261576,1.677463,6.273278,7.380652,-3.545006,-8.458739,7.636647,5.215026,-3.348244,6.251498,-3.439669,9.209709,1.706104,-7.689791,-0.773364,-4.944044,-2.985769,8.916338,0.618980,5.996777,6.411315,6.096386,-3.753571,2.894982,7.761427,-1.623261,3.934382,6.477229,-5.458626,7.494417,9.784660,2.118113,2.581589,8.732723,3.387675,7.454614,9.467709,1.897933,5.242845,-3.627836,0.063988,-3.456941,4.774802,2.073388,5.706238,-6.469230,2.161601,-4.956318,-6.748417,3.628485,6.052625,-8.968295,2.033252,-7.109224,7.218710,1.325680,2.363311,4.559106,-9.202801,-6.358221,2.151883,-1.138518,-4.307847,-2.753357,0.098121,-6.637551,-8.867415,0.301514,-0.056855,-5.678462,-5.180604,-3.099561,5.927443,-6.109892,6.525285,9.534401,6.412923,4.531704,3.801036,0.500181,9.956868,0.403035,-6.303693,-3.484470,-7.900370,-8.708831,-7.765973,-8.457458,-7.418471,2.630410,4.090546,8.883087,9.502024,-2.784013,-1.751666,3.955552,7.865178,2.658813,6.908749,-1.578821,-5.178617,-7.915663,2.715135,-3.893045,-0.220740,7.202124,-6.773174,-8.244745,9.549424,-0.739311,-1.883679,-0.863468], dtype = "float32")#candidate|1356|(1521,)|const|float32
var_1357 = relay.var("var_1357", dtype = "int8", shape = (52, 48))#candidate|1357|(52, 48)|var|int8
call_1354 = relay.TupleGetItem(func_1277_call(relay.reshape(const_1355.astype('uint32'), [12, 9, 13]), relay.reshape(const_1356.astype('float32'), [1, 1521]), relay.reshape(var_1357.astype('int8'), [2496,]), ), 3)
call_1358 = relay.TupleGetItem(func_1282_call(relay.reshape(const_1355.astype('uint32'), [12, 9, 13]), relay.reshape(const_1356.astype('float32'), [1, 1521]), relay.reshape(var_1357.astype('int8'), [2496,]), ), 3)
uop_1359 = relay.acosh(bop_1345.astype('float64')) # shape=(6, 9, 13)
uop_1361 = relay.acosh(bop_1348.astype('float64')) # shape=(6, 9, 13)
output = relay.Tuple([call_1354,const_1355,const_1356,var_1357,uop_1359,])
output2 = relay.Tuple([call_1358,const_1355,const_1356,var_1357,uop_1361,])
func_1363 = relay.Function([var_1344,var_1357,], output)
mod['func_1363'] = func_1363
mod = relay.transform.InferType()(mod)
mutated_mod['func_1363'] = func_1363
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1363_call = mutated_mod.get_global_var('func_1363')
var_1365 = relay.var("var_1365", dtype = "float32", shape = (6, 9, 13))#candidate|1365|(6, 9, 13)|var|float32
var_1366 = relay.var("var_1366", dtype = "int8", shape = (52, 48))#candidate|1366|(52, 48)|var|int8
call_1364 = func_1363_call(var_1365,var_1366,)
output = call_1364
func_1367 = relay.Function([var_1365,var_1366,], output)
mutated_mod['func_1367'] = func_1367
mutated_mod = relay.transform.InferType()(mutated_mod)
func_793_call = mod.get_global_var('func_793')
func_794_call = mutated_mod.get_global_var('func_794')
call_1391 = relay.TupleGetItem(func_793_call(), 1)
call_1392 = relay.TupleGetItem(func_794_call(), 1)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_1420 = func_217_call()
call_1421 = func_217_call()
output = relay.Tuple([call_1391,call_1420,])
output2 = relay.Tuple([call_1392,call_1421,])
func_1440 = relay.Function([], output)
mod['func_1440'] = func_1440
mod = relay.transform.InferType()(mod)
mutated_mod['func_1440'] = func_1440
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1440_call = mutated_mod.get_global_var('func_1440')
call_1441 = func_1440_call()
output = call_1441
func_1442 = relay.Function([], output)
mutated_mod['func_1442'] = func_1442
mutated_mod = relay.transform.InferType()(mutated_mod)
func_262_call = mod.get_global_var('func_262')
func_264_call = mutated_mod.get_global_var('func_264')
call_1512 = relay.TupleGetItem(func_262_call(), 1)
call_1513 = relay.TupleGetItem(func_264_call(), 1)
uop_1517 = relay.exp(call_1512.astype('float32')) # shape=(1, 9, 13)
uop_1519 = relay.exp(call_1513.astype('float32')) # shape=(1, 9, 13)
var_1525 = relay.var("var_1525", dtype = "float32", shape = (12, 9, 13))#candidate|1525|(12, 9, 13)|var|float32
bop_1526 = relay.bitwise_and(uop_1517.astype('uint64'), var_1525.astype('uint64')) # shape=(12, 9, 13)
bop_1529 = relay.bitwise_and(uop_1519.astype('uint64'), var_1525.astype('uint64')) # shape=(12, 9, 13)
output = bop_1526
output2 = bop_1529
func_1535 = relay.Function([var_1525,], output)
mod['func_1535'] = func_1535
mod = relay.transform.InferType()(mod)
var_1536 = relay.var("var_1536", dtype = "float32", shape = (12, 9, 13))#candidate|1536|(12, 9, 13)|var|float32
output = func_1535(var_1536)
func_1537 = relay.Function([var_1536], output)
mutated_mod['func_1537'] = func_1537
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_1553 = func_217_call()
call_1554 = func_217_call()
output = relay.Tuple([call_1553,])
output2 = relay.Tuple([call_1554,])
func_1565 = relay.Function([], output)
mod['func_1565'] = func_1565
mod = relay.transform.InferType()(mod)
output = func_1565()
func_1566 = relay.Function([], output)
mutated_mod['func_1566'] = func_1566
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_1586 = func_217_call()
call_1587 = func_217_call()
output = call_1586
output2 = call_1587
func_1590 = relay.Function([], output)
mod['func_1590'] = func_1590
mod = relay.transform.InferType()(mod)
mutated_mod['func_1590'] = func_1590
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1590_call = mutated_mod.get_global_var('func_1590')
call_1591 = func_1590_call()
output = call_1591
func_1592 = relay.Function([], output)
mutated_mod['func_1592'] = func_1592
mutated_mod = relay.transform.InferType()(mutated_mod)
func_793_call = mod.get_global_var('func_793')
func_794_call = mutated_mod.get_global_var('func_794')
call_1597 = relay.TupleGetItem(func_793_call(), 1)
call_1598 = relay.TupleGetItem(func_794_call(), 1)
func_660_call = mod.get_global_var('func_660')
func_663_call = mutated_mod.get_global_var('func_663')
const_1603 = relay.const([[-6.710289,6.794636,-9.444876,-1.349779,-7.676976,-5.588684,4.061448,9.049630,6.566930,8.439934,3.971417,1.120533,6.063424,-5.587362,3.242571,-5.295917,-0.884357,4.969298,-5.200511,-5.261876,2.318806,3.253957,-6.638706,-1.112080,-8.820115,8.018273,4.259725,-1.023689,-4.546542,-7.617666,-0.088984,5.604981,-0.973871,2.271658,9.847640,1.415579,3.512443,6.666019,0.024004,9.420805,-0.641041,-4.721599,8.352110,-6.227790,9.550426,-9.733749,0.211012,-8.829681,-2.452667,-3.638011,-4.393368,4.906725,3.985764,4.320984,-9.937564,-6.457632,5.751398,-3.430434,0.642160,-2.732165,9.861886,-0.826004,9.550716,7.915139,7.393659,2.996286,8.831464,7.543514,7.961933,-7.080385,4.411315,-4.909820,3.909574,8.006913,7.662808,8.726171,-1.637876,-8.845574,-4.530746,-9.845483,7.390825,1.219676,-9.877921,4.211642,6.447540,1.632278,8.435209,-9.794934,-7.728908,9.651086,6.230107,-0.734886,5.383616,2.723965,-9.366005,7.151796,6.508223,2.122559,0.577267,-3.784769,-8.008387,2.523467,1.424547,-0.659416,6.143609,-1.469482,-9.412614,4.897274,9.647636,5.903595,-6.306182,5.925698,-4.580074,0.581429,-6.353146,-2.350475,6.383815,-5.866745,2.342873,-3.639836,-9.356908,-0.400056,6.652799,-5.822844,-7.630402,8.614613,-9.314748,4.283668,7.014752,-2.882259,-3.505578,-9.541378,-5.567870,-7.448609,8.481363,4.848049,3.842954,-3.781958,6.874842,5.310890,-5.224075,-9.127054,-3.215968,5.399185,-8.816977,3.347511,7.080016,-6.452590,-5.473793,3.001749,2.826869,4.240145,-5.603937,7.202495,5.534646,-2.841888],[1.235890,-1.320259,-3.410668,8.343565,-0.714023,7.765980,-1.215039,9.679474,-5.191148,-1.148710,0.926566,1.126552,6.422329,2.294127,7.993064,4.645658,-7.344580,-9.736392,2.528355,3.621604,-1.569065,0.300771,-3.565988,9.524648,-7.584485,-5.177762,-0.677768,0.171387,2.372443,-0.484208,-7.639790,0.342819,9.545225,6.117466,-0.577423,-6.983132,6.979867,0.900719,7.271996,5.877225,1.756266,9.175822,5.444304,2.792884,-6.786426,0.819490,3.555180,5.177096,9.845024,-1.248636,-0.867142,-9.657087,-6.343872,7.911012,1.230614,4.427016,4.508916,-6.652890,-0.189746,2.016829,2.392187,9.716127,8.817062,3.135007,-6.053190,-6.704341,0.103749,-3.221569,1.482810,9.537876,-6.193072,0.321023,6.586028,-3.792784,0.057601,-8.987167,4.786019,-6.991936,6.237810,3.846514,1.906127,-0.392520,-2.058511,-2.598067,-3.505074,-0.661737,5.971408,-7.792816,5.360729,-1.166980,-5.431543,4.350067,-8.506530,0.632064,-9.252150,0.635360,-5.229904,-0.666080,3.151762,-4.967907,-7.130979,-9.552042,-4.623559,-2.276982,-9.602948,4.764017,-4.079362,-2.794741,-0.168828,-2.567492,-0.975494,-2.133235,9.287404,8.839481,8.915145,-2.307328,4.132671,0.599085,-5.945128,7.382085,-8.536494,5.407771,-1.261889,-9.546918,0.930879,5.880840,-9.030945,9.045438,-4.471798,-5.748343,-2.396831,5.982597,-2.586526,-6.327969,-2.977153,1.644748,-0.574902,5.181062,-6.299589,1.877182,-7.938285,4.391018,-7.811173,-3.058774,0.646718,-4.722200,-7.257689,8.069218,2.560483,2.039928,-2.755438,-8.601920,9.357275,4.013574,6.544347,-7.196742],[5.164962,6.554168,-8.078869,-3.665225,-5.926134,9.045030,-5.091916,9.045007,-9.552771,3.574676,7.431755,2.866550,-6.188687,-1.898436,2.672664,7.235278,-4.660413,-3.674503,9.476914,4.074871,-1.857368,-6.655238,1.060740,-9.191564,-4.081449,-8.634372,5.361244,-0.126628,-7.321520,-4.349444,2.624187,-2.594697,-6.100925,-1.351779,8.683605,4.796179,6.278260,-9.389203,-6.792103,-2.905938,4.841839,-0.889794,6.284498,-7.601138,-4.324567,7.884582,-8.926108,3.747742,6.341863,-5.485958,6.240226,-9.438023,4.787701,-0.079543,9.488805,-4.810597,2.522853,8.496310,-4.845101,8.016217,-2.613880,-4.658086,-4.482253,3.771273,-9.867261,3.396331,-7.668020,-3.913580,-4.657834,3.080246,8.847449,-5.106319,-5.769975,1.161075,7.377839,3.058810,-6.433197,2.502994,-4.999392,-2.291103,-9.879017,-6.270065,9.898790,0.420660,2.837262,5.446119,-4.281307,-8.168600,1.148473,3.023148,-1.097564,2.295092,0.757488,5.482000,1.198378,-7.007556,7.898203,-7.049804,6.640455,0.336338,-1.903512,2.734803,-8.239767,-5.914923,-5.730530,1.069537,-0.410825,1.622865,6.337429,4.224774,-6.675044,-4.431374,8.100325,-1.505167,-3.874453,9.649802,-6.860544,-5.791098,-2.456592,-6.123836,-8.037494,6.825562,-1.912617,-6.208626,-9.853533,0.465124,7.938007,-6.693980,-2.689458,6.462176,-1.672564,-9.805402,-6.109088,-6.173188,2.890275,9.988363,-5.665154,-3.507274,6.065408,-6.205297,3.029311,-3.870440,4.512223,1.962000,2.860837,2.746782,4.306373,-5.504176,-2.448246,0.192515,4.415068,4.048330,9.221043,9.032086,5.515154,-6.253910],[0.185229,1.317535,-2.433300,-8.141244,-1.634941,3.529055,6.885404,6.491399,-2.927964,4.656250,2.686699,5.779679,7.158454,1.822794,-4.924801,0.357670,-8.896210,4.730586,3.168230,-7.904600,5.245127,6.558553,4.656948,-9.186944,6.556345,6.320385,-7.442386,-6.872250,2.302014,-2.595359,6.714299,8.169187,5.170184,-4.717389,7.062818,-7.143577,7.001874,5.952449,-1.221381,-6.184060,-4.355718,-1.821996,5.464466,-9.537338,-2.249995,-0.801645,-8.489957,5.073369,-2.780330,-9.137510,-2.794744,-7.117861,-6.396551,-6.692608,7.093926,0.786067,-2.180213,0.725992,-7.197780,5.269942,-9.625890,-4.165290,2.101587,-5.430905,-3.672053,4.812760,5.049733,-8.268614,-7.252017,-1.203600,2.910287,4.917596,4.630200,5.208507,-6.859557,-0.079553,3.345334,8.226335,-2.042221,-7.362898,-0.510150,9.602902,-3.129931,5.286746,-2.593025,-6.540695,3.973512,-4.791008,-2.348347,-6.796018,-6.502366,-9.731803,-1.134255,-3.868791,6.420486,4.665457,2.289403,-2.298842,-9.631078,-0.849141,6.372674,-5.451642,-6.895352,-0.472647,7.369075,4.071801,6.799874,4.235405,0.867049,6.962629,-5.590450,-2.578292,9.152006,2.094888,-4.617651,0.839529,3.685871,6.789346,-5.672301,-0.750556,-5.557436,5.464471,1.043430,7.072821,-3.811406,-7.562521,6.621603,-5.276198,4.337377,-9.706562,4.272181,5.720577,-5.910771,-0.658036,-2.930309,-4.687820,-4.055108,8.548428,-1.208369,-8.444865,7.641272,5.014534,1.009232,8.700120,-9.527982,7.522646,4.880589,-8.492597,9.522193,-5.069691,6.874561,-1.568967,-0.790266,-0.534143,2.715837,-2.801898],[3.498847,3.587759,4.313549,2.004958,1.754355,-1.473794,9.719453,-7.013204,5.688913,4.702222,5.789096,9.588673,2.498114,-4.430329,-3.787626,8.391996,-6.172651,5.585840,8.487082,8.542673,9.466374,-4.148315,-8.022420,8.227065,8.894975,4.327881,-7.652638,8.457278,-6.223662,-3.778786,-0.289145,-6.794858,7.223193,-2.198381,-7.411339,1.130627,4.001582,-0.123844,-9.876787,-8.682736,-9.384571,-0.393805,-8.978490,-4.458733,6.713044,9.944753,-1.084331,-1.149101,9.657108,4.884652,2.138751,5.572938,-2.108569,-6.573546,2.851814,-5.095752,-6.766215,1.100889,-4.324107,4.634226,-7.470055,4.526131,-0.119161,-8.346243,0.158404,8.036640,-9.668381,4.851270,6.823443,8.750467,-1.337817,-0.068364,-8.292254,1.467019,-0.967359,-5.763508,-1.206557,1.550604,-0.666961,-6.359524,6.719727,-3.663523,6.474341,-0.838328,9.464382,8.517472,-7.526755,9.023232,5.113251,1.608197,7.971878,1.620879,-4.294364,9.089737,-3.774880,-9.154580,5.426896,-3.807204,-3.838844,1.522779,-2.374991,-7.452286,2.528375,-3.355009,-7.836948,-5.968486,9.678398,5.122233,-6.934440,-0.732411,6.554695,1.298357,5.085021,3.011223,-0.890852,-9.104477,8.033661,8.879238,-2.770611,-3.819448,-5.578555,-8.919678,-1.490585,0.543279,-5.973515,8.815077,-5.553670,8.072241,-0.338070,8.216340,4.146119,-2.622533,-6.541251,3.493970,1.136965,-2.636585,-5.248586,1.325725,-3.657306,-1.139471,8.915765,-6.527208,-1.005626,0.266998,-4.666429,9.823091,-9.250500,1.721785,-5.550101,4.895213,-9.132763,3.141265,7.111066,9.756725,5.332864,-3.884213],[6.777508,-1.549744,-0.450607,4.713979,-4.448069,1.894643,-6.284160,-0.702089,0.103392,-4.510042,6.660824,2.330508,-5.934735,-8.276251,-9.438449,-5.436726,-2.115413,3.485357,7.183248,8.964966,2.029762,-2.246910,6.728656,-6.989026,3.965715,-7.820204,-6.615160,6.551398,-8.545366,-4.978251,-0.113492,2.853381,1.723036,-9.053667,6.649874,9.759500,-5.692834,-3.272988,-6.740045,-9.691503,9.988877,-2.771271,-7.324267,-2.028711,1.429547,7.162973,-3.288870,-3.644077,4.803303,-1.874921,9.830376,-7.849557,8.786579,9.769685,6.268142,6.596580,3.340444,3.026615,6.824830,-3.117732,-2.196330,8.344707,-8.865313,8.588354,-7.890481,-9.428223,8.052643,0.856467,6.472370,-5.414549,-9.260715,7.042396,5.864483,-6.063911,6.357089,3.295740,-7.405535,-3.241139,4.346134,9.878171,8.989657,6.757137,-5.567018,8.194796,6.693028,-7.958022,-7.627731,9.682626,-2.131794,-5.086065,6.807072,-4.645057,-4.173011,-6.473203,-9.909537,4.452344,-8.158619,-2.044087,6.932078,-5.183922,1.847124,5.338766,0.909989,4.487474,-8.149807,9.200724,9.755398,5.026173,-9.248556,2.820672,5.922198,-0.352073,0.591242,-0.829788,-4.775392,-4.136041,-3.652774,1.158895,-8.812865,5.070306,9.493172,-1.943034,-4.131375,-5.367914,-4.082211,0.291374,1.165141,5.576270,-5.795784,2.400680,-2.263365,-6.583672,7.203139,-6.885154,-6.987184,-9.299548,-3.808582,4.609196,0.472413,7.397043,9.477957,8.422709,-7.006365,-4.395485,5.200858,-1.394759,0.634127,-2.101938,-8.998126,-8.054982,-9.743463,-5.580179,-4.737774,-2.989024,-2.432635,6.414941],[-0.975457,-8.497824,5.812600,-7.438243,-2.371097,-9.145645,3.265748,0.706641,-8.281082,1.174828,-1.057576,1.110883,9.723040,-6.856978,-9.000757,5.173053,5.445770,4.121250,-6.148181,1.372581,-6.969413,-5.273523,-2.865928,-0.723218,-4.225433,9.607101,4.836429,5.759326,-6.309017,-2.428890,1.597473,-4.127904,0.842737,1.309195,3.485038,4.213316,-4.928807,9.098884,1.758129,8.754254,9.019771,-5.335544,-6.132986,0.824163,-6.726902,8.658617,-3.488149,-7.069597,8.509532,0.941056,-8.348488,3.846477,6.262675,7.062394,-6.476305,-8.542351,7.396810,-3.407782,-0.479745,1.858895,-3.397586,-4.216318,-3.597182,-9.070383,-2.532675,-5.726042,-7.498801,2.486914,-8.476584,-5.097126,-2.510100,6.851952,-8.138116,4.848379,2.191747,3.544532,6.246579,-5.761801,-7.873315,3.592004,3.370028,5.381632,4.479266,5.772330,6.950079,-1.345555,-9.849948,4.441153,-1.348112,9.184155,2.658862,9.383364,-5.262902,-2.196192,-9.134626,1.233089,7.261622,-1.683442,2.493115,1.909393,0.991088,-4.670788,3.656992,-0.179004,-5.436041,0.864877,-4.906800,-2.934821,7.549299,9.052327,2.459623,0.171112,7.376576,3.401070,8.376995,6.122996,9.474439,-0.049965,-4.347557,-3.686680,-0.720523,-8.123790,-2.158334,4.500821,-7.071680,2.609642,1.126273,-2.110364,-6.517580,9.803490,-1.680923,8.851214,6.052945,-8.860239,-3.319232,-9.854803,9.237785,-2.205244,-3.114502,3.003471,-1.353639,-4.613311,5.537113,2.652174,-7.489976,5.101964,9.214854,-6.471168,-7.403834,-9.377598,3.779600,2.578987,-1.871493,-6.342069,7.070812,3.506478],[6.641695,0.754985,-5.724917,-5.575614,4.908237,-3.341448,-6.530329,0.559096,6.412662,-3.310266,5.276023,1.049620,8.710786,-7.904578,7.497982,-1.028927,6.785678,0.199715,-0.322349,-5.682194,7.004421,3.139673,-7.023996,-0.916907,-8.133657,-2.341955,-2.384709,0.787865,-9.852548,-9.950536,4.751207,-9.716492,-4.265931,1.567365,5.234749,5.416034,-9.825064,6.270996,2.231055,-6.723054,-6.518176,3.330502,1.240237,-5.467237,-1.069330,1.434068,1.547425,-6.780960,-3.788336,5.175452,-6.370849,-6.184165,1.251162,7.526963,-2.021245,-1.135361,-1.230398,9.289058,0.728892,7.553925,4.105267,7.846085,-5.078649,-0.518018,3.263046,1.378022,-4.539627,-5.917761,6.722648,8.008726,-5.529560,-8.935819,5.131027,-5.440376,9.436736,7.113888,-6.716372,5.608928,-6.641254,3.262475,8.273733,6.236126,1.617012,5.516135,7.936775,-9.206839,5.180081,6.474774,-9.637955,0.597118,7.794654,-1.678598,7.902663,0.665356,-8.801564,-2.328400,7.845322,7.905964,4.391039,5.744639,0.138256,-6.919945,-9.828545,-1.515797,6.915555,-1.853377,-6.613147,7.219512,-8.091232,2.840205,7.301560,9.071575,-0.594060,6.281846,5.020610,-7.115995,-3.725038,2.980957,-3.494492,-5.787923,8.636222,2.032166,2.797376,-1.825942,3.152130,-8.851316,6.307962,9.654788,2.796818,1.544315,5.202794,3.116553,8.223328,-7.128101,-8.193468,7.054346,9.456365,1.616522,4.763547,-4.649438,-1.659374,-5.354920,-4.895547,1.060476,-1.147194,8.747055,-7.526198,-3.167960,8.844119,-6.891750,8.323990,-1.843896,-5.223938,5.085923,7.458063,-4.826958],[1.856853,8.359066,-4.051230,0.841251,1.036401,-1.478902,3.553471,2.106147,7.261693,9.686521,-5.128489,0.933828,3.940484,-3.071963,-6.552148,-8.364512,4.051315,-7.424764,-2.541883,1.102948,-5.631001,-9.484352,-4.636168,-3.060662,4.875245,-3.527736,9.549857,-2.901237,-9.932826,7.318256,1.265943,-7.541337,0.291887,-5.788812,-3.187164,-0.052512,2.586612,3.864189,-1.639909,1.315998,8.380306,8.877334,0.196466,4.627721,7.788141,-8.535812,9.174685,4.925028,6.981542,-4.738975,9.666590,-8.085608,8.361396,-3.872099,-7.856658,7.622792,7.902398,-8.129717,-0.432126,9.159709,4.543933,-5.150749,-7.200916,3.034859,7.943764,-4.718722,-3.440321,2.921458,-5.241843,-0.626827,5.685717,-7.248831,-0.977951,1.059052,-9.448691,-4.201816,7.891587,-4.825114,2.675474,2.604953,-1.224604,9.973139,5.652192,-2.270640,0.904887,-4.557686,7.411704,9.531641,7.971467,-4.064926,3.637796,4.506106,-3.213314,6.940522,-4.578881,-4.408349,-3.643639,5.571186,4.374184,0.604186,-6.780593,8.700519,-9.805929,-3.160505,-2.860428,2.437403,6.679934,-4.535375,0.849202,3.931288,-8.608059,-5.424404,-9.189148,-3.991684,8.599083,-5.639189,5.109154,2.970182,-5.534986,-4.107621,1.206502,1.708828,-4.700565,-0.667249,7.562552,7.313954,9.903309,-3.599671,-3.421685,6.144731,-8.948206,7.003924,-2.574232,0.128104,-4.740555,2.589264,8.860985,8.348247,-1.253116,4.651722,2.002329,4.499329,-1.979351,-9.994142,4.198475,4.924537,9.616535,1.326176,0.602490,0.284053,-1.144663,9.119717,8.845930,-1.371751,-5.611180,2.732907]], dtype = "float32")#candidate|1603|(9, 156)|const|float32
var_1604 = relay.var("var_1604", dtype = "int8", shape = (2496,))#candidate|1604|(2496,)|var|int8
call_1602 = relay.TupleGetItem(func_660_call(relay.reshape(const_1603.astype('float32'), [12, 9, 13]), relay.reshape(var_1604.astype('int8'), [2496,]), ), 3)
call_1605 = relay.TupleGetItem(func_663_call(relay.reshape(const_1603.astype('float32'), [12, 9, 13]), relay.reshape(var_1604.astype('int8'), [2496,]), ), 3)
output = relay.Tuple([call_1597,call_1602,const_1603,var_1604,])
output2 = relay.Tuple([call_1598,call_1605,const_1603,var_1604,])
func_1612 = relay.Function([var_1604,], output)
mod['func_1612'] = func_1612
mod = relay.transform.InferType()(mod)
var_1613 = relay.var("var_1613", dtype = "int8", shape = (2496,))#candidate|1613|(2496,)|var|int8
output = func_1612(var_1613)
func_1614 = relay.Function([var_1613], output)
mutated_mod['func_1614'] = func_1614
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1590_call = mod.get_global_var('func_1590')
func_1592_call = mutated_mod.get_global_var('func_1592')
call_1622 = func_1590_call()
call_1623 = func_1590_call()
func_895_call = mod.get_global_var('func_895')
func_896_call = mutated_mod.get_global_var('func_896')
call_1624 = relay.TupleGetItem(func_895_call(), 3)
call_1625 = relay.TupleGetItem(func_896_call(), 3)
var_1652 = relay.var("var_1652", dtype = "float64", shape = (2496,))#candidate|1652|(2496,)|var|float64
bop_1653 = relay.maximum(call_1624.astype('int64'), relay.reshape(var_1652.astype('int64'), relay.shape_of(call_1624))) # shape=(2496,)
bop_1656 = relay.maximum(call_1625.astype('int64'), relay.reshape(var_1652.astype('int64'), relay.shape_of(call_1625))) # shape=(2496,)
func_1612_call = mod.get_global_var('func_1612')
func_1614_call = mutated_mod.get_global_var('func_1614')
call_1658 = relay.TupleGetItem(func_1612_call(relay.reshape(bop_1653.astype('int8'), [2496,])), 3)
call_1659 = relay.TupleGetItem(func_1614_call(relay.reshape(bop_1653.astype('int8'), [2496,])), 3)
output = relay.Tuple([call_1622,bop_1653,call_1658,])
output2 = relay.Tuple([call_1623,bop_1656,call_1659,])
func_1661 = relay.Function([var_1652,], output)
mod['func_1661'] = func_1661
mod = relay.transform.InferType()(mod)
mutated_mod['func_1661'] = func_1661
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1662 = relay.var("var_1662", dtype = "float64", shape = (2496,))#candidate|1662|(2496,)|var|float64
func_1661_call = mutated_mod.get_global_var('func_1661')
call_1663 = func_1661_call(var_1662)
output = call_1663
func_1664 = relay.Function([var_1662], output)
mutated_mod['func_1664'] = func_1664
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1106_call = mod.get_global_var('func_1106')
func_1108_call = mutated_mod.get_global_var('func_1108')
call_1675 = relay.TupleGetItem(func_1106_call(), 0)
call_1676 = relay.TupleGetItem(func_1108_call(), 0)
output = relay.Tuple([call_1675,])
output2 = relay.Tuple([call_1676,])
func_1682 = relay.Function([], output)
mod['func_1682'] = func_1682
mod = relay.transform.InferType()(mod)
mutated_mod['func_1682'] = func_1682
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1682_call = mutated_mod.get_global_var('func_1682')
call_1683 = func_1682_call()
output = call_1683
func_1684 = relay.Function([], output)
mutated_mod['func_1684'] = func_1684
mutated_mod = relay.transform.InferType()(mutated_mod)
func_793_call = mod.get_global_var('func_793')
func_794_call = mutated_mod.get_global_var('func_794')
call_1697 = relay.TupleGetItem(func_793_call(), 0)
call_1698 = relay.TupleGetItem(func_794_call(), 0)
uop_1701 = relay.sin(call_1697.astype('float64')) # shape=(1, 9, 13)
uop_1703 = relay.sin(call_1698.astype('float64')) # shape=(1, 9, 13)
bop_1706 = relay.greater_equal(uop_1701.astype('bool'), relay.reshape(call_1697.astype('bool'), relay.shape_of(uop_1701))) # shape=(1, 9, 13)
bop_1709 = relay.greater_equal(uop_1703.astype('bool'), relay.reshape(call_1698.astype('bool'), relay.shape_of(uop_1703))) # shape=(1, 9, 13)
bop_1713 = relay.left_shift(bop_1706.astype('uint8'), relay.reshape(uop_1701.astype('uint8'), relay.shape_of(bop_1706))) # shape=(1, 9, 13)
bop_1716 = relay.left_shift(bop_1709.astype('uint8'), relay.reshape(uop_1703.astype('uint8'), relay.shape_of(bop_1709))) # shape=(1, 9, 13)
uop_1718 = relay.log10(call_1697.astype('float64')) # shape=(1, 9, 13)
uop_1720 = relay.log10(call_1698.astype('float64')) # shape=(1, 9, 13)
func_1590_call = mod.get_global_var('func_1590')
func_1592_call = mutated_mod.get_global_var('func_1592')
call_1721 = func_1590_call()
call_1722 = func_1590_call()
output = relay.Tuple([bop_1713,uop_1718,call_1721,])
output2 = relay.Tuple([bop_1716,uop_1720,call_1722,])
func_1740 = relay.Function([], output)
mod['func_1740'] = func_1740
mod = relay.transform.InferType()(mod)
output = func_1740()
func_1741 = relay.Function([], output)
mutated_mod['func_1741'] = func_1741
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1740_call = mod.get_global_var('func_1740')
func_1741_call = mutated_mod.get_global_var('func_1741')
call_1771 = relay.TupleGetItem(func_1740_call(), 2)
call_1772 = relay.TupleGetItem(func_1741_call(), 2)
func_1277_call = mod.get_global_var('func_1277')
func_1282_call = mutated_mod.get_global_var('func_1282')
var_1775 = relay.var("var_1775", dtype = "uint32", shape = (1404,))#candidate|1775|(1404,)|var|uint32
const_1776 = relay.const([[-2.239971,-5.372183,3.968328],[-6.521148,2.172125,1.256949],[-5.677432,-4.680686,-9.768582],[9.107956,-7.214445,-4.639237],[-3.063086,2.976770,-1.184117],[-3.450826,8.351554,8.434028],[3.918799,8.485793,-3.783024],[-9.639662,5.218715,-5.310926],[-2.681099,-6.287080,7.509216],[-3.067383,-1.595448,-0.363729],[1.832126,9.891840,1.981230],[4.870471,8.068476,9.863584],[4.657773,-5.297830,-3.628592],[-6.966312,9.052168,8.270846],[6.350334,-0.183004,2.082371],[5.057974,7.947776,6.440822],[3.034610,-3.401431,0.326647],[-4.960479,9.253929,0.845130],[5.496787,-5.709646,-6.204795],[2.032181,7.374271,9.313894],[-9.744002,-3.012796,-7.244450],[-4.438202,-6.515969,-2.235573],[-4.370339,8.063646,3.721151],[0.161580,-9.327248,8.179136],[5.952577,0.832333,1.645202],[-9.320574,7.138719,6.073833],[-2.918970,8.428903,-9.399248],[6.349627,-8.278959,-3.606230],[4.477511,5.363853,6.939403],[4.198523,2.321608,-6.341509],[7.297174,5.053560,7.643660],[-7.300287,-0.185176,-5.929832],[3.788008,-4.044183,-9.137703],[-8.961485,-2.446393,-1.523459],[-6.729916,1.118175,-6.657254],[-0.689620,-3.104598,-6.873287],[1.537308,0.952571,-9.551808],[-7.534151,2.916091,4.696079],[-5.954900,-1.658518,3.674734],[-6.957439,-0.406425,-2.634987],[8.700693,-4.039455,-7.744439],[4.103490,-2.010499,0.027240],[3.368185,-5.707651,-3.945139],[-6.850687,4.856321,-9.232574],[9.020997,9.045680,-9.929285],[-0.686137,-4.087351,2.445574],[2.844718,-1.399336,4.226840],[-3.892439,-2.506699,-0.513139],[4.249026,4.743378,7.636591],[1.664429,-6.306220,-3.911880],[-7.738353,7.573653,8.436841],[2.384890,1.351105,-8.238666],[-4.064850,8.231403,-9.559796],[9.450591,1.975502,-7.873820],[-1.172631,9.388481,-6.073536],[9.573915,8.718767,-6.508494],[2.291669,4.308218,6.164919],[-6.651682,0.098781,-2.244562],[4.900245,4.521675,-7.377218],[5.206423,1.084748,-3.530499],[-3.997229,4.919000,-0.795589],[-4.601893,4.998858,-9.490051],[-7.986925,-8.187796,2.881603],[6.524064,6.900782,7.769289],[-3.616036,-2.217907,7.679377],[-0.898858,3.934689,6.506912],[3.795024,7.120151,-2.242907],[3.973528,-4.051467,-9.756697],[7.108974,-9.941527,-7.717732],[-1.968047,-3.788063,-6.288732],[0.964205,1.839438,-0.303513],[-2.869658,6.075327,2.310541],[-2.635139,-0.396553,-9.600835],[-0.405813,-5.915735,-2.151834],[-5.676225,6.006221,-5.958378],[-8.314807,-6.605000,-5.495302],[9.075747,-6.794967,-9.219702],[-1.866990,2.380018,-1.042171],[3.361483,3.848336,0.778298],[-8.718916,-8.851326,1.699858],[9.823325,5.599547,0.080925],[8.497408,-2.728347,4.210513],[6.403819,2.035714,-9.812877],[-8.927369,-0.735704,2.267201],[-4.672807,7.500622,-0.700894],[5.097358,5.977823,8.062942],[-9.178048,3.748504,3.777038],[9.405354,-1.996820,9.964212],[-3.603658,-9.640148,0.483788],[0.361128,5.940582,-8.010026],[1.935666,3.292110,-6.086750],[9.594368,6.635838,-3.257770],[-1.037248,3.386453,-3.668202],[9.447826,0.175793,-1.344929],[-7.798498,-0.791723,-6.197316],[3.151284,-9.674128,-6.133520],[8.471604,8.362067,-0.417004],[0.875564,4.475014,0.389529],[6.473047,6.867368,-4.988224],[0.918494,2.650826,-6.910595],[9.397780,1.621922,3.435287],[-4.748870,1.956216,5.425149],[8.469122,-7.883703,-5.007428],[6.782221,9.418983,-4.272803],[-3.275465,-7.356655,2.608283],[1.775125,-7.485702,-2.092456],[4.235729,-0.684830,-9.950524],[-0.888683,1.729432,-5.511901],[0.457558,5.225564,-6.046032],[-1.788565,-4.520593,-2.867494],[-2.001889,-5.146572,-9.090344],[-1.120709,5.248990,3.221275],[-3.942527,-1.537103,-0.120498],[7.361665,-3.034764,-3.378937],[-1.969482,9.544872,2.098504],[-6.721997,4.363233,-3.259965],[1.574780,3.693937,-8.401177],[-0.833509,6.977662,-4.495388],[-4.864495,3.301227,-3.474318],[4.127796,-8.552909,7.358201],[2.788137,3.210378,-5.474917],[-5.967780,-1.631966,3.462640],[-4.641413,-5.902499,-3.718067],[-1.774446,-7.652673,0.410302],[1.152471,-2.109151,6.263344],[-0.499859,4.603751,8.536102],[1.846232,-2.855611,-5.846828],[-3.310802,1.457269,-4.915309],[7.895945,-4.663609,-9.285343],[4.543361,5.187523,9.586583],[3.055866,9.649890,-5.315070],[6.689195,-5.028362,9.736559],[3.606010,-8.897327,-0.597723],[-7.715958,2.593016,-8.725422],[-4.928066,3.804735,3.835689],[-2.699139,-6.942958,1.420310],[-0.689227,5.497168,-7.969942],[2.740484,-0.150432,8.236252],[-2.534553,8.939605,-0.190608],[7.074912,8.711413,-2.311366],[-8.851416,8.575705,-7.785995],[2.326261,2.991035,-1.953501],[8.588162,9.983543,4.279573],[5.577965,-5.145309,5.996936],[-0.012706,1.357550,4.220428],[-2.189585,-5.115742,3.490765],[-3.603566,-7.669708,9.569164],[-5.694037,-8.881557,-1.050439],[-8.412920,-5.138293,-4.461355],[6.467561,-9.704483,-8.662786],[9.735565,3.592019,6.175467],[-7.456382,4.003576,8.723021],[5.937611,-1.017884,-0.101684],[0.821506,-1.775023,8.840404],[8.650030,5.584420,-0.778440],[-2.025353,-4.821688,3.257141],[-1.942097,0.474244,-4.289021],[-5.958832,-9.934881,-7.825217],[5.086471,5.577188,5.908422],[3.234972,-9.347374,-7.500842],[-6.024086,-6.124790,6.592378],[-8.740308,0.488235,6.070782],[7.478174,-1.423493,-2.259394],[-5.716710,-4.762294,0.629843],[-6.466653,2.679793,4.051832],[7.616825,-1.003211,-4.754368],[-1.719248,5.405301,3.762245],[1.705584,-9.440297,-8.670620],[-8.477616,-5.512922,8.999896],[-9.539071,-3.358733,-2.985712],[-3.338436,-9.348790,0.095374],[-4.045528,8.642903,9.973222],[-6.415137,2.209818,-5.821538],[-5.952816,-2.992212,-8.201509],[-5.272567,-6.623653,-8.333456],[0.397225,-9.278271,0.048506],[-5.727740,2.795733,0.557227],[-4.648616,-1.167835,-7.802576],[-1.478791,1.778224,6.100298],[-6.199478,6.686393,1.529368],[2.608856,-2.554446,-5.330269],[1.358673,3.891341,-3.160867],[9.407258,-2.128209,0.619588],[7.258378,2.683215,-4.460081],[-6.672997,9.659252,5.898330],[4.604678,8.779172,1.615722],[4.096623,-8.185650,5.783402],[5.983010,-4.572643,-6.968928],[-2.272071,4.585282,7.051905],[-0.451590,-2.414508,5.571152],[-5.210134,-6.178357,-3.292777],[8.120834,-3.448520,-7.057995],[7.151634,-1.701122,8.823009],[5.182897,-4.390359,-4.302869],[-8.337645,6.009085,-8.958494],[1.320618,4.168433,-1.770841],[9.124692,7.746396,5.575444],[6.001007,7.211161,-5.246866],[8.613065,-9.331655,-3.875239],[7.725613,-5.890255,5.372757],[3.125685,4.201892,-8.650142],[-4.783866,-9.844709,9.982892],[9.850781,-2.931589,0.099854],[7.078363,-5.982637,-5.829609],[-3.172467,8.336583,0.889003],[9.812486,8.030645,5.684019],[-5.302954,7.220254,-3.011213],[1.669202,-1.076573,-7.385380],[-1.637898,-2.775261,-6.309092],[-7.615498,-3.098306,7.435613],[-6.147174,-0.721701,3.861536],[-6.596768,8.774417,-1.957268],[-1.232711,1.843797,6.694464],[-0.331717,4.011398,-6.775661],[-1.769466,0.736229,3.669506],[-6.188112,7.296482,6.956870],[-7.383602,9.031112,-5.868739],[4.302634,8.443212,7.875628],[2.148449,-0.753675,-8.921330],[-8.693835,9.859661,1.159693],[-6.993323,6.278712,-6.240772],[-5.197066,-9.605104,-3.059017],[-8.945693,0.514531,-9.792650],[-3.540204,3.831563,-9.514306],[-8.887187,-7.065677,-9.069695],[-7.230694,0.676476,0.425080],[-7.473105,-3.576062,5.848135],[8.476546,3.487280,8.666963],[4.061897,0.681318,-8.405570],[-6.263270,-5.978889,3.986293],[-2.606594,3.589184,3.543465],[0.503738,-1.285409,-2.137362],[-4.395479,4.493553,-2.813338],[5.644004,8.827561,-4.276724],[3.951280,-1.936985,1.566166],[-6.239774,7.091843,9.914006],[-5.808511,-1.512768,3.849323],[-4.743122,2.893979,4.255359],[-9.875306,6.013184,0.770647],[-6.802404,6.318953,-1.426657],[-5.265908,-4.444491,-2.974476],[-8.654645,1.510808,3.283666],[7.615343,-0.941416,-4.025172],[-3.793911,8.634015,-1.969442],[-5.653291,6.543290,9.026194],[-4.592744,-4.738430,9.389643],[4.844908,-6.536329,-4.656443],[7.873306,1.924553,-3.048255],[7.896364,8.101787,9.310418],[0.332507,-7.246569,6.802442],[-9.134804,9.528984,-4.201444],[3.821569,-3.498734,-6.051660],[8.628791,-6.494520,-0.063220],[-4.014068,9.349086,-4.370132],[0.926429,-2.718758,-6.063439],[8.964781,-9.164682,7.290854],[1.795196,-6.283515,-6.499832],[8.368569,-6.484391,5.549931],[-3.074428,-3.873071,8.555867],[-3.979634,-6.099912,-5.809707],[-0.824641,9.103080,-7.868527],[-8.483592,1.752028,1.898698],[8.365062,6.511799,-1.746372],[-2.662499,2.178946,-9.943505],[8.590447,0.819827,-7.414982],[-2.348264,-7.144302,1.695499],[6.980260,-9.393053,-8.277780],[-4.785214,-3.060471,7.316306],[-8.256629,-6.681520,-2.132145],[-9.964365,0.777454,8.446435],[2.868988,2.900307,8.564314],[-0.416700,-1.472302,9.403180],[-1.710567,-4.526923,1.112677],[0.435968,-5.711932,8.251493],[5.033667,-0.624063,-3.050084],[-4.728410,-5.664022,8.435557],[-5.499748,-4.926047,-0.171502],[6.838962,2.813646,-0.456548],[3.183760,4.620883,9.993669],[-2.101836,-9.406100,8.564320],[-3.286243,0.075757,0.500847],[-3.625977,-3.779008,-7.495830],[-4.198981,-8.200580,-1.391292],[-7.974187,-2.218933,6.697868],[9.607214,-9.606167,-2.967759],[-2.703343,5.015893,3.914290],[-0.584729,-8.587209,-4.579824],[7.876954,-8.929306,6.480918],[-9.213904,-4.599870,4.220394],[-8.377940,5.352356,-5.096845],[1.895303,-0.874722,-8.466366],[0.379034,1.953746,-2.143327],[0.048007,-0.903899,5.947762],[-0.946502,-2.069808,-9.448078],[-4.443977,-1.955784,-7.573280],[0.580784,4.216273,-5.169771],[-0.735764,-8.089380,-1.480616],[1.060939,-8.740383,0.254623],[5.670332,-4.605962,8.244866],[8.401181,7.131382,7.771313],[8.896187,6.827364,3.923686],[-4.785983,-3.295183,5.139567],[9.557236,-5.824468,9.293766],[8.303550,3.695809,-9.281049],[6.383606,-1.380553,0.444597],[-7.219717,-0.096738,8.056866],[1.455280,5.748812,-1.204717],[-8.943012,-5.807241,0.767737],[3.475970,-0.321999,-0.531756],[7.744339,2.885123,0.992049],[6.311350,1.337485,6.554172],[7.408096,-4.611316,-8.311470],[-1.014403,3.954562,8.443230],[-4.736319,3.775399,8.760737],[9.102539,5.463709,-3.672003],[4.841810,-7.069554,-0.196873],[8.067075,3.729933,-7.760260],[-7.199555,-9.426561,3.645050],[-7.030947,-1.960685,2.175937],[-8.055675,-5.043169,7.169777],[-2.782475,3.423828,2.566015],[-9.206331,8.064547,-1.111042],[-9.841733,-2.896339,-8.354450],[-1.144400,3.732439,9.302956],[6.685790,5.176154,0.094899],[-0.452553,3.407157,4.341792],[4.526728,0.284209,5.010564],[1.172930,-4.954269,-5.794304],[7.512321,-4.431603,-8.515691],[0.639054,0.591376,5.610877],[3.960681,-4.964466,8.766293],[8.996729,3.297200,-8.721063],[0.043183,-8.754507,0.557368],[-2.463393,-8.748022,-9.084573],[-3.419334,-1.633938,-9.904609],[5.663619,8.373020,9.615458],[9.828651,-2.486540,3.350667],[5.584192,-7.654284,5.954442],[-0.555708,-6.312084,-9.756129],[6.477938,2.554822,-2.045781],[-5.505033,2.689769,4.485921],[-2.415237,-9.776852,3.874972],[4.122477,-8.762413,3.132192],[-5.333558,4.353190,-3.928321],[3.938153,0.728559,3.833891],[-3.172699,9.590189,1.461169],[-6.064075,3.212826,-7.787164],[5.303334,1.375813,7.216159],[0.481691,-9.547724,9.141258],[-3.010125,1.488997,0.443409],[4.583189,-8.956291,6.931668],[3.553238,2.842457,-4.964131],[4.665780,-4.119519,2.906242],[0.981626,8.358324,-4.415409],[-6.414058,4.151127,-8.983195],[-0.889674,-5.115904,-4.920331],[9.792524,-1.828180,-4.048413],[-2.243606,-1.417386,-3.657798],[3.122395,-6.399968,3.903002],[1.564819,4.622474,1.474977],[6.876736,5.669343,-1.850529],[9.443962,9.619347,8.606128],[3.554253,5.085587,-5.675097],[9.698673,-8.634017,-0.284947],[-9.939271,3.306566,-4.654495],[4.249291,2.621593,1.052178],[-6.771918,2.852619,-4.572860],[4.215237,-8.666142,8.556797],[-2.686180,-5.522680,-9.261489],[5.131275,-2.657394,-2.980885],[0.292815,-3.291002,-6.378781],[3.805452,9.135821,-0.948317],[5.588528,5.971906,6.088233],[-5.324358,4.913897,-5.913240],[9.907240,7.766285,-3.249481],[-7.765212,9.377205,-3.902217],[-8.207274,6.797977,-9.290971],[-0.717501,9.574800,-2.950257],[-0.886102,2.612516,8.922162],[-0.324486,3.856054,9.541606],[2.996421,7.789897,-0.971664],[9.220620,3.331984,-1.120914],[-6.594377,5.571314,-4.383055],[-1.734327,-8.337246,5.874475],[1.921273,-3.290672,8.351857],[2.674957,9.084839,0.798414],[-4.309429,5.225304,2.228266],[-1.609581,-7.993321,-5.327149],[6.001309,6.465070,-4.887093],[7.510634,-6.235796,-7.755337],[0.701413,1.005502,-0.317827],[1.250581,5.347824,8.996105],[-5.106890,-0.365056,0.554966],[-9.821112,-9.997185,8.628007],[-9.542890,-8.430658,-0.043781],[-9.769689,-2.253805,2.902769],[-0.581706,-9.680022,4.180114],[2.104800,2.351980,-5.644566],[-3.662586,2.415538,-4.426343],[0.477024,4.674129,-4.473081],[-1.534219,-4.687812,-1.904979],[4.865494,-3.419710,-3.450950],[4.415538,5.271167,5.564978],[-7.939524,-2.723199,-0.316464],[-7.854918,8.683862,-1.059260],[8.062934,-0.686820,0.827745],[6.501350,-0.683757,-1.747805],[0.768312,-3.401730,-0.867339],[-2.164312,8.492663,-9.587051],[-1.447653,8.905240,5.234048],[5.416317,-3.383193,-1.578441],[-7.850886,-0.941091,6.916084],[3.404930,3.715672,8.554663],[9.421153,-4.355245,4.113116],[9.438275,7.964861,7.472541],[-7.670082,6.034359,7.979066],[-7.055320,-3.581723,-9.376062],[-7.683313,-3.749625,2.835267],[5.203533,-3.646504,7.774956],[2.557818,7.524561,4.723506],[8.679130,0.989983,-0.072761],[-8.619790,-8.025726,8.658511],[-9.440944,-1.478574,2.450324],[-5.693326,-3.366257,-0.526219],[-9.335382,-4.395847,-3.748275],[0.430548,5.228175,1.163303],[0.050489,8.635065,-8.014492],[-7.451107,-3.206555,7.925509],[-1.063941,-9.571163,-9.480223],[-7.417198,-7.476252,-3.511092],[-9.422244,-3.512852,-4.737002],[6.183931,7.535307,4.343305],[4.265626,-6.592089,-5.798499],[-6.886913,-1.785806,-5.308267],[8.332253,2.413746,2.619684],[5.186841,2.740713,-5.497550],[5.205701,3.286489,-2.083747],[-9.134268,-0.831586,0.647985],[-6.899797,2.816692,-4.552422],[-6.632557,-3.004053,-7.022694],[0.878985,7.841676,5.776652],[4.275667,1.776161,-1.424549],[4.601681,-4.708972,6.466774],[7.656633,7.140318,-0.806288],[-7.674460,9.272552,0.578103],[-7.220780,5.270373,0.595190],[7.012802,1.215244,-6.741602],[-1.150583,-2.866087,5.073798],[-3.297412,-6.275251,-0.358570],[-2.930326,0.900550,8.197569],[6.632974,7.404960,-0.621566],[5.421933,6.317618,-8.766150],[-7.473679,-1.557039,1.882457],[1.299516,-0.255028,5.512048],[-5.820340,7.786737,-7.637290],[-4.327735,-7.108867,-6.854664],[3.848973,7.224247,7.874508],[-6.035970,-6.762088,-9.453880],[-1.044222,-4.066040,6.425201],[0.994314,5.088744,1.256211],[-7.483168,5.369940,-9.442468],[3.830023,9.902153,-6.412724],[-1.531621,3.064043,5.284715],[9.001386,6.708047,-2.211077],[7.370571,-3.118957,-1.444323],[-3.609451,-1.663211,-6.219671],[-0.991355,-5.249581,-7.720310],[-1.266300,6.222129,7.917516],[7.496638,-0.823475,-4.097957],[-5.495194,7.991817,-9.539248],[-5.298071,-4.627663,-1.304712],[0.165558,-3.985768,7.520007],[5.693814,0.643420,6.635231],[3.374084,9.190200,2.935105],[0.092393,-1.226069,-3.036763],[-9.089982,5.828565,6.730108],[3.225693,-7.465385,-7.171576],[-3.354313,7.869369,-8.416321],[1.092000,-8.607627,-8.681854],[-7.448807,9.054514,-7.006788],[-8.809742,-7.981995,7.186896],[7.597163,2.658867,-7.028512],[5.971484,5.713817,-0.150105],[3.323912,5.487839,7.715241],[9.461404,4.825974,-7.335507],[5.834262,8.910650,-1.132837],[0.919783,3.032545,-9.168436],[5.237660,9.820472,-3.338764],[-1.645895,0.250182,2.994407],[5.378995,-8.224861,6.037144],[-1.771756,4.398762,0.521823],[-5.492852,-5.437666,9.314542],[8.569328,-6.685459,8.987618],[7.570235,9.678610,7.389488],[2.699388,9.530962,-5.694978],[-8.641702,1.566779,-2.348481],[8.365269,-3.381622,-4.360362],[-3.273826,-7.083261,-9.582638],[-6.729655,6.954327,-3.398440],[-0.158509,-3.514133,-3.936713],[4.164797,6.866374,-0.051034],[4.046289,6.179325,7.960818],[7.794568,5.311982,1.668022],[9.276119,3.217228,9.695770],[9.389611,0.993290,2.566006],[-6.161916,-4.577574,-6.274915],[0.772348,3.823086,8.768775]], dtype = "float32")#candidate|1776|(507, 3)|const|float32
const_1777 = relay.const([-4,-3,4,9,-9,10,4,-1,3,3,1,5,-1,7,8,6,5,-5,1,8,4,1,5,1,1,3,-3,1,-1,5,8,-5,3,3,-6,5,9,8,-9,10,-2,-3,-3,-1,3,-6,-7,6,-1,-5,10,-6,7,2,6,7,-7,5,5,4,9,-8,3,10,3,-10,7,-1,-4,2,7,8,-2,-1,6,-2,9,5,6,-3,-1,3,1,-2,-8,-4,4,8,4,10,7,9,5,-6,-9,1,6,-8,9,3,-4,4,-9,-3,-2,-5,8,4,7,-4,3,-8,1,-5,6,10,4,-6,-4,6,-6,4,-4,-7,10,-9,9,1,1,-10,3,5,-2,10,3,-4,6,3,8,-3,1,1,-7,-8,8,7,8,9,-4,7,-7,-6,-1,-5,9,7,-9,-10,1,-7,7,-10,-6,6,10,-9,6,-1,6,-8,-5,-5,-5,3,4,-5,-3,-8,6,1,7,4,-7,2,3,10,-7,2,-1,-8,-6,10,7,-2,-1,-10,5,4,9,9,8,-7,4,6,8,-4,6,6,1,-6,-1,3,-8,-9,-4,8,8,8,-7,-9,8,-9,-9,-8,3,5,10,-1,6,7,8,6,3,10,-8,-4,4,1,-8,-4,-4,-6,-8,5,7,-7,-9,3,-7,-1,1,3,9,-9,-6,-10,5,-5,3,8,-5,-4,-10,-6,7,-3,-3,6,-4,-10,1,1,8,-8,7,8,2,6,-9,8,2,-4,10,8,6,-4,-10,10,10,-8,5,9,-7,9,9,-2,1,-5,-6,4,-1,-7,-3,8,7,2,-1,1,-8,-4,10,-8,-1,-3,-6,-9,7,-9,-6,-6,2,-7,9,-10,10,3,-9,-10,-6,9,10,-8,-7,9,-3,-8,-5,9,-3,-2,-5,3,-8,6,6,5,-5,-4,9,6,10,-8,-9,10,7,6,-9,-10,2,10,-3,-7,-7,3,-8,-1,-4,-5,7,4,-9,8,9,-4,5,-2,-8,-9,2,4,-10,10,3,7,-1,4,3,-8,1,7,8,2,-8,3,-2,2,2,-8,-7,5,-7,-8,2,-5,7,-8,-1,1,3,1,-2,9,-5,7,1,-10,2,3,5,6,9,-9,6,2,-5,-5,6,-1,1,4,9,-4,-3,4,4,2,-5,4,2,-1,8,3,1,8,-1,6,8,2,7,-1,-7,-4,5,-4,-3,3,-10,-9,8,3,-10,1,10,-1,-9,-6,9,-9,-10,-1,-9,-6,1,-9,1,-10,2,-10,5,9,-8,-2,-5,-1,-5,7,9,2,9,8,-7,2,10,-2,-7,-10,-6,-2,-5,-5,9,4,-7,7,2,-7,-4,8,5,8,1,-7,-2,9,3,-8,7,-10,2,4,3,-3,-2,-10,1,1,5,10,-8,-5,-2,-3,8,-7,1,4,-3,-8,6,-6,-5,10,4,9,8,2,10,-2,1,7,-1,7,-8,2,4,-2,6,10,3,-3,7,10,3,6,-3,9,3,-9,10,6,1,2,9,7,-5,-2,6,-10,6,-4,-8,-3,6,4,3,-1,-8,-2,-6,1,-9,-4,7,-5,-9,-1,1,-9,-6,-4,-3,-7,-7,7,8,-7,-1,2,-4,-2,-6,-1,7,-6,3,5,-7,4,-1,-9,1,6,6,1,-6,4,-5,1,-5,6,8,-3,-4,-9,9,4,4,3,1,-10,4,3,9,1,2,1,9,-5,2,-9,-3,-1,4,-9,-6,4,-2,-1,-10,4,-10,-1,8,5,1,-1,7,-3,5,-8,10,-3,10,1,6,1,10,-6,-10,-10,-5,7,-10,2,2,-6,-3,-5,3,-2,-1,7,-7,-2,6,-9,-3,-10,9,-10,-4,-5,7,8,6,-1,5,2,2,10,-6,-6,7,1,2,9,10,-2,4,7,2,-8,-7,-10,4,7,-10,10,1,-3,5,-8,8,1,10,1,-7,10,1,5,9,-7,4,-6,1,9,-3,-2,-7,-2,-1,10,2,-6,-9,8,2,6,-5,3,4,-3,-9,10,7,4,3,-8,5,9,6,3,-5,5,3,-5,2,-6,2,-8,5,7,-7,4,2,7,1,3,2,5,6,4,7,-8,5,-9,9,10,-4,7,10,-1,5,-8,-2,2,-2,-7,-4,9,2,-2,6,6,-6,4,-6,-8,1,-7,8,2,-4,2,-5,-9,-1,-9,-3,-4,5,-7,-5,1,3,-8,7,-5,-10,-1,8,-3,1,5,-6,-4,-9,3,8,-7,-3,-3,6,9,3,-10,-10,-1,6,4,4,-6,-9,-6,-2,-7,1,-3,-6,-2,4,1,6,4,5,-7,-8,-4,9,-3,7,8,-9,-5,-5,3,9,-5,5,9,9,-1,-7,3,8,-1,-5,-5,9,-9,-4,-8,-8,8,-10,3,4,-6,2,-9,5,-5,6,-7,9,3,-8,-8,2,10,-4,-3,9,-9,1,1,-7,-8,-6,2,-1,-1,-6,5,-5,-3,-10,-7,-8,-9,-4,6,-7,-6,9,10,-3,-9,8,-8,-1,-1,-9,-9,7,-5,6,-4,-6,-8,10,-5,7,-5,-9,9,6,-8,-10,-2,-5,-8,10,6,6,-3,9,3,-3,2,-1,-2,1,-2,7,8,10,-2,9,8,-9,-4,-8,-6,-5,-3,-1,5,-4,-3,-2,-2,-6,-3,-2,4,2,2,7,1,10,10,10,3,6,-7,-6,9,5,1,-4,1,-3,6,-4,-1,4,6,-9,-9,5,-1,7,5,5,1,10,-5,-8,-2,7,-5,-5,4,9,8,1,7,1,-2,-7,-6,-9,-8,2,-7,3,10,4,1,9,-9,9,8,7,8,7,9,-7,-10,8,7,-1,9,-3,1,10,-4,-6,-2,-4,-5,6,-6,-2,1,-4,-1,-7,2,-1,-4,1,-1,-10,-9,3,7,9,-2,10,3,4,-10,-6,-1,-3,9,2,-2,3,9,7,-5,9,-9,3,-4,-10,5,7,5,2,-6,6,-1,1,-4,5,-7,9,5,8,6,-4,-3,1,-10,4,9,6,-8,9,-9,3,1,10,5,-5,-7,4,-7,10,7,-5,-3,-6,10,-4,10,-5,-3,-8,4,-9,-10,8,9,-5,1,5,-3,-6,-6,3,2,-8,-10,3,-10,4,-7,-7,2,3,4,-9,8,-9,8,10,-8,6,7,-4,10,-6,2,-3,5,-8,-3,7,4,6,8,3,8,-7,-7,-1,1,-5,-9,5,-6,7,2,3,-10,8,-6,-5,2,-9,-3,7,-6,-4,5,-2,-4,10,-1,-2,3,8,-4,-4,-2,-5,-1,-8,-9,3,2,2,-2,-4,9,-5,-9,-10,3,7,-6,2,-7,6,1,-7,-5,-2,5,-4,-3,7,-10,-3,10,10,-4,-5,1,6,-1,8,6,-4,8,-7,5,-3,10,9,7,6,-2,-4,-2,-6,7,-10,-5,-6,-2,-4,-5,-3,-2,-5,-2,4,-3,6,1,10,-7,3,-5,-5,-1,6,-5,-1,1,-7,8,-6,2,-10,-5,2,-3,6,-1,-6,9,8,-1,2,-6,5,-2,7,-3,6,-7,4,3,-7,2,-7,-7,6,6,10,-6,-6,-3,2,-7,-8,9,4,1,-8,-7,3,-2,10,6,9,-4,-10,-9,-5,-3,3,-4,-3,8,-7,8,9,-10,9,-10,7,5,-10,-2,-1,9,-6,-10,-5,2,-5,3,-2,6,6,2,-9,3,-1,6,9,-7,6,7,8,-5,-2,1,-9,7,-1,1,6,-9,10,-3,1,-5,9,-10,3,-4,-4,-1,1,10,-7,-2,-8,1,8,-6,-4,-6,7,2,3,-7,10,-2,5,3,-5,-4,7,1,-9,-4,10,-6,8,-6,-3,-8,2,1,9,9,8,7,1,1,-6,3,-7,-4,-6,-3,-5,1,10,5,6,5,9,9,1,8,-7,3,9,-8,-8,-3,4,10,-5,-3,-9,5,2,8,6,-9,6,-8,9,-9,8,2,5,8,-9,1,1,7,-1,-5,10,9,-5,-10,-4,-3,-2,-6,1,9,7,7,7,1,1,-5,1,-7,-3,-5,8,9,5,1,1,5,1,6,-7,7,5,7,8,-6,-2,5,-9,4,-10,-9,4,-9,-5,4,-3,10,-3,-6,2,1,3,8,10,5,4,3,9,2,8,-5,-6,-9,-1,-1,10,-9,-10,4,-8,4,-4,-9,-8,6,6,6,-8,3,3,4,-8,6,-1,-9,-1,10,-9,-10,-7,-2,-10,5,7,-7,3,-4,8,10,10,8,-2,7,-7,-8,-5,-9,1,3,3,-8,5,1,10,3,-1,-1,1,-4,-5,5,3,5,10,-9,9,-1,-9,-6,-6,-9,1,-1,8,-3,6,-4,-1,-10,-6,6,-8,10,1,-6,-6,-5,-5,-1,10,5,-3,-4,8,7,-4,-9,-10,-2,4,8,-3,9,9,-10,-6,-4,5,-5,-1,7,5,-2,5,-6,9,1,8,9,-9,-6,-3,-6,-8,1,3,-9,-4,-3,-2,-7,6,-5,7,-2,3,5,-10,-6,4,-10,-5,-5,-9,-9,-1,5,6,2,4,-2,-3,6,-8,4,2,-8,4,-8,-6,-7,3,2,2,3,-7,-6,3,-6,6,2,-3,-7,-8,1,1,-8,-7,-6,-4,6,5,4,2,1,-7,6,-5,-6,-7,6,-4,-2,5,-10,6,-2,6,1,7,5,-6,5,-3,4,-9,-8,5,4,10,10,-9,-9,10,2,3,-1,-2,10,-9,-7,-7,1,-7,-3,-8,4,-7,2,-4,-5,6,6,4,5,-10,-4,-7,8,-10,4,-4,-5,3,10,-4,4,3,-7,-6,4,5,3,-3,-10,4,2,2,10,-7,-3,-5,2,-9,-7,-3,10,-9,4,6,8,7,9,-9,5,9,-8,4,-2,-1,7,2,-4,2,6,1,9,3,-7,5,8,-7,8,-6,-6,1,-3,-3,-7,-4,-5,6,2,2,-10,1,-2,-4,-2,1,7,3,9,8,3,7,-8,-3,-2,2,-3,2,1,-4,-6,3,10,-5,2,-3,5,4,-4,-4,2,-10,10,8,10,6,-10,-9,-5,-7,8,-3,-1,6,5,-4,7,2,8,9,-4,3,-6,-4,9,-9,1,-9,10,-8,5,-2,5,-2,-5,-10,7,-3,-8,-5,8,3,9,-10,7,-6,9,7,-3,9,-9,5,4,9,6,-8,-10,-2,5,8,3,4,-3,7,9,1,7,-4,-5,3,-10,6,4,-9,-1,10,-2,-5,7,-10,-10,-6,7,5,4,-3,-9,-4,-6,-1,-1,-10,-7,-9,-9,-3,-10,-3,9,-8,8,-7,10,-9,4,5,10,2,2,-6,-10,9,9,6,-4,1,6,6,-9,4,4,1,-7,-5,-4,-2,-9,-4,-7,-6,-3,-10,5,6,-2,9,10,-3,-1,-7,-9,-9,2,-7,-4,-9,-10,-9,-8,10,5,-7,9,3,-8,5,1,-6,-9,-3,5,-3,2,3,7,1,3,9,10,2,-4,7,-4,10,7,-8,7,9,-5,1,-6,-6,-2,2,8,-10,-2,-2,10,-10,7,-9,-3,-6,-1,-2,1,9,-4,-5,-5,-7,-2,3,-2,10,3,4,10,-4,-8,9,6,-5,8,-5,5,-2,-2,2,10,-3,-1,-8,-8,-1,1,-8,-7,7,2,-10,3,-5,-7,-9,9,7,-9,-9,9,3,-2,-7,3,6,-8,-2,6,-8,-4,-9,8,-1,3,4,-3,-4,-8,-4,6,6,-6,-5,-6,7,-9,-1,4,-4,5,1,-4,1,-5,-3,-4,-5,7,-5,2,-1,8,-9,-5,1,10,-5,6,-6,-2,-2,-8,-9,6,8,-5,10,-4,-8,-2,8,-1,-6,-1,-10,1,-1,8,6,1,-1,-6,2,9,-8,8,-3,-2,-10,1,-6,-1,-5,-7,10,-6,6,9,3,-9,9,8,-8,2,3,-7,10,-8,-6,6,2,-4,-6,-8,3,2,5,-7,-10,3,4,4,10,9,-6,-10,6,9,-1,1,-4,-9,2,-2,-4,-10,6,2,-8,10,5,2,-5,5,8,1,10,-1,-5,7,-7,-8,10,9,-3,2,10,-3,-7,-3,6,-6,-6,-9,9,8,2,1,6,-2,2,10,9,8,-2,10,-7,-2,-3,-1,6,10,-5,-2,2,3,9,5,5,-4,6,-4,-2,7,-7,10,10,-3,-3,-10,-10,-1,4,-9,-1,7,6,-4,10,-4,10,2,3,6,2,-3,7,-3,9,-4,-4,-2,4,9,-5,-1,-6,-6,-8,-7,6,-5,1,6,10,2,10,-4,-10,-6,-5,-10,10,2,-8,-8,-6,-7,-9,-8,-10,-4,-6,5,-1,-1,-10,7,-8,-7,7,-1,6,-1,9,-5,4,1,8,-8,-1,-5,-1,-10,-1,-7,2,-1,-6,-5,-2,7,-2,7,-6,-8,3,7,-6,-7,6,3,-2,8,7,-4,-6,6,-9,9,-6,-2,2,5,8,5,5,-2,4,-6,3,-9,-3,6,-6,9,2,2,-3,-10,-8,5,-4,-2,-6,7,-2,-8,-1,-9,7,-10,-1,3,-1,5,9,-5,-4,1,-7,9,5,6,-2,-5,-5,10,-9,-10,-7,10,-4,8,1,-9,-8,-10,8,10,-3,8,10,-5,-10,-7], dtype = "int8")#candidate|1777|(2496,)|const|int8
call_1774 = relay.TupleGetItem(func_1277_call(relay.reshape(var_1775.astype('uint32'), [12, 9, 13]), relay.reshape(const_1776.astype('float32'), [1, 1521]), relay.reshape(const_1777.astype('int8'), [2496,]), ), 1)
call_1778 = relay.TupleGetItem(func_1282_call(relay.reshape(var_1775.astype('uint32'), [12, 9, 13]), relay.reshape(const_1776.astype('float32'), [1, 1521]), relay.reshape(const_1777.astype('int8'), [2496,]), ), 1)
output = relay.Tuple([call_1771,call_1774,var_1775,const_1776,const_1777,])
output2 = relay.Tuple([call_1772,call_1778,var_1775,const_1776,const_1777,])
func_1781 = relay.Function([var_1775,], output)
mod['func_1781'] = func_1781
mod = relay.transform.InferType()(mod)
var_1782 = relay.var("var_1782", dtype = "uint32", shape = (1404,))#candidate|1782|(1404,)|var|uint32
output = func_1781(var_1782)
func_1783 = relay.Function([var_1782], output)
mutated_mod['func_1783'] = func_1783
mutated_mod = relay.transform.InferType()(mutated_mod)
func_262_call = mod.get_global_var('func_262')
func_264_call = mutated_mod.get_global_var('func_264')
call_1835 = relay.TupleGetItem(func_262_call(), 1)
call_1836 = relay.TupleGetItem(func_264_call(), 1)
output = relay.Tuple([call_1835,])
output2 = relay.Tuple([call_1836,])
func_1850 = relay.Function([], output)
mod['func_1850'] = func_1850
mod = relay.transform.InferType()(mod)
mutated_mod['func_1850'] = func_1850
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1850_call = mutated_mod.get_global_var('func_1850')
call_1851 = func_1850_call()
output = call_1851
func_1852 = relay.Function([], output)
mutated_mod['func_1852'] = func_1852
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1940 = relay.var("var_1940", dtype = "float64", shape = (16, 12, 13))#candidate|1940|(16, 12, 13)|var|float64
uop_1941 = relay.acosh(var_1940.astype('float64')) # shape=(16, 12, 13)
func_816_call = mod.get_global_var('func_816')
func_819_call = mutated_mod.get_global_var('func_819')
const_1950 = relay.const([-7,2,3,9,2,-4,-5,1,5,10,9,-4,-10,8,-8,-1,-2,-9,8,4,2,-4,6,-10,3,-1,-10,9,-9,-4,-2,2,-7,-10,8,4,-2,7,-4,-1,7,-9,-8,-10,5,-5,-8,-10,7,9,4,7,2,3,1,2,7,-8,2,-3,-10,4,5,-3,6,10,-5,-5,1,2,-4,-3,-8,8,-6,8,9,-4,-8,9,-6,3,5,8,-7,-9,7,-4,10,-6,4,2,8,10,-2,-9,7,2,1,8,-10,-1,-9,-3,-10,5,5,-9,-5,6,-9,6,8,-8,7,10,-2,-6,7,-8,-10,-1,2,5,-1,5,-7,-8,10,-7,9,-6,-8,10,4,4,-4,-9,7,6,-9,9,-3,-5,10,-1,7,2,10,5,-3,-1,4,-5,-6,-10,-3,2,-6,10,7,7,-7,-3,4,-4,-7,-3,-5,-1,-9,-7,-7,-8,-6,-1,8,-10,10,5,-3,10,-3,8,-1,-10,-9,-3,-8,1,9,-10,1,-5,5,-4,8,8,-7,1,7,-8,-10,7,4,-5,-2,-2,-7,4,7,-2,-10,-6,9,4,-1,-4,-5,-1,9,-2,9,1,-10,-9,3,-2,2,-9,-7,6,-7,-9,1,9,-5,8,4,-1,-8,-9,-10,3,1,2,7,6,-8,4,4,-9,4,-3,1,-1,2,8,-3,5,-5,9,-3,-5,9,-2,5,-2,-1,7,8,-8,10,-4,9,6,-4,-5,2,-2,1,4,5,5,10,5,10,10], dtype = "int8")#candidate|1950|(288,)|const|int8
call_1949 = relay.TupleGetItem(func_816_call(relay.reshape(const_1950.astype('int8'), [6, 16, 3]), relay.reshape(const_1950.astype('int8'), [6, 16, 3]), ), 0)
call_1951 = relay.TupleGetItem(func_819_call(relay.reshape(const_1950.astype('int8'), [6, 16, 3]), relay.reshape(const_1950.astype('int8'), [6, 16, 3]), ), 0)
output = relay.Tuple([uop_1941,call_1949,const_1950,])
output2 = relay.Tuple([uop_1941,call_1951,const_1950,])
func_1952 = relay.Function([var_1940,], output)
mod['func_1952'] = func_1952
mod = relay.transform.InferType()(mod)
var_1953 = relay.var("var_1953", dtype = "float64", shape = (16, 12, 13))#candidate|1953|(16, 12, 13)|var|float64
output = func_1952(var_1953)
func_1954 = relay.Function([var_1953], output)
mutated_mod['func_1954'] = func_1954
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2138 = relay.var("var_2138", dtype = "float64", shape = (13, 7, 12))#candidate|2138|(13, 7, 12)|var|float64
uop_2139 = relay.cos(var_2138.astype('float64')) # shape=(13, 7, 12)
output = uop_2139
output2 = uop_2139
func_2149 = relay.Function([var_2138,], output)
mod['func_2149'] = func_2149
mod = relay.transform.InferType()(mod)
var_2150 = relay.var("var_2150", dtype = "float64", shape = (13, 7, 12))#candidate|2150|(13, 7, 12)|var|float64
output = func_2149(var_2150)
func_2151 = relay.Function([var_2150], output)
mutated_mod['func_2151'] = func_2151
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_2177 = func_217_call()
call_2178 = func_217_call()
output = call_2177
output2 = call_2178
func_2205 = relay.Function([], output)
mod['func_2205'] = func_2205
mod = relay.transform.InferType()(mod)
output = func_2205()
func_2206 = relay.Function([], output)
mutated_mod['func_2206'] = func_2206
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_2218 = func_217_call()
call_2219 = func_217_call()
func_974_call = mod.get_global_var('func_974')
func_977_call = mutated_mod.get_global_var('func_977')
var_2233 = relay.var("var_2233", dtype = "float32", shape = (1755,))#candidate|2233|(1755,)|var|float32
call_2232 = relay.TupleGetItem(func_974_call(relay.reshape(var_2233.astype('float32'), [15, 9, 13])), 4)
call_2234 = relay.TupleGetItem(func_977_call(relay.reshape(var_2233.astype('float32'), [15, 9, 13])), 4)
bop_2236 = relay.floor_divide(call_2218.astype('float32'), relay.reshape(call_2232.astype('float32'), relay.shape_of(call_2218))) # shape=(1, 9, 13)
bop_2239 = relay.floor_divide(call_2219.astype('float32'), relay.reshape(call_2234.astype('float32'), relay.shape_of(call_2219))) # shape=(1, 9, 13)
output = relay.Tuple([var_2233,bop_2236,])
output2 = relay.Tuple([var_2233,bop_2239,])
func_2240 = relay.Function([var_2233,], output)
mod['func_2240'] = func_2240
mod = relay.transform.InferType()(mod)
var_2241 = relay.var("var_2241", dtype = "float32", shape = (1755,))#candidate|2241|(1755,)|var|float32
output = func_2240(var_2241)
func_2242 = relay.Function([var_2241], output)
mutated_mod['func_2242'] = func_2242
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1850_call = mod.get_global_var('func_1850')
func_1852_call = mutated_mod.get_global_var('func_1852')
call_2291 = relay.TupleGetItem(func_1850_call(), 0)
call_2292 = relay.TupleGetItem(func_1852_call(), 0)
output = relay.Tuple([call_2291,])
output2 = relay.Tuple([call_2292,])
func_2300 = relay.Function([], output)
mod['func_2300'] = func_2300
mod = relay.transform.InferType()(mod)
mutated_mod['func_2300'] = func_2300
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2300_call = mutated_mod.get_global_var('func_2300')
call_2301 = func_2300_call()
output = call_2301
func_2302 = relay.Function([], output)
mutated_mod['func_2302'] = func_2302
mutated_mod = relay.transform.InferType()(mutated_mod)
func_895_call = mod.get_global_var('func_895')
func_896_call = mutated_mod.get_global_var('func_896')
call_2313 = relay.TupleGetItem(func_895_call(), 0)
call_2314 = relay.TupleGetItem(func_896_call(), 0)
output = relay.Tuple([call_2313,])
output2 = relay.Tuple([call_2314,])
func_2331 = relay.Function([], output)
mod['func_2331'] = func_2331
mod = relay.transform.InferType()(mod)
output = func_2331()
func_2332 = relay.Function([], output)
mutated_mod['func_2332'] = func_2332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2300_call = mod.get_global_var('func_2300')
func_2302_call = mutated_mod.get_global_var('func_2302')
call_2349 = relay.TupleGetItem(func_2300_call(), 0)
call_2350 = relay.TupleGetItem(func_2302_call(), 0)
const_2380 = relay.const([[[0.120653,-1.318370,-7.919866,8.962754,2.166152,-6.919798,1.198008,-1.788774,9.409569,7.437719,6.834760,7.838167,7.433706],[-3.505689,-9.595367,9.981793,-4.064250,-6.369597,7.101973,-5.714365,-2.961253,-2.293686,3.751727,-1.712238,4.830115,-1.441693],[7.356367,9.990781,-7.016265,5.086870,7.549481,-6.348305,-2.129166,-5.644738,-0.024896,-4.728509,-6.874219,-9.651211,9.514175],[-6.166926,-1.855234,-4.967454,-7.908348,5.116930,9.594092,0.614438,7.033111,0.641334,-2.626339,0.882417,-1.875168,7.866534],[5.544861,-8.910523,-9.912187,7.138567,4.844356,-7.422073,7.541622,-6.917702,-3.405013,4.811342,5.334346,-7.713554,4.905651],[-0.430882,6.082448,-1.484326,-3.142062,-3.054370,6.474343,0.674424,8.441533,-7.500026,5.189047,7.502395,-6.535721,-2.038704],[8.463011,9.520467,-8.683515,-0.133647,8.960109,-2.329090,-6.008581,-1.405970,-3.433315,-1.654745,3.121073,-8.298677,-6.751261],[-1.239169,5.284288,-8.651032,1.175198,6.713216,-1.555982,-5.769831,-7.505343,6.448929,5.395467,-8.766925,5.448588,0.309877],[3.358597,-4.504338,5.460630,-0.087571,1.808100,-2.463397,-3.238714,-8.818335,4.446434,-1.926592,-6.217092,-8.511148,7.918033]],[[2.134381,-1.546068,7.340146,3.913716,3.073000,-1.455749,0.005369,-1.885849,8.465809,8.516440,3.268570,-5.449625,-9.340500],[3.726065,-7.331051,9.785509,-1.203624,-4.252950,6.706698,1.113614,-4.547177,-3.509029,2.013517,0.899825,2.703562,-2.741301],[-5.859807,-9.515794,9.812301,4.454911,-7.138334,-2.978800,-7.908850,-5.312300,-6.560293,-9.759838,7.687895,-9.216833,-9.802669],[1.221273,-6.051197,-6.807289,-8.188331,2.995913,7.805906,2.284852,3.194203,-2.572176,-5.579010,5.441948,-3.639947,-5.561225],[-9.652186,-1.237651,-7.554549,-7.714960,5.374787,2.782232,7.314114,-8.828883,-9.520447,-3.245895,8.572072,2.824226,1.401237],[-1.496709,6.356464,0.555748,1.125887,-9.585328,-8.350164,-4.001438,4.753676,8.639630,-9.790861,3.059152,-4.305275,-7.604335],[-3.711914,2.349162,-4.534246,8.263803,-7.748579,6.561768,-1.999952,-8.559015,-2.322356,6.281824,-9.294254,-4.475961,-6.331636],[2.916908,3.467853,-2.446825,-6.506813,9.549062,2.277560,-0.096794,8.739706,4.425086,5.114575,-7.494613,-4.985779,0.124624],[9.389338,6.076800,-0.943410,-0.269338,-1.323089,3.316858,-0.734319,2.894935,-2.880557,-1.295017,2.893158,4.760026,4.206072]],[[-2.002835,9.926644,-3.230722,1.439871,-8.704513,9.460955,8.458304,6.459849,-1.727120,3.588406,2.215738,0.310382,9.150644],[6.391749,7.360759,4.723873,-0.598142,7.448152,5.663534,-0.856173,-3.015690,-5.656144,4.596213,9.879959,0.533364,2.448092],[-0.075351,-9.146524,7.413398,-3.652617,-7.707163,-3.024937,3.173318,-7.779129,-2.579727,-4.709213,-9.840058,-0.811743,1.744704],[6.464828,-1.870136,0.808801,5.541187,7.869651,-8.350880,9.336533,2.956987,1.069149,4.740476,0.428468,7.202917,9.462508],[-9.842187,5.948329,9.911867,-9.239308,-8.948245,-3.620175,-5.532249,-9.964735,2.562628,8.505995,-0.507377,8.035757,-1.890378],[4.534016,8.961084,0.168817,7.143250,2.893049,4.703223,-4.049501,5.423853,3.951574,-2.039615,-3.263919,0.819556,-5.760731],[5.461483,-0.799261,-3.006669,9.424004,-4.904652,9.180604,3.163534,-7.007615,4.043280,-1.634055,2.900814,-6.395309,-0.629068],[4.590596,-8.585065,0.492891,-0.700613,-9.644454,2.388425,-4.412040,-7.223497,6.261184,-3.695176,4.935959,1.983914,-6.157305],[7.199554,-8.143569,-1.944390,-6.829168,-9.665753,-7.297174,9.448197,9.304141,-5.531266,-0.112989,-9.955488,-1.135256,5.342222]],[[-9.120729,-6.640883,5.515799,8.097540,8.054304,3.723659,-8.114103,2.590194,-1.272828,8.671040,1.120285,0.623375,7.225527],[-9.773962,-3.019102,1.389819,-0.405227,-5.248415,6.197417,7.549694,0.087933,-0.573143,-8.458071,-5.302639,-8.492279,4.121985],[0.595933,5.751577,-7.189040,-7.162439,8.973015,0.279414,6.673229,4.279858,1.489305,0.607047,-4.317684,-9.492661,2.316607],[0.360637,4.452654,-9.583947,-0.659864,6.202548,2.018823,9.209635,6.508023,-4.822957,-3.342269,0.539149,-1.425586,-0.768239],[0.522710,-7.247121,1.425296,-8.385209,-3.380343,1.682777,2.777656,8.304164,7.382675,0.047519,2.388083,9.037701,-3.640223],[0.494367,-5.620002,3.626540,-0.533638,-1.182273,0.462258,-6.474283,9.681673,-7.166110,-7.066334,8.020785,6.940361,-1.197273],[-1.395443,-4.903296,5.148569,-3.651478,-4.090577,2.998539,1.478825,-0.020285,-1.559131,-8.281092,8.176100,-9.672399,-1.390494],[4.441071,5.379232,-0.604116,0.789253,-6.224297,-4.257020,-4.880134,-1.800883,0.377257,-9.347188,-0.582486,2.406986,-0.754318],[-5.397114,-5.664153,7.482481,-9.757781,-4.241519,-6.816967,1.918237,-1.429332,9.717945,-8.388783,-8.949039,5.222440,-1.925786]],[[0.502690,-5.989676,-2.058875,5.246992,2.884013,-8.253158,4.193577,-9.394944,-5.630126,-0.863008,4.535284,-7.928321,8.985125],[-8.047773,3.006131,-5.337190,-6.298001,-3.034635,9.463366,0.765206,-2.885444,-8.332037,-5.937369,-2.134844,6.739260,2.056944],[-2.608086,-9.078098,-9.921945,1.469874,2.031248,4.511892,-4.434833,-4.857226,9.335235,8.925199,2.613009,6.532587,-6.069220],[6.192470,-4.389867,0.301403,-3.449508,-8.893176,-2.311075,-1.623489,1.010311,6.279012,8.991037,-7.339963,9.038294,8.885562],[0.540547,8.498176,-6.101166,5.833486,9.127287,8.432962,8.108040,5.369819,8.863045,8.016339,6.645227,7.649505,2.028386],[4.866927,0.671801,8.215107,4.170174,-4.609090,2.802401,-5.229148,-3.882604,-0.161543,6.000656,6.076252,0.696325,2.311713],[4.250174,-1.905173,-5.083501,-3.121603,-8.815797,1.030057,-7.173351,1.981566,3.468490,-1.673305,4.418398,0.882879,-1.865971],[-1.864022,-7.127745,-7.897423,-2.268433,-8.935462,-6.176367,-2.289149,-1.111740,-2.702241,9.618997,4.149900,8.912666,0.026363],[-5.511343,4.612265,9.256389,8.995664,-6.542907,-5.083562,-7.794859,3.315335,8.596755,7.965330,8.529359,-3.359312,7.115400]],[[-3.169407,2.054418,6.723175,-3.363815,0.869922,-6.487256,7.157594,-7.633548,6.478374,-1.344309,-8.350053,-3.798228,-9.522786],[6.956787,6.721346,-5.013734,-3.649752,8.096790,1.186061,-2.075030,8.075667,9.082300,3.086961,-2.211431,-5.667336,-5.165620],[-3.919153,-6.708996,-8.201772,6.794974,-4.000870,7.235046,-1.822920,3.966972,8.927781,-6.948104,-0.328512,3.960510,7.388018],[6.677965,1.610128,-2.923784,-3.036198,-9.371280,4.978640,-7.022953,9.234846,-5.182660,-8.524490,2.501934,6.353786,1.442747],[-9.729360,-1.459231,-0.089916,0.998777,4.933563,-1.228208,0.028007,-7.011350,-2.982093,-7.702227,8.393330,1.800655,-7.614084],[7.650979,-3.355263,-7.255644,3.392428,8.207511,-7.919328,4.362885,-3.227600,4.353958,-9.283456,-8.720126,9.764629,-0.686145],[9.512016,-5.088978,0.811451,-6.438555,-3.101135,-1.364226,1.806439,-1.448463,-6.889585,5.114984,6.215660,-2.750084,-1.385285],[-2.910301,-2.355225,-6.906603,4.227511,4.739106,-8.939652,-1.534805,-5.906953,9.308574,-8.071378,9.584574,1.363181,-1.018623],[-9.879009,3.827622,3.878433,-4.570293,-0.454480,-3.894053,1.654335,-0.659478,2.248219,5.526230,6.107012,4.595775,-8.410521]],[[9.341765,8.502577,-4.393141,-1.827195,-1.292330,0.534446,4.531129,-9.871624,6.016027,-6.236829,4.633648,7.201725,1.496687],[2.423401,-8.110552,-3.914421,-9.301230,4.427324,8.119873,-3.775735,-6.686366,-7.616392,8.225536,7.342264,-3.088123,6.902684],[7.558395,-3.875806,9.777899,7.562138,5.423945,0.794126,3.216330,-0.045662,1.608427,-2.987721,0.567618,2.267329,4.126898],[7.453359,-0.732075,-1.371028,8.023401,2.030554,-7.944478,4.282606,-5.270618,5.749464,7.034951,-8.217268,-8.486947,-0.926004],[3.029884,2.191016,-9.387291,-8.507209,4.098979,-7.280066,-5.348177,9.581218,-5.065840,-5.828216,-3.453283,-9.031312,-9.226574],[-3.816903,-2.861754,-3.357227,-9.199307,-5.127332,-6.261972,-3.084016,7.704014,6.495598,-5.879608,9.854010,1.168299,3.652149],[6.046404,6.969630,-7.167992,6.904311,2.227233,-4.751914,1.084936,-3.620739,1.688449,8.148421,-1.448183,-4.326976,7.400687],[4.203846,-1.837368,-8.769440,7.431642,0.883166,8.507806,-3.708293,-2.946728,7.915260,8.002751,2.814819,-7.657741,-6.790499],[5.819877,1.849401,-8.693785,6.102712,2.043436,-7.826994,-7.830926,-2.268718,-9.318042,-3.189349,3.039492,-3.675408,1.952528]],[[2.993290,-8.985096,-5.357582,1.414753,4.758386,1.879572,-9.598301,-2.589845,6.519372,-7.966409,2.137715,-8.635493,8.376604],[9.897771,-3.162803,6.379499,-3.800056,5.341112,-8.438785,-0.361467,-8.170725,-5.733007,-1.260705,-7.882806,5.898097,1.333267],[1.180813,-2.549267,9.196268,7.641003,9.405824,2.575200,-5.525027,-6.806731,5.020825,-2.324838,-0.206091,-7.538294,-9.954964],[-8.240188,0.889959,-7.864134,0.651260,8.888586,-3.981908,2.672930,-3.394355,0.667585,0.600531,3.265178,-2.762587,3.311209],[-1.796163,3.277807,-5.368430,4.339183,1.162640,-8.681655,-2.398964,1.161878,-5.176594,-0.648934,7.516671,-0.395160,-6.539745],[-1.440401,3.975044,5.262875,3.083710,-8.370500,1.144872,-1.607292,0.387091,8.594237,-9.836821,-1.744212,6.616149,2.323230],[-4.895060,-7.537812,2.412563,9.740792,-1.520440,4.305633,0.067851,4.255112,3.311571,6.254527,-6.621169,-8.637092,0.034204],[-4.267456,-4.264725,-3.616138,1.788341,9.373583,2.162835,2.956624,2.884799,9.781731,4.201335,3.385364,-2.228545,8.860887],[-9.324280,-1.654744,2.860677,-2.626844,-5.158474,-9.547678,3.340123,1.890959,1.476616,-5.545907,4.795565,2.843218,-5.415654]],[[8.646568,-0.123978,-6.825536,-0.755456,-7.291142,3.272034,9.166563,3.551174,2.176720,2.332628,1.764475,6.523156,-3.101257],[-1.370085,1.189306,-1.134959,8.293674,-4.732269,2.393804,-2.156218,-7.647643,0.024255,-6.168574,1.177142,4.631161,-9.024803],[8.131138,4.141332,-5.533813,-7.158110,-4.398979,-0.635371,4.704978,6.479569,9.195509,-1.859783,7.279449,-6.242097,8.281582],[9.391462,-0.756801,5.952457,-1.758491,1.260111,-3.990487,-9.659580,1.434854,3.054716,6.284818,5.854223,-6.410705,-6.199033],[9.650910,6.833972,1.531755,-5.416535,-6.829177,1.363707,-1.385723,7.578943,-1.229028,0.136357,-7.103741,-4.419641,-0.146957],[5.503562,-4.850757,-9.663516,-4.474460,-4.187245,4.629667,4.903001,-6.817314,-5.921575,-1.651783,-0.890689,1.180085,-8.728236],[-7.452704,-8.675688,-5.177137,9.610926,1.886949,1.344571,-6.641104,3.058283,-4.034598,2.309940,-4.567963,6.592568,-6.649533],[9.107000,3.839162,6.344691,1.969853,-5.733449,4.072889,-1.221436,-3.161052,-8.053231,9.071221,-2.549014,6.902148,-3.710203],[3.788716,-5.217062,0.462920,6.021737,4.920478,-1.572489,-0.901949,-5.283702,0.190287,9.825597,-1.075943,-5.966766,0.031915]],[[2.005642,-3.089758,-5.236391,8.912242,2.252639,8.069192,-2.825340,-9.613803,9.789036,2.956474,-0.212510,-6.863752,-0.430185],[-9.213626,-7.065622,7.569488,-1.223316,6.214435,5.446899,9.885181,-1.122265,-6.445143,3.060207,2.951809,2.276712,-4.190149],[1.365117,4.518997,-9.642332,-3.091280,-0.555167,-4.645712,-1.775666,3.812150,8.698111,-8.384972,9.355089,-6.138278,6.389773],[9.705138,-2.936982,4.787734,-9.157083,-7.836743,-5.540082,4.065752,-9.464748,0.968382,-0.029886,2.411410,4.490923,7.428818],[-3.144677,8.544983,6.918692,-1.582809,-8.783239,-5.057387,8.583221,2.182210,2.851827,-1.804100,2.961445,-8.756808,-7.579489],[7.008764,-8.723265,5.215254,-3.840318,-2.466185,7.863738,0.665537,-7.104491,4.517228,-7.605196,8.893370,0.740147,-7.866248],[6.732162,-9.410508,-1.271347,8.097402,-7.637912,3.715865,5.398870,7.585818,-2.389502,0.058913,-4.689016,-3.575712,5.603444],[-3.341771,2.373880,9.371263,-4.467741,9.485489,8.363417,0.273395,5.556471,-8.647096,-2.935825,3.547517,7.242644,-2.426940],[0.253044,-0.315934,-3.757826,-7.908419,6.236393,2.056778,1.192238,-0.377588,6.480228,7.568027,-5.503142,-3.408385,4.423943]],[[-4.803237,-8.564273,-2.420441,8.566816,-0.623914,8.379150,-8.093052,1.999224,-3.980570,-2.982290,4.650556,-4.046947,-1.341651],[0.664555,-6.906654,-2.072295,8.895599,6.524458,2.115708,-7.476178,-4.037464,-0.595818,6.917485,-6.503335,-7.906047,-1.973056],[2.315406,-7.238366,-4.488754,-4.822606,-5.692728,2.125339,5.397608,9.680395,4.865865,-3.723565,-1.030866,-0.279689,-5.028296],[3.051362,9.273537,0.261845,2.925411,-8.798029,3.539454,-2.242466,-3.403388,9.571203,-6.189318,-1.222155,-2.637799,9.276470],[1.506246,-8.797274,6.114697,-1.231709,-7.977522,3.759462,-2.764374,2.919881,-3.877667,5.661781,0.699298,-0.220508,-3.069342],[8.877570,3.395612,2.133473,9.993821,7.182096,4.582508,2.192348,0.268048,5.786214,3.560862,4.967583,-1.641376,-3.075607],[9.429227,8.329463,3.750865,-0.447373,-2.288118,1.625165,-1.898502,-3.101302,-8.433124,1.265262,-1.414159,2.960204,5.327163],[2.131163,-0.248963,5.295746,-5.855609,1.108098,5.631056,-8.918657,9.304588,2.972221,-2.916966,8.513060,-6.029609,-9.130165],[-6.452807,-0.873091,-8.858475,7.279485,5.263543,-3.198312,-6.911513,4.419195,-4.620210,7.909764,5.068115,5.139132,-4.758275]],[[-9.174102,4.303291,6.281237,9.170997,5.086531,8.707380,-3.560116,0.643917,-8.482483,-6.077733,8.975536,1.882532,-8.409500],[-4.458494,8.243263,-4.406938,3.579454,-6.923415,9.733602,-1.146993,-9.934706,-3.928805,-2.083764,0.011782,3.593732,-7.885135],[-9.365259,2.053891,-8.212065,-6.840846,-2.516534,3.075459,-6.146067,-5.508285,5.054131,-1.610933,-8.237330,-1.778636,-8.904901],[4.260466,9.141511,5.949892,4.787381,-2.751384,-6.024142,1.447657,-3.283602,-2.121488,0.135272,-0.288599,9.182557,-4.790126],[9.288798,-9.483476,-7.460668,1.829092,8.737310,-4.611017,1.460191,-5.234880,6.094241,-3.787116,-7.273125,9.795923,4.855838],[9.809618,-7.971432,-6.343094,-8.719848,-3.249957,-8.758697,4.498928,-0.052028,5.550150,-1.663137,2.065618,5.480241,7.567937],[-7.041178,2.908052,8.891653,-0.240674,-7.010222,0.320110,0.151268,-7.274109,-1.321561,1.261643,0.433437,-8.187219,-2.955614],[5.819196,-3.903900,1.229820,8.272694,-9.996123,1.213526,8.329202,-5.625384,1.110181,-0.393520,3.379177,6.594468,2.796755],[6.188686,-1.049516,3.314510,-4.887496,8.331188,-9.727524,-9.160940,9.843537,6.657556,-9.672258,2.775665,1.082897,3.057404]],[[-8.225101,8.132472,4.175286,-7.086997,-3.788807,6.295953,8.620014,-9.145405,-6.781736,-0.329259,3.211851,-5.169098,4.328242],[4.730200,6.593638,-4.848089,5.714273,7.320888,-5.712050,-2.345909,0.275646,2.970248,-1.716839,-7.883699,2.977084,-9.638149],[-9.280643,-2.170554,4.726785,-9.436418,-1.109536,-3.922838,-1.441746,-2.658757,6.739731,0.076383,-8.161338,1.090380,-9.074897],[3.596889,0.771888,-6.621127,-5.528727,0.914001,-5.710975,-2.265954,-7.514670,-4.850206,-0.005001,-5.469561,-3.163186,-7.171940],[-3.749259,3.200852,3.161429,-3.644058,1.606677,-8.788771,9.904334,6.183492,2.246674,-6.461187,-6.640889,-8.189193,1.580658],[4.032192,-2.036168,7.121662,0.167038,-8.701324,6.526671,3.040073,8.200305,7.236208,-9.540257,1.004592,-0.964462,8.465383],[-2.566289,-0.985101,-7.925721,4.429879,1.794810,-1.112615,-2.195868,-7.137586,1.098480,-5.750112,4.817381,-1.142361,-2.779550],[-5.576636,8.860039,5.502019,1.864732,-5.662407,0.814966,2.805272,-7.222761,-2.653985,-9.121018,-4.621705,-2.289330,-4.276059],[-8.663478,3.317639,-8.364340,-9.928708,-7.477220,-5.975342,0.132783,9.451266,-8.637152,1.117310,-7.755992,5.092705,-6.847567]],[[5.644297,-5.208666,5.568710,-3.126407,4.195022,-0.407607,-8.721407,-6.585176,-7.289039,3.400748,-9.083619,-8.404591,-8.065222],[7.346578,5.007075,-0.614388,2.086805,2.940760,9.488213,4.005886,-8.269421,-9.503698,-9.272796,9.030978,-6.292940,0.664773],[4.874261,2.366201,-9.782736,9.646474,-0.335568,-5.185186,8.458084,-7.804379,6.183673,1.735057,2.894080,9.519838,-4.072840],[2.324568,7.482821,-0.339356,-8.050742,9.791240,-2.288103,3.652968,-6.825558,-6.426798,3.574146,-8.443239,2.155688,-6.063686],[-0.718848,-4.144715,1.344116,7.461634,-3.038906,6.004358,4.622278,-3.977216,8.690505,6.227095,8.225415,7.877601,-9.178718],[-4.222250,-8.167670,4.759261,-0.699869,0.836196,6.307931,-4.666042,-5.558755,-8.881280,-3.221500,-8.974279,-7.567845,4.357692],[4.111304,-9.406059,8.898738,0.647276,-9.161189,-2.688523,7.174589,-5.464058,-7.809301,-4.697970,-5.935239,9.081346,4.869818],[-1.789541,3.151922,-2.656990,7.550937,-9.240647,3.505027,-2.182108,-3.005867,-8.118090,-8.739694,-6.925417,3.380028,-4.785346],[-0.770391,2.459747,0.688361,8.783030,4.534135,1.701762,8.179278,2.431627,-0.072825,-5.066685,-5.489653,-9.790473,6.324103]],[[-4.836257,7.231039,-6.922486,-4.896455,-2.111885,2.694106,-5.628591,0.176730,4.091371,7.571414,9.147591,-8.066921,6.191691],[-2.780414,-3.007684,-6.158413,-5.897494,2.192578,5.339541,-4.887456,9.791521,-0.608438,0.330385,2.630738,-2.635228,2.333589],[-1.412134,9.172612,8.561800,7.524818,5.344711,-4.277149,-9.697418,-2.693923,4.012006,6.341632,-4.053326,-6.254359,5.276062],[0.345960,-6.300601,5.271209,-1.218212,-1.869495,-7.824668,7.586800,-7.984192,9.703594,5.238187,-1.449034,6.022056,5.477944],[8.549921,0.406063,-1.907807,-2.765059,9.641399,6.254250,-8.365585,8.557340,-0.059539,-5.614984,-8.686524,0.322261,1.704397],[-0.399468,2.102746,2.865328,3.896699,2.937055,7.978667,8.451703,8.222093,-9.144164,-5.563931,-8.125550,4.961725,4.444752],[-6.929398,1.937201,5.865342,-8.753689,-7.025603,5.279185,-6.993917,8.166428,6.005440,9.528782,4.040935,-3.431350,3.023870],[-0.212982,-7.953874,8.767510,-1.827094,-5.733701,-2.315004,-6.869775,-4.386792,7.852229,-3.364155,-6.360792,9.537187,-4.553482],[-5.749523,-9.963080,0.975242,-5.684094,9.582687,9.911293,-7.117884,3.869518,-7.206678,9.961733,6.091682,-6.936404,0.157609]]], dtype = "float32")#candidate|2380|(15, 9, 13)|const|float32
bop_2381 = relay.left_shift(call_2349.astype('int8'), const_2380.astype('int8')) # shape=(15, 9, 13)
bop_2384 = relay.left_shift(call_2350.astype('int8'), const_2380.astype('int8')) # shape=(15, 9, 13)
func_1363_call = mod.get_global_var('func_1363')
func_1367_call = mutated_mod.get_global_var('func_1367')
var_2394 = relay.var("var_2394", dtype = "float32", shape = (702,))#candidate|2394|(702,)|var|float32
var_2395 = relay.var("var_2395", dtype = "int8", shape = (2496,))#candidate|2395|(2496,)|var|int8
call_2393 = relay.TupleGetItem(func_1363_call(relay.reshape(var_2394.astype('float32'), [6, 9, 13]), relay.reshape(var_2395.astype('int8'), [52, 48]), ), 2)
call_2396 = relay.TupleGetItem(func_1367_call(relay.reshape(var_2394.astype('float32'), [6, 9, 13]), relay.reshape(var_2395.astype('int8'), [52, 48]), ), 2)
output = relay.Tuple([bop_2381,call_2393,var_2394,var_2395,])
output2 = relay.Tuple([bop_2384,call_2396,var_2394,var_2395,])
func_2400 = relay.Function([var_2394,var_2395,], output)
mod['func_2400'] = func_2400
mod = relay.transform.InferType()(mod)
mutated_mod['func_2400'] = func_2400
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2400_call = mutated_mod.get_global_var('func_2400')
var_2402 = relay.var("var_2402", dtype = "float32", shape = (702,))#candidate|2402|(702,)|var|float32
var_2403 = relay.var("var_2403", dtype = "int8", shape = (2496,))#candidate|2403|(2496,)|var|int8
call_2401 = func_2400_call(var_2402,var_2403,)
output = call_2401
func_2404 = relay.Function([var_2402,var_2403,], output)
mutated_mod['func_2404'] = func_2404
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2409 = relay.const(-9.620450, dtype = "float64")#candidate|2409|()|const|float64
const_2410 = relay.const([[[4.589859]],[[-8.760614]],[[4.228613]],[[7.909998]],[[-8.754272]],[[-2.551657]],[[-6.072212]],[[5.141234]],[[4.644676]],[[9.104653]],[[-6.755285]],[[-0.611283]],[[6.522218]],[[-8.392295]],[[8.549674]]], dtype = "float64")#candidate|2410|(15, 1, 1)|const|float64
bop_2411 = relay.floor_divide(const_2409.astype('float64'), const_2410.astype('float64')) # shape=(15, 1, 1)
bop_2420 = relay.left_shift(const_2410.astype('int8'), const_2409.astype('int8')) # shape=(15, 1, 1)
func_2400_call = mod.get_global_var('func_2400')
func_2404_call = mutated_mod.get_global_var('func_2404')
var_2432 = relay.var("var_2432", dtype = "float32", shape = (702,))#candidate|2432|(702,)|var|float32
var_2433 = relay.var("var_2433", dtype = "int8", shape = (2496,))#candidate|2433|(2496,)|var|int8
call_2431 = relay.TupleGetItem(func_2400_call(relay.reshape(var_2432.astype('float32'), [702,]), relay.reshape(var_2433.astype('int8'), [2496,]), ), 3)
call_2434 = relay.TupleGetItem(func_2404_call(relay.reshape(var_2432.astype('float32'), [702,]), relay.reshape(var_2433.astype('int8'), [2496,]), ), 3)
bop_2440 = relay.greater_equal(var_2432.astype('bool'), bop_2420.astype('bool')) # shape=(15, 1, 702)
output = relay.Tuple([bop_2411,call_2431,var_2433,bop_2440,])
output2 = relay.Tuple([bop_2411,call_2434,var_2433,bop_2440,])
func_2447 = relay.Function([var_2432,var_2433,], output)
mod['func_2447'] = func_2447
mod = relay.transform.InferType()(mod)
var_2448 = relay.var("var_2448", dtype = "float32", shape = (702,))#candidate|2448|(702,)|var|float32
var_2449 = relay.var("var_2449", dtype = "int8", shape = (2496,))#candidate|2449|(2496,)|var|int8
output = func_2447(var_2448,var_2449,)
func_2450 = relay.Function([var_2448,var_2449,], output)
mutated_mod['func_2450'] = func_2450
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2331_call = mod.get_global_var('func_2331')
func_2332_call = mutated_mod.get_global_var('func_2332')
call_2497 = relay.TupleGetItem(func_2331_call(), 0)
call_2498 = relay.TupleGetItem(func_2332_call(), 0)
output = relay.Tuple([call_2497,])
output2 = relay.Tuple([call_2498,])
func_2505 = relay.Function([], output)
mod['func_2505'] = func_2505
mod = relay.transform.InferType()(mod)
output = func_2505()
func_2506 = relay.Function([], output)
mutated_mod['func_2506'] = func_2506
mutated_mod = relay.transform.InferType()(mutated_mod)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_2527 = relay.TupleGetItem(func_499_call(), 1)
call_2528 = relay.TupleGetItem(func_500_call(), 1)
func_1781_call = mod.get_global_var('func_1781')
func_1783_call = mutated_mod.get_global_var('func_1783')
var_2534 = relay.var("var_2534", dtype = "uint32", shape = (1, 1404))#candidate|2534|(1, 1404)|var|uint32
call_2533 = relay.TupleGetItem(func_1781_call(relay.reshape(var_2534.astype('uint32'), [1404,])), 1)
call_2535 = relay.TupleGetItem(func_1783_call(relay.reshape(var_2534.astype('uint32'), [1404,])), 1)
bop_2539 = relay.less_equal(var_2534.astype('bool'), relay.reshape(call_2533.astype('bool'), relay.shape_of(var_2534))) # shape=(1, 1404)
bop_2542 = relay.less_equal(var_2534.astype('bool'), relay.reshape(call_2535.astype('bool'), relay.shape_of(var_2534))) # shape=(1, 1404)
var_2548 = relay.var("var_2548", dtype = "bool", shape = (11, 1404))#candidate|2548|(11, 1404)|var|bool
bop_2549 = relay.less_equal(bop_2539.astype('bool'), var_2548.astype('bool')) # shape=(11, 1404)
bop_2552 = relay.less_equal(bop_2542.astype('bool'), var_2548.astype('bool')) # shape=(11, 1404)
output = relay.Tuple([call_2527,bop_2549,])
output2 = relay.Tuple([call_2528,bop_2552,])
func_2568 = relay.Function([var_2534,var_2548,], output)
mod['func_2568'] = func_2568
mod = relay.transform.InferType()(mod)
mutated_mod['func_2568'] = func_2568
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2568_call = mutated_mod.get_global_var('func_2568')
var_2570 = relay.var("var_2570", dtype = "uint32", shape = (1, 1404))#candidate|2570|(1, 1404)|var|uint32
var_2571 = relay.var("var_2571", dtype = "bool", shape = (11, 1404))#candidate|2571|(11, 1404)|var|bool
call_2569 = func_2568_call(var_2570,var_2571,)
output = call_2569
func_2572 = relay.Function([var_2570,var_2571,], output)
mutated_mod['func_2572'] = func_2572
mutated_mod = relay.transform.InferType()(mutated_mod)
func_742_call = mod.get_global_var('func_742')
func_744_call = mutated_mod.get_global_var('func_744')
call_2582 = func_742_call()
call_2583 = func_742_call()
output = relay.Tuple([call_2582,])
output2 = relay.Tuple([call_2583,])
func_2590 = relay.Function([], output)
mod['func_2590'] = func_2590
mod = relay.transform.InferType()(mod)
mutated_mod['func_2590'] = func_2590
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2590_call = mutated_mod.get_global_var('func_2590')
call_2591 = func_2590_call()
output = call_2591
func_2592 = relay.Function([], output)
mutated_mod['func_2592'] = func_2592
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2590_call = mod.get_global_var('func_2590')
func_2592_call = mutated_mod.get_global_var('func_2592')
call_2599 = relay.TupleGetItem(func_2590_call(), 0)
call_2600 = relay.TupleGetItem(func_2592_call(), 0)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_2604 = func_217_call()
call_2605 = func_217_call()
output = relay.Tuple([call_2599,call_2604,])
output2 = relay.Tuple([call_2600,call_2605,])
func_2610 = relay.Function([], output)
mod['func_2610'] = func_2610
mod = relay.transform.InferType()(mod)
output = func_2610()
func_2611 = relay.Function([], output)
mutated_mod['func_2611'] = func_2611
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2610_call = mod.get_global_var('func_2610')
func_2611_call = mutated_mod.get_global_var('func_2611')
call_2646 = relay.TupleGetItem(func_2610_call(), 0)
call_2647 = relay.TupleGetItem(func_2611_call(), 0)
output = call_2646
output2 = call_2647
func_2660 = relay.Function([], output)
mod['func_2660'] = func_2660
mod = relay.transform.InferType()(mod)
mutated_mod['func_2660'] = func_2660
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2660_call = mutated_mod.get_global_var('func_2660')
call_2661 = func_2660_call()
output = call_2661
func_2662 = relay.Function([], output)
mutated_mod['func_2662'] = func_2662
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2590_call = mod.get_global_var('func_2590')
func_2592_call = mutated_mod.get_global_var('func_2592')
call_2668 = relay.TupleGetItem(func_2590_call(), 0)
call_2669 = relay.TupleGetItem(func_2592_call(), 0)
var_2674 = relay.var("var_2674", dtype = "float32", shape = (16, 9, 13))#candidate|2674|(16, 9, 13)|var|float32
bop_2675 = relay.greater(call_2668.astype('bool'), var_2674.astype('bool')) # shape=(16, 9, 13)
bop_2678 = relay.greater(call_2669.astype('bool'), var_2674.astype('bool')) # shape=(16, 9, 13)
func_1036_call = mod.get_global_var('func_1036')
func_1039_call = mutated_mod.get_global_var('func_1039')
const_2682 = relay.const([-1.144655,-9.300490,4.149149,4.532611,-8.216976,-1.362318,-0.684589,-2.390055,-0.665086,-6.888445,2.703661,-4.830759,-1.377745,-2.600286,6.035605,-4.577845,2.723672,3.967118,-0.955803,-8.873013,6.920273,-6.394903,4.806588,6.974967,-7.377328,9.439719,-1.737134,5.090737,2.317650,-5.712692,-9.562116,0.348492,3.304559,-2.664627,6.709032,9.646079,5.049458,-6.231363,-9.280332,8.169758,8.035422,2.331067,-7.994051,-4.408193,-7.102529,-9.942860,8.986370,-3.442867,-7.506507,-8.014054,7.399433,8.923244,-7.867781,-1.024997,2.213702,7.980779,-6.228828,-9.961571,6.655328,-5.123258,5.645810,-1.283598,-1.064114,2.394634,-8.602654,-6.741641,1.609985,-7.132024,1.713782,9.228792,-0.284588,6.782124,0.948074,3.869984,-0.649067,-3.335167,8.520926,0.029299,0.558728,-1.864031,-0.803823,0.317010,-3.249363,4.741876,-0.579663,-8.576790,9.994213,8.794916,9.391716,6.444601,1.241041,3.936969,2.826498,-6.586470,-2.895780,-5.711961,-1.886912,-5.974895,7.993374,-1.409125,-8.433829,2.797774,4.766725,-1.624901,8.137525,-0.122830,9.425485,7.121146,-0.038979,0.249372,8.508540,-1.126241,-4.456415,-9.068091,-1.912939,2.237757,-8.731663,7.156148,-9.050741,-0.721203,6.269289,-5.290362,8.411653,5.886842,7.454706,-3.792847,-0.736278,-5.371960,2.894313,1.242159,-2.665961,6.351470,5.400327,-0.535484,-8.389564,5.687751,9.023762,2.857528,-7.139993,4.703268,7.918469,-3.460536,-9.574094,-2.392865,4.369141,6.820361,3.396034,-4.948538,4.472800,-5.856757,-0.443659,-5.394744,1.499897,-7.101046,-8.782811,8.595032,2.768315,-3.239590,4.008781,2.924764,-7.945147,-2.825852,8.511959,-3.616104,3.406249,9.053672,-7.714616,1.949324,7.192571,7.030378,0.594859,3.699354,-1.312530,-1.622700,5.994210,7.689725,6.599907,2.201441,-5.278903,4.665479,-9.619222,4.953784,-8.296221,-8.500749,-5.866190,-5.054319,-0.011575,-9.053073,5.874064,-4.876514,8.647406,-9.147601,6.287958,0.838719,4.945001,0.688576,4.528954,-3.719238,-5.035238,3.216407,3.629679,-3.324411,-7.854444,-1.572160,-3.690694,-3.458163,-6.918113,-4.718114,-6.098440,-5.162883,-8.613055,7.016601,-2.930712,-9.823063,-4.352764,-0.588319,1.821138,4.631947,9.981739,1.177708,7.874967,5.251305,-8.099722,9.702511,-0.262273,-3.141042,-1.215173,-6.775984,9.343543,6.423955,0.734787,5.864323,-5.624223,-6.676949,0.033075,8.847553,4.975293,-3.712906,-8.884382,-4.646274,5.499490,-5.498346,-4.475094,5.542794,6.001208,9.479122,-9.323042,3.983322,0.890099,-3.633692,4.709874,1.840181,6.719081,-3.879276,-6.282695,-9.334650,5.589017,2.281692,6.623730,1.673385,2.613712,9.330366,-7.703478,-3.588311,-1.605025,-2.467954,1.372574,-4.702293,4.423552,-3.326461,1.274283,-3.450842,9.168520,-8.505429,-7.326546,4.859219,-4.136470,3.039820,0.536786,5.488108,-3.221372,7.102165,5.426085,-7.868861,-6.975643,-9.623034,6.177094,-5.851950,-9.523596,-5.536418,8.577107,-2.126403,-8.155536,-8.719347,-4.117824,-4.571331,0.959415,-4.385077,6.451152,9.939460,3.321238,-4.378449,-1.579435,-3.903633,5.394368,1.611040,-6.483523,9.448111,9.554491,3.092586,9.779965,3.764360,8.757712,8.137822,-1.389389,9.872991,1.654583,3.479340,-3.332549,-9.288149,-5.198020,-0.908814,-0.477981,3.257094,8.196527,2.689840,-0.507092,6.868963,-9.928328,9.448733,-3.181451,-5.967670,-8.653086,4.801147,6.879130,-2.076508,-2.601969,0.210327,-5.126277,-6.653182,7.541979,-7.525398,-2.093209,1.032901,1.320353,-6.423517,1.062841,9.951931,-3.254776,2.569964,-5.220027,9.205651,-0.049928,6.273833,6.468803,4.661909,8.700153,6.487793,8.366170,-2.388483,7.010272,-2.606846,-1.706254,-3.154182,7.696222,-3.753412,6.549075,-6.571772,-3.465364,6.223094,4.923265,-2.208597,-0.108660,1.373766,9.152586,-1.045569,-6.779964,8.255819,-5.398587,5.332375,2.521260,-2.259682,5.462000,6.264975,-2.357346,8.525261,8.283735,3.942269,1.785001,2.373654,-4.194835,0.350578,9.084831,3.911903,-3.978954,2.517618,6.620061,8.741259,-8.286368,-5.634711,4.318753,-2.396660,-8.545388,-9.738718,-1.206750,-1.672195,-3.596208,9.467000,-0.252472,0.061839,8.676923,2.354440,-9.614798,1.640583,7.457846,-2.692017,-0.300769,7.174833,-7.785047,-3.654185,3.411746,0.058473,1.550722,4.863882,-7.348873,-9.034069,0.626873,-2.136380,-0.038794,-5.735952,8.939062,-4.121047,-4.569421,-7.581468,-7.759617,0.419592,8.912694,1.595483,-3.496393,4.267724,6.361392,-4.455014,3.561060,6.888243,3.996775,1.324371,-6.421157,-9.792238,2.904857,5.814326,5.202937,2.088781,1.041381,2.872373,-7.524482,-9.033655,1.415362,-4.235549,6.453681,-0.408907,-4.445463,-7.892583,-2.662725,9.560196,6.615921,3.399983,8.056294,-1.678487,4.378455,-8.018674,-4.652634,8.495639,-2.584602,-1.321947,1.985086,-2.488207,-6.787868,-7.584197,8.987787,-2.972803,-3.840037,1.552321,-8.524094,2.596026,-3.137142,2.235496,-2.614653,-5.946079,8.698569,0.498079,5.151647,-4.972977,-3.282387,-8.215990,-7.757756,-9.997435,-1.583895,-8.966344,8.126462,-2.655069,-6.715002,-0.286292,3.137656,2.478469,8.031310,0.760171,-3.828247,-3.105295,4.192671,-7.805320,3.275315,-8.674312,-3.953861,7.401669,-5.780795,7.473912,0.051347,-3.105301,-2.560487,9.740945,-7.612536,7.440111,-5.809306,8.671424,-0.575184,4.040116,-2.332535,-2.154901,8.110026,3.874535,3.927657,-0.033611,-9.804778,2.067394,-3.327295,5.663095,-9.209183,0.001411,-0.119902,-5.081939,-7.875291,5.797316,0.750105,7.418004,5.144439,7.293076,-7.319196,2.208876,-5.481440,0.920750,-5.973670,9.750976,1.041515,0.306885,2.165104,4.671170,-2.113421,-3.420742,-5.058246,-6.649196,-9.993232,-5.329811,4.893519,-1.738906,6.514568,-9.831167,-5.398017,-9.156370,-8.765744,1.095012,6.364641,6.510285,7.880710,5.970580,3.802414,5.520341,6.880594,-4.317004,-3.566283,-0.527006,9.134453,9.037345,-6.385374,0.174897,2.282634,-8.187044,8.376975,-0.591584,-0.753938,-3.323288,9.842869,0.982037,-8.549393,7.533997,-6.437206,-2.679683,-0.358571,6.998202,4.781975,6.876078,-8.683693,0.035677,8.167800,-9.925455,1.589799,-8.048924,3.038853,-8.880762,1.556422,-2.193575,3.421016,7.065772,-2.275315,7.863832,-0.921198,-7.338743,-8.739994,-4.330426,-9.198542,4.365478,-2.778258,-2.290347,-9.213365,9.575420,6.711817,0.363053,-2.461163,-1.036851,-7.014232,-0.363696,8.518827,1.831467,-6.395574,4.847192,-8.420331,-9.229526,-8.275359,-2.629140,1.795425,0.638468,3.496392,-1.994924,5.613600,-5.512215,-3.714577,-9.342380,-1.587897,1.253478,-0.011224,8.032174,-2.623568,4.238224,-9.283767,7.352674,6.876718,-3.798572,2.060489,-7.617754,-8.469918,-3.414756,7.378845,-3.806005,-9.204547,-5.995164,-7.548420,-1.568709,5.149070,-5.098704,4.961721,-3.717971,-9.078115,-3.620018,5.162762,-4.050380,7.223360,-1.090525,-4.286796,-5.949375,-7.458021,2.927607,-7.074995,5.289378,0.340690,-0.739379,7.452477,8.275626,5.906157,-8.254537,-5.227636,-4.664038,9.443765,-5.254842,2.982195,1.110210,6.900495,2.135515,-6.920840,1.810636,-6.051979,-2.651582,-1.715631,8.218096,2.031050,-3.284024,-3.406659,-8.803118,7.780272,4.342545,6.796671,8.736561,6.363587,3.206633,1.244090,2.227951,-0.451457,-3.948340,6.878990,-9.093293,9.970805,-5.590549,-3.208073,4.656758,1.246145,-7.780227,9.996142,3.378599,-9.911620,-4.859835,-4.905636,9.452027,-2.547348,9.809613,8.934018,-0.496806,3.662723,0.123125,1.165638,8.026856,7.530100,-9.466797,9.759039,-7.752109,-0.213707,-3.803639,-1.574729,2.439140,6.696439,1.028378,-1.693015,2.008224,-0.662854,7.924740,3.905710,6.831652,4.555705,-7.526275,2.627506,-2.183457,5.607149,-9.664998,5.478246,-5.617490,5.784641,3.692427,-2.344198,1.259142,2.838887,-1.711740,3.968152,-6.897871,6.168916,-4.511875,5.244572,-0.521650,5.309099,-3.232323,-8.249838,4.028292,-8.796538,-9.347302,2.505600,-4.207007,-8.694827,3.835204,-0.143153,-4.585294,-0.404955,-2.106146,-8.414328,3.775526,-5.317678,-1.286705,-7.072568,-0.184485,-4.365514,2.663640,-8.408323,9.778995,1.944935,-2.848799,-5.264955,9.920550,8.511722,-0.916010,8.291785,9.970445,4.091158,-2.286459,2.148180,6.841225,3.781859,2.120783,-6.572553,9.597248,-1.611439,7.881572,-3.059872,7.510968,-8.266945,8.152844,9.709639,0.531501,-7.425423,2.452016,-4.961609,-1.731612,4.614157,1.912876,-9.912282,2.620681,9.717215,6.248389,-9.766162,2.208426,-0.076527,-8.762138,-9.552845,-9.728779,4.946689,-0.314520,-4.019135,-9.384178,4.235269,7.376583,-0.243864,-9.548562,0.661668,3.793993,-9.798988,6.346478,-0.934660,4.328161,0.236426,5.807031,0.949331,8.142527,-1.485205,2.199576,2.790396,2.371437,-0.895357,5.156346,3.745158,1.224340,-7.949224,-7.097125,-5.866120,1.209228,-4.427830,-2.424468,-3.466395,5.585278,8.877012,-2.683072,-9.585802,-4.560447,6.490720,-9.180331,1.206109,8.793851,-3.225274,-8.566772,8.256626,7.889414,-2.475502,1.809425,6.548632,-8.570352,1.780836,7.714161,-4.667221,-4.560599,-5.305793,5.821985,-7.154280,8.199596,-1.223197,9.555716,7.833593,0.160323,5.022983,-4.533554,-6.806399,4.874442,-0.913187,4.758418,4.404111,-2.679375,-1.473981,6.320887,-4.940178,-7.511443,-1.396592,-0.053110,-8.212887,0.761137,-3.415267,-4.774960,-1.122570,4.836282,-8.948978,-6.679002,-3.507762,7.948462,-0.617335,-0.308480,4.063861,8.654868,-3.746480,8.114387,-5.092152,-8.484163,9.752994,2.813521,9.636269,-4.724007,3.515711,0.218628,1.838225,-4.663495,4.454950,9.931484,9.078974,-6.130714,-4.590649,-8.259547,-6.664855,-2.772120,9.283486,-5.005318,-5.412830,1.573660,4.246853,2.742742,8.127188,-3.599492,-0.447065,-9.023285,-3.290557,-0.050731,-7.217985,1.087832,2.148202,-3.840846,4.331372,3.584868,6.947033,3.740556,5.304493,-0.432543,3.619916,0.061643,-4.039252,8.115247,-0.385013,9.328788,0.329812,-3.252682,-6.963358,6.452916,8.285237,7.596783,9.340581,7.449792,-0.209914,-7.480886,-8.971775,4.635199,2.944891,4.349755,-3.739634,-8.162084,-5.648780,2.838221,-0.205166,-7.807500,9.810868,-0.052058,9.534549,-1.314317,6.843083,5.569912,-0.564302,-9.433418,7.838559,-3.577808,4.647350,4.142480,3.256995,-2.615498,-3.781990,4.236146,3.637624,-2.436652,3.181277,-3.846520,1.501581,-2.371757,-1.079301,5.236001,-1.409291,-6.760273,9.763439,0.232565,-7.640949,-8.566362,8.078406,-9.404161,5.086115,5.410365,1.896349,-7.086721,6.941109,6.604356,1.131805,2.504604,-5.958233,7.115280,-3.812057,-9.873201,3.751729,0.073803,-3.446322,7.007885,-9.352971,-4.572808,-1.666237,5.998043,7.977205,8.107002,6.852454,-4.342970,-9.287124,5.897584,5.514911,5.851972,-5.261683,0.935687,3.024707,9.378494,8.767239,6.797489,-9.608597,6.556958,4.477062,-3.788208,7.303177,-8.791194,5.330014,-6.247978,1.678391,8.225246,-1.606021,-3.693057,6.977742,-7.416255,3.565655,-0.637518,-4.283027,6.676894,-4.236651,-9.457327,3.881372,-7.836169,8.131150,0.800427,-3.812014,-5.593257,5.145682,-5.319295,-0.297027,5.309415,5.708022,6.543470,0.499242,0.268584,7.849665,2.682315,1.720401,5.020499,9.474557,7.873923,7.373717,-5.554486,3.911521,8.259526,4.993616,5.845232,-0.673706,-6.863512,-6.994628,0.969834,-7.375247,-2.145074,-3.891224,-3.993279,-2.198349,-4.792381,6.388751,-9.772036,2.697798,2.455857,-1.872931,2.650134,8.193871,-7.197471,-5.689007,1.083899,-9.292582,-1.071281,7.333573,-1.502695,-2.780816,9.342156,-7.743824,-7.618734,4.325552,-0.125770,0.266485,-0.160229,-2.937522,-0.468422,5.237934,1.398702,1.482344,-9.471189,-2.281534,-6.782359,0.119033,-8.899443,7.775055,-2.356148,-6.995654,-5.115777,-1.774715,8.629624,4.427600,2.591925,5.610769,-1.703067,-6.235600,-7.949528,-5.773383,-0.903146,-5.198861,5.146939,1.500409,6.165280,-2.006332,0.163498,-7.875533,1.574041,-4.333323,-1.619558,2.500355,-7.716124,-9.391151,-6.504404,3.304345,-3.585508,-3.628493,6.630953,7.134182,9.787687,-6.125426,5.242261,4.868249,-6.341840,6.593054,-0.458793,-9.856500,6.107118,0.025707,8.158683,-7.421187,-5.321127,8.141259,-1.559793,-1.232347,-6.821401,4.282072,-9.840962,1.853470,-2.651818,2.410178,5.295463,-8.633054,-7.040916,8.805255,-9.052033,-7.344943,-1.624016,6.105696,-7.276127,-0.595467,-8.341878,-3.790490,4.892656,-0.300257,2.211407,-9.860109,8.347959,7.321477,-9.193594,0.811113,-3.230872,3.476389,6.733087,4.463844,1.535597,-9.689096,0.550803,-1.803998,-8.855692,9.539355,-5.055089,4.804183,-3.569186,-8.601123,7.623601,4.705383,2.509641,-8.904182,0.259198,-7.308388,3.144280,5.180781,-4.046973,9.661614,-1.805918,-8.776026,-0.107080,-8.324153,-1.298057,8.218219,-5.286727,9.423487,-1.982362,-3.009893,0.192515,-7.612985,7.825045,-6.176614,6.513712,6.952438,-2.120255,-4.281145,9.361712,8.442807,8.174938,5.005904,6.894993,1.527823,-6.964909,-5.115501,6.116421,-5.690267,-0.131139,-4.173854,8.064863,2.722552,6.222063,-8.010631,-7.982931,-7.760435,7.729642,7.279859,-1.231004,-9.591961,-3.558723,-6.978882,8.714733,-4.125611,6.597393,0.311674,-4.872408,-0.585383,-9.065445,-8.792443,-8.849684,3.345497,-5.551303,5.571595,6.309612,1.599224,-0.428133,2.932676,2.958487,9.296215,-2.933569,1.421044,4.522865,-4.743419,-1.182513,-0.536924,4.991094,-6.410553,-7.611868,-4.716375,3.854990,7.423219,-7.237935,0.783657,-9.294477,-2.891316,6.310735,-0.394234,-1.154960,4.116934,9.610381,4.172635,3.843730,7.674779,3.757609,9.929174,0.844692,-4.552887,-5.238999,5.829316,-0.874446,2.224659,1.438031,-6.253810,7.374683,3.231624,6.360893,7.631979,-7.681681,-3.036874,1.282214,9.927798,-8.070992,-7.031837,3.619993,-5.628428,7.731440,-3.650368,2.355047,-2.031958,-9.997922,7.333594,8.143996,-1.770962,7.539292,7.947777,-9.855431,-2.399636,6.923537,3.901698,-0.656423,-2.985474,-4.281632,3.764210,-1.235996,-4.457469,4.398918,-5.112918,-4.203500,-8.245085,-0.073418,-1.850435,-3.595170,8.758776,1.401822,6.760142,-8.845790,-2.554664,-8.697513,-7.190965,8.957911,8.660275,6.794539,3.744844,-6.981835,9.023669,-8.278996,2.602280,-7.030325,-7.121005,-4.948329,-6.960930,9.935329,2.116405,-8.822754,-0.429338,-5.676494,-5.553962,-6.933401,3.677812,9.018507,4.368151,9.597998,1.637391,8.302963,8.508259,1.309351,6.353794,-8.126209,-3.978518,-0.847661,5.795578,-1.321977,-8.700292,0.603521,8.214685,4.474846,-7.719142,8.730042,-4.476764,7.699118,-0.838433,8.964343,-2.133769,-9.801084,-0.300905,9.371713,7.413249,9.478563,-1.780544,-6.753909,-5.088559,-3.226247,-2.307099,-8.247267,0.535198,-1.789108,-6.876443,0.358677,-7.948815,2.720733,-1.612141,-5.181813,-6.215629,-4.973607,-7.327407,-8.695299,-2.917485,-6.533637,-6.892079,3.104081,-9.472026,-9.186771,-9.190420,4.393524,0.480340,0.516130,-2.083784,-0.637793,-7.059975,0.217470,9.340564,7.549237,1.207929,-1.773933,-4.259266,4.492315,1.945927,9.828799,5.355678,-4.955689,1.536569,-4.502773,3.825544,-4.492910,5.432504,8.826604,5.097965,-4.772744,-7.149334,-6.353903,8.823347,9.071207,3.284006,-5.005460,-6.237414,-6.644355,-6.711129,9.764418,0.979738,3.663156,3.011377,8.503787,2.853204,8.145417,-9.905373,-1.514747,2.106372,-3.565172,-3.480125,0.747477,-3.423225,-5.078573,2.671221,-6.810057,8.292049,8.519136,-2.927722,9.573978,6.618968,8.434590,7.577865], dtype = "float32")#candidate|2682|(1521,)|const|float32
call_2681 = relay.TupleGetItem(func_1036_call(relay.reshape(const_2682.astype('float32'), [1521,])), 0)
call_2683 = relay.TupleGetItem(func_1039_call(relay.reshape(const_2682.astype('float32'), [1521,])), 0)
uop_2688 = relay.log10(const_2682.astype('float64')) # shape=(1521,)
output = relay.Tuple([bop_2675,call_2681,uop_2688,])
output2 = relay.Tuple([bop_2678,call_2683,uop_2688,])
func_2695 = relay.Function([var_2674,], output)
mod['func_2695'] = func_2695
mod = relay.transform.InferType()(mod)
mutated_mod['func_2695'] = func_2695
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2696 = relay.var("var_2696", dtype = "float32", shape = (16, 9, 13))#candidate|2696|(16, 9, 13)|var|float32
func_2695_call = mutated_mod.get_global_var('func_2695')
call_2697 = func_2695_call(var_2696)
output = call_2697
func_2698 = relay.Function([var_2696], output)
mutated_mod['func_2698'] = func_2698
mutated_mod = relay.transform.InferType()(mutated_mod)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_2708 = relay.TupleGetItem(func_499_call(), 1)
call_2709 = relay.TupleGetItem(func_500_call(), 1)
output = call_2708
output2 = call_2709
func_2717 = relay.Function([], output)
mod['func_2717'] = func_2717
mod = relay.transform.InferType()(mod)
output = func_2717()
func_2718 = relay.Function([], output)
mutated_mod['func_2718'] = func_2718
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2610_call = mod.get_global_var('func_2610')
func_2611_call = mutated_mod.get_global_var('func_2611')
call_2741 = relay.TupleGetItem(func_2610_call(), 1)
call_2742 = relay.TupleGetItem(func_2611_call(), 1)
func_1290_call = mod.get_global_var('func_1290')
func_1291_call = mutated_mod.get_global_var('func_1291')
call_2743 = func_1290_call()
call_2744 = func_1290_call()
func_1277_call = mod.get_global_var('func_1277')
func_1282_call = mutated_mod.get_global_var('func_1282')
var_2752 = relay.var("var_2752", dtype = "uint32", shape = (1404,))#candidate|2752|(1404,)|var|uint32
const_2753 = relay.const([-8.566857,4.510912,-4.032293,1.497976,3.248871,1.505119,-5.677504,8.332883,-5.263882,-1.847898,-6.144187,-0.761213,-7.534484,8.174658,-3.378389,-2.841493,3.548219,-2.288402,9.851303,1.841653,-6.002372,5.630761,-0.961945,-8.456633,8.333528,3.191582,7.304213,-2.016298,-3.832029,0.647840,0.194562,7.171329,5.266598,3.311626,4.843736,-8.327316,8.232319,6.601515,-1.994083,-9.008554,-8.680597,1.456406,7.106965,-2.161180,1.159849,-7.631419,6.551273,0.731362,-0.968643,3.244853,-5.486340,7.443480,7.677046,0.288643,-5.003330,8.784274,4.364535,-0.802637,7.739242,-3.632917,4.928350,0.387187,5.867144,5.316294,9.703377,6.010072,-9.568437,1.330719,8.007968,8.296807,-1.822867,1.154923,-5.494232,-1.338216,-0.487062,-3.090807,-9.896784,-4.934396,9.436313,5.025627,1.516113,-3.743011,8.452834,3.246885,-6.701413,-1.353758,-8.204731,-7.066223,9.571496,-4.492468,-8.599490,6.156946,-5.282292,-3.594013,-6.264212,1.377904,-4.026328,7.647765,6.038340,5.600534,-2.421714,6.110680,9.523129,8.747272,-2.449465,-3.902805,-6.485375,0.642062,8.390699,-1.719397,6.045970,4.865440,0.738331,1.613361,-1.620064,-4.424505,-2.385736,2.506310,-3.455757,3.426097,-4.812364,9.504483,0.029542,4.469483,-6.397727,-7.623204,3.613188,3.054645,9.236007,-9.656984,2.027281,-1.491302,-6.098553,9.818283,-8.589317,1.304459,-7.984043,6.928565,-8.226566,6.657602,4.926957,-2.765119,1.781913,7.924850,2.253592,-0.840947,1.424556,-7.540821,-9.183329,-5.447369,-1.834826,4.077066,-1.661068,8.501878,-6.760515,6.229756,-0.118579,-7.610005,8.741839,-6.549957,3.862613,-1.390265,8.900946,-2.496100,-1.993107,-4.429196,1.373223,-4.341896,0.882528,-8.904358,-9.859242,0.858844,5.704337,-1.386470,0.199655,4.143197,-0.067560,4.379663,1.785031,8.626653,-2.004333,-5.451630,-1.003878,5.325352,-6.082298,8.263194,3.122286,-1.210662,-2.867521,-3.609181,6.105932,0.191821,3.733253,-5.039369,-5.219006,-3.456941,9.582108,-7.018154,1.946459,6.233520,9.061035,-5.629995,6.698314,-0.638242,-4.343371,-1.821754,-1.016031,6.429561,-4.194749,-0.352136,1.504923,-8.017330,-8.559492,-2.336600,-9.790267,0.377172,-4.487417,6.747620,-2.821924,-0.885126,-7.863161,2.982786,-0.733922,-2.489928,-1.270260,1.830043,9.221697,-3.907876,0.246173,-6.023013,3.449423,8.737085,0.123990,8.509979,-2.963619,-8.798552,-6.538085,-1.631473,-2.403211,-9.692342,4.114543,4.374635,6.945728,-0.301425,-2.954384,-1.330735,9.942028,-3.257510,-3.961910,-5.178460,6.693084,0.765020,-2.958144,-4.182529,-7.490482,9.107025,-0.329990,8.178516,6.315299,-6.886696,-7.129512,9.953423,4.226201,-8.533350,1.224711,-0.741020,-4.556133,6.880300,4.083216,6.858799,-0.831389,-2.400034,3.453177,-7.812703,2.824468,0.703454,8.925495,1.302346,-8.441473,7.578583,8.889240,-0.786196,3.074099,-6.503363,5.584049,9.624830,9.502326,-4.003277,1.473521,0.352528,-6.921944,-1.531551,7.712116,-2.381736,0.660577,7.008000,7.392309,-0.399742,0.907763,-1.455452,7.940152,-2.133801,9.843784,5.018942,4.128074,1.133821,7.266311,-9.204062,-2.644880,-9.444763,-8.800569,-0.846180,5.215529,-3.379145,1.837628,3.795164,-6.342472,9.505042,8.439414,-6.234151,4.846961,-1.893176,9.044852,8.165595,8.639863,-9.914573,-5.339413,1.955459,3.540644,-3.053497,-3.401853,7.855999,-4.260882,-8.948031,-6.373049,-0.798032,9.122994,-6.580333,7.513441,-0.440455,-2.153820,-0.614779,6.341985,-6.249513,-0.054700,3.596276,1.130271,4.862573,-3.972074,5.961331,5.397568,-5.422204,-7.543772,1.901688,0.895625,-1.526589,-8.089955,-3.177450,-4.548618,0.542267,0.370866,-9.786263,5.527067,-9.809731,8.885245,-4.372243,-1.474613,8.049867,-9.354406,-9.471244,-8.136638,5.900028,-8.639617,-4.239862,-8.125615,8.685894,5.521488,-0.228130,7.644894,-0.969642,-1.946994,9.663383,2.661901,4.600724,-4.615942,7.047638,-2.490522,6.728486,-4.312194,-7.349422,5.227564,2.757293,6.207913,-0.824962,-7.105400,7.078101,0.751037,1.882360,-0.912724,-2.033738,4.048432,7.705421,-0.131066,-3.769273,1.754778,-3.259116,-9.947022,6.106701,9.406480,-7.077825,-2.876403,8.363007,4.696566,-9.094407,9.121235,-2.722309,8.113273,9.270844,-5.954751,-2.653519,-8.760174,3.757525,-3.294300,-4.883004,-4.799058,-3.415077,-7.531169,-8.896463,-9.935692,8.483475,-7.639395,-3.730979,-6.983701,6.608552,6.374563,-4.014248,-3.468232,-4.133980,-9.402573,6.922988,-9.189110,4.940133,1.363681,-9.760440,-3.444193,3.316360,3.297553,-8.957980,9.557075,-0.998148,-9.533783,-8.905528,-4.643349,3.822132,9.241236,1.704341,-7.449538,9.290808,7.906033,-7.390725,8.575896,-2.224390,8.425230,-2.470792,-6.318548,-7.470650,6.029107,-1.989308,7.552076,-7.453297,-4.217902,-8.488314,-7.385573,-0.467246,9.644312,-7.610917,-5.712040,7.371030,9.515547,5.538628,9.326896,-1.455680,-7.359320,-6.816616,9.709334,3.990446,5.793577,-4.425592,5.034743,0.611479,4.757647,5.088855,-8.289848,-7.458662,0.316042,2.768708,3.916710,4.260910,-2.955430,5.878542,5.136079,9.456350,0.927520,-2.022483,-4.287338,9.986196,7.531956,-0.074104,-4.808879,-5.781569,-1.829907,-4.881943,0.157382,4.198885,4.463009,0.941302,9.284879,6.201702,1.158887,4.445646,5.291527,9.556413,-8.454684,-5.722071,-2.454852,-6.760244,1.235257,-4.211099,-1.117418,-1.574397,5.246238,-7.506108,5.475331,2.692105,-5.767065,-4.555909,3.299437,-1.296132,8.113357,-1.016123,1.250891,-5.925327,2.335446,-4.825591,3.270951,-5.768040,-0.841165,8.162969,-1.826492,-7.587689,-6.305982,6.128114,3.691327,4.178495,-0.567246,-3.450899,-7.344100,-4.398244,-5.089488,8.280186,-9.326142,-5.969161,4.719966,-0.343895,-0.629349,-7.643569,9.740482,-9.571467,1.326824,-9.568144,-7.703539,-5.167849,0.128102,-7.692306,5.543553,9.598039,3.766257,-2.247143,-6.395652,8.606483,-3.456057,5.806084,7.642328,-1.737589,0.728437,-3.692253,7.052350,-6.068278,-9.630396,-8.995709,-1.193041,9.655735,8.401840,-2.506588,-3.415937,-5.932746,9.665491,-8.927152,-5.028974,-7.823730,8.393356,0.375140,5.142586,-1.351099,-9.649813,9.767893,-2.771564,3.903428,-7.201835,4.075694,7.824262,1.364439,0.862682,7.671396,-9.601584,3.351570,-6.022210,0.962983,-9.008924,7.277282,-8.043894,-9.140039,9.120788,8.599362,4.325915,-0.646188,-2.738368,-7.516796,-8.841764,2.437670,7.102068,-0.206615,6.338065,9.519220,3.678065,0.514577,1.269814,5.390761,3.093887,-2.011943,6.962712,9.065702,0.776587,-1.916227,7.984038,-6.355244,-1.108552,-3.515486,-0.143108,-4.522294,0.861783,-6.358017,1.535595,8.899343,-4.210705,0.247482,3.250995,0.679587,-1.063055,-4.464683,-9.640330,-5.578097,5.825273,-8.732921,-4.669967,-0.221735,-6.103070,-2.070323,-7.630050,-9.593700,-5.543569,-5.098472,-1.019873,-1.208326,1.322576,-5.780299,7.508100,1.086981,-0.401920,9.774716,-1.559876,-3.598061,-3.869698,-7.085954,-0.159988,1.230653,-6.145027,-9.213386,5.113710,-8.806238,6.731587,-8.004847,7.737477,-5.129999,-5.175927,3.909277,6.968885,2.583829,-3.217173,-7.320105,8.462838,3.565098,7.502930,-3.796910,-1.014402,-9.349763,-5.841197,7.961477,-7.228727,1.463800,7.742180,8.159613,-0.124579,-2.887836,-2.429258,5.292269,-6.423068,4.993453,5.073523,-7.585153,-0.792065,9.993129,-6.975884,0.678936,-7.944725,9.311134,0.412383,-1.869356,6.300886,-5.610654,7.310254,5.994393,3.924732,-6.760370,6.695061,-2.093352,0.299900,-4.970539,-1.753655,-5.284291,-3.154191,-7.807903,-1.285599,1.079421,1.246102,1.428202,4.355679,-2.652041,6.261729,6.826465,-1.619667,0.337746,-0.830883,7.609765,1.597705,8.254445,2.083987,9.212638,7.246347,9.513529,-4.123470,5.397623,-0.631557,-3.500125,-9.590333,-8.563757,-7.995394,-7.985132,2.959018,3.292851,2.474409,-2.360534,7.546613,-4.987324,-2.263293,7.405250,-8.604111,-0.756432,1.398545,0.167179,9.672480,-5.268589,9.343591,-7.821139,-4.223181,3.334881,-3.714825,-4.996522,9.165751,-4.954087,-9.677556,-9.266404,8.744715,7.223488,-8.649016,-8.881539,-7.510735,9.887544,-1.419320,-6.329964,8.002308,-1.018128,9.351400,1.846865,-6.279334,-8.048570,-1.532425,4.647010,-6.623942,-2.171532,6.835450,-0.773793,4.777418,1.858003,3.638343,-1.295142,2.070136,-4.607884,1.878562,1.859648,-1.829276,-4.876040,6.001508,-4.020577,2.108688,-6.427497,3.833898,-2.127612,-9.782858,-9.477673,-2.470907,-2.272208,-0.709086,-3.313201,3.217270,4.861019,-5.644472,-1.510892,2.389980,0.618849,1.767051,-2.812344,-3.896426,1.149741,-1.547670,-2.206579,-7.796986,8.878053,4.760720,-4.902847,4.186923,-1.156255,4.241913,0.748241,1.058970,9.392710,-4.098370,-6.492450,2.037486,4.697225,4.175023,-4.874866,4.840300,-6.280105,8.652842,5.470155,-1.594745,-8.773203,-6.855840,8.541587,-2.521456,-5.814273,-1.971691,2.715569,-8.318400,5.269815,-7.958843,8.335875,7.146232,3.368846,-1.773892,-2.113498,-2.862782,-1.141614,-7.668349,8.054287,7.625179,-8.974778,-9.619462,5.442482,-3.841099,-8.049832,-9.788925,-5.532797,-1.148740,-7.303184,-3.578219,2.839467,-9.043913,6.161113,4.194647,6.823022,-7.892045,-6.069581,-2.160366,9.781994,7.062582,4.702495,5.460162,1.144917,8.717203,-9.567071,-5.459979,1.767662,-5.646747,-3.136132,1.306083,-2.851088,1.303369,-1.862018,-5.117373,-0.783436,3.182730,4.672068,-1.218110,-1.901510,-4.087387,3.379691,7.352970,8.131084,-6.864494,8.345673,-7.403788,5.159667,0.713433,1.684290,-4.672585,7.263647,5.284663,-3.474823,8.219216,-2.513343,-9.084205,6.992114,-5.182048,3.025835,-7.626244,-6.967458,-0.061832,-2.569184,3.936199,7.309265,4.461761,4.649884,9.436334,-9.048748,3.988986,-8.168523,9.247439,8.222305,9.600609,-0.930254,4.080487,-0.622598,-9.656991,4.345655,-6.179971,6.315146,6.657206,-3.576003,4.792459,-9.457365,8.507296,-8.329811,-4.125036,-0.128229,-2.311892,1.016040,3.091123,6.666860,-3.829316,7.580340,0.401161,-7.384593,-2.410852,9.029906,-2.675980,-9.859133,-9.258085,-8.609986,-3.936267,-6.039924,0.544907,-8.122876,0.391936,-2.160738,2.224705,-2.076256,9.197636,0.484702,-3.581467,0.331745,-8.193295,-8.117352,-6.119901,8.282297,-1.189581,1.013618,6.651624,-9.990220,2.398691,-6.428641,8.459371,9.555871,-4.078711,-2.886675,0.381433,4.099746,4.944503,-0.152374,-9.740225,-8.093637,-9.884766,-0.593166,8.719739,-1.532403,7.828903,9.845119,-5.104588,3.501217,-9.354128,5.018747,2.540271,8.357737,-8.266469,-8.224531,-2.192588,7.717101,-6.657381,-5.240719,4.004559,-8.605745,-9.456601,6.364751,-6.496322,7.540699,-4.406398,-8.079341,4.756929,-5.737948,-4.202248,-6.781605,1.173491,6.635668,7.966455,6.710351,-7.314390,0.087073,-3.746985,2.854014,-2.535328,3.290074,2.715151,-8.947533,4.836450,7.501934,-4.225156,-0.681365,9.243147,2.936324,-1.231353,2.859141,8.394435,1.973181,0.970222,-5.940169,8.464763,-6.558031,-7.248735,6.625257,3.413007,7.644924,-4.092820,2.181127,0.465189,-8.312788,-2.034726,-3.632215,-4.201706,4.338133,6.131449,3.108510,3.509672,2.502406,9.244176,1.145303,9.973210,-1.360758,7.601761,-8.727361,-6.149091,-4.435555,-5.000567,-2.306374,-5.137521,0.796014,-3.401832,-1.059970,-1.263400,4.977264,-1.748872,2.022778,8.136289,9.389524,3.632063,6.958551,-6.730322,-4.903058,-6.460068,5.233898,-8.021363,-0.989390,-8.475047,-3.615662,6.424577,-8.814141,8.117988,5.467791,6.824326,2.059155,-9.935728,-8.386851,-8.883258,-8.528349,-5.241203,1.390493,-6.712564,5.815683,-6.303064,7.243332,6.844062,5.364455,6.291738,0.735432,2.992962,-6.967796,2.840508,-8.992818,0.702819,-6.659767,-4.083520,2.074476,-9.971786,6.036372,-9.917651,-2.910660,-0.024111,-2.998227,-6.853624,-4.325304,-4.519473,-8.857887,-7.358683,4.331337,9.254018,3.259401,9.000116,-4.601043,2.979832,-9.131547,-6.707397,8.934319,-8.074032,4.665480,9.839658,-3.541742,-0.558716,3.856958,9.980505,-9.222835,-5.122608,8.681771,-4.807133,5.749816,8.865414,-3.676634,-3.089586,2.775216,7.840269,-7.122021,-5.050464,4.927331,9.839755,8.352417,3.483899,6.139668,3.764259,-5.934646,-2.141241,1.540707,5.215593,7.937193,6.353176,1.758064,3.663754,5.716880,-4.137141,-4.648860,2.281419,7.576412,-5.303176,7.495296,0.923382,7.182299,7.100833,7.230248,-1.838814,0.340609,2.115738,0.068643,-6.081756,0.099164,1.692388,-3.936724,6.323066,3.832282,-9.290003,-2.180718,-6.938474,6.934539,-9.369252,9.987265,6.763426,2.270908,3.540983,-3.620619,8.672623,-9.874329,6.892414,-9.093477,-7.554981,-1.096506,-9.345101,-5.726817,6.512956,-5.883918,2.436387,-1.377911,-2.061625,1.914059,-9.367042,1.631648,2.234590,-5.070002,-9.420110,-1.192546,2.753617,7.559199,2.173511,-8.613575,3.758654,-0.132625,-8.759578,-2.086922,-7.525991,-4.790625,4.041072,7.498389,-2.159130,7.175431,-2.210741,6.739309,0.085497,4.208919,1.874499,5.948604,-2.504737,2.707059,-2.112631,-5.176340,8.088288,-0.846314,-7.734136,-1.053635,4.460747,-1.762105,4.638347,0.913742,-5.095420,1.377561,7.240024,8.771650,-3.985664,-2.981465,-0.176969,-3.018221,-4.677600,-2.407098,-2.506953,3.901007,-1.584300,0.358103,9.846843,-9.749350,9.818646,5.174871,-4.376361,-7.157956,7.708998,-3.864911,8.377564,-8.501803,9.188333,8.816614,9.223624,1.865176,-5.898096,7.810560,-4.748737,3.677830,8.950922,-7.669260,1.134156,-0.298372,4.601022,-1.570366,6.408297,-7.694332,9.734443,-2.023589,-9.002281,9.129276,-6.650988,6.832726,-0.382352,-3.693969,3.373712,-2.194245,-1.540197,-9.477918,4.784308,-8.115841,8.975428,7.002211,-4.081055,1.128774,4.273840,9.272469,2.014132,-0.442149,-9.081601,3.287433,0.055064,-0.907566,-2.095527,-8.859672,-1.119766,2.012986,0.843550,-1.527408,-7.545200,2.182331,-3.858565,-6.004421,0.535287,-9.268884,8.497313,5.567531,7.034307,-2.679159,-4.757095,6.937154,-2.106624,-8.923203,1.401937,1.603149,-2.543041,9.625403,-4.911559,-1.086101,2.847434,0.125346,-3.270971,6.120383,-5.478824,-5.153124,-4.964077,2.142891,-1.308715,8.057368,6.706698,6.057507,9.283627,-4.381579,-1.676051,9.332567,5.017465,9.630786,0.560488,1.643977,-8.750495,2.071035,7.120472,0.040866,-7.421357,7.539550,-5.295902,-8.970852,-9.707957,9.857277,2.260442,-3.281325,7.441350,3.586513,-5.551756,-3.572289,-9.176879,-8.938365,1.097759,7.295206,-5.414971,4.409073,9.574964,-9.181561,-2.363333,1.460782,-2.159305,3.137329,4.794513,-7.822169,4.038288,-4.694986,-1.173874,-5.634275,4.512651,-0.887136,-3.866746,-1.433920,4.280295,5.566931,-3.286890,6.218962,-6.860006,-9.426429,5.952573,-1.718319,1.906142,-6.741184,2.276165,4.581180,-3.577401,-2.313822,9.100530,7.755806,5.835306,9.105645,5.653295,-5.060135,9.689058,0.184398,0.130832,6.195559,-9.849036,8.142795,-9.742530,-0.409163,-0.430763,-3.595416,2.791704,-6.432614,-9.998017,-9.576668,-9.048964,-3.664989,2.362235,4.436758,2.575407,-4.505440,-0.036202,2.677174,-8.047101,-2.632996,-9.451354,3.784233,-9.887346,-2.000831,2.928662,-9.519260,4.959924,4.587687,-0.266902,3.110740,1.197381,0.972645,0.380426,8.417298,1.698508,-6.567914,-5.346756,2.876494,0.014516,5.690599,1.154580,4.241097,-2.172740,0.540755,3.022203,-2.554025,-6.173586,-8.176758,-7.907890,-0.993982,4.291881,6.287055,-1.903723,-7.061731,-0.087731,-0.255650,8.930203,-7.646716,-9.429121], dtype = "float32")#candidate|2753|(1521,)|const|float32
var_2754 = relay.var("var_2754", dtype = "int8", shape = (2496,))#candidate|2754|(2496,)|var|int8
call_2751 = relay.TupleGetItem(func_1277_call(relay.reshape(var_2752.astype('uint32'), [12, 9, 13]), relay.reshape(const_2753.astype('float32'), [1, 1521]), relay.reshape(var_2754.astype('int8'), [2496,]), ), 3)
call_2755 = relay.TupleGetItem(func_1282_call(relay.reshape(var_2752.astype('uint32'), [12, 9, 13]), relay.reshape(const_2753.astype('float32'), [1, 1521]), relay.reshape(var_2754.astype('int8'), [2496,]), ), 3)
output = relay.Tuple([call_2741,call_2743,call_2751,var_2752,const_2753,var_2754,])
output2 = relay.Tuple([call_2742,call_2744,call_2755,var_2752,const_2753,var_2754,])
func_2758 = relay.Function([var_2752,var_2754,], output)
mod['func_2758'] = func_2758
mod = relay.transform.InferType()(mod)
var_2759 = relay.var("var_2759", dtype = "uint32", shape = (1404,))#candidate|2759|(1404,)|var|uint32
var_2760 = relay.var("var_2760", dtype = "int8", shape = (2496,))#candidate|2760|(2496,)|var|int8
output = func_2758(var_2759,var_2760,)
func_2761 = relay.Function([var_2759,var_2760,], output)
mutated_mod['func_2761'] = func_2761
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2205_call = mod.get_global_var('func_2205')
func_2206_call = mutated_mod.get_global_var('func_2206')
call_2763 = func_2205_call()
call_2764 = func_2205_call()
func_1952_call = mod.get_global_var('func_1952')
func_1954_call = mutated_mod.get_global_var('func_1954')
var_2767 = relay.var("var_2767", dtype = "float64", shape = (2496,))#candidate|2767|(2496,)|var|float64
call_2766 = relay.TupleGetItem(func_1952_call(relay.reshape(var_2767.astype('float64'), [16, 12, 13])), 0)
call_2768 = relay.TupleGetItem(func_1954_call(relay.reshape(var_2767.astype('float64'), [16, 12, 13])), 0)
output = relay.Tuple([call_2763,call_2766,var_2767,])
output2 = relay.Tuple([call_2764,call_2768,var_2767,])
func_2774 = relay.Function([var_2767,], output)
mod['func_2774'] = func_2774
mod = relay.transform.InferType()(mod)
mutated_mod['func_2774'] = func_2774
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2775 = relay.var("var_2775", dtype = "float64", shape = (2496,))#candidate|2775|(2496,)|var|float64
func_2774_call = mutated_mod.get_global_var('func_2774')
call_2776 = func_2774_call(var_2775)
output = call_2776
func_2777 = relay.Function([var_2775], output)
mutated_mod['func_2777'] = func_2777
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2847 = relay.var("var_2847", dtype = "float32", shape = (8, 4, 5))#candidate|2847|(8, 4, 5)|var|float32
uop_2848 = relay.log2(var_2847.astype('float32')) # shape=(8, 4, 5)
func_2331_call = mod.get_global_var('func_2331')
func_2332_call = mutated_mod.get_global_var('func_2332')
call_2850 = relay.TupleGetItem(func_2331_call(), 0)
call_2851 = relay.TupleGetItem(func_2332_call(), 0)
output = relay.Tuple([uop_2848,call_2850,])
output2 = relay.Tuple([uop_2848,call_2851,])
func_2852 = relay.Function([var_2847,], output)
mod['func_2852'] = func_2852
mod = relay.transform.InferType()(mod)
var_2853 = relay.var("var_2853", dtype = "float32", shape = (8, 4, 5))#candidate|2853|(8, 4, 5)|var|float32
output = func_2852(var_2853)
func_2854 = relay.Function([var_2853], output)
mutated_mod['func_2854'] = func_2854
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_2910 = func_2717_call()
call_2911 = func_2717_call()
uop_2914 = relay.log(call_2910.astype('float64')) # shape=(1, 9, 13)
uop_2916 = relay.log(call_2911.astype('float64')) # shape=(1, 9, 13)
func_360_call = mod.get_global_var('func_360')
func_362_call = mutated_mod.get_global_var('func_362')
var_2919 = relay.var("var_2919", dtype = "float32", shape = (1521,))#candidate|2919|(1521,)|var|float32
call_2918 = func_360_call(relay.reshape(var_2919.astype('float32'), [13, 9, 13]))
call_2920 = func_360_call(relay.reshape(var_2919.astype('float32'), [13, 9, 13]))
var_2925 = relay.var("var_2925", dtype = "float64", shape = (11, 9, 13))#candidate|2925|(11, 9, 13)|var|float64
bop_2926 = relay.left_shift(uop_2914.astype('uint8'), var_2925.astype('uint8')) # shape=(11, 9, 13)
bop_2929 = relay.left_shift(uop_2916.astype('uint8'), var_2925.astype('uint8')) # shape=(11, 9, 13)
output = relay.Tuple([call_2918,var_2919,bop_2926,])
output2 = relay.Tuple([call_2920,var_2919,bop_2929,])
func_2931 = relay.Function([var_2919,var_2925,], output)
mod['func_2931'] = func_2931
mod = relay.transform.InferType()(mod)
var_2932 = relay.var("var_2932", dtype = "float32", shape = (1521,))#candidate|2932|(1521,)|var|float32
var_2933 = relay.var("var_2933", dtype = "float64", shape = (11, 9, 13))#candidate|2933|(11, 9, 13)|var|float64
output = func_2931(var_2932,var_2933,)
func_2934 = relay.Function([var_2932,var_2933,], output)
mutated_mod['func_2934'] = func_2934
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2962 = relay.var("var_2962", dtype = "float64", shape = ())#candidate|2962|()|var|float64
var_2963 = relay.var("var_2963", dtype = "float64", shape = (11, 13, 8))#candidate|2963|(11, 13, 8)|var|float64
bop_2964 = relay.divide(var_2962.astype('float64'), var_2963.astype('float64')) # shape=(11, 13, 8)
output = bop_2964
output2 = bop_2964
func_2977 = relay.Function([var_2962,var_2963,], output)
mod['func_2977'] = func_2977
mod = relay.transform.InferType()(mod)
var_2978 = relay.var("var_2978", dtype = "float64", shape = ())#candidate|2978|()|var|float64
var_2979 = relay.var("var_2979", dtype = "float64", shape = (11, 13, 8))#candidate|2979|(11, 13, 8)|var|float64
output = func_2977(var_2978,var_2979,)
func_2980 = relay.Function([var_2978,var_2979,], output)
mutated_mod['func_2980'] = func_2980
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_2997 = func_2717_call()
call_2998 = func_2717_call()
output = call_2997
output2 = call_2998
func_3004 = relay.Function([], output)
mod['func_3004'] = func_3004
mod = relay.transform.InferType()(mod)
mutated_mod['func_3004'] = func_3004
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3004_call = mutated_mod.get_global_var('func_3004')
call_3005 = func_3004_call()
output = call_3005
func_3006 = relay.Function([], output)
mutated_mod['func_3006'] = func_3006
mutated_mod = relay.transform.InferType()(mutated_mod)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_3108 = relay.TupleGetItem(func_499_call(), 1)
call_3109 = relay.TupleGetItem(func_500_call(), 1)
output = relay.Tuple([call_3108,])
output2 = relay.Tuple([call_3109,])
func_3116 = relay.Function([], output)
mod['func_3116'] = func_3116
mod = relay.transform.InferType()(mod)
output = func_3116()
func_3117 = relay.Function([], output)
mutated_mod['func_3117'] = func_3117
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1337_call = mod.get_global_var('func_1337')
func_1339_call = mutated_mod.get_global_var('func_1339')
call_3122 = relay.TupleGetItem(func_1337_call(), 0)
call_3123 = relay.TupleGetItem(func_1339_call(), 0)
output = relay.Tuple([call_3122,])
output2 = relay.Tuple([call_3123,])
func_3134 = relay.Function([], output)
mod['func_3134'] = func_3134
mod = relay.transform.InferType()(mod)
output = func_3134()
func_3135 = relay.Function([], output)
mutated_mod['func_3135'] = func_3135
mutated_mod = relay.transform.InferType()(mutated_mod)
func_262_call = mod.get_global_var('func_262')
func_264_call = mutated_mod.get_global_var('func_264')
call_3159 = relay.TupleGetItem(func_262_call(), 0)
call_3160 = relay.TupleGetItem(func_264_call(), 0)
output = relay.Tuple([call_3159,])
output2 = relay.Tuple([call_3160,])
func_3164 = relay.Function([], output)
mod['func_3164'] = func_3164
mod = relay.transform.InferType()(mod)
output = func_3164()
func_3165 = relay.Function([], output)
mutated_mod['func_3165'] = func_3165
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1106_call = mod.get_global_var('func_1106')
func_1108_call = mutated_mod.get_global_var('func_1108')
call_3235 = relay.TupleGetItem(func_1106_call(), 0)
call_3236 = relay.TupleGetItem(func_1108_call(), 0)
var_3242 = relay.var("var_3242", dtype = "float32", shape = (6, 9, 13))#candidate|3242|(6, 9, 13)|var|float32
bop_3243 = relay.bitwise_or(call_3235.astype('int32'), var_3242.astype('int32')) # shape=(6, 9, 13)
bop_3246 = relay.bitwise_or(call_3236.astype('int32'), var_3242.astype('int32')) # shape=(6, 9, 13)
uop_3248 = relay.erf(bop_3243.astype('float32')) # shape=(6, 9, 13)
uop_3250 = relay.erf(bop_3246.astype('float32')) # shape=(6, 9, 13)
output = uop_3248
output2 = uop_3250
func_3258 = relay.Function([var_3242,], output)
mod['func_3258'] = func_3258
mod = relay.transform.InferType()(mod)
mutated_mod['func_3258'] = func_3258
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3259 = relay.var("var_3259", dtype = "float32", shape = (6, 9, 13))#candidate|3259|(6, 9, 13)|var|float32
func_3258_call = mutated_mod.get_global_var('func_3258')
call_3260 = func_3258_call(var_3259)
output = call_3260
func_3261 = relay.Function([var_3259], output)
mutated_mod['func_3261'] = func_3261
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1106_call = mod.get_global_var('func_1106')
func_1108_call = mutated_mod.get_global_var('func_1108')
call_3272 = relay.TupleGetItem(func_1106_call(), 0)
call_3273 = relay.TupleGetItem(func_1108_call(), 0)
var_3278 = relay.var("var_3278", dtype = "float32", shape = (15, 9, 13))#candidate|3278|(15, 9, 13)|var|float32
bop_3279 = relay.floor_divide(call_3272.astype('float32'), var_3278.astype('float32')) # shape=(15, 9, 13)
bop_3282 = relay.floor_divide(call_3273.astype('float32'), var_3278.astype('float32')) # shape=(15, 9, 13)
output = relay.Tuple([bop_3279,])
output2 = relay.Tuple([bop_3282,])
func_3283 = relay.Function([var_3278,], output)
mod['func_3283'] = func_3283
mod = relay.transform.InferType()(mod)
mutated_mod['func_3283'] = func_3283
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3284 = relay.var("var_3284", dtype = "float32", shape = (15, 9, 13))#candidate|3284|(15, 9, 13)|var|float32
func_3283_call = mutated_mod.get_global_var('func_3283')
call_3285 = func_3283_call(var_3284)
output = call_3285
func_3286 = relay.Function([var_3284], output)
mutated_mod['func_3286'] = func_3286
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1440_call = mod.get_global_var('func_1440')
func_1442_call = mutated_mod.get_global_var('func_1442')
call_3291 = relay.TupleGetItem(func_1440_call(), 1)
call_3292 = relay.TupleGetItem(func_1442_call(), 1)
func_2400_call = mod.get_global_var('func_2400')
func_2404_call = mutated_mod.get_global_var('func_2404')
var_3301 = relay.var("var_3301", dtype = "float32", shape = (702, 1))#candidate|3301|(702, 1)|var|float32
var_3302 = relay.var("var_3302", dtype = "int8", shape = (2496,))#candidate|3302|(2496,)|var|int8
call_3300 = relay.TupleGetItem(func_2400_call(relay.reshape(var_3301.astype('float32'), [702,]), relay.reshape(var_3302.astype('int8'), [2496,]), ), 1)
call_3303 = relay.TupleGetItem(func_2404_call(relay.reshape(var_3301.astype('float32'), [702,]), relay.reshape(var_3302.astype('int8'), [2496,]), ), 1)
var_3312 = relay.var("var_3312", dtype = "float32", shape = (1521,))#candidate|3312|(1521,)|var|float32
bop_3313 = relay.power(call_3300.astype('float32'), relay.reshape(var_3312.astype('float32'), relay.shape_of(call_3300))) # shape=(1521,)
bop_3316 = relay.power(call_3303.astype('float32'), relay.reshape(var_3312.astype('float32'), relay.shape_of(call_3303))) # shape=(1521,)
output = relay.Tuple([call_3291,var_3301,var_3302,bop_3313,])
output2 = relay.Tuple([call_3292,var_3301,var_3302,bop_3316,])
func_3322 = relay.Function([var_3301,var_3302,var_3312,], output)
mod['func_3322'] = func_3322
mod = relay.transform.InferType()(mod)
mutated_mod['func_3322'] = func_3322
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3322_call = mutated_mod.get_global_var('func_3322')
var_3324 = relay.var("var_3324", dtype = "float32", shape = (702, 1))#candidate|3324|(702, 1)|var|float32
var_3325 = relay.var("var_3325", dtype = "int8", shape = (2496,))#candidate|3325|(2496,)|var|int8
var_3326 = relay.var("var_3326", dtype = "float32", shape = (1521,))#candidate|3326|(1521,)|var|float32
call_3323 = func_3322_call(var_3324,var_3325,var_3326,)
output = call_3323
func_3327 = relay.Function([var_3324,var_3325,var_3326,], output)
mutated_mod['func_3327'] = func_3327
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2590_call = mod.get_global_var('func_2590')
func_2592_call = mutated_mod.get_global_var('func_2592')
call_3343 = relay.TupleGetItem(func_2590_call(), 0)
call_3344 = relay.TupleGetItem(func_2592_call(), 0)
output = call_3343
output2 = call_3344
func_3346 = relay.Function([], output)
mod['func_3346'] = func_3346
mod = relay.transform.InferType()(mod)
output = func_3346()
func_3347 = relay.Function([], output)
mutated_mod['func_3347'] = func_3347
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3359 = relay.var("var_3359", dtype = "uint32", shape = (7, 6, 2))#candidate|3359|(7, 6, 2)|var|uint32
var_3360 = relay.var("var_3360", dtype = "uint32", shape = (7, 6, 2))#candidate|3360|(7, 6, 2)|var|uint32
bop_3361 = relay.bitwise_xor(var_3359.astype('uint32'), relay.reshape(var_3360.astype('uint32'), relay.shape_of(var_3359))) # shape=(7, 6, 2)
output = relay.Tuple([bop_3361,])
output2 = relay.Tuple([bop_3361,])
func_3366 = relay.Function([var_3359,var_3360,], output)
mod['func_3366'] = func_3366
mod = relay.transform.InferType()(mod)
var_3367 = relay.var("var_3367", dtype = "uint32", shape = (7, 6, 2))#candidate|3367|(7, 6, 2)|var|uint32
var_3368 = relay.var("var_3368", dtype = "uint32", shape = (7, 6, 2))#candidate|3368|(7, 6, 2)|var|uint32
output = func_3366(var_3367,var_3368,)
func_3369 = relay.Function([var_3367,var_3368,], output)
mutated_mod['func_3369'] = func_3369
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_3489 = func_217_call()
call_3490 = func_217_call()
func_1277_call = mod.get_global_var('func_1277')
func_1282_call = mutated_mod.get_global_var('func_1282')
const_3513 = relay.const([-6,-10,5,-1,8,2,2,1,1,7,-4,-4,8,-2,-7,-7,-9,5,6,-6,5,-10,9,-8,-1,-6,-9,4,4,-4,-2,-5,7,4,7,10,9,-10,3,-1,-2,9,-5,-1,-8,3,8,-10,7,2,3,-7,-4,-3,4,-3,-8,10,-7,4,9,-7,5,-6,1,-8,10,9,2,-4,3,-7,-2,-6,-9,6,8,-9,-1,7,10,8,-3,-7,8,-3,1,-4,6,-3,10,7,3,1,8,5,5,2,-8,-3,10,-9,-6,5,-3,-1,8,-1,1,-4,-9,-8,2,-2,-1,-9,1,-2,-9,2,-5,-4,-10,-3,-6,9,6,2,9,8,-9,1,-5,10,1,-5,-5,-9,-4,6,-9,-7,-4,3,-3,3,10,-5,-10,8,-6,-8,-1,-6,1,-7,6,-7,3,6,-3,-1,5,-7,-10,6,7,7,-3,5,4,4,7,10,3,7,7,10,-3,-8,-9,9,10,-6,-10,7,-2,-3,4,9,1,5,6,-9,2,4,-2,9,-10,5,5,-5,6,-8,-3,-10,-4,4,2,-3,-1,-6,-1,-6,-10,-2,-6,-4,6,3,-10,6,9,6,-3,4,5,8,-8,8,7,5,-6,6,-10,1,-1,5,-7,1,-9,6,8,-1,-10,4,-6,3,-7,-4,-7,8,4,-7,-4,10,3,7,-2,8,7,3,9,5,-4,-5,-6,6,8,-10,2,-6,-10,8,3,-5,-6,-4,-2,-2,-2,7,2,9,-7,-2,10,7,1,1,-1,-4,5,-3,9,-5,-4,8,-6,-8,5,-3,6,-7,7,-10,-6,-7,-4,-2,-8,1,-9,-10,3,7,5,-5,2,-9,1,7,-6,10,5,-1,9,4,1,5,9,-4,-4,7,-2,-6,10,2,-10,-5,6,-7,-10,-5,5,8,1,-10,2,2,-8,9,-6,3,5,8,-6,6,-5,10,8,4,2,6,-5,-10,-9,-10,-1,-8,1,-8,2,-4,3,-7,-1,-2,-8,7,-9,6,-7,2,7,4,9,-4,6,-9,3,-1,8,-9,4,-8,6,-10,10,1,-5,5,7,-6,-1,-1,1,-3,7,-5,-10,5,-9,-9,8,-6,2,-8,3,9,9,10,-2,-10,5,-2,-8,-10,-2,6,6,-5,-5,7,-1,2,8,1,-3,1,-4,-2,7,-9,-1,-9,9,7,-10,-10,3,-10,-5,1,2,5,-4,-8,1,10,-4,-8,4,7,-10,-5,-10,-3,8,3,7,-3,9,2,3,-1,-2,2,-4,1,5,-6,1,-1,7,-8,-4,-7,-6,-4,-2,6,3,9,-6,-1,6,-7,1,7,-2,4,6,2,2,-1,-8,-8,6,8,8,6,-7,3,2,5,5,-1,-3,-4,-8,9,3,-7,-7,-2,2,-2,-10,-8,5,8,3,4,4,-10,3,6,-1,5,-6,4,5,-9,-3,9,10,-9,-9,-10,-10,-3,2,-9,2,10,10,-8,-1,4,-5,1,2,-10,-2,-2,-3,-7,2,-7,-9,2,10,-8,8,5,5,-9,-8,6,3,4,10,-10,-7,-9,-3,-6,3,-6,-6,-2,-8,7,-4,-6,10,-1,-1,-7,8,-5,-6,-4,6,8,10,2,5,-4,4,-5,9,-7,9,-9,7,-7,-6,2,10,4,3,10,7,8,1,6,-3,2,-6,-10,6,7,-10,-4,10,4,5,-5,5,2,9,10,2,6,5,-10,-7,5,-6,2,8,-3,-8,-3,-2,-1,-6,4,2,-3,-8,-2,-2,4,7,-5,-2,7,-7,-2,-9,9,-3,1,-3,-4,9,-7,2,-8,9,-5,-4,-8,-5,9,3,-9,-10,-2,9,5,-10,1,-6,-3,4,4,10,-10,-4,1,10,-6,4,-5,-3,-3,5,-7,4,-5,-7,10,-5,-4,-1,8,7,-2,-1,-6,-9,9,6,6,5,-10,-2,-10,1,4,9,5,-6,-10,6,-3,-6,9,-8,2,6,-8,4,-3,-1,9,1,-7,1,-5,-3,1,1,-3,-5,-2,9,-1,-7,-8,-3,8,2,-4,5,1,-8,-7,-4,-7,5,2,-9,-7,-7,-7,-3,-8,-2,-10,-2,5,5,8,-2,10,4,3,7,4,-6,-6,-5,6,9,-6,-8,2,3,-5,-6,-6,7,8,1,7,10,-8,10,-6,-1,1,-3,5,4,3,-4,-2,10,4,9,-9,-7,-8,1,5,6,5,10,5,9,3,9,-4,-5,-10,-2,-7,-6,-3,9,-10,5,-4,5,-8,-9,10,8,9,-4,2,-8,2,-4,-10,6,-9,3,-7,-3,5,-8,2,-10,-1,-9,-2,-2,8,3,10,-8,-2,2,-1,4,9,-10,-8,-3,9,-2,9,-5,-9,-5,-8,9,3,-9,8,-8,-5,-9,3,2,4,-10,7,9,4,4,-4,3,-4,-2,6,-1,-10,-4,4,4,-1,10,10,3,-3,9,9,7,-2,8,-10,-9,-9,3,10,-1,2,10,-3,9,1,7,7,5,-4,-9,10,-5,10,2,7,-4,9,4,-6,-9,-10,7,2,-9,3,-3,4,3,7,-8,1,7,6,1,4,-1,8,-2,-1,9,8,8,1,10,9,4,9,-1,3,-1,3,3,-1,6,-5,8,8,-7,-9,8,-4,9,6,-10,-3,-7,-2,-10,5,-5,-2,6,-10,8,2,7,-8,9,8,2,10,-8,2,-5,5,-9,-2,-6,2,2,-7,9,-5,9,10,5,-5,-10,2,-5,-7,5,-3,-2,4,-8,2,8,10,3,1,7,10,4,-7,10,-3,-3,-5,-1,8,-1,1,-10,-7,8,-10,5,-6,-3,-7,-5,7,9,3,-2,-1,3,-10,-10,7,-8,-5,-8,-3,-2,-5,3,4,-7,-1,-8,-10,2,-4,-9,-10,-10,10,-4,3,3,4,4,-7,-5,-8,9,-3,-7,3,10,1,-8,1,5,-1,-2,6,3,6,2,-10,-9,-3,-2,2,-2,5,5,-4,-10,1,-10,-7,-10,10,7,4,4,2,-4,9,9,-7,-10,7,8,1,6,-8,2,-8,-7,-5,-10,7,3,-1,4,9,9,-3,7,-2,3,-9,9,4,-2,8,-7,-7,5,-5,3,10,-3,8,8,-2,1,5,-9,-7,9,-2,-2,-7,6,-3,-7,1,-7,-9,-1,5,-2,-4,-1,-3,-8,-5,5,-7,-5,8,-5,-3,9,7,-4,-2,5,9,-8,-4,-7,-9,2,-3,-6,2,-1,-6,-8,-8,5,1,7,6,10,2,-1,-2,-8,-4,6,-8,1,-7,6,1,7,-3,-2,10,1,1,-4,6,8,6,4,-10,9,3,-3,9,8,4,3,2,-7,-3,-8,5,-9,-7,-7,9,4,-1,8,-7,-2,-8,7,8,-5,-7,9,8,-4,-2,-1,7,3,-2,-10,1,2,-8,1,4,-6,-8,4,-5,-10,9,8,-9,-6,3,-10,9,-4,-2,2,1,-7,-2,-7,-9,-4,10,-6,2,-10,9,9,-3,-4,8,-10,-1,9,8,-10,5,-7,3,-4,5,-10,-5,4,-10,10,4,6,-9,-1,-5,5,-5,6,6,-3,-3,9,9,-5,-10,8,7,1,3,2,-1,7,-1,-3,3,2,-8,6,-2,10,-8,-10,-2,-10,1,2,-10,9,10,-10,10,10,3,-7,7,-9,-6,7,-7,3,-10,3,2,1,4,6,3,3,-10,-1,8,9,8,-1,4,5,9,-3,-10,6,8], dtype = "uint32")#candidate|3513|(1404,)|const|uint32
const_3514 = relay.const([[5.925645,7.770751,-2.723487,-9.338641,1.707101,0.836828,8.185187,4.480251,3.199619,3.483572,-8.761736,5.888625,-1.943079,1.851757,-2.484880,-2.510789,0.984806,-5.101432,-4.568441,-4.498780,2.783959,3.335800,9.490599,-5.247152,-1.034320,1.872561,2.106782,-2.027946,2.464075,-7.084568,6.416487,7.766308,-2.672178,-5.453273,5.210786,-1.014502,5.269306,6.261317,-7.427431,0.983496,-7.554023,0.605074,-8.382038,8.915205,-6.245402,8.802699,-6.358436,-9.095482,3.180801,-6.367127,5.998397,2.810663,-8.532859,4.359122,-2.077665,-8.676700,1.339287,-0.044290,3.363054,8.449791,2.303056,6.186306,-0.095031,4.114081,1.563310,-2.263605,-8.174730,2.462601,-5.279536,-4.764770,9.478643,5.400994,-5.705716,-5.231954,7.441848,4.900719,4.224644,6.685179,5.070606,8.823735,-5.621239,9.969181,2.968889,2.364920,-7.394692,-9.028885,-2.568555,-4.273473,5.477049,0.663686,9.088769,7.331079,8.393068,-6.138091,1.276220,6.846913,8.545795,6.083836,0.090570,-6.092001,-3.042198,-9.125405,8.708411,2.830457,4.744257,5.354618,-6.301627,3.074802,9.778914,-7.899106,9.293527,-4.150074,-0.574122,0.201546,0.438083,9.670195,-3.733038],[-7.583637,8.021522,-1.541675,-5.913257,3.691954,0.400454,3.611637,-1.833243,9.036440,2.404117,-7.910926,5.288011,-8.546414,6.284410,-0.650564,4.444711,3.828108,2.941793,0.053370,-6.795515,-9.222527,-9.041019,-4.525681,7.804707,-4.072146,-2.528294,-3.118614,9.853264,-6.570752,6.241152,-8.320964,5.087190,7.219216,-8.028180,2.318459,0.114536,-4.745313,4.001645,-2.997882,-0.561914,4.859836,3.133967,9.067779,-8.310044,8.383286,-7.602911,-3.625463,-1.248050,-8.405065,1.837655,5.017117,5.702811,-4.757741,-5.033222,9.457729,0.721930,5.516715,8.390444,3.671468,-6.310895,6.580451,3.220797,5.230623,6.432459,-9.956423,5.628663,6.017831,9.826457,3.211858,-3.854711,-6.517336,9.303540,-6.162508,-9.207059,6.147424,-1.552003,-3.825230,-4.812337,9.936975,7.933843,-0.204692,4.022927,-4.715282,7.418524,1.914294,-0.520953,-6.995349,5.184605,-4.629391,-5.238496,2.787656,-9.849883,-2.335158,4.525597,-6.255633,5.898343,6.169207,-0.479000,6.144614,1.147462,3.069499,3.671495,6.208010,-0.466365,-6.657532,6.548158,-5.497097,2.050412,2.767900,-7.673502,-9.837844,-3.493315,2.120867,5.835145,5.845806,4.280941,-3.175481],[-7.756252,1.744221,-2.544308,3.668205,1.330383,7.057797,1.421893,5.056070,8.622497,4.970997,0.894715,-4.078456,-3.251145,4.140791,1.379116,-8.916153,-9.561035,-9.327002,1.774659,-5.853394,9.409362,-2.424379,-3.669048,4.714780,7.690659,-1.635263,8.967864,7.925106,-8.953194,3.097821,-2.342194,1.929809,5.796615,1.551136,1.970682,-2.545267,-4.109928,1.557747,-6.815357,-6.965462,-6.540643,7.343205,5.908586,3.516435,6.638270,8.942295,-4.747382,-9.916086,2.018292,-6.772293,-9.781023,8.959134,8.976764,8.540526,6.877359,7.625111,-9.937394,5.801098,4.026761,9.185911,4.539944,6.966460,3.535683,-9.812754,2.101507,-3.962971,6.551604,-0.717640,-7.972448,-9.566096,2.986607,2.552491,-2.751525,-5.420948,1.068234,2.658761,-1.317056,-6.499165,-4.914003,-5.516684,-0.930773,7.526237,3.369339,-3.334576,-6.359377,0.591753,6.282029,5.354069,-5.522403,1.091342,-7.838941,-6.461130,7.187363,-5.048630,3.772757,-7.692059,2.001610,7.791734,1.162024,5.059614,2.807621,-4.248644,0.558730,-9.090308,2.274627,-5.998104,-2.483820,-1.487017,6.924033,-9.517904,-7.867962,-2.195782,-4.436873,-6.166611,-8.894930,9.683420,-8.980405],[-5.736412,-3.871790,9.877232,-3.983026,0.324948,0.467375,1.152770,-1.755981,5.978099,-0.421042,2.836701,-8.842542,-0.157185,0.671859,-3.120897,2.132184,1.908857,9.097809,6.573662,-3.095123,5.704445,8.007921,6.222102,-3.468434,-7.558288,-3.198425,8.256069,2.211866,3.889317,-4.021267,-6.964067,-0.015382,8.447734,0.696493,-3.027181,5.925356,5.968089,-4.864588,-8.760560,9.653205,9.589396,-9.457439,-0.783904,-0.227219,-1.099121,5.997001,9.614735,2.220074,-5.333236,7.792165,-1.595464,-3.097242,4.596631,-3.959356,3.576960,-0.412997,-3.662595,9.109415,-6.987632,-8.070803,-5.033605,-2.416039,-2.196643,-1.830693,-2.325156,7.415184,-0.984897,-1.770022,-8.366695,-9.547743,-9.604695,-1.570126,0.918783,-6.630441,7.283877,7.031887,-6.603460,1.004235,9.268026,7.613593,-7.433725,-1.328801,-0.851018,-2.162815,-8.669959,-5.502562,-2.501809,1.357716,0.637925,3.970056,-3.509954,-7.323018,-0.875355,8.159598,-6.882433,5.814240,9.237677,3.799497,-2.947959,-3.779169,-2.249374,-1.720575,7.155459,4.744385,6.004813,-5.445408,2.785511,-8.289489,-0.022665,8.923740,2.905384,9.958715,-2.759290,-8.701073,7.172237,8.965116,-6.669391],[-9.046521,5.653904,-2.119144,-2.845579,9.380270,9.987545,-1.377768,5.385951,-7.253195,-9.605351,-5.930619,8.781338,-6.977556,6.224594,-1.427205,3.298440,-4.013784,-4.078805,8.116650,9.385750,-0.189759,-0.291244,-6.992572,-9.919208,-0.738537,9.722730,-7.810638,-5.215983,8.386944,-2.085295,6.952336,-7.879622,1.673361,-4.999626,8.779533,1.568437,-6.381272,-7.231363,7.866412,-1.387975,-4.101400,-6.648216,-5.859328,6.103255,6.969222,0.310167,6.715345,-4.914062,1.759092,9.739155,-6.692876,-3.448326,-1.145785,8.407372,-3.113339,-9.601864,8.692476,8.620598,1.455787,6.229419,-0.719396,8.720146,-3.591708,-2.503963,-5.528002,6.537760,-4.705903,6.194646,-8.207366,0.542612,-0.348961,8.404966,-8.947641,0.997449,1.150153,-0.908730,-8.472713,4.856034,8.778268,-6.138318,8.551727,-8.575206,3.121328,3.009262,1.176300,-2.435891,-4.555960,7.564343,-8.222674,-0.455340,-9.677315,-3.428687,-1.208932,4.420573,9.635734,6.403347,9.807189,7.042700,4.049317,5.325912,5.489668,5.138754,7.005775,-9.877790,7.315945,-8.423662,-6.136823,-1.812455,-9.574739,-9.166530,1.068676,5.101285,-5.927616,-3.329083,7.781169,-1.287107,1.226900],[-8.352721,-1.752843,4.140900,6.635963,0.779313,-4.990596,-6.889961,-3.842707,-7.008214,-3.087603,-3.216385,-9.181955,-8.591442,-3.418169,-8.340838,-8.570205,0.912187,-3.942968,4.145747,-4.935374,3.080162,-2.776246,5.943556,-4.234015,0.986596,7.656804,1.141840,-5.531064,5.073210,-9.288433,-1.533431,-5.244790,-0.126624,-4.068615,-0.396797,-3.144474,9.379335,2.268859,1.619062,1.044752,-4.524296,3.148268,-2.110426,-1.409358,-2.438698,-7.779825,4.143735,-2.834812,6.477632,4.423999,5.284037,6.727024,6.330076,-3.762393,-5.729005,5.313506,-5.690856,6.897156,-6.067702,8.366691,-6.120128,3.685417,-9.244506,6.588716,9.432578,-0.539250,2.814452,4.811371,-8.146544,6.756459,4.907031,-0.585471,3.934198,9.193891,8.824106,7.344498,-1.075408,7.457717,-6.006757,-7.505968,-3.070241,5.936028,-4.613127,-7.216365,-4.296096,4.744199,-7.166244,4.999380,9.181563,8.996618,9.566577,1.784623,0.666963,9.152499,4.277249,0.656124,-2.648267,4.034370,-6.746444,3.033278,-9.268269,-3.499179,-7.404356,-7.288828,-6.136429,-6.597112,-6.846330,1.834458,9.666499,-5.117513,-9.533491,-5.390230,-4.337666,5.484764,3.392149,4.670154,-5.227389],[-0.888582,4.399648,-3.517651,-0.729245,-0.076617,-8.333349,-4.612126,-0.639978,0.825616,8.186179,4.144554,4.118459,-7.327437,0.462229,-0.070658,2.721181,4.147299,-9.156835,9.618242,-6.283937,9.320612,7.778622,-7.213019,-2.725094,1.689444,7.328519,0.036532,5.335785,9.121351,9.641225,-9.019480,-5.410534,-1.999830,-2.302831,3.003889,2.751947,6.236391,8.158045,-0.094554,1.974114,1.564400,-8.364953,-8.537447,-1.237968,-9.233403,1.358440,-5.269370,-2.211015,-8.374532,-3.627800,-7.833756,1.110575,9.078392,3.092824,-7.296489,7.000358,-7.907782,4.100820,3.054093,-1.024037,8.734641,6.192414,-6.813336,-3.445594,-8.177300,-3.896916,-4.799198,-9.688220,-1.068411,2.459043,7.936482,-6.466772,-1.111879,-3.078622,2.652985,-0.784646,-9.882216,4.348402,3.983285,-4.166504,-4.149365,-6.178346,-3.486182,-0.579048,7.874313,4.224855,-0.585536,-8.292192,3.873707,6.797028,8.865580,-8.902071,6.091588,-2.792664,3.914237,-7.495898,-7.751410,3.955245,5.723254,1.002261,5.287566,5.420214,7.487485,8.784125,-5.661290,7.215456,-7.722538,-2.049572,7.936073,-7.183715,1.599324,3.098876,-7.228450,-9.657603,-4.927569,-2.540403,-0.980107],[-5.185732,8.780154,2.071986,-1.447946,4.344049,-4.397001,-7.600160,6.537766,-2.209409,9.172255,-2.619215,-2.824720,1.913418,-2.942331,0.606744,-8.816527,-4.429845,4.833241,1.880532,3.901724,-7.210716,-2.359370,0.619880,4.524216,-6.782752,1.275952,-9.442128,7.590619,7.342463,9.086836,3.558450,-6.956007,1.011084,0.628956,1.850013,-9.229683,-1.353836,-9.633348,-0.933517,4.505099,-5.932754,9.918757,6.493939,-2.505731,-1.867041,7.818884,3.587079,-4.033994,8.492920,-7.390970,-9.491261,-4.809265,1.509251,-5.105833,-9.703156,4.682369,6.265011,-9.794607,4.679910,5.924740,-8.126691,8.723002,-4.948043,3.425562,7.756442,-3.083371,-4.547464,-7.096411,9.462808,5.443920,2.696689,-4.474333,7.063476,3.225347,2.899703,-6.308948,4.780260,-5.273392,4.855983,9.431254,6.393480,-0.284184,-4.880997,2.391750,-5.374689,4.967890,4.950097,-2.851213,-5.034688,-3.081716,-3.666353,-0.286580,-9.996607,1.381561,-5.357023,7.563182,-1.923985,3.016280,-5.428140,-0.376740,9.880477,-4.266300,7.063273,7.858453,-4.263751,9.152598,-8.778949,-6.150879,-7.605865,0.252196,-5.213043,-5.935207,-3.164919,8.490488,6.506530,7.625937,-7.161128],[2.010218,-6.483952,3.769403,-5.616413,7.218855,-9.839620,-9.776792,6.751228,2.542797,-2.334702,-3.858994,0.336542,4.500932,8.259840,1.555777,2.508252,1.180801,0.757137,-8.438907,-2.032837,0.534455,-1.275011,9.529594,9.364217,7.131767,4.426567,-2.676514,-6.836463,6.509952,7.955085,1.792032,4.947551,-7.062918,8.102941,5.236493,1.683019,1.844054,-2.372011,7.950823,1.626583,5.984446,7.180070,-3.483462,3.374478,4.605969,-7.891787,8.439133,-4.684175,5.047294,4.276483,2.143122,2.125342,-2.880444,3.631405,5.370022,-3.442140,8.218497,-0.675023,6.725759,7.610530,-0.646604,8.864348,-3.095738,-5.933547,-8.624875,-8.232181,-8.505539,-2.251248,0.813982,-3.092920,-3.166647,5.702715,-7.189398,9.771170,9.156317,2.932310,7.668689,-0.747086,-7.094736,7.569434,-3.619550,-7.883537,0.963152,4.751804,-6.828369,8.418862,-6.936571,7.724124,-7.454302,6.641954,2.677390,-9.984796,8.062195,-7.473453,1.163096,-9.081688,5.375016,-1.099937,7.796861,7.372893,0.235040,9.341425,0.761720,5.001248,4.553644,-4.156572,2.491321,9.600891,1.591626,-5.745263,0.933989,-5.173012,8.380063,9.234210,-5.600844,-3.301036,0.711350],[0.337253,-6.136318,0.401406,9.082629,0.919292,-5.178659,-1.749763,-6.764541,-9.324323,6.311138,6.265150,9.186606,-2.720116,3.739979,3.233245,-2.255971,-4.480454,4.908823,-7.038643,9.707538,0.274934,0.640779,9.375726,-6.920420,1.213980,-9.280591,-6.537932,-7.026397,7.146217,-9.870747,-5.786891,6.762430,5.679396,-9.699194,-3.470780,7.991045,7.676128,0.707081,6.243833,-9.850689,2.607252,8.499012,-8.513128,-8.171123,3.173943,3.514949,2.512354,-7.378830,9.162001,6.607137,-9.271576,-8.955407,5.726075,-0.432821,1.936058,2.939899,9.704746,4.692793,-7.444287,9.297867,-9.285936,-7.489684,-7.811641,-5.570062,9.025106,7.584370,4.537622,-2.545512,7.388396,9.909115,7.041095,1.937229,9.568732,9.266176,3.090693,4.065382,0.300791,5.614410,5.462238,7.783379,9.594663,-9.237548,-2.013854,0.704476,-5.514058,3.784091,-5.685789,-5.296749,2.687118,9.128931,0.327143,-7.908877,-3.043162,-7.074909,2.439702,3.984073,-6.093516,2.704511,-2.190875,-8.238809,0.010001,-0.678588,-4.666505,5.526948,-0.862225,-1.351275,-9.171377,-5.578582,6.111411,-0.353873,1.449463,0.775066,1.291781,-5.544869,-2.126355,-6.490680,-0.937781],[0.608126,-0.669820,-4.256262,4.544375,-9.028067,0.182386,5.167316,4.178431,-6.086425,2.831682,-8.733946,-2.378913,-6.723881,7.561925,6.654719,9.395462,-7.174286,9.411242,4.124991,-8.739007,-3.815671,-4.148405,-7.939767,6.405347,-1.548192,-8.466527,-4.522845,-9.788877,0.001887,7.124476,9.056539,0.594277,-4.535571,3.668198,-3.435006,8.547962,1.073338,-2.188099,1.938910,-8.538000,-2.864509,-3.373238,-2.279981,0.977049,-0.312959,-6.985217,6.045863,-9.391893,-2.084475,3.805477,4.067345,-2.744094,2.200447,-5.792116,-2.978667,-3.167134,1.795563,8.518456,3.712831,-3.682216,-6.955009,-5.533631,-0.794207,4.641852,-3.707969,3.727848,-4.231880,-2.769350,-0.447605,-7.984336,-6.017087,6.833181,-6.480803,7.491565,9.459314,2.474583,-5.325376,-2.087357,-5.942237,6.540382,-4.177855,-9.350302,-2.651659,-9.837086,9.210100,-2.428623,-5.199139,-5.090199,-7.881271,-2.199804,8.668887,2.062372,7.069225,-6.903595,-9.247823,-0.515572,1.467856,7.053827,-9.904381,-0.151425,-7.475878,2.955535,6.025927,5.226502,7.093392,4.190786,-1.939080,-1.288775,-1.203272,8.438028,-0.932753,-5.212726,4.477666,-3.836447,9.378486,2.749197,4.683115],[-0.047331,-2.266339,-6.083641,-5.793245,-0.913884,4.391679,-3.747865,-8.884729,-3.219962,-4.446145,-7.835701,-2.340094,8.437700,0.779190,8.384074,0.639783,6.044373,-2.933742,8.166897,-0.856090,8.559360,-1.524606,0.609385,6.646195,2.574228,-0.510612,9.125101,-4.617769,0.756694,-3.719431,-9.769483,-8.027318,6.964607,-2.405338,8.539331,4.464198,-0.291831,3.868076,-1.896294,9.933631,-3.146265,3.071238,-0.687516,-3.093190,8.915367,-6.742710,-3.200016,-7.156577,7.096459,-4.019086,4.449160,9.527197,9.900477,6.055293,-5.064764,6.896871,9.460471,-2.086490,2.695162,6.520780,8.927245,-8.321136,-0.066052,-9.194266,9.330026,9.552761,-8.082312,-9.024808,5.171301,2.737153,-5.098835,-3.199444,0.837707,6.822453,5.435571,5.859953,4.434314,-2.604830,-4.831894,2.389880,4.649446,-1.417890,-3.368890,5.111369,0.627806,3.955291,4.362095,3.640582,-4.870663,4.325357,3.426884,9.443374,2.922100,-8.688764,-9.609791,7.104970,-4.464310,6.100573,8.715315,-6.895179,4.614380,-2.356642,3.855539,7.219150,3.129904,7.998614,1.236815,5.923974,-7.004312,6.012955,3.717674,-7.775969,-0.513319,-8.610620,-2.427362,-5.044860,-0.883597],[2.581222,-4.937320,-9.422397,0.433994,-5.338725,-9.908880,6.417107,-2.372076,6.798582,-1.737106,6.384910,9.671639,-2.806594,4.371335,8.019593,4.863381,0.766002,4.928108,9.334091,-3.120011,1.786109,2.627235,5.598251,7.371480,-9.132548,3.871155,3.849661,4.266653,-2.899113,-8.457673,0.667761,-4.106848,-8.355138,-6.809794,9.782171,2.197092,7.497429,0.733937,-2.147174,7.917301,-0.966592,1.109307,6.793133,7.104716,6.952758,7.130222,-4.448951,6.691072,6.649876,-9.195154,-9.527388,0.243368,9.221979,5.683510,-2.965911,-0.260358,5.440635,-5.248261,-1.166635,-6.838838,8.660035,-1.137727,-0.251422,-9.394352,8.969748,-8.364943,8.805279,9.488460,-6.805574,-6.013280,3.014164,-8.896816,-1.638917,7.153357,-8.808962,-7.701742,0.714660,4.168820,9.169025,3.067169,5.666609,-1.119582,-4.875780,0.230954,-1.016135,2.500297,-8.635600,-6.376775,-1.447031,1.197552,-9.683387,-7.180448,0.235753,9.661919,-6.408233,5.602106,-7.104290,-9.588191,-1.313957,2.224008,8.768931,-0.314700,-0.633660,6.691302,9.006348,-8.423679,-5.137719,6.742831,-6.637898,-1.624764,-1.746752,-4.342682,-2.587163,0.286745,-6.775661,3.540509,4.140414]], dtype = "float32")#candidate|3514|(13, 117)|const|float32
const_3515 = relay.const([-4,2,-2,-10,3,7,2,-1,-7,5,7,6,-2,-6,2,4,10,10,2,-2,2,7,5,2,-2,-9,2,2,-6,-1,-10,2,3,-1,-2,10,-4,-7,-2,10,5,4,-5,-3,7,-9,9,6,-5,-6,9,2,-10,4,-9,-7,4,-4,-10,-3,-9,3,-6,-9,-5,2,1,-9,7,7,8,2,7,-4,-1,3,9,-7,6,-10,2,-5,7,6,-7,-10,6,10,8,-10,1,8,-9,9,-2,6,-2,-7,-7,5,-3,-1,-6,2,-5,2,6,-7,4,2,-6,10,-9,9,7,10,-8,8,-9,10,1,-9,-2,1,4,-4,2,-8,-10,-9,-8,6,9,10,4,-4,-1,-1,-9,1,-8,4,10,4,-9,-4,1,3,-3,10,2,-4,6,8,-10,1,-5,-1,-8,-2,6,-4,-7,9,-1,-9,2,9,-9,-7,5,10,-2,-4,3,-7,-3,8,-1,2,-5,-8,4,-8,2,5,-1,9,5,-6,-1,-7,-8,-8,3,3,-3,-6,-6,-2,-10,-10,-4,-8,4,7,-9,-4,1,-7,2,-2,-1,-1,-5,-9,-2,5,10,4,7,1,-6,-6,5,-3,5,1,6,-7,5,-5,7,-2,3,-10,7,-10,-6,-2,-2,-9,2,5,2,-8,-9,5,-3,2,-4,8,-4,4,7,-3,3,-5,2,3,-3,-2,-4,-8,-5,-4,-3,-10,-3,8,-10,-6,-1,-8,-3,6,3,-8,-6,-3,9,1,2,-10,4,2,9,7,-10,-4,7,1,-9,-7,5,9,9,-7,-9,-3,-7,9,4,-7,-2,-1,2,-10,-1,9,7,2,-5,-5,6,-9,5,-8,-5,-7,-5,-7,8,-9,2,-7,-3,5,5,-4,1,3,-1,-7,7,3,-2,-10,-6,9,6,-9,4,1,-5,2,8,4,-8,6,-4,-7,9,-7,8,-5,4,7,9,7,1,-1,-7,-10,5,10,7,6,-7,-3,2,1,-3,4,-6,-5,10,-8,1,2,6,-5,-1,8,-5,5,2,-3,-8,-6,-6,1,-9,5,-9,-3,-8,7,-1,-9,8,4,-4,5,-2,4,6,-7,6,-4,-6,-9,7,-4,-3,-5,-9,-10,-5,-2,-10,8,4,10,5,7,2,8,4,-8,-8,-7,-1,9,6,5,-10,1,-6,5,6,7,-10,7,-10,2,-9,5,9,-8,-5,-10,-3,8,3,-5,7,-7,8,4,1,7,6,2,6,-2,-2,-8,5,-8,-1,-9,4,7,10,-3,-9,4,2,1,-7,-1,-5,-6,6,1,7,-8,-6,5,8,10,8,-3,2,-8,-8,10,9,6,-1,3,-8,1,9,3,-5,5,9,-4,3,-1,-3,6,8,7,10,-7,2,6,5,-9,6,-4,3,7,-9,8,-9,4,-6,-7,1,-9,-2,-6,-6,-7,-10,-7,-6,10,-3,7,-5,-9,2,-9,10,7,5,-8,10,-3,-6,-5,5,8,-6,-9,-6,1,-6,10,-2,-9,10,-8,-5,-1,3,1,-1,-7,-4,7,-7,-7,-3,-9,3,2,5,4,-2,9,10,5,-1,-8,9,4,-6,-6,-7,3,-3,3,-6,-8,-3,4,-10,-7,-1,5,-2,5,1,8,8,-10,-8,-1,-2,-3,-7,-10,-7,-8,-4,8,2,-6,5,-3,-9,4,-5,-2,-3,4,3,8,1,-8,-9,-2,10,-7,6,-7,-2,10,5,6,8,-9,4,-1,-5,1,-7,-8,1,-1,-5,1,9,-5,-5,4,1,-4,-3,1,6,-6,2,-10,-9,-1,-3,-2,-4,-9,-9,4,-6,-4,-5,-1,-4,-4,10,3,-8,4,7,-4,-2,-3,5,1,-6,-4,-10,2,1,4,3,-1,-4,-2,8,3,10,2,-3,-9,-8,10,8,-5,9,8,-9,-4,-3,-3,6,-2,-3,-2,-7,-3,-3,-4,6,-10,1,10,-7,4,-3,-1,-4,-3,-7,-1,-7,-9,9,1,-5,4,-9,7,-7,7,7,-8,3,7,-8,4,5,6,-9,3,10,-1,10,-6,-8,-8,3,5,7,5,10,-1,-7,3,5,-1,3,-3,-1,-9,-2,-5,3,10,-1,5,8,-10,-2,10,-1,10,6,-7,4,7,5,2,3,-7,-9,-8,8,-10,3,8,5,-7,3,10,-10,-3,1,2,-7,8,3,3,-6,-2,4,-2,-7,-10,3,-8,-6,-7,-8,1,-1,-1,7,-6,6,-3,-9,9,-5,6,8,-8,-7,-3,7,-10,5,3,-5,6,-8,-2,-5,2,-10,6,2,-4,3,4,1,8,-5,-7,-1,-2,3,7,4,6,8,4,9,1,-5,-2,6,2,3,2,2,5,7,-1,-1,-9,-2,3,10,3,-6,2,7,5,-1,3,2,-9,2,-4,-1,-4,-5,-4,10,10,4,-1,-4,-10,5,10,-3,-8,1,8,4,-6,-10,2,10,5,4,5,-2,2,-8,7,-3,6,7,-7,7,-8,6,6,-3,-1,7,-4,-3,-8,-1,4,-10,-8,-6,9,-10,2,-8,3,-1,8,-2,-9,-1,6,4,3,-10,-2,-8,10,8,4,-10,9,3,1,2,-8,9,-4,-6,6,10,4,8,7,-6,4,-10,-1,-2,6,-2,-8,2,3,-9,-6,6,-6,-4,10,6,9,-9,-6,-1,-7,-1,-6,-5,1,-8,2,8,10,-2,1,-6,-1,1,8,-4,-6,7,7,1,-7,-8,-6,-6,-6,9,-4,10,-2,7,-2,4,-7,2,-7,4,3,-1,-8,-7,5,4,3,-9,4,6,8,-7,-2,-8,1,3,6,3,10,8,8,-5,7,-5,-9,-8,10,1,-4,3,3,-9,7,-2,-4,2,-2,10,-10,-10,-7,-3,6,10,-3,3,-8,-4,4,4,8,-9,-3,-10,5,10,-2,8,-9,8,-1,9,-3,4,10,-9,-4,-9,-7,-7,-2,-2,-2,-2,9,4,-1,9,5,-5,-1,-3,3,1,-2,-2,-7,-9,-5,1,-1,5,-7,7,-8,-9,9,6,-4,9,5,-10,-6,-3,-10,-8,-9,-4,-7,-10,-5,4,1,-5,-6,2,-6,6,-1,-4,1,-3,-4,9,-8,-4,10,-9,1,9,-10,1,-3,-9,-3,-7,-6,-7,7,-10,8,2,-6,-10,-6,-4,-8,-2,9,-7,-4,-1,5,1,-5,-9,-6,1,-1,-7,-10,3,6,-10,9,-1,2,-5,9,10,-6,-7,9,2,-10,1,4,1,1,6,1,-5,7,-1,-6,10,-10,-2,-8,-3,7,-10,7,-10,-3,10,-4,-6,-5,-9,7,-2,-10,-8,-3,7,-4,-1,-10,-3,1,-6,8,-8,-10,3,10,-6,2,-9,6,4,-6,-5,10,-9,1,6,1,2,2,-9,-3,-5,1,-9,-3,-9,10,3,-1,-10,10,-2,9,2,-3,6,-8,-2,-6,-7,6,7,-1,-7,-5,-5,-1,5,2,3,-10,3,9,-8,8,3,-3,-1,1,7,7,2,-8,9,-6,-5,-9,-6,-4,5,-2,-8,-9,7,9,7,-5,-3,5,3,4,8,4,4,-8,2,7,5,8,-7,8,-10,-10,6,-5,-7,-6,-2,10,-10,7,10,-1,10,-9,-4,-1,-1,-9,8,-7,5,-1,6,7,2,10,-5,-9,10,-2,-6,-1,3,8,-6,-6,2,1,1,-6,9,-4,-6,-1,-10,1,5,-7,-3,-2,1,1,-7,1,-10,8,-4,-4,-3,9,10,-3,3,5,-6,5,7,1,10,-10,3,-10,10,9,10,9,9,7,2,8,-1,5,2,-9,-2,-3,-7,-1,-8,10,-2,2,-3,-3,-2,-2,5,2,5,-10,-10,-1,-7,-4,7,-6,5,8,6,-2,4,3,1,-9,-7,-1,-3,6,7,6,5,2,-10,9,-4,4,3,7,3,8,4,-6,4,-8,3,-6,6,10,8,1,10,-10,-5,7,-5,-5,-8,8,5,4,8,6,-8,1,6,8,1,9,4,-3,4,-8,9,4,-1,-1,2,4,-4,6,9,7,1,-4,-3,6,5,8,9,9,4,-9,-7,-6,10,-2,7,8,3,-7,-9,4,6,-1,7,6,-9,-8,10,7,8,-10,9,7,10,-10,6,4,-7,-8,4,-6,1,-1,-9,-2,10,-6,-9,-10,-6,7,-6,5,-5,-8,6,-4,-7,9,-3,-5,-4,1,1,-10,4,10,-10,3,-7,-6,2,-2,-3,5,4,1,10,-1,3,-9,-1,-7,3,8,-1,-4,2,-2,-9,-5,8,10,5,-8,-7,7,7,10,-4,-1,-1,-7,-3,10,-7,-4,10,-4,7,3,-10,-3,4,8,-10,-4,6,-5,-10,10,1,-6,-7,-6,-2,-10,1,9,5,-5,6,5,9,-2,7,10,-3,-9,-5,-7,-3,-9,-10,-10,-6,9,2,-6,6,-2,10,-10,-8,-5,3,-10,-9,-1,-9,-4,-7,9,-1,-2,2,1,-8,5,2,-7,-4,-1,7,-1,-6,1,10,-3,-4,-7,9,-8,-8,2,-5,-5,7,-9,10,1,5,-9,2,5,7,10,-9,-4,3,9,5,4,-1,-6,-7,7,9,-8,-8,-4,-2,-10,3,9,7,4,1,-4,5,3,5,3,-8,2,1,-10,2,-5,5,3,-2,-6,6,-5,-7,2,-10,7,-5,7,-7,-10,-8,-4,-9,-5,-3,-5,-10,-10,9,-1,7,1,9,8,5,-4,3,8,-4,-6,-3,-8,9,1,9,1,2,-10,9,6,5,9,-6,1,-9,7,-6,-6,-4,-7,9,-1,-9,9,-6,-6,-2,9,3,10,-7,-5,-3,-1,7,9,5,6,-10,4,9,9,6,-1,-7,2,-9,8,7,10,7,-10,9,6,1,7,1,-3,-3,-7,-7,-6,-5,10,-6,-6,10,-5,1,10,3,-4,-3,-5,-1,-9,-3,-7,-1,-10,9,-10,-3,-10,6,8,7,-8,-9,9,7,-8,-10,9,-4,-8,7,2,3,-8,-9,-10,10,-9,3,9,-5,-10,-4,8,-10,-10,4,-10,-3,-6,5,-1,6,-6,-7,10,-3,-8,-9,-4,-3,-5,8,2,4,-4,-5,-5,-4,-1,5,-4,10,-5,8,-8,-6,6,10,3,-7,4,1,-5,2,5,-5,-6,-3,-8,2,2,10,-2,-9,6,-2,-7,4,8,-6,-3,-4,-10,2,9,-3,-2,10,-5,8,4,6,3,-1,-3,-3,-10,7,-3,-7,5,-3,4,8,4,-3,-6,-8,-8,-7,8,9,-7,9,7,4,7,-8,5,-10,-2,5,-3,-6,-6,2,-2,-3,9,-3,-9,10,-6,-4,-4,8,-9,-3,-10,1,-1,9,8,-6,-5,5,6,9,-4,1,-9,-4,-5,-1,6,-10,-7,-4,-2,-1,-7,-10,-4,3,4,-5,-6,-3,8,6,8,-2,-7,-9,7,6,10,7,5,-1,-7,-5,-7,-3,-4,8,-7,6,-9,2,9,-1,4,-1,9,9,10,8,4,-10,-10,-8,-1,2,-1,7,2,7,6,-4,-1,1,-7,-9,-10,-7,9,9,10,-3,6,1,8,4,7,6,-1,1,6,8,1,6,3,-2,-7,-5,5,-2,3,4,6,-8,-9,-4,1,8,-9,3,-10,-6,10,-3,-9,-7,-3,-2,2,-3,-1,5,10,3,8,3,3,-6,-3,9,3,4,-8,4,-6,-3,5,10,-9,-5,1,6,7,6,-2,4,2,3,4,-9,6,9,10,-7,4,-8,9,-8,8,10,10,7,-2,9,-10,6,4,5,9,-3,-3,-8,4,1,-2,4,-5,-4,-1,-10,-5,5,6,-1,4,-7,-4,-1,3,-2,5,8,7,6,9,9,6,3,-7,-6,10,-10,-8,-5,-5,7,5,9,-9,1,4,-2,-7,-2,-9,5,-10,6,-6,-9,9,10,-3,-9,-5,-2,2,9,9,4,-8,9,-4,5,5,-2,10,-10,2,-7,2,5,-3,3,-4,2,-6,9,4,-3,-10,5,6,4,7,-2,-1,2,1,-8,4,8,-10,1,3,-5,8,2,5,9,-9,10,-10,-6,10,10,3,-4,-5,9,9,-10,1,-1,9,-6,-3,-10,1,-7,-9,2,3,7,3,7,-9,8,-2,-6,-1,1,1,8,-7,-2,10,-10,-4,-4,-6,-8,9,-7,-5,3,-7,9,-6,-1,-9,-1,1,-3,-2,-9,-7,3,2,-10,1,4,-10,8,-1,-10,4,-1,-5,-7,1,-3,-4,8,-4,-5,-2,5,-6,-7,-1,-7,-10,-7,3,10,-3,-4,-9,3,1,-10,-10,4,-7,-1,9,3,-6,-2,6,3,-9,6,-9,3,8,-2,8,4,-6,4,-3,-3,-7,8,-1,3,-7,-7,-10,8,-4,8,-6,-7,-7,6,-6,-1,-5,8,-1,7,-2,8,-5,-9,7,-10,10,-3,-10,1,9,-9,-2,-2,8,2,-4,-1,7,7,-9,-4,8,-8,-8,4,-2,2,10,8,5,-9,2,-7,1,-2,-5,-1,-6,9,9,-1,-8,4,9,7,4,1,7,-5,-4,-1,5,-1,-1,5,8,1,-9,2,-9,-1,7,8,-2,2,-10,-6,-5,8,-1,-7,8,-3,-3,6,5,6,1,-6,7,-10,1,3,-5,1,5,3,6,-2,-2,-2,8], dtype = "int8")#candidate|3515|(2496,)|const|int8
call_3512 = relay.TupleGetItem(func_1277_call(relay.reshape(const_3513.astype('uint32'), [12, 9, 13]), relay.reshape(const_3514.astype('float32'), [1, 1521]), relay.reshape(const_3515.astype('int8'), [2496,]), ), 2)
call_3516 = relay.TupleGetItem(func_1282_call(relay.reshape(const_3513.astype('uint32'), [12, 9, 13]), relay.reshape(const_3514.astype('float32'), [1, 1521]), relay.reshape(const_3515.astype('int8'), [2496,]), ), 2)
func_3116_call = mod.get_global_var('func_3116')
func_3117_call = mutated_mod.get_global_var('func_3117')
call_3532 = relay.TupleGetItem(func_3116_call(), 0)
call_3533 = relay.TupleGetItem(func_3117_call(), 0)
output = relay.Tuple([call_3489,call_3512,const_3513,const_3514,const_3515,call_3532,])
output2 = relay.Tuple([call_3490,call_3516,const_3513,const_3514,const_3515,call_3533,])
func_3558 = relay.Function([], output)
mod['func_3558'] = func_3558
mod = relay.transform.InferType()(mod)
output = func_3558()
func_3559 = relay.Function([], output)
mutated_mod['func_3559'] = func_3559
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2331_call = mod.get_global_var('func_2331')
func_2332_call = mutated_mod.get_global_var('func_2332')
call_3570 = relay.TupleGetItem(func_2331_call(), 0)
call_3571 = relay.TupleGetItem(func_2332_call(), 0)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_3579 = func_2717_call()
call_3580 = func_2717_call()
output = relay.Tuple([call_3570,call_3579,])
output2 = relay.Tuple([call_3571,call_3580,])
func_3582 = relay.Function([], output)
mod['func_3582'] = func_3582
mod = relay.transform.InferType()(mod)
output = func_3582()
func_3583 = relay.Function([], output)
mutated_mod['func_3583'] = func_3583
mutated_mod = relay.transform.InferType()(mutated_mod)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_3622 = relay.TupleGetItem(func_499_call(), 0)
call_3623 = relay.TupleGetItem(func_500_call(), 0)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_3629 = func_2717_call()
call_3630 = func_2717_call()
func_742_call = mod.get_global_var('func_742')
func_744_call = mutated_mod.get_global_var('func_744')
call_3633 = func_742_call()
call_3634 = func_742_call()
output = relay.Tuple([call_3622,call_3629,call_3633,])
output2 = relay.Tuple([call_3623,call_3630,call_3634,])
func_3635 = relay.Function([], output)
mod['func_3635'] = func_3635
mod = relay.transform.InferType()(mod)
output = func_3635()
func_3636 = relay.Function([], output)
mutated_mod['func_3636'] = func_3636
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3635_call = mod.get_global_var('func_3635')
func_3636_call = mutated_mod.get_global_var('func_3636')
call_3659 = relay.TupleGetItem(func_3635_call(), 1)
call_3660 = relay.TupleGetItem(func_3636_call(), 1)
func_1036_call = mod.get_global_var('func_1036')
func_1039_call = mutated_mod.get_global_var('func_1039')
var_3693 = relay.var("var_3693", dtype = "float32", shape = (1521,))#candidate|3693|(1521,)|var|float32
call_3692 = relay.TupleGetItem(func_1036_call(relay.reshape(var_3693.astype('float32'), [1521,])), 2)
call_3694 = relay.TupleGetItem(func_1039_call(relay.reshape(var_3693.astype('float32'), [1521,])), 2)
func_1781_call = mod.get_global_var('func_1781')
func_1783_call = mutated_mod.get_global_var('func_1783')
var_3714 = relay.var("var_3714", dtype = "uint32", shape = (1404,))#candidate|3714|(1404,)|var|uint32
call_3713 = relay.TupleGetItem(func_1781_call(relay.reshape(var_3714.astype('uint32'), [1404,])), 0)
call_3715 = relay.TupleGetItem(func_1783_call(relay.reshape(var_3714.astype('uint32'), [1404,])), 0)
uop_3732 = relay.tan(call_3692.astype('float32')) # shape=(11, 9, 13)
uop_3734 = relay.tan(call_3694.astype('float32')) # shape=(11, 9, 13)
func_486_call = mod.get_global_var('func_486')
func_488_call = mutated_mod.get_global_var('func_488')
call_3735 = relay.TupleGetItem(func_486_call(relay.reshape(var_3693.astype('float32'), [1521,])), 3)
call_3736 = relay.TupleGetItem(func_488_call(relay.reshape(var_3693.astype('float32'), [1521,])), 3)
func_2505_call = mod.get_global_var('func_2505')
func_2506_call = mutated_mod.get_global_var('func_2506')
call_3756 = relay.TupleGetItem(func_2505_call(), 0)
call_3757 = relay.TupleGetItem(func_2506_call(), 0)
output = relay.Tuple([call_3659,var_3693,call_3713,var_3714,uop_3732,call_3735,call_3756,])
output2 = relay.Tuple([call_3660,var_3693,call_3715,var_3714,uop_3734,call_3736,call_3757,])
func_3759 = relay.Function([var_3693,var_3714,], output)
mod['func_3759'] = func_3759
mod = relay.transform.InferType()(mod)
var_3760 = relay.var("var_3760", dtype = "float32", shape = (1521,))#candidate|3760|(1521,)|var|float32
var_3761 = relay.var("var_3761", dtype = "uint32", shape = (1404,))#candidate|3761|(1404,)|var|uint32
output = func_3759(var_3760,var_3761,)
func_3762 = relay.Function([var_3760,var_3761,], output)
mutated_mod['func_3762'] = func_3762
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1337_call = mod.get_global_var('func_1337')
func_1339_call = mutated_mod.get_global_var('func_1339')
call_3776 = relay.TupleGetItem(func_1337_call(), 2)
call_3777 = relay.TupleGetItem(func_1339_call(), 2)
func_1661_call = mod.get_global_var('func_1661')
func_1664_call = mutated_mod.get_global_var('func_1664')
var_3779 = relay.var("var_3779", dtype = "float64", shape = (2496,))#candidate|3779|(2496,)|var|float64
call_3778 = relay.TupleGetItem(func_1661_call(relay.reshape(var_3779.astype('float64'), [2496,])), 2)
call_3780 = relay.TupleGetItem(func_1664_call(relay.reshape(var_3779.astype('float64'), [2496,])), 2)
func_3635_call = mod.get_global_var('func_3635')
func_3636_call = mutated_mod.get_global_var('func_3636')
call_3789 = relay.TupleGetItem(func_3635_call(), 1)
call_3790 = relay.TupleGetItem(func_3636_call(), 1)
func_710_call = mod.get_global_var('func_710')
func_711_call = mutated_mod.get_global_var('func_711')
call_3796 = func_710_call()
call_3797 = func_710_call()
output = relay.Tuple([call_3776,call_3778,var_3779,call_3789,call_3796,])
output2 = relay.Tuple([call_3777,call_3780,var_3779,call_3790,call_3797,])
func_3804 = relay.Function([var_3779,], output)
mod['func_3804'] = func_3804
mod = relay.transform.InferType()(mod)
var_3805 = relay.var("var_3805", dtype = "float64", shape = (2496,))#candidate|3805|(2496,)|var|float64
output = func_3804(var_3805)
func_3806 = relay.Function([var_3805], output)
mutated_mod['func_3806'] = func_3806
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3831 = relay.var("var_3831", dtype = "float32", shape = (12, 15, 7))#candidate|3831|(12, 15, 7)|var|float32
uop_3832 = relay.rsqrt(var_3831.astype('float32')) # shape=(12, 15, 7)
func_1952_call = mod.get_global_var('func_1952')
func_1954_call = mutated_mod.get_global_var('func_1954')
const_3838 = relay.const([-1.545415,-2.741959,-2.047344,4.795518,8.705470,8.106073,4.480972,5.701354,3.902154,6.642658,-4.715283,9.030573,-1.501855,9.242577,8.643508,5.251470,1.960076,2.961860,8.236489,4.077462,-7.254800,-2.547378,-6.097268,-4.798247,-8.262912,9.373116,-5.996106,-1.267822,-9.814173,-3.522803,6.266715,7.079647,2.962896,9.364402,-2.907743,4.959419,3.054813,-2.390654,0.864065,6.968846,7.838936,-7.599925,-8.999295,-9.901307,-3.950968,-3.850481,-0.975563,-6.481564,0.556207,8.205944,-6.951252,-5.455867,-0.045077,8.812640,3.997206,-3.163345,-3.178906,-5.775750,0.888789,7.766372,2.329424,-4.562248,-1.859405,0.250253,-5.075953,0.138946,3.079423,-8.233879,-9.354346,8.265300,9.118406,-7.587578,-6.884500,-4.611749,1.319855,-1.147340,7.831923,2.382268,7.383428,5.927827,3.087558,4.143066,-8.894515,-2.135000,3.166705,5.001529,5.582951,-9.010728,-6.817090,-0.694952,9.879679,3.604262,1.015039,-8.380624,6.971507,-8.308983,-9.952220,-8.491438,5.351751,6.803733,-0.812539,9.591530,1.450703,-0.028990,-5.380127,3.736318,1.949990,0.999274,1.738650,9.847721,8.521088,3.844348,1.915595,6.074551,0.777724,-8.753676,1.320698,0.450699,9.062854,-5.716870,-8.542645,8.007941,-1.245330,-6.263711,-4.134342,0.706846,9.222099,8.193648,-6.125673,-2.787936,-7.159138,3.760218,-2.856150,-5.464978,-8.925697,-8.356912,-2.187664,-4.264727,-2.740654,0.030784,5.615056,-9.058586,8.593274,3.474450,-2.048344,1.029962,-1.112667,-1.656810,-0.656055,7.107894,-1.261750,9.521946,7.357450,6.149686,6.725779,0.134552,8.878144,2.314368,8.678069,-2.522511,-7.653857,-7.974823,6.561912,-4.935500,6.180218,-2.723427,6.883292,6.737068,-5.660027,-2.894608,3.602193,-7.666674,1.942850,2.467187,-9.869045,0.596349,-2.563799,-2.870458,-3.754479,5.975102,-3.127671,5.004642,4.219374,-2.255936,-2.107839,6.238478,-4.070496,-1.583316,-0.582135,1.459759,-3.571950,1.173821,-1.908259,-2.761823,-8.804668,6.121466,2.267300,-6.263745,0.409742,-4.765371,9.615336,8.313034,6.609164,-7.054369,4.019243,0.052852,-2.935238,-1.394548,-3.668638,1.836026,-6.175070,2.392052,-7.449937,7.596627,-0.251339,6.915918,8.630805,-1.087022,-2.671200,-4.403282,-1.517333,2.867253,8.886105,4.184684,-5.231077,-1.088736,9.931887,7.937807,-2.345521,8.049968,-2.723488,-1.307348,9.771027,4.771283,6.268658,-5.683105,9.892497,-4.153845,5.830738,-1.597648,4.202255,9.586051,-0.447440,-6.043794,9.721472,1.813987,-2.774826,8.572404,-9.607741,3.551962,5.590567,6.077150,-5.816052,4.521425,-4.763580,4.508394,-9.384507,-0.357990,9.467944,1.075167,5.414844,3.120637,9.158334,5.816536,8.219701,1.345374,-8.731246,9.108180,1.251709,3.920877,-9.836875,4.718395,3.411235,4.896048,-8.330523,0.967337,7.421717,2.736481,7.631921,4.746538,0.006387,9.313084,8.593116,-9.408697,2.913292,-2.022355,8.283709,6.018704,-4.707972,3.148964,6.762703,-2.671566,6.149135,5.223727,-3.576688,4.694965,-3.242774,-1.661644,5.376613,-1.241494,-7.387763,-0.926720,-9.617636,-3.624977,-6.070244,3.499100,-5.532775,1.637742,8.070979,-7.285632,9.280844,8.673283,3.952241,0.960997,5.640626,3.018452,0.932175,6.965659,4.968843,-3.652940,0.800145,-1.616356,7.600027,-1.258174,-2.737444,-4.516522,-0.478216,2.579585,7.825775,9.132850,-3.238826,-0.395545,-7.763333,8.099007,9.699894,-2.044066,6.083730,-4.339442,-8.421200,1.733142,-5.882044,-2.745929,-2.821771,-7.413037,-8.623501,-3.986811,-6.374788,-1.308871,-3.452128,8.005837,6.202116,-3.460135,-8.539476,7.181606,6.142054,1.914076,2.448305,9.044405,-0.103063,7.470773,1.394592,6.741129,8.548100,-3.039016,-7.447486,6.628669,6.115686,-0.277607,7.455438,-2.550335,2.333818,-0.168864,8.514844,-8.628306,6.684857,0.227506,5.306650,-5.139878,-9.615504,-9.562649,-3.257361,8.829635,3.529378,9.726403,0.395629,-5.521660,-1.092800,8.735836,-4.623971,0.148053,-8.428974,-7.180719,6.951436,-1.042670,6.078367,-8.328474,-9.232397,-3.302432,-2.369992,-2.260924,4.380565,-5.021724,4.704796,-6.879907,2.158430,3.899724,-1.437565,0.552583,4.978243,8.481602,-8.741611,-6.811001,0.535263,-4.642311,4.139613,-7.383406,4.776303,-1.391523,-0.912744,-6.716415,-3.094363,2.042320,8.654427,-7.006747,-9.957820,-6.823722,-4.324277,-9.685025,7.432814,5.042343,2.297597,8.987433,-2.204516,-1.486999,-9.865089,-5.169682,-3.315221,7.498118,-8.930891,-2.986241,-4.283369,7.780896,-2.636240,-4.741542,-8.347322,-4.378067,2.307279,1.834162,2.458003,9.665044,-0.847449,-9.991704,0.404346,4.802488,6.395963,4.856420,-1.472770,-1.053437,-7.214755,-2.864105,-3.702407,-6.950439,-4.312523,1.879633,9.170817,-6.670533,-8.613591,6.667228,-2.263584,7.964434,-3.243079,9.269310,4.247254,3.494108,2.034757,1.632950,-4.255067,5.833611,9.875733,-8.134701,6.321369,-7.043245,6.777364,-5.852775,-1.314812,-0.544178,-6.050667,3.863304,3.687689,3.141121,-4.316535,7.467571,-4.364257,-4.792262,9.523435,6.855539,9.392155,4.843016,2.756000,-4.917120,0.608021,-2.546922,0.029814,-6.671118,8.257638,1.196206,-1.328045,-2.466924,8.288592,-3.527632,-6.581965,-5.853466,5.433812,-9.717882,5.766909,8.756863,6.726029,-1.322319,6.708081,-2.858650,-9.986831,6.775409,-6.799946,0.541237,-6.393816,-5.653264,1.131274,-8.380599,-9.540199,4.209064,5.942630,6.870656,8.673261,9.719056,-2.548909,8.659279,6.613838,2.517849,-3.447470,-3.140522,-3.545659,5.202568,6.144056,-7.978135,5.742315,2.333076,-8.135639,2.463708,-9.550775,3.938436,-7.000214,2.312392,6.164668,1.034574,1.045344,-4.870146,2.592518,-5.646608,5.510415,-5.163277,-2.655400,5.241044,-5.938586,-7.782117,-9.426905,3.079338,-0.780587,-1.752832,6.266880,-2.548473,1.454368,-8.917797,-7.635092,0.247153,-3.662715,-9.592236,6.462569,1.049280,1.302658,-3.043541,2.903337,-2.306122,-6.019841,5.509000,2.283648,6.823175,-9.785285,4.880857,-9.175286,-4.198404,-3.442065,5.710382,3.395128,-3.043454,9.650604,-6.474604,-1.548496,-7.086433,0.642882,0.457678,2.141663,-0.753160,-0.853167,2.049266,-2.064621,9.625545,-2.145573,1.101869,-9.628618,-2.702436,-4.897995,-8.746279,-3.504883,-1.366483,8.974705,-9.292225,-2.154458,-0.553071,-0.862582,0.260475,-4.540835,1.640268,8.415943,-1.730650,-4.995667,6.576041,6.350646,-9.520831,0.329849,7.862716,-4.698892,6.732951,-4.053500,6.366636,9.508384,-1.236639,-6.413084,5.179986,-3.321852,3.595294,-5.320158,4.473382,-2.338645,3.499551,-3.408793,-6.247966,-6.171269,4.708663,-2.037265,7.986045,7.197269,6.330994,-8.651561,-2.862418,-8.637151,2.029559,-1.327771,-6.461752,-0.171946,-0.103114,-4.459783,1.273064,9.736009,-8.688119,-1.919174,5.124824,3.274353,5.294720,3.794637,-9.931219,4.238869,0.378570,-4.478917,-2.649299,6.006425,-6.763310,-3.181025,5.346995,-9.746055,5.986181,1.759629,7.175064,1.602693,-5.606690,-5.677401,-7.583808,2.124885,6.572426,9.881681,-8.546333,5.481701,-2.779786,9.031910,9.500852,3.890039,-3.266392,9.382330,4.080773,-5.821011,-5.412700,-2.986755,-2.781301,-6.304727,-1.732505,3.799949,-7.273640,4.951283,-2.029509,-2.091153,-4.761708,-7.484822,2.717255,-8.600684,-4.122413,-5.440013,8.421014,9.272897,-4.548737,-6.755854,9.821193,-6.172030,-2.615616,0.126782,-2.286483,-0.476567,4.130372,8.880790,-6.609209,-9.665277,-4.408019,3.760597,4.814308,5.689741,-9.736569,-6.402594,6.271723,-2.178993,-7.948839,0.405954,4.464345,-5.160284,-4.948497,9.951136,0.975898,-3.331723,7.613966,-3.226819,-6.949060,-4.055496,6.205404,3.294710,4.925448,-2.223994,5.977324,-9.971819,3.155013,9.910883,-9.565762,-5.241025,-0.555396,2.282698,0.789398,0.480721,0.286171,-3.276334,-0.057974,-0.069925,0.634587,-0.859567,-4.362003,-7.439185,9.207621,8.713452,-8.796919,5.065339,-9.070656,-1.152154,-3.668385,-0.992584,-9.664143,-0.450122,-6.510288,-2.863608,9.682781,-3.495840,-6.900561,0.936268,-7.881056,0.625569,5.716634,-3.182816,-3.112804,9.473938,-5.735035,-8.181349,-5.127691,2.233409,6.970654,2.782901,-5.717573,-2.712909,-1.965579,-1.461798,2.548048,2.005229,3.023734,-3.353901,2.503682,-8.810175,4.578587,-6.046834,-5.941646,-8.101561,6.477128,-5.987605,4.890482,-3.637227,8.310048,6.607300,3.061537,4.306545,-4.141438,-9.061751,6.749867,3.248662,7.763337,-8.585263,5.517377,-1.407015,-6.705541,4.368386,1.350196,9.998736,-6.111502,1.493563,-7.810571,-4.635799,0.135761,-7.799370,-2.135816,6.090269,4.237896,7.168780,9.311299,9.477370,-7.307278,0.503497,2.553357,-2.009552,1.106771,0.602844,-8.429357,-7.852030,-4.120003,-4.571215,-2.733990,-8.893359,-4.145372,1.782973,3.210427,7.354195,0.282255,-4.205845,-6.874749,-8.812682,-0.404519,8.418644,-4.527089,-7.896702,-1.816798,4.248050,0.295053,-6.695614,7.493472,8.543727,-1.652459,-7.090656,5.479611,-2.109985,-8.913255,-7.707715,-5.588592,2.978245,3.019214,9.742551,5.477012,8.058738,8.945730,-4.226482,8.561392,3.457602,-7.826011,6.383337,-9.744522,2.874265,-2.009461,-2.699811,3.888346,2.124689,5.822078,-4.939604,9.894826,6.940379,2.492851,3.411778,4.306521,9.473476,3.780302,-0.979427,-5.485769,-6.647749,9.816095,-8.301981,-9.438548,3.340385,-2.946506,-4.780216,8.736081,-1.541618,6.466031,7.775321,3.556891,5.391598,4.798446,-4.711343,9.223947,3.802310,8.713531,-6.970107,7.566709,-4.818724,4.146887,-0.863298,-0.521004,-1.186360,-4.117473,4.772790,-7.462088,-6.426492,-5.276888,4.519965,8.756618,-9.240094,-7.149804,7.426224,-9.136854,-2.493966,-9.607859,7.088369,1.863690,9.347835,7.101555,8.708616,4.089199,-1.697871,6.880375,4.172926,-9.995012,6.356957,-8.221880,-6.893011,-7.174609,5.334589,4.451042,-7.429869,-3.358731,8.591459,-7.808511,8.637353,-3.427905,1.591333,9.841519,0.516340,-8.917359,1.939373,4.527596,4.489946,-3.104691,-3.818810,7.624176,-4.313583,-1.530224,-3.017650,5.426820,-7.372398,4.847957,2.208084,6.880352,-0.217439,2.483721,-4.472918,7.866358,1.120441,-7.512763,-0.661398,-8.079420,7.971098,-3.495370,1.070197,3.785102,3.635096,9.451703,-0.289768,6.921108,-3.979551,-3.661351,2.867290,-6.636785,3.355008,2.721209,8.246291,-1.443500,-2.385122,-2.079242,-7.776300,-1.725859,-1.209192,-8.750851,-4.874041,8.221317,2.712341,2.388607,1.887307,5.518345,6.039040,-2.454109,-9.499194,9.557518,8.574660,-8.114916,-6.601821,-9.109823,-7.967484,8.106167,-8.889341,8.236986,-4.491982,9.761148,-5.587407,-2.432028,7.044974,-2.785204,4.395276,-7.743973,1.992467,6.041075,2.989133,-3.462980,-2.914248,-1.789542,-4.869828,-1.998547,8.197249,0.481478,-3.446506,7.728464,-2.323592,3.080128,6.393390,7.273038,-0.443437,-6.084448,-0.143355,2.700999,-6.716784,8.161676,1.747262,3.590251,0.554499,1.265524,-8.916402,5.751128,-6.289227,0.524911,5.200434,8.491721,8.256425,0.116254,-2.558201,-7.956561,7.243896,-5.958699,-3.031895,0.762504,-7.573346,4.763461,4.104425,1.524116,-5.422867,5.605717,8.013878,2.735174,4.534511,-4.909145,-5.684939,-5.768717,6.685877,-3.444266,3.216260,6.101710,-8.005907,-5.765780,-3.198246,-9.607875,-0.703175,-1.724012,-9.920558,-0.203984,-2.519915,3.305954,-1.972117,-0.482117,-7.662249,3.286590,-9.455990,0.031222,2.207868,-9.416150,-7.082300,-0.823876,1.869803,-0.586732,7.669667,7.038747,-2.757345,-0.387620,-7.258744,-9.450181,0.669508,-7.729216,-0.394307,5.208488,-0.969682,2.003772,-4.101082,3.763070,-0.659157,3.636718,1.872845,-9.998045,4.465987,-1.720961,9.125581,1.281640,-8.235038,9.958650,5.533574,-6.129100,-3.050635,-1.785524,-4.119758,-1.935712,-6.162340,-5.469295,-2.203903,2.725095,6.529305,-1.695063,-4.857580,8.342937,0.860899,1.445972,0.386700,-3.709509,-1.944529,-4.213273,8.164357,5.113921,-6.114686,2.367097,-3.626060,9.653134,-9.530317,2.664075,6.579901,5.144368,5.416701,5.953784,-5.698510,-9.607411,6.476016,4.474370,-4.603333,-8.091984,-1.757444,6.099390,-0.553058,-7.178961,-6.028304,4.532088,0.511278,6.863724,1.012870,1.131674,-6.926919,-5.731852,8.269647,-4.643311,1.894643,-7.958129,-5.285773,-0.849939,-0.449529,1.013081,-4.383497,-5.087535,3.791407,-6.590522,7.065902,2.514542,-8.793709,3.086844,3.139860,2.134527,-1.909948,3.253861,1.837760,6.300039,-4.831393,2.982733,8.163449,-3.418896,1.549956,2.694791,8.032484,-0.084502,4.611203,8.355950,-1.798903,9.563433,-7.722300,1.848558,-3.293077,-3.691602,-1.987509,-1.227812,8.251906,-4.418496,4.839440,3.890338,-0.584561,-5.183268,1.417410,3.363587,-5.848424,-6.199617,3.165626,9.738768,-5.905864,-4.083895,3.334834,-8.861410,-4.045996,4.847793,0.206779,-9.672662,-1.678714,3.849392,-9.123964,8.517943,4.197560,9.175349,-0.415654,-3.118232,-4.568922,3.050771,0.542703,5.169220,-2.739371,-9.627283,6.708795,-9.813248,8.252204,-1.561064,-9.161718,0.737055,8.838016,-2.946295,6.712210,2.882916,0.722276,8.561928,-1.247833,-8.612062,5.099802,-8.329614,3.696281,-5.894936,-8.487902,-2.637137,7.168511,-4.335651,4.572577,-2.005525,-8.597948,-1.080361,-0.952177,-0.851827,-3.187436,5.401367,1.347611,3.445858,-7.788802,-1.199891,-9.672374,2.248245,-0.537102,-8.043209,-2.124656,-4.640109,-6.965615,0.663124,-4.624868,-2.655274,-2.109548,-6.929496,1.200727,9.127773,1.292959,3.101332,-0.688733,0.779461,-3.083789,-2.645116,-8.072882,2.874962,-8.281739,8.987447,7.354596,0.905449,-2.143909,2.789431,0.759126,1.297540,-7.584836,-5.979917,-0.485003,3.570362,-6.065859,1.554562,-8.800914,5.689414,2.229470,5.500544,-3.286101,7.243340,-9.426717,4.261482,6.051221,5.844082,6.920590,-7.475329,1.320868,-9.317492,-2.586725,8.718943,1.188430,7.329192,5.674868,5.784533,4.762851,-2.197339,8.391746,-3.544835,7.075234,4.470692,7.020720,-6.550245,9.978320,-5.541516,-2.379041,8.842377,4.779106,4.360896,4.710471,-6.747514,8.421616,3.648034,-5.396290,2.850766,6.904915,-7.938938,-9.266492,6.752774,-6.317150,9.982216,7.691508,-6.430684,0.684355,-5.203183,-3.370979,-3.096618,2.090367,-6.750646,1.474617,7.636976,-5.858598,1.910170,-5.594361,0.477909,2.821588,-1.320838,5.720834,1.173218,-8.951598,4.242954,-3.766239,-8.384593,5.854223,-5.049906,-0.132323,1.278924,7.426179,6.422767,-2.472609,-9.400401,-8.583905,-6.409213,9.067888,-6.516441,2.372732,-9.027277,7.848986,-5.330220,-2.991322,2.887944,-0.366790,3.644732,-2.209548,-3.104548,8.423008,-7.040172,5.131393,2.772523,-0.181447,-1.439420,-1.016363,5.706797,4.820363,-9.199484,-4.750334,-7.266464,3.996235,5.175332,-2.069106,-8.709704,-9.007617,7.218407,5.512788,9.606382,4.402204,-6.397432,-5.976112,0.307458,5.972650,4.321655,-1.239892,-3.026737,-4.205499,9.280974,3.875639,-4.541071,-2.139266,3.698224,1.227987,9.457569,-1.780215,-8.174955,1.649322,-1.066444,2.550441,5.468449,0.377792,9.402237,9.846078,9.401557,-4.871214,-8.384883,8.385840,3.143284,-8.464307,2.504101,-7.532443,-1.491773,-5.370842,-9.958757,-9.593279,2.716602,1.956841,7.999600,1.737237,-9.859561,4.623411,-2.556409,-2.835523,3.474145,-5.371743,-1.424515,-1.263770,-7.066677,3.005329,-6.198591,-2.656195,-8.989475,4.264532,-7.683625,-0.928493,-7.284415,-6.388248,-8.666576,-4.776682,8.747616,7.561243,7.079157,-1.131315,-2.350183,-9.319575,-6.156838,-2.586891,8.189671,-9.526531,-4.660544,-4.543282,-7.975763,4.856734,2.468110,-9.309744,-4.793460,-9.105338,7.285496,6.512219,6.563148,2.295210,2.289465,-1.106264,4.561978,-3.983308,4.916211,-4.903605,2.431461,-4.303909,-8.869357,-3.171909,-1.027082,-1.016475,1.860495,0.490911,-2.305129,-9.452313,-6.701132,-6.867517,-4.449884,3.935149,3.204410,9.574567,1.572438,6.135952,2.787891,-4.762852,1.982203,9.906971,8.908493,1.375656,0.443467,5.039188,-7.803414,3.849381,-8.083110,-3.878045,4.174850,9.123043,4.198516,-0.255121,-0.296379,7.745366,1.185343,-2.119494,1.359617,-1.659281,-5.814882,3.344573,1.148827,4.572535,4.459461,1.343475,6.071512,-0.670804,-6.249687,3.374270,8.618531,-7.138114,-1.699515,6.901333,-1.909024,-4.769655,5.626170,5.441852,8.646649,9.479787,-4.799515,9.196961,9.439960,-0.106241,-0.440720,-6.453547,-3.209812,-6.119630,5.390094,5.585873,-5.797223,-7.219670,5.721883,-7.441021,-5.740620,5.933003,9.144804,4.173903,-1.712882,-6.257464,6.856653,2.506720,7.846631,-2.287499,2.177320,-3.915474,-5.094909,-6.934887,-9.867784,-8.613344,-8.518733,2.777113,-8.276878,-2.589104,-8.375819,6.819924,2.420938,-6.567596,-8.631178,6.563214,-1.274341,0.137482,3.843761,-1.106992,3.202175,-1.356652,-7.145652,8.593097,-3.163724,-6.720954,-8.276960,0.331629,-7.534900,-3.979476,-7.539420,-5.056761,1.314898,1.262628,8.985725,-6.154061,-6.677825,-7.892319,-3.538108,0.290486,7.317122,3.541717,0.080728,8.272917,-3.596273,0.454336,-1.916887,1.842429,0.970657,-3.530960,-8.057198,4.715878,8.427786,-2.442606,0.830093,5.643456,0.964689,-5.024266,5.454771,-3.985773,3.675924,-4.085170,1.335727,5.396888,1.862050,-1.982189,-3.565432,-2.969319,0.639444,7.896348,6.572226,-5.764881,-4.693151,3.956930,-2.716548,8.231597,0.940887,6.805056,-4.428993,-3.790112,-8.042852,9.351287,-5.869525,5.808854,-4.567092,9.453765,0.295604,-0.760309,-6.857835,7.275332,5.588273,7.067208,-5.911509,-9.558153,2.677370,-5.331503,9.503663,6.576657,-9.349685,2.422720,0.521798,-4.041637,-1.089743,-5.412583,-7.948715,-7.537030,7.984392,2.545589,-8.135445,-1.148010,-2.438331,-5.779268,-8.381634,0.248620,-4.227719,-7.333930,4.108822,-1.249337,6.368540,5.373245,-2.743081,-2.862796,7.840543,4.276476,2.188445,6.959471,0.161813,6.955673,8.841083,-1.091871,4.479683,-8.029898,6.058213,4.348782,6.040944,-5.233753,-8.209021,1.160705,-3.253796,0.442958,-7.980694,3.418501,-5.772492,-5.109653,-5.747765,5.924710,4.226991,-9.457194,-6.025756,7.870270,-5.102223,2.805412,-0.392310,-3.474605,-6.949478,-3.434803,1.319192,-8.999610,-3.925951,4.243945,5.756232,6.684238,-0.247065,5.199988,6.919780,6.526156,-6.148572,-1.093497,9.734518,-8.272350,-2.379570,4.297820,-9.620833,-2.132897,-8.848273,0.814814,-1.753711,-1.835360,9.265086,-9.667431,-4.357599,-9.131111,-9.762102,-9.022641,-7.837711,6.896651,9.198384,-6.668156,-9.667565,2.566012,-9.432389,-0.714049,7.643023,-6.070335,-8.328584,7.621452,-0.166971,-5.431868,-4.067060,-7.088243,9.223963,0.734791,-8.849423,-7.599026,-5.058353,5.072038,6.569835,-3.241405,-7.046718,5.692535,9.646988,-1.908357,-3.402862,-5.803514,7.393095,5.414690,5.597684,3.045305,-4.652166,-8.479933,9.908691,-1.835520,-2.069052,7.738006,9.340077,0.579129,9.979547,-5.366856,-0.634626,-3.571082,4.377880,-6.288091,2.177638,7.826693,-2.441084,-9.162169,5.139099,-7.173005,7.769659,6.228624,-8.747020,8.883598,-0.611316,0.098914,1.502479,-1.832619,-9.192283,2.129225,-8.742484,4.053910,-9.445107,8.886209,-0.179028,1.498537,8.325440,-5.173897,-7.376307,-8.560922,8.407283,3.202907,1.128594,-0.644707,9.345023,5.541249,-7.388337,-8.069957,9.296722,-3.529366,9.548241,6.217623,-7.551929,-9.547334,-9.941730,7.858206,-2.634008,-7.744318,-1.207254,9.270332,-4.087601,-4.944603,-5.216692,8.848709,-8.520440,8.620792,-7.676328,-3.382254,1.164860,0.346826,0.186404,4.712222,7.894041,-6.141390,-0.621074,7.183783,-5.964496,4.463716,-2.346539,-5.507261,0.529757,-3.051716,4.639279,-9.182114,7.690093,-4.676195,6.066677,4.108438,2.149024,-8.081112,7.574663,-4.607872,4.362839,-2.522292,-7.494513,-7.615626,7.572050,6.653188,-1.730149,0.364281,1.741820,-8.236896,0.530409,-0.905023,6.846594,2.441328,-9.380116,1.867346,3.443118,-3.499512,-4.890404,7.474802,1.610888,-1.148231,1.086243,-8.478229,5.882662,5.807756,-3.675371,2.426232,-3.157724,-2.951709,-5.098958,1.090855,-1.795927,-6.596115,-2.735772,-1.433095,-3.755702,5.932803,-4.123738,0.411447,2.081773,-4.963763,-6.079964,0.287602,-8.202871,3.644017,0.177891,9.232539,-0.826491,0.723133,1.244943,9.232548,-9.619002,1.170973,-2.805163,1.738305,6.789214,8.445454,9.088339,8.288803,-7.049828,3.882358,7.127958,9.197045,-8.129735,-2.141613,-8.718407,1.995025,5.883476,7.087749,5.967338,9.290574,6.530828,-5.725766,8.428754,-0.457206,1.256425,-6.033355,-9.495227,-5.031158,-9.873499,0.327691,-6.111614,0.640643,5.421914,5.576506,9.489999,-8.045375,1.358012,-1.473805,-4.268691,6.464904,-3.425948,-7.748840,1.119464,9.000669,9.382371,8.741006,4.274529,8.088167,3.633548,-9.196057,8.916625,4.586276,5.299159,-9.002635,3.755895,8.065308,2.301543,-2.880445,9.215633,-7.217317,-3.721201,-7.886673,-1.335536,3.842828,9.688886,0.598792,-9.120532,9.880671,-8.457752,5.291141,7.209691,9.662423,-6.860497,-1.081235,4.542508,-3.398749,-5.564817,2.185706,9.896031,-2.319660,-6.277457,0.699269,8.635322,6.514604,-9.909002,6.108472,2.940418,-2.912631,-9.486286,6.019879,9.134429,-7.032127,1.887600,9.742224,-9.650068,1.709299,6.084354,7.776649,7.375124,-0.734994,2.657113,-9.269509,-8.379361,-7.039513,6.475008,-3.170614,7.612734,-1.187650,-1.417973,3.976072,7.003571,-4.319301,-2.454989,2.932828,-7.960421,3.990872,6.541963,-6.635724,4.207896,8.611763,7.370121,0.639623,-3.667266,3.973458,8.993288,0.313259,7.243786,6.231578,7.192503,2.447258,-6.141145,0.211355,-0.047406,2.085497,-5.563674,-2.818608,-8.614591,-5.568046,1.573299,-7.672026,2.418693,-6.852313,9.442407,-3.964796,-8.666579,-5.726028,-1.923682,4.171595,7.081188,-7.389778,7.003396,9.591830,7.212608,-9.674251,2.385932,8.757472,-6.903815,0.225949,-0.359683,-2.449920,-9.953143,7.694193,-9.786862,3.422539,-5.182073,7.735559,8.007803,7.596633,-8.017771,3.997271,-6.838289,-2.119598,-1.539359,-4.555346,5.745491,-2.213898,7.942414,0.475799,-6.583051,-8.045172,-1.178657,-2.132262,-4.371788,-0.738926,7.103940,6.555573,5.405450,-1.047478,2.508374,-7.570564,7.526576,-6.894841,-6.349015,-0.825804,5.348038,2.390840,-4.880838,3.358258,-7.953075,2.315403,2.175975,0.661288,0.665833,9.404963,4.036807,5.048923,-6.699331,6.598045,1.848155,4.462608,-0.652452,1.337331,-7.770862,-9.490559,-3.620518,-2.447370,-0.143556,-9.959082,3.060909,-0.604360,4.709614,8.950498,-3.443207,5.943268,-4.072389,-9.779424,0.884823,9.421897,-2.532404,-5.574275,9.701639,-9.980349,7.637659,1.711819,-6.547833,9.939993,-1.410380,6.545679,6.041558,-4.087637,9.848338,3.395758,-1.791197,-2.694643,-0.067406,-6.873885,9.812722,4.073265,8.904979,5.290377,-6.590743,-7.931724,0.561356,6.656153,-3.121328,-9.639674,-5.433198,-2.558412,-1.299377,4.223376,-1.812167,9.384414,3.583135,-3.079800,1.742870,-0.286636,-9.406434,-9.018400,5.871534,-0.244780,-4.014981,1.485324,-2.607296,9.337383,0.957295,5.703498,-0.911227,2.585996,2.066389,3.550123,-0.225667,5.303961,-9.761311,-9.531748,8.002738,0.522693,-6.865062,6.468850,-6.390843,9.294211,9.725979,8.449014,1.291764,2.623705,-9.644218,-2.076213,2.582372,2.438809,6.538573,7.743070,6.056033,-3.348774,9.737991,-0.629626,3.813322,1.244060,3.273302,-0.079240,-1.430394,6.411734,-5.267767,2.130978,1.003491,0.512770,-0.662617,-5.338997,5.771571,1.909222,-5.482455,7.938543,-3.644858,-4.190957,5.656754,-5.804029,1.373334,9.696928,3.081349,2.044623,4.458770,-5.450511,7.619967,7.408689,5.939235,1.238145,0.189608,1.414766,-7.598298,1.303322,1.975555,1.765418,8.512639,-9.535455,1.236612,-7.575158,0.471630,-3.446087,1.523588,2.136089,5.161694,-6.430012,9.868704,-8.732853,3.457727,-1.039625,1.081719,6.696463,-6.393518,-2.924977,4.776913,-9.154919,6.555023,5.965997,9.716475,2.930549,-0.892347,6.479828,-1.881386,6.416606,7.173284,-8.633747,1.039623,1.363461,0.239146,5.246078,-5.373419,5.424439,-3.771111,-3.837046,-7.384504,-0.705019,9.279500,-1.152346,2.415556,-4.555482,0.248068,-3.587271,-5.490475,-6.124383,5.918560,5.270659,-6.505438,0.214731,5.464608,-3.686887,6.190031,-7.613407,-3.146356,-7.989831,-6.250077,-4.718963,9.462108,-0.410689,-3.234527,-5.521579,-7.195325,-9.838713,-0.309111,-1.806920,0.881648,5.108425,2.135096,-4.205370,5.533561,-6.389219,2.259217,1.328901,9.276480,-0.040660,2.991878,7.264746,-8.134854,-6.983315,3.057139,9.294116,0.653197,1.327861,-6.966505,-8.018747,3.707782,-0.332983,8.047416,9.409408,6.308945,-8.856185,-4.983622,6.453562,9.583532,-1.018345,-8.379606,-5.424777,-1.829136,-4.634243,4.857325,-4.539201,7.155032,2.692895,4.013494,3.214792,-5.294989,9.564594,9.883105,-4.161152,-6.996107,2.853099,-1.018147,-8.736641,-3.693461,7.999377,1.122306,-0.165405,-7.044697,9.466194,-8.736814,7.827421,-7.381054,-5.572626,3.481682,9.091217,6.208743,-6.396177,-0.851141,-1.110519,2.958424,-5.086044,-2.714400,-3.687301,-1.429639,-4.661520,-0.841519,7.462071,-6.054313,5.529854,-4.421748,7.567700,5.956454,5.744317,-0.733087,-4.013067,-8.457347,-7.201219,5.951294,3.365643,-1.130385,5.554867,5.974441,0.430309,-1.848723,3.328137,9.945166,-5.815403,-3.077754,-7.829189,0.503142,8.188891,8.395643,-3.004326,-3.637453,-8.135133,7.492409,8.803884,6.724629], dtype = "float64")#candidate|3838|(2496,)|const|float64
call_3837 = relay.TupleGetItem(func_1952_call(relay.reshape(const_3838.astype('float64'), [16, 12, 13])), 2)
call_3839 = relay.TupleGetItem(func_1954_call(relay.reshape(const_3838.astype('float64'), [16, 12, 13])), 2)
func_2568_call = mod.get_global_var('func_2568')
func_2572_call = mutated_mod.get_global_var('func_2572')
var_3844 = relay.var("var_3844", dtype = "uint32", shape = (1404,))#candidate|3844|(1404,)|var|uint32
const_3845 = relay.const([True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True], dtype = "bool")#candidate|3845|(15444,)|const|bool
call_3843 = relay.TupleGetItem(func_2568_call(relay.reshape(var_3844.astype('uint32'), [1, 1404]), relay.reshape(const_3845.astype('bool'), [11, 1404]), ), 0)
call_3846 = relay.TupleGetItem(func_2572_call(relay.reshape(var_3844.astype('uint32'), [1, 1404]), relay.reshape(const_3845.astype('bool'), [11, 1404]), ), 0)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_3847 = relay.TupleGetItem(func_499_call(), 0)
call_3848 = relay.TupleGetItem(func_500_call(), 0)
func_3366_call = mod.get_global_var('func_3366')
func_3369_call = mutated_mod.get_global_var('func_3369')
const_3855 = relay.const([-7,6,-2,-1,2,-9,4,-8,-1,-9,6,-1,2,-8,-1,4,6,3,10,-6,-7,-7,-8,-4,-4,10,-9,-7,-6,-5,6,6,-1,1,-4,4,-5,2,5,-4,9,9,4,2,-2,8,8,1,2,-1,-2,8,5,1,-8,-9,9,-6,5,-5,-6,-5,9,-4,-10,9,-1,7,7,-5,3,1,-3,6,-4,3,6,-6,7,-7,-6,-9,1,10], dtype = "uint32")#candidate|3855|(84,)|const|uint32
call_3854 = relay.TupleGetItem(func_3366_call(relay.reshape(const_3855.astype('uint32'), [7, 6, 2]), relay.reshape(const_3855.astype('uint32'), [7, 6, 2]), ), 0)
call_3856 = relay.TupleGetItem(func_3369_call(relay.reshape(const_3855.astype('uint32'), [7, 6, 2]), relay.reshape(const_3855.astype('uint32'), [7, 6, 2]), ), 0)
func_2695_call = mod.get_global_var('func_2695')
func_2698_call = mutated_mod.get_global_var('func_2698')
const_3866 = relay.const([[-3.454967,-9.482657,-4.907572,-4.497863,5.014110,6.236289,-8.347110,1.097314,9.991273,-3.768569,-1.063712,2.758050,4.060619,9.213910,-4.528373,-3.183861,5.346548,-6.975872,4.254456,-7.252330,0.888941,2.149533,-2.946428,1.069467,-2.823326,8.572147,-2.378798,-4.358891,0.565171,-8.554329,-6.936588,5.407311,6.857945,7.732365,-0.295665,-4.592207,4.702415,0.392929,-1.599869,-9.080165,-4.694232,3.401528,-4.719212,1.447367,-4.081763,3.895036,-9.785794,-1.572677,8.539038,-8.952581,3.895318,3.664422,3.494857,-7.177230,-2.683025,-3.536794,6.556104,5.621444,-4.897536,7.241776,-5.906999,6.750571,1.095856,8.063690,9.477439,6.901375,-0.407197,6.412663,5.518330,7.682209,-3.994250,4.897943,-3.392939,4.169498,5.222197,8.822639,-8.210017,-4.028701,-7.355598,-2.429084,-3.758950,9.797894,-1.847791,-1.824460,-6.873470,1.752501,0.196029,-2.984582,-2.235399,-0.875198,2.090511,5.294435,-3.394764,1.156073,5.838745,-7.632527,6.659654,-6.216126,7.246165,-1.116124,7.249241,-9.048232,-1.050161,-3.387153,1.961141,-7.658137,-7.231994,-1.542999,8.581360,3.786118,8.076701,-8.405876,4.536031,-3.311040,1.315690,0.251902,9.852349,-2.477892,-4.523967,-9.590258,0.568173,-5.520866,-7.213311,4.250490,9.924390,7.084639,-9.768933,4.800123,-0.046980,-8.415704,-5.941948,-4.968207,-0.701304,6.492619,3.528542,-8.616416,-0.628363,-1.212703,8.635746,5.199544,3.844846,0.870245,-4.401180,5.340569,-8.046300,4.049250,9.829687,-4.276781,-7.867778,7.166935,1.523816,-1.940802,-9.130909,4.067757,-5.942142,-5.284692],[1.125366,-8.379016,2.514412,-5.240266,0.035839,-7.544100,-2.071509,-9.072332,6.688188,-4.035787,6.750401,-4.131738,-6.228834,7.466651,-9.280636,-7.498947,2.598209,-0.992976,-4.030954,6.540419,-3.982925,2.315724,-3.351470,7.719775,1.258712,8.269085,-6.978673,-4.171215,2.487839,-6.185813,-5.934145,0.718495,9.977482,-8.366144,-7.016157,5.289300,2.252362,5.253477,8.038543,2.065796,9.586504,2.602282,4.530337,-2.674830,-3.874725,-5.556767,1.437475,-2.324467,3.301129,-6.193781,-1.783036,-8.825286,-0.594914,-8.631564,-1.391931,-6.942540,-0.020944,-3.790876,-2.203816,-3.792975,3.806063,6.838414,-0.047135,8.157739,-2.185713,8.122365,4.272452,-3.908540,-3.165001,9.154601,5.623160,-2.711385,-3.781684,2.456436,9.722737,5.759937,-1.630499,7.826215,-7.004376,0.655853,-1.910479,-9.132250,-3.048215,-1.408833,6.093454,-3.750525,2.916387,-6.070772,7.431362,-1.460345,1.075097,1.306285,-0.026480,-7.301153,7.690390,6.142214,-6.622375,7.647539,2.584433,8.535893,-5.630994,7.940978,-0.652836,2.865119,8.881768,-5.222353,2.186396,-7.193710,-6.648072,-6.457181,-5.694738,-6.049346,2.660960,-6.344832,9.779294,5.853753,0.428586,9.366946,-8.960637,3.891075,0.011537,-8.618204,3.690835,-7.334968,1.592762,8.679257,0.162546,1.042116,8.222280,7.852503,9.783947,-1.956946,9.960708,0.567098,-2.950090,4.850796,-7.904120,-7.389512,-8.309218,-2.685628,-7.106803,-2.583300,0.562650,-5.797704,2.860639,4.282349,5.939713,4.722635,4.873895,-2.186801,2.522275,3.361486,-4.291683,2.382168,1.876086,-0.655519],[7.764648,5.989880,-6.408080,4.556985,2.656983,7.889614,4.163448,6.697306,1.861882,-4.651931,6.601547,-2.015103,-7.762805,-1.708274,9.543354,3.317119,2.841033,3.416404,-5.996508,9.918580,5.034555,-7.438020,0.271756,-3.593729,-0.097231,3.864723,-1.770448,8.836561,0.399117,-0.664934,-3.809307,6.718660,-5.213959,-1.751885,-5.938099,-1.068944,-7.593648,-5.943694,-7.980811,-5.101083,8.647492,-6.736879,6.229759,-5.487240,-2.845135,-0.355454,-6.325047,-3.252935,-1.473854,-8.070464,4.774249,1.800715,1.091210,6.388578,-1.150489,-7.009755,-0.091609,3.336446,-5.250054,-1.652890,0.101280,-4.898927,7.552001,-9.452355,4.186966,-7.164171,-3.318222,-6.574692,8.974956,1.563638,4.470699,5.008664,2.961606,0.744073,2.050065,-5.828601,-8.765984,-5.166789,9.801763,-8.279421,6.319156,2.023999,-3.597662,-7.769084,-0.949270,7.284148,6.981877,8.031056,6.241470,7.228306,-8.199770,0.499637,-4.049245,-5.876950,7.361326,-2.026233,3.748663,-9.278388,2.679996,2.447597,-4.026883,6.562031,-0.059101,-1.429483,8.783533,-2.371861,6.483998,2.911037,4.997983,-7.259675,-2.233712,-1.729446,-5.275258,0.962044,7.685547,7.222543,2.729245,6.483394,0.871056,2.416993,0.164600,4.450730,-7.162352,-2.445314,-8.550425,-4.713689,6.504418,0.923231,9.037824,9.818342,8.286719,-1.455059,8.172352,-5.608686,-3.717633,-7.469847,2.272431,-3.939714,-1.793256,-3.453125,1.420736,4.063230,6.357456,4.806994,8.268045,9.321426,7.391107,8.722540,1.172443,-0.967767,3.627021,-0.239200,-5.806301,-1.359465,1.708281,5.579177],[8.844596,-6.761461,0.553612,3.709553,-6.911475,-7.332896,5.140663,2.470886,5.481622,-8.632264,-9.833350,-1.060978,0.078427,4.943645,2.227119,-1.289957,8.054828,9.580425,-7.496768,2.156943,2.926007,-6.167882,4.286628,7.148489,9.725116,2.102173,-8.543954,-1.717303,9.380768,5.752588,3.431042,7.035524,-0.350513,9.444281,-9.120328,7.304774,-7.444810,-8.786350,9.996844,9.902176,1.917955,-3.145379,-0.596320,5.695912,-1.791235,-7.321102,-6.971968,-7.453644,-3.804291,9.693761,-0.865998,-7.440479,1.655493,-2.247050,-3.687551,3.183847,0.289745,-9.396270,2.328857,6.195742,-3.255179,5.135453,5.539395,5.889359,0.116162,-9.051620,9.865479,6.331373,2.858851,-3.532162,3.916219,6.166267,7.778288,-6.873609,-2.142203,7.600179,1.300999,0.293720,-6.041950,-1.094081,-4.225078,-6.830358,9.893959,-7.789561,8.755053,-7.469650,-1.494388,0.683390,3.711850,-7.913363,1.727809,-9.488601,-8.480698,-5.659107,-0.235745,5.144495,8.128446,4.606565,6.869794,-7.121612,-6.611219,1.772934,-0.655639,-7.693174,-7.534243,2.199087,-5.773797,-9.037383,-0.841504,-2.932062,7.105395,8.316730,7.603145,6.720557,-1.677858,5.924496,-4.577092,0.588277,-2.398279,0.236451,3.973786,-4.687753,-7.426918,-5.648369,8.517631,-8.988308,-0.465874,-9.580989,-5.113623,-9.040726,6.617904,1.053163,-1.544863,-3.556215,-0.242753,5.314888,6.229870,-1.767171,-2.273801,-6.768418,6.471625,-3.581822,-9.255842,4.776543,-0.176157,3.640921,6.500547,-6.215201,6.218044,-2.266989,-1.769019,1.509182,-6.512427,7.557891,0.976193,-3.539583],[-9.395515,-5.250641,7.376683,9.748706,-6.317649,7.696589,3.265604,2.593818,8.586224,5.133965,-7.050849,6.174558,-5.676718,4.076165,-5.566083,-4.119672,7.537493,2.148053,-6.932565,-8.766148,1.604617,-1.502604,9.730068,5.134489,-2.485057,-6.087968,-4.581092,4.699935,4.107019,-9.769989,-8.069961,-6.748531,8.316983,3.372813,7.773159,-9.159615,8.744881,7.361635,5.098331,9.038069,7.304457,-6.210385,9.739423,-1.197931,-4.924795,-6.153037,8.943390,-2.275570,-1.813169,-5.955432,-1.238053,-7.488423,-6.923372,-1.205167,3.904254,8.389461,-5.718516,-3.222166,9.999736,-9.967988,0.604362,-0.028734,1.147794,4.134274,-3.543109,4.239015,5.581787,9.829570,-5.276405,4.487544,6.841470,-5.198468,-4.640720,-4.948250,-7.817147,9.343497,7.159590,-0.498680,6.935075,0.528195,-6.675866,-4.899357,-3.620829,2.127400,9.909543,-6.526276,2.903511,-9.195404,4.391326,4.694826,8.870662,9.015601,-5.384487,-8.890574,-9.670230,-3.366693,-2.416416,-7.500880,-5.261695,6.109551,-7.801393,-3.742611,0.545866,2.027805,7.543271,-9.235300,4.041986,-3.395371,4.977870,2.936380,-7.841793,-2.367365,-6.061297,5.655746,-3.808613,9.139598,2.495950,-6.063160,-0.185945,1.716761,-8.158435,4.267196,-6.400990,-3.616326,-3.621427,2.203417,6.468082,5.200919,-0.683872,-9.445442,-5.117376,3.764564,6.734648,-6.186404,8.290627,-3.746704,6.940490,5.533913,1.940591,4.169022,-8.155659,-9.180893,3.293168,6.726839,-1.715971,-4.721574,4.771144,-0.251828,-6.734317,4.833147,4.370896,5.654203,7.746845,-0.737567,-3.444090,-9.837685],[-6.474514,-7.715333,-9.190600,0.132876,3.960474,6.898719,1.188509,-8.755335,-4.473467,5.291014,3.427344,-0.561902,5.153903,6.813595,8.338516,-0.068826,-1.735768,9.177596,2.202709,9.266996,-6.875732,7.466956,8.938955,1.770521,1.943894,9.678455,-6.714860,3.528858,-7.413733,3.538786,-3.755838,3.328675,6.033273,-8.841452,8.508721,7.219653,-7.860300,2.927357,-3.664788,-3.352149,9.185679,-2.944814,7.236639,1.182404,-0.313194,3.368177,7.493121,3.059617,2.902912,2.396746,-3.486155,8.820120,1.445839,-1.661252,8.695018,-3.286367,-0.385483,-9.066490,-9.812175,3.806517,3.016630,-0.372382,3.208065,0.500050,8.469744,8.460308,9.060127,-8.394400,2.732036,1.271919,5.283283,9.848429,-2.657783,-7.423464,2.699044,-8.058706,-5.667194,7.482238,-8.801706,8.198489,0.517151,3.764747,3.957513,-9.505872,-7.605738,6.804585,6.040438,9.303180,1.648872,-4.179779,2.066326,5.494998,9.260859,4.567508,0.889464,3.760953,5.309674,3.134516,6.392479,8.468265,3.777976,0.812361,8.354202,4.094924,-3.238309,-8.595017,-1.592746,-5.791416,-0.750967,2.869446,-8.326991,6.216771,-0.526757,-5.046715,-4.715767,9.144537,-9.359210,-7.322956,-7.414164,-3.004584,2.436864,-6.842100,-6.429876,-5.536316,9.794302,-6.210583,-1.315519,3.038567,7.542799,-4.739785,-0.683124,5.566686,8.108442,-4.029322,6.586187,-2.788503,4.564119,-4.262891,4.007226,8.053976,1.669755,-3.348794,2.383667,-6.636433,2.208519,-9.948727,-5.874599,6.782961,8.097323,4.597805,-4.827370,8.830802,0.103520,-9.080047,-3.379674,1.339382],[2.869774,-6.515580,6.641826,4.721766,1.809503,-1.756627,-7.796638,3.712253,-1.969653,-3.233647,5.547023,-7.811564,-1.390156,3.478947,-4.033483,-0.917581,0.394387,-0.735991,3.176807,9.584885,0.251070,-7.347219,6.457534,4.152800,0.909050,7.021859,-7.474064,5.536178,-4.857209,6.861878,0.070870,-6.219740,-2.590561,3.191529,8.767065,7.284973,1.885203,-1.448093,6.199583,-9.396990,7.665499,5.086236,5.774067,-0.610823,-7.682873,3.214829,3.970806,-7.278426,-5.989226,3.624106,-8.823750,3.249643,5.302379,5.204563,2.238795,2.754337,4.089057,-4.637223,6.445257,-1.180217,6.000883,6.392751,7.854594,-4.528016,4.190843,7.848115,-7.434319,5.213479,-3.764513,7.922873,-9.851150,3.183091,7.015039,4.712322,-8.374967,-2.870750,1.878852,4.631267,4.798597,-6.021549,7.518274,9.273995,-3.044696,3.843838,1.964849,9.658318,6.430685,3.843293,-7.308017,7.099323,-7.270797,-4.650838,6.309361,-2.208017,-6.244905,-7.699572,0.331306,8.370251,-3.178344,-1.165458,9.446493,-1.835660,-2.745686,-6.842777,-2.381229,-9.168558,8.540022,-5.644495,-4.686461,-9.604384,8.614934,-4.031414,-9.070457,8.746427,5.079785,-3.996064,7.149972,6.563351,-7.303250,-5.375716,-8.961680,7.903647,-2.627434,-9.697720,-0.773241,0.235687,7.683891,-0.602804,7.456814,1.707178,-5.063638,-3.544239,-3.248498,8.355649,3.504570,4.993109,-1.991176,7.409583,-9.118176,3.337090,-9.688042,-7.833792,5.426597,7.133045,-0.168506,6.134448,-6.387795,-2.342323,3.634286,1.112530,-6.051864,-9.905047,3.302017,8.812515,-1.278212,8.145707],[0.302309,-9.436396,-4.834753,7.491476,-8.333524,7.632178,-2.287973,9.500079,-6.270269,-0.332487,1.009606,5.747982,2.891299,-1.938254,-9.351158,-6.300500,-4.288825,-3.725882,7.769438,2.788754,-1.184052,-3.039462,6.575895,-1.296286,3.722417,-4.239854,-5.918942,0.616424,-7.310261,2.671752,0.463591,-8.005016,-7.900422,3.754665,-2.727274,-1.870848,7.180495,-5.145436,-1.913178,-8.854918,8.908806,0.062401,6.351866,1.031250,-2.157514,-5.227798,0.417736,1.241692,1.825953,6.690265,-8.292175,-8.805874,-6.718148,-9.892815,7.517704,-4.081019,7.029779,-2.932960,9.124661,-5.132864,-9.152239,0.400845,0.463959,-9.401227,9.089089,-0.348612,9.913386,-9.692969,8.895878,-7.091119,8.650558,-0.111282,-1.582521,4.184635,-7.834260,-2.147255,-6.161010,-9.621309,-2.978418,-7.845574,-1.598020,0.070223,5.441896,-4.250829,-1.340495,-4.178110,6.877335,-9.076574,7.181658,6.891948,2.413927,0.100182,-0.915586,0.232760,-9.684937,-5.917852,9.969163,-7.881362,6.346137,4.381790,2.542450,-2.925452,-3.306891,7.231373,-7.678883,-8.404779,-6.821194,-9.036652,6.246188,0.877386,6.752805,1.291351,-9.438691,-2.740022,-5.194469,6.525545,0.116138,-8.892586,3.910133,3.271075,7.254162,3.900192,8.026702,-5.768966,-3.915172,-9.386811,9.976598,-6.812520,7.997303,-9.985229,-3.453495,-4.777953,6.725960,-3.595590,-4.810689,-9.036446,6.932806,5.557864,1.361822,8.590564,6.710225,-6.913143,0.165194,-6.012561,3.964676,-6.248156,9.441344,0.314667,-2.002079,5.686050,7.070830,-0.820423,8.553064,-4.799663,5.400202,-2.949460],[1.775550,9.039378,7.018807,-1.959218,-1.125347,9.814230,8.979332,-1.519522,-7.296307,-8.181429,-7.317421,-1.019031,-7.659983,-7.825728,-8.186318,-9.735851,3.600037,0.652366,-2.317683,8.647300,-8.352821,-0.519025,7.242922,6.600529,-4.608925,-1.631761,-6.320885,-9.321062,1.937004,-2.233791,-2.274581,5.379587,2.268805,-7.222337,-8.160728,-5.367405,-0.541280,-5.325151,-4.923201,8.723750,0.272310,5.809527,-0.266589,-9.038703,-1.558786,-0.614043,-3.473584,2.682789,-6.560338,2.548033,2.611539,9.407647,-7.492970,-4.979857,-0.858736,7.334094,7.465363,7.158296,-0.729659,9.771147,3.338563,8.059397,6.464984,9.408023,5.435113,1.353406,-3.201494,-4.852435,-5.655585,3.881885,9.341117,3.598697,6.942163,-3.427197,-0.079197,4.768326,6.047163,8.766848,6.800149,-5.850643,7.182394,3.296319,6.806563,-6.568602,-6.788982,-8.370169,-5.440358,-3.603152,-5.742991,-6.406318,-4.189835,-0.351799,-0.646230,0.919181,-1.667653,-3.267698,1.024503,-0.803651,-9.028919,-7.700147,-6.142731,-7.180910,-4.382120,6.199934,2.723449,-2.198670,5.477088,-5.547722,-2.829441,3.880413,7.078207,3.237848,8.507233,8.497783,-8.017522,4.422216,-1.925337,-3.967878,-2.334105,-0.437913,9.528520,-2.918483,9.207886,-2.879362,-6.943305,8.843051,-1.515235,-7.688021,-2.919413,0.761745,4.681925,1.602120,-9.839697,9.430785,3.911140,-0.114272,-6.978042,9.307273,7.250853,3.189337,0.847861,-9.149517,2.615713,-4.910928,-3.006671,9.657093,-0.669170,-6.851989,-0.124085,4.570084,1.852062,-5.732884,-5.734027,5.498701,5.068199,7.024268],[2.923051,-2.791397,-1.210859,-8.491727,-0.660854,7.962577,4.995673,1.936039,3.449155,9.288365,1.875157,-2.392847,-5.796776,2.069315,-7.905848,-3.060450,-8.437137,4.693642,1.764315,-9.890670,1.023600,-5.175459,3.017775,-4.381247,5.255686,8.640962,6.807532,-4.973295,4.738436,3.482887,8.770618,-9.943508,8.168766,-1.077221,6.211751,-0.398084,-9.865339,4.665659,0.973861,-7.511791,-8.418830,0.136183,7.525702,5.648041,5.802137,8.895786,-7.433711,6.698252,4.462323,8.226369,-4.297413,4.780397,-5.054289,-5.753816,-0.763405,-4.720801,-7.451734,-3.498127,-0.471045,-0.806979,-6.040401,-7.729683,4.344804,-4.823827,0.590385,-5.938686,-2.228969,7.125345,-8.625380,-1.718422,-3.944897,9.459002,-7.843120,5.671664,6.927666,-1.356793,8.365652,7.520444,-6.635868,5.002974,1.170755,9.657795,9.023817,-7.523949,-6.201636,-0.467757,-3.397101,9.763322,9.475762,6.200784,0.317347,-9.245762,-3.708571,3.786872,-9.079084,-0.768742,-1.769246,0.536147,-1.450314,-3.488509,-1.563017,-7.577206,-2.449405,8.349123,-8.456847,3.152855,-0.084325,-9.247456,7.666055,-4.402155,-3.385587,1.975426,-3.767574,-6.674454,-1.903366,-6.120663,2.893520,3.178932,-3.490014,7.330367,4.645852,-0.007072,-0.241841,-4.347630,9.946707,4.963095,-9.855657,-0.628473,4.527718,9.131377,1.676590,-9.346424,-6.450198,7.573953,-1.896576,5.529358,7.799899,-4.079569,-9.271546,4.740863,8.204470,7.792643,1.027265,-5.733237,-1.262360,-4.359674,2.778188,-8.972085,3.314904,4.454458,-3.311448,9.634598,-1.121205,-9.165652,2.845936,-3.397645],[-2.500066,-4.934094,-0.723166,9.783152,-7.110722,-1.292179,-2.226051,-1.662787,-1.765902,-0.797800,-9.594219,-0.141743,4.230238,-3.331134,-1.169982,6.163940,-5.085196,-3.404122,-1.056317,-3.012326,-4.284584,4.409173,2.035774,-2.142268,1.764502,7.981235,-4.117947,-3.717521,-7.417655,-5.316991,-3.202512,3.567526,5.199302,4.031381,5.583056,3.618492,-2.255311,2.001148,-1.995232,-1.105470,-2.060416,1.866293,9.000929,-3.165091,-0.487088,8.989835,-1.702520,-7.529264,-0.063123,3.505572,5.173350,3.258958,0.687630,0.170455,-6.100085,5.628010,3.954517,-3.377811,2.197583,-2.834187,1.138270,-1.599903,8.400144,-0.749087,-0.020942,6.175614,-9.937693,1.643725,3.238514,8.838609,-5.787338,-0.195551,7.645403,1.723839,9.379221,2.603302,2.010314,-1.039394,-4.453780,-9.429675,7.523702,-0.049175,3.504816,8.530430,-7.903855,-3.972471,-7.621816,1.571622,5.742573,-8.307030,-3.351619,-9.691786,8.863038,-5.414192,5.435959,-3.809134,8.828515,-9.345066,-2.274072,5.859685,-8.464423,-5.446683,2.441059,-1.126773,-6.999767,7.515337,-5.320895,-2.798365,7.692004,4.527810,5.227436,1.477662,-9.555352,6.332478,5.077041,-5.415387,6.538969,-8.817748,-7.063597,3.746367,2.960487,2.183149,-3.873816,9.727132,8.531875,-5.665085,-7.551904,5.744867,1.302009,-5.267677,2.943162,-1.252347,8.479825,2.305183,-2.567514,-0.800238,-8.499502,9.476679,2.205346,-8.963866,-6.697830,1.387242,-9.177371,1.331678,-0.906921,-1.060631,-9.809357,-6.162942,-5.371587,6.995817,-8.148417,-3.156360,-1.940122,-5.091213,3.087695,-0.358514],[3.188186,-8.766394,-9.099379,-1.193152,0.451761,-2.681638,0.928055,5.396152,3.312410,-2.538726,-8.627576,-8.899446,2.834394,-8.993359,6.937584,-6.065686,9.669741,-0.780235,-5.076048,-3.183659,5.865225,-0.071073,4.864932,-8.629767,-6.812451,-2.288767,-0.286869,7.687496,5.510794,-1.292804,-7.786567,-5.425462,9.938408,6.254248,0.301349,-5.142747,0.058734,8.195154,-4.098352,2.202343,8.802754,-5.424639,-6.264775,9.802587,1.703542,-2.791025,-8.220872,5.786734,6.512764,9.960963,-0.087964,3.021898,-4.470871,-2.236220,2.951877,-6.518751,-3.025214,-0.504337,-3.397148,-9.227929,7.504726,-3.017372,9.465309,9.969120,-9.384889,1.211232,-0.378377,-8.187822,-6.957919,-5.254174,-6.960546,-9.363690,8.333442,9.402553,-2.539818,8.998726,-6.839702,3.830482,-2.852655,-7.601110,2.240779,6.409656,9.371374,6.651115,1.839393,6.145080,-1.228741,-4.367402,-8.869300,8.173302,7.415673,-1.458982,-7.392325,-9.412745,-7.921699,-0.256751,-3.906505,-2.421977,2.882123,6.941554,3.284115,9.498812,-7.320356,4.085006,9.865383,9.718977,4.543406,3.885819,6.445363,-5.719321,-1.822053,-8.543475,3.501130,-4.026197,-5.633216,3.768616,-6.481287,3.271074,-9.892019,8.899467,6.947534,-9.557075,-2.239351,7.971500,6.977761,-7.651799,-4.684377,7.278775,7.315143,-8.554635,7.860548,3.306050,-1.044888,9.461885,3.619514,1.684673,2.470788,5.328017,4.338049,-4.359893,7.020151,-8.533123,6.308034,2.610487,-3.659406,-7.307292,6.640212,5.855366,-5.664613,-3.920560,-3.982557,-5.927756,3.642048,6.825145,-6.381290,-5.008786]], dtype = "float32")#candidate|3866|(12, 156)|const|float32
call_3865 = relay.TupleGetItem(func_2695_call(relay.reshape(const_3866.astype('float32'), [16, 9, 13])), 1)
call_3867 = relay.TupleGetItem(func_2698_call(relay.reshape(const_3866.astype('float32'), [16, 9, 13])), 1)
output = relay.Tuple([uop_3832,call_3837,const_3838,call_3843,var_3844,const_3845,call_3847,call_3854,const_3855,call_3865,const_3866,])
output2 = relay.Tuple([uop_3832,call_3839,const_3838,call_3846,var_3844,const_3845,call_3848,call_3856,const_3855,call_3867,const_3866,])
func_3870 = relay.Function([var_3831,var_3844,], output)
mod['func_3870'] = func_3870
mod = relay.transform.InferType()(mod)
var_3871 = relay.var("var_3871", dtype = "float32", shape = (12, 15, 7))#candidate|3871|(12, 15, 7)|var|float32
var_3872 = relay.var("var_3872", dtype = "uint32", shape = (1404,))#candidate|3872|(1404,)|var|uint32
output = func_3870(var_3871,var_3872,)
func_3873 = relay.Function([var_3871,var_3872,], output)
mutated_mod['func_3873'] = func_3873
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3881 = relay.const(10, dtype = "int16")#candidate|3881|()|const|int16
const_3882 = relay.const([[[9,-9,9,-8,3,5,7,7],[-6,1,1,-5,6,7,-4,-2],[-7,5,-4,-9,8,-6,-8,9],[1,1,7,-6,6,9,-2,-4],[-1,-5,2,3,-9,-9,3,5],[9,5,2,6,-5,-1,-7,6],[-3,-4,-6,-9,5,4,-7,1],[-6,9,-8,-7,4,-9,-2,3],[-7,-2,-6,-10,2,-9,4,4],[-8,8,-2,8,1,-8,-4,8],[-8,2,5,4,-7,-4,-5,-9],[-3,-9,-1,10,-8,-5,-7,-2],[5,-8,-8,-6,5,4,-10,5],[1,8,-2,-4,-7,3,-1,-1],[-8,7,-1,-1,-4,-8,-1,10]],[[6,-5,-6,-1,7,-9,8,7],[6,4,-6,4,1,6,5,-5],[4,1,7,5,7,-4,-1,-1],[-6,4,1,4,2,-3,8,7],[-5,3,2,8,9,4,-5,-9],[-1,3,-3,-3,10,1,3,-1],[-8,-2,2,2,4,-3,3,9],[7,6,-2,-4,-5,10,4,-6],[-6,3,-8,1,-2,-2,6,-9],[-7,2,3,2,2,-6,1,-7],[2,-5,6,4,-2,-5,8,-3],[10,-4,3,3,-8,-10,-4,-6],[-10,7,-10,-5,7,-1,3,-2],[9,-8,-2,8,1,-8,6,9],[6,-3,7,9,8,-1,-3,-6]],[[6,7,-4,-7,2,9,-9,5],[6,-4,-7,-9,2,-8,10,9],[7,-6,-8,5,8,9,4,-5],[-3,-5,1,-7,-3,-9,-8,-1],[-2,-7,1,2,8,7,7,-4],[10,-5,3,-5,7,-1,2,-2],[-2,7,-3,-3,10,6,-3,-2],[-10,-5,8,-1,-5,2,6,-2],[-6,-2,-7,1,6,-7,-8,1],[5,-2,7,10,10,9,-9,-6],[9,-6,-4,4,-6,8,-9,3],[4,-10,3,-3,3,8,-3,9],[-2,-8,3,8,-2,-3,-7,6],[-6,-4,-6,9,-9,5,1,3],[10,2,3,1,6,8,-4,5]],[[-3,-8,-6,-10,6,-4,-1,2],[10,3,6,1,-1,5,3,5],[9,-7,-2,9,-4,7,-1,7],[5,-5,7,2,4,3,-7,3],[2,2,-7,-2,-5,-8,-9,10],[-6,-4,-10,1,4,-1,-2,1],[-6,-10,8,-6,2,-1,-1,-5],[-5,-10,-7,-9,6,-6,-4,-6],[1,-5,-9,-2,-5,2,-4,-2],[7,-4,-4,-5,-2,-3,-7,-9],[5,9,-5,5,-6,3,-3,8],[9,-4,6,-5,2,7,5,10],[-9,3,2,1,4,-7,-1,7],[-9,-2,2,-1,3,6,5,-7],[-6,6,8,-5,5,9,7,3]],[[9,-10,3,7,-1,-4,-10,-9],[-3,6,6,4,-3,7,-9,7],[6,-2,9,4,4,-4,-1,5],[-10,5,-2,7,-2,-7,-5,-10],[10,-1,-3,8,-3,4,-5,-7],[-9,5,3,-9,6,-7,-10,3],[1,8,-9,9,-9,7,1,-3],[8,2,-9,6,6,-8,10,-8],[-7,3,5,9,7,9,10,10],[9,-9,4,-4,9,-9,-3,-2],[-3,6,8,-1,-1,-5,-2,1],[7,-10,7,1,3,-7,-7,7],[-5,-8,-10,2,-1,4,-1,7],[-5,1,8,-8,-2,-9,5,8],[1,-4,9,2,-4,7,9,5]],[[10,6,8,3,10,-8,8,-6],[6,-7,8,6,6,-7,-7,1],[-8,9,2,7,-2,6,3,-8],[-5,-5,-4,5,6,5,6,-3],[2,2,2,5,-4,-5,-6,-9],[9,4,-7,-5,2,-6,-7,-5],[-1,-2,-6,-10,-1,-1,-9,6],[4,-1,-10,4,8,2,-1,4],[-6,8,7,-4,2,-3,-6,10],[10,1,-10,2,6,-3,1,-8],[6,-10,-3,-9,-10,7,3,5],[9,-1,-10,-4,7,3,5,-4],[7,-3,-10,7,-7,5,-10,-3],[-6,-7,-9,3,10,-3,-7,-5],[-3,-7,3,3,8,9,-10,-6]],[[-9,5,6,6,-5,-3,8,-9],[8,-3,9,10,6,5,4,-6],[-6,2,10,2,-9,-10,-2,-9],[6,-3,10,4,5,-3,3,-1],[-10,-5,-3,8,9,-8,-8,3],[-8,2,-2,-3,-4,-5,6,7],[10,-6,6,-4,5,-8,-8,-8],[-1,-4,7,-9,4,9,1,5],[8,4,-7,-1,-2,-7,3,-7],[-6,-7,-6,3,10,1,-7,-3],[-8,-1,7,9,-2,-8,-2,7],[-5,2,-1,-3,-8,-10,-9,-2],[-2,-3,-2,8,9,-8,2,10],[2,-9,6,1,8,-8,8,5],[-2,9,-1,9,5,-10,5,-6]],[[-1,-7,9,-10,3,6,-10,1],[9,8,-9,1,-4,-2,-10,-5],[5,7,-2,-1,-9,-6,7,-2],[7,6,7,-1,8,-2,-2,-1],[-7,-1,9,3,8,-6,-7,1],[8,-10,-5,-8,4,5,-4,-5],[9,1,-9,-6,6,-3,-10,-4],[2,-3,-5,-3,-8,-7,7,5],[-7,5,-3,-4,-3,-9,-9,-1],[-9,9,-3,4,-3,6,-4,-5],[7,6,1,6,-7,6,10,-9],[2,-6,4,-8,3,-4,-5,8],[1,2,6,-7,-5,-10,-10,7],[-1,-9,-4,-10,3,6,7,1],[-1,-1,3,1,8,-6,-2,-2]]], dtype = "int16")#candidate|3882|(8, 15, 8)|const|int16
bop_3883 = relay.greater(const_3881.astype('bool'), const_3882.astype('bool')) # shape=(8, 15, 8)
uop_3889 = relay.sin(const_3882.astype('float64')) # shape=(8, 15, 8)
output = relay.Tuple([bop_3883,uop_3889,])
output2 = relay.Tuple([bop_3883,uop_3889,])
func_3898 = relay.Function([], output)
mod['func_3898'] = func_3898
mod = relay.transform.InferType()(mod)
mutated_mod['func_3898'] = func_3898
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3898_call = mutated_mod.get_global_var('func_3898')
call_3899 = func_3898_call()
output = call_3899
func_3900 = relay.Function([], output)
mutated_mod['func_3900'] = func_3900
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1590_call = mod.get_global_var('func_1590')
func_1592_call = mutated_mod.get_global_var('func_1592')
call_3960 = func_1590_call()
call_3961 = func_1590_call()
func_2568_call = mod.get_global_var('func_2568')
func_2572_call = mutated_mod.get_global_var('func_2572')
const_3964 = relay.const([-2,2,8,-7,-9,4,5,-6,6,6,8,-1,-5,-10,-2,5,-4,7,8,-7,-9,5,-2,10,8,9,-3,4,5,-4,-5,-3,7,10,-6,-4,-9,-10,-9,-10,8,2,2,-7,2,-3,2,5,-8,5,-6,-8,8,-8,8,-6,9,-8,-6,7,-8,-4,-8,10,-5,-1,-3,-6,9,-10,3,-5,-3,-3,-8,8,3,-6,2,1,10,10,3,6,1,-10,1,-7,10,5,2,-8,5,8,-10,9,-2,-5,7,8,-5,-2,-8,1,9,-8,9,-8,9,-4,-6,1,1,3,-5,-6,1,-9,5,7,-7,-6,10,-3,-9,-10,-9,3,8,10,8,6,-1,6,-6,-1,9,-1,1,-10,10,-7,4,3,-5,5,-6,-3,-7,-5,4,-8,-5,-2,3,-9,3,-4,-6,-8,7,-4,-6,3,6,8,6,-2,5,9,5,10,6,6,-10,-2,-2,1,-3,-3,2,8,-9,1,4,3,2,1,7,9,-4,6,7,-3,-2,9,10,-4,-10,7,8,5,-3,-7,4,10,7,3,3,-6,4,1,-5,-7,1,-10,1,-1,10,9,-6,-1,4,10,-9,4,-2,-1,1,5,-9,-3,8,9,1,-9,8,1,3,-1,8,10,-2,8,-9,5,7,2,-9,-1,-8,1,-2,8,-6,10,6,-3,-10,-2,-5,9,-3,5,-2,6,9,-8,10,8,6,-9,7,1,-4,-8,-9,10,8,6,4,-9,-9,-5,2,-6,-1,-1,6,8,6,-10,-3,-7,-8,10,-6,6,-8,6,-6,8,-7,8,2,5,3,3,4,8,4,3,-9,-5,3,6,-6,-7,-5,8,2,-7,7,-5,-9,-4,-3,1,7,8,9,-9,8,10,10,1,9,1,6,-8,8,-10,-8,-10,8,7,2,4,2,1,10,-8,-10,7,-2,2,7,-9,-4,-4,-9,-10,6,8,8,2,3,-6,-8,8,-8,-9,4,-1,-9,1,-5,8,4,9,-9,-9,2,5,10,1,-6,2,10,-8,-8,8,9,5,4,-7,-9,-5,-4,3,4,10,4,-9,7,5,4,9,3,-7,9,2,-10,9,7,-8,5,8,1,-6,-5,-6,-8,2,-8,-8,5,-3,7,1,-1,3,-6,-5,-10,-9,-4,6,9,-1,7,2,-9,8,-8,-10,-7,-6,7,4,-4,4,6,-10,-8,-2,2,8,10,9,-5,8,3,-5,-5,10,9,-7,-4,2,10,8,9,-3,-1,8,1,-6,-7,-7,-1,4,-10,7,-8,5,-2,-9,-8,9,-5,5,-2,-4,-3,3,-5,4,-10,9,-9,-5,7,3,6,-7,10,1,-3,2,4,-10,4,4,4,-1,8,-5,2,2,-1,-1,9,2,6,7,-9,9,-2,7,-6,10,-6,9,-2,-8,-8,-1,-2,10,-7,8,-8,1,-1,6,1,-9,9,-7,-9,-6,-3,-5,-2,-2,5,-6,8,1,-8,-9,10,-5,6,-4,4,-3,6,3,4,-6,-5,10,-2,7,7,-8,-3,-6,5,-3,9,-8,-3,-3,-6,4,5,-9,4,-6,9,7,-7,1,4,-4,2,-8,-5,-2,3,-2,-1,-3,6,-7,3,7,7,-5,3,-6,1,10,6,-7,-9,5,-2,6,-10,-3,6,-5,9,6,9,-9,-5,-4,-2,-7,-2,2,5,-1,10,9,5,9,-4,-10,-6,-3,7,-9,10,9,-10,-3,-6,1,-8,1,4,1,-4,1,7,10,-3,10,-5,-3,-9,-2,-3,-2,3,6,3,7,8,9,4,-9,6,-10,10,10,2,-4,-6,7,10,-9,3,-2,4,6,9,-4,-9,-8,8,8,-1,-4,-1,-6,-6,-3,1,-2,7,2,5,2,8,5,-9,5,-7,5,-4,10,8,-1,-9,3,-10,1,-10,-1,3,6,9,2,-4,6,9,-8,-9,5,1,-3,4,-8,7,5,-5,1,-6,-2,1,-8,5,-9,-4,-2,4,-6,9,5,3,-7,-4,-2,1,-1,-3,-3,5,-3,-6,-6,10,1,5,-7,-7,-7,-3,9,5,8,-9,8,-5,-4,6,3,3,-7,-1,9,9,9,6,-9,10,-1,-10,-4,10,6,-10,-1,-7,1,5,6,-5,9,4,2,-5,4,2,8,6,7,7,8,8,-1,-9,-8,-3,4,5,3,9,-3,5,-2,-9,6,-10,-1,-4,-3,1,-7,-10,-2,-7,5,2,8,3,-8,-10,10,1,-10,4,-7,-7,-9,-5,4,-8,9,-8,9,6,6,2,-8,9,-9,1,10,-2,7,-4,1,-1,-3,-7,2,8,1,-8,-4,-5,2,10,-4,-4,10,-3,9,-3,-2,-3,-6,-6,2,6,-3,-10,8,8,2,4,-10,-5,10,-9,8,1,-2,3,-3,1,-1,-10,3,-5,-1,-9,8,10,-1,4,-3,-5,4,-1,8,-2,7,10,-1,6,-5,-5,-8,3,-5,9,2,3,4,10,7,1,-5,5,7,7,4,-5,6,4,-2,9,8,7,-7,-2,-10,-10,3,10,5,-1,1,5,-3,1,1,9,-2,-9,-5,5,5,2,-3,9,-4,-10,6,6,-2,5,7,-3,10,9,-7,3,-2,-8,-9,-4,7,10,7,3,3,5,9,10,-3,5,5,-10,2,3,-6,6,9,9,2,-7,9,2,1,-7,10,4,1,4,3,7,-4,-3,9,-9,3,3,-8,-9,-8,3,10,3,1,-5,5,-2,-6,-2,-8,-5,6,2,-4,3,7,10,-1,-9,10,-5,-7,-4,5,-8,-8,3,-1,-6,-5,-7,-4,2,-7,8,-8,-4,3,7,-5,-10,-6,-7,-9,3,1,-10,4,10,4,3,-2,-6,7,2,8,5,6,-2,4,-1,-3,1,3,-1,9,9,-10,-4,-8,-1,10,-10,-9,-1,8,-9,3,10,-9,-2,-6,-10,8,3,2,-4,-9,9,7,-2,-4,-7,1,2,8,-10,9,-1,6,4,-10,-2,-3,9,-1,-6,-2,-1,-10,-2,-8,-3,2,3,9,-8,6,-8,-1,10,7,-8,-8,-9,1,-5,6,6,-3,10,8,9,-7,2,5,1,-7,1,7,2,-3,-7,-8,-9,-3,10,-6,-5,7,3,9,-4,-3,2,4,8,-4,8,-9,10,7,-3,-1,8,-6,-10,6,-3,-10,9,-10,3,1,5,-2,9,-7,4,3,-7,-4,-5,-2,9,5,6,-4,-9,-2,-2,1,4,8,-7,-2,1,1,8,6,3,-7,7,8,8,-2,2,4,1,-6,4,-3,5,10,-7,-3,8,-9,-3,10,-7,-2,6,-7,-1,-7,10,-9,-6,-8,-5,-3,-3,9,1,9,-2,9,8,-6,10,3,7,-2,-1,6,-3,3,3,-4,-1,-6,-6,2,-2,5,6,-9,10,-4,6,-8,-8,7,-1,8,3,-7,-9,-3,9,-3,5,-8,7,-5,3,-2,-4,-2,9,7,4,-3,4,5,5,10,10,-5,1,10,5,5,-10,-4,-9,-2,-6,-7,10,-6,10,7,8,-8,3,-3,9,-8,4,-7,3,-7,4,-1,-8,3,7,-9,-1,-3,7,5,-3,7,4,-10,3,6,-3,-6,-6,-8,-9,7,8,-6,-4,-2,-3,4,-3,4,6,-5,-9,-10,10,-9,9,-8,-3,-1,-7,-6,10,-10,6,10,6,-1,-8,3,10,-6,-5,5,3,7,-9,-10,2,-3], dtype = "uint32")#candidate|3964|(1404,)|const|uint32
var_3965 = relay.var("var_3965", dtype = "bool", shape = (2574, 6))#candidate|3965|(2574, 6)|var|bool
call_3963 = relay.TupleGetItem(func_2568_call(relay.reshape(const_3964.astype('uint32'), [1, 1404]), relay.reshape(var_3965.astype('bool'), [11, 1404]), ), 0)
call_3966 = relay.TupleGetItem(func_2572_call(relay.reshape(const_3964.astype('uint32'), [1, 1404]), relay.reshape(var_3965.astype('bool'), [11, 1404]), ), 0)
func_3116_call = mod.get_global_var('func_3116')
func_3117_call = mutated_mod.get_global_var('func_3117')
call_3972 = relay.TupleGetItem(func_3116_call(), 0)
call_3973 = relay.TupleGetItem(func_3117_call(), 0)
uop_3983 = relay.sigmoid(var_3965.astype('float32')) # shape=(2574, 6)
func_710_call = mod.get_global_var('func_710')
func_711_call = mutated_mod.get_global_var('func_711')
call_4003 = func_710_call()
call_4004 = func_710_call()
bop_4007 = relay.subtract(uop_3983.astype('uint64'), relay.reshape(var_3965.astype('uint64'), relay.shape_of(uop_3983))) # shape=(2574, 6)
output = relay.Tuple([call_3960,call_3963,const_3964,call_3972,call_4003,bop_4007,])
output2 = relay.Tuple([call_3961,call_3966,const_3964,call_3973,call_4004,bop_4007,])
func_4020 = relay.Function([var_3965,], output)
mod['func_4020'] = func_4020
mod = relay.transform.InferType()(mod)
mutated_mod['func_4020'] = func_4020
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4021 = relay.var("var_4021", dtype = "bool", shape = (2574, 6))#candidate|4021|(2574, 6)|var|bool
func_4020_call = mutated_mod.get_global_var('func_4020')
call_4022 = func_4020_call(var_4021)
output = call_4022
func_4023 = relay.Function([var_4021], output)
mutated_mod['func_4023'] = func_4023
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2205_call = mod.get_global_var('func_2205')
func_2206_call = mutated_mod.get_global_var('func_2206')
call_4045 = func_2205_call()
call_4046 = func_2205_call()
output = relay.Tuple([call_4045,])
output2 = relay.Tuple([call_4046,])
func_4050 = relay.Function([], output)
mod['func_4050'] = func_4050
mod = relay.transform.InferType()(mod)
output = func_4050()
func_4051 = relay.Function([], output)
mutated_mod['func_4051'] = func_4051
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1740_call = mod.get_global_var('func_1740')
func_1741_call = mutated_mod.get_global_var('func_1741')
call_4060 = relay.TupleGetItem(func_1740_call(), 0)
call_4061 = relay.TupleGetItem(func_1741_call(), 0)
func_660_call = mod.get_global_var('func_660')
func_663_call = mutated_mod.get_global_var('func_663')
var_4067 = relay.var("var_4067", dtype = "float32", shape = (1404,))#candidate|4067|(1404,)|var|float32
const_4068 = relay.const([[-9,4,1,-9,4,-6,7,1,3,6,8,10,-6,-3,-8,-4],[-10,-2,-6,7,-1,8,8,-5,9,-2,-5,-5,7,-5,10,3],[-2,10,8,-5,-2,-6,-4,-3,6,-10,-8,-2,-4,3,8,4],[10,7,5,6,7,-8,-3,-4,6,10,8,10,-8,-3,-6,-8],[5,4,-7,5,-10,-5,-4,4,10,2,3,-9,5,-9,3,5],[1,5,-8,4,-5,-3,-7,-7,-10,-6,-2,-3,-8,-6,-8,-6],[2,10,4,-2,-4,-8,-1,-9,-5,-3,9,4,8,8,-2,-8],[-8,8,4,-2,2,-9,-4,-3,3,-6,2,2,9,-8,4,7],[4,-5,3,7,5,10,6,6,1,-4,1,5,-5,1,8,-1],[-1,-1,2,-2,5,6,-9,-3,-6,5,4,-7,4,-6,6,-7],[4,3,-7,4,-9,5,5,-10,6,10,7,9,-5,-4,-2,10],[-10,-3,8,-8,8,-4,-3,3,10,-9,1,8,3,-7,-4,3],[9,-10,-3,-3,2,-3,-4,4,10,-2,-9,6,-4,-9,9,-4],[-9,-3,-3,-5,-6,7,7,-5,-5,7,-9,8,-6,-4,10,-3],[-2,-1,-5,-9,-7,2,-10,-8,-5,-10,7,-8,4,8,-1,3],[7,8,10,-4,6,10,4,10,2,2,8,4,3,6,-3,7],[2,-4,3,-1,6,4,9,9,-1,-3,-2,-1,-9,9,5,-3],[-1,1,-7,-4,4,-4,1,-6,-8,-1,8,-5,8,-8,-10,-10],[-8,-7,-1,-1,-1,10,10,-4,5,-9,5,9,-10,6,7,-10],[-5,1,10,-3,-7,-2,-6,-7,10,-5,2,10,-10,9,-2,-2],[8,3,5,10,8,1,6,9,4,5,-6,7,1,3,8,10],[-1,5,-8,8,-5,-2,-6,1,4,7,10,8,-3,5,-6,-7],[-8,3,-5,4,1,-3,6,9,9,-10,2,-10,-8,-6,10,3],[6,-3,-8,-3,2,8,-1,10,10,8,-7,-7,-3,-1,-4,10],[2,-3,2,-1,-3,6,3,1,-5,5,7,-9,5,-5,4,-1],[1,-7,9,9,5,5,1,-1,-6,8,-2,-6,-5,-6,-6,-5],[10,-2,-10,-10,-6,2,10,4,4,1,-9,1,-6,4,5,-9],[-3,-3,-1,5,9,-9,-3,-6,4,-10,-2,10,-9,2,-6,-8],[-1,2,-7,3,6,-6,-4,-3,10,5,6,2,10,1,4,-6],[4,10,7,-9,5,10,-8,10,-8,-1,-8,4,-8,5,8,-10],[-1,6,-4,-1,-8,8,5,5,-1,-2,1,7,2,-5,7,-3],[-4,6,-3,6,-7,-9,-10,-8,3,10,-5,-5,-2,7,6,8],[10,9,-1,7,7,4,2,-10,1,9,8,-7,6,8,6,3],[9,3,5,2,8,3,8,-5,3,7,9,10,7,-9,-5,3],[4,-6,8,5,1,-5,9,-8,-3,-4,10,-10,-3,4,-3,1],[-2,10,-2,5,-3,2,10,6,6,10,3,5,-10,3,-5,-5],[-9,7,10,-7,-2,-4,-1,-10,8,5,9,-9,-8,-4,-7,9],[4,9,8,4,5,4,6,-2,-1,8,-8,1,-9,8,4,2],[-1,-9,-5,1,-10,-5,-7,1,-6,10,-5,-10,5,-8,5,-6],[-1,7,9,7,1,6,-10,7,-7,2,5,-6,-9,-9,4,-3],[2,2,-8,-1,-8,-8,-3,6,10,-9,9,-7,-2,5,4,3],[-9,-7,2,7,-2,-10,-10,4,4,6,1,-6,-10,6,-10,-9],[-4,8,-4,-5,8,1,2,9,-9,1,-10,10,9,-5,-7,-10],[1,-4,-10,1,-4,7,8,-4,-3,-6,4,-3,3,2,2,-8],[9,-10,-3,-9,3,-5,-2,-9,-5,-7,8,2,10,1,5,9],[-3,4,-9,-7,9,-5,-10,-7,9,4,6,9,9,9,1,-9],[-4,4,-4,-8,-10,5,9,-7,-3,-6,-6,-4,6,8,-1,4],[9,-1,-7,-7,5,-9,3,-3,-8,5,5,-8,7,8,4,-5],[10,-10,-6,5,1,8,-1,-10,9,2,9,6,-5,-1,-8,2],[2,-6,10,-2,7,-3,-10,-9,8,-4,9,-10,4,-3,-10,10],[-8,-2,8,-7,3,-3,-3,-3,-4,-10,5,-9,-3,-1,9,7],[-6,6,-5,8,5,3,6,10,3,4,2,-8,6,-10,-1,-2],[7,2,1,10,-1,-3,-10,-6,-3,-10,-2,1,-10,-2,-7,-9],[-4,-6,8,2,-10,-6,-8,-1,1,-7,4,2,9,4,-2,-2],[-3,-3,6,-2,-8,7,1,10,-3,-6,5,8,3,1,6,-2],[-4,10,8,-6,-10,-4,-1,2,1,1,-5,-1,-3,-6,8,8],[2,-1,9,9,-10,-10,-9,-7,10,6,6,-6,2,8,9,-3],[3,1,1,1,3,4,-4,2,-8,-9,-8,1,-6,-3,4,-4],[-9,-1,5,4,3,-9,1,-9,2,3,-3,-3,5,2,1,8],[-2,-2,1,6,8,-1,9,-7,-9,2,-5,3,-10,-9,2,2],[-6,-3,-4,1,6,-10,3,5,-8,-6,-3,-4,3,-5,1,-10],[-4,2,-2,8,4,-3,5,-10,7,7,6,-5,5,5,7,-2],[8,7,-8,8,-2,10,-10,-2,8,-9,9,3,-3,-9,-4,1],[5,-2,2,-7,-2,4,7,1,5,2,-3,7,3,-8,7,1],[-7,6,-4,6,8,-9,7,-4,1,6,3,2,1,5,9,-9],[8,8,8,9,7,5,-10,-6,-5,7,-8,-5,10,7,3,-8],[3,4,-3,7,3,-5,1,5,6,5,2,-2,-8,-4,7,6],[1,1,-3,5,2,-10,-9,-8,-7,-8,-3,-3,-3,3,-10,-2],[-7,4,-3,7,-7,8,-1,3,-1,9,5,-4,9,-6,4,-8],[1,4,-1,9,7,-3,6,-8,-9,1,-9,10,-2,-6,6,-9],[8,-3,4,4,-1,-10,5,4,-5,7,1,1,-6,10,-3,-1],[4,-9,-5,-8,1,3,-7,9,-3,-5,6,6,7,3,6,-2],[-7,-7,-3,9,6,-10,-1,5,7,-6,8,-4,7,6,3,-4],[-6,-5,7,-2,7,5,3,2,10,5,-10,-4,8,2,5,-6],[-8,-1,-6,-9,-7,3,-4,1,10,3,-5,-7,-4,-8,7,-1],[4,10,-7,7,3,3,2,1,-10,-4,-1,7,1,6,9,1],[-1,7,9,-1,1,-2,-8,9,-9,-2,-3,8,6,2,-3,-3],[3,4,4,-8,9,-10,-3,4,1,4,7,-7,-8,-10,-1,9],[1,-8,7,9,-6,-3,-9,2,-5,3,-8,4,-9,-1,5,6],[1,2,10,4,-2,4,5,1,-2,-3,7,8,-2,-8,-7,5],[-8,8,10,-3,-10,-6,-3,-7,3,7,7,-8,4,-6,-10,-1],[-9,6,10,2,8,-6,-6,6,-3,1,-10,-7,-5,-7,5,5],[8,1,-5,-9,2,-4,6,-8,-4,-9,8,-7,10,-1,-4,8],[10,-10,-6,-5,-2,-7,-10,-9,3,-7,7,-5,-1,-3,3,-5],[-3,-7,3,9,3,-8,-10,7,7,6,9,-3,6,-5,7,1],[6,1,3,7,-6,9,3,1,2,-6,-9,-3,-2,5,10,-1],[5,6,-2,4,-9,3,-10,4,2,-3,6,7,4,-9,-7,1],[-2,9,-3,9,-5,5,-9,-7,6,3,8,10,-9,8,-9,7],[7,3,-1,1,-9,3,-5,10,-2,3,-10,-4,4,-6,-1,2],[2,-8,-2,-9,7,-8,2,-2,-10,4,10,10,8,-6,-2,6],[6,7,5,10,7,2,5,-4,1,-6,4,6,5,-2,10,10],[-4,-3,-2,2,-10,-1,-10,-3,-2,5,-6,-9,-1,-9,1,-7],[6,-5,-5,-8,-3,4,-3,-6,6,3,10,-5,5,4,-1,2],[-2,-6,5,-2,4,-2,2,1,9,10,-8,-2,8,10,6,-7],[-2,-5,-10,7,-4,-10,-9,4,7,-7,10,-7,-7,8,-10,2],[-9,-10,4,2,6,-4,-4,-3,4,-5,1,-3,-10,2,5,1],[8,4,7,-8,9,-8,-10,-4,-10,9,3,-2,10,-1,5,-2],[3,5,-3,5,-6,-6,5,-3,1,8,3,-4,-1,1,-9,1],[10,-4,-2,6,3,8,-4,-2,-4,-8,10,3,1,1,6,3],[-1,-8,7,3,-8,7,2,6,2,3,7,7,-10,7,-2,4],[7,-6,-8,4,8,5,-3,-5,6,-8,4,1,4,3,-8,7],[9,-2,2,10,-9,9,-7,-10,-2,5,6,3,-4,5,-1,1],[-6,6,1,8,-4,-6,1,5,-4,1,-6,9,-9,6,-7,-2],[2,-10,8,4,5,5,6,1,-10,-2,-7,10,3,7,-5,-2],[-9,-1,-2,-10,-7,-5,5,-4,10,-5,7,4,3,10,2,-6],[-6,-9,4,-7,4,-3,-8,6,-5,5,-8,1,-2,-1,5,-7],[-6,1,-6,2,-10,3,-4,-6,-9,8,-1,9,2,-8,-7,9],[-1,-5,9,-9,2,7,-10,-4,7,8,-1,-1,-7,1,4,-1],[-2,-10,-2,2,-10,2,5,10,-8,-9,-5,3,9,-10,-5,6],[5,-8,6,5,-10,-7,-10,6,5,-6,-6,-4,4,6,5,7],[-9,-9,7,-4,-8,4,9,-8,5,-9,-5,-4,7,8,-5,3],[10,-10,5,-5,-6,-3,-9,1,4,-3,-3,10,10,-3,1,-8],[8,-7,5,-8,-1,5,-1,-1,6,-6,2,10,-3,6,9,-6],[-5,9,-5,10,7,5,4,5,-2,9,-10,-8,4,-7,-2,-1],[6,-7,-9,10,-2,6,-2,6,-5,-10,5,-5,5,-1,7,-4],[-4,-5,-7,10,9,-7,-8,-7,-7,-5,-8,-1,-6,-10,8,5],[6,-4,-6,-4,10,-8,-4,1,-3,-4,-1,-3,-1,8,-8,9],[7,-9,-10,8,4,-10,2,-10,10,-7,10,5,-7,-1,10,-9],[5,-7,-10,-9,-4,1,-10,2,-6,10,1,7,10,10,-10,-4],[8,-2,-10,-3,9,10,-6,1,1,7,-7,-9,2,5,-10,-7],[-2,-7,1,9,-5,-1,-1,-2,-4,-6,3,5,7,-7,1,-7],[2,-7,5,5,5,10,10,2,-9,4,4,-7,-9,7,-8,-3],[8,5,6,-3,8,8,-7,10,9,-8,-3,-3,1,4,-6,-2],[-9,-8,-7,-7,-8,2,5,1,-8,-6,-6,-5,1,-6,6,-1],[-5,1,2,6,1,5,-2,10,5,-10,5,8,5,-2,2,-8],[-2,8,5,6,-3,-1,-5,-4,-7,1,-2,-9,-3,-9,-2,-9],[-6,-10,2,-6,-7,10,10,-10,2,10,-10,-2,7,7,10,6],[4,6,4,-1,-3,-10,-8,-9,-4,6,-7,7,2,5,-2,8],[9,-2,-8,-1,-5,-3,3,-3,2,-3,10,4,3,-5,-10,-1],[-9,-9,5,9,3,2,7,-5,7,-9,-7,10,-10,-7,8,-9],[-2,-7,2,-8,9,3,7,6,-3,10,7,1,5,-2,-7,-3],[1,7,-7,8,-7,3,-6,-8,5,2,10,-3,-1,-9,6,-9],[-1,10,-3,3,9,6,6,-8,-3,-4,2,-9,2,3,-9,7],[-1,5,5,-6,5,-2,5,1,10,3,3,-7,8,-5,2,-7],[8,7,-2,-2,4,-8,-3,8,-4,-5,3,-4,-2,9,2,9],[2,5,-10,2,10,6,1,-9,7,4,8,4,-10,7,1,-1],[-1,-6,5,8,8,-3,8,-5,-9,-6,8,8,4,-9,-9,-5],[-1,5,1,-5,7,-9,1,-1,-3,-7,8,-1,9,5,-2,-2],[5,9,1,4,-2,-3,7,3,-1,-2,-4,-1,-3,-4,-1,8],[-4,-2,4,10,-3,1,7,1,-2,8,8,-2,-10,-9,-1,-8],[5,9,-10,-7,2,-2,-10,6,7,-2,3,-7,-10,-3,5,-7],[3,-2,-5,-3,-5,-3,-9,-10,10,1,-8,8,7,9,5,2],[10,-1,3,1,1,4,10,6,8,7,8,-1,9,8,-6,3],[6,-2,-10,-6,6,2,-4,7,-6,7,10,-10,10,4,-8,-3],[-5,-1,7,-7,-7,-8,-5,-4,-1,-4,1,-1,-2,8,-4,-4],[5,3,5,8,8,7,-2,6,-4,-2,4,7,-10,6,5,2],[-7,5,-8,-6,-6,2,3,-1,10,-3,9,-10,2,-3,-8,-8],[-4,9,-3,-8,9,9,10,1,5,2,-4,3,10,5,-4,3],[4,-10,6,-8,-8,8,-6,7,1,-3,4,10,-3,2,-8,5],[-4,8,1,-6,2,-8,-1,8,-6,8,1,4,5,-1,-8,4],[1,5,-8,2,4,-8,7,-10,1,3,-8,-5,-4,7,-3,5],[4,6,2,4,10,-3,-10,-1,3,-2,-2,3,1,7,2,8],[3,-10,3,-3,5,-1,-10,-7,-8,-3,4,-6,7,-9,-7,-5],[-10,-7,8,-8,-9,10,-1,2,4,10,1,-4,-9,-7,1,-9],[6,6,8,-7,-2,6,-1,-3,-2,-6,-8,3,-5,-4,-2,-9],[-10,2,-8,-5,-5,-4,-9,-3,9,-8,-10,-4,9,1,-10,-2]], dtype = "int8")#candidate|4068|(156, 16)|const|int8
call_4066 = relay.TupleGetItem(func_660_call(relay.reshape(var_4067.astype('float32'), [12, 9, 13]), relay.reshape(const_4068.astype('int8'), [2496,]), ), 5)
call_4069 = relay.TupleGetItem(func_663_call(relay.reshape(var_4067.astype('float32'), [12, 9, 13]), relay.reshape(const_4068.astype('int8'), [2496,]), ), 5)
uop_4070 = relay.rsqrt(call_4060.astype('float64')) # shape=(1, 9, 13)
uop_4072 = relay.rsqrt(call_4061.astype('float64')) # shape=(1, 9, 13)
output = relay.Tuple([call_4066,var_4067,const_4068,uop_4070,])
output2 = relay.Tuple([call_4069,var_4067,const_4068,uop_4072,])
func_4075 = relay.Function([var_4067,], output)
mod['func_4075'] = func_4075
mod = relay.transform.InferType()(mod)
mutated_mod['func_4075'] = func_4075
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4076 = relay.var("var_4076", dtype = "float32", shape = (1404,))#candidate|4076|(1404,)|var|float32
func_4075_call = mutated_mod.get_global_var('func_4075')
call_4077 = func_4075_call(var_4076)
output = call_4077
func_4078 = relay.Function([var_4076], output)
mutated_mod['func_4078'] = func_4078
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2300_call = mod.get_global_var('func_2300')
func_2302_call = mutated_mod.get_global_var('func_2302')
call_4092 = relay.TupleGetItem(func_2300_call(), 0)
call_4093 = relay.TupleGetItem(func_2302_call(), 0)
func_3164_call = mod.get_global_var('func_3164')
func_3165_call = mutated_mod.get_global_var('func_3165')
call_4146 = relay.TupleGetItem(func_3164_call(), 0)
call_4147 = relay.TupleGetItem(func_3165_call(), 0)
var_4155 = relay.var("var_4155", dtype = "float32", shape = (13, 9, 13))#candidate|4155|(13, 9, 13)|var|float32
bop_4156 = relay.bitwise_and(call_4146.astype('int16'), var_4155.astype('int16')) # shape=(13, 9, 13)
bop_4159 = relay.bitwise_and(call_4147.astype('int16'), var_4155.astype('int16')) # shape=(13, 9, 13)
func_2758_call = mod.get_global_var('func_2758')
func_2761_call = mutated_mod.get_global_var('func_2761')
const_4163 = relay.const([5,1,5,-6,-6,6,-9,-10,-9,-10,-5,9,-10,-5,7,3,2,-3,-5,-3,9,3,-8,5,-10,-8,-5,-9,1,5,-10,1,2,10,4,8,-3,-3,6,10,-4,-10,-3,-4,-3,-6,7,8,1,9,-1,9,10,9,-10,3,-7,-3,-4,-9,-3,-3,-10,4,-8,9,1,-7,1,-10,-5,7,8,4,-4,-8,-6,9,-1,-9,7,-8,7,-3,1,1,4,8,5,-3,-3,-8,-3,4,2,-3,-5,-9,-8,3,4,5,-10,-2,-5,4,8,-8,8,5,7,-9,10,-5,10,10,-9,-6,10,-6,2,4,1,-3,3,-1,7,-3,9,7,-5,5,-2,7,-8,-8,10,-2,-1,1,2,-4,-1,-6,-6,-2,-2,9,8,7,-6,6,-6,-8,-3,10,-3,4,3,4,5,-2,-3,-10,-4,6,-1,-7,-3,3,-6,-1,1,-2,-7,6,4,-6,9,-9,4,-5,10,-3,9,-10,3,3,-7,8,1,6,2,-4,10,7,1,-3,6,-5,-4,-1,4,-8,-8,7,-10,7,-4,4,6,-10,-5,-7,10,7,5,-10,-1,2,-5,-9,1,-9,-6,-1,-4,9,-5,-4,8,-9,-9,-4,7,8,-6,-9,2,3,10,-2,4,-6,8,4,-1,-9,-1,-1,-10,10,-7,-4,-6,-8,-1,-1,-2,6,6,7,2,-8,-10,1,9,7,-2,-4,8,-5,4,3,-4,9,-10,7,-4,-5,5,6,9,9,-4,10,-9,-10,2,1,6,-5,-6,-8,-9,-7,-9,10,8,-9,-2,-6,-3,-4,-4,10,4,-6,-8,-3,7,3,2,-6,-1,-5,-4,-6,9,-4,6,3,-7,-2,-3,-4,-2,-8,8,-7,9,-6,2,9,-5,-6,-7,2,-2,-1,-7,7,1,8,-9,2,6,10,1,1,2,-6,-10,5,1,7,2,-1,-9,-4,-1,-6,-6,7,6,3,7,1,6,-9,3,-8,10,-9,8,9,10,6,-4,3,-3,9,6,7,-5,2,2,2,9,1,5,-7,-7,-2,8,-10,4,8,1,-3,-4,6,-4,6,-2,-9,8,3,-8,6,-4,4,-10,-7,2,7,4,-9,-2,2,-3,10,-8,9,-1,4,3,-3,-4,2,-2,-9,-4,7,-3,-1,-3,-10,-7,-8,3,-4,-2,7,-7,10,-2,6,-7,-4,-3,9,-8,-6,9,3,-8,8,2,-3,-6,8,2,-4,8,-9,4,8,10,-7,10,1,-5,-7,4,-9,3,-8,5,3,-1,6,-2,-7,10,1,4,-9,1,-9,6,-5,7,-3,7,-6,10,-6,-6,-7,7,-8,2,-1,5,-7,-7,-9,8,-7,-10,7,-2,-4,-6,-7,-1,-5,4,7,7,10,8,10,-3,-5,7,5,-3,-2,-2,-5,5,7,7,1,-9,1,10,7,10,6,-2,-9,-10,7,9,6,-1,5,10,-5,5,-8,9,10,-7,-5,7,-5,4,-2,3,8,2,3,7,1,-4,-9,-4,10,-5,-10,2,3,9,-10,-3,8,2,-9,1,-3,1,-10,2,8,-9,-2,-6,-7,-2,9,7,-3,1,8,-4,-9,-4,1,10,-3,-10,8,-2,2,5,-9,9,1,-6,3,9,-6,-8,-9,8,7,-1,-5,1,-8,1,9,1,-1,9,6,4,3,1,-2,7,7,4,10,-1,4,-8,-1,2,-6,4,1,6,-1,9,5,3,-4,4,-4,4,7,10,-9,-10,5,8,3,3,10,1,10,7,-3,-9,6,-7,-5,10,1,-10,-5,4,2,-4,-1,-8,-9,4,6,8,-7,4,2,-6,6,-1,4,-9,-7,9,-9,9,-1,-9,6,-8,4,5,-8,3,6,-4,-1,9,9,-6,-6,-6,7,2,7,-6,-4,9,1,5,-5,-8,-6,-4,6,1,4,8,5,3,-2,2,-10,-7,4,8,4,6,4,5,10,3,5,5,3,-3,7,-10,-8,-7,8,-4,3,2,-1,-9,-5,7,4,-2,-10,-4,2,-3,1,-7,-7,-3,10,-10,-4,-2,-3,-1,-8,6,1,4,-3,6,-9,3,1,-8,1,1,-9,6,-1,1,-3,-7,8,-6,10,-3,4,-7,-1,-7,5,10,1,7,5,1,-8,10,4,5,1,-5,3,1,6,-6,4,-6,4,-6,5,6,-10,9,6,7,3,2,3,2,9,-2,-6,9,4,-8,5,-4,2,-8,-9,-4,7,8,9,-9,10,3,-10,5,-10,-4,-6,-9,-4,-5,-1,5,6,8,-5,-6,-8,8,-5,-3,5,9,8,8,-6,4,3,-7,-3,6,2,3,-3,10,-6,-3,2,2,2,3,4,-9,-9,8,3,-1,6,-7,-7,-6,-9,5,1,-1,-9,2,6,-2,10,-6,-4,8,-3,10,9,2,-5,9,-4,10,9,-9,-3,-7,-3,-4,1,8,6,-3,-5,6,2,7,-8,-1,9,1,1,5,-2,-10,2,9,7,6,9,-4,-5,-8,6,-1,1,6,-9,-5,-1,-8,-6,-10,10,-5,-8,-1,7,-8,-1,9,1,4,-6,5,-8,10,-1,-5,8,2,-10,-9,-2,-2,-5,5,-6,-8,-9,-10,7,9,10,-8,7,-2,-3,-3,-9,-10,-6,2,5,4,4,-3,4,8,-7,2,-8,-10,-7,-8,8,1,-4,-7,3,-6,-7,-10,2,-7,-6,-2,3,-7,-5,-7,4,8,-8,-10,-6,10,5,6,-9,6,-2,-2,-2,-7,6,1,-9,10,4,2,8,3,3,-1,-2,8,7,1,8,8,2,-6,8,2,-7,2,-6,9,6,-2,8,4,-9,-5,-5,-3,-4,-1,6,-4,8,8,-3,-5,-8,-9,6,-10,-10,-6,-9,5,-9,-6,10,7,10,-5,-4,-3,-7,7,-10,10,3,7,4,-7,-8,7,-7,-7,-10,9,3,4,-8,3,9,10,-9,6,-10,-8,6,-6,8,9,8,-1,3,10,8,1,-7,1,-7,1,8,6,3,-8,-7,-10,-6,-5,8,-10,1,6,-10,5,-4,7,-6,-9,-4,3,-3,-6,5,5,1,2,7,-1,6,8,-2,3,7,8,-8,-3,-3,-9,-4,-4,2,-6,-5,-9,1,-3,2,5,-8,9,6,-7,2,-7,-10,1,8,-2,2,-6,-7,-10,-4,8,-7,-8,-10,-2,-8,-1,2,2,-7,3,-6,-6,5,-3,10,1,-8,-10,3,-3,3,-3,5,-4,-10,4,5,10,-8,9,4,-7,10,-3,1,5,-1,10,-4,8,1,-1,-6,8,-1,3,-8,10,-2,-2,10,-9,-6,6,-5,-3,8,5,-4,-7,-10,2,5,-8,6,9,7,-8,-9,2,-9,-2,-10,3,10,9,-2,-9,-3,-3,-7,5,-4,-9,-7,9,-8,7,8,2,-9,9,3,10,5,5,8,5,6,5,5,-1,4,2,5,-1,6,8,8,-5,1,-4,-3,1,3,3,9,-2,2,-7,10,3,-10,5,-9,10,2,9,4,-5,5,6,1,-8,-4,2,-7,-1,-4,-6,9,-4,-1,-8,-2,-2,10,2,-6,8,9,5,3,-2,4,-1,-5,4,8,1,-5,-1,-8,10,-5,-5,6,-10,-8,7,10,5,-5,-1,10,-2,-4,-2,8,-8,10,-7,5,-9,-8,5,6,-5,-8,3,8,-3,-10,7,-8,-9,8,9,3,-6,-4,-1,10,1,-2,-6,-10], dtype = "uint32")#candidate|4163|(1404,)|const|uint32
const_4164 = relay.const([5,-8,-4,-5,2,8,2,8,-5,-6,5,-3,-4,7,9,3,-1,8,7,8,7,-7,-9,5,-4,-1,10,5,-4,-7,-2,8,3,-9,-9,-2,-4,-5,5,-9,1,-7,-5,-5,5,-3,-4,2,-6,10,9,-2,-2,-8,-7,6,-8,-8,-5,3,5,-9,-8,8,2,-9,-9,-6,10,-6,10,4,4,10,-5,9,10,8,-9,-1,-2,3,-3,-2,2,9,-9,9,-5,5,3,-9,-2,-2,3,3,6,-9,-7,-4,-1,1,8,-5,1,2,-4,9,-7,-6,-8,10,-6,-5,-1,2,-3,-2,-4,-3,-7,-9,7,-6,2,-7,-2,6,-7,3,-1,-2,9,-7,-2,-8,-7,-9,-8,9,8,2,-4,-8,-1,-2,5,9,7,6,8,10,4,2,-4,-4,8,2,8,6,10,-4,-2,-10,-8,-8,-2,-4,8,10,8,6,-4,1,-8,-1,-4,5,5,3,-2,4,1,-2,-3,-3,-8,8,-5,4,-5,-4,-8,-3,4,8,8,10,9,10,-6,-4,10,-6,10,-10,5,-2,-3,-5,2,3,-7,-1,6,-2,-2,9,-8,-9,-7,3,-5,4,-1,-6,-6,3,1,2,3,4,-10,-7,9,7,7,7,-7,9,-10,1,4,-9,-7,-4,7,-6,-10,3,1,5,-2,-9,3,-6,-2,1,10,1,-3,8,5,-4,8,-6,1,-6,-4,-3,2,-2,-8,-8,-2,-6,4,-4,-9,-5,8,-6,3,-2,-7,-3,-4,-1,5,1,-8,2,-2,-4,7,-7,-1,3,-7,10,-8,10,8,-4,-3,-2,-1,-7,-3,5,-8,-4,-5,2,10,5,5,-1,9,5,10,4,-4,-4,10,6,2,-9,-6,1,3,5,-3,10,-2,7,4,1,2,6,7,-4,-1,7,3,3,-6,-7,-5,-5,4,6,3,10,5,9,-8,-2,-3,-6,1,-6,10,-7,10,9,-4,-4,2,-10,9,-10,10,6,3,4,5,-10,-3,7,9,-7,-9,-7,6,10,9,-2,4,-4,4,-2,8,-2,-10,-4,5,1,-6,-4,10,-10,6,7,4,6,1,-4,9,-2,7,8,-9,5,-1,-10,7,-7,-1,-10,10,-2,-5,2,4,-4,1,-4,-3,6,2,-5,5,9,-10,3,-6,-1,-1,8,8,-10,-6,-9,-3,-4,-10,-3,1,-3,10,1,8,10,6,7,-10,2,1,-4,8,-1,-7,3,4,-10,-1,4,-2,1,10,3,6,5,-9,-4,-9,5,-7,5,-6,8,8,7,4,-10,-5,-6,10,-8,2,-8,-7,8,-5,5,-10,9,5,-7,-5,5,2,2,-3,-3,-2,-6,5,-3,7,-2,-1,2,-10,-4,8,4,9,3,6,-6,8,9,6,-6,10,-7,-10,6,1,-4,7,8,3,9,7,2,-9,-9,-5,-5,2,7,-4,3,-4,2,-6,-9,-2,-10,6,-6,-5,10,-9,-6,-9,-6,-7,-6,-7,-2,1,-2,2,5,6,-4,6,10,1,8,-8,-4,-7,-5,1,9,-9,-8,-5,-10,4,-9,-8,-6,4,2,2,6,-6,-4,-8,-10,4,-7,-1,-9,9,-5,-8,9,-7,-3,-4,-8,9,7,5,-4,5,9,6,-1,7,-5,7,6,-4,-4,-9,1,6,-7,7,-1,1,-8,-7,6,-5,10,7,-5,-6,-1,3,5,2,-2,3,9,5,-5,-6,-8,-1,2,-6,-9,8,-7,4,2,-4,-4,10,-3,5,-1,8,-2,10,7,3,-6,9,-3,7,-10,-2,10,-2,-8,2,7,-9,-8,-3,2,-4,8,-4,-8,-6,2,5,-1,4,1,9,5,-7,8,2,7,-8,9,5,3,-6,-1,-4,9,2,-5,7,10,6,7,7,2,-10,9,10,9,4,8,-2,9,6,6,7,1,-5,-9,-4,-10,-4,10,-1,-2,8,-7,7,-6,-2,-8,2,2,8,2,2,4,4,-2,4,-4,-3,5,-8,3,-5,1,-10,7,-2,-10,2,4,10,1,-9,-6,-5,-4,-2,-5,8,4,-6,-8,9,-5,-1,-9,5,7,-6,-8,-4,5,9,-4,-3,7,-1,-8,-2,-3,3,8,-3,-4,7,-9,-6,10,-2,4,-3,5,-7,-6,7,4,1,-10,6,-3,-9,8,9,-3,-2,-8,-10,-1,-7,6,6,8,3,-4,-3,3,-3,7,9,-3,-7,-8,-8,-3,-5,1,-2,-1,-6,-5,-3,-8,9,6,-5,9,-4,10,5,4,-6,-3,5,-3,-8,7,7,6,3,4,-3,-4,1,6,9,7,-9,4,-4,-3,5,4,7,6,3,2,4,-2,9,-2,-2,-2,9,4,-2,8,9,7,-1,10,6,10,5,4,2,2,5,6,9,9,-7,9,8,-5,-3,-5,-4,-9,-6,3,-9,3,-9,9,-9,1,5,3,10,-4,-1,-9,3,6,-1,9,-5,5,1,6,-2,5,9,-5,-6,-9,10,-3,-8,-2,9,-10,-6,-10,8,-9,3,10,-4,8,-3,-8,-8,6,2,-4,1,-7,8,-6,-3,7,-8,7,-1,1,-5,7,-2,9,10,6,9,10,1,4,-10,-2,-9,2,8,-3,4,6,10,-9,9,4,9,5,-10,5,-1,2,-8,9,-8,8,-2,-8,-10,-5,-4,-8,2,2,4,6,6,5,-2,9,7,-4,4,1,10,-4,4,-7,7,10,9,-7,4,9,8,-8,9,-6,-3,-8,3,-1,-6,-5,10,-4,-3,-5,5,-3,-4,-10,2,-6,2,-1,-6,4,-1,-4,-6,1,9,8,-10,9,-3,-4,6,1,-4,3,-5,1,-7,10,-5,-7,-6,10,-8,-9,7,-8,-5,-1,3,8,-2,-5,-6,-4,-5,5,6,9,-2,4,4,-4,-3,6,8,6,-3,-9,-8,-9,-4,6,8,3,-6,3,1,8,2,-1,-10,-2,-10,3,8,2,-4,1,6,6,-10,-1,-6,-6,5,-1,-6,9,8,3,1,7,6,1,-1,-3,4,4,4,-8,-9,5,4,1,-3,-7,10,2,-9,9,8,2,7,-1,8,-4,-8,2,1,3,8,8,3,5,3,-3,7,4,-1,-8,6,-8,9,6,3,-3,1,-10,-1,6,10,-6,5,2,-7,-7,-2,-7,6,2,7,10,-7,2,-5,4,10,-4,-2,-2,-9,-1,-5,4,2,-1,-1,6,-1,-6,1,-4,9,-7,-6,-9,-10,-8,9,-6,-7,-9,-10,-4,5,9,-9,-6,-3,-1,-4,6,1,10,-7,10,-7,-2,-3,-6,-8,6,-10,-6,-7,-3,-7,6,-4,-7,-7,5,-5,-9,-5,1,-1,-9,-9,-5,-3,-7,9,8,2,-4,-2,2,-8,-10,-7,-4,-7,-1,-1,-3,5,5,-5,-7,8,-5,4,2,8,5,-2,-4,-6,-5,1,1,8,-10,-9,-10,-10,-9,-2,-6,-2,6,10,3,6,2,6,3,-9,6,8,7,9,-2,-7,-3,-7,-3,10,-4,-7,-4,-10,-6,-8,9,8,-5,9,10,-6,-7,2,2,9,8,4,7,-9,-5,9,2,-7,6,4,6,-1,-3,-2,-6,-4,-6,-8,-2,-10,-1,-2,-4,-10,7,-8,-2,-5,-3,3,-9,-6,3,10,9,6,-6,-3,-7,3,-4,8,-2,-4,-1,4,2,-5,-4,-4,-2,2,-7,8,-7,8,4,9,9,10,-10,10,-6,1,-9,-2,-3,8,-9,-6,9,-10,-9,6,-4,-10,3,-8,-4,-9,-4,-3,-7,-9,-7,-3,-8,-9,1,7,-2,-2,6,3,1,-2,-5,3,5,-8,-8,1,3,-5,5,-2,10,3,-3,7,-10,-10,3,9,-5,4,-8,-9,5,9,-5,-7,4,2,-8,-3,7,5,7,2,1,-7,-9,3,-10,3,1,2,-10,5,3,-8,1,2,9,10,-8,-2,3,10,-6,-3,-3,-6,-9,-2,-7,3,-6,-6,7,-7,-2,3,-4,1,5,1,-8,10,-6,-2,-3,-2,1,3,1,4,-9,-1,9,-5,7,-4,-10,4,9,8,-2,10,-6,3,3,5,4,6,-9,10,4,-10,-8,-10,-2,-8,9,-8,-1,4,-8,-9,-6,-8,6,10,-3,4,-7,-8,-5,3,-4,-8,-4,2,-3,6,8,4,-3,-5,5,8,6,-2,4,-2,8,7,6,4,2,1,-6,-3,-9,5,-8,7,1,-4,7,-3,-9,5,-10,7,10,10,-2,3,1,-7,-3,4,8,-6,5,-7,10,2,-2,-9,-6,6,-4,-1,-9,6,5,-5,-10,-5,10,1,-6,9,-1,-10,-9,-5,7,10,4,-9,7,-1,5,-4,-10,7,8,-5,6,6,-4,-10,4,-9,7,-7,-2,-3,-8,5,4,5,-10,2,8,1,8,-2,-1,-3,9,-3,10,-1,5,-6,10,2,2,5,-4,1,-10,-4,-4,-1,7,-5,2,-7,1,-5,-7,-10,2,8,-4,8,1,-6,9,9,1,-4,9,-7,7,3,10,-2,3,-8,10,-10,8,-8,-3,-2,1,5,-9,4,6,-9,-5,9,-10,2,3,-3,-9,-7,-9,5,8,2,4,-5,-5,7,3,5,-4,-5,10,9,8,2,-6,-7,-8,-4,-7,1,1,-10,-5,-10,-4,6,-3,-5,-1,-10,3,1,-8,-2,-4,-7,-2,-1,-3,-5,-6,-3,4,-1,5,1,-9,-1,-7,-2,-9,-8,-5,7,-10,7,3,-6,-9,1,-6,-6,-5,2,10,-5,-10,-10,-1,-4,-1,-6,2,1,-9,-5,-5,10,8,3,5,-6,2,1,-5,2,-6,10,2,-9,-4,-6,7,-10,-7,4,-3,-8,-8,-6,-5,-1,-1,-1,2,2,6,4,3,10,-7,3,-5,-4,-1,8,-3,7,9,6,7,7,7,7,-5,1,1,1,6,-9,-10,-1,5,6,5,5,-10,-3,4,-9,9,1,4,8,-1,-7,3,3,-5,3,-3,-9,-3,-1,6,-7,8,7,-2,-3,1,2,-7,3,6,-1,-6,-1,5,-7,-2,8,-2,3,9,5,-6,-3,3,-7,1,7,10,-8,10,8,10,3,10,-4,-1,-8,-7,2,-4,-9,6,-6,-4,3,-2,7,8,5,-5,6,9,7,-4,6,-7,-5,-10,1,-7,-9,7,2,7,3,6,2,-3,3,-7,7,1,8,5,7,-6,-1,-4,6,2,-7,-9,6,-7,9,-6,-9,10,-10,7,-7,6,3,2,-3,-7,3,-1,-7,-7,-4,5,-4,9,10,-3,-8,-6,9,10,-2,-4,4,5,-6,2,-7,-1,1,-7,7,-9,-1,8,3,-3,9,-2,-5,-6,9,-10,4,9,3,-8,10,-7,-2,-10,-7,10,2,-8,-8,7,10,-6,-9,2,3,-4,7,1,-10,-6,3,10,-7,2,3,-3,-7,9,-3,9,1,8,-9,-9,1,-4,1,-2,4,-4,-5,2,-7,7,-2,-10,2,-10,9,9,-3,8,9,-2,6,-10,6,-1,2,5,-6,8,-2,-10,8,-5,-2,-6,-3,-4,6,-7,7,-7,8,5,-6,-4,1,-3,3,3,9,6,8,8,-5,8,5,-1,7,8,10,6,-8,-4,5,6,-7,-5,-2,10,-1,9,6,-10,-9,8,4,3,-3,1,-4,-1,9,7,2,-1,8,1,-2,-6,-1,10,-8,-7,2,8,-7,9,8,7,3,-3,8,4,-4,8,-7,-3,3,-6,8,-3,5,-10,7,-1,5,-3,9,-2,-10,-10,-3,3,-3,-1,3,5,-5,10,-2,2,6,-4,-3,-10,9,1,5,7,1,8,-3,3,-7,10,6,9,-7,9,-1,4,-10,-1,-7,4,10,3,4,9,-10,3,1,8,-6,8,5,-7,-7,2,1,-1,8,2,3,-5,2,-9,-3,1,-3,7,2,-4,6,-2,-4,6,10,-5,-1,6,-2,6,-1,5,7,1,-9,8,-5,-10,3,10,-6,-6,9,2,-6,-7,7,-8,-7,4,6,-9,4,9,-7,-3,-7,-4,1,-8,-4,4,10,-4,3,-10,1,1,3,5,10,-5,-6,-1,-4,-4,5,-8,1,1,1,4,-5,9,6,7,1,1,2,-4,3,3,-7,-5,4,-4,-7,10,3,9,-5,-5,8,-4,8,-5,6,-10,-10,1,1,8,4,-10,-9,-8,5,1,-9,-4,-10,9,10,9,6,-3,-3,-5,-8,6,3,-2,-7,-4,5,-3,-10,1,4,7,7,-5,2,9,-6,-9,-1,9,-3,2,2,3,10,9,3,3,7,-4,9,-1,10,-4,-1,9,-8,2,-8,10,-10,-1,-9,6,-2,7,4,4,5,7,3,-8,8,-10,6,4,3,10,8,7,4,1,9,-6,-5,10,8,10,-1,-2,-2,-2,10,6,8,9,-7,-2,8,-3,-10,3,-5,5,3,3,-2,10,-7,-1,10,-8,2,7,7,-3,5,6,8,7,9,-7,-5,4,-5,-8,6,-6,-6,-8,-3,2,6,-9,9,6,-8,-10,3,-8,8,-5,-1,-5,-4,-10,6,4,-9,-8,10,8,-10,2,10,-4,-5,-7,2,1,-6,10,2,6,6,2,2,6,8,-7,-10,-9,2,9,-9,-9], dtype = "int8")#candidate|4164|(2496,)|const|int8
call_4162 = relay.TupleGetItem(func_2758_call(relay.reshape(const_4163.astype('uint32'), [1404,]), relay.reshape(const_4164.astype('int8'), [2496,]), ), 5)
call_4165 = relay.TupleGetItem(func_2761_call(relay.reshape(const_4163.astype('uint32'), [1404,]), relay.reshape(const_4164.astype('int8'), [2496,]), ), 5)
output = relay.Tuple([call_4092,bop_4156,call_4162,const_4163,const_4164,])
output2 = relay.Tuple([call_4093,bop_4159,call_4165,const_4163,const_4164,])
func_4168 = relay.Function([var_4155,], output)
mod['func_4168'] = func_4168
mod = relay.transform.InferType()(mod)
var_4169 = relay.var("var_4169", dtype = "float32", shape = (13, 9, 13))#candidate|4169|(13, 9, 13)|var|float32
output = func_4168(var_4169)
func_4170 = relay.Function([var_4169], output)
mutated_mod['func_4170'] = func_4170
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1440_call = mod.get_global_var('func_1440')
func_1442_call = mutated_mod.get_global_var('func_1442')
call_4182 = relay.TupleGetItem(func_1440_call(), 0)
call_4183 = relay.TupleGetItem(func_1442_call(), 0)
output = call_4182
output2 = call_4183
func_4188 = relay.Function([], output)
mod['func_4188'] = func_4188
mod = relay.transform.InferType()(mod)
mutated_mod['func_4188'] = func_4188
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4188_call = mutated_mod.get_global_var('func_4188')
call_4189 = func_4188_call()
output = call_4189
func_4190 = relay.Function([], output)
mutated_mod['func_4190'] = func_4190
mutated_mod = relay.transform.InferType()(mutated_mod)
func_742_call = mod.get_global_var('func_742')
func_744_call = mutated_mod.get_global_var('func_744')
call_4196 = func_742_call()
call_4197 = func_742_call()
output = relay.Tuple([call_4196,])
output2 = relay.Tuple([call_4197,])
func_4198 = relay.Function([], output)
mod['func_4198'] = func_4198
mod = relay.transform.InferType()(mod)
mutated_mod['func_4198'] = func_4198
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4198_call = mutated_mod.get_global_var('func_4198')
call_4199 = func_4198_call()
output = call_4199
func_4200 = relay.Function([], output)
mutated_mod['func_4200'] = func_4200
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3134_call = mod.get_global_var('func_3134')
func_3135_call = mutated_mod.get_global_var('func_3135')
call_4201 = relay.TupleGetItem(func_3134_call(), 0)
call_4202 = relay.TupleGetItem(func_3135_call(), 0)
var_4239 = relay.var("var_4239", dtype = "float32", shape = (12, 9, 13))#candidate|4239|(12, 9, 13)|var|float32
bop_4240 = relay.power(call_4201.astype('float64'), var_4239.astype('float64')) # shape=(12, 9, 13)
bop_4243 = relay.power(call_4202.astype('float64'), var_4239.astype('float64')) # shape=(12, 9, 13)
uop_4245 = relay.sinh(var_4239.astype('float32')) # shape=(12, 9, 13)
bop_4251 = relay.logical_or(uop_4245.astype('bool'), relay.reshape(var_4239.astype('bool'), relay.shape_of(uop_4245))) # shape=(12, 9, 13)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_4254 = func_217_call()
call_4255 = func_217_call()
uop_4259 = relay.log(var_4239.astype('float32')) # shape=(12, 9, 13)
func_2977_call = mod.get_global_var('func_2977')
func_2980_call = mutated_mod.get_global_var('func_2980')
var_4263 = relay.var("var_4263", dtype = "float64", shape = ())#candidate|4263|()|var|float64
const_4264 = relay.const([-0.503312,-8.538739,9.441496,-6.062218,-4.106988,-3.853396,9.931861,7.062436,3.317475,-8.726360,9.540181,7.495855,-3.180592,-2.107592,0.500724,0.104349,-2.204731,4.637555,-8.199214,-5.339512,-4.702172,3.535167,4.145555,-8.803351,5.031706,-4.459148,-7.014186,8.851942,6.422747,-2.610063,8.941874,-5.289585,4.095308,7.000885,3.173170,4.502408,0.406035,7.265114,9.565925,7.972479,-8.506788,2.656799,9.902438,5.812761,6.163190,5.399850,-1.881575,-0.365923,0.966523,1.763849,4.570482,9.102719,-9.605715,-9.933894,-1.703977,-9.841639,1.671674,3.215338,-4.515215,4.671952,1.888512,-3.726966,-5.666118,3.173914,7.700111,-8.945497,8.445594,1.868102,-3.304823,-6.542848,4.533227,6.588149,-0.927145,2.006650,5.999717,-7.960932,-8.364282,-0.621040,-5.253932,-2.790457,3.741302,-7.240600,-1.281153,-8.159767,8.606139,5.406691,5.004763,5.755900,-4.082726,4.437493,9.762167,-5.436902,-2.081107,-9.637902,-1.949898,-0.239460,6.302406,3.330003,-0.397843,-6.774777,-0.382264,-6.411818,-6.684047,7.023956,7.313504,5.761963,5.972112,-3.644754,-3.148062,-8.442526,6.302633,-7.916262,4.039831,2.851200,0.084617,-1.304946,6.548550,-5.308425,-0.123085,-4.749405,-7.076890,5.286516,8.546972,4.883516,-7.308146,6.326223,5.349522,7.444707,3.447648,-0.660254,-9.364623,-7.207375,-9.150742,-5.690594,-5.261192,-7.270513,-8.011944,-3.023079,0.825920,1.151518,4.316031,3.227495,2.589500,-6.091058,2.242672,3.013057,9.066552,-9.616899,-1.574121,-9.034576,6.178915,6.619757,-8.790334,-0.184120,-3.781402,-9.705301,-0.906466,-8.243766,-2.815267,-3.549179,2.890601,6.452743,5.881175,-6.959799,-2.153699,-4.406540,3.482953,4.818269,-6.758235,5.148796,-6.777212,-6.897929,-6.512218,-8.742147,6.246398,-7.994990,-9.136097,0.553319,8.426603,-7.589027,9.799105,-8.434700,-1.659418,-7.744391,1.063923,3.097699,2.996086,-9.535398,-5.733880,-3.810540,1.966025,7.450910,3.144094,8.069847,-3.508943,-2.356490,-5.430683,3.214341,1.155427,7.100204,6.868118,-1.230830,2.566869,-1.606923,9.287206,1.905830,-9.086222,-1.899483,-2.538747,-6.714317,5.904781,-4.973766,5.630770,0.148626,0.318380,5.267692,4.378946,-5.570668,-4.313611,3.717010,4.829748,-4.261802,9.146287,5.030073,-7.454306,-9.428975,7.542609,-6.201061,-6.163753,7.926680,-2.330334,6.095652,-7.602000,-3.206753,-1.899263,-4.605520,6.912577,6.672360,5.246303,-0.762676,4.711840,-1.997870,5.880891,6.263050,-4.637430,1.327844,-6.127312,-5.797527,-5.760138,8.297929,-3.136679,3.823396,3.035025,-6.098746,6.244013,-3.507340,-2.776583,3.430515,8.233270,2.830950,8.093199,9.559996,8.291763,-0.597913,-4.601253,7.199317,0.051622,-8.735603,8.968164,-2.555552,6.483586,7.391477,0.664341,2.907711,-8.820751,-0.601637,-2.898991,7.860603,5.083700,0.348375,2.849504,8.358677,4.255824,2.854564,-3.606240,-4.958949,2.564958,3.233201,-4.657171,6.666880,-1.467681,0.493324,7.790894,-9.842541,-1.934813,5.502706,-6.055737,1.056511,-0.644299,7.737410,-1.400797,4.839436,9.168932,-3.630435,3.461557,-4.108141,5.588582,-3.951314,-8.694122,9.262078,5.697168,6.816494,2.418384,6.278006,1.063823,8.515584,-5.544416,7.441394,7.654020,-1.978820,-6.484546,-3.146254,-8.963955,-7.603927,-5.702265,9.872120,-2.385892,2.194718,7.671864,-9.741744,2.073695,-0.666168,-0.407433,-8.221875,3.076641,-9.501121,6.110951,5.467696,-9.276763,1.000654,-7.144004,-9.288085,4.754740,-9.207167,-7.400173,7.948142,-0.565582,-4.886411,-3.698422,7.498584,5.088940,3.905196,-8.694787,-0.729693,-5.150514,2.436199,-6.049492,-1.262647,-5.319752,6.080440,7.144740,-9.620209,-9.398938,-9.881095,2.213520,4.215393,8.742099,-5.246364,2.638351,-8.418478,-0.904191,-3.195363,7.213327,-9.516144,-6.395399,1.308829,-8.512020,2.267329,-6.768168,8.435089,6.359745,-3.362625,1.899492,1.054222,4.977466,8.110073,3.211370,-4.209505,-4.096278,-2.404541,-5.008029,-2.260246,-8.198672,-3.830438,5.788575,-3.839910,-5.465939,1.964682,4.270778,-4.460004,9.180422,-2.498992,-5.374634,6.756046,2.106681,8.653220,8.320361,4.013784,9.331254,-6.459438,7.594306,-2.913254,0.683943,-5.348024,-3.747247,2.455116,-8.918995,-1.935873,7.954108,4.909175,-6.690142,-4.104602,-0.911040,4.093380,7.139600,-2.260095,-7.441673,-2.960310,-2.565959,5.801015,-7.851441,-0.641963,-4.793369,9.352647,2.419165,9.354249,8.887991,4.235589,9.736978,6.155523,3.588961,6.874363,-6.827633,4.017149,-7.353249,7.157575,-2.394350,7.109774,4.187653,-2.268256,3.855267,-4.740331,0.765221,-6.036327,-7.745671,-9.748327,1.924987,0.281001,9.529242,4.529691,5.117009,-9.760371,-8.737866,6.310693,-4.046024,-2.032459,0.799971,-9.577106,5.293189,5.998936,4.192832,1.839558,4.176722,-4.557855,8.981752,3.787537,7.320230,-7.780533,7.920198,7.283975,1.037512,-8.258930,-4.415098,-8.343730,5.474730,5.158207,8.467483,-6.219009,9.906329,7.683167,-1.551025,-5.628347,2.016059,8.910907,-5.287681,-2.536739,3.766002,-2.811834,-0.134251,8.264797,-4.530594,-9.842904,4.713368,-2.398200,7.911484,8.961888,-1.334326,0.407628,9.240749,0.410435,4.671602,6.633971,-4.414036,-9.170204,-0.602470,-9.616033,-4.352849,-9.269107,1.140922,8.090015,8.644034,-3.448310,-7.945233,6.961540,5.140050,8.533187,-9.001964,9.421310,-9.192919,4.377032,4.434841,4.911937,-1.538494,5.266826,-6.434518,9.113948,9.843985,-1.467907,2.980886,7.003879,-1.102148,-8.127376,-6.517808,4.458635,0.202068,9.874737,-0.613293,9.791587,5.421490,1.969373,0.640050,2.552438,-9.123179,-7.992550,2.748907,-9.176059,-4.377897,-1.304667,-3.322740,1.553566,9.037444,-5.460232,5.882927,-5.197430,-4.305084,-5.571748,-1.450720,0.659310,3.980947,9.319213,4.664863,-2.148794,-2.720310,-6.485106,-0.271464,-1.280321,1.528519,-2.970476,-1.419917,8.323121,-4.849334,-6.532423,5.150561,5.693239,0.250370,9.202782,9.856869,-8.838489,-0.161886,-0.398520,-8.656382,-2.878415,-9.284302,-0.161036,-6.850108,6.038918,-6.566401,3.401893,6.467353,-3.749317,0.055999,-2.124485,-2.574950,-5.661252,8.907294,2.661965,-3.521040,9.539789,-2.282556,2.735318,9.255020,6.678593,0.594697,9.370399,-5.584302,0.664541,9.301320,-5.952022,4.349353,4.390015,1.483712,-9.405757,-0.015228,-0.099328,-7.437862,3.409370,0.198430,0.920601,-6.975486,2.448992,-6.475155,-8.551218,-5.385487,1.725779,-0.866933,6.720302,-8.654446,6.403796,4.258075,5.967682,2.945031,-7.170914,-2.698837,2.836714,-8.820498,7.587305,-0.897807,5.787654,-9.158847,-7.279910,0.233362,-5.144728,4.388664,-8.166442,-8.812093,-7.913285,9.174226,-1.339218,-7.660334,-9.447209,-7.267486,-9.944594,1.421477,-0.466919,-4.243695,-0.873706,-4.857384,0.589113,-6.799640,-1.526941,-9.423445,4.878719,1.299364,3.209221,3.623968,3.196484,8.177584,-8.034445,8.880128,-7.602438,5.063576,3.978348,5.448010,-1.404358,-7.430314,-8.013325,5.323153,-4.225984,0.321976,1.467809,7.523766,8.699010,-2.351879,-1.722500,-3.675630,4.583978,3.951107,5.595022,-2.498685,0.396592,-8.019498,8.021950,2.946965,4.083637,6.556255,8.500031,9.064935,4.186845,9.084795,3.306058,-0.837178,4.572025,2.705549,-7.533821,-1.306641,-8.948923,-6.503501,5.065390,-0.150716,-9.008988,5.017654,-0.910187,-5.986830,-9.965630,2.990544,9.621453,-8.045039,-7.992763,3.075063,7.170931,-1.424658,3.565375,7.951230,-4.154860,9.477467,7.540084,-6.331462,8.044070,3.549023,-0.246777,3.593919,-0.673415,9.626492,3.271257,-0.660078,-5.250574,-5.793287,6.746444,-3.264650,1.177479,-4.725701,-5.552187,5.504470,-7.079796,0.040354,5.090145,-4.321480,4.472465,-2.336465,6.781422,0.417873,4.053478,2.434104,-8.159991,-5.537168,4.263204,-8.141722,-3.344252,7.623751,6.886302,7.205988,8.759734,-8.652548,6.727577,2.291433,8.841032,3.900878,-7.925575,3.729164,-3.625890,8.210176,7.390819,-4.973521,8.751249,-8.557409,-5.636549,1.494814,3.548137,-8.736002,7.732242,8.869935,1.122998,2.139401,6.917271,-8.823016,4.051137,4.569577,6.264791,-6.041489,0.729052,8.230315,-6.957698,9.092802,7.130655,2.699263,8.743855,5.666537,6.347589,7.398903,-4.157628,-6.822746,4.211796,-1.116816,3.271869,2.760387,1.546101,1.048720,5.264962,4.694421,-5.811830,9.635074,-5.171055,-6.507693,-3.759208,-7.188836,7.913994,-2.289441,2.851914,-8.855373,6.251944,2.266299,-2.554387,-0.142132,-3.791164,-4.924485,-4.362410,-2.769201,4.082330,-3.954526,-1.041922,-9.399925,-0.489157,-8.002496,0.545306,-3.448088,-4.511968,4.049879,-2.785474,3.295261,8.320624,-6.950274,3.787480,-4.466333,9.293039,-8.906057,-8.287335,-6.576824,2.277565,-8.769860,6.752918,0.679029,-9.902986,-5.638436,9.563876,8.027401,-9.465307,-1.346360,7.861762,-7.302993,-6.307849,-6.498117,9.074712,9.564508,-6.934802,2.452914,-6.833216,8.741314,6.497227,-1.115182,0.209966,1.941610,1.382445,-2.508898,6.259848,6.454407,2.107311,-0.727502,-4.507236,-1.114927,8.154151,-5.470245,-9.588654,-2.137583,-3.756482,-6.336001,5.753298,8.816631,-8.751731,0.946330,-7.167710,7.144331,-0.480398,-1.734179,5.666080,8.926070,-1.669300,-0.597470,-7.773416,-3.835591,5.983270,-1.787967,-7.047001,8.882714,4.745608,-5.614673,-1.284183,-9.580640,4.529880,2.527427,9.016621,8.962751,0.790417,-7.517971,6.828575,-6.161189,-7.372520,1.497264,-6.093770,0.400145,4.600715,6.153283,9.186799,-2.468576,-7.265261,9.835640,1.600467,6.484225,-2.644313,-6.564984,-9.554307,4.772862,7.184650,7.409142,0.210615,-1.711810,1.724352,-7.427650,3.503034,2.066076,1.701446,2.456516,-5.621472,7.615624,-2.797362,-0.717198,-3.361933,5.480713,-1.308591,4.069420,9.680791,-8.008691,9.078164,6.081830,3.439916,-7.530480,8.618112,8.952362,-8.979850,9.653129,-3.346062,3.240115,2.538579,2.430823,0.008794,6.258820,-5.355467,6.508514,2.075177,-7.507968,-2.107457,6.475870,-6.035265,0.357206,3.584583,0.246266,-8.414234,-6.221208,-0.273649,3.265405,-9.788868,-3.277400,-0.930861,-7.647583,5.925551,-6.669706,2.299992,2.933242,1.118247,-7.055429,1.915916,-5.827064,-3.606283,0.718430,-2.390406,-0.930828,-2.206784,8.849743,3.275461,-7.791026,-1.772153,-9.936631,-9.324155,2.133208,-1.675546,-9.029417,-6.135652,0.195913,4.111652,3.559942,5.673952,-7.774907,-0.771981,-9.605144,9.583320,-8.631689,0.581128,5.884267,6.124723,4.437701,-7.171608,1.533729,4.545079,7.265551,-1.452439,-4.419924,-8.946054,7.046342,8.885418,-6.783655,-5.490384,-9.240589,2.674555,1.341350,4.003205,-8.765115,-4.089786,-4.885056,-3.785311,-4.052703,-5.346365,-4.956427,8.539445,7.969089,8.193339,9.013655,0.570169,-2.483961,5.167742,5.771895,-8.644305,-9.709101,1.797594,-4.892553,-5.219359,-4.339685,-6.995037,7.232958,-3.592380,-8.984733,3.062308,0.115282,0.436607,5.838626,3.798806,9.364516,5.531226,-0.444850,-4.530277,-4.771228,3.050950,7.346260,-0.585355,5.341132,-0.563057,-3.115747,2.984695,-1.479409,2.983295,9.378669,-1.092674,6.967093,-3.583283,-2.363369,-8.893084,2.937503,-9.624121,0.406828,-9.311373,8.096358,-5.089543,-1.010127,-2.030704,8.215289,-6.739841,-1.443180,2.225118,-9.325378,-4.627618,4.897098,-7.101288,-6.695319,0.559120,9.464158,9.625874,-1.964039,-8.818265,3.049010,6.331407,0.224681,-5.108719,-2.358715,2.042416,1.329349,-5.804220,-2.615790,-4.669941,1.002772,3.511798,6.681332,7.927433,-0.534204,-6.986249,-1.185814,-4.492179,9.210033,-5.257966,5.347509,8.063289,6.159510,2.321374,-3.016809,-3.462259,1.129804,-9.376331], dtype = "float64")#candidate|4264|(1144,)|const|float64
call_4262 = func_2977_call(relay.reshape(var_4263.astype('float64'), []), relay.reshape(const_4264.astype('float64'), [11, 13, 8]), )
call_4265 = func_2977_call(relay.reshape(var_4263.astype('float64'), []), relay.reshape(const_4264.astype('float64'), [11, 13, 8]), )
output = relay.Tuple([bop_4240,bop_4251,call_4254,uop_4259,call_4262,var_4263,const_4264,])
output2 = relay.Tuple([bop_4243,bop_4251,call_4255,uop_4259,call_4265,var_4263,const_4264,])
func_4270 = relay.Function([var_4239,var_4263,], output)
mod['func_4270'] = func_4270
mod = relay.transform.InferType()(mod)
mutated_mod['func_4270'] = func_4270
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4270_call = mutated_mod.get_global_var('func_4270')
var_4272 = relay.var("var_4272", dtype = "float32", shape = (12, 9, 13))#candidate|4272|(12, 9, 13)|var|float32
var_4273 = relay.var("var_4273", dtype = "float64", shape = ())#candidate|4273|()|var|float64
call_4271 = func_4270_call(var_4272,var_4273,)
output = call_4271
func_4274 = relay.Function([var_4272,var_4273,], output)
mutated_mod['func_4274'] = func_4274
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1590_call = mod.get_global_var('func_1590')
func_1592_call = mutated_mod.get_global_var('func_1592')
call_4285 = func_1590_call()
call_4286 = func_1590_call()
output = call_4285
output2 = call_4286
func_4291 = relay.Function([], output)
mod['func_4291'] = func_4291
mod = relay.transform.InferType()(mod)
output = func_4291()
func_4292 = relay.Function([], output)
mutated_mod['func_4292'] = func_4292
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1740_call = mod.get_global_var('func_1740')
func_1741_call = mutated_mod.get_global_var('func_1741')
call_4311 = relay.TupleGetItem(func_1740_call(), 0)
call_4312 = relay.TupleGetItem(func_1741_call(), 0)
output = call_4311
output2 = call_4312
func_4318 = relay.Function([], output)
mod['func_4318'] = func_4318
mod = relay.transform.InferType()(mod)
mutated_mod['func_4318'] = func_4318
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4318_call = mutated_mod.get_global_var('func_4318')
call_4319 = func_4318_call()
output = call_4319
func_4320 = relay.Function([], output)
mutated_mod['func_4320'] = func_4320
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1337_call = mod.get_global_var('func_1337')
func_1339_call = mutated_mod.get_global_var('func_1339')
call_4326 = relay.TupleGetItem(func_1337_call(), 2)
call_4327 = relay.TupleGetItem(func_1339_call(), 2)
func_499_call = mod.get_global_var('func_499')
func_500_call = mutated_mod.get_global_var('func_500')
call_4328 = relay.TupleGetItem(func_499_call(), 1)
call_4329 = relay.TupleGetItem(func_500_call(), 1)
output = relay.Tuple([call_4326,call_4328,])
output2 = relay.Tuple([call_4327,call_4329,])
func_4335 = relay.Function([], output)
mod['func_4335'] = func_4335
mod = relay.transform.InferType()(mod)
output = func_4335()
func_4336 = relay.Function([], output)
mutated_mod['func_4336'] = func_4336
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_4378 = func_2717_call()
call_4379 = func_2717_call()
output = call_4378
output2 = call_4379
func_4382 = relay.Function([], output)
mod['func_4382'] = func_4382
mod = relay.transform.InferType()(mod)
mutated_mod['func_4382'] = func_4382
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4382_call = mutated_mod.get_global_var('func_4382')
call_4383 = func_4382_call()
output = call_4383
func_4384 = relay.Function([], output)
mutated_mod['func_4384'] = func_4384
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1850_call = mod.get_global_var('func_1850')
func_1852_call = mutated_mod.get_global_var('func_1852')
call_4420 = relay.TupleGetItem(func_1850_call(), 0)
call_4421 = relay.TupleGetItem(func_1852_call(), 0)
output = call_4420
output2 = call_4421
func_4441 = relay.Function([], output)
mod['func_4441'] = func_4441
mod = relay.transform.InferType()(mod)
mutated_mod['func_4441'] = func_4441
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4441_call = mutated_mod.get_global_var('func_4441')
call_4442 = func_4441_call()
output = call_4442
func_4443 = relay.Function([], output)
mutated_mod['func_4443'] = func_4443
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2300_call = mod.get_global_var('func_2300')
func_2302_call = mutated_mod.get_global_var('func_2302')
call_4455 = relay.TupleGetItem(func_2300_call(), 0)
call_4456 = relay.TupleGetItem(func_2302_call(), 0)
uop_4459 = relay.asinh(call_4455.astype('float64')) # shape=(1, 9, 13)
uop_4461 = relay.asinh(call_4456.astype('float64')) # shape=(1, 9, 13)
output = uop_4459
output2 = uop_4461
func_4463 = relay.Function([], output)
mod['func_4463'] = func_4463
mod = relay.transform.InferType()(mod)
mutated_mod['func_4463'] = func_4463
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4463_call = mutated_mod.get_global_var('func_4463')
call_4464 = func_4463_call()
output = call_4464
func_4465 = relay.Function([], output)
mutated_mod['func_4465'] = func_4465
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2300_call = mod.get_global_var('func_2300')
func_2302_call = mutated_mod.get_global_var('func_2302')
call_4507 = relay.TupleGetItem(func_2300_call(), 0)
call_4508 = relay.TupleGetItem(func_2302_call(), 0)
func_660_call = mod.get_global_var('func_660')
func_663_call = mutated_mod.get_global_var('func_663')
const_4512 = relay.const([-1.008717,-6.557128,6.274959,1.270533,0.442112,3.222118,-3.929133,-2.998193,-1.441970,7.213256,2.205569,2.133431,-8.890047,3.741577,2.989491,9.881166,-6.483264,2.352652,-1.107796,0.346057,5.964293,-1.429589,7.075568,-1.641346,-9.860472,2.774301,9.097613,2.846300,-7.126979,2.745623,-0.229751,2.115931,8.152077,-5.463581,-3.360244,8.216248,-8.471837,9.265581,-6.127918,8.531821,0.455208,-6.457415,1.483595,5.182592,-6.630182,6.267730,2.604563,-1.826651,7.204886,-9.157627,-3.725963,9.274216,6.015868,-2.358631,-7.244080,-8.978856,-2.182992,-6.223893,0.251537,4.044226,6.862835,-4.459977,-6.526959,6.522832,9.725416,8.755672,5.062105,-9.128334,1.399134,-2.043441,-9.810124,-2.132435,6.688442,-1.214295,-5.769625,-4.847369,-4.134920,-5.433869,4.206215,2.749493,1.879856,-8.181723,4.286801,-7.877917,-6.634420,4.901405,9.383559,5.092472,-8.815814,0.937797,-8.938749,-8.385430,-5.744666,7.092798,-1.990090,-0.337402,8.710112,-0.474853,2.586725,2.995154,1.485357,-3.833346,-5.102493,6.455079,1.200936,4.565157,6.061757,1.823993,-3.113378,7.849264,6.885360,9.191671,7.503850,3.285417,-7.044847,-7.689546,0.002626,-5.374132,-7.346703,0.193936,2.447016,1.606748,-2.771288,-4.754146,9.730930,-8.822237,-6.519779,9.254820,1.297557,-8.159036,-5.713604,-0.438804,-2.414208,4.802040,-5.995329,-4.571413,-5.693790,-2.505803,-7.107923,1.833224,9.040487,-7.571630,4.072705,8.028953,0.309453,-0.362334,-3.981897,8.635834,-0.773668,5.645225,9.430837,-2.483006,-7.828294,2.180819,7.654900,-1.915317,-1.949207,-5.455597,9.585469,-5.799186,-5.058282,-8.666381,2.898198,7.913573,-6.765025,5.698317,-3.086650,1.460961,-0.213067,-0.857288,-3.903436,-1.702455,3.230702,-9.967653,-7.367064,4.511154,-0.105834,6.706259,-5.938460,0.136200,-0.770038,-9.752102,-5.072209,5.523514,-4.093091,-6.944617,-7.846491,9.306094,-2.789818,-8.683045,7.823850,8.079680,3.914294,5.821854,1.919930,8.413120,1.883718,-4.975340,4.497633,0.488420,9.537289,-0.056157,-2.904016,-8.686570,-7.630527,-1.055956,-8.497180,9.650487,-7.528999,8.267142,9.285163,2.674516,7.007581,-0.278023,0.120243,-0.284409,5.528336,0.283854,8.910216,-4.277947,-5.593623,5.099081,-5.267552,3.654545,9.811364,-7.733937,0.575018,-9.761733,-5.207351,7.213008,-0.429031,-5.815663,7.027567,0.542314,7.050887,-8.290846,-2.342218,2.145637,-6.164820,-1.782320,8.286381,-7.540912,-7.669045,2.883832,0.702381,6.538878,6.561875,4.783018,0.398889,6.596223,2.659709,-3.547481,3.345126,-6.780309,-3.506502,5.806406,-4.670238,-6.187482,-9.072572,2.627704,9.467381,4.064202,-4.363645,0.194246,-3.525592,4.126991,-7.950137,2.288062,1.758481,1.477536,-4.734995,1.637552,-5.801089,-5.556107,-8.855641,-7.738012,-1.584659,-2.218447,-9.025581,-7.107029,-2.556236,-4.974335,9.645995,-7.242840,-4.155908,3.020573,-4.910498,9.484620,-2.647204,-4.868758,7.111912,-3.865841,-4.055979,-1.972307,-4.768236,8.872599,-9.443423,6.234033,-9.309257,-8.123624,1.584951,9.926090,9.859258,-9.445927,-9.947115,-6.291364,6.733399,7.338054,1.845719,4.676197,-4.007626,-9.322480,-6.830847,9.890672,2.025361,2.663146,9.662347,-4.214744,4.750774,-5.876315,9.303405,8.091150,-9.603939,2.039496,2.315963,4.332721,6.680658,-5.189986,-4.786528,-5.096284,-9.490322,-2.677003,3.622049,-8.415353,-6.870178,-3.780239,8.655758,-2.405499,4.245912,1.221363,-7.526479,-5.775736,-0.265425,-9.151071,-7.648925,-6.169788,-8.676849,-9.288622,5.501916,4.908730,-8.522472,-0.357755,2.183756,4.223387,-8.783391,6.173219,3.256417,-3.943549,4.124324,-9.625517,-0.616947,-7.764452,-9.554611,-9.766125,6.957709,6.032085,0.099722,4.444648,-0.653855,4.963210,9.262735,-9.053992,2.587286,-4.986758,3.680490,-1.611877,4.130070,-2.695372,-3.932437,5.483793,-1.085769,2.908071,-9.283816,1.044691,4.078388,8.098039,6.844258,5.272975,8.861453,6.949402,9.490659,-5.629081,-9.824994,-6.541214,8.692058,-9.228680,-7.330748,5.934315,-9.536109,3.065213,-4.844546,-7.558261,-4.050045,-6.899558,5.308223,-9.139828,7.031661,4.249339,-0.220740,-2.628133,-6.139316,4.128970,-3.563206,5.512528,5.503038,-9.627085,-1.493782,-2.170993,3.006486,-8.352162,-9.433925,4.944297,9.360292,-0.064658,-5.397619,3.630842,1.568517,8.951754,6.820497,2.239472,8.165948,-3.318013,-9.011278,9.648119,9.733137,5.944225,-3.341679,-9.011280,4.863736,3.148207,1.865910,-5.988768,-8.823298,0.679195,6.928336,-7.410427,-5.589751,-8.897459,2.444431,-1.305600,2.078402,7.908946,-3.608448,2.065010,-2.155801,5.726815,0.236575,-2.759513,4.292734,7.098791,-0.676754,-3.341849,9.935525,-6.824482,-3.813058,8.292665,-7.034644,1.311067,-1.649639,-5.393027,-1.791621,8.336517,-0.869904,4.577602,1.777647,-9.007042,-8.705089,-8.855813,5.400334,3.176023,-1.546727,3.446037,0.320680,4.483122,1.897448,-9.090999,-6.862505,9.168854,5.244669,-9.470078,3.015916,9.609419,9.973854,3.135994,-5.151983,-6.555634,-9.202643,3.128785,3.158831,3.350462,-4.696541,-7.187344,3.148127,3.971262,-2.751951,8.220024,-9.067674,4.806287,9.690805,-0.275816,1.255412,-0.873547,-8.416949,2.007599,-4.283943,-1.420769,-3.665133,2.834292,-8.745489,9.762299,0.399918,7.777411,7.015008,1.317106,5.030236,-8.737932,8.686204,-9.317519,-4.394406,9.006370,8.840476,1.317075,-7.288711,0.460082,-1.042421,6.735436,-5.842555,7.730842,3.985612,-5.943295,1.861560,-3.518999,1.281985,-3.615535,-7.390848,-6.983715,-7.477311,-3.923081,6.771913,7.906441,-7.602218,4.833392,1.820772,-8.640425,8.160896,-1.210926,9.688692,7.571668,2.958167,-9.591036,6.213234,9.031313,-0.599975,-1.785630,-0.898961,9.078135,-0.621596,2.623612,-7.236692,4.566556,-3.514459,-0.507480,-7.102077,-8.601761,9.681753,0.833398,5.265529,-2.334584,-3.787085,0.518408,1.930185,5.692056,2.129371,9.438556,-3.342367,-9.202233,-7.056662,-3.213334,-7.977698,6.131285,0.913477,3.821305,8.468647,5.143162,-4.405424,-0.839442,3.848704,-0.930056,-5.768866,-1.186383,-7.922431,2.001740,7.491073,4.719910,-3.109195,-6.727772,9.716249,5.774097,4.392049,1.447009,3.019604,4.571803,8.310817,-4.466304,-6.216105,7.537323,3.834886,9.966465,-0.989192,-4.667032,2.341670,8.828809,-0.885827,-5.811858,6.126122,-6.132270,8.287460,0.054352,7.671281,2.244284,5.559309,-6.994229,1.535746,4.710067,-5.963749,9.060291,-5.914435,-5.310826,0.958889,1.303700,-1.676487,2.289316,9.616933,2.103201,-3.584219,-0.850811,4.080515,-9.331499,4.244893,-2.686030,-2.121756,3.333309,-2.166500,5.135979,-4.859363,-1.091661,-9.164028,3.120020,0.012437,-9.571233,3.879199,5.194517,6.097992,8.381845,7.626218,-1.791170,5.215936,0.595898,-4.301600,3.876036,5.322341,3.759392,-0.828679,2.186399,8.064727,1.783454,5.762785,5.071079,3.776584,8.998243,1.573833,-3.091858,4.800910,-5.051675,-0.358914,0.762537,-4.754101,-3.571757,5.028464,-1.731192,6.095527,0.085335,-4.751569,-2.587247,2.148730,-5.398972,4.044181,-9.522186,-5.575466,-3.542889,-0.777173,-0.006009,7.386252,3.327931,0.633364,1.118901,-9.631549,3.337806,-8.625754,-4.282890,4.206257,-9.487076,9.731029,0.142132,3.457228,-9.353457,7.191595,-1.691969,7.239083,9.676149,5.735391,-0.073359,2.500074,-8.106292,5.211502,-1.688536,-6.945638,0.244673,4.995170,9.140248,6.625893,-5.483419,9.897453,4.771943,9.643701,4.353762,9.529880,-7.674741,2.177794,-1.865618,4.310554,2.755282,9.968806,9.356954,6.022568,-9.236037,-5.522944,-6.686015,9.801746,9.071169,-9.545398,-4.379691,-9.396657,3.579545,4.104672,-3.499059,-7.090785,-6.353837,-2.491237,-2.508120,6.146910,-0.746738,1.495068,6.091657,-7.817981,1.461704,8.904751,9.416592,-0.705922,6.979494,-1.571467,-2.100807,5.092050,1.788503,-0.585316,6.519296,-3.980820,-1.587412,-7.864824,-1.580234,-0.509663,-5.146356,9.120760,8.013257,-8.530326,-5.925560,-1.324565,9.752739,6.702088,7.226282,-1.423637,7.434466,3.066593,-5.010781,3.288837,-1.261898,9.766332,4.596138,-9.606218,-3.202245,4.010949,-3.963295,-6.812334,6.209743,-7.143336,9.733942,-8.851491,2.125397,-5.915521,3.177591,-4.137694,0.553090,-7.514572,2.803781,9.035483,7.605463,-5.219277,-1.425290,4.192358,-2.725894,4.367040,-4.898031,9.025702,8.027888,-4.719567,5.478043,-4.001325,-3.154906,-2.553400,-2.891719,1.348631,-1.228094,7.738453,-0.004005,7.104348,-5.438424,8.334636,-1.993885,-0.045128,-5.891673,-4.610396,3.013324,5.923916,-7.904378,9.377314,0.228605,-1.699750,-4.177837,0.497165,4.193382,-9.501891,7.092249,-1.765371,-6.441466,4.400473,5.618609,-3.926405,-7.111029,-6.924084,3.986444,2.489025,6.735502,7.882476,0.208894,-8.120825,9.051378,-6.175789,-4.255818,-0.450651,0.802047,-1.532729,2.901730,-0.654024,-0.116583,-5.972743,-0.850851,-2.893682,-6.208367,-4.777514,-8.803370,-1.668187,6.244693,-3.640895,9.756705,-3.784956,-3.140262,-6.625975,8.739658,-3.382124,3.568732,-0.281055,-9.673605,7.071640,-4.813547,2.766119,6.292233,-6.904775,-0.123627,-8.375704,9.416867,7.325414,8.768641,6.485189,-5.219217,-3.048303,9.499388,4.763025,-1.923297,-5.659653,-9.446101,2.292265,5.938773,-8.742572,6.647039,6.378043,4.695904,-4.577352,-0.787489,-4.706427,0.424355,8.608196,7.546391,2.210534,0.773366,-1.253417,3.816216,1.152068,5.369594,-8.248829,8.722471,9.495268,-9.775601,4.064356,9.337553,3.750941,3.489178,5.419172,-1.097204,-4.583892,-2.781514,1.011100,-9.754382,-9.269541,2.609987,-3.289550,9.721673,4.766461,-2.770837,-2.231490,-4.786271,-8.456991,-7.608259,-6.999189,-3.706031,1.380210,4.841988,-0.893240,8.298430,4.873122,-8.230713,5.390527,4.749715,0.084081,-0.259845,-0.917614,-5.803412,-1.402894,-8.301277,0.741265,0.883411,-1.085292,4.892995,-2.633608,5.262543,5.314135,-1.714078,5.278537,-4.709714,2.736951,2.790501,9.907334,-3.826503,-1.147303,5.875498,-0.430481,-2.257775,5.961175,5.701329,6.464045,-1.703582,-4.563682,4.912017,-5.932470,9.702371,-2.248082,7.110170,-7.229938,2.147138,5.508961,-4.314184,4.652271,-1.183598,-1.652064,6.114887,-3.847276,7.629860,-2.376851,2.410969,-9.076223,-3.215369,6.916129,-9.132545,5.947298,-0.911690,-6.863079,-0.959486,-8.750779,0.969202,1.954455,-1.481448,-8.561087,-6.654252,-1.329907,4.863247,-9.642639,-2.915368,-1.322110,9.239332,-9.654483,-7.698884,-5.529168,4.370552,5.999133,-7.044228,6.200473,-1.614312,-7.476704,-4.366197,-9.317231,8.882818,5.494198,-9.434469,-7.978062,8.513832,-3.351482,-3.573279,1.738040,9.650686,-6.346690,8.797252,-6.287351,0.854112,-2.754725,4.478551,4.706648,-0.480916,-0.496541,-0.847508,-9.593053,-2.766542,6.953755,-6.658855,-2.957846,3.250269,2.779343,-9.130618,5.750975,-0.897384,3.649395,-9.981347,-9.995436,3.081585,-8.832772,9.760310,9.084658,4.745878,-1.344101,3.727269,1.681034,9.754083,0.359267,-0.548631,1.888908,5.159888,-0.867557,-4.953643,-5.468342,-3.030792,6.882648,6.297724,6.757128,-9.549175,-4.237101,-6.159844,-1.789682,-9.622757,2.942773,-8.405263,6.933728,4.241028,-1.677211,-1.473775,1.277819,3.986911,2.332270,3.720670,1.674126,-0.091901,-7.148996,5.243858,8.858152,-1.857311,-4.904689,2.009967,-8.765667,0.116081,-0.755878,8.023215,-2.611547,9.917715,-4.971811,-7.216353,-5.380513,0.879750,8.811505,7.938030,5.452525,8.692186,8.606800,2.235998,9.357507,-2.176364,2.297406,9.657380,-4.229914,2.693320,-6.038596,-9.818655,-5.509710,5.966957,-7.940359,-1.948779,-6.203865,7.704051,3.471437,-9.354317,5.813913,-8.445849,-5.183255,0.491684,-4.320676,7.913121,-0.397807,0.861665,-3.816110,4.342506,-9.047917,-5.296073,1.101029,-0.170190,-0.603634,-5.788855,6.292230,-7.524724,-4.558845,-8.648195,-3.201209,8.443327,4.740691,-4.675455,7.956996,-6.249463,6.987639,2.627444,-9.261063,9.775905,-7.696065,-1.202054,9.010496,8.318266,-8.125582,-0.277146,-0.620805,-8.677663,6.647511,9.361472,-7.179888,-4.274389,-3.171351,-5.692093,2.910624,0.561135,8.983840,7.174978,4.362057,8.967125,-0.983584,-0.986354,2.811372,-1.227925,4.772953,-4.035633,9.223048,-6.896361,-8.962863,-6.913746,-1.222906,1.031661,3.801086,-7.188804,2.141972,8.200293,-3.607215,-2.452545,-0.171600,-7.273951,-9.930193,3.034649,2.013053,7.446850,-4.744619,0.890319,-0.222865,9.966786,1.800985,-9.962616,3.524365,-6.324833,1.476733,5.401896,0.393636,-3.486276,-4.107467,7.741290,9.061596,6.436438,-9.401196,-9.092339,5.125565,-6.493636,-7.017125,-1.001605,-9.994775,9.286117,7.238163,7.493150,-4.104210,0.262647,0.437284,-6.037587,6.129286,0.294798,-0.792923,-3.469951,3.217708,-3.630933,7.333588,1.140173,0.960220,-4.539049,4.262100,3.919563,3.283827,6.676856,6.558907,4.351434,5.734851,-2.220481,-9.883327,-1.885002,0.346028,5.056739,7.768864,8.887100,3.011794,8.198354,2.464172,-3.560729,0.829678,-1.621734,8.363272,-7.037832,-8.922851,-3.749503,4.788662,-9.634192,4.052396,-0.573380,-9.626145,7.953706,2.279064,-4.488395,0.516766,3.290721,-4.577681,6.711813,8.130103,5.362600,-9.753505,-3.098841,-7.138368,9.869282,8.132836,-9.669833,0.643395,4.844604,-3.744692,0.965685,2.210522,5.858544,-3.609848,7.400600,-2.961437,8.413836,2.200441,-8.005786,-9.432738,9.498106,4.296653,2.640864,-8.922686,9.833485,1.806440,-5.738436,6.978915,-5.221144,0.671336,2.348779,-7.605634,-9.631322,2.023397,7.024476,-0.856925,2.453157,-1.429345,-4.402852,9.269023,-3.668473,3.978558,4.663002,-7.061385,-0.990829,-0.516404,9.355654,8.182027,-1.943709,-7.366998,-6.432165,-9.985977,8.682572,5.846707,7.815415,9.130928,5.928892,3.286338,-9.819274,-9.326973,2.677434,-6.661598,-7.524465,-0.679964,-9.329754,-6.480461,-8.640445,-4.755635,-2.107001,2.495639,0.838986,3.898047,9.188049,5.479907,-0.362675,9.222082,-2.971098,-8.661021,0.890772,5.176012,9.013956,-7.801244,3.655066,8.758610,-9.614969,1.610718,-8.968715,-4.187240,7.338607,9.056876,-8.495669,9.099376,-8.093591,2.710242,3.480741,-6.827356,-4.274706,-2.202852,5.012267,7.109260,-1.065380,9.972991,8.857941,9.611025,-4.896939,-4.459185,9.946036], dtype = "float32")#candidate|4512|(1404,)|const|float32
const_4513 = relay.const([-3,-8,-6,-10,3,1,10,-3,-7,-4,-2,6,-3,-4,-6,-7,-1,-1,-1,-8,-1,-4,-8,8,5,8,6,-7,-2,2,-7,-6,3,7,-8,-10,-3,10,9,-9,-9,-2,-9,-4,1,1,-6,-8,4,-4,-2,3,-7,9,2,-2,2,-6,6,-2,-9,-7,-9,5,-2,-8,-3,10,-6,10,4,9,-8,9,-6,-3,5,9,6,-9,-4,3,-10,7,-1,-3,9,-2,-8,2,-3,8,-6,-2,-2,-1,10,2,-8,-5,6,-5,-2,3,-10,-6,2,1,-3,-8,-5,-1,-4,4,-4,10,-9,-8,-6,4,7,-10,-4,-5,-3,-1,-4,3,7,-10,8,-2,7,-1,2,8,5,-6,-9,5,-6,2,9,7,-3,-5,-7,10,-9,-8,8,8,-3,10,7,-6,2,-2,1,4,-6,-9,-8,-8,1,7,1,-1,-2,-6,8,4,10,-8,-7,9,1,-8,-6,-7,-2,6,-4,10,2,6,8,10,8,-10,-10,8,-4,4,1,-9,-10,8,4,9,-4,7,-7,-1,-5,-7,10,10,-10,-6,-8,7,9,-1,3,-10,4,-10,-4,-5,-4,6,8,7,-2,10,-7,-9,2,1,9,4,-1,-4,7,-4,2,4,5,9,-6,7,-7,10,-6,7,-4,-9,-5,-10,4,3,1,7,1,-5,-6,10,9,-5,1,-10,-10,2,2,8,-3,2,-8,-1,-5,-6,1,4,-6,-6,-8,-3,-5,-8,6,-3,-8,-4,3,7,-2,-1,-9,-4,4,1,4,2,1,-6,-5,8,5,-10,-7,-8,-10,-3,-4,3,5,-9,1,10,-3,-3,-9,-4,2,5,-2,10,4,2,-10,-5,2,8,9,-7,6,1,-10,-10,-10,10,7,-6,5,10,-3,-2,1,10,10,2,-7,3,-9,-8,7,-1,-9,-7,4,-10,2,-4,4,3,-1,-9,-10,-6,7,-10,-3,1,9,-8,3,2,2,10,-9,-9,10,9,-2,10,10,-4,-2,-4,-10,4,2,1,-1,9,6,10,-10,5,-5,-1,-5,-7,9,8,6,7,5,2,-10,5,1,-9,6,2,1,6,10,4,5,-1,3,8,7,-5,-3,3,8,6,8,-7,3,6,7,5,2,-4,5,5,6,-10,-10,4,5,-2,-9,-5,-2,-8,-10,2,10,-9,2,8,3,6,1,1,-1,10,-2,2,5,-5,-2,9,7,-8,1,6,2,-7,-3,10,1,-1,4,-9,3,5,2,-9,1,5,-3,-4,-4,-7,-9,-10,6,7,7,2,9,9,-1,-8,8,-2,8,-6,-7,1,10,10,5,10,1,-5,-7,-2,5,-9,-5,1,-9,8,-10,3,10,-7,-9,10,9,2,2,-6,-6,-7,8,-6,5,-2,-3,-6,-6,-2,2,-7,-7,-8,-3,-5,9,-1,2,-1,-1,1,-6,9,-1,-9,2,5,6,-8,6,-9,-7,-2,-8,-5,6,5,2,7,4,8,3,5,7,-8,9,9,-8,5,6,8,-6,5,6,3,8,-6,-5,8,-6,-6,-4,3,6,1,-7,-3,2,1,7,-10,7,6,8,-5,-2,1,4,9,1,-1,1,-1,1,4,8,-3,-1,9,2,-6,-3,-10,1,8,-3,10,2,-6,-5,-10,-6,10,-1,7,-2,-10,9,3,-1,-2,1,-8,-5,-7,7,-5,-10,10,-5,7,-9,-6,6,8,2,4,2,-8,10,-7,-3,-10,9,-6,-9,4,9,6,-9,7,-2,7,-6,-1,10,-3,-2,6,7,8,3,1,3,-9,2,6,-8,-10,-9,1,8,-10,9,4,6,-9,5,4,9,-2,1,7,-2,4,-7,-1,-8,-7,-7,-2,-2,-5,-5,7,-4,5,9,-5,-8,-4,-3,-9,-6,-10,5,7,5,6,-10,-3,4,-10,-1,-3,5,1,-2,10,7,10,-4,-1,10,-10,-2,7,-3,8,1,3,1,-5,-6,-1,-7,-5,8,1,-5,10,-5,5,3,2,-7,1,8,-10,-3,5,2,10,-8,-9,3,2,6,6,5,5,-2,1,-4,-4,2,4,1,-5,6,-4,5,7,-5,3,10,1,4,-3,5,-5,9,2,-5,1,-2,2,-2,1,3,-9,-1,8,4,-4,-9,7,-8,7,7,7,-4,-7,2,-6,-1,2,7,7,-9,10,10,5,-6,3,10,-3,3,-3,-9,9,-3,-3,-1,2,1,-8,-1,3,5,3,10,-4,-5,7,3,5,9,6,8,9,-2,-4,-2,-2,-5,-6,10,-7,4,-10,-9,5,-5,-7,-1,-4,-5,-7,5,6,4,-4,-2,1,4,5,8,-1,-10,-8,5,3,-10,9,-10,9,8,10,6,-6,-5,-4,-10,8,5,9,7,4,-2,5,7,-10,7,5,-3,4,1,-1,-4,10,-2,-3,-3,-6,-9,9,-7,1,8,7,-6,-9,10,-7,-6,6,-8,-9,-8,-7,8,-3,6,-8,9,-8,-8,-1,7,-3,-8,3,9,-6,8,4,-1,10,-10,-2,6,5,6,-10,-7,-6,-3,-1,-2,1,-2,6,3,-1,-4,3,4,4,7,3,-9,9,7,-6,8,-8,4,6,-10,10,1,-4,5,-2,-1,6,-3,2,4,-10,-5,5,-2,7,-7,6,2,10,7,10,9,8,3,-4,5,-1,4,-2,-6,-10,5,8,7,7,-2,-2,4,-2,9,6,-4,6,5,-8,-6,2,6,1,8,9,-8,10,2,-1,-10,5,-5,1,1,-1,-8,10,-2,9,-10,1,-9,10,-3,-2,-9,6,-10,-4,-6,9,7,-10,-2,-1,7,-10,1,8,10,-6,7,-3,-10,-1,9,2,1,4,-3,8,7,6,8,3,-4,-9,2,1,8,-8,-3,-4,4,-2,5,7,-7,-3,9,-5,8,7,7,-1,1,3,-2,2,6,-5,1,-4,-4,-3,4,5,3,1,-9,6,-4,4,7,5,10,-4,-9,9,-5,6,2,1,-3,-7,5,-2,2,8,-4,3,-1,4,5,-3,6,2,-1,5,-5,6,-8,2,6,1,1,3,1,3,-1,-10,8,-8,7,4,-8,4,3,-5,-4,-1,10,-10,-3,9,-1,-2,-1,1,4,9,-10,-5,9,-1,8,-9,-6,-1,1,-3,-9,5,-3,-9,4,8,-1,4,-5,-2,-5,-3,-1,9,4,-6,5,6,-8,7,-3,3,-10,-3,-1,7,-7,8,5,-9,9,6,7,-4,-7,8,-9,-3,9,3,-10,-8,1,4,-5,-8,8,-10,6,-3,-8,4,-1,4,4,10,8,-2,7,-8,8,-9,-10,5,-5,-8,9,-8,-10,10,2,7,-9,-10,2,1,3,-8,8,-8,2,-4,9,-9,6,10,-1,-7,-3,-9,6,7,-9,-4,-8,10,8,1,5,6,-1,-1,-3,-5,7,3,7,7,-7,-2,3,7,5,-1,-7,-4,-5,-3,3,-7,5,6,-4,-5,-5,-7,9,10,-1,-4,9,-9,1,3,9,6,9,-5,6,3,-8,-8,4,1,-10,-6,-3,1,6,-9,3,-10,-9,5,-2,7,-1,-7,4,2,4,-2,2,2,7,-4,9,5,6,3,8,-8,-6,6,4,3,6,5,-1,8,10,-10,-6,7,5,-10,10,4,4,6,-7,-7,6,-3,-1,-7,-4,10,-4,-10,6,3,-9,-2,4,4,-6,-6,-5,1,1,6,9,-3,-4,-1,6,-8,1,-9,-7,8,-4,-10,-3,-6,3,10,-10,4,-8,6,-10,-9,6,8,3,-9,-2,7,-9,10,4,3,-2,10,3,6,-2,-6,4,-10,-2,3,9,9,-10,-2,-8,-8,2,-2,4,10,-2,-2,2,3,-2,-10,-6,-1,-10,1,-5,-10,-7,-4,2,-6,-10,-3,2,-8,2,-7,9,-3,10,6,-4,-4,1,-3,2,7,10,6,-6,10,4,-6,-5,1,4,-1,-6,-9,-3,-9,-2,8,-8,5,1,-4,3,8,-9,-5,6,1,-3,10,3,-2,8,8,-6,-4,6,-2,7,9,8,-1,10,-8,-4,-8,8,5,-1,5,-4,6,6,1,9,1,3,-2,6,7,-6,1,4,3,-7,-7,-5,4,-3,7,6,9,-2,4,1,-1,6,-3,6,-10,-4,7,-9,3,8,2,-9,-7,4,-2,5,-1,5,-3,-2,7,9,-5,7,-10,9,-2,5,-1,1,3,7,8,10,3,6,7,-4,-6,2,5,-8,-10,-6,-1,2,-4,-7,-1,8,10,3,-1,-2,7,3,-5,-1,-5,6,6,1,9,6,7,-3,8,-6,3,8,-4,-4,-3,4,3,-5,9,3,-5,5,1,-1,-4,-9,-5,-8,5,7,-8,5,2,2,-7,-7,-4,-4,-10,3,10,-2,-9,5,4,-2,-5,-6,9,8,5,-8,-8,3,7,-4,9,3,8,-2,10,-5,-4,-1,10,-9,-5,-5,1,-2,5,-5,-4,4,6,2,-1,2,9,8,-5,6,6,-4,9,-5,-2,3,-9,-7,5,5,-8,3,4,-7,-10,8,4,5,8,10,-10,-7,9,8,-5,10,-1,1,4,-4,-2,-4,-6,10,9,-3,10,-10,4,-3,-2,-4,-5,8,-4,-8,5,-1,-1,5,10,10,8,8,-9,-4,-5,-2,3,2,2,-4,-1,10,-7,-3,2,6,3,-3,7,3,-6,-2,7,-8,5,-8,8,-10,10,1,-7,2,-3,4,2,1,4,-7,-1,-2,7,-5,-5,-10,-10,-8,10,-9,-5,-10,-2,-5,6,1,-6,-4,-10,-10,5,3,2,4,-1,2,10,5,7,-2,3,-10,4,-6,4,1,-7,-7,-6,-1,-8,3,9,1,1,8,-5,-4,4,-5,-7,10,-1,-3,1,-1,8,-6,3,2,-1,9,1,-4,5,-5,-6,-4,-1,-1,10,-1,8,-5,5,7,10,-1,-9,-5,-6,7,-5,-6,-10,1,1,-8,9,3,1,-1,6,-3,9,-3,8,5,-1,-4,-2,-10,-4,5,4,-9,-8,7,2,-2,7,6,-5,1,-5,-8,-9,-1,9,-8,4,7,8,9,-1,3,-8,5,3,9,2,-7,8,-4,6,7,9,-3,7,1,4,-7,-6,-6,-8,-6,-4,9,-1,-6,-5,8,-6,-5,4,2,9,-2,2,3,-5,-10,2,-1,-4,-1,-2,7,9,-3,-5,10,-2,10,-10,-4,3,-4,-7,9,1,-2,-10,-3,8,-1,8,-10,6,6,4,1,-8,-2,9,6,-3,5,7,4,3,-10,-9,-5,2,-2,-3,-2,7,6,7,-10,-10,8,2,-5,-7,5,-7,10,-2,-6,5,-6,3,-2,3,5,-4,1,2,10,2,5,6,1,-10,-4,4,-1,1,-9,5,8,-4,-7,6,8,-5,-9,10,10,6,7,2,-7,3,-9,-8,8,-7,-2,4,-3,3,-9,-4,5,1,-8,-1,-7,-10,1,-3,-4,5,3,4,-8,10,1,6,-1,-9,-9,-5,5,5,7,-8,-10,7,-4,-1,-9,10,2,8,-1,6,9,10,-9,3,-5,-7,4,8,6,-8,8,-8,2,-8,5,6,-5,10,-1,10,-2,1,-2,3,8,-6,9,-1,-10,-7,10,8,8,-9,-1,-5,7,-8,-4,-8,2,1,8,6,10,10,5,-5,-8,-3,3,-1,-3,1,9,2,-5,-5,-4,8,4,-3,-10,3,-3,4,-4,8,3,5,-1,7,9,-7,-5,-8,-5,-10,-1,2,1,2,2,-3,9,8,6,-6,-7,1,-7,3,-9,-6,7,-4,3,-4,-8,-9,6,9,-5,10,-5,6,-9,6,1,8,-8,-4,10,6,-4,7,6,-5,-10,-3,-3,8,5,10,6,1,2,-6,5,2,-9,-3,-6,6,-1,-2,-5,4,6,7,2,5,5,-8,-3,2,-3,9,-1,-5,1,5,-10,7,5,-6,-1,-2,-2,7,-5,1,3,-5,-2,-5,8,2,-10,-3,-4,1,10,4,-6,-9,-1,8,8,-6,-6,7,10,-1,10,-5,-3,-10,2,4,6,-10,2,10,-3,-4,7,2,-1,-8,-9,5,-1,-4,8,2,1,-2,-2,-7,-9,2,2,-3,-9,4,-8,-9,-4,2,10,10,8,6,-4,-4,4,9,2,-9,-7,-6,-3,-3,-7,-3,-1,-10,-4,-10,1,-1,2,1,4,-4,6,-5,6,-8,-3,1,5,-4,8,-7,-9,-4,-10,6,6,6,-1,-8,7,9,-8,-3,-2,2,-10,-10,1,10,8,7,4,-3,2,-2,-9,8,-1,-2,5,-4,-5,2,8,-7,-7,-8,6,8,5,7,-10,3,6,-8,-1,6,7,-2,-1,1,3,-1,-3,9,8,3,-2,1,4,-1,-2,-1,-6,-5,-1,-6,-10,-3,5,-2,-7,1,3,-9,1,-2,-6,3,-5,10,-9,-8,3,-3,-3,-1,1,-2,-2,-3,-9,-8,-9,7,-1,10,3,-10,-1,-5,7,-5,-6,3,7,2,1,9,3,4,2,6,3,-10,-9,9,2,6,-10,-7,7,3,1,7,-9,-8,6,6,9,2,-2,-8,4,2,5,2,-1,9,8,-6,1,-8,9,4,10,8,6,6,-1,5,10,-7], dtype = "int8")#candidate|4513|(2496,)|const|int8
call_4511 = relay.TupleGetItem(func_660_call(relay.reshape(const_4512.astype('float32'), [12, 9, 13]), relay.reshape(const_4513.astype('int8'), [2496,]), ), 3)
call_4514 = relay.TupleGetItem(func_663_call(relay.reshape(const_4512.astype('float32'), [12, 9, 13]), relay.reshape(const_4513.astype('int8'), [2496,]), ), 3)
output = relay.Tuple([call_4507,call_4511,const_4512,const_4513,])
output2 = relay.Tuple([call_4508,call_4514,const_4512,const_4513,])
func_4532 = relay.Function([], output)
mod['func_4532'] = func_4532
mod = relay.transform.InferType()(mod)
output = func_4532()
func_4533 = relay.Function([], output)
mutated_mod['func_4533'] = func_4533
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_4540 = func_2717_call()
call_4541 = func_2717_call()
output = call_4540
output2 = call_4541
func_4562 = relay.Function([], output)
mod['func_4562'] = func_4562
mod = relay.transform.InferType()(mod)
output = func_4562()
func_4563 = relay.Function([], output)
mutated_mod['func_4563'] = func_4563
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4463_call = mod.get_global_var('func_4463')
func_4465_call = mutated_mod.get_global_var('func_4465')
call_4642 = func_4463_call()
call_4643 = func_4463_call()
output = call_4642
output2 = call_4643
func_4648 = relay.Function([], output)
mod['func_4648'] = func_4648
mod = relay.transform.InferType()(mod)
mutated_mod['func_4648'] = func_4648
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4648_call = mutated_mod.get_global_var('func_4648')
call_4649 = func_4648_call()
output = call_4649
func_4650 = relay.Function([], output)
mutated_mod['func_4650'] = func_4650
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4198_call = mod.get_global_var('func_4198')
func_4200_call = mutated_mod.get_global_var('func_4200')
call_4674 = relay.TupleGetItem(func_4198_call(), 0)
call_4675 = relay.TupleGetItem(func_4200_call(), 0)
func_217_call = mod.get_global_var('func_217')
func_219_call = mutated_mod.get_global_var('func_219')
call_4724 = func_217_call()
call_4725 = func_217_call()
func_2660_call = mod.get_global_var('func_2660')
func_2662_call = mutated_mod.get_global_var('func_2662')
call_4729 = func_2660_call()
call_4730 = func_2660_call()
func_1535_call = mod.get_global_var('func_1535')
func_1537_call = mutated_mod.get_global_var('func_1537')
const_4748 = relay.const([2.119937,-4.654147,5.036071,7.148023,-7.745966,0.076546,-9.568575,3.351730,2.681921,-9.160690,2.713835,-8.253660,-1.258779,0.114904,0.028295,-7.458512,-5.074535,0.112865,0.208579,5.306998,-7.458093,2.558149,-4.148334,-1.227396,5.954469,-5.182320,-9.089318,1.459067,2.045935,-1.661036,5.466100,-1.800900,7.863532,7.562527,-0.058351,5.148449,3.749022,-7.422529,6.040719,-1.268068,5.533086,6.618314,2.499045,-3.646843,7.111255,3.268306,-9.515320,-5.174892,-2.989245,-1.189638,-8.953536,6.187446,-0.687731,6.070951,-3.652818,4.329737,-8.773330,6.912229,0.816915,8.549006,6.488420,6.882205,-6.771665,5.777606,-5.231078,1.775563,2.592029,-7.513995,-9.340098,3.878446,2.106842,-1.458194,9.754896,5.956972,-7.454783,0.822839,-8.335906,8.971171,-9.233636,7.264416,-4.345956,-6.538147,9.673802,8.692468,-7.270831,2.487080,7.190210,-6.064802,2.296648,6.681511,-5.717107,8.260005,-3.421615,0.186091,-2.061305,8.449788,7.645985,-8.498800,-1.946208,6.990727,0.534590,4.294477,-1.331960,7.742235,1.198913,1.539345,-1.199750,-1.485454,4.943475,9.179918,-4.635011,-7.283734,-6.723896,6.529310,2.924845,-9.910263,9.904444,1.088873,8.105050,3.139832,-3.756936,-9.713053,-1.433919,9.875580,-0.833677,1.370709,4.884222,-6.213680,-6.189640,-6.385216,-6.674566,-4.124334,-5.619416,-0.482744,4.091084,2.016534,-9.372490,-8.475142,-6.576335,2.968906,-4.185324,-8.751957,-5.872739,-3.375472,-2.834368,-2.530527,5.856268,-6.837350,7.752952,5.855668,-5.580297,-2.107374,-4.391006,3.732182,-4.973970,1.792658,7.978374,-4.916355,-6.711354,4.953024,6.459065,-3.167852,-8.573336,2.668899,9.406639,-1.270253,6.368355,-5.674271,2.464868,-4.643112,-2.864792,8.157294,2.327703,-0.641109,-4.789414,-5.409278,3.186812,-9.644708,6.029443,4.442178,-9.264246,4.556471,-0.071951,8.267415,0.327263,1.629014,6.481000,-0.367272,-8.791975,-7.189440,-5.975462,7.544762,4.360595,2.432341,5.651526,2.011124,0.171816,1.494413,9.371539,1.994766,-5.498748,-1.295406,1.776652,0.657187,6.067849,-3.244868,-9.294368,-6.279856,3.328927,6.520189,-7.815071,-9.160504,6.339809,-3.233886,-4.485262,8.809867,-5.642806,-6.215159,-1.871217,-9.883119,-0.017714,1.670105,-8.520547,-7.922475,-8.704862,-4.218045,5.161228,-9.035582,-4.244210,7.456833,-8.036604,7.367294,-9.160614,4.113209,0.922611,2.543361,-0.852043,6.084399,-8.252793,6.230381,7.326068,9.228422,-7.314797,5.158895,-5.726153,-7.295250,9.405322,-3.162443,6.869165,7.068280,0.972082,-6.904097,5.778930,-3.957684,-4.590988,-6.114255,8.693860,-4.602565,7.402619,-1.103310,-6.313071,9.299680,-0.172993,1.246774,6.881977,9.881690,0.084492,-7.259882,5.445258,-8.194580,-4.770981,5.228410,6.548587,-4.245890,5.476254,-4.002313,3.443567,7.463860,9.352358,0.923024,8.177822,9.583898,7.500474,-1.278193,-6.971525,-3.749340,2.345250,-9.077921,3.650947,-2.179897,8.881406,-8.684503,-0.119247,0.268474,-1.809185,-2.087479,9.966095,4.969730,7.953262,0.640802,-5.805709,3.406813,6.657343,-0.482934,-6.601253,6.051815,-8.671283,-4.302565,8.698140,-7.158974,-7.687184,-2.978324,5.164566,-1.233001,2.693747,-0.243891,0.071526,3.760486,-2.408564,8.042384,-1.027317,-0.152088,-3.129582,7.118614,-6.529459,-2.894063,-4.057447,-9.209085,-3.508431,3.378145,-8.448217,5.024687,8.257678,-0.502663,4.662816,-5.349917,-6.291532,-3.599394,2.527486,4.619430,0.467251,-7.121332,-8.380537,9.586975,-2.689461,-7.760317,7.100609,-8.586318,-2.458325,-0.591123,2.616680,-5.604359,2.320456,-3.698706,-4.455137,7.011556,7.037119,-7.262834,-3.787923,-0.148617,-8.764410,-7.316647,1.679131,-7.545560,8.402841,6.657907,8.248202,6.738548,-3.219957,5.918345,1.353403,-9.269595,-3.466273,-4.068718,7.972531,1.973844,5.850331,3.163807,1.176022,-8.259894,-1.739631,7.762734,9.099933,-8.650433,-1.329105,5.941793,-6.336006,5.499661,-2.861058,-0.976555,-3.051791,2.456657,8.849537,-8.844677,-0.150366,8.826419,-3.945694,-4.194853,4.482427,3.195089,-9.610621,2.567146,1.223893,4.932832,-4.196089,2.805517,-7.394996,-5.207922,4.556110,-3.706715,-8.567404,-0.724156,-1.622526,-8.414909,3.129481,8.417610,-7.566146,4.866661,0.549833,2.389092,-2.533009,4.469131,5.996280,-6.830803,-5.977705,-0.450406,-5.901276,-6.222677,8.263344,2.470950,-0.146272,-4.833284,6.186611,-9.559008,6.369486,2.088849,-5.448507,-1.181743,-0.823548,-8.229834,1.954624,3.497519,2.192390,-6.994468,4.634675,-8.464452,-6.344857,-3.364706,-2.686298,0.377459,9.921786,0.408165,9.497344,3.405484,-1.625544,-9.974200,4.563400,4.047738,8.297656,4.245152,1.301832,5.405772,5.480158,-2.993954,-0.045157,5.646008,-4.670433,-8.476990,-0.104576,3.880524,5.904119,-3.219310,-5.892807,-0.548990,2.756459,-0.008777,7.771907,-0.071966,2.193407,-5.485958,-0.084926,0.807453,-2.806698,-5.920144,-2.451614,0.214007,-8.115191,-1.019267,3.178495,-9.245831,-9.502308,-0.911293,-8.430037,-4.914265,1.472125,-6.335571,-5.407269,-2.847780,2.012619,4.240775,-2.488624,9.461003,-0.081415,1.734259,-7.078084,-7.663323,-3.349499,-8.120856,-3.219464,2.815006,4.829687,9.073160,8.225052,-0.751150,7.583663,-0.755174,-0.936767,-2.039341,9.398454,3.226130,4.361989,7.812278,-2.839049,5.735530,-8.125866,-9.253284,-1.378390,-0.389396,0.641194,-0.462200,-5.230469,-2.050416,-1.057729,-1.757789,1.284840,-7.055683,2.830037,-6.971159,2.362774,-2.831881,-5.493545,-0.332041,8.878274,0.783201,1.634207,5.151221,-3.405885,5.266347,-3.661561,2.883246,7.839591,-5.497928,6.384327,-7.119201,-4.560257,-8.201905,4.141916,6.866702,1.844642,5.632191,-3.160331,8.775066,-8.127529,-1.022711,-6.474502,-9.004863,1.667110,-9.863644,-3.806385,0.295361,-2.244621,6.285289,-6.361118,-5.062741,0.227670,6.904999,-4.533570,1.438305,4.567868,3.687964,4.227979,2.283109,-3.580380,1.950478,-6.000368,-0.075380,-3.788988,-6.885780,-4.326927,1.598963,-8.809082,-9.519519,6.290835,1.652806,4.410961,-7.294308,3.832898,0.641456,7.288431,-4.889237,7.996491,-8.831425,-7.377638,3.109987,9.614375,9.725107,6.360349,-7.450562,3.472027,7.288195,-8.050321,3.420662,5.211823,-8.749360,4.265775,-4.086256,5.694596,-9.714835,8.548110,-4.867557,-6.970570,-8.098015,4.340306,-7.464491,-0.320786,5.711518,6.285146,-4.397747,7.163667,-6.632133,9.631586,-3.948432,0.496690,0.106350,-0.337590,-2.697289,1.054122,-0.557352,0.523161,3.643282,-7.435121,4.038843,7.305976,-4.269132,-0.494113,2.995808,8.812904,-4.677812,-4.919988,7.341061,0.284904,-3.049227,-3.865309,-8.573694,0.590256,6.105755,-4.217460,-1.652268,9.885895,6.225419,6.071699,8.167013,-6.406715,7.760355,3.037215,0.817187,-6.431918,0.252267,-5.964349,3.978574,6.540972,7.915177,5.392082,0.204476,-0.869342,-9.109555,8.658349,-5.059407,7.898172,3.207016,-7.784541,2.493587,-7.490593,0.169801,-1.809854,-4.486622,4.407464,-4.992157,5.788053,6.359676,-4.315608,5.785793,-2.899443,9.128765,-6.800506,-0.090469,5.222362,1.009918,3.566271,-6.504030,4.539615,4.866828,-6.022799,9.601213,-6.637325,9.190866,-6.416434,-6.322649,-6.399905,-0.275842,-0.050196,7.191349,9.182775,3.228938,9.466287,-7.153801,5.664548,4.391393,6.464923,4.555649,-0.631835,-1.655050,-2.986696,2.296968,-5.224993,0.716607,-9.132696,-0.222475,1.895963,-7.630591,2.849689,-8.070973,5.147895,-9.281897,-1.832527,-9.790594,-1.561507,-3.121555,2.579835,9.259343,5.471700,5.903303,5.084775,4.394316,4.060290,2.363880,1.929218,3.420181,-2.879561,1.738218,-5.031448,7.578613,7.086680,6.212364,1.286104,-7.124261,0.779681,-7.172498,-6.341504,4.889483,-9.119217,-7.956831,-6.422074,-1.293324,-2.137616,-1.787262,7.988074,7.621051,8.296534,2.155495,-7.293271,1.025717,1.767804,-7.042528,-3.226922,-5.283875,7.333293,-4.070156,-2.309571,-6.211121,-2.279940,6.142615,-9.201442,-2.487544,0.784934,-3.851646,-9.032295,0.940783,4.322883,2.286581,-7.729259,-5.189997,-6.850423,5.006030,7.834398,5.998771,-8.650135,6.667088,-8.237963,-6.457407,-1.353098,5.807923,0.311857,-5.759863,-4.242358,-2.403999,0.086471,-2.322325,8.425649,9.077990,4.020988,-2.248616,2.031648,-3.719141,-9.677941,-7.905359,5.580061,1.076062,-0.544629,-6.631570,3.201919,4.158347,3.230386,-3.988047,-4.177630,-7.863753,1.226214,3.405772,-0.458273,-3.388884,2.978016,7.269973,-7.413655,1.104050,6.949802,1.331500,-2.096901,3.085933,4.242049,-8.525696,7.283101,3.939388,8.751988,-2.896156,0.217723,-0.638286,9.739770,7.561313,-7.050916,-6.498084,-5.883933,-1.485132,0.835998,9.208875,-8.053580,-9.646039,-1.447794,-0.506542,-9.123270,6.700604,1.286318,-6.522858,-6.338162,-8.545490,-4.943234,-9.296629,-9.226403,7.725843,-8.269084,-0.728944,-6.571675,0.284688,3.316340,9.898364,-9.174088,7.914238,-2.625542,-0.918114,6.935052,-6.061787,3.459298,5.886111,3.448438,5.933200,2.923887,-7.105084,-0.646153,-0.914545,2.817168,-5.212418,-3.981764,6.769524,8.928162,5.031437,-8.324555,7.818793,-0.956368,-5.092809,0.971118,-9.122091,9.771145,5.025224,-9.162187,7.252161,5.053568,4.061457,3.015643,-6.961519,-3.516088,-9.235661,8.752697,-4.016219,-8.390207,-9.310076,6.264743,-0.506451,0.544688,-6.173002,2.066128,-1.073479,4.081573,-9.002387,-3.149693,-6.494370,6.329239,-1.718244,-8.458462,-9.224460,2.000182,-0.919722,3.104257,9.675884,-0.898636,-6.147401,-4.362052,-3.171849,-7.640714,-4.193546,-3.925949,5.040695,0.454738,-4.637077,4.970428,-0.717320,1.138004,9.015357,6.763679,-4.332037,-7.457043,4.337854,4.738232,6.234075,7.467943,-5.456759,-0.182411,3.509167,7.184780,4.989401,-7.014733,4.110040,-3.680096,5.394169,-7.870188,-2.353107,-9.686040,9.149180,9.081295,-7.773902,-0.746181,-0.607802,-1.381246,3.097410,-8.927899,-9.885229,-6.253207,-6.494348,-0.678617,8.829604,8.348731,-0.475940,4.248047,4.667715,-2.309269,2.961121,7.616200,2.110310,0.869180,0.890995,3.748455,0.148048,-3.378552,-0.892224,3.281963,1.106836,2.419425,-8.312624,7.150947,-9.642203,3.475028,-1.837410,9.045597,7.291784,-8.812828,-2.626280,-9.724705,-2.481828,-3.089299,-1.924856,-6.966735,-7.547273,2.400227,-7.941264,1.579502,-2.630985,5.665426,2.354485,-8.845108,2.354568,0.444916,-6.370743,9.075740,-8.316637,2.622406,9.262326,-1.821131,-3.083395,6.458266,-8.636279,6.743126,2.271881,-1.557326,0.672184,8.479735,0.872560,5.410903,0.738937,-4.111268,-9.802085,-3.214322,9.380407,3.302626,-9.878907,0.783792,6.597716,4.247940,5.282030,3.833182,-2.465061,1.663034,-1.795334,3.400876,-8.751691,4.446551,9.450775,-0.192096,7.556482,-7.407483,-6.467715,-3.723459,-3.857947,3.749022,9.579061,4.657319,5.057110,-9.233535,4.604122,0.403719,3.444875,-3.379808,-5.355088,-5.486906,-1.707919,4.825295,-2.939196,9.547069,9.054838,-3.248102,5.831749,-8.626824,-9.383396,-7.234477,-5.533646,9.970769,5.502609,6.637013,4.104850,3.325168,-3.658220,-0.750703,-1.943827,-3.589009,-4.988704,6.191800,-1.081197,9.381445,-9.704846,-9.073757,2.664841,-6.868760,9.714357,6.472291,3.161644,-2.133816,2.634290,-5.803267,-6.538993,-3.750635,5.297448,7.514943,8.264872,3.961472,-4.081520,5.683049,8.614328,-0.606767,5.468344,5.108212,-8.182569,-5.212346,4.802440,-4.322456,2.971963,-3.608827,-2.057619,-7.149337,-5.657608,9.211800,6.181515,3.648017,-4.841321,8.833203,4.501373,7.996113,3.075085,4.242864,-3.129280,-1.821038,-0.141881,4.590356,-5.516158,6.373418,8.437203,-3.024458,0.595948,8.235265,8.793691,1.856587,-8.687105,3.884843,-2.312890,-6.117415,-6.967051,1.112888,5.066039,3.930641,-0.181454,9.740517,8.385333,1.975988,2.521977,-3.458121,2.927461,0.900436,-4.051936,6.119177,1.743751,-9.411402,4.961309,6.253352,-6.779775,-9.396122,1.892357,-1.034748,5.002694,9.707626,-4.098172,-2.247487,2.346586,5.977757,-2.560080,-1.261072,-4.081233,2.183673,-9.031030,1.509758,4.849384,-9.266137,1.008571,4.900802,-5.423405,1.844871,-7.614460,-7.152903,1.552723,-3.356851,0.564401,2.457428,8.289514,7.138088,0.906480,-0.055457,-0.840638,0.603012,8.498174,2.853807,2.603143,-7.629327,-9.595641,0.138328,7.810289,2.332649,2.812979,-7.184826,9.428115,-4.917594,-3.842040,0.267772,9.375413,-9.888366,2.866572,-4.752233,-1.476040,-5.016012,-7.564187,-6.801993,8.477762,-7.583745,9.449159,2.324801,-7.781079,8.884617,-9.842928,0.557527,-5.035604,-2.254892,2.892818,-7.291663,-8.728022,-7.148126,5.907619,-7.630981,-5.797487,4.127414,1.791442,-3.545580,-2.941451,9.116900,-1.267415,2.400678,-9.444406,-6.856642,-5.632407,-8.678771,-4.598723,5.667335,7.383354,-4.559298,-6.286806,3.791176,2.288481,3.149105,-1.455869,-4.237302,-9.803559,2.505837,-6.915017,-9.439836,-3.859577,9.733886,-9.172071,-4.783296,-7.191385,4.575755,-3.737605,-4.227231,1.855485,-9.279437,-8.662512,-2.382197,-6.946857,-8.049344,-8.739303,5.116305,6.162195,6.839926,-1.835886,5.925977,-9.181659,7.190583,-4.656898,-9.478807,-4.615411,3.047891,-8.247935,7.990880,8.440534,7.961271,-1.932455,-0.218882,5.551345,9.656530,-6.946050,-0.860680,-4.348711,3.499646,3.411209,-7.353373,-7.289271,9.477441,9.741926,0.615828,-5.215356,-4.478802,-1.170871,-2.487437,-6.870191,9.242294,-9.442542,-5.296395,1.242497,3.551399,1.141809,-8.277229,6.734429,-5.829664,-1.001927,4.869244,-4.835034,-2.306664,2.972609,-5.111420,-8.124156,-7.402918,5.651370,6.925280,-2.133800,-4.332893,-8.788728,-0.166762,-7.245984,2.582625,-7.887940,6.337636,-4.213825,7.916888,-9.488800,-2.268530,7.108693,6.707971,8.412103,-5.726158,-3.600253,9.118926,6.518785,-9.245943,9.318023,1.655682,9.230573,-7.613564,-2.129352,0.258090,-4.931949,9.423864,-2.697263,-6.282718,-7.674680,2.670398,3.152066,0.981627,-6.746581,-2.653371,2.047998,-6.150128,-6.225669,7.356028,-9.093840,1.038771,-5.634445,8.362256,-6.547637,-8.437502,-6.722067,8.681012,-2.885383,-1.992300,-8.696396,-4.247138,-8.505501,-2.092199,-7.122641,6.112462,-1.743689,0.173797,-6.057967,9.281095,-6.785727,0.374692,-0.319517,0.621582,1.392668,8.041162,-4.664497,-6.427974,-7.429841], dtype = "float32")#candidate|4748|(1404,)|const|float32
call_4747 = func_1535_call(relay.reshape(const_4748.astype('float32'), [12, 9, 13]))
call_4749 = func_1535_call(relay.reshape(const_4748.astype('float32'), [12, 9, 13]))
output = relay.Tuple([call_4674,call_4724,call_4729,call_4747,const_4748,])
output2 = relay.Tuple([call_4675,call_4725,call_4730,call_4749,const_4748,])
func_4766 = relay.Function([], output)
mod['func_4766'] = func_4766
mod = relay.transform.InferType()(mod)
mutated_mod['func_4766'] = func_4766
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4766_call = mutated_mod.get_global_var('func_4766')
call_4767 = func_4766_call()
output = call_4767
func_4768 = relay.Function([], output)
mutated_mod['func_4768'] = func_4768
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1440_call = mod.get_global_var('func_1440')
func_1442_call = mutated_mod.get_global_var('func_1442')
call_4769 = relay.TupleGetItem(func_1440_call(), 0)
call_4770 = relay.TupleGetItem(func_1442_call(), 0)
output = relay.Tuple([call_4769,])
output2 = relay.Tuple([call_4770,])
func_4778 = relay.Function([], output)
mod['func_4778'] = func_4778
mod = relay.transform.InferType()(mod)
output = func_4778()
func_4779 = relay.Function([], output)
mutated_mod['func_4779'] = func_4779
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1290_call = mod.get_global_var('func_1290')
func_1291_call = mutated_mod.get_global_var('func_1291')
call_4791 = func_1290_call()
call_4792 = func_1290_call()
func_2240_call = mod.get_global_var('func_2240')
func_2242_call = mutated_mod.get_global_var('func_2242')
var_4796 = relay.var("var_4796", dtype = "float32", shape = (585, 3))#candidate|4796|(585, 3)|var|float32
call_4795 = relay.TupleGetItem(func_2240_call(relay.reshape(var_4796.astype('float32'), [1755,])), 0)
call_4797 = relay.TupleGetItem(func_2242_call(relay.reshape(var_4796.astype('float32'), [1755,])), 0)
uop_4799 = relay.log(call_4795.astype('float32')) # shape=(1755,)
uop_4801 = relay.log(call_4797.astype('float32')) # shape=(1755,)
bop_4805 = relay.not_equal(uop_4799.astype('bool'), relay.reshape(var_4796.astype('bool'), relay.shape_of(uop_4799))) # shape=(1755,)
bop_4808 = relay.not_equal(uop_4801.astype('bool'), relay.reshape(var_4796.astype('bool'), relay.shape_of(uop_4801))) # shape=(1755,)
output = relay.Tuple([call_4791,bop_4805,])
output2 = relay.Tuple([call_4792,bop_4808,])
func_4822 = relay.Function([var_4796,], output)
mod['func_4822'] = func_4822
mod = relay.transform.InferType()(mod)
var_4823 = relay.var("var_4823", dtype = "float32", shape = (585, 3))#candidate|4823|(585, 3)|var|float32
output = func_4822(var_4823)
func_4824 = relay.Function([var_4823], output)
mutated_mod['func_4824'] = func_4824
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4834 = relay.var("var_4834", dtype = "int64", shape = (14, 12, 2))#candidate|4834|(14, 12, 2)|var|int64
var_4835 = relay.var("var_4835", dtype = "int64", shape = (14, 12, 2))#candidate|4835|(14, 12, 2)|var|int64
bop_4836 = relay.add(var_4834.astype('int64'), relay.reshape(var_4835.astype('int64'), relay.shape_of(var_4834))) # shape=(14, 12, 2)
output = relay.Tuple([bop_4836,])
output2 = relay.Tuple([bop_4836,])
func_4850 = relay.Function([var_4834,var_4835,], output)
mod['func_4850'] = func_4850
mod = relay.transform.InferType()(mod)
mutated_mod['func_4850'] = func_4850
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4850_call = mutated_mod.get_global_var('func_4850')
var_4852 = relay.var("var_4852", dtype = "int64", shape = (14, 12, 2))#candidate|4852|(14, 12, 2)|var|int64
var_4853 = relay.var("var_4853", dtype = "int64", shape = (14, 12, 2))#candidate|4853|(14, 12, 2)|var|int64
call_4851 = func_4850_call(var_4852,var_4853,)
output = call_4851
func_4854 = relay.Function([var_4852,var_4853,], output)
mutated_mod['func_4854'] = func_4854
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4890 = relay.const(-1, dtype = "int32")#candidate|4890|()|const|int32
var_4891 = relay.var("var_4891", dtype = "int32", shape = (11, 10, 11))#candidate|4891|(11, 10, 11)|var|int32
bop_4892 = relay.right_shift(const_4890.astype('int32'), var_4891.astype('int32')) # shape=(11, 10, 11)
output = bop_4892
output2 = bop_4892
func_4897 = relay.Function([var_4891,], output)
mod['func_4897'] = func_4897
mod = relay.transform.InferType()(mod)
mutated_mod['func_4897'] = func_4897
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4898 = relay.var("var_4898", dtype = "int32", shape = (11, 10, 11))#candidate|4898|(11, 10, 11)|var|int32
func_4897_call = mutated_mod.get_global_var('func_4897')
call_4899 = func_4897_call(var_4898)
output = call_4899
func_4900 = relay.Function([var_4898], output)
mutated_mod['func_4900'] = func_4900
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3346_call = mod.get_global_var('func_3346')
func_3347_call = mutated_mod.get_global_var('func_3347')
call_4912 = func_3346_call()
call_4913 = func_3346_call()
func_2331_call = mod.get_global_var('func_2331')
func_2332_call = mutated_mod.get_global_var('func_2332')
call_4914 = relay.TupleGetItem(func_2331_call(), 0)
call_4915 = relay.TupleGetItem(func_2332_call(), 0)
output = relay.Tuple([call_4912,call_4914,])
output2 = relay.Tuple([call_4913,call_4915,])
func_4916 = relay.Function([], output)
mod['func_4916'] = func_4916
mod = relay.transform.InferType()(mod)
output = func_4916()
func_4917 = relay.Function([], output)
mutated_mod['func_4917'] = func_4917
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1850_call = mod.get_global_var('func_1850')
func_1852_call = mutated_mod.get_global_var('func_1852')
call_4962 = relay.TupleGetItem(func_1850_call(), 0)
call_4963 = relay.TupleGetItem(func_1852_call(), 0)
func_3870_call = mod.get_global_var('func_3870')
func_3873_call = mutated_mod.get_global_var('func_3873')
const_4965 = relay.const([6.047131,-0.474078,-6.799189,-9.906069,3.455674,-5.075193,7.107416,-0.661987,-7.965566,6.355918,-7.296189,-8.376872,0.759856,4.222356,8.904228,6.459153,-5.949391,4.505957,2.921751,-9.588076,8.377129,-3.345874,1.305520,-2.873857,-4.698985,2.338461,-7.419461,-9.817745,-9.956503,-4.923313,-2.266751,-9.595479,6.132167,9.783786,9.923179,4.347395,-5.458482,6.856243,6.469933,0.699062,4.748183,-1.052678,-7.375231,-9.693501,-3.901096,-1.962930,-0.630008,0.577253,-5.172007,-8.198384,-7.378286,-7.020790,5.297896,-1.883850,5.479119,-3.940604,6.673303,-2.150540,4.913324,-4.966467,3.396798,-0.333315,5.608809,5.579520,-6.073190,7.047450,-9.249069,7.760519,-4.933039,-0.258344,4.796274,-6.407742,2.549683,2.686521,0.034698,8.793321,-7.282743,-8.431620,9.727007,-5.169131,2.099858,0.578960,7.662134,-5.054796,-3.963654,-9.794742,0.555793,-6.882277,6.164890,-0.624275,5.683741,-5.662827,5.431870,4.824236,-4.087784,0.056386,-6.781082,0.028976,8.491775,5.081380,-2.006507,-1.510803,-5.850812,1.072886,-4.363323,8.515339,8.122495,9.796613,-7.912584,0.602155,-8.535521,1.581089,7.650619,7.740630,-2.976892,3.403166,-7.264588,-3.141194,-5.236128,-8.084362,5.536512,8.954491,6.183782,-8.560756,0.651761,7.471959,-5.760639,-1.858517,3.085681,-4.020227,-4.863562,7.172486,5.161222,-0.188352,5.590716,-5.563046,-3.782676,5.398648,6.847341,5.130728,1.702327,-0.007886,3.956755,-9.767017,-9.262265,-7.406576,-7.322039,9.425388,-3.806081,4.270555,7.483725,-6.153852,3.684775,5.471612,2.519836,-7.297417,6.434997,-7.191109,0.957323,-6.863542,-5.129904,1.224055,-5.470288,-7.264399,-6.120882,-8.918984,-3.129737,2.187318,-0.743129,-3.353345,6.328308,-7.248658,7.208241,-0.863761,3.684078,9.472154,9.458319,-2.619525,3.735721,-6.240865,6.688988,2.156007,-7.535661,8.626075,-7.176562,-2.730077,-9.511420,-5.102350,-9.107554,3.305469,2.377383,6.110926,0.287057,-3.124476,-7.208866,-4.700255,7.330475,9.876873,-5.873772,-3.522395,-6.746189,-4.604705,-6.731602,9.937279,1.817320,-3.023898,6.790144,-9.670588,-5.288364,2.480885,7.590922,-8.115449,-3.608715,-6.217217,-9.776248,0.284906,-9.435884,-8.174884,-7.256198,0.426220,-1.099705,7.074876,2.727999,-0.363641,-3.140117,-1.366042,8.386010,0.415565,1.335559,-5.981929,-9.692871,-2.000147,1.582926,3.623027,-0.105413,-1.749996,2.955708,-0.631847,0.729702,-4.231269,7.327680,2.534784,8.759784,-1.658944,9.832293,-2.477546,-5.304075,-5.291803,2.945093,2.116418,-9.995869,-1.265443,8.937422,-3.549789,2.768864,2.127222,3.865020,7.725222,9.167202,1.503195,-8.341549,-3.188409,6.768265,9.083185,9.518840,-3.224480,-1.981767,9.823433,-2.366431,-2.779570,-1.042326,-5.340317,-9.957866,-9.064924,9.370278,-8.526492,9.261248,-8.632646,9.129870,-0.014491,-0.022062,-2.871730,1.786267,9.413258,1.202946,-0.490347,3.867720,-8.925378,-2.477399,7.614546,-7.293982,-9.388728,-6.490654,-9.295286,-9.261555,-6.334362,-7.161456,8.037684,-7.207013,8.172165,-6.557890,1.837441,-5.172366,1.492959,-9.239392,-3.064475,0.427620,3.023512,7.105420,1.937510,-0.560861,-1.058093,5.785938,-0.861450,-3.369419,2.283583,9.287390,-6.534123,-4.588385,4.836100,-6.741864,-4.899350,-5.592240,-2.935913,5.594413,2.946618,0.375875,-2.701129,9.055746,1.282131,-1.169203,-0.943996,8.498144,6.240757,-7.908492,4.438875,-9.527028,-7.515953,9.356630,-3.849643,5.353416,-3.580562,-0.213666,3.106635,8.271706,3.616855,8.899975,-4.649123,8.430142,2.372493,-6.339492,-4.602707,-0.283956,6.251207,3.781799,-1.994111,9.899710,-0.328876,-3.348313,8.447128,-5.906398,7.572150,-4.263553,-1.376028,-3.444847,2.069559,-3.188512,4.803839,0.656951,-7.715528,3.755621,2.034705,9.124106,-0.997892,3.749111,-4.716302,-2.899632,5.712954,5.145902,-0.430491,9.620901,-2.303281,-9.728451,-3.789925,-3.378278,-8.488440,-0.734438,-4.363823,9.851342,4.818565,-1.694561,-8.419941,0.710181,8.698092,-8.479032,-9.493956,5.459942,9.453838,3.684047,6.736898,6.229020,6.314837,6.309879,2.367023,-3.600261,7.999822,-0.960429,1.201737,-8.812393,-7.919106,6.301776,-7.651045,0.490942,-6.498427,-3.705226,-8.086324,0.629802,3.319238,7.250428,-2.648028,4.865809,-1.359800,5.257826,5.839091,-5.413007,-7.602200,5.662696,4.671261,6.261142,0.925853,4.281951,3.189920,0.773462,-0.781266,3.110688,-1.393548,-0.284075,9.828651,-9.111994,8.587101,-3.163277,-4.684119,2.505317,6.648651,0.296989,-9.798601,-9.184837,-3.165949,-2.248332,9.342685,0.181945,-8.408871,-5.364171,2.067272,-9.052986,-2.779529,0.104830,-8.114168,-1.090357,0.018228,-9.177192,-2.441861,1.842816,-6.547805,8.137690,8.820332,9.635562,5.091014,3.476222,2.198735,6.213631,1.833164,-7.458227,2.100270,1.502004,7.900132,-0.836675,-9.120969,-5.217019,9.901163,-4.490656,-3.959380,-7.796714,-7.697629,-2.493636,-7.183958,3.486780,-5.422194,3.072665,-0.321984,-1.906892,7.331688,0.066622,-3.455599,-9.692884,-2.477778,5.223156,5.381589,-8.417687,3.769117,7.786194,-6.529978,3.842371,-9.845470,2.303510,3.054359,-4.262188,-8.229423,8.915208,2.544613,0.290077,-1.583655,-1.723883,-1.628697,9.746838,-6.143463,1.028121,8.649134,4.100180,-8.492071,-1.379881,9.313939,-4.933306,9.843538,-6.563607,6.754815,-4.777116,-0.610745,3.818114,7.984986,0.252979,9.327155,-5.458862,3.629677,2.418676,-8.610347,-9.291403,-8.557844,-5.279570,-2.293601,6.147275,-7.221185,9.765088,-6.846260,4.084870,-0.759007,4.104675,-3.304706,-4.374923,-9.796891,3.107778,-2.221765,-5.276114,-2.415853,-4.764413,4.456440,-0.027715,4.089288,0.352867,2.851981,6.511471,8.412739,6.394250,-8.277252,5.763336,2.049855,-2.901505,-7.530736,3.769156,8.070500,2.827490,0.014766,-3.394609,-2.695828,-1.186943,-2.385503,0.718070,9.104446,0.160397,-7.129369,-2.472682,6.511496,8.935610,7.858546,-0.512353,-7.977267,4.382814,-9.925869,-4.145615,7.745631,-0.979879,-8.970865,9.568157,-0.165209,-4.708274,-0.521286,3.609017,5.746410,6.609384,8.876931,0.497834,-0.197582,5.743977,-7.199076,6.781784,-8.686922,0.341438,8.947916,-4.676851,-5.335327,-2.874885,5.411666,-8.897079,8.172594,3.112847,-4.610670,-1.572982,-8.842212,7.905838,-1.583628,-4.568478,-5.128678,9.553122,9.683751,1.726276,-9.574402,-7.284576,1.139330,-3.096795,-0.118775,9.133069,-2.653598,0.028712,4.024226,7.726536,7.579902,6.956130,-8.253120,3.261347,-5.304375,6.610608,0.722860,6.733417,-9.233568,6.344601,5.440787,8.196535,-5.540625,-8.593127,3.212822,1.239640,-1.402051,-1.728303,-0.506532,-1.997883,1.861352,0.298065,6.649629,0.345251,0.973907,-7.406145,-6.684327,-4.832946,1.856178,-2.945201,2.752933,7.367949,-0.963348,-5.576191,-4.210433,-8.369319,-9.975208,-5.827685,-4.912284,9.276272,-4.782003,-6.001197,-3.502135,7.240157,-8.758184,-7.314342,-6.454166,2.769950,-7.316144,0.848200,-7.495556,-3.619899,6.336527,-6.326595,-2.324510,2.495588,3.300233,8.299533,0.653390,0.679895,3.319360,8.497055,-1.510198,-0.572742,-5.425575,0.951970,8.257170,5.032553,-8.117960,-8.165660,7.582507,5.572797,-0.950264,-8.613427,0.674427,9.031569,-2.427771,-1.542611,9.407603,9.013081,-5.623848,-9.637887,-6.531376,7.834862,8.212194,7.749470,4.783584,8.772589,-8.337713,0.128994,-8.190566,-0.951385,7.782041,9.891404,7.551213,-9.583175,3.419662,-0.509506,-2.134638,-0.604528,8.694544,7.551088,-2.234788,-7.055527,-4.922397,-1.351267,-1.513553,2.252762,-2.810647,-3.442198,8.182254,6.601927,4.355929,-4.061671,8.202940,7.159097,1.101255,-8.575117,-5.814454,-2.915420,-9.165187,9.720179,6.709583,9.052581,9.995949,5.306312,-8.793170,9.274961,-7.346491,-5.457846,-1.624537,1.571375,-3.171334,2.605518,-3.843560,7.690933,-5.692910,-0.968340,-2.225897,5.004229,7.560325,-8.281401,-7.530683,-5.805818,-2.036648,-9.854061,-8.531996,-1.595646,6.048785,9.969900,2.208360,6.781279,5.548772,2.829793,1.634384,7.027180,2.191589,-2.818663,1.224055,2.670571,6.447824,-7.626071,5.075166,-7.205369,-3.725921,-6.287748,8.811459,-1.300966,7.759602,-6.237040,-1.997363,-6.207701,5.414465,5.912708,8.172887,-6.992690,0.045641,-5.734449,7.262392,6.987111,0.963447,9.708848,6.429200,2.623601,7.635268,1.401125,-1.646766,-3.332771,4.038143,-6.504565,-1.703025,8.811559,-9.204482,-5.089980,4.076133,6.305409,4.192791,6.471263,-5.610498,-8.389506,-4.748402,-3.031656,3.289986,-4.599828,-8.402132,5.687740,-0.418954,-1.688540,-6.493972,-8.625078,2.924142,-8.656470,1.059216,3.466790,3.014207,7.832500,-8.271041,-9.793824,-1.678937,-2.831452,5.274597,4.423642,-0.886435,-9.538336,-0.989049,-0.722908,0.016185,1.702850,-8.620014,-8.576187,-0.415380,7.817518,7.176322,-8.446181,1.338452,2.914130,-2.517041,-0.725207,-9.941280,1.927072,3.202244,-2.365443,5.240232,1.227003,9.508673,6.934003,-7.628244,-5.885652,-3.769324,2.942104,7.739483,-3.428528,-3.765565,-4.413682,-5.338136,9.715847,-7.138477,-2.826600,3.989302,4.191895,7.680117,-9.525633,-5.013322,-1.508666,8.204463,-1.809187,-6.498332,-1.164095,7.699297,8.547941,4.430414,1.017912,9.735680,3.260270,-6.675715,8.559504,1.785048,6.631914,-7.286838,-9.584283,2.870255,-5.914988,2.818773,-1.588697,0.062627,-6.623651,4.517318,-3.545779,7.680820,5.756441,6.186564,-2.834717,7.962960,-8.397967,3.234175,2.053782,4.798206,-9.552069,4.441020,6.607150,-0.959117,3.146563,5.327188,-4.227600,8.554281,-9.913930,-1.662737,0.487598,-0.960868,9.315318,-0.019097,7.915974,-9.448615,-5.086428,-1.317022,8.010188,-5.253632,-2.454145,-7.904088,-7.146607,4.633838,-5.636241,7.221564,2.153981,4.490907,4.286787,6.981607,6.193071,-3.063482,3.887433,8.900580,-3.678531,8.345380,-5.964002,0.170756,7.496255,0.907597,6.594739,3.197784,0.070032,8.723757,-4.463176,5.638549,0.509591,-5.336293,-7.998865,8.756949,1.205026,-2.084275,-3.876589,-9.815995,-5.884847,-7.081411,4.509276,-2.144532,-1.682563,3.976201,-2.546147,9.048920,9.925341,7.754330,9.055567,-5.750907,6.477309,-3.960845,-5.206891,-1.779850,6.551142,-8.369761,-7.475631,2.382684,9.693016,-8.513003,8.427557,2.383877,1.280549,-7.742978,4.764378,1.295121,8.883039,-5.110343,-4.445209,-5.566178,6.236746,-2.389837,1.684416,2.737608,4.578578,9.722353,3.936868,2.683312,7.032562,8.012656,-9.871962,6.583246,3.884921,9.032274,-9.613409,1.336039,4.483681,-4.639148,0.455157,8.592089,0.482304,7.779883,6.663297,5.495544,-7.116601,6.236919,3.434068,3.870763,-2.826039,-7.440621,-1.882684,6.417694,-7.313865,3.829663,0.952377,-5.253876,5.695026,6.363485,-6.125037,3.593505,9.186823,5.190780,7.195087,5.742653,2.299034,8.065764,7.796213,4.211318,-9.834945,5.810848,3.119101,-6.545026,3.294601,3.509166,-4.667237,9.734910,4.278844,-3.154408,0.627821,3.470540,9.628443,-5.401826,2.008436,-5.780022,-6.787745,9.848198,1.707987,-5.302923,0.651598,-6.162982,-0.821783,1.673650,-2.348017,3.411789,-4.223332,5.823985,5.040690,-1.640803,8.541160,-7.680303,3.242339,-7.157250,8.926465,3.410821,-4.544714,-1.801254,0.543329,8.601651,8.210126,6.036825,0.289130,1.963694,7.454881,0.118198,4.369872,-8.738854,0.723847,4.384215,-1.732421,1.162526,3.762810,1.026602,7.217915,-8.289894,4.786682,-0.671432,-4.652111,7.629492,-4.292363,8.644377,-3.993226,-3.137778,-4.361146,-4.066278,-0.027260,5.620727,0.959275,5.377767,0.652346,3.679291,6.866118,8.164559,-3.118639,1.154732,2.335007,-2.157731,1.114503,4.108854,-9.294200,-0.124119,8.272003,-5.876405,-5.748329,-3.117218,-0.531912,0.154487,2.341205,3.531032,6.902862,-9.262302,2.248814,1.238445,6.779149,-9.479217,-7.891334,6.176973,2.279862,7.586712,8.728874,6.021262,4.581679,0.083082,-2.148351,-8.871525,-8.684743,-5.992376,6.933121,-9.663800,9.717553,9.687690,0.641269,7.088479,-4.064146,-9.623682,-9.992844,3.272110,-5.417062,4.764304,-5.473849,9.754035,-8.549976,-4.279992,2.366660,5.182144,-2.331872,-9.173426,4.334564,-3.914811,-8.316887,5.185162,-3.413211,4.994807,0.796992,9.897155,-5.745826,-8.683086,9.117595,5.343998,2.014546,0.130120,3.185447,6.504953,3.853790,-8.136229,9.160139,6.647245,8.978653,-8.278128,8.242706,-0.221698,-5.522628,-8.089893,8.927625,-6.061324,-5.541087,-1.656525,-4.398112,-2.553665,2.541279,5.086918,-0.179517,3.492414,5.509886,8.798615,9.388311,6.850792,-9.618407,9.849433,2.852597,6.771616,5.672325,5.757933,3.693178,-8.640754,-5.186404,0.298001,-7.639053,-0.417326,7.173868,-1.606341,0.294145,-7.031579,1.556864,-4.903515,-8.224174,4.001577,6.992123,6.539858,-2.751403,-7.862037,6.988680,-2.430493], dtype = "float32")#candidate|4965|(1260,)|const|float32
var_4966 = relay.var("var_4966", dtype = "uint32", shape = (54, 26))#candidate|4966|(54, 26)|var|uint32
call_4964 = relay.TupleGetItem(func_3870_call(relay.reshape(const_4965.astype('float32'), [12, 15, 7]), relay.reshape(var_4966.astype('uint32'), [1404,]), ), 10)
call_4967 = relay.TupleGetItem(func_3873_call(relay.reshape(const_4965.astype('float32'), [12, 15, 7]), relay.reshape(var_4966.astype('uint32'), [1404,]), ), 10)
output = relay.Tuple([call_4962,call_4964,const_4965,var_4966,])
output2 = relay.Tuple([call_4963,call_4967,const_4965,var_4966,])
func_4976 = relay.Function([var_4966,], output)
mod['func_4976'] = func_4976
mod = relay.transform.InferType()(mod)
var_4977 = relay.var("var_4977", dtype = "uint32", shape = (54, 26))#candidate|4977|(54, 26)|var|uint32
output = func_4976(var_4977)
func_4978 = relay.Function([var_4977], output)
mutated_mod['func_4978'] = func_4978
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2331_call = mod.get_global_var('func_2331')
func_2332_call = mutated_mod.get_global_var('func_2332')
call_4987 = relay.TupleGetItem(func_2331_call(), 0)
call_4988 = relay.TupleGetItem(func_2332_call(), 0)
var_4991 = relay.var("var_4991", dtype = "float32", shape = (7, 9, 13))#candidate|4991|(7, 9, 13)|var|float32
bop_4992 = relay.less_equal(call_4987.astype('bool'), var_4991.astype('bool')) # shape=(7, 9, 13)
bop_4995 = relay.less_equal(call_4988.astype('bool'), var_4991.astype('bool')) # shape=(7, 9, 13)
output = bop_4992
output2 = bop_4995
func_5008 = relay.Function([var_4991,], output)
mod['func_5008'] = func_5008
mod = relay.transform.InferType()(mod)
var_5009 = relay.var("var_5009", dtype = "float32", shape = (7, 9, 13))#candidate|5009|(7, 9, 13)|var|float32
output = func_5008(var_5009)
func_5010 = relay.Function([var_5009], output)
mutated_mod['func_5010'] = func_5010
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5032 = relay.var("var_5032", dtype = "float64", shape = (16, 7, 3))#candidate|5032|(16, 7, 3)|var|float64
uop_5033 = relay.log2(var_5032.astype('float64')) # shape=(16, 7, 3)
output = uop_5033
output2 = uop_5033
func_5055 = relay.Function([var_5032,], output)
mod['func_5055'] = func_5055
mod = relay.transform.InferType()(mod)
mutated_mod['func_5055'] = func_5055
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5056 = relay.var("var_5056", dtype = "float64", shape = (16, 7, 3))#candidate|5056|(16, 7, 3)|var|float64
func_5055_call = mutated_mod.get_global_var('func_5055')
call_5057 = func_5055_call(var_5056)
output = call_5057
func_5058 = relay.Function([var_5056], output)
mutated_mod['func_5058'] = func_5058
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5060 = relay.var("var_5060", dtype = "int8", shape = (10, 2, 4))#candidate|5060|(10, 2, 4)|var|int8
var_5061 = relay.var("var_5061", dtype = "int8", shape = (10, 2, 4))#candidate|5061|(10, 2, 4)|var|int8
bop_5062 = relay.minimum(var_5060.astype('int8'), relay.reshape(var_5061.astype('int8'), relay.shape_of(var_5060))) # shape=(10, 2, 4)
uop_5066 = relay.sinh(var_5060.astype('float64')) # shape=(10, 2, 4)
uop_5068 = relay.log10(bop_5062.astype('float64')) # shape=(10, 2, 4)
bop_5078 = relay.greater(uop_5068.astype('bool'), relay.reshape(uop_5066.astype('bool'), relay.shape_of(uop_5068))) # shape=(10, 2, 4)
func_4075_call = mod.get_global_var('func_4075')
func_4078_call = mutated_mod.get_global_var('func_4078')
var_5098 = relay.var("var_5098", dtype = "float32", shape = (1404,))#candidate|5098|(1404,)|var|float32
call_5097 = relay.TupleGetItem(func_4075_call(relay.reshape(var_5098.astype('float32'), [1404,])), 3)
call_5099 = relay.TupleGetItem(func_4078_call(relay.reshape(var_5098.astype('float32'), [1404,])), 3)
func_1440_call = mod.get_global_var('func_1440')
func_1442_call = mutated_mod.get_global_var('func_1442')
call_5104 = relay.TupleGetItem(func_1440_call(), 0)
call_5105 = relay.TupleGetItem(func_1442_call(), 0)
func_2505_call = mod.get_global_var('func_2505')
func_2506_call = mutated_mod.get_global_var('func_2506')
call_5108 = relay.TupleGetItem(func_2505_call(), 0)
call_5109 = relay.TupleGetItem(func_2506_call(), 0)
uop_5117 = relay.atanh(bop_5078.astype('float32')) # shape=(10, 2, 4)
bop_5120 = relay.multiply(uop_5117.astype('int32'), relay.reshape(uop_5066.astype('int32'), relay.shape_of(uop_5117))) # shape=(10, 2, 4)
output = relay.Tuple([call_5097,var_5098,call_5104,call_5108,bop_5120,])
output2 = relay.Tuple([call_5099,var_5098,call_5105,call_5109,bop_5120,])
func_5128 = relay.Function([var_5060,var_5061,var_5098,], output)
mod['func_5128'] = func_5128
mod = relay.transform.InferType()(mod)
mutated_mod['func_5128'] = func_5128
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5128_call = mutated_mod.get_global_var('func_5128')
var_5130 = relay.var("var_5130", dtype = "int8", shape = (10, 2, 4))#candidate|5130|(10, 2, 4)|var|int8
var_5131 = relay.var("var_5131", dtype = "int8", shape = (10, 2, 4))#candidate|5131|(10, 2, 4)|var|int8
var_5132 = relay.var("var_5132", dtype = "float32", shape = (1404,))#candidate|5132|(1404,)|var|float32
call_5129 = func_5128_call(var_5130,var_5131,var_5132,)
output = call_5129
func_5133 = relay.Function([var_5130,var_5131,var_5132,], output)
mutated_mod['func_5133'] = func_5133
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4291_call = mod.get_global_var('func_4291')
func_4292_call = mutated_mod.get_global_var('func_4292')
call_5175 = func_4291_call()
call_5176 = func_4291_call()
func_2300_call = mod.get_global_var('func_2300')
func_2302_call = mutated_mod.get_global_var('func_2302')
call_5186 = relay.TupleGetItem(func_2300_call(), 0)
call_5187 = relay.TupleGetItem(func_2302_call(), 0)
func_2610_call = mod.get_global_var('func_2610')
func_2611_call = mutated_mod.get_global_var('func_2611')
call_5194 = relay.TupleGetItem(func_2610_call(), 0)
call_5195 = relay.TupleGetItem(func_2611_call(), 0)
func_3004_call = mod.get_global_var('func_3004')
func_3006_call = mutated_mod.get_global_var('func_3006')
call_5197 = func_3004_call()
call_5198 = func_3004_call()
output = relay.Tuple([call_5175,call_5186,call_5194,call_5197,])
output2 = relay.Tuple([call_5176,call_5187,call_5195,call_5198,])
func_5207 = relay.Function([], output)
mod['func_5207'] = func_5207
mod = relay.transform.InferType()(mod)
output = func_5207()
func_5208 = relay.Function([], output)
mutated_mod['func_5208'] = func_5208
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4778_call = mod.get_global_var('func_4778')
func_4779_call = mutated_mod.get_global_var('func_4779')
call_5213 = relay.TupleGetItem(func_4778_call(), 0)
call_5214 = relay.TupleGetItem(func_4779_call(), 0)
var_5220 = relay.var("var_5220", dtype = "float32", shape = (11, 9, 13))#candidate|5220|(11, 9, 13)|var|float32
bop_5221 = relay.right_shift(call_5213.astype('int8'), var_5220.astype('int8')) # shape=(11, 9, 13)
bop_5224 = relay.right_shift(call_5214.astype('int8'), var_5220.astype('int8')) # shape=(11, 9, 13)
output = bop_5221
output2 = bop_5224
func_5243 = relay.Function([var_5220,], output)
mod['func_5243'] = func_5243
mod = relay.transform.InferType()(mod)
mutated_mod['func_5243'] = func_5243
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5244 = relay.var("var_5244", dtype = "float32", shape = (11, 9, 13))#candidate|5244|(11, 9, 13)|var|float32
func_5243_call = mutated_mod.get_global_var('func_5243')
call_5245 = func_5243_call(var_5244)
output = call_5245
func_5246 = relay.Function([var_5244], output)
mutated_mod['func_5246'] = func_5246
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3134_call = mod.get_global_var('func_3134')
func_3135_call = mutated_mod.get_global_var('func_3135')
call_5262 = relay.TupleGetItem(func_3134_call(), 0)
call_5263 = relay.TupleGetItem(func_3135_call(), 0)
func_4897_call = mod.get_global_var('func_4897')
func_4900_call = mutated_mod.get_global_var('func_4900')
const_5268 = relay.const([-2,-7,-9,-6,7,1,-6,-8,-1,-2,5,8,-10,-10,3,-9,10,-5,-6,-5,-3,-6,-1,3,7,2,-7,7,3,10,-1,-2,-4,10,-10,-3,-5,1,-3,8,2,-2,-10,6,8,-1,2,10,10,8,-6,2,1,-7,-10,6,7,-8,-7,-2,10,-4,7,-10,3,-7,-8,10,4,4,2,-5,6,-6,8,9,-1,10,-8,-5,8,-2,2,-6,1,2,7,-2,1,-7,-8,-8,-1,5,1,-2,1,-7,-8,-1,10,2,-3,10,4,4,6,-9,2,-6,-5,4,-2,10,4,7,-7,1,3,3,-9,-9,10,-1,5,9,-8,5,6,10,-9,1,-7,-3,4,-10,-4,9,1,8,9,-6,-10,9,-6,-5,-7,10,-1,-6,10,1,7,10,1,-3,-7,9,10,5,-6,-1,-9,7,-6,4,-9,2,4,-5,1,-7,-7,-6,-6,-2,-1,7,6,9,-9,9,-7,-5,2,8,-7,10,5,10,-6,6,-7,-7,-1,8,9,-9,6,-9,-3,10,4,-2,5,-2,6,10,3,10,-4,-3,4,1,-5,8,7,-7,-7,2,1,-7,-2,-2,-4,10,-9,-5,4,-2,-6,4,-8,6,10,-9,4,9,3,-4,4,-9,4,5,-7,4,9,7,-10,3,5,-4,10,-6,7,-3,1,-5,3,-2,8,6,-7,-5,7,1,-1,-10,10,-7,-5,9,10,2,5,6,3,3,4,-9,5,1,-6,-1,7,3,-6,-10,8,10,6,-9,7,-9,7,1,9,-1,5,9,-8,5,-9,-10,7,-2,-7,1,10,-6,1,2,1,3,3,-9,-8,-7,-1,6,9,10,9,-2,5,-10,5,-4,-5,-6,1,-1,2,-8,5,1,-3,1,-2,1,-1,4,2,4,-7,6,-6,8,5,2,-1,-5,2,6,-9,5,-9,7,7,9,-4,1,-1,9,-7,9,4,2,-2,-3,-5,-2,-5,6,-2,5,1,7,5,10,-9,-9,5,-10,-10,-7,-1,-9,-7,10,3,7,-1,6,2,-7,-6,-5,-8,5,10,-4,10,9,2,9,3,7,-8,-10,-10,-3,-3,-9,-3,-10,-8,-4,-10,6,-10,-5,-10,-9,-7,1,7,-6,-10,3,9,6,2,6,5,-3,-8,10,-3,6,-9,9,-1,-8,10,-4,-7,-6,4,-10,-5,-4,3,9,-4,-10,-4,-10,-6,5,10,-6,-2,5,-4,5,-9,-2,-4,2,8,2,1,-6,-8,2,10,4,-10,-10,-5,-6,5,-1,-1,-6,5,2,7,4,6,-3,5,10,6,2,6,-6,-9,7,-9,10,10,1,-9,5,2,4,3,3,-6,9,-6,-1,3,7,-3,-8,-9,2,-6,5,-5,5,5,-7,6,2,-2,-9,5,9,-2,-2,-7,-1,3,1,7,6,-6,4,9,-6,-3,10,-10,5,-5,5,1,-5,3,10,1,-3,-9,9,-5,2,9,-3,2,-4,-4,9,6,10,9,1,-8,-7,1,6,10,-5,2,9,-7,1,2,7,-5,9,-8,3,5,4,5,-4,-10,5,9,5,7,-7,9,10,2,-9,-8,-8,-4,8,2,6,3,5,-7,7,-8,6,-2,-1,-4,7,-3,-6,9,8,-8,-3,-8,-4,-9,-9,-9,6,1,-6,-8,-8,1,-9,8,10,-2,8,3,4,-6,1,-10,-7,-4,6,7,4,8,8,1,-3,-3,4,4,10,-5,-5,7,7,-4,-3,9,-1,-1,10,-9,6,3,-9,-9,6,9,-8,3,10,-8,-8,-10,-3,-10,-2,5,10,-7,-8,-10,-10,-8,-7,-4,6,-10,1,5,-3,-7,3,-3,4,2,8,-6,2,7,-3,-6,4,-7,-8,-9,7,-5,1,-3,-10,7,-8,-4,-7,8,3,2,10,4,-2,-6,-10,7,-1,-6,-7,8,-8,-4,5,-8,7,-6,9,-4,3,-8,-3,6,-7,-4,9,-10,4,3,-7,8,1,1,-3,1,-7,1,-7,-3,-1,-1,-8,-7,-4,-2,1,4,-3,4,-2,-2,-5,8,-9,-6,-7,-1,9,-7,-10,5,8,-5,-6,5,-3,4,9,10,2,-10,-5,6,-3,-7,2,4,3,9,6,7,2,-9,-5,10,-5,8,3,3,7,-9,-2,-8,-10,-4,4,10,-5,6,-6,-7,7,2,-9,6,-7,-4,-5,5,3,6,1,1,2,5,-4,-10,8,-10,1,3,-10,8,-1,-5,-2,-2,-4,10,2,4,8,4,-10,-10,-10,-8,2,-8,-10,-9,-1,-7,6,10,5,-4,10,8,2,-2,3,-7,-7,-7,-7,9,-9,-4,6,-3,-10,3,-4,-1,-8,-3,4,-3,-4,-7,-9,2,5,-1,1,-3,10,4,-6,4,-9,-5,4,3,-10,-10,7,7,9,-6,-3,-3,4,8,-2,3,9,4,6,3,6,-5,7,-8,9,9,2,6,1,3,6,5,-2,1,6,3,9,-8,7,3,9,-9,-5,-4,-9,-10,-5,-2,-5,6,-7,5,5,2,-9,-2,-8,9,4,-2,2,-7,8,-3,-2,-6,8,-7,-7,8,6,4,9,-9,-9,-5,2,8,-3,5,-10,6,-4,-10,2,7,-6,-3,-6,-9,5,4,7,-9,2,8,7,-9,-9,-4,-9,-10,-3,1,7,-2,5,2,-9,4,5,5,-6,-4,5,5,-8,8,-7,-1,-8,-7,-3,7,-9,5,-1,-9,5,3,3,4,4,-3,1,-5,8,-4,-2,5,9,9,-10,-10,-2,-5,-2,6,-10,-7,4,-4,6,7,8,-1,-2,1,-1,-7,6,9,10,4,-6,-5,-4,7,6,8,-6,4,-1,7,8,6,5,-3,-1,-7,9,1,2,1,-2,5,-2,-3,6,7,-4,-9,8,-6,-9,8,-6,1,-5,-7,5,-4,-10,10,-8,9,9,3,-10,-6,3,-8,1,8,-6,-4,4,10,6,10,-6,-8,-5,-4,-1,5,-4,-2,4,2,4,3,-5,-1,-2,7,-10,-4,-7,1,9,-1,-8,-10,2,2,-10,-3,7,-8,-5,-6,-9,1,9,3,7,-2,4,7,4,1,6,8,7,10,-8,-10,-9,2,-2,-7,-8,6,-9,-9,6,-6,5,-6,8,8,-4,-5,-9,8,-4,2,4,-6,-5,-7,-9,3,-4,6,-5,-8,-3,10,1,-3,5,-9,-7,1,1], dtype = "int32")#candidate|5268|(1210,)|const|int32
call_5267 = func_4897_call(relay.reshape(const_5268.astype('int32'), [11, 10, 11]))
call_5269 = func_4897_call(relay.reshape(const_5268.astype('int32'), [11, 10, 11]))
uop_5272 = relay.sin(const_5268.astype('float64')) # shape=(1210,)
output = relay.Tuple([call_5262,call_5267,uop_5272,])
output2 = relay.Tuple([call_5263,call_5269,uop_5272,])
func_5283 = relay.Function([], output)
mod['func_5283'] = func_5283
mod = relay.transform.InferType()(mod)
mutated_mod['func_5283'] = func_5283
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5283_call = mutated_mod.get_global_var('func_5283')
call_5284 = func_5283_call()
output = call_5284
func_5285 = relay.Function([], output)
mutated_mod['func_5285'] = func_5285
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4441_call = mod.get_global_var('func_4441')
func_4443_call = mutated_mod.get_global_var('func_4443')
call_5289 = func_4441_call()
call_5290 = func_4441_call()
func_2205_call = mod.get_global_var('func_2205')
func_2206_call = mutated_mod.get_global_var('func_2206')
call_5320 = func_2205_call()
call_5321 = func_2205_call()
func_547_call = mod.get_global_var('func_547')
func_552_call = mutated_mod.get_global_var('func_552')
const_5324 = relay.const(2, dtype = "int8")#candidate|5324|()|const|int8
var_5325 = relay.var("var_5325", dtype = "int8", shape = (2496,))#candidate|5325|(2496,)|var|int8
call_5323 = relay.TupleGetItem(func_547_call(relay.reshape(const_5324.astype('int8'), []), relay.reshape(var_5325.astype('int8'), [624, 4]), relay.reshape(var_5325.astype('int8'), [624, 4]), ), 2)
call_5326 = relay.TupleGetItem(func_552_call(relay.reshape(const_5324.astype('int8'), []), relay.reshape(var_5325.astype('int8'), [624, 4]), relay.reshape(var_5325.astype('int8'), [624, 4]), ), 2)
output = relay.Tuple([call_5289,call_5320,call_5323,const_5324,var_5325,])
output2 = relay.Tuple([call_5290,call_5321,call_5326,const_5324,var_5325,])
func_5329 = relay.Function([var_5325,], output)
mod['func_5329'] = func_5329
mod = relay.transform.InferType()(mod)
mutated_mod['func_5329'] = func_5329
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5330 = relay.var("var_5330", dtype = "int8", shape = (2496,))#candidate|5330|(2496,)|var|int8
func_5329_call = mutated_mod.get_global_var('func_5329')
call_5331 = func_5329_call(var_5330)
output = call_5331
func_5332 = relay.Function([var_5330], output)
mutated_mod['func_5332'] = func_5332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4441_call = mod.get_global_var('func_4441')
func_4443_call = mutated_mod.get_global_var('func_4443')
call_5339 = func_4441_call()
call_5340 = func_4441_call()
output = call_5339
output2 = call_5340
func_5352 = relay.Function([], output)
mod['func_5352'] = func_5352
mod = relay.transform.InferType()(mod)
mutated_mod['func_5352'] = func_5352
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5352_call = mutated_mod.get_global_var('func_5352')
call_5353 = func_5352_call()
output = call_5353
func_5354 = relay.Function([], output)
mutated_mod['func_5354'] = func_5354
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4766_call = mod.get_global_var('func_4766')
func_4768_call = mutated_mod.get_global_var('func_4768')
call_5361 = relay.TupleGetItem(func_4766_call(), 2)
call_5362 = relay.TupleGetItem(func_4768_call(), 2)
output = relay.Tuple([call_5361,])
output2 = relay.Tuple([call_5362,])
func_5369 = relay.Function([], output)
mod['func_5369'] = func_5369
mod = relay.transform.InferType()(mod)
mutated_mod['func_5369'] = func_5369
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5369_call = mutated_mod.get_global_var('func_5369')
call_5370 = func_5369_call()
output = call_5370
func_5371 = relay.Function([], output)
mutated_mod['func_5371'] = func_5371
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3582_call = mod.get_global_var('func_3582')
func_3583_call = mutated_mod.get_global_var('func_3583')
call_5378 = relay.TupleGetItem(func_3582_call(), 0)
call_5379 = relay.TupleGetItem(func_3583_call(), 0)
output = relay.Tuple([call_5378,])
output2 = relay.Tuple([call_5379,])
func_5381 = relay.Function([], output)
mod['func_5381'] = func_5381
mod = relay.transform.InferType()(mod)
mutated_mod['func_5381'] = func_5381
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5381_call = mutated_mod.get_global_var('func_5381')
call_5382 = func_5381_call()
output = call_5382
func_5383 = relay.Function([], output)
mutated_mod['func_5383'] = func_5383
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4778_call = mod.get_global_var('func_4778')
func_4779_call = mutated_mod.get_global_var('func_4779')
call_5457 = relay.TupleGetItem(func_4778_call(), 0)
call_5458 = relay.TupleGetItem(func_4779_call(), 0)
var_5500 = relay.var("var_5500", dtype = "float32", shape = (4, 9, 13))#candidate|5500|(4, 9, 13)|var|float32
bop_5501 = relay.add(call_5457.astype('uint16'), var_5500.astype('uint16')) # shape=(4, 9, 13)
bop_5504 = relay.add(call_5458.astype('uint16'), var_5500.astype('uint16')) # shape=(4, 9, 13)
bop_5516 = relay.greater(bop_5501.astype('bool'), relay.reshape(var_5500.astype('bool'), relay.shape_of(bop_5501))) # shape=(4, 9, 13)
bop_5519 = relay.greater(bop_5504.astype('bool'), relay.reshape(var_5500.astype('bool'), relay.shape_of(bop_5504))) # shape=(4, 9, 13)
func_4188_call = mod.get_global_var('func_4188')
func_4190_call = mutated_mod.get_global_var('func_4190')
call_5520 = func_4188_call()
call_5521 = func_4188_call()
bop_5527 = relay.minimum(call_5457.astype('uint16'), bop_5516.astype('uint16')) # shape=(4, 9, 13)
bop_5530 = relay.minimum(call_5458.astype('uint16'), bop_5519.astype('uint16')) # shape=(4, 9, 13)
output = relay.Tuple([call_5520,bop_5527,])
output2 = relay.Tuple([call_5521,bop_5530,])
func_5531 = relay.Function([var_5500,], output)
mod['func_5531'] = func_5531
mod = relay.transform.InferType()(mod)
mutated_mod['func_5531'] = func_5531
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5532 = relay.var("var_5532", dtype = "float32", shape = (4, 9, 13))#candidate|5532|(4, 9, 13)|var|float32
func_5531_call = mutated_mod.get_global_var('func_5531')
call_5533 = func_5531_call(var_5532)
output = call_5533
func_5534 = relay.Function([var_5532], output)
mutated_mod['func_5534'] = func_5534
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1850_call = mod.get_global_var('func_1850')
func_1852_call = mutated_mod.get_global_var('func_1852')
call_5545 = relay.TupleGetItem(func_1850_call(), 0)
call_5546 = relay.TupleGetItem(func_1852_call(), 0)
output = call_5545
output2 = call_5546
func_5561 = relay.Function([], output)
mod['func_5561'] = func_5561
mod = relay.transform.InferType()(mod)
mutated_mod['func_5561'] = func_5561
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5561_call = mutated_mod.get_global_var('func_5561')
call_5562 = func_5561_call()
output = call_5562
func_5563 = relay.Function([], output)
mutated_mod['func_5563'] = func_5563
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2610_call = mod.get_global_var('func_2610')
func_2611_call = mutated_mod.get_global_var('func_2611')
call_5597 = relay.TupleGetItem(func_2610_call(), 1)
call_5598 = relay.TupleGetItem(func_2611_call(), 1)
func_1952_call = mod.get_global_var('func_1952')
func_1954_call = mutated_mod.get_global_var('func_1954')
const_5622 = relay.const([-2.981767,2.868625,-0.531985,-2.908164,-6.538646,-1.744399,-5.700876,-3.997780,-5.593498,5.851662,-7.593830,0.117861,-1.859511,3.183451,-4.635701,0.557321,8.465309,7.455277,-3.223575,-7.950428,4.552762,3.026393,5.613877,-7.853738,-5.526959,-5.817533,1.952285,5.122477,-7.110282,9.749617,1.960044,1.691928,9.925327,-2.725238,6.753779,-5.719226,8.339159,-7.528905,5.671254,-1.297354,-0.891093,-4.295504,-5.714549,-8.741108,-4.828166,-1.818941,-7.607375,-8.002774,-1.094268,8.763047,-3.436462,-8.312819,0.332176,-6.017554,0.338332,6.627017,-0.646566,-6.099910,0.450967,4.594680,-8.557578,7.064128,-3.453268,2.573588,8.729663,-7.508762,-9.695456,7.429301,1.644874,1.355792,1.662281,2.970604,-2.279202,-8.356987,-5.716911,-8.328662,2.762814,9.549638,8.985651,3.392938,-0.953130,-5.965448,-3.181637,-6.089897,-7.017466,7.141969,-7.715141,1.590912,-3.653367,-3.002941,1.150501,0.972398,9.936105,-6.297521,5.713780,0.280256,0.723102,1.429840,3.508762,-1.571567,6.412842,8.750830,-7.383296,-0.744239,6.534669,0.975908,0.582033,8.483072,9.175818,-2.976760,0.645390,-7.854007,9.209883,2.466171,-3.419090,-3.319019,4.320654,1.010292,-6.994980,-5.510079,9.660142,7.980605,-1.960357,3.388527,-6.142241,6.628419,5.539126,2.327077,7.988136,7.256481,-2.850589,8.000080,-2.126316,2.885693,-5.063783,-0.899340,3.722122,8.202709,-0.249820,2.670592,-9.846750,8.659468,2.319105,-5.150463,5.998179,-2.665583,-2.094996,1.079126,-2.234485,9.789196,-6.098728,-6.538335,6.102312,8.559253,-2.042134,7.039886,9.724129,-5.310270,3.977323,3.012301,2.495003,-5.004463,7.375052,-8.855551,-1.052769,9.370847,3.767252,-7.761012,1.467514,-1.162831,-2.444192,-6.899989,-9.960362,-6.186754,2.673537,-7.674944,6.098558,-0.258638,-6.878429,6.596671,2.719972,5.684292,-7.878041,5.592402,-9.655263,-7.775556,2.604439,-5.833661,7.150690,8.279887,4.691684,3.520289,-2.942677,5.073108,-3.767680,2.086878,5.626411,-5.900686,-9.438484,5.840364,-1.869878,-4.927739,-1.299316,3.973252,1.093038,0.150468,3.431609,-6.122431,-7.945784,-8.116016,-0.684922,-0.487019,9.633199,6.115715,2.858514,-6.882940,-2.102541,0.537349,0.529870,3.206340,-4.140807,9.780190,3.158622,3.199699,-9.583668,0.914096,-9.533516,-0.505719,-1.486751,1.002776,5.921256,5.180679,-7.904996,-3.734044,-7.102848,9.088893,-2.489743,-1.049426,-0.572154,-4.706880,3.133239,6.381326,9.425910,5.073902,1.193653,4.404652,-3.023342,9.642612,-5.134641,4.492954,7.009509,2.573729,4.952936,7.364081,1.157308,-0.229817,9.829382,-5.550286,-5.593943,5.149331,2.814192,-5.420119,3.041888,-1.822370,8.086763,-6.807625,-7.147264,2.856358,8.032345,7.985719,-7.700934,-6.992530,3.103954,-7.776314,-4.037592,-6.785141,9.603459,-7.084647,-7.594607,-6.340320,-2.976153,-6.584649,-5.309129,-9.668884,-1.151778,-4.042920,-6.907584,8.751827,-6.507337,9.523729,5.260108,-7.456722,-6.065983,0.505232,4.500946,-9.167589,4.170582,1.209150,-6.259514,6.707818,3.704125,6.151474,-8.528811,-3.971871,6.497162,-9.113409,5.969112,4.748503,0.683104,-3.868353,-2.528679,-0.558984,4.893715,4.335101,8.829758,-1.256223,-0.005186,-5.630618,-5.313677,5.763616,-7.962341,-0.438405,-1.763917,6.749016,1.879173,9.877177,3.862309,5.554876,1.994348,-3.039233,3.215453,2.686886,9.278135,0.547905,-7.742001,8.444505,-1.765310,-7.870114,9.252383,-7.887803,4.067682,-8.502104,3.418956,8.747184,-0.959006,9.034744,4.582681,4.237302,0.181778,-0.715299,-9.967182,-7.885877,-9.489073,1.589825,9.996394,-1.617447,6.843731,8.009541,-6.366136,4.289436,-5.770707,-7.559583,-7.516139,-0.872796,-4.111170,3.839514,-5.845186,7.798785,3.967592,-8.554993,-8.687912,8.709644,8.198051,-3.547467,-7.973902,-3.904817,0.594469,-3.238237,3.626841,2.953012,4.965341,-3.020359,-9.239006,-0.385517,-4.283434,-3.465092,3.625794,6.363092,-2.523669,-7.194531,2.658211,-4.619648,-7.532832,-0.768635,8.866862,8.297309,0.203350,0.263214,-4.472864,1.988762,-5.783657,7.578734,7.431501,8.300889,5.985070,-3.458944,-0.031278,2.189546,4.455802,-4.107499,8.532360,-3.279021,8.894720,-9.153952,5.750665,2.541905,-8.149873,-3.623008,8.252835,3.406614,0.875750,7.504472,-2.216899,-6.287201,5.289197,3.455108,3.469992,2.273856,0.086893,-0.018947,2.031010,-5.549587,-1.519403,7.540012,-7.400895,-2.255807,8.981232,-6.839612,-3.126635,3.949710,1.771091,-6.846578,-9.424178,-3.907558,-7.498723,0.203304,-1.711172,8.745807,-4.337766,-4.148602,1.810605,-6.628294,-8.874960,6.400777,-1.906479,-3.793117,0.246385,-1.980442,-1.124500,4.750480,0.885267,-7.264638,-6.095706,-0.213595,8.242364,-1.200919,-7.652506,3.625963,3.515572,2.329677,8.696041,5.379382,4.303762,7.989203,-0.172373,-7.645142,0.278697,4.211245,-1.759899,-8.915029,-7.888062,-0.238697,5.031955,-4.489652,-9.962564,-8.257776,9.595600,-0.578754,8.234119,3.730975,-5.578660,3.492278,-3.029303,-1.478646,5.151462,-6.742270,8.879529,-5.586157,-8.060472,1.662472,-9.192763,0.226943,3.282126,-8.004156,3.678135,4.041506,6.548211,9.709026,9.171835,-0.457293,-5.021393,8.827671,-1.214358,-3.863820,-8.277097,1.129663,-0.410381,-5.170332,8.630852,-6.181335,-9.166083,-1.085318,6.107686,-8.459569,0.383796,4.170490,8.808073,4.497597,-4.107331,3.469998,6.157208,0.915833,3.246161,-0.891501,8.530048,3.470543,-0.268443,9.979357,1.895956,-1.216025,3.161915,-1.168702,-1.427189,-2.885533,9.645797,6.258019,-1.883246,-3.305745,8.220079,-8.995073,-2.842409,-3.608108,-3.726207,-7.526915,7.607797,-2.732556,-7.920031,-6.833437,7.791487,3.371290,-7.005109,5.710989,6.779228,-8.882448,-2.148425,0.031617,-6.881001,2.466942,-0.241670,-8.051109,8.511679,-8.839586,2.189123,-6.499597,7.595989,1.700573,9.725412,-4.492444,5.896366,1.667462,-5.260428,-2.440070,-0.643056,0.602735,0.806296,6.394838,-9.757645,-9.405725,-6.828997,-2.194597,-9.930175,5.282610,1.109246,-4.206770,-5.315561,-1.253508,6.985412,5.317381,4.451555,-9.482887,-2.525065,7.764397,5.990891,-4.969966,-4.441081,6.168401,-4.645130,-8.302744,-3.520719,-4.010246,-1.399379,5.504609,1.340920,-2.743571,5.672757,3.930816,-0.777805,1.622146,-1.225717,8.797822,-4.454572,8.515825,0.143313,-5.841205,4.599235,-5.418782,-8.772795,7.586574,-0.587949,-0.400080,-8.233134,2.244184,-4.772668,-9.719884,-5.061747,9.056582,-1.695208,5.598524,6.723271,9.430449,1.651704,-5.990345,-7.300862,6.575223,4.362407,-2.384795,-6.078284,-9.877889,-4.317375,2.931596,-2.641581,-3.503237,-0.218754,-4.253764,1.898017,-6.184811,0.666614,-7.329480,-4.761376,-4.648100,8.647728,1.490456,-5.717777,-0.705078,-5.518284,1.111264,5.538507,8.900504,-2.474733,4.416618,1.785818,-4.073980,-1.732322,-5.393255,-0.794888,1.965821,-5.395293,5.450718,-9.527054,3.322692,-4.176067,-9.705244,-5.169753,1.546522,9.538119,0.442496,-1.971899,-3.786838,-1.808695,7.668608,3.185388,6.856224,9.138738,7.190467,-6.306283,-2.261897,4.086314,-5.426638,-3.134246,-7.362399,-4.280117,-2.199949,4.029256,-0.502327,-8.472283,2.564458,-8.757401,3.619367,0.411793,3.315669,9.650390,-9.270252,-4.282242,0.822866,-2.142515,3.581471,1.153808,6.203981,-2.675841,-3.800680,4.181634,-9.790796,-5.821730,7.360564,-4.651223,-6.411966,-9.291021,9.092644,7.241971,8.325400,-3.831377,1.816504,2.925693,4.172266,-7.465184,-3.470577,5.421128,8.022812,-4.431157,0.908833,3.789934,-5.755308,7.671587,6.946890,-9.916558,-1.662582,6.549411,-7.943139,9.224069,-2.900546,-6.746755,8.298310,8.712276,2.978507,-4.701303,1.179553,-8.608137,7.101942,3.641812,8.688750,-4.295501,-8.651317,3.508223,-8.407709,-6.818154,-7.601553,9.087568,-3.262196,-3.674058,-0.931486,5.675287,-0.405480,1.439016,5.358199,-8.353163,9.620815,-4.750613,-4.663180,-1.746661,-9.765269,8.021218,0.171350,1.256463,-2.440779,-6.531204,-2.749236,-1.306889,6.848807,-9.290717,-6.989900,6.031954,5.883019,3.130500,1.274002,-1.538224,0.888731,-2.988937,-6.374222,-1.356104,1.005789,6.089480,-6.378785,6.736998,-1.130647,-3.700524,-9.849235,-2.895378,-1.556039,-6.598238,1.138952,0.018101,-1.901723,-2.886833,4.753277,0.897681,4.098100,-1.774512,-2.196235,7.751898,-0.605482,2.534347,-8.147746,-0.009470,-3.937234,-3.094018,-4.603691,-6.230444,-7.899399,5.901432,6.272293,-1.002416,-4.694227,8.211534,-4.642612,5.078255,-7.441262,-0.653881,-5.053209,8.966400,5.575602,-3.221558,-0.600106,-9.230040,1.063953,-7.887452,4.255422,9.806817,-0.550094,-8.839989,-0.883018,9.105076,4.550387,4.260837,-4.551788,-8.352112,-9.474720,9.660266,8.204862,4.511289,-5.125346,4.794995,5.855111,5.892356,5.989588,-2.544293,7.048844,1.237184,9.026419,-0.512653,6.750055,3.948023,0.035591,-4.087600,9.288039,-6.426164,-7.941611,9.766760,-7.300053,2.925637,-7.883875,2.638882,7.195199,-8.398328,6.673766,-1.483618,9.255074,3.154083,6.075448,0.356482,7.408571,-1.396178,-0.762879,1.854518,-3.254606,-0.399317,7.519495,-4.761609,-4.239714,2.993354,6.288541,2.193890,-2.511268,6.188955,-4.166727,-7.446210,-0.253348,3.235666,-3.218291,-2.762735,7.903802,1.507893,-2.542175,9.840415,4.867694,9.989748,2.610683,4.176095,7.570932,8.679842,-9.170361,2.067522,-4.006061,7.315076,-2.476468,0.425697,-8.237419,-7.102534,-2.768969,-4.228626,-5.029342,-8.502922,-6.235671,8.314547,-5.848184,5.212929,-1.466325,-3.427409,-6.810421,5.819610,9.380459,-9.425426,-2.140214,-2.586034,6.151476,-2.970862,-5.766718,8.359049,-6.634980,-1.496354,9.980724,6.926866,5.472532,-4.795055,7.296059,-3.477643,-2.560700,4.119215,4.304201,8.663381,-8.512959,-0.592382,-4.473540,0.669094,0.963305,8.991887,1.522709,-1.213765,-3.985504,-3.473378,9.169369,-4.611239,-4.220034,-5.682079,-2.786015,-3.152160,0.594121,5.181817,-8.263936,-8.343143,1.534213,-9.890477,0.038407,1.008350,8.151586,4.595540,-7.959913,-1.208032,6.515321,-2.705245,-5.058782,-4.585162,6.667313,4.201576,-5.497518,8.603818,5.031910,8.799338,8.067007,1.952073,-2.921647,3.408627,-5.458284,7.581671,-5.213324,3.939009,-9.134222,-1.471284,-6.078040,1.222684,2.654627,-3.299305,-7.861635,7.473690,-4.123328,-0.834085,-3.886789,6.873301,1.793060,-3.838111,-3.766373,-7.429082,-0.697859,-6.207250,-5.373621,3.939494,2.014355,0.334904,4.953476,4.265760,4.023018,8.258597,0.149898,-5.043662,9.926187,-2.494209,3.945739,1.364238,3.157595,-5.749580,3.293461,8.843841,3.133160,8.649081,-3.110836,-6.388843,-7.940933,1.283091,-0.510220,0.214358,-4.022917,7.672530,-7.960226,0.193363,-1.367455,-0.432519,-8.931925,-5.172040,-4.616381,-7.383804,-0.159825,-1.076388,-8.383566,-2.032363,0.844585,7.639713,7.713702,0.380022,1.747265,7.259321,-1.656613,5.599705,-9.411054,-7.714687,9.674428,6.508423,2.845813,0.095477,8.699226,-0.780471,5.130620,-9.544653,-4.651661,-3.198380,1.130480,-0.423092,7.897652,-6.668218,0.391348,-7.848108,6.619920,9.199363,5.621161,8.803701,-4.712088,-3.632776,4.657781,6.979838,-3.358003,4.241212,4.940393,-9.247059,1.991215,-1.582117,3.574555,-4.216786,-1.169671,-1.286424,-7.646016,-2.194825,6.463313,-8.015685,-3.313002,6.131125,2.955643,-3.375029,-5.497335,-3.317522,1.405284,-5.273287,1.426174,3.304124,-0.375306,-1.030461,5.856325,-3.009942,9.475737,0.005384,-0.788778,-4.688152,9.473484,-8.505968,5.047812,-0.373775,-3.154608,-0.908634,1.362213,3.709155,1.736659,-0.032380,1.642669,8.552151,2.491089,-7.898743,2.666818,9.462708,7.925874,-6.935247,-9.560403,1.204291,-2.258766,6.724920,3.628226,6.671045,-2.204894,-9.867540,-5.195188,-7.759954,-7.676047,8.507046,6.522199,7.047162,9.923711,-9.865163,-7.941975,-3.103639,7.450450,-9.594068,-8.011889,7.038919,4.955636,-9.028858,1.210897,3.363261,4.933059,-0.033072,7.553817,2.146479,1.588923,7.601467,7.826508,-2.177520,2.845385,-8.308668,5.786045,-2.415704,4.483958,-8.631866,7.891072,-5.210988,9.341426,7.802722,-2.050610,3.814427,-0.767911,8.587159,-4.638054,-2.975952,-9.081149,7.979345,-8.224165,-7.377834,0.899349,2.901281,-0.205310,7.395321,-3.113576,0.829128,-4.357249,-3.122343,2.624505,-7.414409,-9.621848,6.075014,2.403151,-3.903904,-9.636544,3.290199,3.078659,-1.109599,4.523367,7.714762,-1.783538,-3.662880,1.322478,-2.993379,2.133085,-6.589649,8.092964,-4.917139,3.294128,8.874276,-5.122354,3.620617,9.581132,6.395232,6.027994,-5.847302,8.618471,-4.813442,0.041120,4.280436,-9.531375,-3.376310,1.008765,-3.917268,4.676355,-1.415356,6.369946,-8.636743,4.107071,4.080661,-5.513860,5.733057,-1.700745,7.895510,-7.525942,-5.732264,-4.897260,-7.928951,-3.834531,-6.138596,-0.806399,0.081055,-2.181651,-9.057168,4.383810,9.354932,3.771256,-2.942922,-6.755495,-8.876981,-5.332053,7.840647,9.463012,7.021918,5.757656,-3.426581,-3.934999,8.373223,3.238005,8.565083,3.010478,-1.945798,6.108969,-6.584782,-2.310820,-3.000284,-6.342789,-5.909886,8.420574,7.326461,1.298966,9.876717,5.860890,5.384521,-5.150378,3.908506,6.454138,3.869228,-9.666880,-1.861433,-7.584504,-4.550533,9.929668,-7.073713,-5.473769,8.128993,6.582170,8.372684,9.517461,4.700608,1.281938,9.935374,2.859836,3.137797,-4.574256,-7.230657,-6.228851,1.031225,2.582530,0.898021,0.308485,-0.893987,9.925532,6.555866,-0.836095,-3.563303,-5.441967,-0.105301,-7.237517,1.148896,6.646530,1.214082,-2.540138,3.357285,6.804011,1.753828,9.439735,5.943016,-0.615386,0.334482,-5.984762,-5.722980,6.245006,-4.645656,4.456308,3.286363,5.764475,-2.379919,1.740750,-4.751637,-8.382160,-6.329995,5.117176,-6.980757,-2.965024,-3.284656,-0.067336,4.167390,8.006275,2.914300,-9.962253,6.861395,-4.521439,0.707677,-8.428059,-6.740742,-2.399683,-2.772286,-6.758675,4.909134,7.325550,4.771553,-0.002823,0.442607,-0.248088,-9.235900,8.227851,7.948545,-0.973924,-6.101127,-0.758498,6.686793,5.687061,-7.339850,4.808127,-5.022452,6.591065,-0.938471,3.167371,3.328012,-1.162474,-4.475131,3.626360,7.336933,-4.370829,-7.905030,-4.487907,6.912137,-0.860431,-6.963434,7.854816,-0.671751,-4.836775,6.602448,-1.947535,-2.965218,-2.703105,0.540674,-4.064873,3.648613,-0.640729,8.733227,-4.571880,-4.080312,-6.175845,-0.129875,2.947916,-3.269999,3.120864,9.619945,-9.943041,-3.566632,-2.506968,-1.307229,4.465842,-8.254846,-8.270304,-1.273060,-7.371499,6.576667,4.178371,0.682509,-8.030650,0.879298,4.791265,3.023231,-1.378457,-3.163886,0.594607,4.845669,0.795033,-7.580774,6.131265,-3.327970,8.211537,-5.003086,9.662504,-5.592029,2.240778,6.991731,-3.493462,-4.530629,-7.156942,-3.852714,5.423828,-4.536383,1.705768,-6.321283,-9.851376,-8.626826,-7.994862,-8.476700,-1.780180,7.227121,-6.986275,-1.269973,-5.167485,1.439849,-0.522014,-1.562934,6.028372,-0.140366,-2.160590,7.738648,9.867332,-3.568003,-7.378937,8.317520,2.586177,-9.776090,6.960856,7.679265,9.318991,-3.929844,-0.516965,-4.009568,-9.360036,-7.849144,9.955085,9.720888,8.699955,5.361677,-8.595301,3.438494,6.984998,-0.531370,-0.674798,-0.883748,-3.163827,9.465316,-3.180770,9.173158,-9.173550,3.066651,4.514464,-4.121582,-9.715801,3.468236,-3.605752,9.819904,-3.823897,-4.848225,5.988848,9.176144,-8.295869,-8.425018,-0.003617,7.917247,6.259971,-2.288585,4.463063,9.713982,-2.773766,-4.129977,1.384072,2.601940,7.642053,3.793066,-8.073479,2.707082,1.376385,2.862165,3.265678,1.549197,9.016409,5.601410,-6.597609,1.565107,0.345669,-7.407875,5.908834,1.387684,4.964564,3.338196,3.528293,-7.331273,-3.144512,-3.772198,-3.662799,-3.964751,2.691363,-4.751508,-5.867146,9.667344,-4.563318,5.936326,4.248317,-3.445071,1.988117,-9.012381,-8.241215,2.296303,2.987249,-4.659487,3.364496,7.338680,7.053385,2.418492,9.135381,3.489024,-5.136693,9.207150,9.406574,-8.711263,3.992036,1.982353,-2.685039,-2.434030,-4.136805,6.697850,6.894952,1.274788,6.527547,7.575449,4.923267,-1.625585,3.963575,5.452039,7.503758,8.523620,-6.121213,7.019292,2.588533,-0.786413,-4.361862,-7.163475,8.652238,-9.828207,-3.731766,8.737182,3.259480,5.763423,-3.327314,3.484207,-7.074572,-3.957563,-3.974773,7.872399,-5.082375,6.646866,-4.167504,-8.868993,0.897959,-8.832052,-6.935633,6.020896,2.997603,-6.220536,2.529996,9.911895,-0.610836,2.762044,9.056659,9.237706,-9.365108,8.191830,-8.693361,-8.043117,-2.351198,8.389834,1.941327,-2.394997,7.093541,-9.153853,4.164051,-1.683273,0.681157,-3.517747,3.855280,-1.446284,-2.377304,-5.490205,-6.639166,6.352211,8.309446,8.419800,2.357184,6.332917,8.866114,-4.499252,6.105069,-9.753127,-0.983761,-2.828719,-5.864202,8.448481,-3.786210,0.245625,6.819128,8.145816,2.707318,9.319501,1.186321,4.256670,-5.063143,2.480267,6.154605,-1.693903,-7.137436,8.902430,-6.733459,4.313531,-1.193989,1.734845,9.178261,-0.177807,8.319988,-2.171318,-0.731479,0.329067,4.270527,-4.924026,3.025556,-9.360261,5.259351,-2.418174,-4.053784,-8.993348,0.805965,-9.374991,8.067263,9.029105,-9.981945,9.959794,-6.939598,5.599868,6.633410,-7.957146,5.203593,-4.441945,-3.809137,-8.785067,-2.532203,2.840376,-5.439934,1.818573,-5.055416,-5.494911,-4.044053,5.911924,2.272577,-7.548300,-0.118427,4.298857,5.678090,4.745284,-7.388629,-6.854833,-9.882943,-7.107725,-8.849631,-4.316996,1.126479,2.671568,-1.227122,-2.824658,-4.430466,-6.756992,3.218378,-6.728854,4.328986,-3.421765,7.170746,1.235832,-4.789719,-1.076162,2.119114,8.491815,4.442698,-5.099545,8.276772,9.231209,3.895725,-6.370998,8.616055,8.669216,-3.139518,8.512214,-1.599751,-1.191707,-4.047494,8.320961,9.620307,-6.183234,-7.273324,3.337717,7.271095,9.702170,-1.306022,7.181597,-4.293228,6.976768,-1.597685,-7.760224,4.779883,8.693414,8.504858,4.607387,5.663413,2.595814,-7.974063,2.099237,-6.274158,-5.613835,1.240097,-6.110745,-6.898529,-0.199750,-4.154990,8.253568,5.337437,-7.527690,-9.569663,-1.005062,6.350810,2.769100,-0.126673,-3.998138,5.206410,2.772534,-9.614096,-8.537777,0.191830,-2.599163,1.435478,7.627989,-0.020872,8.900603,0.125407,3.622185,0.553948,-0.231433,7.468802,-0.004955,9.925358,9.334737,-9.526557,-8.840032,9.413596,3.599883,8.704967,1.158946,-6.523978,-9.538140,-2.115538,4.952884,-1.968049,8.891786,-6.782861,-1.692509,-3.195097,4.394442,5.420606,-5.966023,-8.231409,1.389276,1.275267,-7.237059,4.573067,5.384343,-6.448281,9.791827,0.764288,-0.978337,5.158148,5.852655,5.329878,-0.597337,8.421288,8.106667,-3.687282,7.818923,2.601561,-8.844915,-9.633877,6.686310,-5.508815,3.168825,6.839327,5.276877,-1.082013,-5.482341,7.176879,-0.932866,-6.852389,4.176194,-3.879506,-8.058535,-2.776365,-1.353495,-0.710337,0.055692,-7.448766,-4.505744,-8.975641,-1.451569,2.879737,-2.452680,5.534887,0.801957,-6.389360,8.558380,7.202861,8.435243,-2.596709,-6.130532,9.403894,1.610867,-8.305993,0.830807,4.049789,0.738117,6.203572,4.743438,-2.735012,-0.816818,2.697085,9.387576,3.522837,-9.174992,-2.052631,-2.529333,-2.371482,1.386033,-4.871519,-7.889991,1.963216,-4.539864,7.091572,9.187532,-9.697464,8.076146,3.231639,-0.938130,9.194699,-0.628916,5.821004,4.603272,-2.825783,-0.783482,8.891917,-3.664756,-1.973501,2.286054,0.293574,6.096721,-0.991164,6.713561,7.277013,-5.938254,3.154511,-7.306369,-6.101010,-3.592442,-0.065428,1.112189,0.225111,-0.532401,-4.604449,-9.466605,4.414673,2.380285,-0.700532,5.058323,-9.782067,-3.381246,8.941928,-9.135989,-2.497864,-1.585335,1.143427,-8.144826,-8.998541,-3.366383,5.976395,-3.366885,-2.207380,-6.449866,-2.502102,-8.939872,-2.614625,-0.999689,5.474367,7.383663,-2.315321,-3.650591,3.781922,-8.507721,-0.231333,-7.694360,6.953457,-5.343402,-7.328667,-5.859358,-1.852214,2.555418,5.205300,-1.376894,-9.793713,-3.423254,-0.503161,-3.161032,-2.897078,2.481606,8.716226,-7.261014,-4.820909,-1.799248,8.300739,5.840811,4.205480,-7.004525,4.984375,4.390640,-4.571883,-0.637951,-0.035679,-7.823872,1.670746,0.727582,1.813611,-7.256215,-4.580718,-0.152593,9.651582,-9.181627,-9.127134,-5.690482,5.832708,7.240216,7.275114,-7.694284,-9.256554,-8.597149,-7.557249,-7.936960,6.472010,5.881449,0.100907,-1.947573,-2.281347,4.068146,3.913979,-2.223996,8.746476,7.230250,9.776760,8.206171,-6.445423,6.905254,6.003553,6.051002,-0.766522,0.089482,-2.777171,4.629848,-8.929910,-2.242637,-5.971037,-4.974887,-2.543476,-5.591541,-9.155501,-2.096956,-4.716931,3.195434,5.298862,-3.527360,-2.855209,-1.520399,7.210123,1.768237,-0.716640,-0.231719,-5.607967,8.900013,-1.119562,-9.547709,3.295369,5.889730,-2.568915,6.952827,1.988363,-5.755008,4.098230,9.058689,-0.988081,-2.133593,-1.628492,3.141590,-3.066159,1.742736,-5.801206,7.469006,-7.029263,8.618765,6.987697,2.712759,0.692198,-7.708938,-7.801497,3.407222,-7.222729,9.871270,-6.692182,7.805969,0.366387,8.215611,-2.636442,0.917605,-2.565811,-8.602550,-8.396636,-1.345874,1.368349,-4.801123,-4.832479,-9.982270,-6.161121,1.055747,-0.943953,3.639224,-2.800368,8.559670,7.869703,2.997917,-4.762471,0.781031,4.109530,-6.202407,7.334765,-7.556356,-1.819386,-8.010794,7.876874,-4.798223,0.666982,2.690382,-5.919559,-1.629253,-3.999169,7.728210,6.676459,3.267562,5.545362,0.996856,-1.425105,-0.765929,-8.702965,4.583188,4.241905,4.297329,5.558705,-7.910972,-7.134409,6.345960,-3.940686,6.170154,-3.758274,1.402383,-7.876457,-0.811540,-6.746930,6.353250,1.337573,-7.221037,-6.104151,4.038284,0.810428,-4.628511,6.373740,-3.344962,-5.645563,6.037982,-5.810594,-5.314705,-8.408975,8.115774,-9.258897,6.749171,-6.742007,-4.799323,-6.878428,-0.283916,7.417158,9.071014,1.162019,-7.041743,3.952217,-5.025284,-5.554017,-4.312552,9.366897,-1.951973,-7.100393,3.799114,4.009655,-0.697062,-3.833744,6.958416,2.062904,-9.744694,-1.345659,-0.325075,-4.981015,9.666141,-4.330626,6.675385,-9.109756,3.479428,-5.794040,0.488360,-1.046072,6.105607,-0.198636,-0.091370,9.526025,-5.781793,3.865805,5.462795,5.251766,2.028207,-1.904535,2.500878,-1.651411,7.973204,-5.927195,-8.530871,-0.482161,6.541442,7.699621,-1.129557,-2.344774,-4.111910,-8.538042,4.812803,2.722967,4.220047,-2.311831,-5.230396,2.376106,6.421815,-5.382031,-9.147803,1.460384,9.679142,4.921921,0.092505,8.699006,5.695376,7.315768,1.190792,0.954664,-3.751105,-4.068817,-6.943720,-6.147389,8.117179,-2.012465,-8.250772,3.778425,-9.006909,3.074194,-5.175278,8.623556,-6.645527,-9.941161,4.082378,-6.596305,7.693690,-5.562219,-8.532906,5.618237,6.802755,2.921236,7.382075,-0.124417,9.436466,0.998143,-6.915002,-1.476569,0.212471,-4.011186,-5.678086,-1.000694,5.063449,-5.658374,-1.976289,3.947139,4.114642,4.544316,0.848994,-9.099132,9.030757,-9.526879,-2.007829,4.499110,-6.082549,9.305924,-0.635288,-7.109241,-3.735583,-1.931189,2.113265,1.428618,-0.441226,0.010030,-1.296458,1.416286,-4.401501,8.441053,-0.317995,-7.672907,-4.388510,7.861188,-2.482579,8.638433,-4.020430,7.442901,0.500555,-1.356469,7.079028,-0.132001,6.350237,2.339233,7.842052,1.502444,9.526705,-9.873799,4.205458,3.772210,-6.119374,-5.321751,-9.801148,-4.501528,-5.817260,3.232589,-2.070258,7.442447,8.031531,2.808969,1.819917,-2.921414,1.877526,8.666316,6.684534,-0.288553,2.716891,-3.158747,-6.755231,1.193539,-5.517092,-5.155462,-3.128266,-8.047275,-7.985723,4.870140,-5.802350,0.092798,-4.928426,-1.423063,7.191655,2.658515,-4.425877,-8.770031,-6.500595,5.254521,-4.561129,-2.558737,-4.501287,0.167855,-6.691310,-6.816145,-5.280615,-2.895795,-5.948779,-7.487872,1.422869,-1.557731,-6.374463,-7.196971,1.013773,9.486767,3.146144,-5.837207,-1.716672,6.959493,-5.760374,-3.032165,1.474080,-5.454153,5.781216,9.740264,-2.421859,-1.681714,-9.506550,-4.640435,0.555307,4.200235,9.911412,-2.388751,2.985769,-7.125763,1.780452,2.149696,-8.521681,9.292585,-9.282100,-3.021455,-5.401712,4.396819,-7.747303,-1.467469,1.888356,-9.173543,-9.423133,4.076049,-8.023494,3.257567,-8.230352,-9.246071,-4.535638,-4.433136,-1.048352,-3.674878,-5.979193,4.099139,5.566764,-3.207476,-5.094263,7.015291,7.790727,-0.422157,-5.246543,9.696498,-9.038900,8.967148,6.964038,-2.193614,9.544468,4.441236,-1.408885,-8.992454,-2.922328,3.143406,1.454572,0.455188,0.744810,4.111536,-0.099343,-0.095905,-5.950802,0.783035,9.728666,-6.996015,-1.415868,-8.941465,-5.335928,-0.615022,0.097985,1.288829,-2.402982,1.787382,7.878652,-6.131853,-2.950716,-7.904914,-2.288534,-0.756567,5.493269,-0.606167,-5.279250,7.426352,2.862167,-4.949105,3.910778,-7.226769,-7.553658,0.038684,-3.358173,6.298412,-8.873766,6.494599,-1.813603,-5.006962,-0.330632,9.987220,-3.653885,-9.504018,6.234571,-2.961222,-2.648113,-3.408464,9.407535,-4.162248,2.602846,-1.492062,-0.396054,5.976840,9.691702,-9.043883,-7.264286,7.918666,-1.813640,9.110418,-0.384555,-8.524884,-4.994823,3.917117,-4.995444,7.125997,-0.819999,3.179698,4.471204,6.185062,9.882475,2.121759,7.892279,-9.177887,-0.478029,1.337722,0.022848,3.064588,9.610948,3.474081], dtype = "float64")#candidate|5622|(2496,)|const|float64
call_5621 = relay.TupleGetItem(func_1952_call(relay.reshape(const_5622.astype('float64'), [16, 12, 13])), 0)
call_5623 = relay.TupleGetItem(func_1954_call(relay.reshape(const_5622.astype('float64'), [16, 12, 13])), 0)
func_2610_call = mod.get_global_var('func_2610')
func_2611_call = mutated_mod.get_global_var('func_2611')
call_5638 = relay.TupleGetItem(func_2610_call(), 0)
call_5639 = relay.TupleGetItem(func_2611_call(), 0)
output = relay.Tuple([call_5597,call_5621,const_5622,call_5638,])
output2 = relay.Tuple([call_5598,call_5623,const_5622,call_5639,])
func_5668 = relay.Function([], output)
mod['func_5668'] = func_5668
mod = relay.transform.InferType()(mod)
output = func_5668()
func_5669 = relay.Function([], output)
mutated_mod['func_5669'] = func_5669
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5681 = relay.var("var_5681", dtype = "float32", shape = (1, 9, 10))#candidate|5681|(1, 9, 10)|var|float32
uop_5682 = relay.sin(var_5681.astype('float32')) # shape=(1, 9, 10)
output = relay.Tuple([uop_5682,])
output2 = relay.Tuple([uop_5682,])
func_5684 = relay.Function([var_5681,], output)
mod['func_5684'] = func_5684
mod = relay.transform.InferType()(mod)
var_5685 = relay.var("var_5685", dtype = "float32", shape = (1, 9, 10))#candidate|5685|(1, 9, 10)|var|float32
output = func_5684(var_5685)
func_5686 = relay.Function([var_5685], output)
mutated_mod['func_5686'] = func_5686
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5708 = relay.var("var_5708", dtype = "uint16", shape = (15, 4, 6))#candidate|5708|(15, 4, 6)|var|uint16
var_5709 = relay.var("var_5709", dtype = "uint16", shape = (15, 4, 6))#candidate|5709|(15, 4, 6)|var|uint16
bop_5710 = relay.equal(var_5708.astype('bool'), relay.reshape(var_5709.astype('bool'), relay.shape_of(var_5708))) # shape=(15, 4, 6)
func_2400_call = mod.get_global_var('func_2400')
func_2404_call = mutated_mod.get_global_var('func_2404')
var_5716 = relay.var("var_5716", dtype = "float32", shape = (702,))#candidate|5716|(702,)|var|float32
const_5717 = relay.const([-3,4,10,-3,-6,4,9,-8,-4,9,-9,8,-5,1,1,4,6,10,-7,1,-5,5,-7,-2,1,-10,6,4,-4,-1,-6,-7,-1,10,-9,5,-6,-7,-3,-3,-10,-7,-10,8,-6,9,3,6,-4,-6,-7,-8,-1,-5,1,1,10,8,10,4,-6,-10,8,5,-2,4,9,-2,6,-5,5,10,5,-5,-5,-1,-9,-10,-6,-8,3,10,5,-4,-1,-10,6,-2,-10,-6,-4,-6,7,-2,8,-3,-4,-4,-5,2,7,2,3,-4,3,-6,8,-1,-7,-10,-3,-7,-6,-7,-9,-6,-2,10,6,-6,6,5,-5,1,-7,6,-5,-6,4,-3,4,-1,-10,2,7,-5,4,-8,-4,1,-1,-1,10,9,-3,-8,4,3,-10,-1,5,-9,4,7,8,1,-5,-8,-2,-10,1,-1,-9,8,1,6,5,-4,5,-9,9,2,4,10,7,2,10,-3,-10,-8,-2,9,-10,-8,-6,7,7,-1,1,9,-3,-8,-4,2,3,7,6,3,-10,-2,8,-4,-1,7,6,10,7,-2,8,-7,6,6,-3,-10,10,1,-3,2,-10,6,7,5,3,-6,-3,-3,8,-3,-8,4,-4,7,-2,3,-10,-9,-4,-10,2,-1,-9,-4,-4,8,9,-4,-10,2,10,3,-2,-8,7,-7,-3,3,-3,-1,-3,10,2,5,-3,-4,-10,-4,1,1,9,6,6,-4,-6,5,5,-1,7,10,3,-4,3,7,9,2,8,2,7,3,10,-5,3,-1,-10,-2,-5,5,-6,1,-10,7,-3,2,-4,5,2,10,-4,6,4,-8,-8,-6,-5,2,-2,-5,-8,4,3,8,9,-1,-1,-8,6,-5,-1,9,-9,-3,-1,-5,9,-3,-9,8,-10,-1,-5,-7,7,5,2,5,-4,2,9,6,-7,10,1,3,4,-4,7,2,-1,3,9,-7,-6,-2,-6,-5,-7,-10,3,-10,9,8,3,-9,4,-10,-8,10,5,1,10,6,-10,-6,10,-10,9,-5,7,-1,-6,8,9,9,1,7,5,1,-2,10,4,-4,-9,7,5,-9,-10,-6,-8,-5,7,10,-9,-9,7,-4,-9,-6,-7,6,-1,-2,5,-2,-5,2,8,5,-3,8,-6,-5,-1,5,3,2,8,7,-2,-4,5,-10,-10,-10,-1,-6,-3,4,-9,-3,-2,-8,-9,-4,3,9,-6,3,-3,-8,3,9,-3,9,-4,6,-9,4,9,-10,-8,2,-7,-7,-6,-3,8,-5,9,-5,-10,6,-5,-9,10,7,-8,1,4,8,-4,-10,-6,-7,1,-5,5,10,4,4,-9,-4,-2,6,5,-5,-4,-3,-10,-3,-4,-9,2,9,-1,1,-6,8,-10,-1,6,-3,-2,1,7,-10,2,10,-1,9,-9,-1,-7,-2,-1,9,-10,-10,-1,4,-4,-8,4,-10,6,6,-2,-10,-5,-6,-7,6,9,2,6,7,8,6,-3,10,8,5,-4,10,9,-8,1,6,1,-10,-1,6,-2,5,9,-7,3,8,10,7,-2,-8,8,-4,1,5,-3,-5,-3,4,-6,-8,6,-6,-4,8,7,-2,9,3,2,-3,-1,1,9,-6,8,-5,4,1,-6,5,-4,-8,2,4,-1,10,7,6,9,-10,9,-9,9,-10,-6,8,-9,4,10,-7,5,3,-1,8,4,-4,5,6,3,1,-1,1,5,-5,-3,6,-2,-2,9,-2,7,-7,-1,-10,-1,6,-8,-5,-4,6,5,-7,-10,-9,-8,3,6,10,5,2,1,-1,8,-1,-6,-2,-10,7,8,2,-8,-1,-7,4,3,9,5,-2,-7,7,-4,6,8,6,1,1,-3,6,5,1,5,1,-1,4,8,1,10,7,-3,1,-1,3,-5,3,8,-8,-5,2,-4,3,-10,5,4,-6,-3,8,9,7,10,-6,3,1,6,1,2,1,10,9,-8,-8,-4,-6,-10,9,-2,-10,2,2,-7,-8,-8,-10,-7,-2,-6,7,-9,-2,-7,-10,-9,-3,-2,-9,-7,-7,-5,3,7,-6,-6,-4,-7,5,-9,-2,-7,-9,1,7,2,5,2,9,5,-6,-8,7,7,7,9,2,6,5,9,9,6,9,2,-1,1,8,-6,-3,9,6,-1,1,2,-9,8,10,-10,3,-9,10,10,9,5,8,6,-9,6,6,-8,7,-1,-1,10,-6,10,6,4,-7,-1,-2,-3,-6,4,5,7,9,2,10,6,8,-1,-6,-2,-5,-10,-2,1,1,9,9,-9,5,-8,3,2,10,6,10,8,4,6,2,3,-5,9,-10,4,-2,-2,-8,4,10,3,9,7,3,9,-3,9,7,-3,8,4,-4,3,-3,-10,-9,2,8,3,-5,7,7,7,3,4,-9,-9,7,5,-1,2,9,9,-3,9,7,5,1,1,-2,-3,-3,6,-6,-7,-5,8,5,1,4,-8,-7,6,-5,-2,-9,-1,-9,10,5,2,-8,-6,-10,1,-9,4,1,4,4,-6,2,5,2,7,-5,-9,-1,-8,-2,-6,9,6,9,-8,7,8,-1,1,8,-3,6,8,9,-8,-4,-1,-6,4,9,10,8,-5,9,-4,-1,10,1,5,-3,-10,-9,9,-9,1,-5,-4,-9,1,3,6,4,-5,5,6,5,4,-10,1,6,-7,-5,3,8,-3,-1,8,7,4,-3,10,10,-4,-7,-10,-1,3,8,1,1,-8,4,-10,9,-5,-4,-10,10,-5,-1,1,1,-7,9,-4,1,-3,-8,-6,-6,-9,7,-7,3,6,-4,-5,1,4,9,10,-8,5,-5,4,3,4,-3,8,10,2,-1,10,1,1,2,2,-4,7,-9,3,-2,-3,-7,-3,-7,2,3,9,8,6,9,9,4,-3,6,-4,-2,-7,7,7,-4,1,2,1,-10,-7,4,4,-3,10,4,2,-10,4,-9,-3,-9,10,4,1,-10,-5,-6,4,-8,3,-8,-8,3,6,-5,7,-3,5,-10,-3,7,-9,-7,-4,-5,4,1,-2,6,-10,-6,4,4,9,8,-6,-8,-5,8,-9,-8,6,5,-6,5,1,-3,-3,4,10,-3,-4,3,-7,1,-4,1,10,8,-6,-4,-8,-1,3,-4,7,1,-10,3,5,-5,4,-9,-1,-10,1,5,-10,-2,-4,-10,-6,4,-7,-5,-4,-9,8,3,-6,6,9,-9,-10,6,7,-6,-6,1,9,4,-10,-4,-3,-6,3,6,-7,-3,-6,-2,-2,8,-9,1,-6,-3,-10,-5,-5,-3,6,10,-4,10,-1,-5,-3,1,1,-1,-7,-7,3,-3,4,-7,-5,4,10,-1,8,-4,-8,-2,8,-10,-10,-3,7,-3,2,-1,-5,-6,9,-5,-3,8,3,10,5,-8,7,10,-9,-6,1,8,10,-10,-3,-6,4,-8,3,-10,-10,-3,-10,-2,4,-10,3,2,1,-4,6,1,-3,-7,-8,3,3,-4,9,-4,2,-9,-1,10,-2,6,-4,8,-5,2,-9,-1,2,-9,-9,-5,6,-8,4,1,-2,-6,6,-4,8,-4,2,3,-1,5,5,5,-4,10,-2,-8,2,3,-9,-10,-2,5,-2,-7,9,4,-4,5,1,9,-8,8,-2,-9,7,-5,-4,4,-7,10,7,-1,-3,10,-4,7,-6,4,-7,9,2,4,4,-1,-3,10,5,10,6,1,-8,3,-5,-4,-10,6,-6,-6,-10,-3,10,-2,5,-2,-1,2,-1,-5,-2,7,-1,1,-5,8,-6,8,-6,-10,2,1,-4,1,8,10,-5,1,1,-3,-1,-4,4,4,4,-1,7,-8,-9,-6,6,-6,-4,9,10,-6,3,-5,-3,10,-4,-2,5,2,10,2,6,9,6,7,-7,5,2,10,-1,-1,-1,6,4,1,-5,-9,10,1,3,-2,-3,-4,-6,-10,-7,4,5,-6,-9,4,10,7,1,-8,7,7,-4,5,-7,1,-8,-2,4,-4,4,8,-1,-6,2,7,1,-1,6,8,-1,-7,-3,-3,-6,-1,7,4,4,-10,-3,8,-10,-10,-5,8,-5,-8,-4,5,-10,-10,-6,4,-4,8,1,3,5,6,2,-9,-10,7,-7,-2,1,-3,6,-6,-4,-2,-10,-4,6,8,-5,7,1,-9,-6,-7,-5,-3,10,3,-6,8,-10,3,-4,6,-8,-5,4,-9,-5,5,-7,-10,8,2,10,1,2,-6,7,-6,-2,3,-2,-4,9,6,-8,4,2,1,5,10,6,-4,7,-7,8,4,-6,-7,-10,2,9,-5,3,-1,-7,-6,8,-7,7,-1,-8,6,-3,-9,-6,-2,-7,8,-2,8,1,-4,1,1,7,-4,-8,7,3,-6,-6,-8,5,5,-4,-9,-5,5,6,8,9,-8,-4,8,-2,-10,3,3,3,-7,1,3,1,-5,-3,8,-7,-7,-3,10,-1,4,-8,2,-7,8,5,7,9,-2,-5,4,-9,4,-8,-7,-7,-3,-10,-6,-5,6,-8,-7,4,-9,10,-10,-6,2,1,3,10,2,-10,-8,3,-5,8,-9,-1,-1,4,1,8,-4,-3,-6,2,5,-4,-6,-9,-1,-5,9,-9,-7,4,4,1,10,4,5,1,1,2,-6,10,-10,-8,-1,1,-9,-5,-6,1,-8,-1,-5,4,-2,3,9,-5,-10,-10,-9,6,6,3,8,8,-10,-9,-5,-9,1,-5,7,9,-5,6,-10,2,-6,5,-8,9,6,-3,3,8,-5,-4,4,-10,2,3,-2,5,-1,-1,-5,-8,-8,-2,4,5,-4,4,4,-9,1,8,10,-1,-6,-1,-5,-4,2,6,-7,-5,-1,10,-2,2,2,9,7,-4,-4,-6,6,2,9,3,-2,-8,5,8,1,-1,4,-7,-9,4,8,2,1,1,5,-7,-2,10,4,-5,2,8,-5,6,5,-7,9,6,-7,-1,3,-9,-2,-2,-9,-1,-2,-6,5,-1,2,-3,1,-3,8,-1,2,4,1,2,3,-10,6,10,-5,-2,-10,10,-6,-10,-10,3,-4,-8,5,2,5,10,7,-3,-2,-1,-1,6,7,2,-8,1,-4,-7,-1,4,3,9,6,2,8,2,8,7,-5,-5,3,-5,7,5,-2,-7,-5,-3,-10,-10,-2,-10,-2,8,-5,2,-10,-5,10,-6,9,7,2,4,7,-2,8,-1,-8,-8,1,1,9,-6,-7,1,-8,9,-10,-1,9,-8,-7,7,-6,-8,-7,8,-6,6,9,-9,-8,6,-3,5,-2,9,9,-5,-3,4,2,7,-8,-1,-2,3,-1,6,-6,8,-3,5,6,-1,-3,-10,-8,-6,2,3,-10,-4,5,-6,4,-9,4,-10,-4,-9,7,5,-8,2,-8,8,1,-10,-3,-9,4,-3,-10,7,6,-4,-7,6,9,7,-3,9,6,-2,8,7,7,-10,-5,-4,3,3,8,7,-7,9,9,6,7,-8,9,-9,-7,7,4,-4,9,8,7,5,10,-4,1,-6,-9,-5,10,-7,1,-1,-5,-5,-10,-2,-8,3,-2,-9,-8,-3,-1,-7,2,-8,-8,-9,3,7,-7,-4,-7,-5,3,-2,-10,8,-3,10,9,-6,10,9,-9,1,-5,-1,10,-1,-1,-4,10,-10,-8,-6,-10,-5,-8,-6,-1,5,9,-2,3,2,8,2,-9,-9,-5,-4,-7,-7,-3,4,-9,-4,6,-9,-9,2,8,-3,8,-4,7,8,-6,1,-8,-5,-5,-5,-5,9,-7,9,-6,-2,6,-5,-5,9,6,3,6,-10,9,3,2,-5,-4,4,-1,-2,2,2,-8,9,2,1,3,2,-9,-5,-6,1,9,7,10,6,7,-9,8,3,3,-1,-7,8,7,-8,6,-4,3,-2,3,6,6,8,-5,-8,-5,7,-4,-10,8,6,7,8,3,4,-10,7,8,-3,-6,-3,2,5,-5,-6,2,9,-2,-1,9,-1,8,6,-5,2,10,4,-7,5,-3,5,1,-7,10,-9,5,-7,-10,-2,-10,6,-10,-1,9,-1,6,-10,-9,-3,-6,10,-10,8,-10,5,-5,-1,9,-3,9,-3,-9,4,-1,-9,-9,10,-5,-1,9,6,-7,8,-10,-6,-3,4,1,2,-6,9,-9,5,9,1,-2,-9,-4,4,-8,-3,-7,-4,6,2,-6,-7,2,-1,10,9,10,10,7,-8,-4,9,-7,-4,9,-6,7,-2,-7,-9,6,6,8,-10,2,3,10,-1,-6,-1,-9,2,8,4,-8,2,-5,-1,-6,9,10,6,-3,-6,-2,-6,2,6,3,-7,6,-6,-8,1,10,4,3,8,6,7,-1,-8,10,-4,5,3,-9,-10,5,-2,5,-5,-5,6,-8,-9,5,-1,3,-5,5,10,6,2,3,-8,-10,-7,-5,6,6,-2,3,6,-9,4,1,-9,-4,-10,-4,7,1,-9,-5,-10,8,-1,-7,9,-10,-9,9,-9,8,-3,-8,-8,-2,-7,-10,9,-1,3,9,-4,-6,-9,-1,-1,-8,3,3,-8,8,4,-2,-8,-5,-3,-2,3,-9,7,3,-1,2,-10,7,4,3,3,-2,10,-9,-4,-9,-3,1,10,-9,6,9,8,4,-9,-1,2,-3,-3,-7,-7,3,-7,-1,-8,-2,-2,10,6,6,-3,-10], dtype = "int8")#candidate|5717|(2496,)|const|int8
call_5715 = relay.TupleGetItem(func_2400_call(relay.reshape(var_5716.astype('float32'), [702,]), relay.reshape(const_5717.astype('int8'), [2496,]), ), 3)
call_5718 = relay.TupleGetItem(func_2404_call(relay.reshape(var_5716.astype('float32'), [702,]), relay.reshape(const_5717.astype('int8'), [2496,]), ), 3)
func_1850_call = mod.get_global_var('func_1850')
func_1852_call = mutated_mod.get_global_var('func_1852')
call_5735 = relay.TupleGetItem(func_1850_call(), 0)
call_5736 = relay.TupleGetItem(func_1852_call(), 0)
uop_5739 = relay.asin(const_5717.astype('float64')) # shape=(2496,)
output = relay.Tuple([bop_5710,call_5715,var_5716,call_5735,uop_5739,])
output2 = relay.Tuple([bop_5710,call_5718,var_5716,call_5736,uop_5739,])
func_5744 = relay.Function([var_5708,var_5709,var_5716,], output)
mod['func_5744'] = func_5744
mod = relay.transform.InferType()(mod)
var_5745 = relay.var("var_5745", dtype = "uint16", shape = (15, 4, 6))#candidate|5745|(15, 4, 6)|var|uint16
var_5746 = relay.var("var_5746", dtype = "uint16", shape = (15, 4, 6))#candidate|5746|(15, 4, 6)|var|uint16
var_5747 = relay.var("var_5747", dtype = "float32", shape = (702,))#candidate|5747|(702,)|var|float32
output = func_5744(var_5745,var_5746,var_5747,)
func_5748 = relay.Function([var_5745,var_5746,var_5747,], output)
mutated_mod['func_5748'] = func_5748
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1565_call = mod.get_global_var('func_1565')
func_1566_call = mutated_mod.get_global_var('func_1566')
call_5777 = relay.TupleGetItem(func_1565_call(), 0)
call_5778 = relay.TupleGetItem(func_1566_call(), 0)
func_4778_call = mod.get_global_var('func_4778')
func_4779_call = mutated_mod.get_global_var('func_4779')
call_5779 = relay.TupleGetItem(func_4778_call(), 0)
call_5780 = relay.TupleGetItem(func_4779_call(), 0)
output = relay.Tuple([call_5777,call_5779,])
output2 = relay.Tuple([call_5778,call_5780,])
func_5781 = relay.Function([], output)
mod['func_5781'] = func_5781
mod = relay.transform.InferType()(mod)
output = func_5781()
func_5782 = relay.Function([], output)
mutated_mod['func_5782'] = func_5782
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3004_call = mod.get_global_var('func_3004')
func_3006_call = mutated_mod.get_global_var('func_3006')
call_5848 = func_3004_call()
call_5849 = func_3004_call()
func_1535_call = mod.get_global_var('func_1535')
func_1537_call = mutated_mod.get_global_var('func_1537')
var_5855 = relay.var("var_5855", dtype = "float32", shape = (1404,))#candidate|5855|(1404,)|var|float32
call_5854 = func_1535_call(relay.reshape(var_5855.astype('float32'), [12, 9, 13]))
call_5856 = func_1535_call(relay.reshape(var_5855.astype('float32'), [12, 9, 13]))
bop_5860 = relay.less_equal(var_5855.astype('bool'), relay.reshape(call_5854.astype('bool'), relay.shape_of(var_5855))) # shape=(1404,)
bop_5863 = relay.less_equal(var_5855.astype('bool'), relay.reshape(call_5856.astype('bool'), relay.shape_of(var_5855))) # shape=(1404,)
func_4532_call = mod.get_global_var('func_4532')
func_4533_call = mutated_mod.get_global_var('func_4533')
call_5878 = relay.TupleGetItem(func_4532_call(), 1)
call_5879 = relay.TupleGetItem(func_4533_call(), 1)
uop_5884 = relay.acos(call_5854.astype('float64')) # shape=(12, 9, 13)
uop_5886 = relay.acos(call_5856.astype('float64')) # shape=(12, 9, 13)
func_816_call = mod.get_global_var('func_816')
func_819_call = mutated_mod.get_global_var('func_819')
const_5903 = relay.const([[-8,10,-5,-2],[-7,9,-4,4],[7,-1,4,10],[-6,10,4,4],[8,5,-3,2],[3,3,-2,-9],[5,-2,6,6],[10,9,-7,-8],[-6,-10,-2,-10],[6,4,10,-9],[-3,-5,-2,-2],[-6,-6,3,10],[9,-10,-4,5],[4,10,-1,1],[1,-5,-7,-5],[8,-8,7,4],[-9,4,7,-5],[-7,4,-5,5],[9,9,9,-10],[7,-9,5,-10],[-10,-8,-4,-5],[-8,-2,-4,-9],[7,2,1,-4],[-8,-3,-8,9],[-7,-4,-10,5],[-10,2,-4,-8],[8,8,1,-10],[-4,-4,-7,-10],[-10,7,-3,-9],[-9,-8,2,5],[-7,-1,-4,-7],[-3,-3,-4,5],[9,-3,4,7],[4,6,3,-8],[-2,-7,8,-7],[5,-1,2,10],[-8,4,-8,5],[8,8,3,-10],[-4,3,10,-5],[7,1,-2,1],[-5,-1,-9,5],[-6,-7,-10,5],[-3,-8,-6,6],[-6,3,10,-7],[-2,-8,-5,-6],[-7,-1,9,10],[2,-3,-10,-2],[-7,-6,2,10],[4,-4,-10,-9],[5,-3,-5,4],[-3,-6,7,-1],[4,9,-3,-9],[-8,5,3,-4],[-5,3,-2,-7],[-4,-7,-10,5],[-6,-9,5,5],[1,1,5,4],[-4,1,-4,10],[3,10,6,9],[-10,-2,-6,-8],[8,-5,-7,-4],[-4,7,-3,-7],[-4,2,-2,3],[-9,9,-1,-6],[-6,-1,-8,4],[-10,-1,5,1],[-4,-1,-4,-8],[-9,-2,-4,9],[-9,-5,-3,-10],[-7,8,-10,-5],[-2,3,-1,10],[-8,2,1,3]], dtype = "int8")#candidate|5903|(72, 4)|const|int8
call_5902 = relay.TupleGetItem(func_816_call(relay.reshape(const_5903.astype('int8'), [6, 16, 3]), relay.reshape(const_5903.astype('int8'), [6, 16, 3]), ), 0)
call_5904 = relay.TupleGetItem(func_819_call(relay.reshape(const_5903.astype('int8'), [6, 16, 3]), relay.reshape(const_5903.astype('int8'), [6, 16, 3]), ), 0)
func_5283_call = mod.get_global_var('func_5283')
func_5285_call = mutated_mod.get_global_var('func_5285')
call_5916 = relay.TupleGetItem(func_5283_call(), 0)
call_5917 = relay.TupleGetItem(func_5285_call(), 0)
func_1363_call = mod.get_global_var('func_1363')
func_1367_call = mutated_mod.get_global_var('func_1367')
var_5919 = relay.var("var_5919", dtype = "float32", shape = (702,))#candidate|5919|(702,)|var|float32
const_5920 = relay.const([8,-4,4,1,7,-10,-1,3,-6,4,-2,5,-3,-4,-1,-8,-8,7,-10,9,-10,-4,-1,10,5,-9,-3,4,9,2,4,9,10,-4,-4,8,2,-7,-8,-4,1,10,8,-9,-4,9,10,-10,3,1,-6,3,10,5,-1,10,10,5,8,9,6,7,-5,6,-10,-7,-7,-8,-2,-6,-10,4,-10,10,-6,9,-6,-8,5,8,3,6,8,1,-5,-5,-7,8,10,5,-8,10,3,4,-3,5,-10,10,-3,9,9,-6,3,-4,-2,10,5,4,9,-8,-4,10,2,-3,-10,6,6,-8,5,-3,2,9,-3,-7,-2,-5,-8,4,5,-6,2,6,3,7,5,5,3,-9,6,9,1,-6,-8,-10,8,8,5,7,10,-5,4,-4,-3,-3,9,1,-7,10,9,-8,5,8,2,7,9,-6,-4,-2,-5,10,-9,5,-9,-9,6,-5,5,-10,-9,10,-3,-5,-9,5,-1,8,-5,-4,-10,1,2,9,-1,6,-10,-2,-3,9,1,3,-7,2,4,6,-10,-1,5,2,9,-10,4,-1,8,-8,3,2,4,4,1,3,-7,6,6,-9,-5,5,10,8,-5,-6,-10,8,4,4,-2,-7,-5,2,-10,-8,2,6,-9,-10,3,-5,-6,-8,5,-6,-3,5,-5,-9,7,-1,1,1,-6,-6,-10,-3,-4,-9,-5,5,9,3,-6,-2,-10,-2,-2,10,-7,-6,-7,-3,10,-9,8,-2,-3,-2,9,-2,7,-7,8,-7,-6,-9,-2,4,-6,-8,7,3,8,9,-1,6,4,9,3,-4,-10,1,-7,5,-8,-8,-6,-6,-6,2,5,-5,1,10,1,2,7,5,-8,5,-7,2,-4,8,7,-7,-7,-1,10,4,-5,5,10,6,-2,4,6,5,-8,1,-4,-8,-3,-3,2,4,-4,1,-1,-1,-2,4,-3,-7,3,-6,6,-10,-7,-2,10,10,7,7,-10,2,-3,9,7,-9,-6,7,-3,3,-10,10,-4,-2,-2,10,-9,-6,-1,10,-5,-6,6,-4,-10,8,3,8,8,8,-2,6,1,4,8,-7,3,-5,9,-7,-6,1,-2,-5,-10,10,1,3,-7,1,-1,10,4,-4,-5,-3,3,-8,-4,5,6,-8,-1,-9,8,-8,10,4,3,8,8,-7,-7,7,-8,5,-8,-2,-4,1,-1,-2,7,5,-5,-6,-4,3,7,-5,2,10,-3,-1,3,8,1,3,7,7,-10,-2,-5,-8,-4,-9,2,-8,-4,-1,-3,1,10,-3,1,-6,3,7,-4,-10,7,7,-9,-6,6,-9,8,-6,-3,5,10,-7,3,1,-9,8,-10,-5,1,-1,-9,-7,-10,7,-1,7,6,-4,-6,-6,6,10,8,5,9,4,6,-6,4,8,-6,9,-9,-10,-8,1,-8,-7,8,-4,8,6,-3,8,6,5,5,3,-8,10,-7,9,-3,2,10,10,-7,-10,1,-8,-8,-8,-8,8,3,-2,-8,-6,9,2,-7,5,-1,4,7,-10,4,9,-8,-8,4,1,-2,2,-8,-1,9,9,-5,3,-3,-8,-10,1,-3,-8,10,8,10,-5,6,-3,6,-6,-5,2,1,-8,-8,-8,-7,-7,-10,1,4,-8,6,7,5,2,4,9,5,-8,-6,3,5,-10,-4,4,-9,-10,4,-6,3,-9,3,4,-7,2,-9,7,-6,8,8,-9,2,3,-1,7,8,-2,-5,-2,1,6,-10,3,-9,-7,4,-7,9,4,-10,5,6,10,6,-6,7,-6,-4,-4,-3,-2,-9,3,9,-10,-8,-7,-2,8,1,6,3,-5,-2,-1,-2,-2,-4,-10,4,-1,3,-7,-7,5,-6,-7,3,-9,3,-4,5,-5,-2,-1,3,9,2,-2,-10,10,-8,-6,-1,9,-6,-8,-8,-1,7,5,6,7,9,-8,6,4,4,-6,6,8,8,-3,8,5,6,3,-5,9,-10,2,6,4,7,-7,-7,2,-3,-2,-9,-4,8,-4,-10,6,3,-9,-5,2,-3,2,6,-5,-1,7,3,-2,1,-3,-2,-2,-8,-3,-4,-2,6,8,2,-10,-2,10,10,-8,1,-3,-10,-5,8,1,4,10,1,-1,-3,3,-8,3,-6,-9,2,-7,7,-3,3,6,9,-9,-5,-1,-1,-6,-9,7,9,2,9,6,-5,-2,4,8,-5,-2,-7,-9,-9,-7,5,4,3,-7,-7,-8,-3,1,-10,1,-5,-6,-7,-1,1,5,-6,-1,-4,9,3,-6,-10,6,-7,5,-9,4,-7,2,-7,-5,-5,1,-7,3,-2,6,7,1,-8,-7,7,-3,-10,-4,4,-9,-8,-10,-5,-4,-3,8,-2,-7,-3,-7,6,5,-7,-3,10,1,4,-2,-6,5,-9,-1,-10,-1,-3,-5,10,-4,-1,-9,-9,-1,-2,4,-1,7,-2,1,9,6,2,-10,3,9,-1,7,9,-4,2,8,7,-3,4,-2,6,4,1,-10,9,8,-2,-1,2,-3,-3,8,-4,10,7,-2,2,-2,-3,-9,6,2,4,-8,-7,3,-9,2,3,5,4,6,-5,-10,1,-1,-9,-4,4,-1,10,-3,-6,4,6,1,7,5,6,-2,-7,5,-4,10,8,1,7,8,-10,5,2,-4,-3,-2,-4,-7,7,-6,-8,1,2,-7,7,-2,-8,10,3,10,3,-5,6,8,2,6,-4,10,-8,-3,-2,9,4,-1,-3,2,-3,-3,-9,-4,-8,-2,7,8,-1,-8,8,5,9,8,7,8,-7,8,-3,-6,5,3,2,-5,2,7,3,1,-6,-3,-9,2,1,9,-4,-5,4,1,9,10,1,3,-9,-7,-3,9,-1,-7,3,-6,-2,-8,-9,4,-4,9,-4,-1,-7,8,-9,4,-10,-2,-9,-9,-9,9,5,8,-8,7,9,4,8,-6,1,-7,-2,-1,9,-4,-9,8,6,5,1,7,10,6,3,5,5,-4,-2,10,9,10,6,-1,-4,-6,8,6,5,8,-5,4,6,7,-7,9,-10,3,9,-8,-2,-7,-10,-2,7,4,4,2,-10,-8,-7,-2,-8,-6,-10,-9,1,-5,-10,-7,-7,-9,-1,-1,-3,7,-7,-8,5,-1,8,-9,7,1,9,2,-9,6,-3,2,-5,-5,-9,9,-9,-10,2,8,-1,5,-9,7,10,-9,-10,7,9,10,-7,1,-1,2,10,1,1,5,-4,7,8,7,6,-5,-7,4,-6,-9,7,8,-5,9,8,-7,6,8,-1,-2,-10,3,-4,1,-3,-4,-6,-6,-5,9,10,-6,10,-10,9,-10,-3,-6,2,-6,2,3,-4,8,-5,5,-3,-2,6,-5,-8,-4,10,7,-9,-8,2,-6,-2,8,-3,3,-5,-8,6,4,8,4,-9,-1,3,7,1,-4,10,-10,-6,-9,-5,1,-10,-7,4,8,4,10,-1,5,-2,4,-4,7,7,-2,-2,-6,-8,3,-8,-7,-10,-2,-6,4,-7,-4,-5,10,8,4,4,4,-7,-6,-6,9,-2,1,-1,9,-3,8,3,-10,1,3,-6,-7,-4,1,-8,9,3,-9,3,2,-1,4,10,7,9,-7,8,1,-9,-1,-1,10,-8,-10,-8,-9,-7,-3,8,-10,-1,-4,-1,1,5,8,2,-4,8,5,8,-3,8,2,7,5,-9,6,-3,-9,-9,-8,6,5,-8,7,4,-1,-7,10,-6,-1,5,-4,-4,-9,-1,-6,-1,-10,9,4,-9,-8,7,8,3,8,-7,-6,-5,-4,6,-5,8,3,-5,3,-2,-10,-6,-4,-10,-7,-5,7,-10,8,10,-2,-3,8,-3,-3,1,-4,4,6,-10,-2,-7,-7,-2,4,10,-4,2,2,2,-8,1,-10,2,10,2,-9,2,8,10,-10,8,5,4,3,3,9,-7,-8,6,3,1,-6,5,-9,-6,5,-10,5,-8,-2,-2,-6,1,-10,-3,4,2,-4,-6,1,-1,7,9,-5,-10,9,-7,3,-8,-6,3,-2,2,1,1,9,10,-3,-5,7,7,-7,10,4,-2,-8,10,9,10,-7,2,2,1,-3,6,-4,-8,7,3,-10,10,10,-10,2,-7,-10,7,2,-7,-6,9,-6,-3,6,2,2,4,4,9,5,-4,-8,6,7,-9,8,5,4,7,-5,-6,3,-9,5,2,5,-4,5,4,-7,6,-8,9,10,-2,7,2,-7,8,8,-1,-3,7,-4,1,4,7,8,-4,6,-3,-3,4,7,-3,1,9,6,4,-9,-3,2,-6,10,1,7,8,1,1,3,5,5,-9,-2,-5,8,5,-10,2,-3,5,-9,10,-2,-7,5,10,-8,3,2,2,-5,-9,9,4,-4,-10,1,-2,10,-9,-1,-5,8,10,5,7,8,5,-7,7,-10,-2,-6,-4,-4,-1,4,6,3,9,8,8,-3,-5,-3,-2,1,4,10,4,-10,3,-3,5,6,4,1,-2,-4,-5,-9,-10,2,-8,1,-8,-8,-7,1,7,-6,-1,-10,1,10,-2,4,-7,-5,1,-8,-9,2,-7,9,-8,4,4,-2,9,3,-1,3,-5,5,-4,-9,-9,-2,3,2,-6,3,-2,7,7,1,8,7,2,-1,7,3,2,4,-5,-7,5,-3,4,-8,-9,-10,5,-2,1,7,-5,4,6,-1,6,-3,9,-2,7,6,3,5,-3,-6,10,2,4,3,4,2,-3,5,-3,4,8,-6,-4,-8,-7,3,10,3,1,-5,-9,9,3,3,-2,6,7,-1,-4,-1,-5,-8,-10,-10,-6,-8,-3,-6,-10,2,8,-3,3,-7,5,8,2,7,-7,-5,-2,-8,9,-1,7,-2,-3,-1,1,3,-7,5,9,3,9,-10,8,-5,-4,-7,-10,-5,4,-9,-5,10,-3,1,-7,9,10,-6,-5,-7,-9,-9,3,-2,-9,1,-3,-4,-6,-10,9,6,9,2,-2,5,3,-10,6,-3,-5,7,-5,-6,-7,-1,-6,-10,8,-10,-2,4,7,-2,-6,-9,1,-8,-8,7,-9,-4,7,1,-5,-8,4,-2,5,-5,1,1,10,8,2,-3,-6,-7,10,-2,6,2,3,-2,-8,-9,-3,-10,-10,10,4,4,-2,-6,-8,9,-8,8,5,-10,-9,3,-1,-4,1,-2,1,6,-8,8,-1,-4,10,-2,1,9,3,3,-4,5,-3,10,-5,-9,-9,1,-6,10,-6,-10,-6,-9,10,1,1,9,2,-9,-8,-10,-5,-8,5,-6,2,-9,6,5,2,-2,-3,6,-10,2,1,-4,4,-1,2,3,-3,10,2,5,-3,-4,8,2,3,8,10,4,6,7,3,1,2,-7,-1,8,-1,-2,2,-1,-10,1,-10,5,2,-5,-2,1,10,-8,-2,4,-9,-4,-10,6,-3,9,-3,1,-6,10,-1,-4,1,-1,-8,-8,-9,10,7,-9,-4,-4,-5,-2,-9,1,-5,2,-6,-1,-8,-5,-1,-8,10,9,-10,-1,-5,-5,7,-6,-2,-10,-3,-7,8,-10,5,-7,7,-9,8,1,-6,10,4,-8,6,7,7,-10,3,3,-10,-5,8,-6,-5,-2,3,4,9,6,-8,-7,-4,-9,1,-7,4,-9,-7,1,-10,-2,-4,-2,8,2,-8,10,-10,-1,3,-9,1,9,1,-1,-2,5,1,3,-5,7,6,7,8,-4,-7,10,-2,-5,1,-5,-1,1,10,-3,-8,10,10,7,-7,-1,-3,2,1,10,5,5,8,8,-7,-2,-1,-9,2,-9,7,1,2,-7,3,3,3,-4,3,6,4,6,-2,8,-1,1,8,9,-5,3,4,-6,5,7,-3,-1,-2,-6,-4,-8,-1,4,-3,1,1,-8,1,1,5,5,2,-6,-5,-9,-7,3,-8,-1,-9,-10,6,5,-1,5,-6,-5,8,-3,6,-1,2,10,10,10,-4,10,-8,9,-3,7,-7,-8,-4,10,-4,10,5,-6,3,-6,8,-1,1,8,-6,-3,-7,-2,1,-10,2,-3,-2,-6,8,-6,-8,-5,-6,-2,9,-9,-6,7,2,-4,-7,-3,-7,8,1,-4,-10,7,-5,2,4,-2,10,-8,7,7,9,7,-1,5,-8,10,-9,7,5,10,1,-10,3,5,9,6,-4,-8,-9,-8,2,-6,-6,-5,-4,-2,8,10,-9,-3,-7,-8,3,7,-7,-8,4,9,1,-2,-10,-2,8,2,-6,-10,4,-5,4,-9,-8,1,3,3,4,8,2,4,1,1,-9,-10,9,-9,7,3,5,9,-3,-1,-10,3,-9,3,-5,9,5,8,-5,4,-7,1,-2,1,3,-4,-10,-4,-8,-1,1,-8,9,10,-4,-10,-3,6,-1,3,-10,-6,8,1,7,8,4,-4,-3,-9,-9,2,9,-9,5,-4,-3,-5,-10,-6,10,5,-3,7,5,4,6,-8,-4,-9,3,3,-4,6,7,-9,7,1,4,5,-5,-3,-5,-9,-8,-7,2,6,8,-9,3,2,-3,9,2,-7,4,-9,9,-7,8,9,-4,5,-6,-9,-2,10,-3,-3,4,3,9,7,1,6,-2,1,-1,-9,1,-7,-8,-10,-5,-7,4,9,1,-1,1,-4,-6,8,1,6,5,7,-10,4,4,6,-1,-1,-10,7], dtype = "int8")#candidate|5920|(2496,)|const|int8
call_5918 = relay.TupleGetItem(func_1363_call(relay.reshape(var_5919.astype('float32'), [6, 9, 13]), relay.reshape(const_5920.astype('int8'), [52, 48]), ), 2)
call_5921 = relay.TupleGetItem(func_1367_call(relay.reshape(var_5919.astype('float32'), [6, 9, 13]), relay.reshape(const_5920.astype('int8'), [52, 48]), ), 2)
var_5938 = relay.var("var_5938", dtype = "float32", shape = (1521,))#candidate|5938|(1521,)|var|float32
bop_5939 = relay.mod(call_5918.astype('float64'), relay.reshape(var_5938.astype('float64'), relay.shape_of(call_5918))) # shape=(1521,)
bop_5942 = relay.mod(call_5921.astype('float64'), relay.reshape(var_5938.astype('float64'), relay.shape_of(call_5921))) # shape=(1521,)
func_3004_call = mod.get_global_var('func_3004')
func_3006_call = mutated_mod.get_global_var('func_3006')
call_5945 = func_3004_call()
call_5946 = func_3004_call()
uop_5950 = relay.atan(uop_5884.astype('float32')) # shape=(12, 9, 13)
uop_5952 = relay.atan(uop_5886.astype('float32')) # shape=(12, 9, 13)
func_5781_call = mod.get_global_var('func_5781')
func_5782_call = mutated_mod.get_global_var('func_5782')
call_5955 = relay.TupleGetItem(func_5781_call(), 0)
call_5956 = relay.TupleGetItem(func_5782_call(), 0)
output = relay.Tuple([call_5848,bop_5860,call_5878,call_5902,const_5903,call_5916,var_5919,const_5920,bop_5939,call_5945,uop_5950,call_5955,])
output2 = relay.Tuple([call_5849,bop_5863,call_5879,call_5904,const_5903,call_5917,var_5919,const_5920,bop_5942,call_5946,uop_5952,call_5956,])
func_5973 = relay.Function([var_5855,var_5919,var_5938,], output)
mod['func_5973'] = func_5973
mod = relay.transform.InferType()(mod)
var_5974 = relay.var("var_5974", dtype = "float32", shape = (1404,))#candidate|5974|(1404,)|var|float32
var_5975 = relay.var("var_5975", dtype = "float32", shape = (702,))#candidate|5975|(702,)|var|float32
var_5976 = relay.var("var_5976", dtype = "float32", shape = (1521,))#candidate|5976|(1521,)|var|float32
output = func_5973(var_5974,var_5975,var_5976,)
func_5977 = relay.Function([var_5974,var_5975,var_5976,], output)
mutated_mod['func_5977'] = func_5977
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2590_call = mod.get_global_var('func_2590')
func_2592_call = mutated_mod.get_global_var('func_2592')
call_6078 = relay.TupleGetItem(func_2590_call(), 0)
call_6079 = relay.TupleGetItem(func_2592_call(), 0)
output = call_6078
output2 = call_6079
func_6088 = relay.Function([], output)
mod['func_6088'] = func_6088
mod = relay.transform.InferType()(mod)
mutated_mod['func_6088'] = func_6088
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6088_call = mutated_mod.get_global_var('func_6088')
call_6089 = func_6088_call()
output = call_6089
func_6090 = relay.Function([], output)
mutated_mod['func_6090'] = func_6090
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4291_call = mod.get_global_var('func_4291')
func_4292_call = mutated_mod.get_global_var('func_4292')
call_6091 = func_4291_call()
call_6092 = func_4291_call()
var_6097 = relay.var("var_6097", dtype = "float32", shape = (6, 9, 13))#candidate|6097|(6, 9, 13)|var|float32
bop_6098 = relay.floor_divide(call_6091.astype('float64'), var_6097.astype('float64')) # shape=(6, 9, 13)
bop_6101 = relay.floor_divide(call_6092.astype('float64'), var_6097.astype('float64')) # shape=(6, 9, 13)
func_4648_call = mod.get_global_var('func_4648')
func_4650_call = mutated_mod.get_global_var('func_4650')
call_6103 = func_4648_call()
call_6104 = func_4648_call()
bop_6105 = relay.greater(bop_6098.astype('bool'), relay.reshape(var_6097.astype('bool'), relay.shape_of(bop_6098))) # shape=(6, 9, 13)
bop_6108 = relay.greater(bop_6101.astype('bool'), relay.reshape(var_6097.astype('bool'), relay.shape_of(bop_6101))) # shape=(6, 9, 13)
output = relay.Tuple([call_6103,bop_6105,])
output2 = relay.Tuple([call_6104,bop_6108,])
func_6119 = relay.Function([var_6097,], output)
mod['func_6119'] = func_6119
mod = relay.transform.InferType()(mod)
mutated_mod['func_6119'] = func_6119
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6120 = relay.var("var_6120", dtype = "float32", shape = (6, 9, 13))#candidate|6120|(6, 9, 13)|var|float32
func_6119_call = mutated_mod.get_global_var('func_6119')
call_6121 = func_6119_call(var_6120)
output = call_6121
func_6122 = relay.Function([var_6120], output)
mutated_mod['func_6122'] = func_6122
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4463_call = mod.get_global_var('func_4463')
func_4465_call = mutated_mod.get_global_var('func_4465')
call_6148 = func_4463_call()
call_6149 = func_4463_call()
output = relay.Tuple([call_6148,])
output2 = relay.Tuple([call_6149,])
func_6190 = relay.Function([], output)
mod['func_6190'] = func_6190
mod = relay.transform.InferType()(mod)
output = func_6190()
func_6191 = relay.Function([], output)
mutated_mod['func_6191'] = func_6191
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1565_call = mod.get_global_var('func_1565')
func_1566_call = mutated_mod.get_global_var('func_1566')
call_6192 = relay.TupleGetItem(func_1565_call(), 0)
call_6193 = relay.TupleGetItem(func_1566_call(), 0)
func_2610_call = mod.get_global_var('func_2610')
func_2611_call = mutated_mod.get_global_var('func_2611')
call_6194 = relay.TupleGetItem(func_2610_call(), 1)
call_6195 = relay.TupleGetItem(func_2611_call(), 1)
func_4850_call = mod.get_global_var('func_4850')
func_4854_call = mutated_mod.get_global_var('func_4854')
var_6199 = relay.var("var_6199", dtype = "int64", shape = (336,))#candidate|6199|(336,)|var|int64
call_6198 = relay.TupleGetItem(func_4850_call(relay.reshape(var_6199.astype('int64'), [14, 12, 2]), relay.reshape(var_6199.astype('int64'), [14, 12, 2]), ), 0)
call_6200 = relay.TupleGetItem(func_4854_call(relay.reshape(var_6199.astype('int64'), [14, 12, 2]), relay.reshape(var_6199.astype('int64'), [14, 12, 2]), ), 0)
bop_6201 = relay.divide(call_6192.astype('float64'), relay.reshape(call_6194.astype('float64'), relay.shape_of(call_6192))) # shape=(1, 9, 13)
bop_6204 = relay.divide(call_6193.astype('float64'), relay.reshape(call_6195.astype('float64'), relay.shape_of(call_6193))) # shape=(1, 9, 13)
func_1277_call = mod.get_global_var('func_1277')
func_1282_call = mutated_mod.get_global_var('func_1282')
const_6220 = relay.const([10,-3,-7,5,5,5,-3,-1,4,9,-9,-6,7,9,6,2,-1,10,-2,-1,9,2,-5,-2,-2,4,-5,-2,-10,2,-2,2,7,-3,-7,8,8,-7,5,-4,2,10,10,2,10,-6,6,6,-1,6,3,3,-6,-4,2,5,10,3,-7,10,9,-2,7,10,-8,6,-10,3,-9,-6,7,-7,9,6,7,5,-5,8,-6,-10,5,-4,-2,3,-3,6,-10,-8,-5,7,2,5,-9,-9,-3,9,-4,-7,9,-2,8,-4,-1,9,9,-7,10,-10,6,5,-10,-1,7,-3,-5,3,-2,-2,-9,8,-9,-9,-8,-7,10,-6,-4,5,5,2,-4,5,-1,-9,-8,-8,-4,5,8,8,1,8,-3,1,-4,9,-5,4,-9,-6,-1,-5,5,-7,-1,-1,-9,2,-6,9,5,6,2,5,4,-10,8,-8,-7,-6,-9,3,-7,-1,7,3,-10,9,10,3,7,-6,3,10,10,10,-4,-1,-7,6,-4,5,9,-8,-10,-2,6,-4,4,9,-1,-7,-4,-7,-1,-5,3,3,-6,10,9,2,10,4,-1,1,-4,8,7,8,-2,6,-5,-7,7,-4,9,-4,4,-4,3,-9,-4,-4,4,-10,5,10,-3,8,6,8,9,-4,-10,-2,-6,9,-7,10,2,-6,5,8,4,-8,9,-6,8,3,-2,8,-5,-5,-7,-4,6,10,7,-9,-4,-3,-5,-1,-3,-8,1,-1,4,-9,-3,-1,-2,-8,9,-1,-6,-5,-5,3,-3,3,8,10,-9,2,1,-1,-6,-1,-8,-7,-9,5,-9,4,-1,7,10,-3,6,3,3,-8,4,-4,-4,-9,3,8,4,7,-8,9,2,1,9,5,9,-1,-5,-7,5,-3,-2,2,3,-3,4,1,4,-3,-7,5,2,-8,10,-9,1,-5,2,-9,9,-8,-4,8,-2,-10,-9,-4,10,9,9,-7,9,5,3,8,8,4,6,1,-5,6,8,7,2,-10,-6,-1,-2,6,-10,7,10,-9,7,2,-3,-6,-8,8,8,1,8,-9,-8,-6,-9,6,6,6,7,5,-8,-10,-3,8,-10,-7,1,-9,-3,9,7,3,-3,9,7,-2,7,1,2,-3,-8,-1,8,-8,-2,-5,2,-6,-5,7,-1,6,2,-7,-9,-9,3,-6,7,-4,-2,-1,6,-1,2,-2,-8,-2,8,-7,2,-1,-5,7,-2,-2,-9,1,10,-6,-2,7,7,-4,-1,-9,8,-9,9,-6,7,7,1,-1,2,3,-6,-5,10,-7,10,-3,9,1,5,3,5,10,-10,5,8,7,8,8,-1,8,-4,10,-10,3,8,1,-8,9,2,9,2,4,7,-10,7,-10,9,-4,10,-8,3,-2,-10,8,-5,-10,4,10,7,10,8,-5,-1,-7,8,1,-7,-2,-4,-7,-7,9,-2,-5,-9,-3,6,-3,8,-7,-9,8,1,-1,10,7,6,1,5,6,-2,10,-8,-4,-6,5,-1,-9,2,-1,-7,-10,-4,-10,-6,4,5,5,-6,-2,-1,-8,-7,-7,7,1,-6,-9,-3,-1,5,-6,-7,6,1,-10,4,-9,4,-1,-3,7,5,-2,-2,7,6,10,6,1,-3,-4,-8,9,10,-3,4,2,5,-8,-5,-6,10,-8,-1,6,1,-10,-4,1,9,-6,-5,2,2,-8,-5,-10,10,1,-9,5,8,9,4,-5,5,4,10,9,-6,-9,-1,3,-10,-3,1,1,3,1,-9,8,10,3,10,1,8,6,-10,-3,3,-1,5,-6,-1,6,7,-5,8,4,9,5,-7,7,1,-10,-7,3,-3,10,7,-4,-10,9,7,9,1,3,6,-7,-1,3,8,-2,4,4,8,4,-9,9,8,-1,-1,-9,6,5,-5,-7,-2,-3,-1,-8,5,8,-6,-9,4,-3,4,-3,10,-8,-4,-7,2,-7,-6,-3,-6,4,-7,-6,3,-9,5,-9,-9,9,2,4,-5,8,-5,-10,-1,4,-9,10,-2,-1,10,-4,-7,-2,9,4,4,-3,4,-9,2,-4,6,3,4,6,3,2,-3,8,10,-5,-5,-5,-6,3,-10,8,-10,3,-2,7,9,5,4,3,7,-2,8,3,-4,1,5,9,8,-9,-2,-6,-8,4,-4,7,7,-6,-7,-9,7,-4,-7,8,-6,6,5,-3,-2,-6,6,-2,3,7,6,10,4,-6,6,4,10,1,3,10,-3,-6,10,-9,5,-4,2,4,7,-4,-3,6,-2,9,-3,1,-3,-2,-4,-7,-8,1,4,-3,5,-3,-10,2,-6,-5,7,-4,4,7,-8,8,7,6,-5,2,8,10,2,8,-2,8,1,-2,-7,-7,-5,-1,-4,-4,5,1,-1,1,-3,-3,4,-4,3,-1,7,5,5,-6,4,10,-6,-5,3,2,7,-1,-7,7,3,10,8,-3,3,1,-9,-9,1,-4,3,8,-1,2,-6,-8,9,-10,-3,-7,4,6,-9,10,2,-2,-2,-5,-1,-1,-8,-7,-4,3,2,6,9,9,8,6,7,-4,-10,2,-8,10,9,-2,-4,2,6,-2,-9,-3,-4,8,-8,-10,1,-2,4,-6,9,6,2,9,-6,-3,4,6,4,1,6,2,3,10,-6,-10,4,-8,6,4,-8,10,2,2,-10,8,4,7,4,7,-2,2,-3,-2,-8,2,5,10,8,3,-6,-3,-1,-10,-8,4,3,5,6,6,8,-2,10,8,7,-3,4,-5,-8,1,-3,-5,-3,-4,-2,5,-8,10,-8,-3,4,9,-6,3,1,-2,-9,1,-9,-2,-3,10,-1,-9,-3,-5,-2,2,-9,2,9,4,-10,1,-10,-2,-10,-6,5,2,-10,2,3,10,1,4,7,-1,3,-10,-6,7,5,7,-9,-7,-7,-10,6,-2,5,6,-4,-1,-10,-9,3,10,-7,9,5,-4,-6,-3,-8,9,9,-3,2,-9,5,9,-5,-6,-6,-10,-1,-5,1,-1,-1,2,6,4,-1,2,-2,-4,10,9,2,-8,4,-4,-3,3,5,-5,-1,1,-1,-8,4,8,-1,-1,-4,10,4,4,6,1,-3,2,-7,-7,-8,1,-8,-7,6,4,6,-10,5,-10,-1,4,-9,-1,-3,-5,7,2,-5,-6,6,-2,3,5,-8,-3,-7,-5,5,-3,6,9,5,9,-2,-2,-5,3,10,8,-4,-7,9,-9,9,3,3,-9,5,8,-2,-6,-7,-7,-8,5,7,6,5,2,-9,-3,9,9,-1,1,-9,2,-7,-3,5,10,-9,10,2,-1,-7,3,6,9,-1,3,-9,-6,-4,-5,4,-3,-4,8,-4,-8,5,6,5,1,8,-8,8,5,-2,3,8,10,8,7,-8,3,-8,5,6,1,-9,-3,10,1,10,7,-9,-9,6,-6,-3,-8,-10,6,10,-2,-4,-7,4,-6,1,2,2,-4,-1,3,-1,-7,-5,-7,-10,-3,3,-9,-6,-3,2,-7,-9,3,3,-4,-6,-3,3,3,10,-8,-3,-2,-5,8,-10,-2,-7,-9,-10,7,7,6,-2,5,-6,-5,-1,-2,1,6,6,-10,-2,5,5,7,-2,2,-5,-5,2,-9,-6,1,-10,9,-2,1,2,-5,10,1,-6,-5,1,-1,-2,4,-1,5,10,1,5,-8,-10,5,5,-1,8,2,-9,-10,3,-9,1,-10,-8,-4,3,-1,3,2,-10,10,2,-7,5,10], dtype = "uint32")#candidate|6220|(1404,)|const|uint32
const_6221 = relay.const([[4.050629,-2.521293,3.141393,-9.145391,1.040586,8.082626,-3.898990,-9.957192,1.264132,-3.294013,-4.576478,-2.633012,-0.556899,8.764017,2.071129,-4.502250,-3.389200,-6.670102,-1.459114,-4.110358,2.317727,-3.414127,9.380876,-7.314993,-2.343785,7.662729,2.586328,8.122102,2.592655,-6.207624,-1.402015,-3.681216,-3.296871,6.860880,4.366448,-7.128937,4.247482,-3.833360,-8.786278,0.428502,-9.760513,0.303998,-2.099608,6.186709,4.956907,-8.077307,5.837887,-8.655648,6.925776,-4.297556,-0.844190,5.187945,6.516958,-4.370483,-1.466537,2.844133,-1.102872,5.524488,0.155277,-4.368714,-2.115221,-7.849652,8.816410,9.210272,-9.925020,-1.183206,6.701491,-7.639550,0.317778,-7.554909,-6.446762,-1.052485,-8.513074,5.449232,9.515918,8.694136,-0.105262,7.211685,-7.485804,-7.397705,-3.932353,9.215282,-5.785795,-8.597116,-3.077141,-4.788372,-3.754861,8.623663,-0.749658,-1.476539,6.995641,3.243524,-4.038586,6.614088,-0.391090,0.656840,-4.308372,-1.089179,1.386785,6.208723,3.957567,-9.213618,-5.884806,-9.356132,8.973517,-2.372874,-2.361301,-3.982813,-3.890369,-2.036310,-9.141496,0.572081,-4.080788,6.871983,7.793249,-9.368404,-0.937209,-0.640284,-8.853173,0.620885,-5.169650,-8.910963,-6.677725,5.586353,4.300612,4.102864,1.144963,-0.544064,-9.886546,7.843229,-9.358570,-8.636724,0.133893,-3.892365,0.464758,9.524009,0.078544,2.263438,-2.426220,0.138118,-9.831948,4.991864,4.944364,1.239822,-6.731706,2.808466,-0.694669,8.843451,6.878442,-1.283067,-8.759486,-5.308050,6.440462,9.567368,-0.343692,4.157938,2.042425,-3.157055,3.261761,-3.487495,4.246768,-2.339373,2.952564,0.642644,5.115101,3.275908,5.012466,-0.121172,0.512167,-7.520512,-6.411357,-7.239599,9.227344,-9.277265,4.385192,-7.168189,1.249058,-7.150461,-7.614056,8.202759,4.789816,5.082429,-0.103844,-4.280097,8.886550,0.653155,-5.223780,8.822234,-2.667475,-3.735447,-4.291419,-5.906616,-0.865494,-4.732793,-4.658590,-2.049042,9.938274,-8.370441,6.644477,0.037805,-5.490273,-3.326379,0.162011,-7.075498,-6.992845,7.968037,6.444511,-0.156463,-5.858060,-2.491659,-5.348037,2.501088,9.453203,4.095272,-2.822950,8.147590,9.252584,2.413187,-1.015145,-6.808527,4.738264,5.997721,-2.818866,-7.171043,5.232552,5.866495,1.189456,3.591452,6.768176,-7.018731,8.416212,-6.868000,9.943448,2.620660,5.842750,-4.502446,7.253709,4.947993,9.354131,1.173715,-9.071581,-1.093822,7.392803,-2.747854,-0.811017,-9.947982,2.424907,-6.682288,-8.473953,-9.948012,-2.609611,-6.058749,-5.157905,8.670231,1.334611,-9.960055,0.375350,-0.912540,-7.281772,5.211816,7.283237,1.212071,-9.789550,1.885463,3.743718,-4.309056,3.862627,-2.401587,-0.020193,5.520729,-8.021574,-3.386513,1.659188,-9.866796,6.418426,-4.524710,1.920162,9.835059,-1.187100,-6.684148,-9.870138,3.459664,-0.594438,-8.582352,7.749224,-3.337417,6.785353,8.666211,6.710179,0.799329,-5.715943,8.772975,3.549983,2.593875,-2.048525,2.843105,8.038235,-9.356591,-9.872014,-6.384139,-6.087902,7.785887,3.027076,-8.271035,-1.861039,-7.592572,-7.443187,-8.470748,-1.161377,8.890985,-6.736265,-3.575067,3.381987,6.432415,9.743485,5.720143,-0.577888,7.960810,7.393851,8.798764,8.333071,-1.992780,6.265828,5.642555,6.395145,-5.055583,-3.154150,0.766300,3.797881,3.094849,-2.912128,0.605301,-0.026624,6.003427,-0.180003,1.241102,-3.274967,6.505126,0.910144,4.786274,9.908253,-0.998759,-9.502992,2.645816,-1.729231,-6.168511,7.614981,7.071776,7.637670,-1.852781,4.482763,0.109548,4.321110,-3.749628,-4.864131,3.151553,4.066214,4.349936,8.911586,-2.096339,9.033415,9.184080,-6.134643,-3.065471,7.923732,3.495598,0.118615,-5.500761,-3.192096,0.296037,-1.125659,-1.470745,-3.997982,-7.647657,8.349090,0.300925,0.538745,4.927317,0.509673,1.976381,-3.300313,-0.291593,-3.084053,7.627033,3.958277,4.621238,3.163137,1.617668,7.006439,-7.494980,-7.531019,3.875016,-2.546309,8.619010,4.865017,-2.452798,-1.850053,8.684112,3.656902,3.126003,2.560484,-1.980854,-2.572167,-9.582101,6.725570,-0.034794,-0.015734,-0.308888,3.776859,-9.024165,-5.246426,-0.029838,9.451552,5.578154,-0.012261,2.874158,4.207588,7.425299,-0.712763,6.673208,-5.472201,0.776462,-2.847857,6.482504,-9.287547,-1.085326,-0.338323,5.112564,-0.054647,-5.925844,7.907529,-0.470902,0.914795,-1.203209,2.272088,-6.937244,-9.291995,-9.477564,2.366934,-2.545948,7.138273,-1.621891,7.146157,-3.968847,9.365097,6.980226,-1.727223,4.352948,6.876769,8.607509,-3.706323,-1.608071,-6.401023,1.064440,-1.177401,1.673882,-7.786857,5.580320,1.527590,5.192616,-9.303603,7.779386,-9.235933,-4.502751,-0.632724,-6.926192,8.555778,5.167318,6.316117,1.118445,-5.600462,0.541141,3.082406,3.163703,-6.706268,8.408767,2.214166,-5.828408,0.162370,0.959522,-3.908695,-6.305366,-2.627721,6.206632,-9.254079,5.009052,5.241169,1.395073,5.748426,6.718972,1.105183,-0.268262,5.646623,-6.005133,5.263677,0.495774,5.033400,-5.328282,9.849032,1.060177,-1.288236,7.575093,-6.142571,-9.292523,6.677468,2.635646,-9.415540,2.807801,-5.947015,7.082894,5.912951,-8.786900,-6.897167,-3.719259,-5.495147,-4.221346,-4.185578,3.552640,-9.812852,-6.806548,3.170918,5.854292,7.877515,-2.478273,-3.446193,1.228438,-1.770117,3.431533,-4.736051,-2.544555,0.920568,-7.104041,-7.301553,-5.334376,6.178136,-9.580295,2.358689,9.335137,-5.064298,-8.566131,7.473344,-8.757825,8.299729,-8.721828,5.040086,8.853469,6.110383,-5.106073,1.409347,4.556552,0.988056,4.966387,9.777879,2.764856,-9.876879,-1.334090,-7.595484,2.675230,-4.927061,9.834057,0.969611,7.495320,-9.779217,-6.352362,-9.159170,1.400717,-4.420054,-0.556129,3.168881,2.773556,-5.921380,2.808616,0.384576,-4.801065,-3.269987,2.914313,-2.088651,0.109656,5.158541,-5.968510,5.248559,6.344650,0.517215,6.376317,-3.990693,-0.895087,-5.636588,8.106157,7.101330,-4.366002,4.782338,4.426452,-7.718767,8.059466,-3.277927,2.503617,8.241650,5.467571,5.647336,8.563150,-8.768827,-7.849861,6.085350,-6.059936,4.017400,-0.419528,-0.128616,3.402094,-5.491064,-0.300792,-8.295997,-0.100013,9.332000,-9.702948,-2.439066,-8.860844,-3.698887,-8.166372,-9.327561,-8.198491,6.759599,-3.453242,-4.060276,-1.560300,-0.195860,4.352700,-8.575607,-2.743478,-1.935749,-1.343411,-3.849772,1.492817,6.609530,-2.449575,-2.726370,-6.347003,-6.628489,4.801996,-8.130078,4.907906,4.403283,1.998085,9.520267,0.278927,6.967757,-8.114908,-2.458986,-5.058681,4.806115,6.047010,7.124136,1.553898,-1.455646,-0.680879,-2.566281,-0.523345,-9.518001,-2.424259,8.974387,7.356530,1.435267,2.748336,2.967525,-0.836234,-2.952126,-9.776372,5.633706,1.154203,5.792165,-7.471113,-8.193045,0.723925,-5.323414,-7.229666,1.504468,-7.740424,3.890754,-4.330784,7.629176,-8.655510,-6.619089,9.778095,-4.473153,1.556263,-7.459930,-3.006556,-7.967979,-9.047942,7.295021,1.821628,-0.788703,3.085957,0.570032,0.954324,-2.746254,-8.140809,-7.743704,-8.822193,6.911467,-2.514345,2.844729,-1.406282,-9.107860,1.101037,6.116416,-3.365389,-0.043157,3.505699,0.268435,3.870944,-2.214711,-2.330317,6.576666,-2.924864,9.679844,2.096195,3.079057,-7.360955,-6.799070,3.021197,-4.792991,6.008844,1.787080,-3.205592,9.881729,2.733970,-9.691104,5.680537,-7.259222,-2.121134,-3.612043,9.553831,7.412325,-4.913811,0.609654,3.486538,5.489235,-4.771962,6.594038,-7.552030,-4.273102,0.598338,4.743007,3.889351,-2.530480,1.905512,2.309220,-1.697013,0.275784,-8.374600,-3.923516,-3.407166,-5.393673,-9.009656,-2.993438,9.153321,-3.115268,2.583388,5.039479,-2.233744,-1.035691,-4.108037,-4.941127,-3.864758,7.969402,-1.546814,-6.424886,-1.402916,1.811909,-0.282691,1.215376,4.063184,-6.199433,5.407001,4.631169,7.646801,-9.247823,9.741627,-5.667468,-4.581507,-2.516362,5.021816,4.256082,7.607000,3.163394,-2.729371,2.834690,-0.046729,-4.945761,4.778720,4.550760,9.874244,7.369102,-5.307598,-3.824705,6.680289,5.528485,7.042771,-8.529362,-5.686409,6.933004,-3.977746,-9.059408,-1.522918,0.621261,-9.459376,5.872563,-1.475117,-3.966473,-4.752863,3.068901,9.357810,9.449726,9.832208,9.146825,9.029600,8.217791,-5.006415,-6.683906,-4.196178,-7.763832,5.371877,8.248413,-6.896897,-8.950938,-5.834718,9.853221,5.724512,6.752571,-3.021345,-7.888978,1.856639,-6.030261,9.386177,-1.410302,-2.815709,-6.274421,-4.431812,9.363656,2.111070,-2.354643,0.629664,7.625886,-3.729625,3.303646,0.818682,-9.713146,7.509504,-1.362695,5.246668,8.763562,-4.635746,3.385121,9.547951,4.212625,9.644375,-6.234175,1.415633,0.479270,-6.317139,8.282278,-1.085165,-7.123308,-0.512272,-0.967383,-4.526063,3.792496,7.001611,3.105875,0.049853,0.412599,-8.704604,0.165731,0.946971,0.518622,2.918904,9.684846,-7.106142,-6.730376,4.925516,7.170726,-9.064168,-0.085676,4.762012,-1.929655,-0.314651,2.238712,0.250422,6.383229,8.112097,4.900286,7.277214,-9.070216,-5.909443,-4.806906,6.978113,5.488436,-6.330381,8.182133,-1.986317,-8.338140,0.888060,2.118771,-2.710760,8.579215,-7.005383,-6.802381,-1.973179,0.204977,4.378759,-9.093401,7.997720,-2.818213,2.441320,-7.666756,5.521615,-9.820590,-5.263225,-6.589186,-5.609329,6.988443,-9.125257,-5.862945,-4.482668,2.115377,8.705344,6.949092,-8.898812,-7.033443,4.133990,4.032429,7.452529,-0.780472,0.334724,-6.247740,-5.023453,-8.262781,-8.840657,6.251656,1.817202,-2.258477,-5.780428,9.936299,-6.222023,-1.051181,-3.717969,-0.371512,-7.830477,-7.165707,8.161117,8.349043,-6.429410,-0.937195,7.816840,5.422382,9.296523,5.518392,1.244034,-2.323388,9.313648,-1.786667,-0.548118,6.479078,1.795409,-7.859634,0.711559,-9.247564,-7.982539,-1.225793,6.735036,-5.668388,2.181430,-0.953621,-9.529828,-3.253365,-7.311466,-5.536752,-7.610258,2.658293,3.283516,-1.591896,9.300450,-2.122284,-6.645817,9.780023,-0.708862,-2.749350,-9.007778,4.716613,8.537835,-8.952766,-5.669752,-1.279024,-0.572622,-8.449779,4.033567,-5.613617,9.549612,-1.659375,3.612398,0.522245,2.626976,-1.938587,9.429472,9.591070,2.849534,-7.919296,-2.125936,-2.671864,-5.786636,-6.205123,-1.832040,-7.118264,6.477815,9.350999,9.093965,-1.995346,-2.265454,-2.113829,-3.881988,-2.781426,2.850167,2.856347,4.605814,-2.486400,-6.673255,6.497468,-7.127554,2.956231,0.171147,-0.247989,5.177148,3.094397,4.562706,6.943072,9.339286,-5.494024,-1.331162,-7.956535,2.712931,5.890495,7.684536,-7.584771,8.465271,3.126892,-6.667030,4.651396,3.060414,4.417538,-2.002106,-2.206330,-7.922213,-1.272879,8.058270,-0.425113,2.757690,-2.238688,8.926252,-2.680945,-7.949538,0.847564,-8.631237,8.731636,1.785730,-0.315963,1.741653,-5.617272,7.341956,5.992557,2.144862,-0.576713,2.123756,-8.589212,1.273434,2.232287,-7.442662,4.828394,0.651614,-8.880728,2.659060,-9.564997,-7.276274,2.091480,0.759754,-3.611591,-5.827503,-0.050026,4.793861,-9.855208,7.738083,4.910500,-4.998067,-1.387820,0.121201,1.901790,-8.000949,2.743910,-3.860572,-2.213034,0.537704,-4.729064,6.115099,-5.571434,0.977054,-4.198470,-8.014503,2.670827,-9.612029,4.550569,-3.381351,-2.251982,-7.080729,2.240378,-9.959400,8.603629,-1.973410,-3.565654,-7.320150,7.206396,0.376618,-6.031696,6.758411,5.896780,-2.940828,4.629887,6.082197,4.147460,0.554934,-3.607610,-6.509989,-5.388399,2.990667,4.696403,2.152171,-8.009825,-4.891215,-6.623586,-8.277672,5.033173,-0.900642,2.232891,-4.212194,-8.345081,-8.842619,-1.953193,-4.017651,6.066700,0.090619,4.499346,8.482758,1.678236,-4.911079,8.611524,0.725017,5.113112,8.377368,3.252258,7.275193,-0.121737,-4.423501,5.044519,7.795071,2.762843,8.676861,5.454746,-7.790710,-4.662285,-7.770033,5.298901,-4.490137,-2.865600,7.754956,0.150656,3.847292,-1.520038,-4.821237,-7.266386,0.289513,-4.825402,-1.427988,4.281315,8.062161,0.741098,-7.733750,3.517692,-1.045196,-0.685533,-5.347262,-0.771611,5.282848,2.774872,-0.619145,2.101817,1.522113,-7.983333,3.984848,-5.280453,1.324400,7.291175,-6.049001,-7.301785,-5.567937,6.190901,4.120496,-0.755762,-2.053576,-9.668801,9.207841,-5.732948,-5.911203,-7.487990,9.253831,-5.795514,-4.437139,-7.001596,-7.806496,9.643210,6.658980,9.995849,5.328633,-0.459853,-2.018939,-2.963430,-6.461538,-6.196587,-1.544764,1.554547,-0.165713,-2.646306,8.253020,5.848938,-8.618071,-0.820882,0.892671,-7.081279,6.290428,1.482573,3.859740,2.678135,-7.967716,-9.811446,-2.505152,-0.865329,9.817611,1.892661,4.935875,1.309792,-0.074464,-2.970617,8.390996,-1.837885,9.592234,-9.688049,5.169117,-6.446220,-8.034014,-6.038539,-5.364900,8.139188,-2.581761,-4.318893,8.541093,3.642467,9.588501,-9.126665,-0.935777,1.901854,-1.801245,-1.007646,7.521256,1.667776,-7.059863,-6.773211,5.337606,-9.046523,1.555293,4.880830,-2.511056,-7.900514,-7.649924,3.990175,4.057139,-3.809595,-0.106556,4.812100,-6.108953,4.044560,0.820116,5.757875,9.054755,-0.467797,0.993799,-0.678549,-9.562009,8.793773,7.553872,4.772701,-1.133754,-6.361848,-9.577887,-1.773099,-9.303511,8.557576,-4.656874,-4.891544,4.850326,-8.676782,1.890442,-0.325783,7.551900,-6.587114,-5.611622,9.373651,-2.045563,-6.399255,8.944331,7.853068,-1.400781,5.498529,5.341091,2.454194,-3.870835,6.534573,-3.289018,9.438244,-0.318244,-2.321473,8.378137,2.325544,8.737067,0.644712,-5.157776,-5.503030,9.676972,5.018495,-0.306703,7.866857,-2.524794,-7.949215,4.749088,-0.538334,4.832752,-7.746742,-3.691313,-2.091142,3.428266,7.935048,-2.385584,1.879351,0.815353,9.431941,9.771811,7.641882,2.596933,-7.990383,8.146727,-2.525232,5.605412,-6.874179,-7.441570,8.983044,-4.220088,-5.250429,-7.560139,-4.557910,-5.158625,1.411219,2.847010,-5.686564,-6.533799,9.671347,3.798343,9.255676,-6.074597,1.995853,-1.195133,1.231204,4.815728,-8.704146,7.567173,6.839959,-4.494373,6.354872,8.653277,-3.877721,-0.354748,-2.071207,-5.249828,-6.600601,7.363945,8.136358,-2.166173,-5.344596,-8.091826,7.272799,8.497000,-2.324468,-5.453439,6.110014,4.211704,2.561662,9.588820,2.237514,7.920251,1.255332,5.417372,7.331587,8.549207,9.903971,-5.578566,6.669908,-7.318172,0.552101,0.104114,-4.762591,-3.652102,-7.697974,9.986805,4.527704,3.886824,1.685767,-9.995104,-4.735760,-7.414866,4.855095,-6.137165,1.080967,-7.912990,5.229316,9.542140,-6.625187,-1.401707,-4.553392,2.488935,-2.383416,-0.016833,4.505874,-4.195197,-1.453110,-6.548091,9.745128,-4.961200,6.234921,2.577654,-6.578460,-2.450501,5.242162,8.033462,3.933504,8.795893,5.361389,7.230899,-4.271727,-7.891701,1.982931,5.620114,6.249778,3.975602,-1.327976,-0.101906,5.822773,-5.192681,3.462791,-0.090909,-2.118323,-3.570512,5.699295,-7.231662,-9.326864,-9.295812,8.421359,-3.174112,5.911296,2.499042,5.335897,-1.430888,8.466946,4.697367,-5.122499,1.214927,6.720935,-6.992895,3.851493,0.274177,2.431339,0.907146,8.751305,-0.153593,8.119902,-1.011972,9.184202,-8.310541,2.491178,6.501768,9.762242,-5.081343,-1.813557,-7.095064,-8.560511,0.939189,6.829802,-1.196125,6.495696,-2.478496,5.484186,8.723010,0.424868,3.819142,7.184984,7.551551,3.392282,9.208106,-9.887374,1.360211,9.754130,3.743191,-4.633568,9.209130,-7.865591,-9.963957,0.732716]], dtype = "float32")#candidate|6221|(1, 1521)|const|float32
var_6222 = relay.var("var_6222", dtype = "int8", shape = (2496,))#candidate|6222|(2496,)|var|int8
call_6219 = relay.TupleGetItem(func_1277_call(relay.reshape(const_6220.astype('uint32'), [12, 9, 13]), relay.reshape(const_6221.astype('float32'), [1, 1521]), relay.reshape(var_6222.astype('int8'), [2496,]), ), 3)
call_6223 = relay.TupleGetItem(func_1282_call(relay.reshape(const_6220.astype('uint32'), [12, 9, 13]), relay.reshape(const_6221.astype('float32'), [1, 1521]), relay.reshape(var_6222.astype('int8'), [2496,]), ), 3)
func_2447_call = mod.get_global_var('func_2447')
func_2450_call = mutated_mod.get_global_var('func_2450')
const_6232 = relay.const([-6.641448,-6.349797,-8.500226,-1.559823,1.472457,-7.455949,4.636646,-3.758405,-4.531351,1.379255,2.798948,-2.797689,2.612396,-1.626767,-9.523432,4.102270,4.857919,-4.404744,5.872254,-8.042309,1.591013,7.928325,-6.614108,-0.863602,5.100409,8.528882,0.620204,-2.358405,-6.584941,4.005137,8.888740,3.050427,-6.798502,-3.914264,-2.194757,-2.664866,7.259334,-1.941615,3.854262,3.517284,6.438730,1.619059,-5.632313,2.380691,-8.640374,-2.370760,-7.794043,9.064453,5.221954,-4.502891,-7.729304,1.048641,-7.850948,3.169844,1.964733,5.576593,0.022883,8.141137,-0.527626,-0.665895,-8.537059,-2.324101,-1.205407,3.395546,9.678770,3.620570,3.456029,-9.544668,4.622648,6.200077,-7.948582,8.718598,-9.281156,4.669493,1.525315,6.066765,-8.791894,-7.993877,2.099749,-2.142054,2.195823,-6.774410,7.856618,3.033818,-1.798350,8.777009,6.971131,-7.261147,3.528201,-7.486918,0.258889,-5.822783,7.902493,-3.624391,3.390006,0.668466,3.855037,6.780397,-0.945123,1.952832,8.430115,8.396921,4.470786,-1.364084,-1.505876,5.022984,5.447784,8.741148,7.134601,8.136515,9.711275,5.498339,8.921462,8.824506,5.859657,-3.910981,0.696594,2.531386,-9.498235,3.967014,-2.765445,-3.530122,2.624145,-6.395821,-6.285932,9.363836,8.194337,-2.266872,0.600336,-9.956761,-7.272380,3.182739,8.330911,-3.390847,2.088086,-8.842293,-9.899331,0.236143,-7.390526,-9.923310,6.475966,-6.524144,8.217352,5.769677,-8.387230,2.315938,2.232966,-4.847856,-4.495303,-7.471826,7.460936,3.363164,8.204284,2.366681,4.719839,-3.750463,9.262736,7.394893,6.435780,6.497696,-6.356786,-9.957754,0.570209,-5.127803,8.027206,0.325118,3.550421,6.015587,4.126672,4.775505,-9.502371,-2.326157,-2.522359,-4.125149,-0.708914,-7.376957,2.182634,-9.415505,2.810384,-3.383008,5.493870,5.082897,-2.594273,-9.240785,9.883114,-9.860409,3.680676,0.193072,-7.440333,-5.343529,1.563999,-6.846477,7.861714,-0.234719,2.489405,-6.767025,-1.016098,-2.750239,-2.998683,8.192912,-7.270590,7.937087,-5.767674,7.471272,5.631854,3.098521,-2.179426,7.240670,2.802980,9.832946,-7.793051,8.308214,1.386165,2.567723,-2.817682,-3.533051,3.003388,0.391982,-7.222359,-7.121536,-0.287829,7.777679,3.487907,-7.964414,-7.313707,-0.183308,8.207326,4.007819,1.941849,-8.242667,2.854994,-0.744984,2.648833,-4.486044,-7.966702,6.410221,0.603687,-3.298581,0.547033,7.135466,-2.375550,-1.501498,2.417633,-5.391234,-9.095075,0.726027,3.540156,-0.878934,1.545218,3.073650,-7.200677,-8.208467,2.369294,-6.126516,2.752184,-8.022701,5.771841,-0.201489,-5.752827,5.244117,0.036269,9.197718,-8.882749,3.021050,-8.443544,-9.576581,7.098948,-9.762813,1.508803,8.465044,-1.684245,-4.452167,-5.778974,8.751377,4.100996,-2.505050,2.029370,-2.414663,4.471543,0.389281,-4.394172,-6.374750,-8.333028,-3.385862,-3.989052,-0.715921,6.838226,-0.016206,7.999867,-3.588071,3.797313,-1.961389,-9.351786,-2.239457,-1.641203,-9.011755,6.626812,3.102612,8.880245,8.433753,4.449185,3.171096,-4.194692,2.429875,4.505462,7.056126,-2.858899,5.331337,-5.448358,-6.216111,8.441787,3.199438,-8.779508,-6.459329,-7.458122,6.581458,5.920689,-9.631769,-0.914485,-3.506029,1.872938,-7.732950,0.709786,5.688259,-5.140543,-9.650803,-5.478084,-3.200431,-3.819543,-9.841589,2.237749,4.378917,-6.377826,-7.773171,5.215712,-9.958647,-6.757419,-0.788797,-2.061005,5.883716,1.951149,-5.368676,5.456962,-1.455057,4.127033,-8.732187,-2.586398,-9.937263,8.021102,-6.287015,6.732690,-1.909973,6.898357,4.066803,-3.182764,-2.111709,-1.635786,9.026174,-9.988297,-2.063280,-3.067020,-8.945562,-2.372191,-4.473003,0.266981,-7.005786,9.144081,3.142611,3.393787,6.543590,0.308906,8.609581,-6.542664,-3.063109,9.917956,7.596841,2.826966,-7.631989,-5.512181,-4.293092,4.385602,-1.363360,1.656027,-9.166601,-9.139830,-6.456708,3.691912,6.901263,-1.960550,-9.578791,-3.218101,4.464965,6.738946,9.176015,-2.400033,-6.783811,-4.071897,6.583998,-6.972009,-2.914720,7.446841,-5.477986,5.090505,-3.912097,7.722078,2.062232,-9.972897,-1.786815,-5.967145,9.156104,0.864928,0.871460,-4.890763,7.313613,-6.461515,4.378139,-4.819428,-5.729522,-8.569030,3.233323,-2.546905,5.044134,7.995858,-4.835556,-1.529508,1.878734,2.739470,2.526936,4.821843,-4.777645,7.602523,9.179691,-8.182433,6.034039,-0.184862,-3.119080,4.525083,-4.001774,4.145980,-9.030354,-1.219940,5.518609,-9.075379,-1.783145,5.195685,8.110247,-3.538494,-6.420408,2.889056,7.948375,-7.689703,-7.210437,-5.037600,3.302039,3.305160,5.265644,4.143059,-2.581424,7.852769,6.772332,5.785559,7.949094,6.967688,-3.765625,4.271236,-4.011549,-3.643402,7.199640,9.705856,-6.025040,6.019328,7.504971,0.051319,-0.851330,-3.797051,2.207059,7.250666,0.624339,3.294876,5.592766,-2.280460,-1.411485,-6.432451,3.657885,-2.474315,-2.966917,3.385731,-6.017320,3.037886,5.131479,-6.978616,-4.070589,-2.032481,-0.508881,4.605105,-5.888829,-5.824031,-3.858023,9.748977,-3.525924,-5.854449,6.499416,-0.030265,-7.608165,-1.497381,2.577212,-3.656796,-1.384878,-3.476761,-1.844415,-5.510738,7.077079,-4.930860,5.963036,2.969416,2.511050,8.651720,4.470183,3.344017,7.248132,5.138455,-7.582848,-3.340113,-6.696981,-2.226531,0.485548,-2.881095,0.012933,-2.968977,-3.563826,-8.469001,0.096031,-3.437333,-0.652019,-0.015041,0.025064,-3.823353,-5.162593,8.486063,4.592278,3.832989,-4.505228,9.495489,-2.536676,1.343281,4.689228,4.122392,0.632943,6.878021,3.775084,5.411968,-7.978967,-7.755449,6.095892,4.722958,1.838484,5.189790,-2.811286,1.947638,-2.485688,8.411727,5.417708,0.340065,-4.078856,-0.916470,-1.856614,8.050918,5.474856,1.568591,4.741746,-0.815846,-0.307454,-7.806803,-4.468185,4.496924,-9.609564,6.687857,3.424915,-9.748209,4.042091,9.708971,0.150013,-1.498450,9.185448,9.926488,7.509333,1.202816,9.750822,-3.707050,-2.097024,-4.206793,7.990202,-7.511398,-6.097077,-7.565116,4.210583,-0.307136,-7.784198,9.435873,-8.771089,-9.777524,-1.913549,1.247906,-3.779892,-5.759268,-3.788874,8.092477,-4.651730,-8.632135,0.427926,-0.420073,7.541895,6.849034,-0.370704,1.124278,3.577947,-3.499594,3.139413,9.669754,5.887553,-3.396848,-7.526578,3.966702,2.214885,-3.367840,6.525901,0.599506,1.290209,-8.556756,-8.754635,-6.456388,-4.006983,9.627881,2.472983,1.730026,-3.979900,-3.232486,6.581205,2.334881,5.454824,8.358341,0.087308,1.671459,5.816797,-3.913028,4.263684,2.944495,2.461014,-2.473963,4.035978,9.423081,5.597390,6.136259,-4.033083,-8.398625,-3.922862,-4.534811,-6.239973,-4.177711,4.815695,6.332891,1.466277,-6.383277,-0.777816,3.791169,-5.681106,3.453828,-4.468374,7.700806,-9.166140,8.048351,1.284684,-5.861919,3.165471,-1.882264,3.655136,-4.204534,-0.722184,1.764291,8.933816,7.603419,8.739739,6.288471,7.269543,-1.896874,-2.909101,-6.140870,1.641209,-7.411936,2.932676,-7.633121,-0.232364,7.836751,4.538543,2.933366,-9.880171,5.343143,-2.640242,2.015804,9.204330,9.273195,8.751279], dtype = "float32")#candidate|6232|(702,)|const|float32
call_6231 = relay.TupleGetItem(func_2447_call(relay.reshape(const_6232.astype('float32'), [702,]), relay.reshape(var_6222.astype('int8'), [2496,]), ), 1)
call_6233 = relay.TupleGetItem(func_2450_call(relay.reshape(const_6232.astype('float32'), [702,]), relay.reshape(var_6222.astype('int8'), [2496,]), ), 1)
func_4168_call = mod.get_global_var('func_4168')
func_4170_call = mutated_mod.get_global_var('func_4170')
call_6235 = relay.TupleGetItem(func_4168_call(relay.reshape(const_6221.astype('float32'), [13, 9, 13])), 3)
call_6236 = relay.TupleGetItem(func_4170_call(relay.reshape(const_6221.astype('float32'), [13, 9, 13])), 3)
output = relay.Tuple([call_6198,var_6199,bop_6201,call_6219,const_6220,const_6221,var_6222,call_6231,const_6232,call_6235,])
output2 = relay.Tuple([call_6200,var_6199,bop_6204,call_6223,const_6220,const_6221,var_6222,call_6233,const_6232,call_6236,])
func_6243 = relay.Function([var_6199,var_6222,], output)
mod['func_6243'] = func_6243
mod = relay.transform.InferType()(mod)
mutated_mod['func_6243'] = func_6243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6243_call = mutated_mod.get_global_var('func_6243')
var_6245 = relay.var("var_6245", dtype = "int64", shape = (336,))#candidate|6245|(336,)|var|int64
var_6246 = relay.var("var_6246", dtype = "int8", shape = (2496,))#candidate|6246|(2496,)|var|int8
call_6244 = func_6243_call(var_6245,var_6246,)
output = call_6244
func_6247 = relay.Function([var_6245,var_6246,], output)
mutated_mod['func_6247'] = func_6247
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5561_call = mod.get_global_var('func_5561')
func_5563_call = mutated_mod.get_global_var('func_5563')
call_6271 = func_5561_call()
call_6272 = func_5561_call()
func_4897_call = mod.get_global_var('func_4897')
func_4900_call = mutated_mod.get_global_var('func_4900')
var_6293 = relay.var("var_6293", dtype = "int32", shape = (1210,))#candidate|6293|(1210,)|var|int32
call_6292 = func_4897_call(relay.reshape(var_6293.astype('int32'), [11, 10, 11]))
call_6294 = func_4897_call(relay.reshape(var_6293.astype('int32'), [11, 10, 11]))
bop_6298 = relay.greater_equal(var_6293.astype('bool'), relay.reshape(call_6292.astype('bool'), relay.shape_of(var_6293))) # shape=(1210,)
bop_6301 = relay.greater_equal(var_6293.astype('bool'), relay.reshape(call_6294.astype('bool'), relay.shape_of(var_6293))) # shape=(1210,)
bop_6308 = relay.logical_xor(bop_6298.astype('uint32'), relay.reshape(call_6292.astype('uint32'), relay.shape_of(bop_6298))) # shape=(1210,)
bop_6311 = relay.logical_xor(bop_6301.astype('uint32'), relay.reshape(call_6294.astype('uint32'), relay.shape_of(bop_6301))) # shape=(1210,)
func_5781_call = mod.get_global_var('func_5781')
func_5782_call = mutated_mod.get_global_var('func_5782')
call_6317 = relay.TupleGetItem(func_5781_call(), 1)
call_6318 = relay.TupleGetItem(func_5782_call(), 1)
output = relay.Tuple([call_6271,bop_6308,call_6317,])
output2 = relay.Tuple([call_6272,bop_6311,call_6318,])
func_6332 = relay.Function([var_6293,], output)
mod['func_6332'] = func_6332
mod = relay.transform.InferType()(mod)
mutated_mod['func_6332'] = func_6332
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6333 = relay.var("var_6333", dtype = "int32", shape = (1210,))#candidate|6333|(1210,)|var|int32
func_6332_call = mutated_mod.get_global_var('func_6332')
call_6334 = func_6332_call(var_6333)
output = call_6334
func_6335 = relay.Function([var_6333], output)
mutated_mod['func_6335'] = func_6335
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6383 = relay.var("var_6383", dtype = "float64", shape = (4, 8, 7))#candidate|6383|(4, 8, 7)|var|float64
var_6384 = relay.var("var_6384", dtype = "float64", shape = (4, 8, 7))#candidate|6384|(4, 8, 7)|var|float64
bop_6385 = relay.greater_equal(var_6383.astype('bool'), relay.reshape(var_6384.astype('bool'), relay.shape_of(var_6383))) # shape=(4, 8, 7)
output = bop_6385
output2 = bop_6385
F = relay.Function([var_6383,var_6384,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_6383,var_6384,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
