==========mod==========
#[version = "0.0.5"]
def @func_4463() -> Tensor[(1, 9, 13), float64] {
  %0 = @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  asinh(%2) /* ty=Tensor[(1, 9, 13), float64] */
}

def @func_5008(%var_4991: Tensor[(7, 9, 13), float32]) -> Tensor[(7, 9, 13), bool] {
  %3 = @func_2331() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %4 = %3.0;
  %5 = cast(%4, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %6 = cast(%var_4991, dtype="bool") /* ty=Tensor[(7, 9, 13), bool] */;
  less_equal(%5, %6) /* ty=Tensor[(7, 9, 13), bool] */
}

def @func_3134() -> (Tensor[(1, 9, 13), float32],) {
  %7 = @func_1337() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1521), float32], int8, Tensor[(2496), int8]) */;
  %8 = %7.0;
  (%8,)
}

def @func_4335() -> (int8, Tensor[(1, 9, 13), float32]) {
  %9 = @func_1337() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1521), float32], int8, Tensor[(2496), int8]) */;
  %10 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %11 = %9.2;
  %12 = %10.1;
  (%11, %12)
}

def @func_4766() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), uint64], Tensor[(1404), float32]) {
  %13 = @func_4198() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %15 = reshape(%14, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
  %16 = %13.0;
  %17 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %18 = @func_2660() /* ty=Tensor[(1, 9, 13), float32] */;
  %19 = @func_1535(%15) /* ty=Tensor[(12, 9, 13), uint64] */;
  (%16, %17, %18, %19, meta[relay.Constant][0] /* ty=Tensor[(1404), float32] */)
}

def @func_3870(%var_3831: Tensor[(12, 15, 7), float32], %var_3844: Tensor[(1404), uint32]) -> (Tensor[(12, 15, 7), float32], Tensor[(288), int8], Tensor[(2496), float64], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(15444), bool], Tensor[(1, 9, 13), float32], Tensor[(7, 6, 2), uint32], Tensor[(84), uint32], Tensor[(1521), float32], Tensor[(12, 156), float32]) {
  %20 = cast(%var_3831, dtype="float32") /* ty=Tensor[(12, 15, 7), float32] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %22 = reshape(%21, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float64] */;
  %23 = @func_1952(%22) /* ty=(Tensor[(16, 12, 13), float64], Tensor[(6, 16, 3), int8], Tensor[(288), int8]) */;
  %24 = cast(%var_3844, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(15444), bool] */, dtype="bool") /* ty=Tensor[(15444), bool] */;
  %26 = reshape(%24, newshape=[1, 1404]) /* ty=Tensor[(1, 1404), uint32] */;
  %27 = reshape(%25, newshape=[11, 1404]) /* ty=Tensor[(11, 1404), bool] */;
  %28 = @func_2568(%26, %27) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(11, 1404), bool]) */;
  %29 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(84), uint32] */, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(84), uint32] */, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %32 = reshape(%30, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint32] */;
  %33 = reshape(%31, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint32] */;
  %34 = @func_3366(%32, %33) /* ty=(Tensor[(7, 6, 2), uint32],) */;
  %35 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 156), float32] */, dtype="float32") /* ty=Tensor[(12, 156), float32] */;
  %36 = reshape(%35, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), float32] */;
  %37 = @func_2695(%36) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(1521), float32], Tensor[(1521), float64]) */;
  %38 = rsqrt(%20) /* ty=Tensor[(12, 15, 7), float32] */;
  %39 = %23.2;
  %40 = %28.0;
  %41 = %29.0;
  %42 = %34.0;
  %43 = %37.1;
  (%38, %39, meta[relay.Constant][1] /* ty=Tensor[(2496), float64] */, %40, %var_3844, meta[relay.Constant][2] /* ty=Tensor[(15444), bool] */, %41, %42, meta[relay.Constant][3] /* ty=Tensor[(84), uint32] */, %43, meta[relay.Constant][4] /* ty=Tensor[(12, 156), float32] */)
}

def @func_2977(%var_2962: float64, %var_2963: Tensor[(11, 13, 8), float64]) -> Tensor[(11, 13, 8), float64] {
  %44 = cast(%var_2962, dtype="float64") /* ty=float64 */;
  %45 = cast(%var_2963, dtype="float64") /* ty=Tensor[(11, 13, 8), float64] */;
  divide(%44, %45) /* ty=Tensor[(11, 13, 8), float64] */
}

def @func_710() -> Tensor[(1, 9, 13), float32] {
  %46 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %46.0
}

def @func_1535(%var_1525: Tensor[(12, 9, 13), float32]) -> Tensor[(12, 9, 13), uint64] {
  %47 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %48 = %47.1;
  %49 = cast(%48, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %50 = exp(%49) /* ty=Tensor[(1, 9, 13), float32] */;
  %51 = cast(%50, dtype="uint64") /* ty=Tensor[(1, 9, 13), uint64] */;
  %52 = cast(%var_1525, dtype="uint64") /* ty=Tensor[(12, 9, 13), uint64] */;
  bitwise_and(%51, %52) /* ty=Tensor[(12, 9, 13), uint64] */
}

def @func_6332(%var_6293: Tensor[(1210), int32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1210), uint32], Tensor[(1, 9, 13), float32]) {
  %53 = cast(%var_6293, dtype="int32") /* ty=Tensor[(1210), int32] */;
  %54 = reshape(%53, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), int32] */;
  %55 = @func_4897(%54) /* ty=Tensor[(11, 10, 11), int32] */;
  %56 = cast(%55, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
  %57 = shape_of(%var_6293, dtype="int32") /* ty=Tensor[(1), int32] */;
  %58 = cast(%var_6293, dtype="bool") /* ty=Tensor[(1210), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?), bool] */;
  %60 = greater_equal(%58, %59) /* ty=Tensor[(1210), bool] */;
  %61 = cast(%55, dtype="uint32") /* ty=Tensor[(11, 10, 11), uint32] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(1), int32] */;
  %63 = cast(%60, dtype="uint32") /* ty=Tensor[(1210), uint32] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %65 = @func_5781() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %66 = @func_5561() /* ty=Tensor[(1, 9, 13), float32] */;
  %67 = logical_xor(%63, %64) /* ty=Tensor[(1210), uint32] */;
  %68 = %65.1;
  (%66, %67, %68)
}

def @func_2240(%var_2233: Tensor[(1755), float32]) -> (Tensor[(1755), float32], Tensor[(?, 9, 13), float32]) {
  %69 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %70 = cast(%var_2233, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %71 = reshape(%70, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), float32] */;
  %72 = @func_974(%71) /* ty=(Tensor[(?, 9, 13), int8], Tensor[(15, 9, 13), float32], Tensor[(6, 16, 3), int8], Tensor[(288), int8], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %73 = %72.4;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %75 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%69, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %78 = floor_divide(%76, %77) /* ty=Tensor[(?, 9, 13), float32] */;
  (%var_2233, %78)
}

def @func_3164() -> (Tensor[(1, 9, 13), float32],) {
  %79 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %80 = %79.0;
  (%80,)
}

def @func_262() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %81 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %83 = acosh(%82) /* ty=Tensor[(1, 9, 13), float32] */;
  %84 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  (%83, %84)
}

def @func_3283(%var_3278: Tensor[(15, 9, 13), float32]) -> (Tensor[(15, 9, 13), float32],) {
  %85 = @func_1106() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %86 = %85.0;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %88 = cast(%var_3278, dtype="float32") /* ty=Tensor[(15, 9, 13), float32] */;
  %89 = floor_divide(%87, %88) /* ty=Tensor[(15, 9, 13), float32] */;
  (%89,)
}

def @func_547(%var_511: int8, %var_512: Tensor[(624, 4), int8], %var_521: Tensor[(624, 4), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), bool], int8, Tensor[(624, 4), bool], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %90 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %91 = cast(%var_511, dtype="int8") /* ty=int8 */;
  %92 = cast(%var_512, dtype="int8") /* ty=Tensor[(624, 4), int8] */;
  %93 = reshape(%91, newshape=[]) /* ty=int8 */;
  %94 = reshape(%92, newshape=[12, 13, 16]) /* ty=Tensor[(12, 13, 16), int8] */;
  %95 = @func_438(%93, %94) /* ty=(Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %96 = cast(%var_521, dtype="bool") /* ty=Tensor[(624, 4), bool] */;
  %97 = shape_of(%var_512, dtype="int32") /* ty=Tensor[(2), int32] */;
  %98 = cast(%var_512, dtype="bool") /* ty=Tensor[(624, 4), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %100 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %102 = sigmoid(%101) /* ty=Tensor[(1, 9, 13), float64] */;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %104 = %90.0;
  %105 = %95.1;
  %106 = not_equal(%98, %99) /* ty=Tensor[(624, 4), bool] */;
  %107 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %108 = asin(%103) /* ty=Tensor[(1, 9, 13), float32] */;
  (%104, %105, %var_511, %106, %107, %108)
}

def @func_2568(%var_2534: Tensor[(1, 1404), uint32], %var_2548: Tensor[(11, 1404), bool]) -> (Tensor[(1, 9, 13), float32], Tensor[(11, 1404), bool]) {
  %109 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %110 = cast(%var_2534, dtype="uint32") /* ty=Tensor[(1, 1404), uint32] */;
  %111 = reshape(%110, newshape=[1404]) /* ty=Tensor[(1404), uint32] */;
  %112 = @func_1781(%111) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int32], Tensor[(1404), uint32], Tensor[(507, 3), float32], Tensor[(2496), int8]) */;
  %113 = %112.1;
  %114 = cast(%113, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %115 = shape_of(%var_2534, dtype="int32") /* ty=Tensor[(2), int32] */;
  %116 = cast(%var_2534, dtype="bool") /* ty=Tensor[(1, 1404), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %118 = less_equal(%116, %117) /* ty=Tensor[(?, 1404), bool] */;
  %119 = cast(%118, dtype="bool") /* ty=Tensor[(?, 1404), bool] */;
  %120 = cast(%var_2548, dtype="bool") /* ty=Tensor[(11, 1404), bool] */;
  %121 = %109.1;
  %122 = less_equal(%119, %120) /* ty=Tensor[(11, 1404), bool] */;
  (%121, %122)
}

def @func_5381() -> (Tensor[(1, 9, 13), float32],) {
  %123 = @func_3582() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %124 = %123.0;
  (%124,)
}

def @func_895() -> (Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) {
  %125 = cast(meta[relay.Constant][5] /* ty=Tensor[(18, 78), float32] */, dtype="float32") /* ty=Tensor[(18, 78), float32] */;
  %126 = cast(meta[relay.Constant][6] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %127 = reshape(%125, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
  %128 = reshape(%126, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %129 = @func_660(%127, %128) /* ty=(Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */;
  %130 = cast(meta[relay.Constant][6] /* ty=Tensor[(2496), int8] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %131 = log10(%130) /* ty=Tensor[(2496), float32] */;
  %132 = cast(%131, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %133 = @func_710() /* ty=Tensor[(1, 9, 13), float32] */;
  %134 = %129.1;
  %135 = cos(%132) /* ty=Tensor[(2496), float64] */;
  (%133, %134, meta[relay.Constant][5] /* ty=Tensor[(18, 78), float32] */, %135)
}

def @func_2590() -> (Tensor[(1, 9, 13), float32],) {
  %136 = @func_742() /* ty=Tensor[(1, 9, 13), float32] */;
  (%136,)
}

def @func_1337() -> (Tensor[(1, 9, 13), float32], Tensor[(1521), float32], int8, Tensor[(2496), int8]) {
  %137 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %138 = cast(meta[relay.Constant][8] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %139 = reshape(%137, newshape=[]) /* ty=int8 */;
  %140 = reshape(%138, newshape=[12, 13, 16]) /* ty=Tensor[(12, 13, 16), int8] */;
  %141 = @func_438(%139, %140) /* ty=(Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %142 = @func_710() /* ty=Tensor[(1, 9, 13), float32] */;
  %143 = %141.2;
  (%142, %143, meta[relay.Constant][7] /* ty=int8 */, meta[relay.Constant][8] /* ty=Tensor[(2496), int8] */)
}

def @func_2660() -> Tensor[(1, 9, 13), float32] {
  %144 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %144.0
}

def @func_1682() -> (Tensor[(1, 9, 13), float32],) {
  %145 = @func_1106() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %146 = %145.0;
  (%146,)
}

def @main(%var_6383: Tensor[(4, 8, 7), float64], %var_6384: Tensor[(4, 8, 7), float64]) -> Tensor[(4, 8, 7), bool] {
  %147 = cast(%var_6384, dtype="bool") /* ty=Tensor[(4, 8, 7), bool] */;
  %148 = shape_of(%var_6383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_6383, dtype="bool") /* ty=Tensor[(4, 8, 7), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%149, %150) /* ty=Tensor[(4, 8, 7), bool] */
}

def @func_2758(%var_2752: Tensor[(1404), uint32], %var_2754: Tensor[(2496), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(2496), int8]) {
  %151 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %152 = cast(%var_2752, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %153 = cast(meta[relay.Constant][9] /* ty=Tensor[(1521), float32] */, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %154 = cast(%var_2754, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %155 = reshape(%152, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), uint32] */;
  %156 = reshape(%153, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float32] */;
  %157 = reshape(%154, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %158 = @func_1277(%155, %156, %157) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */;
  %159 = %151.1;
  %160 = @func_1290() /* ty=Tensor[(1, 9, 13), float32] */;
  %161 = %158.3;
  (%159, %160, %161, %var_2752, meta[relay.Constant][9] /* ty=Tensor[(1521), float32] */, %var_2754)
}

def @func_2852(%var_2847: Tensor[(8, 4, 5), float32]) -> (Tensor[(8, 4, 5), float32], Tensor[(1, 9, 13), float32]) {
  %162 = cast(%var_2847, dtype="float32") /* ty=Tensor[(8, 4, 5), float32] */;
  %163 = @func_2331() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %164 = log2(%162) /* ty=Tensor[(8, 4, 5), float32] */;
  %165 = %163.0;
  (%164, %165)
}

def @func_3258(%var_3242: Tensor[(6, 9, 13), float32]) -> Tensor[(6, 9, 13), float32] {
  %166 = @func_1106() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %167 = %166.0;
  %168 = cast(%167, dtype="int32") /* ty=Tensor[(1, 9, 13), int32] */;
  %169 = cast(%var_3242, dtype="int32") /* ty=Tensor[(6, 9, 13), int32] */;
  %170 = bitwise_or(%168, %169) /* ty=Tensor[(6, 9, 13), int32] */;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(6, 9, 13), float32] */;
  erf(%171) /* ty=Tensor[(6, 9, 13), float32] */
}

def @func_4168(%var_4155: Tensor[(13, 9, 13), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), int16], Tensor[(2496), int8], Tensor[(1404), uint32], Tensor[(2496), int8]) {
  %172 = @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %173 = @func_3164() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %174 = %173.0;
  %175 = cast(%174, dtype="int16") /* ty=Tensor[(1, 9, 13), int16] */;
  %176 = cast(%var_4155, dtype="int16") /* ty=Tensor[(13, 9, 13), int16] */;
  %177 = cast(meta[relay.Constant][10] /* ty=Tensor[(1404), uint32] */, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %178 = cast(meta[relay.Constant][11] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %179 = reshape(%177, newshape=[1404]) /* ty=Tensor[(1404), uint32] */;
  %180 = reshape(%178, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %181 = @func_2758(%179, %180) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(2496), int8]) */;
  %182 = %172.0;
  %183 = bitwise_and(%175, %176) /* ty=Tensor[(13, 9, 13), int16] */;
  %184 = %181.5;
  (%182, %183, %184, meta[relay.Constant][10] /* ty=Tensor[(1404), uint32] */, meta[relay.Constant][11] /* ty=Tensor[(2496), int8] */)
}

def @func_5668() -> (Tensor[(1, 9, 13), float32], Tensor[(16, 12, 13), float64], Tensor[(2496), float64], Tensor[(1, 9, 13), float32]) {
  %185 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %186 = cast(meta[relay.Constant][12] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %187 = reshape(%186, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float64] */;
  %188 = @func_1952(%187) /* ty=(Tensor[(16, 12, 13), float64], Tensor[(6, 16, 3), int8], Tensor[(288), int8]) */;
  %189 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %190 = %185.1;
  %191 = %188.0;
  %192 = %189.0;
  (%190, %191, meta[relay.Constant][12] /* ty=Tensor[(2496), float64] */, %192)
}

def @func_793() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %193 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %194 = @func_742() /* ty=Tensor[(1, 9, 13), float32] */;
  %195 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  (%193, %194, %195)
}

def @func_1036(%var_1021: Tensor[(1521), float32]) -> (Tensor[(1521), float32], Tensor[(1521), uint32], Tensor[(11, 9, 13), float64]) {
  %196 = cast(meta[relay.Constant][13] /* ty=Tensor[(1521), float32] */, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %197 = reshape(%196, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
  %198 = @func_486(%197) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 13, 16), int8], int8, Tensor[(2496), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %199 = %198.5;
  %200 = cast(%var_1021, dtype="uint32") /* ty=Tensor[(1521), uint32] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(1), int32] */;
  %202 = cast(%199, dtype="uint32") /* ty=Tensor[(1521), uint32] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %204 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %205 = %204.0;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %207 = cos(%206) /* ty=Tensor[(1, 9, 13), float32] */;
  %208 = cast(%207, dtype="uint32") /* ty=Tensor[(1, 9, 13), uint32] */;
  %209 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 9, 13), float32] */, dtype="uint32") /* ty=Tensor[(11, 9, 13), uint32] */;
  %210 = bitwise_and(%208, %209) /* ty=Tensor[(11, 9, 13), uint32] */;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(11, 9, 13), float64] */;
  %212 = bitwise_or(%202, %203) /* ty=Tensor[(1521), uint32] */;
  %213 = log10(%211) /* ty=Tensor[(11, 9, 13), float64] */;
  (meta[relay.Constant][13] /* ty=Tensor[(1521), float32] */, %212, %213)
}

def @func_4897(%var_4891: Tensor[(11, 10, 11), int32]) -> Tensor[(11, 10, 11), int32] {
  %214 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %215 = cast(%var_4891, dtype="int32") /* ty=Tensor[(11, 10, 11), int32] */;
  right_shift(%214, %215) /* ty=Tensor[(11, 10, 11), int32] */
}

def @func_4382() -> Tensor[(1, 9, 13), float32] {
  @func_2717() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_4075(%var_4067: Tensor[(1404), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1404), float32], Tensor[(156, 16), int8], Tensor[(?, 9, 13), float64]) {
  %216 = cast(%var_4067, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %217 = cast(meta[relay.Constant][15] /* ty=Tensor[(156, 16), int8] */, dtype="int8") /* ty=Tensor[(156, 16), int8] */;
  %218 = reshape(%216, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
  %219 = reshape(%217, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %220 = @func_660(%218, %219) /* ty=(Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */;
  %221 = @func_1740() /* ty=(Tensor[(?, 9, 13), uint8], Tensor[(1, 9, 13), float64], Tensor[(1, 9, 13), float32]) */;
  %222 = %221.0;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(?, 9, 13), float64] */;
  %224 = %220.5;
  %225 = rsqrt(%223) /* ty=Tensor[(?, 9, 13), float64] */;
  (%224, %var_4067, meta[relay.Constant][15] /* ty=Tensor[(156, 16), int8] */, %225)
}

def @func_3346() -> Tensor[(1, 9, 13), float32] {
  %226 = @func_2590() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %226.0
}

def @func_1290() -> Tensor[(1, 9, 13), float32] {
  %227 = @func_1106() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %227.0
}

def @func_2717() -> Tensor[(1, 9, 13), float32] {
  %228 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %228.1
}

def @func_4198() -> (Tensor[(1, 9, 13), float32],) {
  %229 = @func_742() /* ty=Tensor[(1, 9, 13), float32] */;
  (%229,)
}

def @func_5781() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %230 = @func_1565() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %231 = @func_4778() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %232 = %230.0;
  %233 = %231.0;
  (%232, %233)
}

def @func_4822(%var_4796: Tensor[(585, 3), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1755), bool]) {
  %234 = cast(%var_4796, dtype="float32") /* ty=Tensor[(585, 3), float32] */;
  %235 = reshape(%234, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %236 = @func_2240(%235) /* ty=(Tensor[(1755), float32], Tensor[(?, 9, 13), float32]) */;
  %237 = %236.0;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %239 = log(%238) /* ty=Tensor[(1755), float32] */;
  %240 = cast(%var_4796, dtype="bool") /* ty=Tensor[(585, 3), bool] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(1), int32] */;
  %242 = cast(%239, dtype="bool") /* ty=Tensor[(1755), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?), bool] */;
  %244 = @func_1290() /* ty=Tensor[(1, 9, 13), float32] */;
  %245 = not_equal(%242, %243) /* ty=Tensor[(1755), bool] */;
  (%244, %245)
}

def @func_6119(%var_6097: Tensor[(6, 9, 13), float32]) -> (Tensor[(1, 9, 13), float64], Tensor[(6, 9, 13), bool]) {
  %246 = @func_4291() /* ty=Tensor[(1, 9, 13), float32] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %248 = cast(%var_6097, dtype="float64") /* ty=Tensor[(6, 9, 13), float64] */;
  %249 = floor_divide(%247, %248) /* ty=Tensor[(6, 9, 13), float64] */;
  %250 = cast(%var_6097, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%249, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %254 = @func_4648() /* ty=Tensor[(1, 9, 13), float64] */;
  %255 = greater(%252, %253) /* ty=Tensor[(6, 9, 13), bool] */;
  (%254, %255)
}

def @func_4850(%var_4834: Tensor[(14, 12, 2), int64], %var_4835: Tensor[(14, 12, 2), int64]) -> (Tensor[(14, 12, 2), int64],) {
  %256 = cast(%var_4835, dtype="int64") /* ty=Tensor[(14, 12, 2), int64] */;
  %257 = shape_of(%var_4834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%var_4834, dtype="int64") /* ty=Tensor[(14, 12, 2), int64] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %260 = add(%258, %259) /* ty=Tensor[(14, 12, 2), int64] */;
  (%260,)
}

def @func_2400(%var_2394: Tensor[(702), float32], %var_2395: Tensor[(2496), int8]) -> (Tensor[(15, 9, 13), int8], Tensor[(1521), float32], Tensor[(702), float32], Tensor[(2496), int8]) {
  %261 = @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %262 = %261.0;
  %263 = cast(%262, dtype="int8") /* ty=Tensor[(1, 9, 13), int8] */;
  %264 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 9, 13), float32] */, dtype="int8") /* ty=Tensor[(15, 9, 13), int8] */;
  %265 = cast(%var_2394, dtype="float32") /* ty=Tensor[(702), float32] */;
  %266 = cast(%var_2395, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %267 = reshape(%265, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float32] */;
  %268 = reshape(%266, newshape=[52, 48]) /* ty=Tensor[(52, 48), int8] */;
  %269 = @func_1363(%267, %268) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(52, 48), int8], Tensor[(6, 9, 13), float64]) */;
  %270 = left_shift(%263, %264) /* ty=Tensor[(15, 9, 13), int8] */;
  %271 = %269.2;
  (%270, %271, %var_2394, %var_2395)
}

def @func_3558() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 1521), float32], Tensor[(1404), uint32], Tensor[(13, 117), float32], Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) {
  %272 = cast(meta[relay.Constant][17] /* ty=Tensor[(1404), uint32] */, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %273 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 117), float32] */, dtype="float32") /* ty=Tensor[(13, 117), float32] */;
  %274 = cast(meta[relay.Constant][19] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %275 = reshape(%272, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), uint32] */;
  %276 = reshape(%273, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float32] */;
  %277 = reshape(%274, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %278 = @func_1277(%275, %276, %277) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */;
  %279 = @func_3116() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %280 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %281 = %278.2;
  %282 = %279.0;
  (%280, %281, meta[relay.Constant][17] /* ty=Tensor[(1404), uint32] */, meta[relay.Constant][18] /* ty=Tensor[(13, 117), float32] */, meta[relay.Constant][19] /* ty=Tensor[(2496), int8] */, %282)
}

def @func_486(%var_482: Tensor[(1521), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(12, 13, 16), int8], int8, Tensor[(2496), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) {
  %283 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %284 = %283.0;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %286 = cast(meta[relay.Constant][20] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %287 = cast(meta[relay.Constant][21] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %288 = reshape(%286, newshape=[]) /* ty=int8 */;
  %289 = reshape(%287, newshape=[12, 13, 16]) /* ty=Tensor[(12, 13, 16), int8] */;
  %290 = @func_438(%288, %289) /* ty=(Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %291 = cast(%var_482, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %292 = reshape(%291, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), float32] */;
  %293 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %294 = atan(%285) /* ty=Tensor[(1, 9, 13), float32] */;
  %295 = %290.0;
  %296 = @func_360(%292) /* ty=Tensor[(13, 9, 13), bool] */;
  %297 = %293.1;
  (%294, %295, meta[relay.Constant][20] /* ty=int8 */, meta[relay.Constant][21] /* ty=Tensor[(2496), int8] */, %296, %var_482, %297)
}

def @func_2695(%var_2674: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), bool], Tensor[(1521), float32], Tensor[(1521), float64]) {
  %298 = @func_2590() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %299 = %298.0;
  %300 = cast(%299, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %301 = cast(%var_2674, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %302 = cast(meta[relay.Constant][22] /* ty=Tensor[(1521), float32] */, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %303 = reshape(%302, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
  %304 = @func_1036(%303) /* ty=(Tensor[(1521), float32], Tensor[(1521), uint32], Tensor[(11, 9, 13), float64]) */;
  %305 = cast(meta[relay.Constant][22] /* ty=Tensor[(1521), float32] */, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %306 = greater(%300, %301) /* ty=Tensor[(16, 9, 13), bool] */;
  %307 = %304.0;
  %308 = log10(%305) /* ty=Tensor[(1521), float64] */;
  (%306, %307, %308)
}

def @func_5369() -> (Tensor[(1, 9, 13), float32],) {
  %309 = @func_4766() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), uint64], Tensor[(1404), float32]) */;
  %310 = %309.2;
  (%310,)
}

def @func_3322(%var_3301: Tensor[(702, 1), float32], %var_3302: Tensor[(2496), int8], %var_3312: Tensor[(1521), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(702, 1), float32], Tensor[(2496), int8], Tensor[(1521), float32]) {
  %311 = @func_1440() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %312 = cast(%var_3301, dtype="float32") /* ty=Tensor[(702, 1), float32] */;
  %313 = cast(%var_3302, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %314 = reshape(%312, newshape=[702]) /* ty=Tensor[(702), float32] */;
  %315 = reshape(%313, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %316 = @func_2400(%314, %315) /* ty=(Tensor[(15, 9, 13), int8], Tensor[(1521), float32], Tensor[(702), float32], Tensor[(2496), int8]) */;
  %317 = %316.1;
  %318 = cast(%var_3312, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(1), int32] */;
  %320 = cast(%317, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?), float32] */;
  %322 = %311.1;
  %323 = power(%320, %321) /* ty=Tensor[(1521), float32] */;
  (%322, %var_3301, %var_3302, %323)
}

def @func_1850() -> (Tensor[(1, 9, 13), float32],) {
  %324 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %325 = %324.1;
  (%325,)
}

def @func_4532() -> (Tensor[(1, 9, 13), float32], int8, Tensor[(1404), float32], Tensor[(2496), int8]) {
  %326 = @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %327 = cast(meta[relay.Constant][23] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %328 = cast(meta[relay.Constant][24] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %329 = reshape(%327, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
  %330 = reshape(%328, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %331 = @func_660(%329, %330) /* ty=(Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */;
  %332 = %326.0;
  %333 = %331.3;
  (%332, %333, meta[relay.Constant][23] /* ty=Tensor[(1404), float32] */, meta[relay.Constant][24] /* ty=Tensor[(2496), int8] */)
}

def @func_1363(%var_1344: Tensor[(6, 9, 13), float32], %var_1357: Tensor[(52, 48), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(52, 48), int8], Tensor[(6, 9, 13), float64]) {
  %334 = cast(meta[relay.Constant][25] /* ty=Tensor[(1404), uint32] */, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %335 = cast(meta[relay.Constant][26] /* ty=Tensor[(1521), float32] */, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %336 = cast(%var_1357, dtype="int8") /* ty=Tensor[(52, 48), int8] */;
  %337 = reshape(%334, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), uint32] */;
  %338 = reshape(%335, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float32] */;
  %339 = reshape(%336, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %340 = @func_1277(%337, %338, %339) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */;
  %341 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %342 = cast(%341, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %343 = cast(%var_1344, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %344 = greater_equal(%342, %343) /* ty=Tensor[(6, 9, 13), bool] */;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(6, 9, 13), float64] */;
  %346 = %340.3;
  %347 = acosh(%345) /* ty=Tensor[(6, 9, 13), float64] */;
  (%346, meta[relay.Constant][25] /* ty=Tensor[(1404), uint32] */, meta[relay.Constant][26] /* ty=Tensor[(1521), float32] */, %var_1357, %347)
}

def @func_438(%var_402: int8, %var_403: Tensor[(12, 13, 16), int8]) -> (Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) {
  %348 = cast(%var_402, dtype="int8") /* ty=int8 */;
  %349 = cast(%var_403, dtype="int8") /* ty=Tensor[(12, 13, 16), int8] */;
  %350 = cast(meta[relay.Constant][27] /* ty=Tensor[(1521), float32] */, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %351 = reshape(%350, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), float32] */;
  %352 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %353 = bitwise_or(%348, %349) /* ty=Tensor[(12, 13, 16), int8] */;
  %354 = @func_360(%351) /* ty=Tensor[(13, 9, 13), bool] */;
  %355 = %352.1;
  (%353, %354, meta[relay.Constant][27] /* ty=Tensor[(1521), float32] */, %355)
}

def @func_2149(%var_2138: Tensor[(13, 7, 12), float64]) -> Tensor[(13, 7, 12), float64] {
  %356 = cast(%var_2138, dtype="float64") /* ty=Tensor[(13, 7, 12), float64] */;
  cos(%356) /* ty=Tensor[(13, 7, 12), float64] */
}

def @func_4050() -> (Tensor[(1, 9, 13), float32],) {
  %357 = @func_2205() /* ty=Tensor[(1, 9, 13), float32] */;
  (%357,)
}

def @func_2505() -> (Tensor[(1, 9, 13), float32],) {
  %358 = @func_2331() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %359 = %358.0;
  (%359,)
}

def @func_2205() -> Tensor[(1, 9, 13), float32] {
  @func_217() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_2447(%var_2432: Tensor[(702), float32], %var_2433: Tensor[(2496), int8]) -> (Tensor[(15, 1, 1), float64], Tensor[(2496), int8], Tensor[(2496), int8], Tensor[(15, 1, 702), bool]) {
  %360 = cast(-9.62045f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %361 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 1, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 1), float64] */;
  %362 = cast(%var_2432, dtype="float32") /* ty=Tensor[(702), float32] */;
  %363 = cast(%var_2433, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %364 = reshape(%362, newshape=[702]) /* ty=Tensor[(702), float32] */;
  %365 = reshape(%363, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %366 = @func_2400(%364, %365) /* ty=(Tensor[(15, 9, 13), int8], Tensor[(1521), float32], Tensor[(702), float32], Tensor[(2496), int8]) */;
  %367 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 1, 1), float64] */, dtype="int8") /* ty=Tensor[(15, 1, 1), int8] */;
  %368 = cast(-9.62045f64 /* ty=float64 */, dtype="int8") /* ty=int8 */;
  %369 = left_shift(%367, %368) /* ty=Tensor[(15, 1, 1), int8] */;
  %370 = cast(%var_2432, dtype="bool") /* ty=Tensor[(702), bool] */;
  %371 = cast(%369, dtype="bool") /* ty=Tensor[(15, 1, 1), bool] */;
  %372 = floor_divide(%360, %361) /* ty=Tensor[(15, 1, 1), float64] */;
  %373 = %366.3;
  %374 = greater_equal(%370, %371) /* ty=Tensor[(15, 1, 702), bool] */;
  (%372, %373, %var_2433, %374)
}

def @func_6190() -> (Tensor[(1, 9, 13), float64],) {
  %375 = @func_4463() /* ty=Tensor[(1, 9, 13), float64] */;
  (%375,)
}

def @func_2300() -> (Tensor[(1, 9, 13), float32],) {
  %376 = @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %377 = %376.0;
  (%377,)
}

def @func_4441() -> Tensor[(1, 9, 13), float32] {
  %378 = @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %378.0
}

def @func_6088() -> Tensor[(1, 9, 13), float32] {
  %379 = @func_2590() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %379.0
}

def @func_974(%var_942: Tensor[(15, 9, 13), float32]) -> (Tensor[(?, 9, 13), int8], Tensor[(15, 9, 13), float32], Tensor[(6, 16, 3), int8], Tensor[(288), int8], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %380 = @func_895() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) */;
  %381 = %380.0;
  %382 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %383 = cast(%382, dtype="int8") /* ty=Tensor[(1, 9, 13), int8] */;
  %384 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%381, dtype="int8") /* ty=Tensor[(1, 9, 13), int8] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %387 = cast(%382, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %388 = cast(%var_942, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
  %389 = less(%387, %388) /* ty=Tensor[(15, 9, 13), bool] */;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(15, 9, 13), float32] */;
  %391 = cast(meta[relay.Constant][29] /* ty=Tensor[(288), int8] */, dtype="int8") /* ty=Tensor[(288), int8] */;
  %392 = cast(meta[relay.Constant][29] /* ty=Tensor[(288), int8] */, dtype="int8") /* ty=Tensor[(288), int8] */;
  %393 = reshape(%391, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
  %394 = reshape(%392, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
  %395 = @func_816(%393, %394) /* ty=(Tensor[(6, 16, 3), int8],) */;
  %396 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %397 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %398 = bitwise_xor(%385, %386) /* ty=Tensor[(?, 9, 13), int8] */;
  %399 = cos(%390) /* ty=Tensor[(15, 9, 13), float32] */;
  %400 = %395.0;
  %401 = %396.0;
  %402 = %397.0;
  %403 = @func_710() /* ty=Tensor[(1, 9, 13), float32] */;
  (%398, %399, %400, meta[relay.Constant][29] /* ty=Tensor[(288), int8] */, %401, %402, %403)
}

def @func_4291() -> Tensor[(1, 9, 13), float32] {
  @func_1590() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_6243(%var_6199: Tensor[(336), int64], %var_6222: Tensor[(2496), int8]) -> (Tensor[(14, 12, 2), int64], Tensor[(336), int64], Tensor[(?, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1, 1521), float32], Tensor[(2496), int8], Tensor[(2496), int8], Tensor[(702), float32], Tensor[(1404), uint32]) {
  %404 = cast(%var_6199, dtype="int64") /* ty=Tensor[(336), int64] */;
  %405 = cast(%var_6199, dtype="int64") /* ty=Tensor[(336), int64] */;
  %406 = reshape(%404, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), int64] */;
  %407 = reshape(%405, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), int64] */;
  %408 = @func_4850(%406, %407) /* ty=(Tensor[(14, 12, 2), int64],) */;
  %409 = @func_1565() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %410 = %409.0;
  %411 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %412 = %411.1;
  %413 = cast(%412, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %414 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%410, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %417 = cast(meta[relay.Constant][30] /* ty=Tensor[(1404), uint32] */, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %418 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 1521), float32] */, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %419 = cast(%var_6222, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %420 = reshape(%417, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), uint32] */;
  %421 = reshape(%418, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float32] */;
  %422 = reshape(%419, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %423 = @func_1277(%420, %421, %422) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */;
  %424 = cast(meta[relay.Constant][32] /* ty=Tensor[(702), float32] */, dtype="float32") /* ty=Tensor[(702), float32] */;
  %425 = cast(%var_6222, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %426 = reshape(%424, newshape=[702]) /* ty=Tensor[(702), float32] */;
  %427 = reshape(%425, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %428 = @func_2447(%426, %427) /* ty=(Tensor[(15, 1, 1), float64], Tensor[(2496), int8], Tensor[(2496), int8], Tensor[(15, 1, 702), bool]) */;
  %429 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 1521), float32] */, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %430 = reshape(%429, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), float32] */;
  %431 = @func_4168(%430) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), int16], Tensor[(2496), int8], Tensor[(1404), uint32], Tensor[(2496), int8]) */;
  %432 = %408.0;
  %433 = divide(%415, %416) /* ty=Tensor[(?, 9, 13), float64] */;
  %434 = %423.3;
  %435 = %428.1;
  %436 = %431.3;
  (%432, %var_6199, %433, %434, meta[relay.Constant][30] /* ty=Tensor[(1404), uint32] */, meta[relay.Constant][31] /* ty=Tensor[(1, 1521), float32] */, %var_6222, %435, meta[relay.Constant][32] /* ty=Tensor[(702), float32] */, %436)
}

def @func_3898() -> (Tensor[(8, 15, 8), bool], Tensor[(8, 15, 8), float64]) {
  %437 = cast(meta[relay.Constant][33] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %438 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 15, 8), int16] */, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
  %439 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 15, 8), int16] */, dtype="float64") /* ty=Tensor[(8, 15, 8), float64] */;
  %440 = greater(%437, %438) /* ty=Tensor[(8, 15, 8), bool] */;
  %441 = sin(%439) /* ty=Tensor[(8, 15, 8), float64] */;
  (%440, %441)
}

def @func_1590() -> Tensor[(1, 9, 13), float32] {
  @func_217() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_5352() -> Tensor[(1, 9, 13), float32] {
  @func_4441() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_5207() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %442 = @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %443 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %444 = @func_4291() /* ty=Tensor[(1, 9, 13), float32] */;
  %445 = %442.0;
  %446 = %443.0;
  %447 = @func_3004() /* ty=Tensor[(1, 9, 13), float32] */;
  (%444, %445, %446, %447)
}

def @func_1781(%var_1775: Tensor[(1404), uint32]) -> (Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int32], Tensor[(1404), uint32], Tensor[(507, 3), float32], Tensor[(2496), int8]) {
  %448 = @func_1740() /* ty=(Tensor[(?, 9, 13), uint8], Tensor[(1, 9, 13), float64], Tensor[(1, 9, 13), float32]) */;
  %449 = cast(%var_1775, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %450 = cast(meta[relay.Constant][35] /* ty=Tensor[(507, 3), float32] */, dtype="float32") /* ty=Tensor[(507, 3), float32] */;
  %451 = cast(meta[relay.Constant][36] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %452 = reshape(%449, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), uint32] */;
  %453 = reshape(%450, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float32] */;
  %454 = reshape(%451, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %455 = @func_1277(%452, %453, %454) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */;
  %456 = %448.2;
  %457 = %455.1;
  (%456, %457, %var_1775, meta[relay.Constant][35] /* ty=Tensor[(507, 3), float32] */, meta[relay.Constant][36] /* ty=Tensor[(2496), int8] */)
}

def @func_2774(%var_2767: Tensor[(2496), float64]) -> (Tensor[(1, 9, 13), float32], Tensor[(16, 12, 13), float64], Tensor[(2496), float64]) {
  %458 = cast(%var_2767, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %459 = reshape(%458, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float64] */;
  %460 = @func_1952(%459) /* ty=(Tensor[(16, 12, 13), float64], Tensor[(6, 16, 3), int8], Tensor[(288), int8]) */;
  %461 = @func_2205() /* ty=Tensor[(1, 9, 13), float32] */;
  %462 = %460.0;
  (%461, %462, %var_2767)
}

def @func_4318() -> Tensor[(?, 9, 13), uint8] {
  %463 = @func_1740() /* ty=(Tensor[(?, 9, 13), uint8], Tensor[(1, 9, 13), float64], Tensor[(1, 9, 13), float32]) */;
  %463.0
}

def @func_5128(%var_5060: Tensor[(10, 2, 4), int8], %var_5061: Tensor[(10, 2, 4), int8], %var_5098: Tensor[(1404), float32]) -> (Tensor[(?, 9, 13), float64], Tensor[(1404), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(10, 2, 4), int32]) {
  %464 = cast(%var_5098, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %465 = reshape(%464, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
  %466 = @func_4075(%465) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1404), float32], Tensor[(156, 16), int8], Tensor[(?, 9, 13), float64]) */;
  %467 = @func_1440() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %468 = @func_2505() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %469 = cast(%var_5061, dtype="int8") /* ty=Tensor[(10, 2, 4), int8] */;
  %470 = shape_of(%var_5060, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%var_5060, dtype="int8") /* ty=Tensor[(10, 2, 4), int8] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %473 = minimum(%471, %472) /* ty=Tensor[(10, 2, 4), int8] */;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(10, 2, 4), float64] */;
  %475 = log10(%474) /* ty=Tensor[(10, 2, 4), float64] */;
  %476 = cast(%var_5060, dtype="float64") /* ty=Tensor[(10, 2, 4), float64] */;
  %477 = sinh(%476) /* ty=Tensor[(10, 2, 4), float64] */;
  %478 = cast(%477, dtype="bool") /* ty=Tensor[(10, 2, 4), bool] */;
  %479 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%475, dtype="bool") /* ty=Tensor[(10, 2, 4), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = greater(%480, %481) /* ty=Tensor[(10, 2, 4), bool] */;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(10, 2, 4), float32] */;
  %484 = atanh(%483) /* ty=Tensor[(10, 2, 4), float32] */;
  %485 = cast(%477, dtype="int32") /* ty=Tensor[(10, 2, 4), int32] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="int32") /* ty=Tensor[(10, 2, 4), int32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %489 = %466.3;
  %490 = %467.0;
  %491 = %468.0;
  %492 = multiply(%487, %488) /* ty=Tensor[(10, 2, 4), int32] */;
  (%489, %var_5098, %490, %491, %492)
}

def @func_2331() -> (Tensor[(1, 9, 13), float32],) {
  %493 = @func_895() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) */;
  %494 = %493.0;
  (%494,)
}

def @func_2610() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %495 = @func_2590() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %496 = %495.0;
  %497 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  (%496, %497)
}

def @func_1106() -> (Tensor[(1, 9, 13), float32],) {
  %498 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %499 = %498.1;
  (%499,)
}

def @func_742() -> Tensor[(1, 9, 13), float32] {
  @func_710() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_3759(%var_3693: Tensor[(1521), float32], %var_3714: Tensor[(1404), uint32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1521), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(11, 9, 13), float32], Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) {
  %500 = @func_3635() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %501 = cast(%var_3714, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %502 = reshape(%501, newshape=[1404]) /* ty=Tensor[(1404), uint32] */;
  %503 = @func_1781(%502) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int32], Tensor[(1404), uint32], Tensor[(507, 3), float32], Tensor[(2496), int8]) */;
  %504 = cast(%var_3693, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %505 = reshape(%504, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
  %506 = @func_1036(%505) /* ty=(Tensor[(1521), float32], Tensor[(1521), uint32], Tensor[(11, 9, 13), float64]) */;
  %507 = %506.2;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(11, 9, 13), float32] */;
  %509 = cast(%var_3693, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %510 = reshape(%509, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
  %511 = @func_486(%510) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 13, 16), int8], int8, Tensor[(2496), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %512 = @func_2505() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %513 = %500.1;
  %514 = %503.0;
  %515 = tan(%508) /* ty=Tensor[(11, 9, 13), float32] */;
  %516 = %511.3;
  %517 = %512.0;
  (%513, %var_3693, %514, %var_3714, %515, %516, %517)
}

def @func_1661(%var_1652: Tensor[(2496), float64]) -> (Tensor[(1, 9, 13), float32], Tensor[(2496), int64], Tensor[(2496), int8]) {
  %518 = @func_895() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) */;
  %519 = %518.3;
  %520 = cast(%var_1652, dtype="int64") /* ty=Tensor[(2496), int64] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(1), int32] */;
  %522 = cast(%519, dtype="int64") /* ty=Tensor[(2496), int64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?), int64] */;
  %524 = maximum(%522, %523) /* ty=Tensor[(2496), int64] */;
  %525 = cast(%524, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %526 = reshape(%525, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %527 = @func_1612(%526) /* ty=(Tensor[(1, 9, 13), float32], int8, Tensor[(9, 156), float32], Tensor[(2496), int8]) */;
  %528 = @func_1590() /* ty=Tensor[(1, 9, 13), float32] */;
  %529 = %527.3;
  (%528, %524, %529)
}

def @func_3635() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %530 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %531 = %530.0;
  %532 = @func_2717() /* ty=Tensor[(1, 9, 13), float32] */;
  %533 = @func_742() /* ty=Tensor[(1, 9, 13), float32] */;
  (%531, %532, %533)
}

def @func_1612(%var_1604: Tensor[(2496), int8]) -> (Tensor[(1, 9, 13), float32], int8, Tensor[(9, 156), float32], Tensor[(2496), int8]) {
  %534 = @func_793() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %535 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 156), float32] */, dtype="float32") /* ty=Tensor[(9, 156), float32] */;
  %536 = cast(%var_1604, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %537 = reshape(%535, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
  %538 = reshape(%536, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %539 = @func_660(%537, %538) /* ty=(Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */;
  %540 = %534.1;
  %541 = %539.3;
  (%540, %541, meta[relay.Constant][37] /* ty=Tensor[(9, 156), float32] */, %var_1604)
}

def @func_5744(%var_5708: Tensor[(15, 4, 6), uint16], %var_5709: Tensor[(15, 4, 6), uint16], %var_5716: Tensor[(702), float32]) -> (Tensor[(15, 4, 6), bool], Tensor[(2496), int8], Tensor[(702), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), float64]) {
  %542 = cast(%var_5709, dtype="bool") /* ty=Tensor[(15, 4, 6), bool] */;
  %543 = shape_of(%var_5708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%var_5708, dtype="bool") /* ty=Tensor[(15, 4, 6), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %546 = cast(%var_5716, dtype="float32") /* ty=Tensor[(702), float32] */;
  %547 = cast(meta[relay.Constant][38] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %548 = reshape(%546, newshape=[702]) /* ty=Tensor[(702), float32] */;
  %549 = reshape(%547, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %550 = @func_2400(%548, %549) /* ty=(Tensor[(15, 9, 13), int8], Tensor[(1521), float32], Tensor[(702), float32], Tensor[(2496), int8]) */;
  %551 = @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %552 = cast(meta[relay.Constant][38] /* ty=Tensor[(2496), int8] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %553 = equal(%544, %545) /* ty=Tensor[(15, 4, 6), bool] */;
  %554 = %550.3;
  %555 = %551.0;
  %556 = asin(%552) /* ty=Tensor[(2496), float64] */;
  (%553, %554, %var_5716, %555, %556)
}

def @func_5973(%var_5855: Tensor[(1404), float32], %var_5919: Tensor[(702), float32], %var_5938: Tensor[(1521), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1404), bool], int8, Tensor[(6, 16, 3), int8], Tensor[(72, 4), int8], Tensor[(1, 9, 13), float32], Tensor[(702), float32], Tensor[(2496), int8], Tensor[(1521), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %557 = cast(%var_5855, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %558 = reshape(%557, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
  %559 = @func_1535(%558) /* ty=Tensor[(12, 9, 13), uint64] */;
  %560 = cast(%559, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %561 = shape_of(%var_5855, dtype="int32") /* ty=Tensor[(1), int32] */;
  %562 = cast(%var_5855, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?), bool] */;
  %564 = @func_4532() /* ty=(Tensor[(1, 9, 13), float32], int8, Tensor[(1404), float32], Tensor[(2496), int8]) */;
  %565 = cast(meta[relay.Constant][39] /* ty=Tensor[(72, 4), int8] */, dtype="int8") /* ty=Tensor[(72, 4), int8] */;
  %566 = cast(meta[relay.Constant][39] /* ty=Tensor[(72, 4), int8] */, dtype="int8") /* ty=Tensor[(72, 4), int8] */;
  %567 = reshape(%565, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
  %568 = reshape(%566, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
  %569 = @func_816(%567, %568) /* ty=(Tensor[(6, 16, 3), int8],) */;
  %570 = @func_5283() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(11, 10, 11), int32], Tensor[(1210), float64]) */;
  %571 = cast(%var_5919, dtype="float32") /* ty=Tensor[(702), float32] */;
  %572 = cast(meta[relay.Constant][40] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %573 = reshape(%571, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float32] */;
  %574 = reshape(%572, newshape=[52, 48]) /* ty=Tensor[(52, 48), int8] */;
  %575 = @func_1363(%573, %574) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(52, 48), int8], Tensor[(6, 9, 13), float64]) */;
  %576 = %575.2;
  %577 = cast(%var_5938, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(1), int32] */;
  %579 = cast(%576, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?), float64] */;
  %581 = cast(%559, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %582 = acos(%581) /* ty=Tensor[(12, 9, 13), float64] */;
  %583 = cast(%582, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
  %584 = @func_5781() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %585 = @func_3004() /* ty=Tensor[(1, 9, 13), float32] */;
  %586 = less_equal(%562, %563) /* ty=Tensor[(1404), bool] */;
  %587 = %564.1;
  %588 = %569.0;
  %589 = %570.0;
  %590 = mod(%579, %580) /* ty=Tensor[(1521), float64] */;
  %591 = @func_3004() /* ty=Tensor[(1, 9, 13), float32] */;
  %592 = atan(%583) /* ty=Tensor[(12, 9, 13), float32] */;
  %593 = %584.0;
  (%585, %586, %587, %588, meta[relay.Constant][39] /* ty=Tensor[(72, 4), int8] */, %589, %var_5919, meta[relay.Constant][40] /* ty=Tensor[(2496), int8] */, %590, %591, %592, %593)
}

def @func_4976(%var_4966: Tensor[(54, 26), uint32]) -> (Tensor[(1, 9, 13), float32], Tensor[(12, 156), float32], Tensor[(1260), float32], Tensor[(54, 26), uint32]) {
  %594 = @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %595 = cast(meta[relay.Constant][41] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %596 = cast(%var_4966, dtype="uint32") /* ty=Tensor[(54, 26), uint32] */;
  %597 = reshape(%595, newshape=[12, 15, 7]) /* ty=Tensor[(12, 15, 7), float32] */;
  %598 = reshape(%596, newshape=[1404]) /* ty=Tensor[(1404), uint32] */;
  %599 = @func_3870(%597, %598) /* ty=(Tensor[(12, 15, 7), float32], Tensor[(288), int8], Tensor[(2496), float64], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(15444), bool], Tensor[(1, 9, 13), float32], Tensor[(7, 6, 2), uint32], Tensor[(84), uint32], Tensor[(1521), float32], Tensor[(12, 156), float32]) */;
  %600 = %594.0;
  %601 = %599.10;
  (%600, %601, meta[relay.Constant][41] /* ty=Tensor[(1260), float32] */, %var_4966)
}

def @func_3366(%var_3359: Tensor[(7, 6, 2), uint32], %var_3360: Tensor[(7, 6, 2), uint32]) -> (Tensor[(7, 6, 2), uint32],) {
  %602 = cast(%var_3360, dtype="uint32") /* ty=Tensor[(7, 6, 2), uint32] */;
  %603 = shape_of(%var_3359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%var_3359, dtype="uint32") /* ty=Tensor[(7, 6, 2), uint32] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %606 = bitwise_xor(%604, %605) /* ty=Tensor[(7, 6, 2), uint32] */;
  (%606,)
}

def @func_4270(%var_4239: Tensor[(12, 9, 13), float32], %var_4263: float64) -> (Tensor[(12, 9, 13), float64], Tensor[(12, 9, 13), bool], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float32], Tensor[(11, 13, 8), float64], float64, Tensor[(1144), float64]) {
  %607 = @func_3134() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %608 = %607.0;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %610 = cast(%var_4239, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %611 = cast(%var_4239, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
  %612 = sinh(%611) /* ty=Tensor[(12, 9, 13), float32] */;
  %613 = cast(%var_4239, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = cast(%var_4239, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
  %618 = cast(%var_4263, dtype="float64") /* ty=float64 */;
  %619 = cast(meta[relay.Constant][42] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %620 = reshape(%618, newshape=[]) /* ty=float64 */;
  %621 = reshape(%619, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float64] */;
  %622 = power(%609, %610) /* ty=Tensor[(12, 9, 13), float64] */;
  %623 = logical_or(%615, %616) /* ty=Tensor[(12, 9, 13), bool] */;
  %624 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %625 = log(%617) /* ty=Tensor[(12, 9, 13), float32] */;
  %626 = @func_2977(%620, %621) /* ty=Tensor[(11, 13, 8), float64] */;
  (%622, %623, %624, %625, %626, %var_4263, meta[relay.Constant][42] /* ty=Tensor[(1144), float64] */)
}

def @func_4188() -> Tensor[(1, 9, 13), float32] {
  %627 = @func_1440() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %627.0
}

def @func_4020(%var_3965: Tensor[(2574, 6), bool]) -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(2574, 6), uint64]) {
  %628 = cast(meta[relay.Constant][43] /* ty=Tensor[(1404), uint32] */, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %629 = cast(%var_3965, dtype="bool") /* ty=Tensor[(2574, 6), bool] */;
  %630 = reshape(%628, newshape=[1, 1404]) /* ty=Tensor[(1, 1404), uint32] */;
  %631 = reshape(%629, newshape=[11, 1404]) /* ty=Tensor[(11, 1404), bool] */;
  %632 = @func_2568(%630, %631) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(11, 1404), bool]) */;
  %633 = @func_3116() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %634 = cast(%var_3965, dtype="float32") /* ty=Tensor[(2574, 6), float32] */;
  %635 = sigmoid(%634) /* ty=Tensor[(2574, 6), float32] */;
  %636 = cast(%var_3965, dtype="uint64") /* ty=Tensor[(2574, 6), uint64] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(2), int32] */;
  %638 = cast(%635, dtype="uint64") /* ty=Tensor[(2574, 6), uint64] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %640 = @func_1590() /* ty=Tensor[(1, 9, 13), float32] */;
  %641 = %632.0;
  %642 = %633.0;
  %643 = @func_710() /* ty=Tensor[(1, 9, 13), float32] */;
  %644 = subtract(%638, %639) /* ty=Tensor[(2574, 6), uint64] */;
  (%640, %641, meta[relay.Constant][43] /* ty=Tensor[(1404), uint32] */, %642, %643, %644)
}

def @func_5684(%var_5681: Tensor[(1, 9, 10), float32]) -> (Tensor[(1, 9, 10), float32],) {
  %645 = cast(%var_5681, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %646 = sin(%645) /* ty=Tensor[(1, 9, 10), float32] */;
  (%646,)
}

def @func_2931(%var_2919: Tensor[(1521), float32], %var_2925: Tensor[(11, 9, 13), float64]) -> (Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(11, 9, 13), uint8]) {
  %647 = cast(%var_2919, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %648 = reshape(%647, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), float32] */;
  %649 = @func_2717() /* ty=Tensor[(1, 9, 13), float32] */;
  %650 = cast(%649, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %651 = log(%650) /* ty=Tensor[(1, 9, 13), float64] */;
  %652 = cast(%651, dtype="uint8") /* ty=Tensor[(1, 9, 13), uint8] */;
  %653 = cast(%var_2925, dtype="uint8") /* ty=Tensor[(11, 9, 13), uint8] */;
  %654 = @func_360(%648) /* ty=Tensor[(13, 9, 13), bool] */;
  %655 = left_shift(%652, %653) /* ty=Tensor[(11, 9, 13), uint8] */;
  (%654, %var_2919, %655)
}

def @func_5561() -> Tensor[(1, 9, 13), float32] {
  %656 = @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %656.0
}

def @func_5055(%var_5032: Tensor[(16, 7, 3), float64]) -> Tensor[(16, 7, 3), float64] {
  %657 = cast(%var_5032, dtype="float64") /* ty=Tensor[(16, 7, 3), float64] */;
  log2(%657) /* ty=Tensor[(16, 7, 3), float64] */
}

def @func_1440() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %658 = @func_793() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %659 = %658.1;
  %660 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  (%659, %660)
}

def @func_4916() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %661 = @func_2331() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %662 = @func_3346() /* ty=Tensor[(1, 9, 13), float32] */;
  %663 = %661.0;
  (%662, %663)
}

def @func_5531(%var_5500: Tensor[(4, 9, 13), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(4, 9, 13), uint16]) {
  %664 = @func_4778() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %665 = %664.0;
  %666 = cast(%665, dtype="uint16") /* ty=Tensor[(1, 9, 13), uint16] */;
  %667 = cast(%var_5500, dtype="uint16") /* ty=Tensor[(4, 9, 13), uint16] */;
  %668 = add(%666, %667) /* ty=Tensor[(4, 9, 13), uint16] */;
  %669 = cast(%var_5500, dtype="bool") /* ty=Tensor[(4, 9, 13), bool] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="bool") /* ty=Tensor[(4, 9, 13), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %673 = greater(%671, %672) /* ty=Tensor[(4, 9, 13), bool] */;
  %674 = cast(%665, dtype="uint16") /* ty=Tensor[(1, 9, 13), uint16] */;
  %675 = cast(%673, dtype="uint16") /* ty=Tensor[(4, 9, 13), uint16] */;
  %676 = @func_4188() /* ty=Tensor[(1, 9, 13), float32] */;
  %677 = minimum(%674, %675) /* ty=Tensor[(4, 9, 13), uint16] */;
  (%676, %677)
}

def @func_3582() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %678 = @func_2331() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %679 = %678.0;
  %680 = @func_2717() /* ty=Tensor[(1, 9, 13), float32] */;
  (%679, %680)
}

def @func_4648() -> Tensor[(1, 9, 13), float64] {
  @func_4463() /* ty=Tensor[(1, 9, 13), float64] */
}

def @func_816(%var_806: Tensor[(6, 16, 3), int8], %var_807: Tensor[(6, 16, 3), int8]) -> (Tensor[(6, 16, 3), int8],) {
  %681 = cast(%var_807, dtype="int8") /* ty=Tensor[(6, 16, 3), int8] */;
  %682 = shape_of(%var_806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%var_806, dtype="int8") /* ty=Tensor[(6, 16, 3), int8] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %685 = bitwise_or(%683, %684) /* ty=Tensor[(6, 16, 3), int8] */;
  (%685,)
}

def @func_3004() -> Tensor[(1, 9, 13), float32] {
  @func_2717() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_1277(%var_1217: Tensor[(12, 9, 13), uint32], %var_1225: Tensor[(1, 1521), float32], %var_1238: Tensor[(2496), int8]) -> (Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) {
  %686 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %687 = %686.0;
  %688 = @func_793() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %689 = %688.2;
  %690 = cast(%687, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %691 = shape_of(%689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%689, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %694 = mod(%692, %693) /* ty=Tensor[(?, 9, 13), float32] */;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(?, 9, 13), float32] */;
  %696 = shape_of(%689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%689, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %699 = floor_mod(%697, %698) /* ty=Tensor[(?, 9, 13), float32] */;
  %700 = cast(%699, dtype="bool") /* ty=Tensor[(?, 9, 13), bool] */;
  %701 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%687, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %704 = @func_895() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) */;
  %705 = %704.0;
  %706 = cast(%705, dtype="uint32") /* ty=Tensor[(1, 9, 13), uint32] */;
  %707 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%694, dtype="uint32") /* ty=Tensor[(?, 9, 13), uint32] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %710 = right_shift(%708, %709) /* ty=Tensor[(?, 9, 13), uint32] */;
  %711 = cast(%710, dtype="int32") /* ty=Tensor[(?, 9, 13), int32] */;
  %712 = cast(%var_1217, dtype="int32") /* ty=Tensor[(12, 9, 13), int32] */;
  %713 = cast(%var_1225, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %714 = reshape(%713, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
  %715 = @func_486(%714) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 13, 16), int8], int8, Tensor[(2496), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %716 = %715.3;
  %717 = cast(%var_1238, dtype="bool") /* ty=Tensor[(2496), bool] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(1), int32] */;
  %719 = cast(%716, dtype="bool") /* ty=Tensor[(2496), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?), bool] */;
  %721 = cast(%var_1225, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %722 = reshape(%721, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
  %723 = @func_1036(%722) /* ty=(Tensor[(1521), float32], Tensor[(1521), uint32], Tensor[(11, 9, 13), float64]) */;
  %724 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %725 = cast(%var_1217, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %726 = atanh(%725) /* ty=Tensor[(12, 9, 13), float64] */;
  %727 = cast(%726, dtype="int64") /* ty=Tensor[(12, 9, 13), int64] */;
  %728 = cast(%710, dtype="int64") /* ty=Tensor[(?, 9, 13), int64] */;
  %729 = not_equal(%702, %703) /* ty=Tensor[(?, 9, 13), bool] */;
  %730 = maximum(%711, %712) /* ty=Tensor[(12, 9, 13), int32] */;
  %731 = @func_742() /* ty=Tensor[(1, 9, 13), float32] */;
  %732 = less(%719, %720) /* ty=Tensor[(2496), bool] */;
  %733 = %723.2;
  %734 = %724.1;
  %735 = minimum(%727, %728) /* ty=Tensor[(12, 9, 13), int64] */;
  (%729, %730, %var_1225, %731, %732, %733, %734, %735)
}

def @func_217() -> Tensor[(1, 9, 13), float32] {
  %736 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  sinh(%736) /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_5283() -> (Tensor[(1, 9, 13), float32], Tensor[(11, 10, 11), int32], Tensor[(1210), float64]) {
  %737 = @func_3134() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %738 = cast(meta[relay.Constant][45] /* ty=Tensor[(1210), int32] */, dtype="int32") /* ty=Tensor[(1210), int32] */;
  %739 = reshape(%738, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), int32] */;
  %740 = cast(meta[relay.Constant][45] /* ty=Tensor[(1210), int32] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %741 = %737.0;
  %742 = @func_4897(%739) /* ty=Tensor[(11, 10, 11), int32] */;
  %743 = sin(%740) /* ty=Tensor[(1210), float64] */;
  (%741, %742, %743)
}

def @func_499() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %744 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %745 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %746 = %744.1;
  (%745, %746)
}

def @func_4778() -> (Tensor[(1, 9, 13), float32],) {
  %747 = @func_1440() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %748 = %747.0;
  (%748,)
}

def @func_1565() -> (Tensor[(1, 9, 13), float32],) {
  %749 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  (%749,)
}

def @func_5243(%var_5220: Tensor[(11, 9, 13), float32]) -> Tensor[(11, 9, 13), int8] {
  %750 = @func_4778() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %751 = %750.0;
  %752 = cast(%751, dtype="int8") /* ty=Tensor[(1, 9, 13), int8] */;
  %753 = cast(%var_5220, dtype="int8") /* ty=Tensor[(11, 9, 13), int8] */;
  right_shift(%752, %753) /* ty=Tensor[(11, 9, 13), int8] */
}

def @func_5329(%var_5325: Tensor[(2496), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], int8, int8, Tensor[(2496), int8]) {
  %754 = cast(meta[relay.Constant][46] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %755 = cast(%var_5325, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %756 = cast(%var_5325, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %757 = reshape(%754, newshape=[]) /* ty=int8 */;
  %758 = reshape(%755, newshape=[624, 4]) /* ty=Tensor[(624, 4), int8] */;
  %759 = reshape(%756, newshape=[624, 4]) /* ty=Tensor[(624, 4), int8] */;
  %760 = @func_547(%757, %758, %759) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), bool], int8, Tensor[(624, 4), bool], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %761 = @func_4441() /* ty=Tensor[(1, 9, 13), float32] */;
  %762 = @func_2205() /* ty=Tensor[(1, 9, 13), float32] */;
  %763 = %760.2;
  (%761, %762, %763, meta[relay.Constant][46] /* ty=int8 */, %var_5325)
}

def @func_3116() -> (Tensor[(1, 9, 13), float32],) {
  %764 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %765 = %764.1;
  (%765,)
}

def @func_360(%var_351: Tensor[(13, 9, 13), float32]) -> Tensor[(13, 9, 13), bool] {
  %766 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %767 = cast(%766, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %768 = cast(%var_351, dtype="bool") /* ty=Tensor[(13, 9, 13), bool] */;
  not_equal(%767, %768) /* ty=Tensor[(13, 9, 13), bool] */
}

def @func_3804(%var_3779: Tensor[(2496), float64]) -> (int8, Tensor[(2496), int8], Tensor[(2496), float64], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %769 = @func_1337() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1521), float32], int8, Tensor[(2496), int8]) */;
  %770 = cast(%var_3779, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %771 = reshape(%770, newshape=[2496]) /* ty=Tensor[(2496), float64] */;
  %772 = @func_1661(%771) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(2496), int64], Tensor[(2496), int8]) */;
  %773 = @func_3635() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %774 = %769.2;
  %775 = %772.2;
  %776 = %773.1;
  %777 = @func_710() /* ty=Tensor[(1, 9, 13), float32] */;
  (%774, %775, %var_3779, %776, %777)
}

def @func_1740() -> (Tensor[(?, 9, 13), uint8], Tensor[(1, 9, 13), float64], Tensor[(1, 9, 13), float32]) {
  %778 = @func_793() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %779 = %778.0;
  %780 = cast(%779, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %781 = sin(%780) /* ty=Tensor[(1, 9, 13), float64] */;
  %782 = cast(%779, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %786 = greater_equal(%784, %785) /* ty=Tensor[(?, 9, 13), bool] */;
  %787 = cast(%781, dtype="uint8") /* ty=Tensor[(1, 9, 13), uint8] */;
  %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%786, dtype="uint8") /* ty=Tensor[(?, 9, 13), uint8] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %791 = cast(%779, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %792 = left_shift(%789, %790) /* ty=Tensor[(?, 9, 13), uint8] */;
  %793 = log10(%791) /* ty=Tensor[(1, 9, 13), float64] */;
  %794 = @func_1590() /* ty=Tensor[(1, 9, 13), float32] */;
  (%792, %793, %794)
}

def @func_4562() -> Tensor[(1, 9, 13), float32] {
  @func_2717() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_660(%var_603: Tensor[(12, 9, 13), float32], %var_647: Tensor[(2496), int8]) -> (Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) {
  %795 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %796 = cast(%795, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %797 = cast(%var_603, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
  %798 = cast(%var_603, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %799 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %800 = cast(%var_647, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %801 = cast(%var_647, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %802 = reshape(%799, newshape=[]) /* ty=int8 */;
  %803 = reshape(%800, newshape=[624, 4]) /* ty=Tensor[(624, 4), int8] */;
  %804 = reshape(%801, newshape=[624, 4]) /* ty=Tensor[(624, 4), int8] */;
  %805 = @func_547(%802, %803, %804) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), bool], int8, Tensor[(624, 4), bool], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %806 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %807 = cast(%var_647, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %808 = reshape(%806, newshape=[]) /* ty=int8 */;
  %809 = reshape(%807, newshape=[12, 13, 16]) /* ty=Tensor[(12, 13, 16), int8] */;
  %810 = @func_438(%808, %809) /* ty=(Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %811 = floor_divide(%796, %797) /* ty=Tensor[(12, 9, 13), float32] */;
  %812 = cosh(%798) /* ty=Tensor[(12, 9, 13), float64] */;
  %813 = %805.2;
  %814 = %810.3;
  (%811, %812, %813, meta[relay.Constant][47] /* ty=int8 */, %var_647, %814)
}

def @func_1952(%var_1940: Tensor[(16, 12, 13), float64]) -> (Tensor[(16, 12, 13), float64], Tensor[(6, 16, 3), int8], Tensor[(288), int8]) {
  %815 = cast(%var_1940, dtype="float64") /* ty=Tensor[(16, 12, 13), float64] */;
  %816 = cast(meta[relay.Constant][48] /* ty=Tensor[(288), int8] */, dtype="int8") /* ty=Tensor[(288), int8] */;
  %817 = cast(meta[relay.Constant][48] /* ty=Tensor[(288), int8] */, dtype="int8") /* ty=Tensor[(288), int8] */;
  %818 = reshape(%816, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
  %819 = reshape(%817, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
  %820 = @func_816(%818, %819) /* ty=(Tensor[(6, 16, 3), int8],) */;
  %821 = acosh(%815) /* ty=Tensor[(16, 12, 13), float64] */;
  %822 = %820.0;
  (%821, %822, meta[relay.Constant][48] /* ty=Tensor[(288), int8] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4051() -> (Tensor[(1, 9, 13), float32],) {
  %1 = fn () -> (Tensor[(1, 9, 13), float32],) {
    %0 = @func_2205() /* ty=Tensor[(1, 9, 13), float32] */;
    (%0,)
  };
  %1() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_1363(%var_1344: Tensor[(6, 9, 13), float32], %var_1357: Tensor[(52, 48), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(52, 48), int8], Tensor[(6, 9, 13), float64]) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(1404), uint32] */, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(1521), float32] */, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %4 = cast(%var_1357, dtype="int8") /* ty=Tensor[(52, 48), int8] */;
  %5 = reshape(%2, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), uint32] */;
  %6 = reshape(%3, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float32] */;
  %7 = reshape(%4, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %8 = @func_1277(%5, %6, %7) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */;
  %9 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %10 = cast(%9, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %11 = cast(%var_1344, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %12 = greater_equal(%10, %11) /* ty=Tensor[(6, 9, 13), bool] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(6, 9, 13), float64] */;
  %14 = %8.3;
  %15 = acosh(%13) /* ty=Tensor[(6, 9, 13), float64] */;
  (%14, meta[relay.Constant][0] /* ty=Tensor[(1404), uint32] */, meta[relay.Constant][1] /* ty=Tensor[(1521), float32] */, %var_1357, %15)
}

def @func_2572(%var_2570: Tensor[(1, 1404), uint32], %var_2571: Tensor[(11, 1404), bool]) -> (Tensor[(1, 9, 13), float32], Tensor[(11, 1404), bool]) {
  @func_2568(%var_2570, %var_2571) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(11, 1404), bool]) */
}

def @func_4978(%var_4977: Tensor[(54, 26), uint32]) -> (Tensor[(1, 9, 13), float32], Tensor[(12, 156), float32], Tensor[(1260), float32], Tensor[(54, 26), uint32]) {
  %24 = fn (%var_4966: Tensor[(54, 26), uint32]) -> (Tensor[(1, 9, 13), float32], Tensor[(12, 156), float32], Tensor[(1260), float32], Tensor[(54, 26), uint32]) {
    %16 = @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
    %18 = cast(%var_4966, dtype="uint32") /* ty=Tensor[(54, 26), uint32] */;
    %19 = reshape(%17, newshape=[12, 15, 7]) /* ty=Tensor[(12, 15, 7), float32] */;
    %20 = reshape(%18, newshape=[1404]) /* ty=Tensor[(1404), uint32] */;
    %21 = @func_3870(%19, %20) /* ty=(Tensor[(12, 15, 7), float32], Tensor[(288), int8], Tensor[(2496), float64], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(15444), bool], Tensor[(1, 9, 13), float32], Tensor[(7, 6, 2), uint32], Tensor[(84), uint32], Tensor[(1521), float32], Tensor[(12, 156), float32]) */;
    %22 = %16.0;
    %23 = %21.10;
    (%22, %23, meta[relay.Constant][2] /* ty=Tensor[(1260), float32] */, %var_4966)
  };
  %24(%var_4977) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 156), float32], Tensor[(1260), float32], Tensor[(54, 26), uint32]) */
}

def @func_6119(%var_6097: Tensor[(6, 9, 13), float32]) -> (Tensor[(1, 9, 13), float64], Tensor[(6, 9, 13), bool]) {
  %25 = @func_4291() /* ty=Tensor[(1, 9, 13), float32] */;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %27 = cast(%var_6097, dtype="float64") /* ty=Tensor[(6, 9, 13), float64] */;
  %28 = floor_divide(%26, %27) /* ty=Tensor[(6, 9, 13), float64] */;
  %29 = cast(%var_6097, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %33 = @func_4648() /* ty=Tensor[(1, 9, 13), float64] */;
  %34 = greater(%31, %32) /* ty=Tensor[(6, 9, 13), bool] */;
  (%33, %34)
}

def @func_3117() -> (Tensor[(1, 9, 13), float32],) {
  %37 = fn () -> (Tensor[(1, 9, 13), float32],) {
    %35 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %36 = %35.1;
    (%36,)
  };
  %37() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_1852() -> (Tensor[(1, 9, 13), float32],) {
  @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_3004() -> Tensor[(1, 9, 13), float32] {
  @func_2717() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_4897(%var_4891: Tensor[(11, 10, 11), int32]) -> Tensor[(11, 10, 11), int32] {
  %38 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %39 = cast(%var_4891, dtype="int32") /* ty=Tensor[(11, 10, 11), int32] */;
  right_shift(%38, %39) /* ty=Tensor[(11, 10, 11), int32] */
}

def @func_974(%var_942: Tensor[(15, 9, 13), float32]) -> (Tensor[(?, 9, 13), int8], Tensor[(15, 9, 13), float32], Tensor[(6, 16, 3), int8], Tensor[(288), int8], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %40 = @func_895() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) */;
  %41 = %40.0;
  %42 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %43 = cast(%42, dtype="int8") /* ty=Tensor[(1, 9, 13), int8] */;
  %44 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%41, dtype="int8") /* ty=Tensor[(1, 9, 13), int8] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %47 = cast(%42, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %48 = cast(%var_942, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
  %49 = less(%47, %48) /* ty=Tensor[(15, 9, 13), bool] */;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(15, 9, 13), float32] */;
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), int8] */, dtype="int8") /* ty=Tensor[(288), int8] */;
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), int8] */, dtype="int8") /* ty=Tensor[(288), int8] */;
  %53 = reshape(%51, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
  %54 = reshape(%52, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
  %55 = @func_816(%53, %54) /* ty=(Tensor[(6, 16, 3), int8],) */;
  %56 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %57 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %58 = bitwise_xor(%45, %46) /* ty=Tensor[(?, 9, 13), int8] */;
  %59 = cos(%50) /* ty=Tensor[(15, 9, 13), float32] */;
  %60 = %55.0;
  %61 = %56.0;
  %62 = %57.0;
  %63 = @func_710() /* ty=Tensor[(1, 9, 13), float32] */;
  (%58, %59, %60, meta[relay.Constant][3] /* ty=Tensor[(288), int8] */, %61, %62, %63)
}

def @func_2777(%var_2775: Tensor[(2496), float64]) -> (Tensor[(1, 9, 13), float32], Tensor[(16, 12, 13), float64], Tensor[(2496), float64]) {
  @func_2774(%var_2775) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(16, 12, 13), float64], Tensor[(2496), float64]) */
}

def @func_4320() -> Tensor[(?, 9, 13), uint8] {
  @func_4318() /* ty=Tensor[(?, 9, 13), uint8] */
}

def @func_5371() -> (Tensor[(1, 9, 13), float32],) {
  @func_5369() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_2404(%var_2402: Tensor[(702), float32], %var_2403: Tensor[(2496), int8]) -> (Tensor[(15, 9, 13), int8], Tensor[(1521), float32], Tensor[(702), float32], Tensor[(2496), int8]) {
  @func_2400(%var_2402, %var_2403) /* ty=(Tensor[(15, 9, 13), int8], Tensor[(1521), float32], Tensor[(702), float32], Tensor[(2496), int8]) */
}

def @func_4198() -> (Tensor[(1, 9, 13), float32],) {
  %64 = @func_742() /* ty=Tensor[(1, 9, 13), float32] */;
  (%64,)
}

def @func_4170(%var_4169: Tensor[(13, 9, 13), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), int16], Tensor[(2496), int8], Tensor[(1404), uint32], Tensor[(2496), int8]) {
  %78 = fn (%var_4155: Tensor[(13, 9, 13), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), int16], Tensor[(2496), int8], Tensor[(1404), uint32], Tensor[(2496), int8]) {
    %65 = @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %66 = @func_3164() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %67 = %66.0;
    %68 = cast(%67, dtype="int16") /* ty=Tensor[(1, 9, 13), int16] */;
    %69 = cast(%var_4155, dtype="int16") /* ty=Tensor[(13, 9, 13), int16] */;
    %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(1404), uint32] */, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
    %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %72 = reshape(%70, newshape=[1404]) /* ty=Tensor[(1404), uint32] */;
    %73 = reshape(%71, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
    %74 = @func_2758(%72, %73) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(2496), int8]) */;
    %75 = %65.0;
    %76 = bitwise_and(%68, %69) /* ty=Tensor[(13, 9, 13), int16] */;
    %77 = %74.5;
    (%75, %76, %77, meta[relay.Constant][4] /* ty=Tensor[(1404), uint32] */, meta[relay.Constant][5] /* ty=Tensor[(2496), int8] */)
  };
  %78(%var_4169) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), int16], Tensor[(2496), int8], Tensor[(1404), uint32], Tensor[(2496), int8]) */
}

def @func_5686(%var_5685: Tensor[(1, 9, 10), float32]) -> (Tensor[(1, 9, 10), float32],) {
  %81 = fn (%var_5681: Tensor[(1, 9, 10), float32]) -> (Tensor[(1, 9, 10), float32],) {
    %79 = cast(%var_5681, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
    %80 = sin(%79) /* ty=Tensor[(1, 9, 10), float32] */;
    (%80,)
  };
  %81(%var_5685) /* ty=(Tensor[(1, 9, 10), float32],) */
}

def @func_6191() -> (Tensor[(1, 9, 13), float64],) {
  %83 = fn () -> (Tensor[(1, 9, 13), float64],) {
    %82 = @func_4463() /* ty=Tensor[(1, 9, 13), float64] */;
    (%82,)
  };
  %83() /* ty=(Tensor[(1, 9, 13), float64],) */
}

def @func_5352() -> Tensor[(1, 9, 13), float32] {
  @func_4441() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_264() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_4533() -> (Tensor[(1, 9, 13), float32], int8, Tensor[(1404), float32], Tensor[(2496), int8]) {
  %92 = fn () -> (Tensor[(1, 9, 13), float32], int8, Tensor[(1404), float32], Tensor[(2496), int8]) {
    %84 = @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %86 = cast(meta[relay.Constant][7] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %87 = reshape(%85, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
    %88 = reshape(%86, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
    %89 = @func_660(%87, %88) /* ty=(Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */;
    %90 = %84.0;
    %91 = %89.3;
    (%90, %91, meta[relay.Constant][6] /* ty=Tensor[(1404), float32] */, meta[relay.Constant][7] /* ty=Tensor[(2496), int8] */)
  };
  %92() /* ty=(Tensor[(1, 9, 13), float32], int8, Tensor[(1404), float32], Tensor[(2496), int8]) */
}

def @func_1682() -> (Tensor[(1, 9, 13), float32],) {
  %93 = @func_1106() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %94 = %93.0;
  (%94,)
}

def @func_3165() -> (Tensor[(1, 9, 13), float32],) {
  %97 = fn () -> (Tensor[(1, 9, 13), float32],) {
    %95 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %96 = %95.0;
    (%96,)
  };
  %97() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_3559() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 1521), float32], Tensor[(1404), uint32], Tensor[(13, 117), float32], Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) {
  %109 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(1, 1521), float32], Tensor[(1404), uint32], Tensor[(13, 117), float32], Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) {
    %98 = cast(meta[relay.Constant][8] /* ty=Tensor[(1404), uint32] */, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
    %99 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 117), float32] */, dtype="float32") /* ty=Tensor[(13, 117), float32] */;
    %100 = cast(meta[relay.Constant][10] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %101 = reshape(%98, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), uint32] */;
    %102 = reshape(%99, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float32] */;
    %103 = reshape(%100, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
    %104 = @func_1277(%101, %102, %103) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */;
    %105 = @func_3116() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %106 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
    %107 = %104.2;
    %108 = %105.0;
    (%106, %107, meta[relay.Constant][8] /* ty=Tensor[(1404), uint32] */, meta[relay.Constant][9] /* ty=Tensor[(13, 117), float32] */, meta[relay.Constant][10] /* ty=Tensor[(2496), int8] */, %108)
  };
  %109() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 1521), float32], Tensor[(1404), uint32], Tensor[(13, 117), float32], Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */
}

def @func_4318() -> Tensor[(?, 9, 13), uint8] {
  %110 = @func_1740() /* ty=(Tensor[(?, 9, 13), uint8], Tensor[(1, 9, 13), float64], Tensor[(1, 9, 13), float32]) */;
  %110.0
}

def @func_2662() -> Tensor[(1, 9, 13), float32] {
  @func_2660() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_5128(%var_5060: Tensor[(10, 2, 4), int8], %var_5061: Tensor[(10, 2, 4), int8], %var_5098: Tensor[(1404), float32]) -> (Tensor[(?, 9, 13), float64], Tensor[(1404), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(10, 2, 4), int32]) {
  %111 = cast(%var_5098, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %112 = reshape(%111, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
  %113 = @func_4075(%112) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1404), float32], Tensor[(156, 16), int8], Tensor[(?, 9, 13), float64]) */;
  %114 = @func_1440() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %115 = @func_2505() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %116 = cast(%var_5061, dtype="int8") /* ty=Tensor[(10, 2, 4), int8] */;
  %117 = shape_of(%var_5060, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%var_5060, dtype="int8") /* ty=Tensor[(10, 2, 4), int8] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %120 = minimum(%118, %119) /* ty=Tensor[(10, 2, 4), int8] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(10, 2, 4), float64] */;
  %122 = log10(%121) /* ty=Tensor[(10, 2, 4), float64] */;
  %123 = cast(%var_5060, dtype="float64") /* ty=Tensor[(10, 2, 4), float64] */;
  %124 = sinh(%123) /* ty=Tensor[(10, 2, 4), float64] */;
  %125 = cast(%124, dtype="bool") /* ty=Tensor[(10, 2, 4), bool] */;
  %126 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%122, dtype="bool") /* ty=Tensor[(10, 2, 4), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %129 = greater(%127, %128) /* ty=Tensor[(10, 2, 4), bool] */;
  %130 = cast(%129, dtype="float32") /* ty=Tensor[(10, 2, 4), float32] */;
  %131 = atanh(%130) /* ty=Tensor[(10, 2, 4), float32] */;
  %132 = cast(%124, dtype="int32") /* ty=Tensor[(10, 2, 4), int32] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="int32") /* ty=Tensor[(10, 2, 4), int32] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %136 = %113.3;
  %137 = %114.0;
  %138 = %115.0;
  %139 = multiply(%134, %135) /* ty=Tensor[(10, 2, 4), int32] */;
  (%136, %var_5098, %137, %138, %139)
}

def @func_5782() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %144 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
    %140 = @func_1565() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %141 = @func_4778() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %142 = %140.0;
    %143 = %141.0;
    (%142, %143)
  };
  %144() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_2332() -> (Tensor[(1, 9, 13), float32],) {
  %147 = fn () -> (Tensor[(1, 9, 13), float32],) {
    %145 = @func_895() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) */;
    %146 = %145.0;
    (%146,)
  };
  %147() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_1036(%var_1021: Tensor[(1521), float32]) -> (Tensor[(1521), float32], Tensor[(1521), uint32], Tensor[(11, 9, 13), float64]) {
  %148 = cast(meta[relay.Constant][11] /* ty=Tensor[(1521), float32] */, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %149 = reshape(%148, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
  %150 = @func_486(%149) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 13, 16), int8], int8, Tensor[(2496), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %151 = %150.5;
  %152 = cast(%var_1021, dtype="uint32") /* ty=Tensor[(1521), uint32] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(1), int32] */;
  %154 = cast(%151, dtype="uint32") /* ty=Tensor[(1521), uint32] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %156 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %157 = %156.0;
  %158 = cast(%157, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %159 = cos(%158) /* ty=Tensor[(1, 9, 13), float32] */;
  %160 = cast(%159, dtype="uint32") /* ty=Tensor[(1, 9, 13), uint32] */;
  %161 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 9, 13), float32] */, dtype="uint32") /* ty=Tensor[(11, 9, 13), uint32] */;
  %162 = bitwise_and(%160, %161) /* ty=Tensor[(11, 9, 13), uint32] */;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(11, 9, 13), float64] */;
  %164 = bitwise_or(%154, %155) /* ty=Tensor[(1521), uint32] */;
  %165 = log10(%163) /* ty=Tensor[(11, 9, 13), float64] */;
  (meta[relay.Constant][11] /* ty=Tensor[(1521), float32] */, %164, %165)
}

def @func_2590() -> (Tensor[(1, 9, 13), float32],) {
  %166 = @func_742() /* ty=Tensor[(1, 9, 13), float32] */;
  (%166,)
}

def @func_744() -> Tensor[(1, 9, 13), float32] {
  @func_742() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_1850() -> (Tensor[(1, 9, 13), float32],) {
  %167 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %168 = %167.1;
  (%168,)
}

def @func_3286(%var_3284: Tensor[(15, 9, 13), float32]) -> (Tensor[(15, 9, 13), float32],) {
  @func_3283(%var_3284) /* ty=(Tensor[(15, 9, 13), float32],) */
}

def @func_4384() -> Tensor[(1, 9, 13), float32] {
  @func_4382() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_5329(%var_5325: Tensor[(2496), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], int8, int8, Tensor[(2496), int8]) {
  %169 = cast(meta[relay.Constant][13] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %170 = cast(%var_5325, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %171 = cast(%var_5325, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %172 = reshape(%169, newshape=[]) /* ty=int8 */;
  %173 = reshape(%170, newshape=[624, 4]) /* ty=Tensor[(624, 4), int8] */;
  %174 = reshape(%171, newshape=[624, 4]) /* ty=Tensor[(624, 4), int8] */;
  %175 = @func_547(%172, %173, %174) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), bool], int8, Tensor[(624, 4), bool], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %176 = @func_4441() /* ty=Tensor[(1, 9, 13), float32] */;
  %177 = @func_2205() /* ty=Tensor[(1, 9, 13), float32] */;
  %178 = %175.2;
  (%176, %177, %178, meta[relay.Constant][13] /* ty=int8 */, %var_5325)
}

def @func_2761(%var_2759: Tensor[(1404), uint32], %var_2760: Tensor[(2496), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(2496), int8]) {
  %190 = fn (%var_2752: Tensor[(1404), uint32], %var_2754: Tensor[(2496), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(2496), int8]) {
    %179 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %180 = cast(%var_2752, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
    %181 = cast(meta[relay.Constant][14] /* ty=Tensor[(1521), float32] */, dtype="float32") /* ty=Tensor[(1521), float32] */;
    %182 = cast(%var_2754, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %183 = reshape(%180, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), uint32] */;
    %184 = reshape(%181, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float32] */;
    %185 = reshape(%182, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
    %186 = @func_1277(%183, %184, %185) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */;
    %187 = %179.1;
    %188 = @func_1290() /* ty=Tensor[(1, 9, 13), float32] */;
    %189 = %186.3;
    (%187, %188, %189, %var_2752, meta[relay.Constant][14] /* ty=Tensor[(1521), float32] */, %var_2754)
  };
  %190(%var_2759, %var_2760) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(2496), int8]) */
}

def @func_1282(%var_1279: Tensor[(12, 9, 13), uint32], %var_1280: Tensor[(1, 1521), float32], %var_1281: Tensor[(2496), int8]) -> (Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) {
  @func_1277(%var_1279, %var_1280, %var_1281) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */
}

def @func_4336() -> (int8, Tensor[(1, 9, 13), float32]) {
  %195 = fn () -> (int8, Tensor[(1, 9, 13), float32]) {
    %191 = @func_1337() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1521), float32], int8, Tensor[(2496), int8]) */;
    %192 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %193 = %191.2;
    %194 = %192.1;
    (%193, %194)
  };
  %195() /* ty=(int8, Tensor[(1, 9, 13), float32]) */
}

def @func_4020(%var_3965: Tensor[(2574, 6), bool]) -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(2574, 6), uint64]) {
  %196 = cast(meta[relay.Constant][15] /* ty=Tensor[(1404), uint32] */, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %197 = cast(%var_3965, dtype="bool") /* ty=Tensor[(2574, 6), bool] */;
  %198 = reshape(%196, newshape=[1, 1404]) /* ty=Tensor[(1, 1404), uint32] */;
  %199 = reshape(%197, newshape=[11, 1404]) /* ty=Tensor[(11, 1404), bool] */;
  %200 = @func_2568(%198, %199) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(11, 1404), bool]) */;
  %201 = @func_3116() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %202 = cast(%var_3965, dtype="float32") /* ty=Tensor[(2574, 6), float32] */;
  %203 = sigmoid(%202) /* ty=Tensor[(2574, 6), float32] */;
  %204 = cast(%var_3965, dtype="uint64") /* ty=Tensor[(2574, 6), uint64] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(2), int32] */;
  %206 = cast(%203, dtype="uint64") /* ty=Tensor[(2574, 6), uint64] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %208 = @func_1590() /* ty=Tensor[(1, 9, 13), float32] */;
  %209 = %200.0;
  %210 = %201.0;
  %211 = @func_710() /* ty=Tensor[(1, 9, 13), float32] */;
  %212 = subtract(%206, %207) /* ty=Tensor[(2574, 6), uint64] */;
  (%208, %209, meta[relay.Constant][15] /* ty=Tensor[(1404), uint32] */, %210, %211, %212)
}

def @func_819(%var_817: Tensor[(6, 16, 3), int8], %var_818: Tensor[(6, 16, 3), int8]) -> (Tensor[(6, 16, 3), int8],) {
  %218 = fn (%var_806: Tensor[(6, 16, 3), int8], %var_807: Tensor[(6, 16, 3), int8]) -> (Tensor[(6, 16, 3), int8],) {
    %213 = cast(%var_807, dtype="int8") /* ty=Tensor[(6, 16, 3), int8] */;
    %214 = shape_of(%var_806, dtype="int32") /* ty=Tensor[(3), int32] */;
    %215 = cast(%var_806, dtype="int8") /* ty=Tensor[(6, 16, 3), int8] */;
    %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %217 = bitwise_or(%215, %216) /* ty=Tensor[(6, 16, 3), int8] */;
    (%217,)
  };
  %218(%var_817, %var_818) /* ty=(Tensor[(6, 16, 3), int8],) */
}

def @func_3261(%var_3259: Tensor[(6, 9, 13), float32]) -> Tensor[(6, 9, 13), float32] {
  @func_3258(%var_3259) /* ty=Tensor[(6, 9, 13), float32] */
}

def @func_1741() -> (Tensor[(?, 9, 13), uint8], Tensor[(1, 9, 13), float64], Tensor[(1, 9, 13), float32]) {
  %236 = fn () -> (Tensor[(?, 9, 13), uint8], Tensor[(1, 9, 13), float64], Tensor[(1, 9, 13), float32]) {
    %219 = @func_793() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %220 = %219.0;
    %221 = cast(%220, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
    %222 = sin(%221) /* ty=Tensor[(1, 9, 13), float64] */;
    %223 = cast(%220, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
    %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
    %225 = cast(%222, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
    %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %227 = greater_equal(%225, %226) /* ty=Tensor[(?, 9, 13), bool] */;
    %228 = cast(%222, dtype="uint8") /* ty=Tensor[(1, 9, 13), uint8] */;
    %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
    %230 = cast(%227, dtype="uint8") /* ty=Tensor[(?, 9, 13), uint8] */;
    %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %232 = cast(%220, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
    %233 = left_shift(%230, %231) /* ty=Tensor[(?, 9, 13), uint8] */;
    %234 = log10(%232) /* ty=Tensor[(1, 9, 13), float64] */;
    %235 = @func_1590() /* ty=Tensor[(1, 9, 13), float32] */;
    (%233, %234, %235)
  };
  %236() /* ty=(Tensor[(?, 9, 13), uint8], Tensor[(1, 9, 13), float64], Tensor[(1, 9, 13), float32]) */
}

def @func_1684() -> (Tensor[(1, 9, 13), float32],) {
  @func_1682() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_4563() -> Tensor[(1, 9, 13), float32] {
  %237 = fn () -> Tensor[(1, 9, 13), float32] {
    @func_2717() /* ty=Tensor[(1, 9, 13), float32] */
  };
  %237() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_1954(%var_1953: Tensor[(16, 12, 13), float64]) -> (Tensor[(16, 12, 13), float64], Tensor[(6, 16, 3), int8], Tensor[(288), int8]) {
  %246 = fn (%var_1940: Tensor[(16, 12, 13), float64]) -> (Tensor[(16, 12, 13), float64], Tensor[(6, 16, 3), int8], Tensor[(288), int8]) {
    %238 = cast(%var_1940, dtype="float64") /* ty=Tensor[(16, 12, 13), float64] */;
    %239 = cast(meta[relay.Constant][16] /* ty=Tensor[(288), int8] */, dtype="int8") /* ty=Tensor[(288), int8] */;
    %240 = cast(meta[relay.Constant][16] /* ty=Tensor[(288), int8] */, dtype="int8") /* ty=Tensor[(288), int8] */;
    %241 = reshape(%239, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
    %242 = reshape(%240, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
    %243 = @func_816(%241, %242) /* ty=(Tensor[(6, 16, 3), int8],) */;
    %244 = acosh(%238) /* ty=Tensor[(16, 12, 13), float64] */;
    %245 = %243.0;
    (%244, %245, meta[relay.Constant][16] /* ty=Tensor[(288), int8] */)
  };
  %246(%var_1953) /* ty=(Tensor[(16, 12, 13), float64], Tensor[(6, 16, 3), int8], Tensor[(288), int8]) */
}

def @func_4917() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %250 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
    %247 = @func_2331() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %248 = @func_3346() /* ty=Tensor[(1, 9, 13), float32] */;
    %249 = %247.0;
    (%248, %249)
  };
  %250() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_4078(%var_4076: Tensor[(1404), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1404), float32], Tensor[(156, 16), int8], Tensor[(?, 9, 13), float64]) {
  @func_4075(%var_4076) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1404), float32], Tensor[(156, 16), int8], Tensor[(?, 9, 13), float64]) */
}

def @func_5058(%var_5056: Tensor[(16, 7, 3), float64]) -> Tensor[(16, 7, 3), float64] {
  @func_5055(%var_5056) /* ty=Tensor[(16, 7, 3), float64] */
}

def @func_2400(%var_2394: Tensor[(702), float32], %var_2395: Tensor[(2496), int8]) -> (Tensor[(15, 9, 13), int8], Tensor[(1521), float32], Tensor[(702), float32], Tensor[(2496), int8]) {
  %251 = @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %252 = %251.0;
  %253 = cast(%252, dtype="int8") /* ty=Tensor[(1, 9, 13), int8] */;
  %254 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 9, 13), float32] */, dtype="int8") /* ty=Tensor[(15, 9, 13), int8] */;
  %255 = cast(%var_2394, dtype="float32") /* ty=Tensor[(702), float32] */;
  %256 = cast(%var_2395, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %257 = reshape(%255, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float32] */;
  %258 = reshape(%256, newshape=[52, 48]) /* ty=Tensor[(52, 48), int8] */;
  %259 = @func_1363(%257, %258) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(52, 48), int8], Tensor[(6, 9, 13), float64]) */;
  %260 = left_shift(%253, %254) /* ty=Tensor[(15, 9, 13), int8] */;
  %261 = %259.2;
  (%260, %261, %var_2394, %var_2395)
}

def @func_4023(%var_4021: Tensor[(2574, 6), bool]) -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(2574, 6), uint64]) {
  @func_4020(%var_4021) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(2574, 6), uint64]) */
}

def @func_1108() -> (Tensor[(1, 9, 13), float32],) {
  @func_1106() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_1566() -> (Tensor[(1, 9, 13), float32],) {
  %263 = fn () -> (Tensor[(1, 9, 13), float32],) {
    %262 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
    (%262,)
  };
  %263() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_1590() -> Tensor[(1, 9, 13), float32] {
  @func_217() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_4465() -> Tensor[(1, 9, 13), float64] {
  @func_4463() /* ty=Tensor[(1, 9, 13), float64] */
}

def @func_711() -> Tensor[(1, 9, 13), float32] {
  %265 = fn () -> Tensor[(1, 9, 13), float32] {
    %264 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %264.0
  };
  %265() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_5534(%var_5532: Tensor[(4, 9, 13), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(4, 9, 13), uint16]) {
  @func_5531(%var_5532) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(4, 9, 13), uint16]) */
}

def @func_6332(%var_6293: Tensor[(1210), int32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1210), uint32], Tensor[(1, 9, 13), float32]) {
  %266 = cast(%var_6293, dtype="int32") /* ty=Tensor[(1210), int32] */;
  %267 = reshape(%266, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), int32] */;
  %268 = @func_4897(%267) /* ty=Tensor[(11, 10, 11), int32] */;
  %269 = cast(%268, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
  %270 = shape_of(%var_6293, dtype="int32") /* ty=Tensor[(1), int32] */;
  %271 = cast(%var_6293, dtype="bool") /* ty=Tensor[(1210), bool] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?), bool] */;
  %273 = greater_equal(%271, %272) /* ty=Tensor[(1210), bool] */;
  %274 = cast(%268, dtype="uint32") /* ty=Tensor[(11, 10, 11), uint32] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(1), int32] */;
  %276 = cast(%273, dtype="uint32") /* ty=Tensor[(1210), uint32] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %278 = @func_5781() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %279 = @func_5561() /* ty=Tensor[(1, 9, 13), float32] */;
  %280 = logical_xor(%276, %277) /* ty=Tensor[(1210), uint32] */;
  %281 = %278.1;
  (%279, %280, %281)
}

def @func_3898() -> (Tensor[(8, 15, 8), bool], Tensor[(8, 15, 8), float64]) {
  %282 = cast(meta[relay.Constant][18] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %283 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 15, 8), int16] */, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
  %284 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 15, 8), int16] */, dtype="float64") /* ty=Tensor[(8, 15, 8), float64] */;
  %285 = greater(%282, %283) /* ty=Tensor[(8, 15, 8), bool] */;
  %286 = sin(%284) /* ty=Tensor[(8, 15, 8), float64] */;
  (%285, %286)
}

def @func_1291() -> Tensor[(1, 9, 13), float32] {
  %288 = fn () -> Tensor[(1, 9, 13), float32] {
    %287 = @func_1106() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %287.0
  };
  %288() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_4441() -> Tensor[(1, 9, 13), float32] {
  %289 = @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %289.0
}

def @func_6335(%var_6333: Tensor[(1210), int32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1210), uint32], Tensor[(1, 9, 13), float32]) {
  @func_6332(%var_6333) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1210), uint32], Tensor[(1, 9, 13), float32]) */
}

def @func_4648() -> Tensor[(1, 9, 13), float64] {
  @func_4463() /* ty=Tensor[(1, 9, 13), float64] */
}

def @func_3806(%var_3805: Tensor[(2496), float64]) -> (int8, Tensor[(2496), int8], Tensor[(2496), float64], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %299 = fn (%var_3779: Tensor[(2496), float64]) -> (int8, Tensor[(2496), int8], Tensor[(2496), float64], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
    %290 = @func_1337() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1521), float32], int8, Tensor[(2496), int8]) */;
    %291 = cast(%var_3779, dtype="float64") /* ty=Tensor[(2496), float64] */;
    %292 = reshape(%291, newshape=[2496]) /* ty=Tensor[(2496), float64] */;
    %293 = @func_1661(%292) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(2496), int64], Tensor[(2496), int8]) */;
    %294 = @func_3635() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %295 = %290.2;
    %296 = %293.2;
    %297 = %294.1;
    %298 = @func_710() /* ty=Tensor[(1, 9, 13), float32] */;
    (%295, %296, %var_3779, %297, %298)
  };
  %299(%var_3805) /* ty=(int8, Tensor[(2496), int8], Tensor[(2496), float64], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_6247(%var_6245: Tensor[(336), int64], %var_6246: Tensor[(2496), int8]) -> (Tensor[(14, 12, 2), int64], Tensor[(336), int64], Tensor[(?, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1, 1521), float32], Tensor[(2496), int8], Tensor[(2496), int8], Tensor[(702), float32], Tensor[(1404), uint32]) {
  @func_6243(%var_6245, %var_6246) /* ty=(Tensor[(14, 12, 2), int64], Tensor[(336), int64], Tensor[(?, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1, 1521), float32], Tensor[(2496), int8], Tensor[(2496), int8], Tensor[(702), float32], Tensor[(1404), uint32]) */
}

def @func_5563() -> Tensor[(1, 9, 13), float32] {
  @func_5561() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_2242(%var_2241: Tensor[(1755), float32]) -> (Tensor[(1755), float32], Tensor[(?, 9, 13), float32]) {
  %310 = fn (%var_2233: Tensor[(1755), float32]) -> (Tensor[(1755), float32], Tensor[(?, 9, 13), float32]) {
    %300 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
    %301 = cast(%var_2233, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %302 = reshape(%301, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), float32] */;
    %303 = @func_974(%302) /* ty=(Tensor[(?, 9, 13), int8], Tensor[(15, 9, 13), float32], Tensor[(6, 16, 3), int8], Tensor[(288), int8], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %304 = %303.4;
    %305 = cast(%304, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
    %306 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %307 = cast(%300, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %309 = floor_divide(%307, %308) /* ty=Tensor[(?, 9, 13), float32] */;
    (%var_2233, %309)
  };
  %310(%var_2241) /* ty=(Tensor[(1755), float32], Tensor[(?, 9, 13), float32]) */
}

def @func_1783(%var_1782: Tensor[(1404), uint32]) -> (Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int32], Tensor[(1404), uint32], Tensor[(507, 3), float32], Tensor[(2496), int8]) {
  %321 = fn (%var_1775: Tensor[(1404), uint32]) -> (Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int32], Tensor[(1404), uint32], Tensor[(507, 3), float32], Tensor[(2496), int8]) {
    %311 = @func_1740() /* ty=(Tensor[(?, 9, 13), uint8], Tensor[(1, 9, 13), float64], Tensor[(1, 9, 13), float32]) */;
    %312 = cast(%var_1775, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
    %313 = cast(meta[relay.Constant][20] /* ty=Tensor[(507, 3), float32] */, dtype="float32") /* ty=Tensor[(507, 3), float32] */;
    %314 = cast(meta[relay.Constant][21] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %315 = reshape(%312, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), uint32] */;
    %316 = reshape(%313, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float32] */;
    %317 = reshape(%314, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
    %318 = @func_1277(%315, %316, %317) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */;
    %319 = %311.2;
    %320 = %318.1;
    (%319, %320, %var_1775, meta[relay.Constant][20] /* ty=Tensor[(507, 3), float32] */, meta[relay.Constant][21] /* ty=Tensor[(2496), int8] */)
  };
  %321(%var_1782) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int32], Tensor[(1404), uint32], Tensor[(507, 3), float32], Tensor[(2496), int8]) */
}

def @main(%var_6383: Tensor[(4, 8, 7), float64], %var_6384: Tensor[(4, 8, 7), float64]) -> Tensor[(4, 8, 7), bool] {
  %322 = cast(%var_6384, dtype="bool") /* ty=Tensor[(4, 8, 7), bool] */;
  %323 = shape_of(%var_6383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_6383, dtype="bool") /* ty=Tensor[(4, 8, 7), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%324, %325) /* ty=Tensor[(4, 8, 7), bool] */
}

def @func_5285() -> (Tensor[(1, 9, 13), float32], Tensor[(11, 10, 11), int32], Tensor[(1210), float64]) {
  @func_5283() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(11, 10, 11), int32], Tensor[(1210), float64]) */
}

def @func_2300() -> (Tensor[(1, 9, 13), float32],) {
  %326 = @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %327 = %326.0;
  (%327,)
}

def @func_2980(%var_2978: float64, %var_2979: Tensor[(11, 13, 8), float64]) -> Tensor[(11, 13, 8), float64] {
  %330 = fn (%var_2962: float64, %var_2963: Tensor[(11, 13, 8), float64]) -> Tensor[(11, 13, 8), float64] {
    %328 = cast(%var_2962, dtype="float64") /* ty=float64 */;
    %329 = cast(%var_2963, dtype="float64") /* ty=Tensor[(11, 13, 8), float64] */;
    divide(%328, %329) /* ty=Tensor[(11, 13, 8), float64] */
  };
  %330(%var_2978, %var_2979) /* ty=Tensor[(11, 13, 8), float64] */
}

def @func_3327(%var_3324: Tensor[(702, 1), float32], %var_3325: Tensor[(2496), int8], %var_3326: Tensor[(1521), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(702, 1), float32], Tensor[(2496), int8], Tensor[(1521), float32]) {
  @func_3322(%var_3324, %var_3325, %var_3326) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(702, 1), float32], Tensor[(2496), int8], Tensor[(1521), float32]) */
}

def @func_5383() -> (Tensor[(1, 9, 13), float32],) {
  @func_5381() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_4190() -> Tensor[(1, 9, 13), float32] {
  @func_4188() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_4650() -> Tensor[(1, 9, 13), float64] {
  @func_4648() /* ty=Tensor[(1, 9, 13), float64] */
}

def @func_794() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %334 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
    %331 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
    %332 = @func_742() /* ty=Tensor[(1, 9, 13), float32] */;
    %333 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
    (%331, %332, %333)
  };
  %334() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_896() -> (Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) {
  %346 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) {
    %335 = cast(meta[relay.Constant][22] /* ty=Tensor[(18, 78), float32] */, dtype="float32") /* ty=Tensor[(18, 78), float32] */;
    %336 = cast(meta[relay.Constant][23] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %337 = reshape(%335, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
    %338 = reshape(%336, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
    %339 = @func_660(%337, %338) /* ty=(Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */;
    %340 = cast(meta[relay.Constant][23] /* ty=Tensor[(2496), int8] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
    %341 = log10(%340) /* ty=Tensor[(2496), float32] */;
    %342 = cast(%341, dtype="float64") /* ty=Tensor[(2496), float64] */;
    %343 = @func_710() /* ty=Tensor[(1, 9, 13), float32] */;
    %344 = %339.1;
    %345 = cos(%342) /* ty=Tensor[(2496), float64] */;
    (%343, %344, meta[relay.Constant][22] /* ty=Tensor[(18, 78), float32] */, %345)
  };
  %346() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) */
}

def @func_2698(%var_2696: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), bool], Tensor[(1521), float32], Tensor[(1521), float64]) {
  @func_2695(%var_2696) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(1521), float32], Tensor[(1521), float64]) */
}

def @func_4463() -> Tensor[(1, 9, 13), float64] {
  %347 = @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %348 = %347.0;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  asinh(%349) /* ty=Tensor[(1, 9, 13), float64] */
}

def @func_2660() -> Tensor[(1, 9, 13), float32] {
  %350 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %350.0
}

def @func_2592() -> (Tensor[(1, 9, 13), float32],) {
  @func_2590() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_742() -> Tensor[(1, 9, 13), float32] {
  @func_710() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_1592() -> Tensor[(1, 9, 13), float32] {
  @func_1590() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_488(%var_487: Tensor[(1521), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(12, 13, 16), int8], int8, Tensor[(2496), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) {
  %366 = fn (%var_482: Tensor[(1521), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(12, 13, 16), int8], int8, Tensor[(2496), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) {
    %351 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %352 = %351.0;
    %353 = cast(%352, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
    %354 = cast(meta[relay.Constant][24] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %355 = cast(meta[relay.Constant][25] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %356 = reshape(%354, newshape=[]) /* ty=int8 */;
    %357 = reshape(%355, newshape=[12, 13, 16]) /* ty=Tensor[(12, 13, 16), int8] */;
    %358 = @func_438(%356, %357) /* ty=(Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
    %359 = cast(%var_482, dtype="float32") /* ty=Tensor[(1521), float32] */;
    %360 = reshape(%359, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), float32] */;
    %361 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %362 = atan(%353) /* ty=Tensor[(1, 9, 13), float32] */;
    %363 = %358.0;
    %364 = @func_360(%360) /* ty=Tensor[(13, 9, 13), bool] */;
    %365 = %361.1;
    (%362, %363, meta[relay.Constant][24] /* ty=int8 */, meta[relay.Constant][25] /* ty=Tensor[(2496), int8] */, %364, %var_482, %365)
  };
  %366(%var_487) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 13, 16), int8], int8, Tensor[(2496), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_2151(%var_2150: Tensor[(13, 7, 12), float64]) -> Tensor[(13, 7, 12), float64] {
  %368 = fn (%var_2138: Tensor[(13, 7, 12), float64]) -> Tensor[(13, 7, 12), float64] {
    %367 = cast(%var_2138, dtype="float64") /* ty=Tensor[(13, 7, 12), float64] */;
    cos(%367) /* ty=Tensor[(13, 7, 12), float64] */
  };
  %368(%var_2150) /* ty=Tensor[(13, 7, 12), float64] */
}

def @func_5332(%var_5330: Tensor[(2496), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], int8, int8, Tensor[(2496), int8]) {
  @func_5329(%var_5330) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], int8, int8, Tensor[(2496), int8]) */
}

def @func_5133(%var_5130: Tensor[(10, 2, 4), int8], %var_5131: Tensor[(10, 2, 4), int8], %var_5132: Tensor[(1404), float32]) -> (Tensor[(?, 9, 13), float64], Tensor[(1404), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(10, 2, 4), int32]) {
  @func_5128(%var_5130, %var_5131, %var_5132) /* ty=(Tensor[(?, 9, 13), float64], Tensor[(1404), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(10, 2, 4), int32]) */
}

def @func_5010(%var_5009: Tensor[(7, 9, 13), float32]) -> Tensor[(7, 9, 13), bool] {
  %373 = fn (%var_4991: Tensor[(7, 9, 13), float32]) -> Tensor[(7, 9, 13), bool] {
    %369 = @func_2331() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %370 = %369.0;
    %371 = cast(%370, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
    %372 = cast(%var_4991, dtype="bool") /* ty=Tensor[(7, 9, 13), bool] */;
    less_equal(%371, %372) /* ty=Tensor[(7, 9, 13), bool] */
  };
  %373(%var_5009) /* ty=Tensor[(7, 9, 13), bool] */
}

def @func_219() -> Tensor[(1, 9, 13), float32] {
  @func_217() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_5381() -> (Tensor[(1, 9, 13), float32],) {
  %374 = @func_3582() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %375 = %374.0;
  (%375,)
}

def @func_2854(%var_2853: Tensor[(8, 4, 5), float32]) -> (Tensor[(8, 4, 5), float32], Tensor[(1, 9, 13), float32]) {
  %380 = fn (%var_2847: Tensor[(8, 4, 5), float32]) -> (Tensor[(8, 4, 5), float32], Tensor[(1, 9, 13), float32]) {
    %376 = cast(%var_2847, dtype="float32") /* ty=Tensor[(8, 4, 5), float32] */;
    %377 = @func_2331() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %378 = log2(%376) /* ty=Tensor[(8, 4, 5), float32] */;
    %379 = %377.0;
    (%378, %379)
  };
  %380(%var_2853) /* ty=(Tensor[(8, 4, 5), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_4443() -> Tensor[(1, 9, 13), float32] {
  @func_4441() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_4188() -> Tensor[(1, 9, 13), float32] {
  %381 = @func_1440() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %381.0
}

def @func_3762(%var_3760: Tensor[(1521), float32], %var_3761: Tensor[(1404), uint32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1521), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(11, 9, 13), float32], Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) {
  %400 = fn (%var_3693: Tensor[(1521), float32], %var_3714: Tensor[(1404), uint32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1521), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(11, 9, 13), float32], Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) {
    %382 = @func_3635() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %383 = cast(%var_3714, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
    %384 = reshape(%383, newshape=[1404]) /* ty=Tensor[(1404), uint32] */;
    %385 = @func_1781(%384) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int32], Tensor[(1404), uint32], Tensor[(507, 3), float32], Tensor[(2496), int8]) */;
    %386 = cast(%var_3693, dtype="float32") /* ty=Tensor[(1521), float32] */;
    %387 = reshape(%386, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
    %388 = @func_1036(%387) /* ty=(Tensor[(1521), float32], Tensor[(1521), uint32], Tensor[(11, 9, 13), float64]) */;
    %389 = %388.2;
    %390 = cast(%389, dtype="float32") /* ty=Tensor[(11, 9, 13), float32] */;
    %391 = cast(%var_3693, dtype="float32") /* ty=Tensor[(1521), float32] */;
    %392 = reshape(%391, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
    %393 = @func_486(%392) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 13, 16), int8], int8, Tensor[(2496), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
    %394 = @func_2505() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %395 = %382.1;
    %396 = %385.0;
    %397 = tan(%390) /* ty=Tensor[(11, 9, 13), float32] */;
    %398 = %393.3;
    %399 = %394.0;
    (%395, %var_3693, %396, %var_3714, %397, %398, %399)
  };
  %400(%var_3760, %var_3761) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1521), float32], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(11, 9, 13), float32], Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */
}

def @func_500() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %404 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
    %401 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %402 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
    %403 = %401.1;
    (%402, %403)
  };
  %404() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_2302() -> (Tensor[(1, 9, 13), float32],) {
  @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_4382() -> Tensor[(1, 9, 13), float32] {
  @func_2717() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_2450(%var_2448: Tensor[(702), float32], %var_2449: Tensor[(2496), int8]) -> (Tensor[(15, 1, 1), float64], Tensor[(2496), int8], Tensor[(2496), int8], Tensor[(15, 1, 702), bool]) {
  %420 = fn (%var_2432: Tensor[(702), float32], %var_2433: Tensor[(2496), int8]) -> (Tensor[(15, 1, 1), float64], Tensor[(2496), int8], Tensor[(2496), int8], Tensor[(15, 1, 702), bool]) {
    %405 = cast(-9.62045f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %406 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 1, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 1), float64] */;
    %407 = cast(%var_2432, dtype="float32") /* ty=Tensor[(702), float32] */;
    %408 = cast(%var_2433, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %409 = reshape(%407, newshape=[702]) /* ty=Tensor[(702), float32] */;
    %410 = reshape(%408, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
    %411 = @func_2400(%409, %410) /* ty=(Tensor[(15, 9, 13), int8], Tensor[(1521), float32], Tensor[(702), float32], Tensor[(2496), int8]) */;
    %412 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 1, 1), float64] */, dtype="int8") /* ty=Tensor[(15, 1, 1), int8] */;
    %413 = cast(-9.62045f64 /* ty=float64 */, dtype="int8") /* ty=int8 */;
    %414 = left_shift(%412, %413) /* ty=Tensor[(15, 1, 1), int8] */;
    %415 = cast(%var_2432, dtype="bool") /* ty=Tensor[(702), bool] */;
    %416 = cast(%414, dtype="bool") /* ty=Tensor[(15, 1, 1), bool] */;
    %417 = floor_divide(%405, %406) /* ty=Tensor[(15, 1, 1), float64] */;
    %418 = %411.3;
    %419 = greater_equal(%415, %416) /* ty=Tensor[(15, 1, 702), bool] */;
    (%417, %418, %var_2433, %419)
  };
  %420(%var_2448, %var_2449) /* ty=(Tensor[(15, 1, 1), float64], Tensor[(2496), int8], Tensor[(2496), int8], Tensor[(15, 1, 702), bool]) */
}

def @func_4766() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), uint64], Tensor[(1404), float32]) {
  %421 = @func_4198() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %422 = cast(meta[relay.Constant][27] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %423 = reshape(%422, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
  %424 = %421.0;
  %425 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %426 = @func_2660() /* ty=Tensor[(1, 9, 13), float32] */;
  %427 = @func_1535(%423) /* ty=Tensor[(12, 9, 13), uint64] */;
  (%424, %425, %426, %427, meta[relay.Constant][27] /* ty=Tensor[(1404), float32] */)
}

def @func_2568(%var_2534: Tensor[(1, 1404), uint32], %var_2548: Tensor[(11, 1404), bool]) -> (Tensor[(1, 9, 13), float32], Tensor[(11, 1404), bool]) {
  %428 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %429 = cast(%var_2534, dtype="uint32") /* ty=Tensor[(1, 1404), uint32] */;
  %430 = reshape(%429, newshape=[1404]) /* ty=Tensor[(1404), uint32] */;
  %431 = @func_1781(%430) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int32], Tensor[(1404), uint32], Tensor[(507, 3), float32], Tensor[(2496), int8]) */;
  %432 = %431.1;
  %433 = cast(%432, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %434 = shape_of(%var_2534, dtype="int32") /* ty=Tensor[(2), int32] */;
  %435 = cast(%var_2534, dtype="bool") /* ty=Tensor[(1, 1404), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %437 = less_equal(%435, %436) /* ty=Tensor[(?, 1404), bool] */;
  %438 = cast(%437, dtype="bool") /* ty=Tensor[(?, 1404), bool] */;
  %439 = cast(%var_2548, dtype="bool") /* ty=Tensor[(11, 1404), bool] */;
  %440 = %428.1;
  %441 = less_equal(%438, %439) /* ty=Tensor[(11, 1404), bool] */;
  (%440, %441)
}

def @func_5208() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %448 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
    %442 = @func_2300() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %443 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %444 = @func_4291() /* ty=Tensor[(1, 9, 13), float32] */;
    %445 = %442.0;
    %446 = %443.0;
    %447 = @func_3004() /* ty=Tensor[(1, 9, 13), float32] */;
    (%444, %445, %446, %447)
  };
  %448() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_2506() -> (Tensor[(1, 9, 13), float32],) {
  %451 = fn () -> (Tensor[(1, 9, 13), float32],) {
    %449 = @func_2331() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %450 = %449.0;
    (%450,)
  };
  %451() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_4292() -> Tensor[(1, 9, 13), float32] {
  %452 = fn () -> Tensor[(1, 9, 13), float32] {
    @func_1590() /* ty=Tensor[(1, 9, 13), float32] */
  };
  %452() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_2611() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %456 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
    %453 = @func_2590() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %454 = %453.0;
    %455 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
    (%454, %455)
  };
  %456() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_3322(%var_3301: Tensor[(702, 1), float32], %var_3302: Tensor[(2496), int8], %var_3312: Tensor[(1521), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(702, 1), float32], Tensor[(2496), int8], Tensor[(1521), float32]) {
  %457 = @func_1440() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %458 = cast(%var_3301, dtype="float32") /* ty=Tensor[(702, 1), float32] */;
  %459 = cast(%var_3302, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %460 = reshape(%458, newshape=[702]) /* ty=Tensor[(702), float32] */;
  %461 = reshape(%459, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %462 = @func_2400(%460, %461) /* ty=(Tensor[(15, 9, 13), int8], Tensor[(1521), float32], Tensor[(702), float32], Tensor[(2496), int8]) */;
  %463 = %462.1;
  %464 = cast(%var_3312, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(1), int32] */;
  %466 = cast(%463, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?), float32] */;
  %468 = %457.1;
  %469 = power(%466, %467) /* ty=Tensor[(1521), float32] */;
  (%468, %var_3301, %var_3302, %469)
}

def @func_5531(%var_5500: Tensor[(4, 9, 13), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(4, 9, 13), uint16]) {
  %470 = @func_4778() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %471 = %470.0;
  %472 = cast(%471, dtype="uint16") /* ty=Tensor[(1, 9, 13), uint16] */;
  %473 = cast(%var_5500, dtype="uint16") /* ty=Tensor[(4, 9, 13), uint16] */;
  %474 = add(%472, %473) /* ty=Tensor[(4, 9, 13), uint16] */;
  %475 = cast(%var_5500, dtype="bool") /* ty=Tensor[(4, 9, 13), bool] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="bool") /* ty=Tensor[(4, 9, 13), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = greater(%477, %478) /* ty=Tensor[(4, 9, 13), bool] */;
  %480 = cast(%471, dtype="uint16") /* ty=Tensor[(1, 9, 13), uint16] */;
  %481 = cast(%479, dtype="uint16") /* ty=Tensor[(4, 9, 13), uint16] */;
  %482 = @func_4188() /* ty=Tensor[(1, 9, 13), float32] */;
  %483 = minimum(%480, %481) /* ty=Tensor[(4, 9, 13), uint16] */;
  (%482, %483)
}

def @func_5243(%var_5220: Tensor[(11, 9, 13), float32]) -> Tensor[(11, 9, 13), int8] {
  %484 = @func_4778() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="int8") /* ty=Tensor[(1, 9, 13), int8] */;
  %487 = cast(%var_5220, dtype="int8") /* ty=Tensor[(11, 9, 13), int8] */;
  right_shift(%486, %487) /* ty=Tensor[(11, 9, 13), int8] */
}

def @func_977(%var_975: Tensor[(15, 9, 13), float32]) -> (Tensor[(?, 9, 13), int8], Tensor[(15, 9, 13), float32], Tensor[(6, 16, 3), int8], Tensor[(288), int8], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  @func_974(%var_975) /* ty=(Tensor[(?, 9, 13), int8], Tensor[(15, 9, 13), float32], Tensor[(6, 16, 3), int8], Tensor[(288), int8], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_1039(%var_1037: Tensor[(1521), float32]) -> (Tensor[(1521), float32], Tensor[(1521), uint32], Tensor[(11, 9, 13), float64]) {
  @func_1036(%var_1037) /* ty=(Tensor[(1521), float32], Tensor[(1521), uint32], Tensor[(11, 9, 13), float64]) */
}

def @func_262() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %488 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %490 = acosh(%489) /* ty=Tensor[(1, 9, 13), float32] */;
  %491 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  (%490, %491)
}

def @func_1661(%var_1652: Tensor[(2496), float64]) -> (Tensor[(1, 9, 13), float32], Tensor[(2496), int64], Tensor[(2496), int8]) {
  %492 = @func_895() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) */;
  %493 = %492.3;
  %494 = cast(%var_1652, dtype="int64") /* ty=Tensor[(2496), int64] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(1), int32] */;
  %496 = cast(%493, dtype="int64") /* ty=Tensor[(2496), int64] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?), int64] */;
  %498 = maximum(%496, %497) /* ty=Tensor[(2496), int64] */;
  %499 = cast(%498, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %500 = reshape(%499, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %501 = @func_1612(%500) /* ty=(Tensor[(1, 9, 13), float32], int8, Tensor[(9, 156), float32], Tensor[(2496), int8]) */;
  %502 = @func_1590() /* ty=Tensor[(1, 9, 13), float32] */;
  %503 = %501.3;
  (%502, %498, %503)
}

def @func_2774(%var_2767: Tensor[(2496), float64]) -> (Tensor[(1, 9, 13), float32], Tensor[(16, 12, 13), float64], Tensor[(2496), float64]) {
  %504 = cast(%var_2767, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %505 = reshape(%504, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float64] */;
  %506 = @func_1952(%505) /* ty=(Tensor[(16, 12, 13), float64], Tensor[(6, 16, 3), int8], Tensor[(288), int8]) */;
  %507 = @func_2205() /* ty=Tensor[(1, 9, 13), float32] */;
  %508 = %506.0;
  (%507, %508, %var_2767)
}

def @func_3583() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %512 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
    %509 = @func_2331() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %510 = %509.0;
    %511 = @func_2717() /* ty=Tensor[(1, 9, 13), float32] */;
    (%510, %511)
  };
  %512() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_4779() -> (Tensor[(1, 9, 13), float32],) {
  %515 = fn () -> (Tensor[(1, 9, 13), float32],) {
    %513 = @func_1440() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %514 = %513.0;
    (%514,)
  };
  %515() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_4900(%var_4898: Tensor[(11, 10, 11), int32]) -> Tensor[(11, 10, 11), int32] {
  @func_4897(%var_4898) /* ty=Tensor[(11, 10, 11), int32] */
}

def @func_362(%var_361: Tensor[(13, 9, 13), float32]) -> Tensor[(13, 9, 13), bool] {
  %519 = fn (%var_351: Tensor[(13, 9, 13), float32]) -> Tensor[(13, 9, 13), bool] {
    %516 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
    %517 = cast(%516, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
    %518 = cast(%var_351, dtype="bool") /* ty=Tensor[(13, 9, 13), bool] */;
    not_equal(%517, %518) /* ty=Tensor[(13, 9, 13), bool] */
  };
  %519(%var_361) /* ty=Tensor[(13, 9, 13), bool] */
}

def @func_6122(%var_6120: Tensor[(6, 9, 13), float32]) -> (Tensor[(1, 9, 13), float64], Tensor[(6, 9, 13), bool]) {
  @func_6119(%var_6120) /* ty=(Tensor[(1, 9, 13), float64], Tensor[(6, 9, 13), bool]) */
}

def @func_1367(%var_1365: Tensor[(6, 9, 13), float32], %var_1366: Tensor[(52, 48), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(52, 48), int8], Tensor[(6, 9, 13), float64]) {
  @func_1363(%var_1365, %var_1366) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(52, 48), int8], Tensor[(6, 9, 13), float64]) */
}

def @func_3900() -> (Tensor[(8, 15, 8), bool], Tensor[(8, 15, 8), float64]) {
  @func_3898() /* ty=(Tensor[(8, 15, 8), bool], Tensor[(8, 15, 8), float64]) */
}

def @func_4270(%var_4239: Tensor[(12, 9, 13), float32], %var_4263: float64) -> (Tensor[(12, 9, 13), float64], Tensor[(12, 9, 13), bool], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float32], Tensor[(11, 13, 8), float64], float64, Tensor[(1144), float64]) {
  %520 = @func_3134() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %521 = %520.0;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %523 = cast(%var_4239, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %524 = cast(%var_4239, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
  %525 = sinh(%524) /* ty=Tensor[(12, 9, 13), float32] */;
  %526 = cast(%var_4239, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%525, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %530 = cast(%var_4239, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
  %531 = cast(%var_4263, dtype="float64") /* ty=float64 */;
  %532 = cast(meta[relay.Constant][28] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %533 = reshape(%531, newshape=[]) /* ty=float64 */;
  %534 = reshape(%532, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), float64] */;
  %535 = power(%522, %523) /* ty=Tensor[(12, 9, 13), float64] */;
  %536 = logical_or(%528, %529) /* ty=Tensor[(12, 9, 13), bool] */;
  %537 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %538 = log(%530) /* ty=Tensor[(12, 9, 13), float32] */;
  %539 = @func_2977(%533, %534) /* ty=Tensor[(11, 13, 8), float64] */;
  (%535, %536, %537, %538, %539, %var_4263, meta[relay.Constant][28] /* ty=Tensor[(1144), float64] */)
}

def @func_5369() -> (Tensor[(1, 9, 13), float32],) {
  %540 = @func_4766() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), uint64], Tensor[(1404), float32]) */;
  %541 = %540.2;
  (%541,)
}

def @func_5246(%var_5244: Tensor[(11, 9, 13), float32]) -> Tensor[(11, 9, 13), int8] {
  @func_5243(%var_5244) /* ty=Tensor[(11, 9, 13), int8] */
}

def @func_2718() -> Tensor[(1, 9, 13), float32] {
  %543 = fn () -> Tensor[(1, 9, 13), float32] {
    %542 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %542.1
  };
  %543() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_3258(%var_3242: Tensor[(6, 9, 13), float32]) -> Tensor[(6, 9, 13), float32] {
  %544 = @func_1106() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %545 = %544.0;
  %546 = cast(%545, dtype="int32") /* ty=Tensor[(1, 9, 13), int32] */;
  %547 = cast(%var_3242, dtype="int32") /* ty=Tensor[(6, 9, 13), int32] */;
  %548 = bitwise_or(%546, %547) /* ty=Tensor[(6, 9, 13), int32] */;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(6, 9, 13), float32] */;
  erf(%549) /* ty=Tensor[(6, 9, 13), float32] */
}

def @func_5561() -> Tensor[(1, 9, 13), float32] {
  %550 = @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %550.0
}

def @func_6243(%var_6199: Tensor[(336), int64], %var_6222: Tensor[(2496), int8]) -> (Tensor[(14, 12, 2), int64], Tensor[(336), int64], Tensor[(?, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1, 1521), float32], Tensor[(2496), int8], Tensor[(2496), int8], Tensor[(702), float32], Tensor[(1404), uint32]) {
  %551 = cast(%var_6199, dtype="int64") /* ty=Tensor[(336), int64] */;
  %552 = cast(%var_6199, dtype="int64") /* ty=Tensor[(336), int64] */;
  %553 = reshape(%551, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), int64] */;
  %554 = reshape(%552, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), int64] */;
  %555 = @func_4850(%553, %554) /* ty=(Tensor[(14, 12, 2), int64],) */;
  %556 = @func_1565() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %557 = %556.0;
  %558 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %559 = %558.1;
  %560 = cast(%559, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %561 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%557, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %564 = cast(meta[relay.Constant][29] /* ty=Tensor[(1404), uint32] */, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
  %565 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1521), float32] */, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %566 = cast(%var_6222, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %567 = reshape(%564, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), uint32] */;
  %568 = reshape(%565, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float32] */;
  %569 = reshape(%566, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %570 = @func_1277(%567, %568, %569) /* ty=(Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) */;
  %571 = cast(meta[relay.Constant][31] /* ty=Tensor[(702), float32] */, dtype="float32") /* ty=Tensor[(702), float32] */;
  %572 = cast(%var_6222, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %573 = reshape(%571, newshape=[702]) /* ty=Tensor[(702), float32] */;
  %574 = reshape(%572, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %575 = @func_2447(%573, %574) /* ty=(Tensor[(15, 1, 1), float64], Tensor[(2496), int8], Tensor[(2496), int8], Tensor[(15, 1, 702), bool]) */;
  %576 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1521), float32] */, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %577 = reshape(%576, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), float32] */;
  %578 = @func_4168(%577) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), int16], Tensor[(2496), int8], Tensor[(1404), uint32], Tensor[(2496), int8]) */;
  %579 = %555.0;
  %580 = divide(%562, %563) /* ty=Tensor[(?, 9, 13), float64] */;
  %581 = %570.3;
  %582 = %575.1;
  %583 = %578.3;
  (%579, %var_6199, %580, %581, meta[relay.Constant][29] /* ty=Tensor[(1404), uint32] */, meta[relay.Constant][30] /* ty=Tensor[(1, 1521), float32] */, %var_6222, %582, meta[relay.Constant][31] /* ty=Tensor[(702), float32] */, %583)
}

def @func_552(%var_549: int8, %var_550: Tensor[(624, 4), int8], %var_551: Tensor[(624, 4), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), bool], int8, Tensor[(624, 4), bool], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  @func_547(%var_549, %var_550, %var_551) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), bool], int8, Tensor[(624, 4), bool], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_547(%var_511: int8, %var_512: Tensor[(624, 4), int8], %var_521: Tensor[(624, 4), int8]) -> (Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), bool], int8, Tensor[(624, 4), bool], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %584 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %585 = cast(%var_511, dtype="int8") /* ty=int8 */;
  %586 = cast(%var_512, dtype="int8") /* ty=Tensor[(624, 4), int8] */;
  %587 = reshape(%585, newshape=[]) /* ty=int8 */;
  %588 = reshape(%586, newshape=[12, 13, 16]) /* ty=Tensor[(12, 13, 16), int8] */;
  %589 = @func_438(%587, %588) /* ty=(Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %590 = cast(%var_521, dtype="bool") /* ty=Tensor[(624, 4), bool] */;
  %591 = shape_of(%var_512, dtype="int32") /* ty=Tensor[(2), int32] */;
  %592 = cast(%var_512, dtype="bool") /* ty=Tensor[(624, 4), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %594 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %595 = cast(%594, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %596 = sigmoid(%595) /* ty=Tensor[(1, 9, 13), float64] */;
  %597 = cast(%596, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %598 = %584.0;
  %599 = %589.1;
  %600 = not_equal(%592, %593) /* ty=Tensor[(624, 4), bool] */;
  %601 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  %602 = asin(%597) /* ty=Tensor[(1, 9, 13), float32] */;
  (%598, %599, %var_511, %600, %601, %602)
}

def @func_3636() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %607 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
    %603 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %604 = %603.0;
    %605 = @func_2717() /* ty=Tensor[(1, 9, 13), float32] */;
    %606 = @func_742() /* ty=Tensor[(1, 9, 13), float32] */;
    (%604, %605, %606)
  };
  %607() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_1337() -> (Tensor[(1, 9, 13), float32], Tensor[(1521), float32], int8, Tensor[(2496), int8]) {
  %608 = cast(meta[relay.Constant][32] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %609 = cast(meta[relay.Constant][33] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
  %610 = reshape(%608, newshape=[]) /* ty=int8 */;
  %611 = reshape(%609, newshape=[12, 13, 16]) /* ty=Tensor[(12, 13, 16), int8] */;
  %612 = @func_438(%610, %611) /* ty=(Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %613 = @func_710() /* ty=Tensor[(1, 9, 13), float32] */;
  %614 = %612.2;
  (%613, %614, meta[relay.Constant][32] /* ty=int8 */, meta[relay.Constant][33] /* ty=Tensor[(2496), int8] */)
}

def @func_2695(%var_2674: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), bool], Tensor[(1521), float32], Tensor[(1521), float64]) {
  %615 = @func_2590() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %616 = %615.0;
  %617 = cast(%616, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %618 = cast(%var_2674, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %619 = cast(meta[relay.Constant][34] /* ty=Tensor[(1521), float32] */, dtype="float32") /* ty=Tensor[(1521), float32] */;
  %620 = reshape(%619, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
  %621 = @func_1036(%620) /* ty=(Tensor[(1521), float32], Tensor[(1521), uint32], Tensor[(11, 9, 13), float64]) */;
  %622 = cast(meta[relay.Constant][34] /* ty=Tensor[(1521), float32] */, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %623 = greater(%617, %618) /* ty=Tensor[(16, 9, 13), bool] */;
  %624 = %621.0;
  %625 = log10(%622) /* ty=Tensor[(1521), float64] */;
  (%623, %624, %625)
}

def @func_5354() -> Tensor[(1, 9, 13), float32] {
  @func_5352() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_441(%var_439: int8, %var_440: Tensor[(12, 13, 16), int8]) -> (Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) {
  %634 = fn (%var_402: int8, %var_403: Tensor[(12, 13, 16), int8]) -> (Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) {
    %626 = cast(%var_402, dtype="int8") /* ty=int8 */;
    %627 = cast(%var_403, dtype="int8") /* ty=Tensor[(12, 13, 16), int8] */;
    %628 = cast(meta[relay.Constant][35] /* ty=Tensor[(1521), float32] */, dtype="float32") /* ty=Tensor[(1521), float32] */;
    %629 = reshape(%628, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), float32] */;
    %630 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %631 = bitwise_or(%626, %627) /* ty=Tensor[(12, 13, 16), int8] */;
    %632 = @func_360(%629) /* ty=Tensor[(13, 9, 13), bool] */;
    %633 = %630.1;
    (%631, %632, meta[relay.Constant][35] /* ty=Tensor[(1521), float32] */, %633)
  };
  %634(%var_439, %var_440) /* ty=(Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_3347() -> Tensor[(1, 9, 13), float32] {
  %636 = fn () -> Tensor[(1, 9, 13), float32] {
    %635 = @func_2590() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %635.0
  };
  %636() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_4075(%var_4067: Tensor[(1404), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1404), float32], Tensor[(156, 16), int8], Tensor[(?, 9, 13), float64]) {
  %637 = cast(%var_4067, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %638 = cast(meta[relay.Constant][36] /* ty=Tensor[(156, 16), int8] */, dtype="int8") /* ty=Tensor[(156, 16), int8] */;
  %639 = reshape(%637, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
  %640 = reshape(%638, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
  %641 = @func_660(%639, %640) /* ty=(Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */;
  %642 = @func_1740() /* ty=(Tensor[(?, 9, 13), uint8], Tensor[(1, 9, 13), float64], Tensor[(1, 9, 13), float32]) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(?, 9, 13), float64] */;
  %645 = %641.5;
  %646 = rsqrt(%644) /* ty=Tensor[(?, 9, 13), float64] */;
  (%645, %var_4067, meta[relay.Constant][36] /* ty=Tensor[(156, 16), int8] */, %646)
}

def @func_217() -> Tensor[(1, 9, 13), float32] {
  %647 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  sinh(%647) /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_4854(%var_4852: Tensor[(14, 12, 2), int64], %var_4853: Tensor[(14, 12, 2), int64]) -> (Tensor[(14, 12, 2), int64],) {
  @func_4850(%var_4852, %var_4853) /* ty=(Tensor[(14, 12, 2), int64],) */
}

def @func_6090() -> Tensor[(1, 9, 13), float32] {
  @func_6088() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_1106() -> (Tensor[(1, 9, 13), float32],) {
  %648 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %649 = %648.1;
  (%649,)
}

def @func_1614(%var_1613: Tensor[(2496), int8]) -> (Tensor[(1, 9, 13), float32], int8, Tensor[(9, 156), float32], Tensor[(2496), int8]) {
  %658 = fn (%var_1604: Tensor[(2496), int8]) -> (Tensor[(1, 9, 13), float32], int8, Tensor[(9, 156), float32], Tensor[(2496), int8]) {
    %650 = @func_793() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %651 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 156), float32] */, dtype="float32") /* ty=Tensor[(9, 156), float32] */;
    %652 = cast(%var_1604, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %653 = reshape(%651, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
    %654 = reshape(%652, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
    %655 = @func_660(%653, %654) /* ty=(Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */;
    %656 = %650.1;
    %657 = %655.3;
    (%656, %657, meta[relay.Constant][38] /* ty=Tensor[(9, 156), float32] */, %var_1604)
  };
  %658(%var_1613) /* ty=(Tensor[(1, 9, 13), float32], int8, Tensor[(9, 156), float32], Tensor[(2496), int8]) */
}

def @func_663(%var_661: Tensor[(12, 9, 13), float32], %var_662: Tensor[(2496), int8]) -> (Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) {
  %679 = fn (%var_603: Tensor[(12, 9, 13), float32], %var_647: Tensor[(2496), int8]) -> (Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) {
    %659 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
    %660 = cast(%659, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
    %661 = cast(%var_603, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
    %662 = cast(%var_603, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
    %663 = cast(meta[relay.Constant][39] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %664 = cast(%var_647, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %665 = cast(%var_647, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %666 = reshape(%663, newshape=[]) /* ty=int8 */;
    %667 = reshape(%664, newshape=[624, 4]) /* ty=Tensor[(624, 4), int8] */;
    %668 = reshape(%665, newshape=[624, 4]) /* ty=Tensor[(624, 4), int8] */;
    %669 = @func_547(%666, %667, %668) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(13, 9, 13), bool], int8, Tensor[(624, 4), bool], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %670 = cast(meta[relay.Constant][39] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %671 = cast(%var_647, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %672 = reshape(%670, newshape=[]) /* ty=int8 */;
    %673 = reshape(%671, newshape=[12, 13, 16]) /* ty=Tensor[(12, 13, 16), int8] */;
    %674 = @func_438(%672, %673) /* ty=(Tensor[(12, 13, 16), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
    %675 = floor_divide(%660, %661) /* ty=Tensor[(12, 9, 13), float32] */;
    %676 = cosh(%662) /* ty=Tensor[(12, 9, 13), float64] */;
    %677 = %669.2;
    %678 = %674.3;
    (%675, %676, %677, meta[relay.Constant][39] /* ty=int8 */, %var_647, %678)
  };
  %679(%var_661, %var_662) /* ty=(Tensor[(12, 9, 13), float32], Tensor[(12, 9, 13), float64], int8, int8, Tensor[(2496), int8], Tensor[(1, 9, 13), float32]) */
}

def @func_5748(%var_5745: Tensor[(15, 4, 6), uint16], %var_5746: Tensor[(15, 4, 6), uint16], %var_5747: Tensor[(702), float32]) -> (Tensor[(15, 4, 6), bool], Tensor[(2496), int8], Tensor[(702), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), float64]) {
  %695 = fn (%var_5708: Tensor[(15, 4, 6), uint16], %var_5709: Tensor[(15, 4, 6), uint16], %var_5716: Tensor[(702), float32]) -> (Tensor[(15, 4, 6), bool], Tensor[(2496), int8], Tensor[(702), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), float64]) {
    %680 = cast(%var_5709, dtype="bool") /* ty=Tensor[(15, 4, 6), bool] */;
    %681 = shape_of(%var_5708, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%var_5708, dtype="bool") /* ty=Tensor[(15, 4, 6), bool] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %684 = cast(%var_5716, dtype="float32") /* ty=Tensor[(702), float32] */;
    %685 = cast(meta[relay.Constant][40] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %686 = reshape(%684, newshape=[702]) /* ty=Tensor[(702), float32] */;
    %687 = reshape(%685, newshape=[2496]) /* ty=Tensor[(2496), int8] */;
    %688 = @func_2400(%686, %687) /* ty=(Tensor[(15, 9, 13), int8], Tensor[(1521), float32], Tensor[(702), float32], Tensor[(2496), int8]) */;
    %689 = @func_1850() /* ty=(Tensor[(1, 9, 13), float32],) */;
    %690 = cast(meta[relay.Constant][40] /* ty=Tensor[(2496), int8] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
    %691 = equal(%682, %683) /* ty=Tensor[(15, 4, 6), bool] */;
    %692 = %688.3;
    %693 = %689.0;
    %694 = asin(%690) /* ty=Tensor[(2496), float64] */;
    (%691, %692, %var_5716, %693, %694)
  };
  %695(%var_5745, %var_5746, %var_5747) /* ty=(Tensor[(15, 4, 6), bool], Tensor[(2496), int8], Tensor[(702), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), float64]) */
}

def @func_4768() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), uint64], Tensor[(1404), float32]) {
  @func_4766() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), uint64], Tensor[(1404), float32]) */
}

def @func_1664(%var_1662: Tensor[(2496), float64]) -> (Tensor[(1, 9, 13), float32], Tensor[(2496), int64], Tensor[(2496), int8]) {
  @func_1661(%var_1662) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(2496), int64], Tensor[(2496), int8]) */
}

def @func_5669() -> (Tensor[(1, 9, 13), float32], Tensor[(16, 12, 13), float64], Tensor[(2496), float64], Tensor[(1, 9, 13), float32]) {
  %704 = fn () -> (Tensor[(1, 9, 13), float32], Tensor[(16, 12, 13), float64], Tensor[(2496), float64], Tensor[(1, 9, 13), float32]) {
    %696 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %697 = cast(meta[relay.Constant][41] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
    %698 = reshape(%697, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float64] */;
    %699 = @func_1952(%698) /* ty=(Tensor[(16, 12, 13), float64], Tensor[(6, 16, 3), int8], Tensor[(288), int8]) */;
    %700 = @func_2610() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %701 = %696.1;
    %702 = %699.0;
    %703 = %700.0;
    (%701, %702, meta[relay.Constant][41] /* ty=Tensor[(2496), float64] */, %703)
  };
  %704() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(16, 12, 13), float64], Tensor[(2496), float64], Tensor[(1, 9, 13), float32]) */
}

def @func_3873(%var_3871: Tensor[(12, 15, 7), float32], %var_3872: Tensor[(1404), uint32]) -> (Tensor[(12, 15, 7), float32], Tensor[(288), int8], Tensor[(2496), float64], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(15444), bool], Tensor[(1, 9, 13), float32], Tensor[(7, 6, 2), uint32], Tensor[(84), uint32], Tensor[(1521), float32], Tensor[(12, 156), float32]) {
  %729 = fn (%var_3831: Tensor[(12, 15, 7), float32], %var_3844: Tensor[(1404), uint32]) -> (Tensor[(12, 15, 7), float32], Tensor[(288), int8], Tensor[(2496), float64], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(15444), bool], Tensor[(1, 9, 13), float32], Tensor[(7, 6, 2), uint32], Tensor[(84), uint32], Tensor[(1521), float32], Tensor[(12, 156), float32]) {
    %705 = cast(%var_3831, dtype="float32") /* ty=Tensor[(12, 15, 7), float32] */;
    %706 = cast(meta[relay.Constant][42] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
    %707 = reshape(%706, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float64] */;
    %708 = @func_1952(%707) /* ty=(Tensor[(16, 12, 13), float64], Tensor[(6, 16, 3), int8], Tensor[(288), int8]) */;
    %709 = cast(%var_3844, dtype="uint32") /* ty=Tensor[(1404), uint32] */;
    %710 = cast(meta[relay.Constant][43] /* ty=Tensor[(15444), bool] */, dtype="bool") /* ty=Tensor[(15444), bool] */;
    %711 = reshape(%709, newshape=[1, 1404]) /* ty=Tensor[(1, 1404), uint32] */;
    %712 = reshape(%710, newshape=[11, 1404]) /* ty=Tensor[(11, 1404), bool] */;
    %713 = @func_2568(%711, %712) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(11, 1404), bool]) */;
    %714 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %715 = cast(meta[relay.Constant][44] /* ty=Tensor[(84), uint32] */, dtype="uint32") /* ty=Tensor[(84), uint32] */;
    %716 = cast(meta[relay.Constant][44] /* ty=Tensor[(84), uint32] */, dtype="uint32") /* ty=Tensor[(84), uint32] */;
    %717 = reshape(%715, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint32] */;
    %718 = reshape(%716, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint32] */;
    %719 = @func_3366(%717, %718) /* ty=(Tensor[(7, 6, 2), uint32],) */;
    %720 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 156), float32] */, dtype="float32") /* ty=Tensor[(12, 156), float32] */;
    %721 = reshape(%720, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), float32] */;
    %722 = @func_2695(%721) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(1521), float32], Tensor[(1521), float64]) */;
    %723 = rsqrt(%705) /* ty=Tensor[(12, 15, 7), float32] */;
    %724 = %708.2;
    %725 = %713.0;
    %726 = %714.0;
    %727 = %719.0;
    %728 = %722.1;
    (%723, %724, meta[relay.Constant][42] /* ty=Tensor[(2496), float64] */, %725, %var_3844, meta[relay.Constant][43] /* ty=Tensor[(15444), bool] */, %726, %727, meta[relay.Constant][44] /* ty=Tensor[(84), uint32] */, %728, meta[relay.Constant][45] /* ty=Tensor[(12, 156), float32] */)
  };
  %729(%var_3871, %var_3872) /* ty=(Tensor[(12, 15, 7), float32], Tensor[(288), int8], Tensor[(2496), float64], Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(15444), bool], Tensor[(1, 9, 13), float32], Tensor[(7, 6, 2), uint32], Tensor[(84), uint32], Tensor[(1521), float32], Tensor[(12, 156), float32]) */
}

def @func_4274(%var_4272: Tensor[(12, 9, 13), float32], %var_4273: float64) -> (Tensor[(12, 9, 13), float64], Tensor[(12, 9, 13), bool], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float32], Tensor[(11, 13, 8), float64], float64, Tensor[(1144), float64]) {
  @func_4270(%var_4272, %var_4273) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, 9, 13), bool], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float32], Tensor[(11, 13, 8), float64], float64, Tensor[(1144), float64]) */
}

def @func_1277(%var_1217: Tensor[(12, 9, 13), uint32], %var_1225: Tensor[(1, 1521), float32], %var_1238: Tensor[(2496), int8]) -> (Tensor[(?, 9, 13), bool], Tensor[(12, 9, 13), int32], Tensor[(1, 1521), float32], Tensor[(1, 9, 13), float32], Tensor[(2496), bool], Tensor[(11, 9, 13), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), int64]) {
  %730 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %731 = %730.0;
  %732 = @func_793() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %733 = %732.2;
  %734 = cast(%731, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%733, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %738 = mod(%736, %737) /* ty=Tensor[(?, 9, 13), float32] */;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(?, 9, 13), float32] */;
  %740 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%733, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %743 = floor_mod(%741, %742) /* ty=Tensor[(?, 9, 13), float32] */;
  %744 = cast(%743, dtype="bool") /* ty=Tensor[(?, 9, 13), bool] */;
  %745 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%731, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %748 = @func_895() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float64], Tensor[(18, 78), float32], Tensor[(2496), float64]) */;
  %749 = %748.0;
  %750 = cast(%749, dtype="uint32") /* ty=Tensor[(1, 9, 13), uint32] */;
  %751 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%738, dtype="uint32") /* ty=Tensor[(?, 9, 13), uint32] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %754 = right_shift(%752, %753) /* ty=Tensor[(?, 9, 13), uint32] */;
  %755 = cast(%754, dtype="int32") /* ty=Tensor[(?, 9, 13), int32] */;
  %756 = cast(%var_1217, dtype="int32") /* ty=Tensor[(12, 9, 13), int32] */;
  %757 = cast(%var_1225, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %758 = reshape(%757, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
  %759 = @func_486(%758) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(12, 13, 16), int8], int8, Tensor[(2496), int8], Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(1, 9, 13), float32]) */;
  %760 = %759.3;
  %761 = cast(%var_1238, dtype="bool") /* ty=Tensor[(2496), bool] */;
  %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(1), int32] */;
  %763 = cast(%760, dtype="bool") /* ty=Tensor[(2496), bool] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?), bool] */;
  %765 = cast(%var_1225, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %766 = reshape(%765, newshape=[1521]) /* ty=Tensor[(1521), float32] */;
  %767 = @func_1036(%766) /* ty=(Tensor[(1521), float32], Tensor[(1521), uint32], Tensor[(11, 9, 13), float64]) */;
  %768 = @func_499() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %769 = cast(%var_1217, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %770 = atanh(%769) /* ty=Tensor[(12, 9, 13), float64] */;
  %771 = cast(%770, dtype="int64") /* ty=Tensor[(12, 9, 13), int64] */;
  %772 = cast(%754, dtype="int64") /* ty=Tensor[(?, 9, 13), int64] */;
  %773 = not_equal(%746, %747) /* ty=Tensor[(?, 9, 13), bool] */;
  %774 = maximum(%755, %756) /* ty=Tensor[(12, 9, 13), int32] */;
  %775 = @func_742() /* ty=Tensor[(1, 9, 13), float32] */;
  %776 = less(%763, %764) /* ty=Tensor[(2496), bool] */;
  %777 = %767.2;
  %778 = %768.1;
  %779 = minimum(%771, %772) /* ty=Tensor[(12, 9, 13), int64] */;
  (%773, %774, %var_1225, %775, %776, %777, %778, %779)
}

def @func_1537(%var_1536: Tensor[(12, 9, 13), float32]) -> Tensor[(12, 9, 13), uint64] {
  %786 = fn (%var_1525: Tensor[(12, 9, 13), float32]) -> Tensor[(12, 9, 13), uint64] {
    %780 = @func_262() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %781 = %780.1;
    %782 = cast(%781, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
    %783 = exp(%782) /* ty=Tensor[(1, 9, 13), float32] */;
    %784 = cast(%783, dtype="uint64") /* ty=Tensor[(1, 9, 13), uint64] */;
    %785 = cast(%var_1525, dtype="uint64") /* ty=Tensor[(12, 9, 13), uint64] */;
    bitwise_and(%784, %785) /* ty=Tensor[(12, 9, 13), uint64] */
  };
  %786(%var_1536) /* ty=Tensor[(12, 9, 13), uint64] */
}

def @func_3135() -> (Tensor[(1, 9, 13), float32],) {
  %789 = fn () -> (Tensor[(1, 9, 13), float32],) {
    %787 = @func_1337() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1521), float32], int8, Tensor[(2496), int8]) */;
    %788 = %787.0;
    (%788,)
  };
  %789() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_2934(%var_2932: Tensor[(1521), float32], %var_2933: Tensor[(11, 9, 13), float64]) -> (Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(11, 9, 13), uint8]) {
  %799 = fn (%var_2919: Tensor[(1521), float32], %var_2925: Tensor[(11, 9, 13), float64]) -> (Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(11, 9, 13), uint8]) {
    %790 = cast(%var_2919, dtype="float32") /* ty=Tensor[(1521), float32] */;
    %791 = reshape(%790, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), float32] */;
    %792 = @func_2717() /* ty=Tensor[(1, 9, 13), float32] */;
    %793 = cast(%792, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
    %794 = log(%793) /* ty=Tensor[(1, 9, 13), float64] */;
    %795 = cast(%794, dtype="uint8") /* ty=Tensor[(1, 9, 13), uint8] */;
    %796 = cast(%var_2925, dtype="uint8") /* ty=Tensor[(11, 9, 13), uint8] */;
    %797 = @func_360(%791) /* ty=Tensor[(13, 9, 13), bool] */;
    %798 = left_shift(%795, %796) /* ty=Tensor[(11, 9, 13), uint8] */;
    (%797, %var_2919, %798)
  };
  %799(%var_2932, %var_2933) /* ty=(Tensor[(13, 9, 13), bool], Tensor[(1521), float32], Tensor[(11, 9, 13), uint8]) */
}

def @func_6088() -> Tensor[(1, 9, 13), float32] {
  %800 = @func_2590() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %800.0
}

def @func_4850(%var_4834: Tensor[(14, 12, 2), int64], %var_4835: Tensor[(14, 12, 2), int64]) -> (Tensor[(14, 12, 2), int64],) {
  %801 = cast(%var_4835, dtype="int64") /* ty=Tensor[(14, 12, 2), int64] */;
  %802 = shape_of(%var_4834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%var_4834, dtype="int64") /* ty=Tensor[(14, 12, 2), int64] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %805 = add(%803, %804) /* ty=Tensor[(14, 12, 2), int64] */;
  (%805,)
}

def @func_3006() -> Tensor[(1, 9, 13), float32] {
  @func_3004() /* ty=Tensor[(1, 9, 13), float32] */
}

def @func_1339() -> (Tensor[(1, 9, 13), float32], Tensor[(1521), float32], int8, Tensor[(2496), int8]) {
  @func_1337() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1521), float32], int8, Tensor[(2496), int8]) */
}

def @func_4824(%var_4823: Tensor[(585, 3), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1755), bool]) {
  %818 = fn (%var_4796: Tensor[(585, 3), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1755), bool]) {
    %806 = cast(%var_4796, dtype="float32") /* ty=Tensor[(585, 3), float32] */;
    %807 = reshape(%806, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
    %808 = @func_2240(%807) /* ty=(Tensor[(1755), float32], Tensor[(?, 9, 13), float32]) */;
    %809 = %808.0;
    %810 = cast(%809, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %811 = log(%810) /* ty=Tensor[(1755), float32] */;
    %812 = cast(%var_4796, dtype="bool") /* ty=Tensor[(585, 3), bool] */;
    %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(1), int32] */;
    %814 = cast(%811, dtype="bool") /* ty=Tensor[(1755), bool] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?), bool] */;
    %816 = @func_1290() /* ty=Tensor[(1, 9, 13), float32] */;
    %817 = not_equal(%814, %815) /* ty=Tensor[(1755), bool] */;
    (%816, %817)
  };
  %818(%var_4823) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1755), bool]) */
}

def @func_1442() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  @func_1440() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_5977(%var_5974: Tensor[(1404), float32], %var_5975: Tensor[(702), float32], %var_5976: Tensor[(1521), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1404), bool], int8, Tensor[(6, 16, 3), int8], Tensor[(72, 4), int8], Tensor[(1, 9, 13), float32], Tensor[(702), float32], Tensor[(2496), int8], Tensor[(1521), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %856 = fn (%var_5855: Tensor[(1404), float32], %var_5919: Tensor[(702), float32], %var_5938: Tensor[(1521), float32]) -> (Tensor[(1, 9, 13), float32], Tensor[(1404), bool], int8, Tensor[(6, 16, 3), int8], Tensor[(72, 4), int8], Tensor[(1, 9, 13), float32], Tensor[(702), float32], Tensor[(2496), int8], Tensor[(1521), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
    %819 = cast(%var_5855, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %820 = reshape(%819, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float32] */;
    %821 = @func_1535(%820) /* ty=Tensor[(12, 9, 13), uint64] */;
    %822 = cast(%821, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
    %823 = shape_of(%var_5855, dtype="int32") /* ty=Tensor[(1), int32] */;
    %824 = cast(%var_5855, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?), bool] */;
    %826 = @func_4532() /* ty=(Tensor[(1, 9, 13), float32], int8, Tensor[(1404), float32], Tensor[(2496), int8]) */;
    %827 = cast(meta[relay.Constant][46] /* ty=Tensor[(72, 4), int8] */, dtype="int8") /* ty=Tensor[(72, 4), int8] */;
    %828 = cast(meta[relay.Constant][46] /* ty=Tensor[(72, 4), int8] */, dtype="int8") /* ty=Tensor[(72, 4), int8] */;
    %829 = reshape(%827, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
    %830 = reshape(%828, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), int8] */;
    %831 = @func_816(%829, %830) /* ty=(Tensor[(6, 16, 3), int8],) */;
    %832 = @func_5283() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(11, 10, 11), int32], Tensor[(1210), float64]) */;
    %833 = cast(%var_5919, dtype="float32") /* ty=Tensor[(702), float32] */;
    %834 = cast(meta[relay.Constant][47] /* ty=Tensor[(2496), int8] */, dtype="int8") /* ty=Tensor[(2496), int8] */;
    %835 = reshape(%833, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float32] */;
    %836 = reshape(%834, newshape=[52, 48]) /* ty=Tensor[(52, 48), int8] */;
    %837 = @func_1363(%835, %836) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1404), uint32], Tensor[(1521), float32], Tensor[(52, 48), int8], Tensor[(6, 9, 13), float64]) */;
    %838 = %837.2;
    %839 = cast(%var_5938, dtype="float64") /* ty=Tensor[(1521), float64] */;
    %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(1), int32] */;
    %841 = cast(%838, dtype="float64") /* ty=Tensor[(1521), float64] */;
    %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?), float64] */;
    %843 = cast(%821, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
    %844 = acos(%843) /* ty=Tensor[(12, 9, 13), float64] */;
    %845 = cast(%844, dtype="float32") /* ty=Tensor[(12, 9, 13), float32] */;
    %846 = @func_5781() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
    %847 = @func_3004() /* ty=Tensor[(1, 9, 13), float32] */;
    %848 = less_equal(%824, %825) /* ty=Tensor[(1404), bool] */;
    %849 = %826.1;
    %850 = %831.0;
    %851 = %832.0;
    %852 = mod(%841, %842) /* ty=Tensor[(1521), float64] */;
    %853 = @func_3004() /* ty=Tensor[(1, 9, 13), float32] */;
    %854 = atan(%845) /* ty=Tensor[(12, 9, 13), float32] */;
    %855 = %846.0;
    (%847, %848, %849, %850, meta[relay.Constant][46] /* ty=Tensor[(72, 4), int8] */, %851, %var_5919, meta[relay.Constant][47] /* ty=Tensor[(2496), int8] */, %852, %853, %854, %855)
  };
  %856(%var_5974, %var_5975, %var_5976) /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1404), bool], int8, Tensor[(6, 16, 3), int8], Tensor[(72, 4), int8], Tensor[(1, 9, 13), float32], Tensor[(702), float32], Tensor[(2496), int8], Tensor[(1521), float64], Tensor[(1, 9, 13), float32], Tensor[(12, 9, 13), float32], Tensor[(1, 9, 13), float32]) */
}

def @func_1440() -> (Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) {
  %857 = @func_793() /* ty=(Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32], Tensor[(1, 9, 13), float32]) */;
  %858 = %857.1;
  %859 = @func_217() /* ty=Tensor[(1, 9, 13), float32] */;
  (%858, %859)
}

def @func_3369(%var_3367: Tensor[(7, 6, 2), uint32], %var_3368: Tensor[(7, 6, 2), uint32]) -> (Tensor[(7, 6, 2), uint32],) {
  %865 = fn (%var_3359: Tensor[(7, 6, 2), uint32], %var_3360: Tensor[(7, 6, 2), uint32]) -> (Tensor[(7, 6, 2), uint32],) {
    %860 = cast(%var_3360, dtype="uint32") /* ty=Tensor[(7, 6, 2), uint32] */;
    %861 = shape_of(%var_3359, dtype="int32") /* ty=Tensor[(3), int32] */;
    %862 = cast(%var_3359, dtype="uint32") /* ty=Tensor[(7, 6, 2), uint32] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %864 = bitwise_xor(%862, %863) /* ty=Tensor[(7, 6, 2), uint32] */;
    (%864,)
  };
  %865(%var_3367, %var_3368) /* ty=(Tensor[(7, 6, 2), uint32],) */
}

def @func_4200() -> (Tensor[(1, 9, 13), float32],) {
  @func_4198() /* ty=(Tensor[(1, 9, 13), float32],) */
}

def @func_5055(%var_5032: Tensor[(16, 7, 3), float64]) -> Tensor[(16, 7, 3), float64] {
  %866 = cast(%var_5032, dtype="float64") /* ty=Tensor[(16, 7, 3), float64] */;
  log2(%866) /* ty=Tensor[(16, 7, 3), float64] */
}

def @func_5283() -> (Tensor[(1, 9, 13), float32], Tensor[(11, 10, 11), int32], Tensor[(1210), float64]) {
  %867 = @func_3134() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %868 = cast(meta[relay.Constant][48] /* ty=Tensor[(1210), int32] */, dtype="int32") /* ty=Tensor[(1210), int32] */;
  %869 = reshape(%868, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), int32] */;
  %870 = cast(meta[relay.Constant][48] /* ty=Tensor[(1210), int32] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %871 = %867.0;
  %872 = @func_4897(%869) /* ty=Tensor[(11, 10, 11), int32] */;
  %873 = sin(%870) /* ty=Tensor[(1210), float64] */;
  (%871, %872, %873)
}

def @func_3283(%var_3278: Tensor[(15, 9, 13), float32]) -> (Tensor[(15, 9, 13), float32],) {
  %874 = @func_1106() /* ty=(Tensor[(1, 9, 13), float32],) */;
  %875 = %874.0;
  %876 = cast(%875, dtype="float32") /* ty=Tensor[(1, 9, 13), float32] */;
  %877 = cast(%var_3278, dtype="float32") /* ty=Tensor[(15, 9, 13), float32] */;
  %878 = floor_divide(%876, %877) /* ty=Tensor[(15, 9, 13), float32] */;
  (%878,)
}

def @func_2206() -> Tensor[(1, 9, 13), float32] {
  %879 = fn () -> Tensor[(1, 9, 13), float32] {
    @func_217() /* ty=Tensor[(1, 9, 13), float32] */
  };
  %879() /* ty=Tensor[(1, 9, 13), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen325/build/output.py:2433: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen325/build/output.py", line 2438, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(224) tvmgen_default_fused_cast_cast_reshape_greater_equal_kernel0(signed char* __restrict__ T_greater_equal, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_greater_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

