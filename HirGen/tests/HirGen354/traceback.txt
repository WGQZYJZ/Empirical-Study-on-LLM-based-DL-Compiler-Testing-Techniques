==========mod==========
#[version = "0.0.5"]
def @func_4483(%var_4479: float32, %var_4480: Tensor[(3, 420), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(15, 7, 12), float32], float32, Tensor[(3, 420), float32]) {
  %0 = cast(%var_4479, dtype="float32") /* ty=float32 */;
  %1 = cast(%var_4480, dtype="float32") /* ty=Tensor[(3, 420), float32] */;
  %2 = reshape(%0, newshape=[]) /* ty=float32 */;
  %3 = reshape(%1, newshape=[15, 7, 12]) /* ty=Tensor[(15, 7, 12), float32] */;
  %4 = @func_4390(%2, %3) /* ty=(Tensor[(15, 7, 12), float32],) */;
  %5 = @func_4051() /* ty=Tensor[(3, 4, 8), float64] */;
  %6 = %4.0;
  (%5, %6, %var_4479, %var_4480)
}

def @func_4536() -> (Tensor[(3, 4, 8), float64],) {
  %7 = @func_3765() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %8 = %7.0;
  (%8,)
}

def @func_6361(%var_6329: Tensor[(12, 14, 12), int8], %var_6330: Tensor[(12, 14, 12), int8]) -> (Tensor[(12, 14, 12), int8],) {
  %9 = cast(%var_6330, dtype="int8") /* ty=Tensor[(12, 14, 12), int8] */;
  %10 = shape_of(%var_6329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%var_6329, dtype="int8") /* ty=Tensor[(12, 14, 12), int8] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %13 = add(%11, %12) /* ty=Tensor[(12, 14, 12), int8] */;
  (%13,)
}

def @func_8115() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(6), float64]) {
  %14 = @func_7976() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %16 = reshape(%15, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %17 = @func_4252(%16) /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(192), float32]) */;
  %18 = %14.0;
  %19 = %17.0;
  (%18, %19, meta[relay.Constant][0] /* ty=Tensor[(6), float64] */)
}

def @func_3430(%var_3416: Tensor[(5, 15, 2), float32], %var_3417: Tensor[(5, 15, 2), float32]) -> Tensor[(5, 15, 2), float32] {
  %20 = cast(%var_3417, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %21 = shape_of(%var_3416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%var_3416, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %24 = minimum(%22, %23) /* ty=Tensor[(5, 15, 2), float32] */;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  log2(%25) /* ty=Tensor[(5, 15, 2), float32] */
}

def @func_1615() -> Tensor[(3, 4, 8), float64] {
  %26 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %26.1
}

def @func_8530() -> (Tensor[(3, 4, 8), bool], Tensor[(1456), uint32], Tensor[(16, 7, 13), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %27 = @func_5215() /* ty=(Tensor[(3, 4, 8), bool],) */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(1456), uint32] */, dtype="uint32") /* ty=Tensor[(1456), uint32] */;
  %29 = reshape(%28, newshape=[16, 7, 13]) /* ty=Tensor[(16, 7, 13), uint32] */;
  %30 = @func_4189(%29) /* ty=(Tensor[(16, 7, 13), int32],) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(16, 7, 13), float64] */;
  %33 = @func_4138() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 1), float64]) */;
  %34 = %27.0;
  %35 = log2(%32) /* ty=Tensor[(16, 7, 13), float64] */;
  %36 = %33.0;
  %37 = @func_1615() /* ty=Tensor[(3, 4, 8), float64] */;
  (%34, meta[relay.Constant][1] /* ty=Tensor[(1456), uint32] */, %35, %36, %37)
}

def @func_4156(%var_4146: Tensor[(13, 13, 1), int64], %var_4147: Tensor[(13, 13, 14), int64]) -> (Tensor[(13, 13, 14), bool],) {
  %38 = cast(%var_4146, dtype="bool") /* ty=Tensor[(13, 13, 1), bool] */;
  %39 = cast(%var_4147, dtype="bool") /* ty=Tensor[(13, 13, 14), bool] */;
  %40 = equal(%38, %39) /* ty=Tensor[(13, 13, 14), bool] */;
  (%40,)
}

def @func_6279() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) {
  %41 = @func_1531() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %42 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %43 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %44 = @func_3932() /* ty=Tensor[(3, 4, 8), float64] */;
  %45 = %41.0;
  %46 = %42.0;
  %47 = @func_4638() /* ty=Tensor[(3, 4, 8), float64] */;
  %48 = %43.0;
  (%44, %45, %46, %47, %48)
}

def @func_8661(%var_8587: Tensor[(1, 16, 13), float64], %var_8653: Tensor[(4, 48), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(?, 16, 13), float32], Tensor[(3, 4, 8), float64], Tensor[(4, 48), float32], Tensor[(1, 16, 13), float32]) {
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %50 = reshape(%49, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %51 = @func_3865(%50) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(6), float64]) */;
  %52 = cast(%var_8587, dtype="float64") /* ty=Tensor[(1, 16, 13), float64] */;
  %53 = atanh(%52) /* ty=Tensor[(1, 16, 13), float64] */;
  %54 = cast(%var_8587, dtype="float32") /* ty=Tensor[(1, 16, 13), float32] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="float32") /* ty=Tensor[(1, 16, 13), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %58 = cast(%var_8653, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
  %59 = reshape(%58, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
  %60 = @func_1865(%59) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(192, 11), uint8], Tensor[(12, 8, 2), float32], Tensor[(192, 11), float64]) */;
  %61 = cast(%53, dtype="float64") /* ty=Tensor[(1, 16, 13), float64] */;
  %62 = exp(%61) /* ty=Tensor[(1, 16, 13), float64] */;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(1, 16, 13), float32] */;
  %64 = %51.1;
  %65 = floor_mod(%56, %57) /* ty=Tensor[(?, 16, 13), float32] */;
  %66 = %60.0;
  %67 = asinh(%63) /* ty=Tensor[(1, 16, 13), float32] */;
  (%64, meta[relay.Constant][2] /* ty=Tensor[(6), float64] */, %65, %66, %var_8653, %67)
}

def @func_8893(%var_8841: Tensor[(16, 2, 13), int16], %var_8850: Tensor[(16, 2, 13), int16]) -> (Tensor[(16, 2, 13), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(120), float32]) {
  %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 2, 13), int16] */, dtype="int16") /* ty=Tensor[(16, 2, 13), int16] */;
  %69 = shape_of(%var_8841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_8841, dtype="int16") /* ty=Tensor[(16, 2, 13), int16] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %72 = bitwise_xor(%70, %71) /* ty=Tensor[(16, 2, 13), int16] */;
  %73 = cast(%var_8850, dtype="float32") /* ty=Tensor[(16, 2, 13), float32] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="float32") /* ty=Tensor[(16, 2, 13), float32] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %77 = @func_4736() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %78 = @func_2294() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %79 = @func_1674() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %81 = reshape(%80, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
  %82 = @func_4613(%81) /* ty=(Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) */;
  %83 = mod(%75, %76) /* ty=Tensor[(16, 2, 13), float32] */;
  %84 = %77.0;
  %85 = %78.0;
  %86 = %79.1;
  %87 = %82.2;
  (%83, %84, %85, %86, %87, meta[relay.Constant][4] /* ty=Tensor[(120), float32] */)
}

def @func_3008() -> Tensor[(3, 4, 8), float64] {
  %88 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %88.0
}

def @func_3546() -> Tensor[(3, 4, 8), float64] {
  %89 = @func_2294() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %89.0
}

def @func_828(%var_812: Tensor[(14, 6, 4), int16]) -> Tensor[(14, 6, 4), int16] {
  %90 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 6, 4), int16] */, dtype="int16") /* ty=Tensor[(14, 6, 4), int16] */;
  %91 = shape_of(%var_812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%var_812, dtype="int16") /* ty=Tensor[(14, 6, 4), int16] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%92, %93) /* ty=Tensor[(14, 6, 4), int16] */
}

def @func_3302() -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) {
  %94 = @func_2054() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %96 = reshape(%95, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
  %97 = @func_1865(%96) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(192, 11), uint8], Tensor[(12, 8, 2), float32], Tensor[(192, 11), float64]) */;
  %98 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %99 = %94.0;
  %100 = %97.5;
  %101 = %98.0;
  (%99, %100, meta[relay.Constant][6] /* ty=Tensor[(192), float32] */, %101)
}

def @func_6207() -> (Tensor[(3, 4, 8), float64], Tensor[(56), bool]) {
  %102 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %103 = @func_5820() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %104 = %102.1;
  %105 = %103.2;
  (%104, %105)
}

def @func_5864() -> (Tensor[(3, 4, 8), uint8],) {
  %106 = @func_5035() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %107 = %106.0;
  %108 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %109 = %108.0;
  %110 = cast(%109, dtype="uint8") /* ty=Tensor[(3, 4, 8), uint8] */;
  %111 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%107, dtype="uint8") /* ty=Tensor[(3, 4, 8), uint8] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %114 = maximum(%112, %113) /* ty=Tensor[(3, 4, 8), uint8] */;
  (%114,)
}

def @func_8806(%var_8788: int8, %var_8789: Tensor[(8, 1, 1), int8]) -> (Tensor[(8, ?, ?), int32], Tensor[(3, 4, 8), float64]) {
  %115 = cast(%var_8788, dtype="bool") /* ty=bool */;
  %116 = cast(%var_8789, dtype="bool") /* ty=Tensor[(8, 1, 1), bool] */;
  %117 = greater(%115, %116) /* ty=Tensor[(8, 1, 1), bool] */;
  %118 = cast(%117, dtype="int32") /* ty=Tensor[(8, 1, 1), int32] */;
  %119 = shape_of(%var_8789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%var_8789, dtype="int32") /* ty=Tensor[(8, 1, 1), int32] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %122 = add(%120, %121) /* ty=Tensor[(8, ?, ?), int32] */;
  %123 = @func_5883() /* ty=Tensor[(3, 4, 8), float64] */;
  (%122, %123)
}

def @func_9070() -> Tensor[(3, 4, 8), float64] {
  %124 = @func_8397() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %124.1
}

def @func_3878() -> (Tensor[(11, 3, 6), float64], Tensor[(11, 3, 6), float32]) {
  %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(11, 3, 6), float64] */;
  %126 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 3, 6), float64] */, dtype="float32") /* ty=Tensor[(11, 3, 6), float32] */;
  %127 = sin(%125) /* ty=Tensor[(11, 3, 6), float64] */;
  %128 = rsqrt(%126) /* ty=Tensor[(11, 3, 6), float32] */;
  (%127, %128)
}

def @func_557() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %129 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %130 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%129, %130)
}

def @func_695(%var_650: bool) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) {
  %131 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %132 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %133 = cast(%var_650, dtype="bool") /* ty=bool */;
  %134 = cast(meta[relay.Constant][8] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %135 = cast(meta[relay.Constant][8] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %136 = cast(meta[relay.Constant][8] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %137 = reshape(%133, newshape=[]) /* ty=bool */;
  %138 = reshape(%134, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %139 = reshape(%135, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %140 = reshape(%136, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %141 = @func_514(%137, %138, %139, %140) /* ty=(Tensor[(6, 6, 13), bool], Tensor[(6, 6, 13), float64], Tensor[(6, 6, 13), float32], Tensor[(6, 6, 13), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64]) */;
  %142 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %143 = %142.2;
  %144 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %145 = %144.0;
  %146 = cast(%145, dtype="uint64") /* ty=Tensor[(3, 4, 8), uint64] */;
  %147 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%143, dtype="uint64") /* ty=Tensor[(3, 4, 8), uint64] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %150 = left_shift(%148, %149) /* ty=Tensor[(3, 4, 8), uint64] */;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %152 = asin(%151) /* ty=Tensor[(3, 4, 8), float32] */;
  %153 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %154 = cast(%153, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %155 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%152, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %158 = cast(%152, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %159 = sinh(%158) /* ty=Tensor[(3, 4, 8), float64] */;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %161 = sqrt(%160) /* ty=Tensor[(3, 4, 8), float32] */;
  %162 = cast(%145, dtype="uint32") /* ty=Tensor[(3, 4, 8), uint32] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="uint32") /* ty=Tensor[(3, 4, 8), uint32] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %166 = cast(%145, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %167 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%161, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %170 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %171 = %131.0;
  %172 = %132.0;
  %173 = %141.6;
  %174 = less_equal(%156, %157) /* ty=Tensor[(3, 4, 8), bool] */;
  %175 = bitwise_and(%164, %165) /* ty=Tensor[(3, 4, 8), uint32] */;
  %176 = subtract(%168, %169) /* ty=Tensor[(3, 4, 8), float64] */;
  (%170, %171, %172, %173, %var_650, meta[relay.Constant][8] /* ty=Tensor[(468), bool] */, %174, %175, %176)
}

def @func_4736() -> (Tensor[(3, 4, 8), float64],) {
  %177 = @func_3546() /* ty=Tensor[(3, 4, 8), float64] */;
  (%177,)
}

def @main() -> (Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(?, 16, 13), float32], Tensor[(?, 16, 13), float64]) {
  %178 = @func_4736() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %179 = @func_5215() /* ty=(Tensor[(3, 4, 8), bool],) */;
  %180 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %181 = cast(meta[relay.Constant][10] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %182 = cast(meta[relay.Constant][9] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %183 = reshape(%181, newshape=[1, 16, 13]) /* ty=Tensor[(1, 16, 13), float64] */;
  %184 = reshape(%182, newshape=[4, 48]) /* ty=Tensor[(4, 48), float32] */;
  %185 = @func_8661(%183, %184) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(?, 16, 13), float32], Tensor[(3, 4, 8), float64], Tensor[(4, 48), float32], Tensor[(1, 16, 13), float32]) */;
  %186 = %185.5;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(1, 16, 13), float32] */;
  %188 = log(%187) /* ty=Tensor[(1, 16, 13), float32] */;
  %189 = cast(%186, dtype="bool") /* ty=Tensor[(1, 16, 13), bool] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="bool") /* ty=Tensor[(1, 16, 13), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = logical_or(%191, %192) /* ty=Tensor[(?, 16, 13), bool] */;
  %194 = cast(%186, dtype="float32") /* ty=Tensor[(1, 16, 13), float32] */;
  %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%193, dtype="float32") /* ty=Tensor[(?, 16, 13), float32] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %198 = cast(meta[relay.Constant][10] /* ty=Tensor[(208), float64] */, dtype="int64") /* ty=Tensor[(208), int64] */;
  %199 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%186, dtype="int64") /* ty=Tensor[(1, 16, 13), int64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %202 = multiply(%200, %201) /* ty=Tensor[(?, 16, 13), int64] */;
  %203 = cast(%202, dtype="uint8") /* ty=Tensor[(?, 16, 13), uint8] */;
  %204 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%188, dtype="uint8") /* ty=Tensor[(1, 16, 13), uint8] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %207 = logical_xor(%205, %206) /* ty=Tensor[(?, 16, 13), uint8] */;
  %208 = cast(%207, dtype="float64") /* ty=Tensor[(?, 16, 13), float64] */;
  %209 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%193, dtype="float64") /* ty=Tensor[(?, 16, 13), float64] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %212 = %178.0;
  %213 = %179.0;
  %214 = %180.1;
  %215 = minimum(%196, %197) /* ty=Tensor[(?, 16, 13), float32] */;
  %216 = divide(%210, %211) /* ty=Tensor[(?, 16, 13), float64] */;
  (%212, meta[relay.Constant][9] /* ty=Tensor[(192), float32] */, %213, %214, %215, %216)
}

def @func_6554() -> (Tensor[(3, 4, 8), float64], Tensor[(14, 1, 4), float32], Tensor[(56), bool]) {
  %217 = @func_2606() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %218 = cast(meta[relay.Constant][11] /* ty=Tensor[(56), bool] */, dtype="bool") /* ty=Tensor[(56), bool] */;
  %219 = reshape(%218, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), bool] */;
  %220 = @func_1404(%219) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) */;
  %221 = %217.0;
  %222 = %220.2;
  (%221, %222, meta[relay.Constant][11] /* ty=Tensor[(56), bool] */)
}

def @func_7700() -> Tensor[(3, 4, 8), float64] {
  @func_3709() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_6932() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %223 = @func_1550() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %224 = @func_3765() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %225 = %223.1;
  %226 = %224.0;
  (%225, %226)
}

def @func_3865(%var_3860: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(6), float64]) {
  %227 = @func_3043() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %228 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %229 = cast(%var_3860, dtype="float64") /* ty=Tensor[(6), float64] */;
  %230 = reshape(%229, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %231 = @func_2552(%230) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) */;
  %232 = %227.0;
  %233 = @func_3134() /* ty=Tensor[(3, 4, 8), float64] */;
  %234 = %228.1;
  %235 = %231.2;
  (%232, %233, %234, %235, %var_3860)
}

def @func_4613(%var_4557: Tensor[(3, 5, 8), float32]) -> (Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) {
  %236 = cast(%var_4557, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %237 = rsqrt(%236) /* ty=Tensor[(3, 5, 8), float32] */;
  %238 = cast(%var_4557, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %242 = cast(%var_4557, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %243 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %244 = not_equal(%240, %241) /* ty=Tensor[(3, 5, 8), bool] */;
  %245 = atan(%242) /* ty=Tensor[(3, 5, 8), float32] */;
  %246 = %243.1;
  (%244, %245, %246)
}

def @func_5649() -> Tensor[(3, 4, 8), float64] {
  %247 = @func_5168() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %247.0
}

def @func_5627(%var_5555: Tensor[(6, 5, 16), bool]) -> (Tensor[(6, 5, 16), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 5, 16), float32]) {
  %248 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 5, 16), bool] */, dtype="bool") /* ty=Tensor[(6, 5, 16), bool] */;
  %249 = shape_of(%var_5555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%var_5555, dtype="bool") /* ty=Tensor[(6, 5, 16), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = @func_2606() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %253 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 5, 16), bool] */, dtype="float32") /* ty=Tensor[(6, 5, 16), float32] */;
  %254 = logical_or(%250, %251) /* ty=Tensor[(6, 5, 16), bool] */;
  %255 = %252.0;
  %256 = @func_3134() /* ty=Tensor[(3, 4, 8), float64] */;
  %257 = sinh(%253) /* ty=Tensor[(6, 5, 16), float32] */;
  (%254, %255, %256, %257)
}

def @func_6609() -> (Tensor[(3, 4, 8), float64],) {
  %258 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %259 = %258.1;
  (%259,)
}

def @func_307() -> Tensor[(3, 4, 8), float64] {
  %260 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %262 = atanh(%261) /* ty=Tensor[(3, 4, 8), float64] */;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  log10(%263) /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_3345(%var_3308: Tensor[(6, 6, 9), float32]) -> (Tensor[(6, 6, 9), uint8], Tensor[(3, 4, 8), float64]) {
  %264 = cast(%var_3308, dtype="float32") /* ty=Tensor[(6, 6, 9), float32] */;
  %265 = tan(%264) /* ty=Tensor[(6, 6, 9), float32] */;
  %266 = cast(%var_3308, dtype="float64") /* ty=Tensor[(6, 6, 9), float64] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="float64") /* ty=Tensor[(6, 6, 9), float64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %270 = power(%268, %269) /* ty=Tensor[(6, 6, 9), float64] */;
  %271 = cast(%var_3308, dtype="uint8") /* ty=Tensor[(6, 6, 9), uint8] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="uint8") /* ty=Tensor[(6, 6, 9), uint8] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %275 = @func_2457() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32]) */;
  %276 = bitwise_xor(%273, %274) /* ty=Tensor[(6, 6, 9), uint8] */;
  %277 = %275.0;
  (%276, %277)
}

def @func_2606() -> (Tensor[(3, 4, 8), float64],) {
  %278 = @func_1674() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %279 = %278.0;
  (%279,)
}

def @func_5215() -> (Tensor[(3, 4, 8), bool],) {
  %280 = @func_2793() /* ty=Tensor[(3, 4, 8), bool] */;
  (%280,)
}

def @func_7816(%var_7781: Tensor[(5, 4, 1), int16], %var_7801: Tensor[(1274), float32], %var_7802: Tensor[(6), float64]) -> (Tensor[(5, 4, 7), int16], Tensor[(3, 4, 8), float64], Tensor[(14, 7, 13), float32], Tensor[(1274), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(5, 4, 6), uint8]) {
  %281 = cast(%var_7781, dtype="int16") /* ty=Tensor[(5, 4, 1), int16] */;
  %282 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 4, 7), int16] */, dtype="int16") /* ty=Tensor[(5, 4, 7), int16] */;
  %283 = @func_6238() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(91), float64]) */;
  %284 = cast(%var_7801, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %285 = cast(%var_7802, dtype="float64") /* ty=Tensor[(6), float64] */;
  %286 = cast(meta[relay.Constant][14] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %287 = reshape(%284, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), float32] */;
  %288 = reshape(%285, newshape=[1, 6]) /* ty=Tensor[(1, 6), float64] */;
  %289 = reshape(%286, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %290 = @func_2130(%287, %288, %289) /* ty=(Tensor[(14, 7, 13), float32], Tensor[(14, 6, 4), int16], Tensor[(24, 14), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(1, 6), float64], Tensor[(192), float32]) */;
  %291 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %292 = cast(%var_7802, dtype="uint8") /* ty=Tensor[(6), uint8] */;
  %293 = cast(%var_7781, dtype="uint8") /* ty=Tensor[(5, 4, 1), uint8] */;
  %294 = multiply(%281, %282) /* ty=Tensor[(5, 4, 7), int16] */;
  %295 = %283.0;
  %296 = %290.0;
  %297 = %291.0;
  %298 = bitwise_or(%292, %293) /* ty=Tensor[(5, 4, 6), uint8] */;
  (%294, %295, %296, %var_7801, meta[relay.Constant][14] /* ty=Tensor[(192), float32] */, %297, %298)
}

def @func_799(%var_783: Tensor[(192), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
  %299 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %300 = cast(%var_783, dtype="float32") /* ty=Tensor[(192), float32] */;
  %301 = reshape(%300, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
  %302 = %299.0;
  %303 = @func_375(%301) /* ty=Tensor[(12, 8, 2), float32] */;
  (%302, %303, %var_783)
}

def @func_2827() -> Tensor[(3, 4, 8), float64] {
  %304 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %304.0
}

def @func_7415() -> Tensor[(3, 4, 8), float64] {
  %305 = @func_5820() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %305.5
}

def @func_1531() -> (Tensor[(3, 4, 8), float64],) {
  %306 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %307 = %306.1;
  (%307,)
}

def @func_3588() -> Tensor[(3, 4, 8), float64] {
  %308 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %308.0
}

def @func_1452() -> Tensor[(3, 4, 8), float64] {
  %309 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %309.0
}

def @func_2038(%var_2026: Tensor[(56), bool], %var_2029: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 2), float64]) {
  %310 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %311 = cast(%var_2026, dtype="bool") /* ty=Tensor[(56), bool] */;
  %312 = reshape(%311, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), bool] */;
  %313 = @func_1404(%312) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) */;
  %314 = cast(%var_2029, dtype="float64") /* ty=Tensor[(6), float64] */;
  %315 = reshape(%314, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
  %316 = cast(%var_2029, dtype="float64") /* ty=Tensor[(6), float64] */;
  %317 = reshape(%316, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
  %318 = %310.1;
  %319 = %313.0;
  %320 = @func_767(%315) /* ty=Tensor[(3, 2), float64] */;
  %321 = @func_767(%317) /* ty=Tensor[(3, 2), float64] */;
  (%318, %319, %var_2026, %320, %var_2029, %321)
}

def @func_2294() -> (Tensor[(3, 4, 8), float64],) {
  %322 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %323 = %322.1;
  (%323,)
}

def @func_6859() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %324 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %325 = @func_2466() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %326 = %324.0;
  %327 = %325.0;
  (%326, %327)
}

def @func_6656(%var_6652: Tensor[(120, 4), bool]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(120, 4), bool]) {
  %328 = @func_4003() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %329 = cast(%var_6652, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %330 = reshape(%329, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), bool] */;
  %331 = @func_5627(%330) /* ty=(Tensor[(6, 5, 16), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 5, 16), float32]) */;
  %332 = %328.0;
  %333 = %331.1;
  (%332, %333, %var_6652)
}

def @func_8823() -> Tensor[(3, 4, 8), float64] {
  @func_3588() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_8457() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float32]) {
  %334 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %335 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %336 = reshape(%334, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
  %337 = reshape(%335, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
  %338 = @func_7924(%336, %337) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float32], Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) */;
  %339 = @func_7084() /* ty=Tensor[(3, 4, 8), float64] */;
  %340 = %338.4;
  (%339, %340, meta[relay.Constant][15] /* ty=Tensor[(120), float32] */)
}

def @func_1498() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %341 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %342 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %343 = %341.1;
  %344 = %342.0;
  (%343, %344)
}

def @func_7768() -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
  %345 = @func_3111() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %346 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %347 = reshape(%346, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
  %348 = %345.0;
  %349 = @func_375(%347) /* ty=Tensor[(12, 8, 2), float32] */;
  (%348, %349, meta[relay.Constant][16] /* ty=Tensor[(192), float32] */)
}

def @func_6238() -> (Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(91), float64]) {
  %350 = cast(meta[relay.Constant][17] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %351 = reshape(%350, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %352 = @func_5134(%351) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64]) */;
  %353 = @func_5883() /* ty=Tensor[(3, 4, 8), float64] */;
  %354 = %352.1;
  (%353, %354, meta[relay.Constant][17] /* ty=Tensor[(91), float64] */)
}

def @func_1865(%var_1844: Tensor[(192, 1), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(192, 11), uint8], Tensor[(12, 8, 2), float32], Tensor[(192, 11), float64]) {
  %355 = cast(%var_1844, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %356 = reshape(%355, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %357 = @func_799(%356) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */;
  %358 = @func_1531() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %359 = cast(%var_1844, dtype="uint8") /* ty=Tensor[(192, 1), uint8] */;
  %360 = cast(meta[relay.Constant][18] /* ty=Tensor[(192, 11), float32] */, dtype="uint8") /* ty=Tensor[(192, 11), uint8] */;
  %361 = %357.2;
  %362 = cast(%361, dtype="float32") /* ty=Tensor[(192), float32] */;
  %363 = reshape(%362, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
  %364 = cast(meta[relay.Constant][18] /* ty=Tensor[(192, 11), float32] */, dtype="float64") /* ty=Tensor[(192, 11), float64] */;
  %365 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %366 = @func_1452() /* ty=Tensor[(3, 4, 8), float64] */;
  %367 = %358.0;
  %368 = subtract(%359, %360) /* ty=Tensor[(192, 11), uint8] */;
  %369 = @func_375(%363) /* ty=Tensor[(12, 8, 2), float32] */;
  %370 = erf(%364) /* ty=Tensor[(192, 11), float64] */;
  (%365, %366, %361, %367, %368, %369, %370)
}

def @func_5903(%var_5886: Tensor[(6, 10, 8), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(6, 10, 8), float32]) {
  %371 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 10, 8), float64] */, dtype="bool") /* ty=Tensor[(6, 10, 8), bool] */;
  %372 = shape_of(%var_5886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%var_5886, dtype="bool") /* ty=Tensor[(6, 10, 8), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %375 = not_equal(%373, %374) /* ty=Tensor[(6, 10, 8), bool] */;
  %376 = cast(%375, dtype="float32") /* ty=Tensor[(6, 10, 8), float32] */;
  %377 = @func_4051() /* ty=Tensor[(3, 4, 8), float64] */;
  %378 = sinh(%376) /* ty=Tensor[(6, 10, 8), float32] */;
  (%377, %378)
}

def @func_1404(%var_1350: Tensor[(14, 1, 4), bool]) -> (Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) {
  %379 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %380 = reshape(%379, newshape=[]) /* ty=bool */;
  %381 = @func_916(%380) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(6, 6, 13), bool]) */;
  %382 = cast(False /* ty=bool */, dtype="float32") /* ty=float32 */;
  %383 = cast(%var_1350, dtype="float32") /* ty=Tensor[(14, 1, 4), float32] */;
  %384 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %385 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %386 = reshape(%385, newshape=[]) /* ty=bool */;
  %387 = @func_695(%386) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */;
  %388 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %389 = reshape(%388, newshape=[]) /* ty=bool */;
  %390 = @func_695(%389) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */;
  %391 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %392 = %381.2;
  %393 = floor_divide(%382, %383) /* ty=Tensor[(14, 1, 4), float32] */;
  %394 = @func_307() /* ty=Tensor[(3, 4, 8), float64] */;
  %395 = %384.0;
  %396 = %387.5;
  %397 = %390.2;
  (%391, %392, %393, %394, %395, %396, %397)
}

def @func_8922(%var_8917: Tensor[(9, 1, 1), uint32]) -> Tensor[(9, 1, 1), uint32] {
  %398 = cast(meta[relay.Constant][20] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %399 = cast(%var_8917, dtype="uint32") /* ty=Tensor[(9, 1, 1), uint32] */;
  add(%398, %399) /* ty=Tensor[(9, 1, 1), uint32] */
}

def @func_6103(%var_6065: Tensor[(1, 13, 3), float32], %var_6086: Tensor[(2, 13, 3), float32]) -> (Tensor[(2, 13, 3), int32],) {
  %400 = cast(%var_6065, dtype="float32") /* ty=Tensor[(1, 13, 3), float32] */;
  %401 = sigmoid(%400) /* ty=Tensor[(1, 13, 3), float32] */;
  %402 = cast(%401, dtype="int32") /* ty=Tensor[(1, 13, 3), int32] */;
  %403 = cast(%var_6086, dtype="int32") /* ty=Tensor[(2, 13, 3), int32] */;
  %404 = minimum(%402, %403) /* ty=Tensor[(2, 13, 3), int32] */;
  (%404,)
}

def @func_375(%var_368: Tensor[(12, 8, 2), float32]) -> Tensor[(12, 8, 2), float32] {
  %405 = cast(%var_368, dtype="float32") /* ty=Tensor[(12, 8, 2), float32] */;
  rsqrt(%405) /* ty=Tensor[(12, 8, 2), float32] */
}

def @func_7578() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32]) {
  %406 = @func_7497() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float32]) */;
  %407 = @func_7084() /* ty=Tensor[(3, 4, 8), float64] */;
  %408 = %406.1;
  (%407, %408)
}

def @func_1896() -> (Tensor[(3, 4, 8), float64],) {
  %409 = @func_984() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], bool, Tensor[(14, 6, 4), int16], Tensor[(336), int16], Tensor[(3, 4, 8), float64]) */;
  %410 = %409.1;
  (%410,)
}

def @func_8252() -> Tensor[(3, 4, 8), float64] {
  %411 = @func_1674() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %411.0
}

def @func_5924() -> Tensor[(3, 4, 8), float64] {
  @func_5336() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_40() -> Tensor[(3, 4, 8), float64] {
  %412 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %413 = sin(%412) /* ty=Tensor[(3, 4, 8), float64] */;
  %414 = cast(%413, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  tan(%414) /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_6039(%var_6024: Tensor[(91), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(91), int16], Tensor[(91), float64]) {
  %415 = @func_4536() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %416 = @func_2584() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %417 = cast(meta[relay.Constant][22] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %418 = reshape(%417, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %419 = @func_5134(%418) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64]) */;
  %420 = cast(%var_6024, dtype="int16") /* ty=Tensor[(91), int16] */;
  %421 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(91), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %422 = cast(meta[relay.Constant][22] /* ty=Tensor[(91), float64] */, dtype="int16") /* ty=Tensor[(91), int16] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?), int16] */;
  %424 = cast(%var_6024, dtype="float64") /* ty=Tensor[(91), float64] */;
  %425 = %415.0;
  %426 = %416.0;
  %427 = %419.0;
  %428 = left_shift(%422, %423) /* ty=Tensor[(91), int16] */;
  %429 = asinh(%424) /* ty=Tensor[(91), float64] */;
  (%425, %426, %427, %428, %429)
}

def @func_1993() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) {
  %430 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %431 = @func_307() /* ty=Tensor[(3, 4, 8), float64] */;
  %432 = %430.0;
  (%431, %432)
}

def @func_4051() -> Tensor[(3, 4, 8), float64] {
  %433 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %433.0
}

def @func_4436() -> Tensor[(3, 4, 8), bool] {
  %434 = @func_2716() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) */;
  %434.1
}

def @func_2457() -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32]) {
  %435 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %436 = @func_1823() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */;
  %437 = %435.0;
  %438 = %436.2;
  (%437, %438)
}

def @func_3932() -> Tensor[(3, 4, 8), float64] {
  @func_3008() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_5336() -> Tensor[(3, 4, 8), float64] {
  %439 = @func_3403() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %439.1
}

def @func_7976() -> (Tensor[(3, 4, 8), float64],) {
  %440 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %441 = %440.0;
  (%441,)
}

def @func_2584() -> (Tensor[(3, 4, 8), float64],) {
  %442 = @func_1452() /* ty=Tensor[(3, 4, 8), float64] */;
  (%442,)
}

def @func_4354() -> Tensor[(3, 4, 8), float64] {
  %443 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %443.2
}

def @func_5883() -> Tensor[(3, 4, 8), float64] {
  @func_2827() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_1550() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %444 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %445 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %446 = %444.0;
  %447 = @func_307() /* ty=Tensor[(3, 4, 8), float64] */;
  %448 = %445.0;
  (%446, %447, %448)
}

def @func_1246(%var_1112: Tensor[(6), float64], %var_1165: Tensor[(192), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6, 6, 13), bool], bool, Tensor[(468, 1), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), bool]) {
  %449 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %450 = %449.0;
  %451 = cast(%450, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %452 = cast(%var_1112, dtype="float64") /* ty=Tensor[(6), float64] */;
  %453 = reshape(%452, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
  %454 = @func_984() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], bool, Tensor[(14, 6, 4), int16], Tensor[(336), int16], Tensor[(3, 4, 8), float64]) */;
  %455 = cast(%var_1112, dtype="float64") /* ty=Tensor[(6), float64] */;
  %456 = reshape(%455, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
  %457 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %458 = cast(meta[relay.Constant][23] /* ty=Tensor[(468, 1), bool] */, dtype="bool") /* ty=Tensor[(468, 1), bool] */;
  %459 = cast(meta[relay.Constant][23] /* ty=Tensor[(468, 1), bool] */, dtype="bool") /* ty=Tensor[(468, 1), bool] */;
  %460 = cast(meta[relay.Constant][23] /* ty=Tensor[(468, 1), bool] */, dtype="bool") /* ty=Tensor[(468, 1), bool] */;
  %461 = reshape(%457, newshape=[]) /* ty=bool */;
  %462 = reshape(%458, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %463 = reshape(%459, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %464 = reshape(%460, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %465 = @func_514(%461, %462, %463, %464) /* ty=(Tensor[(6, 6, 13), bool], Tensor[(6, 6, 13), float64], Tensor[(6, 6, 13), float32], Tensor[(6, 6, 13), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64]) */;
  %466 = cast(%var_1165, dtype="float32") /* ty=Tensor[(192), float32] */;
  %467 = reshape(%466, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
  %468 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %469 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %470 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %471 = cast(%var_1165, dtype="float32") /* ty=Tensor[(192), float32] */;
  %472 = reshape(%471, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
  %473 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %474 = reshape(%473, newshape=[]) /* ty=bool */;
  %475 = @func_695(%474) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */;
  %476 = atan(%451) /* ty=Tensor[(3, 4, 8), float64] */;
  %477 = @func_767(%453) /* ty=Tensor[(3, 2), float64] */;
  %478 = %454.1;
  %479 = @func_767(%456) /* ty=Tensor[(3, 2), float64] */;
  %480 = %465.0;
  %481 = @func_375(%467) /* ty=Tensor[(12, 8, 2), float32] */;
  %482 = %468.0;
  %483 = %469.0;
  %484 = %470.2;
  %485 = @func_375(%472) /* ty=Tensor[(12, 8, 2), float32] */;
  %486 = %475.6;
  (%476, %477, %var_1112, %478, %479, %480, False /* ty=bool */, meta[relay.Constant][23] /* ty=Tensor[(468, 1), bool] */, %481, %var_1165, %482, %483, %484, %485, %486)
}

def @func_1674() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %487 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %488 = %487.0;
  %489 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%488, %489)
}

def @func_6699() -> Tensor[(3, 4, 8), float64] {
  %490 = @func_4003() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %490.0
}

def @func_7676() -> (Tensor[(3, 4, 8), float64],) {
  %491 = @func_2891() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %492 = %491.3;
  (%492,)
}

def @func_4189(%var_4165: Tensor[(16, 7, 13), uint32]) -> (Tensor[(16, 7, 13), int32],) {
  %493 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 7, 13), uint32] */, dtype="uint32") /* ty=Tensor[(16, 7, 13), uint32] */;
  %494 = shape_of(%var_4165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%var_4165, dtype="uint32") /* ty=Tensor[(16, 7, 13), uint32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %497 = logical_xor(%495, %496) /* ty=Tensor[(16, 7, 13), uint32] */;
  %498 = cast(%497, dtype="int32") /* ty=Tensor[(16, 7, 13), int32] */;
  %499 = shape_of(%var_4165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%var_4165, dtype="int32") /* ty=Tensor[(16, 7, 13), int32] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %502 = right_shift(%500, %501) /* ty=Tensor[(16, 7, 13), int32] */;
  (%502,)
}

def @func_2380() -> (Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64]) {
  %503 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %504 = @func_2054() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %505 = %503.0;
  %506 = %504.0;
  (%505, %506)
}

def @func_2466() -> (Tensor[(3, 4, 8), float64],) {
  %507 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%507,)
}

def @func_2130(%var_2093: Tensor[(14, 7, 13), float32], %var_2120: Tensor[(1, 6), float64], %var_2121: Tensor[(192), float32]) -> (Tensor[(14, 7, 13), float32], Tensor[(14, 6, 4), int16], Tensor[(24, 14), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(1, 6), float64], Tensor[(192), float32]) {
  %508 = cast(%var_2093, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %509 = cast(meta[relay.Constant][25] /* ty=Tensor[(24, 14), int16] */, dtype="int16") /* ty=Tensor[(24, 14), int16] */;
  %510 = reshape(%509, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int16] */;
  %511 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %512 = cast(%var_2120, dtype="float64") /* ty=Tensor[(1, 6), float64] */;
  %513 = cast(%var_2121, dtype="float32") /* ty=Tensor[(192), float32] */;
  %514 = reshape(%512, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %515 = reshape(%513, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %516 = @func_1246(%514, %515) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6, 6, 13), bool], bool, Tensor[(468, 1), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), bool]) */;
  %517 = rsqrt(%508) /* ty=Tensor[(14, 7, 13), float32] */;
  %518 = @func_828(%510) /* ty=Tensor[(14, 6, 4), int16] */;
  %519 = @func_1316() /* ty=Tensor[(3, 4, 8), float64] */;
  %520 = %511.0;
  %521 = %516.13;
  (%517, %518, meta[relay.Constant][25] /* ty=Tensor[(24, 14), int16] */, %519, %520, %521, %var_2120, %var_2121)
}

def @func_4638() -> Tensor[(3, 4, 8), float64] {
  %522 = @func_2606() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %522.0
}

def @func_2218() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %523 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %524 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %525 = @func_1531() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %526 = %523.0;
  %527 = %524.0;
  %528 = %525.0;
  %529 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%526, %527, %528, %529)
}

def @func_1316() -> Tensor[(3, 4, 8), float64] {
  %530 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %530.0
}

def @func_5719() -> (Tensor[(3, 4, 8), bool],) {
  %531 = @func_2716() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) */;
  %532 = %531.1;
  (%532,)
}

def @func_7647(%var_7635: Tensor[(192), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(6), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) {
  %533 = cast(meta[relay.Constant][26] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %534 = cast(%var_7635, dtype="float32") /* ty=Tensor[(192), float32] */;
  %535 = reshape(%533, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %536 = reshape(%534, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %537 = @func_1246(%535, %536) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6, 6, 13), bool], bool, Tensor[(468, 1), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), bool]) */;
  %538 = @func_2827() /* ty=Tensor[(3, 4, 8), float64] */;
  %539 = %537.9;
  %540 = @func_3546() /* ty=Tensor[(3, 4, 8), float64] */;
  (%538, %539, meta[relay.Constant][26] /* ty=Tensor[(6), float64] */, %var_7635, %540)
}

def @func_7355() -> Tensor[(11, 3, 6), float32] {
  %541 = @func_3878() /* ty=(Tensor[(11, 3, 6), float64], Tensor[(11, 3, 6), float32]) */;
  %541.1
}

def @func_5751() -> (Tensor[(3, 4, 8), float64],) {
  %542 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %543 = %542.0;
  (%543,)
}

def @func_5358(%var_5343: Tensor[(14, 8, 1), float64], %var_5344: Tensor[(14, 8, 11), float64]) -> (Tensor[(14, 8, 11), float64],) {
  %544 = cast(%var_5343, dtype="float64") /* ty=Tensor[(14, 8, 1), float64] */;
  %545 = cast(%var_5344, dtype="float64") /* ty=Tensor[(14, 8, 11), float64] */;
  %546 = floor_divide(%544, %545) /* ty=Tensor[(14, 8, 11), float64] */;
  (%546,)
}

def @func_6803(%var_6732: uint16, %var_6733: Tensor[(16, 9, 6), uint16], %var_6788: Tensor[(56), bool]) -> (Tensor[(16, 9, 6), uint16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(14, 8, 11), float64], Tensor[(1, 112), float64], Tensor[(1232), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %547 = cast(%var_6732, dtype="uint16") /* ty=uint16 */;
  %548 = cast(%var_6733, dtype="uint16") /* ty=Tensor[(16, 9, 6), uint16] */;
  %549 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %550 = @func_5719() /* ty=(Tensor[(3, 4, 8), bool],) */;
  %551 = @func_6609() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %552 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 112), float64] */, dtype="float64") /* ty=Tensor[(1, 112), float64] */;
  %553 = cast(meta[relay.Constant][28] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %554 = reshape(%552, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), float64] */;
  %555 = reshape(%553, newshape=[14, 8, 11]) /* ty=Tensor[(14, 8, 11), float64] */;
  %556 = @func_5358(%554, %555) /* ty=(Tensor[(14, 8, 11), float64],) */;
  %557 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %558 = cast(%var_6788, dtype="bool") /* ty=Tensor[(56), bool] */;
  %559 = reshape(%558, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), bool] */;
  %560 = @func_1404(%559) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) */;
  %561 = @func_2584() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %562 = @func_3111() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %563 = add(%547, %548) /* ty=Tensor[(16, 9, 6), uint16] */;
  %564 = %549.1;
  %565 = %550.0;
  %566 = %551.0;
  %567 = %556.0;
  %568 = %557.0;
  %569 = %560.3;
  %570 = %561.0;
  %571 = %562.0;
  (%563, %564, %565, %566, %567, meta[relay.Constant][27] /* ty=Tensor[(1, 112), float64] */, meta[relay.Constant][28] /* ty=Tensor[(1232), float64] */, %568, %569, %var_6788, %570, %571)
}

def @func_7309() -> (Tensor[(3, 4, 8), float64],) {
  %572 = @func_6932() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %573 = %572.1;
  (%573,)
}

def @func_5707() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %574 = @func_2584() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %575 = @func_1615() /* ty=Tensor[(3, 4, 8), float64] */;
  %576 = %574.0;
  (%575, %576)
}

def @func_8903() -> (Tensor[(3, 4, 8), float64],) {
  %577 = @func_2827() /* ty=Tensor[(3, 4, 8), float64] */;
  (%577,)
}

def @func_1058(%var_1037: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) {
  %578 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %579 = cast(%var_1037, dtype="float64") /* ty=Tensor[(6), float64] */;
  %580 = reshape(%579, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
  %581 = %578.0;
  %582 = @func_767(%580) /* ty=Tensor[(3, 2), float64] */;
  (%581, %582, %var_1037)
}

def @func_3403() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %583 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %584 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %585 = @func_3302() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) */;
  %586 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %587 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %588 = %583.1;
  %589 = %584.1;
  %590 = %585.1;
  %591 = %586.0;
  %592 = %587.0;
  (%588, %589, %590, %591, %592)
}

def @func_7084() -> Tensor[(3, 4, 8), float64] {
  %593 = @func_4736() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %593.0
}

def @func_7497() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float32]) {
  %594 = @func_3111() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %595 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %596 = reshape(%595, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
  %597 = @func_4613(%596) /* ty=(Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) */;
  %598 = %594.0;
  %599 = %597.1;
  (%598, %599, meta[relay.Constant][29] /* ty=Tensor[(120), float32] */)
}

def @func_3234() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %600 = @func_1531() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %601 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %602 = @func_2827() /* ty=Tensor[(3, 4, 8), float64] */;
  %603 = %600.0;
  (%601, %602, %603)
}

def @func_5508(%var_5474: Tensor[(11, 3, 6), float32]) -> (Tensor[(11, 3, 6), bool], Tensor[(3, 4, 8), float64], Tensor[(11, 3, 6), int16]) {
  %604 = @func_3878() /* ty=(Tensor[(11, 3, 6), float64], Tensor[(11, 3, 6), float32]) */;
  %605 = %604.1;
  %606 = cast(%var_5474, dtype="bool") /* ty=Tensor[(11, 3, 6), bool] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="bool") /* ty=Tensor[(11, 3, 6), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 3, 6), float32] */, dtype="int16") /* ty=Tensor[(11, 3, 6), int16] */;
  %611 = shape_of(%var_5474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%var_5474, dtype="int16") /* ty=Tensor[(11, 3, 6), int16] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %614 = greater(%608, %609) /* ty=Tensor[(11, 3, 6), bool] */;
  %615 = @func_3709() /* ty=Tensor[(3, 4, 8), float64] */;
  %616 = maximum(%612, %613) /* ty=Tensor[(11, 3, 6), int16] */;
  (%614, %615, %616)
}

def @func_2793() -> Tensor[(3, 4, 8), bool] {
  %617 = @func_1823() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */;
  %617.1
}

def @func_5521(%var_5514: Tensor[(9, 8, 8), uint8]) -> (Tensor[(9, 8, 8), bool],) {
  %618 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 1, 8), uint8] */, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %619 = cast(%var_5514, dtype="bool") /* ty=Tensor[(9, 8, 8), bool] */;
  %620 = not_equal(%618, %619) /* ty=Tensor[(9, 8, 8), bool] */;
  (%620,)
}

def @func_7026(%var_7017: Tensor[(3, 2), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(56), bool], Tensor[(3, 2), float64]) {
  %621 = @func_3765() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %622 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %623 = cast(meta[relay.Constant][32] /* ty=Tensor[(56), bool] */, dtype="bool") /* ty=Tensor[(56), bool] */;
  %624 = cast(%var_7017, dtype="float64") /* ty=Tensor[(3, 2), float64] */;
  %625 = reshape(%623, newshape=[56]) /* ty=Tensor[(56), bool] */;
  %626 = reshape(%624, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %627 = @func_2038(%625, %626) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 2), float64]) */;
  %628 = %621.0;
  %629 = %622.1;
  %630 = %627.5;
  (%628, %629, %630, meta[relay.Constant][32] /* ty=Tensor[(56), bool] */, %var_7017)
}

def @func_2054() -> (Tensor[(3, 4, 8), float64],) {
  %631 = @func_1316() /* ty=Tensor[(3, 4, 8), float64] */;
  (%631,)
}

def @func_3765() -> (Tensor[(3, 4, 8), float64],) {
  %632 = @func_3709() /* ty=Tensor[(3, 4, 8), float64] */;
  (%632,)
}

def @func_4523(%var_4516: Tensor[(8, 9, 5), float32]) -> (Tensor[(8, 9, 5), float32],) {
  %633 = cast(%var_4516, dtype="float32") /* ty=Tensor[(8, 9, 5), float32] */;
  %634 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(8, 9, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 9, 5), float32] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %637 = floor_divide(%635, %636) /* ty=Tensor[(8, 9, 5), float32] */;
  (%637,)
}

def @func_3111() -> (Tensor[(3, 4, 8), float64],) {
  %638 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %639 = %638.1;
  (%639,)
}

def @func_8957(%var_8946: Tensor[(3, 1, 11), uint8], %var_8947: Tensor[(3, 1, 11), uint8]) -> Tensor[(3, ?, 11), uint8] {
  %640 = cast(%var_8947, dtype="uint8") /* ty=Tensor[(3, 1, 11), uint8] */;
  %641 = shape_of(%var_8946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%var_8946, dtype="uint8") /* ty=Tensor[(3, 1, 11), uint8] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%642, %643) /* ty=Tensor[(3, ?, 11), uint8] */
}

def @func_1823() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
  %644 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %645 = cast(meta[relay.Constant][34] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %646 = reshape(%645, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
  %647 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %648 = %644.0;
  %649 = @func_375(%646) /* ty=Tensor[(12, 8, 2), float32] */;
  (%647, %648, %649, meta[relay.Constant][34] /* ty=Tensor[(192), float32] */)
}

def @func_8024(%var_7983: Tensor[(9, 3, 3), uint16]) -> (Tensor[(9, 3, 3), uint8], Tensor[(3, 4, 8), float64]) {
  %650 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 3, 3), uint16] */, dtype="bool") /* ty=Tensor[(9, 3, 3), bool] */;
  %651 = shape_of(%var_7983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%var_7983, dtype="bool") /* ty=Tensor[(9, 3, 3), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = equal(%652, %653) /* ty=Tensor[(9, 3, 3), bool] */;
  %655 = cast(%654, dtype="uint8") /* ty=Tensor[(9, 3, 3), uint8] */;
  %656 = shape_of(%var_7983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%var_7983, dtype="uint8") /* ty=Tensor[(9, 3, 3), uint8] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %659 = @func_2218() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %660 = left_shift(%657, %658) /* ty=Tensor[(9, 3, 3), uint8] */;
  %661 = %659.3;
  (%660, %661)
}

def @func_148() -> (Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %662 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %664 = acosh(%663) /* ty=Tensor[(3, 4, 8), float32] */;
  %665 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %669 = floor_mod(%667, %668) /* ty=Tensor[(3, 4, 8), float32] */;
  %670 = cast(%669, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %671 = log(%670) /* ty=Tensor[(3, 4, 8), float32] */;
  %672 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %673 = cast(%672, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %674 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%671, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %677 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %678 = cast(%677, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %679 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%662, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %682 = floor_divide(%680, %681) /* ty=Tensor[(3, 4, 8), float32] */;
  %683 = cast(%682, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %684 = equal(%675, %676) /* ty=Tensor[(3, 4, 8), bool] */;
  %685 = sigmoid(%683) /* ty=Tensor[(3, 4, 8), float64] */;
  %686 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%684, %685, %686)
}

def @func_4138() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 1), float64]) {
  %687 = @func_1452() /* ty=Tensor[(3, 4, 8), float64] */;
  %688 = cast(%687, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %689 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 1), float64] */, dtype="float64") /* ty=Tensor[(6, 1), float64] */;
  %690 = reshape(%688, newshape=[3, 4, 8]) /* ty=Tensor[(3, 4, 8), float64] */;
  %691 = reshape(%689, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
  %692 = @func_2655(%690, %691) /* ty=(Tensor[(3, 4, 8), int8], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(3, 4, 8), float64]) */;
  %693 = %692.1;
  (%687, %693, meta[relay.Constant][37] /* ty=Tensor[(6, 1), float64] */)
}

def @func_2757() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %694 = @func_2584() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %695 = @func_2380() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64]) */;
  %696 = %694.0;
  %697 = %695.1;
  (%696, %697)
}

def @func_514(%var_397: bool, %var_398: Tensor[(6, 6, 13), bool], %var_408: Tensor[(6, 6, 13), bool], %var_468: Tensor[(6, 6, 13), bool]) -> (Tensor[(6, 6, 13), bool], Tensor[(6, 6, 13), float64], Tensor[(6, 6, 13), float32], Tensor[(6, 6, 13), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64]) {
  %698 = cast(%var_397, dtype="bool") /* ty=bool */;
  %699 = cast(%var_398, dtype="bool") /* ty=Tensor[(6, 6, 13), bool] */;
  %700 = cast(%var_408, dtype="float64") /* ty=Tensor[(6, 6, 13), float64] */;
  %701 = shape_of(%var_398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%var_398, dtype="float64") /* ty=Tensor[(6, 6, 13), float64] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %704 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 6, 13), bool] */, dtype="float32") /* ty=Tensor[(6, 6, 13), float32] */;
  %705 = shape_of(%var_408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%var_408, dtype="float32") /* ty=Tensor[(6, 6, 13), float32] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %708 = cast(%var_468, dtype="int16") /* ty=Tensor[(6, 6, 13), int16] */;
  %709 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(6, 6, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 6, 13), bool] */, dtype="int16") /* ty=Tensor[(6, 6, 13), int16] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %712 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %713 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 6, 13), bool] */, dtype="float64") /* ty=Tensor[(6, 6, 13), float64] */;
  %714 = asin(%713) /* ty=Tensor[(6, 6, 13), float64] */;
  %715 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 6, 13), bool] */, dtype="float64") /* ty=Tensor[(6, 6, 13), float64] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%714, dtype="float64") /* ty=Tensor[(6, 6, 13), float64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %719 = logical_or(%698, %699) /* ty=Tensor[(6, 6, 13), bool] */;
  %720 = mod(%702, %703) /* ty=Tensor[(6, 6, 13), float64] */;
  %721 = divide(%706, %707) /* ty=Tensor[(6, 6, 13), float32] */;
  %722 = bitwise_or(%710, %711) /* ty=Tensor[(6, 6, 13), int16] */;
  %723 = %712.1;
  %724 = @func_307() /* ty=Tensor[(3, 4, 8), float64] */;
  %725 = add(%717, %718) /* ty=Tensor[(6, 6, 13), float64] */;
  (%719, %720, %721, %722, %723, %724, %725)
}

def @func_858() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %726 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %727 = %726.0;
  %728 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%727, %728)
}

def @func_4374() -> (Tensor[(6, 3, 14), bool], Tensor[(3, 4, 8), float64]) {
  %729 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 14), float32] */;
  %730 = asinh(%729) /* ty=Tensor[(6, 3, 14), float32] */;
  %731 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 3, 14), float32] */, dtype="bool") /* ty=Tensor[(6, 3, 14), bool] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%730, dtype="bool") /* ty=Tensor[(6, 3, 14), bool] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %735 = greater_equal(%733, %734) /* ty=Tensor[(6, 3, 14), bool] */;
  %736 = @func_4354() /* ty=Tensor[(3, 4, 8), float64] */;
  (%735, %736)
}

def @func_7144() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %737 = @func_2294() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %738 = @func_2218() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %739 = %737.0;
  %740 = %738.3;
  (%739, %740)
}

def @func_3043() -> (Tensor[(3, 4, 8), float64],) {
  %741 = @func_2757() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %742 = %741.1;
  (%742,)
}

def @func_5820() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %743 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %744 = cast(meta[relay.Constant][40] /* ty=Tensor[(56), bool] */, dtype="bool") /* ty=Tensor[(56), bool] */;
  %745 = reshape(%744, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), bool] */;
  %746 = @func_1404(%745) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) */;
  %747 = @func_1550() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %748 = @func_5168() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %749 = @func_4536() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %750 = %743.0;
  %751 = %746.3;
  %752 = %747.0;
  %753 = %748.0;
  %754 = %749.0;
  (%750, %751, meta[relay.Constant][40] /* ty=Tensor[(56), bool] */, %752, %753, %754)
}

def @func_767(%var_756: Tensor[(3, 2), float64]) -> Tensor[(3, 2), float64] {
  %755 = cast(%var_756, dtype="float64") /* ty=Tensor[(3, 2), float64] */;
  asinh(%755) /* ty=Tensor[(3, 2), float64] */
}

def @func_5134(%var_5059: Tensor[(1, 13, 7), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64]) {
  %756 = @func_4536() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %757 = cast(%var_5059, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  %758 = cast(%var_5059, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  %759 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 13, 7), float64] */;
  %760 = floor_divide(%758, %759) /* ty=Tensor[(9, 13, 7), float64] */;
  %761 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 13, 7), float64] */, dtype="int64") /* ty=Tensor[(9, 13, 7), int64] */;
  %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%760, dtype="int64") /* ty=Tensor[(9, 13, 7), int64] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %765 = %756.0;
  %766 = sin(%757) /* ty=Tensor[(1, 13, 7), float64] */;
  %767 = @func_3546() /* ty=Tensor[(3, 4, 8), float64] */;
  %768 = right_shift(%763, %764) /* ty=Tensor[(9, 13, 7), int64] */;
  (%765, %766, %767, %768)
}

def @func_6416(%var_6407: Tensor[(1, 10, 9), uint64], %var_6408: Tensor[(13, 10, 9), uint64]) -> Tensor[(13, 10, 9), uint64] {
  %769 = cast(%var_6407, dtype="uint64") /* ty=Tensor[(1, 10, 9), uint64] */;
  %770 = cast(%var_6408, dtype="uint64") /* ty=Tensor[(13, 10, 9), uint64] */;
  right_shift(%769, %770) /* ty=Tensor[(13, 10, 9), uint64] */
}

def @func_8397() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %771 = @func_1452() /* ty=Tensor[(3, 4, 8), float64] */;
  %772 = @func_7600() /* ty=Tensor[(3, 4, 8), float64] */;
  (%771, %772)
}

def @func_8433(%var_8420: Tensor[(192), float32]) -> (Tensor[(7, 11), float64], Tensor[(192), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %773 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 11), float64] */;
  %774 = cast(%var_8420, dtype="float32") /* ty=Tensor[(192), float32] */;
  %775 = reshape(%774, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %776 = @func_7647(%775) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(6), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) */;
  %777 = @func_6859() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %778 = cosh(%773) /* ty=Tensor[(7, 11), float64] */;
  %779 = %776.3;
  %780 = @func_3709() /* ty=Tensor[(3, 4, 8), float64] */;
  %781 = %777.1;
  (%778, %779, %var_8420, %780, %781)
}

def @func_5035() -> (Tensor[(3, 4, 8), float64],) {
  %782 = @func_2757() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %783 = %782.0;
  (%783,)
}

def @func_322() -> (Tensor[(3, 4, 8), float64],) {
  %784 = @func_307() /* ty=Tensor[(3, 4, 8), float64] */;
  (%784,)
}

def @func_7924(%var_7842: Tensor[(3, 5, 8), float32], %var_7881: Tensor[(3, 5, 8), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float32], Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) {
  %785 = @func_6932() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %786 = @func_7578() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32]) */;
  %787 = %786.1;
  %788 = cast(%var_7842, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%787, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %792 = equal(%790, %791) /* ty=Tensor[(3, 5, 8), bool] */;
  %793 = cast(%792, dtype="int64") /* ty=Tensor[(3, 5, 8), int64] */;
  %794 = shape_of(%var_7842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%var_7842, dtype="int64") /* ty=Tensor[(3, 5, 8), int64] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %797 = cast(%792, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %798 = cast(%var_7881, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %799 = shape_of(%var_7842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%var_7842, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %802 = cast(%var_7842, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %803 = @func_5035() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %804 = %785.1;
  %805 = left_shift(%795, %796) /* ty=Tensor[(3, 5, 8), int64] */;
  %806 = acosh(%797) /* ty=Tensor[(3, 5, 8), float32] */;
  %807 = logical_and(%800, %801) /* ty=Tensor[(3, 5, 8), bool] */;
  %808 = sinh(%802) /* ty=Tensor[(3, 5, 8), float32] */;
  %809 = %803.0;
  (%804, %805, %806, %807, %808, %809)
}

def @func_7600() -> Tensor[(3, 4, 8), float64] {
  @func_4354() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_4003() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %810 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %811 = @func_2584() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %812 = %810.1;
  %813 = %811.0;
  (%812, %813)
}

def @func_916(%var_899: bool) -> (Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(6, 6, 13), bool]) {
  %814 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %815 = cast(%var_899, dtype="bool") /* ty=bool */;
  %816 = cast(meta[relay.Constant][43] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %817 = cast(meta[relay.Constant][43] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %818 = cast(meta[relay.Constant][43] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %819 = reshape(%815, newshape=[]) /* ty=bool */;
  %820 = reshape(%816, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %821 = reshape(%817, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %822 = reshape(%818, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %823 = @func_514(%819, %820, %821, %822) /* ty=(Tensor[(6, 6, 13), bool], Tensor[(6, 6, 13), float64], Tensor[(6, 6, 13), float32], Tensor[(6, 6, 13), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64]) */;
  %824 = %823.1;
  %825 = cast(%824, dtype="bool") /* ty=Tensor[(6, 6, 13), bool] */;
  %826 = cast(%var_899, dtype="bool") /* ty=bool */;
  %827 = %814.1;
  %828 = greater_equal(%825, %826) /* ty=Tensor[(6, 6, 13), bool] */;
  (%827, meta[relay.Constant][43] /* ty=Tensor[(468), bool] */, %828)
}

def @func_8786() -> (Tensor[(8, 12, 5), float32], Tensor[(3, 4, 8), float64]) {
  %829 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %830 = cosh(%829) /* ty=Tensor[(8, 12, 5), float32] */;
  %831 = @func_1316() /* ty=Tensor[(3, 4, 8), float64] */;
  (%830, %831)
}

def @func_5832(%var_5827: Tensor[(10, 6, 12), bool]) -> Tensor[(10, 6, 12), bool] {
  %832 = cast(meta[relay.Constant][45] /* ty=Tensor[(10, 6, 12), bool] */, dtype="bool") /* ty=Tensor[(10, 6, 12), bool] */;
  %833 = shape_of(%var_5827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(%var_5827, dtype="bool") /* ty=Tensor[(10, 6, 12), bool] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%834, %835) /* ty=Tensor[(10, 6, 12), bool] */
}

def @func_4853() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
  %836 = @func_4736() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %837 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %838 = reshape(%837, newshape=[]) /* ty=bool */;
  %839 = @func_695(%838) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */;
  %840 = cast(meta[relay.Constant][46] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %841 = reshape(%840, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
  %842 = @func_1865(%841) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(192, 11), uint8], Tensor[(12, 8, 2), float32], Tensor[(192, 11), float64]) */;
  %843 = %836.0;
  %844 = @func_2827() /* ty=Tensor[(3, 4, 8), float64] */;
  %845 = @func_3932() /* ty=Tensor[(3, 4, 8), float64] */;
  %846 = %839.3;
  %847 = %842.5;
  (%843, %844, %845, %846, True /* ty=bool */, %847, meta[relay.Constant][46] /* ty=Tensor[(192), float32] */)
}

def @func_2655(%var_2632: Tensor[(3, 4, 8), float64], %var_2646: Tensor[(3, 2), float64]) -> (Tensor[(3, 4, 8), int8], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(3, 4, 8), float64]) {
  %848 = @func_2054() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %849 = %848.0;
  %850 = cast(%var_2632, dtype="int8") /* ty=Tensor[(3, 4, 8), int8] */;
  %851 = shape_of(%849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%849, dtype="int8") /* ty=Tensor[(3, 4, 8), int8] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %854 = cast(%var_2646, dtype="float64") /* ty=Tensor[(3, 2), float64] */;
  %855 = reshape(%854, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %856 = @func_2552(%855) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) */;
  %857 = @func_984() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], bool, Tensor[(14, 6, 4), int16], Tensor[(336), int16], Tensor[(3, 4, 8), float64]) */;
  %858 = right_shift(%852, %853) /* ty=Tensor[(3, 4, 8), int8] */;
  %859 = %856.0;
  %860 = %857.5;
  (%858, %859, %var_2646, %860)
}

def @func_2552(%var_2536: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) {
  %861 = @func_2294() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %862 = cast(%var_2536, dtype="float64") /* ty=Tensor[(6), float64] */;
  %863 = reshape(%862, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
  %864 = %861.0;
  %865 = @func_767(%863) /* ty=Tensor[(3, 2), float64] */;
  (%864, %865, %var_2536)
}

def @func_3709() -> Tensor[(3, 4, 8), float64] {
  @func_3134() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_7369() -> Tensor[(3, 4, 8), float64] {
  @func_4051() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_5168() -> (Tensor[(3, 4, 8), float64],) {
  %866 = @func_4003() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %867 = %866.0;
  (%867,)
}

def @func_5293() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32]) {
  %868 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %869 = @func_2380() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64]) */;
  %870 = @func_4853() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */;
  %871 = %868.0;
  %872 = @func_3588() /* ty=Tensor[(3, 4, 8), float64] */;
  %873 = %869.0;
  %874 = %870.5;
  (%871, %872, %873, %874)
}

def @func_8734() -> (Tensor[(3, 4, 8), bool], Tensor[(6, 3, 14), bool]) {
  %875 = @func_5215() /* ty=(Tensor[(3, 4, 8), bool],) */;
  %876 = @func_4374() /* ty=(Tensor[(6, 3, 14), bool], Tensor[(3, 4, 8), float64]) */;
  %877 = %875.0;
  %878 = %876.0;
  (%877, %878)
}

def @func_2716() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) {
  %879 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %880 = @func_1823() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */;
  %881 = %879.1;
  %882 = %880.1;
  (%881, %882)
}

def @func_7452() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 8, 8), bool], Tensor[(576), uint8]) {
  %883 = @func_2457() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32]) */;
  %884 = cast(meta[relay.Constant][47] /* ty=Tensor[(576), uint8] */, dtype="uint8") /* ty=Tensor[(576), uint8] */;
  %885 = reshape(%884, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), uint8] */;
  %886 = @func_5521(%885) /* ty=(Tensor[(9, 8, 8), bool],) */;
  %887 = @func_7084() /* ty=Tensor[(3, 4, 8), float64] */;
  %888 = %883.0;
  %889 = %886.0;
  (%887, %888, %889, meta[relay.Constant][47] /* ty=Tensor[(576), uint8] */)
}

def @func_984() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], bool, Tensor[(14, 6, 4), int16], Tensor[(336), int16], Tensor[(3, 4, 8), float64]) {
  %890 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %891 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %892 = reshape(%891, newshape=[]) /* ty=bool */;
  %893 = @func_695(%892) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */;
  %894 = cast(meta[relay.Constant][48] /* ty=Tensor[(336), int16] */, dtype="int16") /* ty=Tensor[(336), int16] */;
  %895 = reshape(%894, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int16] */;
  %896 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %897 = %890.1;
  %898 = %893.0;
  %899 = @func_828(%895) /* ty=Tensor[(14, 6, 4), int16] */;
  %900 = %896.0;
  (%897, %898, False /* ty=bool */, %899, meta[relay.Constant][48] /* ty=Tensor[(336), int16] */, %900)
}

def @func_8995() -> (Tensor[(3, 4, 8), float64],) {
  %901 = @func_8903() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %902 = %901.0;
  (%902,)
}

def @func_2891() -> (Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %903 = @func_2294() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %904 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %905 = reshape(%904, newshape=[]) /* ty=bool */;
  %906 = @func_916(%905) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(6, 6, 13), bool]) */;
  %907 = %906.2;
  %908 = cast(%907, dtype="bool") /* ty=Tensor[(6, 6, 13), bool] */;
  %909 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %910 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %911 = @func_1674() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %912 = %903.0;
  %913 = less(%908, %909) /* ty=Tensor[(6, 6, 13), bool] */;
  %914 = %910.0;
  %915 = %911.0;
  (%912, %913, %914, %915)
}

def @func_8699() -> Tensor[(3, 4, 8), float64] {
  @func_7084() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_8201() -> (Tensor[(3, 4, 8), float64],) {
  %916 = @func_3008() /* ty=Tensor[(3, 4, 8), float64] */;
  (%916,)
}

def @func_6505() -> Tensor[(3, 4, 8), float64] {
  %917 = @func_2054() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %917.0
}

def @func_3134() -> Tensor[(3, 4, 8), float64] {
  %918 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %918.1
}

def @func_257() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %919 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %920 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %921 = %919.2;
  %922 = %920.1;
  (%921, %922)
}

def @func_1967(%var_1930: Tensor[(13, 1, 1), uint32], %var_1931: Tensor[(13, 1, 9), uint32]) -> (Tensor[(13, 1, 9), bool], Tensor[(3, 4, 8), float64]) {
  %923 = cast(%var_1930, dtype="bool") /* ty=Tensor[(13, 1, 1), bool] */;
  %924 = cast(%var_1931, dtype="bool") /* ty=Tensor[(13, 1, 9), bool] */;
  %925 = greater_equal(%923, %924) /* ty=Tensor[(13, 1, 9), bool] */;
  %926 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%925, %926)
}

def @func_5433() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64], Tensor[(91), float64]) {
  %927 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %928 = cast(meta[relay.Constant][49] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %929 = reshape(%928, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %930 = @func_5134(%929) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64]) */;
  %931 = @func_3008() /* ty=Tensor[(3, 4, 8), float64] */;
  %932 = @func_1452() /* ty=Tensor[(3, 4, 8), float64] */;
  %933 = %927.0;
  %934 = %930.3;
  (%931, %932, %933, %934, meta[relay.Constant][49] /* ty=Tensor[(91), float64] */)
}

def @func_4390(%var_4383: float32, %var_4384: Tensor[(15, 7, 12), float32]) -> (Tensor[(15, 7, 12), float32],) {
  %935 = cast(%var_4383, dtype="float32") /* ty=float32 */;
  %936 = cast(%var_4384, dtype="float32") /* ty=Tensor[(15, 7, 12), float32] */;
  %937 = floor_divide(%935, %936) /* ty=Tensor[(15, 7, 12), float32] */;
  (%937,)
}

def @func_4252(%var_4234: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(192), float32]) {
  %938 = cast(%var_4234, dtype="float64") /* ty=Tensor[(6), float64] */;
  %939 = cast(meta[relay.Constant][50] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %940 = reshape(%938, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %941 = reshape(%939, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %942 = @func_1246(%940, %941) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6, 6, 13), bool], bool, Tensor[(468, 1), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), bool]) */;
  %943 = @func_2793() /* ty=Tensor[(3, 4, 8), bool] */;
  %944 = %942.3;
  (%943, %944, %var_4234, meta[relay.Constant][50] /* ty=Tensor[(192), float32] */)
}

def @func_8831() -> Tensor[(3, 4, 8), float64] {
  @func_6505() /* ty=Tensor[(3, 4, 8), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3136() -> Tensor[(3, 4, 8), float64] {
  @func_3134() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_7029(%var_7027: Tensor[(3, 2), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(56), bool], Tensor[(3, 2), float64]) {
  @func_7026(%var_7027) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(56), bool], Tensor[(3, 2), float64]) */
}

def @func_5294() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32]) {
  %7 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32]) {
    %0 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %1 = @func_2380() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64]) */;
    %2 = @func_4853() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */;
    %3 = %0.0;
    %4 = @func_3588() /* ty=Tensor[(3, 4, 8), float64] */;
    %5 = %1.0;
    %6 = %2.5;
    (%3, %4, %5, %6)
  };
  %7() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32]) */
}

def @func_7086() -> Tensor[(3, 4, 8), float64] {
  @func_7084() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_323() -> (Tensor[(3, 4, 8), float64],) {
  %9 = fn () -> (Tensor[(3, 4, 8), float64],) {
    %8 = @func_307() /* ty=Tensor[(3, 4, 8), float64] */;
    (%8,)
  };
  %9() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_5926() -> Tensor[(3, 4, 8), float64] {
  @func_5924() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_8701() -> Tensor[(3, 4, 8), float64] {
  @func_8699() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_6610() -> (Tensor[(3, 4, 8), float64],) {
  %12 = fn () -> (Tensor[(3, 4, 8), float64],) {
    %10 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %11 = %10.1;
    (%11,)
  };
  %12() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_8893(%var_8841: Tensor[(16, 2, 13), int16], %var_8850: Tensor[(16, 2, 13), int16]) -> (Tensor[(16, 2, 13), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(120), float32]) {
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 2, 13), int16] */, dtype="int16") /* ty=Tensor[(16, 2, 13), int16] */;
  %14 = shape_of(%var_8841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%var_8841, dtype="int16") /* ty=Tensor[(16, 2, 13), int16] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %17 = bitwise_xor(%15, %16) /* ty=Tensor[(16, 2, 13), int16] */;
  %18 = cast(%var_8850, dtype="float32") /* ty=Tensor[(16, 2, 13), float32] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="float32") /* ty=Tensor[(16, 2, 13), float32] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %22 = @func_4736() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %23 = @func_2294() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %24 = @func_1674() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %26 = reshape(%25, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
  %27 = @func_4613(%26) /* ty=(Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) */;
  %28 = mod(%20, %21) /* ty=Tensor[(16, 2, 13), float32] */;
  %29 = %22.0;
  %30 = %23.0;
  %31 = %24.1;
  %32 = %27.2;
  (%28, %29, %30, %31, %32, meta[relay.Constant][1] /* ty=Tensor[(120), float32] */)
}

def @func_5905(%var_5904: Tensor[(6, 10, 8), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(6, 10, 8), float32]) {
  %41 = fn (%var_5886: Tensor[(6, 10, 8), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(6, 10, 8), float32]) {
    %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 10, 8), float64] */, dtype="bool") /* ty=Tensor[(6, 10, 8), bool] */;
    %34 = shape_of(%var_5886, dtype="int32") /* ty=Tensor[(3), int32] */;
    %35 = cast(%var_5886, dtype="bool") /* ty=Tensor[(6, 10, 8), bool] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %37 = not_equal(%35, %36) /* ty=Tensor[(6, 10, 8), bool] */;
    %38 = cast(%37, dtype="float32") /* ty=Tensor[(6, 10, 8), float32] */;
    %39 = @func_4051() /* ty=Tensor[(3, 4, 8), float64] */;
    %40 = sinh(%38) /* ty=Tensor[(6, 10, 8), float32] */;
    (%39, %40)
  };
  %41(%var_5904) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 10, 8), float32]) */
}

def @func_6861() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  @func_6859() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_8203() -> (Tensor[(3, 4, 8), float64],) {
  @func_8201() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_8532() -> (Tensor[(3, 4, 8), bool], Tensor[(1456), uint32], Tensor[(16, 7, 13), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  @func_8530() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(1456), uint32], Tensor[(16, 7, 13), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_2554(%var_2553: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) {
  %47 = fn (%var_2536: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) {
    %42 = @func_2294() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %43 = cast(%var_2536, dtype="float64") /* ty=Tensor[(6), float64] */;
    %44 = reshape(%43, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
    %45 = %42.0;
    %46 = @func_767(%44) /* ty=Tensor[(3, 2), float64] */;
    (%45, %46, %var_2536)
  };
  %47(%var_2553) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) */
}

def @func_8925(%var_8923: Tensor[(9, 1, 1), uint32]) -> Tensor[(9, 1, 1), uint32] {
  @func_8922(%var_8923) /* ty=Tensor[(9, 1, 1), uint32] */
}

def @func_7580() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32]) {
  @func_7578() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32]) */
}

def @func_5885() -> Tensor[(3, 4, 8), float64] {
  @func_5883() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_2585() -> (Tensor[(3, 4, 8), float64],) {
  %49 = fn () -> (Tensor[(3, 4, 8), float64],) {
    %48 = @func_1452() /* ty=Tensor[(3, 4, 8), float64] */;
    (%48,)
  };
  %49() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_7601() -> Tensor[(3, 4, 8), float64] {
  %50 = fn () -> Tensor[(3, 4, 8), float64] {
    @func_4354() /* ty=Tensor[(3, 4, 8), float64] */
  };
  %50() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_4356() -> Tensor[(3, 4, 8), float64] {
  @func_4354() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_4638() -> Tensor[(3, 4, 8), float64] {
  %51 = @func_2606() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %51.0
}

def @func_6554() -> (Tensor[(3, 4, 8), float64], Tensor[(14, 1, 4), float32], Tensor[(56), bool]) {
  %52 = @func_2606() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(56), bool] */, dtype="bool") /* ty=Tensor[(56), bool] */;
  %54 = reshape(%53, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), bool] */;
  %55 = @func_1404(%54) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) */;
  %56 = %52.0;
  %57 = %55.2;
  (%56, %57, meta[relay.Constant][3] /* ty=Tensor[(56), bool] */)
}

def @func_5834(%var_5833: Tensor[(10, 6, 12), bool]) -> Tensor[(10, 6, 12), bool] {
  %62 = fn (%var_5827: Tensor[(10, 6, 12), bool]) -> Tensor[(10, 6, 12), bool] {
    %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 6, 12), bool] */, dtype="bool") /* ty=Tensor[(10, 6, 12), bool] */;
    %59 = shape_of(%var_5827, dtype="int32") /* ty=Tensor[(3), int32] */;
    %60 = cast(%var_5827, dtype="bool") /* ty=Tensor[(10, 6, 12), bool] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%60, %61) /* ty=Tensor[(10, 6, 12), bool] */
  };
  %62(%var_5833) /* ty=Tensor[(10, 6, 12), bool] */
}

def @func_1533() -> (Tensor[(3, 4, 8), float64],) {
  @func_1531() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_5170() -> (Tensor[(3, 4, 8), float64],) {
  @func_5168() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_4616(%var_4614: Tensor[(3, 5, 8), float32]) -> (Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) {
  @func_4613(%var_4614) /* ty=(Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) */
}

def @func_4138() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 1), float64]) {
  %63 = @func_1452() /* ty=Tensor[(3, 4, 8), float64] */;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 1), float64] */, dtype="float64") /* ty=Tensor[(6, 1), float64] */;
  %66 = reshape(%64, newshape=[3, 4, 8]) /* ty=Tensor[(3, 4, 8), float64] */;
  %67 = reshape(%65, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
  %68 = @func_2655(%66, %67) /* ty=(Tensor[(3, 4, 8), int8], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(3, 4, 8), float64]) */;
  %69 = %68.1;
  (%63, %69, meta[relay.Constant][5] /* ty=Tensor[(6, 1), float64] */)
}

def @func_3045() -> (Tensor[(3, 4, 8), float64],) {
  @func_3043() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_4160(%var_4158: Tensor[(13, 13, 1), int64], %var_4159: Tensor[(13, 13, 14), int64]) -> (Tensor[(13, 13, 14), bool],) {
  @func_4156(%var_4158, %var_4159) /* ty=(Tensor[(13, 13, 14), bool],) */
}

def @func_1246(%var_1112: Tensor[(6), float64], %var_1165: Tensor[(192), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6, 6, 13), bool], bool, Tensor[(468, 1), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), bool]) {
  %70 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %71 = %70.0;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %73 = cast(%var_1112, dtype="float64") /* ty=Tensor[(6), float64] */;
  %74 = reshape(%73, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
  %75 = @func_984() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], bool, Tensor[(14, 6, 4), int16], Tensor[(336), int16], Tensor[(3, 4, 8), float64]) */;
  %76 = cast(%var_1112, dtype="float64") /* ty=Tensor[(6), float64] */;
  %77 = reshape(%76, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
  %78 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %79 = cast(meta[relay.Constant][6] /* ty=Tensor[(468, 1), bool] */, dtype="bool") /* ty=Tensor[(468, 1), bool] */;
  %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(468, 1), bool] */, dtype="bool") /* ty=Tensor[(468, 1), bool] */;
  %81 = cast(meta[relay.Constant][6] /* ty=Tensor[(468, 1), bool] */, dtype="bool") /* ty=Tensor[(468, 1), bool] */;
  %82 = reshape(%78, newshape=[]) /* ty=bool */;
  %83 = reshape(%79, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %84 = reshape(%80, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %85 = reshape(%81, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %86 = @func_514(%82, %83, %84, %85) /* ty=(Tensor[(6, 6, 13), bool], Tensor[(6, 6, 13), float64], Tensor[(6, 6, 13), float32], Tensor[(6, 6, 13), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64]) */;
  %87 = cast(%var_1165, dtype="float32") /* ty=Tensor[(192), float32] */;
  %88 = reshape(%87, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
  %89 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %90 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %91 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %92 = cast(%var_1165, dtype="float32") /* ty=Tensor[(192), float32] */;
  %93 = reshape(%92, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
  %94 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %95 = reshape(%94, newshape=[]) /* ty=bool */;
  %96 = @func_695(%95) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */;
  %97 = atan(%72) /* ty=Tensor[(3, 4, 8), float64] */;
  %98 = @func_767(%74) /* ty=Tensor[(3, 2), float64] */;
  %99 = %75.1;
  %100 = @func_767(%77) /* ty=Tensor[(3, 2), float64] */;
  %101 = %86.0;
  %102 = @func_375(%88) /* ty=Tensor[(12, 8, 2), float32] */;
  %103 = %89.0;
  %104 = %90.0;
  %105 = %91.2;
  %106 = @func_375(%93) /* ty=Tensor[(12, 8, 2), float32] */;
  %107 = %96.6;
  (%97, %98, %var_1112, %99, %100, %101, False /* ty=bool */, meta[relay.Constant][6] /* ty=Tensor[(468, 1), bool] */, %102, %var_1165, %103, %104, %105, %106, %107)
}

def @func_5434() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64], Tensor[(91), float64]) {
  %116 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64], Tensor[(91), float64]) {
    %108 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
    %110 = reshape(%109, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
    %111 = @func_5134(%110) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64]) */;
    %112 = @func_3008() /* ty=Tensor[(3, 4, 8), float64] */;
    %113 = @func_1452() /* ty=Tensor[(3, 4, 8), float64] */;
    %114 = %108.0;
    %115 = %111.3;
    (%112, %113, %114, %115, meta[relay.Constant][7] /* ty=Tensor[(91), float64] */)
  };
  %116() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64], Tensor[(91), float64]) */
}

def @main() -> (Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(?, 16, 13), float32], Tensor[(?, 16, 13), float64]) {
  %117 = @func_4737() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %118 = @func_5216() /* ty=(Tensor[(3, 4, 8), bool],) */;
  %119 = @func_259() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %120 = cast(meta[relay.Constant][9] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %121 = cast(meta[relay.Constant][8] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %122 = reshape(%120, newshape=[1, 16, 13]) /* ty=Tensor[(1, 16, 13), float64] */;
  %123 = reshape(%121, newshape=[4, 48]) /* ty=Tensor[(4, 48), float32] */;
  %124 = @func_8664(%122, %123) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(?, 16, 13), float32], Tensor[(3, 4, 8), float64], Tensor[(4, 48), float32], Tensor[(1, 16, 13), float32]) */;
  %125 = %124.5;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(1, 16, 13), float32] */;
  %127 = log(%126) /* ty=Tensor[(1, 16, 13), float32] */;
  %128 = cast(%125, dtype="bool") /* ty=Tensor[(1, 16, 13), bool] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%127, dtype="bool") /* ty=Tensor[(1, 16, 13), bool] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %132 = logical_or(%130, %131) /* ty=Tensor[(?, 16, 13), bool] */;
  %133 = cast(%125, dtype="float32") /* ty=Tensor[(1, 16, 13), float32] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="float32") /* ty=Tensor[(?, 16, 13), float32] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(208), float64] */, dtype="int64") /* ty=Tensor[(208), int64] */;
  %138 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%125, dtype="int64") /* ty=Tensor[(1, 16, 13), int64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %141 = multiply(%139, %140) /* ty=Tensor[(?, 16, 13), int64] */;
  %142 = cast(%141, dtype="uint8") /* ty=Tensor[(?, 16, 13), uint8] */;
  %143 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%127, dtype="uint8") /* ty=Tensor[(1, 16, 13), uint8] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %146 = logical_xor(%144, %145) /* ty=Tensor[(?, 16, 13), uint8] */;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(?, 16, 13), float64] */;
  %148 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%132, dtype="float64") /* ty=Tensor[(?, 16, 13), float64] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %151 = %117.0;
  %152 = %118.0;
  %153 = %119.1;
  %154 = minimum(%135, %136) /* ty=Tensor[(?, 16, 13), float32] */;
  %155 = divide(%149, %150) /* ty=Tensor[(?, 16, 13), float64] */;
  (%151, meta[relay.Constant][8] /* ty=Tensor[(192), float32] */, %152, %153, %154, %155)
}

def @func_3009() -> Tensor[(3, 4, 8), float64] {
  %157 = fn () -> Tensor[(3, 4, 8), float64] {
    %156 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %156.0
  };
  %157() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_5521(%var_5514: Tensor[(9, 8, 8), uint8]) -> (Tensor[(9, 8, 8), bool],) {
  %158 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 1, 8), uint8] */, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %159 = cast(%var_5514, dtype="bool") /* ty=Tensor[(9, 8, 8), bool] */;
  %160 = not_equal(%158, %159) /* ty=Tensor[(9, 8, 8), bool] */;
  (%160,)
}

def @func_5821() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %173 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %161 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %162 = cast(meta[relay.Constant][11] /* ty=Tensor[(56), bool] */, dtype="bool") /* ty=Tensor[(56), bool] */;
    %163 = reshape(%162, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), bool] */;
    %164 = @func_1404(%163) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) */;
    %165 = @func_1550() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %166 = @func_5168() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %167 = @func_4536() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %168 = %161.0;
    %169 = %164.3;
    %170 = %165.0;
    %171 = %166.0;
    %172 = %167.0;
    (%168, %169, meta[relay.Constant][11] /* ty=Tensor[(56), bool] */, %170, %171, %172)
  };
  %173() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_5511(%var_5509: Tensor[(11, 3, 6), float32]) -> (Tensor[(11, 3, 6), bool], Tensor[(3, 4, 8), float64], Tensor[(11, 3, 6), int16]) {
  @func_5508(%var_5509) /* ty=(Tensor[(11, 3, 6), bool], Tensor[(3, 4, 8), float64], Tensor[(11, 3, 6), int16]) */
}

def @func_7769() -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
  %179 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
    %174 = @func_3111() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %175 = cast(meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %176 = reshape(%175, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
    %177 = %174.0;
    %178 = @func_375(%176) /* ty=Tensor[(12, 8, 2), float32] */;
    (%177, %178, meta[relay.Constant][12] /* ty=Tensor[(192), float32] */)
  };
  %179() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */
}

def @func_8027(%var_8025: Tensor[(9, 3, 3), uint16]) -> (Tensor[(9, 3, 3), uint8], Tensor[(3, 4, 8), float64]) {
  @func_8024(%var_8025) /* ty=(Tensor[(9, 3, 3), uint8], Tensor[(3, 4, 8), float64]) */
}

def @func_3867(%var_3866: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(6), float64]) {
  %189 = fn (%var_3860: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(6), float64]) {
    %180 = @func_3043() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %181 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %182 = cast(%var_3860, dtype="float64") /* ty=Tensor[(6), float64] */;
    %183 = reshape(%182, newshape=[6]) /* ty=Tensor[(6), float64] */;
    %184 = @func_2552(%183) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) */;
    %185 = %180.0;
    %186 = @func_3134() /* ty=Tensor[(3, 4, 8), float64] */;
    %187 = %181.1;
    %188 = %184.2;
    (%185, %186, %187, %188, %var_3860)
  };
  %189(%var_3866) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(6), float64]) */
}

def @func_8433(%var_8420: Tensor[(192), float32]) -> (Tensor[(7, 11), float64], Tensor[(192), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %190 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 11), float64] */;
  %191 = cast(%var_8420, dtype="float32") /* ty=Tensor[(192), float32] */;
  %192 = reshape(%191, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %193 = @func_7647(%192) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(6), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) */;
  %194 = @func_6859() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %195 = cosh(%190) /* ty=Tensor[(7, 11), float64] */;
  %196 = %193.3;
  %197 = @func_3709() /* ty=Tensor[(3, 4, 8), float64] */;
  %198 = %194.1;
  (%195, %196, %var_8420, %197, %198)
}

def @func_8787() -> (Tensor[(8, 12, 5), float32], Tensor[(3, 4, 8), float64]) {
  %202 = fn () -> (Tensor[(8, 12, 5), float32], Tensor[(3, 4, 8), float64]) {
    %199 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %200 = cosh(%199) /* ty=Tensor[(8, 12, 5), float32] */;
    %201 = @func_1316() /* ty=Tensor[(3, 4, 8), float64] */;
    (%200, %201)
  };
  %202() /* ty=(Tensor[(8, 12, 5), float32], Tensor[(3, 4, 8), float64]) */
}

def @func_7820(%var_7817: Tensor[(5, 4, 1), int16], %var_7818: Tensor[(1274), float32], %var_7819: Tensor[(6), float64]) -> (Tensor[(5, 4, 7), int16], Tensor[(3, 4, 8), float64], Tensor[(14, 7, 13), float32], Tensor[(1274), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(5, 4, 6), uint8]) {
  %221 = fn (%var_7781: Tensor[(5, 4, 1), int16], %var_7801: Tensor[(1274), float32], %var_7802: Tensor[(6), float64]) -> (Tensor[(5, 4, 7), int16], Tensor[(3, 4, 8), float64], Tensor[(14, 7, 13), float32], Tensor[(1274), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(5, 4, 6), uint8]) {
    %203 = cast(%var_7781, dtype="int16") /* ty=Tensor[(5, 4, 1), int16] */;
    %204 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 4, 7), int16] */, dtype="int16") /* ty=Tensor[(5, 4, 7), int16] */;
    %205 = @func_6238() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(91), float64]) */;
    %206 = cast(%var_7801, dtype="float32") /* ty=Tensor[(1274), float32] */;
    %207 = cast(%var_7802, dtype="float64") /* ty=Tensor[(6), float64] */;
    %208 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %209 = reshape(%206, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), float32] */;
    %210 = reshape(%207, newshape=[1, 6]) /* ty=Tensor[(1, 6), float64] */;
    %211 = reshape(%208, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %212 = @func_2130(%209, %210, %211) /* ty=(Tensor[(14, 7, 13), float32], Tensor[(14, 6, 4), int16], Tensor[(24, 14), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(1, 6), float64], Tensor[(192), float32]) */;
    %213 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %214 = cast(%var_7802, dtype="uint8") /* ty=Tensor[(6), uint8] */;
    %215 = cast(%var_7781, dtype="uint8") /* ty=Tensor[(5, 4, 1), uint8] */;
    %216 = multiply(%203, %204) /* ty=Tensor[(5, 4, 7), int16] */;
    %217 = %205.0;
    %218 = %212.0;
    %219 = %213.0;
    %220 = bitwise_or(%214, %215) /* ty=Tensor[(5, 4, 6), uint8] */;
    (%216, %217, %218, %var_7801, meta[relay.Constant][16] /* ty=Tensor[(192), float32] */, %219, %220)
  };
  %221(%var_7817, %var_7818, %var_7819) /* ty=(Tensor[(5, 4, 7), int16], Tensor[(3, 4, 8), float64], Tensor[(14, 7, 13), float32], Tensor[(1274), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(5, 4, 6), uint8]) */
}

def @func_3434(%var_3432: Tensor[(5, 15, 2), float32], %var_3433: Tensor[(5, 15, 2), float32]) -> Tensor[(5, 15, 2), float32] {
  @func_3430(%var_3432, %var_3433) /* ty=Tensor[(5, 15, 2), float32] */
}

def @func_5651() -> Tensor[(3, 4, 8), float64] {
  @func_5649() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_5508(%var_5474: Tensor[(11, 3, 6), float32]) -> (Tensor[(11, 3, 6), bool], Tensor[(3, 4, 8), float64], Tensor[(11, 3, 6), int16]) {
  %222 = @func_3878() /* ty=(Tensor[(11, 3, 6), float64], Tensor[(11, 3, 6), float32]) */;
  %223 = %222.1;
  %224 = cast(%var_5474, dtype="bool") /* ty=Tensor[(11, 3, 6), bool] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="bool") /* ty=Tensor[(11, 3, 6), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %228 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 3, 6), float32] */, dtype="int16") /* ty=Tensor[(11, 3, 6), int16] */;
  %229 = shape_of(%var_5474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%var_5474, dtype="int16") /* ty=Tensor[(11, 3, 6), int16] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %232 = greater(%226, %227) /* ty=Tensor[(11, 3, 6), bool] */;
  %233 = @func_3709() /* ty=Tensor[(3, 4, 8), float64] */;
  %234 = maximum(%230, %231) /* ty=Tensor[(11, 3, 6), int16] */;
  (%232, %233, %234)
}

def @func_4525(%var_4524: Tensor[(8, 9, 5), float32]) -> (Tensor[(8, 9, 5), float32],) {
  %240 = fn (%var_4516: Tensor[(8, 9, 5), float32]) -> (Tensor[(8, 9, 5), float32],) {
    %235 = cast(%var_4516, dtype="float32") /* ty=Tensor[(8, 9, 5), float32] */;
    %236 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(8, 9, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %237 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 9, 5), float32] */;
    %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %239 = floor_divide(%237, %238) /* ty=Tensor[(8, 9, 5), float32] */;
    (%239,)
  };
  %240(%var_4524) /* ty=(Tensor[(8, 9, 5), float32],) */
}

def @func_3767() -> (Tensor[(3, 4, 8), float64],) {
  @func_3765() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_2295() -> (Tensor[(3, 4, 8), float64],) {
  %243 = fn () -> (Tensor[(3, 4, 8), float64],) {
    %241 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %242 = %241.1;
    (%242,)
  };
  %243() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_307() -> Tensor[(3, 4, 8), float64] {
  %244 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %245 = cast(%244, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %246 = atanh(%245) /* ty=Tensor[(3, 4, 8), float64] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  log10(%247) /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_6281() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) {
  @func_6279() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) */
}

def @func_1552() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  @func_1550() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_770(%var_768: Tensor[(3, 2), float64]) -> Tensor[(3, 2), float64] {
  @func_767(%var_768) /* ty=Tensor[(3, 2), float64] */
}

def @func_514(%var_397: bool, %var_398: Tensor[(6, 6, 13), bool], %var_408: Tensor[(6, 6, 13), bool], %var_468: Tensor[(6, 6, 13), bool]) -> (Tensor[(6, 6, 13), bool], Tensor[(6, 6, 13), float64], Tensor[(6, 6, 13), float32], Tensor[(6, 6, 13), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64]) {
  %248 = cast(%var_397, dtype="bool") /* ty=bool */;
  %249 = cast(%var_398, dtype="bool") /* ty=Tensor[(6, 6, 13), bool] */;
  %250 = cast(%var_408, dtype="float64") /* ty=Tensor[(6, 6, 13), float64] */;
  %251 = shape_of(%var_398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%var_398, dtype="float64") /* ty=Tensor[(6, 6, 13), float64] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %254 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 6, 13), bool] */, dtype="float32") /* ty=Tensor[(6, 6, 13), float32] */;
  %255 = shape_of(%var_408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%var_408, dtype="float32") /* ty=Tensor[(6, 6, 13), float32] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %258 = cast(%var_468, dtype="int16") /* ty=Tensor[(6, 6, 13), int16] */;
  %259 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(6, 6, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 6, 13), bool] */, dtype="int16") /* ty=Tensor[(6, 6, 13), int16] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %262 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %263 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 6, 13), bool] */, dtype="float64") /* ty=Tensor[(6, 6, 13), float64] */;
  %264 = asin(%263) /* ty=Tensor[(6, 6, 13), float64] */;
  %265 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 6, 13), bool] */, dtype="float64") /* ty=Tensor[(6, 6, 13), float64] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="float64") /* ty=Tensor[(6, 6, 13), float64] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %269 = logical_or(%248, %249) /* ty=Tensor[(6, 6, 13), bool] */;
  %270 = mod(%252, %253) /* ty=Tensor[(6, 6, 13), float64] */;
  %271 = divide(%256, %257) /* ty=Tensor[(6, 6, 13), float32] */;
  %272 = bitwise_or(%260, %261) /* ty=Tensor[(6, 6, 13), int16] */;
  %273 = %262.1;
  %274 = @func_307() /* ty=Tensor[(3, 4, 8), float64] */;
  %275 = add(%267, %268) /* ty=Tensor[(6, 6, 13), float64] */;
  (%269, %270, %271, %272, %273, %274, %275)
}

def @func_1060(%var_1059: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) {
  %281 = fn (%var_1037: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) {
    %276 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %277 = cast(%var_1037, dtype="float64") /* ty=Tensor[(6), float64] */;
    %278 = reshape(%277, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
    %279 = %276.0;
    %280 = @func_767(%278) /* ty=Tensor[(3, 2), float64] */;
    (%279, %280, %var_1037)
  };
  %281(%var_1059) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) */
}

def @func_801(%var_800: Tensor[(192), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
  %287 = fn (%var_783: Tensor[(192), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
    %282 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %283 = cast(%var_783, dtype="float32") /* ty=Tensor[(192), float32] */;
    %284 = reshape(%283, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
    %285 = %282.0;
    %286 = @func_375(%284) /* ty=Tensor[(12, 8, 2), float32] */;
    (%285, %286, %var_783)
  };
  %287(%var_800) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */
}

def @func_5751() -> (Tensor[(3, 4, 8), float64],) {
  %288 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %289 = %288.0;
  (%289,)
}

def @func_2757() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %290 = @func_2584() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %291 = @func_2380() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64]) */;
  %292 = %290.0;
  %293 = %291.1;
  (%292, %293)
}

def @func_3765() -> (Tensor[(3, 4, 8), float64],) {
  %294 = @func_3709() /* ty=Tensor[(3, 4, 8), float64] */;
  (%294,)
}

def @func_8734() -> (Tensor[(3, 4, 8), bool], Tensor[(6, 3, 14), bool]) {
  %295 = @func_5215() /* ty=(Tensor[(3, 4, 8), bool],) */;
  %296 = @func_4374() /* ty=(Tensor[(6, 3, 14), bool], Tensor[(3, 4, 8), float64]) */;
  %297 = %295.0;
  %298 = %296.0;
  (%297, %298)
}

def @func_8960(%var_8958: Tensor[(3, 1, 11), uint8], %var_8959: Tensor[(3, 1, 11), uint8]) -> Tensor[(3, ?, 11), uint8] {
  %303 = fn (%var_8946: Tensor[(3, 1, 11), uint8], %var_8947: Tensor[(3, 1, 11), uint8]) -> Tensor[(3, ?, 11), uint8] {
    %299 = cast(%var_8947, dtype="uint8") /* ty=Tensor[(3, 1, 11), uint8] */;
    %300 = shape_of(%var_8946, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%var_8946, dtype="uint8") /* ty=Tensor[(3, 1, 11), uint8] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_or(%301, %302) /* ty=Tensor[(3, ?, 11), uint8] */
  };
  %303(%var_8958, %var_8959) /* ty=Tensor[(3, ?, 11), uint8] */
}

def @func_7146() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  @func_7144() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_7310() -> (Tensor[(3, 4, 8), float64],) {
  %306 = fn () -> (Tensor[(3, 4, 8), float64],) {
    %304 = @func_6932() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %305 = %304.1;
    (%305,)
  };
  %306() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_1967(%var_1930: Tensor[(13, 1, 1), uint32], %var_1931: Tensor[(13, 1, 9), uint32]) -> (Tensor[(13, 1, 9), bool], Tensor[(3, 4, 8), float64]) {
  %307 = cast(%var_1930, dtype="bool") /* ty=Tensor[(13, 1, 1), bool] */;
  %308 = cast(%var_1931, dtype="bool") /* ty=Tensor[(13, 1, 9), bool] */;
  %309 = greater_equal(%307, %308) /* ty=Tensor[(13, 1, 9), bool] */;
  %310 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%309, %310)
}

def @func_5036() -> (Tensor[(3, 4, 8), float64],) {
  %313 = fn () -> (Tensor[(3, 4, 8), float64],) {
    %311 = @func_2757() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %312 = %311.0;
    (%312,)
  };
  %313() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_2458() -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32]) {
  %318 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32]) {
    %314 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %315 = @func_1823() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */;
    %316 = %314.0;
    %317 = %315.2;
    (%316, %317)
  };
  %318() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32]) */
}

def @func_1676() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  @func_1674() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_4438() -> Tensor[(3, 4, 8), bool] {
  @func_4436() /* ty=Tensor[(3, 4, 8), bool] */
}

def @func_1404(%var_1350: Tensor[(14, 1, 4), bool]) -> (Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) {
  %319 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %320 = reshape(%319, newshape=[]) /* ty=bool */;
  %321 = @func_916(%320) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(6, 6, 13), bool]) */;
  %322 = cast(False /* ty=bool */, dtype="float32") /* ty=float32 */;
  %323 = cast(%var_1350, dtype="float32") /* ty=Tensor[(14, 1, 4), float32] */;
  %324 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %325 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %326 = reshape(%325, newshape=[]) /* ty=bool */;
  %327 = @func_695(%326) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */;
  %328 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %329 = reshape(%328, newshape=[]) /* ty=bool */;
  %330 = @func_695(%329) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */;
  %331 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %332 = %321.2;
  %333 = floor_divide(%322, %323) /* ty=Tensor[(14, 1, 4), float32] */;
  %334 = @func_307() /* ty=Tensor[(3, 4, 8), float64] */;
  %335 = %324.0;
  %336 = %327.5;
  %337 = %330.2;
  (%331, %332, %333, %334, %335, %336, %337)
}

def @func_3878() -> (Tensor[(11, 3, 6), float64], Tensor[(11, 3, 6), float32]) {
  %338 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(11, 3, 6), float64] */;
  %339 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 3, 6), float64] */, dtype="float32") /* ty=Tensor[(11, 3, 6), float32] */;
  %340 = sin(%338) /* ty=Tensor[(11, 3, 6), float64] */;
  %341 = rsqrt(%339) /* ty=Tensor[(11, 3, 6), float32] */;
  (%340, %341)
}

def @func_2892() -> (Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %355 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %342 = @func_2294() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %343 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %344 = reshape(%343, newshape=[]) /* ty=bool */;
    %345 = @func_916(%344) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(6, 6, 13), bool]) */;
    %346 = %345.2;
    %347 = cast(%346, dtype="bool") /* ty=Tensor[(6, 6, 13), bool] */;
    %348 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %349 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %350 = @func_1674() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %351 = %342.0;
    %352 = less(%347, %348) /* ty=Tensor[(6, 6, 13), bool] */;
    %353 = %349.0;
    %354 = %350.0;
    (%351, %352, %353, %354)
  };
  %355() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_830(%var_829: Tensor[(14, 6, 4), int16]) -> Tensor[(14, 6, 4), int16] {
  %360 = fn (%var_812: Tensor[(14, 6, 4), int16]) -> Tensor[(14, 6, 4), int16] {
    %356 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 6, 4), int16] */, dtype="int16") /* ty=Tensor[(14, 6, 4), int16] */;
    %357 = shape_of(%var_812, dtype="int32") /* ty=Tensor[(3), int32] */;
    %358 = cast(%var_812, dtype="int16") /* ty=Tensor[(14, 6, 4), int16] */;
    %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    add(%358, %359) /* ty=Tensor[(14, 6, 4), int16] */
  };
  %360(%var_829) /* ty=Tensor[(14, 6, 4), int16] */
}

def @func_2382() -> (Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64]) {
  @func_2380() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64]) */
}

def @func_5883() -> Tensor[(3, 4, 8), float64] {
  @func_2827() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_6656(%var_6652: Tensor[(120, 4), bool]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(120, 4), bool]) {
  %361 = @func_4003() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %362 = cast(%var_6652, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %363 = reshape(%362, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), bool] */;
  %364 = @func_5627(%363) /* ty=(Tensor[(6, 5, 16), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 5, 16), float32]) */;
  %365 = %361.0;
  %366 = %364.1;
  (%365, %366, %var_6652)
}

def @func_7578() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32]) {
  %367 = @func_7497() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float32]) */;
  %368 = @func_7084() /* ty=Tensor[(3, 4, 8), float64] */;
  %369 = %367.1;
  (%368, %369)
}

def @func_7369() -> Tensor[(3, 4, 8), float64] {
  @func_4051() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_7650(%var_7648: Tensor[(192), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(6), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) {
  @func_7647(%var_7648) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(6), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) */
}

def @func_7701() -> Tensor[(3, 4, 8), float64] {
  %370 = fn () -> Tensor[(3, 4, 8), float64] {
    @func_3709() /* ty=Tensor[(3, 4, 8), float64] */
  };
  %370() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_8398() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %373 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %371 = @func_1452() /* ty=Tensor[(3, 4, 8), float64] */;
    %372 = @func_7600() /* ty=Tensor[(3, 4, 8), float64] */;
    (%371, %372)
  };
  %373() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_9072() -> Tensor[(3, 4, 8), float64] {
  @func_9070() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_41() -> Tensor[(3, 4, 8), float64] {
  %377 = fn () -> Tensor[(3, 4, 8), float64] {
    %374 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
    %375 = sin(%374) /* ty=Tensor[(3, 4, 8), float64] */;
    %376 = cast(%375, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
    tan(%376) /* ty=Tensor[(3, 4, 8), float64] */
  };
  %377() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_2828() -> Tensor[(3, 4, 8), float64] {
  %379 = fn () -> Tensor[(3, 4, 8), float64] {
    %378 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %378.0
  };
  %379() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_520(%var_516: bool, %var_517: Tensor[(6, 6, 13), bool], %var_518: Tensor[(6, 6, 13), bool], %var_519: Tensor[(6, 6, 13), bool]) -> (Tensor[(6, 6, 13), bool], Tensor[(6, 6, 13), float64], Tensor[(6, 6, 13), float32], Tensor[(6, 6, 13), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64]) {
  @func_514(%var_516, %var_517, %var_518, %var_519) /* ty=(Tensor[(6, 6, 13), bool], Tensor[(6, 6, 13), float64], Tensor[(6, 6, 13), float32], Tensor[(6, 6, 13), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64]) */
}

def @func_767(%var_756: Tensor[(3, 2), float64]) -> Tensor[(3, 2), float64] {
  %380 = cast(%var_756, dtype="float64") /* ty=Tensor[(3, 2), float64] */;
  asinh(%380) /* ty=Tensor[(3, 2), float64] */
}

def @func_3043() -> (Tensor[(3, 4, 8), float64],) {
  %381 = @func_2757() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %382 = %381.1;
  (%382,)
}

def @func_7371() -> Tensor[(3, 4, 8), float64] {
  @func_7369() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_2658(%var_2656: Tensor[(3, 4, 8), float64], %var_2657: Tensor[(3, 2), float64]) -> (Tensor[(3, 4, 8), int8], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(3, 4, 8), float64]) {
  %396 = fn (%var_2632: Tensor[(3, 4, 8), float64], %var_2646: Tensor[(3, 2), float64]) -> (Tensor[(3, 4, 8), int8], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(3, 4, 8), float64]) {
    %383 = @func_2054() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %384 = %383.0;
    %385 = cast(%var_2632, dtype="int8") /* ty=Tensor[(3, 4, 8), int8] */;
    %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
    %387 = cast(%384, dtype="int8") /* ty=Tensor[(3, 4, 8), int8] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %389 = cast(%var_2646, dtype="float64") /* ty=Tensor[(3, 2), float64] */;
    %390 = reshape(%389, newshape=[6]) /* ty=Tensor[(6), float64] */;
    %391 = @func_2552(%390) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64]) */;
    %392 = @func_984() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], bool, Tensor[(14, 6, 4), int16], Tensor[(336), int16], Tensor[(3, 4, 8), float64]) */;
    %393 = right_shift(%387, %388) /* ty=Tensor[(3, 4, 8), int8] */;
    %394 = %391.0;
    %395 = %392.5;
    (%393, %394, %var_2646, %395)
  };
  %396(%var_2656, %var_2657) /* ty=(Tensor[(3, 4, 8), int8], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_5168() -> (Tensor[(3, 4, 8), float64],) {
  %397 = @func_4003() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %398 = %397.0;
  (%398,)
}

def @func_2794() -> Tensor[(3, 4, 8), bool] {
  %400 = fn () -> Tensor[(3, 4, 8), bool] {
    %399 = @func_1823() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */;
    %399.1
  };
  %400() /* ty=Tensor[(3, 4, 8), bool] */
}

def @func_3880() -> (Tensor[(11, 3, 6), float64], Tensor[(11, 3, 6), float32]) {
  @func_3878() /* ty=(Tensor[(11, 3, 6), float64], Tensor[(11, 3, 6), float32]) */
}

def @func_375(%var_368: Tensor[(12, 8, 2), float32]) -> Tensor[(12, 8, 2), float32] {
  %401 = cast(%var_368, dtype="float32") /* ty=Tensor[(12, 8, 2), float32] */;
  rsqrt(%401) /* ty=Tensor[(12, 8, 2), float32] */
}

def @func_1499() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %406 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %402 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %403 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %404 = %402.1;
    %405 = %403.0;
    (%404, %405)
  };
  %406() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_5524(%var_5522: Tensor[(9, 8, 8), uint8]) -> (Tensor[(9, 8, 8), bool],) {
  @func_5521(%var_5522) /* ty=(Tensor[(9, 8, 8), bool],) */
}

def @func_2041(%var_2039: Tensor[(56), bool], %var_2040: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 2), float64]) {
  %419 = fn (%var_2026: Tensor[(56), bool], %var_2029: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 2), float64]) {
    %407 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %408 = cast(%var_2026, dtype="bool") /* ty=Tensor[(56), bool] */;
    %409 = reshape(%408, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), bool] */;
    %410 = @func_1404(%409) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) */;
    %411 = cast(%var_2029, dtype="float64") /* ty=Tensor[(6), float64] */;
    %412 = reshape(%411, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
    %413 = cast(%var_2029, dtype="float64") /* ty=Tensor[(6), float64] */;
    %414 = reshape(%413, newshape=[3, 2]) /* ty=Tensor[(3, 2), float64] */;
    %415 = %407.1;
    %416 = %410.0;
    %417 = @func_767(%412) /* ty=Tensor[(3, 2), float64] */;
    %418 = @func_767(%414) /* ty=Tensor[(3, 2), float64] */;
    (%415, %416, %var_2026, %417, %var_2029, %418)
  };
  %419(%var_2039, %var_2040) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 2), float64]) */
}

def @func_6506() -> Tensor[(3, 4, 8), float64] {
  %421 = fn () -> Tensor[(3, 4, 8), float64] {
    %420 = @func_2054() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %420.0
  };
  %421() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_6859() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %422 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %423 = @func_2466() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %424 = %422.0;
  %425 = %423.0;
  (%424, %425)
}

def @func_3934() -> Tensor[(3, 4, 8), float64] {
  @func_3932() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_150() -> (Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_7356() -> Tensor[(11, 3, 6), float32] {
  %427 = fn () -> Tensor[(11, 3, 6), float32] {
    %426 = @func_3878() /* ty=(Tensor[(11, 3, 6), float64], Tensor[(11, 3, 6), float32]) */;
    %426.1
  };
  %427() /* ty=Tensor[(11, 3, 6), float32] */
}

def @func_695(%var_650: bool) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) {
  %428 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %429 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %430 = cast(%var_650, dtype="bool") /* ty=bool */;
  %431 = cast(meta[relay.Constant][23] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %432 = cast(meta[relay.Constant][23] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %433 = cast(meta[relay.Constant][23] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %434 = reshape(%430, newshape=[]) /* ty=bool */;
  %435 = reshape(%431, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %436 = reshape(%432, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %437 = reshape(%433, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
  %438 = @func_514(%434, %435, %436, %437) /* ty=(Tensor[(6, 6, 13), bool], Tensor[(6, 6, 13), float64], Tensor[(6, 6, 13), float32], Tensor[(6, 6, 13), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64]) */;
  %439 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %440 = %439.2;
  %441 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %442 = %441.0;
  %443 = cast(%442, dtype="uint64") /* ty=Tensor[(3, 4, 8), uint64] */;
  %444 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%440, dtype="uint64") /* ty=Tensor[(3, 4, 8), uint64] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %447 = left_shift(%445, %446) /* ty=Tensor[(3, 4, 8), uint64] */;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %449 = asin(%448) /* ty=Tensor[(3, 4, 8), float32] */;
  %450 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %451 = cast(%450, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %452 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%449, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = cast(%449, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %456 = sinh(%455) /* ty=Tensor[(3, 4, 8), float64] */;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %458 = sqrt(%457) /* ty=Tensor[(3, 4, 8), float32] */;
  %459 = cast(%442, dtype="uint32") /* ty=Tensor[(3, 4, 8), uint32] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="uint32") /* ty=Tensor[(3, 4, 8), uint32] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %463 = cast(%442, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %464 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%458, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %467 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %468 = %428.0;
  %469 = %429.0;
  %470 = %438.6;
  %471 = less_equal(%453, %454) /* ty=Tensor[(3, 4, 8), bool] */;
  %472 = bitwise_and(%461, %462) /* ty=Tensor[(3, 4, 8), uint32] */;
  %473 = subtract(%465, %466) /* ty=Tensor[(3, 4, 8), float64] */;
  (%467, %468, %469, %470, %var_650, meta[relay.Constant][23] /* ty=Tensor[(468), bool] */, %471, %472, %473)
}

def @func_8832() -> Tensor[(3, 4, 8), float64] {
  %474 = fn () -> Tensor[(3, 4, 8), float64] {
    @func_6505() /* ty=Tensor[(3, 4, 8), float64] */
  };
  %474() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_6807(%var_6804: uint16, %var_6805: Tensor[(16, 9, 6), uint16], %var_6806: Tensor[(56), bool]) -> (Tensor[(16, 9, 6), uint16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(14, 8, 11), float64], Tensor[(1, 112), float64], Tensor[(1232), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %500 = fn (%var_6732: uint16, %var_6733: Tensor[(16, 9, 6), uint16], %var_6788: Tensor[(56), bool]) -> (Tensor[(16, 9, 6), uint16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(14, 8, 11), float64], Tensor[(1, 112), float64], Tensor[(1232), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %475 = cast(%var_6732, dtype="uint16") /* ty=uint16 */;
    %476 = cast(%var_6733, dtype="uint16") /* ty=Tensor[(16, 9, 6), uint16] */;
    %477 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %478 = @func_5719() /* ty=(Tensor[(3, 4, 8), bool],) */;
    %479 = @func_6609() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %480 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 112), float64] */, dtype="float64") /* ty=Tensor[(1, 112), float64] */;
    %481 = cast(meta[relay.Constant][25] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %482 = reshape(%480, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), float64] */;
    %483 = reshape(%481, newshape=[14, 8, 11]) /* ty=Tensor[(14, 8, 11), float64] */;
    %484 = @func_5358(%482, %483) /* ty=(Tensor[(14, 8, 11), float64],) */;
    %485 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %486 = cast(%var_6788, dtype="bool") /* ty=Tensor[(56), bool] */;
    %487 = reshape(%486, newshape=[14, 1, 4]) /* ty=Tensor[(14, 1, 4), bool] */;
    %488 = @func_1404(%487) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) */;
    %489 = @func_2584() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %490 = @func_3111() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %491 = add(%475, %476) /* ty=Tensor[(16, 9, 6), uint16] */;
    %492 = %477.1;
    %493 = %478.0;
    %494 = %479.0;
    %495 = %484.0;
    %496 = %485.0;
    %497 = %488.3;
    %498 = %489.0;
    %499 = %490.0;
    (%491, %492, %493, %494, %495, meta[relay.Constant][24] /* ty=Tensor[(1, 112), float64] */, meta[relay.Constant][25] /* ty=Tensor[(1232), float64] */, %496, %497, %var_6788, %498, %499)
  };
  %500(%var_6804, %var_6805, %var_6806) /* ty=(Tensor[(16, 9, 6), uint16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(14, 8, 11), float64], Tensor[(1, 112), float64], Tensor[(1232), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_558() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %503 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %501 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
    %502 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
    (%501, %502)
  };
  %503() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_8458() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float32]) {
  %511 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float32]) {
    %504 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %505 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %506 = reshape(%504, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
    %507 = reshape(%505, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
    %508 = @func_7924(%506, %507) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float32], Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) */;
    %509 = @func_7084() /* ty=Tensor[(3, 4, 8), float64] */;
    %510 = %508.4;
    (%509, %510, meta[relay.Constant][26] /* ty=Tensor[(120), float32] */)
  };
  %511() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float32]) */
}

def @func_7498() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float32]) {
  %518 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float32]) {
    %512 = @func_3111() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %513 = cast(meta[relay.Constant][27] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %514 = reshape(%513, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float32] */;
    %515 = @func_4613(%514) /* ty=(Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) */;
    %516 = %512.0;
    %517 = %515.1;
    (%516, %517, meta[relay.Constant][27] /* ty=Tensor[(120), float32] */)
  };
  %518() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float32]) */
}

def @func_8995() -> (Tensor[(3, 4, 8), float64],) {
  %519 = @func_8903() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %520 = %519.0;
  (%520,)
}

def @func_3932() -> Tensor[(3, 4, 8), float64] {
  @func_3008() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_5924() -> Tensor[(3, 4, 8), float64] {
  @func_5336() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_8024(%var_7983: Tensor[(9, 3, 3), uint16]) -> (Tensor[(9, 3, 3), uint8], Tensor[(3, 4, 8), float64]) {
  %521 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 3, 3), uint16] */, dtype="bool") /* ty=Tensor[(9, 3, 3), bool] */;
  %522 = shape_of(%var_7983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%var_7983, dtype="bool") /* ty=Tensor[(9, 3, 3), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = equal(%523, %524) /* ty=Tensor[(9, 3, 3), bool] */;
  %526 = cast(%525, dtype="uint8") /* ty=Tensor[(9, 3, 3), uint8] */;
  %527 = shape_of(%var_7983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%var_7983, dtype="uint8") /* ty=Tensor[(9, 3, 3), uint8] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %530 = @func_2218() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %531 = left_shift(%528, %529) /* ty=Tensor[(9, 3, 3), uint8] */;
  %532 = %530.3;
  (%531, %532)
}

def @func_2056() -> (Tensor[(3, 4, 8), float64],) {
  @func_2054() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_6364(%var_6362: Tensor[(12, 14, 12), int8], %var_6363: Tensor[(12, 14, 12), int8]) -> (Tensor[(12, 14, 12), int8],) {
  %538 = fn (%var_6329: Tensor[(12, 14, 12), int8], %var_6330: Tensor[(12, 14, 12), int8]) -> (Tensor[(12, 14, 12), int8],) {
    %533 = cast(%var_6330, dtype="int8") /* ty=Tensor[(12, 14, 12), int8] */;
    %534 = shape_of(%var_6329, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%var_6329, dtype="int8") /* ty=Tensor[(12, 14, 12), int8] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %537 = add(%535, %536) /* ty=Tensor[(12, 14, 12), int8] */;
    (%537,)
  };
  %538(%var_6362, %var_6363) /* ty=(Tensor[(12, 14, 12), int8],) */
}

def @func_984() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], bool, Tensor[(14, 6, 4), int16], Tensor[(336), int16], Tensor[(3, 4, 8), float64]) {
  %539 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %540 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %541 = reshape(%540, newshape=[]) /* ty=bool */;
  %542 = @func_695(%541) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */;
  %543 = cast(meta[relay.Constant][29] /* ty=Tensor[(336), int16] */, dtype="int16") /* ty=Tensor[(336), int16] */;
  %544 = reshape(%543, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int16] */;
  %545 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %546 = %539.1;
  %547 = %542.0;
  %548 = @func_828(%544) /* ty=Tensor[(14, 6, 4), int16] */;
  %549 = %545.0;
  (%546, %547, False /* ty=bool */, %548, meta[relay.Constant][29] /* ty=Tensor[(336), int16] */, %549)
}

def @func_4640() -> Tensor[(3, 4, 8), float64] {
  @func_4638() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_1674() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %550 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %551 = %550.0;
  %552 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%551, %552)
}

def @func_9070() -> Tensor[(3, 4, 8), float64] {
  %553 = @func_8397() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %553.1
}

def @func_1531() -> (Tensor[(3, 4, 8), float64],) {
  %554 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %555 = %554.1;
  (%555,)
}

def @func_6701() -> Tensor[(3, 4, 8), float64] {
  @func_6699() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_1898() -> (Tensor[(3, 4, 8), float64],) {
  @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_4191(%var_4190: Tensor[(16, 7, 13), uint32]) -> (Tensor[(16, 7, 13), int32],) {
  %566 = fn (%var_4165: Tensor[(16, 7, 13), uint32]) -> (Tensor[(16, 7, 13), int32],) {
    %556 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 7, 13), uint32] */, dtype="uint32") /* ty=Tensor[(16, 7, 13), uint32] */;
    %557 = shape_of(%var_4165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %558 = cast(%var_4165, dtype="uint32") /* ty=Tensor[(16, 7, 13), uint32] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %560 = logical_xor(%558, %559) /* ty=Tensor[(16, 7, 13), uint32] */;
    %561 = cast(%560, dtype="int32") /* ty=Tensor[(16, 7, 13), int32] */;
    %562 = shape_of(%var_4165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(%var_4165, dtype="int32") /* ty=Tensor[(16, 7, 13), int32] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %565 = right_shift(%563, %564) /* ty=Tensor[(16, 7, 13), int32] */;
    (%565,)
  };
  %566(%var_4190) /* ty=(Tensor[(16, 7, 13), int32],) */
}

def @func_8530() -> (Tensor[(3, 4, 8), bool], Tensor[(1456), uint32], Tensor[(16, 7, 13), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %567 = @func_5215() /* ty=(Tensor[(3, 4, 8), bool],) */;
  %568 = cast(meta[relay.Constant][31] /* ty=Tensor[(1456), uint32] */, dtype="uint32") /* ty=Tensor[(1456), uint32] */;
  %569 = reshape(%568, newshape=[16, 7, 13]) /* ty=Tensor[(16, 7, 13), uint32] */;
  %570 = @func_4189(%569) /* ty=(Tensor[(16, 7, 13), int32],) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(16, 7, 13), float64] */;
  %573 = @func_4138() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 1), float64]) */;
  %574 = %567.0;
  %575 = log2(%572) /* ty=Tensor[(16, 7, 13), float64] */;
  %576 = %573.0;
  %577 = @func_1615() /* ty=Tensor[(3, 4, 8), float64] */;
  (%574, meta[relay.Constant][31] /* ty=Tensor[(1456), uint32] */, %575, %576, %577)
}

def @func_698(%var_696: bool) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) {
  @func_695(%var_696) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */
}

def @func_257() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %578 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %579 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %580 = %578.2;
  %581 = %579.1;
  (%580, %581)
}

def @func_7026(%var_7017: Tensor[(3, 2), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(56), bool], Tensor[(3, 2), float64]) {
  %582 = @func_3765() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %583 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %584 = cast(meta[relay.Constant][32] /* ty=Tensor[(56), bool] */, dtype="bool") /* ty=Tensor[(56), bool] */;
  %585 = cast(%var_7017, dtype="float64") /* ty=Tensor[(3, 2), float64] */;
  %586 = reshape(%584, newshape=[56]) /* ty=Tensor[(56), bool] */;
  %587 = reshape(%585, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %588 = @func_2038(%586, %587) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 2), float64]) */;
  %589 = %582.0;
  %590 = %583.1;
  %591 = %588.5;
  (%589, %590, %591, meta[relay.Constant][32] /* ty=Tensor[(56), bool] */, %var_7017)
}

def @func_2219() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %599 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %592 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %593 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %594 = @func_1531() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %595 = %592.0;
    %596 = %593.0;
    %597 = %594.0;
    %598 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
    (%595, %596, %597, %598)
  };
  %599() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_7928(%var_7926: Tensor[(3, 5, 8), float32], %var_7927: Tensor[(3, 5, 8), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float32], Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) {
  @func_7924(%var_7926, %var_7927) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float32], Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) */
}

def @func_378(%var_376: Tensor[(12, 8, 2), float32]) -> Tensor[(12, 8, 2), float32] {
  @func_375(%var_376) /* ty=Tensor[(12, 8, 2), float32] */
}

def @func_2466() -> (Tensor[(3, 4, 8), float64],) {
  %600 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%600,)
}

def @func_8922(%var_8917: Tensor[(9, 1, 1), uint32]) -> Tensor[(9, 1, 1), uint32] {
  %601 = cast(meta[relay.Constant][33] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %602 = cast(%var_8917, dtype="uint32") /* ty=Tensor[(9, 1, 1), uint32] */;
  add(%601, %602) /* ty=Tensor[(9, 1, 1), uint32] */
}

def @func_259() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_2135(%var_2132: Tensor[(14, 7, 13), float32], %var_2133: Tensor[(1, 6), float64], %var_2134: Tensor[(192), float32]) -> (Tensor[(14, 7, 13), float32], Tensor[(14, 6, 4), int16], Tensor[(24, 14), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(1, 6), float64], Tensor[(192), float32]) {
  @func_2130(%var_2132, %var_2133, %var_2134) /* ty=(Tensor[(14, 7, 13), float32], Tensor[(14, 6, 4), int16], Tensor[(24, 14), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(1, 6), float64], Tensor[(192), float32]) */
}

def @func_8254() -> Tensor[(3, 4, 8), float64] {
  @func_8252() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_7416() -> Tensor[(3, 4, 8), float64] {
  %604 = fn () -> Tensor[(3, 4, 8), float64] {
    %603 = @func_5820() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %603.5
  };
  %604() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_4613(%var_4557: Tensor[(3, 5, 8), float32]) -> (Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) {
  %605 = cast(%var_4557, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %606 = rsqrt(%605) /* ty=Tensor[(3, 5, 8), float32] */;
  %607 = cast(%var_4557, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = cast(%var_4557, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %612 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %613 = not_equal(%609, %610) /* ty=Tensor[(3, 5, 8), bool] */;
  %614 = atan(%611) /* ty=Tensor[(3, 5, 8), float32] */;
  %615 = %612.1;
  (%613, %614, %615)
}

def @func_7924(%var_7842: Tensor[(3, 5, 8), float32], %var_7881: Tensor[(3, 5, 8), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float32], Tensor[(3, 5, 8), bool], Tensor[(3, 5, 8), float32], Tensor[(3, 4, 8), float64]) {
  %616 = @func_6932() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %617 = @func_7578() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 5, 8), float32]) */;
  %618 = %617.1;
  %619 = cast(%var_7842, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %623 = equal(%621, %622) /* ty=Tensor[(3, 5, 8), bool] */;
  %624 = cast(%623, dtype="int64") /* ty=Tensor[(3, 5, 8), int64] */;
  %625 = shape_of(%var_7842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_7842, dtype="int64") /* ty=Tensor[(3, 5, 8), int64] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %628 = cast(%623, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %629 = cast(%var_7881, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %630 = shape_of(%var_7842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%var_7842, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %633 = cast(%var_7842, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %634 = @func_5035() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %635 = %616.1;
  %636 = left_shift(%626, %627) /* ty=Tensor[(3, 5, 8), int64] */;
  %637 = acosh(%628) /* ty=Tensor[(3, 5, 8), float32] */;
  %638 = logical_and(%631, %632) /* ty=Tensor[(3, 5, 8), bool] */;
  %639 = sinh(%633) /* ty=Tensor[(3, 5, 8), float32] */;
  %640 = %634.0;
  (%635, %636, %637, %638, %639, %640)
}

def @func_1407(%var_1405: Tensor[(14, 1, 4), bool]) -> (Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) {
  @func_1404(%var_1405) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(14, 1, 4), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(3, 4, 8), float64]) */
}

def @func_1825() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
  @func_1823() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */
}

def @func_8115() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(6), float64]) {
  %641 = @func_7976() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %642 = cast(meta[relay.Constant][34] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %643 = reshape(%642, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %644 = @func_4252(%643) /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(192), float32]) */;
  %645 = %641.0;
  %646 = %644.0;
  (%645, %646, meta[relay.Constant][34] /* ty=Tensor[(6), float64] */)
}

def @func_8997() -> (Tensor[(3, 4, 8), float64],) {
  @func_8995() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_4004() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %651 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %647 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %648 = @func_2584() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %649 = %647.1;
    %650 = %648.0;
    (%649, %650)
  };
  %651() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_7144() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %652 = @func_2294() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %653 = @func_2218() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %654 = %652.0;
  %655 = %653.3;
  (%654, %655)
}

def @func_7978() -> (Tensor[(3, 4, 8), float64],) {
  @func_7976() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_1994() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) {
  %659 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) {
    %656 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %657 = @func_307() /* ty=Tensor[(3, 4, 8), float64] */;
    %658 = %656.0;
    (%657, %658)
  };
  %659() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) */
}

def @func_4354() -> Tensor[(3, 4, 8), float64] {
  %660 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %660.2
}

def @func_6556() -> (Tensor[(3, 4, 8), float64], Tensor[(14, 1, 4), float32], Tensor[(56), bool]) {
  @func_6554() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(14, 1, 4), float32], Tensor[(56), bool]) */
}

def @func_3304() -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) {
  @func_3302() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) */
}

def @func_3709() -> Tensor[(3, 4, 8), float64] {
  @func_3134() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_4394(%var_4392: float32, %var_4393: Tensor[(15, 7, 12), float32]) -> (Tensor[(15, 7, 12), float32],) {
  @func_4390(%var_4392, %var_4393) /* ty=(Tensor[(15, 7, 12), float32],) */
}

def @func_5720() -> (Tensor[(3, 4, 8), bool],) {
  %663 = fn () -> (Tensor[(3, 4, 8), bool],) {
    %661 = @func_2716() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) */;
    %662 = %661.1;
    (%662,)
  };
  %663() /* ty=(Tensor[(3, 4, 8), bool],) */
}

def @func_1250(%var_1248: Tensor[(6), float64], %var_1249: Tensor[(192), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6, 6, 13), bool], bool, Tensor[(468, 1), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), bool]) {
  @func_1246(%var_1248, %var_1249) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6, 6, 13), bool], bool, Tensor[(468, 1), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), bool]) */
}

def @func_6699() -> Tensor[(3, 4, 8), float64] {
  %664 = @func_4003() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %664.0
}

def @func_7678() -> (Tensor[(3, 4, 8), float64],) {
  @func_7676() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_8664(%var_8662: Tensor[(1, 16, 13), float64], %var_8663: Tensor[(4, 48), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(?, 16, 13), float32], Tensor[(3, 4, 8), float64], Tensor[(4, 48), float32], Tensor[(1, 16, 13), float32]) {
  %684 = fn (%var_8587: Tensor[(1, 16, 13), float64], %var_8653: Tensor[(4, 48), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(?, 16, 13), float32], Tensor[(3, 4, 8), float64], Tensor[(4, 48), float32], Tensor[(1, 16, 13), float32]) {
    %665 = cast(meta[relay.Constant][35] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
    %666 = reshape(%665, newshape=[6]) /* ty=Tensor[(6), float64] */;
    %667 = @func_3865(%666) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(6), float64]) */;
    %668 = cast(%var_8587, dtype="float64") /* ty=Tensor[(1, 16, 13), float64] */;
    %669 = atanh(%668) /* ty=Tensor[(1, 16, 13), float64] */;
    %670 = cast(%var_8587, dtype="float32") /* ty=Tensor[(1, 16, 13), float32] */;
    %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
    %672 = cast(%669, dtype="float32") /* ty=Tensor[(1, 16, 13), float32] */;
    %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %674 = cast(%var_8653, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
    %675 = reshape(%674, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
    %676 = @func_1865(%675) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(192, 11), uint8], Tensor[(12, 8, 2), float32], Tensor[(192, 11), float64]) */;
    %677 = cast(%669, dtype="float64") /* ty=Tensor[(1, 16, 13), float64] */;
    %678 = exp(%677) /* ty=Tensor[(1, 16, 13), float64] */;
    %679 = cast(%678, dtype="float32") /* ty=Tensor[(1, 16, 13), float32] */;
    %680 = %667.1;
    %681 = floor_mod(%672, %673) /* ty=Tensor[(?, 16, 13), float32] */;
    %682 = %676.0;
    %683 = asinh(%679) /* ty=Tensor[(1, 16, 13), float32] */;
    (%680, meta[relay.Constant][35] /* ty=Tensor[(6), float64] */, %681, %682, %var_8653, %683)
  };
  %684(%var_8662, %var_8663) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(?, 16, 13), float32], Tensor[(3, 4, 8), float64], Tensor[(4, 48), float32], Tensor[(1, 16, 13), float32]) */
}

def @func_8736() -> (Tensor[(3, 4, 8), bool], Tensor[(6, 3, 14), bool]) {
  @func_8734() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(6, 3, 14), bool]) */
}

def @func_4854() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
  %697 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
    %685 = @func_4736() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %686 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %687 = reshape(%686, newshape=[]) /* ty=bool */;
    %688 = @func_695(%687) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(468), bool], Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), uint32], Tensor[(3, 4, 8), float64]) */;
    %689 = cast(meta[relay.Constant][36] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %690 = reshape(%689, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
    %691 = @func_1865(%690) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(192, 11), uint8], Tensor[(12, 8, 2), float32], Tensor[(192, 11), float64]) */;
    %692 = %685.0;
    %693 = @func_2827() /* ty=Tensor[(3, 4, 8), float64] */;
    %694 = @func_3932() /* ty=Tensor[(3, 4, 8), float64] */;
    %695 = %688.3;
    %696 = %691.5;
    (%692, %693, %694, %695, True /* ty=bool */, %696, meta[relay.Constant][36] /* ty=Tensor[(192), float32] */)
  };
  %697() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64], bool, Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */
}

def @func_986() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], bool, Tensor[(14, 6, 4), int16], Tensor[(336), int16], Tensor[(3, 4, 8), float64]) {
  @func_984() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], bool, Tensor[(14, 6, 4), int16], Tensor[(336), int16], Tensor[(3, 4, 8), float64]) */
}

def @func_1867(%var_1866: Tensor[(192, 1), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(192, 11), uint8], Tensor[(12, 8, 2), float32], Tensor[(192, 11), float64]) {
  %714 = fn (%var_1844: Tensor[(192, 1), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(192, 11), uint8], Tensor[(12, 8, 2), float32], Tensor[(192, 11), float64]) {
    %698 = cast(%var_1844, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %699 = reshape(%698, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %700 = @func_799(%699) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */;
    %701 = @func_1531() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %702 = cast(%var_1844, dtype="uint8") /* ty=Tensor[(192, 1), uint8] */;
    %703 = cast(meta[relay.Constant][37] /* ty=Tensor[(192, 11), float32] */, dtype="uint8") /* ty=Tensor[(192, 11), uint8] */;
    %704 = %700.2;
    %705 = cast(%704, dtype="float32") /* ty=Tensor[(192), float32] */;
    %706 = reshape(%705, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
    %707 = cast(meta[relay.Constant][37] /* ty=Tensor[(192, 11), float32] */, dtype="float64") /* ty=Tensor[(192, 11), float64] */;
    %708 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
    %709 = @func_1452() /* ty=Tensor[(3, 4, 8), float64] */;
    %710 = %701.0;
    %711 = subtract(%702, %703) /* ty=Tensor[(192, 11), uint8] */;
    %712 = @func_375(%706) /* ty=Tensor[(12, 8, 2), float32] */;
    %713 = erf(%707) /* ty=Tensor[(192, 11), float64] */;
    (%708, %709, %704, %710, %711, %712, %713)
  };
  %714(%var_1866) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(192, 11), uint8], Tensor[(12, 8, 2), float32], Tensor[(192, 11), float64]) */
}

def @func_1823() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) {
  %715 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %716 = cast(meta[relay.Constant][38] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %717 = reshape(%716, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), float32] */;
  %718 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %719 = %715.0;
  %720 = @func_375(%717) /* ty=Tensor[(12, 8, 2), float32] */;
  (%718, %719, %720, meta[relay.Constant][38] /* ty=Tensor[(192), float32] */)
}

def @func_4052() -> Tensor[(3, 4, 8), float64] {
  %722 = fn () -> Tensor[(3, 4, 8), float64] {
    %721 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %721.0
  };
  %722() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_5337() -> Tensor[(3, 4, 8), float64] {
  %724 = fn () -> Tensor[(3, 4, 8), float64] {
    %723 = @func_3403() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %723.1
  };
  %724() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_5865() -> (Tensor[(3, 4, 8), uint8],) {
  %734 = fn () -> (Tensor[(3, 4, 8), uint8],) {
    %725 = @func_5035() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %726 = %725.0;
    %727 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %728 = %727.0;
    %729 = cast(%728, dtype="uint8") /* ty=Tensor[(3, 4, 8), uint8] */;
    %730 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%726, dtype="uint8") /* ty=Tensor[(3, 4, 8), uint8] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %733 = maximum(%731, %732) /* ty=Tensor[(3, 4, 8), uint8] */;
    (%733,)
  };
  %734() /* ty=(Tensor[(3, 4, 8), uint8],) */
}

def @func_4487(%var_4485: float32, %var_4486: Tensor[(3, 420), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(15, 7, 12), float32], float32, Tensor[(3, 420), float32]) {
  @func_4483(%var_4485, %var_4486) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(15, 7, 12), float32], float32, Tensor[(3, 420), float32]) */
}

def @func_5649() -> Tensor[(3, 4, 8), float64] {
  %735 = @func_5168() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %735.0
}

def @func_3588() -> Tensor[(3, 4, 8), float64] {
  %736 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %736.0
}

def @func_5361(%var_5359: Tensor[(14, 8, 1), float64], %var_5360: Tensor[(14, 8, 11), float64]) -> (Tensor[(14, 8, 11), float64],) {
  %740 = fn (%var_5343: Tensor[(14, 8, 1), float64], %var_5344: Tensor[(14, 8, 11), float64]) -> (Tensor[(14, 8, 11), float64],) {
    %737 = cast(%var_5343, dtype="float64") /* ty=Tensor[(14, 8, 1), float64] */;
    %738 = cast(%var_5344, dtype="float64") /* ty=Tensor[(14, 8, 11), float64] */;
    %739 = floor_divide(%737, %738) /* ty=Tensor[(14, 8, 11), float64] */;
    (%739,)
  };
  %740(%var_5359, %var_5360) /* ty=(Tensor[(14, 8, 11), float64],) */
}

def @func_3404() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %751 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %741 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %742 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %743 = @func_3302() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) */;
    %744 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %745 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %746 = %741.1;
    %747 = %742.1;
    %748 = %743.1;
    %749 = %744.0;
    %750 = %745.0;
    (%746, %747, %748, %749, %750)
  };
  %751() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_8201() -> (Tensor[(3, 4, 8), float64],) {
  %752 = @func_3008() /* ty=Tensor[(3, 4, 8), float64] */;
  (%752,)
}

def @func_6279() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) {
  %753 = @func_1531() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %754 = @func_557() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %755 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %756 = @func_3932() /* ty=Tensor[(3, 4, 8), float64] */;
  %757 = %753.0;
  %758 = %754.0;
  %759 = @func_4638() /* ty=Tensor[(3, 4, 8), float64] */;
  %760 = %755.0;
  (%756, %757, %758, %759, %760)
}

def @func_6238() -> (Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(91), float64]) {
  %761 = cast(meta[relay.Constant][39] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %762 = reshape(%761, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %763 = @func_5134(%762) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64]) */;
  %764 = @func_5883() /* ty=Tensor[(3, 4, 8), float64] */;
  %765 = %763.1;
  (%764, %765, meta[relay.Constant][39] /* ty=Tensor[(91), float64] */)
}

def @func_6107(%var_6105: Tensor[(1, 13, 3), float32], %var_6106: Tensor[(2, 13, 3), float32]) -> (Tensor[(2, 13, 3), int32],) {
  @func_6103(%var_6105, %var_6106) /* ty=(Tensor[(2, 13, 3), int32],) */
}

def @func_6659(%var_6657: Tensor[(120, 4), bool]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(120, 4), bool]) {
  @func_6656(%var_6657) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(120, 4), bool]) */
}

def @func_4390(%var_4383: float32, %var_4384: Tensor[(15, 7, 12), float32]) -> (Tensor[(15, 7, 12), float32],) {
  %766 = cast(%var_4383, dtype="float32") /* ty=float32 */;
  %767 = cast(%var_4384, dtype="float32") /* ty=Tensor[(15, 7, 12), float32] */;
  %768 = floor_divide(%766, %767) /* ty=Tensor[(15, 7, 12), float32] */;
  (%768,)
}

def @func_2717() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) {
  %773 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) {
    %769 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %770 = @func_1823() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32]) */;
    %771 = %769.1;
    %772 = %770.1;
    (%771, %772)
  };
  %773() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) */
}

def @func_3547() -> Tensor[(3, 4, 8), float64] {
  %775 = fn () -> Tensor[(3, 4, 8), float64] {
    %774 = @func_2294() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %774.0
  };
  %775() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_2608() -> (Tensor[(3, 4, 8), float64],) {
  @func_2606() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_3235() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %780 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %776 = @func_1531() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %777 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
    %778 = @func_2827() /* ty=Tensor[(3, 4, 8), float64] */;
    %779 = %776.0;
    (%777, %778, %779)
  };
  %780() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_6420(%var_6418: Tensor[(1, 10, 9), uint64], %var_6419: Tensor[(13, 10, 9), uint64]) -> Tensor[(13, 10, 9), uint64] {
  @func_6416(%var_6418, %var_6419) /* ty=Tensor[(13, 10, 9), uint64] */
}

def @func_3112() -> (Tensor[(3, 4, 8), float64],) {
  %783 = fn () -> (Tensor[(3, 4, 8), float64],) {
    %781 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %782 = %781.1;
    (%782,)
  };
  %783() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_2380() -> (Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64]) {
  %784 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %785 = @func_2054() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %786 = %784.0;
  %787 = %785.0;
  (%786, %787)
}

def @func_4483(%var_4479: float32, %var_4480: Tensor[(3, 420), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(15, 7, 12), float32], float32, Tensor[(3, 420), float32]) {
  %788 = cast(%var_4479, dtype="float32") /* ty=float32 */;
  %789 = cast(%var_4480, dtype="float32") /* ty=Tensor[(3, 420), float32] */;
  %790 = reshape(%788, newshape=[]) /* ty=float32 */;
  %791 = reshape(%789, newshape=[15, 7, 12]) /* ty=Tensor[(15, 7, 12), float32] */;
  %792 = @func_4390(%790, %791) /* ty=(Tensor[(15, 7, 12), float32],) */;
  %793 = @func_4051() /* ty=Tensor[(3, 4, 8), float64] */;
  %794 = %792.0;
  (%793, %794, %var_4479, %var_4480)
}

def @func_3302() -> (Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) {
  %795 = @func_2054() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %796 = cast(meta[relay.Constant][40] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %797 = reshape(%796, newshape=[192, 1]) /* ty=Tensor[(192, 1), float32] */;
  %798 = @func_1865(%797) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(192, 11), uint8], Tensor[(12, 8, 2), float32], Tensor[(192, 11), float64]) */;
  %799 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %800 = %795.0;
  %801 = %798.5;
  %802 = %799.0;
  (%800, %801, meta[relay.Constant][40] /* ty=Tensor[(192), float32] */, %802)
}

def @func_6416(%var_6407: Tensor[(1, 10, 9), uint64], %var_6408: Tensor[(13, 10, 9), uint64]) -> Tensor[(13, 10, 9), uint64] {
  %803 = cast(%var_6407, dtype="uint64") /* ty=Tensor[(1, 10, 9), uint64] */;
  %804 = cast(%var_6408, dtype="uint64") /* ty=Tensor[(13, 10, 9), uint64] */;
  right_shift(%803, %804) /* ty=Tensor[(13, 10, 9), uint64] */
}

def @func_918(%var_917: bool) -> (Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(6, 6, 13), bool]) {
  %820 = fn (%var_899: bool) -> (Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(6, 6, 13), bool]) {
    %805 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %806 = cast(%var_899, dtype="bool") /* ty=bool */;
    %807 = cast(meta[relay.Constant][41] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
    %808 = cast(meta[relay.Constant][41] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
    %809 = cast(meta[relay.Constant][41] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
    %810 = reshape(%806, newshape=[]) /* ty=bool */;
    %811 = reshape(%807, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
    %812 = reshape(%808, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
    %813 = reshape(%809, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), bool] */;
    %814 = @func_514(%810, %811, %812, %813) /* ty=(Tensor[(6, 6, 13), bool], Tensor[(6, 6, 13), float64], Tensor[(6, 6, 13), float32], Tensor[(6, 6, 13), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), float64]) */;
    %815 = %814.1;
    %816 = cast(%815, dtype="bool") /* ty=Tensor[(6, 6, 13), bool] */;
    %817 = cast(%var_899, dtype="bool") /* ty=bool */;
    %818 = %805.1;
    %819 = greater_equal(%816, %817) /* ty=Tensor[(6, 6, 13), bool] */;
    (%818, meta[relay.Constant][41] /* ty=Tensor[(468), bool] */, %819)
  };
  %820(%var_917) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(468), bool], Tensor[(6, 6, 13), bool]) */
}

def @func_3134() -> Tensor[(3, 4, 8), float64] {
  %821 = @func_148() /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %821.1
}

def @func_8824() -> Tensor[(3, 4, 8), float64] {
  %822 = fn () -> Tensor[(3, 4, 8), float64] {
    @func_3588() /* ty=Tensor[(3, 4, 8), float64] */
  };
  %822() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_8897(%var_8895: Tensor[(16, 2, 13), int16], %var_8896: Tensor[(16, 2, 13), int16]) -> (Tensor[(16, 2, 13), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(120), float32]) {
  @func_8893(%var_8895, %var_8896) /* ty=(Tensor[(16, 2, 13), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(120), float32]) */
}

def @func_8252() -> Tensor[(3, 4, 8), float64] {
  %823 = @func_1674() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %823.0
}

def @func_2130(%var_2093: Tensor[(14, 7, 13), float32], %var_2120: Tensor[(1, 6), float64], %var_2121: Tensor[(192), float32]) -> (Tensor[(14, 7, 13), float32], Tensor[(14, 6, 4), int16], Tensor[(24, 14), int16], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(1, 6), float64], Tensor[(192), float32]) {
  %824 = cast(%var_2093, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %825 = cast(meta[relay.Constant][42] /* ty=Tensor[(24, 14), int16] */, dtype="int16") /* ty=Tensor[(24, 14), int16] */;
  %826 = reshape(%825, newshape=[14, 6, 4]) /* ty=Tensor[(14, 6, 4), int16] */;
  %827 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %828 = cast(%var_2120, dtype="float64") /* ty=Tensor[(1, 6), float64] */;
  %829 = cast(%var_2121, dtype="float32") /* ty=Tensor[(192), float32] */;
  %830 = reshape(%828, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %831 = reshape(%829, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %832 = @func_1246(%830, %831) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6, 6, 13), bool], bool, Tensor[(468, 1), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), bool]) */;
  %833 = rsqrt(%824) /* ty=Tensor[(14, 7, 13), float32] */;
  %834 = @func_828(%826) /* ty=Tensor[(14, 6, 4), int16] */;
  %835 = @func_1316() /* ty=Tensor[(3, 4, 8), float64] */;
  %836 = %827.0;
  %837 = %832.13;
  (%833, %834, meta[relay.Constant][42] /* ty=Tensor[(24, 14), int16] */, %835, %836, %837, %var_2120, %var_2121)
}

def @func_7647(%var_7635: Tensor[(192), float32]) -> (Tensor[(3, 4, 8), float64], Tensor[(192), float32], Tensor[(6), float64], Tensor[(192), float32], Tensor[(3, 4, 8), float64]) {
  %838 = cast(meta[relay.Constant][43] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %839 = cast(%var_7635, dtype="float32") /* ty=Tensor[(192), float32] */;
  %840 = reshape(%838, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %841 = reshape(%839, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %842 = @func_1246(%840, %841) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6, 6, 13), bool], bool, Tensor[(468, 1), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), bool]) */;
  %843 = @func_2827() /* ty=Tensor[(3, 4, 8), float64] */;
  %844 = %842.9;
  %845 = @func_3546() /* ty=Tensor[(3, 4, 8), float64] */;
  (%843, %844, meta[relay.Constant][43] /* ty=Tensor[(6), float64] */, %var_7635, %845)
}

def @func_6041(%var_6040: Tensor[(91), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(91), int16], Tensor[(91), float64]) {
  %861 = fn (%var_6024: Tensor[(91), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(91), int16], Tensor[(91), float64]) {
    %846 = @func_4536() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %847 = @func_2584() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %848 = cast(meta[relay.Constant][44] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
    %849 = reshape(%848, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
    %850 = @func_5134(%849) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64]) */;
    %851 = cast(%var_6024, dtype="int16") /* ty=Tensor[(91), int16] */;
    %852 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(91), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %853 = cast(meta[relay.Constant][44] /* ty=Tensor[(91), float64] */, dtype="int16") /* ty=Tensor[(91), int16] */;
    %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?), int16] */;
    %855 = cast(%var_6024, dtype="float64") /* ty=Tensor[(91), float64] */;
    %856 = %846.0;
    %857 = %847.0;
    %858 = %850.0;
    %859 = left_shift(%853, %854) /* ty=Tensor[(91), int16] */;
    %860 = asinh(%855) /* ty=Tensor[(91), float64] */;
    (%856, %857, %858, %859, %860)
  };
  %861(%var_6040) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(91), int16], Tensor[(91), float64]) */
}

def @func_3348(%var_3346: Tensor[(6, 6, 9), float32]) -> (Tensor[(6, 6, 9), uint8], Tensor[(3, 4, 8), float64]) {
  @func_3345(%var_3346) /* ty=(Tensor[(6, 6, 9), uint8], Tensor[(3, 4, 8), float64]) */
}

def @func_7453() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 8, 8), bool], Tensor[(576), uint8]) {
  %869 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 8, 8), bool], Tensor[(576), uint8]) {
    %862 = @func_2457() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32]) */;
    %863 = cast(meta[relay.Constant][45] /* ty=Tensor[(576), uint8] */, dtype="uint8") /* ty=Tensor[(576), uint8] */;
    %864 = reshape(%863, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), uint8] */;
    %865 = @func_5521(%864) /* ty=(Tensor[(9, 8, 8), bool],) */;
    %866 = @func_7084() /* ty=Tensor[(3, 4, 8), float64] */;
    %867 = %862.0;
    %868 = %865.0;
    (%866, %867, %868, meta[relay.Constant][45] /* ty=Tensor[(576), uint8] */)
  };
  %869() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 8, 8), bool], Tensor[(576), uint8]) */
}

def @func_8117() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(6), float64]) {
  @func_8115() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool], Tensor[(6), float64]) */
}

def @func_4376() -> (Tensor[(6, 3, 14), bool], Tensor[(3, 4, 8), float64]) {
  @func_4374() /* ty=(Tensor[(6, 3, 14), bool], Tensor[(3, 4, 8), float64]) */
}

def @func_3345(%var_3308: Tensor[(6, 6, 9), float32]) -> (Tensor[(6, 6, 9), uint8], Tensor[(3, 4, 8), float64]) {
  %870 = cast(%var_3308, dtype="float32") /* ty=Tensor[(6, 6, 9), float32] */;
  %871 = tan(%870) /* ty=Tensor[(6, 6, 9), float32] */;
  %872 = cast(%var_3308, dtype="float64") /* ty=Tensor[(6, 6, 9), float64] */;
  %873 = shape_of(%871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%871, dtype="float64") /* ty=Tensor[(6, 6, 9), float64] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %876 = power(%874, %875) /* ty=Tensor[(6, 6, 9), float64] */;
  %877 = cast(%var_3308, dtype="uint8") /* ty=Tensor[(6, 6, 9), uint8] */;
  %878 = shape_of(%876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%876, dtype="uint8") /* ty=Tensor[(6, 6, 9), uint8] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %881 = @func_2457() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32]) */;
  %882 = bitwise_xor(%879, %880) /* ty=Tensor[(6, 6, 9), uint8] */;
  %883 = %881.0;
  (%882, %883)
}

def @func_5753() -> (Tensor[(3, 4, 8), float64],) {
  @func_5751() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_4737() -> (Tensor[(3, 4, 8), float64],) {
  %885 = fn () -> (Tensor[(3, 4, 8), float64],) {
    %884 = @func_3546() /* ty=Tensor[(3, 4, 8), float64] */;
    (%884,)
  };
  %885() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_8904() -> (Tensor[(3, 4, 8), float64],) {
  %887 = fn () -> (Tensor[(3, 4, 8), float64],) {
    %886 = @func_2827() /* ty=Tensor[(3, 4, 8), float64] */;
    (%886,)
  };
  %887() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_6933() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %892 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %888 = @func_1550() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %889 = @func_3765() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %890 = %888.1;
    %891 = %889.0;
    (%890, %891)
  };
  %892() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_1550() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %893 = @func_322() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %894 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %895 = %893.0;
  %896 = @func_307() /* ty=Tensor[(3, 4, 8), float64] */;
  %897 = %894.0;
  (%895, %896, %897)
}

def @func_4156(%var_4146: Tensor[(13, 13, 1), int64], %var_4147: Tensor[(13, 13, 14), int64]) -> (Tensor[(13, 13, 14), bool],) {
  %898 = cast(%var_4146, dtype="bool") /* ty=Tensor[(13, 13, 1), bool] */;
  %899 = cast(%var_4147, dtype="bool") /* ty=Tensor[(13, 13, 14), bool] */;
  %900 = equal(%898, %899) /* ty=Tensor[(13, 13, 14), bool] */;
  (%900,)
}

def @func_2606() -> (Tensor[(3, 4, 8), float64],) {
  %901 = @func_1674() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %902 = %901.0;
  (%902,)
}

def @func_3590() -> Tensor[(3, 4, 8), float64] {
  @func_3588() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_1616() -> Tensor[(3, 4, 8), float64] {
  %904 = fn () -> Tensor[(3, 4, 8), float64] {
    %903 = @func_1498() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %903.1
  };
  %904() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_7976() -> (Tensor[(3, 4, 8), float64],) {
  %905 = @func_1896() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %906 = %905.0;
  (%906,)
}

def @func_4140() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 1), float64]) {
  @func_4138() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 1), float64]) */
}

def @func_5629(%var_5628: Tensor[(6, 5, 16), bool]) -> (Tensor[(6, 5, 16), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 5, 16), float32]) {
  %917 = fn (%var_5555: Tensor[(6, 5, 16), bool]) -> (Tensor[(6, 5, 16), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 5, 16), float32]) {
    %907 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 5, 16), bool] */, dtype="bool") /* ty=Tensor[(6, 5, 16), bool] */;
    %908 = shape_of(%var_5555, dtype="int32") /* ty=Tensor[(3), int32] */;
    %909 = cast(%var_5555, dtype="bool") /* ty=Tensor[(6, 5, 16), bool] */;
    %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %911 = @func_2606() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %912 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 5, 16), bool] */, dtype="float32") /* ty=Tensor[(6, 5, 16), float32] */;
    %913 = logical_or(%909, %910) /* ty=Tensor[(6, 5, 16), bool] */;
    %914 = %911.0;
    %915 = @func_3134() /* ty=Tensor[(3, 4, 8), float64] */;
    %916 = sinh(%912) /* ty=Tensor[(6, 5, 16), float32] */;
    (%913, %914, %915, %916)
  };
  %917(%var_5628) /* ty=(Tensor[(6, 5, 16), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(6, 5, 16), float32]) */
}

def @func_8699() -> Tensor[(3, 4, 8), float64] {
  @func_7084() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_4254(%var_4253: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(192), float32]) {
  %925 = fn (%var_4234: Tensor[(6), float64]) -> (Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(192), float32]) {
    %918 = cast(%var_4234, dtype="float64") /* ty=Tensor[(6), float64] */;
    %919 = cast(meta[relay.Constant][47] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %920 = reshape(%918, newshape=[6]) /* ty=Tensor[(6), float64] */;
    %921 = reshape(%919, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %922 = @func_1246(%920, %921) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 2), float64], Tensor[(6, 6, 13), bool], bool, Tensor[(468, 1), bool], Tensor[(12, 8, 2), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(12, 8, 2), float32], Tensor[(3, 4, 8), bool]) */;
    %923 = @func_2793() /* ty=Tensor[(3, 4, 8), bool] */;
    %924 = %922.3;
    (%923, %924, %var_4234, meta[relay.Constant][47] /* ty=Tensor[(192), float32] */)
  };
  %925(%var_4253) /* ty=(Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(6), float64], Tensor[(192), float32]) */
}

def @func_6103(%var_6065: Tensor[(1, 13, 3), float32], %var_6086: Tensor[(2, 13, 3), float32]) -> (Tensor[(2, 13, 3), int32],) {
  %926 = cast(%var_6065, dtype="float32") /* ty=Tensor[(1, 13, 3), float32] */;
  %927 = sigmoid(%926) /* ty=Tensor[(1, 13, 3), float32] */;
  %928 = cast(%927, dtype="int32") /* ty=Tensor[(1, 13, 3), int32] */;
  %929 = cast(%var_6086, dtype="int32") /* ty=Tensor[(2, 13, 3), int32] */;
  %930 = minimum(%928, %929) /* ty=Tensor[(2, 13, 3), int32] */;
  (%930,)
}

def @func_2054() -> (Tensor[(3, 4, 8), float64],) {
  %931 = @func_1316() /* ty=Tensor[(3, 4, 8), float64] */;
  (%931,)
}

def @func_3711() -> Tensor[(3, 4, 8), float64] {
  @func_3709() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_1971(%var_1969: Tensor[(13, 1, 1), uint32], %var_1970: Tensor[(13, 1, 9), uint32]) -> (Tensor[(13, 1, 9), bool], Tensor[(3, 4, 8), float64]) {
  @func_1967(%var_1969, %var_1970) /* ty=(Tensor[(13, 1, 9), bool], Tensor[(3, 4, 8), float64]) */
}

def @func_1896() -> (Tensor[(3, 4, 8), float64],) {
  %932 = @func_984() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], bool, Tensor[(14, 6, 4), int16], Tensor[(336), int16], Tensor[(3, 4, 8), float64]) */;
  %933 = %932.1;
  (%933,)
}

def @func_5136(%var_5135: Tensor[(1, 13, 7), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64]) {
  %947 = fn (%var_5059: Tensor[(1, 13, 7), float64]) -> (Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64]) {
    %934 = @func_4536() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %935 = cast(%var_5059, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
    %936 = cast(%var_5059, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
    %937 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 13, 7), float64] */;
    %938 = floor_divide(%936, %937) /* ty=Tensor[(9, 13, 7), float64] */;
    %939 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 13, 7), float64] */, dtype="int64") /* ty=Tensor[(9, 13, 7), int64] */;
    %940 = shape_of(%938, dtype="int32") /* ty=Tensor[(3), int32] */;
    %941 = cast(%938, dtype="int64") /* ty=Tensor[(9, 13, 7), int64] */;
    %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %943 = %934.0;
    %944 = sin(%935) /* ty=Tensor[(1, 13, 7), float64] */;
    %945 = @func_3546() /* ty=Tensor[(3, 4, 8), float64] */;
    %946 = right_shift(%941, %942) /* ty=Tensor[(9, 13, 7), int64] */;
    (%943, %944, %945, %946)
  };
  %947(%var_5135) /* ty=(Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(3, 4, 8), float64], Tensor[(9, 13, 7), int64]) */
}

def @func_2468() -> (Tensor[(3, 4, 8), float64],) {
  @func_2466() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_7676() -> (Tensor[(3, 4, 8), float64],) {
  %948 = @func_2891() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(6, 6, 13), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
  %949 = %948.3;
  (%949,)
}

def @func_8436(%var_8434: Tensor[(192), float32]) -> (Tensor[(7, 11), float64], Tensor[(192), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  @func_8433(%var_8434) /* ty=(Tensor[(7, 11), float64], Tensor[(192), float32], Tensor[(192), float32], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_4436() -> Tensor[(3, 4, 8), bool] {
  %950 = @func_2716() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), bool]) */;
  %950.1
}

def @func_1317() -> Tensor[(3, 4, 8), float64] {
  %952 = fn () -> Tensor[(3, 4, 8), float64] {
    %951 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %951.0
  };
  %952() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_5216() -> (Tensor[(3, 4, 8), bool],) {
  %954 = fn () -> (Tensor[(3, 4, 8), bool],) {
    %953 = @func_2793() /* ty=Tensor[(3, 4, 8), bool] */;
    (%953,)
  };
  %954() /* ty=(Tensor[(3, 4, 8), bool],) */
}

def @func_1453() -> Tensor[(3, 4, 8), float64] {
  %956 = fn () -> Tensor[(3, 4, 8), float64] {
    %955 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %955.0
  };
  %956() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_4537() -> (Tensor[(3, 4, 8), float64],) {
  %959 = fn () -> (Tensor[(3, 4, 8), float64],) {
    %957 = @func_3765() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %958 = %957.0;
    (%958,)
  };
  %959() /* ty=(Tensor[(3, 4, 8), float64],) */
}

def @func_148() -> (Tensor[(3, 4, 8), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %960 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %961 = cast(%960, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %962 = acosh(%961) /* ty=Tensor[(3, 4, 8), float32] */;
  %963 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %965 = cast(%962, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %967 = floor_mod(%965, %966) /* ty=Tensor[(3, 4, 8), float32] */;
  %968 = cast(%967, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %969 = log(%968) /* ty=Tensor[(3, 4, 8), float32] */;
  %970 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %971 = cast(%970, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %972 = shape_of(%969, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(%969, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %975 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  %976 = cast(%975, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %977 = shape_of(%960, dtype="int32") /* ty=Tensor[(3), int32] */;
  %978 = cast(%960, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %979 = dyn.reshape(%976, %977, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %980 = floor_divide(%978, %979) /* ty=Tensor[(3, 4, 8), float32] */;
  %981 = cast(%980, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %982 = equal(%973, %974) /* ty=Tensor[(3, 4, 8), bool] */;
  %983 = sigmoid(%981) /* ty=Tensor[(3, 4, 8), float64] */;
  %984 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
  (%982, %983, %984)
}

def @func_309() -> Tensor[(3, 4, 8), float64] {
  @func_307() /* ty=Tensor[(3, 4, 8), float64] */
}

def @func_5708() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %988 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %985 = @func_2584() /* ty=(Tensor[(3, 4, 8), float64],) */;
    %986 = @func_1615() /* ty=Tensor[(3, 4, 8), float64] */;
    %987 = %985.0;
    (%986, %987)
  };
  %988() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_6240() -> (Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(91), float64]) {
  @func_6238() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(91), float64]) */
}

def @func_2759() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  @func_2757() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_859() -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
  %992 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) {
    %989 = @func_257() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %990 = %989.0;
    %991 = @func_40() /* ty=Tensor[(3, 4, 8), float64] */;
    (%990, %991)
  };
  %992() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */
}

def @func_7084() -> Tensor[(3, 4, 8), float64] {
  %993 = @func_4736() /* ty=(Tensor[(3, 4, 8), float64],) */;
  %993.0
}

def @func_8809(%var_8807: int8, %var_8808: Tensor[(8, 1, 1), int8]) -> (Tensor[(8, ?, ?), int32], Tensor[(3, 4, 8), float64]) {
  %1003 = fn (%var_8788: int8, %var_8789: Tensor[(8, 1, 1), int8]) -> (Tensor[(8, ?, ?), int32], Tensor[(3, 4, 8), float64]) {
    %994 = cast(%var_8788, dtype="bool") /* ty=bool */;
    %995 = cast(%var_8789, dtype="bool") /* ty=Tensor[(8, 1, 1), bool] */;
    %996 = greater(%994, %995) /* ty=Tensor[(8, 1, 1), bool] */;
    %997 = cast(%996, dtype="int32") /* ty=Tensor[(8, 1, 1), int32] */;
    %998 = shape_of(%var_8789, dtype="int32") /* ty=Tensor[(3), int32] */;
    %999 = cast(%var_8789, dtype="int32") /* ty=Tensor[(8, 1, 1), int32] */;
    %1000 = dyn.reshape(%997, %998, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1001 = add(%999, %1000) /* ty=Tensor[(8, ?, ?), int32] */;
    %1002 = @func_5883() /* ty=Tensor[(3, 4, 8), float64] */;
    (%1001, %1002)
  };
  %1003(%var_8807, %var_8808) /* ty=(Tensor[(8, ?, ?), int32], Tensor[(3, 4, 8), float64]) */
}

def @func_3430(%var_3416: Tensor[(5, 15, 2), float32], %var_3417: Tensor[(5, 15, 2), float32]) -> Tensor[(5, 15, 2), float32] {
  %1004 = cast(%var_3417, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %1005 = shape_of(%var_3416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1006 = cast(%var_3416, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %1007 = dyn.reshape(%1004, %1005, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1008 = minimum(%1006, %1007) /* ty=Tensor[(5, 15, 2), float32] */;
  %1009 = cast(%1008, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  log2(%1009) /* ty=Tensor[(5, 15, 2), float32] */
}

def @func_6208() -> (Tensor[(3, 4, 8), float64], Tensor[(56), bool]) {
  %1014 = fn () -> (Tensor[(3, 4, 8), float64], Tensor[(56), bool]) {
    %1010 = @func_858() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %1011 = @func_5820() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(56), bool], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64], Tensor[(3, 4, 8), float64]) */;
    %1012 = %1010.1;
    %1013 = %1011.2;
    (%1012, %1013)
  };
  %1014() /* ty=(Tensor[(3, 4, 8), float64], Tensor[(56), bool]) */
}

def @func_4374() -> (Tensor[(6, 3, 14), bool], Tensor[(3, 4, 8), float64]) {
  %1015 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 14), float32] */;
  %1016 = asinh(%1015) /* ty=Tensor[(6, 3, 14), float32] */;
  %1017 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 3, 14), float32] */, dtype="bool") /* ty=Tensor[(6, 3, 14), bool] */;
  %1018 = shape_of(%1016, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1019 = cast(%1016, dtype="bool") /* ty=Tensor[(6, 3, 14), bool] */;
  %1020 = dyn.reshape(%1017, %1018, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1021 = greater_equal(%1019, %1020) /* ty=Tensor[(6, 3, 14), bool] */;
  %1022 = @func_4354() /* ty=Tensor[(3, 4, 8), float64] */;
  (%1021, %1022)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen354/build/output.py", line 3204, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:09:39] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

