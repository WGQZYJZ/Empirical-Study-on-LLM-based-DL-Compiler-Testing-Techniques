==========mod==========
#[version = "0.0.5"]
def @func_4482() -> (Tensor[(2, 4, 16), float32],) {
  %0 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_4246(%var_4241: Tensor[(3, 11), float32]) -> (Tensor[(3, 11), float32],) {
  %2 = cast(%var_4241, dtype="float32") /* ty=Tensor[(3, 11), float32] */;
  %3 = log2(%2) /* ty=Tensor[(3, 11), float32] */;
  (%3,)
}

def @func_4124(%var_4052: Tensor[(128), float32], %var_4065: Tensor[(48, 4), uint64], %var_4074: Tensor[(48, 4), uint64]) -> (Tensor[(3, 13, 5), float64], Tensor[(128), bool], Tensor[(16, 12, 1), float32], uint64, Tensor[(48, 4), float64], Tensor[(416), float32], Tensor[(2, 208), float32], Tensor[(48, 4), float32]) {
  %4 = @func_2240() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32], Tensor[(128), float64]) */;
  %5 = %4.2;
  %6 = cast(%var_4052, dtype="bool") /* ty=Tensor[(128), bool] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(1), int32] */;
  %8 = cast(%5, dtype="bool") /* ty=Tensor[(128), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?), bool] */;
  %10 = cast(meta[relay.Constant][0] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %11 = cast(%var_4065, dtype="uint64") /* ty=Tensor[(48, 4), uint64] */;
  %12 = reshape(%10, newshape=[]) /* ty=uint64 */;
  %13 = reshape(%11, newshape=[16, 12, 1]) /* ty=Tensor[(16, 12, 1), uint64] */;
  %14 = @func_3162(%12, %13) /* ty=(Tensor[(16, 12, 1), float32],) */;
  %15 = cast(%var_4074, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
  %16 = shape_of(%var_4065, dtype="int32") /* ty=Tensor[(2), int32] */;
  %17 = cast(%var_4065, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 208), float32] */, dtype="float32") /* ty=Tensor[(2, 208), float32] */;
  %20 = reshape(%19, newshape=[416]) /* ty=Tensor[(416), float32] */;
  %21 = @func_2541(%20) /* ty=(Tensor[(416), float32], Tensor[(14, 6, 12), uint32], Tensor[(1008), uint32]) */;
  %22 = cast(%var_4065, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
  %23 = cos(%22) /* ty=Tensor[(48, 4), float64] */;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %25 = exp(%24) /* ty=Tensor[(48, 4), float32] */;
  %26 = cast(%var_4074, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(2), int32] */;
  %28 = cast(%25, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %30 = @func_2252() /* ty=Tensor[(3, 13, 5), float64] */;
  %31 = logical_or(%8, %9) /* ty=Tensor[(128), bool] */;
  %32 = %14.0;
  %33 = divide(%17, %18) /* ty=Tensor[(48, 4), float64] */;
  %34 = %21.0;
  %35 = power(%28, %29) /* ty=Tensor[(48, 4), float32] */;
  (%30, %31, %32, meta[relay.Constant][0] /* ty=uint64 */, %33, %34, meta[relay.Constant][1] /* ty=Tensor[(2, 208), float32] */, %35)
}

def @func_834(%var_818: Tensor[(14, 6, 12), uint32]) -> Tensor[(14, 6, 12), uint32] {
  %36 = cast(%var_818, dtype="uint32") /* ty=Tensor[(14, 6, 12), uint32] */;
  %37 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(14, 6, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 6, 12), uint32] */, dtype="uint32") /* ty=Tensor[(14, 6, 12), uint32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%38, %39) /* ty=Tensor[(14, 6, 12), uint32] */
}

def @func_2985(%var_2973: Tensor[(11, 11, 10), uint16]) -> Tensor[(11, 11, 10), uint16] {
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 11, 10), uint16] */, dtype="uint16") /* ty=Tensor[(11, 11, 10), uint16] */;
  %41 = shape_of(%var_2973, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%var_2973, dtype="uint16") /* ty=Tensor[(11, 11, 10), uint16] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%42, %43) /* ty=Tensor[(11, 11, 10), uint16] */
}

def @func_3052() -> (Tensor[(2, 4, 16), float32],) {
  %44 = @func_2786() /* ty=Tensor[(2, 4, 16), float32] */;
  (%44,)
}

def @func_2291(%var_2278: Tensor[(2, 4, 16), float32]) -> Tensor[(2, 4, 16), int64] {
  %45 = @func_2240() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32], Tensor[(128), float64]) */;
  %46 = %45.1;
  %47 = cast(%var_2278, dtype="int64") /* ty=Tensor[(2, 4, 16), int64] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="int64") /* ty=Tensor[(2, 4, 16), int64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%49, %50) /* ty=Tensor[(2, 4, 16), int64] */
}

def @func_5342(%var_5334: Tensor[(15, 4), uint64]) -> (Tensor[(15, 4), uint64],) {
  %51 = cast(%var_5334, dtype="uint64") /* ty=Tensor[(15, 4), uint64] */;
  %52 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(15, 4), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %53 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 4), uint64] */, dtype="uint64") /* ty=Tensor[(15, 4), uint64] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %55 = minimum(%53, %54) /* ty=Tensor[(15, 4), uint64] */;
  (%55,)
}

def @func_1858(%var_1848: Tensor[(128), float64]) -> (Tensor[(128), float32], Tensor[(128), float32]) {
  %56 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %57 = %56.0;
  %58 = cast(%var_1848, dtype="float32") /* ty=Tensor[(128), float32] */;
  %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(1), int32] */;
  %60 = cast(%57, dtype="float32") /* ty=Tensor[(128), float32] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?), float32] */;
  %62 = cast(%var_1848, dtype="float32") /* ty=Tensor[(128), float32] */;
  %63 = floor_divide(%60, %61) /* ty=Tensor[(128), float32] */;
  %64 = sqrt(%62) /* ty=Tensor[(128), float32] */;
  (%63, %64)
}

def @func_5778() -> Tensor[(3, 13, 5), float64] {
  @func_2252() /* ty=Tensor[(3, 13, 5), float64] */
}

def @func_703(%var_684: Tensor[(1, 3, 4), uint64], %var_685: Tensor[(5, 3, 4), uint64]) -> Tensor[(5, 3, 4), float64] {
  %65 = cast(%var_684, dtype="uint64") /* ty=Tensor[(1, 3, 4), uint64] */;
  %66 = cast(%var_685, dtype="uint64") /* ty=Tensor[(5, 3, 4), uint64] */;
  %67 = bitwise_and(%65, %66) /* ty=Tensor[(5, 3, 4), uint64] */;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(5, 3, 4), float64] */;
  cos(%68) /* ty=Tensor[(5, 3, 4), float64] */
}

def @func_6076() -> (Tensor[(2, 4, 16), float32],) {
  %69 = @func_5475() /* ty=Tensor[(2, 4, 16), float32] */;
  (%69,)
}

def @func_5447(%var_5366: Tensor[(1, 14, 2), int64], %var_5397: Tensor[(1, 1210), uint16], %var_5411: Tensor[(12), uint64], %var_5412: Tensor[(3, 20), uint64]) -> (Tensor[(12, 14, 2), int64], Tensor[(12, 14, 2), bool], Tensor[(11, 11, 10), uint16], Tensor[(1, 1210), uint16], Tensor[(4, 12, 9), int8], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(3, 20), uint64], Tensor[(3, 13, 5), float64]) {
  %70 = cast(%var_5366, dtype="int64") /* ty=Tensor[(1, 14, 2), int64] */;
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 14, 2), int64] */, dtype="int64") /* ty=Tensor[(12, 14, 2), int64] */;
  %72 = cast(%var_5366, dtype="float64") /* ty=Tensor[(1, 14, 2), float64] */;
  %73 = erf(%72) /* ty=Tensor[(1, 14, 2), float64] */;
  %74 = cast(%73, dtype="bool") /* ty=Tensor[(1, 14, 2), bool] */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 14, 2), int64] */, dtype="bool") /* ty=Tensor[(12, 14, 2), bool] */;
  %76 = cast(%var_5397, dtype="uint16") /* ty=Tensor[(1, 1210), uint16] */;
  %77 = reshape(%76, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint16] */;
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(432), uint16] */, dtype="uint16") /* ty=Tensor[(432), uint16] */;
  %79 = cast(%var_5411, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %80 = cast(%var_5412, dtype="uint64") /* ty=Tensor[(3, 20), uint64] */;
  %81 = reshape(%78, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint16] */;
  %82 = reshape(%79, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %83 = reshape(%80, newshape=[60, 1]) /* ty=Tensor[(60, 1), uint64] */;
  %84 = @func_907(%81, %82, %83) /* ty=(Tensor[(4, 12, 9), bool], Tensor[(5, 3, 4), float64], Tensor[(12), uint64], Tensor[(60, 1), uint64], Tensor[(5, 3, 4), float64], Tensor[(4, 12, 9), int8]) */;
  %85 = @func_5310() /* ty=(Tensor[(3, 13, 5), float64],) */;
  %86 = logical_xor(%70, %71) /* ty=Tensor[(12, 14, 2), int64] */;
  %87 = less(%74, %75) /* ty=Tensor[(12, 14, 2), bool] */;
  %88 = @func_2985(%77) /* ty=Tensor[(11, 11, 10), uint16] */;
  %89 = %84.5;
  %90 = %85.0;
  (%86, %87, %88, %var_5397, %89, meta[relay.Constant][6] /* ty=Tensor[(432), uint16] */, %var_5411, %var_5412, %90)
}

def @func_3867() -> (Tensor[(3, 13, 5), float32],) {
  %91 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(3, 13, 5), float32] */;
  %93 = cos(%92) /* ty=Tensor[(3, 13, 5), float32] */;
  (%93,)
}

def @func_2478(%var_2462: Tensor[(4, 14, 9), float32]) -> (Tensor[(4, 14, 9), float32], Tensor[(2, 4, 16), float32]) {
  %94 = cast(%var_2462, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
  %95 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %96 = log2(%94) /* ty=Tensor[(4, 14, 9), float32] */;
  %97 = %95.1;
  (%96, %97)
}

def @func_4839() -> (Tensor[(2, 4, 16), float32],) {
  %98 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %99 = %98.1;
  (%99,)
}

def @func_5744(%var_5727: Tensor[(11, 16, 16), int8], %var_5728: Tensor[(11, 16, 16), int8]) -> (Tensor[(11, 16, 16), float64],) {
  %100 = cast(%var_5728, dtype="int8") /* ty=Tensor[(11, 16, 16), int8] */;
  %101 = shape_of(%var_5727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_5727, dtype="int8") /* ty=Tensor[(11, 16, 16), int8] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %104 = minimum(%102, %103) /* ty=Tensor[(11, 16, 16), int8] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %106 = shape_of(%var_5728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_5728, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %109 = floor_divide(%107, %108) /* ty=Tensor[(11, 16, 16), float64] */;
  (%109,)
}

def @func_1642() -> (Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) {
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %111 = reshape(%110, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %112 = @func_1534(%111) /* ty=(Tensor[(2, 4, 16), float32],) */;
  %113 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %114 = %112.0;
  (%113, %114, meta[relay.Constant][7] /* ty=Tensor[(128), float32] */)
}

def @func_3410() -> (Tensor[(3, 13, 5), float64], Tensor[(3, 13, 5), float64]) {
  %115 = @func_2824() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32], Tensor[(2, 4, 16), float32], Tensor[(504), float32]) */;
  %116 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %117 = %115.0;
  (%116, %117)
}

def @func_2966(%var_2954: Tensor[(128), float64], %var_2960: Tensor[(128), float64]) -> (Tensor[(128), uint32], Tensor[(128), uint64]) {
  %118 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
  %119 = %118.0;
  %120 = cast(%var_2954, dtype="uint32") /* ty=Tensor[(128), uint32] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(1), int32] */;
  %122 = cast(%119, dtype="uint32") /* ty=Tensor[(128), uint32] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %124 = cast(%var_2960, dtype="uint64") /* ty=Tensor[(128), uint64] */;
  %125 = shape_of(%var_2954, dtype="int32") /* ty=Tensor[(1), int32] */;
  %126 = cast(%var_2954, dtype="uint64") /* ty=Tensor[(128), uint64] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %128 = add(%122, %123) /* ty=Tensor[(128), uint32] */;
  %129 = minimum(%126, %127) /* ty=Tensor[(128), uint64] */;
  (%128, %129)
}

def @func_5475() -> Tensor[(2, 4, 16), float32] {
  %130 = @func_4482() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %130.0
}

def @func_5701(%var_5658: Tensor[(99), float64], %var_5688: Tensor[(3328), bool]) -> (Tensor[(2, 4, 16), float32], Tensor[(4, 104), float32], Tensor[(3, 11, 3), float32], Tensor[(99), float32], Tensor[(2, 4, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(3328), bool], Tensor[(12), uint64]) {
  %131 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %132 = cast(%var_5658, dtype="float64") /* ty=Tensor[(99), float64] */;
  %133 = reshape(%132, newshape=[3, 11, 3]) /* ty=Tensor[(3, 11, 3), float64] */;
  %134 = @func_4368(%133) /* ty=(Tensor[(3, 11, 3), bool], Tensor[(3, 11, 3), float32]) */;
  %135 = cast(%var_5658, dtype="float32") /* ty=Tensor[(99), float32] */;
  %136 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 104), float32] */, dtype="float32") /* ty=Tensor[(4, 104), float32] */;
  %137 = %131.1;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %139 = reshape(%136, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), float32] */;
  %140 = reshape(%138, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %141 = @func_2749(%139, %140) /* ty=(Tensor[(4, 8, 13), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) */;
  %142 = %141.1;
  %143 = @func_3052() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %144 = %143.0;
  %145 = cast(%144, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %146 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%142, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = cast(%var_5688, dtype="bool") /* ty=Tensor[(3328), bool] */;
  %150 = cast(meta[relay.Constant][9] /* ty=Tensor[(12), uint64] */, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %151 = reshape(%149, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), bool] */;
  %152 = reshape(%150, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %153 = @func_1239(%151, %152) /* ty=(Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
  %154 = %134.1;
  %155 = log2(%135) /* ty=Tensor[(99), float32] */;
  %156 = greater_equal(%147, %148) /* ty=Tensor[(2, 4, 16), bool] */;
  %157 = %153.1;
  (%137, meta[relay.Constant][8] /* ty=Tensor[(4, 104), float32] */, %154, %155, %156, %157, %var_5688, meta[relay.Constant][9] /* ty=Tensor[(12), uint64] */)
}

def @func_6406() -> Tensor[(99), float64] {
  @func_5006() /* ty=Tensor[(99), float64] */
}

def @func_5006() -> Tensor[(99), float64] {
  %158 = @func_4645() /* ty=(Tensor[(128), float32], Tensor[(3, 11, 3), bool], Tensor[(99), float64], Tensor[(416, 2), uint64], Tensor[(832), float32]) */;
  %158.2
}

def @func_3698(%var_3681: Tensor[(416), float32], %var_3687: Tensor[(416, 2), float32]) -> (Tensor[(416), bool], Tensor[(432), uint16], Tensor[(416, 2), float32]) {
  %159 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
  %160 = %159.2;
  %161 = cast(%var_3681, dtype="bool") /* ty=Tensor[(416), bool] */;
  %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(1), int32] */;
  %163 = cast(%160, dtype="bool") /* ty=Tensor[(416), bool] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?), bool] */;
  %165 = cast(%var_3687, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
  %166 = cast(%var_3687, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
  %167 = reshape(%165, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
  %168 = reshape(%166, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
  %169 = @func_2708(%167, %168) /* ty=(Tensor[(13, 4, 16), float32], Tensor[(128), float64], Tensor[(13, 4, 16), float64], Tensor[(13, 4, 16), bool], Tensor[(13, 4, 16), int16], Tensor[(13, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(12), uint64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
  %170 = less_equal(%163, %164) /* ty=Tensor[(416), bool] */;
  %171 = %169.8;
  (%170, %171, %var_3687)
}

def @func_5265(%var_5254: bool) -> (Tensor[(2, 4, 16), int64], Tensor[(12, 9, 7), bool], bool, Tensor[(756), bool]) {
  %172 = @func_5070() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) */;
  %173 = cast(%var_5254, dtype="bool") /* ty=bool */;
  %174 = cast(meta[relay.Constant][10] /* ty=Tensor[(756), bool] */, dtype="bool") /* ty=Tensor[(756), bool] */;
  %175 = reshape(%173, newshape=[]) /* ty=bool */;
  %176 = reshape(%174, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), bool] */;
  %177 = %172.1;
  %178 = @func_1496(%175, %176) /* ty=Tensor[(12, 9, 7), bool] */;
  (%177, %178, %var_5254, meta[relay.Constant][10] /* ty=Tensor[(756), bool] */)
}

def @func_2322() -> (Tensor[(2, 4, 16), float32],) {
  %179 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %180 = %179.1;
  (%180,)
}

def @func_4225(%var_4206: Tensor[(832), float32], %var_4218: Tensor[(416, 2), float32]) -> (Tensor[(416), float32], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(416, 2), uint64]) {
  %181 = @func_3052() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %184 = cast(meta[relay.Constant][11] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %185 = cast(%var_4206, dtype="float32") /* ty=Tensor[(832), float32] */;
  %186 = reshape(%184, newshape=[416]) /* ty=Tensor[(416), float32] */;
  %187 = reshape(%185, newshape=[416, 2]) /* ty=Tensor[(416, 2), float32] */;
  %188 = @func_3698(%186, %187) /* ty=(Tensor[(416), bool], Tensor[(432), uint16], Tensor[(416, 2), float32]) */;
  %189 = %188.2;
  %190 = cast(%var_4218, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(2), int32] */;
  %192 = cast(%189, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %194 = asinh(%183) /* ty=Tensor[(2, 4, 16), float32] */;
  %195 = add(%192, %193) /* ty=Tensor[(416, 2), uint64] */;
  (meta[relay.Constant][11] /* ty=Tensor[(416), float32] */, %var_4206, %194, %195)
}

def @func_5794(%var_5785: Tensor[(14, 11, 1), uint64], %var_5791: Tensor[(2, 208), float32]) -> (Tensor[(14, 11, 7), bool], Tensor[(416), float32], Tensor[(2, 208), float32]) {
  %196 = cast(%var_5785, dtype="bool") /* ty=Tensor[(14, 11, 1), bool] */;
  %197 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 11, 7), uint64] */, dtype="bool") /* ty=Tensor[(14, 11, 7), bool] */;
  %198 = cast(%var_5791, dtype="float32") /* ty=Tensor[(2, 208), float32] */;
  %199 = reshape(%198, newshape=[416]) /* ty=Tensor[(416), float32] */;
  %200 = @func_2541(%199) /* ty=(Tensor[(416), float32], Tensor[(14, 6, 12), uint32], Tensor[(1008), uint32]) */;
  %201 = not_equal(%196, %197) /* ty=Tensor[(14, 11, 7), bool] */;
  %202 = %200.0;
  (%201, %202, %var_5791)
}

def @func_5921(%var_5876: Tensor[(12, 9, 5), bool], %var_5877: Tensor[(12, 9, 5), bool], %var_5907: bool) -> (Tensor[(12, 9, 5), bool], Tensor[(13, 4, 16), float64], Tensor[(12, 9, 5), float64], bool, bool) {
  %203 = cast(%var_5877, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %204 = shape_of(%var_5876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%var_5876, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %207 = @func_3080() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(13, 4, 16), float64], Tensor[(832), float32]) */;
  %208 = cast(%var_5876, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %209 = cast(%var_5907, dtype="bool") /* ty=bool */;
  %210 = reshape(%209, newshape=[]) /* ty=bool */;
  %211 = @func_5265(%210) /* ty=(Tensor[(2, 4, 16), int64], Tensor[(12, 9, 7), bool], bool, Tensor[(756), bool]) */;
  %212 = logical_and(%205, %206) /* ty=Tensor[(12, 9, 5), bool] */;
  %213 = %207.1;
  %214 = cosh(%208) /* ty=Tensor[(12, 9, 5), float64] */;
  %215 = %211.2;
  (%212, %213, %214, %215, %var_5907)
}

def @func_1239(%var_1224: Tensor[(16, 13, 16), bool], %var_1233: Tensor[(12), uint64]) -> (Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) {
  %216 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 13, 16), bool] */, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
  %217 = shape_of(%var_1224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%var_1224, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = cast(meta[relay.Constant][14] /* ty=Tensor[(432), uint16] */, dtype="uint16") /* ty=Tensor[(432), uint16] */;
  %221 = cast(%var_1233, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %222 = cast(meta[relay.Constant][15] /* ty=Tensor[(60), uint64] */, dtype="uint64") /* ty=Tensor[(60), uint64] */;
  %223 = reshape(%220, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint16] */;
  %224 = reshape(%221, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %225 = reshape(%222, newshape=[60, 1]) /* ty=Tensor[(60, 1), uint64] */;
  %226 = @func_907(%223, %224, %225) /* ty=(Tensor[(4, 12, 9), bool], Tensor[(5, 3, 4), float64], Tensor[(12), uint64], Tensor[(60, 1), uint64], Tensor[(5, 3, 4), float64], Tensor[(4, 12, 9), int8]) */;
  %227 = logical_and(%218, %219) /* ty=Tensor[(16, 13, 16), bool] */;
  %228 = %226.4;
  (%227, %228, meta[relay.Constant][14] /* ty=Tensor[(432), uint16] */, %var_1233, meta[relay.Constant][15] /* ty=Tensor[(60), uint64] */)
}

def @func_4456(%var_4415: Tensor[(2, 4, 16), float32], %var_4431: Tensor[(416), float32]) -> (Tensor[(2, 4, 16), bool], Tensor[(416), float32], Tensor[(2, 4, 16), float32]) {
  %229 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %230 = %229.1;
  %231 = cast(%var_4415, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = cast(%var_4431, dtype="float32") /* ty=Tensor[(416), float32] */;
  %236 = cast(%var_4415, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %237 = reshape(%235, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), float32] */;
  %238 = reshape(%236, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %239 = @func_2749(%237, %238) /* ty=(Tensor[(4, 8, 13), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) */;
  %240 = %239.1;
  %241 = cast(%var_4415, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%240, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %245 = logical_and(%233, %234) /* ty=Tensor[(2, 4, 16), bool] */;
  %246 = power(%243, %244) /* ty=Tensor[(2, 4, 16), float32] */;
  (%245, %var_4431, %246)
}

def @func_5070() -> (Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) {
  %247 = @func_3410() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(3, 13, 5), float64]) */;
  %248 = cast(meta[relay.Constant][16] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %249 = reshape(%248, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %250 = %247.1;
  %251 = @func_2291(%249) /* ty=Tensor[(2, 4, 16), int64] */;
  (%250, %251, meta[relay.Constant][16] /* ty=Tensor[(128), float32] */)
}

def @func_5968(%var_5955: Tensor[(128), float32]) -> (Tensor[(128), bool],) {
  %252 = @func_4934() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), float32], Tensor[(128), float64], Tensor[(2, 4, 16), bool]) */;
  %253 = %252.1;
  %254 = cast(%var_5955, dtype="bool") /* ty=Tensor[(128), bool] */;
  %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(1), int32] */;
  %256 = cast(%253, dtype="bool") /* ty=Tensor[(128), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?), bool] */;
  %258 = greater_equal(%256, %257) /* ty=Tensor[(128), bool] */;
  (%258,)
}

def @func_1820(%var_1815: Tensor[(4, 8, 13), float32]) -> Tensor[(4, 8, 13), float32] {
  %259 = cast(%var_1815, dtype="float32") /* ty=Tensor[(4, 8, 13), float32] */;
  tan(%259) /* ty=Tensor[(4, 8, 13), float32] */
}

def @func_5209(%var_5136: Tensor[(2, 13, 9), float64], %var_5143: Tensor[(2, 13, 9), float64], %var_5167: Tensor[(3328), bool], %var_5168: Tensor[(12), uint64]) -> (Tensor[(2, 13, 9), uint8], Tensor[(2, 13, 9), float64], Tensor[(2, 4, 16), float32], Tensor[(60), uint64], Tensor[(12), uint64], Tensor[(3328), float64], Tensor[(2, 13, 9), float64]) {
  %260 = cast(%var_5136, dtype="float64") /* ty=Tensor[(2, 13, 9), float64] */;
  %261 = rsqrt(%260) /* ty=Tensor[(2, 13, 9), float64] */;
  %262 = cast(%var_5143, dtype="uint8") /* ty=Tensor[(2, 13, 9), uint8] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="uint8") /* ty=Tensor[(2, 13, 9), uint8] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %266 = cast(%var_5143, dtype="float64") /* ty=Tensor[(2, 13, 9), float64] */;
  %267 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %268 = cast(%var_5167, dtype="bool") /* ty=Tensor[(3328), bool] */;
  %269 = cast(%var_5168, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %270 = reshape(%268, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), bool] */;
  %271 = reshape(%269, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %272 = @func_1239(%270, %271) /* ty=(Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
  %273 = cast(%var_5167, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %274 = cast(%261, dtype="float64") /* ty=Tensor[(2, 13, 9), float64] */;
  %275 = shape_of(%var_5143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%var_5143, dtype="float64") /* ty=Tensor[(2, 13, 9), float64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %278 = minimum(%264, %265) /* ty=Tensor[(2, 13, 9), uint8] */;
  %279 = sqrt(%266) /* ty=Tensor[(2, 13, 9), float64] */;
  %280 = %267.0;
  %281 = %272.4;
  %282 = cosh(%273) /* ty=Tensor[(3328), float64] */;
  %283 = mod(%276, %277) /* ty=Tensor[(2, 13, 9), float64] */;
  (%278, %279, %280, %281, %var_5168, %282, %283)
}

def @func_1968() -> (Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) {
  %284 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %285 = %284.1;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %287 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %288 = %287.2;
  %289 = cast(%288, dtype="float32") /* ty=Tensor[(128), float32] */;
  %290 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%285, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %293 = cos(%286) /* ty=Tensor[(2, 4, 16), float32] */;
  %294 = floor_mod(%291, %292) /* ty=Tensor[(2, 4, 16), float32] */;
  (%293, %294)
}

def @func_2775() -> (Tensor[(2, 4, 16), float32],) {
  %295 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %296 = %295.1;
  (%296,)
}

def @func_5754() -> Tensor[(3, 13, 5), float32] {
  %297 = @func_3867() /* ty=(Tensor[(3, 13, 5), float32],) */;
  %297.0
}

def @func_1534(%var_1527: Tensor[(2, 4, 16), float32]) -> (Tensor[(2, 4, 16), float32],) {
  %298 = cast(%var_1527, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %299 = log2(%298) /* ty=Tensor[(2, 4, 16), float32] */;
  (%299,)
}

def @func_6530(%var_6505: Tensor[(5, 13, 13), uint64]) -> (Tensor[(3, 13, 5), float32], Tensor[(5, 13, 13), float64], Tensor[(2, 4, 16), int64]) {
  %300 = cast(meta[relay.Constant][17] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %301 = cast(%var_6505, dtype="bool") /* ty=Tensor[(5, 13, 13), bool] */;
  %302 = not_equal(%300, %301) /* ty=Tensor[(5, 13, 13), bool] */;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(5, 13, 13), float64] */;
  %304 = @func_5070() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) */;
  %305 = @func_5754() /* ty=Tensor[(3, 13, 5), float32] */;
  %306 = cos(%303) /* ty=Tensor[(5, 13, 13), float64] */;
  %307 = %304.1;
  (%305, %306, %307)
}

def @func_2252() -> Tensor[(3, 13, 5), float64] {
  %308 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %308.0
}

def @func_3626(%var_3587: Tensor[(2, 4, 16), float32]) -> (Tensor[(60), uint64], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(605, 2), int8], Tensor[(2, 4, 16), int8], Tensor[(2, 4, 16), bool], Tensor[(2, 4, 16), float32], Tensor[(4, 48), float64]) {
  %309 = cast(meta[relay.Constant][18] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %310 = cast(meta[relay.Constant][18] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %311 = reshape(%309, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
  %312 = reshape(%310, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
  %313 = @func_2708(%311, %312) /* ty=(Tensor[(13, 4, 16), float32], Tensor[(128), float64], Tensor[(13, 4, 16), float64], Tensor[(13, 4, 16), bool], Tensor[(13, 4, 16), int16], Tensor[(13, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(12), uint64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
  %314 = @func_3052() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %315 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %316 = cast(meta[relay.Constant][19] /* ty=Tensor[(605, 2), uint16] */, dtype="uint16") /* ty=Tensor[(605, 2), uint16] */;
  %317 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 48), uint64] */, dtype="uint64") /* ty=Tensor[(4, 48), uint64] */;
  %318 = reshape(%316, newshape=[1210]) /* ty=Tensor[(1210), uint16] */;
  %319 = reshape(%317, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %320 = @func_3275(%318, %319) /* ty=(Tensor[(2, 4, 16), float32], Tensor[(11, 11, 10), uint16], Tensor[(1210), uint16], Tensor[(3, 13, 5), float64], Tensor[(1, 12), uint64], Tensor[(16, 12, 1), float32], uint64, Tensor[(192), uint64]) */;
  %321 = %320.1;
  %322 = cast(%321, dtype="int8") /* ty=Tensor[(11, 11, 10), int8] */;
  %323 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(605, 2), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %324 = cast(meta[relay.Constant][19] /* ty=Tensor[(605, 2), uint16] */, dtype="int8") /* ty=Tensor[(605, 2), int8] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %326 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %327 = %326.0;
  %328 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %329 = %328.0;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %331 = reshape(%330, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %332 = @func_1534(%331) /* ty=(Tensor[(2, 4, 16), float32],) */;
  %333 = %332.0;
  %334 = cast(%333, dtype="int8") /* ty=Tensor[(2, 4, 16), int8] */;
  %335 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%327, dtype="int8") /* ty=Tensor[(2, 4, 16), int8] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %338 = cast(%var_3587, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %339 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%329, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %342 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %343 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 48), uint64] */, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
  %344 = log10(%343) /* ty=Tensor[(4, 48), float32] */;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
  %346 = %313.10;
  %347 = %314.0;
  %348 = %315.0;
  %349 = logical_xor(%324, %325) /* ty=Tensor[(605, 2), int8] */;
  %350 = minimum(%336, %337) /* ty=Tensor[(2, 4, 16), int8] */;
  %351 = less_equal(%340, %341) /* ty=Tensor[(2, 4, 16), bool] */;
  %352 = %342.0;
  %353 = cos(%345) /* ty=Tensor[(4, 48), float64] */;
  (%346, meta[relay.Constant][18] /* ty=Tensor[(832), float32] */, %347, %348, %349, %350, %351, %352, %353)
}

def @func_3162(%var_3133: uint64, %var_3134: Tensor[(16, 12, 1), uint64]) -> (Tensor[(16, 12, 1), float32],) {
  %354 = cast(%var_3133, dtype="uint64") /* ty=uint64 */;
  %355 = cast(%var_3134, dtype="uint64") /* ty=Tensor[(16, 12, 1), uint64] */;
  %356 = bitwise_or(%354, %355) /* ty=Tensor[(16, 12, 1), uint64] */;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(16, 12, 1), float32] */;
  %358 = cast(%var_3133, dtype="float32") /* ty=float32 */;
  %359 = minimum(%357, %358) /* ty=Tensor[(16, 12, 1), float32] */;
  (%359,)
}

def @func_1602() -> Tensor[(3, 13, 5), float64] {
  %360 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  erf(%360) /* ty=Tensor[(3, 13, 5), float64] */
}

def @func_1707() -> (Tensor[(128), float64], Tensor[(2, 4, 16), float32]) {
  %361 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %362 = %361.2;
  %363 = cast(%362, dtype="float64") /* ty=Tensor[(128), float64] */;
  %364 = rsqrt(%363) /* ty=Tensor[(128), float64] */;
  %365 = cast(%364, dtype="float32") /* ty=Tensor[(128), float32] */;
  %366 = reshape(%365, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %367 = @func_1534(%366) /* ty=(Tensor[(2, 4, 16), float32],) */;
  %368 = %367.0;
  (%364, %368)
}

def @func_2786() -> Tensor[(2, 4, 16), float32] {
  %369 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %369.1
}

def @func_3275(%var_3239: Tensor[(1210), uint16], %var_3267: Tensor[(192), uint64]) -> (Tensor[(2, 4, 16), float32], Tensor[(11, 11, 10), uint16], Tensor[(1210), uint16], Tensor[(3, 13, 5), float64], Tensor[(1, 12), uint64], Tensor[(16, 12, 1), float32], uint64, Tensor[(192), uint64]) {
  %370 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %371 = cast(%var_3239, dtype="uint16") /* ty=Tensor[(1210), uint16] */;
  %372 = reshape(%371, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint16] */;
  %373 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 12), uint64] */, dtype="uint64") /* ty=Tensor[(1, 12), uint64] */;
  %374 = reshape(%373, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %375 = @func_1785(%374) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), float64], Tensor[(16, 13, 16), bool], Tensor[(3328), bool], Tensor[(12), uint64], Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32]) */;
  %376 = cast(meta[relay.Constant][23] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %377 = cast(%var_3267, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %378 = reshape(%376, newshape=[]) /* ty=uint64 */;
  %379 = reshape(%377, newshape=[16, 12, 1]) /* ty=Tensor[(16, 12, 1), uint64] */;
  %380 = @func_3162(%378, %379) /* ty=(Tensor[(16, 12, 1), float32],) */;
  %381 = %370.0;
  %382 = @func_2985(%372) /* ty=Tensor[(11, 11, 10), uint16] */;
  %383 = %375.0;
  %384 = %380.0;
  (%381, %382, %var_3239, %383, meta[relay.Constant][22] /* ty=Tensor[(1, 12), uint64] */, %384, meta[relay.Constant][23] /* ty=uint64 */, %var_3267)
}

def @func_4879() -> Tensor[(3, 13, 5), float64] {
  %385 = @func_3410() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(3, 13, 5), float64]) */;
  %385.0
}

def @func_5038(%var_5015: Tensor[(11, 1, 5), float64]) -> (Tensor[(11, 1, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) {
  %386 = cast(%var_5015, dtype="float64") /* ty=Tensor[(11, 1, 5), float64] */;
  %387 = cast(meta[relay.Constant][24] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %388 = reshape(%387, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %389 = @func_1534(%388) /* ty=(Tensor[(2, 4, 16), float32],) */;
  %390 = acos(%386) /* ty=Tensor[(11, 1, 5), float64] */;
  %391 = %389.0;
  (%390, %391, meta[relay.Constant][24] /* ty=Tensor[(128), float32] */)
}

def @func_5083(%var_5072: Tensor[(1, 3, 1), float32]) -> (Tensor[(9, 3, 12), float32],) {
  %392 = cast(%var_5072, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %393 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 3, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 12), float32] */;
  %394 = floor_divide(%392, %393) /* ty=Tensor[(9, 3, 12), float32] */;
  (%394,)
}

def @func_3466(%var_3459: Tensor[(4, 8, 13), float32]) -> (Tensor[(2, 4, 16), float32], Tensor[(4, 8, 13), bool]) {
  %395 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %396 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
  %397 = %396.1;
  %398 = cast(%var_3459, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %402 = %395.0;
  %403 = equal(%400, %401) /* ty=Tensor[(4, 8, 13), bool] */;
  (%402, %403)
}

def @func_2191() -> (Tensor[(4, 8, 13), float32],) {
  %404 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
  %405 = %404.1;
  (%405,)
}

def @func_5310() -> (Tensor[(3, 13, 5), float64],) {
  %406 = @func_2252() /* ty=Tensor[(3, 13, 5), float64] */;
  (%406,)
}

def @func_3993(%var_3896: int32, %var_3925: Tensor[(128), float32], %var_3949: Tensor[(2, 4, 16), bool]) -> (Tensor[(2, 4, 16), int32], Tensor[(2, 4, 16), float32], Tensor[(2, 128), float32]) {
  %407 = cast(%var_3925, dtype="float32") /* ty=Tensor[(128), float32] */;
  %408 = reshape(%407, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %409 = @func_1534(%408) /* ty=(Tensor[(2, 4, 16), float32],) */;
  %410 = %409.0;
  %411 = cast(%410, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %412 = cast(%var_3896, dtype="bool") /* ty=bool */;
  %413 = greater(%411, %412) /* ty=Tensor[(2, 4, 16), bool] */;
  %414 = cast(%var_3949, dtype="int32") /* ty=Tensor[(2, 4, 16), int32] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="int32") /* ty=Tensor[(2, 4, 16), int32] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %418 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %419 = cast(%var_3896, dtype="int32") /* ty=int32 */;
  %420 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 1), int32] */, dtype="int32") /* ty=Tensor[(2, 1), int32] */;
  %421 = maximum(%419, %420) /* ty=Tensor[(2, 1), int32] */;
  %422 = cast(%var_3925, dtype="bool") /* ty=Tensor[(128), bool] */;
  %423 = cast(%421, dtype="bool") /* ty=Tensor[(2, 1), bool] */;
  %424 = not_equal(%422, %423) /* ty=Tensor[(2, 128), bool] */;
  %425 = cast(%424, dtype="bool") /* ty=Tensor[(2, 128), bool] */;
  %426 = cast(%var_3925, dtype="bool") /* ty=Tensor[(128), bool] */;
  %427 = equal(%425, %426) /* ty=Tensor[(2, 128), bool] */;
  %428 = cast(%427, dtype="float32") /* ty=Tensor[(2, 128), float32] */;
  %429 = right_shift(%416, %417) /* ty=Tensor[(2, 4, 16), int32] */;
  %430 = %418.1;
  %431 = exp(%428) /* ty=Tensor[(2, 128), float32] */;
  (%429, %430, %431)
}

def @func_2708(%var_2611: Tensor[(13, 4, 16), float32], %var_2612: Tensor[(13, 4, 16), float32]) -> (Tensor[(13, 4, 16), float32], Tensor[(128), float64], Tensor[(13, 4, 16), float64], Tensor[(13, 4, 16), bool], Tensor[(13, 4, 16), int16], Tensor[(13, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(12), uint64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) {
  %432 = cast(%var_2612, dtype="float32") /* ty=Tensor[(13, 4, 16), float32] */;
  %433 = shape_of(%var_2611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%var_2611, dtype="float32") /* ty=Tensor[(13, 4, 16), float32] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %436 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %437 = cast(%var_2612, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %438 = shape_of(%var_2611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_2611, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %441 = cast(%var_2612, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %442 = sqrt(%441) /* ty=Tensor[(13, 4, 16), float64] */;
  %443 = cast(%442, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %444 = acos(%443) /* ty=Tensor[(13, 4, 16), float64] */;
  %445 = cast(%var_2611, dtype="bool") /* ty=Tensor[(13, 4, 16), bool] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="bool") /* ty=Tensor[(13, 4, 16), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %449 = cast(%442, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %450 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%444, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %453 = mod(%451, %452) /* ty=Tensor[(13, 4, 16), float64] */;
  %454 = cast(%444, dtype="int16") /* ty=Tensor[(13, 4, 16), int16] */;
  %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%453, dtype="int16") /* ty=Tensor[(13, 4, 16), int16] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %458 = cast(%444, dtype="float32") /* ty=Tensor[(13, 4, 16), float32] */;
  %459 = cast(meta[relay.Constant][27] /* ty=Tensor[(432), uint16] */, dtype="uint16") /* ty=Tensor[(432), uint16] */;
  %460 = cast(meta[relay.Constant][28] /* ty=Tensor[(12), uint64] */, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %461 = cast(meta[relay.Constant][29] /* ty=Tensor[(60), uint64] */, dtype="uint64") /* ty=Tensor[(60), uint64] */;
  %462 = reshape(%459, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint16] */;
  %463 = reshape(%460, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %464 = reshape(%461, newshape=[60, 1]) /* ty=Tensor[(60, 1), uint64] */;
  %465 = @func_907(%462, %463, %464) /* ty=(Tensor[(4, 12, 9), bool], Tensor[(5, 3, 4), float64], Tensor[(12), uint64], Tensor[(60, 1), uint64], Tensor[(5, 3, 4), float64], Tensor[(4, 12, 9), int8]) */;
  %466 = floor_mod(%434, %435) /* ty=Tensor[(13, 4, 16), float32] */;
  %467 = %436.0;
  %468 = divide(%439, %440) /* ty=Tensor[(13, 4, 16), float64] */;
  %469 = less(%447, %448) /* ty=Tensor[(13, 4, 16), bool] */;
  %470 = add(%456, %457) /* ty=Tensor[(13, 4, 16), int16] */;
  %471 = tan(%458) /* ty=Tensor[(13, 4, 16), float32] */;
  %472 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %473 = %465.2;
  (%466, %467, %468, %469, %470, %471, %472, %473, meta[relay.Constant][27] /* ty=Tensor[(432), uint16] */, meta[relay.Constant][28] /* ty=Tensor[(12), uint64] */, meta[relay.Constant][29] /* ty=Tensor[(60), uint64] */)
}

def @func_4326(%var_4324: Tensor[(260, 2), float32]) -> (Tensor[(416, 2), float32], Tensor[(416), float32], Tensor[(1, 832), float32], Tensor[(2, 4, 16), int64], Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), uint64], Tensor[(2, 4, 16), float64], Tensor[(10, 13, 4), float32], Tensor[(260, 2), float32]) {
  %474 = cast(meta[relay.Constant][30] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %475 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 832), float32] */, dtype="float32") /* ty=Tensor[(1, 832), float32] */;
  %476 = reshape(%474, newshape=[416]) /* ty=Tensor[(416), float32] */;
  %477 = reshape(%475, newshape=[416, 2]) /* ty=Tensor[(416, 2), float32] */;
  %478 = @func_3698(%476, %477) /* ty=(Tensor[(416), bool], Tensor[(432), uint16], Tensor[(416, 2), float32]) */;
  %479 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %480 = %479.1;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %482 = reshape(%481, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %483 = cast(%480, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %484 = log(%483) /* ty=Tensor[(2, 4, 16), float32] */;
  %485 = cast(%484, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %486 = sqrt(%485) /* ty=Tensor[(2, 4, 16), float32] */;
  %487 = cast(%484, dtype="uint64") /* ty=Tensor[(2, 4, 16), uint64] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="uint64") /* ty=Tensor[(2, 4, 16), uint64] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %491 = cast(%484, dtype="float64") /* ty=Tensor[(2, 4, 16), float64] */;
  %492 = cast(%var_4324, dtype="float32") /* ty=Tensor[(260, 2), float32] */;
  %493 = reshape(%492, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), float32] */;
  %494 = @func_3208(%493) /* ty=(Tensor[(10, 13, 4), float32],) */;
  %495 = %478.2;
  %496 = @func_2291(%482) /* ty=Tensor[(2, 4, 16), int64] */;
  %497 = @func_2252() /* ty=Tensor[(3, 13, 5), float64] */;
  %498 = left_shift(%489, %490) /* ty=Tensor[(2, 4, 16), uint64] */;
  %499 = exp(%491) /* ty=Tensor[(2, 4, 16), float64] */;
  %500 = %494.0;
  (%495, meta[relay.Constant][30] /* ty=Tensor[(416), float32] */, meta[relay.Constant][31] /* ty=Tensor[(1, 832), float32] */, %496, %497, %498, %499, %500, %var_4324)
}

def @func_2749(%var_2728: Tensor[(4, 8, 13), float32], %var_2746: Tensor[(128), float32]) -> (Tensor[(4, 8, 13), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) {
  %501 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
  %502 = %501.1;
  %503 = cast(%var_2728, dtype="float64") /* ty=Tensor[(4, 8, 13), float64] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="float64") /* ty=Tensor[(4, 8, 13), float64] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %507 = cast(%var_2746, dtype="float32") /* ty=Tensor[(128), float32] */;
  %508 = reshape(%507, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %509 = floor_divide(%505, %506) /* ty=Tensor[(4, 8, 13), float64] */;
  %510 = @func_2291(%508) /* ty=Tensor[(2, 4, 16), int64] */;
  (%509, %510, %var_2746)
}

def @func_5551(%var_5522: Tensor[(832), float32]) -> (Tensor[(832), uint16], Tensor[(3, 13, 5), float64]) {
  %511 = @func_3080() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(13, 4, 16), float64], Tensor[(832), float32]) */;
  %512 = %511.2;
  %513 = cast(%var_5522, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(1), int32] */;
  %515 = cast(%512, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %517 = minimum(%515, %516) /* ty=Tensor[(832), uint16] */;
  %518 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  (%517, %518)
}

def @func_6245(%var_6242: Tensor[(192), uint64]) -> (Tensor[(128), float64], Tensor[(48, 4), float64], Tensor[(192), uint64]) {
  %519 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
  %520 = %519.0;
  %521 = cast(%520, dtype="float32") /* ty=Tensor[(128), float32] */;
  %522 = cast(%var_6242, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %523 = cast(%var_6242, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %524 = reshape(%521, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %525 = reshape(%522, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint64] */;
  %526 = reshape(%523, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint64] */;
  %527 = @func_4124(%524, %525, %526) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), bool], Tensor[(16, 12, 1), float32], uint64, Tensor[(48, 4), float64], Tensor[(416), float32], Tensor[(2, 208), float32], Tensor[(48, 4), float32]) */;
  %528 = %527.4;
  (%520, %528, %var_6242)
}

def @func_6473(%var_6440: Tensor[(3, 1, 16), float64], %var_6447: Tensor[(3, 15, 16), float64], %var_6462: Tensor[(128), float64]) -> (Tensor[(3, 1, 16), float64], Tensor[(3, 13, 5), float64], Tensor[(3, 15, 16), bool], Tensor[(128), uint64], Tensor[(128), float64]) {
  %529 = cast(8.32966f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %530 = cast(%var_6440, dtype="float64") /* ty=Tensor[(3, 1, 16), float64] */;
  %531 = cast(%var_6440, dtype="bool") /* ty=Tensor[(3, 1, 16), bool] */;
  %532 = cast(%var_6447, dtype="bool") /* ty=Tensor[(3, 15, 16), bool] */;
  %533 = cast(%var_6462, dtype="float64") /* ty=Tensor[(128), float64] */;
  %534 = cast(%var_6462, dtype="float64") /* ty=Tensor[(128), float64] */;
  %535 = reshape(%533, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %536 = reshape(%534, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %537 = @func_2966(%535, %536) /* ty=(Tensor[(128), uint32], Tensor[(128), uint64]) */;
  %538 = divide(%529, %530) /* ty=Tensor[(3, 1, 16), float64] */;
  %539 = @func_4879() /* ty=Tensor[(3, 13, 5), float64] */;
  %540 = logical_and(%531, %532) /* ty=Tensor[(3, 15, 16), bool] */;
  %541 = %537.1;
  (%538, %539, %540, %541, %var_6462)
}

def @func_5596() -> Tensor[(2, 4, 16), float32] {
  %542 = @func_4839() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %542.0
}

def @func_6495() -> Tensor[(128), float32] {
  %543 = @func_4934() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), float32], Tensor[(128), float64], Tensor[(2, 4, 16), bool]) */;
  %543.1
}

def @func_4747(%var_4704: Tensor[(1, 192), uint64], %var_4717: Tensor[(2, 4, 16), float32]) -> (uint64, Tensor[(2, 4, 16), int8], Tensor[(1, 192), float64]) {
  %544 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %545 = %544.0;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %547 = cast(%var_4704, dtype="uint64") /* ty=Tensor[(1, 192), uint64] */;
  %548 = cast(%var_4704, dtype="uint64") /* ty=Tensor[(1, 192), uint64] */;
  %549 = reshape(%546, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %550 = reshape(%547, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint64] */;
  %551 = reshape(%548, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint64] */;
  %552 = @func_4124(%549, %550, %551) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), bool], Tensor[(16, 12, 1), float32], uint64, Tensor[(48, 4), float64], Tensor[(416), float32], Tensor[(2, 208), float32], Tensor[(48, 4), float32]) */;
  %553 = cast(%var_4717, dtype="int8") /* ty=Tensor[(2, 4, 16), int8] */;
  %554 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%545, dtype="int8") /* ty=Tensor[(2, 4, 16), int8] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %557 = cast(%var_4704, dtype="float32") /* ty=Tensor[(1, 192), float32] */;
  %558 = atan(%557) /* ty=Tensor[(1, 192), float32] */;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
  %560 = %552.3;
  %561 = bitwise_and(%555, %556) /* ty=Tensor[(2, 4, 16), int8] */;
  %562 = cosh(%559) /* ty=Tensor[(1, 192), float64] */;
  (%560, %561, %562)
}

def @func_6295(%var_6284: Tensor[(12, 4, 16), uint64]) -> (Tensor[(12, 4, 16), uint64],) {
  %563 = cast(%var_6284, dtype="uint64") /* ty=Tensor[(12, 4, 16), uint64] */;
  %564 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(12, 4, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 4, 16), uint64] */, dtype="uint64") /* ty=Tensor[(12, 4, 16), uint64] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %567 = right_shift(%565, %566) /* ty=Tensor[(12, 4, 16), uint64] */;
  (%567,)
}

def @func_3829(%var_3789: Tensor[(3328), bool]) -> (Tensor[(13, 6, 7), float64], Tensor[(13, 6, 7), float64], Tensor[(432), uint16], Tensor[(3328), bool], Tensor[(12), uint64]) {
  %568 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 6, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 7), float64] */;
  %569 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 6, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 7), float64] */;
  %570 = cast(%var_3789, dtype="bool") /* ty=Tensor[(3328), bool] */;
  %571 = cast(meta[relay.Constant][34] /* ty=Tensor[(12), uint64] */, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %572 = reshape(%570, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), bool] */;
  %573 = reshape(%571, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %574 = @func_1239(%572, %573) /* ty=(Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
  %575 = exp(%568) /* ty=Tensor[(13, 6, 7), float64] */;
  %576 = atanh(%569) /* ty=Tensor[(13, 6, 7), float64] */;
  %577 = %574.2;
  (%575, %576, %577, %var_3789, meta[relay.Constant][34] /* ty=Tensor[(12), uint64] */)
}

def @func_4934() -> (Tensor[(3, 13, 5), float64], Tensor[(128), float32], Tensor[(128), float64], Tensor[(2, 4, 16), bool]) {
  %578 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %580 = cast(meta[relay.Constant][35] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %581 = reshape(%580, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %582 = @func_1858(%581) /* ty=(Tensor[(128), float32], Tensor[(128), float32]) */;
  %583 = cast(meta[relay.Constant][35] /* ty=Tensor[(128), float64] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %584 = reshape(%583, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %585 = @func_3626(%584) /* ty=(Tensor[(60), uint64], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(605, 2), int8], Tensor[(2, 4, 16), int8], Tensor[(2, 4, 16), bool], Tensor[(2, 4, 16), float32], Tensor[(4, 48), float64]) */;
  %586 = exp(%579) /* ty=Tensor[(3, 13, 5), float64] */;
  %587 = %582.0;
  %588 = %585.6;
  (%586, %587, meta[relay.Constant][35] /* ty=Tensor[(128), float64] */, %588)
}

def @main(%var_6540: Tensor[(16, 26), float32]) -> (Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), bool], Tensor[(16, 26), float32], Tensor[(12, 9, 7), bool], bool, Tensor[(9, 84), float64]) {
  %589 = @func_5328() /* ty=Tensor[(2, 4, 16), float32] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %591 = cast(%var_6540, dtype="float32") /* ty=Tensor[(16, 26), float32] */;
  %592 = reshape(%590, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %593 = reshape(%591, newshape=[416]) /* ty=Tensor[(416), float32] */;
  %594 = @func_4456(%592, %593) /* ty=(Tensor[(2, 4, 16), bool], Tensor[(416), float32], Tensor[(2, 4, 16), float32]) */;
  %595 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %596 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 84), bool] */, dtype="bool") /* ty=Tensor[(9, 84), bool] */;
  %597 = reshape(%595, newshape=[]) /* ty=bool */;
  %598 = reshape(%596, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), bool] */;
  %599 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 84), bool] */, dtype="float64") /* ty=Tensor[(9, 84), float64] */;
  %600 = %594.0;
  %601 = @func_1496(%597, %598) /* ty=Tensor[(12, 9, 7), bool] */;
  %602 = asinh(%599) /* ty=Tensor[(9, 84), float64] */;
  (%589, %600, %var_6540, %601, False /* ty=bool */, %602)
}

def @func_5328() -> Tensor[(2, 4, 16), float32] {
  %603 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %603.0
}

def @func_3888() -> Tensor[(128), float64] {
  %604 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
  %604.0
}

def @func_1496(%var_1475: bool, %var_1476: Tensor[(12, 9, 7), bool]) -> Tensor[(12, 9, 7), bool] {
  %605 = cast(%var_1475, dtype="bool") /* ty=bool */;
  %606 = cast(%var_1476, dtype="bool") /* ty=Tensor[(12, 9, 7), bool] */;
  logical_and(%605, %606) /* ty=Tensor[(12, 9, 7), bool] */
}

def @func_2240() -> (Tensor[(128), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32], Tensor[(128), float64]) {
  %607 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %608 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %609 = %607.0;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(128), float64] */;
  %611 = reshape(%610, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %612 = @func_1858(%611) /* ty=(Tensor[(128), float32], Tensor[(128), float32]) */;
  %613 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %614 = %608.1;
  %615 = %612.1;
  %616 = %613.0;
  (%609, %614, %615, %616)
}

def @func_907(%var_868: Tensor[(4, 12, 9), uint16], %var_887: Tensor[(12), uint64], %var_888: Tensor[(60, 1), uint64]) -> (Tensor[(4, 12, 9), bool], Tensor[(5, 3, 4), float64], Tensor[(12), uint64], Tensor[(60, 1), uint64], Tensor[(5, 3, 4), float64], Tensor[(4, 12, 9), int8]) {
  %617 = cast(%var_868, dtype="bool") /* ty=Tensor[(4, 12, 9), bool] */;
  %618 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 9), uint16] */, dtype="bool") /* ty=Tensor[(4, 12, 9), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = cast(%var_887, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %622 = cast(%var_888, dtype="uint64") /* ty=Tensor[(60, 1), uint64] */;
  %623 = reshape(%621, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint64] */;
  %624 = reshape(%622, newshape=[5, 3, 4]) /* ty=Tensor[(5, 3, 4), uint64] */;
  %625 = cast(%var_887, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %626 = @func_703(%623, %624) /* ty=Tensor[(5, 3, 4), float64] */;
  %627 = cast(%626, dtype="uint64") /* ty=Tensor[(5, 3, 4), uint64] */;
  %628 = reshape(%625, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint64] */;
  %629 = reshape(%627, newshape=[5, 3, 4]) /* ty=Tensor[(5, 3, 4), uint64] */;
  %630 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 12, 9), uint16] */, dtype="int8") /* ty=Tensor[(4, 12, 9), int8] */;
  %631 = shape_of(%var_868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_868, dtype="int8") /* ty=Tensor[(4, 12, 9), int8] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %634 = greater(%619, %620) /* ty=Tensor[(4, 12, 9), bool] */;
  %635 = @func_703(%628, %629) /* ty=Tensor[(5, 3, 4), float64] */;
  %636 = minimum(%632, %633) /* ty=Tensor[(4, 12, 9), int8] */;
  (%634, %626, %var_887, %var_888, %635, %636)
}

def @func_3080() -> (Tensor[(2, 4, 16), float32], Tensor[(13, 4, 16), float64], Tensor[(832), float32]) {
  %637 = @func_2824() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32], Tensor[(2, 4, 16), float32], Tensor[(504), float32]) */;
  %638 = cast(meta[relay.Constant][39] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %639 = cast(meta[relay.Constant][39] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %640 = reshape(%638, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
  %641 = reshape(%639, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
  %642 = @func_2708(%640, %641) /* ty=(Tensor[(13, 4, 16), float32], Tensor[(128), float64], Tensor[(13, 4, 16), float64], Tensor[(13, 4, 16), bool], Tensor[(13, 4, 16), int16], Tensor[(13, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(12), uint64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
  %643 = %637.3;
  %644 = %642.2;
  (%643, %644, meta[relay.Constant][39] /* ty=Tensor[(832), float32] */)
}

def @func_4645() -> (Tensor[(128), float32], Tensor[(3, 11, 3), bool], Tensor[(99), float64], Tensor[(416, 2), uint64], Tensor[(832), float32]) {
  %645 = @func_2240() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32], Tensor[(128), float64]) */;
  %646 = cast(meta[relay.Constant][40] /* ty=Tensor[(99), float64] */, dtype="float64") /* ty=Tensor[(99), float64] */;
  %647 = reshape(%646, newshape=[3, 11, 3]) /* ty=Tensor[(3, 11, 3), float64] */;
  %648 = @func_4368(%647) /* ty=(Tensor[(3, 11, 3), bool], Tensor[(3, 11, 3), float32]) */;
  %649 = cast(meta[relay.Constant][41] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %650 = cast(meta[relay.Constant][41] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %651 = reshape(%649, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %652 = reshape(%650, newshape=[416, 2]) /* ty=Tensor[(416, 2), float32] */;
  %653 = @func_4225(%651, %652) /* ty=(Tensor[(416), float32], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(416, 2), uint64]) */;
  %654 = %645.2;
  %655 = %648.0;
  %656 = %653.3;
  (%654, %655, meta[relay.Constant][40] /* ty=Tensor[(99), float64] */, %656, meta[relay.Constant][41] /* ty=Tensor[(832), float32] */)
}

def @func_2541(%var_2498: Tensor[(416), float32]) -> (Tensor[(416), float32], Tensor[(14, 6, 12), uint32], Tensor[(1008), uint32]) {
  %657 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
  %658 = %657.2;
  %659 = cast(%var_2498, dtype="float32") /* ty=Tensor[(416), float32] */;
  %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(1), int32] */;
  %661 = cast(%658, dtype="float32") /* ty=Tensor[(416), float32] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?), float32] */;
  %663 = cast(meta[relay.Constant][42] /* ty=Tensor[(1008), uint32] */, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %664 = reshape(%663, newshape=[14, 6, 12]) /* ty=Tensor[(14, 6, 12), uint32] */;
  %665 = floor_divide(%661, %662) /* ty=Tensor[(416), float32] */;
  %666 = @func_834(%664) /* ty=Tensor[(14, 6, 12), uint32] */;
  (%665, %666, meta[relay.Constant][42] /* ty=Tensor[(1008), uint32] */)
}

def @func_2824() -> (Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32], Tensor[(2, 4, 16), float32], Tensor[(504), float32]) {
  %667 = cast(meta[relay.Constant][43] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %668 = reshape(%667, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %669 = cast(meta[relay.Constant][44] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %670 = reshape(%669, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), float32] */;
  %671 = @func_2478(%670) /* ty=(Tensor[(4, 14, 9), float32], Tensor[(2, 4, 16), float32]) */;
  %672 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %673 = @func_2291(%668) /* ty=Tensor[(2, 4, 16), int64] */;
  %674 = %671.1;
  (%672, %673, meta[relay.Constant][43] /* ty=Tensor[(128), float32] */, %674, meta[relay.Constant][44] /* ty=Tensor[(504), float32] */)
}

def @func_4368(%var_4344: Tensor[(3, 11, 3), float64]) -> (Tensor[(3, 11, 3), bool], Tensor[(3, 11, 3), float32]) {
  %675 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 11, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 3), float64] */;
  %676 = shape_of(%var_4344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%var_4344, dtype="float64") /* ty=Tensor[(3, 11, 3), float64] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %679 = divide(%677, %678) /* ty=Tensor[(3, 11, 3), float64] */;
  %680 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 11, 3), float64] */, dtype="float32") /* ty=Tensor[(3, 11, 3), float32] */;
  %681 = sinh(%680) /* ty=Tensor[(3, 11, 3), float32] */;
  %682 = cast(%681, dtype="bool") /* ty=Tensor[(3, 11, 3), bool] */;
  %683 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%679, dtype="bool") /* ty=Tensor[(3, 11, 3), bool] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %686 = cast(%var_4344, dtype="float32") /* ty=Tensor[(3, 11, 3), float32] */;
  %687 = equal(%684, %685) /* ty=Tensor[(3, 11, 3), bool] */;
  %688 = tan(%686) /* ty=Tensor[(3, 11, 3), float32] */;
  (%687, %688)
}

def @func_4172(%var_4162: Tensor[(2, 4, 16), float32]) -> Tensor[(2, 4, 16), int64] {
  %689 = @func_2322() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %690 = %689.0;
  %691 = cast(%var_4162, dtype="int64") /* ty=Tensor[(2, 4, 16), int64] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="int64") /* ty=Tensor[(2, 4, 16), int64] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%693, %694) /* ty=Tensor[(2, 4, 16), int64] */
}

def @func_1785(%var_1763: Tensor[(12), uint64]) -> (Tensor[(3, 13, 5), float64], Tensor[(128), float64], Tensor[(16, 13, 16), bool], Tensor[(3328), bool], Tensor[(12), uint64], Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32]) {
  %695 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %696 = cast(%695, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %697 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %698 = cast(meta[relay.Constant][46] /* ty=Tensor[(3328), bool] */, dtype="bool") /* ty=Tensor[(3328), bool] */;
  %699 = cast(%var_1763, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %700 = reshape(%698, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), bool] */;
  %701 = reshape(%699, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %702 = @func_1239(%700, %701) /* ty=(Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
  %703 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %704 = tan(%696) /* ty=Tensor[(3, 13, 5), float64] */;
  %705 = %697.0;
  %706 = %702.0;
  %707 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %708 = %703.1;
  (%704, %705, %706, meta[relay.Constant][46] /* ty=Tensor[(3328), bool] */, %var_1763, %707, %708)
}

def @func_3208(%var_3184: Tensor[(10, 13, 4), float32]) -> (Tensor[(10, 13, 4), float32],) {
  %709 = cast(%var_3184, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %710 = atanh(%709) /* ty=Tensor[(10, 13, 4), float32] */;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %712 = log2(%711) /* ty=Tensor[(10, 13, 4), float32] */;
  (%712,)
}

def @func_1905() -> (Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) {
  %713 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %714 = cast(meta[relay.Constant][47] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %715 = reshape(%714, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), float32] */;
  %716 = %713.0;
  %717 = @func_1820(%715) /* ty=Tensor[(4, 8, 13), float32] */;
  (%716, %717, meta[relay.Constant][47] /* ty=Tensor[(416), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4246(%var_4241: Tensor[(3, 11), float32]) -> (Tensor[(3, 11), float32],) {
  %0 = cast(%var_4241, dtype="float32") /* ty=Tensor[(3, 11), float32] */;
  %1 = log2(%0) /* ty=Tensor[(3, 11), float32] */;
  (%1,)
}

def @func_2193() -> (Tensor[(4, 8, 13), float32],) {
  @func_2191() /* ty=(Tensor[(4, 8, 13), float32],) */
}

def @func_6477(%var_6474: Tensor[(3, 1, 16), float64], %var_6475: Tensor[(3, 15, 16), float64], %var_6476: Tensor[(128), float64]) -> (Tensor[(3, 1, 16), float64], Tensor[(3, 13, 5), float64], Tensor[(3, 15, 16), bool], Tensor[(128), uint64], Tensor[(128), float64]) {
  %15 = fn (%var_6440: Tensor[(3, 1, 16), float64], %var_6447: Tensor[(3, 15, 16), float64], %var_6462: Tensor[(128), float64]) -> (Tensor[(3, 1, 16), float64], Tensor[(3, 13, 5), float64], Tensor[(3, 15, 16), bool], Tensor[(128), uint64], Tensor[(128), float64]) {
    %2 = cast(8.32966f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %3 = cast(%var_6440, dtype="float64") /* ty=Tensor[(3, 1, 16), float64] */;
    %4 = cast(%var_6440, dtype="bool") /* ty=Tensor[(3, 1, 16), bool] */;
    %5 = cast(%var_6447, dtype="bool") /* ty=Tensor[(3, 15, 16), bool] */;
    %6 = cast(%var_6462, dtype="float64") /* ty=Tensor[(128), float64] */;
    %7 = cast(%var_6462, dtype="float64") /* ty=Tensor[(128), float64] */;
    %8 = reshape(%6, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %9 = reshape(%7, newshape=[128]) /* ty=Tensor[(128), float64] */;
    %10 = @func_2966(%8, %9) /* ty=(Tensor[(128), uint32], Tensor[(128), uint64]) */;
    %11 = divide(%2, %3) /* ty=Tensor[(3, 1, 16), float64] */;
    %12 = @func_4879() /* ty=Tensor[(3, 13, 5), float64] */;
    %13 = logical_and(%4, %5) /* ty=Tensor[(3, 15, 16), bool] */;
    %14 = %10.1;
    (%11, %12, %13, %14, %var_6462)
  };
  %15(%var_6474, %var_6475, %var_6476) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(3, 13, 5), float64], Tensor[(3, 15, 16), bool], Tensor[(128), uint64], Tensor[(128), float64]) */
}

def @func_5329() -> Tensor[(2, 4, 16), float32] {
  %17 = fn () -> Tensor[(2, 4, 16), float32] {
    %16 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
    %16.0
  };
  %17() /* ty=Tensor[(2, 4, 16), float32] */
}

def @func_3082() -> (Tensor[(2, 4, 16), float32], Tensor[(13, 4, 16), float64], Tensor[(832), float32]) {
  @func_3080() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(13, 4, 16), float64], Tensor[(832), float32]) */
}

def @func_2787() -> Tensor[(2, 4, 16), float32] {
  %19 = fn () -> Tensor[(2, 4, 16), float32] {
    %18 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
    %18.1
  };
  %19() /* ty=Tensor[(2, 4, 16), float32] */
}

def @func_5041(%var_5039: Tensor[(11, 1, 5), float64]) -> (Tensor[(11, 1, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) {
  @func_5038(%var_5039) /* ty=(Tensor[(11, 1, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */
}

def @func_2987(%var_2986: Tensor[(11, 11, 10), uint16]) -> Tensor[(11, 11, 10), uint16] {
  %24 = fn (%var_2973: Tensor[(11, 11, 10), uint16]) -> Tensor[(11, 11, 10), uint16] {
    %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 11, 10), uint16] */, dtype="uint16") /* ty=Tensor[(11, 11, 10), uint16] */;
    %21 = shape_of(%var_2973, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(%var_2973, dtype="uint16") /* ty=Tensor[(11, 11, 10), uint16] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_xor(%22, %23) /* ty=Tensor[(11, 11, 10), uint16] */
  };
  %24(%var_2986) /* ty=Tensor[(11, 11, 10), uint16] */
}

def @func_1496(%var_1475: bool, %var_1476: Tensor[(12, 9, 7), bool]) -> Tensor[(12, 9, 7), bool] {
  %25 = cast(%var_1475, dtype="bool") /* ty=bool */;
  %26 = cast(%var_1476, dtype="bool") /* ty=Tensor[(12, 9, 7), bool] */;
  logical_and(%25, %26) /* ty=Tensor[(12, 9, 7), bool] */
}

def @func_5085(%var_5084: Tensor[(1, 3, 1), float32]) -> (Tensor[(9, 3, 12), float32],) {
  %30 = fn (%var_5072: Tensor[(1, 3, 1), float32]) -> (Tensor[(9, 3, 12), float32],) {
    %27 = cast(%var_5072, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
    %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 3, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 12), float32] */;
    %29 = floor_divide(%27, %28) /* ty=Tensor[(9, 3, 12), float32] */;
    (%29,)
  };
  %30(%var_5084) /* ty=(Tensor[(9, 3, 12), float32],) */
}

def @func_5071() -> (Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) {
  %36 = fn () -> (Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) {
    %31 = @func_3410() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(3, 13, 5), float64]) */;
    %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
    %33 = reshape(%32, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
    %34 = %31.1;
    %35 = @func_2291(%33) /* ty=Tensor[(2, 4, 16), int64] */;
    (%34, %35, meta[relay.Constant][2] /* ty=Tensor[(128), float32] */)
  };
  %36() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) */
}

def @func_4483() -> (Tensor[(2, 4, 16), float32],) {
  %39 = fn () -> (Tensor[(2, 4, 16), float32],) {
    %37 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
    %38 = %37.0;
    (%38,)
  };
  %39() /* ty=(Tensor[(2, 4, 16), float32],) */
}

def @func_5476() -> Tensor[(2, 4, 16), float32] {
  %41 = fn () -> Tensor[(2, 4, 16), float32] {
    %40 = @func_4482() /* ty=(Tensor[(2, 4, 16), float32],) */;
    %40.0
  };
  %41() /* ty=Tensor[(2, 4, 16), float32] */
}

def @func_5554(%var_5552: Tensor[(832), float32]) -> (Tensor[(832), uint16], Tensor[(3, 13, 5), float64]) {
  @func_5551(%var_5552) /* ty=(Tensor[(832), uint16], Tensor[(3, 13, 5), float64]) */
}

def @func_5596() -> Tensor[(2, 4, 16), float32] {
  %42 = @func_4839() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %42.0
}

def @func_1823(%var_1821: Tensor[(4, 8, 13), float32]) -> Tensor[(4, 8, 13), float32] {
  @func_1820(%var_1821) /* ty=Tensor[(4, 8, 13), float32] */
}

def @func_5705(%var_5703: Tensor[(99), float64], %var_5704: Tensor[(3328), bool]) -> (Tensor[(2, 4, 16), float32], Tensor[(4, 104), float32], Tensor[(3, 11, 3), float32], Tensor[(99), float32], Tensor[(2, 4, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(3328), bool], Tensor[(12), uint64]) {
  @func_5701(%var_5703, %var_5704) /* ty=(Tensor[(2, 4, 16), float32], Tensor[(4, 104), float32], Tensor[(3, 11, 3), float32], Tensor[(99), float32], Tensor[(2, 4, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(3328), bool], Tensor[(12), uint64]) */
}

def @func_6247(%var_6246: Tensor[(192), uint64]) -> (Tensor[(128), float64], Tensor[(48, 4), float64], Tensor[(192), uint64]) {
  %53 = fn (%var_6242: Tensor[(192), uint64]) -> (Tensor[(128), float64], Tensor[(48, 4), float64], Tensor[(192), uint64]) {
    %43 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
    %44 = %43.0;
    %45 = cast(%44, dtype="float32") /* ty=Tensor[(128), float32] */;
    %46 = cast(%var_6242, dtype="uint64") /* ty=Tensor[(192), uint64] */;
    %47 = cast(%var_6242, dtype="uint64") /* ty=Tensor[(192), uint64] */;
    %48 = reshape(%45, newshape=[128]) /* ty=Tensor[(128), float32] */;
    %49 = reshape(%46, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint64] */;
    %50 = reshape(%47, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint64] */;
    %51 = @func_4124(%48, %49, %50) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), bool], Tensor[(16, 12, 1), float32], uint64, Tensor[(48, 4), float64], Tensor[(416), float32], Tensor[(2, 208), float32], Tensor[(48, 4), float32]) */;
    %52 = %51.4;
    (%44, %52, %var_6242)
  };
  %53(%var_6246) /* ty=(Tensor[(128), float64], Tensor[(48, 4), float64], Tensor[(192), uint64]) */
}

def @func_6406() -> Tensor[(99), float64] {
  @func_5006() /* ty=Tensor[(99), float64] */
}

def @func_4750(%var_4748: Tensor[(1, 192), uint64], %var_4749: Tensor[(2, 4, 16), float32]) -> (uint64, Tensor[(2, 4, 16), int8], Tensor[(1, 192), float64]) {
  %73 = fn (%var_4704: Tensor[(1, 192), uint64], %var_4717: Tensor[(2, 4, 16), float32]) -> (uint64, Tensor[(2, 4, 16), int8], Tensor[(1, 192), float64]) {
    %54 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
    %55 = %54.0;
    %56 = cast(%55, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
    %57 = cast(%var_4704, dtype="uint64") /* ty=Tensor[(1, 192), uint64] */;
    %58 = cast(%var_4704, dtype="uint64") /* ty=Tensor[(1, 192), uint64] */;
    %59 = reshape(%56, newshape=[128]) /* ty=Tensor[(128), float32] */;
    %60 = reshape(%57, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint64] */;
    %61 = reshape(%58, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint64] */;
    %62 = @func_4124(%59, %60, %61) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), bool], Tensor[(16, 12, 1), float32], uint64, Tensor[(48, 4), float64], Tensor[(416), float32], Tensor[(2, 208), float32], Tensor[(48, 4), float32]) */;
    %63 = cast(%var_4717, dtype="int8") /* ty=Tensor[(2, 4, 16), int8] */;
    %64 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
    %65 = cast(%55, dtype="int8") /* ty=Tensor[(2, 4, 16), int8] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %67 = cast(%var_4704, dtype="float32") /* ty=Tensor[(1, 192), float32] */;
    %68 = atan(%67) /* ty=Tensor[(1, 192), float32] */;
    %69 = cast(%68, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
    %70 = %62.3;
    %71 = bitwise_and(%65, %66) /* ty=Tensor[(2, 4, 16), int8] */;
    %72 = cosh(%69) /* ty=Tensor[(1, 192), float64] */;
    (%70, %71, %72)
  };
  %73(%var_4748, %var_4749) /* ty=(uint64, Tensor[(2, 4, 16), int8], Tensor[(1, 192), float64]) */
}

def @func_1536(%var_1535: Tensor[(2, 4, 16), float32]) -> (Tensor[(2, 4, 16), float32],) {
  %76 = fn (%var_1527: Tensor[(2, 4, 16), float32]) -> (Tensor[(2, 4, 16), float32],) {
    %74 = cast(%var_1527, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
    %75 = log2(%74) /* ty=Tensor[(2, 4, 16), float32] */;
    (%75,)
  };
  %76(%var_1535) /* ty=(Tensor[(2, 4, 16), float32],) */
}

def @func_2291(%var_2278: Tensor[(2, 4, 16), float32]) -> Tensor[(2, 4, 16), int64] {
  %77 = @func_2240() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32], Tensor[(128), float64]) */;
  %78 = %77.1;
  %79 = cast(%var_2278, dtype="int64") /* ty=Tensor[(2, 4, 16), int64] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="int64") /* ty=Tensor[(2, 4, 16), int64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%81, %82) /* ty=Tensor[(2, 4, 16), int64] */
}

def @func_2478(%var_2462: Tensor[(4, 14, 9), float32]) -> (Tensor[(4, 14, 9), float32], Tensor[(2, 4, 16), float32]) {
  %83 = cast(%var_2462, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
  %84 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %85 = log2(%83) /* ty=Tensor[(4, 14, 9), float32] */;
  %86 = %84.1;
  (%85, %86)
}

def @func_2254() -> Tensor[(3, 13, 5), float64] {
  @func_2252() /* ty=Tensor[(3, 13, 5), float64] */
}

def @func_2240() -> (Tensor[(128), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32], Tensor[(128), float64]) {
  %87 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %88 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %89 = %87.0;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(128), float64] */;
  %91 = reshape(%90, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %92 = @func_1858(%91) /* ty=(Tensor[(128), float32], Tensor[(128), float32]) */;
  %93 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %94 = %88.1;
  %95 = %92.1;
  %96 = %93.0;
  (%89, %94, %95, %96)
}

def @func_3052() -> (Tensor[(2, 4, 16), float32],) {
  %97 = @func_2786() /* ty=Tensor[(2, 4, 16), float32] */;
  (%97,)
}

def @func_706(%var_704: Tensor[(1, 3, 4), uint64], %var_705: Tensor[(5, 3, 4), uint64]) -> Tensor[(5, 3, 4), float64] {
  %102 = fn (%var_684: Tensor[(1, 3, 4), uint64], %var_685: Tensor[(5, 3, 4), uint64]) -> Tensor[(5, 3, 4), float64] {
    %98 = cast(%var_684, dtype="uint64") /* ty=Tensor[(1, 3, 4), uint64] */;
    %99 = cast(%var_685, dtype="uint64") /* ty=Tensor[(5, 3, 4), uint64] */;
    %100 = bitwise_and(%98, %99) /* ty=Tensor[(5, 3, 4), uint64] */;
    %101 = cast(%100, dtype="float64") /* ty=Tensor[(5, 3, 4), float64] */;
    cos(%101) /* ty=Tensor[(5, 3, 4), float64] */
  };
  %102(%var_704, %var_705) /* ty=Tensor[(5, 3, 4), float64] */
}

def @func_1602() -> Tensor[(3, 13, 5), float64] {
  %103 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  erf(%103) /* ty=Tensor[(3, 13, 5), float64] */
}

def @func_3054() -> (Tensor[(2, 4, 16), float32],) {
  @func_3052() /* ty=(Tensor[(2, 4, 16), float32],) */
}

def @func_4328(%var_4327: Tensor[(260, 2), float32]) -> (Tensor[(416, 2), float32], Tensor[(416), float32], Tensor[(1, 832), float32], Tensor[(2, 4, 16), int64], Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), uint64], Tensor[(2, 4, 16), float64], Tensor[(10, 13, 4), float32], Tensor[(260, 2), float32]) {
  %131 = fn (%var_4324: Tensor[(260, 2), float32]) -> (Tensor[(416, 2), float32], Tensor[(416), float32], Tensor[(1, 832), float32], Tensor[(2, 4, 16), int64], Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), uint64], Tensor[(2, 4, 16), float64], Tensor[(10, 13, 4), float32], Tensor[(260, 2), float32]) {
    %104 = cast(meta[relay.Constant][4] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
    %105 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 832), float32] */, dtype="float32") /* ty=Tensor[(1, 832), float32] */;
    %106 = reshape(%104, newshape=[416]) /* ty=Tensor[(416), float32] */;
    %107 = reshape(%105, newshape=[416, 2]) /* ty=Tensor[(416, 2), float32] */;
    %108 = @func_3698(%106, %107) /* ty=(Tensor[(416), bool], Tensor[(432), uint16], Tensor[(416, 2), float32]) */;
    %109 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
    %110 = %109.1;
    %111 = cast(%110, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
    %112 = reshape(%111, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
    %113 = cast(%110, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
    %114 = log(%113) /* ty=Tensor[(2, 4, 16), float32] */;
    %115 = cast(%114, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
    %116 = sqrt(%115) /* ty=Tensor[(2, 4, 16), float32] */;
    %117 = cast(%114, dtype="uint64") /* ty=Tensor[(2, 4, 16), uint64] */;
    %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%116, dtype="uint64") /* ty=Tensor[(2, 4, 16), uint64] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %121 = cast(%114, dtype="float64") /* ty=Tensor[(2, 4, 16), float64] */;
    %122 = cast(%var_4324, dtype="float32") /* ty=Tensor[(260, 2), float32] */;
    %123 = reshape(%122, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), float32] */;
    %124 = @func_3208(%123) /* ty=(Tensor[(10, 13, 4), float32],) */;
    %125 = %108.2;
    %126 = @func_2291(%112) /* ty=Tensor[(2, 4, 16), int64] */;
    %127 = @func_2252() /* ty=Tensor[(3, 13, 5), float64] */;
    %128 = left_shift(%119, %120) /* ty=Tensor[(2, 4, 16), uint64] */;
    %129 = exp(%121) /* ty=Tensor[(2, 4, 16), float64] */;
    %130 = %124.0;
    (%125, meta[relay.Constant][4] /* ty=Tensor[(416), float32] */, meta[relay.Constant][5] /* ty=Tensor[(1, 832), float32] */, %126, %127, %128, %129, %130, %var_4324)
  };
  %131(%var_4327) /* ty=(Tensor[(416, 2), float32], Tensor[(416), float32], Tensor[(1, 832), float32], Tensor[(2, 4, 16), int64], Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), uint64], Tensor[(2, 4, 16), float64], Tensor[(10, 13, 4), float32], Tensor[(260, 2), float32]) */
}

def @func_4456(%var_4415: Tensor[(2, 4, 16), float32], %var_4431: Tensor[(416), float32]) -> (Tensor[(2, 4, 16), bool], Tensor[(416), float32], Tensor[(2, 4, 16), float32]) {
  %132 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %133 = %132.1;
  %134 = cast(%var_4415, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = cast(%var_4431, dtype="float32") /* ty=Tensor[(416), float32] */;
  %139 = cast(%var_4415, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %140 = reshape(%138, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), float32] */;
  %141 = reshape(%139, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %142 = @func_2749(%140, %141) /* ty=(Tensor[(4, 8, 13), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) */;
  %143 = %142.1;
  %144 = cast(%var_4415, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %148 = logical_and(%136, %137) /* ty=Tensor[(2, 4, 16), bool] */;
  %149 = power(%146, %147) /* ty=Tensor[(2, 4, 16), float32] */;
  (%148, %var_4431, %149)
}

def @func_3411() -> (Tensor[(3, 13, 5), float64], Tensor[(3, 13, 5), float64]) {
  %153 = fn () -> (Tensor[(3, 13, 5), float64], Tensor[(3, 13, 5), float64]) {
    %150 = @func_2824() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32], Tensor[(2, 4, 16), float32], Tensor[(504), float32]) */;
    %151 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
    %152 = %150.0;
    (%151, %152)
  };
  %153() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(3, 13, 5), float64]) */
}

def @func_2242() -> (Tensor[(128), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32], Tensor[(128), float64]) {
  @func_2240() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32], Tensor[(128), float64]) */
}

def @func_2776() -> (Tensor[(2, 4, 16), float32],) {
  %156 = fn () -> (Tensor[(2, 4, 16), float32],) {
    %154 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
    %155 = %154.1;
    (%155,)
  };
  %156() /* ty=(Tensor[(2, 4, 16), float32],) */
}

def @func_4175(%var_4173: Tensor[(2, 4, 16), float32]) -> Tensor[(2, 4, 16), int64] {
  @func_4172(%var_4173) /* ty=Tensor[(2, 4, 16), int64] */
}

def @func_5345(%var_5343: Tensor[(15, 4), uint64]) -> (Tensor[(15, 4), uint64],) {
  @func_5342(%var_5343) /* ty=(Tensor[(15, 4), uint64],) */
}

def @func_3279(%var_3277: Tensor[(1210), uint16], %var_3278: Tensor[(192), uint64]) -> (Tensor[(2, 4, 16), float32], Tensor[(11, 11, 10), uint16], Tensor[(1210), uint16], Tensor[(3, 13, 5), float64], Tensor[(1, 12), uint64], Tensor[(16, 12, 1), float32], uint64, Tensor[(192), uint64]) {
  @func_3275(%var_3277, %var_3278) /* ty=(Tensor[(2, 4, 16), float32], Tensor[(11, 11, 10), uint16], Tensor[(1210), uint16], Tensor[(3, 13, 5), float64], Tensor[(1, 12), uint64], Tensor[(16, 12, 1), float32], uint64, Tensor[(192), uint64]) */
}

def @func_1858(%var_1848: Tensor[(128), float64]) -> (Tensor[(128), float32], Tensor[(128), float32]) {
  %157 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %158 = %157.0;
  %159 = cast(%var_1848, dtype="float32") /* ty=Tensor[(128), float32] */;
  %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(1), int32] */;
  %161 = cast(%158, dtype="float32") /* ty=Tensor[(128), float32] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?), float32] */;
  %163 = cast(%var_1848, dtype="float32") /* ty=Tensor[(128), float32] */;
  %164 = floor_divide(%161, %162) /* ty=Tensor[(128), float32] */;
  %165 = sqrt(%163) /* ty=Tensor[(128), float32] */;
  (%164, %165)
}

def @func_1500(%var_1498: bool, %var_1499: Tensor[(12, 9, 7), bool]) -> Tensor[(12, 9, 7), bool] {
  @func_1496(%var_1498, %var_1499) /* ty=Tensor[(12, 9, 7), bool] */
}

def @func_2191() -> (Tensor[(4, 8, 13), float32],) {
  %166 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
  %167 = %166.1;
  (%167,)
}

def @func_2752(%var_2750: Tensor[(4, 8, 13), float32], %var_2751: Tensor[(128), float32]) -> (Tensor[(4, 8, 13), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) {
  %178 = fn (%var_2728: Tensor[(4, 8, 13), float32], %var_2746: Tensor[(128), float32]) -> (Tensor[(4, 8, 13), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) {
    %168 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
    %169 = %168.1;
    %170 = cast(%var_2728, dtype="float64") /* ty=Tensor[(4, 8, 13), float64] */;
    %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
    %172 = cast(%169, dtype="float64") /* ty=Tensor[(4, 8, 13), float64] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %174 = cast(%var_2746, dtype="float32") /* ty=Tensor[(128), float32] */;
    %175 = reshape(%174, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
    %176 = floor_divide(%172, %173) /* ty=Tensor[(4, 8, 13), float64] */;
    %177 = @func_2291(%175) /* ty=Tensor[(2, 4, 16), int64] */;
    (%176, %177, %var_2746)
  };
  %178(%var_2750, %var_2751) /* ty=(Tensor[(4, 8, 13), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) */
}

def @func_5008() -> Tensor[(99), float64] {
  @func_5006() /* ty=Tensor[(99), float64] */
}

def @func_5968(%var_5955: Tensor[(128), float32]) -> (Tensor[(128), bool],) {
  %179 = @func_4934() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), float32], Tensor[(128), float64], Tensor[(2, 4, 16), bool]) */;
  %180 = %179.1;
  %181 = cast(%var_5955, dtype="bool") /* ty=Tensor[(128), bool] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(1), int32] */;
  %183 = cast(%180, dtype="bool") /* ty=Tensor[(128), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?), bool] */;
  %185 = greater_equal(%183, %184) /* ty=Tensor[(128), bool] */;
  (%185,)
}

def @func_3628(%var_3627: Tensor[(2, 4, 16), float32]) -> (Tensor[(60), uint64], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(605, 2), int8], Tensor[(2, 4, 16), int8], Tensor[(2, 4, 16), bool], Tensor[(2, 4, 16), float32], Tensor[(4, 48), float64]) {
  %231 = fn (%var_3587: Tensor[(2, 4, 16), float32]) -> (Tensor[(60), uint64], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(605, 2), int8], Tensor[(2, 4, 16), int8], Tensor[(2, 4, 16), bool], Tensor[(2, 4, 16), float32], Tensor[(4, 48), float64]) {
    %186 = cast(meta[relay.Constant][6] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %187 = cast(meta[relay.Constant][6] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %188 = reshape(%186, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
    %189 = reshape(%187, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
    %190 = @func_2708(%188, %189) /* ty=(Tensor[(13, 4, 16), float32], Tensor[(128), float64], Tensor[(13, 4, 16), float64], Tensor[(13, 4, 16), bool], Tensor[(13, 4, 16), int16], Tensor[(13, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(12), uint64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
    %191 = @func_3052() /* ty=(Tensor[(2, 4, 16), float32],) */;
    %192 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
    %193 = cast(meta[relay.Constant][7] /* ty=Tensor[(605, 2), uint16] */, dtype="uint16") /* ty=Tensor[(605, 2), uint16] */;
    %194 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 48), uint64] */, dtype="uint64") /* ty=Tensor[(4, 48), uint64] */;
    %195 = reshape(%193, newshape=[1210]) /* ty=Tensor[(1210), uint16] */;
    %196 = reshape(%194, newshape=[192]) /* ty=Tensor[(192), uint64] */;
    %197 = @func_3275(%195, %196) /* ty=(Tensor[(2, 4, 16), float32], Tensor[(11, 11, 10), uint16], Tensor[(1210), uint16], Tensor[(3, 13, 5), float64], Tensor[(1, 12), uint64], Tensor[(16, 12, 1), float32], uint64, Tensor[(192), uint64]) */;
    %198 = %197.1;
    %199 = cast(%198, dtype="int8") /* ty=Tensor[(11, 11, 10), int8] */;
    %200 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(605, 2), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %201 = cast(meta[relay.Constant][7] /* ty=Tensor[(605, 2), uint16] */, dtype="int8") /* ty=Tensor[(605, 2), int8] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %203 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
    %204 = %203.0;
    %205 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
    %206 = %205.0;
    %207 = cast(%206, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
    %208 = reshape(%207, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
    %209 = @func_1534(%208) /* ty=(Tensor[(2, 4, 16), float32],) */;
    %210 = %209.0;
    %211 = cast(%210, dtype="int8") /* ty=Tensor[(2, 4, 16), int8] */;
    %212 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
    %213 = cast(%204, dtype="int8") /* ty=Tensor[(2, 4, 16), int8] */;
    %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %215 = cast(%var_3587, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
    %216 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
    %217 = cast(%206, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
    %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %219 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
    %220 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 48), uint64] */, dtype="float32") /* ty=Tensor[(4, 48), float32] */;
    %221 = log10(%220) /* ty=Tensor[(4, 48), float32] */;
    %222 = cast(%221, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
    %223 = %190.10;
    %224 = %191.0;
    %225 = %192.0;
    %226 = logical_xor(%201, %202) /* ty=Tensor[(605, 2), int8] */;
    %227 = minimum(%213, %214) /* ty=Tensor[(2, 4, 16), int8] */;
    %228 = less_equal(%217, %218) /* ty=Tensor[(2, 4, 16), bool] */;
    %229 = %219.0;
    %230 = cos(%222) /* ty=Tensor[(4, 48), float64] */;
    (%223, meta[relay.Constant][6] /* ty=Tensor[(832), float32] */, %224, %225, %226, %227, %228, %229, %230)
  };
  %231(%var_3627) /* ty=(Tensor[(60), uint64], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(605, 2), int8], Tensor[(2, 4, 16), int8], Tensor[(2, 4, 16), bool], Tensor[(2, 4, 16), float32], Tensor[(4, 48), float64]) */
}

def @func_5921(%var_5876: Tensor[(12, 9, 5), bool], %var_5877: Tensor[(12, 9, 5), bool], %var_5907: bool) -> (Tensor[(12, 9, 5), bool], Tensor[(13, 4, 16), float64], Tensor[(12, 9, 5), float64], bool, bool) {
  %232 = cast(%var_5877, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %233 = shape_of(%var_5876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%var_5876, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %236 = @func_3080() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(13, 4, 16), float64], Tensor[(832), float32]) */;
  %237 = cast(%var_5876, dtype="float64") /* ty=Tensor[(12, 9, 5), float64] */;
  %238 = cast(%var_5907, dtype="bool") /* ty=bool */;
  %239 = reshape(%238, newshape=[]) /* ty=bool */;
  %240 = @func_5265(%239) /* ty=(Tensor[(2, 4, 16), int64], Tensor[(12, 9, 7), bool], bool, Tensor[(756), bool]) */;
  %241 = logical_and(%234, %235) /* ty=Tensor[(12, 9, 5), bool] */;
  %242 = %236.1;
  %243 = cosh(%237) /* ty=Tensor[(12, 9, 5), float64] */;
  %244 = %240.2;
  (%241, %242, %243, %244, %var_5907)
}

def @func_5971(%var_5969: Tensor[(128), float32]) -> (Tensor[(128), bool],) {
  @func_5968(%var_5969) /* ty=(Tensor[(128), bool],) */
}

def @func_2826() -> (Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32], Tensor[(2, 4, 16), float32], Tensor[(504), float32]) {
  @func_2824() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32], Tensor[(2, 4, 16), float32], Tensor[(504), float32]) */
}

def @func_6532(%var_6531: Tensor[(5, 13, 13), uint64]) -> (Tensor[(3, 13, 5), float32], Tensor[(5, 13, 13), float64], Tensor[(2, 4, 16), int64]) {
  %253 = fn (%var_6505: Tensor[(5, 13, 13), uint64]) -> (Tensor[(3, 13, 5), float32], Tensor[(5, 13, 13), float64], Tensor[(2, 4, 16), int64]) {
    %245 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %246 = cast(%var_6505, dtype="bool") /* ty=Tensor[(5, 13, 13), bool] */;
    %247 = not_equal(%245, %246) /* ty=Tensor[(5, 13, 13), bool] */;
    %248 = cast(%247, dtype="float64") /* ty=Tensor[(5, 13, 13), float64] */;
    %249 = @func_5070() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) */;
    %250 = @func_5754() /* ty=Tensor[(3, 13, 5), float32] */;
    %251 = cos(%248) /* ty=Tensor[(5, 13, 13), float64] */;
    %252 = %249.1;
    (%250, %251, %252)
  };
  %253(%var_6531) /* ty=(Tensor[(3, 13, 5), float32], Tensor[(5, 13, 13), float64], Tensor[(2, 4, 16), int64]) */
}

def @func_1243(%var_1241: Tensor[(16, 13, 16), bool], %var_1242: Tensor[(12), uint64]) -> (Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) {
  @func_1239(%var_1241, %var_1242) /* ty=(Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */
}

def @func_5756() -> Tensor[(3, 13, 5), float32] {
  @func_5754() /* ty=Tensor[(3, 13, 5), float32] */
}

def @func_4646() -> (Tensor[(128), float32], Tensor[(3, 11, 3), bool], Tensor[(99), float64], Tensor[(416, 2), uint64], Tensor[(832), float32]) {
  %266 = fn () -> (Tensor[(128), float32], Tensor[(3, 11, 3), bool], Tensor[(99), float64], Tensor[(416, 2), uint64], Tensor[(832), float32]) {
    %254 = @func_2240() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32], Tensor[(128), float64]) */;
    %255 = cast(meta[relay.Constant][10] /* ty=Tensor[(99), float64] */, dtype="float64") /* ty=Tensor[(99), float64] */;
    %256 = reshape(%255, newshape=[3, 11, 3]) /* ty=Tensor[(3, 11, 3), float64] */;
    %257 = @func_4368(%256) /* ty=(Tensor[(3, 11, 3), bool], Tensor[(3, 11, 3), float32]) */;
    %258 = cast(meta[relay.Constant][11] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %259 = cast(meta[relay.Constant][11] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %260 = reshape(%258, newshape=[832]) /* ty=Tensor[(832), float32] */;
    %261 = reshape(%259, newshape=[416, 2]) /* ty=Tensor[(416, 2), float32] */;
    %262 = @func_4225(%260, %261) /* ty=(Tensor[(416), float32], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(416, 2), uint64]) */;
    %263 = %254.2;
    %264 = %257.0;
    %265 = %262.3;
    (%263, %264, meta[relay.Constant][10] /* ty=Tensor[(99), float64] */, %265, meta[relay.Constant][11] /* ty=Tensor[(832), float32] */)
  };
  %266() /* ty=(Tensor[(128), float32], Tensor[(3, 11, 3), bool], Tensor[(99), float64], Tensor[(416, 2), uint64], Tensor[(832), float32]) */
}

def @func_4840() -> (Tensor[(2, 4, 16), float32],) {
  %269 = fn () -> (Tensor[(2, 4, 16), float32],) {
    %267 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
    %268 = %267.1;
    (%268,)
  };
  %269() /* ty=(Tensor[(2, 4, 16), float32],) */
}

def @func_2323() -> (Tensor[(2, 4, 16), float32],) {
  %272 = fn () -> (Tensor[(2, 4, 16), float32],) {
    %270 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
    %271 = %270.1;
    (%271,)
  };
  %272() /* ty=(Tensor[(2, 4, 16), float32],) */
}

def @func_3080() -> (Tensor[(2, 4, 16), float32], Tensor[(13, 4, 16), float64], Tensor[(832), float32]) {
  %273 = @func_2824() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32], Tensor[(2, 4, 16), float32], Tensor[(504), float32]) */;
  %274 = cast(meta[relay.Constant][12] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %275 = cast(meta[relay.Constant][12] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %276 = reshape(%274, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
  %277 = reshape(%275, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
  %278 = @func_2708(%276, %277) /* ty=(Tensor[(13, 4, 16), float32], Tensor[(128), float64], Tensor[(13, 4, 16), float64], Tensor[(13, 4, 16), bool], Tensor[(13, 4, 16), int16], Tensor[(13, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(12), uint64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
  %279 = %273.3;
  %280 = %278.2;
  (%279, %280, meta[relay.Constant][12] /* ty=Tensor[(832), float32] */)
}

def @func_6496() -> Tensor[(128), float32] {
  %282 = fn () -> Tensor[(128), float32] {
    %281 = @func_4934() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), float32], Tensor[(128), float64], Tensor[(2, 4, 16), bool]) */;
    %281.1
  };
  %282() /* ty=Tensor[(128), float32] */
}

def @func_2712(%var_2710: Tensor[(13, 4, 16), float32], %var_2711: Tensor[(13, 4, 16), float32]) -> (Tensor[(13, 4, 16), float32], Tensor[(128), float64], Tensor[(13, 4, 16), float64], Tensor[(13, 4, 16), bool], Tensor[(13, 4, 16), int16], Tensor[(13, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(12), uint64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) {
  @func_2708(%var_2710, %var_2711) /* ty=(Tensor[(13, 4, 16), float32], Tensor[(128), float64], Tensor[(13, 4, 16), float64], Tensor[(13, 4, 16), bool], Tensor[(13, 4, 16), int16], Tensor[(13, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(12), uint64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */
}

def @func_3208(%var_3184: Tensor[(10, 13, 4), float32]) -> (Tensor[(10, 13, 4), float32],) {
  %283 = cast(%var_3184, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %284 = atanh(%283) /* ty=Tensor[(10, 13, 4), float32] */;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %286 = log2(%285) /* ty=Tensor[(10, 13, 4), float32] */;
  (%286,)
}

def @func_1708() -> (Tensor[(128), float64], Tensor[(2, 4, 16), float32]) {
  %295 = fn () -> (Tensor[(128), float64], Tensor[(2, 4, 16), float32]) {
    %287 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
    %288 = %287.2;
    %289 = cast(%288, dtype="float64") /* ty=Tensor[(128), float64] */;
    %290 = rsqrt(%289) /* ty=Tensor[(128), float64] */;
    %291 = cast(%290, dtype="float32") /* ty=Tensor[(128), float32] */;
    %292 = reshape(%291, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
    %293 = @func_1534(%292) /* ty=(Tensor[(2, 4, 16), float32],) */;
    %294 = %293.0;
    (%290, %294)
  };
  %295() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */
}

def @func_5006() -> Tensor[(99), float64] {
  %296 = @func_4645() /* ty=(Tensor[(128), float32], Tensor[(3, 11, 3), bool], Tensor[(99), float64], Tensor[(416, 2), uint64], Tensor[(832), float32]) */;
  %296.2
}

def @func_5551(%var_5522: Tensor[(832), float32]) -> (Tensor[(832), uint16], Tensor[(3, 13, 5), float64]) {
  %297 = @func_3080() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(13, 4, 16), float64], Tensor[(832), float32]) */;
  %298 = %297.2;
  %299 = cast(%var_5522, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(1), int32] */;
  %301 = cast(%298, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %303 = minimum(%301, %302) /* ty=Tensor[(832), uint16] */;
  %304 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  (%303, %304)
}

def @func_4128(%var_4125: Tensor[(128), float32], %var_4126: Tensor[(48, 4), uint64], %var_4127: Tensor[(48, 4), uint64]) -> (Tensor[(3, 13, 5), float64], Tensor[(128), bool], Tensor[(16, 12, 1), float32], uint64, Tensor[(48, 4), float64], Tensor[(416), float32], Tensor[(2, 208), float32], Tensor[(48, 4), float32]) {
  %337 = fn (%var_4052: Tensor[(128), float32], %var_4065: Tensor[(48, 4), uint64], %var_4074: Tensor[(48, 4), uint64]) -> (Tensor[(3, 13, 5), float64], Tensor[(128), bool], Tensor[(16, 12, 1), float32], uint64, Tensor[(48, 4), float64], Tensor[(416), float32], Tensor[(2, 208), float32], Tensor[(48, 4), float32]) {
    %305 = @func_2240() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32], Tensor[(128), float64]) */;
    %306 = %305.2;
    %307 = cast(%var_4052, dtype="bool") /* ty=Tensor[(128), bool] */;
    %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(1), int32] */;
    %309 = cast(%306, dtype="bool") /* ty=Tensor[(128), bool] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?), bool] */;
    %311 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %312 = cast(%var_4065, dtype="uint64") /* ty=Tensor[(48, 4), uint64] */;
    %313 = reshape(%311, newshape=[]) /* ty=uint64 */;
    %314 = reshape(%312, newshape=[16, 12, 1]) /* ty=Tensor[(16, 12, 1), uint64] */;
    %315 = @func_3162(%313, %314) /* ty=(Tensor[(16, 12, 1), float32],) */;
    %316 = cast(%var_4074, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
    %317 = shape_of(%var_4065, dtype="int32") /* ty=Tensor[(2), int32] */;
    %318 = cast(%var_4065, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %320 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 208), float32] */, dtype="float32") /* ty=Tensor[(2, 208), float32] */;
    %321 = reshape(%320, newshape=[416]) /* ty=Tensor[(416), float32] */;
    %322 = @func_2541(%321) /* ty=(Tensor[(416), float32], Tensor[(14, 6, 12), uint32], Tensor[(1008), uint32]) */;
    %323 = cast(%var_4065, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
    %324 = cos(%323) /* ty=Tensor[(48, 4), float64] */;
    %325 = cast(%324, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
    %326 = exp(%325) /* ty=Tensor[(48, 4), float32] */;
    %327 = cast(%var_4074, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
    %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(2), int32] */;
    %329 = cast(%326, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %331 = @func_2252() /* ty=Tensor[(3, 13, 5), float64] */;
    %332 = logical_or(%309, %310) /* ty=Tensor[(128), bool] */;
    %333 = %315.0;
    %334 = divide(%318, %319) /* ty=Tensor[(48, 4), float64] */;
    %335 = %322.0;
    %336 = power(%329, %330) /* ty=Tensor[(48, 4), float32] */;
    (%331, %332, %333, meta[relay.Constant][13] /* ty=uint64 */, %334, %335, meta[relay.Constant][14] /* ty=Tensor[(2, 208), float32] */, %336)
  };
  %337(%var_4125, %var_4126, %var_4127) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), bool], Tensor[(16, 12, 1), float32], uint64, Tensor[(48, 4), float64], Tensor[(416), float32], Tensor[(2, 208), float32], Tensor[(48, 4), float32]) */
}

def @func_5754() -> Tensor[(3, 13, 5), float32] {
  %338 = @func_3867() /* ty=(Tensor[(3, 13, 5), float32],) */;
  %338.0
}

def @func_5797(%var_5795: Tensor[(14, 11, 1), uint64], %var_5796: Tensor[(2, 208), float32]) -> (Tensor[(14, 11, 7), bool], Tensor[(416), float32], Tensor[(2, 208), float32]) {
  %346 = fn (%var_5785: Tensor[(14, 11, 1), uint64], %var_5791: Tensor[(2, 208), float32]) -> (Tensor[(14, 11, 7), bool], Tensor[(416), float32], Tensor[(2, 208), float32]) {
    %339 = cast(%var_5785, dtype="bool") /* ty=Tensor[(14, 11, 1), bool] */;
    %340 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 11, 7), uint64] */, dtype="bool") /* ty=Tensor[(14, 11, 7), bool] */;
    %341 = cast(%var_5791, dtype="float32") /* ty=Tensor[(2, 208), float32] */;
    %342 = reshape(%341, newshape=[416]) /* ty=Tensor[(416), float32] */;
    %343 = @func_2541(%342) /* ty=(Tensor[(416), float32], Tensor[(14, 6, 12), uint32], Tensor[(1008), uint32]) */;
    %344 = not_equal(%339, %340) /* ty=Tensor[(14, 11, 7), bool] */;
    %345 = %343.0;
    (%344, %345, %var_5791)
  };
  %346(%var_5795, %var_5796) /* ty=(Tensor[(14, 11, 7), bool], Tensor[(416), float32], Tensor[(2, 208), float32]) */
}

def @func_1787(%var_1786: Tensor[(12), uint64]) -> (Tensor[(3, 13, 5), float64], Tensor[(128), float64], Tensor[(16, 13, 16), bool], Tensor[(3328), bool], Tensor[(12), uint64], Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32]) {
  %361 = fn (%var_1763: Tensor[(12), uint64]) -> (Tensor[(3, 13, 5), float64], Tensor[(128), float64], Tensor[(16, 13, 16), bool], Tensor[(3328), bool], Tensor[(12), uint64], Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32]) {
    %347 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
    %348 = cast(%347, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
    %349 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
    %350 = cast(meta[relay.Constant][16] /* ty=Tensor[(3328), bool] */, dtype="bool") /* ty=Tensor[(3328), bool] */;
    %351 = cast(%var_1763, dtype="uint64") /* ty=Tensor[(12), uint64] */;
    %352 = reshape(%350, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), bool] */;
    %353 = reshape(%351, newshape=[12]) /* ty=Tensor[(12), uint64] */;
    %354 = @func_1239(%352, %353) /* ty=(Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
    %355 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
    %356 = tan(%348) /* ty=Tensor[(3, 13, 5), float64] */;
    %357 = %349.0;
    %358 = %354.0;
    %359 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
    %360 = %355.1;
    (%356, %357, %358, meta[relay.Constant][16] /* ty=Tensor[(3328), bool] */, %var_1763, %359, %360)
  };
  %361(%var_1786) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), float64], Tensor[(16, 13, 16), bool], Tensor[(3328), bool], Tensor[(12), uint64], Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32]) */
}

def @func_3888() -> Tensor[(128), float64] {
  %362 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
  %362.0
}

def @func_1604() -> Tensor[(3, 13, 5), float64] {
  @func_1602() /* ty=Tensor[(3, 13, 5), float64] */
}

def @func_1820(%var_1815: Tensor[(4, 8, 13), float32]) -> Tensor[(4, 8, 13), float32] {
  %363 = cast(%var_1815, dtype="float32") /* ty=Tensor[(4, 8, 13), float32] */;
  tan(%363) /* ty=Tensor[(4, 8, 13), float32] */
}

def @func_5310() -> (Tensor[(3, 13, 5), float64],) {
  %364 = @func_2252() /* ty=Tensor[(3, 13, 5), float64] */;
  (%364,)
}

def @func_2543(%var_2542: Tensor[(416), float32]) -> (Tensor[(416), float32], Tensor[(14, 6, 12), uint32], Tensor[(1008), uint32]) {
  %375 = fn (%var_2498: Tensor[(416), float32]) -> (Tensor[(416), float32], Tensor[(14, 6, 12), uint32], Tensor[(1008), uint32]) {
    %365 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
    %366 = %365.2;
    %367 = cast(%var_2498, dtype="float32") /* ty=Tensor[(416), float32] */;
    %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(1), int32] */;
    %369 = cast(%366, dtype="float32") /* ty=Tensor[(416), float32] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?), float32] */;
    %371 = cast(meta[relay.Constant][17] /* ty=Tensor[(1008), uint32] */, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
    %372 = reshape(%371, newshape=[14, 6, 12]) /* ty=Tensor[(14, 6, 12), uint32] */;
    %373 = floor_divide(%369, %370) /* ty=Tensor[(416), float32] */;
    %374 = @func_834(%372) /* ty=Tensor[(14, 6, 12), uint32] */;
    (%373, %374, meta[relay.Constant][17] /* ty=Tensor[(1008), uint32] */)
  };
  %375(%var_2542) /* ty=(Tensor[(416), float32], Tensor[(14, 6, 12), uint32], Tensor[(1008), uint32]) */
}

def @func_2824() -> (Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32], Tensor[(2, 4, 16), float32], Tensor[(504), float32]) {
  %376 = cast(meta[relay.Constant][18] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %377 = reshape(%376, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %378 = cast(meta[relay.Constant][19] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %379 = reshape(%378, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), float32] */;
  %380 = @func_2478(%379) /* ty=(Tensor[(4, 14, 9), float32], Tensor[(2, 4, 16), float32]) */;
  %381 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %382 = @func_2291(%377) /* ty=Tensor[(2, 4, 16), int64] */;
  %383 = %380.1;
  (%381, %382, meta[relay.Constant][18] /* ty=Tensor[(128), float32] */, %383, meta[relay.Constant][19] /* ty=Tensor[(504), float32] */)
}

def @func_2708(%var_2611: Tensor[(13, 4, 16), float32], %var_2612: Tensor[(13, 4, 16), float32]) -> (Tensor[(13, 4, 16), float32], Tensor[(128), float64], Tensor[(13, 4, 16), float64], Tensor[(13, 4, 16), bool], Tensor[(13, 4, 16), int16], Tensor[(13, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(12), uint64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) {
  %384 = cast(%var_2612, dtype="float32") /* ty=Tensor[(13, 4, 16), float32] */;
  %385 = shape_of(%var_2611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%var_2611, dtype="float32") /* ty=Tensor[(13, 4, 16), float32] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %388 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
  %389 = cast(%var_2612, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %390 = shape_of(%var_2611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%var_2611, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %393 = cast(%var_2612, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %394 = sqrt(%393) /* ty=Tensor[(13, 4, 16), float64] */;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %396 = acos(%395) /* ty=Tensor[(13, 4, 16), float64] */;
  %397 = cast(%var_2611, dtype="bool") /* ty=Tensor[(13, 4, 16), bool] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%396, dtype="bool") /* ty=Tensor[(13, 4, 16), bool] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %401 = cast(%394, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %402 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%396, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %405 = mod(%403, %404) /* ty=Tensor[(13, 4, 16), float64] */;
  %406 = cast(%396, dtype="int16") /* ty=Tensor[(13, 4, 16), int16] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="int16") /* ty=Tensor[(13, 4, 16), int16] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %410 = cast(%396, dtype="float32") /* ty=Tensor[(13, 4, 16), float32] */;
  %411 = cast(meta[relay.Constant][20] /* ty=Tensor[(432), uint16] */, dtype="uint16") /* ty=Tensor[(432), uint16] */;
  %412 = cast(meta[relay.Constant][21] /* ty=Tensor[(12), uint64] */, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %413 = cast(meta[relay.Constant][22] /* ty=Tensor[(60), uint64] */, dtype="uint64") /* ty=Tensor[(60), uint64] */;
  %414 = reshape(%411, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint16] */;
  %415 = reshape(%412, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %416 = reshape(%413, newshape=[60, 1]) /* ty=Tensor[(60, 1), uint64] */;
  %417 = @func_907(%414, %415, %416) /* ty=(Tensor[(4, 12, 9), bool], Tensor[(5, 3, 4), float64], Tensor[(12), uint64], Tensor[(60, 1), uint64], Tensor[(5, 3, 4), float64], Tensor[(4, 12, 9), int8]) */;
  %418 = floor_mod(%386, %387) /* ty=Tensor[(13, 4, 16), float32] */;
  %419 = %388.0;
  %420 = divide(%391, %392) /* ty=Tensor[(13, 4, 16), float64] */;
  %421 = less(%399, %400) /* ty=Tensor[(13, 4, 16), bool] */;
  %422 = add(%408, %409) /* ty=Tensor[(13, 4, 16), int16] */;
  %423 = tan(%410) /* ty=Tensor[(13, 4, 16), float32] */;
  %424 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %425 = %417.2;
  (%418, %419, %420, %421, %422, %423, %424, %425, meta[relay.Constant][20] /* ty=Tensor[(432), uint16] */, meta[relay.Constant][21] /* ty=Tensor[(12), uint64] */, meta[relay.Constant][22] /* ty=Tensor[(60), uint64] */)
}

def @func_4936() -> (Tensor[(3, 13, 5), float64], Tensor[(128), float32], Tensor[(128), float64], Tensor[(2, 4, 16), bool]) {
  @func_4934() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), float32], Tensor[(128), float64], Tensor[(2, 4, 16), bool]) */
}

def @func_5312() -> (Tensor[(3, 13, 5), float64],) {
  @func_5310() /* ty=(Tensor[(3, 13, 5), float64],) */
}

def @func_5453(%var_5449: Tensor[(1, 14, 2), int64], %var_5450: Tensor[(1, 1210), uint16], %var_5451: Tensor[(12), uint64], %var_5452: Tensor[(3, 20), uint64]) -> (Tensor[(12, 14, 2), int64], Tensor[(12, 14, 2), bool], Tensor[(11, 11, 10), uint16], Tensor[(1, 1210), uint16], Tensor[(4, 12, 9), int8], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(3, 20), uint64], Tensor[(3, 13, 5), float64]) {
  @func_5447(%var_5449, %var_5450, %var_5451, %var_5452) /* ty=(Tensor[(12, 14, 2), int64], Tensor[(12, 14, 2), bool], Tensor[(11, 11, 10), uint16], Tensor[(1, 1210), uint16], Tensor[(4, 12, 9), int8], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(3, 20), uint64], Tensor[(3, 13, 5), float64]) */
}

def @func_1970() -> (Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) {
  @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */
}

def @func_5038(%var_5015: Tensor[(11, 1, 5), float64]) -> (Tensor[(11, 1, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) {
  %426 = cast(%var_5015, dtype="float64") /* ty=Tensor[(11, 1, 5), float64] */;
  %427 = cast(meta[relay.Constant][23] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %428 = reshape(%427, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %429 = @func_1534(%428) /* ty=(Tensor[(2, 4, 16), float32],) */;
  %430 = acos(%426) /* ty=Tensor[(11, 1, 5), float64] */;
  %431 = %429.0;
  (%430, %431, meta[relay.Constant][23] /* ty=Tensor[(128), float32] */)
}

def @func_1906() -> (Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) {
  %437 = fn () -> (Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) {
    %432 = @func_1707() /* ty=(Tensor[(128), float64], Tensor[(2, 4, 16), float32]) */;
    %433 = cast(meta[relay.Constant][24] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
    %434 = reshape(%433, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), float32] */;
    %435 = %432.0;
    %436 = @func_1820(%434) /* ty=Tensor[(4, 8, 13), float32] */;
    (%435, %436, meta[relay.Constant][24] /* ty=Tensor[(416), float32] */)
  };
  %437() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */
}

def @func_1968() -> (Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) {
  %438 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %439 = %438.1;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %441 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %442 = %441.2;
  %443 = cast(%442, dtype="float32") /* ty=Tensor[(128), float32] */;
  %444 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%439, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %447 = cos(%440) /* ty=Tensor[(2, 4, 16), float32] */;
  %448 = floor_mod(%445, %446) /* ty=Tensor[(2, 4, 16), float32] */;
  (%447, %448)
}

def @func_5926(%var_5923: Tensor[(12, 9, 5), bool], %var_5924: Tensor[(12, 9, 5), bool], %var_5925: bool) -> (Tensor[(12, 9, 5), bool], Tensor[(13, 4, 16), float64], Tensor[(12, 9, 5), float64], bool, bool) {
  @func_5921(%var_5923, %var_5924, %var_5925) /* ty=(Tensor[(12, 9, 5), bool], Tensor[(13, 4, 16), float64], Tensor[(12, 9, 5), float64], bool, bool) */
}

def @func_3165(%var_3163: uint64, %var_3164: Tensor[(16, 12, 1), uint64]) -> (Tensor[(16, 12, 1), float32],) {
  %455 = fn (%var_3133: uint64, %var_3134: Tensor[(16, 12, 1), uint64]) -> (Tensor[(16, 12, 1), float32],) {
    %449 = cast(%var_3133, dtype="uint64") /* ty=uint64 */;
    %450 = cast(%var_3134, dtype="uint64") /* ty=Tensor[(16, 12, 1), uint64] */;
    %451 = bitwise_or(%449, %450) /* ty=Tensor[(16, 12, 1), uint64] */;
    %452 = cast(%451, dtype="float32") /* ty=Tensor[(16, 12, 1), float32] */;
    %453 = cast(%var_3133, dtype="float32") /* ty=float32 */;
    %454 = minimum(%452, %453) /* ty=Tensor[(16, 12, 1), float32] */;
    (%454,)
  };
  %455(%var_3163, %var_3164) /* ty=(Tensor[(16, 12, 1), float32],) */
}

def @func_4172(%var_4162: Tensor[(2, 4, 16), float32]) -> Tensor[(2, 4, 16), int64] {
  %456 = @func_2322() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %457 = %456.0;
  %458 = cast(%var_4162, dtype="int64") /* ty=Tensor[(2, 4, 16), int64] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="int64") /* ty=Tensor[(2, 4, 16), int64] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%460, %461) /* ty=Tensor[(2, 4, 16), int64] */
}

def @func_5342(%var_5334: Tensor[(15, 4), uint64]) -> (Tensor[(15, 4), uint64],) {
  %462 = cast(%var_5334, dtype="uint64") /* ty=Tensor[(15, 4), uint64] */;
  %463 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(15, 4), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %464 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 4), uint64] */, dtype="uint64") /* ty=Tensor[(15, 4), uint64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %466 = minimum(%464, %465) /* ty=Tensor[(15, 4), uint64] */;
  (%466,)
}

def @func_5598() -> Tensor[(2, 4, 16), float32] {
  @func_5596() /* ty=Tensor[(2, 4, 16), float32] */
}

def @func_6408() -> Tensor[(99), float64] {
  @func_6406() /* ty=Tensor[(99), float64] */
}

def @func_2481(%var_2479: Tensor[(4, 14, 9), float32]) -> (Tensor[(4, 14, 9), float32], Tensor[(2, 4, 16), float32]) {
  @func_2478(%var_2479) /* ty=(Tensor[(4, 14, 9), float32], Tensor[(2, 4, 16), float32]) */
}

def @func_1861(%var_1859: Tensor[(128), float64]) -> (Tensor[(128), float32], Tensor[(128), float32]) {
  @func_1858(%var_1859) /* ty=(Tensor[(128), float32], Tensor[(128), float32]) */
}

def @func_4249(%var_4247: Tensor[(3, 11), float32]) -> (Tensor[(3, 11), float32],) {
  @func_4246(%var_4247) /* ty=(Tensor[(3, 11), float32],) */
}

def @main(%var_6540: Tensor[(16, 26), float32]) -> (Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), bool], Tensor[(16, 26), float32], Tensor[(12, 9, 7), bool], bool, Tensor[(9, 84), float64]) {
  %467 = @func_5328() /* ty=Tensor[(2, 4, 16), float32] */;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %469 = cast(%var_6540, dtype="float32") /* ty=Tensor[(16, 26), float32] */;
  %470 = reshape(%468, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %471 = reshape(%469, newshape=[416]) /* ty=Tensor[(416), float32] */;
  %472 = @func_4460(%470, %471) /* ty=(Tensor[(2, 4, 16), bool], Tensor[(416), float32], Tensor[(2, 4, 16), float32]) */;
  %473 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %474 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 84), bool] */, dtype="bool") /* ty=Tensor[(9, 84), bool] */;
  %475 = reshape(%473, newshape=[]) /* ty=bool */;
  %476 = reshape(%474, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), bool] */;
  %477 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 84), bool] */, dtype="float64") /* ty=Tensor[(9, 84), float64] */;
  %478 = @func_5328() /* ty=Tensor[(2, 4, 16), float32] */;
  %479 = %472.0;
  %480 = @func_1496(%475, %476) /* ty=Tensor[(12, 9, 7), bool] */;
  %481 = asinh(%477) /* ty=Tensor[(9, 84), float64] */;
  (%478, %479, %var_6540, %480, False /* ty=bool */, %481)
}

def @func_912(%var_909: Tensor[(4, 12, 9), uint16], %var_910: Tensor[(12), uint64], %var_911: Tensor[(60, 1), uint64]) -> (Tensor[(4, 12, 9), bool], Tensor[(5, 3, 4), float64], Tensor[(12), uint64], Tensor[(60, 1), uint64], Tensor[(5, 3, 4), float64], Tensor[(4, 12, 9), int8]) {
  @func_907(%var_909, %var_910, %var_911) /* ty=(Tensor[(4, 12, 9), bool], Tensor[(5, 3, 4), float64], Tensor[(12), uint64], Tensor[(60, 1), uint64], Tensor[(5, 3, 4), float64], Tensor[(4, 12, 9), int8]) */
}

def @func_5779() -> Tensor[(3, 13, 5), float64] {
  %482 = fn () -> Tensor[(3, 13, 5), float64] {
    @func_2252() /* ty=Tensor[(3, 13, 5), float64] */
  };
  %482() /* ty=Tensor[(3, 13, 5), float64] */
}

def @func_907(%var_868: Tensor[(4, 12, 9), uint16], %var_887: Tensor[(12), uint64], %var_888: Tensor[(60, 1), uint64]) -> (Tensor[(4, 12, 9), bool], Tensor[(5, 3, 4), float64], Tensor[(12), uint64], Tensor[(60, 1), uint64], Tensor[(5, 3, 4), float64], Tensor[(4, 12, 9), int8]) {
  %483 = cast(%var_868, dtype="bool") /* ty=Tensor[(4, 12, 9), bool] */;
  %484 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(4, 12, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 12, 9), uint16] */, dtype="bool") /* ty=Tensor[(4, 12, 9), bool] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %487 = cast(%var_887, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %488 = cast(%var_888, dtype="uint64") /* ty=Tensor[(60, 1), uint64] */;
  %489 = reshape(%487, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint64] */;
  %490 = reshape(%488, newshape=[5, 3, 4]) /* ty=Tensor[(5, 3, 4), uint64] */;
  %491 = cast(%var_887, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %492 = @func_703(%489, %490) /* ty=Tensor[(5, 3, 4), float64] */;
  %493 = cast(%492, dtype="uint64") /* ty=Tensor[(5, 3, 4), uint64] */;
  %494 = reshape(%491, newshape=[1, 3, 4]) /* ty=Tensor[(1, 3, 4), uint64] */;
  %495 = reshape(%493, newshape=[5, 3, 4]) /* ty=Tensor[(5, 3, 4), uint64] */;
  %496 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 12, 9), uint16] */, dtype="int8") /* ty=Tensor[(4, 12, 9), int8] */;
  %497 = shape_of(%var_868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_868, dtype="int8") /* ty=Tensor[(4, 12, 9), int8] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %500 = greater(%485, %486) /* ty=Tensor[(4, 12, 9), bool] */;
  %501 = @func_703(%494, %495) /* ty=Tensor[(5, 3, 4), float64] */;
  %502 = minimum(%498, %499) /* ty=Tensor[(4, 12, 9), int8] */;
  (%500, %492, %var_887, %var_888, %501, %502)
}

def @func_3211(%var_3209: Tensor[(10, 13, 4), float32]) -> (Tensor[(10, 13, 4), float32],) {
  @func_3208(%var_3209) /* ty=(Tensor[(10, 13, 4), float32],) */
}

def @func_5214(%var_5210: Tensor[(2, 13, 9), float64], %var_5211: Tensor[(2, 13, 9), float64], %var_5212: Tensor[(3328), bool], %var_5213: Tensor[(12), uint64]) -> (Tensor[(2, 13, 9), uint8], Tensor[(2, 13, 9), float64], Tensor[(2, 4, 16), float32], Tensor[(60), uint64], Tensor[(12), uint64], Tensor[(3328), float64], Tensor[(2, 13, 9), float64]) {
  %527 = fn (%var_5136: Tensor[(2, 13, 9), float64], %var_5143: Tensor[(2, 13, 9), float64], %var_5167: Tensor[(3328), bool], %var_5168: Tensor[(12), uint64]) -> (Tensor[(2, 13, 9), uint8], Tensor[(2, 13, 9), float64], Tensor[(2, 4, 16), float32], Tensor[(60), uint64], Tensor[(12), uint64], Tensor[(3328), float64], Tensor[(2, 13, 9), float64]) {
    %503 = cast(%var_5136, dtype="float64") /* ty=Tensor[(2, 13, 9), float64] */;
    %504 = rsqrt(%503) /* ty=Tensor[(2, 13, 9), float64] */;
    %505 = cast(%var_5143, dtype="uint8") /* ty=Tensor[(2, 13, 9), uint8] */;
    %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%504, dtype="uint8") /* ty=Tensor[(2, 13, 9), uint8] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %509 = cast(%var_5143, dtype="float64") /* ty=Tensor[(2, 13, 9), float64] */;
    %510 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
    %511 = cast(%var_5167, dtype="bool") /* ty=Tensor[(3328), bool] */;
    %512 = cast(%var_5168, dtype="uint64") /* ty=Tensor[(12), uint64] */;
    %513 = reshape(%511, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), bool] */;
    %514 = reshape(%512, newshape=[12]) /* ty=Tensor[(12), uint64] */;
    %515 = @func_1239(%513, %514) /* ty=(Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
    %516 = cast(%var_5167, dtype="float64") /* ty=Tensor[(3328), float64] */;
    %517 = cast(%504, dtype="float64") /* ty=Tensor[(2, 13, 9), float64] */;
    %518 = shape_of(%var_5143, dtype="int32") /* ty=Tensor[(3), int32] */;
    %519 = cast(%var_5143, dtype="float64") /* ty=Tensor[(2, 13, 9), float64] */;
    %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %521 = minimum(%507, %508) /* ty=Tensor[(2, 13, 9), uint8] */;
    %522 = sqrt(%509) /* ty=Tensor[(2, 13, 9), float64] */;
    %523 = %510.0;
    %524 = %515.4;
    %525 = cosh(%516) /* ty=Tensor[(3328), float64] */;
    %526 = mod(%519, %520) /* ty=Tensor[(2, 13, 9), float64] */;
    (%521, %522, %523, %524, %var_5168, %525, %526)
  };
  %527(%var_5210, %var_5211, %var_5212, %var_5213) /* ty=(Tensor[(2, 13, 9), uint8], Tensor[(2, 13, 9), float64], Tensor[(2, 4, 16), float32], Tensor[(60), uint64], Tensor[(12), uint64], Tensor[(3328), float64], Tensor[(2, 13, 9), float64]) */
}

def @func_3275(%var_3239: Tensor[(1210), uint16], %var_3267: Tensor[(192), uint64]) -> (Tensor[(2, 4, 16), float32], Tensor[(11, 11, 10), uint16], Tensor[(1210), uint16], Tensor[(3, 13, 5), float64], Tensor[(1, 12), uint64], Tensor[(16, 12, 1), float32], uint64, Tensor[(192), uint64]) {
  %528 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %529 = cast(%var_3239, dtype="uint16") /* ty=Tensor[(1210), uint16] */;
  %530 = reshape(%529, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint16] */;
  %531 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 12), uint64] */, dtype="uint64") /* ty=Tensor[(1, 12), uint64] */;
  %532 = reshape(%531, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %533 = @func_1785(%532) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(128), float64], Tensor[(16, 13, 16), bool], Tensor[(3328), bool], Tensor[(12), uint64], Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32]) */;
  %534 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %535 = cast(%var_3267, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %536 = reshape(%534, newshape=[]) /* ty=uint64 */;
  %537 = reshape(%535, newshape=[16, 12, 1]) /* ty=Tensor[(16, 12, 1), uint64] */;
  %538 = @func_3162(%536, %537) /* ty=(Tensor[(16, 12, 1), float32],) */;
  %539 = %528.0;
  %540 = @func_2985(%530) /* ty=Tensor[(11, 11, 10), uint16] */;
  %541 = %533.0;
  %542 = %538.0;
  (%539, %540, %var_3239, %541, meta[relay.Constant][29] /* ty=Tensor[(1, 12), uint64] */, %542, meta[relay.Constant][30] /* ty=uint64 */, %var_3267)
}

def @func_5701(%var_5658: Tensor[(99), float64], %var_5688: Tensor[(3328), bool]) -> (Tensor[(2, 4, 16), float32], Tensor[(4, 104), float32], Tensor[(3, 11, 3), float32], Tensor[(99), float32], Tensor[(2, 4, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(3328), bool], Tensor[(12), uint64]) {
  %543 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
  %544 = cast(%var_5658, dtype="float64") /* ty=Tensor[(99), float64] */;
  %545 = reshape(%544, newshape=[3, 11, 3]) /* ty=Tensor[(3, 11, 3), float64] */;
  %546 = @func_4368(%545) /* ty=(Tensor[(3, 11, 3), bool], Tensor[(3, 11, 3), float32]) */;
  %547 = cast(%var_5658, dtype="float32") /* ty=Tensor[(99), float32] */;
  %548 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 104), float32] */, dtype="float32") /* ty=Tensor[(4, 104), float32] */;
  %549 = %543.1;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %551 = reshape(%548, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), float32] */;
  %552 = reshape(%550, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %553 = @func_2749(%551, %552) /* ty=(Tensor[(4, 8, 13), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) */;
  %554 = %553.1;
  %555 = @func_3052() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %556 = %555.0;
  %557 = cast(%556, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %558 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%554, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %561 = cast(%var_5688, dtype="bool") /* ty=Tensor[(3328), bool] */;
  %562 = cast(meta[relay.Constant][32] /* ty=Tensor[(12), uint64] */, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %563 = reshape(%561, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), bool] */;
  %564 = reshape(%562, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %565 = @func_1239(%563, %564) /* ty=(Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
  %566 = %546.1;
  %567 = log2(%547) /* ty=Tensor[(99), float32] */;
  %568 = greater_equal(%559, %560) /* ty=Tensor[(2, 4, 16), bool] */;
  %569 = %565.1;
  (%549, meta[relay.Constant][31] /* ty=Tensor[(4, 104), float32] */, %566, %567, %568, %569, %var_5688, meta[relay.Constant][32] /* ty=Tensor[(12), uint64] */)
}

def @func_4228(%var_4226: Tensor[(832), float32], %var_4227: Tensor[(416, 2), float32]) -> (Tensor[(416), float32], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(416, 2), uint64]) {
  %585 = fn (%var_4206: Tensor[(832), float32], %var_4218: Tensor[(416, 2), float32]) -> (Tensor[(416), float32], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(416, 2), uint64]) {
    %570 = @func_3052() /* ty=(Tensor[(2, 4, 16), float32],) */;
    %571 = %570.0;
    %572 = cast(%571, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
    %573 = cast(meta[relay.Constant][33] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
    %574 = cast(%var_4206, dtype="float32") /* ty=Tensor[(832), float32] */;
    %575 = reshape(%573, newshape=[416]) /* ty=Tensor[(416), float32] */;
    %576 = reshape(%574, newshape=[416, 2]) /* ty=Tensor[(416, 2), float32] */;
    %577 = @func_3698(%575, %576) /* ty=(Tensor[(416), bool], Tensor[(432), uint16], Tensor[(416, 2), float32]) */;
    %578 = %577.2;
    %579 = cast(%var_4218, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
    %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(2), int32] */;
    %581 = cast(%578, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %583 = asinh(%572) /* ty=Tensor[(2, 4, 16), float32] */;
    %584 = add(%581, %582) /* ty=Tensor[(416, 2), uint64] */;
    (meta[relay.Constant][33] /* ty=Tensor[(416), float32] */, %var_4206, %583, %584)
  };
  %585(%var_4226, %var_4227) /* ty=(Tensor[(416), float32], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(416, 2), uint64]) */
}

def @func_2252() -> Tensor[(3, 13, 5), float64] {
  %586 = @func_1642() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */;
  %586.0
}

def @func_3868() -> (Tensor[(3, 13, 5), float32],) {
  %590 = fn () -> (Tensor[(3, 13, 5), float32],) {
    %587 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
    %588 = cast(%587, dtype="float32") /* ty=Tensor[(3, 13, 5), float32] */;
    %589 = cos(%588) /* ty=Tensor[(3, 13, 5), float32] */;
    (%589,)
  };
  %590() /* ty=(Tensor[(3, 13, 5), float32],) */
}

def @func_3890() -> Tensor[(128), float64] {
  @func_3888() /* ty=Tensor[(128), float64] */
}

def @func_6297(%var_6296: Tensor[(12, 4, 16), uint64]) -> (Tensor[(12, 4, 16), uint64],) {
  %596 = fn (%var_6284: Tensor[(12, 4, 16), uint64]) -> (Tensor[(12, 4, 16), uint64],) {
    %591 = cast(%var_6284, dtype="uint64") /* ty=Tensor[(12, 4, 16), uint64] */;
    %592 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(12, 4, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %593 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 4, 16), uint64] */, dtype="uint64") /* ty=Tensor[(12, 4, 16), uint64] */;
    %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %595 = right_shift(%593, %594) /* ty=Tensor[(12, 4, 16), uint64] */;
    (%595,)
  };
  %596(%var_6296) /* ty=(Tensor[(12, 4, 16), uint64],) */
}

def @func_836(%var_835: Tensor[(14, 6, 12), uint32]) -> Tensor[(14, 6, 12), uint32] {
  %601 = fn (%var_818: Tensor[(14, 6, 12), uint32]) -> Tensor[(14, 6, 12), uint32] {
    %597 = cast(%var_818, dtype="uint32") /* ty=Tensor[(14, 6, 12), uint32] */;
    %598 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(14, 6, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %599 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 6, 12), uint32] */, dtype="uint32") /* ty=Tensor[(14, 6, 12), uint32] */;
    %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    left_shift(%599, %600) /* ty=Tensor[(14, 6, 12), uint32] */
  };
  %601(%var_835) /* ty=Tensor[(14, 6, 12), uint32] */
}

def @func_3831(%var_3830: Tensor[(3328), bool]) -> (Tensor[(13, 6, 7), float64], Tensor[(13, 6, 7), float64], Tensor[(432), uint16], Tensor[(3328), bool], Tensor[(12), uint64]) {
  %612 = fn (%var_3789: Tensor[(3328), bool]) -> (Tensor[(13, 6, 7), float64], Tensor[(13, 6, 7), float64], Tensor[(432), uint16], Tensor[(3328), bool], Tensor[(12), uint64]) {
    %602 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 6, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 7), float64] */;
    %603 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 6, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 7), float64] */;
    %604 = cast(%var_3789, dtype="bool") /* ty=Tensor[(3328), bool] */;
    %605 = cast(meta[relay.Constant][37] /* ty=Tensor[(12), uint64] */, dtype="uint64") /* ty=Tensor[(12), uint64] */;
    %606 = reshape(%604, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), bool] */;
    %607 = reshape(%605, newshape=[12]) /* ty=Tensor[(12), uint64] */;
    %608 = @func_1239(%606, %607) /* ty=(Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
    %609 = exp(%602) /* ty=Tensor[(13, 6, 7), float64] */;
    %610 = atanh(%603) /* ty=Tensor[(13, 6, 7), float64] */;
    %611 = %608.2;
    (%609, %610, %611, %var_3789, meta[relay.Constant][37] /* ty=Tensor[(12), uint64] */)
  };
  %612(%var_3830) /* ty=(Tensor[(13, 6, 7), float64], Tensor[(13, 6, 7), float64], Tensor[(432), uint16], Tensor[(3328), bool], Tensor[(12), uint64]) */
}

def @func_2969(%var_2967: Tensor[(128), float64], %var_2968: Tensor[(128), float64]) -> (Tensor[(128), uint32], Tensor[(128), uint64]) {
  %625 = fn (%var_2954: Tensor[(128), float64], %var_2960: Tensor[(128), float64]) -> (Tensor[(128), uint32], Tensor[(128), uint64]) {
    %613 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
    %614 = %613.0;
    %615 = cast(%var_2954, dtype="uint32") /* ty=Tensor[(128), uint32] */;
    %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(1), int32] */;
    %617 = cast(%614, dtype="uint32") /* ty=Tensor[(128), uint32] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %619 = cast(%var_2960, dtype="uint64") /* ty=Tensor[(128), uint64] */;
    %620 = shape_of(%var_2954, dtype="int32") /* ty=Tensor[(1), int32] */;
    %621 = cast(%var_2954, dtype="uint64") /* ty=Tensor[(128), uint64] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %623 = add(%617, %618) /* ty=Tensor[(128), uint32] */;
    %624 = minimum(%621, %622) /* ty=Tensor[(128), uint64] */;
    (%623, %624)
  };
  %625(%var_2967, %var_2968) /* ty=(Tensor[(128), uint32], Tensor[(128), uint64]) */
}

def @func_5267(%var_5266: bool) -> (Tensor[(2, 4, 16), int64], Tensor[(12, 9, 7), bool], bool, Tensor[(756), bool]) {
  %633 = fn (%var_5254: bool) -> (Tensor[(2, 4, 16), int64], Tensor[(12, 9, 7), bool], bool, Tensor[(756), bool]) {
    %626 = @func_5070() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), int64], Tensor[(128), float32]) */;
    %627 = cast(%var_5254, dtype="bool") /* ty=bool */;
    %628 = cast(meta[relay.Constant][38] /* ty=Tensor[(756), bool] */, dtype="bool") /* ty=Tensor[(756), bool] */;
    %629 = reshape(%627, newshape=[]) /* ty=bool */;
    %630 = reshape(%628, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), bool] */;
    %631 = %626.1;
    %632 = @func_1496(%629, %630) /* ty=Tensor[(12, 9, 7), bool] */;
    (%631, %632, %var_5254, meta[relay.Constant][38] /* ty=Tensor[(756), bool] */)
  };
  %633(%var_5266) /* ty=(Tensor[(2, 4, 16), int64], Tensor[(12, 9, 7), bool], bool, Tensor[(756), bool]) */
}

def @func_5747(%var_5745: Tensor[(11, 16, 16), int8], %var_5746: Tensor[(11, 16, 16), int8]) -> (Tensor[(11, 16, 16), float64],) {
  %644 = fn (%var_5727: Tensor[(11, 16, 16), int8], %var_5728: Tensor[(11, 16, 16), int8]) -> (Tensor[(11, 16, 16), float64],) {
    %634 = cast(%var_5728, dtype="int8") /* ty=Tensor[(11, 16, 16), int8] */;
    %635 = shape_of(%var_5727, dtype="int32") /* ty=Tensor[(3), int32] */;
    %636 = cast(%var_5727, dtype="int8") /* ty=Tensor[(11, 16, 16), int8] */;
    %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %638 = minimum(%636, %637) /* ty=Tensor[(11, 16, 16), int8] */;
    %639 = cast(%638, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %640 = shape_of(%var_5728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %641 = cast(%var_5728, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %643 = floor_divide(%641, %642) /* ty=Tensor[(11, 16, 16), float64] */;
    (%643,)
  };
  %644(%var_5745, %var_5746) /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_5447(%var_5366: Tensor[(1, 14, 2), int64], %var_5397: Tensor[(1, 1210), uint16], %var_5411: Tensor[(12), uint64], %var_5412: Tensor[(3, 20), uint64]) -> (Tensor[(12, 14, 2), int64], Tensor[(12, 14, 2), bool], Tensor[(11, 11, 10), uint16], Tensor[(1, 1210), uint16], Tensor[(4, 12, 9), int8], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(3, 20), uint64], Tensor[(3, 13, 5), float64]) {
  %645 = cast(%var_5366, dtype="int64") /* ty=Tensor[(1, 14, 2), int64] */;
  %646 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 14, 2), int64] */, dtype="int64") /* ty=Tensor[(12, 14, 2), int64] */;
  %647 = cast(%var_5366, dtype="float64") /* ty=Tensor[(1, 14, 2), float64] */;
  %648 = erf(%647) /* ty=Tensor[(1, 14, 2), float64] */;
  %649 = cast(%648, dtype="bool") /* ty=Tensor[(1, 14, 2), bool] */;
  %650 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 14, 2), int64] */, dtype="bool") /* ty=Tensor[(12, 14, 2), bool] */;
  %651 = cast(%var_5397, dtype="uint16") /* ty=Tensor[(1, 1210), uint16] */;
  %652 = reshape(%651, newshape=[11, 11, 10]) /* ty=Tensor[(11, 11, 10), uint16] */;
  %653 = cast(meta[relay.Constant][40] /* ty=Tensor[(432), uint16] */, dtype="uint16") /* ty=Tensor[(432), uint16] */;
  %654 = cast(%var_5411, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %655 = cast(%var_5412, dtype="uint64") /* ty=Tensor[(3, 20), uint64] */;
  %656 = reshape(%653, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint16] */;
  %657 = reshape(%654, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %658 = reshape(%655, newshape=[60, 1]) /* ty=Tensor[(60, 1), uint64] */;
  %659 = @func_907(%656, %657, %658) /* ty=(Tensor[(4, 12, 9), bool], Tensor[(5, 3, 4), float64], Tensor[(12), uint64], Tensor[(60, 1), uint64], Tensor[(5, 3, 4), float64], Tensor[(4, 12, 9), int8]) */;
  %660 = @func_5310() /* ty=(Tensor[(3, 13, 5), float64],) */;
  %661 = logical_xor(%645, %646) /* ty=Tensor[(12, 14, 2), int64] */;
  %662 = less(%649, %650) /* ty=Tensor[(12, 14, 2), bool] */;
  %663 = @func_2985(%652) /* ty=Tensor[(11, 11, 10), uint16] */;
  %664 = %659.5;
  %665 = %660.0;
  (%661, %662, %663, %var_5397, %664, meta[relay.Constant][40] /* ty=Tensor[(432), uint16] */, %var_5411, %var_5412, %665)
}

def @func_3468(%var_3467: Tensor[(4, 8, 13), float32]) -> (Tensor[(2, 4, 16), float32], Tensor[(4, 8, 13), bool]) {
  %675 = fn (%var_3459: Tensor[(4, 8, 13), float32]) -> (Tensor[(2, 4, 16), float32], Tensor[(4, 8, 13), bool]) {
    %666 = @func_2775() /* ty=(Tensor[(2, 4, 16), float32],) */;
    %667 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
    %668 = %667.1;
    %669 = cast(%var_3459, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
    %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
    %671 = cast(%668, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
    %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %673 = %666.0;
    %674 = equal(%671, %672) /* ty=Tensor[(4, 8, 13), bool] */;
    (%673, %674)
  };
  %675(%var_3467) /* ty=(Tensor[(2, 4, 16), float32], Tensor[(4, 8, 13), bool]) */
}

def @func_4460(%var_4458: Tensor[(2, 4, 16), float32], %var_4459: Tensor[(416), float32]) -> (Tensor[(2, 4, 16), bool], Tensor[(416), float32], Tensor[(2, 4, 16), float32]) {
  @func_4456(%var_4458, %var_4459) /* ty=(Tensor[(2, 4, 16), bool], Tensor[(416), float32], Tensor[(2, 4, 16), float32]) */
}

def @func_3997(%var_3994: int32, %var_3995: Tensor[(128), float32], %var_3996: Tensor[(2, 4, 16), bool]) -> (Tensor[(2, 4, 16), int32], Tensor[(2, 4, 16), float32], Tensor[(2, 128), float32]) {
  %701 = fn (%var_3896: int32, %var_3925: Tensor[(128), float32], %var_3949: Tensor[(2, 4, 16), bool]) -> (Tensor[(2, 4, 16), int32], Tensor[(2, 4, 16), float32], Tensor[(2, 128), float32]) {
    %676 = cast(%var_3925, dtype="float32") /* ty=Tensor[(128), float32] */;
    %677 = reshape(%676, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
    %678 = @func_1534(%677) /* ty=(Tensor[(2, 4, 16), float32],) */;
    %679 = %678.0;
    %680 = cast(%679, dtype="bool") /* ty=Tensor[(2, 4, 16), bool] */;
    %681 = cast(%var_3896, dtype="bool") /* ty=bool */;
    %682 = greater(%680, %681) /* ty=Tensor[(2, 4, 16), bool] */;
    %683 = cast(%var_3949, dtype="int32") /* ty=Tensor[(2, 4, 16), int32] */;
    %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(%682, dtype="int32") /* ty=Tensor[(2, 4, 16), int32] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %687 = @func_1968() /* ty=(Tensor[(2, 4, 16), float32], Tensor[(2, 4, 16), float32]) */;
    %688 = cast(%var_3896, dtype="int32") /* ty=int32 */;
    %689 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 1), int32] */, dtype="int32") /* ty=Tensor[(2, 1), int32] */;
    %690 = maximum(%688, %689) /* ty=Tensor[(2, 1), int32] */;
    %691 = cast(%var_3925, dtype="bool") /* ty=Tensor[(128), bool] */;
    %692 = cast(%690, dtype="bool") /* ty=Tensor[(2, 1), bool] */;
    %693 = not_equal(%691, %692) /* ty=Tensor[(2, 128), bool] */;
    %694 = cast(%693, dtype="bool") /* ty=Tensor[(2, 128), bool] */;
    %695 = cast(%var_3925, dtype="bool") /* ty=Tensor[(128), bool] */;
    %696 = equal(%694, %695) /* ty=Tensor[(2, 128), bool] */;
    %697 = cast(%696, dtype="float32") /* ty=Tensor[(2, 128), float32] */;
    %698 = right_shift(%685, %686) /* ty=Tensor[(2, 4, 16), int32] */;
    %699 = %687.1;
    %700 = exp(%697) /* ty=Tensor[(2, 128), float32] */;
    (%698, %699, %700)
  };
  %701(%var_3994, %var_3995, %var_3996) /* ty=(Tensor[(2, 4, 16), int32], Tensor[(2, 4, 16), float32], Tensor[(2, 128), float32]) */
}

def @func_4934() -> (Tensor[(3, 13, 5), float64], Tensor[(128), float32], Tensor[(128), float64], Tensor[(2, 4, 16), bool]) {
  %702 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %704 = cast(meta[relay.Constant][42] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %705 = reshape(%704, newshape=[128]) /* ty=Tensor[(128), float64] */;
  %706 = @func_1858(%705) /* ty=(Tensor[(128), float32], Tensor[(128), float32]) */;
  %707 = cast(meta[relay.Constant][42] /* ty=Tensor[(128), float64] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %708 = reshape(%707, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
  %709 = @func_3626(%708) /* ty=(Tensor[(60), uint64], Tensor[(832), float32], Tensor[(2, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(605, 2), int8], Tensor[(2, 4, 16), int8], Tensor[(2, 4, 16), bool], Tensor[(2, 4, 16), float32], Tensor[(4, 48), float64]) */;
  %710 = exp(%703) /* ty=Tensor[(3, 13, 5), float64] */;
  %711 = %706.0;
  %712 = %709.6;
  (%710, %711, meta[relay.Constant][42] /* ty=Tensor[(128), float64] */, %712)
}

def @func_6077() -> (Tensor[(2, 4, 16), float32],) {
  %714 = fn () -> (Tensor[(2, 4, 16), float32],) {
    %713 = @func_5475() /* ty=Tensor[(2, 4, 16), float32] */;
    (%713,)
  };
  %714() /* ty=(Tensor[(2, 4, 16), float32],) */
}

def @func_4880() -> Tensor[(3, 13, 5), float64] {
  %716 = fn () -> Tensor[(3, 13, 5), float64] {
    %715 = @func_3410() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(3, 13, 5), float64]) */;
    %715.0
  };
  %716() /* ty=Tensor[(3, 13, 5), float64] */
}

def @func_3701(%var_3699: Tensor[(416), float32], %var_3700: Tensor[(416, 2), float32]) -> (Tensor[(416), bool], Tensor[(432), uint16], Tensor[(416, 2), float32]) {
  %730 = fn (%var_3681: Tensor[(416), float32], %var_3687: Tensor[(416, 2), float32]) -> (Tensor[(416), bool], Tensor[(432), uint16], Tensor[(416, 2), float32]) {
    %717 = @func_1905() /* ty=(Tensor[(128), float64], Tensor[(4, 8, 13), float32], Tensor[(416), float32]) */;
    %718 = %717.2;
    %719 = cast(%var_3681, dtype="bool") /* ty=Tensor[(416), bool] */;
    %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(1), int32] */;
    %721 = cast(%718, dtype="bool") /* ty=Tensor[(416), bool] */;
    %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?), bool] */;
    %723 = cast(%var_3687, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
    %724 = cast(%var_3687, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
    %725 = reshape(%723, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
    %726 = reshape(%724, newshape=[13, 4, 16]) /* ty=Tensor[(13, 4, 16), float32] */;
    %727 = @func_2708(%725, %726) /* ty=(Tensor[(13, 4, 16), float32], Tensor[(128), float64], Tensor[(13, 4, 16), float64], Tensor[(13, 4, 16), bool], Tensor[(13, 4, 16), int16], Tensor[(13, 4, 16), float32], Tensor[(3, 13, 5), float64], Tensor[(12), uint64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) */;
    %728 = less_equal(%721, %722) /* ty=Tensor[(416), bool] */;
    %729 = %727.8;
    (%728, %729, %var_3687)
  };
  %730(%var_3699, %var_3700) /* ty=(Tensor[(416), bool], Tensor[(432), uint16], Tensor[(416, 2), float32]) */
}

def @func_4370(%var_4369: Tensor[(3, 11, 3), float64]) -> (Tensor[(3, 11, 3), bool], Tensor[(3, 11, 3), float32]) {
  %745 = fn (%var_4344: Tensor[(3, 11, 3), float64]) -> (Tensor[(3, 11, 3), bool], Tensor[(3, 11, 3), float32]) {
    %731 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 11, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 3), float64] */;
    %732 = shape_of(%var_4344, dtype="int32") /* ty=Tensor[(3), int32] */;
    %733 = cast(%var_4344, dtype="float64") /* ty=Tensor[(3, 11, 3), float64] */;
    %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %735 = divide(%733, %734) /* ty=Tensor[(3, 11, 3), float64] */;
    %736 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 11, 3), float64] */, dtype="float32") /* ty=Tensor[(3, 11, 3), float32] */;
    %737 = sinh(%736) /* ty=Tensor[(3, 11, 3), float32] */;
    %738 = cast(%737, dtype="bool") /* ty=Tensor[(3, 11, 3), bool] */;
    %739 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(%735, dtype="bool") /* ty=Tensor[(3, 11, 3), bool] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %742 = cast(%var_4344, dtype="float32") /* ty=Tensor[(3, 11, 3), float32] */;
    %743 = equal(%740, %741) /* ty=Tensor[(3, 11, 3), bool] */;
    %744 = tan(%742) /* ty=Tensor[(3, 11, 3), float32] */;
    (%743, %744)
  };
  %745(%var_4369) /* ty=(Tensor[(3, 11, 3), bool], Tensor[(3, 11, 3), float32]) */
}

def @func_1643() -> (Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) {
  %751 = fn () -> (Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) {
    %746 = cast(meta[relay.Constant][44] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
    %747 = reshape(%746, newshape=[2, 4, 16]) /* ty=Tensor[(2, 4, 16), float32] */;
    %748 = @func_1534(%747) /* ty=(Tensor[(2, 4, 16), float32],) */;
    %749 = @func_1602() /* ty=Tensor[(3, 13, 5), float64] */;
    %750 = %748.0;
    (%749, %750, meta[relay.Constant][44] /* ty=Tensor[(128), float32] */)
  };
  %751() /* ty=(Tensor[(3, 13, 5), float64], Tensor[(2, 4, 16), float32], Tensor[(128), float32]) */
}

def @func_2294(%var_2292: Tensor[(2, 4, 16), float32]) -> Tensor[(2, 4, 16), int64] {
  @func_2291(%var_2292) /* ty=Tensor[(2, 4, 16), int64] */
}

def @func_1239(%var_1224: Tensor[(16, 13, 16), bool], %var_1233: Tensor[(12), uint64]) -> (Tensor[(16, 13, 16), bool], Tensor[(5, 3, 4), float64], Tensor[(432), uint16], Tensor[(12), uint64], Tensor[(60), uint64]) {
  %752 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 13, 16), bool] */, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
  %753 = shape_of(%var_1224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%var_1224, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %756 = cast(meta[relay.Constant][46] /* ty=Tensor[(432), uint16] */, dtype="uint16") /* ty=Tensor[(432), uint16] */;
  %757 = cast(%var_1233, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %758 = cast(meta[relay.Constant][47] /* ty=Tensor[(60), uint64] */, dtype="uint64") /* ty=Tensor[(60), uint64] */;
  %759 = reshape(%756, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint16] */;
  %760 = reshape(%757, newshape=[12]) /* ty=Tensor[(12), uint64] */;
  %761 = reshape(%758, newshape=[60, 1]) /* ty=Tensor[(60, 1), uint64] */;
  %762 = @func_907(%759, %760, %761) /* ty=(Tensor[(4, 12, 9), bool], Tensor[(5, 3, 4), float64], Tensor[(12), uint64], Tensor[(60, 1), uint64], Tensor[(5, 3, 4), float64], Tensor[(4, 12, 9), int8]) */;
  %763 = logical_and(%754, %755) /* ty=Tensor[(16, 13, 16), bool] */;
  %764 = %762.4;
  (%763, %764, meta[relay.Constant][46] /* ty=Tensor[(432), uint16] */, %var_1233, meta[relay.Constant][47] /* ty=Tensor[(60), uint64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */the function is provided too many arguments expected 0, found 1

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
