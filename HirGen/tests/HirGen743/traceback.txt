==========mod==========
#[version = "0.0.5"]
def @func_7332(%var_7286: Tensor[(12, 5, 16), bool]) -> (Tensor[(12, 5, 16), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 5, 16), bool] */, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
  %1 = shape_of(%var_7286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_7286, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = @func_2809() /* ty=(Tensor[(3, 4, 5), float32],) */;
  %5 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
  %6 = logical_and(%2, %3) /* ty=Tensor[(12, 5, 16), bool] */;
  %7 = @func_7257() /* ty=Tensor[(3, 4, 5), bool] */;
  %8 = %4.0;
  %9 = %5.1;
  (%6, %7, %8, %9)
}

def @func_11622() -> (Tensor[(3, 4, 5), float64],) {
  %10 = @func_2763() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %11 = %10.0;
  (%11,)
}

def @func_5836() -> Tensor[(3, 4, 5), bool] {
  %12 = @func_4626() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %12.1
}

def @func_4111() -> (Tensor[(416), int16], Tensor[(9, 5, 360), bool], Tensor[(1560), uint32], Tensor[(72), uint32]) {
  %13 = @func_2941() /* ty=(Tensor[(3, 4, 5), uint16], Tensor[(13, 8, 15), uint32], Tensor[(260), float32], Tensor[(416), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(72), uint32] */, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %16 = reshape(%14, newshape=[1560, 1]) /* ty=Tensor[(1560, 1), uint32] */;
  %17 = reshape(%15, newshape=[3, 24]) /* ty=Tensor[(3, 24), uint32] */;
  %18 = @func_3762(%16, %17) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(1560, 1), uint32], Tensor[(9, 5, 360), bool], Tensor[(3, 24), float64], Tensor[(3, 24), bool]) */;
  %19 = %13.3;
  %20 = %18.2;
  (%19, %20, meta[relay.Constant][1] /* ty=Tensor[(1560), uint32] */, meta[relay.Constant][2] /* ty=Tensor[(72), uint32] */)
}

def @func_4780() -> (Tensor[(3, 4, 5), bool],) {
  %21 = @func_4029() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %22 = %21.0;
  (%22,)
}

def @func_12279(%var_12237: Tensor[(6, 14, 14), float32]) -> (Tensor[(6, 14, 14), int64], Tensor[(260), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(6, 14, 14), float64]) {
  %23 = cast(%var_12237, dtype="float32") /* ty=Tensor[(6, 14, 14), float32] */;
  %24 = sigmoid(%23) /* ty=Tensor[(6, 14, 14), float32] */;
  %25 = cast(%24, dtype="int64") /* ty=Tensor[(6, 14, 14), int64] */;
  %26 = shape_of(%var_12237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%var_12237, dtype="int64") /* ty=Tensor[(6, 14, 14), int64] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %29 = @func_10908() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %30 = @func_10155() /* ty=(Tensor[(260), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %31 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %32 = cast(%24, dtype="float64") /* ty=Tensor[(6, 14, 14), float64] */;
  %33 = multiply(%27, %28) /* ty=Tensor[(6, 14, 14), int64] */;
  %34 = @func_10614() /* ty=Tensor[(260), float32] */;
  %35 = @func_6933() /* ty=Tensor[(3, 4, 5), bool] */;
  %36 = %29.0;
  %37 = %30.2;
  %38 = %31.2;
  %39 = asin(%32) /* ty=Tensor[(6, 14, 14), float64] */;
  (%33, %34, %35, %36, %37, %38, %39)
}

def @func_13017() -> (Tensor[(3, 4, 5), bool], Tensor[(260), float32]) {
  %40 = @func_7694() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %41 = %40.0;
  %42 = @func_4272() /* ty=Tensor[(260), float32] */;
  (%41, %42)
}

def @func_3030() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %43 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %44 = @func_2663() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %45 = %43.0;
  %46 = %44.1;
  (%45, %46)
}

def @func_9745() -> (Tensor[(3, 4, 5), bool],) {
  %47 = @func_4780() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %48 = %47.0;
  (%48,)
}

def @func_10637() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
  %49 = @func_6842() /* ty=Tensor[(3, 4, 5), bool] */;
  %50 = @func_3399() /* ty=Tensor[(3, 4, 5), float64] */;
  (%49, %50)
}

def @func_4259(%var_4246: uint16) -> (Tensor[(1, 9, 3), float32], Tensor[(3, 4, 5), bool]) {
  %51 = cast(%var_4246, dtype="bool") /* ty=bool */;
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 9, 3), uint16] */, dtype="bool") /* ty=Tensor[(1, 9, 3), bool] */;
  %53 = not_equal(%51, %52) /* ty=Tensor[(1, 9, 3), bool] */;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(1, 9, 3), float32] */;
  %55 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %56 = log(%54) /* ty=Tensor[(1, 9, 3), float32] */;
  %57 = %55.0;
  (%56, %57)
}

def @func_7435() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) {
  %58 = @func_6790() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */;
  %59 = @func_4056() /* ty=Tensor[(3, 4, 5), float64] */;
  %60 = %58.0;
  (%59, %60)
}

def @func_9123() -> (Tensor[(3, 4, 5), float64],) {
  %61 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
  %62 = %61.0;
  (%62,)
}

def @func_4573() -> Tensor[(3, 4, 5), bool] {
  %63 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %63.0
}

def @func_10614() -> Tensor[(260), float32] {
  @func_8078() /* ty=Tensor[(260), float32] */
}

def @func_8672() -> (Tensor[(8, 52), float64],) {
  %64 = @func_6189() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) */;
  %65 = %64.2;
  %66 = cast(%65, dtype="float64") /* ty=Tensor[(8, 52), float64] */;
  %67 = cos(%66) /* ty=Tensor[(8, 52), float64] */;
  (%67,)
}

def @func_8749() -> (Tensor[(5, 4, 16), uint8], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(1560), uint32], Tensor[(5, 10, 1), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 15), uint32]) {
  %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 4, 16), uint8] */, dtype="uint8") /* ty=Tensor[(5, 4, 16), uint8] */;
  %69 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(5, 4, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 4, 16), uint8] */, dtype="uint8") /* ty=Tensor[(5, 4, 16), uint8] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %72 = cast(meta[relay.Constant][6] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %73 = reshape(%72, newshape=[1560]) /* ty=Tensor[(1560), uint32] */;
  %74 = @func_4242(%73) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), float32], Tensor[(1560), float64], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */;
  %75 = @func_3275() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %76 = @func_6189() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) */;
  %77 = @func_5964() /* ty=(Tensor[(13, 8, 15), uint32],) */;
  %78 = left_shift(%70, %71) /* ty=Tensor[(5, 4, 16), uint8] */;
  %79 = @func_8473() /* ty=Tensor[(3, 4, 5), bool] */;
  %80 = %74.5;
  %81 = %75.1;
  %82 = %76.0;
  %83 = %77.0;
  (%78, %79, %80, meta[relay.Constant][6] /* ty=Tensor[(1560), uint32] */, %81, %82, %83)
}

def @func_370(%var_357: Tensor[(9, 8, 1), uint32], %var_358: Tensor[(9, 8, 5), uint32], %var_365: Tensor[(1560), uint32]) -> (Tensor[(9, 8, 5), uint32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) {
  %84 = cast(%var_357, dtype="uint32") /* ty=Tensor[(9, 8, 1), uint32] */;
  %85 = cast(%var_358, dtype="uint32") /* ty=Tensor[(9, 8, 5), uint32] */;
  %86 = cast(%var_365, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %87 = cast(%var_365, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %88 = reshape(%86, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %89 = reshape(%87, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %90 = right_shift(%84, %85) /* ty=Tensor[(9, 8, 5), uint32] */;
  %91 = @func_207(%88, %89) /* ty=Tensor[(13, 8, 15), uint32] */;
  (%90, %91, %var_365)
}

def @func_9412() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(260), float32]) {
  %92 = @func_7636() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %93 = @func_6933() /* ty=Tensor[(3, 4, 5), bool] */;
  %94 = %92.0;
  %95 = @func_4272() /* ty=Tensor[(260), float32] */;
  (%93, %94, %95)
}

def @func_13142() -> Tensor[(13, 8, 4), float64] {
  %96 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %96.3
}

def @func_7636() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %97 = @func_6139() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
  %98 = @func_2500() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %99 = %97.1;
  %100 = %98.0;
  (%99, %100)
}

def @func_12347() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) {
  %101 = @func_6790() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */;
  %102 = @func_9819() /* ty=(Tensor[(260), float32], Tensor[(3, 4, 5), bool]) */;
  %103 = %101.2;
  %104 = %102.1;
  (%103, %104)
}

def @func_10584() -> (Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %105 = @func_6054() /* ty=(Tensor[(9, 5, 1), float32],) */;
  %106 = @func_5678() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32]) */;
  %107 = @func_6259() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %108 = %105.0;
  %109 = %106.1;
  %110 = %107.0;
  (%108, %109, %110)
}

def @func_13156() -> (Tensor[(3, 4, 5), float64],) {
  %111 = @func_7019() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %112 = %111.0;
  (%112,)
}

def @func_10512(%var_10506: Tensor[(8, 52), float32]) -> Tensor[(8, 52), bool] {
  %113 = @func_4892() /* ty=Tensor[(8, 52), float32] */;
  %114 = cast(%var_10506, dtype="bool") /* ty=Tensor[(8, 52), bool] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(2), int32] */;
  %116 = cast(%113, dtype="bool") /* ty=Tensor[(8, 52), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_and(%116, %117) /* ty=Tensor[(8, 52), bool] */
}

def @func_13387() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) {
  %118 = @func_13077() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */;
  %119 = %118.1;
  %120 = @func_8187() /* ty=Tensor[(3, 4, 5), bool] */;
  (%119, %120)
}

def @func_6054() -> (Tensor[(9, 5, 1), float32],) {
  %121 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %122 = %121.0;
  (%122,)
}

def @func_7158(%var_7118: Tensor[(13, 8, 15), int64]) -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %123 = @func_6715() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %124 = @func_6189() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) */;
  %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %126 = cast(meta[relay.Constant][7] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %127 = reshape(%125, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %128 = reshape(%126, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %129 = @func_5767() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(8, 52), float32], Tensor[(3, 4, 5), float64]) */;
  %130 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %131 = %129.0;
  %132 = cast(%131, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %133 = reshape(%132, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %134 = @func_2551(%133) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */;
  %135 = %134.1;
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(1560), uint32] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%135, dtype="int64") /* ty=Tensor[(13, 8, 15), int64] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %140 = right_shift(%138, %139) /* ty=Tensor[(13, 8, 15), int64] */;
  %141 = cast(%var_7118, dtype="bool") /* ty=Tensor[(13, 8, 15), bool] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%140, dtype="bool") /* ty=Tensor[(13, 8, 15), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %145 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %146 = cast(%135, dtype="float32") /* ty=Tensor[(13, 8, 15), float32] */;
  %147 = sqrt(%146) /* ty=Tensor[(13, 8, 15), float32] */;
  %148 = cast(%140, dtype="uint16") /* ty=Tensor[(13, 8, 15), uint16] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="uint16") /* ty=Tensor[(13, 8, 15), uint16] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %152 = @func_6569() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), uint32]) */;
  %153 = %123.0;
  %154 = %124.1;
  %155 = @func_207(%127, %128) /* ty=Tensor[(13, 8, 15), uint32] */;
  %156 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %157 = %130.0;
  %158 = less(%143, %144) /* ty=Tensor[(13, 8, 15), bool] */;
  %159 = %145.0;
  %160 = bitwise_or(%150, %151) /* ty=Tensor[(13, 8, 15), uint16] */;
  %161 = %152.1;
  %162 = @func_6933() /* ty=Tensor[(3, 4, 5), bool] */;
  (%153, %154, %155, %131, %156, %157, %158, %159, %160, %161, %162)
}

def @func_5977() -> (Tensor[(260), float32], Tensor[(3, 4, 5), float64]) {
  %163 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %164 = @func_2967() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %165 = %163.3;
  %166 = %164.0;
  (%165, %166)
}

def @func_9526() -> (Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool]) {
  %167 = @func_8061() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(16, 26), int16], Tensor[(13, 8, 15), uint32]) */;
  %168 = @func_4029() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %169 = %167.1;
  %170 = %168.0;
  (%169, %170)
}

def @func_2605() -> (Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) {
  %171 = @func_2220() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %172 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %173 = %171.0;
  %174 = %172.6;
  (%173, %174)
}

def @func_5947() -> (Tensor[(3, 4, 5), bool],) {
  %175 = @func_4029() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %176 = %175.1;
  (%176,)
}

def @func_3452() -> Tensor[(3, 4, 5), bool] {
  %177 = @func_2809() /* ty=(Tensor[(3, 4, 5), float32],) */;
  %178 = %177.0;
  %179 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 4, 5), float32] */, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%181, %182) /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_9200() -> Tensor[(3, 4, 5), float64] {
  %183 = @func_4842() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %183.0
}

def @func_9846() -> (Tensor[(3, 4, 5), bool],) {
  %184 = @func_6790() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */;
  %185 = %184.1;
  (%185,)
}

def @func_10442() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), int64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float32], Tensor[(1, 14, 7), float64], Tensor[(6, 11, 12), bool], Tensor[(792), int32]) {
  %186 = @func_9900() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %187 = @func_9846() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %188 = cast(meta[relay.Constant][9] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %189 = reshape(%188, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), int64] */;
  %190 = @func_7158(%189) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %191 = @func_4411() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) */;
  %192 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %193 = @func_10332() /* ty=(Tensor[(15, 5, 16), int16], Tensor[(3, 4, 5), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint16], Tensor[(3, 4, 5), bool], Tensor[(1, 14, 7), float64], Tensor[(98), float64]) */;
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(792), int32] */, dtype="int32") /* ty=Tensor[(792), int32] */;
  %195 = reshape(%194, newshape=[6, 11, 12]) /* ty=Tensor[(6, 11, 12), int32] */;
  %196 = %186.0;
  %197 = %187.0;
  %198 = %190.10;
  %199 = %191.1;
  %200 = %192.0;
  %201 = %193.5;
  %202 = @func_5071(%195) /* ty=Tensor[(6, 11, 12), bool] */;
  (%196, %197, %198, meta[relay.Constant][9] /* ty=Tensor[(1560), int64] */, %199, %200, %201, %202, meta[relay.Constant][10] /* ty=Tensor[(792), int32] */)
}

def @func_7694() -> (Tensor[(3, 4, 5), bool],) {
  %203 = @func_7257() /* ty=Tensor[(3, 4, 5), bool] */;
  (%203,)
}

def @func_2450() -> (Tensor[(3, 4, 5), bool],) {
  %204 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %205 = %204.0;
  (%205,)
}

def @func_6933() -> Tensor[(3, 4, 5), bool] {
  %206 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %206.2
}

def @func_11726() -> Tensor[(3, 4, 5), bool] {
  @func_4573() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_10694() -> Tensor[(260), float32] {
  %207 = @func_5539() /* ty=(Tensor[(260), float32],) */;
  %207.0
}

def @func_8407(%var_8383: Tensor[(14, 1, 3), float64], %var_8389: Tensor[(780, 2), uint32]) -> (Tensor[(14, 1, 3), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), bool], Tensor[(780, 2), float64]) {
  %208 = cast(%var_8383, dtype="float64") /* ty=Tensor[(14, 1, 3), float64] */;
  %209 = cast(%var_8389, dtype="uint32") /* ty=Tensor[(780, 2), uint32] */;
  %210 = reshape(%209, newshape=[1560]) /* ty=Tensor[(1560), uint32] */;
  %211 = @func_4242(%210) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), float32], Tensor[(1560), float64], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */;
  %212 = cast(%var_8389, dtype="float64") /* ty=Tensor[(780, 2), float64] */;
  %213 = log2(%208) /* ty=Tensor[(14, 1, 3), float64] */;
  %214 = %211.3;
  %215 = @func_4370() /* ty=Tensor[(3, 4, 5), bool] */;
  %216 = exp(%212) /* ty=Tensor[(780, 2), float64] */;
  (%213, %214, %215, %216)
}

def @func_7557() -> Tensor[(3, 4, 5), float64] {
  %217 = @func_4331() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %217.0
}

def @func_4029() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %218 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %219 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %220 = %218.0;
  %221 = %219.0;
  (%220, %221)
}

def @func_13427(%var_13422: Tensor[(5, 9, 10), float64]) -> (Tensor[(5, 9, 10), float64],) {
  %222 = cast(%var_13422, dtype="float64") /* ty=Tensor[(5, 9, 10), float64] */;
  %223 = sqrt(%222) /* ty=Tensor[(5, 9, 10), float64] */;
  (%223,)
}

def @func_2105(%var_2101: Tensor[(416), int16]) -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), uint32], Tensor[(416), int16]) {
  %224 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %225 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %226 = cast(%var_2101, dtype="int16") /* ty=Tensor[(416), int16] */;
  %227 = reshape(%226, newshape=[13, 8, 4]) /* ty=Tensor[(13, 8, 4), int16] */;
  %228 = @func_776(%227) /* ty=(Tensor[(13, 8, 4), uint32], Tensor[(13, 8, 4), float64]) */;
  %229 = %224.0;
  %230 = %225.3;
  %231 = %228.0;
  (%229, %230, %231, %var_2101)
}

def @func_9490(%var_9483: Tensor[(1, 14, 7), float64]) -> (Tensor[(1, 14, 7), float64],) {
  %232 = cast(%var_9483, dtype="float64") /* ty=Tensor[(1, 14, 7), float64] */;
  %233 = cos(%232) /* ty=Tensor[(1, 14, 7), float64] */;
  (%233,)
}

def @func_6790() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
  %234 = @func_5947() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %235 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %236 = @func_3931() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %237 = %234.0;
  %238 = %235.0;
  %239 = %236.0;
  (%237, %238, %239)
}

def @func_2663() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) {
  %240 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %241 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %242 = @func_2500() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %243 = %240.0;
  %244 = %241.0;
  %245 = %242.2;
  (%243, %244, %245)
}

def @func_11962() -> (Tensor[(3, 4, 5), float64],) {
  %246 = @func_9039() /* ty=Tensor[(3, 4, 5), float64] */;
  (%246,)
}

def @func_2809() -> (Tensor[(3, 4, 5), float32],) {
  %247 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %248 = %247.0;
  %249 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %250 = %249.0;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %252 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%248, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %255 = floor_divide(%253, %254) /* ty=Tensor[(3, 4, 5), float32] */;
  (%255,)
}

def @func_2292() -> (Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) {
  %256 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %257 = %256.0;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %259 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %260 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 26), int16] */, dtype="int16") /* ty=Tensor[(16, 26), int16] */;
  %261 = reshape(%260, newshape=[416]) /* ty=Tensor[(416), int16] */;
  %262 = @func_2105(%261) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), uint32], Tensor[(416), int16]) */;
  %263 = %262.2;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(13, 8, 4), float64] */;
  %265 = log(%258) /* ty=Tensor[(3, 4, 5), float32] */;
  %266 = %259.0;
  %267 = tan(%264) /* ty=Tensor[(13, 8, 4), float64] */;
  (%265, meta[relay.Constant][11] /* ty=Tensor[(16, 26), int16] */, %266, %267)
}

def @func_6479(%var_6430: Tensor[(1, 15, 3), float32], %var_6431: Tensor[(10, 15, 3), float32]) -> (Tensor[(10, 15, 3), float32], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(1, 15, 3), float64], Tensor[(3, 4, 5), float64]) {
  %268 = cast(%var_6430, dtype="float32") /* ty=Tensor[(1, 15, 3), float32] */;
  %269 = cast(%var_6431, dtype="float32") /* ty=Tensor[(10, 15, 3), float32] */;
  %270 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
  %271 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %272 = cast(%var_6430, dtype="float64") /* ty=Tensor[(1, 15, 3), float64] */;
  %273 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %274 = divide(%268, %269) /* ty=Tensor[(10, 15, 3), float32] */;
  %275 = %270.0;
  %276 = %271.0;
  %277 = log(%272) /* ty=Tensor[(1, 15, 3), float64] */;
  %278 = %273.0;
  (%274, %275, %276, %277, %278)
}

def @func_5678() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32]) {
  %279 = @func_4400() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %280 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %281 = %280.0;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %283 = cos(%282) /* ty=Tensor[(3, 4, 5), float32] */;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %285 = @func_4029() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %286 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
  %287 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %288 = @func_4573() /* ty=Tensor[(3, 4, 5), bool] */;
  %289 = %279.0;
  %290 = erf(%284) /* ty=Tensor[(3, 4, 5), float64] */;
  %291 = %285.1;
  %292 = %286.0;
  %293 = @func_5283() /* ty=Tensor[(1560), uint32] */;
  (%287, %288, %289, %290, %291, %292, %293)
}

def @func_6842() -> Tensor[(3, 4, 5), bool] {
  %294 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %294.2
}

def @func_6333(%var_6276: Tensor[(3, 4, 5), bool]) -> (Tensor[(3, 4, 5), uint32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool]) {
  %295 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %296 = %295.0;
  %297 = cast(%var_6276, dtype="uint32") /* ty=Tensor[(3, 4, 5), uint32] */;
  %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%296, dtype="uint32") /* ty=Tensor[(3, 4, 5), uint32] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %301 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
  %302 = @func_6139() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
  %303 = bitwise_xor(%299, %300) /* ty=Tensor[(3, 4, 5), uint32] */;
  %304 = %301.1;
  %305 = %302.1;
  (%303, %304, %305)
}

def @func_6102() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %306 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %307 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %308 = %306.2;
  %309 = %307.0;
  (%308, %309)
}

def @func_8340() -> (Tensor[(260), float32], Tensor[(3, 4, 5), float64]) {
  %310 = @func_5539() /* ty=(Tensor[(260), float32],) */;
  %311 = @func_4331() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %312 = %310.0;
  %313 = %311.0;
  (%312, %313)
}

def @func_2132() -> Tensor[(5, 10, 1), float64] {
  %314 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 1), float64] */;
  cosh(%314) /* ty=Tensor[(5, 10, 1), float64] */
}

def @func_4009(%var_3948: Tensor[(3, 4, 5), bool]) -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %315 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %316 = %315.1;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %318 = cast(%var_3948, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %319 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%316, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %322 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %323 = @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %324 = asinh(%317) /* ty=Tensor[(3, 4, 5), float32] */;
  %325 = mod(%320, %321) /* ty=Tensor[(3, 4, 5), float64] */;
  %326 = %322.0;
  %327 = %323.0;
  %328 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  (%324, %325, %326, %327, %328)
}

def @func_2500() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) {
  %329 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %330 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 52), int16] */, dtype="int16") /* ty=Tensor[(8, 52), int16] */;
  %331 = reshape(%330, newshape=[416]) /* ty=Tensor[(416), int16] */;
  %332 = @func_2105(%331) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), uint32], Tensor[(416), int16]) */;
  %333 = %329.0;
  %334 = %332.0;
  (%333, %334, meta[relay.Constant][13] /* ty=Tensor[(8, 52), int16] */)
}

def @func_1976() -> (Tensor[(3, 4, 5), float64],) {
  %335 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %336 = %335.0;
  %337 = cast(%336, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %338 = atan(%337) /* ty=Tensor[(3, 4, 5), float64] */;
  (%338,)
}

def @func_13583() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %339 = @func_9123() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %340 = @func_3030() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %341 = %339.0;
  %342 = %340.0;
  %343 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  (%341, %342, %343)
}

def @func_7019() -> (Tensor[(3, 4, 5), float64],) {
  %344 = @func_4626() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %345 = %344.4;
  (%345,)
}

def @func_11039() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float32]) {
  %346 = @func_6569() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), uint32]) */;
  %347 = @func_10637() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */;
  %348 = @func_10442() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), int64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float32], Tensor[(1, 14, 7), float64], Tensor[(6, 11, 12), bool], Tensor[(792), int32]) */;
  %349 = %346.1;
  %350 = %347.1;
  %351 = %348.5;
  (%349, %350, %351)
}

def @func_6680() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) {
  %352 = @func_4626() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %353 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %354 = @func_5678() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32]) */;
  %355 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %356 = %352.2;
  %357 = %353.0;
  %358 = %354.6;
  %359 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  (%355, %356, %357, %358, %359)
}

def @func_10496(%var_10493: Tensor[(8, 10, 8), float32]) -> Tensor[(8, 10, 8), float32] {
  %360 = cast(%var_10493, dtype="float32") /* ty=Tensor[(8, 10, 8), float32] */;
  sigmoid(%360) /* ty=Tensor[(8, 10, 8), float32] */
}

def @func_2728() -> (Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %361 = cast(-9.33926f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %362 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 5, 1), float32] */;
  %363 = cast(-9.33926f /* ty=float32 */, dtype="int16") /* ty=int16 */;
  %364 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 5, 1), float32] */, dtype="int16") /* ty=Tensor[(9, 5, 1), int16] */;
  %365 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %366 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %367 = power(%361, %362) /* ty=Tensor[(9, 5, 1), float32] */;
  %368 = bitwise_or(%363, %364) /* ty=Tensor[(9, 5, 1), int16] */;
  %369 = %365.1;
  %370 = %366.0;
  (%367, %368, %369, %370)
}

def @func_10740() -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) {
  %371 = @func_9745() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %372 = %371.0;
  %373 = cast(%372, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %374 = @func_9846() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %375 = acos(%373) /* ty=Tensor[(3, 4, 5), float32] */;
  %376 = %374.0;
  (%375, %376)
}

def @func_4056() -> Tensor[(3, 4, 5), float64] {
  %377 = @func_2220() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %377.0
}

def @func_12887() -> (Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(8, 52), float64]) {
  %378 = @func_4370() /* ty=Tensor[(3, 4, 5), bool] */;
  %379 = cast(%378, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %380 = reshape(%379, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %381 = @func_2551(%380) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */;
  %382 = %381.1;
  %383 = @func_11429() /* ty=Tensor[(8, 52), float64] */;
  (%378, %382, %383)
}

def @func_13496(%var_13487: Tensor[(12, 7, 13), float64]) -> Tensor[(12, 7, 13), float64] {
  %384 = cast(%var_13487, dtype="float64") /* ty=Tensor[(12, 7, 13), float64] */;
  atan(%384) /* ty=Tensor[(12, 7, 13), float64] */
}

def @func_7502() -> Tensor[(15, 5, 16), int16] {
  %385 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 5, 16), float32] */;
  %386 = cosh(%385) /* ty=Tensor[(15, 5, 16), float32] */;
  %387 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 5, 16), float32] */, dtype="int16") /* ty=Tensor[(15, 5, 16), int16] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="int16") /* ty=Tensor[(15, 5, 16), int16] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_xor(%389, %390) /* ty=Tensor[(15, 5, 16), int16] */
}

def @func_7784() -> (Tensor[(3, 4, 5), float32],) {
  %391 = @func_6139() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
  %392 = %391.0;
  (%392,)
}

def @func_11215() -> (Tensor[(3, 4, 5), float32],) {
  %393 = @func_3658() /* ty=Tensor[(3, 4, 5), float32] */;
  (%393,)
}

def @func_5372(%var_5296: Tensor[(72), uint32]) -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(1560), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), float64]) {
  %394 = cast(%var_5296, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %395 = cast(meta[relay.Constant][16] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %396 = cast(meta[relay.Constant][17] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %397 = reshape(%394, newshape=[72]) /* ty=Tensor[(72), uint32] */;
  %398 = reshape(%395, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %399 = reshape(%396, newshape=[60, 26]) /* ty=Tensor[(60, 26), uint32] */;
  %400 = @func_4510(%397, %398, %399) /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(60, 26), uint32]) */;
  %401 = cast(meta[relay.Constant][17] /* ty=Tensor[(1560), uint32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %402 = atanh(%401) /* ty=Tensor[(1560), float32] */;
  %403 = cast(%402, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %404 = cast(meta[relay.Constant][17] /* ty=Tensor[(1560), uint32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %405 = shape_of(%402, dtype="int32") /* ty=Tensor[(1), int32] */;
  %406 = cast(%402, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?), float32] */;
  %408 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %409 = @func_4056() /* ty=Tensor[(3, 4, 5), float64] */;
  %410 = %400.1;
  %411 = sqrt(%403) /* ty=Tensor[(1560), float64] */;
  %412 = add(%406, %407) /* ty=Tensor[(1560), float32] */;
  %413 = %408.0;
  (%409, %410, %var_5296, meta[relay.Constant][16] /* ty=Tensor[(360), uint32] */, %411, %412, %413)
}

def @func_3931() -> (Tensor[(3, 4, 5), float64],) {
  %414 = @func_2220() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %415 = %414.0;
  (%415,)
}

def @func_2551(%var_2546: Tensor[(3, 4, 5), float64]) -> (Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) {
  %416 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %417 = %416.0;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %419 = cast(meta[relay.Constant][18] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %420 = cast(meta[relay.Constant][18] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %421 = reshape(%419, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %422 = reshape(%420, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %423 = cast(%var_2546, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
  %424 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%417, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %427 = sqrt(%418) /* ty=Tensor[(3, 4, 5), float32] */;
  %428 = @func_207(%421, %422) /* ty=Tensor[(13, 8, 15), uint32] */;
  %429 = bitwise_or(%425, %426) /* ty=Tensor[(3, 4, 5), int16] */;
  (%427, %428, meta[relay.Constant][18] /* ty=Tensor[(1560), uint32] */, %429)
}

def @func_8473() -> Tensor[(3, 4, 5), bool] {
  %430 = @func_7636() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %430.1
}

def @func_12845() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %431 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %432 = @func_12816() /* ty=Tensor[(3, 4, 5), bool] */;
  (%431, %432)
}

def @func_590(%var_567: Tensor[(4, 5, 13), float32]) -> (Tensor[(13, 8, 15), uint32], Tensor[(4, 5, 13), uint16], Tensor[(1560), float32]) {
  %433 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %434 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %435 = reshape(%433, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %436 = reshape(%434, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %437 = cast(%var_567, dtype="float32") /* ty=Tensor[(4, 5, 13), float32] */;
  %438 = log10(%437) /* ty=Tensor[(4, 5, 13), float32] */;
  %439 = cast(%var_567, dtype="uint16") /* ty=Tensor[(4, 5, 13), uint16] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="uint16") /* ty=Tensor[(4, 5, 13), uint16] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %443 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560), uint32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %444 = @func_207(%435, %436) /* ty=Tensor[(13, 8, 15), uint32] */;
  %445 = bitwise_and(%441, %442) /* ty=Tensor[(4, 5, 13), uint16] */;
  %446 = cos(%443) /* ty=Tensor[(1560), float32] */;
  (%444, %445, %446)
}

def @func_4411() -> (Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) {
  %447 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %448 = %447.0;
  %449 = @func_4056() /* ty=Tensor[(3, 4, 5), float64] */;
  (%448, %449)
}

def @func_4242(%var_4203: Tensor[(1560), uint32]) -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), float32], Tensor[(1560), float64], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) {
  %450 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %451 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %452 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %453 = cast(%452, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %454 = reshape(%453, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %455 = @func_2551(%454) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */;
  %456 = %455.2;
  %457 = cast(%var_4203, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(1), int32] */;
  %459 = cast(%456, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %461 = bitwise_and(%459, %460) /* ty=Tensor[(1560), uint32] */;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %463 = shape_of(%var_4203, dtype="int32") /* ty=Tensor[(1), int32] */;
  %464 = cast(%var_4203, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?), float32] */;
  %466 = cast(%461, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %467 = @func_3275() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %468 = %450.0;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %470 = reshape(%469, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %471 = @func_3807(%470) /* ty=(Tensor[(3, 4, 5), bool],) */;
  %472 = %451.0;
  %473 = mod(%464, %465) /* ty=Tensor[(1560), float32] */;
  %474 = exp(%466) /* ty=Tensor[(1560), float64] */;
  %475 = %467.3;
  %476 = %471.0;
  (%468, %452, %472, %473, %474, %475, %476)
}

def @func_5071(%var_5055: Tensor[(6, 11, 12), int32]) -> Tensor[(6, 11, 12), bool] {
  %477 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 11, 12), int32] */, dtype="bool") /* ty=Tensor[(6, 11, 12), bool] */;
  %478 = shape_of(%var_5055, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%var_5055, dtype="bool") /* ty=Tensor[(6, 11, 12), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%479, %480) /* ty=Tensor[(6, 11, 12), bool] */
}

def @func_4626() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) {
  %481 = @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %482 = %481.0;
  %483 = cast(%482, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %484 = reshape(%483, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %485 = @func_3807(%484) /* ty=(Tensor[(3, 4, 5), bool],) */;
  %486 = %485.0;
  %487 = cast(%486, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %488 = reshape(%487, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), bool] */;
  %489 = @func_4009(%488) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %490 = @func_2941() /* ty=(Tensor[(3, 4, 5), uint16], Tensor[(13, 8, 15), uint32], Tensor[(260), float32], Tensor[(416), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %491 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %492 = %489.0;
  %493 = %490.5;
  %494 = %491.0;
  (%482, %486, %492, %493, %494)
}

def @func_8166() -> (Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), float64]) {
  %495 = @func_7246() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) */;
  %496 = @func_2763() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %497 = %495.1;
  %498 = %496.0;
  (%497, %498)
}

def @func_11931() -> Tensor[(3, 4, 5), bool] {
  %499 = @func_6680() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */;
  %499.4
}

def @func_13046() -> Tensor[(3, 4, 5), bool] {
  %500 = @func_12773() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %500.0
}

def @func_12575() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %501 = @func_12563() /* ty=Tensor[(3, 4, 5), bool] */;
  %502 = @func_12232() /* ty=Tensor[(3, 4, 5), bool] */;
  (%501, %502)
}

def @func_9669(%var_9647: Tensor[(8, 52), float64]) -> (Tensor[(3, 4, 5), float32], Tensor[(8, 52), int64]) {
  %503 = @func_6862() /* ty=(Tensor[(8, 52), float64],) */;
  %504 = %503.0;
  %505 = cast(%var_9647, dtype="int64") /* ty=Tensor[(8, 52), int64] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(2), int32] */;
  %507 = cast(%504, dtype="int64") /* ty=Tensor[(8, 52), int64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %509 = @func_3658() /* ty=Tensor[(3, 4, 5), float32] */;
  %510 = subtract(%507, %508) /* ty=Tensor[(8, 52), int64] */;
  (%509, %510)
}

def @func_8078() -> Tensor[(260), float32] {
  @func_4272() /* ty=Tensor[(260), float32] */
}

def @func_11956() -> Tensor[(6, 1, 3), float32] {
  %511 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 1, 3), float32] */;
  atan(%511) /* ty=Tensor[(6, 1, 3), float32] */
}

def @func_12563() -> Tensor[(3, 4, 5), bool] {
  %512 = @func_4780() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %512.0
}

def @func_2941() -> (Tensor[(3, 4, 5), uint16], Tensor[(13, 8, 15), uint32], Tensor[(260), float32], Tensor[(416), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) {
  %513 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %514 = %513.0;
  %515 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 4, 5), bool] */, dtype="uint16") /* ty=Tensor[(3, 4, 5), uint16] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="uint16") /* ty=Tensor[(3, 4, 5), uint16] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %519 = cast(meta[relay.Constant][23] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %520 = reshape(%519, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), float32] */;
  %521 = @func_590(%520) /* ty=(Tensor[(13, 8, 15), uint32], Tensor[(4, 5, 13), uint16], Tensor[(1560), float32]) */;
  %522 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %523 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %524 = %522.7;
  %525 = cast(%524, dtype="int16") /* ty=Tensor[(416), int16] */;
  %526 = reshape(%525, newshape=[13, 8, 4]) /* ty=Tensor[(13, 8, 4), int16] */;
  %527 = @func_776(%526) /* ty=(Tensor[(13, 8, 4), uint32], Tensor[(13, 8, 4), float64]) */;
  %528 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 4, 5), bool] */, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %529 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(3, 4, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 4, 5), bool] */, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %532 = logical_xor(%517, %518) /* ty=Tensor[(3, 4, 5), uint16] */;
  %533 = %521.0;
  %534 = %523.0;
  %535 = %527.1;
  %536 = divide(%530, %531) /* ty=Tensor[(3, 4, 5), float64] */;
  (%532, %533, meta[relay.Constant][23] /* ty=Tensor[(260), float32] */, %524, %534, %535, %536)
}

def @func_12380() -> (Tensor[(3, 4, 5), float32], Tensor[(1560), float64], Tensor[(72, 1), uint32]) {
  %537 = @func_2809() /* ty=(Tensor[(3, 4, 5), float32],) */;
  %538 = cast(meta[relay.Constant][25] /* ty=Tensor[(72, 1), uint32] */, dtype="uint32") /* ty=Tensor[(72, 1), uint32] */;
  %539 = reshape(%538, newshape=[72]) /* ty=Tensor[(72), uint32] */;
  %540 = @func_5372(%539) /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(1560), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), float64]) */;
  %541 = %537.0;
  %542 = %540.4;
  (%541, %542, meta[relay.Constant][25] /* ty=Tensor[(72, 1), uint32] */)
}

def @func_9307(%var_9294: Tensor[(15, 15, 11), uint16]) -> Tensor[(15, 15, 11), bool] {
  %543 = cast(meta[relay.Constant][26] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %544 = cast(%var_9294, dtype="bool") /* ty=Tensor[(15, 15, 11), bool] */;
  greater_equal(%543, %544) /* ty=Tensor[(15, 15, 11), bool] */
}

def @func_4731() -> (Tensor[(1560), uint32], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(13, 8, 15), uint32]) {
  %545 = @func_3275() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %546 = cast(meta[relay.Constant][27] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %547 = reshape(%546, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %548 = @func_3807(%547) /* ty=(Tensor[(3, 4, 5), bool],) */;
  %549 = %545.3;
  %550 = cast(%549, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %551 = cast(%549, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %552 = reshape(%550, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %553 = reshape(%551, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %554 = %548.0;
  %555 = @func_207(%552, %553) /* ty=Tensor[(13, 8, 15), uint32] */;
  (%549, %554, meta[relay.Constant][27] /* ty=Tensor[(60), float64] */, %555)
}

def @func_7741() -> (Tensor[(3, 4, 5), bool],) {
  %556 = @func_6842() /* ty=Tensor[(3, 4, 5), bool] */;
  (%556,)
}

def @func_4466() -> Tensor[(8, 52), int16] {
  %557 = @func_2663() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %557.2
}

def @func_6901(%var_6880: Tensor[(11, 11, 11), float64], %var_6895: Tensor[(60), float64]) -> (Tensor[(11, 11, 11), bool], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(3, 4, 5), float64]) {
  %558 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 11, 11), float64] */, dtype="bool") /* ty=Tensor[(11, 11, 11), bool] */;
  %559 = shape_of(%var_6880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%var_6880, dtype="bool") /* ty=Tensor[(11, 11, 11), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = cast(%var_6895, dtype="float64") /* ty=Tensor[(60), float64] */;
  %563 = reshape(%562, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %564 = @func_3807(%563) /* ty=(Tensor[(3, 4, 5), bool],) */;
  %565 = @func_4411() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) */;
  %566 = equal(%560, %561) /* ty=Tensor[(11, 11, 11), bool] */;
  %567 = %564.0;
  %568 = %565.1;
  (%566, %567, %var_6895, %568)
}

def @func_4272() -> Tensor[(260), float32] {
  %569 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %569.3
}

def @func_11575(%var_11477: Tensor[(1960), float32], %var_11478: Tensor[(260), float32], %var_11564: Tensor[(72, 1), uint32], %var_11565: Tensor[(360), uint32]) -> (Tensor[(4, 5, 13), uint16], Tensor[(260), float32], Tensor[(3, 4, 5), bool], Tensor[(9, 5, ?), uint16], Tensor[(3, 4, 5), float32], Tensor[(260), float32], Tensor[(5, 10, 1960), uint64], Tensor[(260), float32], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(72, 1), uint32], Tensor[(360), uint32], Tensor[(1560), uint32]) {
  %570 = cast(%var_11477, dtype="float32") /* ty=Tensor[(1960), float32] */;
  %571 = cast(%var_11478, dtype="float32") /* ty=Tensor[(260), float32] */;
  %572 = reshape(%570, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), float32] */;
  %573 = reshape(%571, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %574 = @func_2869(%572, %573) /* ty=(Tensor[(10, 14, 14), float32], Tensor[(10, 14, 14), float32], Tensor[(4, 5, 13), uint16], Tensor[(260), float32]) */;
  %575 = @func_6102() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %576 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %577 = %576.1;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(9, 5, 1), float64] */;
  %579 = erf(%578) /* ty=Tensor[(9, 5, 1), float64] */;
  %580 = cast(%577, dtype="uint16") /* ty=Tensor[(9, 5, 1), uint16] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="uint16") /* ty=Tensor[(9, 5, 1), uint16] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %584 = %575.1;
  %585 = cast(%584, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %586 = reshape(%585, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %587 = @func_2551(%586) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */;
  %588 = @func_10193() /* ty=Tensor[(5, 10, 1), float32] */;
  %589 = cast(%var_11477, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %590 = cast(%588, dtype="uint64") /* ty=Tensor[(5, 10, 1), uint64] */;
  %591 = cast(%579, dtype="float64") /* ty=Tensor[(9, 5, 1), float64] */;
  %592 = @func_6680() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */;
  %593 = cast(%584, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %594 = reshape(%593, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), bool] */;
  %595 = @func_8643(%594) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(11, 11, 11), int8], Tensor[(13, 8, 15), float64]) */;
  %596 = cast(%var_11564, dtype="uint32") /* ty=Tensor[(72, 1), uint32] */;
  %597 = cast(%var_11565, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %598 = cast(meta[relay.Constant][29] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %599 = reshape(%596, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint32] */;
  %600 = reshape(%597, newshape=[9, 8, 5]) /* ty=Tensor[(9, 8, 5), uint32] */;
  %601 = reshape(%598, newshape=[1560]) /* ty=Tensor[(1560), uint32] */;
  %602 = @func_370(%599, %600, %601) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %603 = %574.2;
  %604 = right_shift(%582, %583) /* ty=Tensor[(9, 5, ?), uint16] */;
  %605 = %587.0;
  %606 = @func_11373() /* ty=Tensor[(260), float32] */;
  %607 = bitwise_or(%589, %590) /* ty=Tensor[(5, 10, 1960), uint64] */;
  %608 = @func_10598() /* ty=Tensor[(260), float32] */;
  %609 = acos(%591) /* ty=Tensor[(9, 5, 1), float64] */;
  %610 = %592.2;
  %611 = %595.0;
  %612 = %602.2;
  (%603, %var_11478, %584, %604, %605, %606, %607, %608, %609, %610, %611, %612, %var_11564, %var_11565, meta[relay.Constant][29] /* ty=Tensor[(1560), uint32] */)
}

def @func_5767() -> (Tensor[(3, 4, 5), bool], Tensor[(8, 52), float32], Tensor[(3, 4, 5), float64]) {
  %613 = @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %614 = @func_2500() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %615 = %614.2;
  %616 = cast(%615, dtype="float32") /* ty=Tensor[(8, 52), float32] */;
  %617 = @func_4411() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) */;
  %618 = %613.0;
  %619 = atan(%616) /* ty=Tensor[(8, 52), float32] */;
  %620 = %617.1;
  (%618, %619, %620)
}

def @func_7684() -> (Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) {
  %621 = @func_5678() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32]) */;
  %622 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %623 = %621.6;
  %624 = %622.2;
  (%623, %624)
}

def @func_2571() -> (Tensor[(3, 4, 5), bool],) {
  %625 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %626 = %625.2;
  (%626,)
}

def @func_2064() -> (Tensor[(3, 4, 5), bool],) {
  %627 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %628 = %627.0;
  (%628,)
}

def @func_3658() -> Tensor[(3, 4, 5), float32] {
  %629 = @func_2809() /* ty=(Tensor[(3, 4, 5), float32],) */;
  %629.0
}

def @func_5007(%var_5004: Tensor[(1560), uint32]) -> (Tensor[(13, 8, 4), float64], Tensor[(9, 5, 360), bool], Tensor[(1560), uint32], Tensor[(18, 4), uint32]) {
  %630 = @func_4626() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %631 = cast(%var_5004, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %632 = cast(meta[relay.Constant][30] /* ty=Tensor[(18, 4), uint32] */, dtype="uint32") /* ty=Tensor[(18, 4), uint32] */;
  %633 = reshape(%631, newshape=[1560, 1]) /* ty=Tensor[(1560, 1), uint32] */;
  %634 = reshape(%632, newshape=[3, 24]) /* ty=Tensor[(3, 24), uint32] */;
  %635 = @func_3762(%633, %634) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(1560, 1), uint32], Tensor[(9, 5, 360), bool], Tensor[(3, 24), float64], Tensor[(3, 24), bool]) */;
  %636 = %630.3;
  %637 = %635.2;
  (%636, %637, %var_5004, meta[relay.Constant][30] /* ty=Tensor[(18, 4), uint32] */)
}

def @func_5283() -> Tensor[(1560), uint32] {
  %638 = @func_4731() /* ty=(Tensor[(1560), uint32], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(13, 8, 15), uint32]) */;
  %638.0
}

def @func_8438() -> Tensor[(1560), uint32] {
  %639 = @func_6680() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */;
  %639.3
}

def @func_3807(%var_3799: Tensor[(3, 4, 5), float64]) -> (Tensor[(3, 4, 5), bool],) {
  %640 = @func_2220() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %641 = %640.0;
  %642 = cast(%var_3799, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %646 = greater(%644, %645) /* ty=Tensor[(3, 4, 5), bool] */;
  (%646,)
}

def @func_6189() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) {
  %647 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %648 = @func_2967() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %649 = @func_5964() /* ty=(Tensor[(13, 8, 15), uint32],) */;
  %650 = %647.0;
  %651 = %648.0;
  %652 = @func_4892() /* ty=Tensor[(8, 52), float32] */;
  %653 = %649.0;
  (%650, %651, %652, %653)
}

def @func_2967() -> (Tensor[(3, 4, 5), float64],) {
  %654 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %655 = %654.0;
  (%655,)
}

def @func_12232() -> Tensor[(3, 4, 5), bool] {
  %656 = @func_4780() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %656.0
}

def @func_11373() -> Tensor[(260), float32] {
  %657 = @func_5539() /* ty=(Tensor[(260), float32],) */;
  %657.0
}

def @func_3275() -> (Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) {
  %658 = @func_2220() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %659 = @func_2132() /* ty=Tensor[(5, 10, 1), float64] */;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(5, 10, 1), float32] */;
  %661 = cast(meta[relay.Constant][31] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %662 = cast(meta[relay.Constant][31] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %663 = reshape(%661, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %664 = reshape(%662, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %665 = %658.0;
  %666 = sin(%660) /* ty=Tensor[(5, 10, 1), float32] */;
  %667 = @func_207(%663, %664) /* ty=Tensor[(13, 8, 15), uint32] */;
  (%665, %666, %667, meta[relay.Constant][31] /* ty=Tensor[(1560), uint32] */)
}

def @func_9185() -> Tensor[(3, 4, 5), float64] {
  @func_7557() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_13302() -> Tensor[(3, 4, 5), float64] {
  %668 = @func_2967() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %668.0
}

def @func_4400() -> (Tensor[(3, 4, 5), float64],) {
  %669 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
  %670 = %669.0;
  (%670,)
}

def @func_4842() -> (Tensor[(3, 4, 5), float64],) {
  %671 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %672 = %671.0;
  (%672,)
}

def @func_10598() -> Tensor[(260), float32] {
  @func_8078() /* ty=Tensor[(260), float32] */
}

def @func_12773() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %673 = @func_7598() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
  %674 = @func_12563() /* ty=Tensor[(3, 4, 5), bool] */;
  %675 = %673.1;
  %676 = @func_8473() /* ty=Tensor[(3, 4, 5), bool] */;
  %677 = @func_7257() /* ty=Tensor[(3, 4, 5), bool] */;
  (%674, %675, %676, %677)
}

def @func_12407(%var_12390: Tensor[(15, 11, 10), uint32]) -> Tensor[(15, 11, 10), uint32] {
  %678 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 11, 10), uint32] */, dtype="uint32") /* ty=Tensor[(15, 11, 10), uint32] */;
  %679 = shape_of(%var_12390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%var_12390, dtype="uint32") /* ty=Tensor[(15, 11, 10), uint32] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%680, %681) /* ty=Tensor[(15, 11, 10), uint32] */
}

def @func_6259() -> (Tensor[(3, 4, 5), bool],) {
  %682 = @func_4370() /* ty=Tensor[(3, 4, 5), bool] */;
  (%682,)
}

def @func_9819() -> (Tensor[(260), float32], Tensor[(3, 4, 5), bool]) {
  %683 = @func_7435() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) */;
  %684 = @func_8223() /* ty=Tensor[(260), float32] */;
  %685 = %683.1;
  (%684, %685)
}

def @func_11092() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %686 = @func_7598() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
  %687 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %688 = %686.1;
  %689 = %687.0;
  (%688, %689)
}

def @func_6862() -> (Tensor[(8, 52), float64],) {
  %690 = @func_2663() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %691 = %690.2;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(8, 52), float64] */;
  %693 = tan(%692) /* ty=Tensor[(8, 52), float64] */;
  (%693,)
}

def @func_9255() -> Tensor[(3, 4, 5), bool] {
  @func_8473() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_10929() -> Tensor[(3, 4, 5), bool] {
  %694 = @func_2500() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %694.0
}

def @func_7246() -> (Tensor[(3, 4, 5), float64], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) {
  %695 = @func_4411() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) */;
  %696 = %695.0;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(9, 5, 1), float64] */;
  %698 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %699 = @func_4056() /* ty=Tensor[(3, 4, 5), float64] */;
  %700 = cosh(%697) /* ty=Tensor[(9, 5, 1), float64] */;
  %701 = %698.0;
  (%699, %700, %701)
}

def @func_1869() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) {
  %702 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 4, 5), int16] */, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
  %703 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(3, 4, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 4, 5), int16] */, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %706 = maximum(%704, %705) /* ty=Tensor[(3, 4, 5), int16] */;
  %707 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 4, 5), int16] */, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%706, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %711 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 4, 5), int16] */, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %712 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(3, 4, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 4, 5), int16] */, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %715 = cast(meta[relay.Constant][35] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %716 = reshape(%715, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), float32] */;
  %717 = @func_590(%716) /* ty=(Tensor[(13, 8, 15), uint32], Tensor[(4, 5, 13), uint16], Tensor[(1560), float32]) */;
  %718 = equal(%709, %710) /* ty=Tensor[(3, 4, 5), bool] */;
  %719 = logical_or(%713, %714) /* ty=Tensor[(3, 4, 5), bool] */;
  %720 = %717.0;
  (%718, %719, %720, meta[relay.Constant][35] /* ty=Tensor[(260), float32] */)
}

def @func_8935() -> Tensor[(3, 4, 5), bool] {
  %721 = @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %721.0
}

def @func_9900() -> (Tensor[(3, 4, 5), float64],) {
  %722 = @func_9185() /* ty=Tensor[(3, 4, 5), float64] */;
  (%722,)
}

def @func_9619() -> (Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float32]) {
  %723 = @func_7246() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) */;
  %724 = @func_7784() /* ty=(Tensor[(3, 4, 5), float32],) */;
  %725 = @func_4626() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %726 = %723.1;
  %727 = %724.0;
  %728 = %725.2;
  (%726, %727, %728)
}

def @func_9039() -> Tensor[(3, 4, 5), float64] {
  @func_4056() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_776(%var_751: Tensor[(13, 8, 4), int16]) -> (Tensor[(13, 8, 4), uint32], Tensor[(13, 8, 4), float64]) {
  %729 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 8, 4), int16] */, dtype="bool") /* ty=Tensor[(13, 8, 4), bool] */;
  %730 = shape_of(%var_751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%var_751, dtype="bool") /* ty=Tensor[(13, 8, 4), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %733 = greater_equal(%731, %732) /* ty=Tensor[(13, 8, 4), bool] */;
  %734 = cast(%var_751, dtype="uint32") /* ty=Tensor[(13, 8, 4), uint32] */;
  %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%733, dtype="uint32") /* ty=Tensor[(13, 8, 4), uint32] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %738 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 8, 4), int16] */, dtype="float64") /* ty=Tensor[(13, 8, 4), float64] */;
  %739 = add(%736, %737) /* ty=Tensor[(13, 8, 4), uint32] */;
  %740 = acos(%738) /* ty=Tensor[(13, 8, 4), float64] */;
  (%739, %740)
}

def @func_3600() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(260), float32], Tensor[(140, 14), float32], Tensor[(260), float32]) {
  %741 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %742 = @func_3030() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %743 = cast(meta[relay.Constant][37] /* ty=Tensor[(140, 14), float32] */, dtype="float32") /* ty=Tensor[(140, 14), float32] */;
  %744 = cast(meta[relay.Constant][38] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %745 = reshape(%743, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), float32] */;
  %746 = reshape(%744, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %747 = @func_2869(%745, %746) /* ty=(Tensor[(10, 14, 14), float32], Tensor[(10, 14, 14), float32], Tensor[(4, 5, 13), uint16], Tensor[(260), float32]) */;
  %748 = %741.0;
  %749 = %742.1;
  %750 = %747.3;
  (%748, %749, %750, meta[relay.Constant][37] /* ty=Tensor[(140, 14), float32] */, meta[relay.Constant][38] /* ty=Tensor[(260), float32] */)
}

def @func_8279(%var_8269: Tensor[(3, 5, 11), float64]) -> (Tensor[(3, 5, 11), float64], Tensor[(3, 5, 11), float32]) {
  %751 = cast(%var_8269, dtype="float64") /* ty=Tensor[(3, 5, 11), float64] */;
  %752 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(3, 5, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 5, 11), float64] */, dtype="float64") /* ty=Tensor[(3, 5, 11), float64] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %755 = cast(%var_8269, dtype="float32") /* ty=Tensor[(3, 5, 11), float32] */;
  %756 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(3, 5, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 5, 11), float64] */, dtype="float32") /* ty=Tensor[(3, 5, 11), float32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %759 = mod(%753, %754) /* ty=Tensor[(3, 5, 11), float64] */;
  %760 = divide(%757, %758) /* ty=Tensor[(3, 5, 11), float32] */;
  (%759, %760)
}

def @func_10155() -> (Tensor[(260), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %761 = @func_4272() /* ty=Tensor[(260), float32] */;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(260), float64] */;
  %763 = @func_4780() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %764 = asinh(%762) /* ty=Tensor[(260), float64] */;
  %765 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %766 = %763.0;
  (%764, %765, %766)
}

def @func_5539() -> (Tensor[(260), float32],) {
  %767 = @func_3600() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(260), float32], Tensor[(140, 14), float32], Tensor[(260), float32]) */;
  %768 = %767.2;
  (%768,)
}

def @func_7257() -> Tensor[(3, 4, 5), bool] {
  %769 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %769.2
}

def @func_10676() -> Tensor[(3, 4, 5), float64] {
  %770 = @func_4842() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %770.0
}

def @func_8187() -> Tensor[(3, 4, 5), bool] {
  %771 = @func_6102() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %771.1
}

def @func_11403() -> (Tensor[(3, 4, 5), bool],) {
  %772 = @func_9745() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %773 = %772.0;
  (%773,)
}

def @func_8643(%var_8546: Tensor[(3, 4, 5), bool]) -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(11, 11, 11), int8], Tensor[(13, 8, 15), float64]) {
  %774 = @func_4370() /* ty=Tensor[(3, 4, 5), bool] */;
  %775 = cast(%var_8546, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%774, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %779 = @func_3275() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %780 = cast(meta[relay.Constant][40] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %781 = cast(%var_8546, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %782 = reshape(%780, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %783 = reshape(%781, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %784 = @func_6901(%782, %783) /* ty=(Tensor[(11, 11, 11), bool], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(3, 4, 5), float64]) */;
  %785 = %784.0;
  %786 = cast(meta[relay.Constant][40] /* ty=Tensor[(1331), float64] */, dtype="int8") /* ty=Tensor[(1331), int8] */;
  %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%785, dtype="int8") /* ty=Tensor[(11, 11, 11), int8] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %790 = %779.0;
  %791 = cast(%790, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %792 = reshape(%791, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %793 = @func_2551(%792) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */;
  %794 = %793.1;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %796 = less_equal(%777, %778) /* ty=Tensor[(3, 4, 5), bool] */;
  %797 = bitwise_and(%788, %789) /* ty=Tensor[(11, 11, 11), int8] */;
  %798 = exp(%795) /* ty=Tensor[(13, 8, 15), float64] */;
  (%796, %790, %797, %798)
}

def @func_1932() -> (Tensor[(3, 4, 5), bool],) {
  %799 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %800 = %799.0;
  (%800,)
}

def @func_13077() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
  %801 = @func_12887() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(8, 52), float64]) */;
  %802 = @func_4331() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %803 = %801.0;
  %804 = %802.0;
  (%803, %804)
}

def @func_10908() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %805 = @func_8187() /* ty=Tensor[(3, 4, 5), bool] */;
  %806 = @func_6842() /* ty=Tensor[(3, 4, 5), bool] */;
  %807 = @func_8473() /* ty=Tensor[(3, 4, 5), bool] */;
  (%805, %806, %807)
}

def @func_6715() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %808 = @func_2663() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %809 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %810 = %808.1;
  (%809, %810)
}

def @func_13631(%var_13589: float64) -> (Tensor[(3, 12, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1, 1560), uint32], Tensor[(3, 4, 5), float32]) {
  %811 = cast(%var_13589, dtype="float64") /* ty=float64 */;
  %812 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 12, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %813 = power(%811, %812) /* ty=Tensor[(3, 12, 1), float64] */;
  %814 = cast(%813, dtype="float32") /* ty=Tensor[(3, 12, 1), float32] */;
  %815 = cast(%var_13589, dtype="float32") /* ty=float32 */;
  %816 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1560), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1560), uint32] */;
  %817 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1560), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1560), uint32] */;
  %818 = reshape(%816, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %819 = reshape(%817, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %820 = floor_mod(%814, %815) /* ty=Tensor[(3, 12, 1), float32] */;
  %821 = @func_207(%818, %819) /* ty=Tensor[(13, 8, 15), uint32] */;
  %822 = @func_3658() /* ty=Tensor[(3, 4, 5), float32] */;
  (%820, %821, meta[relay.Constant][42] /* ty=Tensor[(1, 1560), uint32] */, %822)
}

def @func_2220() -> (Tensor[(3, 4, 5), float64],) {
  %823 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %824 = %823.0;
  %825 = cast(%824, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %826 = log2(%825) /* ty=Tensor[(3, 4, 5), float64] */;
  (%826,)
}

def @func_3762(%var_3724: Tensor[(1560, 1), uint32], %var_3750: Tensor[(3, 24), uint32]) -> (Tensor[(9, 8, 5), uint32], Tensor[(1560, 1), uint32], Tensor[(9, 5, 360), bool], Tensor[(3, 24), float64], Tensor[(3, 24), bool]) {
  %827 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 24), uint32] */, dtype="uint32") /* ty=Tensor[(3, 24), uint32] */;
  %828 = cast(meta[relay.Constant][44] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %829 = cast(%var_3724, dtype="uint32") /* ty=Tensor[(1560, 1), uint32] */;
  %830 = reshape(%827, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint32] */;
  %831 = reshape(%828, newshape=[9, 8, 5]) /* ty=Tensor[(9, 8, 5), uint32] */;
  %832 = reshape(%829, newshape=[1560]) /* ty=Tensor[(1560), uint32] */;
  %833 = @func_370(%830, %831, %832) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %834 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %835 = %834.1;
  %836 = cast(%835, dtype="bool") /* ty=Tensor[(9, 5, 1), bool] */;
  %837 = cast(meta[relay.Constant][44] /* ty=Tensor[(360), uint32] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %838 = cast(%var_3750, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %839 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(3, 24), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %840 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 24), uint32] */, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %842 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 24), uint32] */, dtype="bool") /* ty=Tensor[(3, 24), bool] */;
  %843 = shape_of(%var_3750, dtype="int32") /* ty=Tensor[(2), int32] */;
  %844 = cast(%var_3750, dtype="bool") /* ty=Tensor[(3, 24), bool] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %846 = %833.0;
  %847 = greater_equal(%836, %837) /* ty=Tensor[(9, 5, 360), bool] */;
  %848 = mod(%840, %841) /* ty=Tensor[(3, 24), float64] */;
  %849 = greater(%844, %845) /* ty=Tensor[(3, 24), bool] */;
  (%846, %var_3724, %847, %848, %849)
}

def @func_12496() -> Tensor[(3, 4, 5), bool] {
  %850 = @func_9526() /* ty=(Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool]) */;
  %850.1
}

def @func_10039() -> (Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) {
  %851 = @func_8166() /* ty=(Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), float64]) */;
  %852 = @func_5947() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %853 = %851.0;
  %854 = %852.0;
  (%853, %854)
}

def @func_4309(%var_4296: Tensor[(15, 4), float64]) -> (Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool], Tensor[(15, 4), float64], Tensor[(3, 4, 5), float64]) {
  %855 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %856 = cast(%var_4296, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
  %857 = reshape(%856, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %858 = @func_3807(%857) /* ty=(Tensor[(3, 4, 5), bool],) */;
  %859 = %855.3;
  %860 = %858.0;
  %861 = @func_4056() /* ty=Tensor[(3, 4, 5), float64] */;
  (%859, %860, %var_4296, %861)
}

def @func_7598() -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) {
  %862 = @func_5836() /* ty=Tensor[(3, 4, 5), bool] */;
  %863 = cast(%862, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %864 = acosh(%863) /* ty=Tensor[(3, 4, 5), float32] */;
  %865 = cast(%864, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %866 = reshape(%865, newshape=[15, 4]) /* ty=Tensor[(15, 4), float64] */;
  %867 = @func_4309(%866) /* ty=(Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool], Tensor[(15, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %868 = %867.1;
  (%864, %868)
}

def @func_5964() -> (Tensor[(13, 8, 15), uint32],) {
  %869 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %870 = %869.2;
  (%870,)
}

def @func_4510(%var_4487: Tensor[(72), uint32], %var_4488: Tensor[(360), uint32], %var_4489: Tensor[(60, 26), uint32]) -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(60, 26), uint32]) {
  %871 = @func_2763() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %872 = @func_2763() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %873 = cast(%var_4487, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %874 = cast(%var_4488, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %875 = cast(%var_4489, dtype="uint32") /* ty=Tensor[(60, 26), uint32] */;
  %876 = reshape(%873, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint32] */;
  %877 = reshape(%874, newshape=[9, 8, 5]) /* ty=Tensor[(9, 8, 5), uint32] */;
  %878 = reshape(%875, newshape=[1560]) /* ty=Tensor[(1560), uint32] */;
  %879 = @func_370(%876, %877, %878) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %880 = %871.0;
  %881 = %872.0;
  %882 = %879.2;
  (%880, %881, %882, %var_4487, %var_4488, %var_4489)
}

def @func_13665() -> (Tensor[(3, 4, 5), bool],) {
  %883 = @func_11403() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %884 = %883.0;
  (%884,)
}

def @main() -> Tensor[(15, 4, 15), float32] {
  %885 = cast(meta[relay.Constant][46] /* ty=Tensor[(15, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 4, 15), float32] */;
  %886 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(15, 4, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 4, 15), float32] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%887, %888) /* ty=Tensor[(15, 4, 15), float32] */
}

def @func_4331() -> (Tensor[(3, 4, 5), float64],) {
  %889 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %890 = %889.0;
  (%890,)
}

def @func_4370() -> Tensor[(3, 4, 5), bool] {
  %891 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %891.0
}

def @func_10961() -> Tensor[(3, 4, 5), bool] {
  %892 = @func_9745() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %892.0
}

def @func_3399() -> Tensor[(3, 4, 5), float64] {
  %893 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %894 = %893.0;
  %895 = cast(%894, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  log10(%895) /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_10468() -> Tensor[(260), float32] {
  @func_4272() /* ty=Tensor[(260), float32] */
}

def @func_10332() -> (Tensor[(15, 5, 16), int16], Tensor[(3, 4, 5), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint16], Tensor[(3, 4, 5), bool], Tensor[(1, 14, 7), float64], Tensor[(98), float64]) {
  %896 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %897 = cast(meta[relay.Constant][47] /* ty=Tensor[(2475), uint16] */, dtype="uint16") /* ty=Tensor[(2475), uint16] */;
  %898 = reshape(%897, newshape=[15, 15, 11]) /* ty=Tensor[(15, 15, 11), uint16] */;
  %899 = @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %900 = cast(meta[relay.Constant][48] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %901 = reshape(%900, newshape=[1, 14, 7]) /* ty=Tensor[(1, 14, 7), float64] */;
  %902 = @func_9490(%901) /* ty=(Tensor[(1, 14, 7), float64],) */;
  %903 = @func_7502() /* ty=Tensor[(15, 5, 16), int16] */;
  %904 = %896.0;
  %905 = @func_9307(%898) /* ty=Tensor[(15, 15, 11), bool] */;
  %906 = %899.0;
  %907 = %902.0;
  (%903, %904, %905, meta[relay.Constant][47] /* ty=Tensor[(2475), uint16] */, %906, %907, meta[relay.Constant][48] /* ty=Tensor[(98), float64] */)
}

def @func_11429() -> Tensor[(8, 52), float64] {
  %908 = @func_8672() /* ty=(Tensor[(8, 52), float64],) */;
  %908.0
}

def @func_12104() -> (Tensor[(9, 12, 7), uint32], Tensor[(780, 2), float64], Tensor[(42), float64], Tensor[(1560), uint32]) {
  %909 = cast(meta[relay.Constant][49] /* ty=Tensor[(9, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %910 = log(%909) /* ty=Tensor[(9, 12, 7), float64] */;
  %911 = cast(%910, dtype="float32") /* ty=Tensor[(9, 12, 7), float32] */;
  %912 = sin(%911) /* ty=Tensor[(9, 12, 7), float32] */;
  %913 = cast(meta[relay.Constant][49] /* ty=Tensor[(9, 12, 7), float64] */, dtype="uint32") /* ty=Tensor[(9, 12, 7), uint32] */;
  %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(%912, dtype="uint32") /* ty=Tensor[(9, 12, 7), uint32] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %917 = cast(meta[relay.Constant][50] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %918 = cast(meta[relay.Constant][51] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %919 = reshape(%917, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %920 = reshape(%918, newshape=[780, 2]) /* ty=Tensor[(780, 2), uint32] */;
  %921 = @func_8407(%919, %920) /* ty=(Tensor[(14, 1, 3), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), bool], Tensor[(780, 2), float64]) */;
  %922 = bitwise_xor(%915, %916) /* ty=Tensor[(9, 12, 7), uint32] */;
  %923 = %921.3;
  (%922, %923, meta[relay.Constant][50] /* ty=Tensor[(42), float64] */, meta[relay.Constant][51] /* ty=Tensor[(1560), uint32] */)
}

def @func_11813(%var_11806: float64, %var_11807: Tensor[(7, 16, 5), float64]) -> (Tensor[(7, 16, 5), float64],) {
  %924 = cast(%var_11806, dtype="float64") /* ty=float64 */;
  %925 = cast(%var_11807, dtype="float64") /* ty=Tensor[(7, 16, 5), float64] */;
  %926 = mod(%924, %925) /* ty=Tensor[(7, 16, 5), float64] */;
  (%926,)
}

def @func_6569() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), uint32]) {
  %927 = @func_5947() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %928 = %927.0;
  %929 = cast(%928, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %930 = reshape(%929, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %931 = @func_3807(%930) /* ty=(Tensor[(3, 4, 5), bool],) */;
  %932 = @func_4111() /* ty=(Tensor[(416), int16], Tensor[(9, 5, 360), bool], Tensor[(1560), uint32], Tensor[(72), uint32]) */;
  %933 = cast(%928, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %934 = reshape(%933, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), bool] */;
  %935 = @func_6333(%934) /* ty=(Tensor[(3, 4, 5), uint32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool]) */;
  %936 = %931.0;
  %937 = %932.2;
  %938 = %935.0;
  (%928, %936, %937, %938)
}

def @func_11698(%var_11633: Tensor[(13, 9, 10), float32], %var_11673: Tensor[(1960, 1), float32], %var_11674: Tensor[(72), uint32]) -> (Tensor[(13, 9, 10), uint32], Tensor[(260), float32], Tensor[(1560), uint32], Tensor[(1960, 1), float32], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
  %939 = cast(%var_11633, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
  %940 = log(%939) /* ty=Tensor[(13, 9, 10), float32] */;
  %941 = cast(%940, dtype="uint32") /* ty=Tensor[(13, 9, 10), uint32] */;
  %942 = shape_of(%var_11633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_11633, dtype="uint32") /* ty=Tensor[(13, 9, 10), uint32] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %945 = cast(%var_11673, dtype="float32") /* ty=Tensor[(1960, 1), float32] */;
  %946 = @func_8223() /* ty=Tensor[(260), float32] */;
  %947 = cast(%946, dtype="float32") /* ty=Tensor[(260), float32] */;
  %948 = cast(%var_11674, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %949 = cast(meta[relay.Constant][52] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %950 = reshape(%945, newshape=[1960]) /* ty=Tensor[(1960), float32] */;
  %951 = reshape(%947, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %952 = reshape(%948, newshape=[72, 1]) /* ty=Tensor[(72, 1), uint32] */;
  %953 = reshape(%949, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %954 = @func_11575(%950, %951, %952, %953) /* ty=(Tensor[(4, 5, 13), uint16], Tensor[(260), float32], Tensor[(3, 4, 5), bool], Tensor[(9, 5, ?), uint16], Tensor[(3, 4, 5), float32], Tensor[(260), float32], Tensor[(5, 10, 1960), uint64], Tensor[(260), float32], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(72, 1), uint32], Tensor[(360), uint32], Tensor[(1560), uint32]) */;
  %955 = @func_10584() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %956 = bitwise_xor(%943, %944) /* ty=Tensor[(13, 9, 10), uint32] */;
  %957 = %954.11;
  %958 = %955.1;
  %959 = @func_9039() /* ty=Tensor[(3, 4, 5), float64] */;
  (%956, %946, %957, %var_11673, %var_11674, meta[relay.Constant][52] /* ty=Tensor[(360), uint32] */, %958, %959)
}

def @func_2763() -> (Tensor[(3, 4, 5), float64],) {
  %960 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %961 = %960.0;
  (%961,)
}

def @func_2055() -> (Tensor[(3, 4, 5), float64],) {
  %962 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %963 = %962.0;
  (%963,)
}

def @func_11783() -> (Tensor[(3, 4, 5), bool],) {
  %964 = @func_7694() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %965 = %964.0;
  (%965,)
}

def @func_4892() -> Tensor[(8, 52), float32] {
  %966 = @func_2500() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %967 = %966.2;
  %968 = cast(meta[relay.Constant][53] /* ty=Tensor[(8, 52), int16] */, dtype="int32") /* ty=Tensor[(8, 52), int32] */;
  %969 = shape_of(%967, dtype="int32") /* ty=Tensor[(2), int32] */;
  %970 = cast(%967, dtype="int32") /* ty=Tensor[(8, 52), int32] */;
  %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %972 = right_shift(%970, %971) /* ty=Tensor[(8, 52), int32] */;
  %973 = cast(%972, dtype="float32") /* ty=Tensor[(8, 52), float32] */;
  sigmoid(%973) /* ty=Tensor[(8, 52), float32] */
}

def @func_8061() -> (Tensor[(3, 4, 5), bool], Tensor[(16, 26), int16], Tensor[(13, 8, 15), uint32]) {
  %974 = @func_5767() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(8, 52), float32], Tensor[(3, 4, 5), float64]) */;
  %975 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %976 = @func_6189() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) */;
  %977 = %974.0;
  %978 = %975.1;
  %979 = %976.3;
  (%977, %978, %979)
}

def @func_12816() -> Tensor[(3, 4, 5), bool] {
  %980 = @func_9819() /* ty=(Tensor[(260), float32], Tensor[(3, 4, 5), bool]) */;
  %980.1
}

def @func_8223() -> Tensor[(260), float32] {
  %981 = @func_5539() /* ty=(Tensor[(260), float32],) */;
  %981.0
}

def @func_2869(%var_2842: Tensor[(10, 14, 14), float32], %var_2854: Tensor[(260), float32]) -> (Tensor[(10, 14, 14), float32], Tensor[(10, 14, 14), float32], Tensor[(4, 5, 13), uint16], Tensor[(260), float32]) {
  %982 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 14, 14), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 14), float32] */;
  %983 = cast(%var_2842, dtype="float32") /* ty=Tensor[(10, 14, 14), float32] */;
  %984 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(10, 14, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %985 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 14, 14), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 14), float32] */;
  %986 = dyn.reshape(%983, %984, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %987 = cast(%var_2854, dtype="float32") /* ty=Tensor[(260), float32] */;
  %988 = reshape(%987, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), float32] */;
  %989 = @func_590(%988) /* ty=(Tensor[(13, 8, 15), uint32], Tensor[(4, 5, 13), uint16], Tensor[(1560), float32]) */;
  %990 = cosh(%982) /* ty=Tensor[(10, 14, 14), float32] */;
  %991 = power(%985, %986) /* ty=Tensor[(10, 14, 14), float32] */;
  %992 = %989.1;
  (%990, %991, %992, %var_2854)
}

def @func_2044() -> (Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) {
  %993 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %994 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %995 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %996 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %997 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %998 = %997.0;
  %999 = cast(%998, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %1000 = rsqrt(%999) /* ty=Tensor[(3, 4, 5), float32] */;
  %1001 = cast(%1000, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %1002 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %1003 = cast(meta[relay.Constant][55] /* ty=Tensor[(416), int16] */, dtype="int16") /* ty=Tensor[(416), int16] */;
  %1004 = reshape(%1003, newshape=[13, 8, 4]) /* ty=Tensor[(13, 8, 4), int16] */;
  %1005 = @func_776(%1004) /* ty=(Tensor[(13, 8, 4), uint32], Tensor[(13, 8, 4), float64]) */;
  %1006 = %993.0;
  %1007 = %994.2;
  %1008 = %995.0;
  %1009 = %996.1;
  %1010 = cosh(%1001) /* ty=Tensor[(3, 4, 5), float32] */;
  %1011 = %1002.0;
  %1012 = %1005.1;
  (%1006, %1007, %1008, %1009, %1010, %1011, %1012, meta[relay.Constant][55] /* ty=Tensor[(416), int16] */)
}

def @func_13466() -> (Tensor[(3, 4, 5), float32],) {
  %1013 = @func_6139() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
  %1014 = %1013.0;
  (%1014,)
}

def @func_12203() -> Tensor[(3, 4, 5), bool] {
  %1015 = @func_6569() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), uint32]) */;
  %1015.1
}

def @func_10193() -> Tensor[(5, 10, 1), float32] {
  %1016 = @func_3275() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %1016.1
}

def @func_207(%var_190: Tensor[(13, 8, 15), uint32], %var_191: Tensor[(13, 8, 15), uint32]) -> Tensor[(13, 8, 15), uint32] {
  %1017 = cast(%var_191, dtype="uint32") /* ty=Tensor[(13, 8, 15), uint32] */;
  %1018 = shape_of(%var_190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1019 = cast(%var_190, dtype="uint32") /* ty=Tensor[(13, 8, 15), uint32] */;
  %1020 = dyn.reshape(%1017, %1018, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%1019, %1020) /* ty=Tensor[(13, 8, 15), uint32] */
}

def @func_6139() -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) {
  %1021 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %1022 = %1021.0;
  %1023 = @func_4573() /* ty=Tensor[(3, 4, 5), bool] */;
  (%1022, %1023)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_779(%var_777: Tensor[(13, 8, 4), int16]) -> (Tensor[(13, 8, 4), uint32], Tensor[(13, 8, 4), float64]) {
  @func_776(%var_777) /* ty=(Tensor[(13, 8, 4), uint32], Tensor[(13, 8, 4), float64]) */
}

def @func_3276() -> (Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) {
  %10 = fn () -> (Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) {
    %0 = @func_2220() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %1 = @func_2132() /* ty=Tensor[(5, 10, 1), float64] */;
    %2 = cast(%1, dtype="float32") /* ty=Tensor[(5, 10, 1), float32] */;
    %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
    %5 = reshape(%3, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
    %6 = reshape(%4, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
    %7 = %0.0;
    %8 = sin(%2) /* ty=Tensor[(5, 10, 1), float32] */;
    %9 = @func_207(%5, %6) /* ty=Tensor[(13, 8, 15), uint32] */;
    (%7, %8, %9, meta[relay.Constant][0] /* ty=Tensor[(1560), uint32] */)
  };
  %10() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */
}

def @func_2452() -> (Tensor[(3, 4, 5), bool],) {
  @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_10334() -> (Tensor[(15, 5, 16), int16], Tensor[(3, 4, 5), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint16], Tensor[(3, 4, 5), bool], Tensor[(1, 14, 7), float64], Tensor[(98), float64]) {
  @func_10332() /* ty=(Tensor[(15, 5, 16), int16], Tensor[(3, 4, 5), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint16], Tensor[(3, 4, 5), bool], Tensor[(1, 14, 7), float64], Tensor[(98), float64]) */
}

def @func_4262(%var_4260: uint16) -> (Tensor[(1, 9, 3), float32], Tensor[(3, 4, 5), bool]) {
  @func_4259(%var_4260) /* ty=(Tensor[(1, 9, 3), float32], Tensor[(3, 4, 5), bool]) */
}

def @func_6863() -> (Tensor[(8, 52), float64],) {
  %15 = fn () -> (Tensor[(8, 52), float64],) {
    %11 = @func_2663() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
    %12 = %11.2;
    %13 = cast(%12, dtype="float64") /* ty=Tensor[(8, 52), float64] */;
    %14 = tan(%13) /* ty=Tensor[(8, 52), float64] */;
    (%14,)
  };
  %15() /* ty=(Tensor[(8, 52), float64],) */
}

def @func_4781() -> (Tensor[(3, 4, 5), bool],) {
  %18 = fn () -> (Tensor[(3, 4, 5), bool],) {
    %16 = @func_4029() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
    %17 = %16.0;
    (%17,)
  };
  %18() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_11726() -> Tensor[(3, 4, 5), bool] {
  @func_4573() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_4333() -> (Tensor[(3, 4, 5), float64],) {
  @func_4331() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_10910() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  @func_10908() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_9672(%var_9670: Tensor[(8, 52), float64]) -> (Tensor[(3, 4, 5), float32], Tensor[(8, 52), int64]) {
  @func_9669(%var_9670) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(8, 52), int64]) */
}

def @func_11957() -> Tensor[(6, 1, 3), float32] {
  %20 = fn () -> Tensor[(6, 1, 3), float32] {
    %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 1, 3), float32] */;
    atan(%19) /* ty=Tensor[(6, 1, 3), float32] */
  };
  %20() /* ty=Tensor[(6, 1, 3), float32] */
}

def @func_11431() -> Tensor[(8, 52), float64] {
  @func_11429() /* ty=Tensor[(8, 52), float64] */
}

def @func_10676() -> Tensor[(3, 4, 5), float64] {
  %21 = @func_4842() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %21.0
}

def @func_12347() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) {
  %22 = @func_6790() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */;
  %23 = @func_9819() /* ty=(Tensor[(260), float32], Tensor[(3, 4, 5), bool]) */;
  %24 = %22.2;
  %25 = %23.1;
  (%24, %25)
}

def @func_2809() -> (Tensor[(3, 4, 5), float32],) {
  %26 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %27 = %26.0;
  %28 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %29 = %28.0;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %31 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%27, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %34 = floor_divide(%32, %33) /* ty=Tensor[(3, 4, 5), float32] */;
  (%34,)
}

def @func_9201() -> Tensor[(3, 4, 5), float64] {
  %36 = fn () -> Tensor[(3, 4, 5), float64] {
    %35 = @func_4842() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %35.0
  };
  %36() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_6482(%var_6480: Tensor[(1, 15, 3), float32], %var_6481: Tensor[(10, 15, 3), float32]) -> (Tensor[(10, 15, 3), float32], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(1, 15, 3), float64], Tensor[(3, 4, 5), float64]) {
  %48 = fn (%var_6430: Tensor[(1, 15, 3), float32], %var_6431: Tensor[(10, 15, 3), float32]) -> (Tensor[(10, 15, 3), float32], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(1, 15, 3), float64], Tensor[(3, 4, 5), float64]) {
    %37 = cast(%var_6430, dtype="float32") /* ty=Tensor[(1, 15, 3), float32] */;
    %38 = cast(%var_6431, dtype="float32") /* ty=Tensor[(10, 15, 3), float32] */;
    %39 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
    %40 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %41 = cast(%var_6430, dtype="float64") /* ty=Tensor[(1, 15, 3), float64] */;
    %42 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %43 = divide(%37, %38) /* ty=Tensor[(10, 15, 3), float32] */;
    %44 = %39.0;
    %45 = %40.0;
    %46 = log(%41) /* ty=Tensor[(1, 15, 3), float64] */;
    %47 = %42.0;
    (%43, %44, %45, %46, %47)
  };
  %48(%var_6480, %var_6481) /* ty=(Tensor[(10, 15, 3), float32], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(1, 15, 3), float64], Tensor[(3, 4, 5), float64]) */
}

def @func_8646(%var_8644: Tensor[(3, 4, 5), bool]) -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(11, 11, 11), int8], Tensor[(13, 8, 15), float64]) {
  @func_8643(%var_8644) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(11, 11, 11), int8], Tensor[(13, 8, 15), float64]) */
}

def @func_4372() -> Tensor[(3, 4, 5), bool] {
  @func_4370() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_10585() -> (Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %55 = fn () -> (Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
    %49 = @func_6054() /* ty=(Tensor[(9, 5, 1), float32],) */;
    %50 = @func_5678() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32]) */;
    %51 = @func_6259() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %52 = %49.0;
    %53 = %50.1;
    %54 = %51.0;
    (%52, %53, %54)
  };
  %55() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_4244(%var_4243: Tensor[(1560), uint32]) -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), float32], Tensor[(1560), float64], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) {
  %83 = fn (%var_4203: Tensor[(1560), uint32]) -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), float32], Tensor[(1560), float64], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) {
    %56 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
    %57 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %58 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
    %59 = cast(%58, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %60 = reshape(%59, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
    %61 = @func_2551(%60) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */;
    %62 = %61.2;
    %63 = cast(%var_4203, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
    %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(1), int32] */;
    %65 = cast(%62, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %67 = bitwise_and(%65, %66) /* ty=Tensor[(1560), uint32] */;
    %68 = cast(%67, dtype="float32") /* ty=Tensor[(1560), float32] */;
    %69 = shape_of(%var_4203, dtype="int32") /* ty=Tensor[(1), int32] */;
    %70 = cast(%var_4203, dtype="float32") /* ty=Tensor[(1560), float32] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?), float32] */;
    %72 = cast(%67, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %73 = @func_3275() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
    %74 = %56.0;
    %75 = cast(%74, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %76 = reshape(%75, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
    %77 = @func_3807(%76) /* ty=(Tensor[(3, 4, 5), bool],) */;
    %78 = %57.0;
    %79 = mod(%70, %71) /* ty=Tensor[(1560), float32] */;
    %80 = exp(%72) /* ty=Tensor[(1560), float64] */;
    %81 = %73.3;
    %82 = %77.0;
    (%74, %58, %78, %79, %80, %81, %82)
  };
  %83(%var_4243) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), float32], Tensor[(1560), float64], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */
}

def @func_10930() -> Tensor[(3, 4, 5), bool] {
  %85 = fn () -> Tensor[(3, 4, 5), bool] {
    %84 = @func_2500() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
    %84.0
  };
  %85() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_9125() -> (Tensor[(3, 4, 5), float64],) {
  @func_9123() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_8188() -> Tensor[(3, 4, 5), bool] {
  %87 = fn () -> Tensor[(3, 4, 5), bool] {
    %86 = @func_6102() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
    %86.1
  };
  %87() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_3452() -> Tensor[(3, 4, 5), bool] {
  %88 = @func_2809() /* ty=(Tensor[(3, 4, 5), float32],) */;
  %89 = %88.0;
  %90 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 4, 5), float32] */, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%92, %93) /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_590(%var_567: Tensor[(4, 5, 13), float32]) -> (Tensor[(13, 8, 15), uint32], Tensor[(4, 5, 13), uint16], Tensor[(1560), float32]) {
  %94 = cast(meta[relay.Constant][3] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %95 = cast(meta[relay.Constant][3] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %96 = reshape(%94, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %97 = reshape(%95, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %98 = cast(%var_567, dtype="float32") /* ty=Tensor[(4, 5, 13), float32] */;
  %99 = log10(%98) /* ty=Tensor[(4, 5, 13), float32] */;
  %100 = cast(%var_567, dtype="uint16") /* ty=Tensor[(4, 5, 13), uint16] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="uint16") /* ty=Tensor[(4, 5, 13), uint16] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %104 = cast(meta[relay.Constant][3] /* ty=Tensor[(1560), uint32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %105 = @func_207(%96, %97) /* ty=Tensor[(13, 8, 15), uint32] */;
  %106 = bitwise_and(%102, %103) /* ty=Tensor[(4, 5, 13), uint16] */;
  %107 = cos(%104) /* ty=Tensor[(1560), float32] */;
  (%105, %106, %107)
}

def @func_2105(%var_2101: Tensor[(416), int16]) -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), uint32], Tensor[(416), int16]) {
  %108 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %109 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %110 = cast(%var_2101, dtype="int16") /* ty=Tensor[(416), int16] */;
  %111 = reshape(%110, newshape=[13, 8, 4]) /* ty=Tensor[(13, 8, 4), int16] */;
  %112 = @func_776(%111) /* ty=(Tensor[(13, 8, 4), uint32], Tensor[(13, 8, 4), float64]) */;
  %113 = %108.0;
  %114 = %109.3;
  %115 = %112.0;
  (%113, %114, %115, %var_2101)
}

def @func_3762(%var_3724: Tensor[(1560, 1), uint32], %var_3750: Tensor[(3, 24), uint32]) -> (Tensor[(9, 8, 5), uint32], Tensor[(1560, 1), uint32], Tensor[(9, 5, 360), bool], Tensor[(3, 24), float64], Tensor[(3, 24), bool]) {
  %116 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 24), uint32] */, dtype="uint32") /* ty=Tensor[(3, 24), uint32] */;
  %117 = cast(meta[relay.Constant][5] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %118 = cast(%var_3724, dtype="uint32") /* ty=Tensor[(1560, 1), uint32] */;
  %119 = reshape(%116, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint32] */;
  %120 = reshape(%117, newshape=[9, 8, 5]) /* ty=Tensor[(9, 8, 5), uint32] */;
  %121 = reshape(%118, newshape=[1560]) /* ty=Tensor[(1560), uint32] */;
  %122 = @func_370(%119, %120, %121) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %123 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %124 = %123.1;
  %125 = cast(%124, dtype="bool") /* ty=Tensor[(9, 5, 1), bool] */;
  %126 = cast(meta[relay.Constant][5] /* ty=Tensor[(360), uint32] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %127 = cast(%var_3750, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %128 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(3, 24), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %129 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 24), uint32] */, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %131 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 24), uint32] */, dtype="bool") /* ty=Tensor[(3, 24), bool] */;
  %132 = shape_of(%var_3750, dtype="int32") /* ty=Tensor[(2), int32] */;
  %133 = cast(%var_3750, dtype="bool") /* ty=Tensor[(3, 24), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %135 = %122.0;
  %136 = greater_equal(%125, %126) /* ty=Tensor[(9, 5, 360), bool] */;
  %137 = mod(%129, %130) /* ty=Tensor[(3, 24), float64] */;
  %138 = greater(%133, %134) /* ty=Tensor[(3, 24), bool] */;
  (%135, %var_3724, %136, %137, %138)
}

def @func_2134() -> Tensor[(5, 10, 1), float64] {
  @func_2132() /* ty=Tensor[(5, 10, 1), float64] */
}

def @func_4732() -> (Tensor[(1560), uint32], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(13, 8, 15), uint32]) {
  %150 = fn () -> (Tensor[(1560), uint32], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(13, 8, 15), uint32]) {
    %139 = @func_3275() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
    %140 = cast(meta[relay.Constant][6] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %141 = reshape(%140, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
    %142 = @func_3807(%141) /* ty=(Tensor[(3, 4, 5), bool],) */;
    %143 = %139.3;
    %144 = cast(%143, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
    %145 = cast(%143, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
    %146 = reshape(%144, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
    %147 = reshape(%145, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
    %148 = %142.0;
    %149 = @func_207(%146, %147) /* ty=Tensor[(13, 8, 15), uint32] */;
    (%143, %148, meta[relay.Constant][6] /* ty=Tensor[(60), float64] */, %149)
  };
  %150() /* ty=(Tensor[(1560), uint32], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(13, 8, 15), uint32]) */
}

def @func_13583() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %151 = @func_9123() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %152 = @func_3030() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %153 = %151.0;
  %154 = %152.0;
  %155 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  (%153, %154, %155)
}

def @func_8410(%var_8408: Tensor[(14, 1, 3), float64], %var_8409: Tensor[(780, 2), uint32]) -> (Tensor[(14, 1, 3), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), bool], Tensor[(780, 2), float64]) {
  %165 = fn (%var_8383: Tensor[(14, 1, 3), float64], %var_8389: Tensor[(780, 2), uint32]) -> (Tensor[(14, 1, 3), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), bool], Tensor[(780, 2), float64]) {
    %156 = cast(%var_8383, dtype="float64") /* ty=Tensor[(14, 1, 3), float64] */;
    %157 = cast(%var_8389, dtype="uint32") /* ty=Tensor[(780, 2), uint32] */;
    %158 = reshape(%157, newshape=[1560]) /* ty=Tensor[(1560), uint32] */;
    %159 = @func_4242(%158) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), float32], Tensor[(1560), float64], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */;
    %160 = cast(%var_8389, dtype="float64") /* ty=Tensor[(780, 2), float64] */;
    %161 = log2(%156) /* ty=Tensor[(14, 1, 3), float64] */;
    %162 = %159.3;
    %163 = @func_4370() /* ty=Tensor[(3, 4, 5), bool] */;
    %164 = exp(%160) /* ty=Tensor[(780, 2), float64] */;
    (%161, %162, %163, %164)
  };
  %165(%var_8408, %var_8409) /* ty=(Tensor[(14, 1, 3), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), bool], Tensor[(780, 2), float64]) */
}

def @func_10040() -> (Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) {
  %170 = fn () -> (Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) {
    %166 = @func_8166() /* ty=(Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), float64]) */;
    %167 = @func_5947() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %168 = %166.0;
    %169 = %167.0;
    (%168, %169)
  };
  %170() /* ty=(Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) */
}

def @func_10742() -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) {
  @func_10740() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */
}

def @func_13018() -> (Tensor[(3, 4, 5), bool], Tensor[(260), float32]) {
  %174 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(260), float32]) {
    %171 = @func_7694() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %172 = %171.0;
    %173 = @func_4272() /* ty=Tensor[(260), float32] */;
    (%172, %173)
  };
  %174() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(260), float32]) */
}

def @func_11932() -> Tensor[(3, 4, 5), bool] {
  %176 = fn () -> Tensor[(3, 4, 5), bool] {
    %175 = @func_6680() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */;
    %175.4
  };
  %176() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_11373() -> Tensor[(260), float32] {
  %177 = @func_5539() /* ty=(Tensor[(260), float32],) */;
  %177.0
}

def @func_11964() -> (Tensor[(3, 4, 5), float64],) {
  @func_11962() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_10639() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
  @func_10637() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */
}

def @func_6189() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) {
  %178 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %179 = @func_2967() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %180 = @func_5964() /* ty=(Tensor[(13, 8, 15), uint32],) */;
  %181 = %178.0;
  %182 = %179.0;
  %183 = @func_4892() /* ty=Tensor[(8, 52), float32] */;
  %184 = %180.0;
  (%181, %182, %183, %184)
}

def @func_13302() -> Tensor[(3, 4, 5), float64] {
  %185 = @func_2967() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %185.0
}

def @func_9309(%var_9308: Tensor[(15, 15, 11), uint16]) -> Tensor[(15, 15, 11), bool] {
  %188 = fn (%var_9294: Tensor[(15, 15, 11), uint16]) -> Tensor[(15, 15, 11), bool] {
    %186 = cast(meta[relay.Constant][7] /* ty=uint16 */, dtype="bool") /* ty=bool */;
    %187 = cast(%var_9294, dtype="bool") /* ty=Tensor[(15, 15, 11), bool] */;
    greater_equal(%186, %187) /* ty=Tensor[(15, 15, 11), bool] */
  };
  %188(%var_9308) /* ty=Tensor[(15, 15, 11), bool] */
}

def @func_10496(%var_10493: Tensor[(8, 10, 8), float32]) -> Tensor[(8, 10, 8), float32] {
  %189 = cast(%var_10493, dtype="float32") /* ty=Tensor[(8, 10, 8), float32] */;
  sigmoid(%189) /* ty=Tensor[(8, 10, 8), float32] */
}

def @func_5283() -> Tensor[(1560), uint32] {
  %190 = @func_4731() /* ty=(Tensor[(1560), uint32], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(13, 8, 15), uint32]) */;
  %190.0
}

def @func_3031() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %195 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
    %191 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
    %192 = @func_2663() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
    %193 = %191.0;
    %194 = %192.1;
    (%193, %194)
  };
  %195() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_1933() -> (Tensor[(3, 4, 5), bool],) {
  %198 = fn () -> (Tensor[(3, 4, 5), bool],) {
    %196 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
    %197 = %196.0;
    (%197,)
  };
  %198() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_10499(%var_10497: Tensor[(8, 10, 8), float32]) -> Tensor[(8, 10, 8), float32] {
  @func_10496(%var_10497) /* ty=Tensor[(8, 10, 8), float32] */
}

def @func_12847() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  @func_12845() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_5285() -> Tensor[(1560), uint32] {
  @func_5283() /* ty=Tensor[(1560), uint32] */
}

def @func_7247() -> (Tensor[(3, 4, 5), float64], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) {
  %206 = fn () -> (Tensor[(3, 4, 5), float64], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) {
    %199 = @func_4411() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) */;
    %200 = %199.0;
    %201 = cast(%200, dtype="float64") /* ty=Tensor[(9, 5, 1), float64] */;
    %202 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %203 = @func_4056() /* ty=Tensor[(3, 4, 5), float64] */;
    %204 = cosh(%201) /* ty=Tensor[(9, 5, 1), float64] */;
    %205 = %202.0;
    (%203, %204, %205)
  };
  %206() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) */
}

def @func_4370() -> Tensor[(3, 4, 5), bool] {
  %207 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %207.0
}

def @func_7332(%var_7286: Tensor[(12, 5, 16), bool]) -> (Tensor[(12, 5, 16), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64]) {
  %208 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 5, 16), bool] */, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
  %209 = shape_of(%var_7286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%var_7286, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = @func_2809() /* ty=(Tensor[(3, 4, 5), float32],) */;
  %213 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
  %214 = logical_and(%210, %211) /* ty=Tensor[(12, 5, 16), bool] */;
  %215 = @func_7257() /* ty=Tensor[(3, 4, 5), bool] */;
  %216 = %212.0;
  %217 = %213.1;
  (%214, %215, %216, %217)
}

def @func_13467() -> (Tensor[(3, 4, 5), float32],) {
  %220 = fn () -> (Tensor[(3, 4, 5), float32],) {
    %218 = @func_6139() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
    %219 = %218.0;
    (%219,)
  };
  %220() /* ty=(Tensor[(3, 4, 5), float32],) */
}

def @func_9621() -> (Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float32]) {
  @func_9619() /* ty=(Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float32]) */
}

def @func_8225() -> Tensor[(260), float32] {
  @func_8223() /* ty=Tensor[(260), float32] */
}

def @func_10193() -> Tensor[(5, 10, 1), float32] {
  %221 = @func_3275() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %221.1
}

def @func_7743() -> (Tensor[(3, 4, 5), bool],) {
  @func_7741() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_2764() -> (Tensor[(3, 4, 5), float64],) {
  %224 = fn () -> (Tensor[(3, 4, 5), float64],) {
    %222 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %223 = %222.0;
    (%223,)
  };
  %224() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_3600() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(260), float32], Tensor[(140, 14), float32], Tensor[(260), float32]) {
  %225 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %226 = @func_3030() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %227 = cast(meta[relay.Constant][9] /* ty=Tensor[(140, 14), float32] */, dtype="float32") /* ty=Tensor[(140, 14), float32] */;
  %228 = cast(meta[relay.Constant][10] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %229 = reshape(%227, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), float32] */;
  %230 = reshape(%228, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %231 = @func_2869(%229, %230) /* ty=(Tensor[(10, 14, 14), float32], Tensor[(10, 14, 14), float32], Tensor[(4, 5, 13), uint16], Tensor[(260), float32]) */;
  %232 = %225.0;
  %233 = %226.1;
  %234 = %231.3;
  (%232, %233, %234, meta[relay.Constant][9] /* ty=Tensor[(140, 14), float32] */, meta[relay.Constant][10] /* ty=Tensor[(260), float32] */)
}

def @func_6191() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) {
  @func_6189() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) */
}

def @func_5678() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32]) {
  %235 = @func_4400() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %236 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %237 = %236.0;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %239 = cos(%238) /* ty=Tensor[(3, 4, 5), float32] */;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %241 = @func_4029() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %242 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
  %243 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %244 = @func_4573() /* ty=Tensor[(3, 4, 5), bool] */;
  %245 = %235.0;
  %246 = erf(%240) /* ty=Tensor[(3, 4, 5), float64] */;
  %247 = %241.1;
  %248 = %242.0;
  %249 = @func_5283() /* ty=Tensor[(1560), uint32] */;
  (%243, %244, %245, %246, %247, %248, %249)
}

def @func_7558() -> Tensor[(3, 4, 5), float64] {
  %251 = fn () -> Tensor[(3, 4, 5), float64] {
    %250 = @func_4331() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %250.0
  };
  %251() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_8168() -> (Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), float64]) {
  @func_8166() /* ty=(Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), float64]) */
}

def @func_4413() -> (Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) {
  @func_4411() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) */
}

def @func_7503() -> Tensor[(15, 5, 16), int16] {
  %258 = fn () -> Tensor[(15, 5, 16), int16] {
    %252 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 5, 16), float32] */;
    %253 = cosh(%252) /* ty=Tensor[(15, 5, 16), float32] */;
    %254 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 5, 16), float32] */, dtype="int16") /* ty=Tensor[(15, 5, 16), int16] */;
    %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
    %256 = cast(%253, dtype="int16") /* ty=Tensor[(15, 5, 16), int16] */;
    %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_xor(%256, %257) /* ty=Tensor[(15, 5, 16), int16] */
  };
  %258() /* ty=Tensor[(15, 5, 16), int16] */
}

def @func_8673() -> (Tensor[(8, 52), float64],) {
  %263 = fn () -> (Tensor[(8, 52), float64],) {
    %259 = @func_6189() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) */;
    %260 = %259.2;
    %261 = cast(%260, dtype="float64") /* ty=Tensor[(8, 52), float64] */;
    %262 = cos(%261) /* ty=Tensor[(8, 52), float64] */;
    (%262,)
  };
  %263() /* ty=(Tensor[(8, 52), float64],) */
}

def @func_11623() -> (Tensor[(3, 4, 5), float64],) {
  %266 = fn () -> (Tensor[(3, 4, 5), float64],) {
    %264 = @func_2763() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %265 = %264.0;
    (%265,)
  };
  %266() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_12381() -> (Tensor[(3, 4, 5), float32], Tensor[(1560), float64], Tensor[(72, 1), uint32]) {
  %273 = fn () -> (Tensor[(3, 4, 5), float32], Tensor[(1560), float64], Tensor[(72, 1), uint32]) {
    %267 = @func_2809() /* ty=(Tensor[(3, 4, 5), float32],) */;
    %268 = cast(meta[relay.Constant][12] /* ty=Tensor[(72, 1), uint32] */, dtype="uint32") /* ty=Tensor[(72, 1), uint32] */;
    %269 = reshape(%268, newshape=[72]) /* ty=Tensor[(72), uint32] */;
    %270 = @func_5372(%269) /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(1560), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), float64]) */;
    %271 = %267.0;
    %272 = %270.4;
    (%271, %272, meta[relay.Constant][12] /* ty=Tensor[(72, 1), uint32] */)
  };
  %273() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(1560), float64], Tensor[(72, 1), uint32]) */
}

def @func_1871() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) {
  @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */
}

def @func_6139() -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) {
  %274 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %275 = %274.0;
  %276 = @func_4573() /* ty=Tensor[(3, 4, 5), bool] */;
  (%275, %276)
}

def @func_12889() -> (Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(8, 52), float64]) {
  @func_12887() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(8, 52), float64]) */
}

def @func_10678() -> Tensor[(3, 4, 5), float64] {
  @func_10676() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_9821() -> (Tensor[(260), float32], Tensor[(3, 4, 5), bool]) {
  @func_9819() /* ty=(Tensor[(260), float32], Tensor[(3, 4, 5), bool]) */
}

def @func_8279(%var_8269: Tensor[(3, 5, 11), float64]) -> (Tensor[(3, 5, 11), float64], Tensor[(3, 5, 11), float32]) {
  %277 = cast(%var_8269, dtype="float64") /* ty=Tensor[(3, 5, 11), float64] */;
  %278 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(3, 5, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 5, 11), float64] */, dtype="float64") /* ty=Tensor[(3, 5, 11), float64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %281 = cast(%var_8269, dtype="float32") /* ty=Tensor[(3, 5, 11), float32] */;
  %282 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(3, 5, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 5, 11), float64] */, dtype="float32") /* ty=Tensor[(3, 5, 11), float32] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %285 = mod(%279, %280) /* ty=Tensor[(3, 5, 11), float64] */;
  %286 = divide(%283, %284) /* ty=Tensor[(3, 5, 11), float32] */;
  (%285, %286)
}

def @func_8936() -> Tensor[(3, 4, 5), bool] {
  %288 = fn () -> Tensor[(3, 4, 5), bool] {
    %287 = @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %287.0
  };
  %288() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_13634(%var_13632: float64) -> (Tensor[(3, 12, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1, 1560), uint32], Tensor[(3, 4, 5), float32]) {
  @func_13631(%var_13632) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1, 1560), uint32], Tensor[(3, 4, 5), float32]) */
}

def @func_2056() -> (Tensor[(3, 4, 5), float64],) {
  %291 = fn () -> (Tensor[(3, 4, 5), float64],) {
    %289 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %290 = %289.0;
    (%290,)
  };
  %291() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_8643(%var_8546: Tensor[(3, 4, 5), bool]) -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(11, 11, 11), int8], Tensor[(13, 8, 15), float64]) {
  %292 = @func_4370() /* ty=Tensor[(3, 4, 5), bool] */;
  %293 = cast(%var_8546, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%292, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %297 = @func_3275() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %298 = cast(meta[relay.Constant][14] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %299 = cast(%var_8546, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %300 = reshape(%298, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %301 = reshape(%299, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %302 = @func_6901(%300, %301) /* ty=(Tensor[(11, 11, 11), bool], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(3, 4, 5), float64]) */;
  %303 = %302.0;
  %304 = cast(meta[relay.Constant][14] /* ty=Tensor[(1331), float64] */, dtype="int8") /* ty=Tensor[(1331), int8] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="int8") /* ty=Tensor[(11, 11, 11), int8] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %308 = %297.0;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %310 = reshape(%309, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %311 = @func_2551(%310) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */;
  %312 = %311.1;
  %313 = cast(%312, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %314 = less_equal(%295, %296) /* ty=Tensor[(3, 4, 5), bool] */;
  %315 = bitwise_and(%306, %307) /* ty=Tensor[(11, 11, 11), int8] */;
  %316 = exp(%313) /* ty=Tensor[(13, 8, 15), float64] */;
  (%314, %308, %315, %316)
}

def @func_4259(%var_4246: uint16) -> (Tensor[(1, 9, 3), float32], Tensor[(3, 4, 5), bool]) {
  %317 = cast(%var_4246, dtype="bool") /* ty=bool */;
  %318 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 9, 3), uint16] */, dtype="bool") /* ty=Tensor[(1, 9, 3), bool] */;
  %319 = not_equal(%317, %318) /* ty=Tensor[(1, 9, 3), bool] */;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(1, 9, 3), float32] */;
  %321 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %322 = log(%320) /* ty=Tensor[(1, 9, 3), float32] */;
  %323 = %321.0;
  (%322, %323)
}

def @func_4467() -> Tensor[(8, 52), int16] {
  %325 = fn () -> Tensor[(8, 52), int16] {
    %324 = @func_2663() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
    %324.2
  };
  %325() /* ty=Tensor[(8, 52), int16] */
}

def @func_9186() -> Tensor[(3, 4, 5), float64] {
  %326 = fn () -> Tensor[(3, 4, 5), float64] {
    @func_7557() /* ty=Tensor[(3, 4, 5), float64] */
  };
  %326() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_11093() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %331 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
    %327 = @func_7598() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
    %328 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %329 = %327.1;
    %330 = %328.0;
    (%329, %330)
  };
  %331() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_3660() -> Tensor[(3, 4, 5), float32] {
  @func_3658() /* ty=Tensor[(3, 4, 5), float32] */
}

def @func_11375() -> Tensor[(260), float32] {
  @func_11373() /* ty=Tensor[(260), float32] */
}

def @func_9526() -> (Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool]) {
  %332 = @func_8061() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(16, 26), int16], Tensor[(13, 8, 15), uint32]) */;
  %333 = @func_4029() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %334 = %332.1;
  %335 = %333.0;
  (%334, %335)
}

def @func_4843() -> (Tensor[(3, 4, 5), float64],) {
  %338 = fn () -> (Tensor[(3, 4, 5), float64],) {
    %336 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %337 = %336.0;
    (%337,)
  };
  %338() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_5948() -> (Tensor[(3, 4, 5), bool],) {
  %341 = fn () -> (Tensor[(3, 4, 5), bool],) {
    %339 = @func_4029() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
    %340 = %339.1;
    (%340,)
  };
  %341() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_13142() -> Tensor[(13, 8, 4), float64] {
  %342 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %342.3
}

def @func_8282(%var_8280: Tensor[(3, 5, 11), float64]) -> (Tensor[(3, 5, 11), float64], Tensor[(3, 5, 11), float32]) {
  @func_8279(%var_8280) /* ty=(Tensor[(3, 5, 11), float64], Tensor[(3, 5, 11), float32]) */
}

def @func_5375(%var_5373: Tensor[(72), uint32]) -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(1560), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), float64]) {
  @func_5372(%var_5373) /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(1560), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), float64]) */
}

def @func_10468() -> Tensor[(260), float32] {
  @func_4272() /* ty=Tensor[(260), float32] */
}

def @func_11575(%var_11477: Tensor[(1960), float32], %var_11478: Tensor[(260), float32], %var_11564: Tensor[(72, 1), uint32], %var_11565: Tensor[(360), uint32]) -> (Tensor[(4, 5, 13), uint16], Tensor[(260), float32], Tensor[(3, 4, 5), bool], Tensor[(9, 5, ?), uint16], Tensor[(3, 4, 5), float32], Tensor[(260), float32], Tensor[(5, 10, 1960), uint64], Tensor[(260), float32], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(72, 1), uint32], Tensor[(360), uint32], Tensor[(1560), uint32]) {
  %343 = cast(%var_11477, dtype="float32") /* ty=Tensor[(1960), float32] */;
  %344 = cast(%var_11478, dtype="float32") /* ty=Tensor[(260), float32] */;
  %345 = reshape(%343, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), float32] */;
  %346 = reshape(%344, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %347 = @func_2869(%345, %346) /* ty=(Tensor[(10, 14, 14), float32], Tensor[(10, 14, 14), float32], Tensor[(4, 5, 13), uint16], Tensor[(260), float32]) */;
  %348 = @func_6102() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %349 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %350 = %349.1;
  %351 = cast(%350, dtype="float64") /* ty=Tensor[(9, 5, 1), float64] */;
  %352 = erf(%351) /* ty=Tensor[(9, 5, 1), float64] */;
  %353 = cast(%350, dtype="uint16") /* ty=Tensor[(9, 5, 1), uint16] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="uint16") /* ty=Tensor[(9, 5, 1), uint16] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %357 = %348.1;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %359 = reshape(%358, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %360 = @func_2551(%359) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */;
  %361 = @func_10193() /* ty=Tensor[(5, 10, 1), float32] */;
  %362 = cast(%var_11477, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %363 = cast(%361, dtype="uint64") /* ty=Tensor[(5, 10, 1), uint64] */;
  %364 = cast(%352, dtype="float64") /* ty=Tensor[(9, 5, 1), float64] */;
  %365 = @func_6680() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */;
  %366 = cast(%357, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %367 = reshape(%366, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), bool] */;
  %368 = @func_8643(%367) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(11, 11, 11), int8], Tensor[(13, 8, 15), float64]) */;
  %369 = cast(%var_11564, dtype="uint32") /* ty=Tensor[(72, 1), uint32] */;
  %370 = cast(%var_11565, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %371 = cast(meta[relay.Constant][16] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %372 = reshape(%369, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint32] */;
  %373 = reshape(%370, newshape=[9, 8, 5]) /* ty=Tensor[(9, 8, 5), uint32] */;
  %374 = reshape(%371, newshape=[1560]) /* ty=Tensor[(1560), uint32] */;
  %375 = @func_370(%372, %373, %374) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %376 = %347.2;
  %377 = right_shift(%355, %356) /* ty=Tensor[(9, 5, ?), uint16] */;
  %378 = %360.0;
  %379 = @func_11373() /* ty=Tensor[(260), float32] */;
  %380 = bitwise_or(%362, %363) /* ty=Tensor[(5, 10, 1960), uint64] */;
  %381 = @func_10598() /* ty=Tensor[(260), float32] */;
  %382 = acos(%364) /* ty=Tensor[(9, 5, 1), float64] */;
  %383 = %365.2;
  %384 = %368.0;
  %385 = %375.2;
  (%376, %var_11478, %357, %377, %378, %379, %380, %381, %382, %383, %384, %385, %var_11564, %var_11565, meta[relay.Constant][16] /* ty=Tensor[(1560), uint32] */)
}

def @func_7158(%var_7118: Tensor[(13, 8, 15), int64]) -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %386 = @func_6715() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %387 = @func_6189() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) */;
  %388 = cast(meta[relay.Constant][17] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %389 = cast(meta[relay.Constant][17] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %390 = reshape(%388, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %391 = reshape(%389, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %392 = @func_5767() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(8, 52), float32], Tensor[(3, 4, 5), float64]) */;
  %393 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %394 = %392.0;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %396 = reshape(%395, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %397 = @func_2551(%396) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */;
  %398 = %397.1;
  %399 = cast(meta[relay.Constant][17] /* ty=Tensor[(1560), uint32] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%398, dtype="int64") /* ty=Tensor[(13, 8, 15), int64] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %403 = right_shift(%401, %402) /* ty=Tensor[(13, 8, 15), int64] */;
  %404 = cast(%var_7118, dtype="bool") /* ty=Tensor[(13, 8, 15), bool] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="bool") /* ty=Tensor[(13, 8, 15), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %409 = cast(%398, dtype="float32") /* ty=Tensor[(13, 8, 15), float32] */;
  %410 = sqrt(%409) /* ty=Tensor[(13, 8, 15), float32] */;
  %411 = cast(%403, dtype="uint16") /* ty=Tensor[(13, 8, 15), uint16] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="uint16") /* ty=Tensor[(13, 8, 15), uint16] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %415 = @func_6569() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), uint32]) */;
  %416 = %386.0;
  %417 = %387.1;
  %418 = @func_207(%390, %391) /* ty=Tensor[(13, 8, 15), uint32] */;
  %419 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %420 = %393.0;
  %421 = less(%406, %407) /* ty=Tensor[(13, 8, 15), bool] */;
  %422 = %408.0;
  %423 = bitwise_or(%413, %414) /* ty=Tensor[(13, 8, 15), uint16] */;
  %424 = %415.1;
  %425 = @func_6933() /* ty=Tensor[(3, 4, 5), bool] */;
  (%416, %417, %418, %394, %419, %420, %421, %422, %423, %424, %425)
}

def @func_12497() -> Tensor[(3, 4, 5), bool] {
  %427 = fn () -> Tensor[(3, 4, 5), bool] {
    %426 = @func_9526() /* ty=(Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool]) */;
    %426.1
  };
  %427() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_7161(%var_7159: Tensor[(13, 8, 15), int64]) -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  @func_7158(%var_7159) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_11581(%var_11577: Tensor[(1960), float32], %var_11578: Tensor[(260), float32], %var_11579: Tensor[(72, 1), uint32], %var_11580: Tensor[(360), uint32]) -> (Tensor[(4, 5, 13), uint16], Tensor[(260), float32], Tensor[(3, 4, 5), bool], Tensor[(9, 5, ?), uint16], Tensor[(3, 4, 5), float32], Tensor[(260), float32], Tensor[(5, 10, 1960), uint64], Tensor[(260), float32], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(72, 1), uint32], Tensor[(360), uint32], Tensor[(1560), uint32]) {
  @func_11575(%var_11577, %var_11578, %var_11579, %var_11580) /* ty=(Tensor[(4, 5, 13), uint16], Tensor[(260), float32], Tensor[(3, 4, 5), bool], Tensor[(9, 5, ?), uint16], Tensor[(3, 4, 5), float32], Tensor[(260), float32], Tensor[(5, 10, 1960), uint64], Tensor[(260), float32], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(72, 1), uint32], Tensor[(360), uint32], Tensor[(1560), uint32]) */
}

def @func_11429() -> Tensor[(8, 52), float64] {
  %428 = @func_8672() /* ty=(Tensor[(8, 52), float64],) */;
  %428.0
}

def @func_12106() -> (Tensor[(9, 12, 7), uint32], Tensor[(780, 2), float64], Tensor[(42), float64], Tensor[(1560), uint32]) {
  @func_12104() /* ty=(Tensor[(9, 12, 7), uint32], Tensor[(780, 2), float64], Tensor[(42), float64], Tensor[(1560), uint32]) */
}

def @func_4331() -> (Tensor[(3, 4, 5), float64],) {
  %429 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %430 = %429.0;
  (%430,)
}

def @func_7785() -> (Tensor[(3, 4, 5), float32],) {
  %433 = fn () -> (Tensor[(3, 4, 5), float32],) {
    %431 = @func_6139() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
    %432 = %431.0;
    (%432,)
  };
  %433() /* ty=(Tensor[(3, 4, 5), float32],) */
}

def @func_13047() -> Tensor[(3, 4, 5), bool] {
  %435 = fn () -> Tensor[(3, 4, 5), bool] {
    %434 = @func_12773() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
    %434.0
  };
  %435() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_5372(%var_5296: Tensor[(72), uint32]) -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(1560), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), float64]) {
  %436 = cast(%var_5296, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %437 = cast(meta[relay.Constant][18] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %438 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %439 = reshape(%436, newshape=[72]) /* ty=Tensor[(72), uint32] */;
  %440 = reshape(%437, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %441 = reshape(%438, newshape=[60, 26]) /* ty=Tensor[(60, 26), uint32] */;
  %442 = @func_4510(%439, %440, %441) /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(60, 26), uint32]) */;
  %443 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560), uint32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %444 = atanh(%443) /* ty=Tensor[(1560), float32] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %446 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560), uint32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %447 = shape_of(%444, dtype="int32") /* ty=Tensor[(1), int32] */;
  %448 = cast(%444, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?), float32] */;
  %450 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %451 = @func_4056() /* ty=Tensor[(3, 4, 5), float64] */;
  %452 = %442.1;
  %453 = sqrt(%445) /* ty=Tensor[(1560), float64] */;
  %454 = add(%448, %449) /* ty=Tensor[(1560), float32] */;
  %455 = %450.0;
  (%451, %452, %var_5296, meta[relay.Constant][18] /* ty=Tensor[(360), uint32] */, %453, %454, %455)
}

def @func_10332() -> (Tensor[(15, 5, 16), int16], Tensor[(3, 4, 5), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint16], Tensor[(3, 4, 5), bool], Tensor[(1, 14, 7), float64], Tensor[(98), float64]) {
  %456 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %457 = cast(meta[relay.Constant][20] /* ty=Tensor[(2475), uint16] */, dtype="uint16") /* ty=Tensor[(2475), uint16] */;
  %458 = reshape(%457, newshape=[15, 15, 11]) /* ty=Tensor[(15, 15, 11), uint16] */;
  %459 = @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %460 = cast(meta[relay.Constant][21] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %461 = reshape(%460, newshape=[1, 14, 7]) /* ty=Tensor[(1, 14, 7), float64] */;
  %462 = @func_9490(%461) /* ty=(Tensor[(1, 14, 7), float64],) */;
  %463 = @func_7502() /* ty=Tensor[(15, 5, 16), int16] */;
  %464 = %456.0;
  %465 = @func_9307(%458) /* ty=Tensor[(15, 15, 11), bool] */;
  %466 = %459.0;
  %467 = %462.0;
  (%463, %464, %465, meta[relay.Constant][20] /* ty=Tensor[(2475), uint16] */, %466, %467, meta[relay.Constant][21] /* ty=Tensor[(98), float64] */)
}

def @func_12818() -> Tensor[(3, 4, 5), bool] {
  @func_12816() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_4515(%var_4512: Tensor[(72), uint32], %var_4513: Tensor[(360), uint32], %var_4514: Tensor[(60, 26), uint32]) -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(60, 26), uint32]) {
  @func_4510(%var_4512, %var_4513, %var_4514) /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(60, 26), uint32]) */
}

def @func_11813(%var_11806: float64, %var_11807: Tensor[(7, 16, 5), float64]) -> (Tensor[(7, 16, 5), float64],) {
  %468 = cast(%var_11806, dtype="float64") /* ty=float64 */;
  %469 = cast(%var_11807, dtype="float64") /* ty=Tensor[(7, 16, 5), float64] */;
  %470 = mod(%468, %469) /* ty=Tensor[(7, 16, 5), float64] */;
  (%470,)
}

def @func_8438() -> Tensor[(1560), uint32] {
  %471 = @func_6680() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */;
  %471.3
}

def @func_2065() -> (Tensor[(3, 4, 5), bool],) {
  %474 = fn () -> (Tensor[(3, 4, 5), bool],) {
    %472 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %473 = %472.0;
    (%473,)
  };
  %474() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @main() -> Tensor[(15, 4, 15), float32] {
  %475 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 4, 15), float32] */;
  %476 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(15, 4, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 4, 15), float32] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%477, %478) /* ty=Tensor[(15, 4, 15), float32] */
}

def @func_4057() -> Tensor[(3, 4, 5), float64] {
  %480 = fn () -> Tensor[(3, 4, 5), float64] {
    %479 = @func_2220() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %479.0
  };
  %480() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_12204() -> Tensor[(3, 4, 5), bool] {
  %482 = fn () -> Tensor[(3, 4, 5), bool] {
    %481 = @func_6569() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), uint32]) */;
    %481.1
  };
  %482() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_10696() -> Tensor[(260), float32] {
  @func_10694() /* ty=Tensor[(260), float32] */
}

def @func_5540() -> (Tensor[(260), float32],) {
  %485 = fn () -> (Tensor[(260), float32],) {
    %483 = @func_3600() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(260), float32], Tensor[(140, 14), float32], Tensor[(260), float32]) */;
    %484 = %483.2;
    (%484,)
  };
  %485() /* ty=(Tensor[(260), float32],) */
}

def @func_7686() -> (Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) {
  @func_7684() /* ty=(Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */
}

def @func_12816() -> Tensor[(3, 4, 5), bool] {
  %486 = @func_9819() /* ty=(Tensor[(260), float32], Tensor[(3, 4, 5), bool]) */;
  %486.1
}

def @func_8475() -> Tensor[(3, 4, 5), bool] {
  @func_8473() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_6259() -> (Tensor[(3, 4, 5), bool],) {
  %487 = @func_4370() /* ty=Tensor[(3, 4, 5), bool] */;
  (%487,)
}

def @func_2729() -> (Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %498 = fn () -> (Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
    %488 = cast(-9.33926f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %489 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 5, 1), float32] */;
    %490 = cast(-9.33926f /* ty=float32 */, dtype="int16") /* ty=int16 */;
    %491 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 5, 1), float32] */, dtype="int16") /* ty=Tensor[(9, 5, 1), int16] */;
    %492 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
    %493 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %494 = power(%488, %489) /* ty=Tensor[(9, 5, 1), float32] */;
    %495 = bitwise_or(%490, %491) /* ty=Tensor[(9, 5, 1), int16] */;
    %496 = %492.1;
    %497 = %493.0;
    (%494, %495, %496, %497)
  };
  %498() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_5837() -> Tensor[(3, 4, 5), bool] {
  %500 = fn () -> Tensor[(3, 4, 5), bool] {
    %499 = @func_4626() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
    %499.1
  };
  %500() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_11404() -> (Tensor[(3, 4, 5), bool],) {
  %503 = fn () -> (Tensor[(3, 4, 5), bool],) {
    %501 = @func_9745() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %502 = %501.0;
    (%502,)
  };
  %503() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_2572() -> (Tensor[(3, 4, 5), bool],) {
  %506 = fn () -> (Tensor[(3, 4, 5), bool],) {
    %504 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
    %505 = %504.2;
    (%505,)
  };
  %506() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_11702(%var_11699: Tensor[(13, 9, 10), float32], %var_11700: Tensor[(1960, 1), float32], %var_11701: Tensor[(72), uint32]) -> (Tensor[(13, 9, 10), uint32], Tensor[(260), float32], Tensor[(1560), uint32], Tensor[(1960, 1), float32], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
  %528 = fn (%var_11633: Tensor[(13, 9, 10), float32], %var_11673: Tensor[(1960, 1), float32], %var_11674: Tensor[(72), uint32]) -> (Tensor[(13, 9, 10), uint32], Tensor[(260), float32], Tensor[(1560), uint32], Tensor[(1960, 1), float32], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
    %507 = cast(%var_11633, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
    %508 = log(%507) /* ty=Tensor[(13, 9, 10), float32] */;
    %509 = cast(%508, dtype="uint32") /* ty=Tensor[(13, 9, 10), uint32] */;
    %510 = shape_of(%var_11633, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%var_11633, dtype="uint32") /* ty=Tensor[(13, 9, 10), uint32] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %513 = cast(%var_11673, dtype="float32") /* ty=Tensor[(1960, 1), float32] */;
    %514 = @func_8223() /* ty=Tensor[(260), float32] */;
    %515 = cast(%514, dtype="float32") /* ty=Tensor[(260), float32] */;
    %516 = cast(%var_11674, dtype="uint32") /* ty=Tensor[(72), uint32] */;
    %517 = cast(meta[relay.Constant][25] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %518 = reshape(%513, newshape=[1960]) /* ty=Tensor[(1960), float32] */;
    %519 = reshape(%515, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %520 = reshape(%516, newshape=[72, 1]) /* ty=Tensor[(72, 1), uint32] */;
    %521 = reshape(%517, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %522 = @func_11575(%518, %519, %520, %521) /* ty=(Tensor[(4, 5, 13), uint16], Tensor[(260), float32], Tensor[(3, 4, 5), bool], Tensor[(9, 5, ?), uint16], Tensor[(3, 4, 5), float32], Tensor[(260), float32], Tensor[(5, 10, 1960), uint64], Tensor[(260), float32], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(72, 1), uint32], Tensor[(360), uint32], Tensor[(1560), uint32]) */;
    %523 = @func_10584() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
    %524 = bitwise_xor(%511, %512) /* ty=Tensor[(13, 9, 10), uint32] */;
    %525 = %522.11;
    %526 = %523.1;
    %527 = @func_9039() /* ty=Tensor[(3, 4, 5), float64] */;
    (%524, %514, %525, %var_11673, %var_11674, meta[relay.Constant][25] /* ty=Tensor[(360), uint32] */, %526, %527)
  };
  %528(%var_11699, %var_11700, %var_11701) /* ty=(Tensor[(13, 9, 10), uint32], Tensor[(260), float32], Tensor[(1560), uint32], Tensor[(1960, 1), float32], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */
}

def @func_11962() -> (Tensor[(3, 4, 5), float64],) {
  %529 = @func_9039() /* ty=Tensor[(3, 4, 5), float64] */;
  (%529,)
}

def @func_9747() -> (Tensor[(3, 4, 5), bool],) {
  @func_9745() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_11783() -> (Tensor[(3, 4, 5), bool],) {
  %530 = @func_7694() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %531 = %530.0;
  (%531,)
}

def @func_13666() -> (Tensor[(3, 4, 5), bool],) {
  %534 = fn () -> (Tensor[(3, 4, 5), bool],) {
    %532 = @func_11403() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %533 = %532.0;
    (%533,)
  };
  %534() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_5680() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32]) {
  @func_5678() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32]) */
}

def @func_9041() -> Tensor[(3, 4, 5), float64] {
  @func_9039() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_6054() -> (Tensor[(9, 5, 1), float32],) {
  %535 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %536 = %535.0;
  (%536,)
}

def @func_12233() -> Tensor[(3, 4, 5), bool] {
  %538 = fn () -> Tensor[(3, 4, 5), bool] {
    %537 = @func_4780() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %537.0
  };
  %538() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_10515(%var_10513: Tensor[(8, 52), float32]) -> Tensor[(8, 52), bool] {
  @func_10512(%var_10513) /* ty=Tensor[(8, 52), bool] */
}

def @func_12575() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %539 = @func_12563() /* ty=Tensor[(3, 4, 5), bool] */;
  %540 = @func_12232() /* ty=Tensor[(3, 4, 5), bool] */;
  (%539, %540)
}

def @func_8440() -> Tensor[(1560), uint32] {
  @func_8438() /* ty=Tensor[(1560), uint32] */
}

def @func_4411() -> (Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) {
  %541 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %542 = %541.0;
  %543 = @func_4056() /* ty=Tensor[(3, 4, 5), float64] */;
  (%542, %543)
}

def @func_5074(%var_5072: Tensor[(6, 11, 12), int32]) -> Tensor[(6, 11, 12), bool] {
  @func_5071(%var_5072) /* ty=Tensor[(6, 11, 12), bool] */
}

def @func_9900() -> (Tensor[(3, 4, 5), float64],) {
  %544 = @func_9185() /* ty=Tensor[(3, 4, 5), float64] */;
  (%544,)
}

def @func_6335(%var_6334: Tensor[(3, 4, 5), bool]) -> (Tensor[(3, 4, 5), uint32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool]) {
  %556 = fn (%var_6276: Tensor[(3, 4, 5), bool]) -> (Tensor[(3, 4, 5), uint32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool]) {
    %545 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %546 = %545.0;
    %547 = cast(%var_6276, dtype="uint32") /* ty=Tensor[(3, 4, 5), uint32] */;
    %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
    %549 = cast(%546, dtype="uint32") /* ty=Tensor[(3, 4, 5), uint32] */;
    %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %551 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
    %552 = @func_6139() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
    %553 = bitwise_xor(%549, %550) /* ty=Tensor[(3, 4, 5), uint32] */;
    %554 = %551.1;
    %555 = %552.1;
    (%553, %554, %555)
  };
  %556(%var_6334) /* ty=(Tensor[(3, 4, 5), uint32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool]) */
}

def @func_13631(%var_13589: float64) -> (Tensor[(3, 12, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1, 1560), uint32], Tensor[(3, 4, 5), float32]) {
  %557 = cast(%var_13589, dtype="float64") /* ty=float64 */;
  %558 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 12, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %559 = power(%557, %558) /* ty=Tensor[(3, 12, 1), float64] */;
  %560 = cast(%559, dtype="float32") /* ty=Tensor[(3, 12, 1), float32] */;
  %561 = cast(%var_13589, dtype="float32") /* ty=float32 */;
  %562 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 1560), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1560), uint32] */;
  %563 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 1560), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1560), uint32] */;
  %564 = reshape(%562, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %565 = reshape(%563, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %566 = floor_mod(%560, %561) /* ty=Tensor[(3, 12, 1), float32] */;
  %567 = @func_207(%564, %565) /* ty=Tensor[(13, 8, 15), uint32] */;
  %568 = @func_3658() /* ty=Tensor[(3, 4, 5), float32] */;
  (%566, %567, meta[relay.Constant][27] /* ty=Tensor[(1, 1560), uint32] */, %568)
}

def @func_8751() -> (Tensor[(5, 4, 16), uint8], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(1560), uint32], Tensor[(5, 10, 1), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 15), uint32]) {
  @func_8749() /* ty=(Tensor[(5, 4, 16), uint8], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(1560), uint32], Tensor[(5, 10, 1), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 15), uint32]) */
}

def @func_13496(%var_13487: Tensor[(12, 7, 13), float64]) -> Tensor[(12, 7, 13), float64] {
  %569 = cast(%var_13487, dtype="float64") /* ty=Tensor[(12, 7, 13), float64] */;
  atan(%569) /* ty=Tensor[(12, 7, 13), float64] */
}

def @func_3809(%var_3808: Tensor[(3, 4, 5), float64]) -> (Tensor[(3, 4, 5), bool],) {
  %577 = fn (%var_3799: Tensor[(3, 4, 5), float64]) -> (Tensor[(3, 4, 5), bool],) {
    %570 = @func_2220() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %571 = %570.0;
    %572 = cast(%var_3799, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
    %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%571, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %576 = greater(%574, %575) /* ty=Tensor[(3, 4, 5), bool] */;
    (%576,)
  };
  %577(%var_3808) /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_6570() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), uint32]) {
  %590 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), uint32]) {
    %578 = @func_5947() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %579 = %578.0;
    %580 = cast(%579, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %581 = reshape(%580, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
    %582 = @func_3807(%581) /* ty=(Tensor[(3, 4, 5), bool],) */;
    %583 = @func_4111() /* ty=(Tensor[(416), int16], Tensor[(9, 5, 360), bool], Tensor[(1560), uint32], Tensor[(72), uint32]) */;
    %584 = cast(%579, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
    %585 = reshape(%584, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), bool] */;
    %586 = @func_6333(%585) /* ty=(Tensor[(3, 4, 5), uint32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool]) */;
    %587 = %582.0;
    %588 = %583.2;
    %589 = %586.0;
    (%579, %587, %588, %589)
  };
  %590() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), uint32]) */
}

def @func_9123() -> (Tensor[(3, 4, 5), float64],) {
  %591 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
  %592 = %591.0;
  (%592,)
}

def @func_6716() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %596 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
    %593 = @func_2663() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
    %594 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
    %595 = %593.1;
    (%594, %595)
  };
  %596() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_2046() -> (Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) {
  @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */
}

def @func_13078() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
  %601 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
    %597 = @func_12887() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(8, 52), float64]) */;
    %598 = @func_4331() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %599 = %597.0;
    %600 = %598.0;
    (%599, %600)
  };
  %601() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */
}

def @func_9413() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(260), float32]) {
  %606 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(260), float32]) {
    %602 = @func_7636() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
    %603 = @func_6933() /* ty=Tensor[(3, 4, 5), bool] */;
    %604 = %602.0;
    %605 = @func_4272() /* ty=Tensor[(260), float32] */;
    (%603, %604, %605)
  };
  %606() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(260), float32]) */
}

def @func_2663() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) {
  %607 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %608 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %609 = @func_2500() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %610 = %607.0;
  %611 = %608.0;
  %612 = %609.2;
  (%610, %611, %612)
}

def @func_2968() -> (Tensor[(3, 4, 5), float64],) {
  %615 = fn () -> (Tensor[(3, 4, 5), float64],) {
    %613 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %614 = %613.0;
    (%614,)
  };
  %615() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_4111() -> (Tensor[(416), int16], Tensor[(9, 5, 360), bool], Tensor[(1560), uint32], Tensor[(72), uint32]) {
  %616 = @func_2941() /* ty=(Tensor[(3, 4, 5), uint16], Tensor[(13, 8, 15), uint32], Tensor[(260), float32], Tensor[(416), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %617 = cast(meta[relay.Constant][28] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %618 = cast(meta[relay.Constant][29] /* ty=Tensor[(72), uint32] */, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %619 = reshape(%617, newshape=[1560, 1]) /* ty=Tensor[(1560, 1), uint32] */;
  %620 = reshape(%618, newshape=[3, 24]) /* ty=Tensor[(3, 24), uint32] */;
  %621 = @func_3762(%619, %620) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(1560, 1), uint32], Tensor[(9, 5, 360), bool], Tensor[(3, 24), float64], Tensor[(3, 24), bool]) */;
  %622 = %616.3;
  %623 = %621.2;
  (%622, %623, meta[relay.Constant][28] /* ty=Tensor[(1560), uint32] */, meta[relay.Constant][29] /* ty=Tensor[(72), uint32] */)
}

def @func_2665() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) {
  @func_2663() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */
}

def @func_3658() -> Tensor[(3, 4, 5), float32] {
  %624 = @func_2809() /* ty=(Tensor[(3, 4, 5), float32],) */;
  %624.0
}

def @func_2605() -> (Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) {
  %625 = @func_2220() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %626 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %627 = %625.0;
  %628 = %626.6;
  (%627, %628)
}

def @func_8223() -> Tensor[(260), float32] {
  %629 = @func_5539() /* ty=(Tensor[(260), float32],) */;
  %629.0
}

def @func_2221() -> (Tensor[(3, 4, 5), float64],) {
  %634 = fn () -> (Tensor[(3, 4, 5), float64],) {
    %630 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %631 = %630.0;
    %632 = cast(%631, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %633 = log2(%632) /* ty=Tensor[(3, 4, 5), float64] */;
    (%633,)
  };
  %634() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_10470() -> Tensor[(260), float32] {
  @func_10468() /* ty=Tensor[(260), float32] */
}

def @func_12564() -> Tensor[(3, 4, 5), bool] {
  %636 = fn () -> Tensor[(3, 4, 5), bool] {
    %635 = @func_4780() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %635.0
  };
  %636() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_13585() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  @func_13583() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_12845() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %637 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %638 = @func_12816() /* ty=Tensor[(3, 4, 5), bool] */;
  (%637, %638)
}

def @func_5979() -> (Tensor[(260), float32], Tensor[(3, 4, 5), float64]) {
  @func_5977() /* ty=(Tensor[(260), float32], Tensor[(3, 4, 5), float64]) */
}

def @func_6790() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
  %639 = @func_5947() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %640 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %641 = @func_3931() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %642 = %639.0;
  %643 = %640.0;
  %644 = %641.0;
  (%642, %643, %644)
}

def @func_7437() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) {
  @func_7435() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) */
}

def @func_10740() -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) {
  %645 = @func_9745() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %646 = %645.0;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %648 = @func_9846() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %649 = acos(%647) /* ty=Tensor[(3, 4, 5), float32] */;
  %650 = %648.0;
  (%649, %650)
}

def @func_12349() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) {
  @func_12347() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) */
}

def @func_11785() -> (Tensor[(3, 4, 5), bool],) {
  @func_11783() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_9256() -> Tensor[(3, 4, 5), bool] {
  %651 = fn () -> Tensor[(3, 4, 5), bool] {
    @func_8473() /* ty=Tensor[(3, 4, 5), bool] */
  };
  %651() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_5071(%var_5055: Tensor[(6, 11, 12), int32]) -> Tensor[(6, 11, 12), bool] {
  %652 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 11, 12), int32] */, dtype="bool") /* ty=Tensor[(6, 11, 12), bool] */;
  %653 = shape_of(%var_5055, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_5055, dtype="bool") /* ty=Tensor[(6, 11, 12), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%654, %655) /* ty=Tensor[(6, 11, 12), bool] */
}

def @func_9619() -> (Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float32]) {
  %656 = @func_7246() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) */;
  %657 = @func_7784() /* ty=(Tensor[(3, 4, 5), float32],) */;
  %658 = @func_4626() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %659 = %656.1;
  %660 = %657.0;
  %661 = %658.2;
  (%659, %660, %661)
}

def @func_3400() -> Tensor[(3, 4, 5), float64] {
  %665 = fn () -> Tensor[(3, 4, 5), float64] {
    %662 = @func_2055() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %663 = %662.0;
    %664 = cast(%663, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    log10(%664) /* ty=Tensor[(3, 4, 5), float64] */
  };
  %665() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_9669(%var_9647: Tensor[(8, 52), float64]) -> (Tensor[(3, 4, 5), float32], Tensor[(8, 52), int64]) {
  %666 = @func_6862() /* ty=(Tensor[(8, 52), float64],) */;
  %667 = %666.0;
  %668 = cast(%var_9647, dtype="int64") /* ty=Tensor[(8, 52), int64] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(2), int32] */;
  %670 = cast(%667, dtype="int64") /* ty=Tensor[(8, 52), int64] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %672 = @func_3658() /* ty=Tensor[(3, 4, 5), float32] */;
  %673 = subtract(%670, %671) /* ty=Tensor[(8, 52), int64] */;
  (%672, %673)
}

def @func_10963() -> Tensor[(3, 4, 5), bool] {
  @func_10961() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_210(%var_208: Tensor[(13, 8, 15), uint32], %var_209: Tensor[(13, 8, 15), uint32]) -> Tensor[(13, 8, 15), uint32] {
  %678 = fn (%var_190: Tensor[(13, 8, 15), uint32], %var_191: Tensor[(13, 8, 15), uint32]) -> Tensor[(13, 8, 15), uint32] {
    %674 = cast(%var_191, dtype="uint32") /* ty=Tensor[(13, 8, 15), uint32] */;
    %675 = shape_of(%var_190, dtype="int32") /* ty=Tensor[(3), int32] */;
    %676 = cast(%var_190, dtype="uint32") /* ty=Tensor[(13, 8, 15), uint32] */;
    %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_and(%676, %677) /* ty=Tensor[(13, 8, 15), uint32] */
  };
  %678(%var_208, %var_209) /* ty=Tensor[(13, 8, 15), uint32] */
}

def @func_10442() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), int64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float32], Tensor[(1, 14, 7), float64], Tensor[(6, 11, 12), bool], Tensor[(792), int32]) {
  %679 = @func_9900() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %680 = @func_9846() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %681 = cast(meta[relay.Constant][31] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %682 = reshape(%681, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), int64] */;
  %683 = @func_7158(%682) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %684 = @func_4411() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) */;
  %685 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %686 = @func_10332() /* ty=(Tensor[(15, 5, 16), int16], Tensor[(3, 4, 5), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint16], Tensor[(3, 4, 5), bool], Tensor[(1, 14, 7), float64], Tensor[(98), float64]) */;
  %687 = cast(meta[relay.Constant][32] /* ty=Tensor[(792), int32] */, dtype="int32") /* ty=Tensor[(792), int32] */;
  %688 = reshape(%687, newshape=[6, 11, 12]) /* ty=Tensor[(6, 11, 12), int32] */;
  %689 = %679.0;
  %690 = %680.0;
  %691 = %683.10;
  %692 = %684.1;
  %693 = %685.0;
  %694 = %686.5;
  %695 = @func_5071(%688) /* ty=Tensor[(6, 11, 12), bool] */;
  (%689, %690, %691, meta[relay.Constant][31] /* ty=Tensor[(1560), int64] */, %692, %693, %694, %695, meta[relay.Constant][32] /* ty=Tensor[(792), int32] */)
}

def @func_7335(%var_7333: Tensor[(12, 5, 16), bool]) -> (Tensor[(12, 5, 16), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64]) {
  @func_7332(%var_7333) /* ty=(Tensor[(12, 5, 16), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64]) */
}

def @func_5768() -> (Tensor[(3, 4, 5), bool], Tensor[(8, 52), float32], Tensor[(3, 4, 5), float64]) {
  %704 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(8, 52), float32], Tensor[(3, 4, 5), float64]) {
    %696 = @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %697 = @func_2500() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
    %698 = %697.2;
    %699 = cast(%698, dtype="float32") /* ty=Tensor[(8, 52), float32] */;
    %700 = @func_4411() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) */;
    %701 = %696.0;
    %702 = atan(%699) /* ty=Tensor[(8, 52), float32] */;
    %703 = %700.1;
    (%701, %702, %703)
  };
  %704() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(8, 52), float32], Tensor[(3, 4, 5), float64]) */
}

def @func_1976() -> (Tensor[(3, 4, 5), float64],) {
  %705 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %706 = %705.0;
  %707 = cast(%706, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %708 = atan(%707) /* ty=Tensor[(3, 4, 5), float64] */;
  (%708,)
}

def @func_12282(%var_12280: Tensor[(6, 14, 14), float32]) -> (Tensor[(6, 14, 14), int64], Tensor[(260), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(6, 14, 14), float64]) {
  @func_12279(%var_12280) /* ty=(Tensor[(6, 14, 14), int64], Tensor[(260), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(6, 14, 14), float64]) */
}

def @func_8473() -> Tensor[(3, 4, 5), bool] {
  %709 = @func_7636() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %709.1
}

def @func_13429(%var_13428: Tensor[(5, 9, 10), float64]) -> (Tensor[(5, 9, 10), float64],) {
  %712 = fn (%var_13422: Tensor[(5, 9, 10), float64]) -> (Tensor[(5, 9, 10), float64],) {
    %710 = cast(%var_13422, dtype="float64") /* ty=Tensor[(5, 9, 10), float64] */;
    %711 = sqrt(%710) /* ty=Tensor[(5, 9, 10), float64] */;
    (%711,)
  };
  %712(%var_13428) /* ty=(Tensor[(5, 9, 10), float64],) */
}

def @func_7258() -> Tensor[(3, 4, 5), bool] {
  %714 = fn () -> Tensor[(3, 4, 5), bool] {
    %713 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
    %713.2
  };
  %714() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_5977() -> (Tensor[(260), float32], Tensor[(3, 4, 5), float64]) {
  %715 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %716 = @func_2967() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %717 = %715.3;
  %718 = %716.0;
  (%717, %718)
}

def @func_4401() -> (Tensor[(3, 4, 5), float64],) {
  %721 = fn () -> (Tensor[(3, 4, 5), float64],) {
    %719 = @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */;
    %720 = %719.0;
    (%720,)
  };
  %721() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_3933() -> (Tensor[(3, 4, 5), float64],) {
  @func_3931() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_2551(%var_2546: Tensor[(3, 4, 5), float64]) -> (Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) {
  %722 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %723 = %722.0;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %725 = cast(meta[relay.Constant][33] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %726 = cast(meta[relay.Constant][33] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %727 = reshape(%725, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %728 = reshape(%726, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %729 = cast(%var_2546, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
  %730 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%723, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %733 = sqrt(%724) /* ty=Tensor[(3, 4, 5), float32] */;
  %734 = @func_207(%727, %728) /* ty=Tensor[(13, 8, 15), uint32] */;
  %735 = bitwise_or(%731, %732) /* ty=Tensor[(3, 4, 5), int16] */;
  (%733, %734, meta[relay.Constant][33] /* ty=Tensor[(1560), uint32] */, %735)
}

def @func_7021() -> (Tensor[(3, 4, 5), float64],) {
  @func_7019() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_4892() -> Tensor[(8, 52), float32] {
  %736 = @func_2500() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
  %737 = %736.2;
  %738 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 52), int16] */, dtype="int32") /* ty=Tensor[(8, 52), int32] */;
  %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(2), int32] */;
  %740 = cast(%737, dtype="int32") /* ty=Tensor[(8, 52), int32] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %742 = right_shift(%740, %741) /* ty=Tensor[(8, 52), int32] */;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(8, 52), float32] */;
  sigmoid(%743) /* ty=Tensor[(8, 52), float32] */
}

def @func_12409(%var_12408: Tensor[(15, 11, 10), uint32]) -> Tensor[(15, 11, 10), uint32] {
  %748 = fn (%var_12390: Tensor[(15, 11, 10), uint32]) -> Tensor[(15, 11, 10), uint32] {
    %744 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 11, 10), uint32] */, dtype="uint32") /* ty=Tensor[(15, 11, 10), uint32] */;
    %745 = shape_of(%var_12390, dtype="int32") /* ty=Tensor[(3), int32] */;
    %746 = cast(%var_12390, dtype="uint32") /* ty=Tensor[(15, 11, 10), uint32] */;
    %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    right_shift(%746, %747) /* ty=Tensor[(15, 11, 10), uint32] */
  };
  %748(%var_12408) /* ty=Tensor[(15, 11, 10), uint32] */
}

def @func_6843() -> Tensor[(3, 4, 5), bool] {
  %750 = fn () -> Tensor[(3, 4, 5), bool] {
    %749 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
    %749.2
  };
  %750() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_9819() -> (Tensor[(260), float32], Tensor[(3, 4, 5), bool]) {
  %751 = @func_7435() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) */;
  %752 = @func_8223() /* ty=Tensor[(260), float32] */;
  %753 = %751.1;
  (%752, %753)
}

def @func_1978() -> (Tensor[(3, 4, 5), float64],) {
  @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_4573() -> Tensor[(3, 4, 5), bool] {
  %754 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %754.0
}

def @func_7684() -> (Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) {
  %755 = @func_5678() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32]) */;
  %756 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
  %757 = %755.6;
  %758 = %756.2;
  (%757, %758)
}

def @func_10512(%var_10506: Tensor[(8, 52), float32]) -> Tensor[(8, 52), bool] {
  %759 = @func_4892() /* ty=Tensor[(8, 52), float32] */;
  %760 = cast(%var_10506, dtype="bool") /* ty=Tensor[(8, 52), bool] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(2), int32] */;
  %762 = cast(%759, dtype="bool") /* ty=Tensor[(8, 52), bool] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_and(%762, %763) /* ty=Tensor[(8, 52), bool] */
}

def @func_10908() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %764 = @func_8187() /* ty=Tensor[(3, 4, 5), bool] */;
  %765 = @func_6842() /* ty=Tensor[(3, 4, 5), bool] */;
  %766 = @func_8473() /* ty=Tensor[(3, 4, 5), bool] */;
  (%764, %765, %766)
}

def @func_7696() -> (Tensor[(3, 4, 5), bool],) {
  @func_7694() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_2872(%var_2870: Tensor[(10, 14, 14), float32], %var_2871: Tensor[(260), float32]) -> (Tensor[(10, 14, 14), float32], Tensor[(10, 14, 14), float32], Tensor[(4, 5, 13), uint16], Tensor[(260), float32]) {
  %778 = fn (%var_2842: Tensor[(10, 14, 14), float32], %var_2854: Tensor[(260), float32]) -> (Tensor[(10, 14, 14), float32], Tensor[(10, 14, 14), float32], Tensor[(4, 5, 13), uint16], Tensor[(260), float32]) {
    %767 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 14, 14), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 14), float32] */;
    %768 = cast(%var_2842, dtype="float32") /* ty=Tensor[(10, 14, 14), float32] */;
    %769 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(10, 14, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %770 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 14, 14), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 14), float32] */;
    %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %772 = cast(%var_2854, dtype="float32") /* ty=Tensor[(260), float32] */;
    %773 = reshape(%772, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), float32] */;
    %774 = @func_590(%773) /* ty=(Tensor[(13, 8, 15), uint32], Tensor[(4, 5, 13), uint16], Tensor[(1560), float32]) */;
    %775 = cosh(%767) /* ty=Tensor[(10, 14, 14), float32] */;
    %776 = power(%770, %771) /* ty=Tensor[(10, 14, 14), float32] */;
    %777 = %774.1;
    (%775, %776, %777, %var_2854)
  };
  %778(%var_2870, %var_2871) /* ty=(Tensor[(10, 14, 14), float32], Tensor[(10, 14, 14), float32], Tensor[(4, 5, 13), uint16], Tensor[(260), float32]) */
}

def @func_9848() -> (Tensor[(3, 4, 5), bool],) {
  @func_9846() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_10615() -> Tensor[(260), float32] {
  %779 = fn () -> Tensor[(260), float32] {
    @func_8078() /* ty=Tensor[(260), float32] */
  };
  %779() /* ty=Tensor[(260), float32] */
}

def @func_10599() -> Tensor[(260), float32] {
  %780 = fn () -> Tensor[(260), float32] {
    @func_8078() /* ty=Tensor[(260), float32] */
  };
  %780() /* ty=Tensor[(260), float32] */
}

def @func_13157() -> (Tensor[(3, 4, 5), float64],) {
  %783 = fn () -> (Tensor[(3, 4, 5), float64],) {
    %781 = @func_7019() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %782 = %781.0;
    (%782,)
  };
  %783() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_8078() -> Tensor[(260), float32] {
  @func_4272() /* ty=Tensor[(260), float32] */
}

def @func_1869() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) {
  %784 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 4, 5), int16] */, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
  %785 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(3, 4, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 4, 5), int16] */, dtype="int16") /* ty=Tensor[(3, 4, 5), int16] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %788 = maximum(%786, %787) /* ty=Tensor[(3, 4, 5), int16] */;
  %789 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 4, 5), int16] */, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%788, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %793 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 4, 5), int16] */, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %794 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(3, 4, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 4, 5), int16] */, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = cast(meta[relay.Constant][39] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %798 = reshape(%797, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), float32] */;
  %799 = @func_590(%798) /* ty=(Tensor[(13, 8, 15), uint32], Tensor[(4, 5, 13), uint16], Tensor[(1560), float32]) */;
  %800 = equal(%791, %792) /* ty=Tensor[(3, 4, 5), bool] */;
  %801 = logical_or(%795, %796) /* ty=Tensor[(3, 4, 5), bool] */;
  %802 = %799.0;
  (%800, %801, %802, meta[relay.Constant][39] /* ty=Tensor[(260), float32] */)
}

def @func_5009(%var_5008: Tensor[(1560), uint32]) -> (Tensor[(13, 8, 4), float64], Tensor[(9, 5, 360), bool], Tensor[(1560), uint32], Tensor[(18, 4), uint32]) {
  %811 = fn (%var_5004: Tensor[(1560), uint32]) -> (Tensor[(13, 8, 4), float64], Tensor[(9, 5, 360), bool], Tensor[(1560), uint32], Tensor[(18, 4), uint32]) {
    %803 = @func_4626() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
    %804 = cast(%var_5004, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
    %805 = cast(meta[relay.Constant][40] /* ty=Tensor[(18, 4), uint32] */, dtype="uint32") /* ty=Tensor[(18, 4), uint32] */;
    %806 = reshape(%804, newshape=[1560, 1]) /* ty=Tensor[(1560, 1), uint32] */;
    %807 = reshape(%805, newshape=[3, 24]) /* ty=Tensor[(3, 24), uint32] */;
    %808 = @func_3762(%806, %807) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(1560, 1), uint32], Tensor[(9, 5, 360), bool], Tensor[(3, 24), float64], Tensor[(3, 24), bool]) */;
    %809 = %803.3;
    %810 = %808.2;
    (%809, %810, %var_5004, meta[relay.Constant][40] /* ty=Tensor[(18, 4), uint32] */)
  };
  %811(%var_5008) /* ty=(Tensor[(13, 8, 4), float64], Tensor[(9, 5, 360), bool], Tensor[(1560), uint32], Tensor[(18, 4), uint32]) */
}

def @func_10155() -> (Tensor[(260), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %812 = @func_4272() /* ty=Tensor[(260), float32] */;
  %813 = cast(%812, dtype="float64") /* ty=Tensor[(260), float64] */;
  %814 = @func_4780() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %815 = asinh(%813) /* ty=Tensor[(260), float64] */;
  %816 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
  %817 = %814.0;
  (%815, %816, %817)
}

def @func_2293() -> (Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) {
  %830 = fn () -> (Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) {
    %818 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
    %819 = %818.0;
    %820 = cast(%819, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
    %821 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %822 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 26), int16] */, dtype="int16") /* ty=Tensor[(16, 26), int16] */;
    %823 = reshape(%822, newshape=[416]) /* ty=Tensor[(416), int16] */;
    %824 = @func_2105(%823) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), uint32], Tensor[(416), int16]) */;
    %825 = %824.2;
    %826 = cast(%825, dtype="float64") /* ty=Tensor[(13, 8, 4), float64] */;
    %827 = log(%820) /* ty=Tensor[(3, 4, 5), float32] */;
    %828 = %821.0;
    %829 = tan(%826) /* ty=Tensor[(13, 8, 4), float64] */;
    (%827, meta[relay.Constant][41] /* ty=Tensor[(16, 26), int16] */, %828, %829)
  };
  %830() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */
}

def @func_8062() -> (Tensor[(3, 4, 5), bool], Tensor[(16, 26), int16], Tensor[(13, 8, 15), uint32]) {
  %837 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(16, 26), int16], Tensor[(13, 8, 15), uint32]) {
    %831 = @func_5767() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(8, 52), float32], Tensor[(3, 4, 5), float64]) */;
    %832 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
    %833 = @func_6189() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) */;
    %834 = %831.0;
    %835 = %832.1;
    %836 = %833.3;
    (%834, %835, %836)
  };
  %837() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(16, 26), int16], Tensor[(13, 8, 15), uint32]) */
}

def @func_776(%var_751: Tensor[(13, 8, 4), int16]) -> (Tensor[(13, 8, 4), uint32], Tensor[(13, 8, 4), float64]) {
  %838 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 8, 4), int16] */, dtype="bool") /* ty=Tensor[(13, 8, 4), bool] */;
  %839 = shape_of(%var_751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(%var_751, dtype="bool") /* ty=Tensor[(13, 8, 4), bool] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %842 = greater_equal(%840, %841) /* ty=Tensor[(13, 8, 4), bool] */;
  %843 = cast(%var_751, dtype="uint32") /* ty=Tensor[(13, 8, 4), uint32] */;
  %844 = shape_of(%842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %845 = cast(%842, dtype="uint32") /* ty=Tensor[(13, 8, 4), uint32] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %847 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 8, 4), int16] */, dtype="float64") /* ty=Tensor[(13, 8, 4), float64] */;
  %848 = add(%845, %846) /* ty=Tensor[(13, 8, 4), uint32] */;
  %849 = acos(%847) /* ty=Tensor[(13, 8, 4), float64] */;
  (%848, %849)
}

def @func_10637() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
  %850 = @func_6842() /* ty=Tensor[(3, 4, 5), bool] */;
  %851 = @func_3399() /* ty=Tensor[(3, 4, 5), float64] */;
  (%850, %851)
}

def @func_2811() -> (Tensor[(3, 4, 5), float32],) {
  @func_2809() /* ty=(Tensor[(3, 4, 5), float32],) */
}

def @func_10195() -> Tensor[(5, 10, 1), float32] {
  @func_10193() /* ty=Tensor[(5, 10, 1), float32] */
}

def @func_13388() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) {
  %855 = fn () -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) {
    %852 = @func_13077() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */;
    %853 = %852.1;
    %854 = @func_8187() /* ty=Tensor[(3, 4, 5), bool] */;
    (%853, %854)
  };
  %855() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) */
}

def @func_7637() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %860 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
    %856 = @func_6139() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
    %857 = @func_2500() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */;
    %858 = %856.1;
    %859 = %857.0;
    (%858, %859)
  };
  %860() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_2044() -> (Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) {
  %861 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %862 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %863 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %864 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
  %865 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %866 = %865.0;
  %867 = cast(%866, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %868 = rsqrt(%867) /* ty=Tensor[(3, 4, 5), float32] */;
  %869 = cast(%868, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %870 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %871 = cast(meta[relay.Constant][43] /* ty=Tensor[(416), int16] */, dtype="int16") /* ty=Tensor[(416), int16] */;
  %872 = reshape(%871, newshape=[13, 8, 4]) /* ty=Tensor[(13, 8, 4), int16] */;
  %873 = @func_776(%872) /* ty=(Tensor[(13, 8, 4), uint32], Tensor[(13, 8, 4), float64]) */;
  %874 = %861.0;
  %875 = %862.2;
  %876 = %863.0;
  %877 = %864.1;
  %878 = cosh(%869) /* ty=Tensor[(3, 4, 5), float32] */;
  %879 = %870.0;
  %880 = %873.1;
  (%874, %875, %876, %877, %878, %879, %880, meta[relay.Constant][43] /* ty=Tensor[(416), int16] */)
}

def @func_6056() -> (Tensor[(9, 5, 1), float32],) {
  @func_6054() /* ty=(Tensor[(9, 5, 1), float32],) */
}

def @func_4029() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %881 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %882 = @func_2571() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %883 = %881.0;
  %884 = %882.0;
  (%883, %884)
}

def @func_9039() -> Tensor[(3, 4, 5), float64] {
  @func_4056() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_2108(%var_2106: Tensor[(416), int16]) -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), uint32], Tensor[(416), int16]) {
  @func_2105(%var_2106) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), uint32], Tensor[(416), int16]) */
}

def @func_3766(%var_3764: Tensor[(1560, 1), uint32], %var_3765: Tensor[(3, 24), uint32]) -> (Tensor[(9, 8, 5), uint32], Tensor[(1560, 1), uint32], Tensor[(9, 5, 360), bool], Tensor[(3, 24), float64], Tensor[(3, 24), bool]) {
  @func_3762(%var_3764, %var_3765) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(1560, 1), uint32], Tensor[(9, 5, 360), bool], Tensor[(3, 24), float64], Tensor[(3, 24), bool]) */
}

def @func_13499(%var_13497: Tensor[(12, 7, 13), float64]) -> Tensor[(12, 7, 13), float64] {
  @func_13496(%var_13497) /* ty=Tensor[(12, 7, 13), float64] */
}

def @func_9492(%var_9491: Tensor[(1, 14, 7), float64]) -> (Tensor[(1, 14, 7), float64],) {
  %887 = fn (%var_9483: Tensor[(1, 14, 7), float64]) -> (Tensor[(1, 14, 7), float64],) {
    %885 = cast(%var_9483, dtype="float64") /* ty=Tensor[(1, 14, 7), float64] */;
    %886 = cos(%885) /* ty=Tensor[(1, 14, 7), float64] */;
    (%886,)
  };
  %887(%var_9491) /* ty=(Tensor[(1, 14, 7), float64],) */
}

def @func_6934() -> Tensor[(3, 4, 5), bool] {
  %889 = fn () -> Tensor[(3, 4, 5), bool] {
    %888 = @func_2728() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(9, 5, 1), int16], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
    %888.2
  };
  %889() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_2132() -> Tensor[(5, 10, 1), float64] {
  %890 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 1), float64] */;
  cosh(%890) /* ty=Tensor[(5, 10, 1), float64] */
}

def @func_13304() -> Tensor[(3, 4, 5), float64] {
  @func_13302() /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_11216() -> (Tensor[(3, 4, 5), float32],) {
  %892 = fn () -> (Tensor[(3, 4, 5), float32],) {
    %891 = @func_3658() /* ty=Tensor[(3, 4, 5), float32] */;
    (%891,)
  };
  %892() /* ty=(Tensor[(3, 4, 5), float32],) */
}

def @func_2942() -> (Tensor[(3, 4, 5), uint16], Tensor[(13, 8, 15), uint32], Tensor[(260), float32], Tensor[(416), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) {
  %917 = fn () -> (Tensor[(3, 4, 5), uint16], Tensor[(13, 8, 15), uint32], Tensor[(260), float32], Tensor[(416), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) {
    %893 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %894 = %893.0;
    %895 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 4, 5), bool] */, dtype="uint16") /* ty=Tensor[(3, 4, 5), uint16] */;
    %896 = shape_of(%894, dtype="int32") /* ty=Tensor[(3), int32] */;
    %897 = cast(%894, dtype="uint16") /* ty=Tensor[(3, 4, 5), uint16] */;
    %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %899 = cast(meta[relay.Constant][46] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
    %900 = reshape(%899, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), float32] */;
    %901 = @func_590(%900) /* ty=(Tensor[(13, 8, 15), uint32], Tensor[(4, 5, 13), uint16], Tensor[(1560), float32]) */;
    %902 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
    %903 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %904 = %902.7;
    %905 = cast(%904, dtype="int16") /* ty=Tensor[(416), int16] */;
    %906 = reshape(%905, newshape=[13, 8, 4]) /* ty=Tensor[(13, 8, 4), int16] */;
    %907 = @func_776(%906) /* ty=(Tensor[(13, 8, 4), uint32], Tensor[(13, 8, 4), float64]) */;
    %908 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 4, 5), bool] */, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %909 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(3, 4, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %910 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 4, 5), bool] */, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %912 = logical_xor(%897, %898) /* ty=Tensor[(3, 4, 5), uint16] */;
    %913 = %901.0;
    %914 = %903.0;
    %915 = %907.1;
    %916 = divide(%910, %911) /* ty=Tensor[(3, 4, 5), float64] */;
    (%912, %913, meta[relay.Constant][46] /* ty=Tensor[(260), float32] */, %904, %914, %915, %916)
  };
  %917() /* ty=(Tensor[(3, 4, 5), uint16], Tensor[(13, 8, 15), uint32], Tensor[(260), float32], Tensor[(416), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */
}

def @func_11817(%var_11815: float64, %var_11816: Tensor[(7, 16, 5), float64]) -> (Tensor[(7, 16, 5), float64],) {
  @func_11813(%var_11815, %var_11816) /* ty=(Tensor[(7, 16, 5), float64],) */
}

def @func_9846() -> (Tensor[(3, 4, 5), bool],) {
  %918 = @func_6790() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */;
  %919 = %918.1;
  (%919,)
}

def @func_8341() -> (Tensor[(260), float32], Tensor[(3, 4, 5), float64]) {
  %924 = fn () -> (Tensor[(260), float32], Tensor[(3, 4, 5), float64]) {
    %920 = @func_5539() /* ty=(Tensor[(260), float32],) */;
    %921 = @func_4331() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %922 = %920.0;
    %923 = %921.0;
    (%922, %923)
  };
  %924() /* ty=(Tensor[(260), float32], Tensor[(3, 4, 5), float64]) */
}

def @func_13144() -> Tensor[(13, 8, 4), float64] {
  @func_13142() /* ty=Tensor[(13, 8, 4), float64] */
}

def @func_12774() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %930 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
    %925 = @func_7598() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */;
    %926 = @func_12563() /* ty=Tensor[(3, 4, 5), bool] */;
    %927 = %925.1;
    %928 = @func_8473() /* ty=Tensor[(3, 4, 5), bool] */;
    %929 = @func_7257() /* ty=Tensor[(3, 4, 5), bool] */;
    (%926, %927, %928, %929)
  };
  %930() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_593(%var_591: Tensor[(4, 5, 13), float32]) -> (Tensor[(13, 8, 15), uint32], Tensor[(4, 5, 13), uint16], Tensor[(1560), float32]) {
  @func_590(%var_591) /* ty=(Tensor[(13, 8, 15), uint32], Tensor[(4, 5, 13), uint16], Tensor[(1560), float32]) */
}

def @func_12887() -> (Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(8, 52), float64]) {
  %931 = @func_4370() /* ty=Tensor[(3, 4, 5), bool] */;
  %932 = cast(%931, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %933 = reshape(%932, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %934 = @func_2551(%933) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */;
  %935 = %934.1;
  %936 = @func_11429() /* ty=Tensor[(8, 52), float64] */;
  (%931, %935, %936)
}

def @func_8749() -> (Tensor[(5, 4, 16), uint8], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(1560), uint32], Tensor[(5, 10, 1), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 15), uint32]) {
  %937 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 4, 16), uint8] */, dtype="uint8") /* ty=Tensor[(5, 4, 16), uint8] */;
  %938 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(5, 4, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 4, 16), uint8] */, dtype="uint8") /* ty=Tensor[(5, 4, 16), uint8] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %941 = cast(meta[relay.Constant][50] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %942 = reshape(%941, newshape=[1560]) /* ty=Tensor[(1560), uint32] */;
  %943 = @func_4242(%942) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), float32], Tensor[(1560), float64], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */;
  %944 = @func_3275() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(5, 10, 1), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %945 = @func_6189() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(8, 52), float32], Tensor[(13, 8, 15), uint32]) */;
  %946 = @func_5964() /* ty=(Tensor[(13, 8, 15), uint32],) */;
  %947 = left_shift(%939, %940) /* ty=Tensor[(5, 4, 16), uint8] */;
  %948 = @func_8473() /* ty=Tensor[(3, 4, 5), bool] */;
  %949 = %943.5;
  %950 = %944.1;
  %951 = %945.0;
  %952 = %946.0;
  (%947, %948, %949, meta[relay.Constant][50] /* ty=Tensor[(1560), uint32] */, %950, %951, %952)
}

def @func_6904(%var_6902: Tensor[(11, 11, 11), float64], %var_6903: Tensor[(60), float64]) -> (Tensor[(11, 11, 11), bool], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(3, 4, 5), float64]) {
  %964 = fn (%var_6880: Tensor[(11, 11, 11), float64], %var_6895: Tensor[(60), float64]) -> (Tensor[(11, 11, 11), bool], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(3, 4, 5), float64]) {
    %953 = cast(meta[relay.Constant][51] /* ty=Tensor[(11, 11, 11), float64] */, dtype="bool") /* ty=Tensor[(11, 11, 11), bool] */;
    %954 = shape_of(%var_6880, dtype="int32") /* ty=Tensor[(3), int32] */;
    %955 = cast(%var_6880, dtype="bool") /* ty=Tensor[(11, 11, 11), bool] */;
    %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %957 = cast(%var_6895, dtype="float64") /* ty=Tensor[(60), float64] */;
    %958 = reshape(%957, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
    %959 = @func_3807(%958) /* ty=(Tensor[(3, 4, 5), bool],) */;
    %960 = @func_4411() /* ty=(Tensor[(9, 5, 1), float32], Tensor[(3, 4, 5), float64]) */;
    %961 = equal(%955, %956) /* ty=Tensor[(11, 11, 11), bool] */;
    %962 = %959.0;
    %963 = %960.1;
    (%961, %962, %var_6895, %963)
  };
  %964(%var_6902, %var_6903) /* ty=(Tensor[(11, 11, 11), bool], Tensor[(3, 4, 5), bool], Tensor[(60), float64], Tensor[(3, 4, 5), float64]) */
}

def @func_7599() -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) {
  %972 = fn () -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) {
    %965 = @func_5836() /* ty=Tensor[(3, 4, 5), bool] */;
    %966 = cast(%965, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
    %967 = acosh(%966) /* ty=Tensor[(3, 4, 5), float32] */;
    %968 = cast(%967, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %969 = reshape(%968, newshape=[15, 4]) /* ty=Tensor[(15, 4), float64] */;
    %970 = @func_4309(%969) /* ty=(Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool], Tensor[(15, 4), float64], Tensor[(3, 4, 5), float64]) */;
    %971 = %970.1;
    (%967, %971)
  };
  %972() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */
}

def @func_6141() -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) {
  @func_6139() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool]) */
}

def @func_8166() -> (Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), float64]) {
  %973 = @func_7246() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(9, 5, 1), float64], Tensor[(3, 4, 5), bool]) */;
  %974 = @func_2763() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %975 = %973.1;
  %976 = %974.0;
  (%975, %976)
}

def @func_12279(%var_12237: Tensor[(6, 14, 14), float32]) -> (Tensor[(6, 14, 14), int64], Tensor[(260), float32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(6, 14, 14), float64]) {
  %977 = cast(%var_12237, dtype="float32") /* ty=Tensor[(6, 14, 14), float32] */;
  %978 = sigmoid(%977) /* ty=Tensor[(6, 14, 14), float32] */;
  %979 = cast(%978, dtype="int64") /* ty=Tensor[(6, 14, 14), int64] */;
  %980 = shape_of(%var_12237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %981 = cast(%var_12237, dtype="int64") /* ty=Tensor[(6, 14, 14), int64] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %983 = @func_10908() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %984 = @func_10155() /* ty=(Tensor[(260), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
  %985 = @func_2044() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64], Tensor[(416), int16]) */;
  %986 = cast(%978, dtype="float64") /* ty=Tensor[(6, 14, 14), float64] */;
  %987 = multiply(%981, %982) /* ty=Tensor[(6, 14, 14), int64] */;
  %988 = @func_10614() /* ty=Tensor[(260), float32] */;
  %989 = @func_6933() /* ty=Tensor[(3, 4, 5), bool] */;
  %990 = %983.0;
  %991 = %984.2;
  %992 = %985.2;
  %993 = asin(%986) /* ty=Tensor[(6, 14, 14), float64] */;
  (%987, %988, %989, %990, %991, %992, %993)
}

def @func_12577() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  @func_12575() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_6681() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) {
  %1002 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) {
    %994 = @func_4626() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
    %995 = @func_1932() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %996 = @func_5678() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32]) */;
    %997 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
    %998 = %994.2;
    %999 = %995.0;
    %1000 = %996.6;
    %1001 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
    (%997, %998, %999, %1000, %1001)
  };
  %1002() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), bool]) */
}

def @func_6261() -> (Tensor[(3, 4, 5), bool],) {
  @func_6259() /* ty=(Tensor[(3, 4, 5), bool],) */
}

def @func_375(%var_372: Tensor[(9, 8, 1), uint32], %var_373: Tensor[(9, 8, 5), uint32], %var_374: Tensor[(1560), uint32]) -> (Tensor[(9, 8, 5), uint32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) {
  @func_370(%var_372, %var_373, %var_374) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */
}

def @func_7435() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool]) {
  %1003 = @func_6790() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */;
  %1004 = @func_4056() /* ty=Tensor[(3, 4, 5), float64] */;
  %1005 = %1003.0;
  (%1004, %1005)
}

def @func_4011(%var_4010: Tensor[(3, 4, 5), bool]) -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %1020 = fn (%var_3948: Tensor[(3, 4, 5), bool]) -> (Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
    %1006 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
    %1007 = %1006.1;
    %1008 = cast(%1007, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
    %1009 = cast(%var_3948, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %1010 = shape_of(%1007, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1011 = cast(%1007, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %1012 = dyn.reshape(%1009, %1010, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1013 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %1014 = @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %1015 = asinh(%1008) /* ty=Tensor[(3, 4, 5), float32] */;
    %1016 = mod(%1011, %1012) /* ty=Tensor[(3, 4, 5), float64] */;
    %1017 = %1013.0;
    %1018 = %1014.0;
    %1019 = @func_3452() /* ty=Tensor[(3, 4, 5), bool] */;
    (%1015, %1016, %1017, %1018, %1019)
  };
  %1020(%var_4010) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_4311(%var_4310: Tensor[(15, 4), float64]) -> (Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool], Tensor[(15, 4), float64], Tensor[(3, 4, 5), float64]) {
  %1028 = fn (%var_4296: Tensor[(15, 4), float64]) -> (Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool], Tensor[(15, 4), float64], Tensor[(3, 4, 5), float64]) {
    %1021 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
    %1022 = cast(%var_4296, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
    %1023 = reshape(%1022, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
    %1024 = @func_3807(%1023) /* ty=(Tensor[(3, 4, 5), bool],) */;
    %1025 = %1021.3;
    %1026 = %1024.0;
    %1027 = @func_4056() /* ty=Tensor[(3, 4, 5), float64] */;
    (%1025, %1026, %var_4296, %1027)
  };
  %1028(%var_4310) /* ty=(Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), bool], Tensor[(15, 4), float64], Tensor[(3, 4, 5), float64]) */
}

def @func_8080() -> Tensor[(260), float32] {
  @func_8078() /* ty=Tensor[(260), float32] */
}

def @func_3454() -> Tensor[(3, 4, 5), bool] {
  @func_3452() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_10157() -> (Tensor[(260), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  @func_10155() /* ty=(Tensor[(260), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_11728() -> Tensor[(3, 4, 5), bool] {
  @func_11726() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_3931() -> (Tensor[(3, 4, 5), float64],) {
  %1029 = @func_2220() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %1030 = %1029.0;
  (%1030,)
}

def @func_6103() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  %1035 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
    %1031 = @func_2292() /* ty=(Tensor[(3, 4, 5), float32], Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64]) */;
    %1032 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %1033 = %1031.2;
    %1034 = %1032.0;
    (%1033, %1034)
  };
  %1035() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_4894() -> Tensor[(8, 52), float32] {
  @func_4892() /* ty=Tensor[(8, 52), float32] */
}

def @func_2607() -> (Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) {
  @func_2605() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(13, 8, 4), float64]) */
}

def @func_10961() -> Tensor[(3, 4, 5), bool] {
  %1036 = @func_9745() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %1036.0
}

def @func_2501() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) {
  %1043 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) {
    %1037 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
    %1038 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 52), int16] */, dtype="int16") /* ty=Tensor[(8, 52), int16] */;
    %1039 = reshape(%1038, newshape=[416]) /* ty=Tensor[(416), int16] */;
    %1040 = @func_2105(%1039) /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), uint32], Tensor[(416), int16]) */;
    %1041 = %1037.0;
    %1042 = %1040.0;
    (%1041, %1042, meta[relay.Constant][52] /* ty=Tensor[(8, 52), int16] */)
  };
  %1043() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(8, 52), int16]) */
}

def @func_12104() -> (Tensor[(9, 12, 7), uint32], Tensor[(780, 2), float64], Tensor[(42), float64], Tensor[(1560), uint32]) {
  %1044 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %1045 = log(%1044) /* ty=Tensor[(9, 12, 7), float64] */;
  %1046 = cast(%1045, dtype="float32") /* ty=Tensor[(9, 12, 7), float32] */;
  %1047 = sin(%1046) /* ty=Tensor[(9, 12, 7), float32] */;
  %1048 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 12, 7), float64] */, dtype="uint32") /* ty=Tensor[(9, 12, 7), uint32] */;
  %1049 = shape_of(%1047, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1050 = cast(%1047, dtype="uint32") /* ty=Tensor[(9, 12, 7), uint32] */;
  %1051 = dyn.reshape(%1048, %1049, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1052 = cast(meta[relay.Constant][54] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %1053 = cast(meta[relay.Constant][55] /* ty=Tensor[(1560), uint32] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %1054 = reshape(%1052, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %1055 = reshape(%1053, newshape=[780, 2]) /* ty=Tensor[(780, 2), uint32] */;
  %1056 = @func_8407(%1054, %1055) /* ty=(Tensor[(14, 1, 3), float64], Tensor[(1560), float32], Tensor[(3, 4, 5), bool], Tensor[(780, 2), float64]) */;
  %1057 = bitwise_xor(%1050, %1051) /* ty=Tensor[(9, 12, 7), uint32] */;
  %1058 = %1056.3;
  (%1057, %1058, meta[relay.Constant][54] /* ty=Tensor[(42), float64] */, meta[relay.Constant][55] /* ty=Tensor[(1560), uint32] */)
}

def @func_4510(%var_4487: Tensor[(72), uint32], %var_4488: Tensor[(360), uint32], %var_4489: Tensor[(60, 26), uint32]) -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float64], Tensor[(1560), uint32], Tensor[(72), uint32], Tensor[(360), uint32], Tensor[(60, 26), uint32]) {
  %1059 = @func_2763() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %1060 = @func_2763() /* ty=(Tensor[(3, 4, 5), float64],) */;
  %1061 = cast(%var_4487, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %1062 = cast(%var_4488, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %1063 = cast(%var_4489, dtype="uint32") /* ty=Tensor[(60, 26), uint32] */;
  %1064 = reshape(%1061, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint32] */;
  %1065 = reshape(%1062, newshape=[9, 8, 5]) /* ty=Tensor[(9, 8, 5), uint32] */;
  %1066 = reshape(%1063, newshape=[1560]) /* ty=Tensor[(1560), uint32] */;
  %1067 = @func_370(%1064, %1065, %1066) /* ty=(Tensor[(9, 8, 5), uint32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) */;
  %1068 = %1059.0;
  %1069 = %1060.0;
  %1070 = %1067.2;
  (%1068, %1069, %1070, %var_4487, %var_4488, %var_4489)
}

def @func_4113() -> (Tensor[(416), int16], Tensor[(9, 5, 360), bool], Tensor[(1560), uint32], Tensor[(72), uint32]) {
  @func_4111() /* ty=(Tensor[(416), int16], Tensor[(9, 5, 360), bool], Tensor[(1560), uint32], Tensor[(72), uint32]) */
}

def @func_4575() -> Tensor[(3, 4, 5), bool] {
  @func_4573() /* ty=Tensor[(3, 4, 5), bool] */
}

def @func_2554(%var_2552: Tensor[(3, 4, 5), float64]) -> (Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) {
  @func_2551(%var_2552) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32], Tensor[(3, 4, 5), int16]) */
}

def @func_9745() -> (Tensor[(3, 4, 5), bool],) {
  %1071 = @func_4780() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %1072 = %1071.0;
  (%1072,)
}

def @func_5965() -> (Tensor[(13, 8, 15), uint32],) {
  %1075 = fn () -> (Tensor[(13, 8, 15), uint32],) {
    %1073 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
    %1074 = %1073.2;
    (%1074,)
  };
  %1075() /* ty=(Tensor[(13, 8, 15), uint32],) */
}

def @func_10444() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), int64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float32], Tensor[(1, 14, 7), float64], Tensor[(6, 11, 12), bool], Tensor[(792), int32]) {
  @func_10442() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), int64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float32], Tensor[(1, 14, 7), float64], Tensor[(6, 11, 12), bool], Tensor[(792), int32]) */
}

def @func_10694() -> Tensor[(260), float32] {
  %1076 = @func_5539() /* ty=(Tensor[(260), float32],) */;
  %1076.0
}

def @func_370(%var_357: Tensor[(9, 8, 1), uint32], %var_358: Tensor[(9, 8, 5), uint32], %var_365: Tensor[(1560), uint32]) -> (Tensor[(9, 8, 5), uint32], Tensor[(13, 8, 15), uint32], Tensor[(1560), uint32]) {
  %1077 = cast(%var_357, dtype="uint32") /* ty=Tensor[(9, 8, 1), uint32] */;
  %1078 = cast(%var_358, dtype="uint32") /* ty=Tensor[(9, 8, 5), uint32] */;
  %1079 = cast(%var_365, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %1080 = cast(%var_365, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %1081 = reshape(%1079, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %1082 = reshape(%1080, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), uint32] */;
  %1083 = right_shift(%1077, %1078) /* ty=Tensor[(9, 8, 5), uint32] */;
  %1084 = @func_207(%1081, %1082) /* ty=Tensor[(13, 8, 15), uint32] */;
  (%1083, %1084, %var_365)
}

def @func_9528() -> (Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool]) {
  @func_9526() /* ty=(Tensor[(16, 26), int16], Tensor[(3, 4, 5), bool]) */
}

def @func_11040() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float32]) {
  %1091 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float32]) {
    %1085 = @func_6569() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), uint32], Tensor[(3, 4, 5), uint32]) */;
    %1086 = @func_10637() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */;
    %1087 = @func_10442() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(1560), int64], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float32], Tensor[(1, 14, 7), float64], Tensor[(6, 11, 12), bool], Tensor[(792), int32]) */;
    %1088 = %1085.1;
    %1089 = %1086.1;
    %1090 = %1087.5;
    (%1088, %1089, %1090)
  };
  %1091() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), float32]) */
}

def @func_7741() -> (Tensor[(3, 4, 5), bool],) {
  %1092 = @func_6842() /* ty=Tensor[(3, 4, 5), bool] */;
  (%1092,)
}

def @func_3602() -> (Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(260), float32], Tensor[(140, 14), float32], Tensor[(260), float32]) {
  @func_3600() /* ty=(Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(260), float32], Tensor[(140, 14), float32], Tensor[(260), float32]) */
}

def @func_4273() -> Tensor[(260), float32] {
  %1094 = fn () -> Tensor[(260), float32] {
    %1093 = @func_1869() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 15), uint32], Tensor[(260), float32]) */;
    %1093.3
  };
  %1094() /* ty=Tensor[(260), float32] */
}

def @func_7694() -> (Tensor[(3, 4, 5), bool],) {
  %1095 = @func_7257() /* ty=Tensor[(3, 4, 5), bool] */;
  (%1095,)
}

def @func_6792() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) {
  @func_6790() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float64]) */
}

def @func_7019() -> (Tensor[(3, 4, 5), float64],) {
  %1096 = @func_4626() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
  %1097 = %1096.4;
  (%1097,)
}

def @func_4627() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) {
  %1112 = fn () -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) {
    %1098 = @func_2450() /* ty=(Tensor[(3, 4, 5), bool],) */;
    %1099 = %1098.0;
    %1100 = cast(%1099, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    %1101 = reshape(%1100, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
    %1102 = @func_3807(%1101) /* ty=(Tensor[(3, 4, 5), bool],) */;
    %1103 = %1102.0;
    %1104 = cast(%1103, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
    %1105 = reshape(%1104, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), bool] */;
    %1106 = @func_4009(%1105) /* ty=(Tensor[(3, 4, 5), float32], Tensor[(3, 4, 5), float64], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */;
    %1107 = @func_2941() /* ty=(Tensor[(3, 4, 5), uint16], Tensor[(13, 8, 15), uint32], Tensor[(260), float32], Tensor[(416), int16], Tensor[(3, 4, 5), bool], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */;
    %1108 = @func_1976() /* ty=(Tensor[(3, 4, 5), float64],) */;
    %1109 = %1106.0;
    %1110 = %1107.5;
    %1111 = %1108.0;
    (%1099, %1103, %1109, %1110, %1111)
  };
  %1112() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), float32], Tensor[(13, 8, 4), float64], Tensor[(3, 4, 5), float64]) */
}

def @func_4031() -> (Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) {
  @func_4029() /* ty=(Tensor[(3, 4, 5), bool], Tensor[(3, 4, 5), bool]) */
}

def @func_9902() -> (Tensor[(3, 4, 5), float64],) {
  @func_9900() /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_2450() -> (Tensor[(3, 4, 5), bool],) {
  %1113 = @func_2064() /* ty=(Tensor[(3, 4, 5), bool],) */;
  %1114 = %1113.0;
  (%1114,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen743/build/output.py:3716: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen743/build/output.py:3721: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen743/build/output.py:3736: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen743/build/output.py:3741: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen743/build/output.py:3746: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen743/build/output.py:3751: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
def @main() -> Tensor[(15, 4, 15), float32] {
  %0 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 4, 15), float32] */, dtype="float32") /* GeneratedSource */ /* ty=Tensor[(15, 4, 15), float32] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(15, 4, 15), float32] */, dtype="int32") /* GeneratedSource */ /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 4, 15), float32] */, dtype="float32") /* GeneratedSource */ /* ty=Tensor[(15, 4, 15), float32] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* GeneratedSource */ /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%2, %3) /* GeneratedSource */ /* ty=Tensor[(15, 4, 15), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
