==========mod==========
#[version = "0.0.5"]
def @func_3222() -> Tensor[(16, 16, 6), float64] {
  @func_2652() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_9424() -> Tensor[(16, 16, 6), float64] {
  @func_3352() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_5064() -> (Tensor[(3, 8, 12), float32],) {
  %0 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %1 = %0.0;
  (%1,)
}

def @func_12520() -> Tensor[(3, 8, 12), float32] {
  %2 = @func_4879() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %2.0
}

def @func_3557(%var_3518: Tensor[(1, 336), float64], %var_3521: Tensor[(630), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %3 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %4 = cast(%var_3518, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %5 = cast(%var_3518, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %6 = reshape(%4, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
  %7 = reshape(%5, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
  %8 = cast(%var_3521, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %9 = reshape(%8, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %10 = @func_2559(%9) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(1680), float32], Tensor[(15, 16, 7), int16], Tensor[(15, 16, 7), bool], Tensor[(630), uint32]) */;
  %11 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %12 = %11.0;
  %13 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  %14 = cast(%13, dtype="uint32") /* ty=Tensor[(16, 16, 6), uint32] */;
  %15 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%12, dtype="uint32") /* ty=Tensor[(16, 16, 6), uint32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(144, 2), float32] */, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %19 = reshape(%18, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %20 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(144, 2), float32] */, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %22 = reshape(%21, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %23 = %3.0;
  %24 = @func_2266(%6, %7) /* ty=Tensor[(6, 14, 4), float64] */;
  %25 = %10.1;
  %26 = bitwise_or(%16, %17) /* ty=Tensor[(16, 16, 6), uint32] */;
  %27 = @func_1998(%19) /* ty=Tensor[(3, 8, 12), float32] */;
  %28 = %20.0;
  %29 = @func_1998(%22) /* ty=Tensor[(3, 8, 12), float32] */;
  (%23, %24, %var_3518, %25, %var_3521, %26, %27, meta[relay.Constant][0] /* ty=Tensor[(144, 2), float32] */, %28, %29)
}

def @func_5572() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %30 = @func_3770() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %33 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %34 = @func_3787() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %35 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %36 = @func_4879() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %37 = @func_4961() /* ty=Tensor[(3, 8, 12), float32] */;
  %38 = tan(%32) /* ty=Tensor[(16, 16, 6), float64] */;
  %39 = %33.1;
  %40 = %34.0;
  %41 = %35.0;
  %42 = %36.0;
  (%37, %38, %39, %40, %41, %42)
}

def @func_6910() -> (Tensor[(16, 16, 6), float64],) {
  %43 = @func_4704() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %44 = %43.0;
  (%44,)
}

def @func_3770() -> (Tensor[(16, 16, 6), float64],) {
  %45 = @func_2652() /* ty=Tensor[(16, 16, 6), float64] */;
  (%45,)
}

def @func_8547(%var_8510: Tensor[(16, 16, 6), float64], %var_8519: Tensor[(33), int32]) -> (Tensor[(16, 16, 6), bool], Tensor[(33), int32], Tensor[(33), int32], Tensor[(6, 44), int32], Tensor[(16, 16, 6), float64]) {
  %46 = @func_5880() /* ty=Tensor[(16, 16, 6), float64] */;
  %47 = cast(%var_8510, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = cast(%var_8519, dtype="int32") /* ty=Tensor[(33), int32] */;
  %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 44), int32] */, dtype="int32") /* ty=Tensor[(6, 44), int32] */;
  %53 = reshape(%51, newshape=[33]) /* ty=Tensor[(33), int32] */;
  %54 = reshape(%52, newshape=[264]) /* ty=Tensor[(264), int32] */;
  %55 = @func_2835(%53, %54) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) */;
  %56 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %57 = less_equal(%49, %50) /* ty=Tensor[(16, 16, 6), bool] */;
  %58 = %55.2;
  %59 = %56.0;
  (%57, %58, %var_8519, meta[relay.Constant][1] /* ty=Tensor[(6, 44), int32] */, %59)
}

def @func_2461() -> Tensor[(16, 16, 6), float64] {
  %60 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  acos(%60) /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_3585() -> Tensor[(3, 8, 12), float32] {
  %61 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %61.1
}

def @func_7953(%var_7945: Tensor[(264), int32]) -> (Tensor[(16, 16, 6), float64], Tensor[(2112), bool], Tensor[(16, 16, 6), uint8], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) {
  %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(2112), bool] */, dtype="bool") /* ty=Tensor[(2112), bool] */;
  %63 = reshape(%62, newshape=[528, 4]) /* ty=Tensor[(528, 4), bool] */;
  %64 = @func_3754(%63) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */;
  %65 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %66 = %65.0;
  %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 16, 6), float64] */, dtype="uint8") /* ty=Tensor[(16, 16, 6), uint8] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="uint8") /* ty=Tensor[(16, 16, 6), uint8] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(33), int32] */, dtype="int32") /* ty=Tensor[(33), int32] */;
  %72 = cast(%var_7945, dtype="int32") /* ty=Tensor[(264), int32] */;
  %73 = reshape(%71, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int32] */;
  %74 = reshape(%72, newshape=[3, 8, 11]) /* ty=Tensor[(3, 8, 11), int32] */;
  %75 = %64.4;
  %76 = add(%69, %70) /* ty=Tensor[(16, 16, 6), uint8] */;
  %77 = @func_2596(%73, %74) /* ty=Tensor[(3, 8, 11), bool] */;
  (%75, meta[relay.Constant][3] /* ty=Tensor[(2112), bool] */, %76, %77, meta[relay.Constant][5] /* ty=Tensor[(33), int32] */, %var_7945)
}

def @func_7123(%var_7112: Tensor[(15, 16, 7), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(630), uint32], Tensor[(15, 16, 7), float64]) {
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %79 = reshape(%78, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %80 = @func_2559(%79) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(1680), float32], Tensor[(15, 16, 7), int16], Tensor[(15, 16, 7), bool], Tensor[(630), uint32]) */;
  %81 = %80.3;
  %82 = cast(%var_7112, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %86 = @func_3074() /* ty=Tensor[(16, 16, 6), float64] */;
  %87 = divide(%84, %85) /* ty=Tensor[(15, 16, 7), float64] */;
  (%86, meta[relay.Constant][6] /* ty=Tensor[(630), uint32] */, %87)
}

def @func_9492() -> Tensor[(2112), float32] {
  %88 = @func_6371() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(2112), bool]) */;
  %89 = %88.2;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(2112), float32] */;
  exp(%90) /* ty=Tensor[(2112), float32] */
}

def @func_4067() -> (Tensor[(3, 8, 12), float32],) {
  %91 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %92 = %91.1;
  (%92,)
}

def @func_12539() -> (Tensor[(192), float64],) {
  %93 = @func_10536() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(6, 4, 8), uint32], Tensor[(9, 6, 16), float32], Tensor[(864), float32], Tensor[(192), float64]) */;
  %94 = %93.4;
  (%94,)
}

def @func_6419(%var_6413: Tensor[(10, 13, 12), float64]) -> (Tensor[(10, 13, 12), float64],) {
  %95 = cast(%var_6413, dtype="float64") /* ty=Tensor[(10, 13, 12), float64] */;
  %96 = atan(%95) /* ty=Tensor[(10, 13, 12), float64] */;
  (%96,)
}

def @func_2981() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  %97 = @func_2501() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %98 = %97.1;
  %99 = @func_2686() /* ty=Tensor[(3, 8, 12), float32] */;
  (%98, %99)
}

def @func_13105() -> Tensor[(16, 16, 6), float64] {
  %100 = @func_5201() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %100.1
}

def @func_2686() -> Tensor[(3, 8, 12), float32] {
  %101 = @func_2501() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %101.1
}

def @func_11815() -> Tensor[(6, 14, 4), float64] {
  %102 = @func_3144() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) */;
  %102.1
}

def @func_13006(%var_12997: Tensor[(4, 8, 3), int64]) -> (Tensor[(4, 8, 3), bool],) {
  %103 = cast(4 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %104 = cast(%var_12997, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
  %105 = less_equal(%103, %104) /* ty=Tensor[(4, 8, 3), bool] */;
  (%105,)
}

def @func_13094(%var_13081: Tensor[(10, 4, 1), int64], %var_13082: Tensor[(10, 4, 5), int64]) -> Tensor[(10, 4, 5), int64] {
  %106 = cast(%var_13081, dtype="int64") /* ty=Tensor[(10, 4, 1), int64] */;
  %107 = cast(%var_13082, dtype="int64") /* ty=Tensor[(10, 4, 5), int64] */;
  bitwise_or(%106, %107) /* ty=Tensor[(10, 4, 5), int64] */
}

def @func_484(%var_447: Tensor[(14, 9, 5), uint32]) -> (Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) {
  %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 9, 5), uint32] */, dtype="uint32") /* ty=Tensor[(14, 9, 5), uint32] */;
  %109 = shape_of(%var_447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%var_447, dtype="uint32") /* ty=Tensor[(14, 9, 5), uint32] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %112 = cast(%var_447, dtype="bool") /* ty=Tensor[(14, 9, 5), bool] */;
  %113 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(14, 9, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 9, 5), uint32] */, dtype="bool") /* ty=Tensor[(14, 9, 5), bool] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 840), float32] */, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %117 = reshape(%116, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
  %118 = @func_91(%117) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */;
  %119 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 840), float32] */, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %120 = reshape(%119, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
  %121 = @func_91(%120) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */;
  %122 = cast(meta[relay.Constant][9] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %123 = %118.1;
  %124 = cast(%123, dtype="float32") /* ty=Tensor[(15, 16, 7), float32] */;
  %125 = reshape(%122, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float64] */;
  %126 = reshape(%124, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %127 = @func_290(%125, %126) /* ty=(Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(6, 4, 8), uint32], Tensor[(6, 4, 8), float32]) */;
  %128 = bitwise_or(%110, %111) /* ty=Tensor[(14, 9, 5), uint32] */;
  %129 = logical_and(%114, %115) /* ty=Tensor[(14, 9, 5), bool] */;
  %130 = %121.1;
  %131 = %127.2;
  (%128, %129, %123, meta[relay.Constant][8] /* ty=Tensor[(2, 840), float32] */, %130, %131, meta[relay.Constant][9] /* ty=Tensor[(192), float64] */)
}

def @func_6152(%var_6138: Tensor[(675), float32]) -> (Tensor[(16, 16, 6), float64], Tensor[(9, 5, 15), float32], Tensor[(675), float32]) {
  %132 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %133 = cast(%var_6138, dtype="float32") /* ty=Tensor[(675), float32] */;
  %134 = reshape(%133, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), float32] */;
  %135 = %132.0;
  %136 = @func_5851(%134) /* ty=Tensor[(9, 5, 15), float32] */;
  (%135, %136, %var_6138)
}

def @func_11410() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  %137 = @func_3643() /* ty=Tensor[(3, 8, 12), float32] */;
  %138 = @func_9846() /* ty=Tensor[(16, 16, 6), float64] */;
  (%137, %138)
}

def @func_8800(%var_8789: Tensor[(320), int64]) -> Tensor[(320), float32] {
  %139 = @func_6049() /* ty=(Tensor[(320), int64],) */;
  %140 = %139.0;
  %141 = cast(%var_8789, dtype="float32") /* ty=Tensor[(320), float32] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(1), int32] */;
  %143 = cast(%140, dtype="float32") /* ty=Tensor[(320), float32] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?), float32] */;
  minimum(%143, %144) /* ty=Tensor[(320), float32] */
}

def @func_3491() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %145 = @func_3074() /* ty=Tensor[(16, 16, 6), float64] */;
  %146 = @func_3222() /* ty=Tensor[(16, 16, 6), float64] */;
  (%145, %146)
}

def @func_2652() -> Tensor[(16, 16, 6), float64] {
  @func_2461() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_4961() -> Tensor[(3, 8, 12), float32] {
  %147 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %147.0
}

def @func_6086(%var_6076: Tensor[(100), uint8]) -> (Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) {
  %148 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 7, 12), float32] */, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %149 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %150 = @func_4829() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %151 = cast(%var_6076, dtype="uint8") /* ty=Tensor[(100), uint8] */;
  %152 = reshape(%151, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), uint8] */;
  %153 = @func_5038() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) */;
  %154 = sin(%148) /* ty=Tensor[(16, 7, 12), float32] */;
  %155 = %149.0;
  %156 = %150.0;
  %157 = @func_4911(%152) /* ty=Tensor[(10, 2, 5), uint8] */;
  %158 = %153.2;
  (%154, %155, %156, %157, %var_6076, %158)
}

def @func_4051() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %159 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %160 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %161 = %159.0;
  %162 = %160.0;
  (%161, %162)
}

def @func_4279() -> (Tensor[(3, 8, 12), float32], Tensor[(528, 4), float32], Tensor[(2112), bool]) {
  %163 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %164 = cast(meta[relay.Constant][11] /* ty=Tensor[(2112), bool] */, dtype="bool") /* ty=Tensor[(2112), bool] */;
  %165 = reshape(%164, newshape=[528, 4]) /* ty=Tensor[(528, 4), bool] */;
  %166 = @func_3754(%165) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */;
  %167 = %163.0;
  %168 = %166.10;
  (%167, %168, meta[relay.Constant][11] /* ty=Tensor[(2112), bool] */)
}

def @func_2835(%var_2813: Tensor[(33), int32], %var_2814: Tensor[(264), int32]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) {
  %169 = cast(%var_2813, dtype="int32") /* ty=Tensor[(33), int32] */;
  %170 = cast(%var_2814, dtype="int32") /* ty=Tensor[(264), int32] */;
  %171 = reshape(%169, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int32] */;
  %172 = reshape(%170, newshape=[3, 8, 11]) /* ty=Tensor[(3, 8, 11), int32] */;
  %173 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  %174 = @func_2596(%171, %172) /* ty=Tensor[(3, 8, 11), bool] */;
  (%173, %174, %var_2813, %var_2814)
}

def @func_6049() -> (Tensor[(320), int64],) {
  %175 = @func_2758() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %176 = %175.3;
  (%176,)
}

def @func_11605(%var_11602: Tensor[(2112), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(3, 8, 12), float32], Tensor[(2112), bool]) {
  %177 = @func_6910() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %178 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %179 = %178.1;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %181 = reshape(%180, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %182 = @func_1998(%181) /* ty=Tensor[(3, 8, 12), float32] */;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %184 = reshape(%183, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %185 = @func_11410() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */;
  %186 = @func_4879() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %187 = @func_7607() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) */;
  %188 = cast(%var_11602, dtype="bool") /* ty=Tensor[(2112), bool] */;
  %189 = reshape(%188, newshape=[528, 4]) /* ty=Tensor[(528, 4), bool] */;
  %190 = @func_3754(%189) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */;
  %191 = %177.0;
  %192 = @func_8782(%184) /* ty=Tensor[(3, 8, 12), bool] */;
  %193 = %185.0;
  %194 = %186.0;
  %195 = %187.3;
  %196 = %190.6;
  (%191, %179, %182, %192, %193, %194, %195, %196, %var_11602)
}

def @func_9720() -> (Tensor[(320), int64],) {
  %197 = @func_2758() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %198 = %197.3;
  (%198,)
}

def @func_1998(%var_1988: Tensor[(3, 8, 12), float32]) -> Tensor[(3, 8, 12), float32] {
  %199 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 8, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %200 = shape_of(%var_1988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_1988, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%201, %202) /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_2266(%var_2260: Tensor[(6, 14, 4), float64], %var_2261: Tensor[(6, 14, 4), float64]) -> Tensor[(6, 14, 4), float64] {
  %203 = cast(%var_2261, dtype="float64") /* ty=Tensor[(6, 14, 4), float64] */;
  %204 = shape_of(%var_2260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%var_2260, dtype="float64") /* ty=Tensor[(6, 14, 4), float64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%205, %206) /* ty=Tensor[(6, 14, 4), float64] */
}

def @func_9846() -> Tensor[(16, 16, 6), float64] {
  @func_6006() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_11709(%var_11701: float64, %var_11702: Tensor[(12, 3, 13), float64]) -> (Tensor[(12, 3, 13), float64], Tensor[(12, 3, 13), float64]) {
  %207 = cast(%var_11701, dtype="float64") /* ty=float64 */;
  %208 = cast(%var_11702, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %209 = cast(%var_11701, dtype="float64") /* ty=float64 */;
  %210 = cast(%var_11702, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %211 = power(%207, %208) /* ty=Tensor[(12, 3, 13), float64] */;
  %212 = mod(%209, %210) /* ty=Tensor[(12, 3, 13), float64] */;
  (%211, %212)
}

def @func_5851(%var_5841: Tensor[(9, 5, 15), float32]) -> Tensor[(9, 5, 15), float32] {
  %213 = cast(%var_5841, dtype="float32") /* ty=Tensor[(9, 5, 15), float32] */;
  atan(%213) /* ty=Tensor[(9, 5, 15), float32] */
}

def @func_9337(%var_9313: Tensor[(33), int32], %var_9314: Tensor[(3, 88), int32], %var_9315: Tensor[(715), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), uint16], Tensor[(192), float64], Tensor[(33), int32], Tensor[(33), int32], Tensor[(3, 88), int32], Tensor[(715), bool], Tensor[(16, 16, 6), float64], Tensor[(288), float32]) {
  %214 = @func_3074() /* ty=Tensor[(16, 16, 6), float64] */;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %216 = reshape(%215, newshape=[1536]) /* ty=Tensor[(1536), float64] */;
  %217 = @func_7503(%216) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64]) */;
  %218 = @func_8394() /* ty=(Tensor[(192), float64],) */;
  %219 = cast(%var_9313, dtype="int32") /* ty=Tensor[(33), int32] */;
  %220 = cast(%var_9314, dtype="int32") /* ty=Tensor[(3, 88), int32] */;
  %221 = cast(%var_9315, dtype="bool") /* ty=Tensor[(715), bool] */;
  %222 = reshape(%219, newshape=[33]) /* ty=Tensor[(33), int32] */;
  %223 = reshape(%220, newshape=[264]) /* ty=Tensor[(264), int32] */;
  %224 = reshape(%221, newshape=[715]) /* ty=Tensor[(715), bool] */;
  %225 = @func_7427(%222, %223, %224) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(13, 100), bool], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) */;
  %226 = cast(meta[relay.Constant][13] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %227 = reshape(%226, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %228 = @func_5813(%227) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), uint8], Tensor[(3, 8, 12), float32]) */;
  %229 = %217.1;
  %230 = %218.0;
  %231 = %225.4;
  %232 = %228.1;
  (%214, %229, %230, %231, %var_9313, %var_9314, %var_9315, %232, meta[relay.Constant][13] /* ty=Tensor[(288), float32] */)
}

def @func_6188() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  %233 = @func_5376() /* ty=Tensor[(3, 8, 12), float32] */;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %235 = @func_3491() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %236 = sqrt(%234) /* ty=Tensor[(3, 8, 12), float32] */;
  %237 = %235.1;
  (%236, %237)
}

def @func_10775(%var_10767: Tensor[(264), int32]) -> (Tensor[(320), int64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) {
  %238 = @func_9720() /* ty=(Tensor[(320), int64],) */;
  %239 = cast(meta[relay.Constant][14] /* ty=Tensor[(33), int32] */, dtype="int32") /* ty=Tensor[(33), int32] */;
  %240 = cast(%var_10767, dtype="int32") /* ty=Tensor[(264), int32] */;
  %241 = cast(meta[relay.Constant][15] /* ty=Tensor[(715), bool] */, dtype="bool") /* ty=Tensor[(715), bool] */;
  %242 = reshape(%239, newshape=[33]) /* ty=Tensor[(33), int32] */;
  %243 = reshape(%240, newshape=[264]) /* ty=Tensor[(264), int32] */;
  %244 = reshape(%241, newshape=[715]) /* ty=Tensor[(715), bool] */;
  %245 = @func_7427(%242, %243, %244) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(13, 100), bool], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) */;
  %246 = %238.0;
  %247 = %245.3;
  (%246, %247, meta[relay.Constant][14] /* ty=Tensor[(33), int32] */, %var_10767, meta[relay.Constant][15] /* ty=Tensor[(715), bool] */)
}

def @func_4320(%var_4302: Tensor[(528, 4), float32], %var_4312: Tensor[(528, 4), float32]) -> (Tensor[(528, 4), float64], Tensor[(12, 11, 16), bool], Tensor[(528, 4), uint64]) {
  %248 = @func_4279() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(528, 4), float32], Tensor[(2112), bool]) */;
  %249 = %248.1;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(528, 4), float64] */;
  %251 = cast(%var_4302, dtype="float32") /* ty=Tensor[(528, 4), float32] */;
  %252 = shape_of(%249, dtype="int32") /* ty=Tensor[(2), int32] */;
  %253 = cast(%249, dtype="float32") /* ty=Tensor[(528, 4), float32] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %255 = mod(%253, %254) /* ty=Tensor[(528, 4), float32] */;
  %256 = cast(%255, dtype="bool") /* ty=Tensor[(528, 4), bool] */;
  %257 = reshape(%256, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), bool] */;
  %258 = cast(%var_4312, dtype="uint64") /* ty=Tensor[(528, 4), uint64] */;
  %259 = shape_of(%255, dtype="int32") /* ty=Tensor[(2), int32] */;
  %260 = cast(%255, dtype="uint64") /* ty=Tensor[(528, 4), uint64] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %262 = sinh(%250) /* ty=Tensor[(528, 4), float64] */;
  %263 = @func_2207(%257) /* ty=Tensor[(12, 11, 16), bool] */;
  %264 = subtract(%260, %261) /* ty=Tensor[(528, 4), uint64] */;
  (%262, %263, %264)
}

def @func_7427(%var_7418: Tensor[(33), int32], %var_7419: Tensor[(264), int32], %var_7422: Tensor[(715), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(13, 100), bool], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) {
  %265 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 100), uint8] */, dtype="bool") /* ty=Tensor[(1, 100), bool] */;
  %266 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 100), uint8] */, dtype="bool") /* ty=Tensor[(13, 100), bool] */;
  %267 = cast(%var_7418, dtype="int32") /* ty=Tensor[(33), int32] */;
  %268 = cast(%var_7419, dtype="int32") /* ty=Tensor[(264), int32] */;
  %269 = reshape(%267, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int32] */;
  %270 = reshape(%268, newshape=[3, 8, 11]) /* ty=Tensor[(3, 8, 11), int32] */;
  %271 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 100), uint8] */, dtype="uint8") /* ty=Tensor[(1, 100), uint8] */;
  %272 = reshape(%271, newshape=[100]) /* ty=Tensor[(100), uint8] */;
  %273 = @func_6086(%272) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) */;
  %274 = %273.5;
  %275 = cast(meta[relay.Constant][18] /* ty=Tensor[(715), float64] */, dtype="bool") /* ty=Tensor[(715), bool] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(1), int32] */;
  %277 = cast(%274, dtype="bool") /* ty=Tensor[(715), bool] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?), bool] */;
  %279 = equal(%277, %278) /* ty=Tensor[(715), bool] */;
  %280 = cast(%var_7422, dtype="bool") /* ty=Tensor[(715), bool] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(1), int32] */;
  %282 = cast(%279, dtype="bool") /* ty=Tensor[(715), bool] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?), bool] */;
  %284 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %285 = @func_2919() /* ty=Tensor[(3, 8, 12), float32] */;
  %286 = logical_or(%265, %266) /* ty=Tensor[(13, 100), bool] */;
  %287 = @func_2596(%269, %270) /* ty=Tensor[(3, 8, 11), bool] */;
  %288 = not_equal(%282, %283) /* ty=Tensor[(715), bool] */;
  (%284, %285, %286, %287, %var_7418, %var_7419, %288)
}

def @func_12942() -> (Tensor[(3, 13, 8), float64], Tensor[(16, 16, 6), float64]) {
  %289 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 13, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 13, 8), float64] */;
  %290 = @func_9473() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(192), float64]) */;
  %291 = cos(%289) /* ty=Tensor[(3, 13, 8), float64] */;
  %292 = %290.0;
  (%291, %292)
}

def @func_10990(%var_10980: Tensor[(13, 1, 11), float32]) -> (Tensor[(13, 1, 11), float32],) {
  %293 = cast(%var_10980, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
  %294 = atan(%293) /* ty=Tensor[(13, 1, 11), float32] */;
  (%294,)
}

def @func_3408() -> (Tensor[(16, 16, 6), float64],) {
  %295 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  (%295,)
}

def @func_10536() -> (Tensor[(3, 8, 12), float32], Tensor[(6, 4, 8), uint32], Tensor[(9, 6, 16), float32], Tensor[(864), float32], Tensor[(192), float64]) {
  %296 = @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %297 = %296.1;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %299 = @func_4178() /* ty=(Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %300 = cast(meta[relay.Constant][20] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %301 = reshape(%300, newshape=[9, 6, 16]) /* ty=Tensor[(9, 6, 16), float32] */;
  %302 = @func_9267(%301) /* ty=(Tensor[(9, 6, 16), float32],) */;
  %303 = @func_9103() /* ty=(Tensor[(192), float64],) */;
  %304 = asinh(%298) /* ty=Tensor[(3, 8, 12), float32] */;
  %305 = %299.2;
  %306 = %302.0;
  %307 = %303.0;
  (%304, %305, %306, meta[relay.Constant][20] /* ty=Tensor[(864), float32] */, %307)
}

def @func_11970() -> Tensor[(320), int64] {
  %308 = @func_6049() /* ty=(Tensor[(320), int64],) */;
  %308.0
}

def @func_11255(%var_11193: Tensor[(968), float32]) -> (Tensor[(16, 16, 6), float64], Tensor[(11, 8, 11), bool], Tensor[(16, 16, 6), float64], Tensor[(1, 360), float64], Tensor[(360), float64], Tensor[(1, 5, 8), uint32], Tensor[(968), uint64], Tensor[(968), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %309 = cast(%var_11193, dtype="float32") /* ty=Tensor[(968), float32] */;
  %310 = cast(%var_11193, dtype="float32") /* ty=Tensor[(968), float32] */;
  %311 = cast(%var_11193, dtype="float32") /* ty=Tensor[(968), float32] */;
  %312 = reshape(%309, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
  %313 = reshape(%310, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
  %314 = reshape(%311, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
  %315 = @func_6270(%312, %313, %314) /* ty=(Tensor[(11, 8, 11), bool], Tensor[(11, 8, 11), float64]) */;
  %316 = cast(meta[relay.Constant][21] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %317 = reshape(%316, newshape=[1, 360]) /* ty=Tensor[(1, 360), float64] */;
  %318 = @func_10234(%317) /* ty=(Tensor[(192), float64], Tensor[(715), float64], Tensor[(100), uint8], Tensor[(16, 16, 6), float64], Tensor[(1, 3, 15), float64], Tensor[(1, 360), float64]) */;
  %319 = cast(meta[relay.Constant][22] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %320 = reshape(%319, newshape=[]) /* ty=uint32 */;
  %321 = @func_11048(%320) /* ty=(Tensor[(1, 5, 8), uint32],) */;
  %322 = cast(%var_11193, dtype="float64") /* ty=Tensor[(968), float64] */;
  %323 = asinh(%322) /* ty=Tensor[(968), float64] */;
  %324 = cast(%323, dtype="uint64") /* ty=Tensor[(968), uint64] */;
  %325 = cast(meta[relay.Constant][22] /* ty=uint32 */, dtype="uint64") /* ty=uint64 */;
  %326 = cast(%323, dtype="float32") /* ty=Tensor[(968), float32] */;
  %327 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %328 = @func_7664() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %329 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %330 = %315.0;
  %331 = @func_5880() /* ty=Tensor[(16, 16, 6), float64] */;
  %332 = %318.5;
  %333 = %321.0;
  %334 = left_shift(%324, %325) /* ty=Tensor[(968), uint64] */;
  %335 = asin(%326) /* ty=Tensor[(968), float32] */;
  %336 = %327.0;
  %337 = %328.0;
  (%329, %330, %331, %332, meta[relay.Constant][21] /* ty=Tensor[(360), float64] */, %333, %334, %335, %336, %337)
}

def @func_8394() -> (Tensor[(192), float64],) {
  %338 = @func_4178() /* ty=(Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %339 = %338.3;
  (%339,)
}

def @func_3667() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) {
  %340 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %341 = cast(meta[relay.Constant][23] /* ty=Tensor[(320), int64] */, dtype="int64") /* ty=Tensor[(320), int64] */;
  %342 = cast(meta[relay.Constant][23] /* ty=Tensor[(320), int64] */, dtype="int64") /* ty=Tensor[(320), int64] */;
  %343 = reshape(%341, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
  %344 = reshape(%342, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
  %345 = @func_2715(%343, %344) /* ty=(Tensor[(4, 16, 5), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %346 = %340.0;
  %347 = %345.1;
  (%346, %347, meta[relay.Constant][23] /* ty=Tensor[(320), int64] */)
}

def @func_9103() -> (Tensor[(192), float64],) {
  %348 = @func_5924() /* ty=(Tensor[(192), float64], Tensor[(3, 8, 12), float32], Tensor[(5, 7, 4), float32]) */;
  %349 = %348.0;
  (%349,)
}

def @func_5880() -> Tensor[(16, 16, 6), float64] {
  %350 = @func_3491() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %350.1
}

def @func_6371() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(2112), bool]) {
  %351 = @func_5313() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) */;
  %352 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), bool] */, dtype="bool") /* ty=Tensor[(2112), bool] */;
  %353 = reshape(%352, newshape=[528, 4]) /* ty=Tensor[(528, 4), bool] */;
  %354 = @func_3754(%353) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */;
  %355 = %351.0;
  %356 = %354.9;
  (%355, %356, meta[relay.Constant][24] /* ty=Tensor[(2112), bool] */)
}

def @func_8267() -> Tensor[(3, 8, 12), float32] {
  %357 = @func_7243() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %357.0
}

def @func_7664() -> (Tensor[(3, 8, 12), float32],) {
  %358 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %359 = %358.1;
  (%359,)
}

def @func_9281() -> (Tensor[(16, 16, 6), float64],) {
  %360 = @func_5201() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %361 = %360.0;
  (%361,)
}

def @func_4911(%var_4903: Tensor[(10, 2, 5), uint8]) -> Tensor[(10, 2, 5), uint8] {
  %362 = cast(%var_4903, dtype="uint8") /* ty=Tensor[(10, 2, 5), uint8] */;
  %363 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(10, 2, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 2, 5), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 5), uint8] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  add(%364, %365) /* ty=Tensor[(10, 2, 5), uint8] */
}

def @func_4030() -> (Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) {
  %366 = cast(meta[relay.Constant][26] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %367 = cast(meta[relay.Constant][27] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %368 = reshape(%366, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float64] */;
  %369 = reshape(%367, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %370 = @func_290(%368, %369) /* ty=(Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(6, 4, 8), uint32], Tensor[(6, 4, 8), float32]) */;
  %371 = @func_2919() /* ty=Tensor[(3, 8, 12), float32] */;
  %372 = %370.1;
  (%371, %372, meta[relay.Constant][26] /* ty=Tensor[(192), float64] */, meta[relay.Constant][27] /* ty=Tensor[(1680), float32] */)
}

def @func_8984() -> (Tensor[(3, 8, 12), float32], Tensor[(1, 3, 15), float64], Tensor[(70, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) {
  %373 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %374 = cast(meta[relay.Constant][28] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
  %375 = reshape(%374, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), float32] */;
  %376 = @func_6983(%375) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(360), float64], Tensor[(5, 7, 4), uint8]) */;
  %377 = @func_7607() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) */;
  %378 = @func_7664() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %379 = @func_6049() /* ty=(Tensor[(320), int64],) */;
  %380 = %373.0;
  %381 = %376.0;
  %382 = %377.1;
  %383 = %378.0;
  %384 = %379.0;
  (%380, %381, meta[relay.Constant][28] /* ty=Tensor[(70, 2), float32] */, %382, %383, %384)
}

def @func_13022() -> Tensor[(3, 8, 12), float32] {
  %385 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %385.0
}

def @func_11117() -> (Tensor[(16, 16, 6), float64],) {
  %386 = @func_5880() /* ty=Tensor[(16, 16, 6), float64] */;
  (%386,)
}

def @func_2897(%var_2890: Tensor[(8, 3, 15), float64]) -> (Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) {
  %387 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 3, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %388 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 3, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %389 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 3, 15), float64] */, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %390 = cast(%var_2890, dtype="bool") /* ty=Tensor[(8, 3, 15), bool] */;
  %391 = atanh(%387) /* ty=Tensor[(1, 3, 15), float64] */;
  %392 = sqrt(%388) /* ty=Tensor[(1, 3, 15), float64] */;
  %393 = logical_and(%389, %390) /* ty=Tensor[(8, 3, 15), bool] */;
  (%391, %392, %393)
}

def @func_13047() -> Tensor[(16, 16, 6), float64] {
  %394 = @func_7212() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %394.0
}

def @func_12908() -> Tensor[(3, 8, 12), float32] {
  %395 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %395.0
}

def @func_9813() -> Tensor[(16, 16, 6), float32] {
  %396 = @func_9639() /* ty=Tensor[(16, 16, 6), float64] */;
  %397 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 16, 6), float64] */, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%396, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%399, %400) /* ty=Tensor[(16, 16, 6), float32] */
}

def @func_2559(%var_2552: Tensor[(630), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(1680), float32], Tensor[(15, 16, 7), int16], Tensor[(15, 16, 7), bool], Tensor[(630), uint32]) {
  %401 = cast(meta[relay.Constant][31] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %402 = reshape(%401, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
  %403 = @func_91(%402) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */;
  %404 = %403.0;
  %405 = cast(%404, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %406 = sinh(%405) /* ty=Tensor[(15, 16, 7), float64] */;
  %407 = cast(%406, dtype="int16") /* ty=Tensor[(15, 16, 7), int16] */;
  %408 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%404, dtype="int16") /* ty=Tensor[(15, 16, 7), int16] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %411 = cast(%var_2552, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %412 = reshape(%411, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint32] */;
  %413 = @func_484(%412) /* ty=(Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %414 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  %415 = subtract(%409, %410) /* ty=Tensor[(15, 16, 7), int16] */;
  %416 = %413.2;
  (%414, meta[relay.Constant][31] /* ty=Tensor[(1680), float32] */, %415, %416, %var_2552)
}

def @func_2715(%var_2691: Tensor[(4, 16, 5), int64], %var_2692: Tensor[(4, 16, 5), int64]) -> (Tensor[(4, 16, 5), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) {
  %417 = cast(%var_2692, dtype="int64") /* ty=Tensor[(4, 16, 5), int64] */;
  %418 = shape_of(%var_2691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%var_2691, dtype="int64") /* ty=Tensor[(4, 16, 5), int64] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %421 = logical_xor(%419, %420) /* ty=Tensor[(4, 16, 5), int64] */;
  %422 = cast(%421, dtype="float64") /* ty=Tensor[(4, 16, 5), float64] */;
  %423 = cast(meta[relay.Constant][32] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %424 = reshape(%423, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %425 = cos(%422) /* ty=Tensor[(4, 16, 5), float64] */;
  %426 = @func_1998(%424) /* ty=Tensor[(3, 8, 12), float32] */;
  (%425, %426, meta[relay.Constant][32] /* ty=Tensor[(288), float32] */)
}

def @func_3954() -> (Tensor[(16, 16, 6), float64],) {
  %427 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  (%427,)
}

def @func_11869() -> (Tensor[(16, 16, 6), float64],) {
  %428 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %429 = %428.0;
  (%429,)
}

def @func_12773() -> Tensor[(320), int64] {
  @func_12768() /* ty=Tensor[(320), int64] */
}

def @func_4178() -> (Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) {
  %430 = @func_4030() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */;
  %431 = @func_4051() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %432 = cast(meta[relay.Constant][33] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %433 = %430.3;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %435 = reshape(%432, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float64] */;
  %436 = reshape(%434, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %437 = @func_290(%435, %436) /* ty=(Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(6, 4, 8), uint32], Tensor[(6, 4, 8), float32]) */;
  %438 = %431.0;
  %439 = %437.2;
  (%433, %438, %439, meta[relay.Constant][33] /* ty=Tensor[(192), float64] */)
}

def @func_6683() -> (Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %440 = @func_5201() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %441 = cast(meta[relay.Constant][34] /* ty=Tensor[(100), uint8] */, dtype="uint8") /* ty=Tensor[(100), uint8] */;
  %442 = reshape(%441, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), uint8] */;
  %443 = cast(meta[relay.Constant][35] /* ty=Tensor[(675), float32] */, dtype="float32") /* ty=Tensor[(675), float32] */;
  %444 = reshape(%443, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), float32] */;
  %445 = @func_4911(%442) /* ty=Tensor[(10, 2, 5), uint8] */;
  %446 = cast(%445, dtype="uint8") /* ty=Tensor[(10, 2, 5), uint8] */;
  %447 = reshape(%446, newshape=[100]) /* ty=Tensor[(100), uint8] */;
  %448 = @func_6086(%447) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) */;
  %449 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %450 = @func_4879() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %451 = @func_3787() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %452 = %450.0;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %454 = reshape(%453, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %455 = %440.0;
  %456 = @func_5851(%444) /* ty=Tensor[(9, 5, 15), float32] */;
  %457 = %448.0;
  %458 = %449.2;
  %459 = %451.0;
  %460 = @func_1998(%454) /* ty=Tensor[(3, 8, 12), float32] */;
  (%455, %445, meta[relay.Constant][34] /* ty=Tensor[(100), uint8] */, %456, meta[relay.Constant][35] /* ty=Tensor[(675), float32] */, %457, %458, %452, %459, %460)
}

def @func_2501() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) {
  %461 = cast(meta[relay.Constant][36] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %462 = reshape(%461, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %463 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  %464 = @func_1998(%462) /* ty=Tensor[(3, 8, 12), float32] */;
  (%463, %464, meta[relay.Constant][36] /* ty=Tensor[(288), float32] */)
}

def @func_6297() -> (Tensor[(16, 16, 6), float64],) {
  %465 = @func_3787() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %466 = %465.0;
  (%466,)
}

def @func_12034(%var_11999: Tensor[(16, 16, 6), float64]) -> (Tensor[(16, 16, 6), int32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %467 = @func_5880() /* ty=Tensor[(16, 16, 6), float64] */;
  %468 = cast(%var_11999, dtype="int32") /* ty=Tensor[(16, 16, 6), int32] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="int32") /* ty=Tensor[(16, 16, 6), int32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %472 = @func_10271() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %473 = @func_4067() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %474 = maximum(%470, %471) /* ty=Tensor[(16, 16, 6), int32] */;
  %475 = %472.0;
  %476 = %473.0;
  %477 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %478 = @func_5376() /* ty=Tensor[(3, 8, 12), float32] */;
  (%474, %475, %476, %477, %478)
}

def @func_12216() -> (Tensor[(16, 16, 6), float64], Tensor[(1680), float32]) {
  %479 = @func_4704() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %480 = @func_4030() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */;
  %481 = %479.0;
  %482 = %480.3;
  (%481, %482)
}

def @func_10271() -> (Tensor[(3, 8, 12), float32],) {
  %483 = @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %484 = %483.1;
  (%484,)
}

def @func_8915(%var_8844: Tensor[(24, 14), float64], %var_8887: Tensor[(16, 16, 6), float64]) -> (Tensor[(144, 2), float32], Tensor[(630), uint32], Tensor[(24, 14), float32], Tensor[(16, 16, 6), int8], Tensor[(16, 16, 6), float64], Tensor[(24, 14), float32], Tensor[(16, 16, 6), float64]) {
  %485 = cast(%var_8844, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %486 = cast(meta[relay.Constant][37] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %487 = reshape(%485, newshape=[1, 336]) /* ty=Tensor[(1, 336), float64] */;
  %488 = reshape(%486, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %489 = @func_3557(%487, %488) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %490 = cast(%var_8844, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %491 = log2(%490) /* ty=Tensor[(24, 14), float64] */;
  %492 = cast(%491, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %493 = @func_4704() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %494 = %493.0;
  %495 = cast(%var_8887, dtype="int8") /* ty=Tensor[(16, 16, 6), int8] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="int8") /* ty=Tensor[(16, 16, 6), int8] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %499 = cast(%var_8844, dtype="bool") /* ty=Tensor[(24, 14), bool] */;
  %500 = shape_of(%491, dtype="int32") /* ty=Tensor[(2), int32] */;
  %501 = cast(%491, dtype="bool") /* ty=Tensor[(24, 14), bool] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %503 = less(%501, %502) /* ty=Tensor[(24, 14), bool] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %505 = %489.7;
  %506 = acos(%492) /* ty=Tensor[(24, 14), float32] */;
  %507 = subtract(%497, %498) /* ty=Tensor[(16, 16, 6), int8] */;
  %508 = @func_5332() /* ty=Tensor[(16, 16, 6), float64] */;
  %509 = sigmoid(%504) /* ty=Tensor[(24, 14), float32] */;
  %510 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  (%505, meta[relay.Constant][37] /* ty=Tensor[(630), uint32] */, %506, %507, %508, %509, %510)
}

def @func_9038(%var_9026: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), float64],) {
  %511 = cast(%var_9026, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %512 = exp(%511) /* ty=Tensor[(15, 2, 14), float64] */;
  (%512,)
}

def @func_9143() -> Tensor[(320), int64] {
  %513 = @func_6049() /* ty=(Tensor[(320), int64],) */;
  %513.0
}

def @func_9639() -> Tensor[(16, 16, 6), float64] {
  %514 = @func_5201() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %514.1
}

def @func_9473() -> (Tensor[(16, 16, 6), float64], Tensor[(192), float64]) {
  %515 = @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %516 = %515.0;
  %517 = @func_8204() /* ty=Tensor[(192), float64] */;
  (%516, %517)
}

def @func_9885() -> Tensor[(16, 16, 6), float64] {
  %518 = @func_2501() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %518.0
}

def @func_11312(%var_11307: Tensor[(2, 1056), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(2, 1056), bool]) {
  %519 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %520 = cast(%var_11307, dtype="bool") /* ty=Tensor[(2, 1056), bool] */;
  %521 = reshape(%520, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), bool] */;
  %522 = %519.0;
  %523 = @func_2207(%521) /* ty=Tensor[(12, 11, 16), bool] */;
  (%522, %523, %var_11307)
}

def @func_6760() -> (Tensor[(3, 8, 12), float32],) {
  %524 = @func_5376() /* ty=Tensor[(3, 8, 12), float32] */;
  (%524,)
}

def @func_12488() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  %525 = @func_11410() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */;
  %526 = @func_2686() /* ty=Tensor[(3, 8, 12), float32] */;
  %527 = %525.1;
  (%526, %527)
}

def @func_11030() -> Tensor[(16, 16, 6), float64] {
  %528 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %528.0
}

def @func_5813(%var_5798: Tensor[(3, 8, 12), float32]) -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), uint8], Tensor[(3, 8, 12), float32]) {
  %529 = @func_4178() /* ty=(Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %530 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %531 = @func_2758() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %532 = %531.1;
  %533 = cast(%var_5798, dtype="uint8") /* ty=Tensor[(3, 8, 12), uint8] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="uint8") /* ty=Tensor[(3, 8, 12), uint8] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %537 = @func_5677() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %538 = %529.1;
  %539 = %530.0;
  %540 = bitwise_xor(%535, %536) /* ty=Tensor[(3, 8, 12), uint8] */;
  %541 = %537.0;
  (%538, %539, %540, %541)
}

def @func_6983(%var_6976: Tensor[(5, 7, 4), float32]) -> (Tensor[(1, 3, 15), float64], Tensor[(360), float64], Tensor[(5, 7, 4), uint8]) {
  %542 = cast(meta[relay.Constant][38] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %543 = reshape(%542, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
  %544 = @func_2897(%543) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) */;
  %545 = @func_5924() /* ty=(Tensor[(192), float64], Tensor[(3, 8, 12), float32], Tensor[(5, 7, 4), float32]) */;
  %546 = %545.2;
  %547 = cast(%var_6976, dtype="uint8") /* ty=Tensor[(5, 7, 4), uint8] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="uint8") /* ty=Tensor[(5, 7, 4), uint8] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %551 = %544.1;
  %552 = minimum(%549, %550) /* ty=Tensor[(5, 7, 4), uint8] */;
  (%551, meta[relay.Constant][38] /* ty=Tensor[(360), float64] */, %552)
}

def @func_2919() -> Tensor[(3, 8, 12), float32] {
  @func_2686() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_9195(%var_9186: Tensor[(336, 1), float64], %var_9187: Tensor[(10, 63), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(336, 1), float64], Tensor[(10, 63), uint32], Tensor[(3, 8, 12), float32]) {
  %553 = @func_6297() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %554 = cast(%var_9186, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %555 = cast(%var_9187, dtype="uint32") /* ty=Tensor[(10, 63), uint32] */;
  %556 = reshape(%554, newshape=[1, 336]) /* ty=Tensor[(1, 336), float64] */;
  %557 = reshape(%555, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %558 = @func_3557(%556, %557) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %559 = @func_7664() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %560 = %553.0;
  %561 = %558.9;
  %562 = %559.0;
  (%560, %561, %var_9186, %var_9187, %562)
}

def @func_4531(%var_4484: Tensor[(16, 16, 6), float64], %var_4503: Tensor[(336), float64], %var_4526: Tensor[(1, 33), int32]) -> (Tensor[(6, 14, 4), float64], Tensor[(336), float64], Tensor[(16, 16, 6), uint16], Tensor[(33), int32], Tensor[(1, 33), int32], Tensor[(264), int32]) {
  %563 = cast(%var_4503, dtype="float64") /* ty=Tensor[(336), float64] */;
  %564 = cast(%var_4503, dtype="float64") /* ty=Tensor[(336), float64] */;
  %565 = reshape(%563, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
  %566 = reshape(%564, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
  %567 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %568 = cast(%var_4484, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %572 = mod(%570, %571) /* ty=Tensor[(16, 16, 6), float64] */;
  %573 = cast(%var_4484, dtype="uint16") /* ty=Tensor[(16, 16, 6), uint16] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%572, dtype="uint16") /* ty=Tensor[(16, 16, 6), uint16] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %577 = cast(%var_4526, dtype="int32") /* ty=Tensor[(1, 33), int32] */;
  %578 = cast(meta[relay.Constant][39] /* ty=Tensor[(264), int32] */, dtype="int32") /* ty=Tensor[(264), int32] */;
  %579 = reshape(%577, newshape=[33]) /* ty=Tensor[(33), int32] */;
  %580 = reshape(%578, newshape=[264]) /* ty=Tensor[(264), int32] */;
  %581 = @func_2835(%579, %580) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) */;
  %582 = @func_2266(%565, %566) /* ty=Tensor[(6, 14, 4), float64] */;
  %583 = right_shift(%575, %576) /* ty=Tensor[(16, 16, 6), uint16] */;
  %584 = %581.2;
  (%582, %var_4503, %583, %584, %var_4526, meta[relay.Constant][39] /* ty=Tensor[(264), int32] */)
}

def @func_10580() -> (Tensor[(630), uint32],) {
  %585 = @func_5639() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(14, 9, 5), bool], Tensor[(630), uint32], Tensor[(11, 5, 13), float64]) */;
  %586 = %585.3;
  (%586,)
}

def @func_11679(%var_11674: Tensor[(715), float64]) -> (Tensor[(715), uint64],) {
  %587 = @func_5313() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) */;
  %588 = %587.1;
  %589 = cast(%var_11674, dtype="uint64") /* ty=Tensor[(715), uint64] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(1), int32] */;
  %591 = cast(%588, dtype="uint64") /* ty=Tensor[(715), uint64] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %593 = bitwise_xor(%591, %592) /* ty=Tensor[(715), uint64] */;
  (%593,)
}

def @func_10623(%var_10606: int16) -> (Tensor[(2, 4, 10), float64],) {
  %594 = cast(%var_10606, dtype="bool") /* ty=bool */;
  %595 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 4, 10), int16] */, dtype="bool") /* ty=Tensor[(2, 4, 10), bool] */;
  %596 = equal(%594, %595) /* ty=Tensor[(2, 4, 10), bool] */;
  %597 = cast(%var_10606, dtype="float64") /* ty=float64 */;
  %598 = cast(%596, dtype="float64") /* ty=Tensor[(2, 4, 10), float64] */;
  %599 = floor_divide(%597, %598) /* ty=Tensor[(2, 4, 10), float64] */;
  (%599,)
}

def @func_11104() -> Tensor[(3, 8, 12), float32] {
  %600 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %600.0
}

def @func_5201() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %601 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %602 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %603 = %601.0;
  %604 = %602.0;
  (%603, %604)
}

def @func_8309(%var_8280: Tensor[(12, 9, 14), float32]) -> (Tensor[(12, 9, 14), bool], Tensor[(3, 8, 12), float32]) {
  %605 = cast(%var_8280, dtype="bool") /* ty=Tensor[(12, 9, 14), bool] */;
  %606 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(12, 9, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(12, 9, 14), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %609 = @func_6760() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %610 = greater_equal(%607, %608) /* ty=Tensor[(12, 9, 14), bool] */;
  %611 = %609.0;
  (%610, %611)
}

def @func_9894() -> (Tensor[(3, 8, 12), float32],) {
  %612 = @func_8267() /* ty=Tensor[(3, 8, 12), float32] */;
  (%612,)
}

def @func_11136(%var_11126: Tensor[(4, 5, 5), float64]) -> (Tensor[(4, 5, 5), float64], Tensor[(4, 5, 5), float32]) {
  %613 = cast(%var_11126, dtype="float64") /* ty=Tensor[(4, 5, 5), float64] */;
  %614 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 5, 5), float64] */, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %615 = shape_of(%var_11126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%var_11126, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %618 = cosh(%613) /* ty=Tensor[(4, 5, 5), float64] */;
  %619 = floor_divide(%616, %617) /* ty=Tensor[(4, 5, 5), float32] */;
  (%618, %619)
}

def @func_3643() -> Tensor[(3, 8, 12), float32] {
  %620 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %621 = %620.0;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  atan(%622) /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_10023(%var_9927: Tensor[(132, 16), bool], %var_10012: Tensor[(2, 180), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(132, 16), bool], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(9, 16, ?), uint8], Tensor[(16, 16, 6), float64], Tensor[(11, 5, 13), float64], Tensor[(715), float64], Tensor[(8, 3, 15), bool], Tensor[(2, 180), float64]) {
  %623 = @func_6683() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %624 = cast(%var_9927, dtype="bool") /* ty=Tensor[(132, 16), bool] */;
  %625 = reshape(%624, newshape=[528, 4]) /* ty=Tensor[(528, 4), bool] */;
  %626 = @func_3754(%625) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */;
  %627 = @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %628 = @func_5572() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %629 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %630 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 16, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 16, 1), float32] */;
  %631 = erf(%630) /* ty=Tensor[(9, 16, 1), float32] */;
  %632 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 16, 1), float32] */, dtype="uint8") /* ty=Tensor[(9, 16, 1), uint8] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="uint8") /* ty=Tensor[(9, 16, 1), uint8] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %636 = @func_7212() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %637 = cast(meta[relay.Constant][44] /* ty=Tensor[(715), float64] */, dtype="float64") /* ty=Tensor[(715), float64] */;
  %638 = reshape(%637, newshape=[11, 5, 13]) /* ty=Tensor[(11, 5, 13), float64] */;
  %639 = cast(%var_10012, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %640 = reshape(%639, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
  %641 = @func_2897(%640) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) */;
  %642 = %623.7;
  %643 = %626.4;
  %644 = %627.0;
  %645 = %628.2;
  %646 = %629.0;
  %647 = left_shift(%634, %635) /* ty=Tensor[(9, 16, ?), uint8] */;
  %648 = %636.0;
  %649 = @func_4618(%638) /* ty=Tensor[(11, 5, 13), float64] */;
  %650 = %641.2;
  (%642, %643, %var_9927, %644, %645, %646, %647, %648, %649, meta[relay.Constant][44] /* ty=Tensor[(715), float64] */, %650, %var_10012)
}

def @func_3754(%var_3684: Tensor[(528, 4), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) {
  %651 = cast(%var_3684, dtype="bool") /* ty=Tensor[(528, 4), bool] */;
  %652 = reshape(%651, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), bool] */;
  %653 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 126), uint32] */, dtype="uint32") /* ty=Tensor[(5, 126), uint32] */;
  %654 = reshape(%653, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %655 = @func_2559(%654) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(1680), float32], Tensor[(15, 16, 7), int16], Tensor[(15, 16, 7), bool], Tensor[(630), uint32]) */;
  %656 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %657 = @func_3585() /* ty=Tensor[(3, 8, 12), float32] */;
  %658 = cast(%657, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %659 = reshape(%658, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %660 = cast(%var_3684, dtype="float64") /* ty=Tensor[(528, 4), float64] */;
  %661 = sqrt(%660) /* ty=Tensor[(528, 4), float64] */;
  %662 = cast(%var_3684, dtype="float64") /* ty=Tensor[(528, 4), float64] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(2), int32] */;
  %664 = cast(%661, dtype="float64") /* ty=Tensor[(528, 4), float64] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %666 = cast(%661, dtype="float64") /* ty=Tensor[(528, 4), float64] */;
  %667 = cast(%661, dtype="float32") /* ty=Tensor[(528, 4), float32] */;
  %668 = @func_3074() /* ty=Tensor[(16, 16, 6), float64] */;
  %669 = @func_2207(%652) /* ty=Tensor[(12, 11, 16), bool] */;
  %670 = %655.1;
  %671 = %656.0;
  %672 = @func_1998(%659) /* ty=Tensor[(3, 8, 12), float32] */;
  %673 = power(%664, %665) /* ty=Tensor[(528, 4), float64] */;
  %674 = cosh(%666) /* ty=Tensor[(528, 4), float64] */;
  %675 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %676 = asinh(%667) /* ty=Tensor[(528, 4), float32] */;
  (%668, %669, %670, meta[relay.Constant][45] /* ty=Tensor[(5, 126), uint32] */, %671, %657, %672, %673, %674, %675, %676)
}

def @func_4829() -> (Tensor[(3, 8, 12), float32],) {
  %677 = @func_2919() /* ty=Tensor[(3, 8, 12), float32] */;
  (%677,)
}

def @func_3074() -> Tensor[(16, 16, 6), float64] {
  @func_2461() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_10175() -> Tensor[(3, 8, 12), float32] {
  %678 = @func_7607() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) */;
  %678.2
}

def @func_11417() -> (Tensor[(3, 8, 12), float32],) {
  %679 = @func_8049() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %680 = %679.1;
  (%680,)
}

def @func_4391(%var_4337: Tensor[(16, 16, 6), float64], %var_4376: Tensor[(16, 16, 6), float64]) -> (Tensor[(16, 16, 6), uint16], Tensor[(16, 16, 6), float32], Tensor[(16, 16, 6), float64]) {
  %681 = @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %682 = %681.0;
  %683 = cast(%var_4337, dtype="uint16") /* ty=Tensor[(16, 16, 6), uint16] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%682, dtype="uint16") /* ty=Tensor[(16, 16, 6), uint16] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %687 = cast(%var_4376, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
  %688 = shape_of(%var_4337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%var_4337, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %691 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %692 = logical_xor(%685, %686) /* ty=Tensor[(16, 16, 6), uint16] */;
  %693 = divide(%689, %690) /* ty=Tensor[(16, 16, 6), float32] */;
  %694 = %691.0;
  (%692, %693, %694)
}

def @func_5376() -> Tensor[(3, 8, 12), float32] {
  @func_3643() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_12863() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %695 = @func_7212() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %696 = @func_11117() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %697 = %695.0;
  %698 = %696.0;
  (%697, %698)
}

def @func_2758() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) {
  %699 = @func_2501() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %700 = cast(meta[relay.Constant][46] /* ty=Tensor[(320), int64] */, dtype="int64") /* ty=Tensor[(320), int64] */;
  %701 = cast(meta[relay.Constant][46] /* ty=Tensor[(320), int64] */, dtype="int64") /* ty=Tensor[(320), int64] */;
  %702 = reshape(%700, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
  %703 = reshape(%701, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
  %704 = @func_2715(%702, %703) /* ty=(Tensor[(4, 16, 5), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %705 = %699.0;
  %706 = @func_2686() /* ty=Tensor[(3, 8, 12), float32] */;
  %707 = %704.1;
  (%705, %706, %707, meta[relay.Constant][46] /* ty=Tensor[(320), int64] */)
}

def @func_7503(%var_7484: Tensor[(1536), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64]) {
  %708 = @func_6683() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %709 = cast(%var_7484, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %710 = cast(%var_7484, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %711 = reshape(%709, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
  %712 = reshape(%710, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
  %713 = @func_4391(%711, %712) /* ty=(Tensor[(16, 16, 6), uint16], Tensor[(16, 16, 6), float32], Tensor[(16, 16, 6), float64]) */;
  %714 = %708.7;
  %715 = %713.0;
  (%714, %715, %var_7484)
}

def @func_8204() -> Tensor[(192), float64] {
  %716 = @func_4030() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */;
  %716.2
}

def @func_7212() -> (Tensor[(16, 16, 6), float64],) {
  %717 = @func_6006() /* ty=Tensor[(16, 16, 6), float64] */;
  (%717,)
}

def @func_5158(%var_5151: Tensor[(630), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(2, 840), float32], Tensor[(630), uint32]) {
  %718 = cast(%var_5151, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %719 = reshape(%718, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint32] */;
  %720 = @func_484(%719) /* ty=(Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %721 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %722 = %720.3;
  (%721, %722, %var_5151)
}

def @func_10812() -> (Tensor[(16, 16, 6), float64],) {
  %723 = @func_4704() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %724 = %723.0;
  (%724,)
}

def @func_8833() -> (Tensor[(16, 16, 6), float64],) {
  %725 = @func_2652() /* ty=Tensor[(16, 16, 6), float64] */;
  (%725,)
}

def @func_3144() -> (Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) {
  %726 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %727 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %728 = reshape(%726, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
  %729 = reshape(%727, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
  %730 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  %731 = @func_2266(%728, %729) /* ty=Tensor[(6, 14, 4), float64] */;
  (%730, %731, meta[relay.Constant][47] /* ty=Tensor[(336), float64] */)
}

def @func_10710() -> Tensor[(3, 8, 12), float32] {
  @func_9759() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_4768(%var_4718: Tensor[(2, 15, 6), float64]) -> (Tensor[(2, 15, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(630), uint32], Tensor[(192), float64]) {
  %732 = cast(%var_4718, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %733 = @func_4704() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %734 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 336), float64] */, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %735 = cast(meta[relay.Constant][49] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %736 = reshape(%734, newshape=[1, 336]) /* ty=Tensor[(1, 336), float64] */;
  %737 = reshape(%735, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %738 = @func_3557(%736, %737) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %739 = cast(meta[relay.Constant][49] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %740 = reshape(%739, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint32] */;
  %741 = @func_484(%740) /* ty=(Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %742 = cos(%732) /* ty=Tensor[(2, 15, 6), float64] */;
  %743 = %733.0;
  %744 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %745 = @func_3222() /* ty=Tensor[(16, 16, 6), float64] */;
  %746 = %738.1;
  %747 = %741.6;
  (%742, %743, %744, %745, %746, meta[relay.Constant][48] /* ty=Tensor[(1, 336), float64] */, meta[relay.Constant][49] /* ty=Tensor[(630), uint32] */, %747)
}

def @func_5593() -> (Tensor[(5, 7, 4), float32],) {
  %748 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 7, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 4), float32] */;
  %749 = rsqrt(%748) /* ty=Tensor[(5, 7, 4), float32] */;
  (%749,)
}

def @func_8766() -> (Tensor[(16, 16, 6), float32],) {
  %750 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %751 = %750.0;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
  %753 = sinh(%752) /* ty=Tensor[(16, 16, 6), float32] */;
  (%753,)
}

def @func_10424(%var_10390: Tensor[(16, 16, 6), float64], %var_10418: Tensor[(2112), bool], %var_10419: Tensor[(360), float64]) -> (Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint64], Tensor[(8, 3, 15), bool], Tensor[(2112), bool], Tensor[(360), float64]) {
  %754 = @func_5038() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) */;
  %755 = @func_5677() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %756 = @func_6442() /* ty=(Tensor[(5, 7, 4), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */;
  %757 = %756.2;
  %758 = cast(%var_10390, dtype="uint64") /* ty=Tensor[(16, 16, 6), uint64] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="uint64") /* ty=Tensor[(16, 16, 6), uint64] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %762 = cast(%var_10418, dtype="bool") /* ty=Tensor[(2112), bool] */;
  %763 = cast(%var_10419, dtype="float64") /* ty=Tensor[(360), float64] */;
  %764 = reshape(%762, newshape=[132, 16]) /* ty=Tensor[(132, 16), bool] */;
  %765 = reshape(%763, newshape=[2, 180]) /* ty=Tensor[(2, 180), float64] */;
  %766 = @func_10023(%764, %765) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(132, 16), bool], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(9, 16, ?), uint8], Tensor[(16, 16, 6), float64], Tensor[(11, 5, 13), float64], Tensor[(715), float64], Tensor[(8, 3, 15), bool], Tensor[(2, 180), float64]) */;
  %767 = @func_9143() /* ty=Tensor[(320), int64] */;
  %768 = %754.0;
  %769 = %755.1;
  %770 = bitwise_and(%760, %761) /* ty=Tensor[(16, 16, 6), uint64] */;
  %771 = %766.10;
  (%767, %768, %769, %770, %771, %var_10418, %var_10419)
}

def @func_12167() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %772 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %773 = @func_2652() /* ty=Tensor[(16, 16, 6), float64] */;
  %774 = %772.0;
  (%773, %774)
}

def @func_7989(%var_7975: Tensor[(968), float32], %var_7978: Tensor[(33), int32]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(1536), float64], Tensor[(11, 8, 11), bool], Tensor[(968), float32], Tensor[(33), int32], Tensor[(33), int32], Tensor[(264), int32], Tensor[(3, 8, 12), float32]) {
  %775 = @func_4051() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %776 = %775.1;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %778 = reshape(%777, newshape=[1536]) /* ty=Tensor[(1536), float64] */;
  %779 = @func_7503(%778) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64]) */;
  %780 = cast(%var_7975, dtype="float32") /* ty=Tensor[(968), float32] */;
  %781 = cast(%var_7975, dtype="float32") /* ty=Tensor[(968), float32] */;
  %782 = cast(%var_7975, dtype="float32") /* ty=Tensor[(968), float32] */;
  %783 = reshape(%780, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
  %784 = reshape(%781, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
  %785 = reshape(%782, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
  %786 = @func_6270(%783, %784, %785) /* ty=(Tensor[(11, 8, 11), bool], Tensor[(11, 8, 11), float64]) */;
  %787 = cast(%var_7978, dtype="int32") /* ty=Tensor[(33), int32] */;
  %788 = cast(meta[relay.Constant][51] /* ty=Tensor[(264), int32] */, dtype="int32") /* ty=Tensor[(264), int32] */;
  %789 = reshape(%787, newshape=[33]) /* ty=Tensor[(33), int32] */;
  %790 = reshape(%788, newshape=[264]) /* ty=Tensor[(264), int32] */;
  %791 = @func_2835(%789, %790) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) */;
  %792 = @func_4961() /* ty=Tensor[(3, 8, 12), float32] */;
  %793 = %779.2;
  %794 = %786.0;
  %795 = %791.2;
  %796 = @func_2686() /* ty=Tensor[(3, 8, 12), float32] */;
  (%776, %792, %793, %794, %var_7975, %795, %var_7978, meta[relay.Constant][51] /* ty=Tensor[(264), int32] */, %796)
}

def @func_12644() -> (Tensor[(320), int64], Tensor[(16, 16, 6), float64], Tensor[(192), float64], Tensor[(16, 16, 6), float64], Tensor[(320), int64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %797 = @func_8394() /* ty=(Tensor[(192), float64],) */;
  %798 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %799 = @func_5572() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %800 = @func_6371() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(2112), bool]) */;
  %801 = @func_11970() /* ty=Tensor[(320), int64] */;
  %802 = @func_6110() /* ty=Tensor[(16, 16, 6), float64] */;
  %803 = %797.0;
  %804 = %798.0;
  %805 = @func_11970() /* ty=Tensor[(320), int64] */;
  %806 = %799.3;
  %807 = %800.1;
  (%801, %802, %803, %804, %805, %806, %807)
}

def @func_12768() -> Tensor[(320), int64] {
  @func_9143() /* ty=Tensor[(320), int64] */
}

def @func_8372() -> (Tensor[(16, 16, 6), float64],) {
  %808 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %809 = %808.0;
  %810 = cast(%809, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %811 = log(%810) /* ty=Tensor[(16, 16, 6), float64] */;
  (%811,)
}

def @func_10724() -> Tensor[(3, 8, 12), float32] {
  %812 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %812.0
}

def @func_10883(%var_10868: Tensor[(10, 11, 9), float32]) -> Tensor[(10, 11, 9), float32] {
  %813 = cast(%var_10868, dtype="float32") /* ty=Tensor[(10, 11, 9), float32] */;
  acos(%813) /* ty=Tensor[(10, 11, 9), float32] */
}

def @func_8627() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(100), uint8], Tensor[(16, 16, 6), float64]) {
  %814 = @func_5572() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %815 = @func_7243() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %816 = cast(meta[relay.Constant][52] /* ty=Tensor[(100), uint8] */, dtype="uint8") /* ty=Tensor[(100), uint8] */;
  %817 = reshape(%816, newshape=[100]) /* ty=Tensor[(100), uint8] */;
  %818 = @func_6086(%817) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) */;
  %819 = @func_6297() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %820 = %814.0;
  %821 = %815.0;
  %822 = %818.5;
  %823 = %819.0;
  (%820, %821, %822, meta[relay.Constant][52] /* ty=Tensor[(100), uint8] */, %823)
}

def @func_4139(%var_4134: Tensor[(13, 6, 13), float32]) -> Tensor[(13, 6, 13), float32] {
  %824 = cast(%var_4134, dtype="float32") /* ty=Tensor[(13, 6, 13), float32] */;
  log(%824) /* ty=Tensor[(13, 6, 13), float32] */
}

def @func_2596(%var_2588: Tensor[(3, 1, 11), int32], %var_2589: Tensor[(3, 8, 11), int32]) -> Tensor[(3, 8, 11), bool] {
  %825 = cast(%var_2588, dtype="bool") /* ty=Tensor[(3, 1, 11), bool] */;
  %826 = cast(%var_2589, dtype="bool") /* ty=Tensor[(3, 8, 11), bool] */;
  less(%825, %826) /* ty=Tensor[(3, 8, 11), bool] */
}

def @func_9267(%var_9264: Tensor[(9, 6, 16), float32]) -> (Tensor[(9, 6, 16), float32],) {
  %827 = cast(%var_9264, dtype="float32") /* ty=Tensor[(9, 6, 16), float32] */;
  %828 = cos(%827) /* ty=Tensor[(9, 6, 16), float32] */;
  (%828,)
}

def @func_3465() -> (Tensor[(16, 16, 6), float64],) {
  %829 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  (%829,)
}

def @func_6270(%var_6239: Tensor[(11, 8, 11), float32], %var_6240: Tensor[(11, 8, 11), float32], %var_6246: Tensor[(11, 8, 11), float32]) -> (Tensor[(11, 8, 11), bool], Tensor[(11, 8, 11), float64]) {
  %830 = cast(%var_6240, dtype="bool") /* ty=Tensor[(11, 8, 11), bool] */;
  %831 = shape_of(%var_6239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%var_6239, dtype="bool") /* ty=Tensor[(11, 8, 11), bool] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %834 = cast(%var_6246, dtype="float64") /* ty=Tensor[(11, 8, 11), float64] */;
  %835 = shape_of(%var_6239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%var_6239, dtype="float64") /* ty=Tensor[(11, 8, 11), float64] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %838 = greater(%832, %833) /* ty=Tensor[(11, 8, 11), bool] */;
  %839 = floor_mod(%836, %837) /* ty=Tensor[(11, 8, 11), float64] */;
  (%838, %839)
}

def @func_9403() -> (Tensor[(16, 16, 6), float64],) {
  %840 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %841 = %840.0;
  (%841,)
}

def @func_10312() -> (Tensor[(3, 8, 12), float32],) {
  %842 = @func_7243() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %843 = %842.0;
  (%843,)
}

def @func_2207(%var_2201: Tensor[(12, 11, 16), bool]) -> Tensor[(12, 11, 16), bool] {
  %844 = cast(%var_2201, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
  %845 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(12, 11, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(meta[relay.Constant][53] /* ty=Tensor[(12, 11, 16), bool] */, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%846, %847) /* ty=Tensor[(12, 11, 16), bool] */
}

def @func_12399(%var_12391: Tensor[(1, 1536), float64]) -> (Tensor[(630), uint32], Tensor[(33), int32], Tensor[(1, 1536), float64], Tensor[(33), int32], Tensor[(16, 16, 6), float64]) {
  %848 = @func_10580() /* ty=(Tensor[(630), uint32],) */;
  %849 = cast(%var_12391, dtype="float64") /* ty=Tensor[(1, 1536), float64] */;
  %850 = cast(meta[relay.Constant][54] /* ty=Tensor[(33), int32] */, dtype="int32") /* ty=Tensor[(33), int32] */;
  %851 = reshape(%849, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
  %852 = reshape(%850, newshape=[33]) /* ty=Tensor[(33), int32] */;
  %853 = @func_8547(%851, %852) /* ty=(Tensor[(16, 16, 6), bool], Tensor[(33), int32], Tensor[(33), int32], Tensor[(6, 44), int32], Tensor[(16, 16, 6), float64]) */;
  %854 = @func_12216() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(1680), float32]) */;
  %855 = %848.0;
  %856 = %853.1;
  %857 = %854.0;
  (%855, %856, %var_12391, meta[relay.Constant][54] /* ty=Tensor[(33), int32] */, %857)
}

def @func_3202() -> (Tensor[(16, 16, 6), float64],) {
  %858 = @func_3144() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) */;
  %859 = %858.0;
  (%859,)
}

def @func_10547() -> (Tensor[(15, 6, 1), float64],) {
  %860 = cast(meta[relay.Constant][55] /* ty=Tensor[(15, 6, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 6, 1), float64] */;
  %861 = asin(%860) /* ty=Tensor[(15, 6, 1), float64] */;
  (%861,)
}

def @func_7074() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  %862 = @func_6683() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %863 = @func_4067() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %864 = %862.9;
  %865 = %863.0;
  (%864, %865)
}

def @func_3787() -> (Tensor[(16, 16, 6), float64],) {
  %866 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  (%866,)
}

def @func_4879() -> (Tensor[(3, 8, 12), float32],) {
  %867 = @func_2501() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %868 = %867.1;
  (%868,)
}

def @func_9759() -> Tensor[(3, 8, 12), float32] {
  @func_5376() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_5677() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  %869 = @func_4067() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %870 = %869.0;
  %871 = @func_3643() /* ty=Tensor[(3, 8, 12), float32] */;
  (%870, %871)
}

def @func_4704() -> (Tensor[(16, 16, 6), float64],) {
  %872 = @func_3222() /* ty=Tensor[(16, 16, 6), float64] */;
  (%872,)
}

def @func_12431(%var_12420: uint8, %var_12421: Tensor[(1, 2, 13), uint8], %var_12428: Tensor[(264), int32]) -> (Tensor[(1, 2, 13), bool], Tensor[(3, 8, 11), bool], Tensor[(11, 3), int32], Tensor[(264), int32]) {
  %873 = cast(%var_12420, dtype="bool") /* ty=bool */;
  %874 = cast(%var_12421, dtype="bool") /* ty=Tensor[(1, 2, 13), bool] */;
  %875 = cast(meta[relay.Constant][56] /* ty=Tensor[(11, 3), int32] */, dtype="int32") /* ty=Tensor[(11, 3), int32] */;
  %876 = cast(%var_12428, dtype="int32") /* ty=Tensor[(264), int32] */;
  %877 = reshape(%875, newshape=[33]) /* ty=Tensor[(33), int32] */;
  %878 = reshape(%876, newshape=[264]) /* ty=Tensor[(264), int32] */;
  %879 = @func_2835(%877, %878) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) */;
  %880 = greater_equal(%873, %874) /* ty=Tensor[(1, 2, 13), bool] */;
  %881 = %879.1;
  (%880, %881, meta[relay.Constant][56] /* ty=Tensor[(11, 3), int32] */, %var_12428)
}

def @func_8433() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %882 = @func_3074() /* ty=Tensor[(16, 16, 6), float64] */;
  %883 = @func_5376() /* ty=Tensor[(3, 8, 12), float32] */;
  (%882, %883)
}

def @func_11048(%var_11040: uint32) -> (Tensor[(1, 5, 8), uint32],) {
  %884 = cast(%var_11040, dtype="uint32") /* ty=uint32 */;
  %885 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 5, 8), uint32] */, dtype="uint32") /* ty=Tensor[(1, 5, 8), uint32] */;
  %886 = bitwise_xor(%884, %885) /* ty=Tensor[(1, 5, 8), uint32] */;
  (%886,)
}

def @func_5038() -> (Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) {
  %887 = @func_4829() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %888 = cast(meta[relay.Constant][58] /* ty=Tensor[(715), float64] */, dtype="float64") /* ty=Tensor[(715), float64] */;
  %889 = reshape(%888, newshape=[11, 5, 13]) /* ty=Tensor[(11, 5, 13), float64] */;
  %890 = %887.0;
  %891 = @func_4618(%889) /* ty=Tensor[(11, 5, 13), float64] */;
  (%890, %891, meta[relay.Constant][58] /* ty=Tensor[(715), float64] */)
}

def @func_6006() -> Tensor[(16, 16, 6), float64] {
  %892 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %892.0
}

def @func_7607() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) {
  %893 = @func_6188() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */;
  %894 = @func_6371() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(2112), bool]) */;
  %895 = cast(meta[relay.Constant][59] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %896 = reshape(%895, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float64] */;
  %897 = @func_6419(%896) /* ty=(Tensor[(10, 13, 12), float64],) */;
  %898 = @func_5880() /* ty=Tensor[(16, 16, 6), float64] */;
  %899 = cast(%898, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %900 = cast(%898, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %901 = reshape(%899, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
  %902 = reshape(%900, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
  %903 = @func_4391(%901, %902) /* ty=(Tensor[(16, 16, 6), uint16], Tensor[(16, 16, 6), float32], Tensor[(16, 16, 6), float64]) */;
  %904 = %893.0;
  %905 = %894.0;
  %906 = %897.0;
  %907 = %903.2;
  (%898, %904, %905, %906, meta[relay.Constant][59] /* ty=Tensor[(1560), float64] */, %907)
}

def @func_9551(%var_9536: Tensor[(360), float64]) -> (Tensor[(16, 16, 6), float32], Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(8, 3, 15), bool], Tensor[(360), float64], Tensor[(528, 4), float32]) {
  %908 = @func_8766() /* ty=(Tensor[(16, 16, 6), float32],) */;
  %909 = cast(meta[relay.Constant][60] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %910 = reshape(%909, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
  %911 = @func_91(%910) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */;
  %912 = cast(%var_9536, dtype="float64") /* ty=Tensor[(360), float64] */;
  %913 = reshape(%912, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
  %914 = @func_2897(%913) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) */;
  %915 = @func_4279() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(528, 4), float32], Tensor[(2112), bool]) */;
  %916 = %908.0;
  %917 = %911.2;
  %918 = %914.2;
  %919 = %915.1;
  (%916, %917, meta[relay.Constant][60] /* ty=Tensor[(1680), float32] */, %918, %var_9536, %919)
}

def @func_4130(%var_4124: Tensor[(320), int64]) -> (Tensor[(16, 16, 6), float64], Tensor[(4, 16, 5), float64], Tensor[(320), int64], Tensor[(3, 8, 12), float32]) {
  %920 = @func_3770() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %921 = cast(%var_4124, dtype="int64") /* ty=Tensor[(320), int64] */;
  %922 = cast(%var_4124, dtype="int64") /* ty=Tensor[(320), int64] */;
  %923 = reshape(%921, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
  %924 = reshape(%922, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
  %925 = @func_2715(%923, %924) /* ty=(Tensor[(4, 16, 5), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %926 = %920.0;
  %927 = %925.0;
  %928 = @func_3585() /* ty=Tensor[(3, 8, 12), float32] */;
  (%926, %927, %var_4124, %928)
}

def @func_8782(%var_8774: Tensor[(3, 8, 12), float32]) -> Tensor[(3, 8, 12), bool] {
  %929 = @func_6760() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %930 = %929.0;
  %931 = cast(%var_8774, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
  %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%930, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%933, %934) /* ty=Tensor[(3, 8, 12), bool] */
}

def @func_10113(%var_10093: Tensor[(336), float64], %var_10094: Tensor[(32, 48), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(32, 48), float64], Tensor[(24, 14), uint8], Tensor[(16, 16, 6), float64]) {
  %935 = @func_7607() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) */;
  %936 = cast(%var_10093, dtype="float64") /* ty=Tensor[(336), float64] */;
  %937 = cast(%var_10094, dtype="float64") /* ty=Tensor[(32, 48), float64] */;
  %938 = reshape(%936, newshape=[24, 14]) /* ty=Tensor[(24, 14), float64] */;
  %939 = reshape(%937, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
  %940 = @func_8915(%938, %939) /* ty=(Tensor[(144, 2), float32], Tensor[(630), uint32], Tensor[(24, 14), float32], Tensor[(16, 16, 6), int8], Tensor[(16, 16, 6), float64], Tensor[(24, 14), float32], Tensor[(16, 16, 6), float64]) */;
  %941 = %940.2;
  %942 = cast(%941, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %943 = tan(%942) /* ty=Tensor[(24, 14), float32] */;
  %944 = cast(%var_10093, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %945 = shape_of(%943, dtype="int32") /* ty=Tensor[(2), int32] */;
  %946 = cast(%943, dtype="uint8") /* ty=Tensor[(24, 14), uint8] */;
  %947 = dyn.reshape(%944, %945, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %948 = @func_4178() /* ty=(Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %949 = %935.2;
  %950 = bitwise_or(%946, %947) /* ty=Tensor[(24, 14), uint8] */;
  %951 = %948.1;
  (%949, %var_10094, %950, %951)
}

def @main(%var_13269: float64, %var_13270: Tensor[(1, 14, 8), float64]) -> Tensor[(1, 14, 8), float64] {
  %952 = cast(%var_13269, dtype="float64") /* ty=float64 */;
  %953 = cast(%var_13270, dtype="float64") /* ty=Tensor[(1, 14, 8), float64] */;
  power(%952, %953) /* ty=Tensor[(1, 14, 8), float64] */
}

def @func_11766() -> (Tensor[(1680), float32], Tensor[(6, 14, 4), float64]) {
  %954 = @func_4030() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */;
  %955 = @func_5313() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) */;
  %956 = %954.1;
  %957 = %955.2;
  (%956, %957)
}

def @func_5313() -> (Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) {
  %958 = @func_5038() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) */;
  %959 = @func_3144() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) */;
  %960 = @func_3585() /* ty=Tensor[(3, 8, 12), float32] */;
  %961 = %958.2;
  %962 = %959.1;
  (%960, %961, %962)
}

def @func_6442() -> (Tensor[(5, 7, 4), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  %963 = @func_5593() /* ty=(Tensor[(5, 7, 4), float32],) */;
  %964 = @func_6297() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %965 = %963.0;
  %966 = @func_2919() /* ty=Tensor[(3, 8, 12), float32] */;
  %967 = %964.0;
  (%965, %966, %967)
}

def @func_4618(%var_4615: Tensor[(11, 5, 13), float64]) -> Tensor[(11, 5, 13), float64] {
  %968 = cast(%var_4615, dtype="float64") /* ty=Tensor[(11, 5, 13), float64] */;
  sqrt(%968) /* ty=Tensor[(11, 5, 13), float64] */
}

def @func_290(%var_258: Tensor[(6, 4, 8), float64], %var_264: Tensor[(1680), float32]) -> (Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(6, 4, 8), uint32], Tensor[(6, 4, 8), float32]) {
  %969 = cast(%var_264, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %970 = reshape(%969, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
  %971 = @func_91(%970) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */;
  %972 = cast(%var_258, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
  %973 = acosh(%972) /* ty=Tensor[(6, 4, 8), float32] */;
  %974 = cast(%973, dtype="float64") /* ty=Tensor[(6, 4, 8), float64] */;
  %975 = asinh(%974) /* ty=Tensor[(6, 4, 8), float64] */;
  %976 = cast(%973, dtype="uint32") /* ty=Tensor[(6, 4, 8), uint32] */;
  %977 = shape_of(%975, dtype="int32") /* ty=Tensor[(3), int32] */;
  %978 = cast(%975, dtype="uint32") /* ty=Tensor[(6, 4, 8), uint32] */;
  %979 = dyn.reshape(%976, %977, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %980 = cast(meta[relay.Constant][61] /* ty=Tensor[(6, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 4, 8), float64] */;
  %981 = shape_of(%var_258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %982 = cast(%var_258, dtype="float64") /* ty=Tensor[(6, 4, 8), float64] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %984 = mod(%982, %983) /* ty=Tensor[(6, 4, 8), float64] */;
  %985 = cast(%984, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
  %986 = %971.2;
  %987 = logical_xor(%978, %979) /* ty=Tensor[(6, 4, 8), uint32] */;
  %988 = log2(%985) /* ty=Tensor[(6, 4, 8), float32] */;
  (%986, %var_264, %987, %988)
}

def @func_7193() -> (Tensor[(9, 5, 15), float32], Tensor[(16, 16, 6), float64]) {
  %989 = @func_6683() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %990 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %991 = %989.3;
  %992 = %990.0;
  (%991, %992)
}

def @func_5332() -> Tensor[(16, 16, 6), float64] {
  %993 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %993.0
}

def @func_12718() -> (Tensor[(630), uint32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %994 = @func_10580() /* ty=(Tensor[(630), uint32],) */;
  %995 = %994.0;
  %996 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  %997 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  (%995, %996, %997)
}

def @func_3352() -> Tensor[(16, 16, 6), float64] {
  @func_2461() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_11376(%var_11358: Tensor[(16, 16, 6), float64]) -> (Tensor[(16, 16, 6), float64],) {
  %998 = @func_3491() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %999 = %998.1;
  %1000 = cast(%var_11358, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %1001 = shape_of(%999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1002 = cast(%999, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1004 = floor_mod(%1002, %1003) /* ty=Tensor[(16, 16, 6), float64] */;
  (%1004,)
}

def @func_7243() -> (Tensor[(3, 8, 12), float32],) {
  %1005 = @func_6760() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %1006 = %1005.0;
  (%1006,)
}

def @func_91(%var_8: Tensor[(15, 16, 7), float32]) -> (Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) {
  %1007 = cast(%var_8, dtype="float32") /* ty=Tensor[(15, 16, 7), float32] */;
  %1008 = exp(%1007) /* ty=Tensor[(15, 16, 7), float32] */;
  %1009 = cast(%1008, dtype="uint8") /* ty=Tensor[(15, 16, 7), uint8] */;
  %1010 = shape_of(%var_8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1011 = cast(%var_8, dtype="uint8") /* ty=Tensor[(15, 16, 7), uint8] */;
  %1012 = dyn.reshape(%1009, %1010, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1013 = left_shift(%1011, %1012) /* ty=Tensor[(15, 16, 7), uint8] */;
  %1014 = cast(%var_8, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
  %1015 = shape_of(%1013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1016 = cast(%1013, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
  %1017 = dyn.reshape(%1014, %1015, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1018 = cast(%var_8, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
  %1019 = shape_of(%1013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1020 = cast(%1013, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
  %1021 = dyn.reshape(%1018, %1019, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1022 = cast(%1013, dtype="int8") /* ty=Tensor[(15, 16, 7), int8] */;
  %1023 = shape_of(%var_8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1024 = cast(%var_8, dtype="int8") /* ty=Tensor[(15, 16, 7), int8] */;
  %1025 = dyn.reshape(%1022, %1023, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1026 = less_equal(%1016, %1017) /* ty=Tensor[(15, 16, 7), bool] */;
  %1027 = logical_and(%1020, %1021) /* ty=Tensor[(15, 16, 7), bool] */;
  %1028 = multiply(%1024, %1025) /* ty=Tensor[(15, 16, 7), int8] */;
  (%1026, %1027, %1028)
}

def @func_12823() -> (Tensor[(16, 16, 6), float64],) {
  %1029 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1030 = %1029.0;
  (%1030,)
}

def @func_5639() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(14, 9, 5), bool], Tensor[(630), uint32], Tensor[(11, 5, 13), float64]) {
  %1031 = @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1032 = cast(meta[relay.Constant][62] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %1033 = reshape(%1032, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint32] */;
  %1034 = @func_484(%1033) /* ty=(Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %1035 = @func_5038() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) */;
  %1036 = %1031.0;
  %1037 = @func_5332() /* ty=Tensor[(16, 16, 6), float64] */;
  %1038 = %1034.1;
  %1039 = %1035.1;
  (%1036, %1037, %1038, meta[relay.Constant][62] /* ty=Tensor[(630), uint32] */, %1039)
}

def @func_5924() -> (Tensor[(192), float64], Tensor[(3, 8, 12), float32], Tensor[(5, 7, 4), float32]) {
  %1040 = @func_4030() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */;
  %1041 = @func_5593() /* ty=(Tensor[(5, 7, 4), float32],) */;
  %1042 = %1040.2;
  %1043 = @func_4961() /* ty=Tensor[(3, 8, 12), float32] */;
  %1044 = %1041.0;
  (%1042, %1043, %1044)
}

def @func_12352() -> (Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(336), float64], Tensor[(630), uint32]) {
  %1045 = @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %1046 = cast(meta[relay.Constant][63] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %1047 = cast(meta[relay.Constant][64] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %1048 = reshape(%1046, newshape=[1, 336]) /* ty=Tensor[(1, 336), float64] */;
  %1049 = reshape(%1047, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %1050 = @func_3557(%1048, %1049) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %1051 = %1045.1;
  %1052 = %1050.7;
  (%1051, %1052, meta[relay.Constant][63] /* ty=Tensor[(336), float64] */, meta[relay.Constant][64] /* ty=Tensor[(630), uint32] */)
}

def @func_11942() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %1053 = @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1054 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %1055 = %1053.0;
  %1056 = %1054.0;
  (%1055, %1056)
}

def @func_9774() -> Tensor[(3, 8, 12), float32] {
  %1057 = @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %1057.1
}

def @func_12317(%var_12219: Tensor[(16, 7, 14), uint16], %var_12231: Tensor[(336), float64]) -> (Tensor[(16, 7, 14), uint16], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64], Tensor[(336), float64], Tensor[(33), int32], Tensor[(192), float64], Tensor[(715), float64], Tensor[(16, 7, 14), bool], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  %1058 = cast(meta[relay.Constant][65] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1059 = cast(%var_12219, dtype="uint16") /* ty=Tensor[(16, 7, 14), uint16] */;
  %1060 = cast(meta[relay.Constant][66] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %1061 = cast(%var_12231, dtype="float64") /* ty=Tensor[(336), float64] */;
  %1062 = cast(meta[relay.Constant][67] /* ty=Tensor[(33), int32] */, dtype="int32") /* ty=Tensor[(33), int32] */;
  %1063 = reshape(%1060, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
  %1064 = reshape(%1061, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %1065 = reshape(%1062, newshape=[1, 33]) /* ty=Tensor[(1, 33), int32] */;
  %1066 = @func_4531(%1063, %1064, %1065) /* ty=(Tensor[(6, 14, 4), float64], Tensor[(336), float64], Tensor[(16, 16, 6), uint16], Tensor[(33), int32], Tensor[(1, 33), int32], Tensor[(264), int32]) */;
  %1067 = @func_9103() /* ty=(Tensor[(192), float64],) */;
  %1068 = @func_5313() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) */;
  %1069 = cast(meta[relay.Constant][68] /* ty=Tensor[(16, 7, 14), uint16] */, dtype="bool") /* ty=Tensor[(16, 7, 14), bool] */;
  %1070 = shape_of(%var_12219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1071 = cast(%var_12219, dtype="bool") /* ty=Tensor[(16, 7, 14), bool] */;
  %1072 = dyn.reshape(%1069, %1070, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1073 = @func_7664() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %1074 = @func_10271() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %1075 = @func_8372() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1076 = subtract(%1058, %1059) /* ty=Tensor[(16, 7, 14), uint16] */;
  %1077 = %1066.2;
  %1078 = %1067.0;
  %1079 = %1068.1;
  %1080 = greater(%1071, %1072) /* ty=Tensor[(16, 7, 14), bool] */;
  %1081 = %1073.0;
  %1082 = %1074.0;
  %1083 = %1075.0;
  (%1076, %1077, meta[relay.Constant][66] /* ty=Tensor[(1536), float64] */, %var_12231, meta[relay.Constant][67] /* ty=Tensor[(33), int32] */, %1078, %1079, %1080, %1081, %1082, %1083)
}

def @func_10234(%var_10231: Tensor[(1, 360), float64]) -> (Tensor[(192), float64], Tensor[(715), float64], Tensor[(100), uint8], Tensor[(16, 16, 6), float64], Tensor[(1, 3, 15), float64], Tensor[(1, 360), float64]) {
  %1084 = @func_9103() /* ty=(Tensor[(192), float64],) */;
  %1085 = cast(meta[relay.Constant][69] /* ty=Tensor[(100), uint8] */, dtype="uint8") /* ty=Tensor[(100), uint8] */;
  %1086 = reshape(%1085, newshape=[100]) /* ty=Tensor[(100), uint8] */;
  %1087 = @func_6086(%1086) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) */;
  %1088 = @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %1089 = cast(%var_10231, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %1090 = reshape(%1089, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
  %1091 = @func_2897(%1090) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) */;
  %1092 = %1084.0;
  %1093 = %1087.5;
  %1094 = %1088.0;
  %1095 = %1091.0;
  (%1092, %1093, meta[relay.Constant][69] /* ty=Tensor[(100), uint8] */, %1094, %1095, %var_10231)
}

def @func_8049() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  %1096 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %1097 = @func_4961() /* ty=Tensor[(3, 8, 12), float32] */;
  %1098 = %1096.0;
  (%1097, %1098)
}

def @func_6110() -> Tensor[(16, 16, 6), float64] {
  %1099 = @func_3787() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1099.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10312() -> (Tensor[(3, 8, 12), float32],) {
  %0 = @func_7243() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_4395(%var_4393: Tensor[(16, 16, 6), float64], %var_4394: Tensor[(16, 16, 6), float64]) -> (Tensor[(16, 16, 6), uint16], Tensor[(16, 16, 6), float32], Tensor[(16, 16, 6), float64]) {
  @func_4391(%var_4393, %var_4394) /* ty=(Tensor[(16, 16, 6), uint16], Tensor[(16, 16, 6), float32], Tensor[(16, 16, 6), float64]) */
}

def @func_4069() -> (Tensor[(3, 8, 12), float32],) {
  @func_4067() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_12825() -> (Tensor[(16, 16, 6), float64],) {
  @func_12823() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_3756(%var_3755: Tensor[(528, 4), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) {
  %28 = fn (%var_3684: Tensor[(528, 4), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) {
    %2 = cast(%var_3684, dtype="bool") /* ty=Tensor[(528, 4), bool] */;
    %3 = reshape(%2, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), bool] */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 126), uint32] */, dtype="uint32") /* ty=Tensor[(5, 126), uint32] */;
    %5 = reshape(%4, newshape=[630]) /* ty=Tensor[(630), uint32] */;
    %6 = @func_2559(%5) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(1680), float32], Tensor[(15, 16, 7), int16], Tensor[(15, 16, 7), bool], Tensor[(630), uint32]) */;
    %7 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %8 = @func_3585() /* ty=Tensor[(3, 8, 12), float32] */;
    %9 = cast(%8, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    %10 = reshape(%9, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
    %11 = cast(%var_3684, dtype="float64") /* ty=Tensor[(528, 4), float64] */;
    %12 = sqrt(%11) /* ty=Tensor[(528, 4), float64] */;
    %13 = cast(%var_3684, dtype="float64") /* ty=Tensor[(528, 4), float64] */;
    %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(2), int32] */;
    %15 = cast(%12, dtype="float64") /* ty=Tensor[(528, 4), float64] */;
    %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %17 = cast(%12, dtype="float64") /* ty=Tensor[(528, 4), float64] */;
    %18 = cast(%12, dtype="float32") /* ty=Tensor[(528, 4), float32] */;
    %19 = @func_3074() /* ty=Tensor[(16, 16, 6), float64] */;
    %20 = @func_2207(%3) /* ty=Tensor[(12, 11, 16), bool] */;
    %21 = %6.1;
    %22 = %7.0;
    %23 = @func_1998(%10) /* ty=Tensor[(3, 8, 12), float32] */;
    %24 = power(%15, %16) /* ty=Tensor[(528, 4), float64] */;
    %25 = cosh(%17) /* ty=Tensor[(528, 4), float64] */;
    %26 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
    %27 = asinh(%18) /* ty=Tensor[(528, 4), float32] */;
    (%19, %20, %21, meta[relay.Constant][0] /* ty=Tensor[(5, 126), uint32] */, %22, %8, %23, %24, %25, %26, %27)
  };
  %28(%var_3755) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */
}

def @func_4768(%var_4718: Tensor[(2, 15, 6), float64]) -> (Tensor[(2, 15, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(630), uint32], Tensor[(192), float64]) {
  %29 = cast(%var_4718, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %30 = @func_4704() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 336), float64] */, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %33 = reshape(%31, newshape=[1, 336]) /* ty=Tensor[(1, 336), float64] */;
  %34 = reshape(%32, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %35 = @func_3557(%33, %34) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %37 = reshape(%36, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint32] */;
  %38 = @func_484(%37) /* ty=(Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %39 = cos(%29) /* ty=Tensor[(2, 15, 6), float64] */;
  %40 = %30.0;
  %41 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %42 = @func_3222() /* ty=Tensor[(16, 16, 6), float64] */;
  %43 = %35.1;
  %44 = %38.6;
  (%39, %40, %41, %42, %43, meta[relay.Constant][1] /* ty=Tensor[(1, 336), float64] */, meta[relay.Constant][2] /* ty=Tensor[(630), uint32] */, %44)
}

def @func_9342(%var_9339: Tensor[(33), int32], %var_9340: Tensor[(3, 88), int32], %var_9341: Tensor[(715), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), uint16], Tensor[(192), float64], Tensor[(33), int32], Tensor[(33), int32], Tensor[(3, 88), int32], Tensor[(715), bool], Tensor[(16, 16, 6), float64], Tensor[(288), float32]) {
  @func_9337(%var_9339, %var_9340, %var_9341) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), uint16], Tensor[(192), float64], Tensor[(33), int32], Tensor[(33), int32], Tensor[(3, 88), int32], Tensor[(715), bool], Tensor[(16, 16, 6), float64], Tensor[(288), float32]) */
}

def @func_6050() -> (Tensor[(320), int64],) {
  %47 = fn () -> (Tensor[(320), int64],) {
    %45 = @func_2758() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
    %46 = %45.3;
    (%46,)
  };
  %47() /* ty=(Tensor[(320), int64],) */
}

def @func_9775() -> Tensor[(3, 8, 12), float32] {
  %49 = fn () -> Tensor[(3, 8, 12), float32] {
    %48 = @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
    %48.1
  };
  %49() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_8628() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(100), uint8], Tensor[(16, 16, 6), float64]) {
  %60 = fn () -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(100), uint8], Tensor[(16, 16, 6), float64]) {
    %50 = @func_5572() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
    %51 = @func_7243() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(100), uint8] */, dtype="uint8") /* ty=Tensor[(100), uint8] */;
    %53 = reshape(%52, newshape=[100]) /* ty=Tensor[(100), uint8] */;
    %54 = @func_6086(%53) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) */;
    %55 = @func_6297() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %56 = %50.0;
    %57 = %51.0;
    %58 = %54.5;
    %59 = %55.0;
    (%56, %57, %58, meta[relay.Constant][3] /* ty=Tensor[(100), uint8] */, %59)
  };
  %60() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(100), uint8], Tensor[(16, 16, 6), float64]) */
}

def @func_12865() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  @func_12863() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */
}

def @func_3770() -> (Tensor[(16, 16, 6), float64],) {
  %61 = @func_2652() /* ty=Tensor[(16, 16, 6), float64] */;
  (%61,)
}

def @func_5853(%var_5852: Tensor[(9, 5, 15), float32]) -> Tensor[(9, 5, 15), float32] {
  %63 = fn (%var_5841: Tensor[(9, 5, 15), float32]) -> Tensor[(9, 5, 15), float32] {
    %62 = cast(%var_5841, dtype="float32") /* ty=Tensor[(9, 5, 15), float32] */;
    atan(%62) /* ty=Tensor[(9, 5, 15), float32] */
  };
  %63(%var_5852) /* ty=Tensor[(9, 5, 15), float32] */
}

def @func_10538() -> (Tensor[(3, 8, 12), float32], Tensor[(6, 4, 8), uint32], Tensor[(9, 6, 16), float32], Tensor[(864), float32], Tensor[(192), float64]) {
  @func_10536() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(6, 4, 8), uint32], Tensor[(9, 6, 16), float32], Tensor[(864), float32], Tensor[(192), float64]) */
}

def @func_7212() -> (Tensor[(16, 16, 6), float64],) {
  %64 = @func_6006() /* ty=Tensor[(16, 16, 6), float64] */;
  (%64,)
}

def @func_5334() -> Tensor[(16, 16, 6), float64] {
  @func_5332() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_6111() -> Tensor[(16, 16, 6), float64] {
  %66 = fn () -> Tensor[(16, 16, 6), float64] {
    %65 = @func_3787() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %65.0
  };
  %66() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_9721() -> (Tensor[(320), int64],) {
  %69 = fn () -> (Tensor[(320), int64],) {
    %67 = @func_2758() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
    %68 = %67.3;
    (%68,)
  };
  %69() /* ty=(Tensor[(320), int64],) */
}

def @func_9814() -> Tensor[(16, 16, 6), float32] {
  %75 = fn () -> Tensor[(16, 16, 6), float32] {
    %70 = @func_9639() /* ty=Tensor[(16, 16, 6), float64] */;
    %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 16, 6), float64] */, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
    %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%70, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%73, %74) /* ty=Tensor[(16, 16, 6), float32] */
  };
  %75() /* ty=Tensor[(16, 16, 6), float32] */
}

def @func_12401(%var_12400: Tensor[(1, 1536), float64]) -> (Tensor[(630), uint32], Tensor[(33), int32], Tensor[(1, 1536), float64], Tensor[(33), int32], Tensor[(16, 16, 6), float64]) {
  %86 = fn (%var_12391: Tensor[(1, 1536), float64]) -> (Tensor[(630), uint32], Tensor[(33), int32], Tensor[(1, 1536), float64], Tensor[(33), int32], Tensor[(16, 16, 6), float64]) {
    %76 = @func_10580() /* ty=(Tensor[(630), uint32],) */;
    %77 = cast(%var_12391, dtype="float64") /* ty=Tensor[(1, 1536), float64] */;
    %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(33), int32] */, dtype="int32") /* ty=Tensor[(33), int32] */;
    %79 = reshape(%77, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
    %80 = reshape(%78, newshape=[33]) /* ty=Tensor[(33), int32] */;
    %81 = @func_8547(%79, %80) /* ty=(Tensor[(16, 16, 6), bool], Tensor[(33), int32], Tensor[(33), int32], Tensor[(6, 44), int32], Tensor[(16, 16, 6), float64]) */;
    %82 = @func_12216() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(1680), float32]) */;
    %83 = %76.0;
    %84 = %81.1;
    %85 = %82.0;
    (%83, %84, %var_12391, meta[relay.Constant][5] /* ty=Tensor[(33), int32] */, %85)
  };
  %86(%var_12400) /* ty=(Tensor[(630), uint32], Tensor[(33), int32], Tensor[(1, 1536), float64], Tensor[(33), int32], Tensor[(16, 16, 6), float64]) */
}

def @func_10271() -> (Tensor[(3, 8, 12), float32],) {
  %87 = @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %88 = %87.1;
  (%88,)
}

def @func_7992(%var_7990: Tensor[(968), float32], %var_7991: Tensor[(33), int32]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(1536), float64], Tensor[(11, 8, 11), bool], Tensor[(968), float32], Tensor[(33), int32], Tensor[(33), int32], Tensor[(264), int32], Tensor[(3, 8, 12), float32]) {
  %111 = fn (%var_7975: Tensor[(968), float32], %var_7978: Tensor[(33), int32]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(1536), float64], Tensor[(11, 8, 11), bool], Tensor[(968), float32], Tensor[(33), int32], Tensor[(33), int32], Tensor[(264), int32], Tensor[(3, 8, 12), float32]) {
    %89 = @func_4051() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
    %90 = %89.1;
    %91 = cast(%90, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
    %92 = reshape(%91, newshape=[1536]) /* ty=Tensor[(1536), float64] */;
    %93 = @func_7503(%92) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64]) */;
    %94 = cast(%var_7975, dtype="float32") /* ty=Tensor[(968), float32] */;
    %95 = cast(%var_7975, dtype="float32") /* ty=Tensor[(968), float32] */;
    %96 = cast(%var_7975, dtype="float32") /* ty=Tensor[(968), float32] */;
    %97 = reshape(%94, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
    %98 = reshape(%95, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
    %99 = reshape(%96, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
    %100 = @func_6270(%97, %98, %99) /* ty=(Tensor[(11, 8, 11), bool], Tensor[(11, 8, 11), float64]) */;
    %101 = cast(%var_7978, dtype="int32") /* ty=Tensor[(33), int32] */;
    %102 = cast(meta[relay.Constant][6] /* ty=Tensor[(264), int32] */, dtype="int32") /* ty=Tensor[(264), int32] */;
    %103 = reshape(%101, newshape=[33]) /* ty=Tensor[(33), int32] */;
    %104 = reshape(%102, newshape=[264]) /* ty=Tensor[(264), int32] */;
    %105 = @func_2835(%103, %104) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) */;
    %106 = @func_4961() /* ty=Tensor[(3, 8, 12), float32] */;
    %107 = %93.2;
    %108 = %100.0;
    %109 = %105.2;
    %110 = @func_2686() /* ty=Tensor[(3, 8, 12), float32] */;
    (%90, %106, %107, %108, %var_7975, %109, %var_7978, meta[relay.Constant][6] /* ty=Tensor[(264), int32] */, %110)
  };
  %111(%var_7990, %var_7991) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(1536), float64], Tensor[(11, 8, 11), bool], Tensor[(968), float32], Tensor[(33), int32], Tensor[(33), int32], Tensor[(264), int32], Tensor[(3, 8, 12), float32]) */
}

def @func_3410() -> (Tensor[(16, 16, 6), float64],) {
  @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_10236(%var_10235: Tensor[(1, 360), float64]) -> (Tensor[(192), float64], Tensor[(715), float64], Tensor[(100), uint8], Tensor[(16, 16, 6), float64], Tensor[(1, 3, 15), float64], Tensor[(1, 360), float64]) {
  %124 = fn (%var_10231: Tensor[(1, 360), float64]) -> (Tensor[(192), float64], Tensor[(715), float64], Tensor[(100), uint8], Tensor[(16, 16, 6), float64], Tensor[(1, 3, 15), float64], Tensor[(1, 360), float64]) {
    %112 = @func_9103() /* ty=(Tensor[(192), float64],) */;
    %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(100), uint8] */, dtype="uint8") /* ty=Tensor[(100), uint8] */;
    %114 = reshape(%113, newshape=[100]) /* ty=Tensor[(100), uint8] */;
    %115 = @func_6086(%114) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) */;
    %116 = @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
    %117 = cast(%var_10231, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
    %118 = reshape(%117, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
    %119 = @func_2897(%118) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) */;
    %120 = %112.0;
    %121 = %115.5;
    %122 = %116.0;
    %123 = %119.0;
    (%120, %121, meta[relay.Constant][7] /* ty=Tensor[(100), uint8] */, %122, %123, %var_10231)
  };
  %124(%var_10235) /* ty=(Tensor[(192), float64], Tensor[(715), float64], Tensor[(100), uint8], Tensor[(16, 16, 6), float64], Tensor[(1, 3, 15), float64], Tensor[(1, 360), float64]) */
}

def @func_12521() -> Tensor[(3, 8, 12), float32] {
  %126 = fn () -> Tensor[(3, 8, 12), float32] {
    %125 = @func_4879() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %125.0
  };
  %126() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_12435(%var_12432: uint8, %var_12433: Tensor[(1, 2, 13), uint8], %var_12434: Tensor[(264), int32]) -> (Tensor[(1, 2, 13), bool], Tensor[(3, 8, 11), bool], Tensor[(11, 3), int32], Tensor[(264), int32]) {
  %136 = fn (%var_12420: uint8, %var_12421: Tensor[(1, 2, 13), uint8], %var_12428: Tensor[(264), int32]) -> (Tensor[(1, 2, 13), bool], Tensor[(3, 8, 11), bool], Tensor[(11, 3), int32], Tensor[(264), int32]) {
    %127 = cast(%var_12420, dtype="bool") /* ty=bool */;
    %128 = cast(%var_12421, dtype="bool") /* ty=Tensor[(1, 2, 13), bool] */;
    %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 3), int32] */, dtype="int32") /* ty=Tensor[(11, 3), int32] */;
    %130 = cast(%var_12428, dtype="int32") /* ty=Tensor[(264), int32] */;
    %131 = reshape(%129, newshape=[33]) /* ty=Tensor[(33), int32] */;
    %132 = reshape(%130, newshape=[264]) /* ty=Tensor[(264), int32] */;
    %133 = @func_2835(%131, %132) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) */;
    %134 = greater_equal(%127, %128) /* ty=Tensor[(1, 2, 13), bool] */;
    %135 = %133.1;
    (%134, %135, meta[relay.Constant][8] /* ty=Tensor[(11, 3), int32] */, %var_12428)
  };
  %136(%var_12432, %var_12433, %var_12434) /* ty=(Tensor[(1, 2, 13), bool], Tensor[(3, 8, 11), bool], Tensor[(11, 3), int32], Tensor[(264), int32]) */
}

def @func_6444() -> (Tensor[(5, 7, 4), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  @func_6442() /* ty=(Tensor[(5, 7, 4), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */
}

def @func_9494() -> Tensor[(2112), float32] {
  @func_9492() /* ty=Tensor[(2112), float32] */
}

def @func_5574() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  @func_5572() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_7608() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) {
  %152 = fn () -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) {
    %137 = @func_6188() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */;
    %138 = @func_6371() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(2112), bool]) */;
    %139 = cast(meta[relay.Constant][9] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %140 = reshape(%139, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float64] */;
    %141 = @func_6419(%140) /* ty=(Tensor[(10, 13, 12), float64],) */;
    %142 = @func_5880() /* ty=Tensor[(16, 16, 6), float64] */;
    %143 = cast(%142, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
    %144 = cast(%142, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
    %145 = reshape(%143, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
    %146 = reshape(%144, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
    %147 = @func_4391(%145, %146) /* ty=(Tensor[(16, 16, 6), uint16], Tensor[(16, 16, 6), float32], Tensor[(16, 16, 6), float64]) */;
    %148 = %137.0;
    %149 = %138.0;
    %150 = %141.0;
    %151 = %147.2;
    (%142, %148, %149, %150, meta[relay.Constant][9] /* ty=Tensor[(1560), float64] */, %151)
  };
  %152() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) */
}

def @func_7665() -> (Tensor[(3, 8, 12), float32],) {
  %155 = fn () -> (Tensor[(3, 8, 12), float32],) {
    %153 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
    %154 = %153.1;
    (%154,)
  };
  %155() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_9269(%var_9268: Tensor[(9, 6, 16), float32]) -> (Tensor[(9, 6, 16), float32],) {
  %158 = fn (%var_9264: Tensor[(9, 6, 16), float32]) -> (Tensor[(9, 6, 16), float32],) {
    %156 = cast(%var_9264, dtype="float32") /* ty=Tensor[(9, 6, 16), float32] */;
    %157 = cos(%156) /* ty=Tensor[(9, 6, 16), float32] */;
    (%157,)
  };
  %158(%var_9268) /* ty=(Tensor[(9, 6, 16), float32],) */
}

def @func_9473() -> (Tensor[(16, 16, 6), float64], Tensor[(192), float64]) {
  %159 = @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %160 = %159.0;
  %161 = @func_8204() /* ty=Tensor[(192), float64] */;
  (%160, %161)
}

def @func_11970() -> Tensor[(320), int64] {
  %162 = @func_6049() /* ty=(Tensor[(320), int64],) */;
  %162.0
}

def @func_12034(%var_11999: Tensor[(16, 16, 6), float64]) -> (Tensor[(16, 16, 6), int32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %163 = @func_5880() /* ty=Tensor[(16, 16, 6), float64] */;
  %164 = cast(%var_11999, dtype="int32") /* ty=Tensor[(16, 16, 6), int32] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="int32") /* ty=Tensor[(16, 16, 6), int32] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %168 = @func_10271() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %169 = @func_4067() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %170 = maximum(%166, %167) /* ty=Tensor[(16, 16, 6), int32] */;
  %171 = %168.0;
  %172 = %169.0;
  %173 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %174 = @func_5376() /* ty=Tensor[(3, 8, 12), float32] */;
  (%170, %171, %172, %173, %174)
}

def @func_4881() -> (Tensor[(3, 8, 12), float32],) {
  @func_4879() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_2207(%var_2201: Tensor[(12, 11, 16), bool]) -> Tensor[(12, 11, 16), bool] {
  %175 = cast(%var_2201, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
  %176 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 11, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 11, 16), bool] */, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%177, %178) /* ty=Tensor[(12, 11, 16), bool] */
}

def @func_12354() -> (Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(336), float64], Tensor[(630), uint32]) {
  @func_12352() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(336), float64], Tensor[(630), uint32]) */
}

def @func_12944() -> (Tensor[(3, 13, 8), float64], Tensor[(16, 16, 6), float64]) {
  @func_12942() /* ty=(Tensor[(3, 13, 8), float64], Tensor[(16, 16, 6), float64]) */
}

def @func_2838(%var_2836: Tensor[(33), int32], %var_2837: Tensor[(264), int32]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) {
  %185 = fn (%var_2813: Tensor[(33), int32], %var_2814: Tensor[(264), int32]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) {
    %179 = cast(%var_2813, dtype="int32") /* ty=Tensor[(33), int32] */;
    %180 = cast(%var_2814, dtype="int32") /* ty=Tensor[(264), int32] */;
    %181 = reshape(%179, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int32] */;
    %182 = reshape(%180, newshape=[3, 8, 11]) /* ty=Tensor[(3, 8, 11), int32] */;
    %183 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
    %184 = @func_2596(%181, %182) /* ty=Tensor[(3, 8, 11), bool] */;
    (%183, %184, %var_2813, %var_2814)
  };
  %185(%var_2836, %var_2837) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) */
}

def @func_9337(%var_9313: Tensor[(33), int32], %var_9314: Tensor[(3, 88), int32], %var_9315: Tensor[(715), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), uint16], Tensor[(192), float64], Tensor[(33), int32], Tensor[(33), int32], Tensor[(3, 88), int32], Tensor[(715), bool], Tensor[(16, 16, 6), float64], Tensor[(288), float32]) {
  %186 = @func_3074() /* ty=Tensor[(16, 16, 6), float64] */;
  %187 = cast(%186, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %188 = reshape(%187, newshape=[1536]) /* ty=Tensor[(1536), float64] */;
  %189 = @func_7503(%188) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64]) */;
  %190 = @func_8394() /* ty=(Tensor[(192), float64],) */;
  %191 = cast(%var_9313, dtype="int32") /* ty=Tensor[(33), int32] */;
  %192 = cast(%var_9314, dtype="int32") /* ty=Tensor[(3, 88), int32] */;
  %193 = cast(%var_9315, dtype="bool") /* ty=Tensor[(715), bool] */;
  %194 = reshape(%191, newshape=[33]) /* ty=Tensor[(33), int32] */;
  %195 = reshape(%192, newshape=[264]) /* ty=Tensor[(264), int32] */;
  %196 = reshape(%193, newshape=[715]) /* ty=Tensor[(715), bool] */;
  %197 = @func_7427(%194, %195, %196) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(13, 100), bool], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) */;
  %198 = cast(meta[relay.Constant][11] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %199 = reshape(%198, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %200 = @func_5813(%199) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), uint8], Tensor[(3, 8, 12), float32]) */;
  %201 = %189.1;
  %202 = %190.0;
  %203 = %197.4;
  %204 = %200.1;
  (%186, %201, %202, %203, %var_9313, %var_9314, %var_9315, %204, meta[relay.Constant][11] /* ty=Tensor[(288), float32] */)
}

def @func_10113(%var_10093: Tensor[(336), float64], %var_10094: Tensor[(32, 48), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(32, 48), float64], Tensor[(24, 14), uint8], Tensor[(16, 16, 6), float64]) {
  %205 = @func_7607() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) */;
  %206 = cast(%var_10093, dtype="float64") /* ty=Tensor[(336), float64] */;
  %207 = cast(%var_10094, dtype="float64") /* ty=Tensor[(32, 48), float64] */;
  %208 = reshape(%206, newshape=[24, 14]) /* ty=Tensor[(24, 14), float64] */;
  %209 = reshape(%207, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
  %210 = @func_8915(%208, %209) /* ty=(Tensor[(144, 2), float32], Tensor[(630), uint32], Tensor[(24, 14), float32], Tensor[(16, 16, 6), int8], Tensor[(16, 16, 6), float64], Tensor[(24, 14), float32], Tensor[(16, 16, 6), float64]) */;
  %211 = %210.2;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %213 = tan(%212) /* ty=Tensor[(24, 14), float32] */;
  %214 = cast(%var_10093, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(2), int32] */;
  %216 = cast(%213, dtype="uint8") /* ty=Tensor[(24, 14), uint8] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %218 = @func_4178() /* ty=(Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %219 = %205.2;
  %220 = bitwise_or(%216, %217) /* ty=Tensor[(24, 14), uint8] */;
  %221 = %218.1;
  (%219, %var_10094, %220, %221)
}

def @func_484(%var_447: Tensor[(14, 9, 5), uint32]) -> (Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) {
  %222 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 9, 5), uint32] */, dtype="uint32") /* ty=Tensor[(14, 9, 5), uint32] */;
  %223 = shape_of(%var_447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_447, dtype="uint32") /* ty=Tensor[(14, 9, 5), uint32] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %226 = cast(%var_447, dtype="bool") /* ty=Tensor[(14, 9, 5), bool] */;
  %227 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(14, 9, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 9, 5), uint32] */, dtype="bool") /* ty=Tensor[(14, 9, 5), bool] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %230 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 840), float32] */, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %231 = reshape(%230, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
  %232 = @func_91(%231) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */;
  %233 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 840), float32] */, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %234 = reshape(%233, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
  %235 = @func_91(%234) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */;
  %236 = cast(meta[relay.Constant][14] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %237 = %232.1;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(15, 16, 7), float32] */;
  %239 = reshape(%236, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float64] */;
  %240 = reshape(%238, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %241 = @func_290(%239, %240) /* ty=(Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(6, 4, 8), uint32], Tensor[(6, 4, 8), float32]) */;
  %242 = bitwise_or(%224, %225) /* ty=Tensor[(14, 9, 5), uint32] */;
  %243 = logical_and(%228, %229) /* ty=Tensor[(14, 9, 5), bool] */;
  %244 = %235.1;
  %245 = %241.2;
  (%242, %243, %237, meta[relay.Constant][13] /* ty=Tensor[(2, 840), float32] */, %244, %245, meta[relay.Constant][14] /* ty=Tensor[(192), float64] */)
}

def @func_2000(%var_1999: Tensor[(3, 8, 12), float32]) -> Tensor[(3, 8, 12), float32] {
  %250 = fn (%var_1988: Tensor[(3, 8, 12), float32]) -> Tensor[(3, 8, 12), float32] {
    %246 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 8, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    %247 = shape_of(%var_1988, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(%var_1988, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%248, %249) /* ty=Tensor[(3, 8, 12), float32] */
  };
  %250(%var_1999) /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_11048(%var_11040: uint32) -> (Tensor[(1, 5, 8), uint32],) {
  %251 = cast(%var_11040, dtype="uint32") /* ty=uint32 */;
  %252 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 5, 8), uint32] */, dtype="uint32") /* ty=Tensor[(1, 5, 8), uint32] */;
  %253 = bitwise_xor(%251, %252) /* ty=Tensor[(1, 5, 8), uint32] */;
  (%253,)
}

def @func_8206() -> Tensor[(192), float64] {
  @func_8204() /* ty=Tensor[(192), float64] */
}

def @func_2561(%var_2560: Tensor[(630), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(1680), float32], Tensor[(15, 16, 7), int16], Tensor[(15, 16, 7), bool], Tensor[(630), uint32]) {
  %270 = fn (%var_2552: Tensor[(630), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(1680), float32], Tensor[(15, 16, 7), int16], Tensor[(15, 16, 7), bool], Tensor[(630), uint32]) {
    %254 = cast(meta[relay.Constant][17] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %255 = reshape(%254, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
    %256 = @func_91(%255) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */;
    %257 = %256.0;
    %258 = cast(%257, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
    %259 = sinh(%258) /* ty=Tensor[(15, 16, 7), float64] */;
    %260 = cast(%259, dtype="int16") /* ty=Tensor[(15, 16, 7), int16] */;
    %261 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%257, dtype="int16") /* ty=Tensor[(15, 16, 7), int16] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %264 = cast(%var_2552, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %265 = reshape(%264, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint32] */;
    %266 = @func_484(%265) /* ty=(Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
    %267 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
    %268 = subtract(%262, %263) /* ty=Tensor[(15, 16, 7), int16] */;
    %269 = %266.2;
    (%267, meta[relay.Constant][17] /* ty=Tensor[(1680), float32] */, %268, %269, %var_2552)
  };
  %270(%var_2560) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(1680), float32], Tensor[(15, 16, 7), int16], Tensor[(15, 16, 7), bool], Tensor[(630), uint32]) */
}

def @func_3954() -> (Tensor[(16, 16, 6), float64],) {
  %271 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  (%271,)
}

def @func_2652() -> Tensor[(16, 16, 6), float64] {
  @func_2461() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_12037(%var_12035: Tensor[(16, 16, 6), float64]) -> (Tensor[(16, 16, 6), int32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  @func_12034(%var_12035) /* ty=(Tensor[(16, 16, 6), int32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_9886() -> Tensor[(16, 16, 6), float64] {
  %273 = fn () -> Tensor[(16, 16, 6), float64] {
    %272 = @func_2501() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
    %272.0
  };
  %273() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_10625(%var_10624: int16) -> (Tensor[(2, 4, 10), float64],) {
  %280 = fn (%var_10606: int16) -> (Tensor[(2, 4, 10), float64],) {
    %274 = cast(%var_10606, dtype="bool") /* ty=bool */;
    %275 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 4, 10), int16] */, dtype="bool") /* ty=Tensor[(2, 4, 10), bool] */;
    %276 = equal(%274, %275) /* ty=Tensor[(2, 4, 10), bool] */;
    %277 = cast(%var_10606, dtype="float64") /* ty=float64 */;
    %278 = cast(%276, dtype="float64") /* ty=Tensor[(2, 4, 10), float64] */;
    %279 = floor_divide(%277, %278) /* ty=Tensor[(2, 4, 10), float64] */;
    (%279,)
  };
  %280(%var_10624) /* ty=(Tensor[(2, 4, 10), float64],) */
}

def @func_3408() -> (Tensor[(16, 16, 6), float64],) {
  %281 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  (%281,)
}

def @func_4280() -> (Tensor[(3, 8, 12), float32], Tensor[(528, 4), float32], Tensor[(2112), bool]) {
  %288 = fn () -> (Tensor[(3, 8, 12), float32], Tensor[(528, 4), float32], Tensor[(2112), bool]) {
    %282 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
    %283 = cast(meta[relay.Constant][19] /* ty=Tensor[(2112), bool] */, dtype="bool") /* ty=Tensor[(2112), bool] */;
    %284 = reshape(%283, newshape=[528, 4]) /* ty=Tensor[(528, 4), bool] */;
    %285 = @func_3754(%284) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */;
    %286 = %282.0;
    %287 = %285.10;
    (%286, %287, meta[relay.Constant][19] /* ty=Tensor[(2112), bool] */)
  };
  %288() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(528, 4), float32], Tensor[(2112), bool]) */
}

def @func_4962() -> Tensor[(3, 8, 12), float32] {
  %290 = fn () -> Tensor[(3, 8, 12), float32] {
    %289 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
    %289.0
  };
  %290() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_10711() -> Tensor[(3, 8, 12), float32] {
  %291 = fn () -> Tensor[(3, 8, 12), float32] {
    @func_9759() /* ty=Tensor[(3, 8, 12), float32] */
  };
  %291() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_4621(%var_4619: Tensor[(11, 5, 13), float64]) -> Tensor[(11, 5, 13), float64] {
  @func_4618(%var_4619) /* ty=Tensor[(11, 5, 13), float64] */
}

def @func_5925() -> (Tensor[(192), float64], Tensor[(3, 8, 12), float32], Tensor[(5, 7, 4), float32]) {
  %297 = fn () -> (Tensor[(192), float64], Tensor[(3, 8, 12), float32], Tensor[(5, 7, 4), float32]) {
    %292 = @func_4030() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */;
    %293 = @func_5593() /* ty=(Tensor[(5, 7, 4), float32],) */;
    %294 = %292.2;
    %295 = @func_4961() /* ty=Tensor[(3, 8, 12), float32] */;
    %296 = %293.0;
    (%294, %295, %296)
  };
  %297() /* ty=(Tensor[(192), float64], Tensor[(3, 8, 12), float32], Tensor[(5, 7, 4), float32]) */
}

def @func_2921() -> Tensor[(3, 8, 12), float32] {
  @func_2919() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_12352() -> (Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(336), float64], Tensor[(630), uint32]) {
  %298 = @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %299 = cast(meta[relay.Constant][20] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %300 = cast(meta[relay.Constant][21] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %301 = reshape(%299, newshape=[1, 336]) /* ty=Tensor[(1, 336), float64] */;
  %302 = reshape(%300, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %303 = @func_3557(%301, %302) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %304 = %298.1;
  %305 = %303.7;
  (%304, %305, meta[relay.Constant][20] /* ty=Tensor[(336), float64] */, meta[relay.Constant][21] /* ty=Tensor[(630), uint32] */)
}

def @func_5880() -> Tensor[(16, 16, 6), float64] {
  %306 = @func_3491() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %306.1
}

def @func_12774() -> Tensor[(320), int64] {
  %307 = fn () -> Tensor[(320), int64] {
    @func_12768() /* ty=Tensor[(320), int64] */
  };
  %307() /* ty=Tensor[(320), int64] */
}

def @func_12540() -> (Tensor[(192), float64],) {
  %310 = fn () -> (Tensor[(192), float64],) {
    %308 = @func_10536() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(6, 4, 8), uint32], Tensor[(9, 6, 16), float32], Tensor[(864), float32], Tensor[(192), float64]) */;
    %309 = %308.4;
    (%309,)
  };
  %310() /* ty=(Tensor[(192), float64],) */
}

def @func_11139(%var_11137: Tensor[(4, 5, 5), float64]) -> (Tensor[(4, 5, 5), float64], Tensor[(4, 5, 5), float32]) {
  @func_11136(%var_11137) /* ty=(Tensor[(4, 5, 5), float64], Tensor[(4, 5, 5), float32]) */
}

def @func_9895() -> (Tensor[(3, 8, 12), float32],) {
  %312 = fn () -> (Tensor[(3, 8, 12), float32],) {
    %311 = @func_8267() /* ty=Tensor[(3, 8, 12), float32] */;
    (%311,)
  };
  %312() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_7432(%var_7429: Tensor[(33), int32], %var_7430: Tensor[(264), int32], %var_7431: Tensor[(715), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(13, 100), bool], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) {
  @func_7427(%var_7429, %var_7430, %var_7431) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(13, 100), bool], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) */
}

def @func_8051() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  @func_8049() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */
}

def @func_9424() -> Tensor[(16, 16, 6), float64] {
  @func_3352() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_3074() -> Tensor[(16, 16, 6), float64] {
  @func_2461() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_9848() -> Tensor[(16, 16, 6), float64] {
  @func_9846() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_3644() -> Tensor[(3, 8, 12), float32] {
  %316 = fn () -> Tensor[(3, 8, 12), float32] {
    %313 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
    %314 = %313.0;
    %315 = cast(%314, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    atan(%315) /* ty=Tensor[(3, 8, 12), float32] */
  };
  %316() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_11679(%var_11674: Tensor[(715), float64]) -> (Tensor[(715), uint64],) {
  %317 = @func_5313() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) */;
  %318 = %317.1;
  %319 = cast(%var_11674, dtype="uint64") /* ty=Tensor[(715), uint64] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(1), int32] */;
  %321 = cast(%318, dtype="uint64") /* ty=Tensor[(715), uint64] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %323 = bitwise_xor(%321, %322) /* ty=Tensor[(715), uint64] */;
  (%323,)
}

def @func_10273() -> (Tensor[(3, 8, 12), float32],) {
  @func_10271() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_4179() -> (Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) {
  %334 = fn () -> (Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) {
    %324 = @func_4030() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */;
    %325 = @func_4051() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
    %326 = cast(meta[relay.Constant][22] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %327 = %324.3;
    %328 = cast(%327, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %329 = reshape(%326, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float64] */;
    %330 = reshape(%328, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
    %331 = @func_290(%329, %330) /* ty=(Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(6, 4, 8), uint32], Tensor[(6, 4, 8), float32]) */;
    %332 = %325.0;
    %333 = %331.2;
    (%327, %332, %333, meta[relay.Constant][22] /* ty=Tensor[(192), float64] */)
  };
  %334() /* ty=(Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */
}

def @func_13008(%var_13007: Tensor[(4, 8, 3), int64]) -> (Tensor[(4, 8, 3), bool],) {
  %338 = fn (%var_12997: Tensor[(4, 8, 3), int64]) -> (Tensor[(4, 8, 3), bool],) {
    %335 = cast(4 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %336 = cast(%var_12997, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
    %337 = less_equal(%335, %336) /* ty=Tensor[(4, 8, 3), bool] */;
    (%337,)
  };
  %338(%var_13007) /* ty=(Tensor[(4, 8, 3), bool],) */
}

def @func_11817() -> Tensor[(6, 14, 4), float64] {
  @func_11815() /* ty=Tensor[(6, 14, 4), float64] */
}

def @func_8550(%var_8548: Tensor[(16, 16, 6), float64], %var_8549: Tensor[(33), int32]) -> (Tensor[(16, 16, 6), bool], Tensor[(33), int32], Tensor[(33), int32], Tensor[(6, 44), int32], Tensor[(16, 16, 6), float64]) {
  %353 = fn (%var_8510: Tensor[(16, 16, 6), float64], %var_8519: Tensor[(33), int32]) -> (Tensor[(16, 16, 6), bool], Tensor[(33), int32], Tensor[(33), int32], Tensor[(6, 44), int32], Tensor[(16, 16, 6), float64]) {
    %339 = @func_5880() /* ty=Tensor[(16, 16, 6), float64] */;
    %340 = cast(%var_8510, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%339, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %344 = cast(%var_8519, dtype="int32") /* ty=Tensor[(33), int32] */;
    %345 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 44), int32] */, dtype="int32") /* ty=Tensor[(6, 44), int32] */;
    %346 = reshape(%344, newshape=[33]) /* ty=Tensor[(33), int32] */;
    %347 = reshape(%345, newshape=[264]) /* ty=Tensor[(264), int32] */;
    %348 = @func_2835(%346, %347) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) */;
    %349 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %350 = less_equal(%342, %343) /* ty=Tensor[(16, 16, 6), bool] */;
    %351 = %348.2;
    %352 = %349.0;
    (%350, %351, %var_8519, meta[relay.Constant][23] /* ty=Tensor[(6, 44), int32] */, %352)
  };
  %353(%var_8548, %var_8549) /* ty=(Tensor[(16, 16, 6), bool], Tensor[(33), int32], Tensor[(33), int32], Tensor[(6, 44), int32], Tensor[(16, 16, 6), float64]) */
}

def @func_10428(%var_10425: Tensor[(16, 16, 6), float64], %var_10426: Tensor[(2112), bool], %var_10427: Tensor[(360), float64]) -> (Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint64], Tensor[(8, 3, 15), bool], Tensor[(2112), bool], Tensor[(360), float64]) {
  %372 = fn (%var_10390: Tensor[(16, 16, 6), float64], %var_10418: Tensor[(2112), bool], %var_10419: Tensor[(360), float64]) -> (Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint64], Tensor[(8, 3, 15), bool], Tensor[(2112), bool], Tensor[(360), float64]) {
    %354 = @func_5038() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) */;
    %355 = @func_5677() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
    %356 = @func_6442() /* ty=(Tensor[(5, 7, 4), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */;
    %357 = %356.2;
    %358 = cast(%var_10390, dtype="uint64") /* ty=Tensor[(16, 16, 6), uint64] */;
    %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
    %360 = cast(%357, dtype="uint64") /* ty=Tensor[(16, 16, 6), uint64] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %362 = cast(%var_10418, dtype="bool") /* ty=Tensor[(2112), bool] */;
    %363 = cast(%var_10419, dtype="float64") /* ty=Tensor[(360), float64] */;
    %364 = reshape(%362, newshape=[132, 16]) /* ty=Tensor[(132, 16), bool] */;
    %365 = reshape(%363, newshape=[2, 180]) /* ty=Tensor[(2, 180), float64] */;
    %366 = @func_10023(%364, %365) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(132, 16), bool], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(9, 16, ?), uint8], Tensor[(16, 16, 6), float64], Tensor[(11, 5, 13), float64], Tensor[(715), float64], Tensor[(8, 3, 15), bool], Tensor[(2, 180), float64]) */;
    %367 = @func_9143() /* ty=Tensor[(320), int64] */;
    %368 = %354.0;
    %369 = %355.1;
    %370 = bitwise_and(%360, %361) /* ty=Tensor[(16, 16, 6), uint64] */;
    %371 = %366.10;
    (%367, %368, %369, %370, %371, %var_10418, %var_10419)
  };
  %372(%var_10425, %var_10426, %var_10427) /* ty=(Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint64], Tensor[(8, 3, 15), bool], Tensor[(2112), bool], Tensor[(360), float64]) */
}

def @func_6760() -> (Tensor[(3, 8, 12), float32],) {
  %373 = @func_5376() /* ty=Tensor[(3, 8, 12), float32] */;
  (%373,)
}

def @func_7076() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  @func_7074() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */
}

def @func_11871() -> (Tensor[(16, 16, 6), float64],) {
  @func_11869() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_7427(%var_7418: Tensor[(33), int32], %var_7419: Tensor[(264), int32], %var_7422: Tensor[(715), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(13, 100), bool], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) {
  %374 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 100), uint8] */, dtype="bool") /* ty=Tensor[(1, 100), bool] */;
  %375 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 100), uint8] */, dtype="bool") /* ty=Tensor[(13, 100), bool] */;
  %376 = cast(%var_7418, dtype="int32") /* ty=Tensor[(33), int32] */;
  %377 = cast(%var_7419, dtype="int32") /* ty=Tensor[(264), int32] */;
  %378 = reshape(%376, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int32] */;
  %379 = reshape(%377, newshape=[3, 8, 11]) /* ty=Tensor[(3, 8, 11), int32] */;
  %380 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 100), uint8] */, dtype="uint8") /* ty=Tensor[(1, 100), uint8] */;
  %381 = reshape(%380, newshape=[100]) /* ty=Tensor[(100), uint8] */;
  %382 = @func_6086(%381) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) */;
  %383 = %382.5;
  %384 = cast(meta[relay.Constant][26] /* ty=Tensor[(715), float64] */, dtype="bool") /* ty=Tensor[(715), bool] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(1), int32] */;
  %386 = cast(%383, dtype="bool") /* ty=Tensor[(715), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?), bool] */;
  %388 = equal(%386, %387) /* ty=Tensor[(715), bool] */;
  %389 = cast(%var_7422, dtype="bool") /* ty=Tensor[(715), bool] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(1), int32] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(715), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?), bool] */;
  %393 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %394 = @func_2919() /* ty=Tensor[(3, 8, 12), float32] */;
  %395 = logical_or(%374, %375) /* ty=Tensor[(13, 100), bool] */;
  %396 = @func_2596(%378, %379) /* ty=Tensor[(3, 8, 11), bool] */;
  %397 = not_equal(%391, %392) /* ty=Tensor[(715), bool] */;
  (%393, %394, %395, %396, %var_7418, %var_7419, %397)
}

def @func_13022() -> Tensor[(3, 8, 12), float32] {
  %398 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %398.0
}

def @func_8834() -> (Tensor[(16, 16, 6), float64],) {
  %400 = fn () -> (Tensor[(16, 16, 6), float64],) {
    %399 = @func_2652() /* ty=Tensor[(16, 16, 6), float64] */;
    (%399,)
  };
  %400() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_5640() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(14, 9, 5), bool], Tensor[(630), uint32], Tensor[(11, 5, 13), float64]) {
  %410 = fn () -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(14, 9, 5), bool], Tensor[(630), uint32], Tensor[(11, 5, 13), float64]) {
    %401 = @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %402 = cast(meta[relay.Constant][27] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %403 = reshape(%402, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint32] */;
    %404 = @func_484(%403) /* ty=(Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
    %405 = @func_5038() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) */;
    %406 = %401.0;
    %407 = @func_5332() /* ty=Tensor[(16, 16, 6), float64] */;
    %408 = %404.1;
    %409 = %405.1;
    (%406, %407, %408, meta[relay.Constant][27] /* ty=Tensor[(630), uint32] */, %409)
  };
  %410() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(14, 9, 5), bool], Tensor[(630), uint32], Tensor[(11, 5, 13), float64]) */
}

def @func_8395() -> (Tensor[(192), float64],) {
  %413 = fn () -> (Tensor[(192), float64],) {
    %411 = @func_4178() /* ty=(Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
    %412 = %411.3;
    (%412,)
  };
  %413() /* ty=(Tensor[(192), float64],) */
}

def @func_5595() -> (Tensor[(5, 7, 4), float32],) {
  @func_5593() /* ty=(Tensor[(5, 7, 4), float32],) */
}

def @func_8919(%var_8917: Tensor[(24, 14), float64], %var_8918: Tensor[(16, 16, 6), float64]) -> (Tensor[(144, 2), float32], Tensor[(630), uint32], Tensor[(24, 14), float32], Tensor[(16, 16, 6), int8], Tensor[(16, 16, 6), float64], Tensor[(24, 14), float32], Tensor[(16, 16, 6), float64]) {
  @func_8915(%var_8917, %var_8918) /* ty=(Tensor[(144, 2), float32], Tensor[(630), uint32], Tensor[(24, 14), float32], Tensor[(16, 16, 6), int8], Tensor[(16, 16, 6), float64], Tensor[(24, 14), float32], Tensor[(16, 16, 6), float64]) */
}

def @func_12217() -> (Tensor[(16, 16, 6), float64], Tensor[(1680), float32]) {
  %418 = fn () -> (Tensor[(16, 16, 6), float64], Tensor[(1680), float32]) {
    %414 = @func_4704() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %415 = @func_4030() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */;
    %416 = %414.0;
    %417 = %415.3;
    (%416, %417)
  };
  %418() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(1680), float32]) */
}

def @func_11412() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  @func_11410() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */
}

def @func_13106() -> Tensor[(16, 16, 6), float64] {
  %420 = fn () -> Tensor[(16, 16, 6), float64] {
    %419 = @func_5201() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
    %419.1
  };
  %420() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_12320(%var_12318: Tensor[(16, 7, 14), uint16], %var_12319: Tensor[(336), float64]) -> (Tensor[(16, 7, 14), uint16], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64], Tensor[(336), float64], Tensor[(33), int32], Tensor[(192), float64], Tensor[(715), float64], Tensor[(16, 7, 14), bool], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  %447 = fn (%var_12219: Tensor[(16, 7, 14), uint16], %var_12231: Tensor[(336), float64]) -> (Tensor[(16, 7, 14), uint16], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64], Tensor[(336), float64], Tensor[(33), int32], Tensor[(192), float64], Tensor[(715), float64], Tensor[(16, 7, 14), bool], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
    %421 = cast(meta[relay.Constant][28] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %422 = cast(%var_12219, dtype="uint16") /* ty=Tensor[(16, 7, 14), uint16] */;
    %423 = cast(meta[relay.Constant][29] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
    %424 = cast(%var_12231, dtype="float64") /* ty=Tensor[(336), float64] */;
    %425 = cast(meta[relay.Constant][30] /* ty=Tensor[(33), int32] */, dtype="int32") /* ty=Tensor[(33), int32] */;
    %426 = reshape(%423, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
    %427 = reshape(%424, newshape=[336]) /* ty=Tensor[(336), float64] */;
    %428 = reshape(%425, newshape=[1, 33]) /* ty=Tensor[(1, 33), int32] */;
    %429 = @func_4531(%426, %427, %428) /* ty=(Tensor[(6, 14, 4), float64], Tensor[(336), float64], Tensor[(16, 16, 6), uint16], Tensor[(33), int32], Tensor[(1, 33), int32], Tensor[(264), int32]) */;
    %430 = @func_9103() /* ty=(Tensor[(192), float64],) */;
    %431 = @func_5313() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) */;
    %432 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 7, 14), uint16] */, dtype="bool") /* ty=Tensor[(16, 7, 14), bool] */;
    %433 = shape_of(%var_12219, dtype="int32") /* ty=Tensor[(3), int32] */;
    %434 = cast(%var_12219, dtype="bool") /* ty=Tensor[(16, 7, 14), bool] */;
    %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %436 = @func_7664() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %437 = @func_10271() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %438 = @func_8372() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %439 = subtract(%421, %422) /* ty=Tensor[(16, 7, 14), uint16] */;
    %440 = %429.2;
    %441 = %430.0;
    %442 = %431.1;
    %443 = greater(%434, %435) /* ty=Tensor[(16, 7, 14), bool] */;
    %444 = %436.0;
    %445 = %437.0;
    %446 = %438.0;
    (%439, %440, meta[relay.Constant][29] /* ty=Tensor[(1536), float64] */, %var_12231, meta[relay.Constant][30] /* ty=Tensor[(33), int32] */, %441, %442, %443, %444, %445, %446)
  };
  %447(%var_12318, %var_12319) /* ty=(Tensor[(16, 7, 14), uint16], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64], Tensor[(336), float64], Tensor[(33), int32], Tensor[(192), float64], Tensor[(715), float64], Tensor[(16, 7, 14), bool], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */
}

def @func_9103() -> (Tensor[(192), float64],) {
  %448 = @func_5924() /* ty=(Tensor[(192), float64], Tensor[(3, 8, 12), float32], Tensor[(5, 7, 4), float32]) */;
  %449 = %448.0;
  (%449,)
}

def @func_9199(%var_9197: Tensor[(336, 1), float64], %var_9198: Tensor[(10, 63), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(336, 1), float64], Tensor[(10, 63), uint32], Tensor[(3, 8, 12), float32]) {
  @func_9195(%var_9197, %var_9198) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(336, 1), float64], Tensor[(10, 63), uint32], Tensor[(3, 8, 12), float32]) */
}

def @func_3669() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) {
  @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */
}

def @func_6762() -> (Tensor[(3, 8, 12), float32],) {
  @func_6760() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_5313() -> (Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) {
  %450 = @func_5038() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) */;
  %451 = @func_3144() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) */;
  %452 = @func_3585() /* ty=Tensor[(3, 8, 12), float32] */;
  %453 = %450.2;
  %454 = %451.1;
  (%452, %453, %454)
}

def @func_10726() -> Tensor[(3, 8, 12), float32] {
  @func_10724() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_6371() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(2112), bool]) {
  %455 = @func_5313() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) */;
  %456 = cast(meta[relay.Constant][32] /* ty=Tensor[(2112), bool] */, dtype="bool") /* ty=Tensor[(2112), bool] */;
  %457 = reshape(%456, newshape=[528, 4]) /* ty=Tensor[(528, 4), bool] */;
  %458 = @func_3754(%457) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */;
  %459 = %455.0;
  %460 = %458.9;
  (%459, %460, meta[relay.Constant][32] /* ty=Tensor[(2112), bool] */)
}

def @func_7505(%var_7504: Tensor[(1536), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64]) {
  %469 = fn (%var_7484: Tensor[(1536), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64]) {
    %461 = @func_6683() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
    %462 = cast(%var_7484, dtype="float64") /* ty=Tensor[(1536), float64] */;
    %463 = cast(%var_7484, dtype="float64") /* ty=Tensor[(1536), float64] */;
    %464 = reshape(%462, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
    %465 = reshape(%463, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), float64] */;
    %466 = @func_4391(%464, %465) /* ty=(Tensor[(16, 16, 6), uint16], Tensor[(16, 16, 6), float32], Tensor[(16, 16, 6), float64]) */;
    %467 = %461.7;
    %468 = %466.0;
    (%467, %468, %var_7484)
  };
  %469(%var_7504) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), uint16], Tensor[(1536), float64]) */
}

def @func_3145() -> (Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) {
  %476 = fn () -> (Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) {
    %470 = cast(meta[relay.Constant][33] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %471 = cast(meta[relay.Constant][33] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %472 = reshape(%470, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
    %473 = reshape(%471, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
    %474 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
    %475 = @func_2266(%472, %473) /* ty=Tensor[(6, 14, 4), float64] */;
    (%474, %475, meta[relay.Constant][33] /* ty=Tensor[(336), float64] */)
  };
  %476() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) */
}

def @func_7194() -> (Tensor[(9, 5, 15), float32], Tensor[(16, 16, 6), float64]) {
  %481 = fn () -> (Tensor[(9, 5, 15), float32], Tensor[(16, 16, 6), float64]) {
    %477 = @func_6683() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
    %478 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %479 = %477.3;
    %480 = %478.0;
    (%479, %480)
  };
  %481() /* ty=(Tensor[(9, 5, 15), float32], Tensor[(16, 16, 6), float64]) */
}

def @func_2900(%var_2898: Tensor[(8, 3, 15), float64]) -> (Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) {
  @func_2897(%var_2898) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) */
}

def @func_9639() -> Tensor[(16, 16, 6), float64] {
  %482 = @func_5201() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %482.1
}

def @func_9282() -> (Tensor[(16, 16, 6), float64],) {
  %485 = fn () -> (Tensor[(16, 16, 6), float64],) {
    %483 = @func_5201() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
    %484 = %483.0;
    (%484,)
  };
  %485() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_6155(%var_6153: Tensor[(675), float32]) -> (Tensor[(16, 16, 6), float64], Tensor[(9, 5, 15), float32], Tensor[(675), float32]) {
  @func_6152(%var_6153) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(9, 5, 15), float32], Tensor[(675), float32]) */
}

def @func_2719(%var_2717: Tensor[(4, 16, 5), int64], %var_2718: Tensor[(4, 16, 5), int64]) -> (Tensor[(4, 16, 5), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) {
  @func_2715(%var_2717, %var_2718) /* ty=(Tensor[(4, 16, 5), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */
}

def @func_13097(%var_13095: Tensor[(10, 4, 1), int64], %var_13096: Tensor[(10, 4, 5), int64]) -> Tensor[(10, 4, 5), int64] {
  %488 = fn (%var_13081: Tensor[(10, 4, 1), int64], %var_13082: Tensor[(10, 4, 5), int64]) -> Tensor[(10, 4, 5), int64] {
    %486 = cast(%var_13081, dtype="int64") /* ty=Tensor[(10, 4, 1), int64] */;
    %487 = cast(%var_13082, dtype="int64") /* ty=Tensor[(10, 4, 5), int64] */;
    bitwise_or(%486, %487) /* ty=Tensor[(10, 4, 5), int64] */
  };
  %488(%var_13095, %var_13096) /* ty=Tensor[(10, 4, 5), int64] */
}

def @func_8268() -> Tensor[(3, 8, 12), float32] {
  %490 = fn () -> Tensor[(3, 8, 12), float32] {
    %489 = @func_7243() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %489.0
  };
  %490() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_2463() -> Tensor[(16, 16, 6), float64] {
  @func_2461() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_4618(%var_4615: Tensor[(11, 5, 13), float64]) -> Tensor[(11, 5, 13), float64] {
  %491 = cast(%var_4615, dtype="float64") /* ty=Tensor[(11, 5, 13), float64] */;
  sqrt(%491) /* ty=Tensor[(11, 5, 13), float64] */
}

def @func_11031() -> Tensor[(16, 16, 6), float64] {
  %493 = fn () -> Tensor[(16, 16, 6), float64] {
    %492 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %492.0
  };
  %493() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_4031() -> (Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) {
  %501 = fn () -> (Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) {
    %494 = cast(meta[relay.Constant][34] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %495 = cast(meta[relay.Constant][35] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %496 = reshape(%494, newshape=[6, 4, 8]) /* ty=Tensor[(6, 4, 8), float64] */;
    %497 = reshape(%495, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
    %498 = @func_290(%496, %497) /* ty=(Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(6, 4, 8), uint32], Tensor[(6, 4, 8), float32]) */;
    %499 = @func_2919() /* ty=Tensor[(3, 8, 12), float32] */;
    %500 = %498.1;
    (%499, %500, meta[relay.Constant][34] /* ty=Tensor[(192), float64] */, meta[relay.Constant][35] /* ty=Tensor[(1680), float32] */)
  };
  %501() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */
}

def @func_5813(%var_5798: Tensor[(3, 8, 12), float32]) -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), uint8], Tensor[(3, 8, 12), float32]) {
  %502 = @func_4178() /* ty=(Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %503 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %504 = @func_2758() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %505 = %504.1;
  %506 = cast(%var_5798, dtype="uint8") /* ty=Tensor[(3, 8, 12), uint8] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%505, dtype="uint8") /* ty=Tensor[(3, 8, 12), uint8] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %510 = @func_5677() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %511 = %502.1;
  %512 = %503.0;
  %513 = bitwise_xor(%508, %509) /* ty=Tensor[(3, 8, 12), uint8] */;
  %514 = %510.0;
  (%511, %512, %513, %514)
}

def @func_11608(%var_11606: Tensor[(2112), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(3, 8, 12), float32], Tensor[(2112), bool]) {
  @func_11605(%var_11606) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(3, 8, 12), float32], Tensor[(2112), bool]) */
}

def @func_11117() -> (Tensor[(16, 16, 6), float64],) {
  %515 = @func_5880() /* ty=Tensor[(16, 16, 6), float64] */;
  (%515,)
}

def @func_8433() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %516 = @func_3074() /* ty=Tensor[(16, 16, 6), float64] */;
  %517 = @func_5376() /* ty=Tensor[(3, 8, 12), float32] */;
  (%516, %517)
}

def @func_2981() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  %518 = @func_2501() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %519 = %518.1;
  %520 = @func_2686() /* ty=Tensor[(3, 8, 12), float32] */;
  (%519, %520)
}

def @func_6298() -> (Tensor[(16, 16, 6), float64],) {
  %523 = fn () -> (Tensor[(16, 16, 6), float64],) {
    %521 = @func_3787() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %522 = %521.0;
    (%522,)
  };
  %523() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_11713(%var_11711: float64, %var_11712: Tensor[(12, 3, 13), float64]) -> (Tensor[(12, 3, 13), float64], Tensor[(12, 3, 13), float64]) {
  @func_11709(%var_11711, %var_11712) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(12, 3, 13), float64]) */
}

def @func_2687() -> Tensor[(3, 8, 12), float32] {
  %525 = fn () -> Tensor[(3, 8, 12), float32] {
    %524 = @func_2501() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
    %524.1
  };
  %525() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_12863() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %526 = @func_7212() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %527 = @func_11117() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %528 = %526.0;
  %529 = %527.0;
  (%528, %529)
}

def @func_9143() -> Tensor[(320), int64] {
  %530 = @func_6049() /* ty=(Tensor[(320), int64],) */;
  %530.0
}

def @func_9195(%var_9186: Tensor[(336, 1), float64], %var_9187: Tensor[(10, 63), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(336, 1), float64], Tensor[(10, 63), uint32], Tensor[(3, 8, 12), float32]) {
  %531 = @func_6297() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %532 = cast(%var_9186, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %533 = cast(%var_9187, dtype="uint32") /* ty=Tensor[(10, 63), uint32] */;
  %534 = reshape(%532, newshape=[1, 336]) /* ty=Tensor[(1, 336), float64] */;
  %535 = reshape(%533, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %536 = @func_3557(%534, %535) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %537 = @func_7664() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %538 = %531.0;
  %539 = %536.9;
  %540 = %537.0;
  (%538, %539, %var_9186, %var_9187, %540)
}

def @func_9040(%var_9039: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), float64],) {
  %543 = fn (%var_9026: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), float64],) {
    %541 = cast(%var_9026, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
    %542 = exp(%541) /* ty=Tensor[(15, 2, 14), float64] */;
    (%542,)
  };
  %543(%var_9039) /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_12169() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  @func_12167() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_2983() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */
}

def @func_12770() -> Tensor[(320), int64] {
  @func_12768() /* ty=Tensor[(320), int64] */
}

def @func_4132(%var_4131: Tensor[(320), int64]) -> (Tensor[(16, 16, 6), float64], Tensor[(4, 16, 5), float64], Tensor[(320), int64], Tensor[(3, 8, 12), float32]) {
  %553 = fn (%var_4124: Tensor[(320), int64]) -> (Tensor[(16, 16, 6), float64], Tensor[(4, 16, 5), float64], Tensor[(320), int64], Tensor[(3, 8, 12), float32]) {
    %544 = @func_3770() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %545 = cast(%var_4124, dtype="int64") /* ty=Tensor[(320), int64] */;
    %546 = cast(%var_4124, dtype="int64") /* ty=Tensor[(320), int64] */;
    %547 = reshape(%545, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
    %548 = reshape(%546, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
    %549 = @func_2715(%547, %548) /* ty=(Tensor[(4, 16, 5), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
    %550 = %544.0;
    %551 = %549.0;
    %552 = @func_3585() /* ty=Tensor[(3, 8, 12), float32] */;
    (%550, %551, %var_4124, %552)
  };
  %553(%var_4131) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(4, 16, 5), float64], Tensor[(320), int64], Tensor[(3, 8, 12), float32]) */
}

def @func_2760() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) {
  @func_2758() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */
}

def @func_12489() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  %557 = fn () -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
    %554 = @func_11410() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */;
    %555 = @func_2686() /* ty=Tensor[(3, 8, 12), float32] */;
    %556 = %554.1;
    (%555, %556)
  };
  %557() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */
}

def @func_5064() -> (Tensor[(3, 8, 12), float32],) {
  %558 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %559 = %558.0;
  (%559,)
}

def @func_9405() -> (Tensor[(16, 16, 6), float64],) {
  @func_9403() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_11314(%var_11313: Tensor[(2, 1056), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(2, 1056), bool]) {
  %565 = fn (%var_11307: Tensor[(2, 1056), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(2, 1056), bool]) {
    %560 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %561 = cast(%var_11307, dtype="bool") /* ty=Tensor[(2, 1056), bool] */;
    %562 = reshape(%561, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), bool] */;
    %563 = %560.0;
    %564 = @func_2207(%562) /* ty=Tensor[(12, 11, 16), bool] */;
    (%563, %564, %var_11307)
  };
  %565(%var_11313) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(2, 1056), bool]) */
}

def @func_11943() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %570 = fn () -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
    %566 = @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %567 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %568 = %566.0;
    %569 = %567.0;
    (%568, %569)
  };
  %570() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_4067() -> (Tensor[(3, 8, 12), float32],) {
  %571 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %572 = %571.1;
  (%572,)
}

def @func_2919() -> Tensor[(3, 8, 12), float32] {
  @func_2686() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_3586() -> Tensor[(3, 8, 12), float32] {
  %574 = fn () -> Tensor[(3, 8, 12), float32] {
    %573 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
    %573.1
  };
  %574() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_6685() -> (Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  @func_6683() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_2654() -> Tensor[(16, 16, 6), float64] {
  @func_2652() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_487(%var_485: Tensor[(14, 9, 5), uint32]) -> (Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) {
  @func_484(%var_485) /* ty=(Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */
}

def @func_6910() -> (Tensor[(16, 16, 6), float64],) {
  %575 = @func_4704() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %576 = %575.0;
  (%576,)
}

def @func_11869() -> (Tensor[(16, 16, 6), float64],) {
  %577 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %578 = %577.0;
  (%578,)
}

def @func_9145() -> Tensor[(320), int64] {
  @func_9143() /* ty=Tensor[(320), int64] */
}

def @func_9426() -> Tensor[(16, 16, 6), float64] {
  @func_9424() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_3788() -> (Tensor[(16, 16, 6), float64],) {
  %580 = fn () -> (Tensor[(16, 16, 6), float64],) {
    %579 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
    (%579,)
  };
  %580() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_94(%var_92: Tensor[(15, 16, 7), float32]) -> (Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) {
  @func_91(%var_92) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */
}

def @func_7243() -> (Tensor[(3, 8, 12), float32],) {
  %581 = @func_6760() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %582 = %581.0;
  (%582,)
}

def @func_4324(%var_4322: Tensor[(528, 4), float32], %var_4323: Tensor[(528, 4), float32]) -> (Tensor[(528, 4), float64], Tensor[(12, 11, 16), bool], Tensor[(528, 4), uint64]) {
  @func_4320(%var_4322, %var_4323) /* ty=(Tensor[(528, 4), float64], Tensor[(12, 11, 16), bool], Tensor[(528, 4), uint64]) */
}

def @func_7074() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  %583 = @func_6683() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %584 = @func_4067() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %585 = %583.9;
  %586 = %584.0;
  (%585, %586)
}

def @func_11418() -> (Tensor[(3, 8, 12), float32],) {
  %589 = fn () -> (Tensor[(3, 8, 12), float32],) {
    %587 = @func_8049() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
    %588 = %587.1;
    (%588,)
  };
  %589() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_2599(%var_2597: Tensor[(3, 1, 11), int32], %var_2598: Tensor[(3, 8, 11), int32]) -> Tensor[(3, 8, 11), bool] {
  %592 = fn (%var_2588: Tensor[(3, 1, 11), int32], %var_2589: Tensor[(3, 8, 11), int32]) -> Tensor[(3, 8, 11), bool] {
    %590 = cast(%var_2588, dtype="bool") /* ty=Tensor[(3, 1, 11), bool] */;
    %591 = cast(%var_2589, dtype="bool") /* ty=Tensor[(3, 8, 11), bool] */;
    less(%590, %591) /* ty=Tensor[(3, 8, 11), bool] */
  };
  %592(%var_2597, %var_2598) /* ty=Tensor[(3, 8, 11), bool] */
}

def @func_5882() -> Tensor[(16, 16, 6), float64] {
  @func_5880() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_5377() -> Tensor[(3, 8, 12), float32] {
  %593 = fn () -> Tensor[(3, 8, 12), float32] {
    @func_3643() /* ty=Tensor[(3, 8, 12), float32] */
  };
  %593() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_5816(%var_5814: Tensor[(3, 8, 12), float32]) -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), uint8], Tensor[(3, 8, 12), float32]) {
  @func_5813(%var_5814) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), uint8], Tensor[(3, 8, 12), float32]) */
}

def @func_3222() -> Tensor[(16, 16, 6), float64] {
  @func_2652() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_9641() -> Tensor[(16, 16, 6), float64] {
  @func_9639() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_8435() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_6912() -> (Tensor[(16, 16, 6), float64],) {
  @func_6910() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_12720() -> (Tensor[(630), uint32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  @func_12718() /* ty=(Tensor[(630), uint32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */
}

def @func_2210(%var_2208: Tensor[(12, 11, 16), bool]) -> Tensor[(12, 11, 16), bool] {
  @func_2207(%var_2208) /* ty=Tensor[(12, 11, 16), bool] */
}

def @func_6189() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  %599 = fn () -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
    %594 = @func_5376() /* ty=Tensor[(3, 8, 12), float32] */;
    %595 = cast(%594, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    %596 = @func_3491() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
    %597 = sqrt(%595) /* ty=Tensor[(3, 8, 12), float32] */;
    %598 = %596.1;
    (%597, %598)
  };
  %599() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */
}

def @func_7245() -> (Tensor[(3, 8, 12), float32],) {
  @func_7243() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_6983(%var_6976: Tensor[(5, 7, 4), float32]) -> (Tensor[(1, 3, 15), float64], Tensor[(360), float64], Tensor[(5, 7, 4), uint8]) {
  %600 = cast(meta[relay.Constant][36] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %601 = reshape(%600, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
  %602 = @func_2897(%601) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) */;
  %603 = @func_5924() /* ty=(Tensor[(192), float64], Tensor[(3, 8, 12), float32], Tensor[(5, 7, 4), float32]) */;
  %604 = %603.2;
  %605 = cast(%var_6976, dtype="uint8") /* ty=Tensor[(5, 7, 4), uint8] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="uint8") /* ty=Tensor[(5, 7, 4), uint8] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %609 = %602.1;
  %610 = minimum(%607, %608) /* ty=Tensor[(5, 7, 4), uint8] */;
  (%609, meta[relay.Constant][36] /* ty=Tensor[(360), float64] */, %610)
}

def @func_293(%var_291: Tensor[(6, 4, 8), float64], %var_292: Tensor[(1680), float32]) -> (Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(6, 4, 8), uint32], Tensor[(6, 4, 8), float32]) {
  %631 = fn (%var_258: Tensor[(6, 4, 8), float64], %var_264: Tensor[(1680), float32]) -> (Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(6, 4, 8), uint32], Tensor[(6, 4, 8), float32]) {
    %611 = cast(%var_264, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %612 = reshape(%611, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
    %613 = @func_91(%612) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */;
    %614 = cast(%var_258, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
    %615 = acosh(%614) /* ty=Tensor[(6, 4, 8), float32] */;
    %616 = cast(%615, dtype="float64") /* ty=Tensor[(6, 4, 8), float64] */;
    %617 = asinh(%616) /* ty=Tensor[(6, 4, 8), float64] */;
    %618 = cast(%615, dtype="uint32") /* ty=Tensor[(6, 4, 8), uint32] */;
    %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%617, dtype="uint32") /* ty=Tensor[(6, 4, 8), uint32] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %622 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 4, 8), float64] */;
    %623 = shape_of(%var_258, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(%var_258, dtype="float64") /* ty=Tensor[(6, 4, 8), float64] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %626 = mod(%624, %625) /* ty=Tensor[(6, 4, 8), float64] */;
    %627 = cast(%626, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
    %628 = %613.2;
    %629 = logical_xor(%620, %621) /* ty=Tensor[(6, 4, 8), uint32] */;
    %630 = log2(%627) /* ty=Tensor[(6, 4, 8), float32] */;
    (%628, %var_264, %629, %630)
  };
  %631(%var_291, %var_292) /* ty=(Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(6, 4, 8), uint32], Tensor[(6, 4, 8), float32]) */
}

def @func_6275(%var_6272: Tensor[(11, 8, 11), float32], %var_6273: Tensor[(11, 8, 11), float32], %var_6274: Tensor[(11, 8, 11), float32]) -> (Tensor[(11, 8, 11), bool], Tensor[(11, 8, 11), float64]) {
  @func_6270(%var_6272, %var_6273, %var_6274) /* ty=(Tensor[(11, 8, 11), bool], Tensor[(11, 8, 11), float64]) */
}

def @func_4142(%var_4140: Tensor[(13, 6, 13), float32]) -> Tensor[(13, 6, 13), float32] {
  @func_4139(%var_4140) /* ty=Tensor[(13, 6, 13), float32] */
}

def @func_10992(%var_10991: Tensor[(13, 1, 11), float32]) -> (Tensor[(13, 1, 11), float32],) {
  %634 = fn (%var_10980: Tensor[(13, 1, 11), float32]) -> (Tensor[(13, 1, 11), float32],) {
    %632 = cast(%var_10980, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
    %633 = atan(%632) /* ty=Tensor[(13, 1, 11), float32] */;
    (%633,)
  };
  %634(%var_10991) /* ty=(Tensor[(13, 1, 11), float32],) */
}

def @func_11605(%var_11602: Tensor[(2112), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), bool], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(3, 8, 12), float32], Tensor[(2112), bool]) {
  %635 = @func_6910() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %636 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %637 = %636.1;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %639 = reshape(%638, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %640 = @func_1998(%639) /* ty=Tensor[(3, 8, 12), float32] */;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %642 = reshape(%641, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %643 = @func_11410() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) */;
  %644 = @func_4879() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %645 = @func_7607() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) */;
  %646 = cast(%var_11602, dtype="bool") /* ty=Tensor[(2112), bool] */;
  %647 = reshape(%646, newshape=[528, 4]) /* ty=Tensor[(528, 4), bool] */;
  %648 = @func_3754(%647) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */;
  %649 = %635.0;
  %650 = @func_8782(%642) /* ty=Tensor[(3, 8, 12), bool] */;
  %651 = %643.0;
  %652 = %644.0;
  %653 = %645.3;
  %654 = %648.6;
  (%649, %637, %640, %650, %651, %652, %653, %654, %var_11602)
}

def @func_9553(%var_9552: Tensor[(360), float64]) -> (Tensor[(16, 16, 6), float32], Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(8, 3, 15), bool], Tensor[(360), float64], Tensor[(528, 4), float32]) {
  %667 = fn (%var_9536: Tensor[(360), float64]) -> (Tensor[(16, 16, 6), float32], Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(8, 3, 15), bool], Tensor[(360), float64], Tensor[(528, 4), float32]) {
    %655 = @func_8766() /* ty=(Tensor[(16, 16, 6), float32],) */;
    %656 = cast(meta[relay.Constant][38] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %657 = reshape(%656, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
    %658 = @func_91(%657) /* ty=(Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) */;
    %659 = cast(%var_9536, dtype="float64") /* ty=Tensor[(360), float64] */;
    %660 = reshape(%659, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
    %661 = @func_2897(%660) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) */;
    %662 = @func_4279() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(528, 4), float32], Tensor[(2112), bool]) */;
    %663 = %655.0;
    %664 = %658.2;
    %665 = %661.2;
    %666 = %662.1;
    (%663, %664, meta[relay.Constant][38] /* ty=Tensor[(1680), float32] */, %665, %var_9536, %666)
  };
  %667(%var_9552) /* ty=(Tensor[(16, 16, 6), float32], Tensor[(15, 16, 7), int8], Tensor[(1680), float32], Tensor[(8, 3, 15), bool], Tensor[(360), float64], Tensor[(528, 4), float32]) */
}

def @func_2502() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) {
  %672 = fn () -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) {
    %668 = cast(meta[relay.Constant][39] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %669 = reshape(%668, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
    %670 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
    %671 = @func_1998(%669) /* ty=Tensor[(3, 8, 12), float32] */;
    (%670, %671, meta[relay.Constant][39] /* ty=Tensor[(288), float32] */)
  };
  %672() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */
}

def @func_4771(%var_4769: Tensor[(2, 15, 6), float64]) -> (Tensor[(2, 15, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(630), uint32], Tensor[(192), float64]) {
  @func_4768(%var_4769) /* ty=(Tensor[(2, 15, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(630), uint32], Tensor[(192), float64]) */
}

def @func_10026(%var_10024: Tensor[(132, 16), bool], %var_10025: Tensor[(2, 180), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(132, 16), bool], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(9, 16, ?), uint8], Tensor[(16, 16, 6), float64], Tensor[(11, 5, 13), float64], Tensor[(715), float64], Tensor[(8, 3, 15), bool], Tensor[(2, 180), float64]) {
  %701 = fn (%var_9927: Tensor[(132, 16), bool], %var_10012: Tensor[(2, 180), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(132, 16), bool], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(9, 16, ?), uint8], Tensor[(16, 16, 6), float64], Tensor[(11, 5, 13), float64], Tensor[(715), float64], Tensor[(8, 3, 15), bool], Tensor[(2, 180), float64]) {
    %673 = @func_6683() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
    %674 = cast(%var_9927, dtype="bool") /* ty=Tensor[(132, 16), bool] */;
    %675 = reshape(%674, newshape=[528, 4]) /* ty=Tensor[(528, 4), bool] */;
    %676 = @func_3754(%675) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */;
    %677 = @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %678 = @func_5572() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
    %679 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %680 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 16, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 16, 1), float32] */;
    %681 = erf(%680) /* ty=Tensor[(9, 16, 1), float32] */;
    %682 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 16, 1), float32] */, dtype="uint8") /* ty=Tensor[(9, 16, 1), uint8] */;
    %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
    %684 = cast(%681, dtype="uint8") /* ty=Tensor[(9, 16, 1), uint8] */;
    %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %686 = @func_7212() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %687 = cast(meta[relay.Constant][41] /* ty=Tensor[(715), float64] */, dtype="float64") /* ty=Tensor[(715), float64] */;
    %688 = reshape(%687, newshape=[11, 5, 13]) /* ty=Tensor[(11, 5, 13), float64] */;
    %689 = cast(%var_10012, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
    %690 = reshape(%689, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
    %691 = @func_2897(%690) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) */;
    %692 = %673.7;
    %693 = %676.4;
    %694 = %677.0;
    %695 = %678.2;
    %696 = %679.0;
    %697 = left_shift(%684, %685) /* ty=Tensor[(9, 16, ?), uint8] */;
    %698 = %686.0;
    %699 = @func_4618(%688) /* ty=Tensor[(11, 5, 13), float64] */;
    %700 = %691.2;
    (%692, %693, %var_9927, %694, %695, %696, %697, %698, %699, meta[relay.Constant][41] /* ty=Tensor[(715), float64] */, %700, %var_10012)
  };
  %701(%var_10024, %var_10025) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(132, 16), bool], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(9, 16, ?), uint8], Tensor[(16, 16, 6), float64], Tensor[(11, 5, 13), float64], Tensor[(715), float64], Tensor[(8, 3, 15), bool], Tensor[(2, 180), float64]) */
}

def @func_3466() -> (Tensor[(16, 16, 6), float64],) {
  %703 = fn () -> (Tensor[(16, 16, 6), float64],) {
    %702 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
    (%702,)
  };
  %703() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_11410() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  %704 = @func_3643() /* ty=Tensor[(3, 8, 12), float32] */;
  %705 = @func_9846() /* ty=Tensor[(16, 16, 6), float64] */;
  (%704, %705)
}

def @func_10813() -> (Tensor[(16, 16, 6), float64],) {
  %708 = fn () -> (Tensor[(16, 16, 6), float64],) {
    %706 = @func_4704() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %707 = %706.0;
    (%707,)
  };
  %708() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_8049() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  %709 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %710 = @func_4961() /* ty=Tensor[(3, 8, 12), float32] */;
  %711 = %709.0;
  (%710, %711)
}

def @func_11682(%var_11680: Tensor[(715), float64]) -> (Tensor[(715), uint64],) {
  @func_11679(%var_11680) /* ty=(Tensor[(715), uint64],) */
}

def @func_9475() -> (Tensor[(16, 16, 6), float64], Tensor[(192), float64]) {
  @func_9473() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(192), float64]) */
}

def @main(%var_13269: float64, %var_13270: Tensor[(1, 14, 8), float64]) -> Tensor[(1, 14, 8), float64] {
  %712 = cast(%var_13269, dtype="float64") /* ty=float64 */;
  %713 = cast(%var_13270, dtype="float64") /* ty=Tensor[(1, 14, 8), float64] */;
  power(%712, %713) /* ty=Tensor[(1, 14, 8), float64] */
}

def @func_6442() -> (Tensor[(5, 7, 4), float32], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64]) {
  %714 = @func_5593() /* ty=(Tensor[(5, 7, 4), float32],) */;
  %715 = @func_6297() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %716 = %714.0;
  %717 = @func_2919() /* ty=Tensor[(3, 8, 12), float32] */;
  %718 = %715.0;
  (%716, %717, %718)
}

def @func_5203() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  @func_5201() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */
}

def @func_3493() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  @func_3491() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */
}

def @func_4913(%var_4912: Tensor[(10, 2, 5), uint8]) -> Tensor[(10, 2, 5), uint8] {
  %723 = fn (%var_4903: Tensor[(10, 2, 5), uint8]) -> Tensor[(10, 2, 5), uint8] {
    %719 = cast(%var_4903, dtype="uint8") /* ty=Tensor[(10, 2, 5), uint8] */;
    %720 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(10, 2, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %721 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 2, 5), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 5), uint8] */;
    %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    add(%721, %722) /* ty=Tensor[(10, 2, 5), uint8] */
  };
  %723(%var_4912) /* ty=Tensor[(10, 2, 5), uint8] */
}

def @func_8915(%var_8844: Tensor[(24, 14), float64], %var_8887: Tensor[(16, 16, 6), float64]) -> (Tensor[(144, 2), float32], Tensor[(630), uint32], Tensor[(24, 14), float32], Tensor[(16, 16, 6), int8], Tensor[(16, 16, 6), float64], Tensor[(24, 14), float32], Tensor[(16, 16, 6), float64]) {
  %724 = cast(%var_8844, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %725 = cast(meta[relay.Constant][43] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %726 = reshape(%724, newshape=[1, 336]) /* ty=Tensor[(1, 336), float64] */;
  %727 = reshape(%725, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %728 = @func_3557(%726, %727) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %729 = cast(%var_8844, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %730 = log2(%729) /* ty=Tensor[(24, 14), float64] */;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %732 = @func_4704() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %733 = %732.0;
  %734 = cast(%var_8887, dtype="int8") /* ty=Tensor[(16, 16, 6), int8] */;
  %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%733, dtype="int8") /* ty=Tensor[(16, 16, 6), int8] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %738 = cast(%var_8844, dtype="bool") /* ty=Tensor[(24, 14), bool] */;
  %739 = shape_of(%730, dtype="int32") /* ty=Tensor[(2), int32] */;
  %740 = cast(%730, dtype="bool") /* ty=Tensor[(24, 14), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %742 = less(%740, %741) /* ty=Tensor[(24, 14), bool] */;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %744 = %728.7;
  %745 = acos(%731) /* ty=Tensor[(24, 14), float32] */;
  %746 = subtract(%736, %737) /* ty=Tensor[(16, 16, 6), int8] */;
  %747 = @func_5332() /* ty=Tensor[(16, 16, 6), float64] */;
  %748 = sigmoid(%743) /* ty=Tensor[(24, 14), float32] */;
  %749 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  (%744, meta[relay.Constant][43] /* ty=Tensor[(630), uint32] */, %745, %746, %747, %748, %749)
}

def @func_5315() -> (Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) {
  @func_5313() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) */
}

def @func_8782(%var_8774: Tensor[(3, 8, 12), float32]) -> Tensor[(3, 8, 12), bool] {
  %750 = @func_6760() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %751 = %750.0;
  %752 = cast(%var_8774, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%751, dtype="bool") /* ty=Tensor[(3, 8, 12), bool] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%754, %755) /* ty=Tensor[(3, 8, 12), bool] */
}

def @func_11972() -> Tensor[(320), int64] {
  @func_11970() /* ty=Tensor[(320), int64] */
}

def @func_11051(%var_11049: uint32) -> (Tensor[(1, 5, 8), uint32],) {
  @func_11048(%var_11049) /* ty=(Tensor[(1, 5, 8), uint32],) */
}

def @func_3560(%var_3558: Tensor[(1, 336), float64], %var_3559: Tensor[(630), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %783 = fn (%var_3518: Tensor[(1, 336), float64], %var_3521: Tensor[(630), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
    %756 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %757 = cast(%var_3518, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
    %758 = cast(%var_3518, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
    %759 = reshape(%757, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
    %760 = reshape(%758, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
    %761 = cast(%var_3521, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %762 = reshape(%761, newshape=[630]) /* ty=Tensor[(630), uint32] */;
    %763 = @func_2559(%762) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(1680), float32], Tensor[(15, 16, 7), int16], Tensor[(15, 16, 7), bool], Tensor[(630), uint32]) */;
    %764 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %765 = %764.0;
    %766 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
    %767 = cast(%766, dtype="uint32") /* ty=Tensor[(16, 16, 6), uint32] */;
    %768 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
    %769 = cast(%765, dtype="uint32") /* ty=Tensor[(16, 16, 6), uint32] */;
    %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %771 = cast(meta[relay.Constant][44] /* ty=Tensor[(144, 2), float32] */, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
    %772 = reshape(%771, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
    %773 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %774 = cast(meta[relay.Constant][44] /* ty=Tensor[(144, 2), float32] */, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
    %775 = reshape(%774, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
    %776 = %756.0;
    %777 = @func_2266(%759, %760) /* ty=Tensor[(6, 14, 4), float64] */;
    %778 = %763.1;
    %779 = bitwise_or(%769, %770) /* ty=Tensor[(16, 16, 6), uint32] */;
    %780 = @func_1998(%772) /* ty=Tensor[(3, 8, 12), float32] */;
    %781 = %773.0;
    %782 = @func_1998(%775) /* ty=Tensor[(3, 8, 12), float32] */;
    (%776, %777, %var_3518, %778, %var_3521, %779, %780, meta[relay.Constant][44] /* ty=Tensor[(144, 2), float32] */, %781, %782)
  };
  %783(%var_3558, %var_3559) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(1, 336), float64], Tensor[(1680), float32], Tensor[(630), uint32], Tensor[(16, 16, 6), uint32], Tensor[(3, 8, 12), float32], Tensor[(144, 2), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_11815() -> Tensor[(6, 14, 4), float64] {
  %784 = @func_3144() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) */;
  %784.1
}

def @func_5593() -> (Tensor[(5, 7, 4), float32],) {
  %785 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 7, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 4), float32] */;
  %786 = rsqrt(%785) /* ty=Tensor[(5, 7, 4), float32] */;
  (%786,)
}

def @func_5160(%var_5159: Tensor[(630), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(2, 840), float32], Tensor[(630), uint32]) {
  %792 = fn (%var_5151: Tensor[(630), uint32]) -> (Tensor[(16, 16, 6), float64], Tensor[(2, 840), float32], Tensor[(630), uint32]) {
    %787 = cast(%var_5151, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %788 = reshape(%787, newshape=[14, 9, 5]) /* ty=Tensor[(14, 9, 5), uint32] */;
    %789 = @func_484(%788) /* ty=(Tensor[(14, 9, 5), uint32], Tensor[(14, 9, 5), bool], Tensor[(15, 16, 7), bool], Tensor[(2, 840), float32], Tensor[(15, 16, 7), bool], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
    %790 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
    %791 = %789.3;
    (%790, %791, %var_5151)
  };
  %792(%var_5159) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(2, 840), float32], Tensor[(630), uint32]) */
}

def @func_8204() -> Tensor[(192), float64] {
  %793 = @func_4030() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */;
  %793.2
}

def @func_6152(%var_6138: Tensor[(675), float32]) -> (Tensor[(16, 16, 6), float64], Tensor[(9, 5, 15), float32], Tensor[(675), float32]) {
  %794 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %795 = cast(%var_6138, dtype="float32") /* ty=Tensor[(675), float32] */;
  %796 = reshape(%795, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), float32] */;
  %797 = %794.0;
  %798 = @func_5851(%796) /* ty=Tensor[(9, 5, 15), float32] */;
  (%797, %798, %var_6138)
}

def @func_3772() -> (Tensor[(16, 16, 6), float64],) {
  @func_3770() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_8985() -> (Tensor[(3, 8, 12), float32], Tensor[(1, 3, 15), float64], Tensor[(70, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) {
  %811 = fn () -> (Tensor[(3, 8, 12), float32], Tensor[(1, 3, 15), float64], Tensor[(70, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) {
    %799 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %800 = cast(meta[relay.Constant][46] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
    %801 = reshape(%800, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), float32] */;
    %802 = @func_6983(%801) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(360), float64], Tensor[(5, 7, 4), uint8]) */;
    %803 = @func_7607() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) */;
    %804 = @func_7664() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %805 = @func_6049() /* ty=(Tensor[(320), int64],) */;
    %806 = %799.0;
    %807 = %802.0;
    %808 = %803.1;
    %809 = %804.0;
    %810 = %805.0;
    (%806, %807, meta[relay.Constant][46] /* ty=Tensor[(70, 2), float32] */, %808, %809, %810)
  };
  %811() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1, 3, 15), float64], Tensor[(70, 2), float32], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */
}

def @func_6683() -> (Tensor[(16, 16, 6), float64], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(16, 7, 12), float32], Tensor[(320), int64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %812 = @func_5201() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
  %813 = cast(meta[relay.Constant][47] /* ty=Tensor[(100), uint8] */, dtype="uint8") /* ty=Tensor[(100), uint8] */;
  %814 = reshape(%813, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), uint8] */;
  %815 = cast(meta[relay.Constant][48] /* ty=Tensor[(675), float32] */, dtype="float32") /* ty=Tensor[(675), float32] */;
  %816 = reshape(%815, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), float32] */;
  %817 = @func_4911(%814) /* ty=Tensor[(10, 2, 5), uint8] */;
  %818 = cast(%817, dtype="uint8") /* ty=Tensor[(10, 2, 5), uint8] */;
  %819 = reshape(%818, newshape=[100]) /* ty=Tensor[(100), uint8] */;
  %820 = @func_6086(%819) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) */;
  %821 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %822 = @func_4879() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %823 = @func_3787() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %824 = %822.0;
  %825 = cast(%824, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %826 = reshape(%825, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %827 = %812.0;
  %828 = @func_5851(%816) /* ty=Tensor[(9, 5, 15), float32] */;
  %829 = %820.0;
  %830 = %821.2;
  %831 = %823.0;
  %832 = @func_1998(%826) /* ty=Tensor[(3, 8, 12), float32] */;
  (%827, %817, meta[relay.Constant][47] /* ty=Tensor[(100), uint8] */, %828, meta[relay.Constant][48] /* ty=Tensor[(675), float32] */, %829, %830, %824, %831, %832)
}

def @func_2269(%var_2267: Tensor[(6, 14, 4), float64], %var_2268: Tensor[(6, 14, 4), float64]) -> Tensor[(6, 14, 4), float64] {
  %837 = fn (%var_2260: Tensor[(6, 14, 4), float64], %var_2261: Tensor[(6, 14, 4), float64]) -> Tensor[(6, 14, 4), float64] {
    %833 = cast(%var_2261, dtype="float64") /* ty=Tensor[(6, 14, 4), float64] */;
    %834 = shape_of(%var_2260, dtype="int32") /* ty=Tensor[(3), int32] */;
    %835 = cast(%var_2260, dtype="float64") /* ty=Tensor[(6, 14, 4), float64] */;
    %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%835, %836) /* ty=Tensor[(6, 14, 4), float64] */
  };
  %837(%var_2267, %var_2268) /* ty=Tensor[(6, 14, 4), float64] */
}

def @func_9492() -> Tensor[(2112), float32] {
  %838 = @func_6371() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(2112), bool]) */;
  %839 = %838.2;
  %840 = cast(%839, dtype="float32") /* ty=Tensor[(2112), float32] */;
  exp(%840) /* ty=Tensor[(2112), float32] */
}

def @func_3956() -> (Tensor[(16, 16, 6), float64],) {
  @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_11255(%var_11193: Tensor[(968), float32]) -> (Tensor[(16, 16, 6), float64], Tensor[(11, 8, 11), bool], Tensor[(16, 16, 6), float64], Tensor[(1, 360), float64], Tensor[(360), float64], Tensor[(1, 5, 8), uint32], Tensor[(968), uint64], Tensor[(968), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %841 = cast(%var_11193, dtype="float32") /* ty=Tensor[(968), float32] */;
  %842 = cast(%var_11193, dtype="float32") /* ty=Tensor[(968), float32] */;
  %843 = cast(%var_11193, dtype="float32") /* ty=Tensor[(968), float32] */;
  %844 = reshape(%841, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
  %845 = reshape(%842, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
  %846 = reshape(%843, newshape=[11, 8, 11]) /* ty=Tensor[(11, 8, 11), float32] */;
  %847 = @func_6270(%844, %845, %846) /* ty=(Tensor[(11, 8, 11), bool], Tensor[(11, 8, 11), float64]) */;
  %848 = cast(meta[relay.Constant][49] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %849 = reshape(%848, newshape=[1, 360]) /* ty=Tensor[(1, 360), float64] */;
  %850 = @func_10234(%849) /* ty=(Tensor[(192), float64], Tensor[(715), float64], Tensor[(100), uint8], Tensor[(16, 16, 6), float64], Tensor[(1, 3, 15), float64], Tensor[(1, 360), float64]) */;
  %851 = cast(meta[relay.Constant][50] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %852 = reshape(%851, newshape=[]) /* ty=uint32 */;
  %853 = @func_11048(%852) /* ty=(Tensor[(1, 5, 8), uint32],) */;
  %854 = cast(%var_11193, dtype="float64") /* ty=Tensor[(968), float64] */;
  %855 = asinh(%854) /* ty=Tensor[(968), float64] */;
  %856 = cast(%855, dtype="uint64") /* ty=Tensor[(968), uint64] */;
  %857 = cast(meta[relay.Constant][50] /* ty=uint32 */, dtype="uint64") /* ty=uint64 */;
  %858 = cast(%855, dtype="float32") /* ty=Tensor[(968), float32] */;
  %859 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %860 = @func_7664() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %861 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  %862 = %847.0;
  %863 = @func_5880() /* ty=Tensor[(16, 16, 6), float64] */;
  %864 = %850.5;
  %865 = %853.0;
  %866 = left_shift(%856, %857) /* ty=Tensor[(968), uint64] */;
  %867 = asin(%858) /* ty=Tensor[(968), float32] */;
  %868 = %859.0;
  %869 = %860.0;
  (%861, %862, %863, %864, meta[relay.Constant][49] /* ty=Tensor[(360), float64] */, %865, %866, %867, %868, %869)
}

def @func_3204() -> (Tensor[(16, 16, 6), float64],) {
  @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_2715(%var_2691: Tensor[(4, 16, 5), int64], %var_2692: Tensor[(4, 16, 5), int64]) -> (Tensor[(4, 16, 5), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) {
  %870 = cast(%var_2692, dtype="int64") /* ty=Tensor[(4, 16, 5), int64] */;
  %871 = shape_of(%var_2691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%var_2691, dtype="int64") /* ty=Tensor[(4, 16, 5), int64] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %874 = logical_xor(%872, %873) /* ty=Tensor[(4, 16, 5), int64] */;
  %875 = cast(%874, dtype="float64") /* ty=Tensor[(4, 16, 5), float64] */;
  %876 = cast(meta[relay.Constant][51] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %877 = reshape(%876, newshape=[3, 8, 12]) /* ty=Tensor[(3, 8, 12), float32] */;
  %878 = cos(%875) /* ty=Tensor[(4, 16, 5), float64] */;
  %879 = @func_1998(%877) /* ty=Tensor[(3, 8, 12), float32] */;
  (%878, %879, meta[relay.Constant][51] /* ty=Tensor[(288), float32] */)
}

def @func_11258(%var_11256: Tensor[(968), float32]) -> (Tensor[(16, 16, 6), float64], Tensor[(11, 8, 11), bool], Tensor[(16, 16, 6), float64], Tensor[(1, 360), float64], Tensor[(360), float64], Tensor[(1, 5, 8), uint32], Tensor[(968), uint64], Tensor[(968), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  @func_11255(%var_11256) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(11, 8, 11), bool], Tensor[(16, 16, 6), float64], Tensor[(1, 360), float64], Tensor[(360), float64], Tensor[(1, 5, 8), uint32], Tensor[(968), uint64], Tensor[(968), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_7955(%var_7954: Tensor[(264), int32]) -> (Tensor[(16, 16, 6), float64], Tensor[(2112), bool], Tensor[(16, 16, 6), uint8], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) {
  %896 = fn (%var_7945: Tensor[(264), int32]) -> (Tensor[(16, 16, 6), float64], Tensor[(2112), bool], Tensor[(16, 16, 6), uint8], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) {
    %880 = cast(meta[relay.Constant][52] /* ty=Tensor[(2112), bool] */, dtype="bool") /* ty=Tensor[(2112), bool] */;
    %881 = reshape(%880, newshape=[528, 4]) /* ty=Tensor[(528, 4), bool] */;
    %882 = @func_3754(%881) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(12, 11, 16), bool], Tensor[(1680), float32], Tensor[(5, 126), uint32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(528, 4), float64], Tensor[(528, 4), float64], Tensor[(16, 16, 6), float64], Tensor[(528, 4), float32]) */;
    %883 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
    %884 = %883.0;
    %885 = cast(meta[relay.Constant][53] /* ty=Tensor[(16, 16, 6), float64] */, dtype="uint8") /* ty=Tensor[(16, 16, 6), uint8] */;
    %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(3), int32] */;
    %887 = cast(%884, dtype="uint8") /* ty=Tensor[(16, 16, 6), uint8] */;
    %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %889 = cast(meta[relay.Constant][54] /* ty=Tensor[(33), int32] */, dtype="int32") /* ty=Tensor[(33), int32] */;
    %890 = cast(%var_7945, dtype="int32") /* ty=Tensor[(264), int32] */;
    %891 = reshape(%889, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int32] */;
    %892 = reshape(%890, newshape=[3, 8, 11]) /* ty=Tensor[(3, 8, 11), int32] */;
    %893 = %882.4;
    %894 = add(%887, %888) /* ty=Tensor[(16, 16, 6), uint8] */;
    %895 = @func_2596(%891, %892) /* ty=Tensor[(3, 8, 11), bool] */;
    (%893, meta[relay.Constant][52] /* ty=Tensor[(2112), bool] */, %894, %895, meta[relay.Constant][54] /* ty=Tensor[(33), int32] */, %var_7945)
  };
  %896(%var_7954) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(2112), bool], Tensor[(16, 16, 6), uint8], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) */
}

def @func_5201() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %897 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %898 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %899 = %897.0;
  %900 = %898.0;
  (%899, %900)
}

def @func_8767() -> (Tensor[(16, 16, 6), float32],) {
  %905 = fn () -> (Tensor[(16, 16, 6), float32],) {
    %901 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
    %902 = %901.0;
    %903 = cast(%902, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
    %904 = sinh(%903) /* ty=Tensor[(16, 16, 6), float32] */;
    (%904,)
  };
  %905() /* ty=(Tensor[(16, 16, 6), float32],) */
}

def @func_5066() -> (Tensor[(3, 8, 12), float32],) {
  @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_9403() -> (Tensor[(16, 16, 6), float64],) {
  %906 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %907 = %906.0;
  (%907,)
}

def @func_11136(%var_11126: Tensor[(4, 5, 5), float64]) -> (Tensor[(4, 5, 5), float64], Tensor[(4, 5, 5), float32]) {
  %908 = cast(%var_11126, dtype="float64") /* ty=Tensor[(4, 5, 5), float64] */;
  %909 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 5, 5), float64] */, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %910 = shape_of(%var_11126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%var_11126, dtype="float32") /* ty=Tensor[(4, 5, 5), float32] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %913 = cosh(%908) /* ty=Tensor[(4, 5, 5), float64] */;
  %914 = floor_divide(%911, %912) /* ty=Tensor[(4, 5, 5), float32] */;
  (%913, %914)
}

def @func_12909() -> Tensor[(3, 8, 12), float32] {
  %916 = fn () -> Tensor[(3, 8, 12), float32] {
    %915 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %915.0
  };
  %916() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_4535(%var_4532: Tensor[(16, 16, 6), float64], %var_4533: Tensor[(336), float64], %var_4534: Tensor[(1, 33), int32]) -> (Tensor[(6, 14, 4), float64], Tensor[(336), float64], Tensor[(16, 16, 6), uint16], Tensor[(33), int32], Tensor[(1, 33), int32], Tensor[(264), int32]) {
  %939 = fn (%var_4484: Tensor[(16, 16, 6), float64], %var_4503: Tensor[(336), float64], %var_4526: Tensor[(1, 33), int32]) -> (Tensor[(6, 14, 4), float64], Tensor[(336), float64], Tensor[(16, 16, 6), uint16], Tensor[(33), int32], Tensor[(1, 33), int32], Tensor[(264), int32]) {
    %917 = cast(%var_4503, dtype="float64") /* ty=Tensor[(336), float64] */;
    %918 = cast(%var_4503, dtype="float64") /* ty=Tensor[(336), float64] */;
    %919 = reshape(%917, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
    %920 = reshape(%918, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
    %921 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
    %922 = cast(%var_4484, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
    %923 = shape_of(%921, dtype="int32") /* ty=Tensor[(3), int32] */;
    %924 = cast(%921, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
    %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %926 = mod(%924, %925) /* ty=Tensor[(16, 16, 6), float64] */;
    %927 = cast(%var_4484, dtype="uint16") /* ty=Tensor[(16, 16, 6), uint16] */;
    %928 = shape_of(%926, dtype="int32") /* ty=Tensor[(3), int32] */;
    %929 = cast(%926, dtype="uint16") /* ty=Tensor[(16, 16, 6), uint16] */;
    %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %931 = cast(%var_4526, dtype="int32") /* ty=Tensor[(1, 33), int32] */;
    %932 = cast(meta[relay.Constant][56] /* ty=Tensor[(264), int32] */, dtype="int32") /* ty=Tensor[(264), int32] */;
    %933 = reshape(%931, newshape=[33]) /* ty=Tensor[(33), int32] */;
    %934 = reshape(%932, newshape=[264]) /* ty=Tensor[(264), int32] */;
    %935 = @func_2835(%933, %934) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32]) */;
    %936 = @func_2266(%919, %920) /* ty=Tensor[(6, 14, 4), float64] */;
    %937 = right_shift(%929, %930) /* ty=Tensor[(16, 16, 6), uint16] */;
    %938 = %935.2;
    (%936, %var_4503, %937, %938, %var_4526, meta[relay.Constant][56] /* ty=Tensor[(264), int32] */)
  };
  %939(%var_4532, %var_4533, %var_4534) /* ty=(Tensor[(6, 14, 4), float64], Tensor[(336), float64], Tensor[(16, 16, 6), uint16], Tensor[(33), int32], Tensor[(1, 33), int32], Tensor[(264), int32]) */
}

def @func_5039() -> (Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) {
  %945 = fn () -> (Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) {
    %940 = @func_4829() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %941 = cast(meta[relay.Constant][57] /* ty=Tensor[(715), float64] */, dtype="float64") /* ty=Tensor[(715), float64] */;
    %942 = reshape(%941, newshape=[11, 5, 13]) /* ty=Tensor[(11, 5, 13), float64] */;
    %943 = %940.0;
    %944 = @func_4618(%942) /* ty=Tensor[(11, 5, 13), float64] */;
    (%943, %944, meta[relay.Constant][57] /* ty=Tensor[(715), float64] */)
  };
  %945() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) */
}

def @func_12718() -> (Tensor[(630), uint32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %946 = @func_10580() /* ty=(Tensor[(630), uint32],) */;
  %947 = %946.0;
  %948 = @func_2461() /* ty=Tensor[(16, 16, 6), float64] */;
  %949 = @func_3352() /* ty=Tensor[(16, 16, 6), float64] */;
  (%947, %948, %949)
}

def @func_4139(%var_4134: Tensor[(13, 6, 13), float32]) -> Tensor[(13, 6, 13), float32] {
  %950 = cast(%var_4134, dtype="float32") /* ty=Tensor[(13, 6, 13), float32] */;
  log(%950) /* ty=Tensor[(13, 6, 13), float32] */
}

def @func_4830() -> (Tensor[(3, 8, 12), float32],) {
  %952 = fn () -> (Tensor[(3, 8, 12), float32],) {
    %951 = @func_2919() /* ty=Tensor[(3, 8, 12), float32] */;
    (%951,)
  };
  %952() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_12942() -> (Tensor[(3, 13, 8), float64], Tensor[(16, 16, 6), float64]) {
  %953 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 13, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 13, 8), float64] */;
  %954 = @func_9473() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(192), float64]) */;
  %955 = cos(%953) /* ty=Tensor[(3, 13, 8), float64] */;
  %956 = %954.0;
  (%955, %956)
}

def @func_6421(%var_6420: Tensor[(10, 13, 12), float64]) -> (Tensor[(10, 13, 12), float64],) {
  %959 = fn (%var_6413: Tensor[(10, 13, 12), float64]) -> (Tensor[(10, 13, 12), float64],) {
    %957 = cast(%var_6413, dtype="float64") /* ty=Tensor[(10, 13, 12), float64] */;
    %958 = atan(%957) /* ty=Tensor[(10, 13, 12), float64] */;
    (%958,)
  };
  %959(%var_6420) /* ty=(Tensor[(10, 13, 12), float64],) */
}

def @func_12823() -> (Tensor[(16, 16, 6), float64],) {
  %960 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %961 = %960.0;
  (%961,)
}

def @func_6007() -> Tensor[(16, 16, 6), float64] {
  %963 = fn () -> Tensor[(16, 16, 6), float64] {
    %962 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %962.0
  };
  %963() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_10314() -> (Tensor[(3, 8, 12), float32],) {
  @func_10312() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_91(%var_8: Tensor[(15, 16, 7), float32]) -> (Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), bool], Tensor[(15, 16, 7), int8]) {
  %964 = cast(%var_8, dtype="float32") /* ty=Tensor[(15, 16, 7), float32] */;
  %965 = exp(%964) /* ty=Tensor[(15, 16, 7), float32] */;
  %966 = cast(%965, dtype="uint8") /* ty=Tensor[(15, 16, 7), uint8] */;
  %967 = shape_of(%var_8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %968 = cast(%var_8, dtype="uint8") /* ty=Tensor[(15, 16, 7), uint8] */;
  %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %970 = left_shift(%968, %969) /* ty=Tensor[(15, 16, 7), uint8] */;
  %971 = cast(%var_8, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
  %972 = shape_of(%970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(%970, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %975 = cast(%var_8, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
  %976 = shape_of(%970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %977 = cast(%970, dtype="bool") /* ty=Tensor[(15, 16, 7), bool] */;
  %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %979 = cast(%970, dtype="int8") /* ty=Tensor[(15, 16, 7), int8] */;
  %980 = shape_of(%var_8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %981 = cast(%var_8, dtype="int8") /* ty=Tensor[(15, 16, 7), int8] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %983 = less_equal(%973, %974) /* ty=Tensor[(15, 16, 7), bool] */;
  %984 = logical_and(%977, %978) /* ty=Tensor[(15, 16, 7), bool] */;
  %985 = multiply(%981, %982) /* ty=Tensor[(15, 16, 7), int8] */;
  (%983, %984, %985)
}

def @func_11378(%var_11377: Tensor[(16, 16, 6), float64]) -> (Tensor[(16, 16, 6), float64],) {
  %993 = fn (%var_11358: Tensor[(16, 16, 6), float64]) -> (Tensor[(16, 16, 6), float64],) {
    %986 = @func_3491() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */;
    %987 = %986.1;
    %988 = cast(%var_11358, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
    %989 = shape_of(%987, dtype="int32") /* ty=Tensor[(3), int32] */;
    %990 = cast(%987, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
    %991 = dyn.reshape(%988, %989, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %992 = floor_mod(%990, %991) /* ty=Tensor[(16, 16, 6), float64] */;
    (%992,)
  };
  %993(%var_11377) /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_8372() -> (Tensor[(16, 16, 6), float64],) {
  %994 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %995 = %994.0;
  %996 = cast(%995, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %997 = log(%996) /* ty=Tensor[(16, 16, 6), float64] */;
  (%997,)
}

def @func_3667() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) {
  %998 = @func_3408() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %999 = cast(meta[relay.Constant][59] /* ty=Tensor[(320), int64] */, dtype="int64") /* ty=Tensor[(320), int64] */;
  %1000 = cast(meta[relay.Constant][59] /* ty=Tensor[(320), int64] */, dtype="int64") /* ty=Tensor[(320), int64] */;
  %1001 = reshape(%999, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
  %1002 = reshape(%1000, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
  %1003 = @func_2715(%1001, %1002) /* ty=(Tensor[(4, 16, 5), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %1004 = %998.0;
  %1005 = %1003.1;
  (%1004, %1005, meta[relay.Constant][59] /* ty=Tensor[(320), int64] */)
}

def @func_10581() -> (Tensor[(630), uint32],) {
  %1008 = fn () -> (Tensor[(630), uint32],) {
    %1006 = @func_5639() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(14, 9, 5), bool], Tensor[(630), uint32], Tensor[(11, 5, 13), float64]) */;
    %1007 = %1006.3;
    (%1007,)
  };
  %1008() /* ty=(Tensor[(630), uint32],) */
}

def @func_7125(%var_7124: Tensor[(15, 16, 7), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(630), uint32], Tensor[(15, 16, 7), float64]) {
  %1019 = fn (%var_7112: Tensor[(15, 16, 7), bool]) -> (Tensor[(16, 16, 6), float64], Tensor[(630), uint32], Tensor[(15, 16, 7), float64]) {
    %1009 = cast(meta[relay.Constant][60] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %1010 = reshape(%1009, newshape=[630]) /* ty=Tensor[(630), uint32] */;
    %1011 = @func_2559(%1010) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(1680), float32], Tensor[(15, 16, 7), int16], Tensor[(15, 16, 7), bool], Tensor[(630), uint32]) */;
    %1012 = %1011.3;
    %1013 = cast(%var_7112, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
    %1014 = shape_of(%1012, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1015 = cast(%1012, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
    %1016 = dyn.reshape(%1013, %1014, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1017 = @func_3074() /* ty=Tensor[(16, 16, 6), float64] */;
    %1018 = divide(%1015, %1016) /* ty=Tensor[(15, 16, 7), float64] */;
    (%1017, meta[relay.Constant][60] /* ty=Tensor[(630), uint32] */, %1018)
  };
  %1019(%var_7124) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(630), uint32], Tensor[(15, 16, 7), float64]) */
}

def @func_2758() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) {
  %1020 = @func_2501() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %1021 = cast(meta[relay.Constant][61] /* ty=Tensor[(320), int64] */, dtype="int64") /* ty=Tensor[(320), int64] */;
  %1022 = cast(meta[relay.Constant][61] /* ty=Tensor[(320), int64] */, dtype="int64") /* ty=Tensor[(320), int64] */;
  %1023 = reshape(%1021, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
  %1024 = reshape(%1022, newshape=[4, 16, 5]) /* ty=Tensor[(4, 16, 5), int64] */;
  %1025 = @func_2715(%1023, %1024) /* ty=(Tensor[(4, 16, 5), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %1026 = %1020.0;
  %1027 = @func_2686() /* ty=Tensor[(3, 8, 12), float32] */;
  %1028 = %1025.1;
  (%1026, %1027, %1028, meta[relay.Constant][61] /* ty=Tensor[(320), int64] */)
}

def @func_8311(%var_8310: Tensor[(12, 9, 14), float32]) -> (Tensor[(12, 9, 14), bool], Tensor[(3, 8, 12), float32]) {
  %1036 = fn (%var_8280: Tensor[(12, 9, 14), float32]) -> (Tensor[(12, 9, 14), bool], Tensor[(3, 8, 12), float32]) {
    %1029 = cast(%var_8280, dtype="bool") /* ty=Tensor[(12, 9, 14), bool] */;
    %1030 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(12, 9, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1031 = cast(meta[relay.Constant][62] /* ty=Tensor[(12, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(12, 9, 14), bool] */;
    %1032 = dyn.reshape(%1029, %1030, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1033 = @func_6760() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %1034 = greater_equal(%1031, %1032) /* ty=Tensor[(12, 9, 14), bool] */;
    %1035 = %1033.0;
    (%1034, %1035)
  };
  %1036(%var_8310) /* ty=(Tensor[(12, 9, 14), bool], Tensor[(3, 8, 12), float32]) */
}

def @func_13024() -> Tensor[(3, 8, 12), float32] {
  @func_13022() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_3202() -> (Tensor[(16, 16, 6), float64],) {
  %1037 = @func_3144() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) */;
  %1038 = %1037.0;
  (%1038,)
}

def @func_10885(%var_10884: Tensor[(10, 11, 9), float32]) -> Tensor[(10, 11, 9), float32] {
  %1040 = fn (%var_10868: Tensor[(10, 11, 9), float32]) -> Tensor[(10, 11, 9), float32] {
    %1039 = cast(%var_10868, dtype="float32") /* ty=Tensor[(10, 11, 9), float32] */;
    acos(%1039) /* ty=Tensor[(10, 11, 9), float32] */
  };
  %1040(%var_10884) /* ty=Tensor[(10, 11, 9), float32] */
}

def @func_5332() -> Tensor[(16, 16, 6), float64] {
  %1041 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1041.0
}

def @func_5572() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %1042 = @func_3770() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1043 = %1042.0;
  %1044 = cast(%1043, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %1045 = @func_3667() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(320), int64]) */;
  %1046 = @func_3787() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1047 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1048 = @func_4879() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %1049 = @func_4961() /* ty=Tensor[(3, 8, 12), float32] */;
  %1050 = tan(%1044) /* ty=Tensor[(16, 16, 6), float64] */;
  %1051 = %1045.1;
  %1052 = %1046.0;
  %1053 = %1047.0;
  %1054 = %1048.0;
  (%1049, %1050, %1051, %1052, %1053, %1054)
}

def @func_9846() -> Tensor[(16, 16, 6), float64] {
  @func_6006() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_2897(%var_2890: Tensor[(8, 3, 15), float64]) -> (Tensor[(1, 3, 15), float64], Tensor[(1, 3, 15), float64], Tensor[(8, 3, 15), bool]) {
  %1055 = cast(meta[relay.Constant][63] /* ty=Tensor[(1, 3, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %1056 = cast(meta[relay.Constant][63] /* ty=Tensor[(1, 3, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 15), float64] */;
  %1057 = cast(meta[relay.Constant][63] /* ty=Tensor[(1, 3, 15), float64] */, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %1058 = cast(%var_2890, dtype="bool") /* ty=Tensor[(8, 3, 15), bool] */;
  %1059 = atanh(%1055) /* ty=Tensor[(1, 3, 15), float64] */;
  %1060 = sqrt(%1056) /* ty=Tensor[(1, 3, 15), float64] */;
  %1061 = logical_and(%1057, %1058) /* ty=Tensor[(8, 3, 15), bool] */;
  (%1059, %1060, %1061)
}

def @func_13049() -> Tensor[(16, 16, 6), float64] {
  @func_13047() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_11105() -> Tensor[(3, 8, 12), float32] {
  %1063 = fn () -> Tensor[(3, 8, 12), float32] {
    %1062 = @func_5064() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %1062.0
  };
  %1063() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_6270(%var_6239: Tensor[(11, 8, 11), float32], %var_6240: Tensor[(11, 8, 11), float32], %var_6246: Tensor[(11, 8, 11), float32]) -> (Tensor[(11, 8, 11), bool], Tensor[(11, 8, 11), float64]) {
  %1064 = cast(%var_6240, dtype="bool") /* ty=Tensor[(11, 8, 11), bool] */;
  %1065 = shape_of(%var_6239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1066 = cast(%var_6239, dtype="bool") /* ty=Tensor[(11, 8, 11), bool] */;
  %1067 = dyn.reshape(%1064, %1065, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1068 = cast(%var_6246, dtype="float64") /* ty=Tensor[(11, 8, 11), float64] */;
  %1069 = shape_of(%var_6239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1070 = cast(%var_6239, dtype="float64") /* ty=Tensor[(11, 8, 11), float64] */;
  %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1072 = greater(%1066, %1067) /* ty=Tensor[(11, 8, 11), bool] */;
  %1073 = floor_mod(%1070, %1071) /* ty=Tensor[(11, 8, 11), float64] */;
  (%1072, %1073)
}

def @func_10176() -> Tensor[(3, 8, 12), float32] {
  %1075 = fn () -> Tensor[(3, 8, 12), float32] {
    %1074 = @func_7607() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64], Tensor[(16, 16, 6), float64]) */;
    %1074.2
  };
  %1075() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_3076() -> Tensor[(16, 16, 6), float64] {
  @func_3074() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_11119() -> (Tensor[(16, 16, 6), float64],) {
  @func_11117() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_8802(%var_8801: Tensor[(320), int64]) -> Tensor[(320), float32] {
  %1082 = fn (%var_8789: Tensor[(320), int64]) -> Tensor[(320), float32] {
    %1076 = @func_6049() /* ty=(Tensor[(320), int64],) */;
    %1077 = %1076.0;
    %1078 = cast(%var_8789, dtype="float32") /* ty=Tensor[(320), float32] */;
    %1079 = shape_of(%1077, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1080 = cast(%1077, dtype="float32") /* ty=Tensor[(320), float32] */;
    %1081 = dyn.reshape(%1078, %1079, newshape=[]) /* ty=Tensor[(?), float32] */;
    minimum(%1080, %1081) /* ty=Tensor[(320), float32] */
  };
  %1082(%var_8801) /* ty=Tensor[(320), float32] */
}

def @func_5678() -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
  %1086 = fn () -> (Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) {
    %1083 = @func_4067() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %1084 = %1083.0;
    %1085 = @func_3643() /* ty=Tensor[(3, 8, 12), float32] */;
    (%1084, %1085)
  };
  %1086() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */
}

def @func_6986(%var_6984: Tensor[(5, 7, 4), float32]) -> (Tensor[(1, 3, 15), float64], Tensor[(360), float64], Tensor[(5, 7, 4), uint8]) {
  @func_6983(%var_6984) /* ty=(Tensor[(1, 3, 15), float64], Tensor[(360), float64], Tensor[(5, 7, 4), uint8]) */
}

def @func_4320(%var_4302: Tensor[(528, 4), float32], %var_4312: Tensor[(528, 4), float32]) -> (Tensor[(528, 4), float64], Tensor[(12, 11, 16), bool], Tensor[(528, 4), uint64]) {
  %1087 = @func_4279() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(528, 4), float32], Tensor[(2112), bool]) */;
  %1088 = %1087.1;
  %1089 = cast(%1088, dtype="float64") /* ty=Tensor[(528, 4), float64] */;
  %1090 = cast(%var_4302, dtype="float32") /* ty=Tensor[(528, 4), float32] */;
  %1091 = shape_of(%1088, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1092 = cast(%1088, dtype="float32") /* ty=Tensor[(528, 4), float32] */;
  %1093 = dyn.reshape(%1090, %1091, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1094 = mod(%1092, %1093) /* ty=Tensor[(528, 4), float32] */;
  %1095 = cast(%1094, dtype="bool") /* ty=Tensor[(528, 4), bool] */;
  %1096 = reshape(%1095, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), bool] */;
  %1097 = cast(%var_4312, dtype="uint64") /* ty=Tensor[(528, 4), uint64] */;
  %1098 = shape_of(%1094, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1099 = cast(%1094, dtype="uint64") /* ty=Tensor[(528, 4), uint64] */;
  %1100 = dyn.reshape(%1097, %1098, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %1101 = sinh(%1089) /* ty=Tensor[(528, 4), float64] */;
  %1102 = @func_2207(%1096) /* ty=Tensor[(12, 11, 16), bool] */;
  %1103 = subtract(%1099, %1100) /* ty=Tensor[(528, 4), uint64] */;
  (%1101, %1102, %1103)
}

def @func_2461() -> Tensor[(16, 16, 6), float64] {
  %1104 = cast(meta[relay.Constant][64] /* ty=Tensor[(16, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  acos(%1104) /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_3491() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %1105 = @func_3074() /* ty=Tensor[(16, 16, 6), float64] */;
  %1106 = @func_3222() /* ty=Tensor[(16, 16, 6), float64] */;
  (%1105, %1106)
}

def @func_12167() -> (Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) {
  %1107 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %1108 = @func_2652() /* ty=Tensor[(16, 16, 6), float64] */;
  %1109 = %1107.0;
  (%1108, %1109)
}

def @func_13047() -> Tensor[(16, 16, 6), float64] {
  %1110 = @func_7212() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1110.0
}

def @func_12645() -> (Tensor[(320), int64], Tensor[(16, 16, 6), float64], Tensor[(192), float64], Tensor[(16, 16, 6), float64], Tensor[(320), int64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %1122 = fn () -> (Tensor[(320), int64], Tensor[(16, 16, 6), float64], Tensor[(192), float64], Tensor[(16, 16, 6), float64], Tensor[(320), int64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
    %1111 = @func_8394() /* ty=(Tensor[(192), float64],) */;
    %1112 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %1113 = @func_5572() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
    %1114 = @func_6371() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(2112), bool]) */;
    %1115 = @func_11970() /* ty=Tensor[(320), int64] */;
    %1116 = @func_6110() /* ty=Tensor[(16, 16, 6), float64] */;
    %1117 = %1111.0;
    %1118 = %1112.0;
    %1119 = @func_11970() /* ty=Tensor[(320), int64] */;
    %1120 = %1113.3;
    %1121 = %1114.1;
    (%1115, %1116, %1117, %1118, %1119, %1120, %1121)
  };
  %1122() /* ty=(Tensor[(320), int64], Tensor[(16, 16, 6), float64], Tensor[(192), float64], Tensor[(16, 16, 6), float64], Tensor[(320), int64], Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */
}

def @func_8785(%var_8783: Tensor[(3, 8, 12), float32]) -> Tensor[(3, 8, 12), bool] {
  @func_8782(%var_8783) /* ty=Tensor[(3, 8, 12), bool] */
}

def @func_4052() -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
  %1127 = fn () -> (Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) {
    %1123 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %1124 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %1125 = %1123.0;
    %1126 = %1124.0;
    (%1125, %1126)
  };
  %1127() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(16, 16, 6), float64]) */
}

def @func_10117(%var_10115: Tensor[(336), float64], %var_10116: Tensor[(32, 48), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(32, 48), float64], Tensor[(24, 14), uint8], Tensor[(16, 16, 6), float64]) {
  @func_10113(%var_10115, %var_10116) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(32, 48), float64], Tensor[(24, 14), uint8], Tensor[(16, 16, 6), float64]) */
}

def @func_4879() -> (Tensor[(3, 8, 12), float32],) {
  %1128 = @func_2501() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(288), float32]) */;
  %1129 = %1128.1;
  (%1129,)
}

def @func_10536() -> (Tensor[(3, 8, 12), float32], Tensor[(6, 4, 8), uint32], Tensor[(9, 6, 16), float32], Tensor[(864), float32], Tensor[(192), float64]) {
  %1130 = @func_8433() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32]) */;
  %1131 = %1130.1;
  %1132 = cast(%1131, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %1133 = @func_4178() /* ty=(Tensor[(1680), float32], Tensor[(16, 16, 6), float64], Tensor[(6, 4, 8), uint32], Tensor[(192), float64]) */;
  %1134 = cast(meta[relay.Constant][65] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %1135 = reshape(%1134, newshape=[9, 6, 16]) /* ty=Tensor[(9, 6, 16), float32] */;
  %1136 = @func_9267(%1135) /* ty=(Tensor[(9, 6, 16), float32],) */;
  %1137 = @func_9103() /* ty=(Tensor[(192), float64],) */;
  %1138 = asinh(%1132) /* ty=Tensor[(3, 8, 12), float32] */;
  %1139 = %1133.2;
  %1140 = %1136.0;
  %1141 = %1137.0;
  (%1138, %1139, %1140, meta[relay.Constant][65] /* ty=Tensor[(864), float32] */, %1141)
}

def @func_7214() -> (Tensor[(16, 16, 6), float64],) {
  @func_7212() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_6088(%var_6087: Tensor[(100), uint8]) -> (Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) {
  %1153 = fn (%var_6076: Tensor[(100), uint8]) -> (Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) {
    %1142 = cast(meta[relay.Constant][66] /* ty=Tensor[(16, 7, 12), float32] */, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
    %1143 = @func_3202() /* ty=(Tensor[(16, 16, 6), float64],) */;
    %1144 = @func_4829() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %1145 = cast(%var_6076, dtype="uint8") /* ty=Tensor[(100), uint8] */;
    %1146 = reshape(%1145, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), uint8] */;
    %1147 = @func_5038() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(11, 5, 13), float64], Tensor[(715), float64]) */;
    %1148 = sin(%1142) /* ty=Tensor[(16, 7, 12), float32] */;
    %1149 = %1143.0;
    %1150 = %1144.0;
    %1151 = @func_4911(%1146) /* ty=Tensor[(10, 2, 5), uint8] */;
    %1152 = %1147.2;
    (%1148, %1149, %1150, %1151, %var_6076, %1152)
  };
  %1153(%var_6087) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(10, 2, 5), uint8], Tensor[(100), uint8], Tensor[(715), float64]) */
}

def @func_9760() -> Tensor[(3, 8, 12), float32] {
  %1154 = fn () -> Tensor[(3, 8, 12), float32] {
    @func_5376() /* ty=Tensor[(3, 8, 12), float32] */
  };
  %1154() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_3224() -> Tensor[(16, 16, 6), float64] {
  @func_3222() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_3353() -> Tensor[(16, 16, 6), float64] {
  %1155 = fn () -> Tensor[(16, 16, 6), float64] {
    @func_2461() /* ty=Tensor[(16, 16, 6), float64] */
  };
  %1155() /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_10548() -> (Tensor[(15, 6, 1), float64],) {
  %1158 = fn () -> (Tensor[(15, 6, 1), float64],) {
    %1156 = cast(meta[relay.Constant][67] /* ty=Tensor[(15, 6, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 6, 1), float64] */;
    %1157 = asin(%1156) /* ty=Tensor[(15, 6, 1), float64] */;
    (%1157,)
  };
  %1158() /* ty=(Tensor[(15, 6, 1), float64],) */
}

def @func_6373() -> (Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(2112), bool]) {
  @func_6371() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 16, 6), float64], Tensor[(2112), bool]) */
}

def @func_4705() -> (Tensor[(16, 16, 6), float64],) {
  %1160 = fn () -> (Tensor[(16, 16, 6), float64],) {
    %1159 = @func_3222() /* ty=Tensor[(16, 16, 6), float64] */;
    (%1159,)
  };
  %1160() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_11767() -> (Tensor[(1680), float32], Tensor[(6, 14, 4), float64]) {
  %1165 = fn () -> (Tensor[(1680), float32], Tensor[(6, 14, 4), float64]) {
    %1161 = @func_4030() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1680), float32], Tensor[(192), float64], Tensor[(1680), float32]) */;
    %1162 = @func_5313() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(715), float64], Tensor[(6, 14, 4), float64]) */;
    %1163 = %1161.1;
    %1164 = %1162.2;
    (%1163, %1164)
  };
  %1165() /* ty=(Tensor[(1680), float32], Tensor[(6, 14, 4), float64]) */
}

def @func_8374() -> (Tensor[(16, 16, 6), float64],) {
  @func_8372() /* ty=(Tensor[(16, 16, 6), float64],) */
}

def @func_11709(%var_11701: float64, %var_11702: Tensor[(12, 3, 13), float64]) -> (Tensor[(12, 3, 13), float64], Tensor[(12, 3, 13), float64]) {
  %1166 = cast(%var_11701, dtype="float64") /* ty=float64 */;
  %1167 = cast(%var_11702, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %1168 = cast(%var_11701, dtype="float64") /* ty=float64 */;
  %1169 = cast(%var_11702, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %1170 = power(%1166, %1167) /* ty=Tensor[(12, 3, 13), float64] */;
  %1171 = mod(%1168, %1169) /* ty=Tensor[(12, 3, 13), float64] */;
  (%1170, %1171)
}

def @func_10724() -> Tensor[(3, 8, 12), float32] {
  %1172 = @func_2981() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(3, 8, 12), float32]) */;
  %1172.0
}

def @func_4391(%var_4337: Tensor[(16, 16, 6), float64], %var_4376: Tensor[(16, 16, 6), float64]) -> (Tensor[(16, 16, 6), uint16], Tensor[(16, 16, 6), float32], Tensor[(16, 16, 6), float64]) {
  %1173 = @func_3954() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1174 = %1173.0;
  %1175 = cast(%var_4337, dtype="uint16") /* ty=Tensor[(16, 16, 6), uint16] */;
  %1176 = shape_of(%1174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1177 = cast(%1174, dtype="uint16") /* ty=Tensor[(16, 16, 6), uint16] */;
  %1178 = dyn.reshape(%1175, %1176, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1179 = cast(%var_4376, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
  %1180 = shape_of(%var_4337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1181 = cast(%var_4337, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
  %1182 = dyn.reshape(%1179, %1180, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1183 = @func_3465() /* ty=(Tensor[(16, 16, 6), float64],) */;
  %1184 = logical_xor(%1177, %1178) /* ty=Tensor[(16, 16, 6), uint16] */;
  %1185 = divide(%1181, %1182) /* ty=Tensor[(16, 16, 6), float32] */;
  %1186 = %1183.0;
  (%1184, %1185, %1186)
}

def @func_9105() -> (Tensor[(192), float64],) {
  @func_9103() /* ty=(Tensor[(192), float64],) */
}

def @func_12768() -> Tensor[(320), int64] {
  @func_9143() /* ty=Tensor[(320), int64] */
}

def @func_10777(%var_10776: Tensor[(264), int32]) -> (Tensor[(320), int64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) {
  %1197 = fn (%var_10767: Tensor[(264), int32]) -> (Tensor[(320), int64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) {
    %1187 = @func_9720() /* ty=(Tensor[(320), int64],) */;
    %1188 = cast(meta[relay.Constant][68] /* ty=Tensor[(33), int32] */, dtype="int32") /* ty=Tensor[(33), int32] */;
    %1189 = cast(%var_10767, dtype="int32") /* ty=Tensor[(264), int32] */;
    %1190 = cast(meta[relay.Constant][69] /* ty=Tensor[(715), bool] */, dtype="bool") /* ty=Tensor[(715), bool] */;
    %1191 = reshape(%1188, newshape=[33]) /* ty=Tensor[(33), int32] */;
    %1192 = reshape(%1189, newshape=[264]) /* ty=Tensor[(264), int32] */;
    %1193 = reshape(%1190, newshape=[715]) /* ty=Tensor[(715), bool] */;
    %1194 = @func_7427(%1191, %1192, %1193) /* ty=(Tensor[(16, 16, 6), float64], Tensor[(3, 8, 12), float32], Tensor[(13, 100), bool], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) */;
    %1195 = %1187.0;
    %1196 = %1194.3;
    (%1195, %1196, meta[relay.Constant][68] /* ty=Tensor[(33), int32] */, %var_10767, meta[relay.Constant][69] /* ty=Tensor[(715), bool] */)
  };
  %1197(%var_10776) /* ty=(Tensor[(320), int64], Tensor[(3, 8, 11), bool], Tensor[(33), int32], Tensor[(264), int32], Tensor[(715), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen684/build/output.py:3783: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen684/build/output.py", line 3788, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(112) tvmgen_default_fused_power_kernel0(double* __restrict__ T_power, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_power[(((int)threadIdx.x))] = pow(placeholder[(0)], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

