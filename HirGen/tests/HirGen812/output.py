import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_34 = relay.var("var_34", dtype = "float32", shape = (15, 10, 6))#candidate|34|(15, 10, 6)|var|float32
var_35 = relay.var("var_35", dtype = "float32", shape = (15, 10, 6))#candidate|35|(15, 10, 6)|var|float32
bop_36 = relay.floor_divide(var_34.astype('float32'), relay.reshape(var_35.astype('float32'), relay.shape_of(var_34))) # shape=(15, 10, 6)
output = relay.Tuple([bop_36,])
output2 = relay.Tuple([bop_36,])
func_71 = relay.Function([var_34,var_35,], output)
mod['func_71'] = func_71
mod = relay.transform.InferType()(mod)
var_72 = relay.var("var_72", dtype = "float32", shape = (15, 10, 6))#candidate|72|(15, 10, 6)|var|float32
var_73 = relay.var("var_73", dtype = "float32", shape = (15, 10, 6))#candidate|73|(15, 10, 6)|var|float32
output = func_71(var_72,var_73,)
func_74 = relay.Function([var_72,var_73,], output)
mutated_mod['func_74'] = func_74
mutated_mod = relay.transform.InferType()(mutated_mod)
var_338 = relay.var("var_338", dtype = "bool", shape = (16, 11, 9))#candidate|338|(16, 11, 9)|var|bool
var_339 = relay.var("var_339", dtype = "bool", shape = (16, 11, 9))#candidate|339|(16, 11, 9)|var|bool
bop_340 = relay.logical_or(var_338.astype('bool'), relay.reshape(var_339.astype('bool'), relay.shape_of(var_338))) # shape=(16, 11, 9)
func_71_call = mod.get_global_var('func_71')
func_74_call = mutated_mod.get_global_var('func_74')
var_353 = relay.var("var_353", dtype = "float32", shape = (900,))#candidate|353|(900,)|var|float32
call_352 = relay.TupleGetItem(func_71_call(relay.reshape(var_353.astype('float32'), [15, 10, 6]), relay.reshape(var_353.astype('float32'), [15, 10, 6]), ), 0)
call_354 = relay.TupleGetItem(func_74_call(relay.reshape(var_353.astype('float32'), [15, 10, 6]), relay.reshape(var_353.astype('float32'), [15, 10, 6]), ), 0)
func_71_call = mod.get_global_var('func_71')
func_74_call = mutated_mod.get_global_var('func_74')
call_367 = relay.TupleGetItem(func_71_call(relay.reshape(call_352.astype('float32'), [15, 10, 6]), relay.reshape(call_352.astype('float32'), [15, 10, 6]), ), 0)
call_368 = relay.TupleGetItem(func_74_call(relay.reshape(call_352.astype('float32'), [15, 10, 6]), relay.reshape(call_352.astype('float32'), [15, 10, 6]), ), 0)
func_71_call = mod.get_global_var('func_71')
func_74_call = mutated_mod.get_global_var('func_74')
call_369 = relay.TupleGetItem(func_71_call(relay.reshape(call_352.astype('float32'), [15, 10, 6]), relay.reshape(call_367.astype('float32'), [15, 10, 6]), ), 0)
call_370 = relay.TupleGetItem(func_74_call(relay.reshape(call_352.astype('float32'), [15, 10, 6]), relay.reshape(call_367.astype('float32'), [15, 10, 6]), ), 0)
output = relay.Tuple([bop_340,call_352,var_353,call_367,call_369,])
output2 = relay.Tuple([bop_340,call_354,var_353,call_368,call_370,])
func_371 = relay.Function([var_338,var_339,var_353,], output)
mod['func_371'] = func_371
mod = relay.transform.InferType()(mod)
mutated_mod['func_371'] = func_371
mutated_mod = relay.transform.InferType()(mutated_mod)
func_371_call = mutated_mod.get_global_var('func_371')
var_373 = relay.var("var_373", dtype = "bool", shape = (16, 11, 9))#candidate|373|(16, 11, 9)|var|bool
var_374 = relay.var("var_374", dtype = "bool", shape = (16, 11, 9))#candidate|374|(16, 11, 9)|var|bool
var_375 = relay.var("var_375", dtype = "float32", shape = (900,))#candidate|375|(900,)|var|float32
call_372 = func_371_call(var_373,var_374,var_375,)
output = call_372
func_376 = relay.Function([var_373,var_374,var_375,], output)
mutated_mod['func_376'] = func_376
mutated_mod = relay.transform.InferType()(mutated_mod)
var_391 = relay.var("var_391", dtype = "float32", shape = (9, 14, 6))#candidate|391|(9, 14, 6)|var|float32
uop_392 = relay.atanh(var_391.astype('float32')) # shape=(9, 14, 6)
output = uop_392
output2 = uop_392
func_394 = relay.Function([var_391,], output)
mod['func_394'] = func_394
mod = relay.transform.InferType()(mod)
mutated_mod['func_394'] = func_394
mutated_mod = relay.transform.InferType()(mutated_mod)
var_395 = relay.var("var_395", dtype = "float32", shape = (9, 14, 6))#candidate|395|(9, 14, 6)|var|float32
func_394_call = mutated_mod.get_global_var('func_394')
call_396 = func_394_call(var_395)
output = call_396
func_397 = relay.Function([var_395], output)
mutated_mod['func_397'] = func_397
mutated_mod = relay.transform.InferType()(mutated_mod)
const_674 = relay.const([[[-7.084595,2.504214,2.345221],[-6.368491,-2.224777,-4.245318],[5.288065,-8.930962,-0.077157],[-2.646006,-2.737430,6.972600],[-7.019121,9.600325,-7.685113],[-1.955353,-0.610788,7.322518],[9.236200,3.657265,-9.656714],[0.892066,-8.536696,-4.937972],[-7.879590,-2.694264,1.964801]],[[5.846481,-6.011561,-3.002198],[9.410312,8.258131,-1.588144],[5.213744,7.599516,-3.969643],[-7.870602,5.881276,5.294244],[0.878384,-9.106320,-0.829430],[-0.887968,1.366967,2.055971],[2.017971,-8.908164,-3.235090],[0.990396,-4.651734,6.828734],[-1.973884,2.034364,-9.217242]],[[3.716281,-2.841209,7.354598],[-8.551680,-6.662512,-0.579777],[6.305548,0.657138,2.164880],[-0.684078,7.571830,0.281068],[4.636985,9.759969,6.357966],[0.600049,9.689795,-2.749048],[2.727233,-6.765381,7.916257],[4.264172,-3.506973,-5.655028],[-3.676446,-2.075510,-6.505027]],[[-8.808454,-0.830669,-3.658470],[8.403545,-9.679808,2.759314],[8.701018,4.028885,-6.898989],[3.146396,1.343548,-7.803809],[2.292409,6.378046,3.988937],[4.990747,7.867452,5.557924],[7.875630,-9.765699,6.633154],[-0.038168,-7.125602,4.000512],[-4.526617,-1.261180,-5.736595]]], dtype = "float64")#candidate|674|(4, 9, 3)|const|float64
uop_675 = relay.acosh(const_674.astype('float64')) # shape=(4, 9, 3)
func_394_call = mod.get_global_var('func_394')
func_397_call = mutated_mod.get_global_var('func_397')
var_679 = relay.var("var_679", dtype = "float32", shape = (756,))#candidate|679|(756,)|var|float32
call_678 = func_394_call(relay.reshape(var_679.astype('float32'), [9, 14, 6]))
call_680 = func_394_call(relay.reshape(var_679.astype('float32'), [9, 14, 6]))
func_394_call = mod.get_global_var('func_394')
func_397_call = mutated_mod.get_global_var('func_397')
call_682 = func_394_call(relay.reshape(call_678.astype('float32'), [9, 14, 6]))
call_683 = func_394_call(relay.reshape(call_678.astype('float32'), [9, 14, 6]))
output = relay.Tuple([uop_675,call_678,var_679,call_682,])
output2 = relay.Tuple([uop_675,call_680,var_679,call_683,])
func_685 = relay.Function([var_679,], output)
mod['func_685'] = func_685
mod = relay.transform.InferType()(mod)
var_686 = relay.var("var_686", dtype = "float32", shape = (756,))#candidate|686|(756,)|var|float32
output = func_685(var_686)
func_687 = relay.Function([var_686], output)
mutated_mod['func_687'] = func_687
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1493 = relay.var("var_1493", dtype = "float32", shape = (13, 13, 2))#candidate|1493|(13, 13, 2)|var|float32
uop_1494 = relay.sin(var_1493.astype('float32')) # shape=(13, 13, 2)
output = uop_1494
output2 = uop_1494
func_1498 = relay.Function([var_1493,], output)
mod['func_1498'] = func_1498
mod = relay.transform.InferType()(mod)
var_1499 = relay.var("var_1499", dtype = "float32", shape = (13, 13, 2))#candidate|1499|(13, 13, 2)|var|float32
output = func_1498(var_1499)
func_1500 = relay.Function([var_1499], output)
mutated_mod['func_1500'] = func_1500
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1853 = relay.var("var_1853", dtype = "float64", shape = (15, 16, 5))#candidate|1853|(15, 16, 5)|var|float64
var_1854 = relay.var("var_1854", dtype = "float64", shape = (15, 16, 5))#candidate|1854|(15, 16, 5)|var|float64
bop_1855 = relay.floor_mod(var_1853.astype('float64'), relay.reshape(var_1854.astype('float64'), relay.shape_of(var_1853))) # shape=(15, 16, 5)
func_394_call = mod.get_global_var('func_394')
func_397_call = mutated_mod.get_global_var('func_397')
var_1860 = relay.var("var_1860", dtype = "float32", shape = (756,))#candidate|1860|(756,)|var|float32
call_1859 = func_394_call(relay.reshape(var_1860.astype('float32'), [9, 14, 6]))
call_1861 = func_394_call(relay.reshape(var_1860.astype('float32'), [9, 14, 6]))
uop_1868 = relay.log2(var_1854.astype('float64')) # shape=(15, 16, 5)
output = relay.Tuple([bop_1855,call_1859,var_1860,uop_1868,])
output2 = relay.Tuple([bop_1855,call_1861,var_1860,uop_1868,])
func_1875 = relay.Function([var_1853,var_1854,var_1860,], output)
mod['func_1875'] = func_1875
mod = relay.transform.InferType()(mod)
mutated_mod['func_1875'] = func_1875
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1875_call = mutated_mod.get_global_var('func_1875')
var_1877 = relay.var("var_1877", dtype = "float64", shape = (15, 16, 5))#candidate|1877|(15, 16, 5)|var|float64
var_1878 = relay.var("var_1878", dtype = "float64", shape = (15, 16, 5))#candidate|1878|(15, 16, 5)|var|float64
var_1879 = relay.var("var_1879", dtype = "float32", shape = (756,))#candidate|1879|(756,)|var|float32
call_1876 = func_1875_call(var_1877,var_1878,var_1879,)
output = call_1876
func_1880 = relay.Function([var_1877,var_1878,var_1879,], output)
mutated_mod['func_1880'] = func_1880
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2451 = relay.const([[[-8.705474,-6.973510,2.187240,6.437704,-7.104539,3.927311,-2.431031,6.793154,-1.810927,1.657912,0.017099,-6.797334,-2.279034,1.016661,0.134514,0.377665],[-4.351268,-9.905154,-1.870716,3.655045,-1.958385,0.380552,-8.244516,-3.555366,6.669611,8.441624,-0.538639,3.891586,-5.169454,9.749404,3.913378,0.111810],[-1.878997,5.410837,2.511468,1.431486,4.120072,-9.766276,-8.731423,2.449706,0.359148,-1.374433,-1.237283,-0.620397,-7.299644,-1.836595,-0.486338,-0.394136],[-8.926835,5.346929,-5.811067,0.934675,7.366242,8.055321,2.326512,-4.719191,2.825737,-1.015083,-3.347342,-9.003318,-4.996210,0.406466,-9.100849,0.471659],[1.553760,6.449317,-4.074061,-7.596144,-9.785909,3.762366,-0.197261,-4.443961,-5.216864,5.889291,5.896262,-6.755496,-8.330223,-3.964126,4.158177,5.166486],[-3.174183,-3.890720,-7.223837,9.869354,-9.178470,-8.458648,-7.285969,-8.371098,8.826028,4.642206,-2.299572,-9.564209,0.382559,8.732306,-1.666380,-0.561093],[3.182559,2.685878,9.689284,4.801044,2.266549,-3.039687,-7.758718,2.959242,-7.577455,3.518786,-6.654674,6.044332,-0.002977,-0.939571,-1.453340,-6.898838],[0.833772,7.408639,-5.679144,-2.296351,-1.359044,7.153598,3.977051,-5.762872,8.650192,-9.983516,8.181293,-5.518036,5.229270,-4.018225,1.040557,5.745323],[0.200031,5.216370,3.015397,4.889252,-2.687612,5.251673,6.432771,9.297332,0.491999,-8.131116,9.071851,-0.561701,3.158089,-7.646218,7.083831,0.471617],[-9.933128,-4.789462,-2.944145,7.686833,-8.937191,7.496420,-8.242650,6.785481,-3.627942,-0.482283,-2.372007,-0.994369,-8.095174,-4.223939,0.767876,-6.366249],[-9.433863,9.373628,-2.880237,1.341759,0.805452,9.051993,4.413589,3.321155,-6.398003,7.150915,7.339152,1.173136,8.126045,4.199825,4.447577,-0.668472],[6.412806,7.503193,7.581485,-1.049450,9.574723,-4.496432,-2.320242,-8.749339,-2.946134,9.778098,-9.223618,5.770448,-6.729320,-7.789259,-3.470108,3.759292],[-2.888910,2.331405,3.663758,7.499458,3.079836,7.453936,1.064903,7.233876,-5.107639,3.910674,5.663693,-6.009299,-8.241681,7.098839,9.459449,-0.321320],[4.090555,9.054628,3.497377,0.813418,7.279509,5.357841,3.125638,-8.722320,5.073430,-9.865015,-7.315113,4.111475,6.156954,1.165032,2.106808,-7.656991],[4.590259,-4.540028,-1.149908,-8.802014,-9.838002,1.706789,-2.163605,3.525862,9.996066,-7.022965,-1.340518,-8.281811,-1.447498,6.994065,9.736723,0.420419]],[[6.341720,-1.977895,9.192350,2.373819,-9.266695,3.139228,-1.098798,-2.197266,-7.463892,7.379738,-6.755713,-9.602160,1.844737,7.850102,-8.350629,-9.957741],[-9.528669,4.380013,9.097012,2.873495,7.474964,-8.241828,-3.946523,-4.092462,9.073694,1.812382,0.351565,-1.987231,6.849975,-4.633626,-1.808959,-3.184292],[0.786149,8.370926,-0.360050,-4.342854,2.401669,-3.631237,6.205269,1.004732,-3.835686,7.887426,-8.897218,7.369727,1.093045,0.236479,-5.330654,-5.078859],[-4.538926,-1.575321,-8.100756,-5.806230,6.485800,6.935296,6.004057,6.929149,-9.956152,-6.208421,-9.057995,-4.949854,5.752629,-7.047533,4.080882,3.700124],[-1.752378,4.146103,-3.449452,-7.197738,-2.677733,-6.383148,-6.588451,2.446766,-1.672167,-6.202949,9.789107,-5.976532,-2.971061,-9.573000,1.761938,9.528121],[1.890090,9.799636,7.808921,4.625446,8.105060,7.564188,1.567513,-8.142214,-0.993545,4.535069,-3.062086,-1.265447,-2.794983,-3.764926,-8.841142,3.514256],[-6.824256,6.123949,-3.630065,6.885872,7.891023,-6.144923,-9.367904,-3.097901,5.692345,-6.374464,-5.107181,-9.744422,-5.191268,-1.381806,6.498798,-5.532624],[-8.840197,2.576152,6.814472,9.805845,4.365227,7.741102,-3.320612,2.354645,3.239009,0.855991,-3.326240,-2.316304,9.697597,-0.443469,-1.666432,-7.920162],[-0.658568,-6.205235,6.258926,-7.288442,3.352992,-2.226896,-7.965546,3.203998,7.285307,6.765679,-5.639661,-1.525402,-5.041333,-9.633286,-5.325769,-9.033119],[-8.442703,-7.399827,-5.892674,8.238449,-7.293516,1.885092,3.424513,4.125265,-1.985011,-7.676263,-4.909778,-8.081116,6.940031,-0.186056,0.754186,4.054750],[3.474810,1.393602,-1.784191,0.651172,-9.571366,4.765953,5.118774,8.761569,5.691064,-1.331653,-0.156207,3.360984,-6.271595,8.691364,-9.973583,0.784867],[-4.144272,3.159263,1.354390,-7.196260,5.766051,3.136619,-6.036924,-4.812759,8.098537,9.252530,3.868037,5.208537,-1.059526,-9.700448,9.805955,-5.657875],[-4.759733,2.530439,-4.851993,-6.589893,2.061082,-8.085709,-5.228639,-2.493131,-0.001483,8.188641,-4.959524,0.197221,-9.285340,7.448660,0.916004,0.573633],[6.748522,-9.197556,-9.075313,4.102566,-3.292909,9.879810,8.283082,-6.633883,-5.192742,6.736558,0.697144,7.361700,-5.391079,2.176505,1.475808,-4.049325],[6.676738,-1.288772,1.216565,-8.420525,-3.350288,-9.422018,1.141486,2.477754,-2.355958,-3.533230,2.739276,0.415395,-6.131111,9.034141,-6.147832,-7.257379]],[[-6.684622,5.680525,-6.037029,-3.844269,-0.353515,-3.560860,0.254456,7.019194,8.356231,9.116160,0.298136,-7.662286,-8.115556,8.327070,3.629460,-5.879098],[8.971190,1.599004,9.287129,-1.368123,-7.642243,3.875674,-5.584894,-8.612072,-6.837055,-4.112412,-2.791893,1.457589,-9.868092,7.196245,-2.031196,-6.439369],[-9.687547,-3.985221,4.399890,9.658351,2.281584,3.381105,1.720962,3.275687,-2.807504,9.343218,8.967923,3.733830,-8.455790,0.282373,-0.963170,-0.425920],[-8.075421,5.432701,7.433741,2.629721,5.359755,-2.241374,-7.043334,8.184346,2.417678,-8.233570,8.288614,-0.107504,-2.533462,2.153433,2.225700,9.590486],[-8.494156,8.405420,9.367221,-4.109239,-1.534818,7.189836,7.357067,2.844520,-1.439051,6.187979,9.491899,4.448112,2.145819,-5.711794,-7.724432,-0.431452],[-0.853373,-3.271211,0.024968,4.338782,8.531140,-9.249952,8.495736,5.143192,9.499187,4.084962,-3.881432,9.485487,4.152981,3.288808,0.775718,-1.053076],[9.635990,-6.569946,-1.024796,-8.331536,-0.892152,-7.808949,-1.313899,8.467979,-1.782664,-3.641792,3.012290,-4.981037,-8.242341,-3.338104,-3.807717,7.557100],[9.381918,-4.461273,9.448816,7.065485,6.537026,4.363955,8.176975,-5.507504,-5.039997,1.397281,-7.390606,-5.967147,8.234533,-3.534802,-9.087273,8.775745],[4.931163,1.433104,8.109297,2.631657,-0.633319,-8.603017,7.490379,0.339883,-0.206222,-1.998751,-1.638011,8.233842,9.753519,3.461816,7.451978,-4.553356],[-9.097952,-7.215239,-9.319698,3.992404,-0.100460,9.848472,-5.858549,6.314232,6.565856,6.120780,6.843412,3.122602,-8.448570,-6.306365,3.110107,6.291305],[-3.573291,2.037363,8.393072,4.634957,9.889878,5.870944,2.862606,-3.549344,-5.394265,-2.880646,-9.443688,6.588308,9.257408,-5.580545,-2.544987,-6.347377],[7.860261,6.040828,-7.210988,4.998793,7.094920,7.812928,3.299880,4.731349,7.475665,1.923906,5.405505,2.198179,-3.289397,-5.427054,9.426255,6.232628],[-2.500893,0.046917,0.027751,-8.180323,0.346993,1.497788,0.598212,4.566075,3.513247,-9.105900,6.640409,9.137395,-3.434513,-8.203253,-4.427181,-0.227155],[-1.576533,-3.420587,-1.466681,4.672421,-1.263356,3.243128,5.849793,4.558396,4.099272,-9.374595,1.311371,1.797726,4.163689,5.806872,3.134033,-4.876930],[0.356733,-6.244686,-1.957647,9.221112,-0.559876,-7.280096,7.954221,-1.646900,-8.826476,1.988826,-7.942405,0.103981,-8.981625,-9.593790,-9.687692,-8.683679]],[[5.681692,-3.876701,-0.776477,-0.414725,-8.244545,-7.728036,-4.545849,-8.318965,9.281697,-3.114047,-1.562316,1.068619,-6.175008,3.059363,5.266802,-7.160347],[-7.073746,-7.653223,7.485827,2.348535,2.030563,8.666871,3.662410,-7.633507,-6.631604,-1.888162,-0.718460,2.403201,5.538612,-2.524683,-7.350065,4.622558],[3.859056,6.797230,2.789283,-4.835277,6.480736,-2.183944,3.776065,6.527530,-1.290048,8.910124,-8.625226,9.786981,2.320076,-8.159915,7.300234,-8.192231],[6.455753,1.207885,-0.181507,5.694701,2.199689,-3.611573,1.388351,-9.971118,-5.707211,-3.694508,4.033273,-0.305771,3.159366,-1.585175,4.582766,5.519546],[6.054672,7.719330,-5.535860,6.705735,-2.366461,2.795130,8.941402,1.180747,9.592152,-7.363437,-8.669169,6.808935,9.579261,-7.688397,-8.493934,6.890280],[-0.839654,7.631009,-5.141108,-1.196205,0.282167,-7.039864,-5.811009,-9.728232,8.935000,-9.182461,4.798769,-3.264190,3.054858,8.753547,-7.799579,7.072220],[3.168570,-3.728398,1.477920,5.309241,-1.030014,-1.493639,6.733211,-7.049823,6.812050,-8.322922,-0.538582,-5.088542,1.063283,0.873855,-3.200954,-4.975493],[4.885993,9.080235,-1.886995,2.410610,-0.048160,0.185822,-8.720038,6.508068,-0.121421,5.783173,-3.868288,-5.477667,5.793965,7.119260,7.645175,-4.788652],[-8.594465,7.947398,-2.637532,7.572360,-0.123811,-4.386809,-1.247817,4.190843,-2.290426,3.515885,-3.501924,-5.967593,6.569601,0.820398,-0.730045,-7.859679],[-7.857614,6.769672,-8.934838,7.762595,1.245684,-8.099755,0.230006,-6.304061,-9.355384,-6.020054,6.757059,-2.598531,0.326611,5.481345,9.358066,-9.225894],[-4.130973,-8.475586,0.462042,4.791395,-0.265787,-3.544297,9.517830,9.007147,9.442521,-0.074916,-4.408201,4.787679,6.550928,6.729280,-2.361793,-1.582924],[6.225274,-7.012109,-3.485325,9.096506,8.038486,1.009783,-5.537800,-0.448079,-7.582052,4.116845,6.158455,-5.448164,7.295738,-5.430015,-2.506698,-7.495953],[2.641467,-1.137234,8.489890,-6.384970,1.255916,4.807828,-4.713367,1.332575,8.346558,-4.879315,-9.431100,5.445327,-9.594190,9.071918,-0.160961,9.363105],[-8.007674,4.900644,5.958416,-0.586134,4.286491,0.662426,2.280835,4.506839,9.575860,-8.959022,-8.877875,9.091896,7.200510,1.206105,3.872120,5.359009],[-4.876344,0.641376,5.028100,4.188186,9.416412,-5.748567,9.203166,8.136601,5.403532,-7.489709,5.141659,0.863437,9.354990,-1.586857,3.589289,-6.643513]],[[2.049126,2.885680,-2.196677,9.378033,8.017689,-7.380734,0.665244,5.538252,9.535302,7.547082,-9.743901,3.092639,7.984439,-8.254806,-3.134490,9.156053],[-0.669434,-7.204346,9.374343,-2.682590,9.510711,4.017573,2.042871,-4.187844,1.564131,9.705544,-9.734517,9.985993,3.388368,-8.147799,-4.270699,4.131829],[-6.519734,3.653424,6.486563,9.087333,4.920944,-2.563010,7.266840,4.642186,-9.997308,-0.994862,-9.630187,-1.372289,5.607110,0.213920,-3.889231,-2.164746],[-6.774844,-2.222803,-0.139372,-8.420800,4.015952,-0.551789,2.019045,8.796464,-0.710764,-4.504300,6.102609,-5.051671,6.068837,-6.144223,-3.442873,1.004614],[5.996030,6.758662,3.599646,0.940523,-5.639334,6.868210,9.791114,2.160089,4.992971,-9.200628,-7.873602,9.283401,-6.297758,-4.969155,1.408749,7.913847],[5.853000,-8.357112,9.997832,4.667514,2.385870,8.204616,9.596009,-8.023588,2.704217,6.784205,-1.900873,5.037769,7.343504,1.029047,6.589277,4.713281],[9.829998,4.651110,0.236889,-1.599674,-5.797307,6.220051,-3.237157,-4.066913,1.711859,-4.469820,-9.111017,-6.106239,7.431264,-4.024534,1.013580,7.665577],[1.949253,7.301599,-5.593177,5.908836,2.655910,-1.968547,3.194362,2.853573,7.404762,-5.621792,-3.816542,5.592687,-7.556117,-3.829120,8.410530,3.176597],[1.753067,9.972160,-1.515940,-6.427877,8.273153,-3.036745,5.073715,8.683522,8.687509,-0.348791,6.792879,5.975955,-8.295468,0.766837,2.135376,-6.861645],[1.376459,-5.303815,1.219065,8.837968,-3.285105,4.082872,-7.229221,-8.123673,-2.528858,0.180990,-5.985915,2.905851,-0.511796,-0.329403,8.023095,-1.319492],[-6.248395,8.086607,9.565845,-8.657784,-0.394020,6.235632,5.879516,-8.291315,9.363623,8.798171,-5.717720,-6.318170,3.123740,-8.553255,9.000565,2.482878],[-6.070756,6.082566,4.056327,1.449314,7.640848,-5.757777,-3.301229,-6.461064,-9.419050,2.322983,0.244642,-8.494197,-0.629590,7.604892,0.627592,6.052545],[3.023631,-0.004410,-1.949454,-0.331761,-0.325821,-0.149959,3.535047,-2.800090,-8.688830,-1.083532,0.332470,-1.345755,-3.960205,-7.930883,-7.384847,7.935783],[-1.084747,3.535805,8.196761,0.763188,-8.135694,-1.437027,-6.217663,-5.382354,-9.752138,-3.700874,9.903066,6.798951,0.885990,3.245051,6.752988,0.349939],[-6.550294,-0.117174,9.218730,-8.489122,-6.958472,4.383668,6.631860,7.799003,4.388056,-5.268713,4.146868,-8.189176,6.426989,-1.712269,-4.943539,-7.434916]],[[-9.057313,-5.631191,-2.412256,-0.679107,4.415244,-8.068265,7.584458,-6.883435,8.259360,5.504963,-7.095674,3.800495,7.746592,-7.742300,-3.504387,0.693957],[2.186163,-3.068285,-2.517624,-7.741322,-6.247679,-5.447534,7.945612,-1.825697,5.411366,9.146610,3.960042,1.879239,-6.184296,-6.069925,4.546143,-6.239985],[8.922335,-9.440469,6.779497,4.102305,9.477737,8.916148,-7.977336,-1.445294,2.538667,8.767307,-9.205649,5.394809,-8.925716,4.521275,5.199145,1.355128],[-0.346163,-0.591935,-6.113660,-2.643265,-6.513418,-0.826059,6.759527,-9.578638,-7.500631,-7.285482,5.573924,-8.346295,7.296350,7.298265,5.482413,-7.947933],[-7.966186,7.643339,-2.752273,5.761025,8.393202,-1.880721,-7.947364,1.504973,-2.436385,4.199898,1.727429,-7.046515,-6.565660,-5.425181,-9.502165,1.353914],[0.268686,6.627907,-4.501722,-2.526572,6.878746,7.190814,-4.105997,-8.676299,-3.998889,-8.755389,8.571417,-2.409893,-7.883500,5.612417,4.513153,8.832002],[2.167842,9.652536,1.976231,7.561100,-7.977759,-0.702599,6.405003,0.413091,2.593766,-3.052342,-4.631918,-1.998643,6.165369,6.234023,-0.177034,9.496439],[-8.836632,-9.315291,4.633936,-6.230513,-2.712626,-3.347688,2.504897,1.055837,1.584120,-9.527751,-6.681241,-2.839284,-3.360685,6.752067,-4.030162,8.705173],[5.304167,7.378238,1.686810,-7.636710,-4.079851,-5.920501,-2.276037,-2.789349,6.520770,-8.407443,0.538101,6.512324,-1.713609,3.992033,9.821895,9.363350],[-8.815705,5.754113,-6.195455,6.304562,-3.043224,9.018803,0.105620,-5.677415,-5.421132,-0.421458,9.188677,7.803085,-1.664564,3.585914,8.335170,-4.275171],[6.074521,-6.807542,7.303829,-5.574706,9.333337,6.328041,-1.687523,8.946136,-3.092050,-5.867026,1.617520,6.023134,-5.430770,4.071986,-8.728704,8.758363],[-4.412446,3.787226,5.187947,6.236281,6.665959,4.751701,5.020144,-2.839125,7.247566,6.619009,2.180853,-5.896865,1.062722,6.779249,-8.165035,4.459718],[-2.322919,-1.858317,3.496194,-3.024665,-3.459689,-8.605061,-5.535667,8.447674,6.589088,-2.896079,-8.076653,9.100016,2.431101,9.561965,3.324095,-1.217093],[6.830928,-4.547489,-6.890765,-6.430166,-0.432727,-5.056662,5.869232,-1.707343,1.069899,5.609663,-9.469522,7.427156,-3.608032,0.664201,-8.531948,8.574920],[-4.330230,-4.011813,6.281061,-4.120634,1.678853,-4.285094,-6.334709,8.406236,-7.761016,2.512517,0.472264,-6.520979,1.597879,-4.706890,2.818717,-1.973992]],[[8.227927,-5.274716,1.878817,-9.145699,-6.440765,3.219648,-7.968149,-2.830267,-5.090829,4.776223,-8.326077,1.930496,4.749107,7.324717,2.836894,-4.489422],[-6.910291,8.645896,1.509745,-5.361216,9.921353,9.389275,9.609730,-6.036769,0.808650,6.431291,0.400198,-9.774067,-7.794829,8.195934,7.405444,-6.017752],[-9.836864,4.491135,-7.425690,6.696095,2.240836,5.152998,-5.603068,-5.713304,7.222775,-7.694607,-3.903947,2.852949,-1.824981,9.471239,-7.468200,-1.346897],[0.791909,0.922587,8.379026,1.999470,4.498332,3.387225,-4.814879,2.797228,-3.222362,-5.169160,-1.646779,7.864864,-8.435985,-9.495303,9.658760,-4.315387],[-7.718802,-1.056399,-1.086320,5.502074,-8.996117,-5.158723,-2.480686,-0.459802,0.655723,-8.397838,-9.321468,-5.430812,-2.005731,3.440444,7.007601,-8.146441],[0.565214,-2.362114,7.441982,9.016574,-2.754259,-9.808752,-9.608553,0.492332,-3.160019,4.719205,-1.038282,4.311772,5.574163,-6.455364,-6.841342,-2.439682],[0.680237,-5.456816,-6.054523,-8.041666,4.312331,-9.667163,0.518522,9.712461,0.660224,-8.709976,-7.535194,-9.414566,-1.704463,4.306726,3.149629,4.302848],[-0.844045,7.494600,7.658269,2.731993,8.426790,-5.313165,-3.527861,-7.878998,2.713302,7.585216,-1.011009,3.541271,-3.156213,-6.528844,-9.770798,-7.122045],[5.031946,-9.252940,8.069012,4.523314,5.345374,5.791816,4.805018,8.672388,-9.789256,-3.752537,-7.363548,8.348234,-6.314985,-3.710281,6.432815,0.419608],[5.693846,-6.323275,-0.484561,4.722727,9.114678,5.948406,-3.201029,4.823379,3.572870,7.169462,7.705479,-3.852351,-4.646941,4.851040,7.049770,-4.802055],[-7.681624,3.754901,-1.984315,-8.490765,2.253412,-3.361932,-9.156569,-6.183670,-2.047399,2.671348,-9.782014,2.610214,-3.798077,3.390125,-4.023255,-4.045092],[-7.001512,7.136833,-8.324487,-8.946410,6.244670,1.869074,6.738232,7.978154,-3.847580,4.559314,-7.572081,3.326831,1.477771,-2.022077,6.897136,-0.148867],[-5.748792,-0.750769,6.548629,-4.704027,-7.345736,-3.424280,2.443617,8.618015,-9.862618,-0.364684,7.662837,-9.490778,-9.262699,-4.033627,6.311996,1.813293],[-0.638666,0.603472,6.814576,-9.635511,1.158721,0.963114,-0.265970,-2.081805,3.011763,7.353661,3.873848,-5.488426,-4.245782,5.503204,1.136564,7.512233],[-4.216123,-6.016543,-4.938774,1.552095,3.046296,-5.293080,3.734876,8.741683,-4.163759,-8.521021,-7.700245,3.114169,7.365021,-3.807674,-5.040482,8.440577]],[[-8.112824,-1.712556,-2.366716,0.634068,-4.993846,-3.980622,-7.766743,-3.350085,-1.236754,-8.364187,8.966797,-6.850969,-6.016690,-7.172902,-7.030430,-5.255366],[1.597025,-0.635835,-8.678369,0.548725,1.618836,9.944738,5.612333,-5.667492,-9.580529,-5.209303,0.207245,-4.702768,-3.956734,-2.677181,-2.939593,7.175057],[2.686187,-3.359485,0.890071,-8.517216,3.980571,7.388334,1.083973,-3.360016,-7.596943,-2.088287,8.941615,-8.516313,5.676673,6.619107,1.563731,8.734958],[-8.146520,-1.541040,2.786984,-8.429048,-0.552096,-6.862822,-4.689568,9.843877,5.766245,-0.425911,5.495400,-1.424006,5.563654,-2.120865,9.950100,3.398473],[0.984794,2.319079,-3.889250,9.338367,0.499237,-1.077604,4.349581,7.443210,3.726503,4.464967,-6.223323,5.808839,2.990322,-8.167083,1.204122,-3.553805],[8.126263,-2.896909,-4.933426,4.708659,0.988492,9.651942,0.535521,3.186639,-1.296132,8.862740,6.696785,-5.127762,2.908576,3.126062,-7.982204,0.506622],[6.517267,9.451447,-6.169106,-4.075459,-9.308094,-3.994371,-3.946903,1.318731,-4.145686,5.791406,1.184106,7.800446,-3.605001,-1.133912,-0.303097,-4.559762],[4.074122,6.250337,-1.088697,6.933080,0.846779,1.942309,3.223460,-1.635771,5.571547,3.335767,4.050795,0.753111,3.135955,-9.774478,-5.548815,-7.075026],[-5.445328,8.875118,9.308822,-5.180311,-6.418975,-0.253049,-8.036814,5.967756,-5.925063,-3.919918,2.350329,2.544320,0.850671,7.792628,-6.514793,4.398324],[1.488793,-2.788716,0.020064,-6.256927,-5.119249,-9.698842,8.727983,-1.293001,-2.525927,-1.436982,3.826411,2.778871,7.530772,-3.359504,-6.168344,9.114918],[-6.766936,-2.030544,-9.067650,3.786230,1.299958,5.037011,3.296920,-6.517722,-3.986275,-7.964815,-3.786120,0.192558,-9.598160,1.472971,6.151556,-4.375853],[-9.142758,-0.230734,3.942212,4.223430,3.785857,-6.929270,5.805433,-8.683464,0.722287,5.137916,-2.579811,6.978031,-7.628608,3.725515,6.711327,2.157254],[-7.435775,-8.548163,3.119647,-0.514987,-2.764189,5.497658,6.637487,-4.287628,-7.941283,-1.979322,-1.076490,9.248223,1.814211,-6.680573,5.926074,-8.824606],[8.963985,5.967001,7.308993,7.410104,-9.332681,3.923882,3.530613,-9.145681,0.999643,-6.305089,6.347025,-6.385927,6.340218,5.991037,-6.340618,-2.299992],[8.642682,-8.701194,-2.766256,-9.649602,-0.609262,-2.276029,6.188319,-0.539490,-2.379184,-8.920346,-7.727649,-6.383412,-1.907089,-1.640814,5.281846,-7.533980]],[[6.388457,2.873127,2.932193,-0.395236,7.050500,8.771919,-5.474528,1.037922,-0.853318,-1.836548,-9.007193,-5.098410,-7.794930,2.215374,-3.970878,-2.912499],[-7.995969,9.715004,-3.283220,-0.114035,-5.138674,-2.088076,8.325089,2.680321,-5.803607,-4.805167,-8.670342,7.685411,-9.329809,7.338344,-4.416452,-9.670617],[7.761455,-6.616757,0.433738,-1.530190,-2.015551,-4.900416,-1.448565,-6.762637,8.345167,-4.079017,7.577206,8.914904,-1.336665,-7.259139,-0.511513,-1.088481],[-1.754532,9.380587,3.789138,-9.596489,9.559443,7.027562,-2.597077,-3.293756,-5.816736,-5.792015,-1.945470,7.893756,-5.981574,3.065297,-4.754317,-8.073645],[4.363194,4.406970,8.398201,-5.209045,-9.094873,0.470693,5.177997,2.575062,-9.454616,-1.630878,9.222428,0.843665,6.110861,-4.152395,-7.869086,7.554007],[8.776531,-3.483275,-9.752130,2.923078,-4.615688,9.652359,-5.561787,-7.400706,-8.152186,9.047007,-1.058970,8.718658,6.334192,-0.831350,8.505530,2.894901],[-8.789328,0.904261,2.956634,1.952823,6.914999,8.999720,2.251457,-7.776587,-7.400273,9.978714,9.517106,1.106752,6.817029,-2.384069,7.925333,0.741816],[-4.119255,-2.954144,6.493243,3.546734,-3.679839,-8.651537,-7.545817,-3.838303,-3.059555,-3.366881,-8.853416,-1.230234,5.658328,-0.360155,8.939673,-7.065771],[8.747773,9.985750,-8.432060,3.809696,2.340909,2.714660,1.411747,1.399275,1.918020,0.668095,5.923878,3.231445,-9.307153,6.242340,5.913465,8.882127],[-1.460027,3.616791,-9.418111,9.278560,-4.284472,9.300644,-1.018648,7.532497,-2.615349,-0.787904,1.502269,-5.619272,1.238046,0.384293,9.331839,2.831516],[0.613332,2.379135,-9.943544,2.382021,7.519295,-9.166408,0.905060,1.464901,-1.310088,3.899757,-8.336498,0.791688,1.907882,-5.479518,-7.206337,-9.381041],[3.927278,3.087901,5.076276,-9.878049,4.012784,-5.666563,9.992986,9.187529,3.694166,8.971749,-8.731238,-9.243729,1.852619,1.584207,-6.694314,4.463132],[9.936143,7.474856,3.150180,0.411616,-5.280708,-1.546854,2.578222,7.345146,-9.905205,-4.294965,-9.181613,8.910632,-4.102370,2.909372,-5.603843,-2.571867],[6.815021,-4.633169,3.376948,5.227289,-1.568055,8.968951,4.717434,-2.490685,2.568893,0.276388,1.917932,7.561012,9.018788,0.570149,3.257204,1.064202],[4.569121,-1.462017,3.829161,4.114864,4.860886,8.811391,6.772725,-9.762102,3.818092,-0.235013,-1.269322,-9.335782,-9.250143,-2.770937,3.195206,-0.448345]],[[7.520261,8.391581,2.998229,-2.889133,-0.337756,0.254317,-2.745001,-3.191875,3.411168,-8.569197,6.383077,1.525783,-0.445009,0.886899,5.294954,0.860087],[-9.985101,3.842292,5.895706,-6.251270,-6.489524,9.233730,-5.387446,-9.766083,8.828922,9.919377,1.298983,-8.189095,-0.652121,9.199365,-8.444292,5.544002],[2.705589,-5.368746,-8.677397,-4.819306,-9.195214,0.487953,-9.450023,3.812687,7.090725,-7.218877,9.986088,-5.857178,-9.177080,-9.319441,-3.097028,-0.240273],[-5.541829,-1.899578,9.102694,4.776113,6.817768,-4.745724,-3.740204,6.301627,0.362148,-9.290190,-9.171321,-2.599193,-6.298518,2.648121,-1.141333,5.489939],[-3.768593,-5.178894,-1.823022,-0.362093,-8.105743,9.634443,-9.301687,-0.979608,-4.946602,-3.133526,-0.561951,-2.585195,6.795059,6.536030,9.876207,9.246601],[7.473548,4.151327,9.694244,6.791729,5.221110,6.491394,8.211690,0.710238,-7.789521,-2.356249,-2.290333,-6.549525,0.997073,-6.472019,-2.946544,-0.659586],[0.679619,8.638367,3.650464,-3.106046,-9.173692,-6.411518,-0.662717,1.722292,-1.591523,9.831847,-9.284099,-4.779256,5.732492,-6.474487,-6.067346,3.104350],[0.243153,7.207159,1.590966,0.627172,5.055389,5.518042,9.558523,-9.860022,5.700910,-0.415630,1.589253,3.916573,6.545656,-7.167325,-7.897837,3.141327],[7.224557,6.502132,8.268168,-3.584041,-0.782219,-9.357138,-1.788247,4.585188,-4.997191,-9.029850,8.556509,-2.678050,6.284486,-0.466132,0.797811,1.848258],[-5.274731,4.615773,9.013341,-1.554720,-9.785562,2.541132,-6.465681,-3.097353,3.399878,-2.522743,-5.115642,1.070854,-0.764252,1.859691,-1.006997,-6.640493],[2.922935,-9.948327,9.973806,6.046232,4.774085,-5.885069,2.930789,-3.377471,2.967141,9.667133,6.009930,-8.192576,9.457665,7.615726,-0.302078,-7.756089],[-0.970403,4.391860,-1.993821,2.987496,9.659646,3.861333,-8.665093,1.745350,-8.275440,6.902283,-1.386785,2.031100,9.907752,1.454294,-7.539765,-7.640138],[-2.083495,-5.623576,-5.113381,-5.041410,-3.218077,-2.691971,2.379096,-0.283503,0.115717,0.020813,4.138479,8.010026,-1.347490,4.921962,-8.991351,1.620743],[2.102792,2.213368,4.707797,6.736439,3.036180,-0.500832,-5.976918,9.148380,-1.882641,5.583361,8.347831,-9.835155,1.664771,6.999650,8.920771,-4.442688],[-2.167673,-2.308928,7.948165,4.164562,-7.129914,5.355772,9.890542,-9.222645,1.560827,1.821405,-0.977525,-1.908195,4.164129,8.631811,-9.445674,8.615765]],[[-0.492512,-0.168560,-2.055332,-7.296740,9.413290,8.761827,-9.851353,-4.068767,2.370267,4.338854,-0.450216,3.559948,2.602393,-2.379469,-2.518419,-2.873896],[-0.896058,-6.683624,5.300059,4.031694,-3.131366,8.969039,-8.728795,-6.315928,6.504193,4.661648,-9.251758,-6.427778,4.671407,3.681277,-1.683255,-2.232522],[2.218217,6.109168,-8.676911,9.573924,1.905887,4.617656,4.432869,3.820378,3.639523,-1.582138,7.032617,9.414880,7.436661,-7.452641,7.770277,-5.339993],[9.329771,1.556142,-8.179996,-8.609657,9.525962,0.571415,-3.196972,9.032810,3.663701,7.241889,-4.405847,-5.183560,8.772559,-0.329962,3.926118,9.833126],[-0.612765,-9.501475,-6.501776,0.910600,5.290487,-0.409709,6.307527,6.359275,3.770734,-5.717462,-4.486458,3.473436,0.170533,-7.426287,4.515188,-6.989006],[-2.641509,-0.386332,6.376107,-1.949107,0.393749,-5.761385,-7.169319,9.887979,-7.599823,-7.378113,-5.215821,7.088897,9.207036,2.777846,8.518689,-2.117435],[-5.402853,-1.868289,-0.222654,-8.810816,0.320798,7.777866,9.495759,9.425057,-7.340777,-4.141298,-6.018435,-3.983288,0.858612,-7.360648,8.305644,-4.924642],[4.942834,-4.951347,3.921885,3.193149,5.750102,-6.209843,-7.285219,8.881734,0.240818,8.226850,4.376239,4.134525,2.256757,1.859980,1.222314,0.761377],[2.948500,-4.700988,-2.068184,0.526398,-9.934277,-8.643112,-2.492273,0.622674,8.543651,5.455273,4.856066,7.266162,-4.028274,5.177187,-4.321816,-4.874598],[-0.279310,-1.775793,8.161214,2.775605,-3.711435,-9.362874,2.034792,-2.819018,-7.614373,2.004626,2.041404,1.405061,8.810786,2.921320,1.972924,6.908359],[-7.764610,-2.239306,-9.977098,-6.580306,-4.210822,4.438628,-6.943131,-5.821715,7.323706,-6.117069,6.711775,-6.892118,0.474121,-2.828284,7.274326,-3.556856],[-3.141574,6.990687,-7.036131,2.262806,-6.768356,-3.507692,-9.237853,-4.531639,-1.719113,-0.348515,-6.741063,3.006423,-6.697643,-5.644369,7.913180,-4.124019],[9.965988,-4.206338,5.164842,-9.086748,-8.621408,-9.792485,-6.764962,-2.798527,-7.808459,-1.448593,3.718008,-4.314947,9.554394,-2.120254,1.445436,-1.999314],[-2.280654,4.287564,-1.520164,-2.085787,-3.649839,-0.250520,4.156312,-5.133521,6.157317,-9.964363,-7.174594,0.435612,4.177127,-1.161701,-2.550309,3.022982],[-2.880012,-5.749043,2.961618,2.937660,9.654781,-7.022944,5.938418,-6.856812,5.043477,5.132578,1.915275,5.578665,-4.187506,-8.840645,2.099705,-8.899210]],[[-7.787878,-5.798969,8.378451,9.102543,0.065599,6.252648,-6.782284,-9.477852,-9.103149,3.991426,-8.620631,-6.487559,2.394180,6.909350,-9.185575,-5.907739],[-0.615944,-3.410634,-8.725105,-1.912353,4.806772,-9.652568,-5.310080,6.398670,1.769934,-8.627074,-8.989285,-6.303927,3.307609,-5.764762,8.624606,-0.206336],[1.942490,6.576814,7.278112,-1.151647,2.612630,-8.817596,0.426525,-2.508068,4.256921,-6.333427,8.250136,9.912677,-1.916486,9.231607,-0.756822,6.720406],[-5.296586,8.886916,-0.583345,6.822591,9.620545,1.275842,5.274821,7.624692,9.281888,-8.327887,-6.377593,5.958878,0.113675,6.165139,0.445066,-8.452258],[9.739879,7.715122,1.855263,-1.632134,-6.475556,0.200024,8.049433,-9.745069,-4.069898,-7.966434,-8.572697,3.483774,-6.675661,1.810585,2.571971,7.432103],[-9.976898,-3.336141,3.564235,-0.981338,0.970727,-2.963251,-7.556015,5.000520,9.087766,6.279431,4.559339,-5.902937,7.216046,0.301386,0.322454,-8.435733],[3.582272,5.944320,5.753330,8.884612,2.700125,2.780634,-0.167278,-7.461507,-9.189013,-9.265090,-5.345895,5.728342,-9.759848,-9.286662,-5.420396,1.204998],[9.553197,-6.198761,-9.869554,9.465759,6.921909,1.886386,3.563081,-4.991715,-9.589843,-4.790070,0.833291,-1.664927,-4.670372,7.640200,0.568439,6.014635],[1.763710,8.052703,0.941166,4.222911,-6.160435,-4.942239,-5.485385,4.723842,9.623844,0.065004,-0.482712,5.897083,-7.378483,8.384713,5.178531,-8.953961],[-0.283640,6.427045,1.741203,4.629941,5.089549,2.079846,-6.438563,-4.906833,-3.897231,-9.096527,-6.529901,-7.032729,-6.548204,-4.060557,-1.390489,-7.671440],[5.682100,-7.662928,-8.000042,-4.989247,1.436253,6.954278,-6.931833,-0.184103,1.568508,4.339354,-3.439751,-4.298520,7.209383,-2.321615,5.428941,6.915893],[-8.794378,5.714244,4.718996,7.423969,-5.627724,-2.030892,-3.664251,4.189621,6.186688,7.971463,-6.226048,-1.751003,3.695515,7.978301,3.273432,0.839229],[-1.223649,-1.895060,-3.766111,0.117447,-2.915407,3.236270,-0.982595,-0.209104,-5.484272,7.089515,2.099668,-8.653333,-3.528162,7.223542,-0.330647,-8.704149],[-9.867009,-9.457136,-8.241893,4.790452,4.710163,9.487256,1.972430,2.517455,-8.980002,0.131117,-7.970143,-2.599480,9.406111,-1.750564,-4.399086,0.975757],[7.359153,1.109888,7.964607,-3.625450,4.693436,-6.191344,8.404299,-3.914883,-8.836147,6.633919,-2.006529,9.721677,-4.594787,2.575503,-9.171770,7.286917]],[[7.451790,6.662450,1.999052,2.785015,-8.276028,0.132102,-2.798904,1.325733,8.964033,9.715858,-2.310718,-3.815944,8.122972,9.855205,-7.752367,1.898051],[3.805841,-5.426068,0.094489,9.396846,1.787974,9.204240,6.901092,-8.028814,-8.904605,-5.311762,-0.348172,1.668427,-5.286928,-6.744340,0.652596,-8.099045],[-2.695449,3.063866,2.668497,3.421203,4.420312,-6.595276,0.762254,-7.297380,-9.289248,-3.905430,9.669202,-8.515429,-5.118602,-8.125371,5.139278,-0.943831],[4.535882,8.859472,0.107398,9.166064,7.057665,5.223932,-5.472584,-5.450862,-5.370933,6.281698,-1.477329,0.541140,-9.279911,-6.165184,7.470345,-3.906282],[-5.457146,1.024346,-9.898432,4.147571,-7.961644,0.357683,-6.432032,9.949158,-6.333687,-9.820343,5.985896,-7.515131,0.486233,2.197450,5.859372,8.617475],[7.360015,5.837017,5.434745,7.260096,7.978316,-6.673636,3.282517,-2.849586,-5.066300,-6.150753,9.596354,-0.889881,-1.471522,9.035965,0.676127,7.722557],[3.804989,-1.560463,8.308372,-8.111671,-0.222202,-3.133094,-5.947556,-9.898257,4.768966,-4.848080,9.474776,2.928472,-2.611109,4.523405,0.463348,-9.193862],[-1.336245,5.060259,1.455123,-1.404589,-5.097443,0.475369,-8.624211,-7.316651,-6.006287,-3.591830,4.854432,2.140125,-9.618503,3.344229,-3.285682,-3.547201],[-5.334820,-1.916051,6.073778,-3.250547,-1.421210,-5.373945,5.882264,-6.447128,-3.934189,4.020093,6.092033,8.092144,4.170465,0.505310,3.954948,-5.489877],[-7.090182,9.789436,-0.501997,2.254486,2.647684,9.374838,-7.257208,-9.518371,-0.542629,-4.438341,5.444847,7.672752,-5.530152,-6.007893,-2.272407,-9.110998],[7.896708,-4.241149,7.644270,-4.127186,1.644167,5.572759,-5.666250,-2.569775,7.326340,-9.019620,6.069548,1.262192,-9.475836,5.034347,6.548438,5.950368],[0.302975,-2.222610,-5.637010,9.005546,-2.330801,0.498729,-1.893380,1.073540,8.041678,-3.137418,5.060122,-9.262926,8.053988,-5.004298,1.090783,-2.772676],[9.026137,8.588211,8.677394,7.733354,1.040938,-0.168946,2.373724,7.008179,2.778822,1.686226,-1.241114,8.174096,7.290228,-9.277871,5.615272,4.801724],[8.101328,-6.019801,6.676801,-5.133723,0.992318,-9.026643,-8.477306,6.554219,-4.763441,-2.730045,-9.576540,-1.772724,0.856171,2.326279,9.129621,6.808814],[1.462044,-9.454374,6.223781,-8.364246,4.881328,0.916175,-0.640814,-2.503108,7.264073,9.083349,-0.032803,6.301013,-1.366725,-9.745192,9.179117,-0.715938]],[[-0.204973,5.446017,4.883815,-0.834906,8.807614,-7.650643,-8.196672,-9.777495,9.246359,9.491713,0.211715,7.827298,2.651361,-7.006704,1.460117,-9.811535],[4.083733,-5.706724,9.735218,5.290080,-6.876261,-6.153590,-0.757732,7.957059,0.041725,0.998381,9.912415,-1.560350,4.790293,-7.730261,-1.151164,-8.535104],[-4.674137,-6.056307,2.732854,-5.040034,-9.557611,-1.573115,7.588467,-7.139667,-6.372105,-4.672675,0.246885,1.314011,6.226632,3.951732,-1.135194,7.171425],[-4.143115,-2.501813,0.217537,-4.246431,4.906291,8.437756,-1.879525,8.680215,1.515302,-6.698108,7.548835,1.999737,9.646434,-1.160945,-0.922220,9.761011],[1.992815,-1.659991,-6.773678,-8.070883,0.858456,6.030826,-6.348805,7.077509,-9.890882,-2.925845,1.918862,-1.694808,-4.322291,-5.564031,-1.620617,-4.117500],[2.430429,-3.267376,4.731184,9.804623,-1.181695,-2.422760,-2.371123,8.634238,5.130310,-3.721848,2.795832,-0.714726,9.677697,5.570963,-1.540100,7.375036],[-7.315167,8.341250,2.135491,2.860653,9.390411,-5.865461,9.825355,-2.051139,2.504897,6.209235,0.821118,-6.389353,-6.182946,-4.086667,3.652753,-6.850173],[-0.888244,1.653190,-5.900087,7.129557,-3.428392,5.705885,2.328976,0.059342,-7.279006,-3.988010,-1.807546,-3.518431,-1.116480,9.262690,1.090863,0.024192],[2.318206,9.438211,6.147411,-5.012017,-1.685694,7.164941,0.136990,-8.298279,2.928135,-8.813623,1.541989,-0.400461,8.835848,-8.817614,7.942056,-4.205001],[-5.127357,8.789806,4.774062,-0.155452,9.240126,8.577202,-2.553850,6.785531,-7.178331,9.510853,-3.791128,0.924880,0.393227,-0.162089,-3.060417,6.291850],[-0.392945,-4.443325,-4.081292,9.432875,5.593816,9.889997,-5.721416,2.087803,-3.290290,0.833240,0.660905,-4.230831,-4.298648,5.240479,-4.281096,7.973424],[5.898393,-4.785913,-9.921416,-7.472293,-4.543421,9.354864,-4.682074,-0.573385,2.155436,6.801634,-7.957684,2.767960,7.192225,3.827281,-8.158613,-9.711280],[4.796858,3.311473,7.247605,3.270281,0.180882,-7.482111,3.983234,-3.419154,-7.223425,4.709286,-0.375753,2.645128,-0.730605,2.758325,-7.224382,-4.540396],[-2.085436,3.047992,6.633344,1.109046,-0.494235,-8.022314,-6.249425,-3.986537,1.584964,-4.149677,3.657939,8.942323,-0.265602,-1.369405,-1.194186,-4.575043],[-3.211456,-2.472933,-6.863736,4.076504,-5.207832,4.947996,-4.839640,2.786278,4.070735,6.344008,-6.479377,-9.040160,0.269557,0.916183,-4.172393,-9.741279]],[[2.926224,-8.236154,6.120001,-1.690349,-4.711056,-2.049065,-0.706361,-4.944019,7.529965,-8.446401,-5.701475,7.602203,8.394802,6.369519,-7.728423,-0.448730],[6.887055,-9.848625,-0.372635,-6.810445,-6.982654,-2.060313,-7.018148,-8.803393,-4.624655,8.163838,-4.412118,8.381750,7.860764,4.816446,-4.053734,-5.512806],[-6.927190,-9.251717,6.906279,7.293866,-3.081850,-8.447167,-6.913101,-7.316945,4.911218,2.152714,-0.103120,5.727829,-3.665874,-7.243776,5.909012,-1.632169],[4.811325,-1.983829,8.864721,-3.219576,9.872054,-1.381888,6.366047,1.116333,9.769333,-6.430759,8.525500,2.907828,-8.863962,-4.788305,-2.457349,-5.605009],[-2.167651,3.643448,-7.908897,1.089172,-1.665245,-4.931551,-6.100673,8.999487,-5.626106,-1.003707,6.383972,3.136077,5.403707,6.459502,-2.697420,8.962492],[6.942510,-8.826352,-3.724426,0.589991,-9.431586,-7.543031,0.818993,-4.950294,-6.945110,1.488682,-9.081844,9.327640,3.311877,-1.916880,-6.778085,-5.939987],[-2.976842,-1.054198,-6.809655,3.536025,9.486935,6.998789,1.023321,-5.315146,-4.576408,-6.152873,5.974689,-1.093772,-5.584055,-4.118829,-4.028639,-0.012265],[-9.477079,7.656431,1.165777,5.003769,0.784714,0.029800,-9.437698,-7.204949,-5.640389,1.560957,-5.149135,-8.134316,-9.703251,-5.980461,1.589898,8.859812],[7.241654,-8.691096,-1.566722,4.420510,-3.136954,-7.127924,-3.517403,-8.332368,3.315316,-9.272780,6.847122,5.915461,-0.559309,3.170540,-4.521411,3.637771],[4.456764,-6.539959,6.894033,1.651837,6.335068,-2.730876,-7.491477,-2.250031,-2.679242,-0.697843,8.346232,-6.546458,7.844572,9.253140,-0.935956,9.278470],[-3.101176,8.053304,3.166715,6.460106,9.632607,-6.208697,-8.097069,2.120514,-9.002234,1.168235,6.263724,5.048634,6.250815,6.167653,4.827086,4.036372],[-1.570850,3.337908,-3.549466,-1.365018,-6.529558,0.770280,7.513098,8.383974,-3.040878,8.718160,-7.716453,-4.800438,5.767106,-7.134574,-1.672761,-3.820783],[-2.194664,-9.729380,5.302301,-4.521353,-6.732819,-5.812275,5.354518,0.927850,-8.244130,8.275557,0.072308,-1.708798,7.048856,1.931220,6.348576,9.941194],[4.013425,-4.075984,-1.930765,-2.386612,-4.639322,7.334166,-7.614458,-2.633461,8.277965,-6.013770,4.168552,-1.702041,3.519453,2.441597,8.561500,-2.067459],[-1.986801,3.526210,-0.063523,3.654789,9.616245,-2.062600,7.045133,-3.745017,-1.632147,5.077093,-7.662001,4.823064,4.037381,-4.769901,8.892811,5.178900]]], dtype = "float32")#candidate|2451|(15, 15, 16)|const|float32
uop_2452 = relay.cosh(const_2451.astype('float32')) # shape=(15, 15, 16)
uop_2469 = relay.sinh(const_2451.astype('float32')) # shape=(15, 15, 16)
uop_2481 = relay.exp(const_2451.astype('float32')) # shape=(15, 15, 16)
func_71_call = mod.get_global_var('func_71')
func_74_call = mutated_mod.get_global_var('func_74')
const_2485 = relay.const([-0.278931,8.524872,1.376650,-0.160279,-2.190760,-2.550284,-2.599850,1.871060,-1.556521,-7.380682,-6.922352,-9.438109,-7.864003,-4.483751,-7.808656,9.747409,0.147713,5.724375,1.409874,-2.523718,4.977628,-9.214921,9.981204,9.248232,-8.608347,-6.409778,-3.854397,-3.948684,8.829931,4.043043,-9.652276,8.133914,8.387608,-6.799289,-7.390380,-8.732016,4.012366,1.498137,-3.512878,-3.204944,-2.545982,8.894435,-4.342143,2.340989,-7.477396,4.749753,6.579267,-6.526644,-1.922438,4.903469,8.297128,-9.127840,-1.418433,-2.053490,-4.123683,5.643531,4.605686,-3.835548,-5.460659,3.486786,-8.313183,1.141034,8.476270,-3.533515,-7.016520,2.267263,-4.230726,6.838704,8.172781,9.045833,-5.976769,8.270753,-9.963576,6.401968,7.201288,6.758597,-2.658918,-3.094753,5.275509,0.595526,-7.807607,0.940118,-0.214462,-5.680647,-5.626369,7.907815,-6.506326,-1.247878,-4.428577,-6.582663,1.215685,0.676050,-2.432817,2.739827,7.238624,-1.507046,0.990662,-8.429604,-0.841420,-6.186315,-3.082128,6.719949,-9.137304,2.061074,-6.562940,-7.036183,-3.786462,0.160507,7.828320,-2.462931,5.146623,7.685056,-6.439455,-1.591702,-1.071235,-2.375078,-4.967822,4.768747,5.273026,-9.095212,-0.563257,7.309858,-4.912746,-3.182341,-1.868605,-5.377162,9.216327,-4.371411,0.154880,-0.286948,8.167018,8.372232,-8.293203,-0.576853,9.125552,0.895157,-4.439142,-0.006877,1.395709,-0.239914,3.975445,7.829671,-1.651230,5.212632,-5.261096,5.708256,-2.768774,-3.965561,-6.676413,-4.317607,4.474711,1.495160,9.339306,-4.514939,-2.299138,-1.248566,-7.124624,-4.599542,5.901277,-3.884365,3.792714,-8.820557,-4.629730,1.535708,9.109020,6.570468,1.414199,-3.986104,-1.557733,-9.374681,-5.217028,7.904787,-6.972815,6.713461,6.803257,-0.219322,-4.905423,-2.558206,1.171018,1.606563,5.080955,5.244390,7.392610,7.697860,-3.232425,9.646181,-9.545923,3.496874,-3.453595,1.170777,7.701110,0.431371,-5.905387,-2.539177,7.268387,-0.729648,-0.293693,3.468040,-9.694835,-1.678817,-5.416449,9.881979,-1.232755,-7.855284,2.809588,-4.100370,0.465665,-5.497571,3.287543,2.204061,-4.754758,7.946506,5.587237,7.363947,-8.005782,-2.906027,9.078743,7.025808,3.805324,-2.472621,3.855741,0.780858,-2.871284,-8.590095,-5.900017,-5.160706,-6.940012,-4.690810,5.859860,2.274682,9.544311,-4.670020,1.131238,-8.601316,0.097964,2.372663,2.842008,8.639843,4.043215,5.131893,4.216741,-7.936851,4.347597,9.353031,-9.079201,-8.296581,2.479946,-1.298953,8.221392,5.693001,-9.406084,2.752602,0.692506,7.023054,2.775270,-7.640647,6.865785,-7.838133,6.067401,1.953952,-6.466932,2.679779,-8.623841,-2.772135,-2.116307,8.328517,-2.731541,-0.599166,1.034583,-3.048307,-7.263217,-1.329811,-3.280897,7.465514,-9.320486,9.723179,-4.407074,-1.052588,7.204078,-7.487845,-7.446300,-6.626967,8.213461,-4.784966,-6.198497,0.618384,-0.569219,-8.832275,-6.080392,-8.847178,-5.843235,2.451611,2.138250,-3.730665,-0.925375,-7.906528,-5.227807,0.074132,-4.805013,-7.225587,7.551048,8.795840,5.448540,-6.373170,6.073150,5.365020,-9.245323,1.834987,-2.688769,-1.089916,-9.292446,-3.560034,2.392742,-1.231945,7.480587,7.314712,-7.045937,-5.451910,-8.778157,9.871938,-7.973361,-0.448851,6.092642,-1.835022,2.891303,-8.577373,0.928581,-4.764225,0.861972,-5.709986,0.762394,3.350216,1.845678,-9.696252,-1.107459,8.358250,-9.674310,6.844202,1.674364,2.189738,7.413127,8.113371,-0.384799,5.859159,-5.697938,1.213049,1.178746,-6.654408,-2.261214,5.999298,-0.089548,1.983762,-2.438023,5.373324,-2.285045,-6.530506,-7.470573,3.211949,1.940465,-2.071137,-5.006304,4.494187,-1.896510,-2.583353,-0.693492,2.550974,4.805997,2.064789,-8.889731,2.617304,-0.784693,-0.240749,4.566737,4.748162,-8.261628,5.878699,2.908688,6.278235,-1.452815,2.682806,1.260618,4.641691,1.625522,-7.491384,6.618428,7.610626,8.582236,4.363868,9.584012,2.161252,-1.335751,-2.034979,8.740392,-9.016362,-9.496252,6.598040,-1.339685,-3.431618,4.338746,1.748216,-3.433515,-6.230359,-9.441990,7.493114,9.782860,-9.087156,5.435960,2.868412,-7.033086,-7.648381,2.341569,-4.193194,-0.577588,-3.982002,3.195529,6.276483,-9.534494,1.752480,9.048779,-1.725358,6.691789,-6.221438,0.260184,8.102460,4.045000,-3.626056,9.421221,2.588902,1.907209,-4.636644,8.338022,5.926207,9.915741,2.279449,5.248342,2.478641,-6.406749,6.618297,-3.796444,4.127830,-5.155713,-3.033608,-5.111337,6.775241,5.929993,-5.245631,0.070700,-1.713431,-7.995823,7.253899,3.922639,-4.802338,1.572040,-5.515774,-4.118807,4.194008,0.968883,4.415951,0.283886,-8.010252,-1.189068,-2.700192,-9.134823,-3.486203,-1.954172,-2.295630,9.979837,6.463629,-8.220188,-6.219351,7.906700,8.018646,3.075575,-4.082358,1.028224,-1.394337,9.036770,-4.173080,3.829900,-5.246150,-4.008224,-4.568465,1.744050,-8.142044,5.680748,-8.945185,4.134686,9.285777,-5.332420,5.774919,-1.027295,6.715818,-9.707428,3.185672,4.751999,5.400460,-2.696250,4.833335,4.738718,6.490277,-4.488541,1.635365,4.975816,-5.992396,-0.262387,-9.776964,8.930074,-9.539501,1.709297,-1.103606,2.139278,-2.927463,6.869363,6.396609,-8.952167,6.800368,5.265282,-7.042250,7.158092,-2.251171,-5.403037,3.094808,8.290310,-8.605297,7.079728,9.516353,-0.841167,3.890199,5.998513,7.938392,6.651299,-1.559906,2.817395,-4.490116,7.595406,7.186070,5.592972,-9.298284,-6.183086,9.406501,6.212259,2.249888,-2.082040,9.105301,4.000372,2.071644,2.428318,4.143597,-0.449780,4.485752,2.595901,-4.627863,7.087085,9.890334,2.871753,-2.424967,6.995378,-6.869782,-8.245857,8.971867,-1.415575,-4.342593,-2.905523,0.277705,5.028877,-5.125805,8.949226,4.146922,1.615057,-8.487877,1.722633,0.217156,-3.924756,9.774717,4.379344,2.709733,6.975565,1.941762,6.573895,5.868152,-8.041787,6.406972,-5.347460,-8.679486,7.358409,-2.846839,3.896329,2.505047,6.310559,-9.887416,3.434794,3.903115,-9.603124,-9.633127,6.372681,-4.400341,-6.530851,2.404534,1.294906,-0.271275,-7.949944,5.807186,6.731817,-3.799086,5.954813,2.828106,-8.412975,-0.545888,-0.354512,-8.537449,-2.768746,1.648174,7.155924,1.047360,-1.516768,2.898679,-3.064271,3.746989,-0.192485,-7.328758,-0.034381,-9.405237,-2.156435,7.775011,-9.406764,-2.713340,5.685015,9.016334,-2.737697,7.758498,-1.533113,-2.318300,5.623271,-9.412439,3.204649,-2.899590,4.688416,-8.128264,2.478903,-9.800204,3.745092,-8.312488,-1.835083,6.503566,-2.789073,3.644111,-8.570568,0.452341,8.946131,4.018955,-0.807688,8.418934,-0.631060,-9.784996,3.926067,0.689078,2.136130,2.472247,7.729961,5.646476,4.855268,4.705971,-2.068274,-8.156877,-2.186135,-4.965191,0.367183,-6.632006,0.997457,3.630842,2.632102,2.920331,-9.473569,-0.555512,-0.924578,9.091636,9.738490,2.646985,2.506700,7.304839,6.475924,-5.786909,6.342407,-4.962700,5.672579,-5.338044,6.535470,-6.132455,-4.446180,3.452778,-0.301262,0.661174,7.840716,3.660515,-4.504479,1.222808,-8.078524,-0.580040,-8.421145,-4.350987,-9.460806,6.102929,-2.532922,3.998552,-6.051139,3.475962,6.795901,-4.183988,7.578723,1.286291,2.733931,2.020415,-6.092892,4.878284,7.941213,8.713890,-2.929610,3.938067,-2.145084,-9.669258,6.991123,1.491793,-2.363903,-2.781895,5.241180,8.708080,-5.963640,-3.278607,-8.414977,9.409886,3.873719,0.694613,8.907740,-8.246554,9.500230,4.234078,7.641348,0.716079,-1.334999,2.721006,0.397659,-7.890872,-0.182742,-1.343858,2.102544,-4.125860,-1.649230,-8.333702,-2.794945,2.526282,2.538311,-6.599390,2.418380,-5.359251,1.352087,5.142086,-0.297506,-4.050278,-8.369468,6.084275,8.255763,-4.794635,9.564972,6.228504,-6.083590,4.024012,0.293906,-6.266473,9.204905,1.979714,-0.083891,3.037050,-2.291879,3.099818,4.361146,-3.502400,-0.221248,-2.316736,-7.218968,3.547487,9.129311,-6.643459,3.718989,0.225504,-1.055280,6.861454,-1.337142,8.379956,4.288291,2.855391,-6.010760,4.571926,4.575828,-4.340436,2.129569,-4.831352,1.261082,-6.134700,1.319561,2.596126,-6.273298,-0.738511,-7.314638,3.502470,5.214841,-1.099924,5.857889,-1.056326,1.077060,-4.316377,4.169174,7.886003,5.175468,2.739274,-4.020858,-8.341129,9.590102,5.918151,8.029887,8.600915,5.530036,-8.544927,2.598774,9.716558,0.802846,-9.812209,-2.738716,4.932826,6.039834,-5.030618,-3.669650,-4.107560,-7.241624,8.989101,-2.495371,-2.813499,-3.278139,-8.266958,0.424863,-0.248616,2.062629,2.685672,9.488612,-4.629672,9.209440,-8.563855,9.969060,-7.602568,-0.703997,3.001215,-3.641554,-5.742135,-7.497131,0.152541,0.030097,7.273153,-2.053778,-9.943217,2.263310,-8.283719,-0.121647,-7.132589,9.049572,1.176377,-9.829384,-3.606961,-1.768907,8.229456,-3.800102,-3.165375,5.761783,-4.226398,3.744953,3.531744,1.009034,0.570066,-3.089619,-4.950696,-5.085517,6.618085,-3.869368,-7.319793,-2.624037,-8.401480,-8.350554,-3.062243,-6.279016,6.311405,-6.483619,-9.403600,-1.296697,6.591547,-9.127192,-6.967051,4.887125,9.505179,0.201615,-1.819627,-3.329188,-2.671061], dtype = "float32")#candidate|2485|(900,)|const|float32
call_2484 = relay.TupleGetItem(func_71_call(relay.reshape(const_2485.astype('float32'), [15, 10, 6]), relay.reshape(const_2485.astype('float32'), [15, 10, 6]), ), 0)
call_2486 = relay.TupleGetItem(func_74_call(relay.reshape(const_2485.astype('float32'), [15, 10, 6]), relay.reshape(const_2485.astype('float32'), [15, 10, 6]), ), 0)
func_71_call = mod.get_global_var('func_71')
func_74_call = mutated_mod.get_global_var('func_74')
call_2495 = relay.TupleGetItem(func_71_call(relay.reshape(call_2484.astype('float32'), [15, 10, 6]), relay.reshape(const_2485.astype('float32'), [15, 10, 6]), ), 0)
call_2496 = relay.TupleGetItem(func_74_call(relay.reshape(call_2484.astype('float32'), [15, 10, 6]), relay.reshape(const_2485.astype('float32'), [15, 10, 6]), ), 0)
func_1875_call = mod.get_global_var('func_1875')
func_1880_call = mutated_mod.get_global_var('func_1880')
var_2498 = relay.var("var_2498", dtype = "float64", shape = (1200, 1))#candidate|2498|(1200, 1)|var|float64
var_2499 = relay.var("var_2499", dtype = "float32", shape = (756,))#candidate|2499|(756,)|var|float32
call_2497 = relay.TupleGetItem(func_1875_call(relay.reshape(var_2498.astype('float64'), [15, 16, 5]), relay.reshape(var_2498.astype('float64'), [15, 16, 5]), relay.reshape(var_2499.astype('float32'), [756,]), ), 0)
call_2500 = relay.TupleGetItem(func_1880_call(relay.reshape(var_2498.astype('float64'), [15, 16, 5]), relay.reshape(var_2498.astype('float64'), [15, 16, 5]), relay.reshape(var_2499.astype('float32'), [756,]), ), 0)
output = relay.Tuple([uop_2452,uop_2469,uop_2481,call_2484,const_2485,call_2495,call_2497,var_2498,var_2499,])
output2 = relay.Tuple([uop_2452,uop_2469,uop_2481,call_2486,const_2485,call_2496,call_2500,var_2498,var_2499,])
func_2501 = relay.Function([var_2498,var_2499,], output)
mod['func_2501'] = func_2501
mod = relay.transform.InferType()(mod)
mutated_mod['func_2501'] = func_2501
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2501_call = mutated_mod.get_global_var('func_2501')
var_2503 = relay.var("var_2503", dtype = "float64", shape = (1200, 1))#candidate|2503|(1200, 1)|var|float64
var_2504 = relay.var("var_2504", dtype = "float32", shape = (756,))#candidate|2504|(756,)|var|float32
call_2502 = func_2501_call(var_2503,var_2504,)
output = call_2502
func_2505 = relay.Function([var_2503,var_2504,], output)
mutated_mod['func_2505'] = func_2505
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2798 = relay.var("var_2798", dtype = "float32", shape = (4, 8, 1))#candidate|2798|(4, 8, 1)|var|float32
uop_2799 = relay.rsqrt(var_2798.astype('float32')) # shape=(4, 8, 1)
output = relay.Tuple([uop_2799,])
output2 = relay.Tuple([uop_2799,])
func_2803 = relay.Function([var_2798,], output)
mod['func_2803'] = func_2803
mod = relay.transform.InferType()(mod)
mutated_mod['func_2803'] = func_2803
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2804 = relay.var("var_2804", dtype = "float32", shape = (4, 8, 1))#candidate|2804|(4, 8, 1)|var|float32
func_2803_call = mutated_mod.get_global_var('func_2803')
call_2805 = func_2803_call(var_2804)
output = call_2805
func_2806 = relay.Function([var_2804], output)
mutated_mod['func_2806'] = func_2806
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3227 = relay.var("var_3227", dtype = "float64", shape = (7, 2, 10))#candidate|3227|(7, 2, 10)|var|float64
var_3228 = relay.var("var_3228", dtype = "float64", shape = (7, 2, 10))#candidate|3228|(7, 2, 10)|var|float64
bop_3229 = relay.divide(var_3227.astype('float64'), relay.reshape(var_3228.astype('float64'), relay.shape_of(var_3227))) # shape=(7, 2, 10)
output = relay.Tuple([bop_3229,])
output2 = relay.Tuple([bop_3229,])
func_3245 = relay.Function([var_3227,var_3228,], output)
mod['func_3245'] = func_3245
mod = relay.transform.InferType()(mod)
var_3246 = relay.var("var_3246", dtype = "float64", shape = (7, 2, 10))#candidate|3246|(7, 2, 10)|var|float64
var_3247 = relay.var("var_3247", dtype = "float64", shape = (7, 2, 10))#candidate|3247|(7, 2, 10)|var|float64
output = func_3245(var_3246,var_3247,)
func_3248 = relay.Function([var_3246,var_3247,], output)
mutated_mod['func_3248'] = func_3248
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3679 = relay.var("var_3679", dtype = "uint8", shape = (9, 10, 8))#candidate|3679|(9, 10, 8)|var|uint8
var_3680 = relay.var("var_3680", dtype = "uint8", shape = (9, 10, 8))#candidate|3680|(9, 10, 8)|var|uint8
bop_3681 = relay.subtract(var_3679.astype('uint8'), relay.reshape(var_3680.astype('uint8'), relay.shape_of(var_3679))) # shape=(9, 10, 8)
func_2501_call = mod.get_global_var('func_2501')
func_2505_call = mutated_mod.get_global_var('func_2505')
var_3687 = relay.var("var_3687", dtype = "float64", shape = (4, 300))#candidate|3687|(4, 300)|var|float64
const_3688 = relay.const([7.857933,-0.826725,-5.213403,-4.820923,-4.611106,0.048687,-1.833153,6.013714,-9.871221,8.655982,1.561186,-8.904935,-2.635042,-6.752117,6.770502,8.139130,1.755385,3.469421,-8.875726,-4.838952,8.355912,-4.425088,1.933720,7.399164,-5.086639,7.794823,-8.115937,1.244761,4.973640,-6.938442,-9.653790,4.972037,-3.039325,8.666308,-5.791168,1.376708,2.836570,-6.202639,4.436954,-6.641678,-0.523546,3.455665,-2.018572,4.525208,-4.976204,-0.324719,4.846625,-1.991482,-9.616311,-4.341105,-3.580296,-3.865638,8.098396,-0.260261,2.178433,-0.013217,-1.857051,-9.240473,8.033040,-0.360463,-7.711698,-5.628294,-0.174151,4.838074,-0.389776,-9.670588,7.424063,-3.761650,6.057124,5.362968,7.579358,-4.883163,-3.143476,-9.174845,-5.977752,3.703485,7.378758,-8.997446,0.340288,4.793109,-3.287113,-1.566313,-7.076074,-9.137755,0.839799,-5.539786,-1.028853,9.041579,-9.457237,-8.025468,-2.188283,0.098864,9.621913,-1.780318,7.399818,-5.770128,7.975049,1.413626,8.725654,6.923189,4.111321,8.696065,-0.648405,-3.831922,9.358960,3.829966,7.523228,1.983116,-8.471448,3.233019,1.268622,8.416979,-3.302112,9.824841,1.142929,-2.635339,-5.758393,-8.308617,-8.930145,2.029604,6.056328,-5.647989,0.095834,5.015041,6.259454,8.760428,-5.960736,6.105213,5.226091,-2.356252,3.293015,-5.736838,-1.166356,-7.517652,8.875841,-8.949219,-0.366375,6.447925,1.351255,2.815180,5.091041,9.838415,-1.861653,-4.829534,9.676509,-3.963204,-1.806063,0.094702,5.464043,0.852177,3.036489,5.291239,-4.310030,-9.885475,8.397148,-3.318713,-2.793464,-2.846689,-9.041456,5.908231,1.879729,-5.988943,-3.277159,-2.001995,5.029208,-3.636831,-8.062471,-9.014931,2.737136,-3.062322,7.551108,8.117289,-0.625033,-9.886406,9.154764,8.178291,1.371807,-0.989479,7.771574,0.805108,-8.781147,5.662969,9.448087,-9.753254,-2.114590,0.522126,8.430318,-6.817997,-8.519796,3.970604,-1.054043,-1.636741,-5.574103,2.142531,3.909919,7.722115,-1.766649,-0.003251,-1.552880,-3.118267,4.367865,-9.996660,8.149140,7.350159,9.385801,0.465617,6.631083,5.407334,-7.920271,1.545878,7.974377,7.825612,0.401152,2.253645,-1.905922,8.685237,4.951177,6.742399,-5.518425,-2.490082,9.334026,0.411125,5.586553,-4.109665,4.267064,-1.122423,-2.736441,-5.551862,5.409327,-3.808098,-0.506996,-0.388109,6.749872,-2.897424,-5.236995,-7.131449,-0.135019,-6.457619,-4.787417,6.927518,-9.964002,5.113505,8.289198,-5.068331,8.125650,0.332355,-5.832790,-3.716237,2.817180,2.261999,9.600071,4.709962,8.693220,-6.103159,-2.032077,0.851712,7.442942,-2.069788,8.187752,1.481472,4.908342,-9.004034,-1.480417,4.067879,3.772983,8.579166,-2.766843,-5.079205,-6.463034,-4.115773,-5.794360,5.402772,-0.720549,-2.431885,6.799288,-3.598956,-9.023074,-4.567337,4.564233,-3.415136,7.614474,-8.031997,-1.316730,7.450151,4.025999,-8.423407,-7.616093,5.787228,7.237641,-9.921121,7.979463,9.681853,5.206587,8.877360,9.698086,3.922521,8.605160,0.951313,-3.364293,0.771784,-1.557053,5.484156,7.228021,8.247690,-7.770811,2.692941,-2.713656,-9.319671,5.808571,8.886164,2.901968,9.632373,-0.269486,5.267971,2.305061,-6.077095,-7.649624,-7.297407,-6.817140,-6.376918,9.065275,-5.545318,-6.504809,4.948621,-1.692625,-7.992174,5.225718,6.183326,-7.823881,-4.512427,9.764806,2.210057,-4.807011,6.884076,0.269573,-4.425623,-2.790784,7.059536,0.846350,-4.353415,7.139724,2.715182,-8.329604,-3.379229,9.194850,-6.916168,3.580385,-4.269999,-5.756160,-3.097358,0.797873,-1.068585,1.149781,-5.340723,4.410404,8.098210,-9.420327,3.195940,3.709201,1.153374,6.229591,9.153678,-9.229212,-8.434563,0.506921,-4.854306,3.657703,-3.867974,-4.384832,8.539193,5.947642,-0.830468,-7.449173,-5.141501,9.009108,-0.996656,-8.976113,9.092194,-9.517458,0.518828,-0.424404,-6.521128,-6.532557,9.909687,-1.998925,-5.787812,0.770974,9.584107,1.671186,6.645636,6.135761,8.024220,3.966926,-1.821202,-1.524300,9.206028,-9.552323,7.024473,5.747996,6.300737,4.476967,9.049715,8.960961,-5.025108,6.614474,0.647608,-3.159590,-9.919284,-7.700663,0.521506,-6.772727,3.573170,-5.361791,8.380623,8.489954,7.976531,9.228853,3.514690,0.654074,9.767887,9.260067,-1.085109,8.854670,0.152747,1.401036,-9.035858,-1.101112,-0.640265,-4.921166,-7.654628,5.114888,5.357160,-5.783951,3.307537,-7.598013,-7.450155,4.924614,0.478055,2.014965,-6.376351,8.586214,-3.382313,6.590981,5.234259,9.478384,5.714280,4.365318,7.429707,-9.311681,-4.839349,6.128821,-6.765589,2.317497,8.015593,9.009081,4.762786,-8.708207,-4.750051,9.860833,-3.718676,2.898959,2.407111,-4.115361,-2.636019,9.647066,1.856400,-6.352464,2.436277,-0.165612,-9.986765,3.728229,-0.618744,-7.499859,6.777796,-9.839499,-4.624911,5.164793,2.053938,-6.156047,-5.922647,-9.527237,-9.492058,-9.052595,-9.573332,-6.916081,-8.719825,-5.537648,5.103865,0.664545,-4.829702,-0.255723,3.430175,-3.548825,0.116520,-2.107535,-5.046370,-7.833426,9.015760,6.230490,5.450372,7.170104,3.131301,-1.990303,-2.266647,9.552699,-6.118866,8.907743,7.045999,-6.097891,-1.432581,3.109156,7.720837,9.681997,-6.928284,-7.857032,-5.130365,8.354569,3.795883,-8.270808,1.654958,0.045929,-1.946581,1.377596,-5.179476,-0.509236,-1.800019,-2.670492,7.409999,1.768808,-2.986940,0.371642,9.553744,-0.564612,4.338377,-8.843946,-7.391198,-1.202900,-2.154389,-9.241174,3.591418,8.580938,-4.700665,1.637722,7.944051,7.621005,-9.388860,-4.888258,0.481490,-9.771613,8.823713,8.868427,-8.102298,-3.770305,4.517226,-9.778076,-8.337478,3.669085,6.383193,-3.681262,6.242585,-5.493923,8.894081,4.041306,7.189984,3.869847,-1.761234,-3.063613,-5.481002,1.231598,3.367980,-3.075722,9.069496,0.624934,-3.409226,3.754094,7.616339,4.600705,-2.424593,-3.269975,-7.394700,-4.113916,-0.617379,-0.456672,-3.583758,2.885470,6.999517,7.977832,7.043021,3.202042,-0.889923,5.227168,-8.961905,-8.765899,3.541194,-6.336253,-7.515295,-9.318223,9.392560,1.371528,-9.933216,5.748561,-6.804675,-2.511121,9.977527,3.720626,-8.490465,-8.707356,5.736485,4.505924,5.999359,3.449259,-2.664816,-6.890993,-7.786695,9.834744,-5.801710,-4.080326,1.891996,-7.853362,-2.751516,4.198364,-2.590505,3.876339,-6.366854,-9.787292,-0.139948,-7.556296,5.126728,-4.969098,-8.695166,-4.829705,-0.579848,-9.194825,9.654126,3.258575,-6.289287,-0.313340,-3.967960,3.902600,-8.218178,-5.513251,7.577427,-3.986917,8.011564,-0.013691,-3.565646,1.272304,6.527490,6.637505,-3.396739,-8.237569,4.825916,-5.960524,-2.212265,-2.125656,9.362161,2.737287,3.963019,-7.990572,-5.591092,5.288207,5.619629,7.565886,-0.016627,-5.621847,3.309023,8.408769,3.542651,-8.656959,3.644528,0.311480,3.313093,3.096390,-5.025484,-8.163630,-0.552350,5.396874,-2.383034,-0.148368,7.848819,6.732616,0.852672,1.656413,-7.671194,-2.098047,1.580310,4.635937,-5.954818,4.120548,-2.937674,9.764250,9.140485,-7.181455,-8.757843,-8.397000,1.996680,-5.788029,6.861499,-8.040015,-2.624850,5.197495,-9.408715,-6.591823,-0.698012,9.765992,8.773136,5.808576,6.838832,-0.685957,6.454080,-8.380994,4.953261,5.448055,-2.967360,-4.141809,8.097165,-0.541904,-2.615732,-7.279104,7.037553,3.156472,1.733131,8.089849,3.505052,-6.796149,5.354509,0.865715,5.986453,8.729553,-9.489289,-4.799272,8.456333,8.837784,-9.377429,-8.328837,8.995108,-2.878022,5.527266,-5.718389,-5.750818,3.427232,5.614040,-5.076911,8.386811,-4.543266,6.426514,9.966534,-4.401601,5.952138,5.135661,-5.418003,4.518076,2.557557,-8.789172,9.156331,-6.365212], dtype = "float32")#candidate|3688|(756,)|const|float32
call_3686 = relay.TupleGetItem(func_2501_call(relay.reshape(var_3687.astype('float64'), [1200, 1]), relay.reshape(const_3688.astype('float32'), [756,]), ), 5)
call_3689 = relay.TupleGetItem(func_2505_call(relay.reshape(var_3687.astype('float64'), [1200, 1]), relay.reshape(const_3688.astype('float32'), [756,]), ), 5)
uop_3694 = relay.tan(var_3679.astype('float64')) # shape=(9, 10, 8)
func_1875_call = mod.get_global_var('func_1875')
func_1880_call = mutated_mod.get_global_var('func_1880')
call_3704 = relay.TupleGetItem(func_1875_call(relay.reshape(var_3687.astype('float64'), [15, 16, 5]), relay.reshape(var_3687.astype('float64'), [15, 16, 5]), relay.reshape(const_3688.astype('float32'), [756,]), ), 3)
call_3705 = relay.TupleGetItem(func_1880_call(relay.reshape(var_3687.astype('float64'), [15, 16, 5]), relay.reshape(var_3687.astype('float64'), [15, 16, 5]), relay.reshape(const_3688.astype('float32'), [756,]), ), 3)
var_3711 = relay.var("var_3711", dtype = "float64", shape = (9, 10, 8))#candidate|3711|(9, 10, 8)|var|float64
bop_3712 = relay.add(uop_3694.astype('uint8'), relay.reshape(var_3711.astype('uint8'), relay.shape_of(uop_3694))) # shape=(9, 10, 8)
uop_3727 = relay.log(var_3687.astype('float32')) # shape=(4, 300)
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
const_3735 = relay.const([-2.579430,9.157789,9.833880,2.960975,-7.905806,8.784152,-1.780772,-9.763438,4.209974,-0.656408,9.493611,-3.338602,-7.561066,-2.417763,3.481026,3.518026,-0.942669,1.005593,9.247007,4.458755,4.652742,-3.184023,1.497679,1.548127,9.610437,4.471881,5.163483,-6.919786,0.502118,6.509200,-4.530652,-8.510509,3.017549,-8.419486,-5.686398,-6.303484,-2.428676,-8.900900,-8.023401,-5.128382,1.595495,-6.015972,-5.196022,-8.014009,5.524195,-4.801883,-9.887634,-2.896744,-9.994564,4.656118,5.191981,7.624937,-1.335328,3.162727,0.329597,-8.621873,-2.864031,4.124731,-4.350942,-3.624878,-7.664339,9.618287,2.763691,-7.802679,-5.315413,-7.535335,-6.829742,4.869894,9.662267,2.127485,-6.971893,2.279482,-4.135388,6.843029,1.945755,7.827810,-3.156113,-6.796912,-5.221010,-4.780392,-7.005324,-4.675448,-4.774272,-6.144988,4.273687,-8.411643,9.604951,-0.374519,9.642142,-4.482445,3.894992,-0.536631,-9.211105,9.956778,3.207803,2.444742,-6.471384,-4.918533,3.606342,2.765236,-4.931544,5.095931,8.334209,-2.611220,6.111404,5.823579,-1.961398,0.992337,7.637088,9.446447,-5.526660,-4.854537,2.790395,6.802668,8.548943,2.185470,-1.598189,-9.329972,-4.199632,-1.496366,0.378239,-3.879333,0.512090,9.972335,-0.638551,-0.774295,6.240001,5.358061,3.561594,-6.125689,7.025097,4.207957,-8.186810,-2.102285,-8.140096,-5.969565,-5.310603,4.286405,-0.943104,-2.048091,1.257793,4.463352,-8.475364,7.565300,3.065807,-9.253814,8.701917,1.171918,6.883403,-1.111502,-1.600217,-4.086654,1.174412,6.396715,-1.595367,-5.264010,-5.208192,-5.436117,5.042148,-3.144634,9.114669,0.390796,-7.636470,-9.433468,-2.427084,1.493370,-1.085069,-7.032143,4.737131,0.783476,1.044095,-8.642683,-6.959144,-2.574556,-2.019595,-9.356612,-7.219921,2.417380,-1.564173,-6.140724,-7.131760,-5.264213,1.318934,9.920240,-6.643036,-5.677554,-9.676178,7.895497,-3.103538,-6.694558,-8.860911,-1.748723,9.623457,-9.582796,-9.008240,-0.881904,-6.029041,7.608570,5.303130,4.771721,0.488590,-9.340736,-6.582167,-4.301167,7.323875,7.192355,-4.817233,-3.565991,2.917951,3.092344,-7.485805,1.260026,-9.859564,-4.798293,4.950362,5.324471,-2.424627,-5.564826,1.890896,8.324997,-2.558053,2.188793,-7.020162,-7.963632,-0.879054,6.362866,6.454300,4.206215,6.432005,-8.512761,1.031613,-8.607858,4.104165,-2.774012,2.380874,4.951849,7.299411,-2.784876,4.938373,6.406895,2.640849,-6.053833,6.337101,-4.169830,1.221947,0.998165,3.684724,-7.699700,2.280985,5.383158,-1.316703,-8.313393,1.038523,-0.948252,1.754146,-7.921211,-1.104358,7.325298,1.122290,5.511371,-4.875327,5.158849,-7.635694,-4.792824,8.824662,-0.472960,3.432892,0.729391,-6.238448,0.521233,9.008925,-3.046413,-0.182199,-5.021879,4.099753,-9.964349,-9.277972,7.706206,-5.347707,-5.364723,-5.016788,1.856195,6.600047,-7.799082,-5.836829,8.332269,-3.338740,-8.277990,-4.059438,-2.949398,-5.553667,3.331044,-3.517508,7.145614,0.496522,-1.559890,-5.900205,7.658670,-9.156059,9.000982,2.239771,0.899971,-4.616614,-1.395692,-4.504676,5.965951,1.320391,3.433705,9.674936,-8.221363,5.808730,-3.585159,2.080047,4.855124,-0.194033,-3.069437,-9.108595,5.425154,8.995341,8.833170,-9.518446,-1.140743,1.615385,3.471189,-0.995585,5.844106,8.932542,-1.934893,0.378401,-1.173008,-5.769548,7.070898,-0.564325,-0.025086,-5.513459,4.802101,-7.395288,1.823670], dtype = "float32")#candidate|3735|(338,)|const|float32
call_3734 = func_1498_call(relay.reshape(const_3735.astype('float32'), [13, 13, 2]))
call_3736 = func_1498_call(relay.reshape(const_3735.astype('float32'), [13, 13, 2]))
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
call_3751 = func_1498_call(relay.reshape(const_3735.astype('float32'), [13, 13, 2]))
call_3752 = func_1498_call(relay.reshape(const_3735.astype('float32'), [13, 13, 2]))
output = relay.Tuple([bop_3681,call_3686,const_3688,call_3704,bop_3712,uop_3727,call_3734,const_3735,call_3751,])
output2 = relay.Tuple([bop_3681,call_3689,const_3688,call_3705,bop_3712,uop_3727,call_3736,const_3735,call_3752,])
func_3769 = relay.Function([var_3679,var_3680,var_3687,var_3711,], output)
mod['func_3769'] = func_3769
mod = relay.transform.InferType()(mod)
var_3770 = relay.var("var_3770", dtype = "uint8", shape = (9, 10, 8))#candidate|3770|(9, 10, 8)|var|uint8
var_3771 = relay.var("var_3771", dtype = "uint8", shape = (9, 10, 8))#candidate|3771|(9, 10, 8)|var|uint8
var_3772 = relay.var("var_3772", dtype = "float64", shape = (4, 300))#candidate|3772|(4, 300)|var|float64
var_3773 = relay.var("var_3773", dtype = "float64", shape = (9, 10, 8))#candidate|3773|(9, 10, 8)|var|float64
output = func_3769(var_3770,var_3771,var_3772,var_3773,)
func_3774 = relay.Function([var_3770,var_3771,var_3772,var_3773,], output)
mutated_mod['func_3774'] = func_3774
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4135 = relay.var("var_4135", dtype = "float64", shape = (10, 2, 3))#candidate|4135|(10, 2, 3)|var|float64
uop_4136 = relay.atanh(var_4135.astype('float64')) # shape=(10, 2, 3)
output = relay.Tuple([uop_4136,])
output2 = relay.Tuple([uop_4136,])
func_4143 = relay.Function([var_4135,], output)
mod['func_4143'] = func_4143
mod = relay.transform.InferType()(mod)
var_4144 = relay.var("var_4144", dtype = "float64", shape = (10, 2, 3))#candidate|4144|(10, 2, 3)|var|float64
output = func_4143(var_4144)
func_4145 = relay.Function([var_4144], output)
mutated_mod['func_4145'] = func_4145
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4465 = relay.var("var_4465", dtype = "uint32", shape = (10, 8, 16))#candidate|4465|(10, 8, 16)|var|uint32
var_4466 = relay.var("var_4466", dtype = "uint32", shape = (10, 8, 16))#candidate|4466|(10, 8, 16)|var|uint32
bop_4467 = relay.minimum(var_4465.astype('uint32'), relay.reshape(var_4466.astype('uint32'), relay.shape_of(var_4465))) # shape=(10, 8, 16)
uop_4477 = relay.tan(var_4466.astype('float64')) # shape=(10, 8, 16)
output = relay.Tuple([bop_4467,uop_4477,])
output2 = relay.Tuple([bop_4467,uop_4477,])
func_4480 = relay.Function([var_4465,var_4466,], output)
mod['func_4480'] = func_4480
mod = relay.transform.InferType()(mod)
var_4481 = relay.var("var_4481", dtype = "uint32", shape = (10, 8, 16))#candidate|4481|(10, 8, 16)|var|uint32
var_4482 = relay.var("var_4482", dtype = "uint32", shape = (10, 8, 16))#candidate|4482|(10, 8, 16)|var|uint32
output = func_4480(var_4481,var_4482,)
func_4483 = relay.Function([var_4481,var_4482,], output)
mutated_mod['func_4483'] = func_4483
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4798 = relay.var("var_4798", dtype = "float64", shape = (7, 5, 1))#candidate|4798|(7, 5, 1)|var|float64
uop_4799 = relay.exp(var_4798.astype('float64')) # shape=(7, 5, 1)
func_2803_call = mod.get_global_var('func_2803')
func_2806_call = mutated_mod.get_global_var('func_2806')
var_4806 = relay.var("var_4806", dtype = "float32", shape = (32,))#candidate|4806|(32,)|var|float32
call_4805 = relay.TupleGetItem(func_2803_call(relay.reshape(var_4806.astype('float32'), [4, 8, 1])), 0)
call_4807 = relay.TupleGetItem(func_2806_call(relay.reshape(var_4806.astype('float32'), [4, 8, 1])), 0)
func_3245_call = mod.get_global_var('func_3245')
func_3248_call = mutated_mod.get_global_var('func_3248')
var_4814 = relay.var("var_4814", dtype = "float64", shape = (5, 28))#candidate|4814|(5, 28)|var|float64
call_4813 = relay.TupleGetItem(func_3245_call(relay.reshape(var_4814.astype('float64'), [7, 2, 10]), relay.reshape(var_4814.astype('float64'), [7, 2, 10]), ), 0)
call_4815 = relay.TupleGetItem(func_3248_call(relay.reshape(var_4814.astype('float64'), [7, 2, 10]), relay.reshape(var_4814.astype('float64'), [7, 2, 10]), ), 0)
func_4143_call = mod.get_global_var('func_4143')
func_4145_call = mutated_mod.get_global_var('func_4145')
const_4819 = relay.const([3.065101,5.874539,7.849695,8.938714,3.683402,-9.210879,9.996913,-8.287001,6.405593,-7.771558,-7.172063,6.591921,7.837255,8.263207,-6.021491,-3.018879,-8.681316,9.543602,6.625347,-9.527800,-4.882083,5.025409,7.710400,6.399702,-6.772817,-3.371059,-2.269694,-5.009474,-0.978307,1.460315,-1.653205,-5.992986,1.086603,6.264491,-6.770832,7.682089,-4.546702,-9.438999,-4.395528,-2.138686,1.962438,4.207779,-9.111567,-3.235147,-9.601781,9.835205,2.598044,3.475409,9.557615,-4.571665,-5.322188,-1.000217,-5.989074,-6.531083,-1.490084,-2.700452,-6.032189,-7.710842,9.907022,6.721591], dtype = "float64")#candidate|4819|(60,)|const|float64
call_4818 = relay.TupleGetItem(func_4143_call(relay.reshape(const_4819.astype('float64'), [10, 2, 3])), 0)
call_4820 = relay.TupleGetItem(func_4145_call(relay.reshape(const_4819.astype('float64'), [10, 2, 3])), 0)
output = relay.Tuple([uop_4799,call_4805,var_4806,call_4813,var_4814,call_4818,const_4819,])
output2 = relay.Tuple([uop_4799,call_4807,var_4806,call_4815,var_4814,call_4820,const_4819,])
func_4835 = relay.Function([var_4798,var_4806,var_4814,], output)
mod['func_4835'] = func_4835
mod = relay.transform.InferType()(mod)
var_4836 = relay.var("var_4836", dtype = "float64", shape = (7, 5, 1))#candidate|4836|(7, 5, 1)|var|float64
var_4837 = relay.var("var_4837", dtype = "float32", shape = (32,))#candidate|4837|(32,)|var|float32
var_4838 = relay.var("var_4838", dtype = "float64", shape = (5, 28))#candidate|4838|(5, 28)|var|float64
output = func_4835(var_4836,var_4837,var_4838,)
func_4839 = relay.Function([var_4836,var_4837,var_4838,], output)
mutated_mod['func_4839'] = func_4839
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4872 = relay.var("var_4872", dtype = "uint16", shape = (16, 3, 4))#candidate|4872|(16, 3, 4)|var|uint16
var_4873 = relay.var("var_4873", dtype = "uint16", shape = (16, 3, 4))#candidate|4873|(16, 3, 4)|var|uint16
bop_4874 = relay.multiply(var_4872.astype('uint16'), relay.reshape(var_4873.astype('uint16'), relay.shape_of(var_4872))) # shape=(16, 3, 4)
uop_4878 = relay.log2(bop_4874.astype('float64')) # shape=(16, 3, 4)
func_4480_call = mod.get_global_var('func_4480')
func_4483_call = mutated_mod.get_global_var('func_4483')
var_4884 = relay.var("var_4884", dtype = "uint32", shape = (1280,))#candidate|4884|(1280,)|var|uint32
call_4883 = relay.TupleGetItem(func_4480_call(relay.reshape(var_4884.astype('uint32'), [10, 8, 16]), relay.reshape(var_4884.astype('uint32'), [10, 8, 16]), ), 0)
call_4885 = relay.TupleGetItem(func_4483_call(relay.reshape(var_4884.astype('uint32'), [10, 8, 16]), relay.reshape(var_4884.astype('uint32'), [10, 8, 16]), ), 0)
func_4835_call = mod.get_global_var('func_4835')
func_4839_call = mutated_mod.get_global_var('func_4839')
var_4896 = relay.var("var_4896", dtype = "float64", shape = (35,))#candidate|4896|(35,)|var|float64
const_4897 = relay.const([[-3.009999],[3.315515],[-5.053790],[-5.801869],[-4.627494],[0.140942],[-0.957983],[0.453614],[-7.865892],[-9.938802],[-3.932861],[1.423676],[-1.031767],[9.856831],[-3.720980],[-4.598647],[-3.923676],[-4.997128],[3.517686],[0.784238],[-9.271752],[5.091115],[-2.057140],[-3.099964],[-2.018316],[-8.821904],[4.486531],[2.331883],[-8.215988],[6.306048],[6.241684],[1.687690]], dtype = "float32")#candidate|4897|(32, 1)|const|float32
const_4898 = relay.const([[-6.410388,1.092252,-5.771573,-8.166996],[-1.971839,9.508457,-3.095539,-0.730306],[-7.677398,-3.007377,6.315285,-0.703659],[6.691269,8.332879,-7.551032,3.258582],[-6.059532,-9.234932,-4.594825,0.377652],[1.140818,3.848465,-4.114662,-4.331989],[-5.404143,-4.776801,-2.776180,7.300303],[-0.568747,2.194008,-2.769985,6.586754],[7.145416,4.347789,-8.023746,2.673266],[6.578328,1.868027,-2.772573,2.286453],[-9.697432,0.234751,-1.450377,-9.329615],[1.356532,3.014571,-8.183478,-9.399810],[-3.993150,3.040915,-7.258425,-1.620926],[1.154555,9.104925,7.292749,1.391173],[-1.310314,-4.066529,1.334478,6.642412],[9.082755,-4.407168,0.958913,2.736424],[2.364706,6.211656,8.124442,9.576626],[2.986697,4.694007,0.811965,2.730074],[6.500787,-8.514580,-4.936615,2.668098],[-7.361011,-5.900130,-1.029529,5.936848],[-5.447832,6.098620,8.716395,1.323581],[-0.670669,1.836980,2.542938,6.016465],[3.016142,1.592946,-7.042783,7.666503],[-6.789748,-7.933021,1.222513,-3.943013],[-2.630869,-5.450791,9.193689,5.510187],[-6.556726,2.707098,9.085840,-2.731039],[8.079861,-5.921945,-1.701397,-0.044727],[8.937746,4.243478,4.976980,4.995731],[8.910471,8.759239,8.849976,-4.355058],[8.379500,8.121505,6.286747,0.923067],[5.731534,-9.404264,3.883830,-5.798910],[2.203355,-9.392312,-9.955652,9.614563],[3.720298,-4.726194,2.545775,-2.852171],[-4.816796,9.478230,4.357180,-2.826911],[-1.338644,-7.083490,-2.558453,9.770383]], dtype = "float64")#candidate|4898|(35, 4)|const|float64
call_4895 = relay.TupleGetItem(func_4835_call(relay.reshape(var_4896.astype('float64'), [7, 5, 1]), relay.reshape(const_4897.astype('float32'), [32,]), relay.reshape(const_4898.astype('float64'), [5, 28]), ), 4)
call_4899 = relay.TupleGetItem(func_4839_call(relay.reshape(var_4896.astype('float64'), [7, 5, 1]), relay.reshape(const_4897.astype('float32'), [32,]), relay.reshape(const_4898.astype('float64'), [5, 28]), ), 4)
output = relay.Tuple([uop_4878,call_4883,var_4884,call_4895,var_4896,const_4897,const_4898,])
output2 = relay.Tuple([uop_4878,call_4885,var_4884,call_4899,var_4896,const_4897,const_4898,])
func_4914 = relay.Function([var_4872,var_4873,var_4884,var_4896,], output)
mod['func_4914'] = func_4914
mod = relay.transform.InferType()(mod)
mutated_mod['func_4914'] = func_4914
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4914_call = mutated_mod.get_global_var('func_4914')
var_4916 = relay.var("var_4916", dtype = "uint16", shape = (16, 3, 4))#candidate|4916|(16, 3, 4)|var|uint16
var_4917 = relay.var("var_4917", dtype = "uint16", shape = (16, 3, 4))#candidate|4917|(16, 3, 4)|var|uint16
var_4918 = relay.var("var_4918", dtype = "uint32", shape = (1280,))#candidate|4918|(1280,)|var|uint32
var_4919 = relay.var("var_4919", dtype = "float64", shape = (35,))#candidate|4919|(35,)|var|float64
call_4915 = func_4914_call(var_4916,var_4917,var_4918,var_4919,)
output = call_4915
func_4920 = relay.Function([var_4916,var_4917,var_4918,var_4919,], output)
mutated_mod['func_4920'] = func_4920
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5355 = relay.var("var_5355", dtype = "float64", shape = (5, 1, 12))#candidate|5355|(5, 1, 12)|var|float64
uop_5356 = relay.atanh(var_5355.astype('float64')) # shape=(5, 1, 12)
bop_5358 = relay.maximum(uop_5356.astype('uint64'), relay.reshape(var_5355.astype('uint64'), relay.shape_of(uop_5356))) # shape=(5, 1, 12)
bop_5370 = relay.bitwise_and(var_5355.astype('uint32'), relay.reshape(uop_5356.astype('uint32'), relay.shape_of(var_5355))) # shape=(5, 1, 12)
output = relay.Tuple([bop_5358,bop_5370,])
output2 = relay.Tuple([bop_5358,bop_5370,])
func_5376 = relay.Function([var_5355,], output)
mod['func_5376'] = func_5376
mod = relay.transform.InferType()(mod)
var_5377 = relay.var("var_5377", dtype = "float64", shape = (5, 1, 12))#candidate|5377|(5, 1, 12)|var|float64
output = func_5376(var_5377)
func_5378 = relay.Function([var_5377], output)
mutated_mod['func_5378'] = func_5378
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5570 = relay.var("var_5570", dtype = "uint32", shape = (16, 16, 2))#candidate|5570|(16, 16, 2)|var|uint32
var_5571 = relay.var("var_5571", dtype = "uint32", shape = (16, 16, 2))#candidate|5571|(16, 16, 2)|var|uint32
bop_5572 = relay.bitwise_or(var_5570.astype('uint32'), relay.reshape(var_5571.astype('uint32'), relay.shape_of(var_5570))) # shape=(16, 16, 2)
output = bop_5572
output2 = bop_5572
func_5578 = relay.Function([var_5570,var_5571,], output)
mod['func_5578'] = func_5578
mod = relay.transform.InferType()(mod)
mutated_mod['func_5578'] = func_5578
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5578_call = mutated_mod.get_global_var('func_5578')
var_5580 = relay.var("var_5580", dtype = "uint32", shape = (16, 16, 2))#candidate|5580|(16, 16, 2)|var|uint32
var_5581 = relay.var("var_5581", dtype = "uint32", shape = (16, 16, 2))#candidate|5581|(16, 16, 2)|var|uint32
call_5579 = func_5578_call(var_5580,var_5581,)
output = call_5579
func_5582 = relay.Function([var_5580,var_5581,], output)
mutated_mod['func_5582'] = func_5582
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5948 = relay.var("var_5948", dtype = "float32", shape = (4, 11, 15))#candidate|5948|(4, 11, 15)|var|float32
uop_5949 = relay.log10(var_5948.astype('float32')) # shape=(4, 11, 15)
output = uop_5949
output2 = uop_5949
func_5951 = relay.Function([var_5948,], output)
mod['func_5951'] = func_5951
mod = relay.transform.InferType()(mod)
var_5952 = relay.var("var_5952", dtype = "float32", shape = (4, 11, 15))#candidate|5952|(4, 11, 15)|var|float32
output = func_5951(var_5952)
func_5953 = relay.Function([var_5952], output)
mutated_mod['func_5953'] = func_5953
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6107 = relay.var("var_6107", dtype = "float64", shape = ())#candidate|6107|()|var|float64
var_6108 = relay.var("var_6108", dtype = "float64", shape = (13, 1, 2))#candidate|6108|(13, 1, 2)|var|float64
bop_6109 = relay.not_equal(var_6107.astype('bool'), var_6108.astype('bool')) # shape=(13, 1, 2)
func_371_call = mod.get_global_var('func_371')
func_376_call = mutated_mod.get_global_var('func_376')
var_6115 = relay.var("var_6115", dtype = "bool", shape = (1584,))#candidate|6115|(1584,)|var|bool
var_6116 = relay.var("var_6116", dtype = "float32", shape = (900,))#candidate|6116|(900,)|var|float32
call_6114 = relay.TupleGetItem(func_371_call(relay.reshape(var_6115.astype('bool'), [16, 11, 9]), relay.reshape(var_6115.astype('bool'), [16, 11, 9]), relay.reshape(var_6116.astype('float32'), [900,]), ), 3)
call_6117 = relay.TupleGetItem(func_376_call(relay.reshape(var_6115.astype('bool'), [16, 11, 9]), relay.reshape(var_6115.astype('bool'), [16, 11, 9]), relay.reshape(var_6116.astype('float32'), [900,]), ), 3)
output = relay.Tuple([bop_6109,call_6114,var_6115,var_6116,])
output2 = relay.Tuple([bop_6109,call_6117,var_6115,var_6116,])
func_6123 = relay.Function([var_6107,var_6108,var_6115,var_6116,], output)
mod['func_6123'] = func_6123
mod = relay.transform.InferType()(mod)
var_6124 = relay.var("var_6124", dtype = "float64", shape = ())#candidate|6124|()|var|float64
var_6125 = relay.var("var_6125", dtype = "float64", shape = (13, 1, 2))#candidate|6125|(13, 1, 2)|var|float64
var_6126 = relay.var("var_6126", dtype = "bool", shape = (1584,))#candidate|6126|(1584,)|var|bool
var_6127 = relay.var("var_6127", dtype = "float32", shape = (900,))#candidate|6127|(900,)|var|float32
output = func_6123(var_6124,var_6125,var_6126,var_6127,)
func_6128 = relay.Function([var_6124,var_6125,var_6126,var_6127,], output)
mutated_mod['func_6128'] = func_6128
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6238 = relay.var("var_6238", dtype = "float64", shape = ())#candidate|6238|()|var|float64
const_6239 = relay.const([[[-6.700367,7.131004,5.573106,8.661094,-4.941305,-2.351273,4.472268,-1.836187,6.020982],[-1.558172,-0.359219,7.119234,-3.465501,5.057089,5.145203,-8.938871,6.392899,-7.099031],[-2.955858,7.444529,-4.278911,0.687503,-8.066383,-0.345365,7.338833,9.238558,0.452032],[-4.211699,-5.127033,-0.205040,2.508139,6.529043,-1.166035,6.672834,4.453957,5.457428],[-2.435960,3.189858,-3.263855,-4.749822,9.427513,-7.541814,5.575063,-9.209868,-5.931130],[5.310998,5.966738,-0.469371,2.870091,-5.318637,-2.731723,-7.496985,-6.770715,-5.953523],[2.326754,4.756098,-4.895592,6.468881,-5.993919,1.161167,-2.061929,-5.724680,6.514238],[3.024539,-3.516697,-3.148305,-9.803772,0.412588,-1.468832,8.717970,9.988842,-0.360848],[-4.824574,0.321732,2.510126,7.124267,1.700857,2.043103,7.301209,2.064787,-2.723244],[-4.232999,-8.005546,-3.024380,3.353561,-8.198748,-0.558038,-7.971458,5.462692,6.423376],[-7.465372,-6.296134,7.653291,0.717562,4.203325,-8.693206,-6.558443,-6.238743,0.118258],[0.793470,-8.979047,9.456553,4.579474,-8.407281,1.448398,4.677942,-0.811258,7.570612],[-0.507678,-5.667078,-9.019311,6.409458,-8.432428,4.417772,-8.030191,-0.750535,0.350258],[9.232942,-3.988577,6.237881,-2.447263,2.342266,-5.282477,-5.183060,5.298100,-8.644269],[6.648020,-1.361423,2.262583,7.747041,0.955578,7.865867,2.678222,4.983770,-8.697985],[4.060269,0.107018,3.574044,-2.769597,-3.401045,1.341421,7.137802,4.326862,-3.610857]],[[1.169107,-6.626628,2.091138,7.097086,8.173011,-5.642819,0.096167,-6.204285,4.497396],[7.781737,2.286347,5.817518,-3.671639,7.146525,3.591335,0.148617,-8.377541,7.804625],[4.725758,-2.315589,1.594348,-4.640088,0.583365,3.992729,-0.213910,-7.335867,4.233112],[-1.437382,-5.558338,2.404952,6.963487,-9.337589,-0.766876,-7.612531,5.963707,-6.127807],[0.170151,1.744693,4.238263,0.865390,5.472455,4.672010,-2.593714,1.640567,-0.810657],[-9.981981,3.588492,5.230369,-1.212702,8.447380,-6.451038,-2.104003,-2.540424,-4.486069],[-9.559177,5.596921,2.282362,-0.833921,8.086728,-8.492884,-5.203594,4.054924,-6.043073],[-5.538464,-0.606630,-6.214501,3.238520,6.794828,-0.410594,-9.456075,3.715309,6.615329],[-5.573217,-1.307321,0.395463,5.200561,9.037377,0.476237,7.105528,-2.416564,8.168690],[3.419097,8.225711,-9.236027,-0.848066,2.687326,-7.092336,4.954847,-1.205261,-4.685936],[-8.893897,-7.606008,4.576058,9.608423,0.456047,-7.070703,-4.993600,4.607798,-1.929752],[-4.792815,-6.067920,9.992848,-8.600841,-4.347309,-0.258754,-3.594680,-5.549440,4.751550],[-0.795072,8.448146,-1.087144,-0.193716,7.444008,6.336639,9.462138,-1.982402,0.288117],[-8.808191,-5.978821,-9.796814,-3.903244,-4.407804,3.965954,-4.851335,-3.941156,9.441868],[8.103398,-7.761251,-8.142816,1.606597,0.625805,8.287101,3.221492,-3.008090,-3.283799],[-8.196509,1.524379,-1.877046,-6.667066,-5.592119,-5.256554,-0.576331,8.583303,-9.315347]],[[-1.342303,7.908581,6.765804,-6.484410,-5.002845,5.072012,7.506971,5.671351,-4.346433],[-5.384181,-9.133954,5.979924,-3.152693,0.272983,-8.990412,2.728190,9.361397,-0.619605],[-2.608301,5.423422,2.126628,4.191850,-1.107121,2.336585,-0.123714,-8.406832,-7.130127],[3.382572,8.763990,-8.506900,-8.200641,-9.555692,-4.463636,7.130901,7.708404,-8.843492],[8.841293,2.379950,-6.370403,-6.478914,-5.212032,-0.265776,-3.608052,-2.755423,-7.289843],[-1.986618,-2.941851,-9.049051,3.740049,6.782207,-0.013003,-9.618635,-9.929937,9.501801],[-3.038750,5.811669,-1.928939,-5.277849,-8.445158,-4.784614,4.716766,7.935700,5.626547],[9.640410,4.080892,5.583790,-2.720131,5.285827,-3.580508,3.100852,-0.178449,9.884396],[-8.467455,-3.920115,-4.470913,5.526101,4.688791,-6.040014,-6.880156,6.939132,-2.162074],[3.150779,-1.109638,5.537733,-5.485090,-5.013004,-1.003635,3.450708,8.866167,2.368059],[8.908346,1.158771,9.619258,9.483170,5.336634,-4.371348,-8.468362,-1.581368,-4.159470],[7.382716,1.528007,-0.706368,9.991613,-4.222708,8.835862,0.891987,9.146151,0.702396],[-6.402732,-3.495961,0.541263,0.219294,6.614629,6.407443,-4.356496,-7.659194,-8.284001],[5.570680,-2.853726,-5.851193,8.650857,-0.740696,-0.242200,0.021952,3.999455,2.734592],[-0.382983,-3.211174,-5.873777,-2.549263,-9.063215,-6.741324,6.692427,-7.355487,-2.730505],[7.457116,-8.373739,-7.023453,4.212647,2.120830,7.079726,8.116058,-7.120140,1.434730]],[[8.225250,1.864093,-1.269220,-5.410466,4.364537,-3.383354,7.492742,1.830584,8.901218],[7.449395,1.317479,6.654257,3.319679,5.575324,-7.105373,-7.779979,-2.462961,8.644467],[-8.606069,-6.201447,1.116552,6.088651,-8.498117,-8.612058,-7.647058,-7.349039,1.512526],[-6.473328,-2.614500,-9.968957,6.220353,6.653665,-0.902872,-8.439867,-8.171645,-1.649449],[5.441282,4.967567,-4.619829,-0.749625,9.481179,-4.036808,-7.780793,0.704671,-2.480588],[-9.889906,-0.865683,0.233492,-6.649058,1.280455,-4.475417,-1.337292,5.432946,3.017577],[-6.621118,-2.003591,-7.116706,-5.062368,-5.929774,-5.400079,6.354642,-6.502614,-4.484856],[-7.535426,1.784942,2.331422,0.623136,-0.539536,2.174755,-1.930729,5.740244,8.947205],[3.485444,-3.271114,7.673742,7.750590,2.424306,4.193708,9.454927,6.665748,4.459319],[3.986214,-5.266026,-6.276662,1.411733,3.788779,8.584226,8.550898,-7.987598,-5.617446],[-3.877344,-7.298100,2.760910,2.093230,2.574809,-6.121699,5.900191,4.441636,1.691988],[-9.352972,-4.907643,6.489265,-4.620535,4.031788,-1.368790,2.633513,3.001186,7.828119],[6.988472,0.374584,9.623728,3.952974,4.593277,-6.357779,-3.227621,-7.872293,0.993931],[1.944088,-0.806630,-4.045395,-2.774167,9.881143,-7.022272,2.497445,9.732426,-6.667677],[-4.874145,6.226085,9.573716,-4.777323,-8.418099,-3.543430,-1.671047,-8.366018,-2.583081],[0.964247,-7.349844,-7.745467,0.895624,-2.987111,4.694376,5.794249,-4.335042,9.016005]],[[6.195101,-8.180507,-0.126069,2.470066,-5.009532,4.932265,-5.676973,1.721202,0.681465],[3.713944,1.400915,4.252439,0.783398,-9.526006,-8.296924,3.368257,8.269349,1.277713],[-3.625785,-9.455957,-1.514625,-2.022507,3.341540,6.259103,4.318811,0.999033,-0.596488],[4.954640,-8.617932,-1.800798,-0.386781,-2.306596,1.714901,9.799972,-1.640713,-8.842501],[-6.647133,8.537864,-3.473544,-4.106274,-5.137311,7.381375,1.298758,-1.909552,-5.034585],[-5.148789,-9.640851,5.011076,-7.037739,2.373154,-8.388605,-4.370083,-3.781199,-5.531118],[-1.361363,2.946738,9.933589,-3.766523,5.833454,-6.736283,6.137380,-0.755707,1.261443],[0.610043,4.159173,-4.233770,-6.166727,-5.425605,-1.578523,0.127358,6.783388,2.584685],[9.075501,9.816266,-3.383644,4.025935,-7.187751,4.402598,3.180059,-2.155856,-3.244885],[-9.299377,9.940880,4.819648,-5.369947,-3.233395,2.719262,-3.987389,3.358647,-5.308040],[2.800440,2.034569,2.136892,7.519323,5.935110,3.175959,-8.637512,-6.439219,-7.730951],[5.154967,9.347351,3.486665,-5.190214,7.331980,4.448314,6.799041,5.145561,3.862074],[-6.946038,9.249623,-0.042723,7.340257,2.724092,-8.437750,6.126210,-3.391662,5.523300],[-9.323050,9.510370,-6.098748,8.040657,7.014511,-8.166135,3.892652,9.626703,8.417839],[-2.179272,-7.948995,-0.381610,5.651684,-1.036589,-5.318794,3.176687,2.403805,8.300634],[-2.822679,-8.999715,5.478480,-3.130988,8.885138,-7.630136,6.325732,2.818051,-4.157577]],[[-2.469566,7.847358,4.501187,-3.593150,-5.182792,4.051558,6.741347,-1.024715,5.735726],[9.028715,5.471255,5.222933,5.671608,-4.972432,-5.180596,-7.256781,-9.591081,7.804126],[-2.806503,8.759386,-5.214895,-7.063177,-7.824163,8.185481,-6.669154,1.783337,2.446348],[3.906469,8.519725,0.949785,-1.687219,-3.339107,8.491249,-7.222015,9.650451,7.577521],[-3.517495,-7.111271,-1.748822,-8.612586,-2.411610,-5.520565,-8.264486,-3.539446,7.330227],[3.471021,5.785567,3.217555,-2.410154,-7.248781,3.396612,1.711697,2.476241,-1.160091],[7.895041,9.591206,-9.229439,0.939400,0.593475,-7.270048,9.560396,6.320949,3.397327],[4.048291,-4.906623,2.829942,4.887546,-3.181148,-7.928392,5.543854,1.353689,0.587581],[-4.387808,5.746951,-5.001651,8.693417,6.553007,5.829770,0.004737,-3.356161,-7.553517],[9.494116,-7.759324,3.934712,-1.754367,-4.875861,7.543204,3.163495,-2.591082,3.859337],[-3.381562,-5.238990,7.691499,-8.394355,8.314852,8.657212,-2.599735,9.253166,-9.601824],[-3.517742,3.605030,-3.866130,-3.964759,1.105160,-0.151689,-7.924083,7.199177,2.136810],[-3.760343,5.591860,-6.115129,3.954089,3.889711,-7.388220,3.406951,-5.175401,7.062415],[4.988568,-5.905320,3.717238,-7.447288,5.833487,-5.280596,-3.074679,-2.109367,-8.057618],[-1.239295,9.814844,9.125948,0.405454,-5.361252,1.155172,3.561698,-7.509861,3.818956],[-1.958177,8.311575,2.234939,-0.383244,-4.612573,2.376668,-7.449647,-9.033438,5.861039]],[[1.179983,2.139474,-7.033454,9.873557,5.922712,4.115215,8.003884,-7.269469,1.044893],[8.508429,-6.158694,-2.308394,-0.743783,5.300076,2.981692,-5.499615,-2.156142,-4.053542],[4.381534,-2.870699,1.212584,2.785429,3.217832,2.281000,-6.790579,9.423271,-8.440432],[-0.532961,-1.796500,-4.762861,5.971098,-3.783421,-1.295234,-6.448524,-6.104338,-7.992830],[5.230486,0.577284,-6.673355,9.122766,1.468901,9.592709,2.732532,-6.982814,4.592166],[2.471493,-0.601206,-6.368844,-4.405805,-6.729271,8.782171,4.410272,-2.457869,-6.102978],[0.840111,9.119756,-2.819891,3.957830,7.049853,0.462156,-4.036235,3.387976,-5.145465],[6.716189,-0.224025,8.838201,-7.095201,-5.908719,8.457099,9.425164,0.735844,6.530701],[8.780091,5.033269,7.910006,-1.276792,1.836726,-5.011627,2.038042,-5.032577,0.742519],[-6.179372,-3.656596,-3.462666,9.831972,3.351317,2.900340,-7.447050,7.433580,8.208399],[-4.491898,-2.696339,0.043690,0.760891,-9.338369,-7.252053,7.698083,4.723495,-1.224312],[-0.839550,-9.781944,-2.781773,-9.475673,-4.781597,-2.016442,-8.747377,3.669767,-7.380527],[6.374498,-4.820924,9.655320,4.113467,5.889505,8.477205,0.328030,6.223469,1.174421],[2.134431,-6.653115,0.259936,2.235439,8.441697,-2.270238,9.791231,3.676129,9.270173],[-0.618296,8.256151,2.052193,3.244450,-3.829562,-7.851135,-9.095555,-9.468782,-5.937731],[3.089328,9.642760,-2.018587,-1.441250,-1.248394,6.963839,4.791563,-7.816748,3.854077]],[[2.861290,-5.359800,7.515825,8.923045,-6.777038,-0.012446,3.350011,-3.841069,-9.351132],[-1.374310,-5.236473,-9.954145,-0.901374,-5.172280,5.143689,-7.930330,-3.516863,-0.250170],[-6.824458,-1.178512,1.231858,6.943328,-4.637870,-2.922936,-1.256714,-3.506196,1.561129],[1.199261,-6.667008,-7.086147,1.518062,-1.000698,-2.111837,-5.999455,-2.546805,6.205630],[2.598619,-1.725458,0.646557,9.272731,6.236660,-1.185214,-8.168702,-3.182133,6.378800],[-2.452230,2.194891,8.765601,-1.258835,-0.081089,-4.804274,-2.350318,-8.694872,4.918483],[4.973985,-8.368779,-0.249567,2.591142,-9.116089,6.215902,6.966325,-7.842913,-9.238472],[-3.390822,9.862088,8.092416,-9.116676,-4.102644,-3.809409,-6.564455,-2.713369,-8.253588],[-8.524523,9.588221,8.187788,-2.214598,5.654942,-5.264006,-6.601273,-0.446874,1.502892],[2.593884,3.118248,6.408850,-3.459957,-5.179270,-9.177222,9.773530,-9.375799,4.486810],[-6.053649,-4.450996,-9.786887,3.409830,1.930239,8.471247,-7.362272,6.872537,-6.937436],[0.195895,-7.939709,3.334539,1.342586,5.367051,5.666488,7.302502,8.148988,3.524772],[-6.301900,-3.919843,-7.195562,0.925509,9.429637,6.868824,2.352243,-7.418749,-4.755165],[-3.331496,-8.288825,6.986312,-4.333867,7.894876,1.328109,0.501484,-3.116171,3.024992],[7.212902,0.537111,3.351063,-5.263418,1.262817,5.428032,-9.549344,1.783460,5.972249],[9.438550,-5.418699,8.921523,8.230794,2.223389,4.850082,3.134676,8.773676,9.137576]],[[8.404071,2.494654,-5.810023,-1.305761,-5.899731,6.457804,-8.988565,2.727939,-1.504138],[-1.255507,-2.387489,0.126703,8.399194,-6.872092,5.028330,4.950863,-2.669225,9.092226],[4.166725,1.378112,-2.869585,-0.118908,9.375332,2.494761,-1.900578,-4.074333,5.394282],[-2.928800,-0.109401,-2.114680,-4.880411,-2.899350,-2.609085,7.317175,4.414441,-0.039060],[-8.362216,-2.760643,-5.939999,0.662855,-6.768411,6.300750,7.188972,-2.032829,3.749972],[3.787456,-7.280879,-1.456571,5.958642,4.994931,-7.333919,-8.441349,-3.180801,3.443946],[-8.365868,0.359073,-0.735998,3.595404,5.697937,1.418305,-6.103234,-5.080580,-6.324030],[4.630353,1.205909,-4.054432,-4.843560,-5.359611,2.348346,-8.634639,-7.928273,-5.651862],[-7.156469,-3.551250,7.821856,-5.724517,-0.576539,4.472945,0.629439,-5.751754,1.335504],[6.900532,-4.717319,-8.995871,3.932413,5.826699,-7.930703,-4.149656,8.119459,-8.681290],[-8.259683,-0.922349,-7.967026,5.271990,3.397313,-7.605047,-5.659076,-0.038731,1.081820],[-9.903408,7.092565,-9.094955,-8.735633,9.881822,1.529222,-6.888337,-5.632418,-1.782583],[-5.062204,5.540764,5.495142,-3.136978,7.973319,-7.458450,8.266648,5.131214,8.225559],[4.872852,-6.223358,3.611417,-4.110959,1.699928,3.288486,8.897665,8.234969,1.069061],[-3.054738,-8.814020,-9.348407,-9.152239,5.913293,9.854514,2.554366,-6.206750,8.601673],[8.173164,-7.217692,-4.333933,-5.631167,1.245213,-8.525473,5.015943,6.052961,-8.246016]],[[-5.692472,7.383967,-4.207539,-0.967379,4.474443,9.984231,6.487163,5.285989,1.355075],[7.136247,3.402376,4.336666,2.462839,6.045221,-2.491428,-6.194617,-4.643654,4.073840],[-9.952740,7.535864,-7.401784,-3.782590,9.964807,7.166956,-4.120821,3.854089,-4.809305],[5.169321,2.908863,-9.656838,8.658611,-9.467418,-2.399113,-7.159561,-7.249439,3.973214],[6.723951,-7.060853,2.183090,3.552127,-4.623800,8.210514,-0.875727,-8.918026,4.036240],[4.787758,6.879605,6.214741,4.189786,0.482144,1.947596,5.302553,-2.645123,4.067780],[0.382000,3.065206,0.785319,-5.278316,-4.804716,4.532108,6.602899,-2.543850,5.871610],[5.065976,5.627587,-1.102498,8.130312,1.866267,8.810100,9.232666,-7.935624,-1.313852],[8.019437,8.742591,7.411374,-8.519321,6.492306,3.837887,-1.635806,-6.949996,2.392795],[-5.281400,-4.725777,9.296475,-9.860701,-4.032342,4.392254,0.389020,-6.925163,-0.995664],[6.176415,-4.228198,2.625317,8.409653,-3.126570,-9.708426,-5.367243,-8.070922,-6.207964],[-4.170865,-9.448379,5.755978,8.206133,3.065153,1.834562,9.403752,-2.851431,-8.009261],[-4.013986,3.442391,8.815134,-3.508225,-2.648240,-3.791485,-8.893019,4.499189,1.936147],[7.488329,3.194888,-2.279535,-2.555244,-1.919855,-3.373805,3.076833,-8.959305,7.013620],[-3.861265,-8.790827,5.769536,1.455739,8.947078,-4.048729,-9.059548,-5.809299,-0.500819],[-6.807773,-7.471440,1.088096,9.079586,3.837535,7.929945,7.361633,3.533322,-1.878260]],[[-5.664600,-8.598116,4.746272,7.346734,-8.404902,3.026576,-2.409388,-4.044887,-7.102868],[1.390788,-3.982700,-8.328165,-4.268215,2.311890,2.913350,-3.231388,7.901423,5.674945],[2.615457,-1.801303,-9.449347,6.058552,-3.496910,-5.817698,2.940542,-4.770446,-5.424919],[-0.537762,1.085363,-8.202128,7.134821,-9.499178,-3.398508,5.623843,-9.366015,5.600615],[-0.696622,-1.212187,-4.468506,5.679749,-1.338217,5.195494,-8.400621,5.434605,0.896532],[-8.966750,-5.614914,-9.503303,2.692059,3.311170,3.571804,-1.041171,4.297025,-8.564856],[7.665563,3.819884,-0.545637,4.995452,-4.616353,-9.692888,-2.603951,7.425868,2.548094],[9.090374,3.939873,9.898420,-7.440034,-2.768757,-8.219611,8.832940,5.432812,1.211519],[-7.463831,-8.622526,-9.905521,-6.922689,-9.073469,5.548315,6.308459,-1.683441,7.183939],[-5.120309,1.887442,6.359496,3.842831,-4.614703,-2.893323,-6.121586,-3.547531,9.320818],[1.332514,7.590792,1.066681,-9.850731,-7.904020,-5.991207,-7.590030,2.624564,5.096469],[5.672151,2.629342,8.178014,2.910555,-9.619274,5.720275,-4.705516,-7.553453,-6.440008],[3.599129,-2.092313,4.881534,6.290991,3.001378,1.266771,-0.360541,-5.476961,-2.132136],[1.239481,6.386426,0.874101,8.686022,-3.369419,-8.524515,-4.383446,6.644851,6.287922],[5.043533,-3.008592,3.287707,7.201034,-7.960402,4.506707,-0.450587,-2.729248,3.018077],[-6.304034,-9.149979,-2.869135,0.525741,-8.700397,2.723127,4.627878,-9.585315,-4.739347]],[[7.493400,3.558931,1.611260,6.755787,2.508011,0.951195,8.392384,-9.032076,-2.851500],[-5.554455,3.943481,-2.824358,-7.414488,3.187471,3.083586,-8.700853,5.251056,-0.144635],[7.302705,-4.933235,-7.989045,7.793535,5.397750,6.420695,-4.215230,6.082811,-4.730217],[-0.823407,5.727157,4.657311,5.147822,-1.882154,-6.275371,0.653366,-9.460322,-9.726595],[-4.427270,-2.203892,5.037285,7.554150,-2.293094,3.158276,1.329493,7.876345,1.141115],[2.150981,4.153286,-8.981605,5.855803,5.592793,4.683870,-3.220709,6.164757,-1.661902],[-9.019010,-4.371438,-4.407237,8.196184,6.139197,6.807563,4.935714,-6.756571,-1.706148],[-7.190042,-9.829705,5.348222,-1.685942,1.007696,-5.172399,-6.332852,-2.099043,1.755958],[4.759016,-7.558047,-3.293305,6.995662,-5.327003,-5.074014,-8.456822,-5.032134,-5.828589],[6.860279,3.995114,-9.687672,-0.450023,-5.359475,0.019232,4.932821,-7.559045,3.677419],[0.276334,0.284850,-3.427711,-1.613186,-6.496821,-6.911811,-3.294870,5.744815,-1.537507],[-3.401824,4.293652,1.307965,-9.611013,5.748559,-1.913903,7.217173,4.004071,-9.929224],[-9.021401,8.076737,6.991528,2.968000,0.408778,-5.760312,-6.971892,-4.988213,5.684230],[-8.374274,-7.857092,4.092669,1.567819,0.802010,4.424570,-6.809060,-3.440984,-9.164047],[9.146586,-4.238696,1.066728,9.563942,3.499317,7.744234,5.738263,-5.618579,0.972780],[2.639496,8.720180,2.897434,-6.441107,-3.122057,6.319807,-6.759544,9.154349,7.303742]]], dtype = "float64")#candidate|6239|(12, 16, 9)|const|float64
bop_6240 = relay.power(var_6238.astype('float64'), const_6239.astype('float64')) # shape=(12, 16, 9)
output = relay.Tuple([bop_6240,])
output2 = relay.Tuple([bop_6240,])
func_6243 = relay.Function([var_6238,], output)
mod['func_6243'] = func_6243
mod = relay.transform.InferType()(mod)
var_6244 = relay.var("var_6244", dtype = "float64", shape = ())#candidate|6244|()|var|float64
output = func_6243(var_6244)
func_6245 = relay.Function([var_6244], output)
mutated_mod['func_6245'] = func_6245
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7261 = relay.var("var_7261", dtype = "int32", shape = (9, 3, 13))#candidate|7261|(9, 3, 13)|var|int32
var_7262 = relay.var("var_7262", dtype = "int32", shape = (9, 3, 13))#candidate|7262|(9, 3, 13)|var|int32
bop_7263 = relay.not_equal(var_7261.astype('bool'), relay.reshape(var_7262.astype('bool'), relay.shape_of(var_7261))) # shape=(9, 3, 13)
func_6123_call = mod.get_global_var('func_6123')
func_6128_call = mutated_mod.get_global_var('func_6128')
const_7267 = relay.const(7.043428, dtype = "float64")#candidate|7267|()|const|float64
const_7268 = relay.const([[-8.263272,-2.298294,9.344303,-2.576769,3.584164,-7.197615,1.524706,-6.759414,5.572903,-1.291097,0.821000,-3.868579,4.236493,8.999083,-7.501604,-8.975245,9.553647,-0.090452,9.484666,7.896655,4.240957,-1.169281,-9.011470,-1.741268,-2.613002,2.635536]], dtype = "float64")#candidate|7268|(1, 26)|const|float64
var_7269 = relay.var("var_7269", dtype = "bool", shape = (1584,))#candidate|7269|(1584,)|var|bool
const_7270 = relay.const([0.199250,-0.647255,-9.820750,9.938762,9.942441,-7.738039,-1.371220,-6.228957,-0.899617,8.191084,2.477809,-8.620208,-2.508422,3.414726,-6.709641,8.958478,9.044263,-9.721307,-3.833761,8.344045,1.585254,-6.554598,-9.608755,-7.887703,0.325282,-3.184921,-5.339761,-2.159957,-3.083027,-4.242482,-5.476673,-6.908622,-2.561576,-4.684665,1.188319,-6.442707,8.664205,-0.110238,0.329040,-6.967237,-3.041950,9.659284,0.255041,2.536830,-7.385814,4.756417,4.763052,-4.154706,-5.200466,-4.517318,-6.324523,-8.425477,6.899196,9.565332,-9.848935,4.648015,-0.310398,7.620331,-6.537282,5.754071,5.027952,-4.746478,8.997584,-3.838218,2.698110,4.897754,0.206587,3.841406,-2.272809,-9.125491,6.806690,-5.942243,-1.659756,8.593403,-4.948906,4.541701,7.500682,7.548925,-3.386630,1.946228,-4.103347,1.957316,-1.648824,5.690507,-0.599993,1.430120,1.722372,6.824386,-3.763415,9.474168,-1.529406,-7.992823,-4.037576,-1.826072,4.128038,-7.515616,-7.034261,6.845506,-6.350785,2.580906,-1.062693,-5.646706,-0.752825,-8.884225,1.383811,-0.817339,-6.063112,3.415613,-7.091090,-6.396226,5.298284,3.253259,-6.151462,3.631627,5.331575,3.274242,3.265524,-7.205393,-1.858485,-2.146190,-1.165693,3.296219,0.399948,0.580721,-5.620985,0.175673,-9.226181,4.369753,-8.349731,5.837672,9.062071,0.029566,8.469082,2.740304,-9.878643,0.401533,-1.093952,-9.459498,8.866921,9.654828,3.776525,-9.494497,2.338334,-8.384455,-3.697370,-1.039697,3.061425,-5.891898,9.897912,-2.285498,-0.296396,-2.633798,-2.214082,-6.478209,-5.112934,3.353255,0.590808,2.705877,3.479193,-1.777237,4.583372,7.073364,-0.975270,1.087285,6.947906,-8.215240,8.863978,-1.409863,4.265474,-8.072460,-2.275520,0.959027,8.095668,3.241637,-7.198740,-0.019119,-5.755831,-5.029606,4.128095,-0.772142,2.294241,-4.078023,8.674202,-8.506145,-4.698934,-8.151491,-9.187855,-3.364028,-4.015960,-6.897595,7.711182,-5.284726,1.838099,-7.355395,6.037080,7.228643,7.654396,5.698343,9.671774,7.691819,-9.469556,-2.785251,8.352321,-3.350523,-7.037968,3.357125,8.286001,4.638289,-2.121682,-5.099258,-2.426209,2.988066,0.646392,-1.966571,-7.351726,-1.246416,0.076911,-5.075483,8.754874,-6.967014,6.037529,1.996580,-8.445249,8.515878,5.942523,-4.809509,-1.019478,2.821753,-3.261290,-7.113921,-7.455198,-2.482512,3.606185,-2.230112,3.954834,6.799056,-4.200341,-5.938391,8.690921,-7.364308,7.880435,2.196169,-6.957117,6.191943,-6.371795,8.876587,5.771075,7.840933,-5.376736,2.675430,-4.299038,5.449717,-1.782068,3.927185,4.516214,-5.753537,-7.114642,-4.063976,-9.526550,-5.738664,5.593914,2.356653,9.042011,-5.816691,1.019803,4.425106,-0.169051,-0.825923,-7.739292,-6.270425,6.374916,-8.061937,-4.719315,-8.884014,4.914988,-7.912303,2.666290,6.391964,-2.910690,-2.555850,0.398673,6.074799,-9.967258,-7.779099,-9.060917,6.772665,8.611382,0.149808,-6.367519,1.738644,-1.460036,3.720737,4.250001,-1.226217,-2.742235,2.274674,9.371957,4.326675,6.485130,-9.643133,-1.564057,9.445499,-0.755291,-9.937305,0.615023,-9.270082,6.424103,1.177308,-7.496110,-9.075233,-3.028972,-1.851035,-6.022971,-6.613624,-9.672967,6.693402,-0.180005,-0.884218,-8.080306,6.860891,-2.318656,0.987949,2.499542,8.787597,5.591242,-8.746619,4.023905,6.695947,-8.439936,4.356795,-5.445665,-0.879124,-8.021305,9.515810,1.340288,-0.983487,-0.060724,0.666084,-9.245091,4.363634,-4.828118,1.427679,0.610911,4.164998,-3.766551,-3.230991,-7.180060,2.443883,5.489230,8.423807,-7.731602,3.592670,7.701147,-2.862633,2.801388,7.549798,-4.367890,6.346923,8.985596,3.406112,-4.335208,7.301528,-7.881613,1.065930,4.578991,-2.005168,-9.066345,8.917414,-3.416034,1.926389,9.090617,8.274205,2.726451,0.380761,-0.782977,5.875998,-9.825664,3.735588,5.220942,6.404852,0.339168,-3.070061,7.516367,5.627856,-5.068745,0.279716,-7.895421,1.102621,3.718107,-7.580676,8.274926,-2.894385,-1.885582,5.336454,-4.082611,2.214173,-4.398419,6.028007,6.523052,-0.002128,0.105611,0.621876,-0.553364,-8.628727,-1.946616,3.263418,-3.007042,1.579189,9.281966,-7.015968,5.402851,9.039145,-9.079073,2.958482,-1.456582,3.200487,8.218402,4.646874,2.940091,-0.338709,-1.057825,3.716572,4.937853,-8.259004,9.528915,3.210944,-1.724449,8.830850,3.833871,-4.605108,-8.877779,-6.341139,-6.557128,0.980986,5.671179,0.810897,-4.160976,-5.822067,-9.278132,-0.181391,2.704458,-1.847755,9.421744,-3.217934,8.720411,-8.275275,-2.704558,2.804273,-9.759415,-8.221837,-0.216289,9.796114,9.538042,4.077939,-8.587765,4.097363,4.028980,7.691358,8.739271,9.738539,-2.764862,-2.496626,-2.582838,-6.516485,8.023837,-7.161485,-1.963894,-5.207802,0.483417,0.056076,3.743316,-9.870201,2.700493,3.410429,3.630279,9.418665,-1.375416,3.442886,3.492880,2.293269,-9.717794,6.301665,-8.042813,-8.418877,4.813312,0.961363,0.640477,4.324524,-0.530571,2.611459,4.084856,5.805394,6.917648,3.203099,-2.350102,3.484376,-9.493493,-6.524623,-3.549241,0.628450,-7.851305,-2.959098,-9.237175,-4.951196,0.758996,-2.268317,-7.387904,-7.881757,-8.698221,5.395232,9.641144,-6.428674,4.314622,-6.656137,8.356356,0.906894,-4.856909,2.860566,6.804319,5.679101,-0.683566,5.902277,-2.057777,-9.967742,2.039545,6.531623,-0.223690,1.644689,-1.890873,1.624383,4.832919,-5.796619,-9.399330,-1.212020,3.043255,-7.677304,4.517685,7.993231,-2.619441,4.414881,3.230880,-4.981094,-1.496568,8.054975,0.532398,-9.394380,2.900188,-3.855261,6.590617,3.876878,0.371088,-1.551711,6.299331,-1.125798,9.678700,-4.241449,-9.955888,-8.876119,-6.795242,-8.673907,-3.451753,-3.790292,3.016886,7.211871,6.432621,6.322705,8.984808,7.917283,1.225840,-6.969579,5.326872,2.486058,5.657401,-0.785829,8.295250,1.934007,-9.150595,4.984906,-2.389860,-2.546969,5.753720,-1.705101,6.015483,-4.086922,1.355946,6.106453,5.476640,0.150024,-5.110411,-8.596082,-9.101932,1.758622,8.695680,-8.460972,8.285045,1.117445,-0.061275,5.471151,0.432071,1.705026,-5.234016,-0.301939,7.439876,-6.372153,9.086183,-2.256431,-5.421198,-5.704644,-7.286696,-0.579548,9.198545,0.908473,4.939146,9.325986,-6.643093,-3.340965,2.813595,-6.927567,-7.295451,-7.335445,1.764928,1.957160,-6.054256,7.224804,-9.676422,6.821723,6.299726,9.809073,9.673858,1.137734,7.865362,0.053327,-1.988418,-8.020243,-6.228864,8.949454,2.487447,-3.572115,-1.224161,-8.093485,1.470451,2.774130,-3.185068,8.394148,6.216306,8.193055,-6.315932,-3.954965,-6.401408,1.824004,5.303752,-0.684352,8.604398,8.822981,-9.183782,-4.246307,5.352515,-3.765023,9.925336,4.857968,2.704906,0.345143,7.733158,-5.227796,-0.613011,3.346103,-7.841189,-8.513888,-2.250400,-7.821994,-3.224140,-5.277191,-6.069313,3.307762,-6.770954,-2.444678,-4.619113,-7.344714,1.502989,1.308811,-5.684814,-3.832282,9.239976,8.943937,-9.898330,-6.672442,-9.179577,-8.828019,-4.360738,-3.800632,-7.889973,-2.289575,3.437395,6.475169,6.108222,-7.748364,3.082948,8.234927,-9.076624,-7.917594,-3.153900,0.004092,3.774855,0.355438,4.845703,-3.922237,-5.670394,-8.071649,7.585670,6.645053,1.709445,9.566911,-3.292630,0.984394,5.776224,8.325558,-7.775833,-9.074543,-0.809495,8.260341,-4.433904,3.747448,-0.159943,-2.233464,8.789436,6.826929,3.921489,3.214288,2.789871,-1.367445,-0.941194,-1.455201,-0.332063,-8.954457,-9.914538,7.753653,-1.695986,4.182831,-9.457349,-7.207120,1.877136,-3.473103,-5.606276,-6.122459,-2.265424,-6.590554,-7.987597,-2.540267,-3.544867,4.030513,-2.931849,6.496642,-4.508490,-5.019531,-7.205875,-6.762932,-3.396941,-2.725680,1.158941,-8.058236,-2.803630,-5.627655,8.906131,0.703991,-9.412713,-9.858508,4.576057,2.650826,-0.221832,1.018758,-5.350691,2.536808,-6.687561,-7.556032,-7.134007,-3.779784,2.417213,-5.892062,4.669936,-1.175445,-2.937112,-9.180576,-3.066498,4.228411,5.890275,4.304784,6.091361,-3.484917,5.439244,4.047279,4.722148,-4.219764,-7.014530,5.680500,-7.608481,3.384610,-2.581541,9.190243,5.203597,-8.681456,7.145511,6.423168,-0.167906,-1.512103,-1.840118,9.283098,3.942712,-2.718889,-6.023080,0.016355,-5.202203,-6.876253,1.761324,9.206600,-0.827399,9.024612,-3.667821,-3.194824,9.141431,-2.658690,-5.563674,9.829467,6.141603,-6.951014,-3.541395,-4.145366,-9.470734,5.144892,-5.839243,5.265182,-7.177516,-8.345981,0.467163,8.139188,-4.836940,-3.199708,-8.482656,-7.565826,6.176290,8.645575,6.628273,-4.288841,-5.039764,1.462488,3.625251,-1.859480,9.810769,-7.647823,0.609920,3.351259,4.636909,2.924269,-0.534757,7.091983,-0.521205,7.878466,-7.324845,4.997732,9.251049,-8.825349,8.937779,2.108180,4.783354,4.835442,6.298869,-9.678775,-2.017751,-4.022140,-7.977015,7.834048,9.198633,-0.152904,-4.590096,-1.486309,-0.326948,-9.998199,2.291559,-4.938108,9.887388,-7.581301,1.616486,2.619802,-9.526322,-7.081476,7.084449,2.494269,-7.902011,3.375759,1.041384,-4.325965,-2.809646,-5.067449,-2.819958,-6.138495,-3.333258,6.056101,-7.391165,-5.249093,-6.471630,8.786051], dtype = "float32")#candidate|7270|(900,)|const|float32
call_7266 = relay.TupleGetItem(func_6123_call(relay.reshape(const_7267.astype('float64'), []), relay.reshape(const_7268.astype('float64'), [13, 1, 2]), relay.reshape(var_7269.astype('bool'), [1584,]), relay.reshape(const_7270.astype('float32'), [900,]), ), 2)
call_7271 = relay.TupleGetItem(func_6128_call(relay.reshape(const_7267.astype('float64'), []), relay.reshape(const_7268.astype('float64'), [13, 1, 2]), relay.reshape(var_7269.astype('bool'), [1584,]), relay.reshape(const_7270.astype('float32'), [900,]), ), 2)
output = relay.Tuple([bop_7263,call_7266,const_7267,const_7268,var_7269,const_7270,])
output2 = relay.Tuple([bop_7263,call_7271,const_7267,const_7268,var_7269,const_7270,])
func_7306 = relay.Function([var_7261,var_7262,var_7269,], output)
mod['func_7306'] = func_7306
mod = relay.transform.InferType()(mod)
var_7307 = relay.var("var_7307", dtype = "int32", shape = (9, 3, 13))#candidate|7307|(9, 3, 13)|var|int32
var_7308 = relay.var("var_7308", dtype = "int32", shape = (9, 3, 13))#candidate|7308|(9, 3, 13)|var|int32
var_7309 = relay.var("var_7309", dtype = "bool", shape = (1584,))#candidate|7309|(1584,)|var|bool
output = func_7306(var_7307,var_7308,var_7309,)
func_7310 = relay.Function([var_7307,var_7308,var_7309,], output)
mutated_mod['func_7310'] = func_7310
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7966 = relay.var("var_7966", dtype = "uint32", shape = ())#candidate|7966|()|var|uint32
var_7967 = relay.var("var_7967", dtype = "uint32", shape = (1, 10, 2))#candidate|7967|(1, 10, 2)|var|uint32
bop_7968 = relay.bitwise_or(var_7966.astype('uint32'), var_7967.astype('uint32')) # shape=(1, 10, 2)
output = bop_7968
output2 = bop_7968
func_7975 = relay.Function([var_7966,var_7967,], output)
mod['func_7975'] = func_7975
mod = relay.transform.InferType()(mod)
var_7976 = relay.var("var_7976", dtype = "uint32", shape = ())#candidate|7976|()|var|uint32
var_7977 = relay.var("var_7977", dtype = "uint32", shape = (1, 10, 2))#candidate|7977|(1, 10, 2)|var|uint32
output = func_7975(var_7976,var_7977,)
func_7978 = relay.Function([var_7976,var_7977,], output)
mutated_mod['func_7978'] = func_7978
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10076 = relay.var("var_10076", dtype = "float32", shape = (16, 3, 16))#candidate|10076|(16, 3, 16)|var|float32
uop_10077 = relay.sin(var_10076.astype('float32')) # shape=(16, 3, 16)
func_3245_call = mod.get_global_var('func_3245')
func_3248_call = mutated_mod.get_global_var('func_3248')
var_10081 = relay.var("var_10081", dtype = "float64", shape = (5, 28))#candidate|10081|(5, 28)|var|float64
call_10080 = relay.TupleGetItem(func_3245_call(relay.reshape(var_10081.astype('float64'), [7, 2, 10]), relay.reshape(var_10081.astype('float64'), [7, 2, 10]), ), 0)
call_10082 = relay.TupleGetItem(func_3248_call(relay.reshape(var_10081.astype('float64'), [7, 2, 10]), relay.reshape(var_10081.astype('float64'), [7, 2, 10]), ), 0)
output = relay.Tuple([uop_10077,call_10080,var_10081,])
output2 = relay.Tuple([uop_10077,call_10082,var_10081,])
func_10085 = relay.Function([var_10076,var_10081,], output)
mod['func_10085'] = func_10085
mod = relay.transform.InferType()(mod)
var_10086 = relay.var("var_10086", dtype = "float32", shape = (16, 3, 16))#candidate|10086|(16, 3, 16)|var|float32
var_10087 = relay.var("var_10087", dtype = "float64", shape = (5, 28))#candidate|10087|(5, 28)|var|float64
output = func_10085(var_10086,var_10087,)
func_10088 = relay.Function([var_10086,var_10087,], output)
mutated_mod['func_10088'] = func_10088
mutated_mod = relay.transform.InferType()(mutated_mod)
const_10204 = relay.const(4, dtype = "int32")#candidate|10204|()|const|int32
var_10205 = relay.var("var_10205", dtype = "int32", shape = (10, 7, 4))#candidate|10205|(10, 7, 4)|var|int32
bop_10206 = relay.not_equal(const_10204.astype('bool'), var_10205.astype('bool')) # shape=(10, 7, 4)
uop_10217 = relay.sqrt(bop_10206.astype('float32')) # shape=(10, 7, 4)
bop_10227 = relay.divide(const_10204.astype('float64'), bop_10206.astype('float64')) # shape=(10, 7, 4)
func_4480_call = mod.get_global_var('func_4480')
func_4483_call = mutated_mod.get_global_var('func_4483')
const_10236 = relay.const([3,-6,-1,8,7,-9,-9,-4,8,-3,-10,-6,-2,1,1,3,-1,-9,-5,8,-7,6,-5,-4,-6,9,-1,-10,-3,-9,1,8,-2,-4,6,-10,1,10,4,9,3,5,3,7,6,-10,-1,-1,-7,-9,-1,5,-4,-7,9,10,6,-7,3,-4,-3,8,-3,6,-5,3,5,9,-5,10,4,9,5,6,-2,-7,-7,7,-5,1,10,-8,-4,-2,3,4,-2,-7,8,7,6,-5,10,-2,-6,6,7,-9,-3,1,-5,-5,-9,-5,6,9,5,-2,7,-1,6,-9,3,5,2,-2,-4,-5,-9,-2,-2,4,8,-4,1,9,3,4,7,2,7,8,10,6,4,4,-2,5,6,4,5,9,-3,-1,-2,2,6,-5,-3,-8,9,-5,10,-1,-9,8,-10,9,-9,6,5,5,7,-2,10,-9,1,2,-4,-2,9,5,6,-3,-8,10,-6,-9,-4,-5,-10,-5,-8,6,1,-3,7,-10,-5,10,1,-9,7,-1,-8,5,-3,-10,-9,-3,4,9,-5,4,3,5,6,-2,-3,-3,-1,10,-1,5,9,-8,-3,4,-7,9,-4,3,-2,4,10,-8,-8,-7,1,8,-9,2,-5,-9,5,-4,6,-1,-4,6,4,7,6,-4,-5,8,-1,5,5,2,-5,8,-4,2,8,4,-5,8,6,-10,-4,-6,-7,5,-6,-3,-3,-4,2,5,-7,-3,-9,-4,3,-7,-10,-4,-3,-10,-7,-1,4,7,5,-7,2,-5,-1,7,2,-10,6,-1,4,9,-4,4,-10,-5,5,-7,2,-2,-10,-8,5,-5,4,2,-7,9,-5,-9,-4,-10,-6,9,-1,-2,10,-3,10,7,-4,-1,-2,-2,5,-4,4,1,-2,-8,9,-4,-2,7,-5,-3,3,-9,6,4,3,-2,3,-8,2,-8,8,4,-10,-1,5,-3,-9,5,-6,-7,-6,-7,-2,6,1,-7,-7,-10,-1,-2,-4,-3,1,-10,-9,-7,8,6,1,4,-5,2,1,10,2,6,-1,10,-9,9,7,-4,4,-5,-1,8,9,9,1,-1,5,10,8,-6,-10,6,-4,4,-8,2,9,5,-1,7,-8,-6,6,7,-6,1,-9,-3,7,1,-8,5,5,3,-6,8,9,-5,10,8,-4,-1,-8,-5,4,8,-1,7,-5,-1,-3,5,5,-8,3,-10,-7,-1,5,-7,4,-9,10,-10,-8,-6,-2,-6,4,-9,-2,-5,9,-1,3,-1,5,3,-6,10,6,9,-8,2,-9,-8,-9,9,10,2,9,-4,3,-8,10,5,4,1,-8,-4,5,9,7,-2,9,-2,-7,-3,-4,7,10,10,-7,6,6,-4,3,5,-3,-7,-10,1,7,-8,-6,5,-9,8,7,-1,5,4,-1,8,-5,-6,-5,-4,2,3,7,4,2,1,-7,2,10,-9,-2,-6,-3,-4,1,3,10,-3,-4,4,-8,-7,9,-8,5,1,4,6,10,-6,-10,6,4,8,6,-6,-6,1,4,4,7,-9,-3,-8,7,-5,2,-8,1,-4,7,-5,-7,-6,-6,-2,-8,-5,8,-5,7,3,-1,6,6,-3,4,-3,4,1,4,4,4,4,-3,6,-8,3,-9,-3,1,-9,-2,5,4,6,9,1,-9,3,1,-6,-8,8,8,-4,7,-3,6,5,-3,-9,10,4,-4,-5,-8,-5,2,6,5,10,-3,-1,2,-2,-8,7,-10,9,-10,10,7,-6,9,8,2,-5,10,6,3,-7,9,-9,7,-5,-6,4,-10,-2,-2,2,8,-9,-5,-2,-4,-1,5,4,-10,8,5,9,2,-4,-4,10,-8,-4,-5,3,-7,2,4,1,-6,2,-1,-7,-6,9,1,-4,8,2,-6,5,-9,3,-3,-1,-3,10,-6,9,10,-2,9,10,5,3,6,5,4,-3,6,8,7,-5,7,-2,4,-7,-1,-10,-8,-10,-10,-2,-6,-3,-8,-2,-9,7,3,-4,-5,-1,10,3,-6,-4,9,-3,2,-7,-9,3,-10,-5,-10,-1,1,-1,3,1,-10,-6,-1,-4,-6,-3,-4,2,-9,-4,-7,-3,-6,9,2,-7,-5,1,-3,-10,8,6,2,-5,-7,9,5,-2,8,-8,-1,5,9,5,1,-5,-9,-2,-8,-9,7,1,-9,10,-4,2,-5,-5,-10,-8,-4,-3,-1,3,3,6,-1,3,10,1,-4,-3,-7,3,7,-2,2,7,2,7,-3,9,-2,5,-8,7,-9,-10,9,6,5,-10,-5,4,-6,-7,4,4,-8,7,3,-7,4,-9,-1,10,4,6,-4,9,1,-10,1,10,-1,5,-1,-8,-8,-10,3,8,8,1,6,4,5,2,-6,-5,-7,2,-3,-5,-7,-3,-4,2,-6,-8,10,-10,5,-2,2,7,10,-9,10,-5,10,-1,-8,8,3,-4,5,-9,6,1,-3,-9,-10,5,4,-10,7,-9,-2,6,-1,10,6,8,3,2,-2,8,-1,3,-4,-10,-4,-3,-3,2,1,4,1,1,-3,-1,-6,-8,-3,-2,6,7,8,4,3,7,-8,-3,-3,7,9,-1,-9,10,10,9,4,5,10,-5,-5,-6,3,4,-6,-2,-8,-10,3,-9,3,-10,5,-9,5,5,6,5,-1,-5,-1,-1,-3,-8,-10,9,6,-8,-5,6,-1,-7,4,-8,2,-3,-4,4,7,4,-8,1,-2,-4,8,-4,3,-7,7,6,-1,-2,7,-2,7,-10,-9,-6,-1,-10,10,-7,-9,-4,4,-6,10,9,6,-2,9,8,4,-3,-6,-2,-8,3,-7,-4,8,-5,-9,-6,10,-8,9,-7,3,7,-2,10,-10,-7,-10,8,-10,6,9,-4,9,8,-9,-2,6,4,8,7,-6,5,-5,4,7,-5,-2,-7,-1,1,-1,-4,2,-4,9,8,-8,-1,-7,-2,-5,-3,6,-9,7,8,-5,-5,-10,9,4,5,4,7,-3,8,-6,4,-2,-10,3,7,10,-6,2,-2,-5,-10,-4,-10,6,4,10,-7,-1,1,6,-3,-1,9,-4,-2,7,-10,9,-10,10,10,-2,-4,3,-8,-5,-7,9,2,6,-4,5,6,6,10,1,-7,6,-7,-7,10,-5,-8,5,-6,3,-6,6,2,-9,7,2,-5,3,9,-7,2,6,-4,2,-1,-2,3,10,-9,2,1,1,-4,7,6,2,4,10,8,10,6,8,-1,7,-9,9,4,-7,-4,-2,8,10,2,2,1,1,5,7,2,-9,4,3,5,4,4,-2,10,6,2,-3,-1,10,-6,3,2,10,-7,-2,5,-4,4,1,9,-5,5,-6,2,2,3,-5,7,-1,-10,-9,-10,2,-10,-5,2,2,8,2,3,8,-1,-1,10,-5,4,3,-10,6,-2], dtype = "uint32")#candidate|10236|(1280,)|const|uint32
call_10235 = relay.TupleGetItem(func_4480_call(relay.reshape(const_10236.astype('uint32'), [10, 8, 16]), relay.reshape(const_10236.astype('uint32'), [10, 8, 16]), ), 1)
call_10237 = relay.TupleGetItem(func_4483_call(relay.reshape(const_10236.astype('uint32'), [10, 8, 16]), relay.reshape(const_10236.astype('uint32'), [10, 8, 16]), ), 1)
uop_10241 = relay.sin(uop_10217.astype('float32')) # shape=(10, 7, 4)
bop_10249 = relay.right_shift(var_10205.astype('uint8'), relay.reshape(bop_10227.astype('uint8'), relay.shape_of(var_10205))) # shape=(10, 7, 4)
output = relay.Tuple([call_10235,const_10236,uop_10241,bop_10249,])
output2 = relay.Tuple([call_10237,const_10236,uop_10241,bop_10249,])
func_10267 = relay.Function([var_10205,], output)
mod['func_10267'] = func_10267
mod = relay.transform.InferType()(mod)
mutated_mod['func_10267'] = func_10267
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10268 = relay.var("var_10268", dtype = "int32", shape = (10, 7, 4))#candidate|10268|(10, 7, 4)|var|int32
func_10267_call = mutated_mod.get_global_var('func_10267')
call_10269 = func_10267_call(var_10268)
output = call_10269
func_10270 = relay.Function([var_10268], output)
mutated_mod['func_10270'] = func_10270
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10301 = relay.var("var_10301", dtype = "uint8", shape = (15, 8, 13))#candidate|10301|(15, 8, 13)|var|uint8
var_10302 = relay.var("var_10302", dtype = "uint8", shape = (15, 8, 13))#candidate|10302|(15, 8, 13)|var|uint8
bop_10303 = relay.greater_equal(var_10301.astype('bool'), relay.reshape(var_10302.astype('bool'), relay.shape_of(var_10301))) # shape=(15, 8, 13)
uop_10307 = relay.atanh(bop_10303.astype('float32')) # shape=(15, 8, 13)
func_7306_call = mod.get_global_var('func_7306')
func_7310_call = mutated_mod.get_global_var('func_7310')
const_10315 = relay.const([-6,10,5,-7,3,8,-1,-2,3,6,4,-3,-2,5,-10,4,7,7,-8,-6,-8,-6,9,5,-4,3,9,-2,9,-6,8,-5,6,9,-8,4,-9,5,10,3,-5,2,2,-4,3,-10,-2,6,-6,-1,-9,-2,-7,8,9,3,-8,5,-1,3,-8,5,-7,-7,7,1,5,6,-10,-1,-8,2,-1,7,7,6,-4,-7,-3,8,-4,-3,10,-1,4,9,8,9,10,1,-10,3,9,7,-6,-9,-3,7,4,4,-4,1,6,-3,-7,-4,-3,-1,8,-4,4,-5,8,10,2,1,9,-9,-3,3,-7,9,5,2,-1,-10,-2,1,8,3,5,7,-9,1,7,3,1,3,3,9,-6,8,3,9,9,3,-7,10,-7,7,4,-7,2,-1,9,-1,-1,10,-6,-7,-10,-3,-1,2,-5,-1,9,-4,-9,-9,4,-3,7,-9,4,-2,-8,-3,9,8,-6,-2,8,9,-10,-8,-6,-1,4,-8,8,5,4,-7,-3,6,4,6,4,1,-2,10,2,1,-3,-6,-8,9,7,4,10,1,7,-6,-3,-5,-8,4,-8,5,3,-4,-10,-2,8,-1,7,-4,9,3,9,-10,-5,-6,-9,-4,-4,-3,1,3,3,-10,6,-3,4,-9,-6,-9,-3,-1,9,3,2,-8,-3,-4,5,-7,8,7,5,-4,-7,9,-1,2,-6,3,-3,2,-4,-2,-10,1,6,9,-6,-2,7,4,-4,8,-1,9,-10,10,7,4,-1,-7,-2,10,-1,-2,-6,6,1,1,5,-8,10,10,9,7,8,7,-2,10,1,-6,6,-8,-8,-3,-8,-7,-6,-4,-10,5,6,-7,-10,6,7,-8,-3,-4,-5,3,5,-10,6,9,6,3,-7,2,5,7,-7,-9,-3,-1,-9,10,4,-8,-5,-8,1], dtype = "int32")#candidate|10315|(351,)|const|int32
const_10316 = relay.const([True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,True], dtype = "bool")#candidate|10316|(1584,)|const|bool
call_10314 = relay.TupleGetItem(func_7306_call(relay.reshape(const_10315.astype('int32'), [9, 3, 13]), relay.reshape(const_10315.astype('int32'), [9, 3, 13]), relay.reshape(const_10316.astype('bool'), [1584,]), ), 2)
call_10317 = relay.TupleGetItem(func_7310_call(relay.reshape(const_10315.astype('int32'), [9, 3, 13]), relay.reshape(const_10315.astype('int32'), [9, 3, 13]), relay.reshape(const_10316.astype('bool'), [1584,]), ), 2)
func_3245_call = mod.get_global_var('func_3245')
func_3248_call = mutated_mod.get_global_var('func_3248')
var_10319 = relay.var("var_10319", dtype = "float64", shape = (140,))#candidate|10319|(140,)|var|float64
call_10318 = relay.TupleGetItem(func_3245_call(relay.reshape(var_10319.astype('float64'), [7, 2, 10]), relay.reshape(var_10319.astype('float64'), [7, 2, 10]), ), 0)
call_10320 = relay.TupleGetItem(func_3248_call(relay.reshape(var_10319.astype('float64'), [7, 2, 10]), relay.reshape(var_10319.astype('float64'), [7, 2, 10]), ), 0)
func_3245_call = mod.get_global_var('func_3245')
func_3248_call = mutated_mod.get_global_var('func_3248')
call_10328 = relay.TupleGetItem(func_3245_call(relay.reshape(call_10318.astype('float64'), [7, 2, 10]), relay.reshape(call_10318.astype('float64'), [7, 2, 10]), ), 0)
call_10329 = relay.TupleGetItem(func_3248_call(relay.reshape(call_10318.astype('float64'), [7, 2, 10]), relay.reshape(call_10318.astype('float64'), [7, 2, 10]), ), 0)
uop_10340 = relay.cosh(uop_10307.astype('float64')) # shape=(15, 8, 13)
bop_10347 = relay.right_shift(uop_10340.astype('int16'), call_10314.astype('int16')) # shape=(15, 8, 13)
bop_10350 = relay.right_shift(uop_10340.astype('int16'), call_10317.astype('int16')) # shape=(15, 8, 13)
output = relay.Tuple([const_10315,const_10316,call_10318,var_10319,call_10328,bop_10347,])
output2 = relay.Tuple([const_10315,const_10316,call_10320,var_10319,call_10329,bop_10350,])
func_10351 = relay.Function([var_10301,var_10302,var_10319,], output)
mod['func_10351'] = func_10351
mod = relay.transform.InferType()(mod)
var_10352 = relay.var("var_10352", dtype = "uint8", shape = (15, 8, 13))#candidate|10352|(15, 8, 13)|var|uint8
var_10353 = relay.var("var_10353", dtype = "uint8", shape = (15, 8, 13))#candidate|10353|(15, 8, 13)|var|uint8
var_10354 = relay.var("var_10354", dtype = "float64", shape = (140,))#candidate|10354|(140,)|var|float64
output = func_10351(var_10352,var_10353,var_10354,)
func_10355 = relay.Function([var_10352,var_10353,var_10354,], output)
mutated_mod['func_10355'] = func_10355
mutated_mod = relay.transform.InferType()(mutated_mod)
const_10853 = relay.const([[[-9.548037,6.380190,8.839222,3.942134,-9.270911,0.633765,-0.770059,2.979417],[8.299922,-3.461116,9.547465,4.284155,-1.233258,-8.601258,2.530104,-3.745166],[5.062618,-5.424795,-8.806083,-0.424174,7.048169,2.326897,0.441118,-3.551258]],[[-1.435394,5.111574,7.652462,1.519450,7.373163,-3.134549,-2.015807,-2.798796],[5.145466,-2.824162,-6.417911,-8.085459,-2.650043,5.120107,1.434756,-1.010885],[0.868241,4.836673,3.585771,-5.037084,-9.981956,3.328941,2.254820,-4.447425]],[[-4.279357,-6.742245,1.984658,-8.245364,-5.039472,-6.507643,4.723402,0.370711],[-4.367328,2.446289,-5.996836,-3.989986,8.954402,7.418301,-0.482747,0.468556],[-9.152887,6.699378,-2.927539,3.827097,-3.045717,-5.267983,-1.197512,-5.059098]],[[-9.602226,-8.306391,8.221922,6.658252,-5.859580,7.274238,4.470827,-0.821971],[0.103963,9.592132,1.041013,-0.802666,-2.126996,-4.170866,5.904706,3.756299],[-5.663274,-0.672886,1.082659,-4.818052,-0.063065,-4.091949,-2.950513,1.366153]],[[-9.303074,-0.374888,7.458937,3.225662,7.412713,-6.323001,-5.337779,9.406921],[-5.263763,-1.119743,8.469332,3.052020,7.380112,1.397292,-6.808615,4.548594],[-7.577048,5.968364,-5.345203,7.793955,-3.070367,-1.878011,-8.887668,2.765315]],[[7.198930,-5.965457,2.865459,-8.123398,6.485944,-5.958002,-5.811228,-8.611398],[7.480915,-5.314097,5.049993,-7.529691,-9.843328,-1.077918,-7.343028,7.434418],[-9.718218,-4.890090,9.379280,-7.839303,0.567717,4.906517,-7.352020,-9.886705]]], dtype = "float32")#candidate|10853|(6, 3, 8)|const|float32
uop_10854 = relay.cos(const_10853.astype('float32')) # shape=(6, 3, 8)
output = relay.Tuple([uop_10854,])
output2 = relay.Tuple([uop_10854,])
func_10858 = relay.Function([], output)
mod['func_10858'] = func_10858
mod = relay.transform.InferType()(mod)
output = func_10858()
func_10859 = relay.Function([], output)
mutated_mod['func_10859'] = func_10859
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10858_call = mod.get_global_var('func_10858')
func_10859_call = mutated_mod.get_global_var('func_10859')
call_10880 = relay.TupleGetItem(func_10858_call(), 0)
call_10881 = relay.TupleGetItem(func_10859_call(), 0)
output = relay.Tuple([call_10880,])
output2 = relay.Tuple([call_10881,])
func_10895 = relay.Function([], output)
mod['func_10895'] = func_10895
mod = relay.transform.InferType()(mod)
mutated_mod['func_10895'] = func_10895
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10895_call = mutated_mod.get_global_var('func_10895')
call_10896 = func_10895_call()
output = call_10896
func_10897 = relay.Function([], output)
mutated_mod['func_10897'] = func_10897
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_10926 = relay.TupleGetItem(func_10895_call(), 0)
call_10927 = relay.TupleGetItem(func_10897_call(), 0)
output = relay.Tuple([call_10926,])
output2 = relay.Tuple([call_10927,])
func_10932 = relay.Function([], output)
mod['func_10932'] = func_10932
mod = relay.transform.InferType()(mod)
mutated_mod['func_10932'] = func_10932
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10932_call = mutated_mod.get_global_var('func_10932')
call_10933 = func_10932_call()
output = call_10933
func_10934 = relay.Function([], output)
mutated_mod['func_10934'] = func_10934
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10932_call = mod.get_global_var('func_10932')
func_10934_call = mutated_mod.get_global_var('func_10934')
call_10946 = relay.TupleGetItem(func_10932_call(), 0)
call_10947 = relay.TupleGetItem(func_10934_call(), 0)
output = relay.Tuple([call_10946,])
output2 = relay.Tuple([call_10947,])
func_10958 = relay.Function([], output)
mod['func_10958'] = func_10958
mod = relay.transform.InferType()(mod)
mutated_mod['func_10958'] = func_10958
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10958_call = mutated_mod.get_global_var('func_10958')
call_10959 = func_10958_call()
output = call_10959
func_10960 = relay.Function([], output)
mutated_mod['func_10960'] = func_10960
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10958_call = mod.get_global_var('func_10958')
func_10960_call = mutated_mod.get_global_var('func_10960')
call_11014 = relay.TupleGetItem(func_10958_call(), 0)
call_11015 = relay.TupleGetItem(func_10960_call(), 0)
func_5578_call = mod.get_global_var('func_5578')
func_5582_call = mutated_mod.get_global_var('func_5582')
var_11017 = relay.var("var_11017", dtype = "uint32", shape = (256, 2))#candidate|11017|(256, 2)|var|uint32
call_11016 = func_5578_call(relay.reshape(var_11017.astype('uint32'), [16, 16, 2]), relay.reshape(var_11017.astype('uint32'), [16, 16, 2]), )
call_11018 = func_5578_call(relay.reshape(var_11017.astype('uint32'), [16, 16, 2]), relay.reshape(var_11017.astype('uint32'), [16, 16, 2]), )
bop_11019 = relay.logical_or(var_11017.astype('bool'), relay.reshape(call_11016.astype('bool'), relay.shape_of(var_11017))) # shape=(256, 2)
bop_11022 = relay.logical_or(var_11017.astype('bool'), relay.reshape(call_11018.astype('bool'), relay.shape_of(var_11017))) # shape=(256, 2)
output = relay.Tuple([call_11014,bop_11019,])
output2 = relay.Tuple([call_11015,bop_11022,])
func_11027 = relay.Function([var_11017,], output)
mod['func_11027'] = func_11027
mod = relay.transform.InferType()(mod)
mutated_mod['func_11027'] = func_11027
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11028 = relay.var("var_11028", dtype = "uint32", shape = (256, 2))#candidate|11028|(256, 2)|var|uint32
func_11027_call = mutated_mod.get_global_var('func_11027')
call_11029 = func_11027_call(var_11028)
output = call_11029
func_11030 = relay.Function([var_11028], output)
mutated_mod['func_11030'] = func_11030
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_11107 = relay.TupleGetItem(func_10895_call(), 0)
call_11108 = relay.TupleGetItem(func_10897_call(), 0)
var_11121 = relay.var("var_11121", dtype = "float32", shape = (6, 3, 8))#candidate|11121|(6, 3, 8)|var|float32
bop_11122 = relay.add(call_11107.astype('uint8'), relay.reshape(var_11121.astype('uint8'), relay.shape_of(call_11107))) # shape=(6, 3, 8)
bop_11125 = relay.add(call_11108.astype('uint8'), relay.reshape(var_11121.astype('uint8'), relay.shape_of(call_11108))) # shape=(6, 3, 8)
output = relay.Tuple([bop_11122,])
output2 = relay.Tuple([bop_11125,])
func_11128 = relay.Function([var_11121,], output)
mod['func_11128'] = func_11128
mod = relay.transform.InferType()(mod)
mutated_mod['func_11128'] = func_11128
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11129 = relay.var("var_11129", dtype = "float32", shape = (6, 3, 8))#candidate|11129|(6, 3, 8)|var|float32
func_11128_call = mutated_mod.get_global_var('func_11128')
call_11130 = func_11128_call(var_11129)
output = call_11130
func_11131 = relay.Function([var_11129], output)
mutated_mod['func_11131'] = func_11131
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10858_call = mod.get_global_var('func_10858')
func_10859_call = mutated_mod.get_global_var('func_10859')
call_11133 = relay.TupleGetItem(func_10858_call(), 0)
call_11134 = relay.TupleGetItem(func_10859_call(), 0)
output = relay.Tuple([call_11133,])
output2 = relay.Tuple([call_11134,])
func_11135 = relay.Function([], output)
mod['func_11135'] = func_11135
mod = relay.transform.InferType()(mod)
mutated_mod['func_11135'] = func_11135
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11135_call = mutated_mod.get_global_var('func_11135')
call_11136 = func_11135_call()
output = call_11136
func_11137 = relay.Function([], output)
mutated_mod['func_11137'] = func_11137
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_11138 = relay.TupleGetItem(func_10895_call(), 0)
call_11139 = relay.TupleGetItem(func_10897_call(), 0)
var_11140 = relay.var("var_11140", dtype = "float32", shape = (6, 3, 8))#candidate|11140|(6, 3, 8)|var|float32
bop_11141 = relay.divide(call_11138.astype('float64'), relay.reshape(var_11140.astype('float64'), relay.shape_of(call_11138))) # shape=(6, 3, 8)
bop_11144 = relay.divide(call_11139.astype('float64'), relay.reshape(var_11140.astype('float64'), relay.shape_of(call_11139))) # shape=(6, 3, 8)
output = relay.Tuple([bop_11141,])
output2 = relay.Tuple([bop_11144,])
func_11148 = relay.Function([var_11140,], output)
mod['func_11148'] = func_11148
mod = relay.transform.InferType()(mod)
mutated_mod['func_11148'] = func_11148
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11149 = relay.var("var_11149", dtype = "float32", shape = (6, 3, 8))#candidate|11149|(6, 3, 8)|var|float32
func_11148_call = mutated_mod.get_global_var('func_11148')
call_11150 = func_11148_call(var_11149)
output = call_11150
func_11151 = relay.Function([var_11149], output)
mutated_mod['func_11151'] = func_11151
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10858_call = mod.get_global_var('func_10858')
func_10859_call = mutated_mod.get_global_var('func_10859')
call_11358 = relay.TupleGetItem(func_10858_call(), 0)
call_11359 = relay.TupleGetItem(func_10859_call(), 0)
var_11379 = relay.var("var_11379", dtype = "float32", shape = (6, 3, 8))#candidate|11379|(6, 3, 8)|var|float32
bop_11380 = relay.subtract(call_11358.astype('float32'), relay.reshape(var_11379.astype('float32'), relay.shape_of(call_11358))) # shape=(6, 3, 8)
bop_11383 = relay.subtract(call_11359.astype('float32'), relay.reshape(var_11379.astype('float32'), relay.shape_of(call_11359))) # shape=(6, 3, 8)
output = relay.Tuple([bop_11380,])
output2 = relay.Tuple([bop_11383,])
func_11396 = relay.Function([var_11379,], output)
mod['func_11396'] = func_11396
mod = relay.transform.InferType()(mod)
var_11397 = relay.var("var_11397", dtype = "float32", shape = (6, 3, 8))#candidate|11397|(6, 3, 8)|var|float32
output = func_11396(var_11397)
func_11398 = relay.Function([var_11397], output)
mutated_mod['func_11398'] = func_11398
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10958_call = mod.get_global_var('func_10958')
func_10960_call = mutated_mod.get_global_var('func_10960')
call_11417 = relay.TupleGetItem(func_10958_call(), 0)
call_11418 = relay.TupleGetItem(func_10960_call(), 0)
func_371_call = mod.get_global_var('func_371')
func_376_call = mutated_mod.get_global_var('func_376')
const_11428 = relay.const([False,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True], dtype = "bool")#candidate|11428|(1584,)|const|bool
const_11429 = relay.const([3.911425,-5.875912,6.304910,-9.311691,-7.735086,4.480635,0.698085,6.142291,0.464339,9.723323,0.527551,1.525015,-8.716623,4.701007,-8.121028,8.757515,-9.391528,4.631842,-5.904045,0.435448,0.474451,-6.299169,-7.314565,-8.131626,-8.312748,9.334103,-0.164016,3.563146,-9.777756,-8.092824,-1.041612,9.570804,-3.536794,-2.968983,-3.491025,9.603042,-6.291897,-0.225245,4.953821,-6.250028,8.893651,4.141726,1.082171,-0.562676,3.557961,-4.310860,6.053314,-3.242369,-1.247379,-5.015269,-4.309262,-1.174654,7.179076,-6.413707,6.704690,-3.575346,-1.574592,-2.203055,1.403715,-8.293786,2.745969,-7.629711,-3.261022,-5.297371,-5.521991,5.264123,9.452310,1.356372,-3.358410,2.967723,7.117603,-8.839402,-1.386870,1.055950,-4.730559,-5.924949,-6.688836,-4.677129,-9.105853,7.417018,5.308766,5.231350,-2.361394,-3.207565,-6.424154,-1.945050,7.382748,-7.825585,5.193907,3.745442,8.484400,4.229648,9.685557,-1.141481,7.374856,-5.551292,-8.526027,9.264244,-6.043054,8.608040,6.664673,-5.237668,7.211404,-9.675610,-3.394506,-1.680996,-6.855671,8.383162,6.971936,6.041379,0.007494,7.705664,6.823196,-7.086066,-8.182347,1.438357,1.797403,1.559066,-6.766484,8.023771,2.175597,-7.284051,-6.553326,5.427634,3.887693,-9.862860,-6.784973,-5.174984,-2.059346,-1.464295,-5.737241,-3.600224,0.424368,-4.461670,-6.961239,5.654636,0.906713,9.706069,9.362660,9.403854,6.091322,-1.362295,-8.781244,5.111080,2.552037,0.176779,9.431500,-5.333774,4.856248,-9.693161,-4.641885,-3.156318,6.440656,9.446486,-7.891725,7.780793,-0.829438,-6.813749,-7.678112,0.731851,0.388722,-9.914574,8.634064,1.639492,8.436577,-1.697664,6.758898,-7.417398,-0.783864,-6.129569,-9.496398,-8.020920,4.537981,3.282567,-5.998274,6.978999,-2.174489,4.131904,-0.260868,-2.969893,-2.643999,-4.382526,6.622659,8.018274,-2.732793,7.555071,2.356290,-1.119687,-5.518572,3.737365,-6.198379,-9.830290,-7.355054,-4.572526,-0.814942,-1.724545,4.384350,8.064522,0.705957,-8.143337,-6.652493,1.382135,0.513303,-1.024139,7.803168,0.765459,-1.228970,-8.833588,0.543351,-6.724248,-4.084762,-2.562941,5.566473,-1.591297,-7.563265,-5.347008,-3.882486,1.643128,1.104129,7.389577,3.735268,7.177232,-3.856472,-7.881812,-3.244120,-4.412088,7.847119,4.158822,-3.842406,-3.642448,-0.765190,5.493301,-2.109830,2.118834,-2.030640,-8.212703,5.672861,6.980940,-6.615797,3.546751,-2.584465,6.604099,-2.448262,-9.247442,-7.582540,-5.557728,-6.144177,-4.960911,-0.072227,-7.629558,-2.987400,-6.414823,-0.975191,-7.617439,6.829680,-8.786219,2.038509,9.144738,-3.567767,-1.626891,-5.521921,1.679705,-4.724612,1.152956,6.334216,7.319551,6.723066,6.533152,5.654229,-3.268287,9.263168,3.392151,-7.712813,5.120599,-0.775482,6.277660,-9.090373,1.234517,-8.877822,9.130548,6.928635,-9.495152,-3.779414,-5.765045,9.852268,-1.544977,5.736912,7.114085,-5.980990,-0.061507,-4.310704,-9.101363,5.293806,4.830040,-6.332903,5.312671,5.522458,-5.206712,-9.490448,4.474783,3.083250,-1.790960,7.234337,-5.806930,-4.370786,3.012379,8.482260,2.611807,2.580518,-5.624567,9.872288,1.405018,9.330291,-7.905822,8.386793,6.959160,9.278586,4.290733,5.662537,3.355541,7.145267,-7.663778,-0.641250,9.770029,-6.895105,2.845762,5.195368,-7.115019,6.099650,-1.508579,2.759314,1.206453,-0.030659,6.303538,0.357387,0.401217,0.985871,1.950958,-6.816128,-9.160881,-2.707280,-7.489068,-3.578869,5.838544,-6.191683,-2.415310,0.515532,-2.190882,3.639141,-8.141643,-4.347358,3.368696,9.984555,2.159314,0.376832,1.844323,-7.794617,3.237899,-1.980214,-1.223756,4.556696,-7.916336,-2.895035,-4.239519,0.514246,-1.753927,-4.780417,0.464662,-7.418821,9.547910,-5.883960,-6.696192,3.323340,-9.506674,-4.819096,-3.027348,9.328329,-8.305241,7.687905,9.847797,8.774761,0.475399,0.988282,-0.800659,5.541850,3.101962,-5.952468,-2.306136,-7.500871,5.115725,5.115077,-5.057265,6.449788,6.137638,2.904493,6.806036,-8.781050,-7.349850,4.953063,-2.675234,7.464201,4.823749,8.209007,1.795668,-4.954292,-0.642038,-9.965780,-7.442991,0.908903,-8.165871,5.827803,-5.286662,-9.781001,0.301413,0.277827,3.930808,-3.352593,-5.917108,-3.562855,8.656730,-7.856236,3.720760,-8.599964,-8.282202,3.664158,-4.008272,-8.421047,-4.057811,2.236628,5.656023,9.016611,2.769522,1.442986,1.727765,5.073998,-1.011109,-2.499015,-2.315719,8.643964,0.680654,-9.022991,5.002287,-7.226671,5.379077,-1.113256,-8.218808,9.214811,6.641596,1.853864,7.991518,5.250935,-3.891047,7.346358,-0.798212,-1.244422,6.295966,4.889235,5.152622,-4.248955,4.533175,5.170286,2.198487,-5.103947,0.697896,5.358369,-6.665976,-6.387598,7.855430,-1.652118,8.763034,2.814403,6.117494,7.071053,-1.628887,5.578565,-1.075622,9.386106,-7.517650,-6.640622,9.421809,-0.398864,-5.788881,-8.791846,-9.432804,7.589783,6.536555,-3.673759,3.407360,-8.233884,5.913190,-8.374398,-9.942367,1.418470,2.988822,4.120256,-2.614370,-8.487841,-7.931476,-1.800457,0.647815,-5.959791,-7.986071,4.386758,8.382198,0.828284,-3.946137,-9.979702,8.190811,1.439946,-8.140391,4.809836,-1.911063,1.040536,-8.412827,8.125375,-7.212005,4.142457,-2.870865,-1.843824,-7.501948,-9.347230,6.179580,7.607208,8.181377,1.412134,3.984584,-4.122585,4.493854,5.381553,4.815266,6.523303,-0.393310,-9.999886,-9.066914,-2.478675,-9.084991,1.508876,-3.909482,-0.070037,1.610778,9.739787,-2.063852,-8.310383,6.046893,9.132998,-2.535315,-4.004126,4.808071,3.065404,-2.751402,-5.465114,-7.244304,-0.323972,9.548938,-1.175918,9.009983,8.243336,1.451400,2.638950,0.332711,2.055083,9.362856,8.504401,-8.327422,-9.949892,-2.629059,0.823736,-8.331593,4.900265,-5.418528,-2.419025,4.459213,1.326498,3.633948,-9.711736,-1.169812,-7.338352,1.959815,-2.681159,-9.168509,-5.294742,-8.627215,-4.593090,-3.915456,-2.844525,9.559385,-9.879025,-6.524583,-2.015355,-6.419124,4.555303,-4.675195,-4.858770,4.595811,-0.622183,-9.426307,-7.816446,-0.494914,0.941502,6.195485,-8.292921,9.701533,1.840015,-8.366247,1.809583,-6.349272,4.979987,7.660779,1.486860,0.157769,-2.938506,-0.554597,-2.199800,0.519385,1.527910,8.248022,-7.434552,-0.833579,-1.061236,7.932392,5.579757,-1.553601,-2.317665,4.078053,-7.825515,0.591396,-3.843584,-7.170751,2.843341,-9.414101,-5.206565,-7.315867,-3.018175,-9.584173,9.901970,4.393872,-8.851052,-7.448150,5.620970,-0.027134,-8.375769,-7.721990,7.679608,6.716204,7.940242,-6.886719,5.692874,-1.830258,5.219908,-2.138341,-3.271603,-5.571472,-7.266688,5.396122,-8.693946,1.219462,-2.353899,1.899640,-0.495960,-5.246837,-8.250856,4.548820,6.108252,-7.403526,7.819153,6.013713,-3.756463,-1.644939,-7.267299,-1.808823,9.484629,5.800481,4.437725,3.762210,0.212910,9.972258,-9.330883,4.360421,-6.478308,1.592203,7.294983,4.899351,-4.709606,-5.789940,-5.067162,0.759321,-8.140270,4.695927,8.659571,-5.658900,-1.525026,-4.412181,-9.142225,-0.873599,5.246470,-0.959940,-8.797370,-6.717272,7.613940,-7.557889,7.325770,8.465780,-2.466455,-1.994848,-8.534061,9.604125,-7.655988,3.120333,0.029578,-9.019763,6.242421,5.495303,-5.767959,-5.176325,-0.108100,3.422735,-8.472941,-4.979557,8.869984,-4.604453,2.617740,-2.097933,-9.300782,-4.114505,6.125587,-8.123153,-4.615698,9.038836,-0.112096,-1.884213,-3.626870,-1.127600,6.789518,5.729855,0.514589,-1.493851,9.128654,6.118258,-8.909209,-5.111261,-7.616928,6.034925,-9.587016,8.463954,-7.322597,-1.270107,-9.021656,-3.545126,6.315352,-8.666555,2.465570,4.664011,-5.976250,-5.712315,-5.755278,-7.582291,-8.695164,3.064886,-0.033026,1.400922,9.542818,3.330997,-2.881706,1.209062,-4.906891,8.775346,-2.697391,-0.312295,1.152775,3.499755,0.593582,-8.406787,0.789387,3.167644,-3.232354,4.203858,-5.995949,3.683226,-6.544259,-3.250204,0.431664,-0.592730,-7.044558,-9.426214,-6.597042,8.221214,9.561626,1.693245,-2.685238,9.277121,1.021566,-5.666840,7.184628,-8.562022,-2.266485,-9.247825,-7.514675,2.269951,-5.757753,-0.630064,1.212147,-4.996155,6.464902,-0.236111,-9.356921,5.843621,-1.562884,1.944147,2.891788,2.632932,-0.457452,8.358406,-0.093289,1.960573,-6.280973,8.100565,-6.306984,6.193867,0.613119,0.237077,4.912234,9.965633,-4.213667,8.428856,7.432209,0.258606,6.506783,-5.162159,7.173364,-5.531304,-6.882304,0.024950,6.552928,-5.596401,-2.960768,4.081054,-0.694919,6.254959,5.960555,7.759413,1.136601,8.222906,1.966493,8.382988,8.021487,7.601605,2.009708,-0.882129,4.804997,-6.182778,-4.970294,0.437631,-2.114889,6.058129,4.718925,-1.458361,3.571749,4.768097,-9.331249,8.864876,-2.315801,0.283113,-1.065355,5.352117,-2.292853,1.281863,3.623714,-2.426301,-4.050484,1.740954,-6.718390,-1.236219,2.859060,-4.417677,-1.724948,-6.434430,-1.541918,1.897868,2.433049,-0.061671,-4.037926,2.590128,-4.597231,1.395795,0.721780,9.103175,3.271758,-9.188686,6.105975,-9.725921,-0.902279,8.631689,-6.954928,7.121321,9.974216,3.056249,-2.447547,9.655491,-5.937490,1.010196], dtype = "float32")#candidate|11429|(900,)|const|float32
call_11427 = relay.TupleGetItem(func_371_call(relay.reshape(const_11428.astype('bool'), [16, 11, 9]), relay.reshape(const_11428.astype('bool'), [16, 11, 9]), relay.reshape(const_11429.astype('float32'), [900,]), ), 1)
call_11430 = relay.TupleGetItem(func_376_call(relay.reshape(const_11428.astype('bool'), [16, 11, 9]), relay.reshape(const_11428.astype('bool'), [16, 11, 9]), relay.reshape(const_11429.astype('float32'), [900,]), ), 1)
func_7975_call = mod.get_global_var('func_7975')
func_7978_call = mutated_mod.get_global_var('func_7978')
var_11432 = relay.var("var_11432", dtype = "uint32", shape = ())#candidate|11432|()|var|uint32
var_11433 = relay.var("var_11433", dtype = "uint32", shape = (20,))#candidate|11433|(20,)|var|uint32
call_11431 = func_7975_call(relay.reshape(var_11432.astype('uint32'), []), relay.reshape(var_11433.astype('uint32'), [1, 10, 2]), )
call_11434 = func_7975_call(relay.reshape(var_11432.astype('uint32'), []), relay.reshape(var_11433.astype('uint32'), [1, 10, 2]), )
output = relay.Tuple([call_11417,call_11427,const_11428,const_11429,call_11431,var_11432,var_11433,])
output2 = relay.Tuple([call_11418,call_11430,const_11428,const_11429,call_11434,var_11432,var_11433,])
func_11448 = relay.Function([var_11432,var_11433,], output)
mod['func_11448'] = func_11448
mod = relay.transform.InferType()(mod)
var_11449 = relay.var("var_11449", dtype = "uint32", shape = ())#candidate|11449|()|var|uint32
var_11450 = relay.var("var_11450", dtype = "uint32", shape = (20,))#candidate|11450|(20,)|var|uint32
output = func_11448(var_11449,var_11450,)
func_11451 = relay.Function([var_11449,var_11450,], output)
mutated_mod['func_11451'] = func_11451
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10958_call = mod.get_global_var('func_10958')
func_10960_call = mutated_mod.get_global_var('func_10960')
call_11576 = relay.TupleGetItem(func_10958_call(), 0)
call_11577 = relay.TupleGetItem(func_10960_call(), 0)
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
var_11607 = relay.var("var_11607", dtype = "float32", shape = (338,))#candidate|11607|(338,)|var|float32
call_11606 = func_1498_call(relay.reshape(var_11607.astype('float32'), [13, 13, 2]))
call_11608 = func_1498_call(relay.reshape(var_11607.astype('float32'), [13, 13, 2]))
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_11610 = relay.TupleGetItem(func_10895_call(), 0)
call_11611 = relay.TupleGetItem(func_10897_call(), 0)
func_1875_call = mod.get_global_var('func_1875')
func_1880_call = mutated_mod.get_global_var('func_1880')
const_11630 = relay.const([2.352042,4.297327,3.181012,-7.757886,-2.923900,-8.658698,2.690795,0.676209,5.400897,7.821341,6.086977,-3.942062,-8.866634,9.790304,4.294935,3.773085,-9.025728,3.649760,-4.161092,-0.409495,-9.620491,-2.911668,0.132279,-3.315787,-8.944798,1.920558,2.269654,8.782015,-4.880050,0.804438,5.675326,-1.022752,7.272960,8.412035,4.166852,-6.717744,3.000219,4.225104,-3.512883,6.010500,4.712319,-4.200293,5.052866,-3.977033,-7.537415,6.542174,-5.639056,5.502786,-4.737183,2.183422,0.820712,6.533793,-6.432719,3.187802,-4.147556,8.698486,5.536783,-7.113947,-6.372500,-7.613687,-2.171872,-0.076279,8.137859,-1.135661,0.559381,7.630547,0.697222,9.595345,9.905257,5.533896,6.562276,4.948117,-1.238040,3.177564,-0.375395,-4.183081,-7.624226,-0.975535,-9.742470,1.029778,-9.891182,-8.153022,5.205246,-7.851838,0.139111,-9.559880,-6.585644,0.850256,8.529163,4.470951,0.956272,-0.834639,1.896877,4.731816,4.164060,4.360134,-7.113465,8.831770,3.801840,-1.690183,1.015047,7.943193,7.925194,0.767690,-8.853359,-0.754450,-5.955239,9.441841,3.446310,7.834718,2.008592,7.433795,8.499550,4.153128,-8.984825,6.597448,-1.399221,2.702170,5.454964,-0.539026,-0.361939,9.105838,3.271979,-8.444571,-8.769067,8.732490,-0.497985,7.977775,8.749403,-4.407899,-5.978484,-8.433525,-3.058585,-3.442924,-9.701110,9.401008,-9.530652,5.668117,7.319798,-6.917470,2.412912,2.666428,-5.066910,6.264329,2.283914,2.672280,0.823205,-1.374120,-3.354944,-2.817723,2.156935,5.444785,-2.864288,4.459101,-4.482543,7.814017,3.952740,2.101313,7.460189,-8.509665,-7.625880,9.500210,7.385437,9.069528,-2.887291,-4.666516,-0.259706,9.520706,-7.367039,-9.651918,4.385602,-3.782048,4.337051,-5.874653,9.029510,1.373805,5.181555,1.455980,2.118449,-8.144092,-8.549856,7.361986,-5.004249,-2.387026,-4.288786,7.193717,-4.224529,-9.496621,1.954884,3.370499,9.348295,-8.604598,0.397687,2.203053,-1.751329,-5.171382,-3.993662,7.694987,7.758057,0.552552,0.369630,0.555460,0.590683,1.717902,-6.394940,3.435298,8.907074,-3.780075,0.317854,0.500257,6.567878,9.962631,-6.569180,-9.039887,-4.077666,0.766462,-2.638669,4.450812,-6.675816,-2.396415,4.819279,4.450632,3.169561,6.533473,2.293422,5.293067,8.128534,0.540411,3.751892,7.055721,4.085296,2.127226,1.705673,7.127440,0.716016,-4.666048,6.703794,-1.115190,-4.580118,-4.294497,-2.734428,-8.759976,-8.019458,5.943506,-8.898688,8.897668,3.817963,1.299458,3.806792,3.528617,9.590381,-1.849987,6.753683,8.035867,-2.604559,3.007045,4.818060,-4.384495,1.360842,-2.449635,-6.952343,-8.151774,-9.260224,-2.511703,-5.670620,9.213793,-5.777299,2.288577,-8.412444,1.397391,-2.669688,6.021088,-4.246286,6.538713,-5.218720,7.960462,1.240272,-8.996305,-5.359466,1.474678,-6.217833,-7.709574,-5.419960,-9.207186,-0.758117,-6.374800,4.679216,2.221499,4.677777,1.933761,-9.743048,1.767979,-2.866247,6.074706,-3.281017,-7.233296,3.143316,1.413114,-0.785621,-7.106767,4.143084,9.568112,9.328861,0.589935,6.834025,-2.542519,7.992255,5.140854,4.387928,-6.988391,0.386251,9.511497,7.145536,2.630705,-8.534152,0.905631,-9.088832,-1.759870,9.794711,-9.941641,3.967043,-2.222102,-7.340199,-1.067657,-8.448342,-8.636365,8.420354,6.418849,-1.456496,-9.689149,-1.799034,5.629335,-9.105248,-9.362397,1.805991,-0.367543,8.579194,1.275777,-8.272468,-2.419284,9.968035,7.274793,-0.734918,1.234471,0.725935,4.693525,6.268595,-8.702750,1.003528,4.031340,8.386666,7.386567,-5.326549,1.093692,-5.067600,-0.701468,-3.438911,6.921524,-1.811084,4.895624,-5.274342,4.181977,1.289442,-5.536453,7.882305,8.273603,6.804794,6.334910,-3.236597,3.564657,-0.394618,-5.473843,0.304395,6.889145,-6.947991,0.983647,-5.556662,0.039585,-4.152178,-6.341903,6.423247,-7.098331,-4.868525,0.986948,-4.275935,6.340818,-0.870133,2.299335,6.517699,9.692044,-4.479252,1.914802,9.944145,-1.755657,-0.992801,5.690426,8.448621,-4.363854,-4.307641,-6.368526,-7.393095,0.267433,6.818479,-4.240161,-5.406333,-1.164193,-6.004003,5.962079,-9.345535,9.752039,-8.934297,4.582266,9.592291,5.118345,1.415131,-5.219356,6.827478,-0.965864,3.681699,-5.791628,-4.155120,-3.490572,-6.190489,-7.078286,3.433186,0.032098,1.053167,3.495534,-9.139294,-9.299967,-3.184535,-2.390783,-2.391139,-7.982725,6.249019,4.156413,-6.055419,5.192082,2.542187,7.501805,7.974055,-7.269494,0.478458,7.488468,-1.511236,8.445534,2.221101,3.940294,-9.021695,0.147132,-6.660351,4.732982,-8.920311,3.000492,6.992852,-8.638423,3.417791,3.037639,7.749681,-2.599330,-4.571628,-5.452405,8.306762,5.871499,-6.075621,-3.677847,-5.789454,1.575877,-1.074622,-7.978605,4.331711,-8.572688,-6.011564,-5.964769,9.230597,6.294038,-6.592594,6.751849,3.863162,-6.604726,1.745851,-8.463452,-4.839699,-4.060253,-8.500796,-0.787244,1.988080,-9.657850,-7.191538,3.956821,-4.662242,8.152651,2.858580,-3.458172,-6.975552,-6.941656,9.973983,6.513492,-7.883034,-2.784720,-2.837843,-7.070650,-9.125599,5.653009,8.992143,-7.733705,-7.626240,7.533920,-3.906987,-4.711422,-1.333231,-0.738017,-2.205961,3.689146,2.463130,0.922417,5.437975,7.311440,1.475759,-2.287591,-4.917624,-7.090285,9.929907,-1.683229,6.301953,-0.967968,5.179403,-9.392296,-0.183606,-5.711118,6.458425,5.576650,4.440062,-5.380505,-9.630561,-7.413829,4.962140,2.512110,-7.717898,-3.078370,-7.865664,9.203364,2.995728,6.739184,1.905409,6.548347,-1.684883,8.614354,-0.168920,-1.754660,7.764858,1.457943,3.518594,0.981261,-6.143215,5.755986,-8.777345,-4.546315,-7.225883,7.990082,9.358523,1.327697,0.880347,8.028071,-2.314108,-4.113530,-6.517346,6.397869,-4.501480,3.234519,-5.533223,-1.882792,0.263435,6.162844,-7.094962,-5.481491,5.173075,0.792108,-4.022497,-1.354573,-6.750712,-3.878258,-8.179615,-6.157054,-7.554394,4.156482,9.210706,0.123973,-6.127500,-2.666076,8.200165,-3.281770,-1.020210,-1.691784,7.016588,-3.972100,4.330465,-5.161592,-6.443688,4.150989,8.387017,7.253670,-7.316979,8.181904,0.129400,5.316082,-8.061641,-4.742645,-6.897000,-6.937578,7.838954,7.977207,3.314973,7.965127,7.960667,8.030440,8.637632,0.908272,2.330262,5.823941,-4.791997,-6.361547,-1.672855,-1.514370,3.278420,-5.159654,7.199664,7.560290,-4.535347,-1.904247,4.359058,-3.732264,-4.563266,-6.308252,-7.998439,4.964926,8.770827,-6.075417,-5.862717,-3.186711,5.092714,-3.770978,-6.345388,5.418471,-3.673431,-4.340769,4.838648,5.263361,-4.028641,-5.370429,2.772090,-0.149862,6.981245,-9.340481,7.546699,2.716604,-2.896977,6.816494,5.833184,6.628855,-5.216275,-6.531114,-0.873436,2.238106,6.570722,3.351151,8.227345,7.721056,-3.905389,-0.703605,-6.882808,-3.758800,-6.248761,-1.451455,0.921445,8.215534,4.519137,9.770634,1.922433,1.905951,-7.522639,5.501212,-8.317499,-9.374672,1.847342,-4.468090,-0.456394,-7.267628,-8.138279,7.563976,-8.077566,5.727088,-2.277090,8.892352,9.451126,-9.672927,8.647660,-0.082050,9.620382,7.642753,0.770329,-1.285994,-8.041687,-3.270380,6.968011,-5.842131,5.144205,-7.632093,9.632376,7.770859,-3.228821,-7.216657,-8.250573,8.042189,-0.607323,-3.621123,-6.901151,3.559876,8.063101,6.414686,1.339632,-7.988642,7.034628,-7.281293,-3.382856,4.800537,-9.520072,-8.815210,-8.460600,-8.987567,-9.927817,1.753173,2.338503,-4.667046,-5.433271,-7.047733,5.707020,-2.717800,4.842014,8.251844,5.689696,-3.265906,1.847647,-2.926236,-3.596361,-9.847064,8.415829,9.897897,-8.827553,2.371996,1.597926,3.189369,-8.534462,9.836076,-8.440107,6.749012,0.304121,8.637764,-5.160589,5.343598,-1.257862,-5.674741,4.691074,9.389756,3.564882,-7.490974,-9.171969,2.062843,-6.813375,-1.125168,-1.722310,-9.033509,8.706256,-0.760024,9.794772,-8.402533,9.795505,8.277345,-2.342920,-5.479203,5.213376,-2.364418,-8.458036,-6.518258,-6.993501,-2.267291,-0.149143,-6.210165,-3.303952,9.634789,-0.885273,-3.223052,-5.749717,-9.211256,-9.875938,-5.674688,-4.941718,7.425218,8.097859,4.461818,-6.649487,-9.153086,-6.516121,-4.621477,9.382989,-5.642854,9.117162,5.880937,-0.121389,-7.312675,-7.104014,-6.036927,6.440692,-9.613297,5.152222,-4.842779,3.042857,-2.256364,3.769675,-2.160360,-3.228828,6.840011,2.928423,-1.034900,-3.615911,-7.610287,1.380023,4.856028,-6.936827,9.544152,8.885666,7.004062,-4.080110,-9.751210,-8.915762,-2.915374,5.504349,-2.729462,-9.654090,-2.326821,6.111002,-6.733590,2.801429,9.477481,0.468350,4.236557,-5.283046,2.890153,-6.481001,9.241375,-2.494001,-6.299201,0.661638,8.826541,2.046784,-8.665035,-5.101573,0.132964,9.311415,-1.137256,-3.931715,2.053306,-4.916678,7.469784,2.605715,-2.688829,0.866368,1.849829,6.350450,-3.129521,3.457445,-6.238003,6.725764,5.484929,-9.215753,7.608501,-2.992946,-6.257424,0.273842,4.581518,-7.941089,5.043176,-8.416133,-9.351048,7.759429,-1.222148,2.035864,-7.691888,7.239216,8.231147,1.330157,-2.951978,-3.482298,7.418034,-7.806815,-9.207371,-9.915050,-1.417876,-3.310344,-2.523567,-5.302794,-6.450560,5.333374,-3.529953,1.559001,9.348982,9.818220,-3.540236,-2.701622,3.998142,-6.720895,0.848887,2.011845,-6.809661,-2.878424,8.496091,4.881217,-3.555049,6.808100,6.009589,7.951026,1.993015,-6.949025,-0.418653,9.312232,-1.805796,3.509967,-5.170397,0.184818,-5.520025,-6.478068,-0.341388,-8.205416,-7.410461,-1.961186,-6.394428,-9.884806,-3.855320,8.751924,5.407273,-8.400816,-2.866089,7.175924,5.128345,5.143038,-2.750952,4.730669,-4.723308,-1.530329,2.057528,-5.102618,-5.100301,-1.658297,-4.949098,7.161332,-2.102392,3.902246,0.773250,-2.841298,8.964048,-0.696017,2.952820,1.057847,9.017844,-8.090641,-2.882626,-3.276100,-3.986311,7.790689,-7.262108,-2.030168,-2.713013,-1.684334,4.582352,-2.678976,-2.768426,-9.574369,0.953944,2.789227,3.299153,6.820352,5.693033,-2.660751,-5.680159,-7.152216,-0.581971,-2.364851,-0.891041,-4.103793,9.984127,-1.200509,-8.127759,8.602625,-4.596486,-8.534833,-7.596419,6.437945,-6.258551,0.571757,2.742230,3.798499,1.137426,1.615160,-4.698385,4.915665,-0.305505,-3.842685,-3.838638,-9.206058,-2.347374,3.987053,0.685150,-4.523383,-2.206623,-8.988006,4.426409,-8.559132,8.320307,-9.093330,2.468968,4.954747,-9.803870,-5.655933,2.890871,2.812058,-6.360994,3.740504,-2.899993,3.360210,8.426141,-4.173264,1.162488,1.664001,-3.049212,1.384558,3.884264,-2.915621,-3.081431,0.183170,9.047409,4.491303,1.168360,6.911103,9.455721,-0.046522,4.449163,4.000787,8.957833,9.555688,5.341271,-2.003011,-3.928546,-4.104628,2.527751,-3.365031,-5.115539,-3.357069,-1.022174,8.382763,-9.063786,3.253550,5.754902,4.847566,9.503058,-6.218181,7.681059,-9.556965,7.725830,-2.057377,-1.562368,-9.513554,-6.401343,-2.468880,-8.483625,-3.868973,4.511875,-9.140794,2.743561,-7.521662,8.994549,1.885472,4.146325,-5.689745,-2.876419,5.038007,8.596630,2.128969,7.304047,0.150797,-3.956724,-9.699772,2.161392,-7.576510,-3.541882,4.085385,1.789845,-0.439379,-4.243743,-2.216590,0.277057,9.197802,0.241104,6.840206,-3.906670,-6.965172,-3.886924,1.493752,-1.546502,-0.619269,-1.377387,-4.981155,-8.989720,-1.668107,6.662014,6.462867,-0.540622,6.076905,-0.961164,-2.129061,8.109288,1.130266,-7.420183,5.932707,-1.354528,3.020095,-2.852171,-9.138225,7.285490,3.596724,1.023592,3.752570,-6.890864,1.337644,0.072921,3.462950,0.439022,5.553033,4.143372,-5.383187,-4.608422,-2.750735,9.348069,-8.699885,6.610451,6.609179,-8.874927,9.463800,0.103524,5.562332,-4.776447,-5.673737,5.667726,7.884904,-7.162992,-5.530710,-3.254650,5.175253,-3.776829,-0.672061,-4.628976,-4.674492,-0.801612,8.017797,4.926362,4.260219,3.814819,6.817556,5.985839,-9.456965,-0.678234,-2.267811,8.664585,-1.617900,6.613647,-0.308031,-6.206889,7.610518,-3.721831,-1.060018,3.015818,1.572964,2.880466,-7.669627,-4.103829,4.185415,6.870417,1.125603,1.112987,-8.330543,-1.607573,-6.241938,-1.208757,6.360278,-9.561876,-9.723998,4.669896,1.398200,-5.919011,4.605299,-8.840672], dtype = "float64")#candidate|11630|(1200,)|const|float64
const_11631 = relay.const([[9.105286,5.158193,0.988891,5.821662,-2.223159,-9.472455,-6.827321,8.182153,4.962579,2.496478,-5.149103,7.395558,6.166906,-7.966538,0.167645,4.440745,9.614676,5.623190,-0.633986,9.734940,-4.419459,9.060181,-3.817169,-7.122746,-0.553084,-3.198439,1.979878,-9.921871,-2.412026,4.947146,0.818453,4.091235,7.110288,7.660757,4.676820,3.124260,-0.958609,-2.345848,6.528188,-5.793535,-7.126440,-3.637168,-0.790000,5.563541,2.152375,0.104126,8.411282,8.768661,2.841231,-1.346475,3.928689,-5.989211,-7.995489,-9.007077,-3.804814,9.742578,-7.295560,-4.429016,-8.039140,1.938215,-6.572614,-5.712852,6.295125,8.682998,-4.734729,-3.340991,4.418897,9.218712,1.049651,8.620911,1.298564,3.187661,-8.843958,-7.755474,5.155715,-4.256808,-5.879317,4.584297,-2.261502,-6.905479,-8.499965,-2.075126,-8.270809,4.337590,-3.915357,1.587890,4.487720,4.606277,-6.738731,-4.383089,9.026799,-7.128363,2.930505,-4.514805,-6.461625,-6.586354,4.899335,-7.755159,-3.597111,9.820671,-8.314034,-2.859391,6.230963,5.369473,-2.397651,3.588952,-9.106298,5.857636,2.749502,0.321258,6.045661,-8.166651,-0.689347,-8.516104,-9.141311,9.128001,-5.184931,-1.587168,9.066858,1.976607,2.560890,-0.214471,-7.223186,6.505928,5.123735,1.115612,-2.575567,0.428298,-1.203040,-5.316007,0.128517,2.037257,2.716480,-6.386118,1.955318,-3.914325,-9.031857,-8.847234,0.714084,2.286063,-3.040431,9.414437,-9.312749,-7.599680,-7.106107,-0.728002,-3.030420,4.446027,5.233549,9.744911,6.091258,-9.350124,-4.663868,4.011971,-6.451002,-5.607066,7.046709,-4.074568,-6.156334,4.482071,1.251600,-6.250744,8.388135,6.179750,3.453443,-2.008708,8.580385,2.918882,0.978856,7.760169,4.405862,9.524113,1.162947,-9.748672,-1.726840,-2.266806,3.100390,5.000113,-1.068360,-0.773584,2.678672,-3.926703,0.926768,-2.364022,-3.645539,-6.115780,4.851620,5.798833,8.916639,-4.533344,9.031392,9.134338,-7.663345,2.626425,-1.962904,-8.638839,-9.440869,-9.258155,-5.804421,7.281036,-4.367953,-3.955391,7.311439,-8.127547,-3.341907,-9.702664,9.943566,-6.941190,-1.862831,-7.021025,1.349230,4.348707,5.315675,3.551731,-3.823545,0.691495,5.946048,6.494338,6.461239,4.872709,-0.579965,2.832956,-4.429888,2.715009,0.763139,0.053703,9.109862,1.294429,-5.703038,-9.402585,3.266825,5.682611,-3.783043,5.742350,-4.737454,7.553858,-9.644857,-5.637797,-2.604787,2.488950,7.857752,8.314009,2.482902,4.048696,0.162176,3.296636,2.179627,3.381349,7.171663,7.662916,-3.412217,-3.604115],[6.879598,3.553041,1.556179,-7.938921,8.766038,3.932511,-2.235560,-0.139061,-8.472243,-8.403350,-7.091285,0.690941,-2.305308,5.389507,9.861770,4.414507,-0.843644,6.336928,5.495212,-6.417955,8.043971,-2.813446,-0.468731,6.761781,-0.989189,0.901029,-7.058487,-0.488908,1.155119,9.430254,8.574237,-4.691102,7.655262,4.889267,1.588546,6.050353,4.558531,-6.461392,-8.468138,5.236118,0.719539,7.885432,7.008736,-2.091610,4.386855,-7.223389,-8.077997,-1.973604,-2.714434,-9.440602,5.325983,-6.113383,0.641031,-7.375624,-9.094339,-3.321856,-3.860136,2.012700,4.522822,4.882053,3.912496,-7.045231,-7.539311,3.745449,-9.015695,-7.234494,0.816545,9.415182,8.038241,-8.797873,1.305548,4.719294,-2.172495,7.313118,-5.563663,-0.246532,-7.124461,0.396104,3.043398,8.693844,-5.280476,7.362125,-7.582841,4.491146,0.796891,-1.586405,-2.616692,-8.056964,-4.908755,0.201851,-6.152268,2.626029,-8.474463,7.978461,6.818772,4.292071,-4.776430,-1.007049,3.960340,-3.691552,3.014048,6.148805,-2.892008,3.204266,-4.606769,2.246492,-8.917376,8.342159,5.890165,3.092721,-0.050387,3.452141,7.046086,4.128779,3.335943,0.581118,-8.435189,-1.478643,4.627738,-3.292994,-2.571248,-1.374495,-9.177791,7.431817,2.917726,-7.841829,-7.644008,-0.997476,4.913788,-4.622498,-4.980456,-1.612606,6.983258,8.440781,-8.131378,-4.866013,-7.280220,1.789102,-1.271547,-6.157251,4.496411,6.035737,-9.508962,-0.943645,-1.284278,-8.475758,-8.416704,4.432383,-9.829159,-3.800534,-7.291947,6.011437,-2.263343,3.046084,-1.588137,-6.066009,5.178507,0.341465,9.538568,0.534306,-8.870982,-1.112345,-2.280897,-3.446814,3.195656,3.543486,7.560683,-1.021781,-5.190495,8.414663,6.640349,-0.941852,0.395566,4.624201,7.598999,-3.877313,-8.353183,9.722760,8.672996,0.773419,-1.041253,-8.608910,-1.905070,7.864236,6.460723,6.695434,-3.067680,7.480807,9.675885,0.239701,2.873589,-5.452020,-2.652178,5.106788,-3.906197,-1.812672,4.594356,-5.816361,5.443408,-5.760090,-3.155164,-4.686070,-3.998839,5.097016,-2.160192,-1.626604,-1.199641,2.943727,-4.097248,-0.311168,-8.143396,-7.372793,-5.973087,8.698826,-9.574488,-3.701110,3.978593,-1.707213,-7.756302,0.568151,-1.801074,-0.807378,-3.114177,2.202514,-4.837264,5.634856,3.313542,7.738204,3.763807,8.935416,-7.717370,-6.456241,-4.503731,5.208059,-2.112895,2.304835,0.022893,-8.451353,-2.896618,-0.257433,4.203214,6.998738,8.139213,-2.275599,5.771178,7.276106,8.657716,8.953580,-9.843106,-7.054814,8.594304,5.593304],[-7.957474,-3.938288,2.845922,7.488567,4.758352,2.044745,6.882578,8.499747,-0.396919,3.324091,-1.767039,8.120099,5.300689,-5.790531,-1.315407,2.632672,3.738717,6.385452,8.875347,1.936256,2.508887,3.728435,4.314540,9.202054,9.502319,8.867188,4.326514,-9.699865,0.929795,3.235536,-6.735383,-0.507682,-1.817894,5.245969,-3.012487,-8.317461,0.854404,0.988183,-0.033996,-7.217898,2.247074,-1.727232,1.394141,7.484356,6.630400,-5.704581,-9.843027,4.386649,-0.899787,-2.179556,0.495464,-4.983960,-2.622112,7.650697,-6.412999,7.766120,-0.775978,-1.865215,-1.142563,-5.820837,-4.002664,-6.162999,4.561795,1.697060,-9.190381,-2.494179,4.228121,-3.825048,-0.562188,-6.569015,-2.315643,-7.841021,9.142254,-9.284596,7.885922,2.405912,5.304023,-9.921515,5.065001,-4.751785,0.629038,-5.782461,6.006630,-0.505259,-5.108734,-6.709686,-6.073765,6.425086,9.676838,-6.344778,-7.072540,-9.352088,3.698006,-6.909596,-6.635971,-2.302943,-4.531447,-7.484883,4.335569,6.468075,-4.435353,-6.173872,6.328002,-2.548389,1.168386,7.000726,6.571835,1.439421,-3.371128,7.415702,-2.201846,-9.015156,-4.889401,-5.558788,6.397976,-7.924239,7.368754,0.118780,-0.644274,1.463546,-2.938282,-5.219866,-0.389404,-8.368972,4.552881,-1.352748,7.909446,-9.857639,9.968820,2.719939,8.598831,-9.997987,1.911406,3.975982,-4.170692,4.067984,5.786153,-0.854347,-3.301080,-3.183983,-2.200680,4.285124,8.978873,-4.956873,1.698943,7.518649,6.855848,3.483862,5.399155,-0.324986,-1.200632,-3.379716,4.959656,7.686664,3.403365,-5.332427,-0.823365,9.839782,3.682117,0.549391,-4.520641,0.347158,-8.455637,-7.076706,0.100010,1.139127,-7.387348,4.727630,-5.047553,3.020492,-3.618385,-5.876706,-1.567676,-0.261687,5.659427,-6.002677,3.741580,2.830500,-9.157522,2.721711,-5.329351,6.406506,4.893850,0.107201,-1.046365,7.543502,-5.763598,1.063117,-4.657319,-2.025254,6.157103,0.479809,3.675271,3.398521,-4.265341,0.567616,8.328943,0.108423,-7.349117,4.024013,-9.081692,0.875620,-1.122127,5.975123,6.257892,-4.672603,-0.297492,2.823080,-8.020281,0.589625,8.098851,3.115403,-3.522981,8.475022,7.681266,8.021786,-3.787370,-6.881289,3.364147,8.886659,-9.709132,-9.309302,5.193998,-4.196362,-5.521995,-2.264160,-7.400730,-8.471675,-9.206127,0.593575,-8.898560,7.183010,-7.053006,2.992761,5.215418,-2.930914,-8.628217,-0.061569,-1.421953,5.451313,3.717361,-7.438967,-7.114826,-9.839852,6.191624,-5.170893,-9.733590,-9.328034,-7.923655,-6.349660,-7.699186,8.643509]], dtype = "float32")#candidate|11631|(3, 252)|const|float32
call_11629 = relay.TupleGetItem(func_1875_call(relay.reshape(const_11630.astype('float64'), [15, 16, 5]), relay.reshape(const_11630.astype('float64'), [15, 16, 5]), relay.reshape(const_11631.astype('float32'), [756,]), ), 1)
call_11632 = relay.TupleGetItem(func_1880_call(relay.reshape(const_11630.astype('float64'), [15, 16, 5]), relay.reshape(const_11630.astype('float64'), [15, 16, 5]), relay.reshape(const_11631.astype('float32'), [756,]), ), 1)
output = relay.Tuple([call_11576,call_11606,var_11607,call_11610,call_11629,const_11630,const_11631,])
output2 = relay.Tuple([call_11577,call_11608,var_11607,call_11611,call_11632,const_11630,const_11631,])
func_11633 = relay.Function([var_11607,], output)
mod['func_11633'] = func_11633
mod = relay.transform.InferType()(mod)
var_11634 = relay.var("var_11634", dtype = "float32", shape = (338,))#candidate|11634|(338,)|var|float32
output = func_11633(var_11634)
func_11635 = relay.Function([var_11634], output)
mutated_mod['func_11635'] = func_11635
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10932_call = mod.get_global_var('func_10932')
func_10934_call = mutated_mod.get_global_var('func_10934')
call_11667 = relay.TupleGetItem(func_10932_call(), 0)
call_11668 = relay.TupleGetItem(func_10934_call(), 0)
func_4835_call = mod.get_global_var('func_4835')
func_4839_call = mutated_mod.get_global_var('func_4839')
var_11670 = relay.var("var_11670", dtype = "float64", shape = (35,))#candidate|11670|(35,)|var|float64
const_11671 = relay.const([[-5.817289,-6.009145,-3.850732,9.942439,2.556834,-7.395612,-5.542151,-0.619543],[-3.059625,9.417168,4.371353,-7.166434,5.389769,-4.563423,2.547592,-6.729879],[1.918885,-0.175098,3.862923,6.307174,0.923901,-0.683179,4.059042,-2.155539],[2.867700,1.114093,8.337021,8.351951,1.233185,-8.573916,4.179320,-3.982832]], dtype = "float32")#candidate|11671|(4, 8)|const|float32
var_11672 = relay.var("var_11672", dtype = "float64", shape = (5, 28))#candidate|11672|(5, 28)|var|float64
call_11669 = relay.TupleGetItem(func_4835_call(relay.reshape(var_11670.astype('float64'), [7, 5, 1]), relay.reshape(const_11671.astype('float32'), [32,]), relay.reshape(var_11672.astype('float64'), [5, 28]), ), 1)
call_11673 = relay.TupleGetItem(func_4839_call(relay.reshape(var_11670.astype('float64'), [7, 5, 1]), relay.reshape(const_11671.astype('float32'), [32,]), relay.reshape(var_11672.astype('float64'), [5, 28]), ), 1)
func_4835_call = mod.get_global_var('func_4835')
func_4839_call = mutated_mod.get_global_var('func_4839')
call_11678 = relay.TupleGetItem(func_4835_call(relay.reshape(var_11670.astype('float64'), [7, 5, 1]), relay.reshape(call_11669.astype('float32'), [32,]), relay.reshape(var_11672.astype('float64'), [5, 28]), ), 6)
call_11679 = relay.TupleGetItem(func_4839_call(relay.reshape(var_11670.astype('float64'), [7, 5, 1]), relay.reshape(call_11669.astype('float32'), [32,]), relay.reshape(var_11672.astype('float64'), [5, 28]), ), 6)
var_11688 = relay.var("var_11688", dtype = "float32", shape = (4, 8, 7))#candidate|11688|(4, 8, 7)|var|float32
bop_11689 = relay.not_equal(call_11669.astype('bool'), var_11688.astype('bool')) # shape=(4, 8, 7)
bop_11692 = relay.not_equal(call_11673.astype('bool'), var_11688.astype('bool')) # shape=(4, 8, 7)
bop_11694 = relay.less(var_11670.astype('bool'), call_11669.astype('bool')) # shape=(4, 8, 35)
bop_11697 = relay.less(var_11670.astype('bool'), call_11673.astype('bool')) # shape=(4, 8, 35)
uop_11702 = relay.log(bop_11694.astype('float64')) # shape=(4, 8, 35)
uop_11704 = relay.log(bop_11697.astype('float64')) # shape=(4, 8, 35)
bop_11706 = relay.greater(uop_11702.astype('bool'), call_11669.astype('bool')) # shape=(4, 8, 35)
bop_11709 = relay.greater(uop_11704.astype('bool'), call_11673.astype('bool')) # shape=(4, 8, 35)
func_4143_call = mod.get_global_var('func_4143')
func_4145_call = mutated_mod.get_global_var('func_4145')
call_11711 = relay.TupleGetItem(func_4143_call(relay.reshape(call_11678.astype('float64'), [10, 2, 3])), 0)
call_11712 = relay.TupleGetItem(func_4145_call(relay.reshape(call_11678.astype('float64'), [10, 2, 3])), 0)
func_4835_call = mod.get_global_var('func_4835')
func_4839_call = mutated_mod.get_global_var('func_4839')
call_11717 = relay.TupleGetItem(func_4835_call(relay.reshape(var_11670.astype('float64'), [7, 5, 1]), relay.reshape(const_11671.astype('float32'), [32,]), relay.reshape(var_11672.astype('float64'), [5, 28]), ), 1)
call_11718 = relay.TupleGetItem(func_4839_call(relay.reshape(var_11670.astype('float64'), [7, 5, 1]), relay.reshape(const_11671.astype('float32'), [32,]), relay.reshape(var_11672.astype('float64'), [5, 28]), ), 1)
uop_11719 = relay.acos(uop_11702.astype('float32')) # shape=(4, 8, 35)
uop_11721 = relay.acos(uop_11704.astype('float32')) # shape=(4, 8, 35)
func_10351_call = mod.get_global_var('func_10351')
func_10355_call = mutated_mod.get_global_var('func_10355')
var_11728 = relay.var("var_11728", dtype = "uint8", shape = (1560,))#candidate|11728|(1560,)|var|uint8
call_11727 = relay.TupleGetItem(func_10351_call(relay.reshape(var_11728.astype('uint8'), [15, 8, 13]), relay.reshape(var_11728.astype('uint8'), [15, 8, 13]), relay.reshape(var_11672.astype('float64'), [140,]), ), 3)
call_11729 = relay.TupleGetItem(func_10355_call(relay.reshape(var_11728.astype('uint8'), [15, 8, 13]), relay.reshape(var_11728.astype('uint8'), [15, 8, 13]), relay.reshape(var_11672.astype('float64'), [140,]), ), 3)
bop_11731 = relay.divide(uop_11719.astype('float64'), var_11670.astype('float64')) # shape=(4, 8, 35)
bop_11734 = relay.divide(uop_11721.astype('float64'), var_11670.astype('float64')) # shape=(4, 8, 35)
uop_11737 = relay.sin(bop_11731.astype('float64')) # shape=(4, 8, 35)
uop_11739 = relay.sin(bop_11734.astype('float64')) # shape=(4, 8, 35)
uop_11743 = relay.sinh(bop_11731.astype('float32')) # shape=(4, 8, 35)
uop_11745 = relay.sinh(bop_11734.astype('float32')) # shape=(4, 8, 35)
bop_11764 = relay.mod(uop_11719.astype('float64'), relay.reshape(uop_11737.astype('float64'), relay.shape_of(uop_11719))) # shape=(4, 8, 35)
bop_11767 = relay.mod(uop_11721.astype('float64'), relay.reshape(uop_11739.astype('float64'), relay.shape_of(uop_11721))) # shape=(4, 8, 35)
output = relay.Tuple([call_11667,const_11671,var_11672,call_11678,bop_11689,bop_11706,call_11711,call_11717,call_11727,var_11728,uop_11743,bop_11764,])
output2 = relay.Tuple([call_11668,const_11671,var_11672,call_11679,bop_11692,bop_11709,call_11712,call_11718,call_11729,var_11728,uop_11745,bop_11767,])
func_11776 = relay.Function([var_11670,var_11672,var_11688,var_11728,], output)
mod['func_11776'] = func_11776
mod = relay.transform.InferType()(mod)
var_11777 = relay.var("var_11777", dtype = "float64", shape = (35,))#candidate|11777|(35,)|var|float64
var_11778 = relay.var("var_11778", dtype = "float64", shape = (5, 28))#candidate|11778|(5, 28)|var|float64
var_11779 = relay.var("var_11779", dtype = "float32", shape = (4, 8, 7))#candidate|11779|(4, 8, 7)|var|float32
var_11780 = relay.var("var_11780", dtype = "uint8", shape = (1560,))#candidate|11780|(1560,)|var|uint8
output = func_11776(var_11777,var_11778,var_11779,var_11780,)
func_11781 = relay.Function([var_11777,var_11778,var_11779,var_11780,], output)
mutated_mod['func_11781'] = func_11781
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_11783 = relay.TupleGetItem(func_10895_call(), 0)
call_11784 = relay.TupleGetItem(func_10897_call(), 0)
output = relay.Tuple([call_11783,])
output2 = relay.Tuple([call_11784,])
func_11786 = relay.Function([], output)
mod['func_11786'] = func_11786
mod = relay.transform.InferType()(mod)
output = func_11786()
func_11787 = relay.Function([], output)
mutated_mod['func_11787'] = func_11787
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_11795 = relay.TupleGetItem(func_10895_call(), 0)
call_11796 = relay.TupleGetItem(func_10897_call(), 0)
output = relay.Tuple([call_11795,])
output2 = relay.Tuple([call_11796,])
func_11798 = relay.Function([], output)
mod['func_11798'] = func_11798
mod = relay.transform.InferType()(mod)
mutated_mod['func_11798'] = func_11798
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11798_call = mutated_mod.get_global_var('func_11798')
call_11799 = func_11798_call()
output = call_11799
func_11800 = relay.Function([], output)
mutated_mod['func_11800'] = func_11800
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10932_call = mod.get_global_var('func_10932')
func_10934_call = mutated_mod.get_global_var('func_10934')
call_11811 = relay.TupleGetItem(func_10932_call(), 0)
call_11812 = relay.TupleGetItem(func_10934_call(), 0)
output = call_11811
output2 = call_11812
func_11822 = relay.Function([], output)
mod['func_11822'] = func_11822
mod = relay.transform.InferType()(mod)
output = func_11822()
func_11823 = relay.Function([], output)
mutated_mod['func_11823'] = func_11823
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_11838 = relay.TupleGetItem(func_10895_call(), 0)
call_11839 = relay.TupleGetItem(func_10897_call(), 0)
func_4480_call = mod.get_global_var('func_4480')
func_4483_call = mutated_mod.get_global_var('func_4483')
const_11848 = relay.const([1,-3,-3,-9,2,-7,-5,2,-1,4,-3,4,5,7,10,-3,7,9,4,-1,7,-5,-6,-10,1,10,-8,-3,-4,2,-8,6,-9,-7,2,1,8,2,10,-3,-5,-6,9,6,10,7,5,5,-8,-8,10,2,5,4,-5,8,-1,-2,4,4,-8,-1,-6,-6,9,-9,-7,-9,-4,-8,1,2,10,2,4,7,-1,-4,7,3,7,-6,-2,5,-9,8,2,-10,4,8,10,-9,-6,-7,-2,-10,4,-1,3,4,-2,-10,2,7,-1,-5,10,1,-4,8,1,-5,6,-1,4,8,10,10,-9,-10,-10,3,-7,-6,3,9,4,6,3,-8,5,-5,-6,-6,10,7,-1,9,-3,2,-1,-7,-6,4,2,-6,-1,-9,4,4,-3,3,9,3,9,7,6,-4,9,-2,1,10,-9,-9,-6,6,-3,-3,-2,-2,4,8,5,2,1,7,-2,-4,-5,1,-7,1,7,-10,-4,8,4,-8,10,-3,6,3,-6,-6,-1,4,-7,5,1,-2,10,3,-8,10,-2,10,-4,5,-9,3,-1,7,-2,-1,10,9,3,-1,-4,-10,-6,6,5,-10,-4,4,9,-3,-6,5,-8,-3,8,-2,6,1,-4,10,10,-4,2,-2,-1,-4,-1,-4,-3,8,2,-4,-3,8,1,7,-7,-8,10,10,6,10,-2,4,1,7,-3,-10,5,6,-6,-9,-3,-2,6,-4,-7,-10,9,4,-10,-1,-1,1,-1,-2,-9,9,-8,5,-2,-10,3,8,6,2,-3,8,6,-10,6,3,4,9,3,-8,5,4,8,2,5,9,-8,2,6,-10,-5,-10,-5,1,-5,2,8,1,-1,-1,6,-4,9,-8,-9,9,-1,3,2,-3,4,8,-3,-10,-2,1,-3,2,-1,6,9,4,-6,8,-10,6,8,7,-3,-8,-10,-2,-1,2,5,4,5,5,-2,1,4,7,1,5,-1,-8,-1,-3,-5,6,4,3,7,-3,1,-2,-1,-10,3,6,-10,6,-3,6,3,-7,4,-6,-9,2,3,8,-3,6,-6,3,-5,7,-7,7,7,-4,-5,1,-9,8,7,8,6,7,6,-6,-8,-10,-8,-4,10,-5,10,1,-9,5,-6,-7,7,-2,5,-4,3,-7,-9,-5,10,-4,-7,2,-5,-3,8,-3,3,7,-5,10,-3,8,-9,10,4,10,10,-9,-8,8,-2,10,8,3,8,-1,2,2,-4,-1,-8,-2,-2,5,-5,6,6,5,5,7,-3,2,-8,9,7,-2,2,5,-7,3,-5,-1,9,7,4,-5,10,2,-2,-10,10,7,-6,-5,-3,6,1,1,3,-2,-9,4,4,7,-7,-8,9,-9,6,-9,-4,8,-2,3,-8,4,2,9,4,-2,5,9,5,-8,-2,1,1,9,-10,-3,-7,-8,-5,-5,-2,-1,6,2,8,2,8,3,-5,-7,7,5,-4,-5,9,9,6,10,-10,5,2,-7,3,2,-4,-6,6,5,4,3,9,-5,-4,8,5,3,3,10,7,7,-2,2,-2,-9,6,-10,-6,9,7,-3,3,4,3,3,7,-3,2,-6,-4,-1,-9,-7,-5,4,-6,-8,2,-4,-5,8,6,2,9,-2,-5,5,-5,2,1,-4,2,7,-4,-10,9,-3,-9,4,-5,3,1,-7,-2,-10,2,1,8,9,-8,-10,-6,3,10,-7,4,-6,-8,3,9,-5,7,-6,-4,6,-3,-1,1,-6,9,-7,-3,-8,-5,3,6,4,5,-10,-6,-3,5,10,7,-9,9,-9,-9,5,10,8,9,-1,4,3,8,-9,-9,-8,-4,3,5,8,-3,-7,-3,10,9,-6,3,-2,-5,-1,-9,3,8,-9,-9,6,-9,4,-8,-6,4,-1,-1,-7,6,-3,8,8,-1,8,3,-4,5,-6,2,1,6,-4,-4,5,8,-5,-3,4,-2,-6,4,-7,7,5,7,-5,7,10,-10,-3,3,9,-3,-4,3,7,-1,8,10,-7,-9,-10,2,2,-4,-4,-5,7,-4,-2,-10,-8,-5,-6,10,-10,6,9,-9,-3,8,-2,-8,2,7,-1,-4,7,-5,-2,8,8,-3,3,-10,7,-4,2,9,6,-7,-4,-5,-8,-3,7,-6,5,-4,5,7,-1,-2,-4,6,-6,6,1,10,4,-2,5,8,1,-2,-5,8,-1,10,9,3,8,-7,1,-2,3,5,-4,-9,6,-9,10,8,8,-7,5,-4,9,6,1,6,2,1,6,-10,3,3,7,-7,3,-1,5,-3,-9,6,-7,-5,4,4,7,-4,3,6,-1,4,8,-2,3,7,6,-3,8,9,-3,3,7,2,5,2,4,9,5,5,9,-1,9,-6,-3,8,10,-10,9,8,2,9,10,-8,-1,3,8,5,-10,-2,-7,-1,-4,-5,2,6,-7,-10,2,10,-2,3,8,7,8,3,2,4,4,8,5,10,8,9,-9,-5,-3,-2,8,-9,1,-4,5,-10,7,4,3,-6,-5,10,3,8,-4,6,-2,-10,6,-9,-2,-9,8,-5,-7,-9,-3,8,-4,1,-7,-2,4,3,6,1,10,10,-3,-10,-3,3,-9,3,7,3,-3,-2,-7,-6,-6,2,9,7,-5,10,-5,-6,-6,-10,-5,7,-8,-4,4,9,-9,10,-10,-9,4,-5,-4,5,-9,3,8,1,-8,2,-9,4,9,-5,2,4,-5,7,9,9,7,-4,-1,2,2,-1,-4,-8,-10,-1,-8,8,-5,5,7,2,8,-8,10,10,3,-4,8,-9,6,-3,-7,10,-6,-4,8,6,1,-5,-3,5,-8,-4,-1,-7,2,-1,-8,9,-5,6,10,-7,5,3,9,-5,-7,3,1,4,7,2,-8,1,3,-5,7,-5,-6,-10,6,-1,-4,2,-2,9,-4,7,2,-5,5,-10,-2,5,-3,4,-10,-4,-7,10,-5,-1,1,-8,7,-8,3,-5,2,4,4,-7,-3,9,-9,1,1,10,-3,-3,-4,-3,10,4,9,-7,8,-7,7,2,6,-10,9,-9,2,3,4,5,-5,5,-10,4,8,-10,-7,3,-8,-2,-6,-9,2,6,-9,9,-1,7,9,-9,3,2,-2,7,9,-8,10,-3,9,-8,10,2,4,-3,1,9,-1,-5,-5,6,-2,1,2,-4,-3,9,2,7,9,8,-1,-3,8,-9,2,9,8,8,5,-10,6,2,-9,5,-8,-7,2,3,-9,4,-6,7,-4,3,-7,-8,10,-3,10,6,-3,-6,2,6,2,3,5,-1,5,8,6,-4,-7,-7,7,4,-8,-6,10,4,-1,9,6,-7,-5,-2,-3,9,-5,7,-10,3,-1,-8,2,2,-8,-1,2,-7,3,8,-8,-5,3], dtype = "uint32")#candidate|11848|(1280,)|const|uint32
call_11847 = relay.TupleGetItem(func_4480_call(relay.reshape(const_11848.astype('uint32'), [10, 8, 16]), relay.reshape(const_11848.astype('uint32'), [10, 8, 16]), ), 0)
call_11849 = relay.TupleGetItem(func_4483_call(relay.reshape(const_11848.astype('uint32'), [10, 8, 16]), relay.reshape(const_11848.astype('uint32'), [10, 8, 16]), ), 0)
func_11148_call = mod.get_global_var('func_11148')
func_11151_call = mutated_mod.get_global_var('func_11151')
call_11855 = relay.TupleGetItem(func_11148_call(relay.reshape(call_11838.astype('float32'), [6, 3, 8])), 0)
call_11856 = relay.TupleGetItem(func_11151_call(relay.reshape(call_11838.astype('float32'), [6, 3, 8])), 0)
output = relay.Tuple([call_11838,call_11847,const_11848,call_11855,])
output2 = relay.Tuple([call_11839,call_11849,const_11848,call_11856,])
func_11860 = relay.Function([], output)
mod['func_11860'] = func_11860
mod = relay.transform.InferType()(mod)
mutated_mod['func_11860'] = func_11860
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11860_call = mutated_mod.get_global_var('func_11860')
call_11861 = func_11860_call()
output = call_11861
func_11862 = relay.Function([], output)
mutated_mod['func_11862'] = func_11862
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11868 = relay.var("var_11868", dtype = "uint64", shape = (16, 11, 11))#candidate|11868|(16, 11, 11)|var|uint64
const_11869 = relay.const([[[-1,9,7,-9,1,1,2,4,-7,7,-8],[1,-7,4,4,8,-10,7,1,6,8,5],[-3,8,-7,-1,9,-2,-8,-8,8,-2,-5],[8,7,-5,1,6,10,-5,-1,1,-8,-8],[-3,1,-6,-2,1,4,-3,-4,-10,10,6],[-4,-2,9,-2,-8,-5,6,3,-10,-7,-6],[-5,7,-3,-3,4,8,-4,8,3,-1,-9],[2,7,8,-8,4,-5,7,10,8,9,2],[2,1,9,6,1,10,1,1,4,-5,8],[8,-3,-2,2,-6,-5,10,1,2,3,1],[1,5,7,6,-3,-3,-1,-9,-10,-5,-3]],[[9,-10,-7,2,-9,10,-10,-8,-4,3,7],[6,-6,10,3,8,-9,-2,3,4,1,-10],[5,-9,6,10,-7,9,5,7,-5,2,3],[-10,-2,-10,2,-3,-7,8,4,9,6,-5],[9,1,-6,8,8,10,6,-10,10,-5,-8],[10,-5,-5,7,4,-3,10,7,-3,-7,5],[-10,2,-2,9,-4,-2,-10,-9,-9,2,5],[1,1,-1,4,-4,2,-6,-4,4,6,4],[3,2,6,3,-8,-5,8,-1,-1,7,-10],[-10,10,10,-10,-9,-10,6,-4,9,-1,3],[10,2,-9,-9,-5,-1,10,10,-10,4,9]],[[7,-9,9,1,-9,-6,-4,-1,-3,-9,1],[10,1,10,1,7,5,2,-6,-6,4,6],[-8,-9,3,-7,-9,-6,6,-10,-5,5,-3],[-4,10,3,-3,-3,8,-3,-2,-7,-9,5],[-7,4,-2,-2,8,1,5,3,5,-2,-8],[5,-7,-2,5,4,10,4,7,-6,-1,4],[-3,5,-2,2,-1,-9,1,-7,-9,-8,8],[-3,-5,1,-8,-3,1,10,4,3,-8,6],[-8,-6,3,-5,4,-8,-9,-7,4,-7,-8],[10,8,1,-8,7,-9,2,-5,-5,-7,9],[1,-2,-6,2,7,-7,-5,-4,5,-10,2]],[[-8,-1,5,-5,-3,-10,3,-7,9,-7,10],[3,7,-3,4,-1,2,5,-9,2,9,8],[-10,-9,10,5,9,3,-8,5,6,4,7],[7,-2,-7,-3,-6,-1,-1,-2,10,-4,9],[3,-4,1,7,9,-3,5,3,4,-10,-4],[-5,-5,8,-2,-3,-1,4,-5,10,-4,-7],[3,-6,9,2,-7,10,6,3,-4,-2,3],[7,-8,-4,-1,3,10,1,-7,3,-3,-8],[-10,6,-9,-9,6,-2,4,-7,8,-9,1],[-10,-4,-2,7,-4,3,10,-8,-4,-6,9],[6,-7,5,-5,-5,-5,-9,5,-9,4,9]],[[-3,3,-1,8,1,5,-10,-5,7,9,10],[-2,-5,-4,-2,1,9,-7,-6,-10,10,-6],[-6,-5,-2,8,4,7,-9,-6,-3,10,-4],[-10,-3,7,6,6,-4,-6,5,8,-1,9],[-7,3,-4,10,2,-8,2,2,7,-1,-7],[9,10,3,4,3,9,-9,-1,-2,-1,-1],[6,-3,9,5,-3,-10,-2,4,7,7,-5],[10,7,2,4,3,5,4,1,2,6,7],[-6,-5,-10,10,1,3,4,8,-9,8,8],[-9,-5,-5,4,-10,6,-5,10,-6,-7,-10],[4,-9,-10,6,10,1,8,-8,-1,-3,6]],[[5,-5,-10,10,3,10,7,-10,-2,-10,-8],[8,-1,6,5,-1,-9,-1,-9,1,-7,4],[2,8,-6,4,9,2,2,3,10,-10,-2],[-10,-4,-3,-3,-4,2,-9,-4,-2,7,-4],[-2,6,3,-2,7,-6,-4,-1,-5,-2,-10],[-3,3,7,1,-7,-8,-4,-1,6,2,-8],[-10,-3,-5,-9,-5,-9,-10,-6,-10,4,8],[-1,-8,-6,10,5,6,-4,-3,7,-7,-6],[-3,-10,5,-10,-3,3,-7,-2,-4,6,6],[-10,5,9,-4,-1,-5,-9,-6,-7,-10,-2],[9,6,10,-5,4,-5,3,-10,-7,3,1]],[[-6,2,10,2,-3,-6,6,2,2,7,4],[-3,8,-5,-6,4,5,-3,-10,-7,-8,3],[-10,-7,3,-4,-3,-3,-9,-1,-7,6,3],[-9,6,7,10,10,-6,-4,9,10,-5,5],[1,10,5,2,-5,2,-6,5,-2,5,2],[-9,-7,4,-9,-7,-7,10,3,9,-10,1],[-1,-3,-1,-10,-8,-5,7,-9,8,-1,-5],[8,-1,-7,-9,1,7,4,-2,3,5,-7],[5,1,5,2,-2,-7,-9,-6,-5,8,-10],[-1,9,4,-10,-6,-8,2,-10,-3,-5,7],[-7,2,-9,5,5,4,8,7,9,-4,-4]],[[-2,3,9,8,-3,9,10,-8,-9,-10,8],[-1,7,2,-8,-10,-1,10,10,-3,4,8],[2,-8,10,4,-8,-7,-6,8,5,8,10],[5,-5,-3,-2,2,9,-5,-8,1,5,-10],[-6,6,-8,-7,-10,8,-3,-4,-6,-7,4],[5,10,-9,5,5,-10,5,3,6,-4,-9],[-7,-10,-9,7,-10,5,-2,4,-4,9,9],[-1,5,10,-4,-8,1,-6,-6,4,-7,5],[-5,-7,9,-4,1,5,-5,-9,3,1,-5],[6,10,-7,-1,6,-3,-9,-10,-3,2,-1],[10,-5,-5,-8,-1,-4,-4,-8,5,-3,9]],[[-3,6,-4,-3,-5,-2,7,-9,10,7,3],[-4,6,-6,-10,-2,-8,8,-9,6,3,8],[-5,-4,9,8,-1,-2,4,8,7,-8,10],[-4,6,-5,-7,-8,10,-9,3,10,2,1],[-3,1,-8,-2,4,7,7,-8,5,-9,7],[-5,-3,-4,-10,-10,-5,1,-1,-2,-3,2],[3,4,-5,-4,-1,5,-5,-9,-6,-7,2],[-6,3,8,9,5,10,-9,-4,-9,3,9],[5,-2,-8,3,7,5,-7,7,10,7,3],[7,2,-10,-2,-2,8,-9,1,8,-9,-9],[3,2,7,-5,7,6,10,4,-9,-10,-10]],[[-3,8,10,-2,4,4,1,7,-2,10,6],[7,3,-6,-1,1,-9,5,8,10,-5,10],[-10,3,-3,-1,4,-9,-4,-1,5,-10,3],[-6,5,5,-2,7,1,-3,7,-3,4,10],[-1,4,5,10,9,8,-4,5,7,-10,-6],[-5,1,-3,-4,-2,6,-10,-9,-10,8,2],[3,2,1,-10,-6,-7,-5,-9,-7,-3,-8],[3,-5,6,3,7,-7,-5,10,-3,-10,-1],[-3,3,5,3,9,1,-1,7,-4,7,5],[8,-9,2,-3,6,5,-8,-5,4,-8,-8],[-9,-2,-1,-6,5,4,7,3,8,8,9]],[[4,6,8,10,-5,-2,3,10,-2,3,6],[1,-10,9,2,3,-3,-1,-4,-8,-1,-8],[6,2,-4,5,5,-1,2,-2,-9,-10,5],[-3,4,10,2,8,7,-7,6,-10,7,-7],[-3,-5,5,5,7,-1,-9,-6,10,-8,-5],[7,-4,-4,2,10,-2,8,-10,-9,8,8],[10,8,-10,-6,-9,6,-4,4,2,1,-1],[-1,-9,8,10,-7,-3,-10,-1,-6,3,-6],[4,3,8,-2,-3,9,-5,9,6,6,3],[10,6,6,10,6,-4,2,5,10,-8,9],[-8,9,-6,-1,2,-3,-9,-8,3,-5,-5]],[[8,4,9,8,5,6,-8,-8,-1,2,7],[-5,10,-8,-6,5,-6,-3,-1,1,-7,-10],[1,-5,6,-8,-7,-9,2,6,-4,-3,2],[-3,9,8,5,2,-4,8,-2,-7,1,8],[5,3,-6,8,-4,-10,-7,10,6,7,7],[-4,-2,-10,6,8,3,-9,-10,7,-9,1],[-7,7,-3,5,-10,10,7,8,-7,5,10],[9,2,-7,4,7,9,5,10,3,-9,5],[3,9,10,10,-9,-3,8,2,-6,-5,6],[-6,-2,-8,3,6,7,-6,1,-8,-6,9],[-10,5,-1,10,2,4,8,4,-5,5,-6]],[[-10,8,5,-8,-7,-9,-4,-5,-10,4,-9],[-7,-2,-3,-6,-10,6,-4,-10,-7,-3,-1],[7,-3,1,2,-8,4,1,8,6,6,4],[3,4,-2,4,-6,-9,9,-4,1,8,-3],[5,-10,7,-3,6,4,-3,9,-10,-2,1],[1,2,9,-9,1,-4,-3,5,-10,1,2],[-2,5,3,-3,9,-4,-5,-1,5,-8,-2],[-8,8,-9,5,5,2,3,7,4,1,-9],[8,3,-3,-2,4,4,-1,-1,6,-6,-5],[-6,7,10,-5,-6,-8,-10,-10,6,4,3],[4,-4,9,-1,-10,-9,-6,-7,-10,7,2]],[[1,-10,5,8,1,-4,-2,-8,-9,9,-7],[1,-7,-7,-10,-10,8,-9,-5,-10,9,-5],[7,4,-2,-6,-8,-5,9,-9,-8,10,-10],[10,6,-4,-6,-5,-2,10,10,5,4,-2],[9,-2,10,-4,2,6,5,-10,8,-3,4],[6,-9,1,10,-6,3,-9,-9,1,-6,9],[8,-2,7,-7,-7,3,6,1,7,7,7],[-1,9,-8,-1,-8,-8,-5,6,-6,-7,-10],[4,8,-1,1,1,4,8,-6,-1,-7,-5],[-6,6,-3,-4,7,6,-1,-2,-3,-8,4],[-9,4,7,10,6,4,-1,-9,1,5,1]],[[4,-10,-6,-4,-2,-5,4,10,5,-4,-1],[5,10,-6,-3,10,-10,-4,7,-9,2,7],[-5,4,6,6,-10,7,-8,4,-8,1,-5],[6,-5,-4,10,-5,-10,-4,6,4,-2,-8],[2,6,-10,-9,1,8,-2,-7,4,7,10],[10,3,3,-3,-8,7,-6,-10,-2,4,-9],[10,9,9,-8,9,-6,-2,-8,2,-9,-9],[-3,-3,1,5,-2,-7,1,-10,4,8,2],[9,-2,-7,1,7,-6,-9,8,7,10,-2],[10,1,1,-4,-9,4,-5,4,6,9,4],[9,3,1,-9,-6,6,5,-7,2,-1,7]],[[7,3,5,-5,2,-8,-7,-10,-3,-9,4],[-6,-10,-6,7,10,-5,5,-5,-6,4,3],[4,-10,-10,5,1,-4,2,-6,1,10,7],[5,-8,8,-8,3,-4,8,2,-7,-7,-7],[-1,7,-7,10,-4,7,-8,4,-7,8,10],[7,-1,8,-5,6,-6,-8,2,8,-4,10],[9,10,2,7,-5,-7,-9,4,-10,2,5],[-10,9,-5,-10,-5,-2,4,2,-6,-8,-5],[8,2,2,-3,-5,6,-8,5,7,-8,2],[10,5,-2,1,-7,7,-6,-5,-5,-9,-2],[-1,6,6,6,-7,-5,6,-3,-5,5,-2]]], dtype = "uint64")#candidate|11869|(16, 11, 11)|const|uint64
bop_11870 = relay.less_equal(var_11868.astype('bool'), relay.reshape(const_11869.astype('bool'), relay.shape_of(var_11868))) # shape=(16, 11, 11)
output = bop_11870
output2 = bop_11870
func_11876 = relay.Function([var_11868,], output)
mod['func_11876'] = func_11876
mod = relay.transform.InferType()(mod)
mutated_mod['func_11876'] = func_11876
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11877 = relay.var("var_11877", dtype = "uint64", shape = (16, 11, 11))#candidate|11877|(16, 11, 11)|var|uint64
func_11876_call = mutated_mod.get_global_var('func_11876')
call_11878 = func_11876_call(var_11877)
output = call_11878
func_11879 = relay.Function([var_11877], output)
mutated_mod['func_11879'] = func_11879
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11822_call = mod.get_global_var('func_11822')
func_11823_call = mutated_mod.get_global_var('func_11823')
call_11910 = func_11822_call()
call_11911 = func_11822_call()
output = call_11910
output2 = call_11911
func_11921 = relay.Function([], output)
mod['func_11921'] = func_11921
mod = relay.transform.InferType()(mod)
mutated_mod['func_11921'] = func_11921
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11921_call = mutated_mod.get_global_var('func_11921')
call_11922 = func_11921_call()
output = call_11922
func_11923 = relay.Function([], output)
mutated_mod['func_11923'] = func_11923
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11135_call = mod.get_global_var('func_11135')
func_11137_call = mutated_mod.get_global_var('func_11137')
call_11954 = relay.TupleGetItem(func_11135_call(), 0)
call_11955 = relay.TupleGetItem(func_11137_call(), 0)
func_5376_call = mod.get_global_var('func_5376')
func_5378_call = mutated_mod.get_global_var('func_5378')
var_11959 = relay.var("var_11959", dtype = "float64", shape = (60,))#candidate|11959|(60,)|var|float64
call_11958 = relay.TupleGetItem(func_5376_call(relay.reshape(var_11959.astype('float64'), [5, 1, 12])), 1)
call_11960 = relay.TupleGetItem(func_5378_call(relay.reshape(var_11959.astype('float64'), [5, 1, 12])), 1)
uop_11971 = relay.rsqrt(call_11958.astype('float32')) # shape=(5, 1, 12)
uop_11973 = relay.rsqrt(call_11960.astype('float32')) # shape=(5, 1, 12)
uop_11974 = relay.tan(uop_11971.astype('float64')) # shape=(5, 1, 12)
uop_11976 = relay.tan(uop_11973.astype('float64')) # shape=(5, 1, 12)
output = relay.Tuple([call_11954,var_11959,uop_11974,])
output2 = relay.Tuple([call_11955,var_11959,uop_11976,])
func_11979 = relay.Function([var_11959,], output)
mod['func_11979'] = func_11979
mod = relay.transform.InferType()(mod)
mutated_mod['func_11979'] = func_11979
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11980 = relay.var("var_11980", dtype = "float64", shape = (60,))#candidate|11980|(60,)|var|float64
func_11979_call = mutated_mod.get_global_var('func_11979')
call_11981 = func_11979_call(var_11980)
output = call_11981
func_11982 = relay.Function([var_11980], output)
mutated_mod['func_11982'] = func_11982
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10958_call = mod.get_global_var('func_10958')
func_10960_call = mutated_mod.get_global_var('func_10960')
call_12019 = relay.TupleGetItem(func_10958_call(), 0)
call_12020 = relay.TupleGetItem(func_10960_call(), 0)
output = relay.Tuple([call_12019,])
output2 = relay.Tuple([call_12020,])
func_12053 = relay.Function([], output)
mod['func_12053'] = func_12053
mod = relay.transform.InferType()(mod)
mutated_mod['func_12053'] = func_12053
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12053_call = mutated_mod.get_global_var('func_12053')
call_12054 = func_12053_call()
output = call_12054
func_12055 = relay.Function([], output)
mutated_mod['func_12055'] = func_12055
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10858_call = mod.get_global_var('func_10858')
func_10859_call = mutated_mod.get_global_var('func_10859')
call_12073 = relay.TupleGetItem(func_10858_call(), 0)
call_12074 = relay.TupleGetItem(func_10859_call(), 0)
const_12094 = relay.const([[[7.498018,2.307077,0.916886,5.719468,-4.971031,4.128180,0.883355,4.044059],[-4.271477,-4.744713,-1.531206,6.066666,1.443318,-4.789917,-2.013117,4.117822],[3.951607,1.715622,-0.177454,1.344298,-8.456822,-0.791629,-8.040086,2.061656]],[[0.703460,-3.443430,1.369488,2.861866,-9.028508,-1.082808,3.031439,-2.642890],[-6.807316,7.763209,1.227061,9.824399,5.101085,6.315504,-8.765131,4.907941],[-5.609658,4.425808,2.884197,8.786912,-4.369849,-4.343857,6.052302,-7.743985]],[[4.767740,-1.268551,-9.199402,-1.696557,4.680344,7.829198,8.985616,2.933298],[-1.558609,2.844911,-0.939456,-5.789901,-3.714921,-3.383720,6.478208,0.660181],[9.082957,7.309744,-0.241224,8.027996,7.237647,0.881916,9.687977,6.691832]],[[5.243822,-4.841617,8.359789,-4.602339,0.677069,9.924903,1.809993,0.360045],[0.824642,0.204097,1.119006,3.988460,6.023201,5.825732,-7.720441,8.137139],[4.351126,8.353502,-6.756684,1.256667,-5.077560,-3.181728,9.051531,-0.025917]],[[4.457854,-7.171201,3.188188,0.961370,-9.549838,3.917879,8.335589,-7.600237],[-6.929104,0.396137,6.368498,7.028970,-8.689347,-7.261625,3.788473,-2.798040],[-8.074992,9.773666,-0.829210,-3.598553,5.069706,2.805758,-5.561489,-3.230642]],[[0.902173,3.920931,-6.969974,2.727792,4.196578,-7.978786,-2.678202,8.660501],[-7.801527,-2.488965,6.460897,9.593881,6.811384,-7.683686,8.789201,-5.090667],[-8.429012,9.508823,-3.541039,7.147083,-7.049846,1.047182,-1.451282,2.780083]]], dtype = "float32")#candidate|12094|(6, 3, 8)|const|float32
bop_12095 = relay.mod(call_12073.astype('float64'), relay.reshape(const_12094.astype('float64'), relay.shape_of(call_12073))) # shape=(6, 3, 8)
bop_12098 = relay.mod(call_12074.astype('float64'), relay.reshape(const_12094.astype('float64'), relay.shape_of(call_12074))) # shape=(6, 3, 8)
func_11876_call = mod.get_global_var('func_11876')
func_11879_call = mutated_mod.get_global_var('func_11879')
var_12102 = relay.var("var_12102", dtype = "uint64", shape = (1936,))#candidate|12102|(1936,)|var|uint64
call_12101 = func_11876_call(relay.reshape(var_12102.astype('uint64'), [16, 11, 11]))
call_12103 = func_11876_call(relay.reshape(var_12102.astype('uint64'), [16, 11, 11]))
output = relay.Tuple([bop_12095,call_12101,var_12102,])
output2 = relay.Tuple([bop_12098,call_12103,var_12102,])
func_12111 = relay.Function([var_12102,], output)
mod['func_12111'] = func_12111
mod = relay.transform.InferType()(mod)
var_12112 = relay.var("var_12112", dtype = "uint64", shape = (1936,))#candidate|12112|(1936,)|var|uint64
output = func_12111(var_12112)
func_12113 = relay.Function([var_12112], output)
mutated_mod['func_12113'] = func_12113
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11135_call = mod.get_global_var('func_11135')
func_11137_call = mutated_mod.get_global_var('func_11137')
call_12180 = relay.TupleGetItem(func_11135_call(), 0)
call_12181 = relay.TupleGetItem(func_11137_call(), 0)
output = call_12180
output2 = call_12181
func_12182 = relay.Function([], output)
mod['func_12182'] = func_12182
mod = relay.transform.InferType()(mod)
mutated_mod['func_12182'] = func_12182
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12182_call = mutated_mod.get_global_var('func_12182')
call_12183 = func_12182_call()
output = call_12183
func_12184 = relay.Function([], output)
mutated_mod['func_12184'] = func_12184
mutated_mod = relay.transform.InferType()(mutated_mod)
const_12247 = relay.const([[[4.801549,9.366263,1.328283,8.033177,3.165534,7.367489,3.645692,4.216967,-9.741517,-2.680883,-1.386982,-7.007009,9.950859,8.391682,-2.825339,7.464491],[9.895878,-8.819763,-7.848143,1.104424,7.261240,4.462843,-6.886075,-3.164141,-9.943095,7.169571,-0.099939,4.769895,8.157244,3.230482,0.042207,6.082869],[-8.486081,9.275323,7.008500,-0.134709,2.806876,-5.367707,-2.480548,-6.022338,2.307318,-7.711699,7.692596,6.376231,-3.781523,4.201841,5.493663,3.745156],[-3.636966,3.831421,9.601834,-8.823277,0.114219,-4.293212,5.704377,-4.546565,2.707203,-2.308644,-7.506726,5.112445,8.931250,-1.719384,8.296267,-2.284592]],[[-6.486947,7.906297,8.064928,-1.276449,-0.747761,3.311225,-7.452188,-4.593478,-9.201942,-8.201586,-1.477556,1.356014,-9.603193,9.160910,6.543110,0.380136],[7.612412,-0.786631,-7.626645,7.385085,0.693293,2.034491,4.148206,6.949406,-8.997471,-5.636408,7.279753,-0.881158,-9.806093,1.655579,3.859741,7.789110],[-0.921713,-7.180242,0.572930,8.191245,-8.963996,-3.040790,3.106515,0.999028,6.640992,-4.369916,8.746670,6.644228,-7.706637,-4.293669,9.996460,-7.533877],[7.072379,8.870763,3.879992,8.300171,7.156299,1.144618,-9.841236,-5.153532,-6.555875,-6.522295,-5.577170,4.080221,8.812388,-9.933963,-8.276744,-6.350987]],[[4.229191,-1.471841,-3.019322,-6.323605,3.817244,-1.045999,-3.569825,2.842941,-1.632943,7.271747,1.484637,6.058109,-7.819415,-1.693128,3.234794,-9.771238],[-8.854111,3.936026,-5.849272,-5.714318,8.021021,0.793027,7.790656,-1.929167,7.331467,-1.122967,9.321888,3.470662,-4.088382,-1.174308,-9.967218,-2.622090],[0.089202,4.367462,-6.150568,1.787801,7.683470,9.814253,6.940040,-6.663166,8.907739,-4.092178,-4.936818,-1.144658,0.693962,-1.990700,6.487250,-5.544001],[-9.470479,5.084582,5.912662,-1.659805,9.087845,1.472592,-2.305939,0.223878,0.310751,-3.923265,8.878813,-5.318588,1.670152,-2.725770,5.211621,3.209254]],[[1.880478,-9.348274,9.380828,1.209925,7.280552,2.060946,-4.408755,2.333668,-3.269233,4.732835,0.081510,-2.802238,6.738921,6.121197,5.755340,-6.215675],[4.470572,4.729415,-6.326099,-8.904889,-6.468456,2.973027,-9.538466,-8.498527,-0.817169,2.132172,1.774374,-4.342722,-4.898052,6.537057,-7.720136,-3.063439],[8.404375,-1.679925,-1.329398,1.905959,-8.619957,1.026696,8.561365,-7.524317,-3.787208,8.280289,4.037995,-2.016343,-5.661469,-9.750056,8.492127,-1.831897],[-3.121084,-8.732632,0.328582,3.488657,-3.519454,4.091860,-8.304587,0.928967,9.521357,-5.009888,-5.828064,-5.903348,0.120571,6.893658,-7.262141,7.008567]],[[-2.186212,0.210319,4.789302,-4.030392,-8.174990,6.347766,0.239805,4.243206,-6.404343,8.531290,-1.825180,4.561585,-7.370134,-5.602657,-1.999724,-7.203687],[-0.165358,6.976779,-0.269013,9.376276,9.379334,-0.792266,-1.356258,9.994124,4.551163,8.179444,-9.140905,9.225768,-4.467378,6.288377,2.165700,5.843256],[-8.914211,5.606240,-4.386381,7.281967,-1.430055,-6.902751,8.525637,8.490957,2.061925,-1.753419,9.523616,-4.219173,6.156021,-8.962792,8.546282,-6.717612],[-6.118159,5.882146,8.411934,-7.776401,-7.547586,-0.612471,-9.893318,-7.541806,-0.663577,-6.699213,1.224614,1.589431,-9.885568,8.228632,-2.451725,3.705230]],[[-1.868635,2.814140,7.272667,7.895387,9.213528,9.227865,9.946838,5.401131,-9.263081,0.986008,-2.954736,3.282368,-9.184949,8.670892,-0.008860,-7.582506],[3.694523,-4.569018,1.632715,-9.330923,9.965000,9.121740,0.226976,5.840203,-0.785625,0.117482,2.906138,7.064799,-8.459239,-4.541813,-1.637519,6.576834],[2.133340,-0.487534,4.956421,9.979448,8.119715,6.972052,8.365745,-8.649466,1.353660,-1.126333,-0.387967,-1.890178,-0.855554,-0.210681,5.695321,-9.582776],[2.523066,-2.240380,8.152309,-3.222524,-8.956842,-2.938071,-1.071075,7.317055,-2.501346,-1.070713,7.861019,8.252885,-8.115182,-5.064921,3.353325,-6.803491]],[[-3.951954,3.350436,-1.015318,-4.148885,1.897067,-2.808135,7.426482,5.458200,2.538200,5.606479,9.102223,5.745886,-2.503381,5.573910,-8.195354,-2.193425],[-3.825493,0.448185,7.897681,0.482176,-4.700317,-3.396731,0.554973,4.035153,-3.162080,-4.509088,-7.870534,4.017787,1.872826,-2.586393,-0.210877,-9.262713],[8.907390,9.387107,9.819480,3.074243,-8.776125,-5.497500,-5.590425,-3.980158,-5.756584,-1.759405,-7.610515,0.683653,-4.082552,-5.738053,-8.002604,-3.785227],[-2.723964,6.592837,-9.632940,2.708763,-1.323949,1.672991,0.229915,7.484794,-0.307785,-4.947134,6.189011,-0.492106,-9.181605,-1.182809,-5.045119,-3.592357]],[[-0.307607,-9.997589,-7.130287,7.436126,3.310620,0.625632,7.805993,-1.655792,-6.216768,-0.717669,-8.267447,-8.259121,1.475449,-1.667197,0.502443,-1.918342],[-2.344814,-8.134731,-1.634747,8.680085,-1.281053,8.066774,-6.813831,6.408934,-9.114834,-0.560819,8.752602,5.908436,-2.334865,-9.279645,-4.776635,4.641033],[9.124439,-4.886239,-1.503208,-9.019793,-2.644490,-8.060209,1.043508,-3.327319,9.114342,1.058640,7.232645,-7.992453,-2.559535,5.135992,7.318863,7.670699],[-5.517515,9.427529,3.469732,-4.088942,2.494588,-2.244513,-4.131095,-3.478597,-8.571281,-7.421428,3.118754,0.737693,6.773306,-4.138271,8.924809,-8.880825]]], dtype = "float32")#candidate|12247|(8, 4, 16)|const|float32
const_12248 = relay.const([[[-9.267394,5.259866,1.222985,2.020212,3.355993,-6.629401,-6.484825,3.765024,-7.990046,9.125317,-0.777623,-8.243685,9.225810,-5.076244,5.658089,3.391266],[2.106605,-9.824920,9.505591,-7.070317,-5.956926,2.028440,2.513641,9.360072,6.900482,1.571349,-1.134811,-2.881735,-6.942500,9.027742,6.508815,7.047738],[6.928037,0.614893,-4.180286,6.071729,-3.961292,8.356764,-4.515744,4.299001,5.940587,2.362121,-5.034455,6.157280,9.937831,-6.534736,-9.831801,8.325412],[-8.188183,-4.538100,-2.070459,0.014335,-7.457055,7.271944,4.472561,-7.291718,1.600178,-6.734835,-5.841228,-0.813985,-2.125591,-0.088353,9.420844,-0.455328]],[[-7.928068,-2.110498,8.500141,4.087903,-8.083556,-6.893208,2.758019,-0.532699,-6.390415,-7.642432,-5.429302,-0.344447,5.759817,4.900054,-1.250116,-7.783672],[4.882516,-6.503095,-2.747908,-5.310603,-8.919952,1.324580,-1.249092,-3.744250,-4.045963,4.142064,-1.687255,-9.218031,-5.258343,-8.395148,1.720253,6.798147],[9.270976,1.589192,9.013621,-5.844907,-9.347623,7.065870,0.101090,-6.703133,-7.311638,-8.107406,8.369055,-7.797082,1.668823,3.965825,-3.974728,5.705556],[-6.222785,1.318727,-8.748207,1.209086,5.610278,7.025798,-8.030029,2.915638,8.714798,9.037597,-9.043203,-2.254120,-8.228384,-6.609428,-6.883019,-6.071907]],[[4.775476,-1.513749,8.847310,-2.757666,-9.825134,9.552431,0.576669,9.413890,4.872705,-8.049098,3.256033,2.411142,-6.989332,-8.216014,9.773977,0.502622],[-7.935163,-7.601782,6.167454,5.363028,9.693561,-1.461402,6.154018,3.246226,4.297656,-9.709550,9.252033,-1.469607,2.691093,-4.914834,-2.110863,7.264377],[-2.823001,-6.865924,0.710882,6.978084,6.640223,5.085817,-6.194293,4.187154,-2.979643,-0.515420,9.038779,1.885101,3.888328,3.104543,5.319238,-8.221961],[-6.112074,1.566281,-7.296997,-9.493756,1.189035,-9.910209,1.626870,8.756264,3.422164,3.985430,-2.062696,-5.209368,-0.464715,4.690631,-9.897177,5.936029]],[[9.833138,-6.283468,-5.186745,4.112407,3.214903,7.556041,3.856765,-7.801078,-8.716014,2.971798,3.046300,-4.812825,6.220651,3.082832,6.430108,-1.793992],[-4.180269,5.287812,-8.366494,-2.129277,-6.626092,-5.120207,-5.946173,5.458705,-9.804174,3.557530,-0.037314,6.735417,-5.444907,2.795288,-5.276356,-3.315990],[3.152311,2.799671,-2.224629,2.948506,1.516169,-8.591526,-9.715160,-9.694311,-2.840562,-2.556285,2.415717,-9.246360,0.107699,1.444147,4.921948,-7.738696],[4.737083,-1.416500,8.371564,9.606581,0.140038,-3.844608,4.767046,-0.722140,-2.667407,-0.129325,7.326474,1.042285,-9.785357,-3.057725,-1.203722,-5.518368]],[[-6.295256,4.610077,-3.027762,-8.747404,-3.280664,-7.121781,6.800425,0.095545,7.405543,1.939011,-0.586806,6.618770,2.347185,4.308321,-5.786935,-6.400524],[-4.294104,-5.078975,-0.445329,7.624510,3.972135,-9.117634,-6.028123,7.219212,8.131368,-4.938692,2.383295,-8.353334,9.182153,1.153218,-5.470340,-7.356126],[2.262403,6.884548,5.047580,3.542778,-5.486894,8.409924,4.049072,3.415494,6.823624,2.312526,0.100588,-4.027477,6.927624,2.551416,8.012813,-5.883591],[-4.202785,-6.341150,-0.557195,6.104639,2.395588,-4.114968,2.299606,7.011048,2.276144,3.618768,-8.717150,-6.938186,7.404782,6.411602,4.693862,-7.989936]],[[-7.960896,-0.662762,-7.018207,2.835137,-6.091214,-9.739942,2.351008,2.774165,-5.172338,-0.858935,-4.502249,-2.526995,-1.729554,-3.216309,-9.673797,3.249078],[5.398978,4.632148,5.162851,0.734824,-4.623182,3.625335,1.647044,2.923504,-9.333633,-4.233736,-6.916332,-2.229761,0.573895,-4.137547,5.974284,-4.783233],[3.024272,-7.342472,-8.592386,5.548945,-8.222797,7.365578,3.245486,9.891575,-1.465353,-7.318280,5.551004,2.863089,4.384803,-7.231789,1.615129,7.258546],[-4.401949,-5.263569,5.479082,-8.755998,-7.394213,3.190324,-8.237801,8.118415,-2.305178,5.424989,1.548586,-2.671060,-3.579035,5.856036,4.094150,5.450381]],[[8.737206,3.415149,6.065254,-3.282478,9.373876,6.971205,-1.431095,-0.758151,-1.541008,-0.767721,-8.770890,-3.765610,0.239285,-7.469732,-1.415288,7.569351],[3.602072,-9.659453,-7.885633,4.390544,-8.516475,3.129750,5.317627,9.194754,7.768254,4.609602,6.607320,-1.944972,-0.238441,0.656577,-5.499856,-3.818833],[9.091115,-2.138319,8.975154,9.890266,-2.162889,-0.176686,-7.433145,7.893557,-2.007775,0.695240,-3.387072,-5.206032,1.287658,6.989103,-7.874631,0.372902],[-1.204489,5.096641,5.090268,2.947927,7.303676,-6.346124,-6.022188,1.778086,-6.884650,-6.598104,1.958431,4.721370,-3.886931,-2.064812,-3.292367,2.553016]],[[-9.467572,-1.566742,5.759079,5.707556,-7.603937,0.171379,-9.567769,6.890661,8.389101,4.000535,-8.414262,9.466682,-7.213170,-3.681077,-4.439947,0.160376],[-8.998836,-3.407983,-6.642177,1.413734,9.636653,1.734382,9.309180,5.715298,-2.277058,6.018845,1.634884,3.201490,5.935058,7.003071,8.243868,-2.130602],[-5.409283,-5.067140,-9.703477,4.475421,-7.125385,8.013912,9.136070,-0.881800,-2.318745,1.417780,0.910868,8.386471,-1.942744,-9.078593,7.423174,6.010617],[4.385012,-7.152697,3.771795,-0.858493,-9.142665,-6.109153,-8.609911,5.861777,-8.135810,-6.830269,-4.900767,-6.435416,-7.101713,-0.390952,4.374810,-0.554279]]], dtype = "float32")#candidate|12248|(8, 4, 16)|const|float32
bop_12249 = relay.not_equal(const_12247.astype('bool'), relay.reshape(const_12248.astype('bool'), relay.shape_of(const_12247))) # shape=(8, 4, 16)
func_11921_call = mod.get_global_var('func_11921')
func_11923_call = mutated_mod.get_global_var('func_11923')
call_12252 = func_11921_call()
call_12253 = func_11921_call()
output = relay.Tuple([bop_12249,call_12252,])
output2 = relay.Tuple([bop_12249,call_12253,])
func_12265 = relay.Function([], output)
mod['func_12265'] = func_12265
mod = relay.transform.InferType()(mod)
output = func_12265()
func_12266 = relay.Function([], output)
mutated_mod['func_12266'] = func_12266
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_12315 = relay.TupleGetItem(func_12265_call(), 0)
call_12316 = relay.TupleGetItem(func_12266_call(), 0)
output = call_12315
output2 = call_12316
func_12321 = relay.Function([], output)
mod['func_12321'] = func_12321
mod = relay.transform.InferType()(mod)
output = func_12321()
func_12322 = relay.Function([], output)
mutated_mod['func_12322'] = func_12322
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10932_call = mod.get_global_var('func_10932')
func_10934_call = mutated_mod.get_global_var('func_10934')
call_12333 = relay.TupleGetItem(func_10932_call(), 0)
call_12334 = relay.TupleGetItem(func_10934_call(), 0)
func_10351_call = mod.get_global_var('func_10351')
func_10355_call = mutated_mod.get_global_var('func_10355')
var_12351 = relay.var("var_12351", dtype = "uint8", shape = (12, 130))#candidate|12351|(12, 130)|var|uint8
const_12352 = relay.const([3.187788,-6.238578,-4.786404,-2.891387,4.716798,9.819351,-7.599950,4.505176,-0.511088,1.345751,9.432174,-8.173554,0.354353,-7.502983,-3.945799,-3.171958,-1.019964,0.074525,2.629695,-8.368775,-9.314961,-1.454642,-7.237665,5.910527,1.146501,6.318646,5.383463,-5.042563,7.485798,3.790917,6.975322,5.437966,6.409048,-9.676819,-3.252372,8.905160,6.055221,1.958066,6.060455,-4.442916,2.892930,5.489469,5.702019,-1.622955,-7.319169,1.499075,8.182129,-2.300615,7.770389,0.706832,5.503959,8.305377,-6.381422,-0.377396,8.358545,-7.951244,-6.263388,1.172547,-8.121447,-5.978917,-0.625678,-9.593380,-6.130570,-1.680020,6.135342,6.072205,-6.571754,8.230421,0.114941,-0.435284,-3.624953,-8.765730,-8.205926,3.859268,0.572516,-6.222609,7.047141,8.160934,0.637023,2.512327,-9.198592,3.703151,5.258803,2.606429,-7.659261,-0.934936,0.641753,4.741607,-7.172749,-3.149878,0.910260,1.552735,9.472828,-9.143146,-7.047387,4.278200,3.226568,4.969643,-4.629641,8.060992,-7.104278,5.093587,-3.295103,-7.729126,1.813713,-8.251557,1.766585,0.827280,5.534099,4.377614,-3.170041,-7.773708,8.383957,-4.253482,-6.560788,-7.343014,5.087386,-0.145509,-9.370853,7.486153,3.762512,-4.673450,5.492500,4.589337,-7.399747,0.641590,-2.513967,-1.486608,8.819103,4.662083,-6.956611,6.537315,5.959155,-2.723044,-4.554330,-2.534513,6.286730,-0.564981,-8.749771,6.544235], dtype = "float64")#candidate|12352|(140,)|const|float64
call_12350 = relay.TupleGetItem(func_10351_call(relay.reshape(var_12351.astype('uint8'), [15, 8, 13]), relay.reshape(var_12351.astype('uint8'), [15, 8, 13]), relay.reshape(const_12352.astype('float64'), [140,]), ), 3)
call_12353 = relay.TupleGetItem(func_10355_call(relay.reshape(var_12351.astype('uint8'), [15, 8, 13]), relay.reshape(var_12351.astype('uint8'), [15, 8, 13]), relay.reshape(const_12352.astype('float64'), [140,]), ), 3)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_12358 = relay.TupleGetItem(func_12265_call(), 1)
call_12359 = relay.TupleGetItem(func_12266_call(), 1)
output = relay.Tuple([call_12333,call_12350,var_12351,const_12352,call_12358,])
output2 = relay.Tuple([call_12334,call_12353,var_12351,const_12352,call_12359,])
func_12368 = relay.Function([var_12351,], output)
mod['func_12368'] = func_12368
mod = relay.transform.InferType()(mod)
var_12369 = relay.var("var_12369", dtype = "uint8", shape = (12, 130))#candidate|12369|(12, 130)|var|uint8
output = func_12368(var_12369)
func_12370 = relay.Function([var_12369], output)
mutated_mod['func_12370'] = func_12370
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_12427 = relay.TupleGetItem(func_10895_call(), 0)
call_12428 = relay.TupleGetItem(func_10897_call(), 0)
func_11860_call = mod.get_global_var('func_11860')
func_11862_call = mutated_mod.get_global_var('func_11862')
call_12451 = relay.TupleGetItem(func_11860_call(), 1)
call_12452 = relay.TupleGetItem(func_11862_call(), 1)
output = relay.Tuple([call_12427,call_12451,])
output2 = relay.Tuple([call_12428,call_12452,])
func_12457 = relay.Function([], output)
mod['func_12457'] = func_12457
mod = relay.transform.InferType()(mod)
output = func_12457()
func_12458 = relay.Function([], output)
mutated_mod['func_12458'] = func_12458
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11860_call = mod.get_global_var('func_11860')
func_11862_call = mutated_mod.get_global_var('func_11862')
call_12465 = relay.TupleGetItem(func_11860_call(), 2)
call_12466 = relay.TupleGetItem(func_11862_call(), 2)
output = relay.Tuple([call_12465,])
output2 = relay.Tuple([call_12466,])
func_12467 = relay.Function([], output)
mod['func_12467'] = func_12467
mod = relay.transform.InferType()(mod)
output = func_12467()
func_12468 = relay.Function([], output)
mutated_mod['func_12468'] = func_12468
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11921_call = mod.get_global_var('func_11921')
func_11923_call = mutated_mod.get_global_var('func_11923')
call_12471 = func_11921_call()
call_12472 = func_11921_call()
func_7306_call = mod.get_global_var('func_7306')
func_7310_call = mutated_mod.get_global_var('func_7310')
const_12491 = relay.const([[-3,-4,-8,3,-2,-2,3,4,-1,7,-7,8,4,-3,-5,-8,5,1,4,7,-4,-8,-5,9,3,-5,7,-10,-1,-1,-9,7,1,-9,3,-3,-7,3,3,-9,8,-9,-5,-5,9,7,4,-5,-1,2,-2,-2,-3,-10,-7,-3,3,9,10,-6,-1,-8,-6,-2,9,2,8,-10,-9,9,1,2,-5,-10,6,-3,-9,-3,-6,-4,10,6,-2,-1,9,8,2,-2,10,10,-9,4,-6,3,-6,6,-2,6,-9,6,6,7,-3,-5,-10,10,9,-7,3,-6,-8,-4,5,6,-6,-3,8],[10,-7,-6,-1,-8,2,-3,7,5,2,-8,9,2,-8,-10,2,-8,7,8,4,-6,5,-3,-1,-10,8,-1,-1,6,5,-4,6,-8,9,8,-3,-10,-8,-1,-1,-3,8,-8,4,-6,10,5,-3,-10,10,4,4,2,-6,10,-5,-8,4,9,2,6,5,-7,-6,-9,-4,-10,8,2,-6,-3,3,3,9,-7,9,-10,-7,-1,5,9,-4,10,2,7,-4,10,-4,-5,9,4,7,10,-3,7,2,9,-7,-9,-1,-9,-9,-2,-6,-3,-1,10,-3,2,-3,3,-8,-5,-3,6,-3,9],[-7,-2,-10,-7,4,-10,10,-2,-2,-2,9,-5,-2,-6,-9,-4,8,9,-2,2,8,2,4,2,-9,6,10,8,-4,6,1,-10,-7,-8,7,-5,-2,2,-1,1,9,-5,9,-2,10,-6,9,10,5,6,-10,5,-10,-7,1,8,-3,10,8,7,-1,9,-1,7,8,7,4,9,9,4,2,-2,7,-1,6,-5,2,-9,6,6,1,2,-5,1,7,-6,7,5,1,-1,3,4,-3,-8,-10,2,8,-9,7,9,-5,-2,-4,-8,-3,2,8,-3,2,9,6,5,5,10,-4,-5,-5]], dtype = "int32")#candidate|12491|(3, 117)|const|int32
var_12492 = relay.var("var_12492", dtype = "bool", shape = (1584,))#candidate|12492|(1584,)|var|bool
call_12490 = relay.TupleGetItem(func_7306_call(relay.reshape(const_12491.astype('int32'), [9, 3, 13]), relay.reshape(const_12491.astype('int32'), [9, 3, 13]), relay.reshape(var_12492.astype('bool'), [1584,]), ), 0)
call_12493 = relay.TupleGetItem(func_7310_call(relay.reshape(const_12491.astype('int32'), [9, 3, 13]), relay.reshape(const_12491.astype('int32'), [9, 3, 13]), relay.reshape(var_12492.astype('bool'), [1584,]), ), 0)
bop_12500 = relay.maximum(const_12491.astype('int8'), relay.reshape(call_12490.astype('int8'), relay.shape_of(const_12491))) # shape=(3, 117)
bop_12503 = relay.maximum(const_12491.astype('int8'), relay.reshape(call_12493.astype('int8'), relay.shape_of(const_12491))) # shape=(3, 117)
func_5376_call = mod.get_global_var('func_5376')
func_5378_call = mutated_mod.get_global_var('func_5378')
const_12507 = relay.const([-7.477571,7.022223,8.064167,-7.062975,1.609988,5.357707,-3.250644,3.499010,-8.188637,5.570643,6.686546,-5.238844,-9.224248,-4.622667,-6.471605,0.028143,-3.172517,-0.393069,-2.865096,7.521971,3.711301,-2.599427,-4.235040,1.645940,7.896817,8.557524,-5.392291,4.083246,6.612073,3.010484,-9.510183,8.201092,2.781447,-0.283198,-0.742316,9.382589,7.816932,8.688054,7.663978,-6.599652,7.744570,-8.556606,6.194268,-1.887963,1.809895,-0.135939,-6.329069,9.916838,-4.310685,9.694676,4.309817,-3.904415,2.165345,-4.902048,-0.144648,2.635339,-2.605937,-4.465741,-3.500618,1.396201], dtype = "float64")#candidate|12507|(60,)|const|float64
call_12506 = relay.TupleGetItem(func_5376_call(relay.reshape(const_12507.astype('float64'), [5, 1, 12])), 0)
call_12508 = relay.TupleGetItem(func_5378_call(relay.reshape(const_12507.astype('float64'), [5, 1, 12])), 0)
func_12368_call = mod.get_global_var('func_12368')
func_12370_call = mutated_mod.get_global_var('func_12370')
const_12514 = relay.const([[-3,-6,3,7,2,7,-8,-8,-1,-2,4,3,9,-2,-9,-2,3,3,4,2,-1,-6,4,-1,6,-8,-9,6,-8,-2,1,9,1,-7,-1,3,-10,1,2,-6,5,9,-4,1,-3,1,8,7,-4,-6,-5,-7,7,8,-7,-8,-2,-6,1,-10,-10,-8,3,-8,2,-9,3,4,3,-9,-8,-5,-3,-7,-6,-9,-8,-7,-4,7,8,-3,-4,-1,8,-9,9,9,3,-8,-2,9,6,2,-10,-6,-7,-9,5,-7,-10,-1,10,-2,-7,4,-9,-3,7,-7,-6,-5,-3,3,-4,2,7,-4,-5,-10,7,4,-6,-3,2,-2,-2,-1,-3,2,7,1,9,-10,2,-9,-5,6,-1,4,8,4,-5,4,9,5,-2,-9,4,7,1,-6,2,8,1,-9,-10,-9,-7,-2,1,-2,6,5,-3,5,-10,-2,2,-6,-2,2,-5,6,3,8,-7,-6,4,-2,-4,2,-7,6,2,4,6,-7,-6,3,-5,3,3,-5,-9,-3,4,-6,-8,2,-6,-8,-2,-5,10,-8,-1,8,-10,-1,2,3,1,-8,-4,1,-7,-2,5,-7,-5,1,6,2,-2,5,8,1,7,-8,-10,-1,-9,-7,-10,1,-1,-3,-2,5,9,10,-7,-9,-10,5,10,-8,1,-5,-2,-8,1,-2,-8,8,6,-9,1,-9],[-8,3,-2,-9,6,4,2,-3,-5,7,1,-3,5,3,-1,-9,9,-7,2,-4,9,6,-1,-4,3,10,-7,4,4,-2,-10,-3,2,9,-3,-2,-2,4,7,-10,1,8,-2,4,10,2,-6,8,-3,1,2,10,2,-7,-4,-1,8,5,-2,7,-4,1,-2,-7,5,-2,-1,-1,6,4,-5,-7,6,3,10,9,9,-3,8,7,-7,-10,-1,3,-7,9,4,6,-7,-10,-9,10,-9,-10,-2,10,-5,-8,-9,4,-8,1,9,3,-6,-3,-2,-4,6,9,2,5,-8,-4,4,7,2,-5,3,5,3,-6,-10,7,6,-4,-5,-6,4,2,-9,-9,4,2,-3,9,-6,2,-7,4,5,2,10,3,-9,1,3,-8,5,-6,-6,6,-10,-10,7,8,3,-4,-9,7,3,3,10,-4,-1,5,5,-1,-10,-10,6,-1,-2,-4,-1,7,10,1,-3,-9,7,-4,-5,-7,-8,2,-9,-5,-7,9,1,-5,10,-5,2,9,-5,-4,-10,5,-10,-1,1,9,6,-7,6,10,-7,8,6,-1,-10,3,-7,-9,-7,-5,6,-6,2,9,-5,-3,-3,-4,-8,-2,-7,2,5,-1,2,1,-2,2,2,5,10,2,8,-2,8,-7,-1,10,-10,10,-1,-10,10,10,-3,1,-2,7,-8,8,-7,4],[-6,3,7,6,4,2,7,-10,-6,2,-6,8,1,2,3,-5,-2,2,2,9,3,-2,5,1,-2,1,-3,4,7,2,-3,8,5,-7,8,-5,-9,-1,8,10,-6,-2,4,-5,-3,2,3,-3,7,-7,8,-6,-8,5,-1,-10,8,6,-5,6,7,5,-7,2,8,1,-1,5,5,7,-7,-3,-8,-8,1,2,1,1,6,3,3,2,-2,5,-8,-3,9,1,-6,-10,-4,-4,10,4,9,1,-3,5,-1,3,3,6,4,9,8,-9,-2,7,10,-9,1,10,3,9,8,-5,10,2,9,-5,1,-7,-1,-6,-8,-2,2,-2,9,-9,3,-7,3,8,9,9,9,4,2,3,-2,8,-6,9,4,-2,1,-10,7,6,-1,-7,-3,-2,-10,5,-7,5,5,-9,-1,-6,10,-7,-5,-6,-10,-9,-3,-7,6,-4,7,8,-3,-3,-8,5,6,-7,-4,7,8,-6,7,-4,7,5,9,-8,-10,5,1,-10,-3,-7,-1,-1,-10,-10,10,9,-3,-1,-10,3,1,10,1,8,6,-8,-8,4,6,7,7,5,-2,2,-7,-2,4,-10,-9,-8,-2,1,-5,-1,6,-9,4,5,-10,8,2,8,9,3,-6,2,-7,-1,-8,5,10,9,8,2,10,7,-9,2,-3,-7,-7,-9,3,-1],[10,-7,2,4,1,-9,-5,5,-9,1,1,1,8,4,-9,10,-1,-10,2,-2,-2,-4,-7,-1,5,10,-2,5,2,9,4,-1,-8,-7,-8,3,-2,-9,5,7,3,-5,-10,-5,10,6,-5,9,9,-4,-9,-7,6,-1,-5,1,8,5,8,4,3,-2,-4,-4,10,-10,-4,1,-10,-3,3,-2,-1,10,-6,7,-2,-10,3,1,-1,-2,7,-7,6,-1,3,9,-10,-5,-3,8,3,-4,-1,8,8,-6,-5,-2,-2,-9,4,-1,7,3,-8,7,-6,-8,10,6,7,-2,5,-1,-5,-4,-10,-5,10,-9,8,10,1,-10,3,8,10,-10,6,-5,-6,1,-3,3,6,-2,9,8,-7,2,4,9,2,2,5,-8,-4,4,-7,1,-10,6,2,-3,2,-10,-5,-4,-2,-4,2,7,3,5,10,-3,-8,4,-5,-10,10,5,3,-4,-4,2,-2,-5,-2,-5,6,-7,-9,4,-7,10,4,-5,-5,-4,7,6,-6,-2,-1,3,5,10,10,-7,-8,-4,-2,-1,-8,-5,-10,-2,-4,-5,3,2,7,-1,8,3,5,-10,6,4,-6,-9,-2,3,9,-2,-7,10,10,2,-1,6,4,-3,-9,6,-5,-4,-10,-4,-6,-1,3,-10,7,3,-8,-4,-6,3,-1,3,-6,5,-5,-4,5,5],[-1,3,8,5,-8,8,-5,1,2,4,-10,-5,-5,-5,8,-10,-6,6,2,10,10,6,-9,-1,-1,-10,-3,-6,-7,1,-3,-2,-8,3,-10,2,10,-5,-4,-1,-1,-8,7,-5,4,-10,8,6,-2,6,1,-2,-5,-10,-3,-8,4,-1,9,-7,-1,-2,1,-3,-6,-7,-8,-7,-7,-3,-8,9,8,-4,3,2,10,-2,-3,-8,-5,-7,5,5,-1,-4,-1,2,2,-6,1,10,-5,4,7,-10,-8,-5,-1,5,-9,2,4,1,1,-1,-7,-6,3,-2,-4,5,9,3,10,-3,-10,1,8,8,-9,-4,9,-1,-1,-5,5,-7,9,6,9,-10,-4,-1,-3,4,9,10,-7,10,-4,-1,4,7,9,5,-3,-6,-4,-1,-7,10,-10,-4,1,-5,1,-6,-5,2,-8,-1,-10,10,-6,-2,4,1,-2,3,10,-10,3,10,9,-9,9,-10,6,2,8,5,7,8,-2,3,-8,-5,-9,6,-6,-6,6,3,-5,4,-10,7,-6,5,5,-9,2,-3,-10,-8,-5,-1,-10,5,-9,9,9,-5,3,4,-1,-3,9,-2,5,3,-6,-5,9,4,-6,-7,2,-1,-3,3,7,5,-1,5,10,-10,-4,-7,-2,1,5,-6,-2,-2,-1,9,2,-6,-4,3,-10,-10,-7,-7,7,8,8,1],[-10,-2,-7,-10,6,3,8,-4,8,-5,1,3,-10,2,-6,7,-3,8,-2,10,-8,-10,1,-7,9,4,-3,-10,10,2,-2,-4,8,8,10,-9,-2,-5,2,10,3,3,-10,9,-2,6,10,2,1,5,7,2,-3,-10,10,-8,5,10,-4,-7,-2,2,-4,7,4,9,-7,1,-9,-7,-5,3,-6,-5,-2,7,-5,5,5,5,5,3,4,-2,-8,-1,3,3,6,10,-2,3,5,-7,9,2,-7,-6,10,5,6,-9,9,-8,9,7,4,9,8,-4,1,1,-10,10,-4,7,10,-8,-7,-7,6,-10,-2,2,8,-6,-1,-6,3,-2,-2,4,-5,2,-1,-8,1,-9,-8,2,8,-4,7,1,-7,-5,-2,-10,3,6,-9,3,4,-4,3,-8,-5,10,-2,10,-4,10,-5,-2,2,-4,-6,-2,7,5,-1,-10,5,6,1,-1,-2,10,1,6,1,6,-7,10,-4,5,-7,-4,5,4,-8,10,5,-7,-3,10,3,3,-6,-3,7,-8,4,-1,-1,-4,9,1,5,2,9,2,-10,1,8,-8,1,-1,7,-4,6,-9,2,-3,-6,-5,-7,-6,-3,-4,-10,-8,-8,7,-1,-6,-9,-4,-5,-7,1,5,-8,8,-9,-4,7,-3,9,10,3,8,1,4,-10,6,-3,-3,3,4]], dtype = "uint8")#candidate|12514|(6, 260)|const|uint8
call_12513 = relay.TupleGetItem(func_12368_call(relay.reshape(const_12514.astype('uint8'), [12, 130])), 3)
call_12515 = relay.TupleGetItem(func_12370_call(relay.reshape(const_12514.astype('uint8'), [12, 130])), 3)
bop_12517 = relay.multiply(bop_12500.astype('float32'), relay.reshape(const_12491.astype('float32'), relay.shape_of(bop_12500))) # shape=(3, 117)
bop_12520 = relay.multiply(bop_12503.astype('float32'), relay.reshape(const_12491.astype('float32'), relay.shape_of(bop_12503))) # shape=(3, 117)
bop_12524 = relay.floor_mod(bop_12500.astype('float32'), relay.reshape(const_12491.astype('float32'), relay.shape_of(bop_12500))) # shape=(3, 117)
bop_12527 = relay.floor_mod(bop_12503.astype('float32'), relay.reshape(const_12491.astype('float32'), relay.shape_of(bop_12503))) # shape=(3, 117)
bop_12531 = relay.power(call_12506.astype('float32'), relay.reshape(const_12507.astype('float32'), relay.shape_of(call_12506))) # shape=(5, 1, 12)
bop_12534 = relay.power(call_12508.astype('float32'), relay.reshape(const_12507.astype('float32'), relay.shape_of(call_12508))) # shape=(5, 1, 12)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_12538 = relay.TupleGetItem(func_12265_call(), 0)
call_12539 = relay.TupleGetItem(func_12266_call(), 0)
output = relay.Tuple([call_12471,var_12492,call_12513,const_12514,bop_12517,bop_12524,bop_12531,call_12538,])
output2 = relay.Tuple([call_12472,var_12492,call_12515,const_12514,bop_12520,bop_12527,bop_12534,call_12539,])
func_12542 = relay.Function([var_12492,], output)
mod['func_12542'] = func_12542
mod = relay.transform.InferType()(mod)
var_12543 = relay.var("var_12543", dtype = "bool", shape = (1584,))#candidate|12543|(1584,)|var|bool
output = func_12542(var_12543)
func_12544 = relay.Function([var_12543], output)
mutated_mod['func_12544'] = func_12544
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12321_call = mod.get_global_var('func_12321')
func_12322_call = mutated_mod.get_global_var('func_12322')
call_12565 = func_12321_call()
call_12566 = func_12321_call()
func_11448_call = mod.get_global_var('func_11448')
func_11451_call = mutated_mod.get_global_var('func_11451')
var_12568 = relay.var("var_12568", dtype = "uint32", shape = ())#candidate|12568|()|var|uint32
const_12569 = relay.const([-2,4,-1,-8,10,-3,-6,9,8,-4,6,-10,8,1,10,1,3,10,2,4], dtype = "uint32")#candidate|12569|(20,)|const|uint32
call_12567 = relay.TupleGetItem(func_11448_call(relay.reshape(var_12568.astype('uint32'), []), relay.reshape(const_12569.astype('uint32'), [20,]), ), 4)
call_12570 = relay.TupleGetItem(func_11451_call(relay.reshape(var_12568.astype('uint32'), []), relay.reshape(const_12569.astype('uint32'), [20,]), ), 4)
output = relay.Tuple([call_12565,call_12567,var_12568,const_12569,])
output2 = relay.Tuple([call_12566,call_12570,var_12568,const_12569,])
func_12595 = relay.Function([var_12568,], output)
mod['func_12595'] = func_12595
mod = relay.transform.InferType()(mod)
var_12596 = relay.var("var_12596", dtype = "uint32", shape = ())#candidate|12596|()|var|uint32
output = func_12595(var_12596)
func_12597 = relay.Function([var_12596], output)
mutated_mod['func_12597'] = func_12597
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10858_call = mod.get_global_var('func_10858')
func_10859_call = mutated_mod.get_global_var('func_10859')
call_12674 = relay.TupleGetItem(func_10858_call(), 0)
call_12675 = relay.TupleGetItem(func_10859_call(), 0)
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_12685 = relay.TupleGetItem(func_10895_call(), 0)
call_12686 = relay.TupleGetItem(func_10897_call(), 0)
output = relay.Tuple([call_12674,call_12685,])
output2 = relay.Tuple([call_12675,call_12686,])
func_12689 = relay.Function([], output)
mod['func_12689'] = func_12689
mod = relay.transform.InferType()(mod)
mutated_mod['func_12689'] = func_12689
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12689_call = mutated_mod.get_global_var('func_12689')
call_12690 = func_12689_call()
output = call_12690
func_12691 = relay.Function([], output)
mutated_mod['func_12691'] = func_12691
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_12736 = relay.TupleGetItem(func_12265_call(), 1)
call_12737 = relay.TupleGetItem(func_12266_call(), 1)
func_6243_call = mod.get_global_var('func_6243')
func_6245_call = mutated_mod.get_global_var('func_6245')
const_12739 = relay.const(-9.549072, dtype = "float64")#candidate|12739|()|const|float64
call_12738 = relay.TupleGetItem(func_6243_call(relay.reshape(const_12739.astype('float64'), [])), 0)
call_12740 = relay.TupleGetItem(func_6245_call(relay.reshape(const_12739.astype('float64'), [])), 0)
func_71_call = mod.get_global_var('func_71')
func_74_call = mutated_mod.get_global_var('func_74')
const_12752 = relay.const([-5.584097,-4.043680,-2.721450,9.189958,-4.986581,1.745262,1.057869,7.259235,9.284885,7.750361,-1.053292,7.505858,-8.537030,2.033129,-5.755380,1.525207,-4.336597,9.992757,0.610076,6.265045,2.375690,-4.748813,-9.216344,-4.048181,0.984735,5.090393,-3.248264,6.253601,-8.322874,-6.417852,-1.549248,6.856211,4.522913,2.034332,3.321192,-0.883302,9.178599,3.048382,-8.262365,7.770705,-3.512458,-0.304236,-2.576588,9.113018,-9.957806,8.748758,-6.582566,5.909097,2.046059,-5.922702,4.294579,3.458291,3.350325,-6.459318,-8.704475,3.525224,-9.583482,6.185152,2.910350,6.398245,-7.770125,-2.041398,-2.077959,-5.081288,-9.159200,-8.457775,2.971701,-7.458286,8.849957,9.565604,8.964391,-0.925634,-6.129977,-1.897134,-5.217005,4.194119,-5.937373,8.600976,7.672030,-3.160437,-6.210965,9.084879,-5.329080,-9.854419,-6.350474,9.444949,-8.996301,-7.028894,-7.698699,0.683504,-9.320361,4.795658,-2.831838,7.329238,9.947268,-9.722986,6.008412,6.513058,1.010009,4.840644,3.615109,7.159510,-1.432886,-5.928947,-5.759448,9.993589,-2.294804,0.712435,-9.457514,-6.205543,-5.994395,1.489168,-5.832526,8.278266,1.375714,-4.232145,-2.149022,-7.054332,3.189705,6.272898,-9.990739,-8.120811,7.416198,-8.224628,1.420517,6.968533,6.930772,1.936120,-9.807556,2.138345,6.337867,-0.283357,-0.983479,-6.569324,-7.164101,0.573328,-1.004208,9.978979,-1.944390,6.758209,8.356432,6.472206,-8.662007,-2.017126,-1.663314,-9.703372,4.633111,9.680314,5.951151,5.022837,5.460048,8.201561,1.861835,8.728781,-2.304707,5.492981,-1.381167,-7.424912,1.778051,5.398070,-4.016919,8.981690,-4.447644,3.256686,-8.070751,1.154109,-8.692588,4.745343,-1.030466,0.804861,-3.300463,-4.130552,2.212166,2.639621,0.875579,-3.179356,-3.013661,-5.680988,-8.480586,-9.716211,-3.938745,-6.989697,-4.650457,-6.013890,9.596010,7.981426,-0.997014,-7.793979,-8.369420,-4.496098,-2.603499,-3.752316,-2.295134,5.421194,-0.967255,4.793370,-5.228788,5.678942,-0.231385,4.652813,8.536754,3.044734,-5.294711,-5.625131,2.639261,-1.627490,2.705944,-6.559597,1.246920,4.792684,9.848735,8.301264,-1.654571,8.331578,-7.779063,-4.314034,9.316050,-6.236327,4.796724,6.365382,4.983719,-0.037028,-2.923740,5.917540,9.174082,9.885277,4.904535,-0.590550,-4.992458,-6.176904,-4.023449,-3.477157,-7.822466,6.049502,2.790850,-0.483837,-7.208310,-8.267233,8.616303,3.808009,-1.501348,-6.480902,3.202010,6.978136,-0.675544,-9.164782,3.087009,-1.037418,0.707150,8.397299,-7.904028,-2.025635,6.554626,3.602398,-8.117721,4.286218,-9.491409,-1.057144,-5.392624,8.319579,-3.446946,7.012634,-2.313361,1.890267,3.311093,7.259701,5.101974,-2.130973,-7.717571,0.825523,-2.792389,2.232548,-5.138982,-5.838167,4.001493,3.317856,-3.485773,6.556273,8.163839,-1.978690,-2.283675,-0.688937,9.050060,-1.026437,1.128588,-7.038005,-3.286556,-3.904145,-8.244385,9.058308,-7.988723,9.566107,4.384416,5.705857,5.045489,6.458086,5.655863,7.760913,-0.473973,-4.203909,-6.493205,-9.093423,-3.354433,5.317386,3.220841,1.580420,-7.295773,-6.488307,7.359711,-5.876430,-0.586533,-1.625121,7.458304,-2.712861,9.760787,4.053282,-0.615332,-3.772808,-7.883309,6.091081,-8.796637,4.465783,6.025744,-7.370089,-9.518561,4.013893,-0.299126,-2.391060,-8.563781,-8.245722,-2.211840,5.942173,2.226688,4.014381,2.471593,5.737841,2.878091,-9.417510,0.506430,-8.479990,5.153058,-2.405576,7.242916,-1.258088,3.966730,-2.012148,-8.093698,-8.821252,6.553396,-7.352478,-9.106230,1.414997,-2.897180,-0.780052,-9.756174,8.371452,7.164968,-2.465330,4.395351,-0.399956,8.944818,-2.071144,-9.209752,0.994699,-9.650683,-0.766863,4.913316,0.177056,-3.893248,6.041649,-9.094708,-7.726454,-2.811445,-1.149640,2.289138,5.955691,4.569596,5.030548,-2.955991,-0.523217,-9.573370,-2.903274,-8.077553,8.924553,9.555852,9.560434,-4.756528,1.632619,-5.700819,-2.287393,-7.373844,-9.754274,7.958314,0.109320,-1.689964,-7.031251,9.661664,9.191268,-4.525235,-3.399816,5.700090,9.058885,4.662307,1.844433,5.458047,-3.973337,1.837546,4.338746,-8.278792,-8.449257,-9.907201,6.354850,0.436337,6.102143,2.404148,-2.030831,-9.313084,-4.641851,-1.222699,6.258299,2.543953,-1.010320,3.296681,3.155851,-7.862990,-3.842820,6.243517,-8.477473,-1.893442,-2.993101,0.517213,0.531725,2.851660,-6.271333,5.848297,7.393322,0.509331,1.171484,3.642547,-9.764396,-0.892606,9.314966,-7.436184,0.754978,3.699839,-3.528316,-2.942185,-3.927905,-3.423762,5.731059,3.769934,-6.445555,-1.774980,7.551006,8.837128,-4.264371,-7.144527,1.379830,4.575889,-2.492644,-8.713773,-4.783379,-0.634009,-1.829642,6.460402,-0.081816,-8.166721,4.859775,-7.648326,8.432644,-4.536475,9.105507,1.800132,8.221633,5.374632,3.642539,-4.318892,-3.872747,7.825633,2.397639,8.078819,7.999561,2.421254,-2.041572,6.124561,1.996444,3.171786,-1.080535,6.733434,-2.372160,5.945499,-9.889493,2.589258,-6.675106,-9.049383,0.536423,3.913235,3.677350,0.763035,-8.320886,5.151442,-3.528707,7.633544,2.883347,-6.230492,9.258816,-8.184560,4.266819,0.147724,-0.943269,-0.839717,8.349067,-7.001125,-9.083325,-6.137769,-9.367727,-3.473868,1.427606,3.795172,-0.948256,-4.150583,-6.684894,5.980227,-1.584722,8.405558,-4.501617,-7.544862,-8.089517,0.500490,-5.262514,3.526478,1.087324,7.643098,7.455932,-1.119518,-0.986779,-6.227402,5.245485,-3.321855,-7.034238,-1.855664,7.351224,-1.463342,7.623465,-5.044173,2.472261,-1.602514,6.576392,1.340580,-1.775573,-4.800705,-0.135215,0.269610,5.408429,8.824452,-4.004593,-3.900040,-0.562563,6.200819,-6.749807,8.289468,1.928692,5.188507,8.522702,-6.007030,-4.168968,-1.778370,5.600201,-6.433159,-1.558210,-7.057496,0.709713,-3.731497,0.503463,7.846605,-6.202942,4.435921,-6.169266,-7.593480,-2.809273,8.703117,-1.645085,3.020048,-5.195865,-4.049571,-8.619570,9.303370,5.034543,9.355498,9.127786,3.845336,-5.871644,4.916866,4.766553,-6.537878,-8.923041,-8.481196,-8.818303,-0.895201,5.481101,6.263217,6.128034,5.824985,-7.835578,3.658593,2.557471,0.496603,-6.169197,-1.633895,7.372488,9.654845,-7.139152,-3.750401,7.874473,4.347454,2.086599,-0.209128,4.081362,9.752098,9.579654,4.556539,1.112868,-6.589194,-1.149107,0.067685,1.331799,4.178668,-2.949375,-9.093946,7.294884,-7.584086,-5.407875,9.817132,-6.951249,-2.773066,-0.652636,-6.654259,-6.229077,0.892285,9.970114,-8.601929,1.748903,8.585201,2.262849,7.439096,5.331356,7.391172,5.317818,-9.828339,-1.675469,8.625431,-3.921483,-6.411314,-4.855716,1.365070,1.572782,-8.138210,-1.759809,-2.415638,-2.278820,-2.622256,-8.101495,5.889536,-9.091070,5.712001,-4.230693,2.442094,4.305112,-9.544200,3.534918,8.732006,2.102132,1.256446,0.942290,-0.432831,-3.693001,-7.121447,-8.738668,-4.594368,5.000330,6.159243,-8.160755,-2.188471,9.071918,3.768970,2.545806,9.506275,-4.534930,-3.891868,-2.855217,1.139896,9.909493,7.483956,-1.011964,-3.386198,-8.863925,6.843602,4.126764,-9.666696,-6.120918,0.440087,-0.960356,6.017609,-5.987965,0.042528,-3.571349,0.815219,-6.550637,4.318095,-6.171947,-9.568713,-2.511171,0.365697,7.832809,-1.919246,2.830002,7.014337,-9.252178,-2.925280,-9.608664,9.962541,3.269013,-3.615659,-9.062762,-4.653933,-3.421398,7.961129,-8.649093,-7.044656,-2.168544,-1.297848,-2.592797,9.267295,-3.035947,2.282113,7.431780,7.879261,7.985203,-3.056417,2.011024,-6.569549,9.177108,-3.113388,-0.885447,-3.193074,5.748632,-7.072975,-8.034274,-2.457625,-8.574986,-0.984464,3.640573,-5.404322,8.540260,-4.122415,8.236205,-1.382053,-1.679295,-3.370357,9.946385,7.382576,3.781127,9.827385,5.129771,-3.840241,2.694403,-3.635334,-3.544620,-1.414166,8.630372,7.760099,8.748161,-4.235831,-2.545106,7.672514,2.607608,8.675658,-5.166913,-1.300168,-4.576478,7.491472,5.005877,-1.496064,-8.104650,-8.540728,4.525742,-8.633320,0.405938,-7.560429,-4.801581,-2.080507,-0.215333,-6.198881,-4.016664,2.262263,-3.418655,-4.121461,-0.169293,1.155551,8.185777,-3.094451,8.594865,-1.203171,9.175434,8.768537,-9.284421,2.203299,9.584907,2.180884,2.521740,-7.825300,-8.069951,9.790621,-6.033388,8.011128,-4.717579,-5.029161,4.421826,4.489202,-7.511660,-0.842029,-7.088445,0.122158,6.498164,6.428500,8.438149,-1.173992,-0.793174,-1.254990,9.675408,6.474069,-7.369051,5.641550,-7.677259,-1.531494,5.264562,3.763420,3.345015,9.358235,5.589817,3.539534,4.009380,-1.216843,3.741666,-7.222548,2.335592,6.915106,7.008512,5.363300,8.698038,-9.875596,-5.793896,-3.487772,3.555040,-2.951684,-3.577286,8.408681,-7.514164,5.983870,4.717331,-5.611562,3.045746,-7.743560,-5.185528,-7.499039,6.969936,6.630194,-4.746411,8.492118,7.459252,6.689986,5.287943,8.731863,-2.274345,-1.011027,-4.637197,-6.720696,-4.210556,3.029654,-2.781304,-6.477056,-7.512264,7.592923,0.277497,-3.769202,1.994440,-2.171290,9.972805,-1.347658,-3.752469,4.988193,7.075955,5.080145,-1.293748,-6.954025,-5.572613,-8.127459,-5.490247,-6.845483,7.892728], dtype = "float32")#candidate|12752|(900,)|const|float32
call_12751 = relay.TupleGetItem(func_71_call(relay.reshape(const_12752.astype('float32'), [15, 10, 6]), relay.reshape(const_12752.astype('float32'), [15, 10, 6]), ), 0)
call_12753 = relay.TupleGetItem(func_74_call(relay.reshape(const_12752.astype('float32'), [15, 10, 6]), relay.reshape(const_12752.astype('float32'), [15, 10, 6]), ), 0)
output = relay.Tuple([call_12736,call_12738,const_12739,call_12751,const_12752,])
output2 = relay.Tuple([call_12737,call_12740,const_12739,call_12753,const_12752,])
func_12758 = relay.Function([], output)
mod['func_12758'] = func_12758
mod = relay.transform.InferType()(mod)
output = func_12758()
func_12759 = relay.Function([], output)
mutated_mod['func_12759'] = func_12759
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12689_call = mod.get_global_var('func_12689')
func_12691_call = mutated_mod.get_global_var('func_12691')
call_12760 = relay.TupleGetItem(func_12689_call(), 0)
call_12761 = relay.TupleGetItem(func_12691_call(), 0)
var_12762 = relay.var("var_12762", dtype = "float32", shape = (6, 3, 8))#candidate|12762|(6, 3, 8)|var|float32
bop_12763 = relay.multiply(call_12760.astype('uint64'), relay.reshape(var_12762.astype('uint64'), relay.shape_of(call_12760))) # shape=(6, 3, 8)
bop_12766 = relay.multiply(call_12761.astype('uint64'), relay.reshape(var_12762.astype('uint64'), relay.shape_of(call_12761))) # shape=(6, 3, 8)
func_12111_call = mod.get_global_var('func_12111')
func_12113_call = mutated_mod.get_global_var('func_12113')
const_12768 = relay.const([[7,-3,8,-6,-8,10,-1,-2,-10,-3,9,2,-3,9,-4,-6,-4,-5,8,3,-6,1],[-4,4,-9,-8,-8,-6,-7,-7,-5,1,5,2,-7,9,-7,-3,-3,-5,-6,5,-3,5],[5,10,-6,-9,-7,4,5,-9,4,-1,9,-1,9,8,-4,-4,4,1,5,1,-1,7],[-10,8,10,-1,5,3,8,10,6,-3,7,10,-3,5,-8,10,9,-4,-7,-8,-8,8],[6,-10,-1,-3,-6,-2,4,3,-10,-1,-8,9,-9,8,2,3,-4,-8,-5,-5,4,10],[-5,-3,3,-5,9,6,3,-7,-10,10,-5,-10,1,-3,-3,6,-5,2,-3,1,-2,-9],[-9,-9,9,2,2,-4,7,10,10,7,-5,3,9,9,1,6,4,-10,7,-5,-3,-1],[-6,-10,1,10,-10,3,9,3,-9,9,-6,-4,-10,-1,-10,5,7,10,7,-3,7,6],[-7,-5,8,8,4,9,5,-8,6,10,-9,1,-4,-2,-2,4,-9,-6,4,3,9,1],[1,8,-3,1,3,-9,-10,-6,1,-2,1,-7,3,5,1,-8,5,2,-6,-1,6,-4],[1,9,-3,2,10,-1,9,-6,1,-3,-10,6,9,-5,-5,3,10,-8,4,7,9,-10],[-1,9,2,10,-8,-8,-2,-1,-1,-5,-6,-1,4,6,-5,4,-3,-10,6,7,-6,2],[-7,7,7,8,-8,6,9,7,-8,-10,3,-8,-9,4,1,3,9,9,-3,-1,-7,3],[1,-8,9,4,7,3,-8,-9,-5,10,-2,1,-5,4,-1,8,5,1,-5,7,6,7],[-7,4,1,-7,4,-8,-2,2,1,5,7,1,-10,3,-8,-1,-7,8,-10,10,-5,-4],[-3,10,6,10,-1,5,-9,7,-7,4,-5,3,-7,1,3,9,-10,10,4,9,-2,7],[3,1,-4,5,7,-5,4,8,-1,-5,-8,9,6,-9,4,-2,-2,6,-7,-5,2,-3],[-8,-2,-8,2,-2,9,-10,-8,4,1,4,2,-10,-8,-1,-9,-1,-9,-7,-6,1,1],[-2,8,-1,-2,6,-6,2,-1,4,3,-10,-6,-3,-10,-8,8,9,7,-4,-3,-2,-1],[5,-9,-1,-6,-3,1,-7,-2,1,-8,-7,10,-4,4,-4,-4,8,-9,4,-1,8,-6],[-5,1,-2,6,-3,-3,-3,-5,-3,-7,-2,1,2,4,-5,6,-1,-6,5,2,-10,5],[3,2,8,-8,-6,6,-2,9,-1,7,-9,4,-7,-1,3,-2,-3,4,-4,10,1,9],[6,-1,2,-10,-3,6,-5,6,-1,6,-3,-5,-5,10,-1,-1,8,6,10,-10,2,-2],[2,-7,-6,-7,3,7,-7,6,-5,-6,9,-2,10,3,-7,3,10,-2,-10,5,-1,3],[-7,-7,-6,-5,9,-5,9,-4,-2,8,4,-10,9,2,-6,-7,6,7,-10,-8,-10,-7],[2,9,-8,-7,7,9,-3,-5,5,-3,-7,-2,3,-6,-6,5,-4,-3,-9,5,8,-3],[4,-9,3,10,4,-9,-6,1,-5,10,-1,4,-5,-8,-2,3,3,6,6,6,-2,9],[7,9,-6,-5,-4,-7,-7,-2,-9,6,-7,-8,10,4,-8,-7,-3,-10,7,-8,-4,8],[1,10,-4,-2,9,-5,3,-1,2,-9,-6,6,4,-4,10,-10,1,2,6,-8,3,6],[-3,-10,-4,-2,8,4,3,-2,2,-3,-2,10,-9,3,-10,-10,5,-1,-1,-9,-10,-2],[-3,-3,6,7,1,8,-6,1,-9,10,-1,2,4,2,8,-7,10,-7,-8,-6,4,6],[-4,-5,-8,-6,-5,-2,4,3,7,5,3,-4,8,9,-4,9,4,1,-8,2,7,-2],[-7,5,8,1,-3,2,5,-3,-10,6,-6,-5,-4,-10,10,-6,-9,-1,2,-10,-7,8],[6,10,6,10,-3,-8,2,9,-10,-1,5,-7,1,4,2,1,-5,-5,-7,5,-2,6],[-3,-7,10,-3,7,-2,9,-10,9,-10,2,-7,2,8,7,7,-1,-4,-2,7,-8,2],[6,10,-3,10,-10,4,-9,6,-8,-7,-9,3,-9,-3,-9,6,-6,1,-1,-5,-7,2],[1,3,1,2,2,-1,4,-8,10,-8,-2,-8,-9,-3,1,-2,3,6,7,6,-3,-10],[5,-2,2,1,-1,9,1,-6,-9,-7,-6,-8,2,10,-5,4,8,4,8,-8,-6,10],[-10,2,-7,-2,3,-3,8,-10,-4,2,10,6,3,8,-10,7,-7,9,-9,4,-1,-8],[-10,1,-3,-10,10,5,-9,-3,3,8,10,-3,-8,-2,6,9,8,-2,6,-8,-9,2],[-7,-8,6,2,5,4,4,4,5,6,5,6,1,10,6,9,-6,6,4,7,-3,5],[-6,-5,-4,6,-10,-3,-6,-2,-4,6,7,1,9,-3,8,2,-6,-6,-10,2,-5,-1],[-7,-1,-2,-8,-10,4,-6,4,4,-9,-4,5,-7,2,-9,3,5,-6,3,-10,4,4],[1,-3,3,9,6,1,-8,-7,7,-4,6,-3,-5,-3,5,6,-7,-2,10,-10,-5,4],[-6,-4,-3,-9,-10,9,3,2,-1,-5,9,1,-1,8,3,-1,2,-6,-4,3,5,-7],[6,-8,10,-7,5,8,10,3,-7,2,10,2,3,7,-7,-8,-6,10,-2,-4,-5,-4],[-10,8,-1,-5,-10,-6,4,1,-10,6,7,-5,-5,5,-3,4,-6,-1,3,-8,6,-8],[-9,-4,9,-6,-8,-5,-10,-10,1,-6,-6,-4,4,-6,7,-1,-2,-7,6,7,-4,4],[3,9,-10,1,-4,9,-10,-8,-6,5,-5,8,6,3,8,-6,-5,-6,-9,-5,3,-1],[-8,10,-10,-3,-7,-4,6,3,-9,6,-3,1,9,-5,9,-5,-8,10,-10,-1,-3,10],[-6,-5,1,1,4,-3,7,7,-7,2,7,-3,2,-4,1,-6,6,-6,-5,-8,-8,-5],[-3,2,5,5,-5,-1,-2,-3,10,4,3,2,6,10,-2,-10,5,7,7,4,-10,-8],[-9,-9,-10,-4,10,2,5,-1,-5,4,-4,-2,2,-10,10,-7,9,-9,-9,-2,10,-7],[4,-3,-9,-8,7,6,5,-4,-6,-5,6,-1,-6,6,-5,-2,8,-7,-4,4,5,1],[-5,-5,7,-5,-4,8,9,8,6,4,-7,3,-6,-3,6,-10,-10,-4,-7,-9,-5,-2],[2,10,-2,-2,-3,-10,-3,-9,8,1,-4,-2,4,-1,10,-5,3,-10,8,-4,8,-10],[-7,-9,-8,-3,-7,-3,-8,-4,-8,-9,-2,4,1,-3,-1,10,-3,5,1,-4,-2,-1],[-1,-7,4,10,6,-8,-1,6,5,2,-4,9,-4,4,-2,-6,-2,4,10,-1,-7,7],[-9,1,-8,-6,-9,-10,10,9,-10,6,8,7,-5,8,5,-1,-6,-2,5,-1,-3,-7],[6,6,9,-10,-4,-6,-3,-1,8,7,-4,2,-7,4,-5,-4,7,9,-1,-6,5,-6],[-6,1,10,-2,6,-4,7,4,10,-3,7,-6,2,-5,-4,7,7,6,5,4,9,6],[-7,-10,-10,6,6,8,-6,6,4,-9,-1,-10,10,10,1,7,-8,-5,-3,-8,6,8],[-10,1,-8,-5,-5,7,-9,7,3,-8,-3,1,-5,-7,-6,-3,9,-10,-4,6,-2,-5],[10,-2,7,3,-4,-8,-5,2,-9,-10,10,-5,-7,-6,-6,3,-4,-8,-7,-3,-5,-4],[7,4,2,4,3,8,4,2,-6,5,-2,-3,4,-1,-8,-1,-10,2,-8,6,8,3],[10,2,-2,8,-10,2,8,4,6,-2,10,-10,10,2,-10,2,4,-7,-10,8,-3,-5],[2,8,7,-8,-4,7,-4,4,8,5,-9,-6,-5,-1,5,-1,7,8,-7,-3,5,-7],[-1,-3,8,-10,-8,9,3,4,-6,-8,2,9,4,-4,-9,6,-3,-10,-6,-9,-9,8],[8,3,-6,-9,10,-10,7,3,-5,8,9,9,8,-10,6,-10,-9,-10,-5,3,-6,-8],[-9,9,-2,-3,6,-6,2,3,3,2,-8,7,1,7,-7,8,-9,-1,7,2,6,10],[-4,-5,10,-1,2,-2,-9,10,-7,3,9,-5,-8,2,4,3,6,-7,9,-5,-5,6],[5,2,-6,5,9,-4,8,-2,-7,-2,-4,1,6,-6,10,-9,-8,6,5,9,-3,10],[8,-4,8,-10,-7,-8,5,-6,-6,2,5,9,-1,-6,1,8,10,4,9,4,3,9],[-8,4,1,9,4,-7,-6,1,-9,-7,-10,8,-7,7,4,9,-2,-7,7,-6,4,5],[-6,-9,5,3,9,9,6,5,2,4,-6,-5,-9,-3,-6,-2,5,7,-9,9,4,5],[2,1,-3,7,8,-2,5,-7,-4,-1,-4,2,1,-1,-7,-6,-6,4,4,1,-3,6],[-8,7,5,2,-10,-1,6,-7,-10,-6,2,8,-1,-7,-9,2,-7,1,1,-1,10,2],[-6,10,2,4,6,-9,8,3,8,-9,6,-6,3,-8,9,-10,-8,3,-8,3,9,-3],[9,-8,-9,1,5,2,5,5,-9,1,7,7,-10,-9,6,6,6,-10,1,2,-9,5],[4,9,5,1,3,7,-2,-2,8,2,4,-1,-5,10,-9,9,-5,7,6,1,-7,3],[-5,-6,7,-9,1,-5,-4,2,9,7,10,5,-3,5,5,7,-7,4,-2,4,-4,-2],[3,4,-3,-10,-6,-9,1,8,6,-7,10,-6,4,-8,8,-1,-1,-4,9,-9,9,3],[-6,8,-8,-4,6,-3,-1,-1,2,-1,-10,-9,-1,3,8,9,-8,-5,-2,7,10,-8],[-4,1,4,8,9,2,-8,7,2,-2,-5,-1,8,2,-9,-3,1,8,6,-9,5,-4],[-6,-3,-8,-3,1,-9,1,1,4,-4,7,-2,1,-9,-3,-1,3,1,8,4,7,10],[-5,-1,-4,5,8,6,1,6,-10,4,1,-5,-1,-8,-2,-10,1,7,-4,-9,-10,-2],[2,-4,6,-6,-7,-4,1,9,-2,10,8,-1,10,7,-6,-2,10,1,-7,-1,-7,3],[8,-1,10,-4,-1,-3,4,4,2,8,-3,5,5,4,-2,-2,-8,-3,-8,-7,3,-1]], dtype = "uint64")#candidate|12768|(88, 22)|const|uint64
call_12767 = relay.TupleGetItem(func_12111_call(relay.reshape(const_12768.astype('uint64'), [1936,])), 2)
call_12769 = relay.TupleGetItem(func_12113_call(relay.reshape(const_12768.astype('uint64'), [1936,])), 2)
output = relay.Tuple([bop_12763,call_12767,const_12768,])
output2 = relay.Tuple([bop_12766,call_12769,const_12768,])
func_12775 = relay.Function([var_12762,], output)
mod['func_12775'] = func_12775
mod = relay.transform.InferType()(mod)
var_12776 = relay.var("var_12776", dtype = "float32", shape = (6, 3, 8))#candidate|12776|(6, 3, 8)|var|float32
output = func_12775(var_12776)
func_12777 = relay.Function([var_12776], output)
mutated_mod['func_12777'] = func_12777
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11860_call = mod.get_global_var('func_11860')
func_11862_call = mutated_mod.get_global_var('func_11862')
call_12831 = relay.TupleGetItem(func_11860_call(), 2)
call_12832 = relay.TupleGetItem(func_11862_call(), 2)
func_11148_call = mod.get_global_var('func_11148')
func_11151_call = mutated_mod.get_global_var('func_11151')
const_12834 = relay.const([-3.571129,9.308109,5.572936,-6.581612,-8.889048,-6.388491,0.618315,0.272117,-5.508652,-4.524889,5.904150,-4.377908,1.437312,-9.960020,7.553158,-9.445453,-0.055006,2.574911,2.089983,-9.866313,9.647500,2.455576,-6.274898,1.460737,-1.880967,2.073291,8.387771,5.507941,7.182187,1.573389,4.059631,-8.878394,0.785140,-6.223855,8.481679,-2.900017,4.789213,-0.889227,-7.166005,-1.820990,9.143250,-7.958391,4.584093,9.125699,5.189807,-3.984295,-2.288620,-2.683715,-7.479679,2.007722,6.492530,-9.229976,5.656596,7.239344,-9.205703,-2.518555,9.038109,-0.080598,-5.135601,3.429879,-0.012982,7.837685,-2.367786,-0.106070,-9.938902,7.050494,0.520318,-1.639044,-2.266502,-6.963898,5.578650,-7.748649,-5.943098,9.821869,-9.740229,-3.311976,-0.156172,2.178322,-9.249021,6.710802,6.606820,-0.571579,4.801758,-8.455620,-5.656486,-0.708197,0.528130,-3.298524,-0.773204,0.770378,-3.835526,8.710168,2.188849,-1.681816,3.229954,-8.585338,-7.691243,6.565175,4.708192,9.058247,2.090960,9.272791,-4.511645,-0.460785,5.125571,9.793415,6.835674,5.789063,9.920390,-4.915035,5.103630,-8.726360,-4.806332,9.386802,7.308654,3.156843,8.691169,2.586045,2.195630,-9.046740,5.755617,-4.150827,-3.736676,5.989134,1.521590,-6.454049,-3.393655,-4.263804,2.044242,-8.099541,-5.297498,1.503704,-3.344846,6.596914,-9.168364,6.981992,7.233414,-1.036997,4.862644,-7.517161,-1.912750,2.459440,0.018380,4.687584], dtype = "float32")#candidate|12834|(144,)|const|float32
call_12833 = relay.TupleGetItem(func_11148_call(relay.reshape(const_12834.astype('float32'), [6, 3, 8])), 0)
call_12835 = relay.TupleGetItem(func_11151_call(relay.reshape(const_12834.astype('float32'), [6, 3, 8])), 0)
output = relay.Tuple([call_12831,call_12833,const_12834,])
output2 = relay.Tuple([call_12832,call_12835,const_12834,])
func_12836 = relay.Function([], output)
mod['func_12836'] = func_12836
mod = relay.transform.InferType()(mod)
mutated_mod['func_12836'] = func_12836
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12836_call = mutated_mod.get_global_var('func_12836')
call_12837 = func_12836_call()
output = call_12837
func_12838 = relay.Function([], output)
mutated_mod['func_12838'] = func_12838
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12758_call = mod.get_global_var('func_12758')
func_12759_call = mutated_mod.get_global_var('func_12759')
call_12865 = relay.TupleGetItem(func_12758_call(), 0)
call_12866 = relay.TupleGetItem(func_12759_call(), 0)
output = call_12865
output2 = call_12866
func_12883 = relay.Function([], output)
mod['func_12883'] = func_12883
mod = relay.transform.InferType()(mod)
output = func_12883()
func_12884 = relay.Function([], output)
mutated_mod['func_12884'] = func_12884
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12321_call = mod.get_global_var('func_12321')
func_12322_call = mutated_mod.get_global_var('func_12322')
call_12896 = func_12321_call()
call_12897 = func_12321_call()
output = call_12896
output2 = call_12897
func_12903 = relay.Function([], output)
mod['func_12903'] = func_12903
mod = relay.transform.InferType()(mod)
output = func_12903()
func_12904 = relay.Function([], output)
mutated_mod['func_12904'] = func_12904
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11822_call = mod.get_global_var('func_11822')
func_11823_call = mutated_mod.get_global_var('func_11823')
call_12929 = func_11822_call()
call_12930 = func_11822_call()
output = relay.Tuple([call_12929,])
output2 = relay.Tuple([call_12930,])
func_12946 = relay.Function([], output)
mod['func_12946'] = func_12946
mod = relay.transform.InferType()(mod)
output = func_12946()
func_12947 = relay.Function([], output)
mutated_mod['func_12947'] = func_12947
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12946_call = mod.get_global_var('func_12946')
func_12947_call = mutated_mod.get_global_var('func_12947')
call_13010 = relay.TupleGetItem(func_12946_call(), 0)
call_13011 = relay.TupleGetItem(func_12947_call(), 0)
output = call_13010
output2 = call_13011
func_13013 = relay.Function([], output)
mod['func_13013'] = func_13013
mod = relay.transform.InferType()(mod)
mutated_mod['func_13013'] = func_13013
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13013_call = mutated_mod.get_global_var('func_13013')
call_13014 = func_13013_call()
output = call_13014
func_13015 = relay.Function([], output)
mutated_mod['func_13015'] = func_13015
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11921_call = mod.get_global_var('func_11921')
func_11923_call = mutated_mod.get_global_var('func_11923')
call_13020 = func_11921_call()
call_13021 = func_11921_call()
func_11776_call = mod.get_global_var('func_11776')
func_11781_call = mutated_mod.get_global_var('func_11781')
const_13028 = relay.const([-1.264416,-8.101040,-3.905038,-7.856494,-6.669274,3.742275,8.636779,8.925753,7.911173,5.631044,-3.888554,-6.507378,-3.665567,3.703377,-1.055842,-5.976956,-9.398626,0.553800,3.609059,5.174561,-3.320977,3.584854,-7.117203,4.509407,-6.849118,4.088298,-6.466197,-7.078448,-2.668945,-8.890485,-3.943874,1.656489,3.636679,-0.589048,2.379174], dtype = "float64")#candidate|13028|(35,)|const|float64
var_13029 = relay.var("var_13029", dtype = "float64", shape = (35, 4))#candidate|13029|(35, 4)|var|float64
const_13030 = relay.const([1.216700,-7.841783,6.258417,1.487265,6.813893,5.045375,-7.725702,-8.775953,6.562891,-7.641598,-6.390611,6.452808,5.597868,7.371477,7.512203,-7.382144,6.820785,-6.816433,7.073490,-9.835142,8.354793,-6.242804,2.595543,5.987538,2.280536,0.352744,9.920598,-1.734133,2.282893,7.066591,-3.374479,-6.275215,-6.480632,-5.931214,-3.195942,-6.187253,-6.917344,7.703901,8.135119,5.358733,8.630492,0.608696,8.825229,5.434429,1.031887,6.390728,-5.436664,-3.359041,-3.155942,-4.798242,1.427876,-5.095019,2.109398,4.286551,-0.102976,-9.330480,2.577559,-8.686880,1.427482,-5.871522,-5.142391,-5.378777,3.089820,-0.604861,-3.913726,-2.466885,9.887836,4.260955,-4.566971,-3.443148,6.923488,-6.325674,-6.188915,8.428167,-1.066244,-5.815895,2.537931,2.229783,5.787281,-2.900251,-0.535195,-0.867119,1.312045,2.205432,-9.481663,8.278375,-4.231401,5.623340,-1.066836,-8.762391,-8.422667,-3.130952,-8.758629,-1.508515,7.375652,6.631831,8.170718,0.440517,3.752188,-6.334170,-6.152399,-2.786515,-1.755473,0.286813,-0.233587,2.566099,2.572671,0.542342,-6.992694,0.296500,-0.579542,6.923631,-8.824274,6.360863,8.158476,-5.983249,9.756380,-4.189146,-9.359881,-2.528065,-7.190383,2.471768,8.858488,3.991584,-0.998741,3.767237,8.064137,-6.917261,-5.783831,0.993632,6.904570,5.458045,-8.054080,-2.015434,-1.117721,-4.722091,5.282029,-5.620478,-7.560460,-4.429007,-1.375258,8.010405,-1.986719,-3.259097,9.029322,5.487004,8.967742,6.578964,-5.798020,-6.678060,7.187411,4.795778,-1.027866,5.517713,5.166119,8.181216,-9.466352,1.209206,-7.921266,9.246463,-1.998391,-0.681089,6.681875,4.504993,-8.033314,-7.747283,-6.510006,-9.663041,9.025136,0.834154,9.721487,1.732924,-3.974818,-0.871306,-5.245265,-7.829786,-3.468777,-2.940053,4.074481,-7.563458,4.961748,0.992751,-6.841172,-6.150529,2.650503,7.979550,-5.575306,-5.517193,1.712386,2.087579,-1.063473,-0.239180,-7.084776,2.146601,4.939731,0.779344,-7.907103,-1.042141,-9.320335,9.649866,1.671273,-4.862912,0.141845,-0.801168,-3.294147,-2.124408,5.223107,0.941101,2.385110,6.785162,-6.522848,0.112494,0.376602,-9.345183,-8.034076,-0.548485,-7.581662,6.833359,4.999259,-3.408888,8.261244,2.651591,-8.369566,-7.922830], dtype = "float32")#candidate|13030|(224,)|const|float32
const_13031 = relay.const([[6,-4,-3,-10,1,5,5,5,-2,4,-9,-5,6,-3,-9,4,9,8,-4,-3,6,3,1,-9,4,-2,4,-5,-3,-1,-5,10,2,-6,-10,-1,6,-8,-1,-2,10,-9,-3,-7,5,9,-10,4,8,-10,8,7,-5,-2,1,3,-8,-6,-7,7,10,1,-4,-3,4,3,3,5,4,-6,1,-6,2,-2,-4,10,-3,-3,-8,9,10,-2,-3,-2,-6,4,10,8,2,10,7,10,-4,6,1,-2,9,-3,2,-1,-6,6,5,-5,-4,-2,8,10,7,2,3,-7,9,-7,5,-1,-3,4,-3,-2,7,-7,-8,-5,-4,10,-10,-10,-9,1,-4,-5,-9,4,2,-8,-2,2,-3,2,3,-7,-3,3,3,-5,4,6,1,-5,6,9,-2,7,-9,5,4,-6,-8,-6,1,-9,-3,8,5,-4,1,-8,-6,10,-5,-9,6,4,2,-6,3,-8,2,-10,-3,9,-2,9,-3,5,-4,5,-8,8,2,5,-1,4,10,2,10,1,2,10,-9,-3,7,-4,10,-7,6,-8,4,2,-3,9,-8,5,-10,-5,-8,-1,8,-2,-9,-9,-8,2,8,-5,-8,4,7,-8,-2,6,-3,7,-4,10,-5,-6,7,-6,-4,5,7,10,9,-1,-2,5,3,7,-10,-9,-7,9,-5,-8,-5,-2,4,-6],[-1,6,-3,-9,4,2,-4,-8,-7,6,3,2,-6,-4,-8,5,-7,-3,3,-5,-9,-8,9,3,-6,-8,10,9,-6,-8,3,-4,-4,3,10,-4,-6,-9,10,-10,8,7,10,7,9,10,9,-4,-10,2,-6,6,-9,-6,-6,7,-6,5,-10,-2,10,-5,-6,3,8,6,4,-8,9,-3,-2,-1,7,-4,10,8,-10,10,3,-1,-1,-5,-1,7,6,-4,-10,-7,-3,-6,9,-5,-8,-4,-8,-2,-4,-3,9,-4,10,5,5,9,-3,2,-8,10,2,6,10,1,4,-8,6,10,-10,-7,7,2,10,3,-3,-3,6,8,-5,2,5,-2,4,6,-9,8,9,-7,7,7,4,8,-9,-7,-5,6,1,-2,2,-8,1,8,-7,8,-6,6,7,9,8,2,5,5,6,10,5,8,3,5,10,3,-10,-3,1,-5,-7,4,3,-7,-9,4,4,-10,-7,-4,2,-10,-6,-9,6,-8,1,5,5,2,1,-8,7,10,6,-10,3,1,4,8,6,-2,-10,-10,1,9,-7,6,8,7,-2,-2,-6,4,-5,-9,-8,9,-10,-3,8,-4,10,10,-6,1,3,-4,-8,-8,-1,-5,9,-9,10,9,-3,-4,3,-8,-10,-10,2,-1,-10,-5,-9,-2,-2,-7,-2,-2,-1,5,-10,-6,3,3],[-8,8,-5,-1,-1,5,5,-8,10,1,8,-9,10,-9,1,-10,10,9,9,2,-4,-5,-8,-5,3,-2,-1,-9,6,3,4,8,-1,9,-8,2,-7,2,-2,-4,2,-5,-6,-5,-4,2,4,-2,-9,-5,-2,-1,-5,-4,10,1,-3,7,3,-4,10,5,-5,7,9,-3,10,-10,4,2,-4,-8,-1,8,4,-1,7,-8,-4,-8,-8,4,4,-3,-1,-4,7,-2,4,-2,-10,-5,-8,1,8,5,-10,-4,-6,-3,-1,10,9,-8,-1,-1,1,10,-9,-3,2,-2,10,7,4,-1,-6,-7,-6,-8,-3,-2,7,8,-4,-2,1,-9,2,5,5,-1,10,6,2,2,4,-4,5,6,2,-6,-2,2,-8,-9,4,5,-9,9,-6,-9,-5,1,4,9,-7,-9,-7,-4,1,-9,-5,-10,-5,8,-9,2,-1,-4,-2,2,-8,-8,-3,4,-6,-10,7,-7,-8,4,3,1,-10,-10,-10,2,3,-4,10,10,-1,7,10,-2,9,6,-5,6,4,8,8,1,-7,8,5,3,8,-5,4,-7,-7,-4,9,-6,6,4,-3,3,-2,-9,-9,-4,-4,7,10,10,-6,8,2,6,-9,10,-7,-3,-4,-9,-7,-1,-4,9,-4,-9,-3,6,2,-3,-4,6,6,2,4,-6,-6,3,7,4,-3,2],[2,1,-9,7,-7,-5,-4,4,10,-2,7,6,9,5,-3,-10,-4,8,-3,-5,10,5,8,-4,1,5,-1,-4,-9,4,6,6,5,3,1,-10,9,4,5,6,-4,-6,1,7,8,3,-7,4,-3,10,5,4,5,1,-8,8,9,-8,3,-4,9,5,-8,-8,7,6,7,-8,-10,2,6,-3,-3,7,8,-7,9,-5,-2,-8,8,-3,-4,5,9,-3,7,-10,-8,-6,-8,-5,4,6,2,9,7,-5,2,-8,-1,-8,8,-9,-4,-3,8,1,-10,10,-10,2,-2,10,-10,6,9,10,-1,4,-3,-10,-8,5,-10,10,5,-9,2,10,10,-5,-10,-8,3,-8,10,-9,1,-6,8,-2,1,-7,-1,-7,3,-9,7,5,1,8,1,2,9,6,-6,-10,8,-2,-4,-9,2,-1,-9,-9,-8,-2,4,5,-1,-1,-7,-6,8,-5,8,9,-4,-9,7,-3,-4,-5,6,2,-1,6,3,3,3,-4,-2,1,5,10,7,-8,6,-1,-3,4,7,-2,-4,-2,2,8,-10,1,8,-9,3,-7,-1,3,-1,-10,7,-1,-6,9,-10,4,-5,-7,-8,-5,-6,-2,-1,10,4,-2,-3,-3,5,-9,-9,9,9,7,4,8,6,-6,-7,-1,-8,1,6,-10,-7,10,-3,-10,-4,-2,8,-8],[-10,-1,1,-5,5,-8,-1,3,-7,-4,9,3,-10,2,4,2,2,-10,-5,10,4,-10,6,3,-4,4,-10,7,-3,-9,8,-3,-5,3,-2,2,3,-1,5,2,10,7,6,-9,2,10,-9,2,7,-8,8,-7,1,-10,1,-10,-10,10,-10,9,-6,3,1,3,-9,-9,10,8,1,2,9,-2,8,7,10,9,4,-5,-7,2,-9,5,-6,-3,-2,-10,6,2,-3,-9,6,3,3,-2,6,8,-5,-5,7,-8,2,10,10,-9,2,8,-9,5,-8,-2,-2,-8,-3,-10,10,9,-7,-9,10,2,7,7,2,7,10,-2,10,-3,-4,3,-2,7,1,8,5,1,-1,-7,-2,-3,-6,7,7,-8,5,-9,4,-8,-4,-6,8,1,8,4,-4,2,-2,-5,3,3,7,-6,-10,5,3,-2,-9,-2,-1,-6,-3,-7,9,5,-7,9,10,4,10,-1,1,3,6,-4,2,-4,-8,10,-4,1,-1,7,6,1,-1,10,-8,9,-10,1,-4,-7,-7,-4,-1,-6,5,-6,-3,10,1,-3,1,-1,6,3,8,-4,8,-9,3,5,-7,1,-10,-5,1,8,-3,-2,-2,10,-8,8,-2,-7,2,-5,5,-2,-8,-5,-6,-10,-3,-7,1,8,4,3,5,-3,4,-8,5,-3,9,-2,1,4],[-6,3,-10,5,7,10,-10,8,10,-2,-8,-7,-2,-1,-9,-9,8,2,-2,-4,5,-10,-6,10,6,10,-6,10,4,-1,6,9,1,-4,8,-2,1,-9,-2,-2,10,2,-8,2,-4,6,4,-4,9,-7,-7,2,-1,-6,10,1,1,-6,6,3,-2,7,-4,-10,-2,-10,6,-6,2,9,-1,2,4,3,5,-7,2,-2,7,-9,-10,8,10,-4,8,-4,4,3,3,7,1,-2,9,1,-7,7,-1,3,10,4,1,-1,4,-4,-1,5,-8,-4,3,5,8,-7,-8,2,8,-8,-6,7,-4,-8,-3,-6,10,-7,9,-2,3,-8,2,9,-8,10,-9,-7,-9,7,-8,4,-4,2,3,10,5,-9,10,6,8,-3,2,-9,4,4,10,9,-9,9,5,9,9,-5,-7,-6,-7,-9,8,-2,3,-4,4,-9,4,-4,-5,-7,3,3,4,-5,2,-2,4,-5,-1,-10,-2,-5,-4,3,4,-8,-3,8,-2,-10,7,-7,7,-7,-10,-3,-7,9,9,-5,-4,-1,3,6,-10,-2,-8,7,-10,4,-3,-2,-5,-4,-3,-7,-9,3,8,9,-6,7,1,-7,-8,9,-8,-4,2,-7,-4,-1,3,-6,5,-10,-8,5,9,-8,-5,-2,10,5,-1,-6,-7,9,2,2,3,-10,-7,10,-7,6]], dtype = "uint8")#candidate|13031|(6, 260)|const|uint8
call_13027 = relay.TupleGetItem(func_11776_call(relay.reshape(const_13028.astype('float64'), [35,]), relay.reshape(var_13029.astype('float64'), [5, 28]), relay.reshape(const_13030.astype('float32'), [4, 8, 7]), relay.reshape(const_13031.astype('uint8'), [1560,]), ), 1)
call_13032 = relay.TupleGetItem(func_11781_call(relay.reshape(const_13028.astype('float64'), [35,]), relay.reshape(var_13029.astype('float64'), [5, 28]), relay.reshape(const_13030.astype('float32'), [4, 8, 7]), relay.reshape(const_13031.astype('uint8'), [1560,]), ), 1)
output = relay.Tuple([call_13020,call_13027,const_13028,var_13029,const_13030,const_13031,])
output2 = relay.Tuple([call_13021,call_13032,const_13028,var_13029,const_13030,const_13031,])
func_13033 = relay.Function([var_13029,], output)
mod['func_13033'] = func_13033
mod = relay.transform.InferType()(mod)
var_13034 = relay.var("var_13034", dtype = "float64", shape = (35, 4))#candidate|13034|(35, 4)|var|float64
output = func_13033(var_13034)
func_13035 = relay.Function([var_13034], output)
mutated_mod['func_13035'] = func_13035
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_13039 = relay.TupleGetItem(func_10895_call(), 0)
call_13040 = relay.TupleGetItem(func_10897_call(), 0)
func_12758_call = mod.get_global_var('func_12758')
func_12759_call = mutated_mod.get_global_var('func_12759')
call_13041 = relay.TupleGetItem(func_12758_call(), 0)
call_13042 = relay.TupleGetItem(func_12759_call(), 0)
func_11148_call = mod.get_global_var('func_11148')
func_11151_call = mutated_mod.get_global_var('func_11151')
call_13052 = relay.TupleGetItem(func_11148_call(relay.reshape(call_13039.astype('float32'), [6, 3, 8])), 0)
call_13053 = relay.TupleGetItem(func_11151_call(relay.reshape(call_13039.astype('float32'), [6, 3, 8])), 0)
func_4480_call = mod.get_global_var('func_4480')
func_4483_call = mutated_mod.get_global_var('func_4483')
var_13062 = relay.var("var_13062", dtype = "uint32", shape = (320, 4))#candidate|13062|(320, 4)|var|uint32
call_13061 = relay.TupleGetItem(func_4480_call(relay.reshape(var_13062.astype('uint32'), [10, 8, 16]), relay.reshape(var_13062.astype('uint32'), [10, 8, 16]), ), 0)
call_13063 = relay.TupleGetItem(func_4483_call(relay.reshape(var_13062.astype('uint32'), [10, 8, 16]), relay.reshape(var_13062.astype('uint32'), [10, 8, 16]), ), 0)
func_12758_call = mod.get_global_var('func_12758')
func_12759_call = mutated_mod.get_global_var('func_12759')
call_13070 = relay.TupleGetItem(func_12758_call(), 4)
call_13071 = relay.TupleGetItem(func_12759_call(), 4)
func_10267_call = mod.get_global_var('func_10267')
func_10270_call = mutated_mod.get_global_var('func_10270')
const_13090 = relay.const([-1,7,-6,-6,-6,-4,8,1,9,6,4,6,5,9,8,-7,6,8,6,2,-1,-4,4,-2,3,-8,-3,-10,4,4,-7,2,5,-5,1,5,-4,3,-2,2,3,2,-6,6,-2,-1,-1,2,10,1,5,-3,2,-8,1,4,1,9,8,7,-8,-9,-1,7,10,-3,3,-5,-4,-1,-4,8,-1,-5,4,9,10,1,10,-3,7,5,-3,-4,3,1,-10,-7,6,2,-3,2,-2,5,2,-2,3,6,10,-3,7,2,-5,-2,10,2,4,7,6,8,9,6,1,-9,4,-4,8,-10,-7,-3,-6,-10,-9,-6,10,-5,-8,-2,5,-10,3,-1,3,5,6,9,-5,2,-8,10,-6,5,-8,-5,-8,3,2,-6,7,-5,9,5,-4,9,9,8,-6,1,1,8,-10,5,-5,7,2,3,7,-7,-6,3,-8,1,3,10,6,5,9,10,-1,-3,2,-6,5,9,8,7,2,-9,-7,-3,7,3,-10,-7,1,-5,8,-1,3,-4,-6,8,-8,5,8,-10,-7,-10,-5,9,-10,10,-4,-3,-5,-1,-10,8,-5,-1,2,9,-4,6,7,9,8,5,2,-2,-5,-9,9,10,2,-9,5,-4,9,10,5,-3,-1,-8,6,-2,-10,-3,8,-7,9,5,-5,4,-10,10,-6,-2,-1,9,-10,-6,2,1,7,10,-5,-9,-5,4,7,-5,-7,9,-7,5,9,-10,-3,3], dtype = "int32")#candidate|13090|(280,)|const|int32
call_13089 = relay.TupleGetItem(func_10267_call(relay.reshape(const_13090.astype('int32'), [10, 7, 4])), 3)
call_13091 = relay.TupleGetItem(func_10270_call(relay.reshape(const_13090.astype('int32'), [10, 7, 4])), 3)
output = relay.Tuple([call_13039,call_13041,call_13052,call_13061,var_13062,call_13070,call_13089,const_13090,])
output2 = relay.Tuple([call_13040,call_13042,call_13053,call_13063,var_13062,call_13071,call_13091,const_13090,])
func_13092 = relay.Function([var_13062,], output)
mod['func_13092'] = func_13092
mod = relay.transform.InferType()(mod)
var_13093 = relay.var("var_13093", dtype = "uint32", shape = (320, 4))#candidate|13093|(320, 4)|var|uint32
output = func_13092(var_13093)
func_13094 = relay.Function([var_13093], output)
mutated_mod['func_13094'] = func_13094
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11822_call = mod.get_global_var('func_11822')
func_11823_call = mutated_mod.get_global_var('func_11823')
call_13096 = func_11822_call()
call_13097 = func_11822_call()
func_12836_call = mod.get_global_var('func_12836')
func_12838_call = mutated_mod.get_global_var('func_12838')
call_13102 = relay.TupleGetItem(func_12836_call(), 2)
call_13103 = relay.TupleGetItem(func_12838_call(), 2)
output = relay.Tuple([call_13096,call_13102,])
output2 = relay.Tuple([call_13097,call_13103,])
func_13113 = relay.Function([], output)
mod['func_13113'] = func_13113
mod = relay.transform.InferType()(mod)
output = func_13113()
func_13114 = relay.Function([], output)
mutated_mod['func_13114'] = func_13114
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13113_call = mod.get_global_var('func_13113')
func_13114_call = mutated_mod.get_global_var('func_13114')
call_13132 = relay.TupleGetItem(func_13113_call(), 0)
call_13133 = relay.TupleGetItem(func_13114_call(), 0)
output = relay.Tuple([call_13132,])
output2 = relay.Tuple([call_13133,])
func_13139 = relay.Function([], output)
mod['func_13139'] = func_13139
mod = relay.transform.InferType()(mod)
mutated_mod['func_13139'] = func_13139
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13139_call = mutated_mod.get_global_var('func_13139')
call_13140 = func_13139_call()
output = call_13140
func_13141 = relay.Function([], output)
mutated_mod['func_13141'] = func_13141
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12182_call = mod.get_global_var('func_12182')
func_12184_call = mutated_mod.get_global_var('func_12184')
call_13166 = func_12182_call()
call_13167 = func_12182_call()
output = relay.Tuple([call_13166,])
output2 = relay.Tuple([call_13167,])
func_13177 = relay.Function([], output)
mod['func_13177'] = func_13177
mod = relay.transform.InferType()(mod)
mutated_mod['func_13177'] = func_13177
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13177_call = mutated_mod.get_global_var('func_13177')
call_13178 = func_13177_call()
output = call_13178
func_13179 = relay.Function([], output)
mutated_mod['func_13179'] = func_13179
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11921_call = mod.get_global_var('func_11921')
func_11923_call = mutated_mod.get_global_var('func_11923')
call_13214 = func_11921_call()
call_13215 = func_11921_call()
output = call_13214
output2 = call_13215
func_13260 = relay.Function([], output)
mod['func_13260'] = func_13260
mod = relay.transform.InferType()(mod)
mutated_mod['func_13260'] = func_13260
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13260_call = mutated_mod.get_global_var('func_13260')
call_13261 = func_13260_call()
output = call_13261
func_13262 = relay.Function([], output)
mutated_mod['func_13262'] = func_13262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12689_call = mod.get_global_var('func_12689')
func_12691_call = mutated_mod.get_global_var('func_12691')
call_13292 = relay.TupleGetItem(func_12689_call(), 0)
call_13293 = relay.TupleGetItem(func_12691_call(), 0)
uop_13299 = relay.sigmoid(call_13292.astype('float64')) # shape=(6, 3, 8)
uop_13301 = relay.sigmoid(call_13293.astype('float64')) # shape=(6, 3, 8)
func_10858_call = mod.get_global_var('func_10858')
func_10859_call = mutated_mod.get_global_var('func_10859')
call_13315 = relay.TupleGetItem(func_10858_call(), 0)
call_13316 = relay.TupleGetItem(func_10859_call(), 0)
output = relay.Tuple([uop_13299,call_13315,])
output2 = relay.Tuple([uop_13301,call_13316,])
func_13319 = relay.Function([], output)
mod['func_13319'] = func_13319
mod = relay.transform.InferType()(mod)
output = func_13319()
func_13320 = relay.Function([], output)
mutated_mod['func_13320'] = func_13320
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10958_call = mod.get_global_var('func_10958')
func_10960_call = mutated_mod.get_global_var('func_10960')
call_13321 = relay.TupleGetItem(func_10958_call(), 0)
call_13322 = relay.TupleGetItem(func_10960_call(), 0)
func_12775_call = mod.get_global_var('func_12775')
func_12777_call = mutated_mod.get_global_var('func_12777')
call_13346 = relay.TupleGetItem(func_12775_call(relay.reshape(call_13321.astype('float32'), [6, 3, 8])), 0)
call_13347 = relay.TupleGetItem(func_12777_call(relay.reshape(call_13321.astype('float32'), [6, 3, 8])), 0)
output = relay.Tuple([call_13321,call_13346,])
output2 = relay.Tuple([call_13322,call_13347,])
func_13350 = relay.Function([], output)
mod['func_13350'] = func_13350
mod = relay.transform.InferType()(mod)
output = func_13350()
func_13351 = relay.Function([], output)
mutated_mod['func_13351'] = func_13351
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12182_call = mod.get_global_var('func_12182')
func_12184_call = mutated_mod.get_global_var('func_12184')
call_13372 = func_12182_call()
call_13373 = func_12182_call()
func_5951_call = mod.get_global_var('func_5951')
func_5953_call = mutated_mod.get_global_var('func_5953')
const_13375 = relay.const([-5.838669,-7.399970,-5.211186,4.548682,3.092749,3.832969,8.128984,-2.105389,-6.746198,1.388835,4.512531,-7.361406,-8.431466,-5.731365,-5.654005,-9.902198,9.146235,-1.108849,-6.406531,6.898336,4.440097,-2.488049,7.058642,-8.570148,-9.721767,-9.788786,-7.641709,6.826233,-7.299005,6.768098,3.883814,2.176577,-0.970324,-6.152374,1.788363,-9.774319,6.701490,4.202103,9.909409,-3.226592,3.563854,3.449697,5.019488,-7.078709,-2.437333,-7.726201,9.789407,-7.340395,6.505436,1.997915,-6.750910,3.730154,-9.545465,-6.725978,3.014557,-7.965830,-9.565265,-2.623355,-3.919902,6.941989,-2.368404,2.932255,6.129228,3.213038,-2.266355,9.597950,-2.672260,-4.860240,2.571993,9.694301,1.985092,8.706521,9.124777,-6.506804,-9.202435,4.858128,7.158149,1.757381,-6.695441,-0.485766,3.827765,-3.050664,-0.162367,-1.813781,8.754303,-9.170063,4.020209,-1.548476,-7.890339,4.941817,-5.289448,9.829280,5.450198,-5.521469,-6.843821,-9.188552,-0.945303,5.466809,-7.460969,-9.524121,1.904378,-4.895134,-6.125404,-7.822602,9.083129,-9.346724,-1.050051,-1.793903,-9.423363,4.409683,7.885727,-0.020445,-6.041268,-7.832517,4.030595,3.451856,-1.388505,-6.966099,-6.984753,7.481265,-5.293846,-5.187602,3.724274,-0.855080,0.926415,-9.846855,3.778349,2.373577,0.283588,-3.194358,-6.127322,5.140342,-1.965668,-7.230764,-5.054342,-9.988100,5.758456,1.885001,5.154642,-8.795991,-0.194001,8.927115,4.525634,3.910771,4.665952,1.630294,5.518475,-1.715048,-7.196322,5.711090,-6.019139,8.390518,-6.133240,-8.260242,-0.213917,-1.015157,-1.373244,2.018475,-6.744753,-7.178979,-0.158949,-6.020704,-3.656371,8.110902,6.759116,-6.840613,7.837428,3.286093,-3.352533,9.693550,-1.739139,5.950339,-8.925788,-2.533808,-8.111268,-9.280388,-0.283548,-0.585142,4.920790,-7.030417,-6.659173,-0.700003,-9.336490,5.403002,2.209981,-1.808853,8.752724,-1.805042,-4.817488,-5.614446,4.128669,7.354815,5.222414,8.524471,-7.270069,7.997996,-9.505875,-7.759260,9.846687,7.161585,-3.073263,-1.604977,-6.184752,7.773084,2.542843,8.963619,-3.686723,3.642757,-2.266275,-8.982135,-7.953903,-8.490250,4.829229,6.480050,-0.271888,-3.852690,-3.857696,-9.229758,0.131540,7.660818,-5.643019,-6.036351,-5.841818,-1.182002,-6.215989,9.619904,1.510462,9.673808,-4.819144,6.464908,5.524977,8.333334,1.632821,-8.497497,-0.947984,3.799128,-2.788290,3.704600,0.606646,-3.059182,2.967852,-2.061403,3.627069,0.035789,9.747892,-4.305485,-5.956152,-2.085458,-4.459339,2.088859,2.234514,8.342543,-9.046972,-1.581178,-2.115146,4.150485,-7.846146,-6.189459,5.570403,2.548458,3.228123,1.995363,1.276749,6.047940,6.957977,-2.053413,4.333068,-9.508870,5.672381,-0.795127,6.091515,0.382430,8.887909,1.145915,2.250666,0.046552,0.354017,9.249780,4.290662,-7.783427,0.124728,3.881792,-4.609846,-9.558070,-2.022552,3.498936,-0.619884,4.658411,4.948827,-5.130313,0.495427,5.393189,-1.892608,9.521311,2.467181,-8.330090,6.802000,1.567515,-5.025090,2.252433,-4.672882,-1.631575,8.273036,4.758944,0.270354,2.906946,8.293737,5.192087,5.388987,9.678419,-2.358890,1.352104,9.000618,2.323306,-4.426725,-2.759079,9.254835,9.075541,-5.757288,7.952039,-6.037114,-7.075691,1.149905,-5.529354,7.515884,0.296887,2.574069,3.376794,-1.967317,-6.597675,7.814826,7.926702,-1.782230,7.044680,6.107173,-2.586903,6.395419,-4.832780,-3.199098,-0.199156,-0.266915,8.877901,-1.625900,3.787007,4.278280,-8.734371,-6.122311,2.529827,-0.022027,-8.508251,-2.969479,-4.393921,2.829963,-8.476204,9.869130,7.699277,7.495895,6.793334,6.411685,-6.593715,5.515980,8.634325,-9.657590,-0.674816,5.492443,0.101405,4.500957,-6.468231,-3.771468,-2.178332,8.140161,0.484372,-5.385759,-2.200323,2.543750,-1.380268,7.593555,7.627850,-8.791029,0.882652,-6.942936,8.094024,-7.818593,-2.474898,3.267395,-0.301870,1.538242,7.048110,-9.549418,0.887618,-3.101611,-7.350122,-6.997360,5.285028,2.451610,-0.494739,5.337957,0.878864,2.528259,-9.378500,-9.061335,1.991322,3.669707,4.294841,4.455962,9.993053,-1.655407,0.878151,4.070845,-9.123751,8.213399,-9.621073,-5.489216,-9.695236,-4.492336,-9.432347,5.630393,-4.656905,-9.934144,8.170526,-6.296919,8.078435,-0.482249,4.757695,-4.377555,1.498704,0.711644,-4.821160,8.676510,0.044519,-0.344002,9.405960,-4.732502,-6.539427,5.123010,-7.711571,-6.199070,8.859722,-9.392748,5.956108,-5.449822,8.312205,-1.546722,5.553814,-8.267047,4.373382,2.833691,6.459171,-7.070263,-0.073603,6.782062,-0.504469,1.401989,-7.881827,-3.721392,-6.679593,-3.093122,-1.510373,7.660664,8.830203,1.972640,-2.990222,4.541195,-8.647168,4.704272,9.244929,1.419226,1.348521,4.548764,-1.011163,9.008058,-5.288600,-2.349139,-2.459321,6.539380,-3.841558,3.376041,6.716577,-8.259602,-8.380902,-7.011203,-8.821349,7.681433,-8.970155,9.631252,2.450271,4.874047,4.099342,-3.070322,-0.692694,9.969280,-2.083541,6.747311,9.052315,1.586384,-5.781088,5.865397,8.485929,-7.080680,-6.842472,1.401451,-2.085366,8.966371,-2.829219,4.933994,7.953720,6.553811,7.294915,9.559673,-8.197974,4.109842,6.695843,2.442946,9.130592,-9.286616,-4.593519,3.266886,1.770535,-0.961440,4.682369,-7.885132,-8.334788,-9.581033,-1.045642,-6.167704,7.423665,4.112862,-2.161246,0.569228,-3.985873,6.552633,9.912270,7.515922,-5.159067,9.725535,-2.443885,-4.739774,6.223964,-5.323053,7.956001,6.284224,-9.832491,6.189745,2.139669,2.039409,-0.745491,-4.410149,1.060725,-2.543613,5.402820,1.948622,8.518224,-3.235973,4.446505,5.152570,9.735930,9.699253,4.145935,0.209910,3.400732,8.823162,0.111760,-8.644645,9.154393,-8.140626,-5.446283,-0.474362,-3.758867,-9.819829,-1.393538,-5.281013,-6.828724,1.640633,-6.483232,3.927999,2.206106,3.367287,-9.353451,-7.846053,5.693120,9.469605,-8.747454,7.638202,-1.497435,-9.348299,8.271489,9.490808,-3.578158,-1.413734,1.750251,8.664404,-6.621744,1.464308,-4.556939,-3.119373,6.798832,8.979061,-8.370440,-2.839533,-2.654575,9.505393,5.552640,-5.987639,7.885443,-7.671513,-9.248628,-4.019111,-6.798029,7.600115,4.160327,-9.132447,3.299695,-0.462769,5.379412,6.441959,-5.879486,1.701384,7.304823,6.650376,-9.700102,4.232911,4.281512,0.057215,4.652604,-0.408140,3.774565,7.677480,-2.019227,-9.026625,-1.692024,-2.253184,-3.862670,-7.003528,2.711279,-4.296443,5.916918,-0.832586,6.672328,0.435692,-7.648374,5.580326,-8.623618,9.474867,6.104946,-9.706123,9.444400,-4.781560,8.230846,0.709621,-7.143236,-7.655639,1.188280,2.173906,6.353383,1.248678,-3.657596,1.014086,-0.732437,-9.520023,-9.143776], dtype = "float32")#candidate|13375|(660,)|const|float32
call_13374 = func_5951_call(relay.reshape(const_13375.astype('float32'), [4, 11, 15]))
call_13376 = func_5951_call(relay.reshape(const_13375.astype('float32'), [4, 11, 15]))
func_394_call = mod.get_global_var('func_394')
func_397_call = mutated_mod.get_global_var('func_397')
const_13378 = relay.const([0.275778,-2.112456,5.854892,-4.720213,9.711340,8.359463,9.530402,3.993454,6.261952,3.047573,0.283621,-6.906733,2.728079,-1.260786,-9.833452,4.575263,-3.728595,-4.063231,6.926030,-7.821900,-1.566918,-5.513618,3.181480,-7.391539,3.553486,-5.524487,8.062119,7.300897,-1.141149,4.648270,6.222898,-2.366404,-7.862719,-8.303575,2.217247,-4.178569,-5.666525,-0.577444,4.304713,-9.501783,-2.831578,8.720855,-1.224637,4.119590,7.181255,2.808489,3.902026,-0.724422,-1.537735,-9.542573,6.638482,1.865203,4.113995,3.656598,-3.213038,3.932175,5.941035,-4.404160,8.481425,-5.697337,-3.352438,-6.929493,-7.733059,-8.407613,9.206354,-0.969677,3.381990,-4.800351,1.164978,9.989854,-2.324049,7.718953,-2.464200,5.437412,2.917269,-8.509099,3.679032,9.142576,7.878442,7.256709,-1.065782,6.862002,8.987345,-7.500426,6.053267,9.506401,-8.509869,7.142631,-4.330222,3.204927,5.796228,-8.382216,-5.174001,-9.160902,8.425622,-0.750024,5.535622,3.382623,6.357511,-8.565146,-1.926330,-6.351579,-6.558759,3.351041,-2.764748,-5.594480,-0.379050,3.427819,-1.137013,-2.188065,5.855338,-4.943090,-4.635285,9.965959,9.385762,-3.113130,5.486979,6.317960,5.198809,7.389669,7.365857,6.077047,-0.642869,-1.669180,-3.941385,-5.746250,1.207109,-3.918532,-5.591310,9.555989,0.688249,3.640784,7.653553,-5.755597,4.155041,-8.047218,8.849666,-9.789288,-8.924133,6.381116,2.805826,-7.367504,-4.750063,-5.678251,7.276728,-7.233654,-0.711592,5.248629,-6.931263,-1.461385,7.921548,-7.780105,-4.188693,-2.473515,4.832585,8.734934,6.243847,8.423819,-4.759542,7.197349,-8.418155,2.863693,9.874179,-4.324675,-1.252816,-9.417856,8.946219,9.966403,8.332133,8.272569,0.722238,-5.247110,-0.409633,-9.212438,5.878556,-9.294720,7.479417,-6.340031,1.406806,0.336958,4.000909,5.932054,-1.832991,-7.660427,0.093527,9.561152,-7.365996,3.697449,9.461026,-1.832050,1.528793,-7.064465,-8.290267,-9.839998,7.461817,9.265394,0.387797,-1.536591,1.421599,5.939027,-8.111655,0.752134,-6.287531,8.232856,-9.469122,0.703559,0.953583,9.742951,-8.994675,7.403153,5.307539,6.511327,0.506890,-6.367351,-8.659730,0.384088,-8.402652,-7.343798,-7.635545,3.142817,0.958552,-0.687468,-2.237607,-0.179841,3.536293,5.291966,-9.104622,4.443201,-7.227692,3.146737,-7.519700,3.642553,8.713423,2.103382,7.683282,6.668725,3.817394,8.016891,4.344216,0.009714,7.520685,6.321472,4.639474,-9.121541,-3.125349,-2.112389,-5.211258,-4.475239,0.525416,4.838367,-4.127882,1.187510,6.875742,7.794318,-7.368224,5.963659,5.780167,-9.866939,-8.173254,-1.046163,-9.627783,1.950318,-9.562997,-0.657650,6.273830,4.722428,-8.606280,-6.564246,7.375879,-6.683883,-0.473164,-2.317127,-1.816714,-5.983576,2.815381,-2.106261,3.357915,-0.726281,0.480784,-8.739726,2.193162,-9.997905,-5.729657,8.214721,-5.732940,-8.682521,4.112856,4.837742,3.365656,-3.777831,-4.930759,-2.191141,-6.371185,-2.845507,9.223631,5.344195,-5.779005,1.649494,-0.099172,-5.140667,-2.688036,1.525322,9.078969,-4.666482,-5.639918,3.744274,1.705433,-0.524815,5.505475,8.682654,3.030274,9.938213,-7.677729,2.784834,1.441384,0.086763,-6.370107,3.996216,8.116369,-0.219968,2.636348,1.398928,5.571764,-9.027465,-5.353116,1.899847,-9.601961,0.626232,3.553558,8.246289,-6.180833,6.211921,5.259116,9.013060,-6.784654,-8.938510,5.299448,-3.784451,-5.914854,7.396014,-7.967606,-0.203268,5.547481,3.834067,-8.439671,2.044211,0.010717,5.667930,-4.751409,-9.682896,-7.369569,-2.633512,-2.151621,-0.282908,2.660827,8.325108,4.962202,6.735407,9.401029,2.231528,4.140445,-9.303703,0.195999,-1.095655,-7.272943,-1.152404,2.664769,3.314008,2.864465,-6.180467,4.901528,-3.509183,-0.160808,-2.530517,-2.878786,2.829045,-8.434895,7.447620,-6.815864,1.435362,-0.874036,0.288584,-3.540034,3.704834,6.574571,2.258799,5.547547,2.542830,7.920776,0.796387,5.003007,3.592370,-8.609478,-2.914917,-3.139157,-9.593447,6.700750,1.333850,-3.472083,-6.512758,-2.506955,-3.706950,0.004359,7.128845,8.438882,4.620657,-6.428384,0.659045,9.419450,1.835395,1.762765,-1.711216,8.881344,6.789180,-3.510400,6.714101,0.538018,-5.256315,4.355235,2.288773,-4.432488,-4.749821,7.845741,0.618016,1.793209,4.067971,-1.974420,2.413793,4.406824,7.398938,-7.053108,-5.918268,6.293574,7.827069,4.743749,8.275033,4.519868,-4.789654,5.775423,0.224026,-4.059453,-3.326279,-8.097829,-3.519211,-3.504552,3.250050,6.723794,-6.605684,-6.565096,2.598676,-1.093790,2.012573,-9.099117,-4.628964,6.785912,-5.495079,-8.838750,8.554263,5.731943,-1.588568,8.862408,-2.843822,-4.297321,4.939762,-6.009477,-4.923717,-8.588543,-3.096903,7.022692,-8.793903,-3.124685,-8.070110,8.151190,0.886078,0.080957,-0.436088,7.509353,5.318848,3.365042,-9.243780,-8.302714,-0.127320,-0.702963,4.135447,-7.037368,5.047641,1.208444,2.481623,5.174289,0.166153,7.725835,4.745758,-4.822040,-5.766792,-4.140717,-8.697756,9.347334,9.417033,8.365196,1.535313,-6.320872,6.312674,-9.956854,7.829929,1.734311,-3.404950,-6.789956,-9.226390,9.863611,9.390315,2.072344,-0.931423,-1.700015,2.763268,-0.853614,1.485948,5.923368,-2.498231,-5.817481,1.547619,-1.342254,-8.753555,0.512738,-1.770965,6.845271,-4.097685,1.237284,6.497400,-4.708311,9.828596,2.318725,-3.253954,0.137751,-2.603068,-6.195869,-1.826433,0.190088,6.781652,7.634292,7.414871,3.025183,1.208407,-0.710963,0.912756,9.892321,-8.328601,0.861492,7.590622,3.990938,-5.707410,5.370409,0.535042,7.889161,-6.592436,-6.115526,6.540976,3.266406,-8.543170,5.483114,5.439203,-8.810174,2.260215,-0.743257,9.113939,-0.918856,7.476241,-1.215097,9.023008,5.663736,-8.247463,5.440396,-9.567403,-5.068242,3.543469,-2.439671,0.480268,-9.502530,-0.106426,9.528667,-5.354219,-6.728884,-8.098270,-8.154632,-6.417282,5.012706,2.770744,2.564623,4.145385,-5.791540,2.125386,3.218687,-2.949075,-6.917389,-5.588282,-8.822744,8.558101,-9.726379,3.982917,8.113951,3.498498,-5.797648,-0.400246,-2.784328,7.071017,-9.404583,5.869034,2.263620,9.749529,-3.939057,-0.847310,-3.884994,1.753796,4.527479,-0.304539,3.202393,7.239192,-2.194107,0.884787,7.638125,-0.757608,0.050668,-0.458566,9.597167,-3.131483,4.120781,-4.199485,7.805315,3.812913,-7.017289,5.589905,2.010166,5.945818,-2.167534,-4.977863,5.979779,5.399721,-2.921713,-7.832645,3.232621,0.767967,6.923348,5.839140,-3.208966,5.282720,-1.225340,-9.243377,2.606772,9.082934,-9.185919,7.787616,-4.855505,-4.926178,-4.119441,-0.774287,-2.652644,0.885630,4.204749,-1.331393,2.550522,-2.210130,-8.440872,2.613627,-5.533775,-7.181795,-1.300214,3.910649,-8.041029,3.706127,-7.763966,0.093441,7.922631,-9.255467,9.824821,-2.497584,-3.244855,-2.471456,8.730657,-4.714502,-3.158199,-7.241901,-4.022649,-7.719494,-1.196984,-9.914729,8.054738,9.029513,-9.432369,-6.379144,-8.850739,-5.794615,9.801874,7.031864,-0.456558,4.056266,-1.445644,3.799246,1.598483,-6.241827,6.992521,-0.093968,-2.304887,4.261730,7.129588,-3.511123,1.461319,-0.432749,7.477789,4.367575,2.887117,-1.957227,0.055803,-4.063880,1.684801,-3.011677,9.675524,-2.566059,-5.024611,-9.739931,6.068537,0.943588,6.569918,2.485847,0.824686,-3.826244,8.776971,5.401105,-1.725478,0.349916,-5.860747,-2.255798,-1.970170,0.898945,2.941622,-2.970216,-4.613260,1.519637,1.192957,-2.740122,4.758861,4.365903,4.245526,1.995729,9.587419,-9.417036,-4.167133,0.426987,4.716957,8.342294,3.607831,5.602705,4.247412,5.837855,6.586820,-4.199435,3.254625,-6.355738], dtype = "float32")#candidate|13378|(756,)|const|float32
call_13377 = func_394_call(relay.reshape(const_13378.astype('float32'), [9, 14, 6]))
call_13379 = func_394_call(relay.reshape(const_13378.astype('float32'), [9, 14, 6]))
func_3769_call = mod.get_global_var('func_3769')
func_3774_call = mutated_mod.get_global_var('func_3774')
var_13397 = relay.var("var_13397", dtype = "uint8", shape = (720,))#candidate|13397|(720,)|var|uint8
const_13398 = relay.const([8.527876,4.260447,-2.138396,8.586458,-6.628402,-0.808163,5.812072,-3.155989,5.689592,-4.541439,6.683115,-8.967631,6.777552,5.274047,-7.830949,8.286999,5.618041,-8.932976,-6.730831,-5.916544,9.449190,5.464706,5.830542,1.305093,6.577841,2.758574,3.736710,1.902201,8.820623,8.100333,4.899433,9.248904,-2.765782,4.490357,-8.103408,3.406882,-4.568519,-7.497823,-4.095507,-2.149169,6.498689,-7.683900,6.914195,2.775456,-6.943768,-0.590407,-5.935484,5.485760,4.266352,3.185795,-4.692040,5.473499,9.138176,8.694950,-3.316652,9.424238,0.459253,-8.004495,-4.067407,7.326741,-5.347878,-4.457283,-8.508913,4.920370,-0.554096,9.928414,7.606078,0.638985,-7.074890,3.908667,-7.705876,5.859812,-6.087794,-0.465010,5.010233,-1.889481,-3.858801,-4.893954,-7.921708,-9.927633,-8.669794,7.968075,8.547771,0.937392,6.750191,-1.565826,9.015323,1.655632,3.062144,-8.095904,-7.365967,-4.425494,-6.829593,0.009572,1.420217,6.819733,0.267203,3.985514,-5.710544,-7.232557,9.077713,9.728842,-2.054425,8.746068,7.725730,1.760600,-9.578098,-7.418206,-1.764000,3.765836,9.200468,-8.560023,2.551508,4.235387,-2.756650,-8.532481,-1.454102,-3.583333,-6.041610,-9.060497,-8.713281,1.790831,-8.136343,7.651083,3.440372,-3.306702,6.964100,5.287170,-0.368629,-8.814487,9.936769,7.370941,0.357156,-6.971451,2.474634,9.053714,-5.469696,-0.025748,-2.880242,-1.295788,-0.997450,-1.347456,6.194797,-1.209701,8.038569,-1.362875,2.718697,-0.560847,7.216242,9.680321,-7.513833,-9.135164,2.932629,5.446245,-6.512284,-4.340823,-5.331036,8.566873,-3.710003,6.910332,-4.534349,-4.117004,0.406831,-4.364924,-4.631447,1.840991,-3.163394,5.965686,-6.916572,8.317982,-0.533356,5.829296,2.200198,-2.910649,8.473850,1.383259,5.380433,8.830543,-7.423441,-7.465001,9.936478,0.929694,4.533469,-7.469057,3.900597,2.570162,9.176299,-1.614323,6.145803,-8.874984,0.224920,-6.089793,-6.077600,1.871783,-1.178884,5.545469,-4.746663,7.485667,4.635935,5.828721,-0.989953,6.892033,-8.432607,-7.624037,-2.693997,-8.882064,-9.494193,4.719487,-1.754550,4.478053,-3.556640,9.070948,-4.005172,-2.290669,-3.842167,-9.020838,-2.317158,-9.879375,-2.739731,-2.147611,7.118446,-9.675277,-5.788907,-7.972593,-0.174387,1.271672,-1.762064,3.767900,4.529242,1.123770,-6.912460,-7.234867,3.684839,8.853495,8.270287,-1.238819,-2.437052,-2.257655,-9.698655,4.451075,1.450798,4.305522,1.332181,-5.495092,8.478999,-0.214007,3.450501,-6.155745,9.601284,-0.171899,-0.501032,-9.865541,7.191549,8.229024,8.385153,0.643558,2.190756,7.640040,6.267562,2.085095,9.713724,-6.454988,1.339483,9.046818,-1.295819,6.207947,-8.195748,9.005583,3.714800,-0.084183,-2.931819,3.981688,-4.431183,-7.706126,-4.401336,-4.551245,-1.608017,-6.515782,-5.474110,-0.738064,-9.347534,1.686362,2.737477,-2.725917,0.321552,-3.339350,-0.262040,9.386103,-2.252978,6.130342,0.265868,-8.446306,-6.458089,9.252895,-0.086463,-1.860090,-1.198654,7.583380,-3.845186,-6.859019,-5.501920,1.598964,-8.997122,-8.967473,0.186693,3.661668,3.080963,-6.536334,-2.928062,-6.918322,0.825057,5.366685,-6.885806,-3.028750,1.599433,-4.156420,2.689036,-5.425989,-6.252196,-5.155738,-6.761877,8.086264,3.207395,-4.391595,4.790112,-0.812314,9.355769,-0.964267,-1.365953,-9.639127,8.274300,-7.966529,6.728508,-6.756637,7.298294,8.903691,-9.190404,6.231990,-9.105176,-0.132344,1.411295,-7.433777,-3.841856,-6.520699,2.215175,-7.714865,-4.726260,0.089795,-0.421828,2.526752,-4.213639,0.695163,3.427878,-3.765976,-0.510801,-9.077123,1.774858,-8.546758,2.308720,3.404511,-5.127580,-0.962009,-1.327756,-6.473606,3.278250,-2.598162,-1.726036,9.071693,-4.866407,9.231302,-0.985732,-7.738784,-7.246516,7.135475,-2.767782,5.053111,4.235334,7.330420,0.657377,-7.012833,2.255771,8.149319,-9.164921,-5.624100,-4.384397,-9.166531,9.123948,9.457352,8.316865,6.278192,9.749973,-6.720377,-4.040455,-9.193226,0.097422,9.805608,7.291059,-4.548843,7.562814,-1.088632,-3.104435,-2.480354,-5.389844,-1.961777,-9.233263,8.551142,-4.950070,-7.499935,3.297557,-9.902705,9.205682,2.477605,-9.674693,1.004390,-7.958289,-4.943878,-1.366875,-2.354422,-7.863680,-2.636384,9.614496,-0.111245,-8.678653,-0.013777,3.017720,-6.552909,-5.331526,0.801531,-6.567950,-0.856615,-1.755532,7.556963,9.608767,0.989163,-7.605678,3.645028,3.887903,7.998068,-5.718570,7.049346,2.751644,5.046054,-0.036362,-1.126311,5.381707,2.909792,9.197767,-8.138503,1.884188,-4.588654,0.208650,5.762183,9.201878,-0.331166,-3.501294,5.287883,-8.647839,-4.100346,0.887518,9.630125,8.406371,7.512760,1.237402,-3.379286,1.295116,2.112386,-3.866283,-5.812130,2.410635,2.637133,-8.375945,7.699154,9.657561,6.612342,1.158291,2.390178,-4.822069,1.164625,-9.839126,-2.061285,3.624229,8.562689,-1.728217,8.293924,-4.412959,8.355061,-3.724914,7.570071,-0.356766,-9.472246,1.071052,6.651020,-8.201314,-2.508732,-3.262408,0.022185,-3.356299,9.061864,-8.611189,-2.602681,4.029082,3.770972,2.168615,-5.825954,-3.937903,2.611687,-6.361779,9.983037,7.772112,-0.504005,-5.961592,7.904481,-4.979458,0.923627,-3.687229,1.171250,3.439266,8.133540,-8.354454,7.679932,-5.469807,-7.966695,8.648111,-6.930585,1.521224,-2.719660,-8.018310,-6.405380,-5.601294,0.156144,-0.271855,-4.802856,7.233779,-8.202564,3.209190,-6.129105,-7.164649,8.220650,-1.584384,-7.515008,-4.756029,9.939895,8.926794,7.838986,0.590463,-5.765033,7.293863,-1.345324,-7.416951,-5.036812,-4.774465,6.530940,-9.015858,-1.167126,-1.729053,-1.234179,0.088997,5.536705,-1.409048,-5.230025,7.972911,3.544937,8.259615,-3.490602,-5.256562,-5.785102,3.856947,0.788329,-7.587631,2.788552,-8.198735,7.898595,7.437283,-6.436364,1.000967,-4.885330,4.379489,0.835426,5.774309,-4.196522,8.692664,-6.899130,5.278899,-8.844196,7.784540,-2.794501,9.031590,0.682850,0.253207,-2.862519,-3.532502,7.784356,-0.954749,-2.238613,-1.343317,0.293241,7.579374,8.174979,0.082557,-7.583517,1.243195,6.871374,-2.218849,5.973618,-8.239925,-1.941220,-8.989591,0.127527,5.584109,-6.978123,-6.169389,4.283978,1.329721,-4.193210,-9.837456,6.660873,-7.251750,-7.101796,2.509660,-2.795080,-1.360835,-1.559738,-1.913912,7.259742,-0.297299,-3.058197,-4.880026,-5.166925,-6.608349,-7.053270,-4.187530,-9.771028,-4.870312,0.083890,-8.545508,-6.903434,7.011841,-3.919568,-7.836630,8.780251,8.706177,1.043571,3.298056,-5.211919,1.669086,-5.898841,-4.867719,-1.691862,0.663626,1.931882,1.929794,-5.530902,-8.313062,-9.910179,8.663818,1.629930,3.228739,-5.800888,3.176178,-4.138362,9.260360,-0.927976,6.270704,3.884719,-1.483387,2.047625,-2.214831,-8.241600,-8.598746,3.383080,-9.307800,-5.292225,1.765165,-2.203284,1.699111,1.741892,7.640964,6.024762,-3.778811,-1.493730,2.264630,-2.723317,2.322966,-7.345855,-8.081963,3.968876,8.803196,-1.931880,-4.171994,4.069728,-3.481940,7.888315,-8.343089,-6.357099,2.699397,2.234533,-7.973794,-4.461508,7.612954,2.743723,-6.585457,-3.081831,0.830557,-0.788998,-5.559862,4.855228,0.332140,-7.399634,0.470610,-0.792294,0.875120,3.705427,-4.340710,-2.825615,8.989221,6.283648,-0.543797,4.751461,-5.704244,-7.546465,3.814694,9.296171,-4.969960,-8.570980,8.536832,-7.790970,-4.980927,-5.040740,1.384090,-6.623836,8.342533,-0.004031,-3.469747,4.192443,9.127657,2.959072,4.339395,1.896589,-5.058112,-0.427467,5.287777,7.123951,-9.665339,-6.118757,-0.095884,-9.386337,-1.029011,7.194033,-5.764910,8.172549,-5.982073,-6.389621,-1.389597,0.436345,2.083995,-6.128929,-3.414978,8.823182,1.888391,-8.782924,-3.313355,1.423255,5.834559,9.616146,5.662132,-5.485979,5.074329,-0.031804,-7.870854,3.310106,3.047264,-6.077364,8.410081,-1.500158,3.380141,-4.990444,-7.074506,-8.907755,-5.629079,0.192057,7.502750,-7.453254,6.160577,-0.600524,-9.176574,4.126002,1.910576,-1.679615,1.222348,2.389044,5.115995,0.063977,-5.809657,-9.506298,5.668432,-6.104364,1.579444,-1.238969,6.395542,-6.991345,-5.319657,9.225334,-3.101259,-2.284068,7.012589,-1.933400,0.088853,-7.730892,-1.576523,-3.768608,-9.546809,-3.004509,0.625352,-0.784194,7.778166,2.516882,9.665866,9.317265,-5.962622,8.720764,9.121248,-8.728355,9.753915,-5.104828,6.739945,-2.135742,-2.798790,6.233791,5.719118,-7.335177,4.506415,-1.732837,9.075273,-2.005237,4.594883,2.985162,2.340494,2.548096,-2.639086,-8.836220,-3.815626,2.620274,3.840473,6.765413,6.479772,5.078488,5.673228,7.750503,9.562386,-6.446217,1.059914,-9.043894,6.090620,-6.051130,2.828959,-0.878704,2.947286,-9.155697,-9.825110,2.321082,-1.010912,-7.823640,-1.530119,-4.591500,9.344366,-2.415498,-7.710785,-2.211586,-0.928997,6.206241,8.862932,5.576824,9.619922,-9.075675,8.966998,2.803604,-6.889136,7.468446,3.392331,9.414300,-0.737453,-7.858117,-1.999374,6.228532,0.134152,-1.251332,-4.341506,1.221361,-2.336463,0.171464,8.690390,1.857030,6.007284,-4.144463,-1.467858,2.744776,5.633861,6.142060,-9.685267,-4.371644,1.447100,8.736486,-1.124956,0.825472,-3.606944,1.957239,-4.188546,7.188926,9.479626,-7.481521,2.528078,2.087733,1.136427,-1.193532,5.084332,8.170434,-7.545397,-1.027638,1.553874,8.928425,-0.579302,0.134327,3.232418,-9.066888,-9.697487,-4.347421,0.807073,-5.850133,-9.470114,-8.372610,9.211063,-4.811832,-6.658219,3.310608,-4.555040,7.981139,2.682847,6.675015,-8.240939,6.898041,1.040022,-1.326187,1.183013,5.750767,-2.088685,7.021647,-4.196293,7.504184,-3.499927,-0.023799,6.836477,-2.262466,1.722886,8.837949,5.971591,-6.477277,-6.784808,0.911148,-5.239840,4.497052,4.082896,-7.845216,-4.330723,-0.308517,-9.683813,1.233968,9.609536,-1.674270,-8.844977,-2.088391,5.625645,-6.778329,1.524501,1.490857,-0.497181,-9.292158,-8.395499,6.220409,-7.924597,4.162583,7.531350,-8.304349,-5.897334,3.715668,-4.050858,7.640508,-9.545680,5.811643,7.424172,5.525116,2.564721,2.699996,1.514627,-4.201180,6.188431,-5.851914,5.935341,9.153146,-7.592407,-5.470001,-0.487040,-7.215461,6.133192,-9.045418,-4.398874,-8.408372,-4.104594,7.839201,4.953512,4.275282,-4.420739,4.128166,8.261259,2.879186,8.528327,-2.606155,8.098139,-8.273951,1.849299,-2.410315,9.350288,5.261446,-6.380329,0.833791,5.685065,-2.933631,-9.272745,1.388405,-5.088097,0.300374,-8.776429,2.487853,-9.717807,-9.225449,3.954406,-3.427134,7.074609,-3.477961,-8.069455,9.271950,-0.912663,3.798109,0.751075,-7.859695,-8.946849,2.310359,-4.038894,-0.756475,2.157149,-3.780386,5.651380,3.434852,-0.853602,6.940799,6.681610,-1.997058,-4.297994,-5.355195,-7.024707,-3.787172,6.826161,1.780744,-5.982434,-0.214684,-3.476425,-7.988585,0.437896,8.018988,9.980130,6.012792,0.653218,9.918551,8.157581,-0.328884,-1.688050,-6.780102,-7.145370,0.929028,-0.953652,-5.056149,-3.261652,-3.424344,-6.588197,-4.001974,-0.309818,-2.302148,3.367618,-2.365077,-9.653535,9.587990,8.221718,-3.461125,5.492024,-9.446050,4.488115,4.360260,-6.509829,-4.970873,3.716125,-1.266958,-2.412814,1.035542,-1.218042,-8.149490,-4.704071,-1.106508,-0.777545,-0.262800,-5.578687,0.015939,3.449621,-6.452698,-6.942788,7.152784,4.549362,-3.709235,-0.193703,3.939847,1.073498,2.593271,8.854244,2.672573,-5.152189,-1.877907,-8.584508,7.534072,-6.493108,3.388650,-6.193672,-0.271412,9.163845,3.523213,-2.033508,-4.137975,-3.219549,-5.073140,7.257792,1.098457,6.044004,0.450381,4.050854,4.827654,-1.690053,5.706892,0.613278,-1.809264,-3.896707,2.204775,-9.346744,-2.347250,4.818268,7.047395,-0.513065,2.264244,-7.615206,8.658354,7.398072,2.736400,-8.377235,-3.658680,-9.612544,-0.437334,-7.813152,3.093643,4.312610,5.827818,-8.678134,-6.404651,-8.701140,-5.546258,-9.596577,-3.627132,9.679268,2.410306,-7.980436,3.127017,-1.701545,4.900004,5.141252,1.189829,-5.230078,-7.823635,0.590390,4.182819,-1.141142,-9.653559,-2.233897,-4.682816,-8.197546,5.924651,3.894243,8.600014,-5.350253,-7.279947,-9.942638,-9.551163,-4.623704,5.741432,4.329373,0.926742], dtype = "float64")#candidate|13398|(1200,)|const|float64
call_13396 = relay.TupleGetItem(func_3769_call(relay.reshape(var_13397.astype('uint8'), [9, 10, 8]), relay.reshape(var_13397.astype('uint8'), [9, 10, 8]), relay.reshape(const_13398.astype('float64'), [4, 300]), relay.reshape(var_13397.astype('float64'), [9, 10, 8]), ), 8)
call_13399 = relay.TupleGetItem(func_3774_call(relay.reshape(var_13397.astype('uint8'), [9, 10, 8]), relay.reshape(var_13397.astype('uint8'), [9, 10, 8]), relay.reshape(const_13398.astype('float64'), [4, 300]), relay.reshape(var_13397.astype('float64'), [9, 10, 8]), ), 8)
output = relay.Tuple([call_13372,call_13374,const_13375,call_13377,const_13378,call_13396,var_13397,const_13398,])
output2 = relay.Tuple([call_13373,call_13376,const_13375,call_13379,const_13378,call_13399,var_13397,const_13398,])
func_13409 = relay.Function([var_13397,], output)
mod['func_13409'] = func_13409
mod = relay.transform.InferType()(mod)
mutated_mod['func_13409'] = func_13409
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13410 = relay.var("var_13410", dtype = "uint8", shape = (720,))#candidate|13410|(720,)|var|uint8
func_13409_call = mutated_mod.get_global_var('func_13409')
call_13411 = func_13409_call(var_13410)
output = call_13411
func_13412 = relay.Function([var_13410], output)
mutated_mod['func_13412'] = func_13412
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12182_call = mod.get_global_var('func_12182')
func_12184_call = mutated_mod.get_global_var('func_12184')
call_13511 = func_12182_call()
call_13512 = func_12182_call()
uop_13540 = relay.sinh(call_13511.astype('float64')) # shape=(6, 3, 8)
uop_13542 = relay.sinh(call_13512.astype('float64')) # shape=(6, 3, 8)
output = uop_13540
output2 = uop_13542
func_13546 = relay.Function([], output)
mod['func_13546'] = func_13546
mod = relay.transform.InferType()(mod)
output = func_13546()
func_13547 = relay.Function([], output)
mutated_mod['func_13547'] = func_13547
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12836_call = mod.get_global_var('func_12836')
func_12838_call = mutated_mod.get_global_var('func_12838')
call_13560 = relay.TupleGetItem(func_12836_call(), 2)
call_13561 = relay.TupleGetItem(func_12838_call(), 2)
output = relay.Tuple([call_13560,])
output2 = relay.Tuple([call_13561,])
func_13595 = relay.Function([], output)
mod['func_13595'] = func_13595
mod = relay.transform.InferType()(mod)
mutated_mod['func_13595'] = func_13595
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13595_call = mutated_mod.get_global_var('func_13595')
call_13596 = func_13595_call()
output = call_13596
func_13597 = relay.Function([], output)
mutated_mod['func_13597'] = func_13597
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12457_call = mod.get_global_var('func_12457')
func_12458_call = mutated_mod.get_global_var('func_12458')
call_13624 = relay.TupleGetItem(func_12457_call(), 0)
call_13625 = relay.TupleGetItem(func_12458_call(), 0)
func_11979_call = mod.get_global_var('func_11979')
func_11982_call = mutated_mod.get_global_var('func_11982')
var_13633 = relay.var("var_13633", dtype = "float64", shape = (60,))#candidate|13633|(60,)|var|float64
call_13632 = relay.TupleGetItem(func_11979_call(relay.reshape(var_13633.astype('float64'), [60,])), 0)
call_13634 = relay.TupleGetItem(func_11982_call(relay.reshape(var_13633.astype('float64'), [60,])), 0)
output = relay.Tuple([call_13624,call_13632,var_13633,])
output2 = relay.Tuple([call_13625,call_13634,var_13633,])
func_13646 = relay.Function([var_13633,], output)
mod['func_13646'] = func_13646
mod = relay.transform.InferType()(mod)
mutated_mod['func_13646'] = func_13646
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13647 = relay.var("var_13647", dtype = "float64", shape = (60,))#candidate|13647|(60,)|var|float64
func_13646_call = mutated_mod.get_global_var('func_13646')
call_13648 = func_13646_call(var_13647)
output = call_13648
func_13649 = relay.Function([var_13647], output)
mutated_mod['func_13649'] = func_13649
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12182_call = mod.get_global_var('func_12182')
func_12184_call = mutated_mod.get_global_var('func_12184')
call_13657 = func_12182_call()
call_13658 = func_12182_call()
output = call_13657
output2 = call_13658
func_13668 = relay.Function([], output)
mod['func_13668'] = func_13668
mod = relay.transform.InferType()(mod)
output = func_13668()
func_13669 = relay.Function([], output)
mutated_mod['func_13669'] = func_13669
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12457_call = mod.get_global_var('func_12457')
func_12458_call = mutated_mod.get_global_var('func_12458')
call_13698 = relay.TupleGetItem(func_12457_call(), 1)
call_13699 = relay.TupleGetItem(func_12458_call(), 1)
uop_13707 = relay.asinh(call_13698.astype('float32')) # shape=(10, 8, 16)
uop_13709 = relay.asinh(call_13699.astype('float32')) # shape=(10, 8, 16)
bop_13720 = relay.bitwise_or(uop_13707.astype('uint8'), relay.reshape(call_13698.astype('uint8'), relay.shape_of(uop_13707))) # shape=(10, 8, 16)
bop_13723 = relay.bitwise_or(uop_13709.astype('uint8'), relay.reshape(call_13699.astype('uint8'), relay.shape_of(uop_13709))) # shape=(10, 8, 16)
func_12883_call = mod.get_global_var('func_12883')
func_12884_call = mutated_mod.get_global_var('func_12884')
call_13725 = func_12883_call()
call_13726 = func_12883_call()
bop_13746 = relay.less(bop_13720.astype('bool'), relay.reshape(uop_13707.astype('bool'), relay.shape_of(bop_13720))) # shape=(10, 8, 16)
bop_13749 = relay.less(bop_13723.astype('bool'), relay.reshape(uop_13709.astype('bool'), relay.shape_of(bop_13723))) # shape=(10, 8, 16)
uop_13750 = relay.log2(bop_13720.astype('float64')) # shape=(10, 8, 16)
uop_13752 = relay.log2(bop_13723.astype('float64')) # shape=(10, 8, 16)
func_371_call = mod.get_global_var('func_371')
func_376_call = mutated_mod.get_global_var('func_376')
const_13778 = relay.const([False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False], dtype = "bool")#candidate|13778|(1584,)|const|bool
var_13779 = relay.var("var_13779", dtype = "float32", shape = (900,))#candidate|13779|(900,)|var|float32
call_13777 = relay.TupleGetItem(func_371_call(relay.reshape(const_13778.astype('bool'), [16, 11, 9]), relay.reshape(const_13778.astype('bool'), [16, 11, 9]), relay.reshape(var_13779.astype('float32'), [900,]), ), 1)
call_13780 = relay.TupleGetItem(func_376_call(relay.reshape(const_13778.astype('bool'), [16, 11, 9]), relay.reshape(const_13778.astype('bool'), [16, 11, 9]), relay.reshape(var_13779.astype('float32'), [900,]), ), 1)
func_3769_call = mod.get_global_var('func_3769')
func_3774_call = mutated_mod.get_global_var('func_3774')
const_13782 = relay.const([-10,-10,3,-3,9,-5,-10,-10,-10,2,4,4,6,4,-6,-1,-9,7,9,8,-3,9,-2,6,5,-9,-7,6,7,-5,4,-9,-7,5,-6,5,6,3,-4,9,7,10,-5,9,-8,-6,2,-5,10,4,3,-7,5,8,-9,9,-8,-3,-7,6,-9,-8,-8,10,5,5,-5,-8,2,-8,-6,8,5,-9,-4,-10,7,-3,-2,-2,7,6,2,2,3,-7,-6,5,6,6,10,4,5,-2,-10,-6,6,9,-8,-1,1,-2,-3,-10,10,3,-3,7,4,-5,-6,3,4,9,3,5,-10,-10,-3,-3,6,2,3,-5,1,-3,-2,-8,-8,-8,-8,4,-1,2,3,-8,-1,8,10,-3,3,7,-4,-2,5,-1,7,3,-10,-2,8,1,10,5,3,2,-8,5,-5,2,9,3,1,-3,-8,-3,5,-8,-5,7,-5,-8,-10,-2,-10,-5,10,-4,-3,-1,2,-9,-9,-1,4,-6,9,-1,-7,-3,9,-7,-5,9,5,-9,5,-3,-7,-1,-6,-9,3,5,-4,8,-6,2,5,9,3,-9,6,-5,10,-3,4,-3,-3,-8,7,-10,-10,-4,6,-5,1,-7,7,1,7,4,-7,8,-3,7,-2,-3,-9,-7,10,4,-7,-10,3,10,7,-3,10,4,-10,5,8,-6,7,-4,9,-10,-10,-1,-4,-7,6,5,3,-9,-2,5,-2,-1,-6,8,4,2,-10,1,5,-7,7,-6,3,3,2,9,1,-5,-4,2,10,-4,-8,-8,-2,-3,7,1,-5,-9,-2,-10,-8,-10,7,10,8,2,10,9,3,3,1,3,-8,-4,-1,-3,-1,-1,5,-8,5,8,-7,9,7,1,-6,4,9,4,4,8,8,-2,1,5,9,3,-10,-6,-4,5,-3,4,8,-1,7,6,9,10,9,9,-1,-3,-7,-6,-8,-3,-1,-5,6,1,-5,9,-6,-5,-6,-4,9,6,8,8,-4,-1,7,5,-9,-9,5,8,6,-8,-10,-7,-10,8,6,8,-7,6,2,-1,8,-5,5,4,-9,-6,-5,-9,-8,4,2,-4,8,7,3,-1,6,-4,9,6,2,-6,-5,-1,1,6,7,6,-2,-5,1,-8,2,-9,1,7,-7,8,8,-4,-7,6,-4,1,-5,3,-4,2,2,-7,9,4,-6,8,6,-7,-4,-8,5,-6,-8,8,-1,-10,-6,-6,10,8,4,2,-10,4,-1,-4,-4,1,-3,-7,-3,-5,-3,-1,1,-1,-7,-9,-3,1,-7,-4,-7,-6,6,-3,10,8,-1,8,-10,10,-5,2,-4,-6,8,-4,7,-5,5,1,-10,-1,-10,2,2,-5,3,-5,-2,7,-2,-7,3,9,-2,3,1,-10,5,-9,5,3,3,2,10,-5,2,-9,-4,3,1,7,-2,-3,10,-3,7,-5,-4,8,-8,-4,5,-3,4,-4,-2,6,-7,-10,-2,3,6,2,5,-4,2,-1,-3,-5,-10,1,9,5,-8,-4,7,2,3,5,-5,-1,9,4,-6,-1,10,-10,3,7,-2,6,8,5,3,9,1,2,2,5,5,-6,-10,-3,4,6,3,-7,9,2,2,-9,3,-4,-9,5,-5,-8,1,-9,3,3,7,-5,-2,10,10,6,1,10,-6,-4,10,-5,-5,-6,-10,-2,-8,5,8,1,-3,3,6,-5,-2,3,-1,3,-3,-4,-7,-1,-5,-3,10,-3,3,-8,-1,3,-4,-7,7,2,-8,-4,-3,10,-1,-3,10,-5,-3,-2,-8,10,-1,6,5,-9,-2,-10,8,-7,6,10,-5,7,-8,2,3,-7,-7,4,8,-8,4,9,9,-1,-5,1,5,-8,8,-8,-2,-7,7,4,3,-10,-2,-1,3,6,-4,-8,6,2,7,-4,7,9,-1,1], dtype = "uint8")#candidate|13782|(720,)|const|uint8
var_13783 = relay.var("var_13783", dtype = "float64", shape = (2, 600))#candidate|13783|(2, 600)|var|float64
call_13781 = relay.TupleGetItem(func_3769_call(relay.reshape(const_13782.astype('uint8'), [9, 10, 8]), relay.reshape(const_13782.astype('uint8'), [9, 10, 8]), relay.reshape(var_13783.astype('float64'), [4, 300]), relay.reshape(const_13782.astype('float64'), [9, 10, 8]), ), 0)
call_13784 = relay.TupleGetItem(func_3774_call(relay.reshape(const_13782.astype('uint8'), [9, 10, 8]), relay.reshape(const_13782.astype('uint8'), [9, 10, 8]), relay.reshape(var_13783.astype('float64'), [4, 300]), relay.reshape(const_13782.astype('float64'), [9, 10, 8]), ), 0)
output = relay.Tuple([call_13725,bop_13746,uop_13750,call_13777,const_13778,var_13779,call_13781,const_13782,var_13783,])
output2 = relay.Tuple([call_13726,bop_13749,uop_13752,call_13780,const_13778,var_13779,call_13784,const_13782,var_13783,])
func_13792 = relay.Function([var_13779,var_13783,], output)
mod['func_13792'] = func_13792
mod = relay.transform.InferType()(mod)
mutated_mod['func_13792'] = func_13792
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13792_call = mutated_mod.get_global_var('func_13792')
var_13794 = relay.var("var_13794", dtype = "float32", shape = (900,))#candidate|13794|(900,)|var|float32
var_13795 = relay.var("var_13795", dtype = "float64", shape = (2, 600))#candidate|13795|(2, 600)|var|float64
call_13793 = func_13792_call(var_13794,var_13795,)
output = call_13793
func_13796 = relay.Function([var_13794,var_13795,], output)
mutated_mod['func_13796'] = func_13796
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12467_call = mod.get_global_var('func_12467')
func_12468_call = mutated_mod.get_global_var('func_12468')
call_13852 = relay.TupleGetItem(func_12467_call(), 0)
call_13853 = relay.TupleGetItem(func_12468_call(), 0)
func_12542_call = mod.get_global_var('func_12542')
func_12544_call = mutated_mod.get_global_var('func_12544')
var_13857 = relay.var("var_13857", dtype = "bool", shape = (1584,))#candidate|13857|(1584,)|var|bool
call_13856 = relay.TupleGetItem(func_12542_call(relay.reshape(var_13857.astype('bool'), [1584,])), 7)
call_13858 = relay.TupleGetItem(func_12544_call(relay.reshape(var_13857.astype('bool'), [1584,])), 7)
output = relay.Tuple([call_13852,call_13856,var_13857,])
output2 = relay.Tuple([call_13853,call_13858,var_13857,])
func_13871 = relay.Function([var_13857,], output)
mod['func_13871'] = func_13871
mod = relay.transform.InferType()(mod)
mutated_mod['func_13871'] = func_13871
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13872 = relay.var("var_13872", dtype = "bool", shape = (1584,))#candidate|13872|(1584,)|var|bool
func_13871_call = mutated_mod.get_global_var('func_13871')
call_13873 = func_13871_call(var_13872)
output = call_13873
func_13874 = relay.Function([var_13872], output)
mutated_mod['func_13874'] = func_13874
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13350_call = mod.get_global_var('func_13350')
func_13351_call = mutated_mod.get_global_var('func_13351')
call_13878 = relay.TupleGetItem(func_13350_call(), 0)
call_13879 = relay.TupleGetItem(func_13351_call(), 0)
func_4143_call = mod.get_global_var('func_4143')
func_4145_call = mutated_mod.get_global_var('func_4145')
var_13887 = relay.var("var_13887", dtype = "float64", shape = (60,))#candidate|13887|(60,)|var|float64
call_13886 = relay.TupleGetItem(func_4143_call(relay.reshape(var_13887.astype('float64'), [10, 2, 3])), 0)
call_13888 = relay.TupleGetItem(func_4145_call(relay.reshape(var_13887.astype('float64'), [10, 2, 3])), 0)
func_12368_call = mod.get_global_var('func_12368')
func_12370_call = mutated_mod.get_global_var('func_12370')
var_13893 = relay.var("var_13893", dtype = "uint8", shape = (6, 260))#candidate|13893|(6, 260)|var|uint8
call_13892 = relay.TupleGetItem(func_12368_call(relay.reshape(var_13893.astype('uint8'), [12, 130])), 0)
call_13894 = relay.TupleGetItem(func_12370_call(relay.reshape(var_13893.astype('uint8'), [12, 130])), 0)
output = relay.Tuple([call_13878,call_13886,var_13887,call_13892,var_13893,])
output2 = relay.Tuple([call_13879,call_13888,var_13887,call_13894,var_13893,])
func_13900 = relay.Function([var_13887,var_13893,], output)
mod['func_13900'] = func_13900
mod = relay.transform.InferType()(mod)
var_13901 = relay.var("var_13901", dtype = "float64", shape = (60,))#candidate|13901|(60,)|var|float64
var_13902 = relay.var("var_13902", dtype = "uint8", shape = (6, 260))#candidate|13902|(6, 260)|var|uint8
output = func_13900(var_13901,var_13902,)
func_13903 = relay.Function([var_13901,var_13902,], output)
mutated_mod['func_13903'] = func_13903
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12836_call = mod.get_global_var('func_12836')
func_12838_call = mutated_mod.get_global_var('func_12838')
call_13910 = relay.TupleGetItem(func_12836_call(), 1)
call_13911 = relay.TupleGetItem(func_12838_call(), 1)
output = relay.Tuple([call_13910,])
output2 = relay.Tuple([call_13911,])
func_13924 = relay.Function([], output)
mod['func_13924'] = func_13924
mod = relay.transform.InferType()(mod)
mutated_mod['func_13924'] = func_13924
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13924_call = mutated_mod.get_global_var('func_13924')
call_13925 = func_13924_call()
output = call_13925
func_13926 = relay.Function([], output)
mutated_mod['func_13926'] = func_13926
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12457_call = mod.get_global_var('func_12457')
func_12458_call = mutated_mod.get_global_var('func_12458')
call_13942 = relay.TupleGetItem(func_12457_call(), 0)
call_13943 = relay.TupleGetItem(func_12458_call(), 0)
output = call_13942
output2 = call_13943
func_13952 = relay.Function([], output)
mod['func_13952'] = func_13952
mod = relay.transform.InferType()(mod)
mutated_mod['func_13952'] = func_13952
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13952_call = mutated_mod.get_global_var('func_13952')
call_13953 = func_13952_call()
output = call_13953
func_13954 = relay.Function([], output)
mutated_mod['func_13954'] = func_13954
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12182_call = mod.get_global_var('func_12182')
func_12184_call = mutated_mod.get_global_var('func_12184')
call_13957 = func_12182_call()
call_13958 = func_12182_call()
output = relay.Tuple([call_13957,])
output2 = relay.Tuple([call_13958,])
func_13984 = relay.Function([], output)
mod['func_13984'] = func_13984
mod = relay.transform.InferType()(mod)
output = func_13984()
func_13985 = relay.Function([], output)
mutated_mod['func_13985'] = func_13985
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13139_call = mod.get_global_var('func_13139')
func_13141_call = mutated_mod.get_global_var('func_13141')
call_14004 = relay.TupleGetItem(func_13139_call(), 0)
call_14005 = relay.TupleGetItem(func_13141_call(), 0)
output = call_14004
output2 = call_14005
func_14009 = relay.Function([], output)
mod['func_14009'] = func_14009
mod = relay.transform.InferType()(mod)
output = func_14009()
func_14010 = relay.Function([], output)
mutated_mod['func_14010'] = func_14010
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10895_call = mod.get_global_var('func_10895')
func_10897_call = mutated_mod.get_global_var('func_10897')
call_14011 = relay.TupleGetItem(func_10895_call(), 0)
call_14012 = relay.TupleGetItem(func_10897_call(), 0)
output = call_14011
output2 = call_14012
func_14043 = relay.Function([], output)
mod['func_14043'] = func_14043
mod = relay.transform.InferType()(mod)
mutated_mod['func_14043'] = func_14043
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14043_call = mutated_mod.get_global_var('func_14043')
call_14044 = func_14043_call()
output = call_14044
func_14045 = relay.Function([], output)
mutated_mod['func_14045'] = func_14045
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10858_call = mod.get_global_var('func_10858')
func_10859_call = mutated_mod.get_global_var('func_10859')
call_14051 = relay.TupleGetItem(func_10858_call(), 0)
call_14052 = relay.TupleGetItem(func_10859_call(), 0)
output = relay.Tuple([call_14051,])
output2 = relay.Tuple([call_14052,])
func_14058 = relay.Function([], output)
mod['func_14058'] = func_14058
mod = relay.transform.InferType()(mod)
output = func_14058()
func_14059 = relay.Function([], output)
mutated_mod['func_14059'] = func_14059
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13113_call = mod.get_global_var('func_13113')
func_13114_call = mutated_mod.get_global_var('func_13114')
call_14100 = relay.TupleGetItem(func_13113_call(), 1)
call_14101 = relay.TupleGetItem(func_13114_call(), 1)
output = relay.Tuple([call_14100,])
output2 = relay.Tuple([call_14101,])
func_14130 = relay.Function([], output)
mod['func_14130'] = func_14130
mod = relay.transform.InferType()(mod)
output = func_14130()
func_14131 = relay.Function([], output)
mutated_mod['func_14131'] = func_14131
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12182_call = mod.get_global_var('func_12182')
func_12184_call = mutated_mod.get_global_var('func_12184')
call_14218 = func_12182_call()
call_14219 = func_12182_call()
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
var_14248 = relay.var("var_14248", dtype = "float32", shape = (338,))#candidate|14248|(338,)|var|float32
call_14247 = func_1498_call(relay.reshape(var_14248.astype('float32'), [13, 13, 2]))
call_14249 = func_1498_call(relay.reshape(var_14248.astype('float32'), [13, 13, 2]))
output = relay.Tuple([call_14218,call_14247,var_14248,])
output2 = relay.Tuple([call_14219,call_14249,var_14248,])
func_14266 = relay.Function([var_14248,], output)
mod['func_14266'] = func_14266
mod = relay.transform.InferType()(mod)
mutated_mod['func_14266'] = func_14266
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14267 = relay.var("var_14267", dtype = "float32", shape = (338,))#candidate|14267|(338,)|var|float32
func_14266_call = mutated_mod.get_global_var('func_14266')
call_14268 = func_14266_call(var_14267)
output = call_14268
func_14269 = relay.Function([var_14267], output)
mutated_mod['func_14269'] = func_14269
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13546_call = mod.get_global_var('func_13546')
func_13547_call = mutated_mod.get_global_var('func_13547')
call_14357 = func_13546_call()
call_14358 = func_13546_call()
func_11979_call = mod.get_global_var('func_11979')
func_11982_call = mutated_mod.get_global_var('func_11982')
const_14380 = relay.const([-1.907147,2.037889,8.926893,-6.800016,-9.782522,-5.351619,-6.955371,-9.321141,-2.318082,-7.029613,3.648623,-6.343246,3.823857,-3.675597,4.664132,9.608551,7.886098,5.811354,3.385268,1.372982,1.331626,-1.887080,-5.412791,9.740682,-8.658958,-1.661429,-3.319568,-0.658723,5.454988,0.777678,-5.512282,-7.901864,3.024576,-7.888013,-7.733627,-1.264258,3.790680,6.391670,-1.036514,-7.421304,-1.513523,-0.577210,8.601620,-3.825546,3.735337,-5.869244,7.210233,-5.440078,-8.277082,5.164474,-0.209656,-8.845038,-6.675790,2.433950,-8.188181,0.441236,-9.521958,-6.799064,-2.698713,-4.174854], dtype = "float64")#candidate|14380|(60,)|const|float64
call_14379 = relay.TupleGetItem(func_11979_call(relay.reshape(const_14380.astype('float64'), [60,])), 2)
call_14381 = relay.TupleGetItem(func_11982_call(relay.reshape(const_14380.astype('float64'), [60,])), 2)
func_13546_call = mod.get_global_var('func_13546')
func_13547_call = mutated_mod.get_global_var('func_13547')
call_14383 = func_13546_call()
call_14384 = func_13546_call()
output = relay.Tuple([call_14357,call_14379,const_14380,call_14383,])
output2 = relay.Tuple([call_14358,call_14381,const_14380,call_14384,])
func_14393 = relay.Function([], output)
mod['func_14393'] = func_14393
mod = relay.transform.InferType()(mod)
mutated_mod['func_14393'] = func_14393
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14393_call = mutated_mod.get_global_var('func_14393')
call_14394 = func_14393_call()
output = call_14394
func_14395 = relay.Function([], output)
mutated_mod['func_14395'] = func_14395
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14043_call = mod.get_global_var('func_14043')
func_14045_call = mutated_mod.get_global_var('func_14045')
call_14433 = func_14043_call()
call_14434 = func_14043_call()
output = call_14433
output2 = call_14434
func_14444 = relay.Function([], output)
mod['func_14444'] = func_14444
mod = relay.transform.InferType()(mod)
output = func_14444()
func_14445 = relay.Function([], output)
mutated_mod['func_14445'] = func_14445
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14043_call = mod.get_global_var('func_14043')
func_14045_call = mutated_mod.get_global_var('func_14045')
call_14457 = func_14043_call()
call_14458 = func_14043_call()
func_13033_call = mod.get_global_var('func_13033')
func_13035_call = mutated_mod.get_global_var('func_13035')
const_14467 = relay.const([-2.842082,3.780252,4.161838,4.841963,-8.305802,5.570992,7.010218,-1.976579,5.715789,-2.645429,8.587096,-6.282910,-2.582175,-6.033460,-0.451988,4.498468,-5.962258,0.248247,0.651969,7.220739,1.574103,8.141251,-2.958485,6.813841,-5.650502,-9.005618,-5.141546,-1.642796,6.196813,-9.473594,-6.932852,-4.002874,-1.675199,-6.491329,-7.704230,8.752134,-8.347415,-7.098871,-1.769298,-2.551371,2.801785,-8.475956,0.044547,0.535776,-7.004549,-1.048497,5.725867,0.206487,3.938413,1.162142,5.898370,3.134056,6.265897,4.030540,0.250944,-9.096111,-6.680040,-7.599257,1.241923,-6.103602,7.119231,-3.408038,4.790672,-0.719101,8.138910,-9.226576,-7.384449,7.734422,-0.598845,-5.377682,-2.009123,-7.081306,6.949631,3.650306,-8.176404,-8.979974,-3.417432,-9.704594,-1.962442,-1.444031,9.219398,6.350758,7.950234,9.107044,9.661219,1.235064,6.955288,-2.123308,3.509630,1.191946,5.038233,4.626747,5.854140,8.712900,9.609302,4.819476,-0.353945,-2.299924,4.539347,8.470384,1.603321,6.259866,8.194202,-8.550837,2.179053,-7.948750,9.406599,-2.500917,-8.288134,1.347466,-3.682921,-4.056706,0.944109,-7.868309,-3.771685,3.721854,-9.857587,-5.706369,-8.809885,-4.667724,8.121010,-3.004430,4.040905,3.178853,-4.112329,8.824410,3.706167,0.052490,-1.771136,-6.879002,-4.821260,1.919797,-0.400792,-9.046395,-8.399680,-9.812038,0.174333,-7.566756,6.143510,-2.325568], dtype = "float64")#candidate|14467|(140,)|const|float64
call_14466 = relay.TupleGetItem(func_13033_call(relay.reshape(const_14467.astype('float64'), [35, 4])), 1)
call_14468 = relay.TupleGetItem(func_13035_call(relay.reshape(const_14467.astype('float64'), [35, 4])), 1)
output = relay.Tuple([call_14457,call_14466,const_14467,])
output2 = relay.Tuple([call_14458,call_14468,const_14467,])
func_14483 = relay.Function([], output)
mod['func_14483'] = func_14483
mod = relay.transform.InferType()(mod)
output = func_14483()
func_14484 = relay.Function([], output)
mutated_mod['func_14484'] = func_14484
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14009_call = mod.get_global_var('func_14009')
func_14010_call = mutated_mod.get_global_var('func_14010')
call_14504 = func_14009_call()
call_14505 = func_14009_call()
output = call_14504
output2 = call_14505
func_14512 = relay.Function([], output)
mod['func_14512'] = func_14512
mod = relay.transform.InferType()(mod)
output = func_14512()
func_14513 = relay.Function([], output)
mutated_mod['func_14513'] = func_14513
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11921_call = mod.get_global_var('func_11921')
func_11923_call = mutated_mod.get_global_var('func_11923')
call_14546 = func_11921_call()
call_14547 = func_11921_call()
output = relay.Tuple([call_14546,])
output2 = relay.Tuple([call_14547,])
func_14551 = relay.Function([], output)
mod['func_14551'] = func_14551
mod = relay.transform.InferType()(mod)
output = func_14551()
func_14552 = relay.Function([], output)
mutated_mod['func_14552'] = func_14552
mutated_mod = relay.transform.InferType()(mutated_mod)
const_14666 = relay.const([[[7,3,-9,-7],[-1,-10,-2,8],[3,-3,2,4],[-1,-6,-5,2],[-8,-6,-7,3],[-5,-6,4,-6],[6,5,-5,9],[5,-8,10,4]],[[2,-2,-4,-6],[-7,-4,8,7],[-1,5,-9,-1],[-2,7,-6,9],[-1,-8,-7,4],[1,-7,9,-5],[6,8,6,2],[-8,-9,1,6]],[[-2,-9,-1,7],[10,-10,-9,3],[5,-3,-1,-9],[5,7,8,10],[-8,-9,1,-10],[1,1,-5,5],[6,-2,-2,-7],[-9,-5,-10,6]],[[-3,8,2,-4],[-9,3,9,-5],[6,1,-10,-7],[5,-7,6,-2],[10,-10,9,7],[8,2,-10,10],[8,-5,4,-9],[-3,-5,-10,7]],[[-8,-6,2,-4],[3,-6,5,-8],[9,-9,-7,-1],[5,-1,-2,6],[-7,6,-6,-10],[6,-2,1,-2],[-5,-5,-1,5],[2,-2,-6,6]],[[-1,-3,-3,-7],[-8,-10,1,3],[-6,10,-5,-5],[1,-3,6,-2],[-4,-5,9,-7],[-1,10,-10,-9],[1,4,-4,-5],[4,4,7,-8]],[[-1,9,-7,9],[-3,1,1,-10],[9,8,-10,-8],[1,6,-6,-1],[9,10,-6,3],[9,-1,-4,-3],[-4,6,-8,-2],[-4,8,-5,10]],[[-9,-2,-9,-2],[-1,-9,5,-9],[6,7,-10,2],[-9,8,9,10],[8,1,-8,-6],[-10,-7,-10,6],[-2,8,1,-9],[-10,4,7,-7]],[[7,4,3,-6],[6,7,-10,2],[5,-7,1,7],[-3,1,5,4],[-8,-7,8,-3],[9,-10,5,10],[-3,-8,-2,-6],[-6,-6,-6,4]],[[9,-4,-7,3],[1,4,7,-9],[2,3,-4,1],[-7,-2,-7,7],[-10,-3,10,-4],[1,-8,-1,-9],[4,-6,-2,-8],[-4,-3,1,-9]]], dtype = "int16")#candidate|14666|(10, 8, 4)|const|int16
const_14667 = relay.const([[[1,2,2,-10],[10,10,9,1],[-8,-4,7,-1],[-5,-2,10,-8],[1,-1,-3,-1],[-2,-8,-4,-2],[7,-9,9,7],[10,-10,1,-3]],[[7,7,-6,2],[-1,10,1,-6],[-7,5,4,4],[9,-6,4,-5],[3,1,-10,9],[5,-5,-1,-5],[7,-8,1,-6],[-6,3,10,-10]],[[-7,6,6,-9],[5,9,6,-8],[-1,-5,-10,3],[1,-7,3,8],[10,7,9,9],[9,-2,2,-7],[10,-7,1,8],[7,5,-3,-10]],[[-6,1,3,9],[-9,-5,3,-4],[-6,-3,3,10],[-7,10,9,2],[-6,-9,6,1],[1,6,9,-8],[3,1,5,5],[-8,1,-4,-3]],[[10,1,1,9],[7,-7,7,1],[-9,3,-6,5],[3,3,10,10],[-9,-4,-3,2],[10,6,5,5],[-4,9,9,5],[-9,-3,-4,7]],[[-4,-4,5,6],[-5,3,4,7],[8,-9,7,1],[4,-5,7,-2],[2,-9,-1,-4],[-9,-10,5,-2],[-1,-10,-7,-6],[-6,-1,-2,7]],[[6,3,-3,6],[4,-7,-3,-1],[-2,-5,-3,3],[-2,4,5,10],[-7,1,-1,-2],[-4,5,-9,-2],[-9,-1,-1,-2],[9,9,-7,-7]],[[3,2,6,-3],[2,6,6,2],[8,-8,10,-2],[-9,-2,1,1],[-7,9,9,-2],[2,4,-9,-3],[-2,5,-4,10],[7,10,-1,-1]],[[-5,10,4,7],[-1,6,-7,-6],[-2,10,8,-1],[-2,-5,1,-9],[-8,-10,-2,-10],[8,-4,5,-4],[3,-6,4,9],[6,6,10,6]],[[6,-10,-5,-5],[6,-7,-1,9],[5,-8,3,-2],[9,-8,5,7],[-2,-4,-9,7],[8,6,5,5],[5,8,1,8],[-1,-1,2,10]]], dtype = "int16")#candidate|14667|(10, 8, 4)|const|int16
bop_14668 = relay.logical_xor(const_14666.astype('int16'), relay.reshape(const_14667.astype('int16'), relay.shape_of(const_14666))) # shape=(10, 8, 4)
output = bop_14668
output2 = bop_14668
func_14673 = relay.Function([], output)
mod['func_14673'] = func_14673
mod = relay.transform.InferType()(mod)
mutated_mod['func_14673'] = func_14673
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14673_call = mutated_mod.get_global_var('func_14673')
call_14674 = func_14673_call()
output = call_14674
func_14675 = relay.Function([], output)
mutated_mod['func_14675'] = func_14675
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14444_call = mod.get_global_var('func_14444')
func_14445_call = mutated_mod.get_global_var('func_14445')
call_14708 = func_14444_call()
call_14709 = func_14444_call()
func_11979_call = mod.get_global_var('func_11979')
func_11982_call = mutated_mod.get_global_var('func_11982')
var_14711 = relay.var("var_14711", dtype = "float64", shape = (60,))#candidate|14711|(60,)|var|float64
call_14710 = relay.TupleGetItem(func_11979_call(relay.reshape(var_14711.astype('float64'), [60,])), 1)
call_14712 = relay.TupleGetItem(func_11982_call(relay.reshape(var_14711.astype('float64'), [60,])), 1)
output = relay.Tuple([call_14708,call_14710,var_14711,])
output2 = relay.Tuple([call_14709,call_14712,var_14711,])
func_14717 = relay.Function([var_14711,], output)
mod['func_14717'] = func_14717
mod = relay.transform.InferType()(mod)
var_14718 = relay.var("var_14718", dtype = "float64", shape = (60,))#candidate|14718|(60,)|var|float64
output = func_14717(var_14718)
func_14719 = relay.Function([var_14718], output)
mutated_mod['func_14719'] = func_14719
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13984_call = mod.get_global_var('func_13984')
func_13985_call = mutated_mod.get_global_var('func_13985')
call_14768 = relay.TupleGetItem(func_13984_call(), 0)
call_14769 = relay.TupleGetItem(func_13985_call(), 0)
output = call_14768
output2 = call_14769
func_14776 = relay.Function([], output)
mod['func_14776'] = func_14776
mod = relay.transform.InferType()(mod)
mutated_mod['func_14776'] = func_14776
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14776_call = mutated_mod.get_global_var('func_14776')
call_14777 = func_14776_call()
output = call_14777
func_14778 = relay.Function([], output)
mutated_mod['func_14778'] = func_14778
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14009_call = mod.get_global_var('func_14009')
func_14010_call = mutated_mod.get_global_var('func_14010')
call_14781 = func_14009_call()
call_14782 = func_14009_call()
output = call_14781
output2 = call_14782
func_14784 = relay.Function([], output)
mod['func_14784'] = func_14784
mod = relay.transform.InferType()(mod)
output = func_14784()
func_14785 = relay.Function([], output)
mutated_mod['func_14785'] = func_14785
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_14788 = relay.TupleGetItem(func_12265_call(), 0)
call_14789 = relay.TupleGetItem(func_12266_call(), 0)
output = relay.Tuple([call_14788,])
output2 = relay.Tuple([call_14789,])
func_14792 = relay.Function([], output)
mod['func_14792'] = func_14792
mod = relay.transform.InferType()(mod)
mutated_mod['func_14792'] = func_14792
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14792_call = mutated_mod.get_global_var('func_14792')
call_14793 = func_14792_call()
output = call_14793
func_14794 = relay.Function([], output)
mutated_mod['func_14794'] = func_14794
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12457_call = mod.get_global_var('func_12457')
func_12458_call = mutated_mod.get_global_var('func_12458')
call_14802 = relay.TupleGetItem(func_12457_call(), 0)
call_14803 = relay.TupleGetItem(func_12458_call(), 0)
output = relay.Tuple([call_14802,])
output2 = relay.Tuple([call_14803,])
func_14828 = relay.Function([], output)
mod['func_14828'] = func_14828
mod = relay.transform.InferType()(mod)
output = func_14828()
func_14829 = relay.Function([], output)
mutated_mod['func_14829'] = func_14829
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13668_call = mod.get_global_var('func_13668')
func_13669_call = mutated_mod.get_global_var('func_13669')
call_14840 = func_13668_call()
call_14841 = func_13668_call()
output = relay.Tuple([call_14840,])
output2 = relay.Tuple([call_14841,])
func_14852 = relay.Function([], output)
mod['func_14852'] = func_14852
mod = relay.transform.InferType()(mod)
output = func_14852()
func_14853 = relay.Function([], output)
mutated_mod['func_14853'] = func_14853
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14857 = relay.var("var_14857", dtype = "float64", shape = (16, 1, 8))#candidate|14857|(16, 1, 8)|var|float64
var_14858 = relay.var("var_14858", dtype = "float64", shape = (16, 2, 8))#candidate|14858|(16, 2, 8)|var|float64
bop_14859 = relay.floor_mod(var_14857.astype('float64'), var_14858.astype('float64')) # shape=(16, 2, 8)
var_14874 = relay.var("var_14874", dtype = "float64", shape = (16, 2, 8))#candidate|14874|(16, 2, 8)|var|float64
bop_14875 = relay.minimum(bop_14859.astype('uint8'), relay.reshape(var_14874.astype('uint8'), relay.shape_of(bop_14859))) # shape=(16, 2, 8)
output = relay.Tuple([bop_14875,])
output2 = relay.Tuple([bop_14875,])
func_14902 = relay.Function([var_14857,var_14858,var_14874,], output)
mod['func_14902'] = func_14902
mod = relay.transform.InferType()(mod)
mutated_mod['func_14902'] = func_14902
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14902_call = mutated_mod.get_global_var('func_14902')
var_14904 = relay.var("var_14904", dtype = "float64", shape = (16, 1, 8))#candidate|14904|(16, 1, 8)|var|float64
var_14905 = relay.var("var_14905", dtype = "float64", shape = (16, 2, 8))#candidate|14905|(16, 2, 8)|var|float64
var_14906 = relay.var("var_14906", dtype = "float64", shape = (16, 2, 8))#candidate|14906|(16, 2, 8)|var|float64
call_14903 = func_14902_call(var_14904,var_14905,var_14906,)
output = call_14903
func_14907 = relay.Function([var_14904,var_14905,var_14906,], output)
mutated_mod['func_14907'] = func_14907
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13952_call = mod.get_global_var('func_13952')
func_13954_call = mutated_mod.get_global_var('func_13954')
call_14994 = func_13952_call()
call_14995 = func_13952_call()
func_13350_call = mod.get_global_var('func_13350')
func_13351_call = mutated_mod.get_global_var('func_13351')
call_15003 = relay.TupleGetItem(func_13350_call(), 0)
call_15004 = relay.TupleGetItem(func_13351_call(), 0)
func_685_call = mod.get_global_var('func_685')
func_687_call = mutated_mod.get_global_var('func_687')
var_15008 = relay.var("var_15008", dtype = "float32", shape = (756,))#candidate|15008|(756,)|var|float32
call_15007 = relay.TupleGetItem(func_685_call(relay.reshape(var_15008.astype('float32'), [756,])), 3)
call_15009 = relay.TupleGetItem(func_687_call(relay.reshape(var_15008.astype('float32'), [756,])), 3)
func_394_call = mod.get_global_var('func_394')
func_397_call = mutated_mod.get_global_var('func_397')
call_15011 = func_394_call(relay.reshape(var_15008.astype('float32'), [9, 14, 6]))
call_15012 = func_394_call(relay.reshape(var_15008.astype('float32'), [9, 14, 6]))
bop_15017 = relay.floor_mod(call_15011.astype('float64'), relay.reshape(var_15008.astype('float64'), relay.shape_of(call_15011))) # shape=(9, 14, 6)
bop_15020 = relay.floor_mod(call_15012.astype('float64'), relay.reshape(var_15008.astype('float64'), relay.shape_of(call_15012))) # shape=(9, 14, 6)
output = relay.Tuple([call_14994,call_15003,call_15007,bop_15017,])
output2 = relay.Tuple([call_14995,call_15004,call_15009,bop_15020,])
func_15041 = relay.Function([var_15008,], output)
mod['func_15041'] = func_15041
mod = relay.transform.InferType()(mod)
var_15042 = relay.var("var_15042", dtype = "float32", shape = (756,))#candidate|15042|(756,)|var|float32
output = func_15041(var_15042)
func_15043 = relay.Function([var_15042], output)
mutated_mod['func_15043'] = func_15043
mutated_mod = relay.transform.InferType()(mutated_mod)
const_15080 = relay.const([[[-7,9]],[[7,1]],[[5,7]],[[-6,-6]],[[3,5]],[[7,9]],[[6,6]],[[-7,-1]],[[5,-6]],[[5,6]],[[3,-9]],[[-2,8]],[[-4,3]]], dtype = "int64")#candidate|15080|(13, 1, 2)|const|int64
const_15081 = relay.const([[[1,-1],[-9,7],[-3,-9],[5,-6],[1,6],[-8,4],[-6,-10],[4,-10],[-8,-3],[-1,7],[1,5],[-10,-8]],[[-10,-3],[-3,-6],[-7,-7],[-6,5],[-1,-5],[9,8],[-9,-7],[-4,2],[-9,2],[-1,-10],[-3,-9],[-7,-7]],[[3,1],[-3,1],[2,3],[-2,9],[9,1],[8,-8],[10,1],[2,-6],[-9,4],[-5,-4],[-2,4],[3,3]],[[-3,-3],[8,3],[9,-7],[-2,-5],[-1,-5],[-1,-5],[7,6],[3,1],[6,6],[-5,5],[-2,4],[-7,-7]],[[7,7],[10,-2],[-1,6],[-8,9],[-2,1],[5,3],[10,3],[8,8],[-1,-5],[6,9],[-6,9],[-5,9]],[[3,-7],[5,6],[-7,3],[-1,1],[5,-5],[3,-6],[1,4],[-6,-5],[4,9],[-10,-5],[6,-4],[-10,-8]],[[-3,3],[9,5],[-9,-7],[-2,5],[-4,5],[9,-3],[-7,-3],[4,-1],[-6,-10],[-6,-8],[6,9],[10,3]],[[-8,8],[-8,6],[7,-4],[1,-7],[10,4],[4,2],[-7,-7],[-8,-1],[-9,-6],[9,4],[-1,9],[6,3]],[[-3,3],[-10,7],[-9,-6],[-5,3],[-7,2],[-3,4],[-7,-10],[-8,8],[-1,-1],[9,2],[-2,-4],[7,-2]],[[-8,-2],[3,9],[-10,-2],[3,2],[-4,-8],[-10,-10],[9,1],[3,8],[-2,-4],[-6,-4],[3,7],[-9,-1]],[[1,-5],[-8,-5],[-8,2],[-2,5],[-3,-8],[4,-7],[1,3],[2,-4],[-5,-4],[-3,-1],[7,-4],[-6,-4]],[[8,7],[-5,8],[-8,-7],[-9,3],[-9,7],[8,-5],[-1,-6],[10,5],[-2,-9],[-9,-5],[2,-9],[-3,2]],[[-1,-8],[-9,6],[3,-9],[9,-10],[-6,-8],[-10,2],[-4,-2],[3,-1],[-5,5],[-1,5],[10,9],[-8,2]]], dtype = "int64")#candidate|15081|(13, 12, 2)|const|int64
bop_15082 = relay.not_equal(const_15080.astype('bool'), const_15081.astype('bool')) # shape=(13, 12, 2)
func_4835_call = mod.get_global_var('func_4835')
func_4839_call = mutated_mod.get_global_var('func_4839')
const_15097 = relay.const([2.251299,7.321739,7.077140,1.691095,7.165318,-9.325775,-2.357413,1.124365,2.978637,9.753440,0.323165,4.989190,-7.946385,-9.628425,-6.863618,-0.343010,0.793151,9.794108,2.082683,-2.967943,-5.727870,-2.234313,-8.629420,5.653093,-9.517445,4.902545,8.501653,-7.078658,-1.130109,1.668414,-9.588142,2.521548,9.586056,-7.145124,2.610940], dtype = "float64")#candidate|15097|(35,)|const|float64
const_15098 = relay.const([-2.714567,9.545461,-7.128423,-1.605461,5.312914,-2.466322,-2.617921,-5.025482,2.016016,3.491091,2.258639,-3.575217,5.321112,-0.554126,0.104711,-2.885247,1.983017,9.915415,-5.642762,-1.842761,2.672735,2.943110,6.567820,3.540431,8.514161,9.361259,-9.274008,-1.857572,0.402179,-9.430998,1.509305,-3.209733], dtype = "float32")#candidate|15098|(32,)|const|float32
const_15099 = relay.const([[0.467271,-3.240687,9.560084,1.028872],[-5.312920,7.618497,8.424986,3.723448],[-4.303909,-4.747142,-1.624689,9.654894],[-6.286852,-4.263743,-8.380331,8.231211],[6.025514,6.563744,-9.847682,9.182357],[9.795424,-1.358844,-9.115411,-6.072332],[5.686754,-5.233649,8.007573,-0.640556],[-5.265289,-7.188696,1.891253,-2.635900],[1.598496,2.328507,-0.854673,7.541216],[-4.576846,-9.491136,4.024644,7.890115],[1.386218,-7.703901,5.717046,4.485504],[-0.319383,2.450843,5.975813,-4.846812],[4.220219,-3.560308,-2.906997,3.316001],[-5.563083,-6.729847,-2.599389,-4.207401],[3.809504,-8.348651,2.277688,-5.615642],[-7.622248,-0.573430,6.276027,-9.576454],[-3.189494,9.616698,-1.438909,8.806695],[-3.984843,6.509798,7.230608,0.880065],[-9.163070,-4.087426,5.844036,8.820060],[-7.044024,1.431496,-9.573620,-9.708175],[0.269051,-1.373625,-4.402165,-0.186404],[9.359676,6.574021,2.065987,2.421466],[2.114270,8.138802,-0.403400,-1.202780],[-0.425727,-4.052859,3.414423,-9.564550],[-0.487443,3.885159,-3.926667,-2.415138],[0.912099,7.792710,-2.631237,-7.713095],[-4.446196,-6.414344,6.302506,3.058352],[-4.303240,-0.155666,-5.434284,-0.944336],[2.984171,2.260812,0.534220,2.353902],[1.829541,1.258781,9.308749,6.316282],[-2.695273,-6.416496,-1.158740,0.462790],[-7.377533,6.794900,-2.867886,7.412152],[5.987416,-5.498840,-6.545726,3.523602],[-5.481731,7.872752,-0.673667,7.927674],[-8.114923,-8.651484,6.295203,-0.116065]], dtype = "float64")#candidate|15099|(35, 4)|const|float64
call_15096 = relay.TupleGetItem(func_4835_call(relay.reshape(const_15097.astype('float64'), [7, 5, 1]), relay.reshape(const_15098.astype('float32'), [32,]), relay.reshape(const_15099.astype('float64'), [5, 28]), ), 4)
call_15100 = relay.TupleGetItem(func_4839_call(relay.reshape(const_15097.astype('float64'), [7, 5, 1]), relay.reshape(const_15098.astype('float32'), [32,]), relay.reshape(const_15099.astype('float64'), [5, 28]), ), 4)
func_13952_call = mod.get_global_var('func_13952')
func_13954_call = mutated_mod.get_global_var('func_13954')
call_15102 = func_13952_call()
call_15103 = func_13952_call()
func_14483_call = mod.get_global_var('func_14483')
func_14484_call = mutated_mod.get_global_var('func_14484')
call_15110 = relay.TupleGetItem(func_14483_call(), 1)
call_15111 = relay.TupleGetItem(func_14484_call(), 1)
output = relay.Tuple([bop_15082,call_15096,const_15097,const_15098,const_15099,call_15102,call_15110,])
output2 = relay.Tuple([bop_15082,call_15100,const_15097,const_15098,const_15099,call_15103,call_15111,])
func_15126 = relay.Function([], output)
mod['func_15126'] = func_15126
mod = relay.transform.InferType()(mod)
output = func_15126()
func_15127 = relay.Function([], output)
mutated_mod['func_15127'] = func_15127
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_15128 = relay.TupleGetItem(func_12265_call(), 0)
call_15129 = relay.TupleGetItem(func_12266_call(), 0)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_15132 = relay.TupleGetItem(func_12265_call(), 1)
call_15133 = relay.TupleGetItem(func_12266_call(), 1)
output = relay.Tuple([call_15128,call_15132,])
output2 = relay.Tuple([call_15129,call_15133,])
func_15145 = relay.Function([], output)
mod['func_15145'] = func_15145
mod = relay.transform.InferType()(mod)
output = func_15145()
func_15146 = relay.Function([], output)
mutated_mod['func_15146'] = func_15146
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12457_call = mod.get_global_var('func_12457')
func_12458_call = mutated_mod.get_global_var('func_12458')
call_15151 = relay.TupleGetItem(func_12457_call(), 0)
call_15152 = relay.TupleGetItem(func_12458_call(), 0)
output = call_15151
output2 = call_15152
func_15174 = relay.Function([], output)
mod['func_15174'] = func_15174
mod = relay.transform.InferType()(mod)
output = func_15174()
func_15175 = relay.Function([], output)
mutated_mod['func_15175'] = func_15175
mutated_mod = relay.transform.InferType()(mutated_mod)
const_15189 = relay.const([[[2,1,-10,-1,7,-3,-6,6,2,-6,-9,-7,-1,5,1,-3],[3,4,9,2,-7,-1,-6,6,-4,-5,9,5,-10,-1,8,-7],[7,4,-7,2,-1,-6,1,-5,4,-10,-3,-2,-3,-6,-8,4],[4,-1,-4,4,9,2,-2,5,-8,-7,-9,-6,2,7,-6,-5],[-1,-1,3,-2,-5,-2,-3,3,3,-4,10,7,3,4,-7,10],[-9,-2,-8,5,-9,10,-4,-3,6,-9,9,-10,4,-4,5,8],[6,-6,-4,-8,6,5,3,-8,7,-7,7,-1,-3,1,-8,4]],[[7,-8,1,-4,-4,-10,8,7,-5,-4,-2,-1,-1,-5,-1,4],[-10,-1,-8,1,-3,-10,7,6,10,4,6,-8,-10,-5,3,1],[2,6,4,-2,6,-7,9,-7,-7,2,-8,10,5,-1,7,-2],[3,-8,5,5,4,-6,-7,-6,4,8,10,4,-3,4,8,-8],[-5,-7,10,2,3,-9,-9,-7,-2,-8,2,10,8,5,1,6],[-2,6,6,8,-6,-2,-1,-9,-3,-7,-3,-10,10,-7,-9,-9],[-10,4,5,-3,-6,-5,3,2,-2,-1,-6,6,-4,-9,9,-7]],[[4,-3,1,7,5,6,7,4,-7,-6,5,8,-6,6,6,-4],[-3,9,-7,3,10,9,-1,7,-9,-10,-5,-6,7,8,-5,4],[-3,4,-9,3,-8,7,7,-7,8,-3,-10,-6,2,10,10,5],[-5,3,-8,3,9,7,-5,4,-4,6,9,10,-10,9,4,-1],[-5,-3,3,8,8,-9,10,6,-2,9,-6,3,9,4,-7,2],[-3,2,-5,-7,-8,5,10,3,6,3,10,10,7,-5,-2,6],[-2,-1,-1,-9,5,-4,-9,-8,10,9,-9,-1,2,1,-3,-9]],[[-5,3,9,2,7,-2,6,1,3,-6,-8,9,3,6,-6,10],[-5,9,4,-9,-9,9,-1,1,-2,-6,-2,-2,6,-10,5,6],[-4,6,-6,10,8,-1,10,2,-9,-4,-5,7,-6,-4,8,3],[-4,-9,-5,-8,-8,1,2,-2,6,-1,2,-2,6,1,7,3],[2,2,1,-10,10,7,-9,-3,4,-3,2,5,1,-2,-10,2],[7,9,5,-6,-3,6,-1,6,-3,-4,-6,4,6,8,1,8],[-3,5,-8,-2,4,-4,5,2,9,-2,4,-4,2,-6,1,10]],[[-1,-1,-5,-10,1,6,4,-5,-6,9,4,2,-7,-8,2,-2],[10,2,10,-6,7,-10,-4,3,-3,1,8,-3,2,3,9,9],[-1,-7,-6,-4,7,-4,-9,10,-1,-9,-4,2,-6,-4,-10,-4],[-7,-4,6,-3,-1,5,-4,-4,-7,2,7,-9,-10,-8,7,3],[-5,-6,6,5,6,9,-6,-5,-6,-4,4,8,8,4,7,9],[6,-4,-5,-2,-2,3,6,1,-8,6,8,-5,9,-4,-7,-10],[-8,-7,-7,6,-2,7,8,1,-1,-5,1,7,-9,6,-4,1]],[[3,7,-7,-9,-1,-8,-2,-2,-5,6,-6,4,4,1,8,-1],[10,-1,10,-9,-4,-7,-5,1,-5,6,2,9,1,5,2,8],[-4,2,-7,-3,7,9,-9,1,-9,-7,6,6,-6,5,-7,-3],[-2,-2,-5,3,-7,3,5,1,-1,-7,-4,2,-4,-1,2,3],[-8,-4,-2,-4,-1,4,-3,2,-5,10,-1,-1,-3,-9,6,-8],[7,-7,1,7,-10,-8,7,-8,-8,-4,-5,8,-7,1,-7,8],[-5,2,-6,-7,-1,1,6,2,2,-5,-1,4,-9,1,-6,-9]],[[-2,8,-3,6,2,4,1,-4,-2,-9,-3,10,10,8,-10,8],[10,-2,10,7,-7,2,8,10,-6,-2,-2,10,4,7,-7,-6],[10,9,5,-4,10,-8,-1,-8,-7,-5,-3,-10,-3,10,3,-6],[-3,-3,-5,-1,-4,-1,7,-1,10,-5,2,-9,-6,6,5,2],[-1,6,-3,-8,6,-3,1,-1,-1,5,4,10,-4,-9,10,-7],[-8,4,-2,2,4,-2,9,-5,10,6,5,-5,-2,-8,-8,5],[9,-1,4,6,-7,2,-2,8,8,-5,8,1,-4,6,3,-10]],[[-1,-1,6,-2,8,1,-4,1,1,-6,-5,2,-6,-3,-8,-3],[-8,3,-4,7,2,3,6,-9,-1,7,3,-7,-8,2,-7,-6],[-9,-9,5,-6,-3,-4,-6,-6,-1,3,6,7,-2,1,-1,-4],[-5,5,8,-10,2,-10,8,-5,10,-3,2,10,8,-5,8,1],[-2,-7,8,1,-1,8,6,-8,-5,-3,-2,1,6,-1,5,10],[-6,10,-4,6,4,5,-9,-8,-6,1,6,8,-8,-6,10,-2],[3,-2,5,-2,-2,-6,-10,5,-5,-1,-8,3,-7,9,-7,4]],[[3,6,-2,4,3,-6,4,6,10,4,-8,4,-8,-3,-1,4],[2,9,-8,9,5,-4,-9,-2,-2,8,3,-5,2,5,-2,-9],[-1,-10,3,10,-5,7,-7,-4,3,-8,4,7,-9,1,-3,8],[9,1,-7,10,-7,7,-5,-4,-3,-5,4,-2,6,6,4,-1],[4,-6,5,3,2,8,3,4,-2,4,2,-1,-1,-8,-5,-9],[5,9,1,3,-2,-9,-1,-2,3,-1,1,-5,-10,-7,-2,-3],[-4,-6,-4,10,-10,-10,3,3,5,-5,7,9,1,-2,4,1]],[[-8,5,-7,-8,6,-7,-10,-9,6,3,3,1,-10,8,-10,4],[-7,-8,5,-1,-3,-10,-9,-2,-2,-6,-9,-9,-2,4,8,-8],[6,9,-3,10,9,3,-10,2,-1,9,7,-10,-6,9,-2,-9],[4,-10,2,-2,-2,8,-9,-8,-1,2,-6,7,9,-6,-2,1],[-4,-2,3,-7,9,10,8,-2,-4,6,-9,2,8,2,2,3],[-6,-4,9,3,9,-9,1,7,-8,-7,-6,6,6,4,-3,6],[2,-6,5,2,-5,2,-2,3,-4,6,9,3,-2,-5,-6,4]],[[-5,10,2,-4,4,-4,7,-6,-10,-10,-8,8,2,5,-6,-5],[-1,-9,-8,3,8,-8,-7,-5,-9,-9,2,7,1,-1,4,8],[-2,10,9,-1,1,6,-4,-8,-8,1,6,-3,1,6,9,-1],[-10,-2,-6,-9,-10,6,6,8,3,-1,5,-6,7,4,-5,-10],[7,5,2,-2,-9,-6,-4,-8,-4,-8,4,-7,-5,10,7,-8],[-1,-10,8,-5,2,-1,-8,5,-9,-10,6,-5,-10,2,4,-4],[4,-8,-9,9,-6,8,-1,-5,6,5,-5,-5,-5,2,9,-4]]], dtype = "uint8")#candidate|15189|(11, 7, 16)|const|uint8
var_15190 = relay.var("var_15190", dtype = "uint8", shape = (11, 7, 16))#candidate|15190|(11, 7, 16)|var|uint8
bop_15191 = relay.less(const_15189.astype('bool'), relay.reshape(var_15190.astype('bool'), relay.shape_of(const_15189))) # shape=(11, 7, 16)
output = bop_15191
output2 = bop_15191
func_15206 = relay.Function([var_15190,], output)
mod['func_15206'] = func_15206
mod = relay.transform.InferType()(mod)
mutated_mod['func_15206'] = func_15206
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15207 = relay.var("var_15207", dtype = "uint8", shape = (11, 7, 16))#candidate|15207|(11, 7, 16)|var|uint8
func_15206_call = mutated_mod.get_global_var('func_15206')
call_15208 = func_15206_call(var_15207)
output = call_15208
func_15209 = relay.Function([var_15207], output)
mutated_mod['func_15209'] = func_15209
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10858_call = mod.get_global_var('func_10858')
func_10859_call = mutated_mod.get_global_var('func_10859')
call_15222 = relay.TupleGetItem(func_10858_call(), 0)
call_15223 = relay.TupleGetItem(func_10859_call(), 0)
func_371_call = mod.get_global_var('func_371')
func_376_call = mutated_mod.get_global_var('func_376')
const_15225 = relay.const([True,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True], dtype = "bool")#candidate|15225|(1584,)|const|bool
const_15226 = relay.const([6.343372,-1.025064,-7.244713,-1.850643,0.517145,1.977745,-6.592989,7.945898,-4.283435,-4.284060,-5.139167,9.767534,8.031078,-9.266903,6.511008,3.237168,9.483532,-6.258254,-8.090881,9.641977,2.686109,-3.651390,-2.511667,5.187043,9.578307,-6.320390,6.724302,-0.969141,1.448987,6.048607,6.490140,6.083091,-4.886010,-0.414900,9.467477,-6.813546,-4.625656,-8.132157,9.273875,5.966187,1.457845,-3.083016,-9.144665,-2.456553,6.652625,-5.432358,-0.374847,-0.552345,4.146929,5.654474,-1.409270,0.534769,9.078359,7.377545,5.841271,6.695390,-7.079171,-1.192414,-0.066678,-0.382920,-0.721135,-0.348030,1.096100,-3.071788,-5.920802,8.020762,6.982813,0.316270,-2.466565,4.788689,-2.085645,4.368996,3.961302,6.190511,-4.732736,5.149356,-3.294515,3.512855,-1.636614,-5.218837,-9.491873,4.183312,-9.006707,-4.092265,5.627970,7.619769,-2.535205,3.104172,-9.366267,6.941581,-8.913944,8.534100,5.339787,-7.856746,-5.925290,-8.705059,-7.202773,2.966378,-5.761332,-9.632123,6.158022,8.983514,-5.266330,9.276553,8.930207,8.283311,-0.320062,-1.931785,3.632519,1.254548,6.938774,-2.226335,-2.977584,9.425484,6.814682,-4.680960,6.802970,-3.187723,-6.141205,-7.800383,1.379482,-3.296015,-1.068997,9.604308,1.698136,-4.372647,-8.226747,9.186699,-6.650116,0.712153,-0.247497,-6.397715,-5.444855,1.798376,1.231649,-8.497785,1.030748,-0.923132,-0.581087,0.810553,-4.594053,-0.185550,3.728732,7.019196,-8.521383,3.502269,0.331572,-2.975385,9.624067,-7.498027,4.026372,5.588548,5.440928,6.042919,0.347443,-3.557039,-6.528067,-1.385652,-3.927743,8.766610,-5.647342,9.556104,-9.391073,1.140507,1.565615,-0.176799,3.245024,6.090698,1.546940,-7.099378,3.421161,3.282770,0.920173,2.522511,1.519711,0.637095,-5.521129,4.960906,-5.595552,-5.478701,9.138067,4.343279,-1.217341,1.132701,0.285308,-9.267823,-3.485119,-0.003594,5.280027,6.704327,-6.269407,-3.430365,1.969231,1.668098,2.793990,0.756920,6.620792,5.548521,0.204611,4.359894,-1.043964,-4.045749,7.492631,-5.575221,-2.219945,-8.475805,-2.135785,9.907058,-9.861623,-8.587687,-5.141678,-0.525985,-8.949857,5.502085,9.905646,-3.988300,-4.470464,-0.345950,1.037626,-6.679858,5.323719,-7.894961,-3.828535,9.103883,-7.366201,-7.691567,-1.461957,-5.489922,-8.402600,-0.541561,3.275254,0.038584,4.025117,3.275034,-3.088160,2.782004,-6.691698,-4.639469,2.982626,-0.129098,3.548782,9.545711,1.267401,-6.749492,3.626172,2.847178,2.975614,3.794339,3.591031,8.380048,-6.761712,4.084687,-9.718372,9.023476,1.461044,4.746200,-1.391955,-4.068681,2.303808,3.985223,-5.326156,0.175475,8.901900,-8.110268,8.416358,1.392309,-5.961967,7.217490,-9.223112,1.695191,-9.127489,-4.096935,2.158811,-0.337748,6.283258,9.444381,9.155857,1.193721,9.491168,2.710691,4.146190,7.774054,8.796962,-2.139337,2.741379,2.208553,-8.489030,9.611838,3.268039,-1.658624,5.112811,-8.233760,-2.618435,-8.806994,5.985124,1.630691,-8.302961,5.956971,0.692823,4.239669,9.185995,-0.265451,-2.423137,8.385868,2.438125,-9.708332,0.596428,2.822214,-4.124365,-8.493728,5.818268,-1.038681,-2.824756,8.675567,0.304481,-9.703854,-8.559198,-1.480394,-4.202459,-6.996184,-9.363650,2.701309,3.681899,0.058132,-8.412088,1.407346,3.213577,3.459444,4.609096,8.827576,8.907198,5.099217,-9.158670,-2.289161,4.089596,7.332478,3.521233,-9.105713,6.929765,-6.712759,0.685483,-2.449993,0.327179,-7.920427,-3.807976,4.707902,3.310883,9.787020,-1.246788,3.449374,-9.245824,8.534028,4.795389,-1.902218,-9.759600,-0.669828,4.284830,-2.857684,-5.552387,7.383177,7.492789,-1.446543,-5.806677,-2.009879,3.937279,-8.765038,-3.367709,6.134171,3.355259,5.933243,-7.776543,5.227215,-2.485678,-1.322758,-0.751062,9.018159,-1.171636,8.382776,-5.227172,6.269392,7.756577,4.604801,-3.615677,1.955020,6.945226,2.516191,-3.419800,0.801010,-2.699226,3.084203,1.798386,-9.046181,-6.519488,-3.936440,-1.786623,-8.620614,-4.988134,1.782712,-9.644704,-3.489010,8.845769,7.046416,4.122127,-9.669605,-7.170992,-7.843500,4.707862,0.359614,-9.914127,-6.295930,8.774562,-4.987799,-7.936311,-4.842969,-7.578132,-4.630829,-8.815485,9.556520,-0.657864,-7.205904,9.277013,7.445469,7.206715,-8.837650,-1.558920,-2.154001,0.900335,1.876101,9.264387,-2.508491,5.605384,3.193706,-9.473233,3.859582,0.347292,2.418905,-4.227293,2.585893,5.287962,-5.391225,-7.953846,-5.598072,8.777854,5.370863,2.186120,9.964576,2.139305,1.386415,7.554703,-2.059689,-2.931502,-6.452493,-1.784813,-4.213860,5.520490,-6.262054,-3.109970,-8.844546,-1.808533,-0.032234,0.142389,-4.624803,-7.304427,1.269761,-6.334223,-7.962178,6.793767,-6.158706,-2.993718,-6.227340,1.721522,7.833185,7.829713,4.859804,-9.813297,0.928943,4.103877,-5.622458,4.951647,-1.951376,4.068049,-3.390171,5.243480,2.368351,-9.927934,6.532307,-8.796582,7.944426,-7.826040,7.492254,-1.821364,8.712456,7.432337,7.568034,1.075956,-0.118246,3.414549,3.200284,8.868032,-0.710420,-7.936186,9.528829,6.648771,-7.302710,-2.874084,-1.771761,1.170433,-2.101117,2.377984,7.743667,1.966304,7.927250,0.711017,3.426307,4.640117,-6.119704,-2.130304,-6.270898,-7.015114,1.548027,4.540219,9.236776,7.754324,7.840221,9.069736,7.117602,-8.830148,6.561063,-4.324752,6.738806,1.770267,6.879469,0.213799,8.343317,7.820009,-7.998085,-1.594900,7.832444,-9.986804,-1.421231,5.264273,-8.290002,-9.757651,1.425959,5.534460,7.034115,-7.827036,-4.416126,-5.738960,6.593958,-9.385417,-0.197582,2.573426,3.220905,-9.322103,-3.570573,9.777796,-2.147802,-1.389745,-9.089557,-2.868060,-1.245788,5.977704,-9.606521,-6.050904,6.970341,-4.124584,4.465844,2.289470,4.459322,-4.689592,9.753204,-5.682223,-4.071399,-1.377542,-0.912233,-8.634015,4.799272,9.434525,6.870928,-7.517578,3.030610,6.896697,-0.336482,4.025410,-6.407674,9.258911,4.005057,1.554343,2.238801,2.293623,-5.916807,-1.158226,8.591847,-8.543480,-2.902877,1.111822,9.393891,-6.273690,5.253273,6.545225,-4.876719,8.292461,-9.039585,7.876593,-7.130033,-2.500454,-7.564867,0.573927,-6.208452,-3.847890,-7.213184,-4.983978,-9.717612,9.635083,-2.833291,-4.468597,-7.995373,5.199384,-4.223404,-8.661909,5.700854,-6.862950,6.195954,3.913459,8.572159,-4.545132,8.504341,2.080792,-5.389565,9.912753,7.145777,3.253840,1.655292,-9.859325,5.941747,8.168611,9.029283,-4.826422,1.925406,6.479630,7.346004,-4.830979,-0.106917,3.631960,-6.650432,-3.388044,-9.837675,4.642354,-7.164126,1.451268,-1.219651,-2.184282,-0.692394,6.258149,-4.166051,-2.515736,-9.355253,-7.556141,-5.094792,7.433100,-4.170349,-6.969018,2.475976,-7.938299,-3.647322,1.605982,-2.705951,-6.157781,-0.563597,-7.731641,-6.488600,4.525987,4.049700,-3.582808,5.949309,0.355792,7.080727,-8.509822,1.390411,-6.856796,-1.295957,2.523028,1.380495,-7.832846,5.143584,-1.729998,4.830521,-9.667969,0.785077,0.441287,2.292422,-9.414015,-2.348906,2.271098,4.683163,7.422459,-3.315366,4.036178,4.100274,6.647319,-8.026916,-8.040130,0.431424,9.779798,5.512890,2.073122,0.818135,7.915160,-6.224461,0.452715,-5.113886,-3.728541,5.819364,-1.874874,6.797474,0.945657,1.111402,8.521401,8.282751,3.185677,5.943576,8.834966,-5.990750,0.488343,6.030527,2.008857,5.814831,-1.306764,6.983896,4.415700,9.546111,-7.310524,8.829610,9.777668,-1.812685,4.958892,-3.147377,-6.287069,-6.088609,3.006399,0.862824,5.819583,-3.145764,4.479387,6.548728,-1.891920,-3.753177,2.636714,9.584894,-6.225510,-4.725423,8.769669,-7.501282,9.609790,4.299614,-4.930606,1.628469,-0.858775,-1.921759,4.163900,-2.325420,-5.701499,8.550703,-3.342776,-0.026104,-0.797862,2.511599,8.169862,-8.019307,-5.866461,-9.012883,-3.079628,-4.703903,5.552838,-3.859024,-1.147285,4.688843,4.821803,3.857160,4.793739,-0.170629,-6.237541,5.305833,4.956989,-2.135553,-6.607958,3.670305,1.661747,8.965328,-3.062696,1.644174,-6.041864,7.532625,3.221048,-0.209628,-1.466260,3.787214,-6.565429,9.332588,-1.235906,6.900888,-7.803395,9.850193,-2.728376,-2.542643,-1.530590,-4.178293,-7.342954,7.019144,-6.496416,-3.549677,-9.249550,1.183920,2.023345,6.045636,-2.158574,-7.168396,2.004198,-7.020740,-5.609777,-0.630859,3.473181,9.419514,-6.853011,8.567604,-0.843587,8.927549,1.235359,6.619635,5.303126,-3.505768,6.869079,-9.314881,-5.922298,7.013360,-7.349958,-1.467170,-4.691719,4.395396,-7.868822,1.604069,9.120110,7.413924,2.391441,9.533094,7.296362,-1.930436,-8.250550,9.234495,-9.088973,8.641386,-9.174358,-3.504629,2.189458,4.738250,-4.796667,9.697572,-8.916735,0.647538,9.995188,-1.564375,-2.736314,-3.495653,-6.423423,-8.512797,-3.690003,4.503172,0.776152,5.459756,6.098469,-2.185626,9.830164,1.811667,-6.384200,3.906805,2.541352,0.816932,-3.242106,-4.827975,2.679250,6.777965,-3.998297,7.709797,-6.285623,1.776556,2.049820,-3.705499,7.423332,-0.065091,-4.676966,3.403503,-8.648777,5.330652,-4.748928,9.980311,-7.021341,5.280590,5.805635,-6.866169], dtype = "float32")#candidate|15226|(900,)|const|float32
call_15224 = relay.TupleGetItem(func_371_call(relay.reshape(const_15225.astype('bool'), [16, 11, 9]), relay.reshape(const_15225.astype('bool'), [16, 11, 9]), relay.reshape(const_15226.astype('float32'), [900,]), ), 1)
call_15227 = relay.TupleGetItem(func_376_call(relay.reshape(const_15225.astype('bool'), [16, 11, 9]), relay.reshape(const_15225.astype('bool'), [16, 11, 9]), relay.reshape(const_15226.astype('float32'), [900,]), ), 1)
func_14673_call = mod.get_global_var('func_14673')
func_14675_call = mutated_mod.get_global_var('func_14675')
call_15235 = func_14673_call()
call_15236 = func_14673_call()
func_11027_call = mod.get_global_var('func_11027')
func_11030_call = mutated_mod.get_global_var('func_11030')
const_15242 = relay.const([3,6,8,10,7,7,4,-6,-2,10,9,-2,10,9,-5,1,10,8,7,7,-3,-9,10,7,-4,-4,5,-5,1,6,-8,-6,6,-6,3,6,10,4,-9,-2,7,3,1,8,5,7,-1,-2,8,-10,3,-8,9,3,-2,2,-10,-3,4,4,-3,5,-6,3,-6,7,-8,2,-7,-7,9,-8,4,-3,-1,2,-10,2,-1,-9,9,-6,-1,6,5,-6,-3,-7,-6,-9,-7,-4,5,10,2,-5,-9,10,3,-7,1,5,10,3,2,6,3,6,-6,6,-8,-1,-3,-7,8,5,1,-3,3,8,10,-7,-2,2,9,-7,2,4,-10,-2,-8,6,-10,-10,-7,-2,-10,9,-10,-1,-1,-8,8,-8,4,9,-10,1,5,5,-10,6,-6,2,-8,-6,3,3,7,-4,-3,5,7,7,7,-2,1,-7,-5,-4,1,-1,4,-8,5,-2,-4,-6,-2,10,5,8,-2,-2,3,-9,5,-3,-3,-10,2,1,-8,6,9,3,10,9,-6,8,-8,6,-6,-2,9,-9,3,-10,6,5,1,-9,-9,4,1,7,-10,3,-3,7,7,6,6,3,1,7,-7,-5,-5,4,-5,-5,7,1,3,3,-3,-1,4,-1,3,-8,-2,-7,-4,-5,3,3,10,-9,1,-4,-2,3,9,10,2,2,-1,-3,1,5,9,-3,2,-1,-5,-7,-8,-2,6,8,-10,-4,-9,-7,6,-6,9,-4,-3,-4,-8,3,3,2,7,-7,-10,9,9,-2,9,-2,7,-1,-8,9,8,-3,-7,-10,5,-3,-8,8,10,4,10,-10,-9,9,8,5,-10,-8,-3,5,-4,5,-1,-1,5,-10,9,-5,-9,-10,-2,4,5,-1,8,8,-4,-6,-8,-6,2,9,4,-4,8,-1,-8,2,-6,-2,1,-10,3,-2,3,-5,3,-8,9,1,3,8,10,-9,-7,3,-2,-4,9,7,3,-8,-7,-3,-8,6,8,-7,5,5,6,9,10,-3,9,-2,-4,-7,7,-1,-4,-6,-8,3,8,5,-7,-2,-8,-6,6,7,8,-3,4,10,9,-2,-1,-2,4,-1,-2,8,7,-6,1,3,9,-6,1,5,-4,-1,-4,3,10,9,-6,-3,8,-6,-3,10,-8,-7,4,1,10,2,4,-10,-9,8,5,-8,1,3,6,7,2,3,7,4,5,-9,-1,-5,9,6,3,6,10,7,5,-10,-10,-2,8,-6,4,-3,-6,7,-10,-1,9,-8,-9,6,10,2,2,1,-10,4,2,-10,6,8,-10,-10,8,-7,4,2,1,6,-10,3,3,5,-7,-6,10,-10,2,-9,-9,-9,10,-6,7,-6], dtype = "uint32")#candidate|15242|(512,)|const|uint32
call_15241 = relay.TupleGetItem(func_11027_call(relay.reshape(const_15242.astype('uint32'), [256, 2])), 0)
call_15243 = relay.TupleGetItem(func_11030_call(relay.reshape(const_15242.astype('uint32'), [256, 2])), 0)
uop_15244 = relay.sinh(call_15235.astype('float64')) # shape=(10, 8, 4)
uop_15246 = relay.sinh(call_15236.astype('float64')) # shape=(10, 8, 4)
uop_15276 = relay.acos(uop_15244.astype('float32')) # shape=(10, 8, 4)
uop_15278 = relay.acos(uop_15246.astype('float32')) # shape=(10, 8, 4)
func_13792_call = mod.get_global_var('func_13792')
func_13796_call = mutated_mod.get_global_var('func_13796')
const_15296 = relay.const([3.104794,1.216415,-8.198837,6.210976,-1.949491,-3.675247,4.913732,-4.814299,2.696141,-0.539900,-2.479184,-1.279897,9.085386,1.574015,0.251401,5.419380,-9.728724,7.866139,-0.066064,-5.150514,-5.769570,3.415436,0.420039,8.126117,-0.969380,8.775271,-5.452646,-7.038508,-9.220133,-1.674607,9.874693,4.450685,1.951345,-1.648108,3.767992,-6.702564,7.405283,3.561018,2.463308,6.054784,-2.564181,5.014479,6.404451,-6.004653,1.123011,0.638161,-2.591839,5.124109,6.010487,3.314103,-6.482686,-6.664522,3.698015,2.859480,-4.247365,-7.767668,8.832705,-5.937938,0.020748,-9.257346,5.174639,6.937291,-5.039635,1.800714,-2.963022,-8.018045,-9.182093,-1.948315,-2.932371,6.724875,-7.962931,2.751060,0.085285,-1.927134,-4.825657,3.094366,-0.701344,7.841017,7.321568,-8.461106,6.604457,0.238095,-5.232724,6.997060,2.605753,9.756492,-2.668500,0.670238,-8.943696,-1.005185,-1.458954,8.315658,-8.139930,-4.350462,6.496628,5.032225,2.531787,4.798593,-4.630414,6.863110,4.651645,-2.256517,8.422116,9.941494,5.111189,9.208452,7.593827,0.947685,9.638486,-7.191522,-8.328451,-8.115056,-3.855294,9.526081,-6.929077,-8.997467,-8.566448,-1.895678,-0.129365,5.379557,6.347992,3.707814,1.307143,8.283349,-4.437821,-5.466496,3.238544,2.702839,-2.448877,3.429181,3.201873,-2.766420,-7.079769,7.525111,-0.380349,-8.112498,1.232229,-9.520110,-9.088521,-1.802495,4.534512,-6.244079,7.086401,-8.967742,-0.105350,-5.889428,3.092451,4.388718,6.338599,-3.793154,-1.454584,-7.873887,1.121167,-8.384919,-9.794169,-5.661290,6.404632,-5.754395,-7.563457,-3.832345,-7.287774,-5.786489,9.893003,8.730195,5.283517,-3.163556,9.636071,4.641935,-0.659486,-5.725573,-1.267527,-7.144057,2.865484,-3.692701,-9.654902,5.993486,-9.797282,-3.497501,3.955867,-1.240442,-4.029593,-8.708226,6.356024,-7.417487,-5.304978,-2.880598,2.726658,-1.790662,-7.005756,4.054292,-2.340212,9.799100,-2.414313,-5.943355,-0.592737,-6.643188,-2.549029,-5.844726,3.281203,4.329797,7.733311,-8.788762,-7.523025,-2.537444,-2.514846,6.048846,-9.785788,6.470035,6.618183,-1.296761,-1.207206,-4.174688,-3.888054,8.563588,4.219371,7.727593,-3.538285,1.407890,-3.414938,9.164061,5.789033,5.456938,-3.108173,0.205546,1.739209,5.220142,-0.552104,-0.410164,-7.380152,-4.291856,-6.495278,-9.351679,-6.985126,7.041731,7.472029,3.137933,-1.763306,-7.201473,7.357627,-2.173871,-3.614067,-6.926942,4.041366,2.229913,-4.681178,6.731742,2.281837,-4.604500,8.404102,-5.045924,-5.596944,-9.051496,5.491240,6.317146,-7.219958,9.237537,5.852370,7.044406,-7.553483,-8.375157,1.575509,2.262281,-1.497736,-8.107514,9.943443,-2.100674,-2.658030,-4.012669,-2.380419,-3.659308,6.244711,8.048876,1.218868,2.437954,1.605746,6.817274,2.676136,6.658398,-7.365921,-8.036312,-2.413574,1.667974,1.476825,-8.712192,-1.367172,-0.271817,-2.730717,-0.438496,-3.556691,7.541511,-2.030628,-0.943138,8.911927,3.630855,7.445384,-7.038944,-5.465704,-0.035407,1.376410,1.340549,1.539480,-6.976769,3.116123,-8.268749,-9.852576,0.186788,-7.127067,6.740926,6.587234,2.724899,-3.829475,2.254602,0.131948,-3.607446,-5.024755,-8.307876,4.125750,-0.406545,-2.760471,-5.860792,-5.942717,1.899616,-2.523548,1.082411,4.074296,-4.968604,-3.083423,-1.601176,-3.204458,-1.911838,3.126916,-2.248693,6.703678,9.649347,9.704334,4.712019,-7.981597,-5.103819,5.271713,-7.331973,-7.082318,-6.732717,-9.429414,7.381430,9.827266,-1.018801,-4.431333,0.942123,2.610541,6.299332,-3.281315,-0.112754,7.846585,2.680228,-9.198995,8.694952,1.004024,2.790527,7.858578,-4.505391,2.294790,3.886125,8.553729,4.049198,6.712372,-7.959269,2.819863,-7.216107,5.115076,6.788415,-3.787370,0.385144,-8.728556,8.053516,5.875588,-8.919086,-3.135166,-0.467288,-7.564434,-4.726417,2.103775,-9.160892,-8.615795,2.796870,-1.182757,9.560472,-7.945991,-4.251014,-1.499968,-4.518913,3.430625,-7.557965,-8.196247,-7.299708,-0.281658,-1.212401,6.851361,4.462467,-6.376246,7.628859,4.743645,9.380141,7.095379,7.423438,7.147904,2.711178,-0.457204,4.759292,8.492982,-3.075419,-3.074308,9.331823,4.549374,9.469199,6.252212,-5.219858,-5.298058,-5.820735,-3.335524,9.281880,3.812373,-4.139457,-6.781029,-6.998265,2.008267,3.091722,-4.191023,7.732322,3.979917,9.526359,-6.270940,-3.035381,3.206608,-0.092554,-5.114058,9.038651,1.971361,4.091670,4.776113,9.143766,-5.378371,3.072363,4.167138,-3.331308,7.674059,7.695866,-4.058605,-2.709100,1.418873,7.247130,-2.845663,7.404517,-2.697861,4.207390,1.290577,0.887773,-9.786387,-4.465123,2.288480,-4.375454,-4.293227,-1.244973,3.921002,-8.971790,-3.985415,-8.186617,-8.915970,-6.434455,6.005864,4.620290,-1.950324,-1.425813,7.796502,-9.614687,-6.789518,3.699778,-9.459386,0.915716,6.203066,-0.787333,0.420503,-4.861362,2.062839,-6.939008,4.509282,1.158207,-5.787264,-5.767826,-1.768622,5.104046,4.218106,2.360462,-9.408915,-5.494419,-4.896889,4.963354,2.100839,3.005222,-7.141454,0.745954,7.518775,9.709756,0.350002,5.121450,-4.107072,-2.042861,-9.167147,-8.296293,-5.730218,-8.248662,7.945741,-1.492462,2.402661,7.890478,6.739701,2.373503,5.529281,3.633926,-4.192793,-4.215483,3.814561,6.735687,-4.657414,-6.942911,-0.542726,3.618908,4.139650,-0.796508,-8.789971,-8.115203,6.020156,-0.931140,5.566950,1.652540,5.878897,-2.195687,-4.741399,-1.146555,1.278749,6.971557,5.769373,-9.998336,-5.168101,7.837415,-9.550864,-8.067389,-8.836848,1.586882,-0.042195,0.393754,-1.482660,-4.556963,9.829539,-9.380347,-6.076107,-6.958366,-6.178478,-7.309264,-9.173924,8.636999,3.827930,-1.423662,2.550993,7.486961,-0.609465,2.074642,2.442326,8.535333,-2.439128,9.176663,8.800379,-7.419884,-1.096604,-8.115734,-1.418949,-8.128210,5.380746,7.462455,-3.987508,0.298776,-2.764289,8.403428,-6.808708,-6.215906,-2.441762,8.607066,-1.542498,-1.444043,-6.043356,5.946992,-6.973683,3.280765,-7.948654,-3.824812,9.223400,6.934066,-2.106251,2.398377,3.655155,0.503025,-1.053375,0.206423,-8.180787,6.864104,-2.010809,-9.365145,-5.607595,-0.740195,-4.630660,8.589115,-9.598966,3.643346,-3.194987,-5.464684,2.802599,2.909081,-2.896269,-7.478425,-1.840646,-0.035088,-0.279596,-4.024486,-0.405626,8.075747,9.608523,-7.887164,0.604824,3.473549,9.650533,6.941787,5.249511,-2.897988,5.230047,1.012449,-7.035910,-6.762201,-0.630033,-4.413140,4.429332,8.499743,-1.514093,9.620570,-5.343687,9.433361,-6.292815,-2.219949,-6.368860,4.489253,6.641890,9.742232,-9.018586,-1.801674,-9.561091,3.123132,-3.987108,0.317652,3.518552,-0.647355,2.202279,5.294168,-7.378229,9.860452,-9.540087,-9.541682,4.585033,8.919456,5.956518,-2.900688,-9.516607,8.352273,0.286066,-4.747532,3.225617,-8.297486,-8.687985,-2.549785,5.129878,2.362128,6.827014,8.679748,-1.889489,-8.633134,-5.725670,4.717300,3.747372,6.472135,4.132772,7.594391,-5.011541,5.265426,6.087348,7.797478,-3.980272,-5.661999,-2.023508,-2.367523,-5.810917,-6.623790,-5.066673,-3.919632,-4.831265,-3.026856,3.550255,5.523032,9.453111,-4.704738,-7.797468,7.504500,1.372606,-8.306623,3.403153,-8.863485,-8.029263,-4.531140,-0.356735,-8.858700,-3.562232,1.484651,-5.387418,7.828962,3.508386,-2.764271,9.274499,-5.549068,4.072909,-9.055802,-0.670609,-0.450510,1.039178,3.416159,1.287885,-3.026198,-9.429981,4.339283,-5.118196,-9.264867,5.762668,-2.292796,-9.022097,4.846875,7.236575,-6.573546,-7.743814,-8.339934,8.448606,2.577001,9.518838,-1.788896,9.684530,-7.098022,-9.116658,-1.381757,2.469741,-5.957924,4.386613,8.409269,2.384305,-7.013197,5.138901,0.650004,-6.706329,9.804035,-4.316351,4.944011,-6.889851,-8.016389,-9.670654,-6.328100,6.049275,0.793096,-4.353815,8.001443,-3.935806,4.489505,8.724442,-8.566246,2.935241,9.241830,3.432510,-6.088947,2.675404,-2.539535,6.083421,6.374048,6.911400,3.778658,-7.054503,5.866810,3.702602,-7.923174,4.919828,-7.314927,-7.692235,0.149721,1.877855,1.500090,-0.687016,-2.258516,-3.127318,-0.643118,3.775852,9.620832,-5.643231,-7.396625,9.619629,-0.882522,-1.543875,-1.012931,5.586669,-7.370631,3.292315,9.010156,-3.786486,7.773588,0.960231,-2.158321,2.477491,-9.558496,2.715652,1.118028,1.534433,5.747344,7.143447,5.655898,7.660394,2.243437,4.071533,-3.512369,-0.904686,4.688806,5.891119,-7.803590,3.839415,4.784249,-7.890965,-3.542472,-1.650785,0.987072,0.271113,-3.772023,-2.309696,8.752252,-9.474257,2.602795,3.291741,4.212794,6.913003,4.958193,-2.133234,4.597118,-7.497260,6.077862,7.344204,-3.396034,8.907885,-6.925538,-3.797518,2.733571,6.448022,3.860328,0.968587,-5.322000,9.901919,-3.467214,-8.896608,-6.579247,7.008094,8.109576,-6.890254,5.035259,4.270430,5.112232,9.901850,-6.156758,-9.818132,4.777189,-3.099157,-4.589332,3.868390,-8.502250,-0.251526,-0.221644,-6.014204,-6.127347,2.041745,-4.806633,1.350052,-6.160853,-1.723885,-8.056219,0.435430,5.676608,9.817831,9.451820,-9.324217,-1.655092,-8.609623,-3.572158,-4.604482,6.047241,-2.819998,-1.516155,5.952187,-2.547387,-9.939813,-2.926515,-7.291753,8.667133,6.094611,-5.719745,-3.163256,-7.208762,-6.464901,5.427065,-0.158011,-9.995057,-9.568715,-9.404872,-8.793796,-0.030810,5.173058,-4.117306,-4.763779,3.455227,-9.001969,0.467741,-8.448195,9.918396,-1.931965,-0.545070,5.685701,4.202331,3.323328,2.804149,-3.899279,-8.055342,9.298914,8.100869,3.336164,6.971449,-3.509680,-4.280332,7.545878,5.799207,4.282566,-8.353392,5.941166,-4.924184,4.418347,-1.932660,1.871343,-2.489726,8.824217,-8.477532,-4.207410,-5.073323,-0.182265,-2.736640,-5.222072,9.284201,0.346796,-2.072589,7.765493,6.184306,-3.526128,-8.669366,9.031816,-5.102463,-2.808701,2.314732,8.492683,-2.595159,-8.117415,4.177943,-2.821657,-3.574180,-5.699551,-8.372601,-6.504229,-3.691155,2.864288,-8.939716,2.026619,8.024566,-7.856725,9.474057,-5.322798,2.349583,-9.781060,3.488808,-4.978316,-1.395481,-7.399717,-1.279834,-7.424201,-7.377518,-4.891916,-8.815335,1.894651,5.533957,-6.011934,8.672856,-1.937155,-7.023251,9.892887,-6.068805,2.464366,-9.945738,3.919360,-0.500799,-1.524970,-8.103860,-1.220093,-0.680396,-9.725169,9.648038,-4.554363,-9.160323,2.027390,1.235584,-9.203239,-9.490930,-8.446790,-8.932752,-5.430151,-6.824287,2.933253,7.608969,9.634716,9.591842,4.078016,1.852053,-4.442708,0.502849,-2.355346,-8.852386,-0.038291,-3.953162,-3.945328,-5.119399,-6.509317,3.256222,1.805795,9.055413,-9.153614,3.794731,7.626976,-1.690958,-5.911680,6.183170,-0.660034,7.933288,9.185987,-9.408444,-1.010908,-5.674545,5.675940,-6.603373,-6.137753,1.282819,3.719476,-2.738774,6.171961,-9.584161,-6.267176,-1.151401,3.113320,6.593459,-6.604135,-9.904785,5.977747,1.299554,-9.786554,6.731215,3.208028,-2.920234,4.449307,0.121292,4.126072,-4.226436,5.670739,-8.504218,7.158529,1.658732,8.399120,-4.027181,-2.352039,0.253523,-7.879165,2.050932,-9.470479,-4.184355,3.624882,-3.026043,2.109815,-9.659243,-1.424907,1.802406,1.456963,2.202641,2.819576,1.487197,2.423772,-2.874197,7.561653,6.618743,8.396674,-5.518582,9.092961,8.751303,2.664344,2.904698,8.947888,9.508629,-8.854683,0.674019,8.452542,9.894194,-4.572563,-2.200843,-1.538161,1.588396,2.746331,-6.518055,-8.545938,7.879372,2.897278,8.641243,7.840892,4.440780,8.451724,3.653310,5.305448,8.369721,1.369216,-1.222455,5.775259,5.427218,9.213740,0.379319,-7.565440,4.577236,-0.145290,-4.564259,-4.416105,9.507545,-1.703574,-3.599239,8.626465,4.136693,5.766064,-6.438696,2.912928,7.775855,0.489292,8.979109,4.868465,-5.503763,9.060433,5.403524,-0.597723,-1.847539,-8.610343,9.883961,-3.797446,-2.375029,-3.491685,9.105795,-7.116703,-2.249365,0.895312,2.946262,-1.485097,-0.234233,-2.278538,3.266161,-6.883504,-0.344863,-1.837160,8.490672,-8.604622,-1.720140,-1.261732,1.975021,-2.814509,6.210544,8.624736,-9.745057,-5.348791,2.931101,0.054755,6.433980,-8.440107,-2.351562,8.560302,-5.573917,4.212639,-5.416786,-8.231705,-3.397148], dtype = "float64")#candidate|15296|(1200,)|const|float64
call_15295 = relay.TupleGetItem(func_13792_call(relay.reshape(call_15224.astype('float32'), [900,]), relay.reshape(const_15296.astype('float64'), [2, 600]), ), 5)
call_15297 = relay.TupleGetItem(func_13796_call(relay.reshape(call_15224.astype('float32'), [900,]), relay.reshape(const_15296.astype('float64'), [2, 600]), ), 5)
output = relay.Tuple([call_15222,call_15224,const_15225,const_15226,call_15241,const_15242,uop_15276,call_15295,const_15296,])
output2 = relay.Tuple([call_15223,call_15227,const_15225,const_15226,call_15243,const_15242,uop_15278,call_15297,const_15296,])
func_15304 = relay.Function([], output)
mod['func_15304'] = func_15304
mod = relay.transform.InferType()(mod)
output = func_15304()
func_15305 = relay.Function([], output)
mutated_mod['func_15305'] = func_15305
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10958_call = mod.get_global_var('func_10958')
func_10960_call = mutated_mod.get_global_var('func_10960')
call_15310 = relay.TupleGetItem(func_10958_call(), 0)
call_15311 = relay.TupleGetItem(func_10960_call(), 0)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_15318 = relay.TupleGetItem(func_12265_call(), 1)
call_15319 = relay.TupleGetItem(func_12266_call(), 1)
func_4835_call = mod.get_global_var('func_4835')
func_4839_call = mutated_mod.get_global_var('func_4839')
var_15332 = relay.var("var_15332", dtype = "float64", shape = (35,))#candidate|15332|(35,)|var|float64
const_15333 = relay.const([8.222082,-7.462702,-6.540573,-0.495815,-3.165633,-7.664314,8.617012,-0.348828,8.060023,-2.402551,-4.838740,2.846492,-9.543579,7.240926,8.581627,-7.951393,-2.181497,0.441231,-2.340767,-4.087680,-2.922759,-1.144215,-3.415586,-4.999771,-1.296380,-7.566338,-8.397009,1.394662,6.925928,-1.921092,-5.238988,7.007533], dtype = "float32")#candidate|15333|(32,)|const|float32
var_15334 = relay.var("var_15334", dtype = "float64", shape = (140,))#candidate|15334|(140,)|var|float64
call_15331 = relay.TupleGetItem(func_4835_call(relay.reshape(var_15332.astype('float64'), [7, 5, 1]), relay.reshape(const_15333.astype('float32'), [32,]), relay.reshape(var_15334.astype('float64'), [5, 28]), ), 6)
call_15335 = relay.TupleGetItem(func_4839_call(relay.reshape(var_15332.astype('float64'), [7, 5, 1]), relay.reshape(const_15333.astype('float32'), [32,]), relay.reshape(var_15334.astype('float64'), [5, 28]), ), 6)
output = relay.Tuple([call_15310,call_15318,call_15331,var_15332,const_15333,var_15334,])
output2 = relay.Tuple([call_15311,call_15319,call_15335,var_15332,const_15333,var_15334,])
func_15346 = relay.Function([var_15332,var_15334,], output)
mod['func_15346'] = func_15346
mod = relay.transform.InferType()(mod)
mutated_mod['func_15346'] = func_15346
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15346_call = mutated_mod.get_global_var('func_15346')
var_15348 = relay.var("var_15348", dtype = "float64", shape = (35,))#candidate|15348|(35,)|var|float64
var_15349 = relay.var("var_15349", dtype = "float64", shape = (140,))#candidate|15349|(140,)|var|float64
call_15347 = func_15346_call(var_15348,var_15349,)
output = call_15347
func_15350 = relay.Function([var_15348,var_15349,], output)
mutated_mod['func_15350'] = func_15350
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13319_call = mod.get_global_var('func_13319')
func_13320_call = mutated_mod.get_global_var('func_13320')
call_15413 = relay.TupleGetItem(func_13319_call(), 1)
call_15414 = relay.TupleGetItem(func_13320_call(), 1)
func_14673_call = mod.get_global_var('func_14673')
func_14675_call = mutated_mod.get_global_var('func_14675')
call_15415 = func_14673_call()
call_15416 = func_14673_call()
func_10085_call = mod.get_global_var('func_10085')
func_10088_call = mutated_mod.get_global_var('func_10088')
var_15445 = relay.var("var_15445", dtype = "float32", shape = (768,))#candidate|15445|(768,)|var|float32
var_15446 = relay.var("var_15446", dtype = "float64", shape = (140,))#candidate|15446|(140,)|var|float64
call_15444 = relay.TupleGetItem(func_10085_call(relay.reshape(var_15445.astype('float32'), [16, 3, 16]), relay.reshape(var_15446.astype('float64'), [5, 28]), ), 0)
call_15447 = relay.TupleGetItem(func_10088_call(relay.reshape(var_15445.astype('float32'), [16, 3, 16]), relay.reshape(var_15446.astype('float64'), [5, 28]), ), 0)
func_14776_call = mod.get_global_var('func_14776')
func_14778_call = mutated_mod.get_global_var('func_14778')
call_15454 = func_14776_call()
call_15455 = func_14776_call()
func_12775_call = mod.get_global_var('func_12775')
func_12777_call = mutated_mod.get_global_var('func_12777')
call_15466 = relay.TupleGetItem(func_12775_call(relay.reshape(call_15454.astype('float32'), [6, 3, 8])), 1)
call_15467 = relay.TupleGetItem(func_12777_call(relay.reshape(call_15454.astype('float32'), [6, 3, 8])), 1)
func_13871_call = mod.get_global_var('func_13871')
func_13874_call = mutated_mod.get_global_var('func_13874')
const_15471 = relay.const([False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,False], dtype = "bool")#candidate|15471|(1584,)|const|bool
call_15470 = relay.TupleGetItem(func_13871_call(relay.reshape(const_15471.astype('bool'), [1584,])), 0)
call_15472 = relay.TupleGetItem(func_13874_call(relay.reshape(const_15471.astype('bool'), [1584,])), 0)
var_15479 = relay.var("var_15479", dtype = "uint64", shape = (1936,))#candidate|15479|(1936,)|var|uint64
bop_15480 = relay.bitwise_xor(call_15466.astype('uint32'), relay.reshape(var_15479.astype('uint32'), relay.shape_of(call_15466))) # shape=(1936,)
bop_15483 = relay.bitwise_xor(call_15467.astype('uint32'), relay.reshape(var_15479.astype('uint32'), relay.shape_of(call_15467))) # shape=(1936,)
func_7975_call = mod.get_global_var('func_7975')
func_7978_call = mutated_mod.get_global_var('func_7978')
const_15502 = relay.const(-3, dtype = "uint32")#candidate|15502|()|const|uint32
var_15503 = relay.var("var_15503", dtype = "uint32", shape = (20,))#candidate|15503|(20,)|var|uint32
call_15501 = func_7975_call(relay.reshape(const_15502.astype('uint32'), []), relay.reshape(var_15503.astype('uint32'), [1, 10, 2]), )
call_15504 = func_7975_call(relay.reshape(const_15502.astype('uint32'), []), relay.reshape(var_15503.astype('uint32'), [1, 10, 2]), )
var_15506 = relay.var("var_15506", dtype = "uint32", shape = (1936,))#candidate|15506|(1936,)|var|uint32
bop_15507 = relay.floor_mod(bop_15480.astype('float32'), relay.reshape(var_15506.astype('float32'), relay.shape_of(bop_15480))) # shape=(1936,)
bop_15510 = relay.floor_mod(bop_15483.astype('float32'), relay.reshape(var_15506.astype('float32'), relay.shape_of(bop_15483))) # shape=(1936,)
output = relay.Tuple([call_15413,call_15415,call_15444,var_15445,var_15446,call_15454,call_15470,const_15471,call_15501,const_15502,var_15503,bop_15507,])
output2 = relay.Tuple([call_15414,call_15416,call_15447,var_15445,var_15446,call_15455,call_15472,const_15471,call_15504,const_15502,var_15503,bop_15510,])
func_15515 = relay.Function([var_15445,var_15446,var_15479,var_15503,var_15506,], output)
mod['func_15515'] = func_15515
mod = relay.transform.InferType()(mod)
var_15516 = relay.var("var_15516", dtype = "float32", shape = (768,))#candidate|15516|(768,)|var|float32
var_15517 = relay.var("var_15517", dtype = "float64", shape = (140,))#candidate|15517|(140,)|var|float64
var_15518 = relay.var("var_15518", dtype = "uint64", shape = (1936,))#candidate|15518|(1936,)|var|uint64
var_15519 = relay.var("var_15519", dtype = "uint32", shape = (20,))#candidate|15519|(20,)|var|uint32
var_15520 = relay.var("var_15520", dtype = "uint32", shape = (1936,))#candidate|15520|(1936,)|var|uint32
output = func_15515(var_15516,var_15517,var_15518,var_15519,var_15520,)
func_15521 = relay.Function([var_15516,var_15517,var_15518,var_15519,var_15520,], output)
mutated_mod['func_15521'] = func_15521
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13013_call = mod.get_global_var('func_13013')
func_13015_call = mutated_mod.get_global_var('func_13015')
call_15593 = func_13013_call()
call_15594 = func_13013_call()
var_15614 = relay.var("var_15614", dtype = "float32", shape = (6, 3, 8))#candidate|15614|(6, 3, 8)|var|float32
bop_15615 = relay.bitwise_and(call_15593.astype('int32'), relay.reshape(var_15614.astype('int32'), relay.shape_of(call_15593))) # shape=(6, 3, 8)
bop_15618 = relay.bitwise_and(call_15594.astype('int32'), relay.reshape(var_15614.astype('int32'), relay.shape_of(call_15594))) # shape=(6, 3, 8)
output = relay.Tuple([bop_15615,])
output2 = relay.Tuple([bop_15618,])
func_15624 = relay.Function([var_15614,], output)
mod['func_15624'] = func_15624
mod = relay.transform.InferType()(mod)
var_15625 = relay.var("var_15625", dtype = "float32", shape = (6, 3, 8))#candidate|15625|(6, 3, 8)|var|float32
output = func_15624(var_15625)
func_15626 = relay.Function([var_15625], output)
mutated_mod['func_15626'] = func_15626
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14792_call = mod.get_global_var('func_14792')
func_14794_call = mutated_mod.get_global_var('func_14794')
call_15667 = relay.TupleGetItem(func_14792_call(), 0)
call_15668 = relay.TupleGetItem(func_14794_call(), 0)
func_13984_call = mod.get_global_var('func_13984')
func_13985_call = mutated_mod.get_global_var('func_13985')
call_15685 = relay.TupleGetItem(func_13984_call(), 0)
call_15686 = relay.TupleGetItem(func_13985_call(), 0)
output = relay.Tuple([call_15667,call_15685,])
output2 = relay.Tuple([call_15668,call_15686,])
func_15712 = relay.Function([], output)
mod['func_15712'] = func_15712
mod = relay.transform.InferType()(mod)
mutated_mod['func_15712'] = func_15712
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15712_call = mutated_mod.get_global_var('func_15712')
call_15713 = func_15712_call()
output = call_15713
func_15714 = relay.Function([], output)
mutated_mod['func_15714'] = func_15714
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15796 = relay.var("var_15796", dtype = "int32", shape = (2, 4, 5))#candidate|15796|(2, 4, 5)|var|int32
const_15797 = relay.const([[[4,5,2,5,7],[-1,9,5,-3,9],[-9,-8,3,-8,-3],[-6,-4,-10,-8,-8]],[[-4,-4,-8,-5,5],[4,4,3,-3,2],[-7,-10,1,5,-5],[-6,5,2,-9,4]]], dtype = "int32")#candidate|15797|(2, 4, 5)|const|int32
bop_15798 = relay.minimum(var_15796.astype('int32'), relay.reshape(const_15797.astype('int32'), relay.shape_of(var_15796))) # shape=(2, 4, 5)
func_12903_call = mod.get_global_var('func_12903')
func_12904_call = mutated_mod.get_global_var('func_12904')
call_15818 = func_12903_call()
call_15819 = func_12903_call()
func_12321_call = mod.get_global_var('func_12321')
func_12322_call = mutated_mod.get_global_var('func_12322')
call_15821 = func_12321_call()
call_15822 = func_12321_call()
func_14009_call = mod.get_global_var('func_14009')
func_14010_call = mutated_mod.get_global_var('func_14010')
call_15833 = func_14009_call()
call_15834 = func_14009_call()
func_14130_call = mod.get_global_var('func_14130')
func_14131_call = mutated_mod.get_global_var('func_14131')
call_15839 = relay.TupleGetItem(func_14130_call(), 0)
call_15840 = relay.TupleGetItem(func_14131_call(), 0)
bop_15843 = relay.bitwise_xor(var_15796.astype('uint32'), relay.reshape(bop_15798.astype('uint32'), relay.shape_of(var_15796))) # shape=(2, 4, 5)
func_14717_call = mod.get_global_var('func_14717')
func_14719_call = mutated_mod.get_global_var('func_14719')
const_15853 = relay.const([[9.410781,-8.011571,-4.134690,4.360098,6.504484,2.441395,-8.023880,9.890800,-2.512619,-1.283824,-2.308096,4.826581,-9.144477,-7.638372,-5.801851,-1.113370,-6.345765,8.703857,1.302026,-1.475830],[3.267017,-0.072139,8.103588,2.432998,0.031999,8.431132,5.238740,0.181486,-5.433997,-1.135274,-2.326861,-8.595912,6.312326,1.586110,-8.256489,1.249934,5.080012,3.999106,3.544389,7.473657],[-9.905641,-5.131836,7.823228,-3.490029,8.879768,-1.346717,6.171598,-8.602911,3.201111,7.522772,4.650891,5.326635,-0.092384,0.441823,6.947243,0.665387,-8.375856,4.011825,8.440664,2.333061]], dtype = "float64")#candidate|15853|(3, 20)|const|float64
call_15852 = relay.TupleGetItem(func_14717_call(relay.reshape(const_15853.astype('float64'), [60,])), 0)
call_15854 = relay.TupleGetItem(func_14719_call(relay.reshape(const_15853.astype('float64'), [60,])), 0)
output = relay.Tuple([call_15818,call_15821,call_15833,call_15839,bop_15843,call_15852,const_15853,])
output2 = relay.Tuple([call_15819,call_15822,call_15834,call_15840,bop_15843,call_15854,const_15853,])
func_15856 = relay.Function([var_15796,], output)
mod['func_15856'] = func_15856
mod = relay.transform.InferType()(mod)
mutated_mod['func_15856'] = func_15856
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15857 = relay.var("var_15857", dtype = "int32", shape = (2, 4, 5))#candidate|15857|(2, 4, 5)|var|int32
func_15856_call = mutated_mod.get_global_var('func_15856')
call_15858 = func_15856_call(var_15857)
output = call_15858
func_15859 = relay.Function([var_15857], output)
mutated_mod['func_15859'] = func_15859
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13139_call = mod.get_global_var('func_13139')
func_13141_call = mutated_mod.get_global_var('func_13141')
call_15876 = relay.TupleGetItem(func_13139_call(), 0)
call_15877 = relay.TupleGetItem(func_13141_call(), 0)
func_11448_call = mod.get_global_var('func_11448')
func_11451_call = mutated_mod.get_global_var('func_11451')
var_15891 = relay.var("var_15891", dtype = "uint32", shape = ())#candidate|15891|()|var|uint32
const_15892 = relay.const([-2,7,-10,6,-9,7,-3,-7,10,-6,4,4,-2,-7,1,9,10,1,10,-9], dtype = "uint32")#candidate|15892|(20,)|const|uint32
call_15890 = relay.TupleGetItem(func_11448_call(relay.reshape(var_15891.astype('uint32'), []), relay.reshape(const_15892.astype('uint32'), [20,]), ), 0)
call_15893 = relay.TupleGetItem(func_11451_call(relay.reshape(var_15891.astype('uint32'), []), relay.reshape(const_15892.astype('uint32'), [20,]), ), 0)
func_11128_call = mod.get_global_var('func_11128')
func_11131_call = mutated_mod.get_global_var('func_11131')
call_15895 = relay.TupleGetItem(func_11128_call(relay.reshape(call_15876.astype('float32'), [6, 3, 8])), 0)
call_15896 = relay.TupleGetItem(func_11131_call(relay.reshape(call_15876.astype('float32'), [6, 3, 8])), 0)
output = relay.Tuple([call_15876,call_15890,var_15891,const_15892,call_15895,])
output2 = relay.Tuple([call_15877,call_15893,var_15891,const_15892,call_15896,])
func_15897 = relay.Function([var_15891,], output)
mod['func_15897'] = func_15897
mod = relay.transform.InferType()(mod)
mutated_mod['func_15897'] = func_15897
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15898 = relay.var("var_15898", dtype = "uint32", shape = ())#candidate|15898|()|var|uint32
func_15897_call = mutated_mod.get_global_var('func_15897')
call_15899 = func_15897_call(var_15898)
output = call_15899
func_15900 = relay.Function([var_15898], output)
mutated_mod['func_15900'] = func_15900
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11786_call = mod.get_global_var('func_11786')
func_11787_call = mutated_mod.get_global_var('func_11787')
call_15956 = relay.TupleGetItem(func_11786_call(), 0)
call_15957 = relay.TupleGetItem(func_11787_call(), 0)
output = relay.Tuple([call_15956,])
output2 = relay.Tuple([call_15957,])
func_15960 = relay.Function([], output)
mod['func_15960'] = func_15960
mod = relay.transform.InferType()(mod)
mutated_mod['func_15960'] = func_15960
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15960_call = mutated_mod.get_global_var('func_15960')
call_15961 = func_15960_call()
output = call_15961
func_15962 = relay.Function([], output)
mutated_mod['func_15962'] = func_15962
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12457_call = mod.get_global_var('func_12457')
func_12458_call = mutated_mod.get_global_var('func_12458')
call_15986 = relay.TupleGetItem(func_12457_call(), 0)
call_15987 = relay.TupleGetItem(func_12458_call(), 0)
output = call_15986
output2 = call_15987
func_16014 = relay.Function([], output)
mod['func_16014'] = func_16014
mod = relay.transform.InferType()(mod)
output = func_16014()
func_16015 = relay.Function([], output)
mutated_mod['func_16015'] = func_16015
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12321_call = mod.get_global_var('func_12321')
func_12322_call = mutated_mod.get_global_var('func_12322')
call_16032 = func_12321_call()
call_16033 = func_12321_call()
output = relay.Tuple([call_16032,])
output2 = relay.Tuple([call_16033,])
func_16034 = relay.Function([], output)
mod['func_16034'] = func_16034
mod = relay.transform.InferType()(mod)
mutated_mod['func_16034'] = func_16034
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16034_call = mutated_mod.get_global_var('func_16034')
call_16035 = func_16034_call()
output = call_16035
func_16036 = relay.Function([], output)
mutated_mod['func_16036'] = func_16036
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15174_call = mod.get_global_var('func_15174')
func_15175_call = mutated_mod.get_global_var('func_15175')
call_16066 = func_15174_call()
call_16067 = func_15174_call()
output = relay.Tuple([call_16066,])
output2 = relay.Tuple([call_16067,])
func_16072 = relay.Function([], output)
mod['func_16072'] = func_16072
mod = relay.transform.InferType()(mod)
output = func_16072()
func_16073 = relay.Function([], output)
mutated_mod['func_16073'] = func_16073
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14673_call = mod.get_global_var('func_14673')
func_14675_call = mutated_mod.get_global_var('func_14675')
call_16168 = func_14673_call()
call_16169 = func_14673_call()
func_14130_call = mod.get_global_var('func_14130')
func_14131_call = mutated_mod.get_global_var('func_14131')
call_16176 = relay.TupleGetItem(func_14130_call(), 0)
call_16177 = relay.TupleGetItem(func_14131_call(), 0)
func_12883_call = mod.get_global_var('func_12883')
func_12884_call = mutated_mod.get_global_var('func_12884')
call_16181 = func_12883_call()
call_16182 = func_12883_call()
output = relay.Tuple([call_16168,call_16176,call_16181,])
output2 = relay.Tuple([call_16169,call_16177,call_16182,])
func_16185 = relay.Function([], output)
mod['func_16185'] = func_16185
mod = relay.transform.InferType()(mod)
output = func_16185()
func_16186 = relay.Function([], output)
mutated_mod['func_16186'] = func_16186
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15960_call = mod.get_global_var('func_15960')
func_15962_call = mutated_mod.get_global_var('func_15962')
call_16203 = relay.TupleGetItem(func_15960_call(), 0)
call_16204 = relay.TupleGetItem(func_15962_call(), 0)
func_16185_call = mod.get_global_var('func_16185')
func_16186_call = mutated_mod.get_global_var('func_16186')
call_16211 = relay.TupleGetItem(func_16185_call(), 0)
call_16212 = relay.TupleGetItem(func_16186_call(), 0)
output = relay.Tuple([call_16203,call_16211,])
output2 = relay.Tuple([call_16204,call_16212,])
func_16218 = relay.Function([], output)
mod['func_16218'] = func_16218
mod = relay.transform.InferType()(mod)
mutated_mod['func_16218'] = func_16218
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16218_call = mutated_mod.get_global_var('func_16218')
call_16219 = func_16218_call()
output = call_16219
func_16220 = relay.Function([], output)
mutated_mod['func_16220'] = func_16220
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14043_call = mod.get_global_var('func_14043')
func_14045_call = mutated_mod.get_global_var('func_14045')
call_16239 = func_14043_call()
call_16240 = func_14043_call()
func_4143_call = mod.get_global_var('func_4143')
func_4145_call = mutated_mod.get_global_var('func_4145')
var_16242 = relay.var("var_16242", dtype = "float64", shape = (1, 60))#candidate|16242|(1, 60)|var|float64
call_16241 = relay.TupleGetItem(func_4143_call(relay.reshape(var_16242.astype('float64'), [10, 2, 3])), 0)
call_16243 = relay.TupleGetItem(func_4145_call(relay.reshape(var_16242.astype('float64'), [10, 2, 3])), 0)
output = relay.Tuple([call_16239,call_16241,var_16242,])
output2 = relay.Tuple([call_16240,call_16243,var_16242,])
func_16250 = relay.Function([var_16242,], output)
mod['func_16250'] = func_16250
mod = relay.transform.InferType()(mod)
mutated_mod['func_16250'] = func_16250
mutated_mod = relay.transform.InferType()(mutated_mod)
var_16251 = relay.var("var_16251", dtype = "float64", shape = (1, 60))#candidate|16251|(1, 60)|var|float64
func_16250_call = mutated_mod.get_global_var('func_16250')
call_16252 = func_16250_call(var_16251)
output = call_16252
func_16253 = relay.Function([var_16251], output)
mutated_mod['func_16253'] = func_16253
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15145_call = mod.get_global_var('func_15145')
func_15146_call = mutated_mod.get_global_var('func_15146')
call_16268 = relay.TupleGetItem(func_15145_call(), 0)
call_16269 = relay.TupleGetItem(func_15146_call(), 0)
func_12542_call = mod.get_global_var('func_12542')
func_12544_call = mutated_mod.get_global_var('func_12544')
const_16273 = relay.const([False,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,True,False], dtype = "bool")#candidate|16273|(1584,)|const|bool
call_16272 = relay.TupleGetItem(func_12542_call(relay.reshape(const_16273.astype('bool'), [1584,])), 5)
call_16274 = relay.TupleGetItem(func_12544_call(relay.reshape(const_16273.astype('bool'), [1584,])), 5)
output = relay.Tuple([call_16268,call_16272,const_16273,])
output2 = relay.Tuple([call_16269,call_16274,const_16273,])
func_16287 = relay.Function([], output)
mod['func_16287'] = func_16287
mod = relay.transform.InferType()(mod)
output = func_16287()
func_16288 = relay.Function([], output)
mutated_mod['func_16288'] = func_16288
mutated_mod = relay.transform.InferType()(mutated_mod)
const_16289 = relay.const([[[6.355840,-2.966488,8.234711,-2.850591,-3.221120,-2.264204,7.945056,-2.577637,-4.968611,7.259132,3.224195,5.033588,-8.619664,-7.400768],[2.229623,-4.291746,5.572615,-4.963571,-8.779677,-5.285822,0.901834,-6.415648,9.256845,-6.466723,0.489404,-7.866641,6.749332,-0.162389],[8.536544,-0.368809,-8.182559,5.891311,-0.671566,-6.793044,-9.908531,6.816208,8.551646,6.674270,-8.316268,-0.994782,9.884907,-3.037651]],[[9.363347,9.053571,7.879798,0.650701,-0.791276,6.025466,-9.657005,4.715071,0.374991,-8.954311,-7.894800,3.056324,8.864458,-1.751985],[-8.369646,-4.145315,9.698525,-7.753809,6.416516,-5.144952,4.025019,-5.540409,-3.566875,-3.245288,-1.414043,-0.935041,-5.569411,5.799769],[-7.620463,8.218001,-2.778196,-6.143326,9.973928,-6.860998,-3.875680,-1.357843,5.791903,-2.488436,-4.899594,9.856439,8.769328,8.874885]]], dtype = "float32")#candidate|16289|(2, 3, 14)|const|float32
uop_16290 = relay.cos(const_16289.astype('float32')) # shape=(2, 3, 14)
output = relay.Tuple([uop_16290,])
output2 = relay.Tuple([uop_16290,])
func_16349 = relay.Function([], output)
mod['func_16349'] = func_16349
mod = relay.transform.InferType()(mod)
mutated_mod['func_16349'] = func_16349
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16349_call = mutated_mod.get_global_var('func_16349')
call_16350 = func_16349_call()
output = call_16350
func_16351 = relay.Function([], output)
mutated_mod['func_16351'] = func_16351
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13984_call = mod.get_global_var('func_13984')
func_13985_call = mutated_mod.get_global_var('func_13985')
call_16419 = relay.TupleGetItem(func_13984_call(), 0)
call_16420 = relay.TupleGetItem(func_13985_call(), 0)
func_16349_call = mod.get_global_var('func_16349')
func_16351_call = mutated_mod.get_global_var('func_16351')
call_16425 = relay.TupleGetItem(func_16349_call(), 0)
call_16426 = relay.TupleGetItem(func_16351_call(), 0)
output = relay.Tuple([call_16419,call_16425,])
output2 = relay.Tuple([call_16420,call_16426,])
func_16427 = relay.Function([], output)
mod['func_16427'] = func_16427
mod = relay.transform.InferType()(mod)
output = func_16427()
func_16428 = relay.Function([], output)
mutated_mod['func_16428'] = func_16428
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14483_call = mod.get_global_var('func_14483')
func_14484_call = mutated_mod.get_global_var('func_14484')
call_16471 = relay.TupleGetItem(func_14483_call(), 2)
call_16472 = relay.TupleGetItem(func_14484_call(), 2)
output = relay.Tuple([call_16471,])
output2 = relay.Tuple([call_16472,])
func_16484 = relay.Function([], output)
mod['func_16484'] = func_16484
mod = relay.transform.InferType()(mod)
mutated_mod['func_16484'] = func_16484
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16484_call = mutated_mod.get_global_var('func_16484')
call_16485 = func_16484_call()
output = call_16485
func_16486 = relay.Function([], output)
mutated_mod['func_16486'] = func_16486
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16034_call = mod.get_global_var('func_16034')
func_16036_call = mutated_mod.get_global_var('func_16036')
call_16498 = relay.TupleGetItem(func_16034_call(), 0)
call_16499 = relay.TupleGetItem(func_16036_call(), 0)
output = call_16498
output2 = call_16499
func_16502 = relay.Function([], output)
mod['func_16502'] = func_16502
mod = relay.transform.InferType()(mod)
mutated_mod['func_16502'] = func_16502
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16502_call = mutated_mod.get_global_var('func_16502')
call_16503 = func_16502_call()
output = call_16503
func_16504 = relay.Function([], output)
mutated_mod['func_16504'] = func_16504
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14009_call = mod.get_global_var('func_14009')
func_14010_call = mutated_mod.get_global_var('func_14010')
call_16520 = func_14009_call()
call_16521 = func_14009_call()
func_3245_call = mod.get_global_var('func_3245')
func_3248_call = mutated_mod.get_global_var('func_3248')
const_16526 = relay.const([-1.196903,9.309381,-3.849054,5.970514,-3.046876,-8.064111,-7.329411,-8.166882,3.058476,0.123172,8.163101,2.454520,8.201580,1.096282,-7.492877,-8.192703,5.534391,5.925197,-0.403999,-8.976793,-0.739542,-4.786054,-8.799866,-1.478882,3.592289,6.131154,-6.493851,7.387764,6.253056,8.791774,-7.016287,-7.316157,9.905998,9.008727,-9.406127,-3.998926,-3.221568,5.387628,6.036434,-6.581374,7.916851,7.077032,-1.892573,-5.911416,-5.512336,5.971418,1.027207,-0.418817,-1.689322,-4.026696,0.834761,2.865023,-8.949467,-3.392153,-7.273975,-7.174365,-6.418568,-4.288104,-0.556243,8.798539,-1.942118,6.126384,-1.623829,-2.853045,3.552973,-1.544627,0.192636,-2.420992,-6.060697,8.411072,-8.781075,4.981564,6.372374,6.657224,-4.869382,-6.722082,-5.035175,-0.081809,0.452490,9.923770,-5.274081,7.824722,8.348978,9.458570,-8.247632,5.123113,-8.804258,-3.763246,-9.257804,8.301535,-3.298048,4.073441,-2.482723,5.937480,-2.007988,-3.152395,-6.965939,-5.637485,-5.488408,-3.187094,-4.892965,4.665448,-6.711253,-8.894656,6.408477,3.538002,-0.439275,-9.746985,-9.159933,-3.400661,-9.956465,8.333395,6.311379,6.587567,7.462479,-2.401684,4.009059,-4.943866,7.642244,-8.095390,1.277500,-5.263051,-9.921665,-6.261188,8.180683,3.815890,4.153574,-2.793663,-8.982464,-2.677655,8.295965,1.122375,-5.520841,-4.501549,-8.786826,6.178653,-9.218989,6.157414,-8.728021,-5.549145], dtype = "float64")#candidate|16526|(140,)|const|float64
call_16525 = relay.TupleGetItem(func_3245_call(relay.reshape(const_16526.astype('float64'), [7, 2, 10]), relay.reshape(const_16526.astype('float64'), [7, 2, 10]), ), 0)
call_16527 = relay.TupleGetItem(func_3248_call(relay.reshape(const_16526.astype('float64'), [7, 2, 10]), relay.reshape(const_16526.astype('float64'), [7, 2, 10]), ), 0)
bop_16529 = relay.floor_mod(const_16526.astype('float32'), relay.reshape(call_16525.astype('float32'), relay.shape_of(const_16526))) # shape=(140,)
bop_16532 = relay.floor_mod(const_16526.astype('float32'), relay.reshape(call_16527.astype('float32'), relay.shape_of(const_16526))) # shape=(140,)
output = relay.Tuple([call_16520,bop_16529,])
output2 = relay.Tuple([call_16521,bop_16532,])
func_16536 = relay.Function([], output)
mod['func_16536'] = func_16536
mod = relay.transform.InferType()(mod)
output = func_16536()
func_16537 = relay.Function([], output)
mutated_mod['func_16537'] = func_16537
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13668_call = mod.get_global_var('func_13668')
func_13669_call = mutated_mod.get_global_var('func_13669')
call_16551 = func_13668_call()
call_16552 = func_13668_call()
func_2501_call = mod.get_global_var('func_2501')
func_2505_call = mutated_mod.get_global_var('func_2505')
const_16567 = relay.const([0.462552,-8.286904,9.022139,-5.525618,1.573684,0.556004,-3.908282,-3.762571,-2.252847,6.532009,4.644938,-0.215773,7.066555,-0.957551,3.603423,-4.025974,-4.354003,4.960478,-4.244907,7.666198,-8.415109,5.978034,-0.474460,-3.375892,-0.451745,5.201004,-6.169435,7.129925,8.055091,-2.352911,8.805881,-8.267909,4.739446,2.436438,0.052962,-4.392650,1.651690,2.448722,2.272707,8.641798,8.457056,-1.158953,-6.082055,2.292536,5.465861,-1.380343,-3.174040,-4.482028,-0.232815,2.948448,-0.600451,-5.589361,6.702894,4.464866,2.444389,4.404789,1.926383,-0.871629,7.210389,-5.483605,6.548144,3.195414,4.181726,-4.830223,0.405743,7.176846,1.348551,-2.066155,5.678760,5.443789,-7.036623,7.842320,-4.797938,7.120709,9.051835,-3.488879,-7.352008,4.060283,4.380307,8.713280,3.961171,-1.375873,-3.031130,-4.201684,5.280452,1.119268,-0.013857,1.635437,-7.900768,-5.551256,-4.109419,7.761284,6.958689,-5.080801,-0.651214,9.538515,8.493235,-8.945775,-1.629415,1.781023,-8.875528,3.014908,-8.948007,-7.132794,6.826779,-8.615797,5.194998,-0.990464,-0.618090,-6.584217,5.864544,0.664735,1.226033,-7.036919,-7.948757,5.647617,-8.259839,4.289930,-5.792343,-5.914213,-0.178213,4.038928,-6.999237,-9.758721,8.771947,3.584483,2.387150,3.136952,-5.709689,-3.038867,2.857166,0.696745,1.204529,-9.766040,-4.630230,1.164433,-5.513324,3.817806,1.491347,8.902436,-3.961640,6.458974,9.511044,-3.199263,-0.933007,-7.747302,3.166967,-8.168377,-8.525701,-5.091555,2.054642,-7.315884,-4.143242,-4.938232,8.917581,-6.383365,-0.835886,1.101990,-2.424592,1.330891,4.083101,9.297171,5.400565,1.409615,-6.433781,8.691600,2.162484,4.913286,0.131188,5.677140,-2.302312,-2.916008,7.575989,-4.951973,1.835996,4.172712,-3.200179,8.134769,-2.953730,6.489657,-6.838099,-2.235856,-4.255093,-2.487328,3.805356,5.382257,2.328018,-9.657492,9.553849,2.329008,-6.903507,6.320032,9.581301,-9.959847,7.603988,-5.969836,-4.108288,-2.989193,2.765988,-4.828700,-8.875271,-2.243689,8.050749,2.559809,3.137505,-5.365302,2.808706,-3.689312,-1.609921,-3.325324,1.126470,-5.750432,6.493718,-7.292345,0.481528,8.751794,-7.647119,6.126146,-4.537037,0.680250,5.458233,7.498244,2.777984,5.964864,-4.842968,-1.412744,9.272876,-1.638547,8.684228,6.072608,8.898897,-3.850062,-3.640864,-6.678076,-9.178025,-7.078423,3.236228,-2.424571,-6.493589,-1.257234,7.186197,-5.584670,1.062071,3.462217,5.747370,3.692623,0.771527,5.153236,-4.661169,-1.847589,5.122067,-7.131200,-5.825917,2.338710,1.985447,-9.282354,-4.457774,8.902987,0.341346,-9.179127,1.666464,6.058433,-8.824158,-7.352157,-4.635033,4.453485,9.516002,-5.531629,8.186281,-3.703697,-5.215750,2.034816,5.880912,-7.232382,-4.471364,-6.974030,0.588178,-2.645273,-0.916201,-1.026004,-0.357208,-4.305905,1.058054,7.438258,-9.331005,4.401577,-5.849553,-7.618660,5.669964,-1.366741,2.608493,2.170324,3.060590,-6.711184,-1.108924,-8.584020,4.826621,2.258341,-7.653044,6.235834,-7.878663,0.127545,5.616337,8.005734,-0.379574,-4.077614,-3.287554,-5.206526,-2.235858,0.833346,2.333362,3.047320,-5.777970,-7.626850,0.047719,8.727754,-8.250607,2.658526,-8.830471,7.809460,-5.482973,1.457761,5.030882,-2.426930,-6.967188,1.750312,-1.593860,-2.927626,5.020935,0.966810,-0.474372,-4.784756,8.546455,7.227701,-5.405914,-8.033518,-5.190456,7.906023,-5.284545,2.892272,6.335263,-3.974842,5.189213,-3.156115,8.559830,-1.039852,4.994868,3.084775,-1.646648,-2.719353,2.831010,8.524313,-7.263685,9.192331,2.615066,-0.798289,2.027968,-7.174554,4.294011,5.547254,-4.737721,7.130413,8.917458,-3.805367,0.567196,-7.971395,4.528044,-3.944287,7.082431,-2.389747,6.398131,2.728749,-9.091224,7.876960,7.274800,-6.722432,-4.321055,2.777920,-6.924500,5.571912,-8.738993,-9.158539,-4.924933,-4.966821,4.673385,-0.838486,0.652569,4.822753,2.446793,3.959030,-2.221948,-3.371509,7.609184,-7.125552,5.950619,0.520554,4.126743,9.505259,1.994074,8.972812,7.166833,3.242771,-8.779268,-5.870275,9.367824,-3.832855,3.964067,7.685464,-7.135790,0.522269,3.110334,1.582331,-7.836562,-9.623978,-8.162645,-5.607397,2.317287,-3.245300,1.352763,6.368293,7.275304,-2.902057,-3.205494,4.556620,9.203876,-4.835739,-4.809686,4.419938,7.256619,-5.620617,-0.175585,6.622332,-2.738101,8.852021,-2.674625,-5.567455,-6.114516,-0.647444,-9.411743,7.383324,-7.859570,3.104573,3.416534,-2.924675,-1.444053,1.525447,7.075690,1.223509,-5.571963,1.706673,2.995698,-7.706682,-7.020289,9.263559,7.954806,-2.759905,-9.807200,-5.211362,5.740919,-8.896260,9.404547,-8.996829,-0.441933,-4.962780,-8.977915,2.360396,4.406172,6.544470,1.037640,0.961118,8.463028,-5.152136,3.941741,4.726743,1.363141,-2.874454,7.360718,-1.385607,-1.717758,0.678027,-4.621549,2.937212,-2.551756,-5.992288,3.694547,-0.820825,5.336124,-0.526095,1.190335,8.824389,-8.889987,9.820503,-2.635932,5.321875,-9.503090,0.872531,-9.614647,3.457719,2.312787,-7.589922,4.563790,6.990584,0.418824,4.831218,-2.978062,-0.134792,-6.039441,-0.415542,4.395668,-3.571880,-5.838457,-1.353719,-2.893378,-0.961310,6.121928,-4.982482,0.995155,-4.907313,5.750710,-5.541203,-8.011079,-3.214077,-4.362731,-5.275226,3.303645,-1.788520,-7.154555,-8.366339,-2.642752,3.877355,0.139907,-1.812037,9.408641,5.517647,-2.622683,-8.561682,-6.617326,7.204714,-9.392084,-9.408417,-9.778858,5.527467,-6.700522,3.890784,-9.424883,-2.613981,-1.168009,5.134999,6.185579,2.228395,-4.245735,0.578525,-0.445515,8.493231,-6.135668,-3.162053,-2.477639,8.846699,1.408906,4.182229,6.577264,1.262919,-8.792252,-9.228233,-4.133745,0.622211,4.701273,5.039423,-2.088071,-7.582222,3.971394,7.705904,4.106182,-1.888947,-9.917941,-9.928840,6.917717,7.893336,-9.127217,-4.670922,4.285654,2.567403,-1.816366,9.982758,-7.797960,7.388019,-8.541358,7.440165,1.159699,0.156767,-4.446674,-4.768391,2.394143,8.965759,5.419852,-6.602836,-8.851143,0.844946,0.403756,5.094611,8.672319,6.478793,6.613521,9.338400,-1.749461,-6.486029,-0.850452,-1.500348,2.531154,-5.027532,0.392995,9.128783,-5.740098,-2.306489,8.589010,7.079912,-0.295593,7.447463,-7.172542,6.656268,4.581564,7.911301,-0.974643,6.366509,3.894707,-9.969533,8.678953,-0.547529,-3.463942,8.447825,-5.778285,-0.568079,7.780287,3.871426,-8.708884,-6.367836,-0.888474,-9.104600,2.489492,-5.680490,5.986209,-1.508559,5.458089,-1.635310,9.062078,8.642909,4.014735,1.914532,6.563460,-0.200666,7.596194,8.261754,-9.332031,-3.496549,-7.575754,-0.804274,4.132919,-5.761930,-6.124385,-2.476740,-9.902434,8.810730,-6.223399,-3.931230,2.094349,6.614277,0.742891,0.977067,-3.774588,2.158201,-4.167131,-8.177564,-7.953589,-3.130157,-9.066290,7.585833,4.528053,-6.950103,1.456967,6.839576,6.229852,2.821407,-0.476265,-5.394019,-4.636279,5.098419,5.788488,-8.795278,-4.100045,-2.944320,1.722494,1.259489,5.559182,-4.721415,-6.937135,3.360247,2.535109,-5.870693,2.955236,-4.767164,-8.794772,4.426089,-1.959307,-5.862132,-8.573878,8.074155,-1.483391,-3.425507,-1.569875,-2.544857,7.147290,-2.147806,-2.215431,-9.151897,5.925080,8.402146,-5.643994,8.442139,-2.467684,8.711389,9.281424,-4.791384,7.627614,7.234081,-1.628599,-9.890126,1.971903,-8.735563,8.164690,-0.103727,3.937961,-1.021370,-6.196714,-4.760000,0.120216,2.330492,-6.366700,-6.702542,3.934741,6.023852,3.908588,8.436557,-0.494649,-3.642258,-7.210983,-5.550489,-4.391386,1.296663,5.413777,5.352728,8.043924,8.600386,4.708868,8.736390,9.396925,-6.934856,-6.687478,6.423720,9.567553,-9.222138,-3.029099,5.196042,5.742982,8.098563,7.542604,-4.910690,-4.934068,-9.435402,3.264980,-7.018679,8.485835,-9.358874,-9.452651,-0.443687,5.406653,1.236340,-3.616709,5.055636,1.331244,-0.930408,9.909932,7.910419,-4.840417,0.840886,0.406155,-7.635599,-5.768385,-0.447443,-6.573874,-5.981904,6.233215,-7.793858,5.375658,4.954584,-4.712187,4.429449,-4.382145,1.267626,-7.743585,5.339937,-5.707866,-6.205458,-5.646981,0.998853,-2.057487,-6.996045,0.748337,8.448465,-8.937087,1.627977,-8.779852,7.381722,7.684442,5.240311,7.841077,3.916396,-8.282419,6.993069,-3.500574,8.390334,-1.817391,-4.390962,-3.399368,-8.633105,6.537419,-6.408786,-0.494337,-9.706460,-3.235165,-9.949706,-7.428901,-5.005350,4.845701,2.023217,-4.587765,-6.590629,7.119326,4.020531,-2.992345,-9.884811,1.656697,2.531068,-1.656872,-2.683720,0.770948,5.680467,-8.737826,-2.205340,4.142839,-1.441017,4.381851,-7.500437,6.777090,-7.517845,-6.843915,8.070092,1.737863,2.853340,3.410984,1.351374,-0.984940,-6.801431,-9.631078,9.743414,8.301531,7.233639,-8.798987,3.109164,2.543307,-6.173990,-6.793292,-0.132009,-2.482585,-7.559516,5.930831,7.485559,-1.201317,-5.564880,-3.035236,-7.245058,9.049629,-2.842185,6.117420,-0.096853,-6.587000,-0.039072,-7.747993,-8.410891,7.709134,-5.056844,-5.480496,-6.228727,-9.350546,4.854298,-1.035307,-8.435477,-8.523483,-4.643659,-2.621433,-1.882289,7.488279,3.833165,2.528322,-8.754286,-1.407167,3.009195,-7.105881,1.201820,1.084386,-3.943348,-5.917243,4.255893,9.835493,1.411907,-7.271315,-7.519560,-3.428677,-8.109274,-1.451124,-6.709843,7.976255,7.786236,-7.433818,-0.759686,-1.988293,0.001411,8.342624,6.895895,-6.836746,-3.893386,-5.757765,-0.648804,8.107035,7.588290,-9.918644,-7.367517,7.966473,9.805118,0.754440,1.454901,-8.621457,-9.635675,-4.396382,2.681613,-9.435011,0.227782,-5.188830,-1.128064,-3.925484,2.063394,0.334372,5.429160,-8.171871,-3.175561,-2.366732,7.752160,2.777585,9.828395,3.440688,-2.953361,-5.878396,-5.654926,-3.391431,-7.268303,-2.978571,7.939560,-6.766048,5.318741,9.393066,-5.610511,4.217500,4.263763,4.162301,-2.734402,8.782155,9.756109,3.125243,-4.554433,-5.573578,-5.120473,8.616669,-2.016323,-4.311694,-0.056643,-6.803685,-6.238660,-8.406198,-6.571163,-0.859792,-7.476598,9.679653,2.757616,3.451449,-4.574970,2.945954,8.772694,-7.580406,-9.421514,0.972332,3.076744,4.833053,4.462799,7.249462,2.035135,5.897449,6.263447,0.432597,0.814768,-9.572449,-4.725866,-3.127055,-9.826418,-5.556508,-0.977853,4.423124,3.865883,2.154840,-5.381390,-8.518736,-2.384691,5.674673,-9.574325,-7.753820,-8.885564,-1.038796,-4.352231,-8.296957,9.679334,9.010669,-7.194420,2.581058,8.466233,-1.879138,6.265221,-4.573069,-9.523493,9.096975,-6.175767,-3.407123,7.206537,-6.447276,-4.249383,-5.541877,4.871319,4.632396,1.988777,5.840213,0.641445,-9.153326,-7.144850,-1.837449,8.179957,6.098123,3.732839,-1.187949,-0.654329,0.197949,9.412616,6.539012,8.886925,-0.994357,0.888911,-5.264891,9.414507,-9.722340,5.618657,2.628773,-2.929419,-2.332649,-0.325776,-5.812873,8.902904,3.216124,-1.995313,2.999193,3.022222,-8.123189,1.189874,3.372393,7.210895,-9.997069,-9.310056,4.617473,8.760332,9.775485,-4.985304,-8.926961,8.751906,-8.669073,-6.330362,0.962269,9.686989,1.112542,-1.259648,-2.329253,-2.510160,-0.094919,-4.522790,5.351931,-6.328363,4.832307,0.918961,-5.350358,-6.239225,-2.599267,1.754667,-2.441543,0.026242,0.553838,1.940295,0.467493,6.515040,-3.789929,-0.887199,6.118009,-3.508201,7.175100,-9.826756,-2.001991,0.926907,-5.216832,3.498893,3.502684,-7.873964,-2.480570,-4.314677,5.691588,-4.553074,4.434567,4.429388,9.421911,-3.836193,1.553933,-1.207804,2.685289,-6.260255,-6.031832,-6.949005,-6.839856,2.673622,-4.064098,9.378331,2.547849,-2.582182,-9.093334,0.741440,3.689728,-2.894605,-8.256137,4.803225,-9.972365,1.349371,5.568628,8.577251,-6.375377,-1.466250,-7.557314,-3.302495,2.082695,1.140043,7.297359,2.105262,-9.208108,0.171656,1.237770,-8.884769,2.143187,-7.400368,9.271064,-3.744466,-6.482204,1.827553,-7.067518,-0.261001,-0.751101,0.515451,-7.605278,-7.220702,2.553913,-0.738785,-4.583676,-0.595940,-4.702076,-1.650581,-1.850170,-3.843549,-4.973955,-0.341403,1.985410,-5.114184,-7.176591,5.627680,2.311081,7.570771,-1.803995,2.980183,-1.126338,-3.728858,-0.649303,-2.169029], dtype = "float64")#candidate|16567|(1200,)|const|float64
const_16568 = relay.const([[6.513999,8.089174,2.662502,0.116901,0.087417,4.090137,3.462177,-7.010461,-2.484209,3.540918,6.507801,-2.902677,-1.090342,-5.834177,0.892302,8.131366,3.893923,-2.858220,-4.790599,4.319273,-3.537340,-2.680808,-8.009715,-4.978246,2.433180,0.692835,-6.840777,7.652611,-3.360446,8.213925,-7.075639,-6.592946,0.531640,9.979136,-4.602047,5.790118,0.449524,8.201477,-9.279902,-6.624177,9.172591,0.615527,6.484822,-0.452930,-7.690142,0.052608,7.542217,-0.439559,0.430505,-1.732948,9.908781,-5.266576,-1.536028,-4.185693,-6.420565,-3.850855,2.699527,0.148317,-3.408838,-1.683291,3.841069,-1.130576,1.522769,4.274315,-6.550848,-2.084961,-5.182767,-8.431904,-1.984981,7.633235,0.561183,-5.831224,6.196210,-4.788449,-2.646877,8.095245,-3.311412,-3.966055,-0.541252,-2.213950,6.158016,-6.168637,-8.100661,-8.431690,-9.662073,5.276173,-3.017212,-4.586602,8.335606,6.189834,5.294713,1.764998,-6.347597,2.498981,2.301480,8.223073,-7.628122,-0.670039,-7.423068,-7.807147,4.264492,0.325050,3.469675,4.797193,-0.664747,-7.445957,1.884131,9.053744,2.698628,5.838528,1.236485,-1.365650,-1.187475,-3.544691,2.194314,4.360591,-4.776072,-0.244212,-6.007428,-2.933442,4.312044,-9.837108,-0.847619,-8.217834,-0.165533,-6.935989,8.576589,-8.067126,-0.319855,-1.457688,5.736749,-9.205464,-9.861583,6.092153,-4.139747,5.023315,4.134613,9.893612,-6.953402,6.983657,2.444569,-5.046734,-0.614788,-6.416806,5.117685,8.664378,9.093439,-4.647994,-8.099348,-8.752238,5.440543,-8.256981,-9.443933,-9.884453,-3.486487,3.352571,6.072653,-5.360631,-6.505882,-6.799206,6.101638,-0.325982,7.292809,1.204122,9.723030,5.419484,5.514624,0.367436,4.211025,-0.881444,0.057501,4.773038,7.996987,5.600612,-8.679997,2.690851,7.485845,-4.578760,-1.662927,-7.875398,-4.729714,-2.516668,-6.853395,5.640799,3.436591,8.409707,1.439009,-6.397957,-7.849281,7.098870,5.124913,-7.289985,-4.641225,-3.811043,-0.308941,-7.134741,-1.611419,5.602201,-7.713117,-6.614061,-1.564708,1.897223,-6.825013,2.521788,7.271558,2.289162,2.677249,2.971585,2.850746,6.574413,-2.249443,-9.476365,-8.085142,5.608495,-3.869556,9.205152,9.134826,-5.786789,-2.892268,-9.708243,-6.701678,-7.085379,-3.485923,-8.840753,0.245641,8.656591,0.998500,-4.024037,3.757451,6.956003,1.583466,8.373603,0.567222,-2.015011,9.338155,5.825036,5.752560,5.565899,1.232913,2.146600,8.812127,-4.515532,-1.262135,9.053755,5.913465,9.867455,7.487424,0.933253,-7.992022,-0.805517,6.570823,-6.158001,5.524677,-4.878182,9.895433,-9.591153,-6.324085,4.496302,4.296873,6.954260,6.654967,-0.864082,1.623206,5.360226,5.175022,1.861198,9.568519,8.538867,9.942666,6.648843,4.249483,-3.743024,0.800589,-0.779702,-8.533503,8.952395,-1.390376,-1.025853,0.736502,-9.032738,4.068320,7.947784,7.932492,6.779666,-0.908913,7.516515,-0.991521,-2.213152,3.545644,1.760925,-6.261171,-8.557021,-0.604489,-0.735532,-8.758283,-4.652909,-2.280224,8.982456,9.458015,-1.189719,8.358736,9.352340,5.054238,8.549129,0.283288,-8.833699,9.145951,-2.976937,6.960155,-7.155350,4.348704,9.309840,-9.609942,2.771499,-7.571638,-9.908650,5.096236,8.126238,1.784023,-5.035059,9.022781,-9.014741,6.652454,-7.121152,6.776021,-7.966266,-9.082733,-9.373117,-9.539678,-7.579641,5.172841,3.576020,-1.432274,-8.271735,3.440866,-5.694983,4.300339,-1.998257,-3.670171,-4.589170,1.746756,-3.319321,-4.214962,-0.349276,9.884058,5.082992,6.733208,1.892426,-5.551979,2.637433,-1.934362,-9.309012,-3.106653,-3.657969,-6.139458,-4.117003,-9.186120,2.899030,0.442599,8.105849,-6.340706,-7.834142,2.073455,9.892390,6.013627,-0.898365,1.170806,7.238666,5.910420,-0.109081,-3.335183,6.079442,4.078547,-4.465261,-9.308379,2.703669,-5.278050,9.668320,-0.437852,5.223294,4.508572,5.225885,2.505401,4.982618,7.572936,-5.332409,-9.074531,-1.278342,-1.641900,8.038719,-6.282754,7.981276,-1.304039,9.384156,4.988344,-9.258354,-0.757048,7.644560,-4.522550,-1.733308,-8.021302,-2.575201,-4.471179,9.019554,9.875596,0.827419,0.747189,-3.553585,7.486741,-5.092810,3.366273,-8.006756,0.343542,9.736913,-4.411631,7.701132,-3.648969,0.328952,-5.090337,9.627929,6.830495,7.935788,3.774476,-9.410162,2.261869,7.633877,5.788849,-4.426029,-4.204387,8.701675,8.448416,2.041779,-6.089183,-5.591471,4.633145,-2.383712,2.776406,-3.822158,5.098885,3.642196,0.064572,3.812015,-2.651587,0.762623,3.354068,3.938728,8.360995,-4.907667,-0.906235,-4.244100,-3.357467,-4.184939,1.479138,-1.091280,-3.423302,0.527450,4.264650,-7.633327,2.828109,-0.642196,-7.873303,2.479836,-4.072120,6.060988,5.520081,3.795207,-6.590973,0.481628,-1.867850,9.331691,4.391322,-2.699375,8.907378,9.968205,7.331532,-5.194826,7.687773,0.729325,2.589224,-3.850841,4.398107,8.277789,-2.139903,3.058997,-4.310432,3.983650,8.216615,-7.304700,-4.438061,1.711559,6.527371,-7.292587,-5.916354,4.924051,-2.196469,-9.020576,1.236044,-0.713065,-6.725128,-2.806573,-3.144574,-8.250709,6.805606,-6.088564,-1.016388,5.803566,7.423206,2.192587,-0.067426,-4.574302,-5.958703,-5.187906,-2.719634,5.888709,-0.252589,9.586680,3.222765,-6.404495,2.700113,4.675116,0.507664,6.226184,-7.367206,-2.724348,5.306987,9.599901,6.533757,5.487032,-2.986182,-9.941615,-8.204245,0.733423,2.939026,3.519045,7.635891,1.915155,4.983315,1.861090,1.309249,-9.311325,-5.156824,-5.059976,9.464192,0.893366,3.133942,-9.268598,-7.668683,7.361455,-2.006760,-5.781996,2.088803,-6.988426,-3.900574,-2.739384,6.649284,5.825440,2.992338,7.056208,4.613737,-9.131151,-2.879476,5.854793,6.046778,-9.252683,4.765723,7.429030,-8.292303,8.596276,1.759004,-3.595708,5.882398,6.008998,-1.542967,5.928806,6.119940,-5.663530,9.641472,-8.237042,-8.011376,-1.008831,3.547511,8.537667,9.160771,7.909516,-4.243703,6.579102,3.075550,-8.917094,7.672465,4.181678,-0.021203,-3.423150,6.872498,-6.415936,2.703687,4.178101,-3.395208,6.479077,-7.513345,-7.509793,-6.767235,-3.909288,-4.238251,7.654133,-3.903746,0.911490,-9.973148,-0.641507,-5.948500,-5.046689,7.864806,7.007127,-0.040031,6.211317,8.590015,5.112290,9.456811,1.304131,0.866942,9.019196,8.983659,-6.667621,-0.111199,-1.964332,1.710522,6.177976,-1.191799,-2.140157,9.564984,0.993457,1.270934,-5.843590,-6.542417,9.583612,1.017785,-3.194364,8.142575,-9.604113,0.442646,-3.352845,8.371844,-9.340654,-9.484419,-2.647364,-8.869856,-7.096366,7.085437,6.490286,-1.467058,2.197673,4.321559,2.302354,-4.684522,4.032645,-5.689010,-3.573210,2.118365,9.548910,8.908073,5.565086,-0.039598,8.982626,-8.938778,0.962328,2.295037,-9.747726,-6.628774,7.160720,-4.631393,3.633486,7.000521,-5.905111,-4.296597,-3.026161,-4.150709,9.207235,-8.725262,-4.749320,1.495657,8.055887,-0.860322,-3.902577,6.095884,3.892040,-9.092619,-1.452698,-6.924198,-9.220005,3.327965,-1.574498,-8.153897,-5.949259,-1.637097,9.382066,-7.423988,3.389447,4.526408,-1.838584,2.225546,-1.497390,-0.082644,3.092341,1.477736,2.187927,6.886725,-1.212963,5.370411,-7.693201,5.497724,-8.658812,-6.572284,-9.158418,1.390902,5.196866,-5.883206,-6.368301,-2.373492,3.969695,0.366166,-6.155569,-5.445838,-3.022250,1.419524,-5.646939,-9.598393,2.149591,-3.173896,-5.194041,-4.452661,-8.725220,3.303807,8.511431,7.497970,-0.969407,6.257096,2.320495,1.633951,5.842791,-8.781561,-0.089937,-3.360443,0.537168,4.317903,-4.179148,6.798757,6.101466,2.648640,2.880383,0.233329,1.592556,-9.094237,7.144261,-1.664149,5.593156,-9.942906,-8.799956]], dtype = "float32")#candidate|16568|(1, 756)|const|float32
call_16566 = relay.TupleGetItem(func_2501_call(relay.reshape(const_16567.astype('float64'), [1200, 1]), relay.reshape(const_16568.astype('float32'), [756,]), ), 5)
call_16569 = relay.TupleGetItem(func_2505_call(relay.reshape(const_16567.astype('float64'), [1200, 1]), relay.reshape(const_16568.astype('float32'), [756,]), ), 5)
output = relay.Tuple([call_16551,call_16566,const_16567,const_16568,])
output2 = relay.Tuple([call_16552,call_16569,const_16567,const_16568,])
func_16581 = relay.Function([], output)
mod['func_16581'] = func_16581
mod = relay.transform.InferType()(mod)
output = func_16581()
func_16582 = relay.Function([], output)
mutated_mod['func_16582'] = func_16582
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12689_call = mod.get_global_var('func_12689')
func_12691_call = mutated_mod.get_global_var('func_12691')
call_16586 = relay.TupleGetItem(func_12689_call(), 1)
call_16587 = relay.TupleGetItem(func_12691_call(), 1)
output = relay.Tuple([call_16586,])
output2 = relay.Tuple([call_16587,])
func_16594 = relay.Function([], output)
mod['func_16594'] = func_16594
mod = relay.transform.InferType()(mod)
mutated_mod['func_16594'] = func_16594
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16594_call = mutated_mod.get_global_var('func_16594')
call_16595 = func_16594_call()
output = call_16595
func_16596 = relay.Function([], output)
mutated_mod['func_16596'] = func_16596
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11860_call = mod.get_global_var('func_11860')
func_11862_call = mutated_mod.get_global_var('func_11862')
call_16614 = relay.TupleGetItem(func_11860_call(), 2)
call_16615 = relay.TupleGetItem(func_11862_call(), 2)
func_16287_call = mod.get_global_var('func_16287')
func_16288_call = mutated_mod.get_global_var('func_16288')
call_16616 = relay.TupleGetItem(func_16287_call(), 2)
call_16617 = relay.TupleGetItem(func_16288_call(), 2)
func_6123_call = mod.get_global_var('func_6123')
func_6128_call = mutated_mod.get_global_var('func_6128')
const_16625 = relay.const(-6.067256, dtype = "float64")#candidate|16625|()|const|float64
var_16626 = relay.var("var_16626", dtype = "float64", shape = (26,))#candidate|16626|(26,)|var|float64
var_16627 = relay.var("var_16627", dtype = "float32", shape = (900,))#candidate|16627|(900,)|var|float32
call_16624 = relay.TupleGetItem(func_6123_call(relay.reshape(const_16625.astype('float64'), []), relay.reshape(var_16626.astype('float64'), [13, 1, 2]), relay.reshape(call_16616.astype('bool'), [1584,]), relay.reshape(var_16627.astype('float32'), [900,]), ), 3)
call_16628 = relay.TupleGetItem(func_6128_call(relay.reshape(const_16625.astype('float64'), []), relay.reshape(var_16626.astype('float64'), [13, 1, 2]), relay.reshape(call_16616.astype('bool'), [1584,]), relay.reshape(var_16627.astype('float32'), [900,]), ), 3)
func_2803_call = mod.get_global_var('func_2803')
func_2806_call = mutated_mod.get_global_var('func_2806')
var_16633 = relay.var("var_16633", dtype = "float32", shape = (32,))#candidate|16633|(32,)|var|float32
call_16632 = relay.TupleGetItem(func_2803_call(relay.reshape(var_16633.astype('float32'), [4, 8, 1])), 0)
call_16634 = relay.TupleGetItem(func_2806_call(relay.reshape(var_16633.astype('float32'), [4, 8, 1])), 0)
output = relay.Tuple([call_16614,call_16616,call_16624,const_16625,var_16626,var_16627,call_16632,var_16633,])
output2 = relay.Tuple([call_16615,call_16617,call_16628,const_16625,var_16626,var_16627,call_16634,var_16633,])
func_16635 = relay.Function([var_16626,var_16627,var_16633,], output)
mod['func_16635'] = func_16635
mod = relay.transform.InferType()(mod)
var_16636 = relay.var("var_16636", dtype = "float64", shape = (26,))#candidate|16636|(26,)|var|float64
var_16637 = relay.var("var_16637", dtype = "float32", shape = (900,))#candidate|16637|(900,)|var|float32
var_16638 = relay.var("var_16638", dtype = "float32", shape = (32,))#candidate|16638|(32,)|var|float32
output = func_16635(var_16636,var_16637,var_16638,)
func_16639 = relay.Function([var_16636,var_16637,var_16638,], output)
mutated_mod['func_16639'] = func_16639
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15126_call = mod.get_global_var('func_15126')
func_15127_call = mutated_mod.get_global_var('func_15127')
call_16656 = relay.TupleGetItem(func_15126_call(), 5)
call_16657 = relay.TupleGetItem(func_15127_call(), 5)
output = call_16656
output2 = call_16657
func_16661 = relay.Function([], output)
mod['func_16661'] = func_16661
mod = relay.transform.InferType()(mod)
output = func_16661()
func_16662 = relay.Function([], output)
mutated_mod['func_16662'] = func_16662
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13952_call = mod.get_global_var('func_13952')
func_13954_call = mutated_mod.get_global_var('func_13954')
call_16716 = func_13952_call()
call_16717 = func_13952_call()
output = call_16716
output2 = call_16717
func_16718 = relay.Function([], output)
mod['func_16718'] = func_16718
mod = relay.transform.InferType()(mod)
output = func_16718()
func_16719 = relay.Function([], output)
mutated_mod['func_16719'] = func_16719
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16185_call = mod.get_global_var('func_16185')
func_16186_call = mutated_mod.get_global_var('func_16186')
call_16743 = relay.TupleGetItem(func_16185_call(), 2)
call_16744 = relay.TupleGetItem(func_16186_call(), 2)
func_16661_call = mod.get_global_var('func_16661')
func_16662_call = mutated_mod.get_global_var('func_16662')
call_16747 = func_16661_call()
call_16748 = func_16661_call()
output = relay.Tuple([call_16743,call_16747,])
output2 = relay.Tuple([call_16744,call_16748,])
func_16749 = relay.Function([], output)
mod['func_16749'] = func_16749
mod = relay.transform.InferType()(mod)
output = func_16749()
func_16750 = relay.Function([], output)
mutated_mod['func_16750'] = func_16750
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14444_call = mod.get_global_var('func_14444')
func_14445_call = mutated_mod.get_global_var('func_14445')
call_16787 = func_14444_call()
call_16788 = func_14444_call()
output = relay.Tuple([call_16787,])
output2 = relay.Tuple([call_16788,])
func_16830 = relay.Function([], output)
mod['func_16830'] = func_16830
mod = relay.transform.InferType()(mod)
mutated_mod['func_16830'] = func_16830
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16830_call = mutated_mod.get_global_var('func_16830')
call_16831 = func_16830_call()
output = call_16831
func_16832 = relay.Function([], output)
mutated_mod['func_16832'] = func_16832
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13350_call = mod.get_global_var('func_13350')
func_13351_call = mutated_mod.get_global_var('func_13351')
call_16852 = relay.TupleGetItem(func_13350_call(), 1)
call_16853 = relay.TupleGetItem(func_13351_call(), 1)
func_14512_call = mod.get_global_var('func_14512')
func_14513_call = mutated_mod.get_global_var('func_14513')
call_16884 = func_14512_call()
call_16885 = func_14512_call()
func_16072_call = mod.get_global_var('func_16072')
func_16073_call = mutated_mod.get_global_var('func_16073')
call_16901 = relay.TupleGetItem(func_16072_call(), 0)
call_16902 = relay.TupleGetItem(func_16073_call(), 0)
output = relay.Tuple([call_16852,call_16884,call_16901,])
output2 = relay.Tuple([call_16853,call_16885,call_16902,])
func_16920 = relay.Function([], output)
mod['func_16920'] = func_16920
mod = relay.transform.InferType()(mod)
output = func_16920()
func_16921 = relay.Function([], output)
mutated_mod['func_16921'] = func_16921
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16349_call = mod.get_global_var('func_16349')
func_16351_call = mutated_mod.get_global_var('func_16351')
call_17006 = relay.TupleGetItem(func_16349_call(), 0)
call_17007 = relay.TupleGetItem(func_16351_call(), 0)
func_12182_call = mod.get_global_var('func_12182')
func_12184_call = mutated_mod.get_global_var('func_12184')
call_17016 = func_12182_call()
call_17017 = func_12182_call()
output = relay.Tuple([call_17006,call_17016,])
output2 = relay.Tuple([call_17007,call_17017,])
func_17036 = relay.Function([], output)
mod['func_17036'] = func_17036
mod = relay.transform.InferType()(mod)
output = func_17036()
func_17037 = relay.Function([], output)
mutated_mod['func_17037'] = func_17037
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14130_call = mod.get_global_var('func_14130')
func_14131_call = mutated_mod.get_global_var('func_14131')
call_17038 = relay.TupleGetItem(func_14130_call(), 0)
call_17039 = relay.TupleGetItem(func_14131_call(), 0)
output = call_17038
output2 = call_17039
func_17040 = relay.Function([], output)
mod['func_17040'] = func_17040
mod = relay.transform.InferType()(mod)
mutated_mod['func_17040'] = func_17040
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17040_call = mutated_mod.get_global_var('func_17040')
call_17041 = func_17040_call()
output = call_17041
func_17042 = relay.Function([], output)
mutated_mod['func_17042'] = func_17042
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16484_call = mod.get_global_var('func_16484')
func_16486_call = mutated_mod.get_global_var('func_16486')
call_17047 = relay.TupleGetItem(func_16484_call(), 0)
call_17048 = relay.TupleGetItem(func_16486_call(), 0)
output = call_17047
output2 = call_17048
func_17054 = relay.Function([], output)
mod['func_17054'] = func_17054
mod = relay.transform.InferType()(mod)
output = func_17054()
func_17055 = relay.Function([], output)
mutated_mod['func_17055'] = func_17055
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15145_call = mod.get_global_var('func_15145')
func_15146_call = mutated_mod.get_global_var('func_15146')
call_17076 = relay.TupleGetItem(func_15145_call(), 1)
call_17077 = relay.TupleGetItem(func_15146_call(), 1)
output = relay.Tuple([call_17076,])
output2 = relay.Tuple([call_17077,])
func_17083 = relay.Function([], output)
mod['func_17083'] = func_17083
mod = relay.transform.InferType()(mod)
output = func_17083()
func_17084 = relay.Function([], output)
mutated_mod['func_17084'] = func_17084
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14551_call = mod.get_global_var('func_14551')
func_14552_call = mutated_mod.get_global_var('func_14552')
call_17097 = relay.TupleGetItem(func_14551_call(), 0)
call_17098 = relay.TupleGetItem(func_14552_call(), 0)
output = relay.Tuple([call_17097,])
output2 = relay.Tuple([call_17098,])
func_17103 = relay.Function([], output)
mod['func_17103'] = func_17103
mod = relay.transform.InferType()(mod)
mutated_mod['func_17103'] = func_17103
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17103_call = mutated_mod.get_global_var('func_17103')
call_17104 = func_17103_call()
output = call_17104
func_17105 = relay.Function([], output)
mutated_mod['func_17105'] = func_17105
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10958_call = mod.get_global_var('func_10958')
func_10960_call = mutated_mod.get_global_var('func_10960')
call_17199 = relay.TupleGetItem(func_10958_call(), 0)
call_17200 = relay.TupleGetItem(func_10960_call(), 0)
func_17036_call = mod.get_global_var('func_17036')
func_17037_call = mutated_mod.get_global_var('func_17037')
call_17229 = relay.TupleGetItem(func_17036_call(), 1)
call_17230 = relay.TupleGetItem(func_17037_call(), 1)
output = relay.Tuple([call_17199,call_17229,])
output2 = relay.Tuple([call_17200,call_17230,])
func_17237 = relay.Function([], output)
mod['func_17237'] = func_17237
mod = relay.transform.InferType()(mod)
mutated_mod['func_17237'] = func_17237
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17237_call = mutated_mod.get_global_var('func_17237')
call_17238 = func_17237_call()
output = call_17238
func_17239 = relay.Function([], output)
mutated_mod['func_17239'] = func_17239
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13319_call = mod.get_global_var('func_13319')
func_13320_call = mutated_mod.get_global_var('func_13320')
call_17240 = relay.TupleGetItem(func_13319_call(), 0)
call_17241 = relay.TupleGetItem(func_13320_call(), 0)
func_16185_call = mod.get_global_var('func_16185')
func_16186_call = mutated_mod.get_global_var('func_16186')
call_17276 = relay.TupleGetItem(func_16185_call(), 0)
call_17277 = relay.TupleGetItem(func_16186_call(), 0)
func_12883_call = mod.get_global_var('func_12883')
func_12884_call = mutated_mod.get_global_var('func_12884')
call_17284 = func_12883_call()
call_17285 = func_12883_call()
func_685_call = mod.get_global_var('func_685')
func_687_call = mutated_mod.get_global_var('func_687')
var_17289 = relay.var("var_17289", dtype = "float32", shape = (756,))#candidate|17289|(756,)|var|float32
call_17288 = relay.TupleGetItem(func_685_call(relay.reshape(var_17289.astype('float32'), [756,])), 3)
call_17290 = relay.TupleGetItem(func_687_call(relay.reshape(var_17289.astype('float32'), [756,])), 3)
output = relay.Tuple([call_17240,call_17276,call_17284,call_17288,var_17289,])
output2 = relay.Tuple([call_17241,call_17277,call_17285,call_17290,var_17289,])
func_17294 = relay.Function([var_17289,], output)
mod['func_17294'] = func_17294
mod = relay.transform.InferType()(mod)
mutated_mod['func_17294'] = func_17294
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17295 = relay.var("var_17295", dtype = "float32", shape = (756,))#candidate|17295|(756,)|var|float32
func_17294_call = mutated_mod.get_global_var('func_17294')
call_17296 = func_17294_call(var_17295)
output = call_17296
func_17297 = relay.Function([var_17295], output)
mutated_mod['func_17297'] = func_17297
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12883_call = mod.get_global_var('func_12883')
func_12884_call = mutated_mod.get_global_var('func_12884')
call_17308 = func_12883_call()
call_17309 = func_12883_call()
func_11860_call = mod.get_global_var('func_11860')
func_11862_call = mutated_mod.get_global_var('func_11862')
call_17337 = relay.TupleGetItem(func_11860_call(), 3)
call_17338 = relay.TupleGetItem(func_11862_call(), 3)
func_14902_call = mod.get_global_var('func_14902')
func_14907_call = mutated_mod.get_global_var('func_14907')
var_17342 = relay.var("var_17342", dtype = "float64", shape = (128,))#candidate|17342|(128,)|var|float64
var_17343 = relay.var("var_17343", dtype = "float64", shape = (256,))#candidate|17343|(256,)|var|float64
call_17341 = relay.TupleGetItem(func_14902_call(relay.reshape(var_17342.astype('float64'), [16, 1, 8]), relay.reshape(var_17343.astype('float64'), [16, 2, 8]), relay.reshape(var_17343.astype('float64'), [16, 2, 8]), ), 0)
call_17344 = relay.TupleGetItem(func_14907_call(relay.reshape(var_17342.astype('float64'), [16, 1, 8]), relay.reshape(var_17343.astype('float64'), [16, 2, 8]), relay.reshape(var_17343.astype('float64'), [16, 2, 8]), ), 0)
output = relay.Tuple([call_17308,call_17337,call_17341,var_17342,var_17343,])
output2 = relay.Tuple([call_17309,call_17338,call_17344,var_17342,var_17343,])
func_17353 = relay.Function([var_17342,var_17343,], output)
mod['func_17353'] = func_17353
mod = relay.transform.InferType()(mod)
var_17354 = relay.var("var_17354", dtype = "float64", shape = (128,))#candidate|17354|(128,)|var|float64
var_17355 = relay.var("var_17355", dtype = "float64", shape = (256,))#candidate|17355|(256,)|var|float64
output = func_17353(var_17354,var_17355,)
func_17356 = relay.Function([var_17354,var_17355,], output)
mutated_mod['func_17356'] = func_17356
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16287_call = mod.get_global_var('func_16287')
func_16288_call = mutated_mod.get_global_var('func_16288')
call_17376 = relay.TupleGetItem(func_16287_call(), 1)
call_17377 = relay.TupleGetItem(func_16288_call(), 1)
output = relay.Tuple([call_17376,])
output2 = relay.Tuple([call_17377,])
func_17383 = relay.Function([], output)
mod['func_17383'] = func_17383
mod = relay.transform.InferType()(mod)
output = func_17383()
func_17384 = relay.Function([], output)
mutated_mod['func_17384'] = func_17384
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13139_call = mod.get_global_var('func_13139')
func_13141_call = mutated_mod.get_global_var('func_13141')
call_17435 = relay.TupleGetItem(func_13139_call(), 0)
call_17436 = relay.TupleGetItem(func_13141_call(), 0)
func_14266_call = mod.get_global_var('func_14266')
func_14269_call = mutated_mod.get_global_var('func_14269')
const_17462 = relay.const([[0.118036,3.913038,0.142960,-0.649992,0.803822,-1.140276,-6.697915,-2.547698,-5.229202,9.671759,-7.514353,5.040948,-6.314475,-6.728506,-8.241070,-7.128587,7.492011,-5.862855,-2.153669,-6.771532,-8.238509,-2.180703,-2.699285,7.605624,-3.118310,4.276298,3.045930,-7.680409,1.175601,6.203579,-9.152081,5.829932,4.275214,-4.096637,-5.260837,-4.814788,-6.925035,8.115934,1.724759,5.124218,-3.984412,-9.821774,3.152102,5.481080,-3.343575,-0.506622,-4.783857,-9.939502,4.243175,7.750698,7.613790,-0.715666,-1.129622,9.704233,-2.910116,1.566847,7.288050,0.161972,-5.441532,7.406229,1.390129,3.857454,-3.264606,5.977452,9.587920,6.596381,-9.347605,-5.784139,-9.149436,5.273515,-2.986117,6.798511,-8.194970,-7.819851,9.306596,0.944302,8.701159,-3.682376,1.125899,5.289260,2.403165,8.530658,-6.823089,-6.611422,6.029167,-2.071490,0.644940,3.093151,-3.243490,-5.357245,-0.148949,-1.893177,7.107806,0.975518,-5.840146,5.701026,4.366981,-1.333626,-5.079638,-3.976753,-6.903898,4.949150,-8.504411,7.930797,-9.215540,-6.854480,-3.081192,-8.632881,-6.074943,-8.446444,-4.837266,-8.127073,-2.406132,5.833475,2.232524,9.255023,-6.663354,8.612513,0.478972,2.534516,6.005124,-5.181619,-3.900315,2.206479,-7.868844,-3.379331,0.755957,3.334845,4.915779,-7.292616,-1.605285,-2.165987,-2.049459,-2.493526,-8.796283,5.915689,9.749974,9.147678,-4.457711,-0.164304,-2.553828,7.533922,4.221902,-7.497089,2.624270,-6.994696,-9.229695,4.280887,-6.133429,-9.619840,2.434386,-9.676710,-3.165568,5.652986,-2.121118,3.411125,-7.976392,-2.767620,1.077278,-7.271221,0.970540,4.241519,4.115082,-3.847657,-9.862550,-5.801005,-4.637444,-1.092259,8.045574,4.158603,-0.373709,-4.119115,3.793134,-3.224522,4.251615,-5.830095,4.564833,-1.333229,-4.268018,9.497578,-7.133913,-3.135647,-3.781670,7.425414,-9.793377,-6.661254,4.537361,1.941201,8.426586,-5.844964,-4.717005,-4.693231,-0.663602,-7.420198,2.811498,7.280707,-0.297830,8.403268,-5.771558,-5.203038,8.277370,3.933175,3.242226,-9.908274,8.304135,-7.113919,7.510755,9.166011,9.001675,-8.644895,7.759009,-9.069087,6.563220,4.940626,-6.555816,3.752832,-7.502633,7.301607,5.860477,-5.929793,-3.995736,1.419153,9.430365,7.303245,-6.760015,-8.106342,6.556608,8.105341,-6.126288,-8.926374,-0.535497,-9.729980,9.526211,4.178029,4.316581,5.627185,-2.607288,9.181275,0.390213,-6.275808,-9.658726,-6.309667,-6.268053,3.411383,-3.313682,0.196565,8.488635,9.451736,5.013778,8.901003,-9.363771,-9.824774,0.383287,0.258750,-5.897904,2.881572,-1.518541,-9.174721,4.664833,3.105194,-9.550513,1.324679,-8.025572,-5.946406,7.038202,7.043408,-7.479198,-6.286244,6.399447,-6.562528,8.017296,7.952479,6.381472,-9.220900,9.565728,-2.013466,5.794922,2.085401,-2.072735,9.561708,4.931829,-7.817719,7.587696,-9.644514,-7.229803,-6.695238,-8.936921,6.650004,-5.897026,-7.162326,7.702002,1.230448,-1.254560,-0.695719,-2.536904,-7.008514,-5.678524,5.838255,2.719278,4.672917,-1.165430,-4.419938,3.314698,9.633454,6.614338,0.151900,-2.803594,9.006690,7.596144,-4.307553,-6.837701,9.599620,2.127014,-7.626989,-6.513103,-5.855359,3.452910,2.305415,-8.034184,-7.957893,5.655150,-0.304649,-1.992638,-6.574261,6.526399,5.007665,-4.952101,6.629802,0.509757,-6.826542,3.845303,0.217891,3.917770,4.733966,5.474075,-8.747946,8.139090,-1.226657]], dtype = "float32")#candidate|17462|(1, 338)|const|float32
call_17461 = relay.TupleGetItem(func_14266_call(relay.reshape(const_17462.astype('float32'), [338,])), 0)
call_17463 = relay.TupleGetItem(func_14269_call(relay.reshape(const_17462.astype('float32'), [338,])), 0)
const_17480 = relay.const([[-6.469520,-3.751741,1.824672,-0.286853,-1.579747,7.748915,6.677161,5.629110,6.248226,5.855545,0.736029,9.025474,-4.428075,8.227789,7.483786,6.563462,3.654045,5.355424,-8.721423,-8.723504,1.435233,-7.388487,9.324783,-6.903784,9.720710,-4.873482,-1.504189,5.568095,2.320371,-4.871912,0.794597,4.572141,7.657747,8.840296,-1.599106,-8.833260,5.211028,-7.753655,3.674808,5.964175,-8.682198,4.122064,2.305526,-5.712863,-8.558038,7.046307,-9.768220,-3.238681,4.903673,-2.277196,2.108638,-1.382674,3.030747,-4.024668,4.110978,5.092954,4.888820,0.323452,-8.712831,3.587731,-2.511074,-9.925196,3.712544,-5.144529,8.598056,-0.047250,1.451836,2.746680,-2.496446,3.610483,-9.154951,2.139839,-0.668883,-9.458761,-3.382388,0.335123,9.457102,-8.623457,-3.152441,9.691490,2.921556,-9.934568,-9.855298,0.544083,0.562782,3.263848,3.640989,8.609274,2.113490,-2.278065,-2.086173,-9.139052,-5.429902,-0.092853,5.222281,-8.687421,-2.781309,9.771649,-2.166892,2.102438,-5.189266,4.538729,7.437277,6.107725,1.443185,2.743867,1.930903,2.456485,-9.210615,-1.805381,6.438689,-2.384610,8.402616,1.808657,-1.585169,-5.103534,1.092054,-3.801920,-3.139309,4.138013,-2.050169,3.553855,-6.588008,1.225580,0.916587,-4.861368,-3.336995,-5.750014,-2.312934,0.121417,-1.050452,9.203547,-9.917487,-6.219518,0.397602,-9.171542,-1.392880,2.887996,-2.889731,7.107540,-0.686667,-2.631882,-5.827807,2.712009,-2.493765,0.940163,-0.256948,-8.293473,2.910132,3.791559,-6.645132,-6.025861,-4.985203,2.068157,-0.451648,-2.344727,-9.862355,9.521386,9.650804,-0.875426,1.956867,-1.688888,-0.154844,-9.443319,5.909443,8.915790,4.312721,5.249033,9.577177,-1.421512,4.106612,5.720465,-2.601734,5.640209,0.841445,1.380533,9.265990,-4.392183,3.288623,1.296321,-6.681405,-6.010208,-3.912089,2.400198,6.583540,5.020000,-9.800256,-5.604413,5.185992,-2.248188,5.220301,-1.954305,0.970344,0.887564,6.968292,-3.152487,0.900708,-5.684122,-8.875084,0.230346,7.802135,-0.248504,0.209383,-4.336626,-1.867031,4.390160,6.705862,9.587625,-2.857197,8.563989,0.955256,-1.670835,-5.227132,9.348996,-7.239164,-1.702176,8.927531,-1.921878,-5.259550,-0.145021,9.671900,-1.795487,7.402082,-0.513416,-7.306251,3.627890,5.062079,-1.049297,-9.503692,-1.931028,7.414076,7.314716,9.121459,3.912227,-0.042328,4.201663,-8.561797,-0.365490,1.971396,2.994923,-2.209150,3.948459,-4.033379,-7.631602,1.606926,-6.311055,1.244283,-0.563538,2.887283,-4.857613,9.312143,4.873311,-4.781799,8.266004,-4.254518,0.366982,9.774432,-8.402202,9.753207,3.799422,2.429698,3.548815,1.608205,-1.354065,5.374883,-7.286701,-5.642271,-0.082728,-2.673936,-3.892574,1.123748,2.126978,-2.632076,-1.047078,-4.592578,1.550750,1.884833,7.876125,-9.868520,4.074576,-8.202638,-4.686288,-1.266079,3.979763,-3.069552,8.649512,-7.943895,-3.691563,2.939972,-5.731010,-5.498827,7.361861,-9.441541,-9.282423,-2.400578,-1.819682,-1.927833,8.830148,-6.151381,4.029416,-3.264294,-1.748771,6.387256,-2.885554,3.318494,0.110640,-5.853353,-7.002939,8.164004,8.347267,-7.047559,-7.317199,-5.718337,4.731704,2.416259,4.725723,-3.591166,-0.555645,-2.228220,-9.613219,7.483675,-6.174823,-8.581275,-4.264062,8.577131,-3.141181,9.387661,-5.659424,-3.706783,-0.559995,-3.758553,-5.919755,0.048718,9.729051,7.701799,-2.887673,8.623432,-6.069157],[2.039267,6.450226,-6.190951,-1.274874,-8.010516,0.807506,8.128144,-5.622173,2.261180,-9.454693,3.558949,-4.465816,3.467753,5.466779,2.219700,-2.985720,-4.677920,-4.886683,2.616282,7.107662,3.839013,6.467685,-5.195565,4.282671,-6.655896,3.702247,2.471056,-6.550034,-5.787784,7.390351,8.047714,-4.219272,1.907349,-6.165943,8.119975,-6.999551,-8.399774,6.550408,-0.892820,-6.635710,-3.204556,-9.710541,6.122450,-8.260356,7.924183,-7.663727,-7.598053,-3.813253,4.288044,-0.786806,-0.420801,8.763414,-0.507299,-2.271245,9.427675,4.280126,-0.259686,1.620576,-8.623094,3.845138,4.611243,-6.854725,-3.067965,0.508881,4.122719,-0.944736,6.693730,-3.952830,8.591193,-4.752309,0.121303,-2.536714,2.293818,-9.553924,-9.188332,8.133054,7.242910,6.830855,4.360877,1.294987,-8.060148,-8.288999,9.264092,-0.767672,4.024305,-3.749491,-4.115666,-9.810778,-1.625826,-8.066548,-0.270495,8.278329,7.048333,0.312671,1.294655,-6.401092,3.541691,7.176914,7.927572,4.061011,-1.787141,-7.378872,-4.945977,6.221475,4.399037,1.406140,9.684479,7.491417,5.841576,2.330296,7.008528,1.711582,8.057742,3.232857,-9.511202,9.136640,-5.732762,9.372064,0.026832,-9.251765,-0.768890,-5.387767,-1.794293,5.710032,4.756886,-9.469000,-6.855775,3.741199,9.107455,-1.696357,1.776102,-4.699944,0.096993,-2.313545,-8.511324,5.887256,0.748515,3.743647,8.446825,6.285610,6.948897,6.793611,8.025392,5.370591,-3.093705,-9.173730,-5.971401,5.938682,9.214066,-2.688674,-3.454687,-0.360817,3.764559,1.738097,-9.785629,2.783155,4.920209,2.917833,9.095674,8.702090,7.798441,6.021685,-0.140370,2.598612,6.843890,-6.716935,-0.433437,8.741202,-9.072533,-7.036628,5.446859,-4.411252,4.971648,-6.652515,1.803516,-5.185395,6.506790,-3.634193,-8.191247,1.854225,9.236186,-7.826033,6.385176,8.186595,-0.352564,-6.290852,-1.331269,-0.489455,6.681084,-8.572445,-1.225729,5.982091,2.923403,-8.467345,0.787048,5.071252,2.970094,-2.447487,6.819047,-8.629239,-3.287877,7.405191,6.828207,-0.132644,-9.180889,9.942213,7.559746,7.325768,-6.536698,-4.775244,1.562652,-3.551064,5.220690,4.915441,0.207820,1.836973,9.648253,-6.645987,-5.648675,1.108074,3.906244,-2.369476,5.575518,4.727821,6.017445,2.116630,8.217054,7.649236,4.636289,6.415850,-0.623519,-1.625285,-5.587423,-5.465482,4.496033,5.686567,4.276244,8.124489,6.562498,-0.327233,-1.475188,-5.015578,-7.876096,0.526276,-8.754652,-3.723232,6.818102,-8.278520,9.274008,-1.184371,-2.433338,7.732047,6.067262,-8.244840,-3.777995,8.394638,1.818451,-2.588445,7.930008,2.609064,9.922000,-3.138315,-7.870690,-9.245919,-3.087539,-6.886504,-9.394414,-9.260508,-9.601170,4.224831,6.787396,4.470801,-8.554841,-3.476745,3.321188,7.933111,4.562927,0.515324,3.258764,2.184424,3.548372,-8.790419,-7.723221,4.992083,-8.793797,3.811913,-9.702251,-2.287007,-8.710817,-1.587019,-7.767432,-8.106530,-4.095112,3.832017,1.390389,5.716795,-5.301237,3.108990,-8.034258,4.708311,4.150871,-9.152247,8.849119,-8.399841,-7.021072,-4.325309,-4.480200,-6.493871,-9.848830,-0.181073,1.890246,-9.924173,-7.721133,-7.878024,3.391303,5.024974,-8.015441,-5.914501,-2.076140,6.535066,2.446828,0.781645,6.356975,-1.219057,8.701967,3.251146,-2.258212,-5.863606,6.579449,3.711940,-0.607948,0.097287,0.346379,-6.413139,-8.878426,-9.709176,4.146937,-5.595980],[6.263219,9.389067,7.770951,8.653321,-6.208824,-6.178340,-2.939265,-8.991797,-0.023578,4.445646,0.471142,5.155660,-4.642240,-2.553362,9.897922,-1.175671,1.807920,3.506537,-6.439393,0.551297,-1.976637,7.546509,4.674199,6.588029,8.054632,2.012316,9.069645,2.982402,-2.245393,3.837424,-4.361591,9.181382,0.506961,-4.855330,8.956593,0.932178,-5.320376,2.734108,-7.662247,0.656882,9.732768,8.689368,-2.151180,-0.274194,-9.746064,-6.640838,5.641560,-2.859779,0.598802,3.155727,-9.848986,-8.070988,0.543437,4.156791,3.330957,1.492058,7.260608,7.821733,9.567187,8.865877,6.103315,-4.685547,0.772328,-7.511531,-5.244425,2.689956,-0.714976,2.036387,0.011328,1.242017,6.516663,-5.093240,5.258207,-3.844014,3.840163,-9.470798,-5.886215,-2.566750,-9.496425,-2.649030,-8.017505,2.928546,5.898355,-9.770639,8.899926,0.984589,-4.513604,-4.426658,0.658195,8.015163,-1.673701,-8.665743,-9.335570,-0.382028,6.933274,0.298209,-2.698365,-8.161198,7.541263,2.088886,-3.480132,-1.857747,-0.225546,9.766974,5.353259,-8.640132,-6.475026,-8.990019,5.506081,9.846301,0.889538,-5.494287,-0.548835,-8.779049,7.121401,-4.682175,-5.715869,5.974549,2.847612,0.215478,0.052292,-8.525932,-0.221852,-0.570213,5.711916,-7.310378,7.326355,4.838767,4.407111,8.445927,9.214801,-6.848795,-8.895799,-3.198799,-8.704889,8.882521,1.064178,-3.609627,-9.054246,-8.409352,-8.527783,0.372722,5.957128,7.875077,-0.046303,-4.077843,7.417237,8.105561,-7.351407,5.205487,0.842935,-1.264391,7.651358,-1.316906,1.412535,2.135053,8.187501,0.616434,2.662934,9.933212,-8.386805,6.567329,6.861004,8.723745,-5.126087,-5.130059,6.380868,8.662186,6.475555,8.466799,-7.427914,6.483518,0.903290,-6.620475,8.958058,-2.457126,7.954193,1.002443,-4.609338,-4.744561,-2.820269,0.705062,9.538716,-0.943964,-2.272013,-8.962932,-5.305197,6.849071,-0.757059,3.556222,6.532508,7.393946,8.169746,6.156537,-1.769269,7.431362,8.248728,-8.489067,8.949120,7.069186,-0.211828,-6.173846,0.885313,-6.360907,9.381108,-5.262511,8.157487,-7.519601,-2.298222,1.687760,3.707691,7.815760,1.342091,-4.768905,-9.696861,-7.579548,4.529079,-3.088068,-5.528620,-0.253288,-5.084071,6.211182,2.922592,-0.050279,8.867116,-9.774535,-9.113638,9.793580,6.582368,-2.719145,-1.577550,2.947450,9.878446,-6.572645,-3.241329,-7.791019,2.786141,9.814149,7.151362,8.038527,4.568806,0.037341,9.175596,3.915352,-8.729065,8.155621,-2.290358,-5.384820,-4.279951,-4.459351,-7.395542,1.127615,-7.436149,-7.631526,-2.750000,-6.395914,0.643665,-4.801629,6.094889,3.758182,6.818009,-5.179965,6.964514,-8.223845,6.268998,7.127640,9.121686,-6.599979,4.895111,3.594822,-9.862783,0.789470,7.297604,-7.631307,1.321595,0.876246,-8.615880,-2.361536,-7.759740,5.988829,1.257496,0.714737,9.642717,-6.577806,-5.750322,6.714276,-1.246336,-4.236774,-9.940638,-6.695354,6.144602,-8.809766,8.630980,5.904389,1.618684,2.471944,7.312928,4.016637,-5.806928,5.857440,7.568822,7.277095,5.644615,-9.525938,7.988859,2.240583,-2.443626,-1.128226,1.326976,7.046537,0.650464,0.624713,-0.090135,9.152915,5.448221,6.948538,1.967139,-1.950553,1.253926,-4.122073,3.353182,2.985046,-8.512635,9.577514,8.837244,-1.040840,0.362925,-8.145327,9.269020,4.214475,-4.819094,9.774780,3.260251,9.993565,-6.966500,1.856030,8.093217,3.312484],[7.602215,7.760654,-1.895358,1.940036,-5.701503,8.223508,3.725314,-9.800247,6.388208,-7.016275,4.080240,8.058440,6.950615,6.674383,3.447599,-0.791797,1.978788,-3.659069,-7.257673,3.845845,5.363747,-7.334244,7.016245,-7.111357,-7.134197,-5.355886,-1.125396,-2.299182,-9.126689,5.027839,-2.308424,-7.596887,1.831965,2.189156,-4.417647,-2.572429,0.678431,6.441770,1.744024,-7.403131,-1.671553,6.748769,-6.156101,-7.733788,5.378511,4.856744,-1.507740,8.375433,-2.553658,3.193459,-4.768132,-9.480769,-2.759038,-5.547421,9.413811,7.652669,2.374983,0.157846,-4.999731,4.469724,2.319311,-9.037439,-6.693774,1.311148,-0.832906,-3.823948,1.212065,4.298571,-3.273375,7.249251,-0.185749,0.511454,-6.630172,1.408389,-5.380022,-6.716030,9.288208,7.338838,0.618221,-1.991344,8.022760,-9.401992,1.103230,-0.643877,6.709613,-5.646529,3.781422,-6.027673,-2.424264,-2.640575,-1.940357,-8.423080,5.703924,2.483785,-3.734896,7.192711,-2.890832,-8.566013,4.687762,6.886034,5.758865,-6.954308,5.400510,-6.145594,-1.703288,5.387458,6.713727,0.647217,1.224634,6.314517,-2.438162,-5.751544,-2.421793,8.391961,0.636964,0.687502,-0.572476,6.611003,-2.574530,7.773549,2.799457,5.118957,-3.335432,5.799247,0.241854,1.953197,0.891313,0.923646,6.243248,9.378240,2.051970,0.220186,-8.882060,-7.100057,-0.319875,-5.541876,-7.533429,-7.322845,-8.549899,-4.531326,7.957666,3.267187,4.037634,-1.550863,9.136315,-9.252918,-4.057562,-1.933906,-8.415925,2.526554,-4.666819,-2.929878,9.339378,5.308537,0.617968,-8.142822,-1.244269,3.078585,-5.930494,-7.561542,-7.218389,-7.276988,-4.465783,5.712667,1.393008,0.096693,-3.242963,-3.780679,-5.613679,4.879395,-9.324870,-9.827362,-8.157586,-3.447226,-7.522272,-7.763982,9.009070,6.149395,-9.980976,0.142637,-6.783497,3.664986,-6.375637,-9.474081,-5.545178,-2.361839,5.932784,8.897847,8.303730,-3.503124,-1.022153,-6.344260,-5.718491,6.334943,-5.275604,-2.878913,2.746256,-6.917361,-7.519109,-8.090433,-2.047256,6.177221,-9.562225,3.143724,-4.883036,1.056577,2.714853,1.560123,9.690277,-1.024803,1.824696,-8.156267,-0.846074,-8.642717,-1.610817,7.114431,-2.818419,-8.210821,4.110202,-3.061588,-0.224035,-1.157740,0.195700,7.742534,-5.440247,-5.587702,-1.208231,-8.416921,2.718128,0.236085,-9.378034,8.559146,7.426570,5.099188,8.037585,5.279374,6.109667,6.125693,0.795654,2.333456,-0.940879,8.045553,8.383025,-2.264487,-6.149331,-5.069310,-7.655665,0.539239,7.787858,7.892973,-3.750179,-7.950956,-3.958774,-8.630440,-7.968977,-5.361658,-8.961344,-2.697115,7.775543,-7.860446,-1.798252,-1.469966,-3.801120,7.387326,-5.663824,3.050453,0.249686,-3.690140,2.145549,3.949167,6.409854,6.737611,1.718724,0.609523,-9.963475,-2.705154,-3.204915,3.029047,7.775966,-3.927950,8.507650,-9.036785,-9.620193,1.251372,-0.118735,9.586809,-6.822367,1.779759,-5.220538,-3.274805,-4.770363,-0.020947,-1.540616,-0.993849,-9.049110,5.027149,-8.409714,-2.386629,2.990258,-2.352930,-1.725994,1.525333,-5.073876,-1.186244,2.402741,4.709016,6.533336,-9.232965,-3.329215,7.237198,3.958480,-5.604465,4.323882,-8.305731,-9.110315,-4.537630,0.968695,2.555516,-1.012525,-5.915443,4.035121,4.889275,5.059937,-9.148821,-4.329925,-0.752411,-7.889033,5.715026,4.258910,-5.996049,9.517853,-1.377033,-0.312727,-2.018794,6.799532,-1.497764,8.279073,-4.957444],[1.807305,-9.373906,-2.300064,-7.411924,5.711513,-3.500403,7.827946,9.523110,2.106093,0.483699,0.438679,-5.953733,8.993393,7.162679,4.757524,0.453507,-3.017780,-5.215924,8.474929,-6.070687,0.083518,9.371644,0.453611,5.559274,7.846137,4.099228,-3.297931,1.601771,-4.271700,-8.038917,-8.275403,7.369552,9.554043,-3.924378,-1.305735,-3.455248,0.843560,-6.467090,-2.762040,-7.648626,7.601998,-4.967182,5.855537,2.935786,5.628591,5.097248,0.178672,-7.132229,0.781107,6.802335,8.544116,6.134910,-7.212822,-3.191279,8.434677,-9.818881,-2.547073,-8.018058,-7.373802,4.180740,-1.510537,-0.561685,8.263147,-8.450882,6.711978,-6.576987,5.339642,4.793499,-7.920763,-1.786654,-5.268848,-1.999159,-0.075673,8.341241,-8.690620,-5.261271,6.349388,-4.800670,3.851113,4.131100,3.746206,-7.247219,8.676704,-8.586527,6.549467,5.491973,2.216937,-2.724937,9.568641,-4.112362,-1.437792,-0.959748,0.591920,9.435904,9.191914,0.163498,-3.763912,-7.410784,-9.240377,4.384678,4.887681,8.775857,-5.381263,-2.569877,4.546043,8.387741,0.475518,-9.308381,6.694637,-2.551472,-5.460049,6.990346,7.485253,7.609601,-6.349237,1.785856,8.294143,-0.950683,-1.455201,2.688658,6.129214,3.791625,-9.004372,-3.974714,7.609768,7.735007,-6.640258,9.243896,-4.520668,0.939346,4.179823,-6.486677,-4.184641,9.773948,-2.601974,-1.148283,2.904781,-4.448160,9.593406,7.119064,6.004936,8.299568,2.098384,1.998968,1.434143,-0.257337,8.146409,2.988263,7.531572,-9.273452,-1.750371,-1.448590,6.447904,6.459991,1.399986,0.258239,7.221997,-9.676532,3.994618,-9.791691,7.686823,-7.221726,-3.688157,-9.226832,-8.889231,2.407517,8.978951,-4.794525,-7.183032,-2.442047,5.283430,3.899168,-3.501055,3.407016,4.355903,-5.854305,1.236273,-9.089985,-1.173028,1.614533,5.657145,2.786882,-2.153768,7.595779,-8.200167,-3.208102,-4.086600,-0.762941,-6.085979,-9.872862,-9.888893,-9.450935,5.614484,4.548421,1.060072,-8.197457,2.743400,5.071297,-7.394207,-7.599557,-1.327299,-8.899715,-0.332555,5.186881,-2.750952,4.646031,-8.285125,-8.262119,-2.244489,-4.826477,8.842066,-4.000313,-3.147305,-5.313263,2.379342,2.173959,-9.407960,-9.817828,9.467449,8.090275,5.516696,-7.207260,-4.607585,-5.871523,-4.884324,-8.579829,4.174121,-5.133259,-2.304914,-8.996842,9.189347,-7.631444,4.006024,1.304562,-6.112813,1.198649,2.854585,-1.554367,-3.245398,-7.797266,8.358358,-9.239768,6.448922,-1.629374,-4.247421,9.695178,2.754060,0.318026,-9.309237,8.981667,1.415055,4.553079,-0.132244,-9.969882,-2.948127,9.123671,1.291861,-5.460996,-9.606043,-0.105297,-5.319490,-8.576813,4.896332,-8.832599,-7.609218,0.144352,-8.555018,-5.611032,-5.778796,-1.726107,0.683507,-3.510852,1.820247,-5.426831,7.797729,-4.825079,-4.575609,5.838248,-5.897886,-8.500971,1.301616,-0.164181,-8.919915,-6.820481,8.233862,0.182986,-9.539586,3.053025,-9.827371,5.417722,6.223877,9.811382,7.730044,6.282847,8.165462,-9.721949,5.037109,-5.977995,-6.464849,-3.645264,1.445755,-6.007512,5.968508,-3.205663,0.451795,-9.908231,5.413242,6.460942,-7.413413,6.047451,-7.576623,3.732380,-9.008098,9.120607,-9.725978,1.729444,7.106434,-1.742607,2.788671,-4.240029,-7.157394,1.890594,0.492371,-8.718935,-2.119487,6.984977,-5.665025,-4.576243,-4.184426,7.301182,-6.490523,5.481865,-3.231068,-7.405406,-9.543156,2.264763,0.308574,-6.270640],[3.816472,6.046509,-6.012288,-1.460731,1.341909,-8.535158,-2.839149,-4.788764,-5.681422,-7.805207,8.403757,-1.520162,1.324072,3.100370,6.526849,6.707633,-5.178870,-9.537499,8.031720,3.773219,8.984912,2.465332,8.272153,-8.981229,9.490199,1.378134,-8.524628,-4.140819,8.207334,-2.786933,4.014648,3.820090,-8.109065,5.132227,-4.275673,-0.963821,-6.486083,2.159936,-2.053916,8.667182,-7.248689,-1.959781,-7.430770,-7.739875,-8.726325,-0.821311,3.834950,-8.516473,3.436971,7.093221,-6.579307,-6.550746,2.201667,1.902956,6.243680,7.448148,2.782144,-6.546641,-3.600622,0.199996,-3.189034,0.961197,4.293479,6.156666,0.002854,-3.406552,6.708881,-3.072728,-6.837532,-9.728909,-9.837957,4.216308,2.591862,8.398208,-1.241286,5.863745,8.102916,-8.646428,-5.113781,1.342539,7.476497,9.908754,-9.496625,0.922238,2.045370,7.859534,-3.608330,2.968119,-2.656364,2.058907,1.591048,6.504373,2.003022,9.072845,-3.378073,3.225294,-4.278227,-0.123752,-2.678311,3.117058,0.866166,2.835745,9.967333,4.973087,-8.580761,9.639633,0.942769,-6.519062,-0.285089,-7.700864,-2.593383,-4.142508,3.772201,-1.860054,3.207727,6.120229,-5.113975,-9.265889,-5.607665,1.963756,-7.544320,-5.115418,-9.104928,5.739744,6.687232,7.789151,0.028826,-5.637124,-7.969227,1.900876,9.092424,-9.596338,6.157600,6.317854,-7.319312,-2.155987,8.660649,6.707205,8.981218,0.944631,-6.145428,4.688670,-0.879203,-2.937654,-8.925258,-5.495977,3.827978,1.539643,4.837758,-3.170807,1.399142,2.975353,1.739284,-2.225730,2.878283,6.903480,-3.815575,1.259774,4.911261,1.351718,3.089360,5.076961,-0.881613,-6.755312,9.899608,-4.173711,0.276326,-2.404735,-6.372789,-4.490504,-8.633590,4.605092,-1.473428,2.652770,7.055823,9.684597,7.931688,3.748127,7.434594,6.197650,-9.949952,1.803349,7.686146,-0.473923,5.751530,3.171700,1.457038,-4.891891,-0.374780,0.084969,2.705325,-7.461930,2.164020,-4.841406,2.672212,3.413379,3.626962,-4.865294,-7.315446,-9.784364,7.769173,2.603441,3.397037,-6.820260,-0.640745,1.190685,-5.279208,-9.280167,4.298653,-6.714426,-3.523107,-2.174087,-7.704642,3.259634,4.956739,-0.506887,4.716542,0.348534,-1.006866,-5.049058,9.299142,-4.842885,-5.996337,9.370747,0.411328,-4.909396,-4.960223,-8.851849,9.461753,7.254733,9.712723,4.973538,-8.435419,3.945858,-7.629537,8.478606,9.317437,2.843329,-4.584213,3.962732,-0.120570,4.014569,-2.189461,-1.104662,9.547350,1.917290,3.044237,-7.088784,6.801979,-5.966026,9.124346,-6.598900,6.959430,-2.851593,-2.381801,-1.034365,-3.399990,2.352742,5.434104,-3.333838,-6.665054,7.499776,0.375936,6.156123,-6.156169,-2.368003,4.246761,-9.161149,3.341571,-2.829365,5.073761,-2.745653,-1.463178,-4.669659,5.930492,4.003884,-9.567702,-9.147184,-1.775212,3.908254,5.353134,-4.813396,-1.567793,-9.622950,-9.891712,6.898242,9.094960,8.176698,-4.366915,2.100312,-7.722290,5.453029,2.276717,-8.536250,2.650813,-1.686000,-2.474157,8.191637,-7.973533,-3.191254,-5.155726,-1.422854,1.975781,0.118927,1.622497,-1.976825,6.519389,0.587843,2.524066,-2.277175,6.540058,3.315344,-7.017496,-9.791970,-9.691084,0.165078,-3.397995,-2.740797,8.892143,4.265550,-1.938912,-6.464180,1.553631,2.831632,-8.747126,4.727275,-6.648732,3.423473,3.140139,6.734923,-2.341303,-4.261646,-3.510230,-1.983805,8.396144,9.363378,9.371013,3.780396],[6.719505,7.953001,4.478638,1.046844,-8.577668,-3.031224,-3.591853,4.603643,-6.275318,8.044358,5.553996,-9.096837,-2.510433,-3.340145,5.412726,-2.131400,-4.519313,-6.823424,5.832183,-9.995237,-5.086315,8.162588,-2.882616,3.446704,0.883877,-7.121546,2.961146,3.552430,-2.983221,2.231757,4.723743,-0.175566,-3.542032,9.543794,-4.214772,9.564143,-5.782139,9.298605,0.953531,0.621061,4.728620,0.886302,-8.384427,-1.126896,6.413823,6.869776,-2.274184,-2.136766,-8.514836,-9.108699,1.496307,-1.139708,-1.284753,5.215367,-3.424906,-1.098200,-4.431068,-5.435331,-0.940855,8.050346,2.508909,9.625657,-7.583792,-2.364879,3.583829,6.122100,-8.633128,9.338668,3.331237,-9.640516,1.238739,8.200800,5.094934,4.653537,9.861308,9.093770,8.713455,-7.736080,-0.191252,-6.149770,3.383474,4.910970,8.141256,-7.491647,1.971086,1.414404,-3.454678,-5.909265,-2.232244,2.164297,-6.259994,-5.660093,0.502711,7.505789,5.551518,-4.446545,2.644091,-9.739090,-0.150889,2.008143,-3.980024,-3.769697,4.580508,-9.665438,-3.750640,8.596645,-7.239401,-1.420004,-9.964607,6.908530,-6.140194,-5.828925,4.865123,-2.244286,-8.754120,6.472656,-0.634282,5.074663,-7.967752,-7.357523,9.620355,4.781893,8.641342,-7.575597,0.435609,-3.875393,6.761866,2.537397,4.667017,-1.386612,8.179471,-9.585396,2.300411,-7.812984,3.457482,2.034092,-0.897185,-7.075402,-6.268172,-6.163181,4.448016,0.032714,3.628368,7.301622,9.444901,-5.263172,-5.711559,-9.652478,-6.485343,7.298585,4.224264,7.516036,-4.959672,-8.884984,-2.677025,-2.506625,8.138911,-3.285165,4.174454,6.255405,8.214250,9.066601,5.287797,7.010170,-4.215542,9.900311,8.465248,-8.297164,2.675554,9.540654,2.690724,8.159791,2.467297,5.738405,8.738762,6.759724,9.424251,-4.553357,5.658562,-0.159835,5.823072,1.745477,-5.941326,-0.885085,-6.695919,0.464290,3.514857,-1.743840,-0.807785,2.359164,6.836982,-2.813540,-8.652068,0.958149,2.418115,7.484553,8.754424,2.997186,-6.892685,5.393172,0.674558,-0.535172,1.302120,-9.769960,0.092783,-6.856263,-5.495497,1.024884,3.104502,-6.595700,-5.852384,8.518944,9.871313,-6.255759,-5.868068,-9.031619,-4.634546,8.990443,-0.135261,-2.669779,1.713634,-3.691638,1.204858,-1.309060,-1.482723,3.046728,6.097101,-6.414082,-7.073672,-7.162724,0.376668,-3.728539,-3.605773,7.617294,8.665061,-9.661209,-0.117234,3.919439,-8.010688,4.814133,-5.011529,9.632777,1.566282,-4.200980,-2.517553,0.939845,-9.113087,-6.297894,0.244978,2.225180,2.700394,7.648421,-7.953667,9.845373,8.593505,0.677667,-4.887862,5.343586,-0.021461,4.476675,-3.574189,-5.623349,-9.565960,9.625341,8.935663,5.937567,-7.501810,-1.615617,4.062544,8.968185,-1.427572,-1.677215,-8.979001,3.740498,-6.315266,8.251053,6.021992,7.490200,-3.260410,5.128399,7.766637,-7.462266,6.933487,-5.806555,8.045451,8.587146,-4.295349,-6.805223,3.629246,7.853313,-2.891267,0.791572,6.850999,9.857923,1.203289,9.356534,9.966724,7.719376,-5.886572,7.328509,3.272427,-6.972116,8.273594,-9.382604,-3.848835,-9.856291,4.822790,-4.950770,-0.626281,-2.515615,-4.597886,-4.290275,-0.950703,-3.655338,1.807081,-2.450787,4.678271,-8.598792,3.546397,9.204037,-4.421714,-7.869732,4.610518,-4.411226,-3.121179,-2.678045,-0.591817,8.142533,-1.427799,-6.830484,0.236408,-9.054500,7.925866,1.171237,-0.054454,-1.005356,-2.172415,-3.696342],[9.098431,8.127859,6.948137,-1.669549,-7.667761,-9.443250,5.843616,-9.070862,0.176388,0.869325,5.447217,7.053561,-4.928578,4.134574,-9.391183,-6.463073,-4.809086,-5.660062,0.595957,-1.993054,-1.818684,-0.680785,2.172857,-8.570619,-4.751925,9.911380,0.792988,1.384062,-9.918951,-7.313593,-5.623585,-8.229704,3.311807,-9.102601,6.521176,-3.176458,-6.986893,4.525434,-4.258055,-3.591548,-3.217542,-8.977658,7.285493,8.394890,-8.021262,-9.321989,-4.529417,-3.836888,4.235319,0.718517,9.784473,-1.508076,-7.467325,5.663967,-3.759834,6.126461,2.384665,-3.363314,2.380948,-8.628012,9.345712,-6.051605,8.777532,9.045530,-1.032441,3.942115,1.024006,2.851189,3.163225,-2.875604,-6.694710,-4.039257,3.857778,-3.783075,-6.422130,5.767977,-5.486686,-8.617038,-9.069581,-3.590425,-9.962310,-6.100305,-3.725749,0.042510,-9.352229,1.826848,-6.664969,-2.267974,-1.212013,-0.666786,8.557732,-2.791362,-0.467101,7.048802,7.093391,0.740968,7.256892,5.872773,5.012607,1.277401,-1.125823,-6.265619,4.883283,-7.866687,-6.717311,-4.327552,-5.840224,5.216394,1.323419,0.693214,-5.974977,-1.280340,-3.786449,8.544053,3.176631,7.002233,5.816299,-7.926259,-6.451187,-1.958042,7.908793,-2.520792,-4.643596,-2.915685,-1.325892,-1.036084,-7.979090,-2.071894,-4.447105,-5.033083,3.109824,6.759405,-7.093619,9.035046,-0.812810,9.867475,-4.477370,-1.452164,2.304818,9.698776,-1.643595,-4.428515,-5.880762,-9.079695,9.682725,-1.965720,-2.001645,2.379334,6.104257,-4.078304,2.996472,-6.598639,9.527944,-0.990118,5.530831,5.745294,5.312410,9.584704,-6.261676,-6.751042,-9.206159,-7.853578,-9.879744,6.461257,-1.297933,9.890071,7.073622,-8.025290,-5.236234,4.388979,-7.089677,-2.813007,1.461205,6.810898,6.598166,8.008559,4.067371,-7.682985,4.821439,4.350476,0.333709,5.126909,-7.881681,-6.303811,-8.039157,0.636087,-8.491723,-1.632814,4.012474,1.835864,8.372787,-6.112702,8.981213,-8.968415,2.027226,-4.515226,8.446126,6.098236,9.807772,-3.718339,-8.965727,-7.815854,7.914189,-8.803567,1.455086,8.107016,-9.968287,3.771899,5.329283,-3.364256,4.185207,7.911341,3.638486,0.426154,-7.074655,-4.314542,7.222095,1.840484,-0.885301,7.893871,-1.744551,-7.903205,-4.913646,-9.309557,-1.332585,-0.719354,6.094496,-9.017856,2.015647,-8.183136,2.730074,-8.336233,8.212573,-6.138183,0.323470,7.386344,-6.963623,-2.869371,3.441171,-7.146017,4.517869,-4.854631,0.271667,6.505653,-5.005054,-2.369748,0.176105,-3.355794,1.828056,-7.829517,-2.910119,-3.731479,6.353806,6.481725,8.174801,-5.850805,4.800711,7.101826,5.900571,9.791299,-4.082305,-7.965157,-1.546932,9.907775,9.105986,-0.100434,8.345628,-9.891641,3.835811,-9.736178,-1.922240,4.765502,4.309711,-4.005710,-0.718528,-6.882114,2.551283,-5.076461,9.324668,6.481257,3.090058,-3.462193,-4.402983,6.997280,-4.813234,-6.531221,3.921387,-4.277135,4.505978,6.615586,-1.526380,-9.184474,-2.813064,5.034718,-4.867206,-8.538405,-2.197032,1.700857,-1.304944,-0.812065,-8.433377,5.039797,2.242468,-6.010051,-7.975053,-2.291897,1.952552,-5.508390,6.297344,2.587679,7.976867,6.253981,-8.118017,-0.030226,5.793963,3.109762,-6.667207,1.879211,9.907581,-1.504540,-7.993339,-1.129070,6.587010,4.868789,6.934363,0.621693,3.989806,-0.798720,9.885203,-8.165001,-2.903054,-2.226060,-8.424243,-5.441694,2.995369,4.871340,6.537207,1.652889],[-4.527943,1.419128,7.828247,-4.961675,3.592943,-7.077291,-4.393810,5.034448,-7.443229,3.074268,-3.502038,-7.875274,-4.019545,0.707906,-7.402367,-5.202050,5.162747,-8.389475,-0.651779,1.831231,0.107523,-3.294409,-1.272574,-8.477199,4.411565,4.397593,3.045433,1.465323,3.153339,4.569992,6.283663,3.024880,2.458363,8.020018,-7.108043,1.246222,-5.182459,6.753127,-3.975182,-4.063531,9.890127,2.740440,2.356160,-4.772465,3.306212,-6.832656,-1.238855,4.247368,2.308342,2.319820,-9.463695,-6.110041,3.100693,2.004515,1.415860,7.338596,-1.801188,-4.688410,-9.975865,-4.510449,-9.356205,-2.022582,-3.935583,3.737067,3.871655,-3.303278,4.396373,-3.213183,-4.654957,-5.380485,4.612898,4.753848,-7.114346,-2.455948,-9.088887,-4.071042,8.098430,4.804814,1.827158,-7.213366,-9.061936,-3.333136,9.469950,-7.715513,-3.777416,2.278950,-3.979311,0.840694,-5.930250,8.921188,8.714714,-0.855017,9.401888,-3.062082,-8.168644,2.470842,8.533384,-5.283824,-4.316693,5.418454,-1.203045,1.628686,7.966162,8.427268,-3.185148,-0.078415,5.020777,-8.257919,6.216854,5.245072,9.964099,-9.176623,-1.597237,4.936909,4.832321,4.940456,-9.215196,-5.572185,-7.607147,2.912907,6.368168,-8.819633,-4.735241,4.552760,9.305129,0.669189,0.551506,-8.664113,5.134383,-1.613062,-8.416207,-2.009699,-5.260282,-9.525098,-1.494902,7.562485,8.532631,-6.255330,8.160241,3.781311,-8.294219,5.071801,-9.045913,6.301392,-4.493185,-1.942679,-9.839105,1.240575,-1.457803,9.369908,6.156459,-1.256509,-9.376500,2.499176,-4.017704,-6.468536,7.624107,-9.927302,2.765005,2.226318,6.146713,-6.861564,-6.526448,8.333829,6.394987,-1.659417,1.114689,-5.710526,5.263265,0.407242,-3.273429,6.672630,-5.298983,-2.944844,9.046894,3.879265,3.061739,-9.395247,3.130848,-1.758186,-9.255949,2.719181,3.603315,9.911937,2.979683,-2.591128,1.810636,-4.195814,7.550482,0.637053,-4.520577,-4.782980,9.134425,-2.717519,-1.759232,3.196818,2.191507,-4.523878,-0.249399,6.863791,5.427739,-1.477116,5.306734,-0.338959,9.278673,-9.051020,-2.398924,0.219220,0.136801,-4.664055,4.305943,6.791507,-9.856609,1.177281,2.578674,4.474258,2.028180,8.514568,-3.042801,2.635035,-0.474156,6.296355,-6.394934,-9.230759,-1.978746,1.458152,-4.526706,-2.102336,1.115783,-5.341637,7.620593,4.773310,4.989919,1.554981,-2.407316,2.929006,-0.508998,8.751895,7.066203,7.628060,-0.364286,3.500618,7.521573,1.534437,-6.202045,5.811909,5.655937,-5.986708,-4.765411,-3.821524,-3.731182,2.094052,4.533613,-9.144814,-4.709205,-3.693280,-9.098502,9.374927,-7.806946,-2.681191,-7.135410,-2.804567,-8.059583,-5.092762,-2.763625,7.898188,-1.553867,-3.096941,4.912749,2.964474,-7.633800,-0.923167,3.663226,-3.880651,0.676146,-0.388682,-0.152142,1.558159,1.406386,2.384771,2.853008,6.770824,4.117462,1.806213,-1.738704,-6.840491,-0.166537,3.173906,0.862844,0.350424,7.855221,-9.704820,-2.697077,-6.951080,-0.772250,-1.821827,0.750300,8.269526,8.868754,1.637389,2.089242,-5.599256,0.944819,-9.138200,5.470028,3.081333,1.184466,-6.772306,1.811656,-1.992399,3.785127,8.181287,-1.240074,9.221911,3.531307,1.258217,3.107475,7.362252,7.578227,3.893392,3.462311,6.593246,-6.710402,0.950173,1.115607,5.280177,-7.054194,6.242075,-9.215563,-1.048377,6.317207,-1.938584,9.782890,2.751544,0.344979,0.360662,9.915900,-2.747606],[-2.517190,-1.072004,3.195894,-3.544570,-7.730780,-8.546985,4.361415,7.638686,-9.427059,7.420951,8.688600,-9.953230,3.731744,0.356762,2.237884,-1.807555,4.715813,0.999961,7.597987,-4.537426,8.215911,-9.516262,5.326631,8.713247,6.576078,9.521724,-3.062318,-2.288825,0.783959,-4.942547,4.362148,3.852377,8.635456,4.270217,-2.395709,5.262583,-5.993383,-0.855452,5.965185,6.091172,-4.109315,4.258094,-5.779560,-3.600083,3.002157,-1.379396,-0.185488,-7.085710,-3.193701,-3.960671,5.312098,-6.272754,2.387963,-1.932321,2.607129,5.519758,-5.357135,-2.070269,-4.968076,3.789888,6.559770,-5.176400,3.524213,-2.306780,-2.299368,-3.784750,-1.580548,5.511547,-4.357398,-0.356288,0.568850,4.881891,-8.474783,9.294948,7.326326,-5.340298,-8.433257,-8.214401,4.409208,-9.380669,2.157979,-0.496152,8.412270,7.862006,5.954931,2.145710,2.075230,-0.619745,-8.141600,3.512586,-4.876179,7.629647,-2.856050,-4.462526,-2.233981,-1.067919,-1.953124,8.110441,-6.439114,1.400152,-8.990246,6.168091,8.035442,5.777650,5.979495,3.411994,-5.467755,-5.249321,-2.948989,8.303201,0.590021,-9.042704,-5.751078,-0.751103,-3.311018,-2.871377,-2.893189,1.387671,8.729727,-4.068747,5.925084,6.944679,-9.784495,-8.816700,-3.903798,7.362661,9.298395,3.162280,7.867697,3.586001,0.622708,-2.246728,6.499983,-2.529984,-1.474968,0.179826,-4.187785,9.722345,-3.546187,-3.515059,5.222293,3.913091,2.292992,-3.414699,-5.491887,5.050960,0.934999,4.588277,6.761772,-6.062994,-3.740840,4.982145,-2.086558,0.525709,-2.415725,6.061986,3.878426,9.316323,-0.727192,5.726812,9.242825,-4.029669,-4.298097,8.383533,6.958564,6.983912,0.444629,2.441850,-3.512783,-8.682188,-0.355753,-8.242907,-8.750736,-9.992439,-6.796799,8.704317,-5.189769,-7.186077,-0.403554,-8.579190,2.348368,9.524555,-5.926710,-2.444240,-9.251934,-8.729495,0.021568,-5.269139,-5.128298,-4.660262,7.378689,-2.692535,1.289065,-7.072735,-4.773800,-6.900281,3.369614,-7.877003,-0.056859,-1.759642,7.360489,2.820344,2.343951,8.280690,-9.504423,-2.386155,2.438431,-3.586823,-9.868884,-4.209787,9.717302,-2.756301,7.414024,1.697620,-5.663514,-6.070766,-1.680572,-7.919638,3.470592,3.548281,9.890531,1.201135,-2.910963,0.903756,2.884127,5.327105,-5.161459,8.920108,-3.213120,7.531524,-2.722912,-3.710896,6.568533,-2.537984,-5.595344,7.430642,-6.052951,4.133362,-3.166777,9.727049,-9.279585,-7.489186,-0.826060,-9.375801,-9.454543,6.069716,7.726057,3.164443,-6.093049,-8.904937,2.776661,-2.663585,-7.377267,-7.826219,6.912295,-7.278064,-9.850331,-3.929046,-0.601555,0.216818,9.556894,7.213189,3.773236,2.529498,8.561409,-8.828022,5.290217,-2.147919,-1.448795,-0.210752,-6.103016,-0.646304,-1.252674,5.229467,4.536454,2.644851,-0.495417,-4.580181,-7.340103,1.759602,8.273509,-4.412145,8.242028,-5.306489,-3.203089,5.505659,-7.978433,3.910677,-9.989958,3.346060,-1.670118,-5.458682,-5.987592,-9.204836,5.091554,-5.720065,5.693110,9.722571,8.906131,9.228266,2.039532,-3.019038,-7.024865,-7.121614,-5.954927,-9.752717,-9.836594,6.648098,5.133610,3.768668,-6.529535,5.405026,3.059274,-3.365561,8.353232,-7.844141,-7.015885,-4.967113,-1.263993,1.227564,-7.414060,4.497559,5.524949,6.348635,-5.538355,1.420960,-9.286452,9.319462,5.003302,-1.938704,4.046276,9.213603,1.700647,-2.496856,-7.075068,7.222555,3.109622,-7.958467],[5.310571,-8.953866,-9.657714,-6.481125,-2.733477,-8.953989,3.837677,-1.683584,5.174885,-8.664589,0.819593,3.149185,9.748892,4.019113,9.285671,7.557933,5.663734,1.495813,1.849246,6.546002,6.356322,6.792109,-6.560164,8.178288,-1.991150,8.777012,-3.490523,9.378603,0.171163,-2.795094,-6.239943,6.036642,3.236487,-4.382469,0.619884,3.376179,2.794497,1.304995,-2.923552,-0.072744,1.584923,5.792333,-7.478819,6.712310,1.924790,-7.277620,9.672652,7.494987,-5.067806,6.535067,4.864801,-6.806348,6.260472,2.962098,-1.199891,-3.004681,3.607369,7.965947,7.369788,2.729183,4.777100,-9.243968,5.666243,3.628909,7.798031,0.994571,3.373424,-9.536517,-8.018487,7.279763,9.706589,-9.004119,4.985138,-0.105523,-7.090857,2.025198,6.160894,-1.311392,0.740475,2.871491,-1.652673,-4.781944,-0.524703,-2.831028,-4.220546,-5.491700,-2.842638,-7.804678,-4.366746,-1.545789,-0.792045,-6.951912,2.640187,-7.073077,8.545709,-6.143718,3.395338,5.133722,4.562009,-5.251897,5.059250,5.287004,7.422502,4.392301,-6.886959,-5.234138,2.901725,-6.783586,9.318297,-1.548239,-9.107262,-1.985665,3.383196,-1.954400,9.327265,-0.025213,6.466797,-6.353892,2.042878,-2.115083,0.953434,-0.675570,-4.107743,-2.528334,0.628417,-5.694160,6.856670,8.270039,-0.191006,1.742592,-8.904379,3.355148,1.046363,-5.929135,7.085680,-3.045537,3.336550,-3.890692,6.800929,0.786276,9.788506,2.048563,-7.605936,5.942661,-4.651270,5.474084,-9.832939,-5.750017,-2.581002,-2.912692,0.524478,2.550505,8.606940,-1.857856,-2.618321,7.740840,7.978419,-3.063002,-2.773854,2.853286,-9.421250,3.349115,4.594023,-4.166854,4.608992,6.114657,3.085008,6.837606,-5.423200,5.161242,-3.179997,-9.256997,5.132362,0.112781,-3.655006,-9.960032,0.593799,2.827933,2.972199,7.454557,-7.949700,-5.603046,6.719793,-8.129626,0.324098,-7.651856,0.681236,-0.328272,2.049607,-1.724141,-0.574920,-4.160446,-2.973218,-1.742966,6.324529,-8.876533,-1.455419,6.464349,5.669184,-6.527227,1.878236,-9.878169,9.296630,-1.214629,-3.289563,2.658583,0.153410,9.037190,4.777015,-4.286912,6.350266,4.081194,4.941060,9.043596,-5.445875,4.057098,-4.739634,-6.623740,-2.282934,-4.123956,4.198912,0.356495,8.320752,0.358266,-5.995765,9.142466,-6.726384,-3.947623,7.055665,-4.418982,9.907837,5.948890,0.054790,6.589231,-1.569546,8.748549,1.453225,8.077651,4.017498,-6.507300,-1.422090,0.707538,-2.336119,-7.861220,8.535587,4.924846,-5.635890,-6.046935,4.356337,-3.698258,7.317992,6.661128,-8.075164,0.888157,1.852941,-1.154893,5.951493,4.868869,9.938495,9.990950,-2.812683,5.700418,3.459356,1.895219,5.826677,3.200433,6.367347,-6.934417,6.604709,8.900318,6.253576,-1.682893,4.668845,-5.129961,5.151305,4.006821,-6.713423,-9.047790,-9.077458,-2.061027,3.680928,-3.896047,3.342402,5.530861,-3.249471,6.644051,-7.748395,-6.039691,0.075885,-9.261410,-8.955190,7.983183,-3.327282,-2.068041,8.747281,-5.685225,-6.902340,2.729690,2.037213,-0.049455,3.939293,6.810029,1.757027,7.572638,-7.656164,0.878348,2.951469,-5.162591,7.418879,-2.051654,6.993332,4.392107,3.939919,4.115917,6.378170,-6.744904,-0.318915,-1.886732,5.003770,-6.465518,7.845920,-6.441441,-5.648670,-0.020133,1.397299,-8.393708,-6.880324,2.024183,-1.653115,-5.997565,-3.798027,-8.332707,6.888276,1.983003,-1.400042,-5.232061,3.434666,-6.178541],[2.333301,4.371880,0.662871,-9.720889,-2.967216,4.979221,-2.115436,-4.278203,-1.834228,3.834606,-1.974390,-4.973147,1.079989,-4.061303,2.512840,-6.819241,-8.793915,-2.588303,-4.309484,0.928201,-3.637268,2.649748,-1.779610,4.617394,6.097484,-7.119596,8.451378,-8.922556,-3.685530,-1.913121,-8.744979,-7.923161,-9.695582,-7.217646,3.981485,1.329729,9.765064,9.218855,0.605657,-3.630796,2.578756,-8.444998,-4.183359,1.232198,7.538205,-0.396252,9.514569,-8.957829,8.533104,-9.992319,-6.113414,-4.577589,-4.072448,-6.068362,1.463331,-4.113594,5.314235,0.579558,-8.382665,-2.977123,-5.645778,6.947950,-4.104578,-0.359154,-1.772154,-0.011257,-4.541811,-0.736498,-6.310331,-9.308304,-7.646703,3.208336,7.822989,3.144720,5.484681,-9.129571,-4.362575,3.970300,3.988822,7.570912,-0.939949,1.720134,-9.734007,-5.937118,-3.598272,-4.288591,0.709090,-1.484270,0.570387,-1.585287,-9.472778,-1.011728,-3.091037,8.426454,7.012121,-2.999029,-0.072813,0.397495,3.158913,-0.497907,-2.051517,-3.406952,-3.465283,0.077965,-4.781798,-0.595220,-4.408641,-7.348134,2.569900,-7.697106,-9.776630,-0.716669,-2.829934,2.235050,0.568955,6.314794,9.265394,-1.012597,1.178183,7.426310,7.040666,-0.781533,-8.078423,9.685625,-7.254473,9.147206,-2.881020,0.992837,9.972444,-6.790131,-1.663343,-6.761424,-4.025912,6.244563,-4.290777,7.886587,3.628798,5.744588,-5.828840,4.780350,2.974756,7.985355,-5.350120,-0.767859,-6.002061,8.663083,4.918298,-0.058052,-0.247172,5.324422,-8.771392,-8.639581,-3.910476,0.505267,-5.405663,1.866893,1.375861,0.935552,3.312538,5.320573,5.829840,4.299894,9.930169,-9.347188,9.610110,-2.374856,-3.766456,2.016472,1.730948,-0.313184,6.731780,7.545125,-8.143243,3.960910,-2.431479,9.353575,7.429285,-3.236744,-3.744114,-8.495837,-3.500547,1.916146,5.096596,8.187454,-0.053413,8.406578,8.410024,-8.703337,7.783122,-2.649846,0.884736,1.232008,-0.644282,9.836977,-3.833164,-0.857118,-8.968351,-3.836828,6.810066,-6.786022,4.976000,7.327983,-7.736096,-2.179734,2.067642,-3.037329,9.205978,7.747531,8.750975,-0.488329,-3.768438,4.232368,0.182067,0.589392,8.547748,-1.927361,8.356606,-7.220768,8.169467,2.687301,1.730514,1.427051,-9.323153,-3.809224,5.768629,1.455260,9.633078,8.987284,-1.657362,7.349919,-4.295035,-4.796898,-8.895760,-8.981503,-5.542576,-3.949200,4.342174,-3.365924,1.490351,1.462816,6.878116,-8.970250,4.104807,8.346132,-0.181569,-0.900074,-7.644480,-9.858837,8.327556,1.402997,2.067416,6.373508,4.625901,-4.754053,-9.812716,-6.877780,-1.236862,-3.694780,-2.023495,-2.944202,4.247669,5.496430,4.489953,-3.963928,-2.835345,-0.840484,4.843060,-8.627016,9.136573,0.547515,5.351483,-8.362319,9.919150,8.422634,-9.749480,-0.063637,-3.803465,-3.264802,-2.628678,-1.786925,-2.846259,-1.349675,-5.103157,-0.637492,4.910186,1.991568,2.236054,-6.313444,3.616994,-5.408709,0.523779,1.117646,3.285520,-7.641692,-2.913023,-9.876003,3.084067,-6.441138,-3.914690,-0.508398,8.843310,-4.391336,2.569129,3.011988,-2.597212,-3.374033,-0.486562,-7.016957,0.077751,9.914567,0.415525,-9.175444,-4.961979,2.636116,-4.557029,-1.459928,4.976198,-0.488619,-8.701164,8.937376,-4.006142,-0.847384,9.158686,-6.530828,9.999889,-0.928043,2.138396,-1.111486,-4.948030,-0.370708,7.518007,-2.697010,4.741321,0.518246,-5.969619,8.028160,-3.924780,1.182983],[-2.017475,9.093668,-8.044762,-8.238575,-0.127580,7.789215,-6.006797,1.623070,9.524595,1.329114,8.721306,-6.041744,8.334511,-4.975510,1.710608,-0.721629,3.494799,-1.279577,9.540425,4.245205,0.163706,-9.385478,3.825555,4.075665,4.267976,8.887180,5.472028,-6.678884,4.629088,-4.490808,9.738944,-4.735747,-7.343167,-3.604261,-1.727808,-2.093290,-9.922239,9.919953,-1.816474,-8.101888,0.072562,-2.398525,0.453719,-9.083846,4.913814,-0.054549,3.172453,4.863966,3.530444,7.581039,-2.833412,8.242470,4.418470,-7.668894,2.589860,6.900672,-5.883380,5.108160,4.417048,1.715965,-9.569629,0.175360,-5.260477,-3.551696,-7.640427,0.919929,8.319505,6.326527,-7.325152,-6.214010,3.550871,-1.134696,-1.502015,8.707588,9.727952,-4.007880,-0.676123,2.228430,1.199885,-9.565977,-4.007470,-6.622625,-7.450382,-4.133220,4.554552,-2.616995,-0.271302,-9.493867,-8.174449,-8.075393,-0.398935,-6.788523,-3.826008,-8.240660,3.087781,9.492779,-1.900863,8.731202,-9.819708,2.221227,-8.492234,-5.488208,0.692730,0.340935,-9.532824,8.794135,2.024967,-2.486945,-7.892714,9.664083,5.519531,0.940768,-0.732482,9.451668,-4.579354,-4.378697,-7.836489,1.395256,3.721898,-9.554484,7.013844,2.979053,1.189831,-8.787390,-9.764128,5.449871,4.749376,9.194849,9.424727,-3.949427,-8.965877,-5.324868,4.403014,-9.051915,5.257609,-5.108593,-3.434925,6.387190,4.103386,5.159359,3.136076,-9.515227,5.699889,-0.436300,-3.950498,-5.568305,8.019436,7.885299,4.800698,2.598044,-1.074223,8.800599,5.141339,-9.830752,-0.726241,-7.071782,-3.461572,-5.300548,3.146069,-3.019754,4.715439,-9.786291,-9.983191,5.870808,8.933188,-5.074217,8.916819,-1.359646,-6.730735,2.227129,4.503387,-3.001719,-8.594066,8.826211,6.683928,3.338232,2.778299,6.520088,-5.728269,2.141334,5.661936,7.385629,6.047637,-6.436331,1.060521,-6.029752,7.050347,-8.150044,-8.659266,9.180171,-4.441562,-8.029005,-1.769889,0.959824,8.694906,-2.708885,-6.857794,4.694454,-3.779907,1.674742,5.429293,-8.299112,-9.804402,6.396082,-3.968346,-7.548787,0.481333,-3.801093,-2.673823,-7.945051,-2.807620,-6.600237,4.194750,-7.913224,3.277814,5.146240,-3.967863,-3.449355,-3.448289,0.145245,-1.275420,9.062633,-8.580510,-4.160890,2.119607,-4.810067,8.086806,-4.947665,-4.037861,-2.017115,-8.156446,8.475167,7.222861,5.120155,0.979854,1.266464,-0.365152,5.985439,-4.012579,0.853270,5.506150,-8.096333,0.666880,7.439903,0.514046,3.367241,5.137914,-9.204875,-6.170860,-1.151231,-7.787275,-1.660792,6.070430,-5.068577,0.046069,7.930005,8.377111,1.750627,6.601003,2.744329,5.338012,-5.493087,9.684042,2.094316,7.062206,8.045158,0.003412,-0.364604,9.269159,6.573272,1.597336,4.551771,-1.442797,9.751983,9.465549,-6.892824,4.075486,2.489973,-0.422685,6.346545,0.889237,6.571691,-1.857905,4.289000,-4.133988,-2.889055,9.071626,1.600545,-4.957237,7.270317,4.477556,-9.109228,3.986164,2.304335,1.570784,3.794002,9.149967,8.752637,-7.188481,1.925247,8.766309,-9.187294,-3.015019,-7.132671,-1.044553,-0.927626,-4.362605,0.839581,9.634711,8.081890,9.725969,3.068067,5.199522,-4.485625,4.532336,2.296323,9.382355,5.129741,3.331699,-0.004777,-4.508637,9.582607,-3.218856,-6.820429,2.655266,-3.598958,-6.406722,1.920308,-3.526673,8.521365,0.886557,4.920213,0.850032,-4.147123,-4.712211,-1.288063,-8.515374,5.727425],[-7.808495,-3.164004,6.659014,-9.992788,-0.273564,-7.327214,2.839739,-3.859351,-0.160716,1.436724,-0.708195,-2.232728,7.835955,7.121594,-1.373297,-5.047842,-9.444384,-9.432639,8.499932,3.526100,-8.372116,-6.449334,-0.279750,-1.088023,-5.663067,-3.008080,-9.933017,-7.912927,5.412793,4.427801,-9.416735,9.828160,-3.130604,6.391975,-6.677959,2.129488,-8.469042,5.241843,-1.868382,5.654980,7.285435,6.470238,-3.873730,2.488434,-7.656924,1.115050,-8.874254,1.095441,-9.013473,-4.605676,-9.118466,2.282530,-4.426620,0.360317,-0.982682,5.903192,-9.684810,3.390635,-7.375414,-2.369850,4.614868,-5.190923,-8.958550,-3.950501,-6.036123,-5.123264,-6.748413,0.282065,-0.683259,6.191613,5.007570,-7.397969,-0.744713,-2.627308,3.236558,1.530983,-6.093054,-2.116894,0.186885,5.258167,-0.732578,-5.379101,2.086828,7.286720,-6.767161,-8.666430,9.345090,1.720988,7.661154,0.086243,7.635514,5.832604,-0.835424,-9.755625,1.064003,6.472040,4.235549,-0.641519,3.005105,-4.308733,3.497277,3.380075,-6.178396,-5.548094,-8.381064,-2.078417,-6.643832,0.690513,6.729366,-7.450771,5.546075,-3.758633,-9.267290,4.730234,-4.635199,8.400453,-9.039397,0.532880,-3.415620,-8.962392,2.946593,-2.046520,2.120727,-9.939437,4.622899,4.546092,-2.337184,-7.447547,-1.903908,-9.604520,5.844149,-2.790538,-8.542675,-9.887913,6.956839,2.922959,9.515625,-7.592272,3.281745,-0.235693,-1.661942,5.782896,4.998403,3.038566,2.670954,8.923454,3.403217,-4.819655,8.368721,-7.811591,-4.255790,0.918635,6.039831,-6.475566,-3.593494,-0.577105,-2.526818,0.502858,4.590844,3.367188,-0.981015,2.553623,1.026605,8.366704,4.368435,0.478583,5.105848,1.855588,4.168793,5.328366,-8.740876,-7.274388,8.071165,5.742895,-7.030715,0.109518,8.119284,-0.161456,-3.153069,5.462503,-1.234262,2.350815,2.861581,-7.666566,-6.223676,-0.181605,6.459806,3.251047,-5.877092,5.810557,-0.632207,7.237176,-1.729182,-1.858180,8.250899,-5.068847,-8.307193,2.719477,-7.915097,-3.891676,4.437501,-9.061660,6.848948,1.945611,-8.664355,-3.058654,7.248257,-7.594454,-8.221094,-3.263481,-7.348976,5.786128,5.469478,-5.669081,-2.722267,-4.364268,3.930309,3.834046,3.331743,-9.165354,4.382292,-5.421748,-2.986380,-0.408667,4.672982,-8.903005,6.274047,-1.285882,-4.724361,9.390971,-2.896806,-5.774679,-4.272591,-9.675067,-6.485150,0.114421,-7.964221,-0.179914,-7.148298,7.783889,3.251929,0.574880,5.905397,2.929282,-5.181730,-1.935839,8.556185,-0.729695,-1.273551,7.469962,2.395200,0.756807,-6.140944,-3.038694,-8.950507,-6.720005,4.065335,8.193967,0.440616,-1.564418,4.902303,-5.470540,5.148658,-6.112129,-4.296496,-8.384490,-8.876260,4.609968,7.359590,1.620381,5.350933,2.280069,8.413682,7.468764,-3.421596,-0.097472,-6.893776,-3.826064,3.841216,-2.838465,-2.351471,2.621530,-9.999490,8.223147,-2.121616,4.817293,-3.202917,-9.799803,6.562531,-2.269657,2.003922,3.366215,-2.628911,0.534085,-1.906443,9.849589,-6.144558,8.692520,3.925554,-2.359330,9.637702,2.656895,-4.735021,3.227781,0.187891,4.360874,-9.895461,-7.618407,-3.616309,-4.318685,4.067993,6.778024,-6.066446,-8.056616,5.590875,1.263938,2.379727,-6.568719,-6.385737,7.986895,-1.818186,-8.042978,-1.031789,3.300045,-2.525972,9.682720,1.883787,1.403149,-2.688893,5.768316,-5.870115,-2.045978,4.482154,-4.326045,4.334666,8.954769,-7.919293,-8.065192],[-9.200560,-6.815360,-4.085724,3.097579,-3.357461,3.474439,-1.751445,5.412689,-7.746279,-3.695402,-5.885453,4.487888,3.933347,4.826066,3.352110,-9.397610,5.322827,-5.213140,-9.421904,9.894723,0.971446,9.239007,2.277660,-9.320361,9.318381,1.434608,0.191009,0.053671,8.128093,1.623559,-7.061904,1.649075,-4.577766,5.665008,2.481982,0.206934,-2.019432,-7.532499,5.427521,3.986793,-9.354915,9.930862,7.421709,-8.990663,4.648666,1.087547,5.056959,-0.822795,2.713050,-2.961633,-1.258369,4.163897,1.754043,9.362629,-7.296425,8.525618,3.819025,8.258411,9.400060,-8.221923,0.483079,-1.166640,-0.931162,-3.065265,5.677046,-0.313325,-4.999320,-3.292498,1.519178,4.342913,-7.699615,-5.511427,7.892645,-2.235021,9.431109,7.629455,1.620566,9.394936,-4.488460,8.181699,2.547806,-9.927128,4.412049,9.990423,-3.992408,-7.649329,5.240565,-1.571026,-1.306236,8.971184,7.292216,-0.190374,-0.906501,-3.599921,6.074285,-0.538157,9.968470,7.391518,3.589773,-6.008159,0.866951,-1.106468,1.566787,8.796986,-2.094514,-3.081421,8.441687,-3.662634,-6.502370,7.148895,-9.655868,-2.974204,-0.356669,-3.856527,-5.952547,3.584161,8.942909,-0.640700,-3.904827,3.186648,-2.694140,8.399262,-3.871442,-5.485618,-1.935459,0.456676,1.473413,3.446779,3.911745,-9.402394,-8.337732,6.787443,9.336657,-1.607611,7.804573,-0.821174,9.699328,3.859148,7.666716,8.635331,5.602035,-8.675846,-6.650380,-3.863468,0.090295,-6.602880,-5.950548,-8.627403,6.948733,-2.548972,-9.770623,9.175525,-1.488215,6.059999,-8.590786,0.761321,2.453796,-6.175300,4.380425,8.594975,1.339064,-0.806097,6.199590,-6.750643,-4.836531,8.520575,9.742356,-6.190737,-3.880754,-7.747525,-8.463263,-0.195693,1.358306,-2.898918,-6.073605,-3.990367,1.428320,5.048330,7.672990,7.102868,-7.712094,-0.636602,2.971120,7.238511,-2.846058,-3.553063,-8.306700,2.660005,-0.071379,-8.389224,0.216989,-7.351222,-9.689603,-0.299711,0.744127,5.956509,-7.194671,-8.707646,-9.626699,7.957305,2.032543,-5.028343,6.720058,1.414926,8.398357,-2.231337,-2.203555,2.337093,-7.377837,-9.751008,6.783580,-1.287714,6.341339,-1.664549,-6.127406,4.465685,7.571495,7.502283,3.599362,-5.908041,7.044234,3.298165,-2.223373,-8.963028,-0.481028,-5.041032,-8.863087,-2.536639,3.088902,2.850780,-1.620840,8.038732,-0.371015,-3.789820,-6.774561,-9.741912,8.247864,9.461589,-1.609494,2.463631,4.969049,1.607325,-2.905828,3.337661,-5.568581,6.570897,3.551355,-9.783311,-4.887591,5.745528,-9.249896,-7.966522,-0.935202,8.547822,2.163184,0.932175,-6.417715,-9.356133,-0.129158,5.533550,-6.556157,-4.589664,0.435776,-4.186481,6.716402,-4.708559,4.524576,-8.050777,6.222137,1.302994,-8.726507,5.857398,5.110236,3.889297,0.912844,-9.394370,4.586820,-1.819513,1.811135,-8.857964,-7.093627,-8.046682,9.207931,2.132401,-6.280324,0.601911,-5.061726,-2.010132,-6.528339,9.131176,-1.730793,-3.202308,-2.627225,-9.193945,7.948357,3.436217,-3.674456,7.831986,-8.901874,-8.851994,2.408506,1.064846,-9.352721,4.318169,1.803879,-5.242020,-8.517515,3.996981,6.337218,9.240338,8.095411,2.833452,-6.771286,7.835261,7.011805,-6.111111,-6.460075,-9.682546,9.497969,7.833970,1.663713,-1.825989,-6.517731,-5.965470,0.882619,-0.862072,-9.994425,-3.663511,3.728803,7.823235,1.923485,0.789372,7.123167,-1.956633,-0.078521,5.590716,-1.838344,9.892899],[-4.227191,-0.647759,5.833596,-0.386374,-4.601387,9.160811,-7.723853,7.611279,-5.100215,8.365580,-5.532825,-1.975257,-8.966750,-6.871860,0.239313,5.114660,-4.642082,5.709104,2.869914,0.436969,7.531014,4.519440,-3.139257,2.324550,4.776045,-5.557398,1.003230,-8.379546,9.006342,-1.582174,6.943873,-1.170483,5.794553,4.181185,5.841196,2.583760,2.239844,-3.731831,5.178932,-1.683645,9.566899,-0.941503,2.057697,-3.340314,-3.786045,4.115924,-5.276288,7.580568,-0.808561,-7.449090,5.921937,-0.257285,-9.757111,-3.384493,-7.347348,4.362967,-6.604458,-6.329823,-5.416562,-1.559567,2.955915,-2.312850,2.311829,-0.787905,4.415858,0.670482,-1.860322,9.629856,-2.679332,-4.746961,5.847018,-2.327032,1.359420,5.098635,0.689558,-2.280580,-1.408957,9.832640,-9.008990,6.863257,-3.173247,6.283681,-6.936071,-9.798908,-6.717890,7.896006,-7.597726,7.926680,1.967966,1.667058,-9.372909,0.730462,0.073429,-7.403765,-0.950253,0.099444,-2.662793,4.950834,6.101051,-1.454939,-2.451182,3.214657,9.918890,4.452165,-8.002955,-5.491815,-3.717843,5.192894,-5.681870,-1.272298,7.294417,0.763721,-1.535737,-3.872270,-2.016527,1.754297,-9.566865,0.860717,-2.823264,-5.995456,-6.139197,3.977265,9.260849,-3.258670,1.005787,-0.314780,-3.201449,-7.428291,6.444691,-7.662641,1.886705,-9.279794,8.264502,-6.030581,-3.532999,-6.461710,5.129940,-0.667427,-9.837446,-1.859084,3.942451,-9.225423,-4.606692,-8.907160,9.585099,-0.921659,-0.109472,-7.100656,-1.118513,7.187053,-2.342442,6.853325,-6.860957,-7.751538,-3.639308,-8.447613,1.092496,9.388040,7.119495,2.138059,5.655827,-6.776047,5.754453,5.133133,7.145027,-4.768831,-6.960778,8.955560,7.508413,0.102313,-9.630936,2.556152,-8.346575,6.901870,-9.635471,-1.396767,-4.882061,-7.838839,0.941766,-9.836240,-1.689464,-8.668783,-3.729794,2.571848,4.025440,-5.645450,-6.010821,-1.585078,-1.810668,7.510610,-9.890234,-2.425286,-5.612478,-1.716201,-0.616387,-2.748368,-4.430718,6.163936,-2.142707,-8.985650,4.668724,5.389656,6.572132,-6.251930,0.313828,-1.580362,2.432531,5.393681,9.048625,-5.126032,-5.688208,1.980041,0.031411,2.961969,8.021660,-5.566551,-9.614621,5.507205,7.534674,-5.820448,8.682083,-0.996690,5.561509,-4.260717,-2.746556,8.777912,3.561172,6.004309,7.686624,-1.742674,-6.336841,-9.136573,-0.979922,-5.199468,2.228554,-8.374606,-3.300974,-3.684697,-0.521660,-1.557220,2.309129,6.727423,-9.973217,8.400657,-6.205574,4.243160,-7.309976,1.030821,7.087906,-2.525930,-9.753985,6.922232,-1.020399,2.726630,-5.516347,4.687158,8.329115,-9.160378,2.753730,4.850358,6.577121,-5.747310,-1.747854,-3.610412,-8.706724,2.879114,8.789748,0.339930,-6.718809,0.447552,-0.297913,-4.746703,5.710117,-4.523053,-2.631166,-2.574142,-5.322792,-5.613241,1.897065,-2.069084,6.598255,-7.736799,-0.718082,-0.946708,-1.307041,2.065711,-7.660389,-5.631110,-2.276629,-7.686626,7.044312,-2.671509,-7.799087,-5.578895,0.943064,9.675068,-0.549271,6.982801,5.024425,5.726920,5.640124,-0.618460,-8.414372,-9.306805,8.016085,-7.301695,7.124935,-2.855044,7.588227,9.520010,7.823081,4.216308,9.743288,-5.690056,8.525717,-8.219939,-1.056517,-2.021345,-5.028156,8.318499,-4.119789,-7.876529,-5.182268,3.115600,3.943149,-8.267946,5.989028,2.963120,8.432201,9.602345,0.448486,7.449882,-4.720800,8.658260,-1.357813,8.997206,-5.303824,6.176263]], dtype = "float32")#candidate|17480|(16, 338)|const|float32
bop_17481 = relay.bitwise_xor(const_17462.astype('int64'), const_17480.astype('int64')) # shape=(16, 338)
output = relay.Tuple([call_17435,call_17461,bop_17481,])
output2 = relay.Tuple([call_17436,call_17463,bop_17481,])
func_17487 = relay.Function([], output)
mod['func_17487'] = func_17487
mod = relay.transform.InferType()(mod)
mutated_mod['func_17487'] = func_17487
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17487_call = mutated_mod.get_global_var('func_17487')
call_17488 = func_17487_call()
output = call_17488
func_17489 = relay.Function([], output)
mutated_mod['func_17489'] = func_17489
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11786_call = mod.get_global_var('func_11786')
func_11787_call = mutated_mod.get_global_var('func_11787')
call_17517 = relay.TupleGetItem(func_11786_call(), 0)
call_17518 = relay.TupleGetItem(func_11787_call(), 0)
output = call_17517
output2 = call_17518
func_17519 = relay.Function([], output)
mod['func_17519'] = func_17519
mod = relay.transform.InferType()(mod)
mutated_mod['func_17519'] = func_17519
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17519_call = mutated_mod.get_global_var('func_17519')
call_17520 = func_17519_call()
output = call_17520
func_17521 = relay.Function([], output)
mutated_mod['func_17521'] = func_17521
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13952_call = mod.get_global_var('func_13952')
func_13954_call = mutated_mod.get_global_var('func_13954')
call_17578 = func_13952_call()
call_17579 = func_13952_call()
func_16034_call = mod.get_global_var('func_16034')
func_16036_call = mutated_mod.get_global_var('func_16036')
call_17590 = relay.TupleGetItem(func_16034_call(), 0)
call_17591 = relay.TupleGetItem(func_16036_call(), 0)
func_12775_call = mod.get_global_var('func_12775')
func_12777_call = mutated_mod.get_global_var('func_12777')
call_17607 = relay.TupleGetItem(func_12775_call(relay.reshape(call_17578.astype('float32'), [6, 3, 8])), 1)
call_17608 = relay.TupleGetItem(func_12777_call(relay.reshape(call_17578.astype('float32'), [6, 3, 8])), 1)
var_17623 = relay.var("var_17623", dtype = "uint64", shape = (1936,))#candidate|17623|(1936,)|var|uint64
bop_17624 = relay.less_equal(call_17607.astype('bool'), relay.reshape(var_17623.astype('bool'), relay.shape_of(call_17607))) # shape=(1936,)
bop_17627 = relay.less_equal(call_17608.astype('bool'), relay.reshape(var_17623.astype('bool'), relay.shape_of(call_17608))) # shape=(1936,)
output = relay.Tuple([call_17578,call_17590,bop_17624,])
output2 = relay.Tuple([call_17579,call_17591,bop_17627,])
func_17628 = relay.Function([var_17623,], output)
mod['func_17628'] = func_17628
mod = relay.transform.InferType()(mod)
mutated_mod['func_17628'] = func_17628
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17629 = relay.var("var_17629", dtype = "uint64", shape = (1936,))#candidate|17629|(1936,)|var|uint64
func_17628_call = mutated_mod.get_global_var('func_17628')
call_17630 = func_17628_call(var_17629)
output = call_17630
func_17631 = relay.Function([var_17629], output)
mutated_mod['func_17631'] = func_17631
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13260_call = mod.get_global_var('func_13260')
func_13262_call = mutated_mod.get_global_var('func_13262')
call_17694 = func_13260_call()
call_17695 = func_13260_call()
output = relay.Tuple([call_17694,])
output2 = relay.Tuple([call_17695,])
func_17719 = relay.Function([], output)
mod['func_17719'] = func_17719
mod = relay.transform.InferType()(mod)
mutated_mod['func_17719'] = func_17719
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17719_call = mutated_mod.get_global_var('func_17719')
call_17720 = func_17719_call()
output = call_17720
func_17721 = relay.Function([], output)
mutated_mod['func_17721'] = func_17721
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12053_call = mod.get_global_var('func_12053')
func_12055_call = mutated_mod.get_global_var('func_12055')
call_17722 = relay.TupleGetItem(func_12053_call(), 0)
call_17723 = relay.TupleGetItem(func_12055_call(), 0)
output = relay.Tuple([call_17722,])
output2 = relay.Tuple([call_17723,])
func_17736 = relay.Function([], output)
mod['func_17736'] = func_17736
mod = relay.transform.InferType()(mod)
mutated_mod['func_17736'] = func_17736
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17736_call = mutated_mod.get_global_var('func_17736')
call_17737 = func_17736_call()
output = call_17737
func_17738 = relay.Function([], output)
mutated_mod['func_17738'] = func_17738
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14852_call = mod.get_global_var('func_14852')
func_14853_call = mutated_mod.get_global_var('func_14853')
call_17769 = relay.TupleGetItem(func_14852_call(), 0)
call_17770 = relay.TupleGetItem(func_14853_call(), 0)
output = relay.Tuple([call_17769,])
output2 = relay.Tuple([call_17770,])
func_17806 = relay.Function([], output)
mod['func_17806'] = func_17806
mod = relay.transform.InferType()(mod)
output = func_17806()
func_17807 = relay.Function([], output)
mutated_mod['func_17807'] = func_17807
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10958_call = mod.get_global_var('func_10958')
func_10960_call = mutated_mod.get_global_var('func_10960')
call_17813 = relay.TupleGetItem(func_10958_call(), 0)
call_17814 = relay.TupleGetItem(func_10960_call(), 0)
output = relay.Tuple([call_17813,])
output2 = relay.Tuple([call_17814,])
func_17834 = relay.Function([], output)
mod['func_17834'] = func_17834
mod = relay.transform.InferType()(mod)
output = func_17834()
func_17835 = relay.Function([], output)
mutated_mod['func_17835'] = func_17835
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13984_call = mod.get_global_var('func_13984')
func_13985_call = mutated_mod.get_global_var('func_13985')
call_17912 = relay.TupleGetItem(func_13984_call(), 0)
call_17913 = relay.TupleGetItem(func_13985_call(), 0)
func_17036_call = mod.get_global_var('func_17036')
func_17037_call = mutated_mod.get_global_var('func_17037')
call_17915 = relay.TupleGetItem(func_17036_call(), 0)
call_17916 = relay.TupleGetItem(func_17037_call(), 0)
const_17956 = relay.const([[[8.168442,-1.535628,-4.113425,2.128455,-9.663680,-3.836729,-6.649331,9.975432,-4.630938,0.923454,-7.644936,1.323981,2.127514,8.985865],[-1.046901,-6.338237,9.227883,2.136833,-1.017539,-9.900745,-4.114301,1.920222,-5.361839,-8.356021,-8.841713,-5.928718,1.093329,-9.619957],[0.561882,-8.976714,-1.353959,-4.918875,-8.508146,0.218411,-5.846897,8.198242,-0.621681,2.276555,8.302683,-6.192398,-9.008617,-8.385294]],[[-2.937754,-0.051866,-1.724902,-6.587619,-0.650157,-5.230494,-6.599927,8.431381,-4.037314,3.590564,9.392400,1.627304,-1.447327,5.464021],[-5.773921,-6.646049,-8.663592,6.945468,-9.074628,2.084016,-9.422311,1.995510,9.872917,6.073719,9.999024,2.071983,-8.719094,6.321900],[-1.269362,1.771275,-6.529049,1.479145,-5.315830,1.237189,-8.953751,1.569566,1.891745,8.273967,6.054025,-2.622312,-5.463360,-5.978814]]], dtype = "float32")#candidate|17956|(2, 3, 14)|const|float32
bop_17957 = relay.greater(call_17915.astype('bool'), relay.reshape(const_17956.astype('bool'), relay.shape_of(call_17915))) # shape=(2, 3, 14)
bop_17960 = relay.greater(call_17916.astype('bool'), relay.reshape(const_17956.astype('bool'), relay.shape_of(call_17916))) # shape=(2, 3, 14)
uop_17969 = relay.sin(call_17915.astype('float64')) # shape=(2, 3, 14)
uop_17971 = relay.sin(call_17916.astype('float64')) # shape=(2, 3, 14)
func_13668_call = mod.get_global_var('func_13668')
func_13669_call = mutated_mod.get_global_var('func_13669')
call_17983 = func_13668_call()
call_17984 = func_13668_call()
func_685_call = mod.get_global_var('func_685')
func_687_call = mutated_mod.get_global_var('func_687')
const_17989 = relay.const([-6.658478,-8.640526,-8.155450,-2.857952,-9.586882,-2.208138,8.061980,4.938513,0.190262,8.210644,9.770914,-1.309773,5.792742,-0.897729,9.916004,9.250614,0.060127,9.213020,-5.177617,6.484722,-1.195714,-3.309490,2.357724,-1.860301,-0.379979,-5.640289,4.153462,1.811638,-2.436406,0.476072,-2.247779,1.126719,3.423455,6.082574,-3.938453,-5.733385,-5.431373,4.358957,-7.853018,1.563912,3.620793,4.448880,-7.458463,8.346267,-0.690471,-2.874341,8.346732,-3.200155,-0.047469,-0.875597,5.809977,-6.379389,3.883087,6.479781,4.995440,-5.776247,-9.046345,6.211090,-2.358282,-5.315234,-6.551794,4.348312,-4.261898,-6.226379,-8.240549,-5.564171,5.414268,3.170811,-2.995074,1.934012,3.827055,-5.229021,7.396981,-2.892068,-4.084898,-8.871152,-4.343721,-3.538304,0.693443,6.493718,1.194879,8.863235,-2.015018,7.086789,-4.636811,-6.454730,-6.018672,7.603710,0.167487,2.813150,-1.089174,-7.249058,1.643095,-5.754278,1.595499,-0.061320,3.681375,4.467912,9.265357,-6.598965,3.201735,8.970572,9.074502,2.221386,1.358274,-2.428816,-5.732947,-8.468015,3.797210,3.270785,-2.183087,5.467987,6.203091,-2.331559,7.800871,-4.330641,5.866464,-2.693172,8.280393,7.531660,-2.061326,-5.989602,-9.161846,-8.366858,0.549058,-0.018089,-8.658995,4.020870,3.702522,-9.108463,-0.813472,0.196125,-6.260429,-4.886061,-3.525408,-4.615491,5.062162,2.366933,6.633514,8.856469,3.802724,1.626122,3.999419,-9.729685,-8.218528,6.092765,3.705624,-4.764748,-6.822393,7.068057,7.628808,0.060224,1.744084,-3.970798,1.354757,5.443475,-1.350099,-3.567635,-9.521666,-6.658291,3.161621,9.148060,-8.602094,-9.281643,2.488978,3.550546,-0.644613,7.918184,-0.866489,-3.794816,-0.417655,-0.179933,-0.318805,-1.110059,3.682843,5.145491,0.060836,-8.002690,1.175855,-5.686297,-6.078260,6.422875,0.703390,-9.794531,-7.172752,9.409951,6.051235,8.380854,-2.910827,-6.393674,-9.291991,-5.020936,-7.611772,-3.215729,1.291460,-3.392601,-0.875591,-0.160163,9.508676,7.996472,-8.805750,-4.918313,1.418821,8.602910,9.819849,4.137262,-2.512657,0.014455,-4.113090,-5.747809,3.774541,-3.171590,-4.376495,3.237543,0.052293,6.565045,4.978513,5.597819,-5.308142,-2.488113,-4.063680,9.000317,8.754170,-9.797809,-8.220367,4.481833,3.537442,-7.545952,2.972041,2.419054,-6.777602,-9.514858,-5.085875,-0.505892,-6.809622,0.071007,1.839915,3.352701,2.461890,-6.365928,-7.365096,9.137195,4.920910,7.631643,9.237758,-8.430916,-3.665766,8.692145,-4.637256,4.199384,-2.990402,-0.088060,8.079696,-6.678418,3.523761,3.910027,8.143391,7.437765,-8.496546,4.305732,-9.130370,1.773503,-4.739514,9.477034,4.525641,2.641193,4.564536,8.100855,-8.293667,-4.772444,-4.983635,6.198094,-9.865118,2.411599,-9.654229,8.141961,-0.179720,8.748618,4.582085,3.419533,3.325226,2.482737,-1.970213,4.268613,-5.443207,-5.235791,4.830748,-0.107298,5.545364,-0.024291,-4.115386,-2.152840,5.242744,4.256843,-0.823723,4.564540,-4.529740,9.463324,1.992921,9.500023,-2.310736,-5.004962,3.227258,2.696754,-1.528505,-7.130447,3.587983,8.394833,-4.601334,-1.304241,-2.229524,-7.731622,-3.951877,5.268740,4.415867,8.626147,0.719911,2.216734,0.751393,8.028403,3.218198,-4.449260,-3.106527,7.686269,3.998544,6.751840,5.853098,-6.154592,5.365807,4.912313,-8.324601,-4.506998,-8.537640,-8.475063,9.299895,-2.413915,-0.007528,8.782960,-1.168548,6.000259,-8.316071,7.930058,3.336985,7.623192,-4.220187,8.276984,-5.768076,-1.128609,0.296830,-8.478868,-1.394654,5.170307,5.419629,5.469347,5.633573,2.820720,8.344519,7.113886,-4.218125,-6.366393,9.108818,3.271824,2.516361,5.016007,0.879996,7.931219,-7.517195,-9.910418,-7.320895,2.896371,-2.178455,8.149410,-7.825207,-1.941707,-0.740170,0.721281,-8.207250,6.584046,-0.468187,1.049407,-2.901533,7.183959,3.593726,-6.759007,6.901692,-8.820563,7.550585,0.940432,-6.306028,-1.329565,-9.626312,3.916958,6.219890,2.958391,1.808692,1.938720,9.598411,-2.665669,-4.213932,-2.885332,-5.494768,9.563493,1.416032,5.228411,7.672652,-5.352993,8.943886,-6.864677,-6.916150,-0.572745,-0.940935,5.663835,-8.801349,8.545906,-1.671108,-4.121094,-2.151697,-3.456709,7.756403,8.940209,-9.273596,-4.305979,8.370660,-0.997995,-6.553031,3.855541,-2.849338,6.302258,-9.947301,8.140576,-5.749184,-6.677510,8.816187,-7.356887,-8.004779,1.717798,6.715154,7.890743,4.836677,-9.828030,-2.380173,-8.581542,-3.863587,-2.034401,-7.146560,-4.484751,6.096989,5.090357,1.312737,3.701359,-2.902107,-7.349719,5.798605,-0.750619,5.179945,-3.434154,0.351706,-1.988863,-2.527184,-4.199076,-9.449770,-0.995456,9.124168,0.016569,2.788797,8.662752,6.068862,-0.730350,0.891682,0.383229,4.953240,-6.773185,6.559077,1.490271,7.373613,-1.724187,-9.605686,-1.037799,2.638022,-4.465739,-1.042776,-3.166177,-3.192142,-0.173274,2.858776,-2.487147,-9.724533,8.732309,-6.635645,9.459536,9.775166,9.917136,-5.352558,4.156920,3.101905,2.511398,9.946321,-4.117919,-5.090384,0.253063,-4.247253,-2.812991,7.965176,-4.415936,-3.000737,1.139712,-3.687024,7.003318,-4.718454,-7.057481,9.133314,-4.797047,8.095626,-8.545649,2.476118,5.348112,2.735945,-4.610255,-2.437317,-2.336414,3.831049,-7.696169,2.391599,-3.080303,-0.539066,5.378880,-0.503726,8.204038,-9.192900,3.929854,1.342177,-6.575274,2.639676,3.075722,9.895503,-8.216140,-3.375295,-1.994780,5.093650,5.181969,0.815016,4.831626,-6.780936,6.098054,-8.566277,9.372086,-1.092579,-1.892803,-6.786350,8.579897,-6.233161,-5.258445,-5.401034,-0.001485,-0.577575,0.213799,-3.286442,4.182406,3.303400,-1.308127,-0.794655,-2.927474,7.659424,-9.638237,-4.482415,1.713113,2.928203,8.129616,2.722781,3.164889,-7.740810,7.730254,5.940780,2.147993,-6.042724,-9.855217,7.680829,7.241610,-9.867346,7.157154,8.196248,3.099421,-1.927733,-6.944653,-1.399144,6.092939,-8.557388,1.624026,-7.259494,8.525986,-8.689308,4.064155,-6.327729,-5.180614,-7.809666,3.571413,1.837121,-2.510147,-6.735086,9.234486,5.768415,1.593760,9.944681,3.352951,0.132086,-2.693384,5.720291,-5.974449,-8.008723,-3.017458,-5.189892,-9.184493,-2.708368,4.266788,8.730498,1.302577,-3.603741,8.136135,1.646500,1.952408,9.890659,3.283279,0.705826,-0.508241,-1.415400,-5.009786,-2.629716,-5.108662,7.688629,3.938378,-9.688579,6.718387,7.148234,8.072058,-5.414019,-0.332761,-5.590417,-1.548066,3.662985,-5.403551,2.023765,-9.392053,2.139039,-2.864028,-4.860174,-0.540725,-3.241967,9.629138,-8.516537,-2.862345,7.419983,-6.821552,-4.105033,5.811980,3.197077,-7.922885,-1.592169,-7.371570,1.451991,0.792878,5.758352,8.301328,5.644736,9.727361,8.013162,-1.999366,-8.567391,-1.474087,4.392393,-1.007909,8.844675,1.385730,6.176593,-8.433440,-2.918230,3.296277,6.934918,1.651143,6.035890,-9.637773,2.973081,-4.433942,4.708420,-7.556979,-9.202412,7.782038,0.465086,-7.656752,-9.513334,-9.154047,-3.209046,-9.154769,-4.752307,-2.266410,4.278272,-5.009612,-6.752306,-5.586274,0.222359,-0.046641,-5.598880,-4.013448,5.516502,-8.935160,1.407887,-0.805111,-1.666876,2.324820,2.455575,1.312790,-1.341063,9.488621,-5.082658,-1.419963,-1.461193,8.181168,-4.606129,8.490662,-1.450441,7.833710,-9.012833,8.916720,8.411354,2.033524,4.121730,9.241277,-5.622262,-8.903919,-0.895595,-6.323643,8.152667,4.319535,8.718986,4.826124,6.732751,5.715518,9.544996,-2.553993,6.954873,1.556210,-5.503525,-6.551282,0.873871,1.490609,0.534335,-8.098221,-9.780459,-2.345586,-8.953392,3.805564,7.323540,7.159741,-1.594814,2.175274,4.188537,-4.422114], dtype = "float32")#candidate|17989|(756,)|const|float32
call_17988 = relay.TupleGetItem(func_685_call(relay.reshape(const_17989.astype('float32'), [756,])), 0)
call_17990 = relay.TupleGetItem(func_687_call(relay.reshape(const_17989.astype('float32'), [756,])), 0)
output = relay.Tuple([call_17912,bop_17957,uop_17969,call_17983,call_17988,const_17989,])
output2 = relay.Tuple([call_17913,bop_17960,uop_17971,call_17984,call_17990,const_17989,])
func_18006 = relay.Function([], output)
mod['func_18006'] = func_18006
mod = relay.transform.InferType()(mod)
output = func_18006()
func_18007 = relay.Function([], output)
mutated_mod['func_18007'] = func_18007
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12836_call = mod.get_global_var('func_12836')
func_12838_call = mutated_mod.get_global_var('func_12838')
call_18020 = relay.TupleGetItem(func_12836_call(), 1)
call_18021 = relay.TupleGetItem(func_12838_call(), 1)
func_6123_call = mod.get_global_var('func_6123')
func_6128_call = mutated_mod.get_global_var('func_6128')
var_18036 = relay.var("var_18036", dtype = "float64", shape = ())#candidate|18036|()|var|float64
var_18037 = relay.var("var_18037", dtype = "float64", shape = (26, 1))#candidate|18037|(26, 1)|var|float64
var_18038 = relay.var("var_18038", dtype = "bool", shape = (1584,))#candidate|18038|(1584,)|var|bool
var_18039 = relay.var("var_18039", dtype = "float32", shape = (9, 100))#candidate|18039|(9, 100)|var|float32
call_18035 = relay.TupleGetItem(func_6123_call(relay.reshape(var_18036.astype('float64'), []), relay.reshape(var_18037.astype('float64'), [13, 1, 2]), relay.reshape(var_18038.astype('bool'), [1584,]), relay.reshape(var_18039.astype('float32'), [900,]), ), 3)
call_18040 = relay.TupleGetItem(func_6128_call(relay.reshape(var_18036.astype('float64'), []), relay.reshape(var_18037.astype('float64'), [13, 1, 2]), relay.reshape(var_18038.astype('bool'), [1584,]), relay.reshape(var_18039.astype('float32'), [900,]), ), 3)
func_14717_call = mod.get_global_var('func_14717')
func_14719_call = mutated_mod.get_global_var('func_14719')
const_18046 = relay.const([3.657230,3.600260,-9.006685,-8.458980,3.205547,-8.346803,1.785915,-4.292743,-2.182021,-3.085978,4.649418,-4.477116,9.986034,3.248937,-6.777473,6.001797,9.809021,2.913551,-6.243498,-5.400333,-2.194403,9.014419,7.940224,-1.964440,-0.125997,9.047320,7.922846,4.587979,9.435463,3.145878,-7.735583,2.205197,9.339266,0.483700,7.627277,-5.183505,-1.877982,3.462973,2.141713,-9.977866,1.357132,-3.086455,0.510593,5.959662,-2.965054,-8.816337,2.574127,-9.312462,-7.797594,-4.661226,0.668047,-6.937920,4.297883,2.693509,3.627885,-4.392685,2.350174,2.826702,2.300711,9.874532], dtype = "float64")#candidate|18046|(60,)|const|float64
call_18045 = relay.TupleGetItem(func_14717_call(relay.reshape(const_18046.astype('float64'), [60,])), 1)
call_18047 = relay.TupleGetItem(func_14719_call(relay.reshape(const_18046.astype('float64'), [60,])), 1)
output = relay.Tuple([call_18020,call_18035,var_18036,var_18037,var_18038,var_18039,call_18045,const_18046,])
output2 = relay.Tuple([call_18021,call_18040,var_18036,var_18037,var_18038,var_18039,call_18047,const_18046,])
func_18055 = relay.Function([var_18036,var_18037,var_18038,var_18039,], output)
mod['func_18055'] = func_18055
mod = relay.transform.InferType()(mod)
var_18056 = relay.var("var_18056", dtype = "float64", shape = ())#candidate|18056|()|var|float64
var_18057 = relay.var("var_18057", dtype = "float64", shape = (26, 1))#candidate|18057|(26, 1)|var|float64
var_18058 = relay.var("var_18058", dtype = "bool", shape = (1584,))#candidate|18058|(1584,)|var|bool
var_18059 = relay.var("var_18059", dtype = "float32", shape = (9, 100))#candidate|18059|(9, 100)|var|float32
output = func_18055(var_18056,var_18057,var_18058,var_18059,)
func_18060 = relay.Function([var_18056,var_18057,var_18058,var_18059,], output)
mutated_mod['func_18060'] = func_18060
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15145_call = mod.get_global_var('func_15145')
func_15146_call = mutated_mod.get_global_var('func_15146')
call_18073 = relay.TupleGetItem(func_15145_call(), 1)
call_18074 = relay.TupleGetItem(func_15146_call(), 1)
output = call_18073
output2 = call_18074
func_18082 = relay.Function([], output)
mod['func_18082'] = func_18082
mod = relay.transform.InferType()(mod)
mutated_mod['func_18082'] = func_18082
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18082_call = mutated_mod.get_global_var('func_18082')
call_18083 = func_18082_call()
output = call_18083
func_18084 = relay.Function([], output)
mutated_mod['func_18084'] = func_18084
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16287_call = mod.get_global_var('func_16287')
func_16288_call = mutated_mod.get_global_var('func_16288')
call_18091 = relay.TupleGetItem(func_16287_call(), 2)
call_18092 = relay.TupleGetItem(func_16288_call(), 2)
output = relay.Tuple([call_18091,])
output2 = relay.Tuple([call_18092,])
func_18093 = relay.Function([], output)
mod['func_18093'] = func_18093
mod = relay.transform.InferType()(mod)
mutated_mod['func_18093'] = func_18093
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18093_call = mutated_mod.get_global_var('func_18093')
call_18094 = func_18093_call()
output = call_18094
func_18095 = relay.Function([], output)
mutated_mod['func_18095'] = func_18095
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18082_call = mod.get_global_var('func_18082')
func_18084_call = mutated_mod.get_global_var('func_18084')
call_18100 = func_18082_call()
call_18101 = func_18082_call()
func_14266_call = mod.get_global_var('func_14266')
func_14269_call = mutated_mod.get_global_var('func_14269')
var_18128 = relay.var("var_18128", dtype = "float32", shape = (26, 13))#candidate|18128|(26, 13)|var|float32
call_18127 = relay.TupleGetItem(func_14266_call(relay.reshape(var_18128.astype('float32'), [338,])), 2)
call_18129 = relay.TupleGetItem(func_14269_call(relay.reshape(var_18128.astype('float32'), [338,])), 2)
func_12321_call = mod.get_global_var('func_12321')
func_12322_call = mutated_mod.get_global_var('func_12322')
call_18133 = func_12321_call()
call_18134 = func_12321_call()
func_5951_call = mod.get_global_var('func_5951')
func_5953_call = mutated_mod.get_global_var('func_5953')
var_18136 = relay.var("var_18136", dtype = "float32", shape = (660,))#candidate|18136|(660,)|var|float32
call_18135 = func_5951_call(relay.reshape(var_18136.astype('float32'), [4, 11, 15]))
call_18137 = func_5951_call(relay.reshape(var_18136.astype('float32'), [4, 11, 15]))
output = relay.Tuple([call_18100,call_18127,var_18128,call_18133,call_18135,var_18136,])
output2 = relay.Tuple([call_18101,call_18129,var_18128,call_18134,call_18137,var_18136,])
func_18156 = relay.Function([var_18128,var_18136,], output)
mod['func_18156'] = func_18156
mod = relay.transform.InferType()(mod)
mutated_mod['func_18156'] = func_18156
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18156_call = mutated_mod.get_global_var('func_18156')
var_18158 = relay.var("var_18158", dtype = "float32", shape = (26, 13))#candidate|18158|(26, 13)|var|float32
var_18159 = relay.var("var_18159", dtype = "float32", shape = (660,))#candidate|18159|(660,)|var|float32
call_18157 = func_18156_call(var_18158,var_18159,)
output = call_18157
func_18160 = relay.Function([var_18158,var_18159,], output)
mutated_mod['func_18160'] = func_18160
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12946_call = mod.get_global_var('func_12946')
func_12947_call = mutated_mod.get_global_var('func_12947')
call_18184 = relay.TupleGetItem(func_12946_call(), 0)
call_18185 = relay.TupleGetItem(func_12947_call(), 0)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_18200 = relay.TupleGetItem(func_12265_call(), 0)
call_18201 = relay.TupleGetItem(func_12266_call(), 0)
output = relay.Tuple([call_18184,call_18200,])
output2 = relay.Tuple([call_18185,call_18201,])
func_18205 = relay.Function([], output)
mod['func_18205'] = func_18205
mod = relay.transform.InferType()(mod)
mutated_mod['func_18205'] = func_18205
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18205_call = mutated_mod.get_global_var('func_18205')
call_18206 = func_18205_call()
output = call_18206
func_18207 = relay.Function([], output)
mutated_mod['func_18207'] = func_18207
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13924_call = mod.get_global_var('func_13924')
func_13926_call = mutated_mod.get_global_var('func_13926')
call_18220 = relay.TupleGetItem(func_13924_call(), 0)
call_18221 = relay.TupleGetItem(func_13926_call(), 0)
output = call_18220
output2 = call_18221
func_18236 = relay.Function([], output)
mod['func_18236'] = func_18236
mod = relay.transform.InferType()(mod)
mutated_mod['func_18236'] = func_18236
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18236_call = mutated_mod.get_global_var('func_18236')
call_18237 = func_18236_call()
output = call_18237
func_18238 = relay.Function([], output)
mutated_mod['func_18238'] = func_18238
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12883_call = mod.get_global_var('func_12883')
func_12884_call = mutated_mod.get_global_var('func_12884')
call_18259 = func_12883_call()
call_18260 = func_12883_call()
func_18006_call = mod.get_global_var('func_18006')
func_18007_call = mutated_mod.get_global_var('func_18007')
call_18262 = relay.TupleGetItem(func_18006_call(), 4)
call_18263 = relay.TupleGetItem(func_18007_call(), 4)
const_18267 = relay.const([[[-9.894006,-4.947346,-5.419681],[2.248260,-1.760589,3.130639],[-6.466900,4.324575,-8.258702],[-5.198911,-1.335937,-6.044028],[-2.215549,0.117132,-0.670566],[2.094628,-8.973214,5.876331],[0.278255,3.227190,-3.728823],[1.037706,9.123637,5.136516],[-5.543271,5.832221,-0.982499]],[[-2.624750,-5.352718,-5.201964],[-6.391102,5.394921,0.350810],[1.541428,5.044175,-5.259227],[9.656112,-1.216662,-6.235400],[9.296747,-4.145414,1.194652],[-6.351968,7.011710,3.107831],[2.422203,-3.875622,-4.444251],[-3.302814,-1.562129,1.413158],[3.462985,-7.367412,4.952535]],[[-9.662432,-9.096694,2.579198],[6.550165,2.039575,-1.783658],[-0.150971,-7.793546,-2.683754],[-7.286766,-2.547467,-0.997387],[2.279407,-5.321392,-2.916743],[-1.020601,-9.455070,5.341883],[-5.858206,-5.911297,0.399417],[-3.158592,-9.311124,-0.876647],[-8.677973,3.959022,-4.994690]],[[-5.310168,-9.687881,9.068021],[-3.870150,3.707335,-8.587198],[-5.279016,9.419551,-1.157274],[8.509174,0.748937,2.758936],[-4.731776,-1.329012,-9.313174],[9.614089,0.502417,-4.493738],[-0.753167,-0.995878,6.368292],[-4.242972,-1.791454,-7.412561],[5.212430,1.489563,-8.634242]]], dtype = "float64")#candidate|18267|(4, 9, 3)|const|float64
bop_18268 = relay.not_equal(call_18262.astype('bool'), relay.reshape(const_18267.astype('bool'), relay.shape_of(call_18262))) # shape=(4, 9, 3)
bop_18271 = relay.not_equal(call_18263.astype('bool'), relay.reshape(const_18267.astype('bool'), relay.shape_of(call_18263))) # shape=(4, 9, 3)
output = relay.Tuple([call_18259,bop_18268,])
output2 = relay.Tuple([call_18260,bop_18271,])
func_18275 = relay.Function([], output)
mod['func_18275'] = func_18275
mod = relay.transform.InferType()(mod)
mutated_mod['func_18275'] = func_18275
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18275_call = mutated_mod.get_global_var('func_18275')
call_18276 = func_18275_call()
output = call_18276
func_18277 = relay.Function([], output)
mutated_mod['func_18277'] = func_18277
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14058_call = mod.get_global_var('func_14058')
func_14059_call = mutated_mod.get_global_var('func_14059')
call_18362 = relay.TupleGetItem(func_14058_call(), 0)
call_18363 = relay.TupleGetItem(func_14059_call(), 0)
func_11027_call = mod.get_global_var('func_11027')
func_11030_call = mutated_mod.get_global_var('func_11030')
const_18365 = relay.const([3,8,-4,6,1,10,8,9,-2,2,1,5,5,-3,-10,-7,-2,1,-9,-4,5,-4,-6,6,-3,5,8,-1,-1,7,-1,-6,-9,-2,6,-9,-8,3,5,1,-8,3,-8,8,1,5,-2,-6,10,9,4,6,-8,-7,8,2,6,-3,2,-8,-9,-6,3,-1,-1,-6,6,-6,-1,-1,3,-7,9,-3,-1,3,-3,-10,2,-7,4,6,7,6,7,9,1,8,3,-2,-4,4,-5,-2,-10,9,-4,3,9,1,9,7,-3,-1,-8,-3,-9,10,3,-2,-2,-6,6,-8,-1,2,-7,9,3,8,-4,-6,8,-10,9,-6,2,7,-5,2,2,-5,2,10,-5,-1,-7,-3,-4,-8,4,-3,-7,-4,-5,-8,2,-7,9,-4,-8,-5,-1,-2,3,9,3,4,2,4,-8,-6,8,-7,-3,-3,-5,5,-7,2,-6,-7,-2,-1,-3,-2,9,-9,1,4,-6,-4,3,6,4,-2,-8,-9,4,-5,-7,5,-4,1,-2,-9,9,-1,3,-4,5,7,-9,-6,-8,-9,7,-9,10,-6,4,-5,1,7,1,-2,1,2,8,2,-8,-1,5,-5,3,-9,1,1,-10,-7,-4,-9,-8,5,-10,4,-6,-4,8,-5,-5,7,10,9,8,1,4,-9,3,-10,10,3,-10,6,8,-8,-10,6,-3,-10,-10,-5,2,-9,-7,-10,-5,-3,-1,5,-4,10,-8,-6,3,3,10,10,-3,9,-7,7,3,7,2,-3,2,2,4,-2,7,-2,3,-1,10,8,-10,-9,6,-8,7,7,-9,-1,1,9,9,7,5,10,-9,-3,5,3,-10,-2,-4,-8,9,5,-3,10,-8,-5,6,-10,-6,-3,7,-2,6,-3,2,3,-1,5,-3,-7,3,-5,9,-3,6,-4,9,9,-10,6,-4,-5,-7,10,-5,-2,10,7,-1,-4,6,2,-4,3,-3,-7,-9,-3,-1,6,-1,6,4,-1,-4,3,-3,-7,6,-2,-10,8,-9,6,4,-8,10,6,-7,-10,10,-3,8,9,-2,3,-9,-1,-1,-10,9,-10,2,-5,-3,-2,-10,-5,4,2,-6,-8,-5,-3,6,-3,-1,-3,9,4,5,-6,-10,5,6,2,4,8,10,8,-5,8,4,-1,-9,6,10,1,4,3,-5,3,-6,-1,-2,-10,-9,-5,10,-5,-10,3,4,9,1,-7,9,-6,-3,-1,3,2,-4,5,2,2,-3,-1,2,5,3,8,4,-7,8,-1,-3,-2,-9,-10,-7,2,-1,6,-2,5,-3,-7,6,3,4,-4,7,6,5,7,-8,1,-4,1,8,-1,-8,9,2,7,-3,5,-8,-8,-6,-6,-5,-6], dtype = "uint32")#candidate|18365|(512,)|const|uint32
call_18364 = relay.TupleGetItem(func_11027_call(relay.reshape(const_18365.astype('uint32'), [256, 2])), 1)
call_18366 = relay.TupleGetItem(func_11030_call(relay.reshape(const_18365.astype('uint32'), [256, 2])), 1)
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
var_18369 = relay.var("var_18369", dtype = "float32", shape = (338,))#candidate|18369|(338,)|var|float32
call_18368 = func_1498_call(relay.reshape(var_18369.astype('float32'), [13, 13, 2]))
call_18370 = func_1498_call(relay.reshape(var_18369.astype('float32'), [13, 13, 2]))
output = relay.Tuple([call_18362,call_18364,const_18365,call_18368,var_18369,])
output2 = relay.Tuple([call_18363,call_18366,const_18365,call_18370,var_18369,])
func_18373 = relay.Function([var_18369,], output)
mod['func_18373'] = func_18373
mod = relay.transform.InferType()(mod)
mutated_mod['func_18373'] = func_18373
mutated_mod = relay.transform.InferType()(mutated_mod)
var_18374 = relay.var("var_18374", dtype = "float32", shape = (338,))#candidate|18374|(338,)|var|float32
func_18373_call = mutated_mod.get_global_var('func_18373')
call_18375 = func_18373_call(var_18374)
output = call_18375
func_18376 = relay.Function([var_18374], output)
mutated_mod['func_18376'] = func_18376
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_18378 = relay.TupleGetItem(func_12265_call(), 0)
call_18379 = relay.TupleGetItem(func_12266_call(), 0)
output = call_18378
output2 = call_18379
func_18380 = relay.Function([], output)
mod['func_18380'] = func_18380
mod = relay.transform.InferType()(mod)
output = func_18380()
func_18381 = relay.Function([], output)
mutated_mod['func_18381'] = func_18381
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16830_call = mod.get_global_var('func_16830')
func_16832_call = mutated_mod.get_global_var('func_16832')
call_18382 = relay.TupleGetItem(func_16830_call(), 0)
call_18383 = relay.TupleGetItem(func_16832_call(), 0)
output = relay.Tuple([call_18382,])
output2 = relay.Tuple([call_18383,])
func_18413 = relay.Function([], output)
mod['func_18413'] = func_18413
mod = relay.transform.InferType()(mod)
mutated_mod['func_18413'] = func_18413
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18413_call = mutated_mod.get_global_var('func_18413')
call_18414 = func_18413_call()
output = call_18414
func_18415 = relay.Function([], output)
mutated_mod['func_18415'] = func_18415
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17040_call = mod.get_global_var('func_17040')
func_17042_call = mutated_mod.get_global_var('func_17042')
call_18461 = func_17040_call()
call_18462 = func_17040_call()
func_13177_call = mod.get_global_var('func_13177')
func_13179_call = mutated_mod.get_global_var('func_13179')
call_18476 = relay.TupleGetItem(func_13177_call(), 0)
call_18477 = relay.TupleGetItem(func_13179_call(), 0)
func_13900_call = mod.get_global_var('func_13900')
func_13903_call = mutated_mod.get_global_var('func_13903')
const_18479 = relay.const([0.165318,9.900293,-5.210465,2.543135,-5.246028,8.917158,3.257395,-5.457274,-3.407811,9.267270,7.198263,3.702279,-4.027552,4.222087,-5.414611,-9.823815,-1.524309,7.776405,0.292576,-1.362429,-3.054972,2.703772,2.612687,8.013831,-7.141059,-6.342787,-3.011531,-3.875355,6.989060,-5.567148,-8.309849,-4.342282,-2.919521,7.069764,-2.588446,6.236975,6.767305,-5.991070,-1.868454,-2.409383,3.157401,-7.154771,-1.736303,-8.083253,-9.671172,3.727983,3.704294,-2.227003,-6.469927,5.305002,0.809611,9.797957,-7.183433,2.785722,5.594764,9.746497,-0.847532,-6.310364,2.610785,-8.015576], dtype = "float64")#candidate|18479|(60,)|const|float64
const_18480 = relay.const([-5,-6,-10,4,-3,-3,-5,10,9,3,-9,5,-3,10,-10,-2,9,-2,10,-5,6,-5,-8,8,-9,5,-4,-10,5,-6,9,2,5,-9,1,-7,1,-9,-6,-8,7,-7,-4,-7,-8,-4,10,-7,1,9,7,10,-9,6,-5,2,-8,1,5,10,1,-10,-3,8,-2,-7,-5,8,-5,9,1,-10,-10,4,10,-9,-2,-4,8,9,10,-3,-5,9,7,10,1,10,2,7,8,3,-8,4,-8,8,-1,3,3,-7,-3,-10,-8,8,-4,2,-2,3,3,-8,2,-8,-8,-10,6,3,4,-6,6,2,8,6,-10,-1,-6,-5,6,3,6,-7,9,-4,5,-5,1,-3,-1,10,-7,6,10,4,-5,-10,-10,-5,-6,2,-6,-2,-6,5,-1,-1,-6,4,8,-1,-6,-6,-7,3,-8,5,-4,3,10,-9,5,-1,-7,-8,-4,-8,2,-5,4,2,-7,-8,-6,2,10,-8,1,7,-8,-3,-4,5,4,4,-9,10,7,-10,-10,8,-4,-7,10,3,9,-2,-6,10,6,9,-2,3,10,10,-6,10,-9,-4,-8,-6,-2,1,-3,9,-5,-7,1,6,-3,-9,-9,10,-5,4,1,2,8,3,-6,-1,3,10,7,-3,-6,-3,1,-10,8,-2,6,2,7,5,8,-4,5,-4,2,5,10,-1,-1,-9,-7,-8,3,8,5,-3,1,-3,3,-1,5,-1,5,-7,-4,-3,-7,7,1,2,-9,1,4,6,-3,10,-4,2,4,-4,-6,-1,-10,-3,-4,-8,-9,2,-5,1,-7,6,4,1,-7,-8,3,-6,-8,3,3,4,4,-7,8,7,-1,-9,8,4,-4,-10,2,10,-4,-3,-8,-3,6,-9,8,-10,-8,-5,-8,4,9,-10,8,2,-5,-3,1,3,-3,-2,10,-1,10,5,-5,1,-10,7,-1,4,-4,-6,10,-2,4,6,-5,-10,-5,6,-3,5,10,-5,-3,-8,3,-1,5,-6,7,-3,-10,-1,10,-6,6,6,7,8,10,6,10,-6,1,4,-7,4,9,-4,-3,-2,6,-7,-1,3,-9,-5,-6,-5,-5,5,-5,-9,4,-5,-8,10,-7,6,-1,1,8,10,7,1,4,5,-6,-6,-2,1,-10,-3,-7,-6,10,8,-3,1,4,3,-9,7,-5,-8,-6,6,-10,-6,7,-3,1,-4,10,4,9,-1,-8,-6,3,-1,-4,8,7,1,8,-1,-9,-1,10,4,7,-10,6,-9,1,-2,10,-9,6,10,-7,-10,4,5,1,5,-5,-2,-10,-1,-2,6,-3,-8,6,-10,7,-7,-3,6,10,-9,-8,-5,1,-1,-7,6,3,-8,2,-10,-9,-1,-9,-6,2,-5,8,9,8,-6,-7,6,6,9,-1,10,-7,-2,-10,9,-6,2,-6,5,1,8,2,7,7,10,4,8,3,-10,-8,6,-3,8,-7,3,2,5,-5,-6,6,-10,7,2,8,2,-8,2,7,1,2,-4,-5,-10,1,3,-5,-10,3,-10,-5,-8,3,6,-9,3,-1,8,6,-6,-6,-8,4,-1,3,7,-8,-1,-7,10,-6,-7,-2,4,-3,-8,-3,-9,-6,3,6,5,7,6,5,-9,-10,9,-1,1,5,-4,6,5,-8,9,-2,-9,-2,-4,2,9,10,-4,-3,9,-6,8,8,4,-4,1,1,7,-6,2,2,10,1,7,2,-4,8,-2,7,-4,1,9,9,7,4,-3,-1,10,-10,-6,10,-1,-3,-7,-1,1,8,5,-3,3,10,-4,1,-4,1,-3,1,-1,9,5,9,-3,6,-4,-8,6,3,10,-6,-4,6,9,-5,4,-8,-5,4,4,6,9,-5,6,7,-9,-2,-9,2,8,6,-3,-8,1,-8,10,-5,10,3,5,1,2,-8,-2,7,-10,-9,-9,-3,8,7,5,-8,1,10,3,1,7,-6,-2,10,-8,-4,7,-9,-9,7,-10,9,-8,9,-2,-9,-10,7,-8,1,-5,4,2,-9,10,5,10,-3,-2,-2,-3,-1,-7,-2,-5,-2,-9,4,-10,4,-8,-3,-2,-9,-7,7,5,2,10,7,-8,-8,5,-10,-7,-8,1,5,6,-8,-8,-4,4,-3,1,-10,8,5,1,10,-8,-3,10,4,2,2,8,-3,3,9,-7,-10,-8,-10,-10,7,1,-9,-7,-8,7,-1,5,7,1,1,-4,2,-5,3,3,5,1,6,1,9,3,10,5,5,5,3,-6,-3,7,10,7,5,-1,6,-4,-7,4,-4,-9,6,-6,5,-3,-7,-6,2,2,1,-8,-5,-9,-9,2,-5,-6,-6,9,-6,-2,3,-10,3,-2,-7,-1,-3,5,-7,-7,1,-3,-6,8,5,7,-2,-4,-10,1,-7,10,-5,1,-5,4,2,10,-10,-1,2,2,4,-1,2,-4,6,-8,10,-3,-10,8,2,9,10,-6,8,8,-4,8,3,-5,-5,-8,-2,9,-7,3,9,-3,2,3,9,-1,2,-9,1,-4,8,-3,-4,-2,3,10,9,-1,5,2,5,7,5,2,1,-4,7,-9,2,-2,9,7,7,1,-3,-6,-8,-6,10,-1,-6,-9,-4,4,2,-1,9,-10,-7,10,6,8,10,9,4,10,6,-2,10,6,-3,-2,8,-1,-5,-3,-9,-4,-7,-9,-4,-10,10,1,-2,-1,-8,9,7,1,3,4,6,-10,-3,-3,-10,9,7,-2,-9,-3,-10,-2,-6,-10,8,-10,-1,7,-3,-3,3,5,-2,-8,1,-1,-8,9,-8,3,-2,8,5,-9,6,-1,6,9,-2,10,-2,6,5,-2,-4,-7,-7,-2,-10,3,5,-5,10,8,4,-9,10,-4,1,-6,-10,1,-7,2,-6,-7,8,9,-7,2,-6,6,6,-8,8,2,-6,5,-8,5,1,2,-4,-9,-9,-4,4,8,2,7,-2,5,-5,-5,1,-6,2,4,-10,-10,-4,3,-4,7,9,-3,-6,8,3,4,-3,-6,10,-4,-3,-3,-7,-6,-7,7,9,-6,-10,-8,-10,-7,-5,-2,5,7,-10,-8,7,10,-6,-2,6,-4,4,1,4,-9,-1,4,-6,-7,-1,3,-6,4,9,1,-3,2,-6,-1,1,7,-10,-1,2,-1,10,5,-9,1,4,-3,-6,-2,10,-3,3,4,-1,-10,-10,9,6,-7,2,1,10,1,-1,-8,-8,1,-3,5,-9,-8,-5,-10,-1,-6,-4,7,2,-10,2,-5,1,2,-2,-9,-1,3,-3,8,1,9,2,-1,-5,-9,-3,9,-2,-9,7,5,-4,-7,3,-3,9,2,-9,8,-4,-2,3,10,-2,10,-6,1,-5,-8,-4,-1,-4,-6,5,-6,-5,5,-10,3,-5,-1,-10,-2,-1,-1,1,7,6,8,-9,2,3,-2,-4,4,10,4,-8,-4,5,1,1,3,1,-9,-4,-4,8,-9,-3,-6,8,4,4,-4,-5,-9,5,4,-1,-8,-5,5,10,-10,7,-7,-5,3,-1,10,-4,-4,1,4,-2,1,7,-1,-10,-10,-6,-5,8,-10,-5,-4,-1,7,-6,-8,-5,4,-4,9,-5,-4,5,-1,5,1,2,-10,-6,7,-10,-10,3,-9,10,-5,-8,-7,-6,6,-8,3,6,4,-2,4,5,9,10,9,9,-9,10,-9,-4,8,-4,3,6,-4,8,10,-3,-5,10,-5,7,3,-9,4,9,-7,-6,-5,-8,1,-6,-1,-2,4,-2,1,4,-7,-8,8,6,2,-6,2,-5,-1,-6,4,1,-1,8,2,-10,6,-1,-7,2,7,-8,1,6,6,6,-1,7,-2,4,6,-3,1,-7,-1,8,6,-10,9,2,-7,7,-7,-8,9,3,7,10,-9,8,5,-9,4,-1,-5,-2,1,-10,4,-5,3,10,3,-10,6,-4,8,5,5,6,-9,4,-10,6,4,8,-1,-7,-10,-9,-7,-1,-8,-6,4,-7,-2,3,-9,5,2,1,4,10,-7,2,1,10,10,6,-1,7,8,-7,-8,-10,-8,6,1,7,4,-5,-3,-8,-2,-6,-9,-8,2,-4,8,1,-7,7,2,5,3,2,-4,8,-5,10,-9,3,-4,10,-2,-9,9,-6,-1,-6,10,10,-6,-1,7,7,2], dtype = "uint8")#candidate|18480|(1560,)|const|uint8
call_18478 = relay.TupleGetItem(func_13900_call(relay.reshape(const_18479.astype('float64'), [60,]), relay.reshape(const_18480.astype('uint8'), [6, 260]), ), 1)
call_18481 = relay.TupleGetItem(func_13903_call(relay.reshape(const_18479.astype('float64'), [60,]), relay.reshape(const_18480.astype('uint8'), [6, 260]), ), 1)
output = relay.Tuple([call_18461,call_18476,call_18478,const_18479,const_18480,])
output2 = relay.Tuple([call_18462,call_18477,call_18481,const_18479,const_18480,])
func_18487 = relay.Function([], output)
mod['func_18487'] = func_18487
mod = relay.transform.InferType()(mod)
mutated_mod['func_18487'] = func_18487
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18487_call = mutated_mod.get_global_var('func_18487')
call_18488 = func_18487_call()
output = call_18488
func_18489 = relay.Function([], output)
mutated_mod['func_18489'] = func_18489
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12457_call = mod.get_global_var('func_12457')
func_12458_call = mutated_mod.get_global_var('func_12458')
call_18510 = relay.TupleGetItem(func_12457_call(), 0)
call_18511 = relay.TupleGetItem(func_12458_call(), 0)
func_12265_call = mod.get_global_var('func_12265')
func_12266_call = mutated_mod.get_global_var('func_12266')
call_18532 = relay.TupleGetItem(func_12265_call(), 0)
call_18533 = relay.TupleGetItem(func_12266_call(), 0)
output = relay.Tuple([call_18510,call_18532,])
output2 = relay.Tuple([call_18511,call_18533,])
func_18555 = relay.Function([], output)
mod['func_18555'] = func_18555
mod = relay.transform.InferType()(mod)
output = func_18555()
func_18556 = relay.Function([], output)
mutated_mod['func_18556'] = func_18556
mutated_mod = relay.transform.InferType()(mutated_mod)
const_18595 = relay.const([[[-1.753584,2.956809,-9.173889,3.653442,0.547690,2.225407],[5.355965,-9.354542,1.181261,-1.984155,6.691858,3.144848],[8.851304,5.896032,3.341386,-3.338171,9.472837,3.936401],[-3.956346,8.050131,7.715867,2.914758,-6.835077,8.516936],[7.122676,9.635311,4.928230,-9.591373,-9.252317,-6.546908],[9.968880,-9.056905,-6.405749,-6.339680,-8.427469,7.404786],[-0.351947,-8.175427,-6.579015,-2.332132,-5.054413,-9.899365],[-4.779988,-2.991320,2.356194,-5.801760,3.347406,1.020865],[3.665954,0.649150,4.036063,6.034625,4.934109,-2.129447],[1.280587,0.786404,1.007463,5.786310,8.795721,-1.590155],[2.964194,8.388761,1.067847,-5.895016,-9.258479,-4.671817],[-3.071979,9.002715,-5.462014,-0.946576,-7.794242,7.915437],[9.597421,7.698684,-8.519800,8.649643,-4.714679,-5.857197],[4.601207,-7.511048,-6.084421,7.392700,-3.491439,5.757294],[5.624607,2.390166,9.772779,2.430213,8.077204,0.669917],[-9.132648,8.218977,3.961683,7.790472,5.747374,-5.156586]],[[-2.355896,-3.557528,-5.074477,6.935306,9.276714,0.769521],[0.624621,-9.982981,1.466972,-6.209017,-5.358245,6.995334],[-9.650013,8.558284,-9.278307,3.258516,0.050779,-1.644668],[6.956956,3.492342,-8.716042,-2.429381,5.373946,-4.723271],[-0.014196,0.418551,1.757939,1.559754,6.257729,7.502017],[-0.208798,-8.312435,-6.549908,-6.291666,8.894361,2.859401],[-3.501004,7.200193,-8.604793,5.887890,0.446530,9.635617],[5.739555,-7.586598,8.187595,-0.148732,-8.962669,-3.799556],[6.055083,9.339780,-8.395245,-0.758686,-6.390004,6.259432],[-4.778130,9.315263,8.380626,-7.552117,9.519972,0.955515],[-1.634013,6.968613,-5.868352,5.261005,-6.535080,-9.459411],[2.134370,0.051957,9.474306,-8.706887,3.325307,5.208054],[5.377250,6.149372,-7.398815,1.613414,0.869760,0.740736],[-3.715403,7.811835,3.041219,-4.174413,5.859205,-1.061453],[-8.627031,-7.208626,1.105844,-7.003028,6.184496,9.478028],[-1.994399,-4.055468,4.189310,5.348438,-3.303128,-5.441828]]], dtype = "float32")#candidate|18595|(2, 16, 6)|const|float32
uop_18596 = relay.rsqrt(const_18595.astype('float32')) # shape=(2, 16, 6)
output = uop_18596
output2 = uop_18596
func_18608 = relay.Function([], output)
mod['func_18608'] = func_18608
mod = relay.transform.InferType()(mod)
output = func_18608()
func_18609 = relay.Function([], output)
mutated_mod['func_18609'] = func_18609
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18487_call = mod.get_global_var('func_18487')
func_18489_call = mutated_mod.get_global_var('func_18489')
call_18614 = relay.TupleGetItem(func_18487_call(), 2)
call_18615 = relay.TupleGetItem(func_18489_call(), 2)
func_12457_call = mod.get_global_var('func_12457')
func_12458_call = mutated_mod.get_global_var('func_12458')
call_18617 = relay.TupleGetItem(func_12457_call(), 1)
call_18618 = relay.TupleGetItem(func_12458_call(), 1)
output = relay.Tuple([call_18614,call_18617,])
output2 = relay.Tuple([call_18615,call_18618,])
func_18628 = relay.Function([], output)
mod['func_18628'] = func_18628
mod = relay.transform.InferType()(mod)
output = func_18628()
func_18629 = relay.Function([], output)
mutated_mod['func_18629'] = func_18629
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18555_call = mod.get_global_var('func_18555')
func_18556_call = mutated_mod.get_global_var('func_18556')
call_18661 = relay.TupleGetItem(func_18555_call(), 0)
call_18662 = relay.TupleGetItem(func_18556_call(), 0)
output = relay.Tuple([call_18661,])
output2 = relay.Tuple([call_18662,])
func_18665 = relay.Function([], output)
mod['func_18665'] = func_18665
mod = relay.transform.InferType()(mod)
mutated_mod['func_18665'] = func_18665
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18665_call = mutated_mod.get_global_var('func_18665')
call_18666 = func_18665_call()
output = call_18666
func_18667 = relay.Function([], output)
mutated_mod['func_18667'] = func_18667
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16502_call = mod.get_global_var('func_16502')
func_16504_call = mutated_mod.get_global_var('func_16504')
call_18692 = func_16502_call()
call_18693 = func_16502_call()
func_4914_call = mod.get_global_var('func_4914')
func_4920_call = mutated_mod.get_global_var('func_4920')
var_18703 = relay.var("var_18703", dtype = "uint16", shape = (192, 1))#candidate|18703|(192, 1)|var|uint16
var_18704 = relay.var("var_18704", dtype = "uint32", shape = (2, 640))#candidate|18704|(2, 640)|var|uint32
var_18705 = relay.var("var_18705", dtype = "float64", shape = (35,))#candidate|18705|(35,)|var|float64
call_18702 = relay.TupleGetItem(func_4914_call(relay.reshape(var_18703.astype('uint16'), [16, 3, 4]), relay.reshape(var_18703.astype('uint16'), [16, 3, 4]), relay.reshape(var_18704.astype('uint32'), [1280,]), relay.reshape(var_18705.astype('float64'), [35,]), ), 4)
call_18706 = relay.TupleGetItem(func_4920_call(relay.reshape(var_18703.astype('uint16'), [16, 3, 4]), relay.reshape(var_18703.astype('uint16'), [16, 3, 4]), relay.reshape(var_18704.astype('uint32'), [1280,]), relay.reshape(var_18705.astype('float64'), [35,]), ), 4)
bop_18711 = relay.bitwise_xor(call_18702.astype('uint32'), var_18703.astype('uint32')) # shape=(192, 35)
bop_18714 = relay.bitwise_xor(call_18706.astype('uint32'), var_18703.astype('uint32')) # shape=(192, 35)
func_14393_call = mod.get_global_var('func_14393')
func_14395_call = mutated_mod.get_global_var('func_14395')
call_18720 = relay.TupleGetItem(func_14393_call(), 0)
call_18721 = relay.TupleGetItem(func_14395_call(), 0)
func_5578_call = mod.get_global_var('func_5578')
func_5582_call = mutated_mod.get_global_var('func_5582')
call_18726 = func_5578_call(relay.reshape(call_18692.astype('uint32'), [16, 16, 2]), relay.reshape(call_18692.astype('uint32'), [16, 16, 2]), )
call_18727 = func_5578_call(relay.reshape(call_18692.astype('uint32'), [16, 16, 2]), relay.reshape(call_18692.astype('uint32'), [16, 16, 2]), )
uop_18770 = relay.rsqrt(bop_18711.astype('float32')) # shape=(192, 35)
uop_18772 = relay.rsqrt(bop_18714.astype('float32')) # shape=(192, 35)
output = relay.Tuple([call_18692,var_18704,var_18705,call_18720,call_18726,uop_18770,])
output2 = relay.Tuple([call_18693,var_18704,var_18705,call_18721,call_18727,uop_18772,])
func_18774 = relay.Function([var_18703,var_18704,var_18705,], output)
mod['func_18774'] = func_18774
mod = relay.transform.InferType()(mod)
mutated_mod['func_18774'] = func_18774
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18774_call = mutated_mod.get_global_var('func_18774')
var_18776 = relay.var("var_18776", dtype = "uint16", shape = (192, 1))#candidate|18776|(192, 1)|var|uint16
var_18777 = relay.var("var_18777", dtype = "uint32", shape = (2, 640))#candidate|18777|(2, 640)|var|uint32
var_18778 = relay.var("var_18778", dtype = "float64", shape = (35,))#candidate|18778|(35,)|var|float64
call_18775 = func_18774_call(var_18776,var_18777,var_18778,)
output = call_18775
func_18779 = relay.Function([var_18776,var_18777,var_18778,], output)
mutated_mod['func_18779'] = func_18779
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16072_call = mod.get_global_var('func_16072')
func_16073_call = mutated_mod.get_global_var('func_16073')
call_18789 = relay.TupleGetItem(func_16072_call(), 0)
call_18790 = relay.TupleGetItem(func_16073_call(), 0)
func_16749_call = mod.get_global_var('func_16749')
func_16750_call = mutated_mod.get_global_var('func_16750')
call_18795 = relay.TupleGetItem(func_16749_call(), 1)
call_18796 = relay.TupleGetItem(func_16750_call(), 1)
uop_18820 = relay.log2(call_18795.astype('float32')) # shape=(6, 3, 8)
uop_18822 = relay.log2(call_18796.astype('float32')) # shape=(6, 3, 8)
func_16594_call = mod.get_global_var('func_16594')
func_16596_call = mutated_mod.get_global_var('func_16596')
call_18865 = relay.TupleGetItem(func_16594_call(), 0)
call_18866 = relay.TupleGetItem(func_16596_call(), 0)
func_11798_call = mod.get_global_var('func_11798')
func_11800_call = mutated_mod.get_global_var('func_11800')
call_18885 = relay.TupleGetItem(func_11798_call(), 0)
call_18886 = relay.TupleGetItem(func_11800_call(), 0)
func_11776_call = mod.get_global_var('func_11776')
func_11781_call = mutated_mod.get_global_var('func_11781')
var_18895 = relay.var("var_18895", dtype = "float64", shape = (1, 35))#candidate|18895|(1, 35)|var|float64
const_18896 = relay.const([-4.422559,9.437685,2.149140,-8.447408,-9.898695,-4.586892,-0.281276,-6.564323,7.963010,-2.128068,5.119042,-1.783567,-1.106207,3.248959,0.762432,-9.401577,-5.161320,-0.512249,4.946367,0.436714,-6.502524,-1.396813,-3.844855,-5.491693,3.108011,5.873822,8.782388,-4.231970,3.836882,6.621206,-2.228492,8.709172,-7.058723,-7.344958,-6.047540,8.113266,-2.393839,0.491415,-9.810596,-1.202555,-3.118910,2.906111,4.841059,-7.630457,8.642794,-6.812776,1.722657,-3.358451,5.441136,4.446136,-3.122109,-0.900856,-9.589977,-3.515337,-7.657200,-8.103181,-1.668950,-0.989218,0.449028,1.238518,0.569852,-2.428948,6.493302,-4.596488,-5.225065,-0.308959,-2.920286,8.369779,-8.832400,1.958616,-9.347411,-4.263143,9.472734,-0.721470,2.902000,-8.631109,5.272719,2.796807,0.440943,-9.805316,5.317908,9.386910,7.523143,-4.912106,-1.303683,-6.142841,8.130316,1.342845,-9.196515,2.545992,4.688474,-7.766890,-6.944833,0.817493,1.431296,8.276969,-2.693817,-2.412726,1.315681,-2.801391,-5.095616,-1.874393,6.212182,1.317903,-2.022831,0.361897,-4.985341,-2.108182,8.646046,-1.051949,6.662557,7.818968,-9.692411,-2.699770,-1.022984,7.929275,9.640956,-6.711411,-8.723302,-7.752342,-1.271472,-5.379307,3.003443,4.726198,5.405625,6.991188,-2.179628,-9.204494,-5.958819,-6.018954,6.171948,-9.753422,-1.647672,3.705294,-4.166793,1.965957,3.094837,6.182509,-4.711240,3.335793], dtype = "float64")#candidate|18896|(140,)|const|float64
var_18897 = relay.var("var_18897", dtype = "float32", shape = (224,))#candidate|18897|(224,)|var|float32
const_18898 = relay.const([-8,-10,7,-4,-3,1,-1,-4,1,-9,-7,-6,-8,-10,2,5,-6,6,3,10,-1,9,-1,-6,4,7,2,-10,4,7,9,5,-8,-3,-3,8,-2,-7,-10,5,-8,-5,-8,1,7,9,1,-3,6,-2,1,-4,-1,-7,-2,4,7,-10,-6,-8,-2,-9,10,4,10,-7,-9,5,10,8,-6,-3,4,1,-8,-3,5,-3,-5,-3,2,7,8,9,6,1,-4,7,10,9,7,6,3,-7,6,-3,-9,-10,-2,7,8,10,-4,1,-2,-2,10,1,9,2,-9,4,3,6,-4,-1,-3,-6,7,3,-8,8,-4,3,-8,-1,-8,-4,-10,6,3,8,-10,5,4,7,-4,9,-6,3,7,-1,-10,8,3,-8,3,4,-2,3,6,5,-8,8,-9,10,-7,-1,-5,-9,-4,7,-2,-3,10,8,7,-8,10,-9,-8,-2,-9,2,-5,2,-7,-7,10,5,7,7,-7,-8,-2,-5,-5,5,-2,-8,9,6,-1,-7,6,-2,-5,8,-6,8,-5,-8,2,6,2,2,-8,-7,3,9,-4,-4,-1,-3,-9,7,-6,6,-10,-3,-8,2,-3,-4,-3,-8,5,-7,4,-3,1,-9,-5,-4,-9,7,-1,-3,10,-3,-2,1,4,-6,-10,-3,1,9,-9,2,1,7,-8,8,-10,2,-3,1,-3,-8,-6,-3,5,2,4,-3,-3,8,-1,-1,9,-2,8,-2,10,1,10,-2,5,-10,10,-5,2,-8,10,-3,-5,-1,-10,-2,-10,-6,-7,5,4,3,7,-9,-1,-3,6,-8,-4,-4,10,3,-8,-10,7,9,1,7,1,-8,-5,-3,-8,4,2,6,-1,-3,8,-6,-1,10,6,-9,-7,9,-9,-5,-5,-10,-4,-8,5,-5,-7,2,5,-9,1,-8,-4,-8,-1,-9,-1,-3,3,-1,-5,3,-5,-9,7,1,-5,-6,-8,-9,9,-7,-6,5,-4,-10,-3,2,-8,-8,10,-2,-2,3,3,1,3,-10,10,8,2,-4,1,-2,-10,3,-4,6,-3,6,-2,-8,6,-4,5,-10,-10,-3,2,-7,10,2,-4,7,-7,3,-9,4,1,2,10,5,8,-8,-3,-3,-4,6,3,-5,-6,10,9,3,-4,6,-8,-3,-8,5,7,-6,-4,8,8,8,4,-1,3,-5,-2,-2,-3,-5,5,6,-9,-2,-7,-8,6,8,5,-2,-7,7,9,8,-4,5,-4,-1,3,3,4,4,-9,-9,-4,-5,8,-8,1,9,10,7,4,4,3,-9,3,8,-4,8,-8,8,-5,4,-4,-3,10,-6,-10,-4,-10,-2,4,4,-9,-7,5,4,2,8,-5,-2,-3,-7,-1,-7,-2,5,-9,6,-3,-4,8,8,7,8,7,5,8,-2,-3,-1,8,-2,7,4,1,-8,-7,1,-10,-6,-8,-6,2,-7,-5,-3,6,-9,-5,3,-2,-7,7,2,8,6,-8,-4,10,-7,-10,9,8,-1,2,1,6,4,-7,-5,-4,-10,-3,5,4,10,2,1,7,3,7,5,1,7,6,2,2,4,-4,3,-3,-5,-4,7,8,3,3,9,5,-3,-9,-1,-6,-8,-6,-10,6,3,4,1,9,7,10,-5,3,8,-2,-3,-5,-1,-4,1,-8,7,-4,4,-2,5,-7,1,-10,-2,-9,3,5,-7,4,-8,2,-2,4,2,-7,10,-9,5,-9,6,-3,-1,10,7,6,6,-1,-6,4,-2,7,8,4,-7,-2,10,1,-4,-9,-7,-8,-5,-1,5,1,10,-1,3,-4,8,-3,-3,-10,-7,10,6,-7,7,3,5,1,-9,-4,10,5,5,-8,4,3,-9,-5,1,9,2,-3,-6,-4,9,-9,7,-10,-2,9,8,-9,-9,3,8,9,4,9,-6,-6,3,5,9,-2,-4,9,7,1,4,-5,8,6,-5,1,-10,-8,2,2,-1,-4,-7,8,-3,-9,3,-3,7,-4,-4,4,3,8,-9,9,-7,6,-8,-10,-3,7,-5,8,10,4,6,10,2,-7,10,-1,-8,3,-1,-6,5,10,-4,10,10,-7,-2,8,-5,-6,-10,2,-4,-6,1,7,5,-6,8,2,9,-6,8,-8,-10,8,1,-2,8,-10,-9,-6,8,5,7,-6,1,-9,8,2,2,-2,3,-8,1,9,-6,-8,7,10,3,8,8,2,7,-7,-5,1,-2,-8,-8,-5,-4,-9,-6,-2,-5,-2,-2,-10,-8,5,6,3,7,-1,10,1,8,-2,-1,3,9,-10,8,7,8,1,-9,2,-6,5,8,10,8,-10,10,-4,7,-7,5,-2,7,-7,-10,6,-1,-3,-7,-6,-9,-3,-10,-6,-2,-3,-9,9,10,2,-6,-7,-9,7,5,2,-10,1,-3,-8,-3,1,-5,8,8,-7,-8,1,-5,5,4,4,-2,5,-5,10,3,8,4,5,-7,6,7,5,10,1,-9,7,1,7,-4,-2,10,4,7,4,2,-9,1,-10,-6,-2,-6,-6,-2,1,-10,2,-4,-2,6,4,9,-6,9,-9,4,10,4,-7,7,-4,-2,8,5,-6,9,-10,5,-9,9,-9,-1,5,3,2,1,-10,2,-8,8,-9,-3,-5,4,-3,2,-10,-1,8,8,-5,-4,3,-2,5,6,-7,5,-9,6,4,4,-10,-8,8,-6,6,-7,-8,-1,-9,8,-5,-9,-2,6,4,-7,-4,1,-10,6,-1,-6,-4,-3,-3,10,-4,2,-6,9,8,-4,-10,6,-4,-7,-7,-3,1,3,-8,3,4,7,4,9,3,-8,-8,6,-9,6,-7,9,6,-3,-5,-6,10,10,-1,-9,2,-9,4,-4,-8,10,-1,5,-3,2,3,-8,1,-8,-6,-7,6,3,-1,4,-7,-5,5,6,6,-7,-7,-1,-2,-1,10,9,3,-8,8,4,-8,6,8,-3,-1,5,-5,6,-7,-6,-4,5,-8,4,2,-5,-8,6,-2,-2,1,-1,-6,-2,4,2,-6,9,-7,-3,-4,3,-9,8,10,-6,-9,-5,-6,8,8,1,-6,-9,-5,3,-1,1,-5,-1,1,6,-6,7,-2,1,-6,4,-5,6,-7,9,-5,-10,-9,7,-8,-2,-6,6,5,-7,-2,-2,6,-6,6,5,-4,-4,-5,5,-6,10,5,9,7,-10,9,-7,9,-9,9,-8,8,5,5,-9,-6,-2,-8,10,6,-4,3,9,-5,9,-4,-8,-1,10,-3,-6,9,-2,8,2,-4,-9,10,-1,10,-10,8,-9,-10,-6,9,4,1,-6,-1,-3,7,-4,-3,5,-4,8,-2,3,-9,9,-3,5,-10,-3,1,6,9,6,-4,5,-5,-1,3,1,7,7,4,3,5,4,1,4,9,-2,-9,4,2,-1,1,7,3,-7,-8,-10,4,8,4,-5,-2,-10,6,6,-9,-4,-10,-10,5,-1,-10,7,-5,-9,-9,-5,-3,-3,-9,10,-6,10,-7,1,10,6,-5,3,-8,-10,-9,7,10,-5,-8,6,-1,-2,-9,-10,-6,-10,-9,-10,7,3,5,-10,-1,5,-1,-3,-1,1,-9,10,7,-6,-3,1,-6,-6,6,9,2,-7,7,7,7,8,9,1,8,-10,4,10,8,5,3,-3,8,-2,-2,-2,7,6,8,1,5,-8,7,-8,-6,-10,7,-8,3,-9,-8,-5,1,-10,9,6,7,10,3,-8,1,2,9,-2,-7,-9,-9,10,6,-8,5,6,7,-3,-5,1,-7,3,-10,-10,3,-4,4,2,-5,-4,4,2,7,2,-8,-8,-6,3,-6,-5,-4,3,2,-9,-8,9,4,-5,-9,-5,-2,4,-3,-3,1,8,-4,3,-8,5,5,10,-7,2,-2,3,-9,-1,3,1,-10,9,-10,4,-5,4,4,1,8,5,2,5,4,-4,-10,1,4,7,-10,-1,-9,7,8,-5,5,6,8,9,-7,-9,7,-6,7,4,4,6,-10,-9,5,5,-3,-7,4,5,10,8,-3,6,-10,9,6,9,10,-4,-9,-5,4,3,10,9,1,5,4,4,-4,7,-10,-5,2,5,2,6,-2,2,-9,9,-8,6,8,5,-4,-1,1,-7,9,6,10,7,-3,1,2,3,-6,4,-8,-7,3,9,6,-7], dtype = "uint8")#candidate|18898|(1560,)|const|uint8
call_18894 = relay.TupleGetItem(func_11776_call(relay.reshape(var_18895.astype('float64'), [35,]), relay.reshape(const_18896.astype('float64'), [5, 28]), relay.reshape(var_18897.astype('float32'), [4, 8, 7]), relay.reshape(const_18898.astype('uint8'), [1560,]), ), 5)
call_18899 = relay.TupleGetItem(func_11781_call(relay.reshape(var_18895.astype('float64'), [35,]), relay.reshape(const_18896.astype('float64'), [5, 28]), relay.reshape(var_18897.astype('float32'), [4, 8, 7]), relay.reshape(const_18898.astype('uint8'), [1560,]), ), 5)
func_15346_call = mod.get_global_var('func_15346')
func_15350_call = mutated_mod.get_global_var('func_15350')
call_18901 = relay.TupleGetItem(func_15346_call(relay.reshape(var_18895.astype('float64'), [35,]), relay.reshape(const_18896.astype('float64'), [140,]), ), 3)
call_18902 = relay.TupleGetItem(func_15350_call(relay.reshape(var_18895.astype('float64'), [35,]), relay.reshape(const_18896.astype('float64'), [140,]), ), 3)
func_14393_call = mod.get_global_var('func_14393')
func_14395_call = mutated_mod.get_global_var('func_14395')
call_18908 = relay.TupleGetItem(func_14393_call(), 2)
call_18909 = relay.TupleGetItem(func_14395_call(), 2)
output = relay.Tuple([call_18789,uop_18820,call_18865,call_18885,call_18894,var_18895,const_18896,var_18897,const_18898,call_18901,call_18908,])
output2 = relay.Tuple([call_18790,uop_18822,call_18866,call_18886,call_18899,var_18895,const_18896,var_18897,const_18898,call_18902,call_18909,])
func_18936 = relay.Function([var_18895,var_18897,], output)
mod['func_18936'] = func_18936
mod = relay.transform.InferType()(mod)
var_18937 = relay.var("var_18937", dtype = "float64", shape = (1, 35))#candidate|18937|(1, 35)|var|float64
var_18938 = relay.var("var_18938", dtype = "float32", shape = (224,))#candidate|18938|(224,)|var|float32
output = func_18936(var_18937,var_18938,)
func_18939 = relay.Function([var_18937,var_18938,], output)
mutated_mod['func_18939'] = func_18939
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17383_call = mod.get_global_var('func_17383')
func_17384_call = mutated_mod.get_global_var('func_17384')
call_18971 = relay.TupleGetItem(func_17383_call(), 0)
call_18972 = relay.TupleGetItem(func_17384_call(), 0)
func_14792_call = mod.get_global_var('func_14792')
func_14794_call = mutated_mod.get_global_var('func_14794')
call_18981 = relay.TupleGetItem(func_14792_call(), 0)
call_18982 = relay.TupleGetItem(func_14794_call(), 0)
output = relay.Tuple([call_18971,call_18981,])
output2 = relay.Tuple([call_18972,call_18982,])
func_18996 = relay.Function([], output)
mod['func_18996'] = func_18996
mod = relay.transform.InferType()(mod)
mutated_mod['func_18996'] = func_18996
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18996_call = mutated_mod.get_global_var('func_18996')
call_18997 = func_18996_call()
output = call_18997
func_18998 = relay.Function([], output)
mutated_mod['func_18998'] = func_18998
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16287_call = mod.get_global_var('func_16287')
func_16288_call = mutated_mod.get_global_var('func_16288')
call_19054 = relay.TupleGetItem(func_16287_call(), 0)
call_19055 = relay.TupleGetItem(func_16288_call(), 0)
output = call_19054
output2 = call_19055
func_19071 = relay.Function([], output)
mod['func_19071'] = func_19071
mod = relay.transform.InferType()(mod)
output = func_19071()
func_19072 = relay.Function([], output)
mutated_mod['func_19072'] = func_19072
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17806_call = mod.get_global_var('func_17806')
func_17807_call = mutated_mod.get_global_var('func_17807')
call_19115 = relay.TupleGetItem(func_17806_call(), 0)
call_19116 = relay.TupleGetItem(func_17807_call(), 0)
func_16594_call = mod.get_global_var('func_16594')
func_16596_call = mutated_mod.get_global_var('func_16596')
call_19117 = relay.TupleGetItem(func_16594_call(), 0)
call_19118 = relay.TupleGetItem(func_16596_call(), 0)
func_12182_call = mod.get_global_var('func_12182')
func_12184_call = mutated_mod.get_global_var('func_12184')
call_19119 = func_12182_call()
call_19120 = func_12182_call()
func_16427_call = mod.get_global_var('func_16427')
func_16428_call = mutated_mod.get_global_var('func_16428')
call_19153 = relay.TupleGetItem(func_16427_call(), 1)
call_19154 = relay.TupleGetItem(func_16428_call(), 1)
func_12903_call = mod.get_global_var('func_12903')
func_12904_call = mutated_mod.get_global_var('func_12904')
call_19155 = func_12903_call()
call_19156 = func_12903_call()
func_3245_call = mod.get_global_var('func_3245')
func_3248_call = mutated_mod.get_global_var('func_3248')
const_19160 = relay.const([-3.340387,8.682948,-5.351598,-1.009607,9.943589,-3.840583,5.714755,5.855940,6.347614,-9.257676,7.455299,-3.107996,-8.949525,8.657369,0.125952,-1.840736,7.542029,8.477540,-0.696567,-0.429211,-2.794320,-7.598710,-5.292205,2.354425,5.034085,-6.901811,-4.413618,9.329630,6.628598,-1.351613,7.194915,4.786319,-0.541388,3.119848,-3.003654,-6.872728,-7.148803,-8.752139,-9.399963,6.407700,2.209046,-3.178299,-1.562544,-4.213724,-2.058493,-1.445904,0.891613,-7.563094,6.468653,-9.892821,2.404762,-3.092978,-7.162858,5.364299,-0.586612,-1.506206,-2.433638,0.061523,-3.443131,-0.525064,-0.215320,7.086007,-7.935398,0.815506,2.676531,7.862737,-1.778100,-2.073894,-3.012207,-9.346699,-8.784474,-1.927293,9.355074,-7.889004,1.521218,4.637932,6.816909,-5.125800,-3.474602,1.399108,1.868855,7.955854,-2.703902,-7.645043,4.581624,2.602979,-9.312224,-5.365079,0.177058,9.506449,3.176384,-2.663555,1.789922,6.999598,-9.497362,1.453310,9.373997,-1.439711,7.781311,1.222773,9.192572,-3.945550,-1.579505,3.168396,9.796502,6.151371,4.384012,-4.100781,-4.585423,6.197549,-4.848166,-3.367102,4.338780,-2.702102,-7.897670,5.139293,-8.407581,8.569869,-0.965338,7.822856,6.316421,-8.580009,-5.318989,-8.299012,-8.951613,-9.656779,-0.327625,1.386916,8.846247,-7.936563,5.972330,4.027561,-8.601097,-3.530000,0.511214,-4.870057,-2.838703,-3.704448,0.135454,0.909722], dtype = "float64")#candidate|19160|(140,)|const|float64
call_19159 = relay.TupleGetItem(func_3245_call(relay.reshape(const_19160.astype('float64'), [7, 2, 10]), relay.reshape(const_19160.astype('float64'), [7, 2, 10]), ), 0)
call_19161 = relay.TupleGetItem(func_3248_call(relay.reshape(const_19160.astype('float64'), [7, 2, 10]), relay.reshape(const_19160.astype('float64'), [7, 2, 10]), ), 0)
output = relay.Tuple([call_19115,call_19117,call_19119,call_19153,call_19155,call_19159,const_19160,])
output2 = relay.Tuple([call_19116,call_19118,call_19120,call_19154,call_19156,call_19161,const_19160,])
func_19162 = relay.Function([], output)
mod['func_19162'] = func_19162
mod = relay.transform.InferType()(mod)
mutated_mod['func_19162'] = func_19162
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19162_call = mutated_mod.get_global_var('func_19162')
call_19163 = func_19162_call()
output = call_19163
func_19164 = relay.Function([], output)
mutated_mod['func_19164'] = func_19164
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18996_call = mod.get_global_var('func_18996')
func_18998_call = mutated_mod.get_global_var('func_18998')
call_19209 = relay.TupleGetItem(func_18996_call(), 1)
call_19210 = relay.TupleGetItem(func_18998_call(), 1)
output = call_19209
output2 = call_19210
func_19211 = relay.Function([], output)
mod['func_19211'] = func_19211
mod = relay.transform.InferType()(mod)
mutated_mod['func_19211'] = func_19211
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19211_call = mutated_mod.get_global_var('func_19211')
call_19212 = func_19211_call()
output = call_19212
func_19213 = relay.Function([], output)
mutated_mod['func_19213'] = func_19213
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16484_call = mod.get_global_var('func_16484')
func_16486_call = mutated_mod.get_global_var('func_16486')
call_19239 = relay.TupleGetItem(func_16484_call(), 0)
call_19240 = relay.TupleGetItem(func_16486_call(), 0)
func_12775_call = mod.get_global_var('func_12775')
func_12777_call = mutated_mod.get_global_var('func_12777')
const_19244 = relay.const([[7.860026],[4.615645],[5.036395],[9.561900],[6.971620],[-0.080660],[-2.236720],[0.639290],[-5.486758],[7.526153],[-1.095080],[-0.399619],[-2.398507],[4.256838],[-7.827448],[3.264147],[-8.367439],[3.272337],[-2.048460],[4.851840],[6.507538],[-4.800449],[7.000709],[-7.622768],[-6.562190],[-7.164093],[0.560049],[9.917474],[-5.861929],[-1.130615],[-0.816808],[-5.587576],[-5.883481],[-0.424451],[-2.834389],[-5.090258],[9.529092],[-3.011961],[2.767053],[5.300782],[-8.826787],[-7.560705],[-7.059705],[-8.842800],[2.219993],[-3.482187],[-7.831937],[-9.111603],[-7.101890],[9.227218],[-5.618714],[-7.837061],[-2.540835],[-6.632625],[0.086411],[4.692815],[3.876504],[4.340872],[-1.873462],[-0.439243],[-1.299569],[9.494832],[-8.851824],[-6.211851],[-3.895788],[3.734203],[9.276435],[-6.334522],[-3.315905],[0.129638],[-6.538431],[-4.729908],[3.175197],[-8.016428],[5.502239],[3.309343],[8.131056],[-6.792033],[-6.888648],[-0.149601],[7.363431],[-4.830546],[-8.634374],[-4.121560],[2.634170],[-6.997084],[2.047808],[-0.860895],[6.220818],[-2.365594],[6.517444],[-3.800190],[-9.094499],[-9.420563],[7.647468],[6.319438],[2.931455],[-0.882251],[-4.393457],[-4.418554],[-9.066706],[-6.360156],[7.526083],[-1.105770],[8.450623],[8.758597],[-5.978140],[7.858463],[0.641220],[-3.534930],[-1.993700],[6.331237],[0.823496],[0.774224],[-1.693409],[0.512995],[3.808465],[-7.152609],[-2.730766],[3.810025],[2.312973],[1.960933],[-0.466783],[-9.202080],[-9.780384],[4.425650],[-4.290209],[-4.153306],[-5.549129],[-2.176907],[-4.355899],[2.663630],[7.540134],[-0.953888],[9.686196],[2.496072],[9.036177],[-8.811874],[7.682250],[0.205875],[8.232251],[-9.704343],[8.549988],[0.408405]], dtype = "float32")#candidate|19244|(144, 1)|const|float32
call_19243 = relay.TupleGetItem(func_12775_call(relay.reshape(const_19244.astype('float32'), [6, 3, 8])), 2)
call_19245 = relay.TupleGetItem(func_12777_call(relay.reshape(const_19244.astype('float32'), [6, 3, 8])), 2)
bop_19253 = relay.logical_or(const_19244.astype('bool'), call_19239.astype('bool')) # shape=(144, 140)
bop_19256 = relay.logical_or(const_19244.astype('bool'), call_19240.astype('bool')) # shape=(144, 140)
const_19284 = relay.const([[True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False],[False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,False,True],[True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False],[True,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,False,False],[False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True],[False,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True],[False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,False,True],[False,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True],[True,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False],[True,False,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True],[True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True],[True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False],[False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False],[True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,False],[False,True,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,True,True],[True,False,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False],[True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False],[True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False],[False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False],[True,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True],[False,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,False,False],[True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True],[False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,True],[True,True,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False],[False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,True,True],[False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True],[False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False],[True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True],[True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,False],[False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True],[False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True],[True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True],[False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,False],[True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True],[True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,False,True],[True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False],[False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True],[False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,False,False,False,False],[True,True,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True],[True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,False,True],[True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True],[False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True],[False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False],[False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,False,True],[True,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True],[False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False],[True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False],[False,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,True,True,False],[True,False,True,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,False,True],[True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,False],[True,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,False],[False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,True],[True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False],[True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,True,True],[True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False],[True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True],[True,True,True,True,False,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False],[False,True,True,False,True,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False],[False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True],[True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False],[False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False],[True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,False],[True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,True,False],[False,False,False,False,False,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False],[False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False],[True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False],[True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,False],[True,False,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False],[True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False],[True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,True,False,False,True,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,False],[True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True],[False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True],[False,True,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False],[False,False,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,True],[False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True],[False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,False,True],[False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False],[True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False],[False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True],[False,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False],[False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True],[True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True],[False,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False],[False,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False],[False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False],[False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,True,True,True,False,True,False],[True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False],[False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False],[True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,True,False,True],[True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,True],[True,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,False],[False,False,False,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,True],[True,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,False,True],[False,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False],[False,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True],[True,False,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False],[True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,True,False,False,False,False],[True,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False],[False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,True,False],[False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False],[False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False],[True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False],[True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False],[False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,True,True,False,True,False,False,False],[False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False],[True,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True],[False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True],[False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,False,False,True],[False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True],[True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True],[True,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,True,True],[True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False],[False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False],[False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True],[True,False,False,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False],[False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False],[False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False],[True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,True,True,True,False],[False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False],[True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True],[True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True],[True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True],[True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False],[True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True],[False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True],[False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True],[True,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True],[True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False],[False,False,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True],[False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False],[True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False],[True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,False],[False,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,True,True],[True,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,True],[True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False],[True,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False],[True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False],[False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,False,True],[False,False,False,False,True,False,False,True,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True],[False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False],[True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False],[False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True],[True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False],[False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False]], dtype = "bool")#candidate|19284|(144, 140)|const|bool
bop_19285 = relay.multiply(bop_19253.astype('uint8'), relay.reshape(const_19284.astype('uint8'), relay.shape_of(bop_19253))) # shape=(144, 140)
bop_19288 = relay.multiply(bop_19256.astype('uint8'), relay.reshape(const_19284.astype('uint8'), relay.shape_of(bop_19256))) # shape=(144, 140)
bop_19289 = relay.bitwise_or(bop_19285.astype('int16'), call_19239.astype('int16')) # shape=(144, 140)
bop_19292 = relay.bitwise_or(bop_19288.astype('int16'), call_19240.astype('int16')) # shape=(144, 140)
output = relay.Tuple([call_19243,bop_19289,])
output2 = relay.Tuple([call_19245,bop_19292,])
func_19298 = relay.Function([], output)
mod['func_19298'] = func_19298
mod = relay.transform.InferType()(mod)
output = func_19298()
func_19299 = relay.Function([], output)
mutated_mod['func_19299'] = func_19299
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13668_call = mod.get_global_var('func_13668')
func_13669_call = mutated_mod.get_global_var('func_13669')
call_19358 = func_13668_call()
call_19359 = func_13668_call()
func_18082_call = mod.get_global_var('func_18082')
func_18084_call = mutated_mod.get_global_var('func_18084')
call_19376 = func_18082_call()
call_19377 = func_18082_call()
output = relay.Tuple([call_19358,call_19376,])
output2 = relay.Tuple([call_19359,call_19377,])
func_19399 = relay.Function([], output)
mod['func_19399'] = func_19399
mod = relay.transform.InferType()(mod)
output = func_19399()
func_19400 = relay.Function([], output)
mutated_mod['func_19400'] = func_19400
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12467_call = mod.get_global_var('func_12467')
func_12468_call = mutated_mod.get_global_var('func_12468')
call_19414 = relay.TupleGetItem(func_12467_call(), 0)
call_19415 = relay.TupleGetItem(func_12468_call(), 0)
output = call_19414
output2 = call_19415
func_19427 = relay.Function([], output)
mod['func_19427'] = func_19427
mod = relay.transform.InferType()(mod)
mutated_mod['func_19427'] = func_19427
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19427_call = mutated_mod.get_global_var('func_19427')
call_19428 = func_19427_call()
output = call_19428
func_19429 = relay.Function([], output)
mutated_mod['func_19429'] = func_19429
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14009_call = mod.get_global_var('func_14009')
func_14010_call = mutated_mod.get_global_var('func_14010')
call_19430 = func_14009_call()
call_19431 = func_14009_call()
func_16635_call = mod.get_global_var('func_16635')
func_16639_call = mutated_mod.get_global_var('func_16639')
const_19437 = relay.const([-5.259887,6.762158,6.733566,3.324111,-9.609953,2.533498,-0.120368,1.891542,8.198401,6.526560,-5.085294,7.418596,-0.097826,3.889101,6.367330,2.369053,0.619155,-2.993861,-4.309690,1.931872,-1.649593,6.607461,-6.856128,-7.897790,-0.182908,2.912030], dtype = "float64")#candidate|19437|(26,)|const|float64
const_19438 = relay.const([[5.910150],[7.777001],[-7.279012],[9.292859],[5.682064],[5.098417],[-2.204252],[3.335773],[-5.683776],[0.954062],[1.732043],[-6.617322],[-4.027705],[-4.224395],[6.264887],[-0.473070],[-0.347067],[5.827267],[-4.448104],[4.466050],[-0.107493],[3.770294],[2.931313],[8.120210],[-4.900395],[-0.160325],[-9.005919],[-6.480963],[-0.728102],[4.763777],[-3.137438],[9.195686],[2.365106],[-3.033920],[3.544517],[-2.972635],[-6.292830],[3.845653],[-6.542661],[9.159849],[7.564404],[9.882392],[9.954104],[-2.961135],[-2.196330],[7.780975],[-0.359316],[3.658339],[-5.097767],[0.286181],[-9.525004],[0.334148],[2.791644],[-8.741459],[7.548010],[-1.632504],[4.079586],[4.629014],[2.475040],[-2.131372],[8.995001],[3.808791],[-3.381039],[-4.136855],[-5.352358],[3.355440],[1.736416],[0.161573],[6.313613],[-0.694586],[8.566469],[9.898710],[-9.612032],[3.792870],[-2.984788],[7.735716],[-6.401325],[0.658206],[-6.809959],[1.066070],[-2.705284],[0.688988],[1.985118],[-6.528367],[-5.406743],[-6.753107],[-4.145144],[-3.848184],[-1.060736],[-3.910594],[6.603695],[-6.060214],[-8.477702],[7.151705],[9.406401],[4.650333],[5.621598],[6.183244],[9.279570],[1.129109],[6.544981],[-5.950830],[6.017874],[-6.772953],[-5.954035],[-0.277684],[7.493055],[0.582762],[9.941380],[-2.963375],[8.459673],[-3.959056],[-9.740107],[-1.598844],[3.563594],[0.543090],[1.798338],[-2.048971],[-7.903604],[-3.834841],[-8.988527],[-7.750949],[3.339295],[5.582748],[-3.923253],[-2.156317],[-0.778471],[-9.987284],[-2.952572],[-4.811476],[-1.017017],[-0.332398],[5.393431],[-0.558543],[-1.325219],[9.959832],[-1.437104],[-3.041674],[5.675203],[-2.381389],[9.778804],[-0.977347],[6.483301],[-6.695610],[8.924948],[9.734882],[-1.152586],[2.484364],[5.449408],[8.322533],[-4.145206],[-7.022397],[-8.416745],[-2.566434],[-8.059048],[-7.982754],[0.212449],[0.747981],[9.342187],[1.299266],[8.008734],[6.277933],[-7.732296],[0.836349],[-6.093544],[3.748110],[1.762461],[7.922764],[-7.631038],[-4.775467],[-6.731453],[-0.322901],[3.259195],[-7.728015],[0.640412],[0.009897],[1.115928],[-5.193409],[6.721177],[8.302283],[-7.285301],[-8.841137],[-6.870948],[-1.834485],[9.530605],[7.220685],[4.043847],[-7.795744],[-5.377828],[7.271636],[-4.638256],[-2.197604],[3.907335],[1.042523],[-5.680691],[2.481526],[-7.202668],[3.823593],[8.316655],[5.999168],[-2.604212],[0.455480],[2.262631],[-2.594585],[-4.323029],[6.885266],[-7.012084],[-2.761478],[8.401906],[-4.326211],[-8.442606],[-8.565333],[6.953111],[1.753665],[8.714378],[6.105744],[-0.567724],[9.561459],[-6.882613],[0.470607],[-6.592921],[4.120492],[-5.384202],[-8.283698],[-8.512191],[9.426894],[-8.618714],[4.996148],[0.331163],[3.667444],[2.337834],[-8.217028],[9.996943],[0.697598],[9.606468],[-2.616990],[-8.802071],[-5.582770],[-7.425741],[-3.438214],[0.772480],[2.817883],[4.468226],[6.775148],[-4.577365],[-3.421186],[-4.097108],[3.815492],[-1.860311],[3.441158],[6.618712],[6.189158],[-7.114009],[-5.289745],[6.957655],[4.357262],[-1.625141],[-9.865857],[2.364068],[0.066193],[-1.919634],[6.621129],[-6.313846],[-4.326032],[-0.017269],[7.519137],[-6.491529],[5.813769],[-8.347347],[9.275092],[-4.698175],[4.559756],[6.760993],[-6.660092],[7.947121],[-9.003418],[3.909215],[-1.925348],[-3.238515],[1.449759],[0.047842],[-6.634838],[4.189611],[-3.124447],[3.694772],[6.210934],[-4.201574],[7.770248],[6.861267],[-5.147343],[3.880601],[-2.943967],[-7.660481],[-7.581237],[-8.664565],[1.991832],[-7.007431],[3.718943],[4.562982],[-0.927977],[9.477971],[-1.411850],[-9.148943],[9.384335],[-5.910069],[-5.335055],[7.114041],[-9.873793],[-0.338641],[-1.100075],[-5.176819],[-6.562592],[-5.427722],[9.451648],[7.162174],[-4.692978],[8.899371],[-0.686471],[-7.410133],[1.681581],[0.921883],[-0.236753],[3.931151],[-7.938678],[-1.226732],[-3.701933],[7.333900],[0.977948],[-8.740720],[5.394693],[-1.836285],[-7.867762],[7.895623],[5.653553],[-0.096076],[-9.762202],[1.256744],[-1.862790],[5.613715],[-5.892060],[-6.366661],[6.098988],[6.049604],[2.634970],[5.364802],[6.744799],[-8.322849],[0.352078],[-9.335615],[-7.794752],[-7.961030],[-6.947091],[3.654462],[-4.368633],[4.651720],[-3.995991],[9.874957],[4.429109],[1.551447],[-2.600787],[-9.876839],[-6.542651],[3.275886],[-5.097619],[5.931551],[-2.216162],[3.529801],[9.724001],[-2.605036],[2.243718],[-2.950508],[9.280035],[8.339651],[-1.828201],[8.539775],[3.020401],[-3.644437],[-9.837339],[-7.559468],[6.698867],[0.609026],[2.161544],[-9.954210],[-3.158047],[-8.146343],[-5.750169],[8.757879],[-3.453378],[5.943297],[0.711055],[6.376763],[-9.857164],[9.812644],[9.398212],[6.495904],[9.909777],[-2.944967],[8.442819],[3.859353],[3.344642],[0.064342],[-8.301926],[0.645411],[-3.738812],[0.143666],[6.708446],[-3.113206],[-1.548406],[1.378929],[7.631927],[-1.774367],[0.982505],[5.732727],[6.215772],[-9.053042],[-9.162794],[-8.465066],[0.829941],[0.674602],[-4.881693],[0.883334],[9.670311],[7.425155],[7.976709],[9.434810],[2.478262],[8.916036],[6.631203],[7.894002],[6.325632],[8.449999],[-0.327893],[-6.776015],[-5.915842],[4.158555],[-2.832098],[-6.751239],[-7.047890],[3.987185],[-4.411269],[2.605810],[-0.803332],[8.270667],[1.753338],[-8.797211],[-5.302367],[6.582163],[-0.018212],[-4.535475],[8.490104],[8.584528],[8.744073],[-6.627301],[-9.145888],[6.391870],[-7.111985],[-5.908624],[-9.087370],[-8.738238],[8.675812],[-3.317624],[8.409518],[-2.634165],[-3.631246],[-3.987124],[-0.859302],[6.089803],[4.440792],[2.883001],[-2.451823],[2.619893],[6.335727],[2.068427],[0.515071],[-4.842137],[4.479110],[-2.640590],[-4.244110],[-4.308916],[-6.093124],[-9.381148],[-8.064106],[-8.010937],[6.528924],[8.241038],[-9.442614],[4.888765],[9.507429],[2.801187],[-9.202765],[8.072099],[2.793224],[-5.290053],[-2.511105],[-6.686550],[3.199481],[4.166909],[-4.433262],[-9.904027],[7.064834],[8.823674],[-2.327276],[-7.178854],[-2.240767],[-3.380773],[8.645622],[-6.978191],[1.415680],[-8.369881],[3.039920],[-0.538430],[0.752841],[-1.965675],[6.689560],[-8.142168],[3.571769],[4.503385],[-3.513689],[3.761915],[4.578528],[6.426153],[8.804355],[9.128102],[0.530375],[-3.018196],[-6.978601],[2.732012],[-5.440104],[-9.859607],[-7.995509],[-4.283182],[-2.832314],[5.119111],[4.303760],[0.194648],[-9.094733],[5.492365],[-7.637911],[6.913555],[-0.758917],[-9.987359],[-7.180353],[5.126942],[-9.120164],[8.049360],[-1.020862],[-1.942959],[4.427985],[9.852263],[-9.169069],[3.507585],[0.479336],[-7.225364],[-0.871735],[7.584163],[6.818069],[5.998933],[-8.972537],[-7.703255],[-7.920763],[3.438966],[3.098838],[-6.222136],[-7.181162],[-5.286132],[-8.675395],[6.503693],[-6.412158],[-8.078521],[2.379776],[-8.032894],[3.132921],[4.207877],[-9.802418],[-8.014257],[4.987482],[2.271380],[9.895282],[3.686126],[5.343984],[-2.995519],[7.075755],[9.196415],[4.964464],[-4.342809],[-1.080108],[3.971294],[9.678645],[2.458403],[-2.238197],[-0.898909],[3.812811],[8.775104],[1.106030],[-1.507941],[-0.296442],[6.025080],[2.426848],[8.480513],[-4.650560],[5.354472],[-7.369682],[-1.786596],[7.247940],[2.812113],[-1.474287],[2.020499],[3.007154],[-7.339266],[1.368423],[3.897318],[-7.865782],[-0.328393],[-4.683790],[-4.498305],[1.984863],[7.037773],[4.587125],[0.593428],[3.788953],[-2.010273],[6.300196],[7.905976],[-3.905743],[8.380846],[5.283654],[5.881469],[3.577416],[6.117894],[-3.148290],[-4.923080],[9.647985],[9.813971],[-8.555919],[-8.993629],[-8.928846],[3.343165],[-0.630465],[-9.727719],[-1.125067],[6.285844],[9.641229],[6.224629],[-0.989441],[-9.666329],[7.916343],[-9.563592],[-2.168670],[1.943758],[1.440508],[-0.141372],[-1.616263],[1.137026],[-6.827280],[-5.749948],[1.656243],[-0.051015],[-4.119513],[-6.923679],[-3.281707],[5.558141],[5.874801],[8.906614],[-0.103270],[-6.267904],[-9.854010],[1.606369],[-9.528576],[0.509132],[-1.375609],[-8.328739],[9.006861],[-2.391717],[-8.332906],[-8.472726],[5.177868],[-2.565658],[-8.367968],[-2.123382],[-0.908167],[-0.235560],[7.936856],[-9.273740],[-1.262507],[2.599444],[8.106586],[-1.879141],[-6.818974],[-8.039537],[6.732409],[-0.927004],[9.437120],[-6.948045],[-2.228081],[-6.008869],[8.153591],[4.251397],[-0.252406],[0.966243],[0.432506],[0.114117],[-8.188394],[-3.683849],[3.010348],[2.056286],[1.038403],[7.547982],[4.230495],[-4.990715],[5.850488],[-6.163039],[0.808892],[4.092147],[6.792594],[-9.988896],[3.443284],[9.484855],[-1.852025],[0.222118],[6.063219],[-1.391810],[-6.676903],[4.943920],[6.356086],[0.160038],[-1.556596],[-2.688835],[9.493606],[1.447295],[-3.854598],[1.774195],[5.749696],[0.609812],[-5.002394],[2.297463],[4.398361],[0.470909],[-9.822070],[6.519606],[-1.063547],[-1.133786],[9.649379],[0.214926],[-3.615514],[1.167833],[-6.179435],[2.539439],[-0.479699],[3.861799],[1.528130],[-2.198602],[9.801483],[-1.286361],[-3.506551],[3.663359],[-9.755806],[3.717401],[-2.073109],[-9.294176],[0.885558],[9.311501],[-8.323671],[4.150133],[3.559533],[-8.355908],[-6.268112],[-4.330243],[-5.965917],[3.266077],[-8.242868],[2.634650],[-4.081991],[-0.120363],[7.552275],[8.479884],[8.619855],[7.217196],[0.264461],[-6.752219],[2.599839],[3.883199],[3.827145],[6.756148],[-2.608832],[-4.709548],[-1.173576],[0.983356],[-0.049341],[9.301366],[-7.417963],[-9.741281],[-1.660362],[-3.320690],[-2.636079],[-0.251223],[7.023981],[5.066269],[0.798405],[-5.018589],[7.537128],[3.411926],[-7.466191],[-8.335410],[-7.501538],[5.382589],[2.081970],[-8.514581],[8.842047],[5.705506],[3.851486],[3.255401],[-3.250655],[3.880937],[-4.415327],[8.018842],[-0.814518],[0.321335],[-4.452920],[1.199052],[6.198189],[5.163067],[-0.475024],[-6.050020],[-2.540553],[-4.801122],[-0.151833],[-7.131052],[-4.930071],[-4.964596],[4.026732],[5.992602],[-4.464541],[8.554091],[-7.008505],[-4.599250],[1.330477],[-5.647218],[8.131724],[6.168350],[1.965774],[-9.869703],[7.462637],[-4.594272],[-6.343621],[-8.651201],[-1.021865],[-3.196202],[-8.399608],[0.305460],[-6.417382],[7.717388],[-4.940016],[-5.654029],[-7.927912],[7.900448],[4.487402],[8.243497],[2.203373],[-0.888589],[9.758910],[4.694762],[-8.485315],[-3.674264],[4.938177],[-2.837665],[8.304648],[7.336505],[7.920929],[-9.132010],[9.958243],[0.283803],[7.012786],[-2.289275],[-1.789255],[-4.699182],[4.191125],[-1.943330],[8.564953],[5.173886],[-1.633778],[2.743262],[8.107166],[5.995713],[-8.397629],[-9.930695],[-0.940347],[-8.634517],[4.714539],[-2.381549],[9.948986],[9.625393],[-1.600468],[3.722629],[-2.063714],[7.425485],[-9.003355],[0.208167],[3.436895],[-1.076319],[-9.861910]], dtype = "float32")#candidate|19438|(900, 1)|const|float32
var_19439 = relay.var("var_19439", dtype = "float32", shape = (32,))#candidate|19439|(32,)|var|float32
call_19436 = relay.TupleGetItem(func_16635_call(relay.reshape(const_19437.astype('float64'), [26,]), relay.reshape(const_19438.astype('float32'), [900,]), relay.reshape(var_19439.astype('float32'), [32,]), ), 6)
call_19440 = relay.TupleGetItem(func_16639_call(relay.reshape(const_19437.astype('float64'), [26,]), relay.reshape(const_19438.astype('float32'), [900,]), relay.reshape(var_19439.astype('float32'), [32,]), ), 6)
func_13177_call = mod.get_global_var('func_13177')
func_13179_call = mutated_mod.get_global_var('func_13179')
call_19457 = relay.TupleGetItem(func_13177_call(), 0)
call_19458 = relay.TupleGetItem(func_13179_call(), 0)
uop_19466 = relay.sqrt(call_19436.astype('float64')) # shape=(4, 8, 1)
uop_19468 = relay.sqrt(call_19440.astype('float64')) # shape=(4, 8, 1)
bop_19478 = relay.bitwise_or(uop_19466.astype('int64'), relay.reshape(call_19436.astype('int64'), relay.shape_of(uop_19466))) # shape=(4, 8, 1)
bop_19481 = relay.bitwise_or(uop_19468.astype('int64'), relay.reshape(call_19440.astype('int64'), relay.shape_of(uop_19468))) # shape=(4, 8, 1)
output = relay.Tuple([call_19430,const_19437,const_19438,var_19439,call_19457,bop_19478,])
output2 = relay.Tuple([call_19431,const_19437,const_19438,var_19439,call_19458,bop_19481,])
F = relay.Function([var_19439,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_19439,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
