==========mod==========
#[version = "0.0.5"]
def @func_11798() -> (Tensor[(6, 3, 8), float32],) {
  %0 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_12053() -> (Tensor[(6, 3, 8), float32],) {
  %2 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %3 = %2.0;
  (%3,)
}

def @func_5951(%var_5948: Tensor[(4, 11, 15), float32]) -> Tensor[(4, 11, 15), float32] {
  %4 = cast(%var_5948, dtype="float32") /* ty=Tensor[(4, 11, 15), float32] */;
  log10(%4) /* ty=Tensor[(4, 11, 15), float32] */
}

def @func_14792() -> (Tensor[(8, 4, 16), bool],) {
  %5 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %6 = %5.0;
  (%6,)
}

def @func_18380() -> Tensor[(8, 4, 16), bool] {
  %7 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %7.0
}

def @func_12883() -> Tensor[(6, 3, 8), float32] {
  %8 = @func_12758() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(12, 16, 9), float64], float64, Tensor[(15, 10, 6), float32], Tensor[(900), float32]) */;
  %8.0
}

def @func_19211() -> Tensor[(8, 4, 16), bool] {
  %9 = @func_18996() /* ty=(Tensor[(3, 117), float32], Tensor[(8, 4, 16), bool]) */;
  %9.1
}

def @func_10858() -> (Tensor[(6, 3, 8), float32],) {
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 3, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %11 = cos(%10) /* ty=Tensor[(6, 3, 8), float32] */;
  (%11,)
}

def @func_17054() -> Tensor[(140), float64] {
  %12 = @func_16484() /* ty=(Tensor[(140), float64],) */;
  %12.0
}

def @func_18205() -> (Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool]) {
  %13 = @func_12946() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %14 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %15 = %13.0;
  %16 = %14.0;
  (%15, %16)
}

def @func_4480(%var_4465: Tensor[(10, 8, 16), uint32], %var_4466: Tensor[(10, 8, 16), uint32]) -> (Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) {
  %17 = cast(%var_4466, dtype="uint32") /* ty=Tensor[(10, 8, 16), uint32] */;
  %18 = shape_of(%var_4465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%var_4465, dtype="uint32") /* ty=Tensor[(10, 8, 16), uint32] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %21 = cast(%var_4466, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
  %22 = minimum(%19, %20) /* ty=Tensor[(10, 8, 16), uint32] */;
  %23 = tan(%21) /* ty=Tensor[(10, 8, 16), float64] */;
  (%22, %23)
}

def @func_11860() -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) {
  %24 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(1280), uint32] */, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(1280), uint32] */, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %27 = reshape(%25, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %28 = reshape(%26, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %29 = @func_4480(%27, %28) /* ty=(Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) */;
  %30 = %24.0;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %32 = reshape(%31, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %33 = @func_11148(%32) /* ty=(Tensor[(6, 3, 8), float64],) */;
  %34 = %29.0;
  %35 = %33.0;
  (%30, %34, meta[relay.Constant][1] /* ty=Tensor[(1280), uint32] */, %35)
}

def @func_18608() -> Tensor[(2, 16, 6), float32] {
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 6), float32] */;
  rsqrt(%36) /* ty=Tensor[(2, 16, 6), float32] */
}

def @func_17036() -> (Tensor[(2, 3, 14), float32], Tensor[(6, 3, 8), float32]) {
  %37 = @func_16349() /* ty=(Tensor[(2, 3, 14), float32],) */;
  %38 = %37.0;
  %39 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  (%38, %39)
}

def @func_10895() -> (Tensor[(6, 3, 8), float32],) {
  %40 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %41 = %40.0;
  (%41,)
}

def @func_11448(%var_11432: uint32, %var_11433: Tensor[(20), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) {
  %42 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %45 = cast(meta[relay.Constant][4] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %46 = reshape(%43, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
  %47 = reshape(%44, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
  %48 = reshape(%45, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %49 = @func_371(%46, %47, %48) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) */;
  %50 = cast(%var_11432, dtype="uint32") /* ty=uint32 */;
  %51 = cast(%var_11433, dtype="uint32") /* ty=Tensor[(20), uint32] */;
  %52 = reshape(%50, newshape=[]) /* ty=uint32 */;
  %53 = reshape(%51, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), uint32] */;
  %54 = %42.0;
  %55 = %49.1;
  %56 = @func_7975(%52, %53) /* ty=Tensor[(1, 10, 2), uint32] */;
  (%54, %55, meta[relay.Constant][3] /* ty=Tensor[(1584), bool] */, meta[relay.Constant][4] /* ty=Tensor[(900), float32] */, %56, %var_11432, %var_11433)
}

def @func_12542(%var_12492: Tensor[(1584), bool]) -> (Tensor[(6, 3, 8), float32], Tensor[(1584), bool], Tensor[(140), float64], Tensor[(6, 260), uint8], Tensor[(3, 117), float32], Tensor[(3, 117), float32], Tensor[(5, ?, 12), float32], Tensor[(8, 4, 16), bool]) {
  %57 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 260), uint8] */, dtype="uint8") /* ty=Tensor[(6, 260), uint8] */;
  %58 = reshape(%57, newshape=[12, 130]) /* ty=Tensor[(12, 130), uint8] */;
  %59 = @func_12368(%58) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(140), float64], Tensor[(12, 130), uint8], Tensor[(140), float64], Tensor[(6, 3, 8), float32]) */;
  %60 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 117), int32] */, dtype="int32") /* ty=Tensor[(3, 117), int32] */;
  %61 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 117), int32] */, dtype="int32") /* ty=Tensor[(3, 117), int32] */;
  %62 = cast(%var_12492, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %63 = reshape(%60, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), int32] */;
  %64 = reshape(%61, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), int32] */;
  %65 = reshape(%62, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
  %66 = @func_7306(%63, %64, %65) /* ty=(Tensor[(9, 3, 13), bool], Tensor[(1584), bool], float64, Tensor[(1, 26), float64], Tensor[(1584), bool], Tensor[(900), float32]) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="int8") /* ty=Tensor[(9, 3, 13), int8] */;
  %69 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(3, 117), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 117), int32] */, dtype="int8") /* ty=Tensor[(3, 117), int8] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %72 = maximum(%70, %71) /* ty=Tensor[(3, 117), int8] */;
  %73 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 117), int32] */, dtype="float32") /* ty=Tensor[(3, 117), float32] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(2), int32] */;
  %75 = cast(%72, dtype="float32") /* ty=Tensor[(3, 117), float32] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %77 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 117), int32] */, dtype="float32") /* ty=Tensor[(3, 117), float32] */;
  %78 = shape_of(%72, dtype="int32") /* ty=Tensor[(2), int32] */;
  %79 = cast(%72, dtype="float32") /* ty=Tensor[(3, 117), float32] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %81 = cast(meta[relay.Constant][7] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %82 = reshape(%81, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), float64] */;
  %83 = @func_5376(%82) /* ty=(Tensor[(5, ?, 12), uint64], Tensor[(5, ?, 12), uint32]) */;
  %84 = %83.0;
  %85 = cast(meta[relay.Constant][7] /* ty=Tensor[(60), float64] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="float32") /* ty=Tensor[(5, ?, 12), float32] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %89 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %90 = @func_11921() /* ty=Tensor[(6, 3, 8), float32] */;
  %91 = %59.3;
  %92 = multiply(%75, %76) /* ty=Tensor[(3, 117), float32] */;
  %93 = floor_mod(%79, %80) /* ty=Tensor[(3, 117), float32] */;
  %94 = power(%87, %88) /* ty=Tensor[(5, ?, 12), float32] */;
  %95 = %89.0;
  (%90, %var_12492, %91, meta[relay.Constant][5] /* ty=Tensor[(6, 260), uint8] */, %92, %93, %94, %95)
}

def @func_4914(%var_4872: Tensor[(16, 3, 4), uint16], %var_4873: Tensor[(16, 3, 4), uint16], %var_4884: Tensor[(1280), uint32], %var_4896: Tensor[(35), float64]) -> (Tensor[(16, 3, 4), float64], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32, 1), float32], Tensor[(35, 4), float64]) {
  %96 = cast(%var_4873, dtype="uint16") /* ty=Tensor[(16, 3, 4), uint16] */;
  %97 = shape_of(%var_4872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%var_4872, dtype="uint16") /* ty=Tensor[(16, 3, 4), uint16] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %100 = multiply(%98, %99) /* ty=Tensor[(16, 3, 4), uint16] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(16, 3, 4), float64] */;
  %102 = cast(%var_4884, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %103 = cast(%var_4884, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %104 = reshape(%102, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %105 = reshape(%103, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %106 = @func_4480(%104, %105) /* ty=(Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) */;
  %107 = cast(%var_4896, dtype="float64") /* ty=Tensor[(35), float64] */;
  %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(32, 1), float32] */, dtype="float32") /* ty=Tensor[(32, 1), float32] */;
  %109 = cast(meta[relay.Constant][9] /* ty=Tensor[(35, 4), float64] */, dtype="float64") /* ty=Tensor[(35, 4), float64] */;
  %110 = reshape(%107, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
  %111 = reshape(%108, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %112 = reshape(%109, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %113 = @func_4835(%110, %111, %112) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
  %114 = log2(%101) /* ty=Tensor[(16, 3, 4), float64] */;
  %115 = %106.0;
  %116 = %113.4;
  (%114, %115, %var_4884, %116, %var_4896, meta[relay.Constant][8] /* ty=Tensor[(32, 1), float32] */, meta[relay.Constant][9] /* ty=Tensor[(35, 4), float64] */)
}

def @func_16635(%var_16626: Tensor[(26), float64], %var_16627: Tensor[(900), float32], %var_16633: Tensor[(32), float32]) -> (Tensor[(1280), uint32], Tensor[(1584), bool], Tensor[(900), float32], float64, Tensor[(26), float64], Tensor[(900), float32], Tensor[(4, 8, 1), float32], Tensor[(32), float32]) {
  %117 = @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */;
  %118 = @func_16287() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) */;
  %119 = cast(-6.06726f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %120 = cast(%var_16626, dtype="float64") /* ty=Tensor[(26), float64] */;
  %121 = %118.2;
  %122 = cast(%121, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %123 = cast(%var_16627, dtype="float32") /* ty=Tensor[(900), float32] */;
  %124 = reshape(%119, newshape=[]) /* ty=float64 */;
  %125 = reshape(%120, newshape=[13, 1, 2]) /* ty=Tensor[(13, 1, 2), float64] */;
  %126 = reshape(%122, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
  %127 = reshape(%123, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %128 = @func_6123(%124, %125, %126, %127) /* ty=(Tensor[(13, 1, 2), bool], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32]) */;
  %129 = cast(%var_16633, dtype="float32") /* ty=Tensor[(32), float32] */;
  %130 = reshape(%129, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), float32] */;
  %131 = @func_2803(%130) /* ty=(Tensor[(4, 8, 1), float32],) */;
  %132 = %117.2;
  %133 = %128.3;
  %134 = %131.0;
  (%132, %121, %133, -6.06726f64 /* ty=float64 */, %var_16626, %var_16627, %134, %var_16633)
}

def @func_16185() -> (Tensor[(10, 8, 4), int16], Tensor[(144), float32], Tensor[(6, 3, 8), float32]) {
  %135 = @func_14130() /* ty=(Tensor[(144), float32],) */;
  %136 = @func_14673() /* ty=Tensor[(10, 8, 4), int16] */;
  %137 = %135.0;
  %138 = @func_12883() /* ty=Tensor[(6, 3, 8), float32] */;
  (%136, %137, %138)
}

def @func_3769(%var_3679: Tensor[(9, 10, 8), uint8], %var_3680: Tensor[(9, 10, 8), uint8], %var_3687: Tensor[(4, 300), float64], %var_3711: Tensor[(9, 10, 8), float64]) -> (Tensor[(9, 10, 8), uint8], Tensor[(15, 10, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64], Tensor[(9, 10, 8), uint8], Tensor[(4, 300), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(13, 13, 2), float32]) {
  %139 = cast(%var_3680, dtype="uint8") /* ty=Tensor[(9, 10, 8), uint8] */;
  %140 = shape_of(%var_3679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%var_3679, dtype="uint8") /* ty=Tensor[(9, 10, 8), uint8] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %143 = cast(%var_3687, dtype="float64") /* ty=Tensor[(4, 300), float64] */;
  %144 = cast(meta[relay.Constant][10] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %145 = reshape(%143, newshape=[1200, 1]) /* ty=Tensor[(1200, 1), float64] */;
  %146 = reshape(%144, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %147 = @func_2501(%145, %146) /* ty=(Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 16, 5), float64], Tensor[(1200, 1), float64], Tensor[(756), float32]) */;
  %148 = cast(%var_3687, dtype="float64") /* ty=Tensor[(4, 300), float64] */;
  %149 = cast(%var_3687, dtype="float64") /* ty=Tensor[(4, 300), float64] */;
  %150 = cast(meta[relay.Constant][10] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %151 = reshape(%148, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %152 = reshape(%149, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %153 = reshape(%150, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %154 = @func_1875(%151, %152, %153) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64]) */;
  %155 = cast(%var_3679, dtype="float64") /* ty=Tensor[(9, 10, 8), float64] */;
  %156 = tan(%155) /* ty=Tensor[(9, 10, 8), float64] */;
  %157 = cast(%var_3711, dtype="uint8") /* ty=Tensor[(9, 10, 8), uint8] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="uint8") /* ty=Tensor[(9, 10, 8), uint8] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %161 = cast(%var_3687, dtype="float32") /* ty=Tensor[(4, 300), float32] */;
  %162 = cast(meta[relay.Constant][11] /* ty=Tensor[(338), float32] */, dtype="float32") /* ty=Tensor[(338), float32] */;
  %163 = reshape(%162, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float32] */;
  %164 = cast(meta[relay.Constant][11] /* ty=Tensor[(338), float32] */, dtype="float32") /* ty=Tensor[(338), float32] */;
  %165 = reshape(%164, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float32] */;
  %166 = subtract(%141, %142) /* ty=Tensor[(9, 10, 8), uint8] */;
  %167 = %147.5;
  %168 = %154.3;
  %169 = add(%159, %160) /* ty=Tensor[(9, 10, 8), uint8] */;
  %170 = log(%161) /* ty=Tensor[(4, 300), float32] */;
  %171 = @func_1498(%163) /* ty=Tensor[(13, 13, 2), float32] */;
  %172 = @func_1498(%165) /* ty=Tensor[(13, 13, 2), float32] */;
  (%166, %167, meta[relay.Constant][10] /* ty=Tensor[(756), float32] */, %168, %169, %170, %171, meta[relay.Constant][11] /* ty=Tensor[(338), float32] */, %172)
}

def @func_10958() -> (Tensor[(6, 3, 8), float32],) {
  %173 = @func_10932() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %174 = %173.0;
  (%174,)
}

def @func_13319() -> (Tensor[(6, 3, 8), float64], Tensor[(6, 3, 8), float32]) {
  %175 = @func_12689() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */;
  %176 = %175.0;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
  %178 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %179 = sigmoid(%177) /* ty=Tensor[(6, 3, 8), float64] */;
  %180 = %178.0;
  (%179, %180)
}

def @func_13792(%var_13779: Tensor[(900), float32], %var_13783: Tensor[(2, 600), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), bool], Tensor[(10, 8, 16), float64], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(9, 10, 8), uint8], Tensor[(720), uint8], Tensor[(2, 600), float64]) {
  %181 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %182 = %181.1;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(10, 8, 16), float32] */;
  %184 = asinh(%183) /* ty=Tensor[(10, 8, 16), float32] */;
  %185 = cast(%182, dtype="uint8") /* ty=Tensor[(10, 8, 16), uint8] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%184, dtype="uint8") /* ty=Tensor[(10, 8, 16), uint8] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %189 = bitwise_or(%187, %188) /* ty=Tensor[(10, 8, 16), uint8] */;
  %190 = cast(%184, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = cast(%189, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
  %195 = cast(meta[relay.Constant][12] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %196 = cast(meta[relay.Constant][12] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %197 = cast(%var_13779, dtype="float32") /* ty=Tensor[(900), float32] */;
  %198 = reshape(%195, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
  %199 = reshape(%196, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
  %200 = reshape(%197, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %201 = @func_371(%198, %199, %200) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) */;
  %202 = cast(meta[relay.Constant][13] /* ty=Tensor[(720), uint8] */, dtype="uint8") /* ty=Tensor[(720), uint8] */;
  %203 = cast(meta[relay.Constant][13] /* ty=Tensor[(720), uint8] */, dtype="uint8") /* ty=Tensor[(720), uint8] */;
  %204 = cast(%var_13783, dtype="float64") /* ty=Tensor[(2, 600), float64] */;
  %205 = cast(meta[relay.Constant][13] /* ty=Tensor[(720), uint8] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %206 = reshape(%202, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), uint8] */;
  %207 = reshape(%203, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), uint8] */;
  %208 = reshape(%204, newshape=[4, 300]) /* ty=Tensor[(4, 300), float64] */;
  %209 = reshape(%205, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), float64] */;
  %210 = @func_3769(%206, %207, %208, %209) /* ty=(Tensor[(9, 10, 8), uint8], Tensor[(15, 10, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64], Tensor[(9, 10, 8), uint8], Tensor[(4, 300), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(13, 13, 2), float32]) */;
  %211 = @func_12883() /* ty=Tensor[(6, 3, 8), float32] */;
  %212 = less(%192, %193) /* ty=Tensor[(10, 8, 16), bool] */;
  %213 = log2(%194) /* ty=Tensor[(10, 8, 16), float64] */;
  %214 = %201.1;
  %215 = %210.0;
  (%211, %212, %213, %214, meta[relay.Constant][12] /* ty=Tensor[(1584), bool] */, %var_13779, %215, meta[relay.Constant][13] /* ty=Tensor[(720), uint8] */, %var_13783)
}

def @func_14551() -> (Tensor[(6, 3, 8), float32],) {
  %216 = @func_11921() /* ty=Tensor[(6, 3, 8), float32] */;
  (%216,)
}

def @func_11135() -> (Tensor[(6, 3, 8), float32],) {
  %217 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %218 = %217.0;
  (%218,)
}

def @func_13668() -> Tensor[(6, 3, 8), float32] {
  @func_12182() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_18936(%var_18895: Tensor[(1, 35), float64], %var_18897: Tensor[(224), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(4, 8, 35), bool], Tensor[(1, 35), float64], Tensor[(140), float64], Tensor[(224), float32], Tensor[(1560), uint8], Tensor[(35), float64], Tensor[(60), float64]) {
  %219 = @func_16072() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %220 = @func_16749() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */;
  %221 = %220.1;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %223 = @func_16594() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %224 = @func_11798() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %225 = cast(%var_18895, dtype="float64") /* ty=Tensor[(1, 35), float64] */;
  %226 = cast(meta[relay.Constant][14] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %227 = cast(%var_18897, dtype="float32") /* ty=Tensor[(224), float32] */;
  %228 = cast(meta[relay.Constant][15] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %229 = reshape(%225, newshape=[35]) /* ty=Tensor[(35), float64] */;
  %230 = reshape(%226, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %231 = reshape(%227, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), float32] */;
  %232 = reshape(%228, newshape=[1560]) /* ty=Tensor[(1560), uint8] */;
  %233 = @func_11776(%229, %230, %231, %232) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(5, 28), float64], Tensor[(60), float64], Tensor[(4, 8, 7), bool], Tensor[(4, 8, 35), bool], Tensor[(10, 2, 3), float64], Tensor[(4, 8, 1), float32], Tensor[(140), float64], Tensor[(1560), uint8], Tensor[(4, 8, 35), float32], Tensor[(4, 8, 35), float64]) */;
  %234 = cast(%var_18895, dtype="float64") /* ty=Tensor[(1, 35), float64] */;
  %235 = cast(meta[relay.Constant][14] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %236 = reshape(%234, newshape=[35]) /* ty=Tensor[(35), float64] */;
  %237 = reshape(%235, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %238 = @func_15346(%236, %237) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(140), float64]) */;
  %239 = @func_14393() /* ty=(Tensor[(6, 3, 8), float64], Tensor[(5, ?, 12), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float64]) */;
  %240 = %219.0;
  %241 = log2(%222) /* ty=Tensor[(6, 3, 8), float32] */;
  %242 = %223.0;
  %243 = %224.0;
  %244 = %233.5;
  %245 = %238.3;
  %246 = %239.2;
  (%240, %241, %242, %243, %244, %var_18895, meta[relay.Constant][14] /* ty=Tensor[(140), float64] */, %var_18897, meta[relay.Constant][15] /* ty=Tensor[(1560), uint8] */, %245, %246)
}

def @func_13113() -> (Tensor[(6, 3, 8), float32], Tensor[(144), float32]) {
  %247 = @func_12836() /* ty=(Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) */;
  %248 = @func_11822() /* ty=Tensor[(6, 3, 8), float32] */;
  %249 = %247.2;
  (%248, %249)
}

def @func_11921() -> Tensor[(6, 3, 8), float32] {
  @func_11822() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_18628() -> (Tensor[(10, 2, 3), float64], Tensor[(10, 8, 16), uint32]) {
  %250 = @func_18487() /* ty=(Tensor[(144), float32], Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(1560), uint8]) */;
  %251 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %252 = %250.2;
  %253 = %251.1;
  (%252, %253)
}

def @func_13900(%var_13887: Tensor[(60), float64], %var_13893: Tensor[(6, 260), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float32], Tensor[(6, 260), uint8]) {
  %254 = @func_13350() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), uint64]) */;
  %255 = cast(%var_13887, dtype="float64") /* ty=Tensor[(60), float64] */;
  %256 = reshape(%255, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), float64] */;
  %257 = @func_4143(%256) /* ty=(Tensor[(10, 2, 3), float64],) */;
  %258 = cast(%var_13893, dtype="uint8") /* ty=Tensor[(6, 260), uint8] */;
  %259 = reshape(%258, newshape=[12, 130]) /* ty=Tensor[(12, 130), uint8] */;
  %260 = @func_12368(%259) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(140), float64], Tensor[(12, 130), uint8], Tensor[(140), float64], Tensor[(6, 3, 8), float32]) */;
  %261 = %254.0;
  %262 = %257.0;
  %263 = %260.0;
  (%261, %262, %var_13887, %263, %var_13893)
}

def @func_16661() -> Tensor[(6, 3, 8), float32] {
  %264 = @func_15126() /* ty=(Tensor[(13, 12, 2), bool], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(35, 4), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32]) */;
  %264.5
}

def @func_14266(%var_14248: Tensor[(338), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) {
  %265 = cast(%var_14248, dtype="float32") /* ty=Tensor[(338), float32] */;
  %266 = reshape(%265, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float32] */;
  %267 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  %268 = @func_1498(%266) /* ty=Tensor[(13, 13, 2), float32] */;
  (%267, %268, %var_14248)
}

def @func_10932() -> (Tensor[(6, 3, 8), float32],) {
  %269 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %270 = %269.0;
  (%270,)
}

def @func_14130() -> (Tensor[(144), float32],) {
  %271 = @func_13113() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(144), float32]) */;
  %272 = %271.1;
  (%272,)
}

def @func_16484() -> (Tensor[(140), float64],) {
  %273 = @func_14483() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(140), float64]) */;
  %274 = %273.2;
  (%274,)
}

def @func_11876(%var_11868: Tensor[(16, 11, 11), uint64]) -> Tensor[(16, 11, 11), bool] {
  %275 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 11, 11), uint64] */, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %276 = shape_of(%var_11868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%var_11868, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%277, %278) /* ty=Tensor[(16, 11, 11), bool] */
}

def @func_5376(%var_5355: Tensor[(5, 1, 12), float64]) -> (Tensor[(5, ?, 12), uint64], Tensor[(5, ?, 12), uint32]) {
  %279 = cast(%var_5355, dtype="float64") /* ty=Tensor[(5, 1, 12), float64] */;
  %280 = atanh(%279) /* ty=Tensor[(5, 1, 12), float64] */;
  %281 = cast(%var_5355, dtype="uint64") /* ty=Tensor[(5, 1, 12), uint64] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%280, dtype="uint64") /* ty=Tensor[(5, 1, 12), uint64] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %285 = cast(%280, dtype="uint32") /* ty=Tensor[(5, 1, 12), uint32] */;
  %286 = shape_of(%var_5355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%var_5355, dtype="uint32") /* ty=Tensor[(5, 1, 12), uint32] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %289 = maximum(%283, %284) /* ty=Tensor[(5, ?, 12), uint64] */;
  %290 = bitwise_and(%287, %288) /* ty=Tensor[(5, ?, 12), uint32] */;
  (%289, %290)
}

def @func_14717(%var_14711: Tensor[(60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(60), float64]) {
  %291 = cast(%var_14711, dtype="float64") /* ty=Tensor[(60), float64] */;
  %292 = reshape(%291, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %293 = @func_11979(%292) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(5, ?, 12), float64]) */;
  %294 = @func_14444() /* ty=Tensor[(6, 3, 8), float32] */;
  %295 = %293.1;
  (%294, %295, %var_14711)
}

def @func_17487() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(16, 338), int64]) {
  %296 = @func_13139() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %297 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 338), float32] */, dtype="float32") /* ty=Tensor[(1, 338), float32] */;
  %298 = reshape(%297, newshape=[338]) /* ty=Tensor[(338), float32] */;
  %299 = @func_14266(%298) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) */;
  %300 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 338), float32] */, dtype="int64") /* ty=Tensor[(1, 338), int64] */;
  %301 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 338), float32] */, dtype="int64") /* ty=Tensor[(16, 338), int64] */;
  %302 = %296.0;
  %303 = %299.0;
  %304 = bitwise_xor(%300, %301) /* ty=Tensor[(16, 338), int64] */;
  (%302, %303, %304)
}

def @func_16218() -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 4), int16]) {
  %305 = @func_15960() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %306 = @func_16185() /* ty=(Tensor[(10, 8, 4), int16], Tensor[(144), float32], Tensor[(6, 3, 8), float32]) */;
  %307 = %305.0;
  %308 = %306.0;
  (%307, %308)
}

def @func_10267(%var_10205: Tensor[(10, 7, 4), int32]) -> (Tensor[(10, 8, 16), float64], Tensor[(1280), uint32], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), uint8]) {
  %309 = cast(meta[relay.Constant][19] /* ty=Tensor[(1280), uint32] */, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %310 = cast(meta[relay.Constant][19] /* ty=Tensor[(1280), uint32] */, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %311 = reshape(%309, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %312 = reshape(%310, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %313 = @func_4480(%311, %312) /* ty=(Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) */;
  %314 = cast(4 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %315 = cast(%var_10205, dtype="bool") /* ty=Tensor[(10, 7, 4), bool] */;
  %316 = not_equal(%314, %315) /* ty=Tensor[(10, 7, 4), bool] */;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
  %318 = sqrt(%317) /* ty=Tensor[(10, 7, 4), float32] */;
  %319 = cast(%318, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
  %320 = cast(4 /* ty=int32 */, dtype="float64") /* ty=float64 */;
  %321 = cast(%316, dtype="float64") /* ty=Tensor[(10, 7, 4), float64] */;
  %322 = divide(%320, %321) /* ty=Tensor[(10, 7, 4), float64] */;
  %323 = cast(%322, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
  %324 = shape_of(%var_10205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_10205, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %327 = %313.1;
  %328 = sin(%319) /* ty=Tensor[(10, 7, 4), float32] */;
  %329 = right_shift(%325, %326) /* ty=Tensor[(10, 7, 4), uint8] */;
  (%327, meta[relay.Constant][19] /* ty=Tensor[(1280), uint32] */, %328, %329)
}

def @func_11027(%var_11017: Tensor[(256, 2), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool]) {
  %330 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %331 = cast(%var_11017, dtype="uint32") /* ty=Tensor[(256, 2), uint32] */;
  %332 = cast(%var_11017, dtype="uint32") /* ty=Tensor[(256, 2), uint32] */;
  %333 = reshape(%331, newshape=[16, 16, 2]) /* ty=Tensor[(16, 16, 2), uint32] */;
  %334 = reshape(%332, newshape=[16, 16, 2]) /* ty=Tensor[(16, 16, 2), uint32] */;
  %335 = @func_5578(%333, %334) /* ty=Tensor[(16, 16, 2), uint32] */;
  %336 = cast(%335, dtype="bool") /* ty=Tensor[(16, 16, 2), bool] */;
  %337 = shape_of(%var_11017, dtype="int32") /* ty=Tensor[(2), int32] */;
  %338 = cast(%var_11017, dtype="bool") /* ty=Tensor[(256, 2), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %340 = %330.0;
  %341 = logical_or(%338, %339) /* ty=Tensor[(256, 2), bool] */;
  (%340, %341)
}

def @func_16427() -> (Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), float32]) {
  %342 = @func_13984() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %343 = @func_16349() /* ty=(Tensor[(2, 3, 14), float32],) */;
  %344 = %342.0;
  %345 = %343.0;
  (%344, %345)
}

def @func_14902(%var_14857: Tensor[(16, 1, 8), float64], %var_14858: Tensor[(16, 2, 8), float64], %var_14874: Tensor[(16, 2, 8), float64]) -> (Tensor[(16, 2, 8), uint8],) {
  %346 = cast(%var_14857, dtype="float64") /* ty=Tensor[(16, 1, 8), float64] */;
  %347 = cast(%var_14858, dtype="float64") /* ty=Tensor[(16, 2, 8), float64] */;
  %348 = floor_mod(%346, %347) /* ty=Tensor[(16, 2, 8), float64] */;
  %349 = cast(%var_14874, dtype="uint8") /* ty=Tensor[(16, 2, 8), uint8] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="uint8") /* ty=Tensor[(16, 2, 8), uint8] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %353 = minimum(%351, %352) /* ty=Tensor[(16, 2, 8), uint8] */;
  (%353,)
}

def @func_12689() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %354 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %355 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %356 = %354.0;
  %357 = %355.0;
  (%356, %357)
}

def @func_13952() -> Tensor[(6, 3, 8), float32] {
  %358 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %358.0
}

def @func_15126() -> (Tensor[(13, 12, 2), bool], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(35, 4), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32]) {
  %359 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 1, 2), int64] */, dtype="bool") /* ty=Tensor[(13, 1, 2), bool] */;
  %360 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 12, 2), int64] */, dtype="bool") /* ty=Tensor[(13, 12, 2), bool] */;
  %361 = cast(meta[relay.Constant][22] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %362 = cast(meta[relay.Constant][23] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %363 = cast(meta[relay.Constant][24] /* ty=Tensor[(35, 4), float64] */, dtype="float64") /* ty=Tensor[(35, 4), float64] */;
  %364 = reshape(%361, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
  %365 = reshape(%362, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %366 = reshape(%363, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %367 = @func_4835(%364, %365, %366) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
  %368 = @func_14483() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(140), float64]) */;
  %369 = not_equal(%359, %360) /* ty=Tensor[(13, 12, 2), bool] */;
  %370 = %367.4;
  %371 = @func_13952() /* ty=Tensor[(6, 3, 8), float32] */;
  %372 = %368.1;
  (%369, %370, meta[relay.Constant][22] /* ty=Tensor[(35), float64] */, meta[relay.Constant][23] /* ty=Tensor[(32), float32] */, meta[relay.Constant][24] /* ty=Tensor[(35, 4), float64] */, %371, %372)
}

def @func_17806() -> (Tensor[(6, 3, 8), float32],) {
  %373 = @func_14852() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %374 = %373.0;
  (%374,)
}

def @func_14512() -> Tensor[(6, 3, 8), float32] {
  @func_14009() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_18006() -> (Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), bool], Tensor[(2, 3, 14), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 9, 3), float64], Tensor[(756), float32]) {
  %375 = @func_13984() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %376 = @func_17036() /* ty=(Tensor[(2, 3, 14), float32], Tensor[(6, 3, 8), float32]) */;
  %377 = %376.0;
  %378 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 3, 14), float32] */, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %382 = cast(%377, dtype="float64") /* ty=Tensor[(2, 3, 14), float64] */;
  %383 = cast(meta[relay.Constant][26] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %384 = reshape(%383, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %385 = @func_685(%384) /* ty=(Tensor[(4, 9, 3), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(9, 14, 6), float32]) */;
  %386 = %375.0;
  %387 = greater(%380, %381) /* ty=Tensor[(2, 3, 14), bool] */;
  %388 = sin(%382) /* ty=Tensor[(2, 3, 14), float64] */;
  %389 = @func_13668() /* ty=Tensor[(6, 3, 8), float32] */;
  %390 = %385.0;
  (%386, %387, %388, %389, %390, meta[relay.Constant][26] /* ty=Tensor[(756), float32] */)
}

def @func_16502() -> Tensor[(8, 4, 16), bool] {
  %391 = @func_16034() /* ty=(Tensor[(8, 4, 16), bool],) */;
  %391.0
}

def @func_7306(%var_7261: Tensor[(9, 3, 13), int32], %var_7262: Tensor[(9, 3, 13), int32], %var_7269: Tensor[(1584), bool]) -> (Tensor[(9, 3, 13), bool], Tensor[(1584), bool], float64, Tensor[(1, 26), float64], Tensor[(1584), bool], Tensor[(900), float32]) {
  %392 = cast(%var_7262, dtype="bool") /* ty=Tensor[(9, 3, 13), bool] */;
  %393 = shape_of(%var_7261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_7261, dtype="bool") /* ty=Tensor[(9, 3, 13), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %396 = cast(7.04343f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %397 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 26), float64] */, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
  %398 = cast(%var_7269, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %399 = cast(meta[relay.Constant][28] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %400 = reshape(%396, newshape=[]) /* ty=float64 */;
  %401 = reshape(%397, newshape=[13, 1, 2]) /* ty=Tensor[(13, 1, 2), float64] */;
  %402 = reshape(%398, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
  %403 = reshape(%399, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %404 = @func_6123(%400, %401, %402, %403) /* ty=(Tensor[(13, 1, 2), bool], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32]) */;
  %405 = not_equal(%394, %395) /* ty=Tensor[(9, 3, 13), bool] */;
  %406 = %404.2;
  (%405, %406, 7.04343f64 /* ty=float64 */, meta[relay.Constant][27] /* ty=Tensor[(1, 26), float64] */, %var_7269, meta[relay.Constant][28] /* ty=Tensor[(900), float32] */)
}

def @func_14393() -> (Tensor[(6, 3, 8), float64], Tensor[(5, ?, 12), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float64]) {
  %407 = cast(meta[relay.Constant][29] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %408 = reshape(%407, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %409 = @func_11979(%408) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(5, ?, 12), float64]) */;
  %410 = @func_13546() /* ty=Tensor[(6, 3, 8), float64] */;
  %411 = %409.2;
  %412 = @func_13546() /* ty=Tensor[(6, 3, 8), float64] */;
  (%410, %411, meta[relay.Constant][29] /* ty=Tensor[(60), float64] */, %412)
}

def @func_17383() -> (Tensor[(3, 117), float32],) {
  %413 = @func_16287() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) */;
  %414 = %413.1;
  (%414,)
}

def @func_18055(%var_18036: float64, %var_18037: Tensor[(26, 1), float64], %var_18038: Tensor[(1584), bool], %var_18039: Tensor[(9, 100), float32]) -> (Tensor[(6, 3, 8), float64], Tensor[(900), float32], float64, Tensor[(26, 1), float64], Tensor[(1584), bool], Tensor[(9, 100), float32], Tensor[(60), float64], Tensor[(60), float64]) {
  %415 = @func_12836() /* ty=(Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) */;
  %416 = cast(%var_18036, dtype="float64") /* ty=float64 */;
  %417 = cast(%var_18037, dtype="float64") /* ty=Tensor[(26, 1), float64] */;
  %418 = cast(%var_18038, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %419 = cast(%var_18039, dtype="float32") /* ty=Tensor[(9, 100), float32] */;
  %420 = reshape(%416, newshape=[]) /* ty=float64 */;
  %421 = reshape(%417, newshape=[13, 1, 2]) /* ty=Tensor[(13, 1, 2), float64] */;
  %422 = reshape(%418, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
  %423 = reshape(%419, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %424 = @func_6123(%420, %421, %422, %423) /* ty=(Tensor[(13, 1, 2), bool], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32]) */;
  %425 = cast(meta[relay.Constant][30] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %426 = reshape(%425, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %427 = @func_14717(%426) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(60), float64]) */;
  %428 = %415.1;
  %429 = %424.3;
  %430 = %427.1;
  (%428, %429, %var_18036, %var_18037, %var_18038, %var_18039, %430, meta[relay.Constant][30] /* ty=Tensor[(60), float64] */)
}

def @func_14776() -> Tensor[(6, 3, 8), float32] {
  %431 = @func_13984() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %431.0
}

def @func_15145() -> (Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) {
  %432 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %433 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %434 = %432.0;
  %435 = %433.1;
  (%434, %435)
}

def @func_15206(%var_15190: Tensor[(11, 7, 16), uint8]) -> Tensor[(11, 7, 16), bool] {
  %436 = cast(%var_15190, dtype="bool") /* ty=Tensor[(11, 7, 16), bool] */;
  %437 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(11, 7, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 7, 16), uint8] */, dtype="bool") /* ty=Tensor[(11, 7, 16), bool] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%438, %439) /* ty=Tensor[(11, 7, 16), bool] */
}

def @func_12775(%var_12762: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) {
  %440 = @func_12689() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */;
  %441 = %440.0;
  %442 = cast(%var_12762, dtype="uint64") /* ty=Tensor[(6, 3, 8), uint64] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="uint64") /* ty=Tensor[(6, 3, 8), uint64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %446 = cast(meta[relay.Constant][32] /* ty=Tensor[(88, 22), uint64] */, dtype="uint64") /* ty=Tensor[(88, 22), uint64] */;
  %447 = reshape(%446, newshape=[1936]) /* ty=Tensor[(1936), uint64] */;
  %448 = @func_12111(%447) /* ty=(Tensor[(6, 3, 8), float64], Tensor[(16, 11, 11), bool], Tensor[(1936), uint64]) */;
  %449 = multiply(%444, %445) /* ty=Tensor[(6, 3, 8), uint64] */;
  %450 = %448.2;
  (%449, %450, meta[relay.Constant][32] /* ty=Tensor[(88, 22), uint64] */)
}

def @func_11822() -> Tensor[(6, 3, 8), float32] {
  %451 = @func_10932() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %451.0
}

def @func_13177() -> (Tensor[(6, 3, 8), float32],) {
  %452 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  (%452,)
}

def @func_19427() -> Tensor[(1280), uint32] {
  %453 = @func_12467() /* ty=(Tensor[(1280), uint32],) */;
  %453.0
}

def @func_15624(%var_15614: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), int32],) {
  %454 = @func_13013() /* ty=Tensor[(6, 3, 8), float32] */;
  %455 = cast(%var_15614, dtype="int32") /* ty=Tensor[(6, 3, 8), int32] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="int32") /* ty=Tensor[(6, 3, 8), int32] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %459 = bitwise_and(%457, %458) /* ty=Tensor[(6, 3, 8), int32] */;
  (%459,)
}

def @func_2501(%var_2498: Tensor[(1200, 1), float64], %var_2499: Tensor[(756), float32]) -> (Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 16, 5), float64], Tensor[(1200, 1), float64], Tensor[(756), float32]) {
  %460 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %461 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %462 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %463 = cast(meta[relay.Constant][34] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %464 = cast(meta[relay.Constant][34] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %465 = reshape(%463, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %466 = reshape(%464, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %467 = @func_71(%465, %466) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %468 = %467.0;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %470 = cast(meta[relay.Constant][34] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %471 = reshape(%469, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %472 = reshape(%470, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %473 = @func_71(%471, %472) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %474 = cast(%var_2498, dtype="float64") /* ty=Tensor[(1200, 1), float64] */;
  %475 = cast(%var_2498, dtype="float64") /* ty=Tensor[(1200, 1), float64] */;
  %476 = cast(%var_2499, dtype="float32") /* ty=Tensor[(756), float32] */;
  %477 = reshape(%474, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %478 = reshape(%475, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %479 = reshape(%476, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %480 = @func_1875(%477, %478, %479) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64]) */;
  %481 = cosh(%460) /* ty=Tensor[(15, 15, 16), float32] */;
  %482 = sinh(%461) /* ty=Tensor[(15, 15, 16), float32] */;
  %483 = exp(%462) /* ty=Tensor[(15, 15, 16), float32] */;
  %484 = %473.0;
  %485 = %480.0;
  (%481, %482, %483, %468, meta[relay.Constant][34] /* ty=Tensor[(900), float32] */, %484, %485, %var_2498, %var_2499)
}

def @func_12265() -> (Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) {
  %486 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 4, 16), float32] */, dtype="bool") /* ty=Tensor[(8, 4, 16), bool] */;
  %487 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(8, 4, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 4, 16), float32] */, dtype="bool") /* ty=Tensor[(8, 4, 16), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %490 = not_equal(%488, %489) /* ty=Tensor[(8, 4, 16), bool] */;
  %491 = @func_11921() /* ty=Tensor[(6, 3, 8), float32] */;
  (%490, %491)
}

def @func_15174() -> Tensor[(6, 3, 8), float32] {
  %492 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %492.0
}

def @func_18093() -> (Tensor[(1584), bool],) {
  %493 = @func_16287() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) */;
  %494 = %493.2;
  (%494,)
}

def @func_13646(%var_13633: Tensor[(60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(60), float64]) {
  %495 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %496 = cast(%var_13633, dtype="float64") /* ty=Tensor[(60), float64] */;
  %497 = reshape(%496, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %498 = @func_11979(%497) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(5, ?, 12), float64]) */;
  %499 = %495.0;
  %500 = %498.0;
  (%499, %500, %var_13633)
}

def @func_16594() -> (Tensor[(6, 3, 8), float32],) {
  %501 = @func_12689() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */;
  %502 = %501.1;
  (%502,)
}

def @func_18082() -> Tensor[(6, 3, 8), float32] {
  %503 = @func_15145() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %503.1
}

def @func_14852() -> (Tensor[(6, 3, 8), float32],) {
  %504 = @func_13668() /* ty=Tensor[(6, 3, 8), float32] */;
  (%504,)
}

def @func_13013() -> Tensor[(6, 3, 8), float32] {
  %505 = @func_12946() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %505.0
}

def @func_19399() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %506 = @func_13668() /* ty=Tensor[(6, 3, 8), float32] */;
  %507 = @func_18082() /* ty=Tensor[(6, 3, 8), float32] */;
  (%506, %507)
}

def @func_71(%var_34: Tensor[(15, 10, 6), float32], %var_35: Tensor[(15, 10, 6), float32]) -> (Tensor[(15, 10, 6), float32],) {
  %508 = cast(%var_35, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %509 = shape_of(%var_34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%var_34, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %512 = floor_divide(%510, %511) /* ty=Tensor[(15, 10, 6), float32] */;
  (%512,)
}

def @func_3245(%var_3227: Tensor[(7, 2, 10), float64], %var_3228: Tensor[(7, 2, 10), float64]) -> (Tensor[(7, 2, 10), float64],) {
  %513 = cast(%var_3228, dtype="float64") /* ty=Tensor[(7, 2, 10), float64] */;
  %514 = shape_of(%var_3227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_3227, dtype="float64") /* ty=Tensor[(7, 2, 10), float64] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %517 = divide(%515, %516) /* ty=Tensor[(7, 2, 10), float64] */;
  (%517,)
}

def @func_17353(%var_17342: Tensor[(128), float64], %var_17343: Tensor[(256), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float64], Tensor[(16, 2, 8), uint8], Tensor[(128), float64], Tensor[(256), float64]) {
  %518 = @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */;
  %519 = cast(%var_17342, dtype="float64") /* ty=Tensor[(128), float64] */;
  %520 = cast(%var_17343, dtype="float64") /* ty=Tensor[(256), float64] */;
  %521 = cast(%var_17343, dtype="float64") /* ty=Tensor[(256), float64] */;
  %522 = reshape(%519, newshape=[16, 1, 8]) /* ty=Tensor[(16, 1, 8), float64] */;
  %523 = reshape(%520, newshape=[16, 2, 8]) /* ty=Tensor[(16, 2, 8), float64] */;
  %524 = reshape(%521, newshape=[16, 2, 8]) /* ty=Tensor[(16, 2, 8), float64] */;
  %525 = @func_14902(%522, %523, %524) /* ty=(Tensor[(16, 2, 8), uint8],) */;
  %526 = @func_12883() /* ty=Tensor[(6, 3, 8), float32] */;
  %527 = %518.3;
  %528 = %525.0;
  (%526, %527, %528, %var_17342, %var_17343)
}

def @func_13139() -> (Tensor[(6, 3, 8), float32],) {
  %529 = @func_13113() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(144), float32]) */;
  %530 = %529.0;
  (%530,)
}

def @func_14009() -> Tensor[(6, 3, 8), float32] {
  %531 = @func_13139() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %531.0
}

def @func_13595() -> (Tensor[(144), float32],) {
  %532 = @func_12836() /* ty=(Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) */;
  %533 = %532.2;
  (%533,)
}

def @func_16536() -> (Tensor[(6, 3, 8), float32], Tensor[(140), float32]) {
  %534 = cast(meta[relay.Constant][37] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %535 = cast(meta[relay.Constant][37] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %536 = reshape(%534, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %537 = reshape(%535, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %538 = @func_3245(%536, %537) /* ty=(Tensor[(7, 2, 10), float64],) */;
  %539 = %538.0;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(7, 2, 10), float32] */;
  %541 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(140), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %542 = cast(meta[relay.Constant][37] /* ty=Tensor[(140), float64] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?), float32] */;
  %544 = @func_14009() /* ty=Tensor[(6, 3, 8), float32] */;
  %545 = floor_mod(%542, %543) /* ty=Tensor[(140), float32] */;
  (%544, %545)
}

def @func_13984() -> (Tensor[(6, 3, 8), float32],) {
  %546 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  (%546,)
}

def @func_16920() -> (Tensor[(6, 3, 8), uint64], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %547 = @func_13350() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), uint64]) */;
  %548 = @func_16072() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %549 = %547.1;
  %550 = @func_14512() /* ty=Tensor[(6, 3, 8), float32] */;
  %551 = %548.0;
  (%549, %550, %551)
}

def @func_16250(%var_16242: Tensor[(1, 60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(1, 60), float64]) {
  %552 = cast(%var_16242, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
  %553 = reshape(%552, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), float64] */;
  %554 = @func_4143(%553) /* ty=(Tensor[(10, 2, 3), float64],) */;
  %555 = @func_14043() /* ty=Tensor[(6, 3, 8), float32] */;
  %556 = %554.0;
  (%555, %556, %var_16242)
}

def @func_17719() -> (Tensor[(6, 3, 8), float32],) {
  %557 = @func_13260() /* ty=Tensor[(6, 3, 8), float32] */;
  (%557,)
}

def @func_13033(%var_13029: Tensor[(35, 4), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(35), float64], Tensor[(35, 4), float64], Tensor[(224), float32], Tensor[(6, 260), uint8]) {
  %558 = cast(meta[relay.Constant][38] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %559 = cast(%var_13029, dtype="float64") /* ty=Tensor[(35, 4), float64] */;
  %560 = cast(meta[relay.Constant][39] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %561 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 260), uint8] */, dtype="uint8") /* ty=Tensor[(6, 260), uint8] */;
  %562 = reshape(%558, newshape=[35]) /* ty=Tensor[(35), float64] */;
  %563 = reshape(%559, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %564 = reshape(%560, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), float32] */;
  %565 = reshape(%561, newshape=[1560]) /* ty=Tensor[(1560), uint8] */;
  %566 = @func_11776(%562, %563, %564, %565) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(5, 28), float64], Tensor[(60), float64], Tensor[(4, 8, 7), bool], Tensor[(4, 8, 35), bool], Tensor[(10, 2, 3), float64], Tensor[(4, 8, 1), float32], Tensor[(140), float64], Tensor[(1560), uint8], Tensor[(4, 8, 35), float32], Tensor[(4, 8, 35), float64]) */;
  %567 = @func_11921() /* ty=Tensor[(6, 3, 8), float32] */;
  %568 = %566.1;
  (%567, %568, meta[relay.Constant][38] /* ty=Tensor[(35), float64] */, %var_13029, meta[relay.Constant][39] /* ty=Tensor[(224), float32] */, meta[relay.Constant][40] /* ty=Tensor[(6, 260), uint8] */)
}

def @func_12368(%var_12351: Tensor[(12, 130), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(140), float64], Tensor[(12, 130), uint8], Tensor[(140), float64], Tensor[(6, 3, 8), float32]) {
  %569 = @func_10932() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %570 = cast(%var_12351, dtype="uint8") /* ty=Tensor[(12, 130), uint8] */;
  %571 = cast(%var_12351, dtype="uint8") /* ty=Tensor[(12, 130), uint8] */;
  %572 = cast(meta[relay.Constant][41] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %573 = reshape(%570, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), uint8] */;
  %574 = reshape(%571, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), uint8] */;
  %575 = reshape(%572, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %576 = @func_10351(%573, %574, %575) /* ty=(Tensor[(351), int32], Tensor[(1584), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64], Tensor[(7, 2, 10), float64], Tensor[(15, 8, 13), int16]) */;
  %577 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %578 = %569.0;
  %579 = %576.3;
  %580 = %577.1;
  (%578, %579, %var_12351, meta[relay.Constant][41] /* ty=Tensor[(140), float64] */, %580)
}

def @func_13260() -> Tensor[(6, 3, 8), float32] {
  @func_11921() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_16718() -> Tensor[(6, 3, 8), float32] {
  @func_13952() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_394(%var_391: Tensor[(9, 14, 6), float32]) -> Tensor[(9, 14, 6), float32] {
  %581 = cast(%var_391, dtype="float32") /* ty=Tensor[(9, 14, 6), float32] */;
  atanh(%581) /* ty=Tensor[(9, 14, 6), float32] */
}

def @func_14043() -> Tensor[(6, 3, 8), float32] {
  %582 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %582.0
}

def @func_13546() -> Tensor[(6, 3, 8), float64] {
  %583 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
  sinh(%584) /* ty=Tensor[(6, 3, 8), float64] */
}

def @func_685(%var_679: Tensor[(756), float32]) -> (Tensor[(4, 9, 3), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(9, 14, 6), float32]) {
  %585 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 9, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 9, 3), float64] */;
  %586 = cast(%var_679, dtype="float32") /* ty=Tensor[(756), float32] */;
  %587 = reshape(%586, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float32] */;
  %588 = @func_394(%587) /* ty=Tensor[(9, 14, 6), float32] */;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(9, 14, 6), float32] */;
  %590 = reshape(%589, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float32] */;
  %591 = acosh(%585) /* ty=Tensor[(4, 9, 3), float64] */;
  %592 = @func_394(%590) /* ty=Tensor[(9, 14, 6), float32] */;
  (%591, %588, %var_679, %592)
}

def @func_7975(%var_7966: uint32, %var_7967: Tensor[(1, 10, 2), uint32]) -> Tensor[(1, 10, 2), uint32] {
  %593 = cast(%var_7966, dtype="uint32") /* ty=uint32 */;
  %594 = cast(%var_7967, dtype="uint32") /* ty=Tensor[(1, 10, 2), uint32] */;
  bitwise_or(%593, %594) /* ty=Tensor[(1, 10, 2), uint32] */
}

def @func_17040() -> Tensor[(144), float32] {
  %595 = @func_14130() /* ty=(Tensor[(144), float32],) */;
  %595.0
}

def @func_18373(%var_18369: Tensor[(338), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool], Tensor[(512), uint32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) {
  %596 = @func_14058() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %597 = cast(meta[relay.Constant][43] /* ty=Tensor[(512), uint32] */, dtype="uint32") /* ty=Tensor[(512), uint32] */;
  %598 = reshape(%597, newshape=[256, 2]) /* ty=Tensor[(256, 2), uint32] */;
  %599 = @func_11027(%598) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool]) */;
  %600 = cast(%var_18369, dtype="float32") /* ty=Tensor[(338), float32] */;
  %601 = reshape(%600, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float32] */;
  %602 = %596.0;
  %603 = %599.1;
  %604 = @func_1498(%601) /* ty=Tensor[(13, 13, 2), float32] */;
  (%602, %603, meta[relay.Constant][43] /* ty=Tensor[(512), uint32] */, %604, %var_18369)
}

def @func_14828() -> (Tensor[(6, 3, 8), float32],) {
  %605 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %606 = %605.0;
  (%606,)
}

def @func_17519() -> Tensor[(6, 3, 8), float32] {
  %607 = @func_11786() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %607.0
}

def @func_4143(%var_4135: Tensor[(10, 2, 3), float64]) -> (Tensor[(10, 2, 3), float64],) {
  %608 = cast(%var_4135, dtype="float64") /* ty=Tensor[(10, 2, 3), float64] */;
  %609 = atanh(%608) /* ty=Tensor[(10, 2, 3), float64] */;
  (%609,)
}

def @func_4835(%var_4798: Tensor[(7, 5, 1), float64], %var_4806: Tensor[(32), float32], %var_4814: Tensor[(5, 28), float64]) -> (Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) {
  %610 = cast(%var_4798, dtype="float64") /* ty=Tensor[(7, 5, 1), float64] */;
  %611 = cast(%var_4806, dtype="float32") /* ty=Tensor[(32), float32] */;
  %612 = reshape(%611, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), float32] */;
  %613 = @func_2803(%612) /* ty=(Tensor[(4, 8, 1), float32],) */;
  %614 = cast(%var_4814, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %615 = cast(%var_4814, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %616 = reshape(%614, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %617 = reshape(%615, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %618 = @func_3245(%616, %617) /* ty=(Tensor[(7, 2, 10), float64],) */;
  %619 = cast(meta[relay.Constant][44] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %620 = reshape(%619, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), float64] */;
  %621 = @func_4143(%620) /* ty=(Tensor[(10, 2, 3), float64],) */;
  %622 = exp(%610) /* ty=Tensor[(7, 5, 1), float64] */;
  %623 = %613.0;
  %624 = %618.0;
  %625 = %621.0;
  (%622, %623, %var_4806, %624, %var_4814, %625, meta[relay.Constant][44] /* ty=Tensor[(60), float64] */)
}

def @func_18413() -> (Tensor[(6, 3, 8), float32],) {
  %626 = @func_16830() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %627 = %626.0;
  (%627,)
}

def @func_15856(%var_15796: Tensor[(2, 4, 5), int32]) -> (Tensor[(8, 4, 16), bool], Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32], Tensor[(144), float32], Tensor[(2, 4, 5), uint32], Tensor[(6, 3, 8), float32], Tensor[(3, 20), float64]) {
  %628 = @func_14130() /* ty=(Tensor[(144), float32],) */;
  %629 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 4, 5), int32] */, dtype="int32") /* ty=Tensor[(2, 4, 5), int32] */;
  %630 = shape_of(%var_15796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%var_15796, dtype="int32") /* ty=Tensor[(2, 4, 5), int32] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %633 = minimum(%631, %632) /* ty=Tensor[(2, 4, 5), int32] */;
  %634 = cast(%633, dtype="uint32") /* ty=Tensor[(2, 4, 5), uint32] */;
  %635 = shape_of(%var_15796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_15796, dtype="uint32") /* ty=Tensor[(2, 4, 5), uint32] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %638 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 20), float64] */, dtype="float64") /* ty=Tensor[(3, 20), float64] */;
  %639 = reshape(%638, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %640 = @func_14717(%639) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(60), float64]) */;
  %641 = @func_12903() /* ty=Tensor[(8, 4, 16), bool] */;
  %642 = @func_12321() /* ty=Tensor[(8, 4, 16), bool] */;
  %643 = @func_14009() /* ty=Tensor[(6, 3, 8), float32] */;
  %644 = %628.0;
  %645 = bitwise_xor(%636, %637) /* ty=Tensor[(2, 4, 5), uint32] */;
  %646 = %640.0;
  (%641, %642, %643, %644, %645, %646, meta[relay.Constant][46] /* ty=Tensor[(3, 20), float64] */)
}

def @func_6123(%var_6107: float64, %var_6108: Tensor[(13, 1, 2), float64], %var_6115: Tensor[(1584), bool], %var_6116: Tensor[(900), float32]) -> (Tensor[(13, 1, 2), bool], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32]) {
  %647 = cast(%var_6107, dtype="bool") /* ty=bool */;
  %648 = cast(%var_6108, dtype="bool") /* ty=Tensor[(13, 1, 2), bool] */;
  %649 = cast(%var_6115, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %650 = cast(%var_6115, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %651 = cast(%var_6116, dtype="float32") /* ty=Tensor[(900), float32] */;
  %652 = reshape(%649, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
  %653 = reshape(%650, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
  %654 = reshape(%651, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %655 = @func_371(%652, %653, %654) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) */;
  %656 = not_equal(%647, %648) /* ty=Tensor[(13, 1, 2), bool] */;
  %657 = %655.3;
  (%656, %657, %var_6115, %var_6116)
}

def @func_11396(%var_11379: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), float32],) {
  %658 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %659 = %658.0;
  %660 = cast(%var_11379, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %664 = subtract(%662, %663) /* ty=Tensor[(6, 3, 8), float32] */;
  (%664,)
}

def @func_12903() -> Tensor[(8, 4, 16), bool] {
  @func_12321() /* ty=Tensor[(8, 4, 16), bool] */
}

def @func_12946() -> (Tensor[(6, 3, 8), float32],) {
  %665 = @func_11822() /* ty=Tensor[(6, 3, 8), float32] */;
  (%665,)
}

def @func_18996() -> (Tensor[(3, 117), float32], Tensor[(8, 4, 16), bool]) {
  %666 = @func_17383() /* ty=(Tensor[(3, 117), float32],) */;
  %667 = @func_14792() /* ty=(Tensor[(8, 4, 16), bool],) */;
  %668 = %666.0;
  %669 = %667.0;
  (%668, %669)
}

def @func_17736() -> (Tensor[(6, 3, 8), float32],) {
  %670 = @func_12053() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %671 = %670.0;
  (%671,)
}

def @func_18275() -> (Tensor[(6, 3, 8), float32], Tensor[(4, 9, 3), bool]) {
  %672 = @func_18006() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), bool], Tensor[(2, 3, 14), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 9, 3), float64], Tensor[(756), float32]) */;
  %673 = %672.4;
  %674 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 9, 3), float64] */, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%673, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %678 = @func_12883() /* ty=Tensor[(6, 3, 8), float32] */;
  %679 = not_equal(%676, %677) /* ty=Tensor[(4, 9, 3), bool] */;
  (%678, %679)
}

def @func_11148(%var_11140: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), float64],) {
  %680 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %681 = %680.0;
  %682 = cast(%var_11140, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %686 = divide(%684, %685) /* ty=Tensor[(6, 3, 8), float64] */;
  (%686,)
}

def @func_12457() -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) {
  %687 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %688 = @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */;
  %689 = %687.0;
  %690 = %688.1;
  (%689, %690)
}

def @func_11776(%var_11670: Tensor[(35), float64], %var_11672: Tensor[(5, 28), float64], %var_11688: Tensor[(4, 8, 7), float32], %var_11728: Tensor[(1560), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(5, 28), float64], Tensor[(60), float64], Tensor[(4, 8, 7), bool], Tensor[(4, 8, 35), bool], Tensor[(10, 2, 3), float64], Tensor[(4, 8, 1), float32], Tensor[(140), float64], Tensor[(1560), uint8], Tensor[(4, 8, 35), float32], Tensor[(4, 8, 35), float64]) {
  %691 = @func_10932() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %692 = cast(%var_11670, dtype="float64") /* ty=Tensor[(35), float64] */;
  %693 = cast(%var_11670, dtype="float64") /* ty=Tensor[(35), float64] */;
  %694 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 8), float32] */;
  %695 = cast(%var_11672, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %696 = reshape(%693, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
  %697 = reshape(%694, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %698 = reshape(%695, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %699 = @func_4835(%696, %697, %698) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
  %700 = %699.1;
  %701 = cast(%700, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
  %702 = cast(%var_11672, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %703 = reshape(%692, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
  %704 = reshape(%701, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %705 = reshape(%702, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %706 = @func_4835(%703, %704, %705) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
  %707 = cast(%700, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
  %708 = cast(%var_11688, dtype="bool") /* ty=Tensor[(4, 8, 7), bool] */;
  %709 = cast(%var_11670, dtype="bool") /* ty=Tensor[(35), bool] */;
  %710 = cast(%700, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
  %711 = less(%709, %710) /* ty=Tensor[(4, 8, 35), bool] */;
  %712 = cast(%711, dtype="float64") /* ty=Tensor[(4, 8, 35), float64] */;
  %713 = log(%712) /* ty=Tensor[(4, 8, 35), float64] */;
  %714 = cast(%713, dtype="bool") /* ty=Tensor[(4, 8, 35), bool] */;
  %715 = cast(%700, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
  %716 = %706.6;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(60), float64] */;
  %718 = reshape(%717, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), float64] */;
  %719 = @func_4143(%718) /* ty=(Tensor[(10, 2, 3), float64],) */;
  %720 = cast(%var_11670, dtype="float64") /* ty=Tensor[(35), float64] */;
  %721 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 8), float32] */;
  %722 = cast(%var_11672, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %723 = reshape(%720, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
  %724 = reshape(%721, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %725 = reshape(%722, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %726 = @func_4835(%723, %724, %725) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
  %727 = cast(%var_11728, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %728 = cast(%var_11728, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %729 = cast(%var_11672, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %730 = reshape(%727, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), uint8] */;
  %731 = reshape(%728, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), uint8] */;
  %732 = reshape(%729, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %733 = @func_10351(%730, %731, %732) /* ty=(Tensor[(351), int32], Tensor[(1584), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64], Tensor[(7, 2, 10), float64], Tensor[(15, 8, 13), int16]) */;
  %734 = cast(%713, dtype="float32") /* ty=Tensor[(4, 8, 35), float32] */;
  %735 = acos(%734) /* ty=Tensor[(4, 8, 35), float32] */;
  %736 = cast(%735, dtype="float64") /* ty=Tensor[(4, 8, 35), float64] */;
  %737 = cast(%var_11670, dtype="float64") /* ty=Tensor[(35), float64] */;
  %738 = divide(%736, %737) /* ty=Tensor[(4, 8, 35), float64] */;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(4, 8, 35), float32] */;
  %740 = cast(%738, dtype="float64") /* ty=Tensor[(4, 8, 35), float64] */;
  %741 = sin(%740) /* ty=Tensor[(4, 8, 35), float64] */;
  %742 = cast(%741, dtype="float64") /* ty=Tensor[(4, 8, 35), float64] */;
  %743 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%735, dtype="float64") /* ty=Tensor[(4, 8, 35), float64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %746 = %691.0;
  %747 = not_equal(%707, %708) /* ty=Tensor[(4, 8, 7), bool] */;
  %748 = greater(%714, %715) /* ty=Tensor[(4, 8, 35), bool] */;
  %749 = %719.0;
  %750 = %726.1;
  %751 = %733.3;
  %752 = sinh(%739) /* ty=Tensor[(4, 8, 35), float32] */;
  %753 = mod(%744, %745) /* ty=Tensor[(4, 8, 35), float64] */;
  (%746, meta[relay.Constant][48] /* ty=Tensor[(4, 8), float32] */, %var_11672, %716, %747, %748, %749, %750, %751, %var_11728, %752, %753)
}

def @func_2803(%var_2798: Tensor[(4, 8, 1), float32]) -> (Tensor[(4, 8, 1), float32],) {
  %754 = cast(%var_2798, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
  %755 = rsqrt(%754) /* ty=Tensor[(4, 8, 1), float32] */;
  (%755,)
}

def @func_1498(%var_1493: Tensor[(13, 13, 2), float32]) -> Tensor[(13, 13, 2), float32] {
  %756 = cast(%var_1493, dtype="float32") /* ty=Tensor[(13, 13, 2), float32] */;
  sin(%756) /* ty=Tensor[(13, 13, 2), float32] */
}

def @func_11979(%var_11959: Tensor[(60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(5, ?, 12), float64]) {
  %757 = @func_11135() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %758 = cast(%var_11959, dtype="float64") /* ty=Tensor[(60), float64] */;
  %759 = reshape(%758, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), float64] */;
  %760 = @func_5376(%759) /* ty=(Tensor[(5, ?, 12), uint64], Tensor[(5, ?, 12), uint32]) */;
  %761 = %760.1;
  %762 = cast(%761, dtype="float32") /* ty=Tensor[(5, ?, 12), float32] */;
  %763 = rsqrt(%762) /* ty=Tensor[(5, ?, 12), float32] */;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(5, ?, 12), float64] */;
  %765 = %757.0;
  %766 = tan(%764) /* ty=Tensor[(5, ?, 12), float64] */;
  (%765, %var_11959, %766)
}

def @func_16349() -> (Tensor[(2, 3, 14), float32],) {
  %767 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 3, 14), float32] */;
  %768 = cos(%767) /* ty=Tensor[(2, 3, 14), float32] */;
  (%768,)
}

def @func_371(%var_338: Tensor[(16, 11, 9), bool], %var_339: Tensor[(16, 11, 9), bool], %var_353: Tensor[(900), float32]) -> (Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) {
  %769 = cast(%var_339, dtype="bool") /* ty=Tensor[(16, 11, 9), bool] */;
  %770 = shape_of(%var_338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%var_338, dtype="bool") /* ty=Tensor[(16, 11, 9), bool] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %773 = cast(%var_353, dtype="float32") /* ty=Tensor[(900), float32] */;
  %774 = cast(%var_353, dtype="float32") /* ty=Tensor[(900), float32] */;
  %775 = reshape(%773, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %776 = reshape(%774, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %777 = @func_71(%775, %776) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %778 = %777.0;
  %779 = cast(%778, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %780 = cast(%778, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %781 = reshape(%779, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %782 = reshape(%780, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %783 = @func_71(%781, %782) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %784 = cast(%778, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %785 = %783.0;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %787 = reshape(%784, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %788 = reshape(%786, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %789 = @func_71(%787, %788) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %790 = logical_or(%771, %772) /* ty=Tensor[(16, 11, 9), bool] */;
  %791 = %789.0;
  (%790, %778, %var_353, %785, %791)
}

def @func_12467() -> (Tensor[(1280), uint32],) {
  %792 = @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */;
  %793 = %792.2;
  (%793,)
}

def @func_18774(%var_18703: Tensor[(192, 1), uint16], %var_18704: Tensor[(2, 640), uint32], %var_18705: Tensor[(35), float64]) -> (Tensor[(8, 4, 16), bool], Tensor[(2, 640), uint32], Tensor[(35), float64], Tensor[(6, 3, 8), float64], Tensor[(16, 16, 2), uint32], Tensor[(192, 35), float32]) {
  %794 = @func_14393() /* ty=(Tensor[(6, 3, 8), float64], Tensor[(5, ?, 12), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float64]) */;
  %795 = @func_16502() /* ty=Tensor[(8, 4, 16), bool] */;
  %796 = cast(%795, dtype="uint32") /* ty=Tensor[(8, 4, 16), uint32] */;
  %797 = cast(%795, dtype="uint32") /* ty=Tensor[(8, 4, 16), uint32] */;
  %798 = reshape(%796, newshape=[16, 16, 2]) /* ty=Tensor[(16, 16, 2), uint32] */;
  %799 = reshape(%797, newshape=[16, 16, 2]) /* ty=Tensor[(16, 16, 2), uint32] */;
  %800 = cast(%var_18703, dtype="uint16") /* ty=Tensor[(192, 1), uint16] */;
  %801 = cast(%var_18703, dtype="uint16") /* ty=Tensor[(192, 1), uint16] */;
  %802 = cast(%var_18704, dtype="uint32") /* ty=Tensor[(2, 640), uint32] */;
  %803 = cast(%var_18705, dtype="float64") /* ty=Tensor[(35), float64] */;
  %804 = reshape(%800, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), uint16] */;
  %805 = reshape(%801, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), uint16] */;
  %806 = reshape(%802, newshape=[1280]) /* ty=Tensor[(1280), uint32] */;
  %807 = reshape(%803, newshape=[35]) /* ty=Tensor[(35), float64] */;
  %808 = @func_4914(%804, %805, %806, %807) /* ty=(Tensor[(16, 3, 4), float64], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32, 1), float32], Tensor[(35, 4), float64]) */;
  %809 = %808.4;
  %810 = cast(%809, dtype="uint32") /* ty=Tensor[(35), uint32] */;
  %811 = cast(%var_18703, dtype="uint32") /* ty=Tensor[(192, 1), uint32] */;
  %812 = bitwise_xor(%810, %811) /* ty=Tensor[(192, 35), uint32] */;
  %813 = cast(%812, dtype="float32") /* ty=Tensor[(192, 35), float32] */;
  %814 = %794.0;
  %815 = @func_5578(%798, %799) /* ty=Tensor[(16, 16, 2), uint32] */;
  %816 = rsqrt(%813) /* ty=Tensor[(192, 35), float32] */;
  (%795, %var_18704, %var_18705, %814, %815, %816)
}

def @func_16287() -> (Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) {
  %817 = @func_15145() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %818 = cast(meta[relay.Constant][50] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %819 = reshape(%818, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
  %820 = @func_12542(%819) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(1584), bool], Tensor[(140), float64], Tensor[(6, 260), uint8], Tensor[(3, 117), float32], Tensor[(3, 117), float32], Tensor[(5, ?, 12), float32], Tensor[(8, 4, 16), bool]) */;
  %821 = %817.0;
  %822 = %820.5;
  (%821, %822, meta[relay.Constant][50] /* ty=Tensor[(1584), bool] */)
}

def @func_14058() -> (Tensor[(6, 3, 8), float32],) {
  %823 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %824 = %823.0;
  (%824,)
}

def @func_18487() -> (Tensor[(144), float32], Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(1560), uint8]) {
  %825 = @func_13177() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %826 = cast(meta[relay.Constant][51] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %827 = cast(meta[relay.Constant][52] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %828 = reshape(%826, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %829 = reshape(%827, newshape=[6, 260]) /* ty=Tensor[(6, 260), uint8] */;
  %830 = @func_13900(%828, %829) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float32], Tensor[(6, 260), uint8]) */;
  %831 = @func_17040() /* ty=Tensor[(144), float32] */;
  %832 = %825.0;
  %833 = %830.1;
  (%831, %832, %833, meta[relay.Constant][51] /* ty=Tensor[(60), float64] */, meta[relay.Constant][52] /* ty=Tensor[(1560), uint8] */)
}

def @func_1875(%var_1853: Tensor[(15, 16, 5), float64], %var_1854: Tensor[(15, 16, 5), float64], %var_1860: Tensor[(756), float32]) -> (Tensor[(15, 16, 5), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64]) {
  %834 = cast(%var_1854, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %835 = shape_of(%var_1853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%var_1853, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %838 = cast(%var_1860, dtype="float32") /* ty=Tensor[(756), float32] */;
  %839 = reshape(%838, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float32] */;
  %840 = cast(%var_1854, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %841 = floor_mod(%836, %837) /* ty=Tensor[(15, 16, 5), float64] */;
  %842 = @func_394(%839) /* ty=Tensor[(9, 14, 6), float32] */;
  %843 = log2(%840) /* ty=Tensor[(15, 16, 5), float64] */;
  (%841, %842, %var_1860, %843)
}

def @func_12182() -> Tensor[(6, 3, 8), float32] {
  %844 = @func_11135() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %844.0
}

def @func_11128(%var_11121: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), uint8],) {
  %845 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %846 = %845.0;
  %847 = cast(%var_11121, dtype="uint8") /* ty=Tensor[(6, 3, 8), uint8] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%846, dtype="uint8") /* ty=Tensor[(6, 3, 8), uint8] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %851 = add(%849, %850) /* ty=Tensor[(6, 3, 8), uint8] */;
  (%851,)
}

def @func_19071() -> Tensor[(8, 4, 16), bool] {
  %852 = @func_16287() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) */;
  %852.0
}

def @main(%var_19439: Tensor[(32), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(26), float64], Tensor[(900, 1), float32], Tensor[(32), float32], Tensor[(6, 3, 8), float32], Tensor[(4, 8, ?), int64]) {
  %853 = @func_13177() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %854 = cast(meta[relay.Constant][53] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %855 = cast(meta[relay.Constant][54] /* ty=Tensor[(900, 1), float32] */, dtype="float32") /* ty=Tensor[(900, 1), float32] */;
  %856 = cast(%var_19439, dtype="float32") /* ty=Tensor[(32), float32] */;
  %857 = reshape(%854, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %858 = reshape(%855, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %859 = reshape(%856, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %860 = @func_16635(%857, %858, %859) /* ty=(Tensor[(1280), uint32], Tensor[(1584), bool], Tensor[(900), float32], float64, Tensor[(26), float64], Tensor[(900), float32], Tensor[(4, 8, 1), float32], Tensor[(32), float32]) */;
  %861 = %860.6;
  %862 = cast(%861, dtype="float64") /* ty=Tensor[(4, 8, 1), float64] */;
  %863 = sqrt(%862) /* ty=Tensor[(4, 8, 1), float64] */;
  %864 = cast(%861, dtype="int64") /* ty=Tensor[(4, 8, 1), int64] */;
  %865 = shape_of(%863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %866 = cast(%863, dtype="int64") /* ty=Tensor[(4, 8, 1), int64] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %868 = @func_14009() /* ty=Tensor[(6, 3, 8), float32] */;
  %869 = %853.0;
  %870 = bitwise_or(%866, %867) /* ty=Tensor[(4, 8, ?), int64] */;
  (%868, meta[relay.Constant][53] /* ty=Tensor[(26), float64] */, meta[relay.Constant][54] /* ty=Tensor[(900, 1), float32] */, %var_19439, %869, %870)
}

def @func_14483() -> (Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(140), float64]) {
  %871 = cast(meta[relay.Constant][55] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %872 = reshape(%871, newshape=[35, 4]) /* ty=Tensor[(35, 4), float64] */;
  %873 = @func_13033(%872) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(35), float64], Tensor[(35, 4), float64], Tensor[(224), float32], Tensor[(6, 260), uint8]) */;
  %874 = @func_14043() /* ty=Tensor[(6, 3, 8), float32] */;
  %875 = %873.1;
  (%874, %875, meta[relay.Constant][55] /* ty=Tensor[(140), float64] */)
}

def @func_16014() -> Tensor[(6, 3, 8), float32] {
  %876 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %876.0
}

def @func_15712() -> (Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) {
  %877 = @func_14792() /* ty=(Tensor[(8, 4, 16), bool],) */;
  %878 = @func_13984() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %879 = %877.0;
  %880 = %878.0;
  (%879, %880)
}

def @func_12595(%var_12568: uint32) -> (Tensor[(8, 4, 16), bool], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) {
  %881 = cast(%var_12568, dtype="uint32") /* ty=uint32 */;
  %882 = cast(meta[relay.Constant][56] /* ty=Tensor[(20), uint32] */, dtype="uint32") /* ty=Tensor[(20), uint32] */;
  %883 = reshape(%881, newshape=[]) /* ty=uint32 */;
  %884 = reshape(%882, newshape=[20]) /* ty=Tensor[(20), uint32] */;
  %885 = @func_11448(%883, %884) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) */;
  %886 = @func_12321() /* ty=Tensor[(8, 4, 16), bool] */;
  %887 = %885.4;
  (%886, %887, %var_12568, meta[relay.Constant][56] /* ty=Tensor[(20), uint32] */)
}

def @func_12836() -> (Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) {
  %888 = @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */;
  %889 = cast(meta[relay.Constant][57] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %890 = reshape(%889, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %891 = @func_11148(%890) /* ty=(Tensor[(6, 3, 8), float64],) */;
  %892 = %888.2;
  %893 = %891.0;
  (%892, %893, meta[relay.Constant][57] /* ty=Tensor[(144), float32] */)
}

def @func_17083() -> (Tensor[(6, 3, 8), float32],) {
  %894 = @func_15145() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %895 = %894.1;
  (%895,)
}

def @func_17294(%var_17289: Tensor[(756), float32]) -> (Tensor[(6, 3, 8), float64], Tensor[(10, 8, 4), int16], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(756), float32]) {
  %896 = @func_13319() /* ty=(Tensor[(6, 3, 8), float64], Tensor[(6, 3, 8), float32]) */;
  %897 = @func_16185() /* ty=(Tensor[(10, 8, 4), int16], Tensor[(144), float32], Tensor[(6, 3, 8), float32]) */;
  %898 = cast(%var_17289, dtype="float32") /* ty=Tensor[(756), float32] */;
  %899 = reshape(%898, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %900 = @func_685(%899) /* ty=(Tensor[(4, 9, 3), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(9, 14, 6), float32]) */;
  %901 = %896.0;
  %902 = %897.0;
  %903 = @func_12883() /* ty=Tensor[(6, 3, 8), float32] */;
  %904 = %900.3;
  (%901, %902, %903, %904, %var_17289)
}

def @func_11633(%var_11607: Tensor[(338), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(1200), float64], Tensor[(3, 252), float32]) {
  %905 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %906 = cast(%var_11607, dtype="float32") /* ty=Tensor[(338), float32] */;
  %907 = reshape(%906, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float32] */;
  %908 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %909 = cast(meta[relay.Constant][58] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %910 = cast(meta[relay.Constant][58] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %911 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 252), float32] */, dtype="float32") /* ty=Tensor[(3, 252), float32] */;
  %912 = reshape(%909, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %913 = reshape(%910, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %914 = reshape(%911, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %915 = @func_1875(%912, %913, %914) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64]) */;
  %916 = %905.0;
  %917 = @func_1498(%907) /* ty=Tensor[(13, 13, 2), float32] */;
  %918 = %908.0;
  %919 = %915.1;
  (%916, %917, %var_11607, %918, %919, meta[relay.Constant][58] /* ty=Tensor[(1200), float64] */, meta[relay.Constant][59] /* ty=Tensor[(3, 252), float32] */)
}

def @func_16749() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %920 = @func_16185() /* ty=(Tensor[(10, 8, 4), int16], Tensor[(144), float32], Tensor[(6, 3, 8), float32]) */;
  %921 = %920.2;
  %922 = @func_16661() /* ty=Tensor[(6, 3, 8), float32] */;
  (%921, %922)
}

def @func_12321() -> Tensor[(8, 4, 16), bool] {
  %923 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %923.0
}

def @func_16034() -> (Tensor[(8, 4, 16), bool],) {
  %924 = @func_12321() /* ty=Tensor[(8, 4, 16), bool] */;
  (%924,)
}

def @func_15897(%var_15891: uint32) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], uint32, Tensor[(20), uint32], Tensor[(6, 3, 8), uint8]) {
  %925 = @func_13139() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %926 = cast(%var_15891, dtype="uint32") /* ty=uint32 */;
  %927 = cast(meta[relay.Constant][60] /* ty=Tensor[(20), uint32] */, dtype="uint32") /* ty=Tensor[(20), uint32] */;
  %928 = reshape(%926, newshape=[]) /* ty=uint32 */;
  %929 = reshape(%927, newshape=[20]) /* ty=Tensor[(20), uint32] */;
  %930 = @func_11448(%928, %929) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) */;
  %931 = %925.0;
  %932 = cast(%931, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %933 = reshape(%932, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %934 = @func_11128(%933) /* ty=(Tensor[(6, 3, 8), uint8],) */;
  %935 = %930.0;
  %936 = %934.0;
  (%931, %935, %var_15891, meta[relay.Constant][60] /* ty=Tensor[(20), uint32] */, %936)
}

def @func_12758() -> (Tensor[(6, 3, 8), float32], Tensor[(12, 16, 9), float64], float64, Tensor[(15, 10, 6), float32], Tensor[(900), float32]) {
  %937 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %938 = cast(-9.54907f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %939 = reshape(%938, newshape=[]) /* ty=float64 */;
  %940 = @func_6243(%939) /* ty=(Tensor[(12, 16, 9), float64],) */;
  %941 = cast(meta[relay.Constant][61] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %942 = cast(meta[relay.Constant][61] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %943 = reshape(%941, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %944 = reshape(%942, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %945 = @func_71(%943, %944) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %946 = %937.1;
  %947 = %940.0;
  %948 = %945.0;
  (%946, %947, -9.54907f64 /* ty=float64 */, %948, meta[relay.Constant][61] /* ty=Tensor[(900), float32] */)
}

def @func_15041(%var_15008: Tensor[(756), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(9, 14, 6), float64]) {
  %949 = @func_13350() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), uint64]) */;
  %950 = cast(%var_15008, dtype="float32") /* ty=Tensor[(756), float32] */;
  %951 = reshape(%950, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %952 = @func_685(%951) /* ty=(Tensor[(4, 9, 3), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(9, 14, 6), float32]) */;
  %953 = cast(%var_15008, dtype="float32") /* ty=Tensor[(756), float32] */;
  %954 = reshape(%953, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float32] */;
  %955 = @func_394(%954) /* ty=Tensor[(9, 14, 6), float32] */;
  %956 = cast(%var_15008, dtype="float64") /* ty=Tensor[(756), float64] */;
  %957 = shape_of(%955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%955, dtype="float64") /* ty=Tensor[(9, 14, 6), float64] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %960 = @func_13952() /* ty=Tensor[(6, 3, 8), float32] */;
  %961 = %949.0;
  %962 = %952.3;
  %963 = floor_mod(%958, %959) /* ty=Tensor[(9, 14, 6), float64] */;
  (%960, %961, %962, %963)
}

def @func_17237() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %964 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %965 = @func_17036() /* ty=(Tensor[(2, 3, 14), float32], Tensor[(6, 3, 8), float32]) */;
  %966 = %964.0;
  %967 = %965.1;
  (%966, %967)
}

def @func_14444() -> Tensor[(6, 3, 8), float32] {
  @func_14043() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_18555() -> (Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool]) {
  %968 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %969 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %970 = %968.0;
  %971 = %969.0;
  (%970, %971)
}

def @func_14784() -> Tensor[(6, 3, 8), float32] {
  @func_14009() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_18156(%var_18128: Tensor[(26, 13), float32], %var_18136: Tensor[(660), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(338), float32], Tensor[(26, 13), float32], Tensor[(8, 4, 16), bool], Tensor[(4, 11, 15), float32], Tensor[(660), float32]) {
  %972 = cast(%var_18128, dtype="float32") /* ty=Tensor[(26, 13), float32] */;
  %973 = reshape(%972, newshape=[338]) /* ty=Tensor[(338), float32] */;
  %974 = @func_14266(%973) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) */;
  %975 = cast(%var_18136, dtype="float32") /* ty=Tensor[(660), float32] */;
  %976 = reshape(%975, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %977 = @func_18082() /* ty=Tensor[(6, 3, 8), float32] */;
  %978 = %974.2;
  %979 = @func_12321() /* ty=Tensor[(8, 4, 16), bool] */;
  %980 = @func_5951(%976) /* ty=Tensor[(4, 11, 15), float32] */;
  (%977, %978, %var_18128, %979, %980, %var_18136)
}

def @func_13871(%var_13857: Tensor[(1584), bool]) -> (Tensor[(1280), uint32], Tensor[(8, 4, 16), bool], Tensor[(1584), bool]) {
  %981 = @func_12467() /* ty=(Tensor[(1280), uint32],) */;
  %982 = cast(%var_13857, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %983 = reshape(%982, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
  %984 = @func_12542(%983) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(1584), bool], Tensor[(140), float64], Tensor[(6, 260), uint8], Tensor[(3, 117), float32], Tensor[(3, 117), float32], Tensor[(5, ?, 12), float32], Tensor[(8, 4, 16), bool]) */;
  %985 = %981.0;
  %986 = %984.7;
  (%985, %986, %var_13857)
}

def @func_16072() -> (Tensor[(6, 3, 8), float32],) {
  %987 = @func_15174() /* ty=Tensor[(6, 3, 8), float32] */;
  (%987,)
}

def @func_13924() -> (Tensor[(6, 3, 8), float64],) {
  %988 = @func_12836() /* ty=(Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) */;
  %989 = %988.1;
  (%989,)
}

def @func_15304() -> (Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(6, 3, 8), float32], Tensor[(512), uint32], Tensor[(10, 8, 4), float32], Tensor[(900), float32], Tensor[(1200), float64]) {
  %990 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %991 = cast(meta[relay.Constant][62] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %992 = cast(meta[relay.Constant][62] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %993 = cast(meta[relay.Constant][63] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %994 = reshape(%991, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
  %995 = reshape(%992, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
  %996 = reshape(%993, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %997 = @func_371(%994, %995, %996) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) */;
  %998 = cast(meta[relay.Constant][64] /* ty=Tensor[(512), uint32] */, dtype="uint32") /* ty=Tensor[(512), uint32] */;
  %999 = reshape(%998, newshape=[256, 2]) /* ty=Tensor[(256, 2), uint32] */;
  %1000 = @func_11027(%999) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool]) */;
  %1001 = @func_14673() /* ty=Tensor[(10, 8, 4), int16] */;
  %1002 = cast(%1001, dtype="float64") /* ty=Tensor[(10, 8, 4), float64] */;
  %1003 = sinh(%1002) /* ty=Tensor[(10, 8, 4), float64] */;
  %1004 = cast(%1003, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
  %1005 = %997.1;
  %1006 = cast(%1005, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %1007 = cast(meta[relay.Constant][65] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1008 = reshape(%1006, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %1009 = reshape(%1007, newshape=[2, 600]) /* ty=Tensor[(2, 600), float64] */;
  %1010 = @func_13792(%1008, %1009) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), bool], Tensor[(10, 8, 16), float64], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(9, 10, 8), uint8], Tensor[(720), uint8], Tensor[(2, 600), float64]) */;
  %1011 = %990.0;
  %1012 = %1000.0;
  %1013 = acos(%1004) /* ty=Tensor[(10, 8, 4), float32] */;
  %1014 = %1010.5;
  (%1011, %1005, meta[relay.Constant][62] /* ty=Tensor[(1584), bool] */, meta[relay.Constant][63] /* ty=Tensor[(900), float32] */, %1012, meta[relay.Constant][64] /* ty=Tensor[(512), uint32] */, %1013, %1014, meta[relay.Constant][65] /* ty=Tensor[(1200), float64] */)
}

def @func_19298() -> (Tensor[(88, 22), uint64], Tensor[(144, 140), int16]) {
  %1015 = cast(meta[relay.Constant][66] /* ty=Tensor[(144, 1), float32] */, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %1016 = reshape(%1015, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %1017 = @func_12775(%1016) /* ty=(Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) */;
  %1018 = @func_16484() /* ty=(Tensor[(140), float64],) */;
  %1019 = %1018.0;
  %1020 = cast(meta[relay.Constant][66] /* ty=Tensor[(144, 1), float32] */, dtype="bool") /* ty=Tensor[(144, 1), bool] */;
  %1021 = cast(%1019, dtype="bool") /* ty=Tensor[(140), bool] */;
  %1022 = logical_or(%1020, %1021) /* ty=Tensor[(144, 140), bool] */;
  %1023 = cast(meta[relay.Constant][67] /* ty=Tensor[(144, 140), bool] */, dtype="uint8") /* ty=Tensor[(144, 140), uint8] */;
  %1024 = shape_of(%1022, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1025 = cast(%1022, dtype="uint8") /* ty=Tensor[(144, 140), uint8] */;
  %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %1027 = multiply(%1025, %1026) /* ty=Tensor[(144, 140), uint8] */;
  %1028 = cast(%1027, dtype="int16") /* ty=Tensor[(144, 140), int16] */;
  %1029 = cast(%1019, dtype="int16") /* ty=Tensor[(140), int16] */;
  %1030 = %1017.2;
  %1031 = bitwise_or(%1028, %1029) /* ty=Tensor[(144, 140), int16] */;
  (%1030, %1031)
}

def @func_5578(%var_5570: Tensor[(16, 16, 2), uint32], %var_5571: Tensor[(16, 16, 2), uint32]) -> Tensor[(16, 16, 2), uint32] {
  %1032 = cast(%var_5571, dtype="uint32") /* ty=Tensor[(16, 16, 2), uint32] */;
  %1033 = shape_of(%var_5570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1034 = cast(%var_5570, dtype="uint32") /* ty=Tensor[(16, 16, 2), uint32] */;
  %1035 = dyn.reshape(%1032, %1033, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%1034, %1035) /* ty=Tensor[(16, 16, 2), uint32] */
}

def @func_10351(%var_10301: Tensor[(15, 8, 13), uint8], %var_10302: Tensor[(15, 8, 13), uint8], %var_10319: Tensor[(140), float64]) -> (Tensor[(351), int32], Tensor[(1584), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64], Tensor[(7, 2, 10), float64], Tensor[(15, 8, 13), int16]) {
  %1036 = cast(%var_10319, dtype="float64") /* ty=Tensor[(140), float64] */;
  %1037 = cast(%var_10319, dtype="float64") /* ty=Tensor[(140), float64] */;
  %1038 = reshape(%1036, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %1039 = reshape(%1037, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %1040 = @func_3245(%1038, %1039) /* ty=(Tensor[(7, 2, 10), float64],) */;
  %1041 = %1040.0;
  %1042 = cast(%1041, dtype="float64") /* ty=Tensor[(7, 2, 10), float64] */;
  %1043 = cast(%1041, dtype="float64") /* ty=Tensor[(7, 2, 10), float64] */;
  %1044 = reshape(%1042, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %1045 = reshape(%1043, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %1046 = @func_3245(%1044, %1045) /* ty=(Tensor[(7, 2, 10), float64],) */;
  %1047 = cast(%var_10302, dtype="bool") /* ty=Tensor[(15, 8, 13), bool] */;
  %1048 = shape_of(%var_10301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1049 = cast(%var_10301, dtype="bool") /* ty=Tensor[(15, 8, 13), bool] */;
  %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1051 = greater_equal(%1049, %1050) /* ty=Tensor[(15, 8, 13), bool] */;
  %1052 = cast(%1051, dtype="float32") /* ty=Tensor[(15, 8, 13), float32] */;
  %1053 = atanh(%1052) /* ty=Tensor[(15, 8, 13), float32] */;
  %1054 = cast(%1053, dtype="float64") /* ty=Tensor[(15, 8, 13), float64] */;
  %1055 = cosh(%1054) /* ty=Tensor[(15, 8, 13), float64] */;
  %1056 = cast(meta[relay.Constant][68] /* ty=Tensor[(351), int32] */, dtype="int32") /* ty=Tensor[(351), int32] */;
  %1057 = cast(meta[relay.Constant][68] /* ty=Tensor[(351), int32] */, dtype="int32") /* ty=Tensor[(351), int32] */;
  %1058 = cast(meta[relay.Constant][69] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %1059 = reshape(%1056, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), int32] */;
  %1060 = reshape(%1057, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), int32] */;
  %1061 = reshape(%1058, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
  %1062 = @func_7306(%1059, %1060, %1061) /* ty=(Tensor[(9, 3, 13), bool], Tensor[(1584), bool], float64, Tensor[(1, 26), float64], Tensor[(1584), bool], Tensor[(900), float32]) */;
  %1063 = %1062.2;
  %1064 = cast(%1055, dtype="int16") /* ty=Tensor[(15, 8, 13), int16] */;
  %1065 = cast(%1063, dtype="int16") /* ty=int16 */;
  %1066 = %1046.0;
  %1067 = right_shift(%1064, %1065) /* ty=Tensor[(15, 8, 13), int16] */;
  (meta[relay.Constant][68] /* ty=Tensor[(351), int32] */, meta[relay.Constant][69] /* ty=Tensor[(1584), bool] */, %1041, %var_10319, %1066, %1067)
}

def @func_14673() -> Tensor[(10, 8, 4), int16] {
  %1068 = cast(meta[relay.Constant][71] /* ty=Tensor[(10, 8, 4), int16] */, dtype="int16") /* ty=Tensor[(10, 8, 4), int16] */;
  %1069 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(10, 8, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1070 = cast(meta[relay.Constant][70] /* ty=Tensor[(10, 8, 4), int16] */, dtype="int16") /* ty=Tensor[(10, 8, 4), int16] */;
  %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%1070, %1071) /* ty=Tensor[(10, 8, 4), int16] */
}

def @func_6243(%var_6238: float64) -> (Tensor[(12, 16, 9), float64],) {
  %1072 = cast(%var_6238, dtype="float64") /* ty=float64 */;
  %1073 = cast(meta[relay.Constant][72] /* ty=Tensor[(12, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 16, 9), float64] */;
  %1074 = power(%1072, %1073) /* ty=Tensor[(12, 16, 9), float64] */;
  (%1074,)
}

def @func_17834() -> (Tensor[(6, 3, 8), float32],) {
  %1075 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1076 = %1075.0;
  (%1076,)
}

def @func_15960() -> (Tensor[(6, 3, 8), float32],) {
  %1077 = @func_11786() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1078 = %1077.0;
  (%1078,)
}

def @func_13092(%var_13062: Tensor[(320, 4), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float64], Tensor[(10, 8, 16), uint32], Tensor[(320, 4), uint32], Tensor[(900), float32], Tensor[(10, 7, 4), uint8], Tensor[(280), int32]) {
  %1079 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1080 = @func_12758() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(12, 16, 9), float64], float64, Tensor[(15, 10, 6), float32], Tensor[(900), float32]) */;
  %1081 = %1079.0;
  %1082 = cast(%1081, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %1083 = reshape(%1082, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %1084 = @func_11148(%1083) /* ty=(Tensor[(6, 3, 8), float64],) */;
  %1085 = cast(%var_13062, dtype="uint32") /* ty=Tensor[(320, 4), uint32] */;
  %1086 = cast(%var_13062, dtype="uint32") /* ty=Tensor[(320, 4), uint32] */;
  %1087 = reshape(%1085, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %1088 = reshape(%1086, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %1089 = @func_4480(%1087, %1088) /* ty=(Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) */;
  %1090 = @func_12758() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(12, 16, 9), float64], float64, Tensor[(15, 10, 6), float32], Tensor[(900), float32]) */;
  %1091 = cast(meta[relay.Constant][73] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
  %1092 = reshape(%1091, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), int32] */;
  %1093 = @func_10267(%1092) /* ty=(Tensor[(10, 8, 16), float64], Tensor[(1280), uint32], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), uint8]) */;
  %1094 = %1080.0;
  %1095 = %1084.0;
  %1096 = %1089.0;
  %1097 = %1090.4;
  %1098 = %1093.3;
  (%1081, %1094, %1095, %1096, %var_13062, %1097, %1098, meta[relay.Constant][73] /* ty=Tensor[(280), int32] */)
}

def @func_15346(%var_15332: Tensor[(35), float64], %var_15334: Tensor[(140), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(140), float64]) {
  %1099 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1100 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %1101 = cast(%var_15332, dtype="float64") /* ty=Tensor[(35), float64] */;
  %1102 = cast(meta[relay.Constant][74] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %1103 = cast(%var_15334, dtype="float64") /* ty=Tensor[(140), float64] */;
  %1104 = reshape(%1101, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
  %1105 = reshape(%1102, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %1106 = reshape(%1103, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %1107 = @func_4835(%1104, %1105, %1106) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
  %1108 = %1099.0;
  %1109 = %1100.1;
  %1110 = %1107.6;
  (%1108, %1109, %1110, %var_15332, meta[relay.Constant][74] /* ty=Tensor[(32), float32] */, %var_15334)
}

def @func_12111(%var_12102: Tensor[(1936), uint64]) -> (Tensor[(6, 3, 8), float64], Tensor[(16, 11, 11), bool], Tensor[(1936), uint64]) {
  %1111 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1112 = %1111.0;
  %1113 = cast(meta[relay.Constant][75] /* ty=Tensor[(6, 3, 8), float32] */, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
  %1114 = shape_of(%1112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1115 = cast(%1112, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
  %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1117 = cast(%var_12102, dtype="uint64") /* ty=Tensor[(1936), uint64] */;
  %1118 = reshape(%1117, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), uint64] */;
  %1119 = mod(%1115, %1116) /* ty=Tensor[(6, 3, 8), float64] */;
  %1120 = @func_11876(%1118) /* ty=Tensor[(16, 11, 11), bool] */;
  (%1119, %1120, %var_12102)
}

def @func_15515(%var_15445: Tensor[(768), float32], %var_15446: Tensor[(140), float64], %var_15479: Tensor[(1936), uint64], %var_15503: Tensor[(20), uint32], %var_15506: Tensor[(1936), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 4), int16], Tensor[(16, 3, 16), float32], Tensor[(768), float32], Tensor[(140), float64], Tensor[(6, 3, 8), float32], Tensor[(1280), uint32], Tensor[(1584), bool], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32], Tensor[(1936), float32]) {
  %1121 = @func_13319() /* ty=(Tensor[(6, 3, 8), float64], Tensor[(6, 3, 8), float32]) */;
  %1122 = cast(%var_15445, dtype="float32") /* ty=Tensor[(768), float32] */;
  %1123 = cast(%var_15446, dtype="float64") /* ty=Tensor[(140), float64] */;
  %1124 = reshape(%1122, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), float32] */;
  %1125 = reshape(%1123, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %1126 = @func_10085(%1124, %1125) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64]) */;
  %1127 = cast(meta[relay.Constant][76] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %1128 = reshape(%1127, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
  %1129 = @func_13871(%1128) /* ty=(Tensor[(1280), uint32], Tensor[(8, 4, 16), bool], Tensor[(1584), bool]) */;
  %1130 = cast(meta[relay.Constant][77] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1131 = cast(%var_15503, dtype="uint32") /* ty=Tensor[(20), uint32] */;
  %1132 = reshape(%1130, newshape=[]) /* ty=uint32 */;
  %1133 = reshape(%1131, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), uint32] */;
  %1134 = @func_14776() /* ty=Tensor[(6, 3, 8), float32] */;
  %1135 = cast(%1134, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %1136 = reshape(%1135, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %1137 = @func_12775(%1136) /* ty=(Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) */;
  %1138 = %1137.1;
  %1139 = cast(%var_15479, dtype="uint32") /* ty=Tensor[(1936), uint32] */;
  %1140 = shape_of(%1138, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1141 = cast(%1138, dtype="uint32") /* ty=Tensor[(1936), uint32] */;
  %1142 = dyn.reshape(%1139, %1140, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %1143 = bitwise_xor(%1141, %1142) /* ty=Tensor[(1936), uint32] */;
  %1144 = cast(%var_15506, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %1145 = shape_of(%1143, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1146 = cast(%1143, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %1147 = dyn.reshape(%1144, %1145, newshape=[]) /* ty=Tensor[(?), float32] */;
  %1148 = %1121.1;
  %1149 = @func_14673() /* ty=Tensor[(10, 8, 4), int16] */;
  %1150 = %1126.0;
  %1151 = %1129.0;
  %1152 = @func_7975(%1132, %1133) /* ty=Tensor[(1, 10, 2), uint32] */;
  %1153 = floor_mod(%1146, %1147) /* ty=Tensor[(1936), float32] */;
  (%1148, %1149, %1150, %var_15445, %var_15446, %1134, %1151, meta[relay.Constant][76] /* ty=Tensor[(1584), bool] */, %1152, meta[relay.Constant][77] /* ty=uint32 */, %var_15503, %1153)
}

def @func_17628(%var_17623: Tensor[(1936), uint64]) -> (Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool], Tensor[(1936), bool]) {
  %1154 = @func_16034() /* ty=(Tensor[(8, 4, 16), bool],) */;
  %1155 = @func_13952() /* ty=Tensor[(6, 3, 8), float32] */;
  %1156 = cast(%1155, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %1157 = reshape(%1156, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %1158 = @func_12775(%1157) /* ty=(Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) */;
  %1159 = %1158.1;
  %1160 = cast(%var_17623, dtype="bool") /* ty=Tensor[(1936), bool] */;
  %1161 = shape_of(%1159, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1162 = cast(%1159, dtype="bool") /* ty=Tensor[(1936), bool] */;
  %1163 = dyn.reshape(%1160, %1161, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1164 = %1154.0;
  %1165 = less_equal(%1162, %1163) /* ty=Tensor[(1936), bool] */;
  (%1155, %1164, %1165)
}

def @func_16581() -> (Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1200), float64], Tensor[(1, 756), float32]) {
  %1166 = cast(meta[relay.Constant][78] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1167 = cast(meta[relay.Constant][79] /* ty=Tensor[(1, 756), float32] */, dtype="float32") /* ty=Tensor[(1, 756), float32] */;
  %1168 = reshape(%1166, newshape=[1200, 1]) /* ty=Tensor[(1200, 1), float64] */;
  %1169 = reshape(%1167, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %1170 = @func_2501(%1168, %1169) /* ty=(Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 16, 5), float64], Tensor[(1200, 1), float64], Tensor[(756), float32]) */;
  %1171 = @func_13668() /* ty=Tensor[(6, 3, 8), float32] */;
  %1172 = %1170.5;
  (%1171, %1172, meta[relay.Constant][78] /* ty=Tensor[(1200), float64] */, meta[relay.Constant][79] /* ty=Tensor[(1, 756), float32] */)
}

def @func_11786() -> (Tensor[(6, 3, 8), float32],) {
  %1173 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1174 = %1173.0;
  (%1174,)
}

def @func_19162() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), float32], Tensor[(8, 4, 16), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64]) {
  %1175 = @func_17806() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1176 = @func_16594() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1177 = @func_16427() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), float32]) */;
  %1178 = cast(meta[relay.Constant][80] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %1179 = cast(meta[relay.Constant][80] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %1180 = reshape(%1178, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %1181 = reshape(%1179, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %1182 = @func_3245(%1180, %1181) /* ty=(Tensor[(7, 2, 10), float64],) */;
  %1183 = %1175.0;
  %1184 = %1176.0;
  %1185 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  %1186 = %1177.1;
  %1187 = @func_12903() /* ty=Tensor[(8, 4, 16), bool] */;
  %1188 = %1182.0;
  (%1183, %1184, %1185, %1186, %1187, %1188, meta[relay.Constant][80] /* ty=Tensor[(140), float64] */)
}

def @func_10085(%var_10076: Tensor[(16, 3, 16), float32], %var_10081: Tensor[(5, 28), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64]) {
  %1189 = cast(%var_10076, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %1190 = cast(%var_10081, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %1191 = cast(%var_10081, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %1192 = reshape(%1190, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %1193 = reshape(%1191, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %1194 = @func_3245(%1192, %1193) /* ty=(Tensor[(7, 2, 10), float64],) */;
  %1195 = sin(%1189) /* ty=Tensor[(16, 3, 16), float32] */;
  %1196 = %1194.0;
  (%1195, %1196, %var_10081)
}

def @func_13409(%var_13397: Tensor[(720), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(4, 11, 15), float32], Tensor[(660), float32], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(13, 13, 2), float32], Tensor[(720), uint8], Tensor[(1200), float64]) {
  %1197 = cast(meta[relay.Constant][81] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %1198 = reshape(%1197, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %1199 = cast(meta[relay.Constant][82] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %1200 = reshape(%1199, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float32] */;
  %1201 = cast(%var_13397, dtype="uint8") /* ty=Tensor[(720), uint8] */;
  %1202 = cast(%var_13397, dtype="uint8") /* ty=Tensor[(720), uint8] */;
  %1203 = cast(meta[relay.Constant][83] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %1204 = cast(%var_13397, dtype="float64") /* ty=Tensor[(720), float64] */;
  %1205 = reshape(%1201, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), uint8] */;
  %1206 = reshape(%1202, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), uint8] */;
  %1207 = reshape(%1203, newshape=[4, 300]) /* ty=Tensor[(4, 300), float64] */;
  %1208 = reshape(%1204, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), float64] */;
  %1209 = @func_3769(%1205, %1206, %1207, %1208) /* ty=(Tensor[(9, 10, 8), uint8], Tensor[(15, 10, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64], Tensor[(9, 10, 8), uint8], Tensor[(4, 300), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(13, 13, 2), float32]) */;
  %1210 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  %1211 = @func_5951(%1198) /* ty=Tensor[(4, 11, 15), float32] */;
  %1212 = @func_394(%1200) /* ty=Tensor[(9, 14, 6), float32] */;
  %1213 = %1209.8;
  (%1210, %1211, meta[relay.Constant][81] /* ty=Tensor[(660), float32] */, %1212, meta[relay.Constant][82] /* ty=Tensor[(756), float32] */, %1213, %var_13397, meta[relay.Constant][83] /* ty=Tensor[(1200), float64] */)
}

def @func_18236() -> Tensor[(6, 3, 8), float64] {
  %1214 = @func_13924() /* ty=(Tensor[(6, 3, 8), float64],) */;
  %1214.0
}

def @func_17103() -> (Tensor[(6, 3, 8), float32],) {
  %1215 = @func_14551() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1216 = %1215.0;
  (%1216,)
}

def @func_13350() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), uint64]) {
  %1217 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1218 = %1217.0;
  %1219 = cast(%1218, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %1220 = reshape(%1219, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %1221 = @func_12775(%1220) /* ty=(Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) */;
  %1222 = %1221.0;
  (%1218, %1222)
}

def @func_16830() -> (Tensor[(6, 3, 8), float32],) {
  %1223 = @func_14444() /* ty=Tensor[(6, 3, 8), float32] */;
  (%1223,)
}

def @func_18665() -> (Tensor[(6, 3, 8), float32],) {
  %1224 = @func_18555() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool]) */;
  %1225 = %1224.0;
  (%1225,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_17384() -> (Tensor[(3, 117), float32],) {
  %2 = fn () -> (Tensor[(3, 117), float32],) {
    %0 = @func_16287() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) */;
    %1 = %0.1;
    (%1,)
  };
  %2() /* ty=(Tensor[(3, 117), float32],) */
}

def @func_11798() -> (Tensor[(6, 3, 8), float32],) {
  %3 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %4 = %3.0;
  (%4,)
}

def @func_11979(%var_11959: Tensor[(60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(5, ?, 12), float64]) {
  %5 = @func_11135() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %6 = cast(%var_11959, dtype="float64") /* ty=Tensor[(60), float64] */;
  %7 = reshape(%6, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), float64] */;
  %8 = @func_5376(%7) /* ty=(Tensor[(5, ?, 12), uint64], Tensor[(5, ?, 12), uint32]) */;
  %9 = %8.1;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(5, ?, 12), float32] */;
  %11 = rsqrt(%10) /* ty=Tensor[(5, ?, 12), float32] */;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(5, ?, 12), float64] */;
  %13 = %5.0;
  %14 = tan(%12) /* ty=Tensor[(5, ?, 12), float64] */;
  (%13, %var_11959, %14)
}

def @func_17042() -> Tensor[(144), float32] {
  @func_17040() /* ty=Tensor[(144), float32] */
}

def @func_17103() -> (Tensor[(6, 3, 8), float32],) {
  %15 = @func_14551() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %16 = %15.0;
  (%16,)
}

def @func_18381() -> Tensor[(8, 4, 16), bool] {
  %18 = fn () -> Tensor[(8, 4, 16), bool] {
    %17 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
    %17.0
  };
  %18() /* ty=Tensor[(8, 4, 16), bool] */
}

def @func_14266(%var_14248: Tensor[(338), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) {
  %19 = cast(%var_14248, dtype="float32") /* ty=Tensor[(338), float32] */;
  %20 = reshape(%19, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float32] */;
  %21 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  %22 = @func_1498(%20) /* ty=Tensor[(13, 13, 2), float32] */;
  (%21, %22, %var_14248)
}

def @func_14552() -> (Tensor[(6, 3, 8), float32],) {
  %24 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %23 = @func_11921() /* ty=Tensor[(6, 3, 8), float32] */;
    (%23,)
  };
  %24() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_18779(%var_18776: Tensor[(192, 1), uint16], %var_18777: Tensor[(2, 640), uint32], %var_18778: Tensor[(35), float64]) -> (Tensor[(8, 4, 16), bool], Tensor[(2, 640), uint32], Tensor[(35), float64], Tensor[(6, 3, 8), float64], Tensor[(16, 16, 2), uint32], Tensor[(192, 35), float32]) {
  @func_18774(%var_18776, %var_18777, %var_18778) /* ty=(Tensor[(8, 4, 16), bool], Tensor[(2, 640), uint32], Tensor[(35), float64], Tensor[(6, 3, 8), float64], Tensor[(16, 16, 2), uint32], Tensor[(192, 35), float32]) */
}

def @func_15146() -> (Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) {
  %29 = fn () -> (Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) {
    %25 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
    %26 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
    %27 = %25.0;
    %28 = %26.1;
    (%27, %28)
  };
  %29() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */
}

def @func_17631(%var_17629: Tensor[(1936), uint64]) -> (Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool], Tensor[(1936), bool]) {
  @func_17628(%var_17629) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool], Tensor[(1936), bool]) */
}

def @func_15897(%var_15891: uint32) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], uint32, Tensor[(20), uint32], Tensor[(6, 3, 8), uint8]) {
  %30 = @func_13139() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %31 = cast(%var_15891, dtype="uint32") /* ty=uint32 */;
  %32 = cast(meta[relay.Constant][0] /* ty=Tensor[(20), uint32] */, dtype="uint32") /* ty=Tensor[(20), uint32] */;
  %33 = reshape(%31, newshape=[]) /* ty=uint32 */;
  %34 = reshape(%32, newshape=[20]) /* ty=Tensor[(20), uint32] */;
  %35 = @func_11448(%33, %34) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) */;
  %36 = %30.0;
  %37 = cast(%36, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %38 = reshape(%37, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %39 = @func_11128(%38) /* ty=(Tensor[(6, 3, 8), uint8],) */;
  %40 = %35.0;
  %41 = %39.0;
  (%36, %40, %var_15891, meta[relay.Constant][0] /* ty=Tensor[(20), uint32] */, %41)
}

def @func_12777(%var_12776: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) {
  %53 = fn (%var_12762: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) {
    %42 = @func_12689() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */;
    %43 = %42.0;
    %44 = cast(%var_12762, dtype="uint64") /* ty=Tensor[(6, 3, 8), uint64] */;
    %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%43, dtype="uint64") /* ty=Tensor[(6, 3, 8), uint64] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %48 = cast(meta[relay.Constant][1] /* ty=Tensor[(88, 22), uint64] */, dtype="uint64") /* ty=Tensor[(88, 22), uint64] */;
    %49 = reshape(%48, newshape=[1936]) /* ty=Tensor[(1936), uint64] */;
    %50 = @func_12111(%49) /* ty=(Tensor[(6, 3, 8), float64], Tensor[(16, 11, 11), bool], Tensor[(1936), uint64]) */;
    %51 = multiply(%46, %47) /* ty=Tensor[(6, 3, 8), uint64] */;
    %52 = %50.2;
    (%51, %52, meta[relay.Constant][1] /* ty=Tensor[(88, 22), uint64] */)
  };
  %53(%var_12776) /* ty=(Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) */
}

def @func_3774(%var_3770: Tensor[(9, 10, 8), uint8], %var_3771: Tensor[(9, 10, 8), uint8], %var_3772: Tensor[(4, 300), float64], %var_3773: Tensor[(9, 10, 8), float64]) -> (Tensor[(9, 10, 8), uint8], Tensor[(15, 10, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64], Tensor[(9, 10, 8), uint8], Tensor[(4, 300), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(13, 13, 2), float32]) {
  %88 = fn (%var_3679: Tensor[(9, 10, 8), uint8], %var_3680: Tensor[(9, 10, 8), uint8], %var_3687: Tensor[(4, 300), float64], %var_3711: Tensor[(9, 10, 8), float64]) -> (Tensor[(9, 10, 8), uint8], Tensor[(15, 10, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64], Tensor[(9, 10, 8), uint8], Tensor[(4, 300), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(13, 13, 2), float32]) {
    %54 = cast(%var_3680, dtype="uint8") /* ty=Tensor[(9, 10, 8), uint8] */;
    %55 = shape_of(%var_3679, dtype="int32") /* ty=Tensor[(3), int32] */;
    %56 = cast(%var_3679, dtype="uint8") /* ty=Tensor[(9, 10, 8), uint8] */;
    %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %58 = cast(%var_3687, dtype="float64") /* ty=Tensor[(4, 300), float64] */;
    %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %60 = reshape(%58, newshape=[1200, 1]) /* ty=Tensor[(1200, 1), float64] */;
    %61 = reshape(%59, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %62 = @func_2501(%60, %61) /* ty=(Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 16, 5), float64], Tensor[(1200, 1), float64], Tensor[(756), float32]) */;
    %63 = cast(%var_3687, dtype="float64") /* ty=Tensor[(4, 300), float64] */;
    %64 = cast(%var_3687, dtype="float64") /* ty=Tensor[(4, 300), float64] */;
    %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %66 = reshape(%63, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
    %67 = reshape(%64, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
    %68 = reshape(%65, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %69 = @func_1875(%66, %67, %68) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64]) */;
    %70 = cast(%var_3679, dtype="float64") /* ty=Tensor[(9, 10, 8), float64] */;
    %71 = tan(%70) /* ty=Tensor[(9, 10, 8), float64] */;
    %72 = cast(%var_3711, dtype="uint8") /* ty=Tensor[(9, 10, 8), uint8] */;
    %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
    %74 = cast(%71, dtype="uint8") /* ty=Tensor[(9, 10, 8), uint8] */;
    %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %76 = cast(%var_3687, dtype="float32") /* ty=Tensor[(4, 300), float32] */;
    %77 = cast(meta[relay.Constant][3] /* ty=Tensor[(338), float32] */, dtype="float32") /* ty=Tensor[(338), float32] */;
    %78 = reshape(%77, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float32] */;
    %79 = cast(meta[relay.Constant][3] /* ty=Tensor[(338), float32] */, dtype="float32") /* ty=Tensor[(338), float32] */;
    %80 = reshape(%79, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float32] */;
    %81 = subtract(%56, %57) /* ty=Tensor[(9, 10, 8), uint8] */;
    %82 = %62.5;
    %83 = %69.3;
    %84 = add(%74, %75) /* ty=Tensor[(9, 10, 8), uint8] */;
    %85 = log(%76) /* ty=Tensor[(4, 300), float32] */;
    %86 = @func_1498(%78) /* ty=Tensor[(13, 13, 2), float32] */;
    %87 = @func_1498(%80) /* ty=Tensor[(13, 13, 2), float32] */;
    (%81, %82, meta[relay.Constant][2] /* ty=Tensor[(756), float32] */, %83, %84, %85, %86, meta[relay.Constant][3] /* ty=Tensor[(338), float32] */, %87)
  };
  %88(%var_3770, %var_3771, %var_3772, %var_3773) /* ty=(Tensor[(9, 10, 8), uint8], Tensor[(15, 10, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64], Tensor[(9, 10, 8), uint8], Tensor[(4, 300), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(13, 13, 2), float32]) */
}

def @func_13595() -> (Tensor[(144), float32],) {
  %89 = @func_12836() /* ty=(Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) */;
  %90 = %89.2;
  (%90,)
}

def @func_13871(%var_13857: Tensor[(1584), bool]) -> (Tensor[(1280), uint32], Tensor[(8, 4, 16), bool], Tensor[(1584), bool]) {
  %91 = @func_12467() /* ty=(Tensor[(1280), uint32],) */;
  %92 = cast(%var_13857, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %93 = reshape(%92, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
  %94 = @func_12542(%93) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(1584), bool], Tensor[(140), float64], Tensor[(6, 260), uint8], Tensor[(3, 117), float32], Tensor[(3, 117), float32], Tensor[(5, ?, 12), float32], Tensor[(8, 4, 16), bool]) */;
  %95 = %91.0;
  %96 = %94.7;
  (%95, %96, %var_13857)
}

def @func_1880(%var_1877: Tensor[(15, 16, 5), float64], %var_1878: Tensor[(15, 16, 5), float64], %var_1879: Tensor[(756), float32]) -> (Tensor[(15, 16, 5), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64]) {
  @func_1875(%var_1877, %var_1878, %var_1879) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64]) */
}

def @func_10960() -> (Tensor[(6, 3, 8), float32],) {
  @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_4483(%var_4481: Tensor[(10, 8, 16), uint32], %var_4482: Tensor[(10, 8, 16), uint32]) -> (Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) {
  %104 = fn (%var_4465: Tensor[(10, 8, 16), uint32], %var_4466: Tensor[(10, 8, 16), uint32]) -> (Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) {
    %97 = cast(%var_4466, dtype="uint32") /* ty=Tensor[(10, 8, 16), uint32] */;
    %98 = shape_of(%var_4465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %99 = cast(%var_4465, dtype="uint32") /* ty=Tensor[(10, 8, 16), uint32] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %101 = cast(%var_4466, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
    %102 = minimum(%99, %100) /* ty=Tensor[(10, 8, 16), uint32] */;
    %103 = tan(%101) /* ty=Tensor[(10, 8, 16), float64] */;
    (%102, %103)
  };
  %104(%var_4481, %var_4482) /* ty=(Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) */
}

def @func_16582() -> (Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1200), float64], Tensor[(1, 756), float32]) {
  %112 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1200), float64], Tensor[(1, 756), float32]) {
    %105 = cast(meta[relay.Constant][4] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %106 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 756), float32] */, dtype="float32") /* ty=Tensor[(1, 756), float32] */;
    %107 = reshape(%105, newshape=[1200, 1]) /* ty=Tensor[(1200, 1), float64] */;
    %108 = reshape(%106, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %109 = @func_2501(%107, %108) /* ty=(Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 16, 5), float64], Tensor[(1200, 1), float64], Tensor[(756), float32]) */;
    %110 = @func_13668() /* ty=Tensor[(6, 3, 8), float32] */;
    %111 = %109.5;
    (%110, %111, meta[relay.Constant][4] /* ty=Tensor[(1200), float64] */, meta[relay.Constant][5] /* ty=Tensor[(1, 756), float32] */)
  };
  %112() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1200), float64], Tensor[(1, 756), float32]) */
}

def @func_17239() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  @func_17237() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */
}

def @func_13649(%var_13647: Tensor[(60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(60), float64]) {
  @func_13646(%var_13647) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(60), float64]) */
}

def @func_13952() -> Tensor[(6, 3, 8), float32] {
  %113 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %113.0
}

def @func_16484() -> (Tensor[(140), float64],) {
  %114 = @func_14483() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(140), float64]) */;
  %115 = %114.2;
  (%115,)
}

def @func_1500(%var_1499: Tensor[(13, 13, 2), float32]) -> Tensor[(13, 13, 2), float32] {
  %117 = fn (%var_1493: Tensor[(13, 13, 2), float32]) -> Tensor[(13, 13, 2), float32] {
    %116 = cast(%var_1493, dtype="float32") /* ty=Tensor[(13, 13, 2), float32] */;
    sin(%116) /* ty=Tensor[(13, 13, 2), float32] */
  };
  %117(%var_1499) /* ty=Tensor[(13, 13, 2), float32] */
}

def @func_7978(%var_7976: uint32, %var_7977: Tensor[(1, 10, 2), uint32]) -> Tensor[(1, 10, 2), uint32] {
  %120 = fn (%var_7966: uint32, %var_7967: Tensor[(1, 10, 2), uint32]) -> Tensor[(1, 10, 2), uint32] {
    %118 = cast(%var_7966, dtype="uint32") /* ty=uint32 */;
    %119 = cast(%var_7967, dtype="uint32") /* ty=Tensor[(1, 10, 2), uint32] */;
    bitwise_or(%118, %119) /* ty=Tensor[(1, 10, 2), uint32] */
  };
  %120(%var_7976, %var_7977) /* ty=Tensor[(1, 10, 2), uint32] */
}

def @func_19400() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %123 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
    %121 = @func_13668() /* ty=Tensor[(6, 3, 8), float32] */;
    %122 = @func_18082() /* ty=Tensor[(6, 3, 8), float32] */;
    (%121, %122)
  };
  %123() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */
}

def @func_18667() -> (Tensor[(6, 3, 8), float32],) {
  @func_18665() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_15859(%var_15857: Tensor[(2, 4, 5), int32]) -> (Tensor[(8, 4, 16), bool], Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32], Tensor[(144), float32], Tensor[(2, 4, 5), uint32], Tensor[(6, 3, 8), float32], Tensor[(3, 20), float64]) {
  @func_15856(%var_15857) /* ty=(Tensor[(8, 4, 16), bool], Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32], Tensor[(144), float32], Tensor[(2, 4, 5), uint32], Tensor[(6, 3, 8), float32], Tensor[(3, 20), float64]) */
}

def @func_13597() -> (Tensor[(144), float32],) {
  @func_13595() /* ty=(Tensor[(144), float32],) */
}

def @func_10355(%var_10352: Tensor[(15, 8, 13), uint8], %var_10353: Tensor[(15, 8, 13), uint8], %var_10354: Tensor[(140), float64]) -> (Tensor[(351), int32], Tensor[(1584), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64], Tensor[(7, 2, 10), float64], Tensor[(15, 8, 13), int16]) {
  %156 = fn (%var_10301: Tensor[(15, 8, 13), uint8], %var_10302: Tensor[(15, 8, 13), uint8], %var_10319: Tensor[(140), float64]) -> (Tensor[(351), int32], Tensor[(1584), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64], Tensor[(7, 2, 10), float64], Tensor[(15, 8, 13), int16]) {
    %124 = cast(%var_10319, dtype="float64") /* ty=Tensor[(140), float64] */;
    %125 = cast(%var_10319, dtype="float64") /* ty=Tensor[(140), float64] */;
    %126 = reshape(%124, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
    %127 = reshape(%125, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
    %128 = @func_3245(%126, %127) /* ty=(Tensor[(7, 2, 10), float64],) */;
    %129 = %128.0;
    %130 = cast(%129, dtype="float64") /* ty=Tensor[(7, 2, 10), float64] */;
    %131 = cast(%129, dtype="float64") /* ty=Tensor[(7, 2, 10), float64] */;
    %132 = reshape(%130, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
    %133 = reshape(%131, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
    %134 = @func_3245(%132, %133) /* ty=(Tensor[(7, 2, 10), float64],) */;
    %135 = cast(%var_10302, dtype="bool") /* ty=Tensor[(15, 8, 13), bool] */;
    %136 = shape_of(%var_10301, dtype="int32") /* ty=Tensor[(3), int32] */;
    %137 = cast(%var_10301, dtype="bool") /* ty=Tensor[(15, 8, 13), bool] */;
    %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %139 = greater_equal(%137, %138) /* ty=Tensor[(15, 8, 13), bool] */;
    %140 = cast(%139, dtype="float32") /* ty=Tensor[(15, 8, 13), float32] */;
    %141 = atanh(%140) /* ty=Tensor[(15, 8, 13), float32] */;
    %142 = cast(%141, dtype="float64") /* ty=Tensor[(15, 8, 13), float64] */;
    %143 = cosh(%142) /* ty=Tensor[(15, 8, 13), float64] */;
    %144 = cast(meta[relay.Constant][6] /* ty=Tensor[(351), int32] */, dtype="int32") /* ty=Tensor[(351), int32] */;
    %145 = cast(meta[relay.Constant][6] /* ty=Tensor[(351), int32] */, dtype="int32") /* ty=Tensor[(351), int32] */;
    %146 = cast(meta[relay.Constant][7] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %147 = reshape(%144, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), int32] */;
    %148 = reshape(%145, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), int32] */;
    %149 = reshape(%146, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
    %150 = @func_7306(%147, %148, %149) /* ty=(Tensor[(9, 3, 13), bool], Tensor[(1584), bool], float64, Tensor[(1, 26), float64], Tensor[(1584), bool], Tensor[(900), float32]) */;
    %151 = %150.2;
    %152 = cast(%143, dtype="int16") /* ty=Tensor[(15, 8, 13), int16] */;
    %153 = cast(%151, dtype="int16") /* ty=int16 */;
    %154 = %134.0;
    %155 = right_shift(%152, %153) /* ty=Tensor[(15, 8, 13), int16] */;
    (meta[relay.Constant][6] /* ty=Tensor[(351), int32] */, meta[relay.Constant][7] /* ty=Tensor[(1584), bool] */, %129, %var_10319, %154, %155)
  };
  %156(%var_10352, %var_10353, %var_10354) /* ty=(Tensor[(351), int32], Tensor[(1584), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64], Tensor[(7, 2, 10), float64], Tensor[(15, 8, 13), int16]) */
}

def @func_11862() -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) {
  @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */
}

def @func_14131() -> (Tensor[(144), float32],) {
  %159 = fn () -> (Tensor[(144), float32],) {
    %157 = @func_13113() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(144), float32]) */;
    %158 = %157.1;
    (%158,)
  };
  %159() /* ty=(Tensor[(144), float32],) */
}

def @func_12904() -> Tensor[(8, 4, 16), bool] {
  %160 = fn () -> Tensor[(8, 4, 16), bool] {
    @func_12321() /* ty=Tensor[(8, 4, 16), bool] */
  };
  %160() /* ty=Tensor[(8, 4, 16), bool] */
}

def @func_5582(%var_5580: Tensor[(16, 16, 2), uint32], %var_5581: Tensor[(16, 16, 2), uint32]) -> Tensor[(16, 16, 2), uint32] {
  @func_5578(%var_5580, %var_5581) /* ty=Tensor[(16, 16, 2), uint32] */
}

def @func_16034() -> (Tensor[(8, 4, 16), bool],) {
  %161 = @func_12321() /* ty=Tensor[(8, 4, 16), bool] */;
  (%161,)
}

def @func_11135() -> (Tensor[(6, 3, 8), float32],) {
  %162 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %163 = %162.0;
  (%163,)
}

def @func_16486() -> (Tensor[(140), float64],) {
  @func_16484() /* ty=(Tensor[(140), float64],) */
}

def @func_14785() -> Tensor[(6, 3, 8), float32] {
  %164 = fn () -> Tensor[(6, 3, 8), float32] {
    @func_14009() /* ty=Tensor[(6, 3, 8), float32] */
  };
  %164() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_18487() -> (Tensor[(144), float32], Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(1560), uint8]) {
  %165 = @func_13177() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %166 = cast(meta[relay.Constant][8] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %167 = cast(meta[relay.Constant][9] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %168 = reshape(%166, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %169 = reshape(%167, newshape=[6, 260]) /* ty=Tensor[(6, 260), uint8] */;
  %170 = @func_13900(%168, %169) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float32], Tensor[(6, 260), uint8]) */;
  %171 = @func_17040() /* ty=Tensor[(144), float32] */;
  %172 = %165.0;
  %173 = %170.1;
  (%171, %172, %173, meta[relay.Constant][8] /* ty=Tensor[(60), float64] */, meta[relay.Constant][9] /* ty=Tensor[(1560), uint8] */)
}

def @func_15521(%var_15516: Tensor[(768), float32], %var_15517: Tensor[(140), float64], %var_15518: Tensor[(1936), uint64], %var_15519: Tensor[(20), uint32], %var_15520: Tensor[(1936), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 4), int16], Tensor[(16, 3, 16), float32], Tensor[(768), float32], Tensor[(140), float64], Tensor[(6, 3, 8), float32], Tensor[(1280), uint32], Tensor[(1584), bool], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32], Tensor[(1936), float32]) {
  %207 = fn (%var_15445: Tensor[(768), float32], %var_15446: Tensor[(140), float64], %var_15479: Tensor[(1936), uint64], %var_15503: Tensor[(20), uint32], %var_15506: Tensor[(1936), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 4), int16], Tensor[(16, 3, 16), float32], Tensor[(768), float32], Tensor[(140), float64], Tensor[(6, 3, 8), float32], Tensor[(1280), uint32], Tensor[(1584), bool], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32], Tensor[(1936), float32]) {
    %174 = @func_13319() /* ty=(Tensor[(6, 3, 8), float64], Tensor[(6, 3, 8), float32]) */;
    %175 = cast(%var_15445, dtype="float32") /* ty=Tensor[(768), float32] */;
    %176 = cast(%var_15446, dtype="float64") /* ty=Tensor[(140), float64] */;
    %177 = reshape(%175, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), float32] */;
    %178 = reshape(%176, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %179 = @func_10085(%177, %178) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64]) */;
    %180 = cast(meta[relay.Constant][10] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %181 = reshape(%180, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
    %182 = @func_13871(%181) /* ty=(Tensor[(1280), uint32], Tensor[(8, 4, 16), bool], Tensor[(1584), bool]) */;
    %183 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %184 = cast(%var_15503, dtype="uint32") /* ty=Tensor[(20), uint32] */;
    %185 = reshape(%183, newshape=[]) /* ty=uint32 */;
    %186 = reshape(%184, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), uint32] */;
    %187 = @func_14776() /* ty=Tensor[(6, 3, 8), float32] */;
    %188 = cast(%187, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
    %189 = reshape(%188, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
    %190 = @func_12775(%189) /* ty=(Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) */;
    %191 = %190.1;
    %192 = cast(%var_15479, dtype="uint32") /* ty=Tensor[(1936), uint32] */;
    %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(1), int32] */;
    %194 = cast(%191, dtype="uint32") /* ty=Tensor[(1936), uint32] */;
    %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %196 = bitwise_xor(%194, %195) /* ty=Tensor[(1936), uint32] */;
    %197 = cast(%var_15506, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(1), int32] */;
    %199 = cast(%196, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?), float32] */;
    %201 = %174.1;
    %202 = @func_14673() /* ty=Tensor[(10, 8, 4), int16] */;
    %203 = %179.0;
    %204 = %182.0;
    %205 = @func_7975(%185, %186) /* ty=Tensor[(1, 10, 2), uint32] */;
    %206 = floor_mod(%199, %200) /* ty=Tensor[(1936), float32] */;
    (%201, %202, %203, %var_15445, %var_15446, %187, %204, meta[relay.Constant][10] /* ty=Tensor[(1584), bool] */, %205, meta[relay.Constant][11] /* ty=uint32 */, %var_15503, %206)
  };
  %207(%var_15516, %var_15517, %var_15518, %var_15519, %var_15520) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 4), int16], Tensor[(16, 3, 16), float32], Tensor[(768), float32], Tensor[(140), float64], Tensor[(6, 3, 8), float32], Tensor[(1280), uint32], Tensor[(1584), bool], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32], Tensor[(1936), float32]) */
}

def @func_13177() -> (Tensor[(6, 3, 8), float32],) {
  %208 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  (%208,)
}

def @func_18160(%var_18158: Tensor[(26, 13), float32], %var_18159: Tensor[(660), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(338), float32], Tensor[(26, 13), float32], Tensor[(8, 4, 16), bool], Tensor[(4, 11, 15), float32], Tensor[(660), float32]) {
  @func_18156(%var_18158, %var_18159) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(338), float32], Tensor[(26, 13), float32], Tensor[(8, 4, 16), bool], Tensor[(4, 11, 15), float32], Tensor[(660), float32]) */
}

def @func_18609() -> Tensor[(2, 16, 6), float32] {
  %210 = fn () -> Tensor[(2, 16, 6), float32] {
    %209 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 6), float32] */;
    rsqrt(%209) /* ty=Tensor[(2, 16, 6), float32] */
  };
  %210() /* ty=Tensor[(2, 16, 6), float32] */
}

def @func_687(%var_686: Tensor[(756), float32]) -> (Tensor[(4, 9, 3), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(9, 14, 6), float32]) {
  %219 = fn (%var_679: Tensor[(756), float32]) -> (Tensor[(4, 9, 3), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(9, 14, 6), float32]) {
    %211 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 9, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 9, 3), float64] */;
    %212 = cast(%var_679, dtype="float32") /* ty=Tensor[(756), float32] */;
    %213 = reshape(%212, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float32] */;
    %214 = @func_394(%213) /* ty=Tensor[(9, 14, 6), float32] */;
    %215 = cast(%214, dtype="float32") /* ty=Tensor[(9, 14, 6), float32] */;
    %216 = reshape(%215, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float32] */;
    %217 = acosh(%211) /* ty=Tensor[(4, 9, 3), float64] */;
    %218 = @func_394(%216) /* ty=Tensor[(9, 14, 6), float32] */;
    (%217, %214, %var_679, %218)
  };
  %219(%var_686) /* ty=(Tensor[(4, 9, 3), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(9, 14, 6), float32]) */
}

def @func_18207() -> (Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool]) {
  @func_18205() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool]) */
}

def @func_18095() -> (Tensor[(1584), bool],) {
  @func_18093() /* ty=(Tensor[(1584), bool],) */
}

def @func_17835() -> (Tensor[(6, 3, 8), float32],) {
  %222 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %220 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %221 = %220.0;
    (%221,)
  };
  %222() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_15626(%var_15625: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), int32],) {
  %229 = fn (%var_15614: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), int32],) {
    %223 = @func_13013() /* ty=Tensor[(6, 3, 8), float32] */;
    %224 = cast(%var_15614, dtype="int32") /* ty=Tensor[(6, 3, 8), int32] */;
    %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
    %226 = cast(%223, dtype="int32") /* ty=Tensor[(6, 3, 8), int32] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %228 = bitwise_and(%226, %227) /* ty=Tensor[(6, 3, 8), int32] */;
    (%228,)
  };
  %229(%var_15625) /* ty=(Tensor[(6, 3, 8), int32],) */
}

def @func_4920(%var_4916: Tensor[(16, 3, 4), uint16], %var_4917: Tensor[(16, 3, 4), uint16], %var_4918: Tensor[(1280), uint32], %var_4919: Tensor[(35), float64]) -> (Tensor[(16, 3, 4), float64], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32, 1), float32], Tensor[(35, 4), float64]) {
  @func_4914(%var_4916, %var_4917, %var_4918, %var_4919) /* ty=(Tensor[(16, 3, 4), float64], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32, 1), float32], Tensor[(35, 4), float64]) */
}

def @func_13954() -> Tensor[(6, 3, 8), float32] {
  @func_13952() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_10270(%var_10268: Tensor[(10, 7, 4), int32]) -> (Tensor[(10, 8, 16), float64], Tensor[(1280), uint32], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), uint8]) {
  @func_10267(%var_10268) /* ty=(Tensor[(10, 8, 16), float64], Tensor[(1280), uint32], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), uint8]) */
}

def @func_10934() -> (Tensor[(6, 3, 8), float32],) {
  @func_10932() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_18277() -> (Tensor[(6, 3, 8), float32], Tensor[(4, 9, 3), bool]) {
  @func_18275() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 9, 3), bool]) */
}

def @func_13141() -> (Tensor[(6, 3, 8), float32],) {
  @func_13139() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_13874(%var_13872: Tensor[(1584), bool]) -> (Tensor[(1280), uint32], Tensor[(8, 4, 16), bool], Tensor[(1584), bool]) {
  @func_13871(%var_13872) /* ty=(Tensor[(1280), uint32], Tensor[(8, 4, 16), bool], Tensor[(1584), bool]) */
}

def @func_17807() -> (Tensor[(6, 3, 8), float32],) {
  %232 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %230 = @func_14852() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %231 = %230.0;
    (%231,)
  };
  %232() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_18373(%var_18369: Tensor[(338), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool], Tensor[(512), uint32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) {
  %233 = @func_14058() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %234 = cast(meta[relay.Constant][14] /* ty=Tensor[(512), uint32] */, dtype="uint32") /* ty=Tensor[(512), uint32] */;
  %235 = reshape(%234, newshape=[256, 2]) /* ty=Tensor[(256, 2), uint32] */;
  %236 = @func_11027(%235) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool]) */;
  %237 = cast(%var_18369, dtype="float32") /* ty=Tensor[(338), float32] */;
  %238 = reshape(%237, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float32] */;
  %239 = %233.0;
  %240 = %236.1;
  %241 = @func_1498(%238) /* ty=Tensor[(13, 13, 2), float32] */;
  (%239, %240, meta[relay.Constant][14] /* ty=Tensor[(512), uint32] */, %241, %var_18369)
}

def @func_19164() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), float32], Tensor[(8, 4, 16), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64]) {
  @func_19162() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), float32], Tensor[(8, 4, 16), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64]) */
}

def @func_19072() -> Tensor[(8, 4, 16), bool] {
  %243 = fn () -> Tensor[(8, 4, 16), bool] {
    %242 = @func_16287() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) */;
    %242.0
  };
  %243() /* ty=Tensor[(8, 4, 16), bool] */
}

def @func_18082() -> Tensor[(6, 3, 8), float32] {
  %244 = @func_15145() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %244.1
}

def @func_13646(%var_13633: Tensor[(60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(60), float64]) {
  %245 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %246 = cast(%var_13633, dtype="float64") /* ty=Tensor[(60), float64] */;
  %247 = reshape(%246, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %248 = @func_11979(%247) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(5, ?, 12), float64]) */;
  %249 = %245.0;
  %250 = %248.0;
  (%249, %250, %var_13633)
}

def @func_13179() -> (Tensor[(6, 3, 8), float32],) {
  @func_13177() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_11879(%var_11877: Tensor[(16, 11, 11), uint64]) -> Tensor[(16, 11, 11), bool] {
  @func_11876(%var_11877) /* ty=Tensor[(16, 11, 11), bool] */
}

def @func_17736() -> (Tensor[(6, 3, 8), float32],) {
  %251 = @func_12053() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %252 = %251.0;
  (%252,)
}

def @func_11451(%var_11449: uint32, %var_11450: Tensor[(20), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) {
  %268 = fn (%var_11432: uint32, %var_11433: Tensor[(20), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) {
    %253 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %254 = cast(meta[relay.Constant][15] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %255 = cast(meta[relay.Constant][15] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %256 = cast(meta[relay.Constant][16] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %257 = reshape(%254, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
    %258 = reshape(%255, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
    %259 = reshape(%256, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %260 = @func_371(%257, %258, %259) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) */;
    %261 = cast(%var_11432, dtype="uint32") /* ty=uint32 */;
    %262 = cast(%var_11433, dtype="uint32") /* ty=Tensor[(20), uint32] */;
    %263 = reshape(%261, newshape=[]) /* ty=uint32 */;
    %264 = reshape(%262, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), uint32] */;
    %265 = %253.0;
    %266 = %260.1;
    %267 = @func_7975(%263, %264) /* ty=Tensor[(1, 10, 2), uint32] */;
    (%265, %266, meta[relay.Constant][15] /* ty=Tensor[(1584), bool] */, meta[relay.Constant][16] /* ty=Tensor[(900), float32] */, %267, %var_11432, %var_11433)
  };
  %268(%var_11449, %var_11450) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) */
}

def @func_14045() -> Tensor[(6, 3, 8), float32] {
  @func_14043() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_14675() -> Tensor[(10, 8, 4), int16] {
  @func_14673() /* ty=Tensor[(10, 8, 4), int16] */
}

def @func_13260() -> Tensor[(6, 3, 8), float32] {
  @func_11921() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_19299() -> (Tensor[(88, 22), uint64], Tensor[(144, 140), int16]) {
  %286 = fn () -> (Tensor[(88, 22), uint64], Tensor[(144, 140), int16]) {
    %269 = cast(meta[relay.Constant][17] /* ty=Tensor[(144, 1), float32] */, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
    %270 = reshape(%269, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
    %271 = @func_12775(%270) /* ty=(Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) */;
    %272 = @func_16484() /* ty=(Tensor[(140), float64],) */;
    %273 = %272.0;
    %274 = cast(meta[relay.Constant][17] /* ty=Tensor[(144, 1), float32] */, dtype="bool") /* ty=Tensor[(144, 1), bool] */;
    %275 = cast(%273, dtype="bool") /* ty=Tensor[(140), bool] */;
    %276 = logical_or(%274, %275) /* ty=Tensor[(144, 140), bool] */;
    %277 = cast(meta[relay.Constant][18] /* ty=Tensor[(144, 140), bool] */, dtype="uint8") /* ty=Tensor[(144, 140), uint8] */;
    %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(2), int32] */;
    %279 = cast(%276, dtype="uint8") /* ty=Tensor[(144, 140), uint8] */;
    %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %281 = multiply(%279, %280) /* ty=Tensor[(144, 140), uint8] */;
    %282 = cast(%281, dtype="int16") /* ty=Tensor[(144, 140), int16] */;
    %283 = cast(%273, dtype="int16") /* ty=Tensor[(140), int16] */;
    %284 = %271.2;
    %285 = bitwise_or(%282, %283) /* ty=Tensor[(144, 140), int16] */;
    (%284, %285)
  };
  %286() /* ty=(Tensor[(88, 22), uint64], Tensor[(144, 140), int16]) */
}

def @func_7310(%var_7307: Tensor[(9, 3, 13), int32], %var_7308: Tensor[(9, 3, 13), int32], %var_7309: Tensor[(1584), bool]) -> (Tensor[(9, 3, 13), bool], Tensor[(1584), bool], float64, Tensor[(1, 26), float64], Tensor[(1584), bool], Tensor[(900), float32]) {
  %302 = fn (%var_7261: Tensor[(9, 3, 13), int32], %var_7262: Tensor[(9, 3, 13), int32], %var_7269: Tensor[(1584), bool]) -> (Tensor[(9, 3, 13), bool], Tensor[(1584), bool], float64, Tensor[(1, 26), float64], Tensor[(1584), bool], Tensor[(900), float32]) {
    %287 = cast(%var_7262, dtype="bool") /* ty=Tensor[(9, 3, 13), bool] */;
    %288 = shape_of(%var_7261, dtype="int32") /* ty=Tensor[(3), int32] */;
    %289 = cast(%var_7261, dtype="bool") /* ty=Tensor[(9, 3, 13), bool] */;
    %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %291 = cast(7.04343f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %292 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 26), float64] */, dtype="float64") /* ty=Tensor[(1, 26), float64] */;
    %293 = cast(%var_7269, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %294 = cast(meta[relay.Constant][20] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %295 = reshape(%291, newshape=[]) /* ty=float64 */;
    %296 = reshape(%292, newshape=[13, 1, 2]) /* ty=Tensor[(13, 1, 2), float64] */;
    %297 = reshape(%293, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
    %298 = reshape(%294, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %299 = @func_6123(%295, %296, %297, %298) /* ty=(Tensor[(13, 1, 2), bool], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32]) */;
    %300 = not_equal(%289, %290) /* ty=Tensor[(9, 3, 13), bool] */;
    %301 = %299.2;
    (%300, %301, 7.04343f64 /* ty=float64 */, meta[relay.Constant][19] /* ty=Tensor[(1, 26), float64] */, %var_7269, meta[relay.Constant][20] /* ty=Tensor[(900), float32] */)
  };
  %302(%var_7307, %var_7308, %var_7309) /* ty=(Tensor[(9, 3, 13), bool], Tensor[(1584), bool], float64, Tensor[(1, 26), float64], Tensor[(1584), bool], Tensor[(900), float32]) */
}

def @func_15962() -> (Tensor[(6, 3, 8), float32],) {
  @func_15960() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_14043() -> Tensor[(6, 3, 8), float32] {
  %303 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %303.0
}

def @func_15346(%var_15332: Tensor[(35), float64], %var_15334: Tensor[(140), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(140), float64]) {
  %304 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %305 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %306 = cast(%var_15332, dtype="float64") /* ty=Tensor[(35), float64] */;
  %307 = cast(meta[relay.Constant][21] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %308 = cast(%var_15334, dtype="float64") /* ty=Tensor[(140), float64] */;
  %309 = reshape(%306, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
  %310 = reshape(%307, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %311 = reshape(%308, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %312 = @func_4835(%309, %310, %311) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
  %313 = %304.0;
  %314 = %305.1;
  %315 = %312.6;
  (%313, %314, %315, %var_15332, meta[relay.Constant][21] /* ty=Tensor[(32), float32] */, %var_15334)
}

def @func_3248(%var_3246: Tensor[(7, 2, 10), float64], %var_3247: Tensor[(7, 2, 10), float64]) -> (Tensor[(7, 2, 10), float64],) {
  %321 = fn (%var_3227: Tensor[(7, 2, 10), float64], %var_3228: Tensor[(7, 2, 10), float64]) -> (Tensor[(7, 2, 10), float64],) {
    %316 = cast(%var_3228, dtype="float64") /* ty=Tensor[(7, 2, 10), float64] */;
    %317 = shape_of(%var_3227, dtype="int32") /* ty=Tensor[(3), int32] */;
    %318 = cast(%var_3227, dtype="float64") /* ty=Tensor[(7, 2, 10), float64] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %320 = divide(%318, %319) /* ty=Tensor[(7, 2, 10), float64] */;
    (%320,)
  };
  %321(%var_3246, %var_3247) /* ty=(Tensor[(7, 2, 10), float64],) */
}

def @func_17721() -> (Tensor[(6, 3, 8), float32],) {
  @func_17719() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_12544(%var_12543: Tensor[(1584), bool]) -> (Tensor[(6, 3, 8), float32], Tensor[(1584), bool], Tensor[(140), float64], Tensor[(6, 260), uint8], Tensor[(3, 117), float32], Tensor[(3, 117), float32], Tensor[(5, ?, 12), float32], Tensor[(8, 4, 16), bool]) {
  %361 = fn (%var_12492: Tensor[(1584), bool]) -> (Tensor[(6, 3, 8), float32], Tensor[(1584), bool], Tensor[(140), float64], Tensor[(6, 260), uint8], Tensor[(3, 117), float32], Tensor[(3, 117), float32], Tensor[(5, ?, 12), float32], Tensor[(8, 4, 16), bool]) {
    %322 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 260), uint8] */, dtype="uint8") /* ty=Tensor[(6, 260), uint8] */;
    %323 = reshape(%322, newshape=[12, 130]) /* ty=Tensor[(12, 130), uint8] */;
    %324 = @func_12368(%323) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(140), float64], Tensor[(12, 130), uint8], Tensor[(140), float64], Tensor[(6, 3, 8), float32]) */;
    %325 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 117), int32] */, dtype="int32") /* ty=Tensor[(3, 117), int32] */;
    %326 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 117), int32] */, dtype="int32") /* ty=Tensor[(3, 117), int32] */;
    %327 = cast(%var_12492, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %328 = reshape(%325, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), int32] */;
    %329 = reshape(%326, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), int32] */;
    %330 = reshape(%327, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
    %331 = @func_7306(%328, %329, %330) /* ty=(Tensor[(9, 3, 13), bool], Tensor[(1584), bool], float64, Tensor[(1, 26), float64], Tensor[(1584), bool], Tensor[(900), float32]) */;
    %332 = %331.0;
    %333 = cast(%332, dtype="int8") /* ty=Tensor[(9, 3, 13), int8] */;
    %334 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(3, 117), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %335 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 117), int32] */, dtype="int8") /* ty=Tensor[(3, 117), int8] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %337 = maximum(%335, %336) /* ty=Tensor[(3, 117), int8] */;
    %338 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 117), int32] */, dtype="float32") /* ty=Tensor[(3, 117), float32] */;
    %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(2), int32] */;
    %340 = cast(%337, dtype="float32") /* ty=Tensor[(3, 117), float32] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %342 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 117), int32] */, dtype="float32") /* ty=Tensor[(3, 117), float32] */;
    %343 = shape_of(%337, dtype="int32") /* ty=Tensor[(2), int32] */;
    %344 = cast(%337, dtype="float32") /* ty=Tensor[(3, 117), float32] */;
    %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %346 = cast(meta[relay.Constant][24] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %347 = reshape(%346, newshape=[5, 1, 12]) /* ty=Tensor[(5, 1, 12), float64] */;
    %348 = @func_5376(%347) /* ty=(Tensor[(5, ?, 12), uint64], Tensor[(5, ?, 12), uint32]) */;
    %349 = %348.0;
    %350 = cast(meta[relay.Constant][24] /* ty=Tensor[(60), float64] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%349, dtype="float32") /* ty=Tensor[(5, ?, 12), float32] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %354 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
    %355 = @func_11921() /* ty=Tensor[(6, 3, 8), float32] */;
    %356 = %324.3;
    %357 = multiply(%340, %341) /* ty=Tensor[(3, 117), float32] */;
    %358 = floor_mod(%344, %345) /* ty=Tensor[(3, 117), float32] */;
    %359 = power(%352, %353) /* ty=Tensor[(5, ?, 12), float32] */;
    %360 = %354.0;
    (%355, %var_12492, %356, meta[relay.Constant][22] /* ty=Tensor[(6, 260), uint8] */, %357, %358, %359, %360)
  };
  %361(%var_12543) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(1584), bool], Tensor[(140), float64], Tensor[(6, 260), uint8], Tensor[(3, 117), float32], Tensor[(3, 117), float32], Tensor[(5, ?, 12), float32], Tensor[(8, 4, 16), bool]) */
}

def @func_18413() -> (Tensor[(6, 3, 8), float32],) {
  %362 = @func_16830() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %363 = %362.0;
  (%363,)
}

def @func_13926() -> (Tensor[(6, 3, 8), float64],) {
  @func_13924() /* ty=(Tensor[(6, 3, 8), float64],) */
}

def @func_16537() -> (Tensor[(6, 3, 8), float32], Tensor[(140), float32]) {
  %376 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(140), float32]) {
    %364 = cast(meta[relay.Constant][25] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %365 = cast(meta[relay.Constant][25] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %366 = reshape(%364, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
    %367 = reshape(%365, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
    %368 = @func_3245(%366, %367) /* ty=(Tensor[(7, 2, 10), float64],) */;
    %369 = %368.0;
    %370 = cast(%369, dtype="float32") /* ty=Tensor[(7, 2, 10), float32] */;
    %371 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(140), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %372 = cast(meta[relay.Constant][25] /* ty=Tensor[(140), float64] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?), float32] */;
    %374 = @func_14009() /* ty=Tensor[(6, 3, 8), float32] */;
    %375 = floor_mod(%372, %373) /* ty=Tensor[(140), float32] */;
    (%374, %375)
  };
  %376() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(140), float32]) */
}

def @func_17040() -> Tensor[(144), float32] {
  %377 = @func_14130() /* ty=(Tensor[(144), float32],) */;
  %377.0
}

def @func_14794() -> (Tensor[(8, 4, 16), bool],) {
  @func_14792() /* ty=(Tensor[(8, 4, 16), bool],) */
}

def @func_11921() -> Tensor[(6, 3, 8), float32] {
  @func_11822() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_15900(%var_15898: uint32) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], uint32, Tensor[(20), uint32], Tensor[(6, 3, 8), uint8]) {
  @func_15897(%var_15898) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], uint32, Tensor[(20), uint32], Tensor[(6, 3, 8), uint8]) */
}

def @func_18415() -> (Tensor[(6, 3, 8), float32],) {
  @func_18413() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_18996() -> (Tensor[(3, 117), float32], Tensor[(8, 4, 16), bool]) {
  %378 = @func_17383() /* ty=(Tensor[(3, 117), float32],) */;
  %379 = @func_14792() /* ty=(Tensor[(8, 4, 16), bool],) */;
  %380 = %378.0;
  %381 = %379.0;
  (%380, %381)
}

def @func_19429() -> Tensor[(1280), uint32] {
  @func_19427() /* ty=Tensor[(1280), uint32] */
}

def @main(%var_19439: Tensor[(32), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(26), float64], Tensor[(900, 1), float32], Tensor[(32), float32], Tensor[(6, 3, 8), float32], Tensor[(4, 8, ?), int64]) {
  %382 = @func_13179() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %383 = cast(meta[relay.Constant][26] /* ty=Tensor[(26), float64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %384 = cast(meta[relay.Constant][27] /* ty=Tensor[(900, 1), float32] */, dtype="float32") /* ty=Tensor[(900, 1), float32] */;
  %385 = cast(%var_19439, dtype="float32") /* ty=Tensor[(32), float32] */;
  %386 = reshape(%383, newshape=[26]) /* ty=Tensor[(26), float64] */;
  %387 = reshape(%384, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %388 = reshape(%385, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %389 = @func_16639(%386, %387, %388) /* ty=(Tensor[(1280), uint32], Tensor[(1584), bool], Tensor[(900), float32], float64, Tensor[(26), float64], Tensor[(900), float32], Tensor[(4, 8, 1), float32], Tensor[(32), float32]) */;
  %390 = %389.6;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(4, 8, 1), float64] */;
  %392 = sqrt(%391) /* ty=Tensor[(4, 8, 1), float64] */;
  %393 = cast(%390, dtype="int64") /* ty=Tensor[(4, 8, 1), int64] */;
  %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%392, dtype="int64") /* ty=Tensor[(4, 8, 1), int64] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %397 = @func_14009() /* ty=Tensor[(6, 3, 8), float32] */;
  %398 = %382.0;
  %399 = bitwise_or(%395, %396) /* ty=Tensor[(4, 8, ?), int64] */;
  (%397, meta[relay.Constant][26] /* ty=Tensor[(26), float64] */, meta[relay.Constant][27] /* ty=Tensor[(900, 1), float32] */, %var_19439, %398, %399)
}

def @func_16719() -> Tensor[(6, 3, 8), float32] {
  %400 = fn () -> Tensor[(6, 3, 8), float32] {
    @func_13952() /* ty=Tensor[(6, 3, 8), float32] */
  };
  %400() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_18629() -> (Tensor[(10, 2, 3), float64], Tensor[(10, 8, 16), uint32]) {
  %405 = fn () -> (Tensor[(10, 2, 3), float64], Tensor[(10, 8, 16), uint32]) {
    %401 = @func_18487() /* ty=(Tensor[(144), float32], Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(1560), uint8]) */;
    %402 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
    %403 = %401.2;
    %404 = %402.1;
    (%403, %404)
  };
  %405() /* ty=(Tensor[(10, 2, 3), float64], Tensor[(10, 8, 16), uint32]) */
}

def @func_11800() -> (Tensor[(6, 3, 8), float32],) {
  @func_11798() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_17237() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %406 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %407 = @func_17036() /* ty=(Tensor[(2, 3, 14), float32], Tensor[(6, 3, 8), float32]) */;
  %408 = %406.0;
  %409 = %407.1;
  (%408, %409)
}

def @func_2505(%var_2503: Tensor[(1200, 1), float64], %var_2504: Tensor[(756), float32]) -> (Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 16, 5), float64], Tensor[(1200, 1), float64], Tensor[(756), float32]) {
  @func_2501(%var_2503, %var_2504) /* ty=(Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 16, 5), float64], Tensor[(1200, 1), float64], Tensor[(756), float32]) */
}

def @func_10895() -> (Tensor[(6, 3, 8), float32],) {
  %410 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %411 = %410.0;
  (%411,)
}

def @func_12113(%var_12112: Tensor[(1936), uint64]) -> (Tensor[(6, 3, 8), float64], Tensor[(16, 11, 11), bool], Tensor[(1936), uint64]) {
  %422 = fn (%var_12102: Tensor[(1936), uint64]) -> (Tensor[(6, 3, 8), float64], Tensor[(16, 11, 11), bool], Tensor[(1936), uint64]) {
    %412 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %413 = %412.0;
    %414 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 3, 8), float32] */, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
    %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
    %416 = cast(%413, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
    %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %418 = cast(%var_12102, dtype="uint64") /* ty=Tensor[(1936), uint64] */;
    %419 = reshape(%418, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), uint64] */;
    %420 = mod(%416, %417) /* ty=Tensor[(6, 3, 8), float64] */;
    %421 = @func_11876(%419) /* ty=Tensor[(16, 11, 11), bool] */;
    (%420, %421, %var_12102)
  };
  %422(%var_12112) /* ty=(Tensor[(6, 3, 8), float64], Tensor[(16, 11, 11), bool], Tensor[(1936), uint64]) */
}

def @func_17521() -> Tensor[(6, 3, 8), float32] {
  @func_17519() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_11398(%var_11397: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), float32],) {
  %430 = fn (%var_11379: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), float32],) {
    %423 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %424 = %423.0;
    %425 = cast(%var_11379, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
    %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
    %427 = cast(%424, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
    %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %429 = subtract(%427, %428) /* ty=Tensor[(6, 3, 8), float32] */;
    (%429,)
  };
  %430(%var_11397) /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_18156(%var_18128: Tensor[(26, 13), float32], %var_18136: Tensor[(660), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(338), float32], Tensor[(26, 13), float32], Tensor[(8, 4, 16), bool], Tensor[(4, 11, 15), float32], Tensor[(660), float32]) {
  %431 = cast(%var_18128, dtype="float32") /* ty=Tensor[(26, 13), float32] */;
  %432 = reshape(%431, newshape=[338]) /* ty=Tensor[(338), float32] */;
  %433 = @func_14266(%432) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) */;
  %434 = cast(%var_18136, dtype="float32") /* ty=Tensor[(660), float32] */;
  %435 = reshape(%434, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %436 = @func_18082() /* ty=Tensor[(6, 3, 8), float32] */;
  %437 = %433.2;
  %438 = @func_12321() /* ty=Tensor[(8, 4, 16), bool] */;
  %439 = @func_5951(%435) /* ty=Tensor[(4, 11, 15), float32] */;
  (%436, %437, %var_18128, %438, %439, %var_18136)
}

def @func_12370(%var_12369: Tensor[(12, 130), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(140), float64], Tensor[(12, 130), uint8], Tensor[(140), float64], Tensor[(6, 3, 8), float32]) {
  %452 = fn (%var_12351: Tensor[(12, 130), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(140), float64], Tensor[(12, 130), uint8], Tensor[(140), float64], Tensor[(6, 3, 8), float32]) {
    %440 = @func_10932() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %441 = cast(%var_12351, dtype="uint8") /* ty=Tensor[(12, 130), uint8] */;
    %442 = cast(%var_12351, dtype="uint8") /* ty=Tensor[(12, 130), uint8] */;
    %443 = cast(meta[relay.Constant][29] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %444 = reshape(%441, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), uint8] */;
    %445 = reshape(%442, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), uint8] */;
    %446 = reshape(%443, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %447 = @func_10351(%444, %445, %446) /* ty=(Tensor[(351), int32], Tensor[(1584), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64], Tensor[(7, 2, 10), float64], Tensor[(15, 8, 13), int16]) */;
    %448 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
    %449 = %440.0;
    %450 = %447.3;
    %451 = %448.1;
    (%449, %450, %var_12351, meta[relay.Constant][29] /* ty=Tensor[(140), float64] */, %451)
  };
  %452(%var_12369) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(140), float64], Tensor[(12, 130), uint8], Tensor[(140), float64], Tensor[(6, 3, 8), float32]) */
}

def @func_16349() -> (Tensor[(2, 3, 14), float32],) {
  %453 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 3, 14), float32] */;
  %454 = cos(%453) /* ty=Tensor[(2, 3, 14), float32] */;
  (%454,)
}

def @func_12597(%var_12596: uint32) -> (Tensor[(8, 4, 16), bool], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) {
  %462 = fn (%var_12568: uint32) -> (Tensor[(8, 4, 16), bool], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) {
    %455 = cast(%var_12568, dtype="uint32") /* ty=uint32 */;
    %456 = cast(meta[relay.Constant][31] /* ty=Tensor[(20), uint32] */, dtype="uint32") /* ty=Tensor[(20), uint32] */;
    %457 = reshape(%455, newshape=[]) /* ty=uint32 */;
    %458 = reshape(%456, newshape=[20]) /* ty=Tensor[(20), uint32] */;
    %459 = @func_11448(%457, %458) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) */;
    %460 = @func_12321() /* ty=Tensor[(8, 4, 16), bool] */;
    %461 = %459.4;
    (%460, %461, %var_12568, meta[relay.Constant][31] /* ty=Tensor[(20), uint32] */)
  };
  %462(%var_12596) /* ty=(Tensor[(8, 4, 16), bool], Tensor[(1, 10, 2), uint32], uint32, Tensor[(20), uint32]) */
}

def @func_2803(%var_2798: Tensor[(4, 8, 1), float32]) -> (Tensor[(4, 8, 1), float32],) {
  %463 = cast(%var_2798, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
  %464 = rsqrt(%463) /* ty=Tensor[(4, 8, 1), float32] */;
  (%464,)
}

def @func_12322() -> Tensor[(8, 4, 16), bool] {
  %466 = fn () -> Tensor[(8, 4, 16), bool] {
    %465 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
    %465.0
  };
  %466() /* ty=Tensor[(8, 4, 16), bool] */
}

def @func_13139() -> (Tensor[(6, 3, 8), float32],) {
  %467 = @func_13113() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(144), float32]) */;
  %468 = %467.0;
  (%468,)
}

def @func_13669() -> Tensor[(6, 3, 8), float32] {
  %469 = fn () -> Tensor[(6, 3, 8), float32] {
    @func_12182() /* ty=Tensor[(6, 3, 8), float32] */
  };
  %469() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_4914(%var_4872: Tensor[(16, 3, 4), uint16], %var_4873: Tensor[(16, 3, 4), uint16], %var_4884: Tensor[(1280), uint32], %var_4896: Tensor[(35), float64]) -> (Tensor[(16, 3, 4), float64], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32, 1), float32], Tensor[(35, 4), float64]) {
  %470 = cast(%var_4873, dtype="uint16") /* ty=Tensor[(16, 3, 4), uint16] */;
  %471 = shape_of(%var_4872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%var_4872, dtype="uint16") /* ty=Tensor[(16, 3, 4), uint16] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %474 = multiply(%472, %473) /* ty=Tensor[(16, 3, 4), uint16] */;
  %475 = cast(%474, dtype="float64") /* ty=Tensor[(16, 3, 4), float64] */;
  %476 = cast(%var_4884, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %477 = cast(%var_4884, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %478 = reshape(%476, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %479 = reshape(%477, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %480 = @func_4480(%478, %479) /* ty=(Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) */;
  %481 = cast(%var_4896, dtype="float64") /* ty=Tensor[(35), float64] */;
  %482 = cast(meta[relay.Constant][32] /* ty=Tensor[(32, 1), float32] */, dtype="float32") /* ty=Tensor[(32, 1), float32] */;
  %483 = cast(meta[relay.Constant][33] /* ty=Tensor[(35, 4), float64] */, dtype="float64") /* ty=Tensor[(35, 4), float64] */;
  %484 = reshape(%481, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
  %485 = reshape(%482, newshape=[32]) /* ty=Tensor[(32), float32] */;
  %486 = reshape(%483, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %487 = @func_4835(%484, %485, %486) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
  %488 = log2(%475) /* ty=Tensor[(16, 3, 4), float64] */;
  %489 = %480.0;
  %490 = %487.4;
  (%488, %489, %var_4884, %490, %var_4896, meta[relay.Constant][32] /* ty=Tensor[(32, 1), float32] */, meta[relay.Constant][33] /* ty=Tensor[(35, 4), float64] */)
}

def @func_14673() -> Tensor[(10, 8, 4), int16] {
  %491 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 8, 4), int16] */, dtype="int16") /* ty=Tensor[(10, 8, 4), int16] */;
  %492 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(10, 8, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 8, 4), int16] */, dtype="int16") /* ty=Tensor[(10, 8, 4), int16] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%493, %494) /* ty=Tensor[(10, 8, 4), int16] */
}

def @func_11131(%var_11129: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), uint8],) {
  @func_11128(%var_11129) /* ty=(Tensor[(6, 3, 8), uint8],) */
}

def @func_12182() -> Tensor[(6, 3, 8), float32] {
  %495 = @func_11135() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %495.0
}

def @func_10267(%var_10205: Tensor[(10, 7, 4), int32]) -> (Tensor[(10, 8, 16), float64], Tensor[(1280), uint32], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), uint8]) {
  %496 = cast(meta[relay.Constant][36] /* ty=Tensor[(1280), uint32] */, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %497 = cast(meta[relay.Constant][36] /* ty=Tensor[(1280), uint32] */, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %498 = reshape(%496, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %499 = reshape(%497, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %500 = @func_4480(%498, %499) /* ty=(Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) */;
  %501 = cast(4 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %502 = cast(%var_10205, dtype="bool") /* ty=Tensor[(10, 7, 4), bool] */;
  %503 = not_equal(%501, %502) /* ty=Tensor[(10, 7, 4), bool] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
  %505 = sqrt(%504) /* ty=Tensor[(10, 7, 4), float32] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
  %507 = cast(4 /* ty=int32 */, dtype="float64") /* ty=float64 */;
  %508 = cast(%503, dtype="float64") /* ty=Tensor[(10, 7, 4), float64] */;
  %509 = divide(%507, %508) /* ty=Tensor[(10, 7, 4), float64] */;
  %510 = cast(%509, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
  %511 = shape_of(%var_10205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%var_10205, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %514 = %500.1;
  %515 = sin(%506) /* ty=Tensor[(10, 7, 4), float32] */;
  %516 = right_shift(%512, %513) /* ty=Tensor[(10, 7, 4), uint8] */;
  (%514, meta[relay.Constant][36] /* ty=Tensor[(1280), uint32] */, %515, %516)
}

def @func_4839(%var_4836: Tensor[(7, 5, 1), float64], %var_4837: Tensor[(32), float32], %var_4838: Tensor[(5, 28), float64]) -> (Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) {
  %533 = fn (%var_4798: Tensor[(7, 5, 1), float64], %var_4806: Tensor[(32), float32], %var_4814: Tensor[(5, 28), float64]) -> (Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) {
    %517 = cast(%var_4798, dtype="float64") /* ty=Tensor[(7, 5, 1), float64] */;
    %518 = cast(%var_4806, dtype="float32") /* ty=Tensor[(32), float32] */;
    %519 = reshape(%518, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), float32] */;
    %520 = @func_2803(%519) /* ty=(Tensor[(4, 8, 1), float32],) */;
    %521 = cast(%var_4814, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %522 = cast(%var_4814, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %523 = reshape(%521, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
    %524 = reshape(%522, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
    %525 = @func_3245(%523, %524) /* ty=(Tensor[(7, 2, 10), float64],) */;
    %526 = cast(meta[relay.Constant][37] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %527 = reshape(%526, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), float64] */;
    %528 = @func_4143(%527) /* ty=(Tensor[(10, 2, 3), float64],) */;
    %529 = exp(%517) /* ty=Tensor[(7, 5, 1), float64] */;
    %530 = %520.0;
    %531 = %525.0;
    %532 = %528.0;
    (%529, %530, %var_4806, %531, %var_4814, %532, meta[relay.Constant][37] /* ty=Tensor[(60), float64] */)
  };
  %533(%var_4836, %var_4837, %var_4838) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */
}

def @func_15712() -> (Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) {
  %534 = @func_14792() /* ty=(Tensor[(8, 4, 16), bool],) */;
  %535 = @func_13984() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %536 = %534.0;
  %537 = %535.0;
  (%536, %537)
}

def @func_16662() -> Tensor[(6, 3, 8), float32] {
  %539 = fn () -> Tensor[(6, 3, 8), float32] {
    %538 = @func_15126() /* ty=(Tensor[(13, 12, 2), bool], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(35, 4), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32]) */;
    %538.5
  };
  %539() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_16504() -> Tensor[(8, 4, 16), bool] {
  @func_16502() /* ty=Tensor[(8, 4, 16), bool] */
}

def @func_16832() -> (Tensor[(6, 3, 8), float32],) {
  @func_16830() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_17738() -> (Tensor[(6, 3, 8), float32],) {
  @func_17736() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_14059() -> (Tensor[(6, 3, 8), float32],) {
  %542 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %540 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %541 = %540.0;
    (%541,)
  };
  %542() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_11860() -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) {
  %543 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %544 = cast(meta[relay.Constant][38] /* ty=Tensor[(1280), uint32] */, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %545 = cast(meta[relay.Constant][38] /* ty=Tensor[(1280), uint32] */, dtype="uint32") /* ty=Tensor[(1280), uint32] */;
  %546 = reshape(%544, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %547 = reshape(%545, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
  %548 = @func_4480(%546, %547) /* ty=(Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) */;
  %549 = %543.0;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %551 = reshape(%550, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %552 = @func_11148(%551) /* ty=(Tensor[(6, 3, 8), float64],) */;
  %553 = %548.0;
  %554 = %552.0;
  (%549, %553, meta[relay.Constant][38] /* ty=Tensor[(1280), uint32] */, %554)
}

def @func_16250(%var_16242: Tensor[(1, 60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(1, 60), float64]) {
  %555 = cast(%var_16242, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
  %556 = reshape(%555, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), float64] */;
  %557 = @func_4143(%556) /* ty=(Tensor[(10, 2, 3), float64],) */;
  %558 = @func_14043() /* ty=Tensor[(6, 3, 8), float32] */;
  %559 = %557.0;
  (%558, %559, %var_16242)
}

def @func_12468() -> (Tensor[(1280), uint32],) {
  %562 = fn () -> (Tensor[(1280), uint32],) {
    %560 = @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */;
    %561 = %560.2;
    (%561,)
  };
  %562() /* ty=(Tensor[(1280), uint32],) */
}

def @func_14484() -> (Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(140), float64]) {
  %568 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(140), float64]) {
    %563 = cast(meta[relay.Constant][39] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %564 = reshape(%563, newshape=[35, 4]) /* ty=Tensor[(35, 4), float64] */;
    %565 = @func_13033(%564) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(35), float64], Tensor[(35, 4), float64], Tensor[(224), float32], Tensor[(6, 260), uint8]) */;
    %566 = @func_14043() /* ty=Tensor[(6, 3, 8), float32] */;
    %567 = %565.1;
    (%566, %567, meta[relay.Constant][39] /* ty=Tensor[(140), float64] */)
  };
  %568() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(140), float64]) */
}

def @func_12838() -> (Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) {
  @func_12836() /* ty=(Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) */
}

def @func_12947() -> (Tensor[(6, 3, 8), float32],) {
  %570 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %569 = @func_11822() /* ty=Tensor[(6, 3, 8), float32] */;
    (%569,)
  };
  %570() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_14010() -> Tensor[(6, 3, 8), float32] {
  %572 = fn () -> Tensor[(6, 3, 8), float32] {
    %571 = @func_13139() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %571.0
  };
  %572() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_16428() -> (Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), float32]) {
  %577 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), float32]) {
    %573 = @func_13984() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %574 = @func_16349() /* ty=(Tensor[(2, 3, 14), float32],) */;
    %575 = %573.0;
    %576 = %574.0;
    (%575, %576)
  };
  %577() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), float32]) */
}

def @func_18084() -> Tensor[(6, 3, 8), float32] {
  @func_18082() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_16036() -> (Tensor[(8, 4, 16), bool],) {
  @func_16034() /* ty=(Tensor[(8, 4, 16), bool],) */
}

def @func_17356(%var_17354: Tensor[(128), float64], %var_17355: Tensor[(256), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float64], Tensor[(16, 2, 8), uint8], Tensor[(128), float64], Tensor[(256), float64]) {
  %589 = fn (%var_17342: Tensor[(128), float64], %var_17343: Tensor[(256), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float64], Tensor[(16, 2, 8), uint8], Tensor[(128), float64], Tensor[(256), float64]) {
    %578 = @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */;
    %579 = cast(%var_17342, dtype="float64") /* ty=Tensor[(128), float64] */;
    %580 = cast(%var_17343, dtype="float64") /* ty=Tensor[(256), float64] */;
    %581 = cast(%var_17343, dtype="float64") /* ty=Tensor[(256), float64] */;
    %582 = reshape(%579, newshape=[16, 1, 8]) /* ty=Tensor[(16, 1, 8), float64] */;
    %583 = reshape(%580, newshape=[16, 2, 8]) /* ty=Tensor[(16, 2, 8), float64] */;
    %584 = reshape(%581, newshape=[16, 2, 8]) /* ty=Tensor[(16, 2, 8), float64] */;
    %585 = @func_14902(%582, %583, %584) /* ty=(Tensor[(16, 2, 8), uint8],) */;
    %586 = @func_12883() /* ty=Tensor[(6, 3, 8), float32] */;
    %587 = %578.3;
    %588 = %585.0;
    (%586, %587, %588, %var_17342, %var_17343)
  };
  %589(%var_17354, %var_17355) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float64], Tensor[(16, 2, 8), uint8], Tensor[(128), float64], Tensor[(256), float64]) */
}

def @func_11128(%var_11121: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), uint8],) {
  %590 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %591 = %590.0;
  %592 = cast(%var_11121, dtype="uint8") /* ty=Tensor[(6, 3, 8), uint8] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="uint8") /* ty=Tensor[(6, 3, 8), uint8] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %596 = add(%594, %595) /* ty=Tensor[(6, 3, 8), uint8] */;
  (%596,)
}

def @func_16639(%var_16636: Tensor[(26), float64], %var_16637: Tensor[(900), float32], %var_16638: Tensor[(32), float32]) -> (Tensor[(1280), uint32], Tensor[(1584), bool], Tensor[(900), float32], float64, Tensor[(26), float64], Tensor[(900), float32], Tensor[(4, 8, 1), float32], Tensor[(32), float32]) {
  %615 = fn (%var_16626: Tensor[(26), float64], %var_16627: Tensor[(900), float32], %var_16633: Tensor[(32), float32]) -> (Tensor[(1280), uint32], Tensor[(1584), bool], Tensor[(900), float32], float64, Tensor[(26), float64], Tensor[(900), float32], Tensor[(4, 8, 1), float32], Tensor[(32), float32]) {
    %597 = @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */;
    %598 = @func_16287() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) */;
    %599 = cast(-6.06726f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %600 = cast(%var_16626, dtype="float64") /* ty=Tensor[(26), float64] */;
    %601 = %598.2;
    %602 = cast(%601, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %603 = cast(%var_16627, dtype="float32") /* ty=Tensor[(900), float32] */;
    %604 = reshape(%599, newshape=[]) /* ty=float64 */;
    %605 = reshape(%600, newshape=[13, 1, 2]) /* ty=Tensor[(13, 1, 2), float64] */;
    %606 = reshape(%602, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
    %607 = reshape(%603, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %608 = @func_6123(%604, %605, %606, %607) /* ty=(Tensor[(13, 1, 2), bool], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32]) */;
    %609 = cast(%var_16633, dtype="float32") /* ty=Tensor[(32), float32] */;
    %610 = reshape(%609, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), float32] */;
    %611 = @func_2803(%610) /* ty=(Tensor[(4, 8, 1), float32],) */;
    %612 = %597.2;
    %613 = %608.3;
    %614 = %611.0;
    (%612, %601, %613, -6.06726f64 /* ty=float64 */, %var_16626, %var_16627, %614, %var_16633)
  };
  %615(%var_16636, %var_16637, %var_16638) /* ty=(Tensor[(1280), uint32], Tensor[(1584), bool], Tensor[(900), float32], float64, Tensor[(26), float64], Tensor[(900), float32], Tensor[(4, 8, 1), float32], Tensor[(32), float32]) */
}

def @func_13409(%var_13397: Tensor[(720), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(4, 11, 15), float32], Tensor[(660), float32], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(13, 13, 2), float32], Tensor[(720), uint8], Tensor[(1200), float64]) {
  %616 = cast(meta[relay.Constant][40] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %617 = reshape(%616, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %618 = cast(meta[relay.Constant][41] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %619 = reshape(%618, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float32] */;
  %620 = cast(%var_13397, dtype="uint8") /* ty=Tensor[(720), uint8] */;
  %621 = cast(%var_13397, dtype="uint8") /* ty=Tensor[(720), uint8] */;
  %622 = cast(meta[relay.Constant][42] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %623 = cast(%var_13397, dtype="float64") /* ty=Tensor[(720), float64] */;
  %624 = reshape(%620, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), uint8] */;
  %625 = reshape(%621, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), uint8] */;
  %626 = reshape(%622, newshape=[4, 300]) /* ty=Tensor[(4, 300), float64] */;
  %627 = reshape(%623, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), float64] */;
  %628 = @func_3769(%624, %625, %626, %627) /* ty=(Tensor[(9, 10, 8), uint8], Tensor[(15, 10, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64], Tensor[(9, 10, 8), uint8], Tensor[(4, 300), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(13, 13, 2), float32]) */;
  %629 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  %630 = @func_5951(%617) /* ty=Tensor[(4, 11, 15), float32] */;
  %631 = @func_394(%619) /* ty=Tensor[(9, 14, 6), float32] */;
  %632 = %628.8;
  (%629, %630, meta[relay.Constant][40] /* ty=Tensor[(660), float32] */, %631, meta[relay.Constant][41] /* ty=Tensor[(756), float32] */, %632, %var_13397, meta[relay.Constant][42] /* ty=Tensor[(1200), float64] */)
}

def @func_17519() -> Tensor[(6, 3, 8), float32] {
  %633 = @func_11786() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %633.0
}

def @func_11787() -> (Tensor[(6, 3, 8), float32],) {
  %636 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %634 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %635 = %634.0;
    (%635,)
  };
  %636() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_11982(%var_11980: Tensor[(60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(5, ?, 12), float64]) {
  @func_11979(%var_11980) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(5, ?, 12), float64]) */
}

def @func_18007() -> (Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), bool], Tensor[(2, 3, 14), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 9, 3), float64], Tensor[(756), float32]) {
  %653 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), bool], Tensor[(2, 3, 14), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 9, 3), float64], Tensor[(756), float32]) {
    %637 = @func_13984() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %638 = @func_17036() /* ty=(Tensor[(2, 3, 14), float32], Tensor[(6, 3, 8), float32]) */;
    %639 = %638.0;
    %640 = cast(meta[relay.Constant][43] /* ty=Tensor[(2, 3, 14), float32] */, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
    %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
    %642 = cast(%639, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %644 = cast(%639, dtype="float64") /* ty=Tensor[(2, 3, 14), float64] */;
    %645 = cast(meta[relay.Constant][44] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %646 = reshape(%645, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %647 = @func_685(%646) /* ty=(Tensor[(4, 9, 3), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(9, 14, 6), float32]) */;
    %648 = %637.0;
    %649 = greater(%642, %643) /* ty=Tensor[(2, 3, 14), bool] */;
    %650 = sin(%644) /* ty=Tensor[(2, 3, 14), float64] */;
    %651 = @func_13668() /* ty=Tensor[(6, 3, 8), float32] */;
    %652 = %647.0;
    (%648, %649, %650, %651, %652, meta[relay.Constant][44] /* ty=Tensor[(756), float32] */)
  };
  %653() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), bool], Tensor[(2, 3, 14), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 9, 3), float64], Tensor[(756), float32]) */
}

def @func_17719() -> (Tensor[(6, 3, 8), float32],) {
  %654 = @func_13260() /* ty=Tensor[(6, 3, 8), float32] */;
  (%654,)
}

def @func_18205() -> (Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool]) {
  %655 = @func_12946() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %656 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %657 = %655.0;
  %658 = %656.0;
  (%657, %658)
}

def @func_13792(%var_13779: Tensor[(900), float32], %var_13783: Tensor[(2, 600), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), bool], Tensor[(10, 8, 16), float64], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(9, 10, 8), uint8], Tensor[(720), uint8], Tensor[(2, 600), float64]) {
  %659 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
  %660 = %659.1;
  %661 = cast(%660, dtype="float32") /* ty=Tensor[(10, 8, 16), float32] */;
  %662 = asinh(%661) /* ty=Tensor[(10, 8, 16), float32] */;
  %663 = cast(%660, dtype="uint8") /* ty=Tensor[(10, 8, 16), uint8] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%662, dtype="uint8") /* ty=Tensor[(10, 8, 16), uint8] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %667 = bitwise_or(%665, %666) /* ty=Tensor[(10, 8, 16), uint8] */;
  %668 = cast(%662, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%667, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %672 = cast(%667, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
  %673 = cast(meta[relay.Constant][45] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %674 = cast(meta[relay.Constant][45] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %675 = cast(%var_13779, dtype="float32") /* ty=Tensor[(900), float32] */;
  %676 = reshape(%673, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
  %677 = reshape(%674, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
  %678 = reshape(%675, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %679 = @func_371(%676, %677, %678) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) */;
  %680 = cast(meta[relay.Constant][46] /* ty=Tensor[(720), uint8] */, dtype="uint8") /* ty=Tensor[(720), uint8] */;
  %681 = cast(meta[relay.Constant][46] /* ty=Tensor[(720), uint8] */, dtype="uint8") /* ty=Tensor[(720), uint8] */;
  %682 = cast(%var_13783, dtype="float64") /* ty=Tensor[(2, 600), float64] */;
  %683 = cast(meta[relay.Constant][46] /* ty=Tensor[(720), uint8] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %684 = reshape(%680, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), uint8] */;
  %685 = reshape(%681, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), uint8] */;
  %686 = reshape(%682, newshape=[4, 300]) /* ty=Tensor[(4, 300), float64] */;
  %687 = reshape(%683, newshape=[9, 10, 8]) /* ty=Tensor[(9, 10, 8), float64] */;
  %688 = @func_3769(%684, %685, %686, %687) /* ty=(Tensor[(9, 10, 8), uint8], Tensor[(15, 10, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64], Tensor[(9, 10, 8), uint8], Tensor[(4, 300), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(13, 13, 2), float32]) */;
  %689 = @func_12883() /* ty=Tensor[(6, 3, 8), float32] */;
  %690 = less(%670, %671) /* ty=Tensor[(10, 8, 16), bool] */;
  %691 = log2(%672) /* ty=Tensor[(10, 8, 16), float64] */;
  %692 = %679.1;
  %693 = %688.0;
  (%689, %690, %691, %692, meta[relay.Constant][45] /* ty=Tensor[(1584), bool] */, %var_13779, %693, meta[relay.Constant][46] /* ty=Tensor[(720), uint8] */, %var_13783)
}

def @func_14778() -> Tensor[(6, 3, 8), float32] {
  @func_14776() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_15856(%var_15796: Tensor[(2, 4, 5), int32]) -> (Tensor[(8, 4, 16), bool], Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32], Tensor[(144), float32], Tensor[(2, 4, 5), uint32], Tensor[(6, 3, 8), float32], Tensor[(3, 20), float64]) {
  %694 = @func_14130() /* ty=(Tensor[(144), float32],) */;
  %695 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 4, 5), int32] */, dtype="int32") /* ty=Tensor[(2, 4, 5), int32] */;
  %696 = shape_of(%var_15796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_15796, dtype="int32") /* ty=Tensor[(2, 4, 5), int32] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %699 = minimum(%697, %698) /* ty=Tensor[(2, 4, 5), int32] */;
  %700 = cast(%699, dtype="uint32") /* ty=Tensor[(2, 4, 5), uint32] */;
  %701 = shape_of(%var_15796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%var_15796, dtype="uint32") /* ty=Tensor[(2, 4, 5), uint32] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %704 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 20), float64] */, dtype="float64") /* ty=Tensor[(3, 20), float64] */;
  %705 = reshape(%704, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %706 = @func_14717(%705) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(60), float64]) */;
  %707 = @func_12903() /* ty=Tensor[(8, 4, 16), bool] */;
  %708 = @func_12321() /* ty=Tensor[(8, 4, 16), bool] */;
  %709 = @func_14009() /* ty=Tensor[(6, 3, 8), float32] */;
  %710 = %694.0;
  %711 = bitwise_xor(%702, %703) /* ty=Tensor[(2, 4, 5), uint32] */;
  %712 = %706.0;
  (%707, %708, %709, %710, %711, %712, meta[relay.Constant][48] /* ty=Tensor[(3, 20), float64] */)
}

def @func_14269(%var_14267: Tensor[(338), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) {
  @func_14266(%var_14267) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) */
}

def @func_18238() -> Tensor[(6, 3, 8), float64] {
  @func_18236() /* ty=Tensor[(6, 3, 8), float64] */
}

def @func_14776() -> Tensor[(6, 3, 8), float32] {
  %713 = @func_13984() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %713.0
}

def @func_15127() -> (Tensor[(13, 12, 2), bool], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(35, 4), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32]) {
  %728 = fn () -> (Tensor[(13, 12, 2), bool], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(35, 4), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32]) {
    %714 = cast(meta[relay.Constant][49] /* ty=Tensor[(13, 1, 2), int64] */, dtype="bool") /* ty=Tensor[(13, 1, 2), bool] */;
    %715 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 12, 2), int64] */, dtype="bool") /* ty=Tensor[(13, 12, 2), bool] */;
    %716 = cast(meta[relay.Constant][51] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
    %717 = cast(meta[relay.Constant][52] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %718 = cast(meta[relay.Constant][53] /* ty=Tensor[(35, 4), float64] */, dtype="float64") /* ty=Tensor[(35, 4), float64] */;
    %719 = reshape(%716, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
    %720 = reshape(%717, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %721 = reshape(%718, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %722 = @func_4835(%719, %720, %721) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
    %723 = @func_14483() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(140), float64]) */;
    %724 = not_equal(%714, %715) /* ty=Tensor[(13, 12, 2), bool] */;
    %725 = %722.4;
    %726 = @func_13952() /* ty=Tensor[(6, 3, 8), float32] */;
    %727 = %723.1;
    (%724, %725, meta[relay.Constant][51] /* ty=Tensor[(35), float64] */, meta[relay.Constant][52] /* ty=Tensor[(32), float32] */, meta[relay.Constant][53] /* ty=Tensor[(35, 4), float64] */, %726, %727)
  };
  %728() /* ty=(Tensor[(13, 12, 2), bool], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(35, 4), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32]) */
}

def @func_11137() -> (Tensor[(6, 3, 8), float32],) {
  @func_11135() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_11781(%var_11777: Tensor[(35), float64], %var_11778: Tensor[(5, 28), float64], %var_11779: Tensor[(4, 8, 7), float32], %var_11780: Tensor[(1560), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(5, 28), float64], Tensor[(60), float64], Tensor[(4, 8, 7), bool], Tensor[(4, 8, 35), bool], Tensor[(10, 2, 3), float64], Tensor[(4, 8, 1), float32], Tensor[(140), float64], Tensor[(1560), uint8], Tensor[(4, 8, 35), float32], Tensor[(4, 8, 35), float64]) {
  %792 = fn (%var_11670: Tensor[(35), float64], %var_11672: Tensor[(5, 28), float64], %var_11688: Tensor[(4, 8, 7), float32], %var_11728: Tensor[(1560), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(5, 28), float64], Tensor[(60), float64], Tensor[(4, 8, 7), bool], Tensor[(4, 8, 35), bool], Tensor[(10, 2, 3), float64], Tensor[(4, 8, 1), float32], Tensor[(140), float64], Tensor[(1560), uint8], Tensor[(4, 8, 35), float32], Tensor[(4, 8, 35), float64]) {
    %729 = @func_10932() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %730 = cast(%var_11670, dtype="float64") /* ty=Tensor[(35), float64] */;
    %731 = cast(%var_11670, dtype="float64") /* ty=Tensor[(35), float64] */;
    %732 = cast(meta[relay.Constant][54] /* ty=Tensor[(4, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 8), float32] */;
    %733 = cast(%var_11672, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %734 = reshape(%731, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
    %735 = reshape(%732, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %736 = reshape(%733, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %737 = @func_4835(%734, %735, %736) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
    %738 = %737.1;
    %739 = cast(%738, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
    %740 = cast(%var_11672, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %741 = reshape(%730, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
    %742 = reshape(%739, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %743 = reshape(%740, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %744 = @func_4835(%741, %742, %743) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
    %745 = cast(%738, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
    %746 = cast(%var_11688, dtype="bool") /* ty=Tensor[(4, 8, 7), bool] */;
    %747 = cast(%var_11670, dtype="bool") /* ty=Tensor[(35), bool] */;
    %748 = cast(%738, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
    %749 = less(%747, %748) /* ty=Tensor[(4, 8, 35), bool] */;
    %750 = cast(%749, dtype="float64") /* ty=Tensor[(4, 8, 35), float64] */;
    %751 = log(%750) /* ty=Tensor[(4, 8, 35), float64] */;
    %752 = cast(%751, dtype="bool") /* ty=Tensor[(4, 8, 35), bool] */;
    %753 = cast(%738, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
    %754 = %744.6;
    %755 = cast(%754, dtype="float64") /* ty=Tensor[(60), float64] */;
    %756 = reshape(%755, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), float64] */;
    %757 = @func_4143(%756) /* ty=(Tensor[(10, 2, 3), float64],) */;
    %758 = cast(%var_11670, dtype="float64") /* ty=Tensor[(35), float64] */;
    %759 = cast(meta[relay.Constant][54] /* ty=Tensor[(4, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 8), float32] */;
    %760 = cast(%var_11672, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %761 = reshape(%758, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float64] */;
    %762 = reshape(%759, newshape=[32]) /* ty=Tensor[(32), float32] */;
    %763 = reshape(%760, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %764 = @func_4835(%761, %762, %763) /* ty=(Tensor[(7, 5, 1), float64], Tensor[(4, 8, 1), float32], Tensor[(32), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64], Tensor[(10, 2, 3), float64], Tensor[(60), float64]) */;
    %765 = cast(%var_11728, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %766 = cast(%var_11728, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %767 = cast(%var_11672, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %768 = reshape(%765, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), uint8] */;
    %769 = reshape(%766, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), uint8] */;
    %770 = reshape(%767, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %771 = @func_10351(%768, %769, %770) /* ty=(Tensor[(351), int32], Tensor[(1584), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64], Tensor[(7, 2, 10), float64], Tensor[(15, 8, 13), int16]) */;
    %772 = cast(%751, dtype="float32") /* ty=Tensor[(4, 8, 35), float32] */;
    %773 = acos(%772) /* ty=Tensor[(4, 8, 35), float32] */;
    %774 = cast(%773, dtype="float64") /* ty=Tensor[(4, 8, 35), float64] */;
    %775 = cast(%var_11670, dtype="float64") /* ty=Tensor[(35), float64] */;
    %776 = divide(%774, %775) /* ty=Tensor[(4, 8, 35), float64] */;
    %777 = cast(%776, dtype="float32") /* ty=Tensor[(4, 8, 35), float32] */;
    %778 = cast(%776, dtype="float64") /* ty=Tensor[(4, 8, 35), float64] */;
    %779 = sin(%778) /* ty=Tensor[(4, 8, 35), float64] */;
    %780 = cast(%779, dtype="float64") /* ty=Tensor[(4, 8, 35), float64] */;
    %781 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
    %782 = cast(%773, dtype="float64") /* ty=Tensor[(4, 8, 35), float64] */;
    %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %784 = %729.0;
    %785 = not_equal(%745, %746) /* ty=Tensor[(4, 8, 7), bool] */;
    %786 = greater(%752, %753) /* ty=Tensor[(4, 8, 35), bool] */;
    %787 = %757.0;
    %788 = %764.1;
    %789 = %771.3;
    %790 = sinh(%777) /* ty=Tensor[(4, 8, 35), float32] */;
    %791 = mod(%782, %783) /* ty=Tensor[(4, 8, 35), float64] */;
    (%784, meta[relay.Constant][54] /* ty=Tensor[(4, 8), float32] */, %var_11672, %754, %785, %786, %787, %788, %789, %var_11728, %790, %791)
  };
  %792(%var_11777, %var_11778, %var_11779, %var_11780) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(5, 28), float64], Tensor[(60), float64], Tensor[(4, 8, 7), bool], Tensor[(4, 8, 35), bool], Tensor[(10, 2, 3), float64], Tensor[(4, 8, 1), float32], Tensor[(140), float64], Tensor[(1560), uint8], Tensor[(4, 8, 35), float32], Tensor[(4, 8, 35), float64]) */
}

def @func_13015() -> Tensor[(6, 3, 8), float32] {
  @func_13013() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_16921() -> (Tensor[(6, 3, 8), uint64], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %798 = fn () -> (Tensor[(6, 3, 8), uint64], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
    %793 = @func_13350() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), uint64]) */;
    %794 = @func_16072() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %795 = %793.1;
    %796 = @func_14512() /* ty=Tensor[(6, 3, 8), float32] */;
    %797 = %794.0;
    (%795, %796, %797)
  };
  %798() /* ty=(Tensor[(6, 3, 8), uint64], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */
}

def @func_12689() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %799 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %800 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %801 = %799.0;
  %802 = %800.0;
  (%801, %802)
}

def @func_5378(%var_5377: Tensor[(5, 1, 12), float64]) -> (Tensor[(5, ?, 12), uint64], Tensor[(5, ?, 12), uint32]) {
  %815 = fn (%var_5355: Tensor[(5, 1, 12), float64]) -> (Tensor[(5, ?, 12), uint64], Tensor[(5, ?, 12), uint32]) {
    %803 = cast(%var_5355, dtype="float64") /* ty=Tensor[(5, 1, 12), float64] */;
    %804 = atanh(%803) /* ty=Tensor[(5, 1, 12), float64] */;
    %805 = cast(%var_5355, dtype="uint64") /* ty=Tensor[(5, 1, 12), uint64] */;
    %806 = shape_of(%804, dtype="int32") /* ty=Tensor[(3), int32] */;
    %807 = cast(%804, dtype="uint64") /* ty=Tensor[(5, 1, 12), uint64] */;
    %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %809 = cast(%804, dtype="uint32") /* ty=Tensor[(5, 1, 12), uint32] */;
    %810 = shape_of(%var_5355, dtype="int32") /* ty=Tensor[(3), int32] */;
    %811 = cast(%var_5355, dtype="uint32") /* ty=Tensor[(5, 1, 12), uint32] */;
    %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %813 = maximum(%807, %808) /* ty=Tensor[(5, ?, 12), uint64] */;
    %814 = bitwise_and(%811, %812) /* ty=Tensor[(5, ?, 12), uint32] */;
    (%813, %814)
  };
  %815(%var_5377) /* ty=(Tensor[(5, ?, 12), uint64], Tensor[(5, ?, 12), uint32]) */
}

def @func_15043(%var_15042: Tensor[(756), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(9, 14, 6), float64]) {
  %831 = fn (%var_15008: Tensor[(756), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(9, 14, 6), float64]) {
    %816 = @func_13350() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), uint64]) */;
    %817 = cast(%var_15008, dtype="float32") /* ty=Tensor[(756), float32] */;
    %818 = reshape(%817, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %819 = @func_685(%818) /* ty=(Tensor[(4, 9, 3), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(9, 14, 6), float32]) */;
    %820 = cast(%var_15008, dtype="float32") /* ty=Tensor[(756), float32] */;
    %821 = reshape(%820, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float32] */;
    %822 = @func_394(%821) /* ty=Tensor[(9, 14, 6), float32] */;
    %823 = cast(%var_15008, dtype="float64") /* ty=Tensor[(756), float64] */;
    %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
    %825 = cast(%822, dtype="float64") /* ty=Tensor[(9, 14, 6), float64] */;
    %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %827 = @func_13952() /* ty=Tensor[(6, 3, 8), float32] */;
    %828 = %816.0;
    %829 = %819.3;
    %830 = floor_mod(%825, %826) /* ty=Tensor[(9, 14, 6), float64] */;
    (%827, %828, %829, %830)
  };
  %831(%var_15042) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(9, 14, 6), float64]) */
}

def @func_16830() -> (Tensor[(6, 3, 8), float32],) {
  %832 = @func_14444() /* ty=Tensor[(6, 3, 8), float32] */;
  (%832,)
}

def @func_15714() -> (Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) {
  @func_15712() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */
}

def @func_13547() -> Tensor[(6, 3, 8), float64] {
  %835 = fn () -> Tensor[(6, 3, 8), float64] {
    %833 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
    %834 = cast(%833, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
    sinh(%834) /* ty=Tensor[(6, 3, 8), float64] */
  };
  %835() /* ty=Tensor[(6, 3, 8), float64] */
}

def @func_6128(%var_6124: float64, %var_6125: Tensor[(13, 1, 2), float64], %var_6126: Tensor[(1584), bool], %var_6127: Tensor[(900), float32]) -> (Tensor[(13, 1, 2), bool], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32]) {
  %847 = fn (%var_6107: float64, %var_6108: Tensor[(13, 1, 2), float64], %var_6115: Tensor[(1584), bool], %var_6116: Tensor[(900), float32]) -> (Tensor[(13, 1, 2), bool], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32]) {
    %836 = cast(%var_6107, dtype="bool") /* ty=bool */;
    %837 = cast(%var_6108, dtype="bool") /* ty=Tensor[(13, 1, 2), bool] */;
    %838 = cast(%var_6115, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %839 = cast(%var_6115, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %840 = cast(%var_6116, dtype="float32") /* ty=Tensor[(900), float32] */;
    %841 = reshape(%838, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
    %842 = reshape(%839, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
    %843 = reshape(%840, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %844 = @func_371(%841, %842, %843) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) */;
    %845 = not_equal(%836, %837) /* ty=Tensor[(13, 1, 2), bool] */;
    %846 = %844.3;
    (%845, %846, %var_6115, %var_6116)
  };
  %847(%var_6124, %var_6125, %var_6126, %var_6127) /* ty=(Tensor[(13, 1, 2), bool], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32]) */
}

def @func_394(%var_391: Tensor[(9, 14, 6), float32]) -> Tensor[(9, 14, 6), float32] {
  %848 = cast(%var_391, dtype="float32") /* ty=Tensor[(9, 14, 6), float32] */;
  atanh(%848) /* ty=Tensor[(9, 14, 6), float32] */
}

def @func_11027(%var_11017: Tensor[(256, 2), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool]) {
  %849 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %850 = cast(%var_11017, dtype="uint32") /* ty=Tensor[(256, 2), uint32] */;
  %851 = cast(%var_11017, dtype="uint32") /* ty=Tensor[(256, 2), uint32] */;
  %852 = reshape(%850, newshape=[16, 16, 2]) /* ty=Tensor[(16, 16, 2), uint32] */;
  %853 = reshape(%851, newshape=[16, 16, 2]) /* ty=Tensor[(16, 16, 2), uint32] */;
  %854 = @func_5578(%852, %853) /* ty=Tensor[(16, 16, 2), uint32] */;
  %855 = cast(%854, dtype="bool") /* ty=Tensor[(16, 16, 2), bool] */;
  %856 = shape_of(%var_11017, dtype="int32") /* ty=Tensor[(2), int32] */;
  %857 = cast(%var_11017, dtype="bool") /* ty=Tensor[(256, 2), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %859 = %849.0;
  %860 = logical_or(%857, %858) /* ty=Tensor[(256, 2), bool] */;
  (%859, %860)
}

def @func_4145(%var_4144: Tensor[(10, 2, 3), float64]) -> (Tensor[(10, 2, 3), float64],) {
  %863 = fn (%var_4135: Tensor[(10, 2, 3), float64]) -> (Tensor[(10, 2, 3), float64],) {
    %861 = cast(%var_4135, dtype="float64") /* ty=Tensor[(10, 2, 3), float64] */;
    %862 = atanh(%861) /* ty=Tensor[(10, 2, 3), float64] */;
    (%862,)
  };
  %863(%var_4144) /* ty=(Tensor[(10, 2, 3), float64],) */
}

def @func_11876(%var_11868: Tensor[(16, 11, 11), uint64]) -> Tensor[(16, 11, 11), bool] {
  %864 = cast(meta[relay.Constant][55] /* ty=Tensor[(16, 11, 11), uint64] */, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %865 = shape_of(%var_11868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %866 = cast(%var_11868, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%866, %867) /* ty=Tensor[(16, 11, 11), bool] */
}

def @func_13924() -> (Tensor[(6, 3, 8), float64],) {
  %868 = @func_12836() /* ty=(Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) */;
  %869 = %868.1;
  (%869,)
}

def @func_19162() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), float32], Tensor[(8, 4, 16), bool], Tensor[(7, 2, 10), float64], Tensor[(140), float64]) {
  %870 = @func_17806() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %871 = @func_16594() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %872 = @func_16427() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), float32]) */;
  %873 = cast(meta[relay.Constant][56] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %874 = cast(meta[relay.Constant][56] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %875 = reshape(%873, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %876 = reshape(%874, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
  %877 = @func_3245(%875, %876) /* ty=(Tensor[(7, 2, 10), float64],) */;
  %878 = %870.0;
  %879 = %871.0;
  %880 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
  %881 = %872.1;
  %882 = @func_12903() /* ty=Tensor[(8, 4, 16), bool] */;
  %883 = %877.0;
  (%878, %879, %880, %881, %882, %883, meta[relay.Constant][56] /* ty=Tensor[(140), float64] */)
}

def @func_12055() -> (Tensor[(6, 3, 8), float32],) {
  @func_12053() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_13412(%var_13410: Tensor[(720), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(4, 11, 15), float32], Tensor[(660), float32], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(13, 13, 2), float32], Tensor[(720), uint8], Tensor[(1200), float64]) {
  @func_13409(%var_13410) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 11, 15), float32], Tensor[(660), float32], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(13, 13, 2), float32], Tensor[(720), uint8], Tensor[(1200), float64]) */
}

def @func_12884() -> Tensor[(6, 3, 8), float32] {
  %885 = fn () -> Tensor[(6, 3, 8), float32] {
    %884 = @func_12758() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(12, 16, 9), float64], float64, Tensor[(15, 10, 6), float32], Tensor[(900), float32]) */;
    %884.0
  };
  %885() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_2501(%var_2498: Tensor[(1200, 1), float64], %var_2499: Tensor[(756), float32]) -> (Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 15, 16), float32], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 16, 5), float64], Tensor[(1200, 1), float64], Tensor[(756), float32]) {
  %886 = cast(meta[relay.Constant][57] /* ty=Tensor[(15, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %887 = cast(meta[relay.Constant][57] /* ty=Tensor[(15, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %888 = cast(meta[relay.Constant][57] /* ty=Tensor[(15, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %889 = cast(meta[relay.Constant][58] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %890 = cast(meta[relay.Constant][58] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %891 = reshape(%889, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %892 = reshape(%890, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %893 = @func_71(%891, %892) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %894 = %893.0;
  %895 = cast(%894, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %896 = cast(meta[relay.Constant][58] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %897 = reshape(%895, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %898 = reshape(%896, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %899 = @func_71(%897, %898) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %900 = cast(%var_2498, dtype="float64") /* ty=Tensor[(1200, 1), float64] */;
  %901 = cast(%var_2498, dtype="float64") /* ty=Tensor[(1200, 1), float64] */;
  %902 = cast(%var_2499, dtype="float32") /* ty=Tensor[(756), float32] */;
  %903 = reshape(%900, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %904 = reshape(%901, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
  %905 = reshape(%902, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %906 = @func_1875(%903, %904, %905) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64]) */;
  %907 = cosh(%886) /* ty=Tensor[(15, 15, 16), float32] */;
  %908 = sinh(%887) /* ty=Tensor[(15, 15, 16), float32] */;
  %909 = exp(%888) /* ty=Tensor[(15, 15, 16), float32] */;
  %910 = %899.0;
  %911 = %906.0;
  (%907, %908, %909, %894, meta[relay.Constant][58] /* ty=Tensor[(900), float32] */, %910, %911, %var_2498, %var_2499)
}

def @func_10859() -> (Tensor[(6, 3, 8), float32],) {
  %914 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %912 = cast(meta[relay.Constant][59] /* ty=Tensor[(6, 3, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
    %913 = cos(%912) /* ty=Tensor[(6, 3, 8), float32] */;
    (%913,)
  };
  %914() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_12836() -> (Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) {
  %915 = @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */;
  %916 = cast(meta[relay.Constant][60] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %917 = reshape(%916, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %918 = @func_11148(%917) /* ty=(Tensor[(6, 3, 8), float64],) */;
  %919 = %915.2;
  %920 = %918.0;
  (%919, %920, meta[relay.Constant][60] /* ty=Tensor[(144), float32] */)
}

def @func_13985() -> (Tensor[(6, 3, 8), float32],) {
  %922 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %921 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
    (%921,)
  };
  %922() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_14853() -> (Tensor[(6, 3, 8), float32],) {
  %924 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %923 = @func_13668() /* ty=Tensor[(6, 3, 8), float32] */;
    (%923,)
  };
  %924() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_16186() -> (Tensor[(10, 8, 4), int16], Tensor[(144), float32], Tensor[(6, 3, 8), float32]) {
  %929 = fn () -> (Tensor[(10, 8, 4), int16], Tensor[(144), float32], Tensor[(6, 3, 8), float32]) {
    %925 = @func_14130() /* ty=(Tensor[(144), float32],) */;
    %926 = @func_14673() /* ty=Tensor[(10, 8, 4), int16] */;
    %927 = %925.0;
    %928 = @func_12883() /* ty=Tensor[(6, 3, 8), float32] */;
    (%926, %927, %928)
  };
  %929() /* ty=(Tensor[(10, 8, 4), int16], Tensor[(144), float32], Tensor[(6, 3, 8), float32]) */
}

def @func_13320() -> (Tensor[(6, 3, 8), float64], Tensor[(6, 3, 8), float32]) {
  %936 = fn () -> (Tensor[(6, 3, 8), float64], Tensor[(6, 3, 8), float32]) {
    %930 = @func_12689() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */;
    %931 = %930.0;
    %932 = cast(%931, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
    %933 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %934 = sigmoid(%932) /* ty=Tensor[(6, 3, 8), float64] */;
    %935 = %933.0;
    (%934, %935)
  };
  %936() /* ty=(Tensor[(6, 3, 8), float64], Tensor[(6, 3, 8), float32]) */
}

def @func_16502() -> Tensor[(8, 4, 16), bool] {
  %937 = @func_16034() /* ty=(Tensor[(8, 4, 16), bool],) */;
  %937.0
}

def @func_15175() -> Tensor[(6, 3, 8), float32] {
  %939 = fn () -> Tensor[(6, 3, 8), float32] {
    %938 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
    %938.0
  };
  %939() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_15209(%var_15207: Tensor[(11, 7, 16), uint8]) -> Tensor[(11, 7, 16), bool] {
  @func_15206(%var_15207) /* ty=Tensor[(11, 7, 16), bool] */
}

def @func_16073() -> (Tensor[(6, 3, 8), float32],) {
  %941 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %940 = @func_15174() /* ty=Tensor[(6, 3, 8), float32] */;
    (%940,)
  };
  %941() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_13262() -> Tensor[(6, 3, 8), float32] {
  @func_13260() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_17297(%var_17295: Tensor[(756), float32]) -> (Tensor[(6, 3, 8), float64], Tensor[(10, 8, 4), int16], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(756), float32]) {
  @func_17294(%var_17295) /* ty=(Tensor[(6, 3, 8), float64], Tensor[(10, 8, 4), int16], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(756), float32]) */
}

def @func_16750() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %945 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
    %942 = @func_16185() /* ty=(Tensor[(10, 8, 4), int16], Tensor[(144), float32], Tensor[(6, 3, 8), float32]) */;
    %943 = %942.2;
    %944 = @func_16661() /* ty=Tensor[(6, 3, 8), float32] */;
    (%943, %944)
  };
  %945() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */
}

def @func_376(%var_373: Tensor[(16, 11, 9), bool], %var_374: Tensor[(16, 11, 9), bool], %var_375: Tensor[(900), float32]) -> (Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) {
  @func_371(%var_373, %var_374, %var_375) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) */
}

def @func_13035(%var_13034: Tensor[(35, 4), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(35), float64], Tensor[(35, 4), float64], Tensor[(224), float32], Tensor[(6, 260), uint8]) {
  %957 = fn (%var_13029: Tensor[(35, 4), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(35), float64], Tensor[(35, 4), float64], Tensor[(224), float32], Tensor[(6, 260), uint8]) {
    %946 = cast(meta[relay.Constant][61] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
    %947 = cast(%var_13029, dtype="float64") /* ty=Tensor[(35, 4), float64] */;
    %948 = cast(meta[relay.Constant][62] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %949 = cast(meta[relay.Constant][63] /* ty=Tensor[(6, 260), uint8] */, dtype="uint8") /* ty=Tensor[(6, 260), uint8] */;
    %950 = reshape(%946, newshape=[35]) /* ty=Tensor[(35), float64] */;
    %951 = reshape(%947, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %952 = reshape(%948, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), float32] */;
    %953 = reshape(%949, newshape=[1560]) /* ty=Tensor[(1560), uint8] */;
    %954 = @func_11776(%950, %951, %952, %953) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(5, 28), float64], Tensor[(60), float64], Tensor[(4, 8, 7), bool], Tensor[(4, 8, 35), bool], Tensor[(10, 2, 3), float64], Tensor[(4, 8, 1), float32], Tensor[(140), float64], Tensor[(1560), uint8], Tensor[(4, 8, 35), float32], Tensor[(4, 8, 35), float64]) */;
    %955 = @func_11921() /* ty=Tensor[(6, 3, 8), float32] */;
    %956 = %954.1;
    (%955, %956, meta[relay.Constant][61] /* ty=Tensor[(35), float64] */, %var_13029, meta[relay.Constant][62] /* ty=Tensor[(224), float32] */, meta[relay.Constant][63] /* ty=Tensor[(6, 260), uint8] */)
  };
  %957(%var_13034) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(35), float64], Tensor[(35, 4), float64], Tensor[(224), float32], Tensor[(6, 260), uint8]) */
}

def @func_15960() -> (Tensor[(6, 3, 8), float32],) {
  %958 = @func_11786() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %959 = %958.0;
  (%959,)
}

def @func_74(%var_72: Tensor[(15, 10, 6), float32], %var_73: Tensor[(15, 10, 6), float32]) -> (Tensor[(15, 10, 6), float32],) {
  %965 = fn (%var_34: Tensor[(15, 10, 6), float32], %var_35: Tensor[(15, 10, 6), float32]) -> (Tensor[(15, 10, 6), float32],) {
    %960 = cast(%var_35, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
    %961 = shape_of(%var_34, dtype="int32") /* ty=Tensor[(3), int32] */;
    %962 = cast(%var_34, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
    %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %964 = floor_divide(%962, %963) /* ty=Tensor[(15, 10, 6), float32] */;
    (%964,)
  };
  %965(%var_72, %var_73) /* ty=(Tensor[(15, 10, 6), float32],) */
}

def @func_13903(%var_13901: Tensor[(60), float64], %var_13902: Tensor[(6, 260), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float32], Tensor[(6, 260), uint8]) {
  %976 = fn (%var_13887: Tensor[(60), float64], %var_13893: Tensor[(6, 260), uint8]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float32], Tensor[(6, 260), uint8]) {
    %966 = @func_13350() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), uint64]) */;
    %967 = cast(%var_13887, dtype="float64") /* ty=Tensor[(60), float64] */;
    %968 = reshape(%967, newshape=[10, 2, 3]) /* ty=Tensor[(10, 2, 3), float64] */;
    %969 = @func_4143(%968) /* ty=(Tensor[(10, 2, 3), float64],) */;
    %970 = cast(%var_13893, dtype="uint8") /* ty=Tensor[(6, 260), uint8] */;
    %971 = reshape(%970, newshape=[12, 130]) /* ty=Tensor[(12, 130), uint8] */;
    %972 = @func_12368(%971) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(140), float64], Tensor[(12, 130), uint8], Tensor[(140), float64], Tensor[(6, 3, 8), float32]) */;
    %973 = %966.0;
    %974 = %969.0;
    %975 = %972.0;
    (%973, %974, %var_13887, %975, %var_13893)
  };
  %976(%var_13901, %var_13902) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float32], Tensor[(6, 260), uint8]) */
}

def @func_16288() -> (Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) {
  %983 = fn () -> (Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) {
    %977 = @func_15145() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
    %978 = cast(meta[relay.Constant][64] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %979 = reshape(%978, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
    %980 = @func_12542(%979) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(1584), bool], Tensor[(140), float64], Tensor[(6, 260), uint8], Tensor[(3, 117), float32], Tensor[(3, 117), float32], Tensor[(5, ?, 12), float32], Tensor[(8, 4, 16), bool]) */;
    %981 = %977.0;
    %982 = %980.5;
    (%981, %982, meta[relay.Constant][64] /* ty=Tensor[(1584), bool] */)
  };
  %983() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) */
}

def @func_12184() -> Tensor[(6, 3, 8), float32] {
  @func_12182() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_1875(%var_1853: Tensor[(15, 16, 5), float64], %var_1854: Tensor[(15, 16, 5), float64], %var_1860: Tensor[(756), float32]) -> (Tensor[(15, 16, 5), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64]) {
  %984 = cast(%var_1854, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %985 = shape_of(%var_1853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %986 = cast(%var_1853, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %988 = cast(%var_1860, dtype="float32") /* ty=Tensor[(756), float32] */;
  %989 = reshape(%988, newshape=[9, 14, 6]) /* ty=Tensor[(9, 14, 6), float32] */;
  %990 = cast(%var_1854, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %991 = floor_mod(%986, %987) /* ty=Tensor[(15, 16, 5), float64] */;
  %992 = @func_394(%989) /* ty=Tensor[(9, 14, 6), float32] */;
  %993 = log2(%990) /* ty=Tensor[(15, 16, 5), float64] */;
  (%991, %992, %var_1860, %993)
}

def @func_12691() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  @func_12689() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */
}

def @func_12053() -> (Tensor[(6, 3, 8), float32],) {
  %994 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %995 = %994.0;
  (%995,)
}

def @func_13114() -> (Tensor[(6, 3, 8), float32], Tensor[(144), float32]) {
  %999 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(144), float32]) {
    %996 = @func_12836() /* ty=(Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) */;
    %997 = @func_11822() /* ty=Tensor[(6, 3, 8), float32] */;
    %998 = %996.2;
    (%997, %998)
  };
  %999() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(144), float32]) */
}

def @func_17294(%var_17289: Tensor[(756), float32]) -> (Tensor[(6, 3, 8), float64], Tensor[(10, 8, 4), int16], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(756), float32]) {
  %1000 = @func_13319() /* ty=(Tensor[(6, 3, 8), float64], Tensor[(6, 3, 8), float32]) */;
  %1001 = @func_16185() /* ty=(Tensor[(10, 8, 4), int16], Tensor[(144), float32], Tensor[(6, 3, 8), float32]) */;
  %1002 = cast(%var_17289, dtype="float32") /* ty=Tensor[(756), float32] */;
  %1003 = reshape(%1002, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %1004 = @func_685(%1003) /* ty=(Tensor[(4, 9, 3), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(9, 14, 6), float32]) */;
  %1005 = %1000.0;
  %1006 = %1001.0;
  %1007 = @func_12883() /* ty=Tensor[(6, 3, 8), float32] */;
  %1008 = %1004.3;
  (%1005, %1006, %1007, %1008, %var_17289)
}

def @func_11823() -> Tensor[(6, 3, 8), float32] {
  %1010 = fn () -> Tensor[(6, 3, 8), float32] {
    %1009 = @func_10932() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %1009.0
  };
  %1010() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_11923() -> Tensor[(6, 3, 8), float32] {
  @func_11921() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_10932() -> (Tensor[(6, 3, 8), float32],) {
  %1011 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1012 = %1011.0;
  (%1012,)
}

def @func_12266() -> (Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) {
  %1019 = fn () -> (Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) {
    %1013 = cast(meta[relay.Constant][66] /* ty=Tensor[(8, 4, 16), float32] */, dtype="bool") /* ty=Tensor[(8, 4, 16), bool] */;
    %1014 = shape_of(meta[relay.Constant][65] /* ty=Tensor[(8, 4, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1015 = cast(meta[relay.Constant][65] /* ty=Tensor[(8, 4, 16), float32] */, dtype="bool") /* ty=Tensor[(8, 4, 16), bool] */;
    %1016 = dyn.reshape(%1013, %1014, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1017 = not_equal(%1015, %1016) /* ty=Tensor[(8, 4, 16), bool] */;
    %1018 = @func_11921() /* ty=Tensor[(6, 3, 8), float32] */;
    (%1017, %1018)
  };
  %1019() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */
}

def @func_10088(%var_10086: Tensor[(16, 3, 16), float32], %var_10087: Tensor[(5, 28), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64]) {
  %1028 = fn (%var_10076: Tensor[(16, 3, 16), float32], %var_10081: Tensor[(5, 28), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64]) {
    %1020 = cast(%var_10076, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
    %1021 = cast(%var_10081, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %1022 = cast(%var_10081, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %1023 = reshape(%1021, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
    %1024 = reshape(%1022, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float64] */;
    %1025 = @func_3245(%1023, %1024) /* ty=(Tensor[(7, 2, 10), float64],) */;
    %1026 = sin(%1020) /* ty=Tensor[(16, 3, 16), float32] */;
    %1027 = %1025.0;
    (%1026, %1027, %var_10081)
  };
  %1028(%var_10086, %var_10087) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(7, 2, 10), float64], Tensor[(5, 28), float64]) */
}

def @func_13013() -> Tensor[(6, 3, 8), float32] {
  %1029 = @func_12946() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1029.0
}

def @func_16253(%var_16251: Tensor[(1, 60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(1, 60), float64]) {
  @func_16250(%var_16251) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(1, 60), float64]) */
}

def @func_14829() -> (Tensor[(6, 3, 8), float32],) {
  %1032 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %1030 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
    %1031 = %1030.0;
    (%1031,)
  };
  %1032() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_18275() -> (Tensor[(6, 3, 8), float32], Tensor[(4, 9, 3), bool]) {
  %1033 = @func_18006() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(2, 3, 14), bool], Tensor[(2, 3, 14), float64], Tensor[(6, 3, 8), float32], Tensor[(4, 9, 3), float64], Tensor[(756), float32]) */;
  %1034 = %1033.4;
  %1035 = cast(meta[relay.Constant][67] /* ty=Tensor[(4, 9, 3), float64] */, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %1036 = shape_of(%1034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1037 = cast(%1034, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %1038 = dyn.reshape(%1035, %1036, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1039 = @func_12883() /* ty=Tensor[(6, 3, 8), float32] */;
  %1040 = not_equal(%1037, %1038) /* ty=Tensor[(4, 9, 3), bool] */;
  (%1039, %1040)
}

def @func_11635(%var_11634: Tensor[(338), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(1200), float64], Tensor[(3, 252), float32]) {
  %1056 = fn (%var_11607: Tensor[(338), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(1200), float64], Tensor[(3, 252), float32]) {
    %1041 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %1042 = cast(%var_11607, dtype="float32") /* ty=Tensor[(338), float32] */;
    %1043 = reshape(%1042, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), float32] */;
    %1044 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %1045 = cast(meta[relay.Constant][68] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %1046 = cast(meta[relay.Constant][68] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %1047 = cast(meta[relay.Constant][69] /* ty=Tensor[(3, 252), float32] */, dtype="float32") /* ty=Tensor[(3, 252), float32] */;
    %1048 = reshape(%1045, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
    %1049 = reshape(%1046, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), float64] */;
    %1050 = reshape(%1047, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %1051 = @func_1875(%1048, %1049, %1050) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(9, 14, 6), float32], Tensor[(756), float32], Tensor[(15, 16, 5), float64]) */;
    %1052 = %1041.0;
    %1053 = @func_1498(%1043) /* ty=Tensor[(13, 13, 2), float32] */;
    %1054 = %1044.0;
    %1055 = %1051.1;
    (%1052, %1053, %var_11607, %1054, %1055, meta[relay.Constant][68] /* ty=Tensor[(1200), float64] */, meta[relay.Constant][69] /* ty=Tensor[(3, 252), float32] */)
  };
  %1056(%var_11634) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32], Tensor[(6, 3, 8), float32], Tensor[(9, 14, 6), float32], Tensor[(1200), float64], Tensor[(3, 252), float32]) */
}

def @func_10897() -> (Tensor[(6, 3, 8), float32],) {
  @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_16218() -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 4), int16]) {
  %1057 = @func_15960() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1058 = @func_16185() /* ty=(Tensor[(10, 8, 4), int16], Tensor[(144), float32], Tensor[(6, 3, 8), float32]) */;
  %1059 = %1057.0;
  %1060 = %1058.0;
  (%1059, %1060)
}

def @func_17037() -> (Tensor[(2, 3, 14), float32], Tensor[(6, 3, 8), float32]) {
  %1064 = fn () -> (Tensor[(2, 3, 14), float32], Tensor[(6, 3, 8), float32]) {
    %1061 = @func_16349() /* ty=(Tensor[(2, 3, 14), float32],) */;
    %1062 = %1061.0;
    %1063 = @func_12182() /* ty=Tensor[(6, 3, 8), float32] */;
    (%1062, %1063)
  };
  %1064() /* ty=(Tensor[(2, 3, 14), float32], Tensor[(6, 3, 8), float32]) */
}

def @func_16015() -> Tensor[(6, 3, 8), float32] {
  %1066 = fn () -> Tensor[(6, 3, 8), float32] {
    %1065 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
    %1065.0
  };
  %1066() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_17105() -> (Tensor[(6, 3, 8), float32],) {
  @func_17103() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_5953(%var_5952: Tensor[(4, 11, 15), float32]) -> Tensor[(4, 11, 15), float32] {
  %1068 = fn (%var_5948: Tensor[(4, 11, 15), float32]) -> Tensor[(4, 11, 15), float32] {
    %1067 = cast(%var_5948, dtype="float32") /* ty=Tensor[(4, 11, 15), float32] */;
    log10(%1067) /* ty=Tensor[(4, 11, 15), float32] */
  };
  %1068(%var_5952) /* ty=Tensor[(4, 11, 15), float32] */
}

def @func_15350(%var_15348: Tensor[(35), float64], %var_15349: Tensor[(140), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(140), float64]) {
  @func_15346(%var_15348, %var_15349) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(140), float64]) */
}

def @func_17489() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(16, 338), int64]) {
  @func_17487() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(16, 338), int64]) */
}

def @func_18093() -> (Tensor[(1584), bool],) {
  %1069 = @func_16287() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(3, 117), float32], Tensor[(1584), bool]) */;
  %1070 = %1069.2;
  (%1070,)
}

def @func_397(%var_395: Tensor[(9, 14, 6), float32]) -> Tensor[(9, 14, 6), float32] {
  @func_394(%var_395) /* ty=Tensor[(9, 14, 6), float32] */
}

def @func_17487() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(16, 338), int64]) {
  %1071 = @func_13139() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1072 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 338), float32] */, dtype="float32") /* ty=Tensor[(1, 338), float32] */;
  %1073 = reshape(%1072, newshape=[338]) /* ty=Tensor[(338), float32] */;
  %1074 = @func_14266(%1073) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) */;
  %1075 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 338), float32] */, dtype="int64") /* ty=Tensor[(1, 338), int64] */;
  %1076 = cast(meta[relay.Constant][71] /* ty=Tensor[(16, 338), float32] */, dtype="int64") /* ty=Tensor[(16, 338), int64] */;
  %1077 = %1071.0;
  %1078 = %1074.0;
  %1079 = bitwise_xor(%1075, %1076) /* ty=Tensor[(16, 338), int64] */;
  (%1077, %1078, %1079)
}

def @func_18489() -> (Tensor[(144), float32], Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(1560), uint8]) {
  @func_18487() /* ty=(Tensor[(144), float32], Tensor[(6, 3, 8), float32], Tensor[(10, 2, 3), float64], Tensor[(60), float64], Tensor[(1560), uint8]) */
}

def @func_12759() -> (Tensor[(6, 3, 8), float32], Tensor[(12, 16, 9), float64], float64, Tensor[(15, 10, 6), float32], Tensor[(900), float32]) {
  %1092 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(12, 16, 9), float64], float64, Tensor[(15, 10, 6), float32], Tensor[(900), float32]) {
    %1080 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
    %1081 = cast(-9.54907f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1082 = reshape(%1081, newshape=[]) /* ty=float64 */;
    %1083 = @func_6243(%1082) /* ty=(Tensor[(12, 16, 9), float64],) */;
    %1084 = cast(meta[relay.Constant][72] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %1085 = cast(meta[relay.Constant][72] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %1086 = reshape(%1084, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
    %1087 = reshape(%1085, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
    %1088 = @func_71(%1086, %1087) /* ty=(Tensor[(15, 10, 6), float32],) */;
    %1089 = %1080.1;
    %1090 = %1083.0;
    %1091 = %1088.0;
    (%1089, %1090, -9.54907f64 /* ty=float64 */, %1091, meta[relay.Constant][72] /* ty=Tensor[(900), float32] */)
  };
  %1092() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(12, 16, 9), float64], float64, Tensor[(15, 10, 6), float32], Tensor[(900), float32]) */
}

def @func_18998() -> (Tensor[(3, 117), float32], Tensor[(8, 4, 16), bool]) {
  @func_18996() /* ty=(Tensor[(3, 117), float32], Tensor[(8, 4, 16), bool]) */
}

def @func_14393() -> (Tensor[(6, 3, 8), float64], Tensor[(5, ?, 12), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float64]) {
  %1093 = cast(meta[relay.Constant][73] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %1094 = reshape(%1093, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %1095 = @func_11979(%1094) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(5, ?, 12), float64]) */;
  %1096 = @func_13546() /* ty=Tensor[(6, 3, 8), float64] */;
  %1097 = %1095.2;
  %1098 = @func_13546() /* ty=Tensor[(6, 3, 8), float64] */;
  (%1096, %1097, meta[relay.Constant][73] /* ty=Tensor[(60), float64] */, %1098)
}

def @func_18236() -> Tensor[(6, 3, 8), float64] {
  %1099 = @func_13924() /* ty=(Tensor[(6, 3, 8), float64],) */;
  %1099.0
}

def @func_15305() -> (Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(6, 3, 8), float32], Tensor[(512), uint32], Tensor[(10, 8, 4), float32], Tensor[(900), float32], Tensor[(1200), float64]) {
  %1125 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(6, 3, 8), float32], Tensor[(512), uint32], Tensor[(10, 8, 4), float32], Tensor[(900), float32], Tensor[(1200), float64]) {
    %1100 = @func_10858() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %1101 = cast(meta[relay.Constant][74] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %1102 = cast(meta[relay.Constant][74] /* ty=Tensor[(1584), bool] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %1103 = cast(meta[relay.Constant][75] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %1104 = reshape(%1101, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
    %1105 = reshape(%1102, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), bool] */;
    %1106 = reshape(%1103, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %1107 = @func_371(%1104, %1105, %1106) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) */;
    %1108 = cast(meta[relay.Constant][76] /* ty=Tensor[(512), uint32] */, dtype="uint32") /* ty=Tensor[(512), uint32] */;
    %1109 = reshape(%1108, newshape=[256, 2]) /* ty=Tensor[(256, 2), uint32] */;
    %1110 = @func_11027(%1109) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool]) */;
    %1111 = @func_14673() /* ty=Tensor[(10, 8, 4), int16] */;
    %1112 = cast(%1111, dtype="float64") /* ty=Tensor[(10, 8, 4), float64] */;
    %1113 = sinh(%1112) /* ty=Tensor[(10, 8, 4), float64] */;
    %1114 = cast(%1113, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
    %1115 = %1107.1;
    %1116 = cast(%1115, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
    %1117 = cast(meta[relay.Constant][77] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %1118 = reshape(%1116, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %1119 = reshape(%1117, newshape=[2, 600]) /* ty=Tensor[(2, 600), float64] */;
    %1120 = @func_13792(%1118, %1119) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), bool], Tensor[(10, 8, 16), float64], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(9, 10, 8), uint8], Tensor[(720), uint8], Tensor[(2, 600), float64]) */;
    %1121 = %1100.0;
    %1122 = %1110.0;
    %1123 = acos(%1114) /* ty=Tensor[(10, 8, 4), float32] */;
    %1124 = %1120.5;
    (%1121, %1115, meta[relay.Constant][74] /* ty=Tensor[(1584), bool] */, meta[relay.Constant][75] /* ty=Tensor[(900), float32] */, %1122, meta[relay.Constant][76] /* ty=Tensor[(512), uint32] */, %1123, %1124, meta[relay.Constant][77] /* ty=Tensor[(1200), float64] */)
  };
  %1125() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(6, 3, 8), float32], Tensor[(512), uint32], Tensor[(10, 8, 4), float32], Tensor[(900), float32], Tensor[(1200), float64]) */
}

def @func_15206(%var_15190: Tensor[(11, 7, 16), uint8]) -> Tensor[(11, 7, 16), bool] {
  %1126 = cast(%var_15190, dtype="bool") /* ty=Tensor[(11, 7, 16), bool] */;
  %1127 = shape_of(meta[relay.Constant][78] /* ty=Tensor[(11, 7, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1128 = cast(meta[relay.Constant][78] /* ty=Tensor[(11, 7, 16), uint8] */, dtype="bool") /* ty=Tensor[(11, 7, 16), bool] */;
  %1129 = dyn.reshape(%1126, %1127, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%1128, %1129) /* ty=Tensor[(11, 7, 16), bool] */
}

def @func_18556() -> (Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool]) {
  %1134 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool]) {
    %1130 = @func_12457() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */;
    %1131 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
    %1132 = %1130.0;
    %1133 = %1131.0;
    (%1132, %1133)
  };
  %1134() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool]) */
}

def @func_13351() -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), uint64]) {
  %1141 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), uint64]) {
    %1135 = @func_10958() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %1136 = %1135.0;
    %1137 = cast(%1136, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
    %1138 = reshape(%1137, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
    %1139 = @func_12775(%1138) /* ty=(Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) */;
    %1140 = %1139.0;
    (%1136, %1140)
  };
  %1141() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), uint64]) */
}

def @func_5578(%var_5570: Tensor[(16, 16, 2), uint32], %var_5571: Tensor[(16, 16, 2), uint32]) -> Tensor[(16, 16, 2), uint32] {
  %1142 = cast(%var_5571, dtype="uint32") /* ty=Tensor[(16, 16, 2), uint32] */;
  %1143 = shape_of(%var_5570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1144 = cast(%var_5570, dtype="uint32") /* ty=Tensor[(16, 16, 2), uint32] */;
  %1145 = dyn.reshape(%1142, %1143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%1144, %1145) /* ty=Tensor[(16, 16, 2), uint32] */
}

def @func_16351() -> (Tensor[(2, 3, 14), float32],) {
  @func_16349() /* ty=(Tensor[(2, 3, 14), float32],) */
}

def @func_14445() -> Tensor[(6, 3, 8), float32] {
  %1146 = fn () -> Tensor[(6, 3, 8), float32] {
    @func_14043() /* ty=Tensor[(6, 3, 8), float32] */
  };
  %1146() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_11030(%var_11028: Tensor[(256, 2), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool]) {
  @func_11027(%var_11028) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool]) */
}

def @func_14902(%var_14857: Tensor[(16, 1, 8), float64], %var_14858: Tensor[(16, 2, 8), float64], %var_14874: Tensor[(16, 2, 8), float64]) -> (Tensor[(16, 2, 8), uint8],) {
  %1147 = cast(%var_14857, dtype="float64") /* ty=Tensor[(16, 1, 8), float64] */;
  %1148 = cast(%var_14858, dtype="float64") /* ty=Tensor[(16, 2, 8), float64] */;
  %1149 = floor_mod(%1147, %1148) /* ty=Tensor[(16, 2, 8), float64] */;
  %1150 = cast(%var_14874, dtype="uint8") /* ty=Tensor[(16, 2, 8), uint8] */;
  %1151 = shape_of(%1149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1152 = cast(%1149, dtype="uint8") /* ty=Tensor[(16, 2, 8), uint8] */;
  %1153 = dyn.reshape(%1150, %1151, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1154 = minimum(%1152, %1153) /* ty=Tensor[(16, 2, 8), uint8] */;
  (%1154,)
}

def @func_14907(%var_14904: Tensor[(16, 1, 8), float64], %var_14905: Tensor[(16, 2, 8), float64], %var_14906: Tensor[(16, 2, 8), float64]) -> (Tensor[(16, 2, 8), uint8],) {
  @func_14902(%var_14904, %var_14905, %var_14906) /* ty=(Tensor[(16, 2, 8), uint8],) */
}

def @func_11148(%var_11140: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), float64],) {
  %1155 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1156 = %1155.0;
  %1157 = cast(%var_11140, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
  %1158 = shape_of(%1156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1159 = cast(%1156, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
  %1160 = dyn.reshape(%1157, %1158, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1161 = divide(%1159, %1160) /* ty=Tensor[(6, 3, 8), float64] */;
  (%1161,)
}

def @func_18060(%var_18056: float64, %var_18057: Tensor[(26, 1), float64], %var_18058: Tensor[(1584), bool], %var_18059: Tensor[(9, 100), float32]) -> (Tensor[(6, 3, 8), float64], Tensor[(900), float32], float64, Tensor[(26, 1), float64], Tensor[(1584), bool], Tensor[(9, 100), float32], Tensor[(60), float64], Tensor[(60), float64]) {
  %1178 = fn (%var_18036: float64, %var_18037: Tensor[(26, 1), float64], %var_18038: Tensor[(1584), bool], %var_18039: Tensor[(9, 100), float32]) -> (Tensor[(6, 3, 8), float64], Tensor[(900), float32], float64, Tensor[(26, 1), float64], Tensor[(1584), bool], Tensor[(9, 100), float32], Tensor[(60), float64], Tensor[(60), float64]) {
    %1162 = @func_12836() /* ty=(Tensor[(1280), uint32], Tensor[(6, 3, 8), float64], Tensor[(144), float32]) */;
    %1163 = cast(%var_18036, dtype="float64") /* ty=float64 */;
    %1164 = cast(%var_18037, dtype="float64") /* ty=Tensor[(26, 1), float64] */;
    %1165 = cast(%var_18038, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %1166 = cast(%var_18039, dtype="float32") /* ty=Tensor[(9, 100), float32] */;
    %1167 = reshape(%1163, newshape=[]) /* ty=float64 */;
    %1168 = reshape(%1164, newshape=[13, 1, 2]) /* ty=Tensor[(13, 1, 2), float64] */;
    %1169 = reshape(%1165, newshape=[1584]) /* ty=Tensor[(1584), bool] */;
    %1170 = reshape(%1166, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %1171 = @func_6123(%1167, %1168, %1169, %1170) /* ty=(Tensor[(13, 1, 2), bool], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32]) */;
    %1172 = cast(meta[relay.Constant][79] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %1173 = reshape(%1172, newshape=[60]) /* ty=Tensor[(60), float64] */;
    %1174 = @func_14717(%1173) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(60), float64]) */;
    %1175 = %1162.1;
    %1176 = %1171.3;
    %1177 = %1174.1;
    (%1175, %1176, %var_18036, %var_18037, %var_18038, %var_18039, %1177, meta[relay.Constant][79] /* ty=Tensor[(60), float64] */)
  };
  %1178(%var_18056, %var_18057, %var_18058, %var_18059) /* ty=(Tensor[(6, 3, 8), float64], Tensor[(900), float32], float64, Tensor[(26, 1), float64], Tensor[(1584), bool], Tensor[(9, 100), float32], Tensor[(60), float64], Tensor[(60), float64]) */
}

def @func_13094(%var_13093: Tensor[(320, 4), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float64], Tensor[(10, 8, 16), uint32], Tensor[(320, 4), uint32], Tensor[(900), float32], Tensor[(10, 7, 4), uint8], Tensor[(280), int32]) {
  %1199 = fn (%var_13062: Tensor[(320, 4), uint32]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float64], Tensor[(10, 8, 16), uint32], Tensor[(320, 4), uint32], Tensor[(900), float32], Tensor[(10, 7, 4), uint8], Tensor[(280), int32]) {
    %1179 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %1180 = @func_12758() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(12, 16, 9), float64], float64, Tensor[(15, 10, 6), float32], Tensor[(900), float32]) */;
    %1181 = %1179.0;
    %1182 = cast(%1181, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
    %1183 = reshape(%1182, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
    %1184 = @func_11148(%1183) /* ty=(Tensor[(6, 3, 8), float64],) */;
    %1185 = cast(%var_13062, dtype="uint32") /* ty=Tensor[(320, 4), uint32] */;
    %1186 = cast(%var_13062, dtype="uint32") /* ty=Tensor[(320, 4), uint32] */;
    %1187 = reshape(%1185, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
    %1188 = reshape(%1186, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), uint32] */;
    %1189 = @func_4480(%1187, %1188) /* ty=(Tensor[(10, 8, 16), uint32], Tensor[(10, 8, 16), float64]) */;
    %1190 = @func_12758() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(12, 16, 9), float64], float64, Tensor[(15, 10, 6), float32], Tensor[(900), float32]) */;
    %1191 = cast(meta[relay.Constant][80] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
    %1192 = reshape(%1191, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), int32] */;
    %1193 = @func_10267(%1192) /* ty=(Tensor[(10, 8, 16), float64], Tensor[(1280), uint32], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), uint8]) */;
    %1194 = %1180.0;
    %1195 = %1184.0;
    %1196 = %1189.0;
    %1197 = %1190.4;
    %1198 = %1193.3;
    (%1181, %1194, %1195, %1196, %var_13062, %1197, %1198, meta[relay.Constant][80] /* ty=Tensor[(280), int32] */)
  };
  %1199(%var_13093) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float64], Tensor[(10, 8, 16), uint32], Tensor[(320, 4), uint32], Tensor[(900), float32], Tensor[(10, 7, 4), uint8], Tensor[(280), int32]) */
}

def @func_12458() -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) {
  %1204 = fn () -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) {
    %1200 = @func_10895() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %1201 = @func_11860() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(6, 3, 8), float64]) */;
    %1202 = %1200.0;
    %1203 = %1201.1;
    (%1202, %1203)
  };
  %1204() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), uint32]) */
}

def @func_17055() -> Tensor[(140), float64] {
  %1206 = fn () -> Tensor[(140), float64] {
    %1205 = @func_16484() /* ty=(Tensor[(140), float64],) */;
    %1205.0
  };
  %1206() /* ty=Tensor[(140), float64] */
}

def @func_14513() -> Tensor[(6, 3, 8), float32] {
  %1207 = fn () -> Tensor[(6, 3, 8), float32] {
    @func_14009() /* ty=Tensor[(6, 3, 8), float32] */
  };
  %1207() /* ty=Tensor[(6, 3, 8), float32] */
}

def @func_16220() -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 4), int16]) {
  @func_16218() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 4), int16]) */
}

def @func_14719(%var_14718: Tensor[(60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(60), float64]) {
  %1213 = fn (%var_14711: Tensor[(60), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(60), float64]) {
    %1208 = cast(%var_14711, dtype="float64") /* ty=Tensor[(60), float64] */;
    %1209 = reshape(%1208, newshape=[60]) /* ty=Tensor[(60), float64] */;
    %1210 = @func_11979(%1209) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(5, ?, 12), float64]) */;
    %1211 = @func_14444() /* ty=Tensor[(6, 3, 8), float32] */;
    %1212 = %1210.1;
    (%1211, %1212, %var_14711)
  };
  %1213(%var_14718) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(60), float64]) */
}

def @func_18665() -> (Tensor[(6, 3, 8), float32],) {
  %1214 = @func_18555() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool]) */;
  %1215 = %1214.0;
  (%1215,)
}

def @func_18774(%var_18703: Tensor[(192, 1), uint16], %var_18704: Tensor[(2, 640), uint32], %var_18705: Tensor[(35), float64]) -> (Tensor[(8, 4, 16), bool], Tensor[(2, 640), uint32], Tensor[(35), float64], Tensor[(6, 3, 8), float64], Tensor[(16, 16, 2), uint32], Tensor[(192, 35), float32]) {
  %1216 = @func_14393() /* ty=(Tensor[(6, 3, 8), float64], Tensor[(5, ?, 12), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float64]) */;
  %1217 = @func_16502() /* ty=Tensor[(8, 4, 16), bool] */;
  %1218 = cast(%1217, dtype="uint32") /* ty=Tensor[(8, 4, 16), uint32] */;
  %1219 = cast(%1217, dtype="uint32") /* ty=Tensor[(8, 4, 16), uint32] */;
  %1220 = reshape(%1218, newshape=[16, 16, 2]) /* ty=Tensor[(16, 16, 2), uint32] */;
  %1221 = reshape(%1219, newshape=[16, 16, 2]) /* ty=Tensor[(16, 16, 2), uint32] */;
  %1222 = cast(%var_18703, dtype="uint16") /* ty=Tensor[(192, 1), uint16] */;
  %1223 = cast(%var_18703, dtype="uint16") /* ty=Tensor[(192, 1), uint16] */;
  %1224 = cast(%var_18704, dtype="uint32") /* ty=Tensor[(2, 640), uint32] */;
  %1225 = cast(%var_18705, dtype="float64") /* ty=Tensor[(35), float64] */;
  %1226 = reshape(%1222, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), uint16] */;
  %1227 = reshape(%1223, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), uint16] */;
  %1228 = reshape(%1224, newshape=[1280]) /* ty=Tensor[(1280), uint32] */;
  %1229 = reshape(%1225, newshape=[35]) /* ty=Tensor[(35), float64] */;
  %1230 = @func_4914(%1226, %1227, %1228, %1229) /* ty=(Tensor[(16, 3, 4), float64], Tensor[(10, 8, 16), uint32], Tensor[(1280), uint32], Tensor[(5, 28), float64], Tensor[(35), float64], Tensor[(32, 1), float32], Tensor[(35, 4), float64]) */;
  %1231 = %1230.4;
  %1232 = cast(%1231, dtype="uint32") /* ty=Tensor[(35), uint32] */;
  %1233 = cast(%var_18703, dtype="uint32") /* ty=Tensor[(192, 1), uint32] */;
  %1234 = bitwise_xor(%1232, %1233) /* ty=Tensor[(192, 35), uint32] */;
  %1235 = cast(%1234, dtype="float32") /* ty=Tensor[(192, 35), float32] */;
  %1236 = %1216.0;
  %1237 = @func_5578(%1220, %1221) /* ty=Tensor[(16, 16, 2), uint32] */;
  %1238 = rsqrt(%1235) /* ty=Tensor[(192, 35), float32] */;
  (%1217, %var_18704, %var_18705, %1236, %1237, %1238)
}

def @func_371(%var_338: Tensor[(16, 11, 9), bool], %var_339: Tensor[(16, 11, 9), bool], %var_353: Tensor[(900), float32]) -> (Tensor[(16, 11, 9), bool], Tensor[(15, 10, 6), float32], Tensor[(900), float32], Tensor[(15, 10, 6), float32], Tensor[(15, 10, 6), float32]) {
  %1239 = cast(%var_339, dtype="bool") /* ty=Tensor[(16, 11, 9), bool] */;
  %1240 = shape_of(%var_338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1241 = cast(%var_338, dtype="bool") /* ty=Tensor[(16, 11, 9), bool] */;
  %1242 = dyn.reshape(%1239, %1240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1243 = cast(%var_353, dtype="float32") /* ty=Tensor[(900), float32] */;
  %1244 = cast(%var_353, dtype="float32") /* ty=Tensor[(900), float32] */;
  %1245 = reshape(%1243, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %1246 = reshape(%1244, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %1247 = @func_71(%1245, %1246) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %1248 = %1247.0;
  %1249 = cast(%1248, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %1250 = cast(%1248, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %1251 = reshape(%1249, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %1252 = reshape(%1250, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %1253 = @func_71(%1251, %1252) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %1254 = cast(%1248, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %1255 = %1253.0;
  %1256 = cast(%1255, dtype="float32") /* ty=Tensor[(15, 10, 6), float32] */;
  %1257 = reshape(%1254, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %1258 = reshape(%1256, newshape=[15, 10, 6]) /* ty=Tensor[(15, 10, 6), float32] */;
  %1259 = @func_71(%1257, %1258) /* ty=(Tensor[(15, 10, 6), float32],) */;
  %1260 = logical_or(%1241, %1242) /* ty=Tensor[(16, 11, 9), bool] */;
  %1261 = %1259.0;
  (%1260, %1248, %var_353, %1255, %1261)
}

def @func_14395() -> (Tensor[(6, 3, 8), float64], Tensor[(5, ?, 12), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float64]) {
  @func_14393() /* ty=(Tensor[(6, 3, 8), float64], Tensor[(5, ?, 12), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float64]) */
}

def @func_16594() -> (Tensor[(6, 3, 8), float32],) {
  %1262 = @func_12689() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */;
  %1263 = %1262.1;
  (%1263,)
}

def @func_11151(%var_11149: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), float64],) {
  @func_11148(%var_11149) /* ty=(Tensor[(6, 3, 8), float64],) */
}

def @func_18939(%var_18937: Tensor[(1, 35), float64], %var_18938: Tensor[(224), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(4, 8, 35), bool], Tensor[(1, 35), float64], Tensor[(140), float64], Tensor[(224), float32], Tensor[(1560), uint8], Tensor[(35), float64], Tensor[(60), float64]) {
  %1292 = fn (%var_18895: Tensor[(1, 35), float64], %var_18897: Tensor[(224), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(4, 8, 35), bool], Tensor[(1, 35), float64], Tensor[(140), float64], Tensor[(224), float32], Tensor[(1560), uint8], Tensor[(35), float64], Tensor[(60), float64]) {
    %1264 = @func_16072() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %1265 = @func_16749() /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */;
    %1266 = %1265.1;
    %1267 = cast(%1266, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
    %1268 = @func_16594() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %1269 = @func_11798() /* ty=(Tensor[(6, 3, 8), float32],) */;
    %1270 = cast(%var_18895, dtype="float64") /* ty=Tensor[(1, 35), float64] */;
    %1271 = cast(meta[relay.Constant][81] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %1272 = cast(%var_18897, dtype="float32") /* ty=Tensor[(224), float32] */;
    %1273 = cast(meta[relay.Constant][82] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %1274 = reshape(%1270, newshape=[35]) /* ty=Tensor[(35), float64] */;
    %1275 = reshape(%1271, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %1276 = reshape(%1272, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), float32] */;
    %1277 = reshape(%1273, newshape=[1560]) /* ty=Tensor[(1560), uint8] */;
    %1278 = @func_11776(%1274, %1275, %1276, %1277) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(4, 8), float32], Tensor[(5, 28), float64], Tensor[(60), float64], Tensor[(4, 8, 7), bool], Tensor[(4, 8, 35), bool], Tensor[(10, 2, 3), float64], Tensor[(4, 8, 1), float32], Tensor[(140), float64], Tensor[(1560), uint8], Tensor[(4, 8, 35), float32], Tensor[(4, 8, 35), float64]) */;
    %1279 = cast(%var_18895, dtype="float64") /* ty=Tensor[(1, 35), float64] */;
    %1280 = cast(meta[relay.Constant][81] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %1281 = reshape(%1279, newshape=[35]) /* ty=Tensor[(35), float64] */;
    %1282 = reshape(%1280, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %1283 = @func_15346(%1281, %1282) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(60), float64], Tensor[(35), float64], Tensor[(32), float32], Tensor[(140), float64]) */;
    %1284 = @func_14393() /* ty=(Tensor[(6, 3, 8), float64], Tensor[(5, ?, 12), float64], Tensor[(60), float64], Tensor[(6, 3, 8), float64]) */;
    %1285 = %1264.0;
    %1286 = log2(%1267) /* ty=Tensor[(6, 3, 8), float32] */;
    %1287 = %1268.0;
    %1288 = %1269.0;
    %1289 = %1278.5;
    %1290 = %1283.3;
    %1291 = %1284.2;
    (%1285, %1286, %1287, %1288, %1289, %var_18895, meta[relay.Constant][81] /* ty=Tensor[(140), float64] */, %var_18897, meta[relay.Constant][82] /* ty=Tensor[(1560), uint8] */, %1290, %1291)
  };
  %1292(%var_18937, %var_18938) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32], Tensor[(4, 8, 35), bool], Tensor[(1, 35), float64], Tensor[(140), float64], Tensor[(224), float32], Tensor[(1560), uint8], Tensor[(35), float64], Tensor[(60), float64]) */
}

def @func_10958() -> (Tensor[(6, 3, 8), float32],) {
  %1293 = @func_10932() /* ty=(Tensor[(6, 3, 8), float32],) */;
  %1294 = %1293.0;
  (%1294,)
}

def @func_16596() -> (Tensor[(6, 3, 8), float32],) {
  @func_16594() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_19211() -> Tensor[(8, 4, 16), bool] {
  %1295 = @func_18996() /* ty=(Tensor[(3, 117), float32], Tensor[(8, 4, 16), bool]) */;
  %1295.1
}

def @func_19213() -> Tensor[(8, 4, 16), bool] {
  @func_19211() /* ty=Tensor[(8, 4, 16), bool] */
}

def @func_13796(%var_13794: Tensor[(900), float32], %var_13795: Tensor[(2, 600), float64]) -> (Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), bool], Tensor[(10, 8, 16), float64], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(9, 10, 8), uint8], Tensor[(720), uint8], Tensor[(2, 600), float64]) {
  @func_13792(%var_13794, %var_13795) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(10, 8, 16), bool], Tensor[(10, 8, 16), float64], Tensor[(15, 10, 6), float32], Tensor[(1584), bool], Tensor[(900), float32], Tensor[(9, 10, 8), uint8], Tensor[(720), uint8], Tensor[(2, 600), float64]) */
}

def @func_14792() -> (Tensor[(8, 4, 16), bool],) {
  %1296 = @func_12265() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
  %1297 = %1296.0;
  (%1297,)
}

def @func_17084() -> (Tensor[(6, 3, 8), float32],) {
  %1300 = fn () -> (Tensor[(6, 3, 8), float32],) {
    %1298 = @func_15145() /* ty=(Tensor[(8, 4, 16), bool], Tensor[(6, 3, 8), float32]) */;
    %1299 = %1298.1;
    (%1299,)
  };
  %1300() /* ty=(Tensor[(6, 3, 8), float32],) */
}

def @func_17628(%var_17623: Tensor[(1936), uint64]) -> (Tensor[(6, 3, 8), float32], Tensor[(8, 4, 16), bool], Tensor[(1936), bool]) {
  %1301 = @func_16034() /* ty=(Tensor[(8, 4, 16), bool],) */;
  %1302 = @func_13952() /* ty=Tensor[(6, 3, 8), float32] */;
  %1303 = cast(%1302, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %1304 = reshape(%1303, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), float32] */;
  %1305 = @func_12775(%1304) /* ty=(Tensor[(6, 3, 8), uint64], Tensor[(1936), uint64], Tensor[(88, 22), uint64]) */;
  %1306 = %1305.1;
  %1307 = cast(%var_17623, dtype="bool") /* ty=Tensor[(1936), bool] */;
  %1308 = shape_of(%1306, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1309 = cast(%1306, dtype="bool") /* ty=Tensor[(1936), bool] */;
  %1310 = dyn.reshape(%1307, %1308, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1311 = %1301.0;
  %1312 = less_equal(%1309, %1310) /* ty=Tensor[(1936), bool] */;
  (%1302, %1311, %1312)
}

def @func_18376(%var_18374: Tensor[(338), float32]) -> (Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool], Tensor[(512), uint32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) {
  @func_18373(%var_18374) /* ty=(Tensor[(6, 3, 8), float32], Tensor[(256, 2), bool], Tensor[(512), uint32], Tensor[(13, 13, 2), float32], Tensor[(338), float32]) */
}

def @func_19427() -> Tensor[(1280), uint32] {
  %1313 = @func_12467() /* ty=(Tensor[(1280), uint32],) */;
  %1313.0
}

def @func_6245(%var_6244: float64) -> (Tensor[(12, 16, 9), float64],) {
  %1317 = fn (%var_6238: float64) -> (Tensor[(12, 16, 9), float64],) {
    %1314 = cast(%var_6238, dtype="float64") /* ty=float64 */;
    %1315 = cast(meta[relay.Constant][83] /* ty=Tensor[(12, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 16, 9), float64] */;
    %1316 = power(%1314, %1315) /* ty=Tensor[(12, 16, 9), float64] */;
    (%1316,)
  };
  %1317(%var_6244) /* ty=(Tensor[(12, 16, 9), float64],) */
}

def @func_2806(%var_2804: Tensor[(4, 8, 1), float32]) -> (Tensor[(4, 8, 1), float32],) {
  @func_2803(%var_2804) /* ty=(Tensor[(4, 8, 1), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen812/build/output.py", line 3566, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:18:48] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

