==========mod==========
#[version = "0.0.5"]
def @func_7623() -> (Tensor[(8, 15, 11), bool],) {
  %0 = @func_5351() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %1 = %0.0;
  (%1,)
}

def @func_7085() -> Tensor[(8, 15, 11), float64] {
  %2 = @func_3854() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %2.0
}

def @func_2194(%var_2170: Tensor[(3, 15, 12), bool], %var_2171: Tensor[(3, 15, 12), bool], %var_2175: Tensor[(3, 15, 12), bool], %var_2182: Tensor[(242), float64]) -> (Tensor[(3, 15, 12), bool], Tensor[(242), float64], Tensor[(242), float64]) {
  %3 = cast(%var_2171, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %4 = shape_of(%var_2170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_2170, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = logical_or(%5, %6) /* ty=Tensor[(3, 15, 12), bool] */;
  %8 = cast(%var_2175, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %12 = cast(%var_2182, dtype="float64") /* ty=Tensor[(242), float64] */;
  %13 = reshape(%12, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %14 = @func_1141(%13) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
  %15 = logical_and(%10, %11) /* ty=Tensor[(3, 15, 12), bool] */;
  %16 = %14.2;
  (%15, %16, %var_2182)
}

def @func_6278(%var_6271: Tensor[(1680), int64]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 22), float64], Tensor[(540), bool], Tensor[(8, 15, 11), float64], Tensor[(42, 4), int64], Tensor[(1680), int64]) {
  %17 = @func_3257() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64]) */;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(540), bool] */, dtype="bool") /* ty=Tensor[(540), bool] */;
  %19 = reshape(%18, newshape=[540]) /* ty=Tensor[(540), bool] */;
  %20 = @func_2950(%19) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(3, 15, 12), bool], Tensor[(540), bool], Tensor[(11, 22), float64], Tensor[(11, 11, 2), float64]) */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(42, 4), int64] */, dtype="int64") /* ty=Tensor[(42, 4), int64] */;
  %22 = cast(%var_6271, dtype="int64") /* ty=Tensor[(1680), int64] */;
  %23 = %20.3;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(11, 22), float64] */;
  %25 = reshape(%21, newshape=[14, 1, 12]) /* ty=Tensor[(14, 1, 12), int64] */;
  %26 = reshape(%22, newshape=[14, 10, 12]) /* ty=Tensor[(14, 10, 12), int64] */;
  %27 = reshape(%24, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %28 = @func_2758(%25, %26, %27) /* ty=(Tensor[(14, 10, 12), bool], Tensor[(11, 22), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), int32], Tensor[(336), float64], Tensor[(11, 11, 2), int8], Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float32], Tensor[(14, 10, 12), float64]) */;
  %29 = %17.0;
  %30 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  %31 = %28.6;
  (%29, %30, %23, meta[relay.Constant][0] /* ty=Tensor[(540), bool] */, %31, meta[relay.Constant][1] /* ty=Tensor[(42, 4), int64] */, %var_6271)
}

def @func_3458() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(336), float64], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) {
  %32 = @func_3313() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %33 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(242), float64] */, dtype="float64") /* ty=Tensor[(242), float64] */;
  %35 = reshape(%34, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %36 = @func_2403(%35) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(242), float64] */, dtype="float64") /* ty=Tensor[(242), float64] */;
  %38 = reshape(%37, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %39 = @func_2403(%38) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) */;
  %40 = %32.0;
  %41 = %33.0;
  %42 = %36.3;
  %43 = %39.0;
  (%40, %41, %42, meta[relay.Constant][2] /* ty=Tensor[(242), float64] */, %43)
}

def @func_6730(%var_6658: Tensor[(10, 15, 1), float32], %var_6667: Tensor[(22, 11), float64], %var_6686: Tensor[(12, 110), float64], %var_6727: Tensor[(105), int16]) -> (Tensor[(10, 15, 8), float32], Tensor[(22, 11), float64], Tensor[(10, 15, 242), int8], Tensor[(8, 15, 11), float32], Tensor[(12, 110), float64], Tensor[(10, 15, 242), bool], Tensor[(8, 15, 11), float64], Tensor[(10, 15, 242), float64], Tensor[(8, 15, 11), float64], Tensor[(105), int16]) {
  %44 = cast(%var_6658, dtype="float32") /* ty=Tensor[(10, 15, 1), float32] */;
  %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 15, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 15, 8), float32] */;
  %46 = cast(%var_6667, dtype="float64") /* ty=Tensor[(22, 11), float64] */;
  %47 = reshape(%46, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %48 = @func_6310(%47) /* ty=(Tensor[(3, 6, 10), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
  %49 = %48.2;
  %50 = cast(%var_6658, dtype="int64") /* ty=Tensor[(10, 15, 1), int64] */;
  %51 = cast(%49, dtype="int64") /* ty=Tensor[(242), int64] */;
  %52 = add(%50, %51) /* ty=Tensor[(10, 15, 242), int64] */;
  %53 = cast(%52, dtype="int8") /* ty=Tensor[(10, 15, 242), int8] */;
  %54 = cast(%var_6658, dtype="int8") /* ty=Tensor[(10, 15, 1), int8] */;
  %55 = cast(%49, dtype="float64") /* ty=Tensor[(242), float64] */;
  %56 = cast(%var_6686, dtype="float64") /* ty=Tensor[(12, 110), float64] */;
  %57 = reshape(%55, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %58 = reshape(%56, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %59 = @func_3941(%57, %58) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(242), float64], Tensor[(8, 15, 11), float32], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %60 = cast(%49, dtype="bool") /* ty=Tensor[(242), bool] */;
  %61 = cast(%var_6658, dtype="bool") /* ty=Tensor[(10, 15, 1), bool] */;
  %62 = @func_3811() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %63 = cast(%52, dtype="float64") /* ty=Tensor[(10, 15, 242), float64] */;
  %64 = cast(%49, dtype="float64") /* ty=Tensor[(242), float64] */;
  %65 = cast(%var_6727, dtype="int16") /* ty=Tensor[(105), int16] */;
  %66 = reshape(%65, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), int16] */;
  %67 = @func_5062(%66) /* ty=(Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) */;
  %68 = floor_divide(%44, %45) /* ty=Tensor[(10, 15, 8), float32] */;
  %69 = bitwise_and(%53, %54) /* ty=Tensor[(10, 15, 242), int8] */;
  %70 = %59.2;
  %71 = less_equal(%60, %61) /* ty=Tensor[(10, 15, 242), bool] */;
  %72 = %62.0;
  %73 = power(%63, %64) /* ty=Tensor[(10, 15, 242), float64] */;
  %74 = %67.2;
  (%68, %var_6667, %69, %70, %var_6686, %71, %72, %73, %74, %var_6727)
}

def @func_2403(%var_2376: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) {
  %75 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %76 = cast(%var_2376, dtype="float64") /* ty=Tensor[(242), float64] */;
  %77 = reshape(%76, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %78 = @func_1141(%77) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
  %79 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %81 = reshape(%79, newshape=[4, 7, 12]) /* ty=Tensor[(4, 7, 12), float64] */;
  %82 = reshape(%80, newshape=[4, 7, 12]) /* ty=Tensor[(4, 7, 12), float64] */;
  %83 = @func_999(%81, %82) /* ty=(Tensor[(4, 7, 12), float64], Tensor[(4, 7, 12), float64], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
  %84 = cast(%var_2376, dtype="float32") /* ty=Tensor[(242), float32] */;
  %85 = %75.1;
  %86 = %78.1;
  %87 = %83.2;
  %88 = log(%84) /* ty=Tensor[(242), float32] */;
  (%85, %86, %87, meta[relay.Constant][4] /* ty=Tensor[(336), float64] */, %88)
}

def @func_4804() -> (Tensor[(8, 15, 11), float64],) {
  %89 = @func_3092() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %90 = %89.1;
  (%90,)
}

def @func_4931() -> (Tensor[(8, 15, 11), float64],) {
  %91 = @func_3854() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %92 = %91.0;
  (%92,)
}

def @func_6225() -> (Tensor[(8, 15, 11), float32],) {
  %93 = @func_4178() /* ty=(Tensor[(8, 15, 11), float32],) */;
  %94 = %93.0;
  (%94,)
}

def @func_1228(%var_1217: Tensor[(9, 9, 8), float64], %var_1218: Tensor[(9, 9, 8), float64]) -> (Tensor[(9, 9, 8), float64],) {
  %95 = cast(%var_1218, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %96 = shape_of(%var_1217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_1217, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %99 = floor_mod(%97, %98) /* ty=Tensor[(9, 9, 8), float64] */;
  (%99,)
}

def @func_4053() -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float32]) {
  %100 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %102 = log10(%101) /* ty=Tensor[(8, 15, 11), float64] */;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %104 = reshape(%103, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %105 = cast(%102, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %106 = @func_2526(%104) /* ty=Tensor[(8, 15, 11), bool] */;
  %107 = acos(%105) /* ty=Tensor[(8, 15, 11), float32] */;
  (%106, %107)
}

def @func_3082() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) {
  %108 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %109 = %108.0;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %111 = reshape(%110, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %112 = cast(meta[relay.Constant][5] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %113 = reshape(%112, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
  %114 = @func_107(%113) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
  %115 = @func_2526(%111) /* ty=Tensor[(8, 15, 11), bool] */;
  %116 = %114.1;
  (%109, %115, %116, meta[relay.Constant][5] /* ty=Tensor[(405), float64] */)
}

def @func_7171(%var_7169: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float32], Tensor[(242), float64]) {
  %117 = cast(%var_7169, dtype="float64") /* ty=Tensor[(242), float64] */;
  %118 = @func_6562() /* ty=Tensor[(8, 15, 11), float64] */;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %120 = reshape(%117, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %121 = reshape(%119, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %122 = @func_3941(%120, %121) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(242), float64], Tensor[(8, 15, 11), float32], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %123 = %122.2;
  (%118, %123, %var_7169)
}

def @func_1691(%var_1682: Tensor[(15, 2, 11), bool]) -> (Tensor[(15, 2, 11), bool],) {
  %124 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 2, 11), bool] */, dtype="bool") /* ty=Tensor[(15, 2, 11), bool] */;
  %125 = shape_of(%var_1682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_1682, dtype="bool") /* ty=Tensor[(15, 2, 11), bool] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %128 = logical_or(%126, %127) /* ty=Tensor[(15, 2, 11), bool] */;
  (%128,)
}

def @func_6942() -> (Tensor[(8, 15, 11), float64], Tensor[(1320), float64], Tensor[(8, 15, 11), float64], Tensor[(648), float64], Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), bool], Tensor[(6, 2, 3), float32], Tensor[(8, 15, 11), float64]) {
  %129 = @func_5517() /* ty=Tensor[(8, 15, 11), float64] */;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %131 = reshape(%130, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %132 = @func_4448(%131) /* ty=(Tensor[(5, 15, 5), uint32], Tensor[(8, 15, 11), bool], Tensor[(1320), float64], Tensor[(5, 15, 5), float64]) */;
  %133 = cast(meta[relay.Constant][7] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %134 = reshape(%133, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %135 = @func_4701(%134) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(8, 15, 11), float64]) */;
  %136 = @func_4907() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), int64]) */;
  %137 = @func_4599() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %138 = @func_5969() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(6, 2, 3), float32], Tensor[(8, 15, 11), float64]) */;
  %139 = @func_3811() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %140 = %132.2;
  %141 = %135.1;
  %142 = %136.0;
  %143 = %137.0;
  %144 = %138.0;
  %145 = %139.0;
  (%129, %140, %141, meta[relay.Constant][7] /* ty=Tensor[(648), float64] */, %142, %143, %144, %145)
}

def @func_3941(%var_3888: Tensor[(242), float64], %var_3898: Tensor[(8, 15, 11), float64]) -> (Tensor[(4, 15, 10), int64], Tensor[(242), float64], Tensor[(8, 15, 11), float32], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %146 = cast(%var_3888, dtype="float64") /* ty=Tensor[(242), float64] */;
  %147 = reshape(%146, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %148 = @func_1141(%147) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
  %149 = @func_3697() /* ty=Tensor[(8, 15, 11), float64] */;
  %150 = cast(%var_3898, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %154 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %155 = @func_3484() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %156 = cast(%var_3898, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %157 = @func_3484() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %158 = %148.0;
  %159 = mod(%152, %153) /* ty=Tensor[(8, 15, 11), float32] */;
  %160 = %154.0;
  %161 = @func_3697() /* ty=Tensor[(8, 15, 11), float64] */;
  %162 = %155.0;
  %163 = rsqrt(%156) /* ty=Tensor[(8, 15, 11), float64] */;
  %164 = %157.0;
  (%158, %var_3888, %159, %160, %161, %162, %163, %164)
}

def @func_4331(%var_4329: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) {
  %165 = @func_3047() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */;
  %166 = cast(%var_4329, dtype="float64") /* ty=Tensor[(242), float64] */;
  %167 = reshape(%166, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %168 = @func_2403(%167) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) */;
  %169 = %165.0;
  %170 = %168.0;
  (%169, %170, %var_4329)
}

def @func_3697() -> Tensor[(8, 15, 11), float64] {
  %171 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %171.0
}

def @func_6521() -> (Tensor[(3, 6, 10), int32], Tensor[(3, 6, 10), int64]) {
  %172 = @func_5866() /* ty=(Tensor[(3, 6, 10), float64],) */;
  %173 = %172.0;
  %174 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 6, 10), float64] */, dtype="int32") /* ty=Tensor[(3, 6, 10), int32] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="int32") /* ty=Tensor[(3, 6, 10), int32] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %178 = cast(%173, dtype="int64") /* ty=Tensor[(3, 6, 10), int64] */;
  %179 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(3, 6, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 6, 10), float64] */, dtype="int64") /* ty=Tensor[(3, 6, 10), int64] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %182 = bitwise_or(%176, %177) /* ty=Tensor[(3, 6, 10), int32] */;
  %183 = minimum(%180, %181) /* ty=Tensor[(3, 6, 10), int64] */;
  (%182, %183)
}

def @func_2758(%var_2675: Tensor[(14, 1, 12), int64], %var_2676: Tensor[(14, 10, 12), int64], %var_2718: Tensor[(11, 11, 2), float64]) -> (Tensor[(14, 10, 12), bool], Tensor[(11, 22), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), int32], Tensor[(336), float64], Tensor[(11, 11, 2), int8], Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float32], Tensor[(14, 10, 12), float64]) {
  %184 = cast(%var_2675, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %185 = cast(%var_2676, dtype="bool") /* ty=Tensor[(14, 10, 12), bool] */;
  %186 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %187 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 22), float64] */, dtype="float64") /* ty=Tensor[(11, 22), float64] */;
  %188 = reshape(%187, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %189 = @func_714(%188) /* ty=(Tensor[(11, 11, 2), float64],) */;
  %190 = %189.0;
  %191 = cast(%var_2718, dtype="float32") /* ty=Tensor[(11, 11, 2), float32] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="float32") /* ty=Tensor[(11, 11, 2), float32] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %195 = mod(%193, %194) /* ty=Tensor[(11, 11, 2), float32] */;
  %196 = cast(%190, dtype="int32") /* ty=Tensor[(11, 11, 2), int32] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="int32") /* ty=Tensor[(11, 11, 2), int32] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %200 = multiply(%198, %199) /* ty=Tensor[(11, 11, 2), int32] */;
  %201 = cast(%200, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %202 = reshape(%201, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %203 = @func_2403(%202) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) */;
  %204 = cast(%195, dtype="int8") /* ty=Tensor[(11, 11, 2), int8] */;
  %205 = shape_of(%var_2718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%var_2718, dtype="int8") /* ty=Tensor[(11, 11, 2), int8] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %208 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %209 = cast(%var_2676, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
  %210 = tan(%209) /* ty=Tensor[(14, 10, 12), float64] */;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
  %212 = cast(%210, dtype="float32") /* ty=Tensor[(14, 10, 12), float32] */;
  %213 = cast(%210, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
  %214 = less_equal(%184, %185) /* ty=Tensor[(14, 10, 12), bool] */;
  %215 = %186.0;
  %216 = %203.3;
  %217 = bitwise_or(%206, %207) /* ty=Tensor[(11, 11, 2), int8] */;
  %218 = %208.0;
  %219 = log(%211) /* ty=Tensor[(14, 10, 12), float64] */;
  %220 = cosh(%212) /* ty=Tensor[(14, 10, 12), float32] */;
  %221 = atan(%213) /* ty=Tensor[(14, 10, 12), float64] */;
  (%214, meta[relay.Constant][9] /* ty=Tensor[(11, 22), float64] */, %215, %200, %216, %217, %218, %219, %220, %221)
}

def @func_7226() -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64], Tensor[(280, 2), float64]) {
  %222 = @func_5351() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %223 = cast(meta[relay.Constant][10] /* ty=Tensor[(280, 2), uint16] */, dtype="uint16") /* ty=Tensor[(280, 2), uint16] */;
  %224 = cast(meta[relay.Constant][10] /* ty=Tensor[(280, 2), uint16] */, dtype="uint16") /* ty=Tensor[(280, 2), uint16] */;
  %225 = cast(meta[relay.Constant][10] /* ty=Tensor[(280, 2), uint16] */, dtype="float32") /* ty=Tensor[(280, 2), float32] */;
  %226 = reshape(%223, newshape=[5, 14, 8]) /* ty=Tensor[(5, 14, 8), uint16] */;
  %227 = reshape(%224, newshape=[5, 14, 8]) /* ty=Tensor[(5, 14, 8), uint16] */;
  %228 = reshape(%225, newshape=[5, 14, 8]) /* ty=Tensor[(5, 14, 8), float32] */;
  %229 = @func_5267(%226, %227, %228) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(105), int16], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64], Tensor[(5, 14, 8), bool], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64]) */;
  %230 = cast(meta[relay.Constant][10] /* ty=Tensor[(280, 2), uint16] */, dtype="float64") /* ty=Tensor[(280, 2), float64] */;
  %231 = %222.0;
  %232 = %229.0;
  %233 = cosh(%230) /* ty=Tensor[(280, 2), float64] */;
  (%231, %232, %233)
}

def @func_3539() -> (Tensor[(8, 15, 11), bool],) {
  %234 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %235 = %234.1;
  (%235,)
}

def @func_714(%var_702: Tensor[(11, 11, 2), float64]) -> (Tensor[(11, 11, 2), float64],) {
  %236 = cast(%var_702, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %237 = sqrt(%236) /* ty=Tensor[(11, 11, 2), float64] */;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %239 = atanh(%238) /* ty=Tensor[(11, 11, 2), float64] */;
  (%239,)
}

def @func_6287(%var_6283: Tensor[(14, 7, 12), float32]) -> Tensor[(14, 7, 12), float32] {
  %240 = cast(%var_6283, dtype="float32") /* ty=Tensor[(14, 7, 12), float32] */;
  atan(%240) /* ty=Tensor[(14, 7, 12), float32] */
}

def @func_5150(%var_5120: uint32, %var_5121: Tensor[(1, 14, 12), uint32]) -> (Tensor[(8, 15, 11), bool], Tensor[(?, 14, 12), float64]) {
  %241 = @func_3539() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %242 = cast(%var_5120, dtype="bool") /* ty=bool */;
  %243 = cast(%var_5121, dtype="bool") /* ty=Tensor[(1, 14, 12), bool] */;
  %244 = greater(%242, %243) /* ty=Tensor[(1, 14, 12), bool] */;
  %245 = cast(%244, dtype="float64") /* ty=Tensor[(1, 14, 12), float64] */;
  %246 = shape_of(%var_5121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%var_5121, dtype="float64") /* ty=Tensor[(1, 14, 12), float64] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %249 = %241.0;
  %250 = mod(%247, %248) /* ty=Tensor[(?, 14, 12), float64] */;
  (%249, %250)
}

def @func_3313() -> (Tensor[(8, 15, 11), float64],) {
  %251 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  (%251,)
}

def @func_2964() -> (Tensor[(8, 15, 11), float64],) {
  %252 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %253 = %252.0;
  (%253,)
}

def @func_4701(%var_4664: Tensor[(9, 9, 8), float64]) -> (Tensor[(9, 9, 8), float64], Tensor[(8, 15, 11), float64]) {
  %254 = @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */;
  %255 = %254.1;
  %256 = cast(%var_4664, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %260 = mod(%258, %259) /* ty=Tensor[(9, 9, 8), float32] */;
  %261 = cast(%var_4664, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%260, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %265 = floor_divide(%263, %264) /* ty=Tensor[(9, 9, 8), float64] */;
  %266 = @func_4627() /* ty=Tensor[(8, 15, 11), float64] */;
  (%265, %266)
}

def @func_5351() -> (Tensor[(8, 15, 11), bool],) {
  %267 = @func_3539() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %268 = %267.0;
  (%268,)
}

def @func_4111() -> (Tensor[(8, 15, 11), float64],) {
  %269 = @func_3313() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %270 = %269.0;
  (%270,)
}

def @func_5790(%var_5773: Tensor[(648), float64]) -> (Tensor[(8, 15, 11), bool], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) {
  %271 = @func_3539() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %272 = cast(%var_5773, dtype="float64") /* ty=Tensor[(648), float64] */;
  %273 = reshape(%272, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %274 = @func_4701(%273) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(8, 15, 11), float64]) */;
  %275 = %271.0;
  %276 = %274.0;
  (%275, %276, %var_5773)
}

def @func_4599() -> (Tensor[(8, 15, 11), bool],) {
  %277 = @func_4190() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %278 = %277.0;
  (%278,)
}

def @func_7447() -> Tensor[(8, 15, 11), bool] {
  %279 = @func_4638() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %279.0
}

def @func_3753() -> (Tensor[(8, 15, 11), float64],) {
  %280 = @func_3092() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %281 = %280.0;
  (%281,)
}

def @func_2526(%var_2519: Tensor[(8, 15, 11), float64]) -> Tensor[(8, 15, 11), bool] {
  %282 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %283 = %282.1;
  %284 = cast(%var_2519, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%286, %287) /* ty=Tensor[(8, 15, 11), bool] */
}

def @func_4448(%var_4423: Tensor[(1320), float64]) -> (Tensor[(5, 15, 5), uint32], Tensor[(8, 15, 11), bool], Tensor[(1320), float64], Tensor[(5, 15, 5), float64]) {
  %288 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 5), uint32] */;
  %289 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 5), uint32] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %292 = cast(%var_4423, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %293 = reshape(%292, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %294 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %295 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %298 = bitwise_and(%290, %291) /* ty=Tensor[(5, 15, 5), uint32] */;
  %299 = @func_2526(%293) /* ty=Tensor[(8, 15, 11), bool] */;
  %300 = mod(%296, %297) /* ty=Tensor[(5, 15, 5), float64] */;
  (%298, %299, %var_4423, %300)
}

def @func_427(%var_372: Tensor[(10, 4, 15), float64], %var_373: Tensor[(10, 4, 15), float64], %var_401: Tensor[(1, 405), float64]) -> (Tensor[(10, 4, 15), float32], Tensor[(9, 15, 3), bool], Tensor[(1, 405), float64], Tensor[(9, 15, 3), bool]) {
  %301 = cast(%var_373, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %302 = shape_of(%var_372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%var_372, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %305 = power(%303, %304) /* ty=Tensor[(10, 4, 15), float64] */;
  %306 = cast(%var_373, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%305, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %310 = cast(%var_401, dtype="float64") /* ty=Tensor[(1, 405), float64] */;
  %311 = reshape(%310, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
  %312 = @func_107(%311) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
  %313 = %312.0;
  %314 = cast(%313, dtype="float64") /* ty=Tensor[(9, 15, 3), float64] */;
  %315 = reshape(%314, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
  %316 = @func_107(%315) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
  %317 = mod(%308, %309) /* ty=Tensor[(10, 4, 15), float32] */;
  %318 = %316.0;
  (%317, %313, %var_401, %318)
}

def @func_3729() -> Tensor[(648), float64] {
  %319 = @func_3600() /* ty=(Tensor[(648), bool],) */;
  %320 = %319.0;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(648), float64] */;
  acosh(%321) /* ty=Tensor[(648), float64] */
}

def @func_7901(%var_7853: Tensor[(11, 14, 2), int32]) -> (Tensor[(11, 14, 2), float32], Tensor[(8, 15, 11), bool], Tensor[(378), uint8], Tensor[(11, 14, 2), int32], Tensor[(8, 15, 11), float64], Tensor[(3, 56), int64], Tensor[(1680), int64], Tensor[(242), float64]) {
  %322 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 14, 2), int32] */, dtype="float32") /* ty=Tensor[(11, 14, 2), float32] */;
  %323 = cast(meta[relay.Constant][14] /* ty=Tensor[(378), uint8] */, dtype="uint8") /* ty=Tensor[(378), uint8] */;
  %324 = reshape(%323, newshape=[6, 9, 7]) /* ty=Tensor[(6, 9, 7), uint8] */;
  %325 = @func_3349(%324) /* ty=(Tensor[(6, 9, 7), bool], Tensor[(8, 15, 11), bool]) */;
  %326 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 14, 2), int32] */, dtype="int32") /* ty=Tensor[(11, 14, 2), int32] */;
  %327 = shape_of(%var_7853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%var_7853, dtype="int32") /* ty=Tensor[(11, 14, 2), int32] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %330 = minimum(%328, %329) /* ty=Tensor[(11, 14, 2), int32] */;
  %331 = cast(%330, dtype="int32") /* ty=Tensor[(11, 14, 2), int32] */;
  %332 = shape_of(%var_7853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%var_7853, dtype="int32") /* ty=Tensor[(11, 14, 2), int32] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %335 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 56), int64] */, dtype="int64") /* ty=Tensor[(3, 56), int64] */;
  %336 = cast(meta[relay.Constant][16] /* ty=Tensor[(1680), int64] */, dtype="int64") /* ty=Tensor[(1680), int64] */;
  %337 = cast(meta[relay.Constant][17] /* ty=Tensor[(242), float64] */, dtype="float64") /* ty=Tensor[(242), float64] */;
  %338 = reshape(%335, newshape=[14, 1, 12]) /* ty=Tensor[(14, 1, 12), int64] */;
  %339 = reshape(%336, newshape=[14, 10, 12]) /* ty=Tensor[(14, 10, 12), int64] */;
  %340 = reshape(%337, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %341 = @func_2758(%338, %339, %340) /* ty=(Tensor[(14, 10, 12), bool], Tensor[(11, 22), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), int32], Tensor[(336), float64], Tensor[(11, 11, 2), int8], Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float32], Tensor[(14, 10, 12), float64]) */;
  %342 = sigmoid(%322) /* ty=Tensor[(11, 14, 2), float32] */;
  %343 = %325.1;
  %344 = multiply(%333, %334) /* ty=Tensor[(11, 14, 2), int32] */;
  %345 = %341.2;
  (%342, %343, meta[relay.Constant][14] /* ty=Tensor[(378), uint8] */, %344, %345, meta[relay.Constant][15] /* ty=Tensor[(3, 56), int64] */, meta[relay.Constant][16] /* ty=Tensor[(1680), int64] */, meta[relay.Constant][17] /* ty=Tensor[(242), float64] */)
}

def @func_7665(%var_7659: Tensor[(168), int64], %var_7660: Tensor[(1680), int64], %var_7661: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(168), int64], Tensor[(1680), int64], Tensor[(242), float64]) {
  %346 = @func_3811() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %347 = cast(%var_7659, dtype="int64") /* ty=Tensor[(168), int64] */;
  %348 = cast(%var_7660, dtype="int64") /* ty=Tensor[(1680), int64] */;
  %349 = cast(%var_7661, dtype="float64") /* ty=Tensor[(242), float64] */;
  %350 = reshape(%347, newshape=[14, 1, 12]) /* ty=Tensor[(14, 1, 12), int64] */;
  %351 = reshape(%348, newshape=[14, 10, 12]) /* ty=Tensor[(14, 10, 12), int64] */;
  %352 = reshape(%349, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %353 = @func_2758(%350, %351, %352) /* ty=(Tensor[(14, 10, 12), bool], Tensor[(11, 22), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), int32], Tensor[(336), float64], Tensor[(11, 11, 2), int8], Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float32], Tensor[(14, 10, 12), float64]) */;
  %354 = %346.0;
  %355 = %353.7;
  (%354, %355, %var_7659, %var_7660, %var_7661)
}

def @func_5939() -> Tensor[(8, 15, 11), float32] {
  %356 = @func_4053() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float32]) */;
  %356.1
}

def @func_2162() -> Tensor[(8, 15, 11), float64] {
  %357 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  atanh(%357) /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_2324(%var_2296: Tensor[(7, 6), float32], %var_2297: Tensor[(7, 6), float32]) -> (Tensor[(7, 6), float32], Tensor[(8, 15, 11), float64]) {
  %358 = cast(%var_2297, dtype="float32") /* ty=Tensor[(7, 6), float32] */;
  %359 = shape_of(%var_2296, dtype="int32") /* ty=Tensor[(2), int32] */;
  %360 = cast(%var_2296, dtype="float32") /* ty=Tensor[(7, 6), float32] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %362 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %363 = floor_mod(%360, %361) /* ty=Tensor[(7, 6), float32] */;
  %364 = %362.1;
  (%363, %364)
}

def @func_3654(%var_3636: Tensor[(9, 5, 12), int8]) -> (Tensor[(9, 5, 12), bool], Tensor[(8, 15, 11), float64]) {
  %365 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 5, 12), int8] */, dtype="bool") /* ty=Tensor[(9, 5, 12), bool] */;
  %366 = shape_of(%var_3636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_3636, dtype="bool") /* ty=Tensor[(9, 5, 12), bool] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %369 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %370 = greater_equal(%367, %368) /* ty=Tensor[(9, 5, 12), bool] */;
  %371 = %369.0;
  (%370, %371)
}

def @func_7513() -> (Tensor[(42, 1), float32],) {
  %372 = @func_6144() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), bool], Tensor[(405), float64], Tensor[(8, 15, 11), float64], Tensor[(42, 1), float32]) */;
  %373 = %372.4;
  (%373,)
}

def @func_7800(%var_7746: Tensor[(330, 1), bool]) -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), bool], Tensor[(242, 1), float64], Tensor[(648), float64], Tensor[(378), bool], Tensor[(330, 378), uint16]) {
  %374 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %375 = cast(%var_7746, dtype="bool") /* ty=Tensor[(330, 1), bool] */;
  %376 = cast(meta[relay.Constant][20] /* ty=Tensor[(242, 1), float64] */, dtype="float64") /* ty=Tensor[(242, 1), float64] */;
  %377 = reshape(%375, newshape=[330]) /* ty=Tensor[(330), bool] */;
  %378 = reshape(%376, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %379 = @func_6620(%377, %378) /* ty=(Tensor[(336), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(648), float64], Tensor[(330), bool], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) */;
  %380 = cast(meta[relay.Constant][21] /* ty=Tensor[(378), uint8] */, dtype="uint8") /* ty=Tensor[(378), uint8] */;
  %381 = reshape(%380, newshape=[378]) /* ty=Tensor[(378), uint8] */;
  %382 = @func_5425(%381) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(378), bool]) */;
  %383 = cast(%var_7746, dtype="float32") /* ty=Tensor[(330, 1), float32] */;
  %384 = asinh(%383) /* ty=Tensor[(330, 1), float32] */;
  %385 = cast(%var_7746, dtype="bool") /* ty=Tensor[(330, 1), bool] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(2), int32] */;
  %387 = cast(%384, dtype="bool") /* ty=Tensor[(330, 1), bool] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %389 = logical_or(%387, %388) /* ty=Tensor[(330, ?), bool] */;
  %390 = cast(%389, dtype="int32") /* ty=Tensor[(330, ?), int32] */;
  %391 = cast(meta[relay.Constant][21] /* ty=Tensor[(378), uint8] */, dtype="int32") /* ty=Tensor[(378), int32] */;
  %392 = minimum(%390, %391) /* ty=Tensor[(330, 378), int32] */;
  %393 = cast(%392, dtype="uint16") /* ty=Tensor[(330, 378), uint16] */;
  %394 = cast(meta[relay.Constant][21] /* ty=Tensor[(378), uint8] */, dtype="uint16") /* ty=Tensor[(378), uint16] */;
  %395 = %374.1;
  %396 = %379.2;
  %397 = @func_3729() /* ty=Tensor[(648), float64] */;
  %398 = %382.2;
  %399 = logical_xor(%393, %394) /* ty=Tensor[(330, 378), uint16] */;
  (%395, %396, meta[relay.Constant][20] /* ty=Tensor[(242, 1), float64] */, %397, %398, %399)
}

def @func_2274() -> (Tensor[(8, 15, 11), float64],) {
  %400 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  (%400,)
}

def @func_2224(%var_2211: Tensor[(7, 4, 14), uint8]) -> (Tensor[(7, 4, 14), uint8],) {
  %401 = cast(%var_2211, dtype="uint8") /* ty=Tensor[(7, 4, 14), uint8] */;
  %402 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(7, 4, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 4, 14), uint8] */, dtype="uint8") /* ty=Tensor[(7, 4, 14), uint8] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %405 = bitwise_or(%403, %404) /* ty=Tensor[(7, 4, 14), uint8] */;
  (%405,)
}

def @func_2290() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %406 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %407 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %408 = %406.0;
  %409 = %407.0;
  (%408, %409)
}

def @func_6310(%var_6300: Tensor[(242), float64]) -> (Tensor[(3, 6, 10), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) {
  %410 = @func_5866() /* ty=(Tensor[(3, 6, 10), float64],) */;
  %411 = cast(%var_6300, dtype="float64") /* ty=Tensor[(242), float64] */;
  %412 = reshape(%411, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %413 = @func_714(%412) /* ty=(Tensor[(11, 11, 2), float64],) */;
  %414 = cast(%var_6300, dtype="float64") /* ty=Tensor[(242), float64] */;
  %415 = %410.0;
  %416 = %413.0;
  %417 = sin(%414) /* ty=Tensor[(242), float64] */;
  (%415, %416, %417)
}

def @func_4526() -> (Tensor[(8, 15, 11), bool], Tensor[(6, 9, 7), bool], Tensor[(378), uint8]) {
  %418 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %419 = cast(meta[relay.Constant][23] /* ty=Tensor[(378), uint8] */, dtype="uint8") /* ty=Tensor[(378), uint8] */;
  %420 = reshape(%419, newshape=[6, 9, 7]) /* ty=Tensor[(6, 9, 7), uint8] */;
  %421 = @func_3349(%420) /* ty=(Tensor[(6, 9, 7), bool], Tensor[(8, 15, 11), bool]) */;
  %422 = %418.1;
  %423 = %421.0;
  (%422, %423, meta[relay.Constant][23] /* ty=Tensor[(378), uint8] */)
}

def @func_7038() -> (Tensor[(12, 3, 16), int8], Tensor[(8, 15, 11), float32]) {
  %424 = cast(7.63856f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %425 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 3, 16), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  %426 = floor_mod(%424, %425) /* ty=Tensor[(12, 3, 16), float32] */;
  %427 = cast(7.63856f /* ty=float32 */, dtype="int8") /* ty=int8 */;
  %428 = cast(%426, dtype="int8") /* ty=Tensor[(12, 3, 16), int8] */;
  %429 = right_shift(%427, %428) /* ty=Tensor[(12, 3, 16), int8] */;
  %430 = @func_6104() /* ty=Tensor[(8, 15, 11), float32] */;
  (%429, %430)
}

def @func_3092() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %431 = @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */;
  %432 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  %433 = %431.0;
  (%432, %433)
}

def @func_3365() -> (Tensor[(8, 15, 11), float64],) {
  %434 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %435 = %434.0;
  (%435,)
}

def @func_7479() -> (Tensor[(8, 15, 11), bool],) {
  %436 = @func_3082() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
  %437 = %436.1;
  (%437,)
}

def @func_7582() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %438 = @func_2964() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %439 = %438.0;
  %440 = @func_5517() /* ty=Tensor[(8, 15, 11), float64] */;
  (%439, %440)
}

def @func_4969() -> (Tensor[(8, 15, 11), float64],) {
  %441 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %442 = %441.0;
  (%442,)
}

def @func_2804() -> (Tensor[(8, 15, 11), float64],) {
  %443 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  (%443,)
}

def @func_5517() -> Tensor[(8, 15, 11), float64] {
  %444 = @func_3082() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
  %444.0
}

def @func_3811() -> (Tensor[(8, 15, 11), float64],) {
  %445 = @func_3047() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */;
  %446 = %445.0;
  (%446,)
}

def @func_7003() -> (Tensor[(336), float64], Tensor[(405), float64]) {
  %447 = @func_4301() /* ty=(Tensor[(336), float64],) */;
  %448 = %447.0;
  %449 = @func_4078() /* ty=Tensor[(405), float64] */;
  (%448, %449)
}

def @func_3349(%var_3320: Tensor[(6, 9, 7), uint8]) -> (Tensor[(6, 9, 7), bool], Tensor[(8, 15, 11), bool]) {
  %450 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 9, 7), uint8] */, dtype="bool") /* ty=Tensor[(6, 9, 7), bool] */;
  %451 = shape_of(%var_3320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%var_3320, dtype="bool") /* ty=Tensor[(6, 9, 7), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %454 = @func_3082() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
  %455 = greater_equal(%452, %453) /* ty=Tensor[(6, 9, 7), bool] */;
  %456 = %454.1;
  (%455, %456)
}

def @func_5969() -> (Tensor[(6, 2, 3), float32], Tensor[(6, 2, 3), float32], Tensor[(8, 15, 11), float64]) {
  %457 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 3), float32] */;
  %458 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 3), float32] */;
  %459 = @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %460 = atan(%457) /* ty=Tensor[(6, 2, 3), float32] */;
  %461 = log10(%458) /* ty=Tensor[(6, 2, 3), float32] */;
  %462 = %459.0;
  (%460, %461, %462)
}

def @func_2950(%var_2903: Tensor[(540), bool]) -> (Tensor[(8, 15, 11), float64], Tensor[(3, 15, 12), bool], Tensor[(540), bool], Tensor[(11, 22), float64], Tensor[(11, 11, 2), float64]) {
  %463 = cast(%var_2903, dtype="bool") /* ty=Tensor[(540), bool] */;
  %464 = cast(%var_2903, dtype="bool") /* ty=Tensor[(540), bool] */;
  %465 = cast(%var_2903, dtype="bool") /* ty=Tensor[(540), bool] */;
  %466 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 22), float64] */, dtype="float64") /* ty=Tensor[(11, 22), float64] */;
  %467 = reshape(%463, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), bool] */;
  %468 = reshape(%464, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), bool] */;
  %469 = reshape(%465, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), bool] */;
  %470 = reshape(%466, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %471 = @func_2194(%467, %468, %469, %470) /* ty=(Tensor[(3, 15, 12), bool], Tensor[(242), float64], Tensor[(242), float64]) */;
  %472 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 22), float64] */, dtype="float64") /* ty=Tensor[(11, 22), float64] */;
  %473 = sin(%472) /* ty=Tensor[(11, 22), float64] */;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(11, 22), float64] */;
  %475 = reshape(%474, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %476 = @func_714(%475) /* ty=(Tensor[(11, 11, 2), float64],) */;
  %477 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  %478 = %471.0;
  %479 = %476.0;
  (%477, %478, %var_2903, %473, %479)
}

def @func_6144() -> (Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), bool], Tensor[(405), float64], Tensor[(8, 15, 11), float64], Tensor[(42, 1), float32]) {
  %480 = @func_3539() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %481 = cast(meta[relay.Constant][28] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %482 = reshape(%481, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
  %483 = @func_107(%482) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
  %484 = cast(meta[relay.Constant][29] /* ty=Tensor[(42, 1), float32] */, dtype="float32") /* ty=Tensor[(42, 1), float32] */;
  %485 = cast(meta[relay.Constant][29] /* ty=Tensor[(42, 1), float32] */, dtype="float32") /* ty=Tensor[(42, 1), float32] */;
  %486 = reshape(%484, newshape=[7, 6]) /* ty=Tensor[(7, 6), float32] */;
  %487 = reshape(%485, newshape=[7, 6]) /* ty=Tensor[(7, 6), float32] */;
  %488 = @func_2324(%486, %487) /* ty=(Tensor[(7, 6), float32], Tensor[(8, 15, 11), float64]) */;
  %489 = %480.0;
  %490 = %483.0;
  %491 = %488.1;
  (%489, %490, meta[relay.Constant][28] /* ty=Tensor[(405), float64] */, %491, meta[relay.Constant][29] /* ty=Tensor[(42, 1), float32] */)
}

def @func_4750(%var_4725: Tensor[(3, 11, 8), uint8]) -> (Tensor[(3, 11, 8), uint8], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) {
  %492 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 11, 8), uint8] */, dtype="uint8") /* ty=Tensor[(3, 11, 8), uint8] */;
  %493 = shape_of(%var_4725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%var_4725, dtype="uint8") /* ty=Tensor[(3, 11, 8), uint8] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %496 = @func_3047() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */;
  %497 = @func_3753() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %498 = minimum(%494, %495) /* ty=Tensor[(3, 11, 8), uint8] */;
  %499 = %496.1;
  %500 = %497.0;
  (%498, %499, %500)
}

def @func_3600() -> (Tensor[(648), bool],) {
  %501 = @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */;
  %502 = %501.2;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(648), float64] */;
  %504 = tan(%503) /* ty=Tensor[(648), float64] */;
  %505 = cast(%504, dtype="bool") /* ty=Tensor[(648), bool] */;
  %506 = shape_of(%502, dtype="int32") /* ty=Tensor[(1), int32] */;
  %507 = cast(%502, dtype="bool") /* ty=Tensor[(648), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?), bool] */;
  %509 = less_equal(%507, %508) /* ty=Tensor[(648), bool] */;
  (%509,)
}

def @func_3854() -> (Tensor[(8, 15, 11), float64],) {
  %510 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %511 = %510.0;
  (%511,)
}

def @func_5487(%var_5481: Tensor[(15, 7, 9), int32], %var_5482: Tensor[(15, 7, 9), int32]) -> Tensor[(15, 7, 9), int32] {
  %512 = cast(%var_5482, dtype="int32") /* ty=Tensor[(15, 7, 9), int32] */;
  %513 = shape_of(%var_5481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%var_5481, dtype="int32") /* ty=Tensor[(15, 7, 9), int32] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  minimum(%514, %515) /* ty=Tensor[(15, 7, 9), int32] */
}

def @func_4907() -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), int64]) {
  %516 = @func_4638() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %517 = @func_3313() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %518 = %517.0;
  %519 = cast(%518, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %520 = cast(%518, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %521 = atan(%520) /* ty=Tensor[(8, 15, 11), float32] */;
  %522 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 15, 11), float32] */, dtype="int64") /* ty=Tensor[(8, 15, 11), int64] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="int64") /* ty=Tensor[(8, 15, 11), int64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %526 = %516.0;
  %527 = asinh(%519) /* ty=Tensor[(8, 15, 11), float64] */;
  %528 = logical_xor(%524, %525) /* ty=Tensor[(8, 15, 11), int64] */;
  (%526, %527, %528)
}

def @func_7986(%var_7974: Tensor[(392), uint8]) -> (Tensor[(336), float64], Tensor[(8, 15, 11), bool], Tensor[(7, 4, 14), uint8], Tensor[(392), uint8], Tensor[(8, 15, 11), bool]) {
  %529 = @func_4301() /* ty=(Tensor[(336), float64],) */;
  %530 = @func_4599() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %531 = cast(%var_7974, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %532 = reshape(%531, newshape=[7, 4, 14]) /* ty=Tensor[(7, 4, 14), uint8] */;
  %533 = @func_2224(%532) /* ty=(Tensor[(7, 4, 14), uint8],) */;
  %534 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %535 = %529.0;
  %536 = %530.0;
  %537 = %533.0;
  %538 = %534.1;
  (%535, %536, %537, %var_7974, %538)
}

def @func_7686(%var_7672: Tensor[(3, 12, 5), float64]) -> (Tensor[(3, 12, 5), float64], Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64]) {
  %539 = cast(%var_7672, dtype="float64") /* ty=Tensor[(3, 12, 5), float64] */;
  %540 = @func_7479() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %541 = @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %542 = acosh(%539) /* ty=Tensor[(3, 12, 5), float64] */;
  %543 = %540.0;
  %544 = %541.0;
  (%542, %543, %544)
}

def @func_2884(%var_2854: Tensor[(242), float64], %var_2868: Tensor[(330), bool]) -> (Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64], Tensor[(15, 2, 11), bool], Tensor[(330), bool], Tensor[(9, 15, 3), bool], Tensor[(135, 3), float64]) {
  %545 = cast(%var_2854, dtype="float64") /* ty=Tensor[(242), float64] */;
  %546 = reshape(%545, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %547 = @func_2353(%546) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
  %548 = cast(%var_2868, dtype="bool") /* ty=Tensor[(330), bool] */;
  %549 = reshape(%548, newshape=[15, 2, 11]) /* ty=Tensor[(15, 2, 11), bool] */;
  %550 = @func_1691(%549) /* ty=(Tensor[(15, 2, 11), bool],) */;
  %551 = cast(meta[relay.Constant][32] /* ty=Tensor[(135, 3), float64] */, dtype="float64") /* ty=Tensor[(135, 3), float64] */;
  %552 = reshape(%551, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
  %553 = @func_107(%552) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
  %554 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  %555 = %547.1;
  %556 = %550.0;
  %557 = %553.0;
  (%554, %555, %var_2854, %556, %var_2868, %557, meta[relay.Constant][32] /* ty=Tensor[(135, 3), float64] */)
}

def @func_6361() -> (Tensor[(8, 15, 11), float64], Tensor[(9, 15, 3), uint8]) {
  %558 = @func_3047() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */;
  %559 = @func_3082() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
  %560 = %558.0;
  %561 = %559.2;
  (%560, %561)
}

def @func_4638() -> (Tensor[(8, 15, 11), bool],) {
  %562 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %563 = %562.1;
  (%563,)
}

def @func_4627() -> Tensor[(8, 15, 11), float64] {
  %564 = @func_4111() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %564.0
}

def @func_3484() -> (Tensor[(8, 15, 11), float64],) {
  %565 = @func_3257() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64]) */;
  %566 = %565.1;
  (%566,)
}

def @func_4991() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(540), bool]) {
  %567 = cast(meta[relay.Constant][33] /* ty=Tensor[(540), bool] */, dtype="bool") /* ty=Tensor[(540), bool] */;
  %568 = reshape(%567, newshape=[540]) /* ty=Tensor[(540), bool] */;
  %569 = @func_2950(%568) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(3, 15, 12), bool], Tensor[(540), bool], Tensor[(11, 22), float64], Tensor[(11, 11, 2), float64]) */;
  %570 = @func_3697() /* ty=Tensor[(8, 15, 11), float64] */;
  %571 = %569.0;
  (%570, %571, meta[relay.Constant][33] /* ty=Tensor[(540), bool] */)
}

def @func_5062(%var_5035: Tensor[(15, 7, 1), int16]) -> (Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) {
  %572 = cast(%var_5035, dtype="int16") /* ty=Tensor[(15, 7, 1), int16] */;
  %573 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 7, 4), int16] */, dtype="int16") /* ty=Tensor[(15, 7, 4), int16] */;
  %574 = cast(%var_5035, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %575 = @func_3854() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %576 = right_shift(%572, %573) /* ty=Tensor[(15, 7, 4), int16] */;
  %577 = asinh(%574) /* ty=Tensor[(15, 7, 1), float32] */;
  %578 = %575.0;
  (%576, %577, %578)
}

def @func_6773() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %579 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %580 = @func_4991() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(540), bool]) */;
  %581 = %579.0;
  %582 = %580.0;
  (%581, %582)
}

def @func_2353(%var_2351: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) {
  %583 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %584 = cast(%var_2351, dtype="float64") /* ty=Tensor[(242), float64] */;
  %585 = reshape(%584, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %586 = @func_714(%585) /* ty=(Tensor[(11, 11, 2), float64],) */;
  %587 = %583.0;
  %588 = %586.0;
  (%587, %588, %var_2351)
}

def @func_4301() -> (Tensor[(336), float64],) {
  %589 = @func_3458() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(336), float64], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) */;
  %590 = %589.2;
  (%590,)
}

def @func_7283(%var_7271: Tensor[(1, 8, 12), int32]) -> (Tensor[(1, 8, 12), int32], Tensor[(1, 8, 12), int32]) {
  %591 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %592 = cast(%var_7271, dtype="int32") /* ty=Tensor[(1, 8, 12), int32] */;
  %593 = cast(%var_7271, dtype="int32") /* ty=Tensor[(1, 8, 12), int32] */;
  %594 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %595 = bitwise_or(%591, %592) /* ty=Tensor[(1, 8, 12), int32] */;
  %596 = left_shift(%593, %594) /* ty=Tensor[(1, 8, 12), int32] */;
  (%595, %596)
}

def @func_6104() -> Tensor[(8, 15, 11), float32] {
  @func_5939() /* ty=Tensor[(8, 15, 11), float32] */
}

def @func_4178() -> (Tensor[(8, 15, 11), float32],) {
  %597 = @func_3854() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %598 = %597.0;
  %599 = cast(%598, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %600 = sigmoid(%599) /* ty=Tensor[(8, 15, 11), float32] */;
  (%600,)
}

def @func_2989() -> (Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) {
  %601 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %602 = cast(meta[relay.Constant][35] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %603 = cast(meta[relay.Constant][35] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %604 = reshape(%602, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %605 = reshape(%603, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %606 = @func_1228(%604, %605) /* ty=(Tensor[(9, 9, 8), float64],) */;
  %607 = %601.0;
  %608 = %606.0;
  (%607, %608, meta[relay.Constant][35] /* ty=Tensor[(648), float64] */)
}

def @func_6000() -> (Tensor[(14, 15, 16), int8],) {
  %609 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 15, 16), int8] */, dtype="int8") /* ty=Tensor[(14, 15, 16), int8] */;
  %610 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(14, 15, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 15, 16), int8] */, dtype="int8") /* ty=Tensor[(14, 15, 16), int8] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %613 = left_shift(%611, %612) /* ty=Tensor[(14, 15, 16), int8] */;
  (%613,)
}

def @func_2834() -> (Tensor[(8, 15, 11), float64],) {
  %614 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %615 = %614.0;
  (%615,)
}

def @func_7817() -> Tensor[(8, 15, 11), bool] {
  %616 = @func_7479() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %616.0
}

def @func_6196() -> (Tensor[(8, 15, 11), float64], Tensor[(336), float64]) {
  %617 = @func_4931() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %618 = @func_4301() /* ty=(Tensor[(336), float64],) */;
  %619 = %617.0;
  %620 = %618.0;
  (%619, %620)
}

def @main(%var_8045: Tensor[(9, 10, 10), uint32], %var_8046: Tensor[(9, 10, 10), uint32]) -> (Tensor[(9, 10, 10), bool],) {
  %621 = cast(%var_8046, dtype="bool") /* ty=Tensor[(9, 10, 10), bool] */;
  %622 = shape_of(%var_8045, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%var_8045, dtype="bool") /* ty=Tensor[(9, 10, 10), bool] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %625 = not_equal(%623, %624) /* ty=Tensor[(9, 10, 10), bool] */;
  (%625,)
}

def @func_4078() -> Tensor[(405), float64] {
  %626 = @func_3082() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
  %626.3
}

def @func_7114() -> Tensor[(8, 15, 11), float64] {
  %627 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %627.0
}

def @func_6068(%var_6043: Tensor[(648), float64], %var_6057: Tensor[(330), bool]) -> (Tensor[(8, 15, 11), bool], Tensor[(105), int16], Tensor[(648), bool], Tensor[(8, 15, 11), float32], Tensor[(15, 7, 1), float32], Tensor[(15, 2, 11), bool], Tensor[(330), bool]) {
  %628 = @func_4638() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %629 = @func_3729() /* ty=Tensor[(648), float64] */;
  %630 = cast(%var_6043, dtype="bool") /* ty=Tensor[(648), bool] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(1), int32] */;
  %632 = cast(%629, dtype="bool") /* ty=Tensor[(648), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?), bool] */;
  %634 = cast(meta[relay.Constant][38] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %635 = reshape(%634, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), int16] */;
  %636 = @func_5062(%635) /* ty=(Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) */;
  %637 = %636.2;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %639 = cast(meta[relay.Constant][38] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %640 = reshape(%639, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), int16] */;
  %641 = @func_5062(%640) /* ty=(Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) */;
  %642 = cast(%var_6057, dtype="bool") /* ty=Tensor[(330), bool] */;
  %643 = reshape(%642, newshape=[15, 2, 11]) /* ty=Tensor[(15, 2, 11), bool] */;
  %644 = @func_1691(%643) /* ty=(Tensor[(15, 2, 11), bool],) */;
  %645 = %628.0;
  %646 = logical_or(%632, %633) /* ty=Tensor[(648), bool] */;
  %647 = erf(%638) /* ty=Tensor[(8, 15, 11), float32] */;
  %648 = %641.1;
  %649 = %644.0;
  (%645, meta[relay.Constant][38] /* ty=Tensor[(105), int16] */, %646, %647, %648, %649, %var_6057)
}

def @func_7267() -> Tensor[(9, 9, 8), float64] {
  %650 = @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */;
  %650.1
}

def @func_6620(%var_6595: Tensor[(330), bool], %var_6598: Tensor[(242), float64]) -> (Tensor[(336), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(648), float64], Tensor[(330), bool], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) {
  %651 = @func_4301() /* ty=(Tensor[(336), float64],) */;
  %652 = @func_3365() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %653 = cast(meta[relay.Constant][39] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %654 = cast(%var_6595, dtype="bool") /* ty=Tensor[(330), bool] */;
  %655 = reshape(%653, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %656 = reshape(%654, newshape=[330]) /* ty=Tensor[(330), bool] */;
  %657 = @func_6068(%655, %656) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(105), int16], Tensor[(648), bool], Tensor[(8, 15, 11), float32], Tensor[(15, 7, 1), float32], Tensor[(15, 2, 11), bool], Tensor[(330), bool]) */;
  %658 = cast(%var_6598, dtype="float64") /* ty=Tensor[(242), float64] */;
  %659 = reshape(%658, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %660 = @func_4331(%659) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) */;
  %661 = %651.0;
  %662 = %652.0;
  %663 = %657.0;
  %664 = %660.1;
  (%661, %662, %663, meta[relay.Constant][39] /* ty=Tensor[(648), float64] */, %var_6595, %664, %var_6598)
}

def @func_7427() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %665 = @func_4804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %666 = @func_3753() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %667 = @func_4931() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %668 = %665.0;
  %669 = %666.0;
  %670 = %667.0;
  (%668, %669, %670)
}

def @func_7733() -> (Tensor[(8, 15, 11), float64],) {
  %671 = @func_4111() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %672 = %671.0;
  (%672,)
}

def @func_107(%var_85: Tensor[(9, 15, 3), float64]) -> (Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) {
  %673 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 3), float64] */;
  %674 = tan(%673) /* ty=Tensor[(9, 15, 3), float64] */;
  %675 = cast(%674, dtype="float64") /* ty=Tensor[(9, 15, 3), float64] */;
  %676 = sinh(%675) /* ty=Tensor[(9, 15, 3), float64] */;
  %677 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 15, 3), float64] */, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %681 = cast(%var_85, dtype="uint8") /* ty=Tensor[(9, 15, 3), uint8] */;
  %682 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%676, dtype="uint8") /* ty=Tensor[(9, 15, 3), uint8] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %685 = greater_equal(%679, %680) /* ty=Tensor[(9, 15, 3), bool] */;
  %686 = minimum(%683, %684) /* ty=Tensor[(9, 15, 3), uint8] */;
  (%685, %686)
}

def @func_4135(%var_4128: Tensor[(12, 9, 7), float32]) -> (Tensor[(12, 9, 7), float32],) {
  %687 = cast(%var_4128, dtype="float32") /* ty=Tensor[(12, 9, 7), float32] */;
  %688 = asin(%687) /* ty=Tensor[(12, 9, 7), float32] */;
  (%688,)
}

def @func_3516() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) {
  %689 = @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %692 = reshape(%691, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %693 = @func_2526(%692) /* ty=Tensor[(8, 15, 11), bool] */;
  (%690, %693)
}

def @func_4190() -> (Tensor[(8, 15, 11), bool],) {
  %694 = @func_4053() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float32]) */;
  %695 = %694.0;
  (%695,)
}

def @func_6450() -> (Tensor[(8, 15, 11), float64],) {
  %696 = @func_3458() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(336), float64], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) */;
  %697 = %696.0;
  (%697,)
}

def @func_5267(%var_5183: Tensor[(5, 14, 8), uint16], %var_5184: Tensor[(5, 14, 8), uint16], %var_5260: Tensor[(5, 14, 8), float32]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(105), int16], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64], Tensor[(5, 14, 8), bool], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64]) {
  %698 = @func_3458() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(336), float64], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) */;
  %699 = cast(meta[relay.Constant][41] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %700 = reshape(%699, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), int16] */;
  %701 = @func_5062(%700) /* ty=(Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) */;
  %702 = cast(%var_5184, dtype="uint16") /* ty=Tensor[(5, 14, 8), uint16] */;
  %703 = shape_of(%var_5183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%var_5183, dtype="uint16") /* ty=Tensor[(5, 14, 8), uint16] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %706 = subtract(%704, %705) /* ty=Tensor[(5, 14, 8), uint16] */;
  %707 = cast(%706, dtype="float64") /* ty=Tensor[(5, 14, 8), float64] */;
  %708 = tan(%707) /* ty=Tensor[(5, 14, 8), float64] */;
  %709 = cast(%var_5183, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
  %710 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%706, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %713 = floor_divide(%711, %712) /* ty=Tensor[(5, 14, 8), float32] */;
  %714 = cast(%713, dtype="float64") /* ty=Tensor[(5, 14, 8), float64] */;
  %715 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%708, dtype="float64") /* ty=Tensor[(5, 14, 8), float64] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %718 = divide(%716, %717) /* ty=Tensor[(5, 14, 8), float64] */;
  %719 = cast(%708, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%718, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %723 = @func_3313() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %724 = cast(%708, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
  %725 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%706, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %728 = cast(%708, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
  %729 = sigmoid(%728) /* ty=Tensor[(5, 14, 8), float32] */;
  %730 = cast(%var_5260, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%729, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %734 = @func_3365() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %735 = %698.1;
  %736 = %701.2;
  %737 = greater_equal(%721, %722) /* ty=Tensor[(5, 14, 8), bool] */;
  %738 = %723.0;
  %739 = greater(%726, %727) /* ty=Tensor[(5, 14, 8), bool] */;
  %740 = logical_or(%732, %733) /* ty=Tensor[(5, 14, 8), bool] */;
  %741 = %734.0;
  (%735, %736, meta[relay.Constant][41] /* ty=Tensor[(105), int16] */, %737, %738, %739, %740, %741)
}

def @func_5425(%var_5421: Tensor[(378), uint8]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(378), bool]) {
  %742 = @func_4931() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %743 = cast(meta[relay.Constant][42] /* ty=Tensor[(378), uint8] */, dtype="uint8") /* ty=Tensor[(378), uint8] */;
  %744 = reshape(%743, newshape=[6, 9, 7]) /* ty=Tensor[(6, 9, 7), uint8] */;
  %745 = @func_3349(%744) /* ty=(Tensor[(6, 9, 7), bool], Tensor[(8, 15, 11), bool]) */;
  %746 = cast(%var_5421, dtype="bool") /* ty=Tensor[(378), bool] */;
  %747 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(378), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %748 = cast(meta[relay.Constant][42] /* ty=Tensor[(378), uint8] */, dtype="bool") /* ty=Tensor[(378), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?), bool] */;
  %750 = %742.0;
  %751 = %745.1;
  %752 = logical_or(%748, %749) /* ty=Tensor[(378), bool] */;
  (%750, %751, %752)
}

def @func_3257() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64]) {
  %753 = @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %754 = @func_3047() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */;
  %755 = %754.0;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %757 = @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */;
  %758 = %753.0;
  %759 = sinh(%756) /* ty=Tensor[(8, 15, 11), float64] */;
  %760 = %757.1;
  (%758, %759, %760)
}

def @func_4781() -> Tensor[(8, 15, 11), float64] {
  %761 = @func_3092() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %761.1
}

def @func_6837(%var_6787: Tensor[(6, 14, 7), float64], %var_6798: Tensor[(945), int32]) -> (Tensor[(15, 7, 9), int32], Tensor[(945), int32], Tensor[(6, 14, 7), bool]) {
  %762 = cast(%var_6798, dtype="int32") /* ty=Tensor[(945), int32] */;
  %763 = cast(%var_6798, dtype="int32") /* ty=Tensor[(945), int32] */;
  %764 = reshape(%762, newshape=[15, 7, 9]) /* ty=Tensor[(15, 7, 9), int32] */;
  %765 = reshape(%763, newshape=[15, 7, 9]) /* ty=Tensor[(15, 7, 9), int32] */;
  %766 = cast(%var_6787, dtype="float64") /* ty=Tensor[(6, 14, 7), float64] */;
  %767 = asin(%766) /* ty=Tensor[(6, 14, 7), float64] */;
  %768 = cast(%var_6787, dtype="bool") /* ty=Tensor[(6, 14, 7), bool] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="bool") /* ty=Tensor[(6, 14, 7), bool] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %772 = @func_5487(%764, %765) /* ty=Tensor[(15, 7, 9), int32] */;
  %773 = logical_or(%770, %771) /* ty=Tensor[(6, 14, 7), bool] */;
  (%772, %var_6798, %773)
}

def @func_7470() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float32]) {
  %774 = @func_6450() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %775 = @func_6225() /* ty=(Tensor[(8, 15, 11), float32],) */;
  %776 = %774.0;
  %777 = %775.0;
  (%776, %777)
}

def @func_8000() -> (Tensor[(648), bool],) {
  %778 = @func_3600() /* ty=(Tensor[(648), bool],) */;
  %779 = %778.0;
  (%779,)
}

def @func_3047() -> (Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) {
  %780 = @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %781 = cast(meta[relay.Constant][43] /* ty=Tensor[(242), float64] */, dtype="float64") /* ty=Tensor[(242), float64] */;
  %782 = reshape(%781, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %783 = @func_1141(%782) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
  %784 = %783.1;
  %785 = cast(%784, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %786 = %780.0;
  %787 = sigmoid(%785) /* ty=Tensor[(11, 11, 2), float64] */;
  (%786, meta[relay.Constant][43] /* ty=Tensor[(242), float64] */, %787)
}

def @func_999(%var_982: Tensor[(4, 7, 12), float64], %var_983: Tensor[(4, 7, 12), float64]) -> (Tensor[(4, 7, 12), float64], Tensor[(4, 7, 12), float64], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) {
  %788 = cast(%var_983, dtype="float64") /* ty=Tensor[(4, 7, 12), float64] */;
  %789 = shape_of(%var_982, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%var_982, dtype="float64") /* ty=Tensor[(4, 7, 12), float64] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %792 = cast(%var_983, dtype="float64") /* ty=Tensor[(4, 7, 12), float64] */;
  %793 = cast(meta[relay.Constant][44] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %794 = reshape(%793, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
  %795 = @func_107(%794) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
  %796 = floor_divide(%790, %791) /* ty=Tensor[(4, 7, 12), float64] */;
  %797 = cos(%792) /* ty=Tensor[(4, 7, 12), float64] */;
  %798 = %795.1;
  (%796, %797, %798, meta[relay.Constant][44] /* ty=Tensor[(405), float64] */)
}

def @func_6562() -> Tensor[(8, 15, 11), float64] {
  %799 = @func_3811() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %799.0
}

def @func_5731(%var_5726: Tensor[(12, 9, 5), float32]) -> (Tensor[(12, 9, 5), float32],) {
  %800 = cast(%var_5726, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
  %801 = log(%800) /* ty=Tensor[(12, 9, 5), float32] */;
  (%801,)
}

def @func_5866() -> (Tensor[(3, 6, 10), float64],) {
  %802 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 6, 10), float64] */, dtype="float64") /* ty=Tensor[(3, 6, 10), float64] */;
  %803 = exp(%802) /* ty=Tensor[(3, 6, 10), float64] */;
  (%803,)
}

def @func_1141(%var_1138: Tensor[(242), float64]) -> (Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) {
  %804 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 10), float64] */;
  %805 = log2(%804) /* ty=Tensor[(4, 15, 10), float64] */;
  %806 = cast(%805, dtype="float64") /* ty=Tensor[(4, 15, 10), float64] */;
  %807 = acosh(%806) /* ty=Tensor[(4, 15, 10), float64] */;
  %808 = cast(%805, dtype="int64") /* ty=Tensor[(4, 15, 10), int64] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%807, dtype="int64") /* ty=Tensor[(4, 15, 10), int64] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %812 = cast(%var_1138, dtype="float64") /* ty=Tensor[(242), float64] */;
  %813 = reshape(%812, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %814 = @func_714(%813) /* ty=(Tensor[(11, 11, 2), float64],) */;
  %815 = minimum(%810, %811) /* ty=Tensor[(4, 15, 10), int64] */;
  %816 = %814.0;
  (%815, %816, %var_1138)
}

def @func_5699(%var_5658: Tensor[(242), float64]) -> (Tensor[(648), bool], Tensor[(242), float64], Tensor[(11, 11, 2), float32], Tensor[(11, 11, 2), float64]) {
  %817 = @func_3600() /* ty=(Tensor[(648), bool],) */;
  %818 = cast(%var_5658, dtype="float64") /* ty=Tensor[(242), float64] */;
  %819 = reshape(%818, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %820 = @func_2353(%819) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
  %821 = %820.1;
  %822 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 11, 2), float64] */, dtype="int16") /* ty=Tensor[(11, 11, 2), int16] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="int16") /* ty=Tensor[(11, 11, 2), int16] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %826 = bitwise_and(%824, %825) /* ty=Tensor[(11, 11, 2), int16] */;
  %827 = cast(%826, dtype="float32") /* ty=Tensor[(11, 11, 2), float32] */;
  %828 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %829 = reshape(%828, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %830 = @func_714(%829) /* ty=(Tensor[(11, 11, 2), float64],) */;
  %831 = %817.0;
  %832 = log10(%827) /* ty=Tensor[(11, 11, 2), float32] */;
  %833 = %830.0;
  (%831, %var_5658, %832, %833)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4526() -> (Tensor[(8, 15, 11), bool], Tensor[(6, 9, 7), bool], Tensor[(378), uint8]) {
  %0 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(378), uint8] */, dtype="uint8") /* ty=Tensor[(378), uint8] */;
  %2 = reshape(%1, newshape=[6, 9, 7]) /* ty=Tensor[(6, 9, 7), uint8] */;
  %3 = @func_3349(%2) /* ty=(Tensor[(6, 9, 7), bool], Tensor[(8, 15, 11), bool]) */;
  %4 = %0.1;
  %5 = %3.0;
  (%4, %5, meta[relay.Constant][0] /* ty=Tensor[(378), uint8] */)
}

def @func_6146() -> (Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), bool], Tensor[(405), float64], Tensor[(8, 15, 11), float64], Tensor[(42, 1), float32]) {
  @func_6144() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), bool], Tensor[(405), float64], Tensor[(8, 15, 11), float64], Tensor[(42, 1), float32]) */
}

def @func_4111() -> (Tensor[(8, 15, 11), float64],) {
  %6 = @func_3313() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %7 = %6.0;
  (%7,)
}

def @func_6840(%var_6838: Tensor[(6, 14, 7), float64], %var_6839: Tensor[(945), int32]) -> (Tensor[(15, 7, 9), int32], Tensor[(945), int32], Tensor[(6, 14, 7), bool]) {
  %20 = fn (%var_6787: Tensor[(6, 14, 7), float64], %var_6798: Tensor[(945), int32]) -> (Tensor[(15, 7, 9), int32], Tensor[(945), int32], Tensor[(6, 14, 7), bool]) {
    %8 = cast(%var_6798, dtype="int32") /* ty=Tensor[(945), int32] */;
    %9 = cast(%var_6798, dtype="int32") /* ty=Tensor[(945), int32] */;
    %10 = reshape(%8, newshape=[15, 7, 9]) /* ty=Tensor[(15, 7, 9), int32] */;
    %11 = reshape(%9, newshape=[15, 7, 9]) /* ty=Tensor[(15, 7, 9), int32] */;
    %12 = cast(%var_6787, dtype="float64") /* ty=Tensor[(6, 14, 7), float64] */;
    %13 = asin(%12) /* ty=Tensor[(6, 14, 7), float64] */;
    %14 = cast(%var_6787, dtype="bool") /* ty=Tensor[(6, 14, 7), bool] */;
    %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%13, dtype="bool") /* ty=Tensor[(6, 14, 7), bool] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %18 = @func_5487(%10, %11) /* ty=Tensor[(15, 7, 9), int32] */;
    %19 = logical_or(%16, %17) /* ty=Tensor[(6, 14, 7), bool] */;
    (%18, %var_6798, %19)
  };
  %20(%var_6838, %var_6839) /* ty=(Tensor[(15, 7, 9), int32], Tensor[(945), int32], Tensor[(6, 14, 7), bool]) */
}

def @func_2226(%var_2225: Tensor[(7, 4, 14), uint8]) -> (Tensor[(7, 4, 14), uint8],) {
  %26 = fn (%var_2211: Tensor[(7, 4, 14), uint8]) -> (Tensor[(7, 4, 14), uint8],) {
    %21 = cast(%var_2211, dtype="uint8") /* ty=Tensor[(7, 4, 14), uint8] */;
    %22 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(7, 4, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 4, 14), uint8] */, dtype="uint8") /* ty=Tensor[(7, 4, 14), uint8] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %25 = bitwise_or(%23, %24) /* ty=Tensor[(7, 4, 14), uint8] */;
    (%25,)
  };
  %26(%var_2225) /* ty=(Tensor[(7, 4, 14), uint8],) */
}

def @func_7670(%var_7667: Tensor[(168), int64], %var_7668: Tensor[(1680), int64], %var_7669: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(168), int64], Tensor[(1680), int64], Tensor[(242), float64]) {
  @func_7665(%var_7667, %var_7668, %var_7669) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(168), int64], Tensor[(1680), int64], Tensor[(242), float64]) */
}

def @func_3518() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) {
  @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */
}

def @func_7115() -> Tensor[(8, 15, 11), float64] {
  %28 = fn () -> Tensor[(8, 15, 11), float64] {
    %27 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
    %27.0
  };
  %28() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_5518() -> Tensor[(8, 15, 11), float64] {
  %30 = fn () -> Tensor[(8, 15, 11), float64] {
    %29 = @func_3082() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
    %29.0
  };
  %30() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_2163() -> Tensor[(8, 15, 11), float64] {
  %32 = fn () -> Tensor[(8, 15, 11), float64] {
    %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    atanh(%31) /* ty=Tensor[(8, 15, 11), float64] */
  };
  %32() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_2964() -> (Tensor[(8, 15, 11), float64],) {
  %33 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %34 = %33.0;
  (%34,)
}

def @func_6225() -> (Tensor[(8, 15, 11), float32],) {
  %35 = @func_4178() /* ty=(Tensor[(8, 15, 11), float32],) */;
  %36 = %35.0;
  (%36,)
}

def @func_432(%var_429: Tensor[(10, 4, 15), float64], %var_430: Tensor[(10, 4, 15), float64], %var_431: Tensor[(1, 405), float64]) -> (Tensor[(10, 4, 15), float32], Tensor[(9, 15, 3), bool], Tensor[(1, 405), float64], Tensor[(9, 15, 3), bool]) {
  @func_427(%var_429, %var_430, %var_431) /* ty=(Tensor[(10, 4, 15), float32], Tensor[(9, 15, 3), bool], Tensor[(1, 405), float64], Tensor[(9, 15, 3), bool]) */
}

def @func_7904(%var_7902: Tensor[(11, 14, 2), int32]) -> (Tensor[(11, 14, 2), float32], Tensor[(8, 15, 11), bool], Tensor[(378), uint8], Tensor[(11, 14, 2), int32], Tensor[(8, 15, 11), float64], Tensor[(3, 56), int64], Tensor[(1680), int64], Tensor[(242), float64]) {
  @func_7901(%var_7902) /* ty=(Tensor[(11, 14, 2), float32], Tensor[(8, 15, 11), bool], Tensor[(378), uint8], Tensor[(11, 14, 2), int32], Tensor[(8, 15, 11), float64], Tensor[(3, 56), int64], Tensor[(1680), int64], Tensor[(242), float64]) */
}

def @func_7174(%var_7172: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float32], Tensor[(242), float64]) {
  @func_7171(%var_7172) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float32], Tensor[(242), float64]) */
}

def @func_7689(%var_7687: Tensor[(3, 12, 5), float64]) -> (Tensor[(3, 12, 5), float64], Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64]) {
  @func_7686(%var_7687) /* ty=(Tensor[(3, 12, 5), float64], Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64]) */
}

def @func_3258() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64]) {
  %45 = fn () -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64]) {
    %37 = @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %38 = @func_3047() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */;
    %39 = %38.0;
    %40 = cast(%39, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    %41 = @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */;
    %42 = %37.0;
    %43 = sinh(%40) /* ty=Tensor[(8, 15, 11), float64] */;
    %44 = %41.1;
    (%42, %43, %44)
  };
  %45() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64]) */
}

def @func_4113() -> (Tensor[(8, 15, 11), float64],) {
  @func_4111() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_3516() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) {
  %46 = @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %47 = %46.0;
  %48 = cast(%47, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %49 = reshape(%48, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %50 = @func_2526(%49) /* ty=Tensor[(8, 15, 11), bool] */;
  (%47, %50)
}

def @func_5062(%var_5035: Tensor[(15, 7, 1), int16]) -> (Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) {
  %51 = cast(%var_5035, dtype="int16") /* ty=Tensor[(15, 7, 1), int16] */;
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 7, 4), int16] */, dtype="int16") /* ty=Tensor[(15, 7, 4), int16] */;
  %53 = cast(%var_5035, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %54 = @func_3854() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %55 = right_shift(%51, %52) /* ty=Tensor[(15, 7, 4), int16] */;
  %56 = asinh(%53) /* ty=Tensor[(15, 7, 1), float32] */;
  %57 = %54.0;
  (%55, %56, %57)
}

def @func_6289(%var_6288: Tensor[(14, 7, 12), float32]) -> Tensor[(14, 7, 12), float32] {
  %59 = fn (%var_6283: Tensor[(14, 7, 12), float32]) -> Tensor[(14, 7, 12), float32] {
    %58 = cast(%var_6283, dtype="float32") /* ty=Tensor[(14, 7, 12), float32] */;
    atan(%58) /* ty=Tensor[(14, 7, 12), float32] */
  };
  %59(%var_6288) /* ty=Tensor[(14, 7, 12), float32] */
}

def @func_6522() -> (Tensor[(3, 6, 10), int32], Tensor[(3, 6, 10), int64]) {
  %72 = fn () -> (Tensor[(3, 6, 10), int32], Tensor[(3, 6, 10), int64]) {
    %60 = @func_5866() /* ty=(Tensor[(3, 6, 10), float64],) */;
    %61 = %60.0;
    %62 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 6, 10), float64] */, dtype="int32") /* ty=Tensor[(3, 6, 10), int32] */;
    %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
    %64 = cast(%61, dtype="int32") /* ty=Tensor[(3, 6, 10), int32] */;
    %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %66 = cast(%61, dtype="int64") /* ty=Tensor[(3, 6, 10), int64] */;
    %67 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(3, 6, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %68 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 6, 10), float64] */, dtype="int64") /* ty=Tensor[(3, 6, 10), int64] */;
    %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %70 = bitwise_or(%64, %65) /* ty=Tensor[(3, 6, 10), int32] */;
    %71 = minimum(%68, %69) /* ty=Tensor[(3, 6, 10), int64] */;
    (%70, %71)
  };
  %72() /* ty=(Tensor[(3, 6, 10), int32], Tensor[(3, 6, 10), int64]) */
}

def @func_4931() -> (Tensor[(8, 15, 11), float64],) {
  %73 = @func_3854() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %74 = %73.0;
  (%74,)
}

def @func_717(%var_715: Tensor[(11, 11, 2), float64]) -> (Tensor[(11, 11, 2), float64],) {
  @func_714(%var_715) /* ty=(Tensor[(11, 11, 2), float64],) */
}

def @func_3654(%var_3636: Tensor[(9, 5, 12), int8]) -> (Tensor[(9, 5, 12), bool], Tensor[(8, 15, 11), float64]) {
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 5, 12), int8] */, dtype="bool") /* ty=Tensor[(9, 5, 12), bool] */;
  %76 = shape_of(%var_3636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%var_3636, dtype="bool") /* ty=Tensor[(9, 5, 12), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %79 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %80 = greater_equal(%77, %78) /* ty=Tensor[(9, 5, 12), bool] */;
  %81 = %79.0;
  (%80, %81)
}

def @func_7733() -> (Tensor[(8, 15, 11), float64],) {
  %82 = @func_4111() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %83 = %82.0;
  (%83,)
}

def @func_1144(%var_1142: Tensor[(242), float64]) -> (Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) {
  @func_1141(%var_1142) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */
}

def @func_3657(%var_3655: Tensor[(9, 5, 12), int8]) -> (Tensor[(9, 5, 12), bool], Tensor[(8, 15, 11), float64]) {
  @func_3654(%var_3655) /* ty=(Tensor[(9, 5, 12), bool], Tensor[(8, 15, 11), float64]) */
}

def @func_5427(%var_5426: Tensor[(378), uint8]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(378), bool]) {
  %95 = fn (%var_5421: Tensor[(378), uint8]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(378), bool]) {
    %84 = @func_4931() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(378), uint8] */, dtype="uint8") /* ty=Tensor[(378), uint8] */;
    %86 = reshape(%85, newshape=[6, 9, 7]) /* ty=Tensor[(6, 9, 7), uint8] */;
    %87 = @func_3349(%86) /* ty=(Tensor[(6, 9, 7), bool], Tensor[(8, 15, 11), bool]) */;
    %88 = cast(%var_5421, dtype="bool") /* ty=Tensor[(378), bool] */;
    %89 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(378), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(378), uint8] */, dtype="bool") /* ty=Tensor[(378), bool] */;
    %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?), bool] */;
    %92 = %84.0;
    %93 = %87.1;
    %94 = logical_or(%90, %91) /* ty=Tensor[(378), bool] */;
    (%92, %93, %94)
  };
  %95(%var_5426) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(378), bool]) */
}

def @func_4805() -> (Tensor[(8, 15, 11), float64],) {
  %98 = fn () -> (Tensor[(8, 15, 11), float64],) {
    %96 = @func_3092() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
    %97 = %96.1;
    (%97,)
  };
  %98() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_7479() -> (Tensor[(8, 15, 11), bool],) {
  %99 = @func_3082() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
  %100 = %99.1;
  (%100,)
}

def @func_3541() -> (Tensor[(8, 15, 11), bool],) {
  @func_3539() /* ty=(Tensor[(8, 15, 11), bool],) */
}

def @func_3941(%var_3888: Tensor[(242), float64], %var_3898: Tensor[(8, 15, 11), float64]) -> (Tensor[(4, 15, 10), int64], Tensor[(242), float64], Tensor[(8, 15, 11), float32], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %101 = cast(%var_3888, dtype="float64") /* ty=Tensor[(242), float64] */;
  %102 = reshape(%101, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %103 = @func_1141(%102) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
  %104 = @func_3697() /* ty=Tensor[(8, 15, 11), float64] */;
  %105 = cast(%var_3898, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%104, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %109 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %110 = @func_3484() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %111 = cast(%var_3898, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %112 = @func_3484() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %113 = %103.0;
  %114 = mod(%107, %108) /* ty=Tensor[(8, 15, 11), float32] */;
  %115 = %109.0;
  %116 = @func_3697() /* ty=Tensor[(8, 15, 11), float64] */;
  %117 = %110.0;
  %118 = rsqrt(%111) /* ty=Tensor[(8, 15, 11), float64] */;
  %119 = %112.0;
  (%113, %var_3888, %114, %115, %116, %117, %118, %119)
}

def @func_7269() -> Tensor[(9, 9, 8), float64] {
  @func_7267() /* ty=Tensor[(9, 9, 8), float64] */
}

def @func_6361() -> (Tensor[(8, 15, 11), float64], Tensor[(9, 15, 3), uint8]) {
  %120 = @func_3047() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */;
  %121 = @func_3082() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
  %122 = %120.0;
  %123 = %121.2;
  (%122, %123)
}

def @func_4908() -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), int64]) {
  %137 = fn () -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), int64]) {
    %124 = @func_4638() /* ty=(Tensor[(8, 15, 11), bool],) */;
    %125 = @func_3313() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %126 = %125.0;
    %127 = cast(%126, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    %128 = cast(%126, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
    %129 = atan(%128) /* ty=Tensor[(8, 15, 11), float32] */;
    %130 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 15, 11), float32] */, dtype="int64") /* ty=Tensor[(8, 15, 11), int64] */;
    %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
    %132 = cast(%129, dtype="int64") /* ty=Tensor[(8, 15, 11), int64] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %134 = %124.0;
    %135 = asinh(%127) /* ty=Tensor[(8, 15, 11), float64] */;
    %136 = logical_xor(%132, %133) /* ty=Tensor[(8, 15, 11), int64] */;
    (%134, %135, %136)
  };
  %137() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), int64]) */
}

def @func_7004() -> (Tensor[(336), float64], Tensor[(405), float64]) {
  %141 = fn () -> (Tensor[(336), float64], Tensor[(405), float64]) {
    %138 = @func_4301() /* ty=(Tensor[(336), float64],) */;
    %139 = %138.0;
    %140 = @func_4078() /* ty=Tensor[(405), float64] */;
    (%139, %140)
  };
  %141() /* ty=(Tensor[(336), float64], Tensor[(405), float64]) */
}

def @func_5154(%var_5152: uint32, %var_5153: Tensor[(1, 14, 12), uint32]) -> (Tensor[(8, 15, 11), bool], Tensor[(?, 14, 12), float64]) {
  @func_5150(%var_5152, %var_5153) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(?, 14, 12), float64]) */
}

def @func_1228(%var_1217: Tensor[(9, 9, 8), float64], %var_1218: Tensor[(9, 9, 8), float64]) -> (Tensor[(9, 9, 8), float64],) {
  %142 = cast(%var_1218, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %143 = shape_of(%var_1217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%var_1217, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %146 = floor_mod(%144, %145) /* ty=Tensor[(9, 9, 8), float64] */;
  (%146,)
}

def @func_6281(%var_6279: Tensor[(1680), int64]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 22), float64], Tensor[(540), bool], Tensor[(8, 15, 11), float64], Tensor[(42, 4), int64], Tensor[(1680), int64]) {
  @func_6278(%var_6279) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 22), float64], Tensor[(540), bool], Tensor[(8, 15, 11), float64], Tensor[(42, 4), int64], Tensor[(1680), int64]) */
}

def @func_7584() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  @func_7582() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */
}

def @func_6775() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  @func_6773() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */
}

def @func_7448() -> Tensor[(8, 15, 11), bool] {
  %148 = fn () -> Tensor[(8, 15, 11), bool] {
    %147 = @func_4638() /* ty=(Tensor[(8, 15, 11), bool],) */;
    %147.0
  };
  %148() /* ty=Tensor[(8, 15, 11), bool] */
}

def @func_3539() -> (Tensor[(8, 15, 11), bool],) {
  %149 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
  %150 = %149.1;
  (%150,)
}

def @func_4933() -> (Tensor[(8, 15, 11), float64],) {
  @func_4931() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_7686(%var_7672: Tensor[(3, 12, 5), float64]) -> (Tensor[(3, 12, 5), float64], Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64]) {
  %151 = cast(%var_7672, dtype="float64") /* ty=Tensor[(3, 12, 5), float64] */;
  %152 = @func_7479() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %153 = @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %154 = acosh(%151) /* ty=Tensor[(3, 12, 5), float64] */;
  %155 = %152.0;
  %156 = %153.0;
  (%154, %155, %156)
}

def @func_4629() -> Tensor[(8, 15, 11), float64] {
  @func_4627() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_7427() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %157 = @func_4804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %158 = @func_3753() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %159 = @func_4931() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %160 = %157.0;
  %161 = %158.0;
  %162 = %159.0;
  (%160, %161, %162)
}

def @func_1002(%var_1000: Tensor[(4, 7, 12), float64], %var_1001: Tensor[(4, 7, 12), float64]) -> (Tensor[(4, 7, 12), float64], Tensor[(4, 7, 12), float64], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) {
  %174 = fn (%var_982: Tensor[(4, 7, 12), float64], %var_983: Tensor[(4, 7, 12), float64]) -> (Tensor[(4, 7, 12), float64], Tensor[(4, 7, 12), float64], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) {
    %163 = cast(%var_983, dtype="float64") /* ty=Tensor[(4, 7, 12), float64] */;
    %164 = shape_of(%var_982, dtype="int32") /* ty=Tensor[(3), int32] */;
    %165 = cast(%var_982, dtype="float64") /* ty=Tensor[(4, 7, 12), float64] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %167 = cast(%var_983, dtype="float64") /* ty=Tensor[(4, 7, 12), float64] */;
    %168 = cast(meta[relay.Constant][8] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
    %169 = reshape(%168, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
    %170 = @func_107(%169) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
    %171 = floor_divide(%165, %166) /* ty=Tensor[(4, 7, 12), float64] */;
    %172 = cos(%167) /* ty=Tensor[(4, 7, 12), float64] */;
    %173 = %170.1;
    (%171, %172, %173, meta[relay.Constant][8] /* ty=Tensor[(405), float64] */)
  };
  %174(%var_1000, %var_1001) /* ty=(Tensor[(4, 7, 12), float64], Tensor[(4, 7, 12), float64], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */
}

def @func_4781() -> Tensor[(8, 15, 11), float64] {
  %175 = @func_3092() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %175.1
}

def @func_4179() -> (Tensor[(8, 15, 11), float32],) {
  %180 = fn () -> (Tensor[(8, 15, 11), float32],) {
    %176 = @func_3854() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %177 = %176.0;
    %178 = cast(%177, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
    %179 = sigmoid(%178) /* ty=Tensor[(8, 15, 11), float32] */;
    (%179,)
  };
  %180() /* ty=(Tensor[(8, 15, 11), float32],) */
}

def @func_2836() -> (Tensor[(8, 15, 11), float64],) {
  @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_7735() -> (Tensor[(8, 15, 11), float64],) {
  @func_7733() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_5733(%var_5732: Tensor[(12, 9, 5), float32]) -> (Tensor[(12, 9, 5), float32],) {
  %183 = fn (%var_5726: Tensor[(12, 9, 5), float32]) -> (Tensor[(12, 9, 5), float32],) {
    %181 = cast(%var_5726, dtype="float32") /* ty=Tensor[(12, 9, 5), float32] */;
    %182 = log(%181) /* ty=Tensor[(12, 9, 5), float32] */;
    (%182,)
  };
  %183(%var_5732) /* ty=(Tensor[(12, 9, 5), float32],) */
}

def @func_3092() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %184 = @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */;
  %185 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  %186 = %184.0;
  (%185, %186)
}

def @func_5702(%var_5700: Tensor[(242), float64]) -> (Tensor[(648), bool], Tensor[(242), float64], Tensor[(11, 11, 2), float32], Tensor[(11, 11, 2), float64]) {
  @func_5699(%var_5700) /* ty=(Tensor[(648), bool], Tensor[(242), float64], Tensor[(11, 11, 2), float32], Tensor[(11, 11, 2), float64]) */
}

def @func_7171(%var_7169: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float32], Tensor[(242), float64]) {
  %187 = cast(%var_7169, dtype="float64") /* ty=Tensor[(242), float64] */;
  %188 = @func_6562() /* ty=Tensor[(8, 15, 11), float64] */;
  %189 = cast(%188, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %190 = reshape(%187, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %191 = reshape(%189, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %192 = @func_3941(%190, %191) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(242), float64], Tensor[(8, 15, 11), float32], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %193 = %192.2;
  (%188, %193, %var_7169)
}

def @func_6943() -> (Tensor[(8, 15, 11), float64], Tensor[(1320), float64], Tensor[(8, 15, 11), float64], Tensor[(648), float64], Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), bool], Tensor[(6, 2, 3), float32], Tensor[(8, 15, 11), float64]) {
  %211 = fn () -> (Tensor[(8, 15, 11), float64], Tensor[(1320), float64], Tensor[(8, 15, 11), float64], Tensor[(648), float64], Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), bool], Tensor[(6, 2, 3), float32], Tensor[(8, 15, 11), float64]) {
    %194 = @func_5517() /* ty=Tensor[(8, 15, 11), float64] */;
    %195 = cast(%194, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    %196 = reshape(%195, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
    %197 = @func_4448(%196) /* ty=(Tensor[(5, 15, 5), uint32], Tensor[(8, 15, 11), bool], Tensor[(1320), float64], Tensor[(5, 15, 5), float64]) */;
    %198 = cast(meta[relay.Constant][9] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
    %199 = reshape(%198, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
    %200 = @func_4701(%199) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(8, 15, 11), float64]) */;
    %201 = @func_4907() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), int64]) */;
    %202 = @func_4599() /* ty=(Tensor[(8, 15, 11), bool],) */;
    %203 = @func_5969() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(6, 2, 3), float32], Tensor[(8, 15, 11), float64]) */;
    %204 = @func_3811() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %205 = %197.2;
    %206 = %200.1;
    %207 = %201.0;
    %208 = %202.0;
    %209 = %203.0;
    %210 = %204.0;
    (%194, %205, %206, meta[relay.Constant][9] /* ty=Tensor[(648), float64] */, %207, %208, %209, %210)
  };
  %211() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(1320), float64], Tensor[(8, 15, 11), float64], Tensor[(648), float64], Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), bool], Tensor[(6, 2, 3), float32], Tensor[(8, 15, 11), float64]) */
}

def @func_7901(%var_7853: Tensor[(11, 14, 2), int32]) -> (Tensor[(11, 14, 2), float32], Tensor[(8, 15, 11), bool], Tensor[(378), uint8], Tensor[(11, 14, 2), int32], Tensor[(8, 15, 11), float64], Tensor[(3, 56), int64], Tensor[(1680), int64], Tensor[(242), float64]) {
  %212 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 14, 2), int32] */, dtype="float32") /* ty=Tensor[(11, 14, 2), float32] */;
  %213 = cast(meta[relay.Constant][11] /* ty=Tensor[(378), uint8] */, dtype="uint8") /* ty=Tensor[(378), uint8] */;
  %214 = reshape(%213, newshape=[6, 9, 7]) /* ty=Tensor[(6, 9, 7), uint8] */;
  %215 = @func_3349(%214) /* ty=(Tensor[(6, 9, 7), bool], Tensor[(8, 15, 11), bool]) */;
  %216 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 14, 2), int32] */, dtype="int32") /* ty=Tensor[(11, 14, 2), int32] */;
  %217 = shape_of(%var_7853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%var_7853, dtype="int32") /* ty=Tensor[(11, 14, 2), int32] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %220 = minimum(%218, %219) /* ty=Tensor[(11, 14, 2), int32] */;
  %221 = cast(%220, dtype="int32") /* ty=Tensor[(11, 14, 2), int32] */;
  %222 = shape_of(%var_7853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%var_7853, dtype="int32") /* ty=Tensor[(11, 14, 2), int32] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %225 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 56), int64] */, dtype="int64") /* ty=Tensor[(3, 56), int64] */;
  %226 = cast(meta[relay.Constant][13] /* ty=Tensor[(1680), int64] */, dtype="int64") /* ty=Tensor[(1680), int64] */;
  %227 = cast(meta[relay.Constant][14] /* ty=Tensor[(242), float64] */, dtype="float64") /* ty=Tensor[(242), float64] */;
  %228 = reshape(%225, newshape=[14, 1, 12]) /* ty=Tensor[(14, 1, 12), int64] */;
  %229 = reshape(%226, newshape=[14, 10, 12]) /* ty=Tensor[(14, 10, 12), int64] */;
  %230 = reshape(%227, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %231 = @func_2758(%228, %229, %230) /* ty=(Tensor[(14, 10, 12), bool], Tensor[(11, 22), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), int32], Tensor[(336), float64], Tensor[(11, 11, 2), int8], Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float32], Tensor[(14, 10, 12), float64]) */;
  %232 = sigmoid(%212) /* ty=Tensor[(11, 14, 2), float32] */;
  %233 = %215.1;
  %234 = multiply(%223, %224) /* ty=Tensor[(11, 14, 2), int32] */;
  %235 = %231.2;
  (%232, %233, meta[relay.Constant][11] /* ty=Tensor[(378), uint8] */, %234, %235, meta[relay.Constant][12] /* ty=Tensor[(3, 56), int64] */, meta[relay.Constant][13] /* ty=Tensor[(1680), int64] */, meta[relay.Constant][14] /* ty=Tensor[(242), float64] */)
}

def @func_4970() -> (Tensor[(8, 15, 11), float64],) {
  %238 = fn () -> (Tensor[(8, 15, 11), float64],) {
    %236 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %237 = %236.0;
    (%237,)
  };
  %238() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_4192() -> (Tensor[(8, 15, 11), bool],) {
  @func_4190() /* ty=(Tensor[(8, 15, 11), bool],) */
}

def @func_3094() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  @func_3092() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */
}

def @func_4331(%var_4329: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) {
  %239 = @func_3047() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */;
  %240 = cast(%var_4329, dtype="float64") /* ty=Tensor[(242), float64] */;
  %241 = reshape(%240, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %242 = @func_2403(%241) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) */;
  %243 = %239.0;
  %244 = %242.0;
  (%243, %244, %var_4329)
}

def @func_7228() -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64], Tensor[(280, 2), float64]) {
  @func_7226() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64], Tensor[(280, 2), float64]) */
}

def @func_2804() -> (Tensor[(8, 15, 11), float64],) {
  %245 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  (%245,)
}

def @func_4334(%var_4332: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) {
  @func_4331(%var_4332) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) */
}

def @func_5866() -> (Tensor[(3, 6, 10), float64],) {
  %246 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 6, 10), float64] */, dtype="float64") /* ty=Tensor[(3, 6, 10), float64] */;
  %247 = exp(%246) /* ty=Tensor[(3, 6, 10), float64] */;
  (%247,)
}

def @func_4190() -> (Tensor[(8, 15, 11), bool],) {
  %248 = @func_4053() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float32]) */;
  %249 = %248.0;
  (%249,)
}

def @func_6451() -> (Tensor[(8, 15, 11), float64],) {
  %252 = fn () -> (Tensor[(8, 15, 11), float64],) {
    %250 = @func_3458() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(336), float64], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) */;
    %251 = %250.0;
    (%251,)
  };
  %252() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_6198() -> (Tensor[(8, 15, 11), float64], Tensor[(336), float64]) {
  @func_6196() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(336), float64]) */
}

def @func_2806() -> (Tensor[(8, 15, 11), float64],) {
  @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_7086() -> Tensor[(8, 15, 11), float64] {
  %254 = fn () -> Tensor[(8, 15, 11), float64] {
    %253 = @func_3854() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %253.0
  };
  %254() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_4528() -> (Tensor[(8, 15, 11), bool], Tensor[(6, 9, 7), bool], Tensor[(378), uint8]) {
  @func_4526() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(6, 9, 7), bool], Tensor[(378), uint8]) */
}

def @func_7665(%var_7659: Tensor[(168), int64], %var_7660: Tensor[(1680), int64], %var_7661: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(168), int64], Tensor[(1680), int64], Tensor[(242), float64]) {
  %255 = @func_3811() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %256 = cast(%var_7659, dtype="int64") /* ty=Tensor[(168), int64] */;
  %257 = cast(%var_7660, dtype="int64") /* ty=Tensor[(1680), int64] */;
  %258 = cast(%var_7661, dtype="float64") /* ty=Tensor[(242), float64] */;
  %259 = reshape(%256, newshape=[14, 1, 12]) /* ty=Tensor[(14, 1, 12), int64] */;
  %260 = reshape(%257, newshape=[14, 10, 12]) /* ty=Tensor[(14, 10, 12), int64] */;
  %261 = reshape(%258, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %262 = @func_2758(%259, %260, %261) /* ty=(Tensor[(14, 10, 12), bool], Tensor[(11, 22), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), int32], Tensor[(336), float64], Tensor[(11, 11, 2), int8], Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float32], Tensor[(14, 10, 12), float64]) */;
  %263 = %255.0;
  %264 = %262.7;
  (%263, %264, %var_7659, %var_7660, %var_7661)
}

def @func_6278(%var_6271: Tensor[(1680), int64]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 22), float64], Tensor[(540), bool], Tensor[(8, 15, 11), float64], Tensor[(42, 4), int64], Tensor[(1680), int64]) {
  %265 = @func_3257() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64]) */;
  %266 = cast(meta[relay.Constant][16] /* ty=Tensor[(540), bool] */, dtype="bool") /* ty=Tensor[(540), bool] */;
  %267 = reshape(%266, newshape=[540]) /* ty=Tensor[(540), bool] */;
  %268 = @func_2950(%267) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(3, 15, 12), bool], Tensor[(540), bool], Tensor[(11, 22), float64], Tensor[(11, 11, 2), float64]) */;
  %269 = cast(meta[relay.Constant][17] /* ty=Tensor[(42, 4), int64] */, dtype="int64") /* ty=Tensor[(42, 4), int64] */;
  %270 = cast(%var_6271, dtype="int64") /* ty=Tensor[(1680), int64] */;
  %271 = %268.3;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(11, 22), float64] */;
  %273 = reshape(%269, newshape=[14, 1, 12]) /* ty=Tensor[(14, 1, 12), int64] */;
  %274 = reshape(%270, newshape=[14, 10, 12]) /* ty=Tensor[(14, 10, 12), int64] */;
  %275 = reshape(%272, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %276 = @func_2758(%273, %274, %275) /* ty=(Tensor[(14, 10, 12), bool], Tensor[(11, 22), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), int32], Tensor[(336), float64], Tensor[(11, 11, 2), int8], Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float32], Tensor[(14, 10, 12), float64]) */;
  %277 = %265.0;
  %278 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  %279 = %276.6;
  (%277, %278, %271, meta[relay.Constant][16] /* ty=Tensor[(540), bool] */, %279, meta[relay.Constant][17] /* ty=Tensor[(42, 4), int64] */, %var_6271)
}

def @func_6106() -> Tensor[(8, 15, 11), float32] {
  @func_6104() /* ty=Tensor[(8, 15, 11), float32] */
}

def @func_2199(%var_2195: Tensor[(3, 15, 12), bool], %var_2196: Tensor[(3, 15, 12), bool], %var_2197: Tensor[(3, 15, 12), bool], %var_2198: Tensor[(242), float64]) -> (Tensor[(3, 15, 12), bool], Tensor[(242), float64], Tensor[(242), float64]) {
  %294 = fn (%var_2170: Tensor[(3, 15, 12), bool], %var_2171: Tensor[(3, 15, 12), bool], %var_2175: Tensor[(3, 15, 12), bool], %var_2182: Tensor[(242), float64]) -> (Tensor[(3, 15, 12), bool], Tensor[(242), float64], Tensor[(242), float64]) {
    %280 = cast(%var_2171, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
    %281 = shape_of(%var_2170, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%var_2170, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %284 = logical_or(%282, %283) /* ty=Tensor[(3, 15, 12), bool] */;
    %285 = cast(%var_2175, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
    %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
    %287 = cast(%284, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %289 = cast(%var_2182, dtype="float64") /* ty=Tensor[(242), float64] */;
    %290 = reshape(%289, newshape=[242]) /* ty=Tensor[(242), float64] */;
    %291 = @func_1141(%290) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
    %292 = logical_and(%287, %288) /* ty=Tensor[(3, 15, 12), bool] */;
    %293 = %291.2;
    (%292, %293, %var_2182)
  };
  %294(%var_2195, %var_2196, %var_2197, %var_2198) /* ty=(Tensor[(3, 15, 12), bool], Tensor[(242), float64], Tensor[(242), float64]) */
}

def @func_2528(%var_2527: Tensor[(8, 15, 11), float64]) -> Tensor[(8, 15, 11), bool] {
  %301 = fn (%var_2519: Tensor[(8, 15, 11), float64]) -> Tensor[(8, 15, 11), bool] {
    %295 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
    %296 = %295.1;
    %297 = cast(%var_2519, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
    %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %299 = cast(%296, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
    %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%299, %300) /* ty=Tensor[(8, 15, 11), bool] */
  };
  %301(%var_2527) /* ty=Tensor[(8, 15, 11), bool] */
}

def @main(%var_8045: Tensor[(9, 10, 10), uint32], %var_8046: Tensor[(9, 10, 10), uint32]) -> (Tensor[(9, 10, 10), bool],) {
  %302 = cast(%var_8046, dtype="bool") /* ty=Tensor[(9, 10, 10), bool] */;
  %303 = shape_of(%var_8045, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%var_8045, dtype="bool") /* ty=Tensor[(9, 10, 10), bool] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %306 = not_equal(%304, %305) /* ty=Tensor[(9, 10, 10), bool] */;
  (%306,)
}

def @func_3812() -> (Tensor[(8, 15, 11), float64],) {
  %309 = fn () -> (Tensor[(8, 15, 11), float64],) {
    %307 = @func_3047() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */;
    %308 = %307.0;
    (%308,)
  };
  %309() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_7582() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %310 = @func_2964() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %311 = %310.0;
  %312 = @func_5517() /* ty=Tensor[(8, 15, 11), float64] */;
  (%311, %312)
}

def @func_4752(%var_4751: Tensor[(3, 11, 8), uint8]) -> (Tensor[(3, 11, 8), uint8], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) {
  %322 = fn (%var_4725: Tensor[(3, 11, 8), uint8]) -> (Tensor[(3, 11, 8), uint8], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) {
    %313 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 11, 8), uint8] */, dtype="uint8") /* ty=Tensor[(3, 11, 8), uint8] */;
    %314 = shape_of(%var_4725, dtype="int32") /* ty=Tensor[(3), int32] */;
    %315 = cast(%var_4725, dtype="uint8") /* ty=Tensor[(3, 11, 8), uint8] */;
    %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %317 = @func_3047() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */;
    %318 = @func_3753() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %319 = minimum(%315, %316) /* ty=Tensor[(3, 11, 8), uint8] */;
    %320 = %317.1;
    %321 = %318.0;
    (%319, %320, %321)
  };
  %322(%var_4751) /* ty=(Tensor[(3, 11, 8), uint8], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) */
}

def @func_3351(%var_3350: Tensor[(6, 9, 7), uint8]) -> (Tensor[(6, 9, 7), bool], Tensor[(8, 15, 11), bool]) {
  %330 = fn (%var_3320: Tensor[(6, 9, 7), uint8]) -> (Tensor[(6, 9, 7), bool], Tensor[(8, 15, 11), bool]) {
    %323 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 9, 7), uint8] */, dtype="bool") /* ty=Tensor[(6, 9, 7), bool] */;
    %324 = shape_of(%var_3320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %325 = cast(%var_3320, dtype="bool") /* ty=Tensor[(6, 9, 7), bool] */;
    %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %327 = @func_3082() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
    %328 = greater_equal(%325, %326) /* ty=Tensor[(6, 9, 7), bool] */;
    %329 = %327.1;
    (%328, %329)
  };
  %330(%var_3350) /* ty=(Tensor[(6, 9, 7), bool], Tensor[(8, 15, 11), bool]) */
}

def @func_2291() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %335 = fn () -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
    %331 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %332 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %333 = %331.0;
    %334 = %332.0;
    (%333, %334)
  };
  %335() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */
}

def @func_7514() -> (Tensor[(42, 1), float32],) {
  %338 = fn () -> (Tensor[(42, 1), float32],) {
    %336 = @func_6144() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), bool], Tensor[(405), float64], Tensor[(8, 15, 11), float64], Tensor[(42, 1), float32]) */;
    %337 = %336.4;
    (%337,)
  };
  %338() /* ty=(Tensor[(42, 1), float32],) */
}

def @func_7624() -> (Tensor[(8, 15, 11), bool],) {
  %341 = fn () -> (Tensor[(8, 15, 11), bool],) {
    %339 = @func_5351() /* ty=(Tensor[(8, 15, 11), bool],) */;
    %340 = %339.0;
    (%340,)
  };
  %341() /* ty=(Tensor[(8, 15, 11), bool],) */
}

def @func_2991() -> (Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) {
  @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */
}

def @func_5699(%var_5658: Tensor[(242), float64]) -> (Tensor[(648), bool], Tensor[(242), float64], Tensor[(11, 11, 2), float32], Tensor[(11, 11, 2), float64]) {
  %342 = @func_3600() /* ty=(Tensor[(648), bool],) */;
  %343 = cast(%var_5658, dtype="float64") /* ty=Tensor[(242), float64] */;
  %344 = reshape(%343, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %345 = @func_2353(%344) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
  %346 = %345.1;
  %347 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 11, 2), float64] */, dtype="int16") /* ty=Tensor[(11, 11, 2), int16] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="int16") /* ty=Tensor[(11, 11, 2), int16] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %351 = bitwise_and(%349, %350) /* ty=Tensor[(11, 11, 2), int16] */;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(11, 11, 2), float32] */;
  %353 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %354 = reshape(%353, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %355 = @func_714(%354) /* ty=(Tensor[(11, 11, 2), float64],) */;
  %356 = %342.0;
  %357 = log10(%352) /* ty=Tensor[(11, 11, 2), float32] */;
  %358 = %355.0;
  (%356, %var_5658, %357, %358)
}

def @func_4627() -> Tensor[(8, 15, 11), float64] {
  %359 = @func_4111() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %359.0
}

def @func_3754() -> (Tensor[(8, 15, 11), float64],) {
  %362 = fn () -> (Tensor[(8, 15, 11), float64],) {
    %360 = @func_3092() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
    %361 = %360.0;
    (%361,)
  };
  %362() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_7267() -> Tensor[(9, 9, 8), float64] {
  %363 = @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */;
  %363.1
}

def @func_5150(%var_5120: uint32, %var_5121: Tensor[(1, 14, 12), uint32]) -> (Tensor[(8, 15, 11), bool], Tensor[(?, 14, 12), float64]) {
  %364 = @func_3539() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %365 = cast(%var_5120, dtype="bool") /* ty=bool */;
  %366 = cast(%var_5121, dtype="bool") /* ty=Tensor[(1, 14, 12), bool] */;
  %367 = greater(%365, %366) /* ty=Tensor[(1, 14, 12), bool] */;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(1, 14, 12), float64] */;
  %369 = shape_of(%var_5121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_5121, dtype="float64") /* ty=Tensor[(1, 14, 12), float64] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %372 = %364.0;
  %373 = mod(%370, %371) /* ty=Tensor[(?, 14, 12), float64] */;
  (%372, %373)
}

def @func_7988(%var_7987: Tensor[(392), uint8]) -> (Tensor[(336), float64], Tensor[(8, 15, 11), bool], Tensor[(7, 4, 14), uint8], Tensor[(392), uint8], Tensor[(8, 15, 11), bool]) {
  %384 = fn (%var_7974: Tensor[(392), uint8]) -> (Tensor[(336), float64], Tensor[(8, 15, 11), bool], Tensor[(7, 4, 14), uint8], Tensor[(392), uint8], Tensor[(8, 15, 11), bool]) {
    %374 = @func_4301() /* ty=(Tensor[(336), float64],) */;
    %375 = @func_4599() /* ty=(Tensor[(8, 15, 11), bool],) */;
    %376 = cast(%var_7974, dtype="uint8") /* ty=Tensor[(392), uint8] */;
    %377 = reshape(%376, newshape=[7, 4, 14]) /* ty=Tensor[(7, 4, 14), uint8] */;
    %378 = @func_2224(%377) /* ty=(Tensor[(7, 4, 14), uint8],) */;
    %379 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
    %380 = %374.0;
    %381 = %375.0;
    %382 = %378.0;
    %383 = %379.1;
    (%380, %381, %382, %var_7974, %383)
  };
  %384(%var_7987) /* ty=(Tensor[(336), float64], Tensor[(8, 15, 11), bool], Tensor[(7, 4, 14), uint8], Tensor[(392), uint8], Tensor[(8, 15, 11), bool]) */
}

def @func_2405(%var_2404: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) {
  %399 = fn (%var_2376: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) {
    %385 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
    %386 = cast(%var_2376, dtype="float64") /* ty=Tensor[(242), float64] */;
    %387 = reshape(%386, newshape=[242]) /* ty=Tensor[(242), float64] */;
    %388 = @func_1141(%387) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
    %389 = cast(meta[relay.Constant][21] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %390 = cast(meta[relay.Constant][21] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %391 = reshape(%389, newshape=[4, 7, 12]) /* ty=Tensor[(4, 7, 12), float64] */;
    %392 = reshape(%390, newshape=[4, 7, 12]) /* ty=Tensor[(4, 7, 12), float64] */;
    %393 = @func_999(%391, %392) /* ty=(Tensor[(4, 7, 12), float64], Tensor[(4, 7, 12), float64], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
    %394 = cast(%var_2376, dtype="float32") /* ty=Tensor[(242), float32] */;
    %395 = %385.1;
    %396 = %388.1;
    %397 = %393.2;
    %398 = log(%394) /* ty=Tensor[(242), float32] */;
    (%395, %396, %397, meta[relay.Constant][21] /* ty=Tensor[(336), float64] */, %398)
  };
  %399(%var_2404) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) */
}

def @func_2834() -> (Tensor[(8, 15, 11), float64],) {
  %400 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %401 = %400.0;
  (%401,)
}

def @func_7285(%var_7284: Tensor[(1, 8, 12), int32]) -> (Tensor[(1, 8, 12), int32], Tensor[(1, 8, 12), int32]) {
  %408 = fn (%var_7271: Tensor[(1, 8, 12), int32]) -> (Tensor[(1, 8, 12), int32], Tensor[(1, 8, 12), int32]) {
    %402 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %403 = cast(%var_7271, dtype="int32") /* ty=Tensor[(1, 8, 12), int32] */;
    %404 = cast(%var_7271, dtype="int32") /* ty=Tensor[(1, 8, 12), int32] */;
    %405 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %406 = bitwise_or(%402, %403) /* ty=Tensor[(1, 8, 12), int32] */;
    %407 = left_shift(%404, %405) /* ty=Tensor[(1, 8, 12), int32] */;
    (%406, %407)
  };
  %408(%var_7284) /* ty=(Tensor[(1, 8, 12), int32], Tensor[(1, 8, 12), int32]) */
}

def @func_5487(%var_5481: Tensor[(15, 7, 9), int32], %var_5482: Tensor[(15, 7, 9), int32]) -> Tensor[(15, 7, 9), int32] {
  %409 = cast(%var_5482, dtype="int32") /* ty=Tensor[(15, 7, 9), int32] */;
  %410 = shape_of(%var_5481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%var_5481, dtype="int32") /* ty=Tensor[(15, 7, 9), int32] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  minimum(%411, %412) /* ty=Tensor[(15, 7, 9), int32] */
}

def @func_6363() -> (Tensor[(8, 15, 11), float64], Tensor[(9, 15, 3), uint8]) {
  @func_6361() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 15, 3), uint8]) */
}

def @func_3485() -> (Tensor[(8, 15, 11), float64],) {
  %415 = fn () -> (Tensor[(8, 15, 11), float64],) {
    %413 = @func_3257() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64]) */;
    %414 = %413.1;
    (%414,)
  };
  %415() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_6310(%var_6300: Tensor[(242), float64]) -> (Tensor[(3, 6, 10), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) {
  %416 = @func_5866() /* ty=(Tensor[(3, 6, 10), float64],) */;
  %417 = cast(%var_6300, dtype="float64") /* ty=Tensor[(242), float64] */;
  %418 = reshape(%417, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %419 = @func_714(%418) /* ty=(Tensor[(11, 11, 2), float64],) */;
  %420 = cast(%var_6300, dtype="float64") /* ty=Tensor[(242), float64] */;
  %421 = %416.0;
  %422 = %419.0;
  %423 = sin(%420) /* ty=Tensor[(242), float64] */;
  (%421, %422, %423)
}

def @func_2989() -> (Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) {
  %424 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %425 = cast(meta[relay.Constant][22] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %426 = cast(meta[relay.Constant][22] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %427 = reshape(%425, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %428 = reshape(%426, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %429 = @func_1228(%427, %428) /* ty=(Tensor[(9, 9, 8), float64],) */;
  %430 = %424.0;
  %431 = %429.0;
  (%430, %431, meta[relay.Constant][22] /* ty=Tensor[(648), float64] */)
}

def @func_8001() -> (Tensor[(648), bool],) {
  %434 = fn () -> (Tensor[(648), bool],) {
    %432 = @func_3600() /* ty=(Tensor[(648), bool],) */;
    %433 = %432.0;
    (%433,)
  };
  %434() /* ty=(Tensor[(648), bool],) */
}

def @func_4600() -> (Tensor[(8, 15, 11), bool],) {
  %437 = fn () -> (Tensor[(8, 15, 11), bool],) {
    %435 = @func_4190() /* ty=(Tensor[(8, 15, 11), bool],) */;
    %436 = %435.0;
    (%436,)
  };
  %437() /* ty=(Tensor[(8, 15, 11), bool],) */
}

def @func_6000() -> (Tensor[(14, 15, 16), int8],) {
  %438 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 15, 16), int8] */, dtype="int8") /* ty=Tensor[(14, 15, 16), int8] */;
  %439 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(14, 15, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 15, 16), int8] */, dtype="int8") /* ty=Tensor[(14, 15, 16), int8] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %442 = left_shift(%440, %441) /* ty=Tensor[(14, 15, 16), int8] */;
  (%442,)
}

def @func_3697() -> Tensor[(8, 15, 11), float64] {
  %443 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %443.0
}

def @func_6196() -> (Tensor[(8, 15, 11), float64], Tensor[(336), float64]) {
  %444 = @func_4931() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %445 = @func_4301() /* ty=(Tensor[(336), float64],) */;
  %446 = %444.0;
  %447 = %445.0;
  (%446, %447)
}

def @func_7817() -> Tensor[(8, 15, 11), bool] {
  %448 = @func_7479() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %448.0
}

def @func_3366() -> (Tensor[(8, 15, 11), float64],) {
  %451 = fn () -> (Tensor[(8, 15, 11), float64],) {
    %449 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %450 = %449.0;
    (%450,)
  };
  %451() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_5271(%var_5268: Tensor[(5, 14, 8), uint16], %var_5269: Tensor[(5, 14, 8), uint16], %var_5270: Tensor[(5, 14, 8), float32]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(105), int16], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64], Tensor[(5, 14, 8), bool], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64]) {
  %496 = fn (%var_5183: Tensor[(5, 14, 8), uint16], %var_5184: Tensor[(5, 14, 8), uint16], %var_5260: Tensor[(5, 14, 8), float32]) -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(105), int16], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64], Tensor[(5, 14, 8), bool], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64]) {
    %452 = @func_3458() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(336), float64], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) */;
    %453 = cast(meta[relay.Constant][25] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
    %454 = reshape(%453, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), int16] */;
    %455 = @func_5062(%454) /* ty=(Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) */;
    %456 = cast(%var_5184, dtype="uint16") /* ty=Tensor[(5, 14, 8), uint16] */;
    %457 = shape_of(%var_5183, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(%var_5183, dtype="uint16") /* ty=Tensor[(5, 14, 8), uint16] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %460 = subtract(%458, %459) /* ty=Tensor[(5, 14, 8), uint16] */;
    %461 = cast(%460, dtype="float64") /* ty=Tensor[(5, 14, 8), float64] */;
    %462 = tan(%461) /* ty=Tensor[(5, 14, 8), float64] */;
    %463 = cast(%var_5183, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
    %464 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
    %465 = cast(%460, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
    %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %467 = floor_divide(%465, %466) /* ty=Tensor[(5, 14, 8), float32] */;
    %468 = cast(%467, dtype="float64") /* ty=Tensor[(5, 14, 8), float64] */;
    %469 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%462, dtype="float64") /* ty=Tensor[(5, 14, 8), float64] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %472 = divide(%470, %471) /* ty=Tensor[(5, 14, 8), float64] */;
    %473 = cast(%462, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
    %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%472, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %477 = @func_3313() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %478 = cast(%462, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
    %479 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%460, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %482 = cast(%462, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
    %483 = sigmoid(%482) /* ty=Tensor[(5, 14, 8), float32] */;
    %484 = cast(%var_5260, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
    %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
    %486 = cast(%483, dtype="bool") /* ty=Tensor[(5, 14, 8), bool] */;
    %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %488 = @func_3365() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %489 = %452.1;
    %490 = %455.2;
    %491 = greater_equal(%475, %476) /* ty=Tensor[(5, 14, 8), bool] */;
    %492 = %477.0;
    %493 = greater(%480, %481) /* ty=Tensor[(5, 14, 8), bool] */;
    %494 = logical_or(%486, %487) /* ty=Tensor[(5, 14, 8), bool] */;
    %495 = %488.0;
    (%489, %490, meta[relay.Constant][25] /* ty=Tensor[(105), int16] */, %491, %492, %493, %494, %495)
  };
  %496(%var_5268, %var_5269, %var_5270) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(105), int16], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64], Tensor[(5, 14, 8), bool], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64]) */
}

def @func_4302() -> (Tensor[(336), float64],) {
  %499 = fn () -> (Tensor[(336), float64],) {
    %497 = @func_3458() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(336), float64], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) */;
    %498 = %497.2;
    (%498,)
  };
  %499() /* ty=(Tensor[(336), float64],) */
}

def @func_5491(%var_5489: Tensor[(15, 7, 9), int32], %var_5490: Tensor[(15, 7, 9), int32]) -> Tensor[(15, 7, 9), int32] {
  @func_5487(%var_5489, %var_5490) /* ty=Tensor[(15, 7, 9), int32] */
}

def @func_2355(%var_2354: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) {
  %506 = fn (%var_2351: Tensor[(242), float64]) -> (Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) {
    %500 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %501 = cast(%var_2351, dtype="float64") /* ty=Tensor[(242), float64] */;
    %502 = reshape(%501, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
    %503 = @func_714(%502) /* ty=(Tensor[(11, 11, 2), float64],) */;
    %504 = %500.0;
    %505 = %503.0;
    (%504, %505, %var_2351)
  };
  %506(%var_2354) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */
}

def @func_3601() -> (Tensor[(648), bool],) {
  %516 = fn () -> (Tensor[(648), bool],) {
    %507 = @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */;
    %508 = %507.2;
    %509 = cast(%508, dtype="float64") /* ty=Tensor[(648), float64] */;
    %510 = tan(%509) /* ty=Tensor[(648), float64] */;
    %511 = cast(%510, dtype="bool") /* ty=Tensor[(648), bool] */;
    %512 = shape_of(%508, dtype="int32") /* ty=Tensor[(1), int32] */;
    %513 = cast(%508, dtype="bool") /* ty=Tensor[(648), bool] */;
    %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?), bool] */;
    %515 = less_equal(%513, %514) /* ty=Tensor[(648), bool] */;
    (%515,)
  };
  %516() /* ty=(Tensor[(648), bool],) */
}

def @func_5065(%var_5063: Tensor[(15, 7, 1), int16]) -> (Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) {
  @func_5062(%var_5063) /* ty=(Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) */
}

def @func_5868() -> (Tensor[(3, 6, 10), float64],) {
  @func_5866() /* ty=(Tensor[(3, 6, 10), float64],) */
}

def @func_3699() -> Tensor[(8, 15, 11), float64] {
  @func_3697() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_3855() -> (Tensor[(8, 15, 11), float64],) {
  %519 = fn () -> (Tensor[(8, 15, 11), float64],) {
    %517 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
    %518 = %517.0;
    (%518,)
  };
  %519() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_2887(%var_2885: Tensor[(242), float64], %var_2886: Tensor[(330), bool]) -> (Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64], Tensor[(15, 2, 11), bool], Tensor[(330), bool], Tensor[(9, 15, 3), bool], Tensor[(135, 3), float64]) {
  %533 = fn (%var_2854: Tensor[(242), float64], %var_2868: Tensor[(330), bool]) -> (Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64], Tensor[(15, 2, 11), bool], Tensor[(330), bool], Tensor[(9, 15, 3), bool], Tensor[(135, 3), float64]) {
    %520 = cast(%var_2854, dtype="float64") /* ty=Tensor[(242), float64] */;
    %521 = reshape(%520, newshape=[242]) /* ty=Tensor[(242), float64] */;
    %522 = @func_2353(%521) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
    %523 = cast(%var_2868, dtype="bool") /* ty=Tensor[(330), bool] */;
    %524 = reshape(%523, newshape=[15, 2, 11]) /* ty=Tensor[(15, 2, 11), bool] */;
    %525 = @func_1691(%524) /* ty=(Tensor[(15, 2, 11), bool],) */;
    %526 = cast(meta[relay.Constant][26] /* ty=Tensor[(135, 3), float64] */, dtype="float64") /* ty=Tensor[(135, 3), float64] */;
    %527 = reshape(%526, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
    %528 = @func_107(%527) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
    %529 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
    %530 = %522.1;
    %531 = %525.0;
    %532 = %528.0;
    (%529, %530, %var_2854, %531, %var_2868, %532, meta[relay.Constant][26] /* ty=Tensor[(135, 3), float64] */)
  };
  %533(%var_2885, %var_2886) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64], Tensor[(15, 2, 11), bool], Tensor[(330), bool], Tensor[(9, 15, 3), bool], Tensor[(135, 3), float64]) */
}

def @func_4451(%var_4449: Tensor[(1320), float64]) -> (Tensor[(5, 15, 5), uint32], Tensor[(8, 15, 11), bool], Tensor[(1320), float64], Tensor[(5, 15, 5), float64]) {
  @func_4448(%var_4449) /* ty=(Tensor[(5, 15, 5), uint32], Tensor[(8, 15, 11), bool], Tensor[(1320), float64], Tensor[(5, 15, 5), float64]) */
}

def @func_1693(%var_1692: Tensor[(15, 2, 11), bool]) -> (Tensor[(15, 2, 11), bool],) {
  %539 = fn (%var_1682: Tensor[(15, 2, 11), bool]) -> (Tensor[(15, 2, 11), bool],) {
    %534 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 2, 11), bool] */, dtype="bool") /* ty=Tensor[(15, 2, 11), bool] */;
    %535 = shape_of(%var_1682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %536 = cast(%var_1682, dtype="bool") /* ty=Tensor[(15, 2, 11), bool] */;
    %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %538 = logical_or(%536, %537) /* ty=Tensor[(15, 2, 11), bool] */;
    (%538,)
  };
  %539(%var_1692) /* ty=(Tensor[(15, 2, 11), bool],) */
}

def @func_1232(%var_1230: Tensor[(9, 9, 8), float64], %var_1231: Tensor[(9, 9, 8), float64]) -> (Tensor[(9, 9, 8), float64],) {
  @func_1228(%var_1230, %var_1231) /* ty=(Tensor[(9, 9, 8), float64],) */
}

def @func_4639() -> (Tensor[(8, 15, 11), bool],) {
  %542 = fn () -> (Tensor[(8, 15, 11), bool],) {
    %540 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
    %541 = %540.1;
    (%541,)
  };
  %542() /* ty=(Tensor[(8, 15, 11), bool],) */
}

def @func_6564() -> Tensor[(8, 15, 11), float64] {
  @func_6562() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_2276() -> (Tensor[(8, 15, 11), float64],) {
  @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_3945(%var_3943: Tensor[(242), float64], %var_3944: Tensor[(8, 15, 11), float64]) -> (Tensor[(4, 15, 10), int64], Tensor[(242), float64], Tensor[(8, 15, 11), float32], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  @func_3941(%var_3943, %var_3944) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(242), float64], Tensor[(8, 15, 11), float32], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */
}

def @func_3314() -> (Tensor[(8, 15, 11), float64],) {
  %544 = fn () -> (Tensor[(8, 15, 11), float64],) {
    %543 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
    (%543,)
  };
  %544() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_5939() -> Tensor[(8, 15, 11), float32] {
  %545 = @func_4053() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float32]) */;
  %545.1
}

def @func_7802(%var_7801: Tensor[(330, 1), bool]) -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), bool], Tensor[(242, 1), float64], Tensor[(648), float64], Tensor[(378), bool], Tensor[(330, 378), uint16]) {
  %572 = fn (%var_7746: Tensor[(330, 1), bool]) -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), bool], Tensor[(242, 1), float64], Tensor[(648), float64], Tensor[(378), bool], Tensor[(330, 378), uint16]) {
    %546 = @func_3516() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool]) */;
    %547 = cast(%var_7746, dtype="bool") /* ty=Tensor[(330, 1), bool] */;
    %548 = cast(meta[relay.Constant][28] /* ty=Tensor[(242, 1), float64] */, dtype="float64") /* ty=Tensor[(242, 1), float64] */;
    %549 = reshape(%547, newshape=[330]) /* ty=Tensor[(330), bool] */;
    %550 = reshape(%548, newshape=[242]) /* ty=Tensor[(242), float64] */;
    %551 = @func_6620(%549, %550) /* ty=(Tensor[(336), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(648), float64], Tensor[(330), bool], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) */;
    %552 = cast(meta[relay.Constant][29] /* ty=Tensor[(378), uint8] */, dtype="uint8") /* ty=Tensor[(378), uint8] */;
    %553 = reshape(%552, newshape=[378]) /* ty=Tensor[(378), uint8] */;
    %554 = @func_5425(%553) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(378), bool]) */;
    %555 = cast(%var_7746, dtype="float32") /* ty=Tensor[(330, 1), float32] */;
    %556 = asinh(%555) /* ty=Tensor[(330, 1), float32] */;
    %557 = cast(%var_7746, dtype="bool") /* ty=Tensor[(330, 1), bool] */;
    %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(2), int32] */;
    %559 = cast(%556, dtype="bool") /* ty=Tensor[(330, 1), bool] */;
    %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %561 = logical_or(%559, %560) /* ty=Tensor[(330, ?), bool] */;
    %562 = cast(%561, dtype="int32") /* ty=Tensor[(330, ?), int32] */;
    %563 = cast(meta[relay.Constant][29] /* ty=Tensor[(378), uint8] */, dtype="int32") /* ty=Tensor[(378), int32] */;
    %564 = minimum(%562, %563) /* ty=Tensor[(330, 378), int32] */;
    %565 = cast(%564, dtype="uint16") /* ty=Tensor[(330, 378), uint16] */;
    %566 = cast(meta[relay.Constant][29] /* ty=Tensor[(378), uint8] */, dtype="uint16") /* ty=Tensor[(378), uint16] */;
    %567 = %546.1;
    %568 = %551.2;
    %569 = @func_3729() /* ty=Tensor[(648), float64] */;
    %570 = %554.2;
    %571 = logical_xor(%565, %566) /* ty=Tensor[(330, 378), uint16] */;
    (%567, %568, meta[relay.Constant][28] /* ty=Tensor[(242, 1), float64] */, %569, %570, %571)
  };
  %572(%var_7801) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), bool], Tensor[(242, 1), float64], Tensor[(648), float64], Tensor[(378), bool], Tensor[(330, 378), uint16]) */
}

def @func_2952(%var_2951: Tensor[(540), bool]) -> (Tensor[(8, 15, 11), float64], Tensor[(3, 15, 12), bool], Tensor[(540), bool], Tensor[(11, 22), float64], Tensor[(11, 11, 2), float64]) {
  %590 = fn (%var_2903: Tensor[(540), bool]) -> (Tensor[(8, 15, 11), float64], Tensor[(3, 15, 12), bool], Tensor[(540), bool], Tensor[(11, 22), float64], Tensor[(11, 11, 2), float64]) {
    %573 = cast(%var_2903, dtype="bool") /* ty=Tensor[(540), bool] */;
    %574 = cast(%var_2903, dtype="bool") /* ty=Tensor[(540), bool] */;
    %575 = cast(%var_2903, dtype="bool") /* ty=Tensor[(540), bool] */;
    %576 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 22), float64] */, dtype="float64") /* ty=Tensor[(11, 22), float64] */;
    %577 = reshape(%573, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), bool] */;
    %578 = reshape(%574, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), bool] */;
    %579 = reshape(%575, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), bool] */;
    %580 = reshape(%576, newshape=[242]) /* ty=Tensor[(242), float64] */;
    %581 = @func_2194(%577, %578, %579, %580) /* ty=(Tensor[(3, 15, 12), bool], Tensor[(242), float64], Tensor[(242), float64]) */;
    %582 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 22), float64] */, dtype="float64") /* ty=Tensor[(11, 22), float64] */;
    %583 = sin(%582) /* ty=Tensor[(11, 22), float64] */;
    %584 = cast(%583, dtype="float64") /* ty=Tensor[(11, 22), float64] */;
    %585 = reshape(%584, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
    %586 = @func_714(%585) /* ty=(Tensor[(11, 11, 2), float64],) */;
    %587 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
    %588 = %581.0;
    %589 = %586.0;
    (%587, %588, %var_2903, %583, %589)
  };
  %590(%var_2951) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(3, 15, 12), bool], Tensor[(540), bool], Tensor[(11, 22), float64], Tensor[(11, 11, 2), float64]) */
}

def @func_6002() -> (Tensor[(14, 15, 16), int8],) {
  @func_6000() /* ty=(Tensor[(14, 15, 16), int8],) */
}

def @func_427(%var_372: Tensor[(10, 4, 15), float64], %var_373: Tensor[(10, 4, 15), float64], %var_401: Tensor[(1, 405), float64]) -> (Tensor[(10, 4, 15), float32], Tensor[(9, 15, 3), bool], Tensor[(1, 405), float64], Tensor[(9, 15, 3), bool]) {
  %591 = cast(%var_373, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %592 = shape_of(%var_372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%var_372, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %595 = power(%593, %594) /* ty=Tensor[(10, 4, 15), float64] */;
  %596 = cast(%var_373, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %600 = cast(%var_401, dtype="float64") /* ty=Tensor[(1, 405), float64] */;
  %601 = reshape(%600, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
  %602 = @func_107(%601) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
  %603 = %602.0;
  %604 = cast(%603, dtype="float64") /* ty=Tensor[(9, 15, 3), float64] */;
  %605 = reshape(%604, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
  %606 = @func_107(%605) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
  %607 = mod(%598, %599) /* ty=Tensor[(10, 4, 15), float32] */;
  %608 = %606.0;
  (%607, %603, %var_401, %608)
}

def @func_4704(%var_4702: Tensor[(9, 9, 8), float64]) -> (Tensor[(9, 9, 8), float64], Tensor[(8, 15, 11), float64]) {
  @func_4701(%var_4702) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(8, 15, 11), float64]) */
}

def @func_7470() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float32]) {
  %609 = @func_6450() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %610 = @func_6225() /* ty=(Tensor[(8, 15, 11), float32],) */;
  %611 = %609.0;
  %612 = %610.0;
  (%611, %612)
}

def @func_6562() -> Tensor[(8, 15, 11), float64] {
  %613 = @func_3811() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %613.0
}

def @func_6736(%var_6732: Tensor[(10, 15, 1), float32], %var_6733: Tensor[(22, 11), float64], %var_6734: Tensor[(12, 110), float64], %var_6735: Tensor[(105), int16]) -> (Tensor[(10, 15, 8), float32], Tensor[(22, 11), float64], Tensor[(10, 15, 242), int8], Tensor[(8, 15, 11), float32], Tensor[(12, 110), float64], Tensor[(10, 15, 242), bool], Tensor[(8, 15, 11), float64], Tensor[(10, 15, 242), float64], Tensor[(8, 15, 11), float64], Tensor[(105), int16]) {
  @func_6730(%var_6732, %var_6733, %var_6734, %var_6735) /* ty=(Tensor[(10, 15, 8), float32], Tensor[(22, 11), float64], Tensor[(10, 15, 242), int8], Tensor[(8, 15, 11), float32], Tensor[(12, 110), float64], Tensor[(10, 15, 242), bool], Tensor[(8, 15, 11), float64], Tensor[(10, 15, 242), float64], Tensor[(8, 15, 11), float64], Tensor[(105), int16]) */
}

def @func_6068(%var_6043: Tensor[(648), float64], %var_6057: Tensor[(330), bool]) -> (Tensor[(8, 15, 11), bool], Tensor[(105), int16], Tensor[(648), bool], Tensor[(8, 15, 11), float32], Tensor[(15, 7, 1), float32], Tensor[(15, 2, 11), bool], Tensor[(330), bool]) {
  %614 = @func_4638() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %615 = @func_3729() /* ty=Tensor[(648), float64] */;
  %616 = cast(%var_6043, dtype="bool") /* ty=Tensor[(648), bool] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(1), int32] */;
  %618 = cast(%615, dtype="bool") /* ty=Tensor[(648), bool] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?), bool] */;
  %620 = cast(meta[relay.Constant][31] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %621 = reshape(%620, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), int16] */;
  %622 = @func_5062(%621) /* ty=(Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) */;
  %623 = %622.2;
  %624 = cast(%623, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %625 = cast(meta[relay.Constant][31] /* ty=Tensor[(105), int16] */, dtype="int16") /* ty=Tensor[(105), int16] */;
  %626 = reshape(%625, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), int16] */;
  %627 = @func_5062(%626) /* ty=(Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) */;
  %628 = cast(%var_6057, dtype="bool") /* ty=Tensor[(330), bool] */;
  %629 = reshape(%628, newshape=[15, 2, 11]) /* ty=Tensor[(15, 2, 11), bool] */;
  %630 = @func_1691(%629) /* ty=(Tensor[(15, 2, 11), bool],) */;
  %631 = %614.0;
  %632 = logical_or(%618, %619) /* ty=Tensor[(648), bool] */;
  %633 = erf(%624) /* ty=Tensor[(8, 15, 11), float32] */;
  %634 = %627.1;
  %635 = %630.0;
  (%631, meta[relay.Constant][31] /* ty=Tensor[(105), int16] */, %632, %633, %634, %635, %var_6057)
}

def @func_2762(%var_2759: Tensor[(14, 1, 12), int64], %var_2760: Tensor[(14, 10, 12), int64], %var_2761: Tensor[(11, 11, 2), float64]) -> (Tensor[(14, 10, 12), bool], Tensor[(11, 22), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), int32], Tensor[(336), float64], Tensor[(11, 11, 2), int8], Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float32], Tensor[(14, 10, 12), float64]) {
  %674 = fn (%var_2675: Tensor[(14, 1, 12), int64], %var_2676: Tensor[(14, 10, 12), int64], %var_2718: Tensor[(11, 11, 2), float64]) -> (Tensor[(14, 10, 12), bool], Tensor[(11, 22), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), int32], Tensor[(336), float64], Tensor[(11, 11, 2), int8], Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float32], Tensor[(14, 10, 12), float64]) {
    %636 = cast(%var_2675, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
    %637 = cast(%var_2676, dtype="bool") /* ty=Tensor[(14, 10, 12), bool] */;
    %638 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
    %639 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 22), float64] */, dtype="float64") /* ty=Tensor[(11, 22), float64] */;
    %640 = reshape(%639, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
    %641 = @func_714(%640) /* ty=(Tensor[(11, 11, 2), float64],) */;
    %642 = %641.0;
    %643 = cast(%var_2718, dtype="float32") /* ty=Tensor[(11, 11, 2), float32] */;
    %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(%642, dtype="float32") /* ty=Tensor[(11, 11, 2), float32] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %647 = mod(%645, %646) /* ty=Tensor[(11, 11, 2), float32] */;
    %648 = cast(%642, dtype="int32") /* ty=Tensor[(11, 11, 2), int32] */;
    %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%647, dtype="int32") /* ty=Tensor[(11, 11, 2), int32] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %652 = multiply(%650, %651) /* ty=Tensor[(11, 11, 2), int32] */;
    %653 = cast(%652, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
    %654 = reshape(%653, newshape=[242]) /* ty=Tensor[(242), float64] */;
    %655 = @func_2403(%654) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) */;
    %656 = cast(%647, dtype="int8") /* ty=Tensor[(11, 11, 2), int8] */;
    %657 = shape_of(%var_2718, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%var_2718, dtype="int8") /* ty=Tensor[(11, 11, 2), int8] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %660 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %661 = cast(%var_2676, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
    %662 = tan(%661) /* ty=Tensor[(14, 10, 12), float64] */;
    %663 = cast(%662, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
    %664 = cast(%662, dtype="float32") /* ty=Tensor[(14, 10, 12), float32] */;
    %665 = cast(%662, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
    %666 = less_equal(%636, %637) /* ty=Tensor[(14, 10, 12), bool] */;
    %667 = %638.0;
    %668 = %655.3;
    %669 = bitwise_or(%658, %659) /* ty=Tensor[(11, 11, 2), int8] */;
    %670 = %660.0;
    %671 = log(%663) /* ty=Tensor[(14, 10, 12), float64] */;
    %672 = cosh(%664) /* ty=Tensor[(14, 10, 12), float32] */;
    %673 = atan(%665) /* ty=Tensor[(14, 10, 12), float64] */;
    (%666, meta[relay.Constant][32] /* ty=Tensor[(11, 22), float64] */, %667, %652, %668, %669, %670, %671, %672, %673)
  };
  %674(%var_2759, %var_2760, %var_2761) /* ty=(Tensor[(14, 10, 12), bool], Tensor[(11, 22), float64], Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), int32], Tensor[(336), float64], Tensor[(11, 11, 2), int8], Tensor[(8, 15, 11), float64], Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float32], Tensor[(14, 10, 12), float64]) */
}

def @func_6104() -> Tensor[(8, 15, 11), float32] {
  @func_5939() /* ty=Tensor[(8, 15, 11), float32] */
}

def @func_4448(%var_4423: Tensor[(1320), float64]) -> (Tensor[(5, 15, 5), uint32], Tensor[(8, 15, 11), bool], Tensor[(1320), float64], Tensor[(5, 15, 5), float64]) {
  %675 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 5), uint32] */;
  %676 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 5), uint32] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %679 = cast(%var_4423, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %680 = reshape(%679, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %681 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %682 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 15, 5), uint32] */, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %685 = bitwise_and(%677, %678) /* ty=Tensor[(5, 15, 5), uint32] */;
  %686 = @func_2526(%680) /* ty=Tensor[(8, 15, 11), bool] */;
  %687 = mod(%683, %684) /* ty=Tensor[(5, 15, 5), float64] */;
  (%685, %686, %var_4423, %687)
}

def @func_5351() -> (Tensor[(8, 15, 11), bool],) {
  %688 = @func_3539() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %689 = %688.0;
  (%689,)
}

def @func_6227() -> (Tensor[(8, 15, 11), float32],) {
  @func_6225() /* ty=(Tensor[(8, 15, 11), float32],) */
}

def @func_5941() -> Tensor[(8, 15, 11), float32] {
  @func_5939() /* ty=Tensor[(8, 15, 11), float32] */
}

def @func_4783() -> Tensor[(8, 15, 11), float64] {
  @func_4781() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_5970() -> (Tensor[(6, 2, 3), float32], Tensor[(6, 2, 3), float32], Tensor[(8, 15, 11), float64]) {
  %696 = fn () -> (Tensor[(6, 2, 3), float32], Tensor[(6, 2, 3), float32], Tensor[(8, 15, 11), float64]) {
    %690 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 3), float32] */;
    %691 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 3), float32] */;
    %692 = @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %693 = atan(%690) /* ty=Tensor[(6, 2, 3), float32] */;
    %694 = log10(%691) /* ty=Tensor[(6, 2, 3), float32] */;
    %695 = %692.0;
    (%693, %694, %695)
  };
  %696() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(6, 2, 3), float32], Tensor[(8, 15, 11), float64]) */
}

def @func_3730() -> Tensor[(648), float64] {
  %700 = fn () -> Tensor[(648), float64] {
    %697 = @func_3600() /* ty=(Tensor[(648), bool],) */;
    %698 = %697.0;
    %699 = cast(%698, dtype="float64") /* ty=Tensor[(648), float64] */;
    acosh(%699) /* ty=Tensor[(648), float64] */
  };
  %700() /* ty=Tensor[(648), float64] */
}

def @func_3460() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(336), float64], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) {
  @func_3458() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(336), float64], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) */
}

def @func_6072(%var_6070: Tensor[(648), float64], %var_6071: Tensor[(330), bool]) -> (Tensor[(8, 15, 11), bool], Tensor[(105), int16], Tensor[(648), bool], Tensor[(8, 15, 11), float32], Tensor[(15, 7, 1), float32], Tensor[(15, 2, 11), bool], Tensor[(330), bool]) {
  @func_6068(%var_6070, %var_6071) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(105), int16], Tensor[(648), bool], Tensor[(8, 15, 11), float32], Tensor[(15, 7, 1), float32], Tensor[(15, 2, 11), bool], Tensor[(330), bool]) */
}

def @func_7819() -> Tensor[(8, 15, 11), bool] {
  @func_7817() /* ty=Tensor[(8, 15, 11), bool] */
}

def @func_2966() -> (Tensor[(8, 15, 11), float64],) {
  @func_2964() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_6144() -> (Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), bool], Tensor[(405), float64], Tensor[(8, 15, 11), float64], Tensor[(42, 1), float32]) {
  %701 = @func_3539() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %702 = cast(meta[relay.Constant][36] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %703 = reshape(%702, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
  %704 = @func_107(%703) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
  %705 = cast(meta[relay.Constant][37] /* ty=Tensor[(42, 1), float32] */, dtype="float32") /* ty=Tensor[(42, 1), float32] */;
  %706 = cast(meta[relay.Constant][37] /* ty=Tensor[(42, 1), float32] */, dtype="float32") /* ty=Tensor[(42, 1), float32] */;
  %707 = reshape(%705, newshape=[7, 6]) /* ty=Tensor[(7, 6), float32] */;
  %708 = reshape(%706, newshape=[7, 6]) /* ty=Tensor[(7, 6), float32] */;
  %709 = @func_2324(%707, %708) /* ty=(Tensor[(7, 6), float32], Tensor[(8, 15, 11), float64]) */;
  %710 = %701.0;
  %711 = %704.0;
  %712 = %709.1;
  (%710, %711, meta[relay.Constant][36] /* ty=Tensor[(405), float64] */, %712, meta[relay.Constant][37] /* ty=Tensor[(42, 1), float32] */)
}

def @func_109(%var_108: Tensor[(9, 15, 3), float64]) -> (Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) {
  %727 = fn (%var_85: Tensor[(9, 15, 3), float64]) -> (Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) {
    %713 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 3), float64] */;
    %714 = tan(%713) /* ty=Tensor[(9, 15, 3), float64] */;
    %715 = cast(%714, dtype="float64") /* ty=Tensor[(9, 15, 3), float64] */;
    %716 = sinh(%715) /* ty=Tensor[(9, 15, 3), float64] */;
    %717 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 15, 3), float64] */, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
    %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
    %719 = cast(%716, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %721 = cast(%var_85, dtype="uint8") /* ty=Tensor[(9, 15, 3), uint8] */;
    %722 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(%716, dtype="uint8") /* ty=Tensor[(9, 15, 3), uint8] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %725 = greater_equal(%719, %720) /* ty=Tensor[(9, 15, 3), bool] */;
    %726 = minimum(%723, %724) /* ty=Tensor[(9, 15, 3), uint8] */;
    (%725, %726)
  };
  %727(%var_108) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */
}

def @func_5353() -> (Tensor[(8, 15, 11), bool],) {
  @func_5351() /* ty=(Tensor[(8, 15, 11), bool],) */
}

def @func_2274() -> (Tensor[(8, 15, 11), float64],) {
  %728 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
  (%728,)
}

def @func_3458() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(336), float64], Tensor[(242), float64], Tensor[(8, 15, 11), float64]) {
  %729 = @func_3313() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %730 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %731 = cast(meta[relay.Constant][39] /* ty=Tensor[(242), float64] */, dtype="float64") /* ty=Tensor[(242), float64] */;
  %732 = reshape(%731, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %733 = @func_2403(%732) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) */;
  %734 = cast(meta[relay.Constant][39] /* ty=Tensor[(242), float64] */, dtype="float64") /* ty=Tensor[(242), float64] */;
  %735 = reshape(%734, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %736 = @func_2403(%735) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(11, 11, 2), float64], Tensor[(9, 15, 3), uint8], Tensor[(336), float64], Tensor[(242), float32]) */;
  %737 = %729.0;
  %738 = %730.0;
  %739 = %733.3;
  %740 = %736.0;
  (%737, %738, %739, meta[relay.Constant][39] /* ty=Tensor[(242), float64] */, %740)
}

def @func_4701(%var_4664: Tensor[(9, 9, 8), float64]) -> (Tensor[(9, 9, 8), float64], Tensor[(8, 15, 11), float64]) {
  %741 = @func_2989() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */;
  %742 = %741.1;
  %743 = cast(%var_4664, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %747 = mod(%745, %746) /* ty=Tensor[(9, 9, 8), float32] */;
  %748 = cast(%var_4664, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %752 = floor_divide(%750, %751) /* ty=Tensor[(9, 9, 8), float64] */;
  %753 = @func_4627() /* ty=Tensor[(8, 15, 11), float64] */;
  (%752, %753)
}

def @func_6620(%var_6595: Tensor[(330), bool], %var_6598: Tensor[(242), float64]) -> (Tensor[(336), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(648), float64], Tensor[(330), bool], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) {
  %754 = @func_4301() /* ty=(Tensor[(336), float64],) */;
  %755 = @func_3365() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %756 = cast(meta[relay.Constant][40] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %757 = cast(%var_6595, dtype="bool") /* ty=Tensor[(330), bool] */;
  %758 = reshape(%756, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %759 = reshape(%757, newshape=[330]) /* ty=Tensor[(330), bool] */;
  %760 = @func_6068(%758, %759) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(105), int16], Tensor[(648), bool], Tensor[(8, 15, 11), float32], Tensor[(15, 7, 1), float32], Tensor[(15, 2, 11), bool], Tensor[(330), bool]) */;
  %761 = cast(%var_6598, dtype="float64") /* ty=Tensor[(242), float64] */;
  %762 = reshape(%761, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %763 = @func_4331(%762) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) */;
  %764 = %754.0;
  %765 = %755.0;
  %766 = %760.0;
  %767 = %763.1;
  (%764, %765, %766, meta[relay.Constant][40] /* ty=Tensor[(648), float64] */, %var_6595, %767, %var_6598)
}

def @func_7226() -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float64], Tensor[(280, 2), float64]) {
  %768 = @func_5351() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %769 = cast(meta[relay.Constant][41] /* ty=Tensor[(280, 2), uint16] */, dtype="uint16") /* ty=Tensor[(280, 2), uint16] */;
  %770 = cast(meta[relay.Constant][41] /* ty=Tensor[(280, 2), uint16] */, dtype="uint16") /* ty=Tensor[(280, 2), uint16] */;
  %771 = cast(meta[relay.Constant][41] /* ty=Tensor[(280, 2), uint16] */, dtype="float32") /* ty=Tensor[(280, 2), float32] */;
  %772 = reshape(%769, newshape=[5, 14, 8]) /* ty=Tensor[(5, 14, 8), uint16] */;
  %773 = reshape(%770, newshape=[5, 14, 8]) /* ty=Tensor[(5, 14, 8), uint16] */;
  %774 = reshape(%771, newshape=[5, 14, 8]) /* ty=Tensor[(5, 14, 8), float32] */;
  %775 = @func_5267(%772, %773, %774) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(105), int16], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64], Tensor[(5, 14, 8), bool], Tensor[(5, 14, 8), bool], Tensor[(8, 15, 11), float64]) */;
  %776 = cast(meta[relay.Constant][41] /* ty=Tensor[(280, 2), uint16] */, dtype="float64") /* ty=Tensor[(280, 2), float64] */;
  %777 = %768.0;
  %778 = %775.0;
  %779 = cosh(%776) /* ty=Tensor[(280, 2), float64] */;
  (%777, %778, %779)
}

def @func_4079() -> Tensor[(405), float64] {
  %781 = fn () -> Tensor[(405), float64] {
    %780 = @func_3082() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */;
    %780.3
  };
  %781() /* ty=Tensor[(405), float64] */
}

def @func_4054() -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float32]) {
  %790 = fn () -> (Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float32]) {
    %782 = @func_2162() /* ty=Tensor[(8, 15, 11), float64] */;
    %783 = cast(%782, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    %784 = log10(%783) /* ty=Tensor[(8, 15, 11), float64] */;
    %785 = cast(%784, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    %786 = reshape(%785, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
    %787 = cast(%784, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
    %788 = @func_2526(%786) /* ty=Tensor[(8, 15, 11), bool] */;
    %789 = acos(%787) /* ty=Tensor[(8, 15, 11), float32] */;
    (%788, %789)
  };
  %790() /* ty=(Tensor[(8, 15, 11), bool], Tensor[(8, 15, 11), float32]) */
}

def @func_4992() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(540), bool]) {
  %796 = fn () -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(540), bool]) {
    %791 = cast(meta[relay.Constant][42] /* ty=Tensor[(540), bool] */, dtype="bool") /* ty=Tensor[(540), bool] */;
    %792 = reshape(%791, newshape=[540]) /* ty=Tensor[(540), bool] */;
    %793 = @func_2950(%792) /* ty=(Tensor[(8, 15, 11), float64], Tensor[(3, 15, 12), bool], Tensor[(540), bool], Tensor[(11, 22), float64], Tensor[(11, 11, 2), float64]) */;
    %794 = @func_3697() /* ty=Tensor[(8, 15, 11), float64] */;
    %795 = %793.0;
    (%794, %795, meta[relay.Constant][42] /* ty=Tensor[(540), bool] */)
  };
  %796() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(540), bool]) */
}

def @func_4137(%var_4136: Tensor[(12, 9, 7), float32]) -> (Tensor[(12, 9, 7), float32],) {
  %799 = fn (%var_4128: Tensor[(12, 9, 7), float32]) -> (Tensor[(12, 9, 7), float32],) {
    %797 = cast(%var_4128, dtype="float32") /* ty=Tensor[(12, 9, 7), float32] */;
    %798 = asin(%797) /* ty=Tensor[(12, 9, 7), float32] */;
    (%798,)
  };
  %799(%var_4136) /* ty=(Tensor[(12, 9, 7), float32],) */
}

def @func_2327(%var_2325: Tensor[(7, 6), float32], %var_2326: Tensor[(7, 6), float32]) -> (Tensor[(7, 6), float32], Tensor[(8, 15, 11), float64]) {
  %807 = fn (%var_2296: Tensor[(7, 6), float32], %var_2297: Tensor[(7, 6), float32]) -> (Tensor[(7, 6), float32], Tensor[(8, 15, 11), float64]) {
    %800 = cast(%var_2297, dtype="float32") /* ty=Tensor[(7, 6), float32] */;
    %801 = shape_of(%var_2296, dtype="int32") /* ty=Tensor[(2), int32] */;
    %802 = cast(%var_2296, dtype="float32") /* ty=Tensor[(7, 6), float32] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %804 = @func_2290() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
    %805 = floor_mod(%802, %803) /* ty=Tensor[(7, 6), float32] */;
    %806 = %804.1;
    (%805, %806)
  };
  %807(%var_2325, %var_2326) /* ty=(Tensor[(7, 6), float32], Tensor[(8, 15, 11), float64]) */
}

def @func_6624(%var_6622: Tensor[(330), bool], %var_6623: Tensor[(242), float64]) -> (Tensor[(336), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(648), float64], Tensor[(330), bool], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) {
  @func_6620(%var_6622, %var_6623) /* ty=(Tensor[(336), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(648), float64], Tensor[(330), bool], Tensor[(8, 15, 11), float64], Tensor[(242), float64]) */
}

def @func_6773() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  %808 = @func_2804() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %809 = @func_4991() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(540), bool]) */;
  %810 = %808.0;
  %811 = %809.0;
  (%810, %811)
}

def @func_5793(%var_5791: Tensor[(648), float64]) -> (Tensor[(8, 15, 11), bool], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) {
  @func_5790(%var_5791) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) */
}

def @func_7039() -> (Tensor[(12, 3, 16), int8], Tensor[(8, 15, 11), float32]) {
  %819 = fn () -> (Tensor[(12, 3, 16), int8], Tensor[(8, 15, 11), float32]) {
    %812 = cast(7.63856f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %813 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 3, 16), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
    %814 = floor_mod(%812, %813) /* ty=Tensor[(12, 3, 16), float32] */;
    %815 = cast(7.63856f /* ty=float32 */, dtype="int8") /* ty=int8 */;
    %816 = cast(%814, dtype="int8") /* ty=Tensor[(12, 3, 16), int8] */;
    %817 = right_shift(%815, %816) /* ty=Tensor[(12, 3, 16), int8] */;
    %818 = @func_6104() /* ty=Tensor[(8, 15, 11), float32] */;
    (%817, %818)
  };
  %819() /* ty=(Tensor[(12, 3, 16), int8], Tensor[(8, 15, 11), float32]) */
}

def @func_7429() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) {
  @func_7427() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */
}

def @func_5790(%var_5773: Tensor[(648), float64]) -> (Tensor[(8, 15, 11), bool], Tensor[(9, 9, 8), float64], Tensor[(648), float64]) {
  %820 = @func_3539() /* ty=(Tensor[(8, 15, 11), bool],) */;
  %821 = cast(%var_5773, dtype="float64") /* ty=Tensor[(648), float64] */;
  %822 = reshape(%821, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %823 = @func_4701(%822) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(8, 15, 11), float64]) */;
  %824 = %820.0;
  %825 = %823.0;
  (%824, %825, %var_5773)
}

def @func_3048() -> (Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) {
  %834 = fn () -> (Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) {
    %826 = @func_2834() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %827 = cast(meta[relay.Constant][44] /* ty=Tensor[(242), float64] */, dtype="float64") /* ty=Tensor[(242), float64] */;
    %828 = reshape(%827, newshape=[242]) /* ty=Tensor[(242), float64] */;
    %829 = @func_1141(%828) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
    %830 = %829.1;
    %831 = cast(%830, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
    %832 = %826.0;
    %833 = sigmoid(%831) /* ty=Tensor[(11, 11, 2), float64] */;
    (%832, meta[relay.Constant][44] /* ty=Tensor[(242), float64] */, %833)
  };
  %834() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(242), float64], Tensor[(11, 11, 2), float64]) */
}

def @func_714(%var_702: Tensor[(11, 11, 2), float64]) -> (Tensor[(11, 11, 2), float64],) {
  %835 = cast(%var_702, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %836 = sqrt(%835) /* ty=Tensor[(11, 11, 2), float64] */;
  %837 = cast(%836, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %838 = atanh(%837) /* ty=Tensor[(11, 11, 2), float64] */;
  (%838,)
}

def @func_6313(%var_6311: Tensor[(242), float64]) -> (Tensor[(3, 6, 10), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) {
  @func_6310(%var_6311) /* ty=(Tensor[(3, 6, 10), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */
}

def @func_7472() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float32]) {
  @func_7470() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float32]) */
}

def @func_3083() -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) {
  %848 = fn () -> (Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) {
    %839 = @func_2274() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %840 = %839.0;
    %841 = cast(%840, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    %842 = reshape(%841, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
    %843 = cast(meta[relay.Constant][45] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
    %844 = reshape(%843, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), float64] */;
    %845 = @func_107(%844) /* ty=(Tensor[(9, 15, 3), bool], Tensor[(9, 15, 3), uint8]) */;
    %846 = @func_2526(%842) /* ty=Tensor[(8, 15, 11), bool] */;
    %847 = %845.1;
    (%840, %846, %847, meta[relay.Constant][45] /* ty=Tensor[(405), float64] */)
  };
  %848() /* ty=(Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), bool], Tensor[(9, 15, 3), uint8], Tensor[(405), float64]) */
}

def @func_1141(%var_1138: Tensor[(242), float64]) -> (Tensor[(4, 15, 10), int64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) {
  %849 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 10), float64] */;
  %850 = log2(%849) /* ty=Tensor[(4, 15, 10), float64] */;
  %851 = cast(%850, dtype="float64") /* ty=Tensor[(4, 15, 10), float64] */;
  %852 = acosh(%851) /* ty=Tensor[(4, 15, 10), float64] */;
  %853 = cast(%850, dtype="int64") /* ty=Tensor[(4, 15, 10), int64] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="int64") /* ty=Tensor[(4, 15, 10), int64] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %857 = cast(%var_1138, dtype="float64") /* ty=Tensor[(242), float64] */;
  %858 = reshape(%857, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), float64] */;
  %859 = @func_714(%858) /* ty=(Tensor[(11, 11, 2), float64],) */;
  %860 = minimum(%855, %856) /* ty=Tensor[(4, 15, 10), int64] */;
  %861 = %859.0;
  (%860, %861, %var_1138)
}

def @func_6730(%var_6658: Tensor[(10, 15, 1), float32], %var_6667: Tensor[(22, 11), float64], %var_6686: Tensor[(12, 110), float64], %var_6727: Tensor[(105), int16]) -> (Tensor[(10, 15, 8), float32], Tensor[(22, 11), float64], Tensor[(10, 15, 242), int8], Tensor[(8, 15, 11), float32], Tensor[(12, 110), float64], Tensor[(10, 15, 242), bool], Tensor[(8, 15, 11), float64], Tensor[(10, 15, 242), float64], Tensor[(8, 15, 11), float64], Tensor[(105), int16]) {
  %862 = cast(%var_6658, dtype="float32") /* ty=Tensor[(10, 15, 1), float32] */;
  %863 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 15, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 15, 8), float32] */;
  %864 = cast(%var_6667, dtype="float64") /* ty=Tensor[(22, 11), float64] */;
  %865 = reshape(%864, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %866 = @func_6310(%865) /* ty=(Tensor[(3, 6, 10), float64], Tensor[(11, 11, 2), float64], Tensor[(242), float64]) */;
  %867 = %866.2;
  %868 = cast(%var_6658, dtype="int64") /* ty=Tensor[(10, 15, 1), int64] */;
  %869 = cast(%867, dtype="int64") /* ty=Tensor[(242), int64] */;
  %870 = add(%868, %869) /* ty=Tensor[(10, 15, 242), int64] */;
  %871 = cast(%870, dtype="int8") /* ty=Tensor[(10, 15, 242), int8] */;
  %872 = cast(%var_6658, dtype="int8") /* ty=Tensor[(10, 15, 1), int8] */;
  %873 = cast(%867, dtype="float64") /* ty=Tensor[(242), float64] */;
  %874 = cast(%var_6686, dtype="float64") /* ty=Tensor[(12, 110), float64] */;
  %875 = reshape(%873, newshape=[242]) /* ty=Tensor[(242), float64] */;
  %876 = reshape(%874, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %877 = @func_3941(%875, %876) /* ty=(Tensor[(4, 15, 10), int64], Tensor[(242), float64], Tensor[(8, 15, 11), float32], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64], Tensor[(8, 15, 11), float64]) */;
  %878 = cast(%867, dtype="bool") /* ty=Tensor[(242), bool] */;
  %879 = cast(%var_6658, dtype="bool") /* ty=Tensor[(10, 15, 1), bool] */;
  %880 = @func_3811() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %881 = cast(%870, dtype="float64") /* ty=Tensor[(10, 15, 242), float64] */;
  %882 = cast(%867, dtype="float64") /* ty=Tensor[(242), float64] */;
  %883 = cast(%var_6727, dtype="int16") /* ty=Tensor[(105), int16] */;
  %884 = reshape(%883, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), int16] */;
  %885 = @func_5062(%884) /* ty=(Tensor[(15, 7, 4), int16], Tensor[(15, 7, 1), float32], Tensor[(8, 15, 11), float64]) */;
  %886 = floor_divide(%862, %863) /* ty=Tensor[(10, 15, 8), float32] */;
  %887 = bitwise_and(%871, %872) /* ty=Tensor[(10, 15, 242), int8] */;
  %888 = %877.2;
  %889 = less_equal(%878, %879) /* ty=Tensor[(10, 15, 242), bool] */;
  %890 = %880.0;
  %891 = power(%881, %882) /* ty=Tensor[(10, 15, 242), float64] */;
  %892 = %885.2;
  (%886, %var_6667, %887, %888, %var_6686, %889, %890, %891, %892, %var_6727)
}

def @func_7481() -> (Tensor[(8, 15, 11), bool],) {
  @func_7479() /* ty=(Tensor[(8, 15, 11), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen286/build/output.py:2379: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen286/build/output.py", line 2384, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(900) tvmgen_default_fused_cast_cast_reshape_not_equal_kernel0(signed char* __restrict__ T_not_equal, uint* __restrict__ placeholder, uint* __restrict__ placeholder1) {
  T_not_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) != ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

