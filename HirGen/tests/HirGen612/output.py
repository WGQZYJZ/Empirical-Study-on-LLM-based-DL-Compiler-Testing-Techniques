import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_85 = relay.var("var_85", dtype = "int16", shape = (1, 2, 11))#candidate|85|(1, 2, 11)|var|int16
var_86 = relay.var("var_86", dtype = "int16", shape = (14, 2, 11))#candidate|86|(14, 2, 11)|var|int16
bop_87 = relay.not_equal(var_85.astype('bool'), var_86.astype('bool')) # shape=(14, 2, 11)
bop_90 = relay.power(var_86.astype('float64'), var_85.astype('float64')) # shape=(14, 2, 11)
output = relay.Tuple([bop_87,bop_90,])
output2 = relay.Tuple([bop_87,bop_90,])
func_102 = relay.Function([var_85,var_86,], output)
mod['func_102'] = func_102
mod = relay.transform.InferType()(mod)
mutated_mod['func_102'] = func_102
mutated_mod = relay.transform.InferType()(mutated_mod)
func_102_call = mutated_mod.get_global_var('func_102')
var_104 = relay.var("var_104", dtype = "int16", shape = (1, 2, 11))#candidate|104|(1, 2, 11)|var|int16
var_105 = relay.var("var_105", dtype = "int16", shape = (14, 2, 11))#candidate|105|(14, 2, 11)|var|int16
call_103 = func_102_call(var_104,var_105,)
output = call_103
func_106 = relay.Function([var_104,var_105,], output)
mutated_mod['func_106'] = func_106
mutated_mod = relay.transform.InferType()(mutated_mod)
var_196 = relay.var("var_196", dtype = "float32", shape = ())#candidate|196|()|var|float32
const_197 = relay.const([[[5.875989,0.942400,-8.753950,-5.433513,4.136456,-1.572229,-1.829794,-3.487593,-6.605636,4.349512,3.304334,-9.276941,7.183027]],[[-5.548130,5.551542,3.453648,-2.998963,9.554684,-5.808614,8.483109,-7.217696,7.427869,9.718749,-9.646368,0.483399,-4.673044]],[[4.546952,-3.448941,1.414707,-7.985953,-7.329648,3.517820,-2.029723,-7.297221,-4.172765,-1.427067,8.345280,7.793272,7.415768]],[[-6.354109,6.829548,-2.918930,-8.119357,5.870932,5.991374,-1.827450,7.575914,-6.777519,7.628533,-1.456518,1.817676,-1.713140]],[[-2.575774,2.442499,6.347901,0.845839,-1.203612,-7.102730,-9.816214,-0.017115,9.295890,-9.431090,-9.107988,-1.516890,1.345326]],[[0.945678,4.240665,6.413391,4.581322,8.464173,-1.195272,-4.290768,-7.564113,8.533472,-8.663909,7.038311,0.001781,4.238413]],[[-3.570058,1.795574,-7.189105,-7.025254,-2.270313,-6.779244,-9.520796,8.171898,-6.766637,-8.609649,-4.013876,5.172440,6.542580]],[[-3.014771,-9.285963,9.333303,1.110375,-4.095693,0.082383,3.652201,-6.572472,-0.025210,6.518771,-2.672027,8.559389,1.338220]],[[-8.117767,-0.770103,2.724654,-9.061462,-8.070922,-6.717036,-5.388460,-5.875676,-7.825566,-4.221290,5.606880,7.781169,-1.401070]],[[-6.702204,-7.337182,3.860934,-2.769318,1.721852,-3.620706,-6.366477,0.703242,-4.583406,9.558313,5.420776,-5.879657,8.911466]],[[-2.350303,-5.298170,-4.397945,-3.080947,-5.664625,8.677374,-7.435941,-6.778160,0.599319,3.684443,-7.962772,-0.512815,-0.291209]],[[8.304882,6.277527,-8.533591,6.571519,-3.672615,8.414037,4.647775,-4.965560,8.462623,5.667835,8.221992,-6.225682,6.246905]],[[-2.303713,-7.389147,4.779921,0.931933,-6.049585,6.263026,5.315617,4.704111,-8.662601,-4.428973,-6.857146,1.165377,-2.293885]],[[-0.937653,-9.212059,2.792979,3.289786,3.657050,4.090155,-7.124170,0.447647,4.305097,4.561157,2.862153,3.756871,4.568164]],[[3.984423,9.989056,7.064843,-7.204902,3.537134,8.172623,-1.077233,-4.540187,9.912142,3.213961,-0.928890,4.371684,-1.153000]],[[1.737020,0.367930,5.033394,-4.478938,-8.911173,-2.929685,6.756631,-0.312801,-9.850515,5.009555,-2.827169,3.192422,9.026225]]], dtype = "float32")#candidate|197|(16, 1, 13)|const|float32
bop_198 = relay.add(var_196.astype('float32'), const_197.astype('float32')) # shape=(16, 1, 13)
func_102_call = mod.get_global_var('func_102')
func_106_call = mutated_mod.get_global_var('func_106')
var_205 = relay.var("var_205", dtype = "int16", shape = (22,))#candidate|205|(22,)|var|int16
var_206 = relay.var("var_206", dtype = "int16", shape = (308,))#candidate|206|(308,)|var|int16
call_204 = relay.TupleGetItem(func_102_call(relay.reshape(var_205.astype('int16'), [1, 2, 11]), relay.reshape(var_206.astype('int16'), [14, 2, 11]), ), 1)
call_207 = relay.TupleGetItem(func_106_call(relay.reshape(var_205.astype('int16'), [1, 2, 11]), relay.reshape(var_206.astype('int16'), [14, 2, 11]), ), 1)
func_102_call = mod.get_global_var('func_102')
func_106_call = mutated_mod.get_global_var('func_106')
call_214 = relay.TupleGetItem(func_102_call(relay.reshape(var_205.astype('int16'), [1, 2, 11]), relay.reshape(var_206.astype('int16'), [14, 2, 11]), ), 1)
call_215 = relay.TupleGetItem(func_106_call(relay.reshape(var_205.astype('int16'), [1, 2, 11]), relay.reshape(var_206.astype('int16'), [14, 2, 11]), ), 1)
output = relay.Tuple([bop_198,call_204,var_205,var_206,call_214,])
output2 = relay.Tuple([bop_198,call_207,var_205,var_206,call_215,])
func_216 = relay.Function([var_196,var_205,var_206,], output)
mod['func_216'] = func_216
mod = relay.transform.InferType()(mod)
var_217 = relay.var("var_217", dtype = "float32", shape = ())#candidate|217|()|var|float32
var_218 = relay.var("var_218", dtype = "int16", shape = (22,))#candidate|218|(22,)|var|int16
var_219 = relay.var("var_219", dtype = "int16", shape = (308,))#candidate|219|(308,)|var|int16
output = func_216(var_217,var_218,var_219,)
func_220 = relay.Function([var_217,var_218,var_219,], output)
mutated_mod['func_220'] = func_220
mutated_mod = relay.transform.InferType()(mutated_mod)
const_802 = relay.const(9, dtype = "uint8")#candidate|802|()|const|uint8
var_803 = relay.var("var_803", dtype = "uint8", shape = (3, 11, 1))#candidate|803|(3, 11, 1)|var|uint8
bop_804 = relay.bitwise_xor(const_802.astype('uint8'), var_803.astype('uint8')) # shape=(3, 11, 1)
func_216_call = mod.get_global_var('func_216')
func_220_call = mutated_mod.get_global_var('func_220')
var_808 = relay.var("var_808", dtype = "int16", shape = (22,))#candidate|808|(22,)|var|int16
const_809 = relay.const([[10,-5,-4,3],[3,-9,7,6],[8,6,-5,-8],[4,-6,2,9],[-8,8,9,10],[-5,-10,-9,-10],[8,-6,-5,-10],[4,10,-3,-8],[5,5,-7,-9],[5,5,-8,1],[-1,10,5,4],[7,-5,-5,5],[1,6,-6,2],[-6,5,4,-1],[5,10,3,-9],[-10,-3,9,6],[8,10,9,-3],[-1,-9,4,-9],[-1,-9,4,5],[2,10,-5,-3],[-8,-7,9,2],[-10,-4,-8,5],[1,-4,-2,1],[-6,-7,-7,6],[-7,10,4,-3],[-2,-1,1,10],[10,9,2,7],[-10,10,9,3],[-8,-10,-7,-9],[4,-9,-5,-7],[2,8,7,-3],[4,-6,-9,8],[4,-2,-3,-7],[-10,-1,7,10],[5,5,-5,-1],[-2,-9,8,8],[5,2,-10,8],[5,-3,-9,-2],[-2,8,-5,-6],[8,8,3,9],[-6,10,9,-6],[-7,-9,-3,-1],[-9,-4,-8,1],[-6,-5,5,-8],[4,-8,6,-7],[4,-7,6,4],[7,-10,-8,4],[-2,-2,-2,9],[-10,8,3,-7],[3,4,6,-5],[-7,9,-7,-9],[3,-7,6,2],[3,10,-7,-10],[4,10,-3,-2],[-3,8,-5,1],[2,6,4,-2],[10,-2,2,9],[-8,-6,7,5],[-9,10,-10,4],[8,10,10,8],[5,-8,4,10],[8,4,4,-5],[-2,8,7,6],[4,9,7,5],[-7,-8,2,-2],[-6,8,-8,2],[10,-4,4,4],[5,1,1,5],[-8,-9,-2,5],[-9,-7,-5,-7],[-9,-4,2,-10],[-1,10,-8,8],[-9,-8,-7,-9],[5,-3,7,7],[-2,10,1,2],[2,4,8,-7],[10,-10,-8,3]], dtype = "int16")#candidate|809|(77, 4)|const|int16
call_807 = relay.TupleGetItem(func_216_call(relay.reshape(const_802.astype('float32'), []), relay.reshape(var_808.astype('int16'), [22,]), relay.reshape(const_809.astype('int16'), [308,]), ), 4)
call_810 = relay.TupleGetItem(func_220_call(relay.reshape(const_802.astype('float32'), []), relay.reshape(var_808.astype('int16'), [22,]), relay.reshape(const_809.astype('int16'), [308,]), ), 4)
func_216_call = mod.get_global_var('func_216')
func_220_call = mutated_mod.get_global_var('func_220')
call_812 = relay.TupleGetItem(func_216_call(relay.reshape(const_802.astype('float32'), []), relay.reshape(var_808.astype('int16'), [22,]), relay.reshape(call_807.astype('int16'), [308,]), ), 1)
call_813 = relay.TupleGetItem(func_220_call(relay.reshape(const_802.astype('float32'), []), relay.reshape(var_808.astype('int16'), [22,]), relay.reshape(call_807.astype('int16'), [308,]), ), 1)
uop_814 = relay.cosh(call_812.astype('float64')) # shape=(14, 2, 11)
uop_816 = relay.cosh(call_813.astype('float64')) # shape=(14, 2, 11)
bop_819 = relay.divide(uop_814.astype('float32'), relay.reshape(call_812.astype('float32'), relay.shape_of(uop_814))) # shape=(14, 2, 11)
bop_822 = relay.divide(uop_816.astype('float32'), relay.reshape(call_813.astype('float32'), relay.shape_of(uop_816))) # shape=(14, 2, 11)
output = relay.Tuple([bop_804,call_807,var_808,const_809,bop_819,])
output2 = relay.Tuple([bop_804,call_810,var_808,const_809,bop_822,])
func_828 = relay.Function([var_803,var_808,], output)
mod['func_828'] = func_828
mod = relay.transform.InferType()(mod)
var_829 = relay.var("var_829", dtype = "uint8", shape = (3, 11, 1))#candidate|829|(3, 11, 1)|var|uint8
var_830 = relay.var("var_830", dtype = "int16", shape = (22,))#candidate|830|(22,)|var|int16
output = func_828(var_829,var_830,)
func_831 = relay.Function([var_829,var_830,], output)
mutated_mod['func_831'] = func_831
mutated_mod = relay.transform.InferType()(mutated_mod)
var_866 = relay.var("var_866", dtype = "float64", shape = (1, 14, 12))#candidate|866|(1, 14, 12)|var|float64
uop_867 = relay.log(var_866.astype('float64')) # shape=(1, 14, 12)
uop_870 = relay.acosh(uop_867.astype('float32')) # shape=(1, 14, 12)
var_872 = relay.var("var_872", dtype = "float64", shape = (14, 14, 12))#candidate|872|(14, 14, 12)|var|float64
bop_873 = relay.right_shift(var_866.astype('int64'), var_872.astype('int64')) # shape=(14, 14, 12)
output = relay.Tuple([uop_870,bop_873,])
output2 = relay.Tuple([uop_870,bop_873,])
func_880 = relay.Function([var_866,var_872,], output)
mod['func_880'] = func_880
mod = relay.transform.InferType()(mod)
var_881 = relay.var("var_881", dtype = "float64", shape = (1, 14, 12))#candidate|881|(1, 14, 12)|var|float64
var_882 = relay.var("var_882", dtype = "float64", shape = (14, 14, 12))#candidate|882|(14, 14, 12)|var|float64
output = func_880(var_881,var_882,)
func_883 = relay.Function([var_881,var_882,], output)
mutated_mod['func_883'] = func_883
mutated_mod = relay.transform.InferType()(mutated_mod)
var_958 = relay.var("var_958", dtype = "int16", shape = (11, 9, 3))#candidate|958|(11, 9, 3)|var|int16
const_959 = relay.const([[[6,-1,-8],[2,-2,-1],[6,-5,-3],[5,-3,-2],[-5,4,-10],[-2,-8,1],[-8,10,-1],[-7,4,-7],[-2,8,-1]],[[4,-3,-8],[3,-7,2],[6,2,-2],[-6,1,-2],[-6,-3,10],[7,2,4],[-10,1,-7],[7,5,-9],[2,7,-7]],[[2,-3,-10],[-10,9,-6],[3,10,-5],[-7,10,2],[2,-7,7],[-7,-9,-3],[5,7,-9],[-7,-9,8],[-5,4,10]],[[5,10,-10],[5,-6,-10],[-5,-4,1],[5,10,6],[-6,3,-6],[-8,5,-4],[4,4,6],[-9,-1,3],[-10,9,-4]],[[6,-7,2],[3,6,-7],[-5,-10,9],[5,6,4],[-7,2,2],[2,-6,10],[2,-5,3],[9,-2,-9],[4,10,-9]],[[3,-9,-3],[-9,-1,-3],[2,-4,4],[-8,5,1],[-3,-7,8],[9,1,6],[-9,8,9],[-10,-7,-7],[-2,-3,7]],[[3,2,2],[6,-9,9],[1,-2,9],[10,-4,4],[9,8,-4],[-7,-4,-7],[-7,10,-9],[3,9,9],[-7,-7,-8]],[[-2,-8,-7],[5,9,3],[10,10,7],[-10,-9,6],[-9,7,-1],[9,-1,4],[-9,-4,-2],[8,-8,-3],[6,-5,-2]],[[-3,3,-7],[6,-8,4],[5,-4,-4],[7,-10,10],[9,-5,-1],[7,-10,-7],[-5,-4,9],[8,1,-4],[-10,-9,-5]],[[-2,-5,3],[7,-1,2],[-5,-10,-1],[-9,5,-1],[-7,2,-1],[-4,-5,1],[-4,-10,5],[-2,9,9],[3,9,10]],[[-8,2,4],[9,6,9],[-4,6,-8],[5,1,-2],[-4,-10,4],[4,8,2],[-1,2,-4],[7,-1,-1],[-3,-1,-10]]], dtype = "int16")#candidate|959|(11, 9, 3)|const|int16
bop_960 = relay.equal(var_958.astype('bool'), relay.reshape(const_959.astype('bool'), relay.shape_of(var_958))) # shape=(11, 9, 3)
output = bop_960
output2 = bop_960
func_969 = relay.Function([var_958,], output)
mod['func_969'] = func_969
mod = relay.transform.InferType()(mod)
mutated_mod['func_969'] = func_969
mutated_mod = relay.transform.InferType()(mutated_mod)
var_970 = relay.var("var_970", dtype = "int16", shape = (11, 9, 3))#candidate|970|(11, 9, 3)|var|int16
func_969_call = mutated_mod.get_global_var('func_969')
call_971 = func_969_call(var_970)
output = call_971
func_972 = relay.Function([var_970], output)
mutated_mod['func_972'] = func_972
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1323 = relay.var("var_1323", dtype = "float64", shape = (12, 7, 1))#candidate|1323|(12, 7, 1)|var|float64
uop_1324 = relay.atanh(var_1323.astype('float64')) # shape=(12, 7, 1)
output = relay.Tuple([uop_1324,])
output2 = relay.Tuple([uop_1324,])
func_1349 = relay.Function([var_1323,], output)
mod['func_1349'] = func_1349
mod = relay.transform.InferType()(mod)
mutated_mod['func_1349'] = func_1349
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1350 = relay.var("var_1350", dtype = "float64", shape = (12, 7, 1))#candidate|1350|(12, 7, 1)|var|float64
func_1349_call = mutated_mod.get_global_var('func_1349')
call_1351 = func_1349_call(var_1350)
output = call_1351
func_1352 = relay.Function([var_1350], output)
mutated_mod['func_1352'] = func_1352
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1788 = relay.var("var_1788", dtype = "int16", shape = (13, 7, 4))#candidate|1788|(13, 7, 4)|var|int16
const_1789 = relay.const([[[-5,-6,-8,3],[-2,1,-2,3],[5,-2,-1,-4],[3,4,10,-3],[2,5,-4,8],[-7,-4,-1,-9],[-10,-5,-5,9]],[[-6,5,-8,3],[8,2,6,9],[-8,-4,-1,-3],[3,-3,4,6],[5,-10,-10,3],[-10,-9,4,2],[1,8,1,3]],[[9,2,-6,-7],[-2,3,9,9],[2,6,7,7],[5,10,-7,10],[8,3,-4,6],[7,-9,9,6],[7,-7,-9,4]],[[10,-2,6,-4],[5,10,-8,-5],[-8,-1,-2,8],[8,-6,8,3],[-2,6,6,-4],[-7,-10,1,-10],[-10,5,8,3]],[[-9,-3,9,-6],[10,10,-1,-8],[-9,1,-8,8],[-2,1,-8,-3],[5,5,-3,-4],[-10,10,-9,10],[-9,-7,-2,4]],[[-1,3,1,-8],[4,-10,-4,-10],[1,6,8,-9],[6,5,-2,-3],[6,-4,-2,5],[6,2,10,-4],[4,4,-7,3]],[[8,5,-7,-4],[-4,1,-3,-1],[10,8,-9,-4],[6,7,8,9],[5,7,-2,-6],[1,2,2,4],[-1,5,-7,-3]],[[6,8,-7,1],[3,-6,10,1],[9,-7,9,4],[-4,-9,7,-5],[1,6,-10,-2],[6,-8,-9,-10],[-4,-9,10,4]],[[2,6,7,-4],[-5,-8,9,8],[9,-2,6,-5],[8,-3,7,2],[-3,1,-2,-10],[-7,-1,-10,10],[6,-8,-3,-1]],[[4,9,3,1],[4,6,8,2],[-6,-10,4,6],[1,10,-6,4],[7,3,9,-4],[7,8,5,1],[-2,8,2,-6]],[[9,-8,7,6],[7,3,-3,-6],[6,6,-3,3],[-9,-1,-6,-5],[-3,9,-6,5],[2,9,3,-6],[9,-2,-2,-10]],[[-7,-3,10,-7],[2,4,-9,-9],[-4,-8,4,-10],[9,-7,-9,9],[8,9,1,-2],[10,-9,4,3],[8,7,-7,-7]],[[10,-5,-3,-3],[8,10,7,-2],[-7,-7,-1,-8],[-4,-1,3,5],[-5,2,-7,-8],[6,6,-1,10],[7,6,-2,7]]], dtype = "int16")#candidate|1789|(13, 7, 4)|const|int16
bop_1790 = relay.less_equal(var_1788.astype('bool'), relay.reshape(const_1789.astype('bool'), relay.shape_of(var_1788))) # shape=(13, 7, 4)
func_880_call = mod.get_global_var('func_880')
func_883_call = mutated_mod.get_global_var('func_883')
const_1794 = relay.const([-1.143477,2.889739,-9.269220,1.913432,-4.781574,-3.372337,5.755066,3.334383,8.036996,-0.598834,-7.496154,1.061064,-2.892706,-9.130445,-7.600763,-2.280042,1.570112,-2.378579,-5.109901,-2.499065,9.412957,6.725397,4.998275,2.283255,5.925401,-4.257417,7.958284,-3.539029,0.632323,8.855782,-3.118886,-4.182940,8.643798,6.065373,-9.720242,-8.454363,-5.126279,-7.368777,5.067466,2.400022,-3.506562,-4.525352,2.509593,8.068966,2.081465,-4.212762,-9.286810,1.337773,2.134562,8.731047,9.357416,4.655662,8.170760,9.575205,2.775126,4.948428,-7.190431,2.470476,8.195458,-8.388798,8.001469,-8.678885,5.627131,-7.813471,1.136702,4.386743,9.200738,-5.411411,-0.033532,1.604091,-3.402334,7.211102,-1.351452,-9.475053,-2.111413,2.152158,9.798519,2.025693,9.255968,-3.789736,-3.457192,1.895436,-7.030827,-9.112946,-4.495703,7.458695,3.622349,1.074703,7.419293,6.779961,1.035875,-9.023366,-0.035733,2.756329,5.077876,-4.063851,2.642498,2.564536,-3.770256,2.918739,-6.756579,1.087961,6.603931,4.442945,3.600639,-5.638314,2.881568,3.525810,6.627245,-8.132626,-9.684773,-5.742353,-4.799267,-3.707720,0.460051,3.238040,-2.478519,7.878739,-4.954427,-8.503535,6.445870,-6.993961,3.217273,7.542140,-0.207837,4.997287,-4.824141,0.842522,-0.560128,8.826415,6.530919,3.569413,-7.590690,8.474403,1.922850,-6.226577,0.042219,-1.500801,-8.251117,9.358996,0.917940,-5.316677,-4.719744,-6.113851,5.666515,-0.532415,0.080524,-4.820975,0.136139,-6.467332,9.371399,3.530235,3.958182,-7.997870,4.161891,-0.291169,-2.120422,7.683759,-1.220928,0.533491,8.852949,-6.879563,1.941637,-5.547807,5.699645,-4.099834,0.854945,3.446409], dtype = "float64")#candidate|1794|(168,)|const|float64
const_1795 = relay.const([7.794008,4.473024,-4.197464,-1.899088,-9.294997,-4.533496,7.500646,-6.059499,0.653063,5.507287,6.428525,8.117662,-1.525771,0.096705,-6.592648,-3.123526,1.171481,-2.428749,-5.435127,-2.902149,-9.774837,6.751853,-6.351766,7.820674,-3.952246,-6.844860,-8.565075,1.767697,-7.684880,-4.745451,4.087524,-0.908395,-6.826392,-1.487410,1.119573,8.726562,9.247046,1.473593,5.826786,0.289996,-1.033634,8.311566,5.294624,4.102894,-7.822354,4.351913,-3.338371,-7.655085,-1.823023,-3.314236,7.274019,8.147226,-1.653891,-2.766735,0.003747,8.085112,0.550498,-3.322695,1.923663,-8.493532,4.899018,5.444094,1.823412,-8.707747,-2.258109,5.251974,6.616493,-0.285724,-6.688420,0.384546,-0.241501,9.721701,6.053957,5.876756,6.088782,-6.697474,2.550041,-4.220041,2.474914,-7.582125,7.260850,-4.700725,-4.546931,-9.031345,4.839888,7.352321,0.014077,-5.789886,-1.970278,3.379900,6.371316,7.233008,-1.654204,-8.434379,-7.778503,3.197973,-6.233934,-9.920602,2.362135,8.620489,-3.938183,-3.952069,1.645148,7.741489,-5.468835,4.482335,-2.409460,-3.047034,6.017044,8.426558,9.404807,0.868366,-3.275992,2.881281,0.015665,-2.534030,1.067086,4.538966,5.158606,-9.702251,4.335705,-5.078442,-1.330627,-8.945482,5.372063,-0.644433,0.106833,-9.458771,1.195300,1.895384,0.331951,1.358147,-6.941999,8.053766,8.653141,-1.995380,-1.885910,-7.867876,7.914175,-2.082714,-2.355347,-4.921160,-1.688515,6.231884,-8.978565,-7.301776,8.068188,-6.451676,-1.834397,0.118733,7.015251,8.470540,-2.020031,5.336718,-0.149348,-7.781856,-3.524696,-4.419922,-0.808725,-4.967322,-1.625055,-0.136977,-9.997728,-3.055530,-3.074163,-4.440291,8.514201,0.684765,-9.622569,2.716627,-4.659825,1.170120,-6.082615,-3.195554,-3.981217,9.671449,8.733005,-2.445832,-9.335200,2.970562,-1.782844,4.328823,8.936013,-2.719229,5.552943,-1.363850,5.094865,-7.057479,-1.472342,-7.135937,4.823846,2.268324,4.565624,1.659441,-5.838706,5.527940,-7.717681,-1.652982,2.067444,9.880768,0.595066,2.533382,-1.574025,-1.694983,-8.176551,1.291215,4.686396,-7.157354,-8.984504,-2.522082,-8.560044,3.688173,-8.287023,-9.701013,-3.210795,-6.561012,-0.919877,8.832583,4.414084,3.036635,-7.943955,-3.042292,4.638170,2.959063,-7.026072,2.865029,0.386233,2.985003,-5.132174,8.081515,-8.805686,-9.648692,4.714604,1.381583,-1.823176,-7.267906,1.579377,-0.502546,-8.003264,-0.523038,5.210993,3.245161,-4.198213,0.654415,5.429201,-1.548387,-9.244997,-0.379915,-2.428583,1.478224,-7.292525,6.140083,-0.847472,-7.465256,3.675437,0.072864,-3.116327,7.568388,3.568326,-4.776499,-9.552403,-5.528862,2.196838,-6.897788,-6.373210,-9.154100,-3.027641,-8.183792,3.554429,8.168919,2.286827,-6.556013,7.823395,6.115703,-0.372951,4.725464,-7.985377,3.210741,-1.175226,6.023565,3.629140,7.862452,7.755867,-5.656470,3.186792,-7.925087,-5.049915,-3.777621,-8.121397,4.857018,0.752413,3.139742,-5.461136,-7.009210,7.993224,-0.799597,0.513304,-8.184635,9.706495,-2.705721,-7.205302,-9.200205,7.824124,-2.502691,-9.533676,-0.124019,7.891906,6.062870,-0.781650,-1.133834,7.228499,0.684895,0.029756,3.107091,-9.773213,4.432901,-2.133058,-8.645544,-7.020444,-1.623096,-5.514605,9.215391,-4.073351,9.823370,-4.846592,-3.976595,-5.490538,-5.603797,2.623173,0.301822,6.309621,-4.066614,-5.502802,6.860788,-2.065820,7.706339,-2.208126,-9.425188,6.071209,-3.159831,6.117263,7.908356,-8.551164,1.740519,9.870216,3.368932,0.979962,4.486475,-2.650515,7.925139,-7.945081,8.536424,2.543750,4.703000,-0.947963,-0.853942,5.741970,0.670609,3.497759,2.865435,5.986057,-6.036247,0.255875,-5.733093,-3.422966,-4.221796,-9.376427,-5.815862,4.078255,-8.304023,4.221989,7.847955,-1.195643,-0.764710,-3.443724,2.437170,-7.351298,-0.694358,0.272779,-4.953594,-5.334718,-8.259795,-3.773557,-0.149335,-2.911767,9.536047,2.342824,-6.084941,-4.106584,-3.585616,2.934782,-9.473492,4.968395,6.042181,-8.741667,-9.610662,-5.572707,0.968267,7.218938,-2.897048,5.919707,5.740938,-6.671105,-2.836582,-1.733208,1.097385,-4.906811,-5.485565,3.392486,-5.530072,7.345164,-8.622679,3.510171,-6.025805,-8.612678,1.876516,4.483863,-0.612284,-1.293335,-7.653550,4.033017,-5.598356,5.019642,7.873529,-1.436838,-8.736568,1.405056,8.792133,1.438303,5.536936,-4.831187,7.013316,-4.190698,-8.936756,-7.252705,2.351284,-6.837752,-7.909858,-9.318232,-1.369787,0.579432,-9.854420,-5.937548,-4.874337,-5.884922,1.393376,-1.082265,-3.658658,-4.942324,0.143075,3.778990,0.931239,4.843737,0.738305,6.896829,-6.635717,7.234318,0.059413,3.061838,0.016012,-4.191347,-5.822723,7.685213,6.648123,0.319109,-6.413042,4.564696,2.666340,4.880230,5.766338,-8.932426,-2.102480,-3.813214,1.558946,2.930787,5.641345,6.384648,-7.352018,-6.323871,9.818020,-0.551759,-1.755687,5.041523,-2.975738,0.033982,8.560545,-4.913516,0.014862,-7.015315,-2.991984,2.488425,4.869674,8.742430,3.453756,1.916051,-9.409262,-1.524017,4.451707,-2.436554,7.752112,9.467842,3.441253,-1.120758,1.650737,-4.287542,-3.096682,4.760909,-3.641423,4.460453,5.021095,-7.009434,-3.532653,-5.784262,-0.779382,-2.736664,-7.016081,1.429708,7.005546,-6.598175,-8.019857,-0.073220,-7.258248,-3.492279,-5.524522,-4.544050,-7.777635,6.579391,-7.502075,-3.856309,-7.311665,-5.792672,8.562576,7.029455,3.316919,1.543536,-4.974083,-7.088532,5.485634,0.576364,-8.952975,9.981248,7.557651,5.241757,0.436033,-7.360828,-1.193163,-5.776091,-2.156539,-4.338443,-2.281892,3.334877,6.863270,9.836679,-3.502964,5.533486,0.371535,6.701283,4.236498,-7.850927,2.437020,3.413530,9.881296,9.521068,4.336614,9.852210,5.098093,-5.614703,-3.335443,5.143184,-8.712032,7.469585,-4.022414,-9.199819,4.942195,-2.763921,-7.490358,4.829419,5.664221,4.825447,-3.152064,-7.683725,-3.769604,1.250525,8.509007,7.302355,1.712472,6.577400,-4.151439,6.607224,-1.836666,-4.400108,0.703136,-3.125499,-2.982277,0.404888,-9.416749,-5.192856,-1.645830,3.238421,-1.352503,-0.457041,9.061394,3.426948,1.656707,1.671848,-3.480115,-6.529859,6.057987,3.411998,1.028030,2.132848,-0.590668,-1.008864,3.496604,-7.632614,-8.184560,1.818214,-4.527853,1.365843,9.707688,9.633893,-9.393491,-7.746122,-7.898583,5.118979,-4.972018,7.209451,-5.966844,-6.051886,7.745725,-9.086565,4.906940,2.536637,-7.267899,7.775791,-7.935532,-1.020204,7.947112,-7.535719,-5.729967,1.956205,-1.341804,6.034127,-0.108618,-8.404940,7.109529,4.768156,-5.433211,-6.230576,-9.473324,7.066143,5.031929,6.643643,-2.910088,-6.735248,-9.943902,8.617421,5.933256,7.199993,-4.607459,4.597132,-4.982229,-3.249062,-8.595715,-6.164453,5.262722,4.707985,8.497947,8.131696,-4.887639,-4.731636,1.976095,-0.456855,-3.162065,-6.914402,2.803544,-5.581126,-3.005561,1.500186,-1.516134,3.626912,9.562427,-5.329193,-1.481190,-4.217987,3.061896,0.760501,-3.257130,5.754815,8.531330,-6.039534,-3.145415,2.607907,3.853301,1.700200,-9.681745,1.966958,2.147533,-9.843059,9.206091,-6.982598,7.003597,3.779612,1.440857,-3.363482,-2.887780,-6.481992,-2.939063,-5.952961,-4.662773,8.366850,-6.462502,-1.367682,-6.996364,1.631320,0.013751,-2.709184,3.100375,-0.975589,5.896689,-8.524677,1.193830,-3.606920,-9.179216,-2.610781,-9.874337,6.923783,-9.594157,-6.091754,-7.350607,5.216384,4.734208,-3.039558,4.693720,-7.959545,1.983142,1.858648,2.931012,-8.373529,-4.034465,-6.203518,-1.414269,2.244989,9.938213,0.919617,-3.083548,9.858612,1.281714,-0.309686,-5.573937,3.985270,1.560925,5.223649,-4.522107,-6.587698,-7.412299,0.692747,-9.905179,8.552015,-5.345799,1.660726,3.311631,-6.199392,-1.669581,-8.970236,5.511410,6.931111,-1.232775,9.439026,-4.642939,2.389242,-6.290814,-6.315971,5.848852,-4.191014,-3.028443,-9.517098,-0.571614,-1.628343,-3.076729,-8.745458,-1.537938,-6.274055,-4.665733,6.158655,-1.473199,7.249495,6.909273,2.560682,6.467433,-7.366570,-0.106377,-1.432320,-7.132522,1.700719,2.442756,-9.359213,8.365564,-5.202563,2.951174,6.225210,-4.795034,-6.150668,-3.922909,-0.377477,-9.384144,9.311627,-7.206241,0.488121,3.365652,8.734404,-5.644037,-1.497008,-1.846066,4.153992,1.447334,6.383877,9.257422,9.724765,-5.388850,-5.612531,1.523549,8.747280,1.949621,-8.076505,8.325534,2.365615,4.928819,-8.829266,-2.377201,9.564113,-2.459825,4.126116,5.829291,4.105907,-3.377955,-0.948808,8.561979,2.687893,-1.647658,6.421699,6.787274,-8.978581,3.639715,5.860707,-0.968634,6.473317,4.013698,2.709859,9.109640,-6.896437,-1.045168,8.252668,-1.574539,-7.998465,-8.785920,3.791394,-5.564836,1.144611,-7.383243,3.506173,5.957405,3.467930,3.703257,3.471964,6.557030,-6.429003,-9.344462,8.287544,1.760649,-2.281098,-9.660078,0.068154,5.690885,-9.010501,9.672669,-4.846932,-6.961670,-4.253668,-0.698362,-3.141808,1.351535,7.071281,2.349448,1.088068,-4.019292,-2.828355,5.889997,5.590884,-6.992064,-2.974878,2.000801,5.545967,-6.306900,7.604373,7.014241,-6.351998,5.947437,2.573723,-1.935862,2.191642,-9.482256,7.319056,6.824805,-1.306549,-6.702898,-7.347811,6.090308,2.748462,0.713943,5.597939,3.671789,2.639119,8.534108,8.757533,0.625015,5.218275,-4.595002,3.727341,2.246353,-2.046355,-1.428754,-8.778369,-2.581499,3.617397,-9.564903,-1.585231,-7.869862,-5.810079,-2.402003,-5.759139,-8.250683,8.050192,-9.009918,6.250874,-1.991941,-0.735779,-9.083875,1.257583,-6.001520,-7.830872,8.381393,-5.832884,-3.838138,9.567454,-9.123958,7.473660,1.500927,-2.756696,1.725149,-8.281121,6.645713,0.372891,9.513396,-0.073654,7.840176,-3.634738,8.837821,4.153829,-6.212835,7.998460,-9.139366,8.194950,1.059671,8.104248,6.305509,0.565927,-3.635025,-4.660479,6.778117,-5.642479,4.621327,7.102578,7.640884,9.133982,8.317364,7.485660,2.115447,-1.939072,-7.974733,5.890794,9.150336,-5.448212,0.179258,5.797903,7.418415,-4.482130,-4.023027,0.423945,-3.956359,4.972024,9.737762,0.151324,-1.503780,-3.908062,8.399135,-5.052409,-1.785614,2.900409,-4.612591,-4.550387,-7.796613,-9.231404,-2.415229,-3.631944,-8.917868,-6.483171,-5.754129,-9.143528,7.787814,0.682056,2.900179,3.140675,-3.004062,2.776595,5.967715,-7.845746,-6.491996,2.973461,4.578644,4.245940,1.321901,9.669107,1.857754,-2.281321,-4.758399,-3.537522,-4.095109,3.637868,-9.611894,0.404694,-4.697169,0.088692,-1.545226,5.474139,-4.443581,-0.143362,6.651391,-8.469680,4.601548,2.259179,-2.767470,1.216334,-4.403604,-5.806238,-2.839008,-6.102328,1.821924,8.049332,-9.219098,5.199798,-8.635954,0.427256,-8.774883,-0.523040,-8.985344,2.840269,0.697498,6.118444,-4.539334,-7.928608,3.515819,0.314689,-3.316025,3.664584,-0.914622,-7.942097,-5.207128,-0.980153,8.588922,-0.464997,-4.664424,-7.088658,9.110932,1.476677,0.586360,-9.491660,1.319661,-7.145888,-6.627862,-7.263056,-9.806863,9.520761,-7.499485,3.921371,4.579456,-8.101502,-4.744718,0.139138,-3.281645,3.062569,7.505430,3.269340,2.211973,-4.571782,3.591454,-1.788853,9.896262,-8.330329,4.372671,5.390492,7.620431,8.249234,9.253668,6.273799,5.689384,9.937145,-4.162558,5.111130,-1.710079,-9.986887,1.629913,-4.338621,-5.537489,-2.019867,-6.564271,-7.681370,3.017736,9.187376,4.346176,7.126107,1.296509,8.871866,1.290587,-3.464395,-2.000876,8.303452,8.912657,2.572790,-4.270283,-0.961976,5.788722,-2.931611,-7.931969,3.579476,6.321850,-3.139267,-5.184892,-4.394715,3.035927,4.857557,7.712601,1.903830,-9.682966,3.813198,-2.880289,-7.274545,-8.463166,8.305896,-7.543071,-5.362120,8.136937,4.979251,-8.384471,2.120173,-5.283228,-7.901740,1.852139,-4.577435,-2.868492,-8.441261,5.945002,-4.749004,5.507763,-8.026245,7.968170,3.953658,-8.500522,-3.813823,0.077556,-8.207282,-0.245798,6.459176,-4.690557,-0.456923,2.762166,3.892575,4.811753,0.493862,5.578944,-2.481570,-8.054485,5.634996,-0.165799,-6.038668,0.959277,0.607579,5.572032,9.545250,7.796810,-7.440249,-2.854930,4.752663,5.220786,3.217769,6.116620,2.183013,1.314846,-0.897622,-0.649484,6.443248,2.399401,-3.592383,-4.810836,-7.174277,2.427689,-4.867825,-0.965843,1.197404,-8.488532,3.375960,-3.438485,-1.873278,1.956264,-8.294220,0.955900,-2.252536,-2.153747,8.797527,-7.722474,-9.439508,-3.624196,-2.162361,3.851646,-4.901753,-3.353091,3.772647,7.775040,-6.130961,-7.051510,-8.419891,6.955773,-5.474506,0.394050,-8.566878,0.111392,9.748547,5.045972,-7.947593,1.039787,3.605577,-6.236712,0.578685,-7.279068,7.538549,-5.763855,-9.979326,-3.498992,7.915939,-1.123708,2.444278,1.150134,2.862472,-4.902870,3.558519,-5.911336,2.021935,4.767666,-3.791610,2.242222,-8.900843,-8.496588,7.317505,1.304137,-3.758963,-7.592658,8.013759,7.647504,-5.821410,-5.791116,8.308180,-9.967132,-2.531858,2.598708,7.702507,-8.284448,-8.682936,-2.872241,3.234442,7.487816,4.194483,2.686632,5.642011,9.861559,1.060102,4.194827,0.114879,1.496916,4.459687,-3.585595,8.146977,-7.560371,9.470838,7.904102,-1.396544,0.206708,-0.088481,-1.506491,3.409996,-4.979937,0.743434,2.759424,9.685783,-6.409219,-1.784490,-4.959583,7.889508,6.115431,1.077104,3.804747,5.621772,-4.408448,-2.303522,5.144683,-8.556984,-8.267316,3.956207,-8.235678,-7.349028,2.827120,-1.647012,9.248744,-0.200679,-0.205226,3.826785,1.653581,-6.783831,7.963964,-5.633504,-6.992945,-1.419568,5.538599,0.391047,-6.181458,-8.225757,-0.516572,5.840695,2.610283,-4.666278,-8.928766,5.952862,8.815007,4.789913,-2.096018,7.267697,-5.396560,8.534890,-7.761425,-4.509827,3.434322,-6.336591,6.077889,4.569394,-8.315693,-7.088048,7.446728,-1.677108,-4.225272,7.966936,-4.044920,5.695400,-4.686105,-3.247302,6.297463,-1.673157,8.361162,-5.379602,-9.932813,9.027318,-3.903924,7.526925,-5.589177,-3.868060,0.689362,6.588175,-5.787491,2.091430,-3.365559,3.947835,-1.643285,-6.871567,4.504334,-2.175338,-7.486917,-2.341301,1.945143,-8.250945,0.320784,-6.839241,9.350691,-3.785399,7.395539,-3.030596,2.862575,9.612093,5.981211,-0.755583,6.972726,7.019810,-0.942295,-5.925588,3.473533,0.036616,1.042366,-8.581934,-3.993572,-5.720173,-5.862717,7.818344,6.323142,6.608516,-5.724082,1.360847,-9.389671,9.987799,-2.816681,-6.054479,-1.392949,-4.175895,-3.088099,-8.227704,-4.790634,-6.671462,-6.118828,-2.285281,-0.149397,-1.574718,5.055339,-4.261371,-3.705800,1.791468,7.099386,7.868070,9.532774,8.935485,-8.023255,-5.040141,8.019723,6.903107,-0.154458,0.852395,0.098005,9.992586,5.684720,-2.005696,3.379983,-6.631191,3.931123,8.805112,7.175845,-6.162999,-3.125432,-6.723911,1.026495,6.333090,-5.120967,0.313792,5.418585,-0.152761,-9.026014,-6.778263,-1.351448,9.676304,-9.329571,1.434454,0.990722,0.092792,-2.759150,8.756133,4.188456,-5.522245,8.652794,4.247287,-4.109356,8.992171,-1.854470,5.587033,-1.713573,2.005818,8.222353,0.712269,-9.812360,-3.986384,-2.823876,3.573981,1.382617,9.366923,5.538704,8.820023,6.367477,-6.588366,-0.389466,-4.792083,-7.910845,-9.454529,-4.081615,5.664504,-3.093653,-4.730202,0.296028,6.979193,6.773379,-5.818432,7.083826,-5.356191,-7.076908,3.960220,-5.177125,-6.214019,4.409511,-9.780787,-7.057579,-2.162234,-8.985045,1.119666,-4.681155,-7.590631,-7.819260,-4.164153,-0.081264,-9.595216,-5.060527,2.213500,9.606891,2.045677,-1.333296,2.787413,8.902798,-5.524477,-7.189372,-2.722282,-5.565755,-5.258288,2.942377,-5.074680,1.156977,-5.710178,-9.128897,0.674239,6.856346,-3.950034,-8.955283,-1.672723,-9.542268,0.311508,7.604733,6.951501,-5.851333,-3.402425,5.154860,8.612373,5.821018,-6.464497,-9.275018,6.089400,-3.565392,9.530438,0.942515,7.230468,-5.247931,-8.920922,-9.658972,6.355529,3.128822,-2.457280,8.547630,-9.126906,5.856517,-9.816994,-2.116404,-5.043540,-4.129067,8.426064,9.789893,9.429392,-2.333426,8.564681,5.365115,3.604676,-7.973968,0.089109,-7.840045,-3.929591,-1.996136,8.513661,4.843166,-1.026713,3.470709,6.098440,-4.211225,6.214198,8.904192,9.696188,5.284755,2.203481,-6.517690,6.854033,-0.623654,-7.379937,2.933754,2.826127,9.584200,-9.192136,-5.275122,-2.258460,-0.042815,0.793500,-9.232947,-2.274924,4.774575,-7.933495,4.788924,-1.108501,8.990995,-4.957205,-8.162020,6.064216,7.784089,7.508744,-7.985325,-5.714610,4.690368,-9.592675,-6.584837,8.515900,-4.655247,9.240643,-8.610913,-5.719456,2.443958,-0.281281,-6.193980,9.709624,7.594808,5.481382,-2.642434,-8.244817,9.127644,-8.647900,4.662392,-2.670431,8.168822,9.870469,1.970118,7.611259,9.010368,1.576956,-1.208988,5.142101,2.573087,6.815636,6.415549,9.859946,-7.409194,-1.947822,1.770506,9.505358,3.615868,-9.934672,-0.806530,6.986751,8.588312,-2.897193,3.546720,7.769761,-6.923193,6.465745,-8.475772,8.692552,-6.149472,1.063909,-8.550554,-2.189790,1.493256,-7.590088,-4.753594,7.234179,-7.483445,6.974936,-1.059885,-6.194798,1.429302,-5.400679,-6.927611,-1.143958,3.506109,4.638937,9.223109,1.649702,-1.324658,-1.084188,0.626403,5.449126,1.462878,-7.532484,3.003552,0.059493,-9.327047,6.596658,8.300913,1.801223,1.621065,-8.285174,-5.797974,4.669061,9.123016,1.366425,-7.028160,4.002889,-5.003867,5.468711,-2.475270,-2.530487,-9.551212,-2.832470,-8.161226,-0.229184,-5.491108,-5.000009,7.052546,7.909844,8.586928,1.644054,1.471843,-2.673237,-5.389516,-4.662573,-5.110232,1.181876,-5.389691,-4.614437,8.658702,-2.787471,7.977093,-9.896676,-5.557814,6.552669,8.178607,3.254187,7.992031,-0.446395,3.883183,3.826955,6.656886,-9.041502,-9.939142,-9.762544,-7.223285,9.133289,0.086349,-1.378183,1.634482,-2.594565,-3.107113,-7.544853,0.538279,-9.821739,2.512938,-4.780836,-7.553801,-0.637462,4.981334,8.291097,4.072358,0.440892,-4.892537,-9.664624,8.151860,-9.269566,6.351631,-9.114432,2.131993,2.409010,-9.301494,-5.989309,8.943437,3.475871,4.771223,-8.331599,2.609121,-0.719749,8.643132,9.300619,8.157444,-8.330310,-0.847915,6.116120,3.335201,-2.975304,-9.135790,8.049826,6.657425,-7.438271,5.559830,1.823012,-5.405830,-3.499601,4.370851,-3.662356,-2.505004,5.264610,8.210720,-2.136313,1.409070,-4.188708,0.502495,7.375997,-2.711793,-7.036246,-7.435658,-0.932961,8.855115,-0.372258,3.395069,2.841302,-9.483938,-9.212586,3.095741,-1.079435,-1.161150,-4.187333,-6.018196,-2.193650,9.123423,-0.104587,5.878158,-7.388586,-1.893242,9.125774,7.359259,8.561190,0.741836,-6.972677,-2.921098,6.296704,9.436448,7.537842,-7.255842,1.531025,-5.281409,5.366113,-9.906611,-6.000707,0.699915,-0.977047,-0.687945,-3.486218,-4.450680,-4.758650,0.051628,3.942646,7.236814,0.245586,-1.582686,7.249787,-3.027286,-9.209314,-9.583257,7.908802,-2.997153,-7.316958,2.521765,-8.190702,4.467118,6.932143,5.763357,-8.960278,8.173357,-1.907482,-7.926327,-0.793372,-1.188102,4.393746,8.668430,-4.159561,8.689633,-3.885448,4.078290,-0.849394,4.878098,-8.910256,-2.814923,7.791997,-2.350580,0.867344,1.835822,4.349602,2.356967,-1.402548,-0.481065,-2.148033,2.523499,-1.552559,-7.609074,-9.871549,-3.746721,-0.687939,1.703866,-0.332192,2.426769,-2.213000,0.911496,-7.694570,-6.493976,5.821487,-0.998748,-0.643626,-6.773677,-4.964331,7.575277,-4.572054,1.502273,-0.233507,-1.194301,-7.303848,5.665525,-0.932686,7.705177,7.457922,3.358780,-6.162106,-8.271149,-0.680787,6.276697,9.773748,5.669942,8.061325,-4.799816,7.224650,-3.907988,-0.874274,-0.929896,6.607109,-6.474385,1.785496,3.603158,4.246208,2.296267,7.268192,-3.394425,5.643764,-5.383815,9.858748,6.828413,-4.470920,-8.306992,3.760270,1.546016,-5.447902,5.682727,-3.003775,8.405301,-7.952212,1.332499,-6.159509,1.038665,0.662787,-5.848653,-3.545964,4.560780,2.805329,-2.565570,-3.860323,7.983327,6.568729,-0.614625,-9.157969,2.750705,-1.560530,-0.985103,-2.632055,3.486977,9.591814,-0.490559,2.240920,-1.619422,-1.514248,4.990309,9.351940,8.870664,8.220414,-2.549725,-6.091069,-6.087820,-2.175991,9.929333,-0.365652,-1.630707,-4.823826,-4.324081,-5.815710,-2.256147,1.191040,2.449547,7.647022,8.002017,-2.565649,-0.291137,4.003863,-0.561293,1.475536,-3.355920,-3.621276,2.303984,-3.257024,-6.023200,7.519993,1.462881,-9.740638,2.767300,2.796937,-4.135560,-3.167317,-9.020762,9.582036,5.411267,-9.969898,5.625720,-6.879205,6.521274,-4.227662,2.438111,8.212586,-8.990555,9.261238,5.854678,-0.745976,-3.666164,-1.388548,-8.843646,3.054320,-2.330481,1.114481,-5.745513,-2.624916,-2.996276,3.874129,-3.639228,-4.693658,-5.844372,-2.896078,4.105297,6.250859,0.200706,-9.427220,-5.911393,1.543907,-7.002954,-4.716086,-1.643183,-2.640403,4.817241,-3.719057,-2.282503,-7.302897,-2.070774,-1.911918,0.156651,-9.573839,7.724336,-7.541589,-7.732942,-9.305796,-8.377439,-2.224843,-9.835412,-5.092636,-9.717468,3.598575,7.428860,-8.119790,4.862949,0.784545,-7.206811,1.331517,8.791532,0.464361,-0.908743,-1.124918,-5.180606,4.406618,5.693649,-4.479492,2.300366,3.688300,5.928351,-2.091684,-7.460489,1.553708,8.333113,1.100634,-3.228766,5.781588,-8.640631,-1.181174,-3.939520,4.940444,0.287990,8.729840,-8.754519,0.232633,-6.046092,-8.911990,-1.478357,-8.751047,-4.435909,-6.881881,-1.435393,9.986562,5.306912,-3.640243,-4.155828,5.003132,4.724730,-1.504424,1.902910,-1.800021,7.848326,1.477102,-3.270168,-0.069367,5.852151,-9.851751,-4.682371,-4.152881,5.219154,9.874441,1.937077,6.589102,9.886746,-5.681391,7.955411,2.403120,1.268995,-1.904594,-4.406369,-7.900202,6.088852,9.391289,5.803807,8.964859,-6.965238,-8.613447,-2.106312,4.719643,4.454096,-5.204971,-3.585259,7.201974,-6.361902,4.667792,-7.256330,-6.940726,-6.798910,3.924859,-2.677868,-8.552934,9.479754,-1.439929,-5.612137,-8.413220,7.128126,9.346475,-0.122419,2.305717,-2.192354,5.356266,-3.228324,1.512224,0.413307,-8.926765,9.903300,9.052417,9.656663,-2.834656,4.370331,0.783023,-1.797013,-8.601371,-8.934954,1.223453,-4.740547,7.780699,7.042706,-7.557973,-2.408685,-3.220092,6.977544,-9.216203,2.413619,2.558082,5.941160,9.859512,6.342642,-3.175026,8.213692,-6.634310,-9.354564,-6.187050,-6.078434,1.681679,-7.262381,1.367615,9.345701,-0.812459,-7.988071,3.386671,0.643942,2.560395,-3.379478,-3.899337,-2.768101,1.339871,-7.196035,-9.895928,-1.882473,6.292777,3.051700,1.050087,2.781230,3.711763,9.610313,8.048253,1.949729,1.749094,5.419544,6.959391,-7.144888,-7.090529,-8.635743,-3.127671,-9.174874,8.725273,-0.911193,-8.424630,6.577073,5.972515,-9.871900,4.420964,-7.300425,9.484097,-5.033474,3.670098,-6.686330,5.311991,-8.372495,1.948201,-6.310333,-2.141488,2.283074,-4.717372,-0.803952,6.421354,-6.653024,-5.250274,2.353131,-9.092733,-8.595601,1.974666,-2.291064,1.367392,-1.749694,2.505515,-6.877549,5.635894,1.621984,-4.587369,0.924226,-4.631845,-9.848733,-4.837959,4.076140,0.989054,-7.155620,-3.416165,6.722685,2.827069,-3.622672,-0.003160,-5.265530,0.181201,8.281772,7.663687,4.232993,1.481781,-0.982804,-9.797874,-2.022605,4.274422,-8.591761,0.896530,-0.019908,8.625997,-1.882475,1.423935,9.051854,-7.836784,-4.676124,8.740725,4.735565,4.378033,1.015608,0.442452,2.518323,-9.446955,-2.021589,1.714524,2.889420,-5.080190,1.096420,-8.182028,-3.919278,8.213721,5.715178,-7.097226,6.025904,-6.354798,0.066714,6.272430,3.125986,-2.903658,8.077797,-9.653573,-0.351614,-5.393202,-5.574617,-4.247634,4.318947,4.410397,7.390993,-5.325659,8.000741,4.863450,-1.190971,9.629652,-7.840769,-5.305500,3.492634,-1.441670,3.773026,9.466265,-0.541580,-5.423952,-5.594188,-2.356528,3.440640,-8.912647,2.329424,-6.501478,-2.112634,7.795591,5.450046], dtype = "float64")#candidate|1795|(2352,)|const|float64
call_1793 = relay.TupleGetItem(func_880_call(relay.reshape(const_1794.astype('float64'), [1, 14, 12]), relay.reshape(const_1795.astype('float64'), [14, 14, 12]), ), 1)
call_1796 = relay.TupleGetItem(func_883_call(relay.reshape(const_1794.astype('float64'), [1, 14, 12]), relay.reshape(const_1795.astype('float64'), [14, 14, 12]), ), 1)
output = relay.Tuple([bop_1790,call_1793,const_1794,const_1795,])
output2 = relay.Tuple([bop_1790,call_1796,const_1794,const_1795,])
func_1801 = relay.Function([var_1788,], output)
mod['func_1801'] = func_1801
mod = relay.transform.InferType()(mod)
var_1802 = relay.var("var_1802", dtype = "int16", shape = (13, 7, 4))#candidate|1802|(13, 7, 4)|var|int16
output = func_1801(var_1802)
func_1803 = relay.Function([var_1802], output)
mutated_mod['func_1803'] = func_1803
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1849 = relay.const([[[1.319012,4.018938,5.315948,2.458359,-7.349977,3.861566,2.911152,-4.450986],[4.231893,-0.130256,6.412113,-8.999050,-8.679598,-6.714443,1.217414,-2.118963],[-0.952455,3.729255,-9.130254,7.848597,-8.640395,8.015905,6.448024,-6.100635]],[[7.615315,-4.391743,2.753340,1.353587,-8.129778,-5.408610,5.733090,0.914884],[-2.069171,-5.304076,8.557291,0.614215,-4.593834,6.845475,4.183451,1.011573],[8.899558,1.972239,-5.261272,-0.573414,-3.402951,8.569483,5.291962,0.256043]],[[2.326650,0.972744,-3.302332,-8.113390,2.290915,-8.147698,-8.579975,-2.476394],[2.854169,-9.713112,-0.158818,-7.602245,-6.853585,5.324593,-3.211498,4.731727],[-4.996832,9.807938,-6.396244,3.907126,3.105537,-4.240812,1.086750,2.101827]],[[-8.421146,1.700591,-2.830481,-7.752224,0.387167,1.120943,-7.404778,4.324632],[1.040860,1.291013,-7.473006,6.141305,-5.873721,7.506883,-8.874730,-3.390256],[8.535657,-9.862317,-6.978519,-2.195566,-3.693913,3.940406,-3.369874,8.415160]],[[3.928118,8.373998,1.756758,-2.298795,-3.900058,-2.391790,-9.428229,-5.027543],[-7.055476,-4.517834,2.485144,-2.241768,-2.628953,-3.923144,-7.100510,-6.486298],[0.830508,7.032262,-5.742579,-5.058349,-4.882257,-3.936158,-5.159612,-6.253088]],[[5.613288,6.546527,3.713836,-6.349310,5.374582,-0.348006,-5.237053,-4.216037],[5.857158,-7.682397,0.508609,-4.751246,1.023814,-2.832047,0.504983,-5.991380],[6.181189,7.970213,9.342576,-5.428762,7.186890,-7.978186,2.775554,8.344302]],[[8.903928,3.239831,-3.676389,-1.230048,-1.375359,0.706091,2.087701,-1.278324],[9.016151,7.980402,8.432424,-1.406340,-8.143719,-6.146335,9.214132,-8.591858],[3.921617,6.234830,-7.131219,-7.117951,-6.987584,-1.182213,6.479712,7.825645]]], dtype = "float32")#candidate|1849|(7, 3, 8)|const|float32
uop_1850 = relay.asin(const_1849.astype('float32')) # shape=(7, 3, 8)
func_102_call = mod.get_global_var('func_102')
func_106_call = mutated_mod.get_global_var('func_106')
var_1874 = relay.var("var_1874", dtype = "int16", shape = (22,))#candidate|1874|(22,)|var|int16
var_1875 = relay.var("var_1875", dtype = "int16", shape = (308,))#candidate|1875|(308,)|var|int16
call_1873 = relay.TupleGetItem(func_102_call(relay.reshape(var_1874.astype('int16'), [1, 2, 11]), relay.reshape(var_1875.astype('int16'), [14, 2, 11]), ), 1)
call_1876 = relay.TupleGetItem(func_106_call(relay.reshape(var_1874.astype('int16'), [1, 2, 11]), relay.reshape(var_1875.astype('int16'), [14, 2, 11]), ), 1)
output = relay.Tuple([uop_1850,call_1873,var_1874,var_1875,])
output2 = relay.Tuple([uop_1850,call_1876,var_1874,var_1875,])
func_1899 = relay.Function([var_1874,var_1875,], output)
mod['func_1899'] = func_1899
mod = relay.transform.InferType()(mod)
var_1900 = relay.var("var_1900", dtype = "int16", shape = (22,))#candidate|1900|(22,)|var|int16
var_1901 = relay.var("var_1901", dtype = "int16", shape = (308,))#candidate|1901|(308,)|var|int16
output = func_1899(var_1900,var_1901,)
func_1902 = relay.Function([var_1900,var_1901,], output)
mutated_mod['func_1902'] = func_1902
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2097 = relay.var("var_2097", dtype = "float64", shape = (7, 15, 12))#candidate|2097|(7, 15, 12)|var|float64
uop_2098 = relay.log2(var_2097.astype('float64')) # shape=(7, 15, 12)
func_1349_call = mod.get_global_var('func_1349')
func_1352_call = mutated_mod.get_global_var('func_1352')
var_2103 = relay.var("var_2103", dtype = "float64", shape = (1, 84))#candidate|2103|(1, 84)|var|float64
call_2102 = relay.TupleGetItem(func_1349_call(relay.reshape(var_2103.astype('float64'), [12, 7, 1])), 0)
call_2104 = relay.TupleGetItem(func_1352_call(relay.reshape(var_2103.astype('float64'), [12, 7, 1])), 0)
bop_2107 = relay.subtract(var_2103.astype('int32'), relay.reshape(call_2102.astype('int32'), relay.shape_of(var_2103))) # shape=(1, 84)
bop_2110 = relay.subtract(var_2103.astype('int32'), relay.reshape(call_2104.astype('int32'), relay.shape_of(var_2103))) # shape=(1, 84)
func_1899_call = mod.get_global_var('func_1899')
func_1902_call = mutated_mod.get_global_var('func_1902')
const_2119 = relay.const([3,8,4,4,-9,1,-5,3,7,8,-8,9,-7,-3,-3,1,-2,9,3,1,10,-7], dtype = "int16")#candidate|2119|(22,)|const|int16
const_2120 = relay.const([3,-3,5,10,-5,-6,-8,-1,-8,7,8,-1,-3,9,6,-10,-7,-9,-6,6,-6,10,-3,2,-3,-9,1,9,8,4,7,-2,6,-7,-10,4,7,-1,-6,-4,-6,-1,2,2,8,-6,9,9,3,10,1,1,-9,-10,7,-5,6,1,5,-10,9,-8,-5,-8,5,2,-1,5,7,-6,-7,9,-10,-1,-4,-10,6,5,-6,-2,10,-8,6,4,9,10,-4,9,-9,-9,-1,10,-6,1,-8,5,-6,3,-6,-7,-7,-3,6,-5,2,10,4,3,6,3,6,4,-9,-3,-3,2,-7,-3,6,-8,3,-4,-9,-8,-2,9,-7,9,9,2,4,4,-8,-6,6,-5,-3,7,-7,-7,3,6,-8,-5,6,-8,1,4,10,4,-4,-8,-7,1,9,-2,1,-2,2,5,-7,2,9,-9,-6,7,-3,8,-10,-5,-6,-1,6,7,3,10,7,9,-8,6,-3,-5,-10,8,4,6,4,-9,3,10,10,-5,2,2,2,5,3,-6,4,2,9,10,-7,4,6,3,6,2,2,9,4,-3,-3,-1,-3,7,-10,5,-9,-7,-3,-1,-8,6,-9,-8,-8,-1,10,-9,2,6,4,-9,-2,-8,-7,-5,-3,9,-7,-6,-9,-5,-8,5,10,-6,-5,-9,-3,4,-7,-9,10,-4,-6,-2,-9,6,-3,9,-2,-10,-2,-4,8,-5,6,7,1,-3,-2,-3,-5,-8,10,4,4,9,-2,1,2,5,9,2,-3,-8,-3,6,10,6,3,1,3,5,4,5,3,2,2,-3,-10,-10,4,10,-9,-3], dtype = "int16")#candidate|2120|(308,)|const|int16
call_2118 = relay.TupleGetItem(func_1899_call(relay.reshape(const_2119.astype('int16'), [22,]), relay.reshape(const_2120.astype('int16'), [308,]), ), 3)
call_2121 = relay.TupleGetItem(func_1902_call(relay.reshape(const_2119.astype('int16'), [22,]), relay.reshape(const_2120.astype('int16'), [308,]), ), 3)
output = relay.Tuple([uop_2098,bop_2107,call_2118,const_2119,const_2120,])
output2 = relay.Tuple([uop_2098,bop_2110,call_2121,const_2119,const_2120,])
func_2131 = relay.Function([var_2097,var_2103,], output)
mod['func_2131'] = func_2131
mod = relay.transform.InferType()(mod)
var_2132 = relay.var("var_2132", dtype = "float64", shape = (7, 15, 12))#candidate|2132|(7, 15, 12)|var|float64
var_2133 = relay.var("var_2133", dtype = "float64", shape = (1, 84))#candidate|2133|(1, 84)|var|float64
output = func_2131(var_2132,var_2133,)
func_2134 = relay.Function([var_2132,var_2133,], output)
mutated_mod['func_2134'] = func_2134
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2398 = relay.var("var_2398", dtype = "float64", shape = (3, 11, 6))#candidate|2398|(3, 11, 6)|var|float64
var_2399 = relay.var("var_2399", dtype = "float64", shape = (3, 11, 6))#candidate|2399|(3, 11, 6)|var|float64
bop_2400 = relay.power(var_2398.astype('float64'), relay.reshape(var_2399.astype('float64'), relay.shape_of(var_2398))) # shape=(3, 11, 6)
uop_2403 = relay.cosh(var_2399.astype('float64')) # shape=(3, 11, 6)
func_1801_call = mod.get_global_var('func_1801')
func_1803_call = mutated_mod.get_global_var('func_1803')
var_2426 = relay.var("var_2426", dtype = "int16", shape = (182, 2))#candidate|2426|(182, 2)|var|int16
call_2425 = relay.TupleGetItem(func_1801_call(relay.reshape(var_2426.astype('int16'), [13, 7, 4])), 2)
call_2427 = relay.TupleGetItem(func_1803_call(relay.reshape(var_2426.astype('int16'), [13, 7, 4])), 2)
func_1899_call = mod.get_global_var('func_1899')
func_1902_call = mutated_mod.get_global_var('func_1902')
const_2435 = relay.const([6,-9,-6,6,-5,10,-5,2,7,-1,4,7,6,-10,2,10,-3,-10,4,-1,-5,4], dtype = "int16")#candidate|2435|(22,)|const|int16
const_2436 = relay.const([7,-6,-4,10,-6,-3,3,-4,-5,2,6,-3,4,-7,10,-5,-3,5,1,1,4,-4,1,-2,6,4,-9,-8,-7,-1,4,5,-9,5,8,7,-9,-8,2,-9,-3,10,-1,5,3,6,2,-7,2,10,9,1,-10,-8,-9,1,-1,-4,-9,-10,-6,2,-10,10,-2,-1,8,8,-10,-10,-5,-3,-2,-9,-7,-5,-7,-1,-7,-8,-9,-9,10,-7,-6,-1,10,7,10,-6,5,10,-10,9,-1,-6,8,9,5,-10,5,-1,-5,8,4,-4,5,3,4,3,-10,6,-6,-6,3,1,-7,-4,3,-10,7,-8,-10,8,-2,9,-3,8,10,-2,1,-2,8,-3,-9,7,-8,8,5,-2,-10,7,-6,5,-10,-10,10,1,9,6,8,-1,8,6,7,10,-1,-1,3,-4,2,-6,-7,8,-3,-3,10,9,5,-1,5,10,-8,4,8,6,5,10,-1,9,7,-4,6,-6,9,5,-9,-2,7,-10,-6,-5,-10,-3,7,4,-2,2,-2,-10,6,-6,2,3,6,6,-2,10,-10,-3,-5,-1,-5,-6,1,-1,1,3,-7,-5,-2,4,-2,3,7,8,-5,8,4,-9,10,-6,-9,-4,-7,-9,10,2,8,-5,-3,7,-4,8,-9,-6,8,9,1,6,-4,9,-8,7,8,3,7,-9,-6,-2,7,3,-10,-5,-6,10,-5,4,-10,1,5,1,-5,4,9,-4,3,-4,-10,5,7,7,-4,7,-4,-4,-2,2,7,-7,-1,3,-8,7,5,5,-9,5,-3,-9,-9,-5,-10,-8,-2,-5,8,7], dtype = "int16")#candidate|2436|(308,)|const|int16
call_2434 = relay.TupleGetItem(func_1899_call(relay.reshape(const_2435.astype('int16'), [22,]), relay.reshape(const_2436.astype('int16'), [308,]), ), 3)
call_2437 = relay.TupleGetItem(func_1902_call(relay.reshape(const_2435.astype('int16'), [22,]), relay.reshape(const_2436.astype('int16'), [308,]), ), 3)
bop_2450 = relay.divide(uop_2403.astype('float64'), relay.reshape(var_2399.astype('float64'), relay.shape_of(uop_2403))) # shape=(3, 11, 6)
func_216_call = mod.get_global_var('func_216')
func_220_call = mutated_mod.get_global_var('func_220')
const_2455 = relay.const(-5.084903, dtype = "float32")#candidate|2455|()|const|float32
call_2454 = relay.TupleGetItem(func_216_call(relay.reshape(const_2455.astype('float32'), []), relay.reshape(const_2435.astype('int16'), [22,]), relay.reshape(const_2436.astype('int16'), [308,]), ), 1)
call_2456 = relay.TupleGetItem(func_220_call(relay.reshape(const_2455.astype('float32'), []), relay.reshape(const_2435.astype('int16'), [22,]), relay.reshape(const_2436.astype('int16'), [308,]), ), 1)
output = relay.Tuple([bop_2400,call_2425,var_2426,call_2434,const_2435,const_2436,bop_2450,call_2454,const_2455,])
output2 = relay.Tuple([bop_2400,call_2427,var_2426,call_2437,const_2435,const_2436,bop_2450,call_2456,const_2455,])
func_2466 = relay.Function([var_2398,var_2399,var_2426,], output)
mod['func_2466'] = func_2466
mod = relay.transform.InferType()(mod)
mutated_mod['func_2466'] = func_2466
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2466_call = mutated_mod.get_global_var('func_2466')
var_2468 = relay.var("var_2468", dtype = "float64", shape = (3, 11, 6))#candidate|2468|(3, 11, 6)|var|float64
var_2469 = relay.var("var_2469", dtype = "float64", shape = (3, 11, 6))#candidate|2469|(3, 11, 6)|var|float64
var_2470 = relay.var("var_2470", dtype = "int16", shape = (182, 2))#candidate|2470|(182, 2)|var|int16
call_2467 = func_2466_call(var_2468,var_2469,var_2470,)
output = call_2467
func_2471 = relay.Function([var_2468,var_2469,var_2470,], output)
mutated_mod['func_2471'] = func_2471
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2734 = relay.var("var_2734", dtype = "float32", shape = (9, 9, 1))#candidate|2734|(9, 9, 1)|var|float32
const_2735 = relay.const([[[-6.994114,6.428945,-1.940360,0.089274,1.155182,-8.499235,-3.411639,-9.748866,2.864334,5.701525,1.089515],[-8.285592,-5.888256,-5.853071,4.445487,3.482166,9.271812,-0.359273,4.806727,-0.326830,3.908526,-6.413565],[-4.871525,-0.907836,-5.803253,1.725069,9.763707,-4.645215,-0.643210,6.913258,-4.854308,8.406135,5.210518],[-8.298421,8.144590,4.528296,8.220618,-4.262875,9.051678,8.785522,-8.368217,3.254940,-9.151417,-4.156331],[-4.216062,0.427183,-2.736935,-2.588532,-8.977445,-8.258005,8.262716,0.038317,-0.211199,4.366543,-2.869036],[1.173261,8.990144,-8.266741,-0.780975,-5.106792,-4.301386,9.309413,-6.020451,-6.786741,-7.616481,1.779491],[3.444061,-3.735914,-1.805002,2.058683,8.225119,-6.083064,3.320348,-4.727067,1.172639,9.640945,-5.483063],[-3.460573,-9.881056,-0.194101,-8.821390,9.277808,-8.230179,0.265427,9.248467,9.811747,4.454069,3.191280],[6.579538,-2.032734,-4.338782,-1.680497,-4.013528,0.694137,-7.143964,-1.319350,2.082597,-8.537415,6.732954]],[[4.430552,-8.865461,3.434158,-2.058708,-0.989130,3.734688,-5.592721,-6.410966,-2.735458,5.408044,-2.105861],[4.831919,-7.097691,-9.164182,-4.670981,-9.213066,-8.455813,1.506414,-3.100105,-6.786329,3.144523,5.614556],[9.135464,-5.238621,0.471150,0.742447,1.371548,-4.198948,-2.987526,-9.307151,-7.152211,-9.148051,2.192486],[0.586617,6.002253,4.639118,7.180634,-8.491682,-6.334927,-4.211941,-8.979260,7.036607,5.764038,-6.117118],[-6.328024,-7.990084,6.866382,7.903842,-7.756322,0.456894,-7.292158,-9.524605,6.099361,-4.472236,-0.105873],[3.872945,4.398448,-8.886357,-1.936741,-1.622646,-7.714511,-2.018060,7.035117,-1.990907,-0.852506,9.453672],[-2.817144,-9.512660,-4.532307,-6.356498,1.130542,0.024218,-3.250941,4.565615,-9.828465,-7.948214,1.245307],[0.781010,-6.722569,-5.119007,8.589314,-8.144148,-5.322532,0.286370,9.616009,1.140555,-6.835758,9.832230],[-1.917719,7.487236,-4.546719,2.722451,-6.826340,-7.491282,7.534864,7.221225,-7.057740,-6.970588,-1.056557]],[[4.457182,0.603612,7.592490,-9.303090,9.120552,5.992491,9.955755,-7.260393,6.099611,6.035451,2.346444],[9.619802,9.142627,-3.586336,-0.786952,-3.285280,8.765041,-0.327967,8.509481,2.883785,8.684486,4.078850],[3.235971,-3.584918,7.413752,-7.986945,-5.824964,5.738907,-6.074786,7.398980,1.109741,-9.441946,-2.174177],[6.158624,9.367390,-6.179333,6.603025,-0.949561,0.857097,-5.914346,-4.412773,9.671118,-4.950330,5.060989],[0.042668,0.066365,-2.058214,7.547864,-3.519484,-1.922889,2.283655,-0.366419,-7.407587,3.235423,0.154223],[-9.901559,6.062399,-6.962849,7.366673,-8.852520,7.600408,5.104916,7.910491,-9.035405,5.964270,-8.852005],[3.281168,6.840222,7.946660,0.300731,-7.287952,-3.191738,7.427271,7.303622,-7.226281,9.789690,1.598002],[8.588393,0.101360,-4.943824,-1.759851,-8.436798,-3.754270,-3.586998,-3.274444,-0.056008,8.232069,-1.900321],[-9.638108,8.018307,3.330380,-2.377745,4.095709,-7.424831,2.889805,8.432343,5.399394,0.057191,-9.352326]],[[9.638195,2.296661,0.035325,-2.552259,0.748010,-7.093600,-7.015612,-8.954343,-1.070442,-5.312130,-6.906845],[-6.582893,-2.764333,5.486685,0.762019,5.722139,7.251362,-9.190672,9.646634,-0.562660,3.691111,-3.047219],[5.594653,-4.872068,-4.250579,-2.184717,-5.663119,6.901780,-6.385191,-7.258688,-8.255430,-5.125919,-7.012637],[-2.772102,2.717772,3.132037,7.729516,-9.891834,-7.301719,0.843484,-4.337895,8.348829,-6.193558,1.888700],[-3.417414,-7.446300,6.559295,-1.809249,3.347138,9.503060,2.147983,-7.973794,-4.209940,4.626906,9.389732],[-0.781290,-1.761096,7.268448,-2.285807,9.722322,-1.350545,1.078803,-1.134704,-2.417681,-6.536136,1.074432],[-0.504195,8.112552,-7.264875,8.244237,8.473152,3.758542,0.548678,-4.173594,4.599026,-6.540639,4.864452],[5.513645,4.311349,3.111483,-8.639132,-1.479889,-7.244623,1.913677,-1.184826,6.161419,-2.942343,-8.510507],[4.573215,9.417589,-5.473693,-3.261300,3.310990,-2.541026,7.991847,3.467382,-3.147278,-7.109574,7.984138]],[[6.012281,-5.553986,1.230363,-6.657623,4.295552,-2.079810,-2.971494,-4.824754,-0.065278,6.276540,4.679406],[-7.420498,-0.613753,-7.344634,-4.983794,-4.987672,2.365737,-2.197986,-9.859712,-2.983538,-7.578684,-5.375923],[-1.972860,7.821981,3.021918,6.965275,-4.221778,3.512909,-0.116688,2.424317,0.608696,-0.152398,1.538215],[4.881552,9.535314,9.987200,-6.501394,9.342836,-9.565359,6.107123,2.661270,-6.522785,-0.399196,-5.635685],[0.972054,2.803768,3.566131,-6.025379,-4.997125,-6.006637,9.046958,3.458889,-4.874479,-9.533360,-0.590016],[-2.078956,-1.164392,6.315574,-6.295991,5.807919,9.707483,-6.282902,3.251375,4.868139,-2.898242,9.361930],[0.689843,7.116371,6.306893,3.015792,2.970618,6.123435,-5.476231,-7.595086,-0.353513,5.386942,2.291218],[5.942131,-7.371846,-8.459741,-1.106273,-5.897178,2.664763,2.985555,-5.483672,-8.906463,-6.512478,7.819930],[-6.896091,6.290273,-3.573565,-7.338315,-9.278136,-5.391105,4.538849,2.605447,-6.399162,2.828506,1.958219]],[[7.603107,9.811628,5.133602,8.648102,2.175783,4.120351,8.879584,2.867826,2.420061,4.698512,-0.130284],[-4.995682,-8.840220,5.986463,-5.450124,1.048816,-0.061399,6.185797,-9.918269,1.567586,-2.270745,7.023436],[-6.406919,-0.592193,-8.882108,4.909035,-1.881251,7.785413,-6.967434,-5.692215,7.309326,-0.750368,3.431467],[-5.211129,3.153050,5.244814,-8.610748,9.747582,6.595940,-6.145629,6.909411,-3.706968,8.820190,-7.574496],[-1.472432,0.653473,-9.633407,-4.867540,1.995170,-2.877324,-6.481912,1.350023,-4.836007,9.880290,-7.679104],[6.525353,3.838337,7.691441,3.552672,-7.073780,-1.465280,-9.298148,-7.420137,-9.542354,2.681023,-8.766614],[-0.014345,-0.297196,-0.575631,-9.636007,1.837755,-9.183455,0.958990,6.273956,0.097630,5.252728,4.237054],[9.232148,-8.471843,-9.685209,-0.600869,7.339619,-4.670310,6.136780,5.758497,5.746835,1.191938,5.067109],[9.689079,-8.961540,-4.085146,-3.624259,9.096266,9.024375,-6.832901,9.674768,-0.075920,0.190536,-8.339187]],[[6.253562,9.816919,-6.091901,-5.694119,8.662413,-5.210447,3.438187,4.739386,1.885974,3.888927,-6.350690],[-2.201902,-7.246823,-4.154655,4.147122,-4.828895,-8.790592,1.559011,-7.441350,-8.141410,6.094157,3.559863],[-1.598674,-2.309846,3.726490,-0.155415,1.602053,2.303668,-6.880048,-6.041703,-6.843828,-3.475472,-8.233115],[1.707719,-7.327362,-0.409326,9.449636,-3.175248,1.111257,0.143109,-5.847492,-2.526930,-9.331354,5.196393],[-9.248497,-3.397484,-4.337601,3.559429,-5.954101,1.807285,6.027211,-4.353555,-1.878316,-0.539971,7.513564],[-5.999393,0.477410,-7.933528,9.989721,-1.134953,9.910362,-1.285459,-5.547507,-5.485145,1.888806,0.107461],[5.313165,8.582603,-5.862862,5.987412,4.552649,1.513650,7.461015,-2.520363,6.868885,-3.653178,3.342682],[-5.066079,-2.216447,-2.721710,-9.107408,-8.753629,7.942322,7.584602,3.075131,6.489678,8.683278,-5.294729],[-6.319225,0.362494,5.144220,-1.745027,-3.878259,-1.507313,1.810566,-8.857138,-8.449602,-4.898586,-7.344089]],[[8.999406,-4.622039,-7.784805,4.262157,-3.941308,0.223606,8.320583,4.023780,1.375797,-9.344751,6.649285],[-8.797758,-6.891375,-8.577627,-4.009234,-9.055848,7.451150,2.296522,-0.842215,-0.673661,-2.199198,-0.427952],[-3.061450,-3.481609,-1.267380,-0.960338,-1.235648,0.844749,2.064137,8.363945,2.682442,-0.775320,0.671659],[-1.686913,-1.859055,-0.884367,3.217379,8.567961,5.301689,3.477969,-1.356615,9.000823,0.200365,0.156899],[-6.070050,-5.391758,3.715951,-9.650942,-1.065482,-5.441873,0.526696,-5.664719,-2.266755,5.818670,6.506024],[1.196562,-0.072810,-0.049028,5.432187,-5.385925,3.140650,3.834542,9.282810,0.876418,7.086887,5.164526],[-4.470167,1.112360,0.290103,-4.405119,3.483573,-6.347485,-1.965515,5.019581,9.371821,-9.983023,5.032671],[3.593225,3.479885,-0.250199,-8.225150,-8.446875,3.606094,8.287348,-2.341431,2.754701,8.296215,8.387763],[6.797958,-7.063866,-2.500590,4.862595,-4.743237,0.150697,8.780728,-0.781812,3.707814,-4.838415,-0.491870]],[[5.987053,-7.156887,7.575127,-3.931483,3.464077,3.150809,-0.466548,-2.469359,7.797142,-3.865327,8.221420],[3.026816,-4.295600,-3.004119,2.143932,-4.799291,3.731113,-7.513195,1.797923,5.314613,-5.100071,-6.945063],[-8.553154,-9.790083,9.540149,-7.031487,-5.711128,0.077361,-0.241351,3.749787,-1.740554,-6.163060,-1.904270],[-1.898963,-0.156336,6.286492,4.721910,1.020555,-8.021471,4.408224,8.956060,-2.355097,1.456629,-6.548624],[3.155050,-9.074905,9.509059,6.769844,7.911587,2.662984,3.073650,-8.170467,-1.658432,6.571167,5.116309],[5.707542,-0.700939,-5.151989,3.254641,-1.613537,-5.390055,-4.607977,6.347841,-7.686177,-2.873214,-6.652239],[-4.729237,-9.231307,1.473837,8.103835,-9.062610,1.111759,1.798655,1.643836,-3.104981,1.406601,-1.088049],[-5.869371,-8.770145,-5.901780,0.308721,-3.017192,3.752947,-0.004033,-7.142210,1.438126,-1.616290,-1.809952],[-3.032613,-3.909668,6.659589,7.218181,-9.884336,4.752447,-4.273935,9.280034,5.489403,4.891337,-6.330637]]], dtype = "float32")#candidate|2735|(9, 9, 11)|const|float32
bop_2736 = relay.mod(var_2734.astype('float32'), const_2735.astype('float32')) # shape=(9, 9, 11)
output = bop_2736
output2 = bop_2736
func_2741 = relay.Function([var_2734,], output)
mod['func_2741'] = func_2741
mod = relay.transform.InferType()(mod)
mutated_mod['func_2741'] = func_2741
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2742 = relay.var("var_2742", dtype = "float32", shape = (9, 9, 1))#candidate|2742|(9, 9, 1)|var|float32
func_2741_call = mutated_mod.get_global_var('func_2741')
call_2743 = func_2741_call(var_2742)
output = call_2743
func_2744 = relay.Function([var_2742], output)
mutated_mod['func_2744'] = func_2744
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2765 = relay.var("var_2765", dtype = "float32", shape = (15, 1, 15))#candidate|2765|(15, 1, 15)|var|float32
uop_2766 = relay.atanh(var_2765.astype('float32')) # shape=(15, 1, 15)
func_880_call = mod.get_global_var('func_880')
func_883_call = mutated_mod.get_global_var('func_883')
var_2772 = relay.var("var_2772", dtype = "float64", shape = (168,))#candidate|2772|(168,)|var|float64
var_2773 = relay.var("var_2773", dtype = "float64", shape = (2352,))#candidate|2773|(2352,)|var|float64
call_2771 = relay.TupleGetItem(func_880_call(relay.reshape(var_2772.astype('float64'), [1, 14, 12]), relay.reshape(var_2773.astype('float64'), [14, 14, 12]), ), 1)
call_2774 = relay.TupleGetItem(func_883_call(relay.reshape(var_2772.astype('float64'), [1, 14, 12]), relay.reshape(var_2773.astype('float64'), [14, 14, 12]), ), 1)
bop_2775 = relay.less_equal(uop_2766.astype('bool'), relay.reshape(var_2765.astype('bool'), relay.shape_of(uop_2766))) # shape=(15, 1, 15)
func_1349_call = mod.get_global_var('func_1349')
func_1352_call = mutated_mod.get_global_var('func_1352')
const_2783 = relay.const([6.665475,9.662452,0.323009,1.066736,2.925791,-8.603348,2.643459,6.231313,3.656106,6.029808,-6.145151,-6.419898,-1.419132,4.928076,3.497787,-3.679815,3.344751,3.005323,-2.589716,7.279676,-6.583558,-5.120821,-5.156473,7.254783,-0.052231,-2.192828,2.963228,4.647576,-4.678818,9.531867,-3.527220,-1.522377,3.206217,-8.368439,4.549385,5.494493,-3.352327,7.053811,0.276265,-4.504795,8.477953,6.075608,0.150596,-3.480220,2.879126,5.097183,-6.301493,9.658920,-7.178516,2.345503,2.003836,4.336406,-4.088497,7.658998,-6.777694,4.601054,-7.551239,-7.123120,-1.056116,7.696501,-9.419255,7.194632,3.402593,-5.576833,-2.923980,7.262413,-4.379282,9.577746,5.444333,7.633430,4.203620,5.029601,4.728252,0.696273,-1.100443,2.329776,-0.782001,8.514273,3.829281,4.397343,7.436426,-9.066692,2.728564,6.337385], dtype = "float64")#candidate|2783|(84,)|const|float64
call_2782 = relay.TupleGetItem(func_1349_call(relay.reshape(const_2783.astype('float64'), [12, 7, 1])), 0)
call_2784 = relay.TupleGetItem(func_1352_call(relay.reshape(const_2783.astype('float64'), [12, 7, 1])), 0)
output = relay.Tuple([call_2771,var_2772,var_2773,bop_2775,call_2782,const_2783,])
output2 = relay.Tuple([call_2774,var_2772,var_2773,bop_2775,call_2784,const_2783,])
func_2791 = relay.Function([var_2765,var_2772,var_2773,], output)
mod['func_2791'] = func_2791
mod = relay.transform.InferType()(mod)
mutated_mod['func_2791'] = func_2791
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2791_call = mutated_mod.get_global_var('func_2791')
var_2793 = relay.var("var_2793", dtype = "float32", shape = (15, 1, 15))#candidate|2793|(15, 1, 15)|var|float32
var_2794 = relay.var("var_2794", dtype = "float64", shape = (168,))#candidate|2794|(168,)|var|float64
var_2795 = relay.var("var_2795", dtype = "float64", shape = (2352,))#candidate|2795|(2352,)|var|float64
call_2792 = func_2791_call(var_2793,var_2794,var_2795,)
output = call_2792
func_2796 = relay.Function([var_2793,var_2794,var_2795,], output)
mutated_mod['func_2796'] = func_2796
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3246 = relay.var("var_3246", dtype = "float64", shape = (11, 6, 14))#candidate|3246|(11, 6, 14)|var|float64
uop_3247 = relay.asinh(var_3246.astype('float64')) # shape=(11, 6, 14)
func_1899_call = mod.get_global_var('func_1899')
func_1902_call = mutated_mod.get_global_var('func_1902')
const_3250 = relay.const([-5,9,6,3,3,-5,-6,-4,1,8,4,-10,-10,4,6,5,-10,-1,2,6,-7,4], dtype = "int16")#candidate|3250|(22,)|const|int16
const_3251 = relay.const([2,-2,4,4,8,-3,-10,-2,2,9,8,-9,-7,-7,-10,8,4,2,8,10,-2,8,3,6,4,1,7,8,4,4,2,6,4,4,8,7,8,-1,-9,-4,-2,-7,-5,-2,10,5,-10,10,10,7,7,-5,1,-3,5,-5,4,-8,7,-10,-6,1,-5,-1,4,-1,1,-5,6,-3,9,9,-10,-4,7,-5,8,-10,-8,6,-10,-2,-6,3,7,2,6,9,8,-4,-7,9,-9,-8,3,-9,-4,-2,-10,-2,-3,-2,6,6,7,1,2,-1,3,6,-5,9,-5,-10,7,1,6,10,7,10,-9,1,-4,-2,2,-5,4,8,4,-6,2,3,-1,2,1,3,4,3,6,5,5,9,-1,-1,-7,-7,2,-6,5,2,-9,-7,-1,-9,8,-7,3,2,-2,-8,-10,5,7,7,-1,-7,6,-3,4,5,7,5,-5,3,-10,6,10,-1,5,6,-7,-6,6,-3,5,-2,-8,-4,2,2,-10,1,10,-6,8,-10,-4,-1,10,-1,-1,-7,8,4,1,-3,4,3,-5,-10,-1,-9,1,-5,5,-5,-1,-5,-6,-10,-7,-7,8,-7,-9,6,-9,4,9,2,9,10,10,8,6,-10,-2,4,-7,5,-7,-5,-7,10,-10,2,8,9,9,3,-5,8,9,1,2,1,6,10,5,-1,-2,4,7,9,1,1,4,5,-1,1,-2,-7,-8,-4,-6,-10,10,-8,7,10,9,6,-1,9,9,9,2,-10,2,-5,-8,9,-9,2,-6,6,4,-9,4,8,7,3,-3,4,-6,4,-6,-2], dtype = "int16")#candidate|3251|(308,)|const|int16
call_3249 = relay.TupleGetItem(func_1899_call(relay.reshape(const_3250.astype('int16'), [22,]), relay.reshape(const_3251.astype('int16'), [308,]), ), 2)
call_3252 = relay.TupleGetItem(func_1902_call(relay.reshape(const_3250.astype('int16'), [22,]), relay.reshape(const_3251.astype('int16'), [308,]), ), 2)
output = relay.Tuple([uop_3247,call_3249,const_3250,const_3251,])
output2 = relay.Tuple([uop_3247,call_3252,const_3250,const_3251,])
func_3254 = relay.Function([var_3246,], output)
mod['func_3254'] = func_3254
mod = relay.transform.InferType()(mod)
mutated_mod['func_3254'] = func_3254
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3255 = relay.var("var_3255", dtype = "float64", shape = (11, 6, 14))#candidate|3255|(11, 6, 14)|var|float64
func_3254_call = mutated_mod.get_global_var('func_3254')
call_3256 = func_3254_call(var_3255)
output = call_3256
func_3257 = relay.Function([var_3255], output)
mutated_mod['func_3257'] = func_3257
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3508 = relay.const([[[-4.170483,1.991871,1.219468,-2.536633,-8.846279,2.327177],[-1.181126,9.398861,7.522174,0.221354,1.210573,-2.726135],[9.203208,-4.206699,-0.742500,-9.700643,7.973224,-2.838984],[-6.006721,6.439467,-1.960241,-5.657515,1.292163,7.679936],[-8.732156,-0.258468,-7.771945,3.574214,-4.035515,4.957747],[8.673818,-9.874749,-4.855005,-1.337707,9.709040,3.569016],[-1.238082,1.801652,2.111250,-5.259137,4.291515,7.593385],[2.060629,0.874229,-8.110592,-0.902741,-1.884165,-4.738581],[-2.517652,3.695148,7.748886,7.426572,6.786006,2.994864],[3.900257,-7.408148,-9.926015,-0.492107,-9.838132,0.249716],[5.565107,0.726183,-7.218465,-1.518810,-7.044853,1.694840]],[[-6.633854,6.904269,4.842427,-3.696247,-8.415929,3.986451],[-3.639223,-6.481231,9.291506,-6.118159,9.732779,7.611198],[6.751526,-6.011127,6.821948,5.221286,-0.269971,1.771436],[3.250000,-0.765844,1.850887,-6.941162,-6.282497,-3.734766],[6.582354,-8.150847,-6.773825,-2.940609,1.111168,2.366810],[-2.816367,-8.512871,8.577011,-3.539817,5.180479,-9.649409],[-5.652160,-5.291964,0.098400,8.451637,5.743487,-2.793658],[8.830383,-1.624611,3.858666,3.051843,-6.018985,3.187257],[-4.739902,9.254788,-5.771761,-4.502087,-7.441581,0.380476],[3.739341,-6.106571,-2.787578,1.375980,-9.093885,-6.394023],[4.948212,2.370019,7.108287,-8.239684,6.085384,0.282278]],[[0.454382,-4.782432,7.295355,-6.889376,-5.399931,6.049743],[4.931069,-6.925286,-0.937075,8.412572,4.571210,-9.707725],[6.484835,-8.060457,-0.939157,5.019319,7.029434,2.450698],[9.616634,1.546705,2.858123,2.237174,7.170970,-2.138411],[-6.124709,-1.434597,-2.937490,0.737753,9.074088,-0.273219],[3.928485,7.719696,-4.481555,4.697305,-1.677227,9.976160],[-4.290764,-1.425457,7.190672,3.657970,8.599529,7.320539],[-5.649732,7.815693,-0.633519,8.684947,5.327033,-3.301172],[-7.631041,-4.552410,-7.342640,-1.772371,-7.622611,8.120673],[4.471417,8.798418,-9.312581,-9.862234,9.480164,-8.855001],[-9.227562,-7.177426,-8.437331,8.327758,-8.712494,-7.721183]],[[6.473164,3.522528,4.407570,4.982265,-8.656163,2.213254],[0.653653,8.686607,-7.825338,-5.939540,-5.815389,-1.138758],[3.373513,4.766462,4.022731,5.408201,-9.267118,-1.701871],[1.199119,-6.903174,9.705115,-9.100988,7.765117,3.040818],[1.763257,-9.176739,-4.503348,-2.017703,-3.371605,-7.420929],[2.431715,5.596437,-5.965008,-3.750110,0.891220,5.310082],[-6.202713,-8.540436,-6.530309,7.773749,4.131273,3.095348],[5.389278,-9.762509,0.334266,9.393018,-8.354500,-1.610502],[3.154179,-0.631977,8.309666,0.491821,8.480670,1.379224],[0.284366,7.161725,9.182078,3.263310,-3.829297,-6.331808],[-3.104714,6.125269,-9.598597,9.616358,-3.255548,8.178257]],[[-9.975052,8.324642,-4.753611,1.638615,-4.446819,-0.031676],[0.251086,-8.569625,4.038508,3.312759,-7.688100,-4.758911],[-6.006354,-6.351667,9.284231,-8.456091,-5.401719,8.343548],[-8.938668,2.747320,8.470182,-9.825676,0.307221,9.816798],[-7.930943,-3.634827,2.471494,5.636865,-1.864558,-5.567888],[3.088723,9.272176,-5.523269,-4.089978,2.953879,2.236522],[-5.506175,1.455630,-2.663108,-3.438066,1.481172,-7.531045],[-9.991397,-8.086199,6.525772,-9.772084,5.090544,2.806768],[9.387241,1.950430,7.098042,9.493005,-2.818406,8.668337],[7.060754,4.207501,-0.433681,0.248131,-3.392990,9.652734],[-2.633420,-7.744056,-4.767360,-5.567802,-1.829589,-5.477895]],[[-5.574435,5.694296,5.873232,-0.125046,-1.515104,1.273572],[6.277048,3.571799,2.391224,7.641432,8.835847,8.836085],[7.589829,8.298636,7.093983,4.994593,6.818846,9.162978],[2.727928,-9.735837,9.640117,-1.584454,-8.747988,-2.009480],[1.890912,-5.266665,-6.266871,-4.428185,4.163622,8.234420],[4.571976,-4.526828,9.672070,2.017381,3.444275,-7.784871],[-9.053300,6.803897,6.685063,-7.175173,-1.726661,8.874267],[-3.903230,-8.270832,4.377381,6.534621,2.971612,8.570531],[0.665454,3.989801,-1.498520,9.834812,3.973826,-5.838896],[9.239955,8.790421,3.925010,-5.738395,-5.009971,8.777089],[-2.735705,-9.009319,-3.848698,-8.559500,1.880666,0.665489]],[[1.254133,-9.002870,1.425499,4.146710,7.127525,-4.401827],[5.794506,-1.037605,-7.903504,5.251760,-7.727830,-9.160965],[-3.969162,-9.300136,-4.836354,5.689838,1.268060,-9.974956],[-4.014238,8.249015,-5.293149,-6.780416,-9.716815,8.588451],[-0.090491,8.639716,9.123657,-9.391884,-7.057520,9.265195],[-7.377831,-3.763428,-1.986011,-7.763702,9.045592,-7.442684],[-4.040269,8.520025,0.845753,0.388057,-8.365169,8.704086],[-9.672218,2.182210,-4.066892,9.374997,1.528324,-0.116620],[8.061602,1.648030,-8.048064,-2.343263,-0.676867,6.882560],[0.683956,-7.738672,1.920384,9.598362,2.474993,-4.919348],[5.345893,-4.732439,-5.921729,-7.983286,7.055216,-5.493909]]], dtype = "float32")#candidate|3508|(7, 11, 6)|const|float32
uop_3509 = relay.rsqrt(const_3508.astype('float32')) # shape=(7, 11, 6)
bop_3512 = relay.maximum(uop_3509.astype('float64'), relay.reshape(const_3508.astype('float64'), relay.shape_of(uop_3509))) # shape=(7, 11, 6)
output = bop_3512
output2 = bop_3512
func_3515 = relay.Function([], output)
mod['func_3515'] = func_3515
mod = relay.transform.InferType()(mod)
mutated_mod['func_3515'] = func_3515
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3515_call = mutated_mod.get_global_var('func_3515')
call_3516 = func_3515_call()
output = call_3516
func_3517 = relay.Function([], output)
mutated_mod['func_3517'] = func_3517
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3515_call = mod.get_global_var('func_3515')
func_3517_call = mutated_mod.get_global_var('func_3517')
call_3521 = func_3515_call()
call_3522 = func_3515_call()
output = relay.Tuple([call_3521,])
output2 = relay.Tuple([call_3522,])
func_3524 = relay.Function([], output)
mod['func_3524'] = func_3524
mod = relay.transform.InferType()(mod)
mutated_mod['func_3524'] = func_3524
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3524_call = mutated_mod.get_global_var('func_3524')
call_3525 = func_3524_call()
output = call_3525
func_3526 = relay.Function([], output)
mutated_mod['func_3526'] = func_3526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3524_call = mod.get_global_var('func_3524')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_3535 = relay.TupleGetItem(func_3524_call(), 0)
call_3536 = relay.TupleGetItem(func_3526_call(), 0)
func_216_call = mod.get_global_var('func_216')
func_220_call = mutated_mod.get_global_var('func_220')
const_3547 = relay.const(-9.538758, dtype = "float32")#candidate|3547|()|const|float32
var_3548 = relay.var("var_3548", dtype = "int16", shape = (22,))#candidate|3548|(22,)|var|int16
const_3549 = relay.const([[-10,2,-1,1],[1,-1,-9,1],[-6,-4,3,8],[5,6,4,8],[6,9,3,3],[7,3,6,4],[1,2,5,7],[-8,1,8,5],[-1,3,8,10],[-4,9,-8,-2],[2,-4,-4,8],[5,-5,1,9],[8,-6,2,10],[-2,5,-4,1],[-3,-5,-6,-10],[-4,-4,-8,-7],[-6,3,-10,3],[-3,-1,5,5],[7,-4,6,-3],[-2,-5,1,7],[6,7,-2,-7],[-7,2,-10,-10],[8,9,-2,4],[1,-6,-3,2],[-2,5,-1,7],[-1,-2,5,-6],[-9,-8,-9,-5],[-4,-5,-4,6],[7,-8,-4,-6],[5,5,-1,-4],[8,-1,6,7],[7,-9,-10,6],[8,6,2,-8],[2,-8,6,3],[-6,1,2,-2],[-2,1,5,9],[-5,7,7,-4],[-9,-3,-4,9],[3,-4,9,-4],[-6,-1,4,4],[5,7,-7,10],[-3,8,-1,1],[-6,7,-10,6],[-5,7,-7,1],[4,-1,-8,6],[-5,-3,3,10],[-9,-5,-7,-3],[8,-6,-2,-4],[-2,7,9,5],[10,-2,-4,-2],[-1,-9,10,3],[-3,2,5,-2],[-4,-10,2,8],[-5,-3,-5,9],[-4,4,-2,3],[-7,1,-2,10],[-9,10,6,-3],[10,-8,-1,-9],[-7,10,-2,-7],[7,-1,-10,-8],[9,-2,5,6],[9,8,-2,6],[2,3,10,-10],[-7,-7,-2,-5],[4,8,3,5],[-9,-4,4,2],[-8,7,-4,-7],[10,5,-1,-4],[10,-4,-7,4],[4,7,-2,3],[6,9,6,1],[10,-7,10,3],[3,-2,-8,6],[-6,1,6,9],[-1,3,4,3],[-2,2,2,-2],[7,-5,2,-7]], dtype = "int16")#candidate|3549|(77, 4)|const|int16
call_3546 = relay.TupleGetItem(func_216_call(relay.reshape(const_3547.astype('float32'), []), relay.reshape(var_3548.astype('int16'), [22,]), relay.reshape(const_3549.astype('int16'), [308,]), ), 3)
call_3550 = relay.TupleGetItem(func_220_call(relay.reshape(const_3547.astype('float32'), []), relay.reshape(var_3548.astype('int16'), [22,]), relay.reshape(const_3549.astype('int16'), [308,]), ), 3)
output = relay.Tuple([call_3535,call_3546,const_3547,var_3548,const_3549,])
output2 = relay.Tuple([call_3536,call_3550,const_3547,var_3548,const_3549,])
func_3554 = relay.Function([var_3548,], output)
mod['func_3554'] = func_3554
mod = relay.transform.InferType()(mod)
mutated_mod['func_3554'] = func_3554
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3555 = relay.var("var_3555", dtype = "int16", shape = (22,))#candidate|3555|(22,)|var|int16
func_3554_call = mutated_mod.get_global_var('func_3554')
call_3556 = func_3554_call(var_3555)
output = call_3556
func_3557 = relay.Function([var_3555], output)
mutated_mod['func_3557'] = func_3557
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3515_call = mod.get_global_var('func_3515')
func_3517_call = mutated_mod.get_global_var('func_3517')
call_3579 = func_3515_call()
call_3580 = func_3515_call()
output = call_3579
output2 = call_3580
func_3581 = relay.Function([], output)
mod['func_3581'] = func_3581
mod = relay.transform.InferType()(mod)
mutated_mod['func_3581'] = func_3581
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3581_call = mutated_mod.get_global_var('func_3581')
call_3582 = func_3581_call()
output = call_3582
func_3583 = relay.Function([], output)
mutated_mod['func_3583'] = func_3583
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3524_call = mod.get_global_var('func_3524')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_3643 = relay.TupleGetItem(func_3524_call(), 0)
call_3644 = relay.TupleGetItem(func_3526_call(), 0)
uop_3649 = relay.atanh(call_3643.astype('float32')) # shape=(7, 11, 6)
uop_3651 = relay.atanh(call_3644.astype('float32')) # shape=(7, 11, 6)
func_2466_call = mod.get_global_var('func_2466')
func_2471_call = mutated_mod.get_global_var('func_2471')
const_3654 = relay.const([-2.027192,-3.033136,-5.681649,-1.724552,-1.831189,-0.617727,-1.814146,9.558885,-1.736421,2.462646,3.803565,-2.791692,2.840745,2.945721,6.792283,4.747170,-0.258946,7.875129,-4.964237,0.189841,-5.648284,1.290900,8.317963,-6.249280,-9.732563,-6.745403,-7.203486,3.890378,-3.053223,-6.019556,1.057193,7.073716,0.143594,8.956215,-1.873662,-9.228419,-4.683421,9.443027,-5.664313,1.194693,6.820781,4.053970,-4.868568,-3.472912,6.752254,0.748511,-6.713352,0.458030,5.494421,8.807250,9.878767,-1.911408,0.152491,7.303649,-5.326996,-6.797598,-8.768532,5.777589,7.571967,9.919925,-6.516588,2.070596,1.719805,-4.737848,3.852715,-2.522774,-5.782724,-2.381291,-6.508531,0.924712,-8.080833,6.806927,7.110031,-0.280972,-2.537531,-3.426021,-4.660907,7.180448,-0.520019,-0.300242,5.840733,-1.529379,7.228822,2.717488,6.940754,-6.190457,6.142741,-7.466884,-9.613395,0.923784,3.840750,8.347269,7.974953,0.407693,7.513858,-0.569585,2.633590,-3.682366,1.068123,-9.504623,-4.772009,8.424052,-9.081731,1.903650,-3.051901,8.615364,-3.876073,6.305175,2.972242,2.622190,-2.965658,0.765732,-4.040446,-7.803159,-2.584098,-8.562929,-5.659630,-4.480172,-9.973046,2.194023,-4.345633,-2.488523,-8.133738,-0.393140,-4.027471,-8.643446,7.946571,-9.439625,7.845514,-1.551753,-0.921764,-7.138167,-1.805193,2.412567,-3.691938,2.193725,-6.038068,9.409850,9.713721,-9.366370,4.167808,-2.401576,7.102618,9.313179,7.238718,-5.009891,-7.205806,-9.246236,5.635845,8.940079,0.447116,-9.058867,-8.446082,-9.606679,6.711741,-6.082833,6.992328,-2.946272,1.947426,3.996826,5.465321,-4.259541,-7.785222,-7.473841,0.204972,-0.397913,-0.827653,-4.721690,-5.682515,-1.179259,3.568158,2.235324,0.139096,8.758253,2.111509,4.228427,-8.810341,-7.691707,7.787231,-0.374628,1.689147,9.873076,5.090683,-8.378939,-3.353753,-1.899790,1.184014,-5.152545,8.773060,-8.403351,-3.118286,8.540945,6.401400,1.855165,-5.162464,4.044057,-7.431058,5.574471], dtype = "float64")#candidate|3654|(198,)|const|float64
var_3655 = relay.var("var_3655", dtype = "int16", shape = (91, 4))#candidate|3655|(91, 4)|var|int16
call_3653 = relay.TupleGetItem(func_2466_call(relay.reshape(const_3654.astype('float64'), [3, 11, 6]), relay.reshape(const_3654.astype('float64'), [3, 11, 6]), relay.reshape(var_3655.astype('int16'), [182, 2]), ), 7)
call_3656 = relay.TupleGetItem(func_2471_call(relay.reshape(const_3654.astype('float64'), [3, 11, 6]), relay.reshape(const_3654.astype('float64'), [3, 11, 6]), relay.reshape(var_3655.astype('int16'), [182, 2]), ), 7)
const_3658 = relay.const([[[4.963889,-6.571420,4.829868,-2.167275,-2.812689,-5.387507],[1.751276,-2.696898,9.399337,-5.325615,4.287068,4.165736],[2.019474,7.171166,2.456439,-2.861593,-4.721211,4.831601],[4.082204,7.567611,5.147929,-7.725071,-7.615364,7.930518],[2.451988,-0.331812,6.391262,8.121300,1.727162,6.608326],[3.531447,-9.615668,-2.430516,-9.620841,3.188971,8.803114],[5.797129,-4.110033,-4.786343,4.677815,6.579475,-8.788918],[-2.460688,3.820157,-8.838585,-8.030789,6.218648,5.547847],[-8.780901,6.362246,2.609670,-4.241701,7.733723,-0.655350],[1.254011,4.631803,7.860917,2.638088,2.449073,-9.362750],[7.545829,-7.754472,3.471472,-5.537542,7.711454,0.693370]],[[-4.430692,7.449041,-1.962416,5.339247,-5.683367,-2.516791],[-6.141816,3.936355,7.323434,7.172224,-4.065091,8.374115],[7.271828,1.805794,4.663800,7.810627,-3.279661,8.899248],[-9.918641,-4.767264,8.122024,5.893428,-5.026485,-1.264369],[-6.052564,-6.967089,3.033196,-9.785230,7.613260,9.453367],[-6.203640,-3.134047,4.397710,-6.531197,-3.193955,-7.842555],[2.426535,8.468348,-5.015583,4.596852,4.605238,4.544753],[2.619467,8.393018,5.861976,-7.402927,1.497249,8.369795],[-7.020329,4.208071,-4.005970,7.116358,7.623741,-9.217931],[-1.808666,-4.002313,6.403018,-5.233248,9.524544,-2.002908],[-2.405654,-1.940879,9.240771,-5.784752,9.745188,8.767243]],[[-0.341773,-2.614987,9.691444,9.512921,-5.088457,-2.189218],[-3.525896,6.125166,-9.933382,-3.704507,-5.766861,1.316764],[-5.946054,4.090995,3.812194,-0.545308,4.409753,5.759393],[0.797850,-9.423641,-8.605482,3.365250,9.323025,-3.489976],[-9.014158,-2.657619,8.948678,8.713954,-1.597528,-0.643148],[1.036442,7.368028,4.266554,3.089197,2.805947,-0.938153],[-1.703667,-1.364779,-4.992658,-6.838595,-9.597604,1.230048],[-2.335408,7.963810,-0.394218,-0.913729,-5.519248,-8.990005],[-5.478987,-8.450489,-2.998725,6.056656,8.878658,-0.403369],[-9.045297,-2.556354,-8.580517,-5.520945,-9.936467,4.969745],[7.551228,-0.414473,3.482220,3.879121,7.662859,7.092424]],[[1.465419,-8.352762,9.046071,-5.481139,9.038220,-4.548254],[0.840943,-9.487562,-8.025498,-4.191502,0.477451,-7.635812],[6.709241,-7.514584,0.825614,-2.922212,-0.770941,5.217653],[-1.343310,9.187241,2.463616,4.037055,9.517691,-9.268269],[5.568618,7.181742,-9.173873,2.589675,-3.344684,-2.031486],[1.814820,-0.672693,9.204055,8.778906,4.797292,-6.272595],[-5.289712,9.092280,3.069562,-8.088183,-1.301330,-4.422264],[0.644864,1.713151,8.807805,1.609258,-4.636242,9.436042],[-0.776248,1.365193,7.578273,-3.664911,5.848356,7.007038],[4.295222,6.493073,-8.231506,-3.075203,7.019015,8.451004],[2.766376,-4.829152,-9.023205,-6.966688,-1.644741,-1.238753]],[[9.835504,-6.444161,0.412897,5.901356,8.760863,-4.918427],[-0.411214,7.449903,-6.635845,0.209842,2.606724,-6.802339],[9.398018,-4.825246,-9.809139,7.506497,6.055452,4.579815],[-4.307602,-2.783539,2.570343,3.585130,9.044855,-0.816184],[2.798049,-6.830032,5.036503,-3.099122,7.906398,-1.735632],[2.474118,2.973029,5.349992,7.303062,9.161487,0.974521],[9.195825,1.271853,3.284968,-4.999804,8.240269,-9.145425],[9.572022,1.167361,3.757531,1.481245,0.410218,-1.832770],[3.370170,-6.028197,3.585222,0.384920,-4.374581,7.967035],[-9.196159,-1.798883,-7.304744,-6.190294,3.381012,-7.851661],[-8.933561,-7.136149,-2.938467,-1.965760,-5.229676,1.450074]],[[3.001087,-2.673447,3.394936,4.549700,-2.835356,0.475676],[-0.634286,-6.205364,9.202399,4.726875,-2.038357,5.585814],[-4.461143,-7.048090,7.529418,-2.497518,1.291104,-8.091008],[-9.086539,-7.316304,-8.857499,-3.996385,-5.986396,-3.904699],[2.350166,7.914130,9.832737,5.960970,-4.332985,3.731792],[2.287164,-7.840853,-4.833530,1.597450,2.132852,6.688129],[0.231044,-0.254218,3.175762,4.243751,-8.444031,-5.553952],[1.180404,1.394579,-8.309301,6.930181,-1.060374,-0.421854],[4.739096,-4.296667,4.313122,-9.359254,9.992513,-5.619079],[6.678690,6.477870,-7.131797,-8.210843,1.344610,-6.944311],[-7.845837,0.598937,7.109437,9.975065,4.350007,7.056288]],[[-3.253228,0.728431,5.308796,-8.441163,8.809908,-0.661478],[6.124138,-9.938939,3.353830,-4.216146,-7.337982,-2.812702],[6.571992,-0.380363,6.605846,-1.592351,1.010568,0.022057],[1.932862,-9.544673,-9.436544,7.417693,2.069907,-6.675373],[-1.712655,-7.800572,7.833057,-3.206600,-0.001948,9.225360],[8.404032,1.163545,-7.357622,3.874500,-9.218078,-0.798417],[-3.825927,2.757484,4.708625,-0.044270,-5.136717,5.332328],[-7.169300,8.387296,-1.239823,-1.694671,-5.956049,5.880774],[4.326608,-8.838252,-7.026601,-1.080906,-9.816172,-4.192991],[9.442568,4.967590,9.128190,0.927426,8.115493,-3.089301],[-4.350534,7.195377,8.534517,5.355987,4.941153,-5.092476]]], dtype = "float32")#candidate|3658|(7, 11, 6)|const|float32
bop_3659 = relay.greater(uop_3649.astype('bool'), relay.reshape(const_3658.astype('bool'), relay.shape_of(uop_3649))) # shape=(7, 11, 6)
bop_3662 = relay.greater(uop_3651.astype('bool'), relay.reshape(const_3658.astype('bool'), relay.shape_of(uop_3651))) # shape=(7, 11, 6)
uop_3666 = relay.log2(bop_3659.astype('float32')) # shape=(7, 11, 6)
uop_3668 = relay.log2(bop_3662.astype('float32')) # shape=(7, 11, 6)
output = relay.Tuple([call_3653,const_3654,var_3655,uop_3666,])
output2 = relay.Tuple([call_3656,const_3654,var_3655,uop_3668,])
func_3671 = relay.Function([var_3655,], output)
mod['func_3671'] = func_3671
mod = relay.transform.InferType()(mod)
mutated_mod['func_3671'] = func_3671
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3672 = relay.var("var_3672", dtype = "int16", shape = (91, 4))#candidate|3672|(91, 4)|var|int16
func_3671_call = mutated_mod.get_global_var('func_3671')
call_3673 = func_3671_call(var_3672)
output = call_3673
func_3674 = relay.Function([var_3672], output)
mutated_mod['func_3674'] = func_3674
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3515_call = mod.get_global_var('func_3515')
func_3517_call = mutated_mod.get_global_var('func_3517')
call_3683 = func_3515_call()
call_3684 = func_3515_call()
uop_3699 = relay.tan(call_3683.astype('float32')) # shape=(7, 11, 6)
uop_3701 = relay.tan(call_3684.astype('float32')) # shape=(7, 11, 6)
output = relay.Tuple([uop_3699,])
output2 = relay.Tuple([uop_3701,])
func_3706 = relay.Function([], output)
mod['func_3706'] = func_3706
mod = relay.transform.InferType()(mod)
mutated_mod['func_3706'] = func_3706
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3706_call = mutated_mod.get_global_var('func_3706')
call_3707 = func_3706_call()
output = call_3707
func_3708 = relay.Function([], output)
mutated_mod['func_3708'] = func_3708
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3706_call = mod.get_global_var('func_3706')
func_3708_call = mutated_mod.get_global_var('func_3708')
call_3728 = relay.TupleGetItem(func_3706_call(), 0)
call_3729 = relay.TupleGetItem(func_3708_call(), 0)
output = relay.Tuple([call_3728,])
output2 = relay.Tuple([call_3729,])
func_3732 = relay.Function([], output)
mod['func_3732'] = func_3732
mod = relay.transform.InferType()(mod)
mutated_mod['func_3732'] = func_3732
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3732_call = mutated_mod.get_global_var('func_3732')
call_3733 = func_3732_call()
output = call_3733
func_3734 = relay.Function([], output)
mutated_mod['func_3734'] = func_3734
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3732_call = mod.get_global_var('func_3732')
func_3734_call = mutated_mod.get_global_var('func_3734')
call_3753 = relay.TupleGetItem(func_3732_call(), 0)
call_3754 = relay.TupleGetItem(func_3734_call(), 0)
uop_3792 = relay.log(call_3753.astype('float32')) # shape=(7, 11, 6)
uop_3794 = relay.log(call_3754.astype('float32')) # shape=(7, 11, 6)
uop_3796 = relay.acos(uop_3792.astype('float64')) # shape=(7, 11, 6)
uop_3798 = relay.acos(uop_3794.astype('float64')) # shape=(7, 11, 6)
output = relay.Tuple([uop_3796,])
output2 = relay.Tuple([uop_3798,])
func_3824 = relay.Function([], output)
mod['func_3824'] = func_3824
mod = relay.transform.InferType()(mod)
mutated_mod['func_3824'] = func_3824
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3824_call = mutated_mod.get_global_var('func_3824')
call_3825 = func_3824_call()
output = call_3825
func_3826 = relay.Function([], output)
mutated_mod['func_3826'] = func_3826
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3824_call = mod.get_global_var('func_3824')
func_3826_call = mutated_mod.get_global_var('func_3826')
call_3846 = relay.TupleGetItem(func_3824_call(), 0)
call_3847 = relay.TupleGetItem(func_3826_call(), 0)
func_3824_call = mod.get_global_var('func_3824')
func_3826_call = mutated_mod.get_global_var('func_3826')
call_3876 = relay.TupleGetItem(func_3824_call(), 0)
call_3877 = relay.TupleGetItem(func_3826_call(), 0)
func_3732_call = mod.get_global_var('func_3732')
func_3734_call = mutated_mod.get_global_var('func_3734')
call_3879 = relay.TupleGetItem(func_3732_call(), 0)
call_3880 = relay.TupleGetItem(func_3734_call(), 0)
var_3881 = relay.var("var_3881", dtype = "float32", shape = (7, 11, 6))#candidate|3881|(7, 11, 6)|var|float32
bop_3882 = relay.greater_equal(call_3879.astype('bool'), relay.reshape(var_3881.astype('bool'), relay.shape_of(call_3879))) # shape=(7, 11, 6)
bop_3885 = relay.greater_equal(call_3880.astype('bool'), relay.reshape(var_3881.astype('bool'), relay.shape_of(call_3880))) # shape=(7, 11, 6)
uop_3895 = relay.erf(call_3876.astype('float64')) # shape=(7, 11, 6)
uop_3897 = relay.erf(call_3877.astype('float64')) # shape=(7, 11, 6)
output = relay.Tuple([call_3846,bop_3882,uop_3895,])
output2 = relay.Tuple([call_3847,bop_3885,uop_3897,])
func_3901 = relay.Function([var_3881,], output)
mod['func_3901'] = func_3901
mod = relay.transform.InferType()(mod)
var_3902 = relay.var("var_3902", dtype = "float32", shape = (7, 11, 6))#candidate|3902|(7, 11, 6)|var|float32
output = func_3901(var_3902)
func_3903 = relay.Function([var_3902], output)
mutated_mod['func_3903'] = func_3903
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3524_call = mod.get_global_var('func_3524')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_3921 = relay.TupleGetItem(func_3524_call(), 0)
call_3922 = relay.TupleGetItem(func_3526_call(), 0)
func_1899_call = mod.get_global_var('func_1899')
func_1902_call = mutated_mod.get_global_var('func_1902')
const_3931 = relay.const([[-7,4,1,3,2,-2,-2,8,-4,8,-1,9,-6,-3,-4,2,1,9,-7,4,4,8]], dtype = "int16")#candidate|3931|(1, 22)|const|int16
var_3932 = relay.var("var_3932", dtype = "int16", shape = (308,))#candidate|3932|(308,)|var|int16
call_3930 = relay.TupleGetItem(func_1899_call(relay.reshape(const_3931.astype('int16'), [22,]), relay.reshape(var_3932.astype('int16'), [308,]), ), 2)
call_3933 = relay.TupleGetItem(func_1902_call(relay.reshape(const_3931.astype('int16'), [22,]), relay.reshape(var_3932.astype('int16'), [308,]), ), 2)
uop_3936 = relay.asinh(call_3930.astype('float64')) # shape=(22,)
uop_3938 = relay.asinh(call_3933.astype('float64')) # shape=(22,)
func_102_call = mod.get_global_var('func_102')
func_106_call = mutated_mod.get_global_var('func_106')
call_3952 = relay.TupleGetItem(func_102_call(relay.reshape(const_3931.astype('int16'), [1, 2, 11]), relay.reshape(var_3932.astype('int16'), [14, 2, 11]), ), 1)
call_3953 = relay.TupleGetItem(func_106_call(relay.reshape(const_3931.astype('int16'), [1, 2, 11]), relay.reshape(var_3932.astype('int16'), [14, 2, 11]), ), 1)
output = relay.Tuple([call_3921,const_3931,var_3932,uop_3936,call_3952,])
output2 = relay.Tuple([call_3922,const_3931,var_3932,uop_3938,call_3953,])
func_3958 = relay.Function([var_3932,], output)
mod['func_3958'] = func_3958
mod = relay.transform.InferType()(mod)
var_3959 = relay.var("var_3959", dtype = "int16", shape = (308,))#candidate|3959|(308,)|var|int16
output = func_3958(var_3959)
func_3960 = relay.Function([var_3959], output)
mutated_mod['func_3960'] = func_3960
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3973 = relay.var("var_3973", dtype = "float64", shape = (7, 15, 3))#candidate|3973|(7, 15, 3)|var|float64
uop_3974 = relay.cos(var_3973.astype('float64')) # shape=(7, 15, 3)
func_2741_call = mod.get_global_var('func_2741')
func_2744_call = mutated_mod.get_global_var('func_2744')
var_3989 = relay.var("var_3989", dtype = "float32", shape = (81,))#candidate|3989|(81,)|var|float32
call_3988 = func_2741_call(relay.reshape(var_3989.astype('float32'), [9, 9, 1]))
call_3990 = func_2741_call(relay.reshape(var_3989.astype('float32'), [9, 9, 1]))
func_1899_call = mod.get_global_var('func_1899')
func_1902_call = mutated_mod.get_global_var('func_1902')
var_3992 = relay.var("var_3992", dtype = "int16", shape = (22,))#candidate|3992|(22,)|var|int16
const_3993 = relay.const([8,-9,-10,-9,9,6,-7,-10,-1,10,-3,2,-7,-10,-9,-8,-2,1,1,-5,-4,-2,9,4,6,-1,-8,-5,-9,9,5,5,6,1,8,6,8,-2,4,6,-10,1,9,-3,2,-6,-1,6,7,-3,-3,6,10,8,-4,4,-1,-3,2,1,-10,-10,-8,-8,-6,-1,-3,2,-4,7,-5,3,-7,-10,-2,2,-10,5,-9,-2,-8,-5,9,-4,8,-1,10,2,-2,-6,-5,-8,-1,10,8,6,-6,-6,-8,8,-10,10,-4,-9,7,3,-4,-5,-6,4,9,-1,-2,-10,7,-6,-6,9,1,8,-3,-9,2,1,-9,3,6,-4,10,9,-1,-4,-3,9,-1,1,-10,3,4,-1,7,-2,-7,-1,10,6,-5,8,-5,2,-6,2,-5,9,6,-4,-3,8,-5,-10,-7,8,-7,9,-5,-10,6,-8,-6,10,-4,-7,-1,10,-3,2,-7,3,-7,5,-5,-5,-6,4,8,6,-8,-1,-7,6,-1,4,-7,1,-9,-7,3,7,-3,-1,-5,-4,-9,4,8,-10,8,-9,10,10,8,6,-9,3,6,-2,-1,3,-1,-10,7,-8,-3,-10,8,-4,7,-10,-5,-8,-6,-1,7,9,-3,9,-8,-4,5,-3,6,-9,-9,9,9,6,-10,-4,-3,6,-1,-5,-3,9,-7,-1,10,-5,-9,5,-6,5,8,-4,2,6,-7,4,1,8,-8,10,8,-8,-4,5,2,3,-9,10,8,-7,-6,-5,-6,7,-1,-3,4,6,-4,7,10,7,-8,-9,10,9,6,-5,6,-8,8,-6,3,-10,2,3], dtype = "int16")#candidate|3993|(308,)|const|int16
call_3991 = relay.TupleGetItem(func_1899_call(relay.reshape(var_3992.astype('int16'), [22,]), relay.reshape(const_3993.astype('int16'), [308,]), ), 0)
call_3994 = relay.TupleGetItem(func_1902_call(relay.reshape(var_3992.astype('int16'), [22,]), relay.reshape(const_3993.astype('int16'), [308,]), ), 0)
func_3824_call = mod.get_global_var('func_3824')
func_3826_call = mutated_mod.get_global_var('func_3826')
call_4002 = relay.TupleGetItem(func_3824_call(), 0)
call_4003 = relay.TupleGetItem(func_3826_call(), 0)
output = relay.Tuple([uop_3974,call_3988,var_3989,call_3991,var_3992,const_3993,call_4002,])
output2 = relay.Tuple([uop_3974,call_3990,var_3989,call_3994,var_3992,const_3993,call_4003,])
func_4006 = relay.Function([var_3973,var_3989,var_3992,], output)
mod['func_4006'] = func_4006
mod = relay.transform.InferType()(mod)
mutated_mod['func_4006'] = func_4006
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4006_call = mutated_mod.get_global_var('func_4006')
var_4008 = relay.var("var_4008", dtype = "float64", shape = (7, 15, 3))#candidate|4008|(7, 15, 3)|var|float64
var_4009 = relay.var("var_4009", dtype = "float32", shape = (81,))#candidate|4009|(81,)|var|float32
var_4010 = relay.var("var_4010", dtype = "int16", shape = (22,))#candidate|4010|(22,)|var|int16
call_4007 = func_4006_call(var_4008,var_4009,var_4010,)
output = call_4007
func_4011 = relay.Function([var_4008,var_4009,var_4010,], output)
mutated_mod['func_4011'] = func_4011
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3524_call = mod.get_global_var('func_3524')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_4016 = relay.TupleGetItem(func_3524_call(), 0)
call_4017 = relay.TupleGetItem(func_3526_call(), 0)
func_969_call = mod.get_global_var('func_969')
func_972_call = mutated_mod.get_global_var('func_972')
const_4041 = relay.const([[2,7,3],[-7,-9,4],[-4,-10,-6],[4,10,4],[-2,-4,10],[8,-5,1],[6,9,-2],[1,-9,-8],[5,-8,-1],[-4,3,4],[1,7,-4],[-4,-6,-8],[-7,6,-3],[10,-10,4],[3,2,9],[1,-7,7],[-9,-6,5],[5,4,-7],[8,4,10],[-9,7,8],[9,-7,2],[-2,5,7],[-3,-2,-4],[5,-8,3],[-8,-10,-6],[-2,-2,3],[-2,-4,-4],[-5,-3,-5],[7,2,8],[5,8,2],[6,8,2],[-1,-10,-1],[7,-1,-4],[9,4,-9],[9,-8,-9],[-2,6,-2],[-3,5,9],[-8,-6,7],[5,3,9],[4,8,-6],[4,-2,8],[-1,7,6],[3,-10,-3],[9,5,7],[-6,4,3],[-8,6,7],[4,-6,-3],[-6,-6,-5],[7,7,6],[6,5,3],[-9,-6,1],[-10,-1,-9],[-9,-1,3],[-6,-10,2],[6,-7,9],[-10,-10,-3],[10,-9,2],[-7,3,7],[-6,6,-5],[1,8,4],[-7,-4,-1],[-8,-2,3],[-5,4,10],[1,4,3],[8,3,-1],[1,-9,5],[-4,2,1],[10,6,1],[-5,4,-2],[9,3,5],[-6,4,-3],[-7,1,3],[-5,-8,-6],[8,3,-9],[1,4,1],[-7,-6,-4],[9,8,-3],[4,3,-10],[2,8,-2],[-10,-6,-6],[-6,4,6],[-2,3,7],[-10,-3,-6],[2,1,-5],[9,-7,-10],[4,7,-9],[-7,-10,-9],[-6,1,-4],[4,-6,5],[1,7,-9],[-8,4,-10],[-10,3,9],[10,-3,-9],[-7,10,-10],[-5,9,9],[-10,10,4],[-6,-10,6],[-1,7,7],[-10,8,10]], dtype = "int16")#candidate|4041|(99, 3)|const|int16
call_4040 = func_969_call(relay.reshape(const_4041.astype('int16'), [11, 9, 3]))
call_4042 = func_969_call(relay.reshape(const_4041.astype('int16'), [11, 9, 3]))
output = relay.Tuple([call_4016,call_4040,const_4041,])
output2 = relay.Tuple([call_4017,call_4042,const_4041,])
func_4043 = relay.Function([], output)
mod['func_4043'] = func_4043
mod = relay.transform.InferType()(mod)
output = func_4043()
func_4044 = relay.Function([], output)
mutated_mod['func_4044'] = func_4044
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3581_call = mod.get_global_var('func_3581')
func_3583_call = mutated_mod.get_global_var('func_3583')
call_4079 = func_3581_call()
call_4080 = func_3581_call()
output = call_4079
output2 = call_4080
func_4081 = relay.Function([], output)
mod['func_4081'] = func_4081
mod = relay.transform.InferType()(mod)
output = func_4081()
func_4082 = relay.Function([], output)
mutated_mod['func_4082'] = func_4082
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3824_call = mod.get_global_var('func_3824')
func_3826_call = mutated_mod.get_global_var('func_3826')
call_4100 = relay.TupleGetItem(func_3824_call(), 0)
call_4101 = relay.TupleGetItem(func_3826_call(), 0)
func_2131_call = mod.get_global_var('func_2131')
func_2134_call = mutated_mod.get_global_var('func_2134')
var_4111 = relay.var("var_4111", dtype = "float64", shape = (90, 14))#candidate|4111|(90, 14)|var|float64
var_4112 = relay.var("var_4112", dtype = "float64", shape = (84,))#candidate|4112|(84,)|var|float64
call_4110 = relay.TupleGetItem(func_2131_call(relay.reshape(var_4111.astype('float64'), [7, 15, 12]), relay.reshape(var_4112.astype('float64'), [1, 84]), ), 3)
call_4113 = relay.TupleGetItem(func_2134_call(relay.reshape(var_4111.astype('float64'), [7, 15, 12]), relay.reshape(var_4112.astype('float64'), [1, 84]), ), 3)
output = relay.Tuple([call_4100,call_4110,var_4111,var_4112,])
output2 = relay.Tuple([call_4101,call_4113,var_4111,var_4112,])
func_4114 = relay.Function([var_4111,var_4112,], output)
mod['func_4114'] = func_4114
mod = relay.transform.InferType()(mod)
var_4115 = relay.var("var_4115", dtype = "float64", shape = (90, 14))#candidate|4115|(90, 14)|var|float64
var_4116 = relay.var("var_4116", dtype = "float64", shape = (84,))#candidate|4116|(84,)|var|float64
output = func_4114(var_4115,var_4116,)
func_4117 = relay.Function([var_4115,var_4116,], output)
mutated_mod['func_4117'] = func_4117
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3706_call = mod.get_global_var('func_3706')
func_3708_call = mutated_mod.get_global_var('func_3708')
call_4137 = relay.TupleGetItem(func_3706_call(), 0)
call_4138 = relay.TupleGetItem(func_3708_call(), 0)
var_4149 = relay.var("var_4149", dtype = "float32", shape = (7, 11, 6))#candidate|4149|(7, 11, 6)|var|float32
bop_4150 = relay.equal(call_4137.astype('bool'), relay.reshape(var_4149.astype('bool'), relay.shape_of(call_4137))) # shape=(7, 11, 6)
bop_4153 = relay.equal(call_4138.astype('bool'), relay.reshape(var_4149.astype('bool'), relay.shape_of(call_4138))) # shape=(7, 11, 6)
output = relay.Tuple([bop_4150,])
output2 = relay.Tuple([bop_4153,])
func_4157 = relay.Function([var_4149,], output)
mod['func_4157'] = func_4157
mod = relay.transform.InferType()(mod)
var_4158 = relay.var("var_4158", dtype = "float32", shape = (7, 11, 6))#candidate|4158|(7, 11, 6)|var|float32
output = func_4157(var_4158)
func_4159 = relay.Function([var_4158], output)
mutated_mod['func_4159'] = func_4159
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4188 = relay.var("var_4188", dtype = "bool", shape = (14, 15, 5))#candidate|4188|(14, 15, 5)|var|bool
const_4189 = relay.const([[[True,True,False,True,False],[True,True,True,True,True],[True,False,True,True,True],[True,False,True,False,False],[True,False,True,True,False],[False,True,False,False,False],[True,True,True,True,False],[True,False,True,True,True],[False,False,True,True,True],[True,False,True,False,False],[True,True,False,False,True],[False,False,False,True,False],[False,False,True,False,True],[True,True,False,False,False],[True,False,False,True,True]],[[True,False,False,False,False],[False,False,False,True,False],[True,True,True,True,False],[True,True,False,True,True],[False,False,True,False,True],[True,True,True,False,False],[True,True,False,True,False],[True,True,False,True,False],[False,False,False,True,True],[False,True,False,True,False],[False,True,False,True,True],[True,False,False,True,False],[True,False,False,True,True],[False,False,False,False,True],[True,False,True,True,False]],[[False,True,True,True,False],[True,True,True,True,False],[False,True,False,True,False],[True,False,False,True,True],[True,True,False,True,True],[True,False,True,True,True],[True,True,True,False,False],[True,True,True,True,True],[True,True,False,False,False],[False,True,False,False,False],[False,True,True,False,False],[False,True,True,True,False],[False,True,False,True,True],[False,True,True,False,False],[False,True,True,False,True]],[[False,False,False,False,False],[False,False,True,True,False],[True,True,False,False,True],[False,True,False,False,False],[True,True,True,False,True],[True,False,False,True,False],[False,True,False,False,True],[False,True,False,True,False],[False,True,False,False,True],[True,True,False,True,True],[True,False,False,False,True],[True,False,True,False,True],[False,False,False,False,False],[True,True,True,True,False],[False,False,True,False,False]],[[True,True,True,True,False],[True,False,False,True,True],[True,True,True,True,True],[False,True,True,False,True],[True,True,False,True,True],[True,True,True,False,True],[True,True,False,True,True],[False,False,True,False,True],[False,False,False,True,True],[True,True,False,False,True],[True,False,True,False,True],[False,True,False,True,True],[True,False,True,True,True],[False,True,True,True,True],[True,False,True,True,True]],[[False,True,True,False,True],[False,False,True,True,False],[False,True,True,False,False],[False,True,True,True,False],[False,True,True,False,True],[True,True,True,False,False],[False,True,True,True,True],[True,False,True,False,True],[True,True,True,False,True],[True,True,True,False,False],[True,True,False,True,True],[True,False,False,False,False],[False,False,True,False,False],[True,True,False,False,True],[True,False,False,False,False]],[[False,False,True,True,False],[False,False,True,False,True],[False,True,True,False,True],[False,True,True,True,True],[True,False,False,True,True],[True,True,True,False,True],[True,False,True,True,True],[False,True,True,True,True],[True,False,False,False,False],[True,False,True,False,False],[False,False,False,False,True],[True,False,False,False,False],[False,False,False,True,True],[True,True,False,False,True],[True,True,True,True,False]],[[True,False,False,True,False],[False,True,False,True,False],[False,False,False,False,True],[False,False,True,False,False],[False,True,True,False,True],[False,True,True,True,False],[True,True,False,True,False],[False,False,True,True,True],[True,True,True,True,True],[False,True,False,True,True],[False,True,False,True,True],[False,False,False,True,True],[False,False,False,False,True],[False,True,True,False,False],[False,True,True,False,True]],[[False,False,False,False,False],[False,False,True,False,False],[True,False,False,True,True],[True,False,True,False,False],[True,False,True,False,False],[True,True,False,False,True],[True,True,True,True,True],[True,True,False,True,False],[False,False,False,False,True],[False,True,True,True,True],[False,False,False,True,True],[False,True,False,False,True],[True,True,False,False,True],[False,False,False,False,True],[False,False,True,True,False]],[[False,True,True,False,False],[True,False,True,True,True],[False,True,False,False,False],[False,True,True,False,True],[False,False,True,True,False],[False,True,False,True,False],[False,False,True,False,False],[False,True,False,True,False],[True,True,True,False,True],[True,False,False,True,False],[True,True,True,True,False],[True,True,False,False,True],[False,False,True,False,False],[True,False,True,True,True],[True,False,False,True,False]],[[True,False,False,True,True],[True,False,True,False,True],[True,True,True,True,True],[False,False,False,True,False],[False,False,False,False,True],[True,True,True,True,False],[False,False,True,False,True],[False,True,True,True,True],[True,True,True,False,False],[False,False,False,False,True],[False,True,True,False,True],[False,True,False,True,False],[True,True,False,False,False],[True,False,True,True,False],[True,False,True,False,False]],[[True,False,False,False,True],[True,False,False,False,True],[True,False,False,True,True],[True,False,True,True,False],[True,True,True,False,False],[True,True,False,False,True],[False,True,False,False,True],[True,True,False,True,True],[True,False,True,True,True],[False,False,False,True,False],[False,False,True,True,True],[True,False,False,True,False],[False,True,False,False,True],[True,True,False,True,False],[True,False,False,False,False]],[[True,False,False,True,False],[False,False,False,True,True],[True,False,False,False,True],[False,False,False,False,False],[True,False,True,True,True],[True,False,False,True,False],[False,False,True,False,False],[True,True,False,True,False],[True,True,True,True,True],[False,False,True,True,False],[True,False,False,False,False],[False,True,False,False,False],[True,False,False,False,False],[False,True,True,False,False],[False,False,True,True,True]],[[False,True,True,True,False],[False,False,True,False,False],[True,False,True,True,False],[True,False,False,False,False],[True,False,True,False,True],[False,False,True,True,True],[False,False,True,False,True],[True,False,False,False,False],[False,True,True,False,True],[True,True,True,False,True],[False,True,False,True,True],[True,True,False,False,True],[True,False,True,False,False],[False,False,False,False,False],[True,True,False,False,True]]], dtype = "bool")#candidate|4189|(14, 15, 5)|const|bool
bop_4190 = relay.logical_or(var_4188.astype('bool'), relay.reshape(const_4189.astype('bool'), relay.shape_of(var_4188))) # shape=(14, 15, 5)
uop_4202 = relay.exp(const_4189.astype('float32')) # shape=(14, 15, 5)
func_880_call = mod.get_global_var('func_880')
func_883_call = mutated_mod.get_global_var('func_883')
var_4209 = relay.var("var_4209", dtype = "float64", shape = (168,))#candidate|4209|(168,)|var|float64
const_4210 = relay.const([[-3.521452,3.680076,-1.436378,-9.181115,1.379294,0.390094,4.078787,9.371921,-1.424584,-7.032303,1.299654,-6.326845,-2.380836,4.109357,7.728082,3.385257,-1.645644,-4.949285,-8.544496,-7.305897,7.244541,-7.833582,-4.241185,-5.297007,4.160214,-0.509204,1.510504,-5.275978,-1.312377,1.675982,3.419162,-1.067877,6.757003,-2.740101,2.121277,4.035196,6.483122,-7.485806,5.485388,-9.481281,1.744489,-3.301570,6.075835,-3.907722,-0.631914,0.329670,7.804617,4.218200,-5.330804,-1.511504,-3.509607,7.073490,7.402814,-0.118907,-8.355274,9.339384,0.782479,4.993501,-3.493302,-8.791274,6.400331,-0.554042,5.506250,9.000758,-0.949518,-6.639417,1.005674,-0.325587,6.030357,0.424521,7.811581,2.354168,-0.642365,8.082179,-3.945885,-4.414645,-4.898881,-2.363383,-3.189006,4.225591,5.492958,-4.486369,1.737236,9.322449,7.100134,6.686433,5.652897,6.322417,3.156172,9.833686,-0.937439,5.778303,-3.496699,4.508589,3.161213,7.142937,-5.088959,2.406134,-7.062176,-5.829461,7.135074,-8.194738,-9.747065,9.203648,3.430191,6.957682,-9.550701,-1.230851,2.869417,9.069465,-6.268564,4.567400,-0.019044,2.215035,-5.669726,-7.654134,0.635599,-7.611794,-5.195612,5.179405,-4.445500,-6.311980,6.917599,-0.139886,-9.530027,9.971034,-2.620766,5.487801,0.178300,-6.143156,-2.946863,7.324797,3.390966,8.139162,6.810397,2.835606,1.301839,-5.741206,-4.382649,9.154172,7.281659,-1.325634,-0.653839,-1.902024,-7.535601,8.573492,-7.756735,-5.674564,-4.332895,4.593811,-9.971839,-8.431410,-0.394912,-3.341557,8.344765,1.378600,-7.146869,-6.009021,1.467783,-8.337875,0.239738,-3.691244,-3.892423,-2.600763,-3.175637,3.349742,-4.878455,5.058842,-3.285733,-0.550721,3.723593,-3.401924,4.394725,-1.407158,-6.982434,-3.344029,-6.512139,2.670784,9.702884,-5.019101,3.936834,-2.969673,4.319761,7.033976,3.238355,6.023954,1.405199,-7.467341,-2.233466,-5.231853,3.204957,9.698042,3.823037,-2.320310,-8.242694,5.270731,-0.907387,7.183154,4.075431,-5.728989,-3.411758,9.231678,3.815268,-2.066577,4.291887,-9.263798,9.185651,-0.887830,-4.611142,0.448606,7.848411,3.874688,-4.825054,3.266135,0.238350,-0.388859,5.301975,7.643908,3.075385,8.957271,-4.433059,3.749908,0.075245,5.991330,1.834756,-4.183200,8.995014,-4.115677,-3.243729,7.247649,8.162062,-1.204329,0.444768,-9.274977,9.023275,7.188622,3.495552,-8.598154,8.834490,7.440655,-0.269908,8.835961,3.807409,-1.305783,-7.272808,8.483797,1.947485,-6.640382,3.660322,-2.389868,-3.642115,0.129427,-0.452839,-7.963062,9.593664,-2.352062,7.110888,2.086181,-2.440639,4.747180,6.972721,-4.285747,-8.441082,6.015077,7.648603,-6.164809,-2.176359,-6.016870,7.632180,-8.604292,-2.263072,4.254572,-4.067975,-5.050316,-9.651001,1.529251,-2.734957,-4.416194,8.424451,-9.613317,9.285220,-7.243314,-3.387795,2.062583,-8.446319,-4.751650,-8.386237,-4.241818,-8.886420,6.430380,-5.661003,-2.699701,2.811804,9.607491,5.797081,7.369388,3.723811,-0.546500,-0.521384,7.889705,7.181752,4.630852,1.553111,-5.090469,-7.902449,-4.286432,8.576029,1.658339,-7.832186,1.248031,1.562859,-4.516884,-8.790017,-0.595025,-0.338601,6.699042,-6.394777,-5.709482,2.952736,3.150174,-3.245057,-5.154762,3.060437,-4.117919,4.302176,3.094108,9.021606,6.323456,-0.843906,-9.169963,2.793006,-5.074927,1.566907,-5.063657,8.104633,-9.389610,6.340777,6.690817,3.165433,-0.396385,8.031868,1.465287,-9.443097,0.912446,-3.718919,2.489099,1.766805,7.584153,-7.486553,5.421616,-7.670993,-0.375435,8.634281,-3.083196,6.040251,8.724066,-9.173499,9.981635,4.186928,7.220356,6.590183,9.874207,-4.927837,9.930336,-8.978110,-3.994036,-3.787114,5.348523,6.060664,-4.297595,-7.825312,9.660036,-9.582453,0.041936,7.633189,-5.830192,-4.078820,-8.365396,-4.289725,7.716849,-0.271681,5.133227,-6.594417,-8.021151,-6.115501,0.081736,-6.815352,6.588387,8.186000,-2.671400,6.779797,1.355129,5.802017,-6.024611,4.965976,-9.938690,-1.044389,7.843548,-4.532197,-0.592267,-1.829299,-3.823876,-9.210364,-4.893200,-8.300447,3.223071,9.007408,1.998461,-7.095895,-0.518369,-0.895423,0.459593,3.459713,5.043710,9.301066,-3.401271,6.568518,-3.906574,8.678945,-4.873023,-0.017349,7.738254,-2.990335,-4.859126,5.937275,2.744277,5.208232,-2.236310,3.990159,6.699204,4.075016,-1.359033,-6.062558,-8.383660,3.890189,7.984212,-0.371292,0.572729,-7.149124,5.194815,7.768771,5.436733,-3.645748,0.493578,7.463124,-8.964075,-6.945979,-0.589159,4.264903,-8.922829,8.834242,-3.993891,9.797622,-9.621407,3.162891,0.250533,-3.268835,-7.027734,-9.873284,-4.881340,-4.281405,-8.713395,-4.850389,3.948536,1.671028,-1.189791,5.244505,5.394588,6.347294,-8.378156,9.207336,4.331690,-7.687821,-7.790433,5.922295,4.259267,5.448869,-4.770191,-0.204276,-1.437513,-7.745455,-8.424181,5.542367,-6.705842,1.080643,-7.771951,-7.221415,5.897199,8.105476,3.147670,-4.628999,-5.969964,-0.472528,0.030049,-1.294434,-1.035390,3.150116,-6.711882,-9.822107,6.878794,-4.715778,9.141974,1.605147,5.410696,-4.161367,5.557660,5.070170,8.620362,-1.114310,-6.738402,-6.309476,2.255328,8.937009,-6.716520,-7.072448,-1.531011,2.919404,3.922018,-6.746917,2.029684,3.723128,7.220511,-6.394454,-5.571973,-7.168046,6.247364,-6.177040,-2.718098,2.848026,5.250148,-2.239642,-2.904100,7.240922,-7.448796,-2.774161,7.604082,-6.446334,4.976373,0.678629,8.488070,-8.172661,-1.234793,-2.509444,1.680432,2.848798,6.880087,-3.302327,-1.675983,-9.444769,8.217490,-1.387747,-8.111375,0.450611,-0.837716,-4.471738,-6.565246,-5.186042,3.060272,7.325475,-3.610515,6.256983,-0.339615,6.683107,-1.510946,5.826882,1.488111,-6.210416,-8.113540,6.379186,-1.527715,5.731584,-4.539646,8.118066,-1.539123,-1.411141,5.660035,-5.389158,4.742594,-5.517467,5.173295,8.852086,-2.737706,4.361507,-4.355665,1.520496,-0.021249,0.864141,-6.378056],[-0.520363,-9.153590,-3.460534,-8.291194,5.864934,-7.113656,3.289176,-0.913322,-2.157285,-7.447933,1.189408,-0.788471,4.118975,7.336715,-5.747354,1.183082,-7.729935,3.590276,-7.360136,-1.903171,-9.353224,9.881291,-5.493299,-5.787836,-8.533265,-2.716167,5.786342,-9.541618,3.367965,-4.569342,-4.632787,-3.965682,3.964690,9.619331,-0.688032,3.029079,-0.769676,-8.819494,-7.688465,-2.117612,-6.138821,8.451025,6.827478,-6.141188,8.687908,-3.694623,5.056461,2.908549,8.862822,-5.248392,-0.829204,-3.249825,-6.980078,0.390815,6.912431,-5.017587,6.781010,-8.357302,9.551586,5.278051,4.820430,-3.266301,3.234782,5.542118,-8.262048,-4.968455,0.225649,-8.459832,3.037648,4.460673,3.842176,-4.429528,8.087036,2.418347,-2.900108,0.647548,6.025641,-1.029565,9.100822,3.387954,6.054813,-6.085803,-8.855185,-2.367034,2.547537,-7.707604,6.516372,1.851119,6.706979,-9.948883,8.060235,6.751879,3.555169,9.243982,7.245822,7.321610,-5.166943,-5.619835,-7.389097,4.746540,-1.651072,-5.365023,-4.907879,-9.591408,-4.125255,2.366955,-9.403086,-1.884009,-3.017144,6.676863,-6.513990,-0.947106,-7.356359,1.189051,-2.704202,-8.971672,3.500703,-3.620280,-9.725971,5.692176,1.263891,6.258373,-9.483334,-9.203993,7.677841,-0.628745,-2.281821,0.732833,8.739397,4.897765,7.610851,-4.100914,-0.017797,-2.688880,1.895436,0.609486,0.247212,3.797564,6.752680,-2.772691,2.002921,-9.968384,-8.112550,-8.824857,9.048020,3.390495,-0.684946,8.590025,-8.340219,6.040512,8.752006,1.612265,7.078010,-4.929581,-9.999328,-3.991871,-6.591243,3.610073,-8.817673,-6.404075,0.596598,-8.624651,-3.832434,-5.039099,9.257251,-4.238689,-2.445248,7.608332,-6.446122,-7.332631,3.895982,-2.330261,-1.439737,-9.150504,-8.836102,-2.690594,-7.302529,0.222449,-0.330308,3.282615,2.191251,-5.502358,6.285876,-4.869890,-2.079845,-1.203938,1.770905,8.465199,-3.610043,-2.743551,-5.954369,-5.750366,7.758132,9.248967,3.369279,4.842119,7.493161,6.299633,-1.404040,-4.705088,-1.042969,-6.376490,-6.698111,1.076449,2.370551,5.262960,-9.994865,-2.292939,9.019435,2.500577,-3.115584,6.451969,5.728161,1.583696,-6.976925,-3.133267,-1.463092,-9.516185,-8.232306,-1.603683,4.003602,7.188666,2.439279,5.998908,-7.073055,-3.017397,-7.348824,-0.597346,-5.915304,5.692148,0.998890,3.601166,-2.996990,-7.416066,-8.620190,-7.295552,-1.677805,5.072899,1.643195,-9.092119,-9.485696,-8.681691,3.544577,-8.114207,-6.615042,-0.671935,0.383789,-3.836318,-2.884266,-2.090680,3.616819,-6.723381,-8.408190,5.430973,2.478947,1.015412,-4.892579,-1.233068,-7.764004,0.029164,-5.315454,6.033438,-5.129597,6.494509,-3.535935,7.335328,-7.312498,-0.933325,7.020467,-9.314976,5.532643,-5.991329,5.280303,6.922824,2.504209,3.161287,1.633789,4.384152,-1.119751,-2.703205,-8.309713,-0.293440,2.342387,-3.303586,-5.063511,2.960469,-2.663570,-4.822527,-2.191907,-9.479457,-4.772479,7.535781,-2.431666,0.655212,2.096201,1.981516,5.766823,-3.611201,-3.298413,-4.134093,6.360307,5.481745,5.359651,-4.949495,9.790521,-4.098398,-9.165550,6.200797,-9.397389,4.724742,-2.823715,-0.859897,-5.027517,4.908350,6.673223,0.504630,2.508825,-2.769427,-2.299776,2.416739,7.925956,-1.974069,7.376649,-4.097976,-9.213144,-2.801940,6.411007,8.160656,0.233731,-4.632111,-3.710481,-2.937592,-5.040616,-6.720505,0.224442,4.337029,6.639331,-3.880649,8.304137,7.971006,-4.253942,2.422525,-3.808450,9.501358,0.237351,-8.586444,0.339961,3.300493,4.885676,9.007414,3.061924,-0.748157,-6.192332,-7.967558,5.238261,3.019021,6.794525,0.130821,5.598419,9.960480,7.966573,-6.629273,-0.223307,-9.715634,-8.151308,-4.617721,-8.772774,-4.318735,8.578691,3.762579,-8.600152,-6.005035,6.442847,2.084976,-7.925555,3.235631,-5.563989,0.840885,1.649813,9.897758,2.401069,-0.866500,-9.888926,-2.688491,8.978483,-1.577339,-9.951039,9.884720,4.494277,9.417222,1.512461,1.383120,-8.228878,3.136587,-3.936396,5.824118,-6.501870,-1.394208,8.026853,4.114193,-6.025518,-9.011715,-9.164106,-6.929700,3.419248,-9.197324,-6.100525,-8.684336,-0.521808,-6.003165,-1.223560,-6.281797,8.720415,0.429147,8.556308,1.897192,4.314094,-8.766319,0.449281,4.088296,-4.453470,-6.083708,6.346670,-7.799128,-2.740301,-1.625697,-7.717193,8.725023,4.912418,-1.625907,3.024494,-9.638516,-8.412264,7.537085,6.486668,-4.679039,-2.455175,-6.605710,8.685469,0.491012,-9.748550,7.668481,-4.873788,-5.942883,9.666260,-4.633664,7.491033,4.302413,0.441889,0.598991,8.021740,1.715156,-9.965026,0.345745,-4.434047,3.956692,9.912756,3.601036,-8.266423,2.715189,5.517497,-3.348136,0.872626,-9.550161,-8.440451,7.796657,7.545351,6.924080,9.300338,9.353514,2.251893,-0.262240,5.558042,-6.777604,6.109296,-9.558470,9.353553,0.156666,-3.156568,-7.443240,-7.131208,8.322610,-9.424288,3.330272,9.512536,8.551998,-9.613737,2.067926,7.556644,3.883728,-4.570405,6.406082,-9.682648,-6.570469,-5.679608,-9.483799,-4.357150,-9.338693,-1.161972,-1.264374,5.713619,2.800115,9.132153,3.346488,-8.243300,-7.306672,-6.787547,3.841413,-5.161851,-5.547331,-6.493401,5.347284,-4.384886,0.406164,-2.920904,-3.779222,4.721681,6.643410,8.836957,3.914079,8.547353,-4.887025,-2.860302,-7.726764,5.409489,9.019080,7.773717,-5.758456,6.341571,6.239926,-8.690642,0.280142,4.587688,-4.160115,5.408735,-7.563456,5.762091,2.325245,-0.426620,4.685081,-2.042735,9.900813,1.207554,8.188760,4.785320,-9.999993,-4.251733,5.151770,-9.072217,-0.751878,-6.497021,-8.400394,7.921509,3.442062,-8.967073,6.816716,7.610343,-7.742567,1.687588,7.762956,-2.009328,-3.068883,5.919309,-2.129965,1.305538,-9.845442,-8.845230,-0.894855,-1.421396,7.962660,-8.986796,7.911860,-4.151385,-3.362223,2.622243,-5.742413,-7.592742,-2.332557,5.505045,0.004415,-8.829747,-2.060457,3.439065,-8.181513,-7.943877,-6.993431,5.051475,-5.645723],[4.216203,1.405512,0.317460,5.951788,-4.983768,3.621987,-2.110071,-5.600808,-7.869592,0.517170,8.820075,7.835994,-8.300403,-1.961439,4.544461,6.957546,-5.316345,1.118446,-7.450323,6.389725,0.156332,-5.214840,2.637672,-0.700971,2.691586,5.293522,0.232679,-3.663123,-7.100186,7.977457,-2.071347,8.415877,2.914629,-3.668436,0.204180,-6.519223,-3.248926,-8.787221,-9.386227,-9.435966,6.457328,-2.582429,-7.532353,-6.970101,-7.907809,4.346611,-6.363094,5.431779,9.539824,0.874895,1.145605,8.720593,4.260075,8.260921,-9.553213,5.430435,-9.711703,1.954770,1.467256,0.693144,5.729717,-1.234538,7.700301,-5.780502,2.829468,8.373756,7.756021,-4.811310,0.412772,-6.360848,2.619497,3.388519,-6.425029,8.132184,-8.963452,0.041542,4.969476,6.611718,0.198870,3.964478,0.335865,9.378326,-7.849313,9.329105,0.989469,4.741845,-1.310950,-5.591970,6.952705,-5.376446,9.440769,-0.039026,2.210305,0.651446,0.643319,9.470642,-9.260427,6.743985,-5.883248,-5.236196,9.430245,5.006493,-4.717639,-4.764434,4.751123,7.839790,-2.999781,1.288345,3.006899,-7.117997,1.958538,6.064998,-4.138021,-7.621148,-8.014706,-3.117119,0.624707,6.652396,-5.796663,8.284099,-2.352029,-7.779803,-3.546334,-4.986145,-6.583307,-8.241894,-8.029954,9.879436,1.825038,0.293634,-2.579027,1.325168,8.074501,5.878106,-9.030268,4.453309,7.220751,8.218110,5.284997,1.720530,-3.450485,-1.754644,-5.638498,9.405834,5.153245,1.061554,-2.125814,3.019354,1.759796,6.195539,-9.695660,-9.858688,-7.818628,5.878579,3.917537,-3.042683,5.024668,-5.769979,-6.762928,7.993454,-0.748667,-0.850025,8.115027,7.205552,-9.546965,-7.777371,9.211781,0.954413,-9.445791,-3.193795,8.900455,6.919511,2.709774,-7.899049,7.850521,6.160797,-4.168195,-6.416149,-0.560478,-0.054569,6.442217,0.294323,9.928429,-3.285026,3.012328,8.490559,4.803582,9.716204,-5.380746,5.712331,5.262090,-3.136086,-6.290765,9.841616,-3.423285,2.086277,-3.340463,-5.393613,9.357856,8.304671,1.213622,-3.307694,0.286471,3.195431,5.586423,6.495007,-0.634946,5.406421,6.854952,7.966933,-8.734166,1.152354,1.456739,0.989306,-2.375928,7.146258,0.138266,7.668746,-3.378787,8.457553,4.278320,-6.698779,-5.754173,-9.906867,9.218359,0.317927,-4.608211,-0.112954,-2.268483,4.113577,3.238259,3.053011,-6.636660,2.182507,1.327023,-4.728142,-6.701243,-4.510221,-4.802837,-9.524649,-7.495129,-0.055996,-0.019980,-0.214375,-8.407828,6.445800,0.193553,-3.988996,6.181095,-7.297509,-3.314000,0.027752,4.712732,2.987707,-4.822197,5.712652,3.062884,-0.272450,7.247666,0.154070,-1.360644,5.956346,1.125194,2.536880,0.934847,4.589474,-3.225515,-7.842407,6.496888,-5.089697,4.144127,-2.144029,7.500179,-3.196535,-4.108722,-5.775413,0.453312,-2.994348,5.464145,1.216500,4.769964,0.688995,-4.435125,0.520014,5.829641,3.711679,-7.713256,-8.205841,-0.589696,-2.370205,-1.898352,2.850782,-4.578874,-0.278145,8.014871,-4.735006,-9.508386,3.689189,-9.369354,-0.179582,-6.983096,-5.080505,-5.628349,-8.613672,-7.080356,9.481083,1.010049,-1.547012,-1.984598,3.383858,-7.454124,-8.082495,2.578195,0.032394,-8.035279,-5.883084,-5.795220,0.573967,2.688993,0.730122,-5.566254,-2.234377,-5.207893,7.879093,9.384070,-1.145507,1.355233,-4.908699,-2.501603,-0.892020,-5.021518,0.752111,0.106728,6.004500,-7.648231,-6.376773,0.298833,-7.566726,2.087708,-4.401485,3.440267,5.635831,6.241458,2.183581,6.333950,-1.624133,-4.335553,-1.699312,7.116904,-0.399795,6.419994,-8.765036,9.022196,-9.044788,1.010980,7.614795,5.647625,0.898479,7.593573,7.091147,-3.573884,-6.753378,7.574667,-5.465085,-5.631999,9.546577,-7.045594,-2.662552,-0.403223,-0.048822,8.297679,-6.684648,-1.186340,0.244113,0.255602,4.275397,-6.463020,-5.577547,-1.861412,-2.413492,-5.984903,-1.828628,-8.516915,-4.694294,5.614481,-9.514674,1.800092,-8.246376,-3.978203,4.980641,-7.733313,7.790602,-8.582966,-4.093157,-8.063058,4.500961,-8.853060,8.697116,-9.018640,-5.435401,7.497770,-9.615451,4.252688,-7.784284,-6.713087,9.527810,-3.140129,4.607147,1.219393,-7.748380,7.260461,-2.236640,6.501559,-1.502424,9.719832,-1.734902,2.299763,7.800568,2.627433,-5.344919,0.138316,-2.054991,-0.751775,-6.030892,2.510939,1.121141,-6.006055,4.791722,-0.028571,5.219425,-4.850568,-0.612123,-3.483907,-4.814572,9.598443,4.690184,4.959168,4.319189,-1.337900,9.721965,-1.731055,-1.762026,-2.794331,-0.634733,0.625505,-5.461811,1.582998,6.969589,7.885379,8.534690,-6.260384,9.847722,-5.702259,8.213700,4.826741,2.925861,4.173877,-8.958948,1.198398,-2.631680,8.458917,-3.191436,4.644832,-9.619388,0.347269,-9.022427,2.446757,8.101208,-3.482441,-6.779375,7.166434,9.580573,3.214692,-9.398801,-4.463424,6.778171,-2.883373,0.884740,1.648958,-5.789089,0.809655,-1.993983,-3.759294,1.622669,-8.601636,-1.204150,8.774003,-9.541300,-5.958581,8.945018,-8.377518,-9.530523,-9.406027,-0.255742,9.717440,-3.776473,9.684172,0.211769,8.306745,-7.729646,-8.570297,9.458082,-4.793916,-4.165092,1.372726,-6.725589,-2.172447,-4.840714,-2.932737,-8.398258,0.676599,-8.629663,7.048437,-8.250614,-4.171525,-0.744261,-0.192773,-3.114324,-3.373239,6.552270,-8.178246,1.043543,-9.524948,8.091008,-3.514628,-5.347300,9.037015,2.125256,1.987443,3.799203,-2.844447,-6.853858,2.157236,-9.953288,-0.163542,8.544642,6.257919,3.214600,-2.378570,-5.044038,6.780052,-0.295479,0.786673,4.508257,-6.862437,9.007509,5.561738,1.195330,-8.515616,-3.978918,2.778996,-6.007098,-5.721557,-0.858357,-4.336793,0.175730,4.215157,-3.456119,6.499372,1.347515,-8.857953,8.538249,7.871729,6.201951,-8.536951,-8.121942,7.744176,-7.793790,-5.288083,6.528648,4.158048,-0.399121,-5.710017,7.913937,4.096561,7.737420,2.912734,8.921399,3.973786,9.530260,-6.007190,5.934845,-9.584974,1.771637,-8.242092,7.938273,0.356289,2.847753],[1.861137,-2.313884,4.588082,-6.495284,-0.882453,0.111981,-3.616566,8.582669,-3.404063,0.044940,-6.576825,-7.024327,0.054196,-4.196260,7.115353,-5.797764,-5.466668,2.531396,4.367808,2.480016,5.738748,3.688526,7.961675,-7.217572,-5.637991,-9.758801,-8.236578,6.308008,-9.632623,1.695569,8.966360,-4.059771,-3.368092,-3.285437,-6.344116,6.264896,-2.099412,4.149263,3.553809,-1.729456,8.634157,-5.308830,5.042467,3.545584,0.189074,5.701157,4.404579,-9.797847,-2.291092,5.335732,-3.845574,-2.661056,9.881663,-8.644377,-2.191258,-9.827937,8.688358,2.225872,9.915591,2.197536,3.155435,9.360518,-3.095811,-4.505133,-0.619036,2.490872,-9.140619,-3.523317,-0.031590,-1.476366,2.184466,-6.169303,2.745475,5.990163,0.589271,4.066251,4.800962,3.720029,8.689595,-9.626695,5.564348,-6.972107,-3.660567,9.570412,-6.286346,3.726714,0.193149,-3.612969,8.185014,1.486399,-6.702813,-6.355789,4.314201,-4.001177,4.016207,5.946961,-4.294196,0.863074,-5.268399,5.672329,-0.719056,-5.767186,4.952014,2.887645,-2.426674,2.436967,2.521626,-6.856005,8.537754,1.865054,-8.633196,0.531892,9.537618,3.128137,6.560479,-1.713725,5.909706,3.431088,4.801178,4.217466,0.986637,4.792190,-6.187908,-7.329111,-9.064469,8.185270,-1.879835,1.224373,8.818121,4.594179,-6.051995,-4.053994,-4.437393,-2.803810,-8.636253,7.421486,-8.947978,6.323350,-6.009245,-7.796790,5.303559,0.284169,-6.709221,4.085552,8.635032,-8.564213,-8.064088,9.229909,9.577550,3.498833,-7.476539,3.536850,4.004662,2.021859,-6.745022,-4.798390,6.011581,1.764045,-0.679046,4.806841,2.571881,6.059774,2.234307,-8.686422,-5.304722,-9.606608,-3.525418,9.020348,-3.591309,-9.949086,-3.316520,0.261573,-3.899413,2.944333,9.838001,3.260402,1.919130,5.305721,9.339525,8.512260,1.511225,-1.681268,2.426911,3.624422,6.881412,7.723159,-8.615563,8.458849,9.201685,3.473377,-6.926369,-0.631482,-8.300000,-0.875206,8.757812,1.785678,7.308337,1.688236,-9.733530,0.048314,-4.867989,2.478390,9.063017,3.244699,-2.381804,4.627187,2.626345,-8.340304,4.771896,-3.576504,-1.465685,7.260349,9.621537,-0.138200,3.517095,7.087264,-0.242897,-3.277215,-4.056706,9.183103,5.334246,3.717020,-7.028053,-6.485834,-6.816246,-4.844804,-2.766828,-0.216380,-4.943931,5.161595,-9.264447,3.797612,-8.327313,-5.189176,-4.193463,5.003281,5.479484,-2.462911,-1.052508,4.368821,8.162733,9.681719,-1.270942,-2.880455,-2.040820,-4.706546,-1.480037,-9.907284,-7.208738,1.634036,-4.675348,-6.718849,1.110753,0.504698,2.831464,-5.346598,-1.880008,-2.007774,-2.126938,-5.036205,7.210077,1.164207,-4.649235,-6.077648,5.731195,6.338760,-2.010303,5.089791,6.983174,7.066063,9.579887,9.144577,9.679620,-7.095475,-3.483194,-0.766737,-1.629226,-4.078274,5.230797,2.636320,-2.010023,-9.364820,-3.696301,7.682322,-8.216922,-0.362332,-1.018212,-1.221290,4.148117,6.000245,8.984962,5.749034,-3.117444,-5.611778,-1.786957,-0.219027,7.864330,2.876770,-9.129682,3.328029,8.995837,-4.337913,5.098118,8.838511,-0.038371,6.725241,9.450742,4.487916,-2.746008,3.533614,5.086245,9.914309,2.728137,-7.027552,0.618694,-6.613842,1.862167,7.835407,3.653609,7.018262,9.539822,1.459064,-0.859272,-4.905213,9.072258,6.195371,6.312701,3.730377,-1.221519,-3.658422,0.294264,-2.352970,-3.395889,9.508674,6.660161,5.913296,4.077397,8.597531,5.856747,-7.618142,5.975075,2.220724,6.682697,1.885804,-8.221543,9.167796,9.483516,-5.766351,6.135312,2.184219,-4.506307,-6.815143,-2.804236,0.898831,4.841712,-3.436465,-3.253994,-5.636452,-4.875878,7.604040,1.660412,-8.023333,-3.291376,-6.145916,-9.477293,-7.150225,-0.655912,4.348719,-1.511228,-2.201284,-6.257028,8.417916,-3.477461,-8.745859,9.690954,9.548960,5.693226,3.083127,-7.478799,6.196005,-2.021325,-9.523102,-3.730762,8.579229,-3.625561,1.732974,-6.876025,7.686844,-5.895514,8.045740,1.876531,-7.385780,-0.520841,1.841383,-1.357731,1.344015,-9.075388,2.092387,7.456365,-9.121456,4.401065,1.640050,-2.963379,-3.575867,-7.262205,-2.331777,2.386467,-6.679151,9.432119,-3.507799,8.879495,-2.319411,9.884282,-7.490808,-7.704143,2.176974,-7.281622,7.480950,5.735841,7.418916,5.643369,-5.319346,2.796890,-1.369350,-0.547259,-1.422785,-0.614325,5.597449,-7.878864,5.799986,-4.641159,-2.559404,2.193132,9.114435,-6.776136,-1.721024,6.165631,-3.283491,-7.889997,7.660549,4.959692,-3.478970,-0.120733,-5.725826,1.466188,7.500940,-1.819212,2.403824,5.700054,-5.644634,8.945512,0.107398,8.658430,6.322937,-8.708177,-3.701707,-8.139553,3.454503,1.033344,-5.548715,6.181105,-9.546385,8.626330,8.421265,2.678356,-6.364849,3.796340,2.088410,2.600070,-9.335550,8.180573,-5.205009,6.086802,-4.788102,7.796391,6.771103,-5.764974,-9.603973,7.119125,-9.484871,1.959012,-5.041229,-7.557989,-0.091586,-5.897609,5.426667,6.951786,-2.303846,1.280574,5.563270,8.471475,-0.975574,1.894300,4.439451,-9.441859,8.808030,2.241668,-3.648827,4.202367,5.776147,3.534672,9.147331,-5.270391,1.955342,-7.587922,-3.891094,-8.899104,4.602053,9.026048,-5.359212,-3.550468,-0.697200,3.685710,1.062801,5.574705,5.679159,0.779827,4.339884,-9.993633,3.932751,-8.844889,-2.127893,-3.192042,-3.092486,-0.837884,-1.090393,-9.608284,-6.257735,1.647988,-5.616063,8.644895,-3.428150,-8.224254,-0.536242,-1.219088,8.524094,-0.637444,6.541983,2.403159,-5.757376,9.035072,-9.128957,7.382430,0.205070,-9.034192,9.603210,3.012806,-1.669480,-8.452402,-1.181286,-0.275271,7.980905,9.450857,-8.841470,-8.769023,0.121596,1.895131,0.830985,-3.749534,5.291207,-3.384888,-0.493630,-0.173353,7.774269,-4.654442,-6.050473,6.986172,4.806653,-7.571664,2.430071,-1.322925,-6.705264,-2.571293,7.960251,8.729564,0.322806,2.552894,1.513755,-5.201262,-5.034841,8.409317,5.101006,-8.985892,5.336457,-4.544035,1.557297,5.573730,-4.937596]], dtype = "float64")#candidate|4210|(4, 588)|const|float64
call_4208 = relay.TupleGetItem(func_880_call(relay.reshape(var_4209.astype('float64'), [1, 14, 12]), relay.reshape(const_4210.astype('float64'), [14, 14, 12]), ), 1)
call_4211 = relay.TupleGetItem(func_883_call(relay.reshape(var_4209.astype('float64'), [1, 14, 12]), relay.reshape(const_4210.astype('float64'), [14, 14, 12]), ), 1)
func_3524_call = mod.get_global_var('func_3524')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_4233 = relay.TupleGetItem(func_3524_call(), 0)
call_4234 = relay.TupleGetItem(func_3526_call(), 0)
output = relay.Tuple([bop_4190,uop_4202,call_4208,var_4209,const_4210,call_4233,])
output2 = relay.Tuple([bop_4190,uop_4202,call_4211,var_4209,const_4210,call_4234,])
func_4235 = relay.Function([var_4188,var_4209,], output)
mod['func_4235'] = func_4235
mod = relay.transform.InferType()(mod)
var_4236 = relay.var("var_4236", dtype = "bool", shape = (14, 15, 5))#candidate|4236|(14, 15, 5)|var|bool
var_4237 = relay.var("var_4237", dtype = "float64", shape = (168,))#candidate|4237|(168,)|var|float64
output = func_4235(var_4236,var_4237,)
func_4238 = relay.Function([var_4236,var_4237,], output)
mutated_mod['func_4238'] = func_4238
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_4245 = func_4081_call()
call_4246 = func_4081_call()
uop_4258 = relay.cos(call_4245.astype('float64')) # shape=(7, 11, 6)
uop_4260 = relay.cos(call_4246.astype('float64')) # shape=(7, 11, 6)
output = uop_4258
output2 = uop_4260
func_4263 = relay.Function([], output)
mod['func_4263'] = func_4263
mod = relay.transform.InferType()(mod)
output = func_4263()
func_4264 = relay.Function([], output)
mutated_mod['func_4264'] = func_4264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4263_call = mod.get_global_var('func_4263')
func_4264_call = mutated_mod.get_global_var('func_4264')
call_4284 = func_4263_call()
call_4285 = func_4263_call()
output = relay.Tuple([call_4284,])
output2 = relay.Tuple([call_4285,])
func_4286 = relay.Function([], output)
mod['func_4286'] = func_4286
mod = relay.transform.InferType()(mod)
output = func_4286()
func_4287 = relay.Function([], output)
mutated_mod['func_4287'] = func_4287
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4319 = relay.const([[[2.144107,7.890338,2.048584,5.042426,4.323355,-5.716378,3.581110,5.038321,5.211455],[8.937266,2.302527,-8.913962,5.639336,-7.832508,-3.670018,-2.702410,-2.459440,0.173423],[-7.738208,9.314643,-1.533856,-7.694636,5.538130,6.247373,-8.150777,-5.958127,-3.333277],[3.771996,5.059663,7.702241,2.907002,6.000098,0.116814,9.899594,5.248825,-9.920570],[-5.238423,3.120115,-7.366329,0.619256,6.083898,3.727496,-1.713481,-1.707526,-1.066613],[-3.285560,9.390639,0.083170,-0.870473,-7.696923,1.142416,3.773914,8.246856,9.193955],[-4.313917,-7.023530,-4.332507,2.318866,-9.625678,-4.948693,2.847066,-5.883207,8.167579],[-2.671631,-8.914294,8.635551,3.504410,-1.027707,-5.675242,-7.179055,-0.851348,-6.333043],[-9.125160,8.834505,2.752641,5.622262,-0.792496,-6.335631,1.550142,2.691177,3.541860],[2.343397,-6.221089,-0.555661,-6.564958,6.247521,7.546973,0.353863,4.927092,5.914848],[4.067926,-4.102370,-0.479599,9.309468,9.688316,-4.332866,7.762176,0.253237,5.672152],[-7.098706,-9.211721,-8.508994,-8.734805,-8.407826,-1.779433,-3.510027,-3.561638,-1.971939],[8.012700,3.194033,-1.511780,-0.601256,7.987417,9.768312,1.662018,-5.534250,8.128392],[1.357408,6.975148,-9.262000,4.738936,1.150315,8.765209,3.796659,1.338196,7.923800],[-8.652392,7.829160,5.808708,-4.049221,3.740227,-0.532290,5.232651,-3.285594,3.679105],[-1.373493,3.923224,4.431949,3.621653,-8.872880,5.029992,8.610997,7.396457,3.484988]],[[6.434604,0.987234,2.303046,-9.942098,7.002358,8.579518,3.282416,-8.388516,6.669457],[7.985378,-7.352808,4.334183,9.824701,3.908619,7.280419,7.846359,-4.311213,3.450976],[-5.739431,-8.032584,-5.088010,1.755813,7.383094,2.631064,5.083011,-3.390431,-9.619036],[1.281288,-7.732711,-9.879794,8.309408,-8.346483,-5.393332,3.083298,9.468316,-6.575244],[8.111290,9.124461,5.187811,5.838152,0.393380,-1.070066,6.557915,8.951832,-1.197282],[-5.626442,3.678500,0.166154,-8.233793,1.895129,-2.914284,-6.134444,1.876879,7.534370],[-0.023472,5.247652,-0.458645,4.594876,0.912281,1.056111,-6.716832,1.928253,-5.069897],[2.908227,-7.088582,3.048833,-3.205170,-2.451013,1.297998,6.456100,7.495862,-2.757471],[-7.401496,3.429779,-5.301681,-5.626980,-5.073337,3.948578,-1.761510,-4.940966,9.698103],[-2.439338,3.403907,3.531073,-7.106485,-3.880848,9.468194,8.682578,-4.505009,2.296264],[7.090166,2.109581,5.431304,-8.776347,8.771304,-1.894921,-8.226307,-7.625004,-1.172529],[4.150881,-0.777487,-5.949356,-2.635201,-0.525456,-1.172856,1.981858,9.728082,-6.133489],[6.474278,-1.356677,8.427161,9.698973,3.814954,0.791700,1.664200,-4.314752,-5.450605],[2.398224,-8.715753,4.830889,1.648866,-0.906098,0.194869,-4.796346,-7.038602,3.987585],[8.711558,3.657315,-3.040009,-8.701296,3.536461,-9.913935,3.863554,-0.590580,0.290368],[8.750330,3.939819,8.463408,-6.587392,9.966524,-9.941549,-6.856335,-3.275719,7.396602]],[[-5.372540,-1.045667,-2.336210,5.882599,8.383993,-4.682082,7.437517,1.322964,9.336646],[6.665560,-0.155610,-9.827648,9.151632,9.514490,3.763674,-9.404170,-5.687542,1.281266],[3.676588,9.101124,6.188186,3.342327,5.101637,3.495291,8.761127,-2.727202,9.975815],[0.089460,7.514063,-8.189013,0.765667,-8.129377,-8.898742,-0.248517,-8.482820,-8.619347],[8.321357,-3.765652,-3.466824,-1.626695,-6.002507,-9.967715,8.020757,-6.130158,-8.912291],[0.060732,5.909128,3.068959,-2.702639,-1.238839,6.801401,-5.690054,-3.627254,8.093205],[-3.983266,8.950268,-1.351163,-9.830453,4.832732,-9.076623,-5.361142,7.765628,8.476967],[6.876654,-1.391913,-5.816890,-3.563121,8.224965,8.241771,3.189823,-7.975878,-4.720878],[-4.164029,-2.765268,1.328751,6.939678,7.418524,-3.194489,-1.704246,-7.398935,8.878023],[-6.149120,6.631356,-5.001047,1.007131,-9.294641,-2.211780,-7.024854,7.543395,-4.333932],[-4.092335,-3.608801,-5.392673,-2.225408,-2.362951,-4.917333,-5.212234,3.134002,-5.646126],[-6.041775,-1.459311,5.096769,-0.745175,4.878508,-1.496468,-7.632231,-5.818300,-3.567007],[1.374837,5.421805,7.801172,4.304800,-0.992036,3.113858,9.627443,-3.238747,-0.690696],[-0.675741,-0.390603,3.931039,-2.789739,6.850529,-2.235952,8.661284,-0.318643,-6.683525],[-9.304244,2.275198,-8.625339,3.429788,8.193550,7.982041,3.186987,-6.304336,-2.201188],[9.439789,4.328085,0.492780,-7.002779,-0.891521,8.239767,7.513973,-9.871957,-1.811615]],[[0.658013,-8.335456,-9.853959,8.063353,-4.098179,3.609232,9.671832,0.890055,9.739388],[-5.002659,5.203828,-5.839916,4.777027,9.760317,8.761496,9.840724,1.807126,5.647626],[8.899668,-5.903418,-4.192392,-4.031773,-5.456738,-4.895984,-0.394950,3.925224,1.983895],[-2.167351,8.908266,7.290518,-1.925885,-5.017679,-7.785950,6.208451,-1.188546,9.867191],[6.777157,-0.589066,4.502603,2.719904,7.983549,-5.220954,-3.169772,-2.933479,-6.216829],[-2.530602,-3.298353,-2.992510,-1.072874,-6.762936,4.551467,8.321322,-4.164876,-2.566882],[8.691198,4.960957,7.058809,6.802642,6.769364,1.566085,1.908497,-6.006157,-2.862751],[6.136495,-7.680014,5.584116,1.033253,-9.089742,-6.169934,-0.692148,-4.484045,1.488074],[9.573928,3.124515,-7.236736,-5.874186,7.943095,3.471599,4.996409,-7.589897,-5.446441],[-5.633291,1.101391,5.472634,6.160624,7.168979,-2.982059,9.532756,8.748091,-6.561174],[-3.150112,-9.804215,9.279382,8.914740,-4.084492,-6.787353,-1.030642,-6.862012,7.563899],[4.265320,7.435677,-7.308800,3.885908,0.391652,-5.212319,-4.843440,-9.004041,-4.097190],[-2.948894,8.281738,-5.705714,-9.241226,-5.808780,-6.694839,-5.819922,-9.244941,-4.132934],[6.320043,3.913828,-1.972068,-5.393729,-7.232528,1.072319,-7.132814,-8.910146,-8.312956],[0.991323,6.936517,-7.810020,7.350888,-6.901886,-7.701872,-0.742112,-4.329283,1.644409],[-1.221526,-5.394513,-2.680033,5.768426,8.050418,-6.693352,-2.233935,-6.214579,8.623454]],[[9.828774,-5.084854,4.660580,-0.658063,-3.287708,0.669445,-3.394095,-5.358661,-5.752674],[-9.433497,8.276363,0.675527,-3.258264,-6.352604,-8.955522,2.872159,-5.991231,9.002974],[-6.130696,-3.085807,-4.792328,-9.979872,5.080782,2.689550,-1.190836,2.248057,-2.167891],[2.558047,3.667843,7.002854,-0.521674,4.077749,-6.194475,-0.736901,8.822765,-3.298603],[-7.254948,-6.013497,6.283369,6.687979,8.670342,0.571586,9.186371,-4.807284,-2.229902],[-9.288598,-1.317215,-5.720784,-1.523176,-4.859394,3.200514,-2.163261,6.759189,7.160761],[-8.651877,-9.192589,1.475580,8.178805,8.484820,8.715874,-4.396456,-0.742000,-0.255441],[5.942101,9.567179,-2.154018,-8.294492,-7.342203,8.998995,-6.928220,-6.194663,2.448212],[7.054574,-8.441914,5.580392,-0.674641,-1.785526,-7.023034,7.449326,3.075529,5.968457],[3.276595,-3.517318,-3.438353,6.462726,-6.764358,4.465035,-6.531791,-0.252379,1.139449],[-0.581913,5.258849,-3.720664,3.887814,-2.223383,-1.465593,-5.163523,7.202962,3.187916],[-2.485201,3.858546,-4.321017,4.411877,5.982487,-6.288542,6.798851,-7.332951,0.314635],[-2.961796,8.256716,0.105420,6.440494,2.397670,8.841267,-4.707700,-6.939225,-7.071161],[-0.528867,7.577835,6.798445,5.769301,-1.010947,-9.071833,-1.140234,9.868819,9.951147],[-8.410952,-3.119987,1.219547,-6.420409,-5.385355,5.260725,-8.776080,-9.288771,6.508369],[5.433404,-1.911055,6.923900,1.125266,1.071763,7.621884,7.598274,2.842768,7.837994]],[[1.527590,-7.046323,-2.931847,-1.236212,-9.197629,-8.492531,7.367234,-1.462647,-3.731684],[-5.546930,1.066115,-1.361260,-7.362736,-8.995969,9.014105,-9.432746,-0.317075,-8.994971],[0.890045,6.470964,1.919199,1.595587,6.231189,-4.874864,9.088182,5.207641,8.482806],[2.694440,8.706930,0.191973,-4.433647,-0.563877,9.999014,3.666693,5.472328,-2.138753],[5.450367,6.365813,9.461701,-4.012840,-6.983679,7.559520,0.903315,8.622657,9.647063],[6.622799,0.025314,-2.392717,6.192106,9.752185,-5.023818,6.300112,9.412197,-9.670163],[7.732405,-6.731515,-2.352560,9.042152,-1.847016,-2.836127,5.255352,0.532964,0.157277],[3.647227,-5.879604,-7.366643,-0.613135,-8.427537,-7.733450,-4.110049,4.718311,-6.487874],[5.659448,9.381777,-9.622327,4.554722,5.585844,-3.179069,-8.798933,5.525099,-1.353192],[8.362230,-2.606477,3.093764,-4.546924,-4.206603,-5.841167,4.736223,-5.779587,5.229634],[-3.304888,-7.790957,-7.070072,1.179652,3.617563,2.658863,-8.335524,-6.458350,-1.049175],[8.415354,-9.245727,-9.280522,-9.271187,-5.885570,-1.191274,-2.389901,-9.389990,-4.763681],[1.397364,8.074826,0.722932,5.667679,8.416458,-9.891705,2.815721,-3.689893,0.817085],[-5.682783,-2.338625,-7.260293,-0.832544,3.163387,9.849586,6.511556,3.165635,6.630713],[4.776229,-6.833688,5.857870,-9.131437,5.601283,-5.208314,9.130698,-4.817569,2.756179],[-2.606728,7.078398,-0.026214,-0.877341,-4.506912,-2.284405,-7.236151,-6.671316,-4.686964]]], dtype = "float64")#candidate|4319|(6, 16, 9)|const|float64
uop_4320 = relay.rsqrt(const_4319.astype('float64')) # shape=(6, 16, 9)
output = uop_4320
output2 = uop_4320
func_4325 = relay.Function([], output)
mod['func_4325'] = func_4325
mod = relay.transform.InferType()(mod)
mutated_mod['func_4325'] = func_4325
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4325_call = mutated_mod.get_global_var('func_4325')
call_4326 = func_4325_call()
output = call_4326
func_4327 = relay.Function([], output)
mutated_mod['func_4327'] = func_4327
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4343 = relay.var("var_4343", dtype = "uint32", shape = (8, 9, 2))#candidate|4343|(8, 9, 2)|var|uint32
var_4344 = relay.var("var_4344", dtype = "uint32", shape = (8, 9, 2))#candidate|4344|(8, 9, 2)|var|uint32
bop_4345 = relay.greater_equal(var_4343.astype('bool'), relay.reshape(var_4344.astype('bool'), relay.shape_of(var_4343))) # shape=(8, 9, 2)
output = bop_4345
output2 = bop_4345
func_4349 = relay.Function([var_4343,var_4344,], output)
mod['func_4349'] = func_4349
mod = relay.transform.InferType()(mod)
mutated_mod['func_4349'] = func_4349
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4349_call = mutated_mod.get_global_var('func_4349')
var_4351 = relay.var("var_4351", dtype = "uint32", shape = (8, 9, 2))#candidate|4351|(8, 9, 2)|var|uint32
var_4352 = relay.var("var_4352", dtype = "uint32", shape = (8, 9, 2))#candidate|4352|(8, 9, 2)|var|uint32
call_4350 = func_4349_call(var_4351,var_4352,)
output = call_4350
func_4353 = relay.Function([var_4351,var_4352,], output)
mutated_mod['func_4353'] = func_4353
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3732_call = mod.get_global_var('func_3732')
func_3734_call = mutated_mod.get_global_var('func_3734')
call_4395 = relay.TupleGetItem(func_3732_call(), 0)
call_4396 = relay.TupleGetItem(func_3734_call(), 0)
var_4397 = relay.var("var_4397", dtype = "float32", shape = (7, 11, 6))#candidate|4397|(7, 11, 6)|var|float32
bop_4398 = relay.less(call_4395.astype('bool'), relay.reshape(var_4397.astype('bool'), relay.shape_of(call_4395))) # shape=(7, 11, 6)
bop_4401 = relay.less(call_4396.astype('bool'), relay.reshape(var_4397.astype('bool'), relay.shape_of(call_4396))) # shape=(7, 11, 6)
output = bop_4398
output2 = bop_4401
func_4410 = relay.Function([var_4397,], output)
mod['func_4410'] = func_4410
mod = relay.transform.InferType()(mod)
mutated_mod['func_4410'] = func_4410
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4411 = relay.var("var_4411", dtype = "float32", shape = (7, 11, 6))#candidate|4411|(7, 11, 6)|var|float32
func_4410_call = mutated_mod.get_global_var('func_4410')
call_4412 = func_4410_call(var_4411)
output = call_4412
func_4413 = relay.Function([var_4411], output)
mutated_mod['func_4413'] = func_4413
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4043_call = mod.get_global_var('func_4043')
func_4044_call = mutated_mod.get_global_var('func_4044')
call_4423 = relay.TupleGetItem(func_4043_call(), 0)
call_4424 = relay.TupleGetItem(func_4044_call(), 0)
output = relay.Tuple([call_4423,])
output2 = relay.Tuple([call_4424,])
func_4439 = relay.Function([], output)
mod['func_4439'] = func_4439
mod = relay.transform.InferType()(mod)
output = func_4439()
func_4440 = relay.Function([], output)
mutated_mod['func_4440'] = func_4440
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_4447 = func_4081_call()
call_4448 = func_4081_call()
output = call_4447
output2 = call_4448
func_4469 = relay.Function([], output)
mod['func_4469'] = func_4469
mod = relay.transform.InferType()(mod)
mutated_mod['func_4469'] = func_4469
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4469_call = mutated_mod.get_global_var('func_4469')
call_4470 = func_4469_call()
output = call_4470
func_4471 = relay.Function([], output)
mutated_mod['func_4471'] = func_4471
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4479 = relay.const([[[10,-6,-8,5,6,-9,-8,5,-5,9,-6,4,1,-10,8,-1],[-10,1,5,-7,1,-5,-6,-4,-9,-4,9,-6,-1,9,6,8],[-7,3,7,3,9,-9,-8,-7,-8,-2,9,1,-4,-9,-10,-8],[10,-1,3,-6,-1,9,-2,8,5,8,10,6,-10,4,-4,9],[6,-10,3,3,-1,-5,7,4,3,-6,1,-7,-8,1,3,-3],[-7,10,-9,3,-3,4,2,-2,9,-8,-3,-1,7,-1,3,1]],[[-9,1,-2,-1,-5,-7,-4,-3,-10,-5,-7,-1,2,5,8,-7],[-5,-6,-3,3,3,-6,-10,1,-10,-10,5,-1,3,-2,10,-9],[-6,-3,3,8,10,4,2,10,4,-1,3,-5,8,1,-5,-4],[-7,-1,-6,8,-4,6,10,2,-9,-2,-4,1,2,-1,-2,7],[3,2,8,5,-4,10,10,9,-4,2,-8,2,-4,-9,8,-6],[6,10,7,8,8,-7,-9,-8,7,-2,2,7,7,-2,1,-5]],[[5,-1,-1,-6,-6,-7,-1,-9,-4,5,5,10,7,-6,-2,-5],[6,-9,-6,8,-10,-10,-10,1,-10,-8,2,10,3,-8,-6,-10],[-3,-1,-8,5,-4,10,4,7,-2,10,6,1,-5,-2,6,-7],[-3,-7,7,-8,7,-2,1,-6,6,-5,5,10,7,-4,4,-1],[10,-9,-2,-6,4,9,-9,8,-2,-10,1,8,1,-2,-5,-5],[2,4,10,-2,-1,-2,7,-8,5,5,-7,3,-9,5,7,-3]],[[-4,3,-6,-10,10,-7,-2,-6,-2,-2,-8,-7,9,2,-3,-4],[-1,-3,-2,4,-5,-8,6,5,-9,-7,9,5,-9,3,-4,-1],[4,10,8,-9,-4,1,5,10,-10,-2,-4,-8,-5,-6,-10,2],[4,-3,7,-5,-10,-3,-10,-10,1,-1,10,9,-10,4,4,5],[9,8,9,7,10,6,-2,-10,2,-9,1,-8,2,3,10,-4],[6,-5,5,-6,-3,-5,-1,-9,8,-5,-5,-10,-9,-5,-8,7]],[[10,9,-5,10,-9,4,-4,5,10,-1,-5,4,-3,-2,-5,-7],[3,10,-2,8,7,-1,5,-3,6,-10,4,-4,2,-7,4,-1],[9,9,-2,-1,10,-2,-8,10,8,4,5,-8,-1,-3,9,4],[-7,-9,1,-2,4,4,10,5,-3,9,-6,-6,-3,3,-4,10],[-1,2,9,-3,-7,-4,-2,-4,-7,-4,3,-9,8,6,1,5],[3,6,-1,-4,7,-5,6,-5,-6,5,8,4,7,9,-6,-2]],[[2,-4,8,-1,-5,-5,10,5,2,3,-5,7,9,-10,8,5],[-1,-3,6,-5,2,3,3,-6,-7,4,-8,-5,-4,-1,8,-4],[-6,7,1,-4,-5,5,-4,-10,1,-6,-4,-3,6,3,-1,-3],[4,-8,4,-9,10,7,-6,6,1,-6,3,-3,5,-10,-3,-5],[5,-5,7,9,8,1,1,1,1,8,7,2,-7,10,7,10],[-1,2,9,-5,-5,10,8,-9,9,5,-9,9,9,-8,5,8]],[[-3,3,-2,-6,9,-5,9,7,1,5,-9,8,6,-6,-5,6],[-7,-7,-1,5,3,6,4,-2,-7,7,-3,-6,10,-9,-8,-3],[8,-1,-5,9,-6,1,-10,5,2,-3,-4,4,-9,-10,-10,2],[-5,6,-1,9,2,5,3,-9,-1,-7,-9,10,-6,7,-7,5],[-1,-1,8,2,-10,-1,-7,5,1,3,-5,-10,-7,-8,-3,4],[3,-10,7,-2,9,9,4,-3,10,-6,1,7,-10,-10,-7,9]],[[-2,-3,-1,8,-6,5,3,-6,-4,-9,6,-4,-10,-9,1,-6],[-9,5,-4,9,10,-2,9,-7,10,-1,9,-3,10,-5,-4,-5],[2,4,-3,-5,-6,-5,5,-2,-5,1,6,4,-8,8,-1,-4],[3,8,2,8,-2,-2,6,-2,-7,-6,7,-9,-10,-4,10,-6],[7,-8,9,4,10,8,2,-6,1,1,3,-10,7,-3,-3,1],[-5,8,4,5,9,-9,-3,9,-6,-1,-10,-1,6,-5,5,10]]], dtype = "int16")#candidate|4479|(8, 6, 16)|const|int16
var_4480 = relay.var("var_4480", dtype = "int16", shape = (8, 6, 16))#candidate|4480|(8, 6, 16)|var|int16
bop_4481 = relay.subtract(const_4479.astype('int16'), relay.reshape(var_4480.astype('int16'), relay.shape_of(const_4479))) # shape=(8, 6, 16)
func_4469_call = mod.get_global_var('func_4469')
func_4471_call = mutated_mod.get_global_var('func_4471')
call_4489 = func_4469_call()
call_4490 = func_4469_call()
func_1801_call = mod.get_global_var('func_1801')
func_1803_call = mutated_mod.get_global_var('func_1803')
const_4492 = relay.const([-6,5,-8,5,-7,2,1,-3,7,-3,7,3,3,6,-1,-9,1,10,1,9,-2,-3,6,-5,-10,-6,-4,-2,8,-4,-3,6,8,-5,-3,-9,7,8,-8,10,3,-4,-7,-5,-6,-6,3,3,1,-10,-2,9,-9,-5,-2,-4,3,2,-6,-8,6,-9,7,-10,-10,3,9,3,1,-6,3,7,-10,9,-6,10,1,2,-3,-8,-3,5,7,2,6,-2,-8,8,-8,5,1,7,-5,2,1,1,5,8,3,-9,-7,-9,-9,-2,3,-10,-3,8,6,-5,4,-1,-1,-8,-10,-5,-7,2,1,-3,-3,9,-2,3,-9,-4,-2,9,-5,-10,-5,2,9,-7,9,-3,5,-8,8,-4,8,9,7,7,-6,-9,-2,-2,4,-9,1,5,3,4,5,-8,8,-4,5,8,-8,2,-7,-1,6,-6,-4,-3,-6,-8,-5,-5,6,-9,-1,-2,-4,-1,1,-2,1,-5,10,-2,5,9,-8,6,-4,-3,-3,-5,1,6,7,-10,7,-5,-3,5,-7,-1,-7,-9,3,-5,8,3,-6,-5,8,-3,-1,2,-3,4,-1,7,4,-6,-7,-5,-3,-8,7,1,-9,10,1,5,-1,6,-8,8,8,-10,9,3,2,-10,-5,6,-3,5,10,-10,1,-3,-10,10,8,-4,-5,-8,8,-8,9,8,-10,-8,3,1,5,-2,6,-2,3,-1,10,-7,-5,1,9,-6,2,-1,-3,10,8,-2,5,-7,9,-7,7,-7,-9,8,10,10,9,7,-4,1,-1,6,-6,-4,-3,6,-5,2,-3,-5,-6,5,6,9,-10,-4,3,5,-3,6,2,-5,5,4,-10,3,3,1,-1,-9,-9,10,-3,3,5,-3,9,5,-7,-4,-7,-5,4,-10,-6,-3,-4,-9,9,-4,-1,-3,-6,6,9,-2,-4,7,-3,-10,5,-6,-8,5,-6,4,-7,8,7,-9], dtype = "int16")#candidate|4492|(364,)|const|int16
call_4491 = relay.TupleGetItem(func_1801_call(relay.reshape(const_4492.astype('int16'), [13, 7, 4])), 2)
call_4493 = relay.TupleGetItem(func_1803_call(relay.reshape(const_4492.astype('int16'), [13, 7, 4])), 2)
output = relay.Tuple([bop_4481,call_4489,call_4491,const_4492,])
output2 = relay.Tuple([bop_4481,call_4490,call_4493,const_4492,])
func_4501 = relay.Function([var_4480,], output)
mod['func_4501'] = func_4501
mod = relay.transform.InferType()(mod)
var_4502 = relay.var("var_4502", dtype = "int16", shape = (8, 6, 16))#candidate|4502|(8, 6, 16)|var|int16
output = func_4501(var_4502)
func_4503 = relay.Function([var_4502], output)
mutated_mod['func_4503'] = func_4503
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4325_call = mod.get_global_var('func_4325')
func_4327_call = mutated_mod.get_global_var('func_4327')
call_4606 = func_4325_call()
call_4607 = func_4325_call()
output = call_4606
output2 = call_4607
func_4611 = relay.Function([], output)
mod['func_4611'] = func_4611
mod = relay.transform.InferType()(mod)
output = func_4611()
func_4612 = relay.Function([], output)
mutated_mod['func_4612'] = func_4612
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_4627 = func_4081_call()
call_4628 = func_4081_call()
func_102_call = mod.get_global_var('func_102')
func_106_call = mutated_mod.get_global_var('func_106')
const_4641 = relay.const([[-9,-10],[-4,-7],[-4,-7],[-2,-1],[6,10],[-3,1],[9,2],[5,3],[-2,-4],[-5,-3],[-1,-4]], dtype = "int16")#candidate|4641|(11, 2)|const|int16
const_4642 = relay.const([-4,6,8,2,-3,-3,7,4,-3,2,1,10,6,4,6,7,-4,-3,2,4,-4,-2,-6,-2,-3,8,-4,9,2,2,-5,-8,-5,1,-6,-5,-1,-3,5,8,2,1,-6,7,-6,-6,1,-1,-4,-4,-9,-1,7,-9,-1,-10,3,-10,4,7,-8,2,-6,8,5,-10,-2,-7,5,1,3,9,-5,-4,-6,-8,3,-6,2,9,-7,-4,-10,-7,-6,-8,-10,-6,-6,1,-3,-8,10,9,9,1,-9,-2,5,3,-8,2,-10,10,-3,7,3,-6,1,-2,3,4,-8,8,-8,7,-4,3,-1,7,7,2,1,-10,1,-3,-7,4,-5,-1,5,-10,-10,2,-7,7,-5,3,-7,8,-7,2,-8,-1,1,8,3,7,-1,7,10,-4,-3,2,-10,-7,1,-2,6,-4,7,-4,-1,6,-2,2,8,-8,2,2,10,2,-9,-2,8,-1,-9,-7,-10,2,5,5,-1,6,-2,-7,6,-4,4,9,2,-8,8,3,8,1,1,-9,-8,-6,-3,-1,-4,5,10,9,5,5,5,-1,-3,-8,-8,-7,-4,-9,5,8,-6,7,-7,8,-6,-5,-10,5,1,-8,-10,7,7,1,-7,-1,-1,1,-9,-2,-3,-7,5,6,3,5,8,-9,10,-7,8,2,-8,-9,-1,1,10,-6,-10,-3,8,-8,1,-3,7,8,8,7,2,-5,9,-6,6,7,8,-8,-7,-5,2,-9,-8,4,-6,5,9,10,8,10,-2,7,-7,8,-1,-2,1,-2,6,-6,-7,10,-1,-3,-10,2,-9,2,5,-10,3,9], dtype = "int16")#candidate|4642|(308,)|const|int16
call_4640 = relay.TupleGetItem(func_102_call(relay.reshape(const_4641.astype('int16'), [1, 2, 11]), relay.reshape(const_4642.astype('int16'), [14, 2, 11]), ), 0)
call_4643 = relay.TupleGetItem(func_106_call(relay.reshape(const_4641.astype('int16'), [1, 2, 11]), relay.reshape(const_4642.astype('int16'), [14, 2, 11]), ), 0)
func_4043_call = mod.get_global_var('func_4043')
func_4044_call = mutated_mod.get_global_var('func_4044')
call_4645 = relay.TupleGetItem(func_4043_call(), 0)
call_4646 = relay.TupleGetItem(func_4044_call(), 0)
func_1349_call = mod.get_global_var('func_1349')
func_1352_call = mutated_mod.get_global_var('func_1352')
const_4648 = relay.const([-9.592197,6.838380,6.427731,-9.097959,-6.520244,-4.240338,-9.496499,-3.394128,3.070047,6.613029,6.089141,-3.140547,-5.301756,-4.494922,8.333498,-7.899147,-3.031563,0.503421,-7.226707,3.330206,0.400089,4.746165,9.039103,1.453636,1.748757,-6.651402,5.936034,-7.310029,-5.332794,7.032992,-7.474205,-3.284114,8.636881,-0.245987,4.006915,-2.970775,-7.748442,-5.573628,4.020541,-8.631425,1.827797,6.153608,7.390878,-2.140460,-9.049932,0.303403,5.723739,-6.787226,-2.689443,-1.442678,-9.862299,-4.170241,-7.459042,-2.031996,-1.383655,-0.623192,0.806428,-0.577152,0.203537,-1.582513,-6.940453,-4.137560,4.547013,-0.262077,-7.869790,4.201910,8.765292,5.806249,2.981730,5.234852,-4.006413,5.355339,-8.256364,5.393136,-7.021256,3.824491,5.668235,-1.986904,-8.473571,-5.464656,3.247183,1.627911,3.645762,-5.948274], dtype = "float64")#candidate|4648|(84,)|const|float64
call_4647 = relay.TupleGetItem(func_1349_call(relay.reshape(const_4648.astype('float64'), [12, 7, 1])), 0)
call_4649 = relay.TupleGetItem(func_1352_call(relay.reshape(const_4648.astype('float64'), [12, 7, 1])), 0)
func_3554_call = mod.get_global_var('func_3554')
func_3557_call = mutated_mod.get_global_var('func_3557')
call_4652 = relay.TupleGetItem(func_3554_call(relay.reshape(const_4641.astype('int16'), [22,])), 0)
call_4653 = relay.TupleGetItem(func_3557_call(relay.reshape(const_4641.astype('int16'), [22,])), 0)
func_4349_call = mod.get_global_var('func_4349')
func_4353_call = mutated_mod.get_global_var('func_4353')
const_4668 = relay.const([[7,6],[2,3],[-3,-5],[-9,-1],[3,7],[8,-3],[10,-3],[5,-5],[-3,2],[-3,7],[-5,4],[3,6],[-7,-3],[-8,-5],[-8,5],[10,-10],[1,2],[6,-3],[-10,-4],[-10,-9],[5,2],[-8,-2],[-7,-2],[9,4],[3,-5],[3,-1],[-4,-8],[-5,-3],[-10,-4],[4,-7],[-4,-10],[10,-2],[-9,-3],[6,-5],[-6,5],[1,2],[3,-10],[-1,-9],[-5,-10],[4,9],[1,-6],[-3,-9],[6,-2],[4,-8],[9,5],[4,-7],[-5,-5],[8,-2],[5,10],[-9,-9],[-5,-1],[5,7],[9,4],[-7,4],[9,-1],[-5,-8],[1,8],[-6,-6],[-8,-9],[8,6],[7,-1],[-2,-6],[-4,8],[10,-10],[3,-2],[5,-10],[-4,-7],[-5,10],[-3,-6],[-3,4],[9,-7],[-7,9]], dtype = "uint32")#candidate|4668|(72, 2)|const|uint32
call_4667 = func_4349_call(relay.reshape(const_4668.astype('uint32'), [8, 9, 2]), relay.reshape(const_4668.astype('uint32'), [8, 9, 2]), )
call_4669 = func_4349_call(relay.reshape(const_4668.astype('uint32'), [8, 9, 2]), relay.reshape(const_4668.astype('uint32'), [8, 9, 2]), )
bop_4678 = relay.logical_xor(const_4668.astype('int8'), relay.reshape(call_4667.astype('int8'), relay.shape_of(const_4668))) # shape=(72, 2)
bop_4681 = relay.logical_xor(const_4668.astype('int8'), relay.reshape(call_4669.astype('int8'), relay.shape_of(const_4668))) # shape=(72, 2)
bop_4686 = relay.divide(bop_4678.astype('float32'), relay.reshape(call_4667.astype('float32'), relay.shape_of(bop_4678))) # shape=(72, 2)
bop_4689 = relay.divide(bop_4681.astype('float32'), relay.reshape(call_4669.astype('float32'), relay.shape_of(bop_4681))) # shape=(72, 2)
func_2791_call = mod.get_global_var('func_2791')
func_2796_call = mutated_mod.get_global_var('func_2796')
var_4700 = relay.var("var_4700", dtype = "float32", shape = (225,))#candidate|4700|(225,)|var|float32
var_4701 = relay.var("var_4701", dtype = "float64", shape = (168,))#candidate|4701|(168,)|var|float64
var_4702 = relay.var("var_4702", dtype = "float64", shape = (2352,))#candidate|4702|(2352,)|var|float64
call_4699 = relay.TupleGetItem(func_2791_call(relay.reshape(var_4700.astype('float32'), [15, 1, 15]), relay.reshape(var_4701.astype('float64'), [168,]), relay.reshape(var_4702.astype('float64'), [2352,]), ), 3)
call_4703 = relay.TupleGetItem(func_2796_call(relay.reshape(var_4700.astype('float32'), [15, 1, 15]), relay.reshape(var_4701.astype('float64'), [168,]), relay.reshape(var_4702.astype('float64'), [2352,]), ), 3)
func_2131_call = mod.get_global_var('func_2131')
func_2134_call = mutated_mod.get_global_var('func_2134')
var_4709 = relay.var("var_4709", dtype = "float64", shape = (18, 70))#candidate|4709|(18, 70)|var|float64
call_4708 = relay.TupleGetItem(func_2131_call(relay.reshape(var_4709.astype('float64'), [7, 15, 12]), relay.reshape(const_4648.astype('float64'), [1, 84]), ), 3)
call_4710 = relay.TupleGetItem(func_2134_call(relay.reshape(var_4709.astype('float64'), [7, 15, 12]), relay.reshape(const_4648.astype('float64'), [1, 84]), ), 3)
output = relay.Tuple([call_4627,call_4640,const_4641,const_4642,call_4645,call_4647,const_4648,call_4652,bop_4686,call_4699,var_4700,var_4701,var_4702,call_4708,var_4709,])
output2 = relay.Tuple([call_4628,call_4643,const_4641,const_4642,call_4646,call_4649,const_4648,call_4653,bop_4689,call_4703,var_4700,var_4701,var_4702,call_4710,var_4709,])
func_4711 = relay.Function([var_4700,var_4701,var_4702,var_4709,], output)
mod['func_4711'] = func_4711
mod = relay.transform.InferType()(mod)
mutated_mod['func_4711'] = func_4711
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4711_call = mutated_mod.get_global_var('func_4711')
var_4713 = relay.var("var_4713", dtype = "float32", shape = (225,))#candidate|4713|(225,)|var|float32
var_4714 = relay.var("var_4714", dtype = "float64", shape = (168,))#candidate|4714|(168,)|var|float64
var_4715 = relay.var("var_4715", dtype = "float64", shape = (2352,))#candidate|4715|(2352,)|var|float64
var_4716 = relay.var("var_4716", dtype = "float64", shape = (18, 70))#candidate|4716|(18, 70)|var|float64
call_4712 = func_4711_call(var_4713,var_4714,var_4715,var_4716,)
output = call_4712
func_4717 = relay.Function([var_4713,var_4714,var_4715,var_4716,], output)
mutated_mod['func_4717'] = func_4717
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4611_call = mod.get_global_var('func_4611')
func_4612_call = mutated_mod.get_global_var('func_4612')
call_4735 = func_4611_call()
call_4736 = func_4611_call()
output = relay.Tuple([call_4735,])
output2 = relay.Tuple([call_4736,])
func_4742 = relay.Function([], output)
mod['func_4742'] = func_4742
mod = relay.transform.InferType()(mod)
mutated_mod['func_4742'] = func_4742
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4742_call = mutated_mod.get_global_var('func_4742')
call_4743 = func_4742_call()
output = call_4743
func_4744 = relay.Function([], output)
mutated_mod['func_4744'] = func_4744
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4749 = relay.var("var_4749", dtype = "float64", shape = (12, 1, 11))#candidate|4749|(12, 1, 11)|var|float64
uop_4750 = relay.atanh(var_4749.astype('float64')) # shape=(12, 1, 11)
output = uop_4750
output2 = uop_4750
func_4767 = relay.Function([var_4749,], output)
mod['func_4767'] = func_4767
mod = relay.transform.InferType()(mod)
mutated_mod['func_4767'] = func_4767
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4768 = relay.var("var_4768", dtype = "float64", shape = (12, 1, 11))#candidate|4768|(12, 1, 11)|var|float64
func_4767_call = mutated_mod.get_global_var('func_4767')
call_4769 = func_4767_call(var_4768)
output = call_4769
func_4770 = relay.Function([var_4768], output)
mutated_mod['func_4770'] = func_4770
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_4806 = func_4081_call()
call_4807 = func_4081_call()
output = relay.Tuple([call_4806,])
output2 = relay.Tuple([call_4807,])
func_4826 = relay.Function([], output)
mod['func_4826'] = func_4826
mod = relay.transform.InferType()(mod)
mutated_mod['func_4826'] = func_4826
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4826_call = mutated_mod.get_global_var('func_4826')
call_4827 = func_4826_call()
output = call_4827
func_4828 = relay.Function([], output)
mutated_mod['func_4828'] = func_4828
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3515_call = mod.get_global_var('func_3515')
func_3517_call = mutated_mod.get_global_var('func_3517')
call_4837 = func_3515_call()
call_4838 = func_3515_call()
output = relay.Tuple([call_4837,])
output2 = relay.Tuple([call_4838,])
func_4848 = relay.Function([], output)
mod['func_4848'] = func_4848
mod = relay.transform.InferType()(mod)
mutated_mod['func_4848'] = func_4848
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4848_call = mutated_mod.get_global_var('func_4848')
call_4849 = func_4848_call()
output = call_4849
func_4850 = relay.Function([], output)
mutated_mod['func_4850'] = func_4850
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3515_call = mod.get_global_var('func_3515')
func_3517_call = mutated_mod.get_global_var('func_3517')
call_4866 = func_3515_call()
call_4867 = func_3515_call()
func_4501_call = mod.get_global_var('func_4501')
func_4503_call = mutated_mod.get_global_var('func_4503')
var_4892 = relay.var("var_4892", dtype = "int16", shape = (768,))#candidate|4892|(768,)|var|int16
call_4891 = relay.TupleGetItem(func_4501_call(relay.reshape(var_4892.astype('int16'), [8, 6, 16])), 3)
call_4893 = relay.TupleGetItem(func_4503_call(relay.reshape(var_4892.astype('int16'), [8, 6, 16])), 3)
func_3581_call = mod.get_global_var('func_3581')
func_3583_call = mutated_mod.get_global_var('func_3583')
call_4913 = func_3581_call()
call_4914 = func_3581_call()
output = relay.Tuple([call_4866,call_4891,var_4892,call_4913,])
output2 = relay.Tuple([call_4867,call_4893,var_4892,call_4914,])
func_4915 = relay.Function([var_4892,], output)
mod['func_4915'] = func_4915
mod = relay.transform.InferType()(mod)
mutated_mod['func_4915'] = func_4915
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4916 = relay.var("var_4916", dtype = "int16", shape = (768,))#candidate|4916|(768,)|var|int16
func_4915_call = mutated_mod.get_global_var('func_4915')
call_4917 = func_4915_call(var_4916)
output = call_4917
func_4918 = relay.Function([var_4916], output)
mutated_mod['func_4918'] = func_4918
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_5036 = func_4081_call()
call_5037 = func_4081_call()
uop_5043 = relay.sqrt(call_5036.astype('float64')) # shape=(7, 11, 6)
uop_5045 = relay.sqrt(call_5037.astype('float64')) # shape=(7, 11, 6)
output = uop_5043
output2 = uop_5045
func_5050 = relay.Function([], output)
mod['func_5050'] = func_5050
mod = relay.transform.InferType()(mod)
mutated_mod['func_5050'] = func_5050
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5050_call = mutated_mod.get_global_var('func_5050')
call_5051 = func_5050_call()
output = call_5051
func_5052 = relay.Function([], output)
mutated_mod['func_5052'] = func_5052
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4043_call = mod.get_global_var('func_4043')
func_4044_call = mutated_mod.get_global_var('func_4044')
call_5091 = relay.TupleGetItem(func_4043_call(), 2)
call_5092 = relay.TupleGetItem(func_4044_call(), 2)
func_102_call = mod.get_global_var('func_102')
func_106_call = mutated_mod.get_global_var('func_106')
var_5104 = relay.var("var_5104", dtype = "int16", shape = (22,))#candidate|5104|(22,)|var|int16
var_5105 = relay.var("var_5105", dtype = "int16", shape = (308,))#candidate|5105|(308,)|var|int16
call_5103 = relay.TupleGetItem(func_102_call(relay.reshape(var_5104.astype('int16'), [1, 2, 11]), relay.reshape(var_5105.astype('int16'), [14, 2, 11]), ), 1)
call_5106 = relay.TupleGetItem(func_106_call(relay.reshape(var_5104.astype('int16'), [1, 2, 11]), relay.reshape(var_5105.astype('int16'), [14, 2, 11]), ), 1)
output = relay.Tuple([call_5091,call_5103,var_5104,var_5105,])
output2 = relay.Tuple([call_5092,call_5106,var_5104,var_5105,])
func_5109 = relay.Function([var_5104,var_5105,], output)
mod['func_5109'] = func_5109
mod = relay.transform.InferType()(mod)
mutated_mod['func_5109'] = func_5109
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5109_call = mutated_mod.get_global_var('func_5109')
var_5111 = relay.var("var_5111", dtype = "int16", shape = (22,))#candidate|5111|(22,)|var|int16
var_5112 = relay.var("var_5112", dtype = "int16", shape = (308,))#candidate|5112|(308,)|var|int16
call_5110 = func_5109_call(var_5111,var_5112,)
output = call_5110
func_5113 = relay.Function([var_5111,var_5112,], output)
mutated_mod['func_5113'] = func_5113
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3581_call = mod.get_global_var('func_3581')
func_3583_call = mutated_mod.get_global_var('func_3583')
call_5120 = func_3581_call()
call_5121 = func_3581_call()
func_3901_call = mod.get_global_var('func_3901')
func_3903_call = mutated_mod.get_global_var('func_3903')
call_5123 = relay.TupleGetItem(func_3901_call(relay.reshape(call_5120.astype('float32'), [7, 11, 6])), 0)
call_5124 = relay.TupleGetItem(func_3903_call(relay.reshape(call_5120.astype('float32'), [7, 11, 6])), 0)
bop_5131 = relay.divide(call_5123.astype('float64'), relay.reshape(call_5120.astype('float64'), relay.shape_of(call_5123))) # shape=(7, 11, 6)
bop_5134 = relay.divide(call_5124.astype('float64'), relay.reshape(call_5121.astype('float64'), relay.shape_of(call_5124))) # shape=(7, 11, 6)
output = bop_5131
output2 = bop_5134
func_5136 = relay.Function([], output)
mod['func_5136'] = func_5136
mod = relay.transform.InferType()(mod)
output = func_5136()
func_5137 = relay.Function([], output)
mutated_mod['func_5137'] = func_5137
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4043_call = mod.get_global_var('func_4043')
func_4044_call = mutated_mod.get_global_var('func_4044')
call_5178 = relay.TupleGetItem(func_4043_call(), 0)
call_5179 = relay.TupleGetItem(func_4044_call(), 0)
func_4349_call = mod.get_global_var('func_4349')
func_4353_call = mutated_mod.get_global_var('func_4353')
const_5181 = relay.const([2,-4,8,1,10,-7,5,3,4,-2,4,6,10,9,9,-3,-2,8,-7,-5,4,9,9,9,-9,-8,4,8,-3,9,-1,-5,-9,2,-3,4,-10,7,6,-3,-8,9,-6,8,-4,-3,9,-7,-8,4,-7,-9,5,8,-3,-6,1,2,2,7,9,10,-8,6,-7,9,1,3,-5,7,10,-8,-1,-10,-10,-7,-9,-7,-4,-2,5,5,9,-4,-6,2,-6,-1,-9,-8,-10,-2,-1,-7,-3,-6,-10,6,6,4,1,-2,-6,-2,5,-8,4,-5,8,-10,1,-7,6,2,3,7,-2,9,-1,-3,-2,3,-10,10,2,-6,9,-6,9,6,6,4,-2,5,7,-4,-10,4,7,7,6,-2,7,10], dtype = "uint32")#candidate|5181|(144,)|const|uint32
call_5180 = func_4349_call(relay.reshape(const_5181.astype('uint32'), [8, 9, 2]), relay.reshape(const_5181.astype('uint32'), [8, 9, 2]), )
call_5182 = func_4349_call(relay.reshape(const_5181.astype('uint32'), [8, 9, 2]), relay.reshape(const_5181.astype('uint32'), [8, 9, 2]), )
func_3254_call = mod.get_global_var('func_3254')
func_3257_call = mutated_mod.get_global_var('func_3257')
const_5189 = relay.const([[3.896524,-3.320287,-8.640324,-4.132942,2.912902,-0.022231],[9.378695,-0.866567,-2.889503,-0.932512,-5.111734,-0.319298],[-5.142412,-3.897654,-3.543011,9.380408,7.664444,-9.828427],[9.914797,0.946634,-7.458247,-6.656166,-2.258948,-9.926619],[-2.914669,7.844176,9.674492,-7.792611,0.050651,-8.123220],[1.257096,1.880086,-2.942652,8.337730,8.368517,-0.694632],[-0.136150,1.209694,5.978709,-1.707921,-8.973527,8.855218],[5.103640,7.161726,-3.456416,-2.843298,4.345589,-9.081074],[7.814108,7.766627,1.319884,-5.139703,-6.979407,-4.292081],[-9.375284,-8.081241,-0.149665,-0.120783,7.796123,-7.331476],[4.351975,-0.372170,0.436078,-9.033440,-5.612296,3.427688],[8.553311,9.522042,3.969297,-3.455228,-6.663363,6.228378],[-5.096000,4.931531,0.745047,2.250907,-2.776069,-4.340137],[-4.898887,7.044393,-3.290466,-1.337600,-5.619939,-9.916179],[0.403484,8.940292,2.345624,-1.414950,-7.352780,1.279484],[-4.168859,6.123600,-4.605772,-0.106401,-9.270012,2.424610],[-6.104236,0.640606,-3.395546,-7.113293,-7.433407,5.047330],[-4.692425,6.267318,0.210568,4.909863,3.127952,7.493496],[-3.464137,-0.281425,8.681679,3.773836,-5.159893,-7.162982],[-6.029580,-7.933094,0.540207,-1.849659,-7.727611,-0.111459],[3.154457,2.192477,-7.977374,-0.694282,-2.176799,-7.561876],[5.464722,9.392163,-1.171127,-5.319974,-3.400632,4.107116],[-3.340228,-8.527929,6.217026,7.962287,-9.237822,6.296343],[5.280663,7.896318,-9.479883,9.104427,6.733973,5.044169],[-2.286498,3.962102,7.604409,-3.379675,-7.070207,-1.422485],[-5.857481,-8.087360,-8.915008,7.613033,-0.106731,0.739383],[-8.044506,-6.919309,8.269739,9.933693,5.189568,-0.523173],[8.751291,-7.435736,0.483321,7.346506,-2.960091,-1.886000],[6.748627,-0.003873,-9.740426,8.005635,-9.812153,6.098575],[1.385309,-9.075268,3.257335,0.415701,2.949731,-3.105590],[-4.753385,-4.646883,-7.728318,9.434340,1.094992,5.054454],[1.102303,-3.955452,-1.044340,9.041469,4.800298,-8.139537],[8.336140,6.974522,7.436731,6.337058,-7.206071,7.792847],[7.364521,-7.840747,-2.115963,-5.161755,-5.052389,-3.449459],[-2.168237,8.326035,1.943116,-1.214585,5.923813,3.412865],[-9.007409,4.327774,7.750744,1.546450,3.070361,5.162325],[9.792744,-4.169773,-9.343779,-4.934198,-6.143273,-6.400150],[9.572283,-4.089616,9.399463,5.552330,9.905875,-5.598965],[7.083539,6.059521,9.021542,2.074705,-9.883882,7.193016],[-0.718539,-4.094578,8.932352,-6.361539,5.774488,5.072790],[-9.036072,-9.061989,2.395226,-0.857366,-2.888957,-3.228347],[-3.826148,-1.597462,3.832254,-4.572117,7.110974,-5.169678],[7.376170,3.824486,-9.936063,3.147655,-0.102156,-2.503628],[-3.523423,-0.498959,-0.015743,1.624911,-8.698294,5.262614],[8.654962,3.455160,-6.816912,2.563095,-0.187891,2.794750],[2.851949,-3.765942,-1.931516,-4.922369,3.902167,-4.640455],[2.678254,7.627508,9.762593,0.313315,-7.022221,-0.965911],[-4.315324,-6.476315,-2.401035,7.769229,5.022150,5.686316],[-5.433974,-9.571400,5.659111,2.145157,-4.953550,-3.753894],[-0.639302,-2.605618,3.149117,1.986544,-8.786114,-1.847383],[9.098481,3.081805,9.651142,9.325867,-1.066926,-7.473977],[-2.968840,-9.235461,-6.526679,-6.536903,-8.872725,0.376033],[5.858681,5.527416,-2.407685,3.963963,-0.832486,-7.764289],[2.921628,3.069689,-5.034120,3.868943,-0.830138,3.005498],[2.406483,4.255520,7.828582,9.663936,8.258425,-0.720488],[-2.320948,-8.276025,-1.935312,4.396399,-1.579719,9.077710],[-9.654216,4.901566,-0.550256,3.256483,-9.189064,0.916904],[1.544490,0.172316,-1.487222,-6.936797,1.380553,5.488585],[-6.108051,9.670526,2.857024,6.314066,-0.897448,-2.666496],[3.308451,-5.023384,-0.482119,6.147252,-4.480930,2.674485],[0.058437,2.363448,-5.551602,-4.565038,0.774505,4.162056],[6.976372,-8.451759,6.473631,-0.186290,-6.917523,-4.848961],[0.623631,-1.405087,-6.243497,-1.408392,-6.495793,-2.608761],[-3.081375,7.538964,7.737510,-6.773226,9.365772,-4.388467],[-0.323465,4.087460,7.517038,3.914913,-9.703463,-3.606634],[8.525092,-8.337981,-7.279808,-7.277222,2.285528,6.881589],[-9.450085,5.119315,-2.948800,-8.827718,0.596428,-8.875731],[-9.847606,8.938468,7.876580,2.028665,-0.173015,-9.075550],[4.349693,1.418191,-6.172129,1.730315,-7.400836,-0.535799],[-7.962396,7.493690,7.572058,-6.929152,-2.954669,-6.999004],[7.300423,-7.027813,5.083653,-0.311906,-6.855442,6.645886],[-7.069106,3.995748,-5.943076,-3.716566,9.565532,-9.166995],[4.836747,-9.979533,-0.274195,4.953285,-9.375375,9.070902],[0.854315,-6.841483,6.699512,-2.213618,-0.508584,-1.677999],[-7.452644,7.635030,2.115702,-8.745762,-2.893578,-9.112697],[1.404342,-1.146862,7.940581,2.365536,-2.142927,-3.158806],[3.832075,2.124287,9.500227,-0.127983,-7.793537,3.715797],[9.639518,-8.665836,-1.300014,-0.985287,6.693683,3.220543],[-6.900821,8.659989,5.804909,-8.942820,-6.391571,-2.415741],[-2.873121,8.803915,1.648495,-0.355886,-2.266165,-1.059392],[5.822081,-7.340770,-5.841093,8.252826,-0.709632,0.309873],[5.479239,3.647544,0.126181,2.052973,-5.223573,8.328731],[1.485431,0.905194,-3.533180,-9.552252,-1.420949,-0.542588],[-8.496299,-5.297981,-0.292219,-4.499334,2.566380,-9.002440],[-8.558582,-2.194312,-4.480276,-8.822692,0.842649,-5.780297],[7.885462,2.618634,9.075319,-8.215863,-6.508877,0.590640],[-0.437614,-2.973756,1.762738,0.297812,-0.006141,-7.964815],[3.539047,-6.574646,-8.797176,-1.196487,1.173163,-3.622529],[-4.114978,-5.937404,1.521604,7.871014,-6.694547,4.120771],[-1.623779,8.028857,0.369141,-6.576724,-0.424104,1.593396],[7.416722,-4.943023,-4.860784,1.342516,-6.524171,3.454895],[3.074004,2.223271,-7.298843,8.055795,2.573139,1.294143],[2.608791,1.200491,-8.225844,-0.030841,8.900679,-6.489689],[3.868539,-4.308399,3.902679,3.644846,-8.979453,-0.819461],[-4.873637,-7.168363,-5.366917,-9.302629,4.158608,7.816196],[-7.450844,0.673799,5.922219,2.921375,7.674897,-5.964145],[4.845571,-8.454934,-4.597938,-6.571264,-2.457948,2.871723],[-3.916644,-0.919255,5.328481,4.279357,-3.539780,7.584593],[-9.780110,-9.326491,-3.098328,1.677354,7.112521,-5.769805],[-7.490052,-7.713651,5.521559,-2.136312,6.324774,2.267622],[-0.574906,-4.830675,1.806685,-8.208092,5.643638,3.388980],[7.509050,2.760627,-7.023715,9.881484,5.441784,-9.148191],[2.472330,-3.635645,3.916149,6.772809,9.934452,-9.008503],[-5.080656,-6.127070,-9.399762,3.938312,-5.724127,-1.584670],[-7.628422,-9.040190,4.921662,-5.736892,1.913582,1.113700],[-9.521193,-4.555735,-8.406469,-6.041014,-1.006073,-9.951997],[3.886042,-5.298396,8.341888,-9.757810,-1.137345,3.333409],[1.770796,-0.105834,-3.383260,-2.469178,3.283594,-3.497771],[7.316802,-6.524314,-9.552100,-1.282478,-6.834832,6.644800],[7.735343,-9.317333,-3.366485,3.617212,7.382427,-3.218436],[3.286803,0.641150,-3.475007,3.282020,-2.697031,7.217007],[-3.385673,-1.353504,-4.517667,-3.220401,-3.802019,-4.089758],[-0.733802,-4.286917,4.125895,-4.702676,9.080269,1.441175],[7.285759,-1.946151,-0.524744,-7.904178,7.599226,-2.346554],[6.764757,-7.122972,8.091458,-3.725177,-7.742324,7.201000],[-7.794237,0.295906,9.542697,5.962942,8.229473,1.575088],[6.293199,-8.986169,-2.710587,-6.751229,-3.857163,6.032023],[4.666351,5.987533,6.706040,-8.576957,-6.445627,8.612918],[-1.329825,6.715001,-0.637475,-7.254140,-1.852518,6.398583],[8.003545,-4.459032,-6.092160,7.807920,-5.321689,0.195606],[5.789549,2.074562,0.973661,-5.431247,6.573433,0.274660],[-7.120708,1.791965,2.398312,3.593509,-0.607753,-5.947826],[-5.376553,8.491573,-5.719683,-9.935714,-2.431351,-7.034859],[-6.055275,7.133207,-0.148439,-0.184446,-7.307262,3.988800],[-7.147521,-2.529374,7.070960,3.354460,-2.404440,-0.858930],[1.137682,2.370006,-0.003827,-5.904015,-0.107982,-6.615963],[-8.896900,9.961128,-4.573090,-8.596318,4.711852,1.851945],[2.549293,-3.465593,0.341319,5.690455,3.632319,-5.990011],[-4.572670,0.288905,3.100564,1.029631,-7.576691,-3.482855],[8.579993,0.608033,-1.413575,1.357357,7.094722,0.728486],[-6.945411,0.223301,6.601086,4.660306,-4.787668,-8.092733],[-4.018689,-6.605076,-7.968918,7.919000,4.743342,2.087988],[-9.487974,-5.097482,-5.159275,-9.380957,-1.103890,8.584999],[-2.977452,3.901614,8.338688,-2.553607,8.913837,-1.183845],[3.300771,7.036842,-6.659852,-1.342573,-6.496355,-6.251827],[5.864850,3.418852,-6.650986,6.792510,-2.879147,-7.539381],[6.822798,1.523730,0.777830,-6.988825,-0.084638,6.491812],[-3.863033,8.262497,-1.666393,-8.858208,-6.237934,9.772575],[-1.093312,1.766414,7.837055,-1.295730,-2.518891,3.729501],[4.536338,4.508110,-0.828335,-4.260420,-7.951901,5.065687],[3.594980,-8.537230,2.970233,-1.888240,5.932910,-2.354102],[4.345140,6.940797,4.380623,4.300852,-7.152625,-6.792701],[-2.216217,-8.731035,-5.037181,4.058995,3.277434,7.271920],[-8.471843,-1.514679,-7.804583,-1.667725,4.859924,1.353319],[8.197704,1.543703,8.952951,-6.025772,-6.191282,7.650535],[-1.325260,-4.879842,-8.299232,-4.696266,2.684686,-7.019398],[-5.500964,-5.852832,-1.556319,-4.525031,-2.612235,-8.328932],[0.553516,5.840449,2.056135,-5.609952,-1.843657,6.679287],[-5.018895,3.924967,-1.110573,1.947452,-4.733685,-3.726108],[-0.728474,-7.608519,-1.097621,-2.232978,3.264616,1.093901],[-0.029009,-6.845734,-2.201728,-5.808532,-4.739495,-9.391610],[0.690164,3.143514,0.588126,7.269445,-4.795149,7.260024],[-9.390140,-4.250176,3.812943,-0.768426,7.946083,-0.835669],[-9.406288,-1.641949,-9.467202,7.582937,1.870641,-5.574129]], dtype = "float64")#candidate|5189|(154, 6)|const|float64
call_5188 = relay.TupleGetItem(func_3254_call(relay.reshape(const_5189.astype('float64'), [11, 6, 14])), 0)
call_5190 = relay.TupleGetItem(func_3257_call(relay.reshape(const_5189.astype('float64'), [11, 6, 14])), 0)
output = relay.Tuple([call_5178,call_5180,const_5181,call_5188,const_5189,])
output2 = relay.Tuple([call_5179,call_5182,const_5181,call_5190,const_5189,])
func_5191 = relay.Function([], output)
mod['func_5191'] = func_5191
mod = relay.transform.InferType()(mod)
output = func_5191()
func_5192 = relay.Function([], output)
mutated_mod['func_5192'] = func_5192
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4286_call = mod.get_global_var('func_4286')
func_4287_call = mutated_mod.get_global_var('func_4287')
call_5213 = relay.TupleGetItem(func_4286_call(), 0)
call_5214 = relay.TupleGetItem(func_4287_call(), 0)
var_5219 = relay.var("var_5219", dtype = "float64", shape = (7, 11, 6))#candidate|5219|(7, 11, 6)|var|float64
bop_5220 = relay.subtract(call_5213.astype('int64'), relay.reshape(var_5219.astype('int64'), relay.shape_of(call_5213))) # shape=(7, 11, 6)
bop_5223 = relay.subtract(call_5214.astype('int64'), relay.reshape(var_5219.astype('int64'), relay.shape_of(call_5214))) # shape=(7, 11, 6)
func_4263_call = mod.get_global_var('func_4263')
func_4264_call = mutated_mod.get_global_var('func_4264')
call_5234 = func_4263_call()
call_5235 = func_4263_call()
output = relay.Tuple([bop_5220,call_5234,])
output2 = relay.Tuple([bop_5223,call_5235,])
func_5237 = relay.Function([var_5219,], output)
mod['func_5237'] = func_5237
mod = relay.transform.InferType()(mod)
var_5238 = relay.var("var_5238", dtype = "float64", shape = (7, 11, 6))#candidate|5238|(7, 11, 6)|var|float64
output = func_5237(var_5238)
func_5239 = relay.Function([var_5238], output)
mutated_mod['func_5239'] = func_5239
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5264 = relay.var("var_5264", dtype = "float32", shape = (4, 1, 16))#candidate|5264|(4, 1, 16)|var|float32
uop_5265 = relay.acosh(var_5264.astype('float32')) # shape=(4, 1, 16)
func_828_call = mod.get_global_var('func_828')
func_831_call = mutated_mod.get_global_var('func_831')
const_5287 = relay.const([2,8,9,2,5,8,-5,10,9,3,5,5,3,7,2,-1,7,-8,-9,4,-6,2,5,5,7,-5,10,-6,-5,2,10,-2,5], dtype = "uint8")#candidate|5287|(33,)|const|uint8
const_5288 = relay.const([2,-8,4,-10,-3,2,3,-2,9,-5,-8,10,10,-7,3,9,-1,-6,8,-3,2,-8], dtype = "int16")#candidate|5288|(22,)|const|int16
call_5286 = relay.TupleGetItem(func_828_call(relay.reshape(const_5287.astype('uint8'), [3, 11, 1]), relay.reshape(const_5288.astype('int16'), [22,]), ), 2)
call_5289 = relay.TupleGetItem(func_831_call(relay.reshape(const_5287.astype('uint8'), [3, 11, 1]), relay.reshape(const_5288.astype('int16'), [22,]), ), 2)
func_3554_call = mod.get_global_var('func_3554')
func_3557_call = mutated_mod.get_global_var('func_3557')
call_5291 = relay.TupleGetItem(func_3554_call(relay.reshape(call_5286.astype('int16'), [22,])), 0)
call_5292 = relay.TupleGetItem(func_3557_call(relay.reshape(call_5286.astype('int16'), [22,])), 0)
output = relay.Tuple([uop_5265,call_5286,const_5287,const_5288,call_5291,])
output2 = relay.Tuple([uop_5265,call_5289,const_5287,const_5288,call_5292,])
func_5295 = relay.Function([var_5264,], output)
mod['func_5295'] = func_5295
mod = relay.transform.InferType()(mod)
mutated_mod['func_5295'] = func_5295
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5296 = relay.var("var_5296", dtype = "float32", shape = (4, 1, 16))#candidate|5296|(4, 1, 16)|var|float32
func_5295_call = mutated_mod.get_global_var('func_5295')
call_5297 = func_5295_call(var_5296)
output = call_5297
func_5298 = relay.Function([var_5296], output)
mutated_mod['func_5298'] = func_5298
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3524_call = mod.get_global_var('func_3524')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_5327 = relay.TupleGetItem(func_3524_call(), 0)
call_5328 = relay.TupleGetItem(func_3526_call(), 0)
func_5191_call = mod.get_global_var('func_5191')
func_5192_call = mutated_mod.get_global_var('func_5192')
call_5354 = relay.TupleGetItem(func_5191_call(), 3)
call_5355 = relay.TupleGetItem(func_5192_call(), 3)
func_4286_call = mod.get_global_var('func_4286')
func_4287_call = mutated_mod.get_global_var('func_4287')
call_5367 = relay.TupleGetItem(func_4286_call(), 0)
call_5368 = relay.TupleGetItem(func_4287_call(), 0)
output = relay.Tuple([call_5327,call_5354,call_5367,])
output2 = relay.Tuple([call_5328,call_5355,call_5368,])
func_5370 = relay.Function([], output)
mod['func_5370'] = func_5370
mod = relay.transform.InferType()(mod)
mutated_mod['func_5370'] = func_5370
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5370_call = mutated_mod.get_global_var('func_5370')
call_5371 = func_5370_call()
output = call_5371
func_5372 = relay.Function([], output)
mutated_mod['func_5372'] = func_5372
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5447 = relay.var("var_5447", dtype = "float32", shape = (13, 11, 7))#candidate|5447|(13, 11, 7)|var|float32
uop_5448 = relay.atan(var_5447.astype('float32')) # shape=(13, 11, 7)
output = uop_5448
output2 = uop_5448
func_5458 = relay.Function([var_5447,], output)
mod['func_5458'] = func_5458
mod = relay.transform.InferType()(mod)
var_5459 = relay.var("var_5459", dtype = "float32", shape = (13, 11, 7))#candidate|5459|(13, 11, 7)|var|float32
output = func_5458(var_5459)
func_5460 = relay.Function([var_5459], output)
mutated_mod['func_5460'] = func_5460
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5050_call = mod.get_global_var('func_5050')
func_5052_call = mutated_mod.get_global_var('func_5052')
call_5473 = func_5050_call()
call_5474 = func_5050_call()
output = call_5473
output2 = call_5474
func_5485 = relay.Function([], output)
mod['func_5485'] = func_5485
mod = relay.transform.InferType()(mod)
mutated_mod['func_5485'] = func_5485
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5485_call = mutated_mod.get_global_var('func_5485')
call_5486 = func_5485_call()
output = call_5486
func_5487 = relay.Function([], output)
mutated_mod['func_5487'] = func_5487
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3824_call = mod.get_global_var('func_3824')
func_3826_call = mutated_mod.get_global_var('func_3826')
call_5490 = relay.TupleGetItem(func_3824_call(), 0)
call_5491 = relay.TupleGetItem(func_3826_call(), 0)
func_2741_call = mod.get_global_var('func_2741')
func_2744_call = mutated_mod.get_global_var('func_2744')
var_5493 = relay.var("var_5493", dtype = "float32", shape = (81,))#candidate|5493|(81,)|var|float32
call_5492 = func_2741_call(relay.reshape(var_5493.astype('float32'), [9, 9, 1]))
call_5494 = func_2741_call(relay.reshape(var_5493.astype('float32'), [9, 9, 1]))
func_4286_call = mod.get_global_var('func_4286')
func_4287_call = mutated_mod.get_global_var('func_4287')
call_5497 = relay.TupleGetItem(func_4286_call(), 0)
call_5498 = relay.TupleGetItem(func_4287_call(), 0)
bop_5509 = relay.power(call_5497.astype('float64'), relay.reshape(call_5490.astype('float64'), relay.shape_of(call_5497))) # shape=(7, 11, 6)
bop_5512 = relay.power(call_5498.astype('float64'), relay.reshape(call_5491.astype('float64'), relay.shape_of(call_5498))) # shape=(7, 11, 6)
func_4114_call = mod.get_global_var('func_4114')
func_4117_call = mutated_mod.get_global_var('func_4117')
var_5518 = relay.var("var_5518", dtype = "float64", shape = (3, 420))#candidate|5518|(3, 420)|var|float64
const_5519 = relay.const([-3.818989,-9.733951,-6.851399,7.743002,-5.168103,-0.622637,4.787501,-1.116585,1.426366,5.057101,-9.065728,0.048072,1.840501,-6.665168,0.781682,-2.323950,1.653997,-4.767616,2.058298,-2.236955,-9.551068,-7.449757,-5.287673,0.911392,8.622569,-0.531857,-6.232923,-1.184346,-4.593905,4.884062,3.375667,6.731537,-5.990256,-2.798059,2.218237,-8.830405,7.095036,-7.827297,9.479043,-5.884925,-5.058932,-6.826626,-4.400057,-5.036119,5.664698,9.039186,-0.500526,1.930288,-5.318258,-3.177736,-5.804696,-0.797413,-8.183304,0.274527,-2.286205,-7.531613,6.291180,7.214760,8.930452,-3.349737,6.374382,7.417451,-0.535571,5.836054,-1.475513,7.405385,-4.874790,3.736454,-0.440922,-7.902677,-3.448416,1.994851,2.386252,8.335362,2.658903,-1.791539,3.559506,-0.094289,-1.600554,5.720578,8.048193,-7.835557,-0.448664,-5.629055], dtype = "float64")#candidate|5519|(84,)|const|float64
call_5517 = relay.TupleGetItem(func_4114_call(relay.reshape(var_5518.astype('float64'), [90, 14]), relay.reshape(const_5519.astype('float64'), [84,]), ), 0)
call_5520 = relay.TupleGetItem(func_4117_call(relay.reshape(var_5518.astype('float64'), [90, 14]), relay.reshape(const_5519.astype('float64'), [84,]), ), 0)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_5541 = func_4081_call()
call_5542 = func_4081_call()
uop_5550 = relay.acosh(call_5490.astype('float64')) # shape=(7, 11, 6)
uop_5552 = relay.acosh(call_5491.astype('float64')) # shape=(7, 11, 6)
func_5458_call = mod.get_global_var('func_5458')
func_5460_call = mutated_mod.get_global_var('func_5460')
const_5555 = relay.const([-3.734123,2.780917,6.590032,0.960027,-2.831885,-9.588726,-2.880446,6.532591,-2.133951,1.569287,-7.866007,-7.979537,6.525783,4.053822,0.338750,-8.199639,-6.327808,-0.480801,-8.512006,8.953972,-5.192792,-1.105558,8.632764,-3.936403,-3.573466,-1.482353,6.935027,-5.653027,-6.459960,-7.801954,6.865046,6.740871,-5.622022,2.497919,-1.607793,9.974211,-4.673504,3.975311,8.022619,4.282230,0.728269,5.095610,2.535890,-0.777160,3.186805,0.403429,3.648244,-4.879631,-6.059978,9.213522,5.138532,4.161004,-0.633230,1.677735,-1.559945,-1.686920,-2.601767,5.312765,9.339354,6.738614,-6.181191,5.169291,0.612104,2.801966,0.097223,-4.920926,2.900407,-6.857244,-7.913860,0.911723,0.543936,1.810496,6.360831,9.010216,-9.633367,3.669013,8.553271,-7.576376,9.248993,-2.322151,-8.538852,9.433526,-8.493564,-4.450132,1.439469,-9.397832,5.539290,-8.310646,-3.375973,8.092175,-0.399841,6.581218,-9.112221,-2.413310,3.530505,-3.734229,-2.805032,0.869276,-0.197380,4.488842,5.480254,-4.543664,6.195097,-6.875140,-7.182261,-1.120100,-6.949682,-6.291264,-8.620931,-4.526454,4.574695,0.759511,-3.737582,-2.826910,-6.676627,-0.390133,5.866102,-1.857824,6.645933,-9.901990,2.547636,-9.804268,-4.989493,-3.717317,-4.692130,-1.689226,2.178799,9.918159,-0.962058,-6.346465,0.016332,2.874883,4.601419,-0.543684,-4.234351,-8.464271,6.987594,1.792108,5.332020,-0.342601,0.644260,9.706811,4.348899,-9.467029,9.344321,-7.056013,-2.975414,5.202607,-9.858064,-2.148016,9.517480,-1.271018,-2.092037,-3.983722,3.682418,2.314557,-6.065172,6.328301,7.824565,3.056774,6.580211,0.422791,9.165239,7.776854,-2.831320,-9.008970,9.680337,2.803149,4.685532,5.664490,-9.484777,1.147922,-5.343104,-9.269252,-2.390557,-4.955706,-4.020422,2.695319,-0.973554,1.377430,9.268989,-3.737473,-7.756851,-1.624619,-3.446168,-2.197681,-8.440421,4.195494,-8.503015,-3.490261,9.633262,-3.787415,-8.297251,-7.895799,6.257441,-4.421519,8.576847,3.228208,-6.144153,7.581295,4.652132,1.430873,8.414575,-2.302574,0.989831,7.794766,7.876021,-0.096060,1.471295,8.309912,-3.635318,0.423290,-9.264610,5.920068,-1.472554,8.745065,-1.270508,6.635829,3.098099,0.773228,-7.981311,-6.587349,6.730831,-8.241961,0.190797,0.808516,6.292935,6.518904,0.312684,-4.122538,-4.427754,8.361089,-4.617339,-7.836586,8.675560,-3.172347,-0.988971,6.268051,9.283539,0.167045,5.361423,-1.479557,4.222012,3.475782,-7.364658,1.355765,3.659672,0.224323,3.543099,-6.660908,-5.469860,4.989787,2.447183,-4.532173,-0.249515,9.871128,-7.616596,-2.747670,2.712314,-7.866881,4.959069,-4.961578,-4.863001,-3.957072,-6.923457,-2.806780,-7.215265,8.042079,7.753444,-4.595451,0.431286,6.172399,-0.153294,-5.765366,9.692595,6.509144,-6.022896,-4.604655,-6.028261,-9.057368,2.469317,1.503416,-7.248422,4.569402,-3.060790,4.837711,5.546851,4.224102,-8.546220,9.917082,-2.398986,-7.209904,8.945224,7.178751,-7.431335,-1.037656,1.266934,5.587810,-5.979110,9.812468,-3.152995,3.254445,3.218474,5.662330,-5.158424,-7.702530,-9.057020,9.631507,6.731653,2.317169,-6.564348,9.232842,2.752335,-2.724665,7.550731,-7.124455,-7.269437,8.803405,-3.661215,-6.314044,0.411165,7.425048,9.468044,3.381343,9.126283,-6.382870,-0.307035,3.964872,-3.996291,-2.818412,4.865030,-7.592865,-6.632033,-1.645867,-6.368803,4.975040,6.847199,1.746757,3.879039,8.588785,5.964861,-1.112128,7.136874,3.900990,1.132909,1.623523,-4.146718,6.427347,4.825443,3.021537,-9.732645,2.463267,1.929253,-7.321820,-2.852481,-6.377077,-1.336666,3.456816,-5.396688,6.285058,-8.023594,3.280566,-6.095979,3.295097,-4.830366,-2.863767,6.005748,-8.125016,-1.097659,6.667628,-5.141858,5.196283,8.274324,-0.017537,8.082925,4.970769,-3.927282,2.961266,4.059530,-5.832496,3.192936,-2.364710,-6.809983,-2.808898,-7.194569,1.736826,4.582096,8.573869,-1.843208,-7.283913,0.883296,5.087908,-2.435316,5.383863,-6.784298,4.162928,-2.796540,-7.882946,-5.311858,1.043996,6.353826,9.232907,2.348133,8.293136,-4.497889,-5.471859,5.422973,4.162156,-8.680112,-4.162336,-3.763787,-4.815324,1.412970,-5.618734,9.171959,-2.207503,-1.410517,5.700954,-9.643164,8.640987,8.538636,6.419171,-2.348994,-0.615836,2.663561,6.142576,4.736423,-5.193824,-2.833092,-1.476364,-0.329154,-9.670846,6.826813,1.186771,-4.640135,-7.940148,-5.185798,5.562063,4.158421,3.520822,-9.711069,-2.838820,-3.582758,-6.000577,7.644084,8.906314,-9.898774,7.105791,4.504231,5.452894,0.946894,0.949078,4.442109,-1.107673,4.948361,8.287878,-3.847417,6.575747,-0.418940,-6.260082,-4.505476,-7.236973,5.326014,-4.691814,-5.852131,4.922105,-5.746164,2.975104,0.393787,-4.018346,1.305719,-3.609543,0.891172,-3.151508,5.629169,-2.299488,-1.989223,-9.992188,-0.161650,3.190668,9.581885,-0.236767,3.095871,2.201860,-3.786740,6.576832,-1.326542,8.283014,6.035841,6.660817,-7.659407,9.047696,-4.316625,1.863729,-3.158808,7.934586,8.450267,9.922791,8.072495,9.713465,-8.392686,3.351321,-6.270564,3.104635,1.345324,-3.931263,-7.426682,-1.898295,-9.552065,8.804249,-5.307795,-2.632155,-0.660360,6.385477,-6.874816,3.152250,5.303364,4.371654,-1.235741,-4.243951,-7.881563,5.510107,-7.740413,7.998825,1.176394,4.234456,-8.174763,5.550513,-0.477251,-9.611443,7.699523,1.343858,7.305903,-6.187351,9.434686,1.214380,-0.329785,-4.533914,-8.996693,3.907978,-2.923716,-8.769049,-2.315182,-9.216200,-1.377459,8.351149,-7.789243,-3.313634,-8.408013,4.432561,1.856738,9.584490,-5.417092,-2.524206,4.237220,-3.723001,2.239776,-7.632675,8.061701,-7.739307,-0.706365,4.516478,-7.646361,-3.739778,8.425330,6.961633,-6.515749,-1.719452,-3.493399,1.585404,-3.118998,-9.526211,-1.299469,5.912503,9.362048,0.856491,0.375931,-7.088953,3.677184,-0.322164,3.109654,9.186557,-6.682875,-2.563678,4.609883,1.326993,5.890552,8.947706,-6.816924,0.236247,-1.591734,8.179378,-8.110255,0.070182,-2.139437,-3.378134,5.900615,9.222059,0.515033,4.427018,-3.485599,-8.277177,-4.828094,1.310049,-7.648330,-8.067057,-1.968284,-9.102679,9.473802,-5.023538,-2.021216,6.181617,-8.672362,3.374239,-1.695958,-5.717466,2.758377,4.438064,-9.787985,9.111194,2.299669,2.605362,0.997658,-0.371527,-5.628956,5.231264,3.119295,-8.806621,2.465085,6.059994,-3.630250,-3.580939,-4.678325,2.281479,2.084589,3.454105,-6.570116,-7.195785,4.266823,4.615715,2.343317,-1.040009,6.126260,-2.158952,-2.298707,2.234479,-0.071645,1.609302,9.696544,7.374637,4.652279,6.708237,-6.278272,6.631948,8.960679,8.201204,7.268748,3.173536,-3.982378,-1.148919,-3.370323,-7.208440,5.403467,2.687938,-9.707671,0.380730,-4.026924,-8.519243,-2.256864,-4.800311,-1.966122,-1.778597,1.247533,-8.291327,-1.183842,-4.200137,-0.282493,1.279365,-7.118924,-4.211628,2.827674,-2.796835,2.115459,-0.837968,5.821365,9.723585,-3.191801,7.622294,9.882049,-3.322212,-7.362479,-9.812005,8.645163,2.742912,3.649289,-9.429530,9.347925,-8.485785,9.339606,7.927193,7.159337,-2.229857,-0.747454,6.504779,-2.979970,6.077550,-6.725328,6.048534,0.305427,-1.131502,1.957178,-0.883763,8.807813,4.255295,0.375873,3.012155,3.376775,4.935654,-7.631866,8.461370,-4.522300,5.637490,3.535396,-0.812010,7.411344,0.044743,4.909372,-9.938507,-5.460349,-5.710708,-2.053226,-7.580433,3.810974,4.497883,-9.307796,-3.073954,-2.332782,8.486642,7.606683,-2.429133,-3.337665,3.635171,0.906575,1.257526,5.029753,-3.111833,5.368400,1.147945,-5.129817,-2.038090,2.342680,1.306832,6.614849,1.763611,-0.708876,3.879863,5.836055,-8.846962,-2.251927,-8.182521,5.286166,7.016285,2.437748,-6.652165,-4.206051,-4.457385,6.502766,8.513844,7.128599,8.041730,-5.372364,-1.402819,3.678074,0.056124,-9.151698,3.599621,-4.228513,9.691291,8.073131,2.802479,-8.585334,-5.103162,2.074941,-6.716012,-1.928417,-2.714231,9.236609,7.678723,8.266720,-2.445562,-1.672858,-3.383890,6.809254,5.939109,1.163392,-9.743337,-1.979070,6.921192,-7.535187,-9.487935,-3.690312,4.493045,-6.988074,-9.424248,5.590428,9.129496,9.851735,-5.628326,1.602918,1.385547,-3.395490,6.869435,-8.854835,-5.378268,-2.417932,-2.883722,4.978553,-9.742361,-5.285970,-5.406607,-3.697640,6.239110,2.610262,-1.596471,8.604925,6.085347,8.902352,8.698470,3.117163,-8.718341,-3.592889,-9.514184,-9.875395,1.663076,-5.675303,6.454312,-4.300535,-9.206162,-9.351986,-0.535477,-9.894697,-0.746704,-2.580765,-6.874917,0.529101,-6.939218,7.443582,-1.905653,1.874217,-1.192191,2.542857,-3.901181,-6.536364,8.352122,0.087915,3.591468,9.122217,3.514145,5.260352,5.493321,-0.902447,-3.011206,3.792202,-3.738381,0.933382,-0.482021,-2.892773,-6.749246,9.565695,0.023182,0.517149,-9.913953,-4.326245,0.842000,8.223529,9.534462,-9.077806,2.312273,-7.876549,-3.890721,-4.830011,-6.335392,-5.472138,-5.596860,-4.126772,-6.119963,-9.633743,-5.714871,3.272601,-6.541855,-8.285449,-8.725163,8.386779,-4.463156,1.491616,2.774163,2.928965,-9.886903,-2.437066,2.642154,1.107019,9.933399,6.738779,-4.127887,4.399195,4.224149,-4.724386,-1.092362,-6.978177,2.582153,2.450215,2.193846,-2.301780,-2.585896,-0.233725,6.094810,-6.259860,3.274533,-4.845226,-8.876681,-5.982079,-0.760830,6.086536,5.517473,2.154207,-8.291727,0.411329,-2.748524,7.626841,4.771005,-1.862041,8.662631,3.381739,-1.379329,4.341981,2.931832,5.363401,-4.553217,-7.196132,-7.098535,8.048237,-4.023812,-7.514066,-5.296478,-5.332650,-3.937425,8.804417,2.213947,-8.789427,-9.341408,-8.368388,-8.652960,2.581203,-5.992637,-9.107057,-3.996073,3.761373,-1.325741,1.428794,-1.989310,-1.233481,-6.551512,-5.083230,-8.025877,-5.253700,-6.162904,-5.860989,-7.080796,-2.263468,0.566778,1.485689,-2.152195,6.357216,-8.492244,7.303095,-2.286806,8.292989,3.578527,-5.549962,6.714807,3.284010,3.251442,-1.434553,7.884648,-3.646655,3.408034,-7.768028,5.866860,-7.157627,-5.977064,-7.535962,-6.993862,-8.041993,1.445448,3.654103,0.756840,4.879728,3.066257,-6.057242,-2.240857,0.759802], dtype = "float32")#candidate|5555|(1001,)|const|float32
call_5554 = func_5458_call(relay.reshape(const_5555.astype('float32'), [13, 11, 7]))
call_5556 = func_5458_call(relay.reshape(const_5555.astype('float32'), [13, 11, 7]))
output = relay.Tuple([call_5492,var_5493,bop_5509,call_5517,var_5518,const_5519,call_5541,uop_5550,call_5554,const_5555,])
output2 = relay.Tuple([call_5494,var_5493,bop_5512,call_5520,var_5518,const_5519,call_5542,uop_5552,call_5556,const_5555,])
func_5567 = relay.Function([var_5493,var_5518,], output)
mod['func_5567'] = func_5567
mod = relay.transform.InferType()(mod)
var_5568 = relay.var("var_5568", dtype = "float32", shape = (81,))#candidate|5568|(81,)|var|float32
var_5569 = relay.var("var_5569", dtype = "float64", shape = (3, 420))#candidate|5569|(3, 420)|var|float64
output = func_5567(var_5568,var_5569,)
func_5570 = relay.Function([var_5568,var_5569,], output)
mutated_mod['func_5570'] = func_5570
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_5662 = func_4081_call()
call_5663 = func_4081_call()
output = call_5662
output2 = call_5663
func_5677 = relay.Function([], output)
mod['func_5677'] = func_5677
mod = relay.transform.InferType()(mod)
output = func_5677()
func_5678 = relay.Function([], output)
mutated_mod['func_5678'] = func_5678
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4263_call = mod.get_global_var('func_4263')
func_4264_call = mutated_mod.get_global_var('func_4264')
call_5695 = func_4263_call()
call_5696 = func_4263_call()
func_5136_call = mod.get_global_var('func_5136')
func_5137_call = mutated_mod.get_global_var('func_5137')
call_5697 = func_5136_call()
call_5698 = func_5136_call()
bop_5709 = relay.logical_or(call_5697.astype('bool'), relay.reshape(call_5695.astype('bool'), relay.shape_of(call_5697))) # shape=(7, 11, 6)
bop_5712 = relay.logical_or(call_5698.astype('bool'), relay.reshape(call_5696.astype('bool'), relay.shape_of(call_5698))) # shape=(7, 11, 6)
output = relay.Tuple([bop_5709,])
output2 = relay.Tuple([bop_5712,])
func_5716 = relay.Function([], output)
mod['func_5716'] = func_5716
mod = relay.transform.InferType()(mod)
mutated_mod['func_5716'] = func_5716
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5716_call = mutated_mod.get_global_var('func_5716')
call_5717 = func_5716_call()
output = call_5717
func_5718 = relay.Function([], output)
mutated_mod['func_5718'] = func_5718
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3706_call = mod.get_global_var('func_3706')
func_3708_call = mutated_mod.get_global_var('func_3708')
call_5721 = relay.TupleGetItem(func_3706_call(), 0)
call_5722 = relay.TupleGetItem(func_3708_call(), 0)
var_5724 = relay.var("var_5724", dtype = "float32", shape = (7, 11, 6))#candidate|5724|(7, 11, 6)|var|float32
bop_5725 = relay.floor_mod(call_5721.astype('float32'), relay.reshape(var_5724.astype('float32'), relay.shape_of(call_5721))) # shape=(7, 11, 6)
bop_5728 = relay.floor_mod(call_5722.astype('float32'), relay.reshape(var_5724.astype('float32'), relay.shape_of(call_5722))) # shape=(7, 11, 6)
output = bop_5725
output2 = bop_5728
func_5745 = relay.Function([var_5724,], output)
mod['func_5745'] = func_5745
mod = relay.transform.InferType()(mod)
var_5746 = relay.var("var_5746", dtype = "float32", shape = (7, 11, 6))#candidate|5746|(7, 11, 6)|var|float32
output = func_5745(var_5746)
func_5747 = relay.Function([var_5746], output)
mutated_mod['func_5747'] = func_5747
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4286_call = mod.get_global_var('func_4286')
func_4287_call = mutated_mod.get_global_var('func_4287')
call_5829 = relay.TupleGetItem(func_4286_call(), 0)
call_5830 = relay.TupleGetItem(func_4287_call(), 0)
func_4157_call = mod.get_global_var('func_4157')
func_4159_call = mutated_mod.get_global_var('func_4159')
call_5845 = relay.TupleGetItem(func_4157_call(relay.reshape(call_5829.astype('float32'), [7, 11, 6])), 0)
call_5846 = relay.TupleGetItem(func_4159_call(relay.reshape(call_5829.astype('float32'), [7, 11, 6])), 0)
func_4848_call = mod.get_global_var('func_4848')
func_4850_call = mutated_mod.get_global_var('func_4850')
call_5850 = relay.TupleGetItem(func_4848_call(), 0)
call_5851 = relay.TupleGetItem(func_4850_call(), 0)
output = relay.Tuple([call_5829,call_5845,call_5850,])
output2 = relay.Tuple([call_5830,call_5846,call_5851,])
func_5854 = relay.Function([], output)
mod['func_5854'] = func_5854
mod = relay.transform.InferType()(mod)
mutated_mod['func_5854'] = func_5854
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5854_call = mutated_mod.get_global_var('func_5854')
call_5855 = func_5854_call()
output = call_5855
func_5856 = relay.Function([], output)
mutated_mod['func_5856'] = func_5856
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4263_call = mod.get_global_var('func_4263')
func_4264_call = mutated_mod.get_global_var('func_4264')
call_5889 = func_4263_call()
call_5890 = func_4263_call()
func_3824_call = mod.get_global_var('func_3824')
func_3826_call = mutated_mod.get_global_var('func_3826')
call_5891 = relay.TupleGetItem(func_3824_call(), 0)
call_5892 = relay.TupleGetItem(func_3826_call(), 0)
output = relay.Tuple([call_5889,call_5891,])
output2 = relay.Tuple([call_5890,call_5892,])
func_5899 = relay.Function([], output)
mod['func_5899'] = func_5899
mod = relay.transform.InferType()(mod)
mutated_mod['func_5899'] = func_5899
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5899_call = mutated_mod.get_global_var('func_5899')
call_5900 = func_5899_call()
output = call_5900
func_5901 = relay.Function([], output)
mutated_mod['func_5901'] = func_5901
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5911 = relay.var("var_5911", dtype = "int8", shape = (6, 8, 9))#candidate|5911|(6, 8, 9)|var|int8
var_5912 = relay.var("var_5912", dtype = "int8", shape = (6, 8, 9))#candidate|5912|(6, 8, 9)|var|int8
bop_5913 = relay.less_equal(var_5911.astype('bool'), relay.reshape(var_5912.astype('bool'), relay.shape_of(var_5911))) # shape=(6, 8, 9)
func_3732_call = mod.get_global_var('func_3732')
func_3734_call = mutated_mod.get_global_var('func_3734')
call_5920 = relay.TupleGetItem(func_3732_call(), 0)
call_5921 = relay.TupleGetItem(func_3734_call(), 0)
output = relay.Tuple([bop_5913,call_5920,])
output2 = relay.Tuple([bop_5913,call_5921,])
func_5923 = relay.Function([var_5911,var_5912,], output)
mod['func_5923'] = func_5923
mod = relay.transform.InferType()(mod)
var_5924 = relay.var("var_5924", dtype = "int8", shape = (6, 8, 9))#candidate|5924|(6, 8, 9)|var|int8
var_5925 = relay.var("var_5925", dtype = "int8", shape = (6, 8, 9))#candidate|5925|(6, 8, 9)|var|int8
output = func_5923(var_5924,var_5925,)
func_5926 = relay.Function([var_5924,var_5925,], output)
mutated_mod['func_5926'] = func_5926
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_6000 = func_4081_call()
call_6001 = func_4081_call()
func_4915_call = mod.get_global_var('func_4915')
func_4918_call = mutated_mod.get_global_var('func_4918')
var_6006 = relay.var("var_6006", dtype = "int16", shape = (2, 384))#candidate|6006|(2, 384)|var|int16
call_6005 = relay.TupleGetItem(func_4915_call(relay.reshape(var_6006.astype('int16'), [768,])), 1)
call_6007 = relay.TupleGetItem(func_4918_call(relay.reshape(var_6006.astype('int16'), [768,])), 1)
func_4826_call = mod.get_global_var('func_4826')
func_4828_call = mutated_mod.get_global_var('func_4828')
call_6031 = relay.TupleGetItem(func_4826_call(), 0)
call_6032 = relay.TupleGetItem(func_4828_call(), 0)
const_6072 = relay.const([[-3,2,-3,-8,6,-8,-10,-8,-5,-9,4,-10,-8,8,-7,7,1,-8,10,9,5,9,-10,-10,-6,5,-8,1,-9,3,-5,-8,10,1,3,-8,-7,-6,3,-3,8,1,2,-1,10,-9,-6,3,2,-8,6,-5,-2,-10,-8,6,-1,-3,10,4,-10,6,9,-2,3,-7,-7,-2,3,3,-2,-9,-7,-6,6,6,-2,-2,2,-3,5,4,10,10,-7,-7,2,-2,8,-4,9,-2,4,1,7,3,-3,5,-4,-9,6,9,-3,6,10,-8,2,9,4,-6,-5,-7,7,-4,-5,-1,8,-8,3,-4,6,2,-2,7,-1,8,-1,6,7,8,-2,2,3,3,-5,-10,7,-2,3,6,2,1,1,1,5,9,-2,-7,2,-10,-7,10,4,-4,3,2,5,7,1,3,9,5,-2,6,-4,-1,-9,-2,4,10,5,-3,5,6,9,-4,-3,10,1,1,2,-4,-4,-4,4,8,-3,-10,2,-6,7,-9,-7,8,-7,-3,1,-10,6,7,-7,1,-5,-10,-9,8,-4,-8,10,-1,5,5,-3,-4,10,-1,6,9,-3,10,5,9,9,-2,-3,5,7,7,7,-9,3,-4,-1,4,-1,-5,-4,-8,2,-3,3,5,8,-7,3,9,-5,-7,-5,-10,5,5,-2,4,2,-8,-5,-4,5,5,-9,-6,-9,-3,-5,-3,10,10,2,3,3,-9,-4,-9,-6,1,-9,2,-1,2,-7,6,4,9,-2,-10,-4,1,-3,1,5,9,-8,-3,5,4,-2,-1,-6,2,1,-3,10,6,-8,-5,8,8,4,-6,-9,-2,3,-7,2,-7,1,1,-7,7,6,8,-7,-2,10,-1,-2,-1,-6,2,-10,-4,-2,-4,-2,4,-6,-1,-1,-5,3,-3,1,-10,4,9,-2,7,-8,4,-6,7,3,5,3,6,-8,-2,4,-9,3,-4,-1,-10,-4,8,-3,1,2,-9,-6,2,-5,-2,-4,7,9,4,-4,8,7,7,-10,3],[4,7,-8,-3,-3,1,-6,-7,-10,4,5,2,-7,-1,9,8,-7,-3,-6,-7,-1,-8,-7,-3,-6,-10,10,-3,3,3,2,-5,-8,6,-5,3,-9,5,6,2,-9,-2,-6,-6,-1,-3,10,-3,-6,-10,-2,-7,6,7,-3,7,-3,9,-6,-10,-3,1,1,-2,3,-6,-9,-5,8,-8,-3,1,5,-9,6,-7,2,-4,2,-10,10,-9,2,3,-8,-8,-7,8,10,1,5,-9,-8,2,9,-8,-9,-7,10,8,2,-8,-5,-10,-2,-5,1,-5,-6,-2,10,-5,6,7,-3,-4,3,3,8,4,-6,-6,2,-7,-10,-3,-10,9,-10,2,5,10,7,7,9,-5,10,-2,-5,-1,2,7,-10,-8,7,6,5,10,-1,9,-8,-5,-6,-3,7,-7,-5,9,-5,8,6,-3,-1,-4,10,2,-10,8,-1,-8,-4,7,1,5,-4,7,-8,-2,-5,-9,2,5,-6,7,-4,8,-1,-9,3,-10,8,9,-10,-3,7,-2,-5,2,-9,-3,-5,-3,7,3,-6,9,2,10,-8,9,-6,6,-7,5,7,-1,10,-1,7,-7,6,-7,-3,-2,-1,-10,-1,10,-7,4,-4,8,-10,-1,2,-10,-3,9,-5,8,-4,-4,-7,5,-1,7,5,-1,4,-9,-7,7,7,7,8,7,6,-9,6,-6,-2,-4,8,-3,5,-3,3,2,7,-10,-5,-7,10,3,-9,-5,-1,9,4,4,-3,2,8,-6,5,7,4,-2,-1,10,-5,-10,-4,6,2,7,-8,1,-7,10,-4,-6,3,3,-5,4,10,6,5,-3,-5,-2,1,10,10,-2,7,3,7,5,-2,2,3,7,-2,-4,-1,10,10,2,10,-6,-1,10,-6,-10,4,-10,3,-6,8,-2,6,4,3,-8,9,1,-3,-10,6,7,3,10,7,-1,-7,5,-6,-1,-5,2,-3,6,4,4,5,3,-1,5,8,-2,-8,8,5,3,-10,-4,7,-8,-5,4,-8,-9]], dtype = "int16")#candidate|6072|(2, 384)|const|int16
bop_6073 = relay.greater(var_6006.astype('bool'), relay.reshape(const_6072.astype('bool'), relay.shape_of(var_6006))) # shape=(2, 384)
output = relay.Tuple([call_6000,call_6005,call_6031,bop_6073,])
output2 = relay.Tuple([call_6001,call_6007,call_6032,bop_6073,])
func_6105 = relay.Function([var_6006,], output)
mod['func_6105'] = func_6105
mod = relay.transform.InferType()(mod)
var_6106 = relay.var("var_6106", dtype = "int16", shape = (2, 384))#candidate|6106|(2, 384)|var|int16
output = func_6105(var_6106)
func_6107 = relay.Function([var_6106], output)
mutated_mod['func_6107'] = func_6107
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3581_call = mod.get_global_var('func_3581')
func_3583_call = mutated_mod.get_global_var('func_3583')
call_6133 = func_3581_call()
call_6134 = func_3581_call()
uop_6136 = relay.sin(call_6133.astype('float32')) # shape=(7, 11, 6)
uop_6138 = relay.sin(call_6134.astype('float32')) # shape=(7, 11, 6)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_6143 = func_4081_call()
call_6144 = func_4081_call()
func_969_call = mod.get_global_var('func_969')
func_972_call = mutated_mod.get_global_var('func_972')
var_6146 = relay.var("var_6146", dtype = "int16", shape = (297,))#candidate|6146|(297,)|var|int16
call_6145 = func_969_call(relay.reshape(var_6146.astype('int16'), [11, 9, 3]))
call_6147 = func_969_call(relay.reshape(var_6146.astype('int16'), [11, 9, 3]))
uop_6149 = relay.sinh(uop_6136.astype('float32')) # shape=(7, 11, 6)
uop_6151 = relay.sinh(uop_6138.astype('float32')) # shape=(7, 11, 6)
func_4742_call = mod.get_global_var('func_4742')
func_4744_call = mutated_mod.get_global_var('func_4744')
call_6160 = relay.TupleGetItem(func_4742_call(), 0)
call_6161 = relay.TupleGetItem(func_4744_call(), 0)
output = relay.Tuple([call_6143,call_6145,var_6146,uop_6149,call_6160,])
output2 = relay.Tuple([call_6144,call_6147,var_6146,uop_6151,call_6161,])
func_6171 = relay.Function([var_6146,], output)
mod['func_6171'] = func_6171
mod = relay.transform.InferType()(mod)
mutated_mod['func_6171'] = func_6171
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6172 = relay.var("var_6172", dtype = "int16", shape = (297,))#candidate|6172|(297,)|var|int16
func_6171_call = mutated_mod.get_global_var('func_6171')
call_6173 = func_6171_call(var_6172)
output = call_6173
func_6174 = relay.Function([var_6172], output)
mutated_mod['func_6174'] = func_6174
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5191_call = mod.get_global_var('func_5191')
func_5192_call = mutated_mod.get_global_var('func_5192')
call_6176 = relay.TupleGetItem(func_5191_call(), 3)
call_6177 = relay.TupleGetItem(func_5192_call(), 3)
func_2741_call = mod.get_global_var('func_2741')
func_2744_call = mutated_mod.get_global_var('func_2744')
var_6194 = relay.var("var_6194", dtype = "float32", shape = (81,))#candidate|6194|(81,)|var|float32
call_6193 = func_2741_call(relay.reshape(var_6194.astype('float32'), [9, 9, 1]))
call_6195 = func_2741_call(relay.reshape(var_6194.astype('float32'), [9, 9, 1]))
func_1349_call = mod.get_global_var('func_1349')
func_1352_call = mutated_mod.get_global_var('func_1352')
const_6199 = relay.const([7.225878,-8.878966,7.763928,-5.829407,-4.566197,7.685075,-6.465900,-0.555898,8.824137,7.298534,8.956698,-8.686035,-3.337657,6.988251,4.577262,1.178540,-8.544437,7.757546,-9.807651,0.695598,-0.199915,1.146339,6.831968,-2.560344,-0.557696,9.543531,-4.610380,4.287143,-3.929439,-4.842259,9.800953,-3.449182,8.928785,1.823163,3.477022,9.780619,3.076455,-3.277969,-0.421593,4.814202,-3.827611,-5.361302,2.567616,-9.478935,-3.603418,8.157935,-7.352368,-2.348592,6.639153,0.844728,-6.039215,4.557563,-2.286586,-3.240298,-2.799816,8.582130,-4.195938,1.628251,-8.146633,4.256321,5.133029,-6.900946,-0.908279,1.045178,-9.092853,-4.902392,6.081679,-9.484546,1.005445,-4.257579,-1.119922,3.894338,-1.579385,-5.441308,-8.654977,0.576240,-7.650102,3.533822,-1.169038,8.210530,-9.606121,-3.215806,9.280162,8.696958], dtype = "float64")#candidate|6199|(84,)|const|float64
call_6198 = relay.TupleGetItem(func_1349_call(relay.reshape(const_6199.astype('float64'), [12, 7, 1])), 0)
call_6200 = relay.TupleGetItem(func_1352_call(relay.reshape(const_6199.astype('float64'), [12, 7, 1])), 0)
uop_6212 = relay.exp(call_6176.astype('float64')) # shape=(11, 6, 14)
uop_6214 = relay.exp(call_6177.astype('float64')) # shape=(11, 6, 14)
output = relay.Tuple([call_6193,var_6194,call_6198,const_6199,uop_6212,])
output2 = relay.Tuple([call_6195,var_6194,call_6200,const_6199,uop_6214,])
func_6237 = relay.Function([var_6194,], output)
mod['func_6237'] = func_6237
mod = relay.transform.InferType()(mod)
var_6238 = relay.var("var_6238", dtype = "float32", shape = (81,))#candidate|6238|(81,)|var|float32
output = func_6237(var_6238)
func_6239 = relay.Function([var_6238], output)
mutated_mod['func_6239'] = func_6239
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6265 = relay.var("var_6265", dtype = "float32", shape = (14, 16, 13))#candidate|6265|(14, 16, 13)|var|float32
uop_6266 = relay.acos(var_6265.astype('float32')) # shape=(14, 16, 13)
func_4767_call = mod.get_global_var('func_4767')
func_4770_call = mutated_mod.get_global_var('func_4770')
var_6271 = relay.var("var_6271", dtype = "float64", shape = (132,))#candidate|6271|(132,)|var|float64
call_6270 = func_4767_call(relay.reshape(var_6271.astype('float64'), [12, 1, 11]))
call_6272 = func_4767_call(relay.reshape(var_6271.astype('float64'), [12, 1, 11]))
output = relay.Tuple([uop_6266,call_6270,var_6271,])
output2 = relay.Tuple([uop_6266,call_6272,var_6271,])
func_6279 = relay.Function([var_6265,var_6271,], output)
mod['func_6279'] = func_6279
mod = relay.transform.InferType()(mod)
var_6280 = relay.var("var_6280", dtype = "float32", shape = (14, 16, 13))#candidate|6280|(14, 16, 13)|var|float32
var_6281 = relay.var("var_6281", dtype = "float64", shape = (132,))#candidate|6281|(132,)|var|float64
output = func_6279(var_6280,var_6281,)
func_6282 = relay.Function([var_6280,var_6281,], output)
mutated_mod['func_6282'] = func_6282
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3706_call = mod.get_global_var('func_3706')
func_3708_call = mutated_mod.get_global_var('func_3708')
call_6295 = relay.TupleGetItem(func_3706_call(), 0)
call_6296 = relay.TupleGetItem(func_3708_call(), 0)
func_4235_call = mod.get_global_var('func_4235')
func_4238_call = mutated_mod.get_global_var('func_4238')
var_6306 = relay.var("var_6306", dtype = "bool", shape = (1, 1050))#candidate|6306|(1, 1050)|var|bool
var_6307 = relay.var("var_6307", dtype = "float64", shape = (168,))#candidate|6307|(168,)|var|float64
call_6305 = relay.TupleGetItem(func_4235_call(relay.reshape(var_6306.astype('bool'), [14, 15, 5]), relay.reshape(var_6307.astype('float64'), [168,]), ), 4)
call_6308 = relay.TupleGetItem(func_4238_call(relay.reshape(var_6306.astype('bool'), [14, 15, 5]), relay.reshape(var_6307.astype('float64'), [168,]), ), 4)
func_5370_call = mod.get_global_var('func_5370')
func_5372_call = mutated_mod.get_global_var('func_5372')
call_6312 = relay.TupleGetItem(func_5370_call(), 0)
call_6313 = relay.TupleGetItem(func_5372_call(), 0)
output = relay.Tuple([call_6295,call_6305,var_6306,var_6307,call_6312,])
output2 = relay.Tuple([call_6296,call_6308,var_6306,var_6307,call_6313,])
func_6314 = relay.Function([var_6306,var_6307,], output)
mod['func_6314'] = func_6314
mod = relay.transform.InferType()(mod)
mutated_mod['func_6314'] = func_6314
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6314_call = mutated_mod.get_global_var('func_6314')
var_6316 = relay.var("var_6316", dtype = "bool", shape = (1, 1050))#candidate|6316|(1, 1050)|var|bool
var_6317 = relay.var("var_6317", dtype = "float64", shape = (168,))#candidate|6317|(168,)|var|float64
call_6315 = func_6314_call(var_6316,var_6317,)
output = call_6315
func_6318 = relay.Function([var_6316,var_6317,], output)
mutated_mod['func_6318'] = func_6318
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4043_call = mod.get_global_var('func_4043')
func_4044_call = mutated_mod.get_global_var('func_4044')
call_6385 = relay.TupleGetItem(func_4043_call(), 1)
call_6386 = relay.TupleGetItem(func_4044_call(), 1)
output = relay.Tuple([call_6385,])
output2 = relay.Tuple([call_6386,])
func_6393 = relay.Function([], output)
mod['func_6393'] = func_6393
mod = relay.transform.InferType()(mod)
mutated_mod['func_6393'] = func_6393
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6393_call = mutated_mod.get_global_var('func_6393')
call_6394 = func_6393_call()
output = call_6394
func_6395 = relay.Function([], output)
mutated_mod['func_6395'] = func_6395
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5716_call = mod.get_global_var('func_5716')
func_5718_call = mutated_mod.get_global_var('func_5718')
call_6512 = relay.TupleGetItem(func_5716_call(), 0)
call_6513 = relay.TupleGetItem(func_5718_call(), 0)
func_3524_call = mod.get_global_var('func_3524')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_6516 = relay.TupleGetItem(func_3524_call(), 0)
call_6517 = relay.TupleGetItem(func_3526_call(), 0)
func_3581_call = mod.get_global_var('func_3581')
func_3583_call = mutated_mod.get_global_var('func_3583')
call_6520 = func_3581_call()
call_6521 = func_3581_call()
output = relay.Tuple([call_6512,call_6516,call_6520,])
output2 = relay.Tuple([call_6513,call_6517,call_6521,])
func_6529 = relay.Function([], output)
mod['func_6529'] = func_6529
mod = relay.transform.InferType()(mod)
output = func_6529()
func_6530 = relay.Function([], output)
mutated_mod['func_6530'] = func_6530
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4469_call = mod.get_global_var('func_4469')
func_4471_call = mutated_mod.get_global_var('func_4471')
call_6537 = func_4469_call()
call_6538 = func_4469_call()
output = relay.Tuple([call_6537,])
output2 = relay.Tuple([call_6538,])
func_6558 = relay.Function([], output)
mod['func_6558'] = func_6558
mod = relay.transform.InferType()(mod)
mutated_mod['func_6558'] = func_6558
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6558_call = mutated_mod.get_global_var('func_6558')
call_6559 = func_6558_call()
output = call_6559
func_6560 = relay.Function([], output)
mutated_mod['func_6560'] = func_6560
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4742_call = mod.get_global_var('func_4742')
func_4744_call = mutated_mod.get_global_var('func_4744')
call_6569 = relay.TupleGetItem(func_4742_call(), 0)
call_6570 = relay.TupleGetItem(func_4744_call(), 0)
output = call_6569
output2 = call_6570
func_6594 = relay.Function([], output)
mod['func_6594'] = func_6594
mod = relay.transform.InferType()(mod)
mutated_mod['func_6594'] = func_6594
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6594_call = mutated_mod.get_global_var('func_6594')
call_6595 = func_6594_call()
output = call_6595
func_6596 = relay.Function([], output)
mutated_mod['func_6596'] = func_6596
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5191_call = mod.get_global_var('func_5191')
func_5192_call = mutated_mod.get_global_var('func_5192')
call_6623 = relay.TupleGetItem(func_5191_call(), 2)
call_6624 = relay.TupleGetItem(func_5192_call(), 2)
output = call_6623
output2 = call_6624
func_6657 = relay.Function([], output)
mod['func_6657'] = func_6657
mod = relay.transform.InferType()(mod)
mutated_mod['func_6657'] = func_6657
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6657_call = mutated_mod.get_global_var('func_6657')
call_6658 = func_6657_call()
output = call_6658
func_6659 = relay.Function([], output)
mutated_mod['func_6659'] = func_6659
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4826_call = mod.get_global_var('func_4826')
func_4828_call = mutated_mod.get_global_var('func_4828')
call_6698 = relay.TupleGetItem(func_4826_call(), 0)
call_6699 = relay.TupleGetItem(func_4828_call(), 0)
func_828_call = mod.get_global_var('func_828')
func_831_call = mutated_mod.get_global_var('func_831')
var_6701 = relay.var("var_6701", dtype = "uint8", shape = (33,))#candidate|6701|(33,)|var|uint8
const_6702 = relay.const([[8],[-7],[-7],[-1],[10],[-5],[10],[-2],[-7],[10],[9],[-4],[7],[3],[-5],[-1],[-7],[3],[3],[-10],[-3],[-7]], dtype = "int16")#candidate|6702|(22, 1)|const|int16
call_6700 = relay.TupleGetItem(func_828_call(relay.reshape(var_6701.astype('uint8'), [3, 11, 1]), relay.reshape(const_6702.astype('int16'), [22,]), ), 4)
call_6703 = relay.TupleGetItem(func_831_call(relay.reshape(var_6701.astype('uint8'), [3, 11, 1]), relay.reshape(const_6702.astype('int16'), [22,]), ), 4)
output = relay.Tuple([call_6698,call_6700,var_6701,const_6702,])
output2 = relay.Tuple([call_6699,call_6703,var_6701,const_6702,])
func_6716 = relay.Function([var_6701,], output)
mod['func_6716'] = func_6716
mod = relay.transform.InferType()(mod)
mutated_mod['func_6716'] = func_6716
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6717 = relay.var("var_6717", dtype = "uint8", shape = (33,))#candidate|6717|(33,)|var|uint8
func_6716_call = mutated_mod.get_global_var('func_6716')
call_6718 = func_6716_call(var_6717)
output = call_6718
func_6719 = relay.Function([var_6717], output)
mutated_mod['func_6719'] = func_6719
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3732_call = mod.get_global_var('func_3732')
func_3734_call = mutated_mod.get_global_var('func_3734')
call_6735 = relay.TupleGetItem(func_3732_call(), 0)
call_6736 = relay.TupleGetItem(func_3734_call(), 0)
output = call_6735
output2 = call_6736
func_6737 = relay.Function([], output)
mod['func_6737'] = func_6737
mod = relay.transform.InferType()(mod)
output = func_6737()
func_6738 = relay.Function([], output)
mutated_mod['func_6738'] = func_6738
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6393_call = mod.get_global_var('func_6393')
func_6395_call = mutated_mod.get_global_var('func_6395')
call_6746 = relay.TupleGetItem(func_6393_call(), 0)
call_6747 = relay.TupleGetItem(func_6395_call(), 0)
output = relay.Tuple([call_6746,])
output2 = relay.Tuple([call_6747,])
func_6748 = relay.Function([], output)
mod['func_6748'] = func_6748
mod = relay.transform.InferType()(mod)
mutated_mod['func_6748'] = func_6748
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6748_call = mutated_mod.get_global_var('func_6748')
call_6749 = func_6748_call()
output = call_6749
func_6750 = relay.Function([], output)
mutated_mod['func_6750'] = func_6750
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_6774 = func_4081_call()
call_6775 = func_4081_call()
output = call_6774
output2 = call_6775
func_6785 = relay.Function([], output)
mod['func_6785'] = func_6785
mod = relay.transform.InferType()(mod)
output = func_6785()
func_6786 = relay.Function([], output)
mutated_mod['func_6786'] = func_6786
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6851 = relay.var("var_6851", dtype = "int32", shape = (3, 16, 11))#candidate|6851|(3, 16, 11)|var|int32
var_6852 = relay.var("var_6852", dtype = "int32", shape = (3, 16, 11))#candidate|6852|(3, 16, 11)|var|int32
bop_6853 = relay.less(var_6851.astype('bool'), relay.reshape(var_6852.astype('bool'), relay.shape_of(var_6851))) # shape=(3, 16, 11)
output = relay.Tuple([bop_6853,])
output2 = relay.Tuple([bop_6853,])
func_6858 = relay.Function([var_6851,var_6852,], output)
mod['func_6858'] = func_6858
mod = relay.transform.InferType()(mod)
mutated_mod['func_6858'] = func_6858
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6858_call = mutated_mod.get_global_var('func_6858')
var_6860 = relay.var("var_6860", dtype = "int32", shape = (3, 16, 11))#candidate|6860|(3, 16, 11)|var|int32
var_6861 = relay.var("var_6861", dtype = "int32", shape = (3, 16, 11))#candidate|6861|(3, 16, 11)|var|int32
call_6859 = func_6858_call(var_6860,var_6861,)
output = call_6859
func_6862 = relay.Function([var_6860,var_6861,], output)
mutated_mod['func_6862'] = func_6862
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3524_call = mod.get_global_var('func_3524')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_6921 = relay.TupleGetItem(func_3524_call(), 0)
call_6922 = relay.TupleGetItem(func_3526_call(), 0)
output = call_6921
output2 = call_6922
func_6930 = relay.Function([], output)
mod['func_6930'] = func_6930
mod = relay.transform.InferType()(mod)
output = func_6930()
func_6931 = relay.Function([], output)
mutated_mod['func_6931'] = func_6931
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6930_call = mod.get_global_var('func_6930')
func_6931_call = mutated_mod.get_global_var('func_6931')
call_6946 = func_6930_call()
call_6947 = func_6930_call()
output = relay.Tuple([call_6946,])
output2 = relay.Tuple([call_6947,])
func_6956 = relay.Function([], output)
mod['func_6956'] = func_6956
mod = relay.transform.InferType()(mod)
mutated_mod['func_6956'] = func_6956
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6956_call = mutated_mod.get_global_var('func_6956')
call_6957 = func_6956_call()
output = call_6957
func_6958 = relay.Function([], output)
mutated_mod['func_6958'] = func_6958
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6737_call = mod.get_global_var('func_6737')
func_6738_call = mutated_mod.get_global_var('func_6738')
call_7022 = func_6737_call()
call_7023 = func_6737_call()
output = call_7022
output2 = call_7023
func_7024 = relay.Function([], output)
mod['func_7024'] = func_7024
mod = relay.transform.InferType()(mod)
mutated_mod['func_7024'] = func_7024
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7024_call = mutated_mod.get_global_var('func_7024')
call_7025 = func_7024_call()
output = call_7025
func_7026 = relay.Function([], output)
mutated_mod['func_7026'] = func_7026
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6737_call = mod.get_global_var('func_6737')
func_6738_call = mutated_mod.get_global_var('func_6738')
call_7027 = func_6737_call()
call_7028 = func_6737_call()
output = call_7027
output2 = call_7028
func_7032 = relay.Function([], output)
mod['func_7032'] = func_7032
mod = relay.transform.InferType()(mod)
mutated_mod['func_7032'] = func_7032
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7032_call = mutated_mod.get_global_var('func_7032')
call_7033 = func_7032_call()
output = call_7033
func_7034 = relay.Function([], output)
mutated_mod['func_7034'] = func_7034
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4848_call = mod.get_global_var('func_4848')
func_4850_call = mutated_mod.get_global_var('func_4850')
call_7078 = relay.TupleGetItem(func_4848_call(), 0)
call_7079 = relay.TupleGetItem(func_4850_call(), 0)
output = relay.Tuple([call_7078,])
output2 = relay.Tuple([call_7079,])
func_7081 = relay.Function([], output)
mod['func_7081'] = func_7081
mod = relay.transform.InferType()(mod)
mutated_mod['func_7081'] = func_7081
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7081_call = mutated_mod.get_global_var('func_7081')
call_7082 = func_7081_call()
output = call_7082
func_7083 = relay.Function([], output)
mutated_mod['func_7083'] = func_7083
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7104 = relay.var("var_7104", dtype = "uint16", shape = (6, 8, 5))#candidate|7104|(6, 8, 5)|var|uint16
const_7105 = relay.const([[[5,6,-10,-5,-2],[5,6,1,-5,-1],[6,3,10,4,7],[-8,7,-4,-8,-10],[-6,10,-2,3,-7],[-2,4,-2,-1,10],[2,-10,-4,5,-3],[-2,2,4,4,-1]],[[4,4,3,4,-4],[1,4,4,6,-10],[6,10,6,2,-1],[-1,-8,-3,-2,-4],[3,4,-9,-3,-2],[3,-5,-6,9,8],[-2,-7,5,1,8],[8,5,7,2,8]],[[-3,2,6,-6,5],[-6,-7,7,-2,-1],[-8,-10,-3,-4,6],[-1,-2,6,10,-4],[-8,-1,-3,8,9],[-8,10,-7,-6,10],[-4,3,-3,-6,3],[-7,2,7,-6,-3]],[[-4,-9,8,9,-8],[7,9,10,9,4],[-7,4,-7,-5,3],[8,-6,2,-5,-7],[10,-7,-4,-3,-2],[-6,6,-8,-8,-9],[-8,10,4,-9,3],[-5,2,3,10,2]],[[3,-3,-7,-5,4],[9,9,-8,-9,5],[5,-8,4,4,7],[6,-5,10,-9,-8],[-7,5,-4,10,-1],[9,6,2,9,2],[3,8,6,-1,-1],[6,-6,5,-5,5]],[[-1,-10,10,-5,-2],[-6,6,5,2,-4],[5,-2,-4,-10,1],[3,-10,8,-6,10],[1,-5,10,6,-7],[4,4,-10,-10,-5],[6,4,2,-7,-5],[10,-2,3,-6,1]]], dtype = "uint16")#candidate|7105|(6, 8, 5)|const|uint16
bop_7106 = relay.right_shift(var_7104.astype('uint16'), relay.reshape(const_7105.astype('uint16'), relay.shape_of(var_7104))) # shape=(6, 8, 5)
uop_7119 = relay.asin(const_7105.astype('float64')) # shape=(6, 8, 5)
output = relay.Tuple([bop_7106,uop_7119,])
output2 = relay.Tuple([bop_7106,uop_7119,])
func_7122 = relay.Function([var_7104,], output)
mod['func_7122'] = func_7122
mod = relay.transform.InferType()(mod)
mutated_mod['func_7122'] = func_7122
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7123 = relay.var("var_7123", dtype = "uint16", shape = (6, 8, 5))#candidate|7123|(6, 8, 5)|var|uint16
func_7122_call = mutated_mod.get_global_var('func_7122')
call_7124 = func_7122_call(var_7123)
output = call_7124
func_7125 = relay.Function([var_7123], output)
mutated_mod['func_7125'] = func_7125
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7335 = relay.var("var_7335", dtype = "float32", shape = (7, 2, 3))#candidate|7335|(7, 2, 3)|var|float32
uop_7336 = relay.cosh(var_7335.astype('float32')) # shape=(7, 2, 3)
output = relay.Tuple([uop_7336,])
output2 = relay.Tuple([uop_7336,])
func_7354 = relay.Function([var_7335,], output)
mod['func_7354'] = func_7354
mod = relay.transform.InferType()(mod)
mutated_mod['func_7354'] = func_7354
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7355 = relay.var("var_7355", dtype = "float32", shape = (7, 2, 3))#candidate|7355|(7, 2, 3)|var|float32
func_7354_call = mutated_mod.get_global_var('func_7354')
call_7356 = func_7354_call(var_7355)
output = call_7356
func_7357 = relay.Function([var_7355], output)
mutated_mod['func_7357'] = func_7357
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6930_call = mod.get_global_var('func_6930')
func_6931_call = mutated_mod.get_global_var('func_6931')
call_7395 = func_6930_call()
call_7396 = func_6930_call()
func_6657_call = mod.get_global_var('func_6657')
func_6659_call = mutated_mod.get_global_var('func_6659')
call_7402 = func_6657_call()
call_7403 = func_6657_call()
func_5567_call = mod.get_global_var('func_5567')
func_5570_call = mutated_mod.get_global_var('func_5570')
var_7422 = relay.var("var_7422", dtype = "float32", shape = (81,))#candidate|7422|(81,)|var|float32
var_7423 = relay.var("var_7423", dtype = "float64", shape = (1260,))#candidate|7423|(1260,)|var|float64
call_7421 = relay.TupleGetItem(func_5567_call(relay.reshape(var_7422.astype('float32'), [81,]), relay.reshape(var_7423.astype('float64'), [3, 420]), ), 7)
call_7424 = relay.TupleGetItem(func_5570_call(relay.reshape(var_7422.astype('float32'), [81,]), relay.reshape(var_7423.astype('float64'), [3, 420]), ), 7)
output = relay.Tuple([call_7395,call_7402,call_7421,var_7422,var_7423,])
output2 = relay.Tuple([call_7396,call_7403,call_7424,var_7422,var_7423,])
func_7440 = relay.Function([var_7422,var_7423,], output)
mod['func_7440'] = func_7440
mod = relay.transform.InferType()(mod)
var_7441 = relay.var("var_7441", dtype = "float32", shape = (81,))#candidate|7441|(81,)|var|float32
var_7442 = relay.var("var_7442", dtype = "float64", shape = (1260,))#candidate|7442|(1260,)|var|float64
output = func_7440(var_7441,var_7442,)
func_7443 = relay.Function([var_7441,var_7442,], output)
mutated_mod['func_7443'] = func_7443
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6930_call = mod.get_global_var('func_6930')
func_6931_call = mutated_mod.get_global_var('func_6931')
call_7496 = func_6930_call()
call_7497 = func_6930_call()
output = call_7496
output2 = call_7497
func_7507 = relay.Function([], output)
mod['func_7507'] = func_7507
mod = relay.transform.InferType()(mod)
output = func_7507()
func_7508 = relay.Function([], output)
mutated_mod['func_7508'] = func_7508
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6748_call = mod.get_global_var('func_6748')
func_6750_call = mutated_mod.get_global_var('func_6750')
call_7519 = relay.TupleGetItem(func_6748_call(), 0)
call_7520 = relay.TupleGetItem(func_6750_call(), 0)
output = call_7519
output2 = call_7520
func_7524 = relay.Function([], output)
mod['func_7524'] = func_7524
mod = relay.transform.InferType()(mod)
output = func_7524()
func_7525 = relay.Function([], output)
mutated_mod['func_7525'] = func_7525
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5854_call = mod.get_global_var('func_5854')
func_5856_call = mutated_mod.get_global_var('func_5856')
call_7580 = relay.TupleGetItem(func_5854_call(), 2)
call_7581 = relay.TupleGetItem(func_5856_call(), 2)
output = relay.Tuple([call_7580,])
output2 = relay.Tuple([call_7581,])
func_7593 = relay.Function([], output)
mod['func_7593'] = func_7593
mod = relay.transform.InferType()(mod)
output = func_7593()
func_7594 = relay.Function([], output)
mutated_mod['func_7594'] = func_7594
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5716_call = mod.get_global_var('func_5716')
func_5718_call = mutated_mod.get_global_var('func_5718')
call_7639 = relay.TupleGetItem(func_5716_call(), 0)
call_7640 = relay.TupleGetItem(func_5718_call(), 0)
output = relay.Tuple([call_7639,])
output2 = relay.Tuple([call_7640,])
func_7649 = relay.Function([], output)
mod['func_7649'] = func_7649
mod = relay.transform.InferType()(mod)
output = func_7649()
func_7650 = relay.Function([], output)
mutated_mod['func_7650'] = func_7650
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7649_call = mod.get_global_var('func_7649')
func_7650_call = mutated_mod.get_global_var('func_7650')
call_7671 = relay.TupleGetItem(func_7649_call(), 0)
call_7672 = relay.TupleGetItem(func_7650_call(), 0)
func_7649_call = mod.get_global_var('func_7649')
func_7650_call = mutated_mod.get_global_var('func_7650')
call_7673 = relay.TupleGetItem(func_7649_call(), 0)
call_7674 = relay.TupleGetItem(func_7650_call(), 0)
func_6748_call = mod.get_global_var('func_6748')
func_6750_call = mutated_mod.get_global_var('func_6750')
call_7686 = relay.TupleGetItem(func_6748_call(), 0)
call_7687 = relay.TupleGetItem(func_6750_call(), 0)
func_6785_call = mod.get_global_var('func_6785')
func_6786_call = mutated_mod.get_global_var('func_6786')
call_7706 = func_6785_call()
call_7707 = func_6785_call()
func_1899_call = mod.get_global_var('func_1899')
func_1902_call = mutated_mod.get_global_var('func_1902')
var_7724 = relay.var("var_7724", dtype = "int16", shape = (1, 22))#candidate|7724|(1, 22)|var|int16
const_7725 = relay.const([-7,6,-3,7,5,-9,-1,6,8,-7,-1,-2,-6,-7,7,10,2,10,-4,-1,2,-1,2,10,1,-8,6,3,1,10,7,-4,6,2,-10,-7,4,3,5,-5,1,-1,1,8,-7,10,8,2,-7,-4,-9,9,-10,9,-8,-6,-8,-7,-2,-5,-3,2,8,-7,-10,3,-5,3,5,-3,-10,1,7,-9,2,9,-8,9,6,-4,-9,6,-7,1,4,-4,-4,-2,-2,-1,6,10,-2,-1,-4,-7,-10,-9,1,-1,-6,9,10,3,2,-4,6,2,2,-8,-8,3,7,9,4,5,4,9,3,6,6,6,6,9,1,8,4,9,5,-9,7,8,8,-5,-1,-8,1,-10,2,-4,-9,-2,4,-2,9,-10,7,-8,-7,-8,2,-9,10,9,-9,4,-9,-10,-10,-4,6,-7,-1,-8,8,9,1,-4,-7,4,-9,-3,9,-1,-8,9,-6,6,3,-8,-9,-10,4,3,8,7,-8,-4,-6,5,10,5,-2,5,-5,6,-7,6,10,-3,7,-6,2,1,6,9,1,2,-7,1,-10,-7,5,10,-3,6,5,-2,-1,-5,10,-3,-2,-8,-3,-2,-6,-10,2,-6,3,4,3,6,-10,1,9,-3,-10,-7,-10,4,9,8,-3,8,-8,5,10,-7,6,-10,-3,-3,6,4,10,3,-1,3,-5,2,-5,7,10,-4,2,-1,-1,-8,4,-10,-1,6,-3,-7,-1,-4,-8,2,4,4,3,3,-10,8,6,-10,2,2,-6,4,10,6,10,5,3,2,-5,-10,7,-8,-6,1,-4,-3,-1,-8], dtype = "int16")#candidate|7725|(308,)|const|int16
call_7723 = relay.TupleGetItem(func_1899_call(relay.reshape(var_7724.astype('int16'), [22,]), relay.reshape(const_7725.astype('int16'), [308,]), ), 0)
call_7726 = relay.TupleGetItem(func_1902_call(relay.reshape(var_7724.astype('int16'), [22,]), relay.reshape(const_7725.astype('int16'), [308,]), ), 0)
uop_7733 = relay.sin(call_7723.astype('float32')) # shape=(7, 3, 8)
uop_7735 = relay.sin(call_7726.astype('float32')) # shape=(7, 3, 8)
func_5050_call = mod.get_global_var('func_5050')
func_5052_call = mutated_mod.get_global_var('func_5052')
call_7736 = func_5050_call()
call_7737 = func_5050_call()
output = relay.Tuple([call_7671,call_7673,call_7686,call_7706,var_7724,const_7725,uop_7733,call_7736,])
output2 = relay.Tuple([call_7672,call_7674,call_7687,call_7707,var_7724,const_7725,uop_7735,call_7737,])
func_7739 = relay.Function([var_7724,], output)
mod['func_7739'] = func_7739
mod = relay.transform.InferType()(mod)
mutated_mod['func_7739'] = func_7739
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7740 = relay.var("var_7740", dtype = "int16", shape = (1, 22))#candidate|7740|(1, 22)|var|int16
func_7739_call = mutated_mod.get_global_var('func_7739')
call_7741 = func_7739_call(var_7740)
output = call_7741
func_7742 = relay.Function([var_7740], output)
mutated_mod['func_7742'] = func_7742
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5191_call = mod.get_global_var('func_5191')
func_5192_call = mutated_mod.get_global_var('func_5192')
call_7806 = relay.TupleGetItem(func_5191_call(), 3)
call_7807 = relay.TupleGetItem(func_5192_call(), 3)
output = call_7806
output2 = call_7807
func_7812 = relay.Function([], output)
mod['func_7812'] = func_7812
mod = relay.transform.InferType()(mod)
mutated_mod['func_7812'] = func_7812
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7812_call = mutated_mod.get_global_var('func_7812')
call_7813 = func_7812_call()
output = call_7813
func_7814 = relay.Function([], output)
mutated_mod['func_7814'] = func_7814
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6785_call = mod.get_global_var('func_6785')
func_6786_call = mutated_mod.get_global_var('func_6786')
call_7837 = func_6785_call()
call_7838 = func_6785_call()
func_5923_call = mod.get_global_var('func_5923')
func_5926_call = mutated_mod.get_global_var('func_5926')
var_7869 = relay.var("var_7869", dtype = "int8", shape = (432, 1))#candidate|7869|(432, 1)|var|int8
call_7868 = relay.TupleGetItem(func_5923_call(relay.reshape(var_7869.astype('int8'), [6, 8, 9]), relay.reshape(var_7869.astype('int8'), [6, 8, 9]), ), 1)
call_7870 = relay.TupleGetItem(func_5926_call(relay.reshape(var_7869.astype('int8'), [6, 8, 9]), relay.reshape(var_7869.astype('int8'), [6, 8, 9]), ), 1)
func_5237_call = mod.get_global_var('func_5237')
func_5239_call = mutated_mod.get_global_var('func_5239')
call_7871 = relay.TupleGetItem(func_5237_call(relay.reshape(call_7868.astype('float64'), [7, 11, 6])), 1)
call_7872 = relay.TupleGetItem(func_5239_call(relay.reshape(call_7868.astype('float64'), [7, 11, 6])), 1)
output = relay.Tuple([call_7837,call_7868,var_7869,call_7871,])
output2 = relay.Tuple([call_7838,call_7870,var_7869,call_7872,])
func_7875 = relay.Function([var_7869,], output)
mod['func_7875'] = func_7875
mod = relay.transform.InferType()(mod)
mutated_mod['func_7875'] = func_7875
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7876 = relay.var("var_7876", dtype = "int8", shape = (432, 1))#candidate|7876|(432, 1)|var|int8
func_7875_call = mutated_mod.get_global_var('func_7875')
call_7877 = func_7875_call(var_7876)
output = call_7877
func_7878 = relay.Function([var_7876], output)
mutated_mod['func_7878'] = func_7878
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6393_call = mod.get_global_var('func_6393')
func_6395_call = mutated_mod.get_global_var('func_6395')
call_7888 = relay.TupleGetItem(func_6393_call(), 0)
call_7889 = relay.TupleGetItem(func_6395_call(), 0)
output = call_7888
output2 = call_7889
func_7890 = relay.Function([], output)
mod['func_7890'] = func_7890
mod = relay.transform.InferType()(mod)
mutated_mod['func_7890'] = func_7890
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7890_call = mutated_mod.get_global_var('func_7890')
call_7891 = func_7890_call()
output = call_7891
func_7892 = relay.Function([], output)
mutated_mod['func_7892'] = func_7892
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3581_call = mod.get_global_var('func_3581')
func_3583_call = mutated_mod.get_global_var('func_3583')
call_7896 = func_3581_call()
call_7897 = func_3581_call()
func_3254_call = mod.get_global_var('func_3254')
func_3257_call = mutated_mod.get_global_var('func_3257')
const_7911 = relay.const([-4.718022,7.798101,9.956566,-2.733895,-7.277875,7.310265,-1.513896,7.399120,1.862834,2.278468,3.002210,2.699645,-0.401292,-5.892949,-0.227328,2.821700,3.081730,-0.428116,-3.197880,-0.688293,-6.923432,9.828511,3.917703,1.151462,8.461232,-8.895077,-8.433322,-3.321891,-0.979222,2.436002,3.276390,1.830763,1.152683,-1.319001,4.012350,5.013340,-0.356649,-9.726603,4.843974,6.633869,8.731692,4.136327,0.782320,-5.198039,-7.871556,-8.166591,-4.586541,9.241404,3.858140,8.116412,-2.355097,7.886379,8.869852,8.822733,6.537777,4.551242,-2.889315,5.617581,-1.274491,1.962442,4.283455,0.152676,3.822075,4.760501,-8.619731,5.407666,1.553630,1.280475,1.973612,0.061003,6.004016,6.597399,-2.599396,-6.942258,-7.880132,1.394639,4.056820,0.320586,8.178675,-8.750288,-7.356486,7.328018,-4.436700,-3.568224,1.953993,-9.980701,9.846485,-6.986265,-1.321568,-5.560367,-6.684320,-4.764842,-7.535073,-6.294397,8.421691,1.585493,0.457488,2.896266,-8.247281,8.315882,-2.888811,-2.962868,3.405780,3.740925,1.420999,-1.645232,9.488067,-0.778091,-7.176897,-9.147270,5.054189,5.617579,-8.447816,-2.629689,1.910611,-3.513428,7.314586,0.397738,8.373554,7.078681,-2.354994,-0.903598,-8.045366,-0.032040,4.304346,-6.440964,-0.261611,9.292231,7.205844,3.388437,0.564153,-3.350699,2.082862,9.961044,-9.670630,2.358982,-9.620398,-0.797155,-8.348547,-5.552195,9.492128,-7.289896,-4.318616,-5.027148,0.606444,-2.906200,5.040520,-4.174806,-3.681993,6.542145,-5.391763,-0.934954,-6.308847,6.843205,4.843500,8.385133,8.592680,-1.945220,5.492681,7.277263,4.099079,-1.577490,-3.790514,5.896190,-2.566460,8.040705,0.103497,-5.913810,-4.794898,5.215680,5.019738,4.580521,-9.598712,-9.948655,-0.956126,9.732535,-7.489314,3.568915,-3.874154,9.728549,9.362605,9.211851,-8.985995,4.903934,0.870158,-0.036250,9.679311,5.536469,-9.591977,4.323809,4.245694,-6.916610,-4.290039,-1.600698,-4.842472,-9.391840,-2.332383,-3.271639,6.640151,-3.409179,-3.166672,7.324600,-1.083638,-9.524232,-2.048405,0.018536,-4.374768,4.643518,9.057026,9.844645,-2.904675,-2.245853,7.746944,2.206357,-3.879689,9.913533,2.226893,-2.305260,-0.785907,-6.984201,-2.240255,-5.084167,2.527809,-9.931293,-8.940764,-9.372712,0.276003,6.728451,8.277830,7.197282,-6.976783,8.217591,7.710648,0.093520,-5.511125,-9.392804,-9.695139,1.732057,8.099627,-1.728669,6.698151,-4.504411,8.276739,2.318290,-4.768323,-2.973829,6.184348,-5.824445,4.951548,-3.283659,6.847339,9.429388,-2.800523,2.785800,-6.970890,3.798003,-6.278755,-5.616701,2.045369,3.685522,-7.226017,2.312562,0.145535,-5.349894,3.546445,-6.821149,3.157583,-9.173787,-0.174645,8.864355,-6.464885,-7.808515,-4.863528,-6.982334,-6.247562,-2.515408,-1.518750,-3.642803,9.408347,-7.181456,-1.450605,-8.863262,-2.330988,7.226405,-1.433754,3.628918,4.463076,-5.146704,-2.265345,3.373028,-8.668922,6.408116,7.443487,-8.946708,-0.735412,-0.920170,1.679403,1.720593,1.889477,-2.535065,1.914201,-4.393652,9.329368,3.751952,-3.743676,-0.774610,-9.136221,1.633201,0.745761,-6.181949,-6.617713,-0.693563,9.933790,-0.498303,-0.122596,9.301221,-9.091249,-8.271703,-3.214858,-8.864961,9.641482,4.703612,-1.132628,1.539556,-8.663598,-9.112577,-1.073262,-9.795476,-0.413805,0.052988,2.257435,-5.308154,-3.800738,1.452526,-7.819647,0.595026,-0.945942,8.078228,3.071230,-9.967288,9.956434,9.128432,-8.085240,8.895320,-2.573830,6.190155,6.208513,0.463656,4.722443,-5.386786,-2.582423,8.089839,-9.601289,-4.832505,4.609555,5.890207,5.399188,7.292874,-1.838773,-2.664301,5.370875,-9.924331,3.951939,-7.882388,-8.793330,9.666968,0.791729,4.857296,5.027704,1.969722,2.238020,2.109364,9.516339,-5.168208,-8.071521,-3.416249,-3.190321,-1.399598,7.993904,-1.839919,-5.315096,-7.635231,-9.206028,6.641346,2.462717,5.339053,-0.921119,6.912306,6.879809,1.042802,-3.218339,1.324817,8.743057,8.815012,-2.596465,-7.742335,4.072068,-4.300087,1.541821,7.849102,8.691984,5.456667,-7.734466,7.237481,-7.053524,6.834148,4.838701,8.827031,-4.962464,3.543082,3.373537,0.992593,-1.169875,-2.697812,-1.844406,1.938964,-7.085905,2.495619,1.789961,-1.219088,4.803789,9.399647,-3.374253,2.717776,7.339770,-2.113809,8.203456,8.669426,8.262641,6.440246,6.798000,3.596743,6.163289,-7.791576,-0.512043,-6.618831,-3.072961,-1.436866,-8.344349,-0.288190,-5.238716,-2.159611,-9.377845,6.184795,-5.369044,7.806914,8.911715,6.079620,6.516127,-4.380099,0.553662,-0.516111,-0.481524,-4.865421,-9.795467,-3.941547,2.682165,-8.920390,-0.713809,-2.491039,-5.743876,-4.321957,-4.643761,-5.309288,-7.925638,5.098416,7.951215,9.045018,-5.546048,1.197349,-7.976706,7.007073,-6.856299,-7.162765,-3.313042,6.441500,-8.640138,-1.879973,-0.915711,3.512445,1.418849,-8.998410,-3.108201,-2.358996,0.111422,3.184824,1.461241,-3.548522,6.435990,-9.611444,7.044483,-7.516549,-2.137974,-9.701330,-3.257931,1.755778,9.693298,-7.833198,0.051111,-6.626135,-8.016402,8.847991,6.690305,-4.143953,-8.338021,-7.377353,-8.753513,4.117418,9.906342,4.626858,3.228128,-7.367472,-2.888630,-6.018255,3.043994,2.114726,8.894575,-2.181587,-5.481601,3.971959,4.937666,-8.074026,-7.838842,-2.796267,0.130581,9.453116,-1.147622,4.523373,2.304782,3.643611,1.043819,-1.569761,0.691096,0.305970,5.222592,-1.538685,-0.049232,6.655964,-7.743338,-4.855815,5.924349,7.187515,7.348158,7.949937,-0.641736,-5.528814,5.278854,-7.684467,4.040694,-2.083797,-8.508448,2.370562,5.448946,-8.070764,5.320703,4.352616,-4.590185,-8.163876,-4.865396,-1.422065,-9.249956,-7.507448,-1.576784,-3.847877,-1.826006,-3.926541,7.186204,7.790293,-5.550288,0.900465,-3.656693,0.343212,9.885140,0.529427,8.710296,-8.525196,-6.073119,0.804951,-5.654142,-4.211907,-4.844756,7.226177,-4.388758,-9.455884,-7.439135,-6.933955,-0.489506,-0.914303,-4.590680,7.607342,2.650050,5.305048,-7.529157,-3.505488,9.391622,4.997335,-0.883439,9.268494,2.087094,2.172894,7.682144,0.659364,4.955310,5.769924,0.085043,5.786621,1.949854,-6.483546,0.945573,-2.834447,1.318890,-6.079759,-9.973070,-1.360816,6.112008,-1.375564,-2.940236,8.495016,4.672845,8.058891,9.534400,0.340804,3.420680,7.390735,8.520240,9.265586,4.812216,-8.100131,-3.701116,-4.970818,-3.903487,-3.765787,-2.413544,3.839321,8.106724,-5.211327,6.491808,4.123359,5.116044,-9.011618,-7.275747,4.405768,7.260053,9.959996,-4.962078,-2.640790,-8.039758,4.081619,-6.170197,-4.739881,3.863346,-6.970734,4.850958,-2.714315,-4.026245,8.511491,-2.691433,5.976305,-7.839711,5.318025,-1.882978,1.400013,6.805749,6.268222,7.414801,5.885594,-9.036381,-1.956689,6.014395,-4.386883,6.936136,-0.791207,-1.334631,3.307838,-7.511688,0.481957,-2.885557,-5.438799,-8.288916,9.812909,3.908758,-7.545933,8.441827,2.758619,2.287978,-5.242910,9.605017,9.221191,-8.970376,-3.120654,8.338015,8.960800,0.589647,4.565293,5.968222,8.282371,0.195243,-3.650319,-9.637265,5.652749,0.052013,-0.103984,-1.444210,-4.527978,9.147553,-0.904517,8.599356,-9.328333,8.044828,-1.118715,6.547504,3.716991,6.707410,0.777379,-4.876169,-1.552709,-1.884928,-0.543151,-1.437946,-0.118994,-6.091672,-1.768576,-1.167856,-8.464403,2.969523,2.866532,-3.882843,6.179355,-8.476864,-7.363608,-1.900252,6.156477,8.890935,1.290892,-0.382687,6.591340,-0.100671,-7.417092,7.078644,-9.735536,7.406125,3.959639,4.691617,-5.267724,5.573226,-6.702322,6.756714,-5.223573,2.273930,-5.802243,5.011833,-9.645338,2.597783,1.127388,3.037412,0.527056,0.340823,2.461465,-5.820692,-7.262531,-8.844740,2.805884,-9.113863,-9.063327,0.873026,-0.988513,9.468547,5.328491,9.946525,8.426423,-8.780892,-8.452844,7.495954,-5.258937,9.663293,8.557158,3.112431,5.901465,-6.147342,-2.084983,-4.456118,3.823966,6.390624,-5.747486,3.008406,-5.058571,7.630926,6.602441,-8.180571,-7.922160,-6.331314,1.340477,-7.557535,-7.049691,-6.993050,-3.725080,4.967477,-2.214695,-7.617099,4.310017,-5.645907,-7.450954,-0.778352,-9.809587,8.328306,-7.369555,-7.154997,-1.391049,-1.016327,-7.412013,6.752933,2.027156,-8.501662,0.183334,1.612029,-6.466790,-0.986612,6.300061,-5.145779,8.714942,-9.875458,3.183952,7.517627,0.207258,-9.940325,0.939032,-2.723141,-1.620443,-0.566030,-7.189612,9.019342,-9.781054,6.269959,-6.265863,0.962035,4.812649,-5.389949,8.759745,-2.572791,5.402554,-9.838819,-1.758374,-0.639163,1.476575,7.900763,-8.868240,-1.311186,-5.262600,-1.511969,7.593209,0.686198,0.514531,0.071333,6.558940,0.176607,3.456946,4.521842,-8.692690,-8.082859,4.390245,7.154727,-2.867752,-5.438478,5.431751,-0.237265,-1.462614,-5.175340,6.348053,-8.906334,5.853427,6.648711,7.201012,7.991900,-2.505383,6.647115,0.749022,9.339613,-3.696331,-9.459060,-1.216993,-5.284240,-4.159170,-5.980779,4.711384,0.085181,-2.758402,2.117109,1.446638,-8.148966,-0.553594,5.647197,-7.371735,-7.178385,-0.538130,6.177358,5.249427,-7.410135,-6.951556,2.015147,7.248049,-4.386799,1.456179,-1.449273,-5.691968,8.766569,-2.599070,-7.524691,4.652221,-8.220870,-0.156399,3.325651,7.886568,5.903276,-8.018840,5.318220,1.329233,-2.388421,4.012314,-0.651861,1.445712,1.275568,-4.773870,-3.697699,-7.822163], dtype = "float64")#candidate|7911|(924,)|const|float64
call_7910 = relay.TupleGetItem(func_3254_call(relay.reshape(const_7911.astype('float64'), [11, 6, 14])), 0)
call_7912 = relay.TupleGetItem(func_3257_call(relay.reshape(const_7911.astype('float64'), [11, 6, 14])), 0)
output = relay.Tuple([call_7896,call_7910,const_7911,])
output2 = relay.Tuple([call_7897,call_7912,const_7911,])
func_7922 = relay.Function([], output)
mod['func_7922'] = func_7922
mod = relay.transform.InferType()(mod)
output = func_7922()
func_7923 = relay.Function([], output)
mutated_mod['func_7923'] = func_7923
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5050_call = mod.get_global_var('func_5050')
func_5052_call = mutated_mod.get_global_var('func_5052')
call_7963 = func_5050_call()
call_7964 = func_5050_call()
func_5899_call = mod.get_global_var('func_5899')
func_5901_call = mutated_mod.get_global_var('func_5901')
call_7971 = relay.TupleGetItem(func_5899_call(), 0)
call_7972 = relay.TupleGetItem(func_5901_call(), 0)
output = relay.Tuple([call_7963,call_7971,])
output2 = relay.Tuple([call_7964,call_7972,])
func_7985 = relay.Function([], output)
mod['func_7985'] = func_7985
mod = relay.transform.InferType()(mod)
mutated_mod['func_7985'] = func_7985
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7985_call = mutated_mod.get_global_var('func_7985')
call_7986 = func_7985_call()
output = call_7986
func_7987 = relay.Function([], output)
mutated_mod['func_7987'] = func_7987
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7649_call = mod.get_global_var('func_7649')
func_7650_call = mutated_mod.get_global_var('func_7650')
call_8065 = relay.TupleGetItem(func_7649_call(), 0)
call_8066 = relay.TupleGetItem(func_7650_call(), 0)
output = relay.Tuple([call_8065,])
output2 = relay.Tuple([call_8066,])
func_8067 = relay.Function([], output)
mod['func_8067'] = func_8067
mod = relay.transform.InferType()(mod)
output = func_8067()
func_8068 = relay.Function([], output)
mutated_mod['func_8068'] = func_8068
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8118 = relay.var("var_8118", dtype = "uint16", shape = ())#candidate|8118|()|var|uint16
const_8119 = relay.const([[[-7,-2,6,-3,-8,-1,4,-9,-4,-2,5,-5,-1,2,-3],[-3,-8,3,2,-4,-4,-1,5,-9,-1,5,-5,6,7,-9],[3,-3,7,-4,1,3,2,-4,-4,-7,-4,-2,3,4,6],[-2,-5,9,-10,5,10,9,-2,9,5,-10,6,-7,9,-9],[-5,5,6,2,-6,7,4,6,-10,3,-10,-4,4,7,3],[10,9,-7,-9,10,7,9,-5,9,-1,1,-5,2,-8,-5],[-7,10,2,10,8,9,9,-9,5,8,-10,1,-5,7,4],[-8,-8,-6,8,4,-7,-3,10,-1,-10,5,1,7,9,-1],[5,3,-8,4,6,-1,-8,1,6,5,2,-8,-5,1,1],[4,-1,-9,-5,-6,10,6,-4,8,-1,-8,4,-8,-10,-1],[-10,7,2,-2,-9,-10,8,9,-6,-1,-1,-4,4,-1,10],[5,9,-3,8,-1,-4,7,8,-3,4,-3,-5,-7,-8,3],[-4,-10,-10,7,-8,6,1,5,1,6,-6,-10,6,1,-8],[2,3,-7,6,-3,-2,8,2,3,-3,-9,-7,-1,-6,7],[-7,8,-2,4,-10,-2,-4,6,-4,-1,7,8,-9,-9,1],[3,-6,9,7,-7,8,9,-10,10,-5,4,3,8,-3,8]],[[-4,4,-3,7,4,-9,5,-8,5,10,-1,4,8,-5,-10],[7,-4,-3,1,9,5,-2,7,5,8,-4,4,10,-1,-3],[7,-4,-8,-8,-6,-8,4,-3,-8,3,-6,4,4,-1,10],[-7,-3,-8,7,-4,4,5,-2,10,-7,-5,-1,-4,-6,1],[1,2,6,-9,-9,-7,-4,2,-1,5,7,-2,10,5,-10],[-1,2,-7,5,-3,-6,7,5,6,-6,-3,-3,-3,-10,1],[3,-3,9,-5,-3,-9,1,10,9,-1,9,8,-8,6,-9],[9,1,9,1,4,-4,-4,-1,10,-4,-5,-4,6,-3,-1],[-9,6,-4,2,1,-9,9,10,10,1,3,-7,-10,9,5],[-8,4,-6,9,6,-4,-4,8,4,-6,-2,-1,-3,9,-6],[6,9,-8,-10,3,-4,9,-9,-2,7,-7,6,-7,3,-5],[-10,-1,-10,-6,-5,-4,-7,6,4,-10,-5,-9,7,2,-1],[8,-7,-4,7,9,10,-10,-8,2,4,2,-1,4,8,9],[-4,-3,-6,-10,-7,-5,-4,-4,1,6,-8,-9,-1,6,-9],[-9,1,-4,8,-10,-4,-10,1,-1,-9,-2,-5,-5,-3,6],[-7,-5,-8,5,-4,9,-1,-6,-2,-7,-2,-8,-9,5,-8]],[[-4,-7,-3,-9,-1,5,-10,-8,1,3,-2,6,-2,-5,-8],[10,-7,-2,-2,-1,3,2,2,-2,-1,-10,10,3,4,-10],[10,-6,-7,-9,9,-1,-6,8,2,-1,-2,5,9,-5,3],[-3,3,10,-8,-8,-9,-9,-1,-2,-4,-7,-6,-10,8,5],[-1,6,10,6,7,4,5,2,8,-3,9,-3,-2,-7,10],[-6,2,9,-10,-9,10,-4,5,-3,9,9,5,2,-7,-10],[1,-10,-7,-5,3,-5,-5,10,-4,5,10,-1,8,-6,10],[-3,-3,-4,-3,9,-2,1,-3,9,5,-1,10,3,3,4],[-5,-6,10,-9,2,-9,2,2,-10,-5,7,-3,5,-6,3],[-4,6,7,4,9,5,10,9,-5,3,5,3,8,1,-8],[3,-5,4,7,9,3,5,1,5,2,-3,9,-4,-6,10],[-3,6,4,-1,9,4,-4,-5,-2,1,8,10,4,4,-2],[3,-9,-5,-8,-1,-8,9,5,-9,6,-10,7,-4,7,10],[2,5,2,-2,8,-7,10,8,-10,2,-8,2,4,6,-2],[1,10,5,7,2,3,-2,5,-10,-9,-3,-7,-4,-1,-2],[-9,-8,10,10,-5,3,-4,-2,-4,-6,-5,2,5,2,-8]],[[-8,-1,7,2,-1,2,4,8,6,8,-9,-2,4,-8,-1],[5,5,-8,7,2,8,1,-1,-7,5,9,-6,-4,6,9],[10,1,-9,-10,10,4,7,7,8,-4,-9,6,2,6,-4],[9,8,-1,-8,3,4,-3,7,-8,-6,-8,3,-10,6,7],[2,3,-6,7,7,2,-9,10,-7,-1,-1,9,2,3,5],[7,-5,-9,7,5,-8,-5,3,5,6,-4,2,2,-1,2],[-4,5,-9,2,-2,2,-5,-9,2,8,-9,-6,-4,-6,3],[4,7,1,-6,6,2,-10,-2,-7,2,-6,-8,1,-1,8],[5,5,1,-1,-9,-7,-2,-1,-5,-3,-6,7,1,7,-4],[-10,-8,2,9,8,-10,-10,-1,9,1,-2,-10,10,-6,-5],[-5,3,10,-5,-1,-8,10,-5,10,5,-7,8,-6,1,7],[-6,3,-6,-7,3,-5,-10,8,6,-9,-1,9,-4,-8,-1],[-2,-9,-6,-9,7,-2,-10,9,-8,-8,-7,-3,-8,3,3],[5,9,-10,9,10,1,10,6,1,-6,1,10,2,-1,8],[-7,9,6,-4,1,3,-8,5,-4,-6,-7,-6,10,-7,-10],[-7,7,-4,-7,8,-4,2,-5,4,3,-4,10,9,5,-3]],[[2,-4,7,-4,8,-4,4,-4,3,10,9,-6,3,9,3],[5,-3,4,10,-4,-9,-3,-4,-4,5,3,-8,-3,6,1],[7,3,-6,9,7,6,-2,1,-6,-3,8,4,-4,-7,10],[-10,-3,-6,1,8,-1,-6,-3,-10,-1,-9,8,-3,2,-5],[-9,1,9,2,5,8,4,8,2,-8,3,-9,3,-5,3],[9,-6,-3,-8,-5,-3,-8,8,6,-5,2,-2,-9,3,9],[-8,8,-7,-1,4,-9,-10,7,4,-9,-8,9,9,4,-3],[-10,1,7,6,4,-3,-10,1,-10,-1,-8,-7,8,4,-10],[8,10,-7,-7,4,-5,-8,9,-2,-6,5,9,-10,1,-2],[-1,-10,-10,-9,-10,-2,-9,9,10,6,-2,2,6,-2,-4],[-8,7,-7,5,-5,8,-9,8,8,9,7,-6,7,-1,-8],[5,3,4,-10,5,-3,3,-3,-1,-2,-4,4,-10,-3,-1],[-7,5,-8,-9,7,4,-8,-3,9,-1,-6,1,-4,-2,3],[7,10,1,2,-6,5,-8,-8,-5,5,-9,-10,3,-3,-2],[8,8,3,6,9,-4,-4,7,-5,1,8,-3,2,6,-10],[-4,10,-6,1,-8,-8,5,5,5,6,-10,-6,7,-8,5]],[[-1,-6,-1,4,8,4,-4,-7,-3,-9,-8,7,3,-2,-7],[10,-8,-1,-3,-2,-8,-5,7,1,4,-1,10,-6,2,-5],[7,-8,-6,-5,-5,7,5,-6,-6,2,-7,-2,-5,-2,-10],[-7,-4,1,8,-6,3,6,7,-10,-9,3,-9,2,7,10],[-1,-4,4,5,-3,6,-6,4,6,-6,-8,10,-8,-9,6],[-2,-8,4,-2,-5,1,1,-4,3,-8,-5,-2,4,-9,4],[-4,-6,1,-6,10,7,3,-1,2,-6,-4,9,-8,-5,7],[4,-4,-6,10,-9,1,2,-2,10,-6,4,-9,-6,-5,-4],[10,6,8,-8,-1,-9,-3,-8,-1,-8,-7,6,7,-1,-3],[-7,-4,-7,-2,-3,4,-7,10,-1,-6,-9,-3,-6,-9,5],[5,6,-4,4,-10,2,8,2,-7,-10,-3,-5,-5,7,2],[-7,5,-6,6,6,6,1,-9,1,-5,-10,-1,-5,10,10],[5,8,-1,-10,4,-3,5,-4,7,2,-8,2,-7,-6,10],[-8,-5,6,1,-3,3,-7,1,3,-7,-2,7,-4,1,-1],[6,-8,6,-7,2,-3,-7,3,2,-6,3,3,3,6,7],[-7,-7,-4,-10,1,10,-7,2,4,10,-2,9,-4,-5,6]],[[-8,-5,-7,9,9,-1,3,7,-10,1,1,4,3,10,-8],[9,9,-2,-2,-6,-2,1,7,-3,7,6,9,7,9,9],[-4,-3,2,-9,-8,-9,-4,-6,-8,-7,-4,4,4,-7,-9],[-10,7,-5,-9,-5,-1,-7,-5,-5,5,10,6,5,5,3],[-10,-8,4,-6,-10,-2,-7,8,-6,-7,-9,-10,-10,5,9],[-3,8,-6,5,-9,-6,5,-2,7,10,-8,-8,-3,5,8],[-3,5,-10,-6,-6,9,-8,7,-1,-7,-6,-9,-5,-5,-8],[8,-3,5,-5,-10,7,-5,6,-6,-4,-8,-10,-7,1,9],[6,-3,10,4,-10,-10,-2,4,7,-4,3,-3,3,9,-3],[-3,6,10,3,-5,6,2,10,-7,5,10,-5,10,5,2],[-10,1,-1,5,-4,-7,-6,8,4,-5,-9,5,-9,4,6],[4,-10,-3,-5,-5,9,-9,2,10,-5,2,-9,-9,-6,2],[10,-10,-2,-3,1,6,-1,-4,-4,-8,-1,-4,1,-1,-8],[-1,-1,-1,3,-10,2,-4,-2,-8,5,3,6,8,-1,-4],[-4,-7,5,-7,-2,5,-6,-10,9,3,4,2,3,9,9],[-5,8,7,2,4,-5,-1,-7,-7,9,-2,6,-2,2,-7]],[[7,-5,5,-10,5,2,-10,1,4,-6,8,5,-10,6,-10],[-4,-6,2,10,-8,-6,7,5,-5,-7,-3,7,-2,-7,-10],[1,6,4,9,-1,-10,-9,-5,6,3,-9,10,-4,-6,1],[2,1,-9,9,10,7,7,9,-10,9,8,-2,7,-1,9],[-8,-3,-10,-7,-2,-8,-7,5,-6,2,-10,7,-1,8,-9],[5,9,-8,2,-9,-2,-1,4,6,-1,-7,-9,3,-3,3],[7,9,5,4,-5,-10,-9,-8,9,5,2,-2,-8,-10,-5],[3,8,5,-3,1,-3,-7,-5,7,8,-5,4,9,2,3],[2,-7,-1,-6,-5,-2,-9,1,3,8,-8,2,-10,-3,10],[-2,-5,-5,-3,-1,-9,7,4,-1,-7,-10,2,6,3,-6],[9,-7,9,1,4,-2,-8,10,8,1,-2,10,-1,8,10],[-8,4,-3,9,6,-7,6,-9,7,10,3,-9,6,3,-5],[-7,-10,-8,5,7,9,-10,-9,-3,-8,-4,-3,-6,-4,-2],[-2,2,2,-4,-5,6,5,1,7,-10,-7,8,7,10,4],[10,10,7,10,-7,-2,-3,3,1,-7,6,5,-5,-9,6],[4,-9,-6,6,-8,4,-8,-7,8,10,8,3,-10,-8,1]],[[4,7,-2,2,2,-3,-1,1,3,-5,9,8,7,-8,9],[-8,-9,-10,2,10,-3,-8,5,2,1,10,-1,1,8,-2],[1,4,6,2,6,-10,5,3,9,8,3,1,-8,-1,-2],[-5,-4,2,1,-8,5,5,-9,-2,2,-10,9,8,-2,4],[-3,-8,8,-8,5,7,7,-10,10,5,-3,8,6,7,-6],[-1,-10,9,10,-10,-5,-3,-8,-9,6,-2,-10,-8,8,-4],[8,5,-6,-7,-2,-9,3,1,6,2,5,10,-6,-2,6],[9,1,2,-8,2,-6,-9,3,-10,2,-3,-8,2,1,-8],[-10,-1,-3,-6,1,-3,1,4,3,-2,-8,4,8,-9,2],[8,-6,-10,-1,2,-6,-7,-10,-10,-8,8,9,-1,-7,-8],[10,10,-4,-5,-9,-6,-5,-4,7,7,-10,1,-8,8,5],[-6,-1,-10,-9,9,3,4,10,2,6,3,8,-5,4,-4],[1,-3,6,-9,-8,2,-6,1,6,5,5,-8,-10,9,-8],[3,5,-2,-9,6,9,-1,6,-3,5,6,4,5,7,-9],[9,2,10,-6,5,6,-2,3,9,4,-3,-8,-2,-2,8],[-2,5,-2,-10,-4,10,2,-9,4,10,3,-6,-2,-5,5]],[[-6,-2,-5,-6,3,-1,-1,7,-8,9,-6,-1,5,-1,10],[4,7,8,2,-6,-3,-10,-9,-6,9,-5,8,-9,1,-3],[-8,-8,-3,-6,8,2,6,-10,10,-4,-9,-3,-6,2,-4],[10,-2,-8,5,-1,-3,-8,4,6,2,-10,8,10,8,5],[6,6,6,-6,8,-3,10,-2,9,-8,-7,-4,6,2,7],[-7,-3,-3,-7,-9,6,-5,-5,-3,-4,-3,-1,-7,10,-2],[7,10,-4,-8,-1,5,-8,6,-9,6,-9,-4,8,9,1],[7,-3,-7,-9,8,-1,-9,-5,-2,3,-6,1,-5,3,8],[-7,3,1,7,-4,-2,-7,-4,8,-7,-4,-3,6,3,-4],[-5,-6,-3,8,-7,-6,-5,-3,-7,5,-10,-10,-5,3,-8],[-10,1,1,3,7,-4,-10,-6,-10,-4,1,-3,8,-9,-7],[-1,-2,-1,8,4,3,-8,7,-7,-1,1,4,-2,3,5],[-10,4,-9,-5,-10,-4,-7,7,-8,-10,-3,8,-6,-2,-4],[8,1,6,-1,-1,-9,4,-7,1,-7,-4,-1,-10,7,-5],[-6,6,7,1,2,8,5,9,-7,9,1,-4,8,-1,-3],[5,-3,9,3,-9,10,-8,1,8,10,-10,1,-5,-6,-3]],[[7,8,-8,-10,-5,-6,6,1,-5,-5,-6,-8,-7,-7,1],[1,5,8,6,-4,8,-5,6,-4,-5,-8,2,-10,-8,3],[7,9,-5,5,6,-2,9,-1,-5,8,3,-3,-1,-3,1],[10,2,-2,-6,-6,-6,9,8,-2,6,-3,7,4,-2,-9],[-7,-3,-8,-3,9,9,10,1,-1,-10,-5,7,-10,2,-2],[-5,1,7,10,-6,-1,-6,-6,-8,-2,-5,9,8,5,-1],[2,7,1,-3,-3,-4,5,-5,9,-9,2,-7,-5,2,7],[-10,-7,-10,-10,3,-3,10,-7,2,-10,8,-2,3,-1,1],[8,5,-6,-8,-2,-2,8,-5,-8,-2,8,8,-4,-9,-8],[3,10,5,-6,4,4,3,7,8,6,4,9,-2,-7,-9],[1,-2,1,9,-10,3,9,7,-5,3,-6,-3,-1,9,-10],[-2,10,2,-1,9,1,7,-10,-10,-9,6,10,-10,8,8],[8,9,-3,-9,9,8,-10,2,9,-6,-4,4,6,6,3],[-4,-3,-9,3,3,-4,3,-7,-7,-6,-7,-9,-6,-6,1],[-6,10,-9,6,-5,-3,1,4,-1,-4,-5,-9,1,9,10],[7,-8,-3,-4,-10,-9,9,-9,8,7,10,3,6,9,-3]],[[9,2,7,-4,-8,1,7,5,-4,-9,5,2,-1,3,-6],[-8,6,-4,-9,3,3,3,5,-10,-3,1,10,-5,4,2],[4,-6,-10,-3,-9,4,-10,3,-7,6,4,7,1,-7,-1],[4,7,-6,-8,-5,5,8,8,-1,-6,4,-4,-6,-2,9],[-9,7,-3,-4,3,-10,1,-4,-1,4,1,9,-7,-2,7],[-2,-6,-4,-3,-2,8,-5,-9,-7,-3,10,-7,1,6,-4],[-7,-1,5,-10,4,5,3,10,-8,-6,8,-6,7,-10,3],[9,-10,2,6,6,-5,3,-2,4,1,-2,6,-3,-9,7],[9,-1,6,4,5,-3,2,10,10,3,-2,10,5,2,-8],[-6,-4,-4,2,4,10,10,1,6,-4,3,-6,-7,-6,-4],[7,-9,-9,-3,5,-10,5,6,10,9,1,-3,5,-7,-8],[-5,-3,7,-1,4,-8,-2,-4,8,10,-1,9,9,3,-5],[9,5,-6,5,-3,-3,1,3,-4,1,-8,9,6,1,4],[-2,6,2,-2,-9,-5,-5,10,4,-10,-9,7,6,-6,3],[-5,-10,4,4,10,-10,-8,3,-4,-1,2,-3,-8,2,-7],[3,-2,2,-8,10,10,2,5,-3,4,3,3,-5,-2,6]],[[-4,1,5,-1,-8,10,-1,3,8,6,9,8,-3,5,-1],[-7,4,-10,9,-2,2,-4,-4,10,-4,-6,6,-9,8,-4],[-6,6,9,1,-9,7,-2,-6,-2,8,5,-1,7,-7,3],[-6,4,-3,9,-1,6,2,10,4,-4,-8,-8,7,-8,-2],[8,3,9,-5,9,-9,-5,-3,-8,-5,-1,1,-1,-5,-7],[-3,5,8,-2,-6,-8,-6,-7,8,-7,-10,-7,10,-1,8],[-3,4,-6,4,3,1,-7,8,7,1,-8,-6,2,-2,10],[3,-2,-3,-9,-8,-9,8,9,9,-10,2,1,-3,-4,10],[-7,-9,-1,-9,9,5,-10,3,-8,3,-5,8,-3,-3,-7],[10,7,5,2,-2,-3,9,9,1,4,-5,-1,7,3,-2],[4,-4,-3,-10,-3,8,-9,-9,6,-6,-6,-1,4,-4,9],[-7,9,-3,2,-1,-8,-1,3,7,-10,2,-6,2,3,8],[1,3,9,-6,1,-6,-4,6,-6,7,-8,9,-3,3,-8],[-8,-8,-1,-8,10,2,-10,10,4,-1,-2,-1,10,-4,10],[5,1,8,2,6,-7,7,-7,-3,3,-1,2,5,-5,-6],[1,10,9,-1,-4,-5,7,8,9,4,-5,8,-8,1,4]],[[-6,-1,6,-4,2,-7,-1,-9,8,-10,1,-9,5,5,-9],[-3,5,-3,5,1,-7,6,-3,-7,-2,-5,-4,-5,-2,-7],[9,-7,-6,-9,-8,-8,-7,3,9,2,8,-6,4,3,10],[-8,-10,7,-7,-4,-5,2,-9,3,-6,9,4,8,7,-3],[-1,-9,-8,-4,-1,4,3,1,2,1,-10,-5,8,-10,5],[3,6,5,-6,-1,-9,4,-2,5,-8,-5,7,-3,-1,1],[8,-2,-5,10,-7,-10,-7,-10,9,4,-2,-8,-7,5,5],[6,9,10,6,-7,3,1,4,-1,-5,-2,4,-7,2,2],[9,1,-7,-1,-2,-8,-6,7,10,-2,-2,3,6,-10,-3],[6,-10,7,-1,-4,9,-8,-1,-6,4,6,-4,-4,9,1],[-6,-4,-7,8,1,8,4,-6,4,7,-10,6,2,-6,-5],[4,5,10,9,7,9,-2,5,9,-2,7,-9,-7,2,3],[2,9,-5,7,-8,-6,4,-4,-9,-8,9,-2,8,-1,-5],[-8,-4,-4,7,-7,-8,5,-2,-10,-2,-2,4,1,-7,2],[9,-9,-10,-5,4,3,-4,5,5,-1,-4,8,-8,9,1],[7,5,4,9,-2,1,9,4,-3,9,-8,6,-10,4,2]],[[-3,7,7,3,9,2,-1,-7,-3,5,-4,-5,-8,-9,-6],[-10,-3,9,6,-7,9,7,8,-6,4,-5,4,-3,6,-7],[-4,-1,3,7,2,-8,-1,3,-9,-2,-10,-5,8,-1,1],[-7,6,-2,-8,10,-4,2,-3,7,-4,9,8,2,-4,-2],[-10,10,7,-7,-2,6,5,-1,1,-10,-9,-10,-3,-6,-5],[1,-9,3,4,10,9,2,-4,-10,-3,1,-1,2,5,-10],[6,8,-2,-1,3,4,7,-3,3,7,6,-9,-9,1,-8],[-4,4,-10,-3,7,-2,7,7,4,5,-7,7,10,-8,10],[3,10,4,-8,-1,-4,-3,6,-2,1,10,-10,5,-5,-2],[7,-8,5,-7,10,5,4,-6,-10,-1,-6,1,9,8,9],[6,-5,4,-6,-2,-2,-2,-7,-7,7,-1,8,-10,10,-1],[-8,-6,3,5,-5,-8,6,-5,8,-1,9,-7,4,6,-5],[-2,7,-10,-1,2,3,-5,1,1,2,-4,4,2,9,9],[-6,-1,-2,-3,-5,1,4,7,7,-5,-2,2,10,-1,3],[-5,4,1,-8,-8,-7,10,-4,7,9,-10,10,-4,-9,9],[8,10,1,-9,-6,-1,6,6,-10,-1,6,-9,-7,-5,9]],[[-6,-10,-2,-8,8,-6,8,-10,-1,-9,9,-6,-10,-1,-9],[10,1,2,1,-2,5,-7,9,-9,-10,-5,-4,9,-3,-2],[5,8,2,-9,1,1,9,-10,7,-3,10,8,-8,-9,-7],[3,-2,8,-2,-8,-8,10,-9,8,-2,3,-8,5,7,-6],[6,8,4,-4,1,-1,1,6,4,5,6,9,8,1,9],[-2,9,-2,4,-9,-8,-5,4,8,-9,7,3,-1,-9,6],[10,-2,6,3,-10,8,-3,-6,6,6,-8,-1,8,-2,4],[6,6,4,1,-3,-10,-8,3,1,-9,5,1,-8,9,5],[-6,7,8,-3,9,-2,8,-1,6,-10,-10,-2,-10,9,10],[3,6,7,3,6,9,-8,-8,6,2,10,-1,-4,-5,-2],[-10,1,7,1,10,-2,5,-4,3,-10,-7,9,-5,9,-8],[2,-6,-4,-1,-4,4,9,-8,-6,-4,5,7,9,9,-9],[-7,-4,6,-5,-7,-7,5,-2,-1,-5,5,8,6,-3,5],[9,-6,4,-3,8,-8,-10,-3,7,3,10,-3,-1,6,-3],[7,-3,-7,5,-6,7,-10,-8,-9,6,10,-1,6,2,-5],[3,7,7,2,3,6,3,-6,8,9,-9,-2,10,2,10]]], dtype = "uint16")#candidate|8119|(16, 16, 15)|const|uint16
bop_8120 = relay.bitwise_or(var_8118.astype('uint16'), const_8119.astype('uint16')) # shape=(16, 16, 15)
output = relay.Tuple([bop_8120,])
output2 = relay.Tuple([bop_8120,])
func_8130 = relay.Function([var_8118,], output)
mod['func_8130'] = func_8130
mod = relay.transform.InferType()(mod)
mutated_mod['func_8130'] = func_8130
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8131 = relay.var("var_8131", dtype = "uint16", shape = ())#candidate|8131|()|var|uint16
func_8130_call = mutated_mod.get_global_var('func_8130')
call_8132 = func_8130_call(var_8131)
output = call_8132
func_8133 = relay.Function([var_8131], output)
mutated_mod['func_8133'] = func_8133
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6785_call = mod.get_global_var('func_6785')
func_6786_call = mutated_mod.get_global_var('func_6786')
call_8143 = func_6785_call()
call_8144 = func_6785_call()
func_7812_call = mod.get_global_var('func_7812')
func_7814_call = mutated_mod.get_global_var('func_7814')
call_8149 = func_7812_call()
call_8150 = func_7812_call()
func_7024_call = mod.get_global_var('func_7024')
func_7026_call = mutated_mod.get_global_var('func_7026')
call_8159 = func_7024_call()
call_8160 = func_7024_call()
output = relay.Tuple([call_8143,call_8149,call_8159,])
output2 = relay.Tuple([call_8144,call_8150,call_8160,])
func_8168 = relay.Function([], output)
mod['func_8168'] = func_8168
mod = relay.transform.InferType()(mod)
mutated_mod['func_8168'] = func_8168
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8168_call = mutated_mod.get_global_var('func_8168')
call_8169 = func_8168_call()
output = call_8169
func_8170 = relay.Function([], output)
mutated_mod['func_8170'] = func_8170
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6737_call = mod.get_global_var('func_6737')
func_6738_call = mutated_mod.get_global_var('func_6738')
call_8245 = func_6737_call()
call_8246 = func_6737_call()
output = call_8245
output2 = call_8246
func_8249 = relay.Function([], output)
mod['func_8249'] = func_8249
mod = relay.transform.InferType()(mod)
mutated_mod['func_8249'] = func_8249
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8249_call = mutated_mod.get_global_var('func_8249')
call_8250 = func_8249_call()
output = call_8250
func_8251 = relay.Function([], output)
mutated_mod['func_8251'] = func_8251
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8274 = relay.var("var_8274", dtype = "float64", shape = (5, 11, 12))#candidate|8274|(5, 11, 12)|var|float64
uop_8275 = relay.log(var_8274.astype('float64')) # shape=(5, 11, 12)
output = uop_8275
output2 = uop_8275
func_8281 = relay.Function([var_8274,], output)
mod['func_8281'] = func_8281
mod = relay.transform.InferType()(mod)
var_8282 = relay.var("var_8282", dtype = "float64", shape = (5, 11, 12))#candidate|8282|(5, 11, 12)|var|float64
output = func_8281(var_8282)
func_8283 = relay.Function([var_8282], output)
mutated_mod['func_8283'] = func_8283
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6748_call = mod.get_global_var('func_6748')
func_6750_call = mutated_mod.get_global_var('func_6750')
call_8357 = relay.TupleGetItem(func_6748_call(), 0)
call_8358 = relay.TupleGetItem(func_6750_call(), 0)
uop_8361 = relay.exp(call_8357.astype('float64')) # shape=(11, 9, 3)
uop_8363 = relay.exp(call_8358.astype('float64')) # shape=(11, 9, 3)
func_7081_call = mod.get_global_var('func_7081')
func_7083_call = mutated_mod.get_global_var('func_7083')
call_8366 = relay.TupleGetItem(func_7081_call(), 0)
call_8367 = relay.TupleGetItem(func_7083_call(), 0)
output = relay.Tuple([uop_8361,call_8366,])
output2 = relay.Tuple([uop_8363,call_8367,])
func_8373 = relay.Function([], output)
mod['func_8373'] = func_8373
mod = relay.transform.InferType()(mod)
output = func_8373()
func_8374 = relay.Function([], output)
mutated_mod['func_8374'] = func_8374
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7032_call = mod.get_global_var('func_7032')
func_7034_call = mutated_mod.get_global_var('func_7034')
call_8411 = func_7032_call()
call_8412 = func_7032_call()
output = relay.Tuple([call_8411,])
output2 = relay.Tuple([call_8412,])
func_8413 = relay.Function([], output)
mod['func_8413'] = func_8413
mod = relay.transform.InferType()(mod)
output = func_8413()
func_8414 = relay.Function([], output)
mutated_mod['func_8414'] = func_8414
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6956_call = mod.get_global_var('func_6956')
func_6958_call = mutated_mod.get_global_var('func_6958')
call_8421 = relay.TupleGetItem(func_6956_call(), 0)
call_8422 = relay.TupleGetItem(func_6958_call(), 0)
output = call_8421
output2 = call_8422
func_8430 = relay.Function([], output)
mod['func_8430'] = func_8430
mod = relay.transform.InferType()(mod)
mutated_mod['func_8430'] = func_8430
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8430_call = mutated_mod.get_global_var('func_8430')
call_8431 = func_8430_call()
output = call_8431
func_8432 = relay.Function([], output)
mutated_mod['func_8432'] = func_8432
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4286_call = mod.get_global_var('func_4286')
func_4287_call = mutated_mod.get_global_var('func_4287')
call_8468 = relay.TupleGetItem(func_4286_call(), 0)
call_8469 = relay.TupleGetItem(func_4287_call(), 0)
func_5716_call = mod.get_global_var('func_5716')
func_5718_call = mutated_mod.get_global_var('func_5718')
call_8489 = relay.TupleGetItem(func_5716_call(), 0)
call_8490 = relay.TupleGetItem(func_5718_call(), 0)
output = relay.Tuple([call_8468,call_8489,])
output2 = relay.Tuple([call_8469,call_8490,])
func_8500 = relay.Function([], output)
mod['func_8500'] = func_8500
mod = relay.transform.InferType()(mod)
mutated_mod['func_8500'] = func_8500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8500_call = mutated_mod.get_global_var('func_8500')
call_8501 = func_8500_call()
output = call_8501
func_8502 = relay.Function([], output)
mutated_mod['func_8502'] = func_8502
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3706_call = mod.get_global_var('func_3706')
func_3708_call = mutated_mod.get_global_var('func_3708')
call_8520 = relay.TupleGetItem(func_3706_call(), 0)
call_8521 = relay.TupleGetItem(func_3708_call(), 0)
output = relay.Tuple([call_8520,])
output2 = relay.Tuple([call_8521,])
func_8524 = relay.Function([], output)
mod['func_8524'] = func_8524
mod = relay.transform.InferType()(mod)
mutated_mod['func_8524'] = func_8524
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8524_call = mutated_mod.get_global_var('func_8524')
call_8525 = func_8524_call()
output = call_8525
func_8526 = relay.Function([], output)
mutated_mod['func_8526'] = func_8526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7081_call = mod.get_global_var('func_7081')
func_7083_call = mutated_mod.get_global_var('func_7083')
call_8527 = relay.TupleGetItem(func_7081_call(), 0)
call_8528 = relay.TupleGetItem(func_7083_call(), 0)
func_4263_call = mod.get_global_var('func_4263')
func_4264_call = mutated_mod.get_global_var('func_4264')
call_8533 = func_4263_call()
call_8534 = func_4263_call()
output = relay.Tuple([call_8527,call_8533,])
output2 = relay.Tuple([call_8528,call_8534,])
func_8539 = relay.Function([], output)
mod['func_8539'] = func_8539
mod = relay.transform.InferType()(mod)
output = func_8539()
func_8540 = relay.Function([], output)
mutated_mod['func_8540'] = func_8540
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7507_call = mod.get_global_var('func_7507')
func_7508_call = mutated_mod.get_global_var('func_7508')
call_8690 = func_7507_call()
call_8691 = func_7507_call()
output = relay.Tuple([call_8690,])
output2 = relay.Tuple([call_8691,])
func_8697 = relay.Function([], output)
mod['func_8697'] = func_8697
mod = relay.transform.InferType()(mod)
output = func_8697()
func_8698 = relay.Function([], output)
mutated_mod['func_8698'] = func_8698
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8539_call = mod.get_global_var('func_8539')
func_8540_call = mutated_mod.get_global_var('func_8540')
call_8712 = relay.TupleGetItem(func_8539_call(), 1)
call_8713 = relay.TupleGetItem(func_8540_call(), 1)
func_216_call = mod.get_global_var('func_216')
func_220_call = mutated_mod.get_global_var('func_220')
const_8720 = relay.const(5.292619, dtype = "float32")#candidate|8720|()|const|float32
var_8721 = relay.var("var_8721", dtype = "int16", shape = (11, 2))#candidate|8721|(11, 2)|var|int16
var_8722 = relay.var("var_8722", dtype = "int16", shape = (308,))#candidate|8722|(308,)|var|int16
call_8719 = relay.TupleGetItem(func_216_call(relay.reshape(const_8720.astype('float32'), []), relay.reshape(var_8721.astype('int16'), [22,]), relay.reshape(var_8722.astype('int16'), [308,]), ), 3)
call_8723 = relay.TupleGetItem(func_220_call(relay.reshape(const_8720.astype('float32'), []), relay.reshape(var_8721.astype('int16'), [22,]), relay.reshape(var_8722.astype('int16'), [308,]), ), 3)
func_2741_call = mod.get_global_var('func_2741')
func_2744_call = mutated_mod.get_global_var('func_2744')
var_8725 = relay.var("var_8725", dtype = "float32", shape = (81,))#candidate|8725|(81,)|var|float32
call_8724 = func_2741_call(relay.reshape(var_8725.astype('float32'), [9, 9, 1]))
call_8726 = func_2741_call(relay.reshape(var_8725.astype('float32'), [9, 9, 1]))
output = relay.Tuple([call_8712,call_8719,const_8720,var_8721,var_8722,call_8724,var_8725,])
output2 = relay.Tuple([call_8713,call_8723,const_8720,var_8721,var_8722,call_8726,var_8725,])
func_8727 = relay.Function([var_8721,var_8722,var_8725,], output)
mod['func_8727'] = func_8727
mod = relay.transform.InferType()(mod)
mutated_mod['func_8727'] = func_8727
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8727_call = mutated_mod.get_global_var('func_8727')
var_8729 = relay.var("var_8729", dtype = "int16", shape = (11, 2))#candidate|8729|(11, 2)|var|int16
var_8730 = relay.var("var_8730", dtype = "int16", shape = (308,))#candidate|8730|(308,)|var|int16
var_8731 = relay.var("var_8731", dtype = "float32", shape = (81,))#candidate|8731|(81,)|var|float32
call_8728 = func_8727_call(var_8729,var_8730,var_8731,)
output = call_8728
func_8732 = relay.Function([var_8729,var_8730,var_8731,], output)
mutated_mod['func_8732'] = func_8732
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5050_call = mod.get_global_var('func_5050')
func_5052_call = mutated_mod.get_global_var('func_5052')
call_8760 = func_5050_call()
call_8761 = func_5050_call()
func_6785_call = mod.get_global_var('func_6785')
func_6786_call = mutated_mod.get_global_var('func_6786')
call_8763 = func_6785_call()
call_8764 = func_6785_call()
output = relay.Tuple([call_8760,call_8763,])
output2 = relay.Tuple([call_8761,call_8764,])
func_8797 = relay.Function([], output)
mod['func_8797'] = func_8797
mod = relay.transform.InferType()(mod)
output = func_8797()
func_8798 = relay.Function([], output)
mutated_mod['func_8798'] = func_8798
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3581_call = mod.get_global_var('func_3581')
func_3583_call = mutated_mod.get_global_var('func_3583')
call_8807 = func_3581_call()
call_8808 = func_3581_call()
output = call_8807
output2 = call_8808
func_8813 = relay.Function([], output)
mod['func_8813'] = func_8813
mod = relay.transform.InferType()(mod)
output = func_8813()
func_8814 = relay.Function([], output)
mutated_mod['func_8814'] = func_8814
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4826_call = mod.get_global_var('func_4826')
func_4828_call = mutated_mod.get_global_var('func_4828')
call_8873 = relay.TupleGetItem(func_4826_call(), 0)
call_8874 = relay.TupleGetItem(func_4828_call(), 0)
output = call_8873
output2 = call_8874
func_8889 = relay.Function([], output)
mod['func_8889'] = func_8889
mod = relay.transform.InferType()(mod)
output = func_8889()
func_8890 = relay.Function([], output)
mutated_mod['func_8890'] = func_8890
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8524_call = mod.get_global_var('func_8524')
func_8526_call = mutated_mod.get_global_var('func_8526')
call_8894 = relay.TupleGetItem(func_8524_call(), 0)
call_8895 = relay.TupleGetItem(func_8526_call(), 0)
output = relay.Tuple([call_8894,])
output2 = relay.Tuple([call_8895,])
func_8899 = relay.Function([], output)
mod['func_8899'] = func_8899
mod = relay.transform.InferType()(mod)
output = func_8899()
func_8900 = relay.Function([], output)
mutated_mod['func_8900'] = func_8900
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6748_call = mod.get_global_var('func_6748')
func_6750_call = mutated_mod.get_global_var('func_6750')
call_8903 = relay.TupleGetItem(func_6748_call(), 0)
call_8904 = relay.TupleGetItem(func_6750_call(), 0)
func_7922_call = mod.get_global_var('func_7922')
func_7923_call = mutated_mod.get_global_var('func_7923')
call_8905 = relay.TupleGetItem(func_7922_call(), 1)
call_8906 = relay.TupleGetItem(func_7923_call(), 1)
var_8909 = relay.var("var_8909", dtype = "float64", shape = (11, 6, 14))#candidate|8909|(11, 6, 14)|var|float64
bop_8910 = relay.subtract(call_8905.astype('int8'), relay.reshape(var_8909.astype('int8'), relay.shape_of(call_8905))) # shape=(11, 6, 14)
bop_8913 = relay.subtract(call_8906.astype('int8'), relay.reshape(var_8909.astype('int8'), relay.shape_of(call_8906))) # shape=(11, 6, 14)
func_3901_call = mod.get_global_var('func_3901')
func_3903_call = mutated_mod.get_global_var('func_3903')
const_8923 = relay.const([9.333179,-8.475619,-4.288996,-3.432400,2.620729,-5.115794,-3.631610,3.595073,2.350206,7.610737,2.634590,3.124818,7.559232,6.893198,2.719433,-0.971183,2.129872,-2.924343,5.038165,-5.117974,8.256098,-7.457020,-2.279824,0.455891,-7.762613,-8.617895,2.557504,-2.141266,-8.322713,9.359274,-4.590808,-1.183201,-0.175147,-3.802329,1.169263,-1.749477,3.696834,-8.666205,3.083144,-8.690038,-6.479250,7.441091,-5.601648,3.921255,4.708141,-1.951140,-6.732202,3.133969,9.757005,-0.850795,1.604104,4.745765,9.393796,-1.973018,-1.527429,9.851076,-1.184981,-7.151036,-3.785354,5.620141,5.779734,4.682845,-9.426724,-9.778515,-8.783500,9.117292,-2.997577,1.897600,-7.927083,-4.466644,-3.717993,-9.975029,-9.531616,4.324115,-4.929000,7.865320,-1.043337,6.136279,6.785033,1.729350,9.147474,7.559714,7.270408,5.373786,1.002903,-2.179431,5.982794,-9.996332,-1.927398,-5.758803,-6.234433,-5.221033,2.558706,4.279718,3.227372,-5.017094,0.436603,-5.627502,-7.159403,6.098252,6.494246,0.454091,-6.086842,1.496979,3.410725,8.684503,4.183532,9.077312,0.546921,5.127671,7.999302,1.854067,-0.606973,6.748003,-5.417635,-5.681845,4.912244,-3.673051,3.795695,-2.445895,-1.821727,-0.355224,0.130320,-8.351577,-8.781357,4.812564,9.874685,5.671784,6.091065,5.023974,8.203313,3.893842,7.775611,-1.485101,4.609480,-6.554732,-9.425005,3.953886,-6.935851,-2.779154,-1.818163,-0.703823,6.887899,6.609765,-5.622637,-8.747633,-1.300995,-5.892462,8.234651,-3.498084,9.519801,-8.745400,4.763146,8.126895,4.361629,-3.599182,-2.037452,-8.263809,-6.221123,-5.002871,-4.267196,-6.302067,-9.710244,-4.212670,4.807085,7.045240,4.938952,-7.302227,6.786069,-5.863496,-4.706975,-8.190145,3.413505,-3.188896,-9.122834,7.342362,0.574826,6.888873,-2.216384,2.930463,-0.610833,0.353992,0.586717,-3.626643,5.693138,8.360838,-9.413161,-1.845233,-5.637898,3.248134,0.357012,9.206131,8.525275,4.010539,3.146989,7.108561,0.495675,8.604892,3.332914,2.433402,6.703178,-9.966418,4.336387,7.929785,9.875399,-0.949932,9.978710,7.488614,4.176674,2.759833,5.102741,-6.631745,7.000673,7.182997,-9.594786,8.612880,-7.169462,9.115151,1.964417,2.057559,8.111928,3.712747,-1.944725,1.207667,8.016109,-1.637626,-8.389989,1.843333,-2.736000,-9.583567,-6.257119,-3.686142,8.198562,-3.706160,3.725614,9.376655,3.068586,7.160397,3.648275,5.304131,1.553274,1.532502,5.067991,0.282403,-8.404004,-9.270468,-0.519389,7.765364,-0.790615,-3.968966,2.285459,-5.918376,-9.363223,-2.515339,7.040810,8.786667,8.599712,-1.206728,6.204426,6.488282,4.813198,-3.880003,-1.462942,5.251125,1.100260,-5.779734,1.351828,-2.842660,4.315680,7.419060,-8.516619,4.488446,4.540943,-2.543885,-3.426106,-2.102507,5.357712,6.561175,-5.603070,-1.394081,-6.862041,1.869311,-9.148482,3.509001,-6.499734,-9.487673,1.777286,3.533537,0.762828,-1.758080,4.998533,5.912788,0.125358,-3.979845,5.457336,-0.728085,-6.682787,7.612654,7.493271,-2.614812,3.308953,-8.649232,-6.795597,7.918818,-9.569296,2.954994,4.117614,-6.704140,3.654067,-7.557424,-6.267975,-9.057058,-5.474446,4.618943,8.384131,-7.765493,-4.771500,2.828690,-6.121929,-2.084642,-9.098809,-0.669414,-6.950083,4.595525,1.838631,-3.444103,-4.683727,-7.522570,-2.565228,-8.010132,7.924966,-8.846130,8.195113,4.424157,-3.890156,-3.847135,5.269821,-5.826719,-4.201147,-4.430774,-7.954539,2.765656,2.822903,8.378500,4.096809,7.921418,-1.847345,-2.869718,-9.221045,0.758379,9.084299,5.596833,-5.980347,-4.559541,3.286506,3.979273,7.099851,-1.885003,-9.898285,-4.532787,3.303584,4.593631,2.565062,-7.474704,6.785358,-0.010772,2.600258,8.324771,-1.425063,-9.736513,-8.598689,1.641523,-0.017964,2.031054,5.675265,-6.707222,5.825167,1.213208,5.582553,-5.525760,4.367588,9.915052,4.763087,0.305336,-0.063313,1.758172,2.190513,-9.141614,3.615007,-0.971709,7.919058,9.718182,-2.427226,4.580956,-2.605104,-5.655867,8.374932,6.587445,4.110354,-3.130759,-7.098422,-1.329701,-2.256144,-0.236175,-7.951926,-1.538027,2.600488,2.818334,-9.972783,-7.668972,-5.533253,3.097096,-9.074163,-4.764532,5.448215,-5.159384,7.699833,1.373957,4.324725,7.156202,-0.254753,-8.915666,2.321900,-0.947313,-4.368192,0.948891,9.216814,-4.831865,6.538842,7.987044,0.973017,-1.021990,4.666369,-8.139107,4.173286,-7.208739,-6.658781,-3.192096,-2.835495,2.806583,5.328050,-7.992105,7.027863,-6.610537,1.023658,3.738037,3.730685,3.950609,0.418081,-6.360747,7.530162,4.707017,6.680256,-6.480954,-7.802542,-2.871012,-6.319510,-0.415203,-3.916964,-5.138758,9.062537,-0.516373], dtype = "float32")#candidate|8923|(462,)|const|float32
call_8922 = relay.TupleGetItem(func_3901_call(relay.reshape(const_8923.astype('float32'), [7, 11, 6])), 2)
call_8924 = relay.TupleGetItem(func_3903_call(relay.reshape(const_8923.astype('float32'), [7, 11, 6])), 2)
func_3706_call = mod.get_global_var('func_3706')
func_3708_call = mutated_mod.get_global_var('func_3708')
call_8933 = relay.TupleGetItem(func_3706_call(), 0)
call_8934 = relay.TupleGetItem(func_3708_call(), 0)
func_6171_call = mod.get_global_var('func_6171')
func_6174_call = mutated_mod.get_global_var('func_6174')
call_8948 = relay.TupleGetItem(func_6171_call(relay.reshape(call_8903.astype('int16'), [297,])), 3)
call_8949 = relay.TupleGetItem(func_6174_call(relay.reshape(call_8903.astype('int16'), [297,])), 3)
func_6737_call = mod.get_global_var('func_6737')
func_6738_call = mutated_mod.get_global_var('func_6738')
call_8950 = func_6737_call()
call_8951 = func_6737_call()
func_7354_call = mod.get_global_var('func_7354')
func_7357_call = mutated_mod.get_global_var('func_7357')
const_8975 = relay.const([-4.288022,5.630490,2.459094,-9.117187,0.870003,5.954530,-9.175018,1.400308,3.880076,6.212928,9.477105,-1.364668,-7.119808,-6.790729,3.644604,7.127240,-2.127843,0.616629,5.632875,-1.879449,-1.646039,-8.070590,3.360652,0.895772,-3.498692,5.326089,2.861725,-4.536739,-1.571141,1.623105,-8.932938,6.465362,-6.662171,-4.776204,1.025389,-5.233058,1.435788,-7.753976,-5.546725,3.960264,1.987057,-8.149110], dtype = "float32")#candidate|8975|(42,)|const|float32
call_8974 = relay.TupleGetItem(func_7354_call(relay.reshape(const_8975.astype('float32'), [7, 2, 3])), 0)
call_8976 = relay.TupleGetItem(func_7357_call(relay.reshape(const_8975.astype('float32'), [7, 2, 3])), 0)
bop_8977 = relay.equal(call_8905.astype('bool'), relay.reshape(var_8909.astype('bool'), relay.shape_of(call_8905))) # shape=(11, 6, 14)
bop_8980 = relay.equal(call_8906.astype('bool'), relay.reshape(var_8909.astype('bool'), relay.shape_of(call_8906))) # shape=(11, 6, 14)
func_2131_call = mod.get_global_var('func_2131')
func_2134_call = mutated_mod.get_global_var('func_2134')
var_8984 = relay.var("var_8984", dtype = "float64", shape = (1260,))#candidate|8984|(1260,)|var|float64
const_8985 = relay.const([[8.723868,-6.730663,5.704902,7.492180,-1.997171,7.405141,-9.302823,0.608727,-6.907875,-5.248914,0.608511,-2.261159,4.595545,7.115205,4.829327,-0.624779,-1.148373,-7.051390,-6.628714,1.293630,3.659821,-7.088239,-8.741580,-2.261792,2.078849,0.947567,-0.537050,-3.791507],[7.300043,4.592979,8.206064,2.171682,-9.430512,-3.078069,4.244638,2.489800,-1.431985,-5.807453,-5.395706,7.032260,-9.581515,-5.352187,-5.623162,-4.698838,5.630912,-2.383230,5.523100,-9.365534,7.342905,0.391993,-9.841104,4.669341,-6.076198,-4.892467,0.302004,-9.942447],[-7.374361,-3.522565,-0.765854,-9.209201,-9.678183,-6.056912,-8.548671,-6.254407,4.667860,-8.210297,-0.628720,-3.600437,9.065937,3.948116,-5.245065,-2.829908,8.623106,2.138583,2.551622,5.416374,-7.017275,-4.085934,-2.457874,-0.134659,-3.675419,-3.494182,9.155165,2.143607]], dtype = "float64")#candidate|8985|(3, 28)|const|float64
call_8983 = relay.TupleGetItem(func_2131_call(relay.reshape(var_8984.astype('float64'), [7, 15, 12]), relay.reshape(const_8985.astype('float64'), [1, 84]), ), 0)
call_8986 = relay.TupleGetItem(func_2134_call(relay.reshape(var_8984.astype('float64'), [7, 15, 12]), relay.reshape(const_8985.astype('float64'), [1, 84]), ), 0)
func_1899_call = mod.get_global_var('func_1899')
func_1902_call = mutated_mod.get_global_var('func_1902')
const_8998 = relay.const([[7,-1,9,-5,-5,-2,-5,-2,-7,-4,-9,-10,-6,-3,-8,4,-3,6,-3,6,5,8]], dtype = "int16")#candidate|8998|(1, 22)|const|int16
var_8999 = relay.var("var_8999", dtype = "int16", shape = (308,))#candidate|8999|(308,)|var|int16
call_8997 = relay.TupleGetItem(func_1899_call(relay.reshape(const_8998.astype('int16'), [22,]), relay.reshape(var_8999.astype('int16'), [308,]), ), 0)
call_9000 = relay.TupleGetItem(func_1902_call(relay.reshape(const_8998.astype('int16'), [22,]), relay.reshape(var_8999.astype('int16'), [308,]), ), 0)
output = relay.Tuple([call_8903,bop_8910,call_8922,const_8923,call_8933,call_8948,call_8950,call_8974,const_8975,bop_8977,call_8983,var_8984,const_8985,call_8997,const_8998,var_8999,])
output2 = relay.Tuple([call_8904,bop_8913,call_8924,const_8923,call_8934,call_8949,call_8951,call_8976,const_8975,bop_8980,call_8986,var_8984,const_8985,call_9000,const_8998,var_8999,])
func_9011 = relay.Function([var_8909,var_8984,var_8999,], output)
mod['func_9011'] = func_9011
mod = relay.transform.InferType()(mod)
var_9012 = relay.var("var_9012", dtype = "float64", shape = (11, 6, 14))#candidate|9012|(11, 6, 14)|var|float64
var_9013 = relay.var("var_9013", dtype = "float64", shape = (1260,))#candidate|9013|(1260,)|var|float64
var_9014 = relay.var("var_9014", dtype = "int16", shape = (308,))#candidate|9014|(308,)|var|int16
output = func_9011(var_9012,var_9013,var_9014,)
func_9015 = relay.Function([var_9012,var_9013,var_9014,], output)
mutated_mod['func_9015'] = func_9015
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8697_call = mod.get_global_var('func_8697')
func_8698_call = mutated_mod.get_global_var('func_8698')
call_9017 = relay.TupleGetItem(func_8697_call(), 0)
call_9018 = relay.TupleGetItem(func_8698_call(), 0)
func_7875_call = mod.get_global_var('func_7875')
func_7878_call = mutated_mod.get_global_var('func_7878')
var_9030 = relay.var("var_9030", dtype = "int8", shape = (432,))#candidate|9030|(432,)|var|int8
call_9029 = relay.TupleGetItem(func_7875_call(relay.reshape(var_9030.astype('int8'), [432, 1])), 2)
call_9031 = relay.TupleGetItem(func_7878_call(relay.reshape(var_9030.astype('int8'), [432, 1])), 2)
output = relay.Tuple([call_9017,call_9029,var_9030,])
output2 = relay.Tuple([call_9018,call_9031,var_9030,])
func_9037 = relay.Function([var_9030,], output)
mod['func_9037'] = func_9037
mod = relay.transform.InferType()(mod)
mutated_mod['func_9037'] = func_9037
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9038 = relay.var("var_9038", dtype = "int8", shape = (432,))#candidate|9038|(432,)|var|int8
func_9037_call = mutated_mod.get_global_var('func_9037')
call_9039 = func_9037_call(var_9038)
output = call_9039
func_9040 = relay.Function([var_9038], output)
mutated_mod['func_9040'] = func_9040
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8813_call = mod.get_global_var('func_8813')
func_8814_call = mutated_mod.get_global_var('func_8814')
call_9091 = func_8813_call()
call_9092 = func_8813_call()
func_8524_call = mod.get_global_var('func_8524')
func_8526_call = mutated_mod.get_global_var('func_8526')
call_9093 = relay.TupleGetItem(func_8524_call(), 0)
call_9094 = relay.TupleGetItem(func_8526_call(), 0)
func_3524_call = mod.get_global_var('func_3524')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_9115 = relay.TupleGetItem(func_3524_call(), 0)
call_9116 = relay.TupleGetItem(func_3526_call(), 0)
func_8889_call = mod.get_global_var('func_8889')
func_8890_call = mutated_mod.get_global_var('func_8890')
call_9123 = func_8889_call()
call_9124 = func_8889_call()
output = relay.Tuple([call_9091,call_9093,call_9115,call_9123,])
output2 = relay.Tuple([call_9092,call_9094,call_9116,call_9124,])
func_9133 = relay.Function([], output)
mod['func_9133'] = func_9133
mod = relay.transform.InferType()(mod)
mutated_mod['func_9133'] = func_9133
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9133_call = mutated_mod.get_global_var('func_9133')
call_9134 = func_9133_call()
output = call_9134
func_9135 = relay.Function([], output)
mutated_mod['func_9135'] = func_9135
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3824_call = mod.get_global_var('func_3824')
func_3826_call = mutated_mod.get_global_var('func_3826')
call_9197 = relay.TupleGetItem(func_3824_call(), 0)
call_9198 = relay.TupleGetItem(func_3826_call(), 0)
func_3515_call = mod.get_global_var('func_3515')
func_3517_call = mutated_mod.get_global_var('func_3517')
call_9216 = func_3515_call()
call_9217 = func_3515_call()
func_5485_call = mod.get_global_var('func_5485')
func_5487_call = mutated_mod.get_global_var('func_5487')
call_9227 = func_5485_call()
call_9228 = func_5485_call()
output = relay.Tuple([call_9197,call_9216,call_9227,])
output2 = relay.Tuple([call_9198,call_9217,call_9228,])
func_9229 = relay.Function([], output)
mod['func_9229'] = func_9229
mod = relay.transform.InferType()(mod)
mutated_mod['func_9229'] = func_9229
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9229_call = mutated_mod.get_global_var('func_9229')
call_9230 = func_9229_call()
output = call_9230
func_9231 = relay.Function([], output)
mutated_mod['func_9231'] = func_9231
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4439_call = mod.get_global_var('func_4439')
func_4440_call = mutated_mod.get_global_var('func_4440')
call_9251 = relay.TupleGetItem(func_4439_call(), 0)
call_9252 = relay.TupleGetItem(func_4440_call(), 0)
func_6956_call = mod.get_global_var('func_6956')
func_6958_call = mutated_mod.get_global_var('func_6958')
call_9253 = relay.TupleGetItem(func_6956_call(), 0)
call_9254 = relay.TupleGetItem(func_6958_call(), 0)
output = relay.Tuple([call_9251,call_9253,])
output2 = relay.Tuple([call_9252,call_9254,])
func_9262 = relay.Function([], output)
mod['func_9262'] = func_9262
mod = relay.transform.InferType()(mod)
mutated_mod['func_9262'] = func_9262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9262_call = mutated_mod.get_global_var('func_9262')
call_9263 = func_9262_call()
output = call_9263
func_9264 = relay.Function([], output)
mutated_mod['func_9264'] = func_9264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4469_call = mod.get_global_var('func_4469')
func_4471_call = mutated_mod.get_global_var('func_4471')
call_9274 = func_4469_call()
call_9275 = func_4469_call()
func_2791_call = mod.get_global_var('func_2791')
func_2796_call = mutated_mod.get_global_var('func_2796')
var_9297 = relay.var("var_9297", dtype = "float32", shape = (225,))#candidate|9297|(225,)|var|float32
const_9298 = relay.const([-6.222461,-4.030745,-0.460074,4.654479,-6.097930,-1.486444,9.764176,-0.386394,4.359670,4.702812,-1.920567,2.386485,5.988878,-1.604150,5.968748,-1.864896,-2.846657,8.145008,2.116886,-5.661597,-4.083990,-3.028142,3.203009,9.088948,-4.054477,-9.940874,-0.369524,1.570765,5.211921,-5.091093,-9.270799,-5.172681,-8.780296,4.242249,-6.358929,1.801540,-0.022634,4.591582,-3.634311,1.780775,8.986621,5.843534,0.302621,-7.558632,-6.669838,1.875435,3.028853,-4.655789,-3.773757,-9.695424,6.453519,8.656466,0.313681,9.920684,8.193659,-9.083512,-7.652668,-4.305171,9.968787,-9.425365,-5.379580,-5.992760,1.712545,3.630269,-8.650953,2.127086,3.123622,-8.243068,4.102293,-6.981600,-7.769749,0.871509,-4.217495,-5.639011,-0.096624,-1.700654,-1.432361,2.894109,4.649800,1.744143,-0.326449,3.953417,-7.586086,-9.922878,-7.613138,-5.190579,-8.518523,9.237800,-9.537822,-4.259885,5.237650,7.656512,4.940147,1.159555,2.637655,-5.631918,9.917337,9.196928,4.095751,3.175282,-1.993830,-2.728241,-6.636260,1.581276,4.888359,5.023915,-5.725410,2.221353,0.249310,-4.770982,2.552192,-5.627238,5.209878,-8.801310,-4.940562,-3.766673,-0.469265,7.334755,-0.485568,2.799286,-8.338226,-2.875862,4.231416,-9.234613,2.108686,6.439379,8.361075,8.594995,4.235652,-6.021371,-0.354838,-6.652878,9.649354,9.509908,-2.179706,-1.728405,2.255978,-9.300013,-1.853930,-8.873782,9.552442,-4.202018,0.251479,7.122493,-6.322108,-7.596059,-7.037013,2.208807,-7.459805,-9.759293,5.533594,4.949951,2.831060,6.193103,-8.527081,0.135484,6.255045,3.714289,-4.008810,2.380169,-6.429539,9.678711,-9.834522,-9.498591,5.775143,5.276715,4.143152,7.864054], dtype = "float64")#candidate|9298|(168,)|const|float64
var_9299 = relay.var("var_9299", dtype = "float64", shape = (2352,))#candidate|9299|(2352,)|var|float64
call_9296 = relay.TupleGetItem(func_2791_call(relay.reshape(var_9297.astype('float32'), [15, 1, 15]), relay.reshape(const_9298.astype('float64'), [168,]), relay.reshape(var_9299.astype('float64'), [2352,]), ), 5)
call_9300 = relay.TupleGetItem(func_2796_call(relay.reshape(var_9297.astype('float32'), [15, 1, 15]), relay.reshape(const_9298.astype('float64'), [168,]), relay.reshape(var_9299.astype('float64'), [2352,]), ), 5)
output = relay.Tuple([call_9274,call_9296,var_9297,const_9298,var_9299,])
output2 = relay.Tuple([call_9275,call_9300,var_9297,const_9298,var_9299,])
func_9307 = relay.Function([var_9297,var_9299,], output)
mod['func_9307'] = func_9307
mod = relay.transform.InferType()(mod)
var_9308 = relay.var("var_9308", dtype = "float32", shape = (225,))#candidate|9308|(225,)|var|float32
var_9309 = relay.var("var_9309", dtype = "float64", shape = (2352,))#candidate|9309|(2352,)|var|float64
output = func_9307(var_9308,var_9309,)
func_9310 = relay.Function([var_9308,var_9309,], output)
mutated_mod['func_9310'] = func_9310
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8899_call = mod.get_global_var('func_8899')
func_8900_call = mutated_mod.get_global_var('func_8900')
call_9365 = relay.TupleGetItem(func_8899_call(), 0)
call_9366 = relay.TupleGetItem(func_8900_call(), 0)
func_5458_call = mod.get_global_var('func_5458')
func_5460_call = mutated_mod.get_global_var('func_5460')
const_9387 = relay.const([8.531062,-1.796032,8.388816,-5.705924,5.482490,-2.293943,1.335031,8.147506,-2.148150,2.955893,3.098718,1.911663,-9.211841,4.381346,8.074147,-4.525272,6.627721,7.170051,-1.637528,-1.128903,1.377066,3.027386,-0.903605,5.898758,-0.195201,-3.161584,2.821624,3.710370,1.991520,-8.652626,9.270216,7.204275,3.375719,-8.283122,-5.630179,5.535340,9.073567,1.854849,5.184829,-9.521149,4.431197,1.115143,0.507201,-2.450776,-0.627802,3.060398,-1.099578,-2.645508,-8.672393,5.061830,1.501382,-7.733892,-3.774354,-0.693877,-5.436796,0.165433,4.127066,-1.108137,1.886938,2.905364,6.035209,-3.307883,9.480262,5.875703,1.741123,7.300326,4.287963,2.032732,5.975049,6.843620,-2.558683,1.550064,-1.164308,-0.305144,-6.154465,2.451159,1.260600,4.989398,-4.232517,-6.701937,-3.613351,4.181326,5.699098,1.981630,-8.068553,-0.877415,7.150475,1.617735,1.397573,5.886440,3.090243,-1.204902,-2.822130,-4.511523,-3.243944,-0.380920,-4.979002,8.384711,-0.741432,-6.958293,4.303488,-2.827204,-4.825993,-8.655811,1.229127,6.992711,-0.463234,9.970094,-8.304453,-3.602569,-2.804859,5.824900,-9.639440,-2.175295,9.937557,0.917549,3.518325,5.032716,2.559727,-8.314154,2.609794,-5.492169,5.763391,7.741603,8.088629,-7.240968,-9.448276,-3.108308,-4.201222,-4.333872,6.889696,5.190810,7.442052,-5.671509,-4.861031,8.544125,-0.474074,-1.024905,-3.669294,4.700745,9.648407,2.042508,8.832672,-3.927033,8.270095,2.555755,-0.828044,6.641881,4.012276,1.243750,-5.247682,-0.807922,-6.150367,-7.586734,-2.813095,-2.778853,-6.127696,4.994462,7.746273,5.678728,-5.306061,4.059785,3.105954,-5.194962,-6.064291,5.082687,4.458878,9.381126,-1.671415,-2.932051,-2.231236,-3.016518,-3.528164,-6.184098,9.542835,-7.768649,1.241181,-2.764703,0.113435,7.473786,-2.182367,-5.838557,-0.506449,6.839745,-6.320218,4.696948,-7.587259,4.092182,-5.728910,-8.039311,4.994511,5.578665,-5.759905,-6.061470,9.430823,1.905976,-4.635238,6.085756,-9.629800,8.655162,-3.124333,3.194994,-4.045067,7.740141,-2.366938,-9.710020,1.397734,-8.157920,3.987251,2.420593,9.734048,0.653346,-5.894734,-7.745806,6.140544,5.658055,2.574676,8.161432,6.760288,-0.350480,-7.222818,-9.739098,-2.407692,-4.901988,0.097889,-3.042086,-0.796860,-3.280685,-0.824275,6.769355,-2.247110,6.280151,3.386393,0.265597,-0.384478,8.503680,-3.561811,-2.097897,-7.158053,-6.096271,-1.284409,-0.968001,-1.852422,4.338294,-1.167191,0.061441,-0.854351,-5.397371,1.214539,-3.067814,5.537804,-0.235249,6.659197,-9.783564,7.775072,9.229293,-6.552576,4.077916,-2.125002,0.281369,2.187640,9.131393,-3.565024,-2.108247,6.532142,3.671269,-9.096719,-2.106404,-9.189001,3.532367,-4.934249,8.748667,1.264503,8.499525,2.787517,-1.620718,2.276853,-4.484210,2.233064,8.357425,-6.906387,3.610219,5.377004,-3.784254,-1.170255,9.417463,3.282552,7.476964,3.293276,-2.401822,-9.030220,-6.178339,3.699507,6.688539,2.057324,0.163561,6.583939,-8.774448,0.832453,-6.226176,-0.232277,-2.031358,-7.923808,-4.928413,-6.443539,-4.357928,8.440672,2.806513,-2.049003,4.573474,3.020873,3.609599,8.994312,8.458632,-2.292485,1.199633,-7.543587,-3.390182,4.587313,-7.312573,-5.646740,-3.940664,5.081568,-7.084639,-3.427655,2.715238,-0.582517,-1.092626,-3.429155,-3.401162,2.084668,-7.567922,5.417975,-9.803538,4.565386,3.766437,-9.779542,-9.315554,5.756605,0.825734,-8.920496,5.613609,9.889261,6.761104,-9.620297,-9.936493,9.545266,2.779732,-2.343312,0.283913,-3.410823,2.667161,2.024683,7.994740,-6.157635,-6.968122,8.927829,8.590607,-8.757134,4.988901,3.200015,-5.361570,-0.731775,8.036983,-6.590276,-7.686231,6.896199,5.868968,1.447994,9.198541,8.636120,4.921080,-3.717471,2.375072,6.143640,9.673746,-4.441503,6.569291,2.804175,8.896751,7.626551,-2.071905,5.679438,8.483360,-5.264621,-7.167144,0.676440,1.673369,3.706830,-2.605724,9.390733,7.989171,4.427640,-7.120374,7.738519,-7.366924,4.057216,-3.170011,-7.680561,-8.889279,-2.110186,-0.868635,-3.219049,4.491398,-3.038778,-1.884490,4.590068,-6.806009,-7.001619,5.781392,-6.313903,-9.271777,6.843082,8.392982,3.481900,-0.986837,-7.106249,2.218130,-4.220714,-0.806659,-4.558203,-1.022678,-6.081364,-6.551567,0.296395,9.234012,-5.977434,-8.695091,-2.016963,8.332339,3.859290,5.554715,5.726234,-3.929321,-8.121568,-1.401177,9.393679,-5.851137,2.921270,-1.830813,9.149242,9.120033,0.669105,1.613766,1.645387,2.904319,-3.176314,-5.486143,1.396128,-6.467568,-2.939007,-7.841039,3.965424,1.349303,-5.376211,-7.965699,5.022495,3.959442,8.960356,-2.267800,8.868265,8.260095,3.298072,1.465285,-5.638959,-7.053184,2.658206,-4.559639,0.575074,2.646169,0.334248,2.877339,4.268041,5.286537,7.127891,4.654550,-2.212532,2.748750,9.436822,-7.172037,-1.000920,-2.311192,-4.512378,-4.930222,-3.202053,2.937894,8.691544,6.038944,8.298916,8.914082,-5.057224,6.755057,8.718593,-4.351299,-5.664945,-2.665517,2.519158,-0.809910,5.784292,-0.555556,-9.868517,0.781976,-9.635761,9.431701,-0.432290,8.403232,6.553733,9.509985,6.610601,8.841556,-4.519017,-9.249653,-7.587837,2.405811,0.394283,-1.513796,8.466013,-6.636522,-9.306254,6.211473,-3.218388,3.322297,-9.850411,7.179920,6.154307,0.943573,-2.484662,7.877195,-7.124765,0.074566,-6.422290,3.414586,4.100944,-5.932651,0.589607,-0.889438,-7.494734,-4.199914,-6.558855,-5.304306,-8.750579,-5.332451,3.373747,-5.197156,-2.098076,5.417677,3.908943,4.508948,-9.353131,-3.877917,1.359703,-9.583824,-3.146455,-6.961899,-4.889649,-0.772792,-9.926442,3.443280,8.963692,6.537890,6.767781,-1.287931,-1.866391,-5.479729,5.872922,-7.989105,1.648799,-5.070167,2.542346,4.973546,4.632556,5.483550,-8.491817,5.502935,-5.651406,8.609881,-8.607501,-1.498363,6.507424,6.770538,6.872209,-5.962967,-0.990972,-9.004674,8.130528,2.065486,-9.004557,2.106946,-0.865568,-9.731424,5.281594,-8.440584,3.750826,-4.952335,3.763931,-1.291210,-6.805249,-7.421986,1.763663,-1.601942,-3.517007,-9.606644,-0.778695,3.486627,-7.791090,5.957209,9.136596,1.540848,-6.612182,-2.982201,-6.850902,-0.221483,6.379188,6.854272,-2.812745,8.931874,-8.769592,2.183156,1.818046,1.519009,-2.179031,-6.727077,-2.818739,-8.293467,8.803783,6.570072,6.770557,-9.839279,-0.488386,-4.483980,-9.372400,6.489323,1.495875,2.083169,0.180230,-2.069735,-0.604050,6.504440,1.738478,4.516808,-7.970501,-3.801898,2.969071,-2.935354,-6.809002,-6.559967,6.222443,7.569536,-8.307854,5.204891,2.185383,9.066513,-0.571213,6.838643,-2.704643,8.424896,5.112058,7.250304,-8.712018,-2.944854,-7.803112,1.246391,-3.390921,-6.439664,-9.856422,-5.774707,4.128143,3.706808,-8.539350,1.016249,6.580599,-2.789783,-3.553662,1.402438,0.738715,-5.835697,-3.958439,9.552773,-8.881370,5.605356,-7.312744,8.066481,5.241430,4.829655,4.681009,8.039491,9.030420,9.053278,8.134249,0.462819,-7.907290,-1.061294,8.868976,3.980542,3.540119,-5.466256,-1.334886,3.356166,-1.009050,4.509630,-3.131914,6.212146,-1.553431,9.513595,1.074941,2.667887,-4.982271,3.279909,6.038509,-9.991948,2.578448,-4.732225,-8.518371,-5.500967,5.059803,-3.134758,-2.084787,4.363402,-2.837260,-0.946478,8.889525,0.282678,9.425250,-0.260037,0.053453,3.374561,2.537627,-1.818852,0.482298,3.468008,-7.447156,-1.171756,0.726299,-9.683383,4.316930,4.615978,-7.770176,-6.491231,7.794406,-6.446996,9.150672,-1.796390,-2.367637,-2.006015,1.479248,-2.234702,8.690154,-8.202687,-9.193576,-4.549309,0.042586,9.633767,-9.029065,8.903460,-0.152550,-1.924656,7.153461,-5.764768,0.747562,4.756312,-8.798680,6.204113,2.510408,-2.024732,-4.378368,0.873888,6.619113,5.364336,-0.701735,6.910977,-8.511255,0.257315,-2.918687,0.526424,-9.549330,-2.263193,-1.703469,2.476284,9.233635,-2.240253,-9.070774,8.921640,-5.306963,-8.172258,0.297940,5.657385,7.935823,2.911673,-5.620680,-6.703583,-2.074584,-1.885257,-0.284505,-8.943714,3.238299,9.936424,-6.698492,9.636160,6.797013,8.603313,-5.026371,-5.579201,0.732800,8.876058,4.602741,7.631802,4.114929,-5.814532,4.300418,0.658833,4.556151,-6.584931,-1.766113,-1.724336,2.358019,-8.651672,-0.480208,-3.612848,8.432695,-3.757246,7.661124,-4.782256,0.081639,-0.064783,1.013054,7.118707,-1.163007,-1.269669,-4.950161,-3.799398,-2.182451,5.299750,0.184119,4.828182,2.608022,6.160653,7.008512,5.992107,4.260104,8.222207,-7.019107,6.545031,-3.275272,1.546917,4.076247,0.257112,-5.705914,-6.188916,-6.994122,-5.919852,9.870671,-8.781640,0.675599,4.701745,2.688232,7.589686,-0.803613,-6.581704,-6.882764,1.192889,4.676732,-4.285863,1.056968,6.924297,-0.813475,4.648905,-6.073449,-8.607935,-9.123658,-5.433942,-9.422255,0.699646,-2.660900,4.210071,3.699116,-9.072877,3.736487,-4.115681,-8.814373,-0.487160,-5.900251,-1.183596,1.810720,-9.893626,2.227052,9.504590,5.724475,-7.583344,-9.683281,-0.071070,-3.743378,-5.662759,1.737343,-4.748659,5.703183,-8.966830,-2.107252,-3.971576,7.332003,3.377396,3.151483,-5.161035,9.014570,-3.671388,7.375971,1.218491,-9.901281,3.852091,5.954165,6.090011,2.188452,-2.697874,-1.423369,9.717458,8.559331,-4.826373,-0.981885,4.910079,9.349065,5.467066,1.179722,-6.990187,6.257997,1.631174,6.010583,8.441120,7.595791,3.202246,-9.406451,4.267032,2.900523,-5.291982,3.150646,-9.213769,7.280334,1.191060,-7.758956,-1.804179,0.299170,-1.885161,-3.383096,1.274957,8.984674,-6.201552,-4.517353,-0.892952,1.187894,3.821417,-1.690625,-2.943443,0.473688,-2.171500,7.042799,7.471142,5.438814,-9.474528,2.512244,4.662574,-0.032677,-6.342644,6.794480,-3.973712,2.411297,4.772701,0.906148,-7.568899,9.790551,5.168471,4.693006,-6.874792,-8.630634,2.283620,-6.386303,9.112009,-1.953861,2.746651,-6.211352,-7.000152,6.958608,3.873276,5.044652,-5.470395,7.826875,-4.377618,-7.362021,2.173331,6.359509,8.067648,3.152244,-1.288674,-5.980575,1.597459,8.233699,6.508944,-2.188637,-4.484007,-4.830337,-2.606949,-3.374831,-9.680681,1.665602], dtype = "float32")#candidate|9387|(1001,)|const|float32
call_9386 = func_5458_call(relay.reshape(const_9387.astype('float32'), [13, 11, 7]))
call_9388 = func_5458_call(relay.reshape(const_9387.astype('float32'), [13, 11, 7]))
output = relay.Tuple([call_9365,call_9386,const_9387,])
output2 = relay.Tuple([call_9366,call_9388,const_9387,])
func_9400 = relay.Function([], output)
mod['func_9400'] = func_9400
mod = relay.transform.InferType()(mod)
output = func_9400()
func_9401 = relay.Function([], output)
mutated_mod['func_9401'] = func_9401
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8539_call = mod.get_global_var('func_8539')
func_8540_call = mutated_mod.get_global_var('func_8540')
call_9465 = relay.TupleGetItem(func_8539_call(), 0)
call_9466 = relay.TupleGetItem(func_8540_call(), 0)
output = relay.Tuple([call_9465,])
output2 = relay.Tuple([call_9466,])
func_9477 = relay.Function([], output)
mod['func_9477'] = func_9477
mod = relay.transform.InferType()(mod)
output = func_9477()
func_9478 = relay.Function([], output)
mutated_mod['func_9478'] = func_9478
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3732_call = mod.get_global_var('func_3732')
func_3734_call = mutated_mod.get_global_var('func_3734')
call_9487 = relay.TupleGetItem(func_3732_call(), 0)
call_9488 = relay.TupleGetItem(func_3734_call(), 0)
output = relay.Tuple([call_9487,])
output2 = relay.Tuple([call_9488,])
func_9496 = relay.Function([], output)
mod['func_9496'] = func_9496
mod = relay.transform.InferType()(mod)
mutated_mod['func_9496'] = func_9496
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9496_call = mutated_mod.get_global_var('func_9496')
call_9497 = func_9496_call()
output = call_9497
func_9498 = relay.Function([], output)
mutated_mod['func_9498'] = func_9498
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7890_call = mod.get_global_var('func_7890')
func_7892_call = mutated_mod.get_global_var('func_7892')
call_9509 = func_7890_call()
call_9510 = func_7890_call()
uop_9521 = relay.atan(call_9509.astype('float64')) # shape=(11, 9, 3)
uop_9523 = relay.atan(call_9510.astype('float64')) # shape=(11, 9, 3)
func_9037_call = mod.get_global_var('func_9037')
func_9040_call = mutated_mod.get_global_var('func_9040')
const_9526 = relay.const([[-6],[2],[-10],[10],[-9],[-7],[6],[6],[6],[6],[-7],[-6],[-2],[-3],[3],[-7],[-10],[9],[-6],[-6],[-2],[9],[4],[5],[-5],[2],[5],[-3],[3],[5],[-9],[6],[-3],[-1],[-2],[5],[-1],[-3],[10],[-7],[-10],[-6],[-6],[-5],[-7],[6],[-3],[9],[-5],[-7],[7],[-4],[-6],[5],[4],[2],[-10],[-10],[7],[5],[6],[-2],[-6],[-8],[-1],[-10],[7],[-7],[1],[-3],[-4],[3],[-3],[-10],[10],[6],[1],[-6],[-9],[7],[-9],[8],[-3],[3],[1],[-2],[-10],[10],[-8],[6],[8],[-4],[10],[-3],[4],[10],[-7],[9],[7],[5],[-7],[2],[-10],[3],[-3],[-5],[-10],[9],[9],[-2],[-1],[6],[3],[9],[9],[-8],[1],[-6],[-2],[-8],[-7],[-5],[2],[-7],[-5],[-3],[1],[6],[5],[6],[1],[2],[3],[2],[6],[-10],[5],[-8],[-7],[-1],[5],[-9],[-3],[2],[2],[4],[9],[-5],[4],[10],[9],[1],[-5],[-4],[-7],[5],[9],[6],[-10],[-2],[6],[6],[-3],[-10],[10],[7],[9],[-5],[10],[-7],[6],[-6],[-7],[-9],[-3],[-1],[-8],[-4],[10],[10],[-5],[-1],[-6],[1],[8],[2],[1],[9],[10],[-6],[8],[2],[8],[8],[4],[-10],[-4],[5],[7],[-7],[-3],[1],[5],[-1],[7],[-2],[9],[-4],[3],[-5],[-10],[6],[-5],[-8],[-7],[9],[2],[-4],[-9],[5],[-4],[-4],[2],[8],[-2],[10],[9],[7],[-7],[8],[10],[3],[-7],[-10],[-4],[6],[-2],[1],[-8],[7],[5],[1],[-5],[7],[5],[-5],[-3],[6],[9],[-8],[-3],[-1],[5],[-8],[4],[-3],[5],[2],[-6],[10],[-4],[-8],[-7],[-9],[-2],[-7],[1],[9],[3],[-1],[3],[3],[-1],[5],[-4],[1],[-4],[-7],[5],[7],[-2],[2],[4],[1],[9],[4],[5],[-9],[4],[4],[-3],[-8],[-3],[-7],[-10],[6],[1],[-7],[-1],[2],[-8],[1],[6],[10],[6],[-8],[8],[-7],[10],[1],[-8],[-3],[-7],[4],[9],[-8],[-4],[2],[1],[-10],[5],[-7],[3],[-4],[-7],[4],[-2],[-6],[7],[6],[8],[5],[-5],[4],[7],[4],[-1],[7],[-6],[-8],[7],[-8],[-10],[9],[6],[5],[1],[8],[5],[3],[-7],[5],[9],[-5],[-4],[6],[4],[10],[10],[-3],[-5],[2],[8],[-4],[-3],[6],[2],[-1],[5],[6],[6],[1],[-7],[8],[-8],[-8],[9],[3],[-10],[-2],[-1],[-5],[4],[-6],[2],[8],[-5],[10],[10],[1],[-8],[5],[9],[-7],[-2],[-1],[7],[-10],[4],[2],[9],[5],[-9],[-5],[-4],[-8],[-5],[2],[-8],[2],[5],[-7],[-1],[-5],[-4],[-2],[7],[6],[-2],[-6],[7],[-9],[-7],[-6],[-9],[9],[4],[-8],[4],[4],[10],[-10]], dtype = "int8")#candidate|9526|(432, 1)|const|int8
call_9525 = relay.TupleGetItem(func_9037_call(relay.reshape(const_9526.astype('int8'), [432,])), 0)
call_9527 = relay.TupleGetItem(func_9040_call(relay.reshape(const_9526.astype('int8'), [432,])), 0)
output = relay.Tuple([uop_9521,call_9525,const_9526,])
output2 = relay.Tuple([uop_9523,call_9527,const_9526,])
func_9530 = relay.Function([], output)
mod['func_9530'] = func_9530
mod = relay.transform.InferType()(mod)
mutated_mod['func_9530'] = func_9530
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9530_call = mutated_mod.get_global_var('func_9530')
call_9531 = func_9530_call()
output = call_9531
func_9532 = relay.Function([], output)
mutated_mod['func_9532'] = func_9532
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8797_call = mod.get_global_var('func_8797')
func_8798_call = mutated_mod.get_global_var('func_8798')
call_9536 = relay.TupleGetItem(func_8797_call(), 0)
call_9537 = relay.TupleGetItem(func_8798_call(), 0)
output = call_9536
output2 = call_9537
func_9539 = relay.Function([], output)
mod['func_9539'] = func_9539
mod = relay.transform.InferType()(mod)
mutated_mod['func_9539'] = func_9539
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9539_call = mutated_mod.get_global_var('func_9539')
call_9540 = func_9539_call()
output = call_9540
func_9541 = relay.Function([], output)
mutated_mod['func_9541'] = func_9541
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5854_call = mod.get_global_var('func_5854')
func_5856_call = mutated_mod.get_global_var('func_5856')
call_9574 = relay.TupleGetItem(func_5854_call(), 0)
call_9575 = relay.TupleGetItem(func_5856_call(), 0)
output = call_9574
output2 = call_9575
func_9579 = relay.Function([], output)
mod['func_9579'] = func_9579
mod = relay.transform.InferType()(mod)
output = func_9579()
func_9580 = relay.Function([], output)
mutated_mod['func_9580'] = func_9580
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9589 = relay.var("var_9589", dtype = "float32", shape = (8, 2, 13))#candidate|9589|(8, 2, 13)|var|float32
uop_9590 = relay.cos(var_9589.astype('float32')) # shape=(8, 2, 13)
output = relay.Tuple([uop_9590,])
output2 = relay.Tuple([uop_9590,])
func_9595 = relay.Function([var_9589,], output)
mod['func_9595'] = func_9595
mod = relay.transform.InferType()(mod)
mutated_mod['func_9595'] = func_9595
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9596 = relay.var("var_9596", dtype = "float32", shape = (8, 2, 13))#candidate|9596|(8, 2, 13)|var|float32
func_9595_call = mutated_mod.get_global_var('func_9595')
call_9597 = func_9595_call(var_9596)
output = call_9597
func_9598 = relay.Function([var_9596], output)
mutated_mod['func_9598'] = func_9598
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9229_call = mod.get_global_var('func_9229')
func_9231_call = mutated_mod.get_global_var('func_9231')
call_9602 = relay.TupleGetItem(func_9229_call(), 1)
call_9603 = relay.TupleGetItem(func_9231_call(), 1)
func_5295_call = mod.get_global_var('func_5295')
func_5298_call = mutated_mod.get_global_var('func_5298')
var_9623 = relay.var("var_9623", dtype = "float32", shape = (64,))#candidate|9623|(64,)|var|float32
call_9622 = relay.TupleGetItem(func_5295_call(relay.reshape(var_9623.astype('float32'), [4, 1, 16])), 1)
call_9624 = relay.TupleGetItem(func_5298_call(relay.reshape(var_9623.astype('float32'), [4, 1, 16])), 1)
output = relay.Tuple([call_9602,call_9622,var_9623,])
output2 = relay.Tuple([call_9603,call_9624,var_9623,])
func_9627 = relay.Function([var_9623,], output)
mod['func_9627'] = func_9627
mod = relay.transform.InferType()(mod)
var_9628 = relay.var("var_9628", dtype = "float32", shape = (64,))#candidate|9628|(64,)|var|float32
output = func_9627(var_9628)
func_9629 = relay.Function([var_9628], output)
mutated_mod['func_9629'] = func_9629
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4439_call = mod.get_global_var('func_4439')
func_4440_call = mutated_mod.get_global_var('func_4440')
call_9651 = relay.TupleGetItem(func_4439_call(), 0)
call_9652 = relay.TupleGetItem(func_4440_call(), 0)
var_9670 = relay.var("var_9670", dtype = "float64", shape = (7, 11, 6))#candidate|9670|(7, 11, 6)|var|float64
bop_9671 = relay.bitwise_or(call_9651.astype('int32'), relay.reshape(var_9670.astype('int32'), relay.shape_of(call_9651))) # shape=(7, 11, 6)
bop_9674 = relay.bitwise_or(call_9652.astype('int32'), relay.reshape(var_9670.astype('int32'), relay.shape_of(call_9652))) # shape=(7, 11, 6)
output = relay.Tuple([bop_9671,])
output2 = relay.Tuple([bop_9674,])
func_9676 = relay.Function([var_9670,], output)
mod['func_9676'] = func_9676
mod = relay.transform.InferType()(mod)
mutated_mod['func_9676'] = func_9676
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9677 = relay.var("var_9677", dtype = "float64", shape = (7, 11, 6))#candidate|9677|(7, 11, 6)|var|float64
func_9676_call = mutated_mod.get_global_var('func_9676')
call_9678 = func_9676_call(var_9677)
output = call_9678
func_9679 = relay.Function([var_9677], output)
mutated_mod['func_9679'] = func_9679
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5716_call = mod.get_global_var('func_5716')
func_5718_call = mutated_mod.get_global_var('func_5718')
call_9710 = relay.TupleGetItem(func_5716_call(), 0)
call_9711 = relay.TupleGetItem(func_5718_call(), 0)
output = relay.Tuple([call_9710,])
output2 = relay.Tuple([call_9711,])
func_9721 = relay.Function([], output)
mod['func_9721'] = func_9721
mod = relay.transform.InferType()(mod)
mutated_mod['func_9721'] = func_9721
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9721_call = mutated_mod.get_global_var('func_9721')
call_9722 = func_9721_call()
output = call_9722
func_9723 = relay.Function([], output)
mutated_mod['func_9723'] = func_9723
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8899_call = mod.get_global_var('func_8899')
func_8900_call = mutated_mod.get_global_var('func_8900')
call_9799 = relay.TupleGetItem(func_8899_call(), 0)
call_9800 = relay.TupleGetItem(func_8900_call(), 0)
func_6594_call = mod.get_global_var('func_6594')
func_6596_call = mutated_mod.get_global_var('func_6596')
call_9804 = func_6594_call()
call_9805 = func_6594_call()
func_4742_call = mod.get_global_var('func_4742')
func_4744_call = mutated_mod.get_global_var('func_4744')
call_9812 = relay.TupleGetItem(func_4742_call(), 0)
call_9813 = relay.TupleGetItem(func_4744_call(), 0)
output = relay.Tuple([call_9799,call_9804,call_9812,])
output2 = relay.Tuple([call_9800,call_9805,call_9813,])
func_9814 = relay.Function([], output)
mod['func_9814'] = func_9814
mod = relay.transform.InferType()(mod)
output = func_9814()
func_9815 = relay.Function([], output)
mutated_mod['func_9815'] = func_9815
mutated_mod = relay.transform.InferType()(mutated_mod)
const_9844 = relay.const([[[-4.033316],[-9.149316],[5.023644],[-8.833391]],[[-6.104710],[3.690430],[8.443414],[-4.817966]],[[6.710406],[-8.375027],[-5.030420],[6.348685]],[[-1.785491],[-9.788325],[5.692429],[-5.663369]],[[-7.630034],[-4.585453],[5.986490],[7.667753]],[[-8.275850],[7.365318],[-5.130430],[-0.624428]],[[-1.516194],[8.521295],[6.900158],[-0.195223]],[[-1.991589],[-9.375636],[-1.488869],[2.236225]],[[6.298709],[-7.544919],[3.400505],[-8.305106]]], dtype = "float32")#candidate|9844|(9, 4, 1)|const|float32
uop_9845 = relay.cosh(const_9844.astype('float32')) # shape=(9, 4, 1)
output = uop_9845
output2 = uop_9845
func_9851 = relay.Function([], output)
mod['func_9851'] = func_9851
mod = relay.transform.InferType()(mod)
mutated_mod['func_9851'] = func_9851
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9851_call = mutated_mod.get_global_var('func_9851')
call_9852 = func_9851_call()
output = call_9852
func_9853 = relay.Function([], output)
mutated_mod['func_9853'] = func_9853
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6594_call = mod.get_global_var('func_6594')
func_6596_call = mutated_mod.get_global_var('func_6596')
call_9873 = func_6594_call()
call_9874 = func_6594_call()
uop_9877 = relay.erf(call_9873.astype('float64')) # shape=(6, 16, 9)
uop_9879 = relay.erf(call_9874.astype('float64')) # shape=(6, 16, 9)
var_9886 = relay.var("var_9886", dtype = "float64", shape = (6, 16, 9))#candidate|9886|(6, 16, 9)|var|float64
bop_9887 = relay.logical_xor(uop_9877.astype('uint8'), relay.reshape(var_9886.astype('uint8'), relay.shape_of(uop_9877))) # shape=(6, 16, 9)
bop_9890 = relay.logical_xor(uop_9879.astype('uint8'), relay.reshape(var_9886.astype('uint8'), relay.shape_of(uop_9879))) # shape=(6, 16, 9)
func_6237_call = mod.get_global_var('func_6237')
func_6239_call = mutated_mod.get_global_var('func_6239')
const_9900 = relay.const([-7.451577,-6.686672,-9.076864,-3.521358,-9.991607,3.077647,4.131072,-6.994207,-9.464874,9.239122,0.950389,2.253273,7.450829,8.615408,-1.211026,-1.336040,4.662356,5.421471,-3.974672,-2.407835,-3.362233,-8.206874,5.549470,-4.619863,9.418354,-9.380543,-4.938871,8.044523,-4.447048,-8.902531,-5.331246,8.024756,-7.499936,8.455036,3.178840,5.069739,5.556529,3.167899,8.708245,-1.530031,1.634020,6.316927,-3.270613,-0.452557,5.533134,-1.685166,3.666060,-6.952228,-2.172629,-3.877256,4.849072,8.441192,-4.431125,-9.375286,-2.088571,-7.370563,8.925326,4.339612,6.830065,-0.412428,1.711771,-0.378687,1.354267,-9.547886,-7.133914,0.528396,-5.758643,2.464786,9.214882,-6.891819,-1.544248,-2.689344,-7.801367,-0.552898,0.802149,9.376712,6.671728,9.143676,-2.552874,-5.368004,7.017106], dtype = "float32")#candidate|9900|(81,)|const|float32
call_9899 = relay.TupleGetItem(func_6237_call(relay.reshape(const_9900.astype('float32'), [81,])), 1)
call_9901 = relay.TupleGetItem(func_6239_call(relay.reshape(const_9900.astype('float32'), [81,])), 1)
uop_9915 = relay.asinh(bop_9887.astype('float32')) # shape=(6, 16, 9)
uop_9917 = relay.asinh(bop_9890.astype('float32')) # shape=(6, 16, 9)
func_102_call = mod.get_global_var('func_102')
func_106_call = mutated_mod.get_global_var('func_106')
var_9929 = relay.var("var_9929", dtype = "int16", shape = (1, 22))#candidate|9929|(1, 22)|var|int16
var_9930 = relay.var("var_9930", dtype = "int16", shape = (308,))#candidate|9930|(308,)|var|int16
call_9928 = relay.TupleGetItem(func_102_call(relay.reshape(var_9929.astype('int16'), [1, 2, 11]), relay.reshape(var_9930.astype('int16'), [14, 2, 11]), ), 0)
call_9931 = relay.TupleGetItem(func_106_call(relay.reshape(var_9929.astype('int16'), [1, 2, 11]), relay.reshape(var_9930.astype('int16'), [14, 2, 11]), ), 0)
output = relay.Tuple([call_9899,const_9900,uop_9915,call_9928,var_9929,var_9930,])
output2 = relay.Tuple([call_9901,const_9900,uop_9917,call_9931,var_9929,var_9930,])
func_9935 = relay.Function([var_9886,var_9929,var_9930,], output)
mod['func_9935'] = func_9935
mod = relay.transform.InferType()(mod)
var_9936 = relay.var("var_9936", dtype = "float64", shape = (6, 16, 9))#candidate|9936|(6, 16, 9)|var|float64
var_9937 = relay.var("var_9937", dtype = "int16", shape = (1, 22))#candidate|9937|(1, 22)|var|int16
var_9938 = relay.var("var_9938", dtype = "int16", shape = (308,))#candidate|9938|(308,)|var|int16
output = func_9935(var_9936,var_9937,var_9938,)
func_9939 = relay.Function([var_9936,var_9937,var_9938,], output)
mutated_mod['func_9939'] = func_9939
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5191_call = mod.get_global_var('func_5191')
func_5192_call = mutated_mod.get_global_var('func_5192')
call_9944 = relay.TupleGetItem(func_5191_call(), 2)
call_9945 = relay.TupleGetItem(func_5192_call(), 2)
output = call_9944
output2 = call_9945
func_9954 = relay.Function([], output)
mod['func_9954'] = func_9954
mod = relay.transform.InferType()(mod)
mutated_mod['func_9954'] = func_9954
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9954_call = mutated_mod.get_global_var('func_9954')
call_9955 = func_9954_call()
output = call_9955
func_9956 = relay.Function([], output)
mutated_mod['func_9956'] = func_9956
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8813_call = mod.get_global_var('func_8813')
func_8814_call = mutated_mod.get_global_var('func_8814')
call_9966 = func_8813_call()
call_9967 = func_8813_call()
func_6171_call = mod.get_global_var('func_6171')
func_6174_call = mutated_mod.get_global_var('func_6174')
const_10016 = relay.const([-3,-5,-2,-7,7,6,-6,4,10,-10,9,10,-6,-5,10,-2,-4,-2,-1,7,-3,-3,-2,10,-5,4,-8,-6,-7,-1,-9,-2,3,-1,4,-2,3,-6,4,-8,8,-3,-6,9,1,10,6,-3,7,3,6,-6,3,-3,-8,8,-2,-2,-9,4,2,10,-8,-7,8,4,-5,2,-4,7,-7,10,5,10,3,-1,-9,-5,3,2,9,-5,8,-4,-4,4,5,3,-6,-3,-6,-5,5,-2,1,-2,-9,7,-6,-10,2,-6,-10,7,1,-6,-4,1,-3,2,6,6,-2,-5,-4,1,-8,4,-5,5,-3,-2,-4,-8,8,2,-3,1,3,-6,-10,-4,-5,8,9,5,-4,1,-9,-4,-9,3,7,9,-10,7,-1,2,-9,-5,4,2,-4,6,2,-2,-8,-4,9,-5,8,10,-4,5,-3,-4,8,-4,7,-10,10,9,-7,3,4,-6,1,-2,-8,-10,7,7,8,-10,1,-3,1,9,4,-3,-9,3,-5,-8,-1,-4,-10,6,4,4,-5,6,-8,-2,-4,-1,4,-6,-8,-9,-3,-9,-8,3,-10,-7,4,9,-6,-4,-5,-7,10,5,-10,-9,1,-5,3,-1,5,-6,-1,2,-5,2,-3,1,4,9,4,4,6,-4,-9,9,-5,6,-9,7,-5,8,-8,9,-6,-4,8,6,1,-4,9,6,-10,3,-9,5,-9,-1,-3,1,-1,-10,4,3,-9,8,10,-5,-6,-10,-9,8,10,-7,10,-4,4,9,3,-5,-1,-2,5,-1,-6,-8,8], dtype = "int16")#candidate|10016|(297,)|const|int16
call_10015 = relay.TupleGetItem(func_6171_call(relay.reshape(const_10016.astype('int16'), [297,])), 2)
call_10017 = relay.TupleGetItem(func_6174_call(relay.reshape(const_10016.astype('int16'), [297,])), 2)
func_6529_call = mod.get_global_var('func_6529')
func_6530_call = mutated_mod.get_global_var('func_6530')
call_10019 = relay.TupleGetItem(func_6529_call(), 1)
call_10020 = relay.TupleGetItem(func_6530_call(), 1)
func_3706_call = mod.get_global_var('func_3706')
func_3708_call = mutated_mod.get_global_var('func_3708')
call_10028 = relay.TupleGetItem(func_3706_call(), 0)
call_10029 = relay.TupleGetItem(func_3708_call(), 0)
output = relay.Tuple([call_9966,call_10015,const_10016,call_10019,call_10028,])
output2 = relay.Tuple([call_9967,call_10017,const_10016,call_10020,call_10029,])
func_10031 = relay.Function([], output)
mod['func_10031'] = func_10031
mod = relay.transform.InferType()(mod)
mutated_mod['func_10031'] = func_10031
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10031_call = mutated_mod.get_global_var('func_10031')
call_10032 = func_10031_call()
output = call_10032
func_10033 = relay.Function([], output)
mutated_mod['func_10033'] = func_10033
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6785_call = mod.get_global_var('func_6785')
func_6786_call = mutated_mod.get_global_var('func_6786')
call_10072 = func_6785_call()
call_10073 = func_6785_call()
func_4410_call = mod.get_global_var('func_4410')
func_4413_call = mutated_mod.get_global_var('func_4413')
call_10078 = func_4410_call(relay.reshape(call_10072.astype('float32'), [7, 11, 6]))
call_10079 = func_4410_call(relay.reshape(call_10072.astype('float32'), [7, 11, 6]))
func_3901_call = mod.get_global_var('func_3901')
func_3903_call = mutated_mod.get_global_var('func_3903')
call_10080 = relay.TupleGetItem(func_3901_call(relay.reshape(call_10072.astype('float32'), [7, 11, 6])), 1)
call_10081 = relay.TupleGetItem(func_3903_call(relay.reshape(call_10072.astype('float32'), [7, 11, 6])), 1)
func_8889_call = mod.get_global_var('func_8889')
func_8890_call = mutated_mod.get_global_var('func_8890')
call_10083 = func_8889_call()
call_10084 = func_8889_call()
output = relay.Tuple([call_10072,call_10078,call_10080,call_10083,])
output2 = relay.Tuple([call_10073,call_10079,call_10081,call_10084,])
func_10085 = relay.Function([], output)
mod['func_10085'] = func_10085
mod = relay.transform.InferType()(mod)
mutated_mod['func_10085'] = func_10085
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10085_call = mutated_mod.get_global_var('func_10085')
call_10086 = func_10085_call()
output = call_10086
func_10087 = relay.Function([], output)
mutated_mod['func_10087'] = func_10087
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8899_call = mod.get_global_var('func_8899')
func_8900_call = mutated_mod.get_global_var('func_8900')
call_10094 = relay.TupleGetItem(func_8899_call(), 0)
call_10095 = relay.TupleGetItem(func_8900_call(), 0)
output = call_10094
output2 = call_10095
func_10096 = relay.Function([], output)
mod['func_10096'] = func_10096
mod = relay.transform.InferType()(mod)
output = func_10096()
func_10097 = relay.Function([], output)
mutated_mod['func_10097'] = func_10097
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5677_call = mod.get_global_var('func_5677')
func_5678_call = mutated_mod.get_global_var('func_5678')
call_10187 = func_5677_call()
call_10188 = func_5677_call()
func_8373_call = mod.get_global_var('func_8373')
func_8374_call = mutated_mod.get_global_var('func_8374')
call_10191 = relay.TupleGetItem(func_8373_call(), 1)
call_10192 = relay.TupleGetItem(func_8374_call(), 1)
output = relay.Tuple([call_10187,call_10191,])
output2 = relay.Tuple([call_10188,call_10192,])
func_10205 = relay.Function([], output)
mod['func_10205'] = func_10205
mod = relay.transform.InferType()(mod)
output = func_10205()
func_10206 = relay.Function([], output)
mutated_mod['func_10206'] = func_10206
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7024_call = mod.get_global_var('func_7024')
func_7026_call = mutated_mod.get_global_var('func_7026')
call_10241 = func_7024_call()
call_10242 = func_7024_call()
func_4915_call = mod.get_global_var('func_4915')
func_4918_call = mutated_mod.get_global_var('func_4918')
var_10246 = relay.var("var_10246", dtype = "int16", shape = (64, 12))#candidate|10246|(64, 12)|var|int16
call_10245 = relay.TupleGetItem(func_4915_call(relay.reshape(var_10246.astype('int16'), [768,])), 3)
call_10247 = relay.TupleGetItem(func_4918_call(relay.reshape(var_10246.astype('int16'), [768,])), 3)
output = relay.Tuple([call_10241,call_10245,var_10246,])
output2 = relay.Tuple([call_10242,call_10247,var_10246,])
func_10260 = relay.Function([var_10246,], output)
mod['func_10260'] = func_10260
mod = relay.transform.InferType()(mod)
var_10261 = relay.var("var_10261", dtype = "int16", shape = (64, 12))#candidate|10261|(64, 12)|var|int16
output = func_10260(var_10261)
func_10262 = relay.Function([var_10261], output)
mutated_mod['func_10262'] = func_10262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4848_call = mod.get_global_var('func_4848')
func_4850_call = mutated_mod.get_global_var('func_4850')
call_10292 = relay.TupleGetItem(func_4848_call(), 0)
call_10293 = relay.TupleGetItem(func_4850_call(), 0)
output = call_10292
output2 = call_10293
func_10335 = relay.Function([], output)
mod['func_10335'] = func_10335
mod = relay.transform.InferType()(mod)
output = func_10335()
func_10336 = relay.Function([], output)
mutated_mod['func_10336'] = func_10336
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10371 = relay.var("var_10371", dtype = "float32", shape = (12, 15, 14))#candidate|10371|(12, 15, 14)|var|float32
var_10372 = relay.var("var_10372", dtype = "float32", shape = (12, 15, 14))#candidate|10372|(12, 15, 14)|var|float32
bop_10373 = relay.not_equal(var_10371.astype('bool'), relay.reshape(var_10372.astype('bool'), relay.shape_of(var_10371))) # shape=(12, 15, 14)
func_7985_call = mod.get_global_var('func_7985')
func_7987_call = mutated_mod.get_global_var('func_7987')
call_10376 = relay.TupleGetItem(func_7985_call(), 1)
call_10377 = relay.TupleGetItem(func_7987_call(), 1)
func_3901_call = mod.get_global_var('func_3901')
func_3903_call = mutated_mod.get_global_var('func_3903')
call_10384 = relay.TupleGetItem(func_3901_call(relay.reshape(call_10376.astype('float32'), [7, 11, 6])), 2)
call_10385 = relay.TupleGetItem(func_3903_call(relay.reshape(call_10376.astype('float32'), [7, 11, 6])), 2)
func_4501_call = mod.get_global_var('func_4501')
func_4503_call = mutated_mod.get_global_var('func_4503')
const_10392 = relay.const([7,-9,-2,-10,-4,4,-4,-9,-10,-4,-6,-3,-8,-7,-4,-8,2,8,2,9,-2,-8,-7,-3,-7,-4,-4,10,-9,7,-3,-2,2,-1,8,2,4,-10,8,10,10,10,2,-6,-7,2,-7,7,6,4,7,-6,8,3,-9,3,8,3,-3,9,-1,-10,-9,8,4,-1,-9,-5,5,3,3,-5,-9,-1,9,-2,4,9,-10,9,10,-6,-9,4,-9,9,-2,2,-5,6,2,-4,-2,10,-9,-6,10,-6,3,2,10,3,-8,-5,-8,6,-9,-6,3,-4,6,-1,-2,-5,10,8,-1,-2,-7,-1,-8,-5,-7,-9,-9,-3,3,-1,-3,-9,-2,-1,-9,1,7,-9,10,3,6,-8,-5,10,-4,-10,-5,-8,-7,1,1,1,5,3,7,3,-8,-10,3,-8,1,4,10,-7,2,-4,-2,-2,-9,4,-1,-9,9,1,-9,9,-8,8,-8,6,2,4,6,-3,-1,1,4,-2,-1,-5,3,-2,8,10,4,-7,-7,-2,-6,-10,-2,10,2,6,-4,-6,4,7,-6,7,4,-8,-4,-6,5,-7,6,2,-7,3,-1,8,5,-9,-4,-4,-10,-9,-3,5,10,7,-9,-6,-7,-10,10,-4,-7,7,-9,10,-5,6,-6,8,-4,2,1,-2,8,7,-3,-2,-1,-2,2,-2,2,5,-8,4,7,7,-5,-8,-2,1,-5,-6,4,9,-1,-2,-8,1,-1,7,-2,-8,5,9,1,5,-3,-4,-10,-4,1,-3,5,4,10,6,8,-8,1,2,-7,2,7,-8,7,7,-8,-9,-6,-10,6,8,-1,-9,-6,-8,8,-5,-4,-4,-5,-10,-3,5,-2,8,1,6,-6,4,-7,-5,10,2,2,-4,-8,9,3,-3,-1,7,-10,-3,9,6,-10,1,-10,-6,10,9,-6,9,4,-6,-4,-6,5,1,-7,-2,-8,10,7,-8,8,2,8,5,5,7,-4,6,-10,-5,-3,-5,9,7,-3,-2,-4,5,8,-4,-1,4,3,9,6,4,3,8,-7,8,2,9,6,10,5,-7,-6,-4,-1,-6,-8,-4,-10,-3,-9,-4,-2,-9,-8,2,-6,8,10,-2,-6,7,7,-5,6,-3,-10,6,-10,10,-3,-9,-1,-2,10,3,-2,-2,-4,7,6,4,5,-7,2,-10,10,-5,-8,-4,-1,-8,7,-4,-8,10,-9,9,-2,-10,4,3,-1,6,5,10,7,1,-8,7,-5,10,-1,1,-3,-10,-1,4,-3,-3,-10,-6,-1,-5,1,-4,8,2,1,3,-4,-5,-7,-9,9,1,-5,8,-6,-4,4,-5,2,-10,-1,-10,-9,10,-4,-8,-10,-2,-8,10,5,10,6,2,3,2,6,-8,9,-2,-6,-3,1,-1,6,-2,-7,-10,6,-2,3,-2,8,-5,10,7,10,-2,5,-10,7,4,2,9,-8,-8,5,-2,-2,7,6,9,5,-7,-7,3,-6,-9,3,-6,-7,1,-4,4,-2,9,-6,-4,-2,-1,-7,-4,-1,9,1,2,10,1,-8,4,-7,-8,3,-5,-4,-5,-1,1,-4,-6,8,2,-1,5,-7,9,-4,-6,-2,6,-7,6,2,2,10,8,5,-9,2,-8,-3,-10,8,7,-6,6,4,3,-1,-1,-2,2,-10,6,3,2,2,6,-9,-10,4,10,7,-5,10,-3,6,2,4,-1,-3,-4,4,-5,-1,-7,10,-4,-5,-9,-6,9,-6,9,10,-9,-2,10,-3,8,-1,-2,4,-9,-6,4,-1,-3,6,8,-3,-1,-2,-2,7,2,4,-8,-9,-9,-9,6,-6,8,-4,-9,5,-3,-10,-3,-6,4,6,-10,3,1,-10,2,7,-1,-8,9,10,-2,8,7,10,-4,5,3,-1,10,3,-1,-5,3,-3,-9,-6,-3,-10,-8,4,-9,6,-1,-8,10,4,-6,-4,-2,-3,9,-6,4,5,-6,-6,9,9,-2,-10,2,6,5,-7,8,-2,9,-9,3,7,-4,8,-8,5,6,2,1,6,-9,-5,-2,4,-4,-4,-1], dtype = "int16")#candidate|10392|(768,)|const|int16
call_10391 = relay.TupleGetItem(func_4501_call(relay.reshape(const_10392.astype('int16'), [8, 6, 16])), 2)
call_10393 = relay.TupleGetItem(func_4503_call(relay.reshape(const_10392.astype('int16'), [8, 6, 16])), 2)
func_5567_call = mod.get_global_var('func_5567')
func_5570_call = mutated_mod.get_global_var('func_5570')
var_10403 = relay.var("var_10403", dtype = "float32", shape = (81,))#candidate|10403|(81,)|var|float32
var_10404 = relay.var("var_10404", dtype = "float64", shape = (1260,))#candidate|10404|(1260,)|var|float64
call_10402 = relay.TupleGetItem(func_5567_call(relay.reshape(var_10403.astype('float32'), [81,]), relay.reshape(var_10404.astype('float64'), [3, 420]), ), 6)
call_10405 = relay.TupleGetItem(func_5570_call(relay.reshape(var_10403.astype('float32'), [81,]), relay.reshape(var_10404.astype('float64'), [3, 420]), ), 6)
output = relay.Tuple([bop_10373,call_10376,call_10384,call_10391,const_10392,call_10402,var_10403,var_10404,])
output2 = relay.Tuple([bop_10373,call_10377,call_10385,call_10393,const_10392,call_10405,var_10403,var_10404,])
func_10414 = relay.Function([var_10371,var_10372,var_10403,var_10404,], output)
mod['func_10414'] = func_10414
mod = relay.transform.InferType()(mod)
mutated_mod['func_10414'] = func_10414
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10414_call = mutated_mod.get_global_var('func_10414')
var_10416 = relay.var("var_10416", dtype = "float32", shape = (12, 15, 14))#candidate|10416|(12, 15, 14)|var|float32
var_10417 = relay.var("var_10417", dtype = "float32", shape = (12, 15, 14))#candidate|10417|(12, 15, 14)|var|float32
var_10418 = relay.var("var_10418", dtype = "float32", shape = (81,))#candidate|10418|(81,)|var|float32
var_10419 = relay.var("var_10419", dtype = "float64", shape = (1260,))#candidate|10419|(1260,)|var|float64
call_10415 = func_10414_call(var_10416,var_10417,var_10418,var_10419,)
output = call_10415
func_10420 = relay.Function([var_10416,var_10417,var_10418,var_10419,], output)
mutated_mod['func_10420'] = func_10420
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8067_call = mod.get_global_var('func_8067')
func_8068_call = mutated_mod.get_global_var('func_8068')
call_10485 = relay.TupleGetItem(func_8067_call(), 0)
call_10486 = relay.TupleGetItem(func_8068_call(), 0)
func_5109_call = mod.get_global_var('func_5109')
func_5113_call = mutated_mod.get_global_var('func_5113')
var_10499 = relay.var("var_10499", dtype = "int16", shape = (22,))#candidate|10499|(22,)|var|int16
var_10500 = relay.var("var_10500", dtype = "int16", shape = (77, 4))#candidate|10500|(77, 4)|var|int16
call_10498 = relay.TupleGetItem(func_5109_call(relay.reshape(var_10499.astype('int16'), [22,]), relay.reshape(var_10500.astype('int16'), [308,]), ), 0)
call_10501 = relay.TupleGetItem(func_5113_call(relay.reshape(var_10499.astype('int16'), [22,]), relay.reshape(var_10500.astype('int16'), [308,]), ), 0)
func_7890_call = mod.get_global_var('func_7890')
func_7892_call = mutated_mod.get_global_var('func_7892')
call_10513 = func_7890_call()
call_10514 = func_7890_call()
var_10517 = relay.var("var_10517", dtype = "int16", shape = (77, 4))#candidate|10517|(77, 4)|var|int16
bop_10518 = relay.greater_equal(var_10500.astype('bool'), relay.reshape(var_10517.astype('bool'), relay.shape_of(var_10500))) # shape=(77, 4)
func_5567_call = mod.get_global_var('func_5567')
func_5570_call = mutated_mod.get_global_var('func_5570')
const_10524 = relay.const([-5.001666,-3.331186,-8.033778,5.013184,5.029996,-6.154562,7.263883,-9.418977,0.040922,-9.562194,-3.621454,6.557044,3.782552,-1.791258,1.925556,-5.428211,3.551803,0.910040,1.746118,-0.399355,-8.731790,-0.181030,-1.062895,1.688998,3.300757,1.733988,-0.658382,-2.650764,0.519484,0.592210,-1.976553,-9.166309,-8.378136,7.079939,-0.906222,-1.958608,-3.570556,-5.768665,7.828701,-1.872050,7.055720,-4.944035,-2.219850,-0.599231,8.389366,-7.620046,0.558853,6.346265,6.258679,4.936946,-8.538765,-6.809984,-9.474802,-4.997942,-0.104852,3.879569,-4.258301,9.505866,-6.752396,-9.318619,1.372460,1.262725,-8.239389,-0.824899,-9.220959,1.508418,9.000320,1.309221,4.175197,4.315777,4.658928,0.508252,-5.238561,-7.214798,-7.769157,-8.083866,-4.378490,-0.881799,7.008354,-9.534340,5.166748], dtype = "float32")#candidate|10524|(81,)|const|float32
var_10525 = relay.var("var_10525", dtype = "float64", shape = (1260,))#candidate|10525|(1260,)|var|float64
call_10523 = relay.TupleGetItem(func_5567_call(relay.reshape(const_10524.astype('float32'), [81,]), relay.reshape(var_10525.astype('float64'), [3, 420]), ), 3)
call_10526 = relay.TupleGetItem(func_5570_call(relay.reshape(const_10524.astype('float32'), [81,]), relay.reshape(var_10525.astype('float64'), [3, 420]), ), 3)
output = relay.Tuple([call_10485,call_10498,var_10499,call_10513,bop_10518,call_10523,const_10524,var_10525,])
output2 = relay.Tuple([call_10486,call_10501,var_10499,call_10514,bop_10518,call_10526,const_10524,var_10525,])
func_10536 = relay.Function([var_10499,var_10500,var_10517,var_10525,], output)
mod['func_10536'] = func_10536
mod = relay.transform.InferType()(mod)
mutated_mod['func_10536'] = func_10536
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10536_call = mutated_mod.get_global_var('func_10536')
var_10538 = relay.var("var_10538", dtype = "int16", shape = (22,))#candidate|10538|(22,)|var|int16
var_10539 = relay.var("var_10539", dtype = "int16", shape = (77, 4))#candidate|10539|(77, 4)|var|int16
var_10540 = relay.var("var_10540", dtype = "int16", shape = (77, 4))#candidate|10540|(77, 4)|var|int16
var_10541 = relay.var("var_10541", dtype = "float64", shape = (1260,))#candidate|10541|(1260,)|var|float64
call_10537 = func_10536_call(var_10538,var_10539,var_10540,var_10541,)
output = call_10537
func_10542 = relay.Function([var_10538,var_10539,var_10540,var_10541,], output)
mutated_mod['func_10542'] = func_10542
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5677_call = mod.get_global_var('func_5677')
func_5678_call = mutated_mod.get_global_var('func_5678')
call_10799 = func_5677_call()
call_10800 = func_5677_call()
output = relay.Tuple([call_10799,])
output2 = relay.Tuple([call_10800,])
func_10801 = relay.Function([], output)
mod['func_10801'] = func_10801
mod = relay.transform.InferType()(mod)
mutated_mod['func_10801'] = func_10801
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10801_call = mutated_mod.get_global_var('func_10801')
call_10802 = func_10801_call()
output = call_10802
func_10803 = relay.Function([], output)
mutated_mod['func_10803'] = func_10803
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5191_call = mod.get_global_var('func_5191')
func_5192_call = mutated_mod.get_global_var('func_5192')
call_10835 = relay.TupleGetItem(func_5191_call(), 0)
call_10836 = relay.TupleGetItem(func_5192_call(), 0)
output = call_10835
output2 = call_10836
func_10839 = relay.Function([], output)
mod['func_10839'] = func_10839
mod = relay.transform.InferType()(mod)
mutated_mod['func_10839'] = func_10839
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10839_call = mutated_mod.get_global_var('func_10839')
call_10840 = func_10839_call()
output = call_10840
func_10841 = relay.Function([], output)
mutated_mod['func_10841'] = func_10841
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4081_call = mod.get_global_var('func_4081')
func_4082_call = mutated_mod.get_global_var('func_4082')
call_10881 = func_4081_call()
call_10882 = func_4081_call()
func_9676_call = mod.get_global_var('func_9676')
func_9679_call = mutated_mod.get_global_var('func_9679')
call_10898 = relay.TupleGetItem(func_9676_call(relay.reshape(call_10881.astype('float64'), [7, 11, 6])), 0)
call_10899 = relay.TupleGetItem(func_9679_call(relay.reshape(call_10881.astype('float64'), [7, 11, 6])), 0)
func_9496_call = mod.get_global_var('func_9496')
func_9498_call = mutated_mod.get_global_var('func_9498')
call_10902 = relay.TupleGetItem(func_9496_call(), 0)
call_10903 = relay.TupleGetItem(func_9498_call(), 0)
output = relay.Tuple([call_10881,call_10898,call_10902,])
output2 = relay.Tuple([call_10882,call_10899,call_10903,])
func_10907 = relay.Function([], output)
mod['func_10907'] = func_10907
mod = relay.transform.InferType()(mod)
mutated_mod['func_10907'] = func_10907
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10907_call = mutated_mod.get_global_var('func_10907')
call_10908 = func_10907_call()
output = call_10908
func_10909 = relay.Function([], output)
mutated_mod['func_10909'] = func_10909
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10839_call = mod.get_global_var('func_10839')
func_10841_call = mutated_mod.get_global_var('func_10841')
call_10984 = func_10839_call()
call_10985 = func_10839_call()
output = call_10984
output2 = call_10985
func_10991 = relay.Function([], output)
mod['func_10991'] = func_10991
mod = relay.transform.InferType()(mod)
output = func_10991()
func_10992 = relay.Function([], output)
mutated_mod['func_10992'] = func_10992
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7507_call = mod.get_global_var('func_7507')
func_7508_call = mutated_mod.get_global_var('func_7508')
call_10998 = func_7507_call()
call_10999 = func_7507_call()
func_4410_call = mod.get_global_var('func_4410')
func_4413_call = mutated_mod.get_global_var('func_4413')
call_11015 = func_4410_call(relay.reshape(call_10998.astype('float32'), [7, 11, 6]))
call_11016 = func_4410_call(relay.reshape(call_10998.astype('float32'), [7, 11, 6]))
func_7593_call = mod.get_global_var('func_7593')
func_7594_call = mutated_mod.get_global_var('func_7594')
call_11041 = relay.TupleGetItem(func_7593_call(), 0)
call_11042 = relay.TupleGetItem(func_7594_call(), 0)
func_8168_call = mod.get_global_var('func_8168')
func_8170_call = mutated_mod.get_global_var('func_8170')
call_11043 = relay.TupleGetItem(func_8168_call(), 2)
call_11044 = relay.TupleGetItem(func_8170_call(), 2)
func_10536_call = mod.get_global_var('func_10536')
func_10542_call = mutated_mod.get_global_var('func_10542')
const_11050 = relay.const([9,-8,6,1,9,4,7,-2,-10,5,-7,1,7,-10,-1,6,-6,8,-6,9,6,-1], dtype = "int16")#candidate|11050|(22,)|const|int16
const_11051 = relay.const([10,-6,-7,1,7,-9,10,-4,1,-9,-4,-7,-2,8,6,9,-5,2,-8,-9,10,3,-9,6,-7,-10,-4,5,1,-1,1,4,5,-7,10,9,5,2,1,7,-7,-10,-5,6,2,-3,-5,8,-5,-4,-4,-7,-7,6,-10,-7,-1,7,3,4,-1,8,-5,8,5,5,7,8,-2,1,9,-1,4,-8,1,2,-8,10,9,3,1,3,1,-1,8,-7,9,-7,5,-2,7,10,6,-9,9,-1,2,-8,7,-6,-3,-4,-10,-7,-8,3,5,-1,3,-10,-3,-1,-4,8,10,8,6,6,-3,-10,4,-6,-7,3,-8,10,-3,8,10,9,-9,-3,-9,10,-4,2,-6,-10,-5,2,-6,-7,-3,-6,-3,5,2,-7,-7,-2,9,-10,4,9,2,5,4,-7,-8,-2,-6,1,4,-8,6,1,-3,2,10,-7,3,-8,-5,-3,-8,4,-1,3,-4,4,10,-5,6,-2,-1,9,-2,-10,-4,2,8,-7,2,4,-10,7,-6,2,-2,-10,-3,4,6,4,8,1,9,-5,-5,-8,9,-4,8,7,-10,10,6,1,-9,-1,9,3,7,1,-8,6,4,10,-5,1,-6,1,6,-3,6,-2,-3,7,4,1,-8,-7,6,-6,6,8,-2,-3,2,-3,-9,7,1,-1,3,7,10,6,1,9,-3,9,-8,4,-10,2,4,-9,-3,-2,-4,-8,10,2,-9,-9,8,8,2,-7,8,2,-9,9,-3,8,7,-4,1,-8,-7,-3,-9,-2,-10,5,-8,-10,-8,-9,-9,10,3,2,-8,-6,-9,9], dtype = "int16")#candidate|11051|(308,)|const|int16
var_11052 = relay.var("var_11052", dtype = "float64", shape = (1260,))#candidate|11052|(1260,)|var|float64
call_11049 = relay.TupleGetItem(func_10536_call(relay.reshape(const_11050.astype('int16'), [22,]), relay.reshape(const_11051.astype('int16'), [77, 4]), relay.reshape(const_11051.astype('int16'), [77, 4]), relay.reshape(var_11052.astype('float64'), [1260,]), ), 0)
call_11053 = relay.TupleGetItem(func_10542_call(relay.reshape(const_11050.astype('int16'), [22,]), relay.reshape(const_11051.astype('int16'), [77, 4]), relay.reshape(const_11051.astype('int16'), [77, 4]), relay.reshape(var_11052.astype('float64'), [1260,]), ), 0)
output = relay.Tuple([call_10998,call_11015,call_11041,call_11043,call_11049,const_11050,const_11051,var_11052,])
output2 = relay.Tuple([call_10999,call_11016,call_11042,call_11044,call_11053,const_11050,const_11051,var_11052,])
func_11059 = relay.Function([var_11052,], output)
mod['func_11059'] = func_11059
mod = relay.transform.InferType()(mod)
var_11060 = relay.var("var_11060", dtype = "float64", shape = (1260,))#candidate|11060|(1260,)|var|float64
output = func_11059(var_11060)
func_11061 = relay.Function([var_11060], output)
mutated_mod['func_11061'] = func_11061
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8797_call = mod.get_global_var('func_8797')
func_8798_call = mutated_mod.get_global_var('func_8798')
call_11063 = relay.TupleGetItem(func_8797_call(), 1)
call_11064 = relay.TupleGetItem(func_8798_call(), 1)
func_10205_call = mod.get_global_var('func_10205')
func_10206_call = mutated_mod.get_global_var('func_10206')
call_11088 = relay.TupleGetItem(func_10205_call(), 0)
call_11089 = relay.TupleGetItem(func_10206_call(), 0)
output = relay.Tuple([call_11063,call_11088,])
output2 = relay.Tuple([call_11064,call_11089,])
func_11101 = relay.Function([], output)
mod['func_11101'] = func_11101
mod = relay.transform.InferType()(mod)
mutated_mod['func_11101'] = func_11101
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11101_call = mutated_mod.get_global_var('func_11101')
call_11102 = func_11101_call()
output = call_11102
func_11103 = relay.Function([], output)
mutated_mod['func_11103'] = func_11103
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11143 = relay.var("var_11143", dtype = "int32", shape = (10, 16, 3))#candidate|11143|(10, 16, 3)|var|int32
var_11144 = relay.var("var_11144", dtype = "int32", shape = (10, 16, 3))#candidate|11144|(10, 16, 3)|var|int32
bop_11145 = relay.greater_equal(var_11143.astype('bool'), relay.reshape(var_11144.astype('bool'), relay.shape_of(var_11143))) # shape=(10, 16, 3)
func_10260_call = mod.get_global_var('func_10260')
func_10262_call = mutated_mod.get_global_var('func_10262')
const_11168 = relay.const([-3,-9,8,4,-3,-7,-5,3,10,10,3,-9,3,6,-1,9,4,4,9,5,-4,-9,3,-4,-4,-4,2,-3,-5,6,-6,10,10,3,-6,1,1,1,-6,6,9,6,3,6,-8,6,7,5,-1,-7,9,9,10,5,-4,5,-2,5,-10,-5,-5,-2,6,10,-8,-6,-6,8,-6,-1,5,-4,-7,-2,1,-7,8,-7,-9,-4,5,-5,-7,-7,9,3,-4,-10,-7,-9,-2,5,6,-6,10,-3,10,-5,4,-1,-10,6,3,-6,-2,9,1,-6,5,-1,2,9,5,-10,-6,1,-7,-9,-7,-9,1,-3,-1,9,-2,10,-8,7,-2,10,10,-1,10,-5,8,6,-5,2,-9,-1,-3,5,9,5,-1,-9,-8,-7,-2,-5,-10,10,9,1,-4,9,5,-9,7,8,-8,-10,7,7,4,2,3,9,-5,-2,-5,6,-6,-8,10,-3,-3,7,2,1,-5,10,-6,-10,3,10,4,10,5,-4,-4,-3,2,6,3,-10,10,-6,2,7,-9,-3,-7,4,-3,-6,7,-3,-9,-3,-6,-3,-4,5,5,1,-1,9,-9,1,-5,-8,-6,1,2,10,-8,6,-1,8,-3,10,-3,-3,3,-4,-10,-1,5,-4,10,5,-8,-2,10,-5,-8,8,-5,6,4,8,-2,10,3,-6,-9,-2,2,6,-3,8,5,5,-6,7,8,-3,4,-2,1,-1,9,-7,-7,-6,3,2,-9,-7,-5,-4,-10,7,-2,5,7,4,-9,-8,6,-5,-9,9,3,10,2,2,10,-8,-8,-6,8,10,2,4,-5,7,5,9,-1,5,-4,-7,-8,-9,-7,1,6,3,-1,-4,-7,10,6,-1,10,-2,6,-1,4,9,6,7,3,-7,-8,-1,-3,-8,-10,-8,6,9,7,6,-9,-3,7,6,-1,-4,-6,-5,-6,8,3,-8,-3,-2,-6,-4,-3,1,-8,-10,10,7,9,-2,4,-10,-5,-7,-5,1,-5,-8,3,-10,6,9,2,-1,7,-5,-5,-9,3,-9,2,2,8,-10,9,1,8,1,-5,2,-8,-4,-1,-3,6,5,-3,-7,-8,1,7,-3,3,6,8,3,-6,-1,7,-3,6,-3,6,-10,-9,2,-7,10,10,-2,-5,-8,-10,-7,-1,-2,-8,-5,-8,-9,-10,-2,7,-8,9,9,5,-2,4,-3,-10,3,-1,4,-5,-6,-5,3,2,9,5,5,3,6,9,-4,6,10,-8,-9,-7,-10,-5,4,-8,1,9,3,5,3,1,-4,-5,-8,-9,7,-4,-8,-4,8,-3,5,-5,8,-8,-4,8,-7,2,-7,-2,7,-1,-5,-7,-7,2,-4,10,6,3,-8,10,6,-9,-3,7,-7,4,5,6,4,4,6,-2,-4,4,9,-7,6,-8,-9,10,5,-9,-7,-4,5,-1,-4,5,1,3,-3,-5,-8,-9,-7,-4,-3,7,-8,-3,9,-7,-6,-4,-2,-6,-7,6,-3,-4,-4,-7,1,-8,-2,-3,-2,5,-3,-6,-4,-3,-3,-6,-6,9,9,6,7,-9,5,-2,-4,-7,-6,5,-7,-10,-7,-9,9,2,1,7,4,-8,10,5,5,-3,7,2,6,6,-10,-6,-10,-6,8,10,-9,-10,6,-5,9,5,-7,2,7,-9,-1,-8,5,4,7,-3,2,-9,9,3,-5,-4,3,8,-1,9,-3,-5,-10,10,-2,-8,-6,-5,1,3,-4,10,2,-9,6,7,6,-8,10,6,10,-6,-8,-1,9,-9,-2,2,7,-9,1,4,9,-4,9,10,-1,-10,-9,2,-7,-3,-9,3,8,1,-9,7,-7,6,10,-7,-6,1,-10,-3,5,-5,3,-10,-9,2,-4,-5,-1,-8,9,-1,-2,8,7,-8,9,7,-1,-5,-8,8,8,-2,2,-8,-5,6,3,-1,7,-5,5,10,-8,4,-2,7,-6,6,1,1,-5,7,-8,2,-10,-4,10,-8,-9,-6,7,-10,4,-2,-2,-3,7,8,-8,3,-7,2,-10,-6,7,9,-7,6,7,-8,-9], dtype = "int16")#candidate|11168|(768,)|const|int16
call_11167 = relay.TupleGetItem(func_10260_call(relay.reshape(const_11168.astype('int16'), [64, 12])), 2)
call_11169 = relay.TupleGetItem(func_10262_call(relay.reshape(const_11168.astype('int16'), [64, 12])), 2)
output = relay.Tuple([bop_11145,call_11167,const_11168,])
output2 = relay.Tuple([bop_11145,call_11169,const_11168,])
func_11174 = relay.Function([var_11143,var_11144,], output)
mod['func_11174'] = func_11174
mod = relay.transform.InferType()(mod)
var_11175 = relay.var("var_11175", dtype = "int32", shape = (10, 16, 3))#candidate|11175|(10, 16, 3)|var|int32
var_11176 = relay.var("var_11176", dtype = "int32", shape = (10, 16, 3))#candidate|11176|(10, 16, 3)|var|int32
output = func_11174(var_11175,var_11176,)
func_11177 = relay.Function([var_11175,var_11176,], output)
mutated_mod['func_11177'] = func_11177
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5854_call = mod.get_global_var('func_5854')
func_5856_call = mutated_mod.get_global_var('func_5856')
call_11190 = relay.TupleGetItem(func_5854_call(), 2)
call_11191 = relay.TupleGetItem(func_5856_call(), 2)
func_5237_call = mod.get_global_var('func_5237')
func_5239_call = mutated_mod.get_global_var('func_5239')
call_11195 = relay.TupleGetItem(func_5237_call(relay.reshape(call_11190.astype('float64'), [7, 11, 6])), 0)
call_11196 = relay.TupleGetItem(func_5239_call(relay.reshape(call_11190.astype('float64'), [7, 11, 6])), 0)
func_9477_call = mod.get_global_var('func_9477')
func_9478_call = mutated_mod.get_global_var('func_9478')
call_11211 = relay.TupleGetItem(func_9477_call(), 0)
call_11212 = relay.TupleGetItem(func_9478_call(), 0)
output = relay.Tuple([call_11190,call_11195,call_11211,])
output2 = relay.Tuple([call_11191,call_11196,call_11212,])
func_11223 = relay.Function([], output)
mod['func_11223'] = func_11223
mod = relay.transform.InferType()(mod)
output = func_11223()
func_11224 = relay.Function([], output)
mutated_mod['func_11224'] = func_11224
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7649_call = mod.get_global_var('func_7649')
func_7650_call = mutated_mod.get_global_var('func_7650')
call_11227 = relay.TupleGetItem(func_7649_call(), 0)
call_11228 = relay.TupleGetItem(func_7650_call(), 0)
func_6279_call = mod.get_global_var('func_6279')
func_6282_call = mutated_mod.get_global_var('func_6282')
var_11239 = relay.var("var_11239", dtype = "float32", shape = (2912,))#candidate|11239|(2912,)|var|float32
var_11240 = relay.var("var_11240", dtype = "float64", shape = (132,))#candidate|11240|(132,)|var|float64
call_11238 = relay.TupleGetItem(func_6279_call(relay.reshape(var_11239.astype('float32'), [14, 16, 13]), relay.reshape(var_11240.astype('float64'), [132,]), ), 1)
call_11241 = relay.TupleGetItem(func_6282_call(relay.reshape(var_11239.astype('float32'), [14, 16, 13]), relay.reshape(var_11240.astype('float64'), [132,]), ), 1)
func_6594_call = mod.get_global_var('func_6594')
func_6596_call = mutated_mod.get_global_var('func_6596')
call_11254 = func_6594_call()
call_11255 = func_6594_call()
output = relay.Tuple([call_11227,call_11238,var_11239,var_11240,call_11254,])
output2 = relay.Tuple([call_11228,call_11241,var_11239,var_11240,call_11255,])
func_11275 = relay.Function([var_11239,var_11240,], output)
mod['func_11275'] = func_11275
mod = relay.transform.InferType()(mod)
var_11276 = relay.var("var_11276", dtype = "float32", shape = (2912,))#candidate|11276|(2912,)|var|float32
var_11277 = relay.var("var_11277", dtype = "float64", shape = (132,))#candidate|11277|(132,)|var|float64
output = func_11275(var_11276,var_11277,)
func_11278 = relay.Function([var_11276,var_11277,], output)
mutated_mod['func_11278'] = func_11278
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11285 = relay.var("var_11285", dtype = "float64", shape = (5, 12, 2))#candidate|11285|(5, 12, 2)|var|float64
uop_11286 = relay.tan(var_11285.astype('float64')) # shape=(5, 12, 2)
output = relay.Tuple([uop_11286,])
output2 = relay.Tuple([uop_11286,])
func_11298 = relay.Function([var_11285,], output)
mod['func_11298'] = func_11298
mod = relay.transform.InferType()(mod)
mutated_mod['func_11298'] = func_11298
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11299 = relay.var("var_11299", dtype = "float64", shape = (5, 12, 2))#candidate|11299|(5, 12, 2)|var|float64
func_11298_call = mutated_mod.get_global_var('func_11298')
call_11300 = func_11298_call(var_11299)
output = call_11300
func_11301 = relay.Function([var_11299], output)
mutated_mod['func_11301'] = func_11301
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11312 = relay.var("var_11312", dtype = "float32", shape = (10, 10, 6))#candidate|11312|(10, 10, 6)|var|float32
uop_11313 = relay.acos(var_11312.astype('float32')) # shape=(10, 10, 6)
output = uop_11313
output2 = uop_11313
func_11319 = relay.Function([var_11312,], output)
mod['func_11319'] = func_11319
mod = relay.transform.InferType()(mod)
mutated_mod['func_11319'] = func_11319
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11320 = relay.var("var_11320", dtype = "float32", shape = (10, 10, 6))#candidate|11320|(10, 10, 6)|var|float32
func_11319_call = mutated_mod.get_global_var('func_11319')
call_11321 = func_11319_call(var_11320)
output = call_11321
func_11322 = relay.Function([var_11320], output)
mutated_mod['func_11322'] = func_11322
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7032_call = mod.get_global_var('func_7032')
func_7034_call = mutated_mod.get_global_var('func_7034')
call_11380 = func_7032_call()
call_11381 = func_7032_call()
func_7440_call = mod.get_global_var('func_7440')
func_7443_call = mutated_mod.get_global_var('func_7443')
const_11397 = relay.const([2.785426,-1.954917,9.856544,-6.641171,4.869989,7.916939,-4.368545,3.559595,9.681782,0.888388,-6.690349,8.773642,1.275911,-9.668355,2.309008,0.864128,5.725999,-0.283453,0.456339,5.337147,-0.614729,4.710956,-6.903530,-8.707991,1.575006,-5.227525,-6.989231,1.212636,-7.309872,-5.498382,6.446907,-5.709334,-2.594672,-9.331583,5.360773,-8.396864,-1.521359,-5.406203,-5.073430,-2.805955,7.707970,1.903426,1.963384,1.317023,-3.642745,7.000547,2.136617,-4.710669,9.025853,1.371861,-8.739363,-2.821560,9.647486,2.378117,9.160742,3.592638,5.993012,-6.914608,-6.593474,-6.572559,-5.407203,-0.346167,7.138124,7.694470,9.581624,-1.236186,-3.684017,-9.650434,6.099186,7.051822,-2.194522,1.451619,7.401584,-4.760511,1.928658,-2.488766,-2.594410,2.640584,6.268382,-3.208144,1.733054], dtype = "float32")#candidate|11397|(81,)|const|float32
const_11398 = relay.const([9.274848,5.842831,-0.636567,-7.798572,3.414984,5.735342,3.195875,-7.959267,-8.613618,-8.020212,7.271712,-8.072722,7.771394,-6.785826,6.471992,-7.408426,-2.882244,1.906732,8.390084,5.084825,3.691626,-9.376801,3.713260,-4.214549,-3.552213,-5.694520,9.198169,8.449280,-1.207421,8.184086,-8.011702,0.114080,0.970154,6.647491,-6.461761,-2.674295,1.997351,-8.613058,1.793279,1.189853,1.313300,8.452655,-7.068944,6.817288,-7.369151,0.242966,8.063124,-7.587937,4.121153,4.166346,-5.743071,-5.220037,5.117735,-2.294050,0.991779,-7.805325,0.279940,0.644071,-8.237065,3.531865,3.906327,6.050445,8.493848,-0.875074,2.668573,-2.710402,7.904592,-7.651776,6.314076,0.439289,-1.889261,7.191471,-6.709005,3.171364,-1.587255,8.529568,9.433035,-6.469597,-3.522470,-9.330764,-4.041199,6.714727,9.973811,-2.810855,7.047608,5.944084,6.683099,9.939017,-5.569723,6.636680,3.065954,-5.964744,2.402209,7.161493,2.693993,-3.665774,-4.585780,0.093821,8.394494,-9.316510,-9.468032,-1.892528,9.458415,2.638028,-7.188990,-3.233944,5.975661,2.427635,0.249702,0.725852,-0.013325,-6.745519,6.784508,-7.655533,-8.755381,4.353028,-6.708693,-3.534598,-9.609548,7.023957,-6.807013,-8.199500,4.887352,4.475634,2.777855,2.377459,-2.774217,-0.032783,-4.783859,-6.925166,-9.113283,4.275793,0.767701,-7.817204,1.643248,-0.004209,7.737587,7.129945,-9.649049,4.677223,7.584701,9.283454,-2.038718,-5.256941,-8.137825,3.914263,-4.932377,-3.967116,3.675391,6.898555,-2.040189,-6.675903,2.700237,-1.440186,-0.476224,6.051408,5.722443,3.738699,-6.481210,-3.337129,-3.745353,9.928409,-8.711954,-9.995499,-2.425372,-9.813675,-5.248467,-7.279107,-5.828243,9.862303,-6.992126,5.113311,-3.896543,-5.392070,-2.412262,5.833246,-1.947626,2.743272,-2.327773,-8.057507,-3.198433,-9.122950,-9.048591,-2.109914,4.383792,5.655107,-1.452514,8.033021,-9.899793,2.026105,-8.643346,4.847203,-8.080114,5.490323,5.350738,1.377298,-8.608671,-7.235145,2.107371,-1.876019,-3.494013,-7.103304,-4.865787,3.663627,7.864453,4.290486,-6.265786,9.773380,6.390616,3.864306,-7.585002,-2.137360,-9.352153,6.338893,7.601854,9.681648,-6.647164,-7.951109,0.799374,6.142622,9.670614,0.474927,3.971698,-2.940480,9.929111,2.019610,-3.748147,9.271721,-0.888055,-6.475072,-6.912600,-7.729761,-5.276841,4.413063,-3.154157,-3.462727,2.356316,3.571529,-0.150811,6.256357,-8.624466,-3.790743,7.409638,0.718994,-2.862250,3.807305,1.238011,5.489226,4.473504,-1.482742,4.471140,2.987598,-9.482770,-6.311706,-0.530877,-2.591858,-9.628261,7.001649,-6.742162,-4.932302,1.709790,2.731109,0.838872,-5.615252,4.350095,-4.258630,3.445875,3.946615,7.711896,6.461840,-0.403130,-8.988549,-9.054705,-3.132350,-5.659287,5.931749,-1.279470,4.952519,-6.696239,-2.646938,-0.584259,-4.598399,-5.508262,3.043235,4.245059,8.632970,-5.456855,1.081703,-9.348257,-8.161277,-4.100064,-5.190607,-2.924313,-9.523316,4.409628,4.490471,1.683156,4.668420,2.772322,1.280773,3.153485,-9.805744,-6.363714,-3.706949,0.309004,-1.716370,6.999466,0.818425,-2.095183,-9.896374,-3.241701,3.091939,4.580280,-7.172402,8.406058,-1.366428,-0.020779,-9.127383,-9.046277,1.381759,2.059871,6.581863,-0.526403,3.181156,-9.555510,-6.175419,3.429420,-4.176800,4.455901,8.904362,6.425660,5.661015,0.597507,-8.029373,4.182141,9.079087,0.008061,1.099201,7.309617,-3.292474,-5.827163,0.622785,-6.830733,-8.478147,-8.500082,-7.889509,8.318706,1.557518,-6.609390,-4.119834,-8.359289,-6.627727,-6.993580,0.694218,-5.654838,0.396074,1.090784,-3.299621,9.337952,3.182816,9.393744,3.053358,4.044710,8.979044,-0.563629,3.049541,5.128653,6.105293,6.045137,-7.346970,-1.282920,-8.764246,-5.938032,-5.027647,-1.359407,3.408733,5.472640,-6.874022,6.835655,-6.531946,-7.395087,-9.851199,-2.423965,2.895109,3.289485,8.820599,-1.590241,3.920522,2.859458,-0.075135,6.961709,4.471638,-6.152227,2.408855,5.099021,0.677037,-2.831256,5.009945,3.681266,-9.412914,-3.515705,1.986742,-0.223037,7.410086,-5.448006,4.605148,4.192192,-1.751721,-1.305059,-5.322358,-6.513715,2.179896,2.613928,1.446055,-8.556023,1.216628,1.285932,1.080511,4.729292,7.604811,-0.183880,9.526496,1.840825,7.426066,-7.456923,2.316026,5.072240,5.224193,-0.198929,-9.961486,-3.851452,6.294681,-3.894183,1.231693,-8.863146,9.490278,6.553233,-0.510588,-1.810409,9.868063,9.038965,3.092949,6.142120,-2.654717,8.991812,-6.349339,-2.463848,-9.120849,-3.968038,5.889071,-9.676136,4.173154,8.180989,4.925972,6.304841,-4.378791,0.132438,-4.285363,-6.617070,-1.630973,2.765649,-9.855097,7.407493,-2.718600,-1.447582,-8.767164,-4.110730,5.286628,2.500462,1.189125,5.606010,-7.592721,-0.783088,7.872188,7.026830,-9.703567,5.055277,-1.431722,7.534196,-7.954402,-5.440833,0.749129,2.400956,4.335072,9.571411,3.996968,-1.776021,9.609380,-9.989471,-2.837915,7.259966,-7.386325,5.060337,0.038454,4.522469,-9.825726,-4.338118,-8.600583,-9.304038,-0.247432,7.145507,-0.904560,5.831477,-0.694299,6.045548,6.882079,1.758412,1.631367,6.545869,-5.957320,-8.083629,-1.716194,-4.148530,-2.163259,-1.663505,-3.937163,4.533641,-5.517169,-7.486681,-2.324173,5.680396,-6.860336,-3.393640,9.998595,-2.624714,-9.151286,-7.353091,0.339019,-3.154251,-6.814777,0.877624,-0.155903,1.898358,2.302080,3.327521,4.522983,-8.603761,4.309095,4.215387,-9.797365,-0.737581,1.923786,7.997759,2.202965,-2.806387,9.856297,-4.564170,-3.328076,-9.314967,-1.224702,-2.089442,-3.047571,6.578268,0.090011,-9.172880,4.359561,-6.004646,8.797495,4.748612,5.250417,-8.992783,3.942203,-4.158171,9.047424,-2.549363,-1.224294,4.260684,2.703658,2.109626,-2.942843,-9.306253,-0.460665,-4.211524,-0.339592,8.268747,9.530267,-7.768757,-7.308439,3.594855,0.972603,2.747705,-9.666907,-1.380773,-2.113620,-2.494326,4.672489,-2.158471,0.340487,-6.345008,-1.525677,-9.876705,7.888933,0.339413,2.467019,2.562927,-5.774719,7.446982,-8.275212,-9.548217,4.073397,2.066972,1.553354,-0.643900,-8.589971,-5.093124,-6.584238,-7.219996,-6.499096,-4.061656,-8.477371,-9.004158,-9.491802,0.935515,-6.142314,3.811876,-1.216239,-4.493085,-9.494982,2.052074,0.242007,-1.084019,-5.694262,-2.252504,-8.388359,-9.125446,-8.465833,8.472958,-9.069810,6.586616,-6.712759,-7.220818,4.450401,-6.308622,-9.122155,-6.899261,7.567292,1.882773,-3.048768,-2.817045,-3.083163,9.607717,-1.854936,-2.964178,-0.412381,1.744907,-1.642822,5.933705,-8.884770,-4.728640,2.358755,9.303000,7.974190,-2.952296,-2.284846,-8.403818,-6.349793,1.571233,-6.016649,2.170123,-5.713256,1.880878,4.766982,-2.045754,-5.844490,-1.017463,-3.497394,-1.957499,-7.743498,2.459116,-2.646824,-0.098206,9.513113,6.347887,7.702352,-7.824324,7.278361,-4.175194,7.055360,-1.641828,0.645291,3.830085,-2.568271,2.083038,1.869132,0.686261,-6.064142,-6.359493,-9.955496,2.159714,-5.401678,5.377636,2.623219,-4.426469,-9.497845,-3.106312,0.234263,6.079224,-9.030511,5.889147,0.647170,5.778087,-7.814597,-5.084089,4.700290,-2.466001,7.558040,4.302808,7.685192,7.853539,-6.244895,-3.072631,-3.505974,-0.638766,-8.134190,-2.189831,-5.746259,-9.051001,0.228610,6.297721,-1.568262,-8.448047,9.140037,5.958957,-2.261312,1.260263,-7.157723,-4.555230,5.670551,6.492019,-0.518544,-1.742897,9.545657,1.573922,0.103562,4.233822,-6.284853,6.348134,3.612170,4.088859,-6.513132,3.393743,-5.103874,4.767842,-0.687759,6.672025,-9.742262,7.071678,-7.205727,-2.216252,-1.479833,-4.902906,9.900768,-0.632724,-3.673469,-6.149875,-5.004703,7.408963,-5.391599,9.288543,-2.731431,0.776325,-9.891063,-3.556259,-5.987217,-9.100812,5.742895,1.187082,-5.007872,0.012661,4.154348,3.176125,6.045906,-4.932797,9.168523,-0.090800,0.239714,-0.806771,5.590815,-2.785695,6.384197,-5.502280,1.809112,-5.145772,7.135337,-0.195804,1.543280,5.200367,0.322847,-2.680728,2.551774,-5.604278,7.773461,-8.707214,6.350434,-4.927798,5.076753,4.504730,-4.660217,-9.448259,-2.674483,0.093113,9.683463,-3.277525,-4.019082,9.471389,-2.654197,-8.699162,3.056674,-9.143050,-2.056708,8.981627,1.882119,-9.574119,-4.432184,9.445987,-1.554917,9.805618,4.918159,-6.991537,-0.620599,3.079373,8.308236,-9.914152,-8.050599,7.914402,4.081724,-8.907424,-2.927566,0.059744,-0.236065,6.094673,0.487902,-5.884323,-3.509800,-4.244255,-2.419321,4.087106,-4.393350,-8.585332,-6.100503,5.447960,1.582106,-2.735973,-6.631809,-7.328653,5.145391,6.325865,-3.901582,5.378406,-4.084755,-0.334508,-6.548058,-9.756965,9.733603,9.343178,2.923619,-1.501002,9.963439,-7.840634,-3.466459,-0.901817,-5.041565,-0.416707,7.699234,2.726214,2.276810,-4.185307,-5.563957,-2.211437,-2.660232,8.380234,-4.537332,-7.234089,5.565069,-4.989591,5.092844,9.905846,-9.776391,3.842936,0.195903,-3.769892,-9.620246,-4.091803,4.009009,-1.694098,5.444141,0.108007,4.313900,2.779523,-2.740119,-8.624782,-1.547604,3.109538,2.154774,-1.138159,-2.111808,-7.550577,7.064688,5.511331,3.050509,-1.435277,1.279842,9.503047,5.382032,6.098233,-4.962879,-9.647180,1.646274,4.716400,-8.426034,-1.653994,-4.940759,2.843144,2.050229,7.114425,-9.214661,2.631154,6.351420,7.379599,3.925772,9.623079,-0.858167,-0.762918,2.120831,9.379293,8.189639,-6.118704,-5.926540,-2.667533,-0.014144,-4.156192,5.807677,5.582337,-9.969585,-7.326607,0.797202,1.081019,9.582032,-8.091101,-3.347885,-9.226592,0.835772,7.349669,-4.535867,4.413835,0.900498,9.770057,-9.708219,-9.458487,1.388262,-9.487097,-2.200277,7.173014,-9.603177,-4.716705,0.088556,-6.703436,-8.408990,-4.956370,3.884174,2.712035,9.322104,-2.579663,2.966910,0.342895,0.740499,-8.433257,9.004891,3.170098,4.529312,-0.240883,-0.515322,7.150546,5.002156,7.113329,8.628207,3.374153,6.620366,-6.306305,-0.639770,-6.278978,-4.587412,3.636688,-9.720558,8.612409,5.799411,-7.326050,-2.317819,-0.298163,4.674056,8.585254,-7.936341,8.974108,-0.786345,2.937125,1.185534,-4.670889,-0.831836,-0.426517,-1.099684,-7.230393,9.436676,7.997047,-0.888315,6.215585,1.721907,-7.492443,-1.123461,7.123605,-7.103295,3.983573,-1.755444,9.456585,-8.231803,1.946612,6.201109,-0.290342,-3.911422,-9.740210,2.517462,-4.345043,-7.181078,-1.784293,5.343237,1.201045,-0.487107,2.488360,-7.981845,3.532825,-1.278549,2.662937,-1.710728,2.657706,5.553605,1.508013,3.971354,1.747427,0.923404,-6.801408,-6.413322,-3.584502,5.327706,8.108035,-1.927860,-4.305944,-0.961423,-5.647259,6.385045,0.661533,8.338418,2.559312,8.675713,8.152053,-7.630933,9.589137,4.976279,-5.043451,9.769710,6.730871,-3.287911,7.376178,7.595375,-4.977563,5.132544,-7.132857,-8.131066,0.876958,-9.184868,-5.784752,9.410525,4.089184,3.592247,6.966446,-8.084519,-4.503636,-6.182469,8.410167,4.974116,-2.742784,6.891958,-7.877475,-6.570821,4.474731,-0.934716,7.527955,2.015916,-6.684214,-1.080887,-9.387835,-1.085280,-2.958551,-4.527493,0.315397,5.225731,-7.544530,-6.150934,-0.987982,-0.376407,6.781343,-3.715780,-7.543287,-0.113948,-3.636373,-2.170697,6.721173,-5.560854,8.817327,4.436467,-7.280116,-7.752089,2.284447,6.275244,9.322305,-2.204003,-4.910556,-4.735740,-3.196647,-9.706438,1.299014,8.896929,1.368104,-7.688244,-7.534641,1.009018,-3.956832,8.939009,-1.973092,-4.992207,1.918595,7.567168,4.517639,-9.226460,-0.375026,-9.963234,-0.614370,-0.365563,5.568644,-0.910082,-0.067316,9.406556,-9.983592,-0.530781,4.383194,-0.905477,2.673375,1.938188,1.855322,8.691478,-5.541283,-7.760914,3.825000,-9.495007,8.729533,0.068203,5.655495,4.346399,8.442010,-8.256650,-9.860181,4.666633,-4.010891,-9.915646,0.320003,9.580432,7.675970,-5.678321,-8.917885,-0.206596,2.926414,8.522263,-5.898236,-3.627345,0.652606,-2.422630,-7.658836,0.981620,-8.795562,-5.708645,7.848787,6.077744,1.989882,-6.330747,6.301509,-0.145638,-6.953528,7.697363,-2.939830,-0.827914,-9.803029,3.488217,5.820706,-4.527363,-1.066167,6.941135,-2.467660,-4.786193,-5.332996,-1.604994,2.019399,-7.304291,-0.641049,-5.493038,-5.634033,-8.467358,-1.791834,2.131525,3.630329,5.243806,-8.063878,9.525352,-4.482392,4.480833,-3.481742,-9.713271,-4.753664,1.104852,-0.653307,4.371307,6.777555,0.532079,9.985078,8.567245,-9.524824,-0.363595,8.865031,-6.931830,6.919366,-6.288570,0.051711,-1.440858,9.150513,-4.649960,8.843104,-1.818538,-6.495452,-6.506058,-5.335007,-7.425932,6.033268,-6.703972,-0.766701,-2.404157,-0.427644,-9.053840,1.582365,1.832015,-5.009745,-7.307296,4.036838,-4.652723,-1.659410,1.311003,-2.246793,-9.600184,-6.821215,-0.101687,2.190526,-1.287036,9.432554,0.813015], dtype = "float64")#candidate|11398|(1260,)|const|float64
call_11396 = relay.TupleGetItem(func_7440_call(relay.reshape(const_11397.astype('float32'), [81,]), relay.reshape(const_11398.astype('float64'), [1260,]), ), 4)
call_11399 = relay.TupleGetItem(func_7443_call(relay.reshape(const_11397.astype('float32'), [81,]), relay.reshape(const_11398.astype('float64'), [1260,]), ), 4)
func_7890_call = mod.get_global_var('func_7890')
func_7892_call = mutated_mod.get_global_var('func_7892')
call_11416 = func_7890_call()
call_11417 = func_7890_call()
output = relay.Tuple([call_11380,call_11396,const_11397,const_11398,call_11416,])
output2 = relay.Tuple([call_11381,call_11399,const_11397,const_11398,call_11417,])
func_11426 = relay.Function([], output)
mod['func_11426'] = func_11426
mod = relay.transform.InferType()(mod)
output = func_11426()
func_11427 = relay.Function([], output)
mutated_mod['func_11427'] = func_11427
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5191_call = mod.get_global_var('func_5191')
func_5192_call = mutated_mod.get_global_var('func_5192')
call_11465 = relay.TupleGetItem(func_5191_call(), 4)
call_11466 = relay.TupleGetItem(func_5192_call(), 4)
uop_11469 = relay.exp(call_11465.astype('float64')) # shape=(154, 6)
uop_11471 = relay.exp(call_11466.astype('float64')) # shape=(154, 6)
uop_11472 = relay.acos(uop_11469.astype('float64')) # shape=(154, 6)
uop_11474 = relay.acos(uop_11471.astype('float64')) # shape=(154, 6)
uop_11497 = relay.sinh(uop_11472.astype('float32')) # shape=(154, 6)
uop_11499 = relay.sinh(uop_11474.astype('float32')) # shape=(154, 6)
output = uop_11497
output2 = uop_11499
func_11515 = relay.Function([], output)
mod['func_11515'] = func_11515
mod = relay.transform.InferType()(mod)
output = func_11515()
func_11516 = relay.Function([], output)
mutated_mod['func_11516'] = func_11516
mutated_mod = relay.transform.InferType()(mutated_mod)
const_11522 = relay.const([[[-5.535752,8.728963,-5.421404,-1.773668,-0.844241,-8.843738,4.647904,-8.195773,-1.479743],[8.250741,-2.293250,-5.924390,4.830495,-0.052513,-9.698355,-4.988025,9.952738,-9.704789],[7.895964,2.897573,-9.917153,2.516253,8.116105,2.752359,-0.220067,-1.231604,-4.837808]]], dtype = "float32")#candidate|11522|(1, 3, 9)|const|float32
uop_11523 = relay.tan(const_11522.astype('float32')) # shape=(1, 3, 9)
bop_11542 = relay.less_equal(const_11522.astype('bool'), relay.reshape(uop_11523.astype('bool'), relay.shape_of(const_11522))) # shape=(1, 3, 9)
func_3581_call = mod.get_global_var('func_3581')
func_3583_call = mutated_mod.get_global_var('func_3583')
call_11546 = func_3581_call()
call_11547 = func_3581_call()
output = relay.Tuple([bop_11542,call_11546,])
output2 = relay.Tuple([bop_11542,call_11547,])
func_11555 = relay.Function([], output)
mod['func_11555'] = func_11555
mod = relay.transform.InferType()(mod)
output = func_11555()
func_11556 = relay.Function([], output)
mutated_mod['func_11556'] = func_11556
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4611_call = mod.get_global_var('func_4611')
func_4612_call = mutated_mod.get_global_var('func_4612')
call_11591 = func_4611_call()
call_11592 = func_4611_call()
output = call_11591
output2 = call_11592
func_11599 = relay.Function([], output)
mod['func_11599'] = func_11599
mod = relay.transform.InferType()(mod)
output = func_11599()
func_11600 = relay.Function([], output)
mutated_mod['func_11600'] = func_11600
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3706_call = mod.get_global_var('func_3706')
func_3708_call = mutated_mod.get_global_var('func_3708')
call_11695 = relay.TupleGetItem(func_3706_call(), 0)
call_11696 = relay.TupleGetItem(func_3708_call(), 0)
func_6737_call = mod.get_global_var('func_6737')
func_6738_call = mutated_mod.get_global_var('func_6738')
call_11703 = func_6737_call()
call_11704 = func_6737_call()
output = relay.Tuple([call_11695,call_11703,])
output2 = relay.Tuple([call_11696,call_11704,])
func_11710 = relay.Function([], output)
mod['func_11710'] = func_11710
mod = relay.transform.InferType()(mod)
mutated_mod['func_11710'] = func_11710
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11710_call = mutated_mod.get_global_var('func_11710')
call_11711 = func_11710_call()
output = call_11711
func_11712 = relay.Function([], output)
mutated_mod['func_11712'] = func_11712
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6748_call = mod.get_global_var('func_6748')
func_6750_call = mutated_mod.get_global_var('func_6750')
call_11752 = relay.TupleGetItem(func_6748_call(), 0)
call_11753 = relay.TupleGetItem(func_6750_call(), 0)
var_11754 = relay.var("var_11754", dtype = "bool", shape = (11, 9, 3))#candidate|11754|(11, 9, 3)|var|bool
bop_11755 = relay.right_shift(call_11752.astype('uint16'), relay.reshape(var_11754.astype('uint16'), relay.shape_of(call_11752))) # shape=(11, 9, 3)
bop_11758 = relay.right_shift(call_11753.astype('uint16'), relay.reshape(var_11754.astype('uint16'), relay.shape_of(call_11753))) # shape=(11, 9, 3)
uop_11765 = relay.cos(var_11754.astype('float32')) # shape=(11, 9, 3)
output = relay.Tuple([bop_11755,uop_11765,])
output2 = relay.Tuple([bop_11758,uop_11765,])
func_11775 = relay.Function([var_11754,], output)
mod['func_11775'] = func_11775
mod = relay.transform.InferType()(mod)
var_11776 = relay.var("var_11776", dtype = "bool", shape = (11, 9, 3))#candidate|11776|(11, 9, 3)|var|bool
output = func_11775(var_11776)
func_11777 = relay.Function([var_11776], output)
mutated_mod['func_11777'] = func_11777
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9229_call = mod.get_global_var('func_9229')
func_9231_call = mutated_mod.get_global_var('func_9231')
call_11788 = relay.TupleGetItem(func_9229_call(), 0)
call_11789 = relay.TupleGetItem(func_9231_call(), 0)
var_11803 = relay.var("var_11803", dtype = "float64", shape = (7, 11, 6))#candidate|11803|(7, 11, 6)|var|float64
bop_11804 = relay.bitwise_xor(call_11788.astype('int8'), relay.reshape(var_11803.astype('int8'), relay.shape_of(call_11788))) # shape=(7, 11, 6)
bop_11807 = relay.bitwise_xor(call_11789.astype('int8'), relay.reshape(var_11803.astype('int8'), relay.shape_of(call_11789))) # shape=(7, 11, 6)
func_3732_call = mod.get_global_var('func_3732')
func_3734_call = mutated_mod.get_global_var('func_3734')
call_11817 = relay.TupleGetItem(func_3732_call(), 0)
call_11818 = relay.TupleGetItem(func_3734_call(), 0)
func_3671_call = mod.get_global_var('func_3671')
func_3674_call = mutated_mod.get_global_var('func_3674')
const_11822 = relay.const([[8,-1],[-9,9],[6,10],[3,7],[6,9],[-10,-3],[-7,6],[-2,2],[10,5],[10,9],[8,-3],[-1,-5],[6,10],[-10,-1],[-1,-6],[-7,5],[4,7],[5,-7],[-3,6],[-3,-5],[-4,-4],[-10,-1],[2,-4],[-6,6],[-8,-3],[9,8],[2,-10],[-4,1],[9,-2],[2,10],[1,-5],[-2,6],[-6,-4],[8,-8],[7,-5],[-2,9],[-4,2],[4,-10],[-3,-9],[-5,-6],[-5,5],[2,6],[-3,10],[-7,-9],[-10,7],[-1,9],[1,1],[-5,7],[7,3],[-9,-9],[-10,-8],[-8,2],[-7,3],[5,4],[-10,-3],[3,-6],[6,-10],[-10,7],[-7,-1],[-1,-6],[1,8],[1,-3],[10,7],[6,6],[5,-6],[6,-7],[8,10],[10,-10],[5,-6],[-2,7],[-4,7],[-10,-1],[8,9],[1,-7],[-3,-10],[4,3],[-8,6],[-1,3],[-9,-7],[-1,3],[-8,-3],[10,7],[10,-8],[7,-4],[4,6],[2,1],[10,-10],[8,10],[6,4],[5,1],[1,10],[3,-3],[-3,-2],[-10,6],[-1,-9],[-10,3],[-4,3],[-10,-5],[-6,-9],[8,-3],[2,-5],[8,-2],[-8,8],[-2,5],[9,7],[6,2],[-8,8],[4,-6],[9,-1],[-3,-8],[4,2],[-6,-3],[-6,-6],[-4,-2],[-9,8],[-6,-10],[-8,-1],[-3,-3],[-4,6],[1,-5],[-10,1],[9,-6],[-6,10],[1,-6],[-2,-9],[6,4],[6,-10],[-9,-5],[-7,-5],[-2,5],[-5,9],[-6,4],[-3,-4],[4,1],[-8,-6],[7,8],[-10,10],[-3,-1],[9,-6],[-6,-4],[-3,8],[-6,7],[9,3],[-7,-9],[5,10],[-6,10],[-2,2],[-9,4],[5,-9],[-10,-7],[10,-6],[4,-5],[-7,-8],[-7,-8],[-5,4],[9,5],[-2,4],[-9,-3],[-2,5],[4,-4],[-6,-4],[9,9],[-4,-9],[10,6],[-10,-4],[-5,7],[5,5],[3,-10],[2,-1],[6,6],[-2,-3],[-10,-6],[3,-9],[-8,8],[-2,1],[-2,4],[5,-4],[5,10],[-8,-2],[6,-1],[10,9],[-10,-1]], dtype = "int16")#candidate|11822|(182, 2)|const|int16
call_11821 = relay.TupleGetItem(func_3671_call(relay.reshape(const_11822.astype('int16'), [91, 4])), 0)
call_11823 = relay.TupleGetItem(func_3674_call(relay.reshape(const_11822.astype('int16'), [91, 4])), 0)
func_3524_call = mod.get_global_var('func_3524')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_11834 = relay.TupleGetItem(func_3524_call(), 0)
call_11835 = relay.TupleGetItem(func_3526_call(), 0)
uop_11852 = relay.atan(const_11822.astype('float32')) # shape=(182, 2)
var_11854 = relay.var("var_11854", dtype = "float64", shape = (7, 11, 6))#candidate|11854|(7, 11, 6)|var|float64
bop_11855 = relay.right_shift(call_11834.astype('int32'), relay.reshape(var_11854.astype('int32'), relay.shape_of(call_11834))) # shape=(7, 11, 6)
bop_11858 = relay.right_shift(call_11835.astype('int32'), relay.reshape(var_11854.astype('int32'), relay.shape_of(call_11835))) # shape=(7, 11, 6)
output = relay.Tuple([bop_11804,call_11817,call_11821,uop_11852,bop_11855,])
output2 = relay.Tuple([bop_11807,call_11818,call_11823,uop_11852,bop_11858,])
func_11859 = relay.Function([var_11803,var_11854,], output)
mod['func_11859'] = func_11859
mod = relay.transform.InferType()(mod)
mutated_mod['func_11859'] = func_11859
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11859_call = mutated_mod.get_global_var('func_11859')
var_11861 = relay.var("var_11861", dtype = "float64", shape = (7, 11, 6))#candidate|11861|(7, 11, 6)|var|float64
var_11862 = relay.var("var_11862", dtype = "float64", shape = (7, 11, 6))#candidate|11862|(7, 11, 6)|var|float64
call_11860 = func_11859_call(var_11861,var_11862,)
output = call_11860
func_11863 = relay.Function([var_11861,var_11862,], output)
mutated_mod['func_11863'] = func_11863
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3732_call = mod.get_global_var('func_3732')
func_3734_call = mutated_mod.get_global_var('func_3734')
call_12007 = relay.TupleGetItem(func_3732_call(), 0)
call_12008 = relay.TupleGetItem(func_3734_call(), 0)
func_11319_call = mod.get_global_var('func_11319')
func_11322_call = mutated_mod.get_global_var('func_11322')
const_12013 = relay.const([-3.607072,2.756116,8.341278,2.844907,-8.031497,6.172778,8.632521,-5.008467,-7.713214,1.719252,-0.206371,7.216665,-0.264117,-0.853463,-5.758977,-8.631739,-8.012525,-0.452677,9.547117,-6.952593,8.679621,6.997573,-0.516945,9.990711,-4.831405,-3.905388,6.905521,-5.205550,-1.924200,6.221488,8.722742,-5.102000,-7.261603,8.268228,-2.869993,2.949043,9.328336,-3.046843,-4.166367,-5.214190,3.457300,-9.622629,-9.431040,-6.909690,1.586489,-5.767352,0.570946,6.112452,6.119794,7.979180,-0.159465,-3.480876,-1.539066,4.956849,-4.772603,3.583312,-8.525284,5.296483,3.390400,-8.093300,3.287391,0.155549,6.314403,-0.322722,5.652699,-2.479118,-7.156832,0.991983,5.138729,-0.532934,9.450732,7.000103,7.861554,-6.264133,-1.812296,3.809055,6.015045,9.049120,5.638634,-4.198968,6.061557,-1.750501,1.830313,-6.149780,-4.314157,-8.508251,1.596317,-2.184035,-0.065635,8.562828,3.764971,7.945561,4.095924,1.978069,-2.666208,0.266574,-9.663470,-8.043914,2.616339,-8.467731,9.552154,3.129375,6.254055,5.334215,4.346075,-9.882528,5.715382,7.952459,-5.763944,-5.487437,-5.798814,1.428880,3.877239,-0.588938,-6.232769,8.088381,-8.455853,-8.151580,-5.401670,8.251505,-9.999720,-5.483266,0.413081,-4.385706,-5.986608,8.088046,-3.332509,9.876234,-3.339317,0.722842,-8.368841,-3.484899,7.313037,-4.653057,-0.682400,4.086886,-7.007105,-9.466200,-9.230144,2.790341,2.055012,5.484502,9.408820,-0.192406,5.960406,3.095744,-6.815948,-4.177439,-2.135090,3.998873,-0.376252,-2.535689,-6.539459,2.465751,0.433482,1.233279,7.920645,9.349851,6.825571,-4.755015,9.058930,-3.917293,2.065216,6.593772,-1.776800,-1.092473,-2.171808,9.577437,0.168324,1.991603,8.193564,-0.979861,6.103413,-9.069807,1.400752,1.022600,-7.397276,-1.170198,-0.034804,8.724805,-3.179210,-2.127730,-0.280136,5.986106,-5.627036,0.958431,9.185433,-4.528064,1.413744,4.619638,3.353590,7.011069,-8.297561,0.970582,2.343484,3.727642,-2.863828,-4.328906,9.166232,-4.851944,-4.621905,-8.008420,2.480279,2.510059,4.705319,3.220325,2.239045,-8.336086,-9.746611,9.830102,-4.008242,1.863044,-3.427396,-2.542481,6.857765,2.826435,-0.527902,1.760507,-9.816240,-1.220734,8.347993,-8.699034,-2.101127,2.063849,-2.798101,-5.964221,0.193914,1.859044,-1.752631,-6.105216,-6.176058,1.287653,6.131219,6.058320,2.853019,8.930738,6.472814,-8.375793,-2.442957,8.403536,-2.351030,3.106323,2.740850,9.363637,-6.447357,-8.621321,3.460034,8.359365,-2.656792,-2.199477,-1.059457,6.037775,1.340165,2.230963,4.618795,-0.450405,7.640594,1.830547,-7.196097,-8.992597,-1.664684,0.281320,-2.225390,-3.637358,4.654793,7.074259,-9.527087,-4.981274,-3.579315,5.837234,-1.631989,6.024445,-7.369891,-1.097190,6.331916,1.537541,7.900740,6.795790,-4.786600,2.134493,-1.853776,4.219140,5.207010,-3.111788,-9.539749,6.754008,9.481932,-6.164945,3.626908,-8.539119,9.143183,3.703592,-1.199411,-9.184902,-7.924921,7.838839,-9.521741,-1.599649,-8.335722,1.045159,-7.833413,0.472702,9.726049,8.474039,-4.007389,1.135944,-9.243623,1.119380,8.094783,2.838304,4.751633,-6.471016,6.108403,6.976549,2.035548,-7.263812,9.771414,8.846844,7.755828,6.921014,-1.426193,2.781011,8.006482,-7.244810,9.737587,6.184088,-6.893451,-4.127764,-1.050465,7.414742,5.025906,9.811920,0.520117,7.986440,-7.911208,-0.748500,-1.576045,4.727752,-5.247573,-8.107693,3.063302,-5.207873,-2.413639,3.398566,-6.095252,-7.598845,5.156644,-9.779313,6.666771,5.798245,5.261848,-5.505773,-9.086010,8.431267,0.907524,-5.285935,9.032358,-3.188870,3.747549,-2.168103,-7.807725,6.908922,3.717367,-9.814667,-7.362370,-7.634245,-2.170730,0.150253,-3.801219,9.348880,-8.744727,-5.978325,4.022191,8.981002,-7.573908,-8.134865,9.291979,-4.413309,-2.582843,1.146026,9.352153,-3.180840,-0.239856,-7.588308,-9.235837,6.793611,9.180679,4.455141,-2.581803,9.747004,-5.430616,-0.199205,-4.142683,-0.807329,2.678482,1.580564,2.497501,-5.319358,5.725837,-7.164572,1.199350,-5.528476,6.350078,7.257222,9.517924,0.898304,-6.098521,3.140789,-7.308975,0.139559,3.096361,-3.996616,-2.814696,-9.195068,8.660911,-6.013858,-1.864922,7.073261,-0.850567,-6.834908,-7.042591,1.423950,5.450805,6.732786,0.982950,0.002374,3.877840,3.460958,4.507506,5.312368,9.011498,7.175106,-7.016898,7.163828,7.056713,-8.042865,4.734880,-9.986486,-7.427721,3.140704,7.385059,-8.625614,-7.460198,-4.740861,-5.624102,4.171192,4.483157,8.855948,3.154227,-4.099468,-7.115484,-5.523871,1.307891,-7.397876,-4.525764,5.102428,1.586280,-0.046226,2.035117,4.216730,-2.983937,2.597068,8.140764,-1.522986,-7.449356,5.023499,6.118251,-3.026697,-9.503874,4.669763,-0.625901,-0.871000,-7.676789,-4.251092,-9.589577,1.275111,-0.109483,-9.603896,-3.908066,-0.820471,-6.245986,8.109510,-0.866937,-0.822567,3.934922,9.127235,-5.811959,7.802067,9.851750,-8.668082,8.385971,-0.563334,5.632057,1.559215,2.302633,-2.772983,0.881535,-0.989339,2.954427,-7.347000,-3.721460,0.366810,-6.092024,8.743432,-3.731817,0.825404,-0.359320,0.248449,-6.908382,9.710490,-3.437049,5.967106,0.895358,9.062525,-6.719298,3.381594,-8.596836,1.917395,9.239127,-5.381510,8.872765,1.964401,0.515618,3.198681,3.868668,-7.021354,-4.068572,6.467708,1.719437,-1.509390,4.983280,-7.890975,-9.473325,-1.556887,-9.406322,2.731367,-7.601006,7.868132,7.585157,0.363896,7.450879,4.710840,-4.119401,-2.368960,1.810492,2.929765,-4.313280,-2.258914,-8.283894,2.999483,4.763175,-0.006468,2.765104,-5.332654,-6.781824,-9.105894,7.363965,8.632719,-0.360394,3.920976,-4.103664,-0.895261,-3.179292,-8.343797,1.471337,6.374363,-8.267099,-9.137127,-6.922134,5.338024,6.747724,-0.344755,3.310831,-6.117728,4.587318,1.960071,-6.710249,1.339686,1.687066,8.870759,8.709133,1.509538,-2.489832,0.019285,-1.705920,9.528275,-2.270606,-9.940904,5.321409,-1.344905,-5.733361,7.053825,7.646487,3.040146,-8.401024,-9.423003,-2.048660,7.208126,6.272297,2.230957], dtype = "float32")#candidate|12013|(600,)|const|float32
call_12012 = func_11319_call(relay.reshape(const_12013.astype('float32'), [10, 10, 6]))
call_12014 = func_11319_call(relay.reshape(const_12013.astype('float32'), [10, 10, 6]))
func_5237_call = mod.get_global_var('func_5237')
func_5239_call = mutated_mod.get_global_var('func_5239')
call_12019 = relay.TupleGetItem(func_5237_call(relay.reshape(call_12007.astype('float64'), [7, 11, 6])), 0)
call_12020 = relay.TupleGetItem(func_5239_call(relay.reshape(call_12007.astype('float64'), [7, 11, 6])), 0)
output = relay.Tuple([call_12007,call_12012,const_12013,call_12019,])
output2 = relay.Tuple([call_12008,call_12014,const_12013,call_12020,])
func_12038 = relay.Function([], output)
mod['func_12038'] = func_12038
mod = relay.transform.InferType()(mod)
mutated_mod['func_12038'] = func_12038
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12038_call = mutated_mod.get_global_var('func_12038')
call_12039 = func_12038_call()
output = call_12039
func_12040 = relay.Function([], output)
mutated_mod['func_12040'] = func_12040
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10096_call = mod.get_global_var('func_10096')
func_10097_call = mutated_mod.get_global_var('func_10097')
call_12053 = func_10096_call()
call_12054 = func_10096_call()
func_4439_call = mod.get_global_var('func_4439')
func_4440_call = mutated_mod.get_global_var('func_4440')
call_12101 = relay.TupleGetItem(func_4439_call(), 0)
call_12102 = relay.TupleGetItem(func_4440_call(), 0)
func_9676_call = mod.get_global_var('func_9676')
func_9679_call = mutated_mod.get_global_var('func_9679')
call_12111 = relay.TupleGetItem(func_9676_call(relay.reshape(call_12101.astype('float64'), [7, 11, 6])), 0)
call_12112 = relay.TupleGetItem(func_9679_call(relay.reshape(call_12101.astype('float64'), [7, 11, 6])), 0)
func_7922_call = mod.get_global_var('func_7922')
func_7923_call = mutated_mod.get_global_var('func_7923')
call_12116 = relay.TupleGetItem(func_7922_call(), 1)
call_12117 = relay.TupleGetItem(func_7923_call(), 1)
func_8539_call = mod.get_global_var('func_8539')
func_8540_call = mutated_mod.get_global_var('func_8540')
call_12118 = relay.TupleGetItem(func_8539_call(), 0)
call_12119 = relay.TupleGetItem(func_8540_call(), 0)
output = relay.Tuple([call_12053,call_12101,call_12111,call_12116,call_12118,])
output2 = relay.Tuple([call_12054,call_12102,call_12112,call_12117,call_12119,])
func_12127 = relay.Function([], output)
mod['func_12127'] = func_12127
mod = relay.transform.InferType()(mod)
mutated_mod['func_12127'] = func_12127
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12127_call = mutated_mod.get_global_var('func_12127')
call_12128 = func_12127_call()
output = call_12128
func_12129 = relay.Function([], output)
mutated_mod['func_12129'] = func_12129
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12159 = relay.var("var_12159", dtype = "int16", shape = ())#candidate|12159|()|var|int16
var_12160 = relay.var("var_12160", dtype = "int16", shape = (11, 14, 11))#candidate|12160|(11, 14, 11)|var|int16
bop_12161 = relay.subtract(var_12159.astype('int16'), var_12160.astype('int16')) # shape=(11, 14, 11)
output = relay.Tuple([bop_12161,])
output2 = relay.Tuple([bop_12161,])
func_12164 = relay.Function([var_12159,var_12160,], output)
mod['func_12164'] = func_12164
mod = relay.transform.InferType()(mod)
mutated_mod['func_12164'] = func_12164
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12164_call = mutated_mod.get_global_var('func_12164')
var_12166 = relay.var("var_12166", dtype = "int16", shape = ())#candidate|12166|()|var|int16
var_12167 = relay.var("var_12167", dtype = "int16", shape = (11, 14, 11))#candidate|12167|(11, 14, 11)|var|int16
call_12165 = func_12164_call(var_12166,var_12167,)
output = call_12165
func_12168 = relay.Function([var_12166,var_12167,], output)
mutated_mod['func_12168'] = func_12168
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4439_call = mod.get_global_var('func_4439')
func_4440_call = mutated_mod.get_global_var('func_4440')
call_12170 = relay.TupleGetItem(func_4439_call(), 0)
call_12171 = relay.TupleGetItem(func_4440_call(), 0)
func_12164_call = mod.get_global_var('func_12164')
func_12168_call = mutated_mod.get_global_var('func_12168')
const_12182 = relay.const(8, dtype = "int16")#candidate|12182|()|const|int16
const_12183 = relay.const([-9,7,-10,7,-6,-10,-6,8,5,5,7,-2,-3,-6,-8,9,9,1,2,9,6,-5,-4,-2,-2,-10,-3,9,3,-9,2,8,-1,-1,1,-10,-9,-1,-1,2,10,-4,4,-8,-1,-10,2,-4,-9,5,7,8,4,7,-10,9,-10,-2,-8,-3,-5,4,3,10,5,3,-3,-7,8,-2,-4,-10,-8,1,3,7,-9,5,10,-3,1,8,6,-2,-9,5,-7,-8,-7,3,4,-8,-10,4,-8,-7,-4,-4,-2,5,1,7,-4,3,5,-1,-5,-4,2,8,-7,-9,-2,9,7,7,3,8,-8,-9,8,-4,1,-9,-5,10,-2,1,2,-9,-4,-9,-8,-4,-9,-1,-5,9,10,6,6,7,9,-3,-10,1,9,-2,-8,-5,-9,3,1,9,-3,9,5,9,-6,2,-7,1,-5,-2,9,-2,-4,-2,9,8,-6,-1,-5,-4,3,8,-1,5,-3,-10,6,1,-7,7,-6,-9,-2,-5,1,7,-5,3,5,3,4,-2,-5,10,-8,1,-10,6,9,8,-9,3,1,10,-3,-3,6,5,8,5,-2,10,5,5,-9,3,9,4,3,5,-6,-10,6,6,-5,-2,7,1,1,-9,3,10,9,2,-7,5,7,-8,5,9,-4,6,-4,-7,-5,5,8,9,-9,-9,-10,-10,4,-10,-1,-10,9,-8,5,7,-4,7,10,-1,-9,-7,-9,-5,-6,-3,-3,4,8,-4,9,-2,-8,7,7,8,10,-6,-2,-1,8,-5,-6,-3,-3,5,2,7,6,-9,9,2,3,-8,1,-3,-3,9,9,4,-3,-4,-6,-5,2,-7,3,2,-7,1,2,-6,2,4,1,3,-7,-9,5,-3,-9,-10,10,-6,-4,3,-1,-1,-6,4,3,9,4,2,3,-8,8,3,-2,2,-8,-10,-6,3,5,9,-5,-9,8,10,-9,-2,-6,4,7,-2,5,-3,-4,-2,4,-9,2,9,1,9,-8,8,9,-10,2,-1,-7,-7,-1,-9,2,7,8,-2,-7,-1,-6,-9,-5,-9,-2,-3,5,7,10,-4,-8,4,8,6,-1,-10,-10,-9,-7,-1,1,7,3,-3,-4,5,9,-7,-7,6,-10,4,7,-4,-2,-5,-8,-8,-8,5,-1,1,10,-10,-9,-7,-3,10,2,4,8,8,10,10,-10,-10,-5,-2,-9,4,-7,8,9,9,3,-7,3,-10,3,2,2,4,-3,4,7,9,-8,5,6,-1,9,1,-5,-6,-10,10,10,-1,8,-4,-1,10,-9,-7,3,3,5,-4,6,9,-8,-8,-2,-3,4,7,8,5,4,-2,1,9,-1,8,-4,-1,-3,5,8,6,-3,9,2,-1,-7,5,8,6,8,-5,9,9,7,-7,-9,-8,8,8,-1,-6,1,8,7,9,8,-2,-1,8,2,-4,-10,7,-10,-8,3,-1,7,-4,-3,-2,8,-7,2,9,-3,-8,5,-3,-10,6,-8,8,6,10,6,10,5,-4,-3,4,4,-8,-7,4,3,3,-6,-5,-2,2,10,-1,-9,3,-6,5,8,10,4,3,3,7,6,10,10,5,5,-4,-8,6,3,-7,7,-4,-1,-10,-4,4,2,7,7,1,-7,6,-1,1,-6,-3,-6,-5,6,3,-2,-10,-10,-6,9,9,-2,3,-7,-7,5,-5,-7,-9,-6,2,7,4,-1,6,-8,7,-2,-3,-7,4,-10,-2,-9,-9,1,-5,-7,10,9,-9,-3,-9,9,5,-4,-9,-8,-1,-1,-4,-4,-5,-7,-9,10,-3,6,-7,-4,2,-9,-2,3,-8,6,9,2,-2,-8,5,-1,-1,2,4,8,6,7,8,1,-6,-7,-8,-10,10,-1,8,-5,9,-4,-5,-8,-4,9,7,-8,-7,-8,6,5,-8,2,8,-4,7,9,4,3,4,-8,1,4,2,3,3,-3,4,-6,5,9,-10,3,6,10,5,-3,-5,-4,-2,-5,7,-6,3,1,-4,9,-9,-7,-8,6,-8,-2,7,-10,-5,4,2,10,1,-5,-2,-8,7,-7,-6,-10,4,-7,-8,-2,1,2,5,1,5,-1,-2,-9,6,-6,1,-7,6,7,-1,6,2,-7,1,-3,4,3,-4,-5,-10,-3,6,7,-3,5,-1,8,-8,10,-3,-6,-8,-2,-3,3,9,6,9,7,-6,-8,3,2,-10,-3,-7,9,7,-8,-10,4,10,-5,3,-10,4,8,3,1,2,6,4,-7,-1,-1,-7,-2,-5,7,-9,-7,-5,10,-4,-5,6,8,-9,3,9,2,-1,4,-1,5,7,1,-8,-4,-6,1,-10,-4,-1,10,-10,-7,-5,8,1,6,-7,2,1,-8,-4,-9,-7,5,7,-9,6,-10,6,-8,3,-6,2,6,5,8,-4,-6,-7,10,-6,3,-4,4,-2,8,8,-4,4,-4,5,-8,9,9,-5,-2,-5,-5,-9,-10,3,6,1,-2,9,4,9,2,-8,-6,7,3,4,-2,7,5,1,-1,-1,-9,-10,4,-5,-5,-7,-5,10,6,-6,-8,2,4,5,8,-10,-8,-10,-8,-9,7,4,10,-9,-10,7,-1,1,6,1,-4,1,-9,-6,-5,10,1,-1,9,-9,7,7,9,-1,8,9,5,5,10,-1,-6,-4,-8,-10,-4,-6,-9,9,4,10,-4,-3,-8,2,-10,2,5,-5,-10,-10,5,7,2,9,6,6,-10,-8,9,-8,-5,7,8,-5,-6,-5,4,5,8,9,-5,5,-8,-6,4,-8,-6,-3,6,3,4,2,-9,-3,1,2,-1,-3,-1,7,-5,-8,-9,-5,10,8,-5,-3,7,3,2,-8,-6,1,10,-5,-3,7,-6,9,-8,2,-7,-10,-3,-4,10,-7,3,-4,-7,9,3,-4,-8,-5,-7,-2,1,1,-4,-10,-7,3,-6,4,-5,3,-8,-7,9,-3,-8,-3,6,7,-8,-8,-4,6,7,3,-2,-2,-5,-7,10,1,6,10,-7,-5,2,2,4,5,-8,3,-9,10,-3,-8,-8,2,-4,-9,-9,-8,8,8,7,-3,-6,-5,-1,-8,-2,7,7,6,-4,-2,9,-6,1,-1,9,-3,10,9,3,-6,-4,-6,2,2,-9,9,-6,9,8,6,-3,4,7,5,-3,-6,1,7,6,-9,4,6,-4,-9,-4,2,4,-1,1,2,4,-10,9,-10,5,-1,1,10,10,-8,4,2,-7,-10,6,2,-7,-6,-8,-1,-8,-5,-10,4,6,-6,3,-8,-8,9,-10,3,3,-4,-8,7,9,-6,-9,-1,-4,5,3,-10,-4,5,1,-1,-1,-9,-2,-6,-10,-2,-5,-4,-9,8,4,5,6,2,-9,-4,-8,9,9,2,10,-8,8,3,1,-1,9,5,-5,-5,-9,-7,9,-6,-3,-10,4,-7,-10,-10,-4,-7,7,10,-8,10,-1,-4,-3,3,-1,-9,8,7,-8,10,8,-5,-9,10,-10,-3,-7,5,7,8,-8,-3,4,-6,-7,-2,-2,-1,-4,8,-1,-6,8,-8,9,5,4,-6,7,9,-6,10,-10,1,-2,-9,-2,9,8,6,-5,7,-10,6,-2,-1,7,-10,-2,2,-2,5,10,5,-3,-7,4,8,6,-1,-2,-1,-6,6,2,2,-3,-7,4,2,4,8,5,2,-1,-2,-9,-1,-3,-3,-9,8,-3,-4,8,-4,5,-10,7,2,7,2,8,-1,2,-6,8,-2,3,-7,10,-3,3,-5,-9,2,-2,4,-10,9,-8,3,-10,-8,-1,-6,-8,7,-4,4,9,1,-10,1,9,-2,-6,-6,1,1,-3,-4,6,4,2,-5,-4,4,3,-6,7,1,2,-2,-3,7,-10,7,-10,7,-9,-7,-1,10,6,6,3,-7,-7,10,-3,-8,-7,10,7,1,4,-2,-9,-10,-8,10,-6,-6,7,-6,2,5,10,7,7,-5,6,-5,-8,9,3,-7,8,5,9,6,-5,1,8,-5,5,-5,5,-5,-7,1,6,1,1,-9,-5,-4,-8,10,-2,-3,2,10,-10,-4,-3,-8,-5,3,3,10,9,-10,8,4,-4,-9,-7,-6,5,-3,-9,7,8,-3,4,-10,-5,1,-10,-5,4,-1,-4,7,10,-10,-2,4,1,-2,-9,9,3,-9,-8,9,10,-4,-8,-6,2,-7,4,-6,-7,1,3,1,-1,10,7,-1,9,1,-6,-6,-2,-5,-4,-3,-1,8,6,1,2,-7,3,3,-3,9,-1,10,-8,4,-7,-3,-1,4,10,5,9,10,9,-3,-10,-6,9,-8,2,-9,9,9,2,-7,1,4,-3,-3,10,9,-10,2,-2,6,-10,-2,4,-9,9,9,-10,-1,9,-7,3,10,-10,5,-3,-5,4,4,-3,6,-10,1,2,-1,7,4,6,3,6,-8,-9,-4,4,-2,-10,6,-7,-8,-8,-2,10,5,9,2,6,-4,4,-7,-5,-5,9,-5,-8,-5,-3,-3,2,9,-6,7,-2,6,-1,4,3,-1], dtype = "int16")#candidate|12183|(1694,)|const|int16
call_12181 = relay.TupleGetItem(func_12164_call(relay.reshape(const_12182.astype('int16'), []), relay.reshape(const_12183.astype('int16'), [11, 14, 11]), ), 0)
call_12184 = relay.TupleGetItem(func_12168_call(relay.reshape(const_12182.astype('int16'), []), relay.reshape(const_12183.astype('int16'), [11, 14, 11]), ), 0)
func_4711_call = mod.get_global_var('func_4711')
func_4717_call = mutated_mod.get_global_var('func_4717')
var_12188 = relay.var("var_12188", dtype = "float32", shape = (225,))#candidate|12188|(225,)|var|float32
var_12189 = relay.var("var_12189", dtype = "float64", shape = (168,))#candidate|12189|(168,)|var|float64
var_12190 = relay.var("var_12190", dtype = "float64", shape = (84, 28))#candidate|12190|(84, 28)|var|float64
const_12191 = relay.const([-4.146685,-5.521710,-0.046620,5.830901,7.289705,-9.260916,-6.388990,1.552193,-0.604734,0.228531,4.628661,-2.377472,4.073225,6.038991,1.636541,8.998189,8.808720,-2.572971,8.208680,-2.738393,2.440145,6.526802,-3.187751,2.724853,-7.908054,-6.054627,3.021790,-0.989836,4.993761,0.934938,3.458262,-4.068955,-8.192951,-2.563132,8.859390,6.719439,3.212296,-2.930242,5.988311,9.751971,-3.309638,-6.274659,-0.743295,-4.000744,-2.719955,4.858610,-6.419284,-8.724327,-6.310112,8.140138,-2.605871,-8.619670,7.779889,7.755576,8.327131,-0.529157,-6.293918,3.464985,0.407255,-0.404756,4.746859,4.512601,-3.294926,5.424220,-1.190086,-4.097300,7.762844,8.860896,4.734393,7.266709,7.600661,-8.486093,-2.933827,-5.915989,1.800277,6.272604,-9.285939,-4.414982,0.175388,-1.157786,-4.787707,-0.458015,1.824273,-0.958068,-2.905055,7.001080,-6.051692,3.740279,2.946693,-3.486201,3.547847,-7.555729,0.070054,-1.414735,-7.280479,-5.135607,6.600250,-6.811718,-1.456622,6.026069,-6.580728,-1.289172,-2.133017,-9.231966,-3.593972,-2.856124,-5.748624,6.505061,9.527064,-9.043377,-2.630724,2.779391,2.687961,8.721654,-5.601381,-5.502988,5.697227,3.933219,5.791734,-5.668400,4.286389,5.838174,2.817478,5.462894,-3.881911,-6.693273,-3.137749,-1.795723,9.524131,-1.892338,-8.756116,-1.385163,5.106740,8.533794,2.840921,-5.575573,-2.230155,1.422984,9.382478,-1.070682,-4.507094,-5.628869,-7.137202,5.870308,-0.774121,-8.057637,-6.996086,5.484469,-2.924537,-7.662464,-0.339305,-6.686819,-1.438674,-2.807891,-8.315420,2.262876,3.714370,-9.135101,-0.661886,0.463779,9.375801,1.966126,-8.969344,6.614353,5.173094,4.770460,7.478996,-5.819380,7.802771,4.472904,-5.331963,-8.351066,-9.739764,8.918145,-2.065975,-7.136426,-9.201920,-6.417643,-2.020364,-9.501576,1.585643,8.453534,1.869330,4.619369,-8.443100,7.505295,8.736473,-5.561060,-5.460792,0.994505,-5.156381,-4.375505,7.696594,9.223754,-1.583483,-4.416884,4.325690,-2.861139,7.847723,6.800164,-2.879639,-9.342992,8.171200,-2.683916,9.317663,-3.062782,3.714334,-8.185001,6.173787,-8.560996,6.614872,-0.683535,-3.859801,-5.031403,-1.703643,9.668536,-6.163710,-7.691429,-5.855688,4.203602,-0.240624,0.322155,-9.531439,4.250431,2.758970,9.125474,-7.705250,-7.022209,7.946093,-6.863650,-0.874904,-4.511566,-2.784120,-2.242627,6.362328,-6.891152,-8.967750,9.836187,5.992791,-9.715802,-5.787948,-7.361522,0.180913,0.269658,8.915328,-9.798166,7.823873,-4.299922,-2.747671,-9.891955,-4.854590,8.532213,-1.767407,4.081467,0.080513,6.806884,9.555914,-2.281146,-7.365068,7.732288,-6.441083,5.009896,8.054479,7.404902,0.752843,4.108109,-9.819679,-8.165058,-4.184085,-4.341295,6.142012,9.151415,7.204707,-0.970714,-3.109154,6.054358,5.494879,-0.867853,-2.327405,-2.918671,-0.122334,4.884206,6.550533,7.482360,7.999357,9.169609,2.792658,-6.734016,3.570913,-8.265590,-2.478400,-3.393844,5.033920,-2.296922,-8.159176,5.956163,3.679647,7.498826,-8.033948,-3.748280,-2.128747,-2.430072,-0.468081,6.586487,6.021078,8.829431,5.804873,-1.930269,9.656367,2.773676,5.278237,-7.267150,4.847055,8.496464,-0.018752,-9.501416,-9.745218,9.346215,3.012450,-9.055777,-2.032584,-8.106427,6.103512,-9.444749,-6.544761,-2.940216,-7.600910,-6.074940,-1.585570,3.186567,9.278475,9.260305,1.086296,-8.007983,8.363326,1.059715,1.596410,-4.586833,-0.636316,3.780457,-6.825758,9.886301,-9.270256,-5.363030,2.033294,1.377227,8.678147,-0.508644,1.312260,4.437838,2.362227,7.952044,4.802094,7.994652,-5.538895,-7.948246,-4.830168,-6.232146,6.628039,6.901913,-7.061103,8.688862,-5.196989,-3.478891,-2.462286,-2.130062,9.299610,-6.898155,0.262729,-9.453105,-6.637517,-5.544459,-4.798731,1.174170,-8.017739,9.512069,-8.939024,-4.677830,-3.134581,-3.669468,5.226551,9.857553,-3.753698,9.106114,6.652599,-4.872868,-7.833986,7.510304,3.136516,-3.769138,4.924302,-3.125614,-1.250610,-6.924561,-0.149608,8.989403,-8.393917,-3.510148,8.874611,-9.600390,7.346833,-2.856569,-3.567845,2.450935,7.938162,0.723124,4.365955,-6.080765,-1.372780,-7.166279,5.658567,-5.348408,-6.911399,5.617027,-1.403703,9.704518,-3.583610,3.159929,4.531571,-2.977044,-0.197715,5.980471,9.104290,2.502110,5.688656,-3.359123,-6.668198,-4.633462,0.992970,-8.464791,9.184841,-8.688200,6.566253,-5.193260,-8.917809,3.441166,-7.171432,-8.305408,-6.267768,-2.581729,8.336675,4.546006,1.026721,2.758317,3.138039,2.993527,7.668277,-4.596344,1.963845,4.252518,9.684170,1.671333,5.255352,4.866362,0.851675,3.429497,8.679960,-6.903265,-3.381363,6.459804,7.271092,4.390147,-5.399737,-6.714242,-3.550460,9.704826,-9.154728,-8.015108,-4.664017,-7.761800,8.904296,8.047576,-6.087371,8.127464,6.388338,-7.037116,5.133980,7.175874,6.750105,-7.640372,6.489113,4.161310,-1.224573,5.022271,7.585290,-4.939358,-6.705753,4.648578,-3.493186,7.244550,-8.690163,-9.214905,3.817789,7.009737,4.720091,7.067820,-9.549342,0.564491,-8.095936,0.790017,-4.950408,-2.034302,8.580832,1.541136,-4.384998,5.424410,-6.048508,2.991698,3.046178,-6.395829,-0.605473,9.073988,-5.710639,3.936892,-8.494403,-7.275885,-4.039698,2.989711,3.555706,5.387417,3.264069,-2.648920,2.567017,-0.501694,-1.124947,3.556933,-6.111550,9.803464,3.387719,9.787002,-5.981783,-6.226232,-8.905889,-6.190805,-5.337771,0.562083,0.539157,1.100238,4.032740,4.378975,-1.002841,-6.559989,-1.026530,8.045817,-2.122773,9.322645,5.647949,-6.030609,2.836835,8.266809,-7.614768,4.126640,-0.954651,-6.096168,-7.640098,5.653453,6.024310,2.887578,-2.115008,6.725301,2.079581,7.757993,4.257288,-4.156779,-8.729120,-0.978539,9.328203,-4.326556,6.247549,4.012450,0.236922,-6.016622,4.312176,-2.288694,9.817452,-7.622743,-2.169670,8.137085,5.729831,-3.663169,0.052920,7.309423,-2.173608,-3.268643,-4.502846,-6.525626,-1.784346,-8.093311,-3.388950,8.341932,8.316408,1.576476,6.511678,1.581247,-0.933477,2.136487,-9.461688,-5.273049,-2.744877,-3.907877,2.459681,-5.124729,-2.755926,3.217845,8.356280,-8.119035,-4.884673,-7.919544,-7.357920,7.111352,6.718684,-8.675429,4.412761,6.399867,7.313677,-5.380108,-0.035227,-5.257441,-4.440476,2.398365,4.903776,-0.614689,5.235322,7.612150,-4.210807,2.143639,8.436118,4.714893,-2.553308,3.884800,9.768327,-3.271615,-0.866011,-1.754793,-9.265720,8.127977,7.460214,-0.666661,-6.242127,-3.284259,-8.824877,0.850531,5.287092,-8.848008,4.176704,3.167763,0.461334,-7.088533,-5.432548,-9.423591,-2.114350,-8.701888,6.612853,8.460169,1.150337,-6.573386,9.347826,6.182240,6.732497,-1.833848,6.891400,8.230448,-9.169348,5.011896,-7.508402,7.160052,4.030274,-2.825745,-3.926205,-7.621747,9.334657,2.876553,-9.306858,2.636634,-2.381371,-9.093028,3.361107,2.543039,5.305724,-1.217203,-0.060066,1.432340,-5.891239,8.841140,5.966552,-2.854251,-4.700794,9.435916,-3.336161,-2.131318,-9.833535,1.379570,-9.436275,1.556705,4.239241,4.222753,-6.538412,1.991427,-6.854495,1.299878,-6.943931,-0.358009,-4.501362,-3.435488,-6.156246,1.410970,3.550531,-2.434911,3.345297,-7.762514,-5.435362,2.617669,-3.066437,3.953950,5.951321,-4.888392,-5.113429,-1.319268,-9.143104,2.593535,-8.972361,9.917496,9.580447,5.602671,-7.913658,6.401965,-4.202093,9.168751,8.358295,1.711740,5.070688,1.914474,6.715378,-7.910876,-9.708604,-3.970593,9.106026,-6.902978,-0.841172,1.151973,3.787642,0.251401,7.728930,-5.869654,5.253586,3.317625,6.780279,-4.250260,6.409071,-2.660068,-7.461957,-0.833606,7.630940,3.771666,-3.190840,-6.650535,4.344951,1.939814,-3.540507,-0.706854,-9.433138,-3.533687,-1.896492,-9.971428,-1.750619,5.032662,3.103644,-3.669139,-5.807544,-9.174536,-0.300790,5.567151,-8.550557,6.647824,-3.688528,-1.210263,6.955268,1.017985,6.188046,3.838238,-9.958481,2.922088,-6.116830,-4.909464,9.911257,-3.445691,0.663270,5.292702,-4.721538,-9.383451,-4.386767,2.600651,-0.961720,6.636560,-1.491960,7.301221,0.053204,6.059748,-8.550173,4.371391,-2.734230,6.792292,3.965822,-4.525387,3.196676,-6.783729,8.669039,-4.617811,-9.401694,-0.609539,-6.977676,-6.712984,-0.422203,-5.608896,2.149297,-8.186718,3.728565,-8.280803,-7.662486,-3.342505,0.715288,-6.273655,4.986636,-4.425328,-3.410380,-0.660281,-1.029940,6.532219,-0.792771,8.873466,1.474230,-2.765618,-5.207763,6.819075,1.633962,-5.261932,-8.665798,1.218509,3.296710,-2.867990,-9.290410,5.696319,8.092071,5.219818,-6.308044,3.217191,-5.661836,-8.145569,-8.291759,-0.518760,0.461937,4.294465,5.903026,1.654261,-0.776584,-7.384563,6.508239,-1.286277,-8.771231,-1.560958,-2.076647,-8.753218,9.963904,9.693796,-7.509128,7.505111,2.701949,-5.828621,-8.410217,6.164507,9.172464,2.754088,1.967524,6.332687,-4.921930,-2.452478,3.444174,8.602289,1.802504,4.362785,-0.372765,-5.391728,8.348894,-7.171582,-1.561697,-8.960610,-7.336037,-8.049631,7.973009,7.057948,-6.070779,6.973713,0.798098,-8.763600,7.529871,-1.721084,8.918109,8.967635,3.440837,-5.412254,-3.699235,6.346518,-9.581920,-7.892276,0.499331,9.623788,-0.524007,-5.805077,-2.543444,-0.137455,-9.617673,1.667466,9.851468,-3.679153,5.745034,3.690005,6.476615,-7.600348,-7.348609,-5.356735,-1.912538,3.554185,-5.487464,-3.321241,3.492083,-6.763249,-6.215681,8.248331,5.317600,-7.285790,-8.323805,-5.127392,0.006731,1.722051,9.509073,5.404711,-0.313736,-9.606514,-0.134839,5.921459,-2.811318,7.915714,2.682884,-8.518676,-7.762188,0.678082,-0.969184,4.869168,-3.116357,-6.229268,-7.885207,-8.901611,-2.932935,2.586652,9.111104,-6.164212,-0.370650,-5.588748,-2.950375,-7.299359,-0.048109,2.159022,1.810905,-9.974485,-4.345007,-3.752962,-1.151501,6.944435,5.624718,-4.944355,8.144365,-1.242864,-8.101699,3.892095,-5.252563,-0.455583,-9.244781,8.320990,-2.344925,6.448562,-0.590441,0.296332,-5.951299,-8.637883,9.100588,2.006513,9.931108,-8.030782,-5.979410,1.198600,-3.215995,0.065130,9.350734,-5.772209,-4.027817,-9.446083,3.057463,-1.148358,-0.576131,-7.484397,4.954652,-1.937104,9.011341,-1.545177,8.958903,-7.945063,7.982572,-7.085859,3.182681,-5.964594,-1.436291,-1.574230,-8.646391,-6.460539,6.720712,-3.419755,-7.427686,-3.888065,-7.023126,0.133643,-6.372091,5.288752,-9.837974,-9.986190,-6.240588,5.055115,-7.126003,1.200412,-4.905890,4.581623,-3.010213,-0.040843,1.029749,-4.444402,-1.291673,3.877074,-3.589085,-2.458420,-1.835310,-5.590689,-0.626754,1.213206,8.751866,3.935943,-1.666333,-0.531398,3.480909,8.268380,5.744927,-3.233238,-5.154980,-6.020788,-9.417969,0.818681,5.315599,5.671751,2.216185,-9.399459,5.973485,4.521945,9.298295,-9.128425,-1.646363,2.449196,-7.007132,7.969701,9.339773,1.344919,1.995757,-8.796642,-0.371005,-0.961119,-9.162586,-7.824940,-8.935087,-0.206225,1.443683,-5.101817,-8.607408,0.181298,4.718696,5.092107,-2.612039,-8.013119,5.023940,8.606331,0.779818,-6.272117,-4.941974,1.983095,-7.639063,-9.142008,0.087029,6.574693,-4.699214,-0.702375,-3.126072,-7.874276,-5.239971,-1.017630,2.593509,3.973651,3.096201,5.613900,-4.386796,-8.329759,-0.720135,1.753359,-8.242019,5.501626,0.906953,-3.632366,-8.653931,1.092246,-9.219419,-5.070376,3.729260,-3.355073,9.276674,-1.895669,-4.951627,-9.636649,-4.324688,-3.074710,1.519208,3.111413,9.046473,-5.047811,5.033804,-2.231744,8.735757,1.405452,-5.414964,6.503732,9.136613,-7.351978,-1.741103,-5.118244,-4.967408,4.389561,9.266741,-2.556168,1.304905,-5.837218,-0.410106,-0.872546,9.625552,-7.658949,7.599310,-6.046403,-6.384598,-1.684300,7.402185,2.265896,-7.365412,2.776607,0.549486,-6.722531,-2.208388,6.181717,-5.191987,-1.620009,-4.517791,9.830475,-2.779766,-9.263210,-4.907934,-7.592402,-3.255154,0.183486,-4.836634,-7.382104,4.576058,-8.619237,3.221717,-0.362868,9.643140,7.886059,-5.108677,7.839664,-6.907146,3.402026,5.832238,4.405891,5.392932,-3.308459,2.665257,5.240731,5.964779,9.474566,-4.885455,-7.972960,-2.591907,2.150720,4.530936,-4.833018,-2.942831,-3.043557,2.911187,5.361682,1.014237,-6.171356,-6.422073,2.333037,-8.075498,-4.119976,-7.695603,-3.461181,4.090749,4.628030,1.453117,-3.884253,5.264419,8.513208,-1.107837,4.273637,-1.346235,5.973950,-6.554648,-0.648719,3.172240,7.725189,-2.109887,-9.061047,5.021827,-1.243097,8.704004,-3.293355,1.253194,3.433828,9.727942,4.896539,5.755812,-5.856597,6.009054,-6.042810,-5.502290,8.656689,5.949208,-4.563449,3.236227,9.690312,8.480473,-3.398642,1.198240,5.158332,-7.063870,-0.923062,9.191190,9.568424,-9.051376,6.799857,7.180392,2.934255,-2.271872,1.075499,-3.477996,3.450834,1.197814,-6.330964], dtype = "float64")#candidate|12191|(1260,)|const|float64
call_12187 = relay.TupleGetItem(func_4711_call(relay.reshape(var_12188.astype('float32'), [225,]), relay.reshape(var_12189.astype('float64'), [168,]), relay.reshape(var_12190.astype('float64'), [2352,]), relay.reshape(const_12191.astype('float64'), [18, 70]), ), 0)
call_12192 = relay.TupleGetItem(func_4717_call(relay.reshape(var_12188.astype('float32'), [225,]), relay.reshape(var_12189.astype('float64'), [168,]), relay.reshape(var_12190.astype('float64'), [2352,]), relay.reshape(const_12191.astype('float64'), [18, 70]), ), 0)
uop_12193 = relay.exp(call_12181.astype('float64')) # shape=(11, 14, 11)
uop_12195 = relay.exp(call_12184.astype('float64')) # shape=(11, 14, 11)
func_9229_call = mod.get_global_var('func_9229')
func_9231_call = mutated_mod.get_global_var('func_9231')
call_12199 = relay.TupleGetItem(func_9229_call(), 2)
call_12200 = relay.TupleGetItem(func_9231_call(), 2)
output = relay.Tuple([call_12170,const_12182,const_12183,call_12187,var_12188,var_12189,var_12190,const_12191,uop_12193,call_12199,])
output2 = relay.Tuple([call_12171,const_12182,const_12183,call_12192,var_12188,var_12189,var_12190,const_12191,uop_12195,call_12200,])
func_12218 = relay.Function([var_12188,var_12189,var_12190,], output)
mod['func_12218'] = func_12218
mod = relay.transform.InferType()(mod)
var_12219 = relay.var("var_12219", dtype = "float32", shape = (225,))#candidate|12219|(225,)|var|float32
var_12220 = relay.var("var_12220", dtype = "float64", shape = (168,))#candidate|12220|(168,)|var|float64
var_12221 = relay.var("var_12221", dtype = "float64", shape = (84, 28))#candidate|12221|(84, 28)|var|float64
output = func_12218(var_12219,var_12220,var_12221,)
func_12222 = relay.Function([var_12219,var_12220,var_12221,], output)
mutated_mod['func_12222'] = func_12222
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5050_call = mod.get_global_var('func_5050')
func_5052_call = mutated_mod.get_global_var('func_5052')
call_12255 = func_5050_call()
call_12256 = func_5050_call()
func_8899_call = mod.get_global_var('func_8899')
func_8900_call = mutated_mod.get_global_var('func_8900')
call_12258 = relay.TupleGetItem(func_8899_call(), 0)
call_12259 = relay.TupleGetItem(func_8900_call(), 0)
output = relay.Tuple([call_12255,call_12258,])
output2 = relay.Tuple([call_12256,call_12259,])
func_12267 = relay.Function([], output)
mod['func_12267'] = func_12267
mod = relay.transform.InferType()(mod)
output = func_12267()
func_12268 = relay.Function([], output)
mutated_mod['func_12268'] = func_12268
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8168_call = mod.get_global_var('func_8168')
func_8170_call = mutated_mod.get_global_var('func_8170')
call_12320 = relay.TupleGetItem(func_8168_call(), 2)
call_12321 = relay.TupleGetItem(func_8170_call(), 2)
func_8539_call = mod.get_global_var('func_8539')
func_8540_call = mutated_mod.get_global_var('func_8540')
call_12328 = relay.TupleGetItem(func_8539_call(), 0)
call_12329 = relay.TupleGetItem(func_8540_call(), 0)
output = relay.Tuple([call_12320,call_12328,])
output2 = relay.Tuple([call_12321,call_12329,])
func_12340 = relay.Function([], output)
mod['func_12340'] = func_12340
mod = relay.transform.InferType()(mod)
output = func_12340()
func_12341 = relay.Function([], output)
mutated_mod['func_12341'] = func_12341
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5136_call = mod.get_global_var('func_5136')
func_5137_call = mutated_mod.get_global_var('func_5137')
call_12345 = func_5136_call()
call_12346 = func_5136_call()
output = call_12345
output2 = call_12346
func_12356 = relay.Function([], output)
mod['func_12356'] = func_12356
mod = relay.transform.InferType()(mod)
output = func_12356()
func_12357 = relay.Function([], output)
mutated_mod['func_12357'] = func_12357
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6657_call = mod.get_global_var('func_6657')
func_6659_call = mutated_mod.get_global_var('func_6659')
call_12358 = func_6657_call()
call_12359 = func_6657_call()
output = call_12358
output2 = call_12359
func_12362 = relay.Function([], output)
mod['func_12362'] = func_12362
mod = relay.transform.InferType()(mod)
mutated_mod['func_12362'] = func_12362
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12362_call = mutated_mod.get_global_var('func_12362')
call_12363 = func_12362_call()
output = call_12363
func_12364 = relay.Function([], output)
mutated_mod['func_12364'] = func_12364
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10907_call = mod.get_global_var('func_10907')
func_10909_call = mutated_mod.get_global_var('func_10909')
call_12426 = relay.TupleGetItem(func_10907_call(), 0)
call_12427 = relay.TupleGetItem(func_10909_call(), 0)
func_4611_call = mod.get_global_var('func_4611')
func_4612_call = mutated_mod.get_global_var('func_4612')
call_12452 = func_4611_call()
call_12453 = func_4611_call()
var_12456 = relay.var("var_12456", dtype = "float64", shape = (6, 16, 9))#candidate|12456|(6, 16, 9)|var|float64
bop_12457 = relay.greater(call_12452.astype('bool'), relay.reshape(var_12456.astype('bool'), relay.shape_of(call_12452))) # shape=(6, 16, 9)
bop_12460 = relay.greater(call_12453.astype('bool'), relay.reshape(var_12456.astype('bool'), relay.shape_of(call_12453))) # shape=(6, 16, 9)
output = relay.Tuple([call_12426,bop_12457,])
output2 = relay.Tuple([call_12427,bop_12460,])
func_12509 = relay.Function([var_12456,], output)
mod['func_12509'] = func_12509
mod = relay.transform.InferType()(mod)
var_12510 = relay.var("var_12510", dtype = "float64", shape = (6, 16, 9))#candidate|12510|(6, 16, 9)|var|float64
output = func_12509(var_12510)
func_12511 = relay.Function([var_12510], output)
mutated_mod['func_12511'] = func_12511
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4848_call = mod.get_global_var('func_4848')
func_4850_call = mutated_mod.get_global_var('func_4850')
call_12523 = relay.TupleGetItem(func_4848_call(), 0)
call_12524 = relay.TupleGetItem(func_4850_call(), 0)
output = relay.Tuple([call_12523,])
output2 = relay.Tuple([call_12524,])
func_12529 = relay.Function([], output)
mod['func_12529'] = func_12529
mod = relay.transform.InferType()(mod)
output = func_12529()
func_12530 = relay.Function([], output)
mutated_mod['func_12530'] = func_12530
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7593_call = mod.get_global_var('func_7593')
func_7594_call = mutated_mod.get_global_var('func_7594')
call_12533 = relay.TupleGetItem(func_7593_call(), 0)
call_12534 = relay.TupleGetItem(func_7594_call(), 0)
func_4235_call = mod.get_global_var('func_4235')
func_4238_call = mutated_mod.get_global_var('func_4238')
const_12544 = relay.const([[True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True]], dtype = "bool")#candidate|12544|(1, 1050)|const|bool
var_12545 = relay.var("var_12545", dtype = "float64", shape = (168,))#candidate|12545|(168,)|var|float64
call_12543 = relay.TupleGetItem(func_4235_call(relay.reshape(const_12544.astype('bool'), [14, 15, 5]), relay.reshape(var_12545.astype('float64'), [168,]), ), 0)
call_12546 = relay.TupleGetItem(func_4238_call(relay.reshape(const_12544.astype('bool'), [14, 15, 5]), relay.reshape(var_12545.astype('float64'), [168,]), ), 0)
func_9539_call = mod.get_global_var('func_9539')
func_9541_call = mutated_mod.get_global_var('func_9541')
call_12564 = func_9539_call()
call_12565 = func_9539_call()
const_12568 = relay.const([[True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True],[False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False],[False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True],[False,True,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True],[False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,False,True],[False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True],[False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False],[True,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,True,False],[True,False,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,True],[True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False],[False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True],[False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True],[True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,False,True]], dtype = "bool")#candidate|12568|(13, 1050)|const|bool
bop_12569 = relay.equal(const_12544.astype('bool'), const_12568.astype('bool')) # shape=(13, 1050)
func_9721_call = mod.get_global_var('func_9721')
func_9723_call = mutated_mod.get_global_var('func_9723')
call_12576 = relay.TupleGetItem(func_9721_call(), 0)
call_12577 = relay.TupleGetItem(func_9723_call(), 0)
uop_12578 = relay.atanh(bop_12569.astype('float32')) # shape=(13, 1050)
func_5854_call = mod.get_global_var('func_5854')
func_5856_call = mutated_mod.get_global_var('func_5856')
call_12585 = relay.TupleGetItem(func_5854_call(), 2)
call_12586 = relay.TupleGetItem(func_5856_call(), 2)
func_7812_call = mod.get_global_var('func_7812')
func_7814_call = mutated_mod.get_global_var('func_7814')
call_12589 = func_7812_call()
call_12590 = func_7812_call()
bop_12593 = relay.bitwise_or(uop_12578.astype('uint16'), const_12544.astype('uint16')) # shape=(13, 1050)
bop_12596 = relay.bitwise_xor(const_12544.astype('int64'), const_12568.astype('int64')) # shape=(13, 1050)
func_11775_call = mod.get_global_var('func_11775')
func_11777_call = mutated_mod.get_global_var('func_11777')
var_12600 = relay.var("var_12600", dtype = "bool", shape = (297,))#candidate|12600|(297,)|var|bool
call_12599 = relay.TupleGetItem(func_11775_call(relay.reshape(var_12600.astype('bool'), [11, 9, 3])), 1)
call_12601 = relay.TupleGetItem(func_11777_call(relay.reshape(var_12600.astype('bool'), [11, 9, 3])), 1)
func_12509_call = mod.get_global_var('func_12509')
func_12511_call = mutated_mod.get_global_var('func_12511')
const_12603 = relay.const([2.982854,1.904068,-8.353178,-9.441450,-0.102628,5.587516,4.521952,-9.433758,-3.425277,-9.592864,-2.053554,-2.163948,1.294555,3.453453,2.038413,6.106563,-3.994711,-7.492406,2.468116,0.156199,-3.164379,2.562112,8.911415,8.286988,-7.911893,3.643426,-0.932310,2.319837,1.378683,-4.975971,-7.433497,3.217316,-1.577778,9.010094,-7.198883,-3.580044,2.773225,5.388915,3.916998,-0.210306,-1.286183,-1.077845,-6.851413,-5.664737,-7.157928,-1.606718,-0.482625,7.577266,7.386932,-1.535838,7.332655,-0.498265,-3.408954,-0.732449,-9.679048,-7.408101,-0.678125,1.737769,-7.246124,5.440933,8.158021,7.549587,2.704088,-1.348857,0.493414,4.948011,3.032059,2.130936,9.099591,1.243791,-0.746163,-7.267950,7.869550,0.715980,-2.883395,-7.563375,-5.178022,0.616680,9.618712,-8.991190,3.513506,0.732402,0.998847,-9.308907,-2.817772,-6.054120,7.361560,-8.599657,9.586313,-1.853438,-1.982888,1.354541,-9.200819,-4.249104,-5.577094,-9.560985,-8.336949,9.628110,-0.514663,-8.323847,8.244979,-7.292383,-4.085989,2.389626,-1.550277,4.678465,8.777258,-0.975282,8.569977,8.879559,4.301047,1.714631,1.200239,-9.626522,6.559541,5.621708,5.035256,9.404159,-6.949280,3.642772,5.262369,4.484988,0.724129,-4.177822,-5.063101,1.403633,-7.631216,-8.334771,7.209097,3.834125,3.406587,7.775454,-2.925613,-7.477472,-4.066964,-2.043911,-2.786307,-8.917436,5.577441,2.521648,-1.477955,4.806323,0.611741,-0.701432,-0.758505,8.456607,-8.832581,6.485467,-8.290983,1.220083,5.531504,-7.438289,1.685606,-6.738965,3.679998,6.434249,-9.820951,-8.243137,-0.739303,-4.294646,3.294344,-7.690102,-8.460842,-9.565602,-1.019132,9.967461,3.273978,6.356815,-2.604593,6.769658,4.482008,6.638575,-0.414525,-5.618620,9.557120,9.472234,-5.637484,-3.171542,1.536534,5.023990,5.916745,-1.933344,-9.476934,1.900223,2.887830,7.768647,1.316521,-4.071072,-0.232755,-5.224244,0.014413,-7.519815,-7.271877,-8.674478,-5.800710,1.812352,9.827485,-5.742382,9.480244,-0.935655,4.980836,-7.780074,2.826039,-3.710634,8.086702,7.199554,-6.244516,-3.191087,-6.775936,6.888895,7.561272,-2.877596,-5.515685,-6.832417,5.579251,-3.329068,-8.868668,0.871485,7.939527,-8.965079,9.212400,3.010918,0.964410,-7.210055,-8.175766,-7.727425,-3.166150,-5.057406,-7.943649,-6.758429,-5.907621,-1.645173,6.921176,-1.488896,5.641060,0.024547,-5.749850,-0.583654,4.735157,1.449015,-9.520019,0.869000,8.177750,1.333432,-0.559066,1.758834,-1.181298,-6.885772,7.181925,-0.850488,4.009671,2.368652,-4.046300,3.764776,-8.895860,-5.923363,3.666879,1.275549,2.736068,-8.648637,1.941510,-1.657115,2.723817,9.552335,0.309251,3.231875,-6.769074,-4.166481,-5.158782,-8.166524,0.519744,-8.661725,-5.548436,4.394023,-9.266330,8.726455,9.238414,-6.474156,-7.032689,0.475018,8.183154,-2.833512,-5.218417,2.232499,8.695510,9.754769,-7.006473,7.630362,-1.357602,-0.761378,-6.143282,-2.469193,-1.241726,-2.284122,-1.639684,-7.040133,-1.947946,3.039949,-2.629716,6.113340,-8.681436,-8.674873,-2.317651,3.160276,-9.437390,-9.467803,-7.028171,-2.228568,0.828539,2.979953,-5.396578,2.193663,5.760739,6.436817,7.683522,1.567501,-4.096919,-8.366122,3.445856,1.766837,-0.637372,-7.064699,-5.914340,9.838764,7.588995,8.248127,-2.433941,-3.624092,-3.179446,5.712435,-2.873238,4.076485,-0.874812,-7.656755,-9.472661,3.011359,0.574245,4.179485,-3.255756,9.903337,4.800896,-5.733434,9.268106,5.337123,-2.763371,-1.673242,7.886471,8.102988,8.033244,8.657597,2.062281,-3.076087,-1.202505,-0.133297,-8.382062,-0.525002,1.085608,-7.645254,7.108488,-5.349420,-9.595953,5.831870,-0.293593,-4.198965,-3.578363,9.122908,-5.349117,-0.251777,8.406623,-4.462139,-8.517210,-1.968978,8.280563,-6.617356,-8.130008,-9.576160,6.608837,8.903323,4.542940,-0.401500,4.446623,1.831157,4.233358,7.639326,4.622609,1.205610,-9.986469,8.736364,-5.650425,8.094214,-0.555203,3.157889,3.174064,8.659179,-9.067145,-0.167812,-7.402779,-5.247706,9.024325,-2.966334,2.906374,-2.176566,7.034071,9.825616,7.479975,8.519725,-4.744386,-8.589768,1.746310,-5.488137,6.612433,9.805536,1.078783,5.453946,3.025686,4.731852,8.094844,3.035452,6.073373,-9.239160,2.921023,-5.485793,5.520708,8.145890,-3.522917,-4.497974,-7.368288,1.875371,9.378641,-7.978546,6.595433,0.336893,6.474495,1.425674,6.789940,8.156720,6.254130,9.870914,-7.528266,2.220061,-8.050207,-2.200973,-7.455582,-9.744887,1.782355,-3.915185,-1.022194,3.891327,-7.124429,-9.307933,0.341980,-6.648330,7.560870,6.265439,-7.039723,2.464603,-2.300028,9.753249,3.515877,0.741707,-3.389575,2.396429,1.791579,-1.313675,-6.517657,-0.797874,2.593965,-2.730011,-8.691879,-0.244966,8.051880,0.737247,-8.060683,-4.934918,5.293867,-7.196881,6.698894,-3.664094,-6.091817,5.048263,-2.816580,-8.269257,-3.490467,-3.529158,-6.895524,-4.889177,-0.505559,-5.948852,-4.610816,1.749296,-0.772104,-6.595240,6.270035,-3.096807,7.931837,-6.295584,3.707481,1.426297,-6.074579,-3.312567,0.990637,-5.861952,6.844746,-2.858717,6.172555,6.111926,2.874750,8.078925,-7.961632,-2.334513,5.916072,1.834530,-9.510704,0.578972,4.868820,5.893981,-6.495936,-3.812702,-0.114990,0.683386,-5.065971,8.899749,-0.171525,1.502431,1.183061,9.648281,-9.717590,2.466312,3.216230,9.179666,7.899278,3.168934,-6.391298,8.827547,-9.897891,-6.214023,0.628775,-0.810700,2.174234,-0.575347,-6.225853,4.897780,2.581202,5.883702,4.384848,9.470140,5.815519,-1.090083,-6.717771,2.714056,7.169573,-2.321502,0.974866,-1.396426,-7.218813,3.376595,-4.173717,0.419568,-0.615141,9.335455,-2.948157,-9.238527,5.165526,9.569253,-8.302718,9.094462,6.115547,-4.383162,-3.833320,4.509390,7.936875,0.469816,7.489541,9.191974,6.757066,-7.368499,4.196478,-6.819484,6.319934,0.107283,-2.163115,8.613119,-3.487523,-0.460902,4.090109,9.034537,8.643019,-2.011964,7.638668,-6.092863,-9.416259,-9.578825,4.889470,5.998242,4.466166,-0.426323,1.573359,0.656096,6.125635,-5.793379,3.958004,7.188836,8.707382,3.178533,-7.103188,2.344777,-7.698294,-2.613840,-5.991833,0.653717,-4.383121,0.241092,0.840213,6.667063,0.342133,5.537765,0.209313,0.260338,3.987584,-1.793498,-1.984986,-9.456488,8.200203,-9.449084,-6.819597,6.547318,7.629428,-9.009388,1.426701,7.981554,-1.350141,6.653555,9.173828,-5.133403,-8.464147,-2.557507,-6.664740,9.640690,-1.937488,-8.413677,0.763002,8.427542,-9.707799,-6.782443,-3.808458,-4.615312,-9.209296,-6.207270,-1.188061,-2.067602,1.446792,3.564325,-5.672785,-7.436346,-3.881322,4.822385,-9.639812,-2.567764,9.112401,4.289965,-8.125696,-2.119312,4.362624,6.356708,2.574471,-0.941596,-1.057961,-9.024408,4.421432,6.411601,5.989269,3.589007,-3.835033,6.179187,-5.818334,0.858337,-5.501948,-1.805549,-2.668910,-9.848678,9.312044,9.544009,-0.909477,-2.700527,-8.848368,-5.034689,6.138524,8.232579,3.532033,1.404052,5.481062,0.396435,-2.105347,-3.841654,5.473255,-3.073356,0.476216,-7.252028,8.629157,0.554094,1.091493,-6.206114,-9.380671,-0.255591,-8.814871,2.770761,-5.091491,6.954219,-2.380829,1.240851,-9.638206,4.358570,3.554369,-6.059569,-8.854616,-7.887815,1.310759,-7.668180,9.575212,9.920354,-4.081662,6.127419,6.962909,2.872734,-2.069490,3.691448,-3.193503,3.837602,7.093370,9.593198,3.019076,7.744683,-8.996387,-5.565353,-8.617969,8.137399,9.569521,5.229682,6.420153,-8.674346,3.427511,2.854091,-5.484988,-1.339093,-6.668956,-1.664249,2.667687,-4.318207,9.703647,9.771879,-7.278870,8.086335,-3.226759,5.717818,9.341546,0.378230,6.380432,7.297071,2.243278,7.708541,7.391017,-0.744436,4.654900,-7.644229,7.444938,-5.977491,-1.124503,1.557674,-9.621269,-6.674997,2.878237,0.366888,-2.770656,-7.007639,-7.067367,0.710326,8.414436,-0.304265,-5.769040,-6.411428,4.713999,-3.434565,-1.158655,-9.679463,-9.973247,-2.193161,-2.345542,-9.129424,-1.108494,3.109564,7.027297,-9.568155,-1.924219,7.008096,9.299382,-2.247694,2.953330,-9.212867,2.441491,-6.510847,-7.743661,5.545492,-8.290580,5.794862,-2.377770,8.890136,-6.978237,2.063468,3.885624,5.236608,-1.802375,7.298596,-0.811359,6.826537,-8.920356,7.687334,-2.956920,2.498506,5.909018,-7.624856,0.658960,7.108524,6.810648,-0.409482,5.686712,-8.381129,-0.875069,2.167516,3.791265,-4.559500,5.496314,-7.493860,-7.596835,-2.016437,4.680053,0.740876,5.984131,-5.153525,5.143699,9.460669,-1.729356,-2.075263,2.551222,-7.243601,-0.997710,-2.511611,-6.485747,-6.316934,-6.940938,-5.424496,4.811276,1.257841,-5.604904,6.508141,-1.397311,8.352517,-3.198018,7.217088,6.357844,1.485436,-9.349368,8.054731,-5.851933,0.294790], dtype = "float64")#candidate|12603|(864,)|const|float64
call_12602 = relay.TupleGetItem(func_12509_call(relay.reshape(const_12603.astype('float64'), [6, 16, 9])), 0)
call_12604 = relay.TupleGetItem(func_12511_call(relay.reshape(const_12603.astype('float64'), [6, 16, 9])), 0)
func_6171_call = mod.get_global_var('func_6171')
func_6174_call = mutated_mod.get_global_var('func_6174')
call_12605 = relay.TupleGetItem(func_6171_call(relay.reshape(var_12600.astype('int16'), [297,])), 1)
call_12606 = relay.TupleGetItem(func_6174_call(relay.reshape(var_12600.astype('int16'), [297,])), 1)
bop_12612 = relay.not_equal(bop_12593.astype('bool'), const_12544.astype('bool')) # shape=(13, 1050)
output = relay.Tuple([call_12533,call_12543,var_12545,call_12564,call_12576,call_12585,call_12589,bop_12596,call_12599,var_12600,call_12602,const_12603,call_12605,bop_12612,])
output2 = relay.Tuple([call_12534,call_12546,var_12545,call_12565,call_12577,call_12586,call_12590,bop_12596,call_12601,var_12600,call_12604,const_12603,call_12606,bop_12612,])
F = relay.Function([var_12545,var_12600,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_12545,var_12600,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
