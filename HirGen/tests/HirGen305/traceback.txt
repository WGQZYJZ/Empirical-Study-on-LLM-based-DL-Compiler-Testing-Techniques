==========mod==========
#[version = "0.0.5"]
def @func_7936() -> Tensor[(308), float32] {
  %0 = @func_4439() /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32]) */;
  %0.3
}

def @func_8094(%var_8076: Tensor[(1, 420), uint16]) -> (Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), float64], Tensor[(1, 420), uint16]) {
  %1 = @func_4296() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(14, 10, 12), bool]) */;
  %2 = @func_4004() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64], Tensor[(3360), bool]) */;
  %3 = cast(%var_8076, dtype="uint16") /* ty=Tensor[(1, 420), uint16] */;
  %4 = cast(%var_8076, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %5 = reshape(%3, newshape=[10, 14, 3]) /* ty=Tensor[(10, 14, 3), uint16] */;
  %6 = reshape(%4, newshape=[10, 14, 3]) /* ty=Tensor[(10, 14, 3), float64] */;
  %7 = @func_2786(%5, %6) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(10, 14, 3), float32], Tensor[(10, 14, 3), uint64], Tensor[(11, 7, 4), bool], Tensor[(3360), float64], Tensor[(440), uint64], Tensor[(308), float32], Tensor[(10, 14, 3), int16]) */;
  %8 = %1.2;
  %9 = %2.0;
  %10 = %7.8;
  (%8, %9, %10, %var_8076)
}

def @func_8285() -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32]) {
  %11 = @func_7092() /* ty=(Tensor[(308), float32],) */;
  %12 = @func_7406() /* ty=Tensor[(11, 7, 4), float32] */;
  %13 = %11.0;
  (%12, %13)
}

def @func_7748(%var_7719: Tensor[(3360), float32]) -> Tensor[(3360), bool] {
  %14 = @func_4296() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(14, 10, 12), bool]) */;
  %15 = %14.1;
  %16 = cast(%var_7719, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(1), int32] */;
  %18 = cast(%15, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?), float64] */;
  %20 = mod(%18, %19) /* ty=Tensor[(3360), float64] */;
  %21 = cast(%20, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %22 = shape_of(%15, dtype="int32") /* ty=Tensor[(1), int32] */;
  %23 = cast(%15, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?), bool] */;
  %25 = greater_equal(%23, %24) /* ty=Tensor[(3360), bool] */;
  %26 = cast(%25, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %27 = shape_of(%15, dtype="int32") /* ty=Tensor[(1), int32] */;
  %28 = cast(%15, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%28, %29) /* ty=Tensor[(3360), bool] */
}

def @func_4758() -> (Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(756), float64]) {
  %30 = cast(meta[relay.Constant][0] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %31 = reshape(%30, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %32 = @func_4214(%31) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) */;
  %33 = cast(meta[relay.Constant][0] /* ty=Tensor[(756), float32] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %34 = @func_2825() /* ty=Tensor[(308), float32] */;
  %35 = %32.0;
  %36 = log10(%33) /* ty=Tensor[(756), float64] */;
  (%34, %35, %36)
}

def @func_4795() -> Tensor[(11, 7, 4), float64] {
  %37 = @func_2875() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %37.0
}

def @func_5190(%var_5177: Tensor[(308), float32]) -> (Tensor[(3360), float32], Tensor[(11, 7, 4), int8], Tensor[(308), float32]) {
  %38 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %39 = cast(%var_5177, dtype="float32") /* ty=Tensor[(308), float32] */;
  %40 = reshape(%39, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %41 = @func_3225(%40) /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), int8]) */;
  %42 = %38.2;
  %43 = %41.2;
  (%42, %43, %var_5177)
}

def @func_8339() -> (Tensor[(11, 7, 4), bool],) {
  %44 = @func_7637() /* ty=Tensor[(11, 7, 4), bool] */;
  (%44,)
}

def @func_6751() -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32]) {
  %45 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %46 = @func_2550() /* ty=Tensor[(11, 7, 4), float32] */;
  %47 = %45.0;
  %48 = @func_2825() /* ty=Tensor[(308), float32] */;
  (%46, %47, %48)
}

def @func_2027(%var_1995: Tensor[(3360), float32]) -> (Tensor[(3360), bool], Tensor[(3360), bool]) {
  %49 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %50 = %49.1;
  %51 = cast(%var_1995, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(1), int32] */;
  %53 = cast(%50, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?), bool] */;
  %55 = cast(%var_1995, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %56 = shape_of(%50, dtype="int32") /* ty=Tensor[(1), int32] */;
  %57 = cast(%50, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?), bool] */;
  %59 = not_equal(%53, %54) /* ty=Tensor[(3360), bool] */;
  %60 = equal(%57, %58) /* ty=Tensor[(3360), bool] */;
  (%59, %60)
}

def @func_6004() -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), uint16]) {
  %61 = @func_4656() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %62 = @func_2609() /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(3360), float32]) */;
  %63 = %61.1;
  %64 = %62.1;
  (%63, %64)
}

def @func_4530() -> (Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64]) {
  %65 = @func_4004() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64], Tensor[(3360), bool]) */;
  %66 = %65.1;
  %67 = @func_2811() /* ty=Tensor[(11, 7, 4), float64] */;
  (%66, %67)
}

def @func_4345() -> (Tensor[(308), int16],) {
  %68 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %69 = %68.1;
  %70 = cast(meta[relay.Constant][1] /* ty=Tensor[(308), float32] */, dtype="int16") /* ty=Tensor[(308), int16] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(1), int32] */;
  %72 = cast(%69, dtype="int16") /* ty=Tensor[(308), int16] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?), int16] */;
  %74 = logical_xor(%72, %73) /* ty=Tensor[(308), int16] */;
  (%74,)
}

def @func_5869(%var_5852: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), bool], Tensor[(16, 14, 15), float32]) {
  %75 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %76 = cast(meta[relay.Constant][2] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %77 = reshape(%76, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %78 = @func_1169(%77) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */;
  %79 = cast(%var_5852, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %80 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(3360), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %81 = cast(meta[relay.Constant][2] /* ty=Tensor[(3360), float32] */, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?), bool] */;
  %83 = %78.1;
  %84 = cast(%83, dtype="float32") /* ty=Tensor[(308), float32] */;
  %85 = cast(meta[relay.Constant][2] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %86 = reshape(%84, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %87 = reshape(%85, newshape=[2, 1680]) /* ty=Tensor[(2, 1680), float32] */;
  %88 = @func_2225(%86, %87) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(2, 1680), float32], Tensor[(6, 14, 7), bool]) */;
  %89 = %75.0;
  %90 = greater(%81, %82) /* ty=Tensor[(3360), bool] */;
  %91 = %88.2;
  (%89, %83, %90, %91)
}

def @func_2825() -> Tensor[(308), float32] {
  %92 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %92.1
}

def @func_2609() -> (Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(3360), float32]) {
  %93 = @func_2550() /* ty=Tensor[(11, 7, 4), float32] */;
  %94 = cast(meta[relay.Constant][3] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %95 = reshape(%94, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %96 = @func_1169(%95) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */;
  %97 = %96.1;
  %98 = cast(%97, dtype="uint16") /* ty=Tensor[(308), uint16] */;
  %99 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%93, dtype="uint16") /* ty=Tensor[(11, 7, 4), uint16] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %102 = cast(meta[relay.Constant][3] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %103 = reshape(%102, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %104 = @func_1266(%103) /* ty=(Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %105 = maximum(%100, %101) /* ty=Tensor[(11, 7, 4), uint16] */;
  %106 = %104.2;
  (meta[relay.Constant][3] /* ty=Tensor[(3360), float32] */, %105, %106)
}

def @func_4178(%var_4147: Tensor[(11, 7, 4), float32]) -> (Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(308), float32]) {
  %107 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %108 = @func_2609() /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(3360), float32]) */;
  %109 = @func_2982() /* ty=Tensor[(308), float32] */;
  %110 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %111 = %110.0;
  %112 = cast(%var_4147, dtype="int16") /* ty=Tensor[(11, 7, 4), int16] */;
  %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%111, dtype="int16") /* ty=Tensor[(11, 7, 4), int16] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %116 = bitwise_xor(%114, %115) /* ty=Tensor[(11, 7, 4), int16] */;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %118 = shape_of(%109, dtype="int32") /* ty=Tensor[(1), int32] */;
  %119 = cast(%109, dtype="float32") /* ty=Tensor[(308), float32] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?), float32] */;
  %121 = %107.2;
  %122 = %108.1;
  %123 = divide(%119, %120) /* ty=Tensor[(308), float32] */;
  (%121, %122, %123)
}

def @func_5976(%var_5955: Tensor[(14, 3), bool], %var_5956: Tensor[(14, 3), bool]) -> (Tensor[(14, 3), bool], Tensor[(11, 7, 4), float32], Tensor[(308), float32]) {
  %124 = cast(%var_5956, dtype="bool") /* ty=Tensor[(14, 3), bool] */;
  %125 = shape_of(%var_5955, dtype="int32") /* ty=Tensor[(2), int32] */;
  %126 = cast(%var_5955, dtype="bool") /* ty=Tensor[(14, 3), bool] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %128 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %129 = logical_or(%126, %127) /* ty=Tensor[(14, 3), bool] */;
  %130 = %128.0;
  %131 = @func_2825() /* ty=Tensor[(308), float32] */;
  (%129, %130, %131)
}

def @func_3831() -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float64]) {
  %132 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %133 = %132.0;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(308), float32] */;
  %135 = cast(meta[relay.Constant][4] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %136 = reshape(%134, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %137 = reshape(%135, newshape=[2, 1680]) /* ty=Tensor[(2, 1680), float32] */;
  %138 = @func_2225(%136, %137) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(2, 1680), float32], Tensor[(6, 14, 7), bool]) */;
  %139 = cast(%133, dtype="float64") /* ty=Tensor[(308), float64] */;
  %140 = @func_3274() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %141 = cast(meta[relay.Constant][4] /* ty=Tensor[(3360), float32] */, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %142 = reshape(%141, newshape=[3360]) /* ty=Tensor[(3360), bool] */;
  %143 = @func_2639(%142) /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) */;
  %144 = %138.0;
  %145 = atanh(%139) /* ty=Tensor[(308), float64] */;
  %146 = %140.1;
  %147 = %143.1;
  (%144, meta[relay.Constant][4] /* ty=Tensor[(3360), float32] */, %145, %146, %147)
}

def @func_4991(%var_4950: Tensor[(11, 7, 4), float32]) -> (Tensor[(15, 10, 4), float32], Tensor[(60, 10), float64], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) {
  %148 = cast(meta[relay.Constant][5] /* ty=Tensor[(60, 10), float64] */, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
  %149 = reshape(%148, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), float64] */;
  %150 = @func_1462(%149) /* ty=(Tensor[(15, 10, 4), float32],) */;
  %151 = @func_4758() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(756), float64]) */;
  %152 = %151.1;
  %153 = cast(%var_4950, dtype="int32") /* ty=Tensor[(11, 7, 4), int32] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="int32") /* ty=Tensor[(11, 7, 4), int32] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %157 = bitwise_or(%155, %156) /* ty=Tensor[(11, 7, 4), int32] */;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
  %159 = sqrt(%158) /* ty=Tensor[(11, 7, 4), float64] */;
  %160 = cast(%157, dtype="uint8") /* ty=Tensor[(11, 7, 4), uint8] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="uint8") /* ty=Tensor[(11, 7, 4), uint8] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %164 = right_shift(%162, %163) /* ty=Tensor[(11, 7, 4), uint8] */;
  %165 = cast(%157, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %169 = %150.0;
  %170 = @func_3542() /* ty=Tensor[(308), float32] */;
  %171 = mod(%167, %168) /* ty=Tensor[(11, 7, 4), float32] */;
  (%169, meta[relay.Constant][5] /* ty=Tensor[(60, 10), float64] */, %170, %171)
}

def @func_2811() -> Tensor[(11, 7, 4), float64] {
  %172 = @func_2089() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %172.0
}

def @func_7092() -> (Tensor[(308), float32],) {
  %173 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %174 = %173.0;
  (%174,)
}

def @func_4296() -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(14, 10, 12), bool]) {
  %175 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %176 = %175.0;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %178 = reshape(%177, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %179 = @func_3225(%178) /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), int8]) */;
  %180 = %179.1;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %182 = reshape(%181, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %183 = @func_2903(%182) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */;
  %184 = cast(meta[relay.Constant][6] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %185 = reshape(%184, newshape=[14, 10, 12]) /* ty=Tensor[(14, 10, 12), float64] */;
  %186 = @func_3638(%185) /* ty=(Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float64]) */;
  %187 = %186.0;
  %188 = cast(meta[relay.Constant][6] /* ty=Tensor[(1680), float64] */, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="bool") /* ty=Tensor[(14, 10, 12), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = %183.1;
  %193 = greater(%190, %191) /* ty=Tensor[(14, 10, 12), bool] */;
  (%176, %180, %192, %193)
}

def @func_7695(%var_7678: float64, %var_7679: Tensor[(7, 6, 11), float64]) -> (Tensor[(7, 6, 11), float32],) {
  %194 = cast(%var_7678, dtype="float64") /* ty=float64 */;
  %195 = cast(%var_7679, dtype="float64") /* ty=Tensor[(7, 6, 11), float64] */;
  %196 = power(%194, %195) /* ty=Tensor[(7, 6, 11), float64] */;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %198 = cast(%var_7678, dtype="float32") /* ty=float32 */;
  %199 = multiply(%197, %198) /* ty=Tensor[(7, 6, 11), float32] */;
  (%199,)
}

def @func_7026() -> (Tensor[(11, 7, 4), bool], Tensor[(3360), float32], Tensor[(756), float64]) {
  %200 = @func_5293() /* ty=(Tensor[(11, 7, 4), bool],) */;
  %201 = @func_2966() /* ty=(Tensor[(3360), float32],) */;
  %202 = @func_5606() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(9, 12, 7), float64], Tensor[(756), float64], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), bool]) */;
  %203 = %200.0;
  %204 = %201.0;
  %205 = %202.3;
  (%203, %204, %205)
}

def @func_2956() -> (Tensor[(11, 7, 4), float32],) {
  %206 = @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */;
  %207 = %206.1;
  %208 = cast(%207, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %209 = sinh(%208) /* ty=Tensor[(11, 7, 4), float32] */;
  (%209,)
}

def @func_3490() -> Tensor[(11, 7, 4), bool] {
  %210 = @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */;
  %210.1
}

def @func_2469(%var_2365: Tensor[(4, 10, 11), uint64], %var_2396: Tensor[(4, 10, 11), int64]) -> (Tensor[(308), float32], Tensor[(756), float32], Tensor[(4, 10, 11), float64], Tensor[(4, 10, 11), bool], Tensor[(4, 10, 11), uint64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(14, 6, 9), float32]) {
  %211 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %212 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 10, 11), uint64] */, dtype="uint64") /* ty=Tensor[(1, 10, 11), uint64] */;
  %213 = cast(%var_2365, dtype="uint64") /* ty=Tensor[(4, 10, 11), uint64] */;
  %214 = bitwise_xor(%212, %213) /* ty=Tensor[(4, 10, 11), uint64] */;
  %215 = cast(%var_2365, dtype="float32") /* ty=Tensor[(4, 10, 11), float32] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%214, dtype="float32") /* ty=Tensor[(4, 10, 11), float32] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %219 = add(%217, %218) /* ty=Tensor[(4, 10, 11), float32] */;
  %220 = cast(%214, dtype="int64") /* ty=Tensor[(4, 10, 11), int64] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="int64") /* ty=Tensor[(4, 10, 11), int64] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %224 = maximum(%222, %223) /* ty=Tensor[(4, 10, 11), int64] */;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(4, 10, 11), float64] */;
  %226 = shape_of(%var_2365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_2365, dtype="float64") /* ty=Tensor[(4, 10, 11), float64] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %229 = cast(%var_2396, dtype="int16") /* ty=Tensor[(4, 10, 11), int16] */;
  %230 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%224, dtype="int16") /* ty=Tensor[(4, 10, 11), int16] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %233 = minimum(%231, %232) /* ty=Tensor[(4, 10, 11), int16] */;
  %234 = cast(%224, dtype="bool") /* ty=Tensor[(4, 10, 11), bool] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="bool") /* ty=Tensor[(4, 10, 11), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %238 = cast(%var_2396, dtype="uint64") /* ty=Tensor[(4, 10, 11), uint64] */;
  %239 = shape_of(%var_2365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%var_2365, dtype="uint64") /* ty=Tensor[(4, 10, 11), uint64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %242 = cast(meta[relay.Constant][9] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %243 = reshape(%242, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %244 = @func_1266(%243) /* ty=(Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %245 = cast(meta[relay.Constant][7] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %246 = cast(meta[relay.Constant][7] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %247 = reshape(%245, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %248 = reshape(%246, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %249 = @func_1886(%247, %248) /* ty=(Tensor[(14, 6, 9), bool], Tensor[(14, 6, 9), float32]) */;
  %250 = %249.0;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %252 = %211.1;
  %253 = divide(%227, %228) /* ty=Tensor[(4, 10, 11), float64] */;
  %254 = less_equal(%236, %237) /* ty=Tensor[(4, 10, 11), bool] */;
  %255 = left_shift(%240, %241) /* ty=Tensor[(4, 10, 11), uint64] */;
  %256 = %244.1;
  %257 = cos(%251) /* ty=Tensor[(14, 6, 9), float32] */;
  (%252, meta[relay.Constant][7] /* ty=Tensor[(756), float32] */, %253, %254, %255, %256, meta[relay.Constant][9] /* ty=Tensor[(3360), float32] */, %257)
}

def @func_6682(%var_6653: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), int64], Tensor[(3360), bool]) {
  %258 = @func_2550() /* ty=Tensor[(11, 7, 4), float32] */;
  %259 = cast(%var_6653, dtype="int64") /* ty=Tensor[(11, 7, 4), int64] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="int64") /* ty=Tensor[(11, 7, 4), int64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %263 = @func_3274() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %264 = bitwise_and(%261, %262) /* ty=Tensor[(11, 7, 4), int64] */;
  %265 = %263.1;
  (%264, %265)
}

def @func_2275() -> (Tensor[(308), float32],) {
  %266 = @func_1905() /* ty=Tensor[(308), float32] */;
  (%266,)
}

def @func_7999() -> Tensor[(11, 7, 4), float32] {
  %267 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %267.0
}

def @func_5040() -> (Tensor[(11, 7, 4), float32],) {
  %268 = @func_4656() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %269 = %268.1;
  (%269,)
}

def @func_1830() -> (Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32]) {
  %270 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %271 = %270.1;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(308), float32] */;
  %273 = reshape(%272, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %274 = @func_1222(%273) /* ty=(Tensor[(11, 7, 4), bool],) */;
  %275 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %276 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %277 = %274.0;
  %278 = %275.1;
  %279 = %276.0;
  (%271, %277, %278, %279)
}

def @func_6538() -> (Tensor[(14, 6, 9), bool], Tensor[(308), float32], Tensor[(3360), float32]) {
  %280 = @func_6469() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) */;
  %281 = cast(meta[relay.Constant][10] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %282 = reshape(%281, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %283 = @func_4178(%282) /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(308), float32]) */;
  %284 = %283.0;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %286 = %280.2;
  %287 = cosh(%285) /* ty=Tensor[(3360), float32] */;
  (%286, meta[relay.Constant][10] /* ty=Tensor[(308), float32] */, %287)
}

def @func_6207(%var_6196: Tensor[(3, 5, 16), float64]) -> (Tensor[(3, 5, 16), float64],) {
  %288 = cast(%var_6196, dtype="float64") /* ty=Tensor[(3, 5, 16), float64] */;
  %289 = atanh(%288) /* ty=Tensor[(3, 5, 16), float64] */;
  %290 = cast(%289, dtype="float64") /* ty=Tensor[(3, 5, 16), float64] */;
  %291 = atan(%290) /* ty=Tensor[(3, 5, 16), float64] */;
  (%291,)
}

def @func_2966() -> (Tensor[(3360), float32],) {
  %292 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %293 = %292.0;
  (%293,)
}

def @func_7805(%var_7765: Tensor[(224), float32]) -> (Tensor[(3360), float32], Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(224), float32], Tensor[(308), float32]) {
  %294 = @func_4512() /* ty=(Tensor[(3360), float32],) */;
  %295 = @func_4656() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %296 = cast(%var_7765, dtype="float32") /* ty=Tensor[(224), float32] */;
  %297 = reshape(%296, newshape=[2, 16, 7]) /* ty=Tensor[(2, 16, 7), float32] */;
  %298 = @func_7496(%297) /* ty=(Tensor[(2, 16, 7), float32], Tensor[(11, 7, 4), bool], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %299 = @func_5395() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */;
  %300 = %294.0;
  %301 = %295.0;
  %302 = %298.1;
  %303 = %299.0;
  (%300, %301, %302, %var_7765, %303)
}

def @func_2875() -> (Tensor[(11, 7, 4), float64],) {
  %304 = @func_2811() /* ty=Tensor[(11, 7, 4), float64] */;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
  %306 = sin(%305) /* ty=Tensor[(11, 7, 4), float64] */;
  (%306,)
}

def @func_4615() -> (Tensor[(11, 7, 4), float64], Tensor[(308), float32], Tensor[(3360), float64]) {
  %307 = @func_2875() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %308 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %309 = %308.1;
  %310 = cast(%309, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %311 = %307.0;
  %312 = @func_3542() /* ty=Tensor[(308), float32] */;
  %313 = log10(%310) /* ty=Tensor[(3360), float64] */;
  (%311, %312, %313)
}

def @func_1113(%var_1097: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32]) {
  %314 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %315 = cast(%var_1097, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %316 = %314.1;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(308), float32] */;
  %318 = reshape(%315, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %319 = reshape(%317, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %320 = @func_676(%318, %319) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %321 = cast(%316, dtype="float32") /* ty=Tensor[(308), float32] */;
  %322 = reshape(%321, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %323 = @func_392(%322) /* ty=(Tensor[(11, 7, 4), float32],) */;
  %324 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %325 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %326 = %320.0;
  %327 = %323.0;
  %328 = %324.0;
  %329 = %325.0;
  (%316, %326, %var_1097, %327, %328, %329)
}

def @func_1933() -> (Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) {
  %330 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %331 = cast(meta[relay.Constant][11] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %332 = reshape(%331, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), float64] */;
  %333 = @func_1462(%332) /* ty=(Tensor[(15, 10, 4), float32],) */;
  %334 = %330.0;
  %335 = %333.0;
  (%334, %335, meta[relay.Constant][11] /* ty=Tensor[(600), float64] */)
}

def @func_5820() -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) {
  %336 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %337 = @func_2875() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %338 = %336.2;
  %339 = %337.0;
  (%338, %339)
}

def @func_8149(%var_8128: Tensor[(60), float64]) -> (Tensor[(11, 7, 4), int64], Tensor[(12, 5), float64], Tensor[(60), float64], Tensor[(11, 7, 4), float32]) {
  %340 = @func_5820() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) */;
  %341 = %340.0;
  %342 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 7, 4), float32] */, dtype="int64") /* ty=Tensor[(11, 7, 4), int64] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="int64") /* ty=Tensor[(11, 7, 4), int64] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %346 = cast(%var_8128, dtype="float64") /* ty=Tensor[(60), float64] */;
  %347 = reshape(%346, newshape=[12, 5]) /* ty=Tensor[(12, 5), float64] */;
  %348 = @func_4634(%347) /* ty=(Tensor[(12, 5), float64],) */;
  %349 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %350 = add(%344, %345) /* ty=Tensor[(11, 7, 4), int64] */;
  %351 = %348.0;
  %352 = %349.3;
  (%350, %351, %var_8128, %352)
}

def @func_2225(%var_2206: Tensor[(308), float32], %var_2216: Tensor[(2, 1680), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(2, 1680), float32], Tensor[(6, 14, 7), bool]) {
  %353 = cast(%var_2206, dtype="float32") /* ty=Tensor[(308), float32] */;
  %354 = reshape(%353, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %355 = @func_392(%354) /* ty=(Tensor[(11, 7, 4), float32],) */;
  %356 = cast(%var_2216, dtype="float32") /* ty=Tensor[(2, 1680), float32] */;
  %357 = %355.0;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %359 = reshape(%356, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %360 = reshape(%358, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %361 = @func_676(%359, %360) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %362 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 14, 7), float64] */;
  %363 = acosh(%362) /* ty=Tensor[(6, 14, 7), float64] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(6, 14, 7), float64] */;
  %365 = tan(%364) /* ty=Tensor[(6, 14, 7), float64] */;
  %366 = cast(%365, dtype="bool") /* ty=Tensor[(6, 14, 7), bool] */;
  %367 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%363, dtype="bool") /* ty=Tensor[(6, 14, 7), bool] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %370 = %361.0;
  %371 = greater(%368, %369) /* ty=Tensor[(6, 14, 7), bool] */;
  (%357, %var_2206, %370, %var_2216, %371)
}

def @func_2925() -> (Tensor[(3360), float32], Tensor[(3360), float32]) {
  %372 = @func_2609() /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(3360), float32]) */;
  %373 = %372.0;
  %374 = cast(%373, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %375 = reshape(%374, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %376 = @func_1266(%375) /* ty=(Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %377 = %376.3;
  (%373, %377)
}

def @func_2291(%var_2288: Tensor[(9, 12, 7), float64]) -> (Tensor[(9, 12, 7), float64],) {
  %378 = cast(%var_2288, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %379 = acosh(%378) /* ty=Tensor[(9, 12, 7), float64] */;
  (%379,)
}

def @func_4214(%var_4212: Tensor[(756), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) {
  %380 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %381 = cast(%var_4212, dtype="float32") /* ty=Tensor[(756), float32] */;
  %382 = cast(%var_4212, dtype="float32") /* ty=Tensor[(756), float32] */;
  %383 = reshape(%381, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %384 = reshape(%382, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %385 = @func_1886(%383, %384) /* ty=(Tensor[(14, 6, 9), bool], Tensor[(14, 6, 9), float32]) */;
  %386 = %380.0;
  %387 = %385.0;
  (%386, %387, %var_4212)
}

def @func_4868(%var_4842: Tensor[(3360), float32], %var_4850: Tensor[(60), float64]) -> (Tensor[(600), float64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(12, 5), float64], Tensor[(60), float64], Tensor[(308), float32], Tensor[(308), float32]) {
  %388 = @func_1933() /* ty=(Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) */;
  %389 = cast(%var_4842, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %390 = reshape(%389, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %391 = @func_1266(%390) /* ty=(Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %392 = cast(%var_4850, dtype="float64") /* ty=Tensor[(60), float64] */;
  %393 = reshape(%392, newshape=[12, 5]) /* ty=Tensor[(12, 5), float64] */;
  %394 = @func_4634(%393) /* ty=(Tensor[(12, 5), float64],) */;
  %395 = %388.2;
  %396 = %391.1;
  %397 = %394.0;
  %398 = @func_3873() /* ty=Tensor[(308), float32] */;
  %399 = @func_3542() /* ty=Tensor[(308), float32] */;
  (%395, %396, %var_4842, %397, %var_4850, %398, %399)
}

def @func_4656() -> (Tensor[(308), float32], Tensor[(11, 7, 4), float32]) {
  %400 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %401 = @func_3590() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */;
  %402 = %400.3;
  %403 = %401.0;
  (%402, %403)
}

def @func_5771() -> (Tensor[(3360), float32], Tensor[(756), float64]) {
  %404 = @func_2966() /* ty=(Tensor[(3360), float32],) */;
  %405 = @func_4758() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(756), float64]) */;
  %406 = %404.0;
  %407 = %405.2;
  (%406, %407)
}

def @func_5128() -> (Tensor[(11, 7, 4), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), float32]) {
  %408 = @func_2875() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %409 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %410 = @func_3831() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float64]) */;
  %411 = %408.0;
  %412 = %409.1;
  %413 = %410.0;
  (%411, %412, %413)
}

def @func_4706() -> (Tensor[(308), int16], Tensor[(9, 12, 7), float64], Tensor[(18, 42), float64]) {
  %414 = @func_4345() /* ty=(Tensor[(308), int16],) */;
  %415 = cast(meta[relay.Constant][14] /* ty=Tensor[(18, 42), float64] */, dtype="float64") /* ty=Tensor[(18, 42), float64] */;
  %416 = reshape(%415, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), float64] */;
  %417 = @func_2291(%416) /* ty=(Tensor[(9, 12, 7), float64],) */;
  %418 = %414.0;
  %419 = %417.0;
  (%418, %419, meta[relay.Constant][14] /* ty=Tensor[(18, 42), float64] */)
}

def @func_7406() -> Tensor[(11, 7, 4), float32] {
  %420 = @func_5168() /* ty=(Tensor[(1680), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float32]) */;
  %420.2
}

def @func_2550() -> Tensor[(11, 7, 4), float32] {
  %421 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %421.2
}

def @func_1752(%var_1729: Tensor[(308), float32]) -> (Tensor[(308), float64], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) {
  %422 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %423 = %422.0;
  %424 = cast(%var_1729, dtype="float64") /* ty=Tensor[(308), float64] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(1), int32] */;
  %426 = cast(%423, dtype="float64") /* ty=Tensor[(308), float64] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?), float64] */;
  %428 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %429 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %430 = %429.0;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %432 = acos(%431) /* ty=Tensor[(11, 7, 4), float32] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
  %434 = power(%426, %427) /* ty=Tensor[(308), float64] */;
  %435 = %428.0;
  %436 = sigmoid(%433) /* ty=Tensor[(11, 7, 4), float64] */;
  (%434, %435, %436)
}

def @func_7903() -> Tensor[(11, 7, 4), float32] {
  %437 = @func_6319() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) */;
  %437.0
}

def @func_4439() -> (Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32]) {
  %438 = cast(meta[relay.Constant][15] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %439 = reshape(%438, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %440 = @func_2027(%439) /* ty=(Tensor[(3360), bool], Tensor[(3360), bool]) */;
  %441 = @func_3542() /* ty=Tensor[(308), float32] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(308), float32] */;
  %443 = %440.0;
  %444 = @func_3490() /* ty=Tensor[(11, 7, 4), bool] */;
  %445 = sigmoid(%442) /* ty=Tensor[(308), float32] */;
  (%443, meta[relay.Constant][15] /* ty=Tensor[(3360), float32] */, %444, %445)
}

def @func_2518() -> (Tensor[(308), float32], Tensor[(11, 7, 4), bool]) {
  %446 = @func_2275() /* ty=(Tensor[(308), float32],) */;
  %447 = %446.0;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(308), float32] */;
  %449 = reshape(%448, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %450 = @func_1222(%449) /* ty=(Tensor[(11, 7, 4), bool],) */;
  %451 = %450.0;
  (%447, %451)
}

def @func_7587() -> Tensor[(14, 6, 9), float32] {
  %452 = @func_6538() /* ty=(Tensor[(14, 6, 9), bool], Tensor[(308), float32], Tensor[(3360), float32]) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  tan(%454) /* ty=Tensor[(14, 6, 9), float32] */
}

def @func_984() -> (Tensor[(308), float32],) {
  %455 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %456 = %455.1;
  (%456,)
}

def @func_1080() -> (Tensor[(308), float32], Tensor[(308), float32]) {
  %457 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %458 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %459 = %457.0;
  %460 = %458.3;
  (%459, %460)
}

def @func_5467(%var_5453: Tensor[(1, 600), float64]) -> (Tensor[(11, 7, 4), float32], Tensor[(15, 10, 4), float32], Tensor[(1, 600), float64]) {
  %461 = @func_5040() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %462 = cast(%var_5453, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %463 = reshape(%462, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), float64] */;
  %464 = @func_1462(%463) /* ty=(Tensor[(15, 10, 4), float32],) */;
  %465 = %461.0;
  %466 = %464.0;
  (%465, %466, %var_5453)
}

def @func_1886(%var_1872: Tensor[(14, 6, 9), float32], %var_1882: Tensor[(14, 6, 9), float32]) -> (Tensor[(14, 6, 9), bool], Tensor[(14, 6, 9), float32]) {
  %467 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 6, 9), float32] */, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %468 = shape_of(%var_1872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%var_1872, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %471 = cast(%var_1872, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %472 = sigmoid(%471) /* ty=Tensor[(14, 6, 9), float32] */;
  %473 = cast(%var_1882, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %477 = less(%469, %470) /* ty=Tensor[(14, 6, 9), bool] */;
  %478 = floor_mod(%475, %476) /* ty=Tensor[(14, 6, 9), float32] */;
  (%477, %478)
}

def @func_3287(%var_3279: Tensor[(5, 2, 5), float32], %var_3280: Tensor[(5, 2, 5), float32]) -> Tensor[(5, 2, 5), float32] {
  %479 = cast(%var_3280, dtype="float32") /* ty=Tensor[(5, 2, 5), float32] */;
  %480 = shape_of(%var_3279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%var_3279, dtype="float32") /* ty=Tensor[(5, 2, 5), float32] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%481, %482) /* ty=Tensor[(5, 2, 5), float32] */
}

def @func_6602(%var_6569: Tensor[(11, 7, 4), float32], %var_6593: Tensor[(3360), float32]) -> (Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64], Tensor[(3360), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32]) {
  %483 = @func_5040() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %484 = %483.0;
  %485 = cast(%var_6569, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = @func_2089() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %490 = cast(%var_6593, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %491 = reshape(%490, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %492 = @func_2903(%491) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */;
  %493 = cast(%484, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %494 = rsqrt(%493) /* ty=Tensor[(11, 7, 4), float32] */;
  %495 = cast(%var_6569, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %499 = equal(%487, %488) /* ty=Tensor[(11, 7, 4), bool] */;
  %500 = %489.0;
  %501 = %492.2;
  %502 = floor_mod(%497, %498) /* ty=Tensor[(11, 7, 4), float32] */;
  (%499, %500, %501, %var_6593, %502)
}

def @func_7116(%var_7114: Tensor[(50), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) {
  %503 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %504 = @func_6413() /* ty=(Tensor[(3360), float32],) */;
  %505 = @func_5395() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */;
  %506 = cast(%var_7114, dtype="float32") /* ty=Tensor[(50), float32] */;
  %507 = cast(%var_7114, dtype="float32") /* ty=Tensor[(50), float32] */;
  %508 = reshape(%506, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), float32] */;
  %509 = reshape(%507, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), float32] */;
  %510 = %503.0;
  %511 = %504.0;
  %512 = %505.1;
  %513 = @func_3287(%508, %509) /* ty=Tensor[(5, 2, 5), float32] */;
  (%510, %511, %512, %513, %var_7114)
}

def @func_7637() -> Tensor[(11, 7, 4), bool] {
  @func_3114() /* ty=Tensor[(11, 7, 4), bool] */
}

def @func_912(%var_894: Tensor[(308), float32]) -> (Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), uint32]) {
  %514 = cast(meta[relay.Constant][17] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %515 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %516 = %515.1;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(308), float32] */;
  %518 = reshape(%514, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %519 = reshape(%517, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %520 = @func_676(%518, %519) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %521 = cast(%516, dtype="float32") /* ty=Tensor[(308), float32] */;
  %522 = reshape(%521, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %523 = @func_392(%522) /* ty=(Tensor[(11, 7, 4), float32],) */;
  %524 = cast(meta[relay.Constant][17] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %525 = %523.0;
  %526 = cast(%525, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %527 = reshape(%524, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %528 = reshape(%526, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %529 = @func_676(%527, %528) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %530 = cast(%var_894, dtype="uint32") /* ty=Tensor[(308), uint32] */;
  %531 = shape_of(%516, dtype="int32") /* ty=Tensor[(1), int32] */;
  %532 = cast(%516, dtype="uint32") /* ty=Tensor[(308), uint32] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %534 = %520.2;
  %535 = %529.2;
  %536 = right_shift(%532, %533) /* ty=Tensor[(308), uint32] */;
  (%534, meta[relay.Constant][17] /* ty=Tensor[(3360), float32] */, %525, %535, %536)
}

def @func_8378() -> Tensor[(308), float32] {
  %537 = @func_3358() /* ty=(Tensor[(308), float32],) */;
  %537.0
}

def @func_3274() -> (Tensor[(308), float32], Tensor[(3360), bool]) {
  %538 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %539 = @func_1905() /* ty=Tensor[(308), float32] */;
  %540 = %538.1;
  (%539, %540)
}

def @func_676(%var_655: Tensor[(16, 14, 15), float32], %var_661: Tensor[(308), float32]) -> (Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) {
  %541 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 14, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %542 = shape_of(%var_655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%var_655, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %545 = cast(%var_661, dtype="float32") /* ty=Tensor[(308), float32] */;
  %546 = reshape(%545, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %547 = @func_392(%546) /* ty=(Tensor[(11, 7, 4), float32],) */;
  %548 = cast(%var_661, dtype="float32") /* ty=Tensor[(308), float32] */;
  %549 = reshape(%548, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %550 = @func_392(%549) /* ty=(Tensor[(11, 7, 4), float32],) */;
  %551 = power(%543, %544) /* ty=Tensor[(16, 14, 15), float32] */;
  %552 = %547.0;
  %553 = %550.0;
  (%551, %552, %var_661, %553)
}

def @func_7846() -> Tensor[(11, 7, 4), float32] {
  %554 = @func_6751() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %554.0
}

def @func_3358() -> (Tensor[(308), float32],) {
  %555 = @func_1905() /* ty=Tensor[(308), float32] */;
  (%555,)
}

def @func_6469() -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) {
  %556 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %557 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %558 = cast(meta[relay.Constant][19] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %559 = cast(meta[relay.Constant][19] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %560 = reshape(%558, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %561 = reshape(%559, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %562 = @func_1886(%560, %561) /* ty=(Tensor[(14, 6, 9), bool], Tensor[(14, 6, 9), float32]) */;
  %563 = %556.1;
  %564 = %557.0;
  %565 = %562.0;
  (%563, %564, %565, meta[relay.Constant][19] /* ty=Tensor[(756), float32] */)
}

def @func_5293() -> (Tensor[(11, 7, 4), bool],) {
  %566 = @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */;
  %567 = %566.1;
  (%567,)
}

def @func_1373() -> (Tensor[(11, 7, 4), float32],) {
  %568 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %569 = %568.0;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %571 = asin(%570) /* ty=Tensor[(11, 7, 4), float32] */;
  (%571,)
}

def @func_5606() -> (Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(9, 12, 7), float64], Tensor[(756), float64], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), bool]) {
  %572 = @func_4122() /* ty=(Tensor[(600), float64], Tensor[(308), float32]) */;
  %573 = @func_4004() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64], Tensor[(3360), bool]) */;
  %574 = cast(meta[relay.Constant][20] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %575 = reshape(%574, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), float64] */;
  %576 = @func_2291(%575) /* ty=(Tensor[(9, 12, 7), float64],) */;
  %577 = @func_3590() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */;
  %578 = %572.1;
  %579 = %573.1;
  %580 = %576.0;
  %581 = @func_3490() /* ty=Tensor[(11, 7, 4), bool] */;
  %582 = %577.1;
  (%578, %579, %580, meta[relay.Constant][20] /* ty=Tensor[(756), float64] */, %581, %582)
}

def @func_8451(%var_8441: Tensor[(3360), bool]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), bool]) {
  %583 = @func_2275() /* ty=(Tensor[(308), float32],) */;
  %584 = cast(%var_8441, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %585 = reshape(%584, newshape=[3360]) /* ty=Tensor[(3360), bool] */;
  %586 = @func_2639(%585) /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) */;
  %587 = @func_7999() /* ty=Tensor[(11, 7, 4), float32] */;
  %588 = %583.0;
  %589 = %586.0;
  (%587, %588, %589, %var_8441)
}

def @main(%var_8727: Tensor[(15, 6, 16), float32]) -> (Tensor[(15, 6, 16), int16],) {
  %590 = cast(%var_8727, dtype="float32") /* ty=Tensor[(15, 6, 16), float32] */;
  %591 = asinh(%590) /* ty=Tensor[(15, 6, 16), float32] */;
  %592 = cast(%591, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %593 = atan(%592) /* ty=Tensor[(15, 6, 16), float64] */;
  %594 = cast(%591, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%593, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %598 = floor_mod(%596, %597) /* ty=Tensor[(15, 6, 16), float64] */;
  %599 = cast(%598, dtype="int16") /* ty=Tensor[(15, 6, 16), int16] */;
  %600 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%591, dtype="int16") /* ty=Tensor[(15, 6, 16), int16] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %603 = right_shift(%601, %602) /* ty=Tensor[(15, 6, 16), int16] */;
  (%603,)
}

def @func_852() -> (Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) {
  %604 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 10, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 1), float32] */;
  %605 = cast(meta[relay.Constant][22] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %606 = cast(meta[relay.Constant][23] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %607 = reshape(%605, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %608 = reshape(%606, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %609 = @func_676(%607, %608) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %610 = sinh(%604) /* ty=Tensor[(11, 10, 1), float32] */;
  %611 = %609.2;
  (%610, %611, meta[relay.Constant][22] /* ty=Tensor[(3360), float32] */, meta[relay.Constant][23] /* ty=Tensor[(308), float32] */)
}

def @func_3225(%var_3219: Tensor[(11, 7, 4), float32]) -> (Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), int8]) {
  %612 = cast(meta[relay.Constant][24] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %613 = reshape(%612, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %614 = @func_2027(%613) /* ty=(Tensor[(3360), bool], Tensor[(3360), bool]) */;
  %615 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %616 = %615.0;
  %617 = cast(%var_3219, dtype="int8") /* ty=Tensor[(11, 7, 4), int8] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="int8") /* ty=Tensor[(11, 7, 4), int8] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %621 = %614.0;
  %622 = left_shift(%619, %620) /* ty=Tensor[(11, 7, 4), int8] */;
  (%621, meta[relay.Constant][24] /* ty=Tensor[(3360), float32] */, %622)
}

def @func_1266(%var_1233: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) {
  %623 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %624 = cast(%var_1233, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %625 = reshape(%624, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %626 = @func_1169(%625) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */;
  %627 = %623.1;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(308), float32] */;
  %629 = reshape(%628, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %630 = @func_912(%629) /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), uint32]) */;
  %631 = %630.1;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %633 = atanh(%632) /* ty=Tensor[(3360), float64] */;
  %634 = cast(%633, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %635 = %626.3;
  %636 = sqrt(%634) /* ty=Tensor[(3360), float32] */;
  (%627, %635, %var_1233, %636)
}

def @func_2977() -> Tensor[(308), float32] {
  %637 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %637.0
}

def @func_8407() -> (Tensor[(3360), float32],) {
  %638 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %639 = %638.0;
  (%639,)
}

def @func_8241() -> (Tensor[(11, 7, 4), float32],) {
  %640 = @func_3968() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32]) */;
  %641 = %640.0;
  (%641,)
}

def @func_8324() -> (Tensor[(756), float64], Tensor[(308), float32]) {
  %642 = @func_5771() /* ty=(Tensor[(3360), float32], Tensor[(756), float64]) */;
  %643 = @func_6158() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(60), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64]) */;
  %644 = %642.1;
  %645 = %643.0;
  (%644, %645)
}

def @func_5337() -> (Tensor[(308), float32],) {
  %646 = @func_4615() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(308), float32], Tensor[(3360), float64]) */;
  %647 = %646.1;
  (%647,)
}

def @func_8628(%var_8574: Tensor[(308), float32], %var_8626: Tensor[(10, 5), float32]) -> (Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64], Tensor[(1, 600), float64], Tensor[(600), float64], Tensor[(3360), float32], Tensor[(10, 5), float32]) {
  %648 = @func_2966() /* ty=(Tensor[(3360), float32],) */;
  %649 = cast(%var_8574, dtype="float32") /* ty=Tensor[(308), float32] */;
  %650 = %648.0;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %652 = reshape(%649, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %653 = reshape(%651, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %654 = @func_6602(%652, %653) /* ty=(Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64], Tensor[(3360), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32]) */;
  %655 = @func_7092() /* ty=(Tensor[(308), float32],) */;
  %656 = @func_2825() /* ty=Tensor[(308), float32] */;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(308), float32] */;
  %658 = reshape(%657, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %659 = @func_392(%658) /* ty=(Tensor[(11, 7, 4), float32],) */;
  %660 = cast(meta[relay.Constant][25] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %661 = reshape(%660, newshape=[1, 600]) /* ty=Tensor[(1, 600), float64] */;
  %662 = @func_5467(%661) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(15, 10, 4), float32], Tensor[(1, 600), float64]) */;
  %663 = cast(%var_8626, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %664 = reshape(%663, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %665 = @func_7116(%664) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */;
  %666 = %654.0;
  %667 = %655.0;
  %668 = %659.0;
  %669 = @func_4818() /* ty=Tensor[(11, 7, 4), float64] */;
  %670 = %662.2;
  %671 = %665.1;
  (%650, %666, %var_8574, %656, %667, %668, %669, %670, meta[relay.Constant][25] /* ty=Tensor[(600), float64] */, %671, %var_8626)
}

def @func_7377() -> Tensor[(11, 7, 4), uint16] {
  %672 = @func_6004() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), uint16]) */;
  %672.1
}

def @func_4560(%var_4553: Tensor[(12, 15, 16), uint16], %var_4554: Tensor[(12, 15, 16), uint16]) -> (Tensor[(12, 15, 16), bool],) {
  %673 = cast(%var_4554, dtype="bool") /* ty=Tensor[(12, 15, 16), bool] */;
  %674 = shape_of(%var_4553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%var_4553, dtype="bool") /* ty=Tensor[(12, 15, 16), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %677 = equal(%675, %676) /* ty=Tensor[(12, 15, 16), bool] */;
  (%677,)
}

def @func_6807() -> (Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(420), uint16], Tensor[(420, 1), uint16]) {
  %678 = @func_5771() /* ty=(Tensor[(3360), float32], Tensor[(756), float64]) */;
  %679 = @func_3831() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float64]) */;
  %680 = %679.4;
  %681 = cast(%680, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %682 = cast(meta[relay.Constant][26] /* ty=Tensor[(420, 1), uint16] */, dtype="uint16") /* ty=Tensor[(420, 1), uint16] */;
  %683 = reshape(%682, newshape=[420]) /* ty=Tensor[(420), uint16] */;
  %684 = @func_3160(%683) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(420), uint16]) */;
  %685 = %678.0;
  %686 = atanh(%681) /* ty=Tensor[(11, 7, 4), float32] */;
  %687 = %684.2;
  (%685, %686, %687, meta[relay.Constant][26] /* ty=Tensor[(420, 1), uint16] */)
}

def @func_1327() -> (Tensor[(11, 7, 4), float32],) {
  %688 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %689 = %688.3;
  (%689,)
}

def @func_392(%var_388: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), float32],) {
  %690 = cast(%var_388, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %691 = erf(%690) /* ty=Tensor[(11, 7, 4), float32] */;
  (%691,)
}

def @func_7200(%var_7173: Tensor[(756), float32]) -> (Tensor[(60), float64], Tensor[(756), float32], Tensor[(756), float32], Tensor[(12, 5), float64], Tensor[(9, 12, 7), float64], Tensor[(3360), bool]) {
  %692 = @func_6158() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(60), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64]) */;
  %693 = cast(%var_7173, dtype="float32") /* ty=Tensor[(756), float32] */;
  %694 = reshape(%693, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %695 = @func_4214(%694) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) */;
  %696 = %692.3;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(60), float64] */;
  %698 = reshape(%697, newshape=[12, 5]) /* ty=Tensor[(12, 5), float64] */;
  %699 = @func_4634(%698) /* ty=(Tensor[(12, 5), float64],) */;
  %700 = @func_5606() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(9, 12, 7), float64], Tensor[(756), float64], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), bool]) */;
  %701 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %702 = %695.2;
  %703 = %699.0;
  %704 = %700.2;
  %705 = %701.1;
  (%696, %702, %var_7173, %703, %704, %705)
}

def @func_4634(%var_4619: Tensor[(12, 5), float64]) -> (Tensor[(12, 5), float64],) {
  %706 = cast(%var_4619, dtype="float64") /* ty=Tensor[(12, 5), float64] */;
  %707 = exp(%706) /* ty=Tensor[(12, 5), float64] */;
  (%707,)
}

def @func_7297() -> (Tensor[(11, 7, 4), float32], Tensor[(420), uint16], Tensor[(308), float32], Tensor[(5, 2, 5), float32]) {
  %708 = @func_6319() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) */;
  %709 = @func_6807() /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(420), uint16], Tensor[(420, 1), uint16]) */;
  %710 = @func_5004() /* ty=(Tensor[(308), float32],) */;
  %711 = @func_3590() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */;
  %712 = %708.0;
  %713 = %709.2;
  %714 = %710.0;
  %715 = %711.2;
  (%712, %713, %714, %715)
}

def @func_3160(%var_3153: Tensor[(420), uint16]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(420), uint16]) {
  %716 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %717 = cast(%var_3153, dtype="uint16") /* ty=Tensor[(420), uint16] */;
  %718 = cast(%var_3153, dtype="float64") /* ty=Tensor[(420), float64] */;
  %719 = reshape(%717, newshape=[10, 14, 3]) /* ty=Tensor[(10, 14, 3), uint16] */;
  %720 = reshape(%718, newshape=[10, 14, 3]) /* ty=Tensor[(10, 14, 3), float64] */;
  %721 = @func_2786(%719, %720) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(10, 14, 3), float32], Tensor[(10, 14, 3), uint64], Tensor[(11, 7, 4), bool], Tensor[(3360), float64], Tensor[(440), uint64], Tensor[(308), float32], Tensor[(10, 14, 3), int16]) */;
  %722 = %716.0;
  %723 = %721.2;
  (%722, %723, %var_3153)
}

def @func_8660() -> Tensor[(308), float32] {
  %724 = @func_1933() /* ty=(Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) */;
  %724.0
}

def @func_4122() -> (Tensor[(600), float64], Tensor[(308), float32]) {
  %725 = @func_1933() /* ty=(Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) */;
  %726 = @func_1933() /* ty=(Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) */;
  %727 = %725.2;
  %728 = %726.0;
  (%727, %728)
}

def @func_1905() -> Tensor[(308), float32] {
  %729 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %729.0
}

def @func_1169(%var_1150: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) {
  %730 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %731 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %732 = cast(%var_1150, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %733 = %730.0;
  %734 = cast(%733, dtype="float32") /* ty=Tensor[(308), float32] */;
  %735 = reshape(%732, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %736 = reshape(%734, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %737 = @func_676(%735, %736) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %738 = cast(%var_1150, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %739 = rsqrt(%738) /* ty=Tensor[(3360), float64] */;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %741 = reshape(%740, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %742 = @func_1113(%741) /* ty=(Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32]) */;
  %743 = %731.3;
  %744 = %737.1;
  %745 = %742.1;
  (%733, %743, %744, %739, %745)
}

def @func_6319() -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) {
  %746 = @func_4530() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64]) */;
  %747 = @func_2550() /* ty=Tensor[(11, 7, 4), float32] */;
  %748 = %746.0;
  (%747, %748)
}

def @func_1034() -> (Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) {
  %749 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %750 = cast(meta[relay.Constant][27] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %751 = %749.1;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(308), float32] */;
  %753 = reshape(%750, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %754 = reshape(%752, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %755 = @func_676(%753, %754) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %756 = %755.3;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %758 = log(%757) /* ty=Tensor[(11, 7, 4), float32] */;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %760 = reshape(%759, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %761 = @func_392(%760) /* ty=(Tensor[(11, 7, 4), float32],) */;
  %762 = %761.0;
  (%751, meta[relay.Constant][27] /* ty=Tensor[(3360), float32] */, %758, %762)
}

def @func_3542() -> Tensor[(308), float32] {
  %763 = @func_1830() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32]) */;
  %763.2
}

def @func_2982() -> Tensor[(308), float32] {
  %764 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %764.0
}

def @func_4818() -> Tensor[(11, 7, 4), float64] {
  @func_4795() /* ty=Tensor[(11, 7, 4), float64] */
}

def @func_5004() -> (Tensor[(308), float32],) {
  %765 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %766 = %765.1;
  (%766,)
}

def @func_6158() -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(60), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64]) {
  %767 = cast(meta[relay.Constant][28] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %768 = cast(meta[relay.Constant][29] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %769 = reshape(%767, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %770 = reshape(%768, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %771 = @func_4868(%769, %770) /* ty=(Tensor[(600), float64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(12, 5), float64], Tensor[(60), float64], Tensor[(308), float32], Tensor[(308), float32]) */;
  %772 = @func_3831() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float64]) */;
  %773 = @func_5293() /* ty=(Tensor[(11, 7, 4), bool],) */;
  %774 = @func_5606() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(9, 12, 7), float64], Tensor[(756), float64], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), bool]) */;
  %775 = @func_2825() /* ty=Tensor[(308), float32] */;
  %776 = %771.6;
  %777 = %772.1;
  %778 = %773.0;
  %779 = %774.1;
  (%775, %776, meta[relay.Constant][28] /* ty=Tensor[(3360), float32] */, meta[relay.Constant][29] /* ty=Tensor[(60), float64] */, %777, %778, %779)
}

def @func_6911() -> (Tensor[(308), float32], Tensor[(600), float64]) {
  %780 = @func_4122() /* ty=(Tensor[(600), float64], Tensor[(308), float32]) */;
  %781 = @func_3873() /* ty=Tensor[(308), float32] */;
  %782 = %780.0;
  (%781, %782)
}

def @func_6845() -> (Tensor[(308), int16], Tensor[(14, 10, 12), float64]) {
  %783 = @func_4706() /* ty=(Tensor[(308), int16], Tensor[(9, 12, 7), float64], Tensor[(18, 42), float64]) */;
  %784 = @func_5059() /* ty=(Tensor[(308), int16], Tensor[(14, 10, 12), float64], Tensor[(1680), float64]) */;
  %785 = %783.0;
  %786 = %784.1;
  (%785, %786)
}

def @func_2639(%var_2634: Tensor[(3360), bool]) -> (Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) {
  %787 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %788 = @func_2089() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %789 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %790 = %789.1;
  %791 = cast(%var_2634, dtype="int32") /* ty=Tensor[(3360), int32] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(1), int32] */;
  %793 = cast(%790, dtype="int32") /* ty=Tensor[(3360), int32] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?), int32] */;
  %795 = %787.0;
  %796 = %788.0;
  %797 = subtract(%793, %794) /* ty=Tensor[(3360), int32] */;
  (%795, %796, %797)
}

def @func_8671() -> (Tensor[(11, 7, 4), float64],) {
  %798 = @func_2089() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %799 = %798.0;
  (%799,)
}

def @func_4367(%var_4353: Tensor[(3360), float32]) -> (Tensor[(3360), float32], Tensor[(308), int8]) {
  %800 = cast(%var_4353, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %801 = reshape(%800, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %802 = @func_2903(%801) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */;
  %803 = %802.0;
  %804 = @func_3873() /* ty=Tensor[(308), float32] */;
  %805 = cast(%804, dtype="int8") /* ty=Tensor[(308), int8] */;
  %806 = shape_of(%803, dtype="int32") /* ty=Tensor[(1), int32] */;
  %807 = cast(%803, dtype="int8") /* ty=Tensor[(308), int8] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?), int8] */;
  %809 = bitwise_or(%807, %808) /* ty=Tensor[(308), int8] */;
  (%var_4353, %809)
}

def @func_8033() -> (Tensor[(308), float32], Tensor[(308), float32]) {
  %810 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %811 = @func_1905() /* ty=Tensor[(308), float32] */;
  %812 = %810.1;
  (%811, %812)
}

def @func_3638(%var_3615: Tensor[(14, 10, 12), float64]) -> (Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float64]) {
  %813 = cast(-5.53372f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %814 = cast(%var_3615, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
  %815 = cast(%var_3615, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
  %816 = floor_mod(%813, %814) /* ty=Tensor[(14, 10, 12), float64] */;
  %817 = log2(%815) /* ty=Tensor[(14, 10, 12), float64] */;
  (%816, %817)
}

def @func_2200() -> (Tensor[(308), float32], Tensor[(3360), bool]) {
  %818 = @func_1830() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32]) */;
  %819 = cast(meta[relay.Constant][30] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %820 = reshape(%819, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %821 = @func_1113(%820) /* ty=(Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32]) */;
  %822 = %821.2;
  %823 = cast(meta[relay.Constant][30] /* ty=Tensor[(3360), float32] */, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(1), int32] */;
  %825 = cast(%822, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?), bool] */;
  %827 = %818.0;
  %828 = less_equal(%825, %826) /* ty=Tensor[(3360), bool] */;
  (%827, %828)
}

def @func_5527() -> (Tensor[(308), int16],) {
  %829 = @func_4345() /* ty=(Tensor[(308), int16],) */;
  %830 = %829.0;
  (%830,)
}

def @func_5435(%var_5427: Tensor[(16, 16, 6), float32]) -> Tensor[(16, 16, 6), float64] {
  %831 = cast(%var_5427, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
  %832 = asin(%831) /* ty=Tensor[(16, 16, 6), float32] */;
  %833 = cast(%832, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  acosh(%833) /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_2903(%var_2886: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) {
  %834 = @func_1830() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32]) */;
  %835 = cast(%var_2886, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %836 = reshape(%835, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %837 = @func_1169(%836) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */;
  %838 = %834.0;
  %839 = %837.1;
  (%838, %839, %var_2886)
}

def @func_4004() -> (Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64], Tensor[(3360), bool]) {
  %840 = @func_2811() /* ty=Tensor[(11, 7, 4), float64] */;
  %841 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 7, 4), float64] */, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
  %842 = shape_of(%840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%840, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %845 = cast(meta[relay.Constant][32] /* ty=Tensor[(3360), bool] */, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %846 = reshape(%845, newshape=[3360]) /* ty=Tensor[(3360), bool] */;
  %847 = @func_2639(%846) /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) */;
  %848 = floor_divide(%843, %844) /* ty=Tensor[(11, 7, 4), float64] */;
  %849 = %847.1;
  (%848, %849, meta[relay.Constant][32] /* ty=Tensor[(3360), bool] */)
}

def @func_3114() -> Tensor[(11, 7, 4), bool] {
  %850 = @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */;
  %850.1
}

def @func_5259() -> (Tensor[(11, 7, 4), float64], Tensor[(308), float32]) {
  %851 = @func_2089() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %852 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %853 = %852.0;
  %854 = @func_2811() /* ty=Tensor[(11, 7, 4), float64] */;
  %855 = cast(%854, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %856 = shape_of(%853, dtype="int32") /* ty=Tensor[(1), int32] */;
  %857 = cast(%853, dtype="bool") /* ty=Tensor[(308), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?), bool] */;
  %859 = logical_and(%857, %858) /* ty=Tensor[(308), bool] */;
  %860 = cast(%853, dtype="float64") /* ty=Tensor[(308), float64] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(1), int32] */;
  %862 = cast(%859, dtype="float64") /* ty=Tensor[(308), float64] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?), float64] */;
  %864 = mod(%862, %863) /* ty=Tensor[(308), float64] */;
  %865 = cast(%864, dtype="float32") /* ty=Tensor[(308), float32] */;
  %866 = %851.0;
  %867 = rsqrt(%865) /* ty=Tensor[(308), float32] */;
  (%866, %867)
}

def @func_5395() -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) {
  %868 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %869 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %870 = %868.0;
  %871 = @func_2977() /* ty=Tensor[(308), float32] */;
  %872 = %869.0;
  (%870, %871, %872)
}

def @func_2089() -> (Tensor[(11, 7, 4), float64],) {
  %873 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %874 = %873.0;
  %875 = cast(%874, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
  %876 = cos(%875) /* ty=Tensor[(11, 7, 4), float64] */;
  (%876,)
}

def @func_5168() -> (Tensor[(1680), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float32]) {
  %877 = @func_5059() /* ty=(Tensor[(308), int16], Tensor[(14, 10, 12), float64], Tensor[(1680), float64]) */;
  %878 = @func_4439() /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32]) */;
  %879 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %880 = %877.2;
  %881 = %878.0;
  %882 = %879.2;
  (%880, %881, %882)
}

def @func_1222(%var_1206: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), bool],) {
  %883 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %884 = %883.3;
  %885 = cast(%var_1206, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(%884, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %889 = not_equal(%887, %888) /* ty=Tensor[(11, 7, 4), bool] */;
  (%889,)
}

def @func_7910() -> (Tensor[(3360), float32],) {
  %890 = @func_4512() /* ty=(Tensor[(3360), float32],) */;
  %891 = %890.0;
  (%891,)
}

def @func_6945() -> (Tensor[(11, 7, 4), bool],) {
  %892 = @func_3114() /* ty=Tensor[(11, 7, 4), bool] */;
  (%892,)
}

def @func_7867(%var_7859: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(3360), int32]) {
  %893 = @func_6751() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %894 = @func_5629() /* ty=(Tensor[(3360), float32], Tensor[(308), float32]) */;
  %895 = %894.0;
  %896 = cast(%var_7859, dtype="int32") /* ty=Tensor[(3360), int32] */;
  %897 = shape_of(%895, dtype="int32") /* ty=Tensor[(1), int32] */;
  %898 = cast(%895, dtype="int32") /* ty=Tensor[(3360), int32] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?), int32] */;
  %900 = %893.2;
  %901 = left_shift(%898, %899) /* ty=Tensor[(3360), int32] */;
  (%900, %901)
}

def @func_5930(%var_5905: Tensor[(3360), float32]) -> (Tensor[(50), float32], Tensor[(16, 14, 15), int16]) {
  %902 = @func_3590() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */;
  %903 = cast(%var_5905, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %904 = reshape(%903, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %905 = @func_5869(%904) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), bool], Tensor[(16, 14, 15), float32]) */;
  %906 = %905.3;
  %907 = cast(%var_5905, dtype="int16") /* ty=Tensor[(3360), int16] */;
  %908 = shape_of(%906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %909 = cast(%906, dtype="int16") /* ty=Tensor[(16, 14, 15), int16] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %911 = %902.3;
  %912 = add(%909, %910) /* ty=Tensor[(16, 14, 15), int16] */;
  (%911, %912)
}

def @func_7339() -> (Tensor[(14, 10, 12), float64],) {
  %913 = @func_6845() /* ty=(Tensor[(308), int16], Tensor[(14, 10, 12), float64]) */;
  %914 = %913.1;
  (%914,)
}

def @func_1462(%var_1447: Tensor[(15, 10, 4), float64]) -> (Tensor[(15, 10, 4), float32],) {
  %915 = cast(%var_1447, dtype="float64") /* ty=Tensor[(15, 10, 4), float64] */;
  %916 = atan(%915) /* ty=Tensor[(15, 10, 4), float64] */;
  %917 = cast(%916, dtype="float32") /* ty=Tensor[(15, 10, 4), float32] */;
  %918 = cosh(%917) /* ty=Tensor[(15, 10, 4), float32] */;
  (%918,)
}

def @func_8534(%var_8511: Tensor[(7, 2, 14), float32]) -> Tensor[(7, 2, 14), float32] {
  %919 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 14), float32] */;
  %920 = shape_of(%var_8511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %921 = cast(%var_8511, dtype="float32") /* ty=Tensor[(7, 2, 14), float32] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%921, %922) /* ty=Tensor[(7, 2, 14), float32] */
}

def @func_3590() -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) {
  %923 = @func_3490() /* ty=Tensor[(11, 7, 4), bool] */;
  %924 = @func_2977() /* ty=Tensor[(308), float32] */;
  %925 = cast(%924, dtype="bool") /* ty=Tensor[(308), bool] */;
  %926 = shape_of(%923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %927 = cast(%923, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %929 = cast(meta[relay.Constant][34] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %930 = cast(meta[relay.Constant][34] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %931 = reshape(%929, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), float32] */;
  %932 = reshape(%930, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), float32] */;
  %933 = @func_2550() /* ty=Tensor[(11, 7, 4), float32] */;
  %934 = logical_and(%927, %928) /* ty=Tensor[(11, 7, 4), bool] */;
  %935 = @func_3287(%931, %932) /* ty=Tensor[(5, 2, 5), float32] */;
  (%933, %934, %935, meta[relay.Constant][34] /* ty=Tensor[(50), float32] */)
}

def @func_4484(%var_4481: Tensor[(3360), float32]) -> (Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(3360), float32]) {
  %936 = cast(%var_4481, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %937 = reshape(%936, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %938 = @func_1169(%937) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */;
  %939 = @func_3114() /* ty=Tensor[(11, 7, 4), bool] */;
  %940 = %938.1;
  (%939, %940, %var_4481)
}

def @func_1768(%var_1757: Tensor[(15, 9, 3), uint32], %var_1758: Tensor[(15, 9, 3), uint32]) -> (Tensor[(15, 9, 3), uint32],) {
  %941 = cast(%var_1758, dtype="uint32") /* ty=Tensor[(15, 9, 3), uint32] */;
  %942 = shape_of(%var_1757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_1757, dtype="uint32") /* ty=Tensor[(15, 9, 3), uint32] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %945 = add(%943, %944) /* ty=Tensor[(15, 9, 3), uint32] */;
  (%945,)
}

def @func_4512() -> (Tensor[(3360), float32],) {
  %946 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %947 = %946.1;
  (%947,)
}

def @func_7248(%var_7211: int8, %var_7212: Tensor[(1, 7, 7), int8]) -> (Tensor[(1, 7, 7), bool], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(3360), float32]) {
  %948 = cast(%var_7211, dtype="bool") /* ty=bool */;
  %949 = cast(%var_7212, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
  %950 = @func_6751() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %951 = @func_3358() /* ty=(Tensor[(308), float32],) */;
  %952 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %953 = equal(%948, %949) /* ty=Tensor[(1, 7, 7), bool] */;
  %954 = %950.0;
  %955 = %951.0;
  %956 = %952.0;
  (%953, %954, %955, %956)
}

def @func_4782(%var_4763: Tensor[(2, 12, 11), float64]) -> Tensor[(2, 12, 11), float64] {
  %957 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %958 = shape_of(%var_4763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %959 = cast(%var_4763, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%959, %960) /* ty=Tensor[(2, 12, 11), float64] */
}

def @func_8206(%var_8198: Tensor[(11, 15, 11), float32]) -> Tensor[(11, 15, 11), float32] {
  %961 = cast(%var_8198, dtype="float32") /* ty=Tensor[(11, 15, 11), float32] */;
  sinh(%961) /* ty=Tensor[(11, 15, 11), float32] */
}

def @func_5365() -> Tensor[(3360), bool] {
  %962 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %962.1
}

def @func_5629() -> (Tensor[(3360), float32], Tensor[(308), float32]) {
  %963 = @func_4512() /* ty=(Tensor[(3360), float32],) */;
  %964 = @func_5337() /* ty=(Tensor[(308), float32],) */;
  %965 = %963.0;
  %966 = %964.0;
  (%965, %966)
}

def @func_5059() -> (Tensor[(308), int16], Tensor[(14, 10, 12), float64], Tensor[(1680), float64]) {
  %967 = @func_4345() /* ty=(Tensor[(308), int16],) */;
  %968 = cast(meta[relay.Constant][36] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %969 = reshape(%968, newshape=[14, 10, 12]) /* ty=Tensor[(14, 10, 12), float64] */;
  %970 = @func_3638(%969) /* ty=(Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float64]) */;
  %971 = %967.0;
  %972 = %970.1;
  (%971, %972, meta[relay.Constant][36] /* ty=Tensor[(1680), float64] */)
}

def @func_3968() -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32]) {
  %973 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %974 = %973.0;
  %975 = @func_1905() /* ty=Tensor[(308), float32] */;
  (%974, %975)
}

def @func_3873() -> Tensor[(308), float32] {
  @func_2977() /* ty=Tensor[(308), float32] */
}

def @func_7496(%var_7456: Tensor[(2, 16, 7), float32]) -> (Tensor[(2, 16, 7), float32], Tensor[(11, 7, 4), bool], Tensor[(3360), float32], Tensor[(308), float32]) {
  %976 = cast(%var_7456, dtype="float32") /* ty=Tensor[(2, 16, 7), float32] */;
  %977 = @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */;
  %978 = %977.1;
  %979 = cast(%978, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %980 = reshape(%979, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %981 = @func_3225(%980) /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), int8]) */;
  %982 = @func_3968() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32]) */;
  %983 = log(%976) /* ty=Tensor[(2, 16, 7), float32] */;
  %984 = %981.1;
  %985 = %982.1;
  (%983, %978, %984, %985)
}

def @func_2786(%var_2645: Tensor[(10, 14, 3), uint16], %var_2725: Tensor[(10, 14, 3), float64]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(10, 14, 3), float32], Tensor[(10, 14, 3), uint64], Tensor[(11, 7, 4), bool], Tensor[(3360), float64], Tensor[(440), uint64], Tensor[(308), float32], Tensor[(10, 14, 3), int16]) {
  %986 = cast(meta[relay.Constant][37] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %987 = cast(meta[relay.Constant][38] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %988 = reshape(%986, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %989 = reshape(%987, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %990 = @func_676(%988, %989) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %991 = cast(meta[relay.Constant][37] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %992 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %993 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 14, 3), uint16] */, dtype="float64") /* ty=Tensor[(10, 14, 3), float64] */;
  %994 = sigmoid(%993) /* ty=Tensor[(10, 14, 3), float64] */;
  %995 = cast(%var_2725, dtype="float32") /* ty=Tensor[(10, 14, 3), float32] */;
  %996 = shape_of(%994, dtype="int32") /* ty=Tensor[(3), int32] */;
  %997 = cast(%994, dtype="float32") /* ty=Tensor[(10, 14, 3), float32] */;
  %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %999 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 14, 3), uint16] */, dtype="float64") /* ty=Tensor[(10, 14, 3), float64] */;
  %1000 = asinh(%999) /* ty=Tensor[(10, 14, 3), float64] */;
  %1001 = cast(%var_2645, dtype="uint16") /* ty=Tensor[(10, 14, 3), uint16] */;
  %1002 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(10, 14, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1003 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 14, 3), uint16] */, dtype="uint16") /* ty=Tensor[(10, 14, 3), uint16] */;
  %1004 = dyn.reshape(%1001, %1002, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1005 = right_shift(%1003, %1004) /* ty=Tensor[(10, 14, 3), uint16] */;
  %1006 = cast(%1005, dtype="uint64") /* ty=Tensor[(10, 14, 3), uint64] */;
  %1007 = shape_of(%1000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1008 = cast(%1000, dtype="uint64") /* ty=Tensor[(10, 14, 3), uint64] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1010 = @func_1905() /* ty=Tensor[(308), float32] */;
  %1011 = cast(%1010, dtype="float32") /* ty=Tensor[(308), float32] */;
  %1012 = reshape(%1011, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %1013 = @func_1222(%1012) /* ty=(Tensor[(11, 7, 4), bool],) */;
  %1014 = cast(meta[relay.Constant][40] /* ty=Tensor[(440), uint64] */, dtype="uint64") /* ty=Tensor[(440), uint64] */;
  %1015 = cast(meta[relay.Constant][40] /* ty=Tensor[(440), uint64] */, dtype="int64") /* ty=Tensor[(440), int64] */;
  %1016 = reshape(%1014, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), uint64] */;
  %1017 = reshape(%1015, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), int64] */;
  %1018 = @func_2469(%1016, %1017) /* ty=(Tensor[(308), float32], Tensor[(756), float32], Tensor[(4, 10, 11), float64], Tensor[(4, 10, 11), bool], Tensor[(4, 10, 11), uint64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(14, 6, 9), float32]) */;
  %1019 = %1018.5;
  %1020 = cast(%1019, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %1021 = reshape(%1020, newshape=[3360]) /* ty=Tensor[(3360), bool] */;
  %1022 = @func_2639(%1021) /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) */;
  %1023 = cast(%1000, dtype="int16") /* ty=Tensor[(10, 14, 3), int16] */;
  %1024 = shape_of(%994, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1025 = cast(%994, dtype="int16") /* ty=Tensor[(10, 14, 3), int16] */;
  %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1027 = %990.3;
  %1028 = exp(%991) /* ty=Tensor[(3360), float32] */;
  %1029 = %992.0;
  %1030 = divide(%997, %998) /* ty=Tensor[(10, 14, 3), float32] */;
  %1031 = bitwise_or(%1008, %1009) /* ty=Tensor[(10, 14, 3), uint64] */;
  %1032 = %1013.0;
  %1033 = %1022.0;
  %1034 = left_shift(%1025, %1026) /* ty=Tensor[(10, 14, 3), int16] */;
  (%1027, meta[relay.Constant][38] /* ty=Tensor[(308), float32] */, %1010, %1028, %1029, %1030, %1031, %1032, %1019, meta[relay.Constant][40] /* ty=Tensor[(440), uint64] */, %1033, %1034)
}

def @func_8192() -> Tensor[(308), float32] {
  %1035 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %1035.3
}

def @func_6413() -> (Tensor[(3360), float32],) {
  %1036 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %1037 = %1036.0;
  (%1037,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3873() -> Tensor[(308), float32] {
  @func_2977() /* ty=Tensor[(308), float32] */
}

def @func_3275() -> (Tensor[(308), float32], Tensor[(3360), bool]) {
  %3 = fn () -> (Tensor[(308), float32], Tensor[(3360), bool]) {
    %0 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
    %1 = @func_1905() /* ty=Tensor[(308), float32] */;
    %2 = %0.1;
    (%1, %2)
  };
  %3() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */
}

def @func_4656() -> (Tensor[(308), float32], Tensor[(11, 7, 4), float32]) {
  %4 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %5 = @func_3590() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */;
  %6 = %4.3;
  %7 = %5.0;
  (%6, %7)
}

def @func_5933(%var_5931: Tensor[(3360), float32]) -> (Tensor[(50), float32], Tensor[(16, 14, 15), int16]) {
  @func_5930(%var_5931) /* ty=(Tensor[(50), float32], Tensor[(16, 14, 15), int16]) */
}

def @func_5041() -> (Tensor[(11, 7, 4), float32],) {
  %10 = fn () -> (Tensor[(11, 7, 4), float32],) {
    %8 = @func_4656() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
    %9 = %8.1;
    (%9,)
  };
  %10() /* ty=(Tensor[(11, 7, 4), float32],) */
}

def @func_8206(%var_8198: Tensor[(11, 15, 11), float32]) -> Tensor[(11, 15, 11), float32] {
  %11 = cast(%var_8198, dtype="float32") /* ty=Tensor[(11, 15, 11), float32] */;
  sinh(%11) /* ty=Tensor[(11, 15, 11), float32] */
}

def @func_2877() -> (Tensor[(11, 7, 4), float64],) {
  @func_2875() /* ty=(Tensor[(11, 7, 4), float64],) */
}

def @func_6207(%var_6196: Tensor[(3, 5, 16), float64]) -> (Tensor[(3, 5, 16), float64],) {
  %12 = cast(%var_6196, dtype="float64") /* ty=Tensor[(3, 5, 16), float64] */;
  %13 = atanh(%12) /* ty=Tensor[(3, 5, 16), float64] */;
  %14 = cast(%13, dtype="float64") /* ty=Tensor[(3, 5, 16), float64] */;
  %15 = atan(%14) /* ty=Tensor[(3, 5, 16), float64] */;
  (%15,)
}

def @func_8661() -> Tensor[(308), float32] {
  %17 = fn () -> Tensor[(308), float32] {
    %16 = @func_1933() /* ty=(Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) */;
    %16.0
  };
  %17() /* ty=Tensor[(308), float32] */
}

def @func_5129() -> (Tensor[(11, 7, 4), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), float32]) {
  %24 = fn () -> (Tensor[(11, 7, 4), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), float32]) {
    %18 = @func_2875() /* ty=(Tensor[(11, 7, 4), float64],) */;
    %19 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
    %20 = @func_3831() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float64]) */;
    %21 = %18.0;
    %22 = %19.1;
    %23 = %20.0;
    (%21, %22, %23)
  };
  %24() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), float32]) */
}

def @func_4345() -> (Tensor[(308), int16],) {
  %25 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %26 = %25.1;
  %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(308), float32] */, dtype="int16") /* ty=Tensor[(308), int16] */;
  %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(1), int32] */;
  %29 = cast(%26, dtype="int16") /* ty=Tensor[(308), int16] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?), int16] */;
  %31 = logical_xor(%29, %30) /* ty=Tensor[(308), int16] */;
  (%31,)
}

def @func_5259() -> (Tensor[(11, 7, 4), float64], Tensor[(308), float32]) {
  %32 = @func_2089() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %33 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %34 = %33.0;
  %35 = @func_2811() /* ty=Tensor[(11, 7, 4), float64] */;
  %36 = cast(%35, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %37 = shape_of(%34, dtype="int32") /* ty=Tensor[(1), int32] */;
  %38 = cast(%34, dtype="bool") /* ty=Tensor[(308), bool] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?), bool] */;
  %40 = logical_and(%38, %39) /* ty=Tensor[(308), bool] */;
  %41 = cast(%34, dtype="float64") /* ty=Tensor[(308), float64] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(1), int32] */;
  %43 = cast(%40, dtype="float64") /* ty=Tensor[(308), float64] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?), float64] */;
  %45 = mod(%43, %44) /* ty=Tensor[(308), float64] */;
  %46 = cast(%45, dtype="float32") /* ty=Tensor[(308), float32] */;
  %47 = %32.0;
  %48 = rsqrt(%46) /* ty=Tensor[(308), float32] */;
  (%47, %48)
}

def @func_5772() -> (Tensor[(3360), float32], Tensor[(756), float64]) {
  %53 = fn () -> (Tensor[(3360), float32], Tensor[(756), float64]) {
    %49 = @func_2966() /* ty=(Tensor[(3360), float32],) */;
    %50 = @func_4758() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(756), float64]) */;
    %51 = %49.0;
    %52 = %50.2;
    (%51, %52)
  };
  %53() /* ty=(Tensor[(3360), float32], Tensor[(756), float64]) */
}

def @func_3591() -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) {
  %67 = fn () -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) {
    %54 = @func_3490() /* ty=Tensor[(11, 7, 4), bool] */;
    %55 = @func_2977() /* ty=Tensor[(308), float32] */;
    %56 = cast(%55, dtype="bool") /* ty=Tensor[(308), bool] */;
    %57 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
    %58 = cast(%54, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
    %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %60 = cast(meta[relay.Constant][1] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %61 = cast(meta[relay.Constant][1] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %62 = reshape(%60, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), float32] */;
    %63 = reshape(%61, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), float32] */;
    %64 = @func_2550() /* ty=Tensor[(11, 7, 4), float32] */;
    %65 = logical_and(%58, %59) /* ty=Tensor[(11, 7, 4), bool] */;
    %66 = @func_3287(%62, %63) /* ty=Tensor[(5, 2, 5), float32] */;
    (%64, %65, %66, meta[relay.Constant][1] /* ty=Tensor[(50), float32] */)
  };
  %67() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */
}

def @func_6004() -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), uint16]) {
  %68 = @func_4656() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %69 = @func_2609() /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(3360), float32]) */;
  %70 = %68.1;
  %71 = %69.1;
  (%70, %71)
}

def @func_2520() -> (Tensor[(308), float32], Tensor[(11, 7, 4), bool]) {
  @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */
}

def @func_4760() -> (Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(756), float64]) {
  @func_4758() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(756), float64]) */
}

def @func_2812() -> Tensor[(11, 7, 4), float64] {
  %73 = fn () -> Tensor[(11, 7, 4), float64] {
    %72 = @func_2089() /* ty=(Tensor[(11, 7, 4), float64],) */;
    %72.0
  };
  %73() /* ty=Tensor[(11, 7, 4), float64] */
}

def @func_8242() -> (Tensor[(11, 7, 4), float32],) {
  %76 = fn () -> (Tensor[(11, 7, 4), float32],) {
    %74 = @func_3968() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32]) */;
    %75 = %74.0;
    (%75,)
  };
  %76() /* ty=(Tensor[(11, 7, 4), float32],) */
}

def @func_1934() -> (Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) {
  %83 = fn () -> (Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) {
    %77 = @func_984() /* ty=(Tensor[(308), float32],) */;
    %78 = cast(meta[relay.Constant][2] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
    %79 = reshape(%78, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), float64] */;
    %80 = @func_1462(%79) /* ty=(Tensor[(15, 10, 4), float32],) */;
    %81 = %77.0;
    %82 = %80.0;
    (%81, %82, meta[relay.Constant][2] /* ty=Tensor[(600), float64] */)
  };
  %83() /* ty=(Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) */
}

def @func_5060() -> (Tensor[(308), int16], Tensor[(14, 10, 12), float64], Tensor[(1680), float64]) {
  %90 = fn () -> (Tensor[(308), int16], Tensor[(14, 10, 12), float64], Tensor[(1680), float64]) {
    %84 = @func_4345() /* ty=(Tensor[(308), int16],) */;
    %85 = cast(meta[relay.Constant][3] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %86 = reshape(%85, newshape=[14, 10, 12]) /* ty=Tensor[(14, 10, 12), float64] */;
    %87 = @func_3638(%86) /* ty=(Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float64]) */;
    %88 = %84.0;
    %89 = %87.1;
    (%88, %89, meta[relay.Constant][3] /* ty=Tensor[(1680), float64] */)
  };
  %90() /* ty=(Tensor[(308), int16], Tensor[(14, 10, 12), float64], Tensor[(1680), float64]) */
}

def @func_392(%var_388: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), float32],) {
  %91 = cast(%var_388, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %92 = erf(%91) /* ty=Tensor[(11, 7, 4), float32] */;
  (%92,)
}

def @func_2789(%var_2787: Tensor[(10, 14, 3), uint16], %var_2788: Tensor[(10, 14, 3), float64]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(10, 14, 3), float32], Tensor[(10, 14, 3), uint64], Tensor[(11, 7, 4), bool], Tensor[(3360), float64], Tensor[(440), uint64], Tensor[(308), float32], Tensor[(10, 14, 3), int16]) {
  %142 = fn (%var_2645: Tensor[(10, 14, 3), uint16], %var_2725: Tensor[(10, 14, 3), float64]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(10, 14, 3), float32], Tensor[(10, 14, 3), uint64], Tensor[(11, 7, 4), bool], Tensor[(3360), float64], Tensor[(440), uint64], Tensor[(308), float32], Tensor[(10, 14, 3), int16]) {
    %93 = cast(meta[relay.Constant][4] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %94 = cast(meta[relay.Constant][5] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
    %95 = reshape(%93, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
    %96 = reshape(%94, newshape=[308]) /* ty=Tensor[(308), float32] */;
    %97 = @func_676(%95, %96) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
    %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %99 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
    %100 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 14, 3), uint16] */, dtype="float64") /* ty=Tensor[(10, 14, 3), float64] */;
    %101 = sigmoid(%100) /* ty=Tensor[(10, 14, 3), float64] */;
    %102 = cast(%var_2725, dtype="float32") /* ty=Tensor[(10, 14, 3), float32] */;
    %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %104 = cast(%101, dtype="float32") /* ty=Tensor[(10, 14, 3), float32] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 14, 3), uint16] */, dtype="float64") /* ty=Tensor[(10, 14, 3), float64] */;
    %107 = asinh(%106) /* ty=Tensor[(10, 14, 3), float64] */;
    %108 = cast(%var_2645, dtype="uint16") /* ty=Tensor[(10, 14, 3), uint16] */;
    %109 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(10, 14, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %110 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 14, 3), uint16] */, dtype="uint16") /* ty=Tensor[(10, 14, 3), uint16] */;
    %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %112 = right_shift(%110, %111) /* ty=Tensor[(10, 14, 3), uint16] */;
    %113 = cast(%112, dtype="uint64") /* ty=Tensor[(10, 14, 3), uint64] */;
    %114 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
    %115 = cast(%107, dtype="uint64") /* ty=Tensor[(10, 14, 3), uint64] */;
    %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %117 = @func_1905() /* ty=Tensor[(308), float32] */;
    %118 = cast(%117, dtype="float32") /* ty=Tensor[(308), float32] */;
    %119 = reshape(%118, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %120 = @func_1222(%119) /* ty=(Tensor[(11, 7, 4), bool],) */;
    %121 = cast(meta[relay.Constant][7] /* ty=Tensor[(440), uint64] */, dtype="uint64") /* ty=Tensor[(440), uint64] */;
    %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(440), uint64] */, dtype="int64") /* ty=Tensor[(440), int64] */;
    %123 = reshape(%121, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), uint64] */;
    %124 = reshape(%122, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), int64] */;
    %125 = @func_2469(%123, %124) /* ty=(Tensor[(308), float32], Tensor[(756), float32], Tensor[(4, 10, 11), float64], Tensor[(4, 10, 11), bool], Tensor[(4, 10, 11), uint64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(14, 6, 9), float32]) */;
    %126 = %125.5;
    %127 = cast(%126, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %128 = reshape(%127, newshape=[3360]) /* ty=Tensor[(3360), bool] */;
    %129 = @func_2639(%128) /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) */;
    %130 = cast(%107, dtype="int16") /* ty=Tensor[(10, 14, 3), int16] */;
    %131 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %132 = cast(%101, dtype="int16") /* ty=Tensor[(10, 14, 3), int16] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %134 = %97.3;
    %135 = exp(%98) /* ty=Tensor[(3360), float32] */;
    %136 = %99.0;
    %137 = divide(%104, %105) /* ty=Tensor[(10, 14, 3), float32] */;
    %138 = bitwise_or(%115, %116) /* ty=Tensor[(10, 14, 3), uint64] */;
    %139 = %120.0;
    %140 = %129.0;
    %141 = left_shift(%132, %133) /* ty=Tensor[(10, 14, 3), int16] */;
    (%134, meta[relay.Constant][5] /* ty=Tensor[(308), float32] */, %117, %135, %136, %137, %138, %139, %126, meta[relay.Constant][7] /* ty=Tensor[(440), uint64] */, %140, %141)
  };
  %142(%var_2787, %var_2788) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(10, 14, 3), float32], Tensor[(10, 14, 3), uint64], Tensor[(11, 7, 4), bool], Tensor[(3360), float64], Tensor[(440), uint64], Tensor[(308), float32], Tensor[(10, 14, 3), int16]) */
}

def @func_4484(%var_4481: Tensor[(3360), float32]) -> (Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(3360), float32]) {
  %143 = cast(%var_4481, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %144 = reshape(%143, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %145 = @func_1169(%144) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */;
  %146 = @func_3114() /* ty=Tensor[(11, 7, 4), bool] */;
  %147 = %145.1;
  (%146, %147, %var_4481)
}

def @func_7248(%var_7211: int8, %var_7212: Tensor[(1, 7, 7), int8]) -> (Tensor[(1, 7, 7), bool], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(3360), float32]) {
  %148 = cast(%var_7211, dtype="bool") /* ty=bool */;
  %149 = cast(%var_7212, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
  %150 = @func_6751() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %151 = @func_3358() /* ty=(Tensor[(308), float32],) */;
  %152 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %153 = equal(%148, %149) /* ty=Tensor[(1, 7, 7), bool] */;
  %154 = %150.0;
  %155 = %151.0;
  %156 = %152.0;
  (%153, %154, %155, %156)
}

def @func_5261() -> (Tensor[(11, 7, 4), float64], Tensor[(308), float32]) {
  @func_5259() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(308), float32]) */
}

def @func_4706() -> (Tensor[(308), int16], Tensor[(9, 12, 7), float64], Tensor[(18, 42), float64]) {
  %157 = @func_4345() /* ty=(Tensor[(308), int16],) */;
  %158 = cast(meta[relay.Constant][8] /* ty=Tensor[(18, 42), float64] */, dtype="float64") /* ty=Tensor[(18, 42), float64] */;
  %159 = reshape(%158, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), float64] */;
  %160 = @func_2291(%159) /* ty=(Tensor[(9, 12, 7), float64],) */;
  %161 = %157.0;
  %162 = %160.0;
  (%161, %162, meta[relay.Constant][8] /* ty=Tensor[(18, 42), float64] */)
}

def @func_7377() -> Tensor[(11, 7, 4), uint16] {
  %163 = @func_6004() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), uint16]) */;
  %163.1
}

def @func_5366() -> Tensor[(3360), bool] {
  %165 = fn () -> Tensor[(3360), bool] {
    %164 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
    %164.1
  };
  %165() /* ty=Tensor[(3360), bool] */
}

def @func_6321() -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) {
  @func_6319() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) */
}

def @func_4797() -> Tensor[(11, 7, 4), float64] {
  @func_4795() /* ty=Tensor[(11, 7, 4), float64] */
}

def @func_986() -> (Tensor[(308), float32],) {
  @func_984() /* ty=(Tensor[(308), float32],) */
}

def @func_5339() -> (Tensor[(308), float32],) {
  @func_5337() /* ty=(Tensor[(308), float32],) */
}

def @func_7379() -> Tensor[(11, 7, 4), uint16] {
  @func_7377() /* ty=Tensor[(11, 7, 4), uint16] */
}

def @func_3228(%var_3226: Tensor[(11, 7, 4), float32]) -> (Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), int8]) {
  @func_3225(%var_3226) /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), int8]) */
}

def @func_8033() -> (Tensor[(308), float32], Tensor[(308), float32]) {
  %166 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %167 = @func_1905() /* ty=Tensor[(308), float32] */;
  %168 = %166.1;
  (%167, %168)
}

def @func_6006() -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), uint16]) {
  @func_6004() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), uint16]) */
}

def @func_1328() -> (Tensor[(11, 7, 4), float32],) {
  %171 = fn () -> (Tensor[(11, 7, 4), float32],) {
    %169 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
    %170 = %169.3;
    (%170,)
  };
  %171() /* ty=(Tensor[(11, 7, 4), float32],) */
}

def @func_6413() -> (Tensor[(3360), float32],) {
  %172 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %173 = %172.0;
  (%173,)
}

def @func_2551() -> Tensor[(11, 7, 4), float32] {
  %175 = fn () -> Tensor[(11, 7, 4), float32] {
    %174 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
    %174.2
  };
  %175() /* ty=Tensor[(11, 7, 4), float32] */
}

def @func_3115() -> Tensor[(11, 7, 4), bool] {
  %177 = fn () -> Tensor[(11, 7, 4), bool] {
    %176 = @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */;
    %176.1
  };
  %177() /* ty=Tensor[(11, 7, 4), bool] */
}

def @func_7339() -> (Tensor[(14, 10, 12), float64],) {
  %178 = @func_6845() /* ty=(Tensor[(308), int16], Tensor[(14, 10, 12), float64]) */;
  %179 = %178.1;
  (%179,)
}

def @func_6751() -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32]) {
  %180 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %181 = @func_2550() /* ty=Tensor[(11, 7, 4), float32] */;
  %182 = %180.0;
  %183 = @func_2825() /* ty=Tensor[(308), float32] */;
  (%181, %182, %183)
}

def @func_5397() -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) {
  @func_5395() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */
}

def @func_2642(%var_2640: Tensor[(3360), bool]) -> (Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) {
  @func_2639(%var_2640) /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) */
}

def @func_4637(%var_4635: Tensor[(12, 5), float64]) -> (Tensor[(12, 5), float64],) {
  @func_4634(%var_4635) /* ty=(Tensor[(12, 5), float64],) */
}

def @func_4658() -> (Tensor[(308), float32], Tensor[(11, 7, 4), float32]) {
  @func_4656() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */
}

def @func_7847() -> Tensor[(11, 7, 4), float32] {
  %185 = fn () -> Tensor[(11, 7, 4), float32] {
    %184 = @func_6751() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
    %184.0
  };
  %185() /* ty=Tensor[(11, 7, 4), float32] */
}

def @func_1222(%var_1206: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), bool],) {
  %186 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %187 = %186.3;
  %188 = cast(%var_1206, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = not_equal(%190, %191) /* ty=Tensor[(11, 7, 4), bool] */;
  (%192,)
}

def @func_853() -> (Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) {
  %201 = fn () -> (Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) {
    %193 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 10, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 1), float32] */;
    %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %195 = cast(meta[relay.Constant][11] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
    %196 = reshape(%194, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
    %197 = reshape(%195, newshape=[308]) /* ty=Tensor[(308), float32] */;
    %198 = @func_676(%196, %197) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
    %199 = sinh(%193) /* ty=Tensor[(11, 10, 1), float32] */;
    %200 = %198.2;
    (%199, %200, meta[relay.Constant][10] /* ty=Tensor[(3360), float32] */, meta[relay.Constant][11] /* ty=Tensor[(308), float32] */)
  };
  %201() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */
}

def @func_6160() -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(60), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64]) {
  @func_6158() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(60), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64]) */
}

def @func_5435(%var_5427: Tensor[(16, 16, 6), float32]) -> Tensor[(16, 16, 6), float64] {
  %202 = cast(%var_5427, dtype="float32") /* ty=Tensor[(16, 16, 6), float32] */;
  %203 = asin(%202) /* ty=Tensor[(16, 16, 6), float32] */;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  acosh(%204) /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_5528() -> (Tensor[(308), int16],) {
  %207 = fn () -> (Tensor[(308), int16],) {
    %205 = @func_4345() /* ty=(Tensor[(308), int16],) */;
    %206 = %205.0;
    (%206,)
  };
  %207() /* ty=(Tensor[(308), int16],) */
}

def @func_3492() -> Tensor[(11, 7, 4), bool] {
  @func_3490() /* ty=Tensor[(11, 7, 4), bool] */
}

def @func_6606(%var_6604: Tensor[(11, 7, 4), float32], %var_6605: Tensor[(3360), float32]) -> (Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64], Tensor[(3360), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32]) {
  @func_6602(%var_6604, %var_6605) /* ty=(Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64], Tensor[(3360), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32]) */
}

def @func_2875() -> (Tensor[(11, 7, 4), float64],) {
  %208 = @func_2811() /* ty=Tensor[(11, 7, 4), float64] */;
  %209 = cast(%208, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
  %210 = sin(%209) /* ty=Tensor[(11, 7, 4), float64] */;
  (%210,)
}

def @func_7407() -> Tensor[(11, 7, 4), float32] {
  %212 = fn () -> Tensor[(11, 7, 4), float32] {
    %211 = @func_5168() /* ty=(Tensor[(1680), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float32]) */;
    %211.2
  };
  %212() /* ty=Tensor[(11, 7, 4), float32] */
}

def @func_4616() -> (Tensor[(11, 7, 4), float64], Tensor[(308), float32], Tensor[(3360), float64]) {
  %220 = fn () -> (Tensor[(11, 7, 4), float64], Tensor[(308), float32], Tensor[(3360), float64]) {
    %213 = @func_2875() /* ty=(Tensor[(11, 7, 4), float64],) */;
    %214 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
    %215 = %214.1;
    %216 = cast(%215, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %217 = %213.0;
    %218 = @func_3542() /* ty=Tensor[(308), float32] */;
    %219 = log10(%216) /* ty=Tensor[(3360), float64] */;
    (%217, %218, %219)
  };
  %220() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(308), float32], Tensor[(3360), float64]) */
}

def @func_8285() -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32]) {
  %221 = @func_7092() /* ty=(Tensor[(308), float32],) */;
  %222 = @func_7406() /* ty=Tensor[(11, 7, 4), float32] */;
  %223 = %221.0;
  (%222, %223)
}

def @func_7938() -> Tensor[(308), float32] {
  @func_7936() /* ty=Tensor[(308), float32] */
}

def @func_8151(%var_8150: Tensor[(60), float64]) -> (Tensor[(11, 7, 4), int64], Tensor[(12, 5), float64], Tensor[(60), float64], Tensor[(11, 7, 4), float32]) {
  %237 = fn (%var_8128: Tensor[(60), float64]) -> (Tensor[(11, 7, 4), int64], Tensor[(12, 5), float64], Tensor[(60), float64], Tensor[(11, 7, 4), float32]) {
    %224 = @func_5820() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) */;
    %225 = %224.0;
    %226 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 7, 4), float32] */, dtype="int64") /* ty=Tensor[(11, 7, 4), int64] */;
    %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
    %228 = cast(%225, dtype="int64") /* ty=Tensor[(11, 7, 4), int64] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %230 = cast(%var_8128, dtype="float64") /* ty=Tensor[(60), float64] */;
    %231 = reshape(%230, newshape=[12, 5]) /* ty=Tensor[(12, 5), float64] */;
    %232 = @func_4634(%231) /* ty=(Tensor[(12, 5), float64],) */;
    %233 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
    %234 = add(%228, %229) /* ty=Tensor[(11, 7, 4), int64] */;
    %235 = %232.0;
    %236 = %233.3;
    (%234, %235, %var_8128, %236)
  };
  %237(%var_8150) /* ty=(Tensor[(11, 7, 4), int64], Tensor[(12, 5), float64], Tensor[(60), float64], Tensor[(11, 7, 4), float32]) */
}

def @func_8451(%var_8441: Tensor[(3360), bool]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), bool]) {
  %238 = @func_2275() /* ty=(Tensor[(308), float32],) */;
  %239 = cast(%var_8441, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %240 = reshape(%239, newshape=[3360]) /* ty=Tensor[(3360), bool] */;
  %241 = @func_2639(%240) /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) */;
  %242 = @func_7999() /* ty=Tensor[(11, 7, 4), float32] */;
  %243 = %238.0;
  %244 = %241.0;
  (%242, %243, %244, %var_8441)
}

def @func_4347() -> (Tensor[(308), int16],) {
  @func_4345() /* ty=(Tensor[(308), int16],) */
}

def @func_8287() -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32]) {
  @func_8285() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32]) */
}

def @func_984() -> (Tensor[(308), float32],) {
  %245 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %246 = %245.1;
  (%246,)
}

def @func_1768(%var_1757: Tensor[(15, 9, 3), uint32], %var_1758: Tensor[(15, 9, 3), uint32]) -> (Tensor[(15, 9, 3), uint32],) {
  %247 = cast(%var_1758, dtype="uint32") /* ty=Tensor[(15, 9, 3), uint32] */;
  %248 = shape_of(%var_1757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%var_1757, dtype="uint32") /* ty=Tensor[(15, 9, 3), uint32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %251 = add(%249, %250) /* ty=Tensor[(15, 9, 3), uint32] */;
  (%251,)
}

def @func_7093() -> (Tensor[(308), float32],) {
  %254 = fn () -> (Tensor[(308), float32],) {
    %252 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
    %253 = %252.0;
    (%253,)
  };
  %254() /* ty=(Tensor[(308), float32],) */
}

def @func_7299() -> (Tensor[(11, 7, 4), float32], Tensor[(420), uint16], Tensor[(308), float32], Tensor[(5, 2, 5), float32]) {
  @func_7297() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(420), uint16], Tensor[(308), float32], Tensor[(5, 2, 5), float32]) */
}

def @func_6809() -> (Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(420), uint16], Tensor[(420, 1), uint16]) {
  @func_6807() /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(420), uint16], Tensor[(420, 1), uint16]) */
}

def @func_3638(%var_3615: Tensor[(14, 10, 12), float64]) -> (Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float64]) {
  %255 = cast(-5.53372f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %256 = cast(%var_3615, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
  %257 = cast(%var_3615, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
  %258 = floor_mod(%255, %256) /* ty=Tensor[(14, 10, 12), float64] */;
  %259 = log2(%257) /* ty=Tensor[(14, 10, 12), float64] */;
  (%258, %259)
}

def @func_4868(%var_4842: Tensor[(3360), float32], %var_4850: Tensor[(60), float64]) -> (Tensor[(600), float64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(12, 5), float64], Tensor[(60), float64], Tensor[(308), float32], Tensor[(308), float32]) {
  %260 = @func_1933() /* ty=(Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) */;
  %261 = cast(%var_4842, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %262 = reshape(%261, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %263 = @func_1266(%262) /* ty=(Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %264 = cast(%var_4850, dtype="float64") /* ty=Tensor[(60), float64] */;
  %265 = reshape(%264, newshape=[12, 5]) /* ty=Tensor[(12, 5), float64] */;
  %266 = @func_4634(%265) /* ty=(Tensor[(12, 5), float64],) */;
  %267 = %260.2;
  %268 = %263.1;
  %269 = %266.0;
  %270 = @func_3873() /* ty=Tensor[(308), float32] */;
  %271 = @func_3542() /* ty=Tensor[(308), float32] */;
  (%267, %268, %var_4842, %269, %var_4850, %270, %271)
}

def @func_4872(%var_4870: Tensor[(3360), float32], %var_4871: Tensor[(60), float64]) -> (Tensor[(600), float64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(12, 5), float64], Tensor[(60), float64], Tensor[(308), float32], Tensor[(308), float32]) {
  @func_4868(%var_4870, %var_4871) /* ty=(Tensor[(600), float64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(12, 5), float64], Tensor[(60), float64], Tensor[(308), float32], Tensor[(308), float32]) */
}

def @func_6685(%var_6683: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), int64], Tensor[(3360), bool]) {
  @func_6682(%var_6683) /* ty=(Tensor[(11, 7, 4), int64], Tensor[(3360), bool]) */
}

def @func_1464(%var_1463: Tensor[(15, 10, 4), float64]) -> (Tensor[(15, 10, 4), float32],) {
  %276 = fn (%var_1447: Tensor[(15, 10, 4), float64]) -> (Tensor[(15, 10, 4), float32],) {
    %272 = cast(%var_1447, dtype="float64") /* ty=Tensor[(15, 10, 4), float64] */;
    %273 = atan(%272) /* ty=Tensor[(15, 10, 4), float64] */;
    %274 = cast(%273, dtype="float32") /* ty=Tensor[(15, 10, 4), float32] */;
    %275 = cosh(%274) /* ty=Tensor[(15, 10, 4), float32] */;
    (%275,)
  };
  %276(%var_1463) /* ty=(Tensor[(15, 10, 4), float32],) */
}

def @func_1832() -> (Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32]) {
  @func_1830() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32]) */
}

def @func_8534(%var_8511: Tensor[(7, 2, 14), float32]) -> Tensor[(7, 2, 14), float32] {
  %277 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 14), float32] */;
  %278 = shape_of(%var_8511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%var_8511, dtype="float32") /* ty=Tensor[(7, 2, 14), float32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%279, %280) /* ty=Tensor[(7, 2, 14), float32] */
}

def @func_4634(%var_4619: Tensor[(12, 5), float64]) -> (Tensor[(12, 5), float64],) {
  %281 = cast(%var_4619, dtype="float64") /* ty=Tensor[(12, 5), float64] */;
  %282 = exp(%281) /* ty=Tensor[(12, 5), float64] */;
  (%282,)
}

def @func_6415() -> (Tensor[(3360), float32],) {
  @func_6413() /* ty=(Tensor[(3360), float32],) */
}

def @func_4819() -> Tensor[(11, 7, 4), float64] {
  %283 = fn () -> Tensor[(11, 7, 4), float64] {
    @func_4795() /* ty=Tensor[(11, 7, 4), float64] */
  };
  %283() /* ty=Tensor[(11, 7, 4), float64] */
}

def @func_5192(%var_5191: Tensor[(308), float32]) -> (Tensor[(3360), float32], Tensor[(11, 7, 4), int8], Tensor[(308), float32]) {
  %290 = fn (%var_5177: Tensor[(308), float32]) -> (Tensor[(3360), float32], Tensor[(11, 7, 4), int8], Tensor[(308), float32]) {
    %284 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
    %285 = cast(%var_5177, dtype="float32") /* ty=Tensor[(308), float32] */;
    %286 = reshape(%285, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %287 = @func_3225(%286) /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), int8]) */;
    %288 = %284.2;
    %289 = %287.2;
    (%288, %289, %var_5177)
  };
  %290(%var_5191) /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), int8], Tensor[(308), float32]) */
}

def @func_4439() -> (Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32]) {
  %291 = cast(meta[relay.Constant][14] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %292 = reshape(%291, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %293 = @func_2027(%292) /* ty=(Tensor[(3360), bool], Tensor[(3360), bool]) */;
  %294 = @func_3542() /* ty=Tensor[(308), float32] */;
  %295 = cast(%294, dtype="float32") /* ty=Tensor[(308), float32] */;
  %296 = %293.0;
  %297 = @func_3490() /* ty=Tensor[(11, 7, 4), bool] */;
  %298 = sigmoid(%295) /* ty=Tensor[(308), float32] */;
  (%296, meta[relay.Constant][14] /* ty=Tensor[(3360), float32] */, %297, %298)
}

def @func_2090() -> (Tensor[(11, 7, 4), float64],) {
  %303 = fn () -> (Tensor[(11, 7, 4), float64],) {
    %299 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
    %300 = %299.0;
    %301 = cast(%300, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
    %302 = cos(%301) /* ty=Tensor[(11, 7, 4), float64] */;
    (%302,)
  };
  %303() /* ty=(Tensor[(11, 7, 4), float64],) */
}

def @func_5169() -> (Tensor[(1680), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float32]) {
  %310 = fn () -> (Tensor[(1680), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float32]) {
    %304 = @func_5059() /* ty=(Tensor[(308), int16], Tensor[(14, 10, 12), float64], Tensor[(1680), float64]) */;
    %305 = @func_4439() /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32]) */;
    %306 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
    %307 = %304.2;
    %308 = %305.0;
    %309 = %306.2;
    (%307, %308, %309)
  };
  %310() /* ty=(Tensor[(1680), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float32]) */
}

def @func_4123() -> (Tensor[(600), float64], Tensor[(308), float32]) {
  %315 = fn () -> (Tensor[(600), float64], Tensor[(308), float32]) {
    %311 = @func_1933() /* ty=(Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) */;
    %312 = @func_1933() /* ty=(Tensor[(308), float32], Tensor[(15, 10, 4), float32], Tensor[(600), float64]) */;
    %313 = %311.2;
    %314 = %312.0;
    (%313, %314)
  };
  %315() /* ty=(Tensor[(600), float64], Tensor[(308), float32]) */
}

def @func_2957() -> (Tensor[(11, 7, 4), float32],) {
  %320 = fn () -> (Tensor[(11, 7, 4), float32],) {
    %316 = @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */;
    %317 = %316.1;
    %318 = cast(%317, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
    %319 = sinh(%318) /* ty=Tensor[(11, 7, 4), float32] */;
    (%319,)
  };
  %320() /* ty=(Tensor[(11, 7, 4), float32],) */
}

def @func_7200(%var_7173: Tensor[(756), float32]) -> (Tensor[(60), float64], Tensor[(756), float32], Tensor[(756), float32], Tensor[(12, 5), float64], Tensor[(9, 12, 7), float64], Tensor[(3360), bool]) {
  %321 = @func_6158() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(60), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64]) */;
  %322 = cast(%var_7173, dtype="float32") /* ty=Tensor[(756), float32] */;
  %323 = reshape(%322, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %324 = @func_4214(%323) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) */;
  %325 = %321.3;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(60), float64] */;
  %327 = reshape(%326, newshape=[12, 5]) /* ty=Tensor[(12, 5), float64] */;
  %328 = @func_4634(%327) /* ty=(Tensor[(12, 5), float64],) */;
  %329 = @func_5606() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(9, 12, 7), float64], Tensor[(756), float64], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), bool]) */;
  %330 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %331 = %324.2;
  %332 = %328.0;
  %333 = %329.2;
  %334 = %330.1;
  (%325, %331, %var_7173, %332, %333, %334)
}

def @func_5869(%var_5852: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), bool], Tensor[(16, 14, 15), float32]) {
  %335 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %336 = cast(meta[relay.Constant][15] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %337 = reshape(%336, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %338 = @func_1169(%337) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */;
  %339 = cast(%var_5852, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %340 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(3360), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %341 = cast(meta[relay.Constant][15] /* ty=Tensor[(3360), float32] */, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?), bool] */;
  %343 = %338.1;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(308), float32] */;
  %345 = cast(meta[relay.Constant][15] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %346 = reshape(%344, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %347 = reshape(%345, newshape=[2, 1680]) /* ty=Tensor[(2, 1680), float32] */;
  %348 = @func_2225(%346, %347) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(2, 1680), float32], Tensor[(6, 14, 7), bool]) */;
  %349 = %335.0;
  %350 = greater(%341, %342) /* ty=Tensor[(3360), bool] */;
  %351 = %348.2;
  (%349, %343, %350, %351)
}

def @func_3875() -> Tensor[(308), float32] {
  @func_3873() /* ty=Tensor[(308), float32] */
}

def @func_4531() -> (Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64]) {
  %355 = fn () -> (Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64]) {
    %352 = @func_4004() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64], Tensor[(3360), bool]) */;
    %353 = %352.1;
    %354 = @func_2811() /* ty=Tensor[(11, 7, 4), float64] */;
    (%353, %354)
  };
  %355() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64]) */
}

def @func_4180(%var_4179: Tensor[(11, 7, 4), float32]) -> (Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(308), float32]) {
  %373 = fn (%var_4147: Tensor[(11, 7, 4), float32]) -> (Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(308), float32]) {
    %356 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
    %357 = @func_2609() /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(3360), float32]) */;
    %358 = @func_2982() /* ty=Tensor[(308), float32] */;
    %359 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
    %360 = %359.0;
    %361 = cast(%var_4147, dtype="int16") /* ty=Tensor[(11, 7, 4), int16] */;
    %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
    %363 = cast(%360, dtype="int16") /* ty=Tensor[(11, 7, 4), int16] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %365 = bitwise_xor(%363, %364) /* ty=Tensor[(11, 7, 4), int16] */;
    %366 = cast(%365, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
    %367 = shape_of(%358, dtype="int32") /* ty=Tensor[(1), int32] */;
    %368 = cast(%358, dtype="float32") /* ty=Tensor[(308), float32] */;
    %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?), float32] */;
    %370 = %356.2;
    %371 = %357.1;
    %372 = divide(%368, %369) /* ty=Tensor[(308), float32] */;
    (%370, %371, %372)
  };
  %373(%var_4179) /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(308), float32]) */
}

def @func_395(%var_393: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), float32],) {
  @func_392(%var_393) /* ty=(Tensor[(11, 7, 4), float32],) */
}

def @func_914(%var_913: Tensor[(308), float32]) -> (Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), uint32]) {
  %397 = fn (%var_894: Tensor[(308), float32]) -> (Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), uint32]) {
    %374 = cast(meta[relay.Constant][16] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %375 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
    %376 = %375.1;
    %377 = cast(%376, dtype="float32") /* ty=Tensor[(308), float32] */;
    %378 = reshape(%374, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
    %379 = reshape(%377, newshape=[308]) /* ty=Tensor[(308), float32] */;
    %380 = @func_676(%378, %379) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
    %381 = cast(%376, dtype="float32") /* ty=Tensor[(308), float32] */;
    %382 = reshape(%381, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %383 = @func_392(%382) /* ty=(Tensor[(11, 7, 4), float32],) */;
    %384 = cast(meta[relay.Constant][16] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %385 = %383.0;
    %386 = cast(%385, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
    %387 = reshape(%384, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
    %388 = reshape(%386, newshape=[308]) /* ty=Tensor[(308), float32] */;
    %389 = @func_676(%387, %388) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
    %390 = cast(%var_894, dtype="uint32") /* ty=Tensor[(308), uint32] */;
    %391 = shape_of(%376, dtype="int32") /* ty=Tensor[(1), int32] */;
    %392 = cast(%376, dtype="uint32") /* ty=Tensor[(308), uint32] */;
    %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %394 = %380.2;
    %395 = %389.2;
    %396 = right_shift(%392, %393) /* ty=Tensor[(308), uint32] */;
    (%394, meta[relay.Constant][16] /* ty=Tensor[(3360), float32] */, %385, %395, %396)
  };
  %397(%var_913) /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), uint32]) */
}

def @func_4513() -> (Tensor[(3360), float32],) {
  %400 = fn () -> (Tensor[(3360), float32],) {
    %398 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
    %399 = %398.1;
    (%399,)
  };
  %400() /* ty=(Tensor[(3360), float32],) */
}

def @func_6210(%var_6208: Tensor[(3, 5, 16), float64]) -> (Tensor[(3, 5, 16), float64],) {
  @func_6207(%var_6208) /* ty=(Tensor[(3, 5, 16), float64],) */
}

def @func_1034() -> (Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) {
  %401 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %402 = cast(meta[relay.Constant][17] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %403 = %401.1;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(308), float32] */;
  %405 = reshape(%402, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %406 = reshape(%404, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %407 = @func_676(%405, %406) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %408 = %407.3;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %410 = log(%409) /* ty=Tensor[(11, 7, 4), float32] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %412 = reshape(%411, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %413 = @func_392(%412) /* ty=(Tensor[(11, 7, 4), float32],) */;
  %414 = %413.0;
  (%403, meta[relay.Constant][17] /* ty=Tensor[(3360), float32] */, %410, %414)
}

def @func_7638() -> Tensor[(11, 7, 4), bool] {
  %415 = fn () -> Tensor[(11, 7, 4), bool] {
    @func_3114() /* ty=Tensor[(11, 7, 4), bool] */
  };
  %415() /* ty=Tensor[(11, 7, 4), bool] */
}

def @func_5295() -> (Tensor[(11, 7, 4), bool],) {
  @func_5293() /* ty=(Tensor[(11, 7, 4), bool],) */
}

def @func_6319() -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) {
  %416 = @func_4530() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64]) */;
  %417 = @func_2550() /* ty=Tensor[(11, 7, 4), float32] */;
  %418 = %416.0;
  (%417, %418)
}

def @func_2978() -> Tensor[(308), float32] {
  %420 = fn () -> Tensor[(308), float32] {
    %419 = @func_984() /* ty=(Tensor[(308), float32],) */;
    %419.0
  };
  %420() /* ty=Tensor[(308), float32] */
}

def @func_7498(%var_7497: Tensor[(2, 16, 7), float32]) -> (Tensor[(2, 16, 7), float32], Tensor[(11, 7, 4), bool], Tensor[(3360), float32], Tensor[(308), float32]) {
  %431 = fn (%var_7456: Tensor[(2, 16, 7), float32]) -> (Tensor[(2, 16, 7), float32], Tensor[(11, 7, 4), bool], Tensor[(3360), float32], Tensor[(308), float32]) {
    %421 = cast(%var_7456, dtype="float32") /* ty=Tensor[(2, 16, 7), float32] */;
    %422 = @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */;
    %423 = %422.1;
    %424 = cast(%423, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
    %425 = reshape(%424, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %426 = @func_3225(%425) /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), int8]) */;
    %427 = @func_3968() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32]) */;
    %428 = log(%421) /* ty=Tensor[(2, 16, 7), float32] */;
    %429 = %426.1;
    %430 = %427.1;
    (%428, %423, %429, %430)
  };
  %431(%var_7497) /* ty=(Tensor[(2, 16, 7), float32], Tensor[(11, 7, 4), bool], Tensor[(3360), float32], Tensor[(308), float32]) */
}

def @func_5607() -> (Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(9, 12, 7), float64], Tensor[(756), float64], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), bool]) {
  %443 = fn () -> (Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(9, 12, 7), float64], Tensor[(756), float64], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), bool]) {
    %432 = @func_4122() /* ty=(Tensor[(600), float64], Tensor[(308), float32]) */;
    %433 = @func_4004() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64], Tensor[(3360), bool]) */;
    %434 = cast(meta[relay.Constant][18] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
    %435 = reshape(%434, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), float64] */;
    %436 = @func_2291(%435) /* ty=(Tensor[(9, 12, 7), float64],) */;
    %437 = @func_3590() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */;
    %438 = %432.1;
    %439 = %433.1;
    %440 = %436.0;
    %441 = @func_3490() /* ty=Tensor[(11, 7, 4), bool] */;
    %442 = %437.1;
    (%438, %439, %440, meta[relay.Constant][18] /* ty=Tensor[(756), float64] */, %441, %442)
  };
  %443() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(9, 12, 7), float64], Tensor[(756), float64], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), bool]) */
}

def @func_7903() -> Tensor[(11, 7, 4), float32] {
  %444 = @func_6319() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) */;
  %444.0
}

def @func_4560(%var_4553: Tensor[(12, 15, 16), uint16], %var_4554: Tensor[(12, 15, 16), uint16]) -> (Tensor[(12, 15, 16), bool],) {
  %445 = cast(%var_4554, dtype="bool") /* ty=Tensor[(12, 15, 16), bool] */;
  %446 = shape_of(%var_4553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%var_4553, dtype="bool") /* ty=Tensor[(12, 15, 16), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %449 = equal(%447, %448) /* ty=Tensor[(12, 15, 16), bool] */;
  (%449,)
}

def @func_3290(%var_3288: Tensor[(5, 2, 5), float32], %var_3289: Tensor[(5, 2, 5), float32]) -> Tensor[(5, 2, 5), float32] {
  %454 = fn (%var_3279: Tensor[(5, 2, 5), float32], %var_3280: Tensor[(5, 2, 5), float32]) -> Tensor[(5, 2, 5), float32] {
    %450 = cast(%var_3280, dtype="float32") /* ty=Tensor[(5, 2, 5), float32] */;
    %451 = shape_of(%var_3279, dtype="int32") /* ty=Tensor[(3), int32] */;
    %452 = cast(%var_3279, dtype="float32") /* ty=Tensor[(5, 2, 5), float32] */;
    %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%452, %453) /* ty=Tensor[(5, 2, 5), float32] */
  };
  %454(%var_3288, %var_3289) /* ty=Tensor[(5, 2, 5), float32] */
}

def @func_2469(%var_2365: Tensor[(4, 10, 11), uint64], %var_2396: Tensor[(4, 10, 11), int64]) -> (Tensor[(308), float32], Tensor[(756), float32], Tensor[(4, 10, 11), float64], Tensor[(4, 10, 11), bool], Tensor[(4, 10, 11), uint64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(14, 6, 9), float32]) {
  %455 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %456 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 10, 11), uint64] */, dtype="uint64") /* ty=Tensor[(1, 10, 11), uint64] */;
  %457 = cast(%var_2365, dtype="uint64") /* ty=Tensor[(4, 10, 11), uint64] */;
  %458 = bitwise_xor(%456, %457) /* ty=Tensor[(4, 10, 11), uint64] */;
  %459 = cast(%var_2365, dtype="float32") /* ty=Tensor[(4, 10, 11), float32] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="float32") /* ty=Tensor[(4, 10, 11), float32] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %463 = add(%461, %462) /* ty=Tensor[(4, 10, 11), float32] */;
  %464 = cast(%458, dtype="int64") /* ty=Tensor[(4, 10, 11), int64] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%463, dtype="int64") /* ty=Tensor[(4, 10, 11), int64] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %468 = maximum(%466, %467) /* ty=Tensor[(4, 10, 11), int64] */;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(4, 10, 11), float64] */;
  %470 = shape_of(%var_2365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%var_2365, dtype="float64") /* ty=Tensor[(4, 10, 11), float64] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %473 = cast(%var_2396, dtype="int16") /* ty=Tensor[(4, 10, 11), int16] */;
  %474 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%468, dtype="int16") /* ty=Tensor[(4, 10, 11), int16] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %477 = minimum(%475, %476) /* ty=Tensor[(4, 10, 11), int16] */;
  %478 = cast(%468, dtype="bool") /* ty=Tensor[(4, 10, 11), bool] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="bool") /* ty=Tensor[(4, 10, 11), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = cast(%var_2396, dtype="uint64") /* ty=Tensor[(4, 10, 11), uint64] */;
  %483 = shape_of(%var_2365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_2365, dtype="uint64") /* ty=Tensor[(4, 10, 11), uint64] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %486 = cast(meta[relay.Constant][21] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %487 = reshape(%486, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %488 = @func_1266(%487) /* ty=(Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %489 = cast(meta[relay.Constant][19] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %490 = cast(meta[relay.Constant][19] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %491 = reshape(%489, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %492 = reshape(%490, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %493 = @func_1886(%491, %492) /* ty=(Tensor[(14, 6, 9), bool], Tensor[(14, 6, 9), float32]) */;
  %494 = %493.0;
  %495 = cast(%494, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %496 = %455.1;
  %497 = divide(%471, %472) /* ty=Tensor[(4, 10, 11), float64] */;
  %498 = less_equal(%480, %481) /* ty=Tensor[(4, 10, 11), bool] */;
  %499 = left_shift(%484, %485) /* ty=Tensor[(4, 10, 11), uint64] */;
  %500 = %488.1;
  %501 = cos(%495) /* ty=Tensor[(14, 6, 9), float32] */;
  (%496, meta[relay.Constant][19] /* ty=Tensor[(756), float32] */, %497, %498, %499, %500, meta[relay.Constant][21] /* ty=Tensor[(3360), float32] */, %501)
}

def @func_4993(%var_4992: Tensor[(11, 7, 4), float32]) -> (Tensor[(15, 10, 4), float32], Tensor[(60, 10), float64], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) {
  %526 = fn (%var_4950: Tensor[(11, 7, 4), float32]) -> (Tensor[(15, 10, 4), float32], Tensor[(60, 10), float64], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) {
    %502 = cast(meta[relay.Constant][22] /* ty=Tensor[(60, 10), float64] */, dtype="float64") /* ty=Tensor[(60, 10), float64] */;
    %503 = reshape(%502, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), float64] */;
    %504 = @func_1462(%503) /* ty=(Tensor[(15, 10, 4), float32],) */;
    %505 = @func_4758() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(756), float64]) */;
    %506 = %505.1;
    %507 = cast(%var_4950, dtype="int32") /* ty=Tensor[(11, 7, 4), int32] */;
    %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %509 = cast(%506, dtype="int32") /* ty=Tensor[(11, 7, 4), int32] */;
    %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %511 = bitwise_or(%509, %510) /* ty=Tensor[(11, 7, 4), int32] */;
    %512 = cast(%511, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
    %513 = sqrt(%512) /* ty=Tensor[(11, 7, 4), float64] */;
    %514 = cast(%511, dtype="uint8") /* ty=Tensor[(11, 7, 4), uint8] */;
    %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
    %516 = cast(%513, dtype="uint8") /* ty=Tensor[(11, 7, 4), uint8] */;
    %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %518 = right_shift(%516, %517) /* ty=Tensor[(11, 7, 4), uint8] */;
    %519 = cast(%511, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
    %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(%518, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %523 = %504.0;
    %524 = @func_3542() /* ty=Tensor[(308), float32] */;
    %525 = mod(%521, %522) /* ty=Tensor[(11, 7, 4), float32] */;
    (%523, meta[relay.Constant][22] /* ty=Tensor[(60, 10), float64] */, %524, %525)
  };
  %526(%var_4992) /* ty=(Tensor[(15, 10, 4), float32], Tensor[(60, 10), float64], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */
}

def @func_1172(%var_1170: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) {
  @func_1169(%var_1170) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */
}

def @func_2277() -> (Tensor[(308), float32],) {
  @func_2275() /* ty=(Tensor[(308), float32],) */
}

def @func_6158() -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(60), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64]) {
  %527 = cast(meta[relay.Constant][23] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %528 = cast(meta[relay.Constant][24] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %529 = reshape(%527, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %530 = reshape(%528, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %531 = @func_4868(%529, %530) /* ty=(Tensor[(600), float64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(12, 5), float64], Tensor[(60), float64], Tensor[(308), float32], Tensor[(308), float32]) */;
  %532 = @func_3831() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float64]) */;
  %533 = @func_5293() /* ty=(Tensor[(11, 7, 4), bool],) */;
  %534 = @func_5606() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(9, 12, 7), float64], Tensor[(756), float64], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), bool]) */;
  %535 = @func_2825() /* ty=Tensor[(308), float32] */;
  %536 = %531.6;
  %537 = %532.1;
  %538 = %533.0;
  %539 = %534.1;
  (%535, %536, meta[relay.Constant][23] /* ty=Tensor[(3360), float32] */, meta[relay.Constant][24] /* ty=Tensor[(60), float64] */, %537, %538, %539)
}

def @func_2982() -> Tensor[(308), float32] {
  %540 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %540.0
}

def @func_6753() -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32]) {
  @func_6751() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32]) */
}

def @func_2228(%var_2226: Tensor[(308), float32], %var_2227: Tensor[(2, 1680), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(2, 1680), float32], Tensor[(6, 14, 7), bool]) {
  %560 = fn (%var_2206: Tensor[(308), float32], %var_2216: Tensor[(2, 1680), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(2, 1680), float32], Tensor[(6, 14, 7), bool]) {
    %541 = cast(%var_2206, dtype="float32") /* ty=Tensor[(308), float32] */;
    %542 = reshape(%541, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %543 = @func_392(%542) /* ty=(Tensor[(11, 7, 4), float32],) */;
    %544 = cast(%var_2216, dtype="float32") /* ty=Tensor[(2, 1680), float32] */;
    %545 = %543.0;
    %546 = cast(%545, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
    %547 = reshape(%544, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
    %548 = reshape(%546, newshape=[308]) /* ty=Tensor[(308), float32] */;
    %549 = @func_676(%547, %548) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
    %550 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 14, 7), float64] */;
    %551 = acosh(%550) /* ty=Tensor[(6, 14, 7), float64] */;
    %552 = cast(%551, dtype="float64") /* ty=Tensor[(6, 14, 7), float64] */;
    %553 = tan(%552) /* ty=Tensor[(6, 14, 7), float64] */;
    %554 = cast(%553, dtype="bool") /* ty=Tensor[(6, 14, 7), bool] */;
    %555 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
    %556 = cast(%551, dtype="bool") /* ty=Tensor[(6, 14, 7), bool] */;
    %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %558 = %549.0;
    %559 = greater(%556, %557) /* ty=Tensor[(6, 14, 7), bool] */;
    (%545, %var_2206, %558, %var_2216, %559)
  };
  %560(%var_2226, %var_2227) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(2, 1680), float32], Tensor[(6, 14, 7), bool]) */
}

def @func_5980(%var_5978: Tensor[(14, 3), bool], %var_5979: Tensor[(14, 3), bool]) -> (Tensor[(14, 3), bool], Tensor[(11, 7, 4), float32], Tensor[(308), float32]) {
  @func_5976(%var_5978, %var_5979) /* ty=(Tensor[(14, 3), bool], Tensor[(11, 7, 4), float32], Tensor[(308), float32]) */
}

def @func_1169(%var_1150: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) {
  %561 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %562 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %563 = cast(%var_1150, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %564 = %561.0;
  %565 = cast(%564, dtype="float32") /* ty=Tensor[(308), float32] */;
  %566 = reshape(%563, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %567 = reshape(%565, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %568 = @func_676(%566, %567) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %569 = cast(%var_1150, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %570 = rsqrt(%569) /* ty=Tensor[(3360), float64] */;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %572 = reshape(%571, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %573 = @func_1113(%572) /* ty=(Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32]) */;
  %574 = %562.3;
  %575 = %568.1;
  %576 = %573.1;
  (%564, %574, %575, %570, %576)
}

def @func_6807() -> (Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(420), uint16], Tensor[(420, 1), uint16]) {
  %577 = @func_5771() /* ty=(Tensor[(3360), float32], Tensor[(756), float64]) */;
  %578 = @func_3831() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float64]) */;
  %579 = %578.4;
  %580 = cast(%579, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %581 = cast(meta[relay.Constant][26] /* ty=Tensor[(420, 1), uint16] */, dtype="uint16") /* ty=Tensor[(420, 1), uint16] */;
  %582 = reshape(%581, newshape=[420]) /* ty=Tensor[(420), uint16] */;
  %583 = @func_3160(%582) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(420), uint16]) */;
  %584 = %577.0;
  %585 = atanh(%580) /* ty=Tensor[(11, 7, 4), float32] */;
  %586 = %583.2;
  (%584, %585, %586, meta[relay.Constant][26] /* ty=Tensor[(420, 1), uint16] */)
}

def @func_7297() -> (Tensor[(11, 7, 4), float32], Tensor[(420), uint16], Tensor[(308), float32], Tensor[(5, 2, 5), float32]) {
  %587 = @func_6319() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) */;
  %588 = @func_6807() /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(420), uint16], Tensor[(420, 1), uint16]) */;
  %589 = @func_5004() /* ty=(Tensor[(308), float32],) */;
  %590 = @func_3590() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */;
  %591 = %587.0;
  %592 = %588.2;
  %593 = %589.0;
  %594 = %590.2;
  (%591, %592, %593, %594)
}

def @func_6602(%var_6569: Tensor[(11, 7, 4), float32], %var_6593: Tensor[(3360), float32]) -> (Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64], Tensor[(3360), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32]) {
  %595 = @func_5040() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %596 = %595.0;
  %597 = cast(%var_6569, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="bool") /* ty=Tensor[(11, 7, 4), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %601 = @func_2089() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %602 = cast(%var_6593, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %603 = reshape(%602, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %604 = @func_2903(%603) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */;
  %605 = cast(%596, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %606 = rsqrt(%605) /* ty=Tensor[(11, 7, 4), float32] */;
  %607 = cast(%var_6569, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %611 = equal(%599, %600) /* ty=Tensor[(11, 7, 4), bool] */;
  %612 = %601.0;
  %613 = %604.2;
  %614 = floor_mod(%609, %610) /* ty=Tensor[(11, 7, 4), float32] */;
  (%611, %612, %613, %var_6593, %614)
}

def @func_1036() -> (Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) {
  @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */
}

def @func_1772(%var_1770: Tensor[(15, 9, 3), uint32], %var_1771: Tensor[(15, 9, 3), uint32]) -> (Tensor[(15, 9, 3), uint32],) {
  @func_1768(%var_1770, %var_1771) /* ty=(Tensor[(15, 9, 3), uint32],) */
}

def @func_3163(%var_3161: Tensor[(420), uint16]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(420), uint16]) {
  @func_3160(%var_3161) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(420), uint16]) */
}

def @func_5293() -> (Tensor[(11, 7, 4), bool],) {
  %615 = @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */;
  %616 = %615.1;
  (%616,)
}

def @func_2926() -> (Tensor[(3360), float32], Tensor[(3360), float32]) {
  %623 = fn () -> (Tensor[(3360), float32], Tensor[(3360), float32]) {
    %617 = @func_2609() /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(3360), float32]) */;
    %618 = %617.0;
    %619 = cast(%618, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %620 = reshape(%619, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
    %621 = @func_1266(%620) /* ty=(Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) */;
    %622 = %621.3;
    (%618, %622)
  };
  %623() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */
}

def @func_1755(%var_1753: Tensor[(308), float32]) -> (Tensor[(308), float64], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) {
  @func_1752(%var_1753) /* ty=(Tensor[(308), float64], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) */
}

def @func_6539() -> (Tensor[(14, 6, 9), bool], Tensor[(308), float32], Tensor[(3360), float32]) {
  %632 = fn () -> (Tensor[(14, 6, 9), bool], Tensor[(308), float32], Tensor[(3360), float32]) {
    %624 = @func_6469() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) */;
    %625 = cast(meta[relay.Constant][27] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
    %626 = reshape(%625, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %627 = @func_4178(%626) /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(308), float32]) */;
    %628 = %627.0;
    %629 = cast(%628, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %630 = %624.2;
    %631 = cosh(%629) /* ty=Tensor[(3360), float32] */;
    (%630, meta[relay.Constant][27] /* ty=Tensor[(308), float32] */, %631)
  };
  %632() /* ty=(Tensor[(14, 6, 9), bool], Tensor[(308), float32], Tensor[(3360), float32]) */
}

def @func_7750(%var_7749: Tensor[(3360), float32]) -> Tensor[(3360), bool] {
  %649 = fn (%var_7719: Tensor[(3360), float32]) -> Tensor[(3360), bool] {
    %633 = @func_4296() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(14, 10, 12), bool]) */;
    %634 = %633.1;
    %635 = cast(%var_7719, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(1), int32] */;
    %637 = cast(%634, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?), float64] */;
    %639 = mod(%637, %638) /* ty=Tensor[(3360), float64] */;
    %640 = cast(%639, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %641 = shape_of(%634, dtype="int32") /* ty=Tensor[(1), int32] */;
    %642 = cast(%634, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?), bool] */;
    %644 = greater_equal(%642, %643) /* ty=Tensor[(3360), bool] */;
    %645 = cast(%644, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %646 = shape_of(%634, dtype="int32") /* ty=Tensor[(1), int32] */;
    %647 = cast(%634, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?), bool] */;
    logical_or(%647, %648) /* ty=Tensor[(3360), bool] */
  };
  %649(%var_7749) /* ty=Tensor[(3360), bool] */
}

def @func_4214(%var_4212: Tensor[(756), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) {
  %650 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %651 = cast(%var_4212, dtype="float32") /* ty=Tensor[(756), float32] */;
  %652 = cast(%var_4212, dtype="float32") /* ty=Tensor[(756), float32] */;
  %653 = reshape(%651, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %654 = reshape(%652, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %655 = @func_1886(%653, %654) /* ty=(Tensor[(14, 6, 9), bool], Tensor[(14, 6, 9), float32]) */;
  %656 = %650.0;
  %657 = %655.0;
  (%656, %657, %var_4212)
}

def @func_7588() -> Tensor[(14, 6, 9), float32] {
  %661 = fn () -> Tensor[(14, 6, 9), float32] {
    %658 = @func_6538() /* ty=(Tensor[(14, 6, 9), bool], Tensor[(308), float32], Tensor[(3360), float32]) */;
    %659 = %658.0;
    %660 = cast(%659, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
    tan(%660) /* ty=Tensor[(14, 6, 9), float32] */
  };
  %661() /* ty=Tensor[(14, 6, 9), float32] */
}

def @func_8035() -> (Tensor[(308), float32], Tensor[(308), float32]) {
  @func_8033() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */
}

def @func_4296() -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(14, 10, 12), bool]) {
  %662 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %663 = %662.0;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %665 = reshape(%664, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %666 = @func_3225(%665) /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), int8]) */;
  %667 = %666.1;
  %668 = cast(%667, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %669 = reshape(%668, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %670 = @func_2903(%669) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */;
  %671 = cast(meta[relay.Constant][28] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %672 = reshape(%671, newshape=[14, 10, 12]) /* ty=Tensor[(14, 10, 12), float64] */;
  %673 = @func_3638(%672) /* ty=(Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float64]) */;
  %674 = %673.0;
  %675 = cast(meta[relay.Constant][28] /* ty=Tensor[(1680), float64] */, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%674, dtype="bool") /* ty=Tensor[(14, 10, 12), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %679 = %670.1;
  %680 = greater(%677, %678) /* ty=Tensor[(14, 10, 12), bool] */;
  (%663, %667, %679, %680)
}

def @func_1225(%var_1223: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), bool],) {
  @func_1222(%var_1223) /* ty=(Tensor[(11, 7, 4), bool],) */
}

def @func_4708() -> (Tensor[(308), int16], Tensor[(9, 12, 7), float64], Tensor[(18, 42), float64]) {
  @func_4706() /* ty=(Tensor[(308), int16], Tensor[(9, 12, 7), float64], Tensor[(18, 42), float64]) */
}

def @func_2826() -> Tensor[(308), float32] {
  %682 = fn () -> Tensor[(308), float32] {
    %681 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
    %681.1
  };
  %682() /* ty=Tensor[(308), float32] */
}

def @func_8194() -> Tensor[(308), float32] {
  @func_8192() /* ty=Tensor[(308), float32] */
}

def @func_7911() -> (Tensor[(3360), float32],) {
  %685 = fn () -> (Tensor[(3360), float32],) {
    %683 = @func_4512() /* ty=(Tensor[(3360), float32],) */;
    %684 = %683.0;
    (%684,)
  };
  %685() /* ty=(Tensor[(3360), float32],) */
}

def @func_7698(%var_7696: float64, %var_7697: Tensor[(7, 6, 11), float64]) -> (Tensor[(7, 6, 11), float32],) {
  %692 = fn (%var_7678: float64, %var_7679: Tensor[(7, 6, 11), float64]) -> (Tensor[(7, 6, 11), float32],) {
    %686 = cast(%var_7678, dtype="float64") /* ty=float64 */;
    %687 = cast(%var_7679, dtype="float64") /* ty=Tensor[(7, 6, 11), float64] */;
    %688 = power(%686, %687) /* ty=Tensor[(7, 6, 11), float64] */;
    %689 = cast(%688, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
    %690 = cast(%var_7678, dtype="float32") /* ty=float32 */;
    %691 = multiply(%689, %690) /* ty=Tensor[(7, 6, 11), float32] */;
    (%691,)
  };
  %692(%var_7696, %var_7697) /* ty=(Tensor[(7, 6, 11), float32],) */
}

def @func_8192() -> Tensor[(308), float32] {
  %693 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %693.3
}

def @func_8672() -> (Tensor[(11, 7, 4), float64],) {
  %696 = fn () -> (Tensor[(11, 7, 4), float64],) {
    %694 = @func_2089() /* ty=(Tensor[(11, 7, 4), float64],) */;
    %695 = %694.0;
    (%695,)
  };
  %696() /* ty=(Tensor[(11, 7, 4), float64],) */
}

def @func_8001() -> Tensor[(11, 7, 4), float32] {
  @func_7999() /* ty=Tensor[(11, 7, 4), float32] */
}

def @func_7936() -> Tensor[(308), float32] {
  %697 = @func_4439() /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32]) */;
  %697.3
}

def @func_8209(%var_8207: Tensor[(11, 15, 11), float32]) -> Tensor[(11, 15, 11), float32] {
  @func_8206(%var_8207) /* ty=Tensor[(11, 15, 11), float32] */
}

def @func_3641(%var_3639: Tensor[(14, 10, 12), float64]) -> (Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float64]) {
  @func_3638(%var_3639) /* ty=(Tensor[(14, 10, 12), float64], Tensor[(14, 10, 12), float64]) */
}

def @func_8454(%var_8452: Tensor[(3360), bool]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), bool]) {
  @func_8451(%var_8452) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), bool]) */
}

def @func_8537(%var_8535: Tensor[(7, 2, 14), float32]) -> Tensor[(7, 2, 14), float32] {
  @func_8534(%var_8535) /* ty=Tensor[(7, 2, 14), float32] */
}

def @func_1116(%var_1114: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32]) {
  @func_1113(%var_1114) /* ty=(Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32]) */
}

def @func_5631() -> (Tensor[(3360), float32], Tensor[(308), float32]) {
  @func_5629() /* ty=(Tensor[(3360), float32], Tensor[(308), float32]) */
}

def @func_5821() -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) {
  %702 = fn () -> (Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) {
    %698 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
    %699 = @func_2875() /* ty=(Tensor[(11, 7, 4), float64],) */;
    %700 = %698.2;
    %701 = %699.0;
    (%700, %701)
  };
  %702() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) */
}

def @func_2609() -> (Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(3360), float32]) {
  %703 = @func_2550() /* ty=Tensor[(11, 7, 4), float32] */;
  %704 = cast(meta[relay.Constant][29] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %705 = reshape(%704, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %706 = @func_1169(%705) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */;
  %707 = %706.1;
  %708 = cast(%707, dtype="uint16") /* ty=Tensor[(308), uint16] */;
  %709 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%703, dtype="uint16") /* ty=Tensor[(11, 7, 4), uint16] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %712 = cast(meta[relay.Constant][29] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %713 = reshape(%712, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %714 = @func_1266(%713) /* ty=(Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %715 = maximum(%710, %711) /* ty=Tensor[(11, 7, 4), uint16] */;
  %716 = %714.2;
  (meta[relay.Constant][29] /* ty=Tensor[(3360), float32] */, %715, %716)
}

def @func_2967() -> (Tensor[(3360), float32],) {
  %719 = fn () -> (Tensor[(3360), float32],) {
    %717 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
    %718 = %717.0;
    (%718,)
  };
  %719() /* ty=(Tensor[(3360), float32],) */
}

def @func_4298() -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(14, 10, 12), bool]) {
  @func_4296() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(14, 10, 12), bool]) */
}

def @func_2903(%var_2886: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) {
  %720 = @func_1830() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32]) */;
  %721 = cast(%var_2886, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %722 = reshape(%721, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %723 = @func_1169(%722) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */;
  %724 = %720.0;
  %725 = %723.1;
  (%724, %725, %var_2886)
}

def @func_679(%var_677: Tensor[(16, 14, 15), float32], %var_678: Tensor[(308), float32]) -> (Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) {
  %739 = fn (%var_655: Tensor[(16, 14, 15), float32], %var_661: Tensor[(308), float32]) -> (Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) {
    %726 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 14, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
    %727 = shape_of(%var_655, dtype="int32") /* ty=Tensor[(3), int32] */;
    %728 = cast(%var_655, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %730 = cast(%var_661, dtype="float32") /* ty=Tensor[(308), float32] */;
    %731 = reshape(%730, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %732 = @func_392(%731) /* ty=(Tensor[(11, 7, 4), float32],) */;
    %733 = cast(%var_661, dtype="float32") /* ty=Tensor[(308), float32] */;
    %734 = reshape(%733, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %735 = @func_392(%734) /* ty=(Tensor[(11, 7, 4), float32],) */;
    %736 = power(%728, %729) /* ty=Tensor[(16, 14, 15), float32] */;
    %737 = %732.0;
    %738 = %735.0;
    (%736, %737, %var_661, %738)
  };
  %739(%var_677, %var_678) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */
}

def @func_2611() -> (Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(3360), float32]) {
  @func_2609() /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), uint16], Tensor[(3360), float32]) */
}

def @func_4758() -> (Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(756), float64]) {
  %740 = cast(meta[relay.Constant][31] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %741 = reshape(%740, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %742 = @func_4214(%741) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) */;
  %743 = cast(meta[relay.Constant][31] /* ty=Tensor[(756), float32] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %744 = @func_2825() /* ty=Tensor[(308), float32] */;
  %745 = %742.0;
  %746 = log10(%743) /* ty=Tensor[(756), float64] */;
  (%744, %745, %746)
}

def @func_5872(%var_5870: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), bool], Tensor[(16, 14, 15), float32]) {
  @func_5869(%var_5870) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), bool], Tensor[(16, 14, 15), float32]) */
}

def @func_3969() -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32]) {
  %750 = fn () -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32]) {
    %747 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
    %748 = %747.0;
    %749 = @func_1905() /* ty=Tensor[(308), float32] */;
    (%748, %749)
  };
  %750() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32]) */
}

def @func_5337() -> (Tensor[(308), float32],) {
  %751 = @func_4615() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(308), float32], Tensor[(3360), float64]) */;
  %752 = %751.1;
  (%752,)
}

def @func_6946() -> (Tensor[(11, 7, 4), bool],) {
  %754 = fn () -> (Tensor[(11, 7, 4), bool],) {
    %753 = @func_3114() /* ty=Tensor[(11, 7, 4), bool] */;
    (%753,)
  };
  %754() /* ty=(Tensor[(11, 7, 4), bool],) */
}

def @func_6682(%var_6653: Tensor[(11, 7, 4), float32]) -> (Tensor[(11, 7, 4), int64], Tensor[(3360), bool]) {
  %755 = @func_2550() /* ty=Tensor[(11, 7, 4), float32] */;
  %756 = cast(%var_6653, dtype="int64") /* ty=Tensor[(11, 7, 4), int64] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%755, dtype="int64") /* ty=Tensor[(11, 7, 4), int64] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %760 = @func_3274() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %761 = bitwise_and(%758, %759) /* ty=Tensor[(11, 7, 4), int64] */;
  %762 = %760.1;
  (%761, %762)
}

def @func_4785(%var_4783: Tensor[(2, 12, 11), float64]) -> Tensor[(2, 12, 11), float64] {
  @func_4782(%var_4783) /* ty=Tensor[(2, 12, 11), float64] */
}

def @func_4487(%var_4485: Tensor[(3360), float32]) -> (Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(3360), float32]) {
  @func_4484(%var_4485) /* ty=(Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(3360), float32]) */
}

def @func_5005() -> (Tensor[(308), float32],) {
  %765 = fn () -> (Tensor[(308), float32],) {
    %763 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
    %764 = %763.1;
    (%764,)
  };
  %765() /* ty=(Tensor[(308), float32],) */
}

def @func_8096(%var_8095: Tensor[(1, 420), uint16]) -> (Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), float64], Tensor[(1, 420), uint16]) {
  %776 = fn (%var_8076: Tensor[(1, 420), uint16]) -> (Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), float64], Tensor[(1, 420), uint16]) {
    %766 = @func_4296() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(14, 10, 12), bool]) */;
    %767 = @func_4004() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64], Tensor[(3360), bool]) */;
    %768 = cast(%var_8076, dtype="uint16") /* ty=Tensor[(1, 420), uint16] */;
    %769 = cast(%var_8076, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
    %770 = reshape(%768, newshape=[10, 14, 3]) /* ty=Tensor[(10, 14, 3), uint16] */;
    %771 = reshape(%769, newshape=[10, 14, 3]) /* ty=Tensor[(10, 14, 3), float64] */;
    %772 = @func_2786(%770, %771) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(10, 14, 3), float32], Tensor[(10, 14, 3), uint64], Tensor[(11, 7, 4), bool], Tensor[(3360), float64], Tensor[(440), uint64], Tensor[(308), float32], Tensor[(10, 14, 3), int16]) */;
    %773 = %766.2;
    %774 = %767.0;
    %775 = %772.8;
    (%773, %774, %775, %var_8076)
  };
  %776(%var_8095) /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), float64], Tensor[(1, 420), uint16]) */
}

def @func_6847() -> (Tensor[(308), int16], Tensor[(14, 10, 12), float64]) {
  @func_6845() /* ty=(Tensor[(308), int16], Tensor[(14, 10, 12), float64]) */
}

def @func_1830() -> (Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32]) {
  %777 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %778 = %777.1;
  %779 = cast(%778, dtype="float32") /* ty=Tensor[(308), float32] */;
  %780 = reshape(%779, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %781 = @func_1222(%780) /* ty=(Tensor[(11, 7, 4), bool],) */;
  %782 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %783 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %784 = %781.0;
  %785 = %782.1;
  %786 = %783.0;
  (%778, %784, %785, %786)
}

def @func_8341() -> (Tensor[(11, 7, 4), bool],) {
  @func_8339() /* ty=(Tensor[(11, 7, 4), bool],) */
}

def @func_1890(%var_1888: Tensor[(14, 6, 9), float32], %var_1889: Tensor[(14, 6, 9), float32]) -> (Tensor[(14, 6, 9), bool], Tensor[(14, 6, 9), float32]) {
  @func_1886(%var_1888, %var_1889) /* ty=(Tensor[(14, 6, 9), bool], Tensor[(14, 6, 9), float32]) */
}

def @func_2201() -> (Tensor[(308), float32], Tensor[(3360), bool]) {
  %798 = fn () -> (Tensor[(308), float32], Tensor[(3360), bool]) {
    %787 = @func_1830() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32]) */;
    %788 = cast(meta[relay.Constant][32] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %789 = reshape(%788, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
    %790 = @func_1113(%789) /* ty=(Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32]) */;
    %791 = %790.2;
    %792 = cast(meta[relay.Constant][32] /* ty=Tensor[(3360), float32] */, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(1), int32] */;
    %794 = cast(%791, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?), bool] */;
    %796 = %787.0;
    %797 = less_equal(%794, %795) /* ty=Tensor[(3360), bool] */;
    (%796, %797)
  };
  %798() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */
}

def @func_2906(%var_2904: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) {
  @func_2903(%var_2904) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */
}

def @func_3832() -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float64]) {
  %815 = fn () -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float64]) {
    %799 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
    %800 = %799.0;
    %801 = cast(%800, dtype="float32") /* ty=Tensor[(308), float32] */;
    %802 = cast(meta[relay.Constant][33] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %803 = reshape(%801, newshape=[308]) /* ty=Tensor[(308), float32] */;
    %804 = reshape(%802, newshape=[2, 1680]) /* ty=Tensor[(2, 1680), float32] */;
    %805 = @func_2225(%803, %804) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(2, 1680), float32], Tensor[(6, 14, 7), bool]) */;
    %806 = cast(%800, dtype="float64") /* ty=Tensor[(308), float64] */;
    %807 = @func_3274() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
    %808 = cast(meta[relay.Constant][33] /* ty=Tensor[(3360), float32] */, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %809 = reshape(%808, newshape=[3360]) /* ty=Tensor[(3360), bool] */;
    %810 = @func_2639(%809) /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) */;
    %811 = %805.0;
    %812 = atanh(%806) /* ty=Tensor[(308), float64] */;
    %813 = %807.1;
    %814 = %810.1;
    (%811, meta[relay.Constant][33] /* ty=Tensor[(3360), float32] */, %812, %813, %814)
  };
  %815() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float64], Tensor[(3360), bool], Tensor[(11, 7, 4), float64]) */
}

def @func_5629() -> (Tensor[(3360), float32], Tensor[(308), float32]) {
  %816 = @func_4512() /* ty=(Tensor[(3360), float32],) */;
  %817 = @func_5337() /* ty=(Tensor[(308), float32],) */;
  %818 = %816.0;
  %819 = %817.0;
  (%818, %819)
}

def @func_3359() -> (Tensor[(308), float32],) {
  %821 = fn () -> (Tensor[(308), float32],) {
    %820 = @func_1905() /* ty=Tensor[(308), float32] */;
    (%820,)
  };
  %821() /* ty=(Tensor[(308), float32],) */
}

def @func_8339() -> (Tensor[(11, 7, 4), bool],) {
  %822 = @func_7637() /* ty=Tensor[(11, 7, 4), bool] */;
  (%822,)
}

def @func_8380() -> Tensor[(308), float32] {
  @func_8378() /* ty=Tensor[(308), float32] */
}

def @func_1906() -> Tensor[(308), float32] {
  %824 = fn () -> Tensor[(308), float32] {
    %823 = @func_984() /* ty=(Tensor[(308), float32],) */;
    %823.0
  };
  %824() /* ty=Tensor[(308), float32] */
}

def @func_2473(%var_2471: Tensor[(4, 10, 11), uint64], %var_2472: Tensor[(4, 10, 11), int64]) -> (Tensor[(308), float32], Tensor[(756), float32], Tensor[(4, 10, 11), float64], Tensor[(4, 10, 11), bool], Tensor[(4, 10, 11), uint64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(14, 6, 9), float32]) {
  @func_2469(%var_2471, %var_2472) /* ty=(Tensor[(308), float32], Tensor[(756), float32], Tensor[(4, 10, 11), float64], Tensor[(4, 10, 11), bool], Tensor[(4, 10, 11), uint64], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(14, 6, 9), float32]) */
}

def @main(%var_8727: Tensor[(15, 6, 16), float32]) -> (Tensor[(15, 6, 16), int16],) {
  %825 = cast(%var_8727, dtype="float32") /* ty=Tensor[(15, 6, 16), float32] */;
  %826 = asinh(%825) /* ty=Tensor[(15, 6, 16), float32] */;
  %827 = cast(%826, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %828 = atan(%827) /* ty=Tensor[(15, 6, 16), float64] */;
  %829 = cast(%826, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%828, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %833 = floor_mod(%831, %832) /* ty=Tensor[(15, 6, 16), float64] */;
  %834 = cast(%833, dtype="int16") /* ty=Tensor[(15, 6, 16), int16] */;
  %835 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%826, dtype="int16") /* ty=Tensor[(15, 6, 16), int16] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %838 = right_shift(%836, %837) /* ty=Tensor[(15, 6, 16), int16] */;
  (%838,)
}

def @func_1886(%var_1872: Tensor[(14, 6, 9), float32], %var_1882: Tensor[(14, 6, 9), float32]) -> (Tensor[(14, 6, 9), bool], Tensor[(14, 6, 9), float32]) {
  %839 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 6, 9), float32] */, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %840 = shape_of(%var_1872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%var_1872, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %843 = cast(%var_1872, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %844 = sigmoid(%843) /* ty=Tensor[(14, 6, 9), float32] */;
  %845 = cast(%var_1882, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %846 = shape_of(%844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%844, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %849 = less(%841, %842) /* ty=Tensor[(14, 6, 9), bool] */;
  %850 = floor_mod(%847, %848) /* ty=Tensor[(14, 6, 9), float32] */;
  (%849, %850)
}

def @func_5976(%var_5955: Tensor[(14, 3), bool], %var_5956: Tensor[(14, 3), bool]) -> (Tensor[(14, 3), bool], Tensor[(11, 7, 4), float32], Tensor[(308), float32]) {
  %851 = cast(%var_5956, dtype="bool") /* ty=Tensor[(14, 3), bool] */;
  %852 = shape_of(%var_5955, dtype="int32") /* ty=Tensor[(2), int32] */;
  %853 = cast(%var_5955, dtype="bool") /* ty=Tensor[(14, 3), bool] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %855 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %856 = logical_or(%853, %854) /* ty=Tensor[(14, 3), bool] */;
  %857 = %855.0;
  %858 = @func_2825() /* ty=Tensor[(308), float32] */;
  (%856, %857, %858)
}

def @func_2029(%var_2028: Tensor[(3360), float32]) -> (Tensor[(3360), bool], Tensor[(3360), bool]) {
  %871 = fn (%var_1995: Tensor[(3360), float32]) -> (Tensor[(3360), bool], Tensor[(3360), bool]) {
    %859 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
    %860 = %859.1;
    %861 = cast(%var_1995, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(1), int32] */;
    %863 = cast(%860, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?), bool] */;
    %865 = cast(%var_1995, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %866 = shape_of(%860, dtype="int32") /* ty=Tensor[(1), int32] */;
    %867 = cast(%860, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %868 = dyn.reshape(%865, %866, newshape=[]) /* ty=Tensor[(?), bool] */;
    %869 = not_equal(%863, %864) /* ty=Tensor[(3360), bool] */;
    %870 = equal(%867, %868) /* ty=Tensor[(3360), bool] */;
    (%869, %870)
  };
  %871(%var_2028) /* ty=(Tensor[(3360), bool], Tensor[(3360), bool]) */
}

def @func_2293(%var_2292: Tensor[(9, 12, 7), float64]) -> (Tensor[(9, 12, 7), float64],) {
  %874 = fn (%var_2288: Tensor[(9, 12, 7), float64]) -> (Tensor[(9, 12, 7), float64],) {
    %872 = cast(%var_2288, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
    %873 = acosh(%872) /* ty=Tensor[(9, 12, 7), float64] */;
    (%873,)
  };
  %874(%var_2292) /* ty=(Tensor[(9, 12, 7), float64],) */
}

def @func_1752(%var_1729: Tensor[(308), float32]) -> (Tensor[(308), float64], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64]) {
  %875 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %876 = %875.0;
  %877 = cast(%var_1729, dtype="float64") /* ty=Tensor[(308), float64] */;
  %878 = shape_of(%876, dtype="int32") /* ty=Tensor[(1), int32] */;
  %879 = cast(%876, dtype="float64") /* ty=Tensor[(308), float64] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?), float64] */;
  %881 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %882 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %883 = %882.0;
  %884 = cast(%883, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  %885 = acos(%884) /* ty=Tensor[(11, 7, 4), float32] */;
  %886 = cast(%885, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
  %887 = power(%879, %880) /* ty=Tensor[(308), float64] */;
  %888 = %881.0;
  %889 = sigmoid(%886) /* ty=Tensor[(11, 7, 4), float64] */;
  (%887, %888, %889)
}

def @func_8631(%var_8629: Tensor[(308), float32], %var_8630: Tensor[(10, 5), float32]) -> (Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64], Tensor[(1, 600), float64], Tensor[(600), float64], Tensor[(3360), float32], Tensor[(10, 5), float32]) {
  %914 = fn (%var_8574: Tensor[(308), float32], %var_8626: Tensor[(10, 5), float32]) -> (Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64], Tensor[(1, 600), float64], Tensor[(600), float64], Tensor[(3360), float32], Tensor[(10, 5), float32]) {
    %890 = @func_2966() /* ty=(Tensor[(3360), float32],) */;
    %891 = cast(%var_8574, dtype="float32") /* ty=Tensor[(308), float32] */;
    %892 = %890.0;
    %893 = cast(%892, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %894 = reshape(%891, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %895 = reshape(%893, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
    %896 = @func_6602(%894, %895) /* ty=(Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64], Tensor[(3360), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32]) */;
    %897 = @func_7092() /* ty=(Tensor[(308), float32],) */;
    %898 = @func_2825() /* ty=Tensor[(308), float32] */;
    %899 = cast(%898, dtype="float32") /* ty=Tensor[(308), float32] */;
    %900 = reshape(%899, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
    %901 = @func_392(%900) /* ty=(Tensor[(11, 7, 4), float32],) */;
    %902 = cast(meta[relay.Constant][35] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
    %903 = reshape(%902, newshape=[1, 600]) /* ty=Tensor[(1, 600), float64] */;
    %904 = @func_5467(%903) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(15, 10, 4), float32], Tensor[(1, 600), float64]) */;
    %905 = cast(%var_8626, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
    %906 = reshape(%905, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %907 = @func_7116(%906) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */;
    %908 = %896.0;
    %909 = %897.0;
    %910 = %901.0;
    %911 = @func_4818() /* ty=Tensor[(11, 7, 4), float64] */;
    %912 = %904.2;
    %913 = %907.1;
    (%892, %908, %var_8574, %898, %909, %910, %911, %912, meta[relay.Constant][35] /* ty=Tensor[(600), float64] */, %913, %var_8626)
  };
  %914(%var_8629, %var_8630) /* ty=(Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float64], Tensor[(1, 600), float64], Tensor[(600), float64], Tensor[(3360), float32], Tensor[(10, 5), float32]) */
}

def @func_7203(%var_7201: Tensor[(756), float32]) -> (Tensor[(60), float64], Tensor[(756), float32], Tensor[(756), float32], Tensor[(12, 5), float64], Tensor[(9, 12, 7), float64], Tensor[(3360), bool]) {
  @func_7200(%var_7201) /* ty=(Tensor[(60), float64], Tensor[(756), float32], Tensor[(756), float32], Tensor[(12, 5), float64], Tensor[(9, 12, 7), float64], Tensor[(3360), bool]) */
}

def @func_7028() -> (Tensor[(11, 7, 4), bool], Tensor[(3360), float32], Tensor[(756), float64]) {
  @func_7026() /* ty=(Tensor[(11, 7, 4), bool], Tensor[(3360), float32], Tensor[(756), float64]) */
}

def @func_8324() -> (Tensor[(756), float64], Tensor[(308), float32]) {
  %915 = @func_5771() /* ty=(Tensor[(3360), float32], Tensor[(756), float64]) */;
  %916 = @func_6158() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(60), float64], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), float64]) */;
  %917 = %915.1;
  %918 = %916.0;
  (%917, %918)
}

def @func_1113(%var_1097: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(16, 14, 15), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32]) {
  %919 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %920 = cast(%var_1097, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %921 = %919.1;
  %922 = cast(%921, dtype="float32") /* ty=Tensor[(308), float32] */;
  %923 = reshape(%920, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %924 = reshape(%922, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %925 = @func_676(%923, %924) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
  %926 = cast(%921, dtype="float32") /* ty=Tensor[(308), float32] */;
  %927 = reshape(%926, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %928 = @func_392(%927) /* ty=(Tensor[(11, 7, 4), float32],) */;
  %929 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %930 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %931 = %925.0;
  %932 = %928.0;
  %933 = %929.0;
  %934 = %930.0;
  (%921, %931, %var_1097, %932, %933, %934)
}

def @func_7999() -> Tensor[(11, 7, 4), float32] {
  %935 = @func_1373() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %935.0
}

def @func_7869(%var_7868: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(3360), int32]) {
  %945 = fn (%var_7859: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(3360), int32]) {
    %936 = @func_6751() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
    %937 = @func_5629() /* ty=(Tensor[(3360), float32], Tensor[(308), float32]) */;
    %938 = %937.0;
    %939 = cast(%var_7859, dtype="int32") /* ty=Tensor[(3360), int32] */;
    %940 = shape_of(%938, dtype="int32") /* ty=Tensor[(1), int32] */;
    %941 = cast(%938, dtype="int32") /* ty=Tensor[(3360), int32] */;
    %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?), int32] */;
    %943 = %936.2;
    %944 = left_shift(%941, %942) /* ty=Tensor[(3360), int32] */;
    (%943, %944)
  };
  %945(%var_7868) /* ty=(Tensor[(308), float32], Tensor[(3360), int32]) */
}

def @func_3543() -> Tensor[(308), float32] {
  %947 = fn () -> Tensor[(308), float32] {
    %946 = @func_1830() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32], Tensor[(308), float32]) */;
    %946.2
  };
  %947() /* ty=Tensor[(308), float32] */
}

def @func_2518() -> (Tensor[(308), float32], Tensor[(11, 7, 4), bool]) {
  %948 = @func_2275() /* ty=(Tensor[(308), float32],) */;
  %949 = %948.0;
  %950 = cast(%949, dtype="float32") /* ty=Tensor[(308), float32] */;
  %951 = reshape(%950, newshape=[11, 7, 4]) /* ty=Tensor[(11, 7, 4), float32] */;
  %952 = @func_1222(%951) /* ty=(Tensor[(11, 7, 4), bool],) */;
  %953 = %952.0;
  (%949, %953)
}

def @func_2275() -> (Tensor[(308), float32],) {
  %954 = @func_1905() /* ty=Tensor[(308), float32] */;
  (%954,)
}

def @func_5438(%var_5436: Tensor[(16, 16, 6), float32]) -> Tensor[(16, 16, 6), float64] {
  @func_5435(%var_5436) /* ty=Tensor[(16, 16, 6), float64] */
}

def @func_3160(%var_3153: Tensor[(420), uint16]) -> (Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(420), uint16]) {
  %955 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %956 = cast(%var_3153, dtype="uint16") /* ty=Tensor[(420), uint16] */;
  %957 = cast(%var_3153, dtype="float64") /* ty=Tensor[(420), float64] */;
  %958 = reshape(%956, newshape=[10, 14, 3]) /* ty=Tensor[(10, 14, 3), uint16] */;
  %959 = reshape(%957, newshape=[10, 14, 3]) /* ty=Tensor[(10, 14, 3), float64] */;
  %960 = @func_2786(%958, %959) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(10, 14, 3), float32], Tensor[(10, 14, 3), uint64], Tensor[(11, 7, 4), bool], Tensor[(3360), float64], Tensor[(440), uint64], Tensor[(308), float32], Tensor[(10, 14, 3), int16]) */;
  %961 = %955.0;
  %962 = %960.2;
  (%961, %962, %var_3153)
}

def @func_8408() -> (Tensor[(3360), float32],) {
  %965 = fn () -> (Tensor[(3360), float32],) {
    %963 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
    %964 = %963.0;
    (%964,)
  };
  %965() /* ty=(Tensor[(3360), float32],) */
}

def @func_4782(%var_4763: Tensor[(2, 12, 11), float64]) -> Tensor[(2, 12, 11), float64] {
  %966 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %967 = shape_of(%var_4763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %968 = cast(%var_4763, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%968, %969) /* ty=Tensor[(2, 12, 11), float64] */
}

def @func_1080() -> (Tensor[(308), float32], Tensor[(308), float32]) {
  %970 = @func_984() /* ty=(Tensor[(308), float32],) */;
  %971 = @func_852() /* ty=(Tensor[(11, 10, 1), float32], Tensor[(308), float32], Tensor[(3360), float32], Tensor[(308), float32]) */;
  %972 = %970.0;
  %973 = %971.3;
  (%972, %973)
}

def @func_8326() -> (Tensor[(756), float64], Tensor[(308), float32]) {
  @func_8324() /* ty=(Tensor[(756), float64], Tensor[(308), float32]) */
}

def @func_7341() -> (Tensor[(14, 10, 12), float64],) {
  @func_7339() /* ty=(Tensor[(14, 10, 12), float64],) */
}

def @func_2639(%var_2634: Tensor[(3360), bool]) -> (Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) {
  %974 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
  %975 = @func_2089() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %976 = @func_2200() /* ty=(Tensor[(308), float32], Tensor[(3360), bool]) */;
  %977 = %976.1;
  %978 = cast(%var_2634, dtype="int32") /* ty=Tensor[(3360), int32] */;
  %979 = shape_of(%977, dtype="int32") /* ty=Tensor[(1), int32] */;
  %980 = cast(%977, dtype="int32") /* ty=Tensor[(3360), int32] */;
  %981 = dyn.reshape(%978, %979, newshape=[]) /* ty=Tensor[(?), int32] */;
  %982 = %974.0;
  %983 = %975.0;
  %984 = subtract(%980, %981) /* ty=Tensor[(3360), int32] */;
  (%982, %983, %984)
}

def @func_4795() -> Tensor[(11, 7, 4), float64] {
  %985 = @func_2875() /* ty=(Tensor[(11, 7, 4), float64],) */;
  %985.0
}

def @func_6912() -> (Tensor[(308), float32], Tensor[(600), float64]) {
  %989 = fn () -> (Tensor[(308), float32], Tensor[(600), float64]) {
    %986 = @func_4122() /* ty=(Tensor[(600), float64], Tensor[(308), float32]) */;
    %987 = @func_3873() /* ty=Tensor[(308), float32] */;
    %988 = %986.0;
    (%987, %988)
  };
  %989() /* ty=(Tensor[(308), float32], Tensor[(600), float64]) */
}

def @func_4441() -> (Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32]) {
  @func_4439() /* ty=(Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), bool], Tensor[(308), float32]) */
}

def @func_7252(%var_7250: int8, %var_7251: Tensor[(1, 7, 7), int8]) -> (Tensor[(1, 7, 7), bool], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(3360), float32]) {
  @func_7248(%var_7250, %var_7251) /* ty=(Tensor[(1, 7, 7), bool], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(3360), float32]) */
}

def @func_5395() -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) {
  %990 = @func_1034() /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), float32]) */;
  %991 = @func_2925() /* ty=(Tensor[(3360), float32], Tensor[(3360), float32]) */;
  %992 = %990.0;
  %993 = @func_2977() /* ty=Tensor[(308), float32] */;
  %994 = %991.0;
  (%992, %993, %994)
}

def @func_4005() -> (Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64], Tensor[(3360), bool]) {
  %1005 = fn () -> (Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64], Tensor[(3360), bool]) {
    %995 = @func_2811() /* ty=Tensor[(11, 7, 4), float64] */;
    %996 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 7, 4), float64] */, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
    %997 = shape_of(%995, dtype="int32") /* ty=Tensor[(3), int32] */;
    %998 = cast(%995, dtype="float64") /* ty=Tensor[(11, 7, 4), float64] */;
    %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1000 = cast(meta[relay.Constant][38] /* ty=Tensor[(3360), bool] */, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %1001 = reshape(%1000, newshape=[3360]) /* ty=Tensor[(3360), bool] */;
    %1002 = @func_2639(%1001) /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(3360), int32]) */;
    %1003 = floor_divide(%998, %999) /* ty=Tensor[(11, 7, 4), float64] */;
    %1004 = %1002.1;
    (%1003, %1004, meta[relay.Constant][38] /* ty=Tensor[(3360), bool] */)
  };
  %1005() /* ty=(Tensor[(11, 7, 4), float64], Tensor[(11, 7, 4), float64], Tensor[(3360), bool]) */
}

def @func_1082() -> (Tensor[(308), float32], Tensor[(308), float32]) {
  @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */
}

def @func_3225(%var_3219: Tensor[(11, 7, 4), float32]) -> (Tensor[(3360), bool], Tensor[(3360), float32], Tensor[(11, 7, 4), int8]) {
  %1006 = cast(meta[relay.Constant][39] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %1007 = reshape(%1006, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %1008 = @func_2027(%1007) /* ty=(Tensor[(3360), bool], Tensor[(3360), bool]) */;
  %1009 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
  %1010 = %1009.0;
  %1011 = cast(%var_3219, dtype="int8") /* ty=Tensor[(11, 7, 4), int8] */;
  %1012 = shape_of(%1010, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1013 = cast(%1010, dtype="int8") /* ty=Tensor[(11, 7, 4), int8] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1015 = %1008.0;
  %1016 = left_shift(%1013, %1014) /* ty=Tensor[(11, 7, 4), int8] */;
  (%1015, meta[relay.Constant][39] /* ty=Tensor[(3360), float32] */, %1016)
}

def @func_7118(%var_7117: Tensor[(50), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) {
  %1028 = fn (%var_7114: Tensor[(50), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) {
    %1017 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
    %1018 = @func_6413() /* ty=(Tensor[(3360), float32],) */;
    %1019 = @func_5395() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */;
    %1020 = cast(%var_7114, dtype="float32") /* ty=Tensor[(50), float32] */;
    %1021 = cast(%var_7114, dtype="float32") /* ty=Tensor[(50), float32] */;
    %1022 = reshape(%1020, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), float32] */;
    %1023 = reshape(%1021, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), float32] */;
    %1024 = %1017.0;
    %1025 = %1018.0;
    %1026 = %1019.1;
    %1027 = @func_3287(%1022, %1023) /* ty=Tensor[(5, 2, 5), float32] */;
    (%1024, %1025, %1026, %1027, %var_7114)
  };
  %1028(%var_7117) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(3360), float32], Tensor[(308), float32], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */
}

def @func_1268(%var_1267: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) {
  %1043 = fn (%var_1233: Tensor[(3360), float32]) -> (Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) {
    %1029 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
    %1030 = cast(%var_1233, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %1031 = reshape(%1030, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
    %1032 = @func_1169(%1031) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(11, 7, 4), float32], Tensor[(3360), float64], Tensor[(16, 14, 15), float32]) */;
    %1033 = %1029.1;
    %1034 = cast(%1033, dtype="float32") /* ty=Tensor[(308), float32] */;
    %1035 = reshape(%1034, newshape=[308]) /* ty=Tensor[(308), float32] */;
    %1036 = @func_912(%1035) /* ty=(Tensor[(308), float32], Tensor[(3360), float32], Tensor[(11, 7, 4), float32], Tensor[(308), float32], Tensor[(308), uint32]) */;
    %1037 = %1036.1;
    %1038 = cast(%1037, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %1039 = atanh(%1038) /* ty=Tensor[(3360), float64] */;
    %1040 = cast(%1039, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %1041 = %1032.3;
    %1042 = sqrt(%1040) /* ty=Tensor[(3360), float32] */;
    (%1033, %1041, %var_1233, %1042)
  };
  %1043(%var_1267) /* ty=(Tensor[(308), float32], Tensor[(3360), float64], Tensor[(3360), float32], Tensor[(3360), float32]) */
}

def @func_4217(%var_4215: Tensor[(756), float32]) -> (Tensor[(11, 7, 4), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) {
  @func_4214(%var_4215) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) */
}

def @func_1374() -> (Tensor[(11, 7, 4), float32],) {
  %1048 = fn () -> (Tensor[(11, 7, 4), float32],) {
    %1044 = @func_1327() /* ty=(Tensor[(11, 7, 4), float32],) */;
    %1045 = %1044.0;
    %1046 = cast(%1045, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
    %1047 = asin(%1046) /* ty=Tensor[(11, 7, 4), float32] */;
    (%1047,)
  };
  %1048() /* ty=(Tensor[(11, 7, 4), float32],) */
}

def @func_6845() -> (Tensor[(308), int16], Tensor[(14, 10, 12), float64]) {
  %1049 = @func_4706() /* ty=(Tensor[(308), int16], Tensor[(9, 12, 7), float64], Tensor[(18, 42), float64]) */;
  %1050 = @func_5059() /* ty=(Tensor[(308), int16], Tensor[(14, 10, 12), float64], Tensor[(1680), float64]) */;
  %1051 = %1049.0;
  %1052 = %1050.1;
  (%1051, %1052)
}

def @func_5469(%var_5468: Tensor[(1, 600), float64]) -> (Tensor[(11, 7, 4), float32], Tensor[(15, 10, 4), float32], Tensor[(1, 600), float64]) {
  %1059 = fn (%var_5453: Tensor[(1, 600), float64]) -> (Tensor[(11, 7, 4), float32], Tensor[(15, 10, 4), float32], Tensor[(1, 600), float64]) {
    %1053 = @func_5040() /* ty=(Tensor[(11, 7, 4), float32],) */;
    %1054 = cast(%var_5453, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
    %1055 = reshape(%1054, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), float64] */;
    %1056 = @func_1462(%1055) /* ty=(Tensor[(15, 10, 4), float32],) */;
    %1057 = %1053.0;
    %1058 = %1056.0;
    (%1057, %1058, %var_5453)
  };
  %1059(%var_5468) /* ty=(Tensor[(11, 7, 4), float32], Tensor[(15, 10, 4), float32], Tensor[(1, 600), float64]) */
}

def @func_7026() -> (Tensor[(11, 7, 4), bool], Tensor[(3360), float32], Tensor[(756), float64]) {
  %1060 = @func_5293() /* ty=(Tensor[(11, 7, 4), bool],) */;
  %1061 = @func_2966() /* ty=(Tensor[(3360), float32],) */;
  %1062 = @func_5606() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float64], Tensor[(9, 12, 7), float64], Tensor[(756), float64], Tensor[(11, 7, 4), bool], Tensor[(11, 7, 4), bool]) */;
  %1063 = %1060.0;
  %1064 = %1061.0;
  %1065 = %1062.3;
  (%1063, %1064, %1065)
}

def @func_4369(%var_4368: Tensor[(3360), float32]) -> (Tensor[(3360), float32], Tensor[(308), int8]) {
  %1076 = fn (%var_4353: Tensor[(3360), float32]) -> (Tensor[(3360), float32], Tensor[(308), int8]) {
    %1066 = cast(%var_4353, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %1067 = reshape(%1066, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
    %1068 = @func_2903(%1067) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */;
    %1069 = %1068.0;
    %1070 = @func_3873() /* ty=Tensor[(308), float32] */;
    %1071 = cast(%1070, dtype="int8") /* ty=Tensor[(308), int8] */;
    %1072 = shape_of(%1069, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1073 = cast(%1069, dtype="int8") /* ty=Tensor[(308), int8] */;
    %1074 = dyn.reshape(%1071, %1072, newshape=[]) /* ty=Tensor[(?), int8] */;
    %1075 = bitwise_or(%1073, %1074) /* ty=Tensor[(308), int8] */;
    (%var_4353, %1075)
  };
  %1076(%var_4368) /* ty=(Tensor[(3360), float32], Tensor[(308), int8]) */
}

def @func_4564(%var_4562: Tensor[(12, 15, 16), uint16], %var_4563: Tensor[(12, 15, 16), uint16]) -> (Tensor[(12, 15, 16), bool],) {
  @func_4560(%var_4562, %var_4563) /* ty=(Tensor[(12, 15, 16), bool],) */
}

def @func_2984() -> Tensor[(308), float32] {
  @func_2982() /* ty=Tensor[(308), float32] */
}

def @func_3490() -> Tensor[(11, 7, 4), bool] {
  %1077 = @func_2518() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), bool]) */;
  %1077.1
}

def @func_5930(%var_5905: Tensor[(3360), float32]) -> (Tensor[(50), float32], Tensor[(16, 14, 15), int16]) {
  %1078 = @func_3590() /* ty=(Tensor[(11, 7, 4), float32], Tensor[(11, 7, 4), bool], Tensor[(5, 2, 5), float32], Tensor[(50), float32]) */;
  %1079 = cast(%var_5905, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %1080 = reshape(%1079, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %1081 = @func_5869(%1080) /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), bool], Tensor[(16, 14, 15), float32]) */;
  %1082 = %1081.3;
  %1083 = cast(%var_5905, dtype="int16") /* ty=Tensor[(3360), int16] */;
  %1084 = shape_of(%1082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1085 = cast(%1082, dtype="int16") /* ty=Tensor[(16, 14, 15), int16] */;
  %1086 = dyn.reshape(%1083, %1084, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1087 = %1078.3;
  %1088 = add(%1085, %1086) /* ty=Tensor[(16, 14, 15), int16] */;
  (%1087, %1088)
}

def @func_8378() -> Tensor[(308), float32] {
  %1089 = @func_3358() /* ty=(Tensor[(308), float32],) */;
  %1089.0
}

def @func_7905() -> Tensor[(11, 7, 4), float32] {
  @func_7903() /* ty=Tensor[(11, 7, 4), float32] */
}

def @func_7807(%var_7806: Tensor[(224), float32]) -> (Tensor[(3360), float32], Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(224), float32], Tensor[(308), float32]) {
  %1100 = fn (%var_7765: Tensor[(224), float32]) -> (Tensor[(3360), float32], Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(224), float32], Tensor[(308), float32]) {
    %1090 = @func_4512() /* ty=(Tensor[(3360), float32],) */;
    %1091 = @func_4656() /* ty=(Tensor[(308), float32], Tensor[(11, 7, 4), float32]) */;
    %1092 = cast(%var_7765, dtype="float32") /* ty=Tensor[(224), float32] */;
    %1093 = reshape(%1092, newshape=[2, 16, 7]) /* ty=Tensor[(2, 16, 7), float32] */;
    %1094 = @func_7496(%1093) /* ty=(Tensor[(2, 16, 7), float32], Tensor[(11, 7, 4), bool], Tensor[(3360), float32], Tensor[(308), float32]) */;
    %1095 = @func_5395() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(3360), float32]) */;
    %1096 = %1090.0;
    %1097 = %1091.0;
    %1098 = %1094.1;
    %1099 = %1095.0;
    (%1096, %1097, %1098, %var_7765, %1099)
  };
  %1100(%var_7806) /* ty=(Tensor[(3360), float32], Tensor[(308), float32], Tensor[(11, 7, 4), bool], Tensor[(224), float32], Tensor[(308), float32]) */
}

def @func_6470() -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) {
  %1111 = fn () -> (Tensor[(308), float32], Tensor[(308), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) {
    %1101 = @func_1080() /* ty=(Tensor[(308), float32], Tensor[(308), float32]) */;
    %1102 = @func_984() /* ty=(Tensor[(308), float32],) */;
    %1103 = cast(meta[relay.Constant][40] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %1104 = cast(meta[relay.Constant][40] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %1105 = reshape(%1103, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
    %1106 = reshape(%1104, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
    %1107 = @func_1886(%1105, %1106) /* ty=(Tensor[(14, 6, 9), bool], Tensor[(14, 6, 9), float32]) */;
    %1108 = %1101.1;
    %1109 = %1102.0;
    %1110 = %1107.0;
    (%1108, %1109, %1110, meta[relay.Constant][40] /* ty=Tensor[(756), float32] */)
  };
  %1111() /* ty=(Tensor[(308), float32], Tensor[(308), float32], Tensor[(14, 6, 9), bool], Tensor[(756), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen305/build/output.py:3106: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen305/build/output.py", line 3111, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_asinh_cast_cast_atan_cast_reshape_floor_mod_cast_reshape_right_shift_kernel0(short* __restrict__ T_right_shift, float* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 90) {
    if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1440) {
      T_right_shift[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (((short)asinhf(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))])) >> ((short)(atan(((double)asinhf(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]))) - (floor((atan(((double)asinhf(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]))) / ((double)asinhf(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))])))) * ((double)asinhf(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]))))));
    }
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

