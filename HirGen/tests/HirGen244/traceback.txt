==========mod==========
#[version = "0.0.5"]
def @func_3960() -> Tensor[(2, 5, 8), float32] {
  %0 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %0.0
}

def @func_1554() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %1 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %2 = %1.0;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %4 = reshape(%3, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %5 = @func_948(%4) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %6 = cast(%2, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %7 = %5.3;
  %8 = rsqrt(%6) /* ty=Tensor[(2, 5, 8), float32] */;
  (%7, %8)
}

def @func_7604() -> Tensor[(2, 5, 8), float32] {
  @func_6106() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_3771(%var_3749: Tensor[(3, 13, 9), float64], %var_3764: Tensor[(6, 64), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(384), float64], Tensor[(6, 64), float64], Tensor[(3, 13, 9), float64]) {
  %9 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %10 = cast(%var_3764, dtype="float64") /* ty=Tensor[(6, 64), float64] */;
  %11 = reshape(%10, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %12 = @func_1124(%11) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
  %13 = cast(%var_3749, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
  %14 = atanh(%13) /* ty=Tensor[(3, 13, 9), float64] */;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
  %16 = %9.0;
  %17 = %12.2;
  %18 = cos(%15) /* ty=Tensor[(3, 13, 9), float64] */;
  (%16, %17, %var_3764, %18)
}

def @func_6934() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %19 = @func_4792() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %20 = %19.0;
  %21 = @func_5187() /* ty=Tensor[(2, 5, 8), float32] */;
  (%20, %21)
}

def @func_3045() -> (Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32]) {
  %22 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %23 = %22.0;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 5, 8), float32] */, dtype="int32") /* ty=Tensor[(2, 5, 8), int32] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="int32") /* ty=Tensor[(2, 5, 8), int32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %28 = right_shift(%26, %27) /* ty=Tensor[(2, 5, 8), int32] */;
  %29 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  (%28, %29)
}

def @func_4010() -> Tensor[(2, 5, 8), float32] {
  @func_1450() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_6438() -> (Tensor[(2, 5, 8), float32],) {
  %30 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
  (%30,)
}

def @func_821() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %31 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %32 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %33 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %34 = %31.0;
  %35 = %32.0;
  %36 = %33.0;
  (%34, %35, %36)
}

def @func_1041() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %37 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %38 = @func_821() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %39 = %37.0;
  %40 = %38.1;
  (%39, %40)
}

def @func_2818(%var_2770: Tensor[(4, 14, 14), float32], %var_2771: Tensor[(4, 14, 14), float32], %var_2811: int64) -> (Tensor[(2, 5, 8), float32], Tensor[(4, 14, 14), bool], Tensor[(7, 9, 6), int16], Tensor[(125, 2), float64], int64, Tensor[(128), int64], Tensor[(2, 5, 8), float32]) {
  %41 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %42 = cast(%var_2771, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
  %43 = shape_of(%var_2770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%var_2770, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %46 = power(%44, %45) /* ty=Tensor[(4, 14, 14), float32] */;
  %47 = cast(%var_2771, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(125, 2), float64] */, dtype="float64") /* ty=Tensor[(125, 2), float64] */;
  %52 = cast(%var_2811, dtype="int64") /* ty=int64 */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %54 = reshape(%51, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), float64] */;
  %55 = reshape(%52, newshape=[]) /* ty=int64 */;
  %56 = reshape(%53, newshape=[128]) /* ty=Tensor[(128), int64] */;
  %57 = @func_395(%54, %55, %56) /* ty=(Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(7, 9, 6), float32], int64, Tensor[(128), int64], Tensor[(7, 9, 6), int16], Tensor[(10, 5, 5), float64], Tensor[(7, 9, 6), bool]) */;
  %58 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %59 = %41.0;
  %60 = logical_or(%49, %50) /* ty=Tensor[(4, 14, 14), bool] */;
  %61 = %57.5;
  %62 = %58.1;
  (%59, %60, %61, meta[relay.Constant][1] /* ty=Tensor[(125, 2), float64] */, %var_2811, meta[relay.Constant][2] /* ty=Tensor[(128), int64] */, %62)
}

def @func_1124(%var_1116: Tensor[(384), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) {
  %63 = cast(%var_1116, dtype="float64") /* ty=Tensor[(384), float64] */;
  %64 = reshape(%63, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %65 = @func_1093(%64) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */;
  %66 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
  %67 = %65.1;
  (%66, %67, %var_1116)
}

def @func_7254(%var_7233: Tensor[(7, 9, 6), float32]) -> (Tensor[(7, 9, 6), int32], Tensor[(2, 5, 8), float32]) {
  %68 = cast(%var_7233, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
  %69 = sqrt(%68) /* ty=Tensor[(7, 9, 6), float32] */;
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 9, 6), float32] */, dtype="int32") /* ty=Tensor[(7, 9, 6), int32] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="int32") /* ty=Tensor[(7, 9, 6), int32] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %74 = @func_6243() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %75 = left_shift(%72, %73) /* ty=Tensor[(7, 9, 6), int32] */;
  %76 = %74.1;
  (%75, %76)
}

def @func_395(%var_340: Tensor[(10, 5, 5), float64], %var_364: int64, %var_365: Tensor[(128), int64]) -> (Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(7, 9, 6), float32], int64, Tensor[(128), int64], Tensor[(7, 9, 6), int16], Tensor[(10, 5, 5), float64], Tensor[(7, 9, 6), bool]) {
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %78 = reshape(%77, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %79 = @func_144(%78) /* ty=(Tensor[(7, 9, 6), float32],) */;
  %80 = %79.0;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
  %82 = reshape(%81, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %83 = @func_144(%82) /* ty=(Tensor[(7, 9, 6), float32],) */;
  %84 = cast(%var_364, dtype="int64") /* ty=int64 */;
  %85 = cast(%var_365, dtype="int64") /* ty=Tensor[(128), int64] */;
  %86 = cast(meta[relay.Constant][4] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %88 = reshape(%84, newshape=[]) /* ty=int64 */;
  %89 = reshape(%85, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), int64] */;
  %90 = reshape(%86, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %91 = reshape(%87, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %92 = @func_293(%88, %89, %90, %91) /* ty=(Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) */;
  %93 = %92.1;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
  %95 = reshape(%94, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %96 = @func_144(%95) /* ty=(Tensor[(7, 9, 6), float32],) */;
  %97 = %96.0;
  %98 = cast(%93, dtype="int16") /* ty=Tensor[(7, 9, 6), int16] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="int16") /* ty=Tensor[(7, 9, 6), int16] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %102 = cast(%var_340, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
  %103 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(10, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %106 = power(%104, %105) /* ty=Tensor[(10, 5, 5), float64] */;
  %107 = cast(%106, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
  %108 = cast(%var_364, dtype="int64") /* ty=int64 */;
  %109 = cast(%var_365, dtype="int64") /* ty=Tensor[(128), int64] */;
  %110 = cast(%97, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
  %111 = %83.0;
  %112 = cast(%111, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
  %113 = reshape(%108, newshape=[]) /* ty=int64 */;
  %114 = reshape(%109, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), int64] */;
  %115 = reshape(%110, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %116 = reshape(%112, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %117 = @func_293(%113, %114, %115, %116) /* ty=(Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) */;
  %118 = logical_xor(%100, %101) /* ty=Tensor[(7, 9, 6), int16] */;
  %119 = sin(%107) /* ty=Tensor[(10, 5, 5), float64] */;
  %120 = %117.4;
  (%80, meta[relay.Constant][4] /* ty=Tensor[(378), float32] */, %111, %var_364, %var_365, %118, %119, %120)
}

def @func_144(%var_131: Tensor[(7, 9, 6), float32]) -> (Tensor[(7, 9, 6), float32],) {
  %121 = cast(%var_131, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
  %122 = acosh(%121) /* ty=Tensor[(7, 9, 6), float32] */;
  (%122,)
}

def @func_948(%var_919: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %123 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %124 = @func_821() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %125 = %124.1;
  %126 = cast(%var_919, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%125, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %130 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %132 = %123.0;
  %133 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %134 = floor_divide(%128, %129) /* ty=Tensor[(2, 5, 8), float64] */;
  %135 = log2(%131) /* ty=Tensor[(2, 5, 8), float32] */;
  %136 = @func_792() /* ty=Tensor[(2, 5, 8), float32] */;
  (%132, %133, %134, %135, %136)
}

def @func_1830() -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %137 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %138 = @func_1659() /* ty=Tensor[(2, 5, 8), float64] */;
  %139 = %137.0;
  %140 = @func_1751() /* ty=Tensor[(2, 5, 8), float32] */;
  (%138, %139, %140)
}

def @func_8219() -> Tensor[(2, 5, 8), float32] {
  @func_3960() /* ty=Tensor[(2, 5, 8), float32] */
}

def @main() -> Tensor[(5, 9, 8), int16] {
  %141 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 9, 8), int16] */, dtype="int16") /* ty=Tensor[(5, 9, 8), int16] */;
  %142 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(5, 9, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 9, 8), int16] */, dtype="int16") /* ty=Tensor[(5, 9, 8), int16] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%143, %144) /* ty=Tensor[(5, 9, 8), int16] */
}

def @func_3478() -> Tensor[(2, 5, 8), float32] {
  %145 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %145.1
}

def @func_5151() -> (Tensor[(2, 5, 8), float32],) {
  %146 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %147 = %146.0;
  (%147,)
}

def @func_5937() -> (Tensor[(384), float64], Tensor[(2, 5, 8), float32]) {
  %148 = @func_1346() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), bool]) */;
  %149 = %148.2;
  %150 = @func_5187() /* ty=Tensor[(2, 5, 8), float32] */;
  (%149, %150)
}

def @func_8190(%var_8159: uint8, %var_8160: Tensor[(11, 8, 4), uint8]) -> Tensor[(11, 8, 4), uint32] {
  %151 = cast(%var_8159, dtype="uint8") /* ty=uint8 */;
  %152 = cast(%var_8160, dtype="uint8") /* ty=Tensor[(11, 8, 4), uint8] */;
  %153 = left_shift(%151, %152) /* ty=Tensor[(11, 8, 4), uint8] */;
  %154 = cast(%var_8159, dtype="uint32") /* ty=uint32 */;
  %155 = cast(%153, dtype="uint32") /* ty=Tensor[(11, 8, 4), uint32] */;
  add(%154, %155) /* ty=Tensor[(11, 8, 4), uint32] */
}

def @func_5525() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %156 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %157 = @func_1892() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %158 = %156.0;
  %159 = %157.0;
  (%158, %159)
}

def @func_7587(%var_7577: Tensor[(96), uint8], %var_7578: Tensor[(3072), float32]) -> (Tensor[(2, 5, 8), float64], Tensor[(3072), float64], Tensor[(96), uint8], Tensor[(3072), float32], Tensor[(275, 2), float32]) {
  %160 = @func_3091() /* ty=(Tensor[(2, 5, 8), float64],) */;
  %161 = cast(%var_7577, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %162 = cast(%var_7578, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %163 = cast(meta[relay.Constant][8] /* ty=Tensor[(275, 2), float32] */, dtype="float32") /* ty=Tensor[(275, 2), float32] */;
  %164 = reshape(%161, newshape=[96]) /* ty=Tensor[(96), uint8] */;
  %165 = reshape(%162, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %166 = reshape(%163, newshape=[550]) /* ty=Tensor[(550), float32] */;
  %167 = @func_3406(%164, %165, %166) /* ty=(Tensor[(4, 7, 16), float64], Tensor[(448), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(7, 9, 6), float32], Tensor[(6, 64), float64], Tensor[(550), float32], Tensor[(3072), float64]) */;
  %168 = %160.0;
  %169 = %167.9;
  (%168, %169, %var_7577, %var_7578, meta[relay.Constant][8] /* ty=Tensor[(275, 2), float32] */)
}

def @func_2751(%var_2739: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %170 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %171 = @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %172 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
  %173 = cast(%var_2739, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %177 = %170.1;
  %178 = @func_2130() /* ty=Tensor[(2, 5, 8), bool] */;
  %179 = %171.0;
  %180 = mod(%175, %176) /* ty=Tensor[(2, 5, 8), float64] */;
  (%177, %178, %179, %180)
}

def @func_5927() -> (Tensor[(2, 5, 8), int32],) {
  %181 = @func_3045() /* ty=(Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32]) */;
  %182 = %181.0;
  (%182,)
}

def @func_2017() -> (Tensor[(2, 5, 8), float32],) {
  %183 = @func_1609() /* ty=Tensor[(2, 5, 8), float32] */;
  (%183,)
}

def @func_4304() -> Tensor[(2, 5, 8), float32] {
  @func_1609() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_4610() -> (Tensor[(2, 5, 8), float32],) {
  %184 = @func_1721() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float32]) */;
  %185 = %184.0;
  (%185,)
}

def @func_1751() -> Tensor[(2, 5, 8), float32] {
  @func_1070() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_6396(%var_6309: bool, %var_6386: Tensor[(3, 10, 14), float32]) -> (Tensor[(3, 10, 14), bool], Tensor[(3, 10, 14), bool], int64, Tensor[(250), float64], Tensor[(128), int64], Tensor[(3, 10, 14), bool]) {
  %186 = cast(%var_6309, dtype="bool") /* ty=bool */;
  %187 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 10, 14), bool] */, dtype="bool") /* ty=Tensor[(3, 10, 14), bool] */;
  %188 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 10, 14), bool] */, dtype="int64") /* ty=Tensor[(3, 10, 14), int64] */;
  %189 = cast(%var_6309, dtype="int64") /* ty=int64 */;
  %190 = right_shift(%188, %189) /* ty=Tensor[(3, 10, 14), int64] */;
  %191 = cast(%var_6309, dtype="float64") /* ty=float64 */;
  %192 = cast(%190, dtype="float64") /* ty=Tensor[(3, 10, 14), float64] */;
  %193 = floor_mod(%191, %192) /* ty=Tensor[(3, 10, 14), float64] */;
  %194 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 10, 14), bool] */, dtype="bool") /* ty=Tensor[(3, 10, 14), bool] */;
  %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%193, dtype="bool") /* ty=Tensor[(3, 10, 14), bool] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %198 = cast(meta[relay.Constant][10] /* ty=Tensor[(250), float64] */, dtype="float64") /* ty=Tensor[(250), float64] */;
  %199 = cast(%var_6309, dtype="int64") /* ty=int64 */;
  %200 = cast(meta[relay.Constant][11] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %201 = reshape(%198, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), float64] */;
  %202 = reshape(%199, newshape=[]) /* ty=int64 */;
  %203 = reshape(%200, newshape=[128]) /* ty=Tensor[(128), int64] */;
  %204 = @func_395(%201, %202, %203) /* ty=(Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(7, 9, 6), float32], int64, Tensor[(128), int64], Tensor[(7, 9, 6), int16], Tensor[(10, 5, 5), float64], Tensor[(7, 9, 6), bool]) */;
  %205 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 10, 14), bool] */, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
  %206 = asin(%205) /* ty=Tensor[(3, 10, 14), float32] */;
  %207 = cast(%var_6386, dtype="bool") /* ty=Tensor[(3, 10, 14), bool] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%206, dtype="bool") /* ty=Tensor[(3, 10, 14), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = logical_and(%186, %187) /* ty=Tensor[(3, 10, 14), bool] */;
  %212 = equal(%196, %197) /* ty=Tensor[(3, 10, 14), bool] */;
  %213 = %204.3;
  %214 = less(%209, %210) /* ty=Tensor[(3, 10, 14), bool] */;
  (%211, %212, %213, meta[relay.Constant][10] /* ty=Tensor[(250), float64] */, meta[relay.Constant][11] /* ty=Tensor[(128), int64] */, %214)
}

def @func_3429() -> (Tensor[(2, 5, 8), float32],) {
  %215 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %216 = %215.0;
  (%216,)
}

def @func_5256() -> (Tensor[(2, 5, 8), float32],) {
  %217 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %218 = %217.0;
  (%218,)
}

def @func_7415() -> (Tensor[(2, 5, 8), float32], uint32, uint32) {
  %219 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %220 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %221 = reshape(%220, newshape=[]) /* ty=uint32 */;
  %222 = @func_5850(%221) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32], Tensor[(2, 5, 8), float32]) */;
  %223 = %219.0;
  %224 = %222.2;
  (%223, %224, meta[relay.Constant][12] /* ty=uint32 */)
}

def @func_5750(%var_5744: Tensor[(48, 8), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), uint64], Tensor[(2, 5, 8), float64], Tensor[(48, 8), float64]) {
  %225 = @func_5117() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %226 = %225.1;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %228 = reshape(%227, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %229 = @func_2885(%228) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), uint64]) */;
  %230 = cast(%226, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %231 = cast(meta[relay.Constant][13] /* ty=Tensor[(48, 8), float64] */, dtype="float64") /* ty=Tensor[(48, 8), float64] */;
  %232 = reshape(%230, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %233 = reshape(%231, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %234 = @func_4729(%232, %233) /* ty=(Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
  %235 = cast(%var_5744, dtype="float64") /* ty=Tensor[(48, 8), float64] */;
  %236 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(48, 8), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %237 = cast(meta[relay.Constant][13] /* ty=Tensor[(48, 8), float64] */, dtype="float64") /* ty=Tensor[(48, 8), float64] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %239 = %229.1;
  %240 = %234.2;
  %241 = floor_divide(%237, %238) /* ty=Tensor[(48, 8), float64] */;
  (%226, %239, %240, %241)
}

def @func_2885(%var_2869: Tensor[(2, 5, 8), float64]) -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), uint64]) {
  %242 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %243 = cast(%var_2869, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%242, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %247 = cast(%242, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %248 = cos(%247) /* ty=Tensor[(2, 5, 8), float64] */;
  %249 = cast(%var_2869, dtype="uint64") /* ty=Tensor[(2, 5, 8), uint64] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="uint64") /* ty=Tensor[(2, 5, 8), uint64] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %253 = minimum(%245, %246) /* ty=Tensor[(2, 5, 8), float64] */;
  %254 = multiply(%251, %252) /* ty=Tensor[(2, 5, 8), uint64] */;
  (%253, %254)
}

def @func_2599(%var_2595: Tensor[(384), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) {
  %255 = cast(%var_2595, dtype="float64") /* ty=Tensor[(384), float64] */;
  %256 = reshape(%255, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %257 = @func_1124(%256) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
  %258 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %259 = %257.1;
  (%258, %259, %var_2595)
}

def @func_747() -> Tensor[(2, 5, 8), float64] {
  %260 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  sinh(%261) /* ty=Tensor[(2, 5, 8), float64] */
}

def @func_1242(%var_1235: Tensor[(2, 5, 8), float32]) -> Tensor[(2, 5, 8), bool] {
  %262 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %263 = cast(%var_1235, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%265, %266) /* ty=Tensor[(2, 5, 8), bool] */
}

def @func_5994() -> (Tensor[(1350), float64],) {
  %267 = @func_4281() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(9, 10, 15), float64], Tensor[(1350), float64]) */;
  %268 = %267.2;
  (%268,)
}

def @func_4729(%var_4685: Tensor[(2, 5, 8), float32], %var_4727: Tensor[(384), float64]) -> (Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) {
  %269 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %270 = %269.0;
  %271 = cast(%var_4685, dtype="int64") /* ty=Tensor[(2, 5, 8), int64] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="int64") /* ty=Tensor[(2, 5, 8), int64] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %275 = cast(%var_4727, dtype="float64") /* ty=Tensor[(384), float64] */;
  %276 = reshape(%275, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %277 = @func_1124(%276) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
  %278 = bitwise_and(%273, %274) /* ty=Tensor[(2, 5, 8), int64] */;
  %279 = @func_1751() /* ty=Tensor[(2, 5, 8), float32] */;
  %280 = %277.1;
  (%278, %279, %280, %var_4727)
}

def @func_3406(%var_3379: Tensor[(96), uint8], %var_3391: Tensor[(3072), float32], %var_3393: Tensor[(550), float32]) -> (Tensor[(4, 7, 16), float64], Tensor[(448), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(7, 9, 6), float32], Tensor[(6, 64), float64], Tensor[(550), float32], Tensor[(3072), float64]) {
  %281 = cast(meta[relay.Constant][14] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %282 = reshape(%281, newshape=[4, 7, 16]) /* ty=Tensor[(4, 7, 16), float64] */;
  %283 = @func_1319(%282) /* ty=(Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), bool]) */;
  %284 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %285 = %284.0;
  %286 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %287 = %286.0;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %289 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%285, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %292 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %293 = cast(%var_3379, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %294 = reshape(%293, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), uint8] */;
  %295 = cast(%var_3391, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %296 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 64), float64] */, dtype="float64") /* ty=Tensor[(6, 64), float64] */;
  %297 = cast(%var_3393, dtype="float32") /* ty=Tensor[(550), float32] */;
  %298 = reshape(%295, newshape=[16, 12, 16]) /* ty=Tensor[(16, 12, 16), float32] */;
  %299 = reshape(%296, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %300 = reshape(%297, newshape=[1, 550]) /* ty=Tensor[(1, 550), float32] */;
  %301 = @func_2938(%298, %299, %300) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(5, 10, 11), uint64], Tensor[(1, 550), float32], Tensor[(16, 12, 16), uint8], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float32], Tensor[(378), float32]) */;
  %302 = cast(meta[relay.Constant][16] /* ty=Tensor[(3072), float32] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %303 = shape_of(%var_3391, dtype="int32") /* ty=Tensor[(1), int32] */;
  %304 = cast(%var_3391, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?), float64] */;
  %306 = %283.0;
  %307 = floor_mod(%290, %291) /* ty=Tensor[(2, 5, 8), float64] */;
  %308 = %292.0;
  %309 = @func_2832(%294) /* ty=Tensor[(4, 12, 2), bool] */;
  %310 = %301.8;
  %311 = divide(%304, %305) /* ty=Tensor[(3072), float64] */;
  (%306, meta[relay.Constant][14] /* ty=Tensor[(448), float64] */, %307, %308, %309, %var_3379, %310, meta[relay.Constant][15] /* ty=Tensor[(6, 64), float64] */, %var_3393, %311)
}

def @func_7650(%var_7637: Tensor[(8, 4, 15), int32]) -> (Tensor[(8, 4, 15), bool], Tensor[(8, 4, 15), bool]) {
  %312 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 4, 15), int32] */, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %313 = shape_of(%var_7637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_7637, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %316 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 4, 15), int32] */, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %317 = shape_of(%var_7637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%var_7637, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = less_equal(%314, %315) /* ty=Tensor[(8, 4, 15), bool] */;
  %321 = greater_equal(%318, %319) /* ty=Tensor[(8, 4, 15), bool] */;
  (%320, %321)
}

def @func_8091() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %322 = @func_1892() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %323 = @func_5374() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %324 = @func_5432() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %325 = %322.1;
  %326 = %323.0;
  %327 = %324.0;
  (%325, %326, %327)
}

def @func_3842() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %328 = @func_2485() /* ty=(Tensor[(2, 5, 8), float64],) */;
  %329 = @func_2280() /* ty=Tensor[(2, 5, 8), float32] */;
  %330 = %328.0;
  (%329, %330)
}

def @func_606() -> (Tensor[(2, 5, 8), float32],) {
  %331 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  (%331,)
}

def @func_5217() -> (Tensor[(1, 22), float64],) {
  %332 = @func_4829() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(1, 22), float64]) */;
  %333 = %332.2;
  (%333,)
}

def @func_3599() -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %334 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %336 = cast(meta[relay.Constant][18] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %337 = reshape(%336, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %338 = @func_1093(%337) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */;
  %339 = cast(meta[relay.Constant][18] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %340 = reshape(%339, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %341 = @func_1093(%340) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */;
  %342 = @func_3045() /* ty=(Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32]) */;
  %343 = @func_2365() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %344 = acos(%335) /* ty=Tensor[(2, 5, 8), float64] */;
  %345 = %338.1;
  %346 = %341.1;
  %347 = %342.0;
  %348 = %343.0;
  %349 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  (%344, %345, meta[relay.Constant][18] /* ty=Tensor[(384), float64] */, %346, %347, %348, %349)
}

def @func_2130() -> Tensor[(2, 5, 8), bool] {
  %350 = @func_792() /* ty=Tensor[(2, 5, 8), float32] */;
  %351 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 5, 8), float32] */, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%353, %354) /* ty=Tensor[(2, 5, 8), bool] */
}

def @func_2938(%var_2890: Tensor[(16, 12, 16), float32], %var_2899: Tensor[(384), float64], %var_2920: Tensor[(1, 550), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(5, 10, 11), uint64], Tensor[(1, 550), float32], Tensor[(16, 12, 16), uint8], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float32], Tensor[(378), float32]) {
  %355 = @func_821() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %356 = cast(%var_2899, dtype="float64") /* ty=Tensor[(384), float64] */;
  %357 = reshape(%356, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %358 = @func_2599(%357) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
  %359 = cast(%var_2920, dtype="float32") /* ty=Tensor[(1, 550), float32] */;
  %360 = cast(%var_2920, dtype="float32") /* ty=Tensor[(1, 550), float32] */;
  %361 = reshape(%359, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %362 = reshape(%360, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %363 = cast(%var_2890, dtype="float32") /* ty=Tensor[(16, 12, 16), float32] */;
  %364 = sigmoid(%363) /* ty=Tensor[(16, 12, 16), float32] */;
  %365 = cast(%var_2890, dtype="uint8") /* ty=Tensor[(16, 12, 16), uint8] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="uint8") /* ty=Tensor[(16, 12, 16), uint8] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %369 = @func_1169() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %370 = cast(meta[relay.Constant][20] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %371 = reshape(%370, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %372 = @func_144(%371) /* ty=(Tensor[(7, 9, 6), float32],) */;
  %373 = @func_792() /* ty=Tensor[(2, 5, 8), float32] */;
  %374 = %355.1;
  %375 = %358.1;
  %376 = @func_1791(%361, %362) /* ty=Tensor[(5, 10, 11), uint64] */;
  %377 = left_shift(%367, %368) /* ty=Tensor[(16, 12, 16), uint8] */;
  %378 = %369.0;
  %379 = %372.0;
  (%373, %374, %375, %var_2899, %376, %var_2920, %377, %378, %379, meta[relay.Constant][20] /* ty=Tensor[(378), float32] */)
}

def @func_510() -> (Tensor[(2, 5, 8), float32],) {
  %380 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 5, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %381 = tan(%380) /* ty=Tensor[(2, 5, 8), float32] */;
  (%381,)
}

def @func_5865() -> Tensor[(2, 5, 8), float32] {
  %382 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %382.0
}

def @func_8300() -> (Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64]) {
  %383 = @func_7816() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), int64], Tensor[(384), float64]) */;
  %384 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %385 = @func_1721() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float32]) */;
  %386 = %383.2;
  %387 = %384.0;
  %388 = %385.1;
  (%386, %387, %388)
}

def @func_4430(%var_4413: int64) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(378), float32], Tensor[(550), float32], Tensor[(96), uint8], Tensor[(2, 1536), float32], Tensor[(550), float32], Tensor[(5, 7, 14), uint8], Tensor[(2, 5, 8), float32]) {
  %389 = @func_3045() /* ty=(Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32]) */;
  %390 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %391 = cast(%var_4413, dtype="int64") /* ty=int64 */;
  %392 = cast(meta[relay.Constant][22] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %393 = cast(meta[relay.Constant][23] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %394 = cast(meta[relay.Constant][23] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %395 = reshape(%391, newshape=[]) /* ty=int64 */;
  %396 = reshape(%392, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), int64] */;
  %397 = reshape(%393, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %398 = reshape(%394, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %399 = @func_293(%395, %396, %397, %398) /* ty=(Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) */;
  %400 = cast(meta[relay.Constant][24] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %401 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 1536), float32] */, dtype="float32") /* ty=Tensor[(2, 1536), float32] */;
  %402 = cast(meta[relay.Constant][26] /* ty=Tensor[(550), float32] */, dtype="float32") /* ty=Tensor[(550), float32] */;
  %403 = reshape(%400, newshape=[96]) /* ty=Tensor[(96), uint8] */;
  %404 = reshape(%401, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %405 = reshape(%402, newshape=[550]) /* ty=Tensor[(550), float32] */;
  %406 = @func_3406(%403, %404, %405) /* ty=(Tensor[(4, 7, 16), float64], Tensor[(448), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(7, 9, 6), float32], Tensor[(6, 64), float64], Tensor[(550), float32], Tensor[(3072), float64]) */;
  %407 = cast(%var_4413, dtype="uint8") /* ty=uint8 */;
  %408 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 7, 14), int64] */, dtype="uint8") /* ty=Tensor[(5, 7, 14), uint8] */;
  %409 = %389.1;
  %410 = %390.0;
  %411 = %399.2;
  %412 = %406.8;
  %413 = logical_xor(%407, %408) /* ty=Tensor[(5, 7, 14), uint8] */;
  %414 = @func_1632() /* ty=Tensor[(2, 5, 8), float32] */;
  (%409, %410, %411, meta[relay.Constant][22] /* ty=Tensor[(128), int64] */, meta[relay.Constant][23] /* ty=Tensor[(378), float32] */, %412, meta[relay.Constant][24] /* ty=Tensor[(96), uint8] */, meta[relay.Constant][25] /* ty=Tensor[(2, 1536), float32] */, meta[relay.Constant][26] /* ty=Tensor[(550), float32] */, %413, %414)
}

def @func_1512() -> (Tensor[(2, 5, 8), float32],) {
  %415 = @func_1169() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %416 = %415.0;
  (%416,)
}

def @func_1450() -> Tensor[(2, 5, 8), float32] {
  %417 = @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %417.0
}

def @func_1659() -> Tensor[(2, 5, 8), float64] {
  @func_747() /* ty=Tensor[(2, 5, 8), float64] */
}

def @func_5850(%var_5843: uint32) -> (Tensor[(2, 5, 8), float64], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32], Tensor[(2, 5, 8), float32]) {
  %418 = @func_5374() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %419 = cast(%var_5843, dtype="uint32") /* ty=uint32 */;
  %420 = cast(meta[relay.Constant][28] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %421 = reshape(%419, newshape=[]) /* ty=uint32 */;
  %422 = reshape(%420, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), uint32] */;
  %423 = @func_3509(%421, %422) /* ty=(Tensor[(8, 6, 1), bool], Tensor[(2, 5, 8), float32]) */;
  %424 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %425 = %418.1;
  %426 = %423.0;
  %427 = %424.0;
  (%425, %426, %var_5843, meta[relay.Constant][28] /* ty=Tensor[(48), uint32] */, %427)
}

def @func_7527(%var_7498: Tensor[(12, 22), float64]) -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(12, 22), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %428 = @func_5927() /* ty=(Tensor[(2, 5, 8), int32],) */;
  %429 = @func_6763() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(1, 22), float64]) */;
  %430 = %429.1;
  %431 = cast(%430, dtype="int32") /* ty=Tensor[(1, 22), int32] */;
  %432 = cast(%var_7498, dtype="int32") /* ty=Tensor[(12, 22), int32] */;
  %433 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %434 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %435 = %428.0;
  %436 = @func_1632() /* ty=Tensor[(2, 5, 8), float32] */;
  %437 = bitwise_and(%431, %432) /* ty=Tensor[(12, 22), int32] */;
  %438 = %433.0;
  %439 = @func_1751() /* ty=Tensor[(2, 5, 8), float32] */;
  (%434, %435, %436, %437, %438, %439)
}

def @func_3990() -> (Tensor[(2, 5, 8), float32],) {
  %440 = @func_3842() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %441 = %440.0;
  (%441,)
}

def @func_6675(%var_6634: Tensor[(16, 4, 3), int64], %var_6635: Tensor[(16, 4, 3), int64]) -> (Tensor[(16, 4, 3), int64], Tensor[(2, 5, 8), float32], Tensor[(80), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %442 = cast(%var_6635, dtype="int64") /* ty=Tensor[(16, 4, 3), int64] */;
  %443 = shape_of(%var_6634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%var_6634, dtype="int64") /* ty=Tensor[(16, 4, 3), int64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %446 = cast(meta[relay.Constant][29] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %447 = reshape(%446, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %448 = @func_2751(%447) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %449 = @func_5525() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %450 = @func_4993() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %451 = bitwise_xor(%444, %445) /* ty=Tensor[(16, 4, 3), int64] */;
  %452 = %448.2;
  %453 = %449.0;
  %454 = %450.0;
  (%451, %452, meta[relay.Constant][29] /* ty=Tensor[(80), float32] */, %453, %454)
}

def @func_5374() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %455 = @func_4993() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %456 = @func_3599() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %457 = %455.0;
  %458 = %456.3;
  (%457, %458)
}

def @func_2048() -> (Tensor[(4, 10, 10), float32],) {
  %459 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 10), float32] */;
  %460 = cos(%459) /* ty=Tensor[(4, 10, 10), float32] */;
  (%460,)
}

def @func_2994() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %461 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %462 = %461.1;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %464 = sqrt(%463) /* ty=Tensor[(2, 5, 8), float32] */;
  %465 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
  (%464, %465)
}

def @func_6763() -> (Tensor[(2, 5, 8), float32], Tensor[(1, 22), float64]) {
  %466 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %467 = @func_4829() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(1, 22), float64]) */;
  %468 = %466.2;
  %469 = %467.2;
  (%468, %469)
}

def @func_6685() -> (Tensor[(2, 5, 8), float32],) {
  %470 = @func_821() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %471 = %470.1;
  (%471,)
}

def @func_587() -> Tensor[(2, 5, 8), float32] {
  %472 = @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %472.0
}

def @func_6498(%var_6462: Tensor[(9, 12, 16), int64]) -> (Tensor[(9, 12, 16), bool], Tensor[(2, 5, 8), float32]) {
  %473 = cast(%var_6462, dtype="bool") /* ty=Tensor[(9, 12, 16), bool] */;
  %474 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(9, 12, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 12, 16), int64] */, dtype="bool") /* ty=Tensor[(9, 12, 16), bool] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %477 = less_equal(%475, %476) /* ty=Tensor[(9, 12, 16), bool] */;
  %478 = @func_4010() /* ty=Tensor[(2, 5, 8), float32] */;
  (%477, %478)
}

def @func_5402() -> (Tensor[(2, 5, 8), float32],) {
  %479 = @func_1721() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float32]) */;
  %480 = %479.0;
  (%480,)
}

def @func_1319(%var_1281: Tensor[(4, 7, 16), float64]) -> (Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), bool]) {
  %481 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %482 = sigmoid(%481) /* ty=Tensor[(4, 7, 16), float64] */;
  %483 = cast(%var_1281, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %487 = floor_divide(%485, %486) /* ty=Tensor[(4, 7, 16), float64] */;
  %488 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %489 = acosh(%488) /* ty=Tensor[(4, 7, 16), float64] */;
  %490 = cast(%489, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %491 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%487, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %494 = cast(%482, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %495 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%489, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %498 = mod(%492, %493) /* ty=Tensor[(4, 7, 16), float64] */;
  %499 = logical_and(%496, %497) /* ty=Tensor[(4, 7, 16), bool] */;
  (%498, %499)
}

def @func_4553(%var_4528: Tensor[(8, 11, 12), int64], %var_4529: Tensor[(8, 11, 12), int64], %var_4548: Tensor[(8, 11, 12), float32]) -> (Tensor[(8, 11, 12), int64], Tensor[(8, 11, 12), uint8]) {
  %500 = cast(%var_4529, dtype="int64") /* ty=Tensor[(8, 11, 12), int64] */;
  %501 = shape_of(%var_4528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%var_4528, dtype="int64") /* ty=Tensor[(8, 11, 12), int64] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %504 = cast(%var_4529, dtype="float32") /* ty=Tensor[(8, 11, 12), float32] */;
  %505 = sinh(%504) /* ty=Tensor[(8, 11, 12), float32] */;
  %506 = cast(%var_4548, dtype="uint8") /* ty=Tensor[(8, 11, 12), uint8] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%505, dtype="uint8") /* ty=Tensor[(8, 11, 12), uint8] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %510 = subtract(%502, %503) /* ty=Tensor[(8, 11, 12), int64] */;
  %511 = add(%508, %509) /* ty=Tensor[(8, 11, 12), uint8] */;
  (%510, %511)
}

def @func_5687() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float64], Tensor[(1, 22), float64], Tensor[(2, 5, 8), float32]) {
  %512 = @func_4610() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %513 = @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %514 = @func_3161() /* ty=(Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(2, 5, 8), bool]) */;
  %515 = %514.0;
  %516 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %520 = @func_3889() /* ty=(Tensor[(2, 5, 8), float64],) */;
  %521 = @func_5300() /* ty=(Tensor[(1, 22), float64],) */;
  %522 = @func_2994() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %523 = %512.0;
  %524 = %513.0;
  %525 = greater(%518, %519) /* ty=Tensor[(7, 9, 6), bool] */;
  %526 = %520.0;
  %527 = %521.0;
  %528 = %522.1;
  (%523, %524, %525, %526, %527, %528)
}

def @func_5463(%var_5441: uint32, %var_5442: Tensor[(14, 7, 2), uint32]) -> (Tensor[(14, 7, 2), uint32], Tensor[(2, 5, 8), float32]) {
  %529 = cast(%var_5441, dtype="uint32") /* ty=uint32 */;
  %530 = cast(%var_5442, dtype="uint32") /* ty=Tensor[(14, 7, 2), uint32] */;
  %531 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %532 = multiply(%529, %530) /* ty=Tensor[(14, 7, 2), uint32] */;
  %533 = %531.0;
  (%532, %533)
}

def @func_6106() -> Tensor[(2, 5, 8), float32] {
  @func_1632() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_4454(%var_4435: Tensor[(6, 11, 7), float32], %var_4436: Tensor[(6, 11, 7), float32]) -> (Tensor[(6, 11, 7), float32],) {
  %534 = cast(%var_4436, dtype="float32") /* ty=Tensor[(6, 11, 7), float32] */;
  %535 = shape_of(%var_4435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%var_4435, dtype="float32") /* ty=Tensor[(6, 11, 7), float32] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %538 = minimum(%536, %537) /* ty=Tensor[(6, 11, 7), float32] */;
  (%538,)
}

def @func_7937() -> (Tensor[(2, 5, 8), float32],) {
  %539 = @func_1609() /* ty=Tensor[(2, 5, 8), float32] */;
  (%539,)
}

def @func_6243() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %540 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %541 = %540.0;
  %542 = @func_6106() /* ty=Tensor[(2, 5, 8), float32] */;
  (%541, %542)
}

def @func_4829() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(1, 22), float64]) {
  %543 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %544 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 22), float64] */, dtype="float64") /* ty=Tensor[(1, 22), float64] */;
  %545 = reshape(%544, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), float64] */;
  %546 = @func_2634(%545) /* ty=(Tensor[(2, 11, ?), int64],) */;
  %547 = %543.0;
  %548 = %546.0;
  (%547, %548, meta[relay.Constant][34] /* ty=Tensor[(1, 22), float64] */)
}

def @func_1950(%var_1939: Tensor[(2, 12, 3), uint8], %var_1940: Tensor[(2, 12, 3), uint8]) -> Tensor[(2, 12, 3), uint8] {
  %549 = cast(%var_1940, dtype="uint8") /* ty=Tensor[(2, 12, 3), uint8] */;
  %550 = shape_of(%var_1939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%var_1939, dtype="uint8") /* ty=Tensor[(2, 12, 3), uint8] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%551, %552) /* ty=Tensor[(2, 12, 3), uint8] */
}

def @func_6950() -> (Tensor[(2, 11, ?), int64], Tensor[(2, 5, 8), float32]) {
  %553 = @func_4948() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(22), float64]) */;
  %554 = @func_2467() /* ty=(Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) */;
  %555 = %553.2;
  %556 = %554.2;
  (%555, %556)
}

def @func_3091() -> (Tensor[(2, 5, 8), float64],) {
  %557 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %558 = cast(%557, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %559 = atan(%558) /* ty=Tensor[(2, 5, 8), float64] */;
  (%559,)
}

def @func_573() -> (Tensor[(2, 5, 8), float32],) {
  %560 = @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %561 = %560.0;
  (%561,)
}

def @func_7113() -> (Tensor[(2, 5, 8), float32],) {
  %562 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  (%562,)
}

def @func_7561() -> (Tensor[(2, 5, 8), bool],) {
  %563 = @func_2130() /* ty=Tensor[(2, 5, 8), bool] */;
  (%563,)
}

def @func_7166(%var_7160: int8, %var_7161: Tensor[(12, 9, 13), int8]) -> Tensor[(12, 9, 13), int8] {
  %564 = cast(%var_7160, dtype="int8") /* ty=int8 */;
  %565 = cast(%var_7161, dtype="int8") /* ty=Tensor[(12, 9, 13), int8] */;
  bitwise_xor(%564, %565) /* ty=Tensor[(12, 9, 13), int8] */
}

def @func_293(%var_175: int64, %var_176: Tensor[(8, 2, 8), int64], %var_192: Tensor[(378), float32], %var_248: Tensor[(7, 9, 6), float32]) -> (Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) {
  %566 = cast(%var_175, dtype="int64") /* ty=int64 */;
  %567 = cast(%var_176, dtype="int64") /* ty=Tensor[(8, 2, 8), int64] */;
  %568 = cast(%var_192, dtype="float32") /* ty=Tensor[(378), float32] */;
  %569 = reshape(%568, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %570 = @func_144(%569) /* ty=(Tensor[(7, 9, 6), float32],) */;
  %571 = cast(meta[relay.Constant][35] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %572 = shape_of(%var_192, dtype="int32") /* ty=Tensor[(1), int32] */;
  %573 = cast(%var_192, dtype="float32") /* ty=Tensor[(378), float32] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?), float32] */;
  %575 = cast(meta[relay.Constant][35] /* ty=Tensor[(378), float32] */, dtype="bool") /* ty=Tensor[(378), bool] */;
  %576 = shape_of(%var_192, dtype="int32") /* ty=Tensor[(1), int32] */;
  %577 = cast(%var_192, dtype="bool") /* ty=Tensor[(378), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?), bool] */;
  %579 = cast(meta[relay.Constant][35] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %580 = reshape(%579, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %581 = @func_144(%580) /* ty=(Tensor[(7, 9, 6), float32],) */;
  %582 = %581.0;
  %583 = cast(%582, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %584 = cast(%var_175, dtype="bool") /* ty=bool */;
  %585 = cast(%var_248, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %586 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%582, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %589 = greater_equal(%577, %578) /* ty=Tensor[(378), bool] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(378), float32] */;
  %591 = reshape(%590, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %592 = @func_144(%591) /* ty=(Tensor[(7, 9, 6), float32],) */;
  %593 = cast(%var_192, dtype="float32") /* ty=Tensor[(378), float32] */;
  %594 = reshape(%593, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %595 = @func_144(%594) /* ty=(Tensor[(7, 9, 6), float32],) */;
  %596 = add(%566, %567) /* ty=Tensor[(8, 2, 8), int64] */;
  %597 = %570.0;
  %598 = minimum(%573, %574) /* ty=Tensor[(378), float32] */;
  %599 = less(%583, %584) /* ty=Tensor[(7, 9, 6), bool] */;
  %600 = logical_or(%587, %588) /* ty=Tensor[(7, 9, 6), bool] */;
  %601 = %592.0;
  %602 = %595.0;
  (%596, %597, %598, %589, %599, %600, %601, %602)
}

def @func_7816() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), int64], Tensor[(384), float64]) {
  %603 = @func_1169() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %604 = @func_3960() /* ty=Tensor[(2, 5, 8), float32] */;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %606 = cast(meta[relay.Constant][36] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %607 = reshape(%605, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %608 = reshape(%606, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %609 = @func_4729(%607, %608) /* ty=(Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
  %610 = %603.0;
  %611 = %609.0;
  (%610, %604, %611, meta[relay.Constant][36] /* ty=Tensor[(384), float64] */)
}

def @func_6300() -> (Tensor[(2, 5, 8), float32],) {
  %612 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %613 = %612.1;
  (%613,)
}

def @func_6605() -> (Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float64]) {
  %614 = @func_5687() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float64], Tensor[(1, 22), float64], Tensor[(2, 5, 8), float32]) */;
  %615 = %614.2;
  %616 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 9, 6), bool] */, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %620 = @func_4792() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %621 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 9, 6), bool] */, dtype="float64") /* ty=Tensor[(7, 9, 6), float64] */;
  %622 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%615, dtype="float64") /* ty=Tensor[(7, 9, 6), float64] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %625 = equal(%618, %619) /* ty=Tensor[(7, 9, 6), bool] */;
  %626 = %620.0;
  %627 = floor_mod(%623, %624) /* ty=Tensor[(7, 9, 6), float64] */;
  (%625, %626, %627)
}

def @func_6074(%var_6068: uint32) -> (Tensor[(12, 7, 15), bool], Tensor[(8, 6, 1), bool], uint32) {
  %628 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 7, 15), int64] */, dtype="bool") /* ty=Tensor[(12, 7, 15), bool] */;
  %629 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(12, 7, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 7, 15), int64] */, dtype="bool") /* ty=Tensor[(12, 7, 15), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = cast(%var_6068, dtype="uint32") /* ty=uint32 */;
  %633 = reshape(%632, newshape=[]) /* ty=uint32 */;
  %634 = @func_5284(%633) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32]) */;
  %635 = equal(%630, %631) /* ty=Tensor[(12, 7, 15), bool] */;
  %636 = %634.1;
  (%635, %636, %var_6068)
}

def @func_2467() -> (Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) {
  %637 = @func_1450() /* ty=Tensor[(2, 5, 8), float32] */;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %639 = reshape(%638, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %640 = @func_1002(%639) /* ty=(Tensor[(2, 5, 8), bool],) */;
  %641 = cast(%637, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %642 = cosh(%641) /* ty=Tensor[(2, 5, 8), float32] */;
  %643 = cast(%642, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %644 = %640.0;
  %645 = @func_1659() /* ty=Tensor[(2, 5, 8), float64] */;
  %646 = log10(%643) /* ty=Tensor[(2, 5, 8), float32] */;
  (%644, %645, %646)
}

def @func_4993() -> (Tensor[(2, 5, 8), float32],) {
  %647 = @func_1450() /* ty=Tensor[(2, 5, 8), float32] */;
  (%647,)
}

def @func_6779() -> (Tensor[(1350), float64],) {
  %648 = @func_5994() /* ty=(Tensor[(1350), float64],) */;
  %649 = %648.0;
  (%649,)
}

def @func_2280() -> Tensor[(2, 5, 8), float32] {
  @func_587() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_5244() -> (Tensor[(2, 5, 8), float32],) {
  %650 = @func_1450() /* ty=Tensor[(2, 5, 8), float32] */;
  (%650,)
}

def @func_3161() -> (Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(2, 5, 8), bool]) {
  %651 = cast(meta[relay.Constant][40] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %652 = reshape(%651, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %653 = @func_144(%652) /* ty=(Tensor[(7, 9, 6), float32],) */;
  %654 = @func_2467() /* ty=(Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) */;
  %655 = %654.1;
  %656 = cast(%655, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %657 = exp(%656) /* ty=Tensor[(2, 5, 8), float64] */;
  %658 = @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %661 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%657, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %664 = %653.0;
  %665 = greater(%662, %663) /* ty=Tensor[(2, 5, 8), bool] */;
  (%664, meta[relay.Constant][40] /* ty=Tensor[(378), float32] */, %665)
}

def @func_2338() -> Tensor[(2, 5, 8), float32] {
  %666 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %666.0
}

def @func_3741() -> (Tensor[(2, 5, 8), float32],) {
  %667 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %668 = %667.0;
  (%668,)
}

def @func_3889() -> (Tensor[(2, 5, 8), float64],) {
  %669 = @func_3091() /* ty=(Tensor[(2, 5, 8), float64],) */;
  %670 = %669.0;
  (%670,)
}

def @func_1169() -> (Tensor[(2, 5, 8), float32],) {
  %671 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
  (%671,)
}

def @func_6129() -> Tensor[(2, 5, 8), float32] {
  %672 = @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %672.0
}

def @func_1070() -> Tensor[(2, 5, 8), float32] {
  %673 = @func_1041() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %673.1
}

def @func_4948() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(22), float64]) {
  %674 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %675 = @func_2365() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %676 = cast(meta[relay.Constant][41] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %677 = reshape(%676, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), float64] */;
  %678 = @func_2634(%677) /* ty=(Tensor[(2, 11, ?), int64],) */;
  %679 = %674.0;
  %680 = %675.1;
  %681 = %678.0;
  (%679, %680, %681, meta[relay.Constant][41] /* ty=Tensor[(22), float64] */)
}

def @func_2832(%var_2828: Tensor[(4, 12, 2), uint8]) -> Tensor[(4, 12, 2), bool] {
  %682 = cast(%var_2828, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %683 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(4, 12, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 12, 2), uint8] */, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%684, %685) /* ty=Tensor[(4, 12, 2), bool] */
}

def @func_1791(%var_1779: Tensor[(5, 10, 11), float32], %var_1780: Tensor[(5, 10, 11), float32]) -> Tensor[(5, 10, 11), uint64] {
  %686 = cast(%var_1780, dtype="float32") /* ty=Tensor[(5, 10, 11), float32] */;
  %687 = shape_of(%var_1779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%var_1779, dtype="float32") /* ty=Tensor[(5, 10, 11), float32] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %690 = floor_mod(%688, %689) /* ty=Tensor[(5, 10, 11), float32] */;
  %691 = cast(%690, dtype="uint64") /* ty=Tensor[(5, 10, 11), uint64] */;
  %692 = shape_of(%var_1780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%var_1780, dtype="uint64") /* ty=Tensor[(5, 10, 11), uint64] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%693, %694) /* ty=Tensor[(5, 10, 11), uint64] */
}

def @func_3680(%var_3635: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), int8], Tensor[(2, 5, 8), float32]) {
  %695 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %696 = cast(%var_3635, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%695, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %700 = bitwise_or(%698, %699) /* ty=Tensor[(2, 5, 8), int8] */;
  %701 = @func_2338() /* ty=Tensor[(2, 5, 8), float32] */;
  (%700, %701)
}

def @func_7853() -> Tensor[(2, 5, 8), float32] {
  %702 = @func_5256() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %702.0
}

def @func_5565() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %703 = @func_5402() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %704 = @func_3741() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %705 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %706 = @func_4829() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(1, 22), float64]) */;
  %707 = %703.0;
  %708 = %704.0;
  %709 = %705.0;
  %710 = %706.0;
  (%707, %708, %709, %710)
}

def @func_1721() -> (Tensor[(2, 5, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float32]) {
  %711 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %712 = @func_1346() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), bool]) */;
  %713 = @func_1041() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %714 = %711.0;
  %715 = %712.1;
  %716 = %713.0;
  (%714, %715, %716)
}

def @func_4245(%var_4227: Tensor[(550), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(5, 10, 11), uint64], Tensor[(550), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %717 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %718 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %719 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %720 = cast(%var_4227, dtype="float32") /* ty=Tensor[(550), float32] */;
  %721 = cast(%var_4227, dtype="float32") /* ty=Tensor[(550), float32] */;
  %722 = reshape(%720, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %723 = reshape(%721, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %724 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %725 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %726 = %725.0;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %728 = %717.0;
  %729 = %718.0;
  %730 = %719.0;
  %731 = @func_1791(%722, %723) /* ty=Tensor[(5, 10, 11), uint64] */;
  %732 = %724.0;
  %733 = erf(%727) /* ty=Tensor[(2, 5, 8), float32] */;
  (%728, %729, %730, %731, %var_4227, %732, %733)
}

def @func_4172() -> Tensor[(2, 5, 8), float32] {
  %734 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %734.0
}

def @func_5117() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %735 = @func_792() /* ty=Tensor[(2, 5, 8), float32] */;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %737 = sigmoid(%736) /* ty=Tensor[(2, 5, 8), float32] */;
  %738 = @func_3960() /* ty=Tensor[(2, 5, 8), float32] */;
  (%737, %738)
}

def @func_5284(%var_5274: uint32) -> (Tensor[(2, 5, 8), float32], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32]) {
  %739 = cast(%var_5274, dtype="uint32") /* ty=uint32 */;
  %740 = cast(meta[relay.Constant][43] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %741 = reshape(%739, newshape=[]) /* ty=uint32 */;
  %742 = reshape(%740, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), uint32] */;
  %743 = @func_3509(%741, %742) /* ty=(Tensor[(8, 6, 1), bool], Tensor[(2, 5, 8), float32]) */;
  %744 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
  %745 = %743.0;
  (%744, %745, %var_5274, meta[relay.Constant][43] /* ty=Tensor[(48), uint32] */)
}

def @func_5810(%var_5758: Tensor[(14, 16, 9), uint32], %var_5759: Tensor[(14, 16, 9), uint32]) -> (Tensor[(8, 11, 12), uint8], Tensor[(1056), int64], Tensor[(2, 5, 8), float32], Tensor[(14, 16, 9), float64], Tensor[(2, 5, 8), float32]) {
  %746 = cast(meta[relay.Constant][44] /* ty=Tensor[(1056), int64] */, dtype="int64") /* ty=Tensor[(1056), int64] */;
  %747 = cast(meta[relay.Constant][44] /* ty=Tensor[(1056), int64] */, dtype="int64") /* ty=Tensor[(1056), int64] */;
  %748 = cast(meta[relay.Constant][44] /* ty=Tensor[(1056), int64] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %749 = reshape(%746, newshape=[8, 11, 12]) /* ty=Tensor[(8, 11, 12), int64] */;
  %750 = reshape(%747, newshape=[8, 11, 12]) /* ty=Tensor[(8, 11, 12), int64] */;
  %751 = reshape(%748, newshape=[8, 11, 12]) /* ty=Tensor[(8, 11, 12), float32] */;
  %752 = @func_4553(%749, %750, %751) /* ty=(Tensor[(8, 11, 12), int64], Tensor[(8, 11, 12), uint8]) */;
  %753 = @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %754 = cast(%var_5759, dtype="bool") /* ty=Tensor[(14, 16, 9), bool] */;
  %755 = shape_of(%var_5758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%var_5758, dtype="bool") /* ty=Tensor[(14, 16, 9), bool] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %758 = equal(%756, %757) /* ty=Tensor[(14, 16, 9), bool] */;
  %759 = cast(%var_5758, dtype="float64") /* ty=Tensor[(14, 16, 9), float64] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="float64") /* ty=Tensor[(14, 16, 9), float64] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %763 = mod(%761, %762) /* ty=Tensor[(14, 16, 9), float64] */;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(14, 16, 9), float64] */;
  %765 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%758, dtype="float64") /* ty=Tensor[(14, 16, 9), float64] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %768 = @func_2994() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %769 = %752.1;
  %770 = %753.0;
  %771 = subtract(%766, %767) /* ty=Tensor[(14, 16, 9), float64] */;
  %772 = %768.0;
  (%769, meta[relay.Constant][44] /* ty=Tensor[(1056), int64] */, %770, %771, %772)
}

def @func_5300() -> (Tensor[(1, 22), float64],) {
  %773 = @func_5217() /* ty=(Tensor[(1, 22), float64],) */;
  %774 = %773.0;
  (%774,)
}

def @func_1093(%var_1076: Tensor[(8, 6, 8), float64]) -> (Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) {
  %775 = cast(%var_1076, dtype="float64") /* ty=Tensor[(8, 6, 8), float64] */;
  %776 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %778 = acosh(%775) /* ty=Tensor[(8, 6, 8), float64] */;
  %779 = asin(%777) /* ty=Tensor[(2, 5, 8), float64] */;
  (%778, %779)
}

def @func_5914() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %780 = @func_4792() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %781 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %782 = %780.0;
  %783 = %781.0;
  (%782, %783)
}

def @func_2634(%var_2620: Tensor[(2, 11, 1), float64]) -> (Tensor[(2, 11, ?), int64],) {
  %784 = cast(%var_2620, dtype="float64") /* ty=Tensor[(2, 11, 1), float64] */;
  %785 = acos(%784) /* ty=Tensor[(2, 11, 1), float64] */;
  %786 = cast(%var_2620, dtype="int64") /* ty=Tensor[(2, 11, 1), int64] */;
  %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%785, dtype="int64") /* ty=Tensor[(2, 11, 1), int64] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %790 = right_shift(%788, %789) /* ty=Tensor[(2, 11, ?), int64] */;
  (%790,)
}

def @func_3260(%var_3206: Tensor[(384), float64], %var_3223: Tensor[(96), uint8], %var_3247: Tensor[(3072), float32], %var_3248: Tensor[(55, 10), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), int8], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(112, 4), bool], Tensor[(384), bool], Tensor[(2, 5, 8), float32], Tensor[(3072), float32], Tensor[(55, 10), float32]) {
  %791 = cast(%var_3206, dtype="float64") /* ty=Tensor[(384), float64] */;
  %792 = reshape(%791, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %793 = @func_1093(%792) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */;
  %794 = cast(meta[relay.Constant][45] /* ty=Tensor[(384), float64] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %795 = shape_of(%var_3206, dtype="int32") /* ty=Tensor[(1), int32] */;
  %796 = cast(%var_3206, dtype="int8") /* ty=Tensor[(384), int8] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?), int8] */;
  %798 = cast(%var_3223, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %799 = reshape(%798, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), uint8] */;
  %800 = cast(meta[relay.Constant][46] /* ty=Tensor[(112, 4), float64] */, dtype="float64") /* ty=Tensor[(112, 4), float64] */;
  %801 = reshape(%800, newshape=[4, 7, 16]) /* ty=Tensor[(4, 7, 16), float64] */;
  %802 = @func_1319(%801) /* ty=(Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), bool]) */;
  %803 = %802.1;
  %804 = cast(%803, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %805 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(112, 4), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %806 = cast(meta[relay.Constant][46] /* ty=Tensor[(112, 4), float64] */, dtype="bool") /* ty=Tensor[(112, 4), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %808 = cast(meta[relay.Constant][47] /* ty=Tensor[(384), float64] */, dtype="bool") /* ty=Tensor[(384), bool] */;
  %809 = shape_of(%var_3206, dtype="int32") /* ty=Tensor[(1), int32] */;
  %810 = cast(%var_3206, dtype="bool") /* ty=Tensor[(384), bool] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?), bool] */;
  %812 = cast(%var_3247, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %813 = greater_equal(%810, %811) /* ty=Tensor[(384), bool] */;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(384), float64] */;
  %815 = cast(%var_3248, dtype="float32") /* ty=Tensor[(55, 10), float32] */;
  %816 = reshape(%812, newshape=[16, 12, 16]) /* ty=Tensor[(16, 12, 16), float32] */;
  %817 = reshape(%814, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %818 = reshape(%815, newshape=[1, 550]) /* ty=Tensor[(1, 550), float32] */;
  %819 = @func_2938(%816, %817, %818) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(5, 10, 11), uint64], Tensor[(1, 550), float32], Tensor[(16, 12, 16), uint8], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float32], Tensor[(378), float32]) */;
  %820 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %821 = %793.1;
  %822 = multiply(%796, %797) /* ty=Tensor[(384), int8] */;
  %823 = @func_2832(%799) /* ty=Tensor[(4, 12, 2), bool] */;
  %824 = less_equal(%806, %807) /* ty=Tensor[(112, 4), bool] */;
  %825 = %819.7;
  (%820, %821, %822, %823, %var_3223, %824, %813, %825, %var_3247, %var_3248)
}

def @func_5187() -> Tensor[(2, 5, 8), float32] {
  @func_1609() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_1002(%var_991: Tensor[(2, 5, 8), float64]) -> (Tensor[(2, 5, 8), bool],) {
  %826 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %827 = cast(%var_991, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%826, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %831 = less_equal(%829, %830) /* ty=Tensor[(2, 5, 8), bool] */;
  (%831,)
}

def @func_2365() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %832 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %833 = %832.0;
  %834 = cast(%833, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %835 = reshape(%834, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %836 = @func_2088(%835) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %837 = %836.1;
  (%833, %837)
}

def @func_4281() -> (Tensor[(2, 5, 8), float32], Tensor[(9, 10, 15), float64], Tensor[(1350), float64]) {
  %838 = @func_3599() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %839 = cast(meta[relay.Constant][48] /* ty=Tensor[(1350), float64] */, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %840 = reshape(%839, newshape=[9, 10, 15]) /* ty=Tensor[(9, 10, 15), float64] */;
  %841 = %838.6;
  %842 = @func_3066(%840) /* ty=Tensor[(9, 10, 15), float64] */;
  (%841, %842, meta[relay.Constant][48] /* ty=Tensor[(1350), float64] */)
}

def @func_7053() -> (Tensor[(2, 5, 8), float32],) {
  %843 = @func_6106() /* ty=Tensor[(2, 5, 8), float32] */;
  (%843,)
}

def @func_6036(%var_6027: int64, %var_6028: Tensor[(128), int64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), bool], int64, Tensor[(128), int64], Tensor[(378), float32]) {
  %844 = @func_5525() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %845 = cast(%var_6027, dtype="int64") /* ty=int64 */;
  %846 = cast(%var_6028, dtype="int64") /* ty=Tensor[(128), int64] */;
  %847 = cast(meta[relay.Constant][49] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %848 = cast(meta[relay.Constant][49] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %849 = reshape(%845, newshape=[]) /* ty=int64 */;
  %850 = reshape(%846, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), int64] */;
  %851 = reshape(%847, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %852 = reshape(%848, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %853 = @func_293(%849, %850, %851, %852) /* ty=(Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) */;
  %854 = @func_2338() /* ty=Tensor[(2, 5, 8), float32] */;
  %855 = %844.0;
  %856 = %853.4;
  (%854, %855, %856, %var_6027, %var_6028, meta[relay.Constant][49] /* ty=Tensor[(378), float32] */)
}

def @func_7377() -> (Tensor[(2, 5, 8), int8], Tensor[(2, 5, 8), float32]) {
  %857 = @func_3990() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %858 = %857.0;
  %859 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 5, 8), float32] */, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %860 = shape_of(%858, dtype="int32") /* ty=Tensor[(3), int32] */;
  %861 = cast(%858, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %863 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %864 = add(%861, %862) /* ty=Tensor[(2, 5, 8), int8] */;
  %865 = %863.0;
  (%864, %865)
}

def @func_2169() -> (Tensor[(9, 6, 14), float64], Tensor[(4, 10, 10), float32], Tensor[(2, 5, 8), float32], Tensor[(80), float32]) {
  %866 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(9, 6, 14), float64] */;
  %867 = @func_2048() /* ty=(Tensor[(4, 10, 10), float32],) */;
  %868 = cast(meta[relay.Constant][52] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %869 = reshape(%868, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %870 = @func_948(%869) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %871 = log(%866) /* ty=Tensor[(9, 6, 14), float64] */;
  %872 = %867.0;
  %873 = %870.1;
  (%871, %872, %873, meta[relay.Constant][52] /* ty=Tensor[(80), float32] */)
}

def @func_1632() -> Tensor[(2, 5, 8), float32] {
  %874 = @func_1169() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %874.0
}

def @func_2485() -> (Tensor[(2, 5, 8), float64],) {
  %875 = @func_2467() /* ty=(Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) */;
  %876 = %875.1;
  (%876,)
}

def @func_6806() -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) {
  %877 = @func_5432() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %878 = %877.1;
  %879 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  (%878, %879)
}

def @func_1346() -> (Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), bool]) {
  %880 = cast(meta[relay.Constant][53] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %881 = reshape(%880, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %882 = @func_1093(%881) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */;
  %883 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %884 = cast(%883, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %885 = reshape(%884, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %886 = @func_1002(%885) /* ty=(Tensor[(2, 5, 8), bool],) */;
  %887 = %882.0;
  %888 = %886.0;
  (%883, %887, meta[relay.Constant][53] /* ty=Tensor[(384), float64] */, %888)
}

def @func_4792() -> (Tensor[(2, 5, 8), float32],) {
  %889 = @func_3741() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %890 = %889.0;
  (%890,)
}

def @func_1911() -> (Tensor[(2, 5, 8), float32],) {
  %891 = @func_1632() /* ty=Tensor[(2, 5, 8), float32] */;
  (%891,)
}

def @func_7666() -> Tensor[(2, 5, 8), float32] {
  %892 = @func_6934() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %892.0
}

def @func_1892() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %893 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %894 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %895 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %896 = @func_792() /* ty=Tensor[(2, 5, 8), float32] */;
  %897 = %893.0;
  %898 = %894.1;
  %899 = %895.0;
  (%896, %897, %898, %899)
}

def @func_1609() -> Tensor[(2, 5, 8), float32] {
  %900 = @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %900.0
}

def @func_5432() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %901 = @func_1892() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %902 = %901.3;
  %903 = @func_1659() /* ty=Tensor[(2, 5, 8), float64] */;
  (%902, %903)
}

def @func_3509(%var_3499: uint32, %var_3500: Tensor[(8, 6, 1), uint32]) -> (Tensor[(8, 6, 1), bool], Tensor[(2, 5, 8), float32]) {
  %904 = cast(%var_3499, dtype="bool") /* ty=bool */;
  %905 = cast(%var_3500, dtype="bool") /* ty=Tensor[(8, 6, 1), bool] */;
  %906 = @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %907 = not_equal(%904, %905) /* ty=Tensor[(8, 6, 1), bool] */;
  %908 = %906.0;
  (%907, %908)
}

def @func_6865(%var_6819: Tensor[(2, 11, 10), bool]) -> (Tensor[(2, 11, 10), bool], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 11, 10), float32], Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64]) {
  %909 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 11, 10), bool] */, dtype="bool") /* ty=Tensor[(1, 11, 10), bool] */;
  %910 = cast(%var_6819, dtype="bool") /* ty=Tensor[(2, 11, 10), bool] */;
  %911 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %912 = @func_3091() /* ty=(Tensor[(2, 5, 8), float64],) */;
  %913 = cast(%var_6819, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %914 = logical_or(%909, %910) /* ty=Tensor[(2, 11, 10), bool] */;
  %915 = %911.0;
  %916 = %912.0;
  %917 = erf(%913) /* ty=Tensor[(2, 11, 10), float32] */;
  %918 = @func_2130() /* ty=Tensor[(2, 5, 8), bool] */;
  %919 = @func_1659() /* ty=Tensor[(2, 5, 8), float64] */;
  (%914, %915, %916, %917, %918, %919)
}

def @func_2088(%var_2072: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %920 = @func_1169() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %921 = %920.0;
  %922 = cast(%var_2072, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %923 = shape_of(%921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %924 = cast(%921, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %926 = cast(%var_2072, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %927 = @func_1659() /* ty=Tensor[(2, 5, 8), float64] */;
  %928 = divide(%924, %925) /* ty=Tensor[(2, 5, 8), float32] */;
  %929 = sin(%926) /* ty=Tensor[(2, 5, 8), float64] */;
  (%927, %928, %929)
}

def @func_3066(%var_3057: Tensor[(9, 10, 15), float64]) -> Tensor[(9, 10, 15), float64] {
  %930 = cast(-9.73591f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %931 = cast(%var_3057, dtype="float64") /* ty=Tensor[(9, 10, 15), float64] */;
  floor_mod(%930, %931) /* ty=Tensor[(9, 10, 15), float64] */
}

def @func_792() -> Tensor[(2, 5, 8), float32] {
  @func_587() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_4898(%var_4885: Tensor[(13, 11, 8), uint32]) -> Tensor[(13, 11, 8), uint32] {
  %932 = cast(%var_4885, dtype="uint32") /* ty=Tensor[(13, 11, 8), uint32] */;
  %933 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(13, 11, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %934 = cast(meta[relay.Constant][55] /* ty=Tensor[(13, 11, 8), uint32] */, dtype="uint32") /* ty=Tensor[(13, 11, 8), uint32] */;
  %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  add(%934, %935) /* ty=Tensor[(13, 11, 8), uint32] */
}

def @func_7138() -> (Tensor[(7, 9, 6), float64],) {
  %936 = @func_6605() /* ty=(Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float64]) */;
  %937 = %936.2;
  (%937,)
}

def @func_7224(%var_7211: Tensor[(8, 5, 13), bool], %var_7212: Tensor[(8, 5, 13), bool]) -> (Tensor[(8, 5, 13), bool], Tensor[(8, 5, 13), float32]) {
  %938 = cast(%var_7212, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
  %939 = shape_of(%var_7211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %940 = cast(%var_7211, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
  %941 = dyn.reshape(%938, %939, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %942 = cast(%var_7212, dtype="float32") /* ty=Tensor[(8, 5, 13), float32] */;
  %943 = logical_or(%940, %941) /* ty=Tensor[(8, 5, 13), bool] */;
  %944 = acos(%942) /* ty=Tensor[(8, 5, 13), float32] */;
  (%943, %944)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1042() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %4 = fn () -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
    %0 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %1 = @func_821() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %2 = %0.0;
    %3 = %1.1;
    (%2, %3)
  };
  %4() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_7816() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), int64], Tensor[(384), float64]) {
  %5 = @func_1169() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %6 = @func_3960() /* ty=Tensor[(2, 5, 8), float32] */;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %9 = reshape(%7, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %10 = reshape(%8, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %11 = @func_4729(%9, %10) /* ty=(Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
  %12 = %5.0;
  %13 = %11.0;
  (%12, %6, %13, meta[relay.Constant][0] /* ty=Tensor[(384), float64] */)
}

def @func_3429() -> (Tensor[(2, 5, 8), float32],) {
  %14 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %15 = %14.0;
  (%15,)
}

def @func_7939() -> (Tensor[(2, 5, 8), float32],) {
  @func_7937() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_4611() -> (Tensor[(2, 5, 8), float32],) {
  %18 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %16 = @func_1721() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float32]) */;
    %17 = %16.0;
    (%17,)
  };
  %18() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_7113() -> (Tensor[(2, 5, 8), float32],) {
  %19 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  (%19,)
}

def @func_5527() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_5525() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_3478() -> Tensor[(2, 5, 8), float32] {
  %20 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %20.1
}

def @func_5567() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_5565() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_2340() -> Tensor[(2, 5, 8), float32] {
  @func_2338() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_2280() -> Tensor[(2, 5, 8), float32] {
  @func_587() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_4245(%var_4227: Tensor[(550), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(5, 10, 11), uint64], Tensor[(550), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %21 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %22 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %23 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %24 = cast(%var_4227, dtype="float32") /* ty=Tensor[(550), float32] */;
  %25 = cast(%var_4227, dtype="float32") /* ty=Tensor[(550), float32] */;
  %26 = reshape(%24, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %27 = reshape(%25, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %28 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %29 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %30 = %29.0;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %32 = %21.0;
  %33 = %22.0;
  %34 = %23.0;
  %35 = @func_1791(%26, %27) /* ty=Tensor[(5, 10, 11), uint64] */;
  %36 = %28.0;
  %37 = erf(%31) /* ty=Tensor[(2, 5, 8), float32] */;
  (%32, %33, %34, %35, %var_4227, %36, %37)
}

def @func_7527(%var_7498: Tensor[(12, 22), float64]) -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(12, 22), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %38 = @func_5927() /* ty=(Tensor[(2, 5, 8), int32],) */;
  %39 = @func_6763() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(1, 22), float64]) */;
  %40 = %39.1;
  %41 = cast(%40, dtype="int32") /* ty=Tensor[(1, 22), int32] */;
  %42 = cast(%var_7498, dtype="int32") /* ty=Tensor[(12, 22), int32] */;
  %43 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %44 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %45 = %38.0;
  %46 = @func_1632() /* ty=Tensor[(2, 5, 8), float32] */;
  %47 = bitwise_and(%41, %42) /* ty=Tensor[(12, 22), int32] */;
  %48 = %43.0;
  %49 = @func_1751() /* ty=Tensor[(2, 5, 8), float32] */;
  (%44, %45, %46, %47, %48, %49)
}

def @func_4248(%var_4246: Tensor[(550), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(5, 10, 11), uint64], Tensor[(550), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_4245(%var_4246) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(5, 10, 11), uint64], Tensor[(550), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_3509(%var_3499: uint32, %var_3500: Tensor[(8, 6, 1), uint32]) -> (Tensor[(8, 6, 1), bool], Tensor[(2, 5, 8), float32]) {
  %50 = cast(%var_3499, dtype="bool") /* ty=bool */;
  %51 = cast(%var_3500, dtype="bool") /* ty=Tensor[(8, 6, 1), bool] */;
  %52 = @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %53 = not_equal(%50, %51) /* ty=Tensor[(8, 6, 1), bool] */;
  %54 = %52.0;
  (%53, %54)
}

def @func_6438() -> (Tensor[(2, 5, 8), float32],) {
  %55 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
  (%55,)
}

def @func_5565() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %56 = @func_5402() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %57 = @func_3741() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %58 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %59 = @func_4829() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(1, 22), float64]) */;
  %60 = %56.0;
  %61 = %57.0;
  %62 = %58.0;
  %63 = %59.0;
  (%60, %61, %62, %63)
}

def @func_8093() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_8091() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_1610() -> Tensor[(2, 5, 8), float32] {
  %65 = fn () -> Tensor[(2, 5, 8), float32] {
    %64 = @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %64.0
  };
  %65() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_144(%var_131: Tensor[(7, 9, 6), float32]) -> (Tensor[(7, 9, 6), float32],) {
  %66 = cast(%var_131, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
  %67 = acosh(%66) /* ty=Tensor[(7, 9, 6), float32] */;
  (%67,)
}

def @func_7937() -> (Tensor[(2, 5, 8), float32],) {
  %68 = @func_1609() /* ty=Tensor[(2, 5, 8), float32] */;
  (%68,)
}

def @func_7053() -> (Tensor[(2, 5, 8), float32],) {
  %69 = @func_6106() /* ty=Tensor[(2, 5, 8), float32] */;
  (%69,)
}

def @func_7417() -> (Tensor[(2, 5, 8), float32], uint32, uint32) {
  @func_7415() /* ty=(Tensor[(2, 5, 8), float32], uint32, uint32) */
}

def @func_5752(%var_5751: Tensor[(48, 8), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), uint64], Tensor[(2, 5, 8), float64], Tensor[(48, 8), float64]) {
  %87 = fn (%var_5744: Tensor[(48, 8), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), uint64], Tensor[(2, 5, 8), float64], Tensor[(48, 8), float64]) {
    %70 = @func_5117() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %71 = %70.1;
    %72 = cast(%71, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
    %73 = reshape(%72, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
    %74 = @func_2885(%73) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), uint64]) */;
    %75 = cast(%71, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
    %76 = cast(meta[relay.Constant][1] /* ty=Tensor[(48, 8), float64] */, dtype="float64") /* ty=Tensor[(48, 8), float64] */;
    %77 = reshape(%75, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
    %78 = reshape(%76, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %79 = @func_4729(%77, %78) /* ty=(Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
    %80 = cast(%var_5744, dtype="float64") /* ty=Tensor[(48, 8), float64] */;
    %81 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(48, 8), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %82 = cast(meta[relay.Constant][1] /* ty=Tensor[(48, 8), float64] */, dtype="float64") /* ty=Tensor[(48, 8), float64] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %84 = %74.1;
    %85 = %79.2;
    %86 = floor_divide(%82, %83) /* ty=Tensor[(48, 8), float64] */;
    (%71, %84, %85, %86)
  };
  %87(%var_5751) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), uint64], Tensor[(2, 5, 8), float64], Tensor[(48, 8), float64]) */
}

def @func_749() -> Tensor[(2, 5, 8), float64] {
  @func_747() /* ty=Tensor[(2, 5, 8), float64] */
}

def @func_5432() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %88 = @func_1892() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %89 = %88.3;
  %90 = @func_1659() /* ty=Tensor[(2, 5, 8), float64] */;
  (%89, %90)
}

def @func_606() -> (Tensor[(2, 5, 8), float32],) {
  %91 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  (%91,)
}

def @func_5286(%var_5285: uint32) -> (Tensor[(2, 5, 8), float32], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32]) {
  %99 = fn (%var_5274: uint32) -> (Tensor[(2, 5, 8), float32], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32]) {
    %92 = cast(%var_5274, dtype="uint32") /* ty=uint32 */;
    %93 = cast(meta[relay.Constant][2] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %94 = reshape(%92, newshape=[]) /* ty=uint32 */;
    %95 = reshape(%93, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), uint32] */;
    %96 = @func_3509(%94, %95) /* ty=(Tensor[(8, 6, 1), bool], Tensor[(2, 5, 8), float32]) */;
    %97 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
    %98 = %96.0;
    (%97, %98, %var_5274, meta[relay.Constant][2] /* ty=Tensor[(48), uint32] */)
  };
  %99(%var_5285) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32]) */
}

def @func_7653(%var_7651: Tensor[(8, 4, 15), int32]) -> (Tensor[(8, 4, 15), bool], Tensor[(8, 4, 15), bool]) {
  @func_7650(%var_7651) /* ty=(Tensor[(8, 4, 15), bool], Tensor[(8, 4, 15), bool]) */
}

def @func_3162() -> (Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(2, 5, 8), bool]) {
  %115 = fn () -> (Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(2, 5, 8), bool]) {
    %100 = cast(meta[relay.Constant][3] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %101 = reshape(%100, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %102 = @func_144(%101) /* ty=(Tensor[(7, 9, 6), float32],) */;
    %103 = @func_2467() /* ty=(Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) */;
    %104 = %103.1;
    %105 = cast(%104, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
    %106 = exp(%105) /* ty=Tensor[(2, 5, 8), float64] */;
    %107 = @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %108 = %107.0;
    %109 = cast(%108, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
    %110 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%106, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %113 = %102.0;
    %114 = greater(%111, %112) /* ty=Tensor[(2, 5, 8), bool] */;
    (%113, meta[relay.Constant][3] /* ty=Tensor[(378), float32] */, %114)
  };
  %115() /* ty=(Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(2, 5, 8), bool]) */
}

def @func_7379() -> (Tensor[(2, 5, 8), int8], Tensor[(2, 5, 8), float32]) {
  @func_7377() /* ty=(Tensor[(2, 5, 8), int8], Tensor[(2, 5, 8), float32]) */
}

def @func_4901(%var_4899: Tensor[(13, 11, 8), uint32]) -> Tensor[(13, 11, 8), uint32] {
  @func_4898(%var_4899) /* ty=Tensor[(13, 11, 8), uint32] */
}

def @func_3842() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %116 = @func_2485() /* ty=(Tensor[(2, 5, 8), float64],) */;
  %117 = @func_2280() /* ty=Tensor[(2, 5, 8), float32] */;
  %118 = %116.0;
  (%117, %118)
}

def @func_3683(%var_3681: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), int8], Tensor[(2, 5, 8), float32]) {
  @func_3680(%var_3681) /* ty=(Tensor[(2, 5, 8), int8], Tensor[(2, 5, 8), float32]) */
}

def @func_2995() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %124 = fn () -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
    %119 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %120 = %119.1;
    %121 = cast(%120, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
    %122 = sqrt(%121) /* ty=Tensor[(2, 5, 8), float32] */;
    %123 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
    (%122, %123)
  };
  %124() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_6500(%var_6499: Tensor[(9, 12, 16), int64]) -> (Tensor[(9, 12, 16), bool], Tensor[(2, 5, 8), float32]) {
  %131 = fn (%var_6462: Tensor[(9, 12, 16), int64]) -> (Tensor[(9, 12, 16), bool], Tensor[(2, 5, 8), float32]) {
    %125 = cast(%var_6462, dtype="bool") /* ty=Tensor[(9, 12, 16), bool] */;
    %126 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(9, 12, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %127 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 12, 16), int64] */, dtype="bool") /* ty=Tensor[(9, 12, 16), bool] */;
    %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %129 = less_equal(%127, %128) /* ty=Tensor[(9, 12, 16), bool] */;
    %130 = @func_4010() /* ty=Tensor[(2, 5, 8), float32] */;
    (%129, %130)
  };
  %131(%var_6499) /* ty=(Tensor[(9, 12, 16), bool], Tensor[(2, 5, 8), float32]) */
}

def @func_6780() -> (Tensor[(1350), float64],) {
  %134 = fn () -> (Tensor[(1350), float64],) {
    %132 = @func_5994() /* ty=(Tensor[(1350), float64],) */;
    %133 = %132.0;
    (%133,)
  };
  %134() /* ty=(Tensor[(1350), float64],) */
}

def @func_3962() -> Tensor[(2, 5, 8), float32] {
  @func_3960() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_2601(%var_2600: Tensor[(384), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) {
  %140 = fn (%var_2595: Tensor[(384), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) {
    %135 = cast(%var_2595, dtype="float64") /* ty=Tensor[(384), float64] */;
    %136 = reshape(%135, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %137 = @func_1124(%136) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
    %138 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
    %139 = %137.1;
    (%138, %139, %var_2595)
  };
  %140(%var_2600) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */
}

def @func_2367() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_2365() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_7254(%var_7233: Tensor[(7, 9, 6), float32]) -> (Tensor[(7, 9, 6), int32], Tensor[(2, 5, 8), float32]) {
  %141 = cast(%var_7233, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
  %142 = sqrt(%141) /* ty=Tensor[(7, 9, 6), float32] */;
  %143 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 9, 6), float32] */, dtype="int32") /* ty=Tensor[(7, 9, 6), int32] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="int32") /* ty=Tensor[(7, 9, 6), int32] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %147 = @func_6243() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %148 = left_shift(%145, %146) /* ty=Tensor[(7, 9, 6), int32] */;
  %149 = %147.1;
  (%148, %149)
}

def @func_6245() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_6243() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_2485() -> (Tensor[(2, 5, 8), float64],) {
  %150 = @func_2467() /* ty=(Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) */;
  %151 = %150.1;
  (%151,)
}

def @func_1660() -> Tensor[(2, 5, 8), float64] {
  %152 = fn () -> Tensor[(2, 5, 8), float64] {
    @func_747() /* ty=Tensor[(2, 5, 8), float64] */
  };
  %152() /* ty=Tensor[(2, 5, 8), float64] */
}

def @func_1556() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_1950(%var_1939: Tensor[(2, 12, 3), uint8], %var_1940: Tensor[(2, 12, 3), uint8]) -> Tensor[(2, 12, 3), uint8] {
  %153 = cast(%var_1940, dtype="uint8") /* ty=Tensor[(2, 12, 3), uint8] */;
  %154 = shape_of(%var_1939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_1939, dtype="uint8") /* ty=Tensor[(2, 12, 3), uint8] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%155, %156) /* ty=Tensor[(2, 12, 3), uint8] */
}

def @func_3091() -> (Tensor[(2, 5, 8), float64],) {
  %157 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %159 = atan(%158) /* ty=Tensor[(2, 5, 8), float64] */;
  (%159,)
}

def @func_147(%var_145: Tensor[(7, 9, 6), float32]) -> (Tensor[(7, 9, 6), float32],) {
  @func_144(%var_145) /* ty=(Tensor[(7, 9, 6), float32],) */
}

def @func_3844() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  @func_3842() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */
}

def @func_2091(%var_2089: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  @func_2088(%var_2089) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */
}

def @func_3411(%var_3408: Tensor[(96), uint8], %var_3409: Tensor[(3072), float32], %var_3410: Tensor[(550), float32]) -> (Tensor[(4, 7, 16), float64], Tensor[(448), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(7, 9, 6), float32], Tensor[(6, 64), float64], Tensor[(550), float32], Tensor[(3072), float64]) {
  @func_3406(%var_3408, %var_3409, %var_3410) /* ty=(Tensor[(4, 7, 16), float64], Tensor[(448), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(7, 9, 6), float32], Tensor[(6, 64), float64], Tensor[(550), float32], Tensor[(3072), float64]) */
}

def @func_1004(%var_1003: Tensor[(2, 5, 8), float64]) -> (Tensor[(2, 5, 8), bool],) {
  %166 = fn (%var_991: Tensor[(2, 5, 8), float64]) -> (Tensor[(2, 5, 8), bool],) {
    %160 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
    %161 = cast(%var_991, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
    %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
    %163 = cast(%160, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
    %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %165 = less_equal(%163, %164) /* ty=Tensor[(2, 5, 8), bool] */;
    (%165,)
  };
  %166(%var_1003) /* ty=(Tensor[(2, 5, 8), bool],) */
}

def @func_5995() -> (Tensor[(1350), float64],) {
  %169 = fn () -> (Tensor[(1350), float64],) {
    %167 = @func_4281() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(9, 10, 15), float64], Tensor[(1350), float64]) */;
    %168 = %167.2;
    (%168,)
  };
  %169() /* ty=(Tensor[(1350), float64],) */
}

def @func_2888(%var_2886: Tensor[(2, 5, 8), float64]) -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), uint64]) {
  @func_2885(%var_2886) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), uint64]) */
}

def @func_3741() -> (Tensor[(2, 5, 8), float32],) {
  %170 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %171 = %170.0;
  (%171,)
}

def @func_3266(%var_3262: Tensor[(384), float64], %var_3263: Tensor[(96), uint8], %var_3264: Tensor[(3072), float32], %var_3265: Tensor[(55, 10), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), int8], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(112, 4), bool], Tensor[(384), bool], Tensor[(2, 5, 8), float32], Tensor[(3072), float32], Tensor[(55, 10), float32]) {
  @func_3260(%var_3262, %var_3263, %var_3264, %var_3265) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), int8], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(112, 4), bool], Tensor[(384), bool], Tensor[(2, 5, 8), float32], Tensor[(3072), float32], Tensor[(55, 10), float32]) */
}

def @func_5257() -> (Tensor[(2, 5, 8), float32],) {
  %174 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %172 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %173 = %172.0;
    (%173,)
  };
  %174() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_6107() -> Tensor[(2, 5, 8), float32] {
  %175 = fn () -> Tensor[(2, 5, 8), float32] {
    @func_1632() /* ty=Tensor[(2, 5, 8), float32] */
  };
  %175() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_6129() -> Tensor[(2, 5, 8), float32] {
  %176 = @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %176.0
}

def @func_6764() -> (Tensor[(2, 5, 8), float32], Tensor[(1, 22), float64]) {
  %181 = fn () -> (Tensor[(2, 5, 8), float32], Tensor[(1, 22), float64]) {
    %177 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %178 = @func_4829() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(1, 22), float64]) */;
    %179 = %177.2;
    %180 = %178.2;
    (%179, %180)
  };
  %181() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(1, 22), float64]) */
}

def @func_7606() -> Tensor[(2, 5, 8), float32] {
  @func_7604() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_8190(%var_8159: uint8, %var_8160: Tensor[(11, 8, 4), uint8]) -> Tensor[(11, 8, 4), uint32] {
  %182 = cast(%var_8159, dtype="uint8") /* ty=uint8 */;
  %183 = cast(%var_8160, dtype="uint8") /* ty=Tensor[(11, 8, 4), uint8] */;
  %184 = left_shift(%182, %183) /* ty=Tensor[(11, 8, 4), uint8] */;
  %185 = cast(%var_8159, dtype="uint32") /* ty=uint32 */;
  %186 = cast(%184, dtype="uint32") /* ty=Tensor[(11, 8, 4), uint32] */;
  add(%185, %186) /* ty=Tensor[(11, 8, 4), uint32] */
}

def @func_7115() -> (Tensor[(2, 5, 8), float32],) {
  @func_7113() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_6399(%var_6397: bool, %var_6398: Tensor[(3, 10, 14), float32]) -> (Tensor[(3, 10, 14), bool], Tensor[(3, 10, 14), bool], int64, Tensor[(250), float64], Tensor[(128), int64], Tensor[(3, 10, 14), bool]) {
  %216 = fn (%var_6309: bool, %var_6386: Tensor[(3, 10, 14), float32]) -> (Tensor[(3, 10, 14), bool], Tensor[(3, 10, 14), bool], int64, Tensor[(250), float64], Tensor[(128), int64], Tensor[(3, 10, 14), bool]) {
    %187 = cast(%var_6309, dtype="bool") /* ty=bool */;
    %188 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 10, 14), bool] */, dtype="bool") /* ty=Tensor[(3, 10, 14), bool] */;
    %189 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 10, 14), bool] */, dtype="int64") /* ty=Tensor[(3, 10, 14), int64] */;
    %190 = cast(%var_6309, dtype="int64") /* ty=int64 */;
    %191 = right_shift(%189, %190) /* ty=Tensor[(3, 10, 14), int64] */;
    %192 = cast(%var_6309, dtype="float64") /* ty=float64 */;
    %193 = cast(%191, dtype="float64") /* ty=Tensor[(3, 10, 14), float64] */;
    %194 = floor_mod(%192, %193) /* ty=Tensor[(3, 10, 14), float64] */;
    %195 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 10, 14), bool] */, dtype="bool") /* ty=Tensor[(3, 10, 14), bool] */;
    %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(%194, dtype="bool") /* ty=Tensor[(3, 10, 14), bool] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %199 = cast(meta[relay.Constant][7] /* ty=Tensor[(250), float64] */, dtype="float64") /* ty=Tensor[(250), float64] */;
    %200 = cast(%var_6309, dtype="int64") /* ty=int64 */;
    %201 = cast(meta[relay.Constant][8] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %202 = reshape(%199, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), float64] */;
    %203 = reshape(%200, newshape=[]) /* ty=int64 */;
    %204 = reshape(%201, newshape=[128]) /* ty=Tensor[(128), int64] */;
    %205 = @func_395(%202, %203, %204) /* ty=(Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(7, 9, 6), float32], int64, Tensor[(128), int64], Tensor[(7, 9, 6), int16], Tensor[(10, 5, 5), float64], Tensor[(7, 9, 6), bool]) */;
    %206 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 10, 14), bool] */, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
    %207 = asin(%206) /* ty=Tensor[(3, 10, 14), float32] */;
    %208 = cast(%var_6386, dtype="bool") /* ty=Tensor[(3, 10, 14), bool] */;
    %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
    %210 = cast(%207, dtype="bool") /* ty=Tensor[(3, 10, 14), bool] */;
    %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %212 = logical_and(%187, %188) /* ty=Tensor[(3, 10, 14), bool] */;
    %213 = equal(%197, %198) /* ty=Tensor[(3, 10, 14), bool] */;
    %214 = %205.3;
    %215 = less(%210, %211) /* ty=Tensor[(3, 10, 14), bool] */;
    (%212, %213, %214, meta[relay.Constant][7] /* ty=Tensor[(250), float64] */, meta[relay.Constant][8] /* ty=Tensor[(128), int64] */, %215)
  };
  %216(%var_6397, %var_6398) /* ty=(Tensor[(3, 10, 14), bool], Tensor[(3, 10, 14), bool], int64, Tensor[(250), float64], Tensor[(128), int64], Tensor[(3, 10, 14), bool]) */
}

def @func_5187() -> Tensor[(2, 5, 8), float32] {
  @func_1609() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_2132() -> Tensor[(2, 5, 8), bool] {
  @func_2130() /* ty=Tensor[(2, 5, 8), bool] */
}

def @func_5153() -> (Tensor[(2, 5, 8), float32],) {
  @func_5151() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_2487() -> (Tensor[(2, 5, 8), float64],) {
  @func_2485() /* ty=(Tensor[(2, 5, 8), float64],) */
}

def @func_794() -> Tensor[(2, 5, 8), float32] {
  @func_792() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_4010() -> Tensor[(2, 5, 8), float32] {
  @func_1450() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_5929() -> (Tensor[(2, 5, 8), int32],) {
  @func_5927() /* ty=(Tensor[(2, 5, 8), int32],) */
}

def @func_4793() -> (Tensor[(2, 5, 8), float32],) {
  %219 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %217 = @func_3741() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %218 = %217.0;
    (%218,)
  };
  %219() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_4454(%var_4435: Tensor[(6, 11, 7), float32], %var_4436: Tensor[(6, 11, 7), float32]) -> (Tensor[(6, 11, 7), float32],) {
  %220 = cast(%var_4436, dtype="float32") /* ty=Tensor[(6, 11, 7), float32] */;
  %221 = shape_of(%var_4435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%var_4435, dtype="float32") /* ty=Tensor[(6, 11, 7), float32] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %224 = minimum(%222, %223) /* ty=Tensor[(6, 11, 7), float32] */;
  (%224,)
}

def @func_5866() -> Tensor[(2, 5, 8), float32] {
  %226 = fn () -> Tensor[(2, 5, 8), float32] {
    %225 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %225.0
  };
  %226() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_8091() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %227 = @func_1892() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %228 = @func_5374() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %229 = @func_5432() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %230 = %227.1;
  %231 = %228.0;
  %232 = %229.0;
  (%230, %231, %232)
}

def @func_1831() -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %237 = fn () -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
    %233 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %234 = @func_1659() /* ty=Tensor[(2, 5, 8), float64] */;
    %235 = %233.0;
    %236 = @func_1751() /* ty=Tensor[(2, 5, 8), float32] */;
    (%234, %235, %236)
  };
  %237() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_7055() -> (Tensor[(2, 5, 8), float32],) {
  @func_7053() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_7818() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), int64], Tensor[(384), float64]) {
  @func_7816() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), int64], Tensor[(384), float64]) */
}

def @func_1514() -> (Tensor[(2, 5, 8), float32],) {
  @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_1893() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %245 = fn () -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
    %238 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %239 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %240 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %241 = @func_792() /* ty=Tensor[(2, 5, 8), float32] */;
    %242 = %238.0;
    %243 = %239.1;
    %244 = %240.0;
    (%241, %242, %243, %244)
  };
  %245() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_3260(%var_3206: Tensor[(384), float64], %var_3223: Tensor[(96), uint8], %var_3247: Tensor[(3072), float32], %var_3248: Tensor[(55, 10), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), int8], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(112, 4), bool], Tensor[(384), bool], Tensor[(2, 5, 8), float32], Tensor[(3072), float32], Tensor[(55, 10), float32]) {
  %246 = cast(%var_3206, dtype="float64") /* ty=Tensor[(384), float64] */;
  %247 = reshape(%246, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %248 = @func_1093(%247) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */;
  %249 = cast(meta[relay.Constant][9] /* ty=Tensor[(384), float64] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %250 = shape_of(%var_3206, dtype="int32") /* ty=Tensor[(1), int32] */;
  %251 = cast(%var_3206, dtype="int8") /* ty=Tensor[(384), int8] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?), int8] */;
  %253 = cast(%var_3223, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %254 = reshape(%253, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), uint8] */;
  %255 = cast(meta[relay.Constant][10] /* ty=Tensor[(112, 4), float64] */, dtype="float64") /* ty=Tensor[(112, 4), float64] */;
  %256 = reshape(%255, newshape=[4, 7, 16]) /* ty=Tensor[(4, 7, 16), float64] */;
  %257 = @func_1319(%256) /* ty=(Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), bool]) */;
  %258 = %257.1;
  %259 = cast(%258, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %260 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(112, 4), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %261 = cast(meta[relay.Constant][10] /* ty=Tensor[(112, 4), float64] */, dtype="bool") /* ty=Tensor[(112, 4), bool] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %263 = cast(meta[relay.Constant][11] /* ty=Tensor[(384), float64] */, dtype="bool") /* ty=Tensor[(384), bool] */;
  %264 = shape_of(%var_3206, dtype="int32") /* ty=Tensor[(1), int32] */;
  %265 = cast(%var_3206, dtype="bool") /* ty=Tensor[(384), bool] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?), bool] */;
  %267 = cast(%var_3247, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %268 = greater_equal(%265, %266) /* ty=Tensor[(384), bool] */;
  %269 = cast(%268, dtype="float64") /* ty=Tensor[(384), float64] */;
  %270 = cast(%var_3248, dtype="float32") /* ty=Tensor[(55, 10), float32] */;
  %271 = reshape(%267, newshape=[16, 12, 16]) /* ty=Tensor[(16, 12, 16), float32] */;
  %272 = reshape(%269, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %273 = reshape(%270, newshape=[1, 550]) /* ty=Tensor[(1, 550), float32] */;
  %274 = @func_2938(%271, %272, %273) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(5, 10, 11), uint64], Tensor[(1, 550), float32], Tensor[(16, 12, 16), uint8], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float32], Tensor[(378), float32]) */;
  %275 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %276 = %248.1;
  %277 = multiply(%251, %252) /* ty=Tensor[(384), int8] */;
  %278 = @func_2832(%254) /* ty=Tensor[(4, 12, 2), bool] */;
  %279 = less_equal(%261, %262) /* ty=Tensor[(112, 4), bool] */;
  %280 = %274.7;
  (%275, %276, %277, %278, %var_3223, %279, %268, %280, %var_3247, %var_3248)
}

def @func_3513(%var_3511: uint32, %var_3512: Tensor[(8, 6, 1), uint32]) -> (Tensor[(8, 6, 1), bool], Tensor[(2, 5, 8), float32]) {
  @func_3509(%var_3511, %var_3512) /* ty=(Tensor[(8, 6, 1), bool], Tensor[(2, 5, 8), float32]) */
}

def @func_6131() -> Tensor[(2, 5, 8), float32] {
  @func_6129() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_6935() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %284 = fn () -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
    %281 = @func_4792() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %282 = %281.0;
    %283 = @func_5187() /* ty=Tensor[(2, 5, 8), float32] */;
    (%282, %283)
  };
  %284() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_3093() -> (Tensor[(2, 5, 8), float64],) {
  @func_3091() /* ty=(Tensor[(2, 5, 8), float64],) */
}

def @func_2943(%var_2940: Tensor[(16, 12, 16), float32], %var_2941: Tensor[(384), float64], %var_2942: Tensor[(1, 550), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(5, 10, 11), uint64], Tensor[(1, 550), float32], Tensor[(16, 12, 16), uint8], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float32], Tensor[(378), float32]) {
  @func_2938(%var_2940, %var_2941, %var_2942) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(5, 10, 11), uint64], Tensor[(1, 550), float32], Tensor[(16, 12, 16), uint8], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float32], Tensor[(378), float32]) */
}

def @func_3431() -> (Tensor[(2, 5, 8), float32],) {
  @func_3429() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_6039(%var_6037: int64, %var_6038: Tensor[(128), int64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), bool], int64, Tensor[(128), int64], Tensor[(378), float32]) {
  %298 = fn (%var_6027: int64, %var_6028: Tensor[(128), int64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), bool], int64, Tensor[(128), int64], Tensor[(378), float32]) {
    %285 = @func_5525() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %286 = cast(%var_6027, dtype="int64") /* ty=int64 */;
    %287 = cast(%var_6028, dtype="int64") /* ty=Tensor[(128), int64] */;
    %288 = cast(meta[relay.Constant][12] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %289 = cast(meta[relay.Constant][12] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %290 = reshape(%286, newshape=[]) /* ty=int64 */;
    %291 = reshape(%287, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), int64] */;
    %292 = reshape(%288, newshape=[378]) /* ty=Tensor[(378), float32] */;
    %293 = reshape(%289, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %294 = @func_293(%290, %291, %292, %293) /* ty=(Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) */;
    %295 = @func_2338() /* ty=Tensor[(2, 5, 8), float32] */;
    %296 = %285.0;
    %297 = %294.4;
    (%295, %296, %297, %var_6027, %var_6028, meta[relay.Constant][12] /* ty=Tensor[(378), float32] */)
  };
  %298(%var_6037, %var_6038) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), bool], int64, Tensor[(128), int64], Tensor[(378), float32]) */
}

def @func_7530(%var_7528: Tensor[(12, 22), float64]) -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(12, 22), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_7527(%var_7528) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(12, 22), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_4898(%var_4885: Tensor[(13, 11, 8), uint32]) -> Tensor[(13, 11, 8), uint32] {
  %299 = cast(%var_4885, dtype="uint32") /* ty=Tensor[(13, 11, 8), uint32] */;
  %300 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(13, 11, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 11, 8), uint32] */, dtype="uint32") /* ty=Tensor[(13, 11, 8), uint32] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  add(%301, %302) /* ty=Tensor[(13, 11, 8), uint32] */
}

def @func_5466(%var_5464: uint32, %var_5465: Tensor[(14, 7, 2), uint32]) -> (Tensor[(14, 7, 2), uint32], Tensor[(2, 5, 8), float32]) {
  %308 = fn (%var_5441: uint32, %var_5442: Tensor[(14, 7, 2), uint32]) -> (Tensor[(14, 7, 2), uint32], Tensor[(2, 5, 8), float32]) {
    %303 = cast(%var_5441, dtype="uint32") /* ty=uint32 */;
    %304 = cast(%var_5442, dtype="uint32") /* ty=Tensor[(14, 7, 2), uint32] */;
    %305 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %306 = multiply(%303, %304) /* ty=Tensor[(14, 7, 2), uint32] */;
    %307 = %305.0;
    (%306, %307)
  };
  %308(%var_5464, %var_5465) /* ty=(Tensor[(14, 7, 2), uint32], Tensor[(2, 5, 8), float32]) */
}

def @func_7650(%var_7637: Tensor[(8, 4, 15), int32]) -> (Tensor[(8, 4, 15), bool], Tensor[(8, 4, 15), bool]) {
  %309 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 4, 15), int32] */, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %310 = shape_of(%var_7637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%var_7637, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %313 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 4, 15), int32] */, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %314 = shape_of(%var_7637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_7637, dtype="bool") /* ty=Tensor[(8, 4, 15), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %317 = less_equal(%311, %312) /* ty=Tensor[(8, 4, 15), bool] */;
  %318 = greater_equal(%315, %316) /* ty=Tensor[(8, 4, 15), bool] */;
  (%317, %318)
}

def @func_4558(%var_4555: Tensor[(8, 11, 12), int64], %var_4556: Tensor[(8, 11, 12), int64], %var_4557: Tensor[(8, 11, 12), float32]) -> (Tensor[(8, 11, 12), int64], Tensor[(8, 11, 12), uint8]) {
  @func_4553(%var_4555, %var_4556, %var_4557) /* ty=(Tensor[(8, 11, 12), int64], Tensor[(8, 11, 12), uint8]) */
}

def @func_3406(%var_3379: Tensor[(96), uint8], %var_3391: Tensor[(3072), float32], %var_3393: Tensor[(550), float32]) -> (Tensor[(4, 7, 16), float64], Tensor[(448), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(7, 9, 6), float32], Tensor[(6, 64), float64], Tensor[(550), float32], Tensor[(3072), float64]) {
  %319 = cast(meta[relay.Constant][15] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %320 = reshape(%319, newshape=[4, 7, 16]) /* ty=Tensor[(4, 7, 16), float64] */;
  %321 = @func_1319(%320) /* ty=(Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), bool]) */;
  %322 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %323 = %322.0;
  %324 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %325 = %324.0;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %327 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%323, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %330 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %331 = cast(%var_3379, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %332 = reshape(%331, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), uint8] */;
  %333 = cast(%var_3391, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %334 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 64), float64] */, dtype="float64") /* ty=Tensor[(6, 64), float64] */;
  %335 = cast(%var_3393, dtype="float32") /* ty=Tensor[(550), float32] */;
  %336 = reshape(%333, newshape=[16, 12, 16]) /* ty=Tensor[(16, 12, 16), float32] */;
  %337 = reshape(%334, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %338 = reshape(%335, newshape=[1, 550]) /* ty=Tensor[(1, 550), float32] */;
  %339 = @func_2938(%336, %337, %338) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(5, 10, 11), uint64], Tensor[(1, 550), float32], Tensor[(16, 12, 16), uint8], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float32], Tensor[(378), float32]) */;
  %340 = cast(meta[relay.Constant][17] /* ty=Tensor[(3072), float32] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %341 = shape_of(%var_3391, dtype="int32") /* ty=Tensor[(1), int32] */;
  %342 = cast(%var_3391, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?), float64] */;
  %344 = %321.0;
  %345 = floor_mod(%328, %329) /* ty=Tensor[(2, 5, 8), float64] */;
  %346 = %330.0;
  %347 = @func_2832(%332) /* ty=Tensor[(4, 12, 2), bool] */;
  %348 = %339.8;
  %349 = divide(%342, %343) /* ty=Tensor[(3072), float64] */;
  (%344, meta[relay.Constant][15] /* ty=Tensor[(448), float64] */, %345, %346, %347, %var_3379, %348, meta[relay.Constant][16] /* ty=Tensor[(6, 64), float64] */, %var_3393, %349)
}

def @func_7855() -> Tensor[(2, 5, 8), float32] {
  @func_7853() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_4830() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(1, 22), float64]) {
  %356 = fn () -> (Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(1, 22), float64]) {
    %350 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %351 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 22), float64] */, dtype="float64") /* ty=Tensor[(1, 22), float64] */;
    %352 = reshape(%351, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), float64] */;
    %353 = @func_2634(%352) /* ty=(Tensor[(2, 11, ?), int64],) */;
    %354 = %350.0;
    %355 = %353.0;
    (%354, %355, meta[relay.Constant][18] /* ty=Tensor[(1, 22), float64] */)
  };
  %356() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(1, 22), float64]) */
}

def @func_1722() -> (Tensor[(2, 5, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float32]) {
  %363 = fn () -> (Tensor[(2, 5, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float32]) {
    %357 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %358 = @func_1346() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), bool]) */;
    %359 = @func_1041() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %360 = %357.0;
    %361 = %358.1;
    %362 = %359.0;
    (%360, %361, %362)
  };
  %363() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float32]) */
}

def @func_4994() -> (Tensor[(2, 5, 8), float32],) {
  %365 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %364 = @func_1450() /* ty=Tensor[(2, 5, 8), float32] */;
    (%364,)
  };
  %365() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_608() -> (Tensor[(2, 5, 8), float32],) {
  @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_4430(%var_4413: int64) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(378), float32], Tensor[(550), float32], Tensor[(96), uint8], Tensor[(2, 1536), float32], Tensor[(550), float32], Tensor[(5, 7, 14), uint8], Tensor[(2, 5, 8), float32]) {
  %366 = @func_3045() /* ty=(Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32]) */;
  %367 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %368 = cast(%var_4413, dtype="int64") /* ty=int64 */;
  %369 = cast(meta[relay.Constant][19] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %370 = cast(meta[relay.Constant][20] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %371 = cast(meta[relay.Constant][20] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %372 = reshape(%368, newshape=[]) /* ty=int64 */;
  %373 = reshape(%369, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), int64] */;
  %374 = reshape(%370, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %375 = reshape(%371, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %376 = @func_293(%372, %373, %374, %375) /* ty=(Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) */;
  %377 = cast(meta[relay.Constant][21] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %378 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 1536), float32] */, dtype="float32") /* ty=Tensor[(2, 1536), float32] */;
  %379 = cast(meta[relay.Constant][23] /* ty=Tensor[(550), float32] */, dtype="float32") /* ty=Tensor[(550), float32] */;
  %380 = reshape(%377, newshape=[96]) /* ty=Tensor[(96), uint8] */;
  %381 = reshape(%378, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %382 = reshape(%379, newshape=[550]) /* ty=Tensor[(550), float32] */;
  %383 = @func_3406(%380, %381, %382) /* ty=(Tensor[(4, 7, 16), float64], Tensor[(448), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(7, 9, 6), float32], Tensor[(6, 64), float64], Tensor[(550), float32], Tensor[(3072), float64]) */;
  %384 = cast(%var_4413, dtype="uint8") /* ty=uint8 */;
  %385 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 14), int64] */, dtype="uint8") /* ty=Tensor[(5, 7, 14), uint8] */;
  %386 = %366.1;
  %387 = %367.0;
  %388 = %376.2;
  %389 = %383.8;
  %390 = logical_xor(%384, %385) /* ty=Tensor[(5, 7, 14), uint8] */;
  %391 = @func_1632() /* ty=Tensor[(2, 5, 8), float32] */;
  (%386, %387, %388, meta[relay.Constant][19] /* ty=Tensor[(128), int64] */, meta[relay.Constant][20] /* ty=Tensor[(378), float32] */, %389, meta[relay.Constant][21] /* ty=Tensor[(96), uint8] */, meta[relay.Constant][22] /* ty=Tensor[(2, 1536), float32] */, meta[relay.Constant][23] /* ty=Tensor[(550), float32] */, %390, %391)
}

def @func_5119() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_5117() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_5813(%var_5811: Tensor[(14, 16, 9), uint32], %var_5812: Tensor[(14, 16, 9), uint32]) -> (Tensor[(8, 11, 12), uint8], Tensor[(1056), int64], Tensor[(2, 5, 8), float32], Tensor[(14, 16, 9), float64], Tensor[(2, 5, 8), float32]) {
  %419 = fn (%var_5758: Tensor[(14, 16, 9), uint32], %var_5759: Tensor[(14, 16, 9), uint32]) -> (Tensor[(8, 11, 12), uint8], Tensor[(1056), int64], Tensor[(2, 5, 8), float32], Tensor[(14, 16, 9), float64], Tensor[(2, 5, 8), float32]) {
    %392 = cast(meta[relay.Constant][25] /* ty=Tensor[(1056), int64] */, dtype="int64") /* ty=Tensor[(1056), int64] */;
    %393 = cast(meta[relay.Constant][25] /* ty=Tensor[(1056), int64] */, dtype="int64") /* ty=Tensor[(1056), int64] */;
    %394 = cast(meta[relay.Constant][25] /* ty=Tensor[(1056), int64] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
    %395 = reshape(%392, newshape=[8, 11, 12]) /* ty=Tensor[(8, 11, 12), int64] */;
    %396 = reshape(%393, newshape=[8, 11, 12]) /* ty=Tensor[(8, 11, 12), int64] */;
    %397 = reshape(%394, newshape=[8, 11, 12]) /* ty=Tensor[(8, 11, 12), float32] */;
    %398 = @func_4553(%395, %396, %397) /* ty=(Tensor[(8, 11, 12), int64], Tensor[(8, 11, 12), uint8]) */;
    %399 = @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %400 = cast(%var_5759, dtype="bool") /* ty=Tensor[(14, 16, 9), bool] */;
    %401 = shape_of(%var_5758, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%var_5758, dtype="bool") /* ty=Tensor[(14, 16, 9), bool] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %404 = equal(%402, %403) /* ty=Tensor[(14, 16, 9), bool] */;
    %405 = cast(%var_5758, dtype="float64") /* ty=Tensor[(14, 16, 9), float64] */;
    %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(%404, dtype="float64") /* ty=Tensor[(14, 16, 9), float64] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %409 = mod(%407, %408) /* ty=Tensor[(14, 16, 9), float64] */;
    %410 = cast(%409, dtype="float64") /* ty=Tensor[(14, 16, 9), float64] */;
    %411 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
    %412 = cast(%404, dtype="float64") /* ty=Tensor[(14, 16, 9), float64] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %414 = @func_2994() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %415 = %398.1;
    %416 = %399.0;
    %417 = subtract(%412, %413) /* ty=Tensor[(14, 16, 9), float64] */;
    %418 = %414.0;
    (%415, meta[relay.Constant][25] /* ty=Tensor[(1056), int64] */, %416, %417, %418)
  };
  %419(%var_5811, %var_5812) /* ty=(Tensor[(8, 11, 12), uint8], Tensor[(1056), int64], Tensor[(2, 5, 8), float32], Tensor[(14, 16, 9), float64], Tensor[(2, 5, 8), float32]) */
}

def @func_2634(%var_2620: Tensor[(2, 11, 1), float64]) -> (Tensor[(2, 11, ?), int64],) {
  %420 = cast(%var_2620, dtype="float64") /* ty=Tensor[(2, 11, 1), float64] */;
  %421 = acos(%420) /* ty=Tensor[(2, 11, 1), float64] */;
  %422 = cast(%var_2620, dtype="int64") /* ty=Tensor[(2, 11, 1), int64] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="int64") /* ty=Tensor[(2, 11, 1), int64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %426 = right_shift(%424, %425) /* ty=Tensor[(2, 11, ?), int64] */;
  (%426,)
}

def @func_574() -> (Tensor[(2, 5, 8), float32],) {
  %429 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %427 = @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %428 = %427.0;
    (%428,)
  };
  %429() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_8220() -> Tensor[(2, 5, 8), float32] {
  %430 = fn () -> Tensor[(2, 5, 8), float32] {
    @func_3960() /* ty=Tensor[(2, 5, 8), float32] */
  };
  %430() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_4948() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(22), float64]) {
  %431 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %432 = @func_2365() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %433 = cast(meta[relay.Constant][26] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %434 = reshape(%433, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), float64] */;
  %435 = @func_2634(%434) /* ty=(Tensor[(2, 11, ?), int64],) */;
  %436 = %431.0;
  %437 = %432.1;
  %438 = %435.0;
  (%436, %437, %438, meta[relay.Constant][26] /* ty=Tensor[(22), float64] */)
}

def @func_747() -> Tensor[(2, 5, 8), float64] {
  %439 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %440 = cast(%439, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  sinh(%440) /* ty=Tensor[(2, 5, 8), float64] */
}

def @func_510() -> (Tensor[(2, 5, 8), float32],) {
  %441 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 5, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %442 = tan(%441) /* ty=Tensor[(2, 5, 8), float32] */;
  (%442,)
}

def @func_5189() -> Tensor[(2, 5, 8), float32] {
  @func_5187() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_4950() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(22), float64]) {
  @func_4948() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(22), float64]) */
}

def @func_3992() -> (Tensor[(2, 5, 8), float32],) {
  @func_3990() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_1170() -> (Tensor[(2, 5, 8), float32],) {
  %444 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %443 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
    (%443,)
  };
  %444() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_5914() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %445 = @func_4792() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %446 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %447 = %445.0;
  %448 = %446.0;
  (%447, %448)
}

def @func_5938() -> (Tensor[(384), float64], Tensor[(2, 5, 8), float32]) {
  %452 = fn () -> (Tensor[(384), float64], Tensor[(2, 5, 8), float32]) {
    %449 = @func_1346() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), bool]) */;
    %450 = %449.2;
    %451 = @func_5187() /* ty=Tensor[(2, 5, 8), float32] */;
    (%450, %451)
  };
  %452() /* ty=(Tensor[(384), float64], Tensor[(2, 5, 8), float32]) */
}

def @func_7139() -> (Tensor[(7, 9, 6), float64],) {
  %455 = fn () -> (Tensor[(7, 9, 6), float64],) {
    %453 = @func_6605() /* ty=(Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float64]) */;
    %454 = %453.2;
    (%454,)
  };
  %455() /* ty=(Tensor[(7, 9, 6), float64],) */
}

def @func_5916() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  @func_5914() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */
}

def @func_4012() -> Tensor[(2, 5, 8), float32] {
  @func_4010() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_8194(%var_8192: uint8, %var_8193: Tensor[(11, 8, 4), uint8]) -> Tensor[(11, 8, 4), uint32] {
  @func_8190(%var_8192, %var_8193) /* ty=Tensor[(11, 8, 4), uint32] */
}

def @func_5302() -> (Tensor[(1, 22), float64],) {
  @func_5300() /* ty=(Tensor[(1, 22), float64],) */
}

def @func_5218() -> (Tensor[(1, 22), float64],) {
  %458 = fn () -> (Tensor[(1, 22), float64],) {
    %456 = @func_4829() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(1, 22), float64]) */;
    %457 = %456.2;
    (%457,)
  };
  %458() /* ty=(Tensor[(1, 22), float64],) */
}

def @func_4433(%var_4431: int64) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(378), float32], Tensor[(550), float32], Tensor[(96), uint8], Tensor[(2, 1536), float32], Tensor[(550), float32], Tensor[(5, 7, 14), uint8], Tensor[(2, 5, 8), float32]) {
  @func_4430(%var_4431) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(378), float32], Tensor[(128), int64], Tensor[(378), float32], Tensor[(550), float32], Tensor[(96), uint8], Tensor[(2, 1536), float32], Tensor[(550), float32], Tensor[(5, 7, 14), uint8], Tensor[(2, 5, 8), float32]) */
}

def @func_7377() -> (Tensor[(2, 5, 8), int8], Tensor[(2, 5, 8), float32]) {
  %459 = @func_3990() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %460 = %459.0;
  %461 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 5, 8), float32] */, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %465 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %466 = add(%463, %464) /* ty=Tensor[(2, 5, 8), int8] */;
  %467 = %465.0;
  (%466, %467)
}

def @func_7591(%var_7589: Tensor[(96), uint8], %var_7590: Tensor[(3072), float32]) -> (Tensor[(2, 5, 8), float64], Tensor[(3072), float64], Tensor[(96), uint8], Tensor[(3072), float32], Tensor[(275, 2), float32]) {
  @func_7587(%var_7589, %var_7590) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(3072), float64], Tensor[(96), uint8], Tensor[(3072), float32], Tensor[(275, 2), float32]) */
}

def @func_3600() -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %484 = fn () -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
    %468 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
    %469 = cast(%468, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
    %470 = cast(meta[relay.Constant][29] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %471 = reshape(%470, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
    %472 = @func_1093(%471) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */;
    %473 = cast(meta[relay.Constant][29] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %474 = reshape(%473, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
    %475 = @func_1093(%474) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */;
    %476 = @func_3045() /* ty=(Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32]) */;
    %477 = @func_2365() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %478 = acos(%469) /* ty=Tensor[(2, 5, 8), float64] */;
    %479 = %472.1;
    %480 = %475.1;
    %481 = %476.0;
    %482 = %477.0;
    %483 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
    (%478, %479, meta[relay.Constant][29] /* ty=Tensor[(384), float64] */, %480, %481, %482, %483)
  };
  %484() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_6077(%var_6075: uint32) -> (Tensor[(12, 7, 15), bool], Tensor[(8, 6, 1), bool], uint32) {
  @func_6074(%var_6075) /* ty=(Tensor[(12, 7, 15), bool], Tensor[(8, 6, 1), bool], uint32) */
}

def @func_5245() -> (Tensor[(2, 5, 8), float32],) {
  %486 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %485 = @func_1450() /* ty=Tensor[(2, 5, 8), float32] */;
    (%485,)
  };
  %486() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_3960() -> Tensor[(2, 5, 8), float32] {
  %487 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %487.0
}

def @func_6301() -> (Tensor[(2, 5, 8), float32],) {
  %490 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %488 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %489 = %488.1;
    (%489,)
  };
  %490() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_6074(%var_6068: uint32) -> (Tensor[(12, 7, 15), bool], Tensor[(8, 6, 1), bool], uint32) {
  %491 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 7, 15), int64] */, dtype="bool") /* ty=Tensor[(12, 7, 15), bool] */;
  %492 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(12, 7, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 7, 15), int64] */, dtype="bool") /* ty=Tensor[(12, 7, 15), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = cast(%var_6068, dtype="uint32") /* ty=uint32 */;
  %496 = reshape(%495, newshape=[]) /* ty=uint32 */;
  %497 = @func_5284(%496) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32]) */;
  %498 = equal(%493, %494) /* ty=Tensor[(12, 7, 15), bool] */;
  %499 = %497.1;
  (%498, %499, %var_6068)
}

def @func_823() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_821() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_5434() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  @func_5432() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */
}

def @func_948(%var_919: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %500 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %501 = @func_821() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %502 = %501.1;
  %503 = cast(%var_919, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %507 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %509 = %500.0;
  %510 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %511 = floor_divide(%505, %506) /* ty=Tensor[(2, 5, 8), float64] */;
  %512 = log2(%508) /* ty=Tensor[(2, 5, 8), float32] */;
  %513 = @func_792() /* ty=Tensor[(2, 5, 8), float32] */;
  (%509, %510, %511, %512, %513)
}

def @func_7666() -> Tensor[(2, 5, 8), float32] {
  %514 = @func_6934() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %514.0
}

def @func_1096(%var_1094: Tensor[(8, 6, 8), float64]) -> (Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) {
  @func_1093(%var_1094) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */
}

def @func_7561() -> (Tensor[(2, 5, 8), bool],) {
  %515 = @func_2130() /* ty=Tensor[(2, 5, 8), bool] */;
  (%515,)
}

def @func_1912() -> (Tensor[(2, 5, 8), float32],) {
  %517 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %516 = @func_1632() /* ty=Tensor[(2, 5, 8), float32] */;
    (%516,)
  };
  %517() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_4729(%var_4685: Tensor[(2, 5, 8), float32], %var_4727: Tensor[(384), float64]) -> (Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) {
  %518 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %519 = %518.0;
  %520 = cast(%var_4685, dtype="int64") /* ty=Tensor[(2, 5, 8), int64] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="int64") /* ty=Tensor[(2, 5, 8), int64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %524 = cast(%var_4727, dtype="float64") /* ty=Tensor[(384), float64] */;
  %525 = reshape(%524, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %526 = @func_1124(%525) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
  %527 = bitwise_and(%522, %523) /* ty=Tensor[(2, 5, 8), int64] */;
  %528 = @func_1751() /* ty=Tensor[(2, 5, 8), float32] */;
  %529 = %526.1;
  (%527, %528, %529, %var_4727)
}

def @func_298(%var_294: int64, %var_295: Tensor[(8, 2, 8), int64], %var_296: Tensor[(378), float32], %var_297: Tensor[(7, 9, 6), float32]) -> (Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) {
  %567 = fn (%var_175: int64, %var_176: Tensor[(8, 2, 8), int64], %var_192: Tensor[(378), float32], %var_248: Tensor[(7, 9, 6), float32]) -> (Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) {
    %530 = cast(%var_175, dtype="int64") /* ty=int64 */;
    %531 = cast(%var_176, dtype="int64") /* ty=Tensor[(8, 2, 8), int64] */;
    %532 = cast(%var_192, dtype="float32") /* ty=Tensor[(378), float32] */;
    %533 = reshape(%532, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %534 = @func_144(%533) /* ty=(Tensor[(7, 9, 6), float32],) */;
    %535 = cast(meta[relay.Constant][32] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %536 = shape_of(%var_192, dtype="int32") /* ty=Tensor[(1), int32] */;
    %537 = cast(%var_192, dtype="float32") /* ty=Tensor[(378), float32] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?), float32] */;
    %539 = cast(meta[relay.Constant][32] /* ty=Tensor[(378), float32] */, dtype="bool") /* ty=Tensor[(378), bool] */;
    %540 = shape_of(%var_192, dtype="int32") /* ty=Tensor[(1), int32] */;
    %541 = cast(%var_192, dtype="bool") /* ty=Tensor[(378), bool] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?), bool] */;
    %543 = cast(meta[relay.Constant][32] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %544 = reshape(%543, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %545 = @func_144(%544) /* ty=(Tensor[(7, 9, 6), float32],) */;
    %546 = %545.0;
    %547 = cast(%546, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
    %548 = cast(%var_175, dtype="bool") /* ty=bool */;
    %549 = cast(%var_248, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
    %550 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(%546, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %553 = greater_equal(%541, %542) /* ty=Tensor[(378), bool] */;
    %554 = cast(%553, dtype="float32") /* ty=Tensor[(378), float32] */;
    %555 = reshape(%554, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %556 = @func_144(%555) /* ty=(Tensor[(7, 9, 6), float32],) */;
    %557 = cast(%var_192, dtype="float32") /* ty=Tensor[(378), float32] */;
    %558 = reshape(%557, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %559 = @func_144(%558) /* ty=(Tensor[(7, 9, 6), float32],) */;
    %560 = add(%530, %531) /* ty=Tensor[(8, 2, 8), int64] */;
    %561 = %534.0;
    %562 = minimum(%537, %538) /* ty=Tensor[(378), float32] */;
    %563 = less(%547, %548) /* ty=Tensor[(7, 9, 6), bool] */;
    %564 = logical_or(%551, %552) /* ty=Tensor[(7, 9, 6), bool] */;
    %565 = %556.0;
    %566 = %559.0;
    (%560, %561, %562, %553, %563, %564, %565, %566)
  };
  %567(%var_294, %var_295, %var_296, %var_297) /* ty=(Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) */
}

def @func_6806() -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) {
  %568 = @func_5432() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %569 = %568.1;
  %570 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  (%569, %570)
}

def @func_2938(%var_2890: Tensor[(16, 12, 16), float32], %var_2899: Tensor[(384), float64], %var_2920: Tensor[(1, 550), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(5, 10, 11), uint64], Tensor[(1, 550), float32], Tensor[(16, 12, 16), uint8], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float32], Tensor[(378), float32]) {
  %571 = @func_821() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %572 = cast(%var_2899, dtype="float64") /* ty=Tensor[(384), float64] */;
  %573 = reshape(%572, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %574 = @func_2599(%573) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
  %575 = cast(%var_2920, dtype="float32") /* ty=Tensor[(1, 550), float32] */;
  %576 = cast(%var_2920, dtype="float32") /* ty=Tensor[(1, 550), float32] */;
  %577 = reshape(%575, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %578 = reshape(%576, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %579 = cast(%var_2890, dtype="float32") /* ty=Tensor[(16, 12, 16), float32] */;
  %580 = sigmoid(%579) /* ty=Tensor[(16, 12, 16), float32] */;
  %581 = cast(%var_2890, dtype="uint8") /* ty=Tensor[(16, 12, 16), uint8] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="uint8") /* ty=Tensor[(16, 12, 16), uint8] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %585 = @func_1169() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %586 = cast(meta[relay.Constant][33] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %587 = reshape(%586, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
  %588 = @func_144(%587) /* ty=(Tensor[(7, 9, 6), float32],) */;
  %589 = @func_792() /* ty=Tensor[(2, 5, 8), float32] */;
  %590 = %571.1;
  %591 = %574.1;
  %592 = @func_1791(%577, %578) /* ty=Tensor[(5, 10, 11), uint64] */;
  %593 = left_shift(%583, %584) /* ty=Tensor[(16, 12, 16), uint8] */;
  %594 = %585.0;
  %595 = %588.0;
  (%589, %590, %591, %var_2899, %592, %var_2920, %593, %594, %595, meta[relay.Constant][33] /* ty=Tensor[(378), float32] */)
}

def @func_2050() -> (Tensor[(4, 10, 10), float32],) {
  @func_2048() /* ty=(Tensor[(4, 10, 10), float32],) */
}

def @func_5151() -> (Tensor[(2, 5, 8), float32],) {
  %596 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %597 = %596.0;
  (%597,)
}

def @func_5687() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float64], Tensor[(1, 22), float64], Tensor[(2, 5, 8), float32]) {
  %598 = @func_4610() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %599 = @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %600 = @func_3161() /* ty=(Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(2, 5, 8), bool]) */;
  %601 = %600.0;
  %602 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = @func_3889() /* ty=(Tensor[(2, 5, 8), float64],) */;
  %607 = @func_5300() /* ty=(Tensor[(1, 22), float64],) */;
  %608 = @func_2994() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %609 = %598.0;
  %610 = %599.0;
  %611 = greater(%604, %605) /* ty=Tensor[(7, 9, 6), bool] */;
  %612 = %606.0;
  %613 = %607.0;
  %614 = %608.1;
  (%609, %610, %611, %612, %613, %614)
}

def @func_5852(%var_5851: uint32) -> (Tensor[(2, 5, 8), float64], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32], Tensor[(2, 5, 8), float32]) {
  %625 = fn (%var_5843: uint32) -> (Tensor[(2, 5, 8), float64], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32], Tensor[(2, 5, 8), float32]) {
    %615 = @func_5374() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
    %616 = cast(%var_5843, dtype="uint32") /* ty=uint32 */;
    %617 = cast(meta[relay.Constant][35] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %618 = reshape(%616, newshape=[]) /* ty=uint32 */;
    %619 = reshape(%617, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), uint32] */;
    %620 = @func_3509(%618, %619) /* ty=(Tensor[(8, 6, 1), bool], Tensor[(2, 5, 8), float32]) */;
    %621 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %622 = %615.1;
    %623 = %620.0;
    %624 = %621.0;
    (%622, %623, %var_5843, meta[relay.Constant][35] /* ty=Tensor[(48), uint32] */, %624)
  };
  %625(%var_5851) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32], Tensor[(2, 5, 8), float32]) */
}

def @func_1319(%var_1281: Tensor[(4, 7, 16), float64]) -> (Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), bool]) {
  %626 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %627 = sigmoid(%626) /* ty=Tensor[(4, 7, 16), float64] */;
  %628 = cast(%var_1281, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %632 = floor_divide(%630, %631) /* ty=Tensor[(4, 7, 16), float64] */;
  %633 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %634 = acosh(%633) /* ty=Tensor[(4, 7, 16), float64] */;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %636 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%632, dtype="float64") /* ty=Tensor[(4, 7, 16), float64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %639 = cast(%627, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %640 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%634, dtype="bool") /* ty=Tensor[(4, 7, 16), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = mod(%637, %638) /* ty=Tensor[(4, 7, 16), float64] */;
  %644 = logical_and(%641, %642) /* ty=Tensor[(4, 7, 16), bool] */;
  (%643, %644)
}

def @main() -> Tensor[(5, 9, 8), int16] {
  %645 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 9, 8), int16] */, dtype="int16") /* ty=Tensor[(5, 9, 8), int16] */;
  %646 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(5, 9, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 9, 8), int16] */, dtype="int16") /* ty=Tensor[(5, 9, 8), int16] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%647, %648) /* ty=Tensor[(5, 9, 8), int16] */
}

def @func_1244(%var_1243: Tensor[(2, 5, 8), float32]) -> Tensor[(2, 5, 8), bool] {
  %654 = fn (%var_1235: Tensor[(2, 5, 8), float32]) -> Tensor[(2, 5, 8), bool] {
    %649 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
    %650 = cast(%var_1235, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
    %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
    %652 = cast(%649, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
    %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%652, %653) /* ty=Tensor[(2, 5, 8), bool] */
  };
  %654(%var_1243) /* ty=Tensor[(2, 5, 8), bool] */
}

def @func_2885(%var_2869: Tensor[(2, 5, 8), float64]) -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), uint64]) {
  %655 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %656 = cast(%var_2869, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%655, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %660 = cast(%655, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %661 = cos(%660) /* ty=Tensor[(2, 5, 8), float64] */;
  %662 = cast(%var_2869, dtype="uint64") /* ty=Tensor[(2, 5, 8), uint64] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="uint64") /* ty=Tensor[(2, 5, 8), uint64] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %666 = minimum(%658, %659) /* ty=Tensor[(2, 5, 8), float64] */;
  %667 = multiply(%664, %665) /* ty=Tensor[(2, 5, 8), uint64] */;
  (%666, %667)
}

def @func_1124(%var_1116: Tensor[(384), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) {
  %668 = cast(%var_1116, dtype="float64") /* ty=Tensor[(384), float64] */;
  %669 = reshape(%668, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %670 = @func_1093(%669) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */;
  %671 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
  %672 = %670.1;
  (%671, %672, %var_1116)
}

def @func_7257(%var_7255: Tensor[(7, 9, 6), float32]) -> (Tensor[(7, 9, 6), int32], Tensor[(2, 5, 8), float32]) {
  @func_7254(%var_7255) /* ty=(Tensor[(7, 9, 6), int32], Tensor[(2, 5, 8), float32]) */
}

def @func_4458(%var_4456: Tensor[(6, 11, 7), float32], %var_4457: Tensor[(6, 11, 7), float32]) -> (Tensor[(6, 11, 7), float32],) {
  @func_4454(%var_4456, %var_4457) /* ty=(Tensor[(6, 11, 7), float32],) */
}

def @func_2822(%var_2819: Tensor[(4, 14, 14), float32], %var_2820: Tensor[(4, 14, 14), float32], %var_2821: int64) -> (Tensor[(2, 5, 8), float32], Tensor[(4, 14, 14), bool], Tensor[(7, 9, 6), int16], Tensor[(125, 2), float64], int64, Tensor[(128), int64], Tensor[(2, 5, 8), float32]) {
  %695 = fn (%var_2770: Tensor[(4, 14, 14), float32], %var_2771: Tensor[(4, 14, 14), float32], %var_2811: int64) -> (Tensor[(2, 5, 8), float32], Tensor[(4, 14, 14), bool], Tensor[(7, 9, 6), int16], Tensor[(125, 2), float64], int64, Tensor[(128), int64], Tensor[(2, 5, 8), float32]) {
    %673 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %674 = cast(%var_2771, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
    %675 = shape_of(%var_2770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %676 = cast(%var_2770, dtype="float32") /* ty=Tensor[(4, 14, 14), float32] */;
    %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %678 = power(%676, %677) /* ty=Tensor[(4, 14, 14), float32] */;
    %679 = cast(%var_2771, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
    %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(%678, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %683 = cast(meta[relay.Constant][39] /* ty=Tensor[(125, 2), float64] */, dtype="float64") /* ty=Tensor[(125, 2), float64] */;
    %684 = cast(%var_2811, dtype="int64") /* ty=int64 */;
    %685 = cast(meta[relay.Constant][40] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %686 = reshape(%683, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), float64] */;
    %687 = reshape(%684, newshape=[]) /* ty=int64 */;
    %688 = reshape(%685, newshape=[128]) /* ty=Tensor[(128), int64] */;
    %689 = @func_395(%686, %687, %688) /* ty=(Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(7, 9, 6), float32], int64, Tensor[(128), int64], Tensor[(7, 9, 6), int16], Tensor[(10, 5, 5), float64], Tensor[(7, 9, 6), bool]) */;
    %690 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %691 = %673.0;
    %692 = logical_or(%681, %682) /* ty=Tensor[(4, 14, 14), bool] */;
    %693 = %689.5;
    %694 = %690.1;
    (%691, %692, %693, meta[relay.Constant][39] /* ty=Tensor[(125, 2), float64] */, %var_2811, meta[relay.Constant][40] /* ty=Tensor[(128), int64] */, %694)
  };
  %695(%var_2819, %var_2820, %var_2821) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(4, 14, 14), bool], Tensor[(7, 9, 6), int16], Tensor[(125, 2), float64], int64, Tensor[(128), int64], Tensor[(2, 5, 8), float32]) */
}

def @func_1795(%var_1793: Tensor[(5, 10, 11), float32], %var_1794: Tensor[(5, 10, 11), float32]) -> Tensor[(5, 10, 11), uint64] {
  @func_1791(%var_1793, %var_1794) /* ty=Tensor[(5, 10, 11), uint64] */
}

def @func_2170() -> (Tensor[(9, 6, 14), float64], Tensor[(4, 10, 10), float32], Tensor[(2, 5, 8), float32], Tensor[(80), float32]) {
  %704 = fn () -> (Tensor[(9, 6, 14), float64], Tensor[(4, 10, 10), float32], Tensor[(2, 5, 8), float32], Tensor[(80), float32]) {
    %696 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(9, 6, 14), float64] */;
    %697 = @func_2048() /* ty=(Tensor[(4, 10, 10), float32],) */;
    %698 = cast(meta[relay.Constant][42] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
    %699 = reshape(%698, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
    %700 = @func_948(%699) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %701 = log(%696) /* ty=Tensor[(9, 6, 14), float64] */;
    %702 = %697.0;
    %703 = %700.1;
    (%701, %702, %703, meta[relay.Constant][42] /* ty=Tensor[(80), float32] */)
  };
  %704() /* ty=(Tensor[(9, 6, 14), float64], Tensor[(4, 10, 10), float32], Tensor[(2, 5, 8), float32], Tensor[(80), float32]) */
}

def @func_5300() -> (Tensor[(1, 22), float64],) {
  %705 = @func_5217() /* ty=(Tensor[(1, 22), float64],) */;
  %706 = %705.0;
  (%706,)
}

def @func_2469() -> (Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) {
  @func_2467() /* ty=(Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) */
}

def @func_7668() -> Tensor[(2, 5, 8), float32] {
  @func_7666() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_4172() -> Tensor[(2, 5, 8), float32] {
  %707 = @func_1554() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %707.0
}

def @func_6808() -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) {
  @func_6806() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) */
}

def @func_4733(%var_4731: Tensor[(2, 5, 8), float32], %var_4732: Tensor[(384), float64]) -> (Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) {
  @func_4729(%var_4731, %var_4732) /* ty=(Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */
}

def @func_1071() -> Tensor[(2, 5, 8), float32] {
  %709 = fn () -> Tensor[(2, 5, 8), float32] {
    %708 = @func_1041() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %708.1
  };
  %709() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_4553(%var_4528: Tensor[(8, 11, 12), int64], %var_4529: Tensor[(8, 11, 12), int64], %var_4548: Tensor[(8, 11, 12), float32]) -> (Tensor[(8, 11, 12), int64], Tensor[(8, 11, 12), uint8]) {
  %710 = cast(%var_4529, dtype="int64") /* ty=Tensor[(8, 11, 12), int64] */;
  %711 = shape_of(%var_4528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%var_4528, dtype="int64") /* ty=Tensor[(8, 11, 12), int64] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %714 = cast(%var_4529, dtype="float32") /* ty=Tensor[(8, 11, 12), float32] */;
  %715 = sinh(%714) /* ty=Tensor[(8, 11, 12), float32] */;
  %716 = cast(%var_4548, dtype="uint8") /* ty=Tensor[(8, 11, 12), uint8] */;
  %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%715, dtype="uint8") /* ty=Tensor[(8, 11, 12), uint8] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %720 = subtract(%712, %713) /* ty=Tensor[(8, 11, 12), int64] */;
  %721 = add(%718, %719) /* ty=Tensor[(8, 11, 12), uint8] */;
  (%720, %721)
}

def @func_2282() -> Tensor[(2, 5, 8), float32] {
  @func_2280() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_2338() -> Tensor[(2, 5, 8), float32] {
  %722 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %722.0
}

def @func_3068(%var_3067: Tensor[(9, 10, 15), float64]) -> Tensor[(9, 10, 15), float64] {
  %725 = fn (%var_3057: Tensor[(9, 10, 15), float64]) -> Tensor[(9, 10, 15), float64] {
    %723 = cast(-9.73591f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %724 = cast(%var_3057, dtype="float64") /* ty=Tensor[(9, 10, 15), float64] */;
    floor_mod(%723, %724) /* ty=Tensor[(9, 10, 15), float64] */
  };
  %725(%var_3067) /* ty=Tensor[(9, 10, 15), float64] */
}

def @func_2754(%var_2752: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  @func_2751(%var_2752) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */
}

def @func_1512() -> (Tensor[(2, 5, 8), float32],) {
  %726 = @func_1169() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %727 = %726.0;
  (%727,)
}

def @func_1791(%var_1779: Tensor[(5, 10, 11), float32], %var_1780: Tensor[(5, 10, 11), float32]) -> Tensor[(5, 10, 11), uint64] {
  %728 = cast(%var_1780, dtype="float32") /* ty=Tensor[(5, 10, 11), float32] */;
  %729 = shape_of(%var_1779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%var_1779, dtype="float32") /* ty=Tensor[(5, 10, 11), float32] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %732 = floor_mod(%730, %731) /* ty=Tensor[(5, 10, 11), float32] */;
  %733 = cast(%732, dtype="uint64") /* ty=Tensor[(5, 10, 11), uint64] */;
  %734 = shape_of(%var_1780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%var_1780, dtype="uint64") /* ty=Tensor[(5, 10, 11), uint64] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%735, %736) /* ty=Tensor[(5, 10, 11), uint64] */
}

def @func_1954(%var_1952: Tensor[(2, 12, 3), uint8], %var_1953: Tensor[(2, 12, 3), uint8]) -> Tensor[(2, 12, 3), uint8] {
  @func_1950(%var_1952, %var_1953) /* ty=Tensor[(2, 12, 3), uint8] */
}

def @func_1633() -> Tensor[(2, 5, 8), float32] {
  %738 = fn () -> Tensor[(2, 5, 8), float32] {
    %737 = @func_1169() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %737.0
  };
  %738() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_2751(%var_2739: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %739 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %740 = @func_1512() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %741 = @func_1070() /* ty=Tensor[(2, 5, 8), float32] */;
  %742 = cast(%var_2739, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %746 = %739.1;
  %747 = @func_2130() /* ty=Tensor[(2, 5, 8), bool] */;
  %748 = %740.0;
  %749 = mod(%744, %745) /* ty=Tensor[(2, 5, 8), float64] */;
  (%746, %747, %748, %749)
}

def @func_2834(%var_2833: Tensor[(4, 12, 2), uint8]) -> Tensor[(4, 12, 2), bool] {
  %754 = fn (%var_2828: Tensor[(4, 12, 2), uint8]) -> Tensor[(4, 12, 2), bool] {
    %750 = cast(%var_2828, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
    %751 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(4, 12, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %752 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 12, 2), uint8] */, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
    %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%752, %753) /* ty=Tensor[(4, 12, 2), bool] */
  };
  %754(%var_2833) /* ty=Tensor[(4, 12, 2), bool] */
}

def @func_5117() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %755 = @func_792() /* ty=Tensor[(2, 5, 8), float32] */;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %757 = sigmoid(%756) /* ty=Tensor[(2, 5, 8), float32] */;
  %758 = @func_3960() /* ty=Tensor[(2, 5, 8), float32] */;
  (%757, %758)
}

def @func_6606() -> (Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float64]) {
  %773 = fn () -> (Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float64]) {
    %759 = @func_5687() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float64], Tensor[(1, 22), float64], Tensor[(2, 5, 8), float32]) */;
    %760 = %759.2;
    %761 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 9, 6), bool] */, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
    %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
    %763 = cast(%760, dtype="bool") /* ty=Tensor[(7, 9, 6), bool] */;
    %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %765 = @func_4792() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %766 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 9, 6), bool] */, dtype="float64") /* ty=Tensor[(7, 9, 6), float64] */;
    %767 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
    %768 = cast(%760, dtype="float64") /* ty=Tensor[(7, 9, 6), float64] */;
    %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %770 = equal(%763, %764) /* ty=Tensor[(7, 9, 6), bool] */;
    %771 = %765.0;
    %772 = floor_mod(%768, %769) /* ty=Tensor[(7, 9, 6), float64] */;
    (%770, %771, %772)
  };
  %773() /* ty=(Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), float64]) */
}

def @func_7587(%var_7577: Tensor[(96), uint8], %var_7578: Tensor[(3072), float32]) -> (Tensor[(2, 5, 8), float64], Tensor[(3072), float64], Tensor[(96), uint8], Tensor[(3072), float32], Tensor[(275, 2), float32]) {
  %774 = @func_3091() /* ty=(Tensor[(2, 5, 8), float64],) */;
  %775 = cast(%var_7577, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %776 = cast(%var_7578, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %777 = cast(meta[relay.Constant][45] /* ty=Tensor[(275, 2), float32] */, dtype="float32") /* ty=Tensor[(275, 2), float32] */;
  %778 = reshape(%775, newshape=[96]) /* ty=Tensor[(96), uint8] */;
  %779 = reshape(%776, newshape=[3072]) /* ty=Tensor[(3072), float32] */;
  %780 = reshape(%777, newshape=[550]) /* ty=Tensor[(550), float32] */;
  %781 = @func_3406(%778, %779, %780) /* ty=(Tensor[(4, 7, 16), float64], Tensor[(448), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(4, 12, 2), bool], Tensor[(96), uint8], Tensor[(7, 9, 6), float32], Tensor[(6, 64), float64], Tensor[(550), float32], Tensor[(3072), float64]) */;
  %782 = %774.0;
  %783 = %781.9;
  (%782, %783, %var_7577, %var_7578, meta[relay.Constant][45] /* ty=Tensor[(275, 2), float32] */)
}

def @func_4174() -> Tensor[(2, 5, 8), float32] {
  @func_4172() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_3680(%var_3635: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), int8], Tensor[(2, 5, 8), float32]) {
  %784 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
  %785 = cast(%var_3635, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%784, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %789 = bitwise_or(%787, %788) /* ty=Tensor[(2, 5, 8), int8] */;
  %790 = @func_2338() /* ty=Tensor[(2, 5, 8), float32] */;
  (%789, %790)
}

def @func_2467() -> (Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) {
  %791 = @func_1450() /* ty=Tensor[(2, 5, 8), float32] */;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %793 = reshape(%792, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %794 = @func_1002(%793) /* ty=(Tensor[(2, 5, 8), bool],) */;
  %795 = cast(%791, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %796 = cosh(%795) /* ty=Tensor[(2, 5, 8), float32] */;
  %797 = cast(%796, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %798 = %794.0;
  %799 = @func_1659() /* ty=Tensor[(2, 5, 8), float64] */;
  %800 = log10(%797) /* ty=Tensor[(2, 5, 8), float32] */;
  (%798, %799, %800)
}

def @func_1322(%var_1320: Tensor[(4, 7, 16), float64]) -> (Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), bool]) {
  @func_1319(%var_1320) /* ty=(Tensor[(4, 7, 16), float64], Tensor[(4, 7, 16), bool]) */
}

def @func_2637(%var_2635: Tensor[(2, 11, 1), float64]) -> (Tensor[(2, 11, ?), int64],) {
  @func_2634(%var_2635) /* ty=(Tensor[(2, 11, ?), int64],) */
}

def @func_792() -> Tensor[(2, 5, 8), float32] {
  @func_587() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_7604() -> Tensor[(2, 5, 8), float32] {
  @func_6106() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_5927() -> (Tensor[(2, 5, 8), int32],) {
  %801 = @func_3045() /* ty=(Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32]) */;
  %802 = %801.0;
  (%802,)
}

def @func_7563() -> (Tensor[(2, 5, 8), bool],) {
  @func_7561() /* ty=(Tensor[(2, 5, 8), bool],) */
}

def @func_7415() -> (Tensor[(2, 5, 8), float32], uint32, uint32) {
  %803 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %804 = cast(meta[relay.Constant][46] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %805 = reshape(%804, newshape=[]) /* ty=uint32 */;
  %806 = @func_5850(%805) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(8, 6, 1), bool], uint32, Tensor[(48), uint32], Tensor[(2, 5, 8), float32]) */;
  %807 = %803.0;
  %808 = %806.2;
  (%807, %808, meta[relay.Constant][46] /* ty=uint32 */)
}

def @func_512() -> (Tensor[(2, 5, 8), float32],) {
  @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_6867(%var_6866: Tensor[(2, 11, 10), bool]) -> (Tensor[(2, 11, 10), bool], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 11, 10), float32], Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64]) {
  %820 = fn (%var_6819: Tensor[(2, 11, 10), bool]) -> (Tensor[(2, 11, 10), bool], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 11, 10), float32], Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64]) {
    %809 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 11, 10), bool] */, dtype="bool") /* ty=Tensor[(1, 11, 10), bool] */;
    %810 = cast(%var_6819, dtype="bool") /* ty=Tensor[(2, 11, 10), bool] */;
    %811 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %812 = @func_3091() /* ty=(Tensor[(2, 5, 8), float64],) */;
    %813 = cast(%var_6819, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
    %814 = logical_or(%809, %810) /* ty=Tensor[(2, 11, 10), bool] */;
    %815 = %811.0;
    %816 = %812.0;
    %817 = erf(%813) /* ty=Tensor[(2, 11, 10), float32] */;
    %818 = @func_2130() /* ty=Tensor[(2, 5, 8), bool] */;
    %819 = @func_1659() /* ty=Tensor[(2, 5, 8), float64] */;
    (%814, %815, %816, %817, %818, %819)
  };
  %820(%var_6866) /* ty=(Tensor[(2, 11, 10), bool], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 11, 10), float32], Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64]) */
}

def @func_7169(%var_7167: int8, %var_7168: Tensor[(12, 9, 13), int8]) -> Tensor[(12, 9, 13), int8] {
  %823 = fn (%var_7160: int8, %var_7161: Tensor[(12, 9, 13), int8]) -> Tensor[(12, 9, 13), int8] {
    %821 = cast(%var_7160, dtype="int8") /* ty=int8 */;
    %822 = cast(%var_7161, dtype="int8") /* ty=Tensor[(12, 9, 13), int8] */;
    bitwise_xor(%821, %822) /* ty=Tensor[(12, 9, 13), int8] */
  };
  %823(%var_7167, %var_7168) /* ty=Tensor[(12, 9, 13), int8] */
}

def @func_6951() -> (Tensor[(2, 11, ?), int64], Tensor[(2, 5, 8), float32]) {
  %828 = fn () -> (Tensor[(2, 11, ?), int64], Tensor[(2, 5, 8), float32]) {
    %824 = @func_4948() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 11, ?), int64], Tensor[(22), float64]) */;
    %825 = @func_2467() /* ty=(Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32]) */;
    %826 = %824.2;
    %827 = %825.2;
    (%826, %827)
  };
  %828() /* ty=(Tensor[(2, 11, ?), int64], Tensor[(2, 5, 8), float32]) */
}

def @func_3990() -> (Tensor[(2, 5, 8), float32],) {
  %829 = @func_3842() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %830 = %829.0;
  (%830,)
}

def @func_4305() -> Tensor[(2, 5, 8), float32] {
  %831 = fn () -> Tensor[(2, 5, 8), float32] {
    @func_1609() /* ty=Tensor[(2, 5, 8), float32] */
  };
  %831() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_1452() -> Tensor[(2, 5, 8), float32] {
  @func_1450() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_3480() -> Tensor[(2, 5, 8), float32] {
  @func_3478() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_5403() -> (Tensor[(2, 5, 8), float32],) {
  %834 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %832 = @func_1721() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float32]) */;
    %833 = %832.0;
    (%833,)
  };
  %834() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_1347() -> (Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), bool]) {
  %844 = fn () -> (Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), bool]) {
    %835 = cast(meta[relay.Constant][48] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %836 = reshape(%835, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
    %837 = @func_1093(%836) /* ty=(Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) */;
    %838 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
    %839 = cast(%838, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
    %840 = reshape(%839, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
    %841 = @func_1002(%840) /* ty=(Tensor[(2, 5, 8), bool],) */;
    %842 = %837.0;
    %843 = %841.0;
    (%838, %842, meta[relay.Constant][48] /* ty=Tensor[(384), float64] */, %843)
  };
  %844() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), bool]) */
}

def @func_588() -> Tensor[(2, 5, 8), float32] {
  %846 = fn () -> Tensor[(2, 5, 8), float32] {
    %845 = @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %845.0
  };
  %846() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_6687() -> (Tensor[(2, 5, 8), float32],) {
  @func_6685() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_2048() -> (Tensor[(4, 10, 10), float32],) {
  %847 = cast(meta[relay.Constant][49] /* ty=Tensor[(4, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 10), float32] */;
  %848 = cos(%847) /* ty=Tensor[(4, 10, 10), float32] */;
  (%848,)
}

def @func_6685() -> (Tensor[(2, 5, 8), float32],) {
  %849 = @func_821() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %850 = %849.1;
  (%850,)
}

def @func_3743() -> (Tensor[(2, 5, 8), float32],) {
  @func_3741() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_1554() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %851 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %852 = %851.0;
  %853 = cast(%852, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %854 = reshape(%853, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %855 = @func_948(%854) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %856 = cast(%852, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %857 = %855.3;
  %858 = rsqrt(%856) /* ty=Tensor[(2, 5, 8), float32] */;
  (%857, %858)
}

def @func_2365() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %859 = @func_2017() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %860 = %859.0;
  %861 = cast(%860, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %862 = reshape(%861, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
  %863 = @func_2088(%862) /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
  %864 = %863.1;
  (%860, %864)
}

def @func_6440() -> (Tensor[(2, 5, 8), float32],) {
  @func_6438() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_6243() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %865 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %866 = %865.0;
  %867 = @func_6106() /* ty=Tensor[(2, 5, 8), float32] */;
  (%866, %867)
}

def @func_1752() -> Tensor[(2, 5, 8), float32] {
  %868 = fn () -> Tensor[(2, 5, 8), float32] {
    @func_1070() /* ty=Tensor[(2, 5, 8), float32] */
  };
  %868() /* ty=Tensor[(2, 5, 8), float32] */
}

def @func_1127(%var_1125: Tensor[(384), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) {
  @func_1124(%var_1125) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */
}

def @func_951(%var_949: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  @func_948(%var_949) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_3046() -> (Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32]) {
  %877 = fn () -> (Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32]) {
    %869 = @func_606() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %870 = %869.0;
    %871 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 5, 8), float32] */, dtype="int32") /* ty=Tensor[(2, 5, 8), int32] */;
    %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
    %873 = cast(%870, dtype="int32") /* ty=Tensor[(2, 5, 8), int32] */;
    %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %875 = right_shift(%873, %874) /* ty=Tensor[(2, 5, 8), int32] */;
    %876 = @func_587() /* ty=Tensor[(2, 5, 8), float32] */;
    (%875, %876)
  };
  %877() /* ty=(Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32]) */
}

def @func_7853() -> Tensor[(2, 5, 8), float32] {
  %878 = @func_5256() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %878.0
}

def @func_3774(%var_3772: Tensor[(3, 13, 9), float64], %var_3773: Tensor[(6, 64), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(384), float64], Tensor[(6, 64), float64], Tensor[(3, 13, 9), float64]) {
  %889 = fn (%var_3749: Tensor[(3, 13, 9), float64], %var_3764: Tensor[(6, 64), float64]) -> (Tensor[(2, 5, 8), float32], Tensor[(384), float64], Tensor[(6, 64), float64], Tensor[(3, 13, 9), float64]) {
    %879 = @func_1911() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %880 = cast(%var_3764, dtype="float64") /* ty=Tensor[(6, 64), float64] */;
    %881 = reshape(%880, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %882 = @func_1124(%881) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64], Tensor[(384), float64]) */;
    %883 = cast(%var_3749, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
    %884 = atanh(%883) /* ty=Tensor[(3, 13, 9), float64] */;
    %885 = cast(%884, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
    %886 = %879.0;
    %887 = %882.2;
    %888 = cos(%885) /* ty=Tensor[(3, 13, 9), float64] */;
    (%886, %887, %var_3764, %888)
  };
  %889(%var_3772, %var_3773) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(384), float64], Tensor[(6, 64), float64], Tensor[(3, 13, 9), float64]) */
}

def @func_5375() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %894 = fn () -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
    %890 = @func_4993() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %891 = @func_3599() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %892 = %890.0;
    %893 = %891.3;
    (%892, %893)
  };
  %894() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */
}

def @func_8300() -> (Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64]) {
  %895 = @func_7816() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), int64], Tensor[(384), float64]) */;
  %896 = @func_1830() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %897 = @func_1721() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float32]) */;
  %898 = %895.2;
  %899 = %896.0;
  %900 = %897.1;
  (%898, %899, %900)
}

def @func_2018() -> (Tensor[(2, 5, 8), float32],) {
  %902 = fn () -> (Tensor[(2, 5, 8), float32],) {
    %901 = @func_1609() /* ty=Tensor[(2, 5, 8), float32] */;
    (%901,)
  };
  %902() /* ty=(Tensor[(2, 5, 8), float32],) */
}

def @func_2088(%var_2072: Tensor[(2, 5, 8), float32]) -> (Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) {
  %903 = @func_1169() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %904 = %903.0;
  %905 = cast(%var_2072, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%904, dtype="float32") /* ty=Tensor[(2, 5, 8), float32] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %909 = cast(%var_2072, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %910 = @func_1659() /* ty=Tensor[(2, 5, 8), float64] */;
  %911 = divide(%907, %908) /* ty=Tensor[(2, 5, 8), float32] */;
  %912 = sin(%909) /* ty=Tensor[(2, 5, 8), float64] */;
  (%910, %911, %912)
}

def @func_821() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %913 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %914 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %915 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %916 = %913.0;
  %917 = %914.0;
  %918 = %915.0;
  (%916, %917, %918)
}

def @func_6678(%var_6676: Tensor[(16, 4, 3), int64], %var_6677: Tensor[(16, 4, 3), int64]) -> (Tensor[(16, 4, 3), int64], Tensor[(2, 5, 8), float32], Tensor[(80), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %932 = fn (%var_6634: Tensor[(16, 4, 3), int64], %var_6635: Tensor[(16, 4, 3), int64]) -> (Tensor[(16, 4, 3), int64], Tensor[(2, 5, 8), float32], Tensor[(80), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
    %919 = cast(%var_6635, dtype="int64") /* ty=Tensor[(16, 4, 3), int64] */;
    %920 = shape_of(%var_6634, dtype="int32") /* ty=Tensor[(3), int32] */;
    %921 = cast(%var_6634, dtype="int64") /* ty=Tensor[(16, 4, 3), int64] */;
    %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %923 = cast(meta[relay.Constant][51] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
    %924 = reshape(%923, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float32] */;
    %925 = @func_2751(%924) /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), bool], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float64]) */;
    %926 = @func_5525() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %927 = @func_4993() /* ty=(Tensor[(2, 5, 8), float32],) */;
    %928 = bitwise_xor(%921, %922) /* ty=Tensor[(16, 4, 3), int64] */;
    %929 = %925.2;
    %930 = %926.0;
    %931 = %927.0;
    (%928, %929, meta[relay.Constant][51] /* ty=Tensor[(80), float32] */, %930, %931)
  };
  %932(%var_6676, %var_6677) /* ty=(Tensor[(16, 4, 3), int64], Tensor[(2, 5, 8), float32], Tensor[(80), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */
}

def @func_2130() -> Tensor[(2, 5, 8), bool] {
  %933 = @func_792() /* ty=Tensor[(2, 5, 8), float32] */;
  %934 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 5, 8), float32] */, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %935 = shape_of(%933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%933, dtype="bool") /* ty=Tensor[(2, 5, 8), bool] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%936, %937) /* ty=Tensor[(2, 5, 8), bool] */
}

def @func_3890() -> (Tensor[(2, 5, 8), float64],) {
  %940 = fn () -> (Tensor[(2, 5, 8), float64],) {
    %938 = @func_3091() /* ty=(Tensor[(2, 5, 8), float64],) */;
    %939 = %938.0;
    (%939,)
  };
  %940() /* ty=(Tensor[(2, 5, 8), float64],) */
}

def @func_5525() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) {
  %941 = @func_573() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %942 = @func_1892() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
  %943 = %941.0;
  %944 = %942.0;
  (%943, %944)
}

def @func_8302() -> (Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64]) {
  @func_8300() /* ty=(Tensor[(2, 5, 8), int64], Tensor[(2, 5, 8), float64], Tensor[(8, 6, 8), float64]) */
}

def @func_1093(%var_1076: Tensor[(8, 6, 8), float64]) -> (Tensor[(8, 6, 8), float64], Tensor[(2, 5, 8), float64]) {
  %945 = cast(%var_1076, dtype="float64") /* ty=Tensor[(8, 6, 8), float64] */;
  %946 = @func_747() /* ty=Tensor[(2, 5, 8), float64] */;
  %947 = cast(%946, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %948 = acosh(%945) /* ty=Tensor[(8, 6, 8), float64] */;
  %949 = asin(%947) /* ty=Tensor[(2, 5, 8), float64] */;
  (%948, %949)
}

def @func_4282() -> (Tensor[(2, 5, 8), float32], Tensor[(9, 10, 15), float64], Tensor[(1350), float64]) {
  %955 = fn () -> (Tensor[(2, 5, 8), float32], Tensor[(9, 10, 15), float64], Tensor[(1350), float64]) {
    %950 = @func_3599() /* ty=(Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), float64], Tensor[(384), float64], Tensor[(2, 5, 8), float64], Tensor[(2, 5, 8), int32], Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32]) */;
    %951 = cast(meta[relay.Constant][53] /* ty=Tensor[(1350), float64] */, dtype="float64") /* ty=Tensor[(1350), float64] */;
    %952 = reshape(%951, newshape=[9, 10, 15]) /* ty=Tensor[(9, 10, 15), float64] */;
    %953 = %950.6;
    %954 = @func_3066(%952) /* ty=Tensor[(9, 10, 15), float64] */;
    (%953, %954, meta[relay.Constant][53] /* ty=Tensor[(1350), float64] */)
  };
  %955() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(9, 10, 15), float64], Tensor[(1350), float64]) */
}

def @func_399(%var_396: Tensor[(10, 5, 5), float64], %var_397: int64, %var_398: Tensor[(128), int64]) -> (Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(7, 9, 6), float32], int64, Tensor[(128), int64], Tensor[(7, 9, 6), int16], Tensor[(10, 5, 5), float64], Tensor[(7, 9, 6), bool]) {
  %1000 = fn (%var_340: Tensor[(10, 5, 5), float64], %var_364: int64, %var_365: Tensor[(128), int64]) -> (Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(7, 9, 6), float32], int64, Tensor[(128), int64], Tensor[(7, 9, 6), int16], Tensor[(10, 5, 5), float64], Tensor[(7, 9, 6), bool]) {
    %956 = cast(meta[relay.Constant][54] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %957 = reshape(%956, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %958 = @func_144(%957) /* ty=(Tensor[(7, 9, 6), float32],) */;
    %959 = %958.0;
    %960 = cast(%959, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
    %961 = reshape(%960, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %962 = @func_144(%961) /* ty=(Tensor[(7, 9, 6), float32],) */;
    %963 = cast(%var_364, dtype="int64") /* ty=int64 */;
    %964 = cast(%var_365, dtype="int64") /* ty=Tensor[(128), int64] */;
    %965 = cast(meta[relay.Constant][54] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %966 = cast(meta[relay.Constant][54] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %967 = reshape(%963, newshape=[]) /* ty=int64 */;
    %968 = reshape(%964, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), int64] */;
    %969 = reshape(%965, newshape=[378]) /* ty=Tensor[(378), float32] */;
    %970 = reshape(%966, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %971 = @func_293(%967, %968, %969, %970) /* ty=(Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) */;
    %972 = %971.1;
    %973 = cast(%972, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
    %974 = reshape(%973, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %975 = @func_144(%974) /* ty=(Tensor[(7, 9, 6), float32],) */;
    %976 = %975.0;
    %977 = cast(%972, dtype="int16") /* ty=Tensor[(7, 9, 6), int16] */;
    %978 = shape_of(%976, dtype="int32") /* ty=Tensor[(3), int32] */;
    %979 = cast(%976, dtype="int16") /* ty=Tensor[(7, 9, 6), int16] */;
    %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %981 = cast(%var_340, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
    %982 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(10, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %983 = cast(meta[relay.Constant][55] /* ty=Tensor[(10, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
    %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %985 = power(%983, %984) /* ty=Tensor[(10, 5, 5), float64] */;
    %986 = cast(%985, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
    %987 = cast(%var_364, dtype="int64") /* ty=int64 */;
    %988 = cast(%var_365, dtype="int64") /* ty=Tensor[(128), int64] */;
    %989 = cast(%976, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
    %990 = %962.0;
    %991 = cast(%990, dtype="float32") /* ty=Tensor[(7, 9, 6), float32] */;
    %992 = reshape(%987, newshape=[]) /* ty=int64 */;
    %993 = reshape(%988, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), int64] */;
    %994 = reshape(%989, newshape=[378]) /* ty=Tensor[(378), float32] */;
    %995 = reshape(%991, newshape=[7, 9, 6]) /* ty=Tensor[(7, 9, 6), float32] */;
    %996 = @func_293(%992, %993, %994, %995) /* ty=(Tensor[(8, 2, 8), int64], Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(378), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), bool], Tensor[(7, 9, 6), float32], Tensor[(7, 9, 6), float32]) */;
    %997 = logical_xor(%979, %980) /* ty=Tensor[(7, 9, 6), int16] */;
    %998 = sin(%986) /* ty=Tensor[(10, 5, 5), float64] */;
    %999 = %996.4;
    (%959, meta[relay.Constant][54] /* ty=Tensor[(378), float32] */, %990, %var_364, %var_365, %997, %998, %999)
  };
  %1000(%var_396, %var_397, %var_398) /* ty=(Tensor[(7, 9, 6), float32], Tensor[(378), float32], Tensor[(7, 9, 6), float32], int64, Tensor[(128), int64], Tensor[(7, 9, 6), int16], Tensor[(10, 5, 5), float64], Tensor[(7, 9, 6), bool]) */
}

def @func_1450() -> Tensor[(2, 5, 8), float32] {
  %1001 = @func_510() /* ty=(Tensor[(2, 5, 8), float32],) */;
  %1001.0
}

def @func_7227(%var_7225: Tensor[(8, 5, 13), bool], %var_7226: Tensor[(8, 5, 13), bool]) -> (Tensor[(8, 5, 13), bool], Tensor[(8, 5, 13), float32]) {
  %1009 = fn (%var_7211: Tensor[(8, 5, 13), bool], %var_7212: Tensor[(8, 5, 13), bool]) -> (Tensor[(8, 5, 13), bool], Tensor[(8, 5, 13), float32]) {
    %1002 = cast(%var_7212, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
    %1003 = shape_of(%var_7211, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1004 = cast(%var_7211, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
    %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1006 = cast(%var_7212, dtype="float32") /* ty=Tensor[(8, 5, 13), float32] */;
    %1007 = logical_or(%1004, %1005) /* ty=Tensor[(8, 5, 13), bool] */;
    %1008 = acos(%1006) /* ty=Tensor[(8, 5, 13), float32] */;
    (%1007, %1008)
  };
  %1009(%var_7225, %var_7226) /* ty=(Tensor[(8, 5, 13), bool], Tensor[(8, 5, 13), float32]) */
}

def @func_5689() -> (Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float64], Tensor[(1, 22), float64], Tensor[(2, 5, 8), float32]) {
  @func_5687() /* ty=(Tensor[(2, 5, 8), float32], Tensor[(2, 5, 8), float32], Tensor[(7, 9, 6), bool], Tensor[(2, 5, 8), float64], Tensor[(1, 22), float64], Tensor[(2, 5, 8), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen244/build/output.py:3015: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen244/build/output.py:3020: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen244/build/output.py:3051: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen244/build/output.py:3056: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen244/build/output.py:3061: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen244/build/output.py:3066: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %0 = (%l, %r);
  match (%0) {
    (Zero(_), _) => {
      %r
    },
    (_, Zero(_)) => {
      %l
    },
    _ => {
      %1 = match (%l) {
        Raw(%x: T) => {
          %x
        },
        One(%x1: fn () -> T) => {
          %x1() /* ty=T */
        },
        Zero(%x2: fn () -> T) => {
          %x2() /* ty=T */
        },
      };
      %2 = match (%r) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4() /* ty=T */
        },
        Zero(%x5: fn () -> T) => {
          %x5() /* ty=T */
        },
      };
      %3 = %add(%1, %2) /* ty=T */;
      Raw(%3) /* ty=GradCell[T] */
    },
  }
}

def @main() -> (Tensor[(5, 9, 8), int16], ()) {
  %4 = ();
  (meta[relay.Constant][0] /* ty=Tensor[(5, 9, 8), int16] */, %4)
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %5 = (%l1, %r1);
  match (%5) {
    (Zero(_), _) => {
      %l1
    },
    (_, Zero(_)) => {
      %r1
    },
    (One(_), _) => {
      %r1
    },
    (_, One(_)) => {
      %l1
    },
    _ => {
      %6 = match (%l1) {
        Raw(%x6: T) => {
          %x6
        },
        One(%x7: fn () -> T) => {
          %x7() /* ty=T */
        },
        Zero(%x8: fn () -> T) => {
          %x8() /* ty=T */
        },
      };
      %7 = match (%r1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10() /* ty=T */
        },
        Zero(%x11: fn () -> T) => {
          %x11() /* ty=T */
        },
      };
      %8 = %multiply(%6, %7) /* ty=T */;
      Raw(%8) /* ty=GradCell[T] */
    },
  }
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x12: T) => {
      %x12
    },
    One(%x13: fn () -> T) => {
      %x13() /* ty=T */
    },
    Zero(%x14: fn () -> T) => {
      %x14() /* ty=T */
    },
  }
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
