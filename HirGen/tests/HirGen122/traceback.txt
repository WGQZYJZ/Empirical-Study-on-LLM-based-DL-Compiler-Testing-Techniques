==========mod==========
#[version = "0.0.5"]
def @func_672() -> (Tensor[(2, 9, 6), float32],) {
  %0 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(2, 9, 6), float32] */;
  %3 = sin(%2) /* ty=Tensor[(2, 9, 6), float32] */;
  (%3,)
}

def @func_1656() -> (Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %4 = @func_1491() /* ty=(Tensor[(880), float64],) */;
  %5 = @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %6 = @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %7 = %4.0;
  %8 = %5.0;
  %9 = %6.0;
  (%7, %8, %9)
}

def @func_6272() -> (Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), float64], float32, Tensor[(768), float32]) {
  %10 = cast(0.034192f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %12 = reshape(%10, newshape=[]) /* ty=float32 */;
  %13 = reshape(%11, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %14 = @func_2354(%12, %13) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(2, 9, 6), float64], Tensor[(3, 1, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(3, 378), int64]) */;
  %15 = @func_4001() /* ty=Tensor[(6, 6, 8), float32] */;
  %16 = %14.1;
  (%15, %16, 0.034192f /* ty=float32 */, meta[relay.Constant][0] /* ty=Tensor[(768), float32] */)
}

def @func_1221() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64], Tensor[(1, 135), float32], Tensor[(2, 9, 6), float64]) {
  %17 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %18 = %17.0;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %20 = reshape(%19, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), float64] */;
  %21 = @func_951(%20) /* ty=(Tensor[(2, 9, 6), int16],) */;
  %22 = @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %23 = %22.0;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %25 = reshape(%24, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), float64] */;
  %26 = @func_474(%25) /* ty=(Tensor[(2, 9, 6), int64], Tensor[(9, 15, 1), float64], Tensor[(1, 135), float64]) */;
  %27 = %26.2;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %29 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %30 = %21.0;
  %31 = sinh(%28) /* ty=Tensor[(1, 135), float32] */;
  %32 = %29.0;
  (%18, %30, %23, %31, %32)
}

def @func_5778() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(6, 8, 10), float32], Tensor[(480), float32], Tensor[(12, 42), float32]) {
  %33 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %34 = %33.0;
  %35 = cast(%34, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 42), float32] */, dtype="float32") /* ty=Tensor[(12, 42), float32] */;
  %39 = reshape(%36, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), float32] */;
  %40 = reshape(%37, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), float32] */;
  %41 = reshape(%38, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %42 = @func_5643(%39, %40, %41) /* ty=(Tensor[(6, 8, 10), float32], Tensor[(10, 11, 14), float32], Tensor[(6, 8, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(12, 3, 14), uint64]) */;
  %43 = log10(%35) /* ty=Tensor[(2, 9, 6), float64] */;
  %44 = @func_5533() /* ty=Tensor[(2, 9, 6), float64] */;
  %45 = %42.0;
  (%43, %44, %45, meta[relay.Constant][1] /* ty=Tensor[(480), float32] */, meta[relay.Constant][2] /* ty=Tensor[(12, 42), float32] */)
}

def @func_763() -> (Tensor[(2, 9, 6), float64],) {
  %46 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %47 = %46.0;
  (%47,)
}

def @func_3058() -> (Tensor[(10, 11, 14), float32],) {
  %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 14), float64] */;
  %49 = log(%48) /* ty=Tensor[(10, 11, 14), float64] */;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(10, 11, 14), float32] */;
  %51 = log10(%50) /* ty=Tensor[(10, 11, 14), float32] */;
  (%51,)
}

def @func_1308(%var_1285: Tensor[(5, 15, 11), float64]) -> (Tensor[(5, 15, 11), uint8],) {
  %52 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  %53 = cast(%var_1285, dtype="uint8") /* ty=Tensor[(5, 15, 11), uint8] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="uint8") /* ty=Tensor[(5, 15, 11), uint8] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %57 = add(%55, %56) /* ty=Tensor[(5, 15, 11), uint8] */;
  (%57,)
}

def @func_3813(%var_3713: Tensor[(825), float64], %var_3720: Tensor[(5, 15, 11), uint8]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), bool], Tensor[(2, 9, 6), float64], float32, float32, Tensor[(5, 15, 11), float32], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64]) {
  %58 = cast(%var_3713, dtype="float64") /* ty=Tensor[(825), float64] */;
  %59 = reshape(%58, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float64] */;
  %60 = @func_1308(%59) /* ty=(Tensor[(5, 15, 11), uint8],) */;
  %61 = %60.0;
  %62 = cast(%var_3720, dtype="bool") /* ty=Tensor[(5, 15, 11), bool] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%61, dtype="bool") /* ty=Tensor[(5, 15, 11), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %66 = cast(-0.357603f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %67 = reshape(%66, newshape=[]) /* ty=float32 */;
  %68 = @func_3227(%67) /* ty=(Tensor[(10, 11, 14), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(30), float32], Tensor[(2, 9, 6), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %69 = @func_904() /* ty=(float32, Tensor[(2, 9, 6), float64]) */;
  %70 = cast(%var_3713, dtype="float32") /* ty=Tensor[(825), float32] */;
  %71 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%61, dtype="float32") /* ty=Tensor[(5, 15, 11), float32] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %74 = @func_1807() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), int16]) */;
  %75 = @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %76 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
  %77 = logical_and(%64, %65) /* ty=Tensor[(5, 15, 11), bool] */;
  %78 = %68.5;
  %79 = %69.0;
  %80 = floor_divide(%72, %73) /* ty=Tensor[(5, 15, 11), float32] */;
  %81 = %74.1;
  %82 = %75.0;
  (%76, %77, %78, -0.357603f /* ty=float32 */, %79, %80, %81, %82)
}

def @func_841() -> (Tensor[(2, 9, 6), float64],) {
  %83 = @func_763() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %84 = %83.0;
  (%84,)
}

def @func_238() -> (Tensor[(2, 9, 6), float64],) {
  %85 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %86 = %85.0;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %88 = atan(%87) /* ty=Tensor[(2, 9, 6), float64] */;
  (%88,)
}

def @func_1043() -> (Tensor[(2, 9, 6), float64],) {
  %89 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %90 = %89.0;
  (%90,)
}

def @func_605() -> (Tensor[(2, 9, 6), float64],) {
  %91 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %92 = %91.0;
  (%92,)
}

def @func_1010() -> Tensor[(2, 9, 6), float64] {
  %93 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %93.0
}

def @func_1398() -> (Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) {
  %94 = @func_763() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %96 = reshape(%95, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float64] */;
  %97 = @func_179(%96) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %98 = %94.0;
  %99 = %97.0;
  (%98, %99, meta[relay.Constant][4] /* ty=Tensor[(880), float64] */)
}

def @func_707(%var_687: Tensor[(14, 9, 9), int64]) -> (Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) {
  %100 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 9, 9), int64] */, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
  %101 = shape_of(%var_687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_687, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %104 = @func_497() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */;
  %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %106 = reshape(%105, newshape=[9, 15, 1]) /* ty=Tensor[(9, 15, 1), float64] */;
  %107 = @func_277(%106) /* ty=(Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) */;
  %108 = greater(%102, %103) /* ty=Tensor[(14, 9, 9), bool] */;
  %109 = %104.0;
  %110 = %107.0;
  (%108, %109, %110, meta[relay.Constant][6] /* ty=Tensor[(135), float64] */)
}

def @func_2493() -> (Tensor[(5, 15, 11), float64],) {
  %111 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  (%111,)
}

def @func_2865() -> (Tensor[(5, 15, 11), float64],) {
  %112 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  (%112,)
}

def @func_3393(%var_3369: Tensor[(12, 7, 1), float64]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(12, 7, 1), float32]) {
  %113 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %114 = cast(%var_3369, dtype="float64") /* ty=Tensor[(12, 7, 1), float64] */;
  %115 = cos(%114) /* ty=Tensor[(12, 7, 1), float64] */;
  %116 = cast(%115, dtype="float32") /* ty=Tensor[(12, 7, 1), float32] */;
  %117 = %113.0;
  %118 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  %119 = sqrt(%116) /* ty=Tensor[(12, 7, 1), float32] */;
  (%117, %118, %119)
}

def @func_4904(%var_4892: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %120 = @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */;
  %121 = @func_2451() /* ty=Tensor[(2, 9, 6), float64] */;
  %122 = cast(%121, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %123 = reshape(%122, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), float64] */;
  %124 = @func_2927(%123) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), uint32]) */;
  %125 = @func_1583() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %126 = %125.0;
  %127 = cast(%var_4892, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %131 = %120.1;
  %132 = @func_3929() /* ty=Tensor[(2, 9, 6), float64] */;
  %133 = %124.0;
  %134 = divide(%129, %130) /* ty=Tensor[(2, 9, 6), float64] */;
  %135 = @func_4590() /* ty=Tensor[(2, 9, 6), float64] */;
  (%121, %131, %132, %133, %134, %135)
}

def @func_4038() -> (Tensor[(880), float64], Tensor[(2, 9, 6), float64]) {
  %136 = @func_1398() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) */;
  %137 = %136.2;
  %138 = @func_3011() /* ty=Tensor[(2, 9, 6), float64] */;
  (%137, %138)
}

def @func_214() -> (Tensor[(2, 9, 6), float64],) {
  %139 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %140 = rsqrt(%139) /* ty=Tensor[(2, 9, 6), float64] */;
  (%140,)
}

def @func_3227(%var_3179: float32) -> (Tensor[(10, 11, 14), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(30), float32], Tensor[(2, 9, 6), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %141 = @func_3058() /* ty=(Tensor[(10, 11, 14), float32],) */;
  %142 = cast(%var_3179, dtype="float32") /* ty=float32 */;
  %143 = cast(meta[relay.Constant][8] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %144 = reshape(%142, newshape=[]) /* ty=float32 */;
  %145 = reshape(%143, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), float32] */;
  %146 = @func_378(%144, %145) /* ty=(Tensor[(3, 1, 10), float32], Tensor[(3, 1, 10), float64]) */;
  %147 = cast(meta[relay.Constant][9] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %148 = reshape(%147, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), float64] */;
  %149 = @func_2927(%148) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), uint32]) */;
  %150 = %149.0;
  %151 = cast(meta[relay.Constant][9] /* ty=Tensor[(108), float64] */, dtype="bool") /* ty=Tensor[(108), bool] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %155 = @func_1583() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %156 = %141.0;
  %157 = %146.1;
  %158 = less(%153, %154) /* ty=Tensor[(2, 9, 6), bool] */;
  %159 = %155.1;
  %160 = @func_3011() /* ty=Tensor[(2, 9, 6), float64] */;
  (%156, %157, %var_3179, meta[relay.Constant][8] /* ty=Tensor[(30), float32] */, %158, %159, %160)
}

def @func_4652(%var_4635: Tensor[(2, 9, 6), float64]) -> (Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), int32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), bool]) {
  %161 = @func_1043() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %162 = %161.0;
  %163 = cast(%var_4635, dtype="int32") /* ty=Tensor[(2, 9, 6), int32] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="int32") /* ty=Tensor[(2, 9, 6), int32] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %167 = @func_4276() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %168 = cast(%var_4635, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %169 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%162, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = @func_4001() /* ty=Tensor[(6, 6, 8), float32] */;
  %173 = bitwise_xor(%165, %166) /* ty=Tensor[(2, 9, 6), int32] */;
  %174 = %167.0;
  %175 = logical_or(%170, %171) /* ty=Tensor[(2, 9, 6), bool] */;
  (%172, %173, %174, %175)
}

def @func_4236(%var_4191: float32) -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(3, 1, 10), float64], float32, Tensor[(30), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %176 = @func_3511() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %177 = @func_3986() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %178 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %179 = @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %180 = cast(%var_4191, dtype="float32") /* ty=float32 */;
  %181 = cast(meta[relay.Constant][10] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %182 = reshape(%180, newshape=[]) /* ty=float32 */;
  %183 = reshape(%181, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), float32] */;
  %184 = @func_378(%182, %183) /* ty=(Tensor[(3, 1, 10), float32], Tensor[(3, 1, 10), float64]) */;
  %185 = @func_1043() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %186 = @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */;
  %187 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %188 = @func_987() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %189 = %176.0;
  %190 = %177.0;
  %191 = %178.0;
  %192 = %179.1;
  %193 = %184.1;
  %194 = %185.0;
  %195 = %186.3;
  %196 = %187.0;
  %197 = %188.0;
  (%189, %190, %191, %192, %193, %var_4191, meta[relay.Constant][10] /* ty=Tensor[(30), float32] */, %194, %195, %196, %197)
}

def @func_5109() -> Tensor[(5, 15, 11), float64] {
  %198 = @func_2493() /* ty=(Tensor[(5, 15, 11), float64],) */;
  %198.0
}

def @func_4665() -> (Tensor[(2, 9, 6), uint32],) {
  %199 = @func_3150() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(880), float64]) */;
  %200 = %199.0;
  (%200,)
}

def @func_5643(%var_5578: Tensor[(6, 8, 10), float32], %var_5596: Tensor[(6, 8, 10), float32], %var_5632: Tensor[(12, 3, 14), float32]) -> (Tensor[(6, 8, 10), float32], Tensor[(10, 11, 14), float32], Tensor[(6, 8, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(12, 3, 14), uint64]) {
  %201 = cast(%var_5578, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %202 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(6, 8, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 8, 10), float32] */, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %205 = @func_5251() /* ty=(Tensor[(10, 11, 14), float32], float32) */;
  %206 = cast(%var_5596, dtype="int16") /* ty=Tensor[(6, 8, 10), int16] */;
  %207 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(6, 8, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 8, 10), float32] */, dtype="int16") /* ty=Tensor[(6, 8, 10), int16] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %210 = minimum(%208, %209) /* ty=Tensor[(6, 8, 10), int16] */;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
  %212 = log10(%211) /* ty=Tensor[(6, 8, 10), float32] */;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
  %214 = @func_4123() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %215 = @func_904() /* ty=(float32, Tensor[(2, 9, 6), float64]) */;
  %216 = %215.0;
  %217 = cast(%216, dtype="uint64") /* ty=uint64 */;
  %218 = cast(%var_5632, dtype="uint64") /* ty=Tensor[(12, 3, 14), uint64] */;
  %219 = floor_mod(%203, %204) /* ty=Tensor[(6, 8, 10), float32] */;
  %220 = %205.0;
  %221 = acos(%213) /* ty=Tensor[(6, 8, 10), float64] */;
  %222 = %214.0;
  %223 = add(%217, %218) /* ty=Tensor[(12, 3, 14), uint64] */;
  (%219, %220, %221, %222, %223)
}

def @func_1411() -> (Tensor[(2, 9, 6), float64],) {
  %224 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %225 = %224.0;
  (%225,)
}

def @func_3511() -> (Tensor[(2, 9, 6), float64],) {
  %226 = @func_1656() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %227 = %226.1;
  (%227,)
}

def @func_3011() -> Tensor[(2, 9, 6), float64] {
  %228 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %228.0
}

def @func_5533() -> Tensor[(2, 9, 6), float64] {
  %229 = @func_4610() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %229.0
}

def @func_6066() -> (Tensor[(10, 11, 14), float32], Tensor[(6, 6, 8), bool], Tensor[(6, 6, 8), float32], float32, Tensor[(6, 6, 8), float64]) {
  %230 = @func_3058() /* ty=(Tensor[(10, 11, 14), float32],) */;
  %231 = @func_4001() /* ty=Tensor[(6, 6, 8), float32] */;
  %232 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 6, 8), float32] */, dtype="bool") /* ty=Tensor[(6, 6, 8), bool] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="bool") /* ty=Tensor[(6, 6, 8), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %236 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 8), float32] */;
  %237 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(6, 6, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 8), float32] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %240 = @func_904() /* ty=(float32, Tensor[(2, 9, 6), float64]) */;
  %241 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 6, 8), float32] */, dtype="float64") /* ty=Tensor[(6, 6, 8), float64] */;
  %242 = %230.0;
  %243 = greater(%234, %235) /* ty=Tensor[(6, 6, 8), bool] */;
  %244 = floor_divide(%238, %239) /* ty=Tensor[(6, 6, 8), float32] */;
  %245 = %240.0;
  %246 = erf(%241) /* ty=Tensor[(6, 6, 8), float64] */;
  (%242, %243, %244, %245, %246)
}

def @func_6503() -> (Tensor[(2, 9, 6), float64],) {
  %247 = @func_6179() /* ty=(Tensor[(16, 14, 7), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %248 = %247.1;
  (%248,)
}

def @func_2451() -> Tensor[(2, 9, 6), float64] {
  %249 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %249.0
}

def @func_6179() -> (Tensor[(16, 14, 7), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %250 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(16, 14, 7), float64] */;
  %251 = @func_4610() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %252 = asin(%250) /* ty=Tensor[(16, 14, 7), float64] */;
  %253 = %251.0;
  %254 = @func_4590() /* ty=Tensor[(2, 9, 6), float64] */;
  (%252, %253, %254)
}

def @func_6087() -> (Tensor[(2, 9, 6), float64],) {
  %255 = @func_4531() /* ty=Tensor[(2, 9, 6), float64] */;
  (%255,)
}

def @func_2984() -> (Tensor[(2, 9, 6), float32], Tensor[(880), float64]) {
  %256 = @func_1583() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %257 = %256.0;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(2, 9, 6), float32] */;
  %259 = @func_1807() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), int16]) */;
  %260 = acosh(%258) /* ty=Tensor[(2, 9, 6), float32] */;
  %261 = %259.0;
  (%260, %261)
}

def @func_6395(%var_6321: Tensor[(5, 14, 16), float32], %var_6355: Tensor[(5, 14, 16), bool]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 14, 16), float32], Tensor[(2, 9, 6), float64], Tensor[(120), uint32], Tensor[(5, 15, 11), float64]) {
  %262 = @func_987() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %263 = cast(%var_6321, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %264 = atan(%263) /* ty=Tensor[(5, 14, 16), float32] */;
  %265 = cast(%264, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %266 = acosh(%265) /* ty=Tensor[(5, 14, 16), float32] */;
  %267 = cast(%264, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%266, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %271 = not_equal(%269, %270) /* ty=Tensor[(5, 14, 16), bool] */;
  %272 = cast(%var_6355, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %276 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), uint32] */, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %277 = reshape(%276, newshape=[6, 10, 2]) /* ty=Tensor[(6, 10, 2), uint32] */;
  %278 = @func_1376(%277) /* ty=(Tensor[(6, 10, 2), bool], Tensor[(2, 9, 6), float64]) */;
  %279 = @func_2865() /* ty=(Tensor[(5, 15, 11), float64],) */;
  %280 = %262.0;
  %281 = divide(%274, %275) /* ty=Tensor[(5, 14, 16), float32] */;
  %282 = %278.1;
  %283 = %279.0;
  (%280, %281, %282, meta[relay.Constant][15] /* ty=Tensor[(120), uint32] */, %283)
}

def @func_5982() -> Tensor[(5, 15, 11), float64] {
  @func_5109() /* ty=Tensor[(5, 15, 11), float64] */
}

def @func_277(%var_267: Tensor[(9, 15, 1), float64]) -> (Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) {
  %284 = cast(%var_267, dtype="float64") /* ty=Tensor[(9, 15, 1), float64] */;
  %285 = cast(%var_267, dtype="float64") /* ty=Tensor[(9, 15, 1), float64] */;
  %286 = erf(%284) /* ty=Tensor[(9, 15, 1), float64] */;
  %287 = tan(%285) /* ty=Tensor[(9, 15, 1), float64] */;
  (%286, %287)
}

def @func_904() -> (float32, Tensor[(2, 9, 6), float64]) {
  %288 = @func_497() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */;
  %289 = @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %290 = %288.2;
  %291 = %289.2;
  (%290, %291)
}

def @func_951(%var_946: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), int16],) {
  %292 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %293 = %292.0;
  %294 = cast(%var_946, dtype="int16") /* ty=Tensor[(2, 9, 6), int16] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="int16") /* ty=Tensor[(2, 9, 6), int16] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %298 = multiply(%296, %297) /* ty=Tensor[(2, 9, 6), int16] */;
  (%298,)
}

def @func_2927(%var_2911: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), uint32]) {
  %299 = @func_987() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %300 = %299.0;
  %301 = cast(%var_2911, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %305 = @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %306 = floor_divide(%303, %304) /* ty=Tensor[(2, 9, 6), float64] */;
  %307 = %305.0;
  (%306, %307)
}

def @func_6313() -> (Tensor[(2, 9, 6), float64],) {
  %308 = @func_6272() /* ty=(Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), float64], float32, Tensor[(768), float32]) */;
  %309 = %308.1;
  (%309,)
}

def @func_264() -> (Tensor[(2, 9, 6), float64],) {
  %310 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %311 = %310.0;
  (%311,)
}

def @func_5274() -> Tensor[(10, 11, 14), float32] {
  %312 = @func_5251() /* ty=(Tensor[(10, 11, 14), float32], float32) */;
  %312.0
}

def @func_5405(%var_5368: Tensor[(9, 15, 14), float32], %var_5398: Tensor[(5, 165), float64]) -> (Tensor[(9, 15, 14), bool], Tensor[(5, 15, 11), int16], Tensor[(5, 165), float64]) {
  %313 = cast(%var_5368, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %314 = rsqrt(%313) /* ty=Tensor[(9, 15, 14), float32] */;
  %315 = cast(%var_5368, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = cast(%var_5398, dtype="float64") /* ty=Tensor[(5, 165), float64] */;
  %320 = reshape(%319, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float64] */;
  %321 = logical_and(%317, %318) /* ty=Tensor[(9, 15, 14), bool] */;
  %322 = @func_2545(%320) /* ty=Tensor[(5, 15, 11), int16] */;
  (%321, %322, %var_5398)
}

def @func_1866() -> (Tensor[(2, 9, 6), float64],) {
  %323 = @func_1043() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %324 = %323.0;
  (%324,)
}

def @func_5689(%var_5677: Tensor[(13, 3, 12), bool], %var_5678: Tensor[(13, 3, 12), bool]) -> (Tensor[(13, 3, 12), bool],) {
  %325 = cast(%var_5678, dtype="bool") /* ty=Tensor[(13, 3, 12), bool] */;
  %326 = shape_of(%var_5677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%var_5677, dtype="bool") /* ty=Tensor[(13, 3, 12), bool] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %329 = logical_or(%327, %328) /* ty=Tensor[(13, 3, 12), bool] */;
  (%329,)
}

def @func_4496(%var_4440: Tensor[(13, 6, 14), float32], %var_4491: Tensor[(13, 6, 14), float32]) -> (Tensor[(13, 6, 14), bool], Tensor[(13, 6, 14), float32], Tensor[(880), float64], Tensor[(13, 6, 14), uint8]) {
  %330 = cast(%var_4440, dtype="float32") /* ty=Tensor[(13, 6, 14), float32] */;
  %331 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(13, 6, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 6, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 14), float32] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %334 = floor_mod(%332, %333) /* ty=Tensor[(13, 6, 14), float32] */;
  %335 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 6, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 6, 14), bool] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="bool") /* ty=Tensor[(13, 6, 14), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %339 = cast(%334, dtype="float32") /* ty=Tensor[(13, 6, 14), float32] */;
  %340 = @func_1491() /* ty=(Tensor[(880), float64],) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(880), float64] */;
  %343 = cast(%var_4491, dtype="uint8") /* ty=Tensor[(13, 6, 14), uint8] */;
  %344 = shape_of(%var_4440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_4440, dtype="uint8") /* ty=Tensor[(13, 6, 14), uint8] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %347 = less_equal(%337, %338) /* ty=Tensor[(13, 6, 14), bool] */;
  %348 = sigmoid(%339) /* ty=Tensor[(13, 6, 14), float32] */;
  %349 = log10(%342) /* ty=Tensor[(880), float64] */;
  %350 = bitwise_or(%345, %346) /* ty=Tensor[(13, 6, 14), uint8] */;
  (%347, %348, %349, %350)
}

def @func_4276() -> (Tensor[(2, 9, 6), float64],) {
  %351 = @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %352 = %351.2;
  (%352,)
}

def @func_497() -> (Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) {
  %353 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %354 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 13, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %357 = cast(-1.76576f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %358 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 30), float32] */, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
  %359 = reshape(%357, newshape=[]) /* ty=float32 */;
  %360 = reshape(%358, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), float32] */;
  %361 = @func_378(%359, %360) /* ty=(Tensor[(3, 1, 10), float32], Tensor[(3, 1, 10), float64]) */;
  %362 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 13, 5), float32] */, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %363 = acosh(%362) /* ty=Tensor[(2, 13, 5), float64] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %365 = mod(%355, %356) /* ty=Tensor[(2, 13, 5), float32] */;
  %366 = %361.1;
  %367 = sinh(%364) /* ty=Tensor[(2, 13, 5), float64] */;
  (%365, %366, -1.76576f /* ty=float32 */, meta[relay.Constant][19] /* ty=Tensor[(1, 30), float32] */, %367)
}

def @func_3491(%var_3475: Tensor[(16, 10, 8), float32]) -> (Tensor[(16, 10, 8), float32], Tensor[(825), float64]) {
  %368 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
  %369 = shape_of(%var_3475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_3475, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %372 = @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */;
  %373 = floor_divide(%370, %371) /* ty=Tensor[(16, 10, 8), float32] */;
  %374 = %372.2;
  (%373, %374)
}

def @func_2545(%var_2538: Tensor[(5, 15, 11), float64]) -> Tensor[(5, 15, 11), int16] {
  %375 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  %376 = cast(%var_2538, dtype="int16") /* ty=Tensor[(5, 15, 11), int16] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="int16") /* ty=Tensor[(5, 15, 11), int16] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_xor(%378, %379) /* ty=Tensor[(5, 15, 11), int16] */
}

def @func_4610() -> (Tensor[(2, 9, 6), float64],) {
  %380 = @func_1010() /* ty=Tensor[(2, 9, 6), float64] */;
  (%380,)
}

def @func_4531() -> Tensor[(2, 9, 6), float64] {
  %381 = @func_2737() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %381.1
}

def @func_3698() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %382 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %383 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
  %384 = %382.0;
  (%383, %384)
}

def @func_1807() -> (Tensor[(880), float64], Tensor[(2, 9, 6), int16]) {
  %385 = @func_1398() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) */;
  %386 = @func_1221() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64], Tensor[(1, 135), float32], Tensor[(2, 9, 6), float64]) */;
  %387 = %385.2;
  %388 = %386.1;
  (%387, %388)
}

def @func_3929() -> Tensor[(2, 9, 6), float64] {
  %389 = @func_904() /* ty=(float32, Tensor[(2, 9, 6), float64]) */;
  %389.1
}

def @func_4967(%var_4962: Tensor[(15, 2, 4), int16]) -> (Tensor[(15, 2, 4), bool],) {
  %390 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 2, 4), int16] */, dtype="bool") /* ty=Tensor[(15, 2, 4), bool] */;
  %391 = shape_of(%var_4962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%var_4962, dtype="bool") /* ty=Tensor[(15, 2, 4), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %394 = greater_equal(%392, %393) /* ty=Tensor[(15, 2, 4), bool] */;
  (%394,)
}

def @func_6558(%var_6535: Tensor[(6, 15, 9), float64], %var_6541: Tensor[(480), float32], %var_6542: Tensor[(504), float32], %var_6551: Tensor[(6, 15, 9), bool]) -> (Tensor[(6, 15, 9), uint8], Tensor[(12, 3, 14), uint64], Tensor[(480), float32], Tensor[(504), float32], Tensor[(6, 15, 9), float32], Tensor[(6, 15, 9), int8]) {
  %395 = @func_2836() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), uint32], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), bool], Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */;
  %396 = %395.3;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(6, 15, 9), float64] */;
  %398 = atanh(%397) /* ty=Tensor[(6, 15, 9), float64] */;
  %399 = cast(%var_6535, dtype="uint8") /* ty=Tensor[(6, 15, 9), uint8] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%398, dtype="uint8") /* ty=Tensor[(6, 15, 9), uint8] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %403 = cast(%var_6541, dtype="float32") /* ty=Tensor[(480), float32] */;
  %404 = cast(%var_6541, dtype="float32") /* ty=Tensor[(480), float32] */;
  %405 = cast(%var_6542, dtype="float32") /* ty=Tensor[(504), float32] */;
  %406 = reshape(%403, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), float32] */;
  %407 = reshape(%404, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), float32] */;
  %408 = reshape(%405, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %409 = @func_5643(%406, %407, %408) /* ty=(Tensor[(6, 8, 10), float32], Tensor[(10, 11, 14), float32], Tensor[(6, 8, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(12, 3, 14), uint64]) */;
  %410 = cast(%398, dtype="float32") /* ty=Tensor[(6, 15, 9), float32] */;
  %411 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 15, 9), uint32] */, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
  %412 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%396, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %415 = greater_equal(%413, %414) /* ty=Tensor[(6, 15, 9), bool] */;
  %416 = cast(%var_6551, dtype="int8") /* ty=Tensor[(6, 15, 9), int8] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="int8") /* ty=Tensor[(6, 15, 9), int8] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %420 = subtract(%401, %402) /* ty=Tensor[(6, 15, 9), uint8] */;
  %421 = %409.4;
  %422 = cos(%410) /* ty=Tensor[(6, 15, 9), float32] */;
  %423 = right_shift(%418, %419) /* ty=Tensor[(6, 15, 9), int8] */;
  (%420, %421, %var_6541, %var_6542, %422, %423)
}

def @func_3258() -> Tensor[(2, 9, 6), float64] {
  %424 = @func_987() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %424.0
}

def @func_4434() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %425 = @func_3107() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %426 = @func_1866() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %427 = @func_1010() /* ty=Tensor[(2, 9, 6), float64] */;
  %428 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
  %429 = @func_4001() /* ty=Tensor[(6, 6, 8), float32] */;
  %430 = %425.0;
  %431 = %426.0;
  %432 = @func_2451() /* ty=Tensor[(2, 9, 6), float64] */;
  (%427, %428, %429, %430, %431, %432)
}

def @func_5707(%var_5698: Tensor[(14, 5, 13), uint16]) -> Tensor[(14, 5, 13), uint16] {
  %433 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 5, 13), uint16] */, dtype="uint16") /* ty=Tensor[(14, 5, 13), uint16] */;
  %434 = shape_of(%var_5698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%var_5698, dtype="uint16") /* ty=Tensor[(14, 5, 13), uint16] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%435, %436) /* ty=Tensor[(14, 5, 13), uint16] */
}

def @func_420() -> (Tensor[(2, 9, 6), float64],) {
  %437 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %438 = %437.0;
  (%438,)
}

def @func_4946(%var_4941: Tensor[(8, 8, 15), int64], %var_4942: Tensor[(8, 8, 15), int64]) -> Tensor[(8, 8, 15), bool] {
  %439 = cast(%var_4942, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %440 = shape_of(%var_4941, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_4941, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%441, %442) /* ty=Tensor[(8, 8, 15), bool] */
}

def @func_5936(%var_5919: Tensor[(14, 6, 11), float64]) -> Tensor[(14, 6, 11), float64] {
  %443 = cast(%var_5919, dtype="float64") /* ty=Tensor[(14, 6, 11), float64] */;
  erf(%443) /* ty=Tensor[(14, 6, 11), float64] */
}

def @func_378(%var_359: float32, %var_360: Tensor[(3, 1, 10), float32]) -> (Tensor[(3, 1, 10), float32], Tensor[(3, 1, 10), float64]) {
  %444 = cast(%var_359, dtype="float32") /* ty=float32 */;
  %445 = cast(%var_360, dtype="float32") /* ty=Tensor[(3, 1, 10), float32] */;
  %446 = cast(%var_360, dtype="float64") /* ty=Tensor[(3, 1, 10), float64] */;
  %447 = mod(%444, %445) /* ty=Tensor[(3, 1, 10), float32] */;
  %448 = sinh(%446) /* ty=Tensor[(3, 1, 10), float64] */;
  (%447, %448)
}

def @func_1987(%var_1956: Tensor[(1134), int64]) -> (Tensor[(2, 9, 6), uint64], Tensor[(14, 9, 9), bool], Tensor[(1134), int64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %449 = @func_672() /* ty=(Tensor[(2, 9, 6), float32],) */;
  %450 = %449.0;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(2, 9, 6), float32] */;
  %452 = sinh(%451) /* ty=Tensor[(2, 9, 6), float32] */;
  %453 = cast(%450, dtype="uint64") /* ty=Tensor[(2, 9, 6), uint64] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="uint64") /* ty=Tensor[(2, 9, 6), uint64] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %457 = cast(%var_1956, dtype="int64") /* ty=Tensor[(1134), int64] */;
  %458 = reshape(%457, newshape=[14, 9, 9]) /* ty=Tensor[(14, 9, 9), int64] */;
  %459 = @func_707(%458) /* ty=(Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */;
  %460 = @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %461 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %462 = subtract(%455, %456) /* ty=Tensor[(2, 9, 6), uint64] */;
  %463 = %459.0;
  %464 = %460.0;
  %465 = %461.0;
  (%462, %463, %var_1956, %464, %465)
}

def @func_2836() -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), uint32], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), bool], Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) {
  %466 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %467 = @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */;
  %468 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 15, 9), float32] */, dtype="float32") /* ty=Tensor[(6, 15, 9), float32] */;
  %469 = erf(%468) /* ty=Tensor[(6, 15, 9), float32] */;
  %470 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 15, 9), float32] */, dtype="uint32") /* ty=Tensor[(6, 15, 9), uint32] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="uint32") /* ty=Tensor[(6, 15, 9), uint32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %474 = @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */;
  %475 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 15, 9), float32] */, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
  %476 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(6, 15, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 15, 9), float32] */, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = @func_2737() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %480 = cast(meta[relay.Constant][26] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %481 = reshape(%480, newshape=[9, 15, 1]) /* ty=Tensor[(9, 15, 1), float64] */;
  %482 = @func_277(%481) /* ty=(Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) */;
  %483 = %466.0;
  %484 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  %485 = %467.1;
  %486 = logical_xor(%472, %473) /* ty=Tensor[(6, 15, 9), uint32] */;
  %487 = %474.1;
  %488 = equal(%477, %478) /* ty=Tensor[(6, 15, 9), bool] */;
  %489 = %479.0;
  %490 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  %491 = %482.1;
  (%483, %484, %485, %486, %487, %488, %489, %490, %491, meta[relay.Constant][26] /* ty=Tensor[(135), float64] */)
}

def @func_3986() -> (Tensor[(2, 9, 6), float64],) {
  %492 = @func_1866() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %493 = %492.0;
  (%493,)
}

def @func_3839(%var_3832: Tensor[(16, 12, 11), float32]) -> (Tensor[(16, 12, 11), float32],) {
  %494 = cast(%var_3832, dtype="float32") /* ty=Tensor[(16, 12, 11), float32] */;
  %495 = asinh(%494) /* ty=Tensor[(16, 12, 11), float32] */;
  (%495,)
}

def @func_179(%var_138: Tensor[(10, 11, 8), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %496 = cast(%var_138, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %497 = exp(%496) /* ty=Tensor[(10, 11, 8), float64] */;
  %498 = cast(%var_138, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%497, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %502 = cast(%497, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %503 = cosh(%502) /* ty=Tensor[(10, 11, 8), float64] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %505 = floor_mod(%500, %501) /* ty=Tensor[(10, 11, 8), float32] */;
  %506 = sinh(%504) /* ty=Tensor[(10, 11, 8), float32] */;
  (%505, %506)
}

def @func_3107() -> (Tensor[(2, 9, 6), float64],) {
  %507 = @func_1411() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %508 = %507.0;
  (%508,)
}

def @func_5070(%var_5059: Tensor[(3, 1, 10), float64]) -> (Tensor[(3, ?, 10), bool],) {
  %509 = @func_497() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */;
  %510 = %509.1;
  %511 = cast(%var_5059, dtype="bool") /* ty=Tensor[(3, 1, 10), bool] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="bool") /* ty=Tensor[(3, 1, 10), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = logical_or(%513, %514) /* ty=Tensor[(3, ?, 10), bool] */;
  (%515,)
}

def @func_6492(%var_6478: Tensor[(910), uint16]) -> (Tensor[(2, 9, 6), uint32], Tensor[(14, 5, 13), uint16], Tensor[(910), uint16]) {
  %516 = @func_559() /* ty=(Tensor[(2, 9, 6), uint32],) */;
  %517 = cast(%var_6478, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %518 = reshape(%517, newshape=[14, 5, 13]) /* ty=Tensor[(14, 5, 13), uint16] */;
  %519 = %516.0;
  %520 = @func_5707(%518) /* ty=Tensor[(14, 5, 13), uint16] */;
  (%519, %520, %var_6478)
}

def @func_817() -> (Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %521 = @func_559() /* ty=(Tensor[(2, 9, 6), uint32],) */;
  %522 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %523 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %524 = %521.0;
  %525 = %522.0;
  %526 = %523.0;
  (%524, %525, %526)
}

def @func_4001() -> Tensor[(6, 6, 8), float32] {
  %527 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 8), float32] */;
  cos(%527) /* ty=Tensor[(6, 6, 8), float32] */
}

def @func_5671(%var_5661: float64, %var_5662: Tensor[(14, 4, 13), float64]) -> (Tensor[(14, 4, 13), float64],) {
  %528 = cast(%var_5661, dtype="float64") /* ty=float64 */;
  %529 = cast(%var_5662, dtype="float64") /* ty=Tensor[(14, 4, 13), float64] */;
  %530 = divide(%528, %529) /* ty=Tensor[(14, 4, 13), float64] */;
  (%530,)
}

def @func_3546(%var_3533: Tensor[(1, 7, 1), float32]) -> (Tensor[(1, 7, 1), float32], Tensor[(1, 7, 1), float64]) {
  %531 = cast(%var_3533, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
  %532 = cast(%var_3533, dtype="float64") /* ty=Tensor[(1, 7, 1), float64] */;
  %533 = log(%531) /* ty=Tensor[(1, 7, 1), float32] */;
  %534 = log2(%532) /* ty=Tensor[(1, 7, 1), float64] */;
  (%533, %534)
}

def @func_5882() -> (Tensor[(2, 9, 6), float64],) {
  %535 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %536 = %535.0;
  (%536,)
}

def @func_4123() -> (Tensor[(2, 9, 6), float64],) {
  %537 = @func_1043() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %538 = %537.0;
  (%538,)
}

def @func_987() -> (Tensor[(2, 9, 6), float64],) {
  %539 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %540 = %539.0;
  (%540,)
}

def @func_3150() -> (Tensor[(2, 9, 6), uint32], Tensor[(880), float64]) {
  %541 = @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %542 = @func_1807() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), int16]) */;
  %543 = %541.0;
  %544 = %542.0;
  (%543, %544)
}

def @func_1376(%var_1357: Tensor[(6, 10, 2), uint32]) -> (Tensor[(6, 10, 2), bool], Tensor[(2, 9, 6), float64]) {
  %545 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %546 = cast(%var_1357, dtype="bool") /* ty=Tensor[(6, 10, 2), bool] */;
  %547 = not_equal(%545, %546) /* ty=Tensor[(6, 10, 2), bool] */;
  %548 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
  (%547, %548)
}

def @func_5025(%var_4977: Tensor[(4, 1, 7), float32], %var_5022: Tensor[(1134), int64]) -> (Tensor[(2, 9, 6), float64], Tensor[(4, ?, 7), uint64], Tensor[(2, 9, 6), bool], Tensor[(14, 9, 9), bool], Tensor[(1134), int64]) {
  %549 = cast(%var_4977, dtype="float32") /* ty=Tensor[(4, 1, 7), float32] */;
  %550 = log(%549) /* ty=Tensor[(4, 1, 7), float32] */;
  %551 = cast(%var_4977, dtype="uint64") /* ty=Tensor[(4, 1, 7), uint64] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="uint64") /* ty=Tensor[(4, 1, 7), uint64] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %555 = @func_4665() /* ty=(Tensor[(2, 9, 6), uint32],) */;
  %556 = %555.0;
  %557 = @func_1583() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %558 = %557.1;
  %559 = cast(%558, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %560 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%556, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %563 = cast(%var_5022, dtype="int64") /* ty=Tensor[(1134), int64] */;
  %564 = reshape(%563, newshape=[14, 9, 9]) /* ty=Tensor[(14, 9, 9), int64] */;
  %565 = @func_707(%564) /* ty=(Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */;
  %566 = @func_3929() /* ty=Tensor[(2, 9, 6), float64] */;
  %567 = maximum(%553, %554) /* ty=Tensor[(4, ?, 7), uint64] */;
  %568 = greater_equal(%561, %562) /* ty=Tensor[(2, 9, 6), bool] */;
  %569 = %565.0;
  (%566, %567, %568, %569, %var_5022)
}

def @func_746(%var_730: Tensor[(9, 126), int64]) -> (Tensor[(2, 9, 6), float64], Tensor[(135), float64], Tensor[(9, 126), bool]) {
  %570 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %571 = cast(%var_730, dtype="int64") /* ty=Tensor[(9, 126), int64] */;
  %572 = reshape(%571, newshape=[14, 9, 9]) /* ty=Tensor[(14, 9, 9), int64] */;
  %573 = @func_707(%572) /* ty=(Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */;
  %574 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 126), int64] */, dtype="bool") /* ty=Tensor[(9, 126), bool] */;
  %575 = shape_of(%var_730, dtype="int32") /* ty=Tensor[(2), int32] */;
  %576 = cast(%var_730, dtype="bool") /* ty=Tensor[(9, 126), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %578 = %570.0;
  %579 = %573.3;
  %580 = less_equal(%576, %577) /* ty=Tensor[(9, 126), bool] */;
  (%578, %579, %580)
}

def @func_5251() -> (Tensor[(10, 11, 14), float32], float32) {
  %581 = @func_3058() /* ty=(Tensor[(10, 11, 14), float32],) */;
  %582 = @func_497() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */;
  %583 = %581.0;
  %584 = %582.2;
  (%583, %584)
}

def @func_2354(%var_2300: float32, %var_2301: Tensor[(8, 6, 16), float32]) -> (Tensor[(8, 6, 16), float32], Tensor[(2, 9, 6), float64], Tensor[(3, 1, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(3, 378), int64]) {
  %585 = cast(%var_2300, dtype="float32") /* ty=float32 */;
  %586 = cast(%var_2301, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  %587 = @func_497() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */;
  %588 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 378), int64] */, dtype="int64") /* ty=Tensor[(3, 378), int64] */;
  %589 = reshape(%588, newshape=[1134]) /* ty=Tensor[(1134), int64] */;
  %590 = @func_1987(%589) /* ty=(Tensor[(2, 9, 6), uint64], Tensor[(14, 9, 9), bool], Tensor[(1134), int64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %591 = power(%585, %586) /* ty=Tensor[(8, 6, 16), float32] */;
  %592 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
  %593 = %587.1;
  %594 = %590.3;
  (%591, %592, %593, %594, meta[relay.Constant][30] /* ty=Tensor[(3, 378), int64] */)
}

def @func_3645(%var_3594: Tensor[(2, 9, 7), float32]) -> (Tensor[(2, 9, 7), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %595 = @func_904() /* ty=(float32, Tensor[(2, 9, 6), float64]) */;
  %596 = %595.0;
  %597 = cast(%596, dtype="bool") /* ty=bool */;
  %598 = cast(%var_3594, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %599 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %600 = @func_2737() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %601 = less_equal(%597, %598) /* ty=Tensor[(2, 9, 7), bool] */;
  %602 = %599.0;
  %603 = %600.1;
  (%601, %602, %603)
}

def @func_5865() -> Tensor[(2, 9, 6), float64] {
  @func_1010() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_2075() -> (Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(880), float64]) {
  %604 = @func_1491() /* ty=(Tensor[(880), float64],) */;
  %605 = @func_763() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %606 = @func_1398() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) */;
  %607 = %604.0;
  %608 = %605.0;
  %609 = %606.2;
  (%607, %608, %609)
}

def @func_4734(%var_4677: Tensor[(2, 9, 6), float32]) -> (Tensor[(2, 9, 6), int16], Tensor[(9, 15, 1), float64], Tensor[(2, 9, 7), bool], Tensor[(126), float32], Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(135), int16], Tensor[(2, 9, 6), float64]) {
  %610 = @func_672() /* ty=(Tensor[(2, 9, 6), float32],) */;
  %611 = %610.0;
  %612 = cast(%var_4677, dtype="int16") /* ty=Tensor[(2, 9, 6), int16] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="int16") /* ty=Tensor[(2, 9, 6), int16] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %616 = cast(meta[relay.Constant][31] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %617 = reshape(%616, newshape=[9, 15, 1]) /* ty=Tensor[(9, 15, 1), float64] */;
  %618 = @func_277(%617) /* ty=(Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) */;
  %619 = cast(meta[relay.Constant][32] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %620 = reshape(%619, newshape=[2, 9, 7]) /* ty=Tensor[(2, 9, 7), float32] */;
  %621 = @func_3645(%620) /* ty=(Tensor[(2, 9, 7), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %622 = @func_3150() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(880), float64]) */;
  %623 = @func_1411() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %624 = cast(meta[relay.Constant][31] /* ty=Tensor[(135), float64] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %625 = acos(%624) /* ty=Tensor[(135), float32] */;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(135), float32] */;
  %627 = sigmoid(%626) /* ty=Tensor[(135), float32] */;
  %628 = cast(%627, dtype="int16") /* ty=Tensor[(135), int16] */;
  %629 = shape_of(%625, dtype="int32") /* ty=Tensor[(1), int32] */;
  %630 = cast(%625, dtype="int16") /* ty=Tensor[(135), int16] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?), int16] */;
  %632 = @func_3986() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %633 = right_shift(%614, %615) /* ty=Tensor[(2, 9, 6), int16] */;
  %634 = %618.1;
  %635 = %621.0;
  %636 = %622.1;
  %637 = %623.0;
  %638 = bitwise_or(%630, %631) /* ty=Tensor[(135), int16] */;
  %639 = %632.0;
  (%633, %634, %635, meta[relay.Constant][32] /* ty=Tensor[(126), float32] */, %636, %637, %638, %639)
}

def @func_474(%var_455: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), int64], Tensor[(9, 15, 1), float64], Tensor[(1, 135), float64]) {
  %640 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %641 = %640.0;
  %642 = cast(%var_455, dtype="int64") /* ty=Tensor[(2, 9, 6), int64] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="int64") /* ty=Tensor[(2, 9, 6), int64] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %646 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 135), float64] */, dtype="float64") /* ty=Tensor[(1, 135), float64] */;
  %647 = reshape(%646, newshape=[9, 15, 1]) /* ty=Tensor[(9, 15, 1), float64] */;
  %648 = @func_277(%647) /* ty=(Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) */;
  %649 = bitwise_and(%644, %645) /* ty=Tensor[(2, 9, 6), int64] */;
  %650 = %648.1;
  (%649, %650, meta[relay.Constant][33] /* ty=Tensor[(1, 135), float64] */)
}

def @func_2228(%var_2208: Tensor[(7, 6, 5), uint16], %var_2209: Tensor[(7, 6, 5), uint16]) -> (Tensor[(7, 6, 5), uint16], Tensor[(5, 15, 11), float64], Tensor[(2, 9, 6), float64]) {
  %651 = cast(%var_2209, dtype="uint16") /* ty=Tensor[(7, 6, 5), uint16] */;
  %652 = shape_of(%var_2208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%var_2208, dtype="uint16") /* ty=Tensor[(7, 6, 5), uint16] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %655 = @func_1411() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %656 = maximum(%653, %654) /* ty=Tensor[(7, 6, 5), uint16] */;
  %657 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  %658 = %655.0;
  (%656, %657, %658)
}

def @func_5497(%var_5488: Tensor[(8, 9, 6), float64]) -> (Tensor[(8, 9, 6), float64],) {
  %659 = cast(%var_5488, dtype="float64") /* ty=Tensor[(8, 9, 6), float64] */;
  %660 = atan(%659) /* ty=Tensor[(8, 9, 6), float64] */;
  (%660,)
}

def @main(%var_6593: Tensor[(11, 9, 11), float64]) -> (Tensor[(11, 9, 11), float64], Tensor[(11, 9, 11), float32]) {
  %661 = cast(%var_6593, dtype="float64") /* ty=Tensor[(11, 9, 11), float64] */;
  %662 = cast(%var_6593, dtype="float32") /* ty=Tensor[(11, 9, 11), float32] */;
  %663 = sqrt(%661) /* ty=Tensor[(11, 9, 11), float64] */;
  %664 = sigmoid(%662) /* ty=Tensor[(11, 9, 11), float32] */;
  (%663, %664)
}

def @func_1583() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %665 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %666 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %667 = %665.0;
  %668 = %666.0;
  (%667, %668)
}

def @func_1491() -> (Tensor[(880), float64],) {
  %669 = @func_1398() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) */;
  %670 = %669.2;
  %671 = cast(%670, dtype="float64") /* ty=Tensor[(880), float64] */;
  %672 = sin(%671) /* ty=Tensor[(880), float64] */;
  (%672,)
}

def @func_559() -> (Tensor[(2, 9, 6), uint32],) {
  %673 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %674 = %673.0;
  %675 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %676 = %675.0;
  %677 = cast(%676, dtype="uint32") /* ty=Tensor[(2, 9, 6), uint32] */;
  %678 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%674, dtype="uint32") /* ty=Tensor[(2, 9, 6), uint32] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %681 = add(%679, %680) /* ty=Tensor[(2, 9, 6), uint32] */;
  (%681,)
}

def @func_1340() -> Tensor[(2, 9, 6), float64] {
  @func_1010() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_4379() -> (Tensor[(2, 9, 6), float64], Tensor[(880), float64], Tensor[(2, 9, 6), uint16]) {
  %682 = @func_3986() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %683 = @func_1656() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %684 = @func_4276() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %685 = %684.0;
  %686 = @func_3011() /* ty=Tensor[(2, 9, 6), float64] */;
  %687 = cast(%686, dtype="uint16") /* ty=Tensor[(2, 9, 6), uint16] */;
  %688 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%685, dtype="uint16") /* ty=Tensor[(2, 9, 6), uint16] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %691 = %682.0;
  %692 = %683.0;
  %693 = maximum(%689, %690) /* ty=Tensor[(2, 9, 6), uint16] */;
  (%691, %692, %693)
}

def @func_6107(%var_6094: Tensor[(10, 2, 6), int16]) -> (Tensor[(10, 2, 6), int16],) {
  %694 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 2, 6), int16] */, dtype="int16") /* ty=Tensor[(10, 2, 6), int16] */;
  %695 = shape_of(%var_6094, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%var_6094, dtype="int16") /* ty=Tensor[(10, 2, 6), int16] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %698 = bitwise_and(%696, %697) /* ty=Tensor[(10, 2, 6), int16] */;
  (%698,)
}

def @func_5189(%var_5181: Tensor[(13, 16, 10), int64]) -> Tensor[(13, 16, 10), int64] {
  %699 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 16, 10), int64] */, dtype="int64") /* ty=Tensor[(13, 16, 10), int64] */;
  %700 = shape_of(%var_5181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%var_5181, dtype="int64") /* ty=Tensor[(13, 16, 10), int64] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  add(%701, %702) /* ty=Tensor[(13, 16, 10), int64] */
}

def @func_6201() -> (Tensor[(2, 9, 6), float64],) {
  %703 = @func_5533() /* ty=Tensor[(2, 9, 6), float64] */;
  (%703,)
}

def @func_4590() -> Tensor[(2, 9, 6), float64] {
  %704 = @func_1221() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64], Tensor[(1, 135), float32], Tensor[(2, 9, 6), float64]) */;
  %704.0
}

def @func_5345(%var_5314: Tensor[(3, 4, 12), float64], %var_5320: Tensor[(3, 4, 12), float64], %var_5334: Tensor[(1134), int64]) -> (Tensor[(2, 9, 6), uint32], Tensor[(3, 4, 12), int8], Tensor[(9, 15, 1), float64], Tensor[(1134), int64]) {
  %705 = @func_559() /* ty=(Tensor[(2, 9, 6), uint32],) */;
  %706 = cast(%var_5314, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %707 = rsqrt(%706) /* ty=Tensor[(3, 4, 12), float64] */;
  %708 = cast(%var_5320, dtype="int8") /* ty=Tensor[(3, 4, 12), int8] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%707, dtype="int8") /* ty=Tensor[(3, 4, 12), int8] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %712 = cast(%var_5334, dtype="int64") /* ty=Tensor[(1134), int64] */;
  %713 = reshape(%712, newshape=[14, 9, 9]) /* ty=Tensor[(14, 9, 9), int64] */;
  %714 = @func_707(%713) /* ty=(Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */;
  %715 = %705.0;
  %716 = add(%710, %711) /* ty=Tensor[(3, 4, 12), int8] */;
  %717 = %714.2;
  (%715, %716, %717, %var_5334)
}

def @func_2737() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %718 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %719 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
  %720 = %718.0;
  (%719, %720)
}

def @func_1183() -> Tensor[(5, 15, 11), float64] {
  %721 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 11), float64] */;
  erf(%721) /* ty=Tensor[(5, 15, 11), float64] */
}

def @func_2626() -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) {
  %722 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %723 = cast(meta[relay.Constant][37] /* ty=Tensor[(825), float64] */, dtype="float64") /* ty=Tensor[(825), float64] */;
  %724 = reshape(%723, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float64] */;
  %725 = @func_1308(%724) /* ty=(Tensor[(5, 15, 11), uint8],) */;
  %726 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %727 = %726.0;
  %728 = cast(%727, dtype="float32") /* ty=Tensor[(2, 9, 6), float32] */;
  %729 = %722.0;
  %730 = %725.0;
  %731 = exp(%728) /* ty=Tensor[(2, 9, 6), float32] */;
  (%729, %730, meta[relay.Constant][37] /* ty=Tensor[(825), float64] */, %731)
}

def @func_1891(%var_1876: Tensor[(14, 9, 15), bool], %var_1877: Tensor[(14, 9, 15), bool]) -> (Tensor[(14, 9, 15), bool], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(5, 15, 11), float64]) {
  %732 = cast(%var_1877, dtype="bool") /* ty=Tensor[(14, 9, 15), bool] */;
  %733 = shape_of(%var_1876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%var_1876, dtype="bool") /* ty=Tensor[(14, 9, 15), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %736 = cast(meta[relay.Constant][38] /* ty=Tensor[(825), float64] */, dtype="float64") /* ty=Tensor[(825), float64] */;
  %737 = reshape(%736, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float64] */;
  %738 = @func_1308(%737) /* ty=(Tensor[(5, 15, 11), uint8],) */;
  %739 = logical_and(%734, %735) /* ty=Tensor[(14, 9, 15), bool] */;
  %740 = %738.0;
  %741 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  (%739, %740, meta[relay.Constant][38] /* ty=Tensor[(825), float64] */, %741)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6201() -> (Tensor[(2, 9, 6), float64],) {
  %0 = @func_5533() /* ty=Tensor[(2, 9, 6), float64] */;
  (%0,)
}

def @func_5938(%var_5937: Tensor[(14, 6, 11), float64]) -> Tensor[(14, 6, 11), float64] {
  %2 = fn (%var_5919: Tensor[(14, 6, 11), float64]) -> Tensor[(14, 6, 11), float64] {
    %1 = cast(%var_5919, dtype="float64") /* ty=Tensor[(14, 6, 11), float64] */;
    erf(%1) /* ty=Tensor[(14, 6, 11), float64] */
  };
  %2(%var_5937) /* ty=Tensor[(14, 6, 11), float64] */
}

def @func_1399() -> (Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) {
  %9 = fn () -> (Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) {
    %3 = @func_763() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
    %5 = reshape(%4, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float64] */;
    %6 = @func_179(%5) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %7 = %3.0;
    %8 = %6.0;
    (%7, %8, meta[relay.Constant][0] /* ty=Tensor[(880), float64] */)
  };
  %9() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) */
}

def @func_4039() -> (Tensor[(880), float64], Tensor[(2, 9, 6), float64]) {
  %13 = fn () -> (Tensor[(880), float64], Tensor[(2, 9, 6), float64]) {
    %10 = @func_1398() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) */;
    %11 = %10.2;
    %12 = @func_3011() /* ty=Tensor[(2, 9, 6), float64] */;
    (%11, %12)
  };
  %13() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_3839(%var_3832: Tensor[(16, 12, 11), float32]) -> (Tensor[(16, 12, 11), float32],) {
  %14 = cast(%var_3832, dtype="float32") /* ty=Tensor[(16, 12, 11), float32] */;
  %15 = asinh(%14) /* ty=Tensor[(16, 12, 11), float32] */;
  (%15,)
}

def @func_1656() -> (Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %16 = @func_1491() /* ty=(Tensor[(880), float64],) */;
  %17 = @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %18 = @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %19 = %16.0;
  %20 = %17.0;
  %21 = %18.0;
  (%19, %20, %21)
}

def @func_5409(%var_5407: Tensor[(9, 15, 14), float32], %var_5408: Tensor[(5, 165), float64]) -> (Tensor[(9, 15, 14), bool], Tensor[(5, 15, 11), int16], Tensor[(5, 165), float64]) {
  @func_5405(%var_5407, %var_5408) /* ty=(Tensor[(9, 15, 14), bool], Tensor[(5, 15, 11), int16], Tensor[(5, 165), float64]) */
}

def @func_5983() -> Tensor[(5, 15, 11), float64] {
  %22 = fn () -> Tensor[(5, 15, 11), float64] {
    @func_5109() /* ty=Tensor[(5, 15, 11), float64] */
  };
  %22() /* ty=Tensor[(5, 15, 11), float64] */
}

def @func_2930(%var_2928: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), uint32]) {
  @func_2927(%var_2928) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), uint32]) */
}

def @func_1867() -> (Tensor[(2, 9, 6), float64],) {
  %25 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %23 = @func_1043() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %24 = %23.0;
    (%24,)
  };
  %25() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_239() -> (Tensor[(2, 9, 6), float64],) {
  %30 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %26 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %27 = %26.0;
    %28 = cast(%27, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
    %29 = atan(%28) /* ty=Tensor[(2, 9, 6), float64] */;
    (%29,)
  };
  %30() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_1185() -> Tensor[(5, 15, 11), float64] {
  @func_1183() /* ty=Tensor[(5, 15, 11), float64] */
}

def @func_3842(%var_3840: Tensor[(16, 12, 11), float32]) -> (Tensor[(16, 12, 11), float32],) {
  @func_3839(%var_3840) /* ty=(Tensor[(16, 12, 11), float32],) */
}

def @func_2626() -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) {
  %31 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(825), float64] */, dtype="float64") /* ty=Tensor[(825), float64] */;
  %33 = reshape(%32, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float64] */;
  %34 = @func_1308(%33) /* ty=(Tensor[(5, 15, 11), uint8],) */;
  %35 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %36 = %35.0;
  %37 = cast(%36, dtype="float32") /* ty=Tensor[(2, 9, 6), float32] */;
  %38 = %31.0;
  %39 = %34.0;
  %40 = exp(%37) /* ty=Tensor[(2, 9, 6), float32] */;
  (%38, %39, meta[relay.Constant][1] /* ty=Tensor[(825), float64] */, %40)
}

def @func_2231(%var_2229: Tensor[(7, 6, 5), uint16], %var_2230: Tensor[(7, 6, 5), uint16]) -> (Tensor[(7, 6, 5), uint16], Tensor[(5, 15, 11), float64], Tensor[(2, 9, 6), float64]) {
  %49 = fn (%var_2208: Tensor[(7, 6, 5), uint16], %var_2209: Tensor[(7, 6, 5), uint16]) -> (Tensor[(7, 6, 5), uint16], Tensor[(5, 15, 11), float64], Tensor[(2, 9, 6), float64]) {
    %41 = cast(%var_2209, dtype="uint16") /* ty=Tensor[(7, 6, 5), uint16] */;
    %42 = shape_of(%var_2208, dtype="int32") /* ty=Tensor[(3), int32] */;
    %43 = cast(%var_2208, dtype="uint16") /* ty=Tensor[(7, 6, 5), uint16] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %45 = @func_1411() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %46 = maximum(%43, %44) /* ty=Tensor[(7, 6, 5), uint16] */;
    %47 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
    %48 = %45.0;
    (%46, %47, %48)
  };
  %49(%var_2229, %var_2230) /* ty=(Tensor[(7, 6, 5), uint16], Tensor[(5, 15, 11), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_1341() -> Tensor[(2, 9, 6), float64] {
  %50 = fn () -> Tensor[(2, 9, 6), float64] {
    @func_1010() /* ty=Tensor[(2, 9, 6), float64] */
  };
  %50() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_3058() -> (Tensor[(10, 11, 14), float32],) {
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 14), float64] */;
  %52 = log(%51) /* ty=Tensor[(10, 11, 14), float64] */;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(10, 11, 14), float32] */;
  %54 = log10(%53) /* ty=Tensor[(10, 11, 14), float32] */;
  (%54,)
}

def @func_474(%var_455: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), int64], Tensor[(9, 15, 1), float64], Tensor[(1, 135), float64]) {
  %55 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %56 = %55.0;
  %57 = cast(%var_455, dtype="int64") /* ty=Tensor[(2, 9, 6), int64] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="int64") /* ty=Tensor[(2, 9, 6), int64] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 135), float64] */, dtype="float64") /* ty=Tensor[(1, 135), float64] */;
  %62 = reshape(%61, newshape=[9, 15, 1]) /* ty=Tensor[(9, 15, 1), float64] */;
  %63 = @func_277(%62) /* ty=(Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) */;
  %64 = bitwise_and(%59, %60) /* ty=Tensor[(2, 9, 6), int64] */;
  %65 = %63.1;
  (%64, %65, meta[relay.Constant][3] /* ty=Tensor[(1, 135), float64] */)
}

def @func_765() -> (Tensor[(2, 9, 6), float64],) {
  @func_763() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_3546(%var_3533: Tensor[(1, 7, 1), float32]) -> (Tensor[(1, 7, 1), float32], Tensor[(1, 7, 1), float64]) {
  %66 = cast(%var_3533, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
  %67 = cast(%var_3533, dtype="float64") /* ty=Tensor[(1, 7, 1), float64] */;
  %68 = log(%66) /* ty=Tensor[(1, 7, 1), float32] */;
  %69 = log2(%67) /* ty=Tensor[(1, 7, 1), float64] */;
  (%68, %69)
}

def @func_381(%var_379: float32, %var_380: Tensor[(3, 1, 10), float32]) -> (Tensor[(3, 1, 10), float32], Tensor[(3, 1, 10), float64]) {
  %75 = fn (%var_359: float32, %var_360: Tensor[(3, 1, 10), float32]) -> (Tensor[(3, 1, 10), float32], Tensor[(3, 1, 10), float64]) {
    %70 = cast(%var_359, dtype="float32") /* ty=float32 */;
    %71 = cast(%var_360, dtype="float32") /* ty=Tensor[(3, 1, 10), float32] */;
    %72 = cast(%var_360, dtype="float64") /* ty=Tensor[(3, 1, 10), float64] */;
    %73 = mod(%70, %71) /* ty=Tensor[(3, 1, 10), float32] */;
    %74 = sinh(%72) /* ty=Tensor[(3, 1, 10), float64] */;
    (%73, %74)
  };
  %75(%var_379, %var_380) /* ty=(Tensor[(3, 1, 10), float32], Tensor[(3, 1, 10), float64]) */
}

def @func_5882() -> (Tensor[(2, 9, 6), float64],) {
  %76 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %77 = %76.0;
  (%77,)
}

def @func_5671(%var_5661: float64, %var_5662: Tensor[(14, 4, 13), float64]) -> (Tensor[(14, 4, 13), float64],) {
  %78 = cast(%var_5661, dtype="float64") /* ty=float64 */;
  %79 = cast(%var_5662, dtype="float64") /* ty=Tensor[(14, 4, 13), float64] */;
  %80 = divide(%78, %79) /* ty=Tensor[(14, 4, 13), float64] */;
  (%80,)
}

def @func_6109(%var_6108: Tensor[(10, 2, 6), int16]) -> (Tensor[(10, 2, 6), int16],) {
  %86 = fn (%var_6094: Tensor[(10, 2, 6), int16]) -> (Tensor[(10, 2, 6), int16],) {
    %81 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 2, 6), int16] */, dtype="int16") /* ty=Tensor[(10, 2, 6), int16] */;
    %82 = shape_of(%var_6094, dtype="int32") /* ty=Tensor[(3), int32] */;
    %83 = cast(%var_6094, dtype="int16") /* ty=Tensor[(10, 2, 6), int16] */;
    %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %85 = bitwise_and(%83, %84) /* ty=Tensor[(10, 2, 6), int16] */;
    (%85,)
  };
  %86(%var_6108) /* ty=(Tensor[(10, 2, 6), int16],) */
}

def @func_3230(%var_3228: float32) -> (Tensor[(10, 11, 14), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(30), float32], Tensor[(2, 9, 6), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  @func_3227(%var_3228) /* ty=(Tensor[(10, 11, 14), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(30), float32], Tensor[(2, 9, 6), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_3493(%var_3492: Tensor[(16, 10, 8), float32]) -> (Tensor[(16, 10, 8), float32], Tensor[(825), float64]) {
  %94 = fn (%var_3475: Tensor[(16, 10, 8), float32]) -> (Tensor[(16, 10, 8), float32], Tensor[(825), float64]) {
    %87 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
    %88 = shape_of(%var_3475, dtype="int32") /* ty=Tensor[(3), int32] */;
    %89 = cast(%var_3475, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
    %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %91 = @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */;
    %92 = floor_divide(%89, %90) /* ty=Tensor[(16, 10, 8), float32] */;
    %93 = %91.2;
    (%92, %93)
  };
  %94(%var_3492) /* ty=(Tensor[(16, 10, 8), float32], Tensor[(825), float64]) */
}

def @func_3700() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  @func_3698() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_1807() -> (Tensor[(880), float64], Tensor[(2, 9, 6), int16]) {
  %95 = @func_1398() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) */;
  %96 = @func_1221() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64], Tensor[(1, 135), float32], Tensor[(2, 9, 6), float64]) */;
  %97 = %95.2;
  %98 = %96.1;
  (%97, %98)
}

def @func_3151() -> (Tensor[(2, 9, 6), uint32], Tensor[(880), float64]) {
  %103 = fn () -> (Tensor[(2, 9, 6), uint32], Tensor[(880), float64]) {
    %99 = @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %100 = @func_1807() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), int16]) */;
    %101 = %99.0;
    %102 = %100.0;
    (%101, %102)
  };
  %103() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(880), float64]) */
}

def @func_182(%var_180: Tensor[(10, 11, 8), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_179(%var_180) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_2451() -> Tensor[(2, 9, 6), float64] {
  %104 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %104.0
}

def @func_4610() -> (Tensor[(2, 9, 6), float64],) {
  %105 = @func_1010() /* ty=Tensor[(2, 9, 6), float64] */;
  (%105,)
}

def @main(%var_6593: Tensor[(11, 9, 11), float64]) -> (Tensor[(11, 9, 11), float64], Tensor[(11, 9, 11), float32]) {
  %106 = cast(%var_6593, dtype="float64") /* ty=Tensor[(11, 9, 11), float64] */;
  %107 = cast(%var_6593, dtype="float32") /* ty=Tensor[(11, 9, 11), float32] */;
  %108 = sqrt(%106) /* ty=Tensor[(11, 9, 11), float64] */;
  %109 = sigmoid(%107) /* ty=Tensor[(11, 9, 11), float32] */;
  (%108, %109)
}

def @func_4736(%var_4735: Tensor[(2, 9, 6), float32]) -> (Tensor[(2, 9, 6), int16], Tensor[(9, 15, 1), float64], Tensor[(2, 9, 7), bool], Tensor[(126), float32], Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(135), int16], Tensor[(2, 9, 6), float64]) {
  %140 = fn (%var_4677: Tensor[(2, 9, 6), float32]) -> (Tensor[(2, 9, 6), int16], Tensor[(9, 15, 1), float64], Tensor[(2, 9, 7), bool], Tensor[(126), float32], Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(135), int16], Tensor[(2, 9, 6), float64]) {
    %110 = @func_672() /* ty=(Tensor[(2, 9, 6), float32],) */;
    %111 = %110.0;
    %112 = cast(%var_4677, dtype="int16") /* ty=Tensor[(2, 9, 6), int16] */;
    %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
    %114 = cast(%111, dtype="int16") /* ty=Tensor[(2, 9, 6), int16] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
    %117 = reshape(%116, newshape=[9, 15, 1]) /* ty=Tensor[(9, 15, 1), float64] */;
    %118 = @func_277(%117) /* ty=(Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) */;
    %119 = cast(meta[relay.Constant][7] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
    %120 = reshape(%119, newshape=[2, 9, 7]) /* ty=Tensor[(2, 9, 7), float32] */;
    %121 = @func_3645(%120) /* ty=(Tensor[(2, 9, 7), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %122 = @func_3150() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(880), float64]) */;
    %123 = @func_1411() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %124 = cast(meta[relay.Constant][6] /* ty=Tensor[(135), float64] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %125 = acos(%124) /* ty=Tensor[(135), float32] */;
    %126 = cast(%125, dtype="float32") /* ty=Tensor[(135), float32] */;
    %127 = sigmoid(%126) /* ty=Tensor[(135), float32] */;
    %128 = cast(%127, dtype="int16") /* ty=Tensor[(135), int16] */;
    %129 = shape_of(%125, dtype="int32") /* ty=Tensor[(1), int32] */;
    %130 = cast(%125, dtype="int16") /* ty=Tensor[(135), int16] */;
    %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?), int16] */;
    %132 = @func_3986() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %133 = right_shift(%114, %115) /* ty=Tensor[(2, 9, 6), int16] */;
    %134 = %118.1;
    %135 = %121.0;
    %136 = %122.1;
    %137 = %123.0;
    %138 = bitwise_or(%130, %131) /* ty=Tensor[(135), int16] */;
    %139 = %132.0;
    (%133, %134, %135, meta[relay.Constant][7] /* ty=Tensor[(126), float32] */, %136, %137, %138, %139)
  };
  %140(%var_4735) /* ty=(Tensor[(2, 9, 6), int16], Tensor[(9, 15, 1), float64], Tensor[(2, 9, 7), bool], Tensor[(126), float32], Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(135), int16], Tensor[(2, 9, 6), float64]) */
}

def @func_5070(%var_5059: Tensor[(3, 1, 10), float64]) -> (Tensor[(3, ?, 10), bool],) {
  %141 = @func_497() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */;
  %142 = %141.1;
  %143 = cast(%var_5059, dtype="bool") /* ty=Tensor[(3, 1, 10), bool] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="bool") /* ty=Tensor[(3, 1, 10), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = logical_or(%145, %146) /* ty=Tensor[(3, ?, 10), bool] */;
  (%147,)
}

def @func_5710(%var_5708: Tensor[(14, 5, 13), uint16]) -> Tensor[(14, 5, 13), uint16] {
  @func_5707(%var_5708) /* ty=Tensor[(14, 5, 13), uint16] */
}

def @func_4277() -> (Tensor[(2, 9, 6), float64],) {
  %150 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %148 = @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %149 = %148.2;
    (%149,)
  };
  %150() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_6068() -> (Tensor[(10, 11, 14), float32], Tensor[(6, 6, 8), bool], Tensor[(6, 6, 8), float32], float32, Tensor[(6, 6, 8), float64]) {
  @func_6066() /* ty=(Tensor[(10, 11, 14), float32], Tensor[(6, 6, 8), bool], Tensor[(6, 6, 8), float32], float32, Tensor[(6, 6, 8), float64]) */
}

def @func_5191(%var_5190: Tensor[(13, 16, 10), int64]) -> Tensor[(13, 16, 10), int64] {
  %155 = fn (%var_5181: Tensor[(13, 16, 10), int64]) -> Tensor[(13, 16, 10), int64] {
    %151 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 16, 10), int64] */, dtype="int64") /* ty=Tensor[(13, 16, 10), int64] */;
    %152 = shape_of(%var_5181, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%var_5181, dtype="int64") /* ty=Tensor[(13, 16, 10), int64] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    add(%153, %154) /* ty=Tensor[(13, 16, 10), int64] */
  };
  %155(%var_5190) /* ty=Tensor[(13, 16, 10), int64] */
}

def @func_1378(%var_1377: Tensor[(6, 10, 2), uint32]) -> (Tensor[(6, 10, 2), bool], Tensor[(2, 9, 6), float64]) {
  %160 = fn (%var_1357: Tensor[(6, 10, 2), uint32]) -> (Tensor[(6, 10, 2), bool], Tensor[(2, 9, 6), float64]) {
    %156 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="bool") /* ty=bool */;
    %157 = cast(%var_1357, dtype="bool") /* ty=Tensor[(6, 10, 2), bool] */;
    %158 = not_equal(%156, %157) /* ty=Tensor[(6, 10, 2), bool] */;
    %159 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
    (%158, %159)
  };
  %160(%var_1377) /* ty=(Tensor[(6, 10, 2), bool], Tensor[(2, 9, 6), float64]) */
}

def @func_4946(%var_4941: Tensor[(8, 8, 15), int64], %var_4942: Tensor[(8, 8, 15), int64]) -> Tensor[(8, 8, 15), bool] {
  %161 = cast(%var_4942, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %162 = shape_of(%var_4941, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_4941, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%163, %164) /* ty=Tensor[(8, 8, 15), bool] */
}

def @func_4532() -> Tensor[(2, 9, 6), float64] {
  %166 = fn () -> Tensor[(2, 9, 6), float64] {
    %165 = @func_2737() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %165.1
  };
  %166() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_560() -> (Tensor[(2, 9, 6), uint32],) {
  %176 = fn () -> (Tensor[(2, 9, 6), uint32],) {
    %167 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %168 = %167.0;
    %169 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %170 = %169.0;
    %171 = cast(%170, dtype="uint32") /* ty=Tensor[(2, 9, 6), uint32] */;
    %172 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %173 = cast(%168, dtype="uint32") /* ty=Tensor[(2, 9, 6), uint32] */;
    %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %175 = add(%173, %174) /* ty=Tensor[(2, 9, 6), uint32] */;
    (%175,)
  };
  %176() /* ty=(Tensor[(2, 9, 6), uint32],) */
}

def @func_1989(%var_1988: Tensor[(1134), int64]) -> (Tensor[(2, 9, 6), uint64], Tensor[(14, 9, 9), bool], Tensor[(1134), int64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %194 = fn (%var_1956: Tensor[(1134), int64]) -> (Tensor[(2, 9, 6), uint64], Tensor[(14, 9, 9), bool], Tensor[(1134), int64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
    %177 = @func_672() /* ty=(Tensor[(2, 9, 6), float32],) */;
    %178 = %177.0;
    %179 = cast(%178, dtype="float32") /* ty=Tensor[(2, 9, 6), float32] */;
    %180 = sinh(%179) /* ty=Tensor[(2, 9, 6), float32] */;
    %181 = cast(%178, dtype="uint64") /* ty=Tensor[(2, 9, 6), uint64] */;
    %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
    %183 = cast(%180, dtype="uint64") /* ty=Tensor[(2, 9, 6), uint64] */;
    %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %185 = cast(%var_1956, dtype="int64") /* ty=Tensor[(1134), int64] */;
    %186 = reshape(%185, newshape=[14, 9, 9]) /* ty=Tensor[(14, 9, 9), int64] */;
    %187 = @func_707(%186) /* ty=(Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */;
    %188 = @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %189 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %190 = subtract(%183, %184) /* ty=Tensor[(2, 9, 6), uint64] */;
    %191 = %187.0;
    %192 = %188.0;
    %193 = %189.0;
    (%190, %191, %var_1956, %192, %193)
  };
  %194(%var_1988) /* ty=(Tensor[(2, 9, 6), uint64], Tensor[(14, 9, 9), bool], Tensor[(1134), int64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_266() -> (Tensor[(2, 9, 6), float64],) {
  @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_6495(%var_6493: Tensor[(910), uint16]) -> (Tensor[(2, 9, 6), uint32], Tensor[(14, 5, 13), uint16], Tensor[(910), uint16]) {
  @func_6492(%var_6493) /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(14, 5, 13), uint16], Tensor[(910), uint16]) */
}

def @func_2866() -> (Tensor[(5, 15, 11), float64],) {
  %196 = fn () -> (Tensor[(5, 15, 11), float64],) {
    %195 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
    (%195,)
  };
  %196() /* ty=(Tensor[(5, 15, 11), float64],) */
}

def @func_1491() -> (Tensor[(880), float64],) {
  %197 = @func_1398() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) */;
  %198 = %197.2;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(880), float64] */;
  %200 = sin(%199) /* ty=Tensor[(880), float64] */;
  (%200,)
}

def @func_4124() -> (Tensor[(2, 9, 6), float64],) {
  %203 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %201 = @func_1043() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %202 = %201.0;
    (%202,)
  };
  %203() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_605() -> (Tensor[(2, 9, 6), float64],) {
  %204 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %205 = %204.0;
  (%205,)
}

def @func_6066() -> (Tensor[(10, 11, 14), float32], Tensor[(6, 6, 8), bool], Tensor[(6, 6, 8), float32], float32, Tensor[(6, 6, 8), float64]) {
  %206 = @func_3058() /* ty=(Tensor[(10, 11, 14), float32],) */;
  %207 = @func_4001() /* ty=Tensor[(6, 6, 8), float32] */;
  %208 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 6, 8), float32] */, dtype="bool") /* ty=Tensor[(6, 6, 8), bool] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="bool") /* ty=Tensor[(6, 6, 8), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 8), float32] */;
  %213 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(6, 6, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 8), float32] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %216 = @func_904() /* ty=(float32, Tensor[(2, 9, 6), float64]) */;
  %217 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 6, 8), float32] */, dtype="float64") /* ty=Tensor[(6, 6, 8), float64] */;
  %218 = %206.0;
  %219 = greater(%210, %211) /* ty=Tensor[(6, 6, 8), bool] */;
  %220 = floor_divide(%214, %215) /* ty=Tensor[(6, 6, 8), float32] */;
  %221 = %216.0;
  %222 = erf(%217) /* ty=Tensor[(6, 6, 8), float64] */;
  (%218, %219, %220, %221, %222)
}

def @func_905() -> (float32, Tensor[(2, 9, 6), float64]) {
  %227 = fn () -> (float32, Tensor[(2, 9, 6), float64]) {
    %223 = @func_497() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */;
    %224 = @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %225 = %223.2;
    %226 = %224.2;
    (%225, %226)
  };
  %227() /* ty=(float32, Tensor[(2, 9, 6), float64]) */
}

def @func_1311(%var_1309: Tensor[(5, 15, 11), float64]) -> (Tensor[(5, 15, 11), uint8],) {
  @func_1308(%var_1309) /* ty=(Tensor[(5, 15, 11), uint8],) */
}

def @func_4667() -> (Tensor[(2, 9, 6), uint32],) {
  @func_4665() /* ty=(Tensor[(2, 9, 6), uint32],) */
}

def @func_4967(%var_4962: Tensor[(15, 2, 4), int16]) -> (Tensor[(15, 2, 4), bool],) {
  %228 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 2, 4), int16] */, dtype="bool") /* ty=Tensor[(15, 2, 4), bool] */;
  %229 = shape_of(%var_4962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%var_4962, dtype="bool") /* ty=Tensor[(15, 2, 4), bool] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %232 = greater_equal(%230, %231) /* ty=Tensor[(15, 2, 4), bool] */;
  (%232,)
}

def @func_2493() -> (Tensor[(5, 15, 11), float64],) {
  %233 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  (%233,)
}

def @func_841() -> (Tensor[(2, 9, 6), float64],) {
  %234 = @func_763() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %235 = %234.0;
  (%235,)
}

def @func_6315() -> (Tensor[(2, 9, 6), float64],) {
  @func_6313() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_477(%var_475: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), int64], Tensor[(9, 15, 1), float64], Tensor[(1, 135), float64]) {
  @func_474(%var_475) /* ty=(Tensor[(2, 9, 6), int64], Tensor[(9, 15, 1), float64], Tensor[(1, 135), float64]) */
}

def @func_5253() -> (Tensor[(10, 11, 14), float32], float32) {
  @func_5251() /* ty=(Tensor[(10, 11, 14), float32], float32) */
}

def @func_4496(%var_4440: Tensor[(13, 6, 14), float32], %var_4491: Tensor[(13, 6, 14), float32]) -> (Tensor[(13, 6, 14), bool], Tensor[(13, 6, 14), float32], Tensor[(880), float64], Tensor[(13, 6, 14), uint8]) {
  %236 = cast(%var_4440, dtype="float32") /* ty=Tensor[(13, 6, 14), float32] */;
  %237 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(13, 6, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 6, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 14), float32] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %240 = floor_mod(%238, %239) /* ty=Tensor[(13, 6, 14), float32] */;
  %241 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 6, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 6, 14), bool] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%240, dtype="bool") /* ty=Tensor[(13, 6, 14), bool] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %245 = cast(%240, dtype="float32") /* ty=Tensor[(13, 6, 14), float32] */;
  %246 = @func_1491() /* ty=(Tensor[(880), float64],) */;
  %247 = %246.0;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(880), float64] */;
  %249 = cast(%var_4491, dtype="uint8") /* ty=Tensor[(13, 6, 14), uint8] */;
  %250 = shape_of(%var_4440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%var_4440, dtype="uint8") /* ty=Tensor[(13, 6, 14), uint8] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %253 = less_equal(%243, %244) /* ty=Tensor[(13, 6, 14), bool] */;
  %254 = sigmoid(%245) /* ty=Tensor[(13, 6, 14), float32] */;
  %255 = log10(%248) /* ty=Tensor[(880), float64] */;
  %256 = bitwise_or(%251, %252) /* ty=Tensor[(13, 6, 14), uint8] */;
  (%253, %254, %255, %256)
}

def @func_3929() -> Tensor[(2, 9, 6), float64] {
  %257 = @func_904() /* ty=(float32, Tensor[(2, 9, 6), float64]) */;
  %257.1
}

def @func_953(%var_952: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), int16],) {
  %265 = fn (%var_946: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), int16],) {
    %258 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %259 = %258.0;
    %260 = cast(%var_946, dtype="int16") /* ty=Tensor[(2, 9, 6), int16] */;
    %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%259, dtype="int16") /* ty=Tensor[(2, 9, 6), int16] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %264 = multiply(%262, %263) /* ty=Tensor[(2, 9, 6), int16] */;
    (%264,)
  };
  %265(%var_952) /* ty=(Tensor[(2, 9, 6), int16],) */
}

def @func_5499(%var_5498: Tensor[(8, 9, 6), float64]) -> (Tensor[(8, 9, 6), float64],) {
  %268 = fn (%var_5488: Tensor[(8, 9, 6), float64]) -> (Tensor[(8, 9, 6), float64],) {
    %266 = cast(%var_5488, dtype="float64") /* ty=Tensor[(8, 9, 6), float64] */;
    %267 = atan(%266) /* ty=Tensor[(8, 9, 6), float64] */;
    (%267,)
  };
  %268(%var_5498) /* ty=(Tensor[(8, 9, 6), float64],) */
}

def @func_5025(%var_4977: Tensor[(4, 1, 7), float32], %var_5022: Tensor[(1134), int64]) -> (Tensor[(2, 9, 6), float64], Tensor[(4, ?, 7), uint64], Tensor[(2, 9, 6), bool], Tensor[(14, 9, 9), bool], Tensor[(1134), int64]) {
  %269 = cast(%var_4977, dtype="float32") /* ty=Tensor[(4, 1, 7), float32] */;
  %270 = log(%269) /* ty=Tensor[(4, 1, 7), float32] */;
  %271 = cast(%var_4977, dtype="uint64") /* ty=Tensor[(4, 1, 7), uint64] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="uint64") /* ty=Tensor[(4, 1, 7), uint64] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %275 = @func_4665() /* ty=(Tensor[(2, 9, 6), uint32],) */;
  %276 = %275.0;
  %277 = @func_1583() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %278 = %277.1;
  %279 = cast(%278, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %280 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%276, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %283 = cast(%var_5022, dtype="int64") /* ty=Tensor[(1134), int64] */;
  %284 = reshape(%283, newshape=[14, 9, 9]) /* ty=Tensor[(14, 9, 9), int64] */;
  %285 = @func_707(%284) /* ty=(Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */;
  %286 = @func_3929() /* ty=Tensor[(2, 9, 6), float64] */;
  %287 = maximum(%273, %274) /* ty=Tensor[(4, ?, 7), uint64] */;
  %288 = greater_equal(%281, %282) /* ty=Tensor[(2, 9, 6), bool] */;
  %289 = %285.0;
  (%286, %287, %288, %289, %var_5022)
}

def @func_5707(%var_5698: Tensor[(14, 5, 13), uint16]) -> Tensor[(14, 5, 13), uint16] {
  %290 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 5, 13), uint16] */, dtype="uint16") /* ty=Tensor[(14, 5, 13), uint16] */;
  %291 = shape_of(%var_5698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_5698, dtype="uint16") /* ty=Tensor[(14, 5, 13), uint16] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%292, %293) /* ty=Tensor[(14, 5, 13), uint16] */
}

def @func_6504() -> (Tensor[(2, 9, 6), float64],) {
  %296 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %294 = @func_6179() /* ty=(Tensor[(16, 14, 7), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %295 = %294.1;
    (%295,)
  };
  %296() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_5073(%var_5071: Tensor[(3, 1, 10), float64]) -> (Tensor[(3, ?, 10), bool],) {
  @func_5070(%var_5071) /* ty=(Tensor[(3, ?, 10), bool],) */
}

def @func_5109() -> Tensor[(5, 15, 11), float64] {
  %297 = @func_2493() /* ty=(Tensor[(5, 15, 11), float64],) */;
  %297.0
}

def @func_4001() -> Tensor[(6, 6, 8), float32] {
  %298 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 8), float32] */;
  cos(%298) /* ty=Tensor[(6, 6, 8), float32] */
}

def @func_6273() -> (Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), float64], float32, Tensor[(768), float32]) {
  %306 = fn () -> (Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), float64], float32, Tensor[(768), float32]) {
    %299 = cast(0.034192f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %300 = cast(meta[relay.Constant][16] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
    %301 = reshape(%299, newshape=[]) /* ty=float32 */;
    %302 = reshape(%300, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
    %303 = @func_2354(%301, %302) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(2, 9, 6), float64], Tensor[(3, 1, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(3, 378), int64]) */;
    %304 = @func_4001() /* ty=Tensor[(6, 6, 8), float32] */;
    %305 = %303.1;
    (%304, %305, 0.034192f /* ty=float32 */, meta[relay.Constant][16] /* ty=Tensor[(768), float32] */)
  };
  %306() /* ty=(Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), float64], float32, Tensor[(768), float32]) */
}

def @func_3060() -> (Tensor[(10, 11, 14), float32],) {
  @func_3058() /* ty=(Tensor[(10, 11, 14), float32],) */
}

def @func_5275() -> Tensor[(10, 11, 14), float32] {
  %308 = fn () -> Tensor[(10, 11, 14), float32] {
    %307 = @func_5251() /* ty=(Tensor[(10, 11, 14), float32], float32) */;
    %307.0
  };
  %308() /* ty=Tensor[(10, 11, 14), float32] */
}

def @func_5780() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(6, 8, 10), float32], Tensor[(480), float32], Tensor[(12, 42), float32]) {
  @func_5778() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(6, 8, 10), float32], Tensor[(480), float32], Tensor[(12, 42), float32]) */
}

def @func_421() -> (Tensor[(2, 9, 6), float64],) {
  %311 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %309 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %310 = %309.0;
    (%310,)
  };
  %311() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_5693(%var_5691: Tensor[(13, 3, 12), bool], %var_5692: Tensor[(13, 3, 12), bool]) -> (Tensor[(13, 3, 12), bool],) {
  @func_5689(%var_5691, %var_5692) /* ty=(Tensor[(13, 3, 12), bool],) */
}

def @func_4950(%var_4948: Tensor[(8, 8, 15), int64], %var_4949: Tensor[(8, 8, 15), int64]) -> Tensor[(8, 8, 15), bool] {
  @func_4946(%var_4948, %var_4949) /* ty=Tensor[(8, 8, 15), bool] */
}

def @func_2927(%var_2911: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), uint32]) {
  %312 = @func_987() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %313 = %312.0;
  %314 = cast(%var_2911, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %318 = @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %319 = floor_divide(%316, %317) /* ty=Tensor[(2, 9, 6), float64] */;
  %320 = %318.0;
  (%319, %320)
}

def @func_6492(%var_6478: Tensor[(910), uint16]) -> (Tensor[(2, 9, 6), uint32], Tensor[(14, 5, 13), uint16], Tensor[(910), uint16]) {
  %321 = @func_559() /* ty=(Tensor[(2, 9, 6), uint32],) */;
  %322 = cast(%var_6478, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %323 = reshape(%322, newshape=[14, 5, 13]) /* ty=Tensor[(14, 5, 13), uint16] */;
  %324 = %321.0;
  %325 = @func_5707(%323) /* ty=Tensor[(14, 5, 13), uint16] */;
  (%324, %325, %var_6478)
}

def @func_673() -> (Tensor[(2, 9, 6), float32],) {
  %330 = fn () -> (Tensor[(2, 9, 6), float32],) {
    %326 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %327 = %326.0;
    %328 = cast(%327, dtype="float32") /* ty=Tensor[(2, 9, 6), float32] */;
    %329 = sin(%328) /* ty=Tensor[(2, 9, 6), float32] */;
    (%329,)
  };
  %330() /* ty=(Tensor[(2, 9, 6), float32],) */
}

def @func_3258() -> Tensor[(2, 9, 6), float64] {
  %331 = @func_987() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %331.0
}

def @func_5405(%var_5368: Tensor[(9, 15, 14), float32], %var_5398: Tensor[(5, 165), float64]) -> (Tensor[(9, 15, 14), bool], Tensor[(5, 15, 11), int16], Tensor[(5, 165), float64]) {
  %332 = cast(%var_5368, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %333 = rsqrt(%332) /* ty=Tensor[(9, 15, 14), float32] */;
  %334 = cast(%var_5368, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = cast(%var_5398, dtype="float64") /* ty=Tensor[(5, 165), float64] */;
  %339 = reshape(%338, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float64] */;
  %340 = logical_and(%336, %337) /* ty=Tensor[(9, 15, 14), bool] */;
  %341 = @func_2545(%339) /* ty=Tensor[(5, 15, 11), int16] */;
  (%340, %341, %var_5398)
}

def @func_4654(%var_4653: Tensor[(2, 9, 6), float64]) -> (Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), int32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), bool]) {
  %357 = fn (%var_4635: Tensor[(2, 9, 6), float64]) -> (Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), int32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), bool]) {
    %342 = @func_1043() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %343 = %342.0;
    %344 = cast(%var_4635, dtype="int32") /* ty=Tensor[(2, 9, 6), int32] */;
    %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
    %346 = cast(%343, dtype="int32") /* ty=Tensor[(2, 9, 6), int32] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %348 = @func_4276() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %349 = cast(%var_4635, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
    %350 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(%343, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %353 = @func_4001() /* ty=Tensor[(6, 6, 8), float32] */;
    %354 = bitwise_xor(%346, %347) /* ty=Tensor[(2, 9, 6), int32] */;
    %355 = %348.0;
    %356 = logical_or(%351, %352) /* ty=Tensor[(2, 9, 6), bool] */;
    (%353, %354, %355, %356)
  };
  %357(%var_4653) /* ty=(Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), int32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), bool]) */
}

def @func_819() -> (Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_3513() -> (Tensor[(2, 9, 6), float64],) {
  @func_3511() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_179(%var_138: Tensor[(10, 11, 8), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %358 = cast(%var_138, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %359 = exp(%358) /* ty=Tensor[(10, 11, 8), float64] */;
  %360 = cast(%var_138, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %364 = cast(%359, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %365 = cosh(%364) /* ty=Tensor[(10, 11, 8), float64] */;
  %366 = cast(%365, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %367 = floor_mod(%362, %363) /* ty=Tensor[(10, 11, 8), float32] */;
  %368 = sinh(%366) /* ty=Tensor[(10, 11, 8), float32] */;
  (%367, %368)
}

def @func_1658() -> (Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  @func_1656() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_5689(%var_5677: Tensor[(13, 3, 12), bool], %var_5678: Tensor[(13, 3, 12), bool]) -> (Tensor[(13, 3, 12), bool],) {
  %369 = cast(%var_5678, dtype="bool") /* ty=Tensor[(13, 3, 12), bool] */;
  %370 = shape_of(%var_5677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%var_5677, dtype="bool") /* ty=Tensor[(13, 3, 12), bool] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %373 = logical_or(%371, %372) /* ty=Tensor[(13, 3, 12), bool] */;
  (%373,)
}

def @func_3393(%var_3369: Tensor[(12, 7, 1), float64]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(12, 7, 1), float32]) {
  %374 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %375 = cast(%var_3369, dtype="float64") /* ty=Tensor[(12, 7, 1), float64] */;
  %376 = cos(%375) /* ty=Tensor[(12, 7, 1), float64] */;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(12, 7, 1), float32] */;
  %378 = %374.0;
  %379 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  %380 = sqrt(%377) /* ty=Tensor[(12, 7, 1), float32] */;
  (%378, %379, %380)
}

def @func_4500(%var_4498: Tensor[(13, 6, 14), float32], %var_4499: Tensor[(13, 6, 14), float32]) -> (Tensor[(13, 6, 14), bool], Tensor[(13, 6, 14), float32], Tensor[(880), float64], Tensor[(13, 6, 14), uint8]) {
  @func_4496(%var_4498, %var_4499) /* ty=(Tensor[(13, 6, 14), bool], Tensor[(13, 6, 14), float32], Tensor[(880), float64], Tensor[(13, 6, 14), uint8]) */
}

def @func_3013() -> Tensor[(2, 9, 6), float64] {
  @func_3011() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_4238(%var_4237: float32) -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(3, 1, 10), float64], float32, Tensor[(30), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %403 = fn (%var_4191: float32) -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(3, 1, 10), float64], float32, Tensor[(30), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
    %381 = @func_3511() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %382 = @func_3986() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %383 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %384 = @func_817() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %385 = cast(%var_4191, dtype="float32") /* ty=float32 */;
    %386 = cast(meta[relay.Constant][17] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
    %387 = reshape(%385, newshape=[]) /* ty=float32 */;
    %388 = reshape(%386, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), float32] */;
    %389 = @func_378(%387, %388) /* ty=(Tensor[(3, 1, 10), float32], Tensor[(3, 1, 10), float64]) */;
    %390 = @func_1043() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %391 = @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */;
    %392 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %393 = @func_987() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %394 = %381.0;
    %395 = %382.0;
    %396 = %383.0;
    %397 = %384.1;
    %398 = %389.1;
    %399 = %390.0;
    %400 = %391.3;
    %401 = %392.0;
    %402 = %393.0;
    (%394, %395, %396, %397, %398, %var_4191, meta[relay.Constant][17] /* ty=Tensor[(30), float32] */, %399, %400, %401, %402)
  };
  %403(%var_4237) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(3, 1, 10), float64], float32, Tensor[(30), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_1412() -> (Tensor[(2, 9, 6), float64],) {
  %406 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %404 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %405 = %404.0;
    (%405,)
  };
  %406() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_1894(%var_1892: Tensor[(14, 9, 15), bool], %var_1893: Tensor[(14, 9, 15), bool]) -> (Tensor[(14, 9, 15), bool], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(5, 15, 11), float64]) {
  %417 = fn (%var_1876: Tensor[(14, 9, 15), bool], %var_1877: Tensor[(14, 9, 15), bool]) -> (Tensor[(14, 9, 15), bool], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(5, 15, 11), float64]) {
    %407 = cast(%var_1877, dtype="bool") /* ty=Tensor[(14, 9, 15), bool] */;
    %408 = shape_of(%var_1876, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%var_1876, dtype="bool") /* ty=Tensor[(14, 9, 15), bool] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %411 = cast(meta[relay.Constant][18] /* ty=Tensor[(825), float64] */, dtype="float64") /* ty=Tensor[(825), float64] */;
    %412 = reshape(%411, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float64] */;
    %413 = @func_1308(%412) /* ty=(Tensor[(5, 15, 11), uint8],) */;
    %414 = logical_and(%409, %410) /* ty=Tensor[(14, 9, 15), bool] */;
    %415 = %413.0;
    %416 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
    (%414, %415, meta[relay.Constant][18] /* ty=Tensor[(825), float64] */, %416)
  };
  %417(%var_1892, %var_1893) /* ty=(Tensor[(14, 9, 15), bool], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(5, 15, 11), float64]) */
}

def @func_5647(%var_5644: Tensor[(6, 8, 10), float32], %var_5645: Tensor[(6, 8, 10), float32], %var_5646: Tensor[(12, 3, 14), float32]) -> (Tensor[(6, 8, 10), float32], Tensor[(10, 11, 14), float32], Tensor[(6, 8, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(12, 3, 14), uint64]) {
  %441 = fn (%var_5578: Tensor[(6, 8, 10), float32], %var_5596: Tensor[(6, 8, 10), float32], %var_5632: Tensor[(12, 3, 14), float32]) -> (Tensor[(6, 8, 10), float32], Tensor[(10, 11, 14), float32], Tensor[(6, 8, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(12, 3, 14), uint64]) {
    %418 = cast(%var_5578, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
    %419 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(6, 8, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 8, 10), float32] */, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %422 = @func_5251() /* ty=(Tensor[(10, 11, 14), float32], float32) */;
    %423 = cast(%var_5596, dtype="int16") /* ty=Tensor[(6, 8, 10), int16] */;
    %424 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(6, 8, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %425 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 8, 10), float32] */, dtype="int16") /* ty=Tensor[(6, 8, 10), int16] */;
    %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %427 = minimum(%425, %426) /* ty=Tensor[(6, 8, 10), int16] */;
    %428 = cast(%427, dtype="float32") /* ty=Tensor[(6, 8, 10), float32] */;
    %429 = log10(%428) /* ty=Tensor[(6, 8, 10), float32] */;
    %430 = cast(%429, dtype="float64") /* ty=Tensor[(6, 8, 10), float64] */;
    %431 = @func_4123() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %432 = @func_904() /* ty=(float32, Tensor[(2, 9, 6), float64]) */;
    %433 = %432.0;
    %434 = cast(%433, dtype="uint64") /* ty=uint64 */;
    %435 = cast(%var_5632, dtype="uint64") /* ty=Tensor[(12, 3, 14), uint64] */;
    %436 = floor_mod(%420, %421) /* ty=Tensor[(6, 8, 10), float32] */;
    %437 = %422.0;
    %438 = acos(%430) /* ty=Tensor[(6, 8, 10), float64] */;
    %439 = %431.0;
    %440 = add(%434, %435) /* ty=Tensor[(12, 3, 14), uint64] */;
    (%436, %437, %438, %439, %440)
  };
  %441(%var_5644, %var_5645, %var_5646) /* ty=(Tensor[(6, 8, 10), float32], Tensor[(10, 11, 14), float32], Tensor[(6, 8, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(12, 3, 14), uint64]) */
}

def @func_6395(%var_6321: Tensor[(5, 14, 16), float32], %var_6355: Tensor[(5, 14, 16), bool]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 14, 16), float32], Tensor[(2, 9, 6), float64], Tensor[(120), uint32], Tensor[(5, 15, 11), float64]) {
  %442 = @func_987() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %443 = cast(%var_6321, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %444 = atan(%443) /* ty=Tensor[(5, 14, 16), float32] */;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %446 = acosh(%445) /* ty=Tensor[(5, 14, 16), float32] */;
  %447 = cast(%444, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%446, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %451 = not_equal(%449, %450) /* ty=Tensor[(5, 14, 16), bool] */;
  %452 = cast(%var_6355, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%451, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %456 = cast(meta[relay.Constant][20] /* ty=Tensor[(120), uint32] */, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %457 = reshape(%456, newshape=[6, 10, 2]) /* ty=Tensor[(6, 10, 2), uint32] */;
  %458 = @func_1376(%457) /* ty=(Tensor[(6, 10, 2), bool], Tensor[(2, 9, 6), float64]) */;
  %459 = @func_2865() /* ty=(Tensor[(5, 15, 11), float64],) */;
  %460 = %442.0;
  %461 = divide(%454, %455) /* ty=Tensor[(5, 14, 16), float32] */;
  %462 = %458.1;
  %463 = %459.0;
  (%460, %461, %462, meta[relay.Constant][20] /* ty=Tensor[(120), uint32] */, %463)
}

def @func_748(%var_747: Tensor[(9, 126), int64]) -> (Tensor[(2, 9, 6), float64], Tensor[(135), float64], Tensor[(9, 126), bool]) {
  %475 = fn (%var_730: Tensor[(9, 126), int64]) -> (Tensor[(2, 9, 6), float64], Tensor[(135), float64], Tensor[(9, 126), bool]) {
    %464 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %465 = cast(%var_730, dtype="int64") /* ty=Tensor[(9, 126), int64] */;
    %466 = reshape(%465, newshape=[14, 9, 9]) /* ty=Tensor[(14, 9, 9), int64] */;
    %467 = @func_707(%466) /* ty=(Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */;
    %468 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 126), int64] */, dtype="bool") /* ty=Tensor[(9, 126), bool] */;
    %469 = shape_of(%var_730, dtype="int32") /* ty=Tensor[(2), int32] */;
    %470 = cast(%var_730, dtype="bool") /* ty=Tensor[(9, 126), bool] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %472 = %464.0;
    %473 = %467.3;
    %474 = less_equal(%470, %471) /* ty=Tensor[(9, 126), bool] */;
    (%472, %473, %474)
  };
  %475(%var_747) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(135), float64], Tensor[(9, 126), bool]) */
}

def @func_4003() -> Tensor[(6, 6, 8), float32] {
  @func_4001() /* ty=Tensor[(6, 6, 8), float32] */
}

def @func_5778() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(6, 8, 10), float32], Tensor[(480), float32], Tensor[(12, 42), float32]) {
  %476 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %477 = %476.0;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %479 = cast(meta[relay.Constant][22] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %480 = cast(meta[relay.Constant][22] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %481 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 42), float32] */, dtype="float32") /* ty=Tensor[(12, 42), float32] */;
  %482 = reshape(%479, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), float32] */;
  %483 = reshape(%480, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), float32] */;
  %484 = reshape(%481, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %485 = @func_5643(%482, %483, %484) /* ty=(Tensor[(6, 8, 10), float32], Tensor[(10, 11, 14), float32], Tensor[(6, 8, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(12, 3, 14), uint64]) */;
  %486 = log10(%478) /* ty=Tensor[(2, 9, 6), float64] */;
  %487 = @func_5533() /* ty=Tensor[(2, 9, 6), float64] */;
  %488 = %485.0;
  (%486, %487, %488, meta[relay.Constant][22] /* ty=Tensor[(480), float32] */, meta[relay.Constant][23] /* ty=Tensor[(12, 42), float32] */)
}

def @func_1223() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64], Tensor[(1, 135), float32], Tensor[(2, 9, 6), float64]) {
  @func_1221() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64], Tensor[(1, 135), float32], Tensor[(2, 9, 6), float64]) */
}

def @func_2547(%var_2546: Tensor[(5, 15, 11), float64]) -> Tensor[(5, 15, 11), int16] {
  %494 = fn (%var_2538: Tensor[(5, 15, 11), float64]) -> Tensor[(5, 15, 11), int16] {
    %489 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
    %490 = cast(%var_2538, dtype="int16") /* ty=Tensor[(5, 15, 11), int16] */;
    %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
    %492 = cast(%489, dtype="int16") /* ty=Tensor[(5, 15, 11), int16] */;
    %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_xor(%492, %493) /* ty=Tensor[(5, 15, 11), int16] */
  };
  %494(%var_2546) /* ty=Tensor[(5, 15, 11), int16] */
}

def @func_6203() -> (Tensor[(2, 9, 6), float64],) {
  @func_6201() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_3260() -> Tensor[(2, 9, 6), float64] {
  @func_3258() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_280(%var_278: Tensor[(9, 15, 1), float64]) -> (Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) {
  @func_277(%var_278) /* ty=(Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) */
}

def @func_1308(%var_1285: Tensor[(5, 15, 11), float64]) -> (Tensor[(5, 15, 11), uint8],) {
  %495 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
  %496 = cast(%var_1285, dtype="uint8") /* ty=Tensor[(5, 15, 11), uint8] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="uint8") /* ty=Tensor[(5, 15, 11), uint8] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %500 = add(%498, %499) /* ty=Tensor[(5, 15, 11), uint8] */;
  (%500,)
}

def @func_3549(%var_3547: Tensor[(1, 7, 1), float32]) -> (Tensor[(1, 7, 1), float32], Tensor[(1, 7, 1), float64]) {
  @func_3546(%var_3547) /* ty=(Tensor[(1, 7, 1), float32], Tensor[(1, 7, 1), float64]) */
}

def @func_817() -> (Tensor[(2, 9, 6), uint32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %501 = @func_559() /* ty=(Tensor[(2, 9, 6), uint32],) */;
  %502 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %503 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %504 = %501.0;
  %505 = %502.0;
  %506 = %503.0;
  (%504, %505, %506)
}

def @func_2737() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %507 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %508 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
  %509 = %507.0;
  (%508, %509)
}

def @func_3011() -> Tensor[(2, 9, 6), float64] {
  %510 = @func_420() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %510.0
}

def @func_4435() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %519 = fn () -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
    %511 = @func_3107() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %512 = @func_1866() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %513 = @func_1010() /* ty=Tensor[(2, 9, 6), float64] */;
    %514 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
    %515 = @func_4001() /* ty=Tensor[(6, 6, 8), float32] */;
    %516 = %511.0;
    %517 = %512.0;
    %518 = @func_2451() /* ty=Tensor[(2, 9, 6), float64] */;
    (%513, %514, %515, %516, %517, %518)
  };
  %519() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_3108() -> (Tensor[(2, 9, 6), float64],) {
  %522 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %520 = @func_1411() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %521 = %520.0;
    (%521,)
  };
  %522() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_1183() -> Tensor[(5, 15, 11), float64] {
  %523 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 11), float64] */;
  erf(%523) /* ty=Tensor[(5, 15, 11), float64] */
}

def @func_3647(%var_3646: Tensor[(2, 9, 7), float32]) -> (Tensor[(2, 9, 7), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %533 = fn (%var_3594: Tensor[(2, 9, 7), float32]) -> (Tensor[(2, 9, 7), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
    %524 = @func_904() /* ty=(float32, Tensor[(2, 9, 6), float64]) */;
    %525 = %524.0;
    %526 = cast(%525, dtype="bool") /* ty=bool */;
    %527 = cast(%var_3594, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
    %528 = @func_214() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %529 = @func_2737() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %530 = less_equal(%526, %527) /* ty=Tensor[(2, 9, 7), bool] */;
    %531 = %528.0;
    %532 = %529.1;
    (%530, %531, %532)
  };
  %533(%var_3646) /* ty=(Tensor[(2, 9, 7), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_2358(%var_2356: float32, %var_2357: Tensor[(8, 6, 16), float32]) -> (Tensor[(8, 6, 16), float32], Tensor[(2, 9, 6), float64], Tensor[(3, 1, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(3, 378), int64]) {
  @func_2354(%var_2356, %var_2357) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(2, 9, 6), float64], Tensor[(3, 1, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(3, 378), int64]) */
}

def @func_4380() -> (Tensor[(2, 9, 6), float64], Tensor[(880), float64], Tensor[(2, 9, 6), uint16]) {
  %546 = fn () -> (Tensor[(2, 9, 6), float64], Tensor[(880), float64], Tensor[(2, 9, 6), uint16]) {
    %534 = @func_3986() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %535 = @func_1656() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %536 = @func_4276() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %537 = %536.0;
    %538 = @func_3011() /* ty=Tensor[(2, 9, 6), float64] */;
    %539 = cast(%538, dtype="uint16") /* ty=Tensor[(2, 9, 6), uint16] */;
    %540 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%537, dtype="uint16") /* ty=Tensor[(2, 9, 6), uint16] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %543 = %534.0;
    %544 = %535.0;
    %545 = maximum(%541, %542) /* ty=Tensor[(2, 9, 6), uint16] */;
    (%543, %544, %545)
  };
  %546() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(880), float64], Tensor[(2, 9, 6), uint16]) */
}

def @func_264() -> (Tensor[(2, 9, 6), float64],) {
  %547 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %548 = %547.0;
  (%548,)
}

def @func_763() -> (Tensor[(2, 9, 6), float64],) {
  %549 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %550 = %549.0;
  (%550,)
}

def @func_4665() -> (Tensor[(2, 9, 6), uint32],) {
  %551 = @func_3150() /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(880), float64]) */;
  %552 = %551.0;
  (%552,)
}

def @func_3227(%var_3179: float32) -> (Tensor[(10, 11, 14), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(30), float32], Tensor[(2, 9, 6), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %553 = @func_3058() /* ty=(Tensor[(10, 11, 14), float32],) */;
  %554 = cast(%var_3179, dtype="float32") /* ty=float32 */;
  %555 = cast(meta[relay.Constant][25] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %556 = reshape(%554, newshape=[]) /* ty=float32 */;
  %557 = reshape(%555, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), float32] */;
  %558 = @func_378(%556, %557) /* ty=(Tensor[(3, 1, 10), float32], Tensor[(3, 1, 10), float64]) */;
  %559 = cast(meta[relay.Constant][26] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %560 = reshape(%559, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), float64] */;
  %561 = @func_2927(%560) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), uint32]) */;
  %562 = %561.0;
  %563 = cast(meta[relay.Constant][26] /* ty=Tensor[(108), float64] */, dtype="bool") /* ty=Tensor[(108), bool] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%562, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %567 = @func_1583() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %568 = %553.0;
  %569 = %558.1;
  %570 = less(%565, %566) /* ty=Tensor[(2, 9, 6), bool] */;
  %571 = %567.1;
  %572 = @func_3011() /* ty=Tensor[(2, 9, 6), float64] */;
  (%568, %569, %var_3179, meta[relay.Constant][25] /* ty=Tensor[(30), float32] */, %570, %571, %572)
}

def @func_4904(%var_4892: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %573 = @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */;
  %574 = @func_2451() /* ty=Tensor[(2, 9, 6), float64] */;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %576 = reshape(%575, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), float64] */;
  %577 = @func_2927(%576) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), uint32]) */;
  %578 = @func_1583() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %579 = %578.0;
  %580 = cast(%var_4892, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %584 = %573.1;
  %585 = @func_3929() /* ty=Tensor[(2, 9, 6), float64] */;
  %586 = %577.0;
  %587 = divide(%582, %583) /* ty=Tensor[(2, 9, 6), float64] */;
  %588 = @func_4590() /* ty=Tensor[(2, 9, 6), float64] */;
  (%574, %584, %585, %586, %587, %588)
}

def @func_3816(%var_3814: Tensor[(825), float64], %var_3815: Tensor[(5, 15, 11), uint8]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), bool], Tensor[(2, 9, 6), float64], float32, float32, Tensor[(5, 15, 11), float32], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64]) {
  %614 = fn (%var_3713: Tensor[(825), float64], %var_3720: Tensor[(5, 15, 11), uint8]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), bool], Tensor[(2, 9, 6), float64], float32, float32, Tensor[(5, 15, 11), float32], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64]) {
    %589 = cast(%var_3713, dtype="float64") /* ty=Tensor[(825), float64] */;
    %590 = reshape(%589, newshape=[5, 15, 11]) /* ty=Tensor[(5, 15, 11), float64] */;
    %591 = @func_1308(%590) /* ty=(Tensor[(5, 15, 11), uint8],) */;
    %592 = %591.0;
    %593 = cast(%var_3720, dtype="bool") /* ty=Tensor[(5, 15, 11), bool] */;
    %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%592, dtype="bool") /* ty=Tensor[(5, 15, 11), bool] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %597 = cast(-0.357603f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %598 = reshape(%597, newshape=[]) /* ty=float32 */;
    %599 = @func_3227(%598) /* ty=(Tensor[(10, 11, 14), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(30), float32], Tensor[(2, 9, 6), bool], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %600 = @func_904() /* ty=(float32, Tensor[(2, 9, 6), float64]) */;
    %601 = cast(%var_3713, dtype="float32") /* ty=Tensor[(825), float32] */;
    %602 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %603 = cast(%592, dtype="float32") /* ty=Tensor[(5, 15, 11), float32] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %605 = @func_1807() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), int16]) */;
    %606 = @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %607 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
    %608 = logical_and(%595, %596) /* ty=Tensor[(5, 15, 11), bool] */;
    %609 = %599.5;
    %610 = %600.0;
    %611 = floor_divide(%603, %604) /* ty=Tensor[(5, 15, 11), float32] */;
    %612 = %605.1;
    %613 = %606.0;
    (%607, %608, %609, -0.357603f /* ty=float32 */, %610, %611, %612, %613)
  };
  %614(%var_3814, %var_3815) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), bool], Tensor[(2, 9, 6), float64], float32, float32, Tensor[(5, 15, 11), float32], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64]) */
}

def @func_988() -> (Tensor[(2, 9, 6), float64],) {
  %617 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %615 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %616 = %615.0;
    (%616,)
  };
  %617() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_4591() -> Tensor[(2, 9, 6), float64] {
  %619 = fn () -> Tensor[(2, 9, 6), float64] {
    %618 = @func_1221() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64], Tensor[(1, 135), float32], Tensor[(2, 9, 6), float64]) */;
    %618.0
  };
  %619() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_1493() -> (Tensor[(880), float64],) {
  @func_1491() /* ty=(Tensor[(880), float64],) */
}

def @func_843() -> (Tensor[(2, 9, 6), float64],) {
  @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_5251() -> (Tensor[(10, 11, 14), float32], float32) {
  %620 = @func_3058() /* ty=(Tensor[(10, 11, 14), float32],) */;
  %621 = @func_497() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */;
  %622 = %620.0;
  %623 = %621.2;
  (%622, %623)
}

def @func_3987() -> (Tensor[(2, 9, 6), float64],) {
  %626 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %624 = @func_1866() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %625 = %624.0;
    (%625,)
  };
  %626() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_6180() -> (Tensor[(16, 14, 7), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %632 = fn () -> (Tensor[(16, 14, 7), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
    %627 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(16, 14, 7), float64] */;
    %628 = @func_4610() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %629 = asin(%627) /* ty=Tensor[(16, 14, 7), float64] */;
    %630 = %628.0;
    %631 = @func_4590() /* ty=Tensor[(2, 9, 6), float64] */;
    (%629, %630, %631)
  };
  %632() /* ty=(Tensor[(16, 14, 7), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_3698() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %633 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %634 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
  %635 = %633.0;
  (%634, %635)
}

def @func_5029(%var_5027: Tensor[(4, 1, 7), float32], %var_5028: Tensor[(1134), int64]) -> (Tensor[(2, 9, 6), float64], Tensor[(4, ?, 7), uint64], Tensor[(2, 9, 6), bool], Tensor[(14, 9, 9), bool], Tensor[(1134), int64]) {
  @func_5025(%var_5027, %var_5028) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(4, ?, 7), uint64], Tensor[(2, 9, 6), bool], Tensor[(14, 9, 9), bool], Tensor[(1134), int64]) */
}

def @func_277(%var_267: Tensor[(9, 15, 1), float64]) -> (Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) {
  %636 = cast(%var_267, dtype="float64") /* ty=Tensor[(9, 15, 1), float64] */;
  %637 = cast(%var_267, dtype="float64") /* ty=Tensor[(9, 15, 1), float64] */;
  %638 = erf(%636) /* ty=Tensor[(9, 15, 1), float64] */;
  %639 = tan(%637) /* ty=Tensor[(9, 15, 1), float64] */;
  (%638, %639)
}

def @func_215() -> (Tensor[(2, 9, 6), float64],) {
  %642 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %640 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
    %641 = rsqrt(%640) /* ty=Tensor[(2, 9, 6), float64] */;
    (%641,)
  };
  %642() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_607() -> (Tensor[(2, 9, 6), float64],) {
  @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_5111() -> Tensor[(5, 15, 11), float64] {
  @func_5109() /* ty=Tensor[(5, 15, 11), float64] */
}

def @func_5884() -> (Tensor[(2, 9, 6), float64],) {
  @func_5882() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_6563(%var_6559: Tensor[(6, 15, 9), float64], %var_6560: Tensor[(480), float32], %var_6561: Tensor[(504), float32], %var_6562: Tensor[(6, 15, 9), bool]) -> (Tensor[(6, 15, 9), uint8], Tensor[(12, 3, 14), uint64], Tensor[(480), float32], Tensor[(504), float32], Tensor[(6, 15, 9), float32], Tensor[(6, 15, 9), int8]) {
  %672 = fn (%var_6535: Tensor[(6, 15, 9), float64], %var_6541: Tensor[(480), float32], %var_6542: Tensor[(504), float32], %var_6551: Tensor[(6, 15, 9), bool]) -> (Tensor[(6, 15, 9), uint8], Tensor[(12, 3, 14), uint64], Tensor[(480), float32], Tensor[(504), float32], Tensor[(6, 15, 9), float32], Tensor[(6, 15, 9), int8]) {
    %643 = @func_2836() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), uint32], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), bool], Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */;
    %644 = %643.3;
    %645 = cast(%644, dtype="float64") /* ty=Tensor[(6, 15, 9), float64] */;
    %646 = atanh(%645) /* ty=Tensor[(6, 15, 9), float64] */;
    %647 = cast(%var_6535, dtype="uint8") /* ty=Tensor[(6, 15, 9), uint8] */;
    %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
    %649 = cast(%646, dtype="uint8") /* ty=Tensor[(6, 15, 9), uint8] */;
    %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %651 = cast(%var_6541, dtype="float32") /* ty=Tensor[(480), float32] */;
    %652 = cast(%var_6541, dtype="float32") /* ty=Tensor[(480), float32] */;
    %653 = cast(%var_6542, dtype="float32") /* ty=Tensor[(504), float32] */;
    %654 = reshape(%651, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), float32] */;
    %655 = reshape(%652, newshape=[6, 8, 10]) /* ty=Tensor[(6, 8, 10), float32] */;
    %656 = reshape(%653, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
    %657 = @func_5643(%654, %655, %656) /* ty=(Tensor[(6, 8, 10), float32], Tensor[(10, 11, 14), float32], Tensor[(6, 8, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(12, 3, 14), uint64]) */;
    %658 = cast(%646, dtype="float32") /* ty=Tensor[(6, 15, 9), float32] */;
    %659 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 15, 9), uint32] */, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
    %660 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
    %661 = cast(%644, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %663 = greater_equal(%661, %662) /* ty=Tensor[(6, 15, 9), bool] */;
    %664 = cast(%var_6551, dtype="int8") /* ty=Tensor[(6, 15, 9), int8] */;
    %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
    %666 = cast(%663, dtype="int8") /* ty=Tensor[(6, 15, 9), int8] */;
    %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %668 = subtract(%649, %650) /* ty=Tensor[(6, 15, 9), uint8] */;
    %669 = %657.4;
    %670 = cos(%658) /* ty=Tensor[(6, 15, 9), float32] */;
    %671 = right_shift(%666, %667) /* ty=Tensor[(6, 15, 9), int8] */;
    (%668, %669, %var_6541, %var_6542, %670, %671)
  };
  %672(%var_6559, %var_6560, %var_6561, %var_6562) /* ty=(Tensor[(6, 15, 9), uint8], Tensor[(12, 3, 14), uint64], Tensor[(480), float32], Tensor[(504), float32], Tensor[(6, 15, 9), float32], Tensor[(6, 15, 9), int8]) */
}

def @func_6313() -> (Tensor[(2, 9, 6), float64],) {
  %673 = @func_6272() /* ty=(Tensor[(6, 6, 8), float32], Tensor[(2, 9, 6), float64], float32, Tensor[(768), float32]) */;
  %674 = %673.1;
  (%674,)
}

def @func_3511() -> (Tensor[(2, 9, 6), float64],) {
  %675 = @func_1656() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %676 = %675.1;
  (%676,)
}

def @func_2495() -> (Tensor[(5, 15, 11), float64],) {
  @func_2493() /* ty=(Tensor[(5, 15, 11), float64],) */
}

def @func_6088() -> (Tensor[(2, 9, 6), float64],) {
  %678 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %677 = @func_4531() /* ty=Tensor[(2, 9, 6), float64] */;
    (%677,)
  };
  %678() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_498() -> (Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) {
  %694 = fn () -> (Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) {
    %679 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %680 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(2, 13, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %683 = cast(-1.76576f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %684 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 30), float32] */, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
    %685 = reshape(%683, newshape=[]) /* ty=float32 */;
    %686 = reshape(%684, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), float32] */;
    %687 = @func_378(%685, %686) /* ty=(Tensor[(3, 1, 10), float32], Tensor[(3, 1, 10), float64]) */;
    %688 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 13, 5), float32] */, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
    %689 = acosh(%688) /* ty=Tensor[(2, 13, 5), float64] */;
    %690 = cast(%689, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
    %691 = mod(%681, %682) /* ty=Tensor[(2, 13, 5), float32] */;
    %692 = %687.1;
    %693 = sinh(%690) /* ty=Tensor[(2, 13, 5), float64] */;
    (%691, %692, -1.76576f /* ty=float32 */, meta[relay.Constant][32] /* ty=Tensor[(1, 30), float32] */, %693)
  };
  %694() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */
}

def @func_2076() -> (Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(880), float64]) {
  %701 = fn () -> (Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(880), float64]) {
    %695 = @func_1491() /* ty=(Tensor[(880), float64],) */;
    %696 = @func_763() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %697 = @func_1398() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(10, 11, 8), float32], Tensor[(880), float64]) */;
    %698 = %695.0;
    %699 = %696.0;
    %700 = %697.2;
    (%698, %699, %700)
  };
  %701() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), float64], Tensor[(880), float64]) */
}

def @func_2628() -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) {
  @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */
}

def @func_5534() -> Tensor[(2, 9, 6), float64] {
  %703 = fn () -> Tensor[(2, 9, 6), float64] {
    %702 = @func_4610() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %702.0
  };
  %703() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_2837() -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), uint32], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), bool], Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) {
  %730 = fn () -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), uint32], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), bool], Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) {
    %704 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %705 = @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */;
    %706 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 15, 9), float32] */, dtype="float32") /* ty=Tensor[(6, 15, 9), float32] */;
    %707 = erf(%706) /* ty=Tensor[(6, 15, 9), float32] */;
    %708 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 15, 9), float32] */, dtype="uint32") /* ty=Tensor[(6, 15, 9), uint32] */;
    %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%707, dtype="uint32") /* ty=Tensor[(6, 15, 9), uint32] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %712 = @func_2626() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(825), float64], Tensor[(2, 9, 6), float32]) */;
    %713 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 15, 9), float32] */, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
    %714 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(6, 15, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %715 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 15, 9), float32] */, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
    %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %717 = @func_2737() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %718 = cast(meta[relay.Constant][35] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
    %719 = reshape(%718, newshape=[9, 15, 1]) /* ty=Tensor[(9, 15, 1), float64] */;
    %720 = @func_277(%719) /* ty=(Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) */;
    %721 = %704.0;
    %722 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
    %723 = %705.1;
    %724 = logical_xor(%710, %711) /* ty=Tensor[(6, 15, 9), uint32] */;
    %725 = %712.1;
    %726 = equal(%715, %716) /* ty=Tensor[(6, 15, 9), bool] */;
    %727 = %717.0;
    %728 = @func_1183() /* ty=Tensor[(5, 15, 11), float64] */;
    %729 = %720.1;
    (%721, %722, %723, %724, %725, %726, %727, %728, %729, meta[relay.Constant][35] /* ty=Tensor[(135), float64] */)
  };
  %730() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), uint32], Tensor[(5, 15, 11), uint8], Tensor[(6, 15, 9), bool], Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */
}

def @func_1012() -> Tensor[(2, 9, 6), float64] {
  @func_1010() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_4970(%var_4968: Tensor[(15, 2, 4), int16]) -> (Tensor[(15, 2, 4), bool],) {
  @func_4967(%var_4968) /* ty=(Tensor[(15, 2, 4), bool],) */
}

def @func_3931() -> Tensor[(2, 9, 6), float64] {
  @func_3929() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_2453() -> Tensor[(2, 9, 6), float64] {
  @func_2451() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_4612() -> (Tensor[(2, 9, 6), float64],) {
  @func_4610() /* ty=(Tensor[(2, 9, 6), float64],) */
}

def @func_2739() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  @func_2737() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_1809() -> (Tensor[(880), float64], Tensor[(2, 9, 6), int16]) {
  @func_1807() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), int16]) */
}

def @func_709(%var_708: Tensor[(14, 9, 9), int64]) -> (Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) {
  %742 = fn (%var_687: Tensor[(14, 9, 9), int64]) -> (Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) {
    %731 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 9, 9), int64] */, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
    %732 = shape_of(%var_687, dtype="int32") /* ty=Tensor[(3), int32] */;
    %733 = cast(%var_687, dtype="bool") /* ty=Tensor[(14, 9, 9), bool] */;
    %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %735 = @func_497() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */;
    %736 = cast(meta[relay.Constant][37] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
    %737 = reshape(%736, newshape=[9, 15, 1]) /* ty=Tensor[(9, 15, 1), float64] */;
    %738 = @func_277(%737) /* ty=(Tensor[(9, 15, 1), float64], Tensor[(9, 15, 1), float64]) */;
    %739 = greater(%733, %734) /* ty=Tensor[(14, 9, 9), bool] */;
    %740 = %735.0;
    %741 = %738.0;
    (%739, %740, %741, meta[relay.Constant][37] /* ty=Tensor[(135), float64] */)
  };
  %742(%var_708) /* ty=(Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */
}

def @func_3396(%var_3394: Tensor[(12, 7, 1), float64]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(12, 7, 1), float32]) {
  @func_3393(%var_3394) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), float64], Tensor[(12, 7, 1), float32]) */
}

def @func_5349(%var_5346: Tensor[(3, 4, 12), float64], %var_5347: Tensor[(3, 4, 12), float64], %var_5348: Tensor[(1134), int64]) -> (Tensor[(2, 9, 6), uint32], Tensor[(3, 4, 12), int8], Tensor[(9, 15, 1), float64], Tensor[(1134), int64]) {
  %756 = fn (%var_5314: Tensor[(3, 4, 12), float64], %var_5320: Tensor[(3, 4, 12), float64], %var_5334: Tensor[(1134), int64]) -> (Tensor[(2, 9, 6), uint32], Tensor[(3, 4, 12), int8], Tensor[(9, 15, 1), float64], Tensor[(1134), int64]) {
    %743 = @func_559() /* ty=(Tensor[(2, 9, 6), uint32],) */;
    %744 = cast(%var_5314, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
    %745 = rsqrt(%744) /* ty=Tensor[(3, 4, 12), float64] */;
    %746 = cast(%var_5320, dtype="int8") /* ty=Tensor[(3, 4, 12), int8] */;
    %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
    %748 = cast(%745, dtype="int8") /* ty=Tensor[(3, 4, 12), int8] */;
    %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %750 = cast(%var_5334, dtype="int64") /* ty=Tensor[(1134), int64] */;
    %751 = reshape(%750, newshape=[14, 9, 9]) /* ty=Tensor[(14, 9, 9), int64] */;
    %752 = @func_707(%751) /* ty=(Tensor[(14, 9, 9), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 15, 1), float64], Tensor[(135), float64]) */;
    %753 = %743.0;
    %754 = add(%748, %749) /* ty=Tensor[(3, 4, 12), int8] */;
    %755 = %752.2;
    (%753, %754, %755, %var_5334)
  };
  %756(%var_5346, %var_5347, %var_5348) /* ty=(Tensor[(2, 9, 6), uint32], Tensor[(3, 4, 12), int8], Tensor[(9, 15, 1), float64], Tensor[(1134), int64]) */
}

def @func_2985() -> (Tensor[(2, 9, 6), float32], Tensor[(880), float64]) {
  %763 = fn () -> (Tensor[(2, 9, 6), float32], Tensor[(880), float64]) {
    %757 = @func_1583() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
    %758 = %757.0;
    %759 = cast(%758, dtype="float32") /* ty=Tensor[(2, 9, 6), float32] */;
    %760 = @func_1807() /* ty=(Tensor[(880), float64], Tensor[(2, 9, 6), int16]) */;
    %761 = acosh(%759) /* ty=Tensor[(2, 9, 6), float32] */;
    %762 = %760.0;
    (%761, %762)
  };
  %763() /* ty=(Tensor[(2, 9, 6), float32], Tensor[(880), float64]) */
}

def @func_5675(%var_5673: float64, %var_5674: Tensor[(14, 4, 13), float64]) -> (Tensor[(14, 4, 13), float64],) {
  @func_5671(%var_5673, %var_5674) /* ty=(Tensor[(14, 4, 13), float64],) */
}

def @func_5865() -> Tensor[(2, 9, 6), float64] {
  @func_1010() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_6399(%var_6397: Tensor[(5, 14, 16), float32], %var_6398: Tensor[(5, 14, 16), bool]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 14, 16), float32], Tensor[(2, 9, 6), float64], Tensor[(120), uint32], Tensor[(5, 15, 11), float64]) {
  @func_6395(%var_6397, %var_6398) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 14, 16), float32], Tensor[(2, 9, 6), float64], Tensor[(120), uint32], Tensor[(5, 15, 11), float64]) */
}

def @func_5867() -> Tensor[(2, 9, 6), float64] {
  @func_5865() /* ty=Tensor[(2, 9, 6), float64] */
}

def @func_4907(%var_4905: Tensor[(2, 9, 6), float64]) -> (Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  @func_4904(%var_4905) /* ty=(Tensor[(2, 9, 6), float64], Tensor[(5, 15, 11), uint8], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_1010() -> Tensor[(2, 9, 6), float64] {
  %764 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %764.0
}

def @func_2354(%var_2300: float32, %var_2301: Tensor[(8, 6, 16), float32]) -> (Tensor[(8, 6, 16), float32], Tensor[(2, 9, 6), float64], Tensor[(3, 1, 10), float64], Tensor[(2, 9, 6), float64], Tensor[(3, 378), int64]) {
  %765 = cast(%var_2300, dtype="float32") /* ty=float32 */;
  %766 = cast(%var_2301, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  %767 = @func_497() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(3, 1, 10), float64], float32, Tensor[(1, 30), float32], Tensor[(2, 13, 5), float64]) */;
  %768 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 378), int64] */, dtype="int64") /* ty=Tensor[(3, 378), int64] */;
  %769 = reshape(%768, newshape=[1134]) /* ty=Tensor[(1134), int64] */;
  %770 = @func_1987(%769) /* ty=(Tensor[(2, 9, 6), uint64], Tensor[(14, 9, 9), bool], Tensor[(1134), int64], Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */;
  %771 = power(%765, %766) /* ty=Tensor[(8, 6, 16), float32] */;
  %772 = @func_1340() /* ty=Tensor[(2, 9, 6), float64] */;
  %773 = %767.1;
  %774 = %770.3;
  (%771, %772, %773, %774, meta[relay.Constant][38] /* ty=Tensor[(3, 378), int64] */)
}

def @func_1221() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), int16], Tensor[(2, 9, 6), float64], Tensor[(1, 135), float32], Tensor[(2, 9, 6), float64]) {
  %775 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %776 = %775.0;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %778 = reshape(%777, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), float64] */;
  %779 = @func_951(%778) /* ty=(Tensor[(2, 9, 6), int16],) */;
  %780 = @func_841() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %781 = %780.0;
  %782 = cast(%781, dtype="float64") /* ty=Tensor[(2, 9, 6), float64] */;
  %783 = reshape(%782, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), float64] */;
  %784 = @func_474(%783) /* ty=(Tensor[(2, 9, 6), int64], Tensor[(9, 15, 1), float64], Tensor[(1, 135), float64]) */;
  %785 = %784.2;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %787 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
  %788 = %779.0;
  %789 = sinh(%786) /* ty=Tensor[(1, 135), float32] */;
  %790 = %787.0;
  (%776, %788, %781, %789, %790)
}

def @func_1584() -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
  %795 = fn () -> (Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) {
    %791 = @func_238() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %792 = @func_605() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %793 = %791.0;
    %794 = %792.0;
    (%793, %794)
  };
  %795() /* ty=(Tensor[(2, 9, 6), float64], Tensor[(2, 9, 6), float64]) */
}

def @func_1044() -> (Tensor[(2, 9, 6), float64],) {
  %798 = fn () -> (Tensor[(2, 9, 6), float64],) {
    %796 = @func_264() /* ty=(Tensor[(2, 9, 6), float64],) */;
    %797 = %796.0;
    (%797,)
  };
  %798() /* ty=(Tensor[(2, 9, 6), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen122/build/output.py:2296: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen122/build/output.py", line 2301, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_sqrt_kernel0(double* __restrict__ T_sqrt, double* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1089) {
    T_sqrt[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = sqrt(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}

extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cast_sigmoid_kernel0(float* __restrict__ T_sigmoid, double* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1089) {
    T_sigmoid[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - ((float)placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))])))));
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

