==========mod==========
#[version = "0.0.5"]
def @func_3488(%var_3472: Tensor[(468, 1), float64]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 12, 13), float64], Tensor[(468, 1), float64], Tensor[(2, 16, 9), float64], Tensor[(600), float32], Tensor[(2, 16, 9), float64]) {
  %0 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %2 = reshape(%1, newshape=[10, 12, 5]) /* ty=Tensor[(10, 12, 5), uint64] */;
  %3 = @func_3202(%2) /* ty=(Tensor[(10, 12, 5), uint64], Tensor[(2, 16, 9), float64]) */;
  %4 = @func_580() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %5 = cast(%var_3472, dtype="float64") /* ty=Tensor[(468, 1), float64] */;
  %6 = reshape(%5, newshape=[3, 12, 13]) /* ty=Tensor[(3, 12, 13), float64] */;
  %7 = @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(600), uint64] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %9 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %10 = %0.0;
  %11 = %3.1;
  %12 = %4.0;
  %13 = @func_2948(%6) /* ty=Tensor[(3, 12, 13), float64] */;
  %14 = %7.1;
  %15 = sigmoid(%8) /* ty=Tensor[(600), float32] */;
  %16 = %9.0;
  (%10, %11, %12, %13, %var_3472, %14, %15, %16)
}

def @func_8375() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %17 = @func_5409() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %18 = @func_4719() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %19 = %17.1;
  %20 = %18.0;
  (%19, %20)
}

def @func_2694(%var_2685: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), uint64],) {
  %21 = @func_2583() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %22 = %21.0;
  %23 = cast(%var_2685, dtype="uint64") /* ty=Tensor[(2, 16, 9), uint64] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%22, dtype="uint64") /* ty=Tensor[(2, 16, 9), uint64] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %27 = bitwise_and(%25, %26) /* ty=Tensor[(2, 16, 9), uint64] */;
  (%27,)
}

def @func_3202(%var_3193: Tensor[(10, 12, 5), uint64]) -> (Tensor[(10, 12, 5), uint64], Tensor[(2, 16, 9), float64]) {
  %28 = cast(meta[relay.Constant][1] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %29 = cast(%var_3193, dtype="uint64") /* ty=Tensor[(10, 12, 5), uint64] */;
  %30 = bitwise_or(%28, %29) /* ty=Tensor[(10, 12, 5), uint64] */;
  %31 = @func_1940() /* ty=Tensor[(2, 16, 9), float64] */;
  (%30, %31)
}

def @func_3958() -> (Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) {
  %32 = @func_1860() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) */;
  %33 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %34 = %32.1;
  %35 = %33.0;
  (%34, %35)
}

def @func_5758() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %36 = @func_2583() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %37 = @func_788() /* ty=Tensor[(2, 16, 9), float64] */;
  %38 = %36.0;
  (%37, %38)
}

def @main(%var_9236: float32) -> Tensor[(16, 5, 12), float32] {
  %39 = cast(%var_9236, dtype="float32") /* ty=float32 */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 12), float32] */;
  divide(%39, %40) /* ty=Tensor[(16, 5, 12), float32] */
}

def @func_8241() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %41 = @func_2467() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %42 = @func_1053() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %43 = %41.1;
  %44 = %42.1;
  (%43, %44)
}

def @func_8024() -> (Tensor[(2, 16, 9), float64],) {
  %45 = @func_509() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32]) */;
  %46 = %45.0;
  (%46,)
}

def @func_2583() -> (Tensor[(2, 16, 9), float64],) {
  %47 = @func_2321() /* ty=Tensor[(2, 16, 9), float64] */;
  (%47,)
}

def @func_9115() -> Tensor[(2, 16, 9), float64] {
  %48 = @func_6763() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %48.0
}

def @func_2347(%var_2338: Tensor[(8, 1, 13), int8]) -> Tensor[(8, 8, 13), int8] {
  %49 = cast(%var_2338, dtype="int8") /* ty=Tensor[(8, 1, 13), int8] */;
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 8, 13), int8] */, dtype="int8") /* ty=Tensor[(8, 8, 13), int8] */;
  minimum(%49, %50) /* ty=Tensor[(8, 8, 13), int8] */
}

def @func_1053() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %51 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %52 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %53 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  %54 = %51.0;
  %55 = %52.0;
  (%53, %54, %55)
}

def @func_4210() -> (Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), uint8], Tensor[(320), uint8]) {
  %56 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %57 = cast(meta[relay.Constant][4] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %58 = reshape(%57, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), uint8] */;
  %59 = %56.0;
  %60 = @func_2062(%58) /* ty=Tensor[(5, 8, 8), uint8] */;
  (%59, %60, meta[relay.Constant][4] /* ty=Tensor[(320), uint8] */)
}

def @func_7182() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %61 = @func_1433() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %62 = @func_5576() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %63 = @func_3541() /* ty=Tensor[(2, 16, 9), float64] */;
  %64 = %61.0;
  %65 = %62.0;
  (%63, %64, %65)
}

def @func_6358(%var_6331: Tensor[(14, 15, 16), float64]) -> (Tensor[(14, 15, 16), float64],) {
  %66 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 15, 16), float64] */;
  %67 = shape_of(%var_6331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%var_6331, dtype="float64") /* ty=Tensor[(14, 15, 16), float64] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %70 = add(%68, %69) /* ty=Tensor[(14, 15, 16), float64] */;
  (%70,)
}

def @func_456(%var_423: Tensor[(3, 9, 4), int32], %var_424: Tensor[(3, 9, 4), int32]) -> (Tensor[(3, 9, 4), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %71 = cast(%var_424, dtype="bool") /* ty=Tensor[(3, 9, 4), bool] */;
  %72 = shape_of(%var_423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%var_423, dtype="bool") /* ty=Tensor[(3, 9, 4), bool] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %75 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %76 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %77 = not_equal(%73, %74) /* ty=Tensor[(3, 9, 4), bool] */;
  %78 = %75.0;
  %79 = %76.0;
  (%77, %78, %79)
}

def @func_1536(%var_1496: Tensor[(2, 16, 9), float32]) -> (Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %80 = @func_788() /* ty=Tensor[(2, 16, 9), float64] */;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %82 = reshape(%81, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %83 = @func_1160(%82) /* ty=(Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32]) */;
  %84 = %83.1;
  %85 = cast(%var_1496, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %89 = cast(%80, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %90 = @func_617() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %91 = equal(%87, %88) /* ty=Tensor[(2, 16, 9), bool] */;
  %92 = cos(%89) /* ty=Tensor[(2, 16, 9), float64] */;
  %93 = %90.0;
  %94 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
  (%91, %92, %93, %94)
}

def @func_2467() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %95 = @func_580() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %96 = %95.0;
  %97 = @func_2239() /* ty=Tensor[(2, 16, 9), float64] */;
  (%96, %97)
}

def @func_8348() -> Tensor[(2, 16, 9), float64] {
  @func_7651() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_9170(%var_9148: Tensor[(4, 1, 9), uint8], %var_9149: Tensor[(4, 2, 9), uint8]) -> (Tensor[(4, 2, 9), uint8], Tensor[(2, 16, 9), float64]) {
  %98 = cast(%var_9148, dtype="uint8") /* ty=Tensor[(4, 1, 9), uint8] */;
  %99 = cast(%var_9149, dtype="uint8") /* ty=Tensor[(4, 2, 9), uint8] */;
  %100 = multiply(%98, %99) /* ty=Tensor[(4, 2, 9), uint8] */;
  %101 = @func_5318() /* ty=Tensor[(2, 16, 9), float64] */;
  (%100, %101)
}

def @func_7515(%var_7419: Tensor[(13, 11, 13), int8], %var_7420: Tensor[(13, 11, 13), int8], %var_7466: Tensor[(13, 11, 13), int8]) -> (Tensor[(13, 11, 13), float32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(13, 11, 13), float32], Tensor[(2, 16, 9), float64], Tensor[(13, 11, 13), float64]) {
  %102 = cast(%var_7420, dtype="int8") /* ty=Tensor[(13, 11, 13), int8] */;
  %103 = shape_of(%var_7419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%var_7419, dtype="int8") /* ty=Tensor[(13, 11, 13), int8] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %106 = maximum(%104, %105) /* ty=Tensor[(13, 11, 13), int8] */;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(13, 11, 13), float32] */;
  %108 = shape_of(%var_7419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%var_7419, dtype="float32") /* ty=Tensor[(13, 11, 13), float32] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %111 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %112 = cast(%var_7466, dtype="float32") /* ty=Tensor[(13, 11, 13), float32] */;
  %113 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%106, dtype="float32") /* ty=Tensor[(13, 11, 13), float32] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %116 = @func_3833() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %117 = cast(%var_7419, dtype="float64") /* ty=Tensor[(13, 11, 13), float64] */;
  %118 = mod(%109, %110) /* ty=Tensor[(13, 11, 13), float32] */;
  %119 = %111.0;
  %120 = @func_7023() /* ty=Tensor[(2, 16, 9), float64] */;
  %121 = minimum(%114, %115) /* ty=Tensor[(13, 11, 13), float32] */;
  %122 = %116.0;
  %123 = sigmoid(%117) /* ty=Tensor[(13, 11, 13), float64] */;
  (%118, %119, %120, %121, %122, %123)
}

def @func_4596() -> (Tensor[(2, 16, 9), float64],) {
  %124 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %125 = %124.0;
  (%125,)
}

def @func_3102() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(9, 14, 11), int8], Tensor[(1386), int8]) {
  %126 = @func_2927() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %127 = @func_2825() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %128 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %129 = cast(meta[relay.Constant][6] /* ty=Tensor[(1386), int8] */, dtype="int8") /* ty=Tensor[(1386), int8] */;
  %130 = cast(meta[relay.Constant][6] /* ty=Tensor[(1386), int8] */, dtype="int8") /* ty=Tensor[(1386), int8] */;
  %131 = reshape(%129, newshape=[9, 14, 11]) /* ty=Tensor[(9, 14, 11), int8] */;
  %132 = reshape(%130, newshape=[9, 14, 11]) /* ty=Tensor[(9, 14, 11), int8] */;
  %133 = @func_2370(%131, %132) /* ty=(Tensor[(9, 14, 11), int8],) */;
  %134 = @func_1210() /* ty=Tensor[(2, 16, 9), float64] */;
  %135 = %126.4;
  %136 = %127.0;
  %137 = %128.0;
  %138 = %133.0;
  (%134, %135, %136, %137, %138, meta[relay.Constant][6] /* ty=Tensor[(1386), int8] */)
}

def @func_8995() -> Tensor[(2, 16, 9), float64] {
  %139 = @func_5826() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  acosh(%141) /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8718() -> Tensor[(2, 16, 9), float64] {
  %142 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %142.0
}

def @func_6602() -> Tensor[(2, 16, 9), float64] {
  %143 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %143.0
}

def @func_4343() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %144 = @func_4318() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %145 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %146 = %144.0;
  %147 = %145.0;
  (%146, %147)
}

def @func_8181() -> (Tensor[(2, 160), uint8],) {
  %148 = @func_6411() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 160), uint8]) */;
  %149 = %148.2;
  (%149,)
}

def @func_6703(%var_6683: Tensor[(13, 14, 7), uint32]) -> Tensor[(13, 14, 7), uint32] {
  %150 = cast(%var_6683, dtype="uint32") /* ty=Tensor[(13, 14, 7), uint32] */;
  %151 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(13, 14, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 14, 7), uint32] */, dtype="uint32") /* ty=Tensor[(13, 14, 7), uint32] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%152, %153) /* ty=Tensor[(13, 14, 7), uint32] */
}

def @func_2787(%var_2730: Tensor[(9, 7, 9), float32], %var_2747: Tensor[(9, 7, 9), float32]) -> (Tensor[(2, 16, 9), float64], Tensor[(18, 6), int32], Tensor[(9, 7, 9), bool], Tensor[(9, 7, 9), float64]) {
  %154 = cast(meta[relay.Constant][8] /* ty=Tensor[(18, 6), int32] */, dtype="int32") /* ty=Tensor[(18, 6), int32] */;
  %155 = cast(meta[relay.Constant][8] /* ty=Tensor[(18, 6), int32] */, dtype="int32") /* ty=Tensor[(18, 6), int32] */;
  %156 = reshape(%154, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
  %157 = reshape(%155, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
  %158 = @func_456(%156, %157) /* ty=(Tensor[(3, 9, 4), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %159 = cast(%var_2730, dtype="float32") /* ty=Tensor[(9, 7, 9), float32] */;
  %160 = cosh(%159) /* ty=Tensor[(9, 7, 9), float32] */;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(9, 7, 9), float64] */;
  %162 = acos(%161) /* ty=Tensor[(9, 7, 9), float64] */;
  %163 = cast(%160, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = cast(%var_2747, dtype="int8") /* ty=Tensor[(9, 7, 9), int8] */;
  %168 = shape_of(%var_2730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_2730, dtype="int8") /* ty=Tensor[(9, 7, 9), int8] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %171 = add(%169, %170) /* ty=Tensor[(9, 7, 9), int8] */;
  %172 = cast(%171, dtype="float64") /* ty=Tensor[(9, 7, 9), float64] */;
  %173 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%160, dtype="float64") /* ty=Tensor[(9, 7, 9), float64] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %176 = %158.2;
  %177 = logical_and(%165, %166) /* ty=Tensor[(9, 7, 9), bool] */;
  %178 = mod(%174, %175) /* ty=Tensor[(9, 7, 9), float64] */;
  (%176, meta[relay.Constant][8] /* ty=Tensor[(18, 6), int32] */, %177, %178)
}

def @func_3004() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %179 = @func_1053() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %180 = @func_2813() /* ty=Tensor[(2, 16, 9), float64] */;
  %181 = %179.0;
  (%180, %181)
}

def @func_4301() -> Tensor[(2, 16, 9), float64] {
  %182 = @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %182.1
}

def @func_6938() -> (Tensor[(13, 4, 15), float64], Tensor[(2, 16, 9), float64], Tensor[(288), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %183 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(13, 4, 15), float64] */;
  %184 = rsqrt(%183) /* ty=Tensor[(13, 4, 15), float64] */;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(13, 4, 15), float64] */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %187 = reshape(%186, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %188 = @func_6544(%187) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), uint8], Tensor[(2, 16, 9), float64]) */;
  %189 = @func_6591() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %190 = @func_5615() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(1050), uint32]) */;
  %191 = @func_5566() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %192 = sinh(%185) /* ty=Tensor[(13, 4, 15), float64] */;
  %193 = %188.0;
  %194 = %189.1;
  %195 = %190.0;
  %196 = %191.0;
  (%192, %193, meta[relay.Constant][10] /* ty=Tensor[(288), float64] */, %194, %195, %196)
}

def @func_5318() -> Tensor[(2, 16, 9), float64] {
  %197 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %197.0
}

def @func_5371(%var_5334: Tensor[(6, 10, 16), int8]) -> Tensor[(6, 10, 16), int8] {
  %198 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 10, 16), int8] */, dtype="int8") /* ty=Tensor[(6, 10, 16), int8] */;
  %199 = shape_of(%var_5334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_5334, dtype="int8") /* ty=Tensor[(6, 10, 16), int8] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%200, %201) /* ty=Tensor[(6, 10, 16), int8] */
}

def @func_6439(%var_6422: Tensor[(1, 16, 4), float32]) -> (Tensor[(1, 16, 4), float32], Tensor[(2, 16, 9), float64]) {
  %202 = cast(%var_6422, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %203 = asin(%202) /* ty=Tensor[(1, 16, 4), float32] */;
  %204 = @func_2239() /* ty=Tensor[(2, 16, 9), float64] */;
  (%203, %204)
}

def @func_2208(%var_2184: uint64) -> (Tensor[(2, 16, 9), float64], Tensor[(3136), uint64], Tensor[(1260), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float32]) {
  %205 = @func_509() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32]) */;
  %206 = cast(meta[relay.Constant][12] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %207 = cast(meta[relay.Constant][12] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %208 = %205.0;
  %209 = cast(%208, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %210 = cast(%var_2184, dtype="uint64") /* ty=uint64 */;
  %211 = cast(meta[relay.Constant][13] /* ty=Tensor[(3136), uint64] */, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %212 = reshape(%206, newshape=[14, 9, 10]) /* ty=Tensor[(14, 9, 10), float32] */;
  %213 = reshape(%207, newshape=[14, 9, 10]) /* ty=Tensor[(14, 9, 10), float32] */;
  %214 = reshape(%209, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %215 = reshape(%210, newshape=[]) /* ty=uint64 */;
  %216 = reshape(%211, newshape=[3136]) /* ty=Tensor[(3136), uint64] */;
  %217 = @func_2040(%212, %213, %214, %215, %216) /* ty=(Tensor[(14, 9, 10), uint64], Tensor[(196, 16), float64], Tensor[(288), float64], uint64, Tensor[(3136), uint64]) */;
  %218 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %219 = %218.0;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %221 = %217.4;
  %222 = erf(%220) /* ty=Tensor[(2, 16, 9), float32] */;
  (%208, %221, meta[relay.Constant][12] /* ty=Tensor[(1260), float32] */, %var_2184, meta[relay.Constant][13] /* ty=Tensor[(3136), uint64] */, %222)
}

def @func_6518(%var_6494: Tensor[(3136), uint64]) -> (Tensor[(2, 16, 9), float64], uint64, Tensor[(1, 1920), int64], Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) {
  %223 = @func_3289() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %224 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 1920), int64] */, dtype="int64") /* ty=Tensor[(1, 1920), int64] */;
  %225 = %223.0;
  %226 = cast(%225, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %227 = cast(%var_6494, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %228 = reshape(%224, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %229 = reshape(%226, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %230 = reshape(%227, newshape=[3136]) /* ty=Tensor[(3136), uint64] */;
  %231 = @func_5164(%228, %229, %230) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(288), float32], Tensor[(10, 12, 16), float32], Tensor[(2, 16, 9), float64], uint64, Tensor[(3136), uint64]) */;
  %232 = @func_3803() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %233 = %231.4;
  %234 = %232.0;
  (%225, %233, meta[relay.Constant][14] /* ty=Tensor[(1, 1920), int64] */, %var_6494, %234)
}

def @func_6411() -> (Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 160), uint8]) {
  %235 = @func_1433() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %236 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 160), uint8] */, dtype="uint8") /* ty=Tensor[(2, 160), uint8] */;
  %237 = reshape(%236, newshape=[320, 1]) /* ty=Tensor[(320, 1), uint8] */;
  %238 = @func_5541(%237) /* ty=(Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), int64], Tensor[(2, 16, 9), float64]) */;
  %239 = %235.0;
  %240 = %238.3;
  (%239, %240, meta[relay.Constant][15] /* ty=Tensor[(2, 160), uint8] */)
}

def @func_6849() -> (Tensor[(2, 16, 9), float64], Tensor[(8, 2, 5), float64]) {
  %241 = @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %242 = %241.0;
  %243 = @func_5187() /* ty=Tensor[(8, 2, 5), float64] */;
  (%242, %243)
}

def @func_2401(%var_2380: Tensor[(10, 15, 7), uint32]) -> (Tensor[(10, 15, 7), float32],) {
  %244 = cast(%var_2380, dtype="uint32") /* ty=Tensor[(10, 15, 7), uint32] */;
  %245 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(10, 15, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 15, 7), uint32] */, dtype="uint32") /* ty=Tensor[(10, 15, 7), uint32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %248 = right_shift(%246, %247) /* ty=Tensor[(10, 15, 7), uint32] */;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(10, 15, 7), float32] */;
  %250 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(10, 15, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 15, 7), uint32] */, dtype="float32") /* ty=Tensor[(10, 15, 7), float32] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %253 = add(%251, %252) /* ty=Tensor[(10, 15, 7), float32] */;
  (%253,)
}

def @func_4719() -> (Tensor[(2, 16, 9), float64],) {
  %254 = @func_617() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %255 = %254.0;
  (%255,)
}

def @func_4500(%var_4488: Tensor[(13, 3, 10), int64]) -> Tensor[(13, 3, 10), int64] {
  %256 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %257 = cast(%var_4488, dtype="int64") /* ty=Tensor[(13, 3, 10), int64] */;
  minimum(%256, %257) /* ty=Tensor[(13, 3, 10), int64] */
}

def @func_1433() -> (Tensor[(2, 16, 9), float64],) {
  %258 = @func_788() /* ty=Tensor[(2, 16, 9), float64] */;
  (%258,)
}

def @func_4910(%var_4892: Tensor[(16, 12, 1), float64]) -> (Tensor[(16, 12, 1), float64], Tensor[(16, 12, 1), float32]) {
  %259 = cast(%var_4892, dtype="float64") /* ty=Tensor[(16, 12, 1), float64] */;
  %260 = cast(%var_4892, dtype="float32") /* ty=Tensor[(16, 12, 1), float32] */;
  %261 = erf(%259) /* ty=Tensor[(16, 12, 1), float64] */;
  %262 = sinh(%260) /* ty=Tensor[(16, 12, 1), float32] */;
  (%261, %262)
}

def @func_7317(%var_7286: Tensor[(7, 8, 3), bool], %var_7287: Tensor[(7, 8, 3), bool]) -> (Tensor[(7, 8, 3), bool], Tensor[(2, 16, 9), float64], Tensor[(7, 8, 3), uint32]) {
  %263 = cast(%var_7287, dtype="bool") /* ty=Tensor[(7, 8, 3), bool] */;
  %264 = shape_of(%var_7286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%var_7286, dtype="bool") /* ty=Tensor[(7, 8, 3), bool] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %267 = @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %268 = cast(%var_7287, dtype="uint32") /* ty=Tensor[(7, 8, 3), uint32] */;
  %269 = shape_of(%var_7286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%var_7286, dtype="uint32") /* ty=Tensor[(7, 8, 3), uint32] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %272 = logical_or(%265, %266) /* ty=Tensor[(7, 8, 3), bool] */;
  %273 = %267.2;
  %274 = bitwise_and(%270, %271) /* ty=Tensor[(7, 8, 3), uint32] */;
  (%272, %273, %274)
}

def @func_7113() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %275 = @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
  %276 = %275.1;
  %277 = @func_3356() /* ty=Tensor[(2, 16, 9), float64] */;
  %278 = @func_3356() /* ty=Tensor[(2, 16, 9), float64] */;
  (%276, %277, %278)
}

def @func_5576() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %279 = @func_1433() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %280 = %279.0;
  %281 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
  (%280, %281)
}

def @func_1544() -> (Tensor[(2, 16, 9), float64],) {
  %282 = @func_617() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %283 = %282.0;
  (%283,)
}

def @func_1733() -> (Tensor[(2, 16, 9), float64],) {
  %284 = @func_617() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %285 = %284.0;
  (%285,)
}

def @func_3803() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %286 = @func_609() /* ty=Tensor[(2, 16, 9), float64] */;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %288 = reshape(%287, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float32] */;
  %289 = @func_1536(%288) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %290 = %289.2;
  (%286, %290)
}

def @func_8169() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %291 = @func_5566() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %292 = @func_7677() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %293 = %291.0;
  %294 = %292.1;
  (%293, %294)
}

def @func_9029() -> Tensor[(2, 16, 9), float64] {
  %295 = @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %295.0
}

def @func_509() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32]) {
  %296 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %297 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %298 = %296.0;
  %299 = %297.3;
  (%298, %299)
}

def @func_9201() -> Tensor[(2, 16, 9), float64] {
  %300 = @func_2426() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %300.0
}

def @func_617() -> (Tensor[(2, 16, 9), float64],) {
  %301 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %302 = %301.0;
  (%302,)
}

def @func_7023() -> Tensor[(2, 16, 9), float64] {
  %303 = @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %303.0
}

def @func_5432() -> (Tensor[(2, 16, 9), float64],) {
  %304 = @func_1210() /* ty=Tensor[(2, 16, 9), float64] */;
  (%304,)
}

def @func_4318() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %305 = @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %306 = @func_2825() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %307 = %305.2;
  %308 = %306.0;
  (%307, %308)
}

def @func_2239() -> Tensor[(2, 16, 9), float64] {
  %309 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %309.0
}

def @func_6026(%var_5992: Tensor[(3, 6, 1), float64]) -> (Tensor[(3, 6, ?), int8], Tensor[(2, 16, 9), float64], Tensor[(3, 6, ?), int16]) {
  %310 = cast(%var_5992, dtype="float64") /* ty=Tensor[(3, 6, 1), float64] */;
  %311 = cosh(%310) /* ty=Tensor[(3, 6, 1), float64] */;
  %312 = cast(%var_5992, dtype="int8") /* ty=Tensor[(3, 6, 1), int8] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="int8") /* ty=Tensor[(3, 6, 1), int8] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %316 = cast(%311, dtype="float64") /* ty=Tensor[(3, 6, 1), float64] */;
  %317 = acosh(%316) /* ty=Tensor[(3, 6, 1), float64] */;
  %318 = cast(%311, dtype="int16") /* ty=Tensor[(3, 6, 1), int16] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="int16") /* ty=Tensor[(3, 6, 1), int16] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %322 = multiply(%314, %315) /* ty=Tensor[(3, 6, ?), int8] */;
  %323 = @func_2321() /* ty=Tensor[(2, 16, 9), float64] */;
  %324 = bitwise_and(%320, %321) /* ty=Tensor[(3, 6, ?), int16] */;
  (%322, %323, %324)
}

def @func_580() -> (Tensor[(2, 16, 9), float64],) {
  %325 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %326 = %325.0;
  (%326,)
}

def @func_7864() -> Tensor[(2, 16, 9), float64] {
  %327 = @func_4596() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %327.0
}

def @func_8118() -> (Tensor[(2, 16, 9), bool],) {
  %328 = @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
  %329 = %328.0;
  (%329,)
}

def @func_3833() -> (Tensor[(2, 16, 9), float64],) {
  %330 = @func_3541() /* ty=Tensor[(2, 16, 9), float64] */;
  (%330,)
}

def @func_4835(%var_4816: Tensor[(108), int32]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(108), int32], Tensor[(2, 16, 9), float64]) {
  %331 = cast(%var_4816, dtype="int32") /* ty=Tensor[(108), int32] */;
  %332 = cast(%var_4816, dtype="int32") /* ty=Tensor[(108), int32] */;
  %333 = reshape(%331, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
  %334 = reshape(%332, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
  %335 = @func_456(%333, %334) /* ty=(Tensor[(3, 9, 4), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %336 = @func_1210() /* ty=Tensor[(2, 16, 9), float64] */;
  %337 = %335.1;
  %338 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
  (%336, %337, %var_4816, %338)
}

def @func_8773() -> Tensor[(2, 16, 9), float64] {
  %339 = @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %339.0
}

def @func_2813() -> Tensor[(2, 16, 9), float64] {
  %340 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  log2(%342) /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_7207() -> Tensor[(2, 16, 9), float64] {
  @func_681() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_788() -> Tensor[(2, 16, 9), float64] {
  @func_681() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_4413() -> (Tensor[(2, 16, 9), float64],) {
  %343 = @func_2321() /* ty=Tensor[(2, 16, 9), float64] */;
  (%343,)
}

def @func_8293() -> (Tensor[(2, 16, 9), float64],) {
  %344 = @func_7651() /* ty=Tensor[(2, 16, 9), float64] */;
  (%344,)
}

def @func_4943() -> (Tensor[(2, 16, 9), float64],) {
  %345 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  (%345,)
}

def @func_1380() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %346 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  %347 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  (%346, %347)
}

def @func_6097() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 9, 4), bool], Tensor[(108), int32], Tensor[(2, 16, 9), float64]) {
  %348 = @func_3803() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %349 = %348.0;
  %350 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %354 = @func_4343() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %355 = @func_1860() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) */;
  %356 = cast(meta[relay.Constant][18] /* ty=Tensor[(108), int32] */, dtype="int32") /* ty=Tensor[(108), int32] */;
  %357 = cast(meta[relay.Constant][18] /* ty=Tensor[(108), int32] */, dtype="int32") /* ty=Tensor[(108), int32] */;
  %358 = reshape(%356, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
  %359 = reshape(%357, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
  %360 = @func_456(%358, %359) /* ty=(Tensor[(3, 9, 4), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %361 = @func_617() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %362 = power(%352, %353) /* ty=Tensor[(2, 16, 9), float64] */;
  %363 = %354.1;
  %364 = %355.0;
  %365 = %360.0;
  %366 = %361.0;
  (%362, %363, %364, %365, meta[relay.Constant][18] /* ty=Tensor[(108), int32] */, %366)
}

def @func_8620(%var_8582: Tensor[(1274), uint32]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(13, 14, 7), uint32], Tensor[(1274), uint32], Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %367 = @func_4087() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %368 = @func_1600() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %369 = cast(%var_8582, dtype="uint32") /* ty=Tensor[(1274), uint32] */;
  %370 = reshape(%369, newshape=[13, 14, 7]) /* ty=Tensor[(13, 14, 7), uint32] */;
  %371 = @func_8118() /* ty=(Tensor[(2, 16, 9), bool],) */;
  %372 = @func_8313() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %373 = %367.0;
  %374 = %368.0;
  %375 = @func_6703(%370) /* ty=Tensor[(13, 14, 7), uint32] */;
  %376 = %371.0;
  %377 = %372.0;
  %378 = @func_7023() /* ty=Tensor[(2, 16, 9), float64] */;
  %379 = @func_7651() /* ty=Tensor[(2, 16, 9), float64] */;
  (%373, %374, %375, %var_8582, %376, %377, %378, %379)
}

def @func_8050() -> Tensor[(2, 16, 9), float64] {
  @func_7023() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_4680(%var_4675: Tensor[(4, 14, 1), float64], %var_4676: Tensor[(4, 14, 11), float64]) -> (Tensor[(4, 14, 11), float64],) {
  %380 = cast(%var_4675, dtype="float64") /* ty=Tensor[(4, 14, 1), float64] */;
  %381 = cast(%var_4676, dtype="float64") /* ty=Tensor[(4, 14, 11), float64] */;
  %382 = floor_divide(%380, %381) /* ty=Tensor[(4, 14, 11), float64] */;
  (%382,)
}

def @func_6808() -> Tensor[(2, 16, 9), float64] {
  @func_6460() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_3927(%var_3892: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) {
  %383 = @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %384 = %383.1;
  %385 = cast(%var_3892, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%384, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %389 = cast(%var_3892, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
  %390 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%384, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %393 = @func_2546() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %394 = floor_mod(%387, %388) /* ty=Tensor[(2, 16, 9), float32] */;
  %395 = greater_equal(%391, %392) /* ty=Tensor[(2, 16, 9), bool] */;
  %396 = %393.0;
  (%394, %395, %396)
}

def @func_3389() -> (Tensor[(2, 16, 9), float64],) {
  %397 = @func_1940() /* ty=Tensor[(2, 16, 9), float64] */;
  (%397,)
}

def @func_8085(%var_8072: Tensor[(6, 14, 13), uint64], %var_8073: Tensor[(6, 14, 13), uint64]) -> Tensor[(6, 14, 13), bool] {
  %398 = cast(%var_8073, dtype="bool") /* ty=Tensor[(6, 14, 13), bool] */;
  %399 = shape_of(%var_8072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%var_8072, dtype="bool") /* ty=Tensor[(6, 14, 13), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%400, %401) /* ty=Tensor[(6, 14, 13), bool] */
}

def @func_5409() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %402 = @func_2546() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %403 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %404 = %402.0;
  %405 = %403.0;
  (%404, %405)
}

def @func_957() -> (Tensor[(2, 16, 9), float64],) {
  %406 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %407 = %406.0;
  (%407,)
}

def @func_8692() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %408 = @func_5258() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %409 = @func_2927() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %410 = %408.0;
  %411 = %409.0;
  (%410, %411)
}

def @func_5872(%var_5855: Tensor[(16, 16, 16), uint32], %var_5856: Tensor[(16, 16, 16), uint32]) -> (Tensor[(16, 16, 16), bool], Tensor[(16, 16, 16), float64], Tensor[(2, 16, 9), bool]) {
  %412 = cast(%var_5856, dtype="bool") /* ty=Tensor[(16, 16, 16), bool] */;
  %413 = shape_of(%var_5855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_5855, dtype="bool") /* ty=Tensor[(16, 16, 16), bool] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %416 = cast(%var_5856, dtype="float64") /* ty=Tensor[(16, 16, 16), float64] */;
  %417 = @func_3958() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
  %418 = greater_equal(%414, %415) /* ty=Tensor[(16, 16, 16), bool] */;
  %419 = atan(%416) /* ty=Tensor[(16, 16, 16), float64] */;
  %420 = %417.0;
  (%418, %419, %420)
}

def @func_8520() -> (Tensor[(2, 16, 9), float64],) {
  %421 = @func_3541() /* ty=Tensor[(2, 16, 9), float64] */;
  (%421,)
}

def @func_8823(%var_8821: Tensor[(108), int32]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(108), int32]) {
  %422 = cast(%var_8821, dtype="int32") /* ty=Tensor[(108), int32] */;
  %423 = reshape(%422, newshape=[108]) /* ty=Tensor[(108), int32] */;
  %424 = @func_4835(%423) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(108), int32], Tensor[(2, 16, 9), float64]) */;
  %425 = @func_2813() /* ty=Tensor[(2, 16, 9), float64] */;
  %426 = @func_7651() /* ty=Tensor[(2, 16, 9), float64] */;
  %427 = %424.3;
  (%425, %426, %427, %var_8821)
}

def @func_1872() -> (Tensor[(2, 16, 9), float64],) {
  %428 = @func_1600() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %429 = %428.0;
  (%429,)
}

def @func_4122(%var_4114: Tensor[(7, 12, 16), float32]) -> (Tensor[(7, 12, 16), float32],) {
  %430 = cast(%var_4114, dtype="float32") /* ty=Tensor[(7, 12, 16), float32] */;
  %431 = cos(%430) /* ty=Tensor[(7, 12, 16), float32] */;
  (%431,)
}

def @func_2927() -> (Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %432 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %433 = cast(meta[relay.Constant][19] /* ty=Tensor[(1050), uint32] */, dtype="uint32") /* ty=Tensor[(1050), uint32] */;
  %434 = reshape(%433, newshape=[10, 15, 7]) /* ty=Tensor[(10, 15, 7), uint32] */;
  %435 = @func_2401(%434) /* ty=(Tensor[(10, 15, 7), float32],) */;
  %436 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %437 = %436.3;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %439 = @func_1433() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %440 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %441 = %432.0;
  %442 = %435.0;
  %443 = atanh(%438) /* ty=Tensor[(2, 16, 9), float64] */;
  %444 = %439.0;
  %445 = %440.0;
  (%441, %442, meta[relay.Constant][19] /* ty=Tensor[(1050), uint32] */, %443, %444, %445)
}

def @func_2426() -> (Tensor[(2, 16, 9), float64],) {
  %446 = @func_788() /* ty=Tensor[(2, 16, 9), float64] */;
  (%446,)
}

def @func_2825() -> (Tensor[(2, 16, 9), float64],) {
  %447 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %448 = %447.0;
  (%448,)
}

def @func_6741() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) {
  %449 = @func_1380() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %450 = @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
  %451 = %449.0;
  %452 = %450.0;
  (%451, %452)
}

def @func_7393() -> Tensor[(2, 16, 9), float64] {
  %453 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %453.0
}

def @func_292() -> (Tensor[(2, 16, 9), float64],) {
  %454 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
  (%454,)
}

def @func_8734() -> Tensor[(2, 16, 9), float64] {
  %455 = @func_8024() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %455.0
}

def @func_4062() -> (Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) {
  %456 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  %457 = @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %458 = %457.0;
  %459 = cast(%458, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
  %460 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%456, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %463 = logical_or(%461, %462) /* ty=Tensor[(2, 16, 9), bool] */;
  %464 = @func_3541() /* ty=Tensor[(2, 16, 9), float64] */;
  (%463, %464)
}

def @func_9055(%var_9050: uint32, %var_9051: Tensor[(13, 9, 14), uint32]) -> Tensor[(13, 9, 14), uint32] {
  %465 = cast(%var_9050, dtype="uint32") /* ty=uint32 */;
  %466 = cast(%var_9051, dtype="uint32") /* ty=Tensor[(13, 9, 14), uint32] */;
  bitwise_and(%465, %466) /* ty=Tensor[(13, 9, 14), uint32] */
}

def @func_1940() -> Tensor[(2, 16, 9), float64] {
  %467 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %467.0
}

def @func_3356() -> Tensor[(2, 16, 9), float64] {
  %468 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %468.0
}

def @func_5615() -> (Tensor[(2, 16, 9), float64], Tensor[(1050), uint32]) {
  %469 = @func_4318() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %470 = @func_2927() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %471 = %469.1;
  %472 = %470.2;
  (%471, %472)
}

def @func_7847() -> Tensor[(2, 16, 9), float64] {
  %473 = @func_4087() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %473.1
}

def @func_5541(%var_5508: Tensor[(320, 1), uint8]) -> (Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), int64], Tensor[(2, 16, 9), float64]) {
  %474 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %475 = @func_4087() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %476 = @func_4398() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float64], uint64) */;
  %477 = @func_1380() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %478 = cast(%var_5508, dtype="uint8") /* ty=Tensor[(320, 1), uint8] */;
  %479 = reshape(%478, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), uint8] */;
  %480 = @func_2062(%479) /* ty=Tensor[(5, 8, 8), uint8] */;
  %481 = cast(%480, dtype="uint8") /* ty=Tensor[(5, 8, 8), uint8] */;
  %482 = reshape(%481, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), uint8] */;
  %483 = @func_2062(%482) /* ty=Tensor[(5, 8, 8), uint8] */;
  %484 = cast(%480, dtype="int64") /* ty=Tensor[(5, 8, 8), int64] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="int64") /* ty=Tensor[(5, 8, 8), int64] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %488 = %474.2;
  %489 = %475.0;
  %490 = %476.3;
  %491 = %477.0;
  %492 = bitwise_or(%486, %487) /* ty=Tensor[(5, 8, 8), int64] */;
  %493 = @func_609() /* ty=Tensor[(2, 16, 9), float64] */;
  (%488, %489, %490, %var_5508, %491, %492, %493)
}

def @func_8855() -> Tensor[(2, 16, 9), int8] {
  %494 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %494.2
}

def @func_8491(%var_8469: Tensor[(2, 7, 11), float32]) -> (Tensor[(2, 7, 11), float32], Tensor[(9, 7, 9), bool], Tensor[(567), uint64]) {
  %495 = cast(%var_8469, dtype="float32") /* ty=Tensor[(2, 7, 11), float32] */;
  %496 = cast(meta[relay.Constant][20] /* ty=Tensor[(567), float32] */, dtype="float32") /* ty=Tensor[(567), float32] */;
  %497 = cast(meta[relay.Constant][20] /* ty=Tensor[(567), float32] */, dtype="float32") /* ty=Tensor[(567), float32] */;
  %498 = reshape(%496, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), float32] */;
  %499 = reshape(%497, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), float32] */;
  %500 = @func_2787(%498, %499) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(18, 6), int32], Tensor[(9, 7, 9), bool], Tensor[(9, 7, 9), float64]) */;
  %501 = cast(meta[relay.Constant][21] /* ty=Tensor[(567), float32] */, dtype="uint64") /* ty=Tensor[(567), uint64] */;
  %502 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(567), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %503 = cast(meta[relay.Constant][20] /* ty=Tensor[(567), float32] */, dtype="uint64") /* ty=Tensor[(567), uint64] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %505 = sqrt(%495) /* ty=Tensor[(2, 7, 11), float32] */;
  %506 = %500.2;
  %507 = subtract(%503, %504) /* ty=Tensor[(567), uint64] */;
  (%505, %506, %507)
}

def @func_7677() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %508 = @func_6763() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %509 = @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %510 = @func_5566() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %511 = %508.0;
  %512 = %509.1;
  %513 = %510.0;
  (%511, %512, %513)
}

def @func_3541() -> Tensor[(2, 16, 9), float64] {
  %514 = @func_580() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %514.0
}

def @func_7372() -> (Tensor[(2, 16, 9), float64],) {
  %515 = @func_1053() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %516 = %515.2;
  (%516,)
}

def @func_4778(%var_4734: Tensor[(6, 8, 4), uint8]) -> (Tensor[(6, 8, 4), uint8], Tensor[(6, 8, 4), bool], Tensor[(2, 16, 9), float64]) {
  %517 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 8, 4), uint8] */, dtype="uint8") /* ty=Tensor[(6, 8, 4), uint8] */;
  %518 = shape_of(%var_4734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%var_4734, dtype="uint8") /* ty=Tensor[(6, 8, 4), uint8] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %521 = cast(%var_4734, dtype="bool") /* ty=Tensor[(6, 8, 4), bool] */;
  %522 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(6, 8, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 8, 4), uint8] */, dtype="bool") /* ty=Tensor[(6, 8, 4), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = @func_2583() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %526 = add(%519, %520) /* ty=Tensor[(6, 8, 4), uint8] */;
  %527 = greater_equal(%523, %524) /* ty=Tensor[(6, 8, 4), bool] */;
  %528 = %525.0;
  (%526, %527, %528)
}

def @func_7590() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(168, 3), int64], Tensor[(2, 16, 9), float64]) {
  %529 = @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
  %530 = cast(meta[relay.Constant][23] /* ty=Tensor[(168, 1), bool] */, dtype="bool") /* ty=Tensor[(168, 1), bool] */;
  %531 = cast(meta[relay.Constant][23] /* ty=Tensor[(168, 1), bool] */, dtype="bool") /* ty=Tensor[(168, 1), bool] */;
  %532 = reshape(%530, newshape=[7, 8, 3]) /* ty=Tensor[(7, 8, 3), bool] */;
  %533 = reshape(%531, newshape=[7, 8, 3]) /* ty=Tensor[(7, 8, 3), bool] */;
  %534 = @func_7317(%532, %533) /* ty=(Tensor[(7, 8, 3), bool], Tensor[(2, 16, 9), float64], Tensor[(7, 8, 3), uint32]) */;
  %535 = cast(meta[relay.Constant][23] /* ty=Tensor[(168, 1), bool] */, dtype="int64") /* ty=Tensor[(168, 1), int64] */;
  %536 = cast(meta[relay.Constant][24] /* ty=Tensor[(168, 3), bool] */, dtype="int64") /* ty=Tensor[(168, 3), int64] */;
  %537 = @func_5566() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %538 = %529.1;
  %539 = %534.1;
  %540 = add(%535, %536) /* ty=Tensor[(168, 3), int64] */;
  %541 = %537.0;
  (%538, %539, %540, %541)
}

def @func_5164(%var_5111: Tensor[(10, 12, 16), int64], %var_5125: Tensor[(288), float32], %var_5154: Tensor[(3136), uint64]) -> (Tensor[(2, 16, 9), bool], Tensor[(288), float32], Tensor[(10, 12, 16), float32], Tensor[(2, 16, 9), float64], uint64, Tensor[(3136), uint64]) {
  %542 = cast(%var_5125, dtype="float32") /* ty=Tensor[(288), float32] */;
  %543 = reshape(%542, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float32] */;
  %544 = @func_1536(%543) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %545 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 12, 16), int64] */, dtype="int64") /* ty=Tensor[(10, 12, 16), int64] */;
  %546 = shape_of(%var_5111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%var_5111, dtype="int64") /* ty=Tensor[(10, 12, 16), int64] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %549 = left_shift(%547, %548) /* ty=Tensor[(10, 12, 16), int64] */;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(10, 12, 16), float32] */;
  %551 = cast(%var_5125, dtype="float64") /* ty=Tensor[(288), float64] */;
  %552 = cast(meta[relay.Constant][26] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %553 = cast(%var_5154, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %554 = cast(%var_5154, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %555 = reshape(%551, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %556 = reshape(%552, newshape=[]) /* ty=uint64 */;
  %557 = reshape(%553, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %558 = reshape(%554, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %559 = @func_1278(%555, %556, %557, %558) /* ty=(Tensor[(2, 16, 9), int32], Tensor[(16, 14, 14), bool], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32], Tensor[(196, 16), int64], Tensor[(196, 16), bool], Tensor[(196, 16), float64], Tensor[(2, 16, 9), float64]) */;
  %560 = %544.0;
  %561 = sin(%550) /* ty=Tensor[(10, 12, 16), float32] */;
  %562 = %559.7;
  (%560, %var_5125, %561, %562, meta[relay.Constant][26] /* ty=uint64 */, %var_5154)
}

def @func_1652() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %563 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %564 = @func_509() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32]) */;
  %565 = %563.0;
  %566 = @func_609() /* ty=Tensor[(2, 16, 9), float64] */;
  %567 = %564.0;
  (%565, %566, %567)
}

def @func_4265() -> (Tensor[(2, 16, 9), float64], Tensor[(1386), int8], Tensor[(9, 14, 11), bool]) {
  %568 = @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %569 = cast(meta[relay.Constant][27] /* ty=Tensor[(1386), int8] */, dtype="int8") /* ty=Tensor[(1386), int8] */;
  %570 = cast(meta[relay.Constant][27] /* ty=Tensor[(1386), int8] */, dtype="int8") /* ty=Tensor[(1386), int8] */;
  %571 = reshape(%569, newshape=[9, 14, 11]) /* ty=Tensor[(9, 14, 11), int8] */;
  %572 = reshape(%570, newshape=[9, 14, 11]) /* ty=Tensor[(9, 14, 11), int8] */;
  %573 = @func_2370(%571, %572) /* ty=(Tensor[(9, 14, 11), int8],) */;
  %574 = %573.0;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(9, 14, 11), float64] */;
  %576 = rsqrt(%575) /* ty=Tensor[(9, 14, 11), float64] */;
  %577 = cast(%574, dtype="bool") /* ty=Tensor[(9, 14, 11), bool] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="bool") /* ty=Tensor[(9, 14, 11), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %581 = %568.1;
  %582 = greater_equal(%579, %580) /* ty=Tensor[(9, 14, 11), bool] */;
  (%581, meta[relay.Constant][27] /* ty=Tensor[(1386), int8] */, %582)
}

def @func_1771(%var_1757: Tensor[(6, 12, 2), int8], %var_1758: Tensor[(6, 12, 2), int8]) -> (Tensor[(6, 12, 2), bool], Tensor[(2, 16, 9), float64]) {
  %583 = cast(%var_1758, dtype="bool") /* ty=Tensor[(6, 12, 2), bool] */;
  %584 = shape_of(%var_1757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%var_1757, dtype="bool") /* ty=Tensor[(6, 12, 2), bool] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %587 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %588 = equal(%585, %586) /* ty=Tensor[(6, 12, 2), bool] */;
  %589 = %587.0;
  (%588, %589)
}

def @func_8761() -> (Tensor[(2, 16, 9), float64],) {
  %590 = @func_6763() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %591 = %590.0;
  (%591,)
}

def @func_2321() -> Tensor[(2, 16, 9), float64] {
  %592 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %592.0
}

def @func_2062(%var_2056: Tensor[(5, 8, 8), uint8]) -> Tensor[(5, 8, 8), uint8] {
  %593 = cast(%var_2056, dtype="uint8") /* ty=Tensor[(5, 8, 8), uint8] */;
  %594 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(5, 8, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 8, 8), uint8] */, dtype="uint8") /* ty=Tensor[(5, 8, 8), uint8] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%595, %596) /* ty=Tensor[(5, 8, 8), uint8] */
}

def @func_7612() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3136), uint64]) {
  %597 = @func_5826() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %598 = cast(meta[relay.Constant][29] /* ty=Tensor[(3136), uint64] */, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %599 = reshape(%598, newshape=[3136]) /* ty=Tensor[(3136), uint64] */;
  %600 = @func_6518(%599) /* ty=(Tensor[(2, 16, 9), float64], uint64, Tensor[(1, 1920), int64], Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) */;
  %601 = %597.1;
  %602 = %600.4;
  (%601, %602, meta[relay.Constant][29] /* ty=Tensor[(3136), uint64] */)
}

def @func_1160(%var_1146: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32]) {
  %603 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  %604 = cast(%var_1146, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %608 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %609 = %608.3;
  %610 = cast(%609, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %611 = divide(%606, %607) /* ty=Tensor[(2, 16, 9), float32] */;
  %612 = log(%610) /* ty=Tensor[(2, 16, 9), float32] */;
  (%611, %612)
}

def @func_1107(%var_1090: uint64, %var_1091: Tensor[(16, 14, 14), uint64]) -> Tensor[(16, 14, 14), bool] {
  %613 = cast(%var_1090, dtype="bool") /* ty=bool */;
  %614 = cast(%var_1091, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  not_equal(%613, %614) /* ty=Tensor[(16, 14, 14), bool] */
}

def @func_5566() -> (Tensor[(2, 16, 9), float64],) {
  %615 = @func_4087() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %616 = %615.1;
  (%616,)
}

def @func_609() -> Tensor[(2, 16, 9), float64] {
  @func_270() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_5258() -> (Tensor[(2, 16, 9), float64],) {
  %617 = @func_1860() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) */;
  %618 = %617.0;
  (%618,)
}

def @func_6240() -> Tensor[(2, 16, 9), float64] {
  @func_3356() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8395(%var_8393: Tensor[(288), float64]) -> (Tensor[(320), uint8], Tensor[(2, 16, 9), uint64], Tensor[(288), float64]) {
  %619 = @func_4210() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), uint8], Tensor[(320), uint8]) */;
  %620 = cast(%var_8393, dtype="float64") /* ty=Tensor[(288), float64] */;
  %621 = reshape(%620, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %622 = @func_2694(%621) /* ty=(Tensor[(2, 16, 9), uint64],) */;
  %623 = %619.2;
  %624 = %622.0;
  (%623, %624, %var_8393)
}

def @func_6460() -> Tensor[(2, 16, 9), float64] {
  %625 = @func_3833() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %625.0
}

def @func_3214() -> (Tensor[(2, 16, 9), float64],) {
  %626 = @func_2321() /* ty=Tensor[(2, 16, 9), float64] */;
  (%626,)
}

def @func_3786() -> (Tensor[(2, 16, 9), float64],) {
  %627 = @func_1053() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %628 = %627.0;
  (%628,)
}

def @func_5187() -> Tensor[(8, 2, 5), float64] {
  %629 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 2, 5), float64] */;
  asinh(%629) /* ty=Tensor[(8, 2, 5), float64] */
}

def @func_1860() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) {
  %630 = @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %633 = reshape(%632, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float32] */;
  %634 = @func_1536(%633) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %635 = %634.0;
  (%631, %635)
}

def @func_4398() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float64], uint64) {
  %636 = @func_1380() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %637 = @func_1940() /* ty=Tensor[(2, 16, 9), float64] */;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %639 = reshape(%638, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %640 = @func_1160(%639) /* ty=(Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32]) */;
  %641 = cast(meta[relay.Constant][31] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %642 = reshape(%641, newshape=[]) /* ty=uint64 */;
  %643 = @func_3647(%642) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) */;
  %644 = %636.0;
  %645 = %640.1;
  %646 = %643.0;
  (%637, %644, %645, %646, meta[relay.Constant][31] /* ty=uint64 */)
}

def @func_653() -> (Tensor[(2, 16, 9), float64],) {
  %647 = @func_609() /* ty=Tensor[(2, 16, 9), float64] */;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %649 = rsqrt(%648) /* ty=Tensor[(2, 16, 9), float64] */;
  (%649,)
}

def @func_6134() -> Tensor[(2, 16, 9), float64] {
  %650 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %650.0
}

def @func_5285() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050, 1), uint32]) {
  %651 = @func_3833() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %652 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %653 = cast(meta[relay.Constant][32] /* ty=Tensor[(1050, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1050, 1), uint32] */;
  %654 = reshape(%653, newshape=[10, 15, 7]) /* ty=Tensor[(10, 15, 7), uint32] */;
  %655 = @func_2401(%654) /* ty=(Tensor[(10, 15, 7), float32],) */;
  %656 = %651.0;
  %657 = %652.0;
  %658 = %655.0;
  (%656, %657, %658, meta[relay.Constant][32] /* ty=Tensor[(1050, 1), uint32] */)
}

def @func_7824(%var_7799: Tensor[(5, 12, 2), int8]) -> Tensor[(5, 12, 2), bool] {
  %659 = cast(%var_7799, dtype="bool") /* ty=Tensor[(5, 12, 2), bool] */;
  %660 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(5, 12, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 12, 2), int8] */, dtype="bool") /* ty=Tensor[(5, 12, 2), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%661, %662) /* ty=Tensor[(5, 12, 2), bool] */
}

def @func_270() -> Tensor[(2, 16, 9), float64] {
  %663 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  acos(%663) /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_2948(%var_2945: Tensor[(3, 12, 13), float64]) -> Tensor[(3, 12, 13), float64] {
  %664 = cast(%var_2945, dtype="float64") /* ty=Tensor[(3, 12, 13), float64] */;
  log(%664) /* ty=Tensor[(3, 12, 13), float64] */
}

def @func_3988() -> Tensor[(2, 16, 9), float64] {
  %665 = @func_3389() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %666 = %665.0;
  %667 = cast(%666, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  sinh(%667) /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_2546() -> (Tensor[(2, 16, 9), float64],) {
  %668 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %669 = %668.0;
  (%669,)
}

def @func_4137() -> Tensor[(2, 16, 9), float64] {
  %670 = @func_2583() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %670.0
}

def @func_6591() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %671 = @func_580() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %672 = @func_1053() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %673 = %671.0;
  %674 = %672.2;
  (%673, %674)
}

def @func_8534(%var_8527: Tensor[(5, 12, 8), int64]) -> Tensor[(5, 12, 8), int64] {
  %675 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 12, 8), int64] */, dtype="int64") /* ty=Tensor[(5, 12, 8), int64] */;
  %676 = shape_of(%var_8527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%var_8527, dtype="int64") /* ty=Tensor[(5, 12, 8), int64] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%677, %678) /* ty=Tensor[(5, 12, 8), int64] */
}

def @func_6321(%var_6253: Tensor[(18), float64], %var_6304: Tensor[(3, 6, 11), float32]) -> (Tensor[(2, 16, 9), float64], Tensor[(18), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 6, 11), uint16]) {
  %679 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %680 = cast(%var_6253, dtype="float64") /* ty=Tensor[(18), float64] */;
  %681 = reshape(%680, newshape=[3, 6, 1]) /* ty=Tensor[(3, 6, 1), float64] */;
  %682 = @func_6026(%681) /* ty=(Tensor[(3, 6, ?), int8], Tensor[(2, 16, 9), float64], Tensor[(3, 6, ?), int16]) */;
  %683 = %682.2;
  %684 = cast(%683, dtype="float64") /* ty=Tensor[(3, 6, ?), float64] */;
  %685 = sqrt(%684) /* ty=Tensor[(3, 6, ?), float64] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(3, 6, ?), float32] */;
  %687 = exp(%686) /* ty=Tensor[(3, 6, ?), float32] */;
  %688 = cast(%687, dtype="uint16") /* ty=Tensor[(3, 6, ?), uint16] */;
  %689 = cast(%var_6304, dtype="uint16") /* ty=Tensor[(3, 6, 11), uint16] */;
  %690 = @func_3541() /* ty=Tensor[(2, 16, 9), float64] */;
  %691 = %679.0;
  %692 = bitwise_or(%688, %689) /* ty=Tensor[(3, 6, 11), uint16] */;
  (%690, %var_6253, %691, %692)
}

def @func_8912() -> Tensor[(2, 16, 9), float64] {
  @func_6134() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_5846(%var_5839: uint64, %var_5840: Tensor[(6, 14, 1), uint64]) -> Tensor[(6, 14, 1), uint64] {
  %693 = cast(%var_5839, dtype="uint64") /* ty=uint64 */;
  %694 = cast(%var_5840, dtype="uint64") /* ty=Tensor[(6, 14, 1), uint64] */;
  left_shift(%693, %694) /* ty=Tensor[(6, 14, 1), uint64] */
}

def @func_6544(%var_6537: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), uint8], Tensor[(2, 16, 9), float64]) {
  %695 = @func_5615() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(1050), uint32]) */;
  %696 = @func_2927() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %697 = %696.4;
  %698 = cast(%var_6537, dtype="uint8") /* ty=Tensor[(2, 16, 9), uint8] */;
  %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%697, dtype="uint8") /* ty=Tensor[(2, 16, 9), uint8] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %702 = @func_2825() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %703 = %695.0;
  %704 = bitwise_or(%700, %701) /* ty=Tensor[(2, 16, 9), uint8] */;
  %705 = %702.0;
  (%703, %704, %705)
}

def @func_1600() -> (Tensor[(2, 16, 9), float64],) {
  %706 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  (%706,)
}

def @func_1724(%var_1684: Tensor[(15, 2, 7), float64]) -> (Tensor[(288), float32], Tensor[(2, 16, 9), float64], Tensor[(15, 2, 7), float64], Tensor[(15, 2, 7), uint64]) {
  %707 = cast(meta[relay.Constant][36] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %708 = reshape(%707, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float32] */;
  %709 = @func_1536(%708) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %710 = %709.3;
  %711 = cast(%710, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %712 = cast(%var_1684, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %713 = exp(%712) /* ty=Tensor[(15, 2, 7), float64] */;
  %714 = cast(%713, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %715 = cast(%var_1684, dtype="uint64") /* ty=Tensor[(15, 2, 7), uint64] */;
  %716 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%713, dtype="uint64") /* ty=Tensor[(15, 2, 7), uint64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %719 = logical_xor(%717, %718) /* ty=Tensor[(15, 2, 7), uint64] */;
  %720 = cast(%713, dtype="uint64") /* ty=Tensor[(15, 2, 7), uint64] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="uint64") /* ty=Tensor[(15, 2, 7), uint64] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %724 = sqrt(%711) /* ty=Tensor[(2, 16, 9), float64] */;
  %725 = cos(%714) /* ty=Tensor[(15, 2, 7), float64] */;
  %726 = bitwise_or(%722, %723) /* ty=Tensor[(15, 2, 7), uint64] */;
  (meta[relay.Constant][36] /* ty=Tensor[(288), float32] */, %724, %725, %726)
}

def @func_3289() -> (Tensor[(2, 16, 9), float64],) {
  %727 = @func_2321() /* ty=Tensor[(2, 16, 9), float64] */;
  (%727,)
}

def @func_5826() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %728 = @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %729 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %730 = %728.1;
  %731 = %729.0;
  (%730, %731)
}

def @func_4540() -> (Tensor[(2, 16, 9), float64],) {
  %732 = @func_1600() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %733 = %732.0;
  (%733,)
}

def @func_681() -> Tensor[(2, 16, 9), float64] {
  %734 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %734.0
}

def @func_6773() -> Tensor[(2, 16, 9), float64] {
  %735 = @func_4343() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %735.1
}

def @func_1210() -> Tensor[(2, 16, 9), float64] {
  %736 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %736.0
}

def @func_402() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) {
  %737 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %738 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %740 = cast(%738, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %741 = tan(%740) /* ty=Tensor[(2, 16, 9), float64] */;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %743 = asin(%742) /* ty=Tensor[(2, 16, 9), float32] */;
  %744 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %745 = %744.0;
  %746 = cast(%745, dtype="int8") /* ty=Tensor[(2, 16, 9), int8] */;
  %747 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%743, dtype="int8") /* ty=Tensor[(2, 16, 9), int8] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %750 = cast(%743, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %751 = %737.0;
  %752 = sigmoid(%739) /* ty=Tensor[(2, 16, 9), float64] */;
  %753 = bitwise_xor(%748, %749) /* ty=Tensor[(2, 16, 9), int8] */;
  %754 = sin(%750) /* ty=Tensor[(2, 16, 9), float32] */;
  (%751, %752, %753, %754)
}

def @func_8313() -> (Tensor[(2, 16, 9), float64],) {
  %755 = @func_5318() /* ty=Tensor[(2, 16, 9), float64] */;
  (%755,)
}

def @func_2370(%var_2359: Tensor[(9, 14, 11), int8], %var_2360: Tensor[(9, 14, 11), int8]) -> (Tensor[(9, 14, 11), int8],) {
  %756 = cast(%var_2360, dtype="int8") /* ty=Tensor[(9, 14, 11), int8] */;
  %757 = shape_of(%var_2359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%var_2359, dtype="int8") /* ty=Tensor[(9, 14, 11), int8] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %760 = multiply(%758, %759) /* ty=Tensor[(9, 14, 11), int8] */;
  (%760,)
}

def @func_5717() -> Tensor[(2, 16, 9), float64] {
  %761 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %761.0
}

def @func_7742() -> (Tensor[(2, 16, 9), float64], Tensor[(1260), float32], uint64) {
  %762 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %763 = cast(meta[relay.Constant][37] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %764 = reshape(%763, newshape=[]) /* ty=uint64 */;
  %765 = @func_2208(%764) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(3136), uint64], Tensor[(1260), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float32]) */;
  %766 = %762.0;
  %767 = %765.2;
  (%766, %767, meta[relay.Constant][37] /* ty=uint64 */)
}

def @func_4087() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %768 = @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
  %769 = @func_3389() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %770 = %768.1;
  %771 = %769.0;
  (%770, %771)
}

def @func_5602(%var_5583: bool, %var_5584: Tensor[(1, 10, 3), bool]) -> (Tensor[(1, 10, 3), bool],) {
  %772 = cast(%var_5583, dtype="bool") /* ty=bool */;
  %773 = cast(%var_5584, dtype="bool") /* ty=Tensor[(1, 10, 3), bool] */;
  %774 = logical_and(%772, %773) /* ty=Tensor[(1, 10, 3), bool] */;
  (%774,)
}

def @func_3674(%var_3661: Tensor[(10, 8, 4), float32]) -> (Tensor[(10, 8, 4), int8],) {
  %775 = cast(%var_3661, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
  %776 = asinh(%775) /* ty=Tensor[(10, 8, 4), float32] */;
  %777 = cast(%var_3661, dtype="int8") /* ty=Tensor[(10, 8, 4), int8] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="int8") /* ty=Tensor[(10, 8, 4), int8] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %781 = bitwise_and(%779, %780) /* ty=Tensor[(10, 8, 4), int8] */;
  (%781,)
}

def @func_2610(%var_2586: Tensor[(3, 9, 16), float64]) -> (Tensor[(2, 16, 9), float64], Tensor[(3, 9, 16), uint64]) {
  %782 = @func_1600() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %783 = cast(%var_2586, dtype="float64") /* ty=Tensor[(3, 9, 16), float64] */;
  %784 = rsqrt(%783) /* ty=Tensor[(3, 9, 16), float64] */;
  %785 = cast(%784, dtype="uint64") /* ty=Tensor[(3, 9, 16), uint64] */;
  %786 = shape_of(%var_2586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%var_2586, dtype="uint64") /* ty=Tensor[(3, 9, 16), uint64] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %789 = %782.0;
  %790 = bitwise_or(%787, %788) /* ty=Tensor[(3, 9, 16), uint64] */;
  (%789, %790)
}

def @func_7651() -> Tensor[(2, 16, 9), float64] {
  %791 = @func_7372() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %791.0
}

def @func_2040(%var_2015: Tensor[(14, 9, 10), float32], %var_2016: Tensor[(14, 9, 10), float32], %var_2035: Tensor[(288), float64], %var_2036: uint64, %var_2037: Tensor[(3136), uint64]) -> (Tensor[(14, 9, 10), uint64], Tensor[(196, 16), float64], Tensor[(288), float64], uint64, Tensor[(3136), uint64]) {
  %792 = cast(%var_2016, dtype="float32") /* ty=Tensor[(14, 9, 10), float32] */;
  %793 = shape_of(%var_2015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%var_2015, dtype="float32") /* ty=Tensor[(14, 9, 10), float32] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %796 = maximum(%794, %795) /* ty=Tensor[(14, 9, 10), float32] */;
  %797 = cast(%796, dtype="uint64") /* ty=Tensor[(14, 9, 10), uint64] */;
  %798 = shape_of(%var_2015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %799 = cast(%var_2015, dtype="uint64") /* ty=Tensor[(14, 9, 10), uint64] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %801 = cast(%var_2035, dtype="float64") /* ty=Tensor[(288), float64] */;
  %802 = cast(%var_2036, dtype="uint64") /* ty=uint64 */;
  %803 = cast(%var_2037, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %804 = cast(%var_2037, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %805 = reshape(%801, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %806 = reshape(%802, newshape=[]) /* ty=uint64 */;
  %807 = reshape(%803, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %808 = reshape(%804, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %809 = @func_1278(%805, %806, %807, %808) /* ty=(Tensor[(2, 16, 9), int32], Tensor[(16, 14, 14), bool], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32], Tensor[(196, 16), int64], Tensor[(196, 16), bool], Tensor[(196, 16), float64], Tensor[(2, 16, 9), float64]) */;
  %810 = bitwise_and(%799, %800) /* ty=Tensor[(14, 9, 10), uint64] */;
  %811 = %809.6;
  (%810, %811, %var_2035, %var_2036, %var_2037)
}

def @func_6763() -> (Tensor[(2, 16, 9), float64],) {
  %812 = @func_5258() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %813 = %812.0;
  (%813,)
}

def @func_1278(%var_1220: Tensor[(2, 16, 9), float64], %var_1241: uint64, %var_1242: Tensor[(196, 16), uint64], %var_1262: Tensor[(196, 16), uint64]) -> (Tensor[(2, 16, 9), int32], Tensor[(16, 14, 14), bool], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32], Tensor[(196, 16), int64], Tensor[(196, 16), bool], Tensor[(196, 16), float64], Tensor[(2, 16, 9), float64]) {
  %814 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %815 = %814.0;
  %816 = cast(%var_1220, dtype="int32") /* ty=Tensor[(2, 16, 9), int32] */;
  %817 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%815, dtype="int32") /* ty=Tensor[(2, 16, 9), int32] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %820 = cast(%var_1241, dtype="uint64") /* ty=uint64 */;
  %821 = cast(%var_1242, dtype="uint64") /* ty=Tensor[(196, 16), uint64] */;
  %822 = reshape(%820, newshape=[]) /* ty=uint64 */;
  %823 = reshape(%821, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), uint64] */;
  %824 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %825 = multiply(%818, %819) /* ty=Tensor[(2, 16, 9), int32] */;
  %826 = cast(%825, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %827 = reshape(%826, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %828 = @func_1160(%827) /* ty=(Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32]) */;
  %829 = cast(%var_1242, dtype="float32") /* ty=Tensor[(196, 16), float32] */;
  %830 = sinh(%829) /* ty=Tensor[(196, 16), float32] */;
  %831 = cast(%830, dtype="int64") /* ty=Tensor[(196, 16), int64] */;
  %832 = cast(%var_1241, dtype="int64") /* ty=int64 */;
  %833 = cast(%var_1262, dtype="bool") /* ty=Tensor[(196, 16), bool] */;
  %834 = shape_of(%var_1242, dtype="int32") /* ty=Tensor[(2), int32] */;
  %835 = cast(%var_1242, dtype="bool") /* ty=Tensor[(196, 16), bool] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %837 = cast(%830, dtype="float64") /* ty=Tensor[(196, 16), float64] */;
  %838 = cast(%815, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %839 = @func_1107(%822, %823) /* ty=Tensor[(16, 14, 14), bool] */;
  %840 = %824.3;
  %841 = %828.0;
  %842 = maximum(%831, %832) /* ty=Tensor[(196, 16), int64] */;
  %843 = not_equal(%835, %836) /* ty=Tensor[(196, 16), bool] */;
  %844 = sigmoid(%837) /* ty=Tensor[(196, 16), float64] */;
  %845 = asinh(%838) /* ty=Tensor[(2, 16, 9), float64] */;
  (%825, %839, %840, %841, %842, %843, %844, %845)
}

def @func_3647(%var_3624: uint64) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) {
  %846 = @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %847 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
  %848 = cast(%847, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %849 = cast(%var_3624, dtype="uint64") /* ty=uint64 */;
  %850 = cast(meta[relay.Constant][38] /* ty=Tensor[(3136), uint64] */, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %851 = cast(meta[relay.Constant][38] /* ty=Tensor[(3136), uint64] */, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %852 = reshape(%848, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %853 = reshape(%849, newshape=[]) /* ty=uint64 */;
  %854 = reshape(%850, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %855 = reshape(%851, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %856 = @func_1278(%852, %853, %854, %855) /* ty=(Tensor[(2, 16, 9), int32], Tensor[(16, 14, 14), bool], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32], Tensor[(196, 16), int64], Tensor[(196, 16), bool], Tensor[(196, 16), float64], Tensor[(2, 16, 9), float64]) */;
  %857 = @func_3102() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(9, 14, 11), int8], Tensor[(1386), int8]) */;
  %858 = %846.0;
  %859 = %856.2;
  %860 = %857.3;
  (%858, %847, %859, %var_3624, meta[relay.Constant][38] /* ty=Tensor[(3136), uint64] */, %860)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2323() -> Tensor[(2, 16, 9), float64] {
  @func_2321() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_7114() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %4 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %0 = @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
    %1 = %0.1;
    %2 = @func_3356() /* ty=Tensor[(2, 16, 9), float64] */;
    %3 = @func_3356() /* ty=Tensor[(2, 16, 9), float64] */;
    (%1, %2, %3)
  };
  %4() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_5617() -> (Tensor[(2, 16, 9), float64], Tensor[(1050), uint32]) {
  @func_5615() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(1050), uint32]) */
}

def @func_8763() -> (Tensor[(2, 16, 9), float64],) {
  @func_8761() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_8826(%var_8824: Tensor[(108), int32]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(108), int32]) {
  @func_8823(%var_8824) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(108), int32]) */
}

def @func_3676(%var_3675: Tensor[(10, 8, 4), float32]) -> (Tensor[(10, 8, 4), int8],) {
  %12 = fn (%var_3661: Tensor[(10, 8, 4), float32]) -> (Tensor[(10, 8, 4), int8],) {
    %5 = cast(%var_3661, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
    %6 = asinh(%5) /* ty=Tensor[(10, 8, 4), float32] */;
    %7 = cast(%var_3661, dtype="int8") /* ty=Tensor[(10, 8, 4), int8] */;
    %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%6, dtype="int8") /* ty=Tensor[(10, 8, 4), int8] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %11 = bitwise_and(%9, %10) /* ty=Tensor[(10, 8, 4), int8] */;
    (%11,)
  };
  %12(%var_3675) /* ty=(Tensor[(10, 8, 4), int8],) */
}

def @func_5320() -> Tensor[(2, 16, 9), float64] {
  @func_5318() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_3390() -> (Tensor[(2, 16, 9), float64],) {
  %14 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %13 = @func_1940() /* ty=Tensor[(2, 16, 9), float64] */;
    (%13,)
  };
  %14() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_5615() -> (Tensor[(2, 16, 9), float64], Tensor[(1050), uint32]) {
  %15 = @func_4318() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %16 = @func_2927() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %17 = %15.1;
  %18 = %16.2;
  (%17, %18)
}

def @func_1433() -> (Tensor[(2, 16, 9), float64],) {
  %19 = @func_788() /* ty=Tensor[(2, 16, 9), float64] */;
  (%19,)
}

def @func_4684(%var_4682: Tensor[(4, 14, 1), float64], %var_4683: Tensor[(4, 14, 11), float64]) -> (Tensor[(4, 14, 11), float64],) {
  @func_4680(%var_4682, %var_4683) /* ty=(Tensor[(4, 14, 11), float64],) */
}

def @func_6461() -> Tensor[(2, 16, 9), float64] {
  %21 = fn () -> Tensor[(2, 16, 9), float64] {
    %20 = @func_3833() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %20.0
  };
  %21() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_3989() -> Tensor[(2, 16, 9), float64] {
  %25 = fn () -> Tensor[(2, 16, 9), float64] {
    %22 = @func_3389() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %23 = %22.0;
    %24 = cast(%23, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
    sinh(%24) /* ty=Tensor[(2, 16, 9), float64] */
  };
  %25() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_6324(%var_6322: Tensor[(18), float64], %var_6323: Tensor[(3, 6, 11), float32]) -> (Tensor[(2, 16, 9), float64], Tensor[(18), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 6, 11), uint16]) {
  %40 = fn (%var_6253: Tensor[(18), float64], %var_6304: Tensor[(3, 6, 11), float32]) -> (Tensor[(2, 16, 9), float64], Tensor[(18), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 6, 11), uint16]) {
    %26 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %27 = cast(%var_6253, dtype="float64") /* ty=Tensor[(18), float64] */;
    %28 = reshape(%27, newshape=[3, 6, 1]) /* ty=Tensor[(3, 6, 1), float64] */;
    %29 = @func_6026(%28) /* ty=(Tensor[(3, 6, ?), int8], Tensor[(2, 16, 9), float64], Tensor[(3, 6, ?), int16]) */;
    %30 = %29.2;
    %31 = cast(%30, dtype="float64") /* ty=Tensor[(3, 6, ?), float64] */;
    %32 = sqrt(%31) /* ty=Tensor[(3, 6, ?), float64] */;
    %33 = cast(%32, dtype="float32") /* ty=Tensor[(3, 6, ?), float32] */;
    %34 = exp(%33) /* ty=Tensor[(3, 6, ?), float32] */;
    %35 = cast(%34, dtype="uint16") /* ty=Tensor[(3, 6, ?), uint16] */;
    %36 = cast(%var_6304, dtype="uint16") /* ty=Tensor[(3, 6, 11), uint16] */;
    %37 = @func_3541() /* ty=Tensor[(2, 16, 9), float64] */;
    %38 = %26.0;
    %39 = bitwise_or(%35, %36) /* ty=Tensor[(3, 6, 11), uint16] */;
    (%37, %var_6253, %38, %39)
  };
  %40(%var_6322, %var_6323) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(18), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 6, 11), uint16]) */
}

def @func_6441(%var_6440: Tensor[(1, 16, 4), float32]) -> (Tensor[(1, 16, 4), float32], Tensor[(2, 16, 9), float64]) {
  %44 = fn (%var_6422: Tensor[(1, 16, 4), float32]) -> (Tensor[(1, 16, 4), float32], Tensor[(2, 16, 9), float64]) {
    %41 = cast(%var_6422, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %42 = asin(%41) /* ty=Tensor[(1, 16, 4), float32] */;
    %43 = @func_2239() /* ty=Tensor[(2, 16, 9), float64] */;
    (%42, %43)
  };
  %44(%var_6440) /* ty=(Tensor[(1, 16, 4), float32], Tensor[(2, 16, 9), float64]) */
}

def @func_789() -> Tensor[(2, 16, 9), float64] {
  %45 = fn () -> Tensor[(2, 16, 9), float64] {
    @func_681() /* ty=Tensor[(2, 16, 9), float64] */
  };
  %45() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_2065(%var_2063: Tensor[(5, 8, 8), uint8]) -> Tensor[(5, 8, 8), uint8] {
  @func_2062(%var_2063) /* ty=Tensor[(5, 8, 8), uint8] */
}

def @func_7520(%var_7517: Tensor[(13, 11, 13), int8], %var_7518: Tensor[(13, 11, 13), int8], %var_7519: Tensor[(13, 11, 13), int8]) -> (Tensor[(13, 11, 13), float32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(13, 11, 13), float32], Tensor[(2, 16, 9), float64], Tensor[(13, 11, 13), float64]) {
  @func_7515(%var_7517, %var_7518, %var_7519) /* ty=(Tensor[(13, 11, 13), float32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(13, 11, 13), float32], Tensor[(2, 16, 9), float64], Tensor[(13, 11, 13), float64]) */
}

def @func_2040(%var_2015: Tensor[(14, 9, 10), float32], %var_2016: Tensor[(14, 9, 10), float32], %var_2035: Tensor[(288), float64], %var_2036: uint64, %var_2037: Tensor[(3136), uint64]) -> (Tensor[(14, 9, 10), uint64], Tensor[(196, 16), float64], Tensor[(288), float64], uint64, Tensor[(3136), uint64]) {
  %46 = cast(%var_2016, dtype="float32") /* ty=Tensor[(14, 9, 10), float32] */;
  %47 = shape_of(%var_2015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_2015, dtype="float32") /* ty=Tensor[(14, 9, 10), float32] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %50 = maximum(%48, %49) /* ty=Tensor[(14, 9, 10), float32] */;
  %51 = cast(%50, dtype="uint64") /* ty=Tensor[(14, 9, 10), uint64] */;
  %52 = shape_of(%var_2015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%var_2015, dtype="uint64") /* ty=Tensor[(14, 9, 10), uint64] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %55 = cast(%var_2035, dtype="float64") /* ty=Tensor[(288), float64] */;
  %56 = cast(%var_2036, dtype="uint64") /* ty=uint64 */;
  %57 = cast(%var_2037, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %58 = cast(%var_2037, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %59 = reshape(%55, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %60 = reshape(%56, newshape=[]) /* ty=uint64 */;
  %61 = reshape(%57, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %62 = reshape(%58, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %63 = @func_1278(%59, %60, %61, %62) /* ty=(Tensor[(2, 16, 9), int32], Tensor[(16, 14, 14), bool], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32], Tensor[(196, 16), int64], Tensor[(196, 16), bool], Tensor[(196, 16), float64], Tensor[(2, 16, 9), float64]) */;
  %64 = bitwise_and(%53, %54) /* ty=Tensor[(14, 9, 10), uint64] */;
  %65 = %63.6;
  (%64, %65, %var_2035, %var_2036, %var_2037)
}

def @func_5876(%var_5874: Tensor[(16, 16, 16), uint32], %var_5875: Tensor[(16, 16, 16), uint32]) -> (Tensor[(16, 16, 16), bool], Tensor[(16, 16, 16), float64], Tensor[(2, 16, 9), bool]) {
  @func_5872(%var_5874, %var_5875) /* ty=(Tensor[(16, 16, 16), bool], Tensor[(16, 16, 16), float64], Tensor[(2, 16, 9), bool]) */
}

def @func_2814() -> Tensor[(2, 16, 9), float64] {
  %69 = fn () -> Tensor[(2, 16, 9), float64] {
    %66 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %67 = %66.0;
    %68 = cast(%67, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
    log2(%68) /* ty=Tensor[(2, 16, 9), float64] */
  };
  %69() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_4345() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_4343() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_3958() -> (Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) {
  %70 = @func_1860() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) */;
  %71 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %72 = %70.1;
  %73 = %71.0;
  (%72, %73)
}

def @func_8169() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %74 = @func_5566() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %75 = @func_7677() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %76 = %74.0;
  %77 = %75.1;
  (%76, %77)
}

def @func_7848() -> Tensor[(2, 16, 9), float64] {
  %79 = fn () -> Tensor[(2, 16, 9), float64] {
    %78 = @func_4087() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %78.1
  };
  %79() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_271() -> Tensor[(2, 16, 9), float64] {
  %81 = fn () -> Tensor[(2, 16, 9), float64] {
    %80 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
    acos(%80) /* ty=Tensor[(2, 16, 9), float64] */
  };
  %81() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8823(%var_8821: Tensor[(108), int32]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(108), int32]) {
  %82 = cast(%var_8821, dtype="int32") /* ty=Tensor[(108), int32] */;
  %83 = reshape(%82, newshape=[108]) /* ty=Tensor[(108), int32] */;
  %84 = @func_4835(%83) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(108), int32], Tensor[(2, 16, 9), float64]) */;
  %85 = @func_2813() /* ty=Tensor[(2, 16, 9), float64] */;
  %86 = @func_7651() /* ty=Tensor[(2, 16, 9), float64] */;
  %87 = %84.3;
  (%85, %86, %87, %var_8821)
}

def @func_8775() -> Tensor[(2, 16, 9), float64] {
  @func_8773() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_1733() -> (Tensor[(2, 16, 9), float64],) {
  %88 = @func_617() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %89 = %88.0;
  (%89,)
}

def @func_3357() -> Tensor[(2, 16, 9), float64] {
  %91 = fn () -> Tensor[(2, 16, 9), float64] {
    %90 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %90.0
  };
  %91() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8025() -> (Tensor[(2, 16, 9), float64],) {
  %94 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %92 = @func_509() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32]) */;
    %93 = %92.0;
    (%93,)
  };
  %94() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_4087() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %95 = @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
  %96 = @func_3389() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %97 = %95.1;
  %98 = %96.0;
  (%97, %98)
}

def @func_7744() -> (Tensor[(2, 16, 9), float64], Tensor[(1260), float32], uint64) {
  @func_7742() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(1260), float32], uint64) */
}

def @func_6029(%var_6027: Tensor[(3, 6, 1), float64]) -> (Tensor[(3, 6, ?), int8], Tensor[(2, 16, 9), float64], Tensor[(3, 6, ?), int16]) {
  @func_6026(%var_6027) /* ty=(Tensor[(3, 6, ?), int8], Tensor[(2, 16, 9), float64], Tensor[(3, 6, ?), int16]) */
}

def @func_5718() -> Tensor[(2, 16, 9), float64] {
  %100 = fn () -> Tensor[(2, 16, 9), float64] {
    %99 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %99.0
  };
  %100() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_1110(%var_1108: uint64, %var_1109: Tensor[(16, 14, 14), uint64]) -> Tensor[(16, 14, 14), bool] {
  %103 = fn (%var_1090: uint64, %var_1091: Tensor[(16, 14, 14), uint64]) -> Tensor[(16, 14, 14), bool] {
    %101 = cast(%var_1090, dtype="bool") /* ty=bool */;
    %102 = cast(%var_1091, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
    not_equal(%101, %102) /* ty=Tensor[(16, 14, 14), bool] */
  };
  %103(%var_1108, %var_1109) /* ty=Tensor[(16, 14, 14), bool] */
}

def @func_1435() -> (Tensor[(2, 16, 9), float64],) {
  @func_1433() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_8085(%var_8072: Tensor[(6, 14, 13), uint64], %var_8073: Tensor[(6, 14, 13), uint64]) -> Tensor[(6, 14, 13), bool] {
  %104 = cast(%var_8073, dtype="bool") /* ty=Tensor[(6, 14, 13), bool] */;
  %105 = shape_of(%var_8072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%var_8072, dtype="bool") /* ty=Tensor[(6, 14, 13), bool] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%106, %107) /* ty=Tensor[(6, 14, 13), bool] */
}

def @func_1874() -> (Tensor[(2, 16, 9), float64],) {
  @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_3647(%var_3624: uint64) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) {
  %108 = @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %109 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %111 = cast(%var_3624, dtype="uint64") /* ty=uint64 */;
  %112 = cast(meta[relay.Constant][1] /* ty=Tensor[(3136), uint64] */, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %113 = cast(meta[relay.Constant][1] /* ty=Tensor[(3136), uint64] */, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %114 = reshape(%110, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %115 = reshape(%111, newshape=[]) /* ty=uint64 */;
  %116 = reshape(%112, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %117 = reshape(%113, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %118 = @func_1278(%114, %115, %116, %117) /* ty=(Tensor[(2, 16, 9), int32], Tensor[(16, 14, 14), bool], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32], Tensor[(196, 16), int64], Tensor[(196, 16), bool], Tensor[(196, 16), float64], Tensor[(2, 16, 9), float64]) */;
  %119 = @func_3102() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(9, 14, 11), int8], Tensor[(1386), int8]) */;
  %120 = %108.0;
  %121 = %118.2;
  %122 = %119.3;
  (%120, %109, %121, %var_3624, meta[relay.Constant][1] /* ty=Tensor[(3136), uint64] */, %122)
}

def @func_1212() -> Tensor[(2, 16, 9), float64] {
  @func_1210() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_4778(%var_4734: Tensor[(6, 8, 4), uint8]) -> (Tensor[(6, 8, 4), uint8], Tensor[(6, 8, 4), bool], Tensor[(2, 16, 9), float64]) {
  %123 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 8, 4), uint8] */, dtype="uint8") /* ty=Tensor[(6, 8, 4), uint8] */;
  %124 = shape_of(%var_4734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%var_4734, dtype="uint8") /* ty=Tensor[(6, 8, 4), uint8] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %127 = cast(%var_4734, dtype="bool") /* ty=Tensor[(6, 8, 4), bool] */;
  %128 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(6, 8, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 8, 4), uint8] */, dtype="bool") /* ty=Tensor[(6, 8, 4), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = @func_2583() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %132 = add(%125, %126) /* ty=Tensor[(6, 8, 4), uint8] */;
  %133 = greater_equal(%129, %130) /* ty=Tensor[(6, 8, 4), bool] */;
  %134 = %131.0;
  (%132, %133, %134)
}

def @func_2950(%var_2949: Tensor[(3, 12, 13), float64]) -> Tensor[(3, 12, 13), float64] {
  %136 = fn (%var_2945: Tensor[(3, 12, 13), float64]) -> Tensor[(3, 12, 13), float64] {
    %135 = cast(%var_2945, dtype="float64") /* ty=Tensor[(3, 12, 13), float64] */;
    log(%135) /* ty=Tensor[(3, 12, 13), float64] */
  };
  %136(%var_2949) /* ty=Tensor[(3, 12, 13), float64] */
}

def @func_8520() -> (Tensor[(2, 16, 9), float64],) {
  %137 = @func_3541() /* ty=Tensor[(2, 16, 9), float64] */;
  (%137,)
}

def @func_6361(%var_6359: Tensor[(14, 15, 16), float64]) -> (Tensor[(14, 15, 16), float64],) {
  @func_6358(%var_6359) /* ty=(Tensor[(14, 15, 16), float64],) */
}

def @func_2585() -> (Tensor[(2, 16, 9), float64],) {
  @func_2583() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_3290() -> (Tensor[(2, 16, 9), float64],) {
  %139 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %138 = @func_2321() /* ty=Tensor[(2, 16, 9), float64] */;
    (%138,)
  };
  %139() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_4598() -> (Tensor[(2, 16, 9), float64],) {
  @func_4596() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_5828() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_5826() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_3960() -> (Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) {
  @func_3958() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */
}

def @func_6810() -> Tensor[(2, 16, 9), float64] {
  @func_6808() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_3006() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_8997() -> Tensor[(2, 16, 9), float64] {
  @func_8995() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8857() -> Tensor[(2, 16, 9), int8] {
  @func_8855() /* ty=Tensor[(2, 16, 9), int8] */
}

def @func_3650(%var_3648: uint64) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) {
  @func_3647(%var_3648) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) */
}

def @func_5577() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %143 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %140 = @func_1433() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %141 = %140.0;
    %142 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
    (%141, %142)
  };
  %143() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_7652() -> Tensor[(2, 16, 9), float64] {
  %145 = fn () -> Tensor[(2, 16, 9), float64] {
    %144 = @func_7372() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %144.0
  };
  %145() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_4835(%var_4816: Tensor[(108), int32]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(108), int32], Tensor[(2, 16, 9), float64]) {
  %146 = cast(%var_4816, dtype="int32") /* ty=Tensor[(108), int32] */;
  %147 = cast(%var_4816, dtype="int32") /* ty=Tensor[(108), int32] */;
  %148 = reshape(%146, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
  %149 = reshape(%147, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
  %150 = @func_456(%148, %149) /* ty=(Tensor[(3, 9, 4), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %151 = @func_1210() /* ty=Tensor[(2, 16, 9), float64] */;
  %152 = %150.1;
  %153 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
  (%151, %152, %var_4816, %153)
}

def @func_5285() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050, 1), uint32]) {
  %154 = @func_3833() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %155 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %156 = cast(meta[relay.Constant][3] /* ty=Tensor[(1050, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1050, 1), uint32] */;
  %157 = reshape(%156, newshape=[10, 15, 7]) /* ty=Tensor[(10, 15, 7), uint32] */;
  %158 = @func_2401(%157) /* ty=(Tensor[(10, 15, 7), float32],) */;
  %159 = %154.0;
  %160 = %155.0;
  %161 = %158.0;
  (%159, %160, %161, meta[relay.Constant][3] /* ty=Tensor[(1050, 1), uint32] */)
}

def @func_6593() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_6591() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_2047(%var_2042: Tensor[(14, 9, 10), float32], %var_2043: Tensor[(14, 9, 10), float32], %var_2044: Tensor[(288), float64], %var_2045: uint64, %var_2046: Tensor[(3136), uint64]) -> (Tensor[(14, 9, 10), uint64], Tensor[(196, 16), float64], Tensor[(288), float64], uint64, Tensor[(3136), uint64]) {
  @func_2040(%var_2042, %var_2043, %var_2044, %var_2045, %var_2046) /* ty=(Tensor[(14, 9, 10), uint64], Tensor[(196, 16), float64], Tensor[(288), float64], uint64, Tensor[(3136), uint64]) */
}

def @func_5164(%var_5111: Tensor[(10, 12, 16), int64], %var_5125: Tensor[(288), float32], %var_5154: Tensor[(3136), uint64]) -> (Tensor[(2, 16, 9), bool], Tensor[(288), float32], Tensor[(10, 12, 16), float32], Tensor[(2, 16, 9), float64], uint64, Tensor[(3136), uint64]) {
  %162 = cast(%var_5125, dtype="float32") /* ty=Tensor[(288), float32] */;
  %163 = reshape(%162, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float32] */;
  %164 = @func_1536(%163) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %165 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 12, 16), int64] */, dtype="int64") /* ty=Tensor[(10, 12, 16), int64] */;
  %166 = shape_of(%var_5111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_5111, dtype="int64") /* ty=Tensor[(10, 12, 16), int64] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %169 = left_shift(%167, %168) /* ty=Tensor[(10, 12, 16), int64] */;
  %170 = cast(%169, dtype="float32") /* ty=Tensor[(10, 12, 16), float32] */;
  %171 = cast(%var_5125, dtype="float64") /* ty=Tensor[(288), float64] */;
  %172 = cast(meta[relay.Constant][5] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %173 = cast(%var_5154, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %174 = cast(%var_5154, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %175 = reshape(%171, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %176 = reshape(%172, newshape=[]) /* ty=uint64 */;
  %177 = reshape(%173, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %178 = reshape(%174, newshape=[196, 16]) /* ty=Tensor[(196, 16), uint64] */;
  %179 = @func_1278(%175, %176, %177, %178) /* ty=(Tensor[(2, 16, 9), int32], Tensor[(16, 14, 14), bool], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32], Tensor[(196, 16), int64], Tensor[(196, 16), bool], Tensor[(196, 16), float64], Tensor[(2, 16, 9), float64]) */;
  %180 = %164.0;
  %181 = sin(%170) /* ty=Tensor[(10, 12, 16), float32] */;
  %182 = %179.7;
  (%180, %var_5125, %181, %182, meta[relay.Constant][5] /* ty=uint64 */, %var_5154)
}

def @func_6546(%var_6545: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), uint8], Tensor[(2, 16, 9), float64]) {
  %194 = fn (%var_6537: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), uint8], Tensor[(2, 16, 9), float64]) {
    %183 = @func_5615() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(1050), uint32]) */;
    %184 = @func_2927() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %185 = %184.4;
    %186 = cast(%var_6537, dtype="uint8") /* ty=Tensor[(2, 16, 9), uint8] */;
    %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
    %188 = cast(%185, dtype="uint8") /* ty=Tensor[(2, 16, 9), uint8] */;
    %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %190 = @func_2825() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %191 = %183.0;
    %192 = bitwise_or(%188, %189) /* ty=Tensor[(2, 16, 9), uint8] */;
    %193 = %190.0;
    (%191, %192, %193)
  };
  %194(%var_6545) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), uint8], Tensor[(2, 16, 9), float64]) */
}

def @func_8761() -> (Tensor[(2, 16, 9), float64],) {
  %195 = @func_6763() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %196 = %195.0;
  (%196,)
}

def @func_2347(%var_2338: Tensor[(8, 1, 13), int8]) -> Tensor[(8, 8, 13), int8] {
  %197 = cast(%var_2338, dtype="int8") /* ty=Tensor[(8, 1, 13), int8] */;
  %198 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 8, 13), int8] */, dtype="int8") /* ty=Tensor[(8, 8, 13), int8] */;
  minimum(%197, %198) /* ty=Tensor[(8, 8, 13), int8] */
}

def @func_8350() -> Tensor[(2, 16, 9), float64] {
  @func_8348() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_293() -> (Tensor[(2, 16, 9), float64],) {
  %200 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %199 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
    (%199,)
  };
  %200() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_5318() -> Tensor[(2, 16, 9), float64] {
  %201 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %201.0
}

def @func_4912(%var_4911: Tensor[(16, 12, 1), float64]) -> (Tensor[(16, 12, 1), float64], Tensor[(16, 12, 1), float32]) {
  %206 = fn (%var_4892: Tensor[(16, 12, 1), float64]) -> (Tensor[(16, 12, 1), float64], Tensor[(16, 12, 1), float32]) {
    %202 = cast(%var_4892, dtype="float64") /* ty=Tensor[(16, 12, 1), float64] */;
    %203 = cast(%var_4892, dtype="float32") /* ty=Tensor[(16, 12, 1), float32] */;
    %204 = erf(%202) /* ty=Tensor[(16, 12, 1), float64] */;
    %205 = sinh(%203) /* ty=Tensor[(16, 12, 1), float32] */;
    (%204, %205)
  };
  %206(%var_4911) /* ty=(Tensor[(16, 12, 1), float64], Tensor[(16, 12, 1), float32]) */
}

def @func_4838(%var_4836: Tensor[(108), int32]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(108), int32], Tensor[(2, 16, 9), float64]) {
  @func_4835(%var_4836) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(108), int32], Tensor[(2, 16, 9), float64]) */
}

def @func_6241() -> Tensor[(2, 16, 9), float64] {
  %207 = fn () -> Tensor[(2, 16, 9), float64] {
    @func_3356() /* ty=Tensor[(2, 16, 9), float64] */
  };
  %207() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_4212() -> (Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), uint8], Tensor[(320), uint8]) {
  @func_4210() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), uint8], Tensor[(320), uint8]) */
}

def @func_3804() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %213 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %208 = @func_609() /* ty=Tensor[(2, 16, 9), float64] */;
    %209 = cast(%208, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
    %210 = reshape(%209, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float32] */;
    %211 = @func_1536(%210) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %212 = %211.2;
    (%208, %212)
  };
  %213() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_1727(%var_1725: Tensor[(15, 2, 7), float64]) -> (Tensor[(288), float32], Tensor[(2, 16, 9), float64], Tensor[(15, 2, 7), float64], Tensor[(15, 2, 7), uint64]) {
  @func_1724(%var_1725) /* ty=(Tensor[(288), float32], Tensor[(2, 16, 9), float64], Tensor[(15, 2, 7), float64], Tensor[(15, 2, 7), uint64]) */
}

def @func_6604() -> Tensor[(2, 16, 9), float64] {
  @func_6602() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8913() -> Tensor[(2, 16, 9), float64] {
  %214 = fn () -> Tensor[(2, 16, 9), float64] {
    @func_6134() /* ty=Tensor[(2, 16, 9), float64] */
  };
  %214() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8313() -> (Tensor[(2, 16, 9), float64],) {
  %215 = @func_5318() /* ty=Tensor[(2, 16, 9), float64] */;
  (%215,)
}

def @func_4399() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float64], uint64) {
  %227 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float64], uint64) {
    %216 = @func_1380() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %217 = @func_1940() /* ty=Tensor[(2, 16, 9), float64] */;
    %218 = cast(%217, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
    %219 = reshape(%218, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
    %220 = @func_1160(%219) /* ty=(Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32]) */;
    %221 = cast(meta[relay.Constant][7] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %222 = reshape(%221, newshape=[]) /* ty=uint64 */;
    %223 = @func_3647(%222) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) */;
    %224 = %216.0;
    %225 = %220.1;
    %226 = %223.0;
    (%217, %224, %225, %226, meta[relay.Constant][7] /* ty=uint64 */)
  };
  %227() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float64], uint64) */
}

def @func_1654() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_1602() -> (Tensor[(2, 16, 9), float64],) {
  @func_1600() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_4680(%var_4675: Tensor[(4, 14, 1), float64], %var_4676: Tensor[(4, 14, 11), float64]) -> (Tensor[(4, 14, 11), float64],) {
  %228 = cast(%var_4675, dtype="float64") /* ty=Tensor[(4, 14, 1), float64] */;
  %229 = cast(%var_4676, dtype="float64") /* ty=Tensor[(4, 14, 11), float64] */;
  %230 = floor_divide(%228, %229) /* ty=Tensor[(4, 14, 11), float64] */;
  (%230,)
}

def @func_9030() -> Tensor[(2, 16, 9), float64] {
  %232 = fn () -> Tensor[(2, 16, 9), float64] {
    %231 = @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %231.0
  };
  %232() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8089(%var_8087: Tensor[(6, 14, 13), uint64], %var_8088: Tensor[(6, 14, 13), uint64]) -> Tensor[(6, 14, 13), bool] {
  @func_8085(%var_8087, %var_8088) /* ty=Tensor[(6, 14, 13), bool] */
}

def @func_1861() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) {
  %239 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) {
    %233 = @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %234 = %233.0;
    %235 = cast(%234, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
    %236 = reshape(%235, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float32] */;
    %237 = @func_1536(%236) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %238 = %237.0;
    (%234, %238)
  };
  %239() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) */
}

def @func_8376() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %244 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %240 = @func_5409() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %241 = @func_4719() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %242 = %240.1;
    %243 = %241.0;
    (%242, %243)
  };
  %244() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_1210() -> Tensor[(2, 16, 9), float64] {
  %245 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %245.0
}

def @func_2062(%var_2056: Tensor[(5, 8, 8), uint8]) -> Tensor[(5, 8, 8), uint8] {
  %246 = cast(%var_2056, dtype="uint8") /* ty=Tensor[(5, 8, 8), uint8] */;
  %247 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 8), uint8] */, dtype="uint8") /* ty=Tensor[(5, 8, 8), uint8] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%248, %249) /* ty=Tensor[(5, 8, 8), uint8] */
}

def @func_7394() -> Tensor[(2, 16, 9), float64] {
  %251 = fn () -> Tensor[(2, 16, 9), float64] {
    %250 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %250.0
  };
  %251() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_618() -> (Tensor[(2, 16, 9), float64],) {
  %254 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %252 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %253 = %252.0;
    (%253,)
  };
  %254() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_1872() -> (Tensor[(2, 16, 9), float64],) {
  %255 = @func_1600() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %256 = %255.0;
  (%256,)
}

def @func_3930(%var_3928: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) {
  @func_3927(%var_3928) /* ty=(Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */
}

def @func_6742() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) {
  %261 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) {
    %257 = @func_1380() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %258 = @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
    %259 = %257.0;
    %260 = %258.0;
    (%259, %260)
  };
  %261() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) */
}

def @func_2370(%var_2359: Tensor[(9, 14, 11), int8], %var_2360: Tensor[(9, 14, 11), int8]) -> (Tensor[(9, 14, 11), int8],) {
  %262 = cast(%var_2360, dtype="int8") /* ty=Tensor[(9, 14, 11), int8] */;
  %263 = shape_of(%var_2359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%var_2359, dtype="int8") /* ty=Tensor[(9, 14, 11), int8] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %266 = multiply(%264, %265) /* ty=Tensor[(9, 14, 11), int8] */;
  (%266,)
}

def @func_8855() -> Tensor[(2, 16, 9), int8] {
  %267 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %267.2
}

def @func_8315() -> (Tensor[(2, 16, 9), float64],) {
  @func_8313() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_1163(%var_1161: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32]) {
  @func_1160(%var_1161) /* ty=(Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32]) */
}

def @func_4301() -> Tensor[(2, 16, 9), float64] {
  %268 = @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %268.1
}

def @func_2241() -> Tensor[(2, 16, 9), float64] {
  @func_2239() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_654() -> (Tensor[(2, 16, 9), float64],) {
  %272 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %269 = @func_609() /* ty=Tensor[(2, 16, 9), float64] */;
    %270 = cast(%269, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
    %271 = rsqrt(%270) /* ty=Tensor[(2, 16, 9), float64] */;
    (%271,)
  };
  %272() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @main(%var_9236: float32) -> Tensor[(16, 5, 12), float32] {
  %273 = cast(%var_9236, dtype="float32") /* ty=float32 */;
  %274 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 12), float32] */;
  divide(%273, %274) /* ty=Tensor[(16, 5, 12), float32] */
}

def @func_6849() -> (Tensor[(2, 16, 9), float64], Tensor[(8, 2, 5), float64]) {
  %275 = @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %276 = %275.0;
  %277 = @func_5187() /* ty=Tensor[(8, 2, 5), float64] */;
  (%276, %277)
}

def @func_6591() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %278 = @func_580() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %279 = @func_1053() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %280 = %278.0;
  %281 = %279.2;
  (%280, %281)
}

def @func_7023() -> Tensor[(2, 16, 9), float64] {
  %282 = @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %282.0
}

def @func_2468() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %286 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %283 = @func_580() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %284 = %283.0;
    %285 = @func_2239() /* ty=Tensor[(2, 16, 9), float64] */;
    (%284, %285)
  };
  %286() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_7183() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %292 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %287 = @func_1433() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %288 = @func_5576() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %289 = @func_3541() /* ty=Tensor[(2, 16, 9), float64] */;
    %290 = %287.0;
    %291 = %288.0;
    (%289, %290, %291)
  };
  %292() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_4303() -> Tensor[(2, 16, 9), float64] {
  @func_4301() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_6358(%var_6331: Tensor[(14, 15, 16), float64]) -> (Tensor[(14, 15, 16), float64],) {
  %293 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 15, 16), float64] */;
  %294 = shape_of(%var_6331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%var_6331, dtype="float64") /* ty=Tensor[(14, 15, 16), float64] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %297 = add(%295, %296) /* ty=Tensor[(14, 15, 16), float64] */;
  (%297,)
}

def @func_8735() -> Tensor[(2, 16, 9), float64] {
  %299 = fn () -> Tensor[(2, 16, 9), float64] {
    %298 = @func_8024() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %298.0
  };
  %299() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_1160(%var_1146: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32]) {
  %300 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  %301 = cast(%var_1146, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %305 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %306 = %305.3;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %308 = divide(%303, %304) /* ty=Tensor[(2, 16, 9), float32] */;
  %309 = log(%307) /* ty=Tensor[(2, 16, 9), float32] */;
  (%308, %309)
}

def @func_4415() -> (Tensor[(2, 16, 9), float64],) {
  @func_4413() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_5826() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %310 = @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %311 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %312 = %310.1;
  %313 = %311.0;
  (%312, %313)
}

def @func_460(%var_458: Tensor[(3, 9, 4), int32], %var_459: Tensor[(3, 9, 4), int32]) -> (Tensor[(3, 9, 4), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_456(%var_458, %var_459) /* ty=(Tensor[(3, 9, 4), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_7025() -> Tensor[(2, 16, 9), float64] {
  @func_7023() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_610() -> Tensor[(2, 16, 9), float64] {
  %314 = fn () -> Tensor[(2, 16, 9), float64] {
    @func_270() /* ty=Tensor[(2, 16, 9), float64] */
  };
  %314() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_7373() -> (Tensor[(2, 16, 9), float64],) {
  %317 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %315 = @func_1053() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %316 = %315.2;
    (%316,)
  };
  %317() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_683() -> Tensor[(2, 16, 9), float64] {
  @func_681() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_6136() -> Tensor[(2, 16, 9), float64] {
  @func_6134() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_4540() -> (Tensor[(2, 16, 9), float64],) {
  %318 = @func_1600() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %319 = %318.0;
  (%319,)
}

def @func_2612(%var_2611: Tensor[(3, 9, 16), float64]) -> (Tensor[(2, 16, 9), float64], Tensor[(3, 9, 16), uint64]) {
  %329 = fn (%var_2586: Tensor[(3, 9, 16), float64]) -> (Tensor[(2, 16, 9), float64], Tensor[(3, 9, 16), uint64]) {
    %320 = @func_1600() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %321 = cast(%var_2586, dtype="float64") /* ty=Tensor[(3, 9, 16), float64] */;
    %322 = rsqrt(%321) /* ty=Tensor[(3, 9, 16), float64] */;
    %323 = cast(%322, dtype="uint64") /* ty=Tensor[(3, 9, 16), uint64] */;
    %324 = shape_of(%var_2586, dtype="int32") /* ty=Tensor[(3), int32] */;
    %325 = cast(%var_2586, dtype="uint64") /* ty=Tensor[(3, 9, 16), uint64] */;
    %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %327 = %320.0;
    %328 = bitwise_or(%325, %326) /* ty=Tensor[(3, 9, 16), uint64] */;
    (%327, %328)
  };
  %329(%var_2611) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(3, 9, 16), uint64]) */
}

def @func_8534(%var_8527: Tensor[(5, 12, 8), int64]) -> Tensor[(5, 12, 8), int64] {
  %330 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 12, 8), int64] */, dtype="int64") /* ty=Tensor[(5, 12, 8), int64] */;
  %331 = shape_of(%var_8527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%var_8527, dtype="int64") /* ty=Tensor[(5, 12, 8), int64] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%332, %333) /* ty=Tensor[(5, 12, 8), int64] */
}

def @func_6764() -> (Tensor[(2, 16, 9), float64],) {
  %336 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %334 = @func_5258() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %335 = %334.0;
    (%335,)
  };
  %336() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_4210() -> (Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), uint8], Tensor[(320), uint8]) {
  %337 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %338 = cast(meta[relay.Constant][12] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %339 = reshape(%338, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), uint8] */;
  %340 = %337.0;
  %341 = @func_2062(%339) /* ty=Tensor[(5, 8, 8), uint8] */;
  (%340, %341, meta[relay.Constant][12] /* ty=Tensor[(320), uint8] */)
}

def @func_402() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) {
  %342 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %343 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %345 = cast(%343, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %346 = tan(%345) /* ty=Tensor[(2, 16, 9), float64] */;
  %347 = cast(%346, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %348 = asin(%347) /* ty=Tensor[(2, 16, 9), float32] */;
  %349 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %350 = %349.0;
  %351 = cast(%350, dtype="int8") /* ty=Tensor[(2, 16, 9), int8] */;
  %352 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%348, dtype="int8") /* ty=Tensor[(2, 16, 9), int8] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %355 = cast(%348, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %356 = %342.0;
  %357 = sigmoid(%344) /* ty=Tensor[(2, 16, 9), float64] */;
  %358 = bitwise_xor(%353, %354) /* ty=Tensor[(2, 16, 9), int8] */;
  %359 = sin(%355) /* ty=Tensor[(2, 16, 9), float32] */;
  (%356, %357, %358, %359)
}

def @func_404() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) {
  @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */
}

def @func_5760() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_5758() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_3786() -> (Tensor[(2, 16, 9), float64],) {
  %360 = @func_1053() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %361 = %360.0;
  (%361,)
}

def @func_6026(%var_5992: Tensor[(3, 6, 1), float64]) -> (Tensor[(3, 6, ?), int8], Tensor[(2, 16, 9), float64], Tensor[(3, 6, ?), int16]) {
  %362 = cast(%var_5992, dtype="float64") /* ty=Tensor[(3, 6, 1), float64] */;
  %363 = cosh(%362) /* ty=Tensor[(3, 6, 1), float64] */;
  %364 = cast(%var_5992, dtype="int8") /* ty=Tensor[(3, 6, 1), int8] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="int8") /* ty=Tensor[(3, 6, 1), int8] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %368 = cast(%363, dtype="float64") /* ty=Tensor[(3, 6, 1), float64] */;
  %369 = acosh(%368) /* ty=Tensor[(3, 6, 1), float64] */;
  %370 = cast(%363, dtype="int16") /* ty=Tensor[(3, 6, 1), int16] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="int16") /* ty=Tensor[(3, 6, 1), int16] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %374 = multiply(%366, %367) /* ty=Tensor[(3, 6, ?), int8] */;
  %375 = @func_2321() /* ty=Tensor[(2, 16, 9), float64] */;
  %376 = bitwise_and(%372, %373) /* ty=Tensor[(3, 6, ?), int16] */;
  (%374, %375, %376)
}

def @func_6518(%var_6494: Tensor[(3136), uint64]) -> (Tensor[(2, 16, 9), float64], uint64, Tensor[(1, 1920), int64], Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) {
  %377 = @func_3289() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %378 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 1920), int64] */, dtype="int64") /* ty=Tensor[(1, 1920), int64] */;
  %379 = %377.0;
  %380 = cast(%379, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %381 = cast(%var_6494, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
  %382 = reshape(%378, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %383 = reshape(%380, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %384 = reshape(%381, newshape=[3136]) /* ty=Tensor[(3136), uint64] */;
  %385 = @func_5164(%382, %383, %384) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(288), float32], Tensor[(10, 12, 16), float32], Tensor[(2, 16, 9), float64], uint64, Tensor[(3136), uint64]) */;
  %386 = @func_3803() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %387 = %385.4;
  %388 = %386.0;
  (%379, %387, meta[relay.Constant][13] /* ty=Tensor[(1, 1920), int64] */, %var_6494, %388)
}

def @func_9116() -> Tensor[(2, 16, 9), float64] {
  %390 = fn () -> Tensor[(2, 16, 9), float64] {
    %389 = @func_6763() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %389.0
  };
  %390() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_5872(%var_5855: Tensor[(16, 16, 16), uint32], %var_5856: Tensor[(16, 16, 16), uint32]) -> (Tensor[(16, 16, 16), bool], Tensor[(16, 16, 16), float64], Tensor[(2, 16, 9), bool]) {
  %391 = cast(%var_5856, dtype="bool") /* ty=Tensor[(16, 16, 16), bool] */;
  %392 = shape_of(%var_5855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_5855, dtype="bool") /* ty=Tensor[(16, 16, 16), bool] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %395 = cast(%var_5856, dtype="float64") /* ty=Tensor[(16, 16, 16), float64] */;
  %396 = @func_3958() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
  %397 = greater_equal(%393, %394) /* ty=Tensor[(16, 16, 16), bool] */;
  %398 = atan(%395) /* ty=Tensor[(16, 16, 16), float64] */;
  %399 = %396.0;
  (%397, %398, %399)
}

def @func_7742() -> (Tensor[(2, 16, 9), float64], Tensor[(1260), float32], uint64) {
  %400 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %401 = cast(meta[relay.Constant][14] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %402 = reshape(%401, newshape=[]) /* ty=uint64 */;
  %403 = @func_2208(%402) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(3136), uint64], Tensor[(1260), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float32]) */;
  %404 = %400.0;
  %405 = %403.2;
  (%404, %405, meta[relay.Constant][14] /* ty=uint64 */)
}

def @func_9170(%var_9148: Tensor[(4, 1, 9), uint8], %var_9149: Tensor[(4, 2, 9), uint8]) -> (Tensor[(4, 2, 9), uint8], Tensor[(2, 16, 9), float64]) {
  %406 = cast(%var_9148, dtype="uint8") /* ty=Tensor[(4, 1, 9), uint8] */;
  %407 = cast(%var_9149, dtype="uint8") /* ty=Tensor[(4, 2, 9), uint8] */;
  %408 = multiply(%406, %407) /* ty=Tensor[(4, 2, 9), uint8] */;
  %409 = @func_5318() /* ty=Tensor[(2, 16, 9), float64] */;
  (%408, %409)
}

def @func_2321() -> Tensor[(2, 16, 9), float64] {
  %410 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %410.0
}

def @func_1771(%var_1757: Tensor[(6, 12, 2), int8], %var_1758: Tensor[(6, 12, 2), int8]) -> (Tensor[(6, 12, 2), bool], Tensor[(2, 16, 9), float64]) {
  %411 = cast(%var_1758, dtype="bool") /* ty=Tensor[(6, 12, 2), bool] */;
  %412 = shape_of(%var_1757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_1757, dtype="bool") /* ty=Tensor[(6, 12, 2), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %415 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %416 = equal(%413, %414) /* ty=Tensor[(6, 12, 2), bool] */;
  %417 = %415.0;
  (%416, %417)
}

def @func_9174(%var_9172: Tensor[(4, 1, 9), uint8], %var_9173: Tensor[(4, 2, 9), uint8]) -> (Tensor[(4, 2, 9), uint8], Tensor[(2, 16, 9), float64]) {
  @func_9170(%var_9172, %var_9173) /* ty=(Tensor[(4, 2, 9), uint8], Tensor[(2, 16, 9), float64]) */
}

def @func_1284(%var_1280: Tensor[(2, 16, 9), float64], %var_1281: uint64, %var_1282: Tensor[(196, 16), uint64], %var_1283: Tensor[(196, 16), uint64]) -> (Tensor[(2, 16, 9), int32], Tensor[(16, 14, 14), bool], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32], Tensor[(196, 16), int64], Tensor[(196, 16), bool], Tensor[(196, 16), float64], Tensor[(2, 16, 9), float64]) {
  @func_1278(%var_1280, %var_1281, %var_1282, %var_1283) /* ty=(Tensor[(2, 16, 9), int32], Tensor[(16, 14, 14), bool], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32], Tensor[(196, 16), int64], Tensor[(196, 16), bool], Tensor[(196, 16), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_6938() -> (Tensor[(13, 4, 15), float64], Tensor[(2, 16, 9), float64], Tensor[(288), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %418 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(13, 4, 15), float64] */;
  %419 = rsqrt(%418) /* ty=Tensor[(13, 4, 15), float64] */;
  %420 = cast(%419, dtype="float64") /* ty=Tensor[(13, 4, 15), float64] */;
  %421 = cast(meta[relay.Constant][16] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %422 = reshape(%421, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %423 = @func_6544(%422) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), uint8], Tensor[(2, 16, 9), float64]) */;
  %424 = @func_6591() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %425 = @func_5615() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(1050), uint32]) */;
  %426 = @func_5566() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %427 = sinh(%420) /* ty=Tensor[(13, 4, 15), float64] */;
  %428 = %423.0;
  %429 = %424.1;
  %430 = %425.0;
  %431 = %426.0;
  (%427, %428, meta[relay.Constant][16] /* ty=Tensor[(288), float64] */, %429, %430, %431)
}

def @func_4343() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %432 = @func_4318() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %433 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %434 = %432.0;
  %435 = %433.0;
  (%434, %435)
}

def @func_1600() -> (Tensor[(2, 16, 9), float64],) {
  %436 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  (%436,)
}

def @func_6705(%var_6704: Tensor[(13, 14, 7), uint32]) -> Tensor[(13, 14, 7), uint32] {
  %441 = fn (%var_6683: Tensor[(13, 14, 7), uint32]) -> Tensor[(13, 14, 7), uint32] {
    %437 = cast(%var_6683, dtype="uint32") /* ty=Tensor[(13, 14, 7), uint32] */;
    %438 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(13, 14, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %439 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 14, 7), uint32] */, dtype="uint32") /* ty=Tensor[(13, 14, 7), uint32] */;
    %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    logical_xor(%439, %440) /* ty=Tensor[(13, 14, 7), uint32] */
  };
  %441(%var_6704) /* ty=Tensor[(13, 14, 7), uint32] */
}

def @func_7826(%var_7825: Tensor[(5, 12, 2), int8]) -> Tensor[(5, 12, 2), bool] {
  %446 = fn (%var_7799: Tensor[(5, 12, 2), int8]) -> Tensor[(5, 12, 2), bool] {
    %442 = cast(%var_7799, dtype="bool") /* ty=Tensor[(5, 12, 2), bool] */;
    %443 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(5, 12, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 12, 2), int8] */, dtype="bool") /* ty=Tensor[(5, 12, 2), bool] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%444, %445) /* ty=Tensor[(5, 12, 2), bool] */
  };
  %446(%var_7825) /* ty=Tensor[(5, 12, 2), bool] */
}

def @func_1380() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %447 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  %448 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  (%447, %448)
}

def @func_4542() -> (Tensor[(2, 16, 9), float64],) {
  @func_4540() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_4943() -> (Tensor[(2, 16, 9), float64],) {
  %449 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  (%449,)
}

def @func_2929() -> (Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_2927() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_8537(%var_8535: Tensor[(5, 12, 8), int64]) -> Tensor[(5, 12, 8), int64] {
  @func_8534(%var_8535) /* ty=Tensor[(5, 12, 8), int64] */
}

def @func_4719() -> (Tensor[(2, 16, 9), float64],) {
  %450 = @func_617() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %451 = %450.0;
  (%451,)
}

def @func_4413() -> (Tensor[(2, 16, 9), float64],) {
  %452 = @func_2321() /* ty=Tensor[(2, 16, 9), float64] */;
  (%452,)
}

def @func_1538(%var_1537: Tensor[(2, 16, 9), float32]) -> (Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %468 = fn (%var_1496: Tensor[(2, 16, 9), float32]) -> (Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %453 = @func_788() /* ty=Tensor[(2, 16, 9), float64] */;
    %454 = cast(%453, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
    %455 = reshape(%454, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
    %456 = @func_1160(%455) /* ty=(Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32]) */;
    %457 = %456.1;
    %458 = cast(%var_1496, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
    %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
    %460 = cast(%457, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %462 = cast(%453, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
    %463 = @func_617() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %464 = equal(%460, %461) /* ty=Tensor[(2, 16, 9), bool] */;
    %465 = cos(%462) /* ty=Tensor[(2, 16, 9), float64] */;
    %466 = %463.0;
    %467 = @func_270() /* ty=Tensor[(2, 16, 9), float64] */;
    (%464, %465, %466, %467)
  };
  %468(%var_1537) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_4124(%var_4123: Tensor[(7, 12, 16), float32]) -> (Tensor[(7, 12, 16), float32],) {
  %471 = fn (%var_4114: Tensor[(7, 12, 16), float32]) -> (Tensor[(7, 12, 16), float32],) {
    %469 = cast(%var_4114, dtype="float32") /* ty=Tensor[(7, 12, 16), float32] */;
    %470 = cos(%469) /* ty=Tensor[(7, 12, 16), float32] */;
    (%470,)
  };
  %471(%var_4123) /* ty=(Tensor[(7, 12, 16), float32],) */
}

def @func_8693() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %476 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %472 = @func_5258() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %473 = @func_2927() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %474 = %472.0;
    %475 = %473.0;
    (%474, %475)
  };
  %476() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_5169(%var_5166: Tensor[(10, 12, 16), int64], %var_5167: Tensor[(288), float32], %var_5168: Tensor[(3136), uint64]) -> (Tensor[(2, 16, 9), bool], Tensor[(288), float32], Tensor[(10, 12, 16), float32], Tensor[(2, 16, 9), float64], uint64, Tensor[(3136), uint64]) {
  @func_5164(%var_5166, %var_5167, %var_5168) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(288), float32], Tensor[(10, 12, 16), float32], Tensor[(2, 16, 9), float64], uint64, Tensor[(3136), uint64]) */
}

def @func_5189() -> Tensor[(8, 2, 5), float64] {
  @func_5187() /* ty=Tensor[(8, 2, 5), float64] */
}

def @func_2927() -> (Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %477 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %478 = cast(meta[relay.Constant][19] /* ty=Tensor[(1050), uint32] */, dtype="uint32") /* ty=Tensor[(1050), uint32] */;
  %479 = reshape(%478, newshape=[10, 15, 7]) /* ty=Tensor[(10, 15, 7), uint32] */;
  %480 = @func_2401(%479) /* ty=(Tensor[(10, 15, 7), float32],) */;
  %481 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %482 = %481.3;
  %483 = cast(%482, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %484 = @func_1433() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %485 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %486 = %477.0;
  %487 = %480.0;
  %488 = atanh(%483) /* ty=Tensor[(2, 16, 9), float64] */;
  %489 = %484.0;
  %490 = %485.0;
  (%486, %487, meta[relay.Constant][19] /* ty=Tensor[(1050), uint32] */, %488, %489, %490)
}

def @func_6412() -> (Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 160), uint8]) {
  %497 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 160), uint8]) {
    %491 = @func_1433() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %492 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 160), uint8] */, dtype="uint8") /* ty=Tensor[(2, 160), uint8] */;
    %493 = reshape(%492, newshape=[320, 1]) /* ty=Tensor[(320, 1), uint8] */;
    %494 = @func_5541(%493) /* ty=(Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), int64], Tensor[(2, 16, 9), float64]) */;
    %495 = %491.0;
    %496 = %494.3;
    (%495, %496, meta[relay.Constant][20] /* ty=Tensor[(2, 160), uint8] */)
  };
  %497() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 160), uint8]) */
}

def @func_2210(%var_2209: uint64) -> (Tensor[(2, 16, 9), float64], Tensor[(3136), uint64], Tensor[(1260), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float32]) {
  %516 = fn (%var_2184: uint64) -> (Tensor[(2, 16, 9), float64], Tensor[(3136), uint64], Tensor[(1260), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float32]) {
    %498 = @func_509() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32]) */;
    %499 = cast(meta[relay.Constant][21] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
    %500 = cast(meta[relay.Constant][21] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
    %501 = %498.0;
    %502 = cast(%501, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
    %503 = cast(%var_2184, dtype="uint64") /* ty=uint64 */;
    %504 = cast(meta[relay.Constant][22] /* ty=Tensor[(3136), uint64] */, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
    %505 = reshape(%499, newshape=[14, 9, 10]) /* ty=Tensor[(14, 9, 10), float32] */;
    %506 = reshape(%500, newshape=[14, 9, 10]) /* ty=Tensor[(14, 9, 10), float32] */;
    %507 = reshape(%502, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %508 = reshape(%503, newshape=[]) /* ty=uint64 */;
    %509 = reshape(%504, newshape=[3136]) /* ty=Tensor[(3136), uint64] */;
    %510 = @func_2040(%505, %506, %507, %508, %509) /* ty=(Tensor[(14, 9, 10), uint64], Tensor[(196, 16), float64], Tensor[(288), float64], uint64, Tensor[(3136), uint64]) */;
    %511 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %512 = %511.0;
    %513 = cast(%512, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
    %514 = %510.4;
    %515 = erf(%513) /* ty=Tensor[(2, 16, 9), float32] */;
    (%501, %514, meta[relay.Constant][21] /* ty=Tensor[(1260), float32] */, %var_2184, meta[relay.Constant][22] /* ty=Tensor[(3136), uint64] */, %515)
  };
  %516(%var_2209) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(3136), uint64], Tensor[(1260), float32], uint64, Tensor[(3136), uint64], Tensor[(2, 16, 9), float32]) */
}

def @func_7678() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %523 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %517 = @func_6763() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %518 = @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %519 = @func_5566() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %520 = %517.0;
    %521 = %518.1;
    %522 = %519.0;
    (%520, %521, %522)
  };
  %523() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_6097() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 9, 4), bool], Tensor[(108), int32], Tensor[(2, 16, 9), float64]) {
  %524 = @func_3803() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %525 = %524.0;
  %526 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%525, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %530 = @func_4343() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %531 = @func_1860() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) */;
  %532 = cast(meta[relay.Constant][24] /* ty=Tensor[(108), int32] */, dtype="int32") /* ty=Tensor[(108), int32] */;
  %533 = cast(meta[relay.Constant][24] /* ty=Tensor[(108), int32] */, dtype="int32") /* ty=Tensor[(108), int32] */;
  %534 = reshape(%532, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
  %535 = reshape(%533, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
  %536 = @func_456(%534, %535) /* ty=(Tensor[(3, 9, 4), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %537 = @func_617() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %538 = power(%528, %529) /* ty=Tensor[(2, 16, 9), float64] */;
  %539 = %530.1;
  %540 = %531.0;
  %541 = %536.0;
  %542 = %537.0;
  (%538, %539, %540, %541, meta[relay.Constant][24] /* ty=Tensor[(108), int32] */, %542)
}

def @func_8395(%var_8393: Tensor[(288), float64]) -> (Tensor[(320), uint8], Tensor[(2, 16, 9), uint64], Tensor[(288), float64]) {
  %543 = @func_4210() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), uint8], Tensor[(320), uint8]) */;
  %544 = cast(%var_8393, dtype="float64") /* ty=Tensor[(288), float64] */;
  %545 = reshape(%544, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %546 = @func_2694(%545) /* ty=(Tensor[(2, 16, 9), uint64],) */;
  %547 = %543.2;
  %548 = %546.0;
  (%547, %548, %var_8393)
}

def @func_3103() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(9, 14, 11), int8], Tensor[(1386), int8]) {
  %562 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(9, 14, 11), int8], Tensor[(1386), int8]) {
    %549 = @func_2927() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050), uint32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %550 = @func_2825() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %551 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %552 = cast(meta[relay.Constant][25] /* ty=Tensor[(1386), int8] */, dtype="int8") /* ty=Tensor[(1386), int8] */;
    %553 = cast(meta[relay.Constant][25] /* ty=Tensor[(1386), int8] */, dtype="int8") /* ty=Tensor[(1386), int8] */;
    %554 = reshape(%552, newshape=[9, 14, 11]) /* ty=Tensor[(9, 14, 11), int8] */;
    %555 = reshape(%553, newshape=[9, 14, 11]) /* ty=Tensor[(9, 14, 11), int8] */;
    %556 = @func_2370(%554, %555) /* ty=(Tensor[(9, 14, 11), int8],) */;
    %557 = @func_1210() /* ty=Tensor[(2, 16, 9), float64] */;
    %558 = %549.4;
    %559 = %550.0;
    %560 = %551.0;
    %561 = %556.0;
    (%557, %558, %559, %560, %561, meta[relay.Constant][25] /* ty=Tensor[(1386), int8] */)
  };
  %562() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(9, 14, 11), int8], Tensor[(1386), int8]) */
}

def @func_4265() -> (Tensor[(2, 16, 9), float64], Tensor[(1386), int8], Tensor[(9, 14, 11), bool]) {
  %563 = @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %564 = cast(meta[relay.Constant][26] /* ty=Tensor[(1386), int8] */, dtype="int8") /* ty=Tensor[(1386), int8] */;
  %565 = cast(meta[relay.Constant][26] /* ty=Tensor[(1386), int8] */, dtype="int8") /* ty=Tensor[(1386), int8] */;
  %566 = reshape(%564, newshape=[9, 14, 11]) /* ty=Tensor[(9, 14, 11), int8] */;
  %567 = reshape(%565, newshape=[9, 14, 11]) /* ty=Tensor[(9, 14, 11), int8] */;
  %568 = @func_2370(%566, %567) /* ty=(Tensor[(9, 14, 11), int8],) */;
  %569 = %568.0;
  %570 = cast(%569, dtype="float64") /* ty=Tensor[(9, 14, 11), float64] */;
  %571 = rsqrt(%570) /* ty=Tensor[(9, 14, 11), float64] */;
  %572 = cast(%569, dtype="bool") /* ty=Tensor[(9, 14, 11), bool] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%571, dtype="bool") /* ty=Tensor[(9, 14, 11), bool] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %576 = %563.1;
  %577 = greater_equal(%574, %575) /* ty=Tensor[(9, 14, 11), bool] */;
  (%576, meta[relay.Constant][26] /* ty=Tensor[(1386), int8] */, %577)
}

def @func_3491(%var_3489: Tensor[(468, 1), float64]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 12, 13), float64], Tensor[(468, 1), float64], Tensor[(2, 16, 9), float64], Tensor[(600), float32], Tensor[(2, 16, 9), float64]) {
  @func_3488(%var_3489) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 12, 13), float64], Tensor[(468, 1), float64], Tensor[(2, 16, 9), float64], Tensor[(600), float32], Tensor[(2, 16, 9), float64]) */
}

def @func_8995() -> Tensor[(2, 16, 9), float64] {
  %578 = @func_5826() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %579 = %578.0;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  acosh(%580) /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_5187() -> Tensor[(8, 2, 5), float64] {
  %581 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 2, 5), float64] */;
  asinh(%581) /* ty=Tensor[(8, 2, 5), float64] */
}

def @func_8493(%var_8492: Tensor[(2, 7, 11), float32]) -> (Tensor[(2, 7, 11), float32], Tensor[(9, 7, 9), bool], Tensor[(567), uint64]) {
  %595 = fn (%var_8469: Tensor[(2, 7, 11), float32]) -> (Tensor[(2, 7, 11), float32], Tensor[(9, 7, 9), bool], Tensor[(567), uint64]) {
    %582 = cast(%var_8469, dtype="float32") /* ty=Tensor[(2, 7, 11), float32] */;
    %583 = cast(meta[relay.Constant][28] /* ty=Tensor[(567), float32] */, dtype="float32") /* ty=Tensor[(567), float32] */;
    %584 = cast(meta[relay.Constant][28] /* ty=Tensor[(567), float32] */, dtype="float32") /* ty=Tensor[(567), float32] */;
    %585 = reshape(%583, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), float32] */;
    %586 = reshape(%584, newshape=[9, 7, 9]) /* ty=Tensor[(9, 7, 9), float32] */;
    %587 = @func_2787(%585, %586) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(18, 6), int32], Tensor[(9, 7, 9), bool], Tensor[(9, 7, 9), float64]) */;
    %588 = cast(meta[relay.Constant][29] /* ty=Tensor[(567), float32] */, dtype="uint64") /* ty=Tensor[(567), uint64] */;
    %589 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(567), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %590 = cast(meta[relay.Constant][28] /* ty=Tensor[(567), float32] */, dtype="uint64") /* ty=Tensor[(567), uint64] */;
    %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %592 = sqrt(%582) /* ty=Tensor[(2, 7, 11), float32] */;
    %593 = %587.2;
    %594 = subtract(%590, %591) /* ty=Tensor[(567), uint64] */;
    (%592, %593, %594)
  };
  %595(%var_8492) /* ty=(Tensor[(2, 7, 11), float32], Tensor[(9, 7, 9), bool], Tensor[(567), uint64]) */
}

def @func_1545() -> (Tensor[(2, 16, 9), float64],) {
  %598 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %596 = @func_617() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %597 = %596.0;
    (%597,)
  };
  %598() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_4089() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_4087() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_4502(%var_4501: Tensor[(13, 3, 10), int64]) -> Tensor[(13, 3, 10), int64] {
  %601 = fn (%var_4488: Tensor[(13, 3, 10), int64]) -> Tensor[(13, 3, 10), int64] {
    %599 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %600 = cast(%var_4488, dtype="int64") /* ty=Tensor[(13, 3, 10), int64] */;
    minimum(%599, %600) /* ty=Tensor[(13, 3, 10), int64] */
  };
  %601(%var_4501) /* ty=Tensor[(13, 3, 10), int64] */
}

def @func_6134() -> Tensor[(2, 16, 9), float64] {
  %602 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %602.0
}

def @func_8718() -> Tensor[(2, 16, 9), float64] {
  %603 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %603.0
}

def @func_2790(%var_2788: Tensor[(9, 7, 9), float32], %var_2789: Tensor[(9, 7, 9), float32]) -> (Tensor[(2, 16, 9), float64], Tensor[(18, 6), int32], Tensor[(9, 7, 9), bool], Tensor[(9, 7, 9), float64]) {
  %629 = fn (%var_2730: Tensor[(9, 7, 9), float32], %var_2747: Tensor[(9, 7, 9), float32]) -> (Tensor[(2, 16, 9), float64], Tensor[(18, 6), int32], Tensor[(9, 7, 9), bool], Tensor[(9, 7, 9), float64]) {
    %604 = cast(meta[relay.Constant][30] /* ty=Tensor[(18, 6), int32] */, dtype="int32") /* ty=Tensor[(18, 6), int32] */;
    %605 = cast(meta[relay.Constant][30] /* ty=Tensor[(18, 6), int32] */, dtype="int32") /* ty=Tensor[(18, 6), int32] */;
    %606 = reshape(%604, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
    %607 = reshape(%605, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), int32] */;
    %608 = @func_456(%606, %607) /* ty=(Tensor[(3, 9, 4), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %609 = cast(%var_2730, dtype="float32") /* ty=Tensor[(9, 7, 9), float32] */;
    %610 = cosh(%609) /* ty=Tensor[(9, 7, 9), float32] */;
    %611 = cast(%610, dtype="float64") /* ty=Tensor[(9, 7, 9), float64] */;
    %612 = acos(%611) /* ty=Tensor[(9, 7, 9), float64] */;
    %613 = cast(%610, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
    %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%612, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %617 = cast(%var_2747, dtype="int8") /* ty=Tensor[(9, 7, 9), int8] */;
    %618 = shape_of(%var_2730, dtype="int32") /* ty=Tensor[(3), int32] */;
    %619 = cast(%var_2730, dtype="int8") /* ty=Tensor[(9, 7, 9), int8] */;
    %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %621 = add(%619, %620) /* ty=Tensor[(9, 7, 9), int8] */;
    %622 = cast(%621, dtype="float64") /* ty=Tensor[(9, 7, 9), float64] */;
    %623 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(%610, dtype="float64") /* ty=Tensor[(9, 7, 9), float64] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %626 = %608.2;
    %627 = logical_and(%615, %616) /* ty=Tensor[(9, 7, 9), bool] */;
    %628 = mod(%624, %625) /* ty=Tensor[(9, 7, 9), float64] */;
    (%626, meta[relay.Constant][30] /* ty=Tensor[(18, 6), int32] */, %627, %628)
  };
  %629(%var_2788, %var_2789) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(18, 6), int32], Tensor[(9, 7, 9), bool], Tensor[(9, 7, 9), float64]) */
}

def @func_4319() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %634 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %630 = @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %631 = @func_2825() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %632 = %630.2;
    %633 = %631.0;
    (%632, %633)
  };
  %634() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_9055(%var_9050: uint32, %var_9051: Tensor[(13, 9, 14), uint32]) -> Tensor[(13, 9, 14), uint32] {
  %635 = cast(%var_9050, dtype="uint32") /* ty=uint32 */;
  %636 = cast(%var_9051, dtype="uint32") /* ty=Tensor[(13, 9, 14), uint32] */;
  bitwise_and(%635, %636) /* ty=Tensor[(13, 9, 14), uint32] */
}

def @func_5410() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %641 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %637 = @func_2546() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %638 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %639 = %637.0;
    %640 = %638.0;
    (%639, %640)
  };
  %641() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_6808() -> Tensor[(2, 16, 9), float64] {
  @func_6460() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_6521(%var_6519: Tensor[(3136), uint64]) -> (Tensor[(2, 16, 9), float64], uint64, Tensor[(1, 1920), int64], Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) {
  @func_6518(%var_6519) /* ty=(Tensor[(2, 16, 9), float64], uint64, Tensor[(1, 1920), int64], Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) */
}

def @func_1278(%var_1220: Tensor[(2, 16, 9), float64], %var_1241: uint64, %var_1242: Tensor[(196, 16), uint64], %var_1262: Tensor[(196, 16), uint64]) -> (Tensor[(2, 16, 9), int32], Tensor[(16, 14, 14), bool], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32], Tensor[(196, 16), int64], Tensor[(196, 16), bool], Tensor[(196, 16), float64], Tensor[(2, 16, 9), float64]) {
  %642 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %643 = %642.0;
  %644 = cast(%var_1220, dtype="int32") /* ty=Tensor[(2, 16, 9), int32] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="int32") /* ty=Tensor[(2, 16, 9), int32] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %648 = cast(%var_1241, dtype="uint64") /* ty=uint64 */;
  %649 = cast(%var_1242, dtype="uint64") /* ty=Tensor[(196, 16), uint64] */;
  %650 = reshape(%648, newshape=[]) /* ty=uint64 */;
  %651 = reshape(%649, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), uint64] */;
  %652 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %653 = multiply(%646, %647) /* ty=Tensor[(2, 16, 9), int32] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %655 = reshape(%654, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float64] */;
  %656 = @func_1160(%655) /* ty=(Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float32]) */;
  %657 = cast(%var_1242, dtype="float32") /* ty=Tensor[(196, 16), float32] */;
  %658 = sinh(%657) /* ty=Tensor[(196, 16), float32] */;
  %659 = cast(%658, dtype="int64") /* ty=Tensor[(196, 16), int64] */;
  %660 = cast(%var_1241, dtype="int64") /* ty=int64 */;
  %661 = cast(%var_1262, dtype="bool") /* ty=Tensor[(196, 16), bool] */;
  %662 = shape_of(%var_1242, dtype="int32") /* ty=Tensor[(2), int32] */;
  %663 = cast(%var_1242, dtype="bool") /* ty=Tensor[(196, 16), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %665 = cast(%658, dtype="float64") /* ty=Tensor[(196, 16), float64] */;
  %666 = cast(%643, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %667 = @func_1107(%650, %651) /* ty=Tensor[(16, 14, 14), bool] */;
  %668 = %652.3;
  %669 = %656.0;
  %670 = maximum(%659, %660) /* ty=Tensor[(196, 16), int64] */;
  %671 = not_equal(%663, %664) /* ty=Tensor[(196, 16), bool] */;
  %672 = sigmoid(%665) /* ty=Tensor[(196, 16), float64] */;
  %673 = asinh(%666) /* ty=Tensor[(2, 16, 9), float64] */;
  (%653, %667, %668, %669, %670, %671, %672, %673)
}

def @func_3488(%var_3472: Tensor[(468, 1), float64]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 12, 13), float64], Tensor[(468, 1), float64], Tensor[(2, 16, 9), float64], Tensor[(600), float32], Tensor[(2, 16, 9), float64]) {
  %674 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %675 = cast(meta[relay.Constant][31] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %676 = reshape(%675, newshape=[10, 12, 5]) /* ty=Tensor[(10, 12, 5), uint64] */;
  %677 = @func_3202(%676) /* ty=(Tensor[(10, 12, 5), uint64], Tensor[(2, 16, 9), float64]) */;
  %678 = @func_580() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %679 = cast(%var_3472, dtype="float64") /* ty=Tensor[(468, 1), float64] */;
  %680 = reshape(%679, newshape=[3, 12, 13]) /* ty=Tensor[(3, 12, 13), float64] */;
  %681 = @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %682 = cast(meta[relay.Constant][31] /* ty=Tensor[(600), uint64] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %683 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %684 = %674.0;
  %685 = %677.1;
  %686 = %678.0;
  %687 = @func_2948(%680) /* ty=Tensor[(3, 12, 13), float64] */;
  %688 = %681.1;
  %689 = sigmoid(%682) /* ty=Tensor[(600), float32] */;
  %690 = %683.0;
  (%684, %685, %686, %687, %var_3472, %688, %689, %690)
}

def @func_8398(%var_8396: Tensor[(288), float64]) -> (Tensor[(320), uint8], Tensor[(2, 16, 9), uint64], Tensor[(288), float64]) {
  @func_8395(%var_8396) /* ty=(Tensor[(320), uint8], Tensor[(2, 16, 9), uint64], Tensor[(288), float64]) */
}

def @func_2426() -> (Tensor[(2, 16, 9), float64],) {
  %691 = @func_788() /* ty=Tensor[(2, 16, 9), float64] */;
  (%691,)
}

def @func_510() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32]) {
  %696 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32]) {
    %692 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
    %693 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
    %694 = %692.0;
    %695 = %693.3;
    (%694, %695)
  };
  %696() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32]) */
}

def @func_1735() -> (Tensor[(2, 16, 9), float64],) {
  @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_4138() -> Tensor[(2, 16, 9), float64] {
  %698 = fn () -> Tensor[(2, 16, 9), float64] {
    %697 = @func_2583() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %697.0
  };
  %698() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8182() -> (Tensor[(2, 160), uint8],) {
  %701 = fn () -> (Tensor[(2, 160), uint8],) {
    %699 = @func_6411() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 160), uint8]) */;
    %700 = %699.2;
    (%700,)
  };
  %701() /* ty=(Tensor[(2, 160), uint8],) */
}

def @func_3215() -> (Tensor[(2, 16, 9), float64],) {
  %703 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %702 = @func_2321() /* ty=Tensor[(2, 16, 9), float64] */;
    (%702,)
  };
  %703() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_2428() -> (Tensor[(2, 16, 9), float64],) {
  @func_2426() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_6851() -> (Tensor[(2, 16, 9), float64], Tensor[(8, 2, 5), float64]) {
  @func_6849() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(8, 2, 5), float64]) */
}

def @func_4781(%var_4779: Tensor[(6, 8, 4), uint8]) -> (Tensor[(6, 8, 4), uint8], Tensor[(6, 8, 4), bool], Tensor[(2, 16, 9), float64]) {
  @func_4778(%var_4779) /* ty=(Tensor[(6, 8, 4), uint8], Tensor[(6, 8, 4), bool], Tensor[(2, 16, 9), float64]) */
}

def @func_8773() -> Tensor[(2, 16, 9), float64] {
  %704 = @func_3004() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %704.0
}

def @func_8623(%var_8621: Tensor[(1274), uint32]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(13, 14, 7), uint32], Tensor[(1274), uint32], Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_8620(%var_8621) /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(13, 14, 7), uint32], Tensor[(1274), uint32], Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_4945() -> (Tensor[(2, 16, 9), float64],) {
  @func_4943() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_6940() -> (Tensor[(13, 4, 15), float64], Tensor[(2, 16, 9), float64], Tensor[(288), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_6938() /* ty=(Tensor[(13, 4, 15), float64], Tensor[(2, 16, 9), float64], Tensor[(288), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_3542() -> Tensor[(2, 16, 9), float64] {
  %706 = fn () -> Tensor[(2, 16, 9), float64] {
    %705 = @func_580() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %705.0
  };
  %706() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_7208() -> Tensor[(2, 16, 9), float64] {
  %707 = fn () -> Tensor[(2, 16, 9), float64] {
    @func_681() /* ty=Tensor[(2, 16, 9), float64] */
  };
  %707() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_5373(%var_5372: Tensor[(6, 10, 16), int8]) -> Tensor[(6, 10, 16), int8] {
  %712 = fn (%var_5334: Tensor[(6, 10, 16), int8]) -> Tensor[(6, 10, 16), int8] {
    %708 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 10, 16), int8] */, dtype="int8") /* ty=Tensor[(6, 10, 16), int8] */;
    %709 = shape_of(%var_5334, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%var_5334, dtype="int8") /* ty=Tensor[(6, 10, 16), int8] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_or(%710, %711) /* ty=Tensor[(6, 10, 16), int8] */
  };
  %712(%var_5372) /* ty=Tensor[(6, 10, 16), int8] */
}

def @func_7865() -> Tensor[(2, 16, 9), float64] {
  %714 = fn () -> Tensor[(2, 16, 9), float64] {
    %713 = @func_4596() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %713.0
  };
  %714() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_9059(%var_9057: uint32, %var_9058: Tensor[(13, 9, 14), uint32]) -> Tensor[(13, 9, 14), uint32] {
  @func_9055(%var_9057, %var_9058) /* ty=Tensor[(13, 9, 14), uint32] */
}

def @func_4062() -> (Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) {
  %715 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
  %716 = @func_1733() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %717 = %716.0;
  %718 = cast(%717, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
  %719 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%715, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %722 = logical_or(%720, %721) /* ty=Tensor[(2, 16, 9), bool] */;
  %723 = @func_3541() /* ty=Tensor[(2, 16, 9), float64] */;
  (%722, %723)
}

def @func_1652() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %724 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %725 = @func_509() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32]) */;
  %726 = %724.0;
  %727 = @func_609() /* ty=Tensor[(2, 16, 9), float64] */;
  %728 = %725.0;
  (%726, %727, %728)
}

def @func_5287() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050, 1), uint32]) {
  @func_5285() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(10, 15, 7), float32], Tensor[(1050, 1), uint32]) */
}

def @func_5567() -> (Tensor[(2, 16, 9), float64],) {
  %731 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %729 = @func_4087() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %730 = %729.1;
    (%730,)
  };
  %731() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_6602() -> Tensor[(2, 16, 9), float64] {
  %732 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %732.0
}

def @func_8348() -> Tensor[(2, 16, 9), float64] {
  @func_7651() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_2827() -> (Tensor[(2, 16, 9), float64],) {
  @func_2825() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_1940() -> Tensor[(2, 16, 9), float64] {
  %733 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %733.0
}

def @func_1775(%var_1773: Tensor[(6, 12, 2), int8], %var_1774: Tensor[(6, 12, 2), int8]) -> (Tensor[(6, 12, 2), bool], Tensor[(2, 16, 9), float64]) {
  @func_1771(%var_1773, %var_1774) /* ty=(Tensor[(6, 12, 2), bool], Tensor[(2, 16, 9), float64]) */
}

def @func_3927(%var_3892: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) {
  %734 = @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %735 = %734.1;
  %736 = cast(%var_3892, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="float32") /* ty=Tensor[(2, 16, 9), float32] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %740 = cast(%var_3892, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
  %741 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%735, dtype="bool") /* ty=Tensor[(2, 16, 9), bool] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %744 = @func_2546() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %745 = floor_mod(%738, %739) /* ty=Tensor[(2, 16, 9), float32] */;
  %746 = greater_equal(%742, %743) /* ty=Tensor[(2, 16, 9), bool] */;
  %747 = %744.0;
  (%745, %746, %747)
}

def @func_7515(%var_7419: Tensor[(13, 11, 13), int8], %var_7420: Tensor[(13, 11, 13), int8], %var_7466: Tensor[(13, 11, 13), int8]) -> (Tensor[(13, 11, 13), float32], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(13, 11, 13), float32], Tensor[(2, 16, 9), float64], Tensor[(13, 11, 13), float64]) {
  %748 = cast(%var_7420, dtype="int8") /* ty=Tensor[(13, 11, 13), int8] */;
  %749 = shape_of(%var_7419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%var_7419, dtype="int8") /* ty=Tensor[(13, 11, 13), int8] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %752 = maximum(%750, %751) /* ty=Tensor[(13, 11, 13), int8] */;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(13, 11, 13), float32] */;
  %754 = shape_of(%var_7419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%var_7419, dtype="float32") /* ty=Tensor[(13, 11, 13), float32] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %757 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %758 = cast(%var_7466, dtype="float32") /* ty=Tensor[(13, 11, 13), float32] */;
  %759 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%752, dtype="float32") /* ty=Tensor[(13, 11, 13), float32] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %762 = @func_3833() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %763 = cast(%var_7419, dtype="float64") /* ty=Tensor[(13, 11, 13), float64] */;
  %764 = mod(%755, %756) /* ty=Tensor[(13, 11, 13), float32] */;
  %765 = %757.0;
  %766 = @func_7023() /* ty=Tensor[(2, 16, 9), float64] */;
  %767 = minimum(%760, %761) /* ty=Tensor[(13, 11, 13), float32] */;
  %768 = %762.0;
  %769 = sigmoid(%763) /* ty=Tensor[(13, 11, 13), float64] */;
  (%764, %765, %766, %767, %768, %769)
}

def @func_4064() -> (Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) {
  @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */
}

def @func_5433() -> (Tensor[(2, 16, 9), float64],) {
  %771 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %770 = @func_1210() /* ty=Tensor[(2, 16, 9), float64] */;
    (%770,)
  };
  %771() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_7320(%var_7318: Tensor[(7, 8, 3), bool], %var_7319: Tensor[(7, 8, 3), bool]) -> (Tensor[(7, 8, 3), bool], Tensor[(2, 16, 9), float64], Tensor[(7, 8, 3), uint32]) {
  %784 = fn (%var_7286: Tensor[(7, 8, 3), bool], %var_7287: Tensor[(7, 8, 3), bool]) -> (Tensor[(7, 8, 3), bool], Tensor[(2, 16, 9), float64], Tensor[(7, 8, 3), uint32]) {
    %772 = cast(%var_7287, dtype="bool") /* ty=Tensor[(7, 8, 3), bool] */;
    %773 = shape_of(%var_7286, dtype="int32") /* ty=Tensor[(3), int32] */;
    %774 = cast(%var_7286, dtype="bool") /* ty=Tensor[(7, 8, 3), bool] */;
    %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %776 = @func_1652() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %777 = cast(%var_7287, dtype="uint32") /* ty=Tensor[(7, 8, 3), uint32] */;
    %778 = shape_of(%var_7286, dtype="int32") /* ty=Tensor[(3), int32] */;
    %779 = cast(%var_7286, dtype="uint32") /* ty=Tensor[(7, 8, 3), uint32] */;
    %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %781 = logical_or(%774, %775) /* ty=Tensor[(7, 8, 3), bool] */;
    %782 = %776.2;
    %783 = bitwise_and(%779, %780) /* ty=Tensor[(7, 8, 3), uint32] */;
    (%781, %782, %783)
  };
  %784(%var_7318, %var_7319) /* ty=(Tensor[(7, 8, 3), bool], Tensor[(2, 16, 9), float64], Tensor[(7, 8, 3), uint32]) */
}

def @func_2825() -> (Tensor[(2, 16, 9), float64],) {
  %785 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %786 = %785.0;
  (%786,)
}

def @func_5758() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %787 = @func_2583() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %788 = @func_788() /* ty=Tensor[(2, 16, 9), float64] */;
  %789 = %787.0;
  (%788, %789)
}

def @func_4721() -> (Tensor[(2, 16, 9), float64],) {
  @func_4719() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_8051() -> Tensor[(2, 16, 9), float64] {
  %790 = fn () -> Tensor[(2, 16, 9), float64] {
    @func_7023() /* ty=Tensor[(2, 16, 9), float64] */
  };
  %790() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_7591() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(168, 3), int64], Tensor[(2, 16, 9), float64]) {
  %804 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(168, 3), int64], Tensor[(2, 16, 9), float64]) {
    %791 = @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
    %792 = cast(meta[relay.Constant][33] /* ty=Tensor[(168, 1), bool] */, dtype="bool") /* ty=Tensor[(168, 1), bool] */;
    %793 = cast(meta[relay.Constant][33] /* ty=Tensor[(168, 1), bool] */, dtype="bool") /* ty=Tensor[(168, 1), bool] */;
    %794 = reshape(%792, newshape=[7, 8, 3]) /* ty=Tensor[(7, 8, 3), bool] */;
    %795 = reshape(%793, newshape=[7, 8, 3]) /* ty=Tensor[(7, 8, 3), bool] */;
    %796 = @func_7317(%794, %795) /* ty=(Tensor[(7, 8, 3), bool], Tensor[(2, 16, 9), float64], Tensor[(7, 8, 3), uint32]) */;
    %797 = cast(meta[relay.Constant][33] /* ty=Tensor[(168, 1), bool] */, dtype="int64") /* ty=Tensor[(168, 1), int64] */;
    %798 = cast(meta[relay.Constant][34] /* ty=Tensor[(168, 3), bool] */, dtype="int64") /* ty=Tensor[(168, 3), int64] */;
    %799 = @func_5566() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %800 = %791.1;
    %801 = %796.1;
    %802 = add(%797, %798) /* ty=Tensor[(168, 3), int64] */;
    %803 = %799.0;
    (%800, %801, %802, %803)
  };
  %804() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(168, 3), int64], Tensor[(2, 16, 9), float64]) */
}

def @func_2696(%var_2695: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), uint64],) {
  %812 = fn (%var_2685: Tensor[(2, 16, 9), float64]) -> (Tensor[(2, 16, 9), uint64],) {
    %805 = @func_2583() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %806 = %805.0;
    %807 = cast(%var_2685, dtype="uint64") /* ty=Tensor[(2, 16, 9), uint64] */;
    %808 = shape_of(%806, dtype="int32") /* ty=Tensor[(3), int32] */;
    %809 = cast(%806, dtype="uint64") /* ty=Tensor[(2, 16, 9), uint64] */;
    %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %811 = bitwise_and(%809, %810) /* ty=Tensor[(2, 16, 9), uint64] */;
    (%811,)
  };
  %812(%var_2695) /* ty=(Tensor[(2, 16, 9), uint64],) */
}

def @func_2403(%var_2402: Tensor[(10, 15, 7), uint32]) -> (Tensor[(10, 15, 7), float32],) {
  %823 = fn (%var_2380: Tensor[(10, 15, 7), uint32]) -> (Tensor[(10, 15, 7), float32],) {
    %813 = cast(%var_2380, dtype="uint32") /* ty=Tensor[(10, 15, 7), uint32] */;
    %814 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(10, 15, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %815 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 15, 7), uint32] */, dtype="uint32") /* ty=Tensor[(10, 15, 7), uint32] */;
    %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %817 = right_shift(%815, %816) /* ty=Tensor[(10, 15, 7), uint32] */;
    %818 = cast(%817, dtype="float32") /* ty=Tensor[(10, 15, 7), float32] */;
    %819 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(10, 15, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %820 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 15, 7), uint32] */, dtype="float32") /* ty=Tensor[(10, 15, 7), float32] */;
    %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %822 = add(%820, %821) /* ty=Tensor[(10, 15, 7), float32] */;
    (%822,)
  };
  %823(%var_2402) /* ty=(Tensor[(10, 15, 7), float32],) */
}

def @func_3004() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %824 = @func_1053() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %825 = @func_2813() /* ty=Tensor[(2, 16, 9), float64] */;
  %826 = %824.0;
  (%825, %826)
}

def @func_2350(%var_2348: Tensor[(8, 1, 13), int8]) -> Tensor[(8, 8, 13), int8] {
  @func_2347(%var_2348) /* ty=Tensor[(8, 8, 13), int8] */
}

def @func_2583() -> (Tensor[(2, 16, 9), float64],) {
  %827 = @func_2321() /* ty=Tensor[(2, 16, 9), float64] */;
  (%827,)
}

def @func_4596() -> (Tensor[(2, 16, 9), float64],) {
  %828 = @func_1544() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %829 = %828.0;
  (%829,)
}

def @func_8720() -> Tensor[(2, 16, 9), float64] {
  @func_8718() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_1724(%var_1684: Tensor[(15, 2, 7), float64]) -> (Tensor[(288), float32], Tensor[(2, 16, 9), float64], Tensor[(15, 2, 7), float64], Tensor[(15, 2, 7), uint64]) {
  %830 = cast(meta[relay.Constant][36] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %831 = reshape(%830, newshape=[2, 16, 9]) /* ty=Tensor[(2, 16, 9), float32] */;
  %832 = @func_1536(%831) /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %833 = %832.3;
  %834 = cast(%833, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %835 = cast(%var_1684, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %836 = exp(%835) /* ty=Tensor[(15, 2, 7), float64] */;
  %837 = cast(%836, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %838 = cast(%var_1684, dtype="uint64") /* ty=Tensor[(15, 2, 7), uint64] */;
  %839 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(%836, dtype="uint64") /* ty=Tensor[(15, 2, 7), uint64] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %842 = logical_xor(%840, %841) /* ty=Tensor[(15, 2, 7), uint64] */;
  %843 = cast(%836, dtype="uint64") /* ty=Tensor[(15, 2, 7), uint64] */;
  %844 = shape_of(%842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %845 = cast(%842, dtype="uint64") /* ty=Tensor[(15, 2, 7), uint64] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %847 = sqrt(%834) /* ty=Tensor[(2, 16, 9), float64] */;
  %848 = cos(%837) /* ty=Tensor[(15, 2, 7), float64] */;
  %849 = bitwise_or(%845, %846) /* ty=Tensor[(15, 2, 7), uint64] */;
  (meta[relay.Constant][36] /* ty=Tensor[(288), float32] */, %847, %848, %849)
}

def @func_6774() -> Tensor[(2, 16, 9), float64] {
  %851 = fn () -> Tensor[(2, 16, 9), float64] {
    %850 = @func_4343() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %850.1
  };
  %851() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_2547() -> (Tensor[(2, 16, 9), float64],) {
  %854 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %852 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %853 = %852.0;
    (%853,)
  };
  %854() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_456(%var_423: Tensor[(3, 9, 4), int32], %var_424: Tensor[(3, 9, 4), int32]) -> (Tensor[(3, 9, 4), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %855 = cast(%var_424, dtype="bool") /* ty=Tensor[(3, 9, 4), bool] */;
  %856 = shape_of(%var_423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%var_423, dtype="bool") /* ty=Tensor[(3, 9, 4), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %859 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %860 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
  %861 = not_equal(%857, %858) /* ty=Tensor[(3, 9, 4), bool] */;
  %862 = %859.0;
  %863 = %860.0;
  (%861, %862, %863)
}

def @func_8119() -> (Tensor[(2, 16, 9), bool],) {
  %866 = fn () -> (Tensor[(2, 16, 9), bool],) {
    %864 = @func_4062() /* ty=(Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64]) */;
    %865 = %864.0;
    (%865,)
  };
  %866() /* ty=(Tensor[(2, 16, 9), bool],) */
}

def @func_958() -> (Tensor[(2, 16, 9), float64],) {
  %869 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %867 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %868 = %867.0;
    (%868,)
  };
  %869() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_681() -> Tensor[(2, 16, 9), float64] {
  %870 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %870.0
}

def @func_2239() -> Tensor[(2, 16, 9), float64] {
  %871 = @func_1872() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %871.0
}

def @func_5543(%var_5542: Tensor[(320, 1), uint8]) -> (Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), int64], Tensor[(2, 16, 9), float64]) {
  %892 = fn (%var_5508: Tensor[(320, 1), uint8]) -> (Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), int64], Tensor[(2, 16, 9), float64]) {
    %872 = @func_402() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float32]) */;
    %873 = @func_4087() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %874 = @func_4398() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float32], Tensor[(2, 16, 9), float64], uint64) */;
    %875 = @func_1380() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %876 = cast(%var_5508, dtype="uint8") /* ty=Tensor[(320, 1), uint8] */;
    %877 = reshape(%876, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), uint8] */;
    %878 = @func_2062(%877) /* ty=Tensor[(5, 8, 8), uint8] */;
    %879 = cast(%878, dtype="uint8") /* ty=Tensor[(5, 8, 8), uint8] */;
    %880 = reshape(%879, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), uint8] */;
    %881 = @func_2062(%880) /* ty=Tensor[(5, 8, 8), uint8] */;
    %882 = cast(%878, dtype="int64") /* ty=Tensor[(5, 8, 8), int64] */;
    %883 = shape_of(%881, dtype="int32") /* ty=Tensor[(3), int32] */;
    %884 = cast(%881, dtype="int64") /* ty=Tensor[(5, 8, 8), int64] */;
    %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %886 = %872.2;
    %887 = %873.0;
    %888 = %874.3;
    %889 = %875.0;
    %890 = bitwise_or(%884, %885) /* ty=Tensor[(5, 8, 8), int64] */;
    %891 = @func_609() /* ty=Tensor[(2, 16, 9), float64] */;
    (%886, %887, %888, %var_5508, %889, %890, %891)
  };
  %892(%var_5542) /* ty=(Tensor[(2, 16, 9), int8], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(320, 1), uint8], Tensor[(2, 16, 9), float64], Tensor[(5, 8, 8), int64], Tensor[(2, 16, 9), float64]) */
}

def @func_8171() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_8169() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_3833() -> (Tensor[(2, 16, 9), float64],) {
  %893 = @func_3541() /* ty=Tensor[(2, 16, 9), float64] */;
  (%893,)
}

def @func_5849(%var_5847: uint64, %var_5848: Tensor[(6, 14, 1), uint64]) -> Tensor[(6, 14, 1), uint64] {
  %896 = fn (%var_5839: uint64, %var_5840: Tensor[(6, 14, 1), uint64]) -> Tensor[(6, 14, 1), uint64] {
    %894 = cast(%var_5839, dtype="uint64") /* ty=uint64 */;
    %895 = cast(%var_5840, dtype="uint64") /* ty=Tensor[(6, 14, 1), uint64] */;
    left_shift(%894, %895) /* ty=Tensor[(6, 14, 1), uint64] */
  };
  %896(%var_5847, %var_5848) /* ty=Tensor[(6, 14, 1), uint64] */
}

def @func_9202() -> Tensor[(2, 16, 9), float64] {
  %898 = fn () -> Tensor[(2, 16, 9), float64] {
    %897 = @func_2426() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %897.0
  };
  %898() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_2374(%var_2372: Tensor[(9, 14, 11), int8], %var_2373: Tensor[(9, 14, 11), int8]) -> (Tensor[(9, 14, 11), int8],) {
  @func_2370(%var_2372, %var_2373) /* ty=(Tensor[(9, 14, 11), int8],) */
}

def @func_3788() -> (Tensor[(2, 16, 9), float64],) {
  @func_3786() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_5260() -> (Tensor[(2, 16, 9), float64],) {
  @func_5258() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_3835() -> (Tensor[(2, 16, 9), float64],) {
  @func_3833() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_5605(%var_5603: bool, %var_5604: Tensor[(1, 10, 3), bool]) -> (Tensor[(1, 10, 3), bool],) {
  %902 = fn (%var_5583: bool, %var_5584: Tensor[(1, 10, 3), bool]) -> (Tensor[(1, 10, 3), bool],) {
    %899 = cast(%var_5583, dtype="bool") /* ty=bool */;
    %900 = cast(%var_5584, dtype="bool") /* ty=Tensor[(1, 10, 3), bool] */;
    %901 = logical_and(%899, %900) /* ty=Tensor[(1, 10, 3), bool] */;
    (%901,)
  };
  %902(%var_5603, %var_5604) /* ty=(Tensor[(1, 10, 3), bool],) */
}

def @func_4267() -> (Tensor[(2, 16, 9), float64], Tensor[(1386), int8], Tensor[(9, 14, 11), bool]) {
  @func_4265() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(1386), int8], Tensor[(9, 14, 11), bool]) */
}

def @func_8620(%var_8582: Tensor[(1274), uint32]) -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(13, 14, 7), uint32], Tensor[(1274), uint32], Tensor[(2, 16, 9), bool], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %903 = @func_4087() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
  %904 = @func_1600() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %905 = cast(%var_8582, dtype="uint32") /* ty=Tensor[(1274), uint32] */;
  %906 = reshape(%905, newshape=[13, 14, 7]) /* ty=Tensor[(13, 14, 7), uint32] */;
  %907 = @func_8118() /* ty=(Tensor[(2, 16, 9), bool],) */;
  %908 = @func_8313() /* ty=(Tensor[(2, 16, 9), float64],) */;
  %909 = %903.0;
  %910 = %904.0;
  %911 = @func_6703(%906) /* ty=Tensor[(13, 14, 7), uint32] */;
  %912 = %907.0;
  %913 = %908.0;
  %914 = @func_7023() /* ty=Tensor[(2, 16, 9), float64] */;
  %915 = @func_7651() /* ty=Tensor[(2, 16, 9), float64] */;
  (%909, %910, %911, %var_8582, %912, %913, %914, %915)
}

def @func_6099() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 9, 4), bool], Tensor[(108), int32], Tensor[(2, 16, 9), float64]) {
  @func_6097() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3, 9, 4), bool], Tensor[(108), int32], Tensor[(2, 16, 9), float64]) */
}

def @func_1942() -> Tensor[(2, 16, 9), float64] {
  @func_1940() /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8242() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %920 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %916 = @func_2467() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %917 = @func_1053() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %918 = %916.1;
    %919 = %917.1;
    (%918, %919)
  };
  %920() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_5258() -> (Tensor[(2, 16, 9), float64],) {
  %921 = @func_1860() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), bool]) */;
  %922 = %921.0;
  (%922,)
}

def @func_581() -> (Tensor[(2, 16, 9), float64],) {
  %925 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %923 = @func_292() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %924 = %923.0;
    (%924,)
  };
  %925() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_8522() -> (Tensor[(2, 16, 9), float64],) {
  @func_8520() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_8294() -> (Tensor[(2, 16, 9), float64],) {
  %927 = fn () -> (Tensor[(2, 16, 9), float64],) {
    %926 = @func_7651() /* ty=Tensor[(2, 16, 9), float64] */;
    (%926,)
  };
  %927() /* ty=(Tensor[(2, 16, 9), float64],) */
}

def @func_7613() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3136), uint64]) {
  %934 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3136), uint64]) {
    %928 = @func_5826() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */;
    %929 = cast(meta[relay.Constant][37] /* ty=Tensor[(3136), uint64] */, dtype="uint64") /* ty=Tensor[(3136), uint64] */;
    %930 = reshape(%929, newshape=[3136]) /* ty=Tensor[(3136), uint64] */;
    %931 = @func_6518(%930) /* ty=(Tensor[(2, 16, 9), float64], uint64, Tensor[(1, 1920), int64], Tensor[(3136), uint64], Tensor[(2, 16, 9), float64]) */;
    %932 = %928.1;
    %933 = %931.4;
    (%932, %933, meta[relay.Constant][37] /* ty=Tensor[(3136), uint64] */)
  };
  %934() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(3136), uint64]) */
}

def @func_1382() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  @func_1380() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

def @func_3204(%var_3203: Tensor[(10, 12, 5), uint64]) -> (Tensor[(10, 12, 5), uint64], Tensor[(2, 16, 9), float64]) {
  %939 = fn (%var_3193: Tensor[(10, 12, 5), uint64]) -> (Tensor[(10, 12, 5), uint64], Tensor[(2, 16, 9), float64]) {
    %935 = cast(meta[relay.Constant][38] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %936 = cast(%var_3193, dtype="uint64") /* ty=Tensor[(10, 12, 5), uint64] */;
    %937 = bitwise_or(%935, %936) /* ty=Tensor[(10, 12, 5), uint64] */;
    %938 = @func_1940() /* ty=Tensor[(2, 16, 9), float64] */;
    (%937, %938)
  };
  %939(%var_3203) /* ty=(Tensor[(10, 12, 5), uint64], Tensor[(2, 16, 9), float64]) */
}

def @func_1054() -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
  %945 = fn () -> (Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) {
    %940 = @func_957() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %941 = @func_653() /* ty=(Tensor[(2, 16, 9), float64],) */;
    %942 = @func_681() /* ty=Tensor[(2, 16, 9), float64] */;
    %943 = %940.0;
    %944 = %941.0;
    (%942, %943, %944)
  };
  %945() /* ty=(Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64], Tensor[(2, 16, 9), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen197/build/output.py:3224: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen197/build/output.py", line 3229, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(960) tvmgen_default_fused_divide_kernel0(float* __restrict__ T_divide, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_divide[(((int)threadIdx.x))] = (placeholder[(0)] / placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

