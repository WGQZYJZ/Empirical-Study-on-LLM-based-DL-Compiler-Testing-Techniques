==========mod==========
#[version = "0.0.5"]
def @func_5813() -> (Tensor[(5, 7, 15), float32], Tensor[(16, 14, 16), bool]) {
  %0 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %1 = @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %2 = %0.1;
  %3 = %1.0;
  (%2, %3)
}

def @func_1197() -> Tensor[(4, 13, 12), bool] {
  %4 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %4.1
}

def @func_4607() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %5 = @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %6 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  %7 = %5.0;
  (%6, %7)
}

def @func_2105() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(650), int64]) {
  %8 = @func_1968() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %10 = reshape(%9, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %11 = @func_2016(%10) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32], Tensor[(650), int64], Tensor[(7, 12, 9), float64], Tensor[(756), float64]) */;
  %12 = %8.0;
  %13 = %11.0;
  (%12, %13, meta[relay.Constant][0] /* ty=Tensor[(650), int64] */)
}

def @func_361() -> (Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) {
  %14 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %17 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
  %18 = rsqrt(%16) /* ty=Tensor[(16, 14, 16), float64] */;
  %19 = %17.1;
  (%18, %19)
}

def @func_1183() -> (Tensor[(52), bool],) {
  %20 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %21 = %20.1;
  (%21,)
}

def @func_3168(%var_3130: Tensor[(7, 16, 9), uint8], %var_3131: Tensor[(7, 16, 9), uint8], %var_3140: Tensor[(7, 16, 9), uint8]) -> (Tensor[(7, 16, 9), uint8], Tensor[(7, 16, 9), uint8], Tensor[(7, 16, 9), float32]) {
  %22 = cast(%var_3131, dtype="uint8") /* ty=Tensor[(7, 16, 9), uint8] */;
  %23 = shape_of(%var_3130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%var_3130, dtype="uint8") /* ty=Tensor[(7, 16, 9), uint8] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %26 = cast(%var_3140, dtype="uint8") /* ty=Tensor[(7, 16, 9), uint8] */;
  %27 = shape_of(%var_3130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%var_3130, dtype="uint8") /* ty=Tensor[(7, 16, 9), uint8] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %30 = cast(%var_3131, dtype="float32") /* ty=Tensor[(7, 16, 9), float32] */;
  %31 = bitwise_xor(%24, %25) /* ty=Tensor[(7, 16, 9), uint8] */;
  %32 = logical_xor(%28, %29) /* ty=Tensor[(7, 16, 9), uint8] */;
  %33 = atan(%30) /* ty=Tensor[(7, 16, 9), float32] */;
  (%31, %32, %33)
}

def @func_2835() -> (Tensor[(9, 1, 14), float64], Tensor[(16, 14, 16), bool], Tensor[(52), bool]) {
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 14), float64] */;
  %35 = @func_2722() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) */;
  %36 = cosh(%34) /* ty=Tensor[(9, 1, 14), float64] */;
  %37 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
  %38 = %35.2;
  (%36, %37, %38)
}

def @func_4862(%var_4841: Tensor[(3, 11, 8), float32]) -> (Tensor[(3, 11, 8), bool],) {
  %39 = cast(%var_4841, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
  %40 = atanh(%39) /* ty=Tensor[(3, 11, 8), float32] */;
  %41 = cast(%40, dtype="float64") /* ty=Tensor[(3, 11, 8), float64] */;
  %42 = log10(%41) /* ty=Tensor[(3, 11, 8), float64] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %47 = greater_equal(%45, %46) /* ty=Tensor[(3, 11, 8), bool] */;
  (%47,)
}

def @func_1968() -> (Tensor[(16, 14, 16), bool],) {
  %48 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  (%48,)
}

def @func_1097(%var_1085: Tensor[(3, 13, 5), int64], %var_1086: Tensor[(3, 13, 5), int64]) -> (Tensor[(3, 13, 5), uint64],) {
  %49 = cast(%var_1086, dtype="int64") /* ty=Tensor[(3, 13, 5), int64] */;
  %50 = shape_of(%var_1085, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%var_1085, dtype="int64") /* ty=Tensor[(3, 13, 5), int64] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %53 = multiply(%51, %52) /* ty=Tensor[(3, 13, 5), int64] */;
  %54 = cast(%var_1086, dtype="uint64") /* ty=Tensor[(3, 13, 5), uint64] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="uint64") /* ty=Tensor[(3, 13, 5), uint64] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %58 = subtract(%56, %57) /* ty=Tensor[(3, 13, 5), uint64] */;
  (%58,)
}

def @func_5643() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %59 = @func_2251() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %60 = @func_5354() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(52), float32]) */;
  %61 = %59.0;
  %62 = %60.0;
  (%61, %62)
}

def @func_1814(%var_1793: Tensor[(195), int64]) -> (Tensor[(16, 14, 16), float64], Tensor[(195), int64], Tensor[(195, 1), int64], Tensor[(5, 7, 15), float32], Tensor[(16, 14, 16), float32]) {
  %63 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %65 = cast(%var_1793, dtype="int64") /* ty=Tensor[(195), int64] */;
  %66 = cast(%var_1793, dtype="uint64") /* ty=Tensor[(195), uint64] */;
  %67 = reshape(%64, newshape=[16, 14, 16]) /* ty=Tensor[(16, 14, 16), float64] */;
  %68 = reshape(%65, newshape=[195, 1]) /* ty=Tensor[(195, 1), int64] */;
  %69 = reshape(%66, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), uint64] */;
  %70 = @func_1602(%67, %68, %69) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32], Tensor[(195, 1), int64], Tensor[(3, 13, 5), bool], Tensor[(52), float64]) */;
  %71 = cast(%63, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %72 = cast(%var_1793, dtype="int64") /* ty=Tensor[(195), int64] */;
  %73 = cast(%var_1793, dtype="uint64") /* ty=Tensor[(195), uint64] */;
  %74 = reshape(%71, newshape=[16, 14, 16]) /* ty=Tensor[(16, 14, 16), float64] */;
  %75 = reshape(%72, newshape=[195, 1]) /* ty=Tensor[(195, 1), int64] */;
  %76 = reshape(%73, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), uint64] */;
  %77 = @func_1602(%74, %75, %76) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32], Tensor[(195, 1), int64], Tensor[(3, 13, 5), bool], Tensor[(52), float64]) */;
  %78 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %79 = cast(%63, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %80 = %70.1;
  %81 = %77.4;
  %82 = %78.1;
  %83 = log2(%79) /* ty=Tensor[(16, 14, 16), float32] */;
  (%80, %var_1793, %81, %82, %83)
}

def @func_1380() -> Tensor[(16, 14, 16), bool] {
  %84 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %84.2
}

def @func_2983(%var_2911: Tensor[(1, 756), float64], %var_2949: Tensor[(1, 16, 9), float32]) -> (Tensor[(7, 12, 9), float64], Tensor[(1, 756), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 16, 9), float64], Tensor[(52), float64], Tensor[(16, 16, 9), bool], Tensor[(?, 16, 9), float64], Tensor[(7, 12, 9), float64], Tensor[(1, 16, 9), float32]) {
  %85 = cast(%var_2911, dtype="float64") /* ty=Tensor[(1, 756), float64] */;
  %86 = reshape(%85, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float64] */;
  %87 = @func_1725(%86) /* ty=(Tensor[(7, 12, 9), float64],) */;
  %88 = @func_1968() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 16, 9), uint64] */, dtype="uint64") /* ty=Tensor[(1, 16, 9), uint64] */;
  %90 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 16, 9), uint64] */, dtype="uint64") /* ty=Tensor[(16, 16, 9), uint64] */;
  %91 = bitwise_xor(%89, %90) /* ty=Tensor[(16, 16, 9), uint64] */;
  %92 = cast(%91, dtype="float64") /* ty=Tensor[(16, 16, 9), float64] */;
  %93 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(16, 16, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 16, 9), uint64] */, dtype="float64") /* ty=Tensor[(16, 16, 9), float64] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %96 = @func_2494() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), float64]) */;
  %97 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 16, 9), uint64] */, dtype="bool") /* ty=Tensor[(1, 16, 9), bool] */;
  %98 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 16, 9), uint64] */, dtype="bool") /* ty=Tensor[(16, 16, 9), bool] */;
  %99 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 16, 9), uint64] */, dtype="float32") /* ty=Tensor[(1, 16, 9), float32] */;
  %100 = asinh(%99) /* ty=Tensor[(1, 16, 9), float32] */;
  %101 = cast(%var_2949, dtype="float64") /* ty=Tensor[(1, 16, 9), float64] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="float64") /* ty=Tensor[(1, 16, 9), float64] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %105 = cast(%var_2911, dtype="float64") /* ty=Tensor[(1, 756), float64] */;
  %106 = reshape(%105, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float64] */;
  %107 = @func_1725(%106) /* ty=(Tensor[(7, 12, 9), float64],) */;
  %108 = cast(%100, dtype="float32") /* ty=Tensor[(1, 16, 9), float32] */;
  %109 = %87.0;
  %110 = %88.0;
  %111 = floor_mod(%94, %95) /* ty=Tensor[(16, 16, 9), float64] */;
  %112 = %96.0;
  %113 = less_equal(%97, %98) /* ty=Tensor[(16, 16, 9), bool] */;
  %114 = floor_divide(%103, %104) /* ty=Tensor[(?, 16, 9), float64] */;
  %115 = %107.0;
  %116 = acos(%108) /* ty=Tensor[(1, 16, 9), float32] */;
  (%109, %var_2911, %110, %111, %112, %113, %114, %115, %116)
}

def @func_3844() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(4, 13, 12), bool]) {
  %117 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %118 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %119 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %120 = %119.0;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(4, 13, 12), float32] */;
  %122 = rsqrt(%121) /* ty=Tensor[(4, 13, 12), float32] */;
  %123 = cast(%122, dtype="float32") /* ty=Tensor[(4, 13, 12), float32] */;
  %124 = sqrt(%123) /* ty=Tensor[(4, 13, 12), float32] */;
  %125 = cast(%120, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %129 = %117.6;
  %130 = %118.2;
  %131 = greater_equal(%127, %128) /* ty=Tensor[(4, 13, 12), bool] */;
  (%129, %130, %131)
}

def @func_5218() -> (Tensor[(4, 13, 12), float64],) {
  %132 = @func_4571() /* ty=Tensor[(4, 13, 12), float64] */;
  (%132,)
}

def @func_2381(%var_2325: Tensor[(650), int64]) -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(650), float64], Tensor[(52), bool], Tensor[(650), float64]) {
  %133 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %134 = cast(meta[relay.Constant][4] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %135 = reshape(%134, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %136 = @func_1704(%135) /* ty=(Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), float64], Tensor[(52), bool], Tensor[(5, 7, 15), float32]) */;
  %137 = cast(%var_2325, dtype="float64") /* ty=Tensor[(650), float64] */;
  %138 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(650), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %139 = cast(meta[relay.Constant][4] /* ty=Tensor[(650), int64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?), float64] */;
  %141 = @func_1183() /* ty=(Tensor[(52), bool],) */;
  %142 = cast(meta[relay.Constant][4] /* ty=Tensor[(650), int64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %143 = %133.0;
  %144 = @func_1047() /* ty=Tensor[(52), float64] */;
  %145 = %136.1;
  %146 = divide(%139, %140) /* ty=Tensor[(650), float64] */;
  %147 = %141.0;
  %148 = cos(%142) /* ty=Tensor[(650), float64] */;
  (%143, %144, %145, %146, %147, %148)
}

def @func_739() -> (Tensor[(16, 14, 16), float64],) {
  %149 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %150 = %149.0;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %152 = sinh(%151) /* ty=Tensor[(16, 14, 16), float64] */;
  (%152,)
}

def @func_4143() -> (Tensor[(16, 14, 16), bool],) {
  %153 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
  (%153,)
}

def @func_1067() -> Tensor[(16, 14, 16), bool] {
  %154 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %154.6
}

def @func_2722() -> (Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) {
  %155 = @func_2420() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool]) */;
  %156 = cast(meta[relay.Constant][5] /* ty=Tensor[(52), bool] */, dtype="bool") /* ty=Tensor[(52), bool] */;
  %157 = reshape(%156, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
  %158 = %155.0;
  %159 = @func_41(%157) /* ty=Tensor[(4, 13, 12), bool] */;
  (%158, %159, meta[relay.Constant][5] /* ty=Tensor[(52), bool] */)
}

def @func_4123() -> (Tensor[(16, 14, 16), bool],) {
  %160 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  (%160,)
}

def @func_3477(%var_3469: Tensor[(52), float64]) -> (Tensor[(52), int64], Tensor[(16, 14, 16), bool]) {
  %161 = @func_2494() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), float64]) */;
  %162 = %161.0;
  %163 = cast(%var_3469, dtype="int64") /* ty=Tensor[(52), int64] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(1), int32] */;
  %165 = cast(%162, dtype="int64") /* ty=Tensor[(52), int64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?), int64] */;
  %167 = @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %168 = maximum(%165, %166) /* ty=Tensor[(52), int64] */;
  %169 = %167.0;
  (%168, %169)
}

def @func_4646() -> (Tensor[(16, 14, 16), bool],) {
  %170 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
  (%170,)
}

def @func_1725(%var_1722: Tensor[(7, 12, 9), float64]) -> (Tensor[(7, 12, 9), float64],) {
  %171 = cast(%var_1722, dtype="float64") /* ty=Tensor[(7, 12, 9), float64] */;
  %172 = asin(%171) /* ty=Tensor[(7, 12, 9), float64] */;
  (%172,)
}

def @func_41(%var_32: Tensor[(4, 13, 1), bool]) -> Tensor[(4, 13, 12), bool] {
  %173 = cast(%var_32, dtype="bool") /* ty=Tensor[(4, 13, 1), bool] */;
  %174 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 13, 12), bool] */, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  logical_and(%173, %174) /* ty=Tensor[(4, 13, 12), bool] */
}

def @func_3570() -> (Tensor[(52), float64], Tensor[(4, 13, 12), bool]) {
  %175 = @func_3181() /* ty=(Tensor[(52), float64],) */;
  %176 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %177 = %175.0;
  %178 = %176.0;
  (%177, %178)
}

def @func_2887(%var_2853: float64, %var_2854: Tensor[(7, 5, 4), float64], %var_2882: Tensor[(52), float64]) -> (Tensor[(7, 5, 4), float64], Tensor[(16, 14, 16), bool], Tensor[(52), int16], Tensor[(52), float64]) {
  %179 = cast(%var_2853, dtype="float64") /* ty=float64 */;
  %180 = cast(%var_2854, dtype="float64") /* ty=Tensor[(7, 5, 4), float64] */;
  %181 = @func_2251() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %182 = cast(%var_2882, dtype="float64") /* ty=Tensor[(52), float64] */;
  %183 = reshape(%182, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %184 = @func_2143(%183) /* ty=(Tensor[(52), int16],) */;
  %185 = mod(%179, %180) /* ty=Tensor[(7, 5, 4), float64] */;
  %186 = %181.0;
  %187 = %184.0;
  (%185, %186, %187, %var_2882)
}

def @func_4011(%var_4006: Tensor[(140), float64]) -> (Tensor[(52), bool], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64]) {
  %188 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %189 = cast(-2.24005f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %190 = cast(%var_4006, dtype="float64") /* ty=Tensor[(140), float64] */;
  %191 = %188.1;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(52), float64] */;
  %193 = reshape(%189, newshape=[]) /* ty=float64 */;
  %194 = reshape(%190, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float64] */;
  %195 = reshape(%192, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %196 = @func_2887(%193, %194, %195) /* ty=(Tensor[(7, 5, 4), float64], Tensor[(16, 14, 16), bool], Tensor[(52), int16], Tensor[(52), float64]) */;
  %197 = %196.0;
  (%191, %197, -2.24005f64 /* ty=float64 */, %var_4006)
}

def @func_3553(%var_3541: Tensor[(140), float64]) -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], float64, Tensor[(140), float64], Tensor[(52), float64]) {
  %198 = @func_1414() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %199 = cast(1.93603f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %200 = cast(%var_3541, dtype="float64") /* ty=Tensor[(140), float64] */;
  %201 = cast(meta[relay.Constant][7] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %202 = reshape(%199, newshape=[]) /* ty=float64 */;
  %203 = reshape(%200, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float64] */;
  %204 = reshape(%201, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %205 = @func_2887(%202, %203, %204) /* ty=(Tensor[(7, 5, 4), float64], Tensor[(16, 14, 16), bool], Tensor[(52), int16], Tensor[(52), float64]) */;
  %206 = %198.0;
  %207 = %205.3;
  (%206, %207, 1.93603f64 /* ty=float64 */, %var_3541, meta[relay.Constant][7] /* ty=Tensor[(52), float64] */)
}

def @func_2016(%var_2009: Tensor[(650), int64]) -> (Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32], Tensor[(650), int64], Tensor[(7, 12, 9), float64], Tensor[(756), float64]) {
  %208 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %209 = cast(%var_2009, dtype="int64") /* ty=Tensor[(650), int64] */;
  %210 = reshape(%209, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %211 = @func_1704(%210) /* ty=(Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), float64], Tensor[(52), bool], Tensor[(5, 7, 15), float32]) */;
  %212 = cast(meta[relay.Constant][8] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %213 = reshape(%212, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float64] */;
  %214 = @func_1725(%213) /* ty=(Tensor[(7, 12, 9), float64],) */;
  %215 = %208.2;
  %216 = %211.6;
  %217 = %214.0;
  (%215, %216, %var_2009, %217, meta[relay.Constant][8] /* ty=Tensor[(756), float64] */)
}

def @func_4298(%var_4283: Tensor[(5, 7, 15), float32]) -> (Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), bool], Tensor[(52), float64]) {
  %218 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %219 = %218.1;
  %220 = cast(%var_4283, dtype="bool") /* ty=Tensor[(5, 7, 15), bool] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="bool") /* ty=Tensor[(5, 7, 15), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = @func_572() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) */;
  %225 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  %226 = logical_and(%222, %223) /* ty=Tensor[(5, 7, 15), bool] */;
  %227 = %224.1;
  (%225, %226, %227)
}

def @func_4187() -> (Tensor[(16, 14, 16), float32],) {
  %228 = @func_2651() /* ty=(Tensor[(16, 14, 16), float32], Tensor[(52), float64]) */;
  %229 = %228.0;
  (%229,)
}

def @func_2420() -> (Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool]) {
  %230 = @func_739() /* ty=(Tensor[(16, 14, 16), float64],) */;
  %231 = %230.0;
  %232 = @func_1197() /* ty=Tensor[(4, 13, 12), bool] */;
  (%231, %232)
}

def @func_5707() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %233 = @func_4143() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %234 = @func_3995() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64]) */;
  %235 = %233.0;
  %236 = cast(%235, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %237 = reshape(%236, newshape=[16, 14, 16]) /* ty=Tensor[(16, 14, 16), float32] */;
  %238 = @func_1778(%237) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), uint32], Tensor[(16, 14, 16), bool]) */;
  %239 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %240 = %234.1;
  %241 = %238.0;
  %242 = %239.2;
  (%235, %240, %241, %242)
}

def @func_1247() -> (Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) {
  %243 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %244 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(5, 7, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %247 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %248 = floor_divide(%245, %246) /* ty=Tensor[(5, 7, 15), float32] */;
  %249 = cosh(%247) /* ty=Tensor[(5, 7, 15), float32] */;
  (%248, %249)
}

def @func_1017(%var_1013: Tensor[(52), bool]) -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) {
  %250 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %251 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
  %252 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %253 = @func_665() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %254 = @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %255 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
  %256 = cast(%var_1013, dtype="bool") /* ty=Tensor[(52), bool] */;
  %257 = reshape(%256, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
  %258 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
  %259 = %250.0;
  %260 = %251.2;
  %261 = %252.0;
  %262 = %253.0;
  %263 = %254.0;
  %264 = %255.1;
  %265 = @func_41(%257) /* ty=Tensor[(4, 13, 12), bool] */;
  (%258, %259, %260, %261, %262, %263, %264, %265, %var_1013)
}

def @func_3236() -> (Tensor[(16, 14, 16), bool],) {
  %266 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  (%266,)
}

def @func_3893() -> (Tensor[(16, 14, 16), bool],) {
  %267 = @func_1968() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %268 = %267.0;
  (%268,)
}

def @func_1778(%var_1758: Tensor[(16, 14, 16), float32]) -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), uint32], Tensor[(16, 14, 16), bool]) {
  %269 = @func_1414() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %270 = @func_1336() /* ty=Tensor[(16, 14, 16), float32] */;
  %271 = cast(%var_1758, dtype="uint32") /* ty=Tensor[(16, 14, 16), uint32] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="uint32") /* ty=Tensor[(16, 14, 16), uint32] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %275 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %276 = %269.0;
  %277 = bitwise_and(%273, %274) /* ty=Tensor[(16, 14, 16), uint32] */;
  %278 = %275.0;
  (%276, %277, %278)
}

def @func_2434() -> (Tensor[(16, 14, 16), float64],) {
  %279 = @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */;
  %280 = %279.0;
  (%280,)
}

def @func_3432(%var_3358: Tensor[(14, 15, 13), uint8], %var_3386: Tensor[(195), int64]) -> (Tensor[(14, 15, 13), uint8], Tensor[(52), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64], Tensor[(195), uint8], Tensor[(16, 14, 16), int8]) {
  %281 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 15, 13), uint8] */, dtype="uint8") /* ty=Tensor[(14, 15, 13), uint8] */;
  %282 = shape_of(%var_3358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_3358, dtype="uint8") /* ty=Tensor[(14, 15, 13), uint8] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %285 = cast(meta[relay.Constant][12] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %286 = reshape(%285, newshape=[12, 4, 14]) /* ty=Tensor[(12, 4, 14), int64] */;
  %287 = @func_1914(%286) /* ty=(Tensor[(12, 4, 14), int64], Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32]) */;
  %288 = cast(%var_3386, dtype="int64") /* ty=Tensor[(195), int64] */;
  %289 = cast(%var_3386, dtype="int64") /* ty=Tensor[(195), int64] */;
  %290 = reshape(%288, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %291 = reshape(%289, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %292 = @func_1097(%290, %291) /* ty=(Tensor[(3, 13, 5), uint64],) */;
  %293 = %292.0;
  %294 = cast(%293, dtype="uint8") /* ty=Tensor[(3, 13, 5), uint8] */;
  %295 = shape_of(%var_3386, dtype="int32") /* ty=Tensor[(1), int32] */;
  %296 = cast(%var_3386, dtype="uint8") /* ty=Tensor[(195), uint8] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %298 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  %299 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 14, 16), bool] */, dtype="int8") /* ty=Tensor[(16, 14, 16), int8] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%298, dtype="int8") /* ty=Tensor[(16, 14, 16), int8] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %303 = minimum(%283, %284) /* ty=Tensor[(14, 15, 13), uint8] */;
  %304 = @func_1047() /* ty=Tensor[(52), float64] */;
  %305 = %287.0;
  %306 = logical_xor(%296, %297) /* ty=Tensor[(195), uint8] */;
  %307 = subtract(%301, %302) /* ty=Tensor[(16, 14, 16), int8] */;
  (%303, %304, %305, meta[relay.Constant][12] /* ty=Tensor[(672), int64] */, %306, %307)
}

def @func_6469() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %308 = @func_4073() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %309 = %308.0;
  %310 = @func_6377() /* ty=Tensor[(16, 14, 16), bool] */;
  (%309, %310)
}

def @func_2651() -> (Tensor[(16, 14, 16), float32], Tensor[(52), float64]) {
  %311 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %312 = @func_1336() /* ty=Tensor[(16, 14, 16), float32] */;
  %313 = %311.1;
  (%312, %313)
}

def @func_5159(%var_5117: Tensor[(14, 9, 7), float32], %var_5118: Tensor[(14, 9, 7), float32], %var_5127: Tensor[(14, 9, 7), float32], %var_5139: Tensor[(4, 13, 12), bool]) -> (Tensor[(14, 9, 7), float32], Tensor[(14, 9, 7), uint16], Tensor[(14, 9, 7), int8], Tensor[(4, 13, 12), float64], Tensor[(14, 9, 7), float64]) {
  %314 = cast(%var_5118, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %315 = shape_of(%var_5117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%var_5117, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %318 = cast(%var_5127, dtype="uint16") /* ty=Tensor[(14, 9, 7), uint16] */;
  %319 = shape_of(%var_5118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_5118, dtype="uint16") /* ty=Tensor[(14, 9, 7), uint16] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %322 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 9, 7), float32] */, dtype="int8") /* ty=Tensor[(14, 9, 7), int8] */;
  %323 = shape_of(%var_5118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_5118, dtype="int8") /* ty=Tensor[(14, 9, 7), int8] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %326 = @func_2251() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %327 = %326.1;
  %328 = cast(%var_5139, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %332 = cast(%var_5117, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %333 = tan(%332) /* ty=Tensor[(14, 9, 7), float32] */;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(14, 9, 7), float64] */;
  %335 = maximum(%316, %317) /* ty=Tensor[(14, 9, 7), float32] */;
  %336 = logical_xor(%320, %321) /* ty=Tensor[(14, 9, 7), uint16] */;
  %337 = minimum(%324, %325) /* ty=Tensor[(14, 9, 7), int8] */;
  %338 = floor_divide(%330, %331) /* ty=Tensor[(4, 13, 12), float64] */;
  %339 = atanh(%334) /* ty=Tensor[(14, 9, 7), float64] */;
  (%335, %336, %337, %338, %339)
}

def @func_1602(%var_1521: Tensor[(16, 14, 16), float64], %var_1550: Tensor[(195, 1), int64], %var_1552: Tensor[(3, 13, 5), uint64]) -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32], Tensor[(195, 1), int64], Tensor[(3, 13, 5), bool], Tensor[(52), float64]) {
  %340 = @func_739() /* ty=(Tensor[(16, 14, 16), float64],) */;
  %341 = %340.0;
  %342 = cast(%var_1521, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %346 = floor_mod(%344, %345) /* ty=Tensor[(16, 14, 16), float32] */;
  %347 = cast(%var_1521, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %351 = cast(%346, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %352 = cast(%var_1550, dtype="int64") /* ty=Tensor[(195, 1), int64] */;
  %353 = cast(%var_1550, dtype="int64") /* ty=Tensor[(195, 1), int64] */;
  %354 = reshape(%352, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %355 = reshape(%353, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %356 = @func_1097(%354, %355) /* ty=(Tensor[(3, 13, 5), uint64],) */;
  %357 = %356.0;
  %358 = cast(%var_1552, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = @func_572() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) */;
  %363 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  %364 = mod(%349, %350) /* ty=Tensor[(16, 14, 16), float64] */;
  %365 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  %366 = sin(%351) /* ty=Tensor[(16, 14, 16), float32] */;
  %367 = greater_equal(%360, %361) /* ty=Tensor[(3, 13, 5), bool] */;
  %368 = %362.2;
  (%363, %364, %365, %366, %var_1550, %367, %368)
}

def @func_3127() -> (Tensor[(16, 14, 16), bool],) {
  %369 = @func_1414() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %370 = %369.0;
  (%370,)
}

def @func_3083(%var_3067: Tensor[(672), int64]) -> (Tensor[(5, 7, 15), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64]) {
  %371 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %372 = %371.0;
  %373 = cast(%372, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
  %374 = cast(%var_3067, dtype="int64") /* ty=Tensor[(672), int64] */;
  %375 = reshape(%374, newshape=[12, 4, 14]) /* ty=Tensor[(12, 4, 14), int64] */;
  %376 = @func_1914(%375) /* ty=(Tensor[(12, 4, 14), int64], Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32]) */;
  %377 = log2(%373) /* ty=Tensor[(5, 7, 15), float64] */;
  %378 = %376.0;
  (%377, %378, %var_3067)
}

def @func_6063() -> (Tensor[(16, 14, 16), bool],) {
  %379 = @func_2105() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(650), int64]) */;
  %380 = %379.0;
  (%380,)
}

def @func_1414() -> (Tensor[(16, 14, 16), bool],) {
  %381 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  (%381,)
}

def @func_3521(%var_3516: Tensor[(5, 7, 15), float32]) -> (Tensor[(5, 7, 15), float64], Tensor[(4, 13, 12), bool], Tensor[(5, 7, 15), float64], Tensor[(5, 7, 15), uint32]) {
  %382 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %383 = %382.1;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
  %385 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %386 = cast(%383, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
  %387 = cast(%var_3516, dtype="uint32") /* ty=Tensor[(5, 7, 15), uint32] */;
  %388 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%383, dtype="uint32") /* ty=Tensor[(5, 7, 15), uint32] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %391 = exp(%384) /* ty=Tensor[(5, 7, 15), float64] */;
  %392 = %385.1;
  %393 = log(%386) /* ty=Tensor[(5, 7, 15), float64] */;
  %394 = add(%389, %390) /* ty=Tensor[(5, 7, 15), uint32] */;
  (%391, %392, %393, %394)
}

def @func_6384(%var_6380: Tensor[(5, 15, 5), float64]) -> (Tensor[(5, 15, 5), float64],) {
  %395 = cast(%var_6380, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %396 = acosh(%395) /* ty=Tensor[(5, 15, 5), float64] */;
  (%396,)
}

def @func_3947(%var_3936: Tensor[(13, 12, 12), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float64]) {
  %397 = cast(%var_3936, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %398 = cast(%var_3936, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %399 = sigmoid(%397) /* ty=Tensor[(13, 12, 12), float32] */;
  %400 = log2(%398) /* ty=Tensor[(13, 12, 12), float64] */;
  (%399, %400)
}

def @func_3995() -> (Tensor[(16, 14, 16), float64], Tensor[(52), float64]) {
  %401 = @func_2708() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) */;
  %402 = @func_572() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) */;
  %403 = %401.2;
  %404 = %402.2;
  (%403, %404)
}

def @func_3259() -> (Tensor[(16, 14, 16), bool],) {
  %405 = @func_2586() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %406 = %405.0;
  (%406,)
}

def @func_3738(%var_3708: Tensor[(10, 3), float64]) -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), bool], Tensor[(3, 13, 5), int32], Tensor[(5, 1, 6), float64], Tensor[(10, 3), float64], Tensor[(16, 14, 16), float32]) {
  %407 = @func_3127() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %408 = cast(meta[relay.Constant][15] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %409 = reshape(%408, newshape=[5, 10, 13]) /* ty=Tensor[(5, 10, 13), int64] */;
  %410 = @func_917(%409) /* ty=(Tensor[(5, 10, 13), int64], Tensor[(4, 13, 12), bool]) */;
  %411 = @func_1852() /* ty=(Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), bool], Tensor[(195), int64]) */;
  %412 = %411.1;
  %413 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 13, 5), bool] */, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %417 = less(%415, %416) /* ty=Tensor[(3, 13, 5), bool] */;
  %418 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 13, 5), bool] */, dtype="uint64") /* ty=Tensor[(3, 13, 5), uint64] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="uint64") /* ty=Tensor[(3, 13, 5), uint64] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %422 = bitwise_xor(%420, %421) /* ty=Tensor[(3, 13, 5), uint64] */;
  %423 = cast(%422, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
  %424 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%417, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %427 = greater(%425, %426) /* ty=Tensor[(3, 13, 5), bool] */;
  %428 = cast(%427, dtype="int32") /* ty=Tensor[(3, 13, 5), int32] */;
  %429 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(3, 13, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 13, 5), bool] */, dtype="int32") /* ty=Tensor[(3, 13, 5), int32] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %432 = cast(%var_3708, dtype="float64") /* ty=Tensor[(10, 3), float64] */;
  %433 = reshape(%432, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float64] */;
  %434 = @func_2267(%433) /* ty=(Tensor[(5, 1, 6), float64],) */;
  %435 = @func_1852() /* ty=(Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), bool], Tensor[(195), int64]) */;
  %436 = %407.0;
  %437 = %410.1;
  %438 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  %439 = bitwise_and(%430, %431) /* ty=Tensor[(3, 13, 5), int32] */;
  %440 = %434.0;
  %441 = %435.0;
  (%436, %437, meta[relay.Constant][15] /* ty=Tensor[(650), int64] */, %438, %439, %440, %var_3708, %441)
}

def @func_5555() -> Tensor[(16, 14, 16), bool] {
  %442 = @func_5024() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool]) */;
  %442.1
}

def @func_3181() -> (Tensor[(52), float64],) {
  %443 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
  %444 = %443.0;
  (%444,)
}

def @func_6648() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float32], float64, Tensor[(1, 140), float64]) {
  %445 = @func_2708() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) */;
  %446 = @func_6063() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %447 = @func_1183() /* ty=(Tensor[(52), bool],) */;
  %448 = %447.0;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(52), float32] */;
  %450 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 140), float64] */, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
  %451 = reshape(%450, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %452 = @func_4011(%451) /* ty=(Tensor[(52), bool], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64]) */;
  %453 = %445.0;
  %454 = %446.0;
  %455 = sigmoid(%449) /* ty=Tensor[(52), float32] */;
  %456 = %452.2;
  (%453, %454, %455, %456, meta[relay.Constant][17] /* ty=Tensor[(1, 140), float64] */)
}

def @func_2143(%var_2133: Tensor[(52), float64]) -> (Tensor[(52), int16],) {
  %457 = @func_1935() /* ty=(Tensor[(52), float64],) */;
  %458 = %457.0;
  %459 = cast(%var_2133, dtype="int16") /* ty=Tensor[(52), int16] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(1), int32] */;
  %461 = cast(%458, dtype="int16") /* ty=Tensor[(52), int16] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?), int16] */;
  %463 = bitwise_or(%461, %462) /* ty=Tensor[(52), int16] */;
  (%463,)
}

def @func_408() -> Tensor[(16, 14, 16), bool] {
  %464 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %464.2
}

def @func_4073() -> (Tensor[(16, 14, 16), bool],) {
  %465 = @func_3127() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %466 = %465.0;
  (%466,)
}

def @func_1336() -> Tensor[(16, 14, 16), float32] {
  %467 = @func_665() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %468 = %467.0;
  %469 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  %470 = cast(%469, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %471 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%468, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%472, %473) /* ty=Tensor[(16, 14, 16), float32] */
}

def @func_3341() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) {
  %474 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
  %475 = @func_2708() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) */;
  %476 = @func_1935() /* ty=(Tensor[(52), float64],) */;
  %477 = %474.3;
  %478 = %475.0;
  %479 = %476.0;
  (%477, %478, %479)
}

def @func_1047() -> Tensor[(52), float64] {
  %480 = @func_572() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) */;
  %480.1
}

def @func_1935() -> (Tensor[(52), float64],) {
  %481 = @func_1047() /* ty=Tensor[(52), float64] */;
  (%481,)
}

def @func_496() -> (Tensor[(16, 14, 16), bool],) {
  %482 = @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */;
  %483 = %482.0;
  %484 = @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */;
  %485 = %484.1;
  %486 = cast(%485, dtype="bool") /* ty=Tensor[(16, 14, 16), bool] */;
  %487 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%483, dtype="bool") /* ty=Tensor[(16, 14, 16), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %490 = equal(%488, %489) /* ty=Tensor[(16, 14, 16), bool] */;
  (%490,)
}

def @func_6172(%var_6137: Tensor[(4, 3, 8), float32], %var_6150: Tensor[(4, 3, 8), float32]) -> Tensor[(4, 3, 8), float64] {
  %491 = cast(%var_6137, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %492 = cosh(%491) /* ty=Tensor[(4, 3, 8), float32] */;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %494 = atanh(%493) /* ty=Tensor[(4, 3, 8), float32] */;
  %495 = cast(%var_6150, dtype="uint8") /* ty=Tensor[(4, 3, 8), uint8] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="uint8") /* ty=Tensor[(4, 3, 8), uint8] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %499 = minimum(%497, %498) /* ty=Tensor[(4, 3, 8), uint8] */;
  %500 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 3, 8), uint8] */, dtype="float64") /* ty=Tensor[(4, 3, 8), float64] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="float64") /* ty=Tensor[(4, 3, 8), float64] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%502, %503) /* ty=Tensor[(4, 3, 8), float64] */
}

def @func_5491(%var_5448: Tensor[(5, 7, 15), int8], %var_5463: Tensor[(336, 2), int64]) -> (Tensor[(5, 7, 15), float32], Tensor[(140), float64], Tensor[(540), int8], Tensor[(140), float64], Tensor[(52), float64], Tensor[(336, 2), int64]) {
  %504 = @func_5210() /* ty=(Tensor[(52), bool], Tensor[(5, 7, 15), int8]) */;
  %505 = %504.1;
  %506 = cast(%var_5448, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%505, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %510 = cast(meta[relay.Constant][19] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %511 = cast(meta[relay.Constant][19] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %512 = cast(meta[relay.Constant][20] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %513 = cast(meta[relay.Constant][21] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %514 = cast(meta[relay.Constant][19] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %515 = cast(%var_5463, dtype="int64") /* ty=Tensor[(336, 2), int64] */;
  %516 = reshape(%510, newshape=[9, 5, 12]) /* ty=Tensor[(9, 5, 12), int8] */;
  %517 = reshape(%511, newshape=[9, 5, 12]) /* ty=Tensor[(9, 5, 12), int8] */;
  %518 = reshape(%512, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %519 = reshape(%513, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %520 = reshape(%514, newshape=[9, 5, 12]) /* ty=Tensor[(9, 5, 12), int8] */;
  %521 = reshape(%515, newshape=[672]) /* ty=Tensor[(672), int64] */;
  %522 = @func_4414(%516, %517, %518, %519, %520, %521) /* ty=(Tensor[(9, 5, 12), int8], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64], Tensor[(52), float64], Tensor[(5, 7, 15), float64], Tensor[(672), int64], Tensor[(9, 5, 12), float64], Tensor[(9, 5, 12), float32], Tensor[(52), float64]) */;
  %523 = divide(%508, %509) /* ty=Tensor[(5, 7, 15), float32] */;
  %524 = %522.3;
  (%523, %524, meta[relay.Constant][19] /* ty=Tensor[(540), int8] */, meta[relay.Constant][20] /* ty=Tensor[(140), float64] */, meta[relay.Constant][21] /* ty=Tensor[(52), float64] */, %var_5463)
}

def @func_917(%var_889: Tensor[(5, 10, 13), int64]) -> (Tensor[(5, 10, 13), int64], Tensor[(4, 13, 12), bool]) {
  %525 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 10, 13), int64] */, dtype="int64") /* ty=Tensor[(5, 10, 13), int64] */;
  %526 = shape_of(%var_889, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_889, dtype="int64") /* ty=Tensor[(5, 10, 13), int64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %529 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %530 = left_shift(%527, %528) /* ty=Tensor[(5, 10, 13), int64] */;
  %531 = %529.3;
  (%530, %531)
}

def @func_208() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) {
  %532 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %533 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %534 = %533.1;
  %535 = cast(meta[relay.Constant][23] /* ty=Tensor[(52), bool] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(1), int32] */;
  %537 = cast(%534, dtype="float64") /* ty=Tensor[(52), float64] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?), float64] */;
  %539 = subtract(%537, %538) /* ty=Tensor[(52), float64] */;
  %540 = cast(%539, dtype="bool") /* ty=Tensor[(52), bool] */;
  %541 = reshape(%540, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
  %542 = %532.2;
  %543 = @func_41(%541) /* ty=Tensor[(4, 13, 12), bool] */;
  (%542, %539, %543)
}

def @func_1914(%var_1889: Tensor[(12, 4, 14), int64]) -> (Tensor[(12, 4, 14), int64], Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32]) {
  %544 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 4, 14), int64] */, dtype="int64") /* ty=Tensor[(12, 4, 14), int64] */;
  %545 = shape_of(%var_1889, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%var_1889, dtype="int64") /* ty=Tensor[(12, 4, 14), int64] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %548 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %549 = bitwise_xor(%546, %547) /* ty=Tensor[(12, 4, 14), int64] */;
  %550 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  %551 = %548.1;
  (%549, %550, %551)
}

def @main(%var_6720: Tensor[(140), float64], %var_6735: Tensor[(39, 5), int64], %var_6771: Tensor[(4, 13, 12), bool]) -> (Tensor[(52), float64], float64, Tensor[(140), float64], Tensor[(4, 13, 12), uint16], Tensor[(195), uint8], Tensor[(2730), uint8], Tensor[(39, 5), int64], Tensor[(3, 13, 5), uint64], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), float64], Tensor[(52), bool], Tensor[(4, 13, 12), bool]) {
  %552 = @func_1935() /* ty=(Tensor[(52), float64],) */;
  %553 = cast(%var_6720, dtype="float64") /* ty=Tensor[(140), float64] */;
  %554 = reshape(%553, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %555 = @func_4011(%554) /* ty=(Tensor[(52), bool], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64]) */;
  %556 = @func_3844() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(4, 13, 12), bool]) */;
  %557 = %556.2;
  %558 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 13, 12), bool] */, dtype="uint16") /* ty=Tensor[(4, 13, 12), uint16] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="uint16") /* ty=Tensor[(4, 13, 12), uint16] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %562 = cast(meta[relay.Constant][26] /* ty=Tensor[(2730), uint8] */, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %563 = cast(%var_6735, dtype="int64") /* ty=Tensor[(39, 5), int64] */;
  %564 = reshape(%562, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %565 = reshape(%563, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %566 = @func_3432(%564, %565) /* ty=(Tensor[(14, 15, 13), uint8], Tensor[(52), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64], Tensor[(195), uint8], Tensor[(16, 14, 16), int8]) */;
  %567 = cast(%var_6735, dtype="int64") /* ty=Tensor[(39, 5), int64] */;
  %568 = %566.4;
  %569 = cast(%568, dtype="int64") /* ty=Tensor[(195), int64] */;
  %570 = reshape(%567, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %571 = reshape(%569, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %572 = @func_1097(%570, %571) /* ty=(Tensor[(3, 13, 5), uint64],) */;
  %573 = @func_6530() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool], Tensor[(52), float64]) */;
  %574 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %576 = reshape(%575, newshape=[16, 14, 16]) /* ty=Tensor[(16, 14, 16), float32] */;
  %577 = @func_1778(%576) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), uint32], Tensor[(16, 14, 16), bool]) */;
  %578 = cast(%var_6771, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  %579 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(4, 13, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 13, 12), bool] */, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %582 = cast(%var_6720, dtype="float64") /* ty=Tensor[(140), float64] */;
  %583 = reshape(%582, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %584 = @func_4011(%583) /* ty=(Tensor[(52), bool], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64]) */;
  %585 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 13, 12), bool] */, dtype="float32") /* ty=Tensor[(4, 13, 12), float32] */;
  %586 = asinh(%585) /* ty=Tensor[(4, 13, 12), float32] */;
  %587 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 13, 12), float32] */, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = %552.0;
  %592 = %555.2;
  %593 = add(%560, %561) /* ty=Tensor[(4, 13, 12), uint16] */;
  %594 = %572.0;
  %595 = @func_1047() /* ty=Tensor[(52), float64] */;
  %596 = %573.3;
  %597 = %577.0;
  %598 = power(%580, %581) /* ty=Tensor[(4, 13, 12), float64] */;
  %599 = %584.0;
  %600 = equal(%589, %590) /* ty=Tensor[(4, 13, 12), bool] */;
  (%591, %592, %var_6720, %593, %568, meta[relay.Constant][26] /* ty=Tensor[(2730), uint8] */, %var_6735, %594, %574, %595, %596, %597, %598, %599, %600)
}

def @func_6377() -> Tensor[(16, 14, 16), bool] {
  %601 = @func_4114() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(195), int64], Tensor[(195), float32], Tensor[(52), float64]) */;
  %601.0
}

def @func_2251() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) {
  %602 = @func_2105() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(650), int64]) */;
  %603 = %602.0;
  %604 = @func_1197() /* ty=Tensor[(4, 13, 12), bool] */;
  (%603, %604)
}

def @func_4688(%var_4682: Tensor[(15, 16, 7), float64]) -> (Tensor[(15, 16, 7), float64],) {
  %605 = cast(%var_4682, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %606 = log10(%605) /* ty=Tensor[(15, 16, 7), float64] */;
  (%606,)
}

def @func_5942() -> Tensor[(16, 14, 16), float64] {
  %607 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
  %607.2
}

def @func_4930(%var_4916: Tensor[(12, 14, 9), bool]) -> (Tensor[(12, 14, 9), int8],) {
  %608 = cast(%var_4916, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %609 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(12, 14, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 14, 9), bool] */, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %612 = logical_or(%610, %611) /* ty=Tensor[(12, 14, 9), bool] */;
  %613 = cast(%612, dtype="int8") /* ty=Tensor[(12, 14, 9), int8] */;
  %614 = shape_of(%var_4916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_4916, dtype="int8") /* ty=Tensor[(12, 14, 9), int8] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %617 = minimum(%615, %616) /* ty=Tensor[(12, 14, 9), int8] */;
  (%617,)
}

def @func_108() -> (Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) {
  %618 = cast(meta[relay.Constant][29] /* ty=Tensor[(52), bool] */, dtype="bool") /* ty=Tensor[(52), bool] */;
  %619 = reshape(%618, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
  %620 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %621 = tan(%620) /* ty=Tensor[(16, 14, 16), float64] */;
  %622 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 14, 16), float64] */, dtype="bool") /* ty=Tensor[(16, 14, 16), bool] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="bool") /* ty=Tensor[(16, 14, 16), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = cast(meta[relay.Constant][29] /* ty=Tensor[(52), bool] */, dtype="bool") /* ty=Tensor[(52), bool] */;
  %627 = reshape(%626, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
  %628 = @func_41(%619) /* ty=Tensor[(4, 13, 12), bool] */;
  %629 = greater(%624, %625) /* ty=Tensor[(16, 14, 16), bool] */;
  %630 = @func_41(%627) /* ty=Tensor[(4, 13, 12), bool] */;
  (%628, meta[relay.Constant][29] /* ty=Tensor[(52), bool] */, %629, %630)
}

def @func_5778(%var_5750: Tensor[(16, 14, 16), bool]) -> (Tensor[(16, 14, 16), uint8], Tensor[(16, 14, 16), bool]) {
  %631 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  %632 = cast(%var_5750, dtype="uint8") /* ty=Tensor[(16, 14, 16), uint8] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="uint8") /* ty=Tensor[(16, 14, 16), uint8] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %636 = @func_1414() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %637 = multiply(%634, %635) /* ty=Tensor[(16, 14, 16), uint8] */;
  %638 = %636.0;
  (%637, %638)
}

def @func_4789(%var_4765: Tensor[(195), int64]) -> (Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), uint64], Tensor[(195), int64]) {
  %639 = @func_4187() /* ty=(Tensor[(16, 14, 16), float32],) */;
  %640 = cast(%var_4765, dtype="int64") /* ty=Tensor[(195), int64] */;
  %641 = cast(%var_4765, dtype="int64") /* ty=Tensor[(195), int64] */;
  %642 = reshape(%640, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %643 = reshape(%641, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %644 = @func_1097(%642, %643) /* ty=(Tensor[(3, 13, 5), uint64],) */;
  %645 = %639.0;
  %646 = %644.0;
  (%645, %646, %var_4765)
}

def @func_6530() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool], Tensor[(52), float64]) {
  %647 = @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %648 = @func_3570() /* ty=(Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %649 = @func_2420() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool]) */;
  %650 = %647.0;
  %651 = %648.0;
  %652 = %649.1;
  %653 = @func_1047() /* ty=Tensor[(52), float64] */;
  (%650, %651, %652, %653)
}

def @func_875() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %654 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
  %655 = %654.4;
  %656 = cast(%655, dtype="bool") /* ty=Tensor[(52), bool] */;
  %657 = reshape(%656, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
  %658 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %659 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %660 = cast(%655, dtype="float64") /* ty=Tensor[(52), float64] */;
  %661 = @func_665() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %662 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
  %663 = @func_41(%657) /* ty=Tensor[(4, 13, 12), bool] */;
  %664 = %658.0;
  %665 = %659.0;
  %666 = log(%660) /* ty=Tensor[(52), float64] */;
  %667 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
  %668 = %661.0;
  (%662, %663, %664, %665, %666, %667, %668)
}

def @func_5924(%var_5816: Tensor[(4, 10, 7), float64], %var_5874: Tensor[(3, 13, 5), uint64], %var_5907: Tensor[(4, 10, 7), float64]) -> (Tensor[(16, 14, 16), bool], Tensor[(4, 10, 7), uint8], Tensor[(195), int64], Tensor[(3, 13, 5), int32], Tensor[(16, 14, 16), bool], Tensor[(15, 16, 7), float64], Tensor[(1680), float64], Tensor[(4, 10, 7), uint64], Tensor[(16, 14, 16), bool]) {
  %669 = @func_5062() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %670 = cast(%var_5816, dtype="float64") /* ty=Tensor[(4, 10, 7), float64] */;
  %671 = cosh(%670) /* ty=Tensor[(4, 10, 7), float64] */;
  %672 = cast(%var_5816, dtype="uint8") /* ty=Tensor[(4, 10, 7), uint8] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="uint8") /* ty=Tensor[(4, 10, 7), uint8] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %676 = cast(meta[relay.Constant][32] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %677 = cast(meta[relay.Constant][32] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %678 = reshape(%676, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %679 = reshape(%677, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %680 = @func_1097(%678, %679) /* ty=(Tensor[(3, 13, 5), uint64],) */;
  %681 = %680.0;
  %682 = cast(%var_5874, dtype="int32") /* ty=Tensor[(3, 13, 5), int32] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="int32") /* ty=Tensor[(3, 13, 5), int32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %686 = @func_5707() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %687 = cast(meta[relay.Constant][33] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %688 = reshape(%687, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float64] */;
  %689 = @func_4688(%688) /* ty=(Tensor[(15, 16, 7), float64],) */;
  %690 = cast(%var_5907, dtype="uint64") /* ty=Tensor[(4, 10, 7), uint64] */;
  %691 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%671, dtype="uint64") /* ty=Tensor[(4, 10, 7), uint64] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %694 = @func_5439() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %695 = %669.1;
  %696 = bitwise_and(%674, %675) /* ty=Tensor[(4, 10, 7), uint8] */;
  %697 = add(%684, %685) /* ty=Tensor[(3, 13, 5), int32] */;
  %698 = %686.3;
  %699 = %689.0;
  %700 = maximum(%692, %693) /* ty=Tensor[(4, 10, 7), uint64] */;
  %701 = %694.0;
  (%695, %696, meta[relay.Constant][32] /* ty=Tensor[(195), int64] */, %697, %698, %699, meta[relay.Constant][33] /* ty=Tensor[(1680), float64] */, %700, %701)
}

def @func_4471() -> (Tensor[(16, 14, 16), float64],) {
  %702 = @func_2434() /* ty=(Tensor[(16, 14, 16), float64],) */;
  %703 = %702.0;
  (%703,)
}

def @func_2708() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) {
  %704 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %705 = @func_2251() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %706 = @func_2434() /* ty=(Tensor[(16, 14, 16), float64],) */;
  %707 = %704.3;
  %708 = %705.1;
  %709 = %706.0;
  (%707, %708, %709)
}

def @func_1852() -> (Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), bool], Tensor[(195), int64]) {
  %710 = @func_1336() /* ty=Tensor[(16, 14, 16), float32] */;
  %711 = cast(%710, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %712 = cast(meta[relay.Constant][34] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %713 = cast(meta[relay.Constant][34] /* ty=Tensor[(195), int64] */, dtype="uint64") /* ty=Tensor[(195), uint64] */;
  %714 = reshape(%711, newshape=[16, 14, 16]) /* ty=Tensor[(16, 14, 16), float64] */;
  %715 = reshape(%712, newshape=[195, 1]) /* ty=Tensor[(195, 1), int64] */;
  %716 = reshape(%713, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), uint64] */;
  %717 = @func_1602(%714, %715, %716) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32], Tensor[(195, 1), int64], Tensor[(3, 13, 5), bool], Tensor[(52), float64]) */;
  %718 = %717.5;
  (%710, %718, meta[relay.Constant][34] /* ty=Tensor[(195), int64] */)
}

def @func_283() -> (Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) {
  %719 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %720 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %721 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %722 = %721.2;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %724 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %725 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %726 = %719.1;
  %727 = %720.0;
  %728 = erf(%723) /* ty=Tensor[(16, 14, 16), float64] */;
  %729 = %724.0;
  %730 = %725.1;
  (%726, %727, %728, %729, %730)
}

def @func_572() -> (Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) {
  %731 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %734 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %735 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %736 = asin(%733) /* ty=Tensor[(16, 14, 16), float64] */;
  %737 = %734.1;
  %738 = %735.1;
  (%736, %737, %738)
}

def @func_5354() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(52), float32]) {
  %739 = @func_665() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %740 = @func_1183() /* ty=(Tensor[(52), bool],) */;
  %741 = %740.0;
  %742 = cast(%741, dtype="float64") /* ty=Tensor[(52), float64] */;
  %743 = cast(%741, dtype="float32") /* ty=Tensor[(52), float32] */;
  %744 = %739.1;
  %745 = asin(%742) /* ty=Tensor[(52), float64] */;
  %746 = erf(%743) /* ty=Tensor[(52), float32] */;
  (%744, %745, %746)
}

def @func_2768() -> (Tensor[(16, 14, 16), float64],) {
  %747 = @func_2708() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) */;
  %748 = %747.0;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %750 = atanh(%749) /* ty=Tensor[(16, 14, 16), float64] */;
  (%750,)
}

def @func_4114() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(195), int64], Tensor[(195), float32], Tensor[(52), float64]) {
  %751 = @func_2105() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(650), int64]) */;
  %752 = cast(meta[relay.Constant][35] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %753 = reshape(%752, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %754 = @func_1814(%753) /* ty=(Tensor[(16, 14, 16), float64], Tensor[(195), int64], Tensor[(195, 1), int64], Tensor[(5, 7, 15), float32], Tensor[(16, 14, 16), float32]) */;
  %755 = %754.1;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(195), float32] */;
  %757 = @func_1935() /* ty=(Tensor[(52), float64],) */;
  %758 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  %759 = %751.1;
  %760 = atan(%756) /* ty=Tensor[(195), float32] */;
  %761 = %757.0;
  (%758, %759, meta[relay.Constant][35] /* ty=Tensor[(195), int64] */, %760, %761)
}

def @func_4348() -> (Tensor[(5, 7, 15), float32],) {
  %762 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %763 = %762.1;
  (%763,)
}

def @func_2586() -> (Tensor[(16, 14, 16), bool],) {
  %764 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  (%764,)
}

def @func_665() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %765 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %766 = @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */;
  %767 = %765.0;
  %768 = %766.1;
  (%767, %768)
}

def @func_525() -> (Tensor[(16, 14, 16), bool],) {
  %769 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %770 = %769.0;
  (%770,)
}

def @func_2267(%var_2258: Tensor[(5, 1, 6), float64]) -> (Tensor[(5, 1, 6), float64],) {
  %771 = cast(%var_2258, dtype="float64") /* ty=Tensor[(5, 1, 6), float64] */;
  %772 = sigmoid(%771) /* ty=Tensor[(5, 1, 6), float64] */;
  (%772,)
}

def @func_5439() -> (Tensor[(16, 14, 16), bool],) {
  %773 = @func_4123() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %774 = %773.0;
  (%774,)
}

def @func_4414(%var_4362: Tensor[(9, 5, 12), int8], %var_4363: Tensor[(9, 5, 12), int8], %var_4369: Tensor[(140), float64], %var_4370: Tensor[(52), float64], %var_4375: Tensor[(9, 5, 12), int8], %var_4386: Tensor[(672), int64]) -> (Tensor[(9, 5, 12), int8], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64], Tensor[(52), float64], Tensor[(5, 7, 15), float64], Tensor[(672), int64], Tensor[(9, 5, 12), float64], Tensor[(9, 5, 12), float32], Tensor[(52), float64]) {
  %775 = cast(%var_4363, dtype="int8") /* ty=Tensor[(9, 5, 12), int8] */;
  %776 = shape_of(%var_4362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%var_4362, dtype="int8") /* ty=Tensor[(9, 5, 12), int8] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %779 = cast(-3.65262f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %780 = cast(%var_4369, dtype="float64") /* ty=Tensor[(140), float64] */;
  %781 = cast(%var_4370, dtype="float64") /* ty=Tensor[(52), float64] */;
  %782 = reshape(%779, newshape=[]) /* ty=float64 */;
  %783 = reshape(%780, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float64] */;
  %784 = reshape(%781, newshape=[52]) /* ty=Tensor[(52), float64] */;
  %785 = @func_2887(%782, %783, %784) /* ty=(Tensor[(7, 5, 4), float64], Tensor[(16, 14, 16), bool], Tensor[(52), int16], Tensor[(52), float64]) */;
  %786 = cast(%var_4386, dtype="int64") /* ty=Tensor[(672), int64] */;
  %787 = reshape(%786, newshape=[672]) /* ty=Tensor[(672), int64] */;
  %788 = @func_3083(%787) /* ty=(Tensor[(5, 7, 15), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64]) */;
  %789 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 5, 12), int8] */, dtype="float64") /* ty=Tensor[(9, 5, 12), float64] */;
  %790 = shape_of(%var_4362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%var_4362, dtype="float64") /* ty=Tensor[(9, 5, 12), float64] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %793 = cast(%var_4375, dtype="uint64") /* ty=Tensor[(9, 5, 12), uint64] */;
  %794 = shape_of(%var_4363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%var_4363, dtype="uint64") /* ty=Tensor[(9, 5, 12), uint64] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %797 = subtract(%795, %796) /* ty=Tensor[(9, 5, 12), uint64] */;
  %798 = cast(%797, dtype="float32") /* ty=Tensor[(9, 5, 12), float32] */;
  %799 = @func_3181() /* ty=(Tensor[(52), float64],) */;
  %800 = right_shift(%777, %778) /* ty=Tensor[(9, 5, 12), int8] */;
  %801 = %785.0;
  %802 = %788.0;
  %803 = divide(%791, %792) /* ty=Tensor[(9, 5, 12), float64] */;
  %804 = exp(%798) /* ty=Tensor[(9, 5, 12), float32] */;
  %805 = %799.0;
  (%800, %801, -3.65262f64 /* ty=float64 */, %var_4369, %var_4370, %802, %var_4386, %803, %804, %805)
}

def @func_6573() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32]) {
  %806 = @func_4607() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %807 = %806.0;
  %808 = cast(%807, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %809 = @func_5555() /* ty=Tensor[(16, 14, 16), bool] */;
  %810 = asinh(%808) /* ty=Tensor[(16, 14, 16), float32] */;
  (%809, %810)
}

def @func_5062() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) {
  %811 = @func_4607() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %812 = @func_4073() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %813 = @func_3844() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(4, 13, 12), bool]) */;
  %814 = %811.0;
  %815 = %812.0;
  %816 = %813.2;
  (%814, %815, %816)
}

def @func_1704(%var_1664: Tensor[(650), int64]) -> (Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), float64], Tensor[(52), bool], Tensor[(5, 7, 15), float32]) {
  %817 = @func_1183() /* ty=(Tensor[(52), bool],) */;
  %818 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %819 = cast(%var_1664, dtype="int64") /* ty=Tensor[(650), int64] */;
  %820 = reshape(%819, newshape=[5, 10, 13]) /* ty=Tensor[(5, 10, 13), int64] */;
  %821 = @func_917(%820) /* ty=(Tensor[(5, 10, 13), int64], Tensor[(4, 13, 12), bool]) */;
  %822 = @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */;
  %823 = @func_1183() /* ty=(Tensor[(52), bool],) */;
  %824 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %825 = %817.0;
  %826 = %818.0;
  %827 = %821.1;
  %828 = %822.0;
  %829 = %823.0;
  %830 = %824.0;
  (%825, %826, %827, %var_1664, %828, %829, %830)
}

def @func_5210() -> (Tensor[(52), bool], Tensor[(5, 7, 15), int8]) {
  %831 = @func_2722() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) */;
  %832 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %833 = %832.0;
  %834 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 7, 15), float32] */, dtype="int8") /* ty=Tensor[(5, 7, 15), int8] */;
  %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%833, dtype="int8") /* ty=Tensor[(5, 7, 15), int8] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %838 = %831.2;
  %839 = maximum(%836, %837) /* ty=Tensor[(5, 7, 15), int8] */;
  (%838, %839)
}

def @func_6299(%var_6278: bool, %var_6279: Tensor[(8, 8, 4), bool], %var_6295: Tensor[(195), int64]) -> (Tensor[(8, 8, 4), float32], Tensor[(3, 13, 5), uint64], Tensor[(195), int64]) {
  %840 = cast(%var_6278, dtype="bool") /* ty=bool */;
  %841 = cast(%var_6279, dtype="bool") /* ty=Tensor[(8, 8, 4), bool] */;
  %842 = logical_or(%840, %841) /* ty=Tensor[(8, 8, 4), bool] */;
  %843 = cast(%842, dtype="float32") /* ty=Tensor[(8, 8, 4), float32] */;
  %844 = cast(%var_6295, dtype="int64") /* ty=Tensor[(195), int64] */;
  %845 = reshape(%844, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %846 = @func_4789(%845) /* ty=(Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), uint64], Tensor[(195), int64]) */;
  %847 = sqrt(%843) /* ty=Tensor[(8, 8, 4), float32] */;
  %848 = %846.1;
  (%847, %848, %var_6295)
}

def @func_2494() -> (Tensor[(52), float64], Tensor[(16, 14, 16), float64]) {
  %849 = @func_2420() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool]) */;
  %850 = @func_1047() /* ty=Tensor[(52), float64] */;
  %851 = %849.0;
  (%850, %851)
}

def @func_5024() -> (Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool]) {
  %852 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %853 = @func_2835() /* ty=(Tensor[(9, 1, 14), float64], Tensor[(16, 14, 16), bool], Tensor[(52), bool]) */;
  %854 = %852.2;
  %855 = %853.1;
  (%854, %855)
}

def @func_2609() -> Tensor[(16, 14, 16), bool] {
  @func_1067() /* ty=Tensor[(16, 14, 16), bool] */
}

def @func_6033(%var_6008: Tensor[(195), int64]) -> (Tensor[(195), float32], Tensor[(195), float32]) {
  %856 = @func_1852() /* ty=(Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), bool], Tensor[(195), int64]) */;
  %857 = %856.2;
  %858 = cast(%var_6008, dtype="float32") /* ty=Tensor[(195), float32] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(1), int32] */;
  %860 = cast(%857, dtype="float32") /* ty=Tensor[(195), float32] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?), float32] */;
  %862 = cast(%var_6008, dtype="float32") /* ty=Tensor[(195), float32] */;
  %863 = floor_divide(%860, %861) /* ty=Tensor[(195), float32] */;
  %864 = sigmoid(%862) /* ty=Tensor[(195), float32] */;
  (%863, %864)
}

def @func_5954() -> (Tensor[(16, 14, 16), bool],) {
  %865 = @func_5354() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(52), float32]) */;
  %866 = %865.0;
  (%866,)
}

def @func_4571() -> Tensor[(4, 13, 12), float64] {
  %867 = @func_1197() /* ty=Tensor[(4, 13, 12), bool] */;
  %868 = cast(%867, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  acos(%868) /* ty=Tensor[(4, 13, 12), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5159(%var_5117: Tensor[(14, 9, 7), float32], %var_5118: Tensor[(14, 9, 7), float32], %var_5127: Tensor[(14, 9, 7), float32], %var_5139: Tensor[(4, 13, 12), bool]) -> (Tensor[(14, 9, 7), float32], Tensor[(14, 9, 7), uint16], Tensor[(14, 9, 7), int8], Tensor[(4, 13, 12), float64], Tensor[(14, 9, 7), float64]) {
  %0 = cast(%var_5118, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %1 = shape_of(%var_5117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_5117, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %4 = cast(%var_5127, dtype="uint16") /* ty=Tensor[(14, 9, 7), uint16] */;
  %5 = shape_of(%var_5118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%var_5118, dtype="uint16") /* ty=Tensor[(14, 9, 7), uint16] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 9, 7), float32] */, dtype="int8") /* ty=Tensor[(14, 9, 7), int8] */;
  %9 = shape_of(%var_5118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%var_5118, dtype="int8") /* ty=Tensor[(14, 9, 7), int8] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %12 = @func_2251() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %13 = %12.1;
  %14 = cast(%var_5139, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %18 = cast(%var_5117, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %19 = tan(%18) /* ty=Tensor[(14, 9, 7), float32] */;
  %20 = cast(%19, dtype="float64") /* ty=Tensor[(14, 9, 7), float64] */;
  %21 = maximum(%2, %3) /* ty=Tensor[(14, 9, 7), float32] */;
  %22 = logical_xor(%6, %7) /* ty=Tensor[(14, 9, 7), uint16] */;
  %23 = minimum(%10, %11) /* ty=Tensor[(14, 9, 7), int8] */;
  %24 = floor_divide(%16, %17) /* ty=Tensor[(4, 13, 12), float64] */;
  %25 = atanh(%20) /* ty=Tensor[(14, 9, 7), float64] */;
  (%21, %22, %23, %24, %25)
}

def @func_1337() -> Tensor[(16, 14, 16), float32] {
  %33 = fn () -> Tensor[(16, 14, 16), float32] {
    %26 = @func_665() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
    %27 = %26.0;
    %28 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
    %29 = cast(%28, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
    %30 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
    %31 = cast(%27, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
    %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%31, %32) /* ty=Tensor[(16, 14, 16), float32] */
  };
  %33() /* ty=Tensor[(16, 14, 16), float32] */
}

def @func_4607() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %34 = @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %35 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  %36 = %34.0;
  (%35, %36)
}

def @func_1101(%var_1099: Tensor[(3, 13, 5), int64], %var_1100: Tensor[(3, 13, 5), int64]) -> (Tensor[(3, 13, 5), uint64],) {
  @func_1097(%var_1099, %var_1100) /* ty=(Tensor[(3, 13, 5), uint64],) */
}

def @func_6469() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %37 = @func_4073() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %38 = %37.0;
  %39 = @func_6377() /* ty=Tensor[(16, 14, 16), bool] */;
  (%38, %39)
}

def @func_3083(%var_3067: Tensor[(672), int64]) -> (Tensor[(5, 7, 15), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64]) {
  %40 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
  %43 = cast(%var_3067, dtype="int64") /* ty=Tensor[(672), int64] */;
  %44 = reshape(%43, newshape=[12, 4, 14]) /* ty=Tensor[(12, 4, 14), int64] */;
  %45 = @func_1914(%44) /* ty=(Tensor[(12, 4, 14), int64], Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32]) */;
  %46 = log2(%42) /* ty=Tensor[(5, 7, 15), float64] */;
  %47 = %45.0;
  (%46, %47, %var_3067)
}

def @func_1048() -> Tensor[(52), float64] {
  %49 = fn () -> Tensor[(52), float64] {
    %48 = @func_572() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) */;
    %48.1
  };
  %49() /* ty=Tensor[(52), float64] */
}

def @func_3895() -> (Tensor[(16, 14, 16), bool],) {
  @func_3893() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_4114() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(195), int64], Tensor[(195), float32], Tensor[(52), float64]) {
  %50 = @func_2105() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(650), int64]) */;
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %52 = reshape(%51, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %53 = @func_1814(%52) /* ty=(Tensor[(16, 14, 16), float64], Tensor[(195), int64], Tensor[(195, 1), int64], Tensor[(5, 7, 15), float32], Tensor[(16, 14, 16), float32]) */;
  %54 = %53.1;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(195), float32] */;
  %56 = @func_1935() /* ty=(Tensor[(52), float64],) */;
  %57 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  %58 = %50.1;
  %59 = atan(%55) /* ty=Tensor[(195), float32] */;
  %60 = %56.0;
  (%57, %58, meta[relay.Constant][1] /* ty=Tensor[(195), int64] */, %59, %60)
}

def @func_3571() -> (Tensor[(52), float64], Tensor[(4, 13, 12), bool]) {
  %65 = fn () -> (Tensor[(52), float64], Tensor[(4, 13, 12), bool]) {
    %61 = @func_3181() /* ty=(Tensor[(52), float64],) */;
    %62 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
    %63 = %61.0;
    %64 = %62.0;
    (%63, %64)
  };
  %65() /* ty=(Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */
}

def @func_6065() -> (Tensor[(16, 14, 16), bool],) {
  @func_6063() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_5955() -> (Tensor[(16, 14, 16), bool],) {
  %68 = fn () -> (Tensor[(16, 14, 16), bool],) {
    %66 = @func_5354() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(52), float32]) */;
    %67 = %66.0;
    (%67,)
  };
  %68() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_4933(%var_4931: Tensor[(12, 14, 9), bool]) -> (Tensor[(12, 14, 9), int8],) {
  @func_4930(%var_4931) /* ty=(Tensor[(12, 14, 9), int8],) */
}

def @func_5645() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  @func_5643() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */
}

def @func_2768() -> (Tensor[(16, 14, 16), float64],) {
  %69 = @func_2708() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) */;
  %70 = %69.0;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %72 = atanh(%71) /* ty=Tensor[(16, 14, 16), float64] */;
  (%72,)
}

def @func_3086(%var_3084: Tensor[(672), int64]) -> (Tensor[(5, 7, 15), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64]) {
  @func_3083(%var_3084) /* ty=(Tensor[(5, 7, 15), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64]) */
}

def @func_5064() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) {
  @func_5062() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */
}

def @func_2588() -> (Tensor[(16, 14, 16), bool],) {
  @func_2586() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_1970() -> (Tensor[(16, 14, 16), bool],) {
  @func_1968() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_2143(%var_2133: Tensor[(52), float64]) -> (Tensor[(52), int16],) {
  %73 = @func_1935() /* ty=(Tensor[(52), float64],) */;
  %74 = %73.0;
  %75 = cast(%var_2133, dtype="int16") /* ty=Tensor[(52), int16] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(1), int32] */;
  %77 = cast(%74, dtype="int16") /* ty=Tensor[(52), int16] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?), int16] */;
  %79 = bitwise_or(%77, %78) /* ty=Tensor[(52), int16] */;
  (%79,)
}

def @func_4143() -> (Tensor[(16, 14, 16), bool],) {
  %80 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
  (%80,)
}

def @func_109() -> (Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) {
  %94 = fn () -> (Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) {
    %81 = cast(meta[relay.Constant][2] /* ty=Tensor[(52), bool] */, dtype="bool") /* ty=Tensor[(52), bool] */;
    %82 = reshape(%81, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
    %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
    %84 = tan(%83) /* ty=Tensor[(16, 14, 16), float64] */;
    %85 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 14, 16), float64] */, dtype="bool") /* ty=Tensor[(16, 14, 16), bool] */;
    %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
    %87 = cast(%84, dtype="bool") /* ty=Tensor[(16, 14, 16), bool] */;
    %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %89 = cast(meta[relay.Constant][2] /* ty=Tensor[(52), bool] */, dtype="bool") /* ty=Tensor[(52), bool] */;
    %90 = reshape(%89, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
    %91 = @func_41(%82) /* ty=Tensor[(4, 13, 12), bool] */;
    %92 = greater(%87, %88) /* ty=Tensor[(16, 14, 16), bool] */;
    %93 = @func_41(%90) /* ty=Tensor[(4, 13, 12), bool] */;
    (%91, meta[relay.Constant][2] /* ty=Tensor[(52), bool] */, %92, %93)
  };
  %94() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */
}

def @func_1068() -> Tensor[(16, 14, 16), bool] {
  %96 = fn () -> Tensor[(16, 14, 16), bool] {
    %95 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
    %95.6
  };
  %96() /* ty=Tensor[(16, 14, 16), bool] */
}

def @func_919(%var_918: Tensor[(5, 10, 13), int64]) -> (Tensor[(5, 10, 13), int64], Tensor[(4, 13, 12), bool]) {
  %104 = fn (%var_889: Tensor[(5, 10, 13), int64]) -> (Tensor[(5, 10, 13), int64], Tensor[(4, 13, 12), bool]) {
    %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 10, 13), int64] */, dtype="int64") /* ty=Tensor[(5, 10, 13), int64] */;
    %98 = shape_of(%var_889, dtype="int32") /* ty=Tensor[(3), int32] */;
    %99 = cast(%var_889, dtype="int64") /* ty=Tensor[(5, 10, 13), int64] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %101 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
    %102 = left_shift(%99, %100) /* ty=Tensor[(5, 10, 13), int64] */;
    %103 = %101.3;
    (%102, %103)
  };
  %104(%var_918) /* ty=(Tensor[(5, 10, 13), int64], Tensor[(4, 13, 12), bool]) */
}

def @func_5815() -> (Tensor[(5, 7, 15), float32], Tensor[(16, 14, 16), bool]) {
  @func_5813() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(16, 14, 16), bool]) */
}

def @func_4691(%var_4689: Tensor[(15, 16, 7), float64]) -> (Tensor[(15, 16, 7), float64],) {
  @func_4688(%var_4689) /* ty=(Tensor[(15, 16, 7), float64],) */
}

def @func_1778(%var_1758: Tensor[(16, 14, 16), float32]) -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), uint32], Tensor[(16, 14, 16), bool]) {
  %105 = @func_1414() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %106 = @func_1336() /* ty=Tensor[(16, 14, 16), float32] */;
  %107 = cast(%var_1758, dtype="uint32") /* ty=Tensor[(16, 14, 16), uint32] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%106, dtype="uint32") /* ty=Tensor[(16, 14, 16), uint32] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %111 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %112 = %105.0;
  %113 = bitwise_and(%109, %110) /* ty=Tensor[(16, 14, 16), uint32] */;
  %114 = %111.0;
  (%112, %113, %114)
}

def @func_572() -> (Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) {
  %115 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %116 = %115.0;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %118 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %119 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %120 = asin(%117) /* ty=Tensor[(16, 14, 16), float64] */;
  %121 = %118.1;
  %122 = %119.1;
  (%120, %121, %122)
}

def @func_361() -> (Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) {
  %123 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %126 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
  %127 = rsqrt(%125) /* ty=Tensor[(16, 14, 16), float64] */;
  %128 = %126.1;
  (%127, %128)
}

def @func_741() -> (Tensor[(16, 14, 16), float64],) {
  @func_739() /* ty=(Tensor[(16, 14, 16), float64],) */
}

def @func_4300(%var_4299: Tensor[(5, 7, 15), float32]) -> (Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), bool], Tensor[(52), float64]) {
  %139 = fn (%var_4283: Tensor[(5, 7, 15), float32]) -> (Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), bool], Tensor[(52), float64]) {
    %129 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
    %130 = %129.1;
    %131 = cast(%var_4283, dtype="bool") /* ty=Tensor[(5, 7, 15), bool] */;
    %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
    %133 = cast(%130, dtype="bool") /* ty=Tensor[(5, 7, 15), bool] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %135 = @func_572() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) */;
    %136 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
    %137 = logical_and(%133, %134) /* ty=Tensor[(5, 7, 15), bool] */;
    %138 = %135.1;
    (%136, %137, %138)
  };
  %139(%var_4299) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), bool], Tensor[(52), float64]) */
}

def @func_1019(%var_1018: Tensor[(52), bool]) -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) {
  %156 = fn (%var_1013: Tensor[(52), bool]) -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) {
    %140 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %141 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
    %142 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %143 = @func_665() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
    %144 = @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %145 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
    %146 = cast(%var_1013, dtype="bool") /* ty=Tensor[(52), bool] */;
    %147 = reshape(%146, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
    %148 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
    %149 = %140.0;
    %150 = %141.2;
    %151 = %142.0;
    %152 = %143.0;
    %153 = %144.0;
    %154 = %145.1;
    %155 = @func_41(%147) /* ty=Tensor[(4, 13, 12), bool] */;
    (%148, %149, %150, %151, %152, %153, %154, %155, %var_1013)
  };
  %156(%var_1018) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) */
}

def @func_4471() -> (Tensor[(16, 14, 16), float64],) {
  %157 = @func_2434() /* ty=(Tensor[(16, 14, 16), float64],) */;
  %158 = %157.0;
  (%158,)
}

def @func_1916(%var_1915: Tensor[(12, 4, 14), int64]) -> (Tensor[(12, 4, 14), int64], Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32]) {
  %167 = fn (%var_1889: Tensor[(12, 4, 14), int64]) -> (Tensor[(12, 4, 14), int64], Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32]) {
    %159 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 4, 14), int64] */, dtype="int64") /* ty=Tensor[(12, 4, 14), int64] */;
    %160 = shape_of(%var_1889, dtype="int32") /* ty=Tensor[(3), int32] */;
    %161 = cast(%var_1889, dtype="int64") /* ty=Tensor[(12, 4, 14), int64] */;
    %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %163 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
    %164 = bitwise_xor(%161, %162) /* ty=Tensor[(12, 4, 14), int64] */;
    %165 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
    %166 = %163.1;
    (%164, %165, %166)
  };
  %167(%var_1915) /* ty=(Tensor[(12, 4, 14), int64], Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32]) */
}

def @func_3127() -> (Tensor[(16, 14, 16), bool],) {
  %168 = @func_1414() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %169 = %168.0;
  (%169,)
}

def @func_6530() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool], Tensor[(52), float64]) {
  %170 = @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %171 = @func_3570() /* ty=(Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %172 = @func_2420() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool]) */;
  %173 = %170.0;
  %174 = %171.0;
  %175 = %172.1;
  %176 = @func_1047() /* ty=Tensor[(52), float64] */;
  (%173, %174, %175, %176)
}

def @func_3524(%var_3522: Tensor[(5, 7, 15), float32]) -> (Tensor[(5, 7, 15), float64], Tensor[(4, 13, 12), bool], Tensor[(5, 7, 15), float64], Tensor[(5, 7, 15), uint32]) {
  @func_3521(%var_3522) /* ty=(Tensor[(5, 7, 15), float64], Tensor[(4, 13, 12), bool], Tensor[(5, 7, 15), float64], Tensor[(5, 7, 15), uint32]) */
}

def @func_4123() -> (Tensor[(16, 14, 16), bool],) {
  %177 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  (%177,)
}

def @func_6574() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32]) {
  %183 = fn () -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32]) {
    %178 = @func_4607() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
    %179 = %178.0;
    %180 = cast(%179, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
    %181 = @func_5555() /* ty=Tensor[(16, 14, 16), bool] */;
    %182 = asinh(%180) /* ty=Tensor[(16, 14, 16), float32] */;
    (%181, %182)
  };
  %183() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32]) */
}

def @func_2652() -> (Tensor[(16, 14, 16), float32], Tensor[(52), float64]) {
  %187 = fn () -> (Tensor[(16, 14, 16), float32], Tensor[(52), float64]) {
    %184 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
    %185 = @func_1336() /* ty=Tensor[(16, 14, 16), float32] */;
    %186 = %184.1;
    (%185, %186)
  };
  %187() /* ty=(Tensor[(16, 14, 16), float32], Tensor[(52), float64]) */
}

def @func_2723() -> (Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) {
  %193 = fn () -> (Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) {
    %188 = @func_2420() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool]) */;
    %189 = cast(meta[relay.Constant][7] /* ty=Tensor[(52), bool] */, dtype="bool") /* ty=Tensor[(52), bool] */;
    %190 = reshape(%189, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
    %191 = %188.0;
    %192 = @func_41(%190) /* ty=Tensor[(4, 13, 12), bool] */;
    (%191, %192, meta[relay.Constant][7] /* ty=Tensor[(52), bool] */)
  };
  %193() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) */
}

def @func_5555() -> Tensor[(16, 14, 16), bool] {
  %194 = @func_5024() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool]) */;
  %194.1
}

def @func_3893() -> (Tensor[(16, 14, 16), bool],) {
  %195 = @func_1968() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %196 = %195.0;
  (%196,)
}

def @func_5062() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) {
  %197 = @func_4607() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %198 = @func_4073() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %199 = @func_3844() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(4, 13, 12), bool]) */;
  %200 = %197.0;
  %201 = %198.0;
  %202 = %199.2;
  (%200, %201, %202)
}

def @func_6377() -> Tensor[(16, 14, 16), bool] {
  %203 = @func_4114() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(195), int64], Tensor[(195), float32], Tensor[(52), float64]) */;
  %203.0
}

def @func_5643() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %204 = @func_2251() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %205 = @func_5354() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(52), float32]) */;
  %206 = %204.0;
  %207 = %205.0;
  (%206, %207)
}

def @func_2107() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(650), int64]) {
  @func_2105() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(650), int64]) */
}

def @func_2610() -> Tensor[(16, 14, 16), bool] {
  %208 = fn () -> Tensor[(16, 14, 16), bool] {
    @func_1067() /* ty=Tensor[(16, 14, 16), bool] */
  };
  %208() /* ty=Tensor[(16, 14, 16), bool] */
}

def @func_3182() -> (Tensor[(52), float64],) {
  %211 = fn () -> (Tensor[(52), float64],) {
    %209 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
    %210 = %209.0;
    (%210,)
  };
  %211() /* ty=(Tensor[(52), float64],) */
}

def @func_2018(%var_2017: Tensor[(650), int64]) -> (Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32], Tensor[(650), int64], Tensor[(7, 12, 9), float64], Tensor[(756), float64]) {
  %222 = fn (%var_2009: Tensor[(650), int64]) -> (Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32], Tensor[(650), int64], Tensor[(7, 12, 9), float64], Tensor[(756), float64]) {
    %212 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
    %213 = cast(%var_2009, dtype="int64") /* ty=Tensor[(650), int64] */;
    %214 = reshape(%213, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %215 = @func_1704(%214) /* ty=(Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), float64], Tensor[(52), bool], Tensor[(5, 7, 15), float32]) */;
    %216 = cast(meta[relay.Constant][8] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
    %217 = reshape(%216, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float64] */;
    %218 = @func_1725(%217) /* ty=(Tensor[(7, 12, 9), float64],) */;
    %219 = %212.2;
    %220 = %215.6;
    %221 = %218.0;
    (%219, %220, %var_2009, %221, meta[relay.Constant][8] /* ty=Tensor[(756), float64] */)
  };
  %222(%var_2017) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32], Tensor[(650), int64], Tensor[(7, 12, 9), float64], Tensor[(756), float64]) */
}

def @func_5219() -> (Tensor[(4, 13, 12), float64],) {
  %224 = fn () -> (Tensor[(4, 13, 12), float64],) {
    %223 = @func_4571() /* ty=Tensor[(4, 13, 12), float64] */;
    (%223,)
  };
  %224() /* ty=(Tensor[(4, 13, 12), float64],) */
}

def @main(%var_6720: Tensor[(140), float64], %var_6735: Tensor[(39, 5), int64], %var_6771: Tensor[(4, 13, 12), bool]) -> (Tensor[(52), float64], float64, Tensor[(140), float64], Tensor[(4, 13, 12), uint16], Tensor[(195), uint8], Tensor[(2730), uint8], Tensor[(39, 5), int64], Tensor[(3, 13, 5), uint64], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), float64], Tensor[(52), bool], Tensor[(4, 13, 12), bool]) {
  %225 = @func_1937() /* ty=(Tensor[(52), float64],) */;
  %226 = cast(%var_6720, dtype="float64") /* ty=Tensor[(140), float64] */;
  %227 = reshape(%226, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %228 = @func_4013(%227) /* ty=(Tensor[(52), bool], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64]) */;
  %229 = @func_3845() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(4, 13, 12), bool]) */;
  %230 = %229.2;
  %231 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 13, 12), bool] */, dtype="uint16") /* ty=Tensor[(4, 13, 12), uint16] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="uint16") /* ty=Tensor[(4, 13, 12), uint16] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %235 = cast(meta[relay.Constant][10] /* ty=Tensor[(2730), uint8] */, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %236 = cast(%var_6735, dtype="int64") /* ty=Tensor[(39, 5), int64] */;
  %237 = reshape(%235, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %238 = reshape(%236, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %239 = @func_3435(%237, %238) /* ty=(Tensor[(14, 15, 13), uint8], Tensor[(52), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64], Tensor[(195), uint8], Tensor[(16, 14, 16), int8]) */;
  %240 = cast(%var_6735, dtype="int64") /* ty=Tensor[(39, 5), int64] */;
  %241 = cast(meta[relay.Constant][10] /* ty=Tensor[(2730), uint8] */, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %242 = cast(%var_6735, dtype="int64") /* ty=Tensor[(39, 5), int64] */;
  %243 = reshape(%241, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %244 = reshape(%242, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %245 = @func_3432(%243, %244) /* ty=(Tensor[(14, 15, 13), uint8], Tensor[(52), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64], Tensor[(195), uint8], Tensor[(16, 14, 16), int8]) */;
  %246 = %245.4;
  %247 = cast(%246, dtype="int64") /* ty=Tensor[(195), int64] */;
  %248 = reshape(%240, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %249 = reshape(%247, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %250 = @func_1101(%248, %249) /* ty=(Tensor[(3, 13, 5), uint64],) */;
  %251 = @func_6532() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool], Tensor[(52), float64]) */;
  %252 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %254 = reshape(%253, newshape=[16, 14, 16]) /* ty=Tensor[(16, 14, 16), float32] */;
  %255 = @func_1781(%254) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), uint32], Tensor[(16, 14, 16), bool]) */;
  %256 = cast(%var_6771, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  %257 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(4, 13, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 13, 12), bool] */, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %260 = cast(%var_6720, dtype="float64") /* ty=Tensor[(140), float64] */;
  %261 = reshape(%260, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %262 = @func_4013(%261) /* ty=(Tensor[(52), bool], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64]) */;
  %263 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 13, 12), bool] */, dtype="float32") /* ty=Tensor[(4, 13, 12), float32] */;
  %264 = asinh(%263) /* ty=Tensor[(4, 13, 12), float32] */;
  %265 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 13, 12), float32] */, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %269 = %225.0;
  %270 = %228.2;
  %271 = add(%233, %234) /* ty=Tensor[(4, 13, 12), uint16] */;
  %272 = %239.4;
  %273 = %250.0;
  %274 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  %275 = @func_1047() /* ty=Tensor[(52), float64] */;
  %276 = %251.3;
  %277 = %255.0;
  %278 = power(%258, %259) /* ty=Tensor[(4, 13, 12), float64] */;
  %279 = %262.0;
  %280 = equal(%267, %268) /* ty=Tensor[(4, 13, 12), bool] */;
  (%269, %270, %var_6720, %271, %272, meta[relay.Constant][10] /* ty=Tensor[(2730), uint8] */, %var_6735, %273, %274, %275, %276, %277, %278, %279, %280)
}

def @func_4930(%var_4916: Tensor[(12, 14, 9), bool]) -> (Tensor[(12, 14, 9), int8],) {
  %281 = cast(%var_4916, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %282 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(12, 14, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 14, 9), bool] */, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %285 = logical_or(%283, %284) /* ty=Tensor[(12, 14, 9), bool] */;
  %286 = cast(%285, dtype="int8") /* ty=Tensor[(12, 14, 9), int8] */;
  %287 = shape_of(%var_4916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%var_4916, dtype="int8") /* ty=Tensor[(12, 14, 9), int8] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %290 = minimum(%288, %289) /* ty=Tensor[(12, 14, 9), int8] */;
  (%290,)
}

def @func_6299(%var_6278: bool, %var_6279: Tensor[(8, 8, 4), bool], %var_6295: Tensor[(195), int64]) -> (Tensor[(8, 8, 4), float32], Tensor[(3, 13, 5), uint64], Tensor[(195), int64]) {
  %291 = cast(%var_6278, dtype="bool") /* ty=bool */;
  %292 = cast(%var_6279, dtype="bool") /* ty=Tensor[(8, 8, 4), bool] */;
  %293 = logical_or(%291, %292) /* ty=Tensor[(8, 8, 4), bool] */;
  %294 = cast(%293, dtype="float32") /* ty=Tensor[(8, 8, 4), float32] */;
  %295 = cast(%var_6295, dtype="int64") /* ty=Tensor[(195), int64] */;
  %296 = reshape(%295, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %297 = @func_4789(%296) /* ty=(Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), uint64], Tensor[(195), int64]) */;
  %298 = sqrt(%294) /* ty=Tensor[(8, 8, 4), float32] */;
  %299 = %297.1;
  (%298, %299, %var_6295)
}

def @func_2710() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) {
  @func_2708() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) */
}

def @func_1728(%var_1726: Tensor[(7, 12, 9), float64]) -> (Tensor[(7, 12, 9), float64],) {
  @func_1725(%var_1726) /* ty=(Tensor[(7, 12, 9), float64],) */
}

def @func_4073() -> (Tensor[(16, 14, 16), bool],) {
  %300 = @func_3127() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %301 = %300.0;
  (%301,)
}

def @func_2381(%var_2325: Tensor[(650), int64]) -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(650), float64], Tensor[(52), bool], Tensor[(650), float64]) {
  %302 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %303 = cast(meta[relay.Constant][13] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %304 = reshape(%303, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %305 = @func_1704(%304) /* ty=(Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), float64], Tensor[(52), bool], Tensor[(5, 7, 15), float32]) */;
  %306 = cast(%var_2325, dtype="float64") /* ty=Tensor[(650), float64] */;
  %307 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(650), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %308 = cast(meta[relay.Constant][13] /* ty=Tensor[(650), int64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?), float64] */;
  %310 = @func_1183() /* ty=(Tensor[(52), bool],) */;
  %311 = cast(meta[relay.Constant][13] /* ty=Tensor[(650), int64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %312 = %302.0;
  %313 = @func_1047() /* ty=Tensor[(52), float64] */;
  %314 = %305.1;
  %315 = divide(%308, %309) /* ty=Tensor[(650), float64] */;
  %316 = %310.0;
  %317 = cos(%311) /* ty=Tensor[(650), float64] */;
  (%312, %313, %314, %315, %316, %317)
}

def @func_5813() -> (Tensor[(5, 7, 15), float32], Tensor[(16, 14, 16), bool]) {
  %318 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %319 = @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %320 = %318.1;
  %321 = %319.0;
  (%320, %321)
}

def @func_5780(%var_5779: Tensor[(16, 14, 16), bool]) -> (Tensor[(16, 14, 16), uint8], Tensor[(16, 14, 16), bool]) {
  %330 = fn (%var_5750: Tensor[(16, 14, 16), bool]) -> (Tensor[(16, 14, 16), uint8], Tensor[(16, 14, 16), bool]) {
    %322 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
    %323 = cast(%var_5750, dtype="uint8") /* ty=Tensor[(16, 14, 16), uint8] */;
    %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
    %325 = cast(%322, dtype="uint8") /* ty=Tensor[(16, 14, 16), uint8] */;
    %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %327 = @func_1414() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %328 = multiply(%325, %326) /* ty=Tensor[(16, 14, 16), uint8] */;
    %329 = %327.0;
    (%328, %329)
  };
  %330(%var_5779) /* ty=(Tensor[(16, 14, 16), uint8], Tensor[(16, 14, 16), bool]) */
}

def @func_284() -> (Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) {
  %343 = fn () -> (Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) {
    %331 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
    %332 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
    %333 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
    %334 = %333.2;
    %335 = cast(%334, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
    %336 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
    %337 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
    %338 = %331.1;
    %339 = %332.0;
    %340 = erf(%335) /* ty=Tensor[(16, 14, 16), float64] */;
    %341 = %336.0;
    %342 = %337.1;
    (%338, %339, %340, %341, %342)
  };
  %343() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */
}

def @func_1184() -> (Tensor[(52), bool],) {
  %346 = fn () -> (Tensor[(52), bool],) {
    %344 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
    %345 = %344.1;
    (%345,)
  };
  %346() /* ty=(Tensor[(52), bool],) */
}

def @func_4647() -> (Tensor[(16, 14, 16), bool],) {
  %348 = fn () -> (Tensor[(16, 14, 16), bool],) {
    %347 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
    (%347,)
  };
  %348() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_3555(%var_3554: Tensor[(140), float64]) -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], float64, Tensor[(140), float64], Tensor[(52), float64]) {
  %359 = fn (%var_3541: Tensor[(140), float64]) -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], float64, Tensor[(140), float64], Tensor[(52), float64]) {
    %349 = @func_1414() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %350 = cast(1.93603f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %351 = cast(%var_3541, dtype="float64") /* ty=Tensor[(140), float64] */;
    %352 = cast(meta[relay.Constant][14] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %353 = reshape(%350, newshape=[]) /* ty=float64 */;
    %354 = reshape(%351, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float64] */;
    %355 = reshape(%352, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %356 = @func_2887(%353, %354, %355) /* ty=(Tensor[(7, 5, 4), float64], Tensor[(16, 14, 16), bool], Tensor[(52), int16], Tensor[(52), float64]) */;
    %357 = %349.0;
    %358 = %356.3;
    (%357, %358, 1.93603f64 /* ty=float64 */, %var_3541, meta[relay.Constant][14] /* ty=Tensor[(52), float64] */)
  };
  %359(%var_3554) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], float64, Tensor[(140), float64], Tensor[(52), float64]) */
}

def @func_4789(%var_4765: Tensor[(195), int64]) -> (Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), uint64], Tensor[(195), int64]) {
  %360 = @func_4187() /* ty=(Tensor[(16, 14, 16), float32],) */;
  %361 = cast(%var_4765, dtype="int64") /* ty=Tensor[(195), int64] */;
  %362 = cast(%var_4765, dtype="int64") /* ty=Tensor[(195), int64] */;
  %363 = reshape(%361, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %364 = reshape(%362, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
  %365 = @func_1097(%363, %364) /* ty=(Tensor[(3, 13, 5), uint64],) */;
  %366 = %360.0;
  %367 = %365.0;
  (%366, %367, %var_4765)
}

def @func_574() -> (Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) {
  @func_572() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) */
}

def @func_3435(%var_3433: Tensor[(14, 15, 13), uint8], %var_3434: Tensor[(195), int64]) -> (Tensor[(14, 15, 13), uint8], Tensor[(52), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64], Tensor[(195), uint8], Tensor[(16, 14, 16), int8]) {
  %395 = fn (%var_3358: Tensor[(14, 15, 13), uint8], %var_3386: Tensor[(195), int64]) -> (Tensor[(14, 15, 13), uint8], Tensor[(52), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64], Tensor[(195), uint8], Tensor[(16, 14, 16), int8]) {
    %368 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 15, 13), uint8] */, dtype="uint8") /* ty=Tensor[(14, 15, 13), uint8] */;
    %369 = shape_of(%var_3358, dtype="int32") /* ty=Tensor[(3), int32] */;
    %370 = cast(%var_3358, dtype="uint8") /* ty=Tensor[(14, 15, 13), uint8] */;
    %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %372 = cast(meta[relay.Constant][16] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
    %373 = reshape(%372, newshape=[12, 4, 14]) /* ty=Tensor[(12, 4, 14), int64] */;
    %374 = @func_1914(%373) /* ty=(Tensor[(12, 4, 14), int64], Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32]) */;
    %375 = cast(%var_3386, dtype="int64") /* ty=Tensor[(195), int64] */;
    %376 = cast(%var_3386, dtype="int64") /* ty=Tensor[(195), int64] */;
    %377 = reshape(%375, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
    %378 = reshape(%376, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
    %379 = @func_1097(%377, %378) /* ty=(Tensor[(3, 13, 5), uint64],) */;
    %380 = %379.0;
    %381 = cast(%380, dtype="uint8") /* ty=Tensor[(3, 13, 5), uint8] */;
    %382 = shape_of(%var_3386, dtype="int32") /* ty=Tensor[(1), int32] */;
    %383 = cast(%var_3386, dtype="uint8") /* ty=Tensor[(195), uint8] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %385 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
    %386 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 14, 16), bool] */, dtype="int8") /* ty=Tensor[(16, 14, 16), int8] */;
    %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
    %388 = cast(%385, dtype="int8") /* ty=Tensor[(16, 14, 16), int8] */;
    %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %390 = minimum(%370, %371) /* ty=Tensor[(14, 15, 13), uint8] */;
    %391 = @func_1047() /* ty=Tensor[(52), float64] */;
    %392 = %374.0;
    %393 = logical_xor(%383, %384) /* ty=Tensor[(195), uint8] */;
    %394 = subtract(%388, %389) /* ty=Tensor[(16, 14, 16), int8] */;
    (%390, %391, %392, meta[relay.Constant][16] /* ty=Tensor[(672), int64] */, %393, %394)
  };
  %395(%var_3433, %var_3434) /* ty=(Tensor[(14, 15, 13), uint8], Tensor[(52), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64], Tensor[(195), uint8], Tensor[(16, 14, 16), int8]) */
}

def @func_4348() -> (Tensor[(5, 7, 15), float32],) {
  %396 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %397 = %396.1;
  (%397,)
}

def @func_5211() -> (Tensor[(52), bool], Tensor[(5, 7, 15), int8]) {
  %407 = fn () -> (Tensor[(52), bool], Tensor[(5, 7, 15), int8]) {
    %398 = @func_2722() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) */;
    %399 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
    %400 = %399.0;
    %401 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 7, 15), float32] */, dtype="int8") /* ty=Tensor[(5, 7, 15), int8] */;
    %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
    %403 = cast(%400, dtype="int8") /* ty=Tensor[(5, 7, 15), int8] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %405 = %398.2;
    %406 = maximum(%403, %404) /* ty=Tensor[(5, 7, 15), int8] */;
    (%405, %406)
  };
  %407() /* ty=(Tensor[(52), bool], Tensor[(5, 7, 15), int8]) */
}

def @func_3477(%var_3469: Tensor[(52), float64]) -> (Tensor[(52), int64], Tensor[(16, 14, 16), bool]) {
  %408 = @func_2494() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), float64]) */;
  %409 = %408.0;
  %410 = cast(%var_3469, dtype="int64") /* ty=Tensor[(52), int64] */;
  %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(1), int32] */;
  %412 = cast(%409, dtype="int64") /* ty=Tensor[(52), int64] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?), int64] */;
  %414 = @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %415 = maximum(%412, %413) /* ty=Tensor[(52), int64] */;
  %416 = %414.0;
  (%415, %416)
}

def @func_2422() -> (Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool]) {
  @func_2420() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool]) */
}

def @func_4145() -> (Tensor[(16, 14, 16), bool],) {
  @func_4143() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_1968() -> (Tensor[(16, 14, 16), bool],) {
  %417 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  (%417,)
}

def @func_6649() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float32], float64, Tensor[(1, 140), float64]) {
  %430 = fn () -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float32], float64, Tensor[(1, 140), float64]) {
    %418 = @func_2708() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) */;
    %419 = @func_6063() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %420 = @func_1183() /* ty=(Tensor[(52), bool],) */;
    %421 = %420.0;
    %422 = cast(%421, dtype="float32") /* ty=Tensor[(52), float32] */;
    %423 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 140), float64] */, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
    %424 = reshape(%423, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %425 = @func_4011(%424) /* ty=(Tensor[(52), bool], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64]) */;
    %426 = %418.0;
    %427 = %419.0;
    %428 = sigmoid(%422) /* ty=Tensor[(52), float32] */;
    %429 = %425.2;
    (%426, %427, %428, %429, meta[relay.Constant][19] /* ty=Tensor[(1, 140), float64] */)
  };
  %430() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float32], float64, Tensor[(1, 140), float64]) */
}

def @func_1725(%var_1722: Tensor[(7, 12, 9), float64]) -> (Tensor[(7, 12, 9), float64],) {
  %431 = cast(%var_1722, dtype="float64") /* ty=Tensor[(7, 12, 9), float64] */;
  %432 = asin(%431) /* ty=Tensor[(7, 12, 9), float64] */;
  (%432,)
}

def @func_3236() -> (Tensor[(16, 14, 16), bool],) {
  %433 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
  (%433,)
}

def @func_3261() -> (Tensor[(16, 14, 16), bool],) {
  @func_3259() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_1935() -> (Tensor[(52), float64],) {
  %434 = @func_1047() /* ty=Tensor[(52), float64] */;
  (%434,)
}

def @func_6036(%var_6034: Tensor[(195), int64]) -> (Tensor[(195), float32], Tensor[(195), float32]) {
  @func_6033(%var_6034) /* ty=(Tensor[(195), float32], Tensor[(195), float32]) */
}

def @func_3341() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) {
  %435 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
  %436 = @func_2708() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) */;
  %437 = @func_1935() /* ty=(Tensor[(52), float64],) */;
  %438 = %435.3;
  %439 = %436.0;
  %440 = %437.0;
  (%438, %439, %440)
}

def @func_4421(%var_4415: Tensor[(9, 5, 12), int8], %var_4416: Tensor[(9, 5, 12), int8], %var_4417: Tensor[(140), float64], %var_4418: Tensor[(52), float64], %var_4419: Tensor[(9, 5, 12), int8], %var_4420: Tensor[(672), int64]) -> (Tensor[(9, 5, 12), int8], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64], Tensor[(52), float64], Tensor[(5, 7, 15), float64], Tensor[(672), int64], Tensor[(9, 5, 12), float64], Tensor[(9, 5, 12), float32], Tensor[(52), float64]) {
  %472 = fn (%var_4362: Tensor[(9, 5, 12), int8], %var_4363: Tensor[(9, 5, 12), int8], %var_4369: Tensor[(140), float64], %var_4370: Tensor[(52), float64], %var_4375: Tensor[(9, 5, 12), int8], %var_4386: Tensor[(672), int64]) -> (Tensor[(9, 5, 12), int8], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64], Tensor[(52), float64], Tensor[(5, 7, 15), float64], Tensor[(672), int64], Tensor[(9, 5, 12), float64], Tensor[(9, 5, 12), float32], Tensor[(52), float64]) {
    %441 = cast(%var_4363, dtype="int8") /* ty=Tensor[(9, 5, 12), int8] */;
    %442 = shape_of(%var_4362, dtype="int32") /* ty=Tensor[(3), int32] */;
    %443 = cast(%var_4362, dtype="int8") /* ty=Tensor[(9, 5, 12), int8] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %445 = cast(-3.65262f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %446 = cast(%var_4369, dtype="float64") /* ty=Tensor[(140), float64] */;
    %447 = cast(%var_4370, dtype="float64") /* ty=Tensor[(52), float64] */;
    %448 = reshape(%445, newshape=[]) /* ty=float64 */;
    %449 = reshape(%446, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float64] */;
    %450 = reshape(%447, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %451 = @func_2887(%448, %449, %450) /* ty=(Tensor[(7, 5, 4), float64], Tensor[(16, 14, 16), bool], Tensor[(52), int16], Tensor[(52), float64]) */;
    %452 = cast(%var_4386, dtype="int64") /* ty=Tensor[(672), int64] */;
    %453 = reshape(%452, newshape=[672]) /* ty=Tensor[(672), int64] */;
    %454 = @func_3083(%453) /* ty=(Tensor[(5, 7, 15), float64], Tensor[(12, 4, 14), int64], Tensor[(672), int64]) */;
    %455 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 5, 12), int8] */, dtype="float64") /* ty=Tensor[(9, 5, 12), float64] */;
    %456 = shape_of(%var_4362, dtype="int32") /* ty=Tensor[(3), int32] */;
    %457 = cast(%var_4362, dtype="float64") /* ty=Tensor[(9, 5, 12), float64] */;
    %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %459 = cast(%var_4375, dtype="uint64") /* ty=Tensor[(9, 5, 12), uint64] */;
    %460 = shape_of(%var_4363, dtype="int32") /* ty=Tensor[(3), int32] */;
    %461 = cast(%var_4363, dtype="uint64") /* ty=Tensor[(9, 5, 12), uint64] */;
    %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %463 = subtract(%461, %462) /* ty=Tensor[(9, 5, 12), uint64] */;
    %464 = cast(%463, dtype="float32") /* ty=Tensor[(9, 5, 12), float32] */;
    %465 = @func_3181() /* ty=(Tensor[(52), float64],) */;
    %466 = right_shift(%443, %444) /* ty=Tensor[(9, 5, 12), int8] */;
    %467 = %451.0;
    %468 = %454.0;
    %469 = divide(%457, %458) /* ty=Tensor[(9, 5, 12), float64] */;
    %470 = exp(%464) /* ty=Tensor[(9, 5, 12), float32] */;
    %471 = %465.0;
    (%466, %467, -3.65262f64 /* ty=float64 */, %var_4369, %var_4370, %468, %var_4386, %469, %470, %471)
  };
  %472(%var_4415, %var_4416, %var_4417, %var_4418, %var_4419, %var_4420) /* ty=(Tensor[(9, 5, 12), int8], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64], Tensor[(52), float64], Tensor[(5, 7, 15), float64], Tensor[(672), int64], Tensor[(9, 5, 12), float64], Tensor[(9, 5, 12), float32], Tensor[(52), float64]) */
}

def @func_4013(%var_4012: Tensor[(140), float64]) -> (Tensor[(52), bool], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64]) {
  %483 = fn (%var_4006: Tensor[(140), float64]) -> (Tensor[(52), bool], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64]) {
    %473 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
    %474 = cast(-2.24005f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %475 = cast(%var_4006, dtype="float64") /* ty=Tensor[(140), float64] */;
    %476 = %473.1;
    %477 = cast(%476, dtype="float64") /* ty=Tensor[(52), float64] */;
    %478 = reshape(%474, newshape=[]) /* ty=float64 */;
    %479 = reshape(%475, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float64] */;
    %480 = reshape(%477, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %481 = @func_2887(%478, %479, %480) /* ty=(Tensor[(7, 5, 4), float64], Tensor[(16, 14, 16), bool], Tensor[(52), int16], Tensor[(52), float64]) */;
    %482 = %481.0;
    (%476, %482, -2.24005f64 /* ty=float64 */, %var_4006)
  };
  %483(%var_4012) /* ty=(Tensor[(52), bool], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64]) */
}

def @func_2770() -> (Tensor[(16, 14, 16), float64],) {
  @func_2768() /* ty=(Tensor[(16, 14, 16), float64],) */
}

def @func_4572() -> Tensor[(4, 13, 12), float64] {
  %486 = fn () -> Tensor[(4, 13, 12), float64] {
    %484 = @func_1197() /* ty=Tensor[(4, 13, 12), bool] */;
    %485 = cast(%484, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
    acos(%485) /* ty=Tensor[(4, 13, 12), float64] */
  };
  %486() /* ty=Tensor[(4, 13, 12), float64] */
}

def @func_666() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %491 = fn () -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
    %487 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %488 = @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */;
    %489 = %487.0;
    %490 = %488.1;
    (%489, %490)
  };
  %491() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */
}

def @func_2420() -> (Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool]) {
  %492 = @func_739() /* ty=(Tensor[(16, 14, 16), float64],) */;
  %493 = %492.0;
  %494 = @func_1197() /* ty=Tensor[(4, 13, 12), bool] */;
  (%493, %494)
}

def @func_1097(%var_1085: Tensor[(3, 13, 5), int64], %var_1086: Tensor[(3, 13, 5), int64]) -> (Tensor[(3, 13, 5), uint64],) {
  %495 = cast(%var_1086, dtype="int64") /* ty=Tensor[(3, 13, 5), int64] */;
  %496 = shape_of(%var_1085, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%var_1085, dtype="int64") /* ty=Tensor[(3, 13, 5), int64] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %499 = multiply(%497, %498) /* ty=Tensor[(3, 13, 5), int64] */;
  %500 = cast(%var_1086, dtype="uint64") /* ty=Tensor[(3, 13, 5), uint64] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="uint64") /* ty=Tensor[(3, 13, 5), uint64] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %504 = subtract(%502, %503) /* ty=Tensor[(3, 13, 5), uint64] */;
  (%504,)
}

def @func_2586() -> (Tensor[(16, 14, 16), bool],) {
  %505 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  (%505,)
}

def @func_2146(%var_2144: Tensor[(52), float64]) -> (Tensor[(52), int16],) {
  @func_2143(%var_2144) /* ty=(Tensor[(52), int16],) */
}

def @func_1781(%var_1779: Tensor[(16, 14, 16), float32]) -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), uint32], Tensor[(16, 14, 16), bool]) {
  @func_1778(%var_1779) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), uint32], Tensor[(16, 14, 16), bool]) */
}

def @func_4350() -> (Tensor[(5, 7, 15), float32],) {
  @func_4348() /* ty=(Tensor[(5, 7, 15), float32],) */
}

def @func_5557() -> Tensor[(16, 14, 16), bool] {
  @func_5555() /* ty=Tensor[(16, 14, 16), bool] */
}

def @func_6033(%var_6008: Tensor[(195), int64]) -> (Tensor[(195), float32], Tensor[(195), float32]) {
  %506 = @func_1852() /* ty=(Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), bool], Tensor[(195), int64]) */;
  %507 = %506.2;
  %508 = cast(%var_6008, dtype="float32") /* ty=Tensor[(195), float32] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(1), int32] */;
  %510 = cast(%507, dtype="float32") /* ty=Tensor[(195), float32] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?), float32] */;
  %512 = cast(%var_6008, dtype="float32") /* ty=Tensor[(195), float32] */;
  %513 = floor_divide(%510, %511) /* ty=Tensor[(195), float32] */;
  %514 = sigmoid(%512) /* ty=Tensor[(195), float32] */;
  (%513, %514)
}

def @func_2494() -> (Tensor[(52), float64], Tensor[(16, 14, 16), float64]) {
  %515 = @func_2420() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool]) */;
  %516 = @func_1047() /* ty=Tensor[(52), float64] */;
  %517 = %515.0;
  (%516, %517)
}

def @func_6379() -> Tensor[(16, 14, 16), bool] {
  @func_6377() /* ty=Tensor[(16, 14, 16), bool] */
}

def @func_6176(%var_6174: Tensor[(4, 3, 8), float32], %var_6175: Tensor[(4, 3, 8), float32]) -> Tensor[(4, 3, 8), float64] {
  @func_6172(%var_6174, %var_6175) /* ty=Tensor[(4, 3, 8), float64] */
}

def @func_5441() -> (Tensor[(16, 14, 16), bool],) {
  @func_5439() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_363() -> (Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) {
  @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */
}

def @func_4792(%var_4790: Tensor[(195), int64]) -> (Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), uint64], Tensor[(195), int64]) {
  @func_4789(%var_4790) /* ty=(Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), uint64], Tensor[(195), int64]) */
}

def @func_2496() -> (Tensor[(52), float64], Tensor[(16, 14, 16), float64]) {
  @func_2494() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), float64]) */
}

def @func_409() -> Tensor[(16, 14, 16), bool] {
  %519 = fn () -> Tensor[(16, 14, 16), bool] {
    %518 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
    %518.2
  };
  %519() /* ty=Tensor[(16, 14, 16), bool] */
}

def @func_5708() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %530 = fn () -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
    %520 = @func_4143() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %521 = @func_3995() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64]) */;
    %522 = %520.0;
    %523 = cast(%522, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
    %524 = reshape(%523, newshape=[16, 14, 16]) /* ty=Tensor[(16, 14, 16), float32] */;
    %525 = @func_1778(%524) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), uint32], Tensor[(16, 14, 16), bool]) */;
    %526 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
    %527 = %521.1;
    %528 = %525.0;
    %529 = %526.2;
    (%522, %527, %528, %529)
  };
  %530() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */
}

def @func_527() -> (Tensor[(16, 14, 16), bool],) {
  @func_525() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_6532() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool], Tensor[(52), float64]) {
  @func_6530() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool], Tensor[(52), float64]) */
}

def @func_875() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  %531 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
  %532 = %531.4;
  %533 = cast(%532, dtype="bool") /* ty=Tensor[(52), bool] */;
  %534 = reshape(%533, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
  %535 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %536 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %537 = cast(%532, dtype="float64") /* ty=Tensor[(52), float64] */;
  %538 = @func_665() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %539 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
  %540 = @func_41(%534) /* ty=Tensor[(4, 13, 12), bool] */;
  %541 = %535.0;
  %542 = %536.0;
  %543 = log(%537) /* ty=Tensor[(52), float64] */;
  %544 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
  %545 = %538.0;
  (%539, %540, %541, %542, %543, %544, %545)
}

def @func_1381() -> Tensor[(16, 14, 16), bool] {
  %547 = fn () -> Tensor[(16, 14, 16), bool] {
    %546 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
    %546.2
  };
  %547() /* ty=Tensor[(16, 14, 16), bool] */
}

def @func_1198() -> Tensor[(4, 13, 12), bool] {
  %549 = fn () -> Tensor[(4, 13, 12), bool] {
    %548 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
    %548.1
  };
  %549() /* ty=Tensor[(4, 13, 12), bool] */
}

def @func_6304(%var_6301: bool, %var_6302: Tensor[(8, 8, 4), bool], %var_6303: Tensor[(195), int64]) -> (Tensor[(8, 8, 4), float32], Tensor[(3, 13, 5), uint64], Tensor[(195), int64]) {
  @func_6299(%var_6301, %var_6302, %var_6303) /* ty=(Tensor[(8, 8, 4), float32], Tensor[(3, 13, 5), uint64], Tensor[(195), int64]) */
}

def @func_1247() -> (Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) {
  %550 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %551 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(5, 7, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %554 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %555 = floor_divide(%552, %553) /* ty=Tensor[(5, 7, 15), float32] */;
  %556 = cosh(%554) /* ty=Tensor[(5, 7, 15), float32] */;
  (%555, %556)
}

def @func_6172(%var_6137: Tensor[(4, 3, 8), float32], %var_6150: Tensor[(4, 3, 8), float32]) -> Tensor[(4, 3, 8), float64] {
  %557 = cast(%var_6137, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %558 = cosh(%557) /* ty=Tensor[(4, 3, 8), float32] */;
  %559 = cast(%558, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %560 = atanh(%559) /* ty=Tensor[(4, 3, 8), float32] */;
  %561 = cast(%var_6150, dtype="uint8") /* ty=Tensor[(4, 3, 8), uint8] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%560, dtype="uint8") /* ty=Tensor[(4, 3, 8), uint8] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %565 = minimum(%563, %564) /* ty=Tensor[(4, 3, 8), uint8] */;
  %566 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 3, 8), uint8] */, dtype="float64") /* ty=Tensor[(4, 3, 8), float64] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="float64") /* ty=Tensor[(4, 3, 8), float64] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%568, %569) /* ty=Tensor[(4, 3, 8), float64] */
}

def @func_2251() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) {
  %570 = @func_2105() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(650), int64]) */;
  %571 = %570.0;
  %572 = @func_1197() /* ty=Tensor[(4, 13, 12), bool] */;
  (%571, %572)
}

def @func_2986(%var_2984: Tensor[(1, 756), float64], %var_2985: Tensor[(1, 16, 9), float32]) -> (Tensor[(7, 12, 9), float64], Tensor[(1, 756), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 16, 9), float64], Tensor[(52), float64], Tensor[(16, 16, 9), bool], Tensor[(?, 16, 9), float64], Tensor[(7, 12, 9), float64], Tensor[(1, 16, 9), float32]) {
  %605 = fn (%var_2911: Tensor[(1, 756), float64], %var_2949: Tensor[(1, 16, 9), float32]) -> (Tensor[(7, 12, 9), float64], Tensor[(1, 756), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 16, 9), float64], Tensor[(52), float64], Tensor[(16, 16, 9), bool], Tensor[(?, 16, 9), float64], Tensor[(7, 12, 9), float64], Tensor[(1, 16, 9), float32]) {
    %573 = cast(%var_2911, dtype="float64") /* ty=Tensor[(1, 756), float64] */;
    %574 = reshape(%573, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float64] */;
    %575 = @func_1725(%574) /* ty=(Tensor[(7, 12, 9), float64],) */;
    %576 = @func_1968() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %577 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 16, 9), uint64] */, dtype="uint64") /* ty=Tensor[(1, 16, 9), uint64] */;
    %578 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 16, 9), uint64] */, dtype="uint64") /* ty=Tensor[(16, 16, 9), uint64] */;
    %579 = bitwise_xor(%577, %578) /* ty=Tensor[(16, 16, 9), uint64] */;
    %580 = cast(%579, dtype="float64") /* ty=Tensor[(16, 16, 9), float64] */;
    %581 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(16, 16, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %582 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 16, 9), uint64] */, dtype="float64") /* ty=Tensor[(16, 16, 9), float64] */;
    %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %584 = @func_2494() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), float64]) */;
    %585 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 16, 9), uint64] */, dtype="bool") /* ty=Tensor[(1, 16, 9), bool] */;
    %586 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 16, 9), uint64] */, dtype="bool") /* ty=Tensor[(16, 16, 9), bool] */;
    %587 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 16, 9), uint64] */, dtype="float32") /* ty=Tensor[(1, 16, 9), float32] */;
    %588 = asinh(%587) /* ty=Tensor[(1, 16, 9), float32] */;
    %589 = cast(%var_2949, dtype="float64") /* ty=Tensor[(1, 16, 9), float64] */;
    %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
    %591 = cast(%588, dtype="float64") /* ty=Tensor[(1, 16, 9), float64] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %593 = cast(%var_2911, dtype="float64") /* ty=Tensor[(1, 756), float64] */;
    %594 = reshape(%593, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float64] */;
    %595 = @func_1725(%594) /* ty=(Tensor[(7, 12, 9), float64],) */;
    %596 = cast(%588, dtype="float32") /* ty=Tensor[(1, 16, 9), float32] */;
    %597 = %575.0;
    %598 = %576.0;
    %599 = floor_mod(%582, %583) /* ty=Tensor[(16, 16, 9), float64] */;
    %600 = %584.0;
    %601 = less_equal(%585, %586) /* ty=Tensor[(16, 16, 9), bool] */;
    %602 = floor_divide(%591, %592) /* ty=Tensor[(?, 16, 9), float64] */;
    %603 = %595.0;
    %604 = acos(%596) /* ty=Tensor[(1, 16, 9), float32] */;
    (%597, %var_2911, %598, %599, %600, %601, %602, %603, %604)
  };
  %605(%var_2984, %var_2985) /* ty=(Tensor[(7, 12, 9), float64], Tensor[(1, 756), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 16, 9), float64], Tensor[(52), float64], Tensor[(16, 16, 9), bool], Tensor[(?, 16, 9), float64], Tensor[(7, 12, 9), float64], Tensor[(1, 16, 9), float32]) */
}

def @func_4688(%var_4682: Tensor[(15, 16, 7), float64]) -> (Tensor[(15, 16, 7), float64],) {
  %606 = cast(%var_4682, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %607 = log10(%606) /* ty=Tensor[(15, 16, 7), float64] */;
  (%607,)
}

def @func_2708() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) {
  %608 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %609 = @func_2251() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %610 = @func_2434() /* ty=(Tensor[(16, 14, 16), float64],) */;
  %611 = %608.3;
  %612 = %609.1;
  %613 = %610.0;
  (%611, %612, %613)
}

def @func_3172(%var_3169: Tensor[(7, 16, 9), uint8], %var_3170: Tensor[(7, 16, 9), uint8], %var_3171: Tensor[(7, 16, 9), uint8]) -> (Tensor[(7, 16, 9), uint8], Tensor[(7, 16, 9), uint8], Tensor[(7, 16, 9), float32]) {
  %626 = fn (%var_3130: Tensor[(7, 16, 9), uint8], %var_3131: Tensor[(7, 16, 9), uint8], %var_3140: Tensor[(7, 16, 9), uint8]) -> (Tensor[(7, 16, 9), uint8], Tensor[(7, 16, 9), uint8], Tensor[(7, 16, 9), float32]) {
    %614 = cast(%var_3131, dtype="uint8") /* ty=Tensor[(7, 16, 9), uint8] */;
    %615 = shape_of(%var_3130, dtype="int32") /* ty=Tensor[(3), int32] */;
    %616 = cast(%var_3130, dtype="uint8") /* ty=Tensor[(7, 16, 9), uint8] */;
    %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %618 = cast(%var_3140, dtype="uint8") /* ty=Tensor[(7, 16, 9), uint8] */;
    %619 = shape_of(%var_3130, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%var_3130, dtype="uint8") /* ty=Tensor[(7, 16, 9), uint8] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %622 = cast(%var_3131, dtype="float32") /* ty=Tensor[(7, 16, 9), float32] */;
    %623 = bitwise_xor(%616, %617) /* ty=Tensor[(7, 16, 9), uint8] */;
    %624 = logical_xor(%620, %621) /* ty=Tensor[(7, 16, 9), uint8] */;
    %625 = atan(%622) /* ty=Tensor[(7, 16, 9), float32] */;
    (%623, %624, %625)
  };
  %626(%var_3169, %var_3170, %var_3171) /* ty=(Tensor[(7, 16, 9), uint8], Tensor[(7, 16, 9), uint8], Tensor[(7, 16, 9), float32]) */
}

def @func_3238() -> (Tensor[(16, 14, 16), bool],) {
  @func_3236() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_2384(%var_2382: Tensor[(650), int64]) -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(650), float64], Tensor[(52), bool], Tensor[(650), float64]) {
  @func_2381(%var_2382) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(650), float64], Tensor[(52), bool], Tensor[(650), float64]) */
}

def @func_3343() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) {
  @func_3341() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */
}

def @func_739() -> (Tensor[(16, 14, 16), float64],) {
  %627 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %628 = %627.0;
  %629 = cast(%628, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %630 = sinh(%629) /* ty=Tensor[(16, 14, 16), float64] */;
  (%630,)
}

def @func_1817(%var_1815: Tensor[(195), int64]) -> (Tensor[(16, 14, 16), float64], Tensor[(195), int64], Tensor[(195, 1), int64], Tensor[(5, 7, 15), float32], Tensor[(16, 14, 16), float32]) {
  @func_1814(%var_1815) /* ty=(Tensor[(16, 14, 16), float64], Tensor[(195), int64], Tensor[(195, 1), int64], Tensor[(5, 7, 15), float32], Tensor[(16, 14, 16), float32]) */
}

def @func_1249() -> (Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) {
  @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */
}

def @func_5024() -> (Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool]) {
  %631 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
  %632 = @func_2835() /* ty=(Tensor[(9, 1, 14), float64], Tensor[(16, 14, 16), bool], Tensor[(52), bool]) */;
  %633 = %631.2;
  %634 = %632.1;
  (%633, %634)
}

def @func_4075() -> (Tensor[(16, 14, 16), bool],) {
  @func_4073() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_4189() -> (Tensor[(16, 14, 16), float32],) {
  @func_4187() /* ty=(Tensor[(16, 14, 16), float32],) */
}

def @func_3480(%var_3478: Tensor[(52), float64]) -> (Tensor[(52), int64], Tensor[(16, 14, 16), bool]) {
  @func_3477(%var_3478) /* ty=(Tensor[(52), int64], Tensor[(16, 14, 16), bool]) */
}

def @func_4125() -> (Tensor[(16, 14, 16), bool],) {
  @func_4123() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_2253() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) {
  @func_2251() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */
}

def @func_2105() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(650), int64]) {
  %635 = @func_1968() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %636 = cast(meta[relay.Constant][26] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %637 = reshape(%636, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %638 = @func_2016(%637) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(5, 7, 15), float32], Tensor[(650), int64], Tensor[(7, 12, 9), float64], Tensor[(756), float64]) */;
  %639 = %635.0;
  %640 = %638.0;
  (%639, %640, meta[relay.Constant][26] /* ty=Tensor[(650), int64] */)
}

def @func_5943() -> Tensor[(16, 14, 16), float64] {
  %642 = fn () -> Tensor[(16, 14, 16), float64] {
    %641 = @func_283() /* ty=(Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(52), float64]) */;
    %641.2
  };
  %642() /* ty=Tensor[(16, 14, 16), float64] */
}

def @func_210() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) {
  @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */
}

def @func_6384(%var_6380: Tensor[(5, 15, 5), float64]) -> (Tensor[(5, 15, 5), float64],) {
  %643 = cast(%var_6380, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %644 = acosh(%643) /* ty=Tensor[(5, 15, 5), float64] */;
  (%644,)
}

def @func_2435() -> (Tensor[(16, 14, 16), float64],) {
  %647 = fn () -> (Tensor[(16, 14, 16), float64],) {
    %645 = @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */;
    %646 = %645.0;
    (%646,)
  };
  %647() /* ty=(Tensor[(16, 14, 16), float64],) */
}

def @func_3950(%var_3948: Tensor[(13, 12, 12), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float64]) {
  @func_3947(%var_3948) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float64]) */
}

def @func_5356() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(52), float32]) {
  @func_5354() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(52), float32]) */
}

def @func_877() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */
}

def @func_208() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) {
  %648 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %649 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
  %650 = %649.1;
  %651 = cast(meta[relay.Constant][27] /* ty=Tensor[(52), bool] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(1), int32] */;
  %653 = cast(%650, dtype="float64") /* ty=Tensor[(52), float64] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?), float64] */;
  %655 = subtract(%653, %654) /* ty=Tensor[(52), float64] */;
  %656 = cast(%655, dtype="bool") /* ty=Tensor[(52), bool] */;
  %657 = reshape(%656, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), bool] */;
  %658 = %648.2;
  %659 = @func_41(%657) /* ty=Tensor[(4, 13, 12), bool] */;
  (%658, %655, %659)
}

def @func_3740(%var_3739: Tensor[(10, 3), float64]) -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), bool], Tensor[(3, 13, 5), int32], Tensor[(5, 1, 6), float64], Tensor[(10, 3), float64], Tensor[(16, 14, 16), float32]) {
  %695 = fn (%var_3708: Tensor[(10, 3), float64]) -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), bool], Tensor[(3, 13, 5), int32], Tensor[(5, 1, 6), float64], Tensor[(10, 3), float64], Tensor[(16, 14, 16), float32]) {
    %660 = @func_3127() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %661 = cast(meta[relay.Constant][28] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %662 = reshape(%661, newshape=[5, 10, 13]) /* ty=Tensor[(5, 10, 13), int64] */;
    %663 = @func_917(%662) /* ty=(Tensor[(5, 10, 13), int64], Tensor[(4, 13, 12), bool]) */;
    %664 = @func_1852() /* ty=(Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), bool], Tensor[(195), int64]) */;
    %665 = %664.1;
    %666 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 13, 5), bool] */, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
    %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%665, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %670 = less(%668, %669) /* ty=Tensor[(3, 13, 5), bool] */;
    %671 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 13, 5), bool] */, dtype="uint64") /* ty=Tensor[(3, 13, 5), uint64] */;
    %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
    %673 = cast(%670, dtype="uint64") /* ty=Tensor[(3, 13, 5), uint64] */;
    %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %675 = bitwise_xor(%673, %674) /* ty=Tensor[(3, 13, 5), uint64] */;
    %676 = cast(%675, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
    %677 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
    %678 = cast(%670, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %680 = greater(%678, %679) /* ty=Tensor[(3, 13, 5), bool] */;
    %681 = cast(%680, dtype="int32") /* ty=Tensor[(3, 13, 5), int32] */;
    %682 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(3, 13, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %683 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 13, 5), bool] */, dtype="int32") /* ty=Tensor[(3, 13, 5), int32] */;
    %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %685 = cast(%var_3708, dtype="float64") /* ty=Tensor[(10, 3), float64] */;
    %686 = reshape(%685, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float64] */;
    %687 = @func_2267(%686) /* ty=(Tensor[(5, 1, 6), float64],) */;
    %688 = @func_1852() /* ty=(Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), bool], Tensor[(195), int64]) */;
    %689 = %660.0;
    %690 = %663.1;
    %691 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
    %692 = bitwise_and(%683, %684) /* ty=Tensor[(3, 13, 5), int32] */;
    %693 = %687.0;
    %694 = %688.0;
    (%689, %690, meta[relay.Constant][28] /* ty=Tensor[(650), int64] */, %691, %692, %693, %var_3708, %694)
  };
  %695(%var_3739) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), bool], Tensor[(3, 13, 5), int32], Tensor[(5, 1, 6), float64], Tensor[(10, 3), float64], Tensor[(16, 14, 16), float32]) */
}

def @func_5439() -> (Tensor[(16, 14, 16), bool],) {
  %696 = @func_4123() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %697 = %696.0;
  (%697,)
}

def @func_4187() -> (Tensor[(16, 14, 16), float32],) {
  %698 = @func_2651() /* ty=(Tensor[(16, 14, 16), float32], Tensor[(52), float64]) */;
  %699 = %698.0;
  (%699,)
}

def @func_6063() -> (Tensor[(16, 14, 16), bool],) {
  %700 = @func_2105() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(650), int64]) */;
  %701 = %700.0;
  (%701,)
}

def @func_1937() -> (Tensor[(52), float64],) {
  @func_1935() /* ty=(Tensor[(52), float64],) */
}

def @func_525() -> (Tensor[(16, 14, 16), bool],) {
  %702 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %703 = %702.0;
  (%703,)
}

def @func_2891(%var_2888: float64, %var_2889: Tensor[(7, 5, 4), float64], %var_2890: Tensor[(52), float64]) -> (Tensor[(7, 5, 4), float64], Tensor[(16, 14, 16), bool], Tensor[(52), int16], Tensor[(52), float64]) {
  %713 = fn (%var_2853: float64, %var_2854: Tensor[(7, 5, 4), float64], %var_2882: Tensor[(52), float64]) -> (Tensor[(7, 5, 4), float64], Tensor[(16, 14, 16), bool], Tensor[(52), int16], Tensor[(52), float64]) {
    %704 = cast(%var_2853, dtype="float64") /* ty=float64 */;
    %705 = cast(%var_2854, dtype="float64") /* ty=Tensor[(7, 5, 4), float64] */;
    %706 = @func_2251() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
    %707 = cast(%var_2882, dtype="float64") /* ty=Tensor[(52), float64] */;
    %708 = reshape(%707, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %709 = @func_2143(%708) /* ty=(Tensor[(52), int16],) */;
    %710 = mod(%704, %705) /* ty=Tensor[(7, 5, 4), float64] */;
    %711 = %706.0;
    %712 = %709.0;
    (%710, %711, %712, %var_2882)
  };
  %713(%var_2888, %var_2889, %var_2890) /* ty=(Tensor[(7, 5, 4), float64], Tensor[(16, 14, 16), bool], Tensor[(52), int16], Tensor[(52), float64]) */
}

def @func_43(%var_42: Tensor[(4, 13, 1), bool]) -> Tensor[(4, 13, 12), bool] {
  %716 = fn (%var_32: Tensor[(4, 13, 1), bool]) -> Tensor[(4, 13, 12), bool] {
    %714 = cast(%var_32, dtype="bool") /* ty=Tensor[(4, 13, 1), bool] */;
    %715 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 13, 12), bool] */, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
    logical_and(%714, %715) /* ty=Tensor[(4, 13, 12), bool] */
  };
  %716(%var_42) /* ty=Tensor[(4, 13, 12), bool] */
}

def @func_498() -> (Tensor[(16, 14, 16), bool],) {
  @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_5928(%var_5925: Tensor[(4, 10, 7), float64], %var_5926: Tensor[(3, 13, 5), uint64], %var_5927: Tensor[(4, 10, 7), float64]) -> (Tensor[(16, 14, 16), bool], Tensor[(4, 10, 7), uint8], Tensor[(195), int64], Tensor[(3, 13, 5), int32], Tensor[(16, 14, 16), bool], Tensor[(15, 16, 7), float64], Tensor[(1680), float64], Tensor[(4, 10, 7), uint64], Tensor[(16, 14, 16), bool]) {
  %750 = fn (%var_5816: Tensor[(4, 10, 7), float64], %var_5874: Tensor[(3, 13, 5), uint64], %var_5907: Tensor[(4, 10, 7), float64]) -> (Tensor[(16, 14, 16), bool], Tensor[(4, 10, 7), uint8], Tensor[(195), int64], Tensor[(3, 13, 5), int32], Tensor[(16, 14, 16), bool], Tensor[(15, 16, 7), float64], Tensor[(1680), float64], Tensor[(4, 10, 7), uint64], Tensor[(16, 14, 16), bool]) {
    %717 = @func_5062() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
    %718 = cast(%var_5816, dtype="float64") /* ty=Tensor[(4, 10, 7), float64] */;
    %719 = cosh(%718) /* ty=Tensor[(4, 10, 7), float64] */;
    %720 = cast(%var_5816, dtype="uint8") /* ty=Tensor[(4, 10, 7), uint8] */;
    %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
    %722 = cast(%719, dtype="uint8") /* ty=Tensor[(4, 10, 7), uint8] */;
    %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %724 = cast(meta[relay.Constant][31] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
    %725 = cast(meta[relay.Constant][31] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
    %726 = reshape(%724, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
    %727 = reshape(%725, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
    %728 = @func_1097(%726, %727) /* ty=(Tensor[(3, 13, 5), uint64],) */;
    %729 = %728.0;
    %730 = cast(%var_5874, dtype="int32") /* ty=Tensor[(3, 13, 5), int32] */;
    %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
    %732 = cast(%729, dtype="int32") /* ty=Tensor[(3, 13, 5), int32] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %734 = @func_5707() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
    %735 = cast(meta[relay.Constant][32] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %736 = reshape(%735, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float64] */;
    %737 = @func_4688(%736) /* ty=(Tensor[(15, 16, 7), float64],) */;
    %738 = cast(%var_5907, dtype="uint64") /* ty=Tensor[(4, 10, 7), uint64] */;
    %739 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(%719, dtype="uint64") /* ty=Tensor[(4, 10, 7), uint64] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %742 = @func_5439() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %743 = %717.1;
    %744 = bitwise_and(%722, %723) /* ty=Tensor[(4, 10, 7), uint8] */;
    %745 = add(%732, %733) /* ty=Tensor[(3, 13, 5), int32] */;
    %746 = %734.3;
    %747 = %737.0;
    %748 = maximum(%740, %741) /* ty=Tensor[(4, 10, 7), uint64] */;
    %749 = %742.0;
    (%743, %744, meta[relay.Constant][31] /* ty=Tensor[(195), int64] */, %745, %746, %747, meta[relay.Constant][32] /* ty=Tensor[(1680), float64] */, %748, %749)
  };
  %750(%var_5925, %var_5926, %var_5927) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 10, 7), uint8], Tensor[(195), int64], Tensor[(3, 13, 5), int32], Tensor[(16, 14, 16), bool], Tensor[(15, 16, 7), float64], Tensor[(1680), float64], Tensor[(4, 10, 7), uint64], Tensor[(16, 14, 16), bool]) */
}

def @func_4864(%var_4863: Tensor[(3, 11, 8), float32]) -> (Tensor[(3, 11, 8), bool],) {
  %760 = fn (%var_4841: Tensor[(3, 11, 8), float32]) -> (Tensor[(3, 11, 8), bool],) {
    %751 = cast(%var_4841, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
    %752 = atanh(%751) /* ty=Tensor[(3, 11, 8), float32] */;
    %753 = cast(%752, dtype="float64") /* ty=Tensor[(3, 11, 8), float64] */;
    %754 = log10(%753) /* ty=Tensor[(3, 11, 8), float64] */;
    %755 = cast(%752, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
    %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
    %757 = cast(%754, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
    %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %759 = greater_equal(%757, %758) /* ty=Tensor[(3, 11, 8), bool] */;
    (%759,)
  };
  %760(%var_4863) /* ty=(Tensor[(3, 11, 8), bool],) */
}

def @func_5026() -> (Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool]) {
  @func_5024() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool]) */
}

def @func_5165(%var_5161: Tensor[(14, 9, 7), float32], %var_5162: Tensor[(14, 9, 7), float32], %var_5163: Tensor[(14, 9, 7), float32], %var_5164: Tensor[(4, 13, 12), bool]) -> (Tensor[(14, 9, 7), float32], Tensor[(14, 9, 7), uint16], Tensor[(14, 9, 7), int8], Tensor[(4, 13, 12), float64], Tensor[(14, 9, 7), float64]) {
  @func_5159(%var_5161, %var_5162, %var_5163, %var_5164) /* ty=(Tensor[(14, 9, 7), float32], Tensor[(14, 9, 7), uint16], Tensor[(14, 9, 7), int8], Tensor[(4, 13, 12), float64], Tensor[(14, 9, 7), float64]) */
}

def @func_2836() -> (Tensor[(9, 1, 14), float64], Tensor[(16, 14, 16), bool], Tensor[(52), bool]) {
  %766 = fn () -> (Tensor[(9, 1, 14), float64], Tensor[(16, 14, 16), bool], Tensor[(52), bool]) {
    %761 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 14), float64] */;
    %762 = @func_2722() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(4, 13, 12), bool], Tensor[(52), bool]) */;
    %763 = cosh(%761) /* ty=Tensor[(9, 1, 14), float64] */;
    %764 = @func_408() /* ty=Tensor[(16, 14, 16), bool] */;
    %765 = %762.2;
    (%763, %764, %765)
  };
  %766() /* ty=(Tensor[(9, 1, 14), float64], Tensor[(16, 14, 16), bool], Tensor[(52), bool]) */
}

def @func_496() -> (Tensor[(16, 14, 16), bool],) {
  %767 = @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */;
  %768 = %767.0;
  %769 = @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */;
  %770 = %769.1;
  %771 = cast(%770, dtype="bool") /* ty=Tensor[(16, 14, 16), bool] */;
  %772 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%768, dtype="bool") /* ty=Tensor[(16, 14, 16), bool] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %775 = equal(%773, %774) /* ty=Tensor[(16, 14, 16), bool] */;
  (%775,)
}

def @func_5354() -> (Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(52), float32]) {
  %776 = @func_665() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %777 = @func_1183() /* ty=(Tensor[(52), bool],) */;
  %778 = %777.0;
  %779 = cast(%778, dtype="float64") /* ty=Tensor[(52), float64] */;
  %780 = cast(%778, dtype="float32") /* ty=Tensor[(52), float32] */;
  %781 = %776.1;
  %782 = asin(%779) /* ty=Tensor[(52), float64] */;
  %783 = erf(%780) /* ty=Tensor[(52), float32] */;
  (%781, %782, %783)
}

def @func_3947(%var_3936: Tensor[(13, 12, 12), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(13, 12, 12), float64]) {
  %784 = cast(%var_3936, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %785 = cast(%var_3936, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %786 = sigmoid(%784) /* ty=Tensor[(13, 12, 12), float32] */;
  %787 = log2(%785) /* ty=Tensor[(13, 12, 12), float64] */;
  (%786, %787)
}

def @func_3996() -> (Tensor[(16, 14, 16), float64], Tensor[(52), float64]) {
  %792 = fn () -> (Tensor[(16, 14, 16), float64], Tensor[(52), float64]) {
    %788 = @func_2708() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), float64]) */;
    %789 = @func_572() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) */;
    %790 = %788.2;
    %791 = %789.2;
    (%790, %791)
  };
  %792() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64]) */
}

def @func_3129() -> (Tensor[(16, 14, 16), bool],) {
  @func_3127() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_3521(%var_3516: Tensor[(5, 7, 15), float32]) -> (Tensor[(5, 7, 15), float64], Tensor[(4, 13, 12), bool], Tensor[(5, 7, 15), float64], Tensor[(5, 7, 15), uint32]) {
  %793 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %794 = %793.1;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
  %796 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
  %797 = cast(%794, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
  %798 = cast(%var_3516, dtype="uint32") /* ty=Tensor[(5, 7, 15), uint32] */;
  %799 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%794, dtype="uint32") /* ty=Tensor[(5, 7, 15), uint32] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %802 = exp(%795) /* ty=Tensor[(5, 7, 15), float64] */;
  %803 = %796.1;
  %804 = log(%797) /* ty=Tensor[(5, 7, 15), float64] */;
  %805 = add(%800, %801) /* ty=Tensor[(5, 7, 15), uint32] */;
  (%802, %803, %804, %805)
}

def @func_5494(%var_5492: Tensor[(5, 7, 15), int8], %var_5493: Tensor[(336, 2), int64]) -> (Tensor[(5, 7, 15), float32], Tensor[(140), float64], Tensor[(540), int8], Tensor[(140), float64], Tensor[(52), float64], Tensor[(336, 2), int64]) {
  %827 = fn (%var_5448: Tensor[(5, 7, 15), int8], %var_5463: Tensor[(336, 2), int64]) -> (Tensor[(5, 7, 15), float32], Tensor[(140), float64], Tensor[(540), int8], Tensor[(140), float64], Tensor[(52), float64], Tensor[(336, 2), int64]) {
    %806 = @func_5210() /* ty=(Tensor[(52), bool], Tensor[(5, 7, 15), int8]) */;
    %807 = %806.1;
    %808 = cast(%var_5448, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
    %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
    %810 = cast(%807, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
    %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %812 = cast(meta[relay.Constant][34] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
    %813 = cast(meta[relay.Constant][34] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
    %814 = cast(meta[relay.Constant][35] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %815 = cast(meta[relay.Constant][36] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %816 = cast(meta[relay.Constant][34] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
    %817 = cast(%var_5463, dtype="int64") /* ty=Tensor[(336, 2), int64] */;
    %818 = reshape(%812, newshape=[9, 5, 12]) /* ty=Tensor[(9, 5, 12), int8] */;
    %819 = reshape(%813, newshape=[9, 5, 12]) /* ty=Tensor[(9, 5, 12), int8] */;
    %820 = reshape(%814, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %821 = reshape(%815, newshape=[52]) /* ty=Tensor[(52), float64] */;
    %822 = reshape(%816, newshape=[9, 5, 12]) /* ty=Tensor[(9, 5, 12), int8] */;
    %823 = reshape(%817, newshape=[672]) /* ty=Tensor[(672), int64] */;
    %824 = @func_4414(%818, %819, %820, %821, %822, %823) /* ty=(Tensor[(9, 5, 12), int8], Tensor[(7, 5, 4), float64], float64, Tensor[(140), float64], Tensor[(52), float64], Tensor[(5, 7, 15), float64], Tensor[(672), int64], Tensor[(9, 5, 12), float64], Tensor[(9, 5, 12), float32], Tensor[(52), float64]) */;
    %825 = divide(%810, %811) /* ty=Tensor[(5, 7, 15), float32] */;
    %826 = %824.3;
    (%825, %826, meta[relay.Constant][34] /* ty=Tensor[(540), int8] */, meta[relay.Constant][35] /* ty=Tensor[(140), float64] */, meta[relay.Constant][36] /* ty=Tensor[(52), float64] */, %var_5463)
  };
  %827(%var_5492, %var_5493) /* ty=(Tensor[(5, 7, 15), float32], Tensor[(140), float64], Tensor[(540), int8], Tensor[(140), float64], Tensor[(52), float64], Tensor[(336, 2), int64]) */
}

def @func_4116() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(195), int64], Tensor[(195), float32], Tensor[(52), float64]) {
  @func_4114() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(195), int64], Tensor[(195), float32], Tensor[(52), float64]) */
}

def @func_1606(%var_1603: Tensor[(16, 14, 16), float64], %var_1604: Tensor[(195, 1), int64], %var_1605: Tensor[(3, 13, 5), uint64]) -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32], Tensor[(195, 1), int64], Tensor[(3, 13, 5), bool], Tensor[(52), float64]) {
  %857 = fn (%var_1521: Tensor[(16, 14, 16), float64], %var_1550: Tensor[(195, 1), int64], %var_1552: Tensor[(3, 13, 5), uint64]) -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32], Tensor[(195, 1), int64], Tensor[(3, 13, 5), bool], Tensor[(52), float64]) {
    %828 = @func_739() /* ty=(Tensor[(16, 14, 16), float64],) */;
    %829 = %828.0;
    %830 = cast(%var_1521, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
    %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
    %832 = cast(%829, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
    %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %834 = floor_mod(%832, %833) /* ty=Tensor[(16, 14, 16), float32] */;
    %835 = cast(%var_1521, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
    %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
    %837 = cast(%834, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
    %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %839 = cast(%834, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
    %840 = cast(%var_1550, dtype="int64") /* ty=Tensor[(195, 1), int64] */;
    %841 = cast(%var_1550, dtype="int64") /* ty=Tensor[(195, 1), int64] */;
    %842 = reshape(%840, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
    %843 = reshape(%841, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int64] */;
    %844 = @func_1097(%842, %843) /* ty=(Tensor[(3, 13, 5), uint64],) */;
    %845 = %844.0;
    %846 = cast(%var_1552, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
    %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
    %848 = cast(%845, dtype="bool") /* ty=Tensor[(3, 13, 5), bool] */;
    %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %850 = @func_572() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(52), float64], Tensor[(52), float64]) */;
    %851 = @func_1067() /* ty=Tensor[(16, 14, 16), bool] */;
    %852 = mod(%837, %838) /* ty=Tensor[(16, 14, 16), float64] */;
    %853 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
    %854 = sin(%839) /* ty=Tensor[(16, 14, 16), float32] */;
    %855 = greater_equal(%848, %849) /* ty=Tensor[(3, 13, 5), bool] */;
    %856 = %850.2;
    (%851, %852, %853, %854, %var_1550, %855, %856)
  };
  %857(%var_1603, %var_1604, %var_1605) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32], Tensor[(195, 1), int64], Tensor[(3, 13, 5), bool], Tensor[(52), float64]) */
}

def @func_1706(%var_1705: Tensor[(650), int64]) -> (Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), float64], Tensor[(52), bool], Tensor[(5, 7, 15), float32]) {
  %872 = fn (%var_1664: Tensor[(650), int64]) -> (Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), float64], Tensor[(52), bool], Tensor[(5, 7, 15), float32]) {
    %858 = @func_1183() /* ty=(Tensor[(52), bool],) */;
    %859 = @func_496() /* ty=(Tensor[(16, 14, 16), bool],) */;
    %860 = cast(%var_1664, dtype="int64") /* ty=Tensor[(650), int64] */;
    %861 = reshape(%860, newshape=[5, 10, 13]) /* ty=Tensor[(5, 10, 13), int64] */;
    %862 = @func_917(%861) /* ty=(Tensor[(5, 10, 13), int64], Tensor[(4, 13, 12), bool]) */;
    %863 = @func_361() /* ty=(Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool]) */;
    %864 = @func_1183() /* ty=(Tensor[(52), bool],) */;
    %865 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
    %866 = %858.0;
    %867 = %859.0;
    %868 = %862.1;
    %869 = %863.0;
    %870 = %864.0;
    %871 = %865.0;
    (%866, %867, %868, %var_1664, %869, %870, %871)
  };
  %872(%var_1705) /* ty=(Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(650), int64], Tensor[(16, 14, 16), float64], Tensor[(52), bool], Tensor[(5, 7, 15), float32]) */
}

def @func_1853() -> (Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), bool], Tensor[(195), int64]) {
  %882 = fn () -> (Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), bool], Tensor[(195), int64]) {
    %873 = @func_1336() /* ty=Tensor[(16, 14, 16), float32] */;
    %874 = cast(%873, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
    %875 = cast(meta[relay.Constant][37] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
    %876 = cast(meta[relay.Constant][37] /* ty=Tensor[(195), int64] */, dtype="uint64") /* ty=Tensor[(195), uint64] */;
    %877 = reshape(%874, newshape=[16, 14, 16]) /* ty=Tensor[(16, 14, 16), float64] */;
    %878 = reshape(%875, newshape=[195, 1]) /* ty=Tensor[(195, 1), int64] */;
    %879 = reshape(%876, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), uint64] */;
    %880 = @func_1602(%877, %878, %879) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32], Tensor[(195, 1), int64], Tensor[(3, 13, 5), bool], Tensor[(52), float64]) */;
    %881 = %880.5;
    (%873, %881, meta[relay.Constant][37] /* ty=Tensor[(195), int64] */)
  };
  %882() /* ty=(Tensor[(16, 14, 16), float32], Tensor[(3, 13, 5), bool], Tensor[(195), int64]) */
}

def @func_1414() -> (Tensor[(16, 14, 16), bool],) {
  %883 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  (%883,)
}

def @func_2269(%var_2268: Tensor[(5, 1, 6), float64]) -> (Tensor[(5, 1, 6), float64],) {
  %886 = fn (%var_2258: Tensor[(5, 1, 6), float64]) -> (Tensor[(5, 1, 6), float64],) {
    %884 = cast(%var_2258, dtype="float64") /* ty=Tensor[(5, 1, 6), float64] */;
    %885 = sigmoid(%884) /* ty=Tensor[(5, 1, 6), float64] */;
    (%885,)
  };
  %886(%var_2268) /* ty=(Tensor[(5, 1, 6), float64],) */
}

def @func_3259() -> (Tensor[(16, 14, 16), bool],) {
  %887 = @func_2586() /* ty=(Tensor[(16, 14, 16), bool],) */;
  %888 = %887.0;
  (%888,)
}

def @func_1416() -> (Tensor[(16, 14, 16), bool],) {
  @func_1414() /* ty=(Tensor[(16, 14, 16), bool],) */
}

def @func_6387(%var_6385: Tensor[(5, 15, 5), float64]) -> (Tensor[(5, 15, 5), float64],) {
  @func_6384(%var_6385) /* ty=(Tensor[(5, 15, 5), float64],) */
}

def @func_3845() -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(4, 13, 12), bool]) {
  %904 = fn () -> (Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(4, 13, 12), bool]) {
    %889 = @func_875() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */;
    %890 = @func_208() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(52), float64], Tensor[(4, 13, 12), bool]) */;
    %891 = @func_108() /* ty=(Tensor[(4, 13, 12), bool], Tensor[(52), bool], Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool]) */;
    %892 = %891.0;
    %893 = cast(%892, dtype="float32") /* ty=Tensor[(4, 13, 12), float32] */;
    %894 = rsqrt(%893) /* ty=Tensor[(4, 13, 12), float32] */;
    %895 = cast(%894, dtype="float32") /* ty=Tensor[(4, 13, 12), float32] */;
    %896 = sqrt(%895) /* ty=Tensor[(4, 13, 12), float32] */;
    %897 = cast(%892, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
    %898 = shape_of(%896, dtype="int32") /* ty=Tensor[(3), int32] */;
    %899 = cast(%896, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
    %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %901 = %889.6;
    %902 = %890.2;
    %903 = greater_equal(%899, %900) /* ty=Tensor[(4, 13, 12), bool] */;
    (%901, %902, %903)
  };
  %904() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(4, 13, 12), bool], Tensor[(4, 13, 12), bool]) */
}

def @func_6471() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  @func_6469() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */
}

def @func_4609() -> (Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) {
  @func_4607() /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), bool]) */
}

def @func_4473() -> (Tensor[(16, 14, 16), float64],) {
  @func_4471() /* ty=(Tensor[(16, 14, 16), float64],) */
}

def @func_1814(%var_1793: Tensor[(195), int64]) -> (Tensor[(16, 14, 16), float64], Tensor[(195), int64], Tensor[(195, 1), int64], Tensor[(5, 7, 15), float32], Tensor[(16, 14, 16), float32]) {
  %905 = @func_1380() /* ty=Tensor[(16, 14, 16), bool] */;
  %906 = cast(%905, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %907 = cast(%var_1793, dtype="int64") /* ty=Tensor[(195), int64] */;
  %908 = cast(%var_1793, dtype="uint64") /* ty=Tensor[(195), uint64] */;
  %909 = reshape(%906, newshape=[16, 14, 16]) /* ty=Tensor[(16, 14, 16), float64] */;
  %910 = reshape(%907, newshape=[195, 1]) /* ty=Tensor[(195, 1), int64] */;
  %911 = reshape(%908, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), uint64] */;
  %912 = @func_1602(%909, %910, %911) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32], Tensor[(195, 1), int64], Tensor[(3, 13, 5), bool], Tensor[(52), float64]) */;
  %913 = cast(%905, dtype="float64") /* ty=Tensor[(16, 14, 16), float64] */;
  %914 = cast(%var_1793, dtype="int64") /* ty=Tensor[(195), int64] */;
  %915 = cast(%var_1793, dtype="uint64") /* ty=Tensor[(195), uint64] */;
  %916 = reshape(%913, newshape=[16, 14, 16]) /* ty=Tensor[(16, 14, 16), float64] */;
  %917 = reshape(%914, newshape=[195, 1]) /* ty=Tensor[(195, 1), int64] */;
  %918 = reshape(%915, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), uint64] */;
  %919 = @func_1602(%916, %917, %918) /* ty=(Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float64], Tensor[(16, 14, 16), bool], Tensor[(16, 14, 16), float32], Tensor[(195, 1), int64], Tensor[(3, 13, 5), bool], Tensor[(52), float64]) */;
  %920 = @func_1247() /* ty=(Tensor[(5, 7, 15), float32], Tensor[(5, 7, 15), float32]) */;
  %921 = cast(%905, dtype="float32") /* ty=Tensor[(16, 14, 16), float32] */;
  %922 = %912.1;
  %923 = %919.4;
  %924 = %920.1;
  %925 = log2(%921) /* ty=Tensor[(16, 14, 16), float32] */;
  (%922, %var_1793, %923, %924, %925)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen124/build/output.py", line 2444, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:51:24] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

