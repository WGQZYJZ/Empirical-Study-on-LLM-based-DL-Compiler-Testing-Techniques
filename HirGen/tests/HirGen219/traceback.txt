==========mod==========
#[version = "0.0.5"]
def @func_7551() -> (Tensor[(9, 12, 15), float64],) {
  %0 = @func_4447() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(9, 12, 15), float64], Tensor[(9, 12, 15), float64]) */;
  %1 = %0.4;
  (%1,)
}

def @func_1388() -> Tensor[(4, 16, 9), bool] {
  %2 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %2.0
}

def @func_3854() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %3 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %4 = %3.1;
  %5 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  (%4, %5)
}

def @func_5095() -> (Tensor[(4, 16, 9), float32],) {
  %6 = @func_3560() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), uint32]) */;
  %7 = %6.1;
  (%7,)
}

def @func_4586() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 14, 1), float32]) {
  %8 = @func_1754() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %9 = @func_2181() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */;
  %10 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %11 = @func_1776() /* ty=(Tensor[(4, 14, 1), float32],) */;
  %12 = %11.0;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(4, 14, 1), float32] */;
  %14 = %8.0;
  %15 = %9.0;
  %16 = %10.0;
  %17 = acosh(%13) /* ty=Tensor[(4, 14, 1), float32] */;
  (%14, %15, %16, %17)
}

def @func_5314() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 14, 1), float32]) {
  %18 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %19 = @func_1776() /* ty=(Tensor[(4, 14, 1), float32],) */;
  %20 = %18.2;
  %21 = %19.0;
  (%20, %21)
}

def @func_5673() -> (Tensor[(4, 16, 9), float64],) {
  %22 = @func_3278() /* ty=Tensor[(4, 16, 9), float64] */;
  (%22,)
}

def @func_953() -> (Tensor[(4, 16, 9), bool],) {
  %23 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %24 = %23.4;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %26 = asinh(%25) /* ty=Tensor[(4, 16, 9), float32] */;
  %27 = cast(%24, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%26, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %31 = logical_or(%29, %30) /* ty=Tensor[(4, 16, 9), bool] */;
  (%31,)
}

def @func_1371() -> Tensor[(4, 16, 9), float64] {
  %32 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %32.0
}

def @func_3384() -> Tensor[(4, 16, 9), float64] {
  @func_515() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_3278() -> Tensor[(4, 16, 9), float64] {
  %33 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %33.0
}

def @func_3135() -> Tensor[(4, 16, 9), bool] {
  %34 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %34.0
}

def @func_4644() -> Tensor[(4, 16, 9), float64] {
  @func_3384() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_7485() -> (Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64]) {
  %35 = @func_1829() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %36 = @func_6524() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %37 = %35.0;
  %38 = %36.0;
  (%37, %38)
}

def @func_4908(%var_4802: Tensor[(4, 16, 9), bool]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 14, 1), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(420), float64], Tensor[(14, 2, 15), bool]) {
  %39 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %40 = %39.0;
  %41 = cast(%var_4802, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = @func_1776() /* ty=(Tensor[(4, 14, 1), float32],) */;
  %46 = @func_3866() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %47 = @func_2578() /* ty=(Tensor[(4, 2, 9), int32], Tensor[(4, 16, 9), float64]) */;
  %48 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %49 = cast(meta[relay.Constant][0] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %50 = reshape(%49, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %51 = @func_3612(%50) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(420), float64], Tensor[(14, 2, 15), float32]) */;
  %52 = %51.2;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %54 = sin(%53) /* ty=Tensor[(14, 2, 15), float32] */;
  %55 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 2, 15), float32] */, dtype="bool") /* ty=Tensor[(14, 2, 15), bool] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="bool") /* ty=Tensor[(14, 2, 15), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %59 = logical_and(%43, %44) /* ty=Tensor[(4, 16, 9), bool] */;
  %60 = %45.0;
  %61 = %46.0;
  %62 = %47.1;
  %63 = %48.0;
  %64 = equal(%57, %58) /* ty=Tensor[(14, 2, 15), bool] */;
  (%59, %60, %61, %62, %63, meta[relay.Constant][0] /* ty=Tensor[(420), float64] */, %64)
}

def @func_3683() -> (Tensor[(4, 16, 9), bool],) {
  %65 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %66 = %65.0;
  (%66,)
}

def @func_7528() -> (Tensor[(4, 16, 9), float64], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32]) {
  %67 = @func_3866() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %68 = cast(-0.795485f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %70 = reshape(%68, newshape=[]) /* ty=float32 */;
  %71 = reshape(%69, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
  %72 = @func_1793(%70, %71) /* ty=(Tensor[(5, 3, 8), float32],) */;
  %73 = %67.0;
  %74 = %72.0;
  (%73, %74, -0.795485f /* ty=float32 */, meta[relay.Constant][2] /* ty=Tensor[(120), float32] */)
}

def @func_6928() -> (Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), bool], Tensor[(4, 7, 6), bool], Tensor[(3, 56), bool], Tensor[(?, 1620), bool]) {
  %75 = @func_3767() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %76 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %77 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 56), bool] */, dtype="bool") /* ty=Tensor[(3, 56), bool] */;
  %78 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 56), bool] */, dtype="bool") /* ty=Tensor[(3, 56), bool] */;
  %79 = reshape(%77, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
  %80 = reshape(%78, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
  %81 = @func_2704(%79, %80) /* ty=(Tensor[(4, 7, 6), bool], Tensor[(4, 7, 6), float64]) */;
  %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 1620), float64] */, dtype="float64") /* ty=Tensor[(1, 1620), float64] */;
  %83 = reshape(%82, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %84 = @func_1617(%83) /* ty=(Tensor[(9, 12, 15), float64],) */;
  %85 = %84.0;
  %86 = cast(%85, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %87 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(1, 1620), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %88 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 1620), float64] */, dtype="bool") /* ty=Tensor[(1, 1620), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %90 = %75.0;
  %91 = %76.0;
  %92 = %81.0;
  %93 = equal(%88, %89) /* ty=Tensor[(?, 1620), bool] */;
  (%90, %91, %92, meta[relay.Constant][3] /* ty=Tensor[(3, 56), bool] */, %93)
}

def @func_1410() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) {
  %94 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %95 = %94.1;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %97 = reshape(%96, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %98 = @func_652(%97) /* ty=(Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */;
  %99 = %98.0;
  (%95, %99)
}

def @func_5514() -> (Tensor[(4, 16, 9), int32],) {
  %100 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %101 = %100.0;
  %102 = @func_4516() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %103 = %102.0;
  %104 = cast(%103, dtype="int32") /* ty=Tensor[(4, 16, 9), int32] */;
  %105 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%101, dtype="int32") /* ty=Tensor[(4, 16, 9), int32] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %108 = subtract(%106, %107) /* ty=Tensor[(4, 16, 9), int32] */;
  (%108,)
}

def @func_3612(%var_3591: Tensor[(420), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(420), float64], Tensor[(14, 2, 15), float32]) {
  %109 = cast(%var_3591, dtype="float64") /* ty=Tensor[(420), float64] */;
  %110 = reshape(%109, newshape=[14, 2, 15]) /* ty=Tensor[(14, 2, 15), float64] */;
  %111 = @func_2900(%110) /* ty=(Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32], Tensor[(4, 16, 9), float64]) */;
  %112 = %111.1;
  %113 = cast(%112, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %114 = asinh(%113) /* ty=Tensor[(14, 2, 15), float32] */;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %116 = @func_3384() /* ty=Tensor[(4, 16, 9), float64] */;
  %117 = acosh(%115) /* ty=Tensor[(14, 2, 15), float32] */;
  (%116, %var_3591, %117)
}

def @func_2284(%var_2189: Tensor[(7, 14, 5), int64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(7, 14, 5), uint32]) {
  %118 = @func_1829() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %119 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %120 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %121 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(7, 14, 5), int64] */;
  %122 = shape_of(%var_2189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%var_2189, dtype="int64") /* ty=Tensor[(7, 14, 5), int64] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %125 = subtract(%123, %124) /* ty=Tensor[(7, 14, 5), int64] */;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(7, 14, 5), float64] */;
  %127 = shape_of(%var_2189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%var_2189, dtype="float64") /* ty=Tensor[(7, 14, 5), float64] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %130 = power(%128, %129) /* ty=Tensor[(7, 14, 5), float64] */;
  %131 = cast(%125, dtype="uint32") /* ty=Tensor[(7, 14, 5), uint32] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="uint32") /* ty=Tensor[(7, 14, 5), uint32] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %135 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  %136 = %118.0;
  %137 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
  %138 = %119.0;
  %139 = %120.2;
  %140 = add(%133, %134) /* ty=Tensor[(7, 14, 5), uint32] */;
  (%135, %136, %137, %138, %139, %140)
}

def @func_3223() -> (Tensor[(4, 16, 9), bool],) {
  %141 = @func_3135() /* ty=Tensor[(4, 16, 9), bool] */;
  (%141,)
}

def @func_1829() -> (Tensor[(4, 16, 9), float32],) {
  %142 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
  %143 = cast(%142, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %144 = sinh(%143) /* ty=Tensor[(4, 16, 9), float32] */;
  (%144,)
}

def @func_1684(%var_1643: Tensor[(10, 8, 2), float64]) -> (Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), float64]) {
  %145 = cast(%var_1643, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %146 = sin(%145) /* ty=Tensor[(10, 8, 2), float64] */;
  %147 = cast(%146, dtype="uint32") /* ty=Tensor[(10, 8, 2), uint32] */;
  %148 = shape_of(%var_1643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_1643, dtype="uint32") /* ty=Tensor[(10, 8, 2), uint32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %151 = cast(%146, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %152 = exp(%151) /* ty=Tensor[(10, 8, 2), float32] */;
  %153 = cast(%152, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %154 = bitwise_xor(%149, %150) /* ty=Tensor[(10, 8, 2), uint32] */;
  %155 = asinh(%153) /* ty=Tensor[(10, 8, 2), float64] */;
  (%154, %155)
}

def @func_7944() -> (Tensor[(9, 12, 15), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) {
  %156 = @func_7551() /* ty=(Tensor[(9, 12, 15), float64],) */;
  %157 = %156.0;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %159 = @func_7882() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %160 = log2(%158) /* ty=Tensor[(9, 12, 15), float64] */;
  %161 = @func_3384() /* ty=Tensor[(4, 16, 9), float64] */;
  %162 = %159.0;
  (%160, %161, %162)
}

def @func_5547(%var_5531: Tensor[(10, 5, 16), float64]) -> (Tensor[(10, 5, 16), float64],) {
  %163 = cast(%var_5531, dtype="float64") /* ty=Tensor[(10, 5, 16), float64] */;
  %164 = tan(%163) /* ty=Tensor[(10, 5, 16), float64] */;
  %165 = cast(%var_5531, dtype="uint32") /* ty=Tensor[(10, 5, 16), uint32] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="uint32") /* ty=Tensor[(10, 5, 16), uint32] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %169 = bitwise_and(%167, %168) /* ty=Tensor[(10, 5, 16), uint32] */;
  %170 = cast(%169, dtype="float64") /* ty=Tensor[(10, 5, 16), float64] */;
  %171 = shape_of(%var_5531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_5531, dtype="float64") /* ty=Tensor[(10, 5, 16), float64] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %174 = floor_mod(%172, %173) /* ty=Tensor[(10, 5, 16), float64] */;
  (%174,)
}

def @func_6884() -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) {
  %175 = @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
  %176 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %177 = %175.1;
  %178 = %176.3;
  (%177, %178)
}

def @func_3025() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %179 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %180 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  (%179, %180)
}

def @func_5336() -> (Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64]) {
  %181 = cast(meta[relay.Constant][6] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %182 = reshape(%181, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %183 = @func_1684(%182) /* ty=(Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), float64]) */;
  %184 = @func_3135() /* ty=Tensor[(4, 16, 9), bool] */;
  %185 = %183.0;
  (%184, %185, meta[relay.Constant][6] /* ty=Tensor[(160), float64] */)
}

def @func_1921() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64], Tensor[(4, 16, 9), float64]) {
  %186 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %187 = cast(meta[relay.Constant][7] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %188 = reshape(%187, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %189 = @func_1684(%188) /* ty=(Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), float64]) */;
  %190 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
  %191 = %186.3;
  %192 = %189.0;
  %193 = @func_1599() /* ty=Tensor[(4, 16, 9), float64] */;
  (%190, %191, %192, meta[relay.Constant][7] /* ty=Tensor[(160), float64] */, %193)
}

def @func_6716(%var_6615: Tensor[(16, 16, 1), bool], %var_6639: Tensor[(15, 16, 15), bool], %var_6677: Tensor[(18, 90), float64], %var_6693: Tensor[(800), float64]) -> (Tensor[(16, 16, 1), bool], Tensor[(15, 16, 15), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), uint32], Tensor[(15, 16, 15), int8], Tensor[(9, 12, 15), float64], Tensor[(10, 5, 16), float64], Tensor[(800), float64], Tensor[(16, 16, 1), bool], Tensor[(18, 90), float64]) {
  %194 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %195 = cast(%var_6615, dtype="bool") /* ty=Tensor[(16, 16, 1), bool] */;
  %196 = cast(True /* ty=bool */, dtype="int32") /* ty=int32 */;
  %197 = cast(%var_6639, dtype="int32") /* ty=Tensor[(15, 16, 15), int32] */;
  %198 = bitwise_and(%196, %197) /* ty=Tensor[(15, 16, 15), int32] */;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(15, 16, 15), float64] */;
  %200 = cast(True /* ty=bool */, dtype="float64") /* ty=float64 */;
  %201 = @func_3683() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %204 = reshape(%203, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %205 = cast(%var_6639, dtype="int8") /* ty=Tensor[(15, 16, 15), int8] */;
  %206 = cast(True /* ty=bool */, dtype="int8") /* ty=int8 */;
  %207 = cast(%var_6677, dtype="float64") /* ty=Tensor[(18, 90), float64] */;
  %208 = reshape(%207, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %209 = @func_1617(%208) /* ty=(Tensor[(9, 12, 15), float64],) */;
  %210 = cast(%var_6693, dtype="float64") /* ty=Tensor[(800), float64] */;
  %211 = reshape(%210, newshape=[10, 5, 16]) /* ty=Tensor[(10, 5, 16), float64] */;
  %212 = @func_5547(%211) /* ty=(Tensor[(10, 5, 16), float64],) */;
  %213 = cast(%var_6615, dtype="float32") /* ty=Tensor[(16, 16, 1), float32] */;
  %214 = atan(%213) /* ty=Tensor[(16, 16, 1), float32] */;
  %215 = cast(%214, dtype="bool") /* ty=Tensor[(16, 16, 1), bool] */;
  %216 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %217 = cast(%var_6677, dtype="float64") /* ty=Tensor[(18, 90), float64] */;
  %218 = log2(%217) /* ty=Tensor[(18, 90), float64] */;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(18, 90), float64] */;
  %220 = logical_or(%194, %195) /* ty=Tensor[(16, 16, 1), bool] */;
  %221 = mod(%199, %200) /* ty=Tensor[(15, 16, 15), float64] */;
  %222 = @func_1204(%204) /* ty=Tensor[(4, 16, 9), uint32] */;
  %223 = left_shift(%205, %206) /* ty=Tensor[(15, 16, 15), int8] */;
  %224 = %209.0;
  %225 = %212.0;
  %226 = greater(%215, %216) /* ty=Tensor[(16, 16, 1), bool] */;
  %227 = atanh(%219) /* ty=Tensor[(18, 90), float64] */;
  (%220, %221, %202, %222, %223, %224, %225, %var_6693, %226, %227)
}

def @func_4255() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64]) {
  %228 = @func_1640() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) */;
  %229 = @func_2675() /* ty=Tensor[(4, 16, 9), bool] */;
  %230 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %231 = %228.1;
  (%229, %230, %231)
}

def @func_6238() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %232 = @func_4979() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %233 = @func_3135() /* ty=Tensor[(4, 16, 9), bool] */;
  %234 = %232.2;
  (%233, %234)
}

def @func_3837(%var_3778: Tensor[(9, 12, 15), float64]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8]) {
  %235 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %236 = @func_3560() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), uint32]) */;
  %237 = @func_1785() /* ty=(Tensor[(9, 12, 15), float64],) */;
  %238 = %237.0;
  %239 = cast(%var_3778, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%238, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %243 = equal(%241, %242) /* ty=Tensor[(9, 12, 15), bool] */;
  %244 = cast(%var_3778, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %248 = floor_mod(%246, %247) /* ty=Tensor[(9, 12, 15), float32] */;
  %249 = cast(%248, dtype="int8") /* ty=Tensor[(9, 12, 15), int8] */;
  %250 = shape_of(%var_3778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%var_3778, dtype="int8") /* ty=Tensor[(9, 12, 15), int8] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %253 = %235.0;
  %254 = %236.2;
  %255 = @func_3384() /* ty=Tensor[(4, 16, 9), float64] */;
  %256 = bitwise_or(%251, %252) /* ty=Tensor[(9, 12, 15), int8] */;
  (%253, %254, %255, %256)
}

def @func_1272() -> (Tensor[(4, 16, 9), float64],) {
  %257 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %258 = %257.0;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %260 = acosh(%259) /* ty=Tensor[(4, 16, 9), float64] */;
  (%260,)
}

def @func_6187() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %261 = @func_6058() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %262 = @func_4516() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %263 = %261.1;
  %264 = %262.1;
  (%263, %264)
}

def @func_7367() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) {
  %265 = @func_3111() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %266 = @func_6070() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %267 = @func_2952() /* ty=Tensor[(4, 16, 9), float64] */;
  %268 = %265.0;
  %269 = @func_2952() /* ty=Tensor[(4, 16, 9), float64] */;
  %270 = %266.0;
  %271 = @func_7199() /* ty=Tensor[(4, 16, 9), float32] */;
  (%267, %268, %269, %270, %271)
}

def @func_2482(%var_2464: float64, %var_2465: Tensor[(15, 2, 7), float64]) -> (Tensor[(15, 2, 7), float32],) {
  %272 = cast(%var_2464, dtype="float64") /* ty=float64 */;
  %273 = cast(%var_2465, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %274 = minimum(%272, %273) /* ty=Tensor[(15, 2, 7), float64] */;
  %275 = cast(%var_2465, dtype="float32") /* ty=Tensor[(15, 2, 7), float32] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%274, dtype="float32") /* ty=Tensor[(15, 2, 7), float32] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %279 = mod(%277, %278) /* ty=Tensor[(15, 2, 7), float32] */;
  (%279,)
}

def @func_4352() -> (Tensor[(4, 16, 9), float64],) {
  %280 = @func_2578() /* ty=(Tensor[(4, 2, 9), int32], Tensor[(4, 16, 9), float64]) */;
  %281 = %280.1;
  (%281,)
}

def @func_2704(%var_2695: Tensor[(4, 7, 6), bool], %var_2696: Tensor[(4, 7, 6), bool]) -> (Tensor[(4, 7, 6), bool], Tensor[(4, 7, 6), float64]) {
  %282 = cast(%var_2696, dtype="bool") /* ty=Tensor[(4, 7, 6), bool] */;
  %283 = shape_of(%var_2695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%var_2695, dtype="bool") /* ty=Tensor[(4, 7, 6), bool] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %286 = cast(%var_2695, dtype="float64") /* ty=Tensor[(4, 7, 6), float64] */;
  %287 = logical_or(%284, %285) /* ty=Tensor[(4, 7, 6), bool] */;
  %288 = sigmoid(%286) /* ty=Tensor[(4, 7, 6), float64] */;
  (%287, %288)
}

def @func_3767() -> (Tensor[(4, 16, 9), float32],) {
  %289 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %291 = sin(%290) /* ty=Tensor[(4, 16, 9), float32] */;
  (%291,)
}

def @func_5916() -> (Tensor[(4, 16, 9), bool],) {
  %292 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %293 = %292.0;
  (%293,)
}

def @func_7199() -> Tensor[(4, 16, 9), float32] {
  %294 = @func_6928() /* ty=(Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), bool], Tensor[(4, 7, 6), bool], Tensor[(3, 56), bool], Tensor[(?, 1620), bool]) */;
  %294.0
}

def @func_1223() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %295 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %296 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
  %297 = %295.0;
  (%296, %297)
}

def @func_1640() -> (Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) {
  %298 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %299 = cast(meta[relay.Constant][8] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %300 = reshape(%299, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %301 = @func_1617(%300) /* ty=(Tensor[(9, 12, 15), float64],) */;
  %302 = %298.1;
  %303 = %301.0;
  (%302, %303, meta[relay.Constant][8] /* ty=Tensor[(1620), float64] */)
}

def @func_3866() -> (Tensor[(4, 16, 9), float64],) {
  %304 = @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
  %305 = %304.0;
  (%305,)
}

def @func_7076() -> Tensor[(4, 16, 9), int32] {
  %306 = @func_5514() /* ty=(Tensor[(4, 16, 9), int32],) */;
  %306.0
}

def @func_1341() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %307 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %308 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %309 = %307.0;
  %310 = %308.0;
  (%309, %310)
}

def @func_866() -> (Tensor[(4, 16, 9), bool],) {
  %311 = @func_601() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %312 = %311.0;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %314 = acos(%313) /* ty=Tensor[(4, 16, 9), float32] */;
  %315 = cast(%314, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %316 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%312, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = less(%317, %318) /* ty=Tensor[(4, 16, 9), bool] */;
  (%319,)
}

def @func_761() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %320 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %321 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %322 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %323 = %320.0;
  %324 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %325 = %321.0;
  %326 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %327 = %322.0;
  (%323, %324, %325, %326, %327)
}

def @func_7609() -> Tensor[(7, 9, 8), float64] {
  %328 = @func_6819() /* ty=(Tensor[(7, 9, 8), float64],) */;
  %329 = %328.0;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
  log10(%330) /* ty=Tensor[(7, 9, 8), float64] */
}

def @func_7246() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int32]) {
  %331 = @func_3223() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %332 = %331.0;
  %333 = @func_7076() /* ty=Tensor[(4, 16, 9), int32] */;
  (%332, %333)
}

def @func_1785() -> (Tensor[(9, 12, 15), float64],) {
  %334 = @func_1640() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) */;
  %335 = %334.1;
  (%335,)
}

def @func_6216(%var_6210: int8, %var_6211: Tensor[(16, 12, 10), int8]) -> Tensor[(16, 12, 10), int8] {
  %336 = cast(%var_6210, dtype="int8") /* ty=int8 */;
  %337 = cast(%var_6211, dtype="int8") /* ty=Tensor[(16, 12, 10), int8] */;
  bitwise_or(%336, %337) /* ty=Tensor[(16, 12, 10), int8] */
}

def @main(%var_7993: Tensor[(3, 9, 11), float32], %var_8015: Tensor[(3, 9, 11), float32], %var_8035: Tensor[(3, 9, 11), float32]) -> (Tensor[(3, 9, 11), uint16], Tensor[(3, 9, 11), bool]) {
  %338 = cast(%var_8015, dtype="uint16") /* ty=Tensor[(3, 9, 11), uint16] */;
  %339 = shape_of(%var_7993, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_7993, dtype="uint16") /* ty=Tensor[(3, 9, 11), uint16] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %342 = cast(%var_7993, dtype="float32") /* ty=Tensor[(3, 9, 11), float32] */;
  %343 = log(%342) /* ty=Tensor[(3, 9, 11), float32] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(3, 9, 11), float32] */;
  %345 = sigmoid(%344) /* ty=Tensor[(3, 9, 11), float32] */;
  %346 = cast(%var_8035, dtype="bool") /* ty=Tensor[(3, 9, 11), bool] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="bool") /* ty=Tensor[(3, 9, 11), bool] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %350 = maximum(%340, %341) /* ty=Tensor[(3, 9, 11), uint16] */;
  %351 = less_equal(%348, %349) /* ty=Tensor[(3, 9, 11), bool] */;
  (%350, %351)
}

def @func_652(%var_632: Tensor[(4, 16, 9), float64]) -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) {
  %352 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %353 = cast(%var_632, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = greater(%355, %356) /* ty=Tensor[(4, 16, 9), bool] */;
  %358 = cast(%352, dtype="int32") /* ty=Tensor[(4, 16, 9), int32] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="int32") /* ty=Tensor[(4, 16, 9), int32] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %362 = bitwise_xor(%360, %361) /* ty=Tensor[(4, 16, 9), int32] */;
  %363 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  (%362, %363)
}

def @func_2767(%var_2745: Tensor[(480), float64]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(480), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %364 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %365 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %366 = cast(%var_2745, dtype="float64") /* ty=Tensor[(480), float64] */;
  %367 = reshape(%366, newshape=[5, 8, 12]) /* ty=Tensor[(5, 8, 12), float64] */;
  %368 = @func_2445(%367) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(4, 16, 9), float64]) */;
  %369 = %364.1;
  %370 = %365.0;
  %371 = %368.2;
  %372 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %373 = @func_2675() /* ty=Tensor[(4, 16, 9), bool] */;
  (%369, %370, %371, %var_2745, %372, %373)
}

def @func_6819() -> (Tensor[(7, 9, 8), float64],) {
  %374 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
  %375 = erf(%374) /* ty=Tensor[(7, 9, 8), float64] */;
  (%375,)
}

def @func_6342() -> (Tensor[(4, 16, 9), float64],) {
  %376 = @func_3302() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %377 = %376.0;
  (%377,)
}

def @func_7094() -> Tensor[(4, 16, 9), float64] {
  %378 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %378.1
}

def @func_2952() -> Tensor[(4, 16, 9), float64] {
  %379 = @func_601() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %379.0
}

def @func_6524() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %380 = @func_3290() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %381 = %380.0;
  %382 = @func_5865() /* ty=Tensor[(4, 16, 9), float64] */;
  (%381, %382)
}

def @func_2900(%var_2860: Tensor[(14, 2, 15), float64]) -> (Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32], Tensor[(4, 16, 9), float64]) {
  %383 = cast(%var_2860, dtype="float64") /* ty=Tensor[(14, 2, 15), float64] */;
  %384 = cast(%var_2860, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %385 = @func_1640() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) */;
  %386 = cos(%383) /* ty=Tensor[(14, 2, 15), float64] */;
  %387 = tan(%384) /* ty=Tensor[(14, 2, 15), float32] */;
  %388 = %385.0;
  (%386, %387, %388)
}

def @func_3630() -> (Tensor[(4, 16, 9), float64],) {
  %389 = @func_2181() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */;
  %390 = %389.0;
  (%390,)
}

def @func_2358() -> (Tensor[(4, 16, 9), int8], Tensor[(4, 16, 9), float64]) {
  %391 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %392 = %391.1;
  %393 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="int8") /* ty=Tensor[(4, 16, 9), int8] */;
  %396 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%392, dtype="int8") /* ty=Tensor[(4, 16, 9), int8] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %399 = @func_1754() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %400 = multiply(%397, %398) /* ty=Tensor[(4, 16, 9), int8] */;
  %401 = %399.1;
  (%400, %401)
}

def @func_5359() -> Tensor[(4, 16, 9), float64] {
  %402 = @func_2181() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */;
  %402.2
}

def @func_7643() -> Tensor[(4, 16, 9), bool] {
  @func_6770() /* ty=Tensor[(4, 16, 9), bool] */
}

def @func_1204(%var_1199: Tensor[(4, 16, 9), float64]) -> Tensor[(4, 16, 9), uint32] {
  %403 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  %404 = cast(%var_1199, dtype="uint32") /* ty=Tensor[(4, 16, 9), uint32] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="uint32") /* ty=Tensor[(4, 16, 9), uint32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%406, %407) /* ty=Tensor[(4, 16, 9), uint32] */
}

def @func_4707(%var_4657: Tensor[(15, 11, 9), float32]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float32], Tensor[(15, 11, 9), float32]) {
  %408 = @func_3025() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %409 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 11, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
  %410 = sinh(%409) /* ty=Tensor[(15, 11, 9), float64] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(15, 11, 9), float32] */;
  %412 = cosh(%411) /* ty=Tensor[(15, 11, 9), float32] */;
  %413 = cast(%412, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
  %414 = exp(%413) /* ty=Tensor[(15, 11, 9), float64] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
  %416 = cast(%410, dtype="int16") /* ty=Tensor[(15, 11, 9), int16] */;
  %417 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(15, 11, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 11, 9), float64] */, dtype="int16") /* ty=Tensor[(15, 11, 9), int16] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %420 = multiply(%418, %419) /* ty=Tensor[(15, 11, 9), int16] */;
  %421 = cast(%var_4657, dtype="bool") /* ty=Tensor[(15, 11, 9), bool] */;
  %422 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%412, dtype="bool") /* ty=Tensor[(15, 11, 9), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %425 = greater(%423, %424) /* ty=Tensor[(15, 11, 9), bool] */;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(15, 11, 9), float32] */;
  %427 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%420, dtype="float32") /* ty=Tensor[(15, 11, 9), float32] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %430 = cast(%414, dtype="float32") /* ty=Tensor[(15, 11, 9), float32] */;
  %431 = @func_3384() /* ty=Tensor[(4, 16, 9), float64] */;
  %432 = %408.0;
  %433 = log2(%415) /* ty=Tensor[(15, 11, 9), float64] */;
  %434 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  %435 = divide(%428, %429) /* ty=Tensor[(15, 11, 9), float32] */;
  %436 = asin(%430) /* ty=Tensor[(15, 11, 9), float32] */;
  (%431, %432, %433, %434, %435, %436)
}

def @func_6751() -> (Tensor[(4, 16, 9), bool],) {
  %437 = @func_2675() /* ty=Tensor[(4, 16, 9), bool] */;
  (%437,)
}

def @func_6136(%var_6129: Tensor[(10, 42), float64]) -> (Tensor[(4, 16, 9), bool], Tensor[(14, 2, 15), float64], Tensor[(125), int64], Tensor[(10, 42), float64]) {
  %438 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %439 = cast(meta[relay.Constant][11] /* ty=Tensor[(125), int64] */, dtype="int64") /* ty=Tensor[(125), int64] */;
  %440 = cast(meta[relay.Constant][11] /* ty=Tensor[(125), int64] */, dtype="int64") /* ty=Tensor[(125), int64] */;
  %441 = cast(%var_6129, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
  %442 = reshape(%439, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %443 = reshape(%440, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %444 = reshape(%441, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %445 = @func_3652(%442, %443, %444) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(14, 2, 15), float64], Tensor[(420), float64]) */;
  %446 = %438.1;
  %447 = %445.1;
  (%446, %447, meta[relay.Constant][11] /* ty=Tensor[(125), int64] */, %var_6129)
}

def @func_3302() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %448 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %449 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  %450 = %448.0;
  (%449, %450)
}

def @func_5852(%var_5819: Tensor[(4, 7, 6), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 7, 6), float64], Tensor[(4, 7, 6), uint64], Tensor[(4, 16, 9), float64]) {
  %451 = @func_1223() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %452 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %453 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %454 = reshape(%452, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
  %455 = reshape(%453, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
  %456 = @func_2704(%454, %455) /* ty=(Tensor[(4, 7, 6), bool], Tensor[(4, 7, 6), float64]) */;
  %457 = %456.1;
  %458 = cast(%var_5819, dtype="float64") /* ty=Tensor[(4, 7, 6), float64] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="float64") /* ty=Tensor[(4, 7, 6), float64] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %462 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), bool] */, dtype="uint64") /* ty=Tensor[(168), uint64] */;
  %463 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%457, dtype="uint64") /* ty=Tensor[(4, 7, 6), uint64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %466 = %451.0;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %468 = reshape(%467, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %469 = @func_2625(%468) /* ty=(Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %470 = divide(%460, %461) /* ty=Tensor[(4, 7, 6), float64] */;
  %471 = minimum(%464, %465) /* ty=Tensor[(4, 7, 6), uint64] */;
  %472 = %469.2;
  (%466, %470, %471, %472)
}

def @func_5246() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %473 = @func_3854() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %474 = @func_3278() /* ty=Tensor[(4, 16, 9), float64] */;
  %475 = %473.1;
  (%474, %475)
}

def @func_4447() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(9, 12, 15), float64], Tensor[(9, 12, 15), float64]) {
  %476 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %477 = %476.0;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %479 = reshape(%478, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %480 = @func_2625(%479) /* ty=(Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %481 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %482 = @func_4255() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64]) */;
  %483 = %482.2;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %485 = reshape(%484, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %486 = @func_1617(%485) /* ty=(Tensor[(9, 12, 15), float64],) */;
  %487 = %480.1;
  %488 = %481.0;
  %489 = %486.0;
  (%477, %487, %488, %483, %489)
}

def @func_2306(%var_2292: Tensor[(2, 11, 15), int64], %var_2293: Tensor[(2, 11, 15), int64]) -> (Tensor[(2, 11, 15), int64], Tensor[(4, 16, 9), float64]) {
  %490 = cast(%var_2293, dtype="int64") /* ty=Tensor[(2, 11, 15), int64] */;
  %491 = shape_of(%var_2292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_2292, dtype="int64") /* ty=Tensor[(2, 11, 15), int64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %494 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %495 = minimum(%492, %493) /* ty=Tensor[(2, 11, 15), int64] */;
  %496 = %494.0;
  (%495, %496)
}

def @func_6980(%var_6959: Tensor[(2, 12, 4), float64], %var_6964: Tensor[(2, 12, 4), bool]) -> (Tensor[(2, 12, 4), uint16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %497 = cast(%var_6959, dtype="bool") /* ty=Tensor[(2, 12, 4), bool] */;
  %498 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(2, 12, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 12, 4), float64] */, dtype="bool") /* ty=Tensor[(2, 12, 4), bool] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %501 = not_equal(%499, %500) /* ty=Tensor[(2, 12, 4), bool] */;
  %502 = cast(%var_6964, dtype="uint16") /* ty=Tensor[(2, 12, 4), uint16] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="uint16") /* ty=Tensor[(2, 12, 4), uint16] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %506 = right_shift(%504, %505) /* ty=Tensor[(2, 12, 4), uint16] */;
  %507 = @func_1388() /* ty=Tensor[(4, 16, 9), bool] */;
  %508 = @func_3278() /* ty=Tensor[(4, 16, 9), float64] */;
  (%506, %507, %508)
}

def @func_1754() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %509 = @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
  %510 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %511 = %509.0;
  %512 = @func_1599() /* ty=Tensor[(4, 16, 9), float64] */;
  %513 = %510.0;
  (%511, %512, %513)
}

def @func_515() -> Tensor[(4, 16, 9), float64] {
  %514 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  asin(%514) /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_4321(%var_4303: Tensor[(125), int64], %var_4304: Tensor[(420), float64]) -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), bool], Tensor[(420), float64], Tensor[(125), int64], Tensor[(420), float64]) {
  %515 = @func_3334() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
  %516 = @func_3223() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %517 = cast(%var_4303, dtype="int64") /* ty=Tensor[(125), int64] */;
  %518 = cast(%var_4303, dtype="int64") /* ty=Tensor[(125), int64] */;
  %519 = cast(%var_4304, dtype="float64") /* ty=Tensor[(420), float64] */;
  %520 = reshape(%517, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %521 = reshape(%518, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %522 = reshape(%519, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %523 = @func_3652(%520, %521, %522) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(14, 2, 15), float64], Tensor[(420), float64]) */;
  %524 = %515.1;
  %525 = %516.0;
  %526 = %523.2;
  (%524, %525, %526, %var_4303, %var_4304)
}

def @func_5865() -> Tensor[(4, 16, 9), float64] {
  @func_4644() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_2578() -> (Tensor[(4, 2, 9), int32], Tensor[(4, 16, 9), float64]) {
  %527 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 2, 9), int32] */, dtype="int32") /* ty=Tensor[(4, 2, 9), int32] */;
  %528 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(4, 2, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 2, 9), int32] */, dtype="int32") /* ty=Tensor[(4, 2, 9), int32] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %531 = right_shift(%529, %530) /* ty=Tensor[(4, 2, 9), int32] */;
  %532 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  (%531, %532)
}

def @func_7131() -> (Tensor[(4, 16, 9), float64],) {
  %533 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %534 = %533.1;
  (%534,)
}

def @func_6058() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %535 = @func_5673() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %536 = @func_1921() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64], Tensor[(4, 16, 9), float64]) */;
  %537 = %535.0;
  %538 = %536.4;
  (%537, %538)
}

def @func_1118() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %539 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %540 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %541 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %542 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
  %543 = %539.0;
  %544 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %545 = %540.0;
  %546 = %541.3;
  (%542, %543, %544, %545, %546)
}

def @func_1617(%var_1602: Tensor[(9, 12, 15), float64]) -> (Tensor[(9, 12, 15), float64],) {
  %547 = cast(%var_1602, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %548 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(9, 12, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 12, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %551 = floor_divide(%549, %550) /* ty=Tensor[(9, 12, 15), float64] */;
  (%551,)
}

def @func_908() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) {
  %552 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %553 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %554 = cast(%553, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %555 = log2(%554) /* ty=Tensor[(4, 16, 9), float64] */;
  %556 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %557 = %556.0;
  %558 = cast(%557, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %559 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%555, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %562 = floor_divide(%560, %561) /* ty=Tensor[(4, 16, 9), float32] */;
  %563 = cast(%553, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%562, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %567 = %552.0;
  %568 = not_equal(%565, %566) /* ty=Tensor[(4, 16, 9), bool] */;
  (%567, %568)
}

def @func_4045() -> (Tensor[(4, 16, 9), float64],) {
  %569 = @func_1974() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %570 = %569.3;
  (%570,)
}

def @func_6770() -> Tensor[(4, 16, 9), bool] {
  %571 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %571.0
}

def @func_1599() -> Tensor[(4, 16, 9), float64] {
  @func_1025() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_5638(%var_5626: Tensor[(9, 12, 15), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), bool]) {
  %572 = @func_5246() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %573 = @func_4255() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64]) */;
  %574 = %573.2;
  %575 = cast(%var_5626, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = %572.0;
  %580 = logical_and(%577, %578) /* ty=Tensor[(9, 12, 15), bool] */;
  (%579, %580)
}

def @func_7053(%var_7048: Tensor[(490), int64]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(490), int64]) {
  %581 = cast(%var_7048, dtype="int64") /* ty=Tensor[(490), int64] */;
  %582 = reshape(%581, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), int64] */;
  %583 = @func_2284(%582) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(7, 14, 5), uint32]) */;
  %584 = @func_1388() /* ty=Tensor[(4, 16, 9), bool] */;
  %585 = %583.0;
  (%584, %585, %var_7048)
}

def @func_5452(%var_5375: float32, %var_5376: Tensor[(11, 12, 8), float32], %var_5387: Tensor[(11, 12, 8), float32], %var_5398: Tensor[(576), float64], %var_5441: Tensor[(11, 12, 8), float64]) -> (Tensor[(11, 12, 8), bool], Tensor[(4, 16, 9), uint32], Tensor[(576), float64], Tensor[(4, 16, 9), float64], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), float32], Tensor[(4, 16, 9), float64]) {
  %586 = cast(%var_5375, dtype="float32") /* ty=float32 */;
  %587 = cast(%var_5376, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %588 = divide(%586, %587) /* ty=Tensor[(11, 12, 8), float32] */;
  %589 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 12, 8), float32] */, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = cast(%var_5398, dtype="float64") /* ty=Tensor[(576), float64] */;
  %594 = reshape(%593, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %595 = @func_1640() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) */;
  %596 = cast(%var_5387, dtype="int32") /* ty=Tensor[(11, 12, 8), int32] */;
  %597 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%588, dtype="int32") /* ty=Tensor[(11, 12, 8), int32] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %600 = left_shift(%598, %599) /* ty=Tensor[(11, 12, 8), int32] */;
  %601 = cast(%600, dtype="float64") /* ty=Tensor[(11, 12, 8), float64] */;
  %602 = atanh(%601) /* ty=Tensor[(11, 12, 8), float64] */;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %604 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 12, 8), float32] */, dtype="float64") /* ty=Tensor[(11, 12, 8), float64] */;
  %605 = sinh(%604) /* ty=Tensor[(11, 12, 8), float64] */;
  %606 = cast(%var_5441, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %610 = @func_3630() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %611 = less_equal(%591, %592) /* ty=Tensor[(11, 12, 8), bool] */;
  %612 = @func_1204(%594) /* ty=Tensor[(4, 16, 9), uint32] */;
  %613 = %595.0;
  %614 = log(%603) /* ty=Tensor[(11, 12, 8), float32] */;
  %615 = floor_divide(%608, %609) /* ty=Tensor[(11, 12, 8), float32] */;
  %616 = %610.0;
  (%611, %612, %var_5398, %613, %614, %615, %616)
}

def @func_3290() -> (Tensor[(4, 16, 9), float64],) {
  %617 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  (%617,)
}

def @func_3334() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) {
  %618 = @func_601() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %619 = %618.1;
  %620 = cast(%619, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %621 = reshape(%620, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %622 = @func_652(%621) /* ty=(Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */;
  %623 = %622.0;
  (%619, %623)
}

def @func_6420(%var_6397: float32) -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float32], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), float64]) {
  %624 = @func_5514() /* ty=(Tensor[(4, 16, 9), int32],) */;
  %625 = @func_1829() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %626 = cast(%var_6397, dtype="float32") /* ty=float32 */;
  %627 = cast(meta[relay.Constant][19] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %628 = reshape(%626, newshape=[]) /* ty=float32 */;
  %629 = reshape(%627, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
  %630 = @func_1793(%628, %629) /* ty=(Tensor[(5, 3, 8), float32],) */;
  %631 = @func_6058() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %632 = %624.0;
  %633 = %625.0;
  %634 = %630.0;
  %635 = %631.0;
  (%632, %633, %634, %var_6397, meta[relay.Constant][19] /* ty=Tensor[(120), float32] */, %635)
}

def @func_5666(%var_5653: Tensor[(7, 1, 15), float64]) -> (Tensor[(7, ?, 15), uint32],) {
  %636 = cast(%var_5653, dtype="float64") /* ty=Tensor[(7, 1, 15), float64] */;
  %637 = tan(%636) /* ty=Tensor[(7, 1, 15), float64] */;
  %638 = cast(%var_5653, dtype="uint32") /* ty=Tensor[(7, 1, 15), uint32] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="uint32") /* ty=Tensor[(7, 1, 15), uint32] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %642 = subtract(%640, %641) /* ty=Tensor[(7, ?, 15), uint32] */;
  (%642,)
}

def @func_2545(%var_2522: Tensor[(1620), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(1620), float64]) {
  %643 = @func_601() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %644 = cast(%var_2522, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %645 = reshape(%644, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %646 = @func_1617(%645) /* ty=(Tensor[(9, 12, 15), float64],) */;
  %647 = @func_2181() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */;
  %648 = cast(%var_2522, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %649 = exp(%648) /* ty=Tensor[(1620), float32] */;
  %650 = cast(meta[relay.Constant][20] /* ty=Tensor[(1620), float32] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(1), int32] */;
  %652 = cast(%649, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?), float64] */;
  %654 = %643.0;
  %655 = %646.0;
  %656 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %657 = %647.1;
  %658 = multiply(%652, %653) /* ty=Tensor[(1620), float64] */;
  (%654, %655, %656, %657, %658)
}

def @func_1025() -> Tensor[(4, 16, 9), float64] {
  %659 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %660 = %659.3;
  %661 = cast(%660, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  atanh(%661) /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_5172() -> (Tensor[(4, 16, 9), float64],) {
  %662 = @func_3866() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %663 = %662.0;
  (%663,)
}

def @func_3186() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %664 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %665 = %664.1;
  %666 = @func_1599() /* ty=Tensor[(4, 16, 9), float64] */;
  (%665, %666)
}

def @func_3986() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(160), float64], Tensor[(4, 16, 9), bool]) {
  %667 = @func_1223() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %668 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %670 = reshape(%669, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %671 = @func_2625(%670) /* ty=(Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %672 = @func_1921() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64], Tensor[(4, 16, 9), float64]) */;
  %673 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %674 = %667.1;
  %675 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %676 = %671.2;
  %677 = %672.3;
  %678 = %673.0;
  (%674, %675, %668, %676, %677, %678)
}

def @func_1974() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %679 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %680 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %681 = @func_1388() /* ty=Tensor[(4, 16, 9), bool] */;
  %682 = @func_1862() /* ty=Tensor[(4, 16, 9), float64] */;
  %683 = %679.0;
  %684 = %680.0;
  (%681, %682, %683, %684)
}

def @func_7882() -> (Tensor[(4, 16, 9), float32],) {
  %685 = @func_7485() /* ty=(Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64]) */;
  %686 = %685.0;
  (%686,)
}

def @func_3012() -> (Tensor[(4, 16, 9), bool],) {
  %687 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %688 = %687.0;
  (%688,)
}

def @func_3111() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %689 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %690 = %689.0;
  %691 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  (%690, %691)
}

def @func_2181() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) {
  %692 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %693 = @func_1921() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64], Tensor[(4, 16, 9), float64]) */;
  %694 = %693.4;
  %695 = cast(%694, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %696 = reshape(%695, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %697 = @func_652(%696) /* ty=(Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */;
  %698 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %699 = %698.1;
  %700 = cast(%699, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %701 = @func_1829() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %702 = %692.4;
  %703 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %704 = %697.1;
  %705 = atan(%700) /* ty=Tensor[(4, 16, 9), float32] */;
  %706 = %701.0;
  (%702, %694, %703, %704, %705, %706)
}

def @func_3560() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), uint32]) {
  %707 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %708 = @func_2181() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */;
  %709 = @func_3135() /* ty=Tensor[(4, 16, 9), bool] */;
  %710 = cast(%709, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %711 = tan(%710) /* ty=Tensor[(4, 16, 9), float64] */;
  %712 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %713 = %712.2;
  %714 = cast(%713, dtype="int16") /* ty=Tensor[(4, 16, 9), int16] */;
  %715 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%711, dtype="int16") /* ty=Tensor[(4, 16, 9), int16] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %718 = left_shift(%716, %717) /* ty=Tensor[(4, 16, 9), int16] */;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %720 = reshape(%719, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %721 = %707.0;
  %722 = %708.5;
  %723 = @func_1204(%720) /* ty=Tensor[(4, 16, 9), uint32] */;
  (%721, %722, %718, %723)
}

def @func_2833(%var_2805: float32, %var_2831: Tensor[(480), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), bool], Tensor[(480), float64]) {
  %724 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %725 = cast(%var_2805, dtype="float32") /* ty=float32 */;
  %726 = cast(meta[relay.Constant][21] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %727 = reshape(%725, newshape=[]) /* ty=float32 */;
  %728 = reshape(%726, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
  %729 = @func_1793(%727, %728) /* ty=(Tensor[(5, 3, 8), float32],) */;
  %730 = cast(%var_2831, dtype="float64") /* ty=Tensor[(480), float64] */;
  %731 = reshape(%730, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %732 = @func_2767(%731) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(480), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %733 = %724.4;
  %734 = %729.0;
  %735 = %732.0;
  (%733, %734, %var_2805, meta[relay.Constant][21] /* ty=Tensor[(120), float32] */, %735, %var_2831)
}

def @func_6070() -> (Tensor[(4, 16, 9), float64],) {
  %736 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  (%736,)
}

def @func_7572() -> Tensor[(4, 16, 9), int32] {
  %737 = @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
  %737.1
}

def @func_2625(%var_2607: Tensor[(4, 16, 9), float64]) -> (Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %738 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %739 = cast(%var_2607, dtype="int16") /* ty=Tensor[(4, 16, 9), int16] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="int16") /* ty=Tensor[(4, 16, 9), int16] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %743 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %744 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %745 = maximum(%741, %742) /* ty=Tensor[(4, 16, 9), int16] */;
  %746 = %743.0;
  %747 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %748 = %744.0;
  (%745, %746, %747, %748)
}

def @func_2675() -> Tensor[(4, 16, 9), bool] {
  %749 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %749.0
}

def @func_6034() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %750 = @func_3854() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %751 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %752 = %750.0;
  %753 = %751.0;
  %754 = @func_2952() /* ty=Tensor[(4, 16, 9), float64] */;
  (%752, %753, %754)
}

def @func_1776() -> (Tensor[(4, 14, 1), float32],) {
  %755 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 1), float32] */;
  %756 = tan(%755) /* ty=Tensor[(4, 14, 1), float32] */;
  (%756,)
}

def @func_7406(%var_7404: Tensor[(1620), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int16], Tensor[(1620), float64]) {
  %757 = @func_7131() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %758 = cast(%var_7404, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %759 = reshape(%758, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %760 = @func_3837(%759) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8]) */;
  %761 = %757.0;
  %762 = %760.1;
  (%761, %762, %var_7404)
}

def @func_7472() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(15, 11, 9), float32], Tensor[(1, 1485), float32]) {
  %763 = @func_7367() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) */;
  %764 = @func_6070() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %765 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %766 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %767 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 1485), float32] */, dtype="float32") /* ty=Tensor[(1, 1485), float32] */;
  %768 = reshape(%767, newshape=[15, 11, 9]) /* ty=Tensor[(15, 11, 9), float32] */;
  %769 = @func_4707(%768) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float32], Tensor[(15, 11, 9), float32]) */;
  %770 = %763.1;
  %771 = %764.0;
  %772 = %765.0;
  %773 = %766.1;
  %774 = %769.4;
  (%770, %771, %772, %773, %774, meta[relay.Constant][23] /* ty=Tensor[(1, 1485), float32] */)
}

def @func_7834(%var_7648: Tensor[(1, 9, 15), bool], %var_7759: Tensor[(7, 70), int64], %var_7780: Tensor[(2, 9, 15), float32], %var_7815: float32, %var_7816: Tensor[(120), float32], %var_7827: Tensor[(1620), float64]) -> (Tensor[(2, 9, 15), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 7, 6), float64], Tensor[(168), bool], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(7, 70), int64], Tensor[(4, 16, 9), bool], Tensor[(2, 9, 15), int32], Tensor[(4, 16, 9), float32], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8], Tensor[(1620), float64]) {
  %775 = cast(%var_7648, dtype="bool") /* ty=Tensor[(1, 9, 15), bool] */;
  %776 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 9, 15), bool] */, dtype="bool") /* ty=Tensor[(2, 9, 15), bool] */;
  %777 = @func_3630() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %778 = @func_3767() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %779 = @func_6034() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %780 = cast(meta[relay.Constant][25] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %781 = cast(meta[relay.Constant][25] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %782 = reshape(%780, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
  %783 = reshape(%781, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
  %784 = @func_2704(%782, %783) /* ty=(Tensor[(4, 7, 6), bool], Tensor[(4, 7, 6), float64]) */;
  %785 = @func_3302() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %786 = cast(%var_7759, dtype="int64") /* ty=Tensor[(7, 70), int64] */;
  %787 = reshape(%786, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), int64] */;
  %788 = @func_2284(%787) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(7, 14, 5), uint32]) */;
  %789 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %790 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 9, 15), bool] */, dtype="float32") /* ty=Tensor[(2, 9, 15), float32] */;
  %791 = asinh(%790) /* ty=Tensor[(2, 9, 15), float32] */;
  %792 = cast(%var_7780, dtype="int32") /* ty=Tensor[(2, 9, 15), int32] */;
  %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%791, dtype="int32") /* ty=Tensor[(2, 9, 15), int32] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %796 = cast(%var_7815, dtype="float32") /* ty=float32 */;
  %797 = cast(%var_7816, dtype="float32") /* ty=Tensor[(120), float32] */;
  %798 = reshape(%796, newshape=[]) /* ty=float32 */;
  %799 = reshape(%797, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
  %800 = @func_1793(%798, %799) /* ty=(Tensor[(5, 3, 8), float32],) */;
  %801 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %802 = cast(%var_7827, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %803 = reshape(%802, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %804 = @func_3837(%803) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8]) */;
  %805 = logical_or(%775, %776) /* ty=Tensor[(2, 9, 15), bool] */;
  %806 = %777.0;
  %807 = %778.0;
  %808 = %779.0;
  %809 = %784.1;
  %810 = %785.1;
  %811 = %788.2;
  %812 = %789.0;
  %813 = add(%794, %795) /* ty=Tensor[(2, 9, 15), int32] */;
  %814 = @func_7199() /* ty=Tensor[(4, 16, 9), float32] */;
  %815 = %800.0;
  %816 = %801.3;
  %817 = %804.3;
  (%805, %806, %807, %808, %809, meta[relay.Constant][25] /* ty=Tensor[(168), bool] */, %810, %811, %var_7759, %812, %813, %814, %815, %var_7815, %var_7816, %816, %817, %var_7827)
}

def @func_5859() -> (Tensor[(4, 16, 9), float64],) {
  %818 = @func_4205() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */;
  %819 = %818.3;
  (%819,)
}

def @func_2445(%var_2373: Tensor[(5, 8, 12), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(4, 16, 9), float64]) {
  %820 = @func_1974() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %821 = cast(%var_2373, dtype="float64") /* ty=Tensor[(5, 8, 12), float64] */;
  %822 = sqrt(%821) /* ty=Tensor[(5, 8, 12), float64] */;
  %823 = cast(%822, dtype="float32") /* ty=Tensor[(5, 8, 12), float32] */;
  %824 = tan(%823) /* ty=Tensor[(5, 8, 12), float32] */;
  %825 = cast(%822, dtype="int16") /* ty=Tensor[(5, 8, 12), int16] */;
  %826 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(%824, dtype="int16") /* ty=Tensor[(5, 8, 12), int16] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %829 = @func_1754() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %830 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %831 = %820.0;
  %832 = bitwise_xor(%827, %828) /* ty=Tensor[(5, 8, 12), int16] */;
  %833 = %829.1;
  (%830, %831, %832, %833)
}

def @func_3652(%var_3639: Tensor[(5, 5, 5), int64], %var_3640: Tensor[(5, 5, 5), int64], %var_3647: Tensor[(420), float64]) -> (Tensor[(5, 5, 5), bool], Tensor[(14, 2, 15), float64], Tensor[(420), float64]) {
  %834 = cast(%var_3640, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
  %835 = shape_of(%var_3639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%var_3639, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %838 = cast(%var_3647, dtype="float64") /* ty=Tensor[(420), float64] */;
  %839 = reshape(%838, newshape=[14, 2, 15]) /* ty=Tensor[(14, 2, 15), float64] */;
  %840 = @func_2900(%839) /* ty=(Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32], Tensor[(4, 16, 9), float64]) */;
  %841 = less(%836, %837) /* ty=Tensor[(5, 5, 5), bool] */;
  %842 = %840.0;
  (%841, %842, %var_3647)
}

def @func_703() -> (Tensor[(4, 16, 9), float64],) {
  %843 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  (%843,)
}

def @func_1793(%var_1788: float32, %var_1789: Tensor[(5, 3, 8), float32]) -> (Tensor[(5, 3, 8), float32],) {
  %844 = cast(%var_1788, dtype="float32") /* ty=float32 */;
  %845 = cast(%var_1789, dtype="float32") /* ty=Tensor[(5, 3, 8), float32] */;
  %846 = maximum(%844, %845) /* ty=Tensor[(5, 3, 8), float32] */;
  (%846,)
}

def @func_2988() -> (Tensor[(4, 16, 9), float64],) {
  %847 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %848 = %847.0;
  (%848,)
}

def @func_4966() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %849 = @func_1223() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %850 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  %851 = %849.0;
  (%850, %851)
}

def @func_6588(%var_6581: Tensor[(4, 9, 13), float64]) -> Tensor[(4, 9, 13), float64] {
  %852 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 9, 13), float64] */, dtype="float64") /* ty=Tensor[(4, 9, 13), float64] */;
  %853 = shape_of(%var_6581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%var_6581, dtype="float64") /* ty=Tensor[(4, 9, 13), float64] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%854, %855) /* ty=Tensor[(4, 9, 13), float64] */
}

def @func_4205() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) {
  %856 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %857 = @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
  %858 = @func_3290() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %859 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
  %860 = %856.0;
  %861 = %857.1;
  %862 = %858.0;
  (%859, %860, %861, %862)
}

def @func_1003() -> (Tensor[(4, 16, 9), bool],) {
  %863 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %864 = %863.0;
  (%864,)
}

def @func_4516() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) {
  %865 = @func_3683() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %866 = %865.0;
  %867 = @func_2675() /* ty=Tensor[(4, 16, 9), bool] */;
  (%866, %867)
}

def @func_6790() -> (Tensor[(4, 14, 1), float32],) {
  %868 = @func_1776() /* ty=(Tensor[(4, 14, 1), float32],) */;
  %869 = %868.0;
  (%869,)
}

def @func_601() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %870 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %871 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  (%870, %871)
}

def @func_1038() -> Tensor[(4, 16, 9), float64] {
  @func_1025() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_4979() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %872 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %873 = @func_1223() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %874 = @func_2988() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %875 = %872.0;
  %876 = %873.0;
  %877 = %874.0;
  (%875, %876, %877)
}

def @func_1862() -> Tensor[(4, 16, 9), float64] {
  @func_515() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_6332() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) {
  %878 = @func_6034() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %879 = @func_5095() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %880 = %878.0;
  %881 = %879.0;
  (%880, %881)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6239() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %3 = fn () -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
    %0 = @func_4979() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
    %1 = @func_3135() /* ty=Tensor[(4, 16, 9), bool] */;
    %2 = %0.2;
    (%1, %2)
  };
  %3() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */
}

def @func_1272() -> (Tensor[(4, 16, 9), float64],) {
  %4 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %5 = %4.0;
  %6 = cast(%5, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %7 = acosh(%6) /* ty=Tensor[(4, 16, 9), float64] */;
  (%7,)
}

def @func_6588(%var_6581: Tensor[(4, 9, 13), float64]) -> Tensor[(4, 9, 13), float64] {
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 9, 13), float64] */, dtype="float64") /* ty=Tensor[(4, 9, 13), float64] */;
  %9 = shape_of(%var_6581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%var_6581, dtype="float64") /* ty=Tensor[(4, 9, 13), float64] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%10, %11) /* ty=Tensor[(4, 9, 13), float64] */
}

def @func_6792() -> (Tensor[(4, 14, 1), float32],) {
  @func_6790() /* ty=(Tensor[(4, 14, 1), float32],) */
}

def @func_3187() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %15 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
    %12 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %13 = %12.1;
    %14 = @func_1599() /* ty=Tensor[(4, 16, 9), float64] */;
    (%13, %14)
  };
  %15() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_4645() -> Tensor[(4, 16, 9), float64] {
  %16 = fn () -> Tensor[(4, 16, 9), float64] {
    @func_3384() /* ty=Tensor[(4, 16, 9), float64] */
  };
  %16() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_6984(%var_6982: Tensor[(2, 12, 4), float64], %var_6983: Tensor[(2, 12, 4), bool]) -> (Tensor[(2, 12, 4), uint16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  @func_6980(%var_6982, %var_6983) /* ty=(Tensor[(2, 12, 4), uint16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */
}

def @func_1224() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %20 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
    %17 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %18 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
    %19 = %17.0;
    (%18, %19)
  };
  %20() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */
}

def @func_2767(%var_2745: Tensor[(480), float64]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(480), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %21 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %22 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %23 = cast(%var_2745, dtype="float64") /* ty=Tensor[(480), float64] */;
  %24 = reshape(%23, newshape=[5, 8, 12]) /* ty=Tensor[(5, 8, 12), float64] */;
  %25 = @func_2445(%24) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(4, 16, 9), float64]) */;
  %26 = %21.1;
  %27 = %22.0;
  %28 = %25.2;
  %29 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %30 = @func_2675() /* ty=Tensor[(4, 16, 9), bool] */;
  (%26, %27, %28, %var_2745, %29, %30)
}

def @func_6753() -> (Tensor[(4, 16, 9), bool],) {
  @func_6751() /* ty=(Tensor[(4, 16, 9), bool],) */
}

def @func_3291() -> (Tensor[(4, 16, 9), float64],) {
  %32 = fn () -> (Tensor[(4, 16, 9), float64],) {
    %31 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
    (%31,)
  };
  %32() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_3867() -> (Tensor[(4, 16, 9), float64],) {
  %35 = fn () -> (Tensor[(4, 16, 9), float64],) {
    %33 = @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
    %34 = %33.0;
    (%34,)
  };
  %35() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_3656(%var_3653: Tensor[(5, 5, 5), int64], %var_3654: Tensor[(5, 5, 5), int64], %var_3655: Tensor[(420), float64]) -> (Tensor[(5, 5, 5), bool], Tensor[(14, 2, 15), float64], Tensor[(420), float64]) {
  %45 = fn (%var_3639: Tensor[(5, 5, 5), int64], %var_3640: Tensor[(5, 5, 5), int64], %var_3647: Tensor[(420), float64]) -> (Tensor[(5, 5, 5), bool], Tensor[(14, 2, 15), float64], Tensor[(420), float64]) {
    %36 = cast(%var_3640, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
    %37 = shape_of(%var_3639, dtype="int32") /* ty=Tensor[(3), int32] */;
    %38 = cast(%var_3639, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
    %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %40 = cast(%var_3647, dtype="float64") /* ty=Tensor[(420), float64] */;
    %41 = reshape(%40, newshape=[14, 2, 15]) /* ty=Tensor[(14, 2, 15), float64] */;
    %42 = @func_2900(%41) /* ty=(Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32], Tensor[(4, 16, 9), float64]) */;
    %43 = less(%38, %39) /* ty=Tensor[(5, 5, 5), bool] */;
    %44 = %42.0;
    (%43, %44, %var_3647)
  };
  %45(%var_3653, %var_3654, %var_3655) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(14, 2, 15), float64], Tensor[(420), float64]) */
}

def @func_1831() -> (Tensor[(4, 16, 9), float32],) {
  @func_1829() /* ty=(Tensor[(4, 16, 9), float32],) */
}

def @func_4206() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) {
  %53 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) {
    %46 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %47 = @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
    %48 = @func_3290() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %49 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
    %50 = %46.0;
    %51 = %47.1;
    %52 = %48.0;
    (%49, %50, %51, %52)
  };
  %53() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */
}

def @func_5852(%var_5819: Tensor[(4, 7, 6), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 7, 6), float64], Tensor[(4, 7, 6), uint64], Tensor[(4, 16, 9), float64]) {
  %54 = @func_1223() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %55 = cast(meta[relay.Constant][1] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %56 = cast(meta[relay.Constant][1] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %57 = reshape(%55, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
  %58 = reshape(%56, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
  %59 = @func_2704(%57, %58) /* ty=(Tensor[(4, 7, 6), bool], Tensor[(4, 7, 6), float64]) */;
  %60 = %59.1;
  %61 = cast(%var_5819, dtype="float64") /* ty=Tensor[(4, 7, 6), float64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="float64") /* ty=Tensor[(4, 7, 6), float64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %65 = cast(meta[relay.Constant][1] /* ty=Tensor[(168), bool] */, dtype="uint64") /* ty=Tensor[(168), uint64] */;
  %66 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%60, dtype="uint64") /* ty=Tensor[(4, 7, 6), uint64] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %69 = %54.0;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %71 = reshape(%70, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %72 = @func_2625(%71) /* ty=(Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %73 = divide(%63, %64) /* ty=Tensor[(4, 7, 6), float64] */;
  %74 = minimum(%67, %68) /* ty=Tensor[(4, 7, 6), uint64] */;
  %75 = %72.2;
  (%69, %73, %74, %75)
}

def @func_4588() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 14, 1), float32]) {
  @func_4586() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 14, 1), float32]) */
}

def @func_6771() -> Tensor[(4, 16, 9), bool] {
  %77 = fn () -> Tensor[(4, 16, 9), bool] {
    %76 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
    %76.0
  };
  %77() /* ty=Tensor[(4, 16, 9), bool] */
}

def @func_2902(%var_2901: Tensor[(14, 2, 15), float64]) -> (Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32], Tensor[(4, 16, 9), float64]) {
  %84 = fn (%var_2860: Tensor[(14, 2, 15), float64]) -> (Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32], Tensor[(4, 16, 9), float64]) {
    %78 = cast(%var_2860, dtype="float64") /* ty=Tensor[(14, 2, 15), float64] */;
    %79 = cast(%var_2860, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
    %80 = @func_1640() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) */;
    %81 = cos(%78) /* ty=Tensor[(14, 2, 15), float64] */;
    %82 = tan(%79) /* ty=Tensor[(14, 2, 15), float32] */;
    %83 = %80.0;
    (%81, %82, %83)
  };
  %84(%var_2901) /* ty=(Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32], Tensor[(4, 16, 9), float64]) */
}

def @func_3113() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  @func_3111() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */
}

def @func_6071() -> (Tensor[(4, 16, 9), float64],) {
  %86 = fn () -> (Tensor[(4, 16, 9), float64],) {
    %85 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
    (%85,)
  };
  %86() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_7131() -> (Tensor[(4, 16, 9), float64],) {
  %87 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %88 = %87.1;
  (%88,)
}

def @func_2548(%var_2546: Tensor[(1620), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(1620), float64]) {
  @func_2545(%var_2546) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(1620), float64]) */
}

def @func_2306(%var_2292: Tensor[(2, 11, 15), int64], %var_2293: Tensor[(2, 11, 15), int64]) -> (Tensor[(2, 11, 15), int64], Tensor[(4, 16, 9), float64]) {
  %89 = cast(%var_2293, dtype="int64") /* ty=Tensor[(2, 11, 15), int64] */;
  %90 = shape_of(%var_2292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%var_2292, dtype="int64") /* ty=Tensor[(2, 11, 15), int64] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %93 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %94 = minimum(%91, %92) /* ty=Tensor[(2, 11, 15), int64] */;
  %95 = %93.0;
  (%94, %95)
}

def @func_5674() -> (Tensor[(4, 16, 9), float64],) {
  %97 = fn () -> (Tensor[(4, 16, 9), float64],) {
    %96 = @func_3278() /* ty=Tensor[(4, 16, 9), float64] */;
    (%96,)
  };
  %97() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_5549(%var_5548: Tensor[(10, 5, 16), float64]) -> (Tensor[(10, 5, 16), float64],) {
  %110 = fn (%var_5531: Tensor[(10, 5, 16), float64]) -> (Tensor[(10, 5, 16), float64],) {
    %98 = cast(%var_5531, dtype="float64") /* ty=Tensor[(10, 5, 16), float64] */;
    %99 = tan(%98) /* ty=Tensor[(10, 5, 16), float64] */;
    %100 = cast(%var_5531, dtype="uint32") /* ty=Tensor[(10, 5, 16), uint32] */;
    %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
    %102 = cast(%99, dtype="uint32") /* ty=Tensor[(10, 5, 16), uint32] */;
    %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %104 = bitwise_and(%102, %103) /* ty=Tensor[(10, 5, 16), uint32] */;
    %105 = cast(%104, dtype="float64") /* ty=Tensor[(10, 5, 16), float64] */;
    %106 = shape_of(%var_5531, dtype="int32") /* ty=Tensor[(3), int32] */;
    %107 = cast(%var_5531, dtype="float64") /* ty=Tensor[(10, 5, 16), float64] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %109 = floor_mod(%107, %108) /* ty=Tensor[(10, 5, 16), float64] */;
    (%109,)
  };
  %110(%var_5548) /* ty=(Tensor[(10, 5, 16), float64],) */
}

def @func_6332() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) {
  %111 = @func_6034() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %112 = @func_5095() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %113 = %111.0;
  %114 = %112.0;
  (%113, %114)
}

def @main(%var_7993: Tensor[(3, 9, 11), float32], %var_8015: Tensor[(3, 9, 11), float32], %var_8035: Tensor[(3, 9, 11), float32]) -> (Tensor[(3, 9, 11), uint16], Tensor[(3, 9, 11), bool]) {
  %115 = cast(%var_8015, dtype="uint16") /* ty=Tensor[(3, 9, 11), uint16] */;
  %116 = shape_of(%var_7993, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%var_7993, dtype="uint16") /* ty=Tensor[(3, 9, 11), uint16] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %119 = cast(%var_7993, dtype="float32") /* ty=Tensor[(3, 9, 11), float32] */;
  %120 = log(%119) /* ty=Tensor[(3, 9, 11), float32] */;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(3, 9, 11), float32] */;
  %122 = sigmoid(%121) /* ty=Tensor[(3, 9, 11), float32] */;
  %123 = cast(%var_8035, dtype="bool") /* ty=Tensor[(3, 9, 11), bool] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="bool") /* ty=Tensor[(3, 9, 11), bool] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %127 = maximum(%117, %118) /* ty=Tensor[(3, 9, 11), uint16] */;
  %128 = less_equal(%125, %126) /* ty=Tensor[(3, 9, 11), bool] */;
  (%127, %128)
}

def @func_7056(%var_7054: Tensor[(490), int64]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(490), int64]) {
  @func_7053(%var_7054) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(490), int64]) */
}

def @func_7842(%var_7836: Tensor[(1, 9, 15), bool], %var_7837: Tensor[(7, 70), int64], %var_7838: Tensor[(2, 9, 15), float32], %var_7839: float32, %var_7840: Tensor[(120), float32], %var_7841: Tensor[(1620), float64]) -> (Tensor[(2, 9, 15), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 7, 6), float64], Tensor[(168), bool], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(7, 70), int64], Tensor[(4, 16, 9), bool], Tensor[(2, 9, 15), int32], Tensor[(4, 16, 9), float32], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8], Tensor[(1620), float64]) {
  @func_7834(%var_7836, %var_7837, %var_7838, %var_7839, %var_7840, %var_7841) /* ty=(Tensor[(2, 9, 15), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 7, 6), float64], Tensor[(168), bool], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(7, 70), int64], Tensor[(4, 16, 9), bool], Tensor[(2, 9, 15), int32], Tensor[(4, 16, 9), float32], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8], Tensor[(1620), float64]) */
}

def @func_5917() -> (Tensor[(4, 16, 9), bool],) {
  %131 = fn () -> (Tensor[(4, 16, 9), bool],) {
    %129 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
    %130 = %129.0;
    (%130,)
  };
  %131() /* ty=(Tensor[(4, 16, 9), bool],) */
}

def @func_4710(%var_4708: Tensor[(15, 11, 9), float32]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float32], Tensor[(15, 11, 9), float32]) {
  @func_4707(%var_4708) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float32], Tensor[(15, 11, 9), float32]) */
}

def @func_2580() -> (Tensor[(4, 2, 9), int32], Tensor[(4, 16, 9), float64]) {
  @func_2578() /* ty=(Tensor[(4, 2, 9), int32], Tensor[(4, 16, 9), float64]) */
}

def @func_6344() -> (Tensor[(4, 16, 9), float64],) {
  @func_6342() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_6423(%var_6421: float32) -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float32], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), float64]) {
  @func_6420(%var_6421) /* ty=(Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float32], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), float64]) */
}

def @func_4448() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(9, 12, 15), float64], Tensor[(9, 12, 15), float64]) {
  %146 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(9, 12, 15), float64], Tensor[(9, 12, 15), float64]) {
    %132 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %133 = %132.0;
    %134 = cast(%133, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
    %135 = reshape(%134, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
    %136 = @func_2625(%135) /* ty=(Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
    %137 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %138 = @func_4255() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64]) */;
    %139 = %138.2;
    %140 = cast(%139, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
    %141 = reshape(%140, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
    %142 = @func_1617(%141) /* ty=(Tensor[(9, 12, 15), float64],) */;
    %143 = %136.1;
    %144 = %137.0;
    %145 = %142.0;
    (%133, %143, %144, %139, %145)
  };
  %146() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(9, 12, 15), float64], Tensor[(9, 12, 15), float64]) */
}

def @func_5669(%var_5667: Tensor[(7, 1, 15), float64]) -> (Tensor[(7, ?, 15), uint32],) {
  @func_5666(%var_5667) /* ty=(Tensor[(7, ?, 15), uint32],) */
}

def @func_7076() -> Tensor[(4, 16, 9), int32] {
  %147 = @func_5514() /* ty=(Tensor[(4, 16, 9), int32],) */;
  %147.0
}

def @func_1862() -> Tensor[(4, 16, 9), float64] {
  @func_515() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_2953() -> Tensor[(4, 16, 9), float64] {
  %149 = fn () -> Tensor[(4, 16, 9), float64] {
    %148 = @func_601() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
    %148.0
  };
  %149() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_1921() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64], Tensor[(4, 16, 9), float64]) {
  %150 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %151 = cast(meta[relay.Constant][2] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %152 = reshape(%151, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %153 = @func_1684(%152) /* ty=(Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), float64]) */;
  %154 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
  %155 = %150.3;
  %156 = %153.0;
  %157 = @func_1599() /* ty=Tensor[(4, 16, 9), float64] */;
  (%154, %155, %156, meta[relay.Constant][2] /* ty=Tensor[(160), float64] */, %157)
}

def @func_7643() -> Tensor[(4, 16, 9), bool] {
  @func_6770() /* ty=Tensor[(4, 16, 9), bool] */
}

def @func_1274() -> (Tensor[(4, 16, 9), float64],) {
  @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_7611() -> Tensor[(7, 9, 8), float64] {
  @func_7609() /* ty=Tensor[(7, 9, 8), float64] */
}

def @func_5172() -> (Tensor[(4, 16, 9), float64],) {
  %158 = @func_3866() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %159 = %158.0;
  (%159,)
}

def @func_3111() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %160 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %161 = %160.0;
  %162 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  (%161, %162)
}

def @func_868() -> (Tensor[(4, 16, 9), bool],) {
  @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */
}

def @func_7247() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int32]) {
  %166 = fn () -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int32]) {
    %163 = @func_3223() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %164 = %163.0;
    %165 = @func_7076() /* ty=Tensor[(4, 16, 9), int32] */;
    (%164, %165)
  };
  %166() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int32]) */
}

def @func_7572() -> Tensor[(4, 16, 9), int32] {
  %167 = @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
  %167.1
}

def @func_3385() -> Tensor[(4, 16, 9), float64] {
  %168 = fn () -> Tensor[(4, 16, 9), float64] {
    @func_515() /* ty=Tensor[(4, 16, 9), float64] */
  };
  %168() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_655(%var_653: Tensor[(4, 16, 9), float64]) -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) {
  @func_652(%var_653) /* ty=(Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */
}

def @func_5452(%var_5375: float32, %var_5376: Tensor[(11, 12, 8), float32], %var_5387: Tensor[(11, 12, 8), float32], %var_5398: Tensor[(576), float64], %var_5441: Tensor[(11, 12, 8), float64]) -> (Tensor[(11, 12, 8), bool], Tensor[(4, 16, 9), uint32], Tensor[(576), float64], Tensor[(4, 16, 9), float64], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), float32], Tensor[(4, 16, 9), float64]) {
  %169 = cast(%var_5375, dtype="float32") /* ty=float32 */;
  %170 = cast(%var_5376, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %171 = divide(%169, %170) /* ty=Tensor[(11, 12, 8), float32] */;
  %172 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 12, 8), float32] */, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = cast(%var_5398, dtype="float64") /* ty=Tensor[(576), float64] */;
  %177 = reshape(%176, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %178 = @func_1640() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) */;
  %179 = cast(%var_5387, dtype="int32") /* ty=Tensor[(11, 12, 8), int32] */;
  %180 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%171, dtype="int32") /* ty=Tensor[(11, 12, 8), int32] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %183 = left_shift(%181, %182) /* ty=Tensor[(11, 12, 8), int32] */;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(11, 12, 8), float64] */;
  %185 = atanh(%184) /* ty=Tensor[(11, 12, 8), float64] */;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %187 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 12, 8), float32] */, dtype="float64") /* ty=Tensor[(11, 12, 8), float64] */;
  %188 = sinh(%187) /* ty=Tensor[(11, 12, 8), float64] */;
  %189 = cast(%var_5441, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %193 = @func_3630() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %194 = less_equal(%174, %175) /* ty=Tensor[(11, 12, 8), bool] */;
  %195 = @func_1204(%177) /* ty=Tensor[(4, 16, 9), uint32] */;
  %196 = %178.0;
  %197 = log(%186) /* ty=Tensor[(11, 12, 8), float32] */;
  %198 = floor_divide(%191, %192) /* ty=Tensor[(11, 12, 8), float32] */;
  %199 = %193.0;
  (%194, %195, %var_5398, %196, %197, %198, %199)
}

def @func_4707(%var_4657: Tensor[(15, 11, 9), float32]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float32], Tensor[(15, 11, 9), float32]) {
  %200 = @func_3025() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %201 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 11, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
  %202 = sinh(%201) /* ty=Tensor[(15, 11, 9), float64] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(15, 11, 9), float32] */;
  %204 = cosh(%203) /* ty=Tensor[(15, 11, 9), float32] */;
  %205 = cast(%204, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
  %206 = exp(%205) /* ty=Tensor[(15, 11, 9), float64] */;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(15, 11, 9), float64] */;
  %208 = cast(%202, dtype="int16") /* ty=Tensor[(15, 11, 9), int16] */;
  %209 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(15, 11, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 11, 9), float64] */, dtype="int16") /* ty=Tensor[(15, 11, 9), int16] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %212 = multiply(%210, %211) /* ty=Tensor[(15, 11, 9), int16] */;
  %213 = cast(%var_4657, dtype="bool") /* ty=Tensor[(15, 11, 9), bool] */;
  %214 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%204, dtype="bool") /* ty=Tensor[(15, 11, 9), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = greater(%215, %216) /* ty=Tensor[(15, 11, 9), bool] */;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(15, 11, 9), float32] */;
  %219 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%212, dtype="float32") /* ty=Tensor[(15, 11, 9), float32] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %222 = cast(%206, dtype="float32") /* ty=Tensor[(15, 11, 9), float32] */;
  %223 = @func_3384() /* ty=Tensor[(4, 16, 9), float64] */;
  %224 = %200.0;
  %225 = log2(%207) /* ty=Tensor[(15, 11, 9), float64] */;
  %226 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  %227 = divide(%220, %221) /* ty=Tensor[(15, 11, 9), float32] */;
  %228 = asin(%222) /* ty=Tensor[(15, 11, 9), float32] */;
  (%223, %224, %225, %226, %227, %228)
}

def @func_908() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) {
  %229 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %230 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %231 = cast(%230, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %232 = log2(%231) /* ty=Tensor[(4, 16, 9), float64] */;
  %233 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %234 = %233.0;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %236 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%232, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %239 = floor_divide(%237, %238) /* ty=Tensor[(4, 16, 9), float32] */;
  %240 = cast(%230, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = %229.0;
  %245 = not_equal(%242, %243) /* ty=Tensor[(4, 16, 9), bool] */;
  (%244, %245)
}

def @func_5666(%var_5653: Tensor[(7, 1, 15), float64]) -> (Tensor[(7, ?, 15), uint32],) {
  %246 = cast(%var_5653, dtype="float64") /* ty=Tensor[(7, 1, 15), float64] */;
  %247 = tan(%246) /* ty=Tensor[(7, 1, 15), float64] */;
  %248 = cast(%var_5653, dtype="uint32") /* ty=Tensor[(7, 1, 15), uint32] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="uint32") /* ty=Tensor[(7, 1, 15), uint32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %252 = subtract(%250, %251) /* ty=Tensor[(7, ?, 15), uint32] */;
  (%252,)
}

def @func_1797(%var_1795: float32, %var_1796: Tensor[(5, 3, 8), float32]) -> (Tensor[(5, 3, 8), float32],) {
  @func_1793(%var_1795, %var_1796) /* ty=(Tensor[(5, 3, 8), float32],) */
}

def @func_954() -> (Tensor[(4, 16, 9), bool],) {
  %262 = fn () -> (Tensor[(4, 16, 9), bool],) {
    %253 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
    %254 = %253.4;
    %255 = cast(%254, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
    %256 = asinh(%255) /* ty=Tensor[(4, 16, 9), float32] */;
    %257 = cast(%254, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
    %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%256, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %261 = logical_or(%259, %260) /* ty=Tensor[(4, 16, 9), bool] */;
    (%261,)
  };
  %262() /* ty=(Tensor[(4, 16, 9), bool],) */
}

def @func_3612(%var_3591: Tensor[(420), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(420), float64], Tensor[(14, 2, 15), float32]) {
  %263 = cast(%var_3591, dtype="float64") /* ty=Tensor[(420), float64] */;
  %264 = reshape(%263, newshape=[14, 2, 15]) /* ty=Tensor[(14, 2, 15), float64] */;
  %265 = @func_2900(%264) /* ty=(Tensor[(14, 2, 15), float64], Tensor[(14, 2, 15), float32], Tensor[(4, 16, 9), float64]) */;
  %266 = %265.1;
  %267 = cast(%266, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %268 = asinh(%267) /* ty=Tensor[(14, 2, 15), float32] */;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %270 = @func_3384() /* ty=Tensor[(4, 16, 9), float64] */;
  %271 = acosh(%269) /* ty=Tensor[(14, 2, 15), float32] */;
  (%270, %var_3591, %271)
}

def @func_6219(%var_6217: int8, %var_6218: Tensor[(16, 12, 10), int8]) -> Tensor[(16, 12, 10), int8] {
  %274 = fn (%var_6210: int8, %var_6211: Tensor[(16, 12, 10), int8]) -> Tensor[(16, 12, 10), int8] {
    %272 = cast(%var_6210, dtype="int8") /* ty=int8 */;
    %273 = cast(%var_6211, dtype="int8") /* ty=Tensor[(16, 12, 10), int8] */;
    bitwise_or(%272, %273) /* ty=Tensor[(16, 12, 10), int8] */
  };
  %274(%var_6217, %var_6218) /* ty=Tensor[(16, 12, 10), int8] */
}

def @func_7645() -> Tensor[(4, 16, 9), bool] {
  @func_7643() /* ty=Tensor[(4, 16, 9), bool] */
}

def @func_910() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) {
  @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */
}

def @func_5867() -> Tensor[(4, 16, 9), float64] {
  @func_5865() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_6420(%var_6397: float32) -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float32], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), float64]) {
  %275 = @func_5514() /* ty=(Tensor[(4, 16, 9), int32],) */;
  %276 = @func_1829() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %277 = cast(%var_6397, dtype="float32") /* ty=float32 */;
  %278 = cast(meta[relay.Constant][5] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %279 = reshape(%277, newshape=[]) /* ty=float32 */;
  %280 = reshape(%278, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
  %281 = @func_1793(%279, %280) /* ty=(Tensor[(5, 3, 8), float32],) */;
  %282 = @func_6058() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %283 = %275.0;
  %284 = %276.0;
  %285 = %281.0;
  %286 = %282.0;
  (%283, %284, %285, %var_6397, meta[relay.Constant][5] /* ty=Tensor[(120), float32] */, %286)
}

def @func_1787() -> (Tensor[(9, 12, 15), float64],) {
  @func_1785() /* ty=(Tensor[(9, 12, 15), float64],) */
}

def @func_3839(%var_3838: Tensor[(9, 12, 15), float64]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8]) {
  %309 = fn (%var_3778: Tensor[(9, 12, 15), float64]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8]) {
    %287 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %288 = @func_3560() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), uint32]) */;
    %289 = @func_1785() /* ty=(Tensor[(9, 12, 15), float64],) */;
    %290 = %289.0;
    %291 = cast(%var_3778, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
    %292 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
    %293 = cast(%290, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
    %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %295 = equal(%293, %294) /* ty=Tensor[(9, 12, 15), bool] */;
    %296 = cast(%var_3778, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
    %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %298 = cast(%295, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
    %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %300 = floor_mod(%298, %299) /* ty=Tensor[(9, 12, 15), float32] */;
    %301 = cast(%300, dtype="int8") /* ty=Tensor[(9, 12, 15), int8] */;
    %302 = shape_of(%var_3778, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%var_3778, dtype="int8") /* ty=Tensor[(9, 12, 15), int8] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %305 = %287.0;
    %306 = %288.2;
    %307 = @func_3384() /* ty=Tensor[(4, 16, 9), float64] */;
    %308 = bitwise_or(%303, %304) /* ty=Tensor[(9, 12, 15), int8] */;
    (%305, %306, %307, %308)
  };
  %309(%var_3838) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8]) */
}

def @func_7133() -> (Tensor[(4, 16, 9), float64],) {
  @func_7131() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_1004() -> (Tensor[(4, 16, 9), bool],) {
  %312 = fn () -> (Tensor[(4, 16, 9), bool],) {
    %310 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %311 = %310.0;
    (%311,)
  };
  %312() /* ty=(Tensor[(4, 16, 9), bool],) */
}

def @func_2485(%var_2483: float64, %var_2484: Tensor[(15, 2, 7), float64]) -> (Tensor[(15, 2, 7), float32],) {
  %321 = fn (%var_2464: float64, %var_2465: Tensor[(15, 2, 7), float64]) -> (Tensor[(15, 2, 7), float32],) {
    %313 = cast(%var_2464, dtype="float64") /* ty=float64 */;
    %314 = cast(%var_2465, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
    %315 = minimum(%313, %314) /* ty=Tensor[(15, 2, 7), float64] */;
    %316 = cast(%var_2465, dtype="float32") /* ty=Tensor[(15, 2, 7), float32] */;
    %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
    %318 = cast(%315, dtype="float32") /* ty=Tensor[(15, 2, 7), float32] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %320 = mod(%318, %319) /* ty=Tensor[(15, 2, 7), float32] */;
    (%320,)
  };
  %321(%var_2483, %var_2484) /* ty=(Tensor[(15, 2, 7), float32],) */
}

def @func_5097() -> (Tensor[(4, 16, 9), float32],) {
  @func_5095() /* ty=(Tensor[(4, 16, 9), float32],) */
}

def @func_6059() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %326 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
    %322 = @func_5673() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %323 = @func_1921() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64], Tensor[(4, 16, 9), float64]) */;
    %324 = %322.0;
    %325 = %323.4;
    (%324, %325)
  };
  %326() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_7094() -> Tensor[(4, 16, 9), float64] {
  %327 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %327.1
}

def @func_5638(%var_5626: Tensor[(9, 12, 15), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), bool]) {
  %328 = @func_5246() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %329 = @func_4255() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64]) */;
  %330 = %329.2;
  %331 = cast(%var_5626, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = %328.0;
  %336 = logical_and(%333, %334) /* ty=Tensor[(9, 12, 15), bool] */;
  (%335, %336)
}

def @func_7882() -> (Tensor[(4, 16, 9), float32],) {
  %337 = @func_7485() /* ty=(Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64]) */;
  %338 = %337.0;
  (%338,)
}

def @func_2675() -> Tensor[(4, 16, 9), bool] {
  %339 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %339.0
}

def @func_7078() -> Tensor[(4, 16, 9), int32] {
  @func_7076() /* ty=Tensor[(4, 16, 9), int32] */
}

def @func_6524() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %340 = @func_3290() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %341 = %340.0;
  %342 = @func_5865() /* ty=Tensor[(4, 16, 9), float64] */;
  (%341, %342)
}

def @func_1373() -> Tensor[(4, 16, 9), float64] {
  @func_1371() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_4325(%var_4323: Tensor[(125), int64], %var_4324: Tensor[(420), float64]) -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), bool], Tensor[(420), float64], Tensor[(125), int64], Tensor[(420), float64]) {
  @func_4321(%var_4323, %var_4324) /* ty=(Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), bool], Tensor[(420), float64], Tensor[(125), int64], Tensor[(420), float64]) */
}

def @func_3632() -> (Tensor[(4, 16, 9), float64],) {
  @func_3630() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_6342() -> (Tensor[(4, 16, 9), float64],) {
  %343 = @func_3302() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %344 = %343.0;
  (%344,)
}

def @func_5174() -> (Tensor[(4, 16, 9), float64],) {
  @func_5172() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_4980() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %351 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
    %345 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %346 = @func_1223() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
    %347 = @func_2988() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %348 = %345.0;
    %349 = %346.0;
    %350 = %347.0;
    (%348, %349, %350)
  };
  %351() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_1975() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %358 = fn () -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
    %352 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %353 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %354 = @func_1388() /* ty=Tensor[(4, 16, 9), bool] */;
    %355 = @func_1862() /* ty=Tensor[(4, 16, 9), float64] */;
    %356 = %352.0;
    %357 = %353.0;
    (%354, %355, %356, %357)
  };
  %358() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */
}

def @func_6034() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %359 = @func_3854() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %360 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %361 = %359.0;
  %362 = %360.0;
  %363 = @func_2952() /* ty=Tensor[(4, 16, 9), float64] */;
  (%361, %362, %363)
}

def @func_6526() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  @func_6524() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_7945() -> (Tensor[(9, 12, 15), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) {
  %371 = fn () -> (Tensor[(9, 12, 15), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) {
    %364 = @func_7551() /* ty=(Tensor[(9, 12, 15), float64],) */;
    %365 = %364.0;
    %366 = cast(%365, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
    %367 = @func_7882() /* ty=(Tensor[(4, 16, 9), float32],) */;
    %368 = log2(%366) /* ty=Tensor[(9, 12, 15), float64] */;
    %369 = @func_3384() /* ty=Tensor[(4, 16, 9), float64] */;
    %370 = %367.0;
    (%368, %369, %370)
  };
  %371() /* ty=(Tensor[(9, 12, 15), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) */
}

def @func_1371() -> Tensor[(4, 16, 9), float64] {
  %372 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %372.0
}

def @func_1204(%var_1199: Tensor[(4, 16, 9), float64]) -> Tensor[(4, 16, 9), uint32] {
  %373 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  %374 = cast(%var_1199, dtype="uint32") /* ty=Tensor[(4, 16, 9), uint32] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="uint32") /* ty=Tensor[(4, 16, 9), uint32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%376, %377) /* ty=Tensor[(4, 16, 9), uint32] */
}

def @func_2578() -> (Tensor[(4, 2, 9), int32], Tensor[(4, 16, 9), float64]) {
  %378 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 2, 9), int32] */, dtype="int32") /* ty=Tensor[(4, 2, 9), int32] */;
  %379 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(4, 2, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 2, 9), int32] */, dtype="int32") /* ty=Tensor[(4, 2, 9), int32] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %382 = right_shift(%380, %381) /* ty=Tensor[(4, 2, 9), int32] */;
  %383 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  (%382, %383)
}

def @func_1389() -> Tensor[(4, 16, 9), bool] {
  %385 = fn () -> Tensor[(4, 16, 9), bool] {
    %384 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %384.0
  };
  %385() /* ty=Tensor[(4, 16, 9), bool] */
}

def @func_4911(%var_4909: Tensor[(4, 16, 9), bool]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 14, 1), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(420), float64], Tensor[(14, 2, 15), bool]) {
  @func_4908(%var_4909) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 14, 1), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(420), float64], Tensor[(14, 2, 15), bool]) */
}

def @func_2628(%var_2626: Tensor[(4, 16, 9), float64]) -> (Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  @func_2625(%var_2626) /* ty=(Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */
}

def @func_2625(%var_2607: Tensor[(4, 16, 9), float64]) -> (Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %386 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %387 = cast(%var_2607, dtype="int16") /* ty=Tensor[(4, 16, 9), int16] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="int16") /* ty=Tensor[(4, 16, 9), int16] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %391 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %392 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %393 = maximum(%389, %390) /* ty=Tensor[(4, 16, 9), int16] */;
  %394 = %391.0;
  %395 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %396 = %392.0;
  (%393, %394, %395, %396)
}

def @func_3136() -> Tensor[(4, 16, 9), bool] {
  %398 = fn () -> Tensor[(4, 16, 9), bool] {
    %397 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %397.0
  };
  %398() /* ty=Tensor[(4, 16, 9), bool] */
}

def @func_5314() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 14, 1), float32]) {
  %399 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %400 = @func_1776() /* ty=(Tensor[(4, 14, 1), float32],) */;
  %401 = %399.2;
  %402 = %400.0;
  (%401, %402)
}

def @func_4321(%var_4303: Tensor[(125), int64], %var_4304: Tensor[(420), float64]) -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), bool], Tensor[(420), float64], Tensor[(125), int64], Tensor[(420), float64]) {
  %403 = @func_3334() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
  %404 = @func_3223() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %405 = cast(%var_4303, dtype="int64") /* ty=Tensor[(125), int64] */;
  %406 = cast(%var_4303, dtype="int64") /* ty=Tensor[(125), int64] */;
  %407 = cast(%var_4304, dtype="float64") /* ty=Tensor[(420), float64] */;
  %408 = reshape(%405, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %409 = reshape(%406, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
  %410 = reshape(%407, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %411 = @func_3652(%408, %409, %410) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(14, 2, 15), float64], Tensor[(420), float64]) */;
  %412 = %403.1;
  %413 = %404.0;
  %414 = %411.2;
  (%412, %413, %414, %var_4303, %var_4304)
}

def @func_7551() -> (Tensor[(9, 12, 15), float64],) {
  %415 = @func_4447() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(9, 12, 15), float64], Tensor[(9, 12, 15), float64]) */;
  %416 = %415.4;
  (%416,)
}

def @func_7408(%var_7407: Tensor[(1620), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int16], Tensor[(1620), float64]) {
  %423 = fn (%var_7404: Tensor[(1620), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int16], Tensor[(1620), float64]) {
    %417 = @func_7131() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %418 = cast(%var_7404, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %419 = reshape(%418, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
    %420 = @func_3837(%419) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8]) */;
    %421 = %417.0;
    %422 = %420.1;
    (%421, %422, %var_7404)
  };
  %423(%var_7407) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int16], Tensor[(1620), float64]) */
}

def @func_4257() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64]) {
  @func_4255() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64]) */
}

def @func_1777() -> (Tensor[(4, 14, 1), float32],) {
  %426 = fn () -> (Tensor[(4, 14, 1), float32],) {
    %424 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 1), float32] */;
    %425 = tan(%424) /* ty=Tensor[(4, 14, 1), float32] */;
    (%425,)
  };
  %426() /* ty=(Tensor[(4, 14, 1), float32],) */
}

def @func_1923() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64], Tensor[(4, 16, 9), float64]) {
  @func_1921() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_3012() -> (Tensor[(4, 16, 9), bool],) {
  %427 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %428 = %427.0;
  (%428,)
}

def @func_1412() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) {
  @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */
}

def @func_2360() -> (Tensor[(4, 16, 9), int8], Tensor[(4, 16, 9), float64]) {
  @func_2358() /* ty=(Tensor[(4, 16, 9), int8], Tensor[(4, 16, 9), float64]) */
}

def @func_3304() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  @func_3302() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */
}

def @func_2182() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) {
  %444 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) {
    %429 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %430 = @func_1921() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64], Tensor[(4, 16, 9), float64]) */;
    %431 = %430.4;
    %432 = cast(%431, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
    %433 = reshape(%432, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
    %434 = @func_652(%433) /* ty=(Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */;
    %435 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
    %436 = %435.1;
    %437 = cast(%436, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
    %438 = @func_1829() /* ty=(Tensor[(4, 16, 9), float32],) */;
    %439 = %429.4;
    %440 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
    %441 = %434.1;
    %442 = atan(%437) /* ty=Tensor[(4, 16, 9), float32] */;
    %443 = %438.0;
    (%439, %431, %440, %441, %442, %443)
  };
  %444() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */
}

def @func_5516() -> (Tensor[(4, 16, 9), int32],) {
  @func_5514() /* ty=(Tensor[(4, 16, 9), int32],) */
}

def @func_5861() -> (Tensor[(4, 16, 9), float64],) {
  @func_5859() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_6591(%var_6589: Tensor[(4, 9, 13), float64]) -> Tensor[(4, 9, 13), float64] {
  @func_6588(%var_6589) /* ty=Tensor[(4, 9, 13), float64] */
}

def @func_1864() -> Tensor[(4, 16, 9), float64] {
  @func_1862() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_3026() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %447 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
    %445 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
    %446 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
    (%445, %446)
  };
  %447() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_7609() -> Tensor[(7, 9, 8), float64] {
  %448 = @func_6819() /* ty=(Tensor[(7, 9, 8), float64],) */;
  %449 = %448.0;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
  log10(%450) /* ty=Tensor[(7, 9, 8), float64] */
}

def @func_2704(%var_2695: Tensor[(4, 7, 6), bool], %var_2696: Tensor[(4, 7, 6), bool]) -> (Tensor[(4, 7, 6), bool], Tensor[(4, 7, 6), float64]) {
  %451 = cast(%var_2696, dtype="bool") /* ty=Tensor[(4, 7, 6), bool] */;
  %452 = shape_of(%var_2695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%var_2695, dtype="bool") /* ty=Tensor[(4, 7, 6), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = cast(%var_2695, dtype="float64") /* ty=Tensor[(4, 7, 6), float64] */;
  %456 = logical_or(%453, %454) /* ty=Tensor[(4, 7, 6), bool] */;
  %457 = sigmoid(%455) /* ty=Tensor[(4, 7, 6), float64] */;
  (%456, %457)
}

def @func_4352() -> (Tensor[(4, 16, 9), float64],) {
  %458 = @func_2578() /* ty=(Tensor[(4, 2, 9), int32], Tensor[(4, 16, 9), float64]) */;
  %459 = %458.1;
  (%459,)
}

def @func_7834(%var_7648: Tensor[(1, 9, 15), bool], %var_7759: Tensor[(7, 70), int64], %var_7780: Tensor[(2, 9, 15), float32], %var_7815: float32, %var_7816: Tensor[(120), float32], %var_7827: Tensor[(1620), float64]) -> (Tensor[(2, 9, 15), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 7, 6), float64], Tensor[(168), bool], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(7, 70), int64], Tensor[(4, 16, 9), bool], Tensor[(2, 9, 15), int32], Tensor[(4, 16, 9), float32], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8], Tensor[(1620), float64]) {
  %460 = cast(%var_7648, dtype="bool") /* ty=Tensor[(1, 9, 15), bool] */;
  %461 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 9, 15), bool] */, dtype="bool") /* ty=Tensor[(2, 9, 15), bool] */;
  %462 = @func_3630() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %463 = @func_3767() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %464 = @func_6034() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %465 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %466 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %467 = reshape(%465, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
  %468 = reshape(%466, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
  %469 = @func_2704(%467, %468) /* ty=(Tensor[(4, 7, 6), bool], Tensor[(4, 7, 6), float64]) */;
  %470 = @func_3302() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %471 = cast(%var_7759, dtype="int64") /* ty=Tensor[(7, 70), int64] */;
  %472 = reshape(%471, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), int64] */;
  %473 = @func_2284(%472) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(7, 14, 5), uint32]) */;
  %474 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %475 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 9, 15), bool] */, dtype="float32") /* ty=Tensor[(2, 9, 15), float32] */;
  %476 = asinh(%475) /* ty=Tensor[(2, 9, 15), float32] */;
  %477 = cast(%var_7780, dtype="int32") /* ty=Tensor[(2, 9, 15), int32] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="int32") /* ty=Tensor[(2, 9, 15), int32] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %481 = cast(%var_7815, dtype="float32") /* ty=float32 */;
  %482 = cast(%var_7816, dtype="float32") /* ty=Tensor[(120), float32] */;
  %483 = reshape(%481, newshape=[]) /* ty=float32 */;
  %484 = reshape(%482, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
  %485 = @func_1793(%483, %484) /* ty=(Tensor[(5, 3, 8), float32],) */;
  %486 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %487 = cast(%var_7827, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %488 = reshape(%487, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %489 = @func_3837(%488) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), int8]) */;
  %490 = logical_or(%460, %461) /* ty=Tensor[(2, 9, 15), bool] */;
  %491 = %462.0;
  %492 = %463.0;
  %493 = %464.0;
  %494 = %469.1;
  %495 = %470.1;
  %496 = %473.2;
  %497 = %474.0;
  %498 = add(%479, %480) /* ty=Tensor[(2, 9, 15), int32] */;
  %499 = @func_7199() /* ty=Tensor[(4, 16, 9), float32] */;
  %500 = %485.0;
  %501 = %486.3;
  %502 = %489.3;
  (%490, %491, %492, %493, %494, meta[relay.Constant][10] /* ty=Tensor[(168), bool] */, %495, %496, %var_7759, %497, %498, %499, %500, %var_7815, %var_7816, %501, %502, %var_7827)
}

def @func_3767() -> (Tensor[(4, 16, 9), float32],) {
  %503 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %505 = sin(%504) /* ty=Tensor[(4, 16, 9), float32] */;
  (%505,)
}

def @func_1793(%var_1788: float32, %var_1789: Tensor[(5, 3, 8), float32]) -> (Tensor[(5, 3, 8), float32],) {
  %506 = cast(%var_1788, dtype="float32") /* ty=float32 */;
  %507 = cast(%var_1789, dtype="float32") /* ty=Tensor[(5, 3, 8), float32] */;
  %508 = maximum(%506, %507) /* ty=Tensor[(5, 3, 8), float32] */;
  (%508,)
}

def @func_4908(%var_4802: Tensor[(4, 16, 9), bool]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 14, 1), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(420), float64], Tensor[(14, 2, 15), bool]) {
  %509 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %510 = %509.0;
  %511 = cast(%var_4802, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = @func_1776() /* ty=(Tensor[(4, 14, 1), float32],) */;
  %516 = @func_3866() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %517 = @func_2578() /* ty=(Tensor[(4, 2, 9), int32], Tensor[(4, 16, 9), float64]) */;
  %518 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %519 = cast(meta[relay.Constant][11] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %520 = reshape(%519, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %521 = @func_3612(%520) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(420), float64], Tensor[(14, 2, 15), float32]) */;
  %522 = %521.2;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(14, 2, 15), float32] */;
  %524 = sin(%523) /* ty=Tensor[(14, 2, 15), float32] */;
  %525 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 2, 15), float32] */, dtype="bool") /* ty=Tensor[(14, 2, 15), bool] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%524, dtype="bool") /* ty=Tensor[(14, 2, 15), bool] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %529 = logical_and(%513, %514) /* ty=Tensor[(4, 16, 9), bool] */;
  %530 = %515.0;
  %531 = %516.0;
  %532 = %517.1;
  %533 = %518.0;
  %534 = equal(%527, %528) /* ty=Tensor[(14, 2, 15), bool] */;
  (%529, %530, %531, %532, %533, meta[relay.Constant][11] /* ty=Tensor[(420), float64] */, %534)
}

def @func_5336() -> (Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64]) {
  %535 = cast(meta[relay.Constant][13] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %536 = reshape(%535, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %537 = @func_1684(%536) /* ty=(Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), float64]) */;
  %538 = @func_3135() /* ty=Tensor[(4, 16, 9), bool] */;
  %539 = %537.0;
  (%538, %539, meta[relay.Constant][13] /* ty=Tensor[(160), float64] */)
}

def @func_7200() -> Tensor[(4, 16, 9), float32] {
  %541 = fn () -> Tensor[(4, 16, 9), float32] {
    %540 = @func_6928() /* ty=(Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), bool], Tensor[(4, 7, 6), bool], Tensor[(3, 56), bool], Tensor[(?, 1620), bool]) */;
    %540.0
  };
  %541() /* ty=Tensor[(4, 16, 9), float32] */
}

def @func_6980(%var_6959: Tensor[(2, 12, 4), float64], %var_6964: Tensor[(2, 12, 4), bool]) -> (Tensor[(2, 12, 4), uint16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %542 = cast(%var_6959, dtype="bool") /* ty=Tensor[(2, 12, 4), bool] */;
  %543 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(2, 12, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 12, 4), float64] */, dtype="bool") /* ty=Tensor[(2, 12, 4), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %546 = not_equal(%544, %545) /* ty=Tensor[(2, 12, 4), bool] */;
  %547 = cast(%var_6964, dtype="uint16") /* ty=Tensor[(2, 12, 4), uint16] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="uint16") /* ty=Tensor[(2, 12, 4), uint16] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %551 = right_shift(%549, %550) /* ty=Tensor[(2, 12, 4), uint16] */;
  %552 = @func_1388() /* ty=Tensor[(4, 16, 9), bool] */;
  %553 = @func_3278() /* ty=Tensor[(4, 16, 9), float64] */;
  (%551, %552, %553)
}

def @func_7487() -> (Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64]) {
  @func_7485() /* ty=(Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64]) */
}

def @func_3279() -> Tensor[(4, 16, 9), float64] {
  %555 = fn () -> Tensor[(4, 16, 9), float64] {
    %554 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %554.0
  };
  %555() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_6722(%var_6718: Tensor[(16, 16, 1), bool], %var_6719: Tensor[(15, 16, 15), bool], %var_6720: Tensor[(18, 90), float64], %var_6721: Tensor[(800), float64]) -> (Tensor[(16, 16, 1), bool], Tensor[(15, 16, 15), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), uint32], Tensor[(15, 16, 15), int8], Tensor[(9, 12, 15), float64], Tensor[(10, 5, 16), float64], Tensor[(800), float64], Tensor[(16, 16, 1), bool], Tensor[(18, 90), float64]) {
  @func_6716(%var_6718, %var_6719, %var_6720, %var_6721) /* ty=(Tensor[(16, 16, 1), bool], Tensor[(15, 16, 15), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), uint32], Tensor[(15, 16, 15), int8], Tensor[(9, 12, 15), float64], Tensor[(10, 5, 16), float64], Tensor[(800), float64], Tensor[(16, 16, 1), bool], Tensor[(18, 90), float64]) */
}

def @func_1619(%var_1618: Tensor[(9, 12, 15), float64]) -> (Tensor[(9, 12, 15), float64],) {
  %561 = fn (%var_1602: Tensor[(9, 12, 15), float64]) -> (Tensor[(9, 12, 15), float64],) {
    %556 = cast(%var_1602, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
    %557 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(9, 12, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %558 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 12, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %560 = floor_divide(%558, %559) /* ty=Tensor[(9, 12, 15), float64] */;
    (%560,)
  };
  %561(%var_1618) /* ty=(Tensor[(9, 12, 15), float64],) */
}

def @func_2708(%var_2706: Tensor[(4, 7, 6), bool], %var_2707: Tensor[(4, 7, 6), bool]) -> (Tensor[(4, 7, 6), bool], Tensor[(4, 7, 6), float64]) {
  @func_2704(%var_2706, %var_2707) /* ty=(Tensor[(4, 7, 6), bool], Tensor[(4, 7, 6), float64]) */
}

def @func_4046() -> (Tensor[(4, 16, 9), float64],) {
  %564 = fn () -> (Tensor[(4, 16, 9), float64],) {
    %562 = @func_1974() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %563 = %562.3;
    (%563,)
  };
  %564() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_866() -> (Tensor[(4, 16, 9), bool],) {
  %565 = @func_601() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %566 = %565.0;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %568 = acos(%567) /* ty=Tensor[(4, 16, 9), float32] */;
  %569 = cast(%568, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %570 = shape_of(%566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%566, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = less(%571, %572) /* ty=Tensor[(4, 16, 9), bool] */;
  (%573,)
}

def @func_3769() -> (Tensor[(4, 16, 9), float32],) {
  @func_3767() /* ty=(Tensor[(4, 16, 9), float32],) */
}

def @func_1207(%var_1205: Tensor[(4, 16, 9), float64]) -> Tensor[(4, 16, 9), uint32] {
  @func_1204(%var_1205) /* ty=Tensor[(4, 16, 9), uint32] */
}

def @func_3302() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %574 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %575 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
  %576 = %574.0;
  (%575, %576)
}

def @func_5360() -> Tensor[(4, 16, 9), float64] {
  %578 = fn () -> Tensor[(4, 16, 9), float64] {
    %577 = @func_2181() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */;
    %577.2
  };
  %578() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_2770(%var_2768: Tensor[(480), float64]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(480), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  @func_2767(%var_2768) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(480), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */
}

def @func_1642() -> (Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) {
  @func_1640() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) */
}

def @func_3630() -> (Tensor[(4, 16, 9), float64],) {
  %579 = @func_2181() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */;
  %580 = %579.0;
  (%580,)
}

def @func_1600() -> Tensor[(4, 16, 9), float64] {
  %581 = fn () -> Tensor[(4, 16, 9), float64] {
    @func_1025() /* ty=Tensor[(4, 16, 9), float64] */
  };
  %581() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_1026() -> Tensor[(4, 16, 9), float64] {
  %585 = fn () -> Tensor[(4, 16, 9), float64] {
    %582 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
    %583 = %582.3;
    %584 = cast(%583, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
    atanh(%584) /* ty=Tensor[(4, 16, 9), float64] */
  };
  %585() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_4517() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) {
  %589 = fn () -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) {
    %586 = @func_3683() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %587 = %586.0;
    %588 = @func_2675() /* ty=Tensor[(4, 16, 9), bool] */;
    (%587, %588)
  };
  %589() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */
}

def @func_2447(%var_2446: Tensor[(5, 8, 12), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(4, 16, 9), float64]) {
  %604 = fn (%var_2373: Tensor[(5, 8, 12), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(4, 16, 9), float64]) {
    %590 = @func_1974() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %591 = cast(%var_2373, dtype="float64") /* ty=Tensor[(5, 8, 12), float64] */;
    %592 = sqrt(%591) /* ty=Tensor[(5, 8, 12), float64] */;
    %593 = cast(%592, dtype="float32") /* ty=Tensor[(5, 8, 12), float32] */;
    %594 = tan(%593) /* ty=Tensor[(5, 8, 12), float32] */;
    %595 = cast(%592, dtype="int16") /* ty=Tensor[(5, 8, 12), int16] */;
    %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
    %597 = cast(%594, dtype="int16") /* ty=Tensor[(5, 8, 12), int16] */;
    %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %599 = @func_1754() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
    %600 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
    %601 = %590.0;
    %602 = bitwise_xor(%597, %598) /* ty=Tensor[(5, 8, 12), int16] */;
    %603 = %599.1;
    (%600, %601, %602, %603)
  };
  %604(%var_2446) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(4, 16, 9), float64]) */
}

def @func_4354() -> (Tensor[(4, 16, 9), float64],) {
  @func_4352() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_6334() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) {
  @func_6332() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) */
}

def @func_4967() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %608 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
    %605 = @func_1223() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
    %606 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
    %607 = %605.0;
    (%606, %607)
  };
  %608() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_3615(%var_3613: Tensor[(420), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(420), float64], Tensor[(14, 2, 15), float32]) {
  @func_3612(%var_3613) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(420), float64], Tensor[(14, 2, 15), float32]) */
}

def @func_5316() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 14, 1), float32]) {
  @func_5314() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 14, 1), float32]) */
}

def @func_1686(%var_1685: Tensor[(10, 8, 2), float64]) -> (Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), float64]) {
  %620 = fn (%var_1643: Tensor[(10, 8, 2), float64]) -> (Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), float64]) {
    %609 = cast(%var_1643, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %610 = sin(%609) /* ty=Tensor[(10, 8, 2), float64] */;
    %611 = cast(%610, dtype="uint32") /* ty=Tensor[(10, 8, 2), uint32] */;
    %612 = shape_of(%var_1643, dtype="int32") /* ty=Tensor[(3), int32] */;
    %613 = cast(%var_1643, dtype="uint32") /* ty=Tensor[(10, 8, 2), uint32] */;
    %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %615 = cast(%610, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
    %616 = exp(%615) /* ty=Tensor[(10, 8, 2), float32] */;
    %617 = cast(%616, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %618 = bitwise_xor(%613, %614) /* ty=Tensor[(10, 8, 2), uint32] */;
    %619 = asinh(%617) /* ty=Tensor[(10, 8, 2), float64] */;
    (%618, %619)
  };
  %620(%var_1685) /* ty=(Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), float64]) */
}

def @func_7530() -> (Tensor[(4, 16, 9), float64], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32]) {
  @func_7528() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32]) */
}

def @func_516() -> Tensor[(4, 16, 9), float64] {
  %622 = fn () -> Tensor[(4, 16, 9), float64] {
    %621 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
    asin(%621) /* ty=Tensor[(4, 16, 9), float64] */
  };
  %622() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_6716(%var_6615: Tensor[(16, 16, 1), bool], %var_6639: Tensor[(15, 16, 15), bool], %var_6677: Tensor[(18, 90), float64], %var_6693: Tensor[(800), float64]) -> (Tensor[(16, 16, 1), bool], Tensor[(15, 16, 15), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), uint32], Tensor[(15, 16, 15), int8], Tensor[(9, 12, 15), float64], Tensor[(10, 5, 16), float64], Tensor[(800), float64], Tensor[(16, 16, 1), bool], Tensor[(18, 90), float64]) {
  %623 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %624 = cast(%var_6615, dtype="bool") /* ty=Tensor[(16, 16, 1), bool] */;
  %625 = cast(True /* ty=bool */, dtype="int32") /* ty=int32 */;
  %626 = cast(%var_6639, dtype="int32") /* ty=Tensor[(15, 16, 15), int32] */;
  %627 = bitwise_and(%625, %626) /* ty=Tensor[(15, 16, 15), int32] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(15, 16, 15), float64] */;
  %629 = cast(True /* ty=bool */, dtype="float64") /* ty=float64 */;
  %630 = @func_3683() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %633 = reshape(%632, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %634 = cast(%var_6639, dtype="int8") /* ty=Tensor[(15, 16, 15), int8] */;
  %635 = cast(True /* ty=bool */, dtype="int8") /* ty=int8 */;
  %636 = cast(%var_6677, dtype="float64") /* ty=Tensor[(18, 90), float64] */;
  %637 = reshape(%636, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %638 = @func_1617(%637) /* ty=(Tensor[(9, 12, 15), float64],) */;
  %639 = cast(%var_6693, dtype="float64") /* ty=Tensor[(800), float64] */;
  %640 = reshape(%639, newshape=[10, 5, 16]) /* ty=Tensor[(10, 5, 16), float64] */;
  %641 = @func_5547(%640) /* ty=(Tensor[(10, 5, 16), float64],) */;
  %642 = cast(%var_6615, dtype="float32") /* ty=Tensor[(16, 16, 1), float32] */;
  %643 = atan(%642) /* ty=Tensor[(16, 16, 1), float32] */;
  %644 = cast(%643, dtype="bool") /* ty=Tensor[(16, 16, 1), bool] */;
  %645 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %646 = cast(%var_6677, dtype="float64") /* ty=Tensor[(18, 90), float64] */;
  %647 = log2(%646) /* ty=Tensor[(18, 90), float64] */;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(18, 90), float64] */;
  %649 = logical_or(%623, %624) /* ty=Tensor[(16, 16, 1), bool] */;
  %650 = mod(%628, %629) /* ty=Tensor[(15, 16, 15), float64] */;
  %651 = @func_1204(%633) /* ty=Tensor[(4, 16, 9), uint32] */;
  %652 = left_shift(%634, %635) /* ty=Tensor[(15, 16, 15), int8] */;
  %653 = %638.0;
  %654 = %641.0;
  %655 = greater(%644, %645) /* ty=Tensor[(16, 16, 1), bool] */;
  %656 = atanh(%648) /* ty=Tensor[(18, 90), float64] */;
  (%649, %650, %631, %651, %652, %653, %654, %var_6693, %655, %656)
}

def @func_7553() -> (Tensor[(9, 12, 15), float64],) {
  @func_7551() /* ty=(Tensor[(9, 12, 15), float64],) */
}

def @func_7528() -> (Tensor[(4, 16, 9), float64], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32]) {
  %657 = @func_3866() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %658 = cast(-0.795485f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %659 = cast(meta[relay.Constant][17] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %660 = reshape(%658, newshape=[]) /* ty=float32 */;
  %661 = reshape(%659, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
  %662 = @func_1793(%660, %661) /* ty=(Tensor[(5, 3, 8), float32],) */;
  %663 = %657.0;
  %664 = %662.0;
  (%663, %664, -0.795485f /* ty=float32 */, meta[relay.Constant][17] /* ty=Tensor[(120), float32] */)
}

def @func_3988() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(160), float64], Tensor[(4, 16, 9), bool]) {
  @func_3986() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(160), float64], Tensor[(4, 16, 9), bool]) */
}

def @func_7485() -> (Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64]) {
  %665 = @func_1829() /* ty=(Tensor[(4, 16, 9), float32],) */;
  %666 = @func_6524() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %667 = %665.0;
  %668 = %666.0;
  (%667, %668)
}

def @func_5859() -> (Tensor[(4, 16, 9), float64],) {
  %669 = @func_4205() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */;
  %670 = %669.3;
  (%670,)
}

def @func_7574() -> Tensor[(4, 16, 9), int32] {
  @func_7572() /* ty=Tensor[(4, 16, 9), int32] */
}

def @func_5514() -> (Tensor[(4, 16, 9), int32],) {
  %671 = @func_866() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %672 = %671.0;
  %673 = @func_4516() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %674 = %673.0;
  %675 = cast(%674, dtype="int32") /* ty=Tensor[(4, 16, 9), int32] */;
  %676 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%672, dtype="int32") /* ty=Tensor[(4, 16, 9), int32] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %679 = subtract(%677, %678) /* ty=Tensor[(4, 16, 9), int32] */;
  (%679,)
}

def @func_3335() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) {
  %686 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) {
    %680 = @func_601() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
    %681 = %680.1;
    %682 = cast(%681, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
    %683 = reshape(%682, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
    %684 = @func_652(%683) /* ty=(Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */;
    %685 = %684.0;
    (%681, %685)
  };
  %686() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */
}

def @func_4255() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64]) {
  %687 = @func_1640() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) */;
  %688 = @func_2675() /* ty=Tensor[(4, 16, 9), bool] */;
  %689 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %690 = %687.1;
  (%688, %689, %690)
}

def @func_2836(%var_2834: float32, %var_2835: Tensor[(480), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), bool], Tensor[(480), float64]) {
  %703 = fn (%var_2805: float32, %var_2831: Tensor[(480), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), bool], Tensor[(480), float64]) {
    %691 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %692 = cast(%var_2805, dtype="float32") /* ty=float32 */;
    %693 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %694 = reshape(%692, newshape=[]) /* ty=float32 */;
    %695 = reshape(%693, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
    %696 = @func_1793(%694, %695) /* ty=(Tensor[(5, 3, 8), float32],) */;
    %697 = cast(%var_2831, dtype="float64") /* ty=Tensor[(480), float64] */;
    %698 = reshape(%697, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %699 = @func_2767(%698) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool], Tensor[(5, 8, 12), int16], Tensor[(480), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
    %700 = %691.4;
    %701 = %696.0;
    %702 = %699.0;
    (%700, %701, %var_2805, meta[relay.Constant][18] /* ty=Tensor[(120), float32] */, %702, %var_2831)
  };
  %703(%var_2834, %var_2835) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(5, 3, 8), float32], float32, Tensor[(120), float32], Tensor[(4, 16, 9), bool], Tensor[(480), float64]) */
}

def @func_6751() -> (Tensor[(4, 16, 9), bool],) {
  %704 = @func_2675() /* ty=Tensor[(4, 16, 9), bool] */;
  (%704,)
}

def @func_7884() -> (Tensor[(4, 16, 9), float32],) {
  @func_7882() /* ty=(Tensor[(4, 16, 9), float32],) */
}

def @func_7096() -> Tensor[(4, 16, 9), float64] {
  @func_7094() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_7473() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(15, 11, 9), float32], Tensor[(1, 1485), float32]) {
  %717 = fn () -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(15, 11, 9), float32], Tensor[(1, 1485), float32]) {
    %705 = @func_7367() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) */;
    %706 = @func_6070() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %707 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %708 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
    %709 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 1485), float32] */, dtype="float32") /* ty=Tensor[(1, 1485), float32] */;
    %710 = reshape(%709, newshape=[15, 11, 9]) /* ty=Tensor[(15, 11, 9), float32] */;
    %711 = @func_4707(%710) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(15, 11, 9), float32], Tensor[(15, 11, 9), float32]) */;
    %712 = %705.1;
    %713 = %706.0;
    %714 = %707.0;
    %715 = %708.1;
    %716 = %711.4;
    (%712, %713, %714, %715, %716, meta[relay.Constant][19] /* ty=Tensor[(1, 1485), float32] */)
  };
  %717() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(15, 11, 9), float32], Tensor[(1, 1485), float32]) */
}

def @func_1343() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */
}

def @func_1039() -> Tensor[(4, 16, 9), float64] {
  %718 = fn () -> Tensor[(4, 16, 9), float64] {
    @func_1025() /* ty=Tensor[(4, 16, 9), float64] */
  };
  %718() /* ty=Tensor[(4, 16, 9), float64] */
}

def @func_1341() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %719 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %720 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %721 = %719.0;
  %722 = %720.0;
  (%721, %722)
}

def @func_2286(%var_2285: Tensor[(7, 14, 5), int64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(7, 14, 5), uint32]) {
  %746 = fn (%var_2189: Tensor[(7, 14, 5), int64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(7, 14, 5), uint32]) {
    %723 = @func_1829() /* ty=(Tensor[(4, 16, 9), float32],) */;
    %724 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %725 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
    %726 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(7, 14, 5), int64] */;
    %727 = shape_of(%var_2189, dtype="int32") /* ty=Tensor[(3), int32] */;
    %728 = cast(%var_2189, dtype="int64") /* ty=Tensor[(7, 14, 5), int64] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %730 = subtract(%728, %729) /* ty=Tensor[(7, 14, 5), int64] */;
    %731 = cast(%730, dtype="float64") /* ty=Tensor[(7, 14, 5), float64] */;
    %732 = shape_of(%var_2189, dtype="int32") /* ty=Tensor[(3), int32] */;
    %733 = cast(%var_2189, dtype="float64") /* ty=Tensor[(7, 14, 5), float64] */;
    %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %735 = power(%733, %734) /* ty=Tensor[(7, 14, 5), float64] */;
    %736 = cast(%730, dtype="uint32") /* ty=Tensor[(7, 14, 5), uint32] */;
    %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %738 = cast(%735, dtype="uint32") /* ty=Tensor[(7, 14, 5), uint32] */;
    %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %740 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
    %741 = %723.0;
    %742 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
    %743 = %724.0;
    %744 = %725.2;
    %745 = add(%738, %739) /* ty=Tensor[(7, 14, 5), uint32] */;
    (%740, %741, %742, %743, %744, %745)
  };
  %746(%var_2285) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(7, 14, 5), uint32]) */
}

def @func_6189() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  @func_6187() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */
}

def @func_652(%var_632: Tensor[(4, 16, 9), float64]) -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) {
  %747 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  %748 = cast(%var_632, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="bool") /* ty=Tensor[(4, 16, 9), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = greater(%750, %751) /* ty=Tensor[(4, 16, 9), bool] */;
  %753 = cast(%747, dtype="int32") /* ty=Tensor[(4, 16, 9), int32] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="int32") /* ty=Tensor[(4, 16, 9), int32] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %757 = bitwise_xor(%755, %756) /* ty=Tensor[(4, 16, 9), int32] */;
  %758 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
  (%757, %758)
}

def @func_6929() -> (Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), bool], Tensor[(4, 7, 6), bool], Tensor[(3, 56), bool], Tensor[(?, 1620), bool]) {
  %778 = fn () -> (Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), bool], Tensor[(4, 7, 6), bool], Tensor[(3, 56), bool], Tensor[(?, 1620), bool]) {
    %759 = @func_3767() /* ty=(Tensor[(4, 16, 9), float32],) */;
    %760 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %761 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 56), bool] */, dtype="bool") /* ty=Tensor[(3, 56), bool] */;
    %762 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 56), bool] */, dtype="bool") /* ty=Tensor[(3, 56), bool] */;
    %763 = reshape(%761, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
    %764 = reshape(%762, newshape=[4, 7, 6]) /* ty=Tensor[(4, 7, 6), bool] */;
    %765 = @func_2704(%763, %764) /* ty=(Tensor[(4, 7, 6), bool], Tensor[(4, 7, 6), float64]) */;
    %766 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 1620), float64] */, dtype="float64") /* ty=Tensor[(1, 1620), float64] */;
    %767 = reshape(%766, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
    %768 = @func_1617(%767) /* ty=(Tensor[(9, 12, 15), float64],) */;
    %769 = %768.0;
    %770 = cast(%769, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
    %771 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(1, 1620), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %772 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 1620), float64] */, dtype="bool") /* ty=Tensor[(1, 1620), bool] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %774 = %759.0;
    %775 = %760.0;
    %776 = %765.0;
    %777 = equal(%772, %773) /* ty=Tensor[(?, 1620), bool] */;
    (%774, %775, %776, meta[relay.Constant][21] /* ty=Tensor[(3, 56), bool] */, %777)
  };
  %778() /* ty=(Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), bool], Tensor[(4, 7, 6), bool], Tensor[(3, 56), bool], Tensor[(?, 1620), bool]) */
}

def @func_762() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %787 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
    %779 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %780 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %781 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %782 = %779.0;
    %783 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
    %784 = %780.0;
    %785 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
    %786 = %781.0;
    (%782, %783, %784, %785, %786)
  };
  %787() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_1410() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) {
  %788 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %789 = %788.1;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %791 = reshape(%790, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %792 = @func_652(%791) /* ty=(Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */;
  %793 = %792.0;
  (%789, %793)
}

def @func_1640() -> (Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) {
  %794 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
  %795 = cast(meta[relay.Constant][23] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %796 = reshape(%795, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %797 = @func_1617(%796) /* ty=(Tensor[(9, 12, 15), float64],) */;
  %798 = %794.1;
  %799 = %797.0;
  (%798, %799, meta[relay.Constant][23] /* ty=Tensor[(1620), float64] */)
}

def @func_1755() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %805 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
    %800 = @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
    %801 = @func_1003() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %802 = %800.0;
    %803 = @func_1599() /* ty=Tensor[(4, 16, 9), float64] */;
    %804 = %801.0;
    (%802, %803, %804)
  };
  %805() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */
}

def @func_2988() -> (Tensor[(4, 16, 9), float64],) {
  %806 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %807 = %806.0;
  (%807,)
}

def @func_7053(%var_7048: Tensor[(490), int64]) -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(490), int64]) {
  %808 = cast(%var_7048, dtype="int64") /* ty=Tensor[(490), int64] */;
  %809 = reshape(%808, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), int64] */;
  %810 = @func_2284(%809) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(7, 14, 5), uint32]) */;
  %811 = @func_1388() /* ty=Tensor[(4, 16, 9), bool] */;
  %812 = %810.0;
  (%811, %812, %var_7048)
}

def @func_3684() -> (Tensor[(4, 16, 9), bool],) {
  %815 = fn () -> (Tensor[(4, 16, 9), bool],) {
    %813 = @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %814 = %813.0;
    (%814,)
  };
  %815() /* ty=(Tensor[(4, 16, 9), bool],) */
}

def @func_5855(%var_5853: Tensor[(4, 7, 6), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(4, 7, 6), float64], Tensor[(4, 7, 6), uint64], Tensor[(4, 16, 9), float64]) {
  @func_5852(%var_5853) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 7, 6), float64], Tensor[(4, 7, 6), uint64], Tensor[(4, 16, 9), float64]) */
}

def @func_2358() -> (Tensor[(4, 16, 9), int8], Tensor[(4, 16, 9), float64]) {
  %816 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %817 = %816.1;
  %818 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %819 = %818.0;
  %820 = cast(%819, dtype="int8") /* ty=Tensor[(4, 16, 9), int8] */;
  %821 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%817, dtype="int8") /* ty=Tensor[(4, 16, 9), int8] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %824 = @func_1754() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %825 = multiply(%822, %823) /* ty=Tensor[(4, 16, 9), int8] */;
  %826 = %824.1;
  (%825, %826)
}

def @func_6885() -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) {
  %831 = fn () -> (Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) {
    %827 = @func_1410() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), int32]) */;
    %828 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
    %829 = %827.1;
    %830 = %828.3;
    (%829, %830)
  };
  %831() /* ty=(Tensor[(4, 16, 9), int32], Tensor[(4, 16, 9), float64]) */
}

def @func_5095() -> (Tensor[(4, 16, 9), float32],) {
  %832 = @func_3560() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), uint32]) */;
  %833 = %832.1;
  (%833,)
}

def @func_4586() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 14, 1), float32]) {
  %834 = @func_1754() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %835 = @func_2181() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */;
  %836 = @func_703() /* ty=(Tensor[(4, 16, 9), float64],) */;
  %837 = @func_1776() /* ty=(Tensor[(4, 14, 1), float32],) */;
  %838 = %837.0;
  %839 = cast(%838, dtype="float32") /* ty=Tensor[(4, 14, 1), float32] */;
  %840 = %834.0;
  %841 = %835.0;
  %842 = %836.0;
  %843 = acosh(%839) /* ty=Tensor[(4, 14, 1), float32] */;
  (%840, %841, %842, %843)
}

def @func_3561() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), uint32]) {
  %861 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), uint32]) {
    %844 = @func_1272() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %845 = @func_2181() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */;
    %846 = @func_3135() /* ty=Tensor[(4, 16, 9), bool] */;
    %847 = cast(%846, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
    %848 = tan(%847) /* ty=Tensor[(4, 16, 9), float64] */;
    %849 = @func_1118() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %850 = %849.2;
    %851 = cast(%850, dtype="int16") /* ty=Tensor[(4, 16, 9), int16] */;
    %852 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
    %853 = cast(%848, dtype="int16") /* ty=Tensor[(4, 16, 9), int16] */;
    %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %855 = left_shift(%853, %854) /* ty=Tensor[(4, 16, 9), int16] */;
    %856 = cast(%855, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
    %857 = reshape(%856, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
    %858 = %844.0;
    %859 = %845.5;
    %860 = @func_1204(%857) /* ty=Tensor[(4, 16, 9), uint32] */;
    (%858, %859, %855, %860)
  };
  %861() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), uint32]) */
}

def @func_3014() -> (Tensor[(4, 16, 9), bool],) {
  @func_3012() /* ty=(Tensor[(4, 16, 9), bool],) */
}

def @func_5338() -> (Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64]) {
  @func_5336() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64]) */
}

def @func_5459(%var_5454: float32, %var_5455: Tensor[(11, 12, 8), float32], %var_5456: Tensor[(11, 12, 8), float32], %var_5457: Tensor[(576), float64], %var_5458: Tensor[(11, 12, 8), float64]) -> (Tensor[(11, 12, 8), bool], Tensor[(4, 16, 9), uint32], Tensor[(576), float64], Tensor[(4, 16, 9), float64], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), float32], Tensor[(4, 16, 9), float64]) {
  @func_5452(%var_5454, %var_5455, %var_5456, %var_5457, %var_5458) /* ty=(Tensor[(11, 12, 8), bool], Tensor[(4, 16, 9), uint32], Tensor[(576), float64], Tensor[(4, 16, 9), float64], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), float32], Tensor[(4, 16, 9), float64]) */
}

def @func_6819() -> (Tensor[(7, 9, 8), float64],) {
  %862 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
  %863 = erf(%862) /* ty=Tensor[(7, 9, 8), float64] */;
  (%863,)
}

def @func_5641(%var_5639: Tensor[(9, 12, 15), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), bool]) {
  @func_5638(%var_5639) /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), bool]) */
}

def @func_1119() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  %872 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
    %864 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
    %865 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
    %866 = @func_761() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
    %867 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
    %868 = %864.0;
    %869 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
    %870 = %865.0;
    %871 = %866.3;
    (%867, %868, %869, %870, %871)
  };
  %872() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */
}

def @func_6821() -> (Tensor[(7, 9, 8), float64],) {
  @func_6819() /* ty=(Tensor[(7, 9, 8), float64],) */
}

def @func_5248() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  @func_5246() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_6790() -> (Tensor[(4, 14, 1), float32],) {
  %873 = @func_1776() /* ty=(Tensor[(4, 14, 1), float32],) */;
  %874 = %873.0;
  (%874,)
}

def @func_7368() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) {
  %882 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) {
    %875 = @func_3111() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %876 = @func_6070() /* ty=(Tensor[(4, 16, 9), float64],) */;
    %877 = @func_2952() /* ty=Tensor[(4, 16, 9), float64] */;
    %878 = %875.0;
    %879 = @func_2952() /* ty=Tensor[(4, 16, 9), float64] */;
    %880 = %876.0;
    %881 = @func_7199() /* ty=Tensor[(4, 16, 9), float32] */;
    (%877, %878, %879, %880, %881)
  };
  %882() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32]) */
}

def @func_2310(%var_2308: Tensor[(2, 11, 15), int64], %var_2309: Tensor[(2, 11, 15), int64]) -> (Tensor[(2, 11, 15), int64], Tensor[(4, 16, 9), float64]) {
  @func_2306(%var_2308, %var_2309) /* ty=(Tensor[(2, 11, 15), int64], Tensor[(4, 16, 9), float64]) */
}

def @func_2677() -> Tensor[(4, 16, 9), bool] {
  @func_2675() /* ty=Tensor[(4, 16, 9), bool] */
}

def @func_3855() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %886 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
    %883 = @func_1341() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */;
    %884 = %883.1;
    %885 = @func_1038() /* ty=Tensor[(4, 16, 9), float64] */;
    (%884, %885)
  };
  %886() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_1785() -> (Tensor[(9, 12, 15), float64],) {
  %887 = @func_1640() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(1620), float64]) */;
  %888 = %887.1;
  (%888,)
}

def @func_5246() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %889 = @func_3854() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %890 = @func_3278() /* ty=Tensor[(4, 16, 9), float64] */;
  %891 = %889.1;
  (%890, %891)
}

def @func_6138(%var_6137: Tensor[(10, 42), float64]) -> (Tensor[(4, 16, 9), bool], Tensor[(14, 2, 15), float64], Tensor[(125), int64], Tensor[(10, 42), float64]) {
  %902 = fn (%var_6129: Tensor[(10, 42), float64]) -> (Tensor[(4, 16, 9), bool], Tensor[(14, 2, 15), float64], Tensor[(125), int64], Tensor[(10, 42), float64]) {
    %892 = @func_908() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
    %893 = cast(meta[relay.Constant][25] /* ty=Tensor[(125), int64] */, dtype="int64") /* ty=Tensor[(125), int64] */;
    %894 = cast(meta[relay.Constant][25] /* ty=Tensor[(125), int64] */, dtype="int64") /* ty=Tensor[(125), int64] */;
    %895 = cast(%var_6129, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
    %896 = reshape(%893, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
    %897 = reshape(%894, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), int64] */;
    %898 = reshape(%895, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %899 = @func_3652(%896, %897, %898) /* ty=(Tensor[(5, 5, 5), bool], Tensor[(14, 2, 15), float64], Tensor[(420), float64]) */;
    %900 = %892.1;
    %901 = %899.1;
    (%900, %901, meta[relay.Constant][25] /* ty=Tensor[(125), int64] */, %var_6129)
  };
  %902(%var_6137) /* ty=(Tensor[(4, 16, 9), bool], Tensor[(14, 2, 15), float64], Tensor[(125), int64], Tensor[(10, 42), float64]) */
}

def @func_3224() -> (Tensor[(4, 16, 9), bool],) {
  %904 = fn () -> (Tensor[(4, 16, 9), bool],) {
    %903 = @func_3135() /* ty=Tensor[(4, 16, 9), bool] */;
    (%903,)
  };
  %904() /* ty=(Tensor[(4, 16, 9), bool],) */
}

def @func_6187() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) {
  %905 = @func_6058() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %906 = @func_4516() /* ty=(Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), bool]) */;
  %907 = %905.1;
  %908 = %906.1;
  (%907, %908)
}

def @func_2990() -> (Tensor[(4, 16, 9), float64],) {
  @func_2988() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_704() -> (Tensor[(4, 16, 9), float64],) {
  %910 = fn () -> (Tensor[(4, 16, 9), float64],) {
    %909 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
    (%909,)
  };
  %910() /* ty=(Tensor[(4, 16, 9), float64],) */
}

def @func_6036() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) {
  @func_6034() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64]) */
}

def @func_2545(%var_2522: Tensor[(1620), float64]) -> (Tensor[(4, 16, 9), float64], Tensor[(9, 12, 15), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(1620), float64]) {
  %911 = @func_601() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */;
  %912 = cast(%var_2522, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %913 = reshape(%912, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %914 = @func_1617(%913) /* ty=(Tensor[(9, 12, 15), float64],) */;
  %915 = @func_2181() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float32], Tensor[(4, 16, 9), float32]) */;
  %916 = cast(%var_2522, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %917 = exp(%916) /* ty=Tensor[(1620), float32] */;
  %918 = cast(meta[relay.Constant][26] /* ty=Tensor[(1620), float32] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %919 = shape_of(%917, dtype="int32") /* ty=Tensor[(1), int32] */;
  %920 = cast(%917, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?), float64] */;
  %922 = %911.0;
  %923 = %914.0;
  %924 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %925 = %915.1;
  %926 = multiply(%920, %921) /* ty=Tensor[(1620), float64] */;
  (%922, %923, %924, %925, %926)
}

def @func_3986() -> (Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64], Tensor[(160), float64], Tensor[(4, 16, 9), bool]) {
  %927 = @func_1223() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %928 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %929 = cast(%928, dtype="float64") /* ty=Tensor[(4, 16, 9), float64] */;
  %930 = reshape(%929, newshape=[4, 16, 9]) /* ty=Tensor[(4, 16, 9), float64] */;
  %931 = @func_2625(%930) /* ty=(Tensor[(4, 16, 9), int16], Tensor[(4, 16, 9), bool], Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool]) */;
  %932 = @func_1921() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), bool], Tensor[(10, 8, 2), uint32], Tensor[(160), float64], Tensor[(4, 16, 9), float64]) */;
  %933 = @func_953() /* ty=(Tensor[(4, 16, 9), bool],) */;
  %934 = %927.1;
  %935 = @func_1371() /* ty=Tensor[(4, 16, 9), float64] */;
  %936 = %931.2;
  %937 = %932.3;
  %938 = %933.0;
  (%934, %935, %928, %936, %937, %938)
}

def @func_602() -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
  %941 = fn () -> (Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) {
    %939 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
    %940 = @func_515() /* ty=Tensor[(4, 16, 9), float64] */;
    (%939, %940)
  };
  %941() /* ty=(Tensor[(4, 16, 9), float64], Tensor[(4, 16, 9), float64]) */
}

def @func_1829() -> (Tensor[(4, 16, 9), float32],) {
  %942 = @func_1025() /* ty=Tensor[(4, 16, 9), float64] */;
  %943 = cast(%942, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %944 = sinh(%943) /* ty=Tensor[(4, 16, 9), float32] */;
  (%944,)
}

def @func_5865() -> Tensor[(4, 16, 9), float64] {
  @func_4644() /* ty=Tensor[(4, 16, 9), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen219/build/output.py:2882: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen219/build/output.py", line 2887, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(297) tvmgen_default_fused_cast_cast_reshape_maximum_kernel0(ushort* __restrict__ T_maximum, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_maximum[(((int)threadIdx.x))] = max(((ushort)placeholder[(((int)threadIdx.x))]), ((ushort)placeholder1[(((int)threadIdx.x))]));
}

extern "C" __global__ void __launch_bounds__(297) tvmgen_default_fused_log_sigmoid_cast_cast_reshape_less_equal_kernel0(signed char* __restrict__ T_less_equal, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_less_equal[(((int)threadIdx.x))] = ((signed char)(((bool)(1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - __logf(placeholder[(((int)threadIdx.x))])))))) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

