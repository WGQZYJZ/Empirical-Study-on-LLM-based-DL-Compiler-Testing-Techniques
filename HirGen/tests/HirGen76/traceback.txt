==========mod==========
#[version = "0.0.5"]
def @func_1505() -> (Tensor[(3, 15, 4), int32],) {
  %0 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  (%0,)
}

def @func_4225(%var_4176: Tensor[(600), float32]) -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32]) {
  %1 = cast(%var_4176, dtype="float32") /* ty=Tensor[(600), float32] */;
  %2 = reshape(%1, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %3 = @func_1203(%2) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(648), float64], Tensor[(600), float32], Tensor[(18, 36), float64]) */;
  %4 = @func_4150() /* ty=Tensor[(3, 15, 4), int32] */;
  %5 = %3.0;
  %6 = @func_3463() /* ty=Tensor[(3, 15, 4), bool] */;
  %7 = @func_2339() /* ty=Tensor[(3, 15, 4), bool] */;
  %8 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
  (%4, %5, %var_4176, %6, %7, %8)
}

def @func_1841() -> (Tensor[(3, 15, 4), int32],) {
  %9 = @func_1619() /* ty=Tensor[(3, 15, 4), int32] */;
  (%9,)
}

def @func_5083() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 130), float32], Tensor[(3, 15, 4), float32], Tensor[(7, 8, 6), bool], Tensor[(336), bool], Tensor[(3, 15, 4), int32]) {
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 130), float32] */, dtype="float32") /* ty=Tensor[(1, 130), float32] */;
  %11 = reshape(%10, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %12 = @func_741(%11) /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 130), float32] */, dtype="float32") /* ty=Tensor[(1, 130), float32] */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(16, 130), float32] */, dtype="float32") /* ty=Tensor[(16, 130), float32] */;
  %15 = @func_2510() /* ty=(Tensor[(3, 15, 4), float64],) */;
  %16 = %15.0;
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 15, 4), float64] */, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %21 = cast(meta[relay.Constant][3] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %22 = cast(meta[relay.Constant][3] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %23 = reshape(%21, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %24 = reshape(%22, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %25 = @func_3296(%23, %24) /* ty=(Tensor[(7, 8, 6), bool],) */;
  %26 = %12.1;
  %27 = floor_mod(%13, %14) /* ty=Tensor[(16, 130), float32] */;
  %28 = mod(%19, %20) /* ty=Tensor[(3, 15, 4), float32] */;
  %29 = %25.0;
  %30 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
  (%26, %27, %28, %29, meta[relay.Constant][3] /* ty=Tensor[(336), bool] */, %30)
}

def @func_5679(%var_5646: Tensor[(3, 15, 4), int32], %var_5670: Tensor[(70), uint32], %var_5671: Tensor[(98), uint64]) -> (Tensor[(3, 15, 4), uint64], Tensor[(98), uint64], Tensor[(70), uint32], Tensor[(98), uint64]) {
  %31 = @func_2632() /* ty=Tensor[(3, 15, 4), int32] */;
  %32 = cast(%var_5646, dtype="uint64") /* ty=Tensor[(3, 15, 4), uint64] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="uint64") /* ty=Tensor[(3, 15, 4), uint64] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %36 = cast(%var_5670, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %37 = cast(%var_5670, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %38 = cast(%var_5671, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %39 = reshape(%36, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %40 = reshape(%37, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %41 = reshape(%38, newshape=[98]) /* ty=Tensor[(98), uint64] */;
  %42 = @func_461(%39, %40, %41) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */;
  %43 = subtract(%34, %35) /* ty=Tensor[(3, 15, 4), uint64] */;
  %44 = %42.2;
  (%43, %44, %var_5670, %var_5671)
}

def @func_1636() -> (Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool]) {
  %45 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %46 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %47 = %45.0;
  %48 = %46.0;
  (%47, %48)
}

def @func_3662(%var_3641: Tensor[(45), int16], %var_3645: Tensor[(504), float64]) -> (Tensor[(3, 15, 4), uint8], Tensor[(5, 9, 1), float64], int16, Tensor[(45), int16], Tensor[(600), float32], Tensor[(504), float64], Tensor[(14, 10, 15), float64]) {
  %49 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %50 = %49.0;
  %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 15, 4), bool] */, dtype="uint8") /* ty=Tensor[(3, 15, 4), uint8] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="uint8") /* ty=Tensor[(3, 15, 4), uint8] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %55 = cast(meta[relay.Constant][5] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %56 = cast(%var_3641, dtype="int16") /* ty=Tensor[(45), int16] */;
  %57 = reshape(%55, newshape=[]) /* ty=int16 */;
  %58 = reshape(%56, newshape=[5, 9, 1]) /* ty=Tensor[(5, 9, 1), int16] */;
  %59 = @func_2274(%57, %58) /* ty=(Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) */;
  %60 = cast(%50, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %61 = cast(%var_3645, dtype="float64") /* ty=Tensor[(504), float64] */;
  %62 = reshape(%60, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), int32] */;
  %63 = reshape(%61, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %64 = @func_2668(%62, %63) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(504), float64]) */;
  %65 = cast(meta[relay.Constant][5] /* ty=int16 */, dtype="float64") /* ty=float64 */;
  %66 = reshape(%65, newshape=[]) /* ty=float64 */;
  %67 = @func_3385(%66) /* ty=(Tensor[(14, 10, 15), float64],) */;
  %68 = bitwise_xor(%53, %54) /* ty=Tensor[(3, 15, 4), uint8] */;
  %69 = %59.1;
  %70 = %64.1;
  %71 = %67.0;
  (%68, %69, meta[relay.Constant][5] /* ty=int16 */, %var_3641, %70, %var_3645, %71)
}

def @func_3471() -> (Tensor[(3, 15, 4), int32],) {
  %72 = @func_1505() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %73 = %72.0;
  (%73,)
}

def @func_2250() -> Tensor[(3, 15, 4), int32] {
  @func_1011() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_5820(%var_5791: Tensor[(11, 14), int8]) -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32], Tensor[(11, 4, 14), bool], Tensor[(11, 14), int8], Tensor[(16, 13, 10), int32], Tensor[(4, 520), int32], Tensor[(3, 15, 4), int32]) {
  %74 = @func_2816() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %75 = @func_2725() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %76 = cast(%var_5791, dtype="int8") /* ty=Tensor[(11, 14), int8] */;
  %77 = reshape(%76, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
  %78 = @func_523(%77) /* ty=(Tensor[(11, 4, 14), bool],) */;
  %79 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 520), int32] */, dtype="int32") /* ty=Tensor[(4, 520), int32] */;
  %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 520), int32] */, dtype="int32") /* ty=Tensor[(4, 520), int32] */;
  %81 = reshape(%79, newshape=[16, 13, 10]) /* ty=Tensor[(16, 13, 10), int32] */;
  %82 = reshape(%80, newshape=[16, 13, 10]) /* ty=Tensor[(16, 13, 10), int32] */;
  %83 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %84 = %74.0;
  %85 = %75.0;
  %86 = %78.0;
  %87 = @func_1581(%81, %82) /* ty=Tensor[(16, 13, 10), int32] */;
  %88 = %83.3;
  (%84, %85, %86, %var_5791, %87, meta[relay.Constant][6] /* ty=Tensor[(4, 520), int32] */, %88)
}

def @func_3788() -> (Tensor[(3, 15, 4), int32],) {
  %89 = @func_2768() /* ty=Tensor[(3, 15, 4), int32] */;
  (%89,)
}

def @func_461(%var_450: Tensor[(7, 5, 2), uint32], %var_451: Tensor[(7, 5, 2), uint32], %var_456: Tensor[(98), uint64]) -> (Tensor[(7, 5, 2), uint32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) {
  %90 = cast(%var_451, dtype="uint32") /* ty=Tensor[(7, 5, 2), uint32] */;
  %91 = shape_of(%var_450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%var_450, dtype="uint32") /* ty=Tensor[(7, 5, 2), uint32] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %94 = cast(%var_456, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %95 = reshape(%94, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), uint64] */;
  %96 = @func_221(%95) /* ty=(Tensor[(7, 12, 14), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(7, 1, 14), float64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) */;
  %97 = bitwise_and(%92, %93) /* ty=Tensor[(7, 5, 2), uint32] */;
  %98 = %96.3;
  (%97, %98, %var_456)
}

def @func_3441() -> Tensor[(3, 15, 4), int32] {
  @func_2632() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_5449() -> Tensor[(3, 15, 4), bool] {
  %99 = @func_5107() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %99.0
}

def @func_221(%var_187: Tensor[(7, 1, 14), uint64]) -> (Tensor[(7, 12, 14), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(7, 1, 14), float64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) {
  %100 = cast(%var_187, dtype="bool") /* ty=Tensor[(7, 1, 14), bool] */;
  %101 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 12, 14), uint64] */, dtype="bool") /* ty=Tensor[(7, 12, 14), bool] */;
  %102 = cast(meta[relay.Constant][8] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %103 = reshape(%102, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %104 = @func_24(%103) /* ty=(Tensor[(12, 6, 9), float64],) */;
  %105 = cast(%var_187, dtype="float64") /* ty=Tensor[(7, 1, 14), float64] */;
  %106 = %104.0;
  %107 = cast(%106, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %108 = reshape(%107, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %109 = @func_24(%108) /* ty=(Tensor[(12, 6, 9), float64],) */;
  %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %111 = reshape(%110, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %112 = @func_24(%111) /* ty=(Tensor[(12, 6, 9), float64],) */;
  %113 = %112.0;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(12, 6, 9), float32] */;
  %115 = less_equal(%100, %101) /* ty=Tensor[(7, 12, 14), bool] */;
  %116 = sin(%105) /* ty=Tensor[(7, 1, 14), float64] */;
  %117 = %109.0;
  %118 = log(%114) /* ty=Tensor[(12, 6, 9), float32] */;
  (%115, %106, meta[relay.Constant][8] /* ty=Tensor[(648), float64] */, %116, %117, %118)
}

def @func_1802(%var_1689: Tensor[(1, 7, 3), float64], %var_1764: Tensor[(7, 7, 3), uint32]) -> (Tensor[(?, 7, 3), uint64], Tensor[(?, 7, 3), int64], Tensor[(3, 15, 4), bool], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(12, 6, 9), float64], Tensor[(30, 1), uint32], Tensor[(7, 7, 3), bool], Tensor[(?, 7, 3), float64], Tensor[(?, 7, 3), float64], Tensor[(?, 7, 3), float32], Tensor[(3, 15, 4), int32]) {
  %119 = cast(%var_1689, dtype="float64") /* ty=Tensor[(1, 7, 3), float64] */;
  %120 = sqrt(%119) /* ty=Tensor[(1, 7, 3), float64] */;
  %121 = cast(%var_1689, dtype="uint64") /* ty=Tensor[(1, 7, 3), uint64] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="uint64") /* ty=Tensor[(1, 7, 3), uint64] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %125 = cast(%120, dtype="int64") /* ty=Tensor[(1, 7, 3), int64] */;
  %126 = shape_of(%var_1689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_1689, dtype="int64") /* ty=Tensor[(1, 7, 3), int64] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %129 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %130 = cast(meta[relay.Constant][9] /* ty=Tensor[(154), int8] */, dtype="int8") /* ty=Tensor[(154), int8] */;
  %131 = reshape(%130, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
  %132 = @func_523(%131) /* ty=(Tensor[(11, 4, 14), bool],) */;
  %133 = cast(meta[relay.Constant][10] /* ty=Tensor[(30, 1), uint32] */, dtype="uint32") /* ty=Tensor[(30, 1), uint32] */;
  %134 = reshape(%133, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %135 = @func_1033(%134) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %136 = cast(%120, dtype="uint32") /* ty=Tensor[(1, 7, 3), uint32] */;
  %137 = shape_of(%var_1689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%var_1689, dtype="uint32") /* ty=Tensor[(1, 7, 3), uint32] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %140 = bitwise_xor(%138, %139) /* ty=Tensor[(?, 7, 3), uint32] */;
  %141 = cast(%140, dtype="bool") /* ty=Tensor[(?, 7, 3), bool] */;
  %142 = cast(%var_1764, dtype="bool") /* ty=Tensor[(7, 7, 3), bool] */;
  %143 = cast(%140, dtype="float64") /* ty=Tensor[(?, 7, 3), float64] */;
  %144 = acosh(%143) /* ty=Tensor[(?, 7, 3), float64] */;
  %145 = cast(%144, dtype="float64") /* ty=Tensor[(?, 7, 3), float64] */;
  %146 = cast(%144, dtype="float64") /* ty=Tensor[(?, 7, 3), float64] */;
  %147 = cast(%140, dtype="float32") /* ty=Tensor[(?, 7, 3), float32] */;
  %148 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%144, dtype="float32") /* ty=Tensor[(?, 7, 3), float32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %151 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %152 = add(%123, %124) /* ty=Tensor[(?, 7, 3), uint64] */;
  %153 = maximum(%127, %128) /* ty=Tensor[(?, 7, 3), int64] */;
  %154 = %129.0;
  %155 = %132.0;
  %156 = %135.1;
  %157 = equal(%141, %142) /* ty=Tensor[(7, 7, 3), bool] */;
  %158 = atan(%145) /* ty=Tensor[(?, 7, 3), float64] */;
  %159 = sin(%146) /* ty=Tensor[(?, 7, 3), float64] */;
  %160 = floor_divide(%149, %150) /* ty=Tensor[(?, 7, 3), float32] */;
  %161 = %151.0;
  (%152, %153, %154, %155, meta[relay.Constant][9] /* ty=Tensor[(154), int8] */, %156, meta[relay.Constant][10] /* ty=Tensor[(30, 1), uint32] */, %157, %158, %159, %160, %161)
}

def @func_4141() -> (Tensor[(3, 15, 4), int32],) {
  %162 = @func_3160() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %163 = %162.0;
  (%163,)
}

def @func_4455() -> Tensor[(5, 5, 13), float32] {
  %164 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 5, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 13), float32] */;
  cosh(%164) /* ty=Tensor[(5, 5, 13), float32] */
}

def @func_6273() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32]) {
  %165 = @func_4141() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %166 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %167 = %165.0;
  %168 = @func_2339() /* ty=Tensor[(3, 15, 4), bool] */;
  %169 = %166.0;
  (%167, %168, %169)
}

def @func_2816() -> (Tensor[(3, 15, 4), int32],) {
  %170 = @func_2768() /* ty=Tensor[(3, 15, 4), int32] */;
  (%170,)
}

def @func_3767() -> (Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(98), uint64]) {
  %171 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %172 = cast(meta[relay.Constant][12] /* ty=Tensor[(98), uint64] */, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %173 = reshape(%172, newshape=[98]) /* ty=Tensor[(98), uint64] */;
  %174 = @func_1090(%173) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */;
  %175 = %171.2;
  %176 = %174.0;
  (%175, %176, meta[relay.Constant][12] /* ty=Tensor[(98), uint64] */)
}

def @func_2274(%var_2260: int16, %var_2261: Tensor[(5, 9, 1), int16]) -> (Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) {
  %177 = cast(%var_2260, dtype="bool") /* ty=bool */;
  %178 = cast(%var_2261, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
  %179 = cast(%var_2261, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %180 = cosh(%179) /* ty=Tensor[(5, 9, 1), float64] */;
  %181 = cast(%180, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %182 = greater(%177, %178) /* ty=Tensor[(5, 9, 1), bool] */;
  %183 = exp(%181) /* ty=Tensor[(5, 9, 1), float64] */;
  (%182, %183)
}

def @func_5618() -> Tensor[(12, 42), float64] {
  %184 = @func_4442() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float32], Tensor[(3, 15, 4), bool], Tensor[(12, 42), float64]) */;
  %184.3
}

def @func_5991(%var_5948: Tensor[(300, 2), float32], %var_5975: Tensor[(6, 84), float64]) -> (Tensor[(3, 15, 4), int32], Tensor[(300, 2), float32], Tensor[(7, 5, 2), uint32], Tensor[(70), uint32], Tensor[(98, 1), uint64], Tensor[(3, 15, 4), float32], Tensor[(16, 2, 4), int8], Tensor[(128), float64], Tensor[(3, 15, 4), int32], Tensor[(504), float64], Tensor[(6, 84), float64]) {
  %185 = @func_3471() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %187 = cast(meta[relay.Constant][13] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %188 = cast(meta[relay.Constant][14] /* ty=Tensor[(98, 1), uint64] */, dtype="uint64") /* ty=Tensor[(98, 1), uint64] */;
  %189 = reshape(%186, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %190 = reshape(%187, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %191 = reshape(%188, newshape=[98]) /* ty=Tensor[(98), uint64] */;
  %192 = @func_461(%189, %190, %191) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */;
  %193 = cast(%var_5948, dtype="float32") /* ty=Tensor[(300, 2), float32] */;
  %194 = %185.0;
  %195 = cast(%194, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %196 = reshape(%193, newshape=[12, 50]) /* ty=Tensor[(12, 50), float32] */;
  %197 = reshape(%195, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), int32] */;
  %198 = @func_3019(%196, %197) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float64], Tensor[(12, 50), float64]) */;
  %199 = %198.0;
  %200 = cast(%199, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %201 = cast(meta[relay.Constant][15] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %202 = reshape(%201, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float64] */;
  %203 = @func_5362(%202) /* ty=(Tensor[(16, 2, 4), int8],) */;
  %204 = @func_4501() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %205 = %204.0;
  %206 = cast(%205, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %207 = cast(%var_5975, dtype="float64") /* ty=Tensor[(6, 84), float64] */;
  %208 = reshape(%206, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), int32] */;
  %209 = reshape(%207, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %210 = @func_2668(%208, %209) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(504), float64]) */;
  %211 = %192.0;
  %212 = sigmoid(%200) /* ty=Tensor[(3, 15, 4), float32] */;
  %213 = %203.0;
  %214 = %210.2;
  (%194, %var_5948, %211, meta[relay.Constant][13] /* ty=Tensor[(70), uint32] */, meta[relay.Constant][14] /* ty=Tensor[(98, 1), uint64] */, %212, %213, meta[relay.Constant][15] /* ty=Tensor[(128), float64] */, %205, %214, %var_5975)
}

def @func_741(%var_731: Tensor[(1, 10, 13), float32]) -> (Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) {
  %215 = cast(%var_731, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %216 = cast(%var_731, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %217 = cosh(%215) /* ty=Tensor[(1, 10, 13), float32] */;
  %218 = log10(%216) /* ty=Tensor[(1, 10, 13), float64] */;
  (%217, %218)
}

def @func_3693(%var_3687: Tensor[(14, 9), float32]) -> Tensor[(14, 9), float32] {
  %219 = cast(%var_3687, dtype="float32") /* ty=Tensor[(14, 9), float32] */;
  log2(%219) /* ty=Tensor[(14, 9), float32] */
}

def @func_3019(%var_2980: Tensor[(12, 50), float32], %var_2999: Tensor[(3, 15, 4), int32]) -> (Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float64], Tensor[(12, 50), float64]) {
  %220 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %221 = %220.2;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %223 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %224 = @func_1619() /* ty=Tensor[(3, 15, 4), int32] */;
  %225 = cast(%var_2999, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %229 = cast(%221, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %230 = rsqrt(%229) /* ty=Tensor[(12, 50), float32] */;
  %231 = cast(%230, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %232 = asin(%231) /* ty=Tensor[(12, 50), float64] */;
  %233 = cast(%var_2980, dtype="uint64") /* ty=Tensor[(12, 50), uint64] */;
  %234 = shape_of(%230, dtype="int32") /* ty=Tensor[(2), int32] */;
  %235 = cast(%230, dtype="uint64") /* ty=Tensor[(12, 50), uint64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %237 = minimum(%235, %236) /* ty=Tensor[(12, 50), uint64] */;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %239 = shape_of(%232, dtype="int32") /* ty=Tensor[(2), int32] */;
  %240 = cast(%232, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %242 = divide(%240, %241) /* ty=Tensor[(12, 50), float32] */;
  %243 = cast(%242, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %244 = @func_1619() /* ty=Tensor[(3, 15, 4), int32] */;
  %245 = atan(%222) /* ty=Tensor[(12, 50), float32] */;
  %246 = %223.2;
  %247 = @func_1619() /* ty=Tensor[(3, 15, 4), int32] */;
  %248 = floor_mod(%227, %228) /* ty=Tensor[(3, 15, 4), float64] */;
  %249 = acosh(%243) /* ty=Tensor[(12, 50), float64] */;
  (%244, %245, %246, %247, %248, %249)
}

def @func_3129() -> (Tensor[(3, 15, 4), float64],) {
  %250 = @func_2510() /* ty=(Tensor[(3, 15, 4), float64],) */;
  %251 = %250.0;
  (%251,)
}

def @func_1045() -> (Tensor[(3, 15, 4), bool],) {
  %252 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %253 = %252.0;
  (%253,)
}

def @func_4150() -> Tensor[(3, 15, 4), int32] {
  %254 = @func_1505() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %254.0
}

def @func_24(%var_17: Tensor[(12, 6, 9), float64]) -> (Tensor[(12, 6, 9), float64],) {
  %255 = cast(%var_17, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %256 = sinh(%255) /* ty=Tensor[(12, 6, 9), float64] */;
  (%256,)
}

def @func_5514() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool]) {
  %257 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %258 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %259 = %257.0;
  %260 = %258.0;
  (%259, %260)
}

def @func_4724(%var_4655: float32, %var_4656: Tensor[(16, 1, 8), float32], %var_4674: Tensor[(98), uint64]) -> (Tensor[(16, ?, 8), bool], Tensor[(7, 1, 14), float64], Tensor[(70), uint32], Tensor[(98), uint64], Tensor[(16, 1, 8), float64], Tensor[(5, 5, 13), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32]) {
  %261 = cast(%var_4655, dtype="float32") /* ty=float32 */;
  %262 = cast(%var_4656, dtype="float32") /* ty=Tensor[(16, 1, 8), float32] */;
  %263 = divide(%261, %262) /* ty=Tensor[(16, 1, 8), float32] */;
  %264 = cast(%263, dtype="bool") /* ty=Tensor[(16, 1, 8), bool] */;
  %265 = shape_of(%var_4656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%var_4656, dtype="bool") /* ty=Tensor[(16, 1, 8), bool] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %268 = cast(meta[relay.Constant][16] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %269 = cast(meta[relay.Constant][16] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
  %270 = cast(%var_4674, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %271 = reshape(%268, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %272 = reshape(%269, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
  %273 = reshape(%270, newshape=[98]) /* ty=Tensor[(98), uint64] */;
  %274 = @func_461(%271, %272, %273) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */;
  %275 = cast(%var_4656, dtype="float64") /* ty=Tensor[(16, 1, 8), float64] */;
  %276 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %277 = @func_4501() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %278 = greater_equal(%266, %267) /* ty=Tensor[(16, ?, 8), bool] */;
  %279 = %274.1;
  %280 = acosh(%275) /* ty=Tensor[(16, 1, 8), float64] */;
  %281 = @func_4455() /* ty=Tensor[(5, 5, 13), float32] */;
  %282 = %276.0;
  %283 = %277.0;
  %284 = @func_2802() /* ty=Tensor[(12, 50), float32] */;
  (%278, %279, meta[relay.Constant][16] /* ty=Tensor[(70), uint32] */, %var_4674, %280, %281, %282, %283, %284)
}

def @func_1122() -> (Tensor[(3, 15, 4), int32],) {
  %285 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  (%285,)
}

def @func_2373(%var_2355: Tensor[(16, 8, 14), int64], %var_2359: Tensor[(16, 8, 14), int64]) -> (Tensor[(16, 8, 14), uint32], Tensor[(16, 8, 14), bool]) {
  %286 = cast(%var_2359, dtype="uint32") /* ty=Tensor[(16, 8, 14), uint32] */;
  %287 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(16, 8, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 8, 14), int64] */, dtype="uint32") /* ty=Tensor[(16, 8, 14), uint32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %290 = cast(%var_2355, dtype="int64") /* ty=Tensor[(16, 8, 14), int64] */;
  %291 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(16, 8, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 8, 14), int64] */, dtype="int64") /* ty=Tensor[(16, 8, 14), int64] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %294 = minimum(%292, %293) /* ty=Tensor[(16, 8, 14), int64] */;
  %295 = cast(%294, dtype="bool") /* ty=Tensor[(16, 8, 14), bool] */;
  %296 = shape_of(%var_2355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%var_2355, dtype="bool") /* ty=Tensor[(16, 8, 14), bool] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %299 = maximum(%288, %289) /* ty=Tensor[(16, 8, 14), uint32] */;
  %300 = equal(%297, %298) /* ty=Tensor[(16, 8, 14), bool] */;
  (%299, %300)
}

def @main() -> Tensor[(12, 50), float32] {
  %301 = @func_4758() /* ty=(Tensor[(12, 50), float64], Tensor[(3, 15, 4), float64]) */;
  %302 = %301.0;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  sqrt(%303) /* ty=Tensor[(12, 50), float32] */
}

def @func_3160() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) {
  %304 = @func_2725() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %305 = %304.0;
  %306 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
  (%305, %306)
}

def @func_2473(%var_2400: Tensor[(9, 14, 4), float64]) -> (Tensor[(5, 9, 1), bool], int16, Tensor[(5, 9), int16], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(1, 315), int64], Tensor[(1, 10, 13), float32], Tensor[(26, 5), float32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(98), uint64], Tensor[(98), uint64], Tensor[(5, 9, 1), bool], Tensor[(3, 15, 4), bool], Tensor[(9, 14, 4), int64]) {
  %307 = cast(meta[relay.Constant][18] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %308 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 9), int16] */, dtype="int16") /* ty=Tensor[(5, 9), int16] */;
  %309 = reshape(%307, newshape=[]) /* ty=int16 */;
  %310 = reshape(%308, newshape=[5, 9, 1]) /* ty=Tensor[(5, 9, 1), int16] */;
  %311 = @func_2274(%309, %310) /* ty=(Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) */;
  %312 = cast(meta[relay.Constant][20] /* ty=Tensor[(154), int8] */, dtype="int8") /* ty=Tensor[(154), int8] */;
  %313 = reshape(%312, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
  %314 = @func_523(%313) /* ty=(Tensor[(11, 4, 14), bool],) */;
  %315 = @func_2194() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(1, 315), int64]) */;
  %316 = cast(meta[relay.Constant][21] /* ty=Tensor[(26, 5), float32] */, dtype="float32") /* ty=Tensor[(26, 5), float32] */;
  %317 = reshape(%316, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %318 = @func_741(%317) /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %319 = cast(meta[relay.Constant][22] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %320 = reshape(%319, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %321 = @func_1203(%320) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(648), float64], Tensor[(600), float32], Tensor[(18, 36), float64]) */;
  %322 = cast(meta[relay.Constant][23] /* ty=Tensor[(98), uint64] */, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %323 = reshape(%322, newshape=[98]) /* ty=Tensor[(98), uint64] */;
  %324 = @func_1090(%323) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */;
  %325 = cast(meta[relay.Constant][18] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %326 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 9), int16] */, dtype="int16") /* ty=Tensor[(5, 9), int16] */;
  %327 = reshape(%325, newshape=[]) /* ty=int16 */;
  %328 = reshape(%326, newshape=[5, 9, 1]) /* ty=Tensor[(5, 9, 1), int16] */;
  %329 = @func_2274(%327, %328) /* ty=(Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) */;
  %330 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %331 = cast(%var_2400, dtype="float64") /* ty=Tensor[(9, 14, 4), float64] */;
  %332 = cos(%331) /* ty=Tensor[(9, 14, 4), float64] */;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(9, 14, 4), float32] */;
  %334 = tan(%333) /* ty=Tensor[(9, 14, 4), float32] */;
  %335 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 14, 4), float32] */, dtype="int64") /* ty=Tensor[(9, 14, 4), int64] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="int64") /* ty=Tensor[(9, 14, 4), int64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %339 = %311.0;
  %340 = %314.0;
  %341 = %315.2;
  %342 = %318.0;
  %343 = %321.0;
  %344 = %324.2;
  %345 = %329.0;
  %346 = %330.0;
  %347 = multiply(%337, %338) /* ty=Tensor[(9, 14, 4), int64] */;
  (%339, meta[relay.Constant][18] /* ty=int16 */, meta[relay.Constant][19] /* ty=Tensor[(5, 9), int16] */, %340, meta[relay.Constant][20] /* ty=Tensor[(154), int8] */, %341, %342, meta[relay.Constant][21] /* ty=Tensor[(26, 5), float32] */, %343, meta[relay.Constant][22] /* ty=Tensor[(600), float32] */, %344, meta[relay.Constant][23] /* ty=Tensor[(98), uint64] */, %345, %346, %347)
}

def @func_961() -> (Tensor[(3, 15, 4), bool],) {
  %348 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %349 = log10(%348) /* ty=Tensor[(3, 15, 4), float64] */;
  %350 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 15, 4), float64] */, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = equal(%352, %353) /* ty=Tensor[(3, 15, 4), bool] */;
  (%354,)
}

def @func_1581(%var_1558: Tensor[(16, 13, 10), int32], %var_1559: Tensor[(16, 13, 10), int32]) -> Tensor[(16, 13, 10), int32] {
  %355 = cast(%var_1559, dtype="int32") /* ty=Tensor[(16, 13, 10), int32] */;
  %356 = shape_of(%var_1558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%var_1558, dtype="int32") /* ty=Tensor[(16, 13, 10), int32] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%357, %358) /* ty=Tensor[(16, 13, 10), int32] */
}

def @func_1935() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) {
  %359 = @func_1841() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %360 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %361 = %359.0;
  %362 = %360.0;
  (%361, %362)
}

def @func_3354(%var_3347: Tensor[(3, 15, 4), bool]) -> Tensor[(3, 15, 4), uint8] {
  %363 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %364 = %363.0;
  %365 = cast(%var_3347, dtype="uint8") /* ty=Tensor[(3, 15, 4), uint8] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="uint8") /* ty=Tensor[(3, 15, 4), uint8] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%367, %368) /* ty=Tensor[(3, 15, 4), uint8] */
}

def @func_2632() -> Tensor[(3, 15, 4), int32] {
  %369 = @func_1841() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %369.0
}

def @func_2319(%var_2290: Tensor[(3, 15, 4), bool]) -> (Tensor[(3, 15, 4), bool],) {
  %370 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %371 = %370.0;
  %372 = cast(%var_2290, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = less(%374, %375) /* ty=Tensor[(3, 15, 4), bool] */;
  (%376,)
}

def @func_2668(%var_2652: Tensor[(3, 15, 4), int32], %var_2666: Tensor[(504), float64]) -> (Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(504), float64]) {
  %377 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
  %378 = cast(%var_2652, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %382 = cast(%var_2666, dtype="float64") /* ty=Tensor[(504), float64] */;
  %383 = reshape(%382, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float64] */;
  %384 = @func_2473(%383) /* ty=(Tensor[(5, 9, 1), bool], int16, Tensor[(5, 9), int16], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(1, 315), int64], Tensor[(1, 10, 13), float32], Tensor[(26, 5), float32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(98), uint64], Tensor[(98), uint64], Tensor[(5, 9, 1), bool], Tensor[(3, 15, 4), bool], Tensor[(9, 14, 4), int64]) */;
  %385 = logical_and(%380, %381) /* ty=Tensor[(3, 15, 4), bool] */;
  %386 = %384.9;
  (%385, %386, %var_2666)
}

def @func_6101() -> Tensor[(3, 15, 4), bool] {
  %387 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %387.0
}

def @func_3072() -> Tensor[(3, 15, 4), int32] {
  %388 = @func_2725() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %388.0
}

def @func_5208() -> (Tensor[(3, 15, 4), int32], Tensor[(?, 15, 2), int8], Tensor[(315), int64], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) {
  %389 = cast(meta[relay.Constant][26] /* ty=Tensor[(315), int64] */, dtype="int64") /* ty=Tensor[(315), int64] */;
  %390 = reshape(%389, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), int64] */;
  %391 = @func_1397(%390) /* ty=(Tensor[(15, 3, 7), int64], Tensor[(15, 3, 7), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %392 = @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %393 = @func_4534() /* ty=(Tensor[(3, 15, 4), float64],) */;
  %394 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %395 = @func_2725() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %396 = @func_3160() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %397 = @func_3072() /* ty=Tensor[(3, 15, 4), int32] */;
  %398 = %391.2;
  %399 = %392.1;
  %400 = %393.0;
  %401 = %394.0;
  %402 = %395.0;
  %403 = %396.0;
  (%397, %398, meta[relay.Constant][26] /* ty=Tensor[(315), int64] */, %399, %400, %401, %402, %403)
}

def @func_2031() -> (Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) {
  %404 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %405 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 50), float32] */, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %406 = reshape(%405, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %407 = @func_1203(%406) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(648), float64], Tensor[(600), float32], Tensor[(18, 36), float64]) */;
  %408 = %404.0;
  %409 = %407.3;
  %410 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  (%408, %409, meta[relay.Constant][27] /* ty=Tensor[(12, 50), float32] */, %410)
}

def @func_4442() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float32], Tensor[(3, 15, 4), bool], Tensor[(12, 42), float64]) {
  %411 = @func_3160() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %412 = %411.1;
  %413 = cast(%412, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %414 = reshape(%413, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), int32] */;
  %415 = @func_3893(%414) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %418 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 42), float64] */, dtype="float64") /* ty=Tensor[(12, 42), float64] */;
  %419 = reshape(%417, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), int32] */;
  %420 = reshape(%418, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %421 = @func_2668(%419, %420) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(504), float64]) */;
  %422 = %421.0;
  (%412, %416, %422, meta[relay.Constant][28] /* ty=Tensor[(12, 42), float64] */)
}

def @func_3714() -> Tensor[(3, 15, 4), int32] {
  %423 = @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %423.1
}

def @func_3927() -> (Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32]) {
  %424 = @func_3160() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %425 = %424.0;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %427 = cos(%426) /* ty=Tensor[(3, 15, 4), float64] */;
  %428 = @func_2768() /* ty=Tensor[(3, 15, 4), int32] */;
  (%427, %428)
}

def @func_1033(%var_1031: Tensor[(30), uint32]) -> (Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) {
  %429 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %430 = cast(meta[relay.Constant][29] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %431 = reshape(%430, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %432 = @func_24(%431) /* ty=(Tensor[(12, 6, 9), float64],) */;
  %433 = cast(meta[relay.Constant][30] /* ty=Tensor[(15), uint32] */, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %434 = cast(%var_1031, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %435 = reshape(%433, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), uint32] */;
  %436 = reshape(%434, newshape=[1, 15, 2]) /* ty=Tensor[(1, 15, 2), uint32] */;
  %437 = %429.0;
  %438 = %432.0;
  %439 = @func_818(%435, %436) /* ty=Tensor[(?, 15, 2), int8] */;
  (%437, %438, meta[relay.Constant][29] /* ty=Tensor[(648), float64] */, %439, meta[relay.Constant][30] /* ty=Tensor[(15), uint32] */, %var_1031)
}

def @func_1090(%var_1070: Tensor[(98), uint64]) -> (Tensor[(3, 15, 4), int32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) {
  %440 = cast(%var_1070, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %441 = reshape(%440, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), uint64] */;
  %442 = @func_221(%441) /* ty=(Tensor[(7, 12, 14), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(7, 1, 14), float64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) */;
  %443 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  %444 = %442.3;
  (%443, %444, %var_1070)
}

def @func_5477() -> Tensor[(3, 15, 4), int32] {
  %445 = @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %445.0
}

def @func_523(%var_506: Tensor[(11, 1, 14), int8]) -> (Tensor[(11, 4, 14), bool],) {
  %446 = cast(%var_506, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %447 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 4, 14), int8] */, dtype="bool") /* ty=Tensor[(11, 4, 14), bool] */;
  %448 = less(%446, %447) /* ty=Tensor[(11, 4, 14), bool] */;
  (%448,)
}

def @func_1221() -> (Tensor[(3, 15, 4), bool],) {
  %449 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %450 = %449.0;
  (%450,)
}

def @func_1203(%var_1198: Tensor[(600), float32]) -> (Tensor[(3, 15, 4), bool], Tensor[(648), float64], Tensor[(600), float32], Tensor[(18, 36), float64]) {
  %451 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %452 = cast(%var_1198, dtype="float32") /* ty=Tensor[(600), float32] */;
  %453 = cast(meta[relay.Constant][32] /* ty=Tensor[(18, 36), float64] */, dtype="float64") /* ty=Tensor[(18, 36), float64] */;
  %454 = cast(%var_1198, dtype="float32") /* ty=Tensor[(600), float32] */;
  %455 = reshape(%452, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float32] */;
  %456 = reshape(%453, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %457 = reshape(%454, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float32] */;
  %458 = @func_908(%455, %456, %457) /* ty=(Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(10, 4, 15), uint8], Tensor[(10, 4, 15), float64], Tensor[(10, 4, 15), uint16]) */;
  %459 = %451.0;
  %460 = %458.6;
  (%459, %460, %var_1198, meta[relay.Constant][32] /* ty=Tensor[(18, 36), float64] */)
}

def @func_1175(%var_1128: Tensor[(14, 5, 13), uint16], %var_1129: Tensor[(14, 5, 13), uint16], %var_1143: Tensor[(30), uint32]) -> (Tensor[(14, 5, 13), bool], Tensor[(15), uint32], Tensor[(30), uint32]) {
  %461 = cast(%var_1129, dtype="bool") /* ty=Tensor[(14, 5, 13), bool] */;
  %462 = shape_of(%var_1128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%var_1128, dtype="bool") /* ty=Tensor[(14, 5, 13), bool] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %465 = cast(%var_1143, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %466 = reshape(%465, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %467 = @func_1033(%466) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %468 = greater_equal(%463, %464) /* ty=Tensor[(14, 5, 13), bool] */;
  %469 = %467.4;
  (%468, %469, %var_1143)
}

def @func_1011() -> Tensor[(3, 15, 4), int32] {
  %470 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %471 = %470.0;
  %472 = cast(%471, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %473 = acos(%472) /* ty=Tensor[(3, 15, 4), float32] */;
  %474 = cast(%473, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %475 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%471, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%476, %477) /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_4005(%var_3940: Tensor[(12, 11, 12), float64]) -> (Tensor[(12, 11, 12), bool], Tensor[(12, 11, 12), bool], Tensor[(12, 11, 12), bool]) {
  %478 = cast(%var_3940, dtype="float64") /* ty=Tensor[(12, 11, 12), float64] */;
  %479 = rsqrt(%478) /* ty=Tensor[(12, 11, 12), float64] */;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
  %481 = sin(%480) /* ty=Tensor[(12, 11, 12), float32] */;
  %482 = cast(%var_3940, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 11, 12), float32] */, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
  %487 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%481, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %490 = cast(%481, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
  %491 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%479, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %494 = not_equal(%484, %485) /* ty=Tensor[(12, 11, 12), bool] */;
  %495 = logical_and(%488, %489) /* ty=Tensor[(12, 11, 12), bool] */;
  %496 = equal(%492, %493) /* ty=Tensor[(12, 11, 12), bool] */;
  (%494, %495, %496)
}

def @func_4534() -> (Tensor[(3, 15, 4), float64],) {
  %497 = @func_1869() /* ty=Tensor[(3, 15, 4), float64] */;
  (%497,)
}

def @func_4949(%var_4929: Tensor[(60, 10), float32]) -> (Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(60, 10), float32], Tensor[(3, 15, 4), int32], Tensor[(648, 1), float32]) {
  %498 = cast(%var_4929, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %499 = cast(meta[relay.Constant][34] /* ty=Tensor[(648, 1), float64] */, dtype="float64") /* ty=Tensor[(648, 1), float64] */;
  %500 = cast(%var_4929, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %501 = reshape(%498, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float32] */;
  %502 = reshape(%499, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %503 = reshape(%500, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float32] */;
  %504 = @func_908(%501, %502, %503) /* ty=(Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(10, 4, 15), uint8], Tensor[(10, 4, 15), float64], Tensor[(10, 4, 15), uint16]) */;
  %505 = @func_2816() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %506 = cast(meta[relay.Constant][34] /* ty=Tensor[(648, 1), float64] */, dtype="float32") /* ty=Tensor[(648, 1), float32] */;
  %507 = sinh(%506) /* ty=Tensor[(648, 1), float32] */;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(648, 1), float32] */;
  %509 = @func_3714() /* ty=Tensor[(3, 15, 4), int32] */;
  %510 = %504.3;
  %511 = %505.0;
  %512 = acosh(%508) /* ty=Tensor[(648, 1), float32] */;
  (%509, %510, %var_4929, %511, %512)
}

def @func_4027(%var_4023: Tensor[(2, 896), int64]) -> (Tensor[(98), uint16], Tensor[(16, 8, 14), bool], Tensor[(2, 896), int64], Tensor[(3, 15, 4), int32]) {
  %513 = @func_3767() /* ty=(Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(98), uint64]) */;
  %514 = %513.2;
  %515 = cast(meta[relay.Constant][35] /* ty=Tensor[(98), uint64] */, dtype="uint16") /* ty=Tensor[(98), uint16] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(1), int32] */;
  %517 = cast(%514, dtype="uint16") /* ty=Tensor[(98), uint16] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %519 = cast(%var_4023, dtype="int64") /* ty=Tensor[(2, 896), int64] */;
  %520 = cast(%var_4023, dtype="int64") /* ty=Tensor[(2, 896), int64] */;
  %521 = reshape(%519, newshape=[16, 8, 14]) /* ty=Tensor[(16, 8, 14), int64] */;
  %522 = reshape(%520, newshape=[16, 8, 14]) /* ty=Tensor[(16, 8, 14), int64] */;
  %523 = @func_2373(%521, %522) /* ty=(Tensor[(16, 8, 14), uint32], Tensor[(16, 8, 14), bool]) */;
  %524 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %525 = bitwise_xor(%517, %518) /* ty=Tensor[(98), uint16] */;
  %526 = %523.1;
  %527 = %524.0;
  (%525, %526, %var_4023, %527)
}

def @func_2615(%var_2590: Tensor[(648), float64]) -> (Tensor[(3, 15, 4), float64], Tensor[(648), float64], Tensor[(12, 6, 9), float64]) {
  %528 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %529 = %528.0;
  %530 = cast(%529, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %531 = cast(%var_2590, dtype="float64") /* ty=Tensor[(648), float64] */;
  %532 = reshape(%531, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %533 = @func_24(%532) /* ty=(Tensor[(12, 6, 9), float64],) */;
  %534 = %533.0;
  %535 = cast(%534, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %536 = atanh(%530) /* ty=Tensor[(3, 15, 4), float64] */;
  %537 = atanh(%535) /* ty=Tensor[(12, 6, 9), float64] */;
  (%536, %var_2590, %537)
}

def @func_5362(%var_5349: Tensor[(16, 2, 4), float64]) -> (Tensor[(16, 2, 4), int8],) {
  %538 = cast(%var_5349, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
  %539 = exp(%538) /* ty=Tensor[(16, 2, 4), float64] */;
  %540 = cast(%539, dtype="int8") /* ty=Tensor[(16, 2, 4), int8] */;
  %541 = shape_of(%var_5349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%var_5349, dtype="int8") /* ty=Tensor[(16, 2, 4), int8] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %544 = bitwise_or(%542, %543) /* ty=Tensor[(16, 2, 4), int8] */;
  (%544,)
}

def @func_4758() -> (Tensor[(12, 50), float64], Tensor[(3, 15, 4), float64]) {
  %545 = @func_4629() /* ty=(Tensor[(1, 6, 6), float64], Tensor[(12, 50), float32]) */;
  %546 = %545.1;
  %547 = cast(%546, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %548 = log(%547) /* ty=Tensor[(12, 50), float64] */;
  %549 = @func_1869() /* ty=Tensor[(3, 15, 4), float64] */;
  (%548, %549)
}

def @func_6013() -> (Tensor[(3, 15, 4), int32], Tensor[(5, 5, 13), float32], Tensor[(12, 50), float64]) {
  %550 = @func_3160() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %551 = @func_4758() /* ty=(Tensor[(12, 50), float64], Tensor[(3, 15, 4), float64]) */;
  %552 = %550.1;
  %553 = @func_4455() /* ty=Tensor[(5, 5, 13), float32] */;
  %554 = %551.0;
  (%552, %553, %554)
}

def @func_3893(%var_3887: Tensor[(3, 15, 4), int32]) -> (Tensor[(3, 15, 4), float32],) {
  %555 = @func_3788() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %556 = %555.0;
  %557 = cast(%var_3887, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%556, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %561 = divide(%559, %560) /* ty=Tensor[(3, 15, 4), float32] */;
  (%561,)
}

def @func_3098() -> Tensor[(3, 15, 4), bool] {
  %562 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %562.0
}

def @func_5878(%var_5860: Tensor[(910), uint16], %var_5861: Tensor[(10, 3), uint32]) -> (Tensor[(3, 15, 4), int32], Tensor[(154), int8], Tensor[(910), uint16], Tensor[(10, 3), uint32]) {
  %563 = cast(%var_5860, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %564 = cast(%var_5861, dtype="uint32") /* ty=Tensor[(10, 3), uint32] */;
  %565 = reshape(%563, newshape=[910]) /* ty=Tensor[(910), uint16] */;
  %566 = reshape(%564, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %567 = @func_1491(%565, %566) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(12, 6, 9), float32], Tensor[(98), uint64], Tensor[(910), int16]) */;
  %568 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  %569 = %567.4;
  (%568, %569, %var_5860, %var_5861)
}

def @func_2339() -> Tensor[(3, 15, 4), bool] {
  %570 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %570.0
}

def @func_2768() -> Tensor[(3, 15, 4), int32] {
  %571 = @func_1841() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %571.0
}

def @func_1595() -> (Tensor[(3, 15, 4), int32],) {
  %572 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  (%572,)
}

def @func_1397(%var_1363: Tensor[(15, 3, 7), int64]) -> (Tensor[(15, 3, 7), int64], Tensor[(15, 3, 7), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) {
  %573 = cast(%var_1363, dtype="int64") /* ty=Tensor[(15, 3, 7), int64] */;
  %574 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(15, 3, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 3, 7), int64] */, dtype="int64") /* ty=Tensor[(15, 3, 7), int64] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %577 = cast(%var_1363, dtype="float64") /* ty=Tensor[(15, 3, 7), float64] */;
  %578 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(15, 3, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 3, 7), int64] */, dtype="float64") /* ty=Tensor[(15, 3, 7), float64] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %581 = cast(meta[relay.Constant][37] /* ty=Tensor[(15), uint32] */, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %582 = cast(meta[relay.Constant][38] /* ty=Tensor[(30), uint32] */, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %583 = reshape(%581, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), uint32] */;
  %584 = reshape(%582, newshape=[1, 15, 2]) /* ty=Tensor[(1, 15, 2), uint32] */;
  %585 = logical_xor(%575, %576) /* ty=Tensor[(15, 3, 7), int64] */;
  %586 = divide(%579, %580) /* ty=Tensor[(15, 3, 7), float64] */;
  %587 = @func_818(%583, %584) /* ty=Tensor[(?, 15, 2), int8] */;
  (%585, %586, %587, meta[relay.Constant][37] /* ty=Tensor[(15), uint32] */, meta[relay.Constant][38] /* ty=Tensor[(30), uint32] */)
}

def @func_5609() -> (Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(600), float32], Tensor[(45), int16], Tensor[(504), float64]) {
  %588 = cast(meta[relay.Constant][39] /* ty=Tensor[(45), int16] */, dtype="int16") /* ty=Tensor[(45), int16] */;
  %589 = cast(meta[relay.Constant][40] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %590 = reshape(%588, newshape=[45]) /* ty=Tensor[(45), int16] */;
  %591 = reshape(%589, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %592 = @func_3662(%590, %591) /* ty=(Tensor[(3, 15, 4), uint8], Tensor[(5, 9, 1), float64], int16, Tensor[(45), int16], Tensor[(600), float32], Tensor[(504), float64], Tensor[(14, 10, 15), float64]) */;
  %593 = @func_3463() /* ty=Tensor[(3, 15, 4), bool] */;
  %594 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
  %595 = %592.4;
  (%593, %594, %595, meta[relay.Constant][39] /* ty=Tensor[(45), int16] */, meta[relay.Constant][40] /* ty=Tensor[(504), float64] */)
}

def @func_818(%var_798: Tensor[(1, 15, 1), uint32], %var_799: Tensor[(1, 15, 2), uint32]) -> Tensor[(?, 15, 2), int8] {
  %596 = cast(%var_798, dtype="uint32") /* ty=Tensor[(1, 15, 1), uint32] */;
  %597 = cast(%var_799, dtype="uint32") /* ty=Tensor[(1, 15, 2), uint32] */;
  %598 = multiply(%596, %597) /* ty=Tensor[(1, 15, 2), uint32] */;
  %599 = cast(%598, dtype="int64") /* ty=Tensor[(1, 15, 2), int64] */;
  %600 = cast(%var_798, dtype="int64") /* ty=Tensor[(1, 15, 1), int64] */;
  %601 = logical_xor(%599, %600) /* ty=Tensor[(1, 15, 2), int64] */;
  %602 = cast(%598, dtype="int8") /* ty=Tensor[(1, 15, 2), int8] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="int8") /* ty=Tensor[(1, 15, 2), int8] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%604, %605) /* ty=Tensor[(?, 15, 2), int8] */
}

def @func_2894(%var_2870: Tensor[(3, 15, 4), float32]) -> (Tensor[(3, 15, 4), uint32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), bool], Tensor[(5, 9, 1), bool], int16, Tensor[(45), int16]) {
  %606 = @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %607 = %606.1;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %609 = sinh(%608) /* ty=Tensor[(3, 15, 4), float32] */;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %611 = rsqrt(%610) /* ty=Tensor[(3, 15, 4), float64] */;
  %612 = cast(%609, dtype="uint32") /* ty=Tensor[(3, 15, 4), uint32] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="uint32") /* ty=Tensor[(3, 15, 4), uint32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %616 = cast(%var_2870, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %617 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%609, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %620 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %621 = cast(meta[relay.Constant][41] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %622 = cast(meta[relay.Constant][42] /* ty=Tensor[(45), int16] */, dtype="int16") /* ty=Tensor[(45), int16] */;
  %623 = reshape(%621, newshape=[]) /* ty=int16 */;
  %624 = reshape(%622, newshape=[5, 9, 1]) /* ty=Tensor[(5, 9, 1), int16] */;
  %625 = @func_2274(%623, %624) /* ty=(Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) */;
  %626 = add(%614, %615) /* ty=Tensor[(3, 15, 4), uint32] */;
  %627 = greater(%618, %619) /* ty=Tensor[(3, 15, 4), bool] */;
  %628 = @func_1869() /* ty=Tensor[(3, 15, 4), float64] */;
  %629 = %620.0;
  %630 = %625.0;
  (%626, %627, %628, %629, %630, meta[relay.Constant][41] /* ty=int16 */, meta[relay.Constant][42] /* ty=Tensor[(45), int16] */)
}

def @func_1263(%var_1229: Tensor[(3, 15, 4), bool], %var_1250: Tensor[(30), uint32]) -> (Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32], Tensor[(?, 15, 2), int8], Tensor[(30), uint32], Tensor[(3, 15, 4), float64], Tensor[(11, 4, 14), bool], Tensor[(154), int8]) {
  %631 = cast(%var_1229, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %632 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %633 = cast(%var_1250, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %634 = reshape(%633, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %635 = @func_1033(%634) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %636 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %637 = %636.0;
  %638 = cast(%var_1229, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %642 = power(%640, %641) /* ty=Tensor[(3, 15, 4), float32] */;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %644 = cast(meta[relay.Constant][43] /* ty=Tensor[(154), int8] */, dtype="int8") /* ty=Tensor[(154), int8] */;
  %645 = reshape(%644, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
  %646 = @func_523(%645) /* ty=(Tensor[(11, 4, 14), bool],) */;
  %647 = asin(%631) /* ty=Tensor[(3, 15, 4), float64] */;
  %648 = %632.0;
  %649 = %635.3;
  %650 = asinh(%643) /* ty=Tensor[(3, 15, 4), float64] */;
  %651 = %646.0;
  (%647, %648, %649, %var_1250, %650, %651, meta[relay.Constant][43] /* ty=Tensor[(154), int8] */)
}

def @func_2725() -> (Tensor[(3, 15, 4), int32],) {
  %652 = @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %653 = %652.0;
  (%653,)
}

def @func_2155(%var_2107: Tensor[(30), uint32], %var_2142: Tensor[(5, 12, 6), float32]) -> (Tensor[(648), float64], Tensor[(30), uint32], Tensor[(3, 15, 4), bool], Tensor[(16, 13, 10), int32], Tensor[(104, 20), int32], Tensor[(5, 12, 6), uint16]) {
  %654 = cast(%var_2107, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %655 = reshape(%654, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %656 = @func_1033(%655) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %657 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %658 = %657.0;
  %659 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %660 = %659.0;
  %661 = cast(%660, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %662 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%658, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %665 = cast(meta[relay.Constant][44] /* ty=Tensor[(104, 20), int32] */, dtype="int32") /* ty=Tensor[(104, 20), int32] */;
  %666 = cast(meta[relay.Constant][44] /* ty=Tensor[(104, 20), int32] */, dtype="int32") /* ty=Tensor[(104, 20), int32] */;
  %667 = reshape(%665, newshape=[16, 13, 10]) /* ty=Tensor[(16, 13, 10), int32] */;
  %668 = reshape(%666, newshape=[16, 13, 10]) /* ty=Tensor[(16, 13, 10), int32] */;
  %669 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 12, 6), int16] */, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %670 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(5, 12, 6), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 12, 6), int16] */, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %673 = equal(%671, %672) /* ty=Tensor[(5, 12, 6), bool] */;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
  %675 = log10(%674) /* ty=Tensor[(5, 12, 6), float32] */;
  %676 = cast(%var_2142, dtype="uint16") /* ty=Tensor[(5, 12, 6), uint16] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="uint16") /* ty=Tensor[(5, 12, 6), uint16] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %680 = %656.2;
  %681 = greater_equal(%663, %664) /* ty=Tensor[(3, 15, 4), bool] */;
  %682 = @func_1581(%667, %668) /* ty=Tensor[(16, 13, 10), int32] */;
  %683 = add(%678, %679) /* ty=Tensor[(5, 12, 6), uint16] */;
  (%680, %var_2107, %681, %682, meta[relay.Constant][44] /* ty=Tensor[(104, 20), int32] */, %683)
}

def @func_3211(%var_3188: Tensor[(3, 15, 4), int32]) -> (Tensor[(3, 15, 4), bool],) {
  %684 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %685 = %684.0;
  %686 = cast(%var_3188, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%685, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %690 = logical_or(%688, %689) /* ty=Tensor[(3, 15, 4), bool] */;
  (%690,)
}

def @func_4115() -> (Tensor[(3, 15, 4), float64],) {
  %691 = @func_1869() /* ty=Tensor[(3, 15, 4), float64] */;
  (%691,)
}

def @func_5107() -> (Tensor[(3, 15, 4), bool],) {
  %692 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %693 = %692.0;
  (%693,)
}

def @func_6152() -> (Tensor[(3, 15, 4), bool], Tensor[(7, 8, 6), bool], Tensor[(336), bool]) {
  %694 = @func_1636() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool]) */;
  %695 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %696 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %697 = reshape(%695, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %698 = reshape(%696, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %699 = @func_3296(%697, %698) /* ty=(Tensor[(7, 8, 6), bool],) */;
  %700 = %694.0;
  %701 = %699.0;
  (%700, %701, meta[relay.Constant][47] /* ty=Tensor[(336), bool] */)
}

def @func_2802() -> Tensor[(12, 50), float32] {
  %702 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %702.2
}

def @func_908(%var_854: Tensor[(10, 4, 15), float32], %var_880: Tensor[(648), float64], %var_896: Tensor[(10, 4, 15), float32]) -> (Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(10, 4, 15), uint8], Tensor[(10, 4, 15), float64], Tensor[(10, 4, 15), uint16]) {
  %703 = cast(meta[relay.Constant][48] /* ty=Tensor[(154), int8] */, dtype="int8") /* ty=Tensor[(154), int8] */;
  %704 = reshape(%703, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
  %705 = @func_523(%704) /* ty=(Tensor[(11, 4, 14), bool],) */;
  %706 = cast(meta[relay.Constant][49] /* ty=Tensor[(15), uint32] */, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %707 = cast(meta[relay.Constant][50] /* ty=Tensor[(30), uint32] */, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %708 = reshape(%706, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), uint32] */;
  %709 = reshape(%707, newshape=[1, 15, 2]) /* ty=Tensor[(1, 15, 2), uint32] */;
  %710 = cast(%var_880, dtype="float64") /* ty=Tensor[(648), float64] */;
  %711 = reshape(%710, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %712 = @func_24(%711) /* ty=(Tensor[(12, 6, 9), float64],) */;
  %713 = cast(%var_854, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %714 = erf(%713) /* ty=Tensor[(10, 4, 15), float32] */;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %716 = atanh(%715) /* ty=Tensor[(10, 4, 15), float64] */;
  %717 = cast(%714, dtype="uint8") /* ty=Tensor[(10, 4, 15), uint8] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="uint8") /* ty=Tensor[(10, 4, 15), uint8] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %721 = cast(%714, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %722 = cast(%var_896, dtype="uint16") /* ty=Tensor[(10, 4, 15), uint16] */;
  %723 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%714, dtype="uint16") /* ty=Tensor[(10, 4, 15), uint16] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %726 = %705.0;
  %727 = @func_818(%708, %709) /* ty=Tensor[(?, 15, 2), int8] */;
  %728 = %712.0;
  %729 = bitwise_xor(%719, %720) /* ty=Tensor[(10, 4, 15), uint8] */;
  %730 = tan(%721) /* ty=Tensor[(10, 4, 15), float64] */;
  %731 = logical_xor(%724, %725) /* ty=Tensor[(10, 4, 15), uint16] */;
  (%726, meta[relay.Constant][48] /* ty=Tensor[(154), int8] */, %727, meta[relay.Constant][49] /* ty=Tensor[(15), uint32] */, meta[relay.Constant][50] /* ty=Tensor[(30), uint32] */, %728, %var_880, %729, %730, %731)
}

def @func_5268(%var_5261: float32) -> (Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), float64], Tensor[(5, 5, 13), float32], float32, Tensor[(64, 2), float32], Tensor[(98), uint64], Tensor[(3, 15, 4), int32]) {
  %732 = @func_4758() /* ty=(Tensor[(12, 50), float64], Tensor[(3, 15, 4), float64]) */;
  %733 = @func_3714() /* ty=Tensor[(3, 15, 4), int32] */;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %735 = cast(%var_5261, dtype="float32") /* ty=float32 */;
  %736 = cast(meta[relay.Constant][51] /* ty=Tensor[(64, 2), float32] */, dtype="float32") /* ty=Tensor[(64, 2), float32] */;
  %737 = cast(meta[relay.Constant][52] /* ty=Tensor[(98), uint64] */, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %738 = reshape(%735, newshape=[]) /* ty=float32 */;
  %739 = reshape(%736, newshape=[16, 1, 8]) /* ty=Tensor[(16, 1, 8), float32] */;
  %740 = reshape(%737, newshape=[98]) /* ty=Tensor[(98), uint64] */;
  %741 = @func_4724(%738, %739, %740) /* ty=(Tensor[(16, ?, 8), bool], Tensor[(7, 1, 14), float64], Tensor[(70), uint32], Tensor[(98), uint64], Tensor[(16, 1, 8), float64], Tensor[(5, 5, 13), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32]) */;
  %742 = @func_2816() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %743 = %732.1;
  %744 = sqrt(%734) /* ty=Tensor[(3, 15, 4), float64] */;
  %745 = %741.5;
  %746 = %742.0;
  (%743, %744, %745, %var_5261, meta[relay.Constant][51] /* ty=Tensor[(64, 2), float32] */, meta[relay.Constant][52] /* ty=Tensor[(98), uint64] */, %746)
}

def @func_3296(%var_3287: Tensor[(7, 8, 6), bool], %var_3288: Tensor[(7, 8, 6), bool]) -> (Tensor[(7, 8, 6), bool],) {
  %747 = cast(%var_3288, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
  %748 = shape_of(%var_3287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_3287, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = logical_or(%749, %750) /* ty=Tensor[(7, 8, 6), bool] */;
  %752 = cast(%var_3287, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%751, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %756 = greater(%754, %755) /* ty=Tensor[(7, 8, 6), bool] */;
  (%756,)
}

def @func_1869() -> Tensor[(3, 15, 4), float64] {
  %757 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %758 = %757.0;
  %759 = cast(%758, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  cosh(%759) /* ty=Tensor[(3, 15, 4), float64] */
}

def @func_3385(%var_3376: float64) -> (Tensor[(14, 10, 15), float64],) {
  %760 = cast(%var_3376, dtype="float64") /* ty=float64 */;
  %761 = cast(meta[relay.Constant][53] /* ty=Tensor[(14, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 15), float64] */;
  %762 = floor_divide(%760, %761) /* ty=Tensor[(14, 10, 15), float64] */;
  (%762,)
}

def @func_4501() -> (Tensor[(3, 15, 4), int32],) {
  %763 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
  (%763,)
}

def @func_3463() -> Tensor[(3, 15, 4), bool] {
  %764 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %764.0
}

def @func_2194() -> (Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(1, 315), int64]) {
  %765 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %766 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 315), int64] */, dtype="int64") /* ty=Tensor[(1, 315), int64] */;
  %767 = reshape(%766, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), int64] */;
  %768 = @func_1397(%767) /* ty=(Tensor[(15, 3, 7), int64], Tensor[(15, 3, 7), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %769 = %765.3;
  %770 = %768.3;
  (%769, %770, meta[relay.Constant][54] /* ty=Tensor[(1, 315), int64] */)
}

def @func_4254(%var_4239: Tensor[(600), float32]) -> (Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(600), float32], Tensor[(3, 15, 4), int32]) {
  %771 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %772 = cast(%var_4239, dtype="float32") /* ty=Tensor[(600), float32] */;
  %773 = reshape(%772, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %774 = @func_4225(%773) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32]) */;
  %775 = %771.0;
  %776 = %774.5;
  %777 = @func_2768() /* ty=Tensor[(3, 15, 4), int32] */;
  (%775, %776, %var_4239, %777)
}

def @func_4629() -> (Tensor[(1, 6, 6), float64], Tensor[(12, 50), float32]) {
  %778 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 6), float64] */;
  %779 = atanh(%778) /* ty=Tensor[(1, 6, 6), float64] */;
  %780 = @func_2802() /* ty=Tensor[(12, 50), float32] */;
  (%779, %780)
}

def @func_5538() -> (Tensor[(12, 50), float32], Tensor[(600), float32], Tensor[(7, 8, 6), bool], Tensor[(1, 336), bool]) {
  %781 = @func_4629() /* ty=(Tensor[(1, 6, 6), float64], Tensor[(12, 50), float32]) */;
  %782 = %781.1;
  %783 = cast(%782, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %784 = reshape(%783, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %785 = @func_4254(%784) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(600), float32], Tensor[(3, 15, 4), int32]) */;
  %786 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 336), bool] */, dtype="bool") /* ty=Tensor[(1, 336), bool] */;
  %787 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 336), bool] */, dtype="bool") /* ty=Tensor[(1, 336), bool] */;
  %788 = reshape(%786, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %789 = reshape(%787, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %790 = @func_3296(%788, %789) /* ty=(Tensor[(7, 8, 6), bool],) */;
  %791 = %785.2;
  %792 = %790.0;
  (%782, %791, %792, meta[relay.Constant][56] /* ty=Tensor[(1, 336), bool] */)
}

def @func_3871(%var_3841: Tensor[(3, 16, 7), uint32]) -> (Tensor[(3, 16, 7), uint32], Tensor[(3, 16, 7), uint32]) {
  %793 = cast(%var_3841, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %794 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(meta[relay.Constant][57] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %797 = cast(%var_3841, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %798 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %799 = cast(meta[relay.Constant][57] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %801 = bitwise_xor(%795, %796) /* ty=Tensor[(3, 16, 7), uint32] */;
  %802 = minimum(%799, %800) /* ty=Tensor[(3, 16, 7), uint32] */;
  (%801, %802)
}

def @func_2510() -> (Tensor[(3, 15, 4), float64],) {
  %803 = @func_2339() /* ty=Tensor[(3, 15, 4), bool] */;
  %804 = cast(%803, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %805 = exp(%804) /* ty=Tensor[(3, 15, 4), float64] */;
  (%805,)
}

def @func_1491(%var_1465: Tensor[(910), uint16], %var_1466: Tensor[(30), uint32]) -> (Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(12, 6, 9), float32], Tensor[(98), uint64], Tensor[(910), int16]) {
  %806 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %807 = cast(%var_1465, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %808 = cast(%var_1465, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %809 = cast(%var_1466, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %810 = reshape(%807, newshape=[14, 5, 13]) /* ty=Tensor[(14, 5, 13), uint16] */;
  %811 = reshape(%808, newshape=[14, 5, 13]) /* ty=Tensor[(14, 5, 13), uint16] */;
  %812 = reshape(%809, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %813 = @func_1175(%810, %811, %812) /* ty=(Tensor[(14, 5, 13), bool], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %814 = cast(meta[relay.Constant][58] /* ty=Tensor[(154), int8] */, dtype="int8") /* ty=Tensor[(154), int8] */;
  %815 = reshape(%814, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
  %816 = @func_523(%815) /* ty=(Tensor[(11, 4, 14), bool],) */;
  %817 = cast(meta[relay.Constant][59] /* ty=Tensor[(98), uint64] */, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %818 = reshape(%817, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), uint64] */;
  %819 = @func_221(%818) /* ty=(Tensor[(7, 12, 14), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(7, 1, 14), float64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) */;
  %820 = cast(meta[relay.Constant][60] /* ty=Tensor[(910), uint16] */, dtype="int16") /* ty=Tensor[(910), int16] */;
  %821 = shape_of(%var_1465, dtype="int32") /* ty=Tensor[(1), int32] */;
  %822 = cast(%var_1465, dtype="int16") /* ty=Tensor[(910), int16] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?), int16] */;
  %824 = %806.0;
  %825 = %813.1;
  %826 = %816.0;
  %827 = %819.5;
  %828 = left_shift(%822, %823) /* ty=Tensor[(910), int16] */;
  (%824, %825, %var_1466, %826, meta[relay.Constant][58] /* ty=Tensor[(154), int8] */, %827, meta[relay.Constant][59] /* ty=Tensor[(98), uint64] */, %828)
}

def @func_1619() -> Tensor[(3, 15, 4), int32] {
  %829 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %829.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4949(%var_4929: Tensor[(60, 10), float32]) -> (Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(60, 10), float32], Tensor[(3, 15, 4), int32], Tensor[(648, 1), float32]) {
  %0 = cast(%var_4929, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(648, 1), float64] */, dtype="float64") /* ty=Tensor[(648, 1), float64] */;
  %2 = cast(%var_4929, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %3 = reshape(%0, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float32] */;
  %4 = reshape(%1, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %5 = reshape(%2, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float32] */;
  %6 = @func_908(%3, %4, %5) /* ty=(Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(10, 4, 15), uint8], Tensor[(10, 4, 15), float64], Tensor[(10, 4, 15), uint16]) */;
  %7 = @func_2816() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(648, 1), float64] */, dtype="float32") /* ty=Tensor[(648, 1), float32] */;
  %9 = sinh(%8) /* ty=Tensor[(648, 1), float32] */;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(648, 1), float32] */;
  %11 = @func_3714() /* ty=Tensor[(3, 15, 4), int32] */;
  %12 = %6.3;
  %13 = %7.0;
  %14 = acosh(%10) /* ty=Tensor[(648, 1), float32] */;
  (%11, %12, %var_4929, %13, %14)
}

def @func_5878(%var_5860: Tensor[(910), uint16], %var_5861: Tensor[(10, 3), uint32]) -> (Tensor[(3, 15, 4), int32], Tensor[(154), int8], Tensor[(910), uint16], Tensor[(10, 3), uint32]) {
  %15 = cast(%var_5860, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %16 = cast(%var_5861, dtype="uint32") /* ty=Tensor[(10, 3), uint32] */;
  %17 = reshape(%15, newshape=[910]) /* ty=Tensor[(910), uint16] */;
  %18 = reshape(%16, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %19 = @func_1491(%17, %18) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(12, 6, 9), float32], Tensor[(98), uint64], Tensor[(910), int16]) */;
  %20 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  %21 = %19.4;
  (%20, %21, %var_5860, %var_5861)
}

def @func_5820(%var_5791: Tensor[(11, 14), int8]) -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32], Tensor[(11, 4, 14), bool], Tensor[(11, 14), int8], Tensor[(16, 13, 10), int32], Tensor[(4, 520), int32], Tensor[(3, 15, 4), int32]) {
  %22 = @func_2816() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %23 = @func_2725() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %24 = cast(%var_5791, dtype="int8") /* ty=Tensor[(11, 14), int8] */;
  %25 = reshape(%24, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
  %26 = @func_523(%25) /* ty=(Tensor[(11, 4, 14), bool],) */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 520), int32] */, dtype="int32") /* ty=Tensor[(4, 520), int32] */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 520), int32] */, dtype="int32") /* ty=Tensor[(4, 520), int32] */;
  %29 = reshape(%27, newshape=[16, 13, 10]) /* ty=Tensor[(16, 13, 10), int32] */;
  %30 = reshape(%28, newshape=[16, 13, 10]) /* ty=Tensor[(16, 13, 10), int32] */;
  %31 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %32 = %22.0;
  %33 = %23.0;
  %34 = %26.0;
  %35 = @func_1581(%29, %30) /* ty=Tensor[(16, 13, 10), int32] */;
  %36 = %31.3;
  (%32, %33, %34, %var_5791, %35, meta[relay.Constant][1] /* ty=Tensor[(4, 520), int32] */, %36)
}

def @func_1621() -> Tensor[(3, 15, 4), int32] {
  @func_1619() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_5994(%var_5992: Tensor[(300, 2), float32], %var_5993: Tensor[(6, 84), float64]) -> (Tensor[(3, 15, 4), int32], Tensor[(300, 2), float32], Tensor[(7, 5, 2), uint32], Tensor[(70), uint32], Tensor[(98, 1), uint64], Tensor[(3, 15, 4), float32], Tensor[(16, 2, 4), int8], Tensor[(128), float64], Tensor[(3, 15, 4), int32], Tensor[(504), float64], Tensor[(6, 84), float64]) {
  %67 = fn (%var_5948: Tensor[(300, 2), float32], %var_5975: Tensor[(6, 84), float64]) -> (Tensor[(3, 15, 4), int32], Tensor[(300, 2), float32], Tensor[(7, 5, 2), uint32], Tensor[(70), uint32], Tensor[(98, 1), uint64], Tensor[(3, 15, 4), float32], Tensor[(16, 2, 4), int8], Tensor[(128), float64], Tensor[(3, 15, 4), int32], Tensor[(504), float64], Tensor[(6, 84), float64]) {
    %37 = @func_3471() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(98, 1), uint64] */, dtype="uint64") /* ty=Tensor[(98, 1), uint64] */;
    %41 = reshape(%38, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
    %42 = reshape(%39, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
    %43 = reshape(%40, newshape=[98]) /* ty=Tensor[(98), uint64] */;
    %44 = @func_461(%41, %42, %43) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */;
    %45 = cast(%var_5948, dtype="float32") /* ty=Tensor[(300, 2), float32] */;
    %46 = %37.0;
    %47 = cast(%46, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
    %48 = reshape(%45, newshape=[12, 50]) /* ty=Tensor[(12, 50), float32] */;
    %49 = reshape(%47, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), int32] */;
    %50 = @func_3019(%48, %49) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float64], Tensor[(12, 50), float64]) */;
    %51 = %50.0;
    %52 = cast(%51, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
    %53 = cast(meta[relay.Constant][4] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
    %54 = reshape(%53, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float64] */;
    %55 = @func_5362(%54) /* ty=(Tensor[(16, 2, 4), int8],) */;
    %56 = @func_4501() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %57 = %56.0;
    %58 = cast(%57, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
    %59 = cast(%var_5975, dtype="float64") /* ty=Tensor[(6, 84), float64] */;
    %60 = reshape(%58, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), int32] */;
    %61 = reshape(%59, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %62 = @func_2668(%60, %61) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(504), float64]) */;
    %63 = %44.0;
    %64 = sigmoid(%52) /* ty=Tensor[(3, 15, 4), float32] */;
    %65 = %55.0;
    %66 = %62.2;
    (%46, %var_5948, %63, meta[relay.Constant][2] /* ty=Tensor[(70), uint32] */, meta[relay.Constant][3] /* ty=Tensor[(98, 1), uint64] */, %64, %65, meta[relay.Constant][4] /* ty=Tensor[(128), float64] */, %57, %66, %var_5975)
  };
  %67(%var_5992, %var_5993) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(300, 2), float32], Tensor[(7, 5, 2), uint32], Tensor[(70), uint32], Tensor[(98, 1), uint64], Tensor[(3, 15, 4), float32], Tensor[(16, 2, 4), int8], Tensor[(128), float64], Tensor[(3, 15, 4), int32], Tensor[(504), float64], Tensor[(6, 84), float64]) */
}

def @func_1841() -> (Tensor[(3, 15, 4), int32],) {
  %68 = @func_1619() /* ty=Tensor[(3, 15, 4), int32] */;
  (%68,)
}

def @func_3895(%var_3894: Tensor[(3, 15, 4), int32]) -> (Tensor[(3, 15, 4), float32],) {
  %76 = fn (%var_3887: Tensor[(3, 15, 4), int32]) -> (Tensor[(3, 15, 4), float32],) {
    %69 = @func_3788() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %70 = %69.0;
    %71 = cast(%var_3887, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
    %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%70, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %75 = divide(%73, %74) /* ty=Tensor[(3, 15, 4), float32] */;
    (%75,)
  };
  %76(%var_3894) /* ty=(Tensor[(3, 15, 4), float32],) */
}

def @func_2251() -> Tensor[(3, 15, 4), int32] {
  %77 = fn () -> Tensor[(3, 15, 4), int32] {
    @func_1011() /* ty=Tensor[(3, 15, 4), int32] */
  };
  %77() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_1399(%var_1398: Tensor[(15, 3, 7), int64]) -> (Tensor[(15, 3, 7), int64], Tensor[(15, 3, 7), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) {
  %93 = fn (%var_1363: Tensor[(15, 3, 7), int64]) -> (Tensor[(15, 3, 7), int64], Tensor[(15, 3, 7), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) {
    %78 = cast(%var_1363, dtype="int64") /* ty=Tensor[(15, 3, 7), int64] */;
    %79 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(15, 3, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 3, 7), int64] */, dtype="int64") /* ty=Tensor[(15, 3, 7), int64] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %82 = cast(%var_1363, dtype="float64") /* ty=Tensor[(15, 3, 7), float64] */;
    %83 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(15, 3, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %84 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 3, 7), int64] */, dtype="float64") /* ty=Tensor[(15, 3, 7), float64] */;
    %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(15), uint32] */, dtype="uint32") /* ty=Tensor[(15), uint32] */;
    %87 = cast(meta[relay.Constant][7] /* ty=Tensor[(30), uint32] */, dtype="uint32") /* ty=Tensor[(30), uint32] */;
    %88 = reshape(%86, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), uint32] */;
    %89 = reshape(%87, newshape=[1, 15, 2]) /* ty=Tensor[(1, 15, 2), uint32] */;
    %90 = logical_xor(%80, %81) /* ty=Tensor[(15, 3, 7), int64] */;
    %91 = divide(%84, %85) /* ty=Tensor[(15, 3, 7), float64] */;
    %92 = @func_818(%88, %89) /* ty=Tensor[(?, 15, 2), int8] */;
    (%90, %91, %92, meta[relay.Constant][6] /* ty=Tensor[(15), uint32] */, meta[relay.Constant][7] /* ty=Tensor[(30), uint32] */)
  };
  %93(%var_1398) /* ty=(Tensor[(15, 3, 7), int64], Tensor[(15, 3, 7), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */
}

def @func_5516() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool]) {
  @func_5514() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool]) */
}

def @func_1206(%var_1204: Tensor[(600), float32]) -> (Tensor[(3, 15, 4), bool], Tensor[(648), float64], Tensor[(600), float32], Tensor[(18, 36), float64]) {
  @func_1203(%var_1204) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(648), float64], Tensor[(600), float32], Tensor[(18, 36), float64]) */
}

def @func_2031() -> (Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) {
  %94 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 50), float32] */, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %96 = reshape(%95, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %97 = @func_1203(%96) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(648), float64], Tensor[(600), float32], Tensor[(18, 36), float64]) */;
  %98 = %94.0;
  %99 = %97.3;
  %100 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  (%98, %99, meta[relay.Constant][8] /* ty=Tensor[(12, 50), float32] */, %100)
}

def @func_6273() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32]) {
  %101 = @func_4141() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %102 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %103 = %101.0;
  %104 = @func_2339() /* ty=Tensor[(3, 15, 4), bool] */;
  %105 = %102.0;
  (%103, %104, %105)
}

def @func_1263(%var_1229: Tensor[(3, 15, 4), bool], %var_1250: Tensor[(30), uint32]) -> (Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32], Tensor[(?, 15, 2), int8], Tensor[(30), uint32], Tensor[(3, 15, 4), float64], Tensor[(11, 4, 14), bool], Tensor[(154), int8]) {
  %106 = cast(%var_1229, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %107 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %108 = cast(%var_1250, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %109 = reshape(%108, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %110 = @func_1033(%109) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %111 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %112 = %111.0;
  %113 = cast(%var_1229, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%112, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %117 = power(%115, %116) /* ty=Tensor[(3, 15, 4), float32] */;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(154), int8] */, dtype="int8") /* ty=Tensor[(154), int8] */;
  %120 = reshape(%119, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
  %121 = @func_523(%120) /* ty=(Tensor[(11, 4, 14), bool],) */;
  %122 = asin(%106) /* ty=Tensor[(3, 15, 4), float64] */;
  %123 = %107.0;
  %124 = %110.3;
  %125 = asinh(%118) /* ty=Tensor[(3, 15, 4), float64] */;
  %126 = %121.0;
  (%122, %123, %124, %var_1250, %125, %126, meta[relay.Constant][9] /* ty=Tensor[(154), int8] */)
}

def @func_1046() -> (Tensor[(3, 15, 4), bool],) {
  %129 = fn () -> (Tensor[(3, 15, 4), bool],) {
    %127 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %128 = %127.0;
    (%128,)
  };
  %129() /* ty=(Tensor[(3, 15, 4), bool],) */
}

def @func_6152() -> (Tensor[(3, 15, 4), bool], Tensor[(7, 8, 6), bool], Tensor[(336), bool]) {
  %130 = @func_1636() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool]) */;
  %131 = cast(meta[relay.Constant][10] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %132 = cast(meta[relay.Constant][10] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %133 = reshape(%131, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %134 = reshape(%132, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %135 = @func_3296(%133, %134) /* ty=(Tensor[(7, 8, 6), bool],) */;
  %136 = %130.0;
  %137 = %135.0;
  (%136, %137, meta[relay.Constant][10] /* ty=Tensor[(336), bool] */)
}

def @func_1596() -> (Tensor[(3, 15, 4), int32],) {
  %139 = fn () -> (Tensor[(3, 15, 4), int32],) {
    %138 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
    (%138,)
  };
  %139() /* ty=(Tensor[(3, 15, 4), int32],) */
}

def @func_2894(%var_2870: Tensor[(3, 15, 4), float32]) -> (Tensor[(3, 15, 4), uint32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), bool], Tensor[(5, 9, 1), bool], int16, Tensor[(45), int16]) {
  %140 = @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %141 = %140.1;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %143 = sinh(%142) /* ty=Tensor[(3, 15, 4), float32] */;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %145 = rsqrt(%144) /* ty=Tensor[(3, 15, 4), float64] */;
  %146 = cast(%143, dtype="uint32") /* ty=Tensor[(3, 15, 4), uint32] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="uint32") /* ty=Tensor[(3, 15, 4), uint32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %150 = cast(%var_2870, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %151 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%143, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %155 = cast(meta[relay.Constant][11] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %156 = cast(meta[relay.Constant][12] /* ty=Tensor[(45), int16] */, dtype="int16") /* ty=Tensor[(45), int16] */;
  %157 = reshape(%155, newshape=[]) /* ty=int16 */;
  %158 = reshape(%156, newshape=[5, 9, 1]) /* ty=Tensor[(5, 9, 1), int16] */;
  %159 = @func_2274(%157, %158) /* ty=(Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) */;
  %160 = add(%148, %149) /* ty=Tensor[(3, 15, 4), uint32] */;
  %161 = greater(%152, %153) /* ty=Tensor[(3, 15, 4), bool] */;
  %162 = @func_1869() /* ty=Tensor[(3, 15, 4), float64] */;
  %163 = %154.0;
  %164 = %159.0;
  (%160, %161, %162, %163, %164, meta[relay.Constant][11] /* ty=int16 */, meta[relay.Constant][12] /* ty=Tensor[(45), int16] */)
}

def @func_2155(%var_2107: Tensor[(30), uint32], %var_2142: Tensor[(5, 12, 6), float32]) -> (Tensor[(648), float64], Tensor[(30), uint32], Tensor[(3, 15, 4), bool], Tensor[(16, 13, 10), int32], Tensor[(104, 20), int32], Tensor[(5, 12, 6), uint16]) {
  %165 = cast(%var_2107, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %166 = reshape(%165, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %167 = @func_1033(%166) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %168 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %169 = %168.0;
  %170 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %171 = %170.0;
  %172 = cast(%171, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %173 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%169, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = cast(meta[relay.Constant][13] /* ty=Tensor[(104, 20), int32] */, dtype="int32") /* ty=Tensor[(104, 20), int32] */;
  %177 = cast(meta[relay.Constant][13] /* ty=Tensor[(104, 20), int32] */, dtype="int32") /* ty=Tensor[(104, 20), int32] */;
  %178 = reshape(%176, newshape=[16, 13, 10]) /* ty=Tensor[(16, 13, 10), int32] */;
  %179 = reshape(%177, newshape=[16, 13, 10]) /* ty=Tensor[(16, 13, 10), int32] */;
  %180 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 12, 6), int16] */, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %181 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(5, 12, 6), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 12, 6), int16] */, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %184 = equal(%182, %183) /* ty=Tensor[(5, 12, 6), bool] */;
  %185 = cast(%184, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
  %186 = log10(%185) /* ty=Tensor[(5, 12, 6), float32] */;
  %187 = cast(%var_2142, dtype="uint16") /* ty=Tensor[(5, 12, 6), uint16] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="uint16") /* ty=Tensor[(5, 12, 6), uint16] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %191 = %167.2;
  %192 = greater_equal(%174, %175) /* ty=Tensor[(3, 15, 4), bool] */;
  %193 = @func_1581(%178, %179) /* ty=Tensor[(16, 13, 10), int32] */;
  %194 = add(%189, %190) /* ty=Tensor[(5, 12, 6), uint16] */;
  (%191, %var_2107, %192, %193, meta[relay.Constant][13] /* ty=Tensor[(104, 20), int32] */, %194)
}

def @func_3098() -> Tensor[(3, 15, 4), bool] {
  %195 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %195.0
}

def @func_5478() -> Tensor[(3, 15, 4), int32] {
  %197 = fn () -> Tensor[(3, 15, 4), int32] {
    %196 = @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
    %196.0
  };
  %197() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_4457() -> Tensor[(5, 5, 13), float32] {
  @func_4455() /* ty=Tensor[(5, 5, 13), float32] */
}

def @func_2159(%var_2157: Tensor[(30), uint32], %var_2158: Tensor[(5, 12, 6), float32]) -> (Tensor[(648), float64], Tensor[(30), uint32], Tensor[(3, 15, 4), bool], Tensor[(16, 13, 10), int32], Tensor[(104, 20), int32], Tensor[(5, 12, 6), uint16]) {
  @func_2155(%var_2157, %var_2158) /* ty=(Tensor[(648), float64], Tensor[(30), uint32], Tensor[(3, 15, 4), bool], Tensor[(16, 13, 10), int32], Tensor[(104, 20), int32], Tensor[(5, 12, 6), uint16]) */
}

def @func_2769() -> Tensor[(3, 15, 4), int32] {
  %199 = fn () -> Tensor[(3, 15, 4), int32] {
    %198 = @func_1841() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %198.0
  };
  %199() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_3022(%var_3020: Tensor[(12, 50), float32], %var_3021: Tensor[(3, 15, 4), int32]) -> (Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float64], Tensor[(12, 50), float64]) {
  %230 = fn (%var_2980: Tensor[(12, 50), float32], %var_2999: Tensor[(3, 15, 4), int32]) -> (Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float64], Tensor[(12, 50), float64]) {
    %200 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
    %201 = %200.2;
    %202 = cast(%201, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
    %203 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
    %204 = @func_1619() /* ty=Tensor[(3, 15, 4), int32] */;
    %205 = cast(%var_2999, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
    %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
    %207 = cast(%204, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %209 = cast(%201, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
    %210 = rsqrt(%209) /* ty=Tensor[(12, 50), float32] */;
    %211 = cast(%210, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
    %212 = asin(%211) /* ty=Tensor[(12, 50), float64] */;
    %213 = cast(%var_2980, dtype="uint64") /* ty=Tensor[(12, 50), uint64] */;
    %214 = shape_of(%210, dtype="int32") /* ty=Tensor[(2), int32] */;
    %215 = cast(%210, dtype="uint64") /* ty=Tensor[(12, 50), uint64] */;
    %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %217 = minimum(%215, %216) /* ty=Tensor[(12, 50), uint64] */;
    %218 = cast(%217, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
    %219 = shape_of(%212, dtype="int32") /* ty=Tensor[(2), int32] */;
    %220 = cast(%212, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %222 = divide(%220, %221) /* ty=Tensor[(12, 50), float32] */;
    %223 = cast(%222, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
    %224 = @func_1619() /* ty=Tensor[(3, 15, 4), int32] */;
    %225 = atan(%202) /* ty=Tensor[(12, 50), float32] */;
    %226 = %203.2;
    %227 = @func_1619() /* ty=Tensor[(3, 15, 4), int32] */;
    %228 = floor_mod(%207, %208) /* ty=Tensor[(3, 15, 4), float64] */;
    %229 = acosh(%223) /* ty=Tensor[(12, 50), float64] */;
    (%224, %225, %226, %227, %228, %229)
  };
  %230(%var_3020, %var_3021) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float64], Tensor[(12, 50), float64]) */
}

def @func_4631() -> (Tensor[(1, 6, 6), float64], Tensor[(12, 50), float32]) {
  @func_4629() /* ty=(Tensor[(1, 6, 6), float64], Tensor[(12, 50), float32]) */
}

def @func_962() -> (Tensor[(3, 15, 4), bool],) {
  %238 = fn () -> (Tensor[(3, 15, 4), bool],) {
    %231 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
    %232 = log10(%231) /* ty=Tensor[(3, 15, 4), float64] */;
    %233 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 15, 4), float64] */, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
    %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %235 = cast(%232, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
    %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %237 = equal(%235, %236) /* ty=Tensor[(3, 15, 4), bool] */;
    (%237,)
  };
  %238() /* ty=(Tensor[(3, 15, 4), bool],) */
}

def @func_2475(%var_2474: Tensor[(9, 14, 4), float64]) -> (Tensor[(5, 9, 1), bool], int16, Tensor[(5, 9), int16], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(1, 315), int64], Tensor[(1, 10, 13), float32], Tensor[(26, 5), float32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(98), uint64], Tensor[(98), uint64], Tensor[(5, 9, 1), bool], Tensor[(3, 15, 4), bool], Tensor[(9, 14, 4), int64]) {
  %280 = fn (%var_2400: Tensor[(9, 14, 4), float64]) -> (Tensor[(5, 9, 1), bool], int16, Tensor[(5, 9), int16], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(1, 315), int64], Tensor[(1, 10, 13), float32], Tensor[(26, 5), float32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(98), uint64], Tensor[(98), uint64], Tensor[(5, 9, 1), bool], Tensor[(3, 15, 4), bool], Tensor[(9, 14, 4), int64]) {
    %239 = cast(meta[relay.Constant][17] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %240 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 9), int16] */, dtype="int16") /* ty=Tensor[(5, 9), int16] */;
    %241 = reshape(%239, newshape=[]) /* ty=int16 */;
    %242 = reshape(%240, newshape=[5, 9, 1]) /* ty=Tensor[(5, 9, 1), int16] */;
    %243 = @func_2274(%241, %242) /* ty=(Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) */;
    %244 = cast(meta[relay.Constant][19] /* ty=Tensor[(154), int8] */, dtype="int8") /* ty=Tensor[(154), int8] */;
    %245 = reshape(%244, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
    %246 = @func_523(%245) /* ty=(Tensor[(11, 4, 14), bool],) */;
    %247 = @func_2194() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(1, 315), int64]) */;
    %248 = cast(meta[relay.Constant][20] /* ty=Tensor[(26, 5), float32] */, dtype="float32") /* ty=Tensor[(26, 5), float32] */;
    %249 = reshape(%248, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
    %250 = @func_741(%249) /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
    %251 = cast(meta[relay.Constant][21] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %252 = reshape(%251, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %253 = @func_1203(%252) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(648), float64], Tensor[(600), float32], Tensor[(18, 36), float64]) */;
    %254 = cast(meta[relay.Constant][22] /* ty=Tensor[(98), uint64] */, dtype="uint64") /* ty=Tensor[(98), uint64] */;
    %255 = reshape(%254, newshape=[98]) /* ty=Tensor[(98), uint64] */;
    %256 = @func_1090(%255) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */;
    %257 = cast(meta[relay.Constant][17] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %258 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 9), int16] */, dtype="int16") /* ty=Tensor[(5, 9), int16] */;
    %259 = reshape(%257, newshape=[]) /* ty=int16 */;
    %260 = reshape(%258, newshape=[5, 9, 1]) /* ty=Tensor[(5, 9, 1), int16] */;
    %261 = @func_2274(%259, %260) /* ty=(Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) */;
    %262 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %263 = cast(%var_2400, dtype="float64") /* ty=Tensor[(9, 14, 4), float64] */;
    %264 = cos(%263) /* ty=Tensor[(9, 14, 4), float64] */;
    %265 = cast(%264, dtype="float32") /* ty=Tensor[(9, 14, 4), float32] */;
    %266 = tan(%265) /* ty=Tensor[(9, 14, 4), float32] */;
    %267 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 14, 4), float32] */, dtype="int64") /* ty=Tensor[(9, 14, 4), int64] */;
    %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %269 = cast(%266, dtype="int64") /* ty=Tensor[(9, 14, 4), int64] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %271 = %243.0;
    %272 = %246.0;
    %273 = %247.2;
    %274 = %250.0;
    %275 = %253.0;
    %276 = %256.2;
    %277 = %261.0;
    %278 = %262.0;
    %279 = multiply(%269, %270) /* ty=Tensor[(9, 14, 4), int64] */;
    (%271, meta[relay.Constant][17] /* ty=int16 */, meta[relay.Constant][18] /* ty=Tensor[(5, 9), int16] */, %272, meta[relay.Constant][19] /* ty=Tensor[(154), int8] */, %273, %274, meta[relay.Constant][20] /* ty=Tensor[(26, 5), float32] */, %275, meta[relay.Constant][21] /* ty=Tensor[(600), float32] */, %276, meta[relay.Constant][22] /* ty=Tensor[(98), uint64] */, %277, %278, %279)
  };
  %280(%var_2474) /* ty=(Tensor[(5, 9, 1), bool], int16, Tensor[(5, 9), int16], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(1, 315), int64], Tensor[(1, 10, 13), float32], Tensor[(26, 5), float32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(98), uint64], Tensor[(98), uint64], Tensor[(5, 9, 1), bool], Tensor[(3, 15, 4), bool], Tensor[(9, 14, 4), int64]) */
}

def @func_1619() -> Tensor[(3, 15, 4), int32] {
  %281 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %281.0
}

def @func_912(%var_909: Tensor[(10, 4, 15), float32], %var_910: Tensor[(648), float64], %var_911: Tensor[(10, 4, 15), float32]) -> (Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(10, 4, 15), uint8], Tensor[(10, 4, 15), float64], Tensor[(10, 4, 15), uint16]) {
  %311 = fn (%var_854: Tensor[(10, 4, 15), float32], %var_880: Tensor[(648), float64], %var_896: Tensor[(10, 4, 15), float32]) -> (Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(10, 4, 15), uint8], Tensor[(10, 4, 15), float64], Tensor[(10, 4, 15), uint16]) {
    %282 = cast(meta[relay.Constant][24] /* ty=Tensor[(154), int8] */, dtype="int8") /* ty=Tensor[(154), int8] */;
    %283 = reshape(%282, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
    %284 = @func_523(%283) /* ty=(Tensor[(11, 4, 14), bool],) */;
    %285 = cast(meta[relay.Constant][25] /* ty=Tensor[(15), uint32] */, dtype="uint32") /* ty=Tensor[(15), uint32] */;
    %286 = cast(meta[relay.Constant][26] /* ty=Tensor[(30), uint32] */, dtype="uint32") /* ty=Tensor[(30), uint32] */;
    %287 = reshape(%285, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), uint32] */;
    %288 = reshape(%286, newshape=[1, 15, 2]) /* ty=Tensor[(1, 15, 2), uint32] */;
    %289 = cast(%var_880, dtype="float64") /* ty=Tensor[(648), float64] */;
    %290 = reshape(%289, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
    %291 = @func_24(%290) /* ty=(Tensor[(12, 6, 9), float64],) */;
    %292 = cast(%var_854, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
    %293 = erf(%292) /* ty=Tensor[(10, 4, 15), float32] */;
    %294 = cast(%293, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
    %295 = atanh(%294) /* ty=Tensor[(10, 4, 15), float64] */;
    %296 = cast(%293, dtype="uint8") /* ty=Tensor[(10, 4, 15), uint8] */;
    %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %298 = cast(%295, dtype="uint8") /* ty=Tensor[(10, 4, 15), uint8] */;
    %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %300 = cast(%293, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
    %301 = cast(%var_896, dtype="uint16") /* ty=Tensor[(10, 4, 15), uint16] */;
    %302 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%293, dtype="uint16") /* ty=Tensor[(10, 4, 15), uint16] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %305 = %284.0;
    %306 = @func_818(%287, %288) /* ty=Tensor[(?, 15, 2), int8] */;
    %307 = %291.0;
    %308 = bitwise_xor(%298, %299) /* ty=Tensor[(10, 4, 15), uint8] */;
    %309 = tan(%300) /* ty=Tensor[(10, 4, 15), float64] */;
    %310 = logical_xor(%303, %304) /* ty=Tensor[(10, 4, 15), uint16] */;
    (%305, meta[relay.Constant][24] /* ty=Tensor[(154), int8] */, %306, meta[relay.Constant][25] /* ty=Tensor[(15), uint32] */, meta[relay.Constant][26] /* ty=Tensor[(30), uint32] */, %307, %var_880, %308, %309, %310)
  };
  %311(%var_909, %var_910, %var_911) /* ty=(Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(10, 4, 15), uint8], Tensor[(10, 4, 15), float64], Tensor[(10, 4, 15), uint16]) */
}

def @func_6154() -> (Tensor[(3, 15, 4), bool], Tensor[(7, 8, 6), bool], Tensor[(336), bool]) {
  @func_6152() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(7, 8, 6), bool], Tensor[(336), bool]) */
}

def @func_2194() -> (Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(1, 315), int64]) {
  %312 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %313 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 315), int64] */, dtype="int64") /* ty=Tensor[(1, 315), int64] */;
  %314 = reshape(%313, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), int64] */;
  %315 = @func_1397(%314) /* ty=(Tensor[(15, 3, 7), int64], Tensor[(15, 3, 7), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %316 = %312.3;
  %317 = %315.3;
  (%316, %317, meta[relay.Constant][27] /* ty=Tensor[(1, 315), int64] */)
}

def @func_224(%var_222: Tensor[(7, 1, 14), uint64]) -> (Tensor[(7, 12, 14), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(7, 1, 14), float64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) {
  @func_221(%var_222) /* ty=(Tensor[(7, 12, 14), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(7, 1, 14), float64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) */
}

def @func_1203(%var_1198: Tensor[(600), float32]) -> (Tensor[(3, 15, 4), bool], Tensor[(648), float64], Tensor[(600), float32], Tensor[(18, 36), float64]) {
  %318 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %319 = cast(%var_1198, dtype="float32") /* ty=Tensor[(600), float32] */;
  %320 = cast(meta[relay.Constant][28] /* ty=Tensor[(18, 36), float64] */, dtype="float64") /* ty=Tensor[(18, 36), float64] */;
  %321 = cast(%var_1198, dtype="float32") /* ty=Tensor[(600), float32] */;
  %322 = reshape(%319, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float32] */;
  %323 = reshape(%320, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %324 = reshape(%321, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float32] */;
  %325 = @func_908(%322, %323, %324) /* ty=(Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(10, 4, 15), uint8], Tensor[(10, 4, 15), float64], Tensor[(10, 4, 15), uint16]) */;
  %326 = %318.0;
  %327 = %325.6;
  (%326, %327, %var_1198, meta[relay.Constant][28] /* ty=Tensor[(18, 36), float64] */)
}

def @func_3354(%var_3347: Tensor[(3, 15, 4), bool]) -> Tensor[(3, 15, 4), uint8] {
  %328 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %329 = %328.0;
  %330 = cast(%var_3347, dtype="uint8") /* ty=Tensor[(3, 15, 4), uint8] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="uint8") /* ty=Tensor[(3, 15, 4), uint8] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%332, %333) /* ty=Tensor[(3, 15, 4), uint8] */
}

def @func_2510() -> (Tensor[(3, 15, 4), float64],) {
  %334 = @func_2339() /* ty=Tensor[(3, 15, 4), bool] */;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %336 = exp(%335) /* ty=Tensor[(3, 15, 4), float64] */;
  (%336,)
}

def @func_6013() -> (Tensor[(3, 15, 4), int32], Tensor[(5, 5, 13), float32], Tensor[(12, 50), float64]) {
  %337 = @func_3160() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %338 = @func_4758() /* ty=(Tensor[(12, 50), float64], Tensor[(3, 15, 4), float64]) */;
  %339 = %337.1;
  %340 = @func_4455() /* ty=Tensor[(5, 5, 13), float32] */;
  %341 = %338.0;
  (%339, %340, %341)
}

def @func_4029(%var_4028: Tensor[(2, 896), int64]) -> (Tensor[(98), uint16], Tensor[(16, 8, 14), bool], Tensor[(2, 896), int64], Tensor[(3, 15, 4), int32]) {
  %357 = fn (%var_4023: Tensor[(2, 896), int64]) -> (Tensor[(98), uint16], Tensor[(16, 8, 14), bool], Tensor[(2, 896), int64], Tensor[(3, 15, 4), int32]) {
    %342 = @func_3767() /* ty=(Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(98), uint64]) */;
    %343 = %342.2;
    %344 = cast(meta[relay.Constant][29] /* ty=Tensor[(98), uint64] */, dtype="uint16") /* ty=Tensor[(98), uint16] */;
    %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(1), int32] */;
    %346 = cast(%343, dtype="uint16") /* ty=Tensor[(98), uint16] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %348 = cast(%var_4023, dtype="int64") /* ty=Tensor[(2, 896), int64] */;
    %349 = cast(%var_4023, dtype="int64") /* ty=Tensor[(2, 896), int64] */;
    %350 = reshape(%348, newshape=[16, 8, 14]) /* ty=Tensor[(16, 8, 14), int64] */;
    %351 = reshape(%349, newshape=[16, 8, 14]) /* ty=Tensor[(16, 8, 14), int64] */;
    %352 = @func_2373(%350, %351) /* ty=(Tensor[(16, 8, 14), uint32], Tensor[(16, 8, 14), bool]) */;
    %353 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %354 = bitwise_xor(%346, %347) /* ty=Tensor[(98), uint16] */;
    %355 = %352.1;
    %356 = %353.0;
    (%354, %355, %var_4023, %356)
  };
  %357(%var_4028) /* ty=(Tensor[(98), uint16], Tensor[(16, 8, 14), bool], Tensor[(2, 896), int64], Tensor[(3, 15, 4), int32]) */
}

def @func_6102() -> Tensor[(3, 15, 4), bool] {
  %359 = fn () -> Tensor[(3, 15, 4), bool] {
    %358 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %358.0
  };
  %359() /* ty=Tensor[(3, 15, 4), bool] */
}

def @func_1013() -> Tensor[(3, 15, 4), int32] {
  @func_1011() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_4455() -> Tensor[(5, 5, 13), float32] {
  %360 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 5, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 13), float32] */;
  cosh(%360) /* ty=Tensor[(5, 5, 13), float32] */
}

def @func_2512() -> (Tensor[(3, 15, 4), float64],) {
  @func_2510() /* ty=(Tensor[(3, 15, 4), float64],) */
}

def @func_5609() -> (Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(600), float32], Tensor[(45), int16], Tensor[(504), float64]) {
  %361 = cast(meta[relay.Constant][31] /* ty=Tensor[(45), int16] */, dtype="int16") /* ty=Tensor[(45), int16] */;
  %362 = cast(meta[relay.Constant][32] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %363 = reshape(%361, newshape=[45]) /* ty=Tensor[(45), int16] */;
  %364 = reshape(%362, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %365 = @func_3662(%363, %364) /* ty=(Tensor[(3, 15, 4), uint8], Tensor[(5, 9, 1), float64], int16, Tensor[(45), int16], Tensor[(600), float32], Tensor[(504), float64], Tensor[(14, 10, 15), float64]) */;
  %366 = @func_3463() /* ty=Tensor[(3, 15, 4), bool] */;
  %367 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
  %368 = %365.4;
  (%366, %367, %368, meta[relay.Constant][31] /* ty=Tensor[(45), int16] */, meta[relay.Constant][32] /* ty=Tensor[(504), float64] */)
}

def @func_2278(%var_2276: int16, %var_2277: Tensor[(5, 9, 1), int16]) -> (Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) {
  @func_2274(%var_2276, %var_2277) /* ty=(Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) */
}

def @func_2377(%var_2375: Tensor[(16, 8, 14), int64], %var_2376: Tensor[(16, 8, 14), int64]) -> (Tensor[(16, 8, 14), uint32], Tensor[(16, 8, 14), bool]) {
  @func_2373(%var_2375, %var_2376) /* ty=(Tensor[(16, 8, 14), uint32], Tensor[(16, 8, 14), bool]) */
}

def @func_2816() -> (Tensor[(3, 15, 4), int32],) {
  %369 = @func_2768() /* ty=Tensor[(3, 15, 4), int32] */;
  (%369,)
}

def @func_2274(%var_2260: int16, %var_2261: Tensor[(5, 9, 1), int16]) -> (Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) {
  %370 = cast(%var_2260, dtype="bool") /* ty=bool */;
  %371 = cast(%var_2261, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
  %372 = cast(%var_2261, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %373 = cosh(%372) /* ty=Tensor[(5, 9, 1), float64] */;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %375 = greater(%370, %371) /* ty=Tensor[(5, 9, 1), bool] */;
  %376 = exp(%374) /* ty=Tensor[(5, 9, 1), float64] */;
  (%375, %376)
}

def @func_5085() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 130), float32], Tensor[(3, 15, 4), float32], Tensor[(7, 8, 6), bool], Tensor[(336), bool], Tensor[(3, 15, 4), int32]) {
  @func_5083() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 130), float32], Tensor[(3, 15, 4), float32], Tensor[(7, 8, 6), bool], Tensor[(336), bool], Tensor[(3, 15, 4), int32]) */
}

def @func_4629() -> (Tensor[(1, 6, 6), float64], Tensor[(12, 50), float32]) {
  %377 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 6), float64] */;
  %378 = atanh(%377) /* ty=Tensor[(1, 6, 6), float64] */;
  %379 = @func_2802() /* ty=Tensor[(12, 50), float32] */;
  (%378, %379)
}

def @func_3768() -> (Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(98), uint64]) {
  %386 = fn () -> (Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(98), uint64]) {
    %380 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
    %381 = cast(meta[relay.Constant][34] /* ty=Tensor[(98), uint64] */, dtype="uint64") /* ty=Tensor[(98), uint64] */;
    %382 = reshape(%381, newshape=[98]) /* ty=Tensor[(98), uint64] */;
    %383 = @func_1090(%382) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */;
    %384 = %380.2;
    %385 = %383.0;
    (%384, %385, meta[relay.Constant][34] /* ty=Tensor[(98), uint64] */)
  };
  %386() /* ty=(Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32], Tensor[(98), uint64]) */
}

def @func_741(%var_731: Tensor[(1, 10, 13), float32]) -> (Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) {
  %387 = cast(%var_731, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %388 = cast(%var_731, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %389 = cosh(%387) /* ty=Tensor[(1, 10, 13), float32] */;
  %390 = log10(%388) /* ty=Tensor[(1, 10, 13), float64] */;
  (%389, %390)
}

def @func_5083() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 130), float32], Tensor[(3, 15, 4), float32], Tensor[(7, 8, 6), bool], Tensor[(336), bool], Tensor[(3, 15, 4), int32]) {
  %391 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 130), float32] */, dtype="float32") /* ty=Tensor[(1, 130), float32] */;
  %392 = reshape(%391, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %393 = @func_741(%392) /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %394 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 130), float32] */, dtype="float32") /* ty=Tensor[(1, 130), float32] */;
  %395 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 130), float32] */, dtype="float32") /* ty=Tensor[(16, 130), float32] */;
  %396 = @func_2510() /* ty=(Tensor[(3, 15, 4), float64],) */;
  %397 = %396.0;
  %398 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 15, 4), float64] */, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %402 = cast(meta[relay.Constant][38] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %403 = cast(meta[relay.Constant][38] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %404 = reshape(%402, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %405 = reshape(%403, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %406 = @func_3296(%404, %405) /* ty=(Tensor[(7, 8, 6), bool],) */;
  %407 = %393.1;
  %408 = floor_mod(%394, %395) /* ty=Tensor[(16, 130), float32] */;
  %409 = mod(%400, %401) /* ty=Tensor[(3, 15, 4), float32] */;
  %410 = %406.0;
  %411 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
  (%407, %408, %409, %410, meta[relay.Constant][38] /* ty=Tensor[(336), bool] */, %411)
}

def @func_1637() -> (Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool]) {
  %416 = fn () -> (Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool]) {
    %412 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %413 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %414 = %412.0;
    %415 = %413.0;
    (%414, %415)
  };
  %416() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool]) */
}

def @func_1935() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) {
  %417 = @func_1841() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %418 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %419 = %417.0;
  %420 = %418.0;
  (%419, %420)
}

def @func_5882(%var_5880: Tensor[(910), uint16], %var_5881: Tensor[(10, 3), uint32]) -> (Tensor[(3, 15, 4), int32], Tensor[(154), int8], Tensor[(910), uint16], Tensor[(10, 3), uint32]) {
  @func_5878(%var_5880, %var_5881) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(154), int8], Tensor[(910), uint16], Tensor[(10, 3), uint32]) */
}

def @func_2726() -> (Tensor[(3, 15, 4), int32],) {
  %423 = fn () -> (Tensor[(3, 15, 4), int32],) {
    %421 = @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
    %422 = %421.0;
    (%422,)
  };
  %423() /* ty=(Tensor[(3, 15, 4), int32],) */
}

def @func_1802(%var_1689: Tensor[(1, 7, 3), float64], %var_1764: Tensor[(7, 7, 3), uint32]) -> (Tensor[(?, 7, 3), uint64], Tensor[(?, 7, 3), int64], Tensor[(3, 15, 4), bool], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(12, 6, 9), float64], Tensor[(30, 1), uint32], Tensor[(7, 7, 3), bool], Tensor[(?, 7, 3), float64], Tensor[(?, 7, 3), float64], Tensor[(?, 7, 3), float32], Tensor[(3, 15, 4), int32]) {
  %424 = cast(%var_1689, dtype="float64") /* ty=Tensor[(1, 7, 3), float64] */;
  %425 = sqrt(%424) /* ty=Tensor[(1, 7, 3), float64] */;
  %426 = cast(%var_1689, dtype="uint64") /* ty=Tensor[(1, 7, 3), uint64] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="uint64") /* ty=Tensor[(1, 7, 3), uint64] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %430 = cast(%425, dtype="int64") /* ty=Tensor[(1, 7, 3), int64] */;
  %431 = shape_of(%var_1689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%var_1689, dtype="int64") /* ty=Tensor[(1, 7, 3), int64] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %434 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %435 = cast(meta[relay.Constant][39] /* ty=Tensor[(154), int8] */, dtype="int8") /* ty=Tensor[(154), int8] */;
  %436 = reshape(%435, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
  %437 = @func_523(%436) /* ty=(Tensor[(11, 4, 14), bool],) */;
  %438 = cast(meta[relay.Constant][40] /* ty=Tensor[(30, 1), uint32] */, dtype="uint32") /* ty=Tensor[(30, 1), uint32] */;
  %439 = reshape(%438, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %440 = @func_1033(%439) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %441 = cast(%425, dtype="uint32") /* ty=Tensor[(1, 7, 3), uint32] */;
  %442 = shape_of(%var_1689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_1689, dtype="uint32") /* ty=Tensor[(1, 7, 3), uint32] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %445 = bitwise_xor(%443, %444) /* ty=Tensor[(?, 7, 3), uint32] */;
  %446 = cast(%445, dtype="bool") /* ty=Tensor[(?, 7, 3), bool] */;
  %447 = cast(%var_1764, dtype="bool") /* ty=Tensor[(7, 7, 3), bool] */;
  %448 = cast(%445, dtype="float64") /* ty=Tensor[(?, 7, 3), float64] */;
  %449 = acosh(%448) /* ty=Tensor[(?, 7, 3), float64] */;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(?, 7, 3), float64] */;
  %451 = cast(%449, dtype="float64") /* ty=Tensor[(?, 7, 3), float64] */;
  %452 = cast(%445, dtype="float32") /* ty=Tensor[(?, 7, 3), float32] */;
  %453 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%449, dtype="float32") /* ty=Tensor[(?, 7, 3), float32] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %456 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %457 = add(%428, %429) /* ty=Tensor[(?, 7, 3), uint64] */;
  %458 = maximum(%432, %433) /* ty=Tensor[(?, 7, 3), int64] */;
  %459 = %434.0;
  %460 = %437.0;
  %461 = %440.1;
  %462 = equal(%446, %447) /* ty=Tensor[(7, 7, 3), bool] */;
  %463 = atan(%450) /* ty=Tensor[(?, 7, 3), float64] */;
  %464 = sin(%451) /* ty=Tensor[(?, 7, 3), float64] */;
  %465 = floor_divide(%454, %455) /* ty=Tensor[(?, 7, 3), float32] */;
  %466 = %456.0;
  (%457, %458, %459, %460, meta[relay.Constant][39] /* ty=Tensor[(154), int8] */, %461, meta[relay.Constant][40] /* ty=Tensor[(30, 1), uint32] */, %462, %463, %464, %465, %466)
}

def @func_3296(%var_3287: Tensor[(7, 8, 6), bool], %var_3288: Tensor[(7, 8, 6), bool]) -> (Tensor[(7, 8, 6), bool],) {
  %467 = cast(%var_3288, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
  %468 = shape_of(%var_3287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%var_3287, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %471 = logical_or(%469, %470) /* ty=Tensor[(7, 8, 6), bool] */;
  %472 = cast(%var_3287, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %476 = greater(%474, %475) /* ty=Tensor[(7, 8, 6), bool] */;
  (%476,)
}

def @func_3213(%var_3212: Tensor[(3, 15, 4), int32]) -> (Tensor[(3, 15, 4), bool],) {
  %484 = fn (%var_3188: Tensor[(3, 15, 4), int32]) -> (Tensor[(3, 15, 4), bool],) {
    %477 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %478 = %477.0;
    %479 = cast(%var_3188, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
    %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %481 = cast(%478, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %483 = logical_or(%481, %482) /* ty=Tensor[(3, 15, 4), bool] */;
    (%483,)
  };
  %484(%var_3212) /* ty=(Tensor[(3, 15, 4), bool],) */
}

def @func_2802() -> Tensor[(12, 50), float32] {
  %485 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
  %485.2
}

def @func_3928() -> (Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32]) {
  %491 = fn () -> (Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32]) {
    %486 = @func_3160() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
    %487 = %486.0;
    %488 = cast(%487, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
    %489 = cos(%488) /* ty=Tensor[(3, 15, 4), float64] */;
    %490 = @func_2768() /* ty=Tensor[(3, 15, 4), int32] */;
    (%489, %490)
  };
  %491() /* ty=(Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32]) */
}

def @func_4536() -> (Tensor[(3, 15, 4), float64],) {
  @func_4534() /* ty=(Tensor[(3, 15, 4), float64],) */
}

def @func_3464() -> Tensor[(3, 15, 4), bool] {
  %493 = fn () -> Tensor[(3, 15, 4), bool] {
    %492 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %492.0
  };
  %493() /* ty=Tensor[(3, 15, 4), bool] */
}

def @func_4254(%var_4239: Tensor[(600), float32]) -> (Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(600), float32], Tensor[(3, 15, 4), int32]) {
  %494 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %495 = cast(%var_4239, dtype="float32") /* ty=Tensor[(600), float32] */;
  %496 = reshape(%495, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %497 = @func_4225(%496) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32]) */;
  %498 = %494.0;
  %499 = %497.5;
  %500 = @func_2768() /* ty=Tensor[(3, 15, 4), int32] */;
  (%498, %499, %var_4239, %500)
}

def @func_1843() -> (Tensor[(3, 15, 4), int32],) {
  @func_1841() /* ty=(Tensor[(3, 15, 4), int32],) */
}

def @func_5271(%var_5269: float32) -> (Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), float64], Tensor[(5, 5, 13), float32], float32, Tensor[(64, 2), float32], Tensor[(98), uint64], Tensor[(3, 15, 4), int32]) {
  @func_5268(%var_5269) /* ty=(Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), float64], Tensor[(5, 5, 13), float32], float32, Tensor[(64, 2), float32], Tensor[(98), uint64], Tensor[(3, 15, 4), int32]) */
}

def @func_5540() -> (Tensor[(12, 50), float32], Tensor[(600), float32], Tensor[(7, 8, 6), bool], Tensor[(1, 336), bool]) {
  @func_5538() /* ty=(Tensor[(12, 50), float32], Tensor[(600), float32], Tensor[(7, 8, 6), bool], Tensor[(1, 336), bool]) */
}

def @func_3716() -> Tensor[(3, 15, 4), int32] {
  @func_3714() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_2340() -> Tensor[(3, 15, 4), bool] {
  %502 = fn () -> Tensor[(3, 15, 4), bool] {
    %501 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %501.0
  };
  %502() /* ty=Tensor[(3, 15, 4), bool] */
}

def @func_2668(%var_2652: Tensor[(3, 15, 4), int32], %var_2666: Tensor[(504), float64]) -> (Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(504), float64]) {
  %503 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
  %504 = cast(%var_2652, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%503, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %508 = cast(%var_2666, dtype="float64") /* ty=Tensor[(504), float64] */;
  %509 = reshape(%508, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float64] */;
  %510 = @func_2473(%509) /* ty=(Tensor[(5, 9, 1), bool], int16, Tensor[(5, 9), int16], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(1, 315), int64], Tensor[(1, 10, 13), float32], Tensor[(26, 5), float32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(98), uint64], Tensor[(98), uint64], Tensor[(5, 9, 1), bool], Tensor[(3, 15, 4), bool], Tensor[(9, 14, 4), int64]) */;
  %511 = logical_and(%506, %507) /* ty=Tensor[(3, 15, 4), bool] */;
  %512 = %510.9;
  (%511, %512, %var_2666)
}

def @func_5209() -> (Tensor[(3, 15, 4), int32], Tensor[(?, 15, 2), int8], Tensor[(315), int64], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) {
  %528 = fn () -> (Tensor[(3, 15, 4), int32], Tensor[(?, 15, 2), int8], Tensor[(315), int64], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) {
    %513 = cast(meta[relay.Constant][41] /* ty=Tensor[(315), int64] */, dtype="int64") /* ty=Tensor[(315), int64] */;
    %514 = reshape(%513, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), int64] */;
    %515 = @func_1397(%514) /* ty=(Tensor[(15, 3, 7), int64], Tensor[(15, 3, 7), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
    %516 = @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
    %517 = @func_4534() /* ty=(Tensor[(3, 15, 4), float64],) */;
    %518 = @func_1595() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %519 = @func_2725() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %520 = @func_3160() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
    %521 = @func_3072() /* ty=Tensor[(3, 15, 4), int32] */;
    %522 = %515.2;
    %523 = %516.1;
    %524 = %517.0;
    %525 = %518.0;
    %526 = %519.0;
    %527 = %520.0;
    (%521, %522, meta[relay.Constant][41] /* ty=Tensor[(315), int64] */, %523, %524, %525, %526, %527)
  };
  %528() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(?, 15, 2), int8], Tensor[(315), int64], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */
}

def @func_3874(%var_3872: Tensor[(3, 16, 7), uint32]) -> (Tensor[(3, 16, 7), uint32], Tensor[(3, 16, 7), uint32]) {
  @func_3871(%var_3872) /* ty=(Tensor[(3, 16, 7), uint32], Tensor[(3, 16, 7), uint32]) */
}

def @func_5619() -> Tensor[(12, 42), float64] {
  %530 = fn () -> Tensor[(12, 42), float64] {
    %529 = @func_4442() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float32], Tensor[(3, 15, 4), bool], Tensor[(12, 42), float64]) */;
    %529.3
  };
  %530() /* ty=Tensor[(12, 42), float64] */
}

def @func_2321(%var_2320: Tensor[(3, 15, 4), bool]) -> (Tensor[(3, 15, 4), bool],) {
  %538 = fn (%var_2290: Tensor[(3, 15, 4), bool]) -> (Tensor[(3, 15, 4), bool],) {
    %531 = @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */;
    %532 = %531.0;
    %533 = cast(%var_2290, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
    %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%532, dtype="bool") /* ty=Tensor[(3, 15, 4), bool] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %537 = less(%535, %536) /* ty=Tensor[(3, 15, 4), bool] */;
    (%537,)
  };
  %538(%var_2320) /* ty=(Tensor[(3, 15, 4), bool],) */
}

def @func_3788() -> (Tensor[(3, 15, 4), int32],) {
  %539 = @func_2768() /* ty=Tensor[(3, 15, 4), int32] */;
  (%539,)
}

def @func_2196() -> (Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(1, 315), int64]) {
  @func_2194() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(1, 315), int64]) */
}

def @func_3714() -> Tensor[(3, 15, 4), int32] {
  %540 = @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %540.1
}

def @func_1222() -> (Tensor[(3, 15, 4), bool],) {
  %543 = fn () -> (Tensor[(3, 15, 4), bool],) {
    %541 = @func_1045() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %542 = %541.0;
    (%542,)
  };
  %543() /* ty=(Tensor[(3, 15, 4), bool],) */
}

def @func_4502() -> (Tensor[(3, 15, 4), int32],) {
  %545 = fn () -> (Tensor[(3, 15, 4), int32],) {
    %544 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
    (%544,)
  };
  %545() /* ty=(Tensor[(3, 15, 4), int32],) */
}

def @func_3161() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) {
  %549 = fn () -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) {
    %546 = @func_2725() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %547 = %546.0;
    %548 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
    (%547, %548)
  };
  %549() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */
}

def @func_4534() -> (Tensor[(3, 15, 4), float64],) {
  %550 = @func_1869() /* ty=Tensor[(3, 15, 4), float64] */;
  (%550,)
}

def @func_27(%var_25: Tensor[(12, 6, 9), float64]) -> (Tensor[(12, 6, 9), float64],) {
  @func_24(%var_25) /* ty=(Tensor[(12, 6, 9), float64],) */
}

def @func_1267(%var_1265: Tensor[(3, 15, 4), bool], %var_1266: Tensor[(30), uint32]) -> (Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32], Tensor[(?, 15, 2), int8], Tensor[(30), uint32], Tensor[(3, 15, 4), float64], Tensor[(11, 4, 14), bool], Tensor[(154), int8]) {
  @func_1263(%var_1265, %var_1266) /* ty=(Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), int32], Tensor[(?, 15, 2), int8], Tensor[(30), uint32], Tensor[(3, 15, 4), float64], Tensor[(11, 4, 14), bool], Tensor[(154), int8]) */
}

def @func_221(%var_187: Tensor[(7, 1, 14), uint64]) -> (Tensor[(7, 12, 14), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(7, 1, 14), float64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) {
  %551 = cast(%var_187, dtype="bool") /* ty=Tensor[(7, 1, 14), bool] */;
  %552 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 12, 14), uint64] */, dtype="bool") /* ty=Tensor[(7, 12, 14), bool] */;
  %553 = cast(meta[relay.Constant][43] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %554 = reshape(%553, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %555 = @func_24(%554) /* ty=(Tensor[(12, 6, 9), float64],) */;
  %556 = cast(%var_187, dtype="float64") /* ty=Tensor[(7, 1, 14), float64] */;
  %557 = %555.0;
  %558 = cast(%557, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %559 = reshape(%558, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %560 = @func_24(%559) /* ty=(Tensor[(12, 6, 9), float64],) */;
  %561 = cast(meta[relay.Constant][43] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %562 = reshape(%561, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
  %563 = @func_24(%562) /* ty=(Tensor[(12, 6, 9), float64],) */;
  %564 = %563.0;
  %565 = cast(%564, dtype="float32") /* ty=Tensor[(12, 6, 9), float32] */;
  %566 = less_equal(%551, %552) /* ty=Tensor[(7, 12, 14), bool] */;
  %567 = sin(%556) /* ty=Tensor[(7, 1, 14), float64] */;
  %568 = %560.0;
  %569 = log(%565) /* ty=Tensor[(12, 6, 9), float32] */;
  (%566, %557, meta[relay.Constant][43] /* ty=Tensor[(648), float64] */, %567, %568, %569)
}

def @func_3388(%var_3386: float64) -> (Tensor[(14, 10, 15), float64],) {
  @func_3385(%var_3386) /* ty=(Tensor[(14, 10, 15), float64],) */
}

def @func_744(%var_742: Tensor[(1, 10, 13), float32]) -> (Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) {
  @func_741(%var_742) /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */
}

def @func_818(%var_798: Tensor[(1, 15, 1), uint32], %var_799: Tensor[(1, 15, 2), uint32]) -> Tensor[(?, 15, 2), int8] {
  %570 = cast(%var_798, dtype="uint32") /* ty=Tensor[(1, 15, 1), uint32] */;
  %571 = cast(%var_799, dtype="uint32") /* ty=Tensor[(1, 15, 2), uint32] */;
  %572 = multiply(%570, %571) /* ty=Tensor[(1, 15, 2), uint32] */;
  %573 = cast(%572, dtype="int64") /* ty=Tensor[(1, 15, 2), int64] */;
  %574 = cast(%var_798, dtype="int64") /* ty=Tensor[(1, 15, 1), int64] */;
  %575 = logical_xor(%573, %574) /* ty=Tensor[(1, 15, 2), int64] */;
  %576 = cast(%572, dtype="int8") /* ty=Tensor[(1, 15, 2), int8] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="int8") /* ty=Tensor[(1, 15, 2), int8] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%578, %579) /* ty=Tensor[(?, 15, 2), int8] */
}

def @func_5611() -> (Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(600), float32], Tensor[(45), int16], Tensor[(504), float64]) {
  @func_5609() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(600), float32], Tensor[(45), int16], Tensor[(504), float64]) */
}

def @func_1124() -> (Tensor[(3, 15, 4), int32],) {
  @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */
}

def @func_1035(%var_1034: Tensor[(30), uint32]) -> (Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) {
  %591 = fn (%var_1031: Tensor[(30), uint32]) -> (Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) {
    %580 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %581 = cast(meta[relay.Constant][44] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
    %582 = reshape(%581, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
    %583 = @func_24(%582) /* ty=(Tensor[(12, 6, 9), float64],) */;
    %584 = cast(meta[relay.Constant][45] /* ty=Tensor[(15), uint32] */, dtype="uint32") /* ty=Tensor[(15), uint32] */;
    %585 = cast(%var_1031, dtype="uint32") /* ty=Tensor[(30), uint32] */;
    %586 = reshape(%584, newshape=[1, 15, 1]) /* ty=Tensor[(1, 15, 1), uint32] */;
    %587 = reshape(%585, newshape=[1, 15, 2]) /* ty=Tensor[(1, 15, 2), uint32] */;
    %588 = %580.0;
    %589 = %583.0;
    %590 = @func_818(%586, %587) /* ty=Tensor[(?, 15, 2), int8] */;
    (%588, %589, meta[relay.Constant][44] /* ty=Tensor[(648), float64] */, %590, meta[relay.Constant][45] /* ty=Tensor[(15), uint32] */, %var_1031)
  };
  %591(%var_1034) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */
}

def @func_1507() -> (Tensor[(3, 15, 4), int32],) {
  @func_1505() /* ty=(Tensor[(3, 15, 4), int32],) */
}

def @func_3472() -> (Tensor[(3, 15, 4), int32],) {
  %594 = fn () -> (Tensor[(3, 15, 4), int32],) {
    %592 = @func_1505() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %593 = %592.0;
    (%593,)
  };
  %594() /* ty=(Tensor[(3, 15, 4), int32],) */
}

def @func_1505() -> (Tensor[(3, 15, 4), int32],) {
  %595 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  (%595,)
}

def @func_2633() -> Tensor[(3, 15, 4), int32] {
  %597 = fn () -> Tensor[(3, 15, 4), int32] {
    %596 = @func_1841() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %596.0
  };
  %597() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_3073() -> Tensor[(3, 15, 4), int32] {
  %599 = fn () -> Tensor[(3, 15, 4), int32] {
    %598 = @func_2725() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %598.0
  };
  %599() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_4728(%var_4725: float32, %var_4726: Tensor[(16, 1, 8), float32], %var_4727: Tensor[(98), uint64]) -> (Tensor[(16, ?, 8), bool], Tensor[(7, 1, 14), float64], Tensor[(70), uint32], Tensor[(98), uint64], Tensor[(16, 1, 8), float64], Tensor[(5, 5, 13), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32]) {
  %624 = fn (%var_4655: float32, %var_4656: Tensor[(16, 1, 8), float32], %var_4674: Tensor[(98), uint64]) -> (Tensor[(16, ?, 8), bool], Tensor[(7, 1, 14), float64], Tensor[(70), uint32], Tensor[(98), uint64], Tensor[(16, 1, 8), float64], Tensor[(5, 5, 13), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32]) {
    %600 = cast(%var_4655, dtype="float32") /* ty=float32 */;
    %601 = cast(%var_4656, dtype="float32") /* ty=Tensor[(16, 1, 8), float32] */;
    %602 = divide(%600, %601) /* ty=Tensor[(16, 1, 8), float32] */;
    %603 = cast(%602, dtype="bool") /* ty=Tensor[(16, 1, 8), bool] */;
    %604 = shape_of(%var_4656, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(%var_4656, dtype="bool") /* ty=Tensor[(16, 1, 8), bool] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %607 = cast(meta[relay.Constant][46] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %608 = cast(meta[relay.Constant][46] /* ty=Tensor[(70), uint32] */, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %609 = cast(%var_4674, dtype="uint64") /* ty=Tensor[(98), uint64] */;
    %610 = reshape(%607, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
    %611 = reshape(%608, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
    %612 = reshape(%609, newshape=[98]) /* ty=Tensor[(98), uint64] */;
    %613 = @func_461(%610, %611, %612) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */;
    %614 = cast(%var_4656, dtype="float64") /* ty=Tensor[(16, 1, 8), float64] */;
    %615 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %616 = @func_4501() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %617 = greater_equal(%605, %606) /* ty=Tensor[(16, ?, 8), bool] */;
    %618 = %613.1;
    %619 = acosh(%614) /* ty=Tensor[(16, 1, 8), float64] */;
    %620 = @func_4455() /* ty=Tensor[(5, 5, 13), float32] */;
    %621 = %615.0;
    %622 = %616.0;
    %623 = @func_2802() /* ty=Tensor[(12, 50), float32] */;
    (%617, %618, meta[relay.Constant][46] /* ty=Tensor[(70), uint32] */, %var_4674, %619, %620, %621, %622, %623)
  };
  %624(%var_4725, %var_4726, %var_4727) /* ty=(Tensor[(16, ?, 8), bool], Tensor[(7, 1, 14), float64], Tensor[(70), uint32], Tensor[(98), uint64], Tensor[(16, 1, 8), float64], Tensor[(5, 5, 13), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32]) */
}

def @func_5683(%var_5680: Tensor[(3, 15, 4), int32], %var_5681: Tensor[(70), uint32], %var_5682: Tensor[(98), uint64]) -> (Tensor[(3, 15, 4), uint64], Tensor[(98), uint64], Tensor[(70), uint32], Tensor[(98), uint64]) {
  %639 = fn (%var_5646: Tensor[(3, 15, 4), int32], %var_5670: Tensor[(70), uint32], %var_5671: Tensor[(98), uint64]) -> (Tensor[(3, 15, 4), uint64], Tensor[(98), uint64], Tensor[(70), uint32], Tensor[(98), uint64]) {
    %625 = @func_2632() /* ty=Tensor[(3, 15, 4), int32] */;
    %626 = cast(%var_5646, dtype="uint64") /* ty=Tensor[(3, 15, 4), uint64] */;
    %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%625, dtype="uint64") /* ty=Tensor[(3, 15, 4), uint64] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %630 = cast(%var_5670, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %631 = cast(%var_5670, dtype="uint32") /* ty=Tensor[(70), uint32] */;
    %632 = cast(%var_5671, dtype="uint64") /* ty=Tensor[(98), uint64] */;
    %633 = reshape(%630, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
    %634 = reshape(%631, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), uint32] */;
    %635 = reshape(%632, newshape=[98]) /* ty=Tensor[(98), uint64] */;
    %636 = @func_461(%633, %634, %635) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */;
    %637 = subtract(%628, %629) /* ty=Tensor[(3, 15, 4), uint64] */;
    %638 = %636.2;
    (%637, %638, %var_5670, %var_5671)
  };
  %639(%var_5680, %var_5681, %var_5682) /* ty=(Tensor[(3, 15, 4), uint64], Tensor[(98), uint64], Tensor[(70), uint32], Tensor[(98), uint64]) */
}

def @func_3357(%var_3355: Tensor[(3, 15, 4), bool]) -> Tensor[(3, 15, 4), uint8] {
  @func_3354(%var_3355) /* ty=Tensor[(3, 15, 4), uint8] */
}

def @func_2373(%var_2355: Tensor[(16, 8, 14), int64], %var_2359: Tensor[(16, 8, 14), int64]) -> (Tensor[(16, 8, 14), uint32], Tensor[(16, 8, 14), bool]) {
  %640 = cast(%var_2359, dtype="uint32") /* ty=Tensor[(16, 8, 14), uint32] */;
  %641 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(16, 8, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 8, 14), int64] */, dtype="uint32") /* ty=Tensor[(16, 8, 14), uint32] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %644 = cast(%var_2355, dtype="int64") /* ty=Tensor[(16, 8, 14), int64] */;
  %645 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(16, 8, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 8, 14), int64] */, dtype="int64") /* ty=Tensor[(16, 8, 14), int64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %648 = minimum(%646, %647) /* ty=Tensor[(16, 8, 14), int64] */;
  %649 = cast(%648, dtype="bool") /* ty=Tensor[(16, 8, 14), bool] */;
  %650 = shape_of(%var_2355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%var_2355, dtype="bool") /* ty=Tensor[(16, 8, 14), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = maximum(%642, %643) /* ty=Tensor[(16, 8, 14), uint32] */;
  %654 = equal(%651, %652) /* ty=Tensor[(16, 8, 14), bool] */;
  (%653, %654)
}

def @func_4257(%var_4255: Tensor[(600), float32]) -> (Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(600), float32], Tensor[(3, 15, 4), int32]) {
  @func_4254(%var_4255) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(600), float32], Tensor[(3, 15, 4), int32]) */
}

def @func_1495(%var_1493: Tensor[(910), uint16], %var_1494: Tensor[(30), uint32]) -> (Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(12, 6, 9), float32], Tensor[(98), uint64], Tensor[(910), int16]) {
  @func_1491(%var_1493, %var_1494) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(12, 6, 9), float32], Tensor[(98), uint64], Tensor[(910), int16]) */
}

def @func_1491(%var_1465: Tensor[(910), uint16], %var_1466: Tensor[(30), uint32]) -> (Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(30), uint32], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(12, 6, 9), float32], Tensor[(98), uint64], Tensor[(910), int16]) {
  %655 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %656 = cast(%var_1465, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %657 = cast(%var_1465, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %658 = cast(%var_1466, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %659 = reshape(%656, newshape=[14, 5, 13]) /* ty=Tensor[(14, 5, 13), uint16] */;
  %660 = reshape(%657, newshape=[14, 5, 13]) /* ty=Tensor[(14, 5, 13), uint16] */;
  %661 = reshape(%658, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %662 = @func_1175(%659, %660, %661) /* ty=(Tensor[(14, 5, 13), bool], Tensor[(15), uint32], Tensor[(30), uint32]) */;
  %663 = cast(meta[relay.Constant][48] /* ty=Tensor[(154), int8] */, dtype="int8") /* ty=Tensor[(154), int8] */;
  %664 = reshape(%663, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), int8] */;
  %665 = @func_523(%664) /* ty=(Tensor[(11, 4, 14), bool],) */;
  %666 = cast(meta[relay.Constant][49] /* ty=Tensor[(98), uint64] */, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %667 = reshape(%666, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), uint64] */;
  %668 = @func_221(%667) /* ty=(Tensor[(7, 12, 14), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(7, 1, 14), float64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) */;
  %669 = cast(meta[relay.Constant][50] /* ty=Tensor[(910), uint16] */, dtype="int16") /* ty=Tensor[(910), int16] */;
  %670 = shape_of(%var_1465, dtype="int32") /* ty=Tensor[(1), int32] */;
  %671 = cast(%var_1465, dtype="int16") /* ty=Tensor[(910), int16] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?), int16] */;
  %673 = %655.0;
  %674 = %662.1;
  %675 = %665.0;
  %676 = %668.5;
  %677 = left_shift(%671, %672) /* ty=Tensor[(910), int16] */;
  (%673, %674, %var_1466, %675, meta[relay.Constant][48] /* ty=Tensor[(154), int8] */, %676, meta[relay.Constant][49] /* ty=Tensor[(98), uint64] */, %677)
}

def @func_5365(%var_5363: Tensor[(16, 2, 4), float64]) -> (Tensor[(16, 2, 4), int8],) {
  @func_5362(%var_5363) /* ty=(Tensor[(16, 2, 4), int8],) */
}

def @func_3665(%var_3663: Tensor[(45), int16], %var_3664: Tensor[(504), float64]) -> (Tensor[(3, 15, 4), uint8], Tensor[(5, 9, 1), float64], int16, Tensor[(45), int16], Tensor[(600), float32], Tensor[(504), float64], Tensor[(14, 10, 15), float64]) {
  %701 = fn (%var_3641: Tensor[(45), int16], %var_3645: Tensor[(504), float64]) -> (Tensor[(3, 15, 4), uint8], Tensor[(5, 9, 1), float64], int16, Tensor[(45), int16], Tensor[(600), float32], Tensor[(504), float64], Tensor[(14, 10, 15), float64]) {
    %678 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %679 = %678.0;
    %680 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 15, 4), bool] */, dtype="uint8") /* ty=Tensor[(3, 15, 4), uint8] */;
    %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%679, dtype="uint8") /* ty=Tensor[(3, 15, 4), uint8] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %684 = cast(meta[relay.Constant][52] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %685 = cast(%var_3641, dtype="int16") /* ty=Tensor[(45), int16] */;
    %686 = reshape(%684, newshape=[]) /* ty=int16 */;
    %687 = reshape(%685, newshape=[5, 9, 1]) /* ty=Tensor[(5, 9, 1), int16] */;
    %688 = @func_2274(%686, %687) /* ty=(Tensor[(5, 9, 1), bool], Tensor[(5, 9, 1), float64]) */;
    %689 = cast(%679, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
    %690 = cast(%var_3645, dtype="float64") /* ty=Tensor[(504), float64] */;
    %691 = reshape(%689, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), int32] */;
    %692 = reshape(%690, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %693 = @func_2668(%691, %692) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(504), float64]) */;
    %694 = cast(meta[relay.Constant][52] /* ty=int16 */, dtype="float64") /* ty=float64 */;
    %695 = reshape(%694, newshape=[]) /* ty=float64 */;
    %696 = @func_3385(%695) /* ty=(Tensor[(14, 10, 15), float64],) */;
    %697 = bitwise_xor(%682, %683) /* ty=Tensor[(3, 15, 4), uint8] */;
    %698 = %688.1;
    %699 = %693.1;
    %700 = %696.0;
    (%697, %698, meta[relay.Constant][52] /* ty=int16 */, %var_3641, %699, %var_3645, %700)
  };
  %701(%var_3663, %var_3664) /* ty=(Tensor[(3, 15, 4), uint8], Tensor[(5, 9, 1), float64], int16, Tensor[(45), int16], Tensor[(600), float32], Tensor[(504), float64], Tensor[(14, 10, 15), float64]) */
}

def @func_6015() -> (Tensor[(3, 15, 4), int32], Tensor[(5, 5, 13), float32], Tensor[(12, 50), float64]) {
  @func_6013() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(5, 5, 13), float32], Tensor[(12, 50), float64]) */
}

def @func_523(%var_506: Tensor[(11, 1, 14), int8]) -> (Tensor[(11, 4, 14), bool],) {
  %702 = cast(%var_506, dtype="bool") /* ty=Tensor[(11, 1, 14), bool] */;
  %703 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 4, 14), int8] */, dtype="bool") /* ty=Tensor[(11, 4, 14), bool] */;
  %704 = less(%702, %703) /* ty=Tensor[(11, 4, 14), bool] */;
  (%704,)
}

def @func_4952(%var_4950: Tensor[(60, 10), float32]) -> (Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(60, 10), float32], Tensor[(3, 15, 4), int32], Tensor[(648, 1), float32]) {
  @func_4949(%var_4950) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(15), uint32], Tensor[(60, 10), float32], Tensor[(3, 15, 4), int32], Tensor[(648, 1), float32]) */
}

def @func_4760() -> (Tensor[(12, 50), float64], Tensor[(3, 15, 4), float64]) {
  @func_4758() /* ty=(Tensor[(12, 50), float64], Tensor[(3, 15, 4), float64]) */
}

def @func_1090(%var_1070: Tensor[(98), uint64]) -> (Tensor[(3, 15, 4), int32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) {
  %705 = cast(%var_1070, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %706 = reshape(%705, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), uint64] */;
  %707 = @func_221(%706) /* ty=(Tensor[(7, 12, 14), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(7, 1, 14), float64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) */;
  %708 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  %709 = %707.3;
  (%708, %709, %var_1070)
}

def @func_2033() -> (Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) {
  @func_2031() /* ty=(Tensor[(3, 15, 4), bool], Tensor[(18, 36), float64], Tensor[(12, 50), float32], Tensor[(3, 15, 4), int32]) */
}

def @func_4116() -> (Tensor[(3, 15, 4), float64],) {
  %711 = fn () -> (Tensor[(3, 15, 4), float64],) {
    %710 = @func_1869() /* ty=Tensor[(3, 15, 4), float64] */;
    (%710,)
  };
  %711() /* ty=(Tensor[(3, 15, 4), float64],) */
}

def @func_5449() -> Tensor[(3, 15, 4), bool] {
  %712 = @func_5107() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %712.0
}

def @func_4142() -> (Tensor[(3, 15, 4), int32],) {
  %715 = fn () -> (Tensor[(3, 15, 4), int32],) {
    %713 = @func_3160() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
    %714 = %713.0;
    (%714,)
  };
  %715() /* ty=(Tensor[(3, 15, 4), int32],) */
}

def @func_5451() -> Tensor[(3, 15, 4), bool] {
  @func_5449() /* ty=Tensor[(3, 15, 4), bool] */
}

def @func_3100() -> Tensor[(3, 15, 4), bool] {
  @func_3098() /* ty=Tensor[(3, 15, 4), bool] */
}

def @func_4758() -> (Tensor[(12, 50), float64], Tensor[(3, 15, 4), float64]) {
  %716 = @func_4629() /* ty=(Tensor[(1, 6, 6), float64], Tensor[(12, 50), float32]) */;
  %717 = %716.1;
  %718 = cast(%717, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %719 = log(%718) /* ty=Tensor[(12, 50), float64] */;
  %720 = @func_1869() /* ty=Tensor[(3, 15, 4), float64] */;
  (%719, %720)
}

def @func_5823(%var_5821: Tensor[(11, 14), int8]) -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32], Tensor[(11, 4, 14), bool], Tensor[(11, 14), int8], Tensor[(16, 13, 10), int32], Tensor[(4, 520), int32], Tensor[(3, 15, 4), int32]) {
  @func_5820(%var_5821) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32], Tensor[(11, 4, 14), bool], Tensor[(11, 14), int8], Tensor[(16, 13, 10), int32], Tensor[(4, 520), int32], Tensor[(3, 15, 4), int32]) */
}

def @func_3130() -> (Tensor[(3, 15, 4), float64],) {
  %723 = fn () -> (Tensor[(3, 15, 4), float64],) {
    %721 = @func_2510() /* ty=(Tensor[(3, 15, 4), float64],) */;
    %722 = %721.0;
    (%722,)
  };
  %723() /* ty=(Tensor[(3, 15, 4), float64],) */
}

def @func_2818() -> (Tensor[(3, 15, 4), int32],) {
  @func_2816() /* ty=(Tensor[(3, 15, 4), int32],) */
}

def @func_3871(%var_3841: Tensor[(3, 16, 7), uint32]) -> (Tensor[(3, 16, 7), uint32], Tensor[(3, 16, 7), uint32]) {
  %724 = cast(%var_3841, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %725 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %728 = cast(%var_3841, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %729 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %732 = bitwise_xor(%726, %727) /* ty=Tensor[(3, 16, 7), uint32] */;
  %733 = minimum(%730, %731) /* ty=Tensor[(3, 16, 7), uint32] */;
  (%732, %733)
}

def @func_822(%var_820: Tensor[(1, 15, 1), uint32], %var_821: Tensor[(1, 15, 2), uint32]) -> Tensor[(?, 15, 2), int8] {
  @func_818(%var_820, %var_821) /* ty=Tensor[(?, 15, 2), int8] */
}

def @func_1937() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) {
  @func_1935() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */
}

def @func_4444() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float32], Tensor[(3, 15, 4), bool], Tensor[(12, 42), float64]) {
  @func_4442() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float32], Tensor[(3, 15, 4), bool], Tensor[(12, 42), float64]) */
}

def @func_1870() -> Tensor[(3, 15, 4), float64] {
  %737 = fn () -> Tensor[(3, 15, 4), float64] {
    %734 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %735 = %734.0;
    %736 = cast(%735, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
    cosh(%736) /* ty=Tensor[(3, 15, 4), float64] */
  };
  %737() /* ty=Tensor[(3, 15, 4), float64] */
}

def @func_1011() -> Tensor[(3, 15, 4), int32] {
  %738 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %739 = %738.0;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(3, 15, 4), float32] */;
  %741 = acos(%740) /* ty=Tensor[(3, 15, 4), float32] */;
  %742 = cast(%741, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %743 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%739, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%744, %745) /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_2804() -> Tensor[(12, 50), float32] {
  @func_2802() /* ty=Tensor[(12, 50), float32] */
}

def @func_5362(%var_5349: Tensor[(16, 2, 4), float64]) -> (Tensor[(16, 2, 4), int8],) {
  %746 = cast(%var_5349, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
  %747 = exp(%746) /* ty=Tensor[(16, 2, 4), float64] */;
  %748 = cast(%747, dtype="int8") /* ty=Tensor[(16, 2, 4), int8] */;
  %749 = shape_of(%var_5349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%var_5349, dtype="int8") /* ty=Tensor[(16, 2, 4), int8] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %752 = bitwise_or(%750, %751) /* ty=Tensor[(16, 2, 4), int8] */;
  (%752,)
}

def @func_3385(%var_3376: float64) -> (Tensor[(14, 10, 15), float64],) {
  %753 = cast(%var_3376, dtype="float64") /* ty=float64 */;
  %754 = cast(meta[relay.Constant][55] /* ty=Tensor[(14, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 15), float64] */;
  %755 = floor_divide(%753, %754) /* ty=Tensor[(14, 10, 15), float64] */;
  (%755,)
}

def @func_465(%var_462: Tensor[(7, 5, 2), uint32], %var_463: Tensor[(7, 5, 2), uint32], %var_464: Tensor[(98), uint64]) -> (Tensor[(7, 5, 2), uint32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) {
  %765 = fn (%var_450: Tensor[(7, 5, 2), uint32], %var_451: Tensor[(7, 5, 2), uint32], %var_456: Tensor[(98), uint64]) -> (Tensor[(7, 5, 2), uint32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) {
    %756 = cast(%var_451, dtype="uint32") /* ty=Tensor[(7, 5, 2), uint32] */;
    %757 = shape_of(%var_450, dtype="int32") /* ty=Tensor[(3), int32] */;
    %758 = cast(%var_450, dtype="uint32") /* ty=Tensor[(7, 5, 2), uint32] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %760 = cast(%var_456, dtype="uint64") /* ty=Tensor[(98), uint64] */;
    %761 = reshape(%760, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), uint64] */;
    %762 = @func_221(%761) /* ty=(Tensor[(7, 12, 14), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(7, 1, 14), float64], Tensor[(12, 6, 9), float64], Tensor[(12, 6, 9), float32]) */;
    %763 = bitwise_and(%758, %759) /* ty=Tensor[(7, 5, 2), uint32] */;
    %764 = %762.3;
    (%763, %764, %var_456)
  };
  %765(%var_462, %var_463, %var_464) /* ty=(Tensor[(7, 5, 2), uint32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */
}

def @func_1806(%var_1804: Tensor[(1, 7, 3), float64], %var_1805: Tensor[(7, 7, 3), uint32]) -> (Tensor[(?, 7, 3), uint64], Tensor[(?, 7, 3), int64], Tensor[(3, 15, 4), bool], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(12, 6, 9), float64], Tensor[(30, 1), uint32], Tensor[(7, 7, 3), bool], Tensor[(?, 7, 3), float64], Tensor[(?, 7, 3), float64], Tensor[(?, 7, 3), float32], Tensor[(3, 15, 4), int32]) {
  @func_1802(%var_1804, %var_1805) /* ty=(Tensor[(?, 7, 3), uint64], Tensor[(?, 7, 3), int64], Tensor[(3, 15, 4), bool], Tensor[(11, 4, 14), bool], Tensor[(154), int8], Tensor[(12, 6, 9), float64], Tensor[(30, 1), uint32], Tensor[(7, 7, 3), bool], Tensor[(?, 7, 3), float64], Tensor[(?, 7, 3), float64], Tensor[(?, 7, 3), float32], Tensor[(3, 15, 4), int32]) */
}

def @func_3790() -> (Tensor[(3, 15, 4), int32],) {
  @func_3788() /* ty=(Tensor[(3, 15, 4), int32],) */
}

def @main() -> Tensor[(12, 50), float32] {
  %766 = @func_4760() /* ty=(Tensor[(12, 50), float64], Tensor[(3, 15, 4), float64]) */;
  %767 = %766.0;
  %768 = cast(%767, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  sqrt(%768) /* ty=Tensor[(12, 50), float32] */
}

def @func_5538() -> (Tensor[(12, 50), float32], Tensor[(600), float32], Tensor[(7, 8, 6), bool], Tensor[(1, 336), bool]) {
  %769 = @func_4629() /* ty=(Tensor[(1, 6, 6), float64], Tensor[(12, 50), float32]) */;
  %770 = %769.1;
  %771 = cast(%770, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %772 = reshape(%771, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %773 = @func_4254(%772) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(600), float32], Tensor[(3, 15, 4), int32]) */;
  %774 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 336), bool] */, dtype="bool") /* ty=Tensor[(1, 336), bool] */;
  %775 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 336), bool] */, dtype="bool") /* ty=Tensor[(1, 336), bool] */;
  %776 = reshape(%774, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %777 = reshape(%775, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), bool] */;
  %778 = @func_3296(%776, %777) /* ty=(Tensor[(7, 8, 6), bool],) */;
  %779 = %773.2;
  %780 = %778.0;
  (%770, %779, %780, meta[relay.Constant][56] /* ty=Tensor[(1, 336), bool] */)
}

def @func_3442() -> Tensor[(3, 15, 4), int32] {
  %781 = fn () -> Tensor[(3, 15, 4), int32] {
    @func_2632() /* ty=Tensor[(3, 15, 4), int32] */
  };
  %781() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_2617(%var_2616: Tensor[(648), float64]) -> (Tensor[(3, 15, 4), float64], Tensor[(648), float64], Tensor[(12, 6, 9), float64]) {
  %792 = fn (%var_2590: Tensor[(648), float64]) -> (Tensor[(3, 15, 4), float64], Tensor[(648), float64], Tensor[(12, 6, 9), float64]) {
    %782 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %783 = %782.0;
    %784 = cast(%783, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
    %785 = cast(%var_2590, dtype="float64") /* ty=Tensor[(648), float64] */;
    %786 = reshape(%785, newshape=[12, 6, 9]) /* ty=Tensor[(12, 6, 9), float64] */;
    %787 = @func_24(%786) /* ty=(Tensor[(12, 6, 9), float64],) */;
    %788 = %787.0;
    %789 = cast(%788, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
    %790 = atanh(%784) /* ty=Tensor[(3, 15, 4), float64] */;
    %791 = atanh(%789) /* ty=Tensor[(12, 6, 9), float64] */;
    (%790, %var_2590, %791)
  };
  %792(%var_2616) /* ty=(Tensor[(3, 15, 4), float64], Tensor[(648), float64], Tensor[(12, 6, 9), float64]) */
}

def @func_4151() -> Tensor[(3, 15, 4), int32] {
  %794 = fn () -> Tensor[(3, 15, 4), int32] {
    %793 = @func_1505() /* ty=(Tensor[(3, 15, 4), int32],) */;
    %793.0
  };
  %794() /* ty=Tensor[(3, 15, 4), int32] */
}

def @func_3300(%var_3298: Tensor[(7, 8, 6), bool], %var_3299: Tensor[(7, 8, 6), bool]) -> (Tensor[(7, 8, 6), bool],) {
  @func_3296(%var_3298, %var_3299) /* ty=(Tensor[(7, 8, 6), bool],) */
}

def @func_4007(%var_4006: Tensor[(12, 11, 12), float64]) -> (Tensor[(12, 11, 12), bool], Tensor[(12, 11, 12), bool], Tensor[(12, 11, 12), bool]) {
  %814 = fn (%var_3940: Tensor[(12, 11, 12), float64]) -> (Tensor[(12, 11, 12), bool], Tensor[(12, 11, 12), bool], Tensor[(12, 11, 12), bool]) {
    %795 = cast(%var_3940, dtype="float64") /* ty=Tensor[(12, 11, 12), float64] */;
    %796 = rsqrt(%795) /* ty=Tensor[(12, 11, 12), float64] */;
    %797 = cast(%796, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
    %798 = sin(%797) /* ty=Tensor[(12, 11, 12), float32] */;
    %799 = cast(%var_3940, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
    %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %801 = cast(%798, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %803 = cast(meta[relay.Constant][57] /* ty=Tensor[(12, 11, 12), float32] */, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
    %804 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %805 = cast(%798, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
    %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %807 = cast(%798, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
    %808 = shape_of(%796, dtype="int32") /* ty=Tensor[(3), int32] */;
    %809 = cast(%796, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
    %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %811 = not_equal(%801, %802) /* ty=Tensor[(12, 11, 12), bool] */;
    %812 = logical_and(%805, %806) /* ty=Tensor[(12, 11, 12), bool] */;
    %813 = equal(%809, %810) /* ty=Tensor[(12, 11, 12), bool] */;
    (%811, %812, %813)
  };
  %814(%var_4006) /* ty=(Tensor[(12, 11, 12), bool], Tensor[(12, 11, 12), bool], Tensor[(12, 11, 12), bool]) */
}

def @func_5514() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool]) {
  %815 = @func_1122() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %816 = @func_1221() /* ty=(Tensor[(3, 15, 4), bool],) */;
  %817 = %815.0;
  %818 = %816.0;
  (%817, %818)
}

def @func_1093(%var_1091: Tensor[(98), uint64]) -> (Tensor[(3, 15, 4), int32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) {
  @func_1090(%var_1091) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(7, 1, 14), float64], Tensor[(98), uint64]) */
}

def @func_24(%var_17: Tensor[(12, 6, 9), float64]) -> (Tensor[(12, 6, 9), float64],) {
  %819 = cast(%var_17, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %820 = sinh(%819) /* ty=Tensor[(12, 6, 9), float64] */;
  (%820,)
}

def @func_3695(%var_3694: Tensor[(14, 9), float32]) -> Tensor[(14, 9), float32] {
  %822 = fn (%var_3687: Tensor[(14, 9), float32]) -> Tensor[(14, 9), float32] {
    %821 = cast(%var_3687, dtype="float32") /* ty=Tensor[(14, 9), float32] */;
    log2(%821) /* ty=Tensor[(14, 9), float32] */
  };
  %822(%var_3694) /* ty=Tensor[(14, 9), float32] */
}

def @func_1179(%var_1176: Tensor[(14, 5, 13), uint16], %var_1177: Tensor[(14, 5, 13), uint16], %var_1178: Tensor[(30), uint32]) -> (Tensor[(14, 5, 13), bool], Tensor[(15), uint32], Tensor[(30), uint32]) {
  %832 = fn (%var_1128: Tensor[(14, 5, 13), uint16], %var_1129: Tensor[(14, 5, 13), uint16], %var_1143: Tensor[(30), uint32]) -> (Tensor[(14, 5, 13), bool], Tensor[(15), uint32], Tensor[(30), uint32]) {
    %823 = cast(%var_1129, dtype="bool") /* ty=Tensor[(14, 5, 13), bool] */;
    %824 = shape_of(%var_1128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %825 = cast(%var_1128, dtype="bool") /* ty=Tensor[(14, 5, 13), bool] */;
    %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %827 = cast(%var_1143, dtype="uint32") /* ty=Tensor[(30), uint32] */;
    %828 = reshape(%827, newshape=[30]) /* ty=Tensor[(30), uint32] */;
    %829 = @func_1033(%828) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(12, 6, 9), float64], Tensor[(648), float64], Tensor[(?, 15, 2), int8], Tensor[(15), uint32], Tensor[(30), uint32]) */;
    %830 = greater_equal(%825, %826) /* ty=Tensor[(14, 5, 13), bool] */;
    %831 = %829.4;
    (%830, %831, %var_1143)
  };
  %832(%var_1176, %var_1177, %var_1178) /* ty=(Tensor[(14, 5, 13), bool], Tensor[(15), uint32], Tensor[(30), uint32]) */
}

def @func_526(%var_524: Tensor[(11, 1, 14), int8]) -> (Tensor[(11, 4, 14), bool],) {
  @func_523(%var_524) /* ty=(Tensor[(11, 4, 14), bool],) */
}

def @func_1584(%var_1582: Tensor[(16, 13, 10), int32], %var_1583: Tensor[(16, 13, 10), int32]) -> Tensor[(16, 13, 10), int32] {
  %837 = fn (%var_1558: Tensor[(16, 13, 10), int32], %var_1559: Tensor[(16, 13, 10), int32]) -> Tensor[(16, 13, 10), int32] {
    %833 = cast(%var_1559, dtype="int32") /* ty=Tensor[(16, 13, 10), int32] */;
    %834 = shape_of(%var_1558, dtype="int32") /* ty=Tensor[(3), int32] */;
    %835 = cast(%var_1558, dtype="int32") /* ty=Tensor[(16, 13, 10), int32] */;
    %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    bitwise_or(%835, %836) /* ty=Tensor[(16, 13, 10), int32] */
  };
  %837(%var_1582, %var_1583) /* ty=Tensor[(16, 13, 10), int32] */
}

def @func_5268(%var_5261: float32) -> (Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), float64], Tensor[(5, 5, 13), float32], float32, Tensor[(64, 2), float32], Tensor[(98), uint64], Tensor[(3, 15, 4), int32]) {
  %838 = @func_4758() /* ty=(Tensor[(12, 50), float64], Tensor[(3, 15, 4), float64]) */;
  %839 = @func_3714() /* ty=Tensor[(3, 15, 4), int32] */;
  %840 = cast(%839, dtype="float64") /* ty=Tensor[(3, 15, 4), float64] */;
  %841 = cast(%var_5261, dtype="float32") /* ty=float32 */;
  %842 = cast(meta[relay.Constant][58] /* ty=Tensor[(64, 2), float32] */, dtype="float32") /* ty=Tensor[(64, 2), float32] */;
  %843 = cast(meta[relay.Constant][59] /* ty=Tensor[(98), uint64] */, dtype="uint64") /* ty=Tensor[(98), uint64] */;
  %844 = reshape(%841, newshape=[]) /* ty=float32 */;
  %845 = reshape(%842, newshape=[16, 1, 8]) /* ty=Tensor[(16, 1, 8), float32] */;
  %846 = reshape(%843, newshape=[98]) /* ty=Tensor[(98), uint64] */;
  %847 = @func_4724(%844, %845, %846) /* ty=(Tensor[(16, ?, 8), bool], Tensor[(7, 1, 14), float64], Tensor[(70), uint32], Tensor[(98), uint64], Tensor[(16, 1, 8), float64], Tensor[(5, 5, 13), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32], Tensor[(12, 50), float32]) */;
  %848 = @func_2816() /* ty=(Tensor[(3, 15, 4), int32],) */;
  %849 = %838.1;
  %850 = sqrt(%840) /* ty=Tensor[(3, 15, 4), float64] */;
  %851 = %847.5;
  %852 = %848.0;
  (%849, %850, %851, %var_5261, meta[relay.Constant][58] /* ty=Tensor[(64, 2), float32] */, meta[relay.Constant][59] /* ty=Tensor[(98), uint64] */, %852)
}

def @func_6275() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32]) {
  @func_6273() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32]) */
}

def @func_5108() -> (Tensor[(3, 15, 4), bool],) {
  %855 = fn () -> (Tensor[(3, 15, 4), bool],) {
    %853 = @func_961() /* ty=(Tensor[(3, 15, 4), bool],) */;
    %854 = %853.0;
    (%854,)
  };
  %855() /* ty=(Tensor[(3, 15, 4), bool],) */
}

def @func_4227(%var_4226: Tensor[(600), float32]) -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32]) {
  %864 = fn (%var_4176: Tensor[(600), float32]) -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32]) {
    %856 = cast(%var_4176, dtype="float32") /* ty=Tensor[(600), float32] */;
    %857 = reshape(%856, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %858 = @func_1203(%857) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(648), float64], Tensor[(600), float32], Tensor[(18, 36), float64]) */;
    %859 = @func_4150() /* ty=Tensor[(3, 15, 4), int32] */;
    %860 = %858.0;
    %861 = @func_3463() /* ty=Tensor[(3, 15, 4), bool] */;
    %862 = @func_2339() /* ty=Tensor[(3, 15, 4), bool] */;
    %863 = @func_2250() /* ty=Tensor[(3, 15, 4), int32] */;
    (%859, %860, %var_4176, %861, %862, %863)
  };
  %864(%var_4226) /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), int32]) */
}

def @func_2672(%var_2670: Tensor[(3, 15, 4), int32], %var_2671: Tensor[(504), float64]) -> (Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(504), float64]) {
  @func_2668(%var_2670, %var_2671) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(504), float64]) */
}

def @func_4442() -> (Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), float32], Tensor[(3, 15, 4), bool], Tensor[(12, 42), float64]) {
  %865 = @func_3160() /* ty=(Tensor[(3, 15, 4), int32], Tensor[(3, 15, 4), int32]) */;
  %866 = %865.1;
  %867 = cast(%866, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %868 = reshape(%867, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), int32] */;
  %869 = @func_3893(%868) /* ty=(Tensor[(3, 15, 4), float32],) */;
  %870 = %869.0;
  %871 = cast(%870, dtype="int32") /* ty=Tensor[(3, 15, 4), int32] */;
  %872 = cast(meta[relay.Constant][60] /* ty=Tensor[(12, 42), float64] */, dtype="float64") /* ty=Tensor[(12, 42), float64] */;
  %873 = reshape(%871, newshape=[3, 15, 4]) /* ty=Tensor[(3, 15, 4), int32] */;
  %874 = reshape(%872, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %875 = @func_2668(%873, %874) /* ty=(Tensor[(3, 15, 4), bool], Tensor[(600), float32], Tensor[(504), float64]) */;
  %876 = %875.0;
  (%866, %870, %876, meta[relay.Constant][60] /* ty=Tensor[(12, 42), float64] */)
}

def @func_1122() -> (Tensor[(3, 15, 4), int32],) {
  %877 = @func_1011() /* ty=Tensor[(3, 15, 4), int32] */;
  (%877,)
}

def @func_2897(%var_2895: Tensor[(3, 15, 4), float32]) -> (Tensor[(3, 15, 4), uint32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), bool], Tensor[(5, 9, 1), bool], int16, Tensor[(45), int16]) {
  @func_2894(%var_2895) /* ty=(Tensor[(3, 15, 4), uint32], Tensor[(3, 15, 4), bool], Tensor[(3, 15, 4), float64], Tensor[(3, 15, 4), bool], Tensor[(5, 9, 1), bool], int16, Tensor[(45), int16]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen76/build/output.py", line 2196, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:48:04] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

