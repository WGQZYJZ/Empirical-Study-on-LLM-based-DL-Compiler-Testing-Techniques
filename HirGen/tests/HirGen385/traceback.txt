==========mod==========
#[version = "0.0.5"]
def @func_2025(%var_2020: Tensor[(13, 1, 11), float32]) -> Tensor[(13, 1, 11), float32] {
  %0 = cast(-4.91519f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1 = cast(%var_2020, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
  divide(%0, %1) /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_9016() -> (Tensor[(7, 3, 7), uint32],) {
  %2 = @func_8118() /* ty=(Tensor[(80), uint8], Tensor[(7, 3, 7), uint32]) */;
  %3 = %2.1;
  (%3,)
}

def @func_5132(%var_5120: bool, %var_5121: Tensor[(16, 7, 9), bool]) -> (Tensor[(16, 7, 9), bool],) {
  %4 = cast(%var_5120, dtype="bool") /* ty=bool */;
  %5 = cast(%var_5121, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %6 = logical_and(%4, %5) /* ty=Tensor[(16, 7, 9), bool] */;
  (%6,)
}

def @func_8544() -> (Tensor[(7, 3, 7), uint32],) {
  %7 = @func_4841() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %8 = %7.0;
  (%8,)
}

def @func_2930() -> Tensor[(7, 3, 7), uint32] {
  @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_4879() -> (Tensor[(7, 3, 7), uint32],) {
  %9 = @func_3016() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %10 = %9.0;
  (%10,)
}

def @func_6117() -> Tensor[(7, 3, 7), bool] {
  %11 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %12 = %11.0;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 3, 7), uint32] */, dtype="bool") /* ty=Tensor[(7, 3, 7), bool] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="bool") /* ty=Tensor[(7, 3, 7), bool] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%15, %16) /* ty=Tensor[(7, 3, 7), bool] */
}

def @func_1433(%var_1410: Tensor[(1456), float64], %var_1413: Tensor[(525, 1), int64], %var_1414: uint32) -> (Tensor[(7, 7, 2), int64], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(7, 15, 5), int64], Tensor[(525, 1), int64], uint32, Tensor[(5, 5, 10), uint32]) {
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
  %18 = log10(%17) /* ty=Tensor[(7, 7, 2), float64] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
  %20 = erf(%19) /* ty=Tensor[(7, 7, 2), float64] */;
  %21 = cast(%20, dtype="int64") /* ty=Tensor[(7, 7, 2), int64] */;
  %22 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%18, dtype="int64") /* ty=Tensor[(7, 7, 2), int64] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %25 = cast(%var_1410, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %26 = reshape(%25, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float64] */;
  %27 = cast(%var_1413, dtype="int64") /* ty=Tensor[(525, 1), int64] */;
  %28 = cast(%var_1414, dtype="uint32") /* ty=uint32 */;
  %29 = reshape(%27, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), int64] */;
  %30 = reshape(%28, newshape=[]) /* ty=uint32 */;
  %31 = @func_765(%29, %30) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */;
  %32 = cast(%var_1413, dtype="int64") /* ty=Tensor[(525, 1), int64] */;
  %33 = cast(%var_1414, dtype="uint32") /* ty=uint32 */;
  %34 = reshape(%32, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), int64] */;
  %35 = reshape(%33, newshape=[]) /* ty=uint32 */;
  %36 = @func_765(%34, %35) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */;
  %37 = subtract(%23, %24) /* ty=Tensor[(7, 7, 2), int64] */;
  %38 = @func_819(%26) /* ty=Tensor[(14, 8, 13), float64] */;
  %39 = %31.0;
  %40 = %36.4;
  (%37, %38, %var_1410, %39, %var_1413, %var_1414, %40)
}

def @func_5731(%var_5695: Tensor[(11, 14, 3), float64], %var_5696: Tensor[(11, 14, 3), float64], %var_5712: Tensor[(11, 14, 3), float64]) -> (Tensor[(11, 14, 3), float64], Tensor[(11, 14, 3), int32], Tensor[(11, 14, 3), float64]) {
  %41 = cast(%var_5696, dtype="float64") /* ty=Tensor[(11, 14, 3), float64] */;
  %42 = shape_of(%var_5695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_5695, dtype="float64") /* ty=Tensor[(11, 14, 3), float64] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %45 = cast(%var_5712, dtype="int32") /* ty=Tensor[(11, 14, 3), int32] */;
  %46 = shape_of(%var_5695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%var_5695, dtype="int32") /* ty=Tensor[(11, 14, 3), int32] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %49 = cast(%var_5712, dtype="float64") /* ty=Tensor[(11, 14, 3), float64] */;
  %50 = multiply(%43, %44) /* ty=Tensor[(11, 14, 3), float64] */;
  %51 = right_shift(%47, %48) /* ty=Tensor[(11, 14, 3), int32] */;
  %52 = sigmoid(%49) /* ty=Tensor[(11, 14, 3), float64] */;
  (%50, %51, %52)
}

def @func_7513() -> (Tensor[(7, 3, 7), float32],) {
  %53 = @func_5488() /* ty=Tensor[(7, 3, 7), uint8] */;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(7, 3, 7), float32] */;
  %55 = exp(%54) /* ty=Tensor[(7, 3, 7), float32] */;
  (%55,)
}

def @func_3074() -> Tensor[(7, 3, 7), uint32] {
  @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_6148() -> (Tensor[(7, 3, 7), uint32],) {
  %56 = @func_4198() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %57 = %56.0;
  (%57,)
}

def @func_7032(%var_7027: Tensor[(12, 3, 13), float32]) -> Tensor[(12, 3, 13), int64] {
  %58 = @func_5395() /* ty=(Tensor[(12, 3, 13), float32], Tensor[(12, 3, 13), float32]) */;
  %59 = %58.0;
  %60 = cast(%var_7027, dtype="int64") /* ty=Tensor[(12, 3, 13), int64] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="int64") /* ty=Tensor[(12, 3, 13), int64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%62, %63) /* ty=Tensor[(12, 3, 13), int64] */
}

def @func_6889(%var_6887: Tensor[(384), float32]) -> (Tensor[(7, 15, 5), int64], Tensor[(525), int64], Tensor[(12, 3, 13), int8], Tensor[(8, 16, 3), float64], Tensor[(384), float32]) {
  %64 = cast(meta[relay.Constant][2] /* ty=Tensor[(525), int64] */, dtype="int64") /* ty=Tensor[(525), int64] */;
  %65 = cast(meta[relay.Constant][3] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %66 = reshape(%64, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), int64] */;
  %67 = reshape(%65, newshape=[]) /* ty=uint32 */;
  %68 = @func_765(%66, %67) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */;
  %69 = @func_5691() /* ty=(Tensor[(12, 3, 13), float32],) */;
  %70 = %69.0;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %72 = log(%71) /* ty=Tensor[(12, 3, 13), float64] */;
  %73 = cast(meta[relay.Constant][3] /* ty=uint32 */, dtype="int8") /* ty=int8 */;
  %74 = cast(%72, dtype="int8") /* ty=Tensor[(12, 3, 13), int8] */;
  %75 = cast(%var_6887, dtype="float32") /* ty=Tensor[(384), float32] */;
  %76 = reshape(%75, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), float32] */;
  %77 = @func_4087(%76) /* ty=(Tensor[(8, 16, 3), float64],) */;
  %78 = %68.0;
  %79 = maximum(%73, %74) /* ty=Tensor[(12, 3, 13), int8] */;
  %80 = %77.0;
  (%78, meta[relay.Constant][2] /* ty=Tensor[(525), int64] */, %79, %80, %var_6887)
}

def @func_8214(%var_8164: Tensor[(48), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(14, 7, 7), uint8], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %81 = @func_6733() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %82 = cast(%var_8164, dtype="float32") /* ty=Tensor[(48), float32] */;
  %83 = reshape(%82, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), float32] */;
  %84 = @func_2601(%83) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */;
  %85 = @func_6186() /* ty=(Tensor[(14, 7, 7), uint8],) */;
  %86 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %87 = %81.0;
  %88 = %84.4;
  %89 = %85.0;
  %90 = @func_5424() /* ty=Tensor[(7, 3, 7), uint32] */;
  %91 = %86.0;
  (%87, %88, %var_8164, %89, %90, %91)
}

def @func_2349(%var_2330: Tensor[(3, 5, 4), uint8], %var_2342: Tensor[(216), float64], %var_2343: uint32) -> (Tensor[(3, 5, 4), bool], Tensor[(5, 6), int32], Tensor[(216), float64], uint32) {
  %92 = cast(%var_2330, dtype="bool") /* ty=Tensor[(3, 5, 4), bool] */;
  %93 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(3, 5, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 5, 4), uint8] */, dtype="bool") /* ty=Tensor[(3, 5, 4), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %96 = cast(%var_2342, dtype="float64") /* ty=Tensor[(216), float64] */;
  %97 = cast(%var_2343, dtype="uint32") /* ty=uint32 */;
  %98 = reshape(%96, newshape=[6, 6, 6]) /* ty=Tensor[(6, 6, 6), float64] */;
  %99 = reshape(%97, newshape=[]) /* ty=uint32 */;
  %100 = @func_1461(%98, %99) /* ty=(Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) */;
  %101 = equal(%94, %95) /* ty=Tensor[(3, 5, 4), bool] */;
  %102 = %100.3;
  (%101, %102, %var_2342, %var_2343)
}

def @func_7644() -> (Tensor[(7, 3, 7), uint32],) {
  %103 = @func_5476() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %104 = %103.0;
  (%104,)
}

def @func_7822(%var_7793: Tensor[(16, 15, 13), float64], %var_7804: Tensor[(16, 15, 13), float64]) -> (Tensor[(16, 15, 13), uint16], Tensor[(16, 15, 13), float32]) {
  %105 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 13), float64] */;
  %106 = shape_of(%var_7793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_7793, dtype="float64") /* ty=Tensor[(16, 15, 13), float64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %109 = floor_divide(%107, %108) /* ty=Tensor[(16, 15, 13), float64] */;
  %110 = cast(%var_7804, dtype="uint16") /* ty=Tensor[(16, 15, 13), uint16] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="uint16") /* ty=Tensor[(16, 15, 13), uint16] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %114 = cast(%var_7793, dtype="float32") /* ty=Tensor[(16, 15, 13), float32] */;
  %115 = subtract(%112, %113) /* ty=Tensor[(16, 15, 13), uint16] */;
  %116 = cosh(%114) /* ty=Tensor[(16, 15, 13), float32] */;
  (%115, %116)
}

def @func_3234(%var_3207: Tensor[(320), float64], %var_3229: Tensor[(143), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(13, 1, 11), float32], Tensor[(143), float32]) {
  %117 = @func_3016() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %118 = cast(%var_3207, dtype="float64") /* ty=Tensor[(320), float64] */;
  %119 = reshape(%118, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float64] */;
  %120 = @func_3026(%119) /* ty=(Tensor[(10, 2, 16), float64],) */;
  %121 = cast(%var_3229, dtype="float32") /* ty=Tensor[(143), float32] */;
  %122 = reshape(%121, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %123 = %117.0;
  %124 = %120.0;
  %125 = @func_2025(%122) /* ty=Tensor[(13, 1, 11), float32] */;
  (%123, %124, %var_3207, %125, %var_3229)
}

def @func_3615() -> (Tensor[(7, 3, 7), uint32],) {
  %126 = @func_2930() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%126,)
}

def @func_7744(%var_7733: Tensor[(300), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(300), float64]) {
  %127 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %128 = cast(meta[relay.Constant][6] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
  %129 = cast(%var_7733, dtype="float64") /* ty=Tensor[(300), float64] */;
  %130 = reshape(%128, newshape=[1, 30]) /* ty=Tensor[(1, 30), int32] */;
  %131 = reshape(%129, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %132 = @func_5576(%130, %131) /* ty=(Tensor[(7, 3, 7), bool], Tensor[(7, 3, 7), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) */;
  %133 = %127.0;
  %134 = %132.6;
  (%133, %134, meta[relay.Constant][6] /* ty=Tensor[(30), int32] */, %var_7733)
}

def @func_4635(%var_4603: Tensor[(80), uint8], %var_4614: uint32, %var_4617: Tensor[(320), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8], uint32, Tensor[(5, 60), float64], Tensor[(30, 320), bool], Tensor[(10, 2, 16), float64]) {
  %135 = cast(%var_4603, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %136 = reshape(%135, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), uint8] */;
  %137 = @func_3562(%136) /* ty=(Tensor[(8, 2, 5), uint8],) */;
  %138 = cast(%var_4617, dtype="bool") /* ty=Tensor[(320), bool] */;
  %139 = cast(meta[relay.Constant][8] /* ty=Tensor[(30, 1), int32] */, dtype="bool") /* ty=Tensor[(30, 1), bool] */;
  %140 = cast(%var_4614, dtype="uint32") /* ty=uint32 */;
  %141 = cast(meta[relay.Constant][8] /* ty=Tensor[(30, 1), int32] */, dtype="int32") /* ty=Tensor[(30, 1), int32] */;
  %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 60), float64] */, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %143 = cast(%var_4617, dtype="float64") /* ty=Tensor[(320), float64] */;
  %144 = reshape(%140, newshape=[]) /* ty=uint32 */;
  %145 = reshape(%141, newshape=[5, 6]) /* ty=Tensor[(5, 6), int32] */;
  %146 = reshape(%142, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %147 = reshape(%143, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %148 = @func_3820(%144, %145, %146, %147) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */;
  %149 = %148.8;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %151 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
  %152 = %137.0;
  %153 = logical_and(%138, %139) /* ty=Tensor[(30, 320), bool] */;
  %154 = sinh(%150) /* ty=Tensor[(10, 2, 16), float64] */;
  (%151, %152, %var_4603, %var_4614, meta[relay.Constant][7] /* ty=Tensor[(5, 60), float64] */, %153, %154)
}

def @func_8293(%var_8278: Tensor[(7, 3, 7), uint32]) -> (Tensor[(7, 3, 7), float64],) {
  %155 = @func_4492() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %156 = %155.0;
  %157 = cast(%var_8278, dtype="float64") /* ty=Tensor[(7, 3, 7), float64] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="float64") /* ty=Tensor[(7, 3, 7), float64] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %161 = divide(%159, %160) /* ty=Tensor[(7, 3, 7), float64] */;
  (%161,)
}

def @func_7665(%var_7651: Tensor[(525), int64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(525), int64], uint32, Tensor[(5, 5, 10), uint32]) {
  %162 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %163 = cast(%var_7651, dtype="int64") /* ty=Tensor[(525), int64] */;
  %164 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %165 = reshape(%163, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), int64] */;
  %166 = reshape(%164, newshape=[]) /* ty=uint32 */;
  %167 = @func_765(%165, %166) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */;
  %168 = cast(%var_7651, dtype="int64") /* ty=Tensor[(525), int64] */;
  %169 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %170 = reshape(%168, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), int64] */;
  %171 = reshape(%169, newshape=[]) /* ty=uint32 */;
  %172 = @func_765(%170, %171) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */;
  %173 = %162.1;
  %174 = %167.3;
  %175 = %172.4;
  (%173, %174, %var_7651, meta[relay.Constant][9] /* ty=uint32 */, %175)
}

def @func_8890() -> (Tensor[(7, 3, 7), bool],) {
  %176 = @func_7675() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %177 = %176.0;
  (%177,)
}

def @func_7308() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool]) {
  %178 = @func_4049() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %179 = @func_4684() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %180 = %178.0;
  %181 = %179.0;
  (%180, %181)
}

def @func_1737(%var_1708: Tensor[(9, 7, 12), float64], %var_1719: Tensor[(9, 7, 12), float64], %var_1728: Tensor[(9, 7, 12), float64]) -> (Tensor[(9, 7, 12), float64], Tensor[(9, 7, 12), int8]) {
  %182 = cast(%var_1708, dtype="float64") /* ty=Tensor[(9, 7, 12), float64] */;
  %183 = cast(%var_1719, dtype="uint8") /* ty=Tensor[(9, 7, 12), uint8] */;
  %184 = shape_of(%var_1708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%var_1708, dtype="uint8") /* ty=Tensor[(9, 7, 12), uint8] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %187 = right_shift(%185, %186) /* ty=Tensor[(9, 7, 12), uint8] */;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(9, 7, 12), float64] */;
  %189 = asin(%188) /* ty=Tensor[(9, 7, 12), float64] */;
  %190 = cast(%var_1728, dtype="int8") /* ty=Tensor[(9, 7, 12), int8] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="int8") /* ty=Tensor[(9, 7, 12), int8] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %194 = log10(%182) /* ty=Tensor[(9, 7, 12), float64] */;
  %195 = add(%192, %193) /* ty=Tensor[(9, 7, 12), int8] */;
  (%194, %195)
}

def @func_3945() -> (Tensor[(13, 1, 11), float64], Tensor[(13, 1, 11), float64]) {
  %196 = @func_3709() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(143), float32], Tensor[(13, 1, 11), float64]) */;
  %197 = @func_3709() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(143), float32], Tensor[(13, 1, 11), float64]) */;
  %198 = %196.2;
  %199 = %197.2;
  (%198, %199)
}

def @func_6615() -> Tensor[(7, 3, 7), uint32] {
  %200 = @func_4841() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %200.0
}

def @func_5207(%var_5200: Tensor[(9, 7, 4), float64]) -> Tensor[(9, 7, 4), float64] {
  %201 = cast(%var_5200, dtype="float64") /* ty=Tensor[(9, 7, 4), float64] */;
  sigmoid(%201) /* ty=Tensor[(9, 7, 4), float64] */
}

def @func_2601(%var_2580: Tensor[(4, 4, 3), float32]) -> (Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) {
  %202 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 3), int32] */, dtype="int32") /* ty=Tensor[(10, 3), int32] */;
  %204 = reshape(%202, newshape=[]) /* ty=uint32 */;
  %205 = reshape(%203, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %206 = @func_480(%204, %205) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
  %207 = cast(%var_2580, dtype="float32") /* ty=Tensor[(4, 4, 3), float32] */;
  %208 = sigmoid(%207) /* ty=Tensor[(4, 4, 3), float32] */;
  %209 = cast(%var_2580, dtype="float64") /* ty=Tensor[(4, 4, 3), float64] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="float64") /* ty=Tensor[(4, 4, 3), float64] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %213 = cast(%208, dtype="float32") /* ty=Tensor[(4, 4, 3), float32] */;
  %214 = %206.2;
  %215 = floor_divide(%211, %212) /* ty=Tensor[(4, 4, 3), float64] */;
  %216 = asinh(%213) /* ty=Tensor[(4, 4, 3), float32] */;
  (%214, meta[relay.Constant][10] /* ty=uint32 */, meta[relay.Constant][11] /* ty=Tensor[(10, 3), int32] */, %215, %216)
}

def @func_5424() -> Tensor[(7, 3, 7), uint32] {
  @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_3852(%var_3849: Tensor[(1456), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(14, 8, 13), float64], Tensor[(1456), float64]) {
  %217 = @func_3615() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %218 = cast(%var_3849, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %219 = reshape(%218, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float64] */;
  %220 = %217.0;
  %221 = @func_819(%219) /* ty=Tensor[(14, 8, 13), float64] */;
  (%220, %221, %var_3849)
}

def @func_4517(%var_4507: uint32, %var_4509: Tensor[(10, 30), float64], %var_4510: Tensor[(40, 8), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(10, 30), float64], Tensor[(40, 8), float64]) {
  %222 = @func_4106() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %223 = cast(%var_4507, dtype="uint32") /* ty=uint32 */;
  %224 = cast(meta[relay.Constant][12] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
  %225 = cast(%var_4509, dtype="float64") /* ty=Tensor[(10, 30), float64] */;
  %226 = cast(%var_4510, dtype="float64") /* ty=Tensor[(40, 8), float64] */;
  %227 = reshape(%223, newshape=[]) /* ty=uint32 */;
  %228 = reshape(%224, newshape=[5, 6]) /* ty=Tensor[(5, 6), int32] */;
  %229 = reshape(%225, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %230 = reshape(%226, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %231 = @func_3820(%227, %228, %229, %230) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */;
  %232 = @func_3876() /* ty=Tensor[(7, 3, 7), uint32] */;
  %233 = %222.0;
  %234 = %231.1;
  (%232, %233, %234, %var_4507, meta[relay.Constant][12] /* ty=Tensor[(30), int32] */, %var_4509, %var_4510)
}

def @func_3491() -> (Tensor[(7, 3, 7), bool],) {
  %235 = @func_2930() /* ty=Tensor[(7, 3, 7), uint32] */;
  %236 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 3, 7), uint32] */, dtype="bool") /* ty=Tensor[(7, 3, 7), bool] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%235, dtype="bool") /* ty=Tensor[(7, 3, 7), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %240 = not_equal(%238, %239) /* ty=Tensor[(7, 3, 7), bool] */;
  (%240,)
}

def @func_5258(%var_5226: Tensor[(20, 4), uint8]) -> (Tensor[(7, 3, 7), bool], Tensor[(8, 2, 5), uint8], Tensor[(20, 4), uint8], Tensor[(7, 3, 7), uint32]) {
  %241 = @func_3491() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %242 = cast(%var_5226, dtype="uint8") /* ty=Tensor[(20, 4), uint8] */;
  %243 = reshape(%242, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), uint8] */;
  %244 = @func_3562(%243) /* ty=(Tensor[(8, 2, 5), uint8],) */;
  %245 = @func_5034() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %246 = %241.0;
  %247 = %244.0;
  %248 = %245.0;
  (%246, %247, %var_5226, %248)
}

def @func_5488() -> Tensor[(7, 3, 7), uint8] {
  @func_4073() /* ty=Tensor[(7, 3, 7), uint8] */
}

def @func_4950() -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %249 = @func_4073() /* ty=Tensor[(7, 3, 7), uint8] */;
  %250 = @func_3952() /* ty=Tensor[(7, 3, 7), uint32] */;
  %251 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%249, %250, %251)
}

def @func_7108(%var_7085: Tensor[(16, 13, 11), float32]) -> Tensor[(16, 13, 11), float32] {
  %252 = cast(%var_7085, dtype="float32") /* ty=Tensor[(16, 13, 11), float32] */;
  asinh(%252) /* ty=Tensor[(16, 13, 11), float32] */
}

def @func_4397() -> Tensor[(7, 3, 7), uint8] {
  @func_4073() /* ty=Tensor[(7, 3, 7), uint8] */
}

def @func_819(%var_815: Tensor[(14, 8, 13), float64]) -> Tensor[(14, 8, 13), float64] {
  %253 = cast(%var_815, dtype="float64") /* ty=Tensor[(14, 8, 13), float64] */;
  sin(%253) /* ty=Tensor[(14, 8, 13), float64] */
}

def @func_7469(%var_7452: Tensor[(128), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(2, 8, 8), bool], Tensor[(128), float64]) {
  %254 = @func_4708() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %255 = cast(%var_7452, dtype="float64") /* ty=Tensor[(128), float64] */;
  %256 = cast(%var_7452, dtype="float64") /* ty=Tensor[(128), float64] */;
  %257 = reshape(%255, newshape=[2, 8, 8]) /* ty=Tensor[(2, 8, 8), float64] */;
  %258 = reshape(%256, newshape=[2, 8, 8]) /* ty=Tensor[(2, 8, 8), float64] */;
  %259 = @func_1888(%257, %258) /* ty=(Tensor[(2, 8, 8), bool], Tensor[(2, 8, 8), bool], Tensor[(10, 30), float32], Tensor[(216), float64], uint32) */;
  %260 = %254.0;
  %261 = %259.0;
  (%260, %261, %var_7452)
}

def @func_6186() -> (Tensor[(14, 7, 7), uint8],) {
  %262 = @func_5845() /* ty=(Tensor[(14, 7, 7), uint8],) */;
  %263 = %262.0;
  (%263,)
}

def @func_7974(%var_7929: Tensor[(11, 16, 5), float32], %var_7961: Tensor[(11, 16, 5), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(11, 16, 5), bool], Tensor[(11, 16, 5), float64], Tensor[(11, 16, 5), float64]) {
  %264 = @func_4879() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %265 = cast(%var_7929, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
  %266 = cos(%265) /* ty=Tensor[(11, 16, 5), float32] */;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
  %268 = acos(%267) /* ty=Tensor[(11, 16, 5), float64] */;
  %269 = cast(%266, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%268, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %273 = cast(%266, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
  %274 = cast(%var_7961, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
  %275 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%266, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %278 = %264.0;
  %279 = logical_or(%271, %272) /* ty=Tensor[(11, 16, 5), bool] */;
  %280 = erf(%273) /* ty=Tensor[(11, 16, 5), float64] */;
  %281 = floor_mod(%276, %277) /* ty=Tensor[(11, 16, 5), float64] */;
  (%278, %279, %280, %281)
}

def @func_5845() -> (Tensor[(14, 7, 7), uint8],) {
  %282 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 7, 7), uint8] */, dtype="uint8") /* ty=Tensor[(14, 7, 7), uint8] */;
  %283 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(14, 7, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 7, 7), uint8] */, dtype="uint8") /* ty=Tensor[(14, 7, 7), uint8] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %286 = bitwise_or(%284, %285) /* ty=Tensor[(14, 7, 7), uint8] */;
  (%286,)
}

def @func_4049() -> (Tensor[(7, 3, 7), uint32],) {
  %287 = @func_3952() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%287,)
}

def @func_4266(%var_4204: Tensor[(9, 11, 1), float64], %var_4218: Tensor[(9, 11, 15), float64], %var_4259: uint32) -> (Tensor[(9, 11, ?), float64], Tensor[(9, 11, 15), int8], Tensor[(5, 6), int32], Tensor[(60), uint8], Tensor[(36, 6), float64], uint32, Tensor[(9, 11, 15), float64]) {
  %288 = cast(%var_4204, dtype="float64") /* ty=Tensor[(9, 11, 1), float64] */;
  %289 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(9, 11, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 1), float64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %292 = cast(%var_4204, dtype="int8") /* ty=Tensor[(9, 11, 1), int8] */;
  %293 = cast(%var_4218, dtype="int8") /* ty=Tensor[(9, 11, 15), int8] */;
  %294 = cast(meta[relay.Constant][17] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %295 = cast(meta[relay.Constant][18] /* ty=Tensor[(36, 6), float64] */, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %296 = cast(%var_4259, dtype="uint32") /* ty=uint32 */;
  %297 = reshape(%294, newshape=[3, 5, 4]) /* ty=Tensor[(3, 5, 4), uint8] */;
  %298 = reshape(%295, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %299 = reshape(%296, newshape=[]) /* ty=uint32 */;
  %300 = @func_2349(%297, %298, %299) /* ty=(Tensor[(3, 5, 4), bool], Tensor[(5, 6), int32], Tensor[(216), float64], uint32) */;
  %301 = cast(%var_4218, dtype="float32") /* ty=Tensor[(9, 11, 15), float32] */;
  %302 = tan(%301) /* ty=Tensor[(9, 11, 15), float32] */;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
  %304 = floor_mod(%290, %291) /* ty=Tensor[(9, 11, ?), float64] */;
  %305 = add(%292, %293) /* ty=Tensor[(9, 11, 15), int8] */;
  %306 = %300.1;
  %307 = log(%303) /* ty=Tensor[(9, 11, 15), float64] */;
  (%304, %305, %306, meta[relay.Constant][17] /* ty=Tensor[(60), uint8] */, meta[relay.Constant][18] /* ty=Tensor[(36, 6), float64] */, %var_4259, %307)
}

def @func_426(%var_378: Tensor[(1, 15, 2), int32], %var_411: Tensor[(10, 15, 2), float64]) -> (Tensor[(8, 15, 2), bool], Tensor[(10, 15, 2), float64]) {
  %308 = cast(%var_378, dtype="bool") /* ty=Tensor[(1, 15, 2), bool] */;
  %309 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(8, 15, 2), bool] */;
  %310 = cast(%var_378, dtype="float64") /* ty=Tensor[(1, 15, 2), float64] */;
  %311 = sigmoid(%310) /* ty=Tensor[(1, 15, 2), float64] */;
  %312 = cast(%311, dtype="float64") /* ty=Tensor[(1, 15, 2), float64] */;
  %313 = cast(%var_411, dtype="float64") /* ty=Tensor[(10, 15, 2), float64] */;
  %314 = not_equal(%308, %309) /* ty=Tensor[(8, 15, 2), bool] */;
  %315 = floor_mod(%312, %313) /* ty=Tensor[(10, 15, 2), float64] */;
  (%314, %315)
}

def @func_4492() -> (Tensor[(7, 3, 7), uint32],) {
  %316 = @func_3615() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %317 = %316.0;
  (%317,)
}

def @func_5818(%var_5785: Tensor[(1, 1456), float64]) -> (Tensor[(7, 3, 7), uint8], Tensor[(14, 8, 13), float64], Tensor[(1, 1456), float64], Tensor[(14, 5, 7), bool], Tensor[(490), uint64], Tensor[(7, 3, 7), uint32]) {
  %318 = @func_5639() /* ty=(Tensor[(7, 3, 7), uint8],) */;
  %319 = cast(%var_5785, dtype="float64") /* ty=Tensor[(1, 1456), float64] */;
  %320 = reshape(%319, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float64] */;
  %321 = cast(meta[relay.Constant][20] /* ty=Tensor[(490), uint64] */, dtype="uint64") /* ty=Tensor[(490), uint64] */;
  %322 = cast(meta[relay.Constant][20] /* ty=Tensor[(490), uint64] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %323 = reshape(%321, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), uint64] */;
  %324 = reshape(%322, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), float32] */;
  %325 = @func_1273(%323, %324) /* ty=(Tensor[(14, 5, 7), uint64], Tensor[(14, 5, 7), bool]) */;
  %326 = %318.0;
  %327 = @func_819(%320) /* ty=Tensor[(14, 8, 13), float64] */;
  %328 = %325.1;
  %329 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%326, %327, %var_5785, %328, meta[relay.Constant][20] /* ty=Tensor[(490), uint64] */, %329)
}

def @func_8118() -> (Tensor[(80), uint8], Tensor[(7, 3, 7), uint32]) {
  %330 = @func_6650() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) */;
  %331 = @func_4492() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %332 = %330.2;
  %333 = %331.0;
  (%332, %333)
}

def @func_5476() -> (Tensor[(7, 3, 7), uint32],) {
  %334 = @func_2930() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%334,)
}

def @func_4033() -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32]) {
  %335 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %336 = %335.1;
  %337 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 3, 7), uint32] */, dtype="uint8") /* ty=Tensor[(7, 3, 7), uint8] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%336, dtype="uint8") /* ty=Tensor[(7, 3, 7), uint8] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %341 = @func_3615() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %342 = subtract(%339, %340) /* ty=Tensor[(7, 3, 7), uint8] */;
  %343 = %341.0;
  (%342, %343)
}

def @func_5517(%var_5506: Tensor[(13, 4, 11), float64]) -> (Tensor[(13, 4, 11), int32], Tensor[(7, 3, 7), uint32]) {
  %344 = @func_4452() /* ty=Tensor[(13, 1, 11), float64] */;
  %345 = cast(%344, dtype="int32") /* ty=Tensor[(13, 1, 11), int32] */;
  %346 = cast(%var_5506, dtype="int32") /* ty=Tensor[(13, 4, 11), int32] */;
  %347 = logical_xor(%345, %346) /* ty=Tensor[(13, 4, 11), int32] */;
  %348 = @func_4821() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%347, %348)
}

def @func_5900() -> (Tensor[(7, 3, 7), uint32],) {
  %349 = @func_4841() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %350 = %349.0;
  (%350,)
}

def @func_3158() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %351 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  %352 = @func_2930() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%351, %352)
}

def @func_2980() -> Tensor[(7, 3, 7), uint32] {
  @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_5882(%var_5867: Tensor[(728, 2), float64]) -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 15, 5), int64], Tensor[(525), int64], uint32, Tensor[(728, 2), float64]) {
  %353 = @func_5639() /* ty=(Tensor[(7, 3, 7), uint8],) */;
  %354 = cast(%var_5867, dtype="float64") /* ty=Tensor[(728, 2), float64] */;
  %355 = cast(meta[relay.Constant][22] /* ty=Tensor[(525), int64] */, dtype="int64") /* ty=Tensor[(525), int64] */;
  %356 = cast(meta[relay.Constant][23] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %357 = reshape(%354, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %358 = reshape(%355, newshape=[525, 1]) /* ty=Tensor[(525, 1), int64] */;
  %359 = reshape(%356, newshape=[]) /* ty=uint32 */;
  %360 = @func_1433(%357, %358, %359) /* ty=(Tensor[(7, 7, 2), int64], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(7, 15, 5), int64], Tensor[(525, 1), int64], uint32, Tensor[(5, 5, 10), uint32]) */;
  %361 = cast(%var_5867, dtype="float64") /* ty=Tensor[(728, 2), float64] */;
  %362 = sigmoid(%361) /* ty=Tensor[(728, 2), float64] */;
  %363 = cast(%362, dtype="float64") /* ty=Tensor[(728, 2), float64] */;
  %364 = %353.0;
  %365 = %360.3;
  %366 = sqrt(%363) /* ty=Tensor[(728, 2), float64] */;
  (%364, %365, meta[relay.Constant][22] /* ty=Tensor[(525), int64] */, meta[relay.Constant][23] /* ty=uint32 */, %366)
}

def @func_6228(%var_6223: Tensor[(13, 9, 16), int8], %var_6224: Tensor[(13, 9, 16), int8]) -> (Tensor[(13, 9, 16), bool],) {
  %367 = cast(%var_6224, dtype="bool") /* ty=Tensor[(13, 9, 16), bool] */;
  %368 = shape_of(%var_6223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%var_6223, dtype="bool") /* ty=Tensor[(13, 9, 16), bool] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %371 = equal(%369, %370) /* ty=Tensor[(13, 9, 16), bool] */;
  (%371,)
}

def @func_8324() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %372 = @func_4049() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %373 = %372.0;
  %374 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%373, %374)
}

def @func_8583() -> (Tensor[(7, 3, 7), uint32],) {
  %375 = @func_4049() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %376 = %375.0;
  (%376,)
}

def @func_8018() -> Tensor[(7, 3, 7), uint32] {
  %377 = @func_5298() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %377.0
}

def @func_480(%var_450: uint32, %var_461: Tensor[(30), int32]) -> (Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) {
  %378 = cast(%var_450, dtype="uint32") /* ty=uint32 */;
  %379 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 5, 10), uint32] */, dtype="uint32") /* ty=Tensor[(5, 5, 10), uint32] */;
  %380 = cast(%var_461, dtype="int32") /* ty=Tensor[(30), int32] */;
  %381 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 30), float64] */, dtype="float64") /* ty=Tensor[(10, 30), float64] */;
  %382 = reshape(%380, newshape=[1, 15, 2]) /* ty=Tensor[(1, 15, 2), int32] */;
  %383 = reshape(%381, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), float64] */;
  %384 = @func_426(%382, %383) /* ty=(Tensor[(8, 15, 2), bool], Tensor[(10, 15, 2), float64]) */;
  %385 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 30), float64] */, dtype="float32") /* ty=Tensor[(10, 30), float32] */;
  %386 = cast(%var_461, dtype="float32") /* ty=Tensor[(30), float32] */;
  %387 = logical_xor(%378, %379) /* ty=Tensor[(5, 5, 10), uint32] */;
  %388 = %384.0;
  %389 = floor_divide(%385, %386) /* ty=Tensor[(10, 30), float32] */;
  (%387, %388, %389)
}

def @func_6471(%var_6396: Tensor[(936, 2), int8], %var_6400: Tensor[(13, 9, 16), bool], %var_6410: uint32, %var_6411: Tensor[(1, 30), int32], %var_6412: Tensor[(300), float64], %var_6413: Tensor[(40, 8), float64]) -> (Tensor[(7, 3, 7), uint8], Tensor[(936, 2), int8], Tensor[(13, 9, 16), bool], Tensor[(5, 5, 10), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(40, 8), float64], Tensor[(7, 3, 7), uint32], Tensor[(320), float64], Tensor[(143), float32]) {
  %390 = cast(%var_6396, dtype="int8") /* ty=Tensor[(936, 2), int8] */;
  %391 = cast(%var_6396, dtype="int8") /* ty=Tensor[(936, 2), int8] */;
  %392 = reshape(%390, newshape=[13, 9, 16]) /* ty=Tensor[(13, 9, 16), int8] */;
  %393 = reshape(%391, newshape=[13, 9, 16]) /* ty=Tensor[(13, 9, 16), int8] */;
  %394 = @func_6228(%392, %393) /* ty=(Tensor[(13, 9, 16), bool],) */;
  %395 = %394.0;
  %396 = cast(%var_6400, dtype="bool") /* ty=Tensor[(13, 9, 16), bool] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="bool") /* ty=Tensor[(13, 9, 16), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %400 = cast(%var_6410, dtype="uint32") /* ty=uint32 */;
  %401 = cast(%var_6411, dtype="int32") /* ty=Tensor[(1, 30), int32] */;
  %402 = cast(%var_6412, dtype="float64") /* ty=Tensor[(300), float64] */;
  %403 = cast(%var_6413, dtype="float64") /* ty=Tensor[(40, 8), float64] */;
  %404 = reshape(%400, newshape=[]) /* ty=uint32 */;
  %405 = reshape(%401, newshape=[5, 6]) /* ty=Tensor[(5, 6), int32] */;
  %406 = reshape(%402, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %407 = reshape(%403, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %408 = @func_3820(%404, %405, %406, %407) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */;
  %409 = cast(%var_6413, dtype="float64") /* ty=Tensor[(40, 8), float64] */;
  %410 = cast(meta[relay.Constant][26] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %411 = reshape(%409, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %412 = reshape(%410, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %413 = @func_3234(%411, %412) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(13, 1, 11), float32], Tensor[(143), float32]) */;
  %414 = @func_4397() /* ty=Tensor[(7, 3, 7), uint8] */;
  %415 = greater_equal(%398, %399) /* ty=Tensor[(13, 9, 16), bool] */;
  %416 = %408.1;
  %417 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  %418 = %413.2;
  (%414, %var_6396, %415, %416, %var_6410, %var_6411, %var_6412, %var_6413, %417, %418, meta[relay.Constant][26] /* ty=Tensor[(143), float32] */)
}

def @func_1888(%var_1828: Tensor[(2, 8, 8), float64], %var_1879: Tensor[(2, 8, 8), float64]) -> (Tensor[(2, 8, 8), bool], Tensor[(2, 8, 8), bool], Tensor[(10, 30), float32], Tensor[(216), float64], uint32) {
  %419 = cast(%var_1828, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
  %420 = log10(%419) /* ty=Tensor[(2, 8, 8), float64] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
  %422 = sqrt(%421) /* ty=Tensor[(2, 8, 8), float64] */;
  %423 = cast(%420, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %427 = cast(%var_1879, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %428 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%420, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = cast(meta[relay.Constant][27] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %432 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %433 = reshape(%431, newshape=[6, 6, 6]) /* ty=Tensor[(6, 6, 6), float64] */;
  %434 = reshape(%432, newshape=[]) /* ty=uint32 */;
  %435 = @func_1461(%433, %434) /* ty=(Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) */;
  %436 = less_equal(%425, %426) /* ty=Tensor[(2, 8, 8), bool] */;
  %437 = logical_and(%429, %430) /* ty=Tensor[(2, 8, 8), bool] */;
  %438 = %435.1;
  (%436, %437, %438, meta[relay.Constant][27] /* ty=Tensor[(216), float64] */, meta[relay.Constant][28] /* ty=uint32 */)
}

def @func_6059() -> (Tensor[(7, 3, 7), uint8], Tensor[(10, 3), int32], Tensor[(48), float32]) {
  %439 = cast(meta[relay.Constant][29] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %440 = reshape(%439, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), float32] */;
  %441 = @func_2601(%440) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */;
  %442 = @func_4397() /* ty=Tensor[(7, 3, 7), uint8] */;
  %443 = %441.2;
  (%442, %443, meta[relay.Constant][29] /* ty=Tensor[(48), float32] */)
}

def @func_5691() -> (Tensor[(12, 3, 13), float32],) {
  %444 = @func_5395() /* ty=(Tensor[(12, 3, 13), float32], Tensor[(12, 3, 13), float32]) */;
  %445 = %444.1;
  (%445,)
}

def @func_4841() -> (Tensor[(7, 3, 7), uint32],) {
  %446 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%446,)
}

def @func_4316(%var_4302: Tensor[(48), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(10, 3), int32], Tensor[(48), float32]) {
  %447 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %448 = cast(%var_4302, dtype="float32") /* ty=Tensor[(48), float32] */;
  %449 = reshape(%448, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), float32] */;
  %450 = @func_2601(%449) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */;
  %451 = %447.0;
  %452 = %450.2;
  (%451, %452, %var_4302)
}

def @func_8726(%var_8638: Tensor[(12, 3, 13), float32], %var_8656: Tensor[(640), float32]) -> (Tensor[(12, 3, 13), float64], Tensor[(7, 3, 7), uint32], Tensor[(640), int16], Tensor[(7, 3, 7), bool]) {
  %453 = @func_5395() /* ty=(Tensor[(12, 3, 13), float32], Tensor[(12, 3, 13), float32]) */;
  %454 = %453.1;
  %455 = cast(%var_8638, dtype="bool") /* ty=Tensor[(12, 3, 13), bool] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="bool") /* ty=Tensor[(12, 3, 13), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %459 = greater(%457, %458) /* ty=Tensor[(12, 3, 13), bool] */;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %461 = cast(%var_8656, dtype="float32") /* ty=Tensor[(640), float32] */;
  %462 = reshape(%461, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %463 = @func_2745(%462) /* ty=Tensor[(10, 8, 8), float32] */;
  %464 = cast(%463, dtype="bool") /* ty=Tensor[(10, 8, 8), bool] */;
  %465 = shape_of(%var_8656, dtype="int32") /* ty=Tensor[(1), int32] */;
  %466 = cast(%var_8656, dtype="bool") /* ty=Tensor[(640), bool] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?), bool] */;
  %468 = less_equal(%466, %467) /* ty=Tensor[(640), bool] */;
  %469 = cast(%var_8656, dtype="int16") /* ty=Tensor[(640), int16] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(1), int32] */;
  %471 = cast(%468, dtype="int16") /* ty=Tensor[(640), int16] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?), int16] */;
  %473 = @func_8036() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %474 = asinh(%460) /* ty=Tensor[(12, 3, 13), float64] */;
  %475 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  %476 = left_shift(%471, %472) /* ty=Tensor[(640), int16] */;
  %477 = %473.0;
  (%474, %475, %476, %477)
}

def @func_5639() -> (Tensor[(7, 3, 7), uint8],) {
  %478 = @func_4073() /* ty=Tensor[(7, 3, 7), uint8] */;
  (%478,)
}

def @func_6650() -> (Tensor[(7, 3, 7), uint8], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) {
  %479 = @func_6245() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint8]) */;
  %480 = cast(meta[relay.Constant][30] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %481 = reshape(%480, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), uint8] */;
  %482 = @func_3562(%481) /* ty=(Tensor[(8, 2, 5), uint8],) */;
  %483 = %479.0;
  %484 = %482.0;
  (%483, %484, meta[relay.Constant][30] /* ty=Tensor[(80), uint8] */)
}

def @func_7293(%var_7229: uint32, %var_7251: Tensor[(30), int32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(756), float64], Tensor[(320), float64], Tensor[(143), float32], uint32, Tensor[(198, 3), int16], Tensor[(11, 6, 9), float64], Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(300), float64], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), float32], Tensor[(294), int16], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) {
  %485 = cast(meta[relay.Constant][31] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %486 = cast(meta[relay.Constant][32] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %487 = cast(%var_7229, dtype="uint32") /* ty=uint32 */;
  %488 = reshape(%485, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %489 = reshape(%486, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %490 = reshape(%487, newshape=[]) /* ty=uint32 */;
  %491 = @func_3440(%488, %489, %490) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(320), float64], Tensor[(320), float64], Tensor[(6, 6, 6), float64], Tensor[(12, 18), float64], uint32, Tensor[(9, 7, 12), float64], Tensor[(756), float64], Tensor[(13, ?, 11), int8], Tensor[(7, 3, 7), uint32]) */;
  %492 = cast(meta[relay.Constant][33] /* ty=Tensor[(198, 3), int16] */, dtype="int16") /* ty=Tensor[(198, 3), int16] */;
  %493 = cast(meta[relay.Constant][33] /* ty=Tensor[(198, 3), int16] */, dtype="int16") /* ty=Tensor[(198, 3), int16] */;
  %494 = cast(meta[relay.Constant][33] /* ty=Tensor[(198, 3), int16] */, dtype="int16") /* ty=Tensor[(198, 3), int16] */;
  %495 = reshape(%492, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int16] */;
  %496 = reshape(%493, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int16] */;
  %497 = reshape(%494, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int16] */;
  %498 = @func_2083(%495, %496, %497) /* ty=(Tensor[(11, 6, 9), bool], Tensor[(11, 6, 9), uint16], Tensor[(11, 6, 9), bool]) */;
  %499 = %498.2;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(11, 6, 9), float64] */;
  %501 = cast(%var_7251, dtype="int32") /* ty=Tensor[(30), int32] */;
  %502 = cast(meta[relay.Constant][34] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %503 = reshape(%501, newshape=[1, 30]) /* ty=Tensor[(1, 30), int32] */;
  %504 = reshape(%502, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %505 = @func_5576(%503, %504) /* ty=(Tensor[(7, 3, 7), bool], Tensor[(7, 3, 7), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) */;
  %506 = @func_5900() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %507 = cast(%var_7229, dtype="int16") /* ty=int16 */;
  %508 = cast(meta[relay.Constant][35] /* ty=Tensor[(294), int16] */, dtype="int16") /* ty=Tensor[(294), int16] */;
  %509 = reshape(%507, newshape=[]) /* ty=int16 */;
  %510 = reshape(%508, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), int16] */;
  %511 = @func_3396(%509, %510) /* ty=(Tensor[(3, 7, 14), int16], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), float32]) */;
  %512 = cast(meta[relay.Constant][36] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %513 = reshape(%512, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), uint8] */;
  %514 = @func_3562(%513) /* ty=(Tensor[(8, 2, 5), uint8],) */;
  %515 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
  %516 = %491.7;
  %517 = acos(%500) /* ty=Tensor[(11, 6, 9), float64] */;
  %518 = %505.6;
  %519 = %506.0;
  %520 = %511.2;
  %521 = %514.0;
  (%515, %516, meta[relay.Constant][31] /* ty=Tensor[(320), float64] */, meta[relay.Constant][32] /* ty=Tensor[(143), float32] */, %var_7229, meta[relay.Constant][33] /* ty=Tensor[(198, 3), int16] */, %517, %518, %var_7251, meta[relay.Constant][34] /* ty=Tensor[(300), float64] */, %519, %520, meta[relay.Constant][35] /* ty=Tensor[(294), int16] */, %521, meta[relay.Constant][36] /* ty=Tensor[(80), uint8] */)
}

def @func_3396(%var_3345: int16, %var_3346: Tensor[(3, 7, 14), int16]) -> (Tensor[(3, 7, 14), int16], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), float32]) {
  %522 = cast(%var_3345, dtype="int16") /* ty=int16 */;
  %523 = cast(%var_3346, dtype="int16") /* ty=Tensor[(3, 7, 14), int16] */;
  %524 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %525 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
  %526 = cast(%525, dtype="float32") /* ty=Tensor[(7, 3, 7), float32] */;
  %527 = bitwise_or(%522, %523) /* ty=Tensor[(3, 7, 14), int16] */;
  %528 = %524.0;
  %529 = sinh(%526) /* ty=Tensor[(7, 3, 7), float32] */;
  (%527, %528, %529)
}

def @func_7428(%var_7402: Tensor[(8, 1, 6), int8]) -> (Tensor[(7, 3, 7), uint32], Tensor[(8, 2, 6), int8]) {
  %530 = @func_4492() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %531 = cast(%var_7402, dtype="int8") /* ty=Tensor[(8, 1, 6), int8] */;
  %532 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 2, 6), int8] */, dtype="int8") /* ty=Tensor[(8, 2, 6), int8] */;
  %533 = left_shift(%531, %532) /* ty=Tensor[(8, 2, 6), int8] */;
  %534 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 2, 6), int8] */, dtype="int8") /* ty=Tensor[(8, 2, 6), int8] */;
  %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%533, dtype="int8") /* ty=Tensor[(8, 2, 6), int8] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %538 = %530.0;
  %539 = add(%536, %537) /* ty=Tensor[(8, 2, 6), int8] */;
  (%538, %539)
}

def @func_5034() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %540 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %541 = %540.1;
  %542 = @func_3876() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%541, %542)
}

def @func_8934() -> (Tensor[(7, 3, 7), uint32],) {
  %543 = @func_7308() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool]) */;
  %544 = %543.0;
  (%544,)
}

def @func_8036() -> (Tensor[(7, 3, 7), bool],) {
  %545 = @func_7308() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool]) */;
  %546 = %545.1;
  (%546,)
}

def @func_8414(%var_8396: Tensor[(14, 11, 7), bool], %var_8401: uint32, %var_8402: Tensor[(5, 6), int32], %var_8404: Tensor[(320), float64]) -> (Tensor[(14, 11, 7), bool], Tensor[(4, 4, 3), float32], uint32, Tensor[(5, 6), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) {
  %547 = cast(%var_8396, dtype="bool") /* ty=Tensor[(14, 11, 7), bool] */;
  %548 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(14, 11, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 11, 7), bool] */, dtype="bool") /* ty=Tensor[(14, 11, 7), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = cast(%var_8401, dtype="uint32") /* ty=uint32 */;
  %552 = cast(%var_8402, dtype="int32") /* ty=Tensor[(5, 6), int32] */;
  %553 = cast(meta[relay.Constant][39] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %554 = cast(%var_8404, dtype="float64") /* ty=Tensor[(320), float64] */;
  %555 = reshape(%551, newshape=[]) /* ty=uint32 */;
  %556 = reshape(%552, newshape=[5, 6]) /* ty=Tensor[(5, 6), int32] */;
  %557 = reshape(%553, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %558 = reshape(%554, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %559 = @func_3820(%555, %556, %557, %558) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */;
  %560 = cast(%var_8402, dtype="int32") /* ty=Tensor[(5, 6), int32] */;
  %561 = cast(meta[relay.Constant][39] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %562 = reshape(%560, newshape=[1, 30]) /* ty=Tensor[(1, 30), int32] */;
  %563 = reshape(%561, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %564 = @func_5576(%562, %563) /* ty=(Tensor[(7, 3, 7), bool], Tensor[(7, 3, 7), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) */;
  %565 = logical_and(%549, %550) /* ty=Tensor[(14, 11, 7), bool] */;
  %566 = %559.6;
  %567 = %564.1;
  (%565, %566, %var_8401, %var_8402, meta[relay.Constant][39] /* ty=Tensor[(300), float64] */, %var_8404, %567)
}

def @func_4773() -> (Tensor[(7, 3, 7), bool],) {
  %568 = @func_3491() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %569 = %568.0;
  (%569,)
}

def @func_3440(%var_3407: Tensor[(320), float64], %var_3408: Tensor[(143), float32], %var_3424: uint32) -> (Tensor[(7, 3, 7), uint32], Tensor[(320), float64], Tensor[(320), float64], Tensor[(6, 6, 6), float64], Tensor[(12, 18), float64], uint32, Tensor[(9, 7, 12), float64], Tensor[(756), float64], Tensor[(13, ?, 11), int8], Tensor[(7, 3, 7), uint32]) {
  %570 = cast(%var_3407, dtype="float64") /* ty=Tensor[(320), float64] */;
  %571 = cast(%var_3408, dtype="float32") /* ty=Tensor[(143), float32] */;
  %572 = reshape(%570, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %573 = reshape(%571, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %574 = @func_3234(%572, %573) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(13, 1, 11), float32], Tensor[(143), float32]) */;
  %575 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 18), float64] */, dtype="float64") /* ty=Tensor[(12, 18), float64] */;
  %576 = cast(%var_3424, dtype="uint32") /* ty=uint32 */;
  %577 = reshape(%575, newshape=[6, 6, 6]) /* ty=Tensor[(6, 6, 6), float64] */;
  %578 = reshape(%576, newshape=[]) /* ty=uint32 */;
  %579 = @func_1461(%577, %578) /* ty=(Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) */;
  %580 = cast(meta[relay.Constant][41] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %581 = cast(meta[relay.Constant][41] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %582 = cast(meta[relay.Constant][41] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %583 = reshape(%580, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %584 = reshape(%581, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %585 = reshape(%582, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
  %586 = @func_1737(%583, %584, %585) /* ty=(Tensor[(9, 7, 12), float64], Tensor[(9, 7, 12), int8]) */;
  %587 = cast(%var_3408, dtype="float32") /* ty=Tensor[(143), float32] */;
  %588 = reshape(%587, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %589 = @func_2025(%588) /* ty=Tensor[(13, 1, 11), float32] */;
  %590 = cast(%var_3408, dtype="int8") /* ty=Tensor[(143), int8] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="int8") /* ty=Tensor[(13, 1, 11), int8] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %594 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
  %595 = %574.2;
  %596 = %579.0;
  %597 = %586.0;
  %598 = right_shift(%592, %593) /* ty=Tensor[(13, ?, 11), int8] */;
  %599 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%594, %595, %var_3407, %596, meta[relay.Constant][40] /* ty=Tensor[(12, 18), float64] */, %var_3424, %597, meta[relay.Constant][41] /* ty=Tensor[(756), float64] */, %598, %599)
}

def @func_765(%var_745: Tensor[(7, 15, 5), int64], %var_751: uint32) -> (Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) {
  %600 = cast(%var_745, dtype="int64") /* ty=Tensor[(7, 15, 5), int64] */;
  %601 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(7, 15, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 15, 5), int64] */, dtype="int64") /* ty=Tensor[(7, 15, 5), int64] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %604 = cast(%var_751, dtype="uint32") /* ty=uint32 */;
  %605 = cast(meta[relay.Constant][43] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
  %606 = reshape(%604, newshape=[]) /* ty=uint32 */;
  %607 = reshape(%605, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %608 = @func_480(%606, %607) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
  %609 = cast(%var_751, dtype="uint32") /* ty=uint32 */;
  %610 = cast(meta[relay.Constant][43] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
  %611 = reshape(%609, newshape=[]) /* ty=uint32 */;
  %612 = reshape(%610, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %613 = @func_480(%611, %612) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
  %614 = maximum(%602, %603) /* ty=Tensor[(7, 15, 5), int64] */;
  %615 = %608.0;
  %616 = %613.0;
  (%614, %615, %var_751, meta[relay.Constant][43] /* ty=Tensor[(30), int32] */, %616)
}

def @func_1273(%var_1246: Tensor[(14, 5, 7), uint64], %var_1268: Tensor[(14, 5, 7), float32]) -> (Tensor[(14, 5, 7), uint64], Tensor[(14, 5, 7), bool]) {
  %617 = cast(%var_1246, dtype="uint64") /* ty=Tensor[(14, 5, 7), uint64] */;
  %618 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(14, 5, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(meta[relay.Constant][44] /* ty=Tensor[(14, 5, 7), uint64] */, dtype="uint64") /* ty=Tensor[(14, 5, 7), uint64] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %621 = cast(meta[relay.Constant][44] /* ty=Tensor[(14, 5, 7), uint64] */, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %622 = sin(%621) /* ty=Tensor[(14, 5, 7), float32] */;
  %623 = cast(%var_1268, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %627 = bitwise_or(%619, %620) /* ty=Tensor[(14, 5, 7), uint64] */;
  %628 = logical_or(%625, %626) /* ty=Tensor[(14, 5, 7), bool] */;
  (%627, %628)
}

def @func_3026(%var_3021: Tensor[(10, 2, 16), float64]) -> (Tensor[(10, 2, 16), float64],) {
  %629 = cast(%var_3021, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %630 = sigmoid(%629) /* ty=Tensor[(10, 2, 16), float64] */;
  (%630,)
}

def @func_6733() -> (Tensor[(7, 3, 7), uint32],) {
  %631 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%631,)
}

def @func_4087(%var_4078: Tensor[(8, 16, 3), float32]) -> (Tensor[(8, 16, 3), float64],) {
  %632 = cast(%var_4078, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %633 = sinh(%632) /* ty=Tensor[(8, 16, 3), float32] */;
  %634 = cast(%633, dtype="float64") /* ty=Tensor[(8, 16, 3), float64] */;
  %635 = atanh(%634) /* ty=Tensor[(8, 16, 3), float64] */;
  (%635,)
}

def @func_3952() -> Tensor[(7, 3, 7), uint32] {
  %636 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %636.0
}

def @func_5076(%var_5070: Tensor[(5, 8, 7), float32]) -> Tensor[(5, 8, 7), float32] {
  %637 = cast(%var_5070, dtype="float32") /* ty=Tensor[(5, 8, 7), float32] */;
  cos(%637) /* ty=Tensor[(5, 8, 7), float32] */
}

def @func_7915() -> (Tensor[(7, 3, 7), float32], Tensor[(14, 8, 13), float64]) {
  %638 = @func_7513() /* ty=(Tensor[(7, 3, 7), float32],) */;
  %639 = @func_7160() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(13, 1, 11), float64]) */;
  %640 = %638.0;
  %641 = %639.1;
  (%640, %641)
}

def @func_4452() -> Tensor[(13, 1, 11), float64] {
  %642 = @func_3945() /* ty=(Tensor[(13, 1, 11), float64], Tensor[(13, 1, 11), float64]) */;
  %642.1
}

def @func_4708() -> (Tensor[(7, 3, 7), uint32],) {
  %643 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%643,)
}

def @func_3820(%var_3736: uint32, %var_3737: Tensor[(5, 6), int32], %var_3749: Tensor[(150, 2), float64], %var_3773: Tensor[(320), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) {
  %644 = cast(%var_3736, dtype="uint32") /* ty=uint32 */;
  %645 = cast(%var_3737, dtype="int32") /* ty=Tensor[(5, 6), int32] */;
  %646 = reshape(%644, newshape=[]) /* ty=uint32 */;
  %647 = reshape(%645, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %648 = @func_480(%646, %647) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
  %649 = cast(meta[relay.Constant][45] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %650 = cast(%var_3736, dtype="uint32") /* ty=uint32 */;
  %651 = reshape(%649, newshape=[6, 6, 6]) /* ty=Tensor[(6, 6, 6), float64] */;
  %652 = reshape(%650, newshape=[]) /* ty=uint32 */;
  %653 = @func_1461(%651, %652) /* ty=(Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) */;
  %654 = cast(meta[relay.Constant][46] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %655 = reshape(%654, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), float32] */;
  %656 = @func_2601(%655) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */;
  %657 = cast(%var_3773, dtype="float64") /* ty=Tensor[(320), float64] */;
  %658 = reshape(%657, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float64] */;
  %659 = @func_3026(%658) /* ty=(Tensor[(10, 2, 16), float64],) */;
  %660 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %661 = cast(%var_3737, dtype="int32") /* ty=Tensor[(5, 6), int32] */;
  %662 = cast(%var_3749, dtype="float64") /* ty=Tensor[(150, 2), float64] */;
  %663 = reshape(%661, newshape=[1, 15, 2]) /* ty=Tensor[(1, 15, 2), int32] */;
  %664 = reshape(%662, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), float64] */;
  %665 = @func_426(%663, %664) /* ty=(Tensor[(8, 15, 2), bool], Tensor[(10, 15, 2), float64]) */;
  %666 = %665.1;
  %667 = cast(%var_3749, dtype="float64") /* ty=Tensor[(150, 2), float64] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%666, dtype="float64") /* ty=Tensor[(10, 15, 2), float64] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %671 = maximum(%669, %670) /* ty=Tensor[(10, 15, 2), float64] */;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(10, 15, 2), float32] */;
  %673 = sqrt(%672) /* ty=Tensor[(10, 15, 2), float32] */;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(10, 15, 2), float32] */;
  %675 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
  %676 = %648.0;
  %677 = %653.3;
  %678 = %656.4;
  %679 = %659.0;
  %680 = %660.0;
  %681 = atan(%674) /* ty=Tensor[(10, 15, 2), float32] */;
  (%675, %676, %var_3736, %var_3737, %677, meta[relay.Constant][45] /* ty=Tensor[(216), float64] */, %678, meta[relay.Constant][46] /* ty=Tensor[(48), float32] */, %679, %var_3773, %680, %681)
}

def @func_7160() -> (Tensor[(7, 3, 7), uint32], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(13, 1, 11), float64]) {
  %682 = cast(meta[relay.Constant][47] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %683 = reshape(%682, newshape=[1, 1456]) /* ty=Tensor[(1, 1456), float64] */;
  %684 = @func_5818(%683) /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(14, 8, 13), float64], Tensor[(1, 1456), float64], Tensor[(14, 5, 7), bool], Tensor[(490), uint64], Tensor[(7, 3, 7), uint32]) */;
  %685 = cast(meta[relay.Constant][48] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %686 = reshape(%685, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %687 = @func_3945() /* ty=(Tensor[(13, 1, 11), float64], Tensor[(13, 1, 11), float64]) */;
  %688 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
  %689 = %684.1;
  %690 = @func_2745(%686) /* ty=Tensor[(10, 8, 8), float32] */;
  %691 = %687.0;
  (%688, %689, meta[relay.Constant][47] /* ty=Tensor[(1456), float64] */, %690, meta[relay.Constant][48] /* ty=Tensor[(640), float32] */, %691)
}

def @func_4073() -> Tensor[(7, 3, 7), uint8] {
  %692 = @func_4033() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32]) */;
  %692.0
}

def @func_5395() -> (Tensor[(12, 3, 13), float32], Tensor[(12, 3, 13), float32]) {
  %693 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 3, 13), float64] */, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %694 = rsqrt(%693) /* ty=Tensor[(12, 3, 13), float64] */;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
  %696 = cast(%694, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
  %697 = cosh(%695) /* ty=Tensor[(12, 3, 13), float32] */;
  %698 = log10(%696) /* ty=Tensor[(12, 3, 13), float32] */;
  (%697, %698)
}

def @func_4359() -> (Tensor[(7, 3, 7), bool],) {
  %699 = @func_4106() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %700 = %699.0;
  (%700,)
}

def @func_6543(%var_6534: Tensor[(30), int32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint8], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32]) {
  %701 = @func_3615() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %702 = cast(meta[relay.Constant][50] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %703 = cast(%var_6534, dtype="int32") /* ty=Tensor[(30), int32] */;
  %704 = reshape(%702, newshape=[]) /* ty=uint32 */;
  %705 = reshape(%703, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %706 = @func_480(%704, %705) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
  %707 = @func_2930() /* ty=Tensor[(7, 3, 7), uint32] */;
  %708 = %701.0;
  %709 = @func_5488() /* ty=Tensor[(7, 3, 7), uint8] */;
  %710 = %706.0;
  (%707, %708, %709, %710, meta[relay.Constant][50] /* ty=uint32 */, %var_6534)
}

def @func_2745(%var_2742: Tensor[(10, 8, 8), float32]) -> Tensor[(10, 8, 8), float32] {
  %711 = cast(%var_2742, dtype="float32") /* ty=Tensor[(10, 8, 8), float32] */;
  cos(%711) /* ty=Tensor[(10, 8, 8), float32] */
}

def @func_3562(%var_3556: Tensor[(8, 2, 5), uint8]) -> (Tensor[(8, 2, 5), uint8],) {
  %712 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 2, 5), uint8] */, dtype="uint8") /* ty=Tensor[(8, 2, 5), uint8] */;
  %713 = shape_of(%var_3556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%var_3556, dtype="uint8") /* ty=Tensor[(8, 2, 5), uint8] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %716 = add(%714, %715) /* ty=Tensor[(8, 2, 5), uint8] */;
  (%716,)
}

def @func_3274() -> (Tensor[(7, 3, 7), uint32],) {
  %717 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%717,)
}

def @func_4684() -> (Tensor[(7, 3, 7), bool],) {
  %718 = @func_4106() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %719 = %718.0;
  (%719,)
}

def @func_8506(%var_8470: Tensor[(4, 80), float64], %var_8473: Tensor[(1, 1456), float64], %var_8478: Tensor[(48), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(728, 2), float64], Tensor[(1, 1456), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(4, 80), float64], Tensor[(7, 3, 7), uint32]) {
  %720 = @func_8324() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %721 = cast(%var_8470, dtype="float64") /* ty=Tensor[(4, 80), float64] */;
  %722 = reshape(%721, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float64] */;
  %723 = @func_3026(%722) /* ty=(Tensor[(10, 2, 16), float64],) */;
  %724 = cast(%var_8473, dtype="float64") /* ty=Tensor[(1, 1456), float64] */;
  %725 = reshape(%724, newshape=[728, 2]) /* ty=Tensor[(728, 2), float64] */;
  %726 = @func_5882(%725) /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 15, 5), int64], Tensor[(525), int64], uint32, Tensor[(728, 2), float64]) */;
  %727 = cast(%var_8478, dtype="float32") /* ty=Tensor[(48), float32] */;
  %728 = reshape(%727, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), float32] */;
  %729 = @func_2601(%728) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */;
  %730 = cast(%var_8470, dtype="float64") /* ty=Tensor[(4, 80), float64] */;
  %731 = sqrt(%730) /* ty=Tensor[(4, 80), float64] */;
  %732 = cast(%731, dtype="float64") /* ty=Tensor[(4, 80), float64] */;
  %733 = @func_7308() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool]) */;
  %734 = %720.1;
  %735 = %723.0;
  %736 = %726.4;
  %737 = %729.4;
  %738 = cosh(%732) /* ty=Tensor[(4, 80), float64] */;
  %739 = %733.0;
  (%734, %735, %736, %var_8473, %737, %var_8478, %738, %739)
}

def @func_7862(%var_7844: Tensor[(4, 1, 7), float64]) -> Tensor[(4, ?, 7), uint8] {
  %740 = cast(%var_7844, dtype="float64") /* ty=Tensor[(4, 1, 7), float64] */;
  %741 = cosh(%740) /* ty=Tensor[(4, 1, 7), float64] */;
  %742 = cast(%var_7844, dtype="bool") /* ty=Tensor[(4, 1, 7), bool] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="bool") /* ty=Tensor[(4, 1, 7), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %746 = less_equal(%744, %745) /* ty=Tensor[(4, ?, 7), bool] */;
  %747 = cast(%746, dtype="uint8") /* ty=Tensor[(4, ?, 7), uint8] */;
  %748 = shape_of(%var_7844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_7844, dtype="uint8") /* ty=Tensor[(4, 1, 7), uint8] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%749, %750) /* ty=Tensor[(4, ?, 7), uint8] */
}

def @func_7061() -> Tensor[(7, 3, 7), uint8] {
  @func_5488() /* ty=Tensor[(7, 3, 7), uint8] */
}

def @func_4198() -> (Tensor[(7, 3, 7), uint32],) {
  %751 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%751,)
}

def @func_6245() -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint8]) {
  %752 = @func_4950() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %753 = %752.0;
  %754 = @func_5488() /* ty=Tensor[(7, 3, 7), uint8] */;
  (%753, %754)
}

def @func_1461(%var_1449: Tensor[(6, 6, 6), float64], %var_1456: uint32) -> (Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) {
  %755 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 6, 6), float64] */;
  %756 = shape_of(%var_1449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%var_1449, dtype="float64") /* ty=Tensor[(6, 6, 6), float64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %759 = cast(%var_1456, dtype="uint32") /* ty=uint32 */;
  %760 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 6), int32] */, dtype="int32") /* ty=Tensor[(5, 6), int32] */;
  %761 = reshape(%759, newshape=[]) /* ty=uint32 */;
  %762 = reshape(%760, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %763 = @func_480(%761, %762) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
  %764 = mod(%757, %758) /* ty=Tensor[(6, 6, 6), float64] */;
  %765 = %763.2;
  (%764, %765, %var_1456, meta[relay.Constant][53] /* ty=Tensor[(5, 6), int32] */)
}

def @func_2859() -> Tensor[(7, 3, 7), uint32] {
  %766 = cast(meta[relay.Constant][54] /* ty=Tensor[(7, 3, 7), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 7), float32] */;
  %767 = log(%766) /* ty=Tensor[(7, 3, 7), float32] */;
  %768 = cast(meta[relay.Constant][54] /* ty=Tensor[(7, 3, 7), float32] */, dtype="uint32") /* ty=Tensor[(7, 3, 7), uint32] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="uint32") /* ty=Tensor[(7, 3, 7), uint32] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%770, %771) /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_4426() -> (Tensor[(7, 3, 7), uint32],) {
  %772 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %773 = %772.0;
  (%773,)
}

def @func_8454(%var_8430: Tensor[(8, 16, 15), float64], %var_8431: Tensor[(8, 16, 15), float64], %var_8448: Tensor[(252), float64]) -> (Tensor[(8, 16, 15), float64], Tensor[(9, 7, 4), float64], Tensor[(252), float64]) {
  %774 = cast(%var_8431, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
  %775 = shape_of(%var_8430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%var_8430, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %778 = cast(%var_8448, dtype="float64") /* ty=Tensor[(252), float64] */;
  %779 = reshape(%778, newshape=[9, 7, 4]) /* ty=Tensor[(9, 7, 4), float64] */;
  %780 = floor_mod(%776, %777) /* ty=Tensor[(8, 16, 15), float64] */;
  %781 = @func_5207(%779) /* ty=Tensor[(9, 7, 4), float64] */;
  (%780, %781, %var_8448)
}

def @func_8981() -> (Tensor[(80), uint8], Tensor[(7, 3, 7), uint32]) {
  %782 = @func_6650() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) */;
  %783 = @func_5476() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %784 = %782.2;
  %785 = %783.0;
  (%784, %785)
}

def @func_4821() -> Tensor[(7, 3, 7), uint32] {
  @func_3952() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_4106() -> (Tensor[(7, 3, 7), bool],) {
  %786 = @func_3491() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %787 = %786.0;
  (%787,)
}

def @func_5576(%var_5547: Tensor[(1, 30), int32], %var_5548: Tensor[(300), float64]) -> (Tensor[(7, 3, 7), bool], Tensor[(7, 3, 7), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) {
  %788 = @func_4684() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %789 = cast(meta[relay.Constant][55] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %790 = cast(%var_5547, dtype="int32") /* ty=Tensor[(1, 30), int32] */;
  %791 = cast(%var_5548, dtype="float64") /* ty=Tensor[(300), float64] */;
  %792 = cast(meta[relay.Constant][56] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %793 = reshape(%789, newshape=[]) /* ty=uint32 */;
  %794 = reshape(%790, newshape=[5, 6]) /* ty=Tensor[(5, 6), int32] */;
  %795 = reshape(%791, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %796 = reshape(%792, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %797 = @func_3820(%793, %794, %795, %796) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */;
  %798 = @func_4426() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %799 = %788.0;
  %800 = %797.0;
  %801 = %798.0;
  (%799, %800, meta[relay.Constant][55] /* ty=uint32 */, %var_5547, %var_5548, meta[relay.Constant][56] /* ty=Tensor[(320), float64] */, %801)
}

def @main(%var_9029: Tensor[(640), float32], %var_9048: Tensor[(12, 3, 13), float32]) -> (Tensor[(7, 3, 7), bool], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(12, 3, 13), int16], Tensor[(12, 3, 13), float64]) {
  %802 = cast(%var_9029, dtype="float32") /* ty=Tensor[(640), float32] */;
  %803 = reshape(%802, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %804 = @func_5691() /* ty=(Tensor[(12, 3, 13), float32],) */;
  %805 = %804.0;
  %806 = cast(%var_9048, dtype="int16") /* ty=Tensor[(12, 3, 13), int16] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%805, dtype="int16") /* ty=Tensor[(12, 3, 13), int16] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %810 = cast(%805, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %811 = @func_6117() /* ty=Tensor[(7, 3, 7), bool] */;
  %812 = @func_2745(%803) /* ty=Tensor[(10, 8, 8), float32] */;
  %813 = logical_xor(%808, %809) /* ty=Tensor[(12, 3, 13), int16] */;
  %814 = log2(%810) /* ty=Tensor[(12, 3, 13), float64] */;
  (%811, %812, %var_9029, %813, %814)
}

def @func_3709() -> (Tensor[(7, 3, 7), uint32], Tensor[(143), float32], Tensor[(13, 1, 11), float64]) {
  %815 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %816 = cast(meta[relay.Constant][57] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %817 = reshape(%816, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %818 = @func_2025(%817) /* ty=Tensor[(13, 1, 11), float32] */;
  %819 = cast(%818, dtype="float64") /* ty=Tensor[(13, 1, 11), float64] */;
  %820 = tan(%819) /* ty=Tensor[(13, 1, 11), float64] */;
  %821 = cast(%820, dtype="float64") /* ty=Tensor[(13, 1, 11), float64] */;
  %822 = %815.0;
  %823 = log(%821) /* ty=Tensor[(13, 1, 11), float64] */;
  (%822, meta[relay.Constant][57] /* ty=Tensor[(143), float32] */, %823)
}

def @func_5298() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %824 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %825 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %826 = %824.0;
  %827 = %825.0;
  (%826, %827)
}

def @func_2083(%var_2061: Tensor[(11, 6, 9), int16], %var_2062: Tensor[(11, 6, 9), int16], %var_2074: Tensor[(11, 6, 9), int16]) -> (Tensor[(11, 6, 9), bool], Tensor[(11, 6, 9), uint16], Tensor[(11, 6, 9), bool]) {
  %828 = cast(%var_2062, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
  %829 = shape_of(%var_2061, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%var_2061, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %832 = cast(%var_2074, dtype="uint16") /* ty=Tensor[(11, 6, 9), uint16] */;
  %833 = shape_of(%var_2062, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(%var_2062, dtype="uint16") /* ty=Tensor[(11, 6, 9), uint16] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %836 = cast(%var_2062, dtype="float64") /* ty=Tensor[(11, 6, 9), float64] */;
  %837 = sigmoid(%836) /* ty=Tensor[(11, 6, 9), float64] */;
  %838 = cast(%var_2061, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
  %839 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(%837, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %842 = greater_equal(%830, %831) /* ty=Tensor[(11, 6, 9), bool] */;
  %843 = left_shift(%834, %835) /* ty=Tensor[(11, 6, 9), uint16] */;
  %844 = less(%840, %841) /* ty=Tensor[(11, 6, 9), bool] */;
  (%842, %843, %844)
}

def @func_3016() -> (Tensor[(7, 3, 7), uint32],) {
  %845 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%845,)
}

def @func_7675() -> (Tensor[(7, 3, 7), bool],) {
  %846 = @func_4684() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %847 = %846.0;
  (%847,)
}

def @func_8253() -> (Tensor[(7, 3, 7), bool],) {
  %848 = @func_8036() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %849 = %848.0;
  (%849,)
}

def @func_3876() -> Tensor[(7, 3, 7), uint32] {
  @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_7830() -> Tensor[(14, 7, 7), uint8] {
  %850 = @func_5845() /* ty=(Tensor[(14, 7, 7), uint8],) */;
  %850.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7472(%var_7470: Tensor[(128), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(2, 8, 8), bool], Tensor[(128), float64]) {
  @func_7469(%var_7470) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(2, 8, 8), bool], Tensor[(128), float64]) */
}

def @func_2083(%var_2061: Tensor[(11, 6, 9), int16], %var_2062: Tensor[(11, 6, 9), int16], %var_2074: Tensor[(11, 6, 9), int16]) -> (Tensor[(11, 6, 9), bool], Tensor[(11, 6, 9), uint16], Tensor[(11, 6, 9), bool]) {
  %0 = cast(%var_2062, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
  %1 = shape_of(%var_2061, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_2061, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = cast(%var_2074, dtype="uint16") /* ty=Tensor[(11, 6, 9), uint16] */;
  %5 = shape_of(%var_2062, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%var_2062, dtype="uint16") /* ty=Tensor[(11, 6, 9), uint16] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %8 = cast(%var_2062, dtype="float64") /* ty=Tensor[(11, 6, 9), float64] */;
  %9 = sigmoid(%8) /* ty=Tensor[(11, 6, 9), float64] */;
  %10 = cast(%var_2061, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %14 = greater_equal(%2, %3) /* ty=Tensor[(11, 6, 9), bool] */;
  %15 = left_shift(%6, %7) /* ty=Tensor[(11, 6, 9), uint16] */;
  %16 = less(%12, %13) /* ty=Tensor[(11, 6, 9), bool] */;
  (%14, %15, %16)
}

def @func_5396() -> (Tensor[(12, 3, 13), float32], Tensor[(12, 3, 13), float32]) {
  %23 = fn () -> (Tensor[(12, 3, 13), float32], Tensor[(12, 3, 13), float32]) {
    %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 3, 13), float64] */, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
    %18 = rsqrt(%17) /* ty=Tensor[(12, 3, 13), float64] */;
    %19 = cast(%18, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
    %20 = cast(%18, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
    %21 = cosh(%19) /* ty=Tensor[(12, 3, 13), float32] */;
    %22 = log10(%20) /* ty=Tensor[(12, 3, 13), float32] */;
    (%21, %22)
  };
  %23() /* ty=(Tensor[(12, 3, 13), float32], Tensor[(12, 3, 13), float32]) */
}

def @func_4361() -> (Tensor[(7, 3, 7), bool],) {
  @func_4359() /* ty=(Tensor[(7, 3, 7), bool],) */
}

def @func_6546(%var_6544: Tensor[(30), int32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint8], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32]) {
  @func_6543(%var_6544) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint8], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32]) */
}

def @func_7676() -> (Tensor[(7, 3, 7), bool],) {
  %26 = fn () -> (Tensor[(7, 3, 7), bool],) {
    %24 = @func_4684() /* ty=(Tensor[(7, 3, 7), bool],) */;
    %25 = %24.0;
    (%25,)
  };
  %26() /* ty=(Tensor[(7, 3, 7), bool],) */
}

def @func_4035() -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32]) {
  @func_4033() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32]) */
}

def @func_6543(%var_6534: Tensor[(30), int32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint8], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32]) {
  %27 = @func_3615() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %28 = cast(meta[relay.Constant][1] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %29 = cast(%var_6534, dtype="int32") /* ty=Tensor[(30), int32] */;
  %30 = reshape(%28, newshape=[]) /* ty=uint32 */;
  %31 = reshape(%29, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %32 = @func_480(%30, %31) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
  %33 = @func_2930() /* ty=Tensor[(7, 3, 7), uint32] */;
  %34 = %27.0;
  %35 = @func_5488() /* ty=Tensor[(7, 3, 7), uint8] */;
  %36 = %32.0;
  (%33, %34, %35, %36, meta[relay.Constant][1] /* ty=uint32 */, %var_6534)
}

def @func_3877() -> Tensor[(7, 3, 7), uint32] {
  %37 = fn () -> Tensor[(7, 3, 7), uint32] {
    @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */
  };
  %37() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_2982() -> Tensor[(7, 3, 7), uint32] {
  @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_4822() -> Tensor[(7, 3, 7), uint32] {
  %38 = fn () -> Tensor[(7, 3, 7), uint32] {
    @func_3952() /* ty=Tensor[(7, 3, 7), uint32] */
  };
  %38() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_426(%var_378: Tensor[(1, 15, 2), int32], %var_411: Tensor[(10, 15, 2), float64]) -> (Tensor[(8, 15, 2), bool], Tensor[(10, 15, 2), float64]) {
  %39 = cast(%var_378, dtype="bool") /* ty=Tensor[(1, 15, 2), bool] */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(8, 15, 2), bool] */;
  %41 = cast(%var_378, dtype="float64") /* ty=Tensor[(1, 15, 2), float64] */;
  %42 = sigmoid(%41) /* ty=Tensor[(1, 15, 2), float64] */;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(1, 15, 2), float64] */;
  %44 = cast(%var_411, dtype="float64") /* ty=Tensor[(10, 15, 2), float64] */;
  %45 = not_equal(%39, %40) /* ty=Tensor[(8, 15, 2), bool] */;
  %46 = floor_mod(%43, %44) /* ty=Tensor[(10, 15, 2), float64] */;
  (%45, %46)
}

def @func_4880() -> (Tensor[(7, 3, 7), uint32],) {
  %49 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %47 = @func_3016() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %48 = %47.0;
    (%48,)
  };
  %49() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_8038() -> (Tensor[(7, 3, 7), bool],) {
  @func_8036() /* ty=(Tensor[(7, 3, 7), bool],) */
}

def @func_5489() -> Tensor[(7, 3, 7), uint8] {
  %50 = fn () -> Tensor[(7, 3, 7), uint8] {
    @func_4073() /* ty=Tensor[(7, 3, 7), uint8] */
  };
  %50() /* ty=Tensor[(7, 3, 7), uint8] */
}

def @func_2088(%var_2085: Tensor[(11, 6, 9), int16], %var_2086: Tensor[(11, 6, 9), int16], %var_2087: Tensor[(11, 6, 9), int16]) -> (Tensor[(11, 6, 9), bool], Tensor[(11, 6, 9), uint16], Tensor[(11, 6, 9), bool]) {
  @func_2083(%var_2085, %var_2086, %var_2087) /* ty=(Tensor[(11, 6, 9), bool], Tensor[(11, 6, 9), uint16], Tensor[(11, 6, 9), bool]) */
}

def @func_7061() -> Tensor[(7, 3, 7), uint8] {
  @func_5488() /* ty=Tensor[(7, 3, 7), uint8] */
}

def @func_5640() -> (Tensor[(7, 3, 7), uint8],) {
  %52 = fn () -> (Tensor[(7, 3, 7), uint8],) {
    %51 = @func_4073() /* ty=Tensor[(7, 3, 7), uint8] */;
    (%51,)
  };
  %52() /* ty=(Tensor[(7, 3, 7), uint8],) */
}

def @func_8730(%var_8728: Tensor[(12, 3, 13), float32], %var_8729: Tensor[(640), float32]) -> (Tensor[(12, 3, 13), float64], Tensor[(7, 3, 7), uint32], Tensor[(640), int16], Tensor[(7, 3, 7), bool]) {
  @func_8726(%var_8728, %var_8729) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(7, 3, 7), uint32], Tensor[(640), int16], Tensor[(7, 3, 7), bool]) */
}

def @func_8936() -> (Tensor[(7, 3, 7), uint32],) {
  @func_8934() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_4107() -> (Tensor[(7, 3, 7), bool],) {
  %55 = fn () -> (Tensor[(7, 3, 7), bool],) {
    %53 = @func_3491() /* ty=(Tensor[(7, 3, 7), bool],) */;
    %54 = %53.0;
    (%54,)
  };
  %55() /* ty=(Tensor[(7, 3, 7), bool],) */
}

def @func_6231(%var_6229: Tensor[(13, 9, 16), int8], %var_6230: Tensor[(13, 9, 16), int8]) -> (Tensor[(13, 9, 16), bool],) {
  %61 = fn (%var_6223: Tensor[(13, 9, 16), int8], %var_6224: Tensor[(13, 9, 16), int8]) -> (Tensor[(13, 9, 16), bool],) {
    %56 = cast(%var_6224, dtype="bool") /* ty=Tensor[(13, 9, 16), bool] */;
    %57 = shape_of(%var_6223, dtype="int32") /* ty=Tensor[(3), int32] */;
    %58 = cast(%var_6223, dtype="bool") /* ty=Tensor[(13, 9, 16), bool] */;
    %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %60 = equal(%58, %59) /* ty=Tensor[(13, 9, 16), bool] */;
    (%60,)
  };
  %61(%var_6229, %var_6230) /* ty=(Tensor[(13, 9, 16), bool],) */
}

def @func_7645() -> (Tensor[(7, 3, 7), uint32],) {
  %64 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %62 = @func_5476() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %63 = %62.0;
    (%63,)
  };
  %64() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_8325() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %68 = fn () -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
    %65 = @func_4049() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %66 = %65.0;
    %67 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%66, %67)
  };
  %68() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */
}

def @func_4428() -> (Tensor[(7, 3, 7), uint32],) {
  @func_4426() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_8544() -> (Tensor[(7, 3, 7), uint32],) {
  %69 = @func_4841() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %70 = %69.0;
  (%70,)
}

def @func_6118() -> Tensor[(7, 3, 7), bool] {
  %77 = fn () -> Tensor[(7, 3, 7), bool] {
    %71 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
    %72 = %71.0;
    %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 3, 7), uint32] */, dtype="bool") /* ty=Tensor[(7, 3, 7), bool] */;
    %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%72, dtype="bool") /* ty=Tensor[(7, 3, 7), bool] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%75, %76) /* ty=Tensor[(7, 3, 7), bool] */
  };
  %77() /* ty=Tensor[(7, 3, 7), bool] */
}

def @func_821(%var_820: Tensor[(14, 8, 13), float64]) -> Tensor[(14, 8, 13), float64] {
  %79 = fn (%var_815: Tensor[(14, 8, 13), float64]) -> Tensor[(14, 8, 13), float64] {
    %78 = cast(%var_815, dtype="float64") /* ty=Tensor[(14, 8, 13), float64] */;
    sin(%78) /* ty=Tensor[(14, 8, 13), float64] */
  };
  %79(%var_820) /* ty=Tensor[(14, 8, 13), float64] */
}

def @func_7296(%var_7294: uint32, %var_7295: Tensor[(30), int32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(756), float64], Tensor[(320), float64], Tensor[(143), float32], uint32, Tensor[(198, 3), int16], Tensor[(11, 6, 9), float64], Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(300), float64], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), float32], Tensor[(294), int16], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) {
  %117 = fn (%var_7229: uint32, %var_7251: Tensor[(30), int32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(756), float64], Tensor[(320), float64], Tensor[(143), float32], uint32, Tensor[(198, 3), int16], Tensor[(11, 6, 9), float64], Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(300), float64], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), float32], Tensor[(294), int16], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) {
    %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
    %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
    %82 = cast(%var_7229, dtype="uint32") /* ty=uint32 */;
    %83 = reshape(%80, newshape=[320]) /* ty=Tensor[(320), float64] */;
    %84 = reshape(%81, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %85 = reshape(%82, newshape=[]) /* ty=uint32 */;
    %86 = @func_3440(%83, %84, %85) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(320), float64], Tensor[(320), float64], Tensor[(6, 6, 6), float64], Tensor[(12, 18), float64], uint32, Tensor[(9, 7, 12), float64], Tensor[(756), float64], Tensor[(13, ?, 11), int8], Tensor[(7, 3, 7), uint32]) */;
    %87 = cast(meta[relay.Constant][6] /* ty=Tensor[(198, 3), int16] */, dtype="int16") /* ty=Tensor[(198, 3), int16] */;
    %88 = cast(meta[relay.Constant][6] /* ty=Tensor[(198, 3), int16] */, dtype="int16") /* ty=Tensor[(198, 3), int16] */;
    %89 = cast(meta[relay.Constant][6] /* ty=Tensor[(198, 3), int16] */, dtype="int16") /* ty=Tensor[(198, 3), int16] */;
    %90 = reshape(%87, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int16] */;
    %91 = reshape(%88, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int16] */;
    %92 = reshape(%89, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), int16] */;
    %93 = @func_2083(%90, %91, %92) /* ty=(Tensor[(11, 6, 9), bool], Tensor[(11, 6, 9), uint16], Tensor[(11, 6, 9), bool]) */;
    %94 = %93.2;
    %95 = cast(%94, dtype="float64") /* ty=Tensor[(11, 6, 9), float64] */;
    %96 = cast(%var_7251, dtype="int32") /* ty=Tensor[(30), int32] */;
    %97 = cast(meta[relay.Constant][7] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %98 = reshape(%96, newshape=[1, 30]) /* ty=Tensor[(1, 30), int32] */;
    %99 = reshape(%97, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %100 = @func_5576(%98, %99) /* ty=(Tensor[(7, 3, 7), bool], Tensor[(7, 3, 7), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) */;
    %101 = @func_5900() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %102 = cast(%var_7229, dtype="int16") /* ty=int16 */;
    %103 = cast(meta[relay.Constant][8] /* ty=Tensor[(294), int16] */, dtype="int16") /* ty=Tensor[(294), int16] */;
    %104 = reshape(%102, newshape=[]) /* ty=int16 */;
    %105 = reshape(%103, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), int16] */;
    %106 = @func_3396(%104, %105) /* ty=(Tensor[(3, 7, 14), int16], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), float32]) */;
    %107 = cast(meta[relay.Constant][9] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
    %108 = reshape(%107, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), uint8] */;
    %109 = @func_3562(%108) /* ty=(Tensor[(8, 2, 5), uint8],) */;
    %110 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
    %111 = %86.7;
    %112 = acos(%95) /* ty=Tensor[(11, 6, 9), float64] */;
    %113 = %100.6;
    %114 = %101.0;
    %115 = %106.2;
    %116 = %109.0;
    (%110, %111, meta[relay.Constant][4] /* ty=Tensor[(320), float64] */, meta[relay.Constant][5] /* ty=Tensor[(143), float32] */, %var_7229, meta[relay.Constant][6] /* ty=Tensor[(198, 3), int16] */, %112, %113, %var_7251, meta[relay.Constant][7] /* ty=Tensor[(300), float64] */, %114, %115, meta[relay.Constant][8] /* ty=Tensor[(294), int16] */, %116, meta[relay.Constant][9] /* ty=Tensor[(80), uint8] */)
  };
  %117(%var_7294, %var_7295) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(756), float64], Tensor[(320), float64], Tensor[(143), float32], uint32, Tensor[(198, 3), int16], Tensor[(11, 6, 9), float64], Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(300), float64], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), float32], Tensor[(294), int16], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) */
}

def @func_7667(%var_7666: Tensor[(525), int64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(525), int64], uint32, Tensor[(5, 5, 10), uint32]) {
  %132 = fn (%var_7651: Tensor[(525), int64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(525), int64], uint32, Tensor[(5, 5, 10), uint32]) {
    %118 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
    %119 = cast(%var_7651, dtype="int64") /* ty=Tensor[(525), int64] */;
    %120 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %121 = reshape(%119, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), int64] */;
    %122 = reshape(%120, newshape=[]) /* ty=uint32 */;
    %123 = @func_765(%121, %122) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */;
    %124 = cast(%var_7651, dtype="int64") /* ty=Tensor[(525), int64] */;
    %125 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %126 = reshape(%124, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), int64] */;
    %127 = reshape(%125, newshape=[]) /* ty=uint32 */;
    %128 = @func_765(%126, %127) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */;
    %129 = %118.1;
    %130 = %123.3;
    %131 = %128.4;
    (%129, %130, %var_7651, meta[relay.Constant][10] /* ty=uint32 */, %131)
  };
  %132(%var_7666) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(525), int64], uint32, Tensor[(5, 5, 10), uint32]) */
}

def @func_1891(%var_1889: Tensor[(2, 8, 8), float64], %var_1890: Tensor[(2, 8, 8), float64]) -> (Tensor[(2, 8, 8), bool], Tensor[(2, 8, 8), bool], Tensor[(10, 30), float32], Tensor[(216), float64], uint32) {
  %153 = fn (%var_1828: Tensor[(2, 8, 8), float64], %var_1879: Tensor[(2, 8, 8), float64]) -> (Tensor[(2, 8, 8), bool], Tensor[(2, 8, 8), bool], Tensor[(10, 30), float32], Tensor[(216), float64], uint32) {
    %133 = cast(%var_1828, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
    %134 = log10(%133) /* ty=Tensor[(2, 8, 8), float64] */;
    %135 = cast(%134, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
    %136 = sqrt(%135) /* ty=Tensor[(2, 8, 8), float64] */;
    %137 = cast(%134, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
    %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
    %139 = cast(%136, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %141 = cast(%var_1879, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
    %142 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
    %143 = cast(%134, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %145 = cast(meta[relay.Constant][11] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %146 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %147 = reshape(%145, newshape=[6, 6, 6]) /* ty=Tensor[(6, 6, 6), float64] */;
    %148 = reshape(%146, newshape=[]) /* ty=uint32 */;
    %149 = @func_1461(%147, %148) /* ty=(Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) */;
    %150 = less_equal(%139, %140) /* ty=Tensor[(2, 8, 8), bool] */;
    %151 = logical_and(%143, %144) /* ty=Tensor[(2, 8, 8), bool] */;
    %152 = %149.1;
    (%150, %151, %152, meta[relay.Constant][11] /* ty=Tensor[(216), float64] */, meta[relay.Constant][12] /* ty=uint32 */)
  };
  %153(%var_1889, %var_1890) /* ty=(Tensor[(2, 8, 8), bool], Tensor[(2, 8, 8), bool], Tensor[(10, 30), float32], Tensor[(216), float64], uint32) */
}

def @func_3016() -> (Tensor[(7, 3, 7), uint32],) {
  %154 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%154,)
}

def @func_3076() -> Tensor[(7, 3, 7), uint32] {
  @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_3616() -> (Tensor[(7, 3, 7), uint32],) {
  %156 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %155 = @func_2930() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%155,)
  };
  %156() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_5692() -> (Tensor[(12, 3, 13), float32],) {
  %159 = fn () -> (Tensor[(12, 3, 13), float32],) {
    %157 = @func_5395() /* ty=(Tensor[(12, 3, 13), float32], Tensor[(12, 3, 13), float32]) */;
    %158 = %157.1;
    (%158,)
  };
  %159() /* ty=(Tensor[(12, 3, 13), float32],) */
}

def @func_4199() -> (Tensor[(7, 3, 7), uint32],) {
  %161 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %160 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%160,)
  };
  %161() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_4090(%var_4088: Tensor[(8, 16, 3), float32]) -> (Tensor[(8, 16, 3), float64],) {
  @func_4087(%var_4088) /* ty=(Tensor[(8, 16, 3), float64],) */
}

def @func_3855(%var_3853: Tensor[(1456), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(14, 8, 13), float64], Tensor[(1456), float64]) {
  @func_3852(%var_3853) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(14, 8, 13), float64], Tensor[(1456), float64]) */
}

def @func_3711() -> (Tensor[(7, 3, 7), uint32], Tensor[(143), float32], Tensor[(13, 1, 11), float64]) {
  @func_3709() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(143), float32], Tensor[(13, 1, 11), float64]) */
}

def @func_8726(%var_8638: Tensor[(12, 3, 13), float32], %var_8656: Tensor[(640), float32]) -> (Tensor[(12, 3, 13), float64], Tensor[(7, 3, 7), uint32], Tensor[(640), int16], Tensor[(7, 3, 7), bool]) {
  %162 = @func_5395() /* ty=(Tensor[(12, 3, 13), float32], Tensor[(12, 3, 13), float32]) */;
  %163 = %162.1;
  %164 = cast(%var_8638, dtype="bool") /* ty=Tensor[(12, 3, 13), bool] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="bool") /* ty=Tensor[(12, 3, 13), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = greater(%166, %167) /* ty=Tensor[(12, 3, 13), bool] */;
  %169 = cast(%168, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %170 = cast(%var_8656, dtype="float32") /* ty=Tensor[(640), float32] */;
  %171 = reshape(%170, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %172 = @func_2745(%171) /* ty=Tensor[(10, 8, 8), float32] */;
  %173 = cast(%172, dtype="bool") /* ty=Tensor[(10, 8, 8), bool] */;
  %174 = shape_of(%var_8656, dtype="int32") /* ty=Tensor[(1), int32] */;
  %175 = cast(%var_8656, dtype="bool") /* ty=Tensor[(640), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?), bool] */;
  %177 = less_equal(%175, %176) /* ty=Tensor[(640), bool] */;
  %178 = cast(%var_8656, dtype="int16") /* ty=Tensor[(640), int16] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(1), int32] */;
  %180 = cast(%177, dtype="int16") /* ty=Tensor[(640), int16] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?), int16] */;
  %182 = @func_8036() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %183 = asinh(%169) /* ty=Tensor[(12, 3, 13), float64] */;
  %184 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  %185 = left_shift(%180, %181) /* ty=Tensor[(640), int16] */;
  %186 = %182.0;
  (%183, %184, %185, %186)
}

def @func_6188() -> (Tensor[(14, 7, 7), uint8],) {
  @func_6186() /* ty=(Tensor[(14, 7, 7), uint8],) */
}

def @func_3237(%var_3235: Tensor[(320), float64], %var_3236: Tensor[(143), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(13, 1, 11), float32], Tensor[(143), float32]) {
  %196 = fn (%var_3207: Tensor[(320), float64], %var_3229: Tensor[(143), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(13, 1, 11), float32], Tensor[(143), float32]) {
    %187 = @func_3016() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %188 = cast(%var_3207, dtype="float64") /* ty=Tensor[(320), float64] */;
    %189 = reshape(%188, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float64] */;
    %190 = @func_3026(%189) /* ty=(Tensor[(10, 2, 16), float64],) */;
    %191 = cast(%var_3229, dtype="float32") /* ty=Tensor[(143), float32] */;
    %192 = reshape(%191, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
    %193 = %187.0;
    %194 = %190.0;
    %195 = @func_2025(%192) /* ty=Tensor[(13, 1, 11), float32] */;
    (%193, %194, %var_3207, %195, %var_3229)
  };
  %196(%var_3235, %var_3236) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(13, 1, 11), float32], Tensor[(143), float32]) */
}

def @func_4050() -> (Tensor[(7, 3, 7), uint32],) {
  %198 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %197 = @func_3952() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%197,)
  };
  %198() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_3491() -> (Tensor[(7, 3, 7), bool],) {
  %199 = @func_2930() /* ty=Tensor[(7, 3, 7), uint32] */;
  %200 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 3, 7), uint32] */, dtype="bool") /* ty=Tensor[(7, 3, 7), bool] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="bool") /* ty=Tensor[(7, 3, 7), bool] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %204 = not_equal(%202, %203) /* ty=Tensor[(7, 3, 7), bool] */;
  (%204,)
}

def @func_7431(%var_7429: Tensor[(8, 1, 6), int8]) -> (Tensor[(7, 3, 7), uint32], Tensor[(8, 2, 6), int8]) {
  @func_7428(%var_7429) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(8, 2, 6), int8]) */
}

def @func_6247() -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint8]) {
  @func_6245() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint8]) */
}

def @func_3160() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */
}

def @func_4685() -> (Tensor[(7, 3, 7), bool],) {
  %207 = fn () -> (Tensor[(7, 3, 7), bool],) {
    %205 = @func_4106() /* ty=(Tensor[(7, 3, 7), bool],) */;
    %206 = %205.0;
    (%206,)
  };
  %207() /* ty=(Tensor[(7, 3, 7), bool],) */
}

def @func_5076(%var_5070: Tensor[(5, 8, 7), float32]) -> Tensor[(5, 8, 7), float32] {
  %208 = cast(%var_5070, dtype="float32") /* ty=Tensor[(5, 8, 7), float32] */;
  cos(%208) /* ty=Tensor[(5, 8, 7), float32] */
}

def @func_3396(%var_3345: int16, %var_3346: Tensor[(3, 7, 14), int16]) -> (Tensor[(3, 7, 14), int16], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), float32]) {
  %209 = cast(%var_3345, dtype="int16") /* ty=int16 */;
  %210 = cast(%var_3346, dtype="int16") /* ty=Tensor[(3, 7, 14), int16] */;
  %211 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %212 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
  %213 = cast(%212, dtype="float32") /* ty=Tensor[(7, 3, 7), float32] */;
  %214 = bitwise_or(%209, %210) /* ty=Tensor[(3, 7, 14), int16] */;
  %215 = %211.0;
  %216 = sinh(%213) /* ty=Tensor[(7, 3, 7), float32] */;
  (%214, %215, %216)
}

def @func_7428(%var_7402: Tensor[(8, 1, 6), int8]) -> (Tensor[(7, 3, 7), uint32], Tensor[(8, 2, 6), int8]) {
  %217 = @func_4492() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %218 = cast(%var_7402, dtype="int8") /* ty=Tensor[(8, 1, 6), int8] */;
  %219 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 2, 6), int8] */, dtype="int8") /* ty=Tensor[(8, 2, 6), int8] */;
  %220 = left_shift(%218, %219) /* ty=Tensor[(8, 2, 6), int8] */;
  %221 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 2, 6), int8] */, dtype="int8") /* ty=Tensor[(8, 2, 6), int8] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="int8") /* ty=Tensor[(8, 2, 6), int8] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %225 = %217.0;
  %226 = add(%223, %224) /* ty=Tensor[(8, 2, 6), int8] */;
  (%225, %226)
}

def @func_8934() -> (Tensor[(7, 3, 7), uint32],) {
  %227 = @func_7308() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool]) */;
  %228 = %227.0;
  (%228,)
}

def @func_3028(%var_3027: Tensor[(10, 2, 16), float64]) -> (Tensor[(10, 2, 16), float64],) {
  %231 = fn (%var_3021: Tensor[(10, 2, 16), float64]) -> (Tensor[(10, 2, 16), float64],) {
    %229 = cast(%var_3021, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
    %230 = sigmoid(%229) /* ty=Tensor[(10, 2, 16), float64] */;
    (%230,)
  };
  %231(%var_3027) /* ty=(Tensor[(10, 2, 16), float64],) */
}

def @func_7063() -> Tensor[(7, 3, 7), uint8] {
  @func_7061() /* ty=Tensor[(7, 3, 7), uint8] */
}

def @func_6148() -> (Tensor[(7, 3, 7), uint32],) {
  %232 = @func_4198() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %233 = %232.0;
  (%233,)
}

def @func_4073() -> Tensor[(7, 3, 7), uint8] {
  %234 = @func_4033() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32]) */;
  %234.0
}

def @func_3444(%var_3441: Tensor[(320), float64], %var_3442: Tensor[(143), float32], %var_3443: uint32) -> (Tensor[(7, 3, 7), uint32], Tensor[(320), float64], Tensor[(320), float64], Tensor[(6, 6, 6), float64], Tensor[(12, 18), float64], uint32, Tensor[(9, 7, 12), float64], Tensor[(756), float64], Tensor[(13, ?, 11), int8], Tensor[(7, 3, 7), uint32]) {
  %265 = fn (%var_3407: Tensor[(320), float64], %var_3408: Tensor[(143), float32], %var_3424: uint32) -> (Tensor[(7, 3, 7), uint32], Tensor[(320), float64], Tensor[(320), float64], Tensor[(6, 6, 6), float64], Tensor[(12, 18), float64], uint32, Tensor[(9, 7, 12), float64], Tensor[(756), float64], Tensor[(13, ?, 11), int8], Tensor[(7, 3, 7), uint32]) {
    %235 = cast(%var_3407, dtype="float64") /* ty=Tensor[(320), float64] */;
    %236 = cast(%var_3408, dtype="float32") /* ty=Tensor[(143), float32] */;
    %237 = reshape(%235, newshape=[320]) /* ty=Tensor[(320), float64] */;
    %238 = reshape(%236, newshape=[143]) /* ty=Tensor[(143), float32] */;
    %239 = @func_3234(%237, %238) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(13, 1, 11), float32], Tensor[(143), float32]) */;
    %240 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 18), float64] */, dtype="float64") /* ty=Tensor[(12, 18), float64] */;
    %241 = cast(%var_3424, dtype="uint32") /* ty=uint32 */;
    %242 = reshape(%240, newshape=[6, 6, 6]) /* ty=Tensor[(6, 6, 6), float64] */;
    %243 = reshape(%241, newshape=[]) /* ty=uint32 */;
    %244 = @func_1461(%242, %243) /* ty=(Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) */;
    %245 = cast(meta[relay.Constant][16] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
    %246 = cast(meta[relay.Constant][16] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
    %247 = cast(meta[relay.Constant][16] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
    %248 = reshape(%245, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
    %249 = reshape(%246, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
    %250 = reshape(%247, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), float64] */;
    %251 = @func_1737(%248, %249, %250) /* ty=(Tensor[(9, 7, 12), float64], Tensor[(9, 7, 12), int8]) */;
    %252 = cast(%var_3408, dtype="float32") /* ty=Tensor[(143), float32] */;
    %253 = reshape(%252, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
    %254 = @func_2025(%253) /* ty=Tensor[(13, 1, 11), float32] */;
    %255 = cast(%var_3408, dtype="int8") /* ty=Tensor[(143), int8] */;
    %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
    %257 = cast(%254, dtype="int8") /* ty=Tensor[(13, 1, 11), int8] */;
    %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %259 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
    %260 = %239.2;
    %261 = %244.0;
    %262 = %251.0;
    %263 = right_shift(%257, %258) /* ty=Tensor[(13, ?, 11), int8] */;
    %264 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%259, %260, %var_3407, %261, meta[relay.Constant][15] /* ty=Tensor[(12, 18), float64] */, %var_3424, %262, meta[relay.Constant][16] /* ty=Tensor[(756), float64] */, %263, %264)
  };
  %265(%var_3441, %var_3442, %var_3443) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(320), float64], Tensor[(320), float64], Tensor[(6, 6, 6), float64], Tensor[(12, 18), float64], uint32, Tensor[(9, 7, 12), float64], Tensor[(756), float64], Tensor[(13, ?, 11), int8], Tensor[(7, 3, 7), uint32]) */
}

def @func_4398() -> Tensor[(7, 3, 7), uint8] {
  %266 = fn () -> Tensor[(7, 3, 7), uint8] {
    @func_4073() /* ty=Tensor[(7, 3, 7), uint8] */
  };
  %266() /* ty=Tensor[(7, 3, 7), uint8] */
}

def @func_5260(%var_5259: Tensor[(20, 4), uint8]) -> (Tensor[(7, 3, 7), bool], Tensor[(8, 2, 5), uint8], Tensor[(20, 4), uint8], Tensor[(7, 3, 7), uint32]) {
  %275 = fn (%var_5226: Tensor[(20, 4), uint8]) -> (Tensor[(7, 3, 7), bool], Tensor[(8, 2, 5), uint8], Tensor[(20, 4), uint8], Tensor[(7, 3, 7), uint32]) {
    %267 = @func_3491() /* ty=(Tensor[(7, 3, 7), bool],) */;
    %268 = cast(%var_5226, dtype="uint8") /* ty=Tensor[(20, 4), uint8] */;
    %269 = reshape(%268, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), uint8] */;
    %270 = @func_3562(%269) /* ty=(Tensor[(8, 2, 5), uint8],) */;
    %271 = @func_5034() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
    %272 = %267.0;
    %273 = %270.0;
    %274 = %271.0;
    (%272, %273, %var_5226, %274)
  };
  %275(%var_5259) /* ty=(Tensor[(7, 3, 7), bool], Tensor[(8, 2, 5), uint8], Tensor[(20, 4), uint8], Tensor[(7, 3, 7), uint32]) */
}

def @func_7034(%var_7033: Tensor[(12, 3, 13), float32]) -> Tensor[(12, 3, 13), int64] {
  %282 = fn (%var_7027: Tensor[(12, 3, 13), float32]) -> Tensor[(12, 3, 13), int64] {
    %276 = @func_5395() /* ty=(Tensor[(12, 3, 13), float32], Tensor[(12, 3, 13), float32]) */;
    %277 = %276.0;
    %278 = cast(%var_7027, dtype="int64") /* ty=Tensor[(12, 3, 13), int64] */;
    %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%277, dtype="int64") /* ty=Tensor[(12, 3, 13), int64] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_and(%280, %281) /* ty=Tensor[(12, 3, 13), int64] */
  };
  %282(%var_7033) /* ty=Tensor[(12, 3, 13), int64] */
}

def @func_3275() -> (Tensor[(7, 3, 7), uint32],) {
  %284 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %283 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%283,)
  };
  %284() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_8019() -> Tensor[(7, 3, 7), uint32] {
  %286 = fn () -> Tensor[(7, 3, 7), uint32] {
    %285 = @func_5298() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
    %285.0
  };
  %286() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_8546() -> (Tensor[(7, 3, 7), uint32],) {
  @func_8544() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_6651() -> (Tensor[(7, 3, 7), uint8], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) {
  %293 = fn () -> (Tensor[(7, 3, 7), uint8], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) {
    %287 = @func_6245() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint8]) */;
    %288 = cast(meta[relay.Constant][17] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
    %289 = reshape(%288, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), uint8] */;
    %290 = @func_3562(%289) /* ty=(Tensor[(8, 2, 5), uint8],) */;
    %291 = %287.0;
    %292 = %290.0;
    (%291, %292, meta[relay.Constant][17] /* ty=Tensor[(80), uint8] */)
  };
  %293() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) */
}

def @func_7111(%var_7109: Tensor[(16, 13, 11), float32]) -> Tensor[(16, 13, 11), float32] {
  @func_7108(%var_7109) /* ty=Tensor[(16, 13, 11), float32] */
}

def @func_5580(%var_5578: Tensor[(1, 30), int32], %var_5579: Tensor[(300), float64]) -> (Tensor[(7, 3, 7), bool], Tensor[(7, 3, 7), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) {
  @func_5576(%var_5578, %var_5579) /* ty=(Tensor[(7, 3, 7), bool], Tensor[(7, 3, 7), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) */
}

def @func_7825(%var_7823: Tensor[(16, 15, 13), float64], %var_7824: Tensor[(16, 15, 13), float64]) -> (Tensor[(16, 15, 13), uint16], Tensor[(16, 15, 13), float32]) {
  %306 = fn (%var_7793: Tensor[(16, 15, 13), float64], %var_7804: Tensor[(16, 15, 13), float64]) -> (Tensor[(16, 15, 13), uint16], Tensor[(16, 15, 13), float32]) {
    %294 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 13), float64] */;
    %295 = shape_of(%var_7793, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%var_7793, dtype="float64") /* ty=Tensor[(16, 15, 13), float64] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %298 = floor_divide(%296, %297) /* ty=Tensor[(16, 15, 13), float64] */;
    %299 = cast(%var_7804, dtype="uint16") /* ty=Tensor[(16, 15, 13), uint16] */;
    %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%298, dtype="uint16") /* ty=Tensor[(16, 15, 13), uint16] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %303 = cast(%var_7793, dtype="float32") /* ty=Tensor[(16, 15, 13), float32] */;
    %304 = subtract(%301, %302) /* ty=Tensor[(16, 15, 13), uint16] */;
    %305 = cosh(%303) /* ty=Tensor[(16, 15, 13), float32] */;
    (%304, %305)
  };
  %306(%var_7823, %var_7824) /* ty=(Tensor[(16, 15, 13), uint16], Tensor[(16, 15, 13), float32]) */
}

def @func_480(%var_450: uint32, %var_461: Tensor[(30), int32]) -> (Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) {
  %307 = cast(%var_450, dtype="uint32") /* ty=uint32 */;
  %308 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 5, 10), uint32] */, dtype="uint32") /* ty=Tensor[(5, 5, 10), uint32] */;
  %309 = cast(%var_461, dtype="int32") /* ty=Tensor[(30), int32] */;
  %310 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 30), float64] */, dtype="float64") /* ty=Tensor[(10, 30), float64] */;
  %311 = reshape(%309, newshape=[1, 15, 2]) /* ty=Tensor[(1, 15, 2), int32] */;
  %312 = reshape(%310, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), float64] */;
  %313 = @func_426(%311, %312) /* ty=(Tensor[(8, 15, 2), bool], Tensor[(10, 15, 2), float64]) */;
  %314 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 30), float64] */, dtype="float32") /* ty=Tensor[(10, 30), float32] */;
  %315 = cast(%var_461, dtype="float32") /* ty=Tensor[(30), float32] */;
  %316 = logical_xor(%307, %308) /* ty=Tensor[(5, 5, 10), uint32] */;
  %317 = %313.0;
  %318 = floor_divide(%314, %315) /* ty=Tensor[(10, 30), float32] */;
  (%316, %317, %318)
}

def @func_5519(%var_5518: Tensor[(13, 4, 11), float64]) -> (Tensor[(13, 4, 11), int32], Tensor[(7, 3, 7), uint32]) {
  %324 = fn (%var_5506: Tensor[(13, 4, 11), float64]) -> (Tensor[(13, 4, 11), int32], Tensor[(7, 3, 7), uint32]) {
    %319 = @func_4452() /* ty=Tensor[(13, 1, 11), float64] */;
    %320 = cast(%319, dtype="int32") /* ty=Tensor[(13, 1, 11), int32] */;
    %321 = cast(%var_5506, dtype="int32") /* ty=Tensor[(13, 4, 11), int32] */;
    %322 = logical_xor(%320, %321) /* ty=Tensor[(13, 4, 11), int32] */;
    %323 = @func_4821() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%322, %323)
  };
  %324(%var_5518) /* ty=(Tensor[(13, 4, 11), int32], Tensor[(7, 3, 7), uint32]) */
}

def @func_6150() -> (Tensor[(7, 3, 7), uint32],) {
  @func_6148() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_4454() -> Tensor[(13, 1, 11), float64] {
  @func_4452() /* ty=Tensor[(13, 1, 11), float64] */
}

def @func_4452() -> Tensor[(13, 1, 11), float64] {
  %325 = @func_3945() /* ty=(Tensor[(13, 1, 11), float64], Tensor[(13, 1, 11), float64]) */;
  %325.1
}

def @func_5477() -> (Tensor[(7, 3, 7), uint32],) {
  %327 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %326 = @func_2930() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%326,)
  };
  %327() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_1465(%var_1463: Tensor[(6, 6, 6), float64], %var_1464: uint32) -> (Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) {
  @func_1461(%var_1463, %var_1464) /* ty=(Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) */
}

def @func_2860() -> Tensor[(7, 3, 7), uint32] {
  %334 = fn () -> Tensor[(7, 3, 7), uint32] {
    %328 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 3, 7), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 7), float32] */;
    %329 = log(%328) /* ty=Tensor[(7, 3, 7), float32] */;
    %330 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 3, 7), float32] */, dtype="uint32") /* ty=Tensor[(7, 3, 7), uint32] */;
    %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
    %332 = cast(%329, dtype="uint32") /* ty=Tensor[(7, 3, 7), uint32] */;
    %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    right_shift(%332, %333) /* ty=Tensor[(7, 3, 7), uint32] */
  };
  %334() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_8510(%var_8507: Tensor[(4, 80), float64], %var_8508: Tensor[(1, 1456), float64], %var_8509: Tensor[(48), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(728, 2), float64], Tensor[(1, 1456), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(4, 80), float64], Tensor[(7, 3, 7), uint32]) {
  %355 = fn (%var_8470: Tensor[(4, 80), float64], %var_8473: Tensor[(1, 1456), float64], %var_8478: Tensor[(48), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(728, 2), float64], Tensor[(1, 1456), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(4, 80), float64], Tensor[(7, 3, 7), uint32]) {
    %335 = @func_8324() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
    %336 = cast(%var_8470, dtype="float64") /* ty=Tensor[(4, 80), float64] */;
    %337 = reshape(%336, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float64] */;
    %338 = @func_3026(%337) /* ty=(Tensor[(10, 2, 16), float64],) */;
    %339 = cast(%var_8473, dtype="float64") /* ty=Tensor[(1, 1456), float64] */;
    %340 = reshape(%339, newshape=[728, 2]) /* ty=Tensor[(728, 2), float64] */;
    %341 = @func_5882(%340) /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 15, 5), int64], Tensor[(525), int64], uint32, Tensor[(728, 2), float64]) */;
    %342 = cast(%var_8478, dtype="float32") /* ty=Tensor[(48), float32] */;
    %343 = reshape(%342, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), float32] */;
    %344 = @func_2601(%343) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */;
    %345 = cast(%var_8470, dtype="float64") /* ty=Tensor[(4, 80), float64] */;
    %346 = sqrt(%345) /* ty=Tensor[(4, 80), float64] */;
    %347 = cast(%346, dtype="float64") /* ty=Tensor[(4, 80), float64] */;
    %348 = @func_7308() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool]) */;
    %349 = %335.1;
    %350 = %338.0;
    %351 = %341.4;
    %352 = %344.4;
    %353 = cosh(%347) /* ty=Tensor[(4, 80), float64] */;
    %354 = %348.0;
    (%349, %350, %351, %var_8473, %352, %var_8478, %353, %354)
  };
  %355(%var_8507, %var_8508, %var_8509) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(728, 2), float64], Tensor[(1, 1456), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(4, 80), float64], Tensor[(7, 3, 7), uint32]) */
}

def @func_3564(%var_3563: Tensor[(8, 2, 5), uint8]) -> (Tensor[(8, 2, 5), uint8],) {
  %361 = fn (%var_3556: Tensor[(8, 2, 5), uint8]) -> (Tensor[(8, 2, 5), uint8],) {
    %356 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 2, 5), uint8] */, dtype="uint8") /* ty=Tensor[(8, 2, 5), uint8] */;
    %357 = shape_of(%var_3556, dtype="int32") /* ty=Tensor[(3), int32] */;
    %358 = cast(%var_3556, dtype="uint8") /* ty=Tensor[(8, 2, 5), uint8] */;
    %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %360 = add(%358, %359) /* ty=Tensor[(8, 2, 5), uint8] */;
    (%360,)
  };
  %361(%var_3563) /* ty=(Tensor[(8, 2, 5), uint8],) */
}

def @func_6735() -> (Tensor[(7, 3, 7), uint32],) {
  @func_6733() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_6891(%var_6890: Tensor[(384), float32]) -> (Tensor[(7, 15, 5), int64], Tensor[(525), int64], Tensor[(12, 3, 13), int8], Tensor[(8, 16, 3), float64], Tensor[(384), float32]) {
  %379 = fn (%var_6887: Tensor[(384), float32]) -> (Tensor[(7, 15, 5), int64], Tensor[(525), int64], Tensor[(12, 3, 13), int8], Tensor[(8, 16, 3), float64], Tensor[(384), float32]) {
    %362 = cast(meta[relay.Constant][23] /* ty=Tensor[(525), int64] */, dtype="int64") /* ty=Tensor[(525), int64] */;
    %363 = cast(meta[relay.Constant][24] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %364 = reshape(%362, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), int64] */;
    %365 = reshape(%363, newshape=[]) /* ty=uint32 */;
    %366 = @func_765(%364, %365) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */;
    %367 = @func_5691() /* ty=(Tensor[(12, 3, 13), float32],) */;
    %368 = %367.0;
    %369 = cast(%368, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
    %370 = log(%369) /* ty=Tensor[(12, 3, 13), float64] */;
    %371 = cast(meta[relay.Constant][24] /* ty=uint32 */, dtype="int8") /* ty=int8 */;
    %372 = cast(%370, dtype="int8") /* ty=Tensor[(12, 3, 13), int8] */;
    %373 = cast(%var_6887, dtype="float32") /* ty=Tensor[(384), float32] */;
    %374 = reshape(%373, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), float32] */;
    %375 = @func_4087(%374) /* ty=(Tensor[(8, 16, 3), float64],) */;
    %376 = %366.0;
    %377 = maximum(%371, %372) /* ty=Tensor[(12, 3, 13), int8] */;
    %378 = %375.0;
    (%376, meta[relay.Constant][23] /* ty=Tensor[(525), int64] */, %377, %378, %var_6887)
  };
  %379(%var_6890) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(525), int64], Tensor[(12, 3, 13), int8], Tensor[(8, 16, 3), float64], Tensor[(384), float32]) */
}

def @func_3820(%var_3736: uint32, %var_3737: Tensor[(5, 6), int32], %var_3749: Tensor[(150, 2), float64], %var_3773: Tensor[(320), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) {
  %380 = cast(%var_3736, dtype="uint32") /* ty=uint32 */;
  %381 = cast(%var_3737, dtype="int32") /* ty=Tensor[(5, 6), int32] */;
  %382 = reshape(%380, newshape=[]) /* ty=uint32 */;
  %383 = reshape(%381, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %384 = @func_480(%382, %383) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
  %385 = cast(meta[relay.Constant][25] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %386 = cast(%var_3736, dtype="uint32") /* ty=uint32 */;
  %387 = reshape(%385, newshape=[6, 6, 6]) /* ty=Tensor[(6, 6, 6), float64] */;
  %388 = reshape(%386, newshape=[]) /* ty=uint32 */;
  %389 = @func_1461(%387, %388) /* ty=(Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) */;
  %390 = cast(meta[relay.Constant][26] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %391 = reshape(%390, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), float32] */;
  %392 = @func_2601(%391) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */;
  %393 = cast(%var_3773, dtype="float64") /* ty=Tensor[(320), float64] */;
  %394 = reshape(%393, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float64] */;
  %395 = @func_3026(%394) /* ty=(Tensor[(10, 2, 16), float64],) */;
  %396 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %397 = cast(%var_3737, dtype="int32") /* ty=Tensor[(5, 6), int32] */;
  %398 = cast(%var_3749, dtype="float64") /* ty=Tensor[(150, 2), float64] */;
  %399 = reshape(%397, newshape=[1, 15, 2]) /* ty=Tensor[(1, 15, 2), int32] */;
  %400 = reshape(%398, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), float64] */;
  %401 = @func_426(%399, %400) /* ty=(Tensor[(8, 15, 2), bool], Tensor[(10, 15, 2), float64]) */;
  %402 = %401.1;
  %403 = cast(%var_3749, dtype="float64") /* ty=Tensor[(150, 2), float64] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="float64") /* ty=Tensor[(10, 15, 2), float64] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %407 = maximum(%405, %406) /* ty=Tensor[(10, 15, 2), float64] */;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(10, 15, 2), float32] */;
  %409 = sqrt(%408) /* ty=Tensor[(10, 15, 2), float32] */;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(10, 15, 2), float32] */;
  %411 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
  %412 = %384.0;
  %413 = %389.3;
  %414 = %392.4;
  %415 = %395.0;
  %416 = %396.0;
  %417 = atan(%410) /* ty=Tensor[(10, 15, 2), float32] */;
  (%411, %412, %var_3736, %var_3737, %413, meta[relay.Constant][25] /* ty=Tensor[(216), float64] */, %414, meta[relay.Constant][26] /* ty=Tensor[(48), float32] */, %415, %var_3773, %416, %417)
}

def @func_4318(%var_4317: Tensor[(48), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(10, 3), int32], Tensor[(48), float32]) {
  %424 = fn (%var_4302: Tensor[(48), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(10, 3), int32], Tensor[(48), float32]) {
    %418 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %419 = cast(%var_4302, dtype="float32") /* ty=Tensor[(48), float32] */;
    %420 = reshape(%419, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), float32] */;
    %421 = @func_2601(%420) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */;
    %422 = %418.0;
    %423 = %421.2;
    (%422, %423, %var_4302)
  };
  %424(%var_4317) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(10, 3), int32], Tensor[(48), float32]) */
}

def @func_3952() -> Tensor[(7, 3, 7), uint32] {
  %425 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %425.0
}

def @func_4709() -> (Tensor[(7, 3, 7), uint32],) {
  %427 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %426 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%426,)
  };
  %427() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_3947() -> (Tensor[(13, 1, 11), float64], Tensor[(13, 1, 11), float64]) {
  @func_3945() /* ty=(Tensor[(13, 1, 11), float64], Tensor[(13, 1, 11), float64]) */
}

def @func_1438(%var_1435: Tensor[(1456), float64], %var_1436: Tensor[(525, 1), int64], %var_1437: uint32) -> (Tensor[(7, 7, 2), int64], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(7, 15, 5), int64], Tensor[(525, 1), int64], uint32, Tensor[(5, 5, 10), uint32]) {
  @func_1433(%var_1435, %var_1436, %var_1437) /* ty=(Tensor[(7, 7, 2), int64], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(7, 15, 5), int64], Tensor[(525, 1), int64], uint32, Tensor[(5, 5, 10), uint32]) */
}

def @func_5207(%var_5200: Tensor[(9, 7, 4), float64]) -> Tensor[(9, 7, 4), float64] {
  %428 = cast(%var_5200, dtype="float64") /* ty=Tensor[(9, 7, 4), float64] */;
  sigmoid(%428) /* ty=Tensor[(9, 7, 4), float64] */
}

def @func_4493() -> (Tensor[(7, 3, 7), uint32],) {
  %431 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %429 = @func_3615() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %430 = %429.0;
    (%430,)
  };
  %431() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_1273(%var_1246: Tensor[(14, 5, 7), uint64], %var_1268: Tensor[(14, 5, 7), float32]) -> (Tensor[(14, 5, 7), uint64], Tensor[(14, 5, 7), bool]) {
  %432 = cast(%var_1246, dtype="uint64") /* ty=Tensor[(14, 5, 7), uint64] */;
  %433 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(14, 5, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 5, 7), uint64] */, dtype="uint64") /* ty=Tensor[(14, 5, 7), uint64] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %436 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 5, 7), uint64] */, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %437 = sin(%436) /* ty=Tensor[(14, 5, 7), float32] */;
  %438 = cast(%var_1268, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %442 = bitwise_or(%434, %435) /* ty=Tensor[(14, 5, 7), uint64] */;
  %443 = logical_or(%440, %441) /* ty=Tensor[(14, 5, 7), bool] */;
  (%442, %443)
}

def @func_5136(%var_5134: bool, %var_5135: Tensor[(16, 7, 9), bool]) -> (Tensor[(16, 7, 9), bool],) {
  @func_5132(%var_5134, %var_5135) /* ty=(Tensor[(16, 7, 9), bool],) */
}

def @func_6060() -> (Tensor[(7, 3, 7), uint8], Tensor[(10, 3), int32], Tensor[(48), float32]) {
  %449 = fn () -> (Tensor[(7, 3, 7), uint8], Tensor[(10, 3), int32], Tensor[(48), float32]) {
    %444 = cast(meta[relay.Constant][28] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %445 = reshape(%444, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), float32] */;
    %446 = @func_2601(%445) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */;
    %447 = @func_4397() /* ty=Tensor[(7, 3, 7), uint8] */;
    %448 = %446.2;
    (%447, %448, meta[relay.Constant][28] /* ty=Tensor[(48), float32] */)
  };
  %449() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(10, 3), int32], Tensor[(48), float32]) */
}

def @func_7865(%var_7863: Tensor[(4, 1, 7), float64]) -> Tensor[(4, ?, 7), uint8] {
  @func_7862(%var_7863) /* ty=Tensor[(4, ?, 7), uint8] */
}

def @func_2603(%var_2602: Tensor[(4, 4, 3), float32]) -> (Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) {
  %465 = fn (%var_2580: Tensor[(4, 4, 3), float32]) -> (Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) {
    %450 = cast(meta[relay.Constant][29] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %451 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 3), int32] */, dtype="int32") /* ty=Tensor[(10, 3), int32] */;
    %452 = reshape(%450, newshape=[]) /* ty=uint32 */;
    %453 = reshape(%451, newshape=[30]) /* ty=Tensor[(30), int32] */;
    %454 = @func_480(%452, %453) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
    %455 = cast(%var_2580, dtype="float32") /* ty=Tensor[(4, 4, 3), float32] */;
    %456 = sigmoid(%455) /* ty=Tensor[(4, 4, 3), float32] */;
    %457 = cast(%var_2580, dtype="float64") /* ty=Tensor[(4, 4, 3), float64] */;
    %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
    %459 = cast(%456, dtype="float64") /* ty=Tensor[(4, 4, 3), float64] */;
    %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %461 = cast(%456, dtype="float32") /* ty=Tensor[(4, 4, 3), float32] */;
    %462 = %454.2;
    %463 = floor_divide(%459, %460) /* ty=Tensor[(4, 4, 3), float64] */;
    %464 = asinh(%461) /* ty=Tensor[(4, 4, 3), float32] */;
    (%462, meta[relay.Constant][29] /* ty=uint32 */, meta[relay.Constant][30] /* ty=Tensor[(10, 3), int32] */, %463, %464)
  };
  %465(%var_2602) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */
}

def @func_7832() -> Tensor[(14, 7, 7), uint8] {
  @func_7830() /* ty=Tensor[(14, 7, 7), uint8] */
}

def @func_7746(%var_7745: Tensor[(300), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(300), float64]) {
  %474 = fn (%var_7733: Tensor[(300), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(300), float64]) {
    %466 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
    %467 = cast(meta[relay.Constant][31] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
    %468 = cast(%var_7733, dtype="float64") /* ty=Tensor[(300), float64] */;
    %469 = reshape(%467, newshape=[1, 30]) /* ty=Tensor[(1, 30), int32] */;
    %470 = reshape(%468, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %471 = @func_5576(%469, %470) /* ty=(Tensor[(7, 3, 7), bool], Tensor[(7, 3, 7), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) */;
    %472 = %466.0;
    %473 = %471.6;
    (%472, %473, meta[relay.Constant][31] /* ty=Tensor[(30), int32] */, %var_7733)
  };
  %474(%var_7745) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32], Tensor[(30), int32], Tensor[(300), float64]) */
}

def @func_8295(%var_8294: Tensor[(7, 3, 7), uint32]) -> (Tensor[(7, 3, 7), float64],) {
  %482 = fn (%var_8278: Tensor[(7, 3, 7), uint32]) -> (Tensor[(7, 3, 7), float64],) {
    %475 = @func_4492() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %476 = %475.0;
    %477 = cast(%var_8278, dtype="float64") /* ty=Tensor[(7, 3, 7), float64] */;
    %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%476, dtype="float64") /* ty=Tensor[(7, 3, 7), float64] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %481 = divide(%479, %480) /* ty=Tensor[(7, 3, 7), float64] */;
    (%481,)
  };
  %482(%var_8294) /* ty=(Tensor[(7, 3, 7), float64],) */
}

def @func_3074() -> Tensor[(7, 3, 7), uint32] {
  @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_8036() -> (Tensor[(7, 3, 7), bool],) {
  %483 = @func_7308() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool]) */;
  %484 = %483.1;
  (%484,)
}

def @func_4266(%var_4204: Tensor[(9, 11, 1), float64], %var_4218: Tensor[(9, 11, 15), float64], %var_4259: uint32) -> (Tensor[(9, 11, ?), float64], Tensor[(9, 11, 15), int8], Tensor[(5, 6), int32], Tensor[(60), uint8], Tensor[(36, 6), float64], uint32, Tensor[(9, 11, 15), float64]) {
  %485 = cast(%var_4204, dtype="float64") /* ty=Tensor[(9, 11, 1), float64] */;
  %486 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(9, 11, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 1), float64] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %489 = cast(%var_4204, dtype="int8") /* ty=Tensor[(9, 11, 1), int8] */;
  %490 = cast(%var_4218, dtype="int8") /* ty=Tensor[(9, 11, 15), int8] */;
  %491 = cast(meta[relay.Constant][33] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %492 = cast(meta[relay.Constant][34] /* ty=Tensor[(36, 6), float64] */, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %493 = cast(%var_4259, dtype="uint32") /* ty=uint32 */;
  %494 = reshape(%491, newshape=[3, 5, 4]) /* ty=Tensor[(3, 5, 4), uint8] */;
  %495 = reshape(%492, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %496 = reshape(%493, newshape=[]) /* ty=uint32 */;
  %497 = @func_2349(%494, %495, %496) /* ty=(Tensor[(3, 5, 4), bool], Tensor[(5, 6), int32], Tensor[(216), float64], uint32) */;
  %498 = cast(%var_4218, dtype="float32") /* ty=Tensor[(9, 11, 15), float32] */;
  %499 = tan(%498) /* ty=Tensor[(9, 11, 15), float32] */;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
  %501 = floor_mod(%487, %488) /* ty=Tensor[(9, 11, ?), float64] */;
  %502 = add(%489, %490) /* ty=Tensor[(9, 11, 15), int8] */;
  %503 = %497.1;
  %504 = log(%500) /* ty=Tensor[(9, 11, 15), float64] */;
  (%501, %502, %503, meta[relay.Constant][33] /* ty=Tensor[(60), uint8] */, meta[relay.Constant][34] /* ty=Tensor[(36, 6), float64] */, %var_4259, %504)
}

def @func_8254() -> (Tensor[(7, 3, 7), bool],) {
  %507 = fn () -> (Tensor[(7, 3, 7), bool],) {
    %505 = @func_8036() /* ty=(Tensor[(7, 3, 7), bool],) */;
    %506 = %505.0;
    (%506,)
  };
  %507() /* ty=(Tensor[(7, 3, 7), bool],) */
}

def @func_2028(%var_2026: Tensor[(13, 1, 11), float32]) -> Tensor[(13, 1, 11), float32] {
  @func_2025(%var_2026) /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_8983() -> (Tensor[(80), uint8], Tensor[(7, 3, 7), uint32]) {
  @func_8981() /* ty=(Tensor[(80), uint8], Tensor[(7, 3, 7), uint32]) */
}

def @func_7862(%var_7844: Tensor[(4, 1, 7), float64]) -> Tensor[(4, ?, 7), uint8] {
  %508 = cast(%var_7844, dtype="float64") /* ty=Tensor[(4, 1, 7), float64] */;
  %509 = cosh(%508) /* ty=Tensor[(4, 1, 7), float64] */;
  %510 = cast(%var_7844, dtype="bool") /* ty=Tensor[(4, 1, 7), bool] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="bool") /* ty=Tensor[(4, 1, 7), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = less_equal(%512, %513) /* ty=Tensor[(4, ?, 7), bool] */;
  %515 = cast(%514, dtype="uint8") /* ty=Tensor[(4, ?, 7), uint8] */;
  %516 = shape_of(%var_7844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_7844, dtype="uint8") /* ty=Tensor[(4, 1, 7), uint8] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%517, %518) /* ty=Tensor[(4, ?, 7), uint8] */
}

def @func_7977(%var_7975: Tensor[(11, 16, 5), float32], %var_7976: Tensor[(11, 16, 5), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(11, 16, 5), bool], Tensor[(11, 16, 5), float64], Tensor[(11, 16, 5), float64]) {
  %537 = fn (%var_7929: Tensor[(11, 16, 5), float32], %var_7961: Tensor[(11, 16, 5), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(11, 16, 5), bool], Tensor[(11, 16, 5), float64], Tensor[(11, 16, 5), float64]) {
    %519 = @func_4879() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %520 = cast(%var_7929, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
    %521 = cos(%520) /* ty=Tensor[(11, 16, 5), float32] */;
    %522 = cast(%521, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
    %523 = acos(%522) /* ty=Tensor[(11, 16, 5), float64] */;
    %524 = cast(%521, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
    %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
    %526 = cast(%523, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
    %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %528 = cast(%521, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
    %529 = cast(%var_7961, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
    %530 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
    %531 = cast(%521, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
    %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %533 = %519.0;
    %534 = logical_or(%526, %527) /* ty=Tensor[(11, 16, 5), bool] */;
    %535 = erf(%528) /* ty=Tensor[(11, 16, 5), float64] */;
    %536 = floor_mod(%531, %532) /* ty=Tensor[(11, 16, 5), float64] */;
    (%533, %534, %535, %536)
  };
  %537(%var_7975, %var_7976) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(11, 16, 5), bool], Tensor[(11, 16, 5), float64], Tensor[(11, 16, 5), float64]) */
}

def @func_8414(%var_8396: Tensor[(14, 11, 7), bool], %var_8401: uint32, %var_8402: Tensor[(5, 6), int32], %var_8404: Tensor[(320), float64]) -> (Tensor[(14, 11, 7), bool], Tensor[(4, 4, 3), float32], uint32, Tensor[(5, 6), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) {
  %538 = cast(%var_8396, dtype="bool") /* ty=Tensor[(14, 11, 7), bool] */;
  %539 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(14, 11, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 11, 7), bool] */, dtype="bool") /* ty=Tensor[(14, 11, 7), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %542 = cast(%var_8401, dtype="uint32") /* ty=uint32 */;
  %543 = cast(%var_8402, dtype="int32") /* ty=Tensor[(5, 6), int32] */;
  %544 = cast(meta[relay.Constant][36] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %545 = cast(%var_8404, dtype="float64") /* ty=Tensor[(320), float64] */;
  %546 = reshape(%542, newshape=[]) /* ty=uint32 */;
  %547 = reshape(%543, newshape=[5, 6]) /* ty=Tensor[(5, 6), int32] */;
  %548 = reshape(%544, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %549 = reshape(%545, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %550 = @func_3820(%546, %547, %548, %549) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */;
  %551 = cast(%var_8402, dtype="int32") /* ty=Tensor[(5, 6), int32] */;
  %552 = cast(meta[relay.Constant][36] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %553 = reshape(%551, newshape=[1, 30]) /* ty=Tensor[(1, 30), int32] */;
  %554 = reshape(%552, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %555 = @func_5576(%553, %554) /* ty=(Tensor[(7, 3, 7), bool], Tensor[(7, 3, 7), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) */;
  %556 = logical_and(%540, %541) /* ty=Tensor[(14, 11, 7), bool] */;
  %557 = %550.6;
  %558 = %555.1;
  (%556, %557, %var_8401, %var_8402, meta[relay.Constant][36] /* ty=Tensor[(300), float64] */, %var_8404, %558)
}

def @func_5210(%var_5208: Tensor[(9, 7, 4), float64]) -> Tensor[(9, 7, 4), float64] {
  @func_5207(%var_5208) /* ty=Tensor[(9, 7, 4), float64] */
}

def @func_5847() -> (Tensor[(14, 7, 7), uint8],) {
  @func_5845() /* ty=(Tensor[(14, 7, 7), uint8],) */
}

def @func_768(%var_766: Tensor[(7, 15, 5), int64], %var_767: uint32) -> (Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) {
  %576 = fn (%var_745: Tensor[(7, 15, 5), int64], %var_751: uint32) -> (Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) {
    %559 = cast(%var_745, dtype="int64") /* ty=Tensor[(7, 15, 5), int64] */;
    %560 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(7, 15, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %561 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 15, 5), int64] */, dtype="int64") /* ty=Tensor[(7, 15, 5), int64] */;
    %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %563 = cast(%var_751, dtype="uint32") /* ty=uint32 */;
    %564 = cast(meta[relay.Constant][38] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
    %565 = reshape(%563, newshape=[]) /* ty=uint32 */;
    %566 = reshape(%564, newshape=[30]) /* ty=Tensor[(30), int32] */;
    %567 = @func_480(%565, %566) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
    %568 = cast(%var_751, dtype="uint32") /* ty=uint32 */;
    %569 = cast(meta[relay.Constant][38] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
    %570 = reshape(%568, newshape=[]) /* ty=uint32 */;
    %571 = reshape(%569, newshape=[30]) /* ty=Tensor[(30), int32] */;
    %572 = @func_480(%570, %571) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
    %573 = maximum(%561, %562) /* ty=Tensor[(7, 15, 5), int64] */;
    %574 = %567.0;
    %575 = %572.0;
    (%573, %574, %var_751, meta[relay.Constant][38] /* ty=Tensor[(30), int32] */, %575)
  };
  %576(%var_766, %var_767) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */
}

def @func_7469(%var_7452: Tensor[(128), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(2, 8, 8), bool], Tensor[(128), float64]) {
  %577 = @func_4708() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %578 = cast(%var_7452, dtype="float64") /* ty=Tensor[(128), float64] */;
  %579 = cast(%var_7452, dtype="float64") /* ty=Tensor[(128), float64] */;
  %580 = reshape(%578, newshape=[2, 8, 8]) /* ty=Tensor[(2, 8, 8), float64] */;
  %581 = reshape(%579, newshape=[2, 8, 8]) /* ty=Tensor[(2, 8, 8), float64] */;
  %582 = @func_1888(%580, %581) /* ty=(Tensor[(2, 8, 8), bool], Tensor[(2, 8, 8), bool], Tensor[(10, 30), float32], Tensor[(216), float64], uint32) */;
  %583 = %577.0;
  %584 = %582.0;
  (%583, %584, %var_7452)
}

def @func_4271(%var_4268: Tensor[(9, 11, 1), float64], %var_4269: Tensor[(9, 11, 15), float64], %var_4270: uint32) -> (Tensor[(9, 11, ?), float64], Tensor[(9, 11, 15), int8], Tensor[(5, 6), int32], Tensor[(60), uint8], Tensor[(36, 6), float64], uint32, Tensor[(9, 11, 15), float64]) {
  @func_4266(%var_4268, %var_4269, %var_4270) /* ty=(Tensor[(9, 11, ?), float64], Tensor[(9, 11, 15), int8], Tensor[(5, 6), int32], Tensor[(60), uint8], Tensor[(36, 6), float64], uint32, Tensor[(9, 11, 15), float64]) */
}

def @func_4359() -> (Tensor[(7, 3, 7), bool],) {
  %585 = @func_4106() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %586 = %585.0;
  (%586,)
}

def @func_4033() -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32]) {
  %587 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %588 = %587.1;
  %589 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 3, 7), uint32] */, dtype="uint8") /* ty=Tensor[(7, 3, 7), uint8] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="uint8") /* ty=Tensor[(7, 3, 7), uint8] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %593 = @func_3615() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %594 = subtract(%591, %592) /* ty=Tensor[(7, 3, 7), uint8] */;
  %595 = %593.0;
  (%594, %595)
}

def @func_4842() -> (Tensor[(7, 3, 7), uint32],) {
  %597 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %596 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%596,)
  };
  %597() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_1461(%var_1449: Tensor[(6, 6, 6), float64], %var_1456: uint32) -> (Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) {
  %598 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 6, 6), float64] */;
  %599 = shape_of(%var_1449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%var_1449, dtype="float64") /* ty=Tensor[(6, 6, 6), float64] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %602 = cast(%var_1456, dtype="uint32") /* ty=uint32 */;
  %603 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 6), int32] */, dtype="int32") /* ty=Tensor[(5, 6), int32] */;
  %604 = reshape(%602, newshape=[]) /* ty=uint32 */;
  %605 = reshape(%603, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %606 = @func_480(%604, %605) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */;
  %607 = mod(%600, %601) /* ty=Tensor[(6, 6, 6), float64] */;
  %608 = %606.2;
  (%607, %608, %var_1456, meta[relay.Constant][41] /* ty=Tensor[(5, 6), int32] */)
}

def @func_8583() -> (Tensor[(7, 3, 7), uint32],) {
  %609 = @func_4049() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %610 = %609.0;
  (%610,)
}

def @func_4952() -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  @func_4950() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */
}

def @func_5885(%var_5883: Tensor[(728, 2), float64]) -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 15, 5), int64], Tensor[(525), int64], uint32, Tensor[(728, 2), float64]) {
  @func_5882(%var_5883) /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 15, 5), int64], Tensor[(525), int64], uint32, Tensor[(728, 2), float64]) */
}

def @func_4087(%var_4078: Tensor[(8, 16, 3), float32]) -> (Tensor[(8, 16, 3), float64],) {
  %611 = cast(%var_4078, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %612 = sinh(%611) /* ty=Tensor[(8, 16, 3), float32] */;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(8, 16, 3), float64] */;
  %614 = atanh(%613) /* ty=Tensor[(8, 16, 3), float64] */;
  (%614,)
}

def @func_6479(%var_6473: Tensor[(936, 2), int8], %var_6474: Tensor[(13, 9, 16), bool], %var_6475: uint32, %var_6476: Tensor[(1, 30), int32], %var_6477: Tensor[(300), float64], %var_6478: Tensor[(40, 8), float64]) -> (Tensor[(7, 3, 7), uint8], Tensor[(936, 2), int8], Tensor[(13, 9, 16), bool], Tensor[(5, 5, 10), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(40, 8), float64], Tensor[(7, 3, 7), uint32], Tensor[(320), float64], Tensor[(143), float32]) {
  @func_6471(%var_6473, %var_6474, %var_6475, %var_6476, %var_6477, %var_6478) /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(936, 2), int8], Tensor[(13, 9, 16), bool], Tensor[(5, 5, 10), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(40, 8), float64], Tensor[(7, 3, 7), uint32], Tensor[(320), float64], Tensor[(143), float32]) */
}

def @func_8981() -> (Tensor[(80), uint8], Tensor[(7, 3, 7), uint32]) {
  %615 = @func_6650() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) */;
  %616 = @func_5476() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %617 = %615.2;
  %618 = %616.0;
  (%617, %618)
}

def @func_2354(%var_2351: Tensor[(3, 5, 4), uint8], %var_2352: Tensor[(216), float64], %var_2353: uint32) -> (Tensor[(3, 5, 4), bool], Tensor[(5, 6), int32], Tensor[(216), float64], uint32) {
  @func_2349(%var_2351, %var_2352, %var_2353) /* ty=(Tensor[(3, 5, 4), bool], Tensor[(5, 6), int32], Tensor[(216), float64], uint32) */
}

def @func_7160() -> (Tensor[(7, 3, 7), uint32], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(13, 1, 11), float64]) {
  %619 = cast(meta[relay.Constant][42] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %620 = reshape(%619, newshape=[1, 1456]) /* ty=Tensor[(1, 1456), float64] */;
  %621 = @func_5818(%620) /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(14, 8, 13), float64], Tensor[(1, 1456), float64], Tensor[(14, 5, 7), bool], Tensor[(490), uint64], Tensor[(7, 3, 7), uint32]) */;
  %622 = cast(meta[relay.Constant][43] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %623 = reshape(%622, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %624 = @func_3945() /* ty=(Tensor[(13, 1, 11), float64], Tensor[(13, 1, 11), float64]) */;
  %625 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
  %626 = %621.1;
  %627 = @func_2745(%623) /* ty=Tensor[(10, 8, 8), float32] */;
  %628 = %624.0;
  (%625, %626, meta[relay.Constant][42] /* ty=Tensor[(1456), float64] */, %627, meta[relay.Constant][43] /* ty=Tensor[(640), float32] */, %628)
}

def @func_3852(%var_3849: Tensor[(1456), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(14, 8, 13), float64], Tensor[(1456), float64]) {
  %629 = @func_3615() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %630 = cast(%var_3849, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %631 = reshape(%630, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float64] */;
  %632 = %629.0;
  %633 = @func_819(%631) /* ty=Tensor[(14, 8, 13), float64] */;
  (%632, %633, %var_3849)
}

def @func_8585() -> (Tensor[(7, 3, 7), uint32],) {
  @func_8583() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_5132(%var_5120: bool, %var_5121: Tensor[(16, 7, 9), bool]) -> (Tensor[(16, 7, 9), bool],) {
  %634 = cast(%var_5120, dtype="bool") /* ty=bool */;
  %635 = cast(%var_5121, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %636 = logical_and(%634, %635) /* ty=Tensor[(16, 7, 9), bool] */;
  (%636,)
}

def @func_2931() -> Tensor[(7, 3, 7), uint32] {
  %637 = fn () -> Tensor[(7, 3, 7), uint32] {
    @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */
  };
  %637() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_7830() -> Tensor[(14, 7, 7), uint8] {
  %638 = @func_5845() /* ty=(Tensor[(14, 7, 7), uint8],) */;
  %638.0
}

def @func_6616() -> Tensor[(7, 3, 7), uint32] {
  %640 = fn () -> Tensor[(7, 3, 7), uint32] {
    %639 = @func_4841() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %639.0
  };
  %640() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_3709() -> (Tensor[(7, 3, 7), uint32], Tensor[(143), float32], Tensor[(13, 1, 11), float64]) {
  %641 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %642 = cast(meta[relay.Constant][44] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %643 = reshape(%642, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), float32] */;
  %644 = @func_2025(%643) /* ty=Tensor[(13, 1, 11), float32] */;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(13, 1, 11), float64] */;
  %646 = tan(%645) /* ty=Tensor[(13, 1, 11), float64] */;
  %647 = cast(%646, dtype="float64") /* ty=Tensor[(13, 1, 11), float64] */;
  %648 = %641.0;
  %649 = log(%647) /* ty=Tensor[(13, 1, 11), float64] */;
  (%648, meta[relay.Constant][44] /* ty=Tensor[(143), float32] */, %649)
}

def @func_7162() -> (Tensor[(7, 3, 7), uint32], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(13, 1, 11), float64]) {
  @func_7160() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(13, 1, 11), float64]) */
}

def @func_4521(%var_4518: uint32, %var_4519: Tensor[(10, 30), float64], %var_4520: Tensor[(40, 8), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(10, 30), float64], Tensor[(40, 8), float64]) {
  %663 = fn (%var_4507: uint32, %var_4509: Tensor[(10, 30), float64], %var_4510: Tensor[(40, 8), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(10, 30), float64], Tensor[(40, 8), float64]) {
    %650 = @func_4106() /* ty=(Tensor[(7, 3, 7), bool],) */;
    %651 = cast(%var_4507, dtype="uint32") /* ty=uint32 */;
    %652 = cast(meta[relay.Constant][45] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
    %653 = cast(%var_4509, dtype="float64") /* ty=Tensor[(10, 30), float64] */;
    %654 = cast(%var_4510, dtype="float64") /* ty=Tensor[(40, 8), float64] */;
    %655 = reshape(%651, newshape=[]) /* ty=uint32 */;
    %656 = reshape(%652, newshape=[5, 6]) /* ty=Tensor[(5, 6), int32] */;
    %657 = reshape(%653, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
    %658 = reshape(%654, newshape=[320]) /* ty=Tensor[(320), float64] */;
    %659 = @func_3820(%655, %656, %657, %658) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */;
    %660 = @func_3876() /* ty=Tensor[(7, 3, 7), uint32] */;
    %661 = %650.0;
    %662 = %659.1;
    (%660, %661, %662, %var_4507, meta[relay.Constant][45] /* ty=Tensor[(30), int32] */, %var_4509, %var_4510)
  };
  %663(%var_4518, %var_4519, %var_4520) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(10, 30), float64], Tensor[(40, 8), float64]) */
}

def @func_5079(%var_5077: Tensor[(5, 8, 7), float32]) -> Tensor[(5, 8, 7), float32] {
  @func_5076(%var_5077) /* ty=Tensor[(5, 8, 7), float32] */
}

def @func_5735(%var_5732: Tensor[(11, 14, 3), float64], %var_5733: Tensor[(11, 14, 3), float64], %var_5734: Tensor[(11, 14, 3), float64]) -> (Tensor[(11, 14, 3), float64], Tensor[(11, 14, 3), int32], Tensor[(11, 14, 3), float64]) {
  %676 = fn (%var_5695: Tensor[(11, 14, 3), float64], %var_5696: Tensor[(11, 14, 3), float64], %var_5712: Tensor[(11, 14, 3), float64]) -> (Tensor[(11, 14, 3), float64], Tensor[(11, 14, 3), int32], Tensor[(11, 14, 3), float64]) {
    %664 = cast(%var_5696, dtype="float64") /* ty=Tensor[(11, 14, 3), float64] */;
    %665 = shape_of(%var_5695, dtype="int32") /* ty=Tensor[(3), int32] */;
    %666 = cast(%var_5695, dtype="float64") /* ty=Tensor[(11, 14, 3), float64] */;
    %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %668 = cast(%var_5712, dtype="int32") /* ty=Tensor[(11, 14, 3), int32] */;
    %669 = shape_of(%var_5695, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%var_5695, dtype="int32") /* ty=Tensor[(11, 14, 3), int32] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %672 = cast(%var_5712, dtype="float64") /* ty=Tensor[(11, 14, 3), float64] */;
    %673 = multiply(%666, %667) /* ty=Tensor[(11, 14, 3), float64] */;
    %674 = right_shift(%670, %671) /* ty=Tensor[(11, 14, 3), int32] */;
    %675 = sigmoid(%672) /* ty=Tensor[(11, 14, 3), float64] */;
    (%673, %674, %675)
  };
  %676(%var_5732, %var_5733, %var_5734) /* ty=(Tensor[(11, 14, 3), float64], Tensor[(11, 14, 3), int32], Tensor[(11, 14, 3), float64]) */
}

def @func_7514() -> (Tensor[(7, 3, 7), float32],) {
  %680 = fn () -> (Tensor[(7, 3, 7), float32],) {
    %677 = @func_5488() /* ty=Tensor[(7, 3, 7), uint8] */;
    %678 = cast(%677, dtype="float32") /* ty=Tensor[(7, 3, 7), float32] */;
    %679 = exp(%678) /* ty=Tensor[(7, 3, 7), float32] */;
    (%679,)
  };
  %680() /* ty=(Tensor[(7, 3, 7), float32],) */
}

def @func_3954() -> Tensor[(7, 3, 7), uint32] {
  @func_3952() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_7309() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool]) {
  %685 = fn () -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool]) {
    %681 = @func_4049() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %682 = @func_4684() /* ty=(Tensor[(7, 3, 7), bool],) */;
    %683 = %681.0;
    %684 = %682.0;
    (%683, %684)
  };
  %685() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), bool]) */
}

def @func_5818(%var_5785: Tensor[(1, 1456), float64]) -> (Tensor[(7, 3, 7), uint8], Tensor[(14, 8, 13), float64], Tensor[(1, 1456), float64], Tensor[(14, 5, 7), bool], Tensor[(490), uint64], Tensor[(7, 3, 7), uint32]) {
  %686 = @func_5639() /* ty=(Tensor[(7, 3, 7), uint8],) */;
  %687 = cast(%var_5785, dtype="float64") /* ty=Tensor[(1, 1456), float64] */;
  %688 = reshape(%687, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float64] */;
  %689 = cast(meta[relay.Constant][46] /* ty=Tensor[(490), uint64] */, dtype="uint64") /* ty=Tensor[(490), uint64] */;
  %690 = cast(meta[relay.Constant][46] /* ty=Tensor[(490), uint64] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %691 = reshape(%689, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), uint64] */;
  %692 = reshape(%690, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), float32] */;
  %693 = @func_1273(%691, %692) /* ty=(Tensor[(14, 5, 7), uint64], Tensor[(14, 5, 7), bool]) */;
  %694 = %686.0;
  %695 = @func_819(%688) /* ty=Tensor[(14, 8, 13), float64] */;
  %696 = %693.1;
  %697 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%694, %695, %var_5785, %696, meta[relay.Constant][46] /* ty=Tensor[(490), uint64] */, %697)
}

def @func_2349(%var_2330: Tensor[(3, 5, 4), uint8], %var_2342: Tensor[(216), float64], %var_2343: uint32) -> (Tensor[(3, 5, 4), bool], Tensor[(5, 6), int32], Tensor[(216), float64], uint32) {
  %698 = cast(%var_2330, dtype="bool") /* ty=Tensor[(3, 5, 4), bool] */;
  %699 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(3, 5, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 5, 4), uint8] */, dtype="bool") /* ty=Tensor[(3, 5, 4), bool] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %702 = cast(%var_2342, dtype="float64") /* ty=Tensor[(216), float64] */;
  %703 = cast(%var_2343, dtype="uint32") /* ty=uint32 */;
  %704 = reshape(%702, newshape=[6, 6, 6]) /* ty=Tensor[(6, 6, 6), float64] */;
  %705 = reshape(%703, newshape=[]) /* ty=uint32 */;
  %706 = @func_1461(%704, %705) /* ty=(Tensor[(6, 6, 6), float64], Tensor[(10, 30), float32], uint32, Tensor[(5, 6), int32]) */;
  %707 = equal(%700, %701) /* ty=Tensor[(3, 5, 4), bool] */;
  %708 = %706.3;
  (%707, %708, %var_2342, %var_2343)
}

def @func_3158() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %709 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  %710 = @func_2930() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%709, %710)
}

def @func_3493() -> (Tensor[(7, 3, 7), bool],) {
  @func_3491() /* ty=(Tensor[(7, 3, 7), bool],) */
}

def @func_6471(%var_6396: Tensor[(936, 2), int8], %var_6400: Tensor[(13, 9, 16), bool], %var_6410: uint32, %var_6411: Tensor[(1, 30), int32], %var_6412: Tensor[(300), float64], %var_6413: Tensor[(40, 8), float64]) -> (Tensor[(7, 3, 7), uint8], Tensor[(936, 2), int8], Tensor[(13, 9, 16), bool], Tensor[(5, 5, 10), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(40, 8), float64], Tensor[(7, 3, 7), uint32], Tensor[(320), float64], Tensor[(143), float32]) {
  %711 = cast(%var_6396, dtype="int8") /* ty=Tensor[(936, 2), int8] */;
  %712 = cast(%var_6396, dtype="int8") /* ty=Tensor[(936, 2), int8] */;
  %713 = reshape(%711, newshape=[13, 9, 16]) /* ty=Tensor[(13, 9, 16), int8] */;
  %714 = reshape(%712, newshape=[13, 9, 16]) /* ty=Tensor[(13, 9, 16), int8] */;
  %715 = @func_6228(%713, %714) /* ty=(Tensor[(13, 9, 16), bool],) */;
  %716 = %715.0;
  %717 = cast(%var_6400, dtype="bool") /* ty=Tensor[(13, 9, 16), bool] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="bool") /* ty=Tensor[(13, 9, 16), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %721 = cast(%var_6410, dtype="uint32") /* ty=uint32 */;
  %722 = cast(%var_6411, dtype="int32") /* ty=Tensor[(1, 30), int32] */;
  %723 = cast(%var_6412, dtype="float64") /* ty=Tensor[(300), float64] */;
  %724 = cast(%var_6413, dtype="float64") /* ty=Tensor[(40, 8), float64] */;
  %725 = reshape(%721, newshape=[]) /* ty=uint32 */;
  %726 = reshape(%722, newshape=[5, 6]) /* ty=Tensor[(5, 6), int32] */;
  %727 = reshape(%723, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %728 = reshape(%724, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %729 = @func_3820(%725, %726, %727, %728) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */;
  %730 = cast(%var_6413, dtype="float64") /* ty=Tensor[(40, 8), float64] */;
  %731 = cast(meta[relay.Constant][48] /* ty=Tensor[(143), float32] */, dtype="float32") /* ty=Tensor[(143), float32] */;
  %732 = reshape(%730, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %733 = reshape(%731, newshape=[143]) /* ty=Tensor[(143), float32] */;
  %734 = @func_3234(%732, %733) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(13, 1, 11), float32], Tensor[(143), float32]) */;
  %735 = @func_4397() /* ty=Tensor[(7, 3, 7), uint8] */;
  %736 = greater_equal(%719, %720) /* ty=Tensor[(13, 9, 16), bool] */;
  %737 = %729.1;
  %738 = @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */;
  %739 = %734.2;
  (%735, %var_6396, %736, %737, %var_6410, %var_6411, %var_6412, %var_6413, %738, %739, meta[relay.Constant][48] /* ty=Tensor[(143), float32] */)
}

def @func_8890() -> (Tensor[(7, 3, 7), bool],) {
  %740 = @func_7675() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %741 = %740.0;
  (%741,)
}

def @func_3826(%var_3822: uint32, %var_3823: Tensor[(5, 6), int32], %var_3824: Tensor[(150, 2), float64], %var_3825: Tensor[(320), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) {
  @func_3820(%var_3822, %var_3823, %var_3824, %var_3825) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */
}

def @func_2980() -> Tensor[(7, 3, 7), uint32] {
  @func_2859() /* ty=Tensor[(7, 3, 7), uint32] */
}

def @func_430(%var_428: Tensor[(1, 15, 2), int32], %var_429: Tensor[(10, 15, 2), float64]) -> (Tensor[(8, 15, 2), bool], Tensor[(10, 15, 2), float64]) {
  @func_426(%var_428, %var_429) /* ty=(Tensor[(8, 15, 2), bool], Tensor[(10, 15, 2), float64]) */
}

def @func_4639(%var_4636: Tensor[(80), uint8], %var_4637: uint32, %var_4638: Tensor[(320), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8], uint32, Tensor[(5, 60), float64], Tensor[(30, 320), bool], Tensor[(10, 2, 16), float64]) {
  %762 = fn (%var_4603: Tensor[(80), uint8], %var_4614: uint32, %var_4617: Tensor[(320), float64]) -> (Tensor[(7, 3, 7), uint32], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8], uint32, Tensor[(5, 60), float64], Tensor[(30, 320), bool], Tensor[(10, 2, 16), float64]) {
    %742 = cast(%var_4603, dtype="uint8") /* ty=Tensor[(80), uint8] */;
    %743 = reshape(%742, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), uint8] */;
    %744 = @func_3562(%743) /* ty=(Tensor[(8, 2, 5), uint8],) */;
    %745 = cast(%var_4617, dtype="bool") /* ty=Tensor[(320), bool] */;
    %746 = cast(meta[relay.Constant][50] /* ty=Tensor[(30, 1), int32] */, dtype="bool") /* ty=Tensor[(30, 1), bool] */;
    %747 = cast(%var_4614, dtype="uint32") /* ty=uint32 */;
    %748 = cast(meta[relay.Constant][50] /* ty=Tensor[(30, 1), int32] */, dtype="int32") /* ty=Tensor[(30, 1), int32] */;
    %749 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 60), float64] */, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %750 = cast(%var_4617, dtype="float64") /* ty=Tensor[(320), float64] */;
    %751 = reshape(%747, newshape=[]) /* ty=uint32 */;
    %752 = reshape(%748, newshape=[5, 6]) /* ty=Tensor[(5, 6), int32] */;
    %753 = reshape(%749, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
    %754 = reshape(%750, newshape=[320]) /* ty=Tensor[(320), float64] */;
    %755 = @func_3820(%751, %752, %753, %754) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */;
    %756 = %755.8;
    %757 = cast(%756, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
    %758 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
    %759 = %744.0;
    %760 = logical_and(%745, %746) /* ty=Tensor[(30, 320), bool] */;
    %761 = sinh(%757) /* ty=Tensor[(10, 2, 16), float64] */;
    (%758, %759, %var_4603, %var_4614, meta[relay.Constant][49] /* ty=Tensor[(5, 60), float64] */, %760, %761)
  };
  %762(%var_4636, %var_4637, %var_4638) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8], uint32, Tensor[(5, 60), float64], Tensor[(30, 320), bool], Tensor[(10, 2, 16), float64]) */
}

def @func_5035() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %766 = fn () -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
    %763 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
    %764 = %763.1;
    %765 = @func_3876() /* ty=Tensor[(7, 3, 7), uint32] */;
    (%764, %765)
  };
  %766() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */
}

def @func_3945() -> (Tensor[(13, 1, 11), float64], Tensor[(13, 1, 11), float64]) {
  %767 = @func_3709() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(143), float32], Tensor[(13, 1, 11), float64]) */;
  %768 = @func_3709() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(143), float32], Tensor[(13, 1, 11), float64]) */;
  %769 = %767.2;
  %770 = %768.2;
  (%769, %770)
}

def @func_4075() -> Tensor[(7, 3, 7), uint8] {
  @func_4073() /* ty=Tensor[(7, 3, 7), uint8] */
}

def @func_5882(%var_5867: Tensor[(728, 2), float64]) -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 15, 5), int64], Tensor[(525), int64], uint32, Tensor[(728, 2), float64]) {
  %771 = @func_5639() /* ty=(Tensor[(7, 3, 7), uint8],) */;
  %772 = cast(%var_5867, dtype="float64") /* ty=Tensor[(728, 2), float64] */;
  %773 = cast(meta[relay.Constant][51] /* ty=Tensor[(525), int64] */, dtype="int64") /* ty=Tensor[(525), int64] */;
  %774 = cast(meta[relay.Constant][52] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %775 = reshape(%772, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %776 = reshape(%773, newshape=[525, 1]) /* ty=Tensor[(525, 1), int64] */;
  %777 = reshape(%774, newshape=[]) /* ty=uint32 */;
  %778 = @func_1433(%775, %776, %777) /* ty=(Tensor[(7, 7, 2), int64], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(7, 15, 5), int64], Tensor[(525, 1), int64], uint32, Tensor[(5, 5, 10), uint32]) */;
  %779 = cast(%var_5867, dtype="float64") /* ty=Tensor[(728, 2), float64] */;
  %780 = sigmoid(%779) /* ty=Tensor[(728, 2), float64] */;
  %781 = cast(%780, dtype="float64") /* ty=Tensor[(728, 2), float64] */;
  %782 = %771.0;
  %783 = %778.3;
  %784 = sqrt(%781) /* ty=Tensor[(728, 2), float64] */;
  (%782, %783, meta[relay.Constant][51] /* ty=Tensor[(525), int64] */, meta[relay.Constant][52] /* ty=uint32 */, %784)
}

def @func_5821(%var_5819: Tensor[(1, 1456), float64]) -> (Tensor[(7, 3, 7), uint8], Tensor[(14, 8, 13), float64], Tensor[(1, 1456), float64], Tensor[(14, 5, 7), bool], Tensor[(490), uint64], Tensor[(7, 3, 7), uint32]) {
  @func_5818(%var_5819) /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(14, 8, 13), float64], Tensor[(1, 1456), float64], Tensor[(14, 5, 7), bool], Tensor[(490), uint64], Tensor[(7, 3, 7), uint32]) */
}

def @func_7108(%var_7085: Tensor[(16, 13, 11), float32]) -> Tensor[(16, 13, 11), float32] {
  %785 = cast(%var_7085, dtype="float32") /* ty=Tensor[(16, 13, 11), float32] */;
  asinh(%785) /* ty=Tensor[(16, 13, 11), float32] */
}

def @func_8119() -> (Tensor[(80), uint8], Tensor[(7, 3, 7), uint32]) {
  %790 = fn () -> (Tensor[(80), uint8], Tensor[(7, 3, 7), uint32]) {
    %786 = @func_6650() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(8, 2, 5), uint8], Tensor[(80), uint8]) */;
    %787 = @func_4492() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %788 = %786.2;
    %789 = %787.0;
    (%788, %789)
  };
  %790() /* ty=(Tensor[(80), uint8], Tensor[(7, 3, 7), uint32]) */
}

def @func_3018() -> (Tensor[(7, 3, 7), uint32],) {
  @func_3016() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_8458(%var_8455: Tensor[(8, 16, 15), float64], %var_8456: Tensor[(8, 16, 15), float64], %var_8457: Tensor[(252), float64]) -> (Tensor[(8, 16, 15), float64], Tensor[(9, 7, 4), float64], Tensor[(252), float64]) {
  %799 = fn (%var_8430: Tensor[(8, 16, 15), float64], %var_8431: Tensor[(8, 16, 15), float64], %var_8448: Tensor[(252), float64]) -> (Tensor[(8, 16, 15), float64], Tensor[(9, 7, 4), float64], Tensor[(252), float64]) {
    %791 = cast(%var_8431, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
    %792 = shape_of(%var_8430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %793 = cast(%var_8430, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
    %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %795 = cast(%var_8448, dtype="float64") /* ty=Tensor[(252), float64] */;
    %796 = reshape(%795, newshape=[9, 7, 4]) /* ty=Tensor[(9, 7, 4), float64] */;
    %797 = floor_mod(%793, %794) /* ty=Tensor[(8, 16, 15), float64] */;
    %798 = @func_5207(%796) /* ty=Tensor[(9, 7, 4), float64] */;
    (%797, %798, %var_8448)
  };
  %799(%var_8455, %var_8456, %var_8457) /* ty=(Tensor[(8, 16, 15), float64], Tensor[(9, 7, 4), float64], Tensor[(252), float64]) */
}

def @func_6186() -> (Tensor[(14, 7, 7), uint8],) {
  %800 = @func_5845() /* ty=(Tensor[(14, 7, 7), uint8],) */;
  %801 = %800.0;
  (%801,)
}

def @func_9017() -> (Tensor[(7, 3, 7), uint32],) {
  %804 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %802 = @func_8118() /* ty=(Tensor[(80), uint8], Tensor[(7, 3, 7), uint32]) */;
    %803 = %802.1;
    (%803,)
  };
  %804() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_5576(%var_5547: Tensor[(1, 30), int32], %var_5548: Tensor[(300), float64]) -> (Tensor[(7, 3, 7), bool], Tensor[(7, 3, 7), uint32], uint32, Tensor[(1, 30), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) {
  %805 = @func_4684() /* ty=(Tensor[(7, 3, 7), bool],) */;
  %806 = cast(meta[relay.Constant][53] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %807 = cast(%var_5547, dtype="int32") /* ty=Tensor[(1, 30), int32] */;
  %808 = cast(%var_5548, dtype="float64") /* ty=Tensor[(300), float64] */;
  %809 = cast(meta[relay.Constant][54] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %810 = reshape(%806, newshape=[]) /* ty=uint32 */;
  %811 = reshape(%807, newshape=[5, 6]) /* ty=Tensor[(5, 6), int32] */;
  %812 = reshape(%808, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %813 = reshape(%809, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %814 = @func_3820(%810, %811, %812, %813) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(5, 5, 10), uint32], uint32, Tensor[(5, 6), int32], Tensor[(5, 6), int32], Tensor[(216), float64], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(10, 2, 16), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32], Tensor[(10, 15, 2), float32]) */;
  %815 = @func_4426() /* ty=(Tensor[(7, 3, 7), uint32],) */;
  %816 = %805.0;
  %817 = %814.0;
  %818 = %815.0;
  (%816, %817, meta[relay.Constant][53] /* ty=uint32 */, %var_5547, %var_5548, meta[relay.Constant][54] /* ty=Tensor[(320), float64] */, %818)
}

def @func_8420(%var_8416: Tensor[(14, 11, 7), bool], %var_8417: uint32, %var_8418: Tensor[(5, 6), int32], %var_8419: Tensor[(320), float64]) -> (Tensor[(14, 11, 7), bool], Tensor[(4, 4, 3), float32], uint32, Tensor[(5, 6), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) {
  @func_8414(%var_8416, %var_8417, %var_8418, %var_8419) /* ty=(Tensor[(14, 11, 7), bool], Tensor[(4, 4, 3), float32], uint32, Tensor[(5, 6), int32], Tensor[(300), float64], Tensor[(320), float64], Tensor[(7, 3, 7), uint32]) */
}

def @func_5299() -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %823 = fn () -> (Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
    %819 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %820 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %821 = %819.0;
    %822 = %820.0;
    (%821, %822)
  };
  %823() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */
}

def @func_3400(%var_3398: int16, %var_3399: Tensor[(3, 7, 14), int16]) -> (Tensor[(3, 7, 14), int16], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), float32]) {
  @func_3396(%var_3398, %var_3399) /* ty=(Tensor[(3, 7, 14), int16], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), float32]) */
}

def @func_484(%var_482: uint32, %var_483: Tensor[(30), int32]) -> (Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) {
  @func_480(%var_482, %var_483) /* ty=(Tensor[(5, 5, 10), uint32], Tensor[(8, 15, 2), bool], Tensor[(10, 30), float32]) */
}

def @func_6733() -> (Tensor[(7, 3, 7), uint32],) {
  %824 = @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%824,)
}

def @func_8216(%var_8215: Tensor[(48), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(14, 7, 7), uint8], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %836 = fn (%var_8164: Tensor[(48), float32]) -> (Tensor[(7, 3, 7), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(14, 7, 7), uint8], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
    %825 = @func_6733() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %826 = cast(%var_8164, dtype="float32") /* ty=Tensor[(48), float32] */;
    %827 = reshape(%826, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), float32] */;
    %828 = @func_2601(%827) /* ty=(Tensor[(10, 30), float32], uint32, Tensor[(10, 3), int32], Tensor[(4, 4, 3), float64], Tensor[(4, 4, 3), float32]) */;
    %829 = @func_6186() /* ty=(Tensor[(14, 7, 7), uint8],) */;
    %830 = @func_3274() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %831 = %825.0;
    %832 = %828.4;
    %833 = %829.0;
    %834 = @func_5424() /* ty=Tensor[(7, 3, 7), uint32] */;
    %835 = %830.0;
    (%831, %832, %var_8164, %833, %834, %835)
  };
  %836(%var_8215) /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), float32], Tensor[(14, 7, 7), uint8], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */
}

def @func_1741(%var_1738: Tensor[(9, 7, 12), float64], %var_1739: Tensor[(9, 7, 12), float64], %var_1740: Tensor[(9, 7, 12), float64]) -> (Tensor[(9, 7, 12), float64], Tensor[(9, 7, 12), int8]) {
  %851 = fn (%var_1708: Tensor[(9, 7, 12), float64], %var_1719: Tensor[(9, 7, 12), float64], %var_1728: Tensor[(9, 7, 12), float64]) -> (Tensor[(9, 7, 12), float64], Tensor[(9, 7, 12), int8]) {
    %837 = cast(%var_1708, dtype="float64") /* ty=Tensor[(9, 7, 12), float64] */;
    %838 = cast(%var_1719, dtype="uint8") /* ty=Tensor[(9, 7, 12), uint8] */;
    %839 = shape_of(%var_1708, dtype="int32") /* ty=Tensor[(3), int32] */;
    %840 = cast(%var_1708, dtype="uint8") /* ty=Tensor[(9, 7, 12), uint8] */;
    %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %842 = right_shift(%840, %841) /* ty=Tensor[(9, 7, 12), uint8] */;
    %843 = cast(%842, dtype="float64") /* ty=Tensor[(9, 7, 12), float64] */;
    %844 = asin(%843) /* ty=Tensor[(9, 7, 12), float64] */;
    %845 = cast(%var_1728, dtype="int8") /* ty=Tensor[(9, 7, 12), int8] */;
    %846 = shape_of(%844, dtype="int32") /* ty=Tensor[(3), int32] */;
    %847 = cast(%844, dtype="int8") /* ty=Tensor[(9, 7, 12), int8] */;
    %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %849 = log10(%837) /* ty=Tensor[(9, 7, 12), float64] */;
    %850 = add(%847, %848) /* ty=Tensor[(9, 7, 12), int8] */;
    (%849, %850)
  };
  %851(%var_1738, %var_1739, %var_1740) /* ty=(Tensor[(9, 7, 12), float64], Tensor[(9, 7, 12), int8]) */
}

def @func_1277(%var_1275: Tensor[(14, 5, 7), uint64], %var_1276: Tensor[(14, 5, 7), float32]) -> (Tensor[(14, 5, 7), uint64], Tensor[(14, 5, 7), bool]) {
  @func_1273(%var_1275, %var_1276) /* ty=(Tensor[(14, 5, 7), uint64], Tensor[(14, 5, 7), bool]) */
}

def @func_4950() -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) {
  %852 = @func_4073() /* ty=Tensor[(7, 3, 7), uint8] */;
  %853 = @func_3952() /* ty=Tensor[(7, 3, 7), uint32] */;
  %854 = @func_2980() /* ty=Tensor[(7, 3, 7), uint32] */;
  (%852, %853, %854)
}

def @main(%var_9029: Tensor[(640), float32], %var_9048: Tensor[(12, 3, 13), float32]) -> (Tensor[(7, 3, 7), bool], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(12, 3, 13), int16], Tensor[(12, 3, 13), float64]) {
  %855 = cast(%var_9029, dtype="float32") /* ty=Tensor[(640), float32] */;
  %856 = reshape(%855, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %857 = @func_5692() /* ty=(Tensor[(12, 3, 13), float32],) */;
  %858 = %857.0;
  %859 = cast(%var_9048, dtype="int16") /* ty=Tensor[(12, 3, 13), int16] */;
  %860 = shape_of(%858, dtype="int32") /* ty=Tensor[(3), int32] */;
  %861 = cast(%858, dtype="int16") /* ty=Tensor[(12, 3, 13), int16] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %863 = cast(%858, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %864 = @func_6117() /* ty=Tensor[(7, 3, 7), bool] */;
  %865 = @func_2745(%856) /* ty=Tensor[(10, 8, 8), float32] */;
  %866 = logical_xor(%861, %862) /* ty=Tensor[(12, 3, 13), int16] */;
  %867 = log2(%863) /* ty=Tensor[(12, 3, 13), float64] */;
  (%864, %865, %var_9029, %866, %867)
}

def @func_7917() -> (Tensor[(7, 3, 7), float32], Tensor[(14, 8, 13), float64]) {
  @func_7915() /* ty=(Tensor[(7, 3, 7), float32], Tensor[(14, 8, 13), float64]) */
}

def @func_7915() -> (Tensor[(7, 3, 7), float32], Tensor[(14, 8, 13), float64]) {
  %868 = @func_7513() /* ty=(Tensor[(7, 3, 7), float32],) */;
  %869 = @func_7160() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(13, 1, 11), float64]) */;
  %870 = %868.0;
  %871 = %869.1;
  (%870, %871)
}

def @func_2747(%var_2746: Tensor[(10, 8, 8), float32]) -> Tensor[(10, 8, 8), float32] {
  %873 = fn (%var_2742: Tensor[(10, 8, 8), float32]) -> Tensor[(10, 8, 8), float32] {
    %872 = cast(%var_2742, dtype="float32") /* ty=Tensor[(10, 8, 8), float32] */;
    cos(%872) /* ty=Tensor[(10, 8, 8), float32] */
  };
  %873(%var_2746) /* ty=Tensor[(10, 8, 8), float32] */
}

def @func_4774() -> (Tensor[(7, 3, 7), bool],) {
  %876 = fn () -> (Tensor[(7, 3, 7), bool],) {
    %874 = @func_3491() /* ty=(Tensor[(7, 3, 7), bool],) */;
    %875 = %874.0;
    (%875,)
  };
  %876() /* ty=(Tensor[(7, 3, 7), bool],) */
}

def @func_1433(%var_1410: Tensor[(1456), float64], %var_1413: Tensor[(525, 1), int64], %var_1414: uint32) -> (Tensor[(7, 7, 2), int64], Tensor[(14, 8, 13), float64], Tensor[(1456), float64], Tensor[(7, 15, 5), int64], Tensor[(525, 1), int64], uint32, Tensor[(5, 5, 10), uint32]) {
  %877 = cast(meta[relay.Constant][55] /* ty=Tensor[(7, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
  %878 = log10(%877) /* ty=Tensor[(7, 7, 2), float64] */;
  %879 = cast(meta[relay.Constant][55] /* ty=Tensor[(7, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
  %880 = erf(%879) /* ty=Tensor[(7, 7, 2), float64] */;
  %881 = cast(%880, dtype="int64") /* ty=Tensor[(7, 7, 2), int64] */;
  %882 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%878, dtype="int64") /* ty=Tensor[(7, 7, 2), int64] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %885 = cast(%var_1410, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %886 = reshape(%885, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float64] */;
  %887 = cast(%var_1413, dtype="int64") /* ty=Tensor[(525, 1), int64] */;
  %888 = cast(%var_1414, dtype="uint32") /* ty=uint32 */;
  %889 = reshape(%887, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), int64] */;
  %890 = reshape(%888, newshape=[]) /* ty=uint32 */;
  %891 = @func_765(%889, %890) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */;
  %892 = cast(%var_1413, dtype="int64") /* ty=Tensor[(525, 1), int64] */;
  %893 = cast(%var_1414, dtype="uint32") /* ty=uint32 */;
  %894 = reshape(%892, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), int64] */;
  %895 = reshape(%893, newshape=[]) /* ty=uint32 */;
  %896 = @func_765(%894, %895) /* ty=(Tensor[(7, 15, 5), int64], Tensor[(5, 5, 10), uint32], uint32, Tensor[(30), int32], Tensor[(5, 5, 10), uint32]) */;
  %897 = subtract(%883, %884) /* ty=Tensor[(7, 7, 2), int64] */;
  %898 = @func_819(%886) /* ty=Tensor[(14, 8, 13), float64] */;
  %899 = %891.0;
  %900 = %896.4;
  (%897, %898, %var_1410, %899, %var_1413, %var_1414, %900)
}

def @func_5845() -> (Tensor[(14, 7, 7), uint8],) {
  %901 = cast(meta[relay.Constant][57] /* ty=Tensor[(14, 7, 7), uint8] */, dtype="uint8") /* ty=Tensor[(14, 7, 7), uint8] */;
  %902 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(14, 7, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %903 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 7, 7), uint8] */, dtype="uint8") /* ty=Tensor[(14, 7, 7), uint8] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %905 = bitwise_or(%903, %904) /* ty=Tensor[(14, 7, 7), uint8] */;
  (%905,)
}

def @func_6245() -> (Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint8]) {
  %906 = @func_4950() /* ty=(Tensor[(7, 3, 7), uint8], Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %907 = %906.0;
  %908 = @func_5488() /* ty=Tensor[(7, 3, 7), uint8] */;
  (%907, %908)
}

def @func_2025(%var_2020: Tensor[(13, 1, 11), float32]) -> Tensor[(13, 1, 11), float32] {
  %909 = cast(-4.91519f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %910 = cast(%var_2020, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
  divide(%909, %910) /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_5901() -> (Tensor[(7, 3, 7), uint32],) {
  %913 = fn () -> (Tensor[(7, 3, 7), uint32],) {
    %911 = @func_4841() /* ty=(Tensor[(7, 3, 7), uint32],) */;
    %912 = %911.0;
    (%912,)
  };
  %913() /* ty=(Tensor[(7, 3, 7), uint32],) */
}

def @func_8892() -> (Tensor[(7, 3, 7), bool],) {
  @func_8890() /* ty=(Tensor[(7, 3, 7), bool],) */
}

def @func_4426() -> (Tensor[(7, 3, 7), uint32],) {
  %914 = @func_3158() /* ty=(Tensor[(7, 3, 7), uint32], Tensor[(7, 3, 7), uint32]) */;
  %915 = %914.0;
  (%915,)
}

def @func_5425() -> Tensor[(7, 3, 7), uint32] {
  %916 = fn () -> Tensor[(7, 3, 7), uint32] {
    @func_3074() /* ty=Tensor[(7, 3, 7), uint32] */
  };
  %916() /* ty=Tensor[(7, 3, 7), uint32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen385/build/output.py", line 2480, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:12:34] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

