==========mod==========
#[version = "0.0.5"]
def @func_3282() -> (Tensor[(11, 15, 13), float64],) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %1 = acos(%0) /* ty=Tensor[(11, 15, 13), float64] */;
  (%1,)
}

def @func_130(%var_87: int16, %var_88: Tensor[(15, 16, 16), int16], %var_94: Tensor[(120), bool]) -> (Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) {
  %2 = cast(%var_87, dtype="bool") /* ty=bool */;
  %3 = cast(%var_88, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
  %4 = cast(%var_94, dtype="bool") /* ty=Tensor[(120), bool] */;
  %5 = cast(%var_94, dtype="bool") /* ty=Tensor[(120), bool] */;
  %6 = reshape(%4, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %7 = reshape(%5, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %8 = @func_61(%6, %7) /* ty=Tensor[(5, 6, 4), bool] */;
  %9 = cast(%8, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
  %10 = cast(%var_94, dtype="bool") /* ty=Tensor[(120), bool] */;
  %11 = reshape(%9, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %12 = reshape(%10, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %13 = cast(%var_88, dtype="float32") /* ty=Tensor[(15, 16, 16), float32] */;
  %14 = @func_61(%11, %12) /* ty=Tensor[(5, 6, 4), bool] */;
  %15 = cast(%14, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
  %16 = cast(%8, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
  %17 = reshape(%15, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %18 = reshape(%16, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %19 = less(%2, %3) /* ty=Tensor[(15, 16, 16), bool] */;
  %20 = atan(%13) /* ty=Tensor[(15, 16, 16), float32] */;
  %21 = @func_61(%17, %18) /* ty=Tensor[(5, 6, 4), bool] */;
  (%19, %8, %var_94, %14, %20, %21)
}

def @func_3175(%var_3137: int32, %var_3138: Tensor[(12, 2, 15), int32], %var_3161: Tensor[(1, 120), bool], %var_3170: Tensor[(3840), int16]) -> (Tensor[(12, 2, 15), bool], Tensor[(5, 6, 4), bool], Tensor[(1, 120), bool], Tensor[(5, 6, 4), bool], Tensor[(3840), int16]) {
  %22 = cast(%var_3137, dtype="bool") /* ty=bool */;
  %23 = cast(%var_3138, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
  %24 = cast(%var_3161, dtype="bool") /* ty=Tensor[(1, 120), bool] */;
  %25 = cast(%var_3161, dtype="bool") /* ty=Tensor[(1, 120), bool] */;
  %26 = reshape(%24, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %27 = reshape(%25, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %28 = cast(%var_3137, dtype="int16") /* ty=int16 */;
  %29 = cast(%var_3170, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %30 = cast(%var_3161, dtype="bool") /* ty=Tensor[(1, 120), bool] */;
  %31 = reshape(%28, newshape=[]) /* ty=int16 */;
  %32 = reshape(%29, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), int16] */;
  %33 = reshape(%30, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %34 = @func_130(%31, %32, %33) /* ty=(Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) */;
  %35 = not_equal(%22, %23) /* ty=Tensor[(12, 2, 15), bool] */;
  %36 = @func_61(%26, %27) /* ty=Tensor[(5, 6, 4), bool] */;
  %37 = %34.1;
  (%35, %36, %var_3161, %37, %var_3170)
}

def @func_10491(%var_10478: Tensor[(140), int32]) -> (Tensor[(11, 15, 13), float32], Tensor[(140), int32], Tensor[(22), float64], Tensor[(1386), float32], Tensor[(140), int32]) {
  %38 = @func_7318() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %39 = cast(meta[relay.Constant][1] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(1386), float32] */, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %41 = cast(%var_10478, dtype="int32") /* ty=Tensor[(140), int32] */;
  %42 = reshape(%39, newshape=[11, 2, 1]) /* ty=Tensor[(11, 2, 1), float64] */;
  %43 = reshape(%40, newshape=[1386]) /* ty=Tensor[(1386), float32] */;
  %44 = reshape(%41, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %45 = @func_7976(%42, %43, %44) /* ty=(Tensor[(11, 2, 1), float64], Tensor[(140), int32], Tensor[(1386), float32], Tensor[(11, 2, 140), bool], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 2, 1), float32], Tensor[(11, 15, 13), float64]) */;
  %46 = %38.0;
  %47 = %45.1;
  (%46, %47, meta[relay.Constant][1] /* ty=Tensor[(22), float64] */, meta[relay.Constant][2] /* ty=Tensor[(1386), float32] */, %var_10478)
}

def @func_3769() -> (Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) {
  %48 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %49 = %48.0;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %51 = exp(%50) /* ty=Tensor[(11, 15, 13), float32] */;
  %52 = cast(%49, dtype="uint16") /* ty=Tensor[(11, 15, 13), uint16] */;
  %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%51, dtype="uint16") /* ty=Tensor[(11, 15, 13), uint16] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %57 = reshape(%56, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %58 = @func_2113(%57) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %59 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %60 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %61 = multiply(%54, %55) /* ty=Tensor[(11, 15, 13), uint16] */;
  %62 = %58.0;
  %63 = %59.0;
  %64 = %60.0;
  (%61, %62, meta[relay.Constant][3] /* ty=Tensor[(140), int32] */, %63, %64)
}

def @func_3389() -> (Tensor[(11, 15, 13), float64],) {
  %65 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %66 = %65.0;
  (%66,)
}

def @func_4827() -> (Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) {
  %67 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %68 = @func_4334() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %69 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %70 = %67.0;
  %71 = %68.0;
  %72 = %69.0;
  (%70, %71, %72)
}

def @func_4574(%var_4543: Tensor[(140), int32], %var_4557: Tensor[(78), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(2145), float64], Tensor[(980), float32], Tensor[(78), float64], int16, Tensor[(120), bool], Tensor[(11, 15, 13), float64]) {
  %73 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %74 = cast(%var_4543, dtype="int32") /* ty=Tensor[(140), int32] */;
  %75 = reshape(%74, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %76 = @func_2113(%75) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %78 = cast(%var_4557, dtype="float64") /* ty=Tensor[(78), float64] */;
  %79 = cast(meta[relay.Constant][5] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %81 = %73.0;
  %82 = cast(%81, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %83 = cast(%var_4543, dtype="int32") /* ty=Tensor[(140), int32] */;
  %84 = reshape(%77, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), float32] */;
  %85 = reshape(%78, newshape=[13, 6]) /* ty=Tensor[(13, 6), float64] */;
  %86 = reshape(%79, newshape=[]) /* ty=int16 */;
  %87 = reshape(%80, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %88 = reshape(%82, newshape=[2145]) /* ty=Tensor[(2145), float64] */;
  %89 = reshape(%83, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %90 = @func_2683(%84, %85, %86, %87, %88, %89) /* ty=(Tensor[(7, 14, 10), float32], int16, Tensor[(13, 6), float64], int16, Tensor[(3840), int16], Tensor[(120), bool], Tensor[(8, 182), uint64], Tensor[(2145), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %91 = cast(%var_4543, dtype="int32") /* ty=Tensor[(140), int32] */;
  %92 = %76.1;
  %93 = cast(%92, dtype="int32") /* ty=Tensor[(4, 7, 5), int32] */;
  %94 = reshape(%91, newshape=[5, 28]) /* ty=Tensor[(5, 28), int32] */;
  %95 = reshape(%93, newshape=[5, 28]) /* ty=Tensor[(5, 28), int32] */;
  %96 = @func_3616(%94, %95) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(2, 6, 6), bool], Tensor[(5, 28), int32]) */;
  %97 = %90.7;
  %98 = %96.0;
  (%81, %92, %var_4543, %97, meta[relay.Constant][4] /* ty=Tensor[(980), float32] */, %var_4557, meta[relay.Constant][5] /* ty=int16 */, meta[relay.Constant][6] /* ty=Tensor[(120), bool] */, %98)
}

def @func_26(%var_16: Tensor[(12, 15, 2), float64]) -> Tensor[(12, 15, 2), uint32] {
  %99 = cast(%var_16, dtype="float64") /* ty=Tensor[(12, 15, 2), float64] */;
  %100 = sigmoid(%99) /* ty=Tensor[(12, 15, 2), float64] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(12, 15, 2), float64] */;
  %102 = log2(%101) /* ty=Tensor[(12, 15, 2), float64] */;
  %103 = cast(%100, dtype="uint32") /* ty=Tensor[(12, 15, 2), uint32] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="uint32") /* ty=Tensor[(12, 15, 2), uint32] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  maximum(%105, %106) /* ty=Tensor[(12, 15, 2), uint32] */
}

def @func_4334() -> (Tensor[(11, 15, 13), float64],) {
  %107 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %108 = %107.0;
  %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %113 = floor_mod(%111, %112) /* ty=Tensor[(11, 15, 13), float64] */;
  (%113,)
}

def @func_4955(%var_4898: Tensor[(14, 8, 13), bool], %var_4922: Tensor[(14, 8, 13), uint64]) -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), bool]) {
  %114 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %115 = @func_4055() /* ty=Tensor[(14, 8, 13), uint64] */;
  %116 = cast(%var_4922, dtype="uint32") /* ty=Tensor[(14, 8, 13), uint32] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="uint32") /* ty=Tensor[(14, 8, 13), uint32] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %120 = bitwise_xor(%118, %119) /* ty=Tensor[(14, 8, 13), uint32] */;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(14, 8, 13), float32] */;
  %122 = sinh(%121) /* ty=Tensor[(14, 8, 13), float32] */;
  %123 = cast(%115, dtype="uint64") /* ty=Tensor[(14, 8, 13), uint64] */;
  %124 = reshape(%123, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), uint64] */;
  %125 = @func_163(%124) /* ty=(Tensor[(14, 8, 13), uint64],) */;
  %126 = %125.0;
  %127 = cast(%115, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = less(%129, %130) /* ty=Tensor[(14, 8, 13), bool] */;
  %132 = cast(%var_4898, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = logical_or(%134, %135) /* ty=Tensor[(14, 8, 13), bool] */;
  %137 = cast(%136, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
  %138 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%122, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %141 = %114.0;
  %142 = equal(%139, %140) /* ty=Tensor[(14, 8, 13), bool] */;
  (%141, %142)
}

def @func_10016() -> (Tensor[(1456), uint64], Tensor[(11, 15, 13), float64], Tensor[(360), float64], uint32) {
  %143 = @func_8136() /* ty=(Tensor[(1456), uint64],) */;
  %144 = @func_5434() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %145 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %146 = reshape(%145, newshape=[]) /* ty=uint32 */;
  %147 = @func_7225(%146) /* ty=(Tensor[(11, 15, 13), float32], Tensor[(360), float64], uint32, Tensor[(390), uint32], Tensor[(180, 2), float64]) */;
  %148 = %143.0;
  %149 = %144.0;
  %150 = %147.1;
  (%148, %149, %150, meta[relay.Constant][8] /* ty=uint32 */)
}

def @func_4759() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) {
  %151 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %152 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %153 = %152.0;
  %154 = cast(%153, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %155 = atan(%154) /* ty=Tensor[(11, 15, 13), float64] */;
  %156 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
  %157 = %156.1;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %159 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%155, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %162 = %151.0;
  %163 = divide(%160, %161) /* ty=Tensor[(11, 15, 13), float64] */;
  (%162, %163)
}

def @func_61(%var_50: Tensor[(5, 6, 4), bool], %var_51: Tensor[(5, 6, 4), bool]) -> Tensor[(5, 6, 4), bool] {
  %164 = cast(%var_51, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
  %165 = shape_of(%var_50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_50, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%166, %167) /* ty=Tensor[(5, 6, 4), bool] */
}

def @func_6194(%var_6170: Tensor[(6, 20), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
  %168 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %169 = @func_4108() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], Tensor[(6, 20), bool]) */;
  %170 = %169.2;
  %171 = cast(%var_6170, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(2), int32] */;
  %173 = cast(%170, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %175 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %177 = cast(meta[relay.Constant][9] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %178 = reshape(%176, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %179 = reshape(%177, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %180 = @func_1786(%178, %179) /* ty=(Tensor[(4, 7, 5), int32],) */;
  %181 = %168.0;
  %182 = equal(%173, %174) /* ty=Tensor[(6, 20), bool] */;
  %183 = %175.0;
  %184 = %180.0;
  (%181, %182, %183, %184, meta[relay.Constant][9] /* ty=Tensor[(140), int32] */)
}

def @func_10237(%var_10231: Tensor[(975), bool]) -> (Tensor[(14, 8, 13), uint64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) {
  %185 = @func_6359() /* ty=(Tensor[(14, 8, 13), uint64],) */;
  %186 = cast(%var_10231, dtype="bool") /* ty=Tensor[(975), bool] */;
  %187 = reshape(%186, newshape=[15, 5, 13]) /* ty=Tensor[(15, 5, 13), bool] */;
  %188 = @func_8526(%187) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(15, 5, 13), bool]) */;
  %189 = %185.0;
  %190 = %188.1;
  (%189, %190, %var_10231)
}

def @func_2683(%var_2626: Tensor[(7, 14, 10), float32], %var_2631: Tensor[(13, 6), float64], %var_2632: int16, %var_2634: Tensor[(120), bool], %var_2643: Tensor[(2145), float64], %var_2665: Tensor[(140), int32]) -> (Tensor[(7, 14, 10), float32], int16, Tensor[(13, 6), float64], int16, Tensor[(3840), int16], Tensor[(120), bool], Tensor[(8, 182), uint64], Tensor[(2145), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
  %191 = cast(%var_2626, dtype="float32") /* ty=Tensor[(7, 14, 10), float32] */;
  %192 = cast(%var_2631, dtype="float64") /* ty=Tensor[(13, 6), float64] */;
  %193 = cast(%var_2632, dtype="int16") /* ty=int16 */;
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %195 = cast(%var_2634, dtype="bool") /* ty=Tensor[(120), bool] */;
  %196 = reshape(%192, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float64] */;
  %197 = reshape(%193, newshape=[]) /* ty=int16 */;
  %198 = reshape(%194, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %199 = reshape(%195, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %200 = @func_1523(%196, %197, %198, %199) /* ty=(Tensor[(3, 2, 13), float64], Tensor[(15, 16, 16), bool], int16, Tensor[(3840), int16], Tensor[(120), bool]) */;
  %201 = cast(%var_2643, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %202 = reshape(%201, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float64] */;
  %203 = @func_858(%202) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */;
  %204 = cast(%var_2665, dtype="int32") /* ty=Tensor[(140), int32] */;
  %205 = cast(%var_2665, dtype="int32") /* ty=Tensor[(140), int32] */;
  %206 = reshape(%204, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %207 = reshape(%205, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %208 = @func_1786(%206, %207) /* ty=(Tensor[(4, 7, 5), int32],) */;
  %209 = acosh(%191) /* ty=Tensor[(7, 14, 10), float32] */;
  %210 = %200.2;
  %211 = %203.2;
  %212 = %208.0;
  (%209, %210, %var_2631, %var_2632, meta[relay.Constant][10] /* ty=Tensor[(3840), int16] */, %var_2634, %211, %var_2643, %212, %var_2665)
}

def @func_4225() -> (Tensor[(6, 20), bool],) {
  %213 = @func_4108() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], Tensor[(6, 20), bool]) */;
  %214 = %213.2;
  (%214,)
}

def @func_858(%var_840: Tensor[(11, 13, 15), float64]) -> (Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) {
  %215 = cast(%var_840, dtype="float64") /* ty=Tensor[(11, 13, 15), float64] */;
  %216 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 182), uint64] */, dtype="uint64") /* ty=Tensor[(8, 182), uint64] */;
  %217 = reshape(%216, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), uint64] */;
  %218 = @func_163(%217) /* ty=(Tensor[(14, 8, 13), uint64],) */;
  %219 = sigmoid(%215) /* ty=Tensor[(11, 13, 15), float64] */;
  %220 = %218.0;
  (%219, %220, meta[relay.Constant][11] /* ty=Tensor[(8, 182), uint64] */)
}

def @func_8938() -> (Tensor[(11, 15, 13), float64],) {
  %221 = @func_8786() /* ty=Tensor[(11, 15, 13), float64] */;
  (%221,)
}

def @func_11014(%var_10899: Tensor[(360), float64], %var_10943: Tensor[(120), bool], %var_10966: Tensor[(390), uint32], %var_10988: Tensor[(896), float64]) -> (Tensor[(1456), uint16], Tensor[(360), float64], Tensor[(1456), uint64], int16, Tensor[(3840), int16], Tensor[(12, 15, 2), uint16], Tensor[(390), uint32], Tensor[(390), uint32], Tensor[(120, ?), bool], Tensor[(2, 6, 6), bool], Tensor[(8, 14, 8), float64], Tensor[(896), float64], Tensor[(14, 8, 13), uint64]) {
  %222 = @func_8861() /* ty=Tensor[(1456), uint64] */;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %224 = tan(%223) /* ty=Tensor[(1456), float64] */;
  %225 = cast(%222, dtype="uint16") /* ty=Tensor[(1456), uint16] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(1), int32] */;
  %227 = cast(%224, dtype="uint16") /* ty=Tensor[(1456), uint16] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %229 = cast(%var_10899, dtype="float64") /* ty=Tensor[(360), float64] */;
  %230 = reshape(%229, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), float64] */;
  %231 = @func_26(%230) /* ty=Tensor[(12, 15, 2), uint32] */;
  %232 = cast(%231, dtype="float32") /* ty=Tensor[(12, 15, 2), float32] */;
  %233 = cosh(%232) /* ty=Tensor[(12, 15, 2), float32] */;
  %234 = cast(%231, dtype="float64") /* ty=Tensor[(12, 15, 2), float64] */;
  %235 = erf(%234) /* ty=Tensor[(12, 15, 2), float64] */;
  %236 = cast(%235, dtype="uint16") /* ty=Tensor[(12, 15, 2), uint16] */;
  %237 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%233, dtype="uint16") /* ty=Tensor[(12, 15, 2), uint16] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %240 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="uint32") /* ty=uint32 */;
  %241 = cast(%var_10966, dtype="uint32") /* ty=Tensor[(390), uint32] */;
  %242 = cast(%231, dtype="float64") /* ty=Tensor[(12, 15, 2), float64] */;
  %243 = reshape(%240, newshape=[]) /* ty=uint32 */;
  %244 = reshape(%241, newshape=[390]) /* ty=Tensor[(390), uint32] */;
  %245 = reshape(%242, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %246 = @func_5994(%243, %244, %245) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(12, 15, 2), uint32], uint32, Tensor[(390), uint32], Tensor[(360), float64]) */;
  %247 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %248 = cast(meta[relay.Constant][13] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %249 = cast(%var_10943, dtype="bool") /* ty=Tensor[(120), bool] */;
  %250 = reshape(%247, newshape=[]) /* ty=int16 */;
  %251 = reshape(%248, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %252 = reshape(%249, newshape=[120, 1]) /* ty=Tensor[(120, 1), bool] */;
  %253 = @func_7768(%250, %251, %252) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int16, Tensor[(3840), int16], Tensor[(120, 1), bool]) */;
  %254 = %253.4;
  %255 = cast(%var_10943, dtype="bool") /* ty=Tensor[(120), bool] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(2), int32] */;
  %257 = cast(%254, dtype="bool") /* ty=Tensor[(120, 1), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %259 = @func_10619() /* ty=(Tensor[(2, 6, 6), bool], Tensor[(11, 15, 13), float32]) */;
  %260 = cast(%var_10988, dtype="float64") /* ty=Tensor[(896), float64] */;
  %261 = reshape(%260, newshape=[8, 14, 8]) /* ty=Tensor[(8, 14, 8), float64] */;
  %262 = add(%227, %228) /* ty=Tensor[(1456), uint16] */;
  %263 = @func_8861() /* ty=Tensor[(1456), uint64] */;
  %264 = bitwise_or(%238, %239) /* ty=Tensor[(12, 15, 2), uint16] */;
  %265 = %246.3;
  %266 = less_equal(%257, %258) /* ty=Tensor[(120, ?), bool] */;
  %267 = %259.0;
  %268 = @func_9941(%261) /* ty=Tensor[(8, 14, 8), float64] */;
  %269 = @func_4055() /* ty=Tensor[(14, 8, 13), uint64] */;
  (%262, %var_10899, %263, meta[relay.Constant][12] /* ty=int16 */, meta[relay.Constant][13] /* ty=Tensor[(3840), int16] */, %264, %265, %var_10966, %266, %267, %268, %var_10988, %269)
}

def @func_5118() -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64], Tensor[(1456), uint64]) {
  %270 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %271 = cast(meta[relay.Constant][14] /* ty=Tensor[(1456), uint64] */, dtype="uint64") /* ty=Tensor[(1456), uint64] */;
  %272 = reshape(%271, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), uint64] */;
  %273 = @func_163(%272) /* ty=(Tensor[(14, 8, 13), uint64],) */;
  %274 = %270.0;
  %275 = %273.0;
  (%274, %275, meta[relay.Constant][14] /* ty=Tensor[(1456), uint64] */)
}

def @func_5605(%var_5597: Tensor[(6, 20), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) {
  %276 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
  %277 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %278 = %277.0;
  %279 = cast(%var_5597, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(2), int32] */;
  %281 = cast(%278, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %283 = %276.0;
  %284 = not_equal(%281, %282) /* ty=Tensor[(6, 20), bool] */;
  (%283, %284)
}

def @func_4400(%var_4347: Tensor[(54), uint32]) -> (Tensor[(18), uint32], Tensor[(3, 6, 3), uint16], Tensor[(140), int32], Tensor[(11, 15, 13), float64]) {
  %285 = cast(meta[relay.Constant][15] /* ty=Tensor[(18), uint32] */, dtype="uint32") /* ty=Tensor[(18), uint32] */;
  %286 = cast(%var_4347, dtype="uint32") /* ty=Tensor[(54), uint32] */;
  %287 = reshape(%285, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
  %288 = reshape(%286, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), uint32] */;
  %289 = @func_4303(%287, %288) /* ty=Tensor[(3, 6, 3), uint32] */;
  %290 = cast(%var_4347, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="uint16") /* ty=Tensor[(3, 6, 3), uint16] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %294 = @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %295 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %296 = %295.0;
  %297 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 15, 13), float64] */, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%296, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %301 = power(%299, %300) /* ty=Tensor[(11, 15, 13), float32] */;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %303 = add(%292, %293) /* ty=Tensor[(3, 6, 3), uint16] */;
  %304 = %294.2;
  %305 = log(%302) /* ty=Tensor[(11, 15, 13), float64] */;
  (meta[relay.Constant][15] /* ty=Tensor[(18), uint32] */, %303, %304, %305)
}

def @func_10619() -> (Tensor[(2, 6, 6), bool], Tensor[(11, 15, 13), float32]) {
  %306 = @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %307 = @func_7318() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %308 = %306.1;
  %309 = %307.0;
  (%308, %309)
}

def @func_7112() -> (Tensor[(15, 5, 13), bool],) {
  %310 = @func_6770() /* ty=(Tensor[(15, 5, 13), bool], Tensor[(360), int32], Tensor[(360), int32]) */;
  %311 = %310.0;
  (%311,)
}

def @func_10542() -> Tensor[(6, 20), bool] {
  %312 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %312.0
}

def @func_9702() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float32]) {
  %313 = @func_7195() /* ty=(Tensor[(6, 20), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 10, 10), float32], Tensor[(1456), uint64], Tensor[(5, 6, 4), bool]) */;
  %314 = %313.1;
  %315 = @func_6733() /* ty=Tensor[(11, 15, 13), float32] */;
  (%314, %315)
}

def @func_10533(%var_10531: Tensor[(140), int32]) -> (Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
  %316 = @func_7112() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %317 = cast(%var_10531, dtype="int32") /* ty=Tensor[(140), int32] */;
  %318 = cast(%var_10531, dtype="int32") /* ty=Tensor[(140), int32] */;
  %319 = reshape(%317, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %320 = reshape(%318, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %321 = @func_1786(%319, %320) /* ty=(Tensor[(4, 7, 5), int32],) */;
  %322 = %316.0;
  %323 = %321.0;
  (%322, %323, %var_10531)
}

def @func_5779(%var_5759: Tensor[(360, 1), int32]) -> (Tensor[(11, 10, 10), float32], Tensor[(3, 6, 3), uint32], Tensor[(6, 3), uint32], Tensor[(54), uint32], Tensor[(1, 120), bool], Tensor[(360, 1), int32], Tensor[(5, 6, 4), bool]) {
  %324 = @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */;
  %325 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 3), uint32] */, dtype="uint32") /* ty=Tensor[(6, 3), uint32] */;
  %326 = cast(meta[relay.Constant][18] /* ty=Tensor[(54), uint32] */, dtype="uint32") /* ty=Tensor[(54), uint32] */;
  %327 = reshape(%325, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
  %328 = reshape(%326, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), uint32] */;
  %329 = cast(%var_5759, dtype="int32") /* ty=Tensor[(360, 1), int32] */;
  %330 = reshape(%329, newshape=[360]) /* ty=Tensor[(360), int32] */;
  %331 = @func_4687(%330) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) */;
  %332 = %331.1;
  %333 = cast(%332, dtype="bool") /* ty=Tensor[(1, 120), bool] */;
  %334 = cast(%332, dtype="bool") /* ty=Tensor[(1, 120), bool] */;
  %335 = reshape(%333, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %336 = reshape(%334, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %337 = %324.0;
  %338 = @func_4303(%327, %328) /* ty=Tensor[(3, 6, 3), uint32] */;
  %339 = @func_61(%335, %336) /* ty=Tensor[(5, 6, 4), bool] */;
  (%337, %338, meta[relay.Constant][17] /* ty=Tensor[(6, 3), uint32] */, meta[relay.Constant][18] /* ty=Tensor[(54), uint32] */, %332, %var_5759, %339)
}

def @func_6226() -> (Tensor[(15, 5, 13), bool],) {
  %340 = @func_5838() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %341 = %340.0;
  (%341,)
}

def @func_6398() -> Tensor[(6, 20), bool] {
  %342 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %342.2
}

def @func_4996(%var_4985: Tensor[(12, 16, 12), float64]) -> (Tensor[(12, 16, 12), float64], Tensor[(11, 15, 13), float64]) {
  %343 = cast(%var_4985, dtype="float64") /* ty=Tensor[(12, 16, 12), float64] */;
  %344 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
  %345 = cos(%343) /* ty=Tensor[(12, 16, 12), float64] */;
  %346 = %344.0;
  (%345, %346)
}

def @func_5838() -> (Tensor[(15, 5, 13), bool],) {
  %347 = @func_5467() /* ty=Tensor[(15, 5, 13), bool] */;
  (%347,)
}

def @func_9492() -> (Tensor[(15, 5, 13), bool],) {
  %348 = @func_8034() /* ty=Tensor[(15, 5, 13), bool] */;
  (%348,)
}

def @func_11366(%var_11345: Tensor[(4, 5, 10), uint32], %var_11346: Tensor[(4, 5, 10), uint32]) -> (Tensor[(1456), uint64], Tensor[(4, 5, 10), float64], Tensor[(4, 5, 10), float32]) {
  %349 = cast(%var_11346, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
  %350 = shape_of(%var_11345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_11345, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %353 = greater(%351, %352) /* ty=Tensor[(4, 5, 10), bool] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(4, 5, 10), float64] */;
  %355 = cast(%var_11345, dtype="float32") /* ty=Tensor[(4, 5, 10), float32] */;
  %356 = @func_7795() /* ty=Tensor[(1456), uint64] */;
  %357 = exp(%354) /* ty=Tensor[(4, 5, 10), float64] */;
  %358 = erf(%355) /* ty=Tensor[(4, 5, 10), float32] */;
  (%356, %357, %358)
}

def @func_8666(%var_8651: Tensor[(15, 5, 13), float64]) -> (Tensor[(15, 5, 13), int8],) {
  %359 = @func_6628() /* ty=Tensor[(15, 5, 13), float64] */;
  %360 = cast(%var_8651, dtype="int8") /* ty=Tensor[(15, 5, 13), int8] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="int8") /* ty=Tensor[(15, 5, 13), int8] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %364 = minimum(%362, %363) /* ty=Tensor[(15, 5, 13), int8] */;
  (%364,)
}

def @func_7488() -> (Tensor[(11, 15, 13), float32],) {
  %365 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
  %366 = %365.1;
  (%366,)
}

def @func_3668(%var_3658: Tensor[(7, 1, 13), float64]) -> Tensor[(7, 1, 13), bool] {
  %367 = cast(0.401228f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %368 = cast(%var_3658, dtype="bool") /* ty=Tensor[(7, 1, 13), bool] */;
  less_equal(%367, %368) /* ty=Tensor[(7, 1, 13), bool] */
}

def @func_7768(%var_7764: int16, %var_7765: Tensor[(3840), int16], %var_7766: Tensor[(120, 1), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int16, Tensor[(3840), int16], Tensor[(120, 1), bool]) {
  %369 = cast(%var_7764, dtype="int16") /* ty=int16 */;
  %370 = cast(%var_7765, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %371 = cast(%var_7766, dtype="bool") /* ty=Tensor[(120, 1), bool] */;
  %372 = reshape(%369, newshape=[]) /* ty=int16 */;
  %373 = reshape(%370, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), int16] */;
  %374 = reshape(%371, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %375 = @func_130(%372, %373, %374) /* ty=(Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) */;
  %376 = @func_5635() /* ty=Tensor[(11, 15, 13), float64] */;
  %377 = %375.5;
  (%376, %377, %var_7764, %var_7765, %var_7766)
}

def @func_6628() -> Tensor[(15, 5, 13), float64] {
  %378 = @func_6077() /* ty=Tensor[(15, 5, 13), float32] */;
  %379 = cast(%378, dtype="float64") /* ty=Tensor[(15, 5, 13), float64] */;
  exp(%379) /* ty=Tensor[(15, 5, 13), float64] */
}

def @func_7729(%var_7723: Tensor[(6, 20), bool]) -> (Tensor[(11, 15, 13), bool], Tensor[(360), int32], Tensor[(360), int32], Tensor[(11, 15, 13), float32], Tensor[(6, 20), bool]) {
  %380 = @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */;
  %381 = cast(meta[relay.Constant][19] /* ty=Tensor[(360), int32] */, dtype="int32") /* ty=Tensor[(360), int32] */;
  %382 = reshape(%381, newshape=[360]) /* ty=Tensor[(360), int32] */;
  %383 = @func_4687(%382) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) */;
  %384 = @func_6398() /* ty=Tensor[(6, 20), bool] */;
  %385 = cast(%var_7723, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(2), int32] */;
  %387 = cast(%384, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %389 = %380.2;
  %390 = %383.3;
  %391 = @func_4669() /* ty=Tensor[(11, 15, 13), float32] */;
  %392 = greater_equal(%387, %388) /* ty=Tensor[(6, 20), bool] */;
  (%389, %390, meta[relay.Constant][19] /* ty=Tensor[(360), int32] */, %391, %392)
}

def @func_4687(%var_4679: Tensor[(360), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) {
  %393 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %394 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %395 = cast(%var_4679, dtype="int32") /* ty=Tensor[(360), int32] */;
  %396 = cast(meta[relay.Constant][20] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %397 = cast(meta[relay.Constant][21] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %398 = reshape(%394, newshape=[]) /* ty=int32 */;
  %399 = reshape(%395, newshape=[12, 2, 15]) /* ty=Tensor[(12, 2, 15), int32] */;
  %400 = reshape(%396, newshape=[1, 120]) /* ty=Tensor[(1, 120), bool] */;
  %401 = reshape(%397, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %402 = @func_3175(%398, %399, %400, %401) /* ty=(Tensor[(12, 2, 15), bool], Tensor[(5, 6, 4), bool], Tensor[(1, 120), bool], Tensor[(5, 6, 4), bool], Tensor[(3840), int16]) */;
  %403 = %393.0;
  %404 = %402.2;
  (%403, %404, 2 /* ty=int32 */, %var_4679, meta[relay.Constant][20] /* ty=Tensor[(120), bool] */, meta[relay.Constant][21] /* ty=Tensor[(3840), int16] */)
}

def @func_4486() -> (Tensor[(6, 20), bool],) {
  %405 = @func_4225() /* ty=(Tensor[(6, 20), bool],) */;
  %406 = %405.0;
  (%406,)
}

def @func_11519() -> (Tensor[(6, 20), float64],) {
  %407 = @func_8389() /* ty=Tensor[(6, 20), bool] */;
  %408 = cast(%407, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %409 = atan(%408) /* ty=Tensor[(6, 20), float64] */;
  (%409,)
}

def @func_10763() -> (Tensor[(11, 15, 13), float32], Tensor[(11, 10, 10), bool]) {
  %410 = @func_10619() /* ty=(Tensor[(2, 6, 6), bool], Tensor[(11, 15, 13), float32]) */;
  %411 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 1100), float32] */, dtype="float32") /* ty=Tensor[(1, 1100), float32] */;
  %412 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 1100), float32] */, dtype="float32") /* ty=Tensor[(1, 1100), float32] */;
  %413 = reshape(%411, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %414 = reshape(%412, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %415 = @func_3209(%413, %414) /* ty=(Tensor[(11, 10, 10), float32],) */;
  %416 = %415.0;
  %417 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 1100), float32] */, dtype="bool") /* ty=Tensor[(1, 1100), bool] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(11, 10, 10), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %421 = %410.1;
  %422 = greater_equal(%419, %420) /* ty=Tensor[(11, 10, 10), bool] */;
  (%421, %422)
}

def @func_8188() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64], Tensor[(360), int32]) {
  %423 = @func_6876() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %424 = @func_6711() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %425 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %426 = @func_6770() /* ty=(Tensor[(15, 5, 13), bool], Tensor[(360), int32], Tensor[(360), int32]) */;
  %427 = %423.1;
  %428 = %424.0;
  %429 = %425.1;
  %430 = %426.2;
  (%427, %428, %429, %430)
}

def @func_8709() -> (Tensor[(6, 20), float64], Tensor[(6, 20), float64]) {
  %431 = @func_4225() /* ty=(Tensor[(6, 20), bool],) */;
  %432 = %431.0;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %434 = cast(%432, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %435 = acos(%433) /* ty=Tensor[(6, 20), float64] */;
  %436 = erf(%434) /* ty=Tensor[(6, 20), float64] */;
  (%435, %436)
}

def @func_7195() -> (Tensor[(6, 20), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 10, 10), float32], Tensor[(1456), uint64], Tensor[(5, 6, 4), bool]) {
  %437 = @func_6398() /* ty=Tensor[(6, 20), bool] */;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %439 = sin(%438) /* ty=Tensor[(6, 20), float64] */;
  %440 = cast(%439, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %441 = reshape(%440, newshape=[6, 20]) /* ty=Tensor[(6, 20), bool] */;
  %442 = @func_5605(%441) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %443 = @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */;
  %444 = @func_5118() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64], Tensor[(1456), uint64]) */;
  %445 = cast(%437, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %446 = cast(%437, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %447 = reshape(%445, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %448 = reshape(%446, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %449 = %442.0;
  %450 = %443.3;
  %451 = %444.2;
  %452 = @func_61(%447, %448) /* ty=Tensor[(5, 6, 4), bool] */;
  (%439, %449, %450, %451, %452)
}

def @func_4669() -> Tensor[(11, 15, 13), float32] {
  %453 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
  %453.1
}

def @func_11563(%var_11554: Tensor[(18), uint32]) -> (Tensor[(6, 20), bool], Tensor[(3, 6, 3), uint32], Tensor[(18), uint32], Tensor[(54), uint32]) {
  %454 = @func_9243() /* ty=(Tensor[(6, 20), bool], Tensor[(4, 14, 15), float32]) */;
  %455 = cast(%var_11554, dtype="uint32") /* ty=Tensor[(18), uint32] */;
  %456 = cast(meta[relay.Constant][23] /* ty=Tensor[(54), uint32] */, dtype="uint32") /* ty=Tensor[(54), uint32] */;
  %457 = reshape(%455, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
  %458 = reshape(%456, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), uint32] */;
  %459 = %454.0;
  %460 = @func_4303(%457, %458) /* ty=Tensor[(3, 6, 3), uint32] */;
  (%459, %460, %var_11554, meta[relay.Constant][23] /* ty=Tensor[(54), uint32] */)
}

def @func_6928() -> (Tensor[(15, 5, 13), bool],) {
  %461 = @func_6226() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %462 = %461.0;
  (%462,)
}

def @func_9367() -> (Tensor[(11, 15, 13), float64],) {
  %463 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %464 = %463.0;
  (%464,)
}

def @func_10106(%var_10054: Tensor[(390, 1), uint32], %var_10055: Tensor[(360, 1), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool], uint32, uint32, Tensor[(390, 1), uint32], Tensor[(360, 1), float32], Tensor[(11, 15, 13), float64], Tensor[(1456), uint64]) {
  %465 = @func_5701() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %466 = cast(meta[relay.Constant][24] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %467 = cast(%var_10054, dtype="uint32") /* ty=Tensor[(390, 1), uint32] */;
  %468 = cast(%var_10055, dtype="float64") /* ty=Tensor[(360, 1), float64] */;
  %469 = reshape(%466, newshape=[]) /* ty=uint32 */;
  %470 = reshape(%467, newshape=[390]) /* ty=Tensor[(390), uint32] */;
  %471 = reshape(%468, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %472 = @func_5994(%469, %470, %471) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(12, 15, 2), uint32], uint32, Tensor[(390), uint32], Tensor[(360), float64]) */;
  %473 = cast(%var_10055, dtype="float32") /* ty=Tensor[(360, 1), float32] */;
  %474 = @func_7351() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) */;
  %475 = %465.0;
  %476 = @func_6045() /* ty=Tensor[(6, 20), bool] */;
  %477 = %472.2;
  %478 = cos(%473) /* ty=Tensor[(360, 1), float32] */;
  %479 = %474.1;
  %480 = @func_8861() /* ty=Tensor[(1456), uint64] */;
  (%475, %476, %477, meta[relay.Constant][24] /* ty=uint32 */, %var_10054, %478, %479, %480)
}

def @func_7795() -> Tensor[(1456), uint64] {
  @func_6816() /* ty=Tensor[(1456), uint64] */
}

def @func_3616(%var_3566: Tensor[(5, 28), int32], %var_3593: Tensor[(5, 28), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(2, 6, 6), bool], Tensor[(5, 28), int32]) {
  %481 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %482 = cast(%var_3566, dtype="int32") /* ty=Tensor[(5, 28), int32] */;
  %483 = reshape(%482, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %484 = @func_2113(%483) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %485 = cast(%var_3593, dtype="int32") /* ty=Tensor[(5, 28), int32] */;
  %486 = shape_of(%var_3566, dtype="int32") /* ty=Tensor[(2), int32] */;
  %487 = cast(%var_3566, dtype="int32") /* ty=Tensor[(5, 28), int32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %489 = %481.0;
  %490 = %484.0;
  %491 = logical_xor(%487, %488) /* ty=Tensor[(5, 28), int32] */;
  (%489, %490, %491)
}

def @func_8786() -> Tensor[(11, 15, 13), float64] {
  %492 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %492.0
}

def @func_9529(%var_9512: Tensor[(1456), uint64]) -> (Tensor[(11, 15, 13), float64], Tensor[(1456), bool], Tensor[(11, 15, 13), float64]) {
  %493 = @func_7502() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %494 = @func_6816() /* ty=Tensor[(1456), uint64] */;
  %495 = cast(%var_9512, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(1), int32] */;
  %497 = cast(%494, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?), bool] */;
  %499 = @func_4334() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %500 = %493.0;
  %501 = less_equal(%497, %498) /* ty=Tensor[(1456), bool] */;
  %502 = %499.0;
  (%500, %501, %502)
}

def @func_6359() -> (Tensor[(14, 8, 13), uint64],) {
  %503 = @func_5317() /* ty=Tensor[(14, 8, 13), uint64] */;
  (%503,)
}

def @func_7351() -> (Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) {
  %504 = @func_5913() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %505 = @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %506 = %504.0;
  %507 = %505.1;
  (%506, %507)
}

def @func_10271() -> Tensor[(4, 14, 15), float32] {
  %508 = @func_9243() /* ty=(Tensor[(6, 20), bool], Tensor[(4, 14, 15), float32]) */;
  %508.1
}

def @func_1786(%var_1781: Tensor[(4, 7, 5), int32], %var_1782: Tensor[(4, 7, 5), int32]) -> (Tensor[(4, 7, 5), int32],) {
  %509 = cast(%var_1782, dtype="int32") /* ty=Tensor[(4, 7, 5), int32] */;
  %510 = shape_of(%var_1781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%var_1781, dtype="int32") /* ty=Tensor[(4, 7, 5), int32] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %513 = multiply(%511, %512) /* ty=Tensor[(4, 7, 5), int32] */;
  (%513,)
}

def @func_3821(%var_3772: uint32, %var_3773: Tensor[(3, 13, 10), uint32], %var_3795: Tensor[(360), float64]) -> (Tensor[(3, 13, 10), uint32], Tensor[(91), float64], Tensor[(7, 1, 13), float32], Tensor[(12, 15, 2), uint32], Tensor[(360), float64]) {
  %514 = cast(%var_3772, dtype="uint32") /* ty=uint32 */;
  %515 = cast(%var_3773, dtype="uint32") /* ty=Tensor[(3, 13, 10), uint32] */;
  %516 = cast(meta[relay.Constant][25] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %517 = reshape(%516, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float64] */;
  %518 = @func_3668(%517) /* ty=Tensor[(7, 1, 13), bool] */;
  %519 = cast(%var_3772, dtype="float32") /* ty=float32 */;
  %520 = cast(%518, dtype="float32") /* ty=Tensor[(7, 1, 13), float32] */;
  %521 = cast(%var_3795, dtype="float64") /* ty=Tensor[(360), float64] */;
  %522 = reshape(%521, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), float64] */;
  %523 = logical_xor(%514, %515) /* ty=Tensor[(3, 13, 10), uint32] */;
  %524 = power(%519, %520) /* ty=Tensor[(7, 1, 13), float32] */;
  %525 = @func_26(%522) /* ty=Tensor[(12, 15, 2), uint32] */;
  (%523, meta[relay.Constant][25] /* ty=Tensor[(91), float64] */, %524, %525, %var_3795)
}

def @func_8578() -> Tensor[(11, 15, 13), float64] {
  %526 = @func_6876() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %526.1
}

def @func_10393(%var_10376: Tensor[(110, 10), float32], %var_10380: Tensor[(15, 5, 13), bool]) -> (Tensor[(15, 5, 13), float32], Tensor[(11, 10, 10), float32], Tensor[(110, 10), float32], Tensor[(15, 5, 13), uint64]) {
  %527 = @func_7112() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %528 = %527.0;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(15, 5, 13), float32] */;
  %530 = cast(%var_10376, dtype="float32") /* ty=Tensor[(110, 10), float32] */;
  %531 = cast(%var_10376, dtype="float32") /* ty=Tensor[(110, 10), float32] */;
  %532 = reshape(%530, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %533 = reshape(%531, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %534 = @func_3209(%532, %533) /* ty=(Tensor[(11, 10, 10), float32],) */;
  %535 = cast(%var_10380, dtype="uint64") /* ty=Tensor[(15, 5, 13), uint64] */;
  %536 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%528, dtype="uint64") /* ty=Tensor[(15, 5, 13), uint64] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %539 = rsqrt(%529) /* ty=Tensor[(15, 5, 13), float32] */;
  %540 = %534.0;
  %541 = bitwise_xor(%537, %538) /* ty=Tensor[(15, 5, 13), uint64] */;
  (%539, %540, %var_10376, %541)
}

def @func_7890() -> Tensor[(11, 15, 13), float64] {
  %542 = @func_7351() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) */;
  %542.1
}

def @func_11103(%var_11095: Tensor[(975), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(1456), float64], Tensor[(15, 5, 13), int8], Tensor[(975), float64]) {
  %543 = @func_5701() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %544 = @func_9631() /* ty=Tensor[(1456), uint64] */;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %546 = cast(%var_11095, dtype="float64") /* ty=Tensor[(975), float64] */;
  %547 = reshape(%546, newshape=[15, 5, 13]) /* ty=Tensor[(15, 5, 13), float64] */;
  %548 = @func_8666(%547) /* ty=(Tensor[(15, 5, 13), int8],) */;
  %549 = %543.0;
  %550 = sqrt(%545) /* ty=Tensor[(1456), float64] */;
  %551 = %548.0;
  (%549, %550, %551, %var_11095)
}

def @func_5141() -> Tensor[(11, 15, 13), float64] {
  %552 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %552.0
}

def @func_4183(%var_4174: int32, %var_4176: Tensor[(120), bool], %var_4177: Tensor[(16, 240), int16], %var_4180: Tensor[(70, 2), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(16, 240), int16], Tensor[(2, 6, 6), bool], Tensor[(70, 2), int32]) {
  %553 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %554 = cast(%var_4174, dtype="int32") /* ty=int32 */;
  %555 = cast(meta[relay.Constant][26] /* ty=Tensor[(360), int32] */, dtype="int32") /* ty=Tensor[(360), int32] */;
  %556 = cast(%var_4176, dtype="bool") /* ty=Tensor[(120), bool] */;
  %557 = cast(%var_4177, dtype="int16") /* ty=Tensor[(16, 240), int16] */;
  %558 = reshape(%554, newshape=[]) /* ty=int32 */;
  %559 = reshape(%555, newshape=[12, 2, 15]) /* ty=Tensor[(12, 2, 15), int32] */;
  %560 = reshape(%556, newshape=[1, 120]) /* ty=Tensor[(1, 120), bool] */;
  %561 = reshape(%557, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %562 = @func_3175(%558, %559, %560, %561) /* ty=(Tensor[(12, 2, 15), bool], Tensor[(5, 6, 4), bool], Tensor[(1, 120), bool], Tensor[(5, 6, 4), bool], Tensor[(3840), int16]) */;
  %563 = cast(%var_4180, dtype="int32") /* ty=Tensor[(70, 2), int32] */;
  %564 = reshape(%563, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %565 = @func_2113(%564) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %566 = %553.0;
  %567 = %562.3;
  %568 = %565.0;
  (%566, %567, %var_4174, meta[relay.Constant][26] /* ty=Tensor[(360), int32] */, %var_4176, %var_4177, %568, %var_4180)
}

def @func_10296(%var_10288: Tensor[(14, 15, 8), float32]) -> Tensor[(14, 15, 8), float32] {
  %569 = cast(%var_10288, dtype="float32") /* ty=Tensor[(14, 15, 8), float32] */;
  log(%569) /* ty=Tensor[(14, 15, 8), float32] */
}

def @func_5467() -> Tensor[(15, 5, 13), bool] {
  %570 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
  %570.2
}

def @func_7225(%var_7218: uint32) -> (Tensor[(11, 15, 13), float32], Tensor[(360), float64], uint32, Tensor[(390), uint32], Tensor[(180, 2), float64]) {
  %571 = cast(%var_7218, dtype="uint32") /* ty=uint32 */;
  %572 = cast(meta[relay.Constant][27] /* ty=Tensor[(390), uint32] */, dtype="uint32") /* ty=Tensor[(390), uint32] */;
  %573 = cast(meta[relay.Constant][28] /* ty=Tensor[(180, 2), float64] */, dtype="float64") /* ty=Tensor[(180, 2), float64] */;
  %574 = reshape(%571, newshape=[]) /* ty=uint32 */;
  %575 = reshape(%572, newshape=[390]) /* ty=Tensor[(390), uint32] */;
  %576 = reshape(%573, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %577 = @func_5994(%574, %575, %576) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(12, 15, 2), uint32], uint32, Tensor[(390), uint32], Tensor[(360), float64]) */;
  %578 = @func_6733() /* ty=Tensor[(11, 15, 13), float32] */;
  %579 = %577.4;
  (%578, %579, %var_7218, meta[relay.Constant][27] /* ty=Tensor[(390), uint32] */, meta[relay.Constant][28] /* ty=Tensor[(180, 2), float64] */)
}

def @func_9118() -> Tensor[(11, 15, 13), float64] {
  %580 = @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %580.0
}

def @func_9050(%var_9019: Tensor[(78), float64]) -> (Tensor[(1456), uint32], int16, Tensor[(980), float32], Tensor[(78), float64], int16, Tensor[(6, 20), bool], Tensor[(140), int32], Tensor[(15, 5, 13), bool], Tensor[(15, 5, 13), bool], Tensor[(2145, 1), float64], Tensor[(11, 15, 13), float64]) {
  %581 = @func_7195() /* ty=(Tensor[(6, 20), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 10, 10), float32], Tensor[(1456), uint64], Tensor[(5, 6, 4), bool]) */;
  %582 = %581.3;
  %583 = @func_6359() /* ty=(Tensor[(14, 8, 13), uint64],) */;
  %584 = %583.0;
  %585 = cast(%584, dtype="uint32") /* ty=Tensor[(14, 8, 13), uint32] */;
  %586 = shape_of(%582, dtype="int32") /* ty=Tensor[(1), int32] */;
  %587 = cast(%582, dtype="uint32") /* ty=Tensor[(1456), uint32] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %589 = cast(meta[relay.Constant][29] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %590 = cast(%var_9019, dtype="float64") /* ty=Tensor[(78), float64] */;
  %591 = cast(meta[relay.Constant][30] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %592 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %593 = cast(meta[relay.Constant][32] /* ty=Tensor[(2145, 1), float64] */, dtype="float64") /* ty=Tensor[(2145, 1), float64] */;
  %594 = cast(meta[relay.Constant][33] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %595 = reshape(%589, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), float32] */;
  %596 = reshape(%590, newshape=[13, 6]) /* ty=Tensor[(13, 6), float64] */;
  %597 = reshape(%591, newshape=[]) /* ty=int16 */;
  %598 = reshape(%592, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %599 = reshape(%593, newshape=[2145]) /* ty=Tensor[(2145), float64] */;
  %600 = reshape(%594, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %601 = @func_2683(%595, %596, %597, %598, %599, %600) /* ty=(Tensor[(7, 14, 10), float32], int16, Tensor[(13, 6), float64], int16, Tensor[(3840), int16], Tensor[(120), bool], Tensor[(8, 182), uint64], Tensor[(2145), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %602 = @func_7112() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %603 = %602.0;
  %604 = cast(%603, dtype="bool") /* ty=Tensor[(15, 5, 13), bool] */;
  %605 = reshape(%604, newshape=[15, 5, 13]) /* ty=Tensor[(15, 5, 13), bool] */;
  %606 = @func_8526(%605) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(15, 5, 13), bool]) */;
  %607 = cast(meta[relay.Constant][32] /* ty=Tensor[(2145, 1), float64] */, dtype="float64") /* ty=Tensor[(2145, 1), float64] */;
  %608 = subtract(%587, %588) /* ty=Tensor[(1456), uint32] */;
  %609 = %601.1;
  %610 = %606.4;
  %611 = acosh(%607) /* ty=Tensor[(2145, 1), float64] */;
  %612 = @func_8578() /* ty=Tensor[(11, 15, 13), float64] */;
  (%608, %609, meta[relay.Constant][29] /* ty=Tensor[(980), float32] */, %var_9019, meta[relay.Constant][30] /* ty=int16 */, meta[relay.Constant][31] /* ty=Tensor[(6, 20), bool] */, meta[relay.Constant][33] /* ty=Tensor[(140), int32] */, %603, %610, %611, %612)
}

def @func_5285() -> Tensor[(11, 15, 13), int64] {
  %613 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
  %613.0
}

def @func_5053() -> Tensor[(15, 5, 13), bool] {
  %614 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
  %614.2
}

def @func_7643(%var_7632: Tensor[(11, 15, 13), float64]) -> (Tensor[(11, 15, 13), bool],) {
  %615 = @func_5635() /* ty=Tensor[(11, 15, 13), float64] */;
  %616 = cast(%var_7632, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %620 = not_equal(%618, %619) /* ty=Tensor[(11, 15, 13), bool] */;
  (%620,)
}

def @func_4303(%var_4297: Tensor[(1, 6, 3), uint32], %var_4298: Tensor[(3, 6, 3), uint32]) -> Tensor[(3, 6, 3), uint32] {
  %621 = cast(%var_4297, dtype="uint32") /* ty=Tensor[(1, 6, 3), uint32] */;
  %622 = cast(%var_4298, dtype="uint32") /* ty=Tensor[(3, 6, 3), uint32] */;
  bitwise_and(%621, %622) /* ty=Tensor[(3, 6, 3), uint32] */
}

def @func_2113(%var_2106: Tensor[(140), int32]) -> (Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
  %623 = cast(-8 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %624 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 6, 6), int64] */, dtype="bool") /* ty=Tensor[(2, 6, 6), bool] */;
  %625 = cast(%var_2106, dtype="int32") /* ty=Tensor[(140), int32] */;
  %626 = cast(%var_2106, dtype="int32") /* ty=Tensor[(140), int32] */;
  %627 = reshape(%625, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %628 = reshape(%626, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %629 = @func_1786(%627, %628) /* ty=(Tensor[(4, 7, 5), int32],) */;
  %630 = greater(%623, %624) /* ty=Tensor[(2, 6, 6), bool] */;
  %631 = %629.0;
  (%630, %631, %var_2106)
}

def @func_4055() -> Tensor[(14, 8, 13), uint64] {
  %632 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %632.1
}

def @func_8526(%var_8507: Tensor[(15, 5, 13), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(15, 5, 13), bool]) {
  %633 = @func_5838() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %634 = %633.0;
  %635 = cast(%var_8507, dtype="bool") /* ty=Tensor[(15, 5, 13), bool] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%634, dtype="bool") /* ty=Tensor[(15, 5, 13), bool] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %639 = cast(meta[relay.Constant][35] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %640 = cast(meta[relay.Constant][35] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %641 = reshape(%639, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %642 = reshape(%640, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %643 = @func_1786(%641, %642) /* ty=(Tensor[(4, 7, 5), int32],) */;
  %644 = @func_5635() /* ty=Tensor[(11, 15, 13), float64] */;
  %645 = logical_or(%637, %638) /* ty=Tensor[(15, 5, 13), bool] */;
  %646 = %643.0;
  %647 = @func_5467() /* ty=Tensor[(15, 5, 13), bool] */;
  (%644, %645, %646, meta[relay.Constant][35] /* ty=Tensor[(140), int32] */, %647)
}

def @func_3209(%var_3199: Tensor[(11, 10, 10), float32], %var_3200: Tensor[(11, 10, 10), float32]) -> (Tensor[(11, 10, 10), float32],) {
  %648 = cast(%var_3200, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %649 = shape_of(%var_3199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%var_3199, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %652 = floor_divide(%650, %651) /* ty=Tensor[(11, 10, 10), float32] */;
  (%652,)
}

def @func_9477(%var_9462: Tensor[(6, 20), bool]) -> Tensor[(6, 20), int8] {
  %653 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %654 = %653.0;
  %655 = cast(%var_9462, dtype="int8") /* ty=Tensor[(6, 20), int8] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(2), int32] */;
  %657 = cast(%654, dtype="int8") /* ty=Tensor[(6, 20), int8] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  bitwise_and(%657, %658) /* ty=Tensor[(6, 20), int8] */
}

def @func_3339() -> (Tensor[(11, 15, 13), float64],) {
  %659 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %660 = %659.0;
  (%660,)
}

def @func_8034() -> Tensor[(15, 5, 13), bool] {
  %661 = @func_6928() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %661.0
}

def @func_6876() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) {
  %662 = @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %663 = %662.1;
  %664 = cast(%663, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %665 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %666 = @func_5635() /* ty=Tensor[(11, 15, 13), float64] */;
  %667 = sinh(%664) /* ty=Tensor[(11, 15, 13), float64] */;
  %668 = %665.0;
  (%666, %667, %668)
}

def @func_11052(%var_11042: Tensor[(11, 14, 11), float64]) -> Tensor[(11, 14, 11), float64] {
  %669 = cast(%var_11042, dtype="float64") /* ty=Tensor[(11, 14, 11), float64] */;
  log2(%669) /* ty=Tensor[(11, 14, 11), float64] */
}

def @func_4426() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) {
  %670 = @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %671 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %672 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %673 = cast(meta[relay.Constant][36] /* ty=Tensor[(975), bool] */, dtype="bool") /* ty=Tensor[(975), bool] */;
  %674 = reshape(%672, newshape=[]) /* ty=bool */;
  %675 = reshape(%673, newshape=[15, 5, 13]) /* ty=Tensor[(15, 5, 13), bool] */;
  %676 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %677 = cast(meta[relay.Constant][36] /* ty=Tensor[(975), bool] */, dtype="bool") /* ty=Tensor[(975), bool] */;
  %678 = %670.3;
  %679 = %671.0;
  %680 = @func_2783(%674, %675) /* ty=Tensor[(15, 5, 13), bool] */;
  %681 = greater_equal(%676, %677) /* ty=Tensor[(975), bool] */;
  (%678, %679, %680, %681)
}

def @func_6443() -> (Tensor[(15, 5, 13), bool],) {
  %682 = @func_5053() /* ty=Tensor[(15, 5, 13), bool] */;
  (%682,)
}

def @func_2783(%var_2767: bool, %var_2768: Tensor[(15, 5, 13), bool]) -> Tensor[(15, 5, 13), bool] {
  %683 = cast(%var_2767, dtype="bool") /* ty=bool */;
  %684 = cast(%var_2768, dtype="bool") /* ty=Tensor[(15, 5, 13), bool] */;
  logical_and(%683, %684) /* ty=Tensor[(15, 5, 13), bool] */
}

def @func_9340() -> (Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) {
  %685 = @func_8786() /* ty=Tensor[(11, 15, 13), float64] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %687 = sin(%686) /* ty=Tensor[(11, 15, 13), float32] */;
  %688 = @func_7890() /* ty=Tensor[(11, 15, 13), float64] */;
  (%687, %688)
}

def @func_8302() -> (Tensor[(14, 8, 13), uint64], Tensor[(1, 975), bool], Tensor[(975), float32]) {
  %689 = @func_6359() /* ty=(Tensor[(14, 8, 13), uint64],) */;
  %690 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 975), bool] */, dtype="bool") /* ty=Tensor[(1, 975), bool] */;
  %691 = %689.0;
  %692 = cast(%691, dtype="uint64") /* ty=Tensor[(14, 8, 13), uint64] */;
  %693 = reshape(%690, newshape=[975]) /* ty=Tensor[(975), bool] */;
  %694 = reshape(%692, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), uint64] */;
  %695 = @func_6111(%693, %694) /* ty=(bool, Tensor[(975), bool], Tensor[(15, 5, 13), int32], Tensor[(14, 8, 13), bool]) */;
  %696 = %695.1;
  %697 = cast(%696, dtype="float32") /* ty=Tensor[(975), float32] */;
  %698 = log(%697) /* ty=Tensor[(975), float32] */;
  (%691, meta[relay.Constant][37] /* ty=Tensor[(1, 975), bool] */, %698)
}

def @func_9744(%var_9730: Tensor[(2145), float64]) -> (Tensor[(15, 5, 13), bool], Tensor[(11, 13, 15), float64], Tensor[(2145), float64], Tensor[(15, 5, 13), bool]) {
  %699 = @func_6443() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %700 = cast(%var_9730, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %701 = reshape(%700, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float64] */;
  %702 = @func_858(%701) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */;
  %703 = @func_6928() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %704 = %699.0;
  %705 = %702.0;
  %706 = %703.0;
  (%704, %705, %var_9730, %706)
}

def @func_1523(%var_1510: Tensor[(3, 2, 13), float64], %var_1519: int16, %var_1520: Tensor[(3840), int16], %var_1521: Tensor[(120), bool]) -> (Tensor[(3, 2, 13), float64], Tensor[(15, 16, 16), bool], int16, Tensor[(3840), int16], Tensor[(120), bool]) {
  %707 = cast(%var_1510, dtype="float64") /* ty=Tensor[(3, 2, 13), float64] */;
  %708 = cast(%var_1519, dtype="int16") /* ty=int16 */;
  %709 = cast(%var_1520, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %710 = cast(%var_1521, dtype="bool") /* ty=Tensor[(120), bool] */;
  %711 = reshape(%708, newshape=[]) /* ty=int16 */;
  %712 = reshape(%709, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), int16] */;
  %713 = reshape(%710, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %714 = @func_130(%711, %712, %713) /* ty=(Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) */;
  %715 = sinh(%707) /* ty=Tensor[(3, 2, 13), float64] */;
  %716 = %714.0;
  (%715, %716, %var_1519, %var_1520, %var_1521)
}

def @func_5215(%var_5152: Tensor[(14, 9, 11), float32], %var_5158: Tensor[(140), int32], %var_5165: Tensor[(14, 9, 11), float32]) -> (Tensor[(140), int32], Tensor[(140), int32], Tensor[(14, 9, 11), int16], Tensor[(11, 15, 13), float64], Tensor[(1456), bool], Tensor[(7, 1, 13), bool], Tensor[(91), float64], Tensor[(140), int32], Tensor[(54), uint32]) {
  %717 = cast(%var_5158, dtype="int32") /* ty=Tensor[(140), int32] */;
  %718 = reshape(%717, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %719 = @func_2113(%718) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %720 = cast(%var_5152, dtype="float32") /* ty=Tensor[(14, 9, 11), float32] */;
  %721 = acosh(%720) /* ty=Tensor[(14, 9, 11), float32] */;
  %722 = cast(%var_5165, dtype="int16") /* ty=Tensor[(14, 9, 11), int16] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%721, dtype="int16") /* ty=Tensor[(14, 9, 11), int16] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %726 = cast(meta[relay.Constant][38] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %727 = cast(meta[relay.Constant][38] /* ty=Tensor[(1456), bool] */, dtype="uint64") /* ty=Tensor[(1456), uint64] */;
  %728 = reshape(%726, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), bool] */;
  %729 = reshape(%727, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), uint64] */;
  %730 = @func_4955(%728, %729) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), bool]) */;
  %731 = cast(meta[relay.Constant][39] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %732 = reshape(%731, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float64] */;
  %733 = cast(meta[relay.Constant][40] /* ty=Tensor[(54), uint32] */, dtype="uint32") /* ty=Tensor[(54), uint32] */;
  %734 = reshape(%733, newshape=[54]) /* ty=Tensor[(54), uint32] */;
  %735 = @func_4400(%734) /* ty=(Tensor[(18), uint32], Tensor[(3, 6, 3), uint16], Tensor[(140), int32], Tensor[(11, 15, 13), float64]) */;
  %736 = %719.2;
  %737 = logical_xor(%724, %725) /* ty=Tensor[(14, 9, 11), int16] */;
  %738 = %730.0;
  %739 = @func_3668(%732) /* ty=Tensor[(7, 1, 13), bool] */;
  %740 = %735.2;
  (%736, %var_5158, %737, %738, meta[relay.Constant][38] /* ty=Tensor[(1456), bool] */, %739, meta[relay.Constant][39] /* ty=Tensor[(91), float64] */, %740, meta[relay.Constant][40] /* ty=Tensor[(54), uint32] */)
}

def @func_7976(%var_7910: Tensor[(11, 2, 1), float64], %var_7924: Tensor[(1386), float32], %var_7925: Tensor[(140), int32]) -> (Tensor[(11, 2, 1), float64], Tensor[(140), int32], Tensor[(1386), float32], Tensor[(11, 2, 140), bool], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 2, 1), float32], Tensor[(11, 15, 13), float64]) {
  %741 = cast(%var_7910, dtype="float64") /* ty=Tensor[(11, 2, 1), float64] */;
  %742 = cast(%var_7924, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %743 = cast(%var_7925, dtype="int32") /* ty=Tensor[(140), int32] */;
  %744 = cast(%var_7924, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %745 = reshape(%742, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), float32] */;
  %746 = reshape(%743, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %747 = reshape(%744, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), float32] */;
  %748 = @func_5215(%745, %746, %747) /* ty=(Tensor[(140), int32], Tensor[(140), int32], Tensor[(14, 9, 11), int16], Tensor[(11, 15, 13), float64], Tensor[(1456), bool], Tensor[(7, 1, 13), bool], Tensor[(91), float64], Tensor[(140), int32], Tensor[(54), uint32]) */;
  %749 = cast(%var_7910, dtype="float32") /* ty=Tensor[(11, 2, 1), float32] */;
  %750 = sqrt(%749) /* ty=Tensor[(11, 2, 1), float32] */;
  %751 = cast(%750, dtype="bool") /* ty=Tensor[(11, 2, 1), bool] */;
  %752 = cast(%var_7925, dtype="bool") /* ty=Tensor[(140), bool] */;
  %753 = @func_6876() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %754 = cast(%750, dtype="float32") /* ty=Tensor[(11, 2, 1), float32] */;
  %755 = @func_6876() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %756 = exp(%741) /* ty=Tensor[(11, 2, 1), float64] */;
  %757 = %748.7;
  %758 = less(%751, %752) /* ty=Tensor[(11, 2, 140), bool] */;
  %759 = %753.0;
  %760 = @func_5141() /* ty=Tensor[(11, 15, 13), float64] */;
  %761 = asin(%754) /* ty=Tensor[(11, 2, 1), float32] */;
  %762 = %755.1;
  (%756, %757, %var_7924, %758, %759, %760, %761, %762)
}

def @func_3990() -> (Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) {
  %763 = cast(meta[relay.Constant][41] /* ty=Tensor[(1100), float32] */, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %764 = cast(meta[relay.Constant][41] /* ty=Tensor[(1100), float32] */, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %765 = reshape(%763, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %766 = reshape(%764, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %767 = @func_3209(%765, %766) /* ty=(Tensor[(11, 10, 10), float32],) */;
  %768 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
  %769 = %768.0;
  %770 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %771 = %770.0;
  %772 = cast(%771, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %773 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%769, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %776 = cast(meta[relay.Constant][41] /* ty=Tensor[(1100), float32] */, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %777 = %767.0;
  %778 = cast(%777, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %779 = reshape(%776, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %780 = reshape(%778, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %781 = @func_3209(%779, %780) /* ty=(Tensor[(11, 10, 10), float32],) */;
  %782 = %781.0;
  %783 = cast(%782, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %784 = sin(%783) /* ty=Tensor[(11, 10, 10), float32] */;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %786 = cast(%769, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %787 = reshape(%786, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float64] */;
  %788 = @func_858(%787) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */;
  %789 = less_equal(%774, %775) /* ty=Tensor[(11, 15, 13), bool] */;
  %790 = cos(%785) /* ty=Tensor[(11, 10, 10), float32] */;
  %791 = %788.1;
  (%777, meta[relay.Constant][41] /* ty=Tensor[(1100), float32] */, %789, %790, %791)
}

def @func_6077() -> Tensor[(15, 5, 13), float32] {
  %792 = @func_5053() /* ty=Tensor[(15, 5, 13), bool] */;
  %793 = cast(%792, dtype="float32") /* ty=Tensor[(15, 5, 13), float32] */;
  log(%793) /* ty=Tensor[(15, 5, 13), float32] */
}

def @func_11397() -> uint32 {
  %794 = @func_10016() /* ty=(Tensor[(1456), uint64], Tensor[(11, 15, 13), float64], Tensor[(360), float64], uint32) */;
  %794.3
}

def @func_9767() -> (Tensor[(8, 182), uint64], Tensor[(11, 15, 13), float64]) {
  %795 = @func_4669() /* ty=Tensor[(11, 15, 13), float32] */;
  %796 = cast(%795, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %797 = reshape(%796, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float64] */;
  %798 = @func_858(%797) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */;
  %799 = cast(%795, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %800 = %798.2;
  %801 = log2(%799) /* ty=Tensor[(11, 15, 13), float64] */;
  (%800, %801)
}

def @func_8861() -> Tensor[(1456), uint64] {
  %802 = @func_8136() /* ty=(Tensor[(1456), uint64],) */;
  %802.0
}

def @func_6111(%var_6090: Tensor[(975), bool], %var_6106: Tensor[(14, 8, 13), uint64]) -> (bool, Tensor[(975), bool], Tensor[(15, 5, 13), int32], Tensor[(14, 8, 13), bool]) {
  %803 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %804 = cast(%var_6090, dtype="bool") /* ty=Tensor[(975), bool] */;
  %805 = reshape(%803, newshape=[]) /* ty=bool */;
  %806 = reshape(%804, newshape=[15, 5, 13]) /* ty=Tensor[(15, 5, 13), bool] */;
  %807 = @func_2783(%805, %806) /* ty=Tensor[(15, 5, 13), bool] */;
  %808 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 5, 13), bool] */, dtype="int32") /* ty=Tensor[(15, 5, 13), int32] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%807, dtype="int32") /* ty=Tensor[(15, 5, 13), int32] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %812 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %813 = %812.1;
  %814 = cast(%var_6106, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%813, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %818 = bitwise_and(%810, %811) /* ty=Tensor[(15, 5, 13), int32] */;
  %819 = less_equal(%816, %817) /* ty=Tensor[(14, 8, 13), bool] */;
  (False /* ty=bool */, %var_6090, %818, %819)
}

def @func_163(%var_142: Tensor[(14, 8, 13), uint64]) -> (Tensor[(14, 8, 13), uint64],) {
  %820 = cast(%var_142, dtype="uint64") /* ty=Tensor[(14, 8, 13), uint64] */;
  %821 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(14, 8, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(meta[relay.Constant][43] /* ty=Tensor[(14, 8, 13), uint64] */, dtype="uint64") /* ty=Tensor[(14, 8, 13), uint64] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %824 = right_shift(%822, %823) /* ty=Tensor[(14, 8, 13), uint64] */;
  (%824,)
}

def @func_6270() -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) {
  %825 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %826 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %827 = %825.0;
  %828 = %826.0;
  (%827, %828)
}

def @func_6770() -> (Tensor[(15, 5, 13), bool], Tensor[(360), int32], Tensor[(360), int32]) {
  %829 = cast(meta[relay.Constant][44] /* ty=Tensor[(360), int32] */, dtype="int32") /* ty=Tensor[(360), int32] */;
  %830 = reshape(%829, newshape=[360]) /* ty=Tensor[(360), int32] */;
  %831 = @func_4687(%830) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) */;
  %832 = @func_5467() /* ty=Tensor[(15, 5, 13), bool] */;
  %833 = %831.3;
  (%832, %833, meta[relay.Constant][44] /* ty=Tensor[(360), int32] */)
}

def @func_6711() -> (Tensor[(11, 15, 13), float32],) {
  %834 = @func_5913() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %835 = %834.0;
  %836 = cast(%835, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %837 = acosh(%836) /* ty=Tensor[(11, 15, 13), float32] */;
  (%837,)
}

def @func_9631() -> Tensor[(1456), uint64] {
  @func_7795() /* ty=Tensor[(1456), uint64] */
}

def @func_5635() -> Tensor[(11, 15, 13), float64] {
  %838 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %838.0
}

def @func_5701() -> (Tensor[(11, 15, 13), float64],) {
  %839 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %840 = %839.1;
  (%840,)
}

def @func_10170() -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), int8], Tensor[(6, 20), bool]) {
  %841 = @func_9340() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) */;
  %842 = %841.1;
  %843 = cast(%842, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %844 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %845 = reshape(%844, newshape=[6, 20]) /* ty=Tensor[(6, 20), bool] */;
  %846 = asinh(%843) /* ty=Tensor[(11, 15, 13), float64] */;
  %847 = @func_9477(%845) /* ty=Tensor[(6, 20), int8] */;
  (%846, %847, meta[relay.Constant][45] /* ty=Tensor[(6, 20), bool] */)
}

def @func_7016() -> Tensor[(15, 5, 13), bool] {
  %848 = @func_6443() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %848.0
}

def @func_8351() -> Tensor[(11, 15, 13), float64] {
  %849 = @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %849.0
}

def @main(%var_11667: Tensor[(11, 10, 10), bool]) -> (Tensor[(11, 10, 10), float32],) {
  %850 = @func_10763() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 10, 10), bool]) */;
  %851 = %850.1;
  %852 = cast(%var_11667, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %853 = shape_of(%851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%851, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %856 = multiply(%854, %855) /* ty=Tensor[(11, 10, 10), float32] */;
  (%856,)
}

def @func_5994(%var_5979: uint32, %var_5980: Tensor[(390), uint32], %var_5981: Tensor[(360), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(12, 15, 2), uint32], uint32, Tensor[(390), uint32], Tensor[(360), float64]) {
  %857 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %858 = cast(%var_5979, dtype="uint32") /* ty=uint32 */;
  %859 = cast(%var_5980, dtype="uint32") /* ty=Tensor[(390), uint32] */;
  %860 = cast(%var_5981, dtype="float64") /* ty=Tensor[(360), float64] */;
  %861 = reshape(%858, newshape=[]) /* ty=uint32 */;
  %862 = reshape(%859, newshape=[3, 13, 10]) /* ty=Tensor[(3, 13, 10), uint32] */;
  %863 = reshape(%860, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %864 = @func_3821(%861, %862, %863) /* ty=(Tensor[(3, 13, 10), uint32], Tensor[(91), float64], Tensor[(7, 1, 13), float32], Tensor[(12, 15, 2), uint32], Tensor[(360), float64]) */;
  %865 = %857.0;
  %866 = %864.3;
  (%865, %866, %var_5979, %var_5980, %var_5981)
}

def @func_8136() -> (Tensor[(1456), uint64],) {
  %867 = @func_7795() /* ty=Tensor[(1456), uint64] */;
  (%867,)
}

def @func_9941(%var_9896: Tensor[(8, 14, 8), float64]) -> Tensor[(8, 14, 8), float64] {
  %868 = cast(%var_9896, dtype="float64") /* ty=Tensor[(8, 14, 8), float64] */;
  %869 = asin(%868) /* ty=Tensor[(8, 14, 8), float64] */;
  %870 = cast(%869, dtype="float64") /* ty=Tensor[(8, 14, 8), float64] */;
  cosh(%870) /* ty=Tensor[(8, 14, 8), float64] */
}

def @func_5913() -> (Tensor[(11, 15, 13), float32],) {
  %871 = @func_4669() /* ty=Tensor[(11, 15, 13), float32] */;
  (%871,)
}

def @func_9243() -> (Tensor[(6, 20), bool], Tensor[(4, 14, 15), float32]) {
  %872 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 14, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 15), float32] */;
  %873 = log10(%872) /* ty=Tensor[(4, 14, 15), float32] */;
  %874 = cast(%873, dtype="float32") /* ty=Tensor[(4, 14, 15), float32] */;
  %875 = @func_6398() /* ty=Tensor[(6, 20), bool] */;
  %876 = acosh(%874) /* ty=Tensor[(4, 14, 15), float32] */;
  (%875, %876)
}

def @func_10458() -> (Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), float32], Tensor[(11, 15, 13), float32]) {
  %877 = @func_7016() /* ty=Tensor[(15, 5, 13), bool] */;
  %878 = @func_9492() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %879 = %878.0;
  %880 = cast(%879, dtype="float32") /* ty=Tensor[(15, 5, 13), float32] */;
  %881 = shape_of(%877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%877, dtype="float32") /* ty=Tensor[(15, 5, 13), float32] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %884 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
  %885 = @func_7890() /* ty=Tensor[(11, 15, 13), float64] */;
  %886 = subtract(%882, %883) /* ty=Tensor[(15, 5, 13), float32] */;
  %887 = %884.1;
  (%885, %886, %887)
}

def @func_3532() -> (Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) {
  %888 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %889 = %888.0;
  %890 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 15, 13), float64] */, dtype="int64") /* ty=Tensor[(11, 15, 13), int64] */;
  %891 = shape_of(%889, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(%889, dtype="int64") /* ty=Tensor[(11, 15, 13), int64] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %894 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 15, 13), float64] */, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %895 = maximum(%892, %893) /* ty=Tensor[(11, 15, 13), int64] */;
  %896 = cosh(%894) /* ty=Tensor[(11, 15, 13), float32] */;
  (%895, %896)
}

def @func_5579(%var_5555: Tensor[(360), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float64], Tensor[(360), int32], Tensor[(4, 7, 5), int8], Tensor[(975), float64], Tensor[(11, 15, 13), float64]) {
  %897 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %898 = cast(%var_5555, dtype="int32") /* ty=Tensor[(360), int32] */;
  %899 = reshape(%898, newshape=[360]) /* ty=Tensor[(360), int32] */;
  %900 = @func_4687(%899) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) */;
  %901 = cast(meta[relay.Constant][48] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %902 = reshape(%901, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %903 = @func_2113(%902) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %904 = %903.1;
  %905 = cast(meta[relay.Constant][48] /* ty=Tensor[(140), int32] */, dtype="int8") /* ty=Tensor[(140), int8] */;
  %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%904, dtype="int8") /* ty=Tensor[(4, 7, 5), int8] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %909 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
  %910 = %909.3;
  %911 = cast(%910, dtype="float64") /* ty=Tensor[(975), float64] */;
  %912 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %913 = %897.0;
  %914 = @func_5141() /* ty=Tensor[(11, 15, 13), float64] */;
  %915 = @func_5285() /* ty=Tensor[(11, 15, 13), int64] */;
  %916 = %900.0;
  %917 = bitwise_xor(%907, %908) /* ty=Tensor[(4, 7, 5), int8] */;
  %918 = exp(%911) /* ty=Tensor[(975), float64] */;
  %919 = %912.1;
  (%913, %914, %915, %916, %var_5555, %917, %918, %919)
}

def @func_6816() -> Tensor[(1456), uint64] {
  %920 = @func_5118() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64], Tensor[(1456), uint64]) */;
  %920.2
}

def @func_4108() -> (Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], Tensor[(6, 20), bool]) {
  %921 = @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %922 = cast(meta[relay.Constant][49] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %923 = cast(meta[relay.Constant][49] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %924 = reshape(%922, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %925 = reshape(%923, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %926 = %921.4;
  %927 = @func_61(%924, %925) /* ty=Tensor[(5, 6, 4), bool] */;
  (%926, %927, meta[relay.Constant][49] /* ty=Tensor[(6, 20), bool] */)
}

def @func_6733() -> Tensor[(11, 15, 13), float32] {
  @func_4669() /* ty=Tensor[(11, 15, 13), float32] */
}

def @func_8830() -> (Tensor[(?, 9, 8), bool],) {
  %928 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 8), float32] */;
  %929 = sinh(%928) /* ty=Tensor[(1, 9, 8), float32] */;
  %930 = cast(%929, dtype="bool") /* ty=Tensor[(1, 9, 8), bool] */;
  %931 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(1, 9, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %932 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 9, 8), float32] */, dtype="bool") /* ty=Tensor[(1, 9, 8), bool] */;
  %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %934 = logical_and(%932, %933) /* ty=Tensor[(?, 9, 8), bool] */;
  (%934,)
}

def @func_11147(%var_11134: int32, %var_11135: Tensor[(120), bool]) -> (Tensor[(11, 15, 13), bool], Tensor[(360), int32], int32, Tensor[(120), bool], Tensor[(3840), int16], Tensor[(140), int32]) {
  %935 = @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */;
  %936 = cast(%var_11134, dtype="int32") /* ty=int32 */;
  %937 = cast(%var_11135, dtype="bool") /* ty=Tensor[(120), bool] */;
  %938 = cast(meta[relay.Constant][51] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %939 = cast(meta[relay.Constant][52] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %940 = reshape(%936, newshape=[]) /* ty=int32 */;
  %941 = reshape(%937, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %942 = reshape(%938, newshape=[16, 240]) /* ty=Tensor[(16, 240), int16] */;
  %943 = reshape(%939, newshape=[70, 2]) /* ty=Tensor[(70, 2), int32] */;
  %944 = @func_4183(%940, %941, %942, %943) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(16, 240), int16], Tensor[(2, 6, 6), bool], Tensor[(70, 2), int32]) */;
  %945 = %935.2;
  %946 = %944.3;
  (%945, %946, %var_11134, %var_11135, meta[relay.Constant][51] /* ty=Tensor[(3840), int16] */, meta[relay.Constant][52] /* ty=Tensor[(140), int32] */)
}

def @func_5317() -> Tensor[(14, 8, 13), uint64] {
  %947 = @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */;
  %947.4
}

def @func_8242() -> Tensor[(11, 10, 10), float32] {
  %948 = @func_7195() /* ty=(Tensor[(6, 20), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 10, 10), float32], Tensor[(1456), uint64], Tensor[(5, 6, 4), bool]) */;
  %948.2
}

def @func_5434() -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) {
  %949 = @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %950 = %949.1;
  %951 = cast(%950, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %952 = sigmoid(%951) /* ty=Tensor[(11, 15, 13), float64] */;
  %953 = @func_4055() /* ty=Tensor[(14, 8, 13), uint64] */;
  (%952, %953)
}

def @func_6045() -> Tensor[(6, 20), bool] {
  %954 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %954.0
}

def @func_7502() -> (Tensor[(11, 15, 13), float64],) {
  %955 = @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %956 = %955.3;
  (%956,)
}

def @func_9683() -> (Tensor[(15, 5, 13), float32], Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) {
  %957 = @func_7488() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %958 = @func_6077() /* ty=Tensor[(15, 5, 13), float32] */;
  %959 = %957.0;
  %960 = @func_8786() /* ty=Tensor[(11, 15, 13), float64] */;
  (%958, %959, %960)
}

def @func_3652() -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) {
  %961 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %962 = %961.0;
  %963 = cast(%962, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %964 = reshape(%963, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float64] */;
  %965 = @func_858(%964) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */;
  %966 = %965.1;
  (%962, %966)
}

def @func_8745() -> (Tensor[(11, 15, 13), float32], Tensor[(360), int32], Tensor[(120), bool], Tensor[(5, 6, 4), bool], int16, Tensor[(3840), int16]) {
  %967 = @func_5913() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %968 = cast(meta[relay.Constant][53] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %969 = reshape(%968, newshape=[6, 20]) /* ty=Tensor[(6, 20), bool] */;
  %970 = @func_7729(%969) /* ty=(Tensor[(11, 15, 13), bool], Tensor[(360), int32], Tensor[(360), int32], Tensor[(11, 15, 13), float32], Tensor[(6, 20), bool]) */;
  %971 = cast(meta[relay.Constant][54] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %972 = cast(meta[relay.Constant][55] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %973 = cast(meta[relay.Constant][53] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %974 = reshape(%971, newshape=[]) /* ty=int16 */;
  %975 = reshape(%972, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), int16] */;
  %976 = reshape(%973, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %977 = @func_130(%974, %975, %976) /* ty=(Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) */;
  %978 = %967.0;
  %979 = %970.1;
  %980 = %977.3;
  (%978, %979, meta[relay.Constant][53] /* ty=Tensor[(120), bool] */, %980, meta[relay.Constant][54] /* ty=int16 */, meta[relay.Constant][55] /* ty=Tensor[(3840), int16] */)
}

def @func_11253() -> (Tensor[(15, 5, 13), float64], Tensor[(12, 16, 12), float64], Tensor[(1152, 2), float64]) {
  %981 = @func_7016() /* ty=Tensor[(15, 5, 13), bool] */;
  %982 = cast(%981, dtype="float64") /* ty=Tensor[(15, 5, 13), float64] */;
  %983 = cast(meta[relay.Constant][56] /* ty=Tensor[(1152, 2), float64] */, dtype="float64") /* ty=Tensor[(1152, 2), float64] */;
  %984 = reshape(%983, newshape=[12, 16, 12]) /* ty=Tensor[(12, 16, 12), float64] */;
  %985 = @func_4996(%984) /* ty=(Tensor[(12, 16, 12), float64], Tensor[(11, 15, 13), float64]) */;
  %986 = sigmoid(%982) /* ty=Tensor[(15, 5, 13), float64] */;
  %987 = %985.0;
  (%986, %987, meta[relay.Constant][56] /* ty=Tensor[(1152, 2), float64] */)
}

def @func_7318() -> (Tensor[(11, 15, 13), float32],) {
  %988 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
  %989 = %988.1;
  %990 = cast(%989, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %991 = log10(%990) /* ty=Tensor[(11, 15, 13), float32] */;
  (%991,)
}

def @func_6578(%var_6545: Tensor[(120), bool]) -> (Tensor[(15, 5, 13), float32], Tensor[(15, 5, 13), bool], Tensor[(6, 20), bool], Tensor[(120), bool]) {
  %992 = @func_6226() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %993 = cast(%var_6545, dtype="bool") /* ty=Tensor[(120), bool] */;
  %994 = reshape(%993, newshape=[6, 20]) /* ty=Tensor[(6, 20), bool] */;
  %995 = @func_5605(%994) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %996 = @func_6077() /* ty=Tensor[(15, 5, 13), float32] */;
  %997 = %992.0;
  %998 = %995.1;
  (%996, %997, %998, %var_6545)
}

def @func_8389() -> Tensor[(6, 20), bool] {
  %999 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %999.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4226() -> (Tensor[(6, 20), bool],) {
  %2 = fn () -> (Tensor[(6, 20), bool],) {
    %0 = @func_4108() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], Tensor[(6, 20), bool]) */;
    %1 = %0.2;
    (%1,)
  };
  %2() /* ty=(Tensor[(6, 20), bool],) */
}

def @func_1789(%var_1787: Tensor[(4, 7, 5), int32], %var_1788: Tensor[(4, 7, 5), int32]) -> (Tensor[(4, 7, 5), int32],) {
  %8 = fn (%var_1781: Tensor[(4, 7, 5), int32], %var_1782: Tensor[(4, 7, 5), int32]) -> (Tensor[(4, 7, 5), int32],) {
    %3 = cast(%var_1782, dtype="int32") /* ty=Tensor[(4, 7, 5), int32] */;
    %4 = shape_of(%var_1781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %5 = cast(%var_1781, dtype="int32") /* ty=Tensor[(4, 7, 5), int32] */;
    %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %7 = multiply(%5, %6) /* ty=Tensor[(4, 7, 5), int32] */;
    (%7,)
  };
  %8(%var_1787, %var_1788) /* ty=(Tensor[(4, 7, 5), int32],) */
}

def @func_7353() -> (Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) {
  @func_7351() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) */
}

def @func_4189(%var_4185: int32, %var_4186: Tensor[(120), bool], %var_4187: Tensor[(16, 240), int16], %var_4188: Tensor[(70, 2), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(16, 240), int16], Tensor[(2, 6, 6), bool], Tensor[(70, 2), int32]) {
  @func_4183(%var_4185, %var_4186, %var_4187, %var_4188) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(16, 240), int16], Tensor[(2, 6, 6), bool], Tensor[(70, 2), int32]) */
}

def @func_4487() -> (Tensor[(6, 20), bool],) {
  %11 = fn () -> (Tensor[(6, 20), bool],) {
    %9 = @func_4225() /* ty=(Tensor[(6, 20), bool],) */;
    %10 = %9.0;
    (%10,)
  };
  %11() /* ty=(Tensor[(6, 20), bool],) */
}

def @func_8709() -> (Tensor[(6, 20), float64], Tensor[(6, 20), float64]) {
  %12 = @func_4225() /* ty=(Tensor[(6, 20), bool],) */;
  %13 = %12.0;
  %14 = cast(%13, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %15 = cast(%13, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %16 = acos(%14) /* ty=Tensor[(6, 20), float64] */;
  %17 = erf(%15) /* ty=Tensor[(6, 20), float64] */;
  (%16, %17)
}

def @func_26(%var_16: Tensor[(12, 15, 2), float64]) -> Tensor[(12, 15, 2), uint32] {
  %18 = cast(%var_16, dtype="float64") /* ty=Tensor[(12, 15, 2), float64] */;
  %19 = sigmoid(%18) /* ty=Tensor[(12, 15, 2), float64] */;
  %20 = cast(%19, dtype="float64") /* ty=Tensor[(12, 15, 2), float64] */;
  %21 = log2(%20) /* ty=Tensor[(12, 15, 2), float64] */;
  %22 = cast(%19, dtype="uint32") /* ty=Tensor[(12, 15, 2), uint32] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="uint32") /* ty=Tensor[(12, 15, 2), uint32] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  maximum(%24, %25) /* ty=Tensor[(12, 15, 2), uint32] */
}

def @func_8034() -> Tensor[(15, 5, 13), bool] {
  %26 = @func_6928() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %26.0
}

def @func_4057() -> Tensor[(14, 8, 13), uint64] {
  @func_4055() /* ty=Tensor[(14, 8, 13), uint64] */
}

def @func_8711() -> (Tensor[(6, 20), float64], Tensor[(6, 20), float64]) {
  @func_8709() /* ty=(Tensor[(6, 20), float64], Tensor[(6, 20), float64]) */
}

def @func_11399() -> uint32 {
  @func_11397() /* ty=uint32 */
}

def @func_4574(%var_4543: Tensor[(140), int32], %var_4557: Tensor[(78), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(2145), float64], Tensor[(980), float32], Tensor[(78), float64], int16, Tensor[(120), bool], Tensor[(11, 15, 13), float64]) {
  %27 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %28 = cast(%var_4543, dtype="int32") /* ty=Tensor[(140), int32] */;
  %29 = reshape(%28, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %30 = @func_2113(%29) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %32 = cast(%var_4557, dtype="float64") /* ty=Tensor[(78), float64] */;
  %33 = cast(meta[relay.Constant][1] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %35 = %27.0;
  %36 = cast(%35, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %37 = cast(%var_4543, dtype="int32") /* ty=Tensor[(140), int32] */;
  %38 = reshape(%31, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), float32] */;
  %39 = reshape(%32, newshape=[13, 6]) /* ty=Tensor[(13, 6), float64] */;
  %40 = reshape(%33, newshape=[]) /* ty=int16 */;
  %41 = reshape(%34, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %42 = reshape(%36, newshape=[2145]) /* ty=Tensor[(2145), float64] */;
  %43 = reshape(%37, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %44 = @func_2683(%38, %39, %40, %41, %42, %43) /* ty=(Tensor[(7, 14, 10), float32], int16, Tensor[(13, 6), float64], int16, Tensor[(3840), int16], Tensor[(120), bool], Tensor[(8, 182), uint64], Tensor[(2145), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %45 = cast(%var_4543, dtype="int32") /* ty=Tensor[(140), int32] */;
  %46 = %30.1;
  %47 = cast(%46, dtype="int32") /* ty=Tensor[(4, 7, 5), int32] */;
  %48 = reshape(%45, newshape=[5, 28]) /* ty=Tensor[(5, 28), int32] */;
  %49 = reshape(%47, newshape=[5, 28]) /* ty=Tensor[(5, 28), int32] */;
  %50 = @func_3616(%48, %49) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(2, 6, 6), bool], Tensor[(5, 28), int32]) */;
  %51 = %44.7;
  %52 = %50.0;
  (%35, %46, %var_4543, %51, meta[relay.Constant][0] /* ty=Tensor[(980), float32] */, %var_4557, meta[relay.Constant][1] /* ty=int16 */, meta[relay.Constant][2] /* ty=Tensor[(120), bool] */, %52)
}

def @func_3212(%var_3210: Tensor[(11, 10, 10), float32], %var_3211: Tensor[(11, 10, 10), float32]) -> (Tensor[(11, 10, 10), float32],) {
  %58 = fn (%var_3199: Tensor[(11, 10, 10), float32], %var_3200: Tensor[(11, 10, 10), float32]) -> (Tensor[(11, 10, 10), float32],) {
    %53 = cast(%var_3200, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
    %54 = shape_of(%var_3199, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(%var_3199, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %57 = floor_divide(%55, %56) /* ty=Tensor[(11, 10, 10), float32] */;
    (%57,)
  };
  %58(%var_3210, %var_3211) /* ty=(Tensor[(11, 10, 10), float32],) */
}

def @func_6272() -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) {
  @func_6270() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */
}

def @func_6359() -> (Tensor[(14, 8, 13), uint64],) {
  %59 = @func_5317() /* ty=Tensor[(14, 8, 13), uint64] */;
  (%59,)
}

def @func_6078() -> Tensor[(15, 5, 13), float32] {
  %62 = fn () -> Tensor[(15, 5, 13), float32] {
    %60 = @func_5053() /* ty=Tensor[(15, 5, 13), bool] */;
    %61 = cast(%60, dtype="float32") /* ty=Tensor[(15, 5, 13), float32] */;
    log(%61) /* ty=Tensor[(15, 5, 13), float32] */
  };
  %62() /* ty=Tensor[(15, 5, 13), float32] */
}

def @func_8138() -> (Tensor[(1456), uint64],) {
  @func_8136() /* ty=(Tensor[(1456), uint64],) */
}

def @func_5142() -> Tensor[(11, 15, 13), float64] {
  %64 = fn () -> Tensor[(11, 15, 13), float64] {
    %63 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
    %63.0
  };
  %64() /* ty=Tensor[(11, 15, 13), float64] */
}

def @func_1528(%var_1524: Tensor[(3, 2, 13), float64], %var_1525: int16, %var_1526: Tensor[(3840), int16], %var_1527: Tensor[(120), bool]) -> (Tensor[(3, 2, 13), float64], Tensor[(15, 16, 16), bool], int16, Tensor[(3840), int16], Tensor[(120), bool]) {
  %75 = fn (%var_1510: Tensor[(3, 2, 13), float64], %var_1519: int16, %var_1520: Tensor[(3840), int16], %var_1521: Tensor[(120), bool]) -> (Tensor[(3, 2, 13), float64], Tensor[(15, 16, 16), bool], int16, Tensor[(3840), int16], Tensor[(120), bool]) {
    %65 = cast(%var_1510, dtype="float64") /* ty=Tensor[(3, 2, 13), float64] */;
    %66 = cast(%var_1519, dtype="int16") /* ty=int16 */;
    %67 = cast(%var_1520, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %68 = cast(%var_1521, dtype="bool") /* ty=Tensor[(120), bool] */;
    %69 = reshape(%66, newshape=[]) /* ty=int16 */;
    %70 = reshape(%67, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), int16] */;
    %71 = reshape(%68, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %72 = @func_130(%69, %70, %71) /* ty=(Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) */;
    %73 = sinh(%65) /* ty=Tensor[(3, 2, 13), float64] */;
    %74 = %72.0;
    (%73, %74, %var_1519, %var_1520, %var_1521)
  };
  %75(%var_1524, %var_1525, %var_1526, %var_1527) /* ty=(Tensor[(3, 2, 13), float64], Tensor[(15, 16, 16), bool], int16, Tensor[(3840), int16], Tensor[(120), bool]) */
}

def @func_6361() -> (Tensor[(14, 8, 13), uint64],) {
  @func_6359() /* ty=(Tensor[(14, 8, 13), uint64],) */
}

def @func_10393(%var_10376: Tensor[(110, 10), float32], %var_10380: Tensor[(15, 5, 13), bool]) -> (Tensor[(15, 5, 13), float32], Tensor[(11, 10, 10), float32], Tensor[(110, 10), float32], Tensor[(15, 5, 13), uint64]) {
  %76 = @func_7112() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %77 = %76.0;
  %78 = cast(%77, dtype="float32") /* ty=Tensor[(15, 5, 13), float32] */;
  %79 = cast(%var_10376, dtype="float32") /* ty=Tensor[(110, 10), float32] */;
  %80 = cast(%var_10376, dtype="float32") /* ty=Tensor[(110, 10), float32] */;
  %81 = reshape(%79, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %82 = reshape(%80, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %83 = @func_3209(%81, %82) /* ty=(Tensor[(11, 10, 10), float32],) */;
  %84 = cast(%var_10380, dtype="uint64") /* ty=Tensor[(15, 5, 13), uint64] */;
  %85 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%77, dtype="uint64") /* ty=Tensor[(15, 5, 13), uint64] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %88 = rsqrt(%78) /* ty=Tensor[(15, 5, 13), float32] */;
  %89 = %83.0;
  %90 = bitwise_xor(%86, %87) /* ty=Tensor[(15, 5, 13), uint64] */;
  (%88, %89, %var_10376, %90)
}

def @func_9703() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float32]) {
  %94 = fn () -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float32]) {
    %91 = @func_7195() /* ty=(Tensor[(6, 20), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 10, 10), float32], Tensor[(1456), uint64], Tensor[(5, 6, 4), bool]) */;
    %92 = %91.1;
    %93 = @func_6733() /* ty=Tensor[(11, 15, 13), float32] */;
    (%92, %93)
  };
  %94() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float32]) */
}

def @func_8529(%var_8527: Tensor[(15, 5, 13), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(15, 5, 13), bool]) {
  @func_8526(%var_8527) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(15, 5, 13), bool]) */
}

def @func_10171() -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), int8], Tensor[(6, 20), bool]) {
  %102 = fn () -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), int8], Tensor[(6, 20), bool]) {
    %95 = @func_9340() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) */;
    %96 = %95.1;
    %97 = cast(%96, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
    %98 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
    %99 = reshape(%98, newshape=[6, 20]) /* ty=Tensor[(6, 20), bool] */;
    %100 = asinh(%97) /* ty=Tensor[(11, 15, 13), float64] */;
    %101 = @func_9477(%99) /* ty=Tensor[(6, 20), int8] */;
    (%100, %101, meta[relay.Constant][3] /* ty=Tensor[(6, 20), bool] */)
  };
  %102() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(6, 20), int8], Tensor[(6, 20), bool]) */
}

def @func_8669(%var_8667: Tensor[(15, 5, 13), float64]) -> (Tensor[(15, 5, 13), int8],) {
  @func_8666(%var_8667) /* ty=(Tensor[(15, 5, 13), int8],) */
}

def @func_9342() -> (Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) {
  @func_9340() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) */
}

def @func_8787() -> Tensor[(11, 15, 13), float64] {
  %104 = fn () -> Tensor[(11, 15, 13), float64] {
    %103 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %103.0
  };
  %104() /* ty=Tensor[(11, 15, 13), float64] */
}

def @func_8861() -> Tensor[(1456), uint64] {
  %105 = @func_8136() /* ty=(Tensor[(1456), uint64],) */;
  %105.0
}

def @func_8190() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64], Tensor[(360), int32]) {
  @func_8188() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64], Tensor[(360), int32]) */
}

def @func_3769() -> (Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) {
  %106 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %107 = %106.0;
  %108 = cast(%107, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %109 = exp(%108) /* ty=Tensor[(11, 15, 13), float32] */;
  %110 = cast(%107, dtype="uint16") /* ty=Tensor[(11, 15, 13), uint16] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="uint16") /* ty=Tensor[(11, 15, 13), uint16] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %114 = cast(meta[relay.Constant][4] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %115 = reshape(%114, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %116 = @func_2113(%115) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %117 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %118 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %119 = multiply(%112, %113) /* ty=Tensor[(11, 15, 13), uint16] */;
  %120 = %116.0;
  %121 = %117.0;
  %122 = %118.0;
  (%119, %120, meta[relay.Constant][4] /* ty=Tensor[(140), int32] */, %121, %122)
}

def @func_10536(%var_10534: Tensor[(140), int32]) -> (Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
  @func_10533(%var_10534) /* ty=(Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */
}

def @func_9367() -> (Tensor[(11, 15, 13), float64],) {
  %123 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %124 = %123.0;
  (%124,)
}

def @func_7981(%var_7978: Tensor[(11, 2, 1), float64], %var_7979: Tensor[(1386), float32], %var_7980: Tensor[(140), int32]) -> (Tensor[(11, 2, 1), float64], Tensor[(140), int32], Tensor[(1386), float32], Tensor[(11, 2, 140), bool], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 2, 1), float32], Tensor[(11, 15, 13), float64]) {
  @func_7976(%var_7978, %var_7979, %var_7980) /* ty=(Tensor[(11, 2, 1), float64], Tensor[(140), int32], Tensor[(1386), float32], Tensor[(11, 2, 140), bool], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 2, 1), float32], Tensor[(11, 15, 13), float64]) */
}

def @func_10109(%var_10107: Tensor[(390, 1), uint32], %var_10108: Tensor[(360, 1), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool], uint32, uint32, Tensor[(390, 1), uint32], Tensor[(360, 1), float32], Tensor[(11, 15, 13), float64], Tensor[(1456), uint64]) {
  %141 = fn (%var_10054: Tensor[(390, 1), uint32], %var_10055: Tensor[(360, 1), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool], uint32, uint32, Tensor[(390, 1), uint32], Tensor[(360, 1), float32], Tensor[(11, 15, 13), float64], Tensor[(1456), uint64]) {
    %125 = @func_5701() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %126 = cast(meta[relay.Constant][5] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %127 = cast(%var_10054, dtype="uint32") /* ty=Tensor[(390, 1), uint32] */;
    %128 = cast(%var_10055, dtype="float64") /* ty=Tensor[(360, 1), float64] */;
    %129 = reshape(%126, newshape=[]) /* ty=uint32 */;
    %130 = reshape(%127, newshape=[390]) /* ty=Tensor[(390), uint32] */;
    %131 = reshape(%128, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %132 = @func_5994(%129, %130, %131) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(12, 15, 2), uint32], uint32, Tensor[(390), uint32], Tensor[(360), float64]) */;
    %133 = cast(%var_10055, dtype="float32") /* ty=Tensor[(360, 1), float32] */;
    %134 = @func_7351() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) */;
    %135 = %125.0;
    %136 = @func_6045() /* ty=Tensor[(6, 20), bool] */;
    %137 = %132.2;
    %138 = cos(%133) /* ty=Tensor[(360, 1), float32] */;
    %139 = %134.1;
    %140 = @func_8861() /* ty=Tensor[(1456), uint64] */;
    (%135, %136, %137, meta[relay.Constant][5] /* ty=uint32 */, %var_10054, %138, %139, %140)
  };
  %141(%var_10107, %var_10108) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool], uint32, uint32, Tensor[(390, 1), uint32], Tensor[(360, 1), float32], Tensor[(11, 15, 13), float64], Tensor[(1456), uint64]) */
}

def @func_10764() -> (Tensor[(11, 15, 13), float32], Tensor[(11, 10, 10), bool]) {
  %155 = fn () -> (Tensor[(11, 15, 13), float32], Tensor[(11, 10, 10), bool]) {
    %142 = @func_10619() /* ty=(Tensor[(2, 6, 6), bool], Tensor[(11, 15, 13), float32]) */;
    %143 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 1100), float32] */, dtype="float32") /* ty=Tensor[(1, 1100), float32] */;
    %144 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 1100), float32] */, dtype="float32") /* ty=Tensor[(1, 1100), float32] */;
    %145 = reshape(%143, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
    %146 = reshape(%144, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
    %147 = @func_3209(%145, %146) /* ty=(Tensor[(11, 10, 10), float32],) */;
    %148 = %147.0;
    %149 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 1100), float32] */, dtype="bool") /* ty=Tensor[(1, 1100), bool] */;
    %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %151 = cast(%148, dtype="bool") /* ty=Tensor[(11, 10, 10), bool] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %153 = %142.1;
    %154 = greater_equal(%151, %152) /* ty=Tensor[(11, 10, 10), bool] */;
    (%153, %154)
  };
  %155() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 10, 10), bool]) */
}

def @func_11151(%var_11149: int32, %var_11150: Tensor[(120), bool]) -> (Tensor[(11, 15, 13), bool], Tensor[(360), int32], int32, Tensor[(120), bool], Tensor[(3840), int16], Tensor[(140), int32]) {
  @func_11147(%var_11149, %var_11150) /* ty=(Tensor[(11, 15, 13), bool], Tensor[(360), int32], int32, Tensor[(120), bool], Tensor[(3840), int16], Tensor[(140), int32]) */
}

def @func_11397() -> uint32 {
  %156 = @func_10016() /* ty=(Tensor[(1456), uint64], Tensor[(11, 15, 13), float64], Tensor[(360), float64], uint32) */;
  %156.3
}

def @func_3619(%var_3617: Tensor[(5, 28), int32], %var_3618: Tensor[(5, 28), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(2, 6, 6), bool], Tensor[(5, 28), int32]) {
  %168 = fn (%var_3566: Tensor[(5, 28), int32], %var_3593: Tensor[(5, 28), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(2, 6, 6), bool], Tensor[(5, 28), int32]) {
    %157 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %158 = cast(%var_3566, dtype="int32") /* ty=Tensor[(5, 28), int32] */;
    %159 = reshape(%158, newshape=[140]) /* ty=Tensor[(140), int32] */;
    %160 = @func_2113(%159) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
    %161 = cast(%var_3593, dtype="int32") /* ty=Tensor[(5, 28), int32] */;
    %162 = shape_of(%var_3566, dtype="int32") /* ty=Tensor[(2), int32] */;
    %163 = cast(%var_3566, dtype="int32") /* ty=Tensor[(5, 28), int32] */;
    %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %165 = %157.0;
    %166 = %160.0;
    %167 = logical_xor(%163, %164) /* ty=Tensor[(5, 28), int32] */;
    (%165, %166, %167)
  };
  %168(%var_3617, %var_3618) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(2, 6, 6), bool], Tensor[(5, 28), int32]) */
}

def @func_6578(%var_6545: Tensor[(120), bool]) -> (Tensor[(15, 5, 13), float32], Tensor[(15, 5, 13), bool], Tensor[(6, 20), bool], Tensor[(120), bool]) {
  %169 = @func_6226() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %170 = cast(%var_6545, dtype="bool") /* ty=Tensor[(120), bool] */;
  %171 = reshape(%170, newshape=[6, 20]) /* ty=Tensor[(6, 20), bool] */;
  %172 = @func_5605(%171) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %173 = @func_6077() /* ty=Tensor[(15, 5, 13), float32] */;
  %174 = %169.0;
  %175 = %172.1;
  (%173, %174, %175, %var_6545)
}

def @func_8746() -> (Tensor[(11, 15, 13), float32], Tensor[(360), int32], Tensor[(120), bool], Tensor[(5, 6, 4), bool], int16, Tensor[(3840), int16]) {
  %190 = fn () -> (Tensor[(11, 15, 13), float32], Tensor[(360), int32], Tensor[(120), bool], Tensor[(5, 6, 4), bool], int16, Tensor[(3840), int16]) {
    %176 = @func_5913() /* ty=(Tensor[(11, 15, 13), float32],) */;
    %177 = cast(meta[relay.Constant][7] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %178 = reshape(%177, newshape=[6, 20]) /* ty=Tensor[(6, 20), bool] */;
    %179 = @func_7729(%178) /* ty=(Tensor[(11, 15, 13), bool], Tensor[(360), int32], Tensor[(360), int32], Tensor[(11, 15, 13), float32], Tensor[(6, 20), bool]) */;
    %180 = cast(meta[relay.Constant][8] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %181 = cast(meta[relay.Constant][9] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %182 = cast(meta[relay.Constant][7] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %183 = reshape(%180, newshape=[]) /* ty=int16 */;
    %184 = reshape(%181, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), int16] */;
    %185 = reshape(%182, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %186 = @func_130(%183, %184, %185) /* ty=(Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) */;
    %187 = %176.0;
    %188 = %179.1;
    %189 = %186.3;
    (%187, %188, meta[relay.Constant][7] /* ty=Tensor[(120), bool] */, %189, meta[relay.Constant][8] /* ty=int16 */, meta[relay.Constant][9] /* ty=Tensor[(3840), int16] */)
  };
  %190() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(360), int32], Tensor[(120), bool], Tensor[(5, 6, 4), bool], int16, Tensor[(3840), int16]) */
}

def @func_9492() -> (Tensor[(15, 5, 13), bool],) {
  %191 = @func_8034() /* ty=Tensor[(15, 5, 13), bool] */;
  (%191,)
}

def @func_9683() -> (Tensor[(15, 5, 13), float32], Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) {
  %192 = @func_7488() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %193 = @func_6077() /* ty=Tensor[(15, 5, 13), float32] */;
  %194 = %192.0;
  %195 = @func_8786() /* ty=Tensor[(11, 15, 13), float64] */;
  (%193, %194, %195)
}

def @func_10397(%var_10395: Tensor[(110, 10), float32], %var_10396: Tensor[(15, 5, 13), bool]) -> (Tensor[(15, 5, 13), float32], Tensor[(11, 10, 10), float32], Tensor[(110, 10), float32], Tensor[(15, 5, 13), uint64]) {
  @func_10393(%var_10395, %var_10396) /* ty=(Tensor[(15, 5, 13), float32], Tensor[(11, 10, 10), float32], Tensor[(110, 10), float32], Tensor[(15, 5, 13), uint64]) */
}

def @func_5220(%var_5217: Tensor[(14, 9, 11), float32], %var_5218: Tensor[(140), int32], %var_5219: Tensor[(14, 9, 11), float32]) -> (Tensor[(140), int32], Tensor[(140), int32], Tensor[(14, 9, 11), int16], Tensor[(11, 15, 13), float64], Tensor[(1456), bool], Tensor[(7, 1, 13), bool], Tensor[(91), float64], Tensor[(140), int32], Tensor[(54), uint32]) {
  @func_5215(%var_5217, %var_5218, %var_5219) /* ty=(Tensor[(140), int32], Tensor[(140), int32], Tensor[(14, 9, 11), int16], Tensor[(11, 15, 13), float64], Tensor[(1456), bool], Tensor[(7, 1, 13), bool], Tensor[(91), float64], Tensor[(140), int32], Tensor[(54), uint32]) */
}

def @func_10494(%var_10492: Tensor[(140), int32]) -> (Tensor[(11, 15, 13), float32], Tensor[(140), int32], Tensor[(22), float64], Tensor[(1386), float32], Tensor[(140), int32]) {
  @func_10491(%var_10492) /* ty=(Tensor[(11, 15, 13), float32], Tensor[(140), int32], Tensor[(22), float64], Tensor[(1386), float32], Tensor[(140), int32]) */
}

def @func_8390() -> Tensor[(6, 20), bool] {
  %197 = fn () -> Tensor[(6, 20), bool] {
    %196 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
    %196.0
  };
  %197() /* ty=Tensor[(6, 20), bool] */
}

def @func_5636() -> Tensor[(11, 15, 13), float64] {
  %199 = fn () -> Tensor[(11, 15, 13), float64] {
    %198 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %198.0
  };
  %199() /* ty=Tensor[(11, 15, 13), float64] */
}

def @func_7773(%var_7770: int16, %var_7771: Tensor[(3840), int16], %var_7772: Tensor[(120, 1), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int16, Tensor[(3840), int16], Tensor[(120, 1), bool]) {
  @func_7768(%var_7770, %var_7771, %var_7772) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int16, Tensor[(3840), int16], Tensor[(120, 1), bool]) */
}

def @func_3992() -> (Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) {
  @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */
}

def @func_5913() -> (Tensor[(11, 15, 13), float32],) {
  %200 = @func_4669() /* ty=Tensor[(11, 15, 13), float32] */;
  (%200,)
}

def @func_5839() -> (Tensor[(15, 5, 13), bool],) {
  %202 = fn () -> (Tensor[(15, 5, 13), bool],) {
    %201 = @func_5467() /* ty=Tensor[(15, 5, 13), bool] */;
    (%201,)
  };
  %202() /* ty=(Tensor[(15, 5, 13), bool],) */
}

def @func_10491(%var_10478: Tensor[(140), int32]) -> (Tensor[(11, 15, 13), float32], Tensor[(140), int32], Tensor[(22), float64], Tensor[(1386), float32], Tensor[(140), int32]) {
  %203 = @func_7318() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %204 = cast(meta[relay.Constant][10] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %205 = cast(meta[relay.Constant][11] /* ty=Tensor[(1386), float32] */, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %206 = cast(%var_10478, dtype="int32") /* ty=Tensor[(140), int32] */;
  %207 = reshape(%204, newshape=[11, 2, 1]) /* ty=Tensor[(11, 2, 1), float64] */;
  %208 = reshape(%205, newshape=[1386]) /* ty=Tensor[(1386), float32] */;
  %209 = reshape(%206, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %210 = @func_7976(%207, %208, %209) /* ty=(Tensor[(11, 2, 1), float64], Tensor[(140), int32], Tensor[(1386), float32], Tensor[(11, 2, 140), bool], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 2, 1), float32], Tensor[(11, 15, 13), float64]) */;
  %211 = %203.0;
  %212 = %210.1;
  (%211, %212, meta[relay.Constant][10] /* ty=Tensor[(22), float64] */, meta[relay.Constant][11] /* ty=Tensor[(1386), float32] */, %var_10478)
}

def @func_9744(%var_9730: Tensor[(2145), float64]) -> (Tensor[(15, 5, 13), bool], Tensor[(11, 13, 15), float64], Tensor[(2145), float64], Tensor[(15, 5, 13), bool]) {
  %213 = @func_6443() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %214 = cast(%var_9730, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %215 = reshape(%214, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float64] */;
  %216 = @func_858(%215) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */;
  %217 = @func_6928() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %218 = %213.0;
  %219 = %216.0;
  %220 = %217.0;
  (%218, %219, %var_9730, %220)
}

def @func_9747(%var_9745: Tensor[(2145), float64]) -> (Tensor[(15, 5, 13), bool], Tensor[(11, 13, 15), float64], Tensor[(2145), float64], Tensor[(15, 5, 13), bool]) {
  @func_9744(%var_9745) /* ty=(Tensor[(15, 5, 13), bool], Tensor[(11, 13, 15), float64], Tensor[(2145), float64], Tensor[(15, 5, 13), bool]) */
}

def @func_10619() -> (Tensor[(2, 6, 6), bool], Tensor[(11, 15, 13), float32]) {
  %221 = @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %222 = @func_7318() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %223 = %221.1;
  %224 = %222.0;
  (%223, %224)
}

def @func_3389() -> (Tensor[(11, 15, 13), float64],) {
  %225 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %226 = %225.0;
  (%226,)
}

def @func_8302() -> (Tensor[(14, 8, 13), uint64], Tensor[(1, 975), bool], Tensor[(975), float32]) {
  %227 = @func_6359() /* ty=(Tensor[(14, 8, 13), uint64],) */;
  %228 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 975), bool] */, dtype="bool") /* ty=Tensor[(1, 975), bool] */;
  %229 = %227.0;
  %230 = cast(%229, dtype="uint64") /* ty=Tensor[(14, 8, 13), uint64] */;
  %231 = reshape(%228, newshape=[975]) /* ty=Tensor[(975), bool] */;
  %232 = reshape(%230, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), uint64] */;
  %233 = @func_6111(%231, %232) /* ty=(bool, Tensor[(975), bool], Tensor[(15, 5, 13), int32], Tensor[(14, 8, 13), bool]) */;
  %234 = %233.1;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(975), float32] */;
  %236 = log(%235) /* ty=Tensor[(975), float32] */;
  (%229, meta[relay.Constant][12] /* ty=Tensor[(1, 975), bool] */, %236)
}

def @func_5319() -> Tensor[(14, 8, 13), uint64] {
  @func_5317() /* ty=Tensor[(14, 8, 13), uint64] */
}

def @func_4759() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) {
  %237 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %238 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %239 = %238.0;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %241 = atan(%240) /* ty=Tensor[(11, 15, 13), float64] */;
  %242 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
  %243 = %242.1;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %245 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%241, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %248 = %237.0;
  %249 = divide(%246, %247) /* ty=Tensor[(11, 15, 13), float64] */;
  (%248, %249)
}

def @func_7643(%var_7632: Tensor[(11, 15, 13), float64]) -> (Tensor[(11, 15, 13), bool],) {
  %250 = @func_5635() /* ty=Tensor[(11, 15, 13), float64] */;
  %251 = cast(%var_7632, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %255 = not_equal(%253, %254) /* ty=Tensor[(11, 15, 13), bool] */;
  (%255,)
}

def @func_6047() -> Tensor[(6, 20), bool] {
  @func_6045() /* ty=Tensor[(6, 20), bool] */
}

def @func_10621() -> (Tensor[(2, 6, 6), bool], Tensor[(11, 15, 13), float32]) {
  @func_10619() /* ty=(Tensor[(2, 6, 6), bool], Tensor[(11, 15, 13), float32]) */
}

def @func_5702() -> (Tensor[(11, 15, 13), float64],) {
  %258 = fn () -> (Tensor[(11, 15, 13), float64],) {
    %256 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
    %257 = %256.1;
    (%257,)
  };
  %258() /* ty=(Tensor[(11, 15, 13), float64],) */
}

def @func_6713() -> (Tensor[(11, 15, 13), float32],) {
  @func_6711() /* ty=(Tensor[(11, 15, 13), float32],) */
}

def @func_5435() -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) {
  %264 = fn () -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) {
    %259 = @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
    %260 = %259.1;
    %261 = cast(%260, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
    %262 = sigmoid(%261) /* ty=Tensor[(11, 15, 13), float64] */;
    %263 = @func_4055() /* ty=Tensor[(14, 8, 13), uint64] */;
    (%262, %263)
  };
  %264() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */
}

def @func_9477(%var_9462: Tensor[(6, 20), bool]) -> Tensor[(6, 20), int8] {
  %265 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %266 = %265.0;
  %267 = cast(%var_9462, dtype="int8") /* ty=Tensor[(6, 20), int8] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(2), int32] */;
  %269 = cast(%266, dtype="int8") /* ty=Tensor[(6, 20), int8] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  bitwise_and(%269, %270) /* ty=Tensor[(6, 20), int8] */
}

def @func_4402(%var_4401: Tensor[(54), uint32]) -> (Tensor[(18), uint32], Tensor[(3, 6, 3), uint16], Tensor[(140), int32], Tensor[(11, 15, 13), float64]) {
  %292 = fn (%var_4347: Tensor[(54), uint32]) -> (Tensor[(18), uint32], Tensor[(3, 6, 3), uint16], Tensor[(140), int32], Tensor[(11, 15, 13), float64]) {
    %271 = cast(meta[relay.Constant][13] /* ty=Tensor[(18), uint32] */, dtype="uint32") /* ty=Tensor[(18), uint32] */;
    %272 = cast(%var_4347, dtype="uint32") /* ty=Tensor[(54), uint32] */;
    %273 = reshape(%271, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
    %274 = reshape(%272, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), uint32] */;
    %275 = @func_4303(%273, %274) /* ty=Tensor[(3, 6, 3), uint32] */;
    %276 = cast(%var_4347, dtype="uint16") /* ty=Tensor[(54), uint16] */;
    %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(%275, dtype="uint16") /* ty=Tensor[(3, 6, 3), uint16] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %280 = @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
    %281 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %282 = %281.0;
    %283 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 15, 13), float64] */, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
    %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
    %285 = cast(%282, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
    %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %287 = power(%285, %286) /* ty=Tensor[(11, 15, 13), float32] */;
    %288 = cast(%287, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
    %289 = add(%278, %279) /* ty=Tensor[(3, 6, 3), uint16] */;
    %290 = %280.2;
    %291 = log(%288) /* ty=Tensor[(11, 15, 13), float64] */;
    (meta[relay.Constant][13] /* ty=Tensor[(18), uint32] */, %289, %290, %291)
  };
  %292(%var_4401) /* ty=(Tensor[(18), uint32], Tensor[(3, 6, 3), uint16], Tensor[(140), int32], Tensor[(11, 15, 13), float64]) */
}

def @func_7795() -> Tensor[(1456), uint64] {
  @func_6816() /* ty=Tensor[(1456), uint64] */
}

def @func_5118() -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64], Tensor[(1456), uint64]) {
  %293 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %294 = cast(meta[relay.Constant][15] /* ty=Tensor[(1456), uint64] */, dtype="uint64") /* ty=Tensor[(1456), uint64] */;
  %295 = reshape(%294, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), uint64] */;
  %296 = @func_163(%295) /* ty=(Tensor[(14, 8, 13), uint64],) */;
  %297 = %293.0;
  %298 = %296.0;
  (%297, %298, meta[relay.Constant][15] /* ty=Tensor[(1456), uint64] */)
}

def @func_5120() -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64], Tensor[(1456), uint64]) {
  @func_5118() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64], Tensor[(1456), uint64]) */
}

def @func_8304() -> (Tensor[(14, 8, 13), uint64], Tensor[(1, 975), bool], Tensor[(975), float32]) {
  @func_8302() /* ty=(Tensor[(14, 8, 13), uint64], Tensor[(1, 975), bool], Tensor[(975), float32]) */
}

def @func_3668(%var_3658: Tensor[(7, 1, 13), float64]) -> Tensor[(7, 1, 13), bool] {
  %299 = cast(0.401228f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %300 = cast(%var_3658, dtype="bool") /* ty=Tensor[(7, 1, 13), bool] */;
  less_equal(%299, %300) /* ty=Tensor[(7, 1, 13), bool] */
}

def @func_3771() -> (Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) {
  @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */
}

def @func_4183(%var_4174: int32, %var_4176: Tensor[(120), bool], %var_4177: Tensor[(16, 240), int16], %var_4180: Tensor[(70, 2), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(16, 240), int16], Tensor[(2, 6, 6), bool], Tensor[(70, 2), int32]) {
  %301 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %302 = cast(%var_4174, dtype="int32") /* ty=int32 */;
  %303 = cast(meta[relay.Constant][16] /* ty=Tensor[(360), int32] */, dtype="int32") /* ty=Tensor[(360), int32] */;
  %304 = cast(%var_4176, dtype="bool") /* ty=Tensor[(120), bool] */;
  %305 = cast(%var_4177, dtype="int16") /* ty=Tensor[(16, 240), int16] */;
  %306 = reshape(%302, newshape=[]) /* ty=int32 */;
  %307 = reshape(%303, newshape=[12, 2, 15]) /* ty=Tensor[(12, 2, 15), int32] */;
  %308 = reshape(%304, newshape=[1, 120]) /* ty=Tensor[(1, 120), bool] */;
  %309 = reshape(%305, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %310 = @func_3175(%306, %307, %308, %309) /* ty=(Tensor[(12, 2, 15), bool], Tensor[(5, 6, 4), bool], Tensor[(1, 120), bool], Tensor[(5, 6, 4), bool], Tensor[(3840), int16]) */;
  %311 = cast(%var_4180, dtype="int32") /* ty=Tensor[(70, 2), int32] */;
  %312 = reshape(%311, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %313 = @func_2113(%312) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %314 = %301.0;
  %315 = %310.3;
  %316 = %313.0;
  (%314, %315, %var_4174, meta[relay.Constant][16] /* ty=Tensor[(360), int32] */, %var_4176, %var_4177, %316, %var_4180)
}

def @func_7729(%var_7723: Tensor[(6, 20), bool]) -> (Tensor[(11, 15, 13), bool], Tensor[(360), int32], Tensor[(360), int32], Tensor[(11, 15, 13), float32], Tensor[(6, 20), bool]) {
  %317 = @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */;
  %318 = cast(meta[relay.Constant][17] /* ty=Tensor[(360), int32] */, dtype="int32") /* ty=Tensor[(360), int32] */;
  %319 = reshape(%318, newshape=[360]) /* ty=Tensor[(360), int32] */;
  %320 = @func_4687(%319) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) */;
  %321 = @func_6398() /* ty=Tensor[(6, 20), bool] */;
  %322 = cast(%var_7723, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(2), int32] */;
  %324 = cast(%321, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %326 = %317.2;
  %327 = %320.3;
  %328 = @func_4669() /* ty=Tensor[(11, 15, 13), float32] */;
  %329 = greater_equal(%324, %325) /* ty=Tensor[(6, 20), bool] */;
  (%326, %327, meta[relay.Constant][17] /* ty=Tensor[(360), int32] */, %328, %329)
}

def @func_11521() -> (Tensor[(6, 20), float64],) {
  @func_11519() /* ty=(Tensor[(6, 20), float64],) */
}

def @func_6581(%var_6579: Tensor[(120), bool]) -> (Tensor[(15, 5, 13), float32], Tensor[(15, 5, 13), bool], Tensor[(6, 20), bool], Tensor[(120), bool]) {
  @func_6578(%var_6579) /* ty=(Tensor[(15, 5, 13), float32], Tensor[(15, 5, 13), bool], Tensor[(6, 20), bool], Tensor[(120), bool]) */
}

def @func_4829() -> (Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) {
  @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */
}

def @func_8036() -> Tensor[(15, 5, 13), bool] {
  @func_8034() /* ty=Tensor[(15, 5, 13), bool] */
}

def @func_8352() -> Tensor[(11, 15, 13), float64] {
  %331 = fn () -> Tensor[(11, 15, 13), float64] {
    %330 = @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
    %330.0
  };
  %331() /* ty=Tensor[(11, 15, 13), float64] */
}

def @func_5469() -> Tensor[(15, 5, 13), bool] {
  @func_5467() /* ty=Tensor[(15, 5, 13), bool] */
}

def @func_9531(%var_9530: Tensor[(1456), uint64]) -> (Tensor[(11, 15, 13), float64], Tensor[(1456), bool], Tensor[(11, 15, 13), float64]) {
  %342 = fn (%var_9512: Tensor[(1456), uint64]) -> (Tensor[(11, 15, 13), float64], Tensor[(1456), bool], Tensor[(11, 15, 13), float64]) {
    %332 = @func_7502() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %333 = @func_6816() /* ty=Tensor[(1456), uint64] */;
    %334 = cast(%var_9512, dtype="bool") /* ty=Tensor[(1456), bool] */;
    %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(1), int32] */;
    %336 = cast(%333, dtype="bool") /* ty=Tensor[(1456), bool] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?), bool] */;
    %338 = @func_4334() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %339 = %332.0;
    %340 = less_equal(%336, %337) /* ty=Tensor[(1456), bool] */;
    %341 = %338.0;
    (%339, %340, %341)
  };
  %342(%var_9530) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1456), bool], Tensor[(11, 15, 13), float64]) */
}

def @func_6228() -> (Tensor[(15, 5, 13), bool],) {
  @func_6226() /* ty=(Tensor[(15, 5, 13), bool],) */
}

def @func_6045() -> Tensor[(6, 20), bool] {
  %343 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %343.0
}

def @func_7646(%var_7644: Tensor[(11, 15, 13), float64]) -> (Tensor[(11, 15, 13), bool],) {
  @func_7643(%var_7644) /* ty=(Tensor[(11, 15, 13), bool],) */
}

def @func_6399() -> Tensor[(6, 20), bool] {
  %345 = fn () -> Tensor[(6, 20), bool] {
    %344 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
    %344.2
  };
  %345() /* ty=Tensor[(6, 20), bool] */
}

def @func_11370(%var_11368: Tensor[(4, 5, 10), uint32], %var_11369: Tensor[(4, 5, 10), uint32]) -> (Tensor[(1456), uint64], Tensor[(4, 5, 10), float64], Tensor[(4, 5, 10), float32]) {
  @func_11366(%var_11368, %var_11369) /* ty=(Tensor[(1456), uint64], Tensor[(4, 5, 10), float64], Tensor[(4, 5, 10), float32]) */
}

def @func_11565(%var_11564: Tensor[(18), uint32]) -> (Tensor[(6, 20), bool], Tensor[(3, 6, 3), uint32], Tensor[(18), uint32], Tensor[(54), uint32]) {
  %353 = fn (%var_11554: Tensor[(18), uint32]) -> (Tensor[(6, 20), bool], Tensor[(3, 6, 3), uint32], Tensor[(18), uint32], Tensor[(54), uint32]) {
    %346 = @func_9243() /* ty=(Tensor[(6, 20), bool], Tensor[(4, 14, 15), float32]) */;
    %347 = cast(%var_11554, dtype="uint32") /* ty=Tensor[(18), uint32] */;
    %348 = cast(meta[relay.Constant][18] /* ty=Tensor[(54), uint32] */, dtype="uint32") /* ty=Tensor[(54), uint32] */;
    %349 = reshape(%347, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
    %350 = reshape(%348, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), uint32] */;
    %351 = %346.0;
    %352 = @func_4303(%349, %350) /* ty=Tensor[(3, 6, 3), uint32] */;
    (%351, %352, %var_11554, meta[relay.Constant][18] /* ty=Tensor[(54), uint32] */)
  };
  %353(%var_11564) /* ty=(Tensor[(6, 20), bool], Tensor[(3, 6, 3), uint32], Tensor[(18), uint32], Tensor[(54), uint32]) */
}

def @func_8832() -> (Tensor[(?, 9, 8), bool],) {
  @func_8830() /* ty=(Tensor[(?, 9, 8), bool],) */
}

def @func_858(%var_840: Tensor[(11, 13, 15), float64]) -> (Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) {
  %354 = cast(%var_840, dtype="float64") /* ty=Tensor[(11, 13, 15), float64] */;
  %355 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 182), uint64] */, dtype="uint64") /* ty=Tensor[(8, 182), uint64] */;
  %356 = reshape(%355, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), uint64] */;
  %357 = @func_163(%356) /* ty=(Tensor[(14, 8, 13), uint64],) */;
  %358 = sigmoid(%354) /* ty=Tensor[(11, 13, 15), float64] */;
  %359 = %357.0;
  (%358, %359, meta[relay.Constant][19] /* ty=Tensor[(8, 182), uint64] */)
}

def @func_11253() -> (Tensor[(15, 5, 13), float64], Tensor[(12, 16, 12), float64], Tensor[(1152, 2), float64]) {
  %360 = @func_7016() /* ty=Tensor[(15, 5, 13), bool] */;
  %361 = cast(%360, dtype="float64") /* ty=Tensor[(15, 5, 13), float64] */;
  %362 = cast(meta[relay.Constant][20] /* ty=Tensor[(1152, 2), float64] */, dtype="float64") /* ty=Tensor[(1152, 2), float64] */;
  %363 = reshape(%362, newshape=[12, 16, 12]) /* ty=Tensor[(12, 16, 12), float64] */;
  %364 = @func_4996(%363) /* ty=(Tensor[(12, 16, 12), float64], Tensor[(11, 15, 13), float64]) */;
  %365 = sigmoid(%361) /* ty=Tensor[(15, 5, 13), float64] */;
  %366 = %364.0;
  (%365, %366, meta[relay.Constant][20] /* ty=Tensor[(1152, 2), float64] */)
}

def @func_9494() -> (Tensor[(15, 5, 13), bool],) {
  @func_9492() /* ty=(Tensor[(15, 5, 13), bool],) */
}

def @func_9685() -> (Tensor[(15, 5, 13), float32], Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) {
  @func_9683() /* ty=(Tensor[(15, 5, 13), float32], Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) */
}

def @func_7319() -> (Tensor[(11, 15, 13), float32],) {
  %371 = fn () -> (Tensor[(11, 15, 13), float32],) {
    %367 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
    %368 = %367.1;
    %369 = cast(%368, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
    %370 = log10(%369) /* ty=Tensor[(11, 15, 13), float32] */;
    (%370,)
  };
  %371() /* ty=(Tensor[(11, 15, 13), float32],) */
}

def @func_4999(%var_4997: Tensor[(12, 16, 12), float64]) -> (Tensor[(12, 16, 12), float64], Tensor[(11, 15, 13), float64]) {
  @func_4996(%var_4997) /* ty=(Tensor[(12, 16, 12), float64], Tensor[(11, 15, 13), float64]) */
}

def @func_64(%var_62: Tensor[(5, 6, 4), bool], %var_63: Tensor[(5, 6, 4), bool]) -> Tensor[(5, 6, 4), bool] {
  %376 = fn (%var_50: Tensor[(5, 6, 4), bool], %var_51: Tensor[(5, 6, 4), bool]) -> Tensor[(5, 6, 4), bool] {
    %372 = cast(%var_51, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
    %373 = shape_of(%var_50, dtype="int32") /* ty=Tensor[(3), int32] */;
    %374 = cast(%var_50, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%374, %375) /* ty=Tensor[(5, 6, 4), bool] */
  };
  %376(%var_62, %var_63) /* ty=Tensor[(5, 6, 4), bool] */
}

def @func_10296(%var_10288: Tensor[(14, 15, 8), float32]) -> Tensor[(14, 15, 8), float32] {
  %377 = cast(%var_10288, dtype="float32") /* ty=Tensor[(14, 15, 8), float32] */;
  log(%377) /* ty=Tensor[(14, 15, 8), float32] */
}

def @func_4055() -> Tensor[(14, 8, 13), uint64] {
  %378 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %378.1
}

def @func_8830() -> (Tensor[(?, 9, 8), bool],) {
  %379 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 8), float32] */;
  %380 = sinh(%379) /* ty=Tensor[(1, 9, 8), float32] */;
  %381 = cast(%380, dtype="bool") /* ty=Tensor[(1, 9, 8), bool] */;
  %382 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(1, 9, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 9, 8), float32] */, dtype="bool") /* ty=Tensor[(1, 9, 8), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %385 = logical_and(%383, %384) /* ty=Tensor[(?, 9, 8), bool] */;
  (%385,)
}

def @func_2786(%var_2784: bool, %var_2785: Tensor[(15, 5, 13), bool]) -> Tensor[(15, 5, 13), bool] {
  %388 = fn (%var_2767: bool, %var_2768: Tensor[(15, 5, 13), bool]) -> Tensor[(15, 5, 13), bool] {
    %386 = cast(%var_2767, dtype="bool") /* ty=bool */;
    %387 = cast(%var_2768, dtype="bool") /* ty=Tensor[(15, 5, 13), bool] */;
    logical_and(%386, %387) /* ty=Tensor[(15, 5, 13), bool] */
  };
  %388(%var_2784, %var_2785) /* ty=Tensor[(15, 5, 13), bool] */
}

def @func_7503() -> (Tensor[(11, 15, 13), float64],) {
  %391 = fn () -> (Tensor[(11, 15, 13), float64],) {
    %389 = @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
    %390 = %389.3;
    (%390,)
  };
  %391() /* ty=(Tensor[(11, 15, 13), float64],) */
}

def @func_9120() -> Tensor[(11, 15, 13), float64] {
  @func_9118() /* ty=Tensor[(11, 15, 13), float64] */
}

def @func_8863() -> Tensor[(1456), uint64] {
  @func_8861() /* ty=Tensor[(1456), uint64] */
}

def @func_4761() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) {
  @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */
}

def @func_5317() -> Tensor[(14, 8, 13), uint64] {
  %392 = @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */;
  %392.4
}

def @func_10017() -> (Tensor[(1456), uint64], Tensor[(11, 15, 13), float64], Tensor[(360), float64], uint32) {
  %401 = fn () -> (Tensor[(1456), uint64], Tensor[(11, 15, 13), float64], Tensor[(360), float64], uint32) {
    %393 = @func_8136() /* ty=(Tensor[(1456), uint64],) */;
    %394 = @func_5434() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
    %395 = cast(meta[relay.Constant][22] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %396 = reshape(%395, newshape=[]) /* ty=uint32 */;
    %397 = @func_7225(%396) /* ty=(Tensor[(11, 15, 13), float32], Tensor[(360), float64], uint32, Tensor[(390), uint32], Tensor[(180, 2), float64]) */;
    %398 = %393.0;
    %399 = %394.0;
    %400 = %397.1;
    (%398, %399, %400, meta[relay.Constant][22] /* ty=uint32 */)
  };
  %401() /* ty=(Tensor[(1456), uint64], Tensor[(11, 15, 13), float64], Tensor[(360), float64], uint32) */
}

def @func_7197() -> (Tensor[(6, 20), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 10, 10), float32], Tensor[(1456), uint64], Tensor[(5, 6, 4), bool]) {
  @func_7195() /* ty=(Tensor[(6, 20), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 10, 10), float32], Tensor[(1456), uint64], Tensor[(5, 6, 4), bool]) */
}

def @func_9941(%var_9896: Tensor[(8, 14, 8), float64]) -> Tensor[(8, 14, 8), float64] {
  %402 = cast(%var_9896, dtype="float64") /* ty=Tensor[(8, 14, 8), float64] */;
  %403 = asin(%402) /* ty=Tensor[(8, 14, 8), float64] */;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(8, 14, 8), float64] */;
  cosh(%404) /* ty=Tensor[(8, 14, 8), float64] */
}

def @func_8526(%var_8507: Tensor[(15, 5, 13), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(15, 5, 13), bool]) {
  %405 = @func_5838() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %406 = %405.0;
  %407 = cast(%var_8507, dtype="bool") /* ty=Tensor[(15, 5, 13), bool] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="bool") /* ty=Tensor[(15, 5, 13), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %411 = cast(meta[relay.Constant][23] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %412 = cast(meta[relay.Constant][23] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %413 = reshape(%411, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %414 = reshape(%412, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %415 = @func_1786(%413, %414) /* ty=(Tensor[(4, 7, 5), int32],) */;
  %416 = @func_5635() /* ty=Tensor[(11, 15, 13), float64] */;
  %417 = logical_or(%409, %410) /* ty=Tensor[(15, 5, 13), bool] */;
  %418 = %415.0;
  %419 = @func_5467() /* ty=Tensor[(15, 5, 13), bool] */;
  (%416, %417, %418, meta[relay.Constant][23] /* ty=Tensor[(140), int32] */, %419)
}

def @func_11519() -> (Tensor[(6, 20), float64],) {
  %420 = @func_8389() /* ty=Tensor[(6, 20), bool] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %422 = atan(%421) /* ty=Tensor[(6, 20), float64] */;
  (%422,)
}

def @func_7351() -> (Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) {
  %423 = @func_5913() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %424 = @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %425 = %423.0;
  %426 = %424.1;
  (%425, %426)
}

def @func_3180(%var_3176: int32, %var_3177: Tensor[(12, 2, 15), int32], %var_3178: Tensor[(1, 120), bool], %var_3179: Tensor[(3840), int16]) -> (Tensor[(12, 2, 15), bool], Tensor[(5, 6, 4), bool], Tensor[(1, 120), bool], Tensor[(5, 6, 4), bool], Tensor[(3840), int16]) {
  %443 = fn (%var_3137: int32, %var_3138: Tensor[(12, 2, 15), int32], %var_3161: Tensor[(1, 120), bool], %var_3170: Tensor[(3840), int16]) -> (Tensor[(12, 2, 15), bool], Tensor[(5, 6, 4), bool], Tensor[(1, 120), bool], Tensor[(5, 6, 4), bool], Tensor[(3840), int16]) {
    %427 = cast(%var_3137, dtype="bool") /* ty=bool */;
    %428 = cast(%var_3138, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
    %429 = cast(%var_3161, dtype="bool") /* ty=Tensor[(1, 120), bool] */;
    %430 = cast(%var_3161, dtype="bool") /* ty=Tensor[(1, 120), bool] */;
    %431 = reshape(%429, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
    %432 = reshape(%430, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
    %433 = cast(%var_3137, dtype="int16") /* ty=int16 */;
    %434 = cast(%var_3170, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %435 = cast(%var_3161, dtype="bool") /* ty=Tensor[(1, 120), bool] */;
    %436 = reshape(%433, newshape=[]) /* ty=int16 */;
    %437 = reshape(%434, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), int16] */;
    %438 = reshape(%435, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %439 = @func_130(%436, %437, %438) /* ty=(Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) */;
    %440 = not_equal(%427, %428) /* ty=Tensor[(12, 2, 15), bool] */;
    %441 = @func_61(%431, %432) /* ty=Tensor[(5, 6, 4), bool] */;
    %442 = %439.1;
    (%440, %441, %var_3161, %442, %var_3170)
  };
  %443(%var_3176, %var_3177, %var_3178, %var_3179) /* ty=(Tensor[(12, 2, 15), bool], Tensor[(5, 6, 4), bool], Tensor[(1, 120), bool], Tensor[(5, 6, 4), bool], Tensor[(3840), int16]) */
}

def @func_9768() -> (Tensor[(8, 182), uint64], Tensor[(11, 15, 13), float64]) {
  %451 = fn () -> (Tensor[(8, 182), uint64], Tensor[(11, 15, 13), float64]) {
    %444 = @func_4669() /* ty=Tensor[(11, 15, 13), float32] */;
    %445 = cast(%444, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
    %446 = reshape(%445, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float64] */;
    %447 = @func_858(%446) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */;
    %448 = cast(%444, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
    %449 = %447.2;
    %450 = log2(%448) /* ty=Tensor[(11, 15, 13), float64] */;
    (%449, %450)
  };
  %451() /* ty=(Tensor[(8, 182), uint64], Tensor[(11, 15, 13), float64]) */
}

def @func_11106(%var_11104: Tensor[(975), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(1456), float64], Tensor[(15, 5, 13), int8], Tensor[(975), float64]) {
  @func_11103(%var_11104) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1456), float64], Tensor[(15, 5, 13), int8], Tensor[(975), float64]) */
}

def @func_6111(%var_6090: Tensor[(975), bool], %var_6106: Tensor[(14, 8, 13), uint64]) -> (bool, Tensor[(975), bool], Tensor[(15, 5, 13), int32], Tensor[(14, 8, 13), bool]) {
  %452 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %453 = cast(%var_6090, dtype="bool") /* ty=Tensor[(975), bool] */;
  %454 = reshape(%452, newshape=[]) /* ty=bool */;
  %455 = reshape(%453, newshape=[15, 5, 13]) /* ty=Tensor[(15, 5, 13), bool] */;
  %456 = @func_2783(%454, %455) /* ty=Tensor[(15, 5, 13), bool] */;
  %457 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 5, 13), bool] */, dtype="int32") /* ty=Tensor[(15, 5, 13), int32] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="int32") /* ty=Tensor[(15, 5, 13), int32] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %461 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %462 = %461.1;
  %463 = cast(%var_6106, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %467 = bitwise_and(%459, %460) /* ty=Tensor[(15, 5, 13), int32] */;
  %468 = less_equal(%465, %466) /* ty=Tensor[(14, 8, 13), bool] */;
  (False /* ty=bool */, %var_6090, %467, %468)
}

def @func_11020(%var_11016: Tensor[(360), float64], %var_11017: Tensor[(120), bool], %var_11018: Tensor[(390), uint32], %var_11019: Tensor[(896), float64]) -> (Tensor[(1456), uint16], Tensor[(360), float64], Tensor[(1456), uint64], int16, Tensor[(3840), int16], Tensor[(12, 15, 2), uint16], Tensor[(390), uint32], Tensor[(390), uint32], Tensor[(120, ?), bool], Tensor[(2, 6, 6), bool], Tensor[(8, 14, 8), float64], Tensor[(896), float64], Tensor[(14, 8, 13), uint64]) {
  @func_11014(%var_11016, %var_11017, %var_11018, %var_11019) /* ty=(Tensor[(1456), uint16], Tensor[(360), float64], Tensor[(1456), uint64], int16, Tensor[(3840), int16], Tensor[(12, 15, 2), uint16], Tensor[(390), uint32], Tensor[(390), uint32], Tensor[(120, ?), bool], Tensor[(2, 6, 6), bool], Tensor[(8, 14, 8), float64], Tensor[(896), float64], Tensor[(14, 8, 13), uint64]) */
}

def @func_2690(%var_2684: Tensor[(7, 14, 10), float32], %var_2685: Tensor[(13, 6), float64], %var_2686: int16, %var_2687: Tensor[(120), bool], %var_2688: Tensor[(2145), float64], %var_2689: Tensor[(140), int32]) -> (Tensor[(7, 14, 10), float32], int16, Tensor[(13, 6), float64], int16, Tensor[(3840), int16], Tensor[(120), bool], Tensor[(8, 182), uint64], Tensor[(2145), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
  %491 = fn (%var_2626: Tensor[(7, 14, 10), float32], %var_2631: Tensor[(13, 6), float64], %var_2632: int16, %var_2634: Tensor[(120), bool], %var_2643: Tensor[(2145), float64], %var_2665: Tensor[(140), int32]) -> (Tensor[(7, 14, 10), float32], int16, Tensor[(13, 6), float64], int16, Tensor[(3840), int16], Tensor[(120), bool], Tensor[(8, 182), uint64], Tensor[(2145), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
    %469 = cast(%var_2626, dtype="float32") /* ty=Tensor[(7, 14, 10), float32] */;
    %470 = cast(%var_2631, dtype="float64") /* ty=Tensor[(13, 6), float64] */;
    %471 = cast(%var_2632, dtype="int16") /* ty=int16 */;
    %472 = cast(meta[relay.Constant][25] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %473 = cast(%var_2634, dtype="bool") /* ty=Tensor[(120), bool] */;
    %474 = reshape(%470, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float64] */;
    %475 = reshape(%471, newshape=[]) /* ty=int16 */;
    %476 = reshape(%472, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
    %477 = reshape(%473, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %478 = @func_1523(%474, %475, %476, %477) /* ty=(Tensor[(3, 2, 13), float64], Tensor[(15, 16, 16), bool], int16, Tensor[(3840), int16], Tensor[(120), bool]) */;
    %479 = cast(%var_2643, dtype="float64") /* ty=Tensor[(2145), float64] */;
    %480 = reshape(%479, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float64] */;
    %481 = @func_858(%480) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */;
    %482 = cast(%var_2665, dtype="int32") /* ty=Tensor[(140), int32] */;
    %483 = cast(%var_2665, dtype="int32") /* ty=Tensor[(140), int32] */;
    %484 = reshape(%482, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
    %485 = reshape(%483, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
    %486 = @func_1786(%484, %485) /* ty=(Tensor[(4, 7, 5), int32],) */;
    %487 = acosh(%469) /* ty=Tensor[(7, 14, 10), float32] */;
    %488 = %478.2;
    %489 = %481.2;
    %490 = %486.0;
    (%487, %488, %var_2631, %var_2632, meta[relay.Constant][25] /* ty=Tensor[(3840), int16] */, %var_2634, %489, %var_2643, %490, %var_2665)
  };
  %491(%var_2684, %var_2685, %var_2686, %var_2687, %var_2688, %var_2689) /* ty=(Tensor[(7, 14, 10), float32], int16, Tensor[(13, 6), float64], int16, Tensor[(3840), int16], Tensor[(120), bool], Tensor[(8, 182), uint64], Tensor[(2145), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */
}

def @func_8666(%var_8651: Tensor[(15, 5, 13), float64]) -> (Tensor[(15, 5, 13), int8],) {
  %492 = @func_6628() /* ty=Tensor[(15, 5, 13), float64] */;
  %493 = cast(%var_8651, dtype="int8") /* ty=Tensor[(15, 5, 13), int8] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="int8") /* ty=Tensor[(15, 5, 13), int8] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %497 = minimum(%495, %496) /* ty=Tensor[(15, 5, 13), int8] */;
  (%497,)
}

def @func_7890() -> Tensor[(11, 15, 13), float64] {
  %498 = @func_7351() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) */;
  %498.1
}

def @func_3341() -> (Tensor[(11, 15, 13), float64],) {
  @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */
}

def @func_5215(%var_5152: Tensor[(14, 9, 11), float32], %var_5158: Tensor[(140), int32], %var_5165: Tensor[(14, 9, 11), float32]) -> (Tensor[(140), int32], Tensor[(140), int32], Tensor[(14, 9, 11), int16], Tensor[(11, 15, 13), float64], Tensor[(1456), bool], Tensor[(7, 1, 13), bool], Tensor[(91), float64], Tensor[(140), int32], Tensor[(54), uint32]) {
  %499 = cast(%var_5158, dtype="int32") /* ty=Tensor[(140), int32] */;
  %500 = reshape(%499, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %501 = @func_2113(%500) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
  %502 = cast(%var_5152, dtype="float32") /* ty=Tensor[(14, 9, 11), float32] */;
  %503 = acosh(%502) /* ty=Tensor[(14, 9, 11), float32] */;
  %504 = cast(%var_5165, dtype="int16") /* ty=Tensor[(14, 9, 11), int16] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%503, dtype="int16") /* ty=Tensor[(14, 9, 11), int16] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %508 = cast(meta[relay.Constant][26] /* ty=Tensor[(1456), bool] */, dtype="bool") /* ty=Tensor[(1456), bool] */;
  %509 = cast(meta[relay.Constant][26] /* ty=Tensor[(1456), bool] */, dtype="uint64") /* ty=Tensor[(1456), uint64] */;
  %510 = reshape(%508, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), bool] */;
  %511 = reshape(%509, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), uint64] */;
  %512 = @func_4955(%510, %511) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), bool]) */;
  %513 = cast(meta[relay.Constant][27] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %514 = reshape(%513, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float64] */;
  %515 = cast(meta[relay.Constant][28] /* ty=Tensor[(54), uint32] */, dtype="uint32") /* ty=Tensor[(54), uint32] */;
  %516 = reshape(%515, newshape=[54]) /* ty=Tensor[(54), uint32] */;
  %517 = @func_4400(%516) /* ty=(Tensor[(18), uint32], Tensor[(3, 6, 3), uint16], Tensor[(140), int32], Tensor[(11, 15, 13), float64]) */;
  %518 = %501.2;
  %519 = logical_xor(%506, %507) /* ty=Tensor[(14, 9, 11), int16] */;
  %520 = %512.0;
  %521 = @func_3668(%514) /* ty=Tensor[(7, 1, 13), bool] */;
  %522 = %517.2;
  (%518, %var_5158, %519, %520, meta[relay.Constant][26] /* ty=Tensor[(1456), bool] */, %521, meta[relay.Constant][27] /* ty=Tensor[(91), float64] */, %522, meta[relay.Constant][28] /* ty=Tensor[(54), uint32] */)
}

def @func_4306(%var_4304: Tensor[(1, 6, 3), uint32], %var_4305: Tensor[(3, 6, 3), uint32]) -> Tensor[(3, 6, 3), uint32] {
  %525 = fn (%var_4297: Tensor[(1, 6, 3), uint32], %var_4298: Tensor[(3, 6, 3), uint32]) -> Tensor[(3, 6, 3), uint32] {
    %523 = cast(%var_4297, dtype="uint32") /* ty=Tensor[(1, 6, 3), uint32] */;
    %524 = cast(%var_4298, dtype="uint32") /* ty=Tensor[(3, 6, 3), uint32] */;
    bitwise_and(%523, %524) /* ty=Tensor[(3, 6, 3), uint32] */
  };
  %525(%var_4304, %var_4305) /* ty=Tensor[(3, 6, 3), uint32] */
}

def @func_9052(%var_9051: Tensor[(78), float64]) -> (Tensor[(1456), uint32], int16, Tensor[(980), float32], Tensor[(78), float64], int16, Tensor[(6, 20), bool], Tensor[(140), int32], Tensor[(15, 5, 13), bool], Tensor[(15, 5, 13), bool], Tensor[(2145, 1), float64], Tensor[(11, 15, 13), float64]) {
  %558 = fn (%var_9019: Tensor[(78), float64]) -> (Tensor[(1456), uint32], int16, Tensor[(980), float32], Tensor[(78), float64], int16, Tensor[(6, 20), bool], Tensor[(140), int32], Tensor[(15, 5, 13), bool], Tensor[(15, 5, 13), bool], Tensor[(2145, 1), float64], Tensor[(11, 15, 13), float64]) {
    %526 = @func_7195() /* ty=(Tensor[(6, 20), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 10, 10), float32], Tensor[(1456), uint64], Tensor[(5, 6, 4), bool]) */;
    %527 = %526.3;
    %528 = @func_6359() /* ty=(Tensor[(14, 8, 13), uint64],) */;
    %529 = %528.0;
    %530 = cast(%529, dtype="uint32") /* ty=Tensor[(14, 8, 13), uint32] */;
    %531 = shape_of(%527, dtype="int32") /* ty=Tensor[(1), int32] */;
    %532 = cast(%527, dtype="uint32") /* ty=Tensor[(1456), uint32] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %534 = cast(meta[relay.Constant][29] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
    %535 = cast(%var_9019, dtype="float64") /* ty=Tensor[(78), float64] */;
    %536 = cast(meta[relay.Constant][30] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %537 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
    %538 = cast(meta[relay.Constant][32] /* ty=Tensor[(2145, 1), float64] */, dtype="float64") /* ty=Tensor[(2145, 1), float64] */;
    %539 = cast(meta[relay.Constant][33] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
    %540 = reshape(%534, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), float32] */;
    %541 = reshape(%535, newshape=[13, 6]) /* ty=Tensor[(13, 6), float64] */;
    %542 = reshape(%536, newshape=[]) /* ty=int16 */;
    %543 = reshape(%537, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %544 = reshape(%538, newshape=[2145]) /* ty=Tensor[(2145), float64] */;
    %545 = reshape(%539, newshape=[140]) /* ty=Tensor[(140), int32] */;
    %546 = @func_2683(%540, %541, %542, %543, %544, %545) /* ty=(Tensor[(7, 14, 10), float32], int16, Tensor[(13, 6), float64], int16, Tensor[(3840), int16], Tensor[(120), bool], Tensor[(8, 182), uint64], Tensor[(2145), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
    %547 = @func_7112() /* ty=(Tensor[(15, 5, 13), bool],) */;
    %548 = %547.0;
    %549 = cast(%548, dtype="bool") /* ty=Tensor[(15, 5, 13), bool] */;
    %550 = reshape(%549, newshape=[15, 5, 13]) /* ty=Tensor[(15, 5, 13), bool] */;
    %551 = @func_8526(%550) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(15, 5, 13), bool]) */;
    %552 = cast(meta[relay.Constant][32] /* ty=Tensor[(2145, 1), float64] */, dtype="float64") /* ty=Tensor[(2145, 1), float64] */;
    %553 = subtract(%532, %533) /* ty=Tensor[(1456), uint32] */;
    %554 = %546.1;
    %555 = %551.4;
    %556 = acosh(%552) /* ty=Tensor[(2145, 1), float64] */;
    %557 = @func_8578() /* ty=Tensor[(11, 15, 13), float64] */;
    (%553, %554, meta[relay.Constant][29] /* ty=Tensor[(980), float32] */, %var_9019, meta[relay.Constant][30] /* ty=int16 */, meta[relay.Constant][31] /* ty=Tensor[(6, 20), bool] */, meta[relay.Constant][33] /* ty=Tensor[(140), int32] */, %548, %555, %556, %557)
  };
  %558(%var_9051) /* ty=(Tensor[(1456), uint32], int16, Tensor[(980), float32], Tensor[(78), float64], int16, Tensor[(6, 20), bool], Tensor[(140), int32], Tensor[(15, 5, 13), bool], Tensor[(15, 5, 13), bool], Tensor[(2145, 1), float64], Tensor[(11, 15, 13), float64]) */
}

def @func_4108() -> (Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], Tensor[(6, 20), bool]) {
  %559 = @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %560 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %561 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %562 = reshape(%560, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %563 = reshape(%561, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %564 = %559.4;
  %565 = @func_61(%562, %563) /* ty=Tensor[(5, 6, 4), bool] */;
  (%564, %565, meta[relay.Constant][34] /* ty=Tensor[(6, 20), bool] */)
}

def @func_11054(%var_11053: Tensor[(11, 14, 11), float64]) -> Tensor[(11, 14, 11), float64] {
  %567 = fn (%var_11042: Tensor[(11, 14, 11), float64]) -> Tensor[(11, 14, 11), float64] {
    %566 = cast(%var_11042, dtype="float64") /* ty=Tensor[(11, 14, 11), float64] */;
    log2(%566) /* ty=Tensor[(11, 14, 11), float64] */
  };
  %567(%var_11053) /* ty=Tensor[(11, 14, 11), float64] */
}

def @func_135(%var_132: int16, %var_133: Tensor[(15, 16, 16), int16], %var_134: Tensor[(120), bool]) -> (Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) {
  @func_130(%var_132, %var_133, %var_134) /* ty=(Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) */
}

def @func_3653() -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) {
  %574 = fn () -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) {
    %568 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %569 = %568.0;
    %570 = cast(%569, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
    %571 = reshape(%570, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float64] */;
    %572 = @func_858(%571) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */;
    %573 = %572.1;
    (%569, %573)
  };
  %574() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */
}

def @func_5999(%var_5996: uint32, %var_5997: Tensor[(390), uint32], %var_5998: Tensor[(360), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(12, 15, 2), uint32], uint32, Tensor[(390), uint32], Tensor[(360), float64]) {
  @func_5994(%var_5996, %var_5997, %var_5998) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(12, 15, 2), uint32], uint32, Tensor[(390), uint32], Tensor[(360), float64]) */
}

def @func_4428() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) {
  @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */
}

def @func_9243() -> (Tensor[(6, 20), bool], Tensor[(4, 14, 15), float32]) {
  %575 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 14, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 15), float32] */;
  %576 = log10(%575) /* ty=Tensor[(4, 14, 15), float32] */;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(4, 14, 15), float32] */;
  %578 = @func_6398() /* ty=Tensor[(6, 20), bool] */;
  %579 = acosh(%577) /* ty=Tensor[(4, 14, 15), float32] */;
  (%578, %579)
}

def @func_6226() -> (Tensor[(15, 5, 13), bool],) {
  %580 = @func_5838() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %581 = %580.0;
  (%581,)
}

def @func_5607(%var_5606: Tensor[(6, 20), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) {
  %591 = fn (%var_5597: Tensor[(6, 20), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) {
    %582 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
    %583 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
    %584 = %583.0;
    %585 = cast(%var_5597, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(2), int32] */;
    %587 = cast(%584, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %589 = %582.0;
    %590 = not_equal(%587, %588) /* ty=Tensor[(6, 20), bool] */;
    (%589, %590)
  };
  %591(%var_5606) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */
}

def @func_7113() -> (Tensor[(15, 5, 13), bool],) {
  %594 = fn () -> (Tensor[(15, 5, 13), bool],) {
    %592 = @func_6770() /* ty=(Tensor[(15, 5, 13), bool], Tensor[(360), int32], Tensor[(360), int32]) */;
    %593 = %592.0;
    (%593,)
  };
  %594() /* ty=(Tensor[(15, 5, 13), bool],) */
}

def @func_6196(%var_6195: Tensor[(6, 20), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
  %612 = fn (%var_6170: Tensor[(6, 20), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
    %595 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %596 = @func_4108() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], Tensor[(6, 20), bool]) */;
    %597 = %596.2;
    %598 = cast(%var_6170, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
    %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(2), int32] */;
    %600 = cast(%597, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
    %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %602 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %603 = cast(meta[relay.Constant][36] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
    %604 = cast(meta[relay.Constant][36] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
    %605 = reshape(%603, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
    %606 = reshape(%604, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
    %607 = @func_1786(%605, %606) /* ty=(Tensor[(4, 7, 5), int32],) */;
    %608 = %595.0;
    %609 = equal(%600, %601) /* ty=Tensor[(6, 20), bool] */;
    %610 = %602.0;
    %611 = %607.0;
    (%608, %609, %610, %611, meta[relay.Constant][36] /* ty=Tensor[(140), int32] */)
  };
  %612(%var_6195) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */
}

def @func_8243() -> Tensor[(11, 10, 10), float32] {
  %614 = fn () -> Tensor[(11, 10, 10), float32] {
    %613 = @func_7195() /* ty=(Tensor[(6, 20), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 10, 10), float32], Tensor[(1456), uint64], Tensor[(5, 6, 4), bool]) */;
    %613.2
  };
  %614() /* ty=Tensor[(11, 10, 10), float32] */
}

def @func_9118() -> Tensor[(11, 15, 13), float64] {
  %615 = @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %615.0
}

def @func_6734() -> Tensor[(11, 15, 13), float32] {
  %616 = fn () -> Tensor[(11, 15, 13), float32] {
    @func_4669() /* ty=Tensor[(11, 15, 13), float32] */
  };
  %616() /* ty=Tensor[(11, 15, 13), float32] */
}

def @func_9369() -> (Tensor[(11, 15, 13), float64],) {
  @func_9367() /* ty=(Tensor[(11, 15, 13), float64],) */
}

def @func_11366(%var_11345: Tensor[(4, 5, 10), uint32], %var_11346: Tensor[(4, 5, 10), uint32]) -> (Tensor[(1456), uint64], Tensor[(4, 5, 10), float64], Tensor[(4, 5, 10), float32]) {
  %617 = cast(%var_11346, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
  %618 = shape_of(%var_11345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_11345, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = greater(%619, %620) /* ty=Tensor[(4, 5, 10), bool] */;
  %622 = cast(%621, dtype="float64") /* ty=Tensor[(4, 5, 10), float64] */;
  %623 = cast(%var_11345, dtype="float32") /* ty=Tensor[(4, 5, 10), float32] */;
  %624 = @func_7795() /* ty=Tensor[(1456), uint64] */;
  %625 = exp(%622) /* ty=Tensor[(4, 5, 10), float64] */;
  %626 = erf(%623) /* ty=Tensor[(4, 5, 10), float32] */;
  (%624, %625, %626)
}

def @func_9631() -> Tensor[(1456), uint64] {
  @func_7795() /* ty=Tensor[(1456), uint64] */
}

def @func_9633() -> Tensor[(1456), uint64] {
  @func_9631() /* ty=Tensor[(1456), uint64] */
}

def @func_5054() -> Tensor[(15, 5, 13), bool] {
  %628 = fn () -> Tensor[(15, 5, 13), bool] {
    %627 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
    %627.2
  };
  %628() /* ty=Tensor[(15, 5, 13), bool] */
}

def @func_10239(%var_10238: Tensor[(975), bool]) -> (Tensor[(14, 8, 13), uint64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) {
  %635 = fn (%var_10231: Tensor[(975), bool]) -> (Tensor[(14, 8, 13), uint64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) {
    %629 = @func_6359() /* ty=(Tensor[(14, 8, 13), uint64],) */;
    %630 = cast(%var_10231, dtype="bool") /* ty=Tensor[(975), bool] */;
    %631 = reshape(%630, newshape=[15, 5, 13]) /* ty=Tensor[(15, 5, 13), bool] */;
    %632 = @func_8526(%631) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(15, 5, 13), bool]) */;
    %633 = %629.0;
    %634 = %632.1;
    (%633, %634, %var_10231)
  };
  %635(%var_10238) /* ty=(Tensor[(14, 8, 13), uint64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */
}

def @func_7797() -> Tensor[(1456), uint64] {
  @func_7795() /* ty=Tensor[(1456), uint64] */
}

def @func_11147(%var_11134: int32, %var_11135: Tensor[(120), bool]) -> (Tensor[(11, 15, 13), bool], Tensor[(360), int32], int32, Tensor[(120), bool], Tensor[(3840), int16], Tensor[(140), int32]) {
  %636 = @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */;
  %637 = cast(%var_11134, dtype="int32") /* ty=int32 */;
  %638 = cast(%var_11135, dtype="bool") /* ty=Tensor[(120), bool] */;
  %639 = cast(meta[relay.Constant][37] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %640 = cast(meta[relay.Constant][38] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %641 = reshape(%637, newshape=[]) /* ty=int32 */;
  %642 = reshape(%638, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %643 = reshape(%639, newshape=[16, 240]) /* ty=Tensor[(16, 240), int16] */;
  %644 = reshape(%640, newshape=[70, 2]) /* ty=Tensor[(70, 2), int32] */;
  %645 = @func_4183(%641, %642, %643, %644) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(16, 240), int16], Tensor[(2, 6, 6), bool], Tensor[(70, 2), int32]) */;
  %646 = %636.2;
  %647 = %645.3;
  (%646, %647, %var_11134, %var_11135, meta[relay.Constant][37] /* ty=Tensor[(3840), int16] */, meta[relay.Constant][38] /* ty=Tensor[(140), int32] */)
}

def @func_7732(%var_7730: Tensor[(6, 20), bool]) -> (Tensor[(11, 15, 13), bool], Tensor[(360), int32], Tensor[(360), int32], Tensor[(11, 15, 13), float32], Tensor[(6, 20), bool]) {
  @func_7729(%var_7730) /* ty=(Tensor[(11, 15, 13), bool], Tensor[(360), int32], Tensor[(360), int32], Tensor[(11, 15, 13), float32], Tensor[(6, 20), bool]) */
}

def @func_3339() -> (Tensor[(11, 15, 13), float64],) {
  %648 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %649 = %648.0;
  (%649,)
}

def @func_8136() -> (Tensor[(1456), uint64],) {
  %650 = @func_7795() /* ty=Tensor[(1456), uint64] */;
  (%650,)
}

def @func_10533(%var_10531: Tensor[(140), int32]) -> (Tensor[(15, 5, 13), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
  %651 = @func_7112() /* ty=(Tensor[(15, 5, 13), bool],) */;
  %652 = cast(%var_10531, dtype="int32") /* ty=Tensor[(140), int32] */;
  %653 = cast(%var_10531, dtype="int32") /* ty=Tensor[(140), int32] */;
  %654 = reshape(%652, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %655 = reshape(%653, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
  %656 = @func_1786(%654, %655) /* ty=(Tensor[(4, 7, 5), int32],) */;
  %657 = %651.0;
  %658 = %656.0;
  (%657, %658, %var_10531)
}

def @func_9245() -> (Tensor[(6, 20), bool], Tensor[(4, 14, 15), float32]) {
  @func_9243() /* ty=(Tensor[(6, 20), bool], Tensor[(4, 14, 15), float32]) */
}

def @func_5915() -> (Tensor[(11, 15, 13), float32],) {
  @func_5913() /* ty=(Tensor[(11, 15, 13), float32],) */
}

def @func_861(%var_859: Tensor[(11, 13, 15), float64]) -> (Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) {
  @func_858(%var_859) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */
}

def @func_11014(%var_10899: Tensor[(360), float64], %var_10943: Tensor[(120), bool], %var_10966: Tensor[(390), uint32], %var_10988: Tensor[(896), float64]) -> (Tensor[(1456), uint16], Tensor[(360), float64], Tensor[(1456), uint64], int16, Tensor[(3840), int16], Tensor[(12, 15, 2), uint16], Tensor[(390), uint32], Tensor[(390), uint32], Tensor[(120, ?), bool], Tensor[(2, 6, 6), bool], Tensor[(8, 14, 8), float64], Tensor[(896), float64], Tensor[(14, 8, 13), uint64]) {
  %659 = @func_8861() /* ty=Tensor[(1456), uint64] */;
  %660 = cast(%659, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %661 = tan(%660) /* ty=Tensor[(1456), float64] */;
  %662 = cast(%659, dtype="uint16") /* ty=Tensor[(1456), uint16] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(1), int32] */;
  %664 = cast(%661, dtype="uint16") /* ty=Tensor[(1456), uint16] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %666 = cast(%var_10899, dtype="float64") /* ty=Tensor[(360), float64] */;
  %667 = reshape(%666, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), float64] */;
  %668 = @func_26(%667) /* ty=Tensor[(12, 15, 2), uint32] */;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(12, 15, 2), float32] */;
  %670 = cosh(%669) /* ty=Tensor[(12, 15, 2), float32] */;
  %671 = cast(%668, dtype="float64") /* ty=Tensor[(12, 15, 2), float64] */;
  %672 = erf(%671) /* ty=Tensor[(12, 15, 2), float64] */;
  %673 = cast(%672, dtype="uint16") /* ty=Tensor[(12, 15, 2), uint16] */;
  %674 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%670, dtype="uint16") /* ty=Tensor[(12, 15, 2), uint16] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %677 = cast(meta[relay.Constant][39] /* ty=int16 */, dtype="uint32") /* ty=uint32 */;
  %678 = cast(%var_10966, dtype="uint32") /* ty=Tensor[(390), uint32] */;
  %679 = cast(%668, dtype="float64") /* ty=Tensor[(12, 15, 2), float64] */;
  %680 = reshape(%677, newshape=[]) /* ty=uint32 */;
  %681 = reshape(%678, newshape=[390]) /* ty=Tensor[(390), uint32] */;
  %682 = reshape(%679, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %683 = @func_5994(%680, %681, %682) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(12, 15, 2), uint32], uint32, Tensor[(390), uint32], Tensor[(360), float64]) */;
  %684 = cast(meta[relay.Constant][39] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %685 = cast(meta[relay.Constant][40] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %686 = cast(%var_10943, dtype="bool") /* ty=Tensor[(120), bool] */;
  %687 = reshape(%684, newshape=[]) /* ty=int16 */;
  %688 = reshape(%685, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %689 = reshape(%686, newshape=[120, 1]) /* ty=Tensor[(120, 1), bool] */;
  %690 = @func_7768(%687, %688, %689) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int16, Tensor[(3840), int16], Tensor[(120, 1), bool]) */;
  %691 = %690.4;
  %692 = cast(%var_10943, dtype="bool") /* ty=Tensor[(120), bool] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(2), int32] */;
  %694 = cast(%691, dtype="bool") /* ty=Tensor[(120, 1), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %696 = @func_10619() /* ty=(Tensor[(2, 6, 6), bool], Tensor[(11, 15, 13), float32]) */;
  %697 = cast(%var_10988, dtype="float64") /* ty=Tensor[(896), float64] */;
  %698 = reshape(%697, newshape=[8, 14, 8]) /* ty=Tensor[(8, 14, 8), float64] */;
  %699 = add(%664, %665) /* ty=Tensor[(1456), uint16] */;
  %700 = @func_8861() /* ty=Tensor[(1456), uint64] */;
  %701 = bitwise_or(%675, %676) /* ty=Tensor[(12, 15, 2), uint16] */;
  %702 = %683.3;
  %703 = less_equal(%694, %695) /* ty=Tensor[(120, ?), bool] */;
  %704 = %696.0;
  %705 = @func_9941(%698) /* ty=Tensor[(8, 14, 8), float64] */;
  %706 = @func_4055() /* ty=Tensor[(14, 8, 13), uint64] */;
  (%699, %var_10899, %700, meta[relay.Constant][39] /* ty=int16 */, meta[relay.Constant][40] /* ty=Tensor[(3840), int16] */, %701, %702, %var_10966, %703, %704, %705, %var_10988, %706)
}

def @func_9340() -> (Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64]) {
  %707 = @func_8786() /* ty=Tensor[(11, 15, 13), float64] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %709 = sin(%708) /* ty=Tensor[(11, 15, 13), float32] */;
  %710 = @func_7890() /* ty=Tensor[(11, 15, 13), float64] */;
  (%709, %710)
}

def @func_10542() -> Tensor[(6, 20), bool] {
  %711 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %711.0
}

def @func_3533() -> (Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) {
  %721 = fn () -> (Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) {
    %712 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %713 = %712.0;
    %714 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 15, 13), float64] */, dtype="int64") /* ty=Tensor[(11, 15, 13), int64] */;
    %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
    %716 = cast(%713, dtype="int64") /* ty=Tensor[(11, 15, 13), int64] */;
    %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %718 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 15, 13), float64] */, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
    %719 = maximum(%716, %717) /* ty=Tensor[(11, 15, 13), int64] */;
    %720 = cosh(%718) /* ty=Tensor[(11, 15, 13), float32] */;
    (%719, %720)
  };
  %721() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */
}

def @func_6816() -> Tensor[(1456), uint64] {
  %722 = @func_5118() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64], Tensor[(1456), uint64]) */;
  %722.2
}

def @func_130(%var_87: int16, %var_88: Tensor[(15, 16, 16), int16], %var_94: Tensor[(120), bool]) -> (Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) {
  %723 = cast(%var_87, dtype="bool") /* ty=bool */;
  %724 = cast(%var_88, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
  %725 = cast(%var_94, dtype="bool") /* ty=Tensor[(120), bool] */;
  %726 = cast(%var_94, dtype="bool") /* ty=Tensor[(120), bool] */;
  %727 = reshape(%725, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %728 = reshape(%726, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %729 = @func_61(%727, %728) /* ty=Tensor[(5, 6, 4), bool] */;
  %730 = cast(%729, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
  %731 = cast(%var_94, dtype="bool") /* ty=Tensor[(120), bool] */;
  %732 = reshape(%730, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %733 = reshape(%731, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %734 = cast(%var_88, dtype="float32") /* ty=Tensor[(15, 16, 16), float32] */;
  %735 = @func_61(%732, %733) /* ty=Tensor[(5, 6, 4), bool] */;
  %736 = cast(%735, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
  %737 = cast(%729, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
  %738 = reshape(%736, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %739 = reshape(%737, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %740 = less(%723, %724) /* ty=Tensor[(15, 16, 16), bool] */;
  %741 = atan(%734) /* ty=Tensor[(15, 16, 16), float32] */;
  %742 = @func_61(%738, %739) /* ty=Tensor[(5, 6, 4), bool] */;
  (%740, %729, %var_94, %735, %741, %742)
}

def @func_8939() -> (Tensor[(11, 15, 13), float64],) {
  %744 = fn () -> (Tensor[(11, 15, 13), float64],) {
    %743 = @func_8786() /* ty=Tensor[(11, 15, 13), float64] */;
    (%743,)
  };
  %744() /* ty=(Tensor[(11, 15, 13), float64],) */
}

def @func_6443() -> (Tensor[(15, 5, 13), bool],) {
  %745 = @func_5053() /* ty=Tensor[(15, 5, 13), bool] */;
  (%745,)
}

def @func_6929() -> (Tensor[(15, 5, 13), bool],) {
  %748 = fn () -> (Tensor[(15, 5, 13), bool],) {
    %746 = @func_6226() /* ty=(Tensor[(15, 5, 13), bool],) */;
    %747 = %746.0;
    (%747,)
  };
  %748() /* ty=(Tensor[(15, 5, 13), bool],) */
}

def @func_10271() -> Tensor[(4, 14, 15), float32] {
  %749 = @func_9243() /* ty=(Tensor[(6, 20), bool], Tensor[(4, 14, 15), float32]) */;
  %749.1
}

def @func_9944(%var_9942: Tensor[(8, 14, 8), float64]) -> Tensor[(8, 14, 8), float64] {
  @func_9941(%var_9942) /* ty=Tensor[(8, 14, 8), float64] */
}

def @func_10299(%var_10297: Tensor[(14, 15, 8), float32]) -> Tensor[(14, 15, 8), float32] {
  @func_10296(%var_10297) /* ty=Tensor[(14, 15, 8), float32] */
}

def @func_3391() -> (Tensor[(11, 15, 13), float64],) {
  @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */
}

def @func_3283() -> (Tensor[(11, 15, 13), float64],) {
  %752 = fn () -> (Tensor[(11, 15, 13), float64],) {
    %750 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
    %751 = acos(%750) /* ty=Tensor[(11, 15, 13), float64] */;
    (%751,)
  };
  %752() /* ty=(Tensor[(11, 15, 13), float64],) */
}

def @func_165(%var_164: Tensor[(14, 8, 13), uint64]) -> (Tensor[(14, 8, 13), uint64],) {
  %758 = fn (%var_142: Tensor[(14, 8, 13), uint64]) -> (Tensor[(14, 8, 13), uint64],) {
    %753 = cast(%var_142, dtype="uint64") /* ty=Tensor[(14, 8, 13), uint64] */;
    %754 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(14, 8, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %755 = cast(meta[relay.Constant][43] /* ty=Tensor[(14, 8, 13), uint64] */, dtype="uint64") /* ty=Tensor[(14, 8, 13), uint64] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %757 = right_shift(%755, %756) /* ty=Tensor[(14, 8, 13), uint64] */;
    (%757,)
  };
  %758(%var_164) /* ty=(Tensor[(14, 8, 13), uint64],) */
}

def @func_5994(%var_5979: uint32, %var_5980: Tensor[(390), uint32], %var_5981: Tensor[(360), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(12, 15, 2), uint32], uint32, Tensor[(390), uint32], Tensor[(360), float64]) {
  %759 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %760 = cast(%var_5979, dtype="uint32") /* ty=uint32 */;
  %761 = cast(%var_5980, dtype="uint32") /* ty=Tensor[(390), uint32] */;
  %762 = cast(%var_5981, dtype="float64") /* ty=Tensor[(360), float64] */;
  %763 = reshape(%760, newshape=[]) /* ty=uint32 */;
  %764 = reshape(%761, newshape=[3, 13, 10]) /* ty=Tensor[(3, 13, 10), uint32] */;
  %765 = reshape(%762, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %766 = @func_3821(%763, %764, %765) /* ty=(Tensor[(3, 13, 10), uint32], Tensor[(91), float64], Tensor[(7, 1, 13), float32], Tensor[(12, 15, 2), uint32], Tensor[(360), float64]) */;
  %767 = %759.0;
  %768 = %766.3;
  (%767, %768, %var_5979, %var_5980, %var_5981)
}

def @func_4689(%var_4688: Tensor[(360), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) {
  %781 = fn (%var_4679: Tensor[(360), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) {
    %769 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %770 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %771 = cast(%var_4679, dtype="int32") /* ty=Tensor[(360), int32] */;
    %772 = cast(meta[relay.Constant][44] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %773 = cast(meta[relay.Constant][45] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %774 = reshape(%770, newshape=[]) /* ty=int32 */;
    %775 = reshape(%771, newshape=[12, 2, 15]) /* ty=Tensor[(12, 2, 15), int32] */;
    %776 = reshape(%772, newshape=[1, 120]) /* ty=Tensor[(1, 120), bool] */;
    %777 = reshape(%773, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
    %778 = @func_3175(%774, %775, %776, %777) /* ty=(Tensor[(12, 2, 15), bool], Tensor[(5, 6, 4), bool], Tensor[(1, 120), bool], Tensor[(5, 6, 4), bool], Tensor[(3840), int16]) */;
    %779 = %769.0;
    %780 = %778.2;
    (%779, %780, 2 /* ty=int32 */, %var_4679, meta[relay.Constant][44] /* ty=Tensor[(120), bool] */, meta[relay.Constant][45] /* ty=Tensor[(3840), int16] */)
  };
  %781(%var_4688) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) */
}

def @func_6630() -> Tensor[(15, 5, 13), float64] {
  @func_6628() /* ty=Tensor[(15, 5, 13), float64] */
}

def @func_4578(%var_4576: Tensor[(140), int32], %var_4577: Tensor[(78), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(2145), float64], Tensor[(980), float32], Tensor[(78), float64], int16, Tensor[(120), bool], Tensor[(11, 15, 13), float64]) {
  @func_4574(%var_4576, %var_4577) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(4, 7, 5), int32], Tensor[(140), int32], Tensor[(2145), float64], Tensor[(980), float32], Tensor[(78), float64], int16, Tensor[(120), bool], Tensor[(11, 15, 13), float64]) */
}

def @func_7227(%var_7226: uint32) -> (Tensor[(11, 15, 13), float32], Tensor[(360), float64], uint32, Tensor[(390), uint32], Tensor[(180, 2), float64]) {
  %791 = fn (%var_7218: uint32) -> (Tensor[(11, 15, 13), float32], Tensor[(360), float64], uint32, Tensor[(390), uint32], Tensor[(180, 2), float64]) {
    %782 = cast(%var_7218, dtype="uint32") /* ty=uint32 */;
    %783 = cast(meta[relay.Constant][46] /* ty=Tensor[(390), uint32] */, dtype="uint32") /* ty=Tensor[(390), uint32] */;
    %784 = cast(meta[relay.Constant][47] /* ty=Tensor[(180, 2), float64] */, dtype="float64") /* ty=Tensor[(180, 2), float64] */;
    %785 = reshape(%782, newshape=[]) /* ty=uint32 */;
    %786 = reshape(%783, newshape=[390]) /* ty=Tensor[(390), uint32] */;
    %787 = reshape(%784, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %788 = @func_5994(%785, %786, %787) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(12, 15, 2), uint32], uint32, Tensor[(390), uint32], Tensor[(360), float64]) */;
    %789 = @func_6733() /* ty=Tensor[(11, 15, 13), float32] */;
    %790 = %788.4;
    (%789, %790, %var_7218, meta[relay.Constant][46] /* ty=Tensor[(390), uint32] */, meta[relay.Constant][47] /* ty=Tensor[(180, 2), float64] */)
  };
  %791(%var_7226) /* ty=(Tensor[(11, 15, 13), float32], Tensor[(360), float64], uint32, Tensor[(390), uint32], Tensor[(180, 2), float64]) */
}

def @func_5286() -> Tensor[(11, 15, 13), int64] {
  %793 = fn () -> Tensor[(11, 15, 13), int64] {
    %792 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
    %792.0
  };
  %793() /* ty=Tensor[(11, 15, 13), int64] */
}

def @func_7195() -> (Tensor[(6, 20), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 10, 10), float32], Tensor[(1456), uint64], Tensor[(5, 6, 4), bool]) {
  %794 = @func_6398() /* ty=Tensor[(6, 20), bool] */;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %796 = sin(%795) /* ty=Tensor[(6, 20), float64] */;
  %797 = cast(%796, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %798 = reshape(%797, newshape=[6, 20]) /* ty=Tensor[(6, 20), bool] */;
  %799 = @func_5605(%798) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %800 = @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */;
  %801 = @func_5118() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64], Tensor[(1456), uint64]) */;
  %802 = cast(%794, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %803 = cast(%794, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %804 = reshape(%802, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %805 = reshape(%803, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
  %806 = %799.0;
  %807 = %800.3;
  %808 = %801.2;
  %809 = @func_61(%804, %805) /* ty=Tensor[(5, 6, 4), bool] */;
  (%796, %806, %807, %808, %809)
}

def @func_6771() -> (Tensor[(15, 5, 13), bool], Tensor[(360), int32], Tensor[(360), int32]) {
  %815 = fn () -> (Tensor[(15, 5, 13), bool], Tensor[(360), int32], Tensor[(360), int32]) {
    %810 = cast(meta[relay.Constant][48] /* ty=Tensor[(360), int32] */, dtype="int32") /* ty=Tensor[(360), int32] */;
    %811 = reshape(%810, newshape=[360]) /* ty=Tensor[(360), int32] */;
    %812 = @func_4687(%811) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) */;
    %813 = @func_5467() /* ty=Tensor[(15, 5, 13), bool] */;
    %814 = %812.3;
    (%813, %814, meta[relay.Constant][48] /* ty=Tensor[(360), int32] */)
  };
  %815() /* ty=(Tensor[(15, 5, 13), bool], Tensor[(360), int32], Tensor[(360), int32]) */
}

def @func_5781(%var_5780: Tensor[(360, 1), int32]) -> (Tensor[(11, 10, 10), float32], Tensor[(3, 6, 3), uint32], Tensor[(6, 3), uint32], Tensor[(54), uint32], Tensor[(1, 120), bool], Tensor[(360, 1), int32], Tensor[(5, 6, 4), bool]) {
  %832 = fn (%var_5759: Tensor[(360, 1), int32]) -> (Tensor[(11, 10, 10), float32], Tensor[(3, 6, 3), uint32], Tensor[(6, 3), uint32], Tensor[(54), uint32], Tensor[(1, 120), bool], Tensor[(360, 1), int32], Tensor[(5, 6, 4), bool]) {
    %816 = @func_3990() /* ty=(Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) */;
    %817 = cast(meta[relay.Constant][49] /* ty=Tensor[(6, 3), uint32] */, dtype="uint32") /* ty=Tensor[(6, 3), uint32] */;
    %818 = cast(meta[relay.Constant][50] /* ty=Tensor[(54), uint32] */, dtype="uint32") /* ty=Tensor[(54), uint32] */;
    %819 = reshape(%817, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
    %820 = reshape(%818, newshape=[3, 6, 3]) /* ty=Tensor[(3, 6, 3), uint32] */;
    %821 = cast(%var_5759, dtype="int32") /* ty=Tensor[(360, 1), int32] */;
    %822 = reshape(%821, newshape=[360]) /* ty=Tensor[(360), int32] */;
    %823 = @func_4687(%822) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) */;
    %824 = %823.1;
    %825 = cast(%824, dtype="bool") /* ty=Tensor[(1, 120), bool] */;
    %826 = cast(%824, dtype="bool") /* ty=Tensor[(1, 120), bool] */;
    %827 = reshape(%825, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
    %828 = reshape(%826, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), bool] */;
    %829 = %816.0;
    %830 = @func_4303(%819, %820) /* ty=Tensor[(3, 6, 3), uint32] */;
    %831 = @func_61(%827, %828) /* ty=Tensor[(5, 6, 4), bool] */;
    (%829, %830, meta[relay.Constant][49] /* ty=Tensor[(6, 3), uint32] */, meta[relay.Constant][50] /* ty=Tensor[(54), uint32] */, %824, %var_5759, %831)
  };
  %832(%var_5780) /* ty=(Tensor[(11, 10, 10), float32], Tensor[(3, 6, 3), uint32], Tensor[(6, 3), uint32], Tensor[(54), uint32], Tensor[(1, 120), bool], Tensor[(360, 1), int32], Tensor[(5, 6, 4), bool]) */
}

def @func_8579() -> Tensor[(11, 15, 13), float64] {
  %834 = fn () -> Tensor[(11, 15, 13), float64] {
    %833 = @func_6876() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
    %833.1
  };
  %834() /* ty=Tensor[(11, 15, 13), float64] */
}

def @func_4670() -> Tensor[(11, 15, 13), float32] {
  %836 = fn () -> Tensor[(11, 15, 13), float32] {
    %835 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
    %835.1
  };
  %836() /* ty=Tensor[(11, 15, 13), float32] */
}

def @func_11255() -> (Tensor[(15, 5, 13), float64], Tensor[(12, 16, 12), float64], Tensor[(1152, 2), float64]) {
  @func_11253() /* ty=(Tensor[(15, 5, 13), float64], Tensor[(12, 16, 12), float64], Tensor[(1152, 2), float64]) */
}

def @func_29(%var_27: Tensor[(12, 15, 2), float64]) -> Tensor[(12, 15, 2), uint32] {
  @func_26(%var_27) /* ty=Tensor[(12, 15, 2), uint32] */
}

def @func_4996(%var_4985: Tensor[(12, 16, 12), float64]) -> (Tensor[(12, 16, 12), float64], Tensor[(11, 15, 13), float64]) {
  %837 = cast(%var_4985, dtype="float64") /* ty=Tensor[(12, 16, 12), float64] */;
  %838 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
  %839 = cos(%837) /* ty=Tensor[(12, 16, 12), float64] */;
  %840 = %838.0;
  (%839, %840)
}

def @func_10273() -> Tensor[(4, 14, 15), float32] {
  @func_10271() /* ty=Tensor[(4, 14, 15), float32] */
}

def @func_4335() -> (Tensor[(11, 15, 13), float64],) {
  %848 = fn () -> (Tensor[(11, 15, 13), float64],) {
    %841 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %842 = %841.0;
    %843 = cast(meta[relay.Constant][51] /* ty=Tensor[(11, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
    %844 = shape_of(%842, dtype="int32") /* ty=Tensor[(3), int32] */;
    %845 = cast(%842, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
    %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %847 = floor_mod(%845, %846) /* ty=Tensor[(11, 15, 13), float64] */;
    (%847,)
  };
  %848() /* ty=(Tensor[(11, 15, 13), float64],) */
}

def @func_6877() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) {
  %856 = fn () -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) {
    %849 = @func_4759() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
    %850 = %849.1;
    %851 = cast(%850, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
    %852 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %853 = @func_5635() /* ty=Tensor[(11, 15, 13), float64] */;
    %854 = sinh(%851) /* ty=Tensor[(11, 15, 13), float64] */;
    %855 = %852.0;
    (%853, %854, %855)
  };
  %856() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */
}

def @func_6270() -> (Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) {
  %857 = @func_3282() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %858 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %859 = %857.0;
  %860 = %858.0;
  (%859, %860)
}

def @func_7489() -> (Tensor[(11, 15, 13), float32],) {
  %863 = fn () -> (Tensor[(11, 15, 13), float32],) {
    %861 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
    %862 = %861.1;
    (%862,)
  };
  %863() /* ty=(Tensor[(11, 15, 13), float32],) */
}

def @func_11103(%var_11095: Tensor[(975), float64]) -> (Tensor[(11, 15, 13), float64], Tensor[(1456), float64], Tensor[(15, 5, 13), int8], Tensor[(975), float64]) {
  %864 = @func_5701() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %865 = @func_9631() /* ty=Tensor[(1456), uint64] */;
  %866 = cast(%865, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %867 = cast(%var_11095, dtype="float64") /* ty=Tensor[(975), float64] */;
  %868 = reshape(%867, newshape=[15, 5, 13]) /* ty=Tensor[(15, 5, 13), float64] */;
  %869 = @func_8666(%868) /* ty=(Tensor[(15, 5, 13), int8],) */;
  %870 = %864.0;
  %871 = sqrt(%866) /* ty=Tensor[(1456), float64] */;
  %872 = %869.0;
  (%870, %871, %872, %var_11095)
}

def @func_10459() -> (Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), float32], Tensor[(11, 15, 13), float32]) {
  %884 = fn () -> (Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), float32], Tensor[(11, 15, 13), float32]) {
    %873 = @func_7016() /* ty=Tensor[(15, 5, 13), bool] */;
    %874 = @func_9492() /* ty=(Tensor[(15, 5, 13), bool],) */;
    %875 = %874.0;
    %876 = cast(%875, dtype="float32") /* ty=Tensor[(15, 5, 13), float32] */;
    %877 = shape_of(%873, dtype="int32") /* ty=Tensor[(3), int32] */;
    %878 = cast(%873, dtype="float32") /* ty=Tensor[(15, 5, 13), float32] */;
    %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %880 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
    %881 = @func_7890() /* ty=Tensor[(11, 15, 13), float64] */;
    %882 = subtract(%878, %879) /* ty=Tensor[(15, 5, 13), float32] */;
    %883 = %880.1;
    (%881, %882, %883)
  };
  %884() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), float32], Tensor[(11, 15, 13), float32]) */
}

def @func_6711() -> (Tensor[(11, 15, 13), float32],) {
  %885 = @func_5913() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %886 = %885.0;
  %887 = cast(%886, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %888 = acosh(%887) /* ty=Tensor[(11, 15, 13), float32] */;
  (%888,)
}

def @func_4827() -> (Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) {
  %889 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %890 = @func_4334() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %891 = @func_4486() /* ty=(Tensor[(6, 20), bool],) */;
  %892 = %889.0;
  %893 = %890.0;
  %894 = %891.0;
  (%892, %893, %894)
}

def @main(%var_11667: Tensor[(11, 10, 10), bool]) -> (Tensor[(11, 10, 10), float32],) {
  %895 = @func_10764() /* ty=(Tensor[(11, 15, 13), float32], Tensor[(11, 10, 10), bool]) */;
  %896 = %895.1;
  %897 = cast(%var_11667, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %898 = shape_of(%896, dtype="int32") /* ty=Tensor[(3), int32] */;
  %899 = cast(%896, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %901 = multiply(%899, %900) /* ty=Tensor[(11, 10, 10), float32] */;
  (%901,)
}

def @func_7892() -> Tensor[(11, 15, 13), float64] {
  @func_7890() /* ty=Tensor[(11, 15, 13), float64] */
}

def @func_6628() -> Tensor[(15, 5, 13), float64] {
  %902 = @func_6077() /* ty=Tensor[(15, 5, 13), float32] */;
  %903 = cast(%902, dtype="float64") /* ty=Tensor[(15, 5, 13), float64] */;
  exp(%903) /* ty=Tensor[(15, 5, 13), float64] */
}

def @func_10544() -> Tensor[(6, 20), bool] {
  @func_10542() /* ty=Tensor[(6, 20), bool] */
}

def @func_9480(%var_9478: Tensor[(6, 20), bool]) -> Tensor[(6, 20), int8] {
  @func_9477(%var_9478) /* ty=Tensor[(6, 20), int8] */
}

def @func_3825(%var_3822: uint32, %var_3823: Tensor[(3, 13, 10), uint32], %var_3824: Tensor[(360), float64]) -> (Tensor[(3, 13, 10), uint32], Tensor[(91), float64], Tensor[(7, 1, 13), float32], Tensor[(12, 15, 2), uint32], Tensor[(360), float64]) {
  %916 = fn (%var_3772: uint32, %var_3773: Tensor[(3, 13, 10), uint32], %var_3795: Tensor[(360), float64]) -> (Tensor[(3, 13, 10), uint32], Tensor[(91), float64], Tensor[(7, 1, 13), float32], Tensor[(12, 15, 2), uint32], Tensor[(360), float64]) {
    %904 = cast(%var_3772, dtype="uint32") /* ty=uint32 */;
    %905 = cast(%var_3773, dtype="uint32") /* ty=Tensor[(3, 13, 10), uint32] */;
    %906 = cast(meta[relay.Constant][52] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
    %907 = reshape(%906, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float64] */;
    %908 = @func_3668(%907) /* ty=Tensor[(7, 1, 13), bool] */;
    %909 = cast(%var_3772, dtype="float32") /* ty=float32 */;
    %910 = cast(%908, dtype="float32") /* ty=Tensor[(7, 1, 13), float32] */;
    %911 = cast(%var_3795, dtype="float64") /* ty=Tensor[(360), float64] */;
    %912 = reshape(%911, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), float64] */;
    %913 = logical_xor(%904, %905) /* ty=Tensor[(3, 13, 10), uint32] */;
    %914 = power(%909, %910) /* ty=Tensor[(7, 1, 13), float32] */;
    %915 = @func_26(%912) /* ty=Tensor[(12, 15, 2), uint32] */;
    (%913, meta[relay.Constant][52] /* ty=Tensor[(91), float64] */, %914, %915, %var_3795)
  };
  %916(%var_3822, %var_3823, %var_3824) /* ty=(Tensor[(3, 13, 10), uint32], Tensor[(91), float64], Tensor[(7, 1, 13), float32], Tensor[(12, 15, 2), uint32], Tensor[(360), float64]) */
}

def @func_5467() -> Tensor[(15, 5, 13), bool] {
  %917 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
  %917.2
}

def @func_4958(%var_4956: Tensor[(14, 8, 13), bool], %var_4957: Tensor[(14, 8, 13), uint64]) -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), bool]) {
  %947 = fn (%var_4898: Tensor[(14, 8, 13), bool], %var_4922: Tensor[(14, 8, 13), uint64]) -> (Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), bool]) {
    %918 = @func_3389() /* ty=(Tensor[(11, 15, 13), float64],) */;
    %919 = @func_4055() /* ty=Tensor[(14, 8, 13), uint64] */;
    %920 = cast(%var_4922, dtype="uint32") /* ty=Tensor[(14, 8, 13), uint32] */;
    %921 = shape_of(%919, dtype="int32") /* ty=Tensor[(3), int32] */;
    %922 = cast(%919, dtype="uint32") /* ty=Tensor[(14, 8, 13), uint32] */;
    %923 = dyn.reshape(%920, %921, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %924 = bitwise_xor(%922, %923) /* ty=Tensor[(14, 8, 13), uint32] */;
    %925 = cast(%924, dtype="float32") /* ty=Tensor[(14, 8, 13), float32] */;
    %926 = sinh(%925) /* ty=Tensor[(14, 8, 13), float32] */;
    %927 = cast(%919, dtype="uint64") /* ty=Tensor[(14, 8, 13), uint64] */;
    %928 = reshape(%927, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), uint64] */;
    %929 = @func_163(%928) /* ty=(Tensor[(14, 8, 13), uint64],) */;
    %930 = %929.0;
    %931 = cast(%919, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
    %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
    %933 = cast(%930, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
    %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %935 = less(%933, %934) /* ty=Tensor[(14, 8, 13), bool] */;
    %936 = cast(%var_4898, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
    %937 = shape_of(%935, dtype="int32") /* ty=Tensor[(3), int32] */;
    %938 = cast(%935, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
    %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %940 = logical_or(%938, %939) /* ty=Tensor[(14, 8, 13), bool] */;
    %941 = cast(%940, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
    %942 = shape_of(%926, dtype="int32") /* ty=Tensor[(3), int32] */;
    %943 = cast(%926, dtype="bool") /* ty=Tensor[(14, 8, 13), bool] */;
    %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %945 = %918.0;
    %946 = equal(%943, %944) /* ty=Tensor[(14, 8, 13), bool] */;
    (%945, %946)
  };
  %947(%var_4956, %var_4957) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), bool]) */
}

def @func_4426() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) {
  %948 = @func_3769() /* ty=(Tensor[(11, 15, 13), uint16], Tensor[(2, 6, 6), bool], Tensor[(140), int32], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %949 = @func_3339() /* ty=(Tensor[(11, 15, 13), float64],) */;
  %950 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %951 = cast(meta[relay.Constant][53] /* ty=Tensor[(975), bool] */, dtype="bool") /* ty=Tensor[(975), bool] */;
  %952 = reshape(%950, newshape=[]) /* ty=bool */;
  %953 = reshape(%951, newshape=[15, 5, 13]) /* ty=Tensor[(15, 5, 13), bool] */;
  %954 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %955 = cast(meta[relay.Constant][53] /* ty=Tensor[(975), bool] */, dtype="bool") /* ty=Tensor[(975), bool] */;
  %956 = %948.3;
  %957 = %949.0;
  %958 = @func_2783(%952, %953) /* ty=Tensor[(15, 5, 13), bool] */;
  %959 = greater_equal(%954, %955) /* ty=Tensor[(975), bool] */;
  (%956, %957, %958, %959)
}

def @func_7768(%var_7764: int16, %var_7765: Tensor[(3840), int16], %var_7766: Tensor[(120, 1), bool]) -> (Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], int16, Tensor[(3840), int16], Tensor[(120, 1), bool]) {
  %960 = cast(%var_7764, dtype="int16") /* ty=int16 */;
  %961 = cast(%var_7765, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %962 = cast(%var_7766, dtype="bool") /* ty=Tensor[(120, 1), bool] */;
  %963 = reshape(%960, newshape=[]) /* ty=int16 */;
  %964 = reshape(%961, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), int16] */;
  %965 = reshape(%962, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %966 = @func_130(%963, %964, %965) /* ty=(Tensor[(15, 16, 16), bool], Tensor[(5, 6, 4), bool], Tensor[(120), bool], Tensor[(5, 6, 4), bool], Tensor[(15, 16, 16), float32], Tensor[(5, 6, 4), bool]) */;
  %967 = @func_5635() /* ty=Tensor[(11, 15, 13), float64] */;
  %968 = %966.5;
  (%967, %968, %var_7764, %var_7765, %var_7766)
}

def @func_3671(%var_3669: Tensor[(7, 1, 13), float64]) -> Tensor[(7, 1, 13), bool] {
  @func_3668(%var_3669) /* ty=Tensor[(7, 1, 13), bool] */
}

def @func_7976(%var_7910: Tensor[(11, 2, 1), float64], %var_7924: Tensor[(1386), float32], %var_7925: Tensor[(140), int32]) -> (Tensor[(11, 2, 1), float64], Tensor[(140), int32], Tensor[(1386), float32], Tensor[(11, 2, 140), bool], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 2, 1), float32], Tensor[(11, 15, 13), float64]) {
  %969 = cast(%var_7910, dtype="float64") /* ty=Tensor[(11, 2, 1), float64] */;
  %970 = cast(%var_7924, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %971 = cast(%var_7925, dtype="int32") /* ty=Tensor[(140), int32] */;
  %972 = cast(%var_7924, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %973 = reshape(%970, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), float32] */;
  %974 = reshape(%971, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %975 = reshape(%972, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), float32] */;
  %976 = @func_5215(%973, %974, %975) /* ty=(Tensor[(140), int32], Tensor[(140), int32], Tensor[(14, 9, 11), int16], Tensor[(11, 15, 13), float64], Tensor[(1456), bool], Tensor[(7, 1, 13), bool], Tensor[(91), float64], Tensor[(140), int32], Tensor[(54), uint32]) */;
  %977 = cast(%var_7910, dtype="float32") /* ty=Tensor[(11, 2, 1), float32] */;
  %978 = sqrt(%977) /* ty=Tensor[(11, 2, 1), float32] */;
  %979 = cast(%978, dtype="bool") /* ty=Tensor[(11, 2, 1), bool] */;
  %980 = cast(%var_7925, dtype="bool") /* ty=Tensor[(140), bool] */;
  %981 = @func_6876() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %982 = cast(%978, dtype="float32") /* ty=Tensor[(11, 2, 1), float32] */;
  %983 = @func_6876() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %984 = exp(%969) /* ty=Tensor[(11, 2, 1), float64] */;
  %985 = %976.7;
  %986 = less(%979, %980) /* ty=Tensor[(11, 2, 140), bool] */;
  %987 = %981.0;
  %988 = @func_5141() /* ty=Tensor[(11, 15, 13), float64] */;
  %989 = asin(%982) /* ty=Tensor[(11, 2, 1), float32] */;
  %990 = %983.1;
  (%984, %985, %var_7924, %986, %987, %988, %989, %990)
}

def @func_4110() -> (Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], Tensor[(6, 20), bool]) {
  @func_4108() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(5, 6, 4), bool], Tensor[(6, 20), bool]) */
}

def @func_6445() -> (Tensor[(15, 5, 13), bool],) {
  @func_6443() /* ty=(Tensor[(15, 5, 13), bool],) */
}

def @func_3990() -> (Tensor[(11, 10, 10), float32], Tensor[(1100), float32], Tensor[(11, 15, 13), bool], Tensor[(11, 10, 10), float32], Tensor[(14, 8, 13), uint64]) {
  %991 = cast(meta[relay.Constant][54] /* ty=Tensor[(1100), float32] */, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %992 = cast(meta[relay.Constant][54] /* ty=Tensor[(1100), float32] */, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %993 = reshape(%991, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %994 = reshape(%992, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %995 = @func_3209(%993, %994) /* ty=(Tensor[(11, 10, 10), float32],) */;
  %996 = @func_3532() /* ty=(Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float32]) */;
  %997 = %996.0;
  %998 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
  %999 = %998.0;
  %1000 = cast(%999, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %1001 = shape_of(%997, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1002 = cast(%997, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1004 = cast(meta[relay.Constant][54] /* ty=Tensor[(1100), float32] */, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %1005 = %995.0;
  %1006 = cast(%1005, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %1007 = reshape(%1004, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %1008 = reshape(%1006, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %1009 = @func_3209(%1007, %1008) /* ty=(Tensor[(11, 10, 10), float32],) */;
  %1010 = %1009.0;
  %1011 = cast(%1010, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %1012 = sin(%1011) /* ty=Tensor[(11, 10, 10), float32] */;
  %1013 = cast(%1012, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %1014 = cast(%997, dtype="float64") /* ty=Tensor[(11, 15, 13), float64] */;
  %1015 = reshape(%1014, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float64] */;
  %1016 = @func_858(%1015) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(14, 8, 13), uint64], Tensor[(8, 182), uint64]) */;
  %1017 = less_equal(%1002, %1003) /* ty=Tensor[(11, 15, 13), bool] */;
  %1018 = cos(%1013) /* ty=Tensor[(11, 10, 10), float32] */;
  %1019 = %1016.1;
  (%1005, meta[relay.Constant][54] /* ty=Tensor[(1100), float32] */, %1017, %1018, %1019)
}

def @func_6115(%var_6113: Tensor[(975), bool], %var_6114: Tensor[(14, 8, 13), uint64]) -> (bool, Tensor[(975), bool], Tensor[(15, 5, 13), int32], Tensor[(14, 8, 13), bool]) {
  @func_6111(%var_6113, %var_6114) /* ty=(bool, Tensor[(975), bool], Tensor[(15, 5, 13), int32], Tensor[(14, 8, 13), bool]) */
}

def @func_5581(%var_5580: Tensor[(360), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float64], Tensor[(360), int32], Tensor[(4, 7, 5), int8], Tensor[(975), float64], Tensor[(11, 15, 13), float64]) {
  %1043 = fn (%var_5555: Tensor[(360), int32]) -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float64], Tensor[(360), int32], Tensor[(4, 7, 5), int8], Tensor[(975), float64], Tensor[(11, 15, 13), float64]) {
    %1020 = @func_3652() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(14, 8, 13), uint64]) */;
    %1021 = cast(%var_5555, dtype="int32") /* ty=Tensor[(360), int32] */;
    %1022 = reshape(%1021, newshape=[360]) /* ty=Tensor[(360), int32] */;
    %1023 = @func_4687(%1022) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(1, 120), bool], int32, Tensor[(360), int32], Tensor[(120), bool], Tensor[(3840), int16]) */;
    %1024 = cast(meta[relay.Constant][55] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
    %1025 = reshape(%1024, newshape=[140]) /* ty=Tensor[(140), int32] */;
    %1026 = @func_2113(%1025) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */;
    %1027 = %1026.1;
    %1028 = cast(meta[relay.Constant][55] /* ty=Tensor[(140), int32] */, dtype="int8") /* ty=Tensor[(140), int8] */;
    %1029 = shape_of(%1027, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1030 = cast(%1027, dtype="int8") /* ty=Tensor[(4, 7, 5), int8] */;
    %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1032 = @func_4426() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(15, 5, 13), bool], Tensor[(975), bool]) */;
    %1033 = %1032.3;
    %1034 = cast(%1033, dtype="float64") /* ty=Tensor[(975), float64] */;
    %1035 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
    %1036 = %1020.0;
    %1037 = @func_5141() /* ty=Tensor[(11, 15, 13), float64] */;
    %1038 = @func_5285() /* ty=Tensor[(11, 15, 13), int64] */;
    %1039 = %1023.0;
    %1040 = bitwise_xor(%1030, %1031) /* ty=Tensor[(4, 7, 5), int8] */;
    %1041 = exp(%1034) /* ty=Tensor[(975), float64] */;
    %1042 = %1035.1;
    (%1036, %1037, %1038, %1039, %var_5555, %1040, %1041, %1042)
  };
  %1043(%var_5580) /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), int64], Tensor[(11, 15, 13), float64], Tensor[(360), int32], Tensor[(4, 7, 5), int8], Tensor[(975), float64], Tensor[(11, 15, 13), float64]) */
}

def @func_7017() -> Tensor[(15, 5, 13), bool] {
  %1045 = fn () -> Tensor[(15, 5, 13), bool] {
    %1044 = @func_6443() /* ty=(Tensor[(15, 5, 13), bool],) */;
    %1044.0
  };
  %1045() /* ty=Tensor[(15, 5, 13), bool] */
}

def @func_6818() -> Tensor[(1456), uint64] {
  @func_6816() /* ty=Tensor[(1456), uint64] */
}

def @func_2115(%var_2114: Tensor[(140), int32]) -> (Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
  %1055 = fn (%var_2106: Tensor[(140), int32]) -> (Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) {
    %1046 = cast(-8 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %1047 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 6, 6), int64] */, dtype="bool") /* ty=Tensor[(2, 6, 6), bool] */;
    %1048 = cast(%var_2106, dtype="int32") /* ty=Tensor[(140), int32] */;
    %1049 = cast(%var_2106, dtype="int32") /* ty=Tensor[(140), int32] */;
    %1050 = reshape(%1048, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
    %1051 = reshape(%1049, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int32] */;
    %1052 = @func_1786(%1050, %1051) /* ty=(Tensor[(4, 7, 5), int32],) */;
    %1053 = greater(%1046, %1047) /* ty=Tensor[(2, 6, 6), bool] */;
    %1054 = %1052.0;
    (%1053, %1054, %var_2106)
  };
  %1055(%var_2114) /* ty=(Tensor[(2, 6, 6), bool], Tensor[(4, 7, 5), int32], Tensor[(140), int32]) */
}

def @func_8188() -> (Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float32], Tensor[(11, 15, 13), float64], Tensor[(360), int32]) {
  %1056 = @func_6876() /* ty=(Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64], Tensor[(11, 15, 13), float64]) */;
  %1057 = @func_6711() /* ty=(Tensor[(11, 15, 13), float32],) */;
  %1058 = @func_4827() /* ty=(Tensor[(6, 20), bool], Tensor[(11, 15, 13), float64], Tensor[(6, 20), bool]) */;
  %1059 = @func_6770() /* ty=(Tensor[(15, 5, 13), bool], Tensor[(360), int32], Tensor[(360), int32]) */;
  %1060 = %1056.1;
  %1061 = %1057.0;
  %1062 = %1058.1;
  %1063 = %1059.2;
  (%1060, %1061, %1062, %1063)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen528/build/output.py", line 2948, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:28:37] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

