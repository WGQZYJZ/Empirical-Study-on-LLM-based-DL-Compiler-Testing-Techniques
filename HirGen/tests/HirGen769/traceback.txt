==========mod==========
#[version = "0.0.5"]
def @func_9283() -> (Tensor[(52), int16], Tensor[(16, 14, 3), float32]) {
  %0 = @func_5975() /* ty=(Tensor[(52), int16], Tensor[(16, 14, 3), float32]) */;
  %1 = @func_8308() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %2 = %0.0;
  %3 = %1.0;
  (%2, %3)
}

def @func_4736() -> (Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) {
  %4 = @func_3764() /* ty=(Tensor[(1215), uint32],) */;
  %5 = %4.0;
  %6 = @func_2781() /* ty=Tensor[(16, 14, 3), float32] */;
  (%5, %6)
}

def @func_2582(%var_2564: Tensor[(3, 1, 5), float64]) -> (Tensor[(9, 9, 15), int64], Tensor[(3, 1, 5), float64], Tensor[(16, 14, 3), float32]) {
  %7 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
  %8 = cast(%var_2564, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
  %9 = acos(%8) /* ty=Tensor[(3, 1, 5), float64] */;
  %10 = cast(%9, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
  %11 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %12 = %7.1;
  %13 = log2(%10) /* ty=Tensor[(3, 1, 5), float64] */;
  %14 = %11.0;
  (%12, %13, %14)
}

def @func_12167() -> (Tensor[(16, 14, 3), float32], Tensor[(77, 4), float64]) {
  %15 = @func_8308() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %16 = @func_11078() /* ty=(Tensor[(77, 4), uint16],) */;
  %17 = %16.0;
  %18 = cast(%17, dtype="float64") /* ty=Tensor[(77, 4), float64] */;
  %19 = %15.0;
  %20 = asin(%18) /* ty=Tensor[(77, 4), float64] */;
  (%19, %20)
}

def @func_1680() -> (Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) {
  %21 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %22 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %23 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %24 = %21.1;
  %25 = %22.1;
  %26 = %23.0;
  (%24, %25, %26)
}

def @func_1411(%var_1391: Tensor[(5, 16, 13), float64]) -> (Tensor[(16, 14, 3), int8], Tensor[(5, 16, 13), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
  %27 = @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */;
  %28 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
  %29 = cast(%var_1391, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %33 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %34 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %35 = %27.2;
  %36 = not_equal(%31, %32) /* ty=Tensor[(5, 16, 13), bool] */;
  %37 = %33.0;
  %38 = %34.0;
  (%35, %36, %37, %38)
}

def @func_11780() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) {
  %39 = @func_3608() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %40 = @func_9352() /* ty=(Tensor[(1215), int64],) */;
  %41 = %39.2;
  %42 = %40.0;
  %43 = @func_7731() /* ty=Tensor[(16, 14, 3), float32] */;
  (%41, %42, %43)
}

def @func_7889() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), uint32]) {
  %44 = @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %45 = @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %46 = @func_3764() /* ty=(Tensor[(1215), uint32],) */;
  %47 = %44.1;
  %48 = %45.0;
  %49 = %46.0;
  (%47, %48, %49)
}

def @func_12265() -> Tensor[(16, 14, 3), bool] {
  %50 = @func_3608() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %50.1
}

def @func_6283() -> Tensor[(16, 14, 3), float32] {
  %51 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %51.0
}

def @func_4416() -> (Tensor[(1215), int64], Tensor[(16, 14, 3), float32], Tensor[(1215), float64]) {
  %52 = @func_1680() /* ty=(Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */;
  %53 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %54 = @func_3764() /* ty=(Tensor[(1215), uint32],) */;
  %55 = %54.0;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(1215), float64] */;
  %57 = %52.0;
  %58 = %53.0;
  %59 = sin(%56) /* ty=Tensor[(1215), float64] */;
  (%57, %58, %59)
}

def @func_9915() -> (Tensor[(26, 2), int16],) {
  %60 = @func_9155() /* ty=(Tensor[(9, 9, 15), float64], Tensor[(16, 14, 3), float32], Tensor[(26, 2), int16]) */;
  %61 = %60.2;
  (%61,)
}

def @func_10305() -> (Tensor[(16, 14, 3), float32], Tensor[(26, 2), int16]) {
  %62 = @func_6083() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %63 = @func_9915() /* ty=(Tensor[(26, 2), int16],) */;
  %64 = %62.0;
  %65 = %63.0;
  (%64, %65)
}

def @func_911() -> (Tensor[(1215), int64],) {
  %66 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
  %67 = %66.2;
  (%67,)
}

def @func_9155() -> (Tensor[(9, 9, 15), float64], Tensor[(16, 14, 3), float32], Tensor[(26, 2), int16]) {
  %68 = @func_7047() /* ty=Tensor[(9, 9, 15), int16] */;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(9, 9, 15), float64] */;
  %70 = cast(meta[relay.Constant][0] /* ty=Tensor[(26, 2), int16] */, dtype="int16") /* ty=Tensor[(26, 2), int16] */;
  %71 = cos(%69) /* ty=Tensor[(9, 9, 15), float64] */;
  %72 = cast(%71, dtype="int64") /* ty=Tensor[(9, 9, 15), int64] */;
  %73 = reshape(%70, newshape=[52, 1]) /* ty=Tensor[(52, 1), int16] */;
  %74 = reshape(%72, newshape=[1215]) /* ty=Tensor[(1215), int64] */;
  %75 = @func_4559(%73, %74) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(13, 4, 1), float32], int16, Tensor[(52, 1), int16], Tensor[(1215), uint16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %76 = %75.0;
  (%71, %76, meta[relay.Constant][0] /* ty=Tensor[(26, 2), int16] */)
}

def @func_885() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) {
  %77 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
  %78 = %77.2;
  %79 = cast(meta[relay.Constant][1] /* ty=Tensor[(1215), int64] */, dtype="int32") /* ty=Tensor[(1215), int32] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(1), int32] */;
  %81 = cast(%78, dtype="int32") /* ty=Tensor[(1215), int32] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?), int32] */;
  %83 = add(%81, %82) /* ty=Tensor[(1215), int32] */;
  %84 = cast(%83, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %85 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(1215), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %86 = cast(meta[relay.Constant][1] /* ty=Tensor[(1215), int64] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?), float32] */;
  %88 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %89 = divide(%86, %87) /* ty=Tensor[(1215), float32] */;
  %90 = %88.1;
  (%89, %90)
}

def @func_11389() -> Tensor[(16, 14, 3), bool] {
  %91 = @func_3608() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %91.1
}

def @func_10392(%var_10322: Tensor[(16, 1, 1), float64]) -> (Tensor[(16, 1, 1), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 1, 1), float32], Tensor[(9, 9, 15), bool], Tensor[(8, 130), float64]) {
  %92 = cast(%var_10322, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
  %93 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %94 = @func_4736() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) */;
  %95 = cast(%var_10322, dtype="float32") /* ty=Tensor[(16, 1, 1), float32] */;
  %96 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 130), float64] */, dtype="float64") /* ty=Tensor[(8, 130), float64] */;
  %97 = reshape(%96, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %98 = @func_2547(%97) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), float32], Tensor[(1040), float64]) */;
  %99 = acos(%92) /* ty=Tensor[(16, 1, 1), float64] */;
  %100 = %93.0;
  %101 = %94.1;
  %102 = @func_6893() /* ty=Tensor[(16, 14, 3), float32] */;
  %103 = rsqrt(%95) /* ty=Tensor[(16, 1, 1), float32] */;
  %104 = %98.2;
  (%99, %100, %101, %102, %103, %104, meta[relay.Constant][2] /* ty=Tensor[(8, 130), float64] */)
}

def @func_11104() -> Tensor[(9, 9, 15), int64] {
  @func_1746() /* ty=Tensor[(9, 9, 15), int64] */
}

def @func_6602(%var_6592: Tensor[(1040), float64]) -> (Tensor[(1215), float32], Tensor[(1040), float64], Tensor[(1040), float64], Tensor[(16, 14, 3), float32]) {
  %105 = @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %106 = cast(%var_6592, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %107 = reshape(%106, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %108 = @func_2929(%107) /* ty=(Tensor[(16, 14, 3), float64], Tensor[(1040), int16], Tensor[(1215), int64], Tensor[(1040), float64], Tensor[(5, 16, 13), uint64]) */;
  %109 = %105.0;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %111 = reshape(%110, newshape=[3, 405]) /* ty=Tensor[(3, 405), float32] */;
  %112 = @func_4781(%111) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float32], Tensor[(3, 405), int64]) */;
  %113 = %108.3;
  %114 = %112.0;
  (%109, %113, %var_6592, %114)
}

def @func_6351(%var_6335: Tensor[(2, 10, 14), float32]) -> Tensor[(2, 10, 14), float32] {
  %115 = cast(%var_6335, dtype="float32") /* ty=Tensor[(2, 10, 14), float32] */;
  log2(%115) /* ty=Tensor[(2, 10, 14), float32] */
}

def @func_4791() -> Tensor[(16, 14, 3), float32] {
  @func_3448() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_8114() -> (Tensor[(16, 14, 3), float32],) {
  %116 = @func_6993() /* ty=(Tensor[(16, 14, 3), int8], Tensor[(16, 14, 3), float32]) */;
  %117 = %116.1;
  (%117,)
}

def @func_7611(%var_7598: Tensor[(14, 5, 16), uint16]) -> (Tensor[(14, 5, 16), uint16], Tensor[(10, 14, 16), float64]) {
  %118 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 5, 16), uint16] */, dtype="uint16") /* ty=Tensor[(14, 5, 16), uint16] */;
  %119 = shape_of(%var_7598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%var_7598, dtype="uint16") /* ty=Tensor[(14, 5, 16), uint16] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %122 = @func_7305() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(10, 14, 16), float64], Tensor[(560, 4), float64]) */;
  %123 = subtract(%120, %121) /* ty=Tensor[(14, 5, 16), uint16] */;
  %124 = %122.1;
  (%123, %124)
}

def @func_8363(%var_8324: Tensor[(3, 9, 13), float32]) -> (Tensor[(3, 9, 13), float32], Tensor[(16, 14, 3), int8], Tensor[(9, 9, 15), float32]) {
  %125 = cast(%var_8324, dtype="float32") /* ty=Tensor[(3, 9, 13), float32] */;
  %126 = @func_6993() /* ty=(Tensor[(16, 14, 3), int8], Tensor[(16, 14, 3), float32]) */;
  %127 = @func_7810() /* ty=(Tensor[(9, 9, 15), float32],) */;
  %128 = atan(%125) /* ty=Tensor[(3, 9, 13), float32] */;
  %129 = %126.0;
  %130 = %127.0;
  (%128, %129, %130)
}

def @func_10762() -> (Tensor[(9, 9, 15), int16], Tensor[(1215), uint32], Tensor[(1215), bool], Tensor[(16, 14, 3), float64], Tensor[(1040), float64], Tensor[(1, 1200), float32]) {
  %131 = @func_4736() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) */;
  %132 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %133 = cast(meta[relay.Constant][4] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %134 = reshape(%133, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %135 = @func_2929(%134) /* ty=(Tensor[(16, 14, 3), float64], Tensor[(1040), int16], Tensor[(1215), int64], Tensor[(1040), float64], Tensor[(5, 16, 13), uint64]) */;
  %136 = @func_644() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */;
  %137 = @func_7047() /* ty=Tensor[(9, 9, 15), int16] */;
  %138 = %131.0;
  %139 = %132.3;
  %140 = %135.0;
  %141 = %136.2;
  (%137, %138, %139, %140, meta[relay.Constant][4] /* ty=Tensor[(1040), float64] */, %141)
}

def @func_10487() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), int16], Tensor[(16, 14, 3), float32]) {
  %142 = @func_3764() /* ty=(Tensor[(1215), uint32],) */;
  %143 = %142.0;
  %144 = cast(meta[relay.Constant][5] /* ty=Tensor[(1215), uint32] */, dtype="int16") /* ty=Tensor[(1215), int16] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(1), int32] */;
  %146 = cast(%143, dtype="int16") /* ty=Tensor[(1215), int16] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?), int16] */;
  %148 = @func_2363() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %149 = @func_4791() /* ty=Tensor[(16, 14, 3), float32] */;
  %150 = minimum(%146, %147) /* ty=Tensor[(1215), int16] */;
  %151 = %148.0;
  (%149, %150, %151)
}

def @func_9073(%var_9058: Tensor[(1215), int64]) -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), int64]) {
  %152 = @func_1119() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %153 = cast(%var_9058, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %154 = reshape(%153, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %155 = %152.1;
  %156 = @func_6676(%154) /* ty=Tensor[(9, 9, 15), int16] */;
  (%155, %156, %var_9058)
}

def @func_4559(%var_4501: Tensor[(52, 1), int16], %var_4516: Tensor[(1215), int64]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(13, 4, 1), float32], int16, Tensor[(52, 1), int16], Tensor[(1215), uint16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  %157 = cast(meta[relay.Constant][6] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %158 = cast(%var_4501, dtype="int16") /* ty=Tensor[(52, 1), int16] */;
  %159 = reshape(%157, newshape=[]) /* ty=int16 */;
  %160 = reshape(%158, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), int16] */;
  %161 = @func_3422(%159, %160) /* ty=(Tensor[(13, 4, 1), float32],) */;
  %162 = @func_1680() /* ty=(Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */;
  %163 = %162.0;
  %164 = cast(%var_4516, dtype="uint16") /* ty=Tensor[(1215), uint16] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(1), int32] */;
  %166 = cast(%163, dtype="uint16") /* ty=Tensor[(1215), uint16] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %168 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %169 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %170 = @func_2978() /* ty=Tensor[(16, 14, 3), float32] */;
  %171 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  %172 = %161.0;
  %173 = maximum(%166, %167) /* ty=Tensor[(1215), uint16] */;
  %174 = %168.0;
  %175 = %169.0;
  (%170, %171, %172, meta[relay.Constant][6] /* ty=int16 */, %var_4501, %173, %174, %175)
}

def @func_2228() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) {
  %176 = @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %177 = @func_1981() /* ty=Tensor[(1215), int64] */;
  %178 = cast(meta[relay.Constant][7] /* ty=Tensor[(1215), int64] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(1), int32] */;
  %180 = cast(%177, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?), float32] */;
  %182 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %183 = %182.0;
  %184 = cast(meta[relay.Constant][7] /* ty=Tensor[(1215), int64] */, dtype="uint32") /* ty=Tensor[(1215), uint32] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(1), int32] */;
  %186 = cast(%183, dtype="uint32") /* ty=Tensor[(1215), uint32] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %188 = %176.0;
  %189 = floor_divide(%180, %181) /* ty=Tensor[(1215), float32] */;
  %190 = bitwise_and(%186, %187) /* ty=Tensor[(1215), uint32] */;
  (%188, %189, %190)
}

def @func_3191() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %191 = @func_2363() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %192 = %191.0;
  %193 = @func_2978() /* ty=Tensor[(16, 14, 3), float32] */;
  (%192, %193)
}

def @func_6806() -> (Tensor[(1215), float32], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) {
  %194 = @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %195 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
  %196 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %200 = cast(meta[relay.Constant][9] /* ty=Tensor[(2240), float64] */, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %201 = reshape(%200, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
  %202 = @func_1877(%201) /* ty=(Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) */;
  %203 = %194.0;
  %204 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
  %205 = power(%198, %199) /* ty=Tensor[(5, 16, 13), float64] */;
  %206 = %202.1;
  (%203, %204, %205, %206, meta[relay.Constant][9] /* ty=Tensor[(2240), float64] */)
}

def @func_11751() -> (Tensor[(16, 14, 3), float32],) {
  %207 = @func_8459() /* ty=Tensor[(16, 14, 3), float32] */;
  (%207,)
}

def @func_7731() -> Tensor[(16, 14, 3), float32] {
  %208 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %208.0
}

def @func_2080() -> (Tensor[(16, 14, 3), float32],) {
  %209 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
  (%209,)
}

def @func_7047() -> Tensor[(9, 9, 15), int16] {
  %210 = @func_5647() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), float32]) */;
  %210.2
}

def @func_11026() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %211 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %212 = @func_9636() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %213 = %211.0;
  %214 = %212.1;
  (%213, %214)
}

def @func_3202() -> Tensor[(16, 14, 3), float32] {
  %215 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
  %215.0
}

def @func_2734() -> Tensor[(16, 14, 3), bool] {
  %216 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
  %216.0
}

def @func_3801(%var_3773: Tensor[(5, 8, 16), uint16], %var_3774: Tensor[(5, 8, 16), uint16]) -> (Tensor[(5, 8, 16), uint16], Tensor[(5, 16, 13), float32]) {
  %217 = cast(%var_3774, dtype="uint16") /* ty=Tensor[(5, 8, 16), uint16] */;
  %218 = shape_of(%var_3773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%var_3773, dtype="uint16") /* ty=Tensor[(5, 8, 16), uint16] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %221 = multiply(%219, %220) /* ty=Tensor[(5, 8, 16), uint16] */;
  %222 = @func_3295() /* ty=Tensor[(5, 16, 13), float32] */;
  (%221, %222)
}

def @func_12693() -> (Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64], Tensor[(1215), float32]) {
  %223 = @func_4736() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) */;
  %224 = @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %225 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
  %226 = %223.0;
  %227 = %224.0;
  %228 = %225.1;
  %229 = @func_8863() /* ty=Tensor[(1215), float32] */;
  (%226, %227, %228, %229)
}

def @func_7518() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215, 1), int64], Tensor[(16, 14, 3), bool]) {
  %230 = cast(meta[relay.Constant][10] /* ty=Tensor[(1215, 1), int64] */, dtype="int64") /* ty=Tensor[(1215, 1), int64] */;
  %231 = reshape(%230, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %232 = @func_1966(%231) /* ty=(Tensor[(9, 9, 15), int16],) */;
  %233 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
  %234 = @func_2978() /* ty=Tensor[(16, 14, 3), float32] */;
  %235 = %232.0;
  %236 = %233.0;
  (%234, %235, meta[relay.Constant][10] /* ty=Tensor[(1215, 1), int64] */, %236)
}

def @func_1119() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %237 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %238 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %239 = %237.1;
  %240 = %238.0;
  (%239, %240)
}

def @func_10573() -> (Tensor[(16, 14, 3), float32],) {
  %241 = @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %242 = %241.1;
  (%242,)
}

def @func_7984(%var_7899: Tensor[(7, 11, 4), float32], %var_7921: Tensor[(640), uint16]) -> (Tensor[(5, 8, 16), uint16], Tensor[(640), uint16], Tensor[(16, 14, 3), float32], Tensor[(7, 11, 4), bool], Tensor[(16, 14, 3), float64], Tensor[(9, 9, 15), int64]) {
  %243 = cast(%var_7921, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %244 = cast(%var_7921, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %245 = reshape(%243, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
  %246 = reshape(%244, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
  %247 = @func_3801(%245, %246) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(5, 16, 13), float32]) */;
  %248 = @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %249 = cast(%var_7899, dtype="float32") /* ty=Tensor[(7, 11, 4), float32] */;
  %250 = atan(%249) /* ty=Tensor[(7, 11, 4), float32] */;
  %251 = cast(%var_7899, dtype="bool") /* ty=Tensor[(7, 11, 4), bool] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="bool") /* ty=Tensor[(7, 11, 4), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %255 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %256 = @func_6138() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %257 = %247.0;
  %258 = %248.0;
  %259 = greater(%253, %254) /* ty=Tensor[(7, 11, 4), bool] */;
  %260 = %255.0;
  %261 = %256.1;
  (%257, %var_7921, %258, %259, %260, %261)
}

def @func_1227() -> (Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) {
  %262 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %263 = @func_964() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %264 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %265 = %264.1;
  %266 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %269 = atanh(%268) /* ty=Tensor[(16, 14, 3), float64] */;
  %270 = cast(%269, dtype="int8") /* ty=Tensor[(16, 14, 3), int8] */;
  %271 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%265, dtype="int8") /* ty=Tensor[(16, 14, 3), int8] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %274 = %262.0;
  %275 = %263.0;
  %276 = left_shift(%272, %273) /* ty=Tensor[(16, 14, 3), int8] */;
  (%274, %275, %276)
}

def @func_9221() -> (Tensor[(16, 14, 3), float32],) {
  %277 = @func_4648() /* ty=Tensor[(16, 14, 3), float32] */;
  (%277,)
}

def @func_11210() -> Tensor[(52), int16] {
  %278 = @func_9283() /* ty=(Tensor[(52), int16], Tensor[(16, 14, 3), float32]) */;
  %278.0
}

def @func_8742() -> Tensor[(1215), int64] {
  %279 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %279.1
}

def @func_1374() -> Tensor[(5, 16, 13), float64] {
  %280 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 16, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 16, 13), float32] */;
  %281 = log(%280) /* ty=Tensor[(5, 16, 13), float32] */;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  atan(%282) /* ty=Tensor[(5, 16, 13), float64] */
}

def @func_9611() -> (Tensor[(5, 16, 13), float32],) {
  %283 = @func_1700() /* ty=(Tensor[(5, 16, 13), float32],) */;
  %284 = %283.0;
  (%284,)
}

def @func_3161() -> (Tensor[(16, 14, 3), float32],) {
  %285 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  (%285,)
}

def @func_6083() -> (Tensor[(16, 14, 3), float32],) {
  %286 = @func_1590() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %287 = %286.1;
  (%287,)
}

def @func_9342() -> Tensor[(16, 14, 3), float32] {
  %288 = @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %288.0
}

def @func_4607() -> (Tensor[(52, 1), int16], Tensor[(52), int16], Tensor[(1215), float32]) {
  %289 = cast(meta[relay.Constant][12] /* ty=Tensor[(52), int16] */, dtype="int16") /* ty=Tensor[(52), int16] */;
  %290 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %291 = %290.0;
  %292 = cast(%291, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %293 = log(%292) /* ty=Tensor[(1215), float32] */;
  %294 = cast(%293, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %295 = reshape(%289, newshape=[52, 1]) /* ty=Tensor[(52, 1), int16] */;
  %296 = reshape(%294, newshape=[1215]) /* ty=Tensor[(1215), int64] */;
  %297 = @func_4559(%295, %296) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(13, 4, 1), float32], int16, Tensor[(52, 1), int16], Tensor[(1215), uint16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %298 = cast(%293, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %299 = %297.4;
  %300 = cos(%298) /* ty=Tensor[(1215), float32] */;
  (%299, meta[relay.Constant][12] /* ty=Tensor[(52), int16] */, %300)
}

def @func_12431() -> (Tensor[(16, 14, 3), int8], Tensor[(9, 9, 15), int64]) {
  %301 = @func_6993() /* ty=(Tensor[(16, 14, 3), int8], Tensor[(16, 14, 3), float32]) */;
  %302 = @func_964() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %303 = %301.0;
  %304 = %302.1;
  (%303, %304)
}

def @func_3746(%var_3684: Tensor[(16, 14, 3), float32]) -> (Tensor[(16, 14, 3), float64], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  %305 = @func_1119() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %306 = %305.0;
  %307 = cast(%var_3684, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %311 = @func_1700() /* ty=(Tensor[(5, 16, 13), float32],) */;
  %312 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %313 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %314 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %315 = divide(%309, %310) /* ty=Tensor[(16, 14, 3), float64] */;
  %316 = %311.0;
  %317 = %312.0;
  %318 = %313.0;
  %319 = %314.0;
  (%315, %316, %317, %318, %319)
}

def @func_11515() -> Tensor[(16, 14, 3), float32] {
  %320 = @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %320.0
}

def @func_489() -> (Tensor[(16, 14, 3), float64],) {
  %321 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
  %322 = %321.0;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %324 = cos(%323) /* ty=Tensor[(16, 14, 3), float64] */;
  (%324,)
}

def @func_9241() -> (Tensor[(16, 14, 3), float32],) {
  %325 = @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %326 = %325.0;
  (%326,)
}

def @func_6221() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(1215), float32]) {
  %327 = @func_3191() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %328 = @func_5300() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %329 = cast(meta[relay.Constant][13] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %330 = reshape(%329, newshape=[1215]) /* ty=Tensor[(1215), float32] */;
  %331 = @func_2068(%330) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float32], Tensor[(1215), uint8]) */;
  %332 = %327.1;
  %333 = @func_2978() /* ty=Tensor[(16, 14, 3), float32] */;
  %334 = %328.0;
  %335 = %331.1;
  (%332, %333, %334, %335, meta[relay.Constant][13] /* ty=Tensor[(1215), float32] */)
}

def @func_4260(%var_4187: Tensor[(676), uint16], %var_4225: Tensor[(676), uint16], %var_4235: Tensor[(182), uint16], %var_4245: Tensor[(1200), float32]) -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(676), uint64], Tensor[(182), uint16], Tensor[(182), uint16], Tensor[(1215), int64], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) {
  %336 = @func_2693() /* ty=(Tensor[(1215), float32], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
  %337 = cast(%var_4187, dtype="uint16") /* ty=Tensor[(676), uint16] */;
  %338 = reshape(%337, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), uint16] */;
  %339 = @func_4148(%338) /* ty=(Tensor[(13, 13, 4), uint16], Tensor[(16, 14, 3), float32], Tensor[(13, 13, 4), float32]) */;
  %340 = @func_1264() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
  %341 = @func_3608() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %342 = cast(%var_4225, dtype="uint64") /* ty=Tensor[(676), uint64] */;
  %343 = shape_of(%var_4187, dtype="int32") /* ty=Tensor[(1), int32] */;
  %344 = cast(%var_4187, dtype="uint64") /* ty=Tensor[(676), uint64] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %346 = cast(%var_4235, dtype="uint16") /* ty=Tensor[(182), uint16] */;
  %347 = reshape(%346, newshape=[182]) /* ty=Tensor[(182), uint16] */;
  %348 = @func_2866(%347) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(182), uint16]) */;
  %349 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %350 = cast(%var_4245, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %351 = cast(%var_4245, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %352 = reshape(%350, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
  %353 = reshape(%351, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
  %354 = @func_262(%352, %353) /* ty=(Tensor[(5, 16, 15), float32],) */;
  %355 = %336.0;
  %356 = %339.1;
  %357 = %340.1;
  %358 = @func_3448() /* ty=Tensor[(16, 14, 3), float32] */;
  %359 = %341.1;
  %360 = minimum(%344, %345) /* ty=Tensor[(676), uint64] */;
  %361 = %348.2;
  %362 = %349.1;
  %363 = %354.0;
  (%355, %356, %357, %358, %359, %360, %361, %var_4235, %362, %363, %var_4245)
}

def @func_5300() -> (Tensor[(16, 14, 3), float32],) {
  %364 = @func_3202() /* ty=Tensor[(16, 14, 3), float32] */;
  (%364,)
}

def @func_1850(%var_1780: Tensor[(2, 13, 7), uint16], %var_1837: Tensor[(2, 13, 7), uint16]) -> (Tensor[(2, 13, 7), bool], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(1215), bool], Tensor[(2, 13, 7), int64]) {
  %365 = cast(%var_1780, dtype="bool") /* ty=Tensor[(2, 13, 7), bool] */;
  %366 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(2, 13, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 13, 7), uint16] */, dtype="bool") /* ty=Tensor[(2, 13, 7), bool] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %369 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %370 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %371 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %372 = cast(%var_1837, dtype="int64") /* ty=Tensor[(2, 13, 7), int64] */;
  %373 = shape_of(%var_1780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%var_1780, dtype="int64") /* ty=Tensor[(2, 13, 7), int64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %376 = less(%367, %368) /* ty=Tensor[(2, 13, 7), bool] */;
  %377 = %369.0;
  %378 = %370.3;
  %379 = %371.3;
  %380 = subtract(%374, %375) /* ty=Tensor[(2, 13, 7), int64] */;
  (%376, %377, %378, %379, %380)
}

def @func_5612() -> (Tensor[(5, 16, 13), float64],) {
  %381 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
  %382 = %381.1;
  (%382,)
}

def @func_964() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  %383 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %384 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
  %385 = %383.0;
  %386 = %384.1;
  (%385, %386)
}

def @func_3608() -> (Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) {
  %387 = @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */;
  %388 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
  %389 = %387.0;
  %390 = %388.0;
  %391 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
  (%389, %390, %391)
}

def @func_8855() -> (Tensor[(1215), int64], Tensor[(1215), bool]) {
  %392 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %393 = @func_6582() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64], Tensor[(1215), bool], Tensor[(1215), uint32], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) */;
  %394 = %392.0;
  %395 = %393.2;
  (%394, %395)
}

def @func_9352() -> (Tensor[(1215), int64],) {
  %396 = @func_1981() /* ty=Tensor[(1215), int64] */;
  (%396,)
}

def @func_9358() -> (Tensor[(1200), float32],) {
  %397 = @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */;
  %398 = %397.2;
  (%398,)
}

def @func_9458() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(7, 11, 4), bool], Tensor[(77, 4), float32], Tensor[(640), uint16]) {
  %399 = @func_5975() /* ty=(Tensor[(52), int16], Tensor[(16, 14, 3), float32]) */;
  %400 = @func_7346() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %401 = @func_1264() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
  %402 = cast(meta[relay.Constant][15] /* ty=Tensor[(77, 4), float32] */, dtype="float32") /* ty=Tensor[(77, 4), float32] */;
  %403 = cast(meta[relay.Constant][16] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %404 = reshape(%402, newshape=[7, 11, 4]) /* ty=Tensor[(7, 11, 4), float32] */;
  %405 = reshape(%403, newshape=[640]) /* ty=Tensor[(640), uint16] */;
  %406 = @func_7984(%404, %405) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(640), uint16], Tensor[(16, 14, 3), float32], Tensor[(7, 11, 4), bool], Tensor[(16, 14, 3), float64], Tensor[(9, 9, 15), int64]) */;
  %407 = %399.1;
  %408 = %400.1;
  %409 = %401.0;
  %410 = @func_2421() /* ty=Tensor[(1215), bool] */;
  %411 = %406.3;
  (%407, %408, %409, %410, %411, meta[relay.Constant][15] /* ty=Tensor[(77, 4), float32] */, meta[relay.Constant][16] /* ty=Tensor[(640), uint16] */)
}

def @func_1718() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %412 = @func_1119() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %413 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  %414 = %412.0;
  (%413, %414)
}

def @func_10675() -> (Tensor[(1040), float64],) {
  %415 = @func_5127() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(81, 15), uint32], Tensor[(1040), float64], Tensor[(1040), float64]) */;
  %416 = %415.3;
  (%416,)
}

def @func_11174(%var_11162: Tensor[(9, 9, 15), int64]) -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool]) {
  %417 = @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %418 = @func_9011() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %419 = %418.1;
  %420 = cast(%var_11162, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = %417.0;
  %425 = logical_or(%422, %423) /* ty=Tensor[(9, 9, 15), bool] */;
  (%424, %425)
}

def @func_12310() -> (Tensor[(2240), float64],) {
  %426 = @func_6582() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64], Tensor[(1215), bool], Tensor[(1215), uint32], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) */;
  %427 = %426.5;
  (%427,)
}

def @func_8682(%var_8667: Tensor[(640), uint16]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float32], Tensor[(640), uint16]) {
  %428 = @func_1119() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %429 = cast(%var_8667, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %430 = cast(%var_8667, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %431 = reshape(%429, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
  %432 = reshape(%430, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
  %433 = @func_3801(%431, %432) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(5, 16, 13), float32]) */;
  %434 = %428.1;
  %435 = %433.1;
  (%434, %435, %var_8667)
}

def @func_7165() -> (Tensor[(1040), float64], Tensor[(16, 14, 3), float32]) {
  %436 = @func_5127() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(81, 15), uint32], Tensor[(1040), float64], Tensor[(1040), float64]) */;
  %437 = %436.4;
  %438 = @func_6283() /* ty=Tensor[(16, 14, 3), float32] */;
  (%437, %438)
}

def @func_9851(%var_9838: Tensor[(1215), int64]) -> (Tensor[(1215), float64], Tensor[(1215), float32]) {
  %439 = @func_9795() /* ty=(Tensor[(1215), int64], Tensor[(1, 2, 16), float32], Tensor[(1, 2240), float64]) */;
  %440 = %439.0;
  %441 = cast(%var_9838, dtype="float64") /* ty=Tensor[(1215), float64] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(1), int32] */;
  %443 = cast(%440, dtype="float64") /* ty=Tensor[(1215), float64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?), float64] */;
  %445 = @func_2363() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %446 = mod(%443, %444) /* ty=Tensor[(1215), float64] */;
  %447 = %445.1;
  (%446, %447)
}

def @func_2866(%var_2861: Tensor[(182), uint16]) -> (Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(182), uint16]) {
  %448 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %449 = cast(%var_2861, dtype="uint16") /* ty=Tensor[(182), uint16] */;
  %450 = cast(%var_2861, dtype="uint16") /* ty=Tensor[(182), uint16] */;
  %451 = reshape(%449, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), uint16] */;
  %452 = reshape(%450, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), uint16] */;
  %453 = @func_1850(%451, %452) /* ty=(Tensor[(2, 13, 7), bool], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(1215), bool], Tensor[(2, 13, 7), int64]) */;
  %454 = %448.1;
  %455 = %453.3;
  (%454, %455, %var_2861)
}

def @func_1438() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  %456 = @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */;
  %457 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %458 = %456.1;
  %459 = %457.0;
  (%458, %459)
}

def @func_1774() -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) {
  %460 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %461 = %460.2;
  %462 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
  (%461, %462)
}

def @func_11440() -> (Tensor[(26, 2), int16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  %463 = @func_9915() /* ty=(Tensor[(26, 2), int16],) */;
  %464 = @func_6083() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %465 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %466 = %463.0;
  %467 = %464.0;
  %468 = %465.0;
  (%466, %467, %468)
}

def @func_6535() -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), bool], Tensor[(1040), float64]) {
  %469 = cast(meta[relay.Constant][17] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %470 = reshape(%469, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %471 = @func_2298(%470) /* ty=(Tensor[(1200), float32], Tensor[(5, 16, 13), bool]) */;
  %472 = @func_6283() /* ty=Tensor[(16, 14, 3), float32] */;
  %473 = %471.1;
  (%472, %473, meta[relay.Constant][17] /* ty=Tensor[(1040), float64] */)
}

def @func_1922() -> (Tensor[(16, 14, 3), float32],) {
  %474 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %475 = %474.0;
  (%475,)
}

def @func_11726() -> Tensor[(16, 14, 3), bool] {
  @func_11389() /* ty=Tensor[(16, 14, 3), bool] */
}

def @func_7810() -> (Tensor[(9, 9, 15), float32],) {
  %476 = @func_5647() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), float32]) */;
  %477 = %476.2;
  %478 = cast(%477, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %479 = log(%478) /* ty=Tensor[(9, 9, 15), float32] */;
  (%479,)
}

def @func_1590() -> (Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) {
  %480 = @func_1264() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
  %481 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %482 = %480.1;
  %483 = %481.2;
  (%482, %483)
}

def @func_12530() -> (Tensor[(5, 16, 13), float64], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), int64], Tensor[(5, 16, 13), bool]) {
  %484 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %485 = cast(meta[relay.Constant][18] /* ty=Tensor[(1215), int64] */, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %486 = reshape(%485, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %487 = @func_2485(%486) /* ty=(Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), bool]) */;
  %488 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %490 = reshape(%489, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %491 = @func_2298(%490) /* ty=(Tensor[(1200), float32], Tensor[(5, 16, 13), bool]) */;
  %492 = %484.1;
  %493 = %487.0;
  %494 = %491.1;
  (%488, %492, %493, meta[relay.Constant][18] /* ty=Tensor[(1215), int64] */, %494)
}

def @func_3422(%var_3412: int16, %var_3413: Tensor[(13, 4, 1), int16]) -> (Tensor[(13, 4, 1), float32],) {
  %495 = cast(%var_3412, dtype="int16") /* ty=int16 */;
  %496 = cast(%var_3413, dtype="int16") /* ty=Tensor[(13, 4, 1), int16] */;
  %497 = multiply(%495, %496) /* ty=Tensor[(13, 4, 1), int16] */;
  %498 = cast(%497, dtype="float32") /* ty=Tensor[(13, 4, 1), float32] */;
  %499 = acosh(%498) /* ty=Tensor[(13, 4, 1), float32] */;
  (%499,)
}

def @func_5764() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %500 = @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %501 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %502 = %500.0;
  %503 = %501.0;
  (%502, %503)
}

def @func_6462() -> (Tensor[(16, 14, 3), float32],) {
  %504 = @func_5033() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %505 = %504.0;
  (%505,)
}

def @func_11399() -> (Tensor[(16, 14, 3), float32],) {
  %506 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %507 = %506.0;
  (%507,)
}

def @func_5455() -> Tensor[(16, 14, 3), bool] {
  %508 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %508.0
}

def @func_12601() -> Tensor[(16, 14, 3), float32] {
  %509 = @func_3242() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %510 = %509.1;
  %511 = cast(%510, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
  log2(%511) /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_6993() -> (Tensor[(16, 14, 3), int8], Tensor[(16, 14, 3), float32]) {
  %512 = @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */;
  %513 = @func_6760() /* ty=(Tensor[(9, 9, 15), int64], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), float32]) */;
  %514 = %512.2;
  %515 = %513.3;
  (%514, %515)
}

def @func_4781(%var_4775: Tensor[(3, 405), float32]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float32], Tensor[(3, 405), int64]) {
  %516 = @func_3242() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %517 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 405), float32] */, dtype="float32") /* ty=Tensor[(3, 405), float32] */;
  %518 = reshape(%517, newshape=[1215]) /* ty=Tensor[(1215), float32] */;
  %519 = @func_2068(%518) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float32], Tensor[(1215), uint8]) */;
  %520 = cast(%var_4775, dtype="int64") /* ty=Tensor[(3, 405), int64] */;
  %521 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(3, 405), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %522 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 405), float32] */, dtype="int64") /* ty=Tensor[(3, 405), int64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %524 = %516.1;
  %525 = %519.2;
  %526 = bitwise_xor(%522, %523) /* ty=Tensor[(3, 405), int64] */;
  (%524, %525, %526)
}

def @func_5715(%var_5703: Tensor[(81, 15), uint32]) -> Tensor[(81, 15), float64] {
  %527 = @func_5127() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(81, 15), uint32], Tensor[(1040), float64], Tensor[(1040), float64]) */;
  %528 = %527.2;
  %529 = cast(%var_5703, dtype="bool") /* ty=Tensor[(81, 15), bool] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(2), int32] */;
  %531 = cast(%528, dtype="bool") /* ty=Tensor[(81, 15), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %533 = logical_and(%531, %532) /* ty=Tensor[(81, 15), bool] */;
  %534 = cast(%var_5703, dtype="float64") /* ty=Tensor[(81, 15), float64] */;
  %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(2), int32] */;
  %536 = cast(%533, dtype="float64") /* ty=Tensor[(81, 15), float64] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_divide(%536, %537) /* ty=Tensor[(81, 15), float64] */
}

def @func_6862() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) {
  %538 = @func_6384() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %539 = cast(meta[relay.Constant][20] /* ty=Tensor[(1215), int64] */, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %540 = reshape(%539, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %541 = @func_1966(%540) /* ty=(Tensor[(9, 9, 15), int16],) */;
  %542 = @func_6221() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(1215), float32]) */;
  %543 = %538.0;
  %544 = @func_4791() /* ty=Tensor[(16, 14, 3), float32] */;
  %545 = %541.0;
  %546 = %542.0;
  (%543, %544, %545, meta[relay.Constant][20] /* ty=Tensor[(1215), int64] */, %546)
}

def @func_7305() -> (Tensor[(16, 14, 3), float32], Tensor[(10, 14, 16), float64], Tensor[(560, 4), float64]) {
  %547 = cast(meta[relay.Constant][21] /* ty=Tensor[(560, 4), float64] */, dtype="float64") /* ty=Tensor[(560, 4), float64] */;
  %548 = reshape(%547, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
  %549 = @func_1877(%548) /* ty=(Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) */;
  %550 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  %551 = %549.0;
  (%550, %551, meta[relay.Constant][21] /* ty=Tensor[(560, 4), float64] */)
}

def @func_7346() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
  %552 = @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %553 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
  %554 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
  %555 = %552.0;
  (%553, %554, %555)
}

def @func_1333() -> Tensor[(16, 14, 3), float32] {
  %556 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %556.1
}

def @func_8308() -> (Tensor[(16, 14, 3), float32],) {
  %557 = @func_6876() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %558 = %557.0;
  (%558,)
}

def @func_10936() -> (Tensor[(26, 2), int16],) {
  %559 = @func_9915() /* ty=(Tensor[(26, 2), int16],) */;
  %560 = %559.0;
  (%560,)
}

def @func_6115(%var_6097: Tensor[(16, 14, 3), float32]) -> (Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) {
  %561 = @func_4607() /* ty=(Tensor[(52, 1), int16], Tensor[(52), int16], Tensor[(1215), float32]) */;
  %562 = @func_6083() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %563 = %562.0;
  %564 = cast(%var_6097, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %568 = %561.2;
  %569 = equal(%566, %567) /* ty=Tensor[(16, 14, 3), bool] */;
  (%568, %569)
}

def @func_8459() -> Tensor[(16, 14, 3), float32] {
  @func_7731() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_10237(%var_10169: Tensor[(11, 2240), float64], %var_10183: Tensor[(11, 2240), uint8], %var_10202: Tensor[(1350), int8]) -> (Tensor[(16, 14, 3), float32], Tensor[(11, 2240), float32], Tensor[(10, 15, 9), bool], Tensor[(1350), int8], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(2, 13, 7), int64], Tensor[(182), uint16]) {
  %570 = @func_6138() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %571 = @func_9795() /* ty=(Tensor[(1215), int64], Tensor[(1, 2, 16), float32], Tensor[(1, 2240), float64]) */;
  %572 = %571.2;
  %573 = cast(%572, dtype="uint8") /* ty=Tensor[(1, 2240), uint8] */;
  %574 = cast(%var_10169, dtype="uint8") /* ty=Tensor[(11, 2240), uint8] */;
  %575 = minimum(%573, %574) /* ty=Tensor[(11, 2240), uint8] */;
  %576 = cast(%var_10183, dtype="float32") /* ty=Tensor[(11, 2240), float32] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(2), int32] */;
  %578 = cast(%575, dtype="float32") /* ty=Tensor[(11, 2240), float32] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %580 = cast(%var_10202, dtype="int8") /* ty=Tensor[(1350), int8] */;
  %581 = cast(%var_10202, dtype="int8") /* ty=Tensor[(1350), int8] */;
  %582 = reshape(%580, newshape=[10, 15, 9]) /* ty=Tensor[(10, 15, 9), int8] */;
  %583 = reshape(%581, newshape=[10, 15, 9]) /* ty=Tensor[(10, 15, 9), int8] */;
  %584 = @func_7112(%582, %583) /* ty=(Tensor[(10, 15, 9), bool],) */;
  %585 = @func_6221() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(1215), float32]) */;
  %586 = @func_9557() /* ty=(Tensor[(77, 4), float32], Tensor[(1215), float32], Tensor[(77, 4), float64], Tensor[(16, 14, 3), float32]) */;
  %587 = @func_3242() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %588 = @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %589 = cast(meta[relay.Constant][22] /* ty=Tensor[(182), uint16] */, dtype="uint16") /* ty=Tensor[(182), uint16] */;
  %590 = cast(meta[relay.Constant][22] /* ty=Tensor[(182), uint16] */, dtype="uint16") /* ty=Tensor[(182), uint16] */;
  %591 = reshape(%589, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), uint16] */;
  %592 = reshape(%590, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), uint16] */;
  %593 = @func_1850(%591, %592) /* ty=(Tensor[(2, 13, 7), bool], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(1215), bool], Tensor[(2, 13, 7), int64]) */;
  %594 = %570.0;
  %595 = mod(%578, %579) /* ty=Tensor[(11, 2240), float32] */;
  %596 = %584.0;
  %597 = %585.2;
  %598 = %586.3;
  %599 = @func_5455() /* ty=Tensor[(16, 14, 3), bool] */;
  %600 = %587.0;
  %601 = %588.0;
  %602 = %593.4;
  (%594, %595, %596, %var_10202, %597, %598, %599, %600, %601, %602, meta[relay.Constant][22] /* ty=Tensor[(182), uint16] */)
}

def @func_9194() -> (Tensor[(16, 5, 8), float32],) {
  %603 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 5, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 8), float32] */;
  %604 = atanh(%603) /* ty=Tensor[(16, 5, 8), float32] */;
  (%604,)
}

def @func_6623() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64]) {
  %605 = @func_5975() /* ty=(Tensor[(52), int16], Tensor[(16, 14, 3), float32]) */;
  %606 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %607 = %605.1;
  %608 = %606.0;
  (%607, %608)
}

def @func_11313() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 5, 8), float32]) {
  %609 = @func_9241() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %610 = @func_9194() /* ty=(Tensor[(16, 5, 8), float32],) */;
  %611 = %609.0;
  %612 = %610.0;
  (%611, %612)
}

def @func_5553() -> Tensor[(16, 14, 3), float32] {
  %613 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %613.0
}

def @func_11608() -> Tensor[(1215), float32] {
  @func_8134() /* ty=Tensor[(1215), float32] */
}

def @func_2978() -> Tensor[(16, 14, 3), float32] {
  %614 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
  %614.0
}

def @func_12038() -> Tensor[(1215), float32] {
  @func_8863() /* ty=Tensor[(1215), float32] */
}

def @func_12543() -> Tensor[(9, 9, 15), float32] {
  %615 = @func_7810() /* ty=(Tensor[(9, 9, 15), float32],) */;
  %615.0
}

def @func_2832() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) {
  %616 = @func_2115() /* ty=(Tensor[(1215), float32],) */;
  %617 = %616.0;
  %618 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  (%617, %618)
}

def @func_4148(%var_4126: Tensor[(13, 13, 4), uint16]) -> (Tensor[(13, 13, 4), uint16], Tensor[(16, 14, 3), float32], Tensor[(13, 13, 4), float32]) {
  %619 = cast(%var_4126, dtype="uint16") /* ty=Tensor[(13, 13, 4), uint16] */;
  %620 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(13, 13, 4), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 13, 4), uint16] */, dtype="uint16") /* ty=Tensor[(13, 13, 4), uint16] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %623 = cast(%var_4126, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %624 = minimum(%621, %622) /* ty=Tensor[(13, 13, 4), uint16] */;
  %625 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
  %626 = asinh(%623) /* ty=Tensor[(13, 13, 4), float32] */;
  (%624, %625, %626)
}

def @func_5033() -> (Tensor[(16, 14, 3), float32],) {
  %627 = @func_2228() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */;
  %628 = %627.0;
  (%628,)
}

def @func_2648() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %629 = @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */;
  %630 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
  %631 = %629.1;
  %632 = %630.0;
  (%631, %632)
}

def @func_3860(%var_3858: Tensor[(1, 2240), float64]) -> (Tensor[(1, 2, 16), float32], Tensor[(10, 14, 16), float64], Tensor[(1, 2240), float64]) {
  %633 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
  %634 = cast(%var_3858, dtype="float64") /* ty=Tensor[(1, 2240), float64] */;
  %635 = reshape(%634, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
  %636 = @func_1877(%635) /* ty=(Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) */;
  %637 = sigmoid(%633) /* ty=Tensor[(1, 2, 16), float32] */;
  %638 = %636.0;
  (%637, %638, %var_3858)
}

def @func_2929(%var_2900: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float64], Tensor[(1040), int16], Tensor[(1215), int64], Tensor[(1040), float64], Tensor[(5, 16, 13), uint64]) {
  %639 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %640 = cast(%var_2900, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %641 = reshape(%640, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %642 = @func_1411(%641) /* ty=(Tensor[(16, 14, 3), int8], Tensor[(5, 16, 13), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %643 = %642.1;
  %644 = cast(%643, dtype="int16") /* ty=Tensor[(5, 16, 13), int16] */;
  %645 = shape_of(%var_2900, dtype="int32") /* ty=Tensor[(1), int32] */;
  %646 = cast(%var_2900, dtype="int16") /* ty=Tensor[(1040), int16] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?), int16] */;
  %648 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %649 = %648.0;
  %650 = cast(%649, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %651 = reshape(%650, newshape=[1215]) /* ty=Tensor[(1215), float32] */;
  %652 = @func_2068(%651) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float32], Tensor[(1215), uint8]) */;
  %653 = cast(%var_2900, dtype="uint64") /* ty=Tensor[(1040), uint64] */;
  %654 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%643, dtype="uint64") /* ty=Tensor[(5, 16, 13), uint64] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %657 = %639.0;
  %658 = maximum(%646, %647) /* ty=Tensor[(1040), int16] */;
  %659 = %652.1;
  %660 = logical_xor(%655, %656) /* ty=Tensor[(5, 16, 13), uint64] */;
  (%657, %658, %649, %659, %660)
}

def @func_2693() -> (Tensor[(1215), float32], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) {
  %661 = @func_2115() /* ty=(Tensor[(1215), float32],) */;
  %662 = @func_1700() /* ty=(Tensor[(5, 16, 13), float32],) */;
  %663 = @func_1264() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
  %664 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
  %665 = %661.0;
  %666 = %662.0;
  %667 = %663.1;
  %668 = %664.0;
  (%665, %666, %667, %668)
}

def @func_6876() -> (Tensor[(16, 14, 3), float32],) {
  %669 = @func_3202() /* ty=Tensor[(16, 14, 3), float32] */;
  (%669,)
}

def @func_3527() -> Tensor[(1215), bool] {
  @func_2421() /* ty=Tensor[(1215), bool] */
}

def @func_9683(%var_9677: Tensor[(5, 15, 6), float32]) -> Tensor[(5, 15, 6), float32] {
  %670 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 15, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
  %671 = shape_of(%var_9677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%var_9677, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%672, %673) /* ty=Tensor[(5, 15, 6), float32] */
}

def @func_2115() -> (Tensor[(1215), float32],) {
  %674 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %675 = %674.1;
  %676 = cast(%675, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %677 = log10(%676) /* ty=Tensor[(1215), float32] */;
  (%677,)
}

def @func_8134() -> Tensor[(1215), float32] {
  %678 = @func_2693() /* ty=(Tensor[(1215), float32], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
  %679 = %678.0;
  %680 = cast(%679, dtype="float32") /* ty=Tensor[(1215), float32] */;
  exp(%680) /* ty=Tensor[(1215), float32] */
}

def @func_2421() -> Tensor[(1215), bool] {
  %681 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %681.3
}

def @func_5239(%var_5208: Tensor[(182), uint16]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), float32], Tensor[(1040, 1), float64], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), float32], Tensor[(182), uint16], Tensor[(182), uint16]) {
  %682 = @func_4416() /* ty=(Tensor[(1215), int64], Tensor[(16, 14, 3), float32], Tensor[(1215), float64]) */;
  %683 = cast(meta[relay.Constant][27] /* ty=Tensor[(1040, 1), float64] */, dtype="float64") /* ty=Tensor[(1040, 1), float64] */;
  %684 = reshape(%683, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %685 = @func_2547(%684) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), float32], Tensor[(1040), float64]) */;
  %686 = @func_2734() /* ty=Tensor[(16, 14, 3), bool] */;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
  %688 = reshape(%687, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float32] */;
  %689 = @func_3746(%688) /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %690 = cast(%var_5208, dtype="uint16") /* ty=Tensor[(182), uint16] */;
  %691 = reshape(%690, newshape=[182]) /* ty=Tensor[(182), uint16] */;
  %692 = @func_2866(%691) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(182), uint16]) */;
  %693 = %682.1;
  %694 = %685.3;
  %695 = %689.1;
  %696 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  %697 = %692.2;
  (%693, %686, %694, meta[relay.Constant][27] /* ty=Tensor[(1040, 1), float64] */, %695, %696, %697, %var_5208)
}

def @func_11078() -> (Tensor[(77, 4), uint16],) {
  %698 = @func_9458() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(7, 11, 4), bool], Tensor[(77, 4), float32], Tensor[(640), uint16]) */;
  %699 = %698.5;
  %700 = cast(%699, dtype="float32") /* ty=Tensor[(77, 4), float32] */;
  %701 = exp(%700) /* ty=Tensor[(77, 4), float32] */;
  %702 = cast(%701, dtype="uint16") /* ty=Tensor[(77, 4), uint16] */;
  %703 = shape_of(%699, dtype="int32") /* ty=Tensor[(2), int32] */;
  %704 = cast(%699, dtype="uint16") /* ty=Tensor[(77, 4), uint16] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %706 = bitwise_xor(%704, %705) /* ty=Tensor[(77, 4), uint16] */;
  (%706,)
}

def @func_5975() -> (Tensor[(52), int16], Tensor[(16, 14, 3), float32]) {
  %707 = @func_4607() /* ty=(Tensor[(52, 1), int16], Tensor[(52), int16], Tensor[(1215), float32]) */;
  %708 = @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %709 = %707.1;
  %710 = %708.0;
  (%709, %710)
}

def @func_9636() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) {
  %711 = @func_4607() /* ty=(Tensor[(52, 1), int16], Tensor[(52), int16], Tensor[(1215), float32]) */;
  %712 = @func_7205() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %713 = %711.2;
  %714 = %712.1;
  (%713, %714)
}

def @func_805() -> (Tensor[(16, 14, 3), float32],) {
  %715 = @func_644() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */;
  %716 = %715.0;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
  %718 = erf(%717) /* ty=Tensor[(16, 14, 3), float32] */;
  (%718,)
}

def @func_12759() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float64]) {
  %719 = @func_5033() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %720 = @func_8134() /* ty=Tensor[(1215), float32] */;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(1215), float64] */;
  %722 = %719.0;
  %723 = sinh(%721) /* ty=Tensor[(1215), float64] */;
  (%722, %723)
}

def @func_8957() -> Tensor[(16, 14, 3), float32] {
  @func_8459() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_3242() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %724 = @func_1119() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %725 = %724.1;
  %726 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
  (%725, %726)
}

def @func_9557() -> (Tensor[(77, 4), float32], Tensor[(1215), float32], Tensor[(77, 4), float64], Tensor[(16, 14, 3), float32]) {
  %727 = @func_9458() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(7, 11, 4), bool], Tensor[(77, 4), float32], Tensor[(640), uint16]) */;
  %728 = %727.5;
  %729 = cast(%728, dtype="float32") /* ty=Tensor[(77, 4), float32] */;
  %730 = cast(%728, dtype="float64") /* ty=Tensor[(77, 4), float64] */;
  %731 = @func_1680() /* ty=(Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */;
  %732 = tan(%729) /* ty=Tensor[(77, 4), float32] */;
  %733 = @func_8134() /* ty=Tensor[(1215), float32] */;
  %734 = log2(%730) /* ty=Tensor[(77, 4), float64] */;
  %735 = %731.2;
  (%732, %733, %734, %735)
}

def @func_2781() -> Tensor[(16, 14, 3), float32] {
  %736 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %736.1
}

def @func_10513() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %737 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %738 = @func_6623() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64]) */;
  %739 = %737.0;
  %740 = %738.0;
  (%739, %740)
}

def @func_1981() -> Tensor[(1215), int64] {
  %741 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
  %741.2
}

def @func_9811() -> Tensor[(16, 14, 3), float32] {
  @func_4791() /* ty=Tensor[(16, 14, 3), float32] */
}

def @main(%var_12762: Tensor[(8, 8, 11), float32], %var_12769: int16, %var_12770: Tensor[(52), int16], %var_12777: Tensor[(1040), float64]) -> (Tensor[(13, 4, 1), float32], Tensor[(52), int16], Tensor[(1215), float32], Tensor[(1040), float64], Tensor[(8, 8, 11), uint64]) {
  %742 = cast(%var_12769, dtype="int16") /* ty=int16 */;
  %743 = cast(%var_12770, dtype="int16") /* ty=Tensor[(52), int16] */;
  %744 = reshape(%742, newshape=[]) /* ty=int16 */;
  %745 = reshape(%743, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), int16] */;
  %746 = @func_3422(%744, %745) /* ty=(Tensor[(13, 4, 1), float32],) */;
  %747 = cast(%var_12777, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %748 = reshape(%747, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %749 = @func_6602(%748) /* ty=(Tensor[(1215), float32], Tensor[(1040), float64], Tensor[(1040), float64], Tensor[(16, 14, 3), float32]) */;
  %750 = cast(%var_12762, dtype="float32") /* ty=Tensor[(8, 8, 11), float32] */;
  %751 = sigmoid(%750) /* ty=Tensor[(8, 8, 11), float32] */;
  %752 = cast(%751, dtype="uint64") /* ty=Tensor[(8, 8, 11), uint64] */;
  %753 = cast(%var_12769, dtype="uint64") /* ty=uint64 */;
  %754 = %746.0;
  %755 = %749.0;
  %756 = right_shift(%752, %753) /* ty=Tensor[(8, 8, 11), uint64] */;
  (%754, %var_12770, %755, %var_12777, %756)
}

def @func_4023(%var_4011: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1040), float64], Tensor[(5, 8, 16), uint16], Tensor[(640), uint16]) {
  %757 = cast(%var_4011, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %758 = reshape(%757, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %759 = @func_3391(%758) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1215), float64], Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) */;
  %760 = cast(meta[relay.Constant][28] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %761 = cast(meta[relay.Constant][28] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %762 = reshape(%760, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
  %763 = reshape(%761, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
  %764 = @func_3801(%762, %763) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(5, 16, 13), float32]) */;
  %765 = @func_2781() /* ty=Tensor[(16, 14, 3), float32] */;
  %766 = %759.1;
  %767 = %764.0;
  (%765, %766, %var_4011, %767, meta[relay.Constant][28] /* ty=Tensor[(640), uint16] */)
}

def @func_5127() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(81, 15), uint32], Tensor[(1040), float64], Tensor[(1040), float64]) {
  %768 = @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %769 = cast(meta[relay.Constant][29] /* ty=Tensor[(81, 15), uint32] */, dtype="uint32") /* ty=Tensor[(81, 15), uint32] */;
  %770 = reshape(%769, newshape=[1215]) /* ty=Tensor[(1215), uint32] */;
  %771 = @func_5015(%770) /* ty=(Tensor[(1200), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %772 = cast(meta[relay.Constant][30] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %773 = reshape(%772, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %774 = @func_2547(%773) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), float32], Tensor[(1040), float64]) */;
  %775 = %768.0;
  %776 = %771.4;
  %777 = %774.4;
  (%775, %776, meta[relay.Constant][29] /* ty=Tensor[(81, 15), uint32] */, %777, meta[relay.Constant][30] /* ty=Tensor[(1040), float64] */)
}

def @func_10270(%var_10249: Tensor[(14, 9, 3), float32]) -> Tensor[(14, 9, 3), float64] {
  %778 = cast(%var_10249, dtype="float32") /* ty=Tensor[(14, 9, 3), float32] */;
  %779 = acosh(%778) /* ty=Tensor[(14, 9, 3), float32] */;
  %780 = cast(%779, dtype="float64") /* ty=Tensor[(14, 9, 3), float64] */;
  %781 = shape_of(%var_10249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%var_10249, dtype="float64") /* ty=Tensor[(14, 9, 3), float64] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%782, %783) /* ty=Tensor[(14, 9, 3), float64] */
}

def @func_12122() -> (Tensor[(16, 14, 3), float32], Tensor[(640), uint16], Tensor[(308), float32], Tensor[(640), uint16], Tensor[(13, 13, 4), float32], Tensor[(676), uint16]) {
  %784 = @func_6221() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(1215), float32]) */;
  %785 = cast(meta[relay.Constant][31] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %786 = cast(meta[relay.Constant][32] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %787 = reshape(%785, newshape=[7, 11, 4]) /* ty=Tensor[(7, 11, 4), float32] */;
  %788 = reshape(%786, newshape=[640]) /* ty=Tensor[(640), uint16] */;
  %789 = @func_7984(%787, %788) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(640), uint16], Tensor[(16, 14, 3), float32], Tensor[(7, 11, 4), bool], Tensor[(16, 14, 3), float64], Tensor[(9, 9, 15), int64]) */;
  %790 = cast(meta[relay.Constant][33] /* ty=Tensor[(676), uint16] */, dtype="uint16") /* ty=Tensor[(676), uint16] */;
  %791 = reshape(%790, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), uint16] */;
  %792 = @func_4148(%791) /* ty=(Tensor[(13, 13, 4), uint16], Tensor[(16, 14, 3), float32], Tensor[(13, 13, 4), float32]) */;
  %793 = %784.2;
  %794 = %789.1;
  %795 = %792.2;
  (%793, %794, meta[relay.Constant][31] /* ty=Tensor[(308), float32] */, meta[relay.Constant][32] /* ty=Tensor[(640), uint16] */, %795, meta[relay.Constant][33] /* ty=Tensor[(676), uint16] */)
}

def @func_7112(%var_7104: Tensor[(10, 15, 9), int8], %var_7105: Tensor[(10, 15, 9), int8]) -> (Tensor[(10, 15, 9), bool],) {
  %796 = cast(%var_7105, dtype="bool") /* ty=Tensor[(10, 15, 9), bool] */;
  %797 = shape_of(%var_7104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%var_7104, dtype="bool") /* ty=Tensor[(10, 15, 9), bool] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %800 = equal(%798, %799) /* ty=Tensor[(10, 15, 9), bool] */;
  (%800,)
}

def @func_7585(%var_7562: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float64]) {
  %801 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %802 = cast(%var_7562, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %803 = reshape(%802, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %804 = @func_3391(%803) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1215), float64], Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) */;
  %805 = %804.1;
  %806 = cast(%805, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %807 = %801.1;
  %808 = sinh(%806) /* ty=Tensor[(5, 16, 13), float64] */;
  (%807, %var_7562, %808)
}

def @func_8863() -> Tensor[(1215), float32] {
  %809 = @func_2115() /* ty=(Tensor[(1215), float32],) */;
  %809.0
}

def @func_11939(%var_11933: Tensor[(1215), uint32]) -> Tensor[(1215), bool] {
  %810 = @func_4736() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) */;
  %811 = %810.0;
  %812 = cast(%var_11933, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(1), int32] */;
  %814 = cast(%811, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%814, %815) /* ty=Tensor[(1215), bool] */
}

def @func_2298(%var_2292: Tensor[(5, 16, 13), float64]) -> (Tensor[(1200), float32], Tensor[(5, 16, 13), bool]) {
  %816 = @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */;
  %817 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
  %818 = %817.1;
  %819 = cast(%var_2292, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
  %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%818, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %823 = %816.2;
  %824 = greater(%821, %822) /* ty=Tensor[(5, 16, 13), bool] */;
  (%823, %824)
}

def @func_3391(%var_3329: Tensor[(5, 16, 13), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1215), float64], Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) {
  %825 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %826 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
  %827 = cast(%var_3329, dtype="int64") /* ty=Tensor[(5, 16, 13), int64] */;
  %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%826, dtype="int64") /* ty=Tensor[(5, 16, 13), int64] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %831 = @func_2421() /* ty=Tensor[(1215), bool] */;
  %832 = cast(%831, dtype="float64") /* ty=Tensor[(1215), float64] */;
  %833 = @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %834 = cast(%831, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %835 = tan(%834) /* ty=Tensor[(1215), float32] */;
  %836 = cast(%835, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %837 = reshape(%836, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %838 = @func_2485(%837) /* ty=(Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), bool]) */;
  %839 = %825.0;
  %840 = maximum(%829, %830) /* ty=Tensor[(5, 16, 13), int64] */;
  %841 = sigmoid(%832) /* ty=Tensor[(1215), float64] */;
  %842 = %833.1;
  %843 = %838.1;
  (%839, %840, %841, %842, %835, %843)
}

def @func_5925() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  %844 = @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %845 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %846 = %844.1;
  %847 = %845.5;
  (%846, %847)
}

def @func_8077(%var_8049: Tensor[(2240), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(2240), bool]) {
  %848 = cast(%var_8049, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %849 = exp(%848) /* ty=Tensor[(2240), float64] */;
  %850 = @func_6806() /* ty=(Tensor[(1215), float32], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) */;
  %851 = %850.4;
  %852 = cast(%var_8049, dtype="int16") /* ty=Tensor[(2240), int16] */;
  %853 = shape_of(%851, dtype="int32") /* ty=Tensor[(1), int32] */;
  %854 = cast(%851, dtype="int16") /* ty=Tensor[(2240), int16] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?), int16] */;
  %856 = logical_xor(%854, %855) /* ty=Tensor[(2240), int16] */;
  %857 = cast(%856, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %858 = shape_of(%849, dtype="int32") /* ty=Tensor[(1), int32] */;
  %859 = cast(%849, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?), bool] */;
  %861 = @func_7731() /* ty=Tensor[(16, 14, 3), float32] */;
  %862 = logical_and(%859, %860) /* ty=Tensor[(2240), bool] */;
  (%861, %862)
}

def @func_12438() -> (Tensor[(16, 14, 3), float32],) {
  %863 = @func_8404() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %864 = %863.1;
  (%864,)
}

def @func_6138() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  %865 = @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %866 = %865.0;
  %867 = @func_1746() /* ty=Tensor[(9, 9, 15), int64] */;
  (%866, %867)
}

def @func_7205() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %868 = @func_1718() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %869 = @func_1718() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %870 = %868.0;
  %871 = %869.0;
  (%870, %871)
}

def @func_5015(%var_4873: Tensor[(1215), uint32]) -> (Tensor[(1200), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
  %872 = @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */;
  %873 = @func_3764() /* ty=(Tensor[(1215), uint32],) */;
  %874 = %873.0;
  %875 = cast(%var_4873, dtype="int8") /* ty=Tensor[(1215), int8] */;
  %876 = shape_of(%874, dtype="int32") /* ty=Tensor[(1), int32] */;
  %877 = cast(%874, dtype="int8") /* ty=Tensor[(1215), int8] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?), int8] */;
  %879 = bitwise_xor(%877, %878) /* ty=Tensor[(1215), int8] */;
  %880 = cast(%879, dtype="float64") /* ty=Tensor[(1215), float64] */;
  %881 = shape_of(%874, dtype="int32") /* ty=Tensor[(1), int32] */;
  %882 = cast(%874, dtype="float64") /* ty=Tensor[(1215), float64] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?), float64] */;
  %884 = floor_mod(%882, %883) /* ty=Tensor[(1215), float64] */;
  %885 = cast(%879, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(1), int32] */;
  %887 = cast(%884, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?), bool] */;
  %889 = @func_2363() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %890 = cast(%var_4873, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %891 = acosh(%890) /* ty=Tensor[(1215), float32] */;
  %892 = cast(%891, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %893 = %872.2;
  %894 = greater(%887, %888) /* ty=Tensor[(1215), bool] */;
  %895 = %889.0;
  %896 = @func_2781() /* ty=Tensor[(16, 14, 3), float32] */;
  %897 = cosh(%892) /* ty=Tensor[(1215), float32] */;
  (%893, %894, %895, %896, %897)
}

def @func_8404() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %898 = @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %899 = @func_3448() /* ty=Tensor[(16, 14, 3), float32] */;
  %900 = %898.0;
  (%899, %900)
}

def @func_644() -> (Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) {
  %901 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %902 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 1200), float32] */, dtype="float32") /* ty=Tensor[(1, 1200), float32] */;
  %903 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 1200), float32] */, dtype="float32") /* ty=Tensor[(1, 1200), float32] */;
  %904 = reshape(%902, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
  %905 = reshape(%903, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
  %906 = @func_262(%904, %905) /* ty=(Tensor[(5, 16, 15), float32],) */;
  %907 = %901.0;
  %908 = %906.0;
  (%907, %908, meta[relay.Constant][34] /* ty=Tensor[(1, 1200), float32] */)
}

def @func_5647() -> (Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), float32]) {
  %909 = @func_2228() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */;
  %910 = @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %911 = %909.2;
  %912 = cast(%911, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %913 = reshape(%912, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %914 = @func_1966(%913) /* ty=(Tensor[(9, 9, 15), int16],) */;
  %915 = @func_2443() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float64]) */;
  %916 = %910.1;
  %917 = %914.0;
  %918 = %915.0;
  (%911, %916, %917, %918)
}

def @func_2068(%var_2054: Tensor[(1215), float32]) -> (Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float32], Tensor[(1215), uint8]) {
  %919 = @func_1590() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %920 = @func_1700() /* ty=(Tensor[(5, 16, 13), float32],) */;
  %921 = cast(meta[relay.Constant][35] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %922 = reshape(%921, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %923 = @func_1411(%922) /* ty=(Tensor[(16, 14, 3), int8], Tensor[(5, 16, 13), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %924 = %923.3;
  %925 = cast(%var_2054, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %926 = shape_of(%924, dtype="int32") /* ty=Tensor[(1), int32] */;
  %927 = cast(%924, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %929 = %919.1;
  %930 = %920.0;
  %931 = left_shift(%927, %928) /* ty=Tensor[(1215), uint8] */;
  (%929, meta[relay.Constant][35] /* ty=Tensor[(1040), float64] */, %930, %931)
}

def @func_10820() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %932 = @func_2228() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */;
  %933 = %932.0;
  %934 = @func_2978() /* ty=Tensor[(16, 14, 3), float32] */;
  (%933, %934)
}

def @func_10601() -> Tensor[(16, 14, 3), float32] {
  %935 = @func_2228() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */;
  %935.0
}

def @func_2485(%var_2457: Tensor[(9, 9, 15), int64]) -> (Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), bool]) {
  %936 = @func_1746() /* ty=Tensor[(9, 9, 15), int64] */;
  %937 = cast(%var_2457, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %938 = shape_of(%936, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%936, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %941 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
  %942 = greater(%939, %940) /* ty=Tensor[(9, 9, 15), bool] */;
  %943 = %941.0;
  (%942, %943)
}

def @func_840() -> (Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) {
  %944 = @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */;
  %945 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %946 = %944.0;
  %947 = %945.0;
  (%946, %947)
}

def @func_10968(%var_10942: Tensor[(1, 7, 15), float64]) -> (Tensor[(?, 7, 15), float32], Tensor[(1215, 1), int64]) {
  %948 = cast(%var_10942, dtype="float64") /* ty=Tensor[(1, 7, 15), float64] */;
  %949 = cosh(%948) /* ty=Tensor[(1, 7, 15), float64] */;
  %950 = cast(%var_10942, dtype="float32") /* ty=Tensor[(1, 7, 15), float32] */;
  %951 = shape_of(%949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %952 = cast(%949, dtype="float32") /* ty=Tensor[(1, 7, 15), float32] */;
  %953 = dyn.reshape(%950, %951, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %954 = @func_7518() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215, 1), int64], Tensor[(16, 14, 3), bool]) */;
  %955 = mod(%952, %953) /* ty=Tensor[(?, 7, 15), float32] */;
  %956 = %954.2;
  (%955, %956)
}

def @func_1264() -> (Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) {
  %957 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %958 = @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */;
  %959 = %957.0;
  %960 = %958.0;
  (%959, %960)
}

def @func_6582() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64], Tensor[(1215), bool], Tensor[(1215), uint32], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) {
  %961 = @func_6384() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %962 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %963 = cast(meta[relay.Constant][36] /* ty=Tensor[(1215), uint32] */, dtype="uint32") /* ty=Tensor[(1215), uint32] */;
  %964 = reshape(%963, newshape=[1215]) /* ty=Tensor[(1215), uint32] */;
  %965 = @func_5015(%964) /* ty=(Tensor[(1200), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %966 = cast(meta[relay.Constant][37] /* ty=Tensor[(2240), float64] */, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %967 = reshape(%966, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
  %968 = @func_1877(%967) /* ty=(Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) */;
  %969 = %961.0;
  %970 = %962.0;
  %971 = %965.1;
  %972 = %968.1;
  (%969, %970, %971, meta[relay.Constant][36] /* ty=Tensor[(1215), uint32] */, %972, meta[relay.Constant][37] /* ty=Tensor[(2240), float64] */)
}

def @func_777() -> (Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) {
  %973 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
  %974 = cast(meta[relay.Constant][38] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %975 = cast(meta[relay.Constant][38] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %976 = reshape(%974, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
  %977 = reshape(%975, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
  %978 = @func_262(%976, %977) /* ty=(Tensor[(5, 16, 15), float32],) */;
  %979 = %973.0;
  %980 = %978.0;
  (%979, %980, meta[relay.Constant][38] /* ty=Tensor[(1200), float32] */)
}

def @func_2014() -> Tensor[(16, 14, 3), float32] {
  %981 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %981.1
}

def @func_2547(%var_2540: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), float32], Tensor[(1040), float64]) {
  %982 = @func_1590() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %983 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %984 = cast(meta[relay.Constant][39] /* ty=Tensor[(1215), int64] */, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %985 = reshape(%984, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %986 = @func_1966(%985) /* ty=(Tensor[(9, 9, 15), int16],) */;
  %987 = %986.0;
  %988 = cast(meta[relay.Constant][39] /* ty=Tensor[(1215), int64] */, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %989 = shape_of(%987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %990 = cast(%987, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %991 = dyn.reshape(%988, %989, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %992 = cast(%var_2540, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %993 = reshape(%992, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %994 = @func_1411(%993) /* ty=(Tensor[(16, 14, 3), int8], Tensor[(5, 16, 13), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %995 = %982.1;
  %996 = %983.1;
  %997 = logical_and(%990, %991) /* ty=Tensor[(9, 9, 15), bool] */;
  %998 = %994.3;
  (%995, %996, %997, %998, %var_2540)
}

def @func_11257(%var_11242: Tensor[(378), float32]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(14, 9, 3), float64], Tensor[(378), float32]) {
  %999 = @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1000 = cast(%var_11242, dtype="float32") /* ty=Tensor[(378), float32] */;
  %1001 = reshape(%1000, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), float32] */;
  %1002 = %999.0;
  %1003 = @func_3448() /* ty=Tensor[(16, 14, 3), float32] */;
  %1004 = @func_10270(%1001) /* ty=Tensor[(14, 9, 3), float64] */;
  (%1002, %1003, %1004, %var_11242)
}

def @func_2443() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float64]) {
  %1005 = @func_2115() /* ty=(Tensor[(1215), float32],) */;
  %1006 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %1007 = %1005.0;
  %1008 = %1006.0;
  (%1007, %1008)
}

def @func_1877(%var_1864: Tensor[(10, 14, 16), float64]) -> (Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) {
  %1009 = cast(%var_1864, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %1010 = @func_644() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */;
  %1011 = tan(%1009) /* ty=Tensor[(10, 14, 16), float64] */;
  %1012 = %1010.1;
  (%1011, %1012)
}

def @func_6384() -> (Tensor[(16, 14, 3), float32],) {
  %1013 = @func_3191() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %1014 = %1013.0;
  (%1014,)
}

def @func_6893() -> Tensor[(16, 14, 3), float32] {
  @func_2978() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_12487() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(280), float32]) {
  %1015 = @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %1016 = cast(meta[relay.Constant][40] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %1017 = reshape(%1016, newshape=[5, 56]) /* ty=Tensor[(5, 56), float32] */;
  %1018 = @func_6978(%1017) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(2, 10, 14), float32], Tensor[(5, 56), float32], Tensor[(16, 14, 3), float32], Tensor[(81, 15), uint32], Tensor[(1215), bool], Tensor[(9, 9, 15), int64]) */;
  %1019 = %1015.1;
  %1020 = %1018.0;
  (%1019, %1020, meta[relay.Constant][40] /* ty=Tensor[(280), float32] */)
}

def @func_10932() -> (Tensor[(16, 14, 3), float32],) {
  %1021 = @func_10573() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1022 = %1021.0;
  (%1022,)
}

def @func_142(%var_123: Tensor[(9, 9, 15), int64]) -> (Tensor[(9, 9, 15), int64],) {
  %1023 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 9, 15), int64] */, dtype="int64") /* ty=Tensor[(9, 9, 15), int64] */;
  %1024 = shape_of(%var_123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1025 = cast(%var_123, dtype="int64") /* ty=Tensor[(9, 9, 15), int64] */;
  %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1027 = maximum(%1025, %1026) /* ty=Tensor[(9, 9, 15), int64] */;
  (%1027,)
}

def @func_8794(%var_8761: Tensor[(15, 15, 16), int32], %var_8762: Tensor[(15, 15, 16), int32]) -> (Tensor[(15, 15, 16), bool], Tensor[(15, 15, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) {
  %1028 = cast(%var_8762, dtype="bool") /* ty=Tensor[(15, 15, 16), bool] */;
  %1029 = shape_of(%var_8761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1030 = cast(%var_8761, dtype="bool") /* ty=Tensor[(15, 15, 16), bool] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1032 = cast(%var_8762, dtype="float64") /* ty=Tensor[(15, 15, 16), float64] */;
  %1033 = @func_2363() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %1034 = less(%1030, %1031) /* ty=Tensor[(15, 15, 16), bool] */;
  %1035 = acosh(%1032) /* ty=Tensor[(15, 15, 16), float64] */;
  %1036 = %1033.0;
  %1037 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
  (%1034, %1035, %1036, %1037)
}

def @func_9795() -> (Tensor[(1215), int64], Tensor[(1, 2, 16), float32], Tensor[(1, 2240), float64]) {
  %1038 = @func_1680() /* ty=(Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */;
  %1039 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 2240), float64] */, dtype="float64") /* ty=Tensor[(1, 2240), float64] */;
  %1040 = reshape(%1039, newshape=[1, 2240]) /* ty=Tensor[(1, 2240), float64] */;
  %1041 = @func_3860(%1040) /* ty=(Tensor[(1, 2, 16), float32], Tensor[(10, 14, 16), float64], Tensor[(1, 2240), float64]) */;
  %1042 = %1038.0;
  %1043 = %1041.0;
  (%1042, %1043, meta[relay.Constant][42] /* ty=Tensor[(1, 2240), float64] */)
}

def @func_9011() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  %1044 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  %1045 = @func_1746() /* ty=Tensor[(9, 9, 15), int64] */;
  (%1044, %1045)
}

def @func_3764() -> (Tensor[(1215), uint32],) {
  %1046 = @func_2228() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */;
  %1047 = %1046.2;
  (%1047,)
}

def @func_6978(%var_6950: Tensor[(5, 56), float32]) -> (Tensor[(16, 14, 3), bool], Tensor[(2, 10, 14), float32], Tensor[(5, 56), float32], Tensor[(16, 14, 3), float32], Tensor[(81, 15), uint32], Tensor[(1215), bool], Tensor[(9, 9, 15), int64]) {
  %1048 = cast(%var_6950, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
  %1049 = reshape(%1048, newshape=[2, 10, 14]) /* ty=Tensor[(2, 10, 14), float32] */;
  %1050 = cast(meta[relay.Constant][43] /* ty=Tensor[(81, 15), uint32] */, dtype="uint32") /* ty=Tensor[(81, 15), uint32] */;
  %1051 = reshape(%1050, newshape=[1215]) /* ty=Tensor[(1215), uint32] */;
  %1052 = @func_5015(%1051) /* ty=(Tensor[(1200), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %1053 = @func_2734() /* ty=Tensor[(16, 14, 3), bool] */;
  %1054 = @func_6351(%1049) /* ty=Tensor[(2, 10, 14), float32] */;
  %1055 = %1052.3;
  %1056 = @func_3527() /* ty=Tensor[(1215), bool] */;
  %1057 = @func_1746() /* ty=Tensor[(9, 9, 15), int64] */;
  (%1053, %1054, %var_6950, %1055, meta[relay.Constant][43] /* ty=Tensor[(81, 15), uint32] */, %1056, %1057)
}

def @func_395() -> (Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) {
  %1058 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 14, 3), uint64] */, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %1059 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(16, 14, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1060 = cast(meta[relay.Constant][44] /* ty=Tensor[(16, 14, 3), uint64] */, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %1061 = dyn.reshape(%1058, %1059, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1062 = cast(meta[relay.Constant][46] /* ty=Tensor[(1215), int64] */, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %1063 = reshape(%1062, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %1064 = @func_142(%1063) /* ty=(Tensor[(9, 9, 15), int64],) */;
  %1065 = greater(%1060, %1061) /* ty=Tensor[(16, 14, 3), bool] */;
  %1066 = %1064.0;
  (%1065, %1066, meta[relay.Constant][46] /* ty=Tensor[(1215), int64] */)
}

def @func_9827() -> (Tensor[(9, 9, 15), float32],) {
  %1067 = @func_7810() /* ty=(Tensor[(9, 9, 15), float32],) */;
  %1068 = %1067.0;
  (%1068,)
}

def @func_11839(%var_11802: Tensor[(4, 3, 4), int8]) -> (Tensor[(4, 3, 4), int8], Tensor[(16, 5, 8), float32]) {
  %1069 = cast(%var_11802, dtype="int8") /* ty=Tensor[(4, 3, 4), int8] */;
  %1070 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(4, 3, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1071 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 3, 4), int8] */, dtype="int8") /* ty=Tensor[(4, 3, 4), int8] */;
  %1072 = dyn.reshape(%1069, %1070, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1073 = @func_9194() /* ty=(Tensor[(16, 5, 8), float32],) */;
  %1074 = bitwise_or(%1071, %1072) /* ty=Tensor[(4, 3, 4), int8] */;
  %1075 = %1073.0;
  (%1074, %1075)
}

def @func_2363() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
  %1076 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1077 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %1078 = %1076.0;
  %1079 = %1077.0;
  (%1078, %1079)
}

def @func_262(%var_246: Tensor[(5, 16, 15), float32], %var_247: Tensor[(5, 16, 15), float32]) -> (Tensor[(5, 16, 15), float32],) {
  %1080 = cast(%var_247, dtype="float32") /* ty=Tensor[(5, 16, 15), float32] */;
  %1081 = shape_of(%var_246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1082 = cast(%var_246, dtype="float32") /* ty=Tensor[(5, 16, 15), float32] */;
  %1083 = dyn.reshape(%1080, %1081, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1084 = floor_mod(%1082, %1083) /* ty=Tensor[(5, 16, 15), float32] */;
  (%1084,)
}

def @func_9041(%var_9025: Tensor[(5, 16, 15), float32]) -> Tensor[(5, 16, 15), float32] {
  %1085 = @func_644() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */;
  %1086 = %1085.1;
  %1087 = cast(%var_9025, dtype="float32") /* ty=Tensor[(5, 16, 15), float32] */;
  %1088 = shape_of(%1086, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1089 = cast(%1086, dtype="float32") /* ty=Tensor[(5, 16, 15), float32] */;
  %1090 = dyn.reshape(%1087, %1088, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%1089, %1090) /* ty=Tensor[(5, 16, 15), float32] */
}

def @func_6760() -> (Tensor[(9, 9, 15), int64], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), float32]) {
  %1091 = @func_5925() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %1092 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1093 = %1091.1;
  %1094 = cast(%1093, dtype="int64") /* ty=Tensor[(9, 9, 15), int64] */;
  %1095 = reshape(%1094, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %1096 = @func_2485(%1095) /* ty=(Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), bool]) */;
  %1097 = @func_5033() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1098 = %1092.0;
  %1099 = %1096.0;
  %1100 = %1097.0;
  (%1093, %1098, %1099, %1100)
}

def @func_6718(%var_6707: Tensor[(672), float32]) -> (Tensor[(5, 16, 13), float64], Tensor[(16, 14, 3), bool], Tensor[(672), float32]) {
  %1101 = @func_5612() /* ty=(Tensor[(5, 16, 13), float64],) */;
  %1102 = %1101.0;
  %1103 = cast(%1102, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %1104 = cast(%var_6707, dtype="float32") /* ty=Tensor[(672), float32] */;
  %1105 = reshape(%1104, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float32] */;
  %1106 = @func_6115(%1105) /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) */;
  %1107 = rsqrt(%1103) /* ty=Tensor[(5, 16, 13), float64] */;
  %1108 = %1106.1;
  (%1107, %1108, %var_6707)
}

def @func_1746() -> Tensor[(9, 9, 15), int64] {
  %1109 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
  %1109.1
}

def @func_1700() -> (Tensor[(5, 16, 13), float32],) {
  %1110 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
  %1111 = cast(%1110, dtype="float32") /* ty=Tensor[(5, 16, 13), float32] */;
  %1112 = tan(%1111) /* ty=Tensor[(5, 16, 13), float32] */;
  (%1112,)
}

def @func_1081() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  %1113 = @func_644() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */;
  %1114 = %1113.0;
  %1115 = cast(%1114, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
  %1116 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %1117 = @func_964() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %1118 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %1119 = %1118.0;
  %1120 = cast(%1119, dtype="float64") /* ty=Tensor[(1215), float64] */;
  %1121 = atan(%1120) /* ty=Tensor[(1215), float64] */;
  %1122 = cast(%1119, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %1123 = shape_of(%1121, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1124 = cast(%1121, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %1125 = dyn.reshape(%1122, %1123, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1126 = less(%1124, %1125) /* ty=Tensor[(1215), bool] */;
  %1127 = cast(%1126, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %1128 = shape_of(%1121, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1129 = cast(%1121, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %1130 = dyn.reshape(%1127, %1128, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1131 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %1132 = cast(%1126, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %1133 = reshape(%1132, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %1134 = @func_142(%1133) /* ty=(Tensor[(9, 9, 15), int64],) */;
  %1135 = acosh(%1115) /* ty=Tensor[(16, 14, 3), float32] */;
  %1136 = %1116.1;
  %1137 = %1117.0;
  %1138 = less_equal(%1129, %1130) /* ty=Tensor[(1215), bool] */;
  %1139 = %1131.1;
  %1140 = %1134.0;
  (%1135, %1136, %1137, %1138, %1139, %1140)
}

def @func_4648() -> Tensor[(16, 14, 3), float32] {
  %1141 = @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1141.0
}

def @func_3295() -> Tensor[(5, 16, 13), float32] {
  %1142 = @func_1700() /* ty=(Tensor[(5, 16, 13), float32],) */;
  %1142.0
}

def @func_5367() -> Tensor[(16, 14, 3), float32] {
  %1143 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1143.0
}

def @func_11868(%var_11849: Tensor[(16, 14, 3), bool]) -> (Tensor[(10, 14, 16), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(182), uint16], Tensor[(1215), float32]) {
  %1144 = @func_7305() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(10, 14, 16), float64], Tensor[(560, 4), float64]) */;
  %1145 = @func_11726() /* ty=Tensor[(16, 14, 3), bool] */;
  %1146 = cast(%var_11849, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %1147 = shape_of(%1145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1148 = cast(%1145, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %1149 = dyn.reshape(%1146, %1147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1150 = cast(meta[relay.Constant][48] /* ty=Tensor[(182), uint16] */, dtype="uint16") /* ty=Tensor[(182), uint16] */;
  %1151 = reshape(%1150, newshape=[182]) /* ty=Tensor[(182), uint16] */;
  %1152 = @func_2866(%1151) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(182), uint16]) */;
  %1153 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %1154 = %1144.1;
  %1155 = logical_and(%1148, %1149) /* ty=Tensor[(16, 14, 3), bool] */;
  %1156 = %1152.0;
  %1157 = %1153.0;
  (%1154, %1155, %1156, meta[relay.Constant][48] /* ty=Tensor[(182), uint16] */, %1157)
}

def @func_1966(%var_1939: Tensor[(9, 9, 15), int64]) -> (Tensor[(9, 9, 15), int16],) {
  %1158 = @func_1746() /* ty=Tensor[(9, 9, 15), int64] */;
  %1159 = cast(%var_1939, dtype="int16") /* ty=Tensor[(9, 9, 15), int16] */;
  %1160 = shape_of(%1158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1161 = cast(%1158, dtype="int16") /* ty=Tensor[(9, 9, 15), int16] */;
  %1162 = dyn.reshape(%1159, %1160, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1163 = bitwise_and(%1161, %1162) /* ty=Tensor[(9, 9, 15), int16] */;
  (%1163,)
}

def @func_6676(%var_6667: Tensor[(9, 9, 15), int64]) -> Tensor[(9, 9, 15), int16] {
  %1164 = @func_5925() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %1165 = %1164.1;
  %1166 = cast(%var_6667, dtype="int16") /* ty=Tensor[(9, 9, 15), int16] */;
  %1167 = shape_of(%1165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1168 = cast(%1165, dtype="int16") /* ty=Tensor[(9, 9, 15), int16] */;
  %1169 = dyn.reshape(%1166, %1167, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%1168, %1169) /* ty=Tensor[(9, 9, 15), int16] */
}

def @func_3448() -> Tensor[(16, 14, 3), float32] {
  %1170 = @func_3191() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %1170.0
}

def @func_421() -> (Tensor[(16, 14, 3), bool],) {
  %1171 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
  %1172 = %1171.0;
  (%1172,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1120() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %4 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
    %0 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
    %1 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %2 = %0.1;
    %3 = %1.0;
    (%2, %3)
  };
  %4() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_12543() -> Tensor[(9, 9, 15), float32] {
  %5 = @func_7810() /* ty=(Tensor[(9, 9, 15), float32],) */;
  %5.0
}

def @func_7047() -> Tensor[(9, 9, 15), int16] {
  %6 = @func_5647() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), float32]) */;
  %6.2
}

def @func_9557() -> (Tensor[(77, 4), float32], Tensor[(1215), float32], Tensor[(77, 4), float64], Tensor[(16, 14, 3), float32]) {
  %7 = @func_9458() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(7, 11, 4), bool], Tensor[(77, 4), float32], Tensor[(640), uint16]) */;
  %8 = %7.5;
  %9 = cast(%8, dtype="float32") /* ty=Tensor[(77, 4), float32] */;
  %10 = cast(%8, dtype="float64") /* ty=Tensor[(77, 4), float64] */;
  %11 = @func_1680() /* ty=(Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */;
  %12 = tan(%9) /* ty=Tensor[(77, 4), float32] */;
  %13 = @func_8134() /* ty=Tensor[(1215), float32] */;
  %14 = log2(%10) /* ty=Tensor[(77, 4), float64] */;
  %15 = %11.2;
  (%12, %13, %14, %15)
}

def @func_11839(%var_11802: Tensor[(4, 3, 4), int8]) -> (Tensor[(4, 3, 4), int8], Tensor[(16, 5, 8), float32]) {
  %16 = cast(%var_11802, dtype="int8") /* ty=Tensor[(4, 3, 4), int8] */;
  %17 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 3, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 3, 4), int8] */, dtype="int8") /* ty=Tensor[(4, 3, 4), int8] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %20 = @func_9194() /* ty=(Tensor[(16, 5, 8), float32],) */;
  %21 = bitwise_or(%18, %19) /* ty=Tensor[(4, 3, 4), int8] */;
  %22 = %20.0;
  (%21, %22)
}

def @func_2117() -> (Tensor[(1215), float32],) {
  @func_2115() /* ty=(Tensor[(1215), float32],) */
}

def @func_7812() -> (Tensor[(9, 9, 15), float32],) {
  @func_7810() /* ty=(Tensor[(9, 9, 15), float32],) */
}

def @func_12694() -> (Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64], Tensor[(1215), float32]) {
  %30 = fn () -> (Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64], Tensor[(1215), float32]) {
    %23 = @func_4736() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) */;
    %24 = @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %25 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
    %26 = %23.0;
    %27 = %24.0;
    %28 = %25.1;
    %29 = @func_8863() /* ty=Tensor[(1215), float32] */;
    (%26, %27, %28, %29)
  };
  %30() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64], Tensor[(1215), float32]) */
}

def @func_11079() -> (Tensor[(77, 4), uint16],) {
  %40 = fn () -> (Tensor[(77, 4), uint16],) {
    %31 = @func_9458() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(7, 11, 4), bool], Tensor[(77, 4), float32], Tensor[(640), uint16]) */;
    %32 = %31.5;
    %33 = cast(%32, dtype="float32") /* ty=Tensor[(77, 4), float32] */;
    %34 = exp(%33) /* ty=Tensor[(77, 4), float32] */;
    %35 = cast(%34, dtype="uint16") /* ty=Tensor[(77, 4), uint16] */;
    %36 = shape_of(%32, dtype="int32") /* ty=Tensor[(2), int32] */;
    %37 = cast(%32, dtype="uint16") /* ty=Tensor[(77, 4), uint16] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %39 = bitwise_xor(%37, %38) /* ty=Tensor[(77, 4), uint16] */;
    (%39,)
  };
  %40() /* ty=(Tensor[(77, 4), uint16],) */
}

def @func_9611() -> (Tensor[(5, 16, 13), float32],) {
  %41 = @func_1700() /* ty=(Tensor[(5, 16, 13), float32],) */;
  %42 = %41.0;
  (%42,)
}

def @func_6864() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) {
  @func_6862() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */
}

def @func_3805(%var_3803: Tensor[(5, 8, 16), uint16], %var_3804: Tensor[(5, 8, 16), uint16]) -> (Tensor[(5, 8, 16), uint16], Tensor[(5, 16, 13), float32]) {
  @func_3801(%var_3803, %var_3804) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(5, 16, 13), float32]) */
}

def @func_9013() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  @func_9011() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */
}

def @func_489() -> (Tensor[(16, 14, 3), float64],) {
  %43 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
  %44 = %43.0;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %46 = cos(%45) /* ty=Tensor[(16, 14, 3), float64] */;
  (%46,)
}

def @func_1877(%var_1864: Tensor[(10, 14, 16), float64]) -> (Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) {
  %47 = cast(%var_1864, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %48 = @func_644() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */;
  %49 = tan(%47) /* ty=Tensor[(10, 14, 16), float64] */;
  %50 = %48.1;
  (%49, %50)
}

def @func_10602() -> Tensor[(16, 14, 3), float32] {
  %52 = fn () -> Tensor[(16, 14, 3), float32] {
    %51 = @func_2228() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */;
    %51.0
  };
  %52() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_6624() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64]) {
  %57 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64]) {
    %53 = @func_5975() /* ty=(Tensor[(52), int16], Tensor[(16, 14, 3), float32]) */;
    %54 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
    %55 = %53.1;
    %56 = %54.0;
    (%55, %56)
  };
  %57() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64]) */
}

def @func_2832() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) {
  %58 = @func_2115() /* ty=(Tensor[(1215), float32],) */;
  %59 = %58.0;
  %60 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  (%59, %60)
}

def @func_5717(%var_5716: Tensor[(81, 15), uint32]) -> Tensor[(81, 15), float64] {
  %72 = fn (%var_5703: Tensor[(81, 15), uint32]) -> Tensor[(81, 15), float64] {
    %61 = @func_5127() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(81, 15), uint32], Tensor[(1040), float64], Tensor[(1040), float64]) */;
    %62 = %61.2;
    %63 = cast(%var_5703, dtype="bool") /* ty=Tensor[(81, 15), bool] */;
    %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(2), int32] */;
    %65 = cast(%62, dtype="bool") /* ty=Tensor[(81, 15), bool] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %67 = logical_and(%65, %66) /* ty=Tensor[(81, 15), bool] */;
    %68 = cast(%var_5703, dtype="float64") /* ty=Tensor[(81, 15), float64] */;
    %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(2), int32] */;
    %70 = cast(%67, dtype="float64") /* ty=Tensor[(81, 15), float64] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    floor_divide(%70, %71) /* ty=Tensor[(81, 15), float64] */
  };
  %72(%var_5716) /* ty=Tensor[(81, 15), float64] */
}

def @func_4649() -> Tensor[(16, 14, 3), float32] {
  %74 = fn () -> Tensor[(16, 14, 3), float32] {
    %73 = @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %73.0
  };
  %74() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_4783(%var_4782: Tensor[(3, 405), float32]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float32], Tensor[(3, 405), int64]) {
  %86 = fn (%var_4775: Tensor[(3, 405), float32]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float32], Tensor[(3, 405), int64]) {
    %75 = @func_3242() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %76 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 405), float32] */, dtype="float32") /* ty=Tensor[(3, 405), float32] */;
    %77 = reshape(%76, newshape=[1215]) /* ty=Tensor[(1215), float32] */;
    %78 = @func_2068(%77) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float32], Tensor[(1215), uint8]) */;
    %79 = cast(%var_4775, dtype="int64") /* ty=Tensor[(3, 405), int64] */;
    %80 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(3, 405), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %81 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 405), float32] */, dtype="int64") /* ty=Tensor[(3, 405), int64] */;
    %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %83 = %75.1;
    %84 = %78.2;
    %85 = bitwise_xor(%81, %82) /* ty=Tensor[(3, 405), int64] */;
    (%83, %84, %85)
  };
  %86(%var_4782) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float32], Tensor[(3, 405), int64]) */
}

def @func_2782() -> Tensor[(16, 14, 3), float32] {
  %88 = fn () -> Tensor[(16, 14, 3), float32] {
    %87 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
    %87.1
  };
  %88() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_10764() -> (Tensor[(9, 9, 15), int16], Tensor[(1215), uint32], Tensor[(1215), bool], Tensor[(16, 14, 3), float64], Tensor[(1040), float64], Tensor[(1, 1200), float32]) {
  @func_10762() /* ty=(Tensor[(9, 9, 15), int16], Tensor[(1215), uint32], Tensor[(1215), bool], Tensor[(16, 14, 3), float64], Tensor[(1040), float64], Tensor[(1, 1200), float32]) */
}

def @func_6537() -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), bool], Tensor[(1040), float64]) {
  @func_6535() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), bool], Tensor[(1040), float64]) */
}

def @func_5455() -> Tensor[(16, 14, 3), bool] {
  %89 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %89.0
}

def @func_2648() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %90 = @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */;
  %91 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
  %92 = %90.1;
  %93 = %91.0;
  (%92, %93)
}

def @func_9812() -> Tensor[(16, 14, 3), float32] {
  %94 = fn () -> Tensor[(16, 14, 3), float32] {
    @func_4791() /* ty=Tensor[(16, 14, 3), float32] */
  };
  %94() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_3764() -> (Tensor[(1215), uint32],) {
  %95 = @func_2228() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */;
  %96 = %95.2;
  (%96,)
}

def @func_5649() -> (Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), float32]) {
  @func_5647() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), float32]) */
}

def @func_9829() -> (Tensor[(9, 9, 15), float32],) {
  @func_9827() /* ty=(Tensor[(9, 9, 15), float32],) */
}

def @func_9285() -> (Tensor[(52), int16], Tensor[(16, 14, 3), float32]) {
  @func_9283() /* ty=(Tensor[(52), int16], Tensor[(16, 14, 3), float32]) */
}

def @func_12545() -> Tensor[(9, 9, 15), float32] {
  @func_12543() /* ty=Tensor[(9, 9, 15), float32] */
}

def @func_3746(%var_3684: Tensor[(16, 14, 3), float32]) -> (Tensor[(16, 14, 3), float64], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  %97 = @func_1119() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %98 = %97.0;
  %99 = cast(%var_3684, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %103 = @func_1700() /* ty=(Tensor[(5, 16, 13), float32],) */;
  %104 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %105 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %106 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %107 = divide(%101, %102) /* ty=Tensor[(16, 14, 3), float64] */;
  %108 = %103.0;
  %109 = %104.0;
  %110 = %105.0;
  %111 = %106.0;
  (%107, %108, %109, %110, %111)
}

def @func_6679(%var_6677: Tensor[(9, 9, 15), int64]) -> Tensor[(9, 9, 15), int16] {
  @func_6676(%var_6677) /* ty=Tensor[(9, 9, 15), int16] */
}

def @func_8957() -> Tensor[(16, 14, 3), float32] {
  @func_8459() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_1775() -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) {
  %115 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) {
    %112 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
    %113 = %112.2;
    %114 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
    (%113, %114)
  };
  %115() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */
}

def @func_6994() -> (Tensor[(16, 14, 3), int8], Tensor[(16, 14, 3), float32]) {
  %120 = fn () -> (Tensor[(16, 14, 3), int8], Tensor[(16, 14, 3), float32]) {
    %116 = @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */;
    %117 = @func_6760() /* ty=(Tensor[(9, 9, 15), int64], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), float32]) */;
    %118 = %116.2;
    %119 = %117.3;
    (%118, %119)
  };
  %120() /* ty=(Tensor[(16, 14, 3), int8], Tensor[(16, 14, 3), float32]) */
}

def @func_6138() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  %121 = @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %122 = %121.0;
  %123 = @func_1746() /* ty=Tensor[(9, 9, 15), int64] */;
  (%122, %123)
}

def @func_8404() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %124 = @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %125 = @func_3448() /* ty=Tensor[(16, 14, 3), float32] */;
  %126 = %124.0;
  (%125, %126)
}

def @func_9917() -> (Tensor[(26, 2), int16],) {
  @func_9915() /* ty=(Tensor[(26, 2), int16],) */
}

def @func_8136() -> Tensor[(1215), float32] {
  @func_8134() /* ty=Tensor[(1215), float32] */
}

def @func_3425(%var_3423: int16, %var_3424: Tensor[(13, 4, 1), int16]) -> (Tensor[(13, 4, 1), float32],) {
  %132 = fn (%var_3412: int16, %var_3413: Tensor[(13, 4, 1), int16]) -> (Tensor[(13, 4, 1), float32],) {
    %127 = cast(%var_3412, dtype="int16") /* ty=int16 */;
    %128 = cast(%var_3413, dtype="int16") /* ty=Tensor[(13, 4, 1), int16] */;
    %129 = multiply(%127, %128) /* ty=Tensor[(13, 4, 1), int16] */;
    %130 = cast(%129, dtype="float32") /* ty=Tensor[(13, 4, 1), float32] */;
    %131 = acosh(%130) /* ty=Tensor[(13, 4, 1), float32] */;
    (%131,)
  };
  %132(%var_3423, %var_3424) /* ty=(Tensor[(13, 4, 1), float32],) */
}

def @func_6877() -> (Tensor[(16, 14, 3), float32],) {
  %134 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %133 = @func_3202() /* ty=Tensor[(16, 14, 3), float32] */;
    (%133,)
  };
  %134() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_4148(%var_4126: Tensor[(13, 13, 4), uint16]) -> (Tensor[(13, 13, 4), uint16], Tensor[(16, 14, 3), float32], Tensor[(13, 13, 4), float32]) {
  %135 = cast(%var_4126, dtype="uint16") /* ty=Tensor[(13, 13, 4), uint16] */;
  %136 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(13, 13, 4), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 13, 4), uint16] */, dtype="uint16") /* ty=Tensor[(13, 13, 4), uint16] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %139 = cast(%var_4126, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %140 = minimum(%137, %138) /* ty=Tensor[(13, 13, 4), uint16] */;
  %141 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
  %142 = asinh(%139) /* ty=Tensor[(13, 13, 4), float32] */;
  (%140, %141, %142)
}

def @func_1720() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  @func_1718() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_5368() -> Tensor[(16, 14, 3), float32] {
  %144 = fn () -> Tensor[(16, 14, 3), float32] {
    %143 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %143.0
  };
  %144() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_4417() -> (Tensor[(1215), int64], Tensor[(16, 14, 3), float32], Tensor[(1215), float64]) {
  %153 = fn () -> (Tensor[(1215), int64], Tensor[(16, 14, 3), float32], Tensor[(1215), float64]) {
    %145 = @func_1680() /* ty=(Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */;
    %146 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %147 = @func_3764() /* ty=(Tensor[(1215), uint32],) */;
    %148 = %147.0;
    %149 = cast(%148, dtype="float64") /* ty=Tensor[(1215), float64] */;
    %150 = %145.0;
    %151 = %146.0;
    %152 = sin(%149) /* ty=Tensor[(1215), float64] */;
    (%150, %151, %152)
  };
  %153() /* ty=(Tensor[(1215), int64], Tensor[(16, 14, 3), float32], Tensor[(1215), float64]) */
}

def @func_12602() -> Tensor[(16, 14, 3), float32] {
  %157 = fn () -> Tensor[(16, 14, 3), float32] {
    %154 = @func_3242() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %155 = %154.1;
    %156 = cast(%155, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
    log2(%156) /* ty=Tensor[(16, 14, 3), float32] */
  };
  %157() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_10574() -> (Tensor[(16, 14, 3), float32],) {
  %160 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %158 = @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %159 = %158.1;
    (%159,)
  };
  %160() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_4026(%var_4024: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1040), float64], Tensor[(5, 8, 16), uint16], Tensor[(640), uint16]) {
  @func_4023(%var_4024) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1040), float64], Tensor[(5, 8, 16), uint16], Tensor[(640), uint16]) */
}

def @func_5553() -> Tensor[(16, 14, 3), float32] {
  %161 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %161.0
}

def @func_3749(%var_3747: Tensor[(16, 14, 3), float32]) -> (Tensor[(16, 14, 3), float64], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  @func_3746(%var_3747) /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */
}

def @func_8406() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  @func_8404() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_7207() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  @func_7205() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_10822() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  @func_10820() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_1850(%var_1780: Tensor[(2, 13, 7), uint16], %var_1837: Tensor[(2, 13, 7), uint16]) -> (Tensor[(2, 13, 7), bool], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(1215), bool], Tensor[(2, 13, 7), int64]) {
  %162 = cast(%var_1780, dtype="bool") /* ty=Tensor[(2, 13, 7), bool] */;
  %163 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(2, 13, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 13, 7), uint16] */, dtype="bool") /* ty=Tensor[(2, 13, 7), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %167 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %168 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %169 = cast(%var_1837, dtype="int64") /* ty=Tensor[(2, 13, 7), int64] */;
  %170 = shape_of(%var_1780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%var_1780, dtype="int64") /* ty=Tensor[(2, 13, 7), int64] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %173 = less(%164, %165) /* ty=Tensor[(2, 13, 7), bool] */;
  %174 = %166.0;
  %175 = %167.3;
  %176 = %168.3;
  %177 = subtract(%171, %172) /* ty=Tensor[(2, 13, 7), int64] */;
  (%173, %174, %175, %176, %177)
}

def @func_9796() -> (Tensor[(1215), int64], Tensor[(1, 2, 16), float32], Tensor[(1, 2240), float64]) {
  %184 = fn () -> (Tensor[(1215), int64], Tensor[(1, 2, 16), float32], Tensor[(1, 2240), float64]) {
    %178 = @func_1680() /* ty=(Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */;
    %179 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 2240), float64] */, dtype="float64") /* ty=Tensor[(1, 2240), float64] */;
    %180 = reshape(%179, newshape=[1, 2240]) /* ty=Tensor[(1, 2240), float64] */;
    %181 = @func_3860(%180) /* ty=(Tensor[(1, 2, 16), float32], Tensor[(10, 14, 16), float64], Tensor[(1, 2240), float64]) */;
    %182 = %178.0;
    %183 = %181.0;
    (%182, %183, meta[relay.Constant][4] /* ty=Tensor[(1, 2240), float64] */)
  };
  %184() /* ty=(Tensor[(1215), int64], Tensor[(1, 2, 16), float32], Tensor[(1, 2240), float64]) */
}

def @func_2932(%var_2930: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float64], Tensor[(1040), int16], Tensor[(1215), int64], Tensor[(1040), float64], Tensor[(5, 16, 13), uint64]) {
  @func_2929(%var_2930) /* ty=(Tensor[(16, 14, 3), float64], Tensor[(1040), int16], Tensor[(1215), int64], Tensor[(1040), float64], Tensor[(5, 16, 13), uint64]) */
}

def @func_3204() -> Tensor[(16, 14, 3), float32] {
  @func_3202() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_4737() -> (Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) {
  %188 = fn () -> (Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) {
    %185 = @func_3764() /* ty=(Tensor[(1215), uint32],) */;
    %186 = %185.0;
    %187 = @func_2781() /* ty=Tensor[(16, 14, 3), float32] */;
    (%186, %187)
  };
  %188() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) */
}

def @func_12039() -> Tensor[(1215), float32] {
  %189 = fn () -> Tensor[(1215), float32] {
    @func_8863() /* ty=Tensor[(1215), float32] */
  };
  %189() /* ty=Tensor[(1215), float32] */
}

def @func_6761() -> (Tensor[(9, 9, 15), int64], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), float32]) {
  %200 = fn () -> (Tensor[(9, 9, 15), int64], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), float32]) {
    %190 = @func_5925() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
    %191 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %192 = %190.1;
    %193 = cast(%192, dtype="int64") /* ty=Tensor[(9, 9, 15), int64] */;
    %194 = reshape(%193, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
    %195 = @func_2485(%194) /* ty=(Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), bool]) */;
    %196 = @func_5033() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %197 = %191.0;
    %198 = %195.0;
    %199 = %196.0;
    (%192, %197, %198, %199)
  };
  %200() /* ty=(Tensor[(9, 9, 15), int64], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), float32]) */
}

def @func_12530() -> (Tensor[(5, 16, 13), float64], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), int64], Tensor[(5, 16, 13), bool]) {
  %201 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %202 = cast(meta[relay.Constant][5] /* ty=Tensor[(1215), int64] */, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %203 = reshape(%202, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %204 = @func_2485(%203) /* ty=(Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), bool]) */;
  %205 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %207 = reshape(%206, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %208 = @func_2298(%207) /* ty=(Tensor[(1200), float32], Tensor[(5, 16, 13), bool]) */;
  %209 = %201.1;
  %210 = %204.0;
  %211 = %208.1;
  (%205, %209, %210, meta[relay.Constant][5] /* ty=Tensor[(1215), int64] */, %211)
}

def @func_1922() -> (Tensor[(16, 14, 3), float32],) {
  %212 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %213 = %212.0;
  (%213,)
}

def @func_5766() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_10677() -> (Tensor[(1040), float64],) {
  @func_10675() /* ty=(Tensor[(1040), float64],) */
}

def @func_7987(%var_7985: Tensor[(7, 11, 4), float32], %var_7986: Tensor[(640), uint16]) -> (Tensor[(5, 8, 16), uint16], Tensor[(640), uint16], Tensor[(16, 14, 3), float32], Tensor[(7, 11, 4), bool], Tensor[(16, 14, 3), float64], Tensor[(9, 9, 15), int64]) {
  %233 = fn (%var_7899: Tensor[(7, 11, 4), float32], %var_7921: Tensor[(640), uint16]) -> (Tensor[(5, 8, 16), uint16], Tensor[(640), uint16], Tensor[(16, 14, 3), float32], Tensor[(7, 11, 4), bool], Tensor[(16, 14, 3), float64], Tensor[(9, 9, 15), int64]) {
    %214 = cast(%var_7921, dtype="uint16") /* ty=Tensor[(640), uint16] */;
    %215 = cast(%var_7921, dtype="uint16") /* ty=Tensor[(640), uint16] */;
    %216 = reshape(%214, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
    %217 = reshape(%215, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
    %218 = @func_3801(%216, %217) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(5, 16, 13), float32]) */;
    %219 = @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %220 = cast(%var_7899, dtype="float32") /* ty=Tensor[(7, 11, 4), float32] */;
    %221 = atan(%220) /* ty=Tensor[(7, 11, 4), float32] */;
    %222 = cast(%var_7899, dtype="bool") /* ty=Tensor[(7, 11, 4), bool] */;
    %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
    %224 = cast(%221, dtype="bool") /* ty=Tensor[(7, 11, 4), bool] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %226 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
    %227 = @func_6138() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
    %228 = %218.0;
    %229 = %219.0;
    %230 = greater(%224, %225) /* ty=Tensor[(7, 11, 4), bool] */;
    %231 = %226.0;
    %232 = %227.1;
    (%228, %var_7921, %229, %230, %231, %232)
  };
  %233(%var_7985, %var_7986) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(640), uint16], Tensor[(16, 14, 3), float32], Tensor[(7, 11, 4), bool], Tensor[(16, 14, 3), float64], Tensor[(9, 9, 15), int64]) */
}

def @func_7112(%var_7104: Tensor[(10, 15, 9), int8], %var_7105: Tensor[(10, 15, 9), int8]) -> (Tensor[(10, 15, 9), bool],) {
  %234 = cast(%var_7105, dtype="bool") /* ty=Tensor[(10, 15, 9), bool] */;
  %235 = shape_of(%var_7104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%var_7104, dtype="bool") /* ty=Tensor[(10, 15, 9), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %238 = equal(%236, %237) /* ty=Tensor[(10, 15, 9), bool] */;
  (%238,)
}

def @func_12488() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(280), float32]) {
  %245 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(280), float32]) {
    %239 = @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %240 = cast(meta[relay.Constant][6] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
    %241 = reshape(%240, newshape=[5, 56]) /* ty=Tensor[(5, 56), float32] */;
    %242 = @func_6978(%241) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(2, 10, 14), float32], Tensor[(5, 56), float32], Tensor[(16, 14, 3), float32], Tensor[(81, 15), uint32], Tensor[(1215), bool], Tensor[(9, 9, 15), int64]) */;
    %243 = %239.1;
    %244 = %242.0;
    (%243, %244, meta[relay.Constant][6] /* ty=Tensor[(280), float32] */)
  };
  %245() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(280), float32]) */
}

def @func_11939(%var_11933: Tensor[(1215), uint32]) -> Tensor[(1215), bool] {
  %246 = @func_4736() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) */;
  %247 = %246.0;
  %248 = cast(%var_11933, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(1), int32] */;
  %250 = cast(%247, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%250, %251) /* ty=Tensor[(1215), bool] */
}

def @func_6464() -> (Tensor[(16, 14, 3), float32],) {
  @func_6462() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_10675() -> (Tensor[(1040), float64],) {
  %252 = @func_5127() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(81, 15), uint32], Tensor[(1040), float64], Tensor[(1040), float64]) */;
  %253 = %252.3;
  (%253,)
}

def @func_3243() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %257 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
    %254 = @func_1119() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %255 = %254.1;
    %256 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
    (%255, %256)
  };
  %257() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_5034() -> (Tensor[(16, 14, 3), float32],) {
  %260 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %258 = @func_2228() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */;
    %259 = %258.0;
    (%259,)
  };
  %260() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_7205() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %261 = @func_1718() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %262 = @func_1718() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %263 = %261.0;
  %264 = %262.0;
  (%263, %264)
}

def @func_11727() -> Tensor[(16, 14, 3), bool] {
  %265 = fn () -> Tensor[(16, 14, 3), bool] {
    @func_11389() /* ty=Tensor[(16, 14, 3), bool] */
  };
  %265() /* ty=Tensor[(16, 14, 3), bool] */
}

def @func_2650() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_6582() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64], Tensor[(1215), bool], Tensor[(1215), uint32], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) {
  %266 = @func_6384() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %267 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %268 = cast(meta[relay.Constant][7] /* ty=Tensor[(1215), uint32] */, dtype="uint32") /* ty=Tensor[(1215), uint32] */;
  %269 = reshape(%268, newshape=[1215]) /* ty=Tensor[(1215), uint32] */;
  %270 = @func_5015(%269) /* ty=(Tensor[(1200), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %271 = cast(meta[relay.Constant][8] /* ty=Tensor[(2240), float64] */, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %272 = reshape(%271, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
  %273 = @func_1877(%272) /* ty=(Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) */;
  %274 = %266.0;
  %275 = %267.0;
  %276 = %270.1;
  %277 = %273.1;
  (%274, %275, %276, meta[relay.Constant][7] /* ty=Tensor[(1215), uint32] */, %277, meta[relay.Constant][8] /* ty=Tensor[(2240), float64] */)
}

def @func_806() -> (Tensor[(16, 14, 3), float32],) {
  %282 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %278 = @func_644() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */;
    %279 = %278.0;
    %280 = cast(%279, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
    %281 = erf(%280) /* ty=Tensor[(16, 14, 3), float32] */;
    (%281,)
  };
  %282() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_7614(%var_7612: Tensor[(14, 5, 16), uint16]) -> (Tensor[(14, 5, 16), uint16], Tensor[(10, 14, 16), float64]) {
  @func_7611(%var_7612) /* ty=(Tensor[(14, 5, 16), uint16], Tensor[(10, 14, 16), float64]) */
}

def @func_10488() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), int16], Tensor[(16, 14, 3), float32]) {
  %293 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(1215), int16], Tensor[(16, 14, 3), float32]) {
    %283 = @func_3764() /* ty=(Tensor[(1215), uint32],) */;
    %284 = %283.0;
    %285 = cast(meta[relay.Constant][9] /* ty=Tensor[(1215), uint32] */, dtype="int16") /* ty=Tensor[(1215), int16] */;
    %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(1), int32] */;
    %287 = cast(%284, dtype="int16") /* ty=Tensor[(1215), int16] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?), int16] */;
    %289 = @func_2363() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
    %290 = @func_4791() /* ty=Tensor[(16, 14, 3), float32] */;
    %291 = minimum(%287, %288) /* ty=Tensor[(1215), int16] */;
    %292 = %289.0;
    (%290, %291, %292)
  };
  %293() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int16], Tensor[(16, 14, 3), float32]) */
}

def @func_11391() -> Tensor[(16, 14, 3), bool] {
  @func_11389() /* ty=Tensor[(16, 14, 3), bool] */
}

def @func_1438() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  %294 = @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */;
  %295 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %296 = %294.1;
  %297 = %295.0;
  (%296, %297)
}

def @func_2868(%var_2867: Tensor[(182), uint16]) -> (Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(182), uint16]) {
  %306 = fn (%var_2861: Tensor[(182), uint16]) -> (Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(182), uint16]) {
    %298 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
    %299 = cast(%var_2861, dtype="uint16") /* ty=Tensor[(182), uint16] */;
    %300 = cast(%var_2861, dtype="uint16") /* ty=Tensor[(182), uint16] */;
    %301 = reshape(%299, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), uint16] */;
    %302 = reshape(%300, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), uint16] */;
    %303 = @func_1850(%301, %302) /* ty=(Tensor[(2, 13, 7), bool], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(1215), bool], Tensor[(2, 13, 7), int64]) */;
    %304 = %298.1;
    %305 = %303.3;
    (%304, %305, %var_2861)
  };
  %306(%var_2867) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(182), uint16]) */
}

def @func_422() -> (Tensor[(16, 14, 3), bool],) {
  %309 = fn () -> (Tensor[(16, 14, 3), bool],) {
    %307 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
    %308 = %307.0;
    (%308,)
  };
  %309() /* ty=(Tensor[(16, 14, 3), bool],) */
}

def @func_3163() -> (Tensor[(16, 14, 3), float32],) {
  @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_5926() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  %314 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
    %310 = @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %311 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
    %312 = %310.1;
    %313 = %311.5;
    (%312, %313)
  };
  %314() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */
}

def @func_12167() -> (Tensor[(16, 14, 3), float32], Tensor[(77, 4), float64]) {
  %315 = @func_8308() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %316 = @func_11078() /* ty=(Tensor[(77, 4), uint16],) */;
  %317 = %316.0;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(77, 4), float64] */;
  %319 = %315.0;
  %320 = asin(%318) /* ty=Tensor[(77, 4), float64] */;
  (%319, %320)
}

def @func_9155() -> (Tensor[(9, 9, 15), float64], Tensor[(16, 14, 3), float32], Tensor[(26, 2), int16]) {
  %321 = @func_7047() /* ty=Tensor[(9, 9, 15), int16] */;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(9, 9, 15), float64] */;
  %323 = cast(meta[relay.Constant][10] /* ty=Tensor[(26, 2), int16] */, dtype="int16") /* ty=Tensor[(26, 2), int16] */;
  %324 = cos(%322) /* ty=Tensor[(9, 9, 15), float64] */;
  %325 = cast(%324, dtype="int64") /* ty=Tensor[(9, 9, 15), int64] */;
  %326 = reshape(%323, newshape=[52, 1]) /* ty=Tensor[(52, 1), int16] */;
  %327 = reshape(%325, newshape=[1215]) /* ty=Tensor[(1215), int64] */;
  %328 = @func_4559(%326, %327) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(13, 4, 1), float32], int16, Tensor[(52, 1), int16], Tensor[(1215), uint16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %329 = %328.0;
  (%324, %329, meta[relay.Constant][10] /* ty=Tensor[(26, 2), int16] */)
}

def @func_2929(%var_2900: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float64], Tensor[(1040), int16], Tensor[(1215), int64], Tensor[(1040), float64], Tensor[(5, 16, 13), uint64]) {
  %330 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %331 = cast(%var_2900, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %332 = reshape(%331, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %333 = @func_1411(%332) /* ty=(Tensor[(16, 14, 3), int8], Tensor[(5, 16, 13), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %334 = %333.1;
  %335 = cast(%334, dtype="int16") /* ty=Tensor[(5, 16, 13), int16] */;
  %336 = shape_of(%var_2900, dtype="int32") /* ty=Tensor[(1), int32] */;
  %337 = cast(%var_2900, dtype="int16") /* ty=Tensor[(1040), int16] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?), int16] */;
  %339 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %340 = %339.0;
  %341 = cast(%340, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %342 = reshape(%341, newshape=[1215]) /* ty=Tensor[(1215), float32] */;
  %343 = @func_2068(%342) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float32], Tensor[(1215), uint8]) */;
  %344 = cast(%var_2900, dtype="uint64") /* ty=Tensor[(1040), uint64] */;
  %345 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%334, dtype="uint64") /* ty=Tensor[(5, 16, 13), uint64] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %348 = %330.0;
  %349 = maximum(%337, %338) /* ty=Tensor[(1040), int16] */;
  %350 = %343.1;
  %351 = logical_xor(%346, %347) /* ty=Tensor[(5, 16, 13), uint64] */;
  (%348, %349, %340, %350, %351)
}

def @func_9638() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) {
  @func_9636() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_1440() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */
}

def @func_3610() -> (Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) {
  @func_3608() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */
}

def @func_12759() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float64]) {
  %352 = @func_5033() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %353 = @func_8134() /* ty=Tensor[(1215), float32] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(1215), float64] */;
  %355 = %352.0;
  %356 = sinh(%354) /* ty=Tensor[(1215), float64] */;
  (%355, %356)
}

def @func_6118(%var_6116: Tensor[(16, 14, 3), float32]) -> (Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) {
  @func_6115(%var_6116) /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) */
}

def @func_1718() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %357 = @func_1119() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %358 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  %359 = %357.0;
  (%358, %359)
}

def @func_11842(%var_11840: Tensor[(4, 3, 4), int8]) -> (Tensor[(4, 3, 4), int8], Tensor[(16, 5, 8), float32]) {
  @func_11839(%var_11840) /* ty=(Tensor[(4, 3, 4), int8], Tensor[(16, 5, 8), float32]) */
}

def @func_12311() -> (Tensor[(2240), float64],) {
  %362 = fn () -> (Tensor[(2240), float64],) {
    %360 = @func_6582() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64], Tensor[(1215), bool], Tensor[(1215), uint32], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) */;
    %361 = %360.5;
    (%361,)
  };
  %362() /* ty=(Tensor[(2240), float64],) */
}

def @func_1701() -> (Tensor[(5, 16, 13), float32],) {
  %366 = fn () -> (Tensor[(5, 16, 13), float32],) {
    %363 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
    %364 = cast(%363, dtype="float32") /* ty=Tensor[(5, 16, 13), float32] */;
    %365 = tan(%364) /* ty=Tensor[(5, 16, 13), float32] */;
    (%365,)
  };
  %366() /* ty=(Tensor[(5, 16, 13), float32],) */
}

def @func_11752() -> (Tensor[(16, 14, 3), float32],) {
  %368 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %367 = @func_8459() /* ty=Tensor[(16, 14, 3), float32] */;
    (%367,)
  };
  %368() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_2300(%var_2299: Tensor[(5, 16, 13), float64]) -> (Tensor[(1200), float32], Tensor[(5, 16, 13), bool]) {
  %378 = fn (%var_2292: Tensor[(5, 16, 13), float64]) -> (Tensor[(1200), float32], Tensor[(5, 16, 13), bool]) {
    %369 = @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */;
    %370 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
    %371 = %370.1;
    %372 = cast(%var_2292, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
    %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
    %374 = cast(%371, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %376 = %369.2;
    %377 = greater(%374, %375) /* ty=Tensor[(5, 16, 13), bool] */;
    (%376, %377)
  };
  %378(%var_2299) /* ty=(Tensor[(1200), float32], Tensor[(5, 16, 13), bool]) */
}

def @func_11516() -> Tensor[(16, 14, 3), float32] {
  %380 = fn () -> Tensor[(16, 14, 3), float32] {
    %379 = @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %379.0
  };
  %380() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_2693() -> (Tensor[(1215), float32], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) {
  %381 = @func_2115() /* ty=(Tensor[(1215), float32],) */;
  %382 = @func_1700() /* ty=(Tensor[(5, 16, 13), float32],) */;
  %383 = @func_1264() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
  %384 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
  %385 = %381.0;
  %386 = %382.0;
  %387 = %383.1;
  %388 = %384.0;
  (%385, %386, %387, %388)
}

def @func_10272(%var_10271: Tensor[(14, 9, 3), float32]) -> Tensor[(14, 9, 3), float64] {
  %395 = fn (%var_10249: Tensor[(14, 9, 3), float32]) -> Tensor[(14, 9, 3), float64] {
    %389 = cast(%var_10249, dtype="float32") /* ty=Tensor[(14, 9, 3), float32] */;
    %390 = acosh(%389) /* ty=Tensor[(14, 9, 3), float32] */;
    %391 = cast(%390, dtype="float64") /* ty=Tensor[(14, 9, 3), float64] */;
    %392 = shape_of(%var_10249, dtype="int32") /* ty=Tensor[(3), int32] */;
    %393 = cast(%var_10249, dtype="float64") /* ty=Tensor[(14, 9, 3), float64] */;
    %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%393, %394) /* ty=Tensor[(14, 9, 3), float64] */
  };
  %395(%var_10271) /* ty=Tensor[(14, 9, 3), float64] */
}

def @func_2229() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) {
  %411 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) {
    %396 = @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %397 = @func_1981() /* ty=Tensor[(1215), int64] */;
    %398 = cast(meta[relay.Constant][11] /* ty=Tensor[(1215), int64] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(1), int32] */;
    %400 = cast(%397, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?), float32] */;
    %402 = @func_911() /* ty=(Tensor[(1215), int64],) */;
    %403 = %402.0;
    %404 = cast(meta[relay.Constant][11] /* ty=Tensor[(1215), int64] */, dtype="uint32") /* ty=Tensor[(1215), uint32] */;
    %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(1), int32] */;
    %406 = cast(%403, dtype="uint32") /* ty=Tensor[(1215), uint32] */;
    %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %408 = %396.0;
    %409 = floor_divide(%400, %401) /* ty=Tensor[(1215), float32] */;
    %410 = bitwise_and(%406, %407) /* ty=Tensor[(1215), uint32] */;
    (%408, %409, %410)
  };
  %411() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */
}

def @func_7810() -> (Tensor[(9, 9, 15), float32],) {
  %412 = @func_5647() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), float32]) */;
  %413 = %412.2;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %415 = log(%414) /* ty=Tensor[(9, 9, 15), float32] */;
  (%415,)
}

def @func_8797(%var_8795: Tensor[(15, 15, 16), int32], %var_8796: Tensor[(15, 15, 16), int32]) -> (Tensor[(15, 15, 16), bool], Tensor[(15, 15, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) {
  %426 = fn (%var_8761: Tensor[(15, 15, 16), int32], %var_8762: Tensor[(15, 15, 16), int32]) -> (Tensor[(15, 15, 16), bool], Tensor[(15, 15, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) {
    %416 = cast(%var_8762, dtype="bool") /* ty=Tensor[(15, 15, 16), bool] */;
    %417 = shape_of(%var_8761, dtype="int32") /* ty=Tensor[(3), int32] */;
    %418 = cast(%var_8761, dtype="bool") /* ty=Tensor[(15, 15, 16), bool] */;
    %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %420 = cast(%var_8762, dtype="float64") /* ty=Tensor[(15, 15, 16), float64] */;
    %421 = @func_2363() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
    %422 = less(%418, %419) /* ty=Tensor[(15, 15, 16), bool] */;
    %423 = acosh(%420) /* ty=Tensor[(15, 15, 16), float64] */;
    %424 = %421.0;
    %425 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
    (%422, %423, %424, %425)
  };
  %426(%var_8795, %var_8796) /* ty=(Tensor[(15, 15, 16), bool], Tensor[(15, 15, 16), float64], Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */
}

def @func_10762() -> (Tensor[(9, 9, 15), int16], Tensor[(1215), uint32], Tensor[(1215), bool], Tensor[(16, 14, 3), float64], Tensor[(1040), float64], Tensor[(1, 1200), float32]) {
  %427 = @func_4736() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) */;
  %428 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %429 = cast(meta[relay.Constant][12] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %430 = reshape(%429, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %431 = @func_2929(%430) /* ty=(Tensor[(16, 14, 3), float64], Tensor[(1040), int16], Tensor[(1215), int64], Tensor[(1040), float64], Tensor[(5, 16, 13), uint64]) */;
  %432 = @func_644() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */;
  %433 = @func_7047() /* ty=Tensor[(9, 9, 15), int16] */;
  %434 = %427.0;
  %435 = %428.3;
  %436 = %431.0;
  %437 = %432.2;
  (%433, %434, %435, %436, meta[relay.Constant][12] /* ty=Tensor[(1040), float64] */, %437)
}

def @func_10513() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %438 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %439 = @func_6623() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64]) */;
  %440 = %438.0;
  %441 = %439.0;
  (%440, %441)
}

def @func_8959() -> Tensor[(16, 14, 3), float32] {
  @func_8957() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_2735() -> Tensor[(16, 14, 3), bool] {
  %443 = fn () -> Tensor[(16, 14, 3), bool] {
    %442 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
    %442.0
  };
  %443() /* ty=Tensor[(16, 14, 3), bool] */
}

def @func_645() -> (Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) {
  %452 = fn () -> (Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) {
    %444 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
    %445 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 1200), float32] */, dtype="float32") /* ty=Tensor[(1, 1200), float32] */;
    %446 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 1200), float32] */, dtype="float32") /* ty=Tensor[(1, 1200), float32] */;
    %447 = reshape(%445, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
    %448 = reshape(%446, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
    %449 = @func_262(%447, %448) /* ty=(Tensor[(5, 16, 15), float32],) */;
    %450 = %444.0;
    %451 = %449.0;
    (%450, %451, meta[relay.Constant][13] /* ty=Tensor[(1, 1200), float32] */)
  };
  %452() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */
}

def @func_8857() -> (Tensor[(1215), int64], Tensor[(1215), bool]) {
  @func_8855() /* ty=(Tensor[(1215), int64], Tensor[(1215), bool]) */
}

def @func_8742() -> Tensor[(1215), int64] {
  %453 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %453.1
}

def @func_5457() -> Tensor[(16, 14, 3), bool] {
  @func_5455() /* ty=Tensor[(16, 14, 3), bool] */
}

def @func_7347() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
  %458 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
    %454 = @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
    %455 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
    %456 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
    %457 = %454.0;
    (%455, %456, %457)
  };
  %458() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */
}

def @func_10970(%var_10969: Tensor[(1, 7, 15), float64]) -> (Tensor[(?, 7, 15), float32], Tensor[(1215, 1), int64]) {
  %468 = fn (%var_10942: Tensor[(1, 7, 15), float64]) -> (Tensor[(?, 7, 15), float32], Tensor[(1215, 1), int64]) {
    %459 = cast(%var_10942, dtype="float64") /* ty=Tensor[(1, 7, 15), float64] */;
    %460 = cosh(%459) /* ty=Tensor[(1, 7, 15), float64] */;
    %461 = cast(%var_10942, dtype="float32") /* ty=Tensor[(1, 7, 15), float32] */;
    %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
    %463 = cast(%460, dtype="float32") /* ty=Tensor[(1, 7, 15), float32] */;
    %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %465 = @func_7518() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215, 1), int64], Tensor[(16, 14, 3), bool]) */;
    %466 = mod(%463, %464) /* ty=Tensor[(?, 7, 15), float32] */;
    %467 = %465.2;
    (%466, %467)
  };
  %468(%var_10969) /* ty=(Tensor[(?, 7, 15), float32], Tensor[(1215, 1), int64]) */
}

def @func_1592() -> (Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) {
  @func_1590() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */
}

def @func_9343() -> Tensor[(16, 14, 3), float32] {
  %470 = fn () -> Tensor[(16, 14, 3), float32] {
    %469 = @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %469.0
  };
  %470() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_9559() -> (Tensor[(77, 4), float32], Tensor[(1215), float32], Tensor[(77, 4), float64], Tensor[(16, 14, 3), float32]) {
  @func_9557() /* ty=(Tensor[(77, 4), float32], Tensor[(1215), float32], Tensor[(77, 4), float64], Tensor[(16, 14, 3), float32]) */
}

def @func_6140() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  @func_6138() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */
}

def @func_5241(%var_5240: Tensor[(182), uint16]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), float32], Tensor[(1040, 1), float64], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), float32], Tensor[(182), uint16], Tensor[(182), uint16]) {
  %487 = fn (%var_5208: Tensor[(182), uint16]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), float32], Tensor[(1040, 1), float64], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), float32], Tensor[(182), uint16], Tensor[(182), uint16]) {
    %471 = @func_4416() /* ty=(Tensor[(1215), int64], Tensor[(16, 14, 3), float32], Tensor[(1215), float64]) */;
    %472 = cast(meta[relay.Constant][14] /* ty=Tensor[(1040, 1), float64] */, dtype="float64") /* ty=Tensor[(1040, 1), float64] */;
    %473 = reshape(%472, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
    %474 = @func_2547(%473) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), float32], Tensor[(1040), float64]) */;
    %475 = @func_2734() /* ty=Tensor[(16, 14, 3), bool] */;
    %476 = cast(%475, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
    %477 = reshape(%476, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float32] */;
    %478 = @func_3746(%477) /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
    %479 = cast(%var_5208, dtype="uint16") /* ty=Tensor[(182), uint16] */;
    %480 = reshape(%479, newshape=[182]) /* ty=Tensor[(182), uint16] */;
    %481 = @func_2866(%480) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(182), uint16]) */;
    %482 = %471.1;
    %483 = %474.3;
    %484 = %478.1;
    %485 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
    %486 = %481.2;
    (%482, %475, %483, meta[relay.Constant][14] /* ty=Tensor[(1040, 1), float64] */, %484, %485, %486, %var_5208)
  };
  %487(%var_5240) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), float32], Tensor[(1040, 1), float64], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), float32], Tensor[(182), uint16], Tensor[(182), uint16]) */
}

def @func_12440() -> (Tensor[(16, 14, 3), float32],) {
  @func_12438() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_6895() -> Tensor[(16, 14, 3), float32] {
  @func_6893() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_9636() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) {
  %488 = @func_4607() /* ty=(Tensor[(52, 1), int16], Tensor[(52), int16], Tensor[(1215), float32]) */;
  %489 = @func_7205() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %490 = %488.2;
  %491 = %489.1;
  (%490, %491)
}

def @func_11871(%var_11869: Tensor[(16, 14, 3), bool]) -> (Tensor[(10, 14, 16), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(182), uint16], Tensor[(1215), float32]) {
  @func_11868(%var_11869) /* ty=(Tensor[(10, 14, 16), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(182), uint16], Tensor[(1215), float32]) */
}

def @func_8855() -> (Tensor[(1215), int64], Tensor[(1215), bool]) {
  %492 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %493 = @func_6582() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64], Tensor[(1215), bool], Tensor[(1215), uint32], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) */;
  %494 = %492.0;
  %495 = %493.2;
  (%494, %495)
}

def @func_8744() -> Tensor[(1215), int64] {
  @func_8742() /* ty=Tensor[(1215), int64] */
}

def @func_5017(%var_5016: Tensor[(1215), uint32]) -> (Tensor[(1200), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
  %522 = fn (%var_4873: Tensor[(1215), uint32]) -> (Tensor[(1200), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
    %496 = @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */;
    %497 = @func_3764() /* ty=(Tensor[(1215), uint32],) */;
    %498 = %497.0;
    %499 = cast(%var_4873, dtype="int8") /* ty=Tensor[(1215), int8] */;
    %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(1), int32] */;
    %501 = cast(%498, dtype="int8") /* ty=Tensor[(1215), int8] */;
    %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?), int8] */;
    %503 = bitwise_xor(%501, %502) /* ty=Tensor[(1215), int8] */;
    %504 = cast(%503, dtype="float64") /* ty=Tensor[(1215), float64] */;
    %505 = shape_of(%498, dtype="int32") /* ty=Tensor[(1), int32] */;
    %506 = cast(%498, dtype="float64") /* ty=Tensor[(1215), float64] */;
    %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?), float64] */;
    %508 = floor_mod(%506, %507) /* ty=Tensor[(1215), float64] */;
    %509 = cast(%503, dtype="bool") /* ty=Tensor[(1215), bool] */;
    %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(1), int32] */;
    %511 = cast(%508, dtype="bool") /* ty=Tensor[(1215), bool] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?), bool] */;
    %513 = @func_2363() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
    %514 = cast(%var_4873, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %515 = acosh(%514) /* ty=Tensor[(1215), float32] */;
    %516 = cast(%515, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %517 = %496.2;
    %518 = greater(%511, %512) /* ty=Tensor[(1215), bool] */;
    %519 = %513.0;
    %520 = @func_2781() /* ty=Tensor[(16, 14, 3), float32] */;
    %521 = cosh(%516) /* ty=Tensor[(1215), float32] */;
    (%517, %518, %519, %520, %521)
  };
  %522(%var_5016) /* ty=(Tensor[(1200), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */
}

def @func_11781() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) {
  %528 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) {
    %523 = @func_3608() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
    %524 = @func_9352() /* ty=(Tensor[(1215), int64],) */;
    %525 = %523.2;
    %526 = %524.0;
    %527 = @func_7731() /* ty=Tensor[(16, 14, 3), float32] */;
    (%525, %526, %527)
  };
  %528() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */
}

def @func_965() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  %533 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
    %529 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %530 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
    %531 = %529.0;
    %532 = %530.1;
    (%531, %532)
  };
  %533() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */
}

def @func_9353() -> (Tensor[(1215), int64],) {
  %535 = fn () -> (Tensor[(1215), int64],) {
    %534 = @func_1981() /* ty=Tensor[(1215), int64] */;
    (%534,)
  };
  %535() /* ty=(Tensor[(1215), int64],) */
}

def @func_10936() -> (Tensor[(26, 2), int16],) {
  %536 = @func_9915() /* ty=(Tensor[(26, 2), int16],) */;
  %537 = %536.0;
  (%537,)
}

def @func_5647() -> (Tensor[(1215), uint32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), float32]) {
  %538 = @func_2228() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */;
  %539 = @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %540 = %538.2;
  %541 = cast(%540, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %542 = reshape(%541, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %543 = @func_1966(%542) /* ty=(Tensor[(9, 9, 15), int16],) */;
  %544 = @func_2443() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float64]) */;
  %545 = %539.1;
  %546 = %543.0;
  %547 = %544.0;
  (%540, %545, %546, %547)
}

def @func_9011() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  %548 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  %549 = @func_1746() /* ty=Tensor[(9, 9, 15), int64] */;
  (%548, %549)
}

def @func_7889() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), uint32]) {
  %550 = @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %551 = @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %552 = @func_3764() /* ty=(Tensor[(1215), uint32],) */;
  %553 = %550.1;
  %554 = %551.0;
  %555 = %552.0;
  (%553, %554, %555)
}

def @func_7519() -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215, 1), int64], Tensor[(16, 14, 3), bool]) {
  %563 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215, 1), int64], Tensor[(16, 14, 3), bool]) {
    %556 = cast(meta[relay.Constant][15] /* ty=Tensor[(1215, 1), int64] */, dtype="int64") /* ty=Tensor[(1215, 1), int64] */;
    %557 = reshape(%556, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
    %558 = @func_1966(%557) /* ty=(Tensor[(9, 9, 15), int16],) */;
    %559 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
    %560 = @func_2978() /* ty=Tensor[(16, 14, 3), float32] */;
    %561 = %558.0;
    %562 = %559.0;
    (%560, %561, meta[relay.Constant][15] /* ty=Tensor[(1215, 1), int64] */, %562)
  };
  %563() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215, 1), int64], Tensor[(16, 14, 3), bool]) */
}

def @func_3193() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  @func_3191() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_3449() -> Tensor[(16, 14, 3), float32] {
  %565 = fn () -> Tensor[(16, 14, 3), float32] {
    %564 = @func_3191() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %564.0
  };
  %565() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_6385() -> (Tensor[(16, 14, 3), float32],) {
  %568 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %566 = @func_3191() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %567 = %566.0;
    (%567,)
  };
  %568() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_12438() -> (Tensor[(16, 14, 3), float32],) {
  %569 = @func_8404() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %570 = %569.1;
  (%570,)
}

def @func_8308() -> (Tensor[(16, 14, 3), float32],) {
  %571 = @func_6876() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %572 = %571.0;
  (%572,)
}

def @func_3393(%var_3392: Tensor[(5, 16, 13), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1215), float64], Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) {
  %592 = fn (%var_3329: Tensor[(5, 16, 13), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1215), float64], Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) {
    %573 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %574 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
    %575 = cast(%var_3329, dtype="int64") /* ty=Tensor[(5, 16, 13), int64] */;
    %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
    %577 = cast(%574, dtype="int64") /* ty=Tensor[(5, 16, 13), int64] */;
    %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %579 = @func_2421() /* ty=Tensor[(1215), bool] */;
    %580 = cast(%579, dtype="float64") /* ty=Tensor[(1215), float64] */;
    %581 = @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
    %582 = cast(%579, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %583 = tan(%582) /* ty=Tensor[(1215), float32] */;
    %584 = cast(%583, dtype="int64") /* ty=Tensor[(1215), int64] */;
    %585 = reshape(%584, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
    %586 = @func_2485(%585) /* ty=(Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), bool]) */;
    %587 = %573.0;
    %588 = maximum(%577, %578) /* ty=Tensor[(5, 16, 13), int64] */;
    %589 = sigmoid(%580) /* ty=Tensor[(1215), float64] */;
    %590 = %581.1;
    %591 = %586.1;
    (%587, %588, %589, %590, %583, %591)
  };
  %592(%var_3392) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1215), float64], Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) */
}

def @func_1969(%var_1967: Tensor[(9, 9, 15), int64]) -> (Tensor[(9, 9, 15), int16],) {
  @func_1966(%var_1967) /* ty=(Tensor[(9, 9, 15), int16],) */
}

def @func_2443() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float64]) {
  %593 = @func_2115() /* ty=(Tensor[(1215), float32],) */;
  %594 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %595 = %593.0;
  %596 = %594.0;
  (%595, %596)
}

def @func_7585(%var_7562: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float64]) {
  %597 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %598 = cast(%var_7562, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %599 = reshape(%598, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %600 = @func_3391(%599) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1215), float64], Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) */;
  %601 = %600.1;
  %602 = cast(%601, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %603 = %597.1;
  %604 = sinh(%602) /* ty=Tensor[(5, 16, 13), float64] */;
  (%603, %var_7562, %604)
}

def @func_10394(%var_10393: Tensor[(16, 1, 1), float64]) -> (Tensor[(16, 1, 1), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 1, 1), float32], Tensor[(9, 9, 15), bool], Tensor[(8, 130), float64]) {
  %618 = fn (%var_10322: Tensor[(16, 1, 1), float64]) -> (Tensor[(16, 1, 1), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 1, 1), float32], Tensor[(9, 9, 15), bool], Tensor[(8, 130), float64]) {
    %605 = cast(%var_10322, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
    %606 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
    %607 = @func_4736() /* ty=(Tensor[(1215), uint32], Tensor[(16, 14, 3), float32]) */;
    %608 = cast(%var_10322, dtype="float32") /* ty=Tensor[(16, 1, 1), float32] */;
    %609 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 130), float64] */, dtype="float64") /* ty=Tensor[(8, 130), float64] */;
    %610 = reshape(%609, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
    %611 = @func_2547(%610) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), float32], Tensor[(1040), float64]) */;
    %612 = acos(%605) /* ty=Tensor[(16, 1, 1), float64] */;
    %613 = %606.0;
    %614 = %607.1;
    %615 = @func_6893() /* ty=Tensor[(16, 14, 3), float32] */;
    %616 = rsqrt(%608) /* ty=Tensor[(16, 1, 1), float32] */;
    %617 = %611.2;
    (%612, %613, %614, %615, %616, %617, meta[relay.Constant][16] /* ty=Tensor[(8, 130), float64] */)
  };
  %618(%var_10393) /* ty=(Tensor[(16, 1, 1), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 1, 1), float32], Tensor[(9, 9, 15), bool], Tensor[(8, 130), float64]) */
}

def @func_4608() -> (Tensor[(52, 1), int16], Tensor[(52), int16], Tensor[(1215), float32]) {
  %631 = fn () -> (Tensor[(52, 1), int16], Tensor[(52), int16], Tensor[(1215), float32]) {
    %619 = cast(meta[relay.Constant][17] /* ty=Tensor[(52), int16] */, dtype="int16") /* ty=Tensor[(52), int16] */;
    %620 = @func_911() /* ty=(Tensor[(1215), int64],) */;
    %621 = %620.0;
    %622 = cast(%621, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %623 = log(%622) /* ty=Tensor[(1215), float32] */;
    %624 = cast(%623, dtype="int64") /* ty=Tensor[(1215), int64] */;
    %625 = reshape(%619, newshape=[52, 1]) /* ty=Tensor[(52, 1), int16] */;
    %626 = reshape(%624, newshape=[1215]) /* ty=Tensor[(1215), int64] */;
    %627 = @func_4559(%625, %626) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(13, 4, 1), float32], int16, Tensor[(52, 1), int16], Tensor[(1215), uint16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
    %628 = cast(%623, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %629 = %627.4;
    %630 = cos(%628) /* ty=Tensor[(1215), float32] */;
    (%629, meta[relay.Constant][17] /* ty=Tensor[(52), int16] */, %630)
  };
  %631() /* ty=(Tensor[(52, 1), int16], Tensor[(52), int16], Tensor[(1215), float32]) */
}

def @func_7891() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), uint32]) {
  @func_7889() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), uint32]) */
}

def @func_841() -> (Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) {
  %636 = fn () -> (Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) {
    %632 = @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */;
    %633 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %634 = %632.0;
    %635 = %633.0;
    (%634, %635)
  };
  %636() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */
}

def @func_1854(%var_1852: Tensor[(2, 13, 7), uint16], %var_1853: Tensor[(2, 13, 7), uint16]) -> (Tensor[(2, 13, 7), bool], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(1215), bool], Tensor[(2, 13, 7), int64]) {
  @func_1850(%var_1852, %var_1853) /* ty=(Tensor[(2, 13, 7), bool], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(1215), bool], Tensor[(2, 13, 7), int64]) */
}

def @func_3801(%var_3773: Tensor[(5, 8, 16), uint16], %var_3774: Tensor[(5, 8, 16), uint16]) -> (Tensor[(5, 8, 16), uint16], Tensor[(5, 16, 13), float32]) {
  %637 = cast(%var_3774, dtype="uint16") /* ty=Tensor[(5, 8, 16), uint16] */;
  %638 = shape_of(%var_3773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%var_3773, dtype="uint16") /* ty=Tensor[(5, 8, 16), uint16] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %641 = multiply(%639, %640) /* ty=Tensor[(5, 8, 16), uint16] */;
  %642 = @func_3295() /* ty=Tensor[(5, 16, 13), float32] */;
  (%641, %642)
}

def @func_11260(%var_11258: Tensor[(378), float32]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(14, 9, 3), float64], Tensor[(378), float32]) {
  @func_11257(%var_11258) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(14, 9, 3), float64], Tensor[(378), float32]) */
}

def @func_9853(%var_9852: Tensor[(1215), int64]) -> (Tensor[(1215), float64], Tensor[(1215), float32]) {
  %652 = fn (%var_9838: Tensor[(1215), int64]) -> (Tensor[(1215), float64], Tensor[(1215), float32]) {
    %643 = @func_9795() /* ty=(Tensor[(1215), int64], Tensor[(1, 2, 16), float32], Tensor[(1, 2240), float64]) */;
    %644 = %643.0;
    %645 = cast(%var_9838, dtype="float64") /* ty=Tensor[(1215), float64] */;
    %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(1), int32] */;
    %647 = cast(%644, dtype="float64") /* ty=Tensor[(1215), float64] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?), float64] */;
    %649 = @func_2363() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
    %650 = mod(%647, %648) /* ty=Tensor[(1215), float64] */;
    %651 = %649.1;
    (%650, %651)
  };
  %652(%var_9852) /* ty=(Tensor[(1215), float64], Tensor[(1215), float32]) */
}

def @func_3202() -> Tensor[(16, 14, 3), float32] {
  %653 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
  %653.0
}

def @func_11609() -> Tensor[(1215), float32] {
  %654 = fn () -> Tensor[(1215), float32] {
    @func_8134() /* ty=Tensor[(1215), float32] */
  };
  %654() /* ty=Tensor[(1215), float32] */
}

def @func_2550(%var_2548: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), float32], Tensor[(1040), float64]) {
  @func_2547(%var_2548) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), float32], Tensor[(1040), float64]) */
}

def @func_1229() -> (Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) {
  @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */
}

def @func_6604(%var_6603: Tensor[(1040), float64]) -> (Tensor[(1215), float32], Tensor[(1040), float64], Tensor[(1040), float64], Tensor[(16, 14, 3), float32]) {
  %665 = fn (%var_6592: Tensor[(1040), float64]) -> (Tensor[(1215), float32], Tensor[(1040), float64], Tensor[(1040), float64], Tensor[(16, 14, 3), float32]) {
    %655 = @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
    %656 = cast(%var_6592, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %657 = reshape(%656, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
    %658 = @func_2929(%657) /* ty=(Tensor[(16, 14, 3), float64], Tensor[(1040), int16], Tensor[(1215), int64], Tensor[(1040), float64], Tensor[(5, 16, 13), uint64]) */;
    %659 = %655.0;
    %660 = cast(%659, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %661 = reshape(%660, newshape=[3, 405]) /* ty=Tensor[(3, 405), float32] */;
    %662 = @func_4781(%661) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float32], Tensor[(3, 405), int64]) */;
    %663 = %658.3;
    %664 = %662.0;
    (%659, %663, %var_6592, %664)
  };
  %665(%var_6603) /* ty=(Tensor[(1215), float32], Tensor[(1040), float64], Tensor[(1040), float64], Tensor[(16, 14, 3), float32]) */
}

def @func_7611(%var_7598: Tensor[(14, 5, 16), uint16]) -> (Tensor[(14, 5, 16), uint16], Tensor[(10, 14, 16), float64]) {
  %666 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 5, 16), uint16] */, dtype="uint16") /* ty=Tensor[(14, 5, 16), uint16] */;
  %667 = shape_of(%var_7598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%var_7598, dtype="uint16") /* ty=Tensor[(14, 5, 16), uint16] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %670 = @func_7305() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(10, 14, 16), float64], Tensor[(560, 4), float64]) */;
  %671 = subtract(%668, %669) /* ty=Tensor[(14, 5, 16), uint16] */;
  %672 = %670.1;
  (%671, %672)
}

def @func_11176(%var_11175: Tensor[(9, 9, 15), int64]) -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool]) {
  %682 = fn (%var_11162: Tensor[(9, 9, 15), int64]) -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool]) {
    %673 = @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %674 = @func_9011() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
    %675 = %674.1;
    %676 = cast(%var_11162, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
    %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
    %678 = cast(%675, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %680 = %673.0;
    %681 = logical_or(%678, %679) /* ty=Tensor[(9, 9, 15), bool] */;
    (%680, %681)
  };
  %682(%var_11175) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool]) */
}

def @func_6807() -> (Tensor[(1215), float32], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) {
  %696 = fn () -> (Tensor[(1215), float32], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) {
    %683 = @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
    %684 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
    %685 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
    %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%684, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %689 = cast(meta[relay.Constant][20] /* ty=Tensor[(2240), float64] */, dtype="float64") /* ty=Tensor[(2240), float64] */;
    %690 = reshape(%689, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
    %691 = @func_1877(%690) /* ty=(Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) */;
    %692 = %683.0;
    %693 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
    %694 = power(%687, %688) /* ty=Tensor[(5, 16, 13), float64] */;
    %695 = %691.1;
    (%692, %693, %694, %695, meta[relay.Constant][20] /* ty=Tensor[(2240), float64] */)
  };
  %696() /* ty=(Tensor[(1215), float32], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) */
}

def @func_3863(%var_3861: Tensor[(1, 2240), float64]) -> (Tensor[(1, 2, 16), float32], Tensor[(10, 14, 16), float64], Tensor[(1, 2240), float64]) {
  @func_3860(%var_3861) /* ty=(Tensor[(1, 2, 16), float32], Tensor[(10, 14, 16), float64], Tensor[(1, 2240), float64]) */
}

def @func_4793() -> Tensor[(16, 14, 3), float32] {
  @func_4791() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_9685(%var_9684: Tensor[(5, 15, 6), float32]) -> Tensor[(5, 15, 6), float32] {
  %701 = fn (%var_9677: Tensor[(5, 15, 6), float32]) -> Tensor[(5, 15, 6), float32] {
    %697 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 15, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
    %698 = shape_of(%var_9677, dtype="int32") /* ty=Tensor[(3), int32] */;
    %699 = cast(%var_9677, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%699, %700) /* ty=Tensor[(5, 15, 6), float32] */
  };
  %701(%var_9684) /* ty=Tensor[(5, 15, 6), float32] */
}

def @func_11942(%var_11940: Tensor[(1215), uint32]) -> Tensor[(1215), bool] {
  @func_11939(%var_11940) /* ty=Tensor[(1215), bool] */
}

def @func_3766() -> (Tensor[(1215), uint32],) {
  @func_3764() /* ty=(Tensor[(1215), uint32],) */
}

def @func_11026() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %702 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %703 = @func_9636() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %704 = %702.0;
  %705 = %703.1;
  (%704, %705)
}

def @func_6721(%var_6719: Tensor[(672), float32]) -> (Tensor[(5, 16, 13), float64], Tensor[(16, 14, 3), bool], Tensor[(672), float32]) {
  @func_6718(%var_6719) /* ty=(Tensor[(5, 16, 13), float64], Tensor[(16, 14, 3), bool], Tensor[(672), float32]) */
}

def @func_1227() -> (Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) {
  %706 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %707 = @func_964() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %708 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %709 = %708.1;
  %710 = @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */;
  %711 = %710.0;
  %712 = cast(%711, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %713 = atanh(%712) /* ty=Tensor[(16, 14, 3), float64] */;
  %714 = cast(%713, dtype="int8") /* ty=Tensor[(16, 14, 3), int8] */;
  %715 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%709, dtype="int8") /* ty=Tensor[(16, 14, 3), int8] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %718 = %706.0;
  %719 = %707.0;
  %720 = left_shift(%716, %717) /* ty=Tensor[(16, 14, 3), int8] */;
  (%718, %719, %720)
}

def @func_4023(%var_4011: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1040), float64], Tensor[(5, 8, 16), uint16], Tensor[(640), uint16]) {
  %721 = cast(%var_4011, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %722 = reshape(%721, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %723 = @func_3391(%722) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), int64], Tensor[(1215), float64], Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) */;
  %724 = cast(meta[relay.Constant][22] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %725 = cast(meta[relay.Constant][22] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %726 = reshape(%724, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
  %727 = reshape(%725, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
  %728 = @func_3801(%726, %727) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(5, 16, 13), float32]) */;
  %729 = @func_2781() /* ty=Tensor[(16, 14, 3), float32] */;
  %730 = %723.1;
  %731 = %728.0;
  (%729, %730, %var_4011, %731, meta[relay.Constant][22] /* ty=Tensor[(640), uint16] */)
}

def @func_912() -> (Tensor[(1215), int64],) {
  %734 = fn () -> (Tensor[(1215), int64],) {
    %732 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
    %733 = %732.2;
    (%733,)
  };
  %734() /* ty=(Tensor[(1215), int64],) */
}

def @func_1413(%var_1412: Tensor[(5, 16, 13), float64]) -> (Tensor[(16, 14, 3), int8], Tensor[(5, 16, 13), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
  %747 = fn (%var_1391: Tensor[(5, 16, 13), float64]) -> (Tensor[(16, 14, 3), int8], Tensor[(5, 16, 13), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
    %735 = @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */;
    %736 = @func_1374() /* ty=Tensor[(5, 16, 13), float64] */;
    %737 = cast(%var_1391, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
    %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
    %739 = cast(%736, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
    %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %741 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %742 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
    %743 = %735.2;
    %744 = not_equal(%739, %740) /* ty=Tensor[(5, 16, 13), bool] */;
    %745 = %741.0;
    %746 = %742.0;
    (%743, %744, %745, %746)
  };
  %747(%var_1412) /* ty=(Tensor[(16, 14, 3), int8], Tensor[(5, 16, 13), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */
}

def @func_11028() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  @func_11026() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_1333() -> Tensor[(16, 14, 3), float32] {
  %748 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %748.1
}

def @func_6353(%var_6352: Tensor[(2, 10, 14), float32]) -> Tensor[(2, 10, 14), float32] {
  %750 = fn (%var_6335: Tensor[(2, 10, 14), float32]) -> Tensor[(2, 10, 14), float32] {
    %749 = cast(%var_6335, dtype="float32") /* ty=Tensor[(2, 10, 14), float32] */;
    log2(%749) /* ty=Tensor[(2, 10, 14), float32] */
  };
  %750(%var_6352) /* ty=Tensor[(2, 10, 14), float32] */
}

def @func_6676(%var_6667: Tensor[(9, 9, 15), int64]) -> Tensor[(9, 9, 15), int16] {
  %751 = @func_5925() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %752 = %751.1;
  %753 = cast(%var_6667, dtype="int16") /* ty=Tensor[(9, 9, 15), int16] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="int16") /* ty=Tensor[(9, 9, 15), int16] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%755, %756) /* ty=Tensor[(9, 9, 15), int16] */
}

def @func_8365(%var_8364: Tensor[(3, 9, 13), float32]) -> (Tensor[(3, 9, 13), float32], Tensor[(16, 14, 3), int8], Tensor[(9, 9, 15), float32]) {
  %763 = fn (%var_8324: Tensor[(3, 9, 13), float32]) -> (Tensor[(3, 9, 13), float32], Tensor[(16, 14, 3), int8], Tensor[(9, 9, 15), float32]) {
    %757 = cast(%var_8324, dtype="float32") /* ty=Tensor[(3, 9, 13), float32] */;
    %758 = @func_6993() /* ty=(Tensor[(16, 14, 3), int8], Tensor[(16, 14, 3), float32]) */;
    %759 = @func_7810() /* ty=(Tensor[(9, 9, 15), float32],) */;
    %760 = atan(%757) /* ty=Tensor[(3, 9, 13), float32] */;
    %761 = %758.0;
    %762 = %759.0;
    (%760, %761, %762)
  };
  %763(%var_8364) /* ty=(Tensor[(3, 9, 13), float32], Tensor[(16, 14, 3), int8], Tensor[(9, 9, 15), float32]) */
}

def @func_6284() -> Tensor[(16, 14, 3), float32] {
  %765 = fn () -> Tensor[(16, 14, 3), float32] {
    %764 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %764.0
  };
  %765() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_885() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) {
  %766 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
  %767 = %766.2;
  %768 = cast(meta[relay.Constant][23] /* ty=Tensor[(1215), int64] */, dtype="int32") /* ty=Tensor[(1215), int32] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(1), int32] */;
  %770 = cast(%767, dtype="int32") /* ty=Tensor[(1215), int32] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?), int32] */;
  %772 = add(%770, %771) /* ty=Tensor[(1215), int32] */;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %774 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(1215), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %775 = cast(meta[relay.Constant][23] /* ty=Tensor[(1215), int64] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?), float32] */;
  %777 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %778 = divide(%775, %776) /* ty=Tensor[(1215), float32] */;
  %779 = %777.1;
  (%778, %779)
}

def @func_7588(%var_7586: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float64]) {
  @func_7585(%var_7586) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float64]) */
}

def @func_10933() -> (Tensor[(16, 14, 3), float32],) {
  %782 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %780 = @func_10573() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %781 = %780.0;
    (%781,)
  };
  %782() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_142(%var_123: Tensor[(9, 9, 15), int64]) -> (Tensor[(9, 9, 15), int64],) {
  %783 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 9, 15), int64] */, dtype="int64") /* ty=Tensor[(9, 9, 15), int64] */;
  %784 = shape_of(%var_123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%var_123, dtype="int64") /* ty=Tensor[(9, 9, 15), int64] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %787 = maximum(%785, %786) /* ty=Tensor[(9, 9, 15), int64] */;
  (%787,)
}

def @func_10938() -> (Tensor[(26, 2), int16],) {
  @func_10936() /* ty=(Tensor[(26, 2), int16],) */
}

def @func_8115() -> (Tensor[(16, 14, 3), float32],) {
  %790 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %788 = @func_6993() /* ty=(Tensor[(16, 14, 3), int8], Tensor[(16, 14, 3), float32]) */;
    %789 = %788.1;
    (%789,)
  };
  %790() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_7306() -> (Tensor[(16, 14, 3), float32], Tensor[(10, 14, 16), float64], Tensor[(560, 4), float64]) {
  %796 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(10, 14, 16), float64], Tensor[(560, 4), float64]) {
    %791 = cast(meta[relay.Constant][25] /* ty=Tensor[(560, 4), float64] */, dtype="float64") /* ty=Tensor[(560, 4), float64] */;
    %792 = reshape(%791, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
    %793 = @func_1877(%792) /* ty=(Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) */;
    %794 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
    %795 = %793.0;
    (%794, %795, meta[relay.Constant][25] /* ty=Tensor[(560, 4), float64] */)
  };
  %796() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(10, 14, 16), float64], Tensor[(560, 4), float64]) */
}

def @func_11313() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 5, 8), float32]) {
  %797 = @func_9241() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %798 = @func_9194() /* ty=(Tensor[(16, 5, 8), float32],) */;
  %799 = %797.0;
  %800 = %798.0;
  (%799, %800)
}

def @func_779() -> (Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) {
  @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */
}

def @func_9459() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(7, 11, 4), bool], Tensor[(77, 4), float32], Tensor[(640), uint16]) {
  %814 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(7, 11, 4), bool], Tensor[(77, 4), float32], Tensor[(640), uint16]) {
    %801 = @func_5975() /* ty=(Tensor[(52), int16], Tensor[(16, 14, 3), float32]) */;
    %802 = @func_7346() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
    %803 = @func_1264() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
    %804 = cast(meta[relay.Constant][26] /* ty=Tensor[(77, 4), float32] */, dtype="float32") /* ty=Tensor[(77, 4), float32] */;
    %805 = cast(meta[relay.Constant][27] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
    %806 = reshape(%804, newshape=[7, 11, 4]) /* ty=Tensor[(7, 11, 4), float32] */;
    %807 = reshape(%805, newshape=[640]) /* ty=Tensor[(640), uint16] */;
    %808 = @func_7984(%806, %807) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(640), uint16], Tensor[(16, 14, 3), float32], Tensor[(7, 11, 4), bool], Tensor[(16, 14, 3), float64], Tensor[(9, 9, 15), int64]) */;
    %809 = %801.1;
    %810 = %802.1;
    %811 = %803.0;
    %812 = @func_2421() /* ty=Tensor[(1215), bool] */;
    %813 = %808.3;
    (%809, %810, %811, %812, %813, meta[relay.Constant][26] /* ty=Tensor[(77, 4), float32] */, meta[relay.Constant][27] /* ty=Tensor[(640), uint16] */)
  };
  %814() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(7, 11, 4), bool], Tensor[(77, 4), float32], Tensor[(640), uint16]) */
}

def @func_777() -> (Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) {
  %815 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
  %816 = cast(meta[relay.Constant][28] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %817 = cast(meta[relay.Constant][28] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %818 = reshape(%816, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
  %819 = reshape(%817, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
  %820 = @func_262(%818, %819) /* ty=(Tensor[(5, 16, 15), float32],) */;
  %821 = %815.0;
  %822 = %820.0;
  (%821, %822, meta[relay.Constant][28] /* ty=Tensor[(1200), float32] */)
}

def @func_10306() -> (Tensor[(16, 14, 3), float32], Tensor[(26, 2), int16]) {
  %827 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(26, 2), int16]) {
    %823 = @func_6083() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %824 = @func_9915() /* ty=(Tensor[(26, 2), int16],) */;
    %825 = %823.0;
    %826 = %824.0;
    (%825, %826)
  };
  %827() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(26, 2), int16]) */
}

def @func_9827() -> (Tensor[(9, 9, 15), float32],) {
  %828 = @func_7810() /* ty=(Tensor[(9, 9, 15), float32],) */;
  %829 = %828.0;
  (%829,)
}

def @func_1335() -> Tensor[(16, 14, 3), float32] {
  @func_1333() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_7116(%var_7114: Tensor[(10, 15, 9), int8], %var_7115: Tensor[(10, 15, 9), int8]) -> (Tensor[(10, 15, 9), bool],) {
  @func_7112(%var_7114, %var_7115) /* ty=(Tensor[(10, 15, 9), bool],) */
}

def @func_9613() -> (Tensor[(5, 16, 13), float32],) {
  @func_9611() /* ty=(Tensor[(5, 16, 13), float32],) */
}

def @func_11442() -> (Tensor[(26, 2), int16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  @func_11440() /* ty=(Tensor[(26, 2), int16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */
}

def @func_145(%var_143: Tensor[(9, 9, 15), int64]) -> (Tensor[(9, 9, 15), int64],) {
  @func_142(%var_143) /* ty=(Tensor[(9, 9, 15), int64],) */
}

def @func_2834() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) {
  @func_2832() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_11315() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 5, 8), float32]) {
  @func_11313() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 5, 8), float32]) */
}

def @func_1590() -> (Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) {
  %830 = @func_1264() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
  %831 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
  %832 = %830.1;
  %833 = %831.2;
  (%832, %833)
}

def @func_3161() -> (Tensor[(16, 14, 3), float32],) {
  %834 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
  (%834,)
}

def @func_11257(%var_11242: Tensor[(378), float32]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(14, 9, 3), float64], Tensor[(378), float32]) {
  %835 = @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %836 = cast(%var_11242, dtype="float32") /* ty=Tensor[(378), float32] */;
  %837 = reshape(%836, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), float32] */;
  %838 = %835.0;
  %839 = @func_3448() /* ty=Tensor[(16, 14, 3), float32] */;
  %840 = @func_10270(%837) /* ty=Tensor[(14, 9, 3), float64] */;
  (%838, %839, %840, %var_11242)
}

def @func_12266() -> Tensor[(16, 14, 3), bool] {
  %842 = fn () -> Tensor[(16, 14, 3), bool] {
    %841 = @func_3608() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
    %841.1
  };
  %842() /* ty=Tensor[(16, 14, 3), bool] */
}

def @func_1681() -> (Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) {
  %849 = fn () -> (Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) {
    %843 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
    %844 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
    %845 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %846 = %843.1;
    %847 = %844.1;
    %848 = %845.0;
    (%846, %847, %848)
  };
  %849() /* ty=(Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */
}

def @func_2445() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float64]) {
  @func_2443() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float64]) */
}

def @func_5301() -> (Tensor[(16, 14, 3), float32],) {
  %851 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %850 = @func_3202() /* ty=Tensor[(16, 14, 3), float32] */;
    (%850,)
  };
  %851() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_2081() -> (Tensor[(16, 14, 3), float32],) {
  %853 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %852 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
    (%852,)
  };
  %853() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_8079(%var_8078: Tensor[(2240), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(2240), bool]) {
  %869 = fn (%var_8049: Tensor[(2240), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(2240), bool]) {
    %854 = cast(%var_8049, dtype="float64") /* ty=Tensor[(2240), float64] */;
    %855 = exp(%854) /* ty=Tensor[(2240), float64] */;
    %856 = @func_6806() /* ty=(Tensor[(1215), float32], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 13), float64], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) */;
    %857 = %856.4;
    %858 = cast(%var_8049, dtype="int16") /* ty=Tensor[(2240), int16] */;
    %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(1), int32] */;
    %860 = cast(%857, dtype="int16") /* ty=Tensor[(2240), int16] */;
    %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?), int16] */;
    %862 = logical_xor(%860, %861) /* ty=Tensor[(2240), int16] */;
    %863 = cast(%862, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %864 = shape_of(%855, dtype="int32") /* ty=Tensor[(1), int32] */;
    %865 = cast(%855, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?), bool] */;
    %867 = @func_7731() /* ty=Tensor[(16, 14, 3), float32] */;
    %868 = logical_and(%865, %866) /* ty=Tensor[(2240), bool] */;
    (%867, %868)
  };
  %869(%var_8078) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(2240), bool]) */
}

def @func_2364() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
  %874 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) {
    %870 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %871 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
    %872 = %870.0;
    %873 = %871.0;
    (%872, %873)
  };
  %874() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */
}

def @func_10515() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  @func_10513() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_11105() -> Tensor[(9, 9, 15), int64] {
  %875 = fn () -> Tensor[(9, 9, 15), int64] {
    @func_1746() /* ty=Tensor[(9, 9, 15), int64] */
  };
  %875() /* ty=Tensor[(9, 9, 15), int64] */
}

def @func_9223() -> (Tensor[(16, 14, 3), float32],) {
  @func_9221() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_2584(%var_2583: Tensor[(3, 1, 5), float64]) -> (Tensor[(9, 9, 15), int64], Tensor[(3, 1, 5), float64], Tensor[(16, 14, 3), float32]) {
  %884 = fn (%var_2564: Tensor[(3, 1, 5), float64]) -> (Tensor[(9, 9, 15), int64], Tensor[(3, 1, 5), float64], Tensor[(16, 14, 3), float32]) {
    %876 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
    %877 = cast(%var_2564, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
    %878 = acos(%877) /* ty=Tensor[(3, 1, 5), float64] */;
    %879 = cast(%878, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
    %880 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %881 = %876.1;
    %882 = log2(%879) /* ty=Tensor[(3, 1, 5), float64] */;
    %883 = %880.0;
    (%881, %882, %883)
  };
  %884(%var_2583) /* ty=(Tensor[(9, 9, 15), int64], Tensor[(3, 1, 5), float64], Tensor[(16, 14, 3), float32]) */
}

def @func_3191() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %885 = @func_2363() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %886 = %885.0;
  %887 = @func_2978() /* ty=Tensor[(16, 14, 3), float32] */;
  (%886, %887)
}

def @func_8310() -> (Tensor[(16, 14, 3), float32],) {
  @func_8308() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_12124() -> (Tensor[(16, 14, 3), float32], Tensor[(640), uint16], Tensor[(308), float32], Tensor[(640), uint16], Tensor[(13, 13, 4), float32], Tensor[(676), uint16]) {
  @func_12122() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(640), uint16], Tensor[(308), float32], Tensor[(640), uint16], Tensor[(13, 13, 4), float32], Tensor[(676), uint16]) */
}

def @func_11389() -> Tensor[(16, 14, 3), bool] {
  %888 = @func_3608() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %888.1
}

def @func_9157() -> (Tensor[(9, 9, 15), float64], Tensor[(16, 14, 3), float32], Tensor[(26, 2), int16]) {
  @func_9155() /* ty=(Tensor[(9, 9, 15), float64], Tensor[(16, 14, 3), float32], Tensor[(26, 2), int16]) */
}

def @func_6584() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64], Tensor[(1215), bool], Tensor[(1215), uint32], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) {
  @func_6582() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float64], Tensor[(1215), bool], Tensor[(1215), uint32], Tensor[(5, 16, 15), float32], Tensor[(2240), float64]) */
}

def @func_396() -> (Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) {
  %898 = fn () -> (Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) {
    %889 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 14, 3), uint64] */, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
    %890 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(16, 14, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %891 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 14, 3), uint64] */, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
    %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %893 = cast(meta[relay.Constant][31] /* ty=Tensor[(1215), int64] */, dtype="int64") /* ty=Tensor[(1215), int64] */;
    %894 = reshape(%893, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
    %895 = @func_142(%894) /* ty=(Tensor[(9, 9, 15), int64],) */;
    %896 = greater(%891, %892) /* ty=Tensor[(16, 14, 3), bool] */;
    %897 = %895.0;
    (%896, %897, meta[relay.Constant][31] /* ty=Tensor[(1215), int64] */)
  };
  %898() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */
}

def @func_6115(%var_6097: Tensor[(16, 14, 3), float32]) -> (Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) {
  %899 = @func_4607() /* ty=(Tensor[(52, 1), int16], Tensor[(52), int16], Tensor[(1215), float32]) */;
  %900 = @func_6083() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %901 = %900.0;
  %902 = cast(%var_6097, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %903 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%901, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %906 = %899.2;
  %907 = equal(%904, %905) /* ty=Tensor[(16, 14, 3), bool] */;
  (%906, %907)
}

def @func_2014() -> Tensor[(16, 14, 3), float32] {
  %908 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %908.1
}

def @func_8134() -> Tensor[(1215), float32] {
  %909 = @func_2693() /* ty=(Tensor[(1215), float32], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
  %910 = %909.0;
  %911 = cast(%910, dtype="float32") /* ty=Tensor[(1215), float32] */;
  exp(%911) /* ty=Tensor[(1215), float32] */
}

def @func_9221() -> (Tensor[(16, 14, 3), float32],) {
  %912 = @func_4648() /* ty=Tensor[(16, 14, 3), float32] */;
  (%912,)
}

def @func_2547(%var_2540: Tensor[(1040), float64]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), float32], Tensor[(1040), float64]) {
  %913 = @func_1590() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %914 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
  %915 = cast(meta[relay.Constant][32] /* ty=Tensor[(1215), int64] */, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %916 = reshape(%915, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %917 = @func_1966(%916) /* ty=(Tensor[(9, 9, 15), int16],) */;
  %918 = %917.0;
  %919 = cast(meta[relay.Constant][32] /* ty=Tensor[(1215), int64] */, dtype="bool") /* ty=Tensor[(1215), bool] */;
  %920 = shape_of(%918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %921 = cast(%918, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %923 = cast(%var_2540, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %924 = reshape(%923, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %925 = @func_1411(%924) /* ty=(Tensor[(16, 14, 3), int8], Tensor[(5, 16, 13), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
  %926 = %913.1;
  %927 = %914.1;
  %928 = logical_and(%921, %922) /* ty=Tensor[(9, 9, 15), bool] */;
  %929 = %925.3;
  (%926, %927, %928, %929, %var_2540)
}

def @func_887() -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) {
  @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */
}

def @func_5975() -> (Tensor[(52), int16], Tensor[(16, 14, 3), float32]) {
  %930 = @func_4607() /* ty=(Tensor[(52, 1), int16], Tensor[(52), int16], Tensor[(1215), float32]) */;
  %931 = @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %932 = %930.1;
  %933 = %931.0;
  (%932, %933)
}

def @func_1966(%var_1939: Tensor[(9, 9, 15), int64]) -> (Tensor[(9, 9, 15), int16],) {
  %934 = @func_1746() /* ty=Tensor[(9, 9, 15), int64] */;
  %935 = cast(%var_1939, dtype="int16") /* ty=Tensor[(9, 9, 15), int16] */;
  %936 = shape_of(%934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %937 = cast(%934, dtype="int16") /* ty=Tensor[(9, 9, 15), int16] */;
  %938 = dyn.reshape(%935, %936, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %939 = bitwise_and(%937, %938) /* ty=Tensor[(9, 9, 15), int16] */;
  (%939,)
}

def @func_5128() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(81, 15), uint32], Tensor[(1040), float64], Tensor[(1040), float64]) {
  %950 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(81, 15), uint32], Tensor[(1040), float64], Tensor[(1040), float64]) {
    %940 = @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %941 = cast(meta[relay.Constant][33] /* ty=Tensor[(81, 15), uint32] */, dtype="uint32") /* ty=Tensor[(81, 15), uint32] */;
    %942 = reshape(%941, newshape=[1215]) /* ty=Tensor[(1215), uint32] */;
    %943 = @func_5015(%942) /* ty=(Tensor[(1200), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
    %944 = cast(meta[relay.Constant][34] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %945 = reshape(%944, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
    %946 = @func_2547(%945) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), float32], Tensor[(1040), float64]) */;
    %947 = %940.0;
    %948 = %943.4;
    %949 = %946.4;
    (%947, %948, meta[relay.Constant][33] /* ty=Tensor[(81, 15), uint32] */, %949, meta[relay.Constant][34] /* ty=Tensor[(1040), float64] */)
  };
  %950() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(81, 15), uint32], Tensor[(1040), float64], Tensor[(1040), float64]) */
}

def @func_12532() -> (Tensor[(5, 16, 13), float64], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), int64], Tensor[(5, 16, 13), bool]) {
  @func_12530() /* ty=(Tensor[(5, 16, 13), float64], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), bool], Tensor[(1215), int64], Tensor[(5, 16, 13), bool]) */
}

def @func_7732() -> Tensor[(16, 14, 3), float32] {
  %952 = fn () -> Tensor[(16, 14, 3), float32] {
    %951 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
    %951.0
  };
  %952() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_5614() -> (Tensor[(5, 16, 13), float64],) {
  @func_5612() /* ty=(Tensor[(5, 16, 13), float64],) */
}

def @func_3529() -> Tensor[(1215), bool] {
  @func_3527() /* ty=Tensor[(1215), bool] */
}

def @func_2115() -> (Tensor[(1215), float32],) {
  %953 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
  %954 = %953.1;
  %955 = cast(%954, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %956 = log10(%955) /* ty=Tensor[(1215), float32] */;
  (%956,)
}

def @func_6893() -> Tensor[(16, 14, 3), float32] {
  @func_2978() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_2070(%var_2069: Tensor[(1215), float32]) -> (Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float32], Tensor[(1215), uint8]) {
  %970 = fn (%var_2054: Tensor[(1215), float32]) -> (Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float32], Tensor[(1215), uint8]) {
    %957 = @func_1590() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
    %958 = @func_1700() /* ty=(Tensor[(5, 16, 13), float32],) */;
    %959 = cast(meta[relay.Constant][35] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %960 = reshape(%959, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
    %961 = @func_1411(%960) /* ty=(Tensor[(16, 14, 3), int8], Tensor[(5, 16, 13), bool], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
    %962 = %961.3;
    %963 = cast(%var_2054, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
    %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(1), int32] */;
    %965 = cast(%962, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
    %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %967 = %957.1;
    %968 = %958.0;
    %969 = left_shift(%965, %966) /* ty=Tensor[(1215), uint8] */;
    (%967, meta[relay.Constant][35] /* ty=Tensor[(1040), float64] */, %968, %969)
  };
  %970(%var_2069) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float32], Tensor[(1215), uint8]) */
}

def @func_1880(%var_1878: Tensor[(10, 14, 16), float64]) -> (Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) {
  @func_1877(%var_1878) /* ty=(Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) */
}

def @func_6462() -> (Tensor[(16, 14, 3), float32],) {
  %971 = @func_5033() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %972 = %971.0;
  (%972,)
}

def @func_1924() -> (Tensor[(16, 14, 3), float32],) {
  @func_1922() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_9043(%var_9042: Tensor[(5, 16, 15), float32]) -> Tensor[(5, 16, 15), float32] {
  %979 = fn (%var_9025: Tensor[(5, 16, 15), float32]) -> Tensor[(5, 16, 15), float32] {
    %973 = @func_644() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */;
    %974 = %973.1;
    %975 = cast(%var_9025, dtype="float32") /* ty=Tensor[(5, 16, 15), float32] */;
    %976 = shape_of(%974, dtype="int32") /* ty=Tensor[(3), int32] */;
    %977 = cast(%974, dtype="float32") /* ty=Tensor[(5, 16, 15), float32] */;
    %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%977, %978) /* ty=Tensor[(5, 16, 15), float32] */
  };
  %979(%var_9042) /* ty=Tensor[(5, 16, 15), float32] */
}

def @func_11400() -> (Tensor[(16, 14, 3), float32],) {
  %982 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %980 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %981 = %980.0;
    (%981,)
  };
  %982() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_11210() -> Tensor[(52), int16] {
  %983 = @func_9283() /* ty=(Tensor[(52), int16], Tensor[(16, 14, 3), float32]) */;
  %983.0
}

def @func_5977() -> (Tensor[(52), int16], Tensor[(16, 14, 3), float32]) {
  @func_5975() /* ty=(Tensor[(52), int16], Tensor[(16, 14, 3), float32]) */
}

def @main(%var_12762: Tensor[(8, 8, 11), float32], %var_12769: int16, %var_12770: Tensor[(52), int16], %var_12777: Tensor[(1040), float64]) -> (Tensor[(13, 4, 1), float32], Tensor[(52), int16], Tensor[(1215), float32], Tensor[(1040), float64], Tensor[(8, 8, 11), uint64]) {
  %984 = cast(%var_12769, dtype="int16") /* ty=int16 */;
  %985 = cast(%var_12770, dtype="int16") /* ty=Tensor[(52), int16] */;
  %986 = reshape(%984, newshape=[]) /* ty=int16 */;
  %987 = reshape(%985, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), int16] */;
  %988 = @func_3425(%986, %987) /* ty=(Tensor[(13, 4, 1), float32],) */;
  %989 = cast(%var_12777, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %990 = reshape(%989, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %991 = @func_6604(%990) /* ty=(Tensor[(1215), float32], Tensor[(1040), float64], Tensor[(1040), float64], Tensor[(16, 14, 3), float32]) */;
  %992 = cast(%var_12762, dtype="float32") /* ty=Tensor[(8, 8, 11), float32] */;
  %993 = sigmoid(%992) /* ty=Tensor[(8, 8, 11), float32] */;
  %994 = cast(%993, dtype="uint64") /* ty=Tensor[(8, 8, 11), uint64] */;
  %995 = cast(%var_12769, dtype="uint64") /* ty=uint64 */;
  %996 = %988.0;
  %997 = %991.0;
  %998 = right_shift(%994, %995) /* ty=Tensor[(8, 8, 11), uint64] */;
  (%996, %var_12770, %997, %var_12777, %998)
}

def @func_6223() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(1215), float32]) {
  @func_6221() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(1215), float32]) */
}

def @func_11868(%var_11849: Tensor[(16, 14, 3), bool]) -> (Tensor[(10, 14, 16), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(182), uint16], Tensor[(1215), float32]) {
  %999 = @func_7305() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(10, 14, 16), float64], Tensor[(560, 4), float64]) */;
  %1000 = @func_11726() /* ty=Tensor[(16, 14, 3), bool] */;
  %1001 = cast(%var_11849, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %1002 = shape_of(%1000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1003 = cast(%1000, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %1004 = dyn.reshape(%1001, %1002, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1005 = cast(meta[relay.Constant][36] /* ty=Tensor[(182), uint16] */, dtype="uint16") /* ty=Tensor[(182), uint16] */;
  %1006 = reshape(%1005, newshape=[182]) /* ty=Tensor[(182), uint16] */;
  %1007 = @func_2866(%1006) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(182), uint16]) */;
  %1008 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
  %1009 = %999.1;
  %1010 = logical_and(%1003, %1004) /* ty=Tensor[(16, 14, 3), bool] */;
  %1011 = %1007.0;
  %1012 = %1008.0;
  (%1009, %1010, %1011, meta[relay.Constant][36] /* ty=Tensor[(182), uint16] */, %1012)
}

def @func_12761() -> (Tensor[(16, 14, 3), float32], Tensor[(1215), float64]) {
  @func_12759() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float64]) */
}

def @func_11212() -> Tensor[(52), int16] {
  @func_11210() /* ty=Tensor[(52), int16] */
}

def @func_2979() -> Tensor[(16, 14, 3), float32] {
  %1014 = fn () -> Tensor[(16, 14, 3), float32] {
    %1013 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
    %1013.0
  };
  %1014() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_3527() -> Tensor[(1215), bool] {
  @func_2421() /* ty=Tensor[(1215), bool] */
}

def @func_5612() -> (Tensor[(5, 16, 13), float64],) {
  %1015 = @func_1774() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float64]) */;
  %1016 = %1015.1;
  (%1016,)
}

def @func_11440() -> (Tensor[(26, 2), int16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  %1017 = @func_9915() /* ty=(Tensor[(26, 2), int16],) */;
  %1018 = @func_6083() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1019 = @func_911() /* ty=(Tensor[(1215), int64],) */;
  %1020 = %1017.0;
  %1021 = %1018.0;
  %1022 = %1019.0;
  (%1020, %1021, %1022)
}

def @func_7166() -> (Tensor[(1040), float64], Tensor[(16, 14, 3), float32]) {
  %1026 = fn () -> (Tensor[(1040), float64], Tensor[(16, 14, 3), float32]) {
    %1023 = @func_5127() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(81, 15), uint32], Tensor[(1040), float64], Tensor[(1040), float64]) */;
    %1024 = %1023.4;
    %1025 = @func_6283() /* ty=Tensor[(16, 14, 3), float32] */;
    (%1024, %1025)
  };
  %1026() /* ty=(Tensor[(1040), float64], Tensor[(16, 14, 3), float32]) */
}

def @func_1747() -> Tensor[(9, 9, 15), int64] {
  %1028 = fn () -> Tensor[(9, 9, 15), int64] {
    %1027 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
    %1027.1
  };
  %1028() /* ty=Tensor[(9, 9, 15), int64] */
}

def @func_1375() -> Tensor[(5, 16, 13), float64] {
  %1032 = fn () -> Tensor[(5, 16, 13), float64] {
    %1029 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 16, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 16, 13), float32] */;
    %1030 = log(%1029) /* ty=Tensor[(5, 16, 13), float32] */;
    %1031 = cast(%1030, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
    atan(%1031) /* ty=Tensor[(5, 16, 13), float64] */
  };
  %1032() /* ty=Tensor[(5, 16, 13), float64] */
}

def @func_2487(%var_2486: Tensor[(9, 9, 15), int64]) -> (Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), bool]) {
  %1041 = fn (%var_2457: Tensor[(9, 9, 15), int64]) -> (Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), bool]) {
    %1033 = @func_1746() /* ty=Tensor[(9, 9, 15), int64] */;
    %1034 = cast(%var_2457, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
    %1035 = shape_of(%1033, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1036 = cast(%1033, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
    %1037 = dyn.reshape(%1034, %1035, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1038 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
    %1039 = greater(%1036, %1037) /* ty=Tensor[(9, 9, 15), bool] */;
    %1040 = %1038.0;
    (%1039, %1040)
  };
  %1041(%var_2486) /* ty=(Tensor[(9, 9, 15), bool], Tensor[(16, 14, 3), bool]) */
}

def @func_4265(%var_4261: Tensor[(676), uint16], %var_4262: Tensor[(676), uint16], %var_4263: Tensor[(182), uint16], %var_4264: Tensor[(1200), float32]) -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(676), uint64], Tensor[(182), uint16], Tensor[(182), uint16], Tensor[(1215), int64], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) {
  %1070 = fn (%var_4187: Tensor[(676), uint16], %var_4225: Tensor[(676), uint16], %var_4235: Tensor[(182), uint16], %var_4245: Tensor[(1200), float32]) -> (Tensor[(1215), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(676), uint64], Tensor[(182), uint16], Tensor[(182), uint16], Tensor[(1215), int64], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) {
    %1042 = @func_2693() /* ty=(Tensor[(1215), float32], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
    %1043 = cast(%var_4187, dtype="uint16") /* ty=Tensor[(676), uint16] */;
    %1044 = reshape(%1043, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), uint16] */;
    %1045 = @func_4148(%1044) /* ty=(Tensor[(13, 13, 4), uint16], Tensor[(16, 14, 3), float32], Tensor[(13, 13, 4), float32]) */;
    %1046 = @func_1264() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */;
    %1047 = @func_3608() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
    %1048 = cast(%var_4225, dtype="uint64") /* ty=Tensor[(676), uint64] */;
    %1049 = shape_of(%var_4187, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1050 = cast(%var_4187, dtype="uint64") /* ty=Tensor[(676), uint64] */;
    %1051 = dyn.reshape(%1048, %1049, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %1052 = cast(%var_4235, dtype="uint16") /* ty=Tensor[(182), uint16] */;
    %1053 = reshape(%1052, newshape=[182]) /* ty=Tensor[(182), uint16] */;
    %1054 = @func_2866(%1053) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(182), uint16]) */;
    %1055 = @func_1438() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */;
    %1056 = cast(%var_4245, dtype="float32") /* ty=Tensor[(1200), float32] */;
    %1057 = cast(%var_4245, dtype="float32") /* ty=Tensor[(1200), float32] */;
    %1058 = reshape(%1056, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
    %1059 = reshape(%1057, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float32] */;
    %1060 = @func_262(%1058, %1059) /* ty=(Tensor[(5, 16, 15), float32],) */;
    %1061 = %1042.0;
    %1062 = %1045.1;
    %1063 = %1046.1;
    %1064 = @func_3448() /* ty=Tensor[(16, 14, 3), float32] */;
    %1065 = %1047.1;
    %1066 = minimum(%1050, %1051) /* ty=Tensor[(676), uint64] */;
    %1067 = %1054.2;
    %1068 = %1055.1;
    %1069 = %1060.0;
    (%1061, %1062, %1063, %1064, %1065, %1066, %1067, %var_4235, %1068, %1069, %var_4245)
  };
  %1070(%var_4261, %var_4262, %var_4263, %var_4264) /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(676), uint64], Tensor[(182), uint16], Tensor[(182), uint16], Tensor[(1215), int64], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */
}

def @func_1265() -> (Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) {
  %1075 = fn () -> (Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) {
    %1071 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
    %1072 = @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */;
    %1073 = %1071.0;
    %1074 = %1072.0;
    (%1073, %1074)
  };
  %1075() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */
}

def @func_9242() -> (Tensor[(16, 14, 3), float32],) {
  %1078 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %1076 = @func_2648() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %1077 = %1076.0;
    (%1077,)
  };
  %1078() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_2016() -> Tensor[(16, 14, 3), float32] {
  @func_2014() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_5555() -> Tensor[(16, 14, 3), float32] {
  @func_5553() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_3608() -> (Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) {
  %1079 = @func_1227() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), int8]) */;
  %1080 = @func_421() /* ty=(Tensor[(16, 14, 3), bool],) */;
  %1081 = %1079.0;
  %1082 = %1080.0;
  %1083 = @func_2014() /* ty=Tensor[(16, 14, 3), float32] */;
  (%1081, %1082, %1083)
}

def @func_8864() -> Tensor[(1215), float32] {
  %1085 = fn () -> Tensor[(1215), float32] {
    %1084 = @func_2115() /* ty=(Tensor[(1215), float32],) */;
    %1084.0
  };
  %1085() /* ty=Tensor[(1215), float32] */
}

def @func_5764() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %1086 = @func_3161() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1087 = @func_805() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1088 = %1086.0;
  %1089 = %1087.0;
  (%1088, %1089)
}

def @func_4562(%var_4560: Tensor[(52, 1), int16], %var_4561: Tensor[(1215), int64]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(13, 4, 1), float32], int16, Tensor[(52, 1), int16], Tensor[(1215), uint16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
  %1109 = fn (%var_4501: Tensor[(52, 1), int16], %var_4516: Tensor[(1215), int64]) -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(13, 4, 1), float32], int16, Tensor[(52, 1), int16], Tensor[(1215), uint16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) {
    %1090 = cast(meta[relay.Constant][38] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %1091 = cast(%var_4501, dtype="int16") /* ty=Tensor[(52, 1), int16] */;
    %1092 = reshape(%1090, newshape=[]) /* ty=int16 */;
    %1093 = reshape(%1091, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), int16] */;
    %1094 = @func_3422(%1092, %1093) /* ty=(Tensor[(13, 4, 1), float32],) */;
    %1095 = @func_1680() /* ty=(Tensor[(1215), int64], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) */;
    %1096 = %1095.0;
    %1097 = cast(%var_4516, dtype="uint16") /* ty=Tensor[(1215), uint16] */;
    %1098 = shape_of(%1096, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1099 = cast(%1096, dtype="uint16") /* ty=Tensor[(1215), uint16] */;
    %1100 = dyn.reshape(%1097, %1098, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %1101 = @func_2080() /* ty=(Tensor[(16, 14, 3), float32],) */;
    %1102 = @func_911() /* ty=(Tensor[(1215), int64],) */;
    %1103 = @func_2978() /* ty=Tensor[(16, 14, 3), float32] */;
    %1104 = @func_1333() /* ty=Tensor[(16, 14, 3), float32] */;
    %1105 = %1094.0;
    %1106 = maximum(%1099, %1100) /* ty=Tensor[(1215), uint16] */;
    %1107 = %1101.0;
    %1108 = %1102.0;
    (%1103, %1104, %1105, meta[relay.Constant][38] /* ty=int16 */, %var_4501, %1106, %1107, %1108)
  };
  %1109(%var_4560, %var_4561) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(13, 4, 1), float32], int16, Tensor[(52, 1), int16], Tensor[(1215), uint16], Tensor[(16, 14, 3), float32], Tensor[(1215), int64]) */
}

def @func_1082() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
  %1138 = fn () -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) {
    %1110 = @func_644() /* ty=(Tensor[(16, 14, 3), float64], Tensor[(5, 16, 15), float32], Tensor[(1, 1200), float32]) */;
    %1111 = %1110.0;
    %1112 = cast(%1111, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
    %1113 = @func_885() /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), float32]) */;
    %1114 = @func_964() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
    %1115 = @func_911() /* ty=(Tensor[(1215), int64],) */;
    %1116 = %1115.0;
    %1117 = cast(%1116, dtype="float64") /* ty=Tensor[(1215), float64] */;
    %1118 = atan(%1117) /* ty=Tensor[(1215), float64] */;
    %1119 = cast(%1116, dtype="bool") /* ty=Tensor[(1215), bool] */;
    %1120 = shape_of(%1118, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1121 = cast(%1118, dtype="bool") /* ty=Tensor[(1215), bool] */;
    %1122 = dyn.reshape(%1119, %1120, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1123 = less(%1121, %1122) /* ty=Tensor[(1215), bool] */;
    %1124 = cast(%1123, dtype="bool") /* ty=Tensor[(1215), bool] */;
    %1125 = shape_of(%1118, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1126 = cast(%1118, dtype="bool") /* ty=Tensor[(1215), bool] */;
    %1127 = dyn.reshape(%1124, %1125, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1128 = @func_840() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
    %1129 = cast(%1123, dtype="int64") /* ty=Tensor[(1215), int64] */;
    %1130 = reshape(%1129, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
    %1131 = @func_142(%1130) /* ty=(Tensor[(9, 9, 15), int64],) */;
    %1132 = acosh(%1112) /* ty=Tensor[(16, 14, 3), float32] */;
    %1133 = %1113.1;
    %1134 = %1114.0;
    %1135 = less_equal(%1126, %1127) /* ty=Tensor[(1215), bool] */;
    %1136 = %1128.1;
    %1137 = %1131.0;
    (%1132, %1133, %1134, %1135, %1136, %1137)
  };
  %1138() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */
}

def @func_4151(%var_4149: Tensor[(13, 13, 4), uint16]) -> (Tensor[(13, 13, 4), uint16], Tensor[(16, 14, 3), float32], Tensor[(13, 13, 4), float32]) {
  @func_4148(%var_4149) /* ty=(Tensor[(13, 13, 4), uint16], Tensor[(16, 14, 3), float32], Tensor[(13, 13, 4), float32]) */
}

def @func_12432() -> (Tensor[(16, 14, 3), int8], Tensor[(9, 9, 15), int64]) {
  %1143 = fn () -> (Tensor[(16, 14, 3), int8], Tensor[(9, 9, 15), int64]) {
    %1139 = @func_6993() /* ty=(Tensor[(16, 14, 3), int8], Tensor[(16, 14, 3), float32]) */;
    %1140 = @func_964() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
    %1141 = %1139.0;
    %1142 = %1140.1;
    (%1141, %1142)
  };
  %1143() /* ty=(Tensor[(16, 14, 3), int8], Tensor[(9, 9, 15), int64]) */
}

def @func_9075(%var_9074: Tensor[(1215), int64]) -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), int64]) {
  %1149 = fn (%var_9058: Tensor[(1215), int64]) -> (Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), int64]) {
    %1144 = @func_1119() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %1145 = cast(%var_9058, dtype="int64") /* ty=Tensor[(1215), int64] */;
    %1146 = reshape(%1145, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
    %1147 = %1144.1;
    %1148 = @func_6676(%1146) /* ty=Tensor[(9, 9, 15), int16] */;
    (%1147, %1148, %var_9058)
  };
  %1149(%var_9074) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), int64]) */
}

def @func_9359() -> (Tensor[(1200), float32],) {
  %1152 = fn () -> (Tensor[(1200), float32],) {
    %1150 = @func_777() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(5, 16, 15), float32], Tensor[(1200), float32]) */;
    %1151 = %1150.2;
    (%1151,)
  };
  %1152() /* ty=(Tensor[(1200), float32],) */
}

def @func_9915() -> (Tensor[(26, 2), int16],) {
  %1153 = @func_9155() /* ty=(Tensor[(9, 9, 15), float64], Tensor[(16, 14, 3), float32], Tensor[(26, 2), int16]) */;
  %1154 = %1153.2;
  (%1154,)
}

def @func_265(%var_263: Tensor[(5, 16, 15), float32], %var_264: Tensor[(5, 16, 15), float32]) -> (Tensor[(5, 16, 15), float32],) {
  %1160 = fn (%var_246: Tensor[(5, 16, 15), float32], %var_247: Tensor[(5, 16, 15), float32]) -> (Tensor[(5, 16, 15), float32],) {
    %1155 = cast(%var_247, dtype="float32") /* ty=Tensor[(5, 16, 15), float32] */;
    %1156 = shape_of(%var_246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1157 = cast(%var_246, dtype="float32") /* ty=Tensor[(5, 16, 15), float32] */;
    %1158 = dyn.reshape(%1155, %1156, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1159 = floor_mod(%1157, %1158) /* ty=Tensor[(5, 16, 15), float32] */;
    (%1159,)
  };
  %1160(%var_263, %var_264) /* ty=(Tensor[(5, 16, 15), float32],) */
}

def @func_10820() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) {
  %1161 = @func_2228() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1215), float32], Tensor[(1215), uint32]) */;
  %1162 = %1161.0;
  %1163 = @func_2978() /* ty=Tensor[(16, 14, 3), float32] */;
  (%1162, %1163)
}

def @func_8460() -> Tensor[(16, 14, 3), float32] {
  %1164 = fn () -> Tensor[(16, 14, 3), float32] {
    @func_7731() /* ty=Tensor[(16, 14, 3), float32] */
  };
  %1164() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_9195() -> (Tensor[(16, 5, 8), float32],) {
  %1167 = fn () -> (Tensor[(16, 5, 8), float32],) {
    %1165 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 5, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 8), float32] */;
    %1166 = atanh(%1165) /* ty=Tensor[(16, 5, 8), float32] */;
    (%1166,)
  };
  %1167() /* ty=(Tensor[(16, 5, 8), float32],) */
}

def @func_491() -> (Tensor[(16, 14, 3), float64],) {
  @func_489() /* ty=(Tensor[(16, 14, 3), float64],) */
}

def @func_6221() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(1215), float32]) {
  %1168 = @func_3191() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
  %1169 = @func_5300() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1170 = cast(meta[relay.Constant][40] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %1171 = reshape(%1170, newshape=[1215]) /* ty=Tensor[(1215), float32] */;
  %1172 = @func_2068(%1171) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(5, 16, 13), float32], Tensor[(1215), uint8]) */;
  %1173 = %1168.1;
  %1174 = @func_2978() /* ty=Tensor[(16, 14, 3), float32] */;
  %1175 = %1169.0;
  %1176 = %1172.1;
  (%1173, %1174, %1175, %1176, meta[relay.Constant][40] /* ty=Tensor[(1215), float32] */)
}

def @func_9283() -> (Tensor[(52), int16], Tensor[(16, 14, 3), float32]) {
  %1177 = @func_5975() /* ty=(Tensor[(52), int16], Tensor[(16, 14, 3), float32]) */;
  %1178 = @func_8308() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1179 = %1177.0;
  %1180 = %1178.0;
  (%1179, %1180)
}

def @func_7049() -> Tensor[(9, 9, 15), int16] {
  @func_7047() /* ty=Tensor[(9, 9, 15), int16] */
}

def @func_2695() -> (Tensor[(1215), float32], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) {
  @func_2693() /* ty=(Tensor[(1215), float32], Tensor[(5, 16, 13), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), bool]) */
}

def @func_6535() -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), bool], Tensor[(1040), float64]) {
  %1181 = cast(meta[relay.Constant][41] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %1182 = reshape(%1181, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %1183 = @func_2298(%1182) /* ty=(Tensor[(1200), float32], Tensor[(5, 16, 13), bool]) */;
  %1184 = @func_6283() /* ty=Tensor[(16, 14, 3), float32] */;
  %1185 = %1183.1;
  (%1184, %1185, meta[relay.Constant][41] /* ty=Tensor[(1040), float64] */)
}

def @func_8684(%var_8683: Tensor[(640), uint16]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float32], Tensor[(640), uint16]) {
  %1194 = fn (%var_8667: Tensor[(640), uint16]) -> (Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float32], Tensor[(640), uint16]) {
    %1186 = @func_1119() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %1187 = cast(%var_8667, dtype="uint16") /* ty=Tensor[(640), uint16] */;
    %1188 = cast(%var_8667, dtype="uint16") /* ty=Tensor[(640), uint16] */;
    %1189 = reshape(%1187, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
    %1190 = reshape(%1188, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), uint16] */;
    %1191 = @func_3801(%1189, %1190) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(5, 16, 13), float32]) */;
    %1192 = %1186.1;
    %1193 = %1191.1;
    (%1192, %1193, %var_8667)
  };
  %1194(%var_8683) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(5, 16, 13), float32], Tensor[(640), uint16]) */
}

def @func_10241(%var_10238: Tensor[(11, 2240), float64], %var_10239: Tensor[(11, 2240), uint8], %var_10240: Tensor[(1350), int8]) -> (Tensor[(16, 14, 3), float32], Tensor[(11, 2240), float32], Tensor[(10, 15, 9), bool], Tensor[(1350), int8], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(2, 13, 7), int64], Tensor[(182), uint16]) {
  %1228 = fn (%var_10169: Tensor[(11, 2240), float64], %var_10183: Tensor[(11, 2240), uint8], %var_10202: Tensor[(1350), int8]) -> (Tensor[(16, 14, 3), float32], Tensor[(11, 2240), float32], Tensor[(10, 15, 9), bool], Tensor[(1350), int8], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(2, 13, 7), int64], Tensor[(182), uint16]) {
    %1195 = @func_6138() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
    %1196 = @func_9795() /* ty=(Tensor[(1215), int64], Tensor[(1, 2, 16), float32], Tensor[(1, 2240), float64]) */;
    %1197 = %1196.2;
    %1198 = cast(%1197, dtype="uint8") /* ty=Tensor[(1, 2240), uint8] */;
    %1199 = cast(%var_10169, dtype="uint8") /* ty=Tensor[(11, 2240), uint8] */;
    %1200 = minimum(%1198, %1199) /* ty=Tensor[(11, 2240), uint8] */;
    %1201 = cast(%var_10183, dtype="float32") /* ty=Tensor[(11, 2240), float32] */;
    %1202 = shape_of(%1200, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1203 = cast(%1200, dtype="float32") /* ty=Tensor[(11, 2240), float32] */;
    %1204 = dyn.reshape(%1201, %1202, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1205 = cast(%var_10202, dtype="int8") /* ty=Tensor[(1350), int8] */;
    %1206 = cast(%var_10202, dtype="int8") /* ty=Tensor[(1350), int8] */;
    %1207 = reshape(%1205, newshape=[10, 15, 9]) /* ty=Tensor[(10, 15, 9), int8] */;
    %1208 = reshape(%1206, newshape=[10, 15, 9]) /* ty=Tensor[(10, 15, 9), int8] */;
    %1209 = @func_7112(%1207, %1208) /* ty=(Tensor[(10, 15, 9), bool],) */;
    %1210 = @func_6221() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(1215), float32]) */;
    %1211 = @func_9557() /* ty=(Tensor[(77, 4), float32], Tensor[(1215), float32], Tensor[(77, 4), float64], Tensor[(16, 14, 3), float32]) */;
    %1212 = @func_3242() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %1213 = @func_5764() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32]) */;
    %1214 = cast(meta[relay.Constant][42] /* ty=Tensor[(182), uint16] */, dtype="uint16") /* ty=Tensor[(182), uint16] */;
    %1215 = cast(meta[relay.Constant][42] /* ty=Tensor[(182), uint16] */, dtype="uint16") /* ty=Tensor[(182), uint16] */;
    %1216 = reshape(%1214, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), uint16] */;
    %1217 = reshape(%1215, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), uint16] */;
    %1218 = @func_1850(%1216, %1217) /* ty=(Tensor[(2, 13, 7), bool], Tensor[(16, 14, 3), bool], Tensor[(1215), bool], Tensor[(1215), bool], Tensor[(2, 13, 7), int64]) */;
    %1219 = %1195.0;
    %1220 = mod(%1203, %1204) /* ty=Tensor[(11, 2240), float32] */;
    %1221 = %1209.0;
    %1222 = %1210.2;
    %1223 = %1211.3;
    %1224 = @func_5455() /* ty=Tensor[(16, 14, 3), bool] */;
    %1225 = %1212.0;
    %1226 = %1213.0;
    %1227 = %1218.4;
    (%1219, %1220, %1221, %var_10202, %1222, %1223, %1224, %1225, %1226, %1227, meta[relay.Constant][42] /* ty=Tensor[(182), uint16] */)
  };
  %1228(%var_10238, %var_10239, %var_10240) /* ty=(Tensor[(16, 14, 3), float32], Tensor[(11, 2240), float32], Tensor[(10, 15, 9), bool], Tensor[(1350), int8], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(2, 13, 7), int64], Tensor[(182), uint16]) */
}

def @func_6980(%var_6979: Tensor[(5, 56), float32]) -> (Tensor[(16, 14, 3), bool], Tensor[(2, 10, 14), float32], Tensor[(5, 56), float32], Tensor[(16, 14, 3), float32], Tensor[(81, 15), uint32], Tensor[(1215), bool], Tensor[(9, 9, 15), int64]) {
  %1239 = fn (%var_6950: Tensor[(5, 56), float32]) -> (Tensor[(16, 14, 3), bool], Tensor[(2, 10, 14), float32], Tensor[(5, 56), float32], Tensor[(16, 14, 3), float32], Tensor[(81, 15), uint32], Tensor[(1215), bool], Tensor[(9, 9, 15), int64]) {
    %1229 = cast(%var_6950, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
    %1230 = reshape(%1229, newshape=[2, 10, 14]) /* ty=Tensor[(2, 10, 14), float32] */;
    %1231 = cast(meta[relay.Constant][43] /* ty=Tensor[(81, 15), uint32] */, dtype="uint32") /* ty=Tensor[(81, 15), uint32] */;
    %1232 = reshape(%1231, newshape=[1215]) /* ty=Tensor[(1215), uint32] */;
    %1233 = @func_5015(%1232) /* ty=(Tensor[(1200), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), float32]) */;
    %1234 = @func_2734() /* ty=Tensor[(16, 14, 3), bool] */;
    %1235 = @func_6351(%1230) /* ty=Tensor[(2, 10, 14), float32] */;
    %1236 = %1233.3;
    %1237 = @func_3527() /* ty=Tensor[(1215), bool] */;
    %1238 = @func_1746() /* ty=Tensor[(9, 9, 15), int64] */;
    (%1234, %1235, %var_6950, %1236, meta[relay.Constant][43] /* ty=Tensor[(81, 15), uint32] */, %1237, %1238)
  };
  %1239(%var_6979) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(2, 10, 14), float32], Tensor[(5, 56), float32], Tensor[(16, 14, 3), float32], Tensor[(81, 15), uint32], Tensor[(1215), bool], Tensor[(9, 9, 15), int64]) */
}

def @func_2422() -> Tensor[(1215), bool] {
  %1241 = fn () -> Tensor[(1215), bool] {
    %1240 = @func_1081() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1215), bool], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int64]) */;
    %1240.3
  };
  %1241() /* ty=Tensor[(1215), bool] */
}

def @func_6862() -> (Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(9, 9, 15), int16], Tensor[(1215), int64], Tensor[(16, 14, 3), float32]) {
  %1242 = @func_6384() /* ty=(Tensor[(16, 14, 3), float32],) */;
  %1243 = cast(meta[relay.Constant][44] /* ty=Tensor[(1215), int64] */, dtype="int64") /* ty=Tensor[(1215), int64] */;
  %1244 = reshape(%1243, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int64] */;
  %1245 = @func_1966(%1244) /* ty=(Tensor[(9, 9, 15), int16],) */;
  %1246 = @func_6221() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(1215), float32]) */;
  %1247 = %1242.0;
  %1248 = @func_4791() /* ty=Tensor[(16, 14, 3), float32] */;
  %1249 = %1245.0;
  %1250 = %1246.0;
  (%1247, %1248, %1249, meta[relay.Constant][44] /* ty=Tensor[(1215), int64] */, %1250)
}

def @func_4791() -> Tensor[(16, 14, 3), float32] {
  @func_3448() /* ty=Tensor[(16, 14, 3), float32] */
}

def @func_3296() -> Tensor[(5, 16, 13), float32] {
  %1252 = fn () -> Tensor[(5, 16, 13), float32] {
    %1251 = @func_1700() /* ty=(Tensor[(5, 16, 13), float32],) */;
    %1251.0
  };
  %1252() /* ty=Tensor[(5, 16, 13), float32] */
}

def @func_6084() -> (Tensor[(16, 14, 3), float32],) {
  %1255 = fn () -> (Tensor[(16, 14, 3), float32],) {
    %1253 = @func_1590() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(16, 14, 3), float32]) */;
    %1254 = %1253.1;
    (%1254,)
  };
  %1255() /* ty=(Tensor[(16, 14, 3), float32],) */
}

def @func_3860(%var_3858: Tensor[(1, 2240), float64]) -> (Tensor[(1, 2, 16), float32], Tensor[(10, 14, 16), float64], Tensor[(1, 2240), float64]) {
  %1256 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
  %1257 = cast(%var_3858, dtype="float64") /* ty=Tensor[(1, 2240), float64] */;
  %1258 = reshape(%1257, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
  %1259 = @func_1877(%1258) /* ty=(Tensor[(10, 14, 16), float64], Tensor[(5, 16, 15), float32]) */;
  %1260 = sigmoid(%1256) /* ty=Tensor[(1, 2, 16), float32] */;
  %1261 = %1259.0;
  (%1260, %1261, %var_3858)
}

def @func_6718(%var_6707: Tensor[(672), float32]) -> (Tensor[(5, 16, 13), float64], Tensor[(16, 14, 3), bool], Tensor[(672), float32]) {
  %1262 = @func_5612() /* ty=(Tensor[(5, 16, 13), float64],) */;
  %1263 = %1262.0;
  %1264 = cast(%1263, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %1265 = cast(%var_6707, dtype="float32") /* ty=Tensor[(672), float32] */;
  %1266 = reshape(%1265, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float32] */;
  %1267 = @func_6115(%1266) /* ty=(Tensor[(1215), float32], Tensor[(16, 14, 3), bool]) */;
  %1268 = rsqrt(%1264) /* ty=Tensor[(5, 16, 13), float64] */;
  %1269 = %1267.1;
  (%1268, %1269, %var_6707)
}

def @func_12122() -> (Tensor[(16, 14, 3), float32], Tensor[(640), uint16], Tensor[(308), float32], Tensor[(640), uint16], Tensor[(13, 13, 4), float32], Tensor[(676), uint16]) {
  %1270 = @func_6221() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(16, 14, 3), float32], Tensor[(1040), float64], Tensor[(1215), float32]) */;
  %1271 = cast(meta[relay.Constant][46] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %1272 = cast(meta[relay.Constant][47] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %1273 = reshape(%1271, newshape=[7, 11, 4]) /* ty=Tensor[(7, 11, 4), float32] */;
  %1274 = reshape(%1272, newshape=[640]) /* ty=Tensor[(640), uint16] */;
  %1275 = @func_7984(%1273, %1274) /* ty=(Tensor[(5, 8, 16), uint16], Tensor[(640), uint16], Tensor[(16, 14, 3), float32], Tensor[(7, 11, 4), bool], Tensor[(16, 14, 3), float64], Tensor[(9, 9, 15), int64]) */;
  %1276 = cast(meta[relay.Constant][48] /* ty=Tensor[(676), uint16] */, dtype="uint16") /* ty=Tensor[(676), uint16] */;
  %1277 = reshape(%1276, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), uint16] */;
  %1278 = @func_4148(%1277) /* ty=(Tensor[(13, 13, 4), uint16], Tensor[(16, 14, 3), float32], Tensor[(13, 13, 4), float32]) */;
  %1279 = %1270.2;
  %1280 = %1275.1;
  %1281 = %1278.2;
  (%1279, %1280, meta[relay.Constant][46] /* ty=Tensor[(308), float32] */, meta[relay.Constant][47] /* ty=Tensor[(640), uint16] */, %1281, meta[relay.Constant][48] /* ty=Tensor[(676), uint16] */)
}

def @func_12169() -> (Tensor[(16, 14, 3), float32], Tensor[(77, 4), float64]) {
  @func_12167() /* ty=(Tensor[(16, 14, 3), float32], Tensor[(77, 4), float64]) */
}

def @func_1982() -> Tensor[(1215), int64] {
  %1283 = fn () -> Tensor[(1215), int64] {
    %1282 = @func_395() /* ty=(Tensor[(16, 14, 3), bool], Tensor[(9, 9, 15), int64], Tensor[(1215), int64]) */;
    %1282.2
  };
  %1283() /* ty=Tensor[(1215), int64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen769/build/output.py", line 4117, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:09:28] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

