import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_176 = relay.const([[[-9,-3,6,-4,-4,-6,9,10,-5],[4,-3,-5,-5,8,-9,-2,-3,9],[-10,-10,3,3,-1,1,-5,-5,10],[-5,-2,-3,-9,-1,9,-2,10,3]],[[9,7,-9,5,5,-4,3,-10,-2],[5,-7,4,4,-4,9,2,-5,7],[9,-10,3,9,-3,8,-3,7,-9],[7,6,-2,1,2,-2,2,10,-6]],[[-3,-8,6,-2,-8,3,1,-3,-3],[3,-6,2,3,-9,-5,7,-2,6],[10,8,-8,-9,3,5,6,2,2],[-10,-9,1,4,1,4,3,-7,4]],[[-4,-6,5,-2,1,5,-9,2,3],[-1,-3,4,-2,-1,-2,8,-10,-2],[8,-5,10,-4,-4,7,10,-8,-2],[10,1,-3,-8,8,7,-4,6,4]],[[1,8,-6,5,-3,-1,-7,-9,4],[-1,4,2,-1,-6,6,-4,-10,4],[-7,6,-2,-7,9,9,-9,-8,2],[-6,-8,10,4,3,-8,2,4,9]],[[4,-8,3,6,8,7,-6,10,5],[8,-8,3,-5,-1,-2,8,-6,7],[-2,3,9,-9,-3,8,1,-7,-8],[4,5,6,-6,3,1,-3,-5,4]],[[-6,-10,1,7,8,2,-4,1,4],[9,10,-3,-2,-5,-3,-2,9,6],[-1,-6,8,-5,6,4,-3,-9,-4],[5,9,4,6,-8,7,-9,-8,-9]]], dtype = "uint64")#candidate|176|(7, 4, 9)|const|uint64
var_177 = relay.var("var_177", dtype = "uint64", shape = (7, 4, 9))#candidate|177|(7, 4, 9)|var|uint64
bop_178 = relay.right_shift(const_176.astype('uint64'), relay.reshape(var_177.astype('uint64'), relay.shape_of(const_176))) # shape=(7, 4, 9)
uop_182 = relay.exp(var_177.astype('float32')) # shape=(7, 4, 9)
bop_186 = relay.bitwise_and(uop_182.astype('uint64'), relay.reshape(bop_178.astype('uint64'), relay.shape_of(uop_182))) # shape=(7, 4, 9)
output = relay.Tuple([bop_186,])
output2 = relay.Tuple([bop_186,])
func_197 = relay.Function([var_177,], output)
mod['func_197'] = func_197
mod = relay.transform.InferType()(mod)
mutated_mod['func_197'] = func_197
mutated_mod = relay.transform.InferType()(mutated_mod)
var_198 = relay.var("var_198", dtype = "uint64", shape = (7, 4, 9))#candidate|198|(7, 4, 9)|var|uint64
func_197_call = mutated_mod.get_global_var('func_197')
call_199 = func_197_call(var_198)
output = call_199
func_200 = relay.Function([var_198], output)
mutated_mod['func_200'] = func_200
mutated_mod = relay.transform.InferType()(mutated_mod)
var_812 = relay.var("var_812", dtype = "float64", shape = (2, 3, 6))#candidate|812|(2, 3, 6)|var|float64
uop_813 = relay.acosh(var_812.astype('float64')) # shape=(2, 3, 6)
func_197_call = mod.get_global_var('func_197')
func_200_call = mutated_mod.get_global_var('func_200')
const_828 = relay.const([-7,4,-2,-3,4,-7,7,-8,7,-6,-10,-10,-5,-7,9,5,-5,-8,-7,-6,-5,1,-2,-2,6,-7,-10,-9,3,4,-4,-10,7,7,-10,-6,-5,-7,-10,5,9,-2,-9,8,7,-4,10,-9,3,-2,9,8,-8,1,7,4,8,-7,-5,10,6,4,-7,4,10,-3,-5,-5,7,1,-3,-10,-8,-9,1,-8,3,-4,6,-2,-5,9,5,2,-1,-4,9,7,-10,-4,-8,-9,-6,-3,2,-1,8,6,4,-5,-3,9,-2,3,5,-2,-10,3,-3,-8,-10,1,-9,-3,-5,9,-9,1,-7,1,2,4,-6,7,3,-6,6,-3,2,-1,-8,6,7,7,2,5,-3,5,5,-1,-1,1,2,-6,4,3,6,-7,7,-8,-4,-2,-3,8,-2,8,6,3,-7,-4,6,3,7,8,6,2,10,-8,-2,3,-7,-7,10,3,-9,-8,-6,-9,-1,-8,3,-6,3,-8,-2,9,1,2,-4,-1,-2,9,2,-3,-5,1,-1,2,2,-9,10,4,1,-7,3,-9,-8,4,-6,-4,-10,-8,-3,4,-10,-10,2,4,-3,10,10,2,-10,10,3,-7,-9,3,3,7,-2,-4,4,10,10,3,1,-9,-2,-7,5,10,-6,7,-2,-5,-3,1,-10,5,10,1], dtype = "uint64")#candidate|828|(252,)|const|uint64
call_827 = relay.TupleGetItem(func_197_call(relay.reshape(const_828.astype('uint64'), [7, 4, 9])), 0)
call_829 = relay.TupleGetItem(func_200_call(relay.reshape(const_828.astype('uint64'), [7, 4, 9])), 0)
func_197_call = mod.get_global_var('func_197')
func_200_call = mutated_mod.get_global_var('func_200')
call_839 = relay.TupleGetItem(func_197_call(relay.reshape(call_827.astype('uint64'), [7, 4, 9])), 0)
call_840 = relay.TupleGetItem(func_200_call(relay.reshape(call_827.astype('uint64'), [7, 4, 9])), 0)
output = relay.Tuple([uop_813,call_827,const_828,call_839,])
output2 = relay.Tuple([uop_813,call_829,const_828,call_840,])
func_841 = relay.Function([var_812,], output)
mod['func_841'] = func_841
mod = relay.transform.InferType()(mod)
var_842 = relay.var("var_842", dtype = "float64", shape = (2, 3, 6))#candidate|842|(2, 3, 6)|var|float64
output = func_841(var_842)
func_843 = relay.Function([var_842], output)
mutated_mod['func_843'] = func_843
mutated_mod = relay.transform.InferType()(mutated_mod)
var_969 = relay.var("var_969", dtype = "uint64", shape = ())#candidate|969|()|var|uint64
var_970 = relay.var("var_970", dtype = "uint64", shape = (5, 9, 4))#candidate|970|(5, 9, 4)|var|uint64
bop_971 = relay.less_equal(var_969.astype('bool'), var_970.astype('bool')) # shape=(5, 9, 4)
output = bop_971
output2 = bop_971
func_976 = relay.Function([var_969,var_970,], output)
mod['func_976'] = func_976
mod = relay.transform.InferType()(mod)
var_977 = relay.var("var_977", dtype = "uint64", shape = ())#candidate|977|()|var|uint64
var_978 = relay.var("var_978", dtype = "uint64", shape = (5, 9, 4))#candidate|978|(5, 9, 4)|var|uint64
output = func_976(var_977,var_978,)
func_979 = relay.Function([var_977,var_978,], output)
mutated_mod['func_979'] = func_979
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1260 = relay.var("var_1260", dtype = "float64", shape = (12, 13, 11))#candidate|1260|(12, 13, 11)|var|float64
uop_1261 = relay.log(var_1260.astype('float64')) # shape=(12, 13, 11)
func_841_call = mod.get_global_var('func_841')
func_843_call = mutated_mod.get_global_var('func_843')
const_1271 = relay.const([9.949459,6.592646,-2.137983,8.162462,-8.469913,-5.828704,9.238571,2.017174,-6.814671,9.768851,0.107877,9.119007,-9.786844,7.452454,3.845861,-0.327040,-3.060268,8.186771,-6.989450,-8.474679,5.834323,6.543813,-1.083450,6.651072,-4.146751,2.779364,-1.217266,4.400918,-2.617884,-7.243559,3.125433,-5.797596,-4.621283,4.210680,-0.682090,5.945167], dtype = "float64")#candidate|1271|(36,)|const|float64
call_1270 = relay.TupleGetItem(func_841_call(relay.reshape(const_1271.astype('float64'), [2, 3, 6])), 0)
call_1272 = relay.TupleGetItem(func_843_call(relay.reshape(const_1271.astype('float64'), [2, 3, 6])), 0)
output = relay.Tuple([uop_1261,call_1270,const_1271,])
output2 = relay.Tuple([uop_1261,call_1272,const_1271,])
func_1279 = relay.Function([var_1260,], output)
mod['func_1279'] = func_1279
mod = relay.transform.InferType()(mod)
mutated_mod['func_1279'] = func_1279
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1280 = relay.var("var_1280", dtype = "float64", shape = (12, 13, 11))#candidate|1280|(12, 13, 11)|var|float64
func_1279_call = mutated_mod.get_global_var('func_1279')
call_1281 = func_1279_call(var_1280)
output = call_1281
func_1282 = relay.Function([var_1280], output)
mutated_mod['func_1282'] = func_1282
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1322 = relay.var("var_1322", dtype = "float32", shape = (10, 9, 1))#candidate|1322|(10, 9, 1)|var|float32
uop_1323 = relay.rsqrt(var_1322.astype('float32')) # shape=(10, 9, 1)
func_1279_call = mod.get_global_var('func_1279')
func_1282_call = mutated_mod.get_global_var('func_1282')
const_1330 = relay.const([0.936926,-4.489400,-4.690030,-1.735319,8.342767,7.755825,1.760608,-8.749218,-2.459854,0.449225,-7.890914,3.347497,-6.256701,-9.706518,-8.601376,-7.299109,-5.896028,-6.455962,3.218471,8.893420,-7.439476,-2.984485,-2.772252,8.402519,-8.669666,3.993899,-8.231670,4.185881,-0.134874,-8.761280,8.615261,-8.880547,1.186226,-3.909954,-6.404819,-1.932161,-8.511578,-0.151732,7.248619,-8.612668,-4.807575,-1.473760,-2.499507,4.581585,1.555215,7.981035,-2.191296,-4.277508,-1.732533,-3.907369,-6.528029,-1.012892,6.271101,-4.419319,-3.481329,-1.069273,-9.136520,0.171157,-7.771937,-9.580881,9.259342,9.438069,3.766704,5.039531,-7.426261,-6.612961,-9.306381,-2.785136,5.294898,-2.597160,8.618892,-5.165749,7.776588,-7.699621,-5.007834,8.818684,-8.719701,-6.810540,-9.921172,-4.506798,6.033109,-6.388520,4.654613,-2.508047,3.457996,-7.520700,2.665891,-7.779418,-9.863554,5.279325,2.045179,-8.417001,7.595023,-4.607214,5.111587,-9.058553,4.230395,-2.556318,1.954355,-5.815421,-9.722278,7.410518,3.925129,-0.431618,-7.253612,5.573332,0.305683,-7.326565,-5.605539,-4.665849,0.867383,-8.980987,3.025332,5.224531,3.975409,5.921212,-9.645823,-6.965825,5.460541,3.775923,-6.518747,0.731295,0.494546,-2.379622,-8.708853,1.927237,7.283346,9.644714,-8.247961,-5.437784,-5.646638,9.706565,-7.295372,-9.855011,4.795528,-6.015960,-8.559020,9.046190,4.608212,2.991060,-2.375007,8.694084,8.191707,1.255892,0.090152,2.807366,9.164398,-6.292897,-5.322019,2.914331,-5.082344,9.415615,-9.331245,-2.594390,-7.599341,9.778074,-2.191205,5.891966,0.595412,-8.229919,-0.278448,-9.858991,-5.772023,1.937408,-3.480916,-7.886257,-5.013901,6.795406,-3.999285,-4.172735,-1.730852,-7.663863,-2.125527,-9.049107,-6.525254,-9.978746,-2.497442,-4.143758,0.253494,-6.248250,2.654917,4.736215,-3.940192,-6.172701,-8.544366,-6.873105,-6.586178,-9.492472,-6.834958,4.842934,4.522615,8.402993,-8.761796,-1.486476,3.862372,6.732702,-9.723602,7.954921,-2.225546,9.410781,-4.223645,4.200483,-7.605082,-3.153785,-5.218831,1.561175,1.319572,6.928195,7.299923,-8.967410,-2.690274,9.592327,-9.874037,-6.086378,-6.322357,9.706713,7.706026,4.556926,-8.643771,-0.629061,6.515826,-6.772643,-9.158402,9.936451,-8.178439,-8.088668,4.343944,0.392254,-5.284517,-3.664381,9.112512,-8.389701,-8.569901,2.432501,9.455700,6.900230,6.219959,1.575746,-2.978551,6.779084,-9.314661,1.117884,8.013333,2.215454,-2.385639,-1.514906,-9.336588,-6.005816,0.269506,7.668426,5.400893,8.969245,4.366355,-1.683421,8.580015,-1.472263,-5.535788,-3.549992,-6.678431,5.683096,9.399368,-3.069204,-4.468913,7.592963,-5.677753,-5.236188,1.038605,1.373129,3.200382,-8.969514,2.222629,-6.238708,2.734768,-7.782112,8.728168,-4.269413,6.189156,-8.239577,-5.502644,1.445529,-2.762447,-5.586303,-6.645342,-3.647817,-2.623389,-8.442000,6.535751,7.925405,0.684209,-8.671821,2.001628,-5.551719,-2.955227,5.704972,-3.751356,8.948247,-8.684579,-0.148295,2.313302,-8.348125,-1.224823,-3.838410,-2.814294,-0.918214,9.343894,-6.188959,8.893157,2.483383,5.371263,-2.824194,-0.263716,-1.442043,-7.852449,9.011238,-1.340725,4.640765,-0.013266,-2.029010,0.613046,7.834616,-1.786259,9.594137,-4.177188,2.486357,1.628885,1.295714,9.274370,2.886855,-0.780950,-7.992590,-1.598587,4.932701,4.907747,3.374362,-7.542099,8.415601,-6.611337,6.338631,7.814441,-1.245002,-7.090652,-9.923842,-1.981797,3.299446,-0.601746,1.812797,7.583176,-7.696947,-2.369328,0.731004,-5.568359,1.241618,-4.326555,3.397743,6.572722,-5.250114,2.432800,-4.704239,-8.193658,-3.174944,6.104876,-7.112272,3.930852,4.165013,-6.073629,-4.970977,5.796659,-0.157915,-9.850889,5.903073,9.924028,-7.929631,3.885022,-5.645395,-4.572460,-4.792215,-6.394222,8.965774,9.185673,-5.908113,4.013629,-3.340294,-1.469542,-7.093379,-6.895020,6.316288,-3.277272,-5.516701,-5.756414,1.931363,-1.194606,-6.142248,-2.341532,-5.826409,-2.360064,-4.268582,3.607772,-6.238284,1.590339,8.351785,-7.781933,8.187742,-8.424378,-1.368493,8.877890,3.467960,-6.672599,-0.222292,5.417829,-6.745205,6.040823,-5.478029,-5.496018,0.992406,1.931811,6.993587,1.209445,-7.739802,6.561826,-0.588857,9.892245,-2.516341,1.219409,-3.154713,1.626471,-3.412849,1.052241,8.446353,5.238090,5.396610,2.485402,-3.376517,-6.893304,-6.159992,-1.134030,-7.690392,8.960026,2.604924,9.554532,9.612006,-9.047158,-4.100484,-9.242194,4.886896,-0.491127,8.243198,-0.911959,-6.866561,-6.061287,-6.945556,7.779323,-1.867886,7.494993,0.921760,-7.780876,4.938972,-1.719895,-0.207878,3.496892,-4.811702,4.668237,-2.953339,0.309603,-2.000901,4.338763,-7.484668,5.034434,1.765296,-0.119323,8.571101,-9.566650,-2.427402,-2.817746,9.771534,-5.919484,5.886364,8.793975,5.718017,-9.720537,0.387706,-4.010976,-7.865625,-2.302256,-5.293474,-4.546080,8.280559,-6.187965,9.420123,4.227106,6.750150,-6.094362,2.767394,-8.186521,8.893930,-9.423986,-1.484361,-1.350692,-1.642988,3.914454,-5.247503,-5.335257,-1.702120,6.952099,-4.719942,-1.350768,-0.348816,-8.250617,9.360913,8.883685,-8.579706,4.310689,-5.511054,8.409781,-1.547627,-3.613645,3.780264,4.514480,6.525858,6.008292,4.017811,5.525539,2.082628,8.864127,-6.797904,1.195979,-0.637101,-1.852910,-9.464111,7.031967,-9.740636,2.357033,-5.620567,4.656174,5.539368,2.232517,-8.801434,7.727576,0.683160,-5.790131,9.135125,-9.296061,-3.877397,-9.081797,-5.857776,-3.237195,6.270987,-2.862153,-7.330574,-9.551911,0.021096,-7.710378,-7.871055,2.138039,-4.479737,-5.076518,5.332357,4.803326,8.210306,-1.108814,1.540477,-8.381456,3.626487,-5.981330,-3.104991,2.056297,8.573522,8.648469,9.190895,4.243545,9.511147,4.898284,-8.506528,-3.868845,4.412435,6.021304,0.375832,6.237188,3.965983,-4.053658,-3.287926,4.197881,7.247966,-1.953234,8.953023,-3.988409,7.895563,4.054770,-7.090422,9.477566,-0.020503,-1.860742,-6.297310,-1.056481,-8.271715,1.740407,5.781262,-1.259056,9.020254,4.354129,-0.475934,2.004968,-6.410275,2.568878,8.145056,-0.103977,0.378521,3.268560,-7.603203,2.397938,4.470945,-7.000425,8.064861,7.892605,3.213362,0.259437,4.305724,6.486474,7.942454,-4.247996,1.606991,0.771755,-7.251994,-2.920232,-8.508832,0.434162,-1.889114,-7.678578,-3.668195,-4.148421,1.653133,4.949742,4.631059,-0.396841,8.830183,2.710511,5.468093,3.709200,6.326169,-0.987678,-9.556297,1.705186,6.663253,-5.120934,-6.436198,0.595842,3.841953,-0.537440,5.833515,3.174813,2.456640,2.001687,7.853253,-6.328053,-1.003859,8.503980,-8.807248,6.189780,-5.350705,3.745293,3.240537,-4.960635,1.952868,6.387480,2.305636,3.448042,4.715756,6.704935,-4.001606,3.200032,3.677256,4.348247,-9.737672,1.949866,-0.341893,1.379494,-6.222528,-1.247890,-4.827452,-3.351000,2.160540,-7.481977,8.445845,5.786738,-1.574882,-1.317436,2.060352,1.869536,8.949591,5.721540,-9.870607,5.966229,-5.275389,-8.653855,8.711745,2.630216,8.871733,5.654365,2.409422,-6.621127,0.343286,3.535548,-4.428338,-4.716131,-5.403930,2.281119,-5.957756,8.603336,3.482157,2.484084,-3.201498,2.528187,4.906581,-1.783997,5.360406,-2.098767,-2.922096,-2.092594,-5.788094,-0.791304,-8.332068,7.534227,-9.487588,2.333198,6.948536,-2.142459,0.245064,4.785927,-8.650803,-7.317963,-2.721036,-5.310887,-1.852709,8.815312,-4.457687,1.678899,2.865214,8.021429,5.259995,2.874658,-9.874374,4.824298,3.068901,-7.541536,-1.553820,-3.891483,1.879406,7.477123,6.021277,-8.189778,-1.914003,-6.557394,0.548524,8.554871,-0.751027,1.038499,-5.285499,0.212167,2.588854,9.054697,-2.767099,-9.526288,2.123010,8.035957,-4.969715,-8.079215,-9.752571,-5.130016,-7.787815,-7.328935,6.333707,3.175756,-7.073848,3.388544,-5.614853,-6.169361,-7.605020,-9.121905,-4.508793,-4.539497,-5.430260,-8.314699,2.828632,-2.094347,-7.506631,6.316486,-0.415559,-7.193651,9.771961,-4.494350,-5.730151,-2.539084,7.460441,-0.478556,-1.052816,-6.277262,3.739822,0.345139,4.709840,9.530085,3.841649,0.713764,9.328446,-3.289683,-4.276841,2.641129,6.081629,1.025642,-7.927449,8.699339,5.930111,6.113471,-2.281818,6.863598,-9.120112,2.027440,8.335069,6.922412,-9.408445,3.308560,-4.194960,-0.974655,-7.764302,-0.927664,1.078568,-0.588123,6.633126,-0.638042,-2.969849,-3.312975,-4.331160,-6.057877,-2.206666,-0.325420,-8.267964,1.630192,-5.328661,-2.358905,-7.835923,-8.497592,-4.402826,-0.259647,-1.270736,5.165815,-1.628744,-1.097101,-8.271919,3.596372,-2.655074,3.653422,6.944645,-6.008400,-0.068037,9.033856,3.714929,9.792431,-6.507645,-8.171203,-2.082064,1.481650,8.534305,0.369559,1.321202,-1.982638,-6.439904,-6.158840,8.645960,-5.795164,9.427800,-5.152071,5.487102,4.527573,0.895385,-8.388396,4.919067,-8.005241,5.090327,-5.100380,-5.867400,2.713050,7.305541,5.981784,-3.706837,-4.889944,3.119728,-1.660377,-0.962230,-3.579860,9.265962,5.723031,-0.536229,1.715996,3.253794,-3.536533,3.978268,1.604718,0.869477,7.891621,-9.906927,-6.340077,-8.443906,-3.816238,-6.069139,-9.966335,5.803491,-2.411317,8.603278,-8.457860,-7.722673,7.967460,-1.150788,-6.189809,2.294537,1.502080,1.950707,1.482172,-5.941521,1.304552,-5.665623,9.111723,8.836421,4.455230,5.381738,-8.032035,4.900774,0.661936,-1.995456,1.948692,1.738983,2.625934,-0.978772,-0.094641,-2.541156,2.474221,0.794589,-1.729743,0.768249,-3.959840,0.193367,-6.226899,-0.430717,-9.802527,9.839495,-4.564614,-9.757107,5.243053,-6.420818,-9.643583,8.817648,9.200870,-6.091357,-6.064104,6.530338,-7.437143,7.501345,1.873058,1.058395,-9.464135,-2.143047,7.076901,-0.457769,7.771252,1.969979,1.936167,-0.691435,4.074169,-6.709757,-6.125085,-3.979212,0.189555,5.538785,4.311648,-1.891262,0.511025,-4.704654,-6.357984,9.529838,3.998497,6.984237,-8.851665,2.272217,-7.242385,1.241155,-9.174402,8.916885,2.300826,-8.775392,3.920814,-9.128511,5.689977,-7.150331,7.752913,-9.301188,-6.169291,0.455809,5.035400,-3.331656,-3.838942,-9.733638,-8.405422,-6.620514,-7.220447,-7.881461,-5.353360,-6.500527,-8.520079,8.281576,-2.760871,-1.930443,7.923585,1.045455,1.636215,-0.775199,0.629759,-3.961325,-9.735051,7.169548,4.901503,5.913326,-4.550963,-7.144232,-3.681614,-5.173406,8.894459,3.675596,-8.268624,9.560070,-1.843418,-4.050453,-1.879458,7.461426,5.255221,1.915330,0.287689,-8.549715,-3.154195,-0.365836,-8.419151,4.208591,6.262343,-3.011138,-2.916180,7.953372,2.950563,-1.082808,-0.238005,1.896026,4.612816,3.606575,0.722346,-7.749934,-4.438575,-0.875915,-2.920147,-1.494551,-8.738474,8.440685,-3.222166,0.202523,-5.580348,0.686090,-1.369152,7.488555,2.443287,-6.530724,-0.791833,-1.485642,6.516542,-4.157910,-1.772436,7.290268,4.920735,9.679289,-5.548843,-3.380348,7.126408,5.337830,-3.617738,6.686612,8.381422,-3.773061,-5.530601,-6.298654,4.016496,6.399821,8.816743,-5.906525,-4.496345,-0.529017,-2.822305,0.343062,-9.019625,9.296862,5.288755,-9.886816,-2.821122,6.575066,1.142105,-2.535205,-0.389920,8.568017,9.227573,-3.921701,3.257253,-1.316206,7.925594,6.416219,-2.459287,-4.883130,5.944678,0.523262,8.848749,5.728357,-7.778461,6.726703,9.528650,1.574460,-9.505362,-1.242805,-6.495089,-0.380664,6.508445,-7.406562,-7.285989,2.581817,0.316026,-6.565248,9.859306,-3.964701,0.047171,-4.332585,-5.889614,4.791105,-9.621417,-6.971676,-4.327761,-5.566394,9.664509,-3.839137,-0.854544,5.262551,-1.241711,-2.938985,7.878737,1.628963,4.956457,-3.883638,3.015979,-0.296703,2.181266,3.703516,5.553284,8.646324,-6.907222,2.712100,-7.353376,-9.477714,-1.725149,-0.624192,1.885939,-3.789472,-9.988957,-3.859529,6.186330,8.123336,-3.572799,-9.372157,-1.764017,-6.886202,7.038031,2.260211,-1.998138,-1.789363,2.360260,1.801329,2.500329,7.716458,-9.624542,2.309180,-6.824865,-2.383719,9.094992,8.378721,1.159924,-4.251201,5.900568,-4.837915,-1.500257,-9.842880,6.336726,-1.486252,2.504283,-2.508929,-0.377930,9.214838,-5.076099,4.817961,1.440937,-6.976928,-6.309302,7.574526,-1.684936,9.884955,4.645957,-0.442038,6.733953,8.479068,-7.999166,-9.377969,3.601975,-0.579726,-7.936417,-1.342498,-4.524142,-7.735457,0.989156,-3.915158,8.637920,-0.916824,2.014459,7.469033,-8.528609,6.078812,9.270768,9.939520,-4.226878,-9.960255,2.955522,-5.810351,3.650430,-1.768168,-4.998583,4.170127,-8.838387,-2.604224,-6.199569,8.432101,-4.690867,-9.816324,-4.522043,0.878548,1.743794,2.649920,-2.040751,-6.371643,-4.374037,-9.417555,9.968761,-8.819898,-0.339402,4.397908,8.234742,2.726548,1.629229,5.039310,8.150832,-0.460783,-9.196498,8.535512,4.595677,5.877938,-0.968079,4.578655,4.150859,1.669341,-6.303547,-0.482449,6.092114,-8.103435,4.635472,2.896187,-2.280513,2.869941,6.794615,8.959135,-8.503061,1.367088,-5.510473,-7.780720,-7.060320,1.718872,-2.191132,-3.062964,9.925750,6.340948,-1.036509,6.204311,-2.350159,-4.266563,2.055176,1.893436,-9.272342,-9.750669,3.048174,-0.656559,7.301506,-9.969825,2.816152,2.130205,9.451473,-9.989013,9.209509,-0.988957,-9.075672,-9.366606,-0.275341,-7.213999,-8.989087,-0.886994,3.374165,2.055217,-7.363499,7.798479,4.948007,2.469607,9.890757,-6.025045,8.648317,-3.729228,2.118212,-5.711904,-3.177500,-4.046258,5.103505,-1.765674,2.463626,2.011640,-3.684564,-2.412734,-9.490833,-9.385761,4.051883,-3.516071,-4.043155,-9.886032,3.993238,1.948943,9.521042,-2.012413,-1.082584,-7.562207,6.248255,-0.220745,-8.742143,7.775289,-6.453876,-3.568484,-3.633144,-9.033821,2.480485,5.602962,5.237726,9.061269,-7.895286,-2.443706,-5.801823,1.778302,-7.354869,5.234100,-6.879590,3.807975,1.330598,-1.159937,0.953881,-3.960478,5.365353,6.931146,-3.046222,-6.074082,6.241666,-9.173192,6.932621,6.205682,2.168311,-1.005524,4.177447,-0.535656,3.249533,-3.209654,2.629773,3.108221,-0.540035,-5.864785,6.537092,-5.735293,6.684557,1.637477,-0.323406,-0.515625,3.846583,4.156090,2.695557,3.006121,-4.816535,4.958220,-9.796020,-1.604513,3.821925,-4.923742,2.862504,7.012179,2.935657,0.615760,2.707848,8.319422,-4.169947,6.407728,-0.817793,-6.599553,8.271833,-8.772164,4.320577,-4.400334,4.674266,6.742857,8.958668,6.354415,4.880812,-8.053970,6.465384,-6.488410,-8.594285,5.388360,-2.711913,4.449632,2.500150,-0.490255,8.472036,1.150275,2.136285,0.950853,-7.801738,3.718855,-3.611370,-1.511155,4.734452,3.791341,1.736581,-2.906241,7.061869,4.927528,3.995923,0.034880,-7.613795,-9.534731,0.097538,3.897135,-3.626382,-9.318027,-3.956160,-3.377524,5.197028,-1.250743,-3.874115,-9.574893,-3.424982,-4.998678,2.247198,-5.592218,1.805930,6.938287,1.661364,-9.839380,5.893168,-7.745085,6.243501,3.935745,-9.422691,7.884031,-0.621390,-3.497141,2.637867,0.331353,-2.981207,2.666529,-9.785060,3.731818,4.870161,8.992250,-2.515966,-0.468366,9.100521,-3.837417,9.413795,-1.108223,7.984244,0.340263,-8.014337,-6.380833,-2.851917,-8.589230,-9.640566,-1.527178,0.974905,5.312907,1.712523,4.116528,3.920565,8.540384,-3.454171,2.822295,-0.986481,-5.281050,7.052013,-0.181692,-5.773560,-5.412443,-7.422912,-4.600038,-3.987575,3.806257,-9.395618,-2.993661,-8.945025,-9.679882,-4.123827,-4.526514,-9.968813,9.513581,8.641901,-7.256472,-2.419623,1.335172,3.427504,-0.460160,7.924765,-3.412714,-5.979951,5.942423,-2.747013,6.749914,6.610767,3.995630,1.867888,6.116617,-5.039508,-7.586525,-7.863851,6.210879,-6.164051,-1.671610,2.119809,0.685161,9.110583,-0.724364,-7.275008,-2.554104,-5.990507,-7.896468,-0.552925,-8.403523,2.663967,2.013572,-4.868906,7.815102,-1.847041,-8.140160,-2.797757,-5.796001,7.572073,0.666524,-8.078602,8.413309,-7.026287,-3.948104,-9.089777,5.617329,-3.204114,0.447158,-9.982691,4.733596,-2.437629,-0.094062,5.669488,9.879614,-4.254448,-3.826297,-5.024373,4.044667,4.903099,-9.089025,-6.820960,6.056094,-5.273500,-9.823225,-7.601121,-6.800127,9.448926,3.211080,6.020808,3.367961,-0.636584,-1.411436,-8.895101,9.616084,-2.128548,9.534181,6.608129,3.647687,6.163530,-8.040124,4.615834,2.180831,-4.470621,1.327913,8.384096,3.201089,-4.000101,-5.156049,9.665837,5.909403,1.878657,-0.910188,7.789607,1.454177,9.118162,-6.904845,-5.482550,-6.869241,0.255047,-1.070623,-6.640721,-5.224109,3.935501,0.855019,-6.900953,-3.540284,6.327724,-6.501218,-1.049003,-7.136533,-2.602336,-5.457024,-5.931341,2.590181,-6.764191,-1.619823,4.404123,-8.222676,4.656234,3.184557,-4.376385,-0.181395,-4.325579,-1.949490,-7.334184,3.195272,-4.891097,8.909470,-8.678659,-0.904799,-9.681311,2.194488,9.097044,-6.865579,-0.649200,-7.565410,-5.713518,-8.965973,3.256836,9.813809,2.877803,-9.465583,0.753924,-1.202143,-1.191819,-1.278501,2.111545,-9.418242,0.803644,-2.759233,-6.508391,-6.601008,9.521654,-3.951853,-9.384651,-5.077734,-6.500680,4.595883,-7.745129,6.267020,-9.415565,0.381048,9.235506,-8.320127,-1.821742,-6.015977,9.474049,7.841978,-0.028931,0.850496,-7.695815,-5.232080,0.337247,-6.855396,-6.340164,-0.487111,4.119166,-0.891722,-1.652735,-4.988865,7.277779,9.165101,8.586111,9.731172,-3.598703,-1.012979,-9.852953,4.167105,-7.997271,5.095449,6.732439,6.303306,4.173297,-8.280919,-4.389228,6.187484], dtype = "float64")#candidate|1330|(1716,)|const|float64
call_1329 = relay.TupleGetItem(func_1279_call(relay.reshape(const_1330.astype('float64'), [12, 13, 11])), 1)
call_1331 = relay.TupleGetItem(func_1282_call(relay.reshape(const_1330.astype('float64'), [12, 13, 11])), 1)
bop_1332 = relay.multiply(uop_1323.astype('uint8'), const_1330.astype('uint8')) # shape=(10, 9, 1716)
var_1353 = relay.var("var_1353", dtype = "float64", shape = (2, 3, 6))#candidate|1353|(2, 3, 6)|var|float64
bop_1354 = relay.multiply(call_1329.astype('float64'), relay.reshape(var_1353.astype('float64'), relay.shape_of(call_1329))) # shape=(2, 3, 6)
bop_1357 = relay.multiply(call_1331.astype('float64'), relay.reshape(var_1353.astype('float64'), relay.shape_of(call_1331))) # shape=(2, 3, 6)
func_1279_call = mod.get_global_var('func_1279')
func_1282_call = mutated_mod.get_global_var('func_1282')
call_1360 = relay.TupleGetItem(func_1279_call(relay.reshape(const_1330.astype('float64'), [12, 13, 11])), 0)
call_1361 = relay.TupleGetItem(func_1282_call(relay.reshape(const_1330.astype('float64'), [12, 13, 11])), 0)
output = relay.Tuple([bop_1332,bop_1354,call_1360,])
output2 = relay.Tuple([bop_1332,bop_1357,call_1361,])
func_1362 = relay.Function([var_1322,var_1353,], output)
mod['func_1362'] = func_1362
mod = relay.transform.InferType()(mod)
var_1363 = relay.var("var_1363", dtype = "float32", shape = (10, 9, 1))#candidate|1363|(10, 9, 1)|var|float32
var_1364 = relay.var("var_1364", dtype = "float64", shape = (2, 3, 6))#candidate|1364|(2, 3, 6)|var|float64
output = func_1362(var_1363,var_1364,)
func_1365 = relay.Function([var_1363,var_1364,], output)
mutated_mod['func_1365'] = func_1365
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1624 = relay.const(9.435101, dtype = "float64")#candidate|1624|()|const|float64
var_1625 = relay.var("var_1625", dtype = "float64", shape = (5, 16, 8))#candidate|1625|(5, 16, 8)|var|float64
bop_1626 = relay.greater(const_1624.astype('bool'), var_1625.astype('bool')) # shape=(5, 16, 8)
output = relay.Tuple([bop_1626,])
output2 = relay.Tuple([bop_1626,])
func_1631 = relay.Function([var_1625,], output)
mod['func_1631'] = func_1631
mod = relay.transform.InferType()(mod)
mutated_mod['func_1631'] = func_1631
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1632 = relay.var("var_1632", dtype = "float64", shape = (5, 16, 8))#candidate|1632|(5, 16, 8)|var|float64
func_1631_call = mutated_mod.get_global_var('func_1631')
call_1633 = func_1631_call(var_1632)
output = call_1633
func_1634 = relay.Function([var_1632], output)
mutated_mod['func_1634'] = func_1634
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1698 = relay.var("var_1698", dtype = "uint8", shape = (12, 8, 1))#candidate|1698|(12, 8, 1)|var|uint8
var_1699 = relay.var("var_1699", dtype = "uint8", shape = (12, 8, 14))#candidate|1699|(12, 8, 14)|var|uint8
bop_1700 = relay.bitwise_and(var_1698.astype('uint8'), var_1699.astype('uint8')) # shape=(12, 8, 14)
func_197_call = mod.get_global_var('func_197')
func_200_call = mutated_mod.get_global_var('func_200')
var_1707 = relay.var("var_1707", dtype = "uint64", shape = (252,))#candidate|1707|(252,)|var|uint64
call_1706 = relay.TupleGetItem(func_197_call(relay.reshape(var_1707.astype('uint64'), [7, 4, 9])), 0)
call_1708 = relay.TupleGetItem(func_200_call(relay.reshape(var_1707.astype('uint64'), [7, 4, 9])), 0)
bop_1721 = relay.mod(var_1698.astype('float32'), bop_1700.astype('float32')) # shape=(12, 8, 14)
func_1362_call = mod.get_global_var('func_1362')
func_1365_call = mutated_mod.get_global_var('func_1365')
const_1733 = relay.const([3.546185,-4.109031,3.747981,2.403121,-2.475701,1.322396,-5.363571,-3.843256,2.939548,-2.145798,-2.702233,-2.150611,6.787282,-2.330882,4.100759,2.982610,4.025523,-8.480990,6.657148,-9.555409,6.251722,2.377631,2.734379,-1.203230,1.185181,-5.635520,-7.877629,8.033135,-0.309666,-3.549309,0.601974,-2.110552,2.523820,5.563560,-4.449337,5.155386,5.471285,-1.667161,-7.512566,-0.111767,3.464987,3.949279,8.278344,8.583627,3.187146,2.587486,-3.196201,7.584472,-9.548800,-7.913358,-2.468230,1.431023,7.685964,3.108805,-7.199784,6.073026,-7.114113,6.982955,5.787990,9.087614,-4.428021,4.528609,-8.109025,-4.306528,2.543978,-1.616267,-4.989552,0.037357,0.301007,4.812468,-8.305495,9.256568,-6.443064,-4.746402,3.610338,-2.052410,-2.938212,-5.785760,-3.959345,-6.389021,-9.645170,-3.472538,-5.341027,-0.950430,-3.066341,9.415885,-9.349603,1.592925,7.209306,-5.863309], dtype = "float32")#candidate|1733|(90,)|const|float32
const_1734 = relay.const([-9.416763,-3.734834,9.838020,-5.831010,4.778561,3.904411,-7.433527,8.340006,3.771828,-3.894529,7.507724,-7.547514,9.415372,-3.405523,7.757602,8.364356,2.596284,4.876474,-5.350157,-4.295095,-4.658943,2.074912,5.729767,2.872313,2.957971,-3.708348,6.320955,6.246416,1.509433,3.145990,-7.282273,-5.449618,-0.569399,-6.949863,1.435638,5.736324], dtype = "float64")#candidate|1734|(36,)|const|float64
call_1732 = relay.TupleGetItem(func_1362_call(relay.reshape(const_1733.astype('float32'), [10, 9, 1]), relay.reshape(const_1734.astype('float64'), [2, 3, 6]), ), 1)
call_1735 = relay.TupleGetItem(func_1365_call(relay.reshape(const_1733.astype('float32'), [10, 9, 1]), relay.reshape(const_1734.astype('float64'), [2, 3, 6]), ), 1)
func_841_call = mod.get_global_var('func_841')
func_843_call = mutated_mod.get_global_var('func_843')
call_1739 = relay.TupleGetItem(func_841_call(relay.reshape(call_1732.astype('float64'), [2, 3, 6])), 3)
call_1740 = relay.TupleGetItem(func_843_call(relay.reshape(call_1732.astype('float64'), [2, 3, 6])), 3)
output = relay.Tuple([call_1706,var_1707,bop_1721,call_1732,const_1733,const_1734,call_1739,])
output2 = relay.Tuple([call_1708,var_1707,bop_1721,call_1735,const_1733,const_1734,call_1740,])
func_1749 = relay.Function([var_1698,var_1699,var_1707,], output)
mod['func_1749'] = func_1749
mod = relay.transform.InferType()(mod)
var_1750 = relay.var("var_1750", dtype = "uint8", shape = (12, 8, 1))#candidate|1750|(12, 8, 1)|var|uint8
var_1751 = relay.var("var_1751", dtype = "uint8", shape = (12, 8, 14))#candidate|1751|(12, 8, 14)|var|uint8
var_1752 = relay.var("var_1752", dtype = "uint64", shape = (252,))#candidate|1752|(252,)|var|uint64
output = func_1749(var_1750,var_1751,var_1752,)
func_1753 = relay.Function([var_1750,var_1751,var_1752,], output)
mutated_mod['func_1753'] = func_1753
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1762 = relay.var("var_1762", dtype = "float32", shape = (11, 16, 12))#candidate|1762|(11, 16, 12)|var|float32
uop_1763 = relay.log2(var_1762.astype('float32')) # shape=(11, 16, 12)
bop_1767 = relay.left_shift(var_1762.astype('uint64'), relay.reshape(uop_1763.astype('uint64'), relay.shape_of(var_1762))) # shape=(11, 16, 12)
uop_1778 = relay.asin(uop_1763.astype('float32')) # shape=(11, 16, 12)
output = relay.Tuple([bop_1767,uop_1778,])
output2 = relay.Tuple([bop_1767,uop_1778,])
func_1780 = relay.Function([var_1762,], output)
mod['func_1780'] = func_1780
mod = relay.transform.InferType()(mod)
var_1781 = relay.var("var_1781", dtype = "float32", shape = (11, 16, 12))#candidate|1781|(11, 16, 12)|var|float32
output = func_1780(var_1781)
func_1782 = relay.Function([var_1781], output)
mutated_mod['func_1782'] = func_1782
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1972 = relay.const([[[-4.012217,9.791862,5.582514,-9.997411,0.652111,-5.979881,-4.456231,-8.657743,8.334690,-0.269407],[-0.303247,0.114831,6.204472,-4.418657,-0.289557,-5.009762,-6.769748,-2.365582,5.878891,2.813794],[-6.400640,2.092671,-1.533836,6.269229,0.016620,6.628570,-6.937111,2.508240,-0.427260,-5.137937],[-3.777255,-1.916004,-2.278870,-7.076195,0.929876,-1.436649,0.384864,-4.634841,9.382843,-4.354253],[6.276840,-7.856454,-1.192777,0.156312,3.496930,9.749989,-0.958069,-6.547365,0.748742,-8.282047],[-1.604973,-6.389764,5.619027,3.311535,-4.158849,7.472061,-1.367700,3.853688,-7.126913,7.261826]],[[-6.314955,1.159955,-2.575687,1.439989,-3.084482,-7.872941,-3.615025,0.985000,5.316061,-9.378747],[-6.456297,7.839936,4.428884,8.394834,-0.308476,9.589511,-4.049359,1.790794,-7.982894,-0.448756],[2.350578,-1.459232,5.035790,5.626422,-0.434439,-1.812832,5.720516,2.869967,-2.653919,-3.959331],[-4.872011,-5.738284,-6.928120,6.362563,-9.506254,-2.166254,2.053759,-5.347068,-8.894013,9.666250],[2.910896,9.365538,-0.559606,-8.405572,7.923751,6.673863,-5.616104,-6.641249,6.989794,-1.047537],[9.413246,9.670612,4.703080,2.088286,9.509859,-9.628069,-2.530616,-9.817122,1.935761,-5.289448]],[[4.504986,-4.099240,8.800770,7.345071,-8.860016,-9.894969,-9.341841,-9.170600,5.023947,0.047017],[1.255786,-2.544456,8.809506,-4.088835,8.801390,3.927676,-2.052844,-2.495360,5.340359,-4.315321],[1.679944,7.709317,3.139899,9.683432,-0.905211,0.851915,9.841399,7.236034,-0.840707,2.047240],[-3.568388,3.644406,-1.751729,-4.390458,5.189343,5.109632,-6.303714,-6.775576,7.494180,-5.704308],[-8.247547,3.464158,6.385074,-8.204436,-1.541186,9.645884,-6.610714,3.035096,3.439533,-6.655946],[-8.200040,2.483206,8.024876,-9.595532,-8.352202,-2.444633,3.576067,-3.380320,-0.587274,-7.792873]],[[-9.817031,-7.723568,-4.776621,0.917775,0.789688,-7.791201,3.646646,-0.558812,4.912057,8.501517],[-1.703525,-1.856711,0.517553,-8.900045,4.858253,-3.376128,1.398527,3.226197,-9.821448,7.805600],[-5.245893,-9.015544,7.751121,-5.956417,1.909412,-6.857367,1.463524,4.239607,7.992420,8.822376],[6.303166,-3.991794,-6.653389,-2.442132,-8.622913,-7.500966,-0.675943,5.667950,-7.289920,-7.716303],[5.555209,6.869248,-9.652990,-6.304696,-6.225439,-3.588385,6.614981,-1.733084,-8.960906,9.043863],[-7.481204,-4.076223,-4.093451,2.522064,0.666880,-9.479949,-3.106876,-1.875182,2.821598,2.819309]],[[-0.952653,9.857006,-5.418677,3.075843,-7.043665,-7.625927,-3.787382,3.950865,-9.798178,5.624139],[7.103427,-3.093535,8.226421,-7.270178,5.911290,1.696865,3.912171,-3.344611,-9.233427,7.002115],[-7.658807,-7.917209,-2.482185,9.915278,-0.800668,-2.066719,-3.251894,5.139801,5.127809,-3.459745],[0.015901,-0.837001,-3.307810,5.276733,-0.821339,-7.567816,-9.042665,-8.535611,-8.907894,8.714631],[-4.240056,-4.847164,-2.640740,1.426263,8.037832,9.976995,2.241265,-8.719390,-6.158714,-2.542760],[-4.346772,2.085758,9.720905,1.294273,3.335688,-0.766507,-7.469938,-7.357450,1.083295,5.380618]],[[-9.690879,6.227115,-8.563275,8.388939,8.469709,-6.360011,-3.660004,-8.343749,5.059119,-1.432639],[-9.839623,-2.796822,8.510429,-1.190001,-4.041951,-8.138699,-7.302186,-2.617075,4.704266,0.899385],[-6.567269,-2.575506,3.952358,-5.022999,-6.266005,4.434656,-9.863785,9.916674,-4.106166,-9.514212],[2.966982,1.118432,-9.000486,3.360403,-4.250623,4.413058,-5.933375,0.988474,-0.421403,-5.069950],[-4.024176,-1.931718,3.225288,9.715281,9.651766,2.940951,-7.438024,-9.860204,-7.636599,-3.198182],[-6.863830,2.965144,4.005629,-2.443977,3.301094,-9.612923,-7.590285,-0.135942,-0.847023,9.611929]],[[6.005204,9.888169,-9.503817,-2.599384,2.712677,6.134618,-0.411792,-6.631475,5.611783,-7.372032],[1.767251,0.878733,5.029976,4.600646,8.289007,6.726853,9.047675,-2.700190,-7.681931,1.587741],[0.528846,1.126874,7.681359,3.788833,-8.445221,9.713414,-5.783744,0.768923,-4.208436,6.928600],[5.036353,-5.610852,2.343060,-1.857369,-0.491267,5.354177,-1.801376,6.231955,-0.929760,0.531211],[-6.189008,-7.186290,1.330604,-0.374874,1.231136,5.428073,-1.772970,3.809741,-0.046022,9.351813],[3.453622,-7.904451,5.963810,-8.489769,-2.901232,-2.377276,-7.341222,5.847343,-3.386739,-0.409698]]], dtype = "float32")#candidate|1972|(7, 6, 10)|const|float32
uop_1973 = relay.tan(const_1972.astype('float32')) # shape=(7, 6, 10)
func_1749_call = mod.get_global_var('func_1749')
func_1753_call = mutated_mod.get_global_var('func_1753')
var_1998 = relay.var("var_1998", dtype = "uint8", shape = (96,))#candidate|1998|(96,)|var|uint8
var_1999 = relay.var("var_1999", dtype = "uint8", shape = (1344,))#candidate|1999|(1344,)|var|uint8
const_2000 = relay.const([-4,4,7,-3,-6,-2,9,6,-7,7,-6,2,3,1,5,-10,6,6,-9,4,6,-6,2,-10,-8,5,-4,-3,4,-10,-9,6,6,9,-3,-5,-10,5,2,3,4,3,-2,5,-2,3,-5,7,4,-9,8,7,-4,10,-10,5,10,2,-8,-7,1,-10,-2,-10,-2,5,-4,9,-5,-3,1,-8,9,2,8,6,1,8,4,10,-8,7,7,9,7,8,-3,1,-6,-7,-4,4,10,1,-1,-1,5,-2,-8,-6,-4,-4,-1,-8,10,3,-2,-1,10,-8,2,9,-9,-2,3,-1,2,-5,10,2,-3,-6,-2,7,9,-3,5,8,5,3,10,7,1,9,-7,3,-5,-5,4,-1,7,3,5,8,-5,-8,-6,9,10,1,8,-9,3,-2,-4,-1,6,-5,-7,-1,-5,-7,5,-10,-3,-4,5,6,5,-4,-10,2,-8,6,-9,8,-7,4,-3,9,-3,9,-4,3,-2,10,1,9,-6,-5,-4,-6,-7,5,3,6,-6,-4,-9,-2,6,-4,-2,6,-9,-3,-3,-6,-9,4,6,10,6,-4,2,5,-8,5,-1,-7,4,-3,-9,1,1,-2,5,1,-7,-4,1,-7,8,8,-4,2,-7,7,6,-5,-3,-6,-10,-10,9,4,-5,10,4,7,-3,8], dtype = "uint64")#candidate|2000|(252,)|const|uint64
call_1997 = relay.TupleGetItem(func_1749_call(relay.reshape(var_1998.astype('uint8'), [12, 8, 1]), relay.reshape(var_1999.astype('uint8'), [12, 8, 14]), relay.reshape(const_2000.astype('uint64'), [252,]), ), 0)
call_2001 = relay.TupleGetItem(func_1753_call(relay.reshape(var_1998.astype('uint8'), [12, 8, 1]), relay.reshape(var_1999.astype('uint8'), [12, 8, 14]), relay.reshape(const_2000.astype('uint64'), [252,]), ), 0)
uop_2008 = relay.asinh(uop_1973.astype('float32')) # shape=(7, 6, 10)
func_1631_call = mod.get_global_var('func_1631')
func_1634_call = mutated_mod.get_global_var('func_1634')
const_2016 = relay.const([-3.292385,9.365464,-5.482993,1.337850,0.349472,-9.267028,4.826063,0.977777,-0.624699,-1.957085,9.161713,-4.611904,-5.391879,4.639669,-8.426280,9.704626,8.837119,0.025333,-4.923208,-8.101510,8.184603,-9.419160,7.598138,-6.355876,2.145412,9.416194,9.477330,7.519359,1.044097,4.702521,-3.938293,1.771733,5.410949,4.579261,2.101481,9.946904,-9.355517,-2.606228,7.989580,8.763110,6.103309,-1.456386,-6.504824,-2.370211,-9.324018,2.378006,-1.570765,2.772407,8.605331,5.756431,-4.841034,6.274487,-9.445958,9.979751,-4.793763,-3.619181,4.297247,-0.668015,-2.371865,2.042777,-7.971590,3.334984,5.083324,-4.608248,5.155494,-8.016298,8.080371,-9.945107,6.806752,6.038878,-7.065815,5.036789,-9.458061,8.483183,-2.378659,-0.272639,-9.154377,8.815184,-9.138752,-9.356867,1.571092,6.126211,4.293136,-6.283223,5.365704,-2.123152,4.689150,6.513140,-7.774411,2.574128,-2.814026,2.752393,4.945864,-7.244811,8.377257,-3.658924,7.315308,4.226700,9.155767,0.061214,6.395816,6.727594,4.457433,4.395710,2.437253,-4.321077,-5.629258,-6.837400,-4.431666,2.498868,-1.626500,-7.997917,9.928340,-6.925619,4.040521,-5.549172,7.050045,-0.057850,-3.870143,-9.412582,-3.517412,3.536410,8.451926,-1.909204,3.016984,7.758806,2.368703,2.214229,3.158040,-5.388705,-7.324571,0.921222,-5.687115,-2.261167,5.137888,-0.397831,-2.796804,-8.180519,-8.245548,9.481360,-8.729912,5.500753,6.406259,9.533099,-6.224702,6.036003,-2.290269,-3.470338,-0.629183,9.842876,-5.591143,7.975690,-5.070080,-8.508332,1.028186,-9.693438,-2.685669,9.356213,-2.261436,-5.803987,-2.991309,1.111999,-9.112746,9.349426,1.273349,1.692610,9.404564,-0.418807,-2.324296,-1.278863,-0.692644,-9.076486,-7.609825,-2.677328,-0.968250,0.699910,3.268803,2.038847,-1.323757,-1.635478,3.480916,7.270423,2.076011,-7.739193,-3.478261,4.967648,1.596791,0.926597,4.156311,1.430730,-2.032589,8.691204,4.940295,-6.675279,5.113535,6.183232,-2.568143,9.306767,-6.729879,8.993176,-6.089185,-2.310082,-5.760345,7.264040,5.339684,0.585272,1.109308,4.810734,6.785631,3.767216,2.623531,-8.590293,4.379998,3.440037,5.586100,2.040234,4.373526,-9.054263,9.540391,5.442043,-3.922780,6.932289,5.115469,-4.687027,-7.547312,-5.831638,3.559540,0.704516,-3.076265,-1.173396,1.771975,-3.127097,4.331905,4.278353,-8.594534,-1.124103,9.992005,8.287996,-3.316628,-5.942272,2.598389,-5.202222,3.114784,2.833579,-5.499333,4.542551,8.461622,-8.353281,-4.668222,-0.711449,2.564485,2.853194,-2.930452,7.444501,0.402918,1.256224,-0.366798,7.214729,8.332131,-9.059878,-0.096529,6.566925,5.210655,6.455460,9.167630,-5.229594,-4.746325,-5.272005,-8.830713,1.538784,8.781373,-9.047284,8.513548,7.813299,7.434927,-8.823949,6.644271,2.968691,-9.884074,0.783350,-4.325978,-8.671407,2.799488,0.055841,-3.311968,8.783005,1.645898,-3.848719,6.959731,7.588018,5.610333,4.588100,-5.642567,5.999422,4.993728,-4.777239,-9.052108,-4.719162,7.779290,-9.381313,-0.877009,5.925333,8.118433,-5.177222,3.306758,4.310077,-8.538380,-2.802374,-7.067590,9.975985,-2.371781,6.490039,-9.353394,-5.558910,-1.679373,2.897280,8.280940,-7.039307,-6.002024,7.018717,1.434160,-5.367149,0.465412,-1.520881,-0.613680,6.019038,4.568924,-4.119032,-8.448100,-1.732962,6.119669,-4.031971,-7.570903,7.711422,0.857773,2.401943,-5.863519,-4.473123,-2.931093,6.808084,-2.791622,5.374699,6.681096,3.684223,-1.572716,-1.350671,-1.538608,-9.740397,-2.884195,2.477393,1.872465,-0.661649,6.265630,4.848352,7.269321,-9.287786,-4.291061,1.270141,5.134198,3.837823,-2.175816,7.886896,-4.375581,-8.311838,-9.263924,7.980933,-8.342206,8.210319,-5.666734,1.489375,9.310476,-5.383930,4.768292,5.789138,-2.397934,-6.725499,9.078779,8.104557,-6.902373,-2.649784,-3.745186,-8.204382,0.230225,-9.044048,-8.427929,0.249911,8.676490,5.798304,5.686428,-4.150208,-7.114585,2.374366,-7.074372,0.963552,-2.941172,5.603204,1.424642,0.332067,0.458042,7.728145,6.142109,9.104611,-3.448644,0.668926,-7.096216,8.561486,-7.603247,-5.907519,-6.468871,8.806100,2.235536,7.478838,-8.825152,7.678392,-7.104377,-1.647904,2.756914,-5.758444,-0.742065,5.138335,2.270958,6.966648,2.659397,4.473139,-7.564314,-0.381050,3.579719,-8.051450,-3.740298,-9.954526,-4.666099,-4.857323,-8.730739,0.663077,-8.498511,5.868026,-5.285309,-9.632148,-8.794751,8.742149,-8.395850,-9.395188,0.468194,-2.882363,-3.874727,-7.601292,0.001403,-3.700361,2.885290,-1.732413,3.346386,-8.623421,4.629489,2.622454,-0.337097,-0.835996,6.264605,-2.268446,3.859221,-2.490986,4.194625,6.921381,-9.447189,3.497379,8.509413,2.197702,7.125546,-4.015420,-6.556659,3.253445,-7.962280,-5.232964,-4.751098,-0.078452,1.755055,-6.412955,2.606149,9.156797,1.836918,-2.436848,-8.611347,9.853908,5.037831,-6.482964,-3.400211,-8.663214,4.419515,-0.091574,0.428830,-4.497872,0.789274,-3.632639,-6.732949,-4.745437,-9.437323,-4.371299,3.840493,-7.554705,-4.865181,-0.069850,-5.516138,4.779218,4.450467,-2.747911,1.678350,8.842070,7.463444,2.384517,1.368773,7.022026,-5.141590,5.567807,-7.815738,-3.569697,-3.919385,7.703853,2.230450,8.918764,-0.550776,-8.532821,-5.443479,-0.716246,0.462434,6.150565,-5.601115,-2.010385,-4.823944,-6.433003,8.380590,1.831123,5.140108,4.573395,-0.528433,-5.403009,-5.018556,-3.381976,-1.677645,-1.949483,-8.734774,1.805050,-9.859996,-5.486947,1.488493,8.636590,6.306305,-9.258767,2.151153,-4.583255,-5.531396,-7.520987,2.988498,9.111614,-4.404241,2.614603,5.505279,9.478846,-2.495384,2.693193,-8.758333,-9.349030,6.601879,-3.728771,-3.684340,-3.115130,8.428245,5.850455,6.717717,3.403872,-2.559585,2.571344,7.500216,-3.057295,-2.263705,0.149209,-5.134766,-0.588811,-8.976159,5.016483,9.793435,-2.290060,-4.070268,9.876782,-0.847729,3.224255,1.255002,5.627679,7.053527,-6.134484,9.772783,-5.917450,-3.644310,4.344084,-6.265980,8.469092,0.639921,-9.925115,-6.950703,2.248743,-4.318170,5.340798,0.870405,-9.542232,-7.785715,-2.525370,-5.403384,-1.164544,-4.432763,-1.898445,-9.437924,-5.234255,6.173410,6.085424,2.679194,-8.722078,-9.938804,2.758088,-0.527478,-9.672078,7.379635,-0.397234,-9.519197,-9.634025,3.940116,6.890593,-9.726945,7.744551,-0.859429,6.763161,4.393824,-4.189299,-1.627506,-0.260352,0.368937,2.702983,8.496087,5.128670,-5.896958,-4.006969,-6.238363,6.379890], dtype = "float64")#candidate|2016|(640,)|const|float64
call_2015 = relay.TupleGetItem(func_1631_call(relay.reshape(const_2016.astype('float64'), [5, 16, 8])), 0)
call_2017 = relay.TupleGetItem(func_1634_call(relay.reshape(const_2016.astype('float64'), [5, 16, 8])), 0)
func_1362_call = mod.get_global_var('func_1362')
func_1365_call = mutated_mod.get_global_var('func_1365')
const_2024 = relay.const([[-2.606554,4.190284,-3.328552,0.274403,9.980720,1.066231,6.256840,-2.544461,-9.828389,0.243681,-8.423262,-9.976463,7.021010,5.116481,-2.257534,-2.843851,2.617256,1.703293,3.831887,-0.193329,4.540256,5.905391,-3.884677,-2.458640,7.480319,4.464334,4.266483,1.396505,9.701773,-4.183906],[-2.808577,-5.487543,-3.357450,1.051463,-9.233806,-9.015695,7.855146,-8.249542,-8.787911,-1.815750,6.266388,1.651226,-7.775349,8.643035,6.944154,4.916918,-5.812034,-6.141147,-4.885620,5.785148,0.859263,-2.230095,8.059827,-0.239752,8.620558,2.341593,-0.646202,4.828565,6.728433,-1.673886],[5.079237,-3.551918,8.423705,-0.143698,-2.657852,8.763419,-9.282169,2.372745,-7.606814,1.137807,-3.643004,-1.324947,8.048315,7.884321,8.938743,9.527423,-4.103551,-2.053900,-1.721970,0.919331,-5.655585,8.408504,-1.228437,1.218351,-3.177622,-9.303436,6.985916,-9.267271,3.010066,-9.243877]], dtype = "float32")#candidate|2024|(3, 30)|const|float32
const_2025 = relay.const([4.871475,-0.670626,-7.762538,7.055313,-6.464961,5.552591,5.011256,4.397389,4.177339,-5.688561,7.693907,4.859448,4.413225,0.515546,-2.984365,-3.585125,-6.099242,1.082701,-7.023708,-0.870766,6.355510,6.145237,-6.384870,8.180553,-3.759947,-2.871499,-8.936899,-7.621597,2.356789,-2.578930,-4.394344,-2.972884,6.555389,-1.471560,-7.988894,-2.265566], dtype = "float64")#candidate|2025|(36,)|const|float64
call_2023 = relay.TupleGetItem(func_1362_call(relay.reshape(const_2024.astype('float32'), [10, 9, 1]), relay.reshape(const_2025.astype('float64'), [2, 3, 6]), ), 2)
call_2026 = relay.TupleGetItem(func_1365_call(relay.reshape(const_2024.astype('float32'), [10, 9, 1]), relay.reshape(const_2025.astype('float64'), [2, 3, 6]), ), 2)
output = relay.Tuple([call_1997,var_1998,var_1999,const_2000,uop_2008,call_2015,const_2016,call_2023,const_2024,const_2025,])
output2 = relay.Tuple([call_2001,var_1998,var_1999,const_2000,uop_2008,call_2017,const_2016,call_2026,const_2024,const_2025,])
func_2029 = relay.Function([var_1998,var_1999,], output)
mod['func_2029'] = func_2029
mod = relay.transform.InferType()(mod)
var_2030 = relay.var("var_2030", dtype = "uint8", shape = (96,))#candidate|2030|(96,)|var|uint8
var_2031 = relay.var("var_2031", dtype = "uint8", shape = (1344,))#candidate|2031|(1344,)|var|uint8
output = func_2029(var_2030,var_2031,)
func_2032 = relay.Function([var_2030,var_2031,], output)
mutated_mod['func_2032'] = func_2032
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2379 = relay.const([[[8.822613,-7.837633,-1.429567,-5.576385,-2.358930,3.469001,-4.691072],[-3.906150,-8.330243,-1.809388,-8.352533,-1.311675,3.405994,-0.342532],[0.589563,8.801094,-1.178106,-8.184774,4.034465,-9.048580,-8.575900],[4.054508,-3.350326,8.870280,3.389803,-4.171613,-5.702236,4.166943],[-7.558208,5.774139,8.386510,4.308953,-6.819424,8.531919,-2.863313]],[[1.991658,6.916338,4.402258,9.868124,-7.956697,-9.425764,-9.530975],[-0.118284,3.291069,5.419590,-5.123048,2.520250,-3.596819,0.553959],[-8.632211,4.984602,-4.839756,-8.104614,3.132637,-9.389678,-1.013351],[-9.530978,-1.732120,-7.760399,-8.902676,-1.565931,1.092491,-5.068309],[3.736019,7.686117,6.773081,-3.008395,4.536609,-7.176236,-0.951858]],[[-0.247363,8.712909,1.937144,1.003383,9.745220,9.931779,-6.779327],[-8.579327,-8.987463,6.496728,0.297606,-3.708762,-2.224483,-8.486421],[-1.572282,-3.628516,-5.305583,-0.728031,5.524783,8.031599,2.227670],[-4.316512,5.583169,-7.186012,-8.075275,4.505782,-5.257251,7.273818],[4.749314,2.953448,-9.704714,1.161947,-7.075485,-8.162347,0.316609]]], dtype = "float64")#candidate|2379|(3, 5, 7)|const|float64
uop_2380 = relay.sinh(const_2379.astype('float64')) # shape=(3, 5, 7)
func_1749_call = mod.get_global_var('func_1749')
func_1753_call = mutated_mod.get_global_var('func_1753')
var_2388 = relay.var("var_2388", dtype = "uint8", shape = (2, 48))#candidate|2388|(2, 48)|var|uint8
const_2389 = relay.const([10,-3,5,-6,-5,6,4,9,-10,-10,3,-5,-9,-4,-3,-4,-8,10,1,4,2,-7,-3,-10,5,4,-10,-3,-1,5,-1,10,6,-5,-6,4,8,-6,2,-3,-6,2,-7,6,-3,-5,3,-4,-3,-7,9,-9,-5,-7,1,-3,-9,6,2,-6,-6,-7,-6,8,-1,10,-8,-8,-4,-1,5,5,-1,-1,-4,5,-10,6,7,-5,9,-10,-4,2,-3,6,-7,1,-1,-10,-1,-4,-1,-7,6,-7,-9,4,7,-3,8,-8,2,2,4,-10,-9,8,-7,-6,-8,8,2,-1,5,-9,7,8,7,-3,-2,-5,-7,8,-7,5,-9,-3,4,-2,-9,-1,-6,-6,-1,-3,-9,-3,-1,-10,-7,-2,-9,-1,-8,-1,-4,7,-3,3,9,-8,-4,7,-4,-2,4,-9,-10,6,-3,-8,9,-7,6,8,-7,8,-7,-7,-5,-2,-4,2,5,-3,-4,5,6,-8,5,-2,4,4,-6,-2,9,-10,9,10,-9,-2,5,6,3,-6,2,1,-7,-9,5,3,-7,8,6,-10,2,-8,3,-8,10,3,9,9,-8,-8,10,-6,6,-5,-3,-5,-8,1,7,-8,-1,-8,-6,8,-5,-6,8,2,-5,6,3,-4,-6,-2,4,9,-2,10,6,-1,-2,6,6,-6,6,-2,5,9,1,-2,3,4,10,1,-10,7,-7,6,4,6,-3,-10,-4,-10,2,4,5,9,2,3,4,5,-4,7,-2,7,-3,6,6,6,9,-3,8,10,-4,3,3,-1,9,-5,3,10,9,-5,3,-2,3,-5,-7,-2,-9,1,3,1,10,-4,-5,8,2,10,-7,6,-8,-1,-7,8,-8,-2,-10,10,6,-2,-10,-7,-8,-6,9,-6,-4,-6,10,10,2,6,2,4,3,3,8,6,8,10,-5,-6,3,-1,-5,-2,3,-1,-5,-5,10,-2,9,-4,-9,4,-1,4,-4,9,-7,8,-9,5,5,2,9,4,1,4,-2,-5,-1,-9,3,-6,-6,-10,-3,-9,-8,-4,7,6,-5,8,-9,10,-2,-6,-6,-5,5,9,2,-8,1,7,1,-3,-2,-4,4,2,5,-10,8,-5,-3,-5,-4,-5,-7,2,4,2,8,10,2,-9,9,7,-7,2,-7,-4,2,-6,2,6,-5,5,-6,7,-4,-4,8,-2,-6,-6,3,-3,-1,-5,9,10,-2,9,-7,-8,1,-6,3,-3,-4,1,-8,2,7,2,-9,-2,-5,-10,5,5,-10,-6,-1,-2,-9,2,-1,-9,-2,-6,3,-3,-9,1,1,-4,1,3,-1,6,-2,-9,3,-3,9,9,7,10,-4,-4,9,5,-7,1,-5,-8,-5,8,-5,6,-10,5,4,-7,-6,-7,-8,6,-1,3,-6,-1,-10,-1,-1,10,-2,3,10,-6,1,-3,6,-4,6,4,-10,5,7,-6,4,2,-3,-2,6,-9,-3,-8,2,7,9,2,-8,9,2,4,3,2,2,9,1,-7,-10,5,-6,2,4,5,8,7,-9,-7,-6,8,-2,8,-5,-10,-9,-9,-7,-10,-2,5,7,1,5,-10,-7,-1,-3,4,3,5,1,6,-4,1,1,7,1,6,7,7,4,5,-6,-5,5,10,3,-3,4,2,-3,-5,-8,8,-9,-9,2,8,5,6,5,-3,4,5,2,-5,-8,-9,1,2,-4,-1,-7,6,-4,9,10,8,-9,-4,-10,-8,-9,-5,-8,-2,-7,1,-4,5,1,7,-7,-7,-8,9,-2,-6,-6,3,7,-6,-10,8,6,-4,-7,-8,6,3,8,1,1,-3,8,2,-3,10,7,-7,-3,-10,10,7,5,3,9,5,3,8,-6,-7,-9,10,6,9,-6,10,-8,5,4,-9,2,-5,-2,6,-1,6,-9,8,-4,5,-7,-8,-3,-8,-1,-1,1,-7,9,2,6,2,4,3,8,-10,6,-7,10,-5,4,-5,-2,-7,-6,2,9,-1,5,-3,-5,-5,-10,7,2,3,10,9,10,2,9,10,-8,-10,-7,6,-7,-1,5,-9,4,1,9,5,-9,7,-2,3,8,-5,-10,6,-1,-6,-7,-3,6,4,-7,-7,5,-2,3,-9,3,-7,-4,-10,-10,-1,-1,7,-2,5,7,4,7,10,-3,2,-2,9,-10,1,3,-6,-8,-2,-3,10,2,-5,-9,-1,-6,8,-10,4,-6,-1,-6,-5,-1,7,-5,-7,8,-8,-8,1,1,-2,6,2,-10,3,1,4,-5,9,5,-9,-9,2,-5,1,-4,-9,-10,4,-8,-10,5,3,3,1,8,-3,-8,-4,9,1,2,-8,4,4,1,1,6,-9,5,-8,-10,10,7,-3,1,2,3,-6,3,9,4,3,1,10,2,9,-9,1,4,2,5,1,-5,-7,6,4,5,9,-9,-3,7,10,2,-9,5,-2,-5,-10,-9,-9,-4,-5,10,6,3,8,-3,3,2,-10,3,-7,6,-9,8,-1,2,-3,10,-2,3,10,-2,1,-4,1,4,8,-9,6,6,2,-3,-10,8,-5,-4,7,7,10,-9,-1,-10,5,-7,-9,-10,8,-7,8,2,6,-8,2,9,9,4,10,-10,-5,8,7,-4,3,5,9,-5,-5,-6,-8,-10,2,8,8,-9,-4,-7,-4,8,-4,-9,4,6,4,-6,-8,3,10,1,1,9,8,-8,6,-10,-3,-3,-10,6,-2,10,9,-9,-7,5,2,-5,1,-1,-1,9,-1,-9,-3,6,-7,5,-2,-7,5,-6,7,7,7,6,10,-10,-10,-3,5,-10,8,10,-2,-8,10,-5,-9,6,-10,-2,10,3,-2,-4,-6,1,10,5,-10,-10,-10,9,5,3,-2,8,-8,1,-5,-9,9,-6,-1,2,5,4,-7,3,10,7,-3,-3,6,-3,9,6,3,-9,-3,8,5,1,4,-3,-2,-6,7,-7,3,8,5,-2,-5,5,-5,6,-4,3,-5,-2,-9,3,10,-3,-4,-7,-4,-7,3,7,-4,8,-1,6,7,4,-10,4,-7,-3,7,-9,-10,-9,8,-8,8,2,7,9,10,10,8,-8,-2,-7,-10,9,3,-2,4,5,6,-3,-7,-6,6,5,-3,-1,5,-3,2,-6,10,8,-7,-5,-10,5,3,-4,-1,-2,-3,7,-1,-6,2,8,1,-7,-8,-1,-5,6,10,-8,1,3,-5,4,3,-8,4,-9,3,3,-10,-2,3,-2,9,3,-10,-6,9,10,1,-6,-6,-10,-1,-2,9,6,3,-2,6,2,2,-10,7,-2,7,-3,-5,2,8,-8,6,-9,-10,1,8,1,-3,-2,10,-1,2,-10,9,-2,3,-5,4,10,-5,-9,8,3,-10,2,-9,-8,6,-7,-9,-3,-10,3,-10,-7,8,8,-5,-7,-7,6,-1,6,-2,4,5,6,-6,1,-4,1,-4,7,-1,8,-3,-4,1,-6,5,6,7,-7,-1,-9,7,-8,-8,-4,-9,-6,7,1,-10,-2,-6,4,10,-6,-10,-7,-4,1,2,-2,-8,-5,8,4,10,-2,-6,-2,10,9,-3,-10,-1,-3,-6,4,-5], dtype = "uint8")#candidate|2389|(1344,)|const|uint8
var_2390 = relay.var("var_2390", dtype = "uint64", shape = (252,))#candidate|2390|(252,)|var|uint64
call_2387 = relay.TupleGetItem(func_1749_call(relay.reshape(var_2388.astype('uint8'), [12, 8, 1]), relay.reshape(const_2389.astype('uint8'), [12, 8, 14]), relay.reshape(var_2390.astype('uint64'), [252,]), ), 1)
call_2391 = relay.TupleGetItem(func_1753_call(relay.reshape(var_2388.astype('uint8'), [12, 8, 1]), relay.reshape(const_2389.astype('uint8'), [12, 8, 14]), relay.reshape(var_2390.astype('uint64'), [252,]), ), 1)
func_1362_call = mod.get_global_var('func_1362')
func_1365_call = mutated_mod.get_global_var('func_1365')
var_2394 = relay.var("var_2394", dtype = "float32", shape = (90,))#candidate|2394|(90,)|var|float32
const_2395 = relay.const([4.239821,2.743977,4.131600,-4.812241,-5.995172,-6.178158,-5.785551,6.806881,-7.498758,-5.068972,3.167081,-9.665938,2.883636,4.613316,-1.446825,-9.090005,1.788496,-9.671991,-5.489114,4.510351,4.830622,-4.078048,-7.002746,1.726999,-4.069297,2.909735,-7.295882,-8.608935,-4.333191,-1.592470,-3.499126,-3.302411,-8.388640,-8.321915,7.146155,0.675261], dtype = "float64")#candidate|2395|(36,)|const|float64
call_2393 = relay.TupleGetItem(func_1362_call(relay.reshape(var_2394.astype('float32'), [10, 9, 1]), relay.reshape(const_2395.astype('float64'), [2, 3, 6]), ), 1)
call_2396 = relay.TupleGetItem(func_1365_call(relay.reshape(var_2394.astype('float32'), [10, 9, 1]), relay.reshape(const_2395.astype('float64'), [2, 3, 6]), ), 1)
uop_2401 = relay.acos(call_2393.astype('float64')) # shape=(2, 3, 6)
uop_2403 = relay.acos(call_2396.astype('float64')) # shape=(2, 3, 6)
output = relay.Tuple([uop_2380,call_2387,var_2388,const_2389,var_2390,var_2394,const_2395,uop_2401,])
output2 = relay.Tuple([uop_2380,call_2391,var_2388,const_2389,var_2390,var_2394,const_2395,uop_2403,])
func_2419 = relay.Function([var_2388,var_2390,var_2394,], output)
mod['func_2419'] = func_2419
mod = relay.transform.InferType()(mod)
mutated_mod['func_2419'] = func_2419
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2419_call = mutated_mod.get_global_var('func_2419')
var_2421 = relay.var("var_2421", dtype = "uint8", shape = (2, 48))#candidate|2421|(2, 48)|var|uint8
var_2422 = relay.var("var_2422", dtype = "uint64", shape = (252,))#candidate|2422|(252,)|var|uint64
var_2423 = relay.var("var_2423", dtype = "float32", shape = (90,))#candidate|2423|(90,)|var|float32
call_2420 = func_2419_call(var_2421,var_2422,var_2423,)
output = call_2420
func_2424 = relay.Function([var_2421,var_2422,var_2423,], output)
mutated_mod['func_2424'] = func_2424
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3494 = relay.var("var_3494", dtype = "int8", shape = (3, 2, 7))#candidate|3494|(3, 2, 7)|var|int8
var_3495 = relay.var("var_3495", dtype = "int8", shape = (3, 2, 7))#candidate|3495|(3, 2, 7)|var|int8
bop_3496 = relay.left_shift(var_3494.astype('int8'), relay.reshape(var_3495.astype('int8'), relay.shape_of(var_3494))) # shape=(3, 2, 7)
func_841_call = mod.get_global_var('func_841')
func_843_call = mutated_mod.get_global_var('func_843')
var_3507 = relay.var("var_3507", dtype = "float64", shape = (9, 4))#candidate|3507|(9, 4)|var|float64
call_3506 = relay.TupleGetItem(func_841_call(relay.reshape(var_3507.astype('float64'), [2, 3, 6])), 1)
call_3508 = relay.TupleGetItem(func_843_call(relay.reshape(var_3507.astype('float64'), [2, 3, 6])), 1)
func_841_call = mod.get_global_var('func_841')
func_843_call = mutated_mod.get_global_var('func_843')
call_3516 = relay.TupleGetItem(func_841_call(relay.reshape(var_3507.astype('float64'), [2, 3, 6])), 0)
call_3517 = relay.TupleGetItem(func_843_call(relay.reshape(var_3507.astype('float64'), [2, 3, 6])), 0)
bop_3528 = relay.logical_or(var_3495.astype('bool'), relay.reshape(bop_3496.astype('bool'), relay.shape_of(var_3495))) # shape=(3, 2, 7)
output = relay.Tuple([call_3506,var_3507,call_3516,bop_3528,])
output2 = relay.Tuple([call_3508,var_3507,call_3517,bop_3528,])
func_3534 = relay.Function([var_3494,var_3495,var_3507,], output)
mod['func_3534'] = func_3534
mod = relay.transform.InferType()(mod)
mutated_mod['func_3534'] = func_3534
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3534_call = mutated_mod.get_global_var('func_3534')
var_3536 = relay.var("var_3536", dtype = "int8", shape = (3, 2, 7))#candidate|3536|(3, 2, 7)|var|int8
var_3537 = relay.var("var_3537", dtype = "int8", shape = (3, 2, 7))#candidate|3537|(3, 2, 7)|var|int8
var_3538 = relay.var("var_3538", dtype = "float64", shape = (9, 4))#candidate|3538|(9, 4)|var|float64
call_3535 = func_3534_call(var_3536,var_3537,var_3538,)
output = call_3535
func_3539 = relay.Function([var_3536,var_3537,var_3538,], output)
mutated_mod['func_3539'] = func_3539
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3813 = relay.const(-3, dtype = "int32")#candidate|3813|()|const|int32
var_3814 = relay.var("var_3814", dtype = "int32", shape = (12, 14, 10))#candidate|3814|(12, 14, 10)|var|int32
bop_3815 = relay.less(const_3813.astype('bool'), var_3814.astype('bool')) # shape=(12, 14, 10)
output = bop_3815
output2 = bop_3815
func_3828 = relay.Function([var_3814,], output)
mod['func_3828'] = func_3828
mod = relay.transform.InferType()(mod)
var_3829 = relay.var("var_3829", dtype = "int32", shape = (12, 14, 10))#candidate|3829|(12, 14, 10)|var|int32
output = func_3828(var_3829)
func_3830 = relay.Function([var_3829], output)
mutated_mod['func_3830'] = func_3830
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3898 = relay.var("var_3898", dtype = "float32", shape = (8, 2, 8))#candidate|3898|(8, 2, 8)|var|float32
uop_3899 = relay.erf(var_3898.astype('float32')) # shape=(8, 2, 8)
func_1749_call = mod.get_global_var('func_1749')
func_1753_call = mutated_mod.get_global_var('func_1753')
var_3920 = relay.var("var_3920", dtype = "uint8", shape = (4, 24))#candidate|3920|(4, 24)|var|uint8
const_3921 = relay.const([7,5,9,-7,9,-8,6,5,-1,-9,2,-5,5,-5,-9,2,-6,-5,3,6,9,-7,1,-10,1,-9,-9,10,-8,-3,-5,2,-4,-6,8,8,-6,-2,-7,9,-10,-10,5,-4,-9,9,-4,5,9,-6,3,-4,-1,8,-9,-7,-7,9,-1,6,-2,1,-7,5,-8,-3,-8,-4,5,8,-8,2,-4,-9,4,2,-10,1,1,-5,10,2,5,7,-7,-4,10,2,9,-6,7,-10,-2,8,8,2,9,7,3,6,1,-5,-7,4,10,-10,9,-6,10,4,-7,-7,-4,2,2,-7,9,-3,-1,-4,-10,-8,2,-10,7,-10,4,-3,-4,6,-5,9,5,2,-1,-4,9,-10,5,-3,7,9,5,-10,6,-6,-6,-7,-7,4,-3,10,10,5,1,-8,-5,10,8,8,-5,-7,9,4,10,5,8,-7,7,-4,2,-7,-10,5,-8,-3,7,-5,-1,2,7,-7,3,3,-6,8,-10,4,-5,-7,-4,-7,-8,5,1,3,7,5,3,-1,5,-8,-6,3,3,-6,10,-6,-8,-10,-10,-9,2,-8,1,6,9,-1,6,8,-5,6,2,6,5,-10,-8,4,4,6,9,1,8,3,-9,-5,7,-2,3,8,-3,-5,-9,4,10,9,4,7,4,-5,-3,7,-2,-9,-8,-3,7,-3,-8,8,-7,-7,-8,2,-6,-7,9,-9,5,-6,-6,4,-10,10,4,-5,-6,1,-9,-8,-9,-4,-10,-9,-2,8,7,-3,-8,2,2,4,-2,-4,9,-3,-8,9,1,-5,-7,5,4,1,-3,-6,2,5,-7,2,4,8,-4,1,7,2,-6,7,5,2,1,-4,-7,5,-1,-2,4,-6,7,6,1,7,5,7,-10,-9,-6,3,6,-7,-7,-2,9,1,-5,-9,7,6,-9,-5,2,1,-8,3,-4,-3,-1,4,-2,5,4,-4,9,-4,-10,7,-4,4,-5,-8,-7,-2,3,-10,2,2,1,-8,3,9,2,9,-4,-10,8,-8,8,-5,7,-7,3,7,-5,-2,-9,-4,-7,-9,-6,10,4,10,1,4,-3,8,-10,7,10,-4,2,-1,2,10,6,1,1,3,-9,9,-8,7,2,1,-5,10,-4,-4,9,-2,5,5,7,5,5,-9,1,-10,9,-4,8,-2,4,-9,-10,-10,-6,-3,4,-10,-2,-1,4,5,-5,-10,2,5,7,-1,-5,-4,-5,-6,4,8,-7,-10,-2,-6,5,-10,-7,-5,1,1,-4,-8,1,7,-2,-1,6,1,10,5,-3,-2,-3,5,2,1,1,6,7,-5,-10,7,-2,6,-6,-5,7,1,8,-6,-10,-8,-8,2,2,4,8,10,10,9,-6,-6,6,4,1,-4,-7,-3,9,-10,-5,-4,6,10,-9,-3,-5,-9,4,5,-5,8,1,9,-7,2,-3,-4,10,4,-2,4,6,10,-7,5,4,-4,-7,9,-3,-5,-9,5,2,9,-8,3,6,-4,-8,5,-6,-1,3,6,-10,2,1,-9,9,-9,10,-1,-5,7,7,9,2,-4,-9,3,-3,-9,4,-9,5,-10,-10,-9,-9,10,2,-9,9,-1,4,-10,-1,-3,-6,-8,8,7,-2,-5,-5,-6,6,1,-9,-6,8,-1,-4,4,7,-2,-1,-5,5,3,-4,-9,4,-8,4,-7,-7,-3,-5,2,10,-8,-2,3,4,-1,5,-9,-10,4,-10,-10,9,9,-2,-7,4,3,-10,-5,-4,-3,4,10,8,2,4,4,-7,9,-3,-4,-2,2,5,6,-4,8,2,6,1,9,-1,-9,5,8,4,4,-10,10,4,5,-7,-7,-3,1,10,9,3,10,8,8,1,-8,6,8,-5,9,-8,-3,1,6,5,3,-5,-8,4,-7,-7,7,4,-5,-8,3,3,8,-3,5,2,-8,4,2,-3,2,5,-3,-3,-7,7,9,-9,3,-3,-10,10,-2,3,2,-4,-3,-2,-5,9,7,6,-5,5,5,-8,-3,-10,-3,-10,8,-7,-10,-9,7,-10,3,2,-9,6,5,6,2,-2,10,10,-3,-10,8,-1,-9,-1,5,10,10,-7,-2,2,10,1,-5,7,-7,-4,-8,2,-4,-10,8,-2,-6,5,1,-3,3,-2,-2,8,-7,8,7,-1,-5,-9,-10,3,-9,5,-6,-2,10,-9,2,4,2,-3,2,-10,-6,1,-2,-4,-1,-3,-5,9,-9,-10,8,8,-7,-8,6,7,-9,-8,3,1,10,4,-1,3,-1,-8,-8,-10,-9,4,-8,-9,-9,7,-10,-7,-6,-8,-4,-4,-5,-8,1,7,-8,-7,-2,-3,-7,5,1,-10,5,-4,8,-5,-2,-5,1,-5,3,-3,-10,7,9,5,-6,-8,2,9,10,4,-7,5,2,-6,1,1,-8,-9,10,8,10,6,-8,3,-9,9,9,-3,-3,-8,-10,8,-7,6,2,5,2,3,6,-9,4,-10,-6,-3,-4,3,-10,-6,7,-8,8,8,-5,-1,6,6,1,-2,1,-4,-6,2,10,-5,-10,8,8,-9,9,-4,1,7,-7,7,-4,-4,-9,-6,-4,10,6,1,3,7,-9,9,2,-10,-4,-5,-7,7,-5,9,-8,3,-4,-9,4,1,6,1,-3,-5,7,5,10,2,-7,-7,9,-10,-6,-1,3,-4,-1,9,6,-3,7,-7,-10,-6,-9,3,-5,-2,-1,1,-5,7,8,2,-1,8,-10,4,-5,8,-3,3,-5,-1,8,-2,-5,-2,4,-10,6,-2,-3,8,-7,2,-1,-2,-10,3,-2,-2,4,3,-8,3,-1,2,-1,9,-9,2,6,4,-6,3,-6,9,10,9,7,2,7,1,4,-8,3,-1,-5,-4,-6,8,-5,-1,1,5,-2,-5,2,-8,5,9,5,8,7,-10,-10,-4,-7,2,-6,5,3,-6,-5,-1,-10,10,-8,-9,10,-7,-10,-7,-5,5,3,9,10,-3,4,5,2,-1,-4,7,-10,6,5,-6,-2,4,-3,-3,2,9,-10,10,-2,4,3,-1,6,-2,-3,-5,-1,10,6,10,1,-4,4,3,-8,3,8,4,-3,7,7,1,-5,-6,8,8,3,-10,-9,4,-2,7,-1,4,-7,2,-4,-4,5,9,5,-3,-1,-5,8,8,-6,-7,-5,-1,-3,8,5,8,3,-3,7,7,9,-8,3,4,-10,8,-2,-10,1,4,-4,-8,-10,-7,5,4,-8,-8,10,-4,-2,6,1,-1,-5,-10,9,-6,-7,7,7,-5,-8,9,4,8,4,-2,-1,-7,9,-5,-5,1,-4,-5,4,7,4,7,7,-6,3,-8,-2,-1,4,3,-9,-5,-5,-3,10,-8,-5,-4,2,5,-7,-10,-10,2,-8,-5,-7,1,1,-10,3,-7,3,-3,9,-2,1,-7,-4,-4,2,-1,-10,-3,-6,1,-1,10,-10,-8,-10,-7,-2,-9,3,-9,5,-6,-2,-5,1,2,6,5,6,5,6,5,6,4,-1,4,5,-8,-10,7,-1,-3,-2,1,4,2,-9,7,4,7,-6,-9,3,-8,-2,-6,8,8,-8,8,6], dtype = "uint8")#candidate|3921|(1344,)|const|uint8
const_3922 = relay.const([[-7],[3],[6],[-5],[-8],[-2],[3],[9],[1],[8],[-2],[8],[-5],[6],[10],[-2],[1],[-5],[3],[-7],[-6],[9],[-5],[1],[-4],[7],[-5],[-5],[-5],[-6],[-10],[-3],[6],[-8],[-9],[2],[-4],[-3],[3],[-4],[-2],[-2],[-7],[9],[7],[8],[-4],[8],[9],[10],[3],[-1],[5],[5],[-9],[-5],[-1],[10],[-4],[-9],[-6],[8],[-7],[1],[6],[-4],[-3],[5],[3],[6],[-10],[-5],[-7],[-10],[-5],[2],[7],[-3],[-10],[-10],[6],[-5],[-3],[5],[-2],[-7],[3],[7],[6],[1],[-6],[7],[4],[-8],[4],[1],[4],[-9],[6],[-10],[-6],[-3],[9],[-8],[-7],[10],[-5],[7],[-5],[-4],[-2],[9],[10],[-4],[3],[-7],[3],[9],[-1],[-6],[-8],[-2],[-3],[2],[1],[-7],[2],[-1],[-5],[9],[1],[8],[-7],[3],[-3],[-4],[7],[-6],[2],[-8],[-6],[10],[-2],[-2],[-7],[8],[8],[-9],[10],[1],[-5],[6],[3],[-4],[-10],[10],[9],[5],[10],[-10],[-10],[-5],[4],[-1],[10],[-10],[1],[8],[-8],[8],[5],[5],[7],[-7],[9],[6],[-6],[8],[-8],[4],[3],[2],[-10],[5],[-5],[5],[1],[5],[-1],[-9],[-8],[10],[7],[-3],[6],[-3],[-1],[-4],[-7],[8],[-2],[-1],[-4],[4],[-9],[-6],[7],[2],[-5],[-1],[4],[2],[10],[8],[-5],[-1],[-1],[3],[-9],[9],[-8],[-4],[4],[-3],[2],[-9],[-7],[-4],[7],[6],[10],[8],[-10],[-5],[7],[-8],[10],[2],[-9],[-2],[-8],[-7],[-2],[-3],[5],[-10],[7],[-6],[-10],[-7],[-6],[2]], dtype = "uint64")#candidate|3922|(252, 1)|const|uint64
call_3919 = relay.TupleGetItem(func_1749_call(relay.reshape(var_3920.astype('uint8'), [12, 8, 1]), relay.reshape(const_3921.astype('uint8'), [12, 8, 14]), relay.reshape(const_3922.astype('uint64'), [252,]), ), 5)
call_3923 = relay.TupleGetItem(func_1753_call(relay.reshape(var_3920.astype('uint8'), [12, 8, 1]), relay.reshape(const_3921.astype('uint8'), [12, 8, 14]), relay.reshape(const_3922.astype('uint64'), [252,]), ), 5)
output = relay.Tuple([uop_3899,call_3919,var_3920,const_3921,const_3922,])
output2 = relay.Tuple([uop_3899,call_3923,var_3920,const_3921,const_3922,])
func_3928 = relay.Function([var_3898,var_3920,], output)
mod['func_3928'] = func_3928
mod = relay.transform.InferType()(mod)
var_3929 = relay.var("var_3929", dtype = "float32", shape = (8, 2, 8))#candidate|3929|(8, 2, 8)|var|float32
var_3930 = relay.var("var_3930", dtype = "uint8", shape = (4, 24))#candidate|3930|(4, 24)|var|uint8
output = func_3928(var_3929,var_3930,)
func_3931 = relay.Function([var_3929,var_3930,], output)
mutated_mod['func_3931'] = func_3931
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4142 = relay.var("var_4142", dtype = "int8", shape = (11, 4, 4))#candidate|4142|(11, 4, 4)|var|int8
var_4143 = relay.var("var_4143", dtype = "int8", shape = (11, 4, 4))#candidate|4143|(11, 4, 4)|var|int8
bop_4144 = relay.equal(var_4142.astype('bool'), relay.reshape(var_4143.astype('bool'), relay.shape_of(var_4142))) # shape=(11, 4, 4)
func_3928_call = mod.get_global_var('func_3928')
func_3931_call = mutated_mod.get_global_var('func_3931')
const_4153 = relay.const([3.062734,-7.899017,-7.648616,-3.813999,7.013465,-4.489833,5.260580,-5.621488,2.613740,-7.355392,0.324352,4.911889,-5.695640,0.263833,9.649029,-6.653929,1.838216,-0.338251,7.416722,-4.755006,0.124398,-1.121997,8.572744,9.845463,-1.844928,-2.974761,-0.344881,9.211357,2.709300,-6.989358,-7.203719,3.386787,-1.078257,2.797418,-2.175425,-3.677868,5.756418,-7.692243,3.484313,6.143689,-2.928511,-7.486855,5.115941,6.050048,-0.375380,9.458736,3.815883,-4.297679,-5.588809,6.622963,-5.624119,5.559610,-2.092500,-8.639286,3.476024,-4.822687,-2.986154,-4.854956,-1.215210,-6.975970,8.153159,1.487446,-1.091440,-9.964591,8.847489,2.322354,1.652083,5.126526,0.348971,-5.155889,1.167724,-7.512491,1.454103,1.007693,-1.706467,-9.065689,4.803022,-6.603089,-4.567133,9.089037,-6.502437,5.636631,4.037561,-5.306975,-4.177637,8.396679,9.501661,0.243973,-6.111802,-5.064929,-9.875474,-1.043005,-7.989232,2.038001,-6.291860,-1.676433,-1.788899,-5.376188,6.359131,-0.504595,5.003498,8.255905,5.860059,5.392828,-2.172876,-7.568391,6.065638,-1.591678,-7.579865,-1.590108,-4.745978,3.083365,-4.558115,-3.740205,-4.652215,4.066121,-6.466430,-9.037705,-5.466245,6.401726,1.832553,6.535004,0.312845,-7.152020,-2.722565,-6.542975,-7.393827,9.551032], dtype = "float32")#candidate|4153|(128,)|const|float32
const_4154 = relay.const([[-8,-4,5,4,10,8,-6,8,-1,-8,-8,-8,7,7,-7,-2,1,-2,4,6,8,5,2,7,-8,10,4,-10,-9,7,-1,-1,-5,-3,-6,10,2,-10,-9,-8,4,2,-7,8,-9,-1,2,-5],[4,-3,-6,8,8,-4,7,-3,9,10,8,-3,-1,-7,6,-1,9,-5,-8,-3,-1,3,-9,10,2,6,-7,6,3,4,-3,-2,-6,-7,9,1,9,7,-4,7,-8,7,2,-7,5,6,4,-2]], dtype = "uint8")#candidate|4154|(2, 48)|const|uint8
call_4152 = relay.TupleGetItem(func_3928_call(relay.reshape(const_4153.astype('float32'), [8, 2, 8]), relay.reshape(const_4154.astype('uint8'), [4, 24]), ), 1)
call_4155 = relay.TupleGetItem(func_3931_call(relay.reshape(const_4153.astype('float32'), [8, 2, 8]), relay.reshape(const_4154.astype('uint8'), [4, 24]), ), 1)
output = relay.Tuple([bop_4144,call_4152,const_4153,const_4154,])
output2 = relay.Tuple([bop_4144,call_4155,const_4153,const_4154,])
func_4157 = relay.Function([var_4142,var_4143,], output)
mod['func_4157'] = func_4157
mod = relay.transform.InferType()(mod)
mutated_mod['func_4157'] = func_4157
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4157_call = mutated_mod.get_global_var('func_4157')
var_4159 = relay.var("var_4159", dtype = "int8", shape = (11, 4, 4))#candidate|4159|(11, 4, 4)|var|int8
var_4160 = relay.var("var_4160", dtype = "int8", shape = (11, 4, 4))#candidate|4160|(11, 4, 4)|var|int8
call_4158 = func_4157_call(var_4159,var_4160,)
output = call_4158
func_4161 = relay.Function([var_4159,var_4160,], output)
mutated_mod['func_4161'] = func_4161
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4306 = relay.var("var_4306", dtype = "float32", shape = (14, 16, 12))#candidate|4306|(14, 16, 12)|var|float32
uop_4307 = relay.sqrt(var_4306.astype('float32')) # shape=(14, 16, 12)
bop_4309 = relay.add(var_4306.astype('int16'), relay.reshape(uop_4307.astype('int16'), relay.shape_of(var_4306))) # shape=(14, 16, 12)
func_3928_call = mod.get_global_var('func_3928')
func_3931_call = mutated_mod.get_global_var('func_3931')
var_4319 = relay.var("var_4319", dtype = "float32", shape = (4, 32))#candidate|4319|(4, 32)|var|float32
const_4320 = relay.const([7,-1,-1,-5,-6,-6,-6,-2,-3,-7,-4,1,-4,4,-10,-1,-5,5,-1,-10,1,-10,1,9,6,4,2,6,10,4,-9,6,-7,9,3,9,-5,1,2,-2,8,6,5,-6,4,-6,4,6,-3,1,4,2,-10,-7,-4,1,-9,4,1,-9,-7,-9,-5,4,1,7,-7,7,3,10,-5,1,-7,5,4,-4,-7,4,9,-3,5,-6,-9,2,6,-9,-4,-2,7,1,-9,4,10,-9,10,-1], dtype = "uint8")#candidate|4320|(96,)|const|uint8
call_4318 = relay.TupleGetItem(func_3928_call(relay.reshape(var_4319.astype('float32'), [8, 2, 8]), relay.reshape(const_4320.astype('uint8'), [4, 24]), ), 0)
call_4321 = relay.TupleGetItem(func_3931_call(relay.reshape(var_4319.astype('float32'), [8, 2, 8]), relay.reshape(const_4320.astype('uint8'), [4, 24]), ), 0)
uop_4340 = relay.cos(bop_4309.astype('float64')) # shape=(14, 16, 12)
func_976_call = mod.get_global_var('func_976')
func_979_call = mutated_mod.get_global_var('func_979')
var_4349 = relay.var("var_4349", dtype = "uint64", shape = ())#candidate|4349|()|var|uint64
var_4350 = relay.var("var_4350", dtype = "uint64", shape = (180,))#candidate|4350|(180,)|var|uint64
call_4348 = func_976_call(relay.reshape(var_4349.astype('uint64'), []), relay.reshape(var_4350.astype('uint64'), [5, 9, 4]), )
call_4351 = func_976_call(relay.reshape(var_4349.astype('uint64'), []), relay.reshape(var_4350.astype('uint64'), [5, 9, 4]), )
func_3828_call = mod.get_global_var('func_3828')
func_3830_call = mutated_mod.get_global_var('func_3830')
var_4354 = relay.var("var_4354", dtype = "int32", shape = (1680,))#candidate|4354|(1680,)|var|int32
call_4353 = func_3828_call(relay.reshape(var_4354.astype('int32'), [12, 14, 10]))
call_4355 = func_3828_call(relay.reshape(var_4354.astype('int32'), [12, 14, 10]))
func_4157_call = mod.get_global_var('func_4157')
func_4161_call = mutated_mod.get_global_var('func_4161')
var_4371 = relay.var("var_4371", dtype = "int8", shape = (176,))#candidate|4371|(176,)|var|int8
call_4370 = relay.TupleGetItem(func_4157_call(relay.reshape(var_4371.astype('int8'), [11, 4, 4]), relay.reshape(var_4371.astype('int8'), [11, 4, 4]), ), 1)
call_4372 = relay.TupleGetItem(func_4161_call(relay.reshape(var_4371.astype('int8'), [11, 4, 4]), relay.reshape(var_4371.astype('int8'), [11, 4, 4]), ), 1)
output = relay.Tuple([call_4318,var_4319,const_4320,uop_4340,call_4348,var_4349,var_4350,call_4353,var_4354,call_4370,var_4371,])
output2 = relay.Tuple([call_4321,var_4319,const_4320,uop_4340,call_4351,var_4349,var_4350,call_4355,var_4354,call_4372,var_4371,])
func_4380 = relay.Function([var_4306,var_4319,var_4349,var_4350,var_4354,var_4371,], output)
mod['func_4380'] = func_4380
mod = relay.transform.InferType()(mod)
var_4381 = relay.var("var_4381", dtype = "float32", shape = (14, 16, 12))#candidate|4381|(14, 16, 12)|var|float32
var_4382 = relay.var("var_4382", dtype = "float32", shape = (4, 32))#candidate|4382|(4, 32)|var|float32
var_4383 = relay.var("var_4383", dtype = "uint64", shape = ())#candidate|4383|()|var|uint64
var_4384 = relay.var("var_4384", dtype = "uint64", shape = (180,))#candidate|4384|(180,)|var|uint64
var_4385 = relay.var("var_4385", dtype = "int32", shape = (1680,))#candidate|4385|(1680,)|var|int32
var_4386 = relay.var("var_4386", dtype = "int8", shape = (176,))#candidate|4386|(176,)|var|int8
output = func_4380(var_4381,var_4382,var_4383,var_4384,var_4385,var_4386,)
func_4387 = relay.Function([var_4381,var_4382,var_4383,var_4384,var_4385,var_4386,], output)
mutated_mod['func_4387'] = func_4387
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4690 = relay.var("var_4690", dtype = "float64", shape = (10, 8, 7))#candidate|4690|(10, 8, 7)|var|float64
var_4691 = relay.var("var_4691", dtype = "float64", shape = (10, 8, 7))#candidate|4691|(10, 8, 7)|var|float64
bop_4692 = relay.mod(var_4690.astype('float64'), relay.reshape(var_4691.astype('float64'), relay.shape_of(var_4690))) # shape=(10, 8, 7)
output = relay.Tuple([bop_4692,])
output2 = relay.Tuple([bop_4692,])
func_4703 = relay.Function([var_4690,var_4691,], output)
mod['func_4703'] = func_4703
mod = relay.transform.InferType()(mod)
var_4704 = relay.var("var_4704", dtype = "float64", shape = (10, 8, 7))#candidate|4704|(10, 8, 7)|var|float64
var_4705 = relay.var("var_4705", dtype = "float64", shape = (10, 8, 7))#candidate|4705|(10, 8, 7)|var|float64
output = func_4703(var_4704,var_4705,)
func_4706 = relay.Function([var_4704,var_4705,], output)
mutated_mod['func_4706'] = func_4706
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5507 = relay.var("var_5507", dtype = "int8", shape = ())#candidate|5507|()|var|int8
var_5508 = relay.var("var_5508", dtype = "int8", shape = (5, 6, 16))#candidate|5508|(5, 6, 16)|var|int8
bop_5509 = relay.bitwise_and(var_5507.astype('int8'), var_5508.astype('int8')) # shape=(5, 6, 16)
output = bop_5509
output2 = bop_5509
func_5537 = relay.Function([var_5507,var_5508,], output)
mod['func_5537'] = func_5537
mod = relay.transform.InferType()(mod)
var_5538 = relay.var("var_5538", dtype = "int8", shape = ())#candidate|5538|()|var|int8
var_5539 = relay.var("var_5539", dtype = "int8", shape = (5, 6, 16))#candidate|5539|(5, 6, 16)|var|int8
output = func_5537(var_5538,var_5539,)
func_5540 = relay.Function([var_5538,var_5539,], output)
mutated_mod['func_5540'] = func_5540
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5566 = relay.var("var_5566", dtype = "int8", shape = (3, 15, 4))#candidate|5566|(3, 15, 4)|var|int8
var_5567 = relay.var("var_5567", dtype = "int8", shape = (3, 15, 4))#candidate|5567|(3, 15, 4)|var|int8
bop_5568 = relay.bitwise_and(var_5566.astype('int8'), relay.reshape(var_5567.astype('int8'), relay.shape_of(var_5566))) # shape=(3, 15, 4)
output = relay.Tuple([bop_5568,])
output2 = relay.Tuple([bop_5568,])
func_5572 = relay.Function([var_5566,var_5567,], output)
mod['func_5572'] = func_5572
mod = relay.transform.InferType()(mod)
mutated_mod['func_5572'] = func_5572
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5572_call = mutated_mod.get_global_var('func_5572')
var_5574 = relay.var("var_5574", dtype = "int8", shape = (3, 15, 4))#candidate|5574|(3, 15, 4)|var|int8
var_5575 = relay.var("var_5575", dtype = "int8", shape = (3, 15, 4))#candidate|5575|(3, 15, 4)|var|int8
call_5573 = func_5572_call(var_5574,var_5575,)
output = call_5573
func_5576 = relay.Function([var_5574,var_5575,], output)
mutated_mod['func_5576'] = func_5576
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5939 = relay.var("var_5939", dtype = "float32", shape = (7, 11, 15))#candidate|5939|(7, 11, 15)|var|float32
uop_5940 = relay.atan(var_5939.astype('float32')) # shape=(7, 11, 15)
output = uop_5940
output2 = uop_5940
func_5960 = relay.Function([var_5939,], output)
mod['func_5960'] = func_5960
mod = relay.transform.InferType()(mod)
var_5961 = relay.var("var_5961", dtype = "float32", shape = (7, 11, 15))#candidate|5961|(7, 11, 15)|var|float32
output = func_5960(var_5961)
func_5962 = relay.Function([var_5961], output)
mutated_mod['func_5962'] = func_5962
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6098 = relay.var("var_6098", dtype = "bool", shape = (6, 16, 1))#candidate|6098|(6, 16, 1)|var|bool
const_6099 = relay.const([[[True,False,True,True,True,False,False],[True,True,False,False,False,False,True],[True,False,True,True,False,True,True],[False,True,True,False,False,False,False],[True,True,True,True,True,False,False],[False,True,False,True,False,False,False],[False,True,True,False,True,False,True],[False,True,False,False,False,False,False],[True,False,True,False,True,False,True],[True,False,True,True,True,True,True],[False,False,True,False,True,False,False],[False,False,True,False,False,False,True],[False,False,True,True,False,False,False],[False,False,True,True,True,True,False],[False,False,True,False,False,False,True],[True,False,True,False,True,True,False]],[[True,True,True,True,True,True,True],[True,True,True,True,False,False,False],[True,True,True,True,False,False,False],[False,True,True,False,True,False,False],[False,True,False,True,False,False,True],[True,True,False,True,False,True,False],[False,True,True,True,True,False,True],[True,False,True,True,True,False,True],[True,False,True,True,False,False,True],[False,False,False,False,True,False,True],[True,True,True,False,False,False,True],[True,False,False,False,True,True,False],[False,True,True,True,False,True,True],[False,True,False,False,True,False,False],[False,False,True,True,True,True,True],[True,True,True,True,False,True,True]],[[True,True,True,True,False,True,True],[False,False,False,False,True,False,True],[False,False,True,False,False,True,True],[True,False,True,False,True,False,True],[True,True,True,False,False,False,False],[True,True,True,True,True,True,False],[False,True,True,False,True,False,False],[True,True,False,False,True,True,False],[True,True,False,False,False,True,True],[True,True,True,False,True,False,True],[False,True,True,True,False,False,True],[True,True,False,False,False,False,False],[False,True,False,True,False,False,True],[False,True,False,True,True,True,True],[False,True,True,False,False,False,True],[False,True,True,True,False,True,True]],[[False,True,True,False,False,False,True],[False,False,True,False,False,True,False],[True,True,True,True,False,False,True],[True,True,True,True,False,False,True],[False,True,False,False,False,False,True],[False,False,False,False,False,True,False],[False,True,False,True,False,False,False],[False,False,False,True,True,True,True],[True,True,False,True,False,False,False],[False,False,True,False,False,True,False],[True,True,False,True,False,True,True],[False,True,True,False,True,True,False],[True,False,True,False,True,True,False],[True,True,False,True,False,True,True],[False,False,True,True,True,False,True],[True,True,False,True,False,True,False]],[[True,True,False,False,True,True,True],[True,False,True,False,True,True,False],[True,False,True,False,False,True,True],[False,True,False,True,False,False,True],[False,False,True,True,True,True,False],[False,False,True,True,False,False,False],[True,True,False,True,True,True,True],[True,False,False,True,True,True,True],[True,True,False,True,True,True,True],[False,False,True,True,False,False,False],[False,False,False,True,True,False,False],[False,False,True,True,False,False,True],[False,True,False,True,False,False,True],[False,True,False,False,True,True,True],[True,True,False,True,True,False,False],[False,True,True,False,True,False,True]],[[True,False,False,True,True,False,True],[False,False,False,False,True,False,False],[False,True,False,True,False,False,False],[True,False,True,True,True,False,True],[False,False,False,False,True,True,True],[False,True,False,False,False,False,False],[True,False,True,False,True,True,True],[True,True,False,False,True,True,True],[True,True,False,True,True,True,True],[False,False,True,True,True,True,True],[True,False,False,True,False,True,True],[False,False,False,True,True,False,False],[False,True,True,True,False,False,True],[False,True,False,False,True,True,True],[False,True,True,False,True,True,True],[True,False,False,True,False,False,True]]], dtype = "bool")#candidate|6099|(6, 16, 7)|const|bool
bop_6100 = relay.logical_or(var_6098.astype('bool'), const_6099.astype('bool')) # shape=(6, 16, 7)
bop_6103 = relay.multiply(bop_6100.astype('int32'), relay.reshape(const_6099.astype('int32'), relay.shape_of(bop_6100))) # shape=(6, 16, 7)
func_4703_call = mod.get_global_var('func_4703')
func_4706_call = mutated_mod.get_global_var('func_4706')
var_6108 = relay.var("var_6108", dtype = "float64", shape = (560,))#candidate|6108|(560,)|var|float64
call_6107 = relay.TupleGetItem(func_4703_call(relay.reshape(var_6108.astype('float64'), [10, 8, 7]), relay.reshape(var_6108.astype('float64'), [10, 8, 7]), ), 0)
call_6109 = relay.TupleGetItem(func_4706_call(relay.reshape(var_6108.astype('float64'), [10, 8, 7]), relay.reshape(var_6108.astype('float64'), [10, 8, 7]), ), 0)
output = relay.Tuple([bop_6103,call_6107,var_6108,])
output2 = relay.Tuple([bop_6103,call_6109,var_6108,])
func_6130 = relay.Function([var_6098,var_6108,], output)
mod['func_6130'] = func_6130
mod = relay.transform.InferType()(mod)
var_6131 = relay.var("var_6131", dtype = "bool", shape = (6, 16, 1))#candidate|6131|(6, 16, 1)|var|bool
var_6132 = relay.var("var_6132", dtype = "float64", shape = (560,))#candidate|6132|(560,)|var|float64
output = func_6130(var_6131,var_6132,)
func_6133 = relay.Function([var_6131,var_6132,], output)
mutated_mod['func_6133'] = func_6133
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6335 = relay.var("var_6335", dtype = "float64", shape = (11, 3, 13))#candidate|6335|(11, 3, 13)|var|float64
uop_6336 = relay.acos(var_6335.astype('float64')) # shape=(11, 3, 13)
func_1279_call = mod.get_global_var('func_1279')
func_1282_call = mutated_mod.get_global_var('func_1282')
const_6342 = relay.const([-9.582296,-5.099945,6.828620,2.556879,-3.075948,-7.779792,-6.302429,9.763403,1.892324,-5.758460,-8.187106,-2.539931,7.019626,-9.783963,-6.180129,4.076376,2.657057,-9.339306,6.167545,-7.588133,-4.601661,8.664619,-1.299533,2.739083,-3.756874,5.366938,9.401879,9.364253,-7.326730,3.423362,5.999731,5.558455,-6.313990,5.977319,-5.118343,3.039037,-4.717997,6.927958,-9.162383,-0.179420,-7.638236,2.175338,0.511302,-6.798072,-8.414360,-1.877702,9.331190,-0.351604,3.437222,8.967266,6.078403,-8.688690,7.965790,-8.112001,5.441969,-1.828961,-2.822963,3.529478,-3.059910,0.746549,-5.839058,-6.344605,-0.372175,8.481119,6.160582,8.743197,-3.680008,-0.370459,0.096604,5.600193,-3.514346,-4.380172,6.779872,-3.783470,2.391783,-1.434236,-8.086674,7.677258,2.224695,-3.396086,-0.497270,9.203733,-0.243669,-2.883284,2.943884,-8.687613,-1.295463,-2.691528,-7.275317,3.407675,7.105911,8.402055,2.047569,-9.652605,-1.698092,4.539654,-0.759109,6.286784,-8.987160,-1.619800,8.711418,9.159699,7.330936,1.140167,3.893233,8.775675,-8.272057,-3.943435,-7.220606,-9.175771,0.835288,3.600067,-7.396333,-0.529512,-9.589052,-7.530102,6.355017,4.142317,-2.325071,8.599217,-8.872739,-5.780221,1.733425,-3.106530,3.703725,-3.319146,-4.118305,-2.935120,-1.988637,7.734104,9.520321,-6.666687,-9.186065,4.937685,-4.549278,-7.635308,7.792307,4.160275,1.156602,-2.012223,-8.734252,6.936057,-6.166212,-0.293898,5.018974,-6.522853,2.485207,4.728298,-2.536900,-1.644598,4.218666,3.459376,7.977336,-2.878527,-2.749564,3.621144,0.427067,1.851012,-3.738881,6.491378,-2.246372,-4.704635,-9.477177,4.130182,-2.325059,-2.889284,-9.028226,0.779857,-8.141017,-0.971720,-6.646846,-2.697540,-7.599418,-0.133969,8.309431,-9.715360,1.904580,8.803384,3.439054,-7.803400,3.180830,1.034622,5.787021,3.099961,-0.985797,-2.692568,-4.587612,4.541063,3.242384,0.887451,9.672052,-2.818965,4.921592,-7.746719,-9.291874,-4.739733,7.870984,7.069177,-0.778883,7.447017,-2.982972,-0.476890,-8.826128,2.229186,0.099640,-2.294996,8.752401,3.721614,-6.690804,6.684990,-6.983112,-6.283070,2.931588,-5.635779,0.146630,9.990312,-0.827922,-9.469947,4.666723,-7.761736,-8.777656,3.638212,7.720062,-6.240678,-3.282321,-3.300500,-6.466061,3.056032,-1.989090,3.129431,5.800400,2.849763,-7.405137,-1.294602,6.018190,-1.278122,8.240668,3.038576,-9.006370,-4.103565,8.408422,-0.093828,-7.130829,-1.976520,2.627181,-3.979020,-2.962837,-6.724227,8.958701,-8.863920,1.731817,-4.804602,-6.303123,0.196969,-0.441821,6.541895,-9.685240,6.365654,9.088158,6.227573,2.471346,9.974035,5.644036,2.023574,-7.144810,-2.331920,-3.566769,-6.021889,-2.045848,-5.258335,-8.301037,6.870884,8.081462,7.535906,-9.177806,4.977145,-3.546131,1.184906,4.720564,-7.365378,-6.638289,5.287100,3.605615,4.272654,-3.382603,-0.653310,8.216498,4.600284,-9.183475,-0.270510,-0.357407,6.154702,-9.298173,-7.747741,2.983733,-0.060031,4.967111,-5.108018,3.193382,3.757144,0.705714,-0.582703,5.231264,4.393378,-2.696494,-8.835421,-7.159923,8.145591,-2.457585,-5.213289,-8.358871,0.454252,-4.140934,3.448831,5.130278,7.432815,-9.949325,8.618636,-8.805657,-6.709635,-7.382608,2.217791,-8.603854,-8.553036,-5.600981,-0.095065,9.298338,9.640894,6.004937,6.746357,5.962078,-0.353931,7.161983,5.278638,-8.958097,-9.969153,-5.664847,0.094695,4.908182,7.452270,-7.747453,-7.223626,3.468959,-6.297537,-4.553723,8.557453,-0.240079,-2.637631,4.806484,6.569803,1.458770,8.494091,1.018530,-2.459833,-7.650363,9.704175,5.165147,-4.429643,0.288097,6.171888,-3.911239,0.528128,-1.324967,-7.880185,1.140776,-2.815837,-9.705088,-2.473608,-2.356591,-0.613072,-4.532314,-3.498349,2.323841,-9.366788,0.314342,4.486420,-9.550760,-5.622887,-6.604054,-0.529629,5.223827,-2.870495,-9.926715,8.210547,0.948723,5.490812,3.763670,9.318243,-2.517312,0.947898,2.203453,-1.597813,1.212836,1.220246,4.772777,5.521027,-6.618290,-8.699072,-4.830777,2.042147,9.578189,2.153907,-9.979483,-9.919444,-8.461988,-5.737276,-5.456518,5.586815,-6.957566,3.346782,6.703514,-9.704901,-7.716664,-0.723642,-1.481725,-4.066102,1.686018,7.452795,-0.986049,-3.597344,5.990272,-7.625782,4.560254,-2.762331,-8.267403,-4.452297,-7.936173,9.932317,8.840421,-2.169196,-6.118633,-6.806747,-1.424439,2.771317,5.680240,-6.934764,0.660652,-8.030951,-5.709080,-6.288626,-2.937467,-4.601245,2.981918,4.301564,-1.502814,-0.548013,-4.245004,-2.637721,-6.281704,7.651018,8.193821,4.320814,-3.413651,-3.018888,-6.679996,-3.420082,9.279910,3.683256,-5.632418,5.809056,-2.084326,4.302443,-3.792372,-2.108970,-8.727939,-9.158497,3.839484,-6.060767,3.453839,-3.724343,4.138966,-3.123382,-4.402680,8.305786,-9.056200,0.682498,-5.872359,1.835342,-4.414791,-5.418733,7.605678,-8.218446,-4.117008,4.880027,7.293403,8.767465,-3.416352,3.277026,2.946274,8.793646,-3.520086,7.834981,-9.935709,1.605665,-9.609143,7.101221,7.594670,-5.554940,-3.127017,6.373081,9.863429,-3.494000,9.839655,-4.695829,-4.829887,-0.875971,-6.511981,0.997683,4.367397,6.465878,-7.214571,7.052735,8.733873,9.147704,6.091504,8.899910,4.586153,-3.131856,-8.394586,-3.305259,0.244260,8.434212,-8.405633,-4.125003,5.318527,6.875789,-6.548333,8.757833,-5.467729,4.956461,-0.471570,-6.642335,-3.168040,-6.745963,-6.785710,0.002644,2.589786,8.716519,8.670393,3.449634,-3.449323,2.707687,-8.844927,-6.788112,6.965539,-9.121048,-6.098789,-2.801066,-7.009769,5.293950,6.422256,-5.329622,1.698049,-1.781909,6.460398,-6.094115,-0.368867,-6.966489,-5.180108,8.150525,-8.348934,4.036514,-2.091332,3.937549,-6.365715,7.847937,1.805449,8.443676,-6.790306,1.537779,8.550766,5.949034,8.769055,-2.299137,-3.040998,-8.349770,-2.418983,2.944884,1.084993,3.949486,-6.380996,3.620333,-3.501690,-1.667020,-2.105176,-7.006929,6.818497,8.110216,2.074899,3.863260,8.211335,-9.673893,9.759646,-0.770064,-6.686860,8.216234,3.530508,-4.393599,9.768058,-8.519154,-1.606595,3.389632,-6.310966,7.026228,9.088656,7.125662,-2.481734,-4.316781,0.122494,-6.719461,-5.953722,-8.831105,-0.319127,7.158274,-9.526544,8.478175,-6.690786,-0.452358,7.853523,-1.889922,-4.792208,1.767307,4.040140,0.865285,-0.286133,-7.795567,3.434548,-3.101605,8.709152,2.192751,2.516046,-6.765824,4.549216,-8.190411,-3.598644,4.956878,-4.804747,9.492807,-0.784117,4.308280,-7.796980,1.112653,-2.846621,2.535284,9.536519,1.474044,1.087368,-3.456762,3.789953,2.399343,5.198604,-0.251872,3.514337,0.426435,-4.985014,5.850519,-8.899732,-7.678425,-9.713916,-5.000953,-5.837421,1.215311,-2.236266,9.240893,-3.831337,0.934354,0.039613,-6.078415,-4.760415,0.860163,-4.875147,7.631130,3.295498,3.553183,-4.597185,-9.434284,-1.184019,-0.652497,9.905429,-8.780693,7.428133,-1.814072,3.576614,1.596709,-6.443397,6.553538,2.485118,-4.119852,-0.028424,3.142892,6.139838,-2.381958,4.116216,-7.539861,-8.707390,-2.991897,1.084814,-0.542529,8.644359,-6.208261,-7.760018,-2.014898,-8.146517,4.569433,1.907751,7.795429,-4.722765,-3.238791,2.626876,-0.444749,5.840916,3.666829,3.995233,8.395514,7.647989,9.514719,7.053359,-1.574801,-8.692634,4.598174,-7.140296,-8.802647,-6.069096,-4.651652,-8.182112,1.093964,7.032699,-1.688681,-3.389428,-9.928890,5.493220,-4.227362,6.229997,-7.302603,-7.319054,4.208508,1.012848,4.625205,-3.386733,3.772204,-5.185407,-5.376012,3.782673,4.778135,2.023360,4.289535,4.729382,1.702098,-8.988071,-8.033456,9.459842,0.010018,3.979253,-7.547981,-4.436395,-1.475048,-8.018481,4.743269,0.421571,-8.719508,-8.317560,5.600478,6.882691,-0.454859,7.050741,-3.150050,8.532444,7.924634,-1.066204,-5.312962,1.219700,6.125592,-7.110989,2.972222,3.407825,-8.410778,4.000212,9.101713,-1.666064,5.950931,-8.030348,9.383761,4.439687,0.004993,-2.965916,0.698797,-9.457722,-7.409767,5.134059,6.943283,1.721086,-2.803849,3.900692,5.571052,3.541759,4.808797,-7.182245,9.324172,6.663319,3.072289,7.315824,6.190200,0.782468,-8.300409,1.828194,-5.632188,3.553096,-5.856076,-6.316398,-4.086218,-3.701863,-0.940261,-6.190835,-9.182576,-2.590637,-4.216569,-5.864149,2.468870,1.310416,-4.711441,8.871509,0.645640,5.099042,-4.645827,9.452251,-6.939022,-8.408600,-6.790759,-4.795197,4.655185,-6.333922,-8.460532,2.651598,-4.857583,1.806590,-1.635354,6.254166,0.799186,8.288283,9.100002,3.389843,-4.957513,-9.950567,-1.028506,6.498286,9.323320,3.296556,6.250596,6.759825,4.003248,-5.278882,-3.640737,3.493049,8.729801,8.579468,6.336689,-6.898222,-4.960474,-8.696692,2.112118,-7.100899,9.496542,0.611548,0.495787,5.601380,4.873300,-2.525209,2.485290,-7.633411,-9.404712,2.614762,-7.575615,5.984811,-7.873925,9.561478,8.223174,-9.862394,-4.068046,8.488270,7.812801,-0.638721,8.108672,-7.362352,9.406408,6.325677,-1.065642,0.168271,-0.445808,5.303358,0.085109,-4.716225,4.117707,2.880039,-8.951968,2.674079,4.722371,7.542794,-5.017934,-8.353164,-3.809212,2.641848,-7.007641,6.521064,6.648584,-6.026777,1.416107,8.574567,0.187824,-6.501867,-5.118564,3.153067,-6.412591,-6.228951,-3.398521,-9.182186,-6.540280,5.066372,-6.328317,7.467632,-3.567417,-3.281650,-3.564571,-3.870133,5.813833,-7.653209,-9.331262,3.611052,-0.514131,7.499563,-9.567781,6.927851,3.410258,-1.403862,6.588327,8.818526,1.459764,1.534732,8.606496,9.870479,3.367456,-1.432513,-6.324436,-1.365394,9.428900,7.392743,6.643370,-5.690059,-2.976516,-9.017569,-9.470367,8.756231,-8.339656,-7.440379,-4.004019,-0.718517,6.270493,8.733285,-9.930814,-1.938822,3.415568,-3.934366,-8.714466,3.396444,5.034447,-4.137962,6.790911,0.982711,-3.775166,0.610865,9.376906,-0.181287,3.640094,-7.520577,7.023175,0.525525,1.809227,0.087185,9.544588,-4.259324,1.393627,-0.605148,-2.111495,-0.865427,3.388186,1.882791,9.978273,7.726722,5.293858,-4.206306,-1.178056,2.145638,1.349413,2.655644,6.712028,3.926274,-8.163399,0.299547,2.418632,-5.884283,7.151948,-4.426975,4.188244,8.672714,4.292314,-0.073153,-3.360786,5.896373,-5.384306,-6.576832,-2.808327,-9.350834,9.326562,4.271276,1.959816,-2.808213,6.862618,7.333762,-7.781225,1.626538,9.309566,-2.399744,7.235736,9.370100,-4.007866,5.202281,-1.462175,-8.514069,7.431779,-0.911997,3.977916,-8.440423,6.016799,7.555330,-8.946940,-8.171590,-6.556652,0.545501,-6.538982,-7.866914,-4.145333,-4.347044,8.949802,4.036148,-3.338272,-7.006657,-5.446817,8.994724,-9.851127,5.068003,6.115667,-8.169623,-9.405788,-0.162788,2.206286,-9.408683,-7.521624,-2.300193,3.330331,4.795072,0.750686,9.813324,-6.677302,-3.606642,0.375515,8.160061,4.069406,9.684282,-0.663495,-0.667212,-2.274742,4.205810,3.871586,-8.918173,0.488572,5.110867,9.318448,-8.249958,6.506273,7.194607,9.076832,6.395432,-9.388624,-1.165450,-2.439449,-0.213351,7.068006,-5.822367,5.368623,7.223157,-7.791170,-7.530024,3.157491,4.007128,3.998688,-7.965144,9.990263,2.875608,-6.059282,-2.346270,-7.118237,3.514907,4.799333,7.454207,-6.565893,8.128503,4.700719,1.807291,1.627039,5.977962,2.547462,4.696680,4.229092,-5.912491,-0.640245,9.415472,-5.862644,0.553266,-6.848046,-3.570715,7.743899,7.850296,3.585220,-6.093225,8.990424,1.008195,0.628986,6.593638,4.108634,-4.219032,8.072081,3.769759,-4.676119,9.468052,0.847743,7.546392,6.837620,5.546329,9.174268,1.960152,2.241769,8.541520,6.433849,7.450754,8.903668,0.590304,5.423856,-3.548208,8.060312,-2.389393,3.049926,3.310020,-7.810055,-1.912562,-1.703911,-7.939785,-9.639690,-8.711635,2.795555,3.601995,1.801597,0.041096,6.709193,-0.247885,0.228018,4.465453,2.838515,1.415623,4.563042,0.661715,-5.773238,7.418229,-5.544600,-6.275855,3.330469,-6.675417,-6.663556,-9.006569,4.859349,-7.681672,9.089888,4.654811,1.795195,3.295499,-3.265836,-3.431619,-4.926185,-6.664443,-7.902562,-3.436355,-3.077777,-2.446234,-2.026618,-0.767633,-9.941267,-1.047262,-8.039704,-3.289485,9.694681,-8.307554,-5.703350,-5.981545,-0.800636,8.457789,6.988696,-2.823018,-5.862351,2.319905,6.397417,-8.928117,-1.910079,-1.089531,2.851302,-9.320605,-6.692031,-2.451238,-1.187444,6.773238,3.968760,3.697947,3.607909,-8.764743,-4.552525,-4.594852,2.272493,6.320691,-2.303206,-4.117604,-0.037415,-7.726116,5.275977,-2.303143,4.676888,-6.840655,-0.284720,0.201547,-5.710074,-5.018986,5.189983,-3.011260,5.361231,7.694808,9.302185,2.864806,-6.254289,-1.910786,8.423792,4.211891,4.389486,2.944476,3.943072,0.130687,8.694073,0.477391,-7.016054,4.450520,4.368591,0.010457,1.010638,6.978632,-1.219874,1.488478,-4.224357,-1.775388,1.810439,5.275443,2.314525,-8.282047,-9.720949,7.752210,0.307101,5.342781,8.987467,-4.702278,4.103495,3.916028,2.411448,3.094989,3.418570,8.722561,-5.160812,-4.545962,4.452082,-7.945743,-3.719095,6.417768,-1.103717,-2.957385,5.053354,-9.039326,-8.834101,1.101631,2.122214,3.133701,-4.520092,2.394865,-8.292844,-4.935994,-2.944563,9.148791,3.520863,-0.579315,0.272822,7.358949,4.358962,-9.973827,2.026308,-6.853611,-7.799132,-5.428882,-2.122587,4.566391,6.692325,5.084245,-7.311685,-8.324151,0.519668,-7.146618,1.525358,8.877318,1.047819,3.712401,0.838072,6.335767,9.452095,5.341764,5.740628,-7.548835,-6.842291,-3.581776,2.272713,-0.764551,-4.910261,9.189567,5.789137,-9.389127,-0.268184,0.606780,1.333906,-5.966017,-3.229009,6.544450,-8.998037,-5.206512,7.811935,-9.049476,1.096488,8.921321,2.250858,-3.260716,1.352596,5.320567,-4.695598,-8.849261,-3.361098,-6.782635,-2.125744,-8.035160,-4.570783,3.079541,-8.680590,-3.922590,0.001490,1.671953,-1.761704,9.463811,-5.880164,-9.789793,8.232064,8.046935,0.878898,0.782317,1.456955,-4.313450,-3.679242,7.780700,0.072312,9.505776,7.596382,3.223920,-9.795502,7.708104,-9.937707,4.232829,-2.347251,5.360643,-8.607284,6.447082,-4.655115,7.463453,-1.620533,7.777320,-7.710335,-3.819585,1.388528,-4.890613,-6.117033,5.235020,2.496170,-8.895903,6.878923,2.744331,-5.685587,0.506307,-4.750400,-5.987008,5.189321,4.212438,-1.220916,4.815878,6.228831,7.642698,0.753242,-4.043657,4.252491,8.048736,-9.365450,-4.461957,9.240164,-0.697659,1.402402,-6.738668,-1.820144,-2.662198,2.194455,7.503236,5.642201,-5.894395,0.486414,3.748803,-8.390874,1.088177,7.462198,5.874452,1.083066,3.365652,-0.614554,3.967566,9.053932,1.031071,6.491421,2.048486,3.617086,6.266107,0.846298,1.298209,4.910653,-2.575660,0.400782,-5.154895,7.563175,4.565883,4.291823,8.679677,-7.098681,-5.449246,6.230842,6.796326,5.250055,1.716520,3.297340,-6.674307,5.324231,-0.322635,2.725120,1.482708,-4.137208,-6.913914,6.391890,-2.787701,4.129840,9.576353,-5.344350,7.372536,1.867577,-9.791111,-5.978278,-6.823405,-5.446301,-9.421401,1.114161,-3.983342,-5.861768,9.603712,-1.036396,4.907123,-2.130619,-1.543152,3.030674,4.910768,-2.676504,-2.352046,-1.995087,-5.363366,6.474408,-2.191633,-6.488208,-7.015117,-8.618140,-7.617035,9.996728,-2.829168,-8.146339,-6.802672,-8.464544,0.358802,-2.969901,5.132940,-4.701232,1.955578,-5.105234,-8.096438,-4.847590,5.064175,-7.759028,-0.110320,-7.429030,-4.385243,0.571200,-1.007901,-7.788886,1.109499,3.653621,4.732365,-7.289895,3.940656,0.961913,-9.724493,-0.696590,-2.474483,7.177594,-6.668652,1.959572,8.698132,-2.819142,-7.121173,9.650758,8.500223,8.787579,-1.448677,1.953907,-1.681658,1.378097,-0.504231,1.851396,-2.765916,8.861065,-8.354014,9.859524,-5.722665,8.735718,-1.451948,-0.810651,-2.070334,6.545960,9.307214,-7.026578,5.656097,-8.777101,-3.918511,-6.470522,3.867156,3.603607,-8.241748,8.741182,-3.388363,9.740494,1.237355,-3.913637,3.742699,-1.360912,-4.593973,4.573188,-6.566968,-0.712419,8.941361,5.904425,-8.264573,-9.789407,-0.486696,1.936622,-8.679326,9.024401,-8.863133,3.406470,1.548787,0.048294,9.806923,3.280562,-4.818390,-5.724181,-9.557946,-4.050160,-6.271344,9.885150,-9.346211,-0.660726,-7.108313,-1.882411,5.142943,-8.641454,7.961255,0.387997,-1.227273,-2.296253,-6.410157,-4.321197,7.059491,9.555728,6.843015,-7.459181,-1.613206,8.789351,-4.847442,9.423371,0.452591,0.102250,0.511063,2.401727,1.401176,0.289332,-3.975621,1.375143,-5.576684,-1.813414,0.562961,-1.638752,8.172779,-6.436740,4.242325,1.909626,-8.429013,-3.425985,8.374011,7.601803,9.796365,-3.702597,1.506184,4.529609,1.097967,1.413430,-3.051676,-9.369766,2.291169,-6.530628,-7.492654,-3.195181,-8.602079,6.745585,-7.737795,-6.845969,8.448541,-3.796541,-7.691700,-5.672312,8.214812,9.289484,0.860789,0.755139,-1.390586,-5.006969,6.896526,3.076496,8.728070,-0.134040,-7.780773,8.342937,7.775499,-5.098040,-2.912800,2.442976,-4.775873,9.332601,-9.106570,8.745069,-4.264155,-5.354516,-0.068409,0.590823,-9.067918,3.755328,8.330846,-4.263000,-1.546784,-1.690332,5.448667,-3.359353,-8.969327,-7.209315,-6.105115,-7.855856,0.937437,1.040842,-6.191463,2.026991,-6.740729,6.063676,3.794774,-8.504372,-1.573485,-5.794633,0.008739,-7.942975,5.637488,-9.075766,-8.702272,-5.245843,9.948378,0.788667,4.918983,-3.493854,2.611476,0.369451,8.740471,1.980943,-4.385541,-4.978852], dtype = "float64")#candidate|6342|(1716,)|const|float64
call_6341 = relay.TupleGetItem(func_1279_call(relay.reshape(const_6342.astype('float64'), [12, 13, 11])), 1)
call_6343 = relay.TupleGetItem(func_1282_call(relay.reshape(const_6342.astype('float64'), [12, 13, 11])), 1)
func_4157_call = mod.get_global_var('func_4157')
func_4161_call = mutated_mod.get_global_var('func_4161')
var_6350 = relay.var("var_6350", dtype = "int8", shape = (4, 44))#candidate|6350|(4, 44)|var|int8
call_6349 = relay.TupleGetItem(func_4157_call(relay.reshape(var_6350.astype('int8'), [11, 4, 4]), relay.reshape(var_6350.astype('int8'), [11, 4, 4]), ), 3)
call_6351 = relay.TupleGetItem(func_4161_call(relay.reshape(var_6350.astype('int8'), [11, 4, 4]), relay.reshape(var_6350.astype('int8'), [11, 4, 4]), ), 3)
func_2419_call = mod.get_global_var('func_2419')
func_2424_call = mutated_mod.get_global_var('func_2424')
var_6359 = relay.var("var_6359", dtype = "uint64", shape = (252,))#candidate|6359|(252,)|var|uint64
const_6360 = relay.const([-4.984981,9.266137,-8.240622,-9.617685,-0.338075,2.189944,-1.712555,5.991381,5.268326,1.338514,-1.853853,3.047458,-2.627101,6.273649,9.145368,0.138923,-4.751704,4.437605,2.147796,-5.441832,1.237988,3.105582,-8.275693,3.227708,0.576500,-0.603598,5.168042,-4.574724,4.908995,-7.180262,4.070853,6.580865,-5.073038,-7.290287,-9.683955,3.110773,-7.074090,7.018024,-2.152943,-9.384081,1.750667,3.267157,-0.889125,-4.719815,4.023284,-2.832318,9.043509,-3.642693,3.675155,0.867202,-1.585576,3.674139,4.663025,2.127116,1.491988,3.815158,-3.715051,-0.381901,-0.614756,6.590637,5.248621,-3.234371,2.854460,-0.666668,7.024923,-6.113496,-8.908187,7.078062,-2.466767,3.388760,-3.328628,-1.766729,0.960482,-6.095931,4.025077,-4.281154,2.220312,1.947214,4.819803,7.230259,5.345599,-4.247016,4.397075,-2.592608,-0.132781,-4.171210,-4.346039,-3.989847,3.513786,-5.258814], dtype = "float32")#candidate|6360|(90,)|const|float32
call_6358 = relay.TupleGetItem(func_2419_call(relay.reshape(call_6349.astype('uint8'), [2, 48]), relay.reshape(var_6359.astype('uint64'), [252,]), relay.reshape(const_6360.astype('float32'), [90,]), ), 2)
call_6361 = relay.TupleGetItem(func_2424_call(relay.reshape(call_6349.astype('uint8'), [2, 48]), relay.reshape(var_6359.astype('uint64'), [252,]), relay.reshape(const_6360.astype('float32'), [90,]), ), 2)
output = relay.Tuple([uop_6336,call_6341,const_6342,call_6349,var_6350,call_6358,var_6359,const_6360,])
output2 = relay.Tuple([uop_6336,call_6343,const_6342,call_6351,var_6350,call_6361,var_6359,const_6360,])
func_6365 = relay.Function([var_6335,var_6350,var_6359,], output)
mod['func_6365'] = func_6365
mod = relay.transform.InferType()(mod)
var_6366 = relay.var("var_6366", dtype = "float64", shape = (11, 3, 13))#candidate|6366|(11, 3, 13)|var|float64
var_6367 = relay.var("var_6367", dtype = "int8", shape = (4, 44))#candidate|6367|(4, 44)|var|int8
var_6368 = relay.var("var_6368", dtype = "uint64", shape = (252,))#candidate|6368|(252,)|var|uint64
output = func_6365(var_6366,var_6367,var_6368,)
func_6369 = relay.Function([var_6366,var_6367,var_6368,], output)
mutated_mod['func_6369'] = func_6369
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6454 = relay.const([[[-6.911762,-6.184075,5.409480],[0.587065,-5.913789,1.275918],[5.768099,-8.357045,6.658854],[-8.317358,-4.073361,-7.903177],[9.158057,-5.784444,0.185175],[5.472040,0.095496,-1.204338],[-3.311354,9.735795,-2.930448],[-6.392246,6.560164,0.065155],[-9.880143,4.652319,1.034584],[0.550580,9.353857,3.779157]],[[8.971794,-2.755299,-5.526176],[6.064675,-3.527521,-9.351742],[9.880770,-0.809337,8.926520],[-3.013668,9.471708,-1.039957],[2.967407,7.200869,-1.218503],[5.585788,-4.883342,-7.895240],[-8.930783,1.857493,9.341765],[7.590404,-2.896676,0.307954],[-2.438517,-1.299669,8.542382],[-2.710815,-8.667755,3.704256]],[[-1.397318,-1.826262,-2.570619],[5.233895,-2.603874,9.849166],[-9.230322,1.679608,3.836491],[-4.424327,-5.474437,8.465121],[-7.300330,-4.076662,-0.965731],[5.395591,-2.876895,4.306252],[-9.634649,0.588813,7.315685],[-8.635885,5.681957,8.934059],[-3.345517,-8.933021,-6.466880],[2.951174,0.328189,1.724381]],[[6.823861,-5.099439,-3.061405],[5.890221,1.602989,9.936093],[0.009393,-7.066856,1.255995],[8.608672,-4.640423,-9.668911],[-6.858796,5.707353,8.488841],[1.914739,3.038213,-1.157058],[1.723236,-0.562513,-5.150913],[9.801629,-0.480825,9.404619],[7.643626,0.345672,-3.513067],[-1.563841,8.081442,9.418656]],[[-8.791196,-0.795135,-2.732525],[8.003086,-7.430883,-0.502822],[-7.242300,-1.854591,-5.847474],[-2.447292,8.187898,8.834278],[-1.969329,-7.181975,9.363869],[-7.673489,-5.074170,0.391822],[-7.981041,-4.059367,-4.448309],[2.528980,-0.745738,2.285120],[3.603304,2.215750,-2.616224],[8.799151,-7.270420,-7.927379]],[[4.708303,-1.586760,5.371978],[-0.812304,-1.797676,-4.010398],[-6.895873,8.805311,-6.633999],[3.415918,1.841220,-3.338820],[8.091320,-1.426711,2.765585],[8.280888,2.153468,-0.408327],[2.313992,-7.411282,4.590055],[-3.690397,7.595369,-2.435722],[7.883834,0.367079,-7.194913],[-4.175927,5.550577,-9.451115]],[[3.390331,4.968391,7.157803],[-4.172995,6.972878,-8.793970],[7.302645,-7.555689,5.726206],[-4.134168,-0.587838,6.498535],[8.453515,-8.603622,-2.162950],[6.747421,-8.201647,-9.959117],[-3.477390,-0.577120,-8.607574],[-6.604087,6.996036,-0.056371],[-2.867290,6.304972,-6.485139],[3.958260,-7.189506,0.033940]]], dtype = "float64")#candidate|6454|(7, 10, 3)|const|float64
var_6455 = relay.var("var_6455", dtype = "float64", shape = (7, 10, 3))#candidate|6455|(7, 10, 3)|var|float64
bop_6456 = relay.floor_mod(const_6454.astype('float64'), relay.reshape(var_6455.astype('float64'), relay.shape_of(const_6454))) # shape=(7, 10, 3)
func_3534_call = mod.get_global_var('func_3534')
func_3539_call = mutated_mod.get_global_var('func_3539')
var_6472 = relay.var("var_6472", dtype = "int8", shape = (7, 6))#candidate|6472|(7, 6)|var|int8
var_6473 = relay.var("var_6473", dtype = "float64", shape = (36, 1))#candidate|6473|(36, 1)|var|float64
call_6471 = relay.TupleGetItem(func_3534_call(relay.reshape(var_6472.astype('int8'), [3, 2, 7]), relay.reshape(var_6472.astype('int8'), [3, 2, 7]), relay.reshape(var_6473.astype('float64'), [9, 4]), ), 3)
call_6474 = relay.TupleGetItem(func_3539_call(relay.reshape(var_6472.astype('int8'), [3, 2, 7]), relay.reshape(var_6472.astype('int8'), [3, 2, 7]), relay.reshape(var_6473.astype('float64'), [9, 4]), ), 3)
func_1780_call = mod.get_global_var('func_1780')
func_1782_call = mutated_mod.get_global_var('func_1782')
var_6490 = relay.var("var_6490", dtype = "float32", shape = (2112,))#candidate|6490|(2112,)|var|float32
call_6489 = relay.TupleGetItem(func_1780_call(relay.reshape(var_6490.astype('float32'), [11, 16, 12])), 1)
call_6491 = relay.TupleGetItem(func_1782_call(relay.reshape(var_6490.astype('float32'), [11, 16, 12])), 1)
output = relay.Tuple([bop_6456,call_6471,var_6472,var_6473,call_6489,var_6490,])
output2 = relay.Tuple([bop_6456,call_6474,var_6472,var_6473,call_6491,var_6490,])
func_6499 = relay.Function([var_6455,var_6472,var_6473,var_6490,], output)
mod['func_6499'] = func_6499
mod = relay.transform.InferType()(mod)
mutated_mod['func_6499'] = func_6499
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6499_call = mutated_mod.get_global_var('func_6499')
var_6501 = relay.var("var_6501", dtype = "float64", shape = (7, 10, 3))#candidate|6501|(7, 10, 3)|var|float64
var_6502 = relay.var("var_6502", dtype = "int8", shape = (7, 6))#candidate|6502|(7, 6)|var|int8
var_6503 = relay.var("var_6503", dtype = "float64", shape = (36, 1))#candidate|6503|(36, 1)|var|float64
var_6504 = relay.var("var_6504", dtype = "float32", shape = (2112,))#candidate|6504|(2112,)|var|float32
call_6500 = func_6499_call(var_6501,var_6502,var_6503,var_6504,)
output = call_6500
func_6505 = relay.Function([var_6501,var_6502,var_6503,var_6504,], output)
mutated_mod['func_6505'] = func_6505
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6720 = relay.var("var_6720", dtype = "float64", shape = (3, 3, 6))#candidate|6720|(3, 3, 6)|var|float64
const_6721 = relay.const([[[2.051524,-8.243686,-6.818494,-3.184266,-5.104100,-4.206735],[3.559343,1.441538,-6.060518,9.987089,-8.392386,8.417148],[5.916977,-9.168278,7.581452,-5.129393,-7.987589,-9.200963]],[[-3.348474,4.905818,7.194727,-1.260336,2.710780,6.808306],[-9.718150,-8.954741,8.687241,-6.289298,4.960676,3.992478],[7.210095,7.744658,-0.235848,-2.155015,-0.379883,0.720499]],[[7.114858,-8.207910,4.997495,-6.734412,-8.063372,-0.290800],[-9.642494,1.271920,5.554688,-1.871079,-3.678836,4.109233],[8.181471,6.586903,1.959647,4.312367,3.985368,1.507417]]], dtype = "float64")#candidate|6721|(3, 3, 6)|const|float64
bop_6722 = relay.floor_divide(var_6720.astype('float64'), relay.reshape(const_6721.astype('float64'), relay.shape_of(var_6720))) # shape=(3, 3, 6)
bop_6730 = relay.logical_and(var_6720.astype('bool'), relay.reshape(bop_6722.astype('bool'), relay.shape_of(var_6720))) # shape=(3, 3, 6)
uop_6746 = relay.erf(bop_6722.astype('float32')) # shape=(3, 3, 6)
func_1279_call = mod.get_global_var('func_1279')
func_1282_call = mutated_mod.get_global_var('func_1282')
const_6752 = relay.const([7.213119,-3.312603,-7.944045,-7.755328,-0.066831,3.898547,1.880531,-8.867647,8.178640,-7.730768,4.929309,-2.399175,7.960265,7.964525,1.180202,6.453794,-1.431563,-8.293719,-1.536920,5.492770,7.914946,5.956075,7.193529,9.490527,9.120748,3.440237,-6.651691,3.245775,-5.521854,-5.159470,9.733596,-9.046290,-7.540051,3.487472,1.043980,1.805836,9.901519,-1.962680,-8.324651,-3.599310,7.007445,-4.527067,0.984822,0.649005,2.129669,6.503483,4.301523,-2.189053,7.764373,-7.588002,-7.088897,9.587202,8.162735,9.774140,6.730945,5.671989,3.276322,-9.820846,8.491404,-5.416567,-8.805343,-7.298580,4.258999,9.873137,-6.208717,-4.084638,3.602577,-0.837754,2.177205,-3.130266,0.490313,0.065887,0.409750,1.047028,4.389766,1.016106,-5.086294,1.543234,6.469102,-0.165022,-0.314216,-0.670415,-5.954919,-4.958204,-8.519380,-4.862434,0.802949,-5.088997,-8.896826,0.210523,3.988800,6.342601,-8.619979,-4.570475,8.009828,0.747322,3.683129,6.905973,1.983495,4.331778,-3.996315,0.751933,2.115412,-2.092196,-1.100819,0.365938,7.097494,7.540087,7.112702,3.061548,-3.969518,-7.737568,-7.775852,3.509376,-4.027308,-9.365305,-4.328777,-5.225802,8.154235,7.594834,-0.753149,-9.085289,3.578560,-8.102425,4.480251,3.374189,-6.865131,7.101300,4.280797,-5.612368,3.251581,-9.280653,9.342386,5.349762,-3.817656,-1.706947,7.021798,-8.504559,-5.281157,0.001958,-9.752063,5.386710,-0.993845,2.997212,5.590921,9.648262,-8.767383,-7.289074,-6.835787,1.474968,8.967384,-7.297545,-1.039627,8.665231,6.925902,-8.329681,-7.999903,-5.582134,-5.728474,-3.906820,-8.052967,-4.645019,-1.506180,-6.167946,-4.971738,5.089691,2.081376,-8.053140,-9.780683,-0.283400,-5.004272,2.009254,-4.491306,7.677837,2.591833,-0.192631,-6.208951,7.750810,4.587140,4.451214,4.342851,9.910630,-2.786018,-4.602571,-1.981871,-1.200407,9.446966,0.366767,-9.171908,-7.057391,-3.573743,8.016747,4.239853,2.160311,-1.503681,-9.360341,1.080963,-9.786845,7.124328,-1.502349,7.051656,-8.302804,-9.529752,-2.856857,-8.402119,3.174058,6.437091,6.656429,0.527598,9.660051,-7.399892,6.008504,-8.453010,0.816499,-8.433123,8.821561,4.324473,-6.411630,8.466815,-8.421515,1.605516,-6.105773,-5.839593,2.841008,5.719589,0.555264,-7.548841,6.524333,-8.806029,-3.518444,0.389735,-8.893533,0.962298,-2.968716,0.956159,-1.845113,-2.670114,8.211807,7.418440,-3.556986,7.423779,-5.226446,-2.416558,-2.325740,-3.892449,1.204057,-2.472782,-2.472735,-3.820645,-0.495603,7.053025,-8.844908,-5.522190,-7.617847,-9.489530,-1.451336,-3.126504,9.393496,-0.999457,5.432429,-8.221498,-0.964717,-5.541333,-0.994554,-7.675132,-1.620980,-6.298018,4.396696,-8.563489,-3.079273,6.974904,5.075050,9.685978,-8.008545,-5.486391,-1.491882,5.934302,-9.727860,-0.948127,-1.446398,7.524317,-8.608982,-7.267642,-4.541845,-9.739945,6.010235,3.983807,8.698644,-4.795140,8.801789,-7.385325,3.560143,-3.512041,9.098890,4.058842,2.543399,6.845131,-6.283834,-3.707797,-1.583120,4.785165,-5.015369,-4.032262,5.641986,7.622123,-2.880456,-9.111216,7.954583,1.372046,1.412117,2.105398,3.929531,8.157109,-7.669607,1.346912,-0.434522,-1.158075,6.124663,-4.128392,6.672087,0.308418,2.781914,-4.129659,3.198690,-0.183863,-9.619743,8.076553,-2.455380,3.851360,-1.036638,7.864602,2.558629,6.405696,9.420254,1.094142,-8.339457,-0.798256,-6.203065,-5.893239,-8.505624,4.516810,-6.712637,-7.051503,8.621207,0.630213,-6.740058,-5.624004,9.441474,9.785248,9.355123,3.570372,7.520151,-3.621193,-2.839962,3.905849,4.317941,9.458742,-0.910270,-9.021674,9.697759,3.354967,-0.855416,7.368465,-4.231339,-1.115511,2.007109,1.977198,6.156496,5.677560,-4.383600,-1.884518,0.330951,-8.944113,-3.515221,5.337052,-9.150504,1.905465,-5.027149,-9.385644,3.870722,-4.093409,5.181240,-0.611959,9.999019,-7.968905,-8.649493,0.337463,2.801952,0.928213,-7.576817,5.554964,-6.859734,-7.827630,-3.946139,4.165108,0.546500,-2.477695,9.832882,-7.527472,-1.966664,-7.785632,9.324208,-2.717305,4.990258,-3.046756,-8.526235,4.895803,7.733262,1.418615,-6.930189,6.711942,9.755280,-6.977131,-4.079783,4.840718,-1.756835,-0.024620,-9.972551,-5.929112,-3.598089,5.042194,-7.707351,5.537380,-4.702339,9.395884,2.330855,0.028231,8.336892,6.229125,-8.826471,-9.051357,9.299784,-6.267842,-8.332556,9.898233,-3.428235,2.760186,3.010893,-9.955304,-7.769303,8.238663,-1.361286,-9.344411,-3.141177,-0.463358,-5.753956,6.431721,6.012694,2.853467,-1.722556,-0.752045,-2.959111,-6.874707,4.985354,0.375146,-6.171750,4.225860,9.314247,-2.372855,-9.691318,-3.511578,-3.339936,-7.874589,-3.848223,6.167261,-9.902984,2.774913,3.066968,3.674938,-9.003880,-7.896610,6.816799,8.563200,4.821601,-9.460626,-2.231430,6.774356,3.032454,-5.563132,2.588394,-1.989600,-2.294254,-2.996610,7.677092,-9.857547,4.923051,8.059258,-3.628198,5.485764,-9.822842,4.250154,6.224110,6.426025,-5.014371,-5.128936,4.405781,-3.495886,-6.440175,-8.589674,-6.734775,9.038198,4.767905,-2.242992,1.848210,-5.371782,4.913476,3.121867,-9.347696,2.959691,-9.296542,-3.123768,8.702379,5.345694,-6.540621,0.812726,-0.428351,-0.773638,6.169804,-3.523155,-6.906940,1.707503,-9.058375,-6.554432,5.861381,-5.549989,3.995377,-0.669855,4.255578,-2.828523,8.437710,-6.688313,-5.120885,6.010887,4.233777,5.777226,-3.317938,1.456149,8.096369,6.866063,-8.581263,-7.633305,9.454314,-7.357296,7.372024,-8.736899,-6.627586,-8.896078,1.280141,0.124612,9.822668,-0.526624,7.038200,8.844189,-9.529298,8.712029,-0.528518,-8.968006,-9.216112,-1.532522,-8.801822,-9.255888,6.076797,3.700755,1.477838,8.621642,4.012205,-2.059211,5.253044,2.757387,1.499371,-6.598832,7.043524,8.954666,5.118529,7.888553,-0.205388,0.913354,-9.758277,-6.745931,5.446156,8.383328,2.035735,6.773014,1.046180,-5.898114,6.522584,-1.483037,-1.577760,8.389173,3.738699,7.439653,-3.970462,9.605836,5.766431,-8.950766,9.988947,-0.941257,-2.691482,4.628672,-9.426473,-5.139606,6.913216,-0.191587,-7.864797,7.825814,-2.641917,3.936250,4.517511,-6.683528,-2.036141,3.280678,-2.283226,-8.046010,3.967054,-7.137981,-6.455434,-8.661603,7.531463,2.815600,-5.721703,8.051488,8.904108,3.017064,4.372050,2.025894,9.176215,7.086492,-0.140299,-4.291889,9.457465,-8.021738,2.797974,6.659884,4.326696,-9.780333,-5.558746,4.329884,-8.705226,-8.908951,-2.742525,5.126000,6.767012,5.955933,-3.703433,2.392108,-9.455456,7.010242,-6.936692,-4.870227,3.098228,4.166767,-2.849110,9.569527,-3.837356,-3.442834,-4.163421,-6.630509,-9.162335,2.148439,3.600541,-0.178614,-6.338914,2.873087,6.329659,2.876887,-9.939878,-7.735459,4.264316,7.698542,1.857815,-0.946142,2.403725,8.413640,-8.102163,-9.818261,-3.923655,1.721342,8.587800,7.725448,-0.906610,8.863677,-2.265669,1.279550,-3.217400,4.056700,-7.892793,1.787451,-7.244193,1.118661,9.610540,-0.529138,-6.381558,0.532385,-5.006774,-7.571936,7.848997,0.457054,4.140031,6.940549,0.304793,-4.326261,-5.055911,8.632690,-7.651347,3.616119,-1.192388,0.669003,7.425718,-7.376226,-1.181778,-1.908301,7.582667,7.000397,-1.455249,-5.428192,8.850158,5.612026,-9.926615,-7.869701,9.896329,-4.683700,2.569968,-9.646830,-8.345831,-4.277703,-3.735682,-3.987577,-2.743554,-7.583396,-4.150237,-3.303917,2.923013,8.220497,-9.055520,4.185090,9.394953,8.930272,0.359850,8.217237,9.870829,-4.041991,-7.716418,2.621393,-6.996433,7.652463,-9.896435,-1.377184,3.951116,2.389536,8.151467,4.233839,-3.080178,6.458672,7.753512,-9.609060,-8.182550,-9.806855,7.007039,2.732570,1.919098,7.632830,-4.571824,-1.054184,2.921950,4.935420,-3.941966,-3.694765,-1.153105,-2.023484,-7.722120,-1.807058,-5.739424,-4.324009,-2.649212,0.679863,-0.424500,2.806941,6.667907,7.141385,0.085528,0.080331,2.749098,-9.001863,-1.466953,3.218415,0.369852,5.273775,-8.049083,-3.541053,-1.215282,5.920273,-6.099225,1.291905,-9.314244,-7.806362,-7.889520,0.365976,8.056334,0.481394,-4.385763,5.194988,-9.535930,9.584284,-0.046035,6.892191,-1.051146,0.458179,0.779539,-9.895900,2.076516,4.695180,-4.540564,-1.809266,-9.377571,4.243209,-3.608951,5.492323,-5.083181,-0.578183,-9.816012,3.835714,-1.394607,5.597616,2.906812,1.539251,-0.771431,-0.335629,5.511227,0.423469,-6.679799,-4.784989,0.198116,5.008694,4.565264,-4.563328,4.989690,-4.776283,-4.582643,2.133692,6.015216,0.979154,5.735629,-6.158105,-6.031448,1.040856,1.523041,5.584586,6.193432,-1.650483,-6.141717,-6.861222,-1.365563,5.053030,-8.607597,-6.479377,9.667699,7.591617,-0.210885,3.218793,3.065539,2.928190,9.413654,8.203148,-4.420797,5.385405,-5.643172,-0.099227,-9.041748,-8.979588,5.784420,-4.386704,-1.535326,0.097803,9.325590,5.716712,3.967691,1.844869,2.884339,9.596902,-2.589989,0.701184,-9.974289,2.053183,5.006893,2.153331,1.148021,-7.900090,-2.848220,-3.276877,-1.514358,-6.015108,-4.987095,-7.906306,5.269512,0.598567,-3.322165,-8.941655,4.141990,8.438077,6.595407,1.858785,-5.939696,-1.116099,6.588495,2.914920,-9.627401,-2.048938,6.789429,8.078027,-9.883333,8.365355,3.893951,-5.202939,9.246617,7.775846,-1.379354,9.751259,-0.351612,9.458134,-3.915072,-7.802807,5.378317,-7.617690,6.306871,2.372636,-5.621959,8.362794,-5.969613,-2.732517,9.075326,9.781062,-1.626133,8.052654,-9.201185,7.056303,2.202346,-8.532828,-9.520157,4.354153,-8.230618,9.938836,1.596110,-1.728659,-4.690868,-8.333233,-5.248274,-5.999005,-3.967972,-4.356434,-3.303200,-3.485864,3.639446,-0.696964,2.819956,7.091857,-8.407786,-9.096824,8.693654,-0.744088,-4.384012,-0.024108,-3.718234,6.850890,-1.493875,0.310828,0.006079,-0.279257,-8.491959,-5.727343,-8.166752,0.091534,5.357486,2.254812,-0.789515,-4.420819,-0.908971,-2.719217,7.397637,8.425395,9.256462,7.635002,-8.740787,4.513256,-3.732410,-0.678550,9.916656,-1.755428,-6.369433,-5.217290,0.109536,8.693327,4.775183,-6.476064,6.192468,-8.088208,-2.113871,-4.577990,3.472926,-3.929294,5.621279,-4.712472,-6.916789,9.064759,-4.150389,-0.398885,4.633020,0.862412,9.725701,9.560760,-2.225882,0.363323,5.437726,8.353697,2.195454,6.245912,2.656112,3.506832,-5.220370,-6.015468,-8.483606,-6.716916,-8.301559,-3.723316,1.454221,-5.022466,8.447525,-7.385545,5.297436,8.688929,4.367601,-1.984520,6.050833,4.499277,-4.650857,-3.190678,-8.173514,-8.770697,5.344906,-3.033411,7.900330,-5.872417,-4.179157,4.434511,-2.861594,-9.382216,9.656202,-3.327794,-9.909804,-5.543048,9.147127,-2.147651,4.815239,-5.780826,3.236337,6.206338,-3.203709,-8.239876,2.876415,-8.262239,-0.710894,6.548197,1.508565,-1.572345,1.067556,0.234244,-8.378125,-5.814908,-3.207191,-2.654914,9.955042,-3.592595,5.108254,-4.924467,4.087243,-7.318627,6.644399,1.440741,-4.996046,6.301889,3.439962,-3.708412,-9.112080,2.581451,-5.688564,-9.147056,-8.324794,3.540591,8.437770,-0.130777,-4.067908,3.262420,-6.516161,3.608250,-5.955847,0.071718,2.225828,5.843541,-9.234183,-1.757730,-8.420648,0.067074,-0.638935,-0.542580,-5.697554,-8.627947,-7.348111,5.036315,-5.886282,6.801298,8.831357,-5.771552,-3.124010,-4.008596,9.669128,7.707675,4.212158,-8.725792,0.662305,-7.563450,5.830540,3.635565,-9.281678,-2.904993,8.646250,6.557022,-9.475716,7.162262,-8.809469,-9.819012,-1.587789,8.465878,-7.444343,7.986558,5.484728,9.431938,-6.717330,-3.117767,2.594170,-4.933555,-5.531373,9.272334,4.568547,4.614583,-7.878931,5.879516,-7.027370,8.585036,-4.939779,-3.365335,-2.528546,-6.112001,-8.165365,8.042027,-8.258775,-5.103225,3.196015,3.388427,-5.740198,-2.306698,-5.866443,-2.543432,7.649906,5.554339,-6.200490,7.738634,-9.267070,-2.898481,-0.669050,-3.702175,5.465858,6.520089,7.043063,9.910517,7.103587,-5.759985,-3.956471,-3.873687,-7.841715,3.573176,-3.160973,9.140562,3.578200,3.010790,0.424405,-4.902541,6.193235,-2.876911,-6.908482,-8.996444,3.351369,-4.240345,8.880408,7.811382,-4.705171,7.999667,4.193386,5.455536,-3.268968,-0.816753,1.240620,-3.036693,-4.632673,6.466075,-7.951705,5.509742,-6.722950,4.714146,-9.927826,-5.966813,-6.917626,6.523081,-5.201035,-5.696616,-6.803630,4.167767,7.572459,-6.341231,-7.813625,-2.444090,3.930347,-7.587567,4.589637,-3.577062,2.612167,2.381978,-4.963606,1.304893,9.424566,6.409670,1.926464,5.303971,-1.364244,-4.778347,1.735266,4.452448,-0.767863,0.022954,-5.730627,-0.926806,-0.701706,7.855157,-9.693615,4.376130,-3.371300,2.160003,4.383436,-6.040650,-9.364315,-9.943699,6.437500,5.972699,-0.719225,-4.092370,-3.560953,-7.634760,-9.938930,3.530900,-4.471056,-9.083696,3.368245,-8.841134,5.902705,-7.877902,-1.533821,0.322550,-2.197636,1.063903,7.423723,7.519732,-8.301184,-6.014550,0.043686,-1.784261,2.410799,-9.053862,-7.679418,7.739788,2.405593,-6.468083,1.645366,-2.532285,-9.301377,-4.036106,5.960197,4.128655,6.093949,-7.191652,5.512959,-5.887728,6.288916,2.084976,-0.855801,7.529174,-4.776111,2.228737,-9.094656,2.012665,0.608653,-7.211155,-7.425818,9.699492,-4.840397,-8.950437,-9.785634,-2.516249,-9.571123,4.664929,-7.996602,-3.710408,-8.503733,-5.494882,8.239799,6.217843,0.608386,7.473870,1.962222,3.099480,-2.498138,6.839633,2.735564,1.757762,7.322449,-6.430671,0.342110,-4.712480,-8.570809,-5.472515,2.995290,-7.800704,-9.003857,-1.007916,-9.780065,7.198213,3.944649,3.695386,-3.687170,-5.057734,-2.810288,2.040421,-9.156984,8.792163,5.989563,-6.715539,-0.949854,6.093568,9.355457,-6.887634,-8.735920,-8.963441,3.391645,-2.643781,-7.610525,5.057495,8.067486,6.471564,8.318175,-2.625583,-8.967122,3.934952,7.752433,2.807212,-7.352902,4.338303,4.014300,-4.209569,7.475769,-5.981457,-8.111223,-3.627213,7.049937,9.182724,9.477933,9.995493,-3.091977,-9.898169,4.045345,-6.535091,4.919643,-9.884437,-3.935086,7.435663,3.861633,9.043294,-5.314975,9.101845,2.248526,-5.138889,-4.096576,0.202763,-2.459242,8.405233,8.949633,6.492489,5.152807,-6.594229,-3.161832,8.638369,9.146139,9.888612,5.240863,3.689703,4.961441,7.980541,7.074711,2.464661,-3.242297,-9.729430,-2.411556,-9.640099,3.235620,1.149801,4.434718,-3.252149,-8.641934,-0.290263,-7.873479,-9.649614,9.119410,-0.853780,-7.768435,-8.670799,-1.044951,6.625342,-2.577365,-9.299550,-4.333195,7.888041,-3.169301,-5.262794,-2.083080,-5.645957,0.027960,-8.441673,-2.110734,6.114104,-7.313493,0.237828,-9.823047,-4.058721,6.557660,7.625597,-7.238028,9.988748,-2.901553,9.299090,-7.009289,6.855809,6.783216,-4.785953,-7.105953,-8.763063,9.824444,4.766862,-8.346938,-6.507297,-9.617792,5.126533,-0.386716,-2.421927,0.751205,7.242565,4.234369,2.999152,4.659239,7.689747,3.942281,-5.604533,2.057306,2.773345,3.459282,6.420489,1.920150,9.751091,0.225726,-0.018978,5.431852,-4.095982,-9.376329,3.154600,2.561238,-3.239610,5.181392,2.452710,-0.504042,-7.608159,-1.187565,-9.405562,8.758103,-9.094429,2.875753,6.638431,-3.804787,3.985012,2.154464,-1.593873,5.218994,5.263026,-5.521396,-7.841904,7.778371,-5.365249,-2.133812,3.095577,-6.941745,6.239174,-2.950775,4.722260,-1.099433,-2.993846,5.272317,6.193335,8.780169,1.053556,2.747805,-8.228947,3.332019,3.041952,8.144150,7.755809,-8.503515,1.277335,0.301306,7.430207,-2.372032,0.642434,5.511505,-2.200901,4.191962,-4.847528,7.696378,-7.824640,3.419703,1.404291,-7.502818,2.699567,2.096023,-0.955420,2.110284,-1.600549,7.350308,8.444554,-7.650084,8.725544,-3.512723,9.854603,-0.575982,-7.033390,9.068491,5.441216,-4.654514,-4.669561,6.852253,-5.024025,-1.598188,-3.766738,-7.969143,-4.524547,-0.601392,-2.621568,8.904512,-2.584578,9.885526,-1.822381,-3.883608,6.730148,-4.027098,-4.438121,-1.893082,-5.603387,-4.652429,-1.501589,-0.803151,3.295650,-3.714365,9.339117,8.804558,5.444588,-8.979387,8.932804,4.807600,2.868570,-9.540840,-7.356856,-9.548883,-1.349080,6.909124,2.485585,8.448618,-9.398112,2.404701,-9.759386,-7.203024,0.046434,3.891753,0.383483,1.044631,-6.309354,6.614567,-5.036010,3.105482,-2.683522,7.647943,-4.418252,-2.295470,-0.870820,9.054174,4.958549,2.692975,-7.971411,8.923947,4.299850,7.292857,2.599866,-8.130727,-2.589956,-6.963148,4.851906,1.917636,-0.181731,-4.597570,8.381776,0.366928,8.999729,0.277515,3.039396,-6.215519,-9.146354,-4.966678,-4.385544,1.338536,-2.108263,6.187453,-4.333126,-2.187318,-9.628005,3.242813,-4.314890,-1.046540,0.928404,5.945435,0.550398,-9.629454,9.781969,7.209888,2.647042,5.249563,-0.189168,5.725203,7.628565,7.616330,2.745295,3.650326,-2.372017,3.230984,9.340814,-2.552453,-9.855340,-8.033875,-8.565379,8.353397,6.410250,7.324962,3.603061,-6.085897,-7.659397,5.728885,-0.285881,5.658924,-4.125157,6.705283,-4.090930,-8.548835,-8.283319,-1.246605,-1.808377,-3.134277,-8.217470,1.474022,6.300141,-0.572560,-6.044478,5.494627,-5.605300,2.924004,2.342746,7.675265,-1.151150,6.204610,-9.995736,8.809015,1.955927,-2.702122,-4.142940,-4.272127,3.953550,9.319739,-4.552290,7.683826,-3.975958,7.961617,1.465281,8.392081,2.999741,-2.523796,-2.941610,-7.732974,8.793589,-0.936688,3.887807,2.232316,0.044344,-1.715510,5.356645,3.089095,-3.183209,-7.241509], dtype = "float64")#candidate|6752|(1716,)|const|float64
call_6751 = relay.TupleGetItem(func_1279_call(relay.reshape(const_6752.astype('float64'), [12, 13, 11])), 0)
call_6753 = relay.TupleGetItem(func_1282_call(relay.reshape(const_6752.astype('float64'), [12, 13, 11])), 0)
output = relay.Tuple([bop_6730,uop_6746,call_6751,const_6752,])
output2 = relay.Tuple([bop_6730,uop_6746,call_6753,const_6752,])
func_6759 = relay.Function([var_6720,], output)
mod['func_6759'] = func_6759
mod = relay.transform.InferType()(mod)
mutated_mod['func_6759'] = func_6759
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6760 = relay.var("var_6760", dtype = "float64", shape = (3, 3, 6))#candidate|6760|(3, 3, 6)|var|float64
func_6759_call = mutated_mod.get_global_var('func_6759')
call_6761 = func_6759_call(var_6760)
output = call_6761
func_6762 = relay.Function([var_6760], output)
mutated_mod['func_6762'] = func_6762
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7052 = relay.var("var_7052", dtype = "uint8", shape = (11, 4, 15))#candidate|7052|(11, 4, 15)|var|uint8
const_7053 = relay.const([[[-10,-8,-7,-2,-6,7,-2,6,-6,-7,-8,-7,9,-10,5],[4,-9,8,9,-6,3,-2,8,6,-1,-6,1,3,-3,9],[-9,3,-7,-3,-5,1,4,-2,1,6,-2,2,-4,-1,6],[-6,5,4,-2,-6,5,2,3,10,1,8,8,7,3,-10]],[[-8,-7,-6,4,-7,5,-2,-1,-3,8,9,-7,6,-1,-2],[9,7,-4,8,-3,10,6,6,-4,-10,-5,10,8,-6,6],[-9,-9,-2,1,10,-4,-3,2,-8,10,-3,-9,-7,-9,-3],[2,-2,10,5,-6,7,-7,10,2,8,-8,-7,1,3,8]],[[9,-9,2,-6,3,1,-2,2,8,2,8,-4,-8,-10,9],[8,-7,-10,8,-3,10,5,-2,3,-3,-5,-4,7,-6,-2],[2,-4,9,-7,9,-10,-3,10,3,5,-10,-8,-1,-8,-1],[-3,-2,-3,10,8,9,-10,-4,-8,-6,3,-5,-10,-8,-3]],[[-9,-4,-3,2,7,7,-9,-8,9,-9,9,3,-7,-8,1],[5,-8,-3,-8,-6,-6,-2,-10,-9,6,-6,-4,-9,-1,-3],[10,6,-7,-9,-7,-1,-10,9,1,10,8,2,-6,10,-10],[2,2,-8,-9,5,3,-1,9,2,-8,9,10,-7,-4,4]],[[3,-2,7,6,-6,-4,-7,2,4,7,-6,-9,10,3,-4],[-6,6,-4,7,-1,-10,-1,-9,-4,5,-7,10,9,4,3],[-10,7,-8,-9,8,7,-4,-7,-1,7,4,9,10,5,-10],[1,1,6,-6,4,6,4,-2,-4,-1,9,5,-1,-5,-6]],[[-7,3,-5,-5,5,-7,-3,-4,3,7,8,-9,-3,-7,-9],[3,10,-1,-8,-7,10,-5,-6,-9,6,-5,4,-9,-6,-7],[-9,-8,8,-3,-8,9,-6,-2,-3,3,6,6,-2,7,9],[-3,-4,-7,-10,7,5,-7,-10,5,-9,5,-6,3,3,-6]],[[-4,3,9,8,-2,-1,-3,-8,-9,-8,-1,2,-3,-7,-7],[-1,3,-8,-5,4,-3,6,5,-9,-7,1,-2,-7,-9,3],[7,-6,-9,-5,-1,2,3,-10,-4,-1,7,-10,6,-4,-4],[-1,-1,3,9,4,6,4,6,8,-4,-10,2,10,1,-2]],[[-2,-6,-10,-3,-7,-1,-5,-2,8,8,10,2,9,-9,9],[5,-6,6,-2,-5,8,-1,10,1,-5,1,-8,-7,-9,7],[-8,9,5,-10,-4,7,-10,4,-4,-1,3,-4,4,-10,-8],[1,1,-1,-5,5,-5,-3,1,-8,-2,5,8,-10,3,-7]],[[7,8,-8,-6,10,-6,4,-2,7,-3,9,-8,-9,1,-8],[-10,6,5,-7,-9,-2,1,-4,-4,-3,4,5,10,10,-4],[2,3,4,-4,-9,-5,9,9,-9,6,8,-5,-2,6,8],[2,6,8,5,10,-6,-5,2,-8,-6,4,-4,8,-6,10]],[[6,2,1,-3,-3,-10,-1,3,10,-6,-6,4,-1,-6,9],[-9,-9,-9,2,-5,-9,5,10,3,1,-8,-10,-7,-7,8],[-8,-2,-9,-7,5,9,9,-3,-3,-10,-6,3,3,6,2],[7,-2,-9,2,-5,10,-2,-9,-9,-1,-9,1,2,-2,5]],[[6,-6,-1,-1,-2,9,-2,4,-5,-6,-4,-3,4,9,8],[2,4,-2,2,7,2,10,8,-7,-7,-1,-7,3,2,9],[-6,1,8,6,-7,-6,10,4,9,2,6,6,8,7,1],[-9,9,-6,3,7,-4,2,-8,-5,10,5,-1,-3,8,8]]], dtype = "uint8")#candidate|7053|(11, 4, 15)|const|uint8
bop_7054 = relay.bitwise_xor(var_7052.astype('uint8'), relay.reshape(const_7053.astype('uint8'), relay.shape_of(var_7052))) # shape=(11, 4, 15)
uop_7060 = relay.log(const_7053.astype('float64')) # shape=(11, 4, 15)
bop_7066 = relay.left_shift(uop_7060.astype('uint32'), relay.reshape(var_7052.astype('uint32'), relay.shape_of(uop_7060))) # shape=(11, 4, 15)
output = relay.Tuple([bop_7054,bop_7066,])
output2 = relay.Tuple([bop_7054,bop_7066,])
func_7078 = relay.Function([var_7052,], output)
mod['func_7078'] = func_7078
mod = relay.transform.InferType()(mod)
mutated_mod['func_7078'] = func_7078
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7079 = relay.var("var_7079", dtype = "uint8", shape = (11, 4, 15))#candidate|7079|(11, 4, 15)|var|uint8
func_7078_call = mutated_mod.get_global_var('func_7078')
call_7080 = func_7078_call(var_7079)
output = call_7080
func_7081 = relay.Function([var_7079], output)
mutated_mod['func_7081'] = func_7081
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7131 = relay.const([[[6.626316]],[[5.000781]],[[8.602658]],[[2.969693]],[[6.667498]],[[-6.904486]]], dtype = "float32")#candidate|7131|(6, 1, 1)|const|float32
uop_7132 = relay.erf(const_7131.astype('float32')) # shape=(6, 1, 1)
var_7158 = relay.var("var_7158", dtype = "float32", shape = (6, 15, 5))#candidate|7158|(6, 15, 5)|var|float32
bop_7159 = relay.multiply(const_7131.astype('uint32'), var_7158.astype('uint32')) # shape=(6, 15, 5)
uop_7175 = relay.sinh(uop_7132.astype('float64')) # shape=(6, 1, 1)
output = relay.Tuple([bop_7159,uop_7175,])
output2 = relay.Tuple([bop_7159,uop_7175,])
func_7183 = relay.Function([var_7158,], output)
mod['func_7183'] = func_7183
mod = relay.transform.InferType()(mod)
mutated_mod['func_7183'] = func_7183
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7184 = relay.var("var_7184", dtype = "float32", shape = (6, 15, 5))#candidate|7184|(6, 15, 5)|var|float32
func_7183_call = mutated_mod.get_global_var('func_7183')
call_7185 = func_7183_call(var_7184)
output = call_7185
func_7186 = relay.Function([var_7184], output)
mutated_mod['func_7186'] = func_7186
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7394 = relay.var("var_7394", dtype = "float32", shape = (15, 7, 5))#candidate|7394|(15, 7, 5)|var|float32
uop_7395 = relay.cos(var_7394.astype('float32')) # shape=(15, 7, 5)
func_3828_call = mod.get_global_var('func_3828')
func_3830_call = mutated_mod.get_global_var('func_3830')
var_7403 = relay.var("var_7403", dtype = "int32", shape = (1680,))#candidate|7403|(1680,)|var|int32
call_7402 = func_3828_call(relay.reshape(var_7403.astype('int32'), [12, 14, 10]))
call_7404 = func_3828_call(relay.reshape(var_7403.astype('int32'), [12, 14, 10]))
func_1749_call = mod.get_global_var('func_1749')
func_1753_call = mutated_mod.get_global_var('func_1753')
const_7408 = relay.const([-1,-5,5,-3,-2,4,1,2,8,-5,-3,-4,-4,-3,2,-7,8,-1,-7,-2,5,6,1,3,-10,-2,1,-9,8,8,-5,-2,8,-9,-10,-5,8,2,1,-9,-4,-5,7,-2,5,5,-6,6,10,10,-8,-4,-8,6,-4,2,7,4,5,-1,7,-2,-2,-8,4,2,-5,-10,7,-4,-2,8,8,-5,10,-1,1,2,2,6,6,-9,8,-3,5,5,-6,1,7,-4,4,-7,-1,-10,7,-10], dtype = "uint8")#candidate|7408|(96,)|const|uint8
var_7409 = relay.var("var_7409", dtype = "uint8", shape = (14, 96))#candidate|7409|(14, 96)|var|uint8
const_7410 = relay.const([[1,5],[-5,9],[4,-1],[-6,-4],[-10,10],[-7,-8],[9,5],[9,1],[-9,4],[-7,9],[10,10],[5,-8],[8,-6],[2,-3],[7,-4],[3,4],[4,-5],[2,2],[6,-9],[5,-7],[-3,9],[5,8],[-2,-8],[-2,7],[4,-4],[-8,10],[10,4],[-7,8],[3,7],[1,-2],[2,8],[-4,-7],[-8,5],[-1,1],[-6,-5],[-7,-5],[2,10],[9,-10],[2,4],[-4,-2],[-4,-10],[2,6],[-6,1],[6,4],[7,-3],[6,9],[3,3],[4,10],[2,5],[-9,4],[-2,9],[-10,-5],[-8,5],[-4,-1],[-6,4],[10,2],[-2,-8],[9,-6],[-6,8],[9,4],[6,1],[-4,6],[-7,-3],[-2,8],[3,-5],[-7,-5],[8,-2],[-9,-4],[8,4],[8,-3],[10,-3],[-3,6],[-9,10],[4,1],[-9,8],[-1,-10],[8,10],[-3,10],[-1,6],[5,1],[7,-2],[-5,4],[7,-1],[-4,5],[6,-9],[-10,-2],[3,-6],[4,-2],[9,3],[-6,9],[10,-2],[-10,8],[4,-4],[-6,9],[8,8],[3,2],[-4,7],[3,3],[-5,-8],[4,2],[1,4],[6,-7],[-9,6],[-4,7],[5,-10],[-9,10],[10,10],[3,-1],[9,4],[-9,10],[7,-1],[4,3],[-1,6],[5,-5],[-5,8],[8,-6],[5,4],[4,-1],[8,4],[-1,1],[-9,3],[6,-1],[-2,1],[-8,-8],[-9,-6],[-4,4]], dtype = "uint64")#candidate|7410|(126, 2)|const|uint64
call_7407 = relay.TupleGetItem(func_1749_call(relay.reshape(const_7408.astype('uint8'), [12, 8, 1]), relay.reshape(var_7409.astype('uint8'), [12, 8, 14]), relay.reshape(const_7410.astype('uint64'), [252,]), ), 5)
call_7411 = relay.TupleGetItem(func_1753_call(relay.reshape(const_7408.astype('uint8'), [12, 8, 1]), relay.reshape(var_7409.astype('uint8'), [12, 8, 14]), relay.reshape(const_7410.astype('uint64'), [252,]), ), 5)
func_5960_call = mod.get_global_var('func_5960')
func_5962_call = mutated_mod.get_global_var('func_5962')
var_7413 = relay.var("var_7413", dtype = "float32", shape = (1, 1155))#candidate|7413|(1, 1155)|var|float32
call_7412 = func_5960_call(relay.reshape(var_7413.astype('float32'), [7, 11, 15]))
call_7414 = func_5960_call(relay.reshape(var_7413.astype('float32'), [7, 11, 15]))
func_4380_call = mod.get_global_var('func_4380')
func_4387_call = mutated_mod.get_global_var('func_4387')
const_7418 = relay.const([-2.045205,0.817164,6.666755,-2.952309,-3.746470,-7.423258,-3.739571,1.575191,-3.852733,5.614849,-6.481882,0.912175,5.291513,4.579655,7.896760,-5.369208,-9.410098,-4.715094,5.503556,9.614225,-3.514589,-0.637895,-5.960650,9.305482,-8.668182,-3.571058,-4.348281,2.094735,-7.865635,-8.685816,0.616771,0.120103,-2.325649,7.609835,4.749805,2.678350,3.615178,-2.226497,-3.558597,-3.534355,-2.192398,5.143976,-0.747964,-7.979610,8.700182,-7.636101,7.165796,-4.527863,-8.048801,8.942132,7.675167,5.463953,-2.376718,-5.536327,8.901179,6.880377,8.686834,-8.519874,5.133877,-9.999678,-9.954673,-8.697232,-0.502022,7.661717,-5.823572,-1.687253,-4.360000,-2.351423,2.189500,7.915059,0.115562,-9.806365,6.932743,4.526231,4.150906,4.491558,-9.371353,0.654532,-6.266968,6.234139,5.185581,-9.664525,7.415011,1.066514,3.898013,-6.842562,8.370647,5.840671,6.873975,-3.122745,-0.909010,-1.144493,1.906419,-1.994425,6.546129,-3.551706,7.801284,-6.762954,-1.104856,-6.444721,-6.723306,-0.038318,1.144576,-7.085335,-3.614349,-7.350657,-0.414749,-4.634552,-1.465694,2.647192,-5.478950,0.721381,9.529719,5.597550,9.914093,9.448552,-6.585404,2.944322,-1.172922,-5.164163,-8.551651,4.712364,-2.194034,-7.157548,-2.248217,-0.465544,-5.640744,2.775005,4.108623,4.306327,-3.535971,-3.742312,-7.325469,-7.398789,8.795647,-7.192876,8.211539,-0.319279,2.205082,2.127676,-1.656218,-7.071229,9.316658,-9.583724,-4.530385,4.322263,8.972122,5.600144,4.160478,-4.464114,8.717703,9.533459,-3.962097,-4.161132,-2.533351,-0.904745,6.973878,0.132205,-5.399395,1.375839,8.817095,7.289404,-6.483834,0.002795,-3.328547,-3.856725,-8.304224,4.899284,5.633350,-8.245796,7.294027,-7.273610,3.510872,4.407931,-6.091541,2.540220,1.463890,-0.138050,1.498923,2.409475,1.887683,4.992281,1.086350,-8.879226,-2.939717,6.706713,3.116672,-8.324029,4.456952,-4.409562,-5.662614,-5.085422,-4.206756,8.993749,-7.051143,-7.524349,-1.207858,5.029480,-2.003172,-2.278395,-7.836077,-8.406810,-6.182475,-2.335283,-0.979212,7.572799,-2.973401,-5.504799,-4.252888,7.007734,-4.105041,-2.218679,7.597916,1.890380,8.184318,5.295372,1.188825,-3.721040,-9.291067,3.676552,4.802798,-5.974726,-3.369460,0.733980,-0.304376,9.035302,-3.026828,-2.303995,7.811345,2.613295,4.153089,-6.527813,-2.849270,-2.973577,-9.268981,6.077300,-5.848039,4.394303,-5.586314,4.108733,4.222161,0.076936,-0.152775,-3.836298,6.736990,2.620442,-9.704119,1.117139,-4.591925,2.616463,-3.567133,-0.021584,-5.652506,3.239568,-5.064476,-7.923948,-6.278349,9.382165,5.402008,-5.508367,5.609353,3.437096,-6.305016,-7.098479,2.561373,1.575143,-6.645658,-2.125136,1.244762,8.822624,5.673296,-1.441232,-2.123743,-8.755447,0.608934,-0.624537,-0.204087,-2.850942,7.974635,3.502187,-3.480425,-4.474257,6.197947,-6.697682,-8.709546,-1.287353,8.858213,8.454018,8.304258,2.709103,0.715172,1.953589,2.893125,-9.394066,9.623644,1.023528,-9.537308,-8.783609,1.005093,-4.685130,2.269691,6.926084,6.132864,-0.652543,-8.032465,5.520253,8.807305,-4.440970,-7.924408,5.993040,-1.992597,-5.574780,-5.558359,-9.659625,4.940381,-1.014047,-7.733329,8.590911,-5.897408,-9.339977,3.456566,-6.205412,-6.052575,9.591986,4.062964,-2.178861,-9.827966,-3.278080,-8.845804,-9.114690,-9.723542,-9.685817,-3.635132,-4.894233,4.554308,3.098477,7.730600,6.862642,-5.869706,-4.862493,-8.928217,-2.034010,3.381484,8.320466,2.888770,8.104074,-2.440768,-4.518514,6.802230,-1.950579,7.535375,0.324537,0.499638,6.697879,-0.993990,-0.336652,-0.597227,6.297865,1.756868,9.226207,-0.443135,-5.812747,-5.065949,2.768670,-6.082116,-4.196029,7.031212,-6.081842,9.398447,5.583020,8.377900,-4.984852,-3.052961,-9.447191,-4.861241,-1.467052,-5.708302,-6.189511,-7.416942,8.255822,4.131288,-7.679415,9.160932,2.051507,-6.156048,-6.827448,-3.410452,-5.803703,-8.967743,5.500614,-7.241967,1.390576,-1.285400,-0.033433,0.223819,5.713946,6.128131,-6.470618,-3.713972,2.752994,-9.229256,2.443991,-4.248797,4.073843,-5.857736,-1.169553,-2.649392,9.726136,0.576001,0.241936,7.050918,4.548799,7.670367,-7.147589,8.534331,-9.954495,5.436126,9.463747,3.836737,1.628875,8.609293,2.658014,0.872273,-5.583019,-5.999908,-9.918095,1.628953,-2.785610,4.352976,-2.363719,6.659567,-3.099065,-6.544935,-1.659413,-6.205234,9.830621,8.046214,5.913447,-2.550521,9.022067,-9.197148,-6.630430,2.162477,-3.485808,7.670107,-5.776382,0.854455,-2.348954,-4.563744,-7.290109,-6.181570,-4.355086,-7.594916,-6.039602,5.058281,6.040663,6.650373,2.667775,-2.498877,4.161856,1.217374,-1.289407,-7.237590,-5.311317,-5.943211,0.119496,4.188880,-2.641837,-5.390159,-9.227954,2.531464,3.971104,0.734404,8.969420,-4.396951,-3.062390,-8.169363,-3.413317,2.120373,9.660166,9.088700,-1.674032,-4.232962,-0.711888,8.058912,9.140033,-5.319644,-1.675328,8.245647,-2.201777,-4.725552,8.687561,1.551228,-3.811892,1.146763,-1.079792,-7.368752,2.339153,-8.431299,1.078872,-9.115491,-8.373403,8.806272,-1.573743,-6.806319,-4.124757,8.134103,-0.983248,-5.442422,0.643452,-2.503669,-2.887537,-6.712763,-1.074154,-0.691915,9.136601,-8.130161,8.705389,-3.463866,-1.980573,-5.166011,1.650270,9.055096,1.602899,-1.466991,6.411595,-5.178140,-8.739310,0.295031,3.903104,-3.596496,-0.031188,-6.771537,5.562413,3.705468,-6.572922,-6.622729,-3.438900,6.147238,2.187292,-7.818954,-6.022849,2.691666,-1.871781,5.460457,-9.346572,-4.917527,-1.852913,-9.327992,5.884098,-6.822148,-6.560432,3.298213,-3.577148,-7.402517,1.591160,-0.043152,5.605044,-8.347972,-5.466805,-3.469932,8.380424,0.388384,4.201231,3.687276,2.411780,-6.704956,7.035524,-5.705373,-8.087528,6.807992,-1.705020,-8.210761,3.292315,3.139632,-0.499541,-8.674084,-6.968629,-1.773387,-0.462561,-7.095392,7.234787,5.130020,-2.335950,-1.242511,-2.769184,-7.777716,7.196712,-3.161061,8.816011,-3.356055,2.952817,-9.001140,-7.383371,-8.595796,-7.769104,-3.082502,6.399059,-4.274593,-2.918529,8.000192,2.409269,7.167806,-9.525749,3.333424,5.581812,4.985225,3.204699,-8.008836,-6.284586,-3.064991,4.304060,-0.718771,-5.518499,-4.218044,6.640393,3.653773,-9.868371,3.896002,-8.710447,-2.845553,-6.646497,2.498013,5.578201,7.792640,-8.945366,1.410511,9.609157,-4.209824,-5.012033,-2.890662,-1.503077,-8.911087,-7.673408,6.227099,3.048117,-8.930107,-4.836634,0.691032,1.590916,4.672936,-5.999150,3.475109,0.353062,3.622392,-0.099139,4.509658,1.658007,4.242324,-4.564550,-6.662064,0.430711,0.409125,-6.678089,3.698022,-3.755866,8.445567,0.403451,-8.052458,6.304097,6.145992,0.529657,-3.114826,-8.722007,-7.024394,8.246557,-6.557959,4.652354,-2.774187,-4.501118,1.854165,-8.607930,4.242819,1.284909,-9.538616,1.555564,-2.569296,9.126526,4.504075,2.730743,-6.388872,8.601392,9.665079,-3.860380,-1.690640,1.541683,9.084235,1.701728,-5.776481,-9.423226,9.114182,-9.817289,-6.983187,-9.709785,4.588972,3.040047,-0.239750,5.021266,0.709451,6.841878,-2.496661,8.473304,2.508295,0.517827,0.013832,-3.928017,8.341578,4.193162,-3.373606,-4.718919,0.758288,2.359034,-9.729515,3.232748,7.203631,1.128936,6.988416,0.395167,0.119430,-9.717670,3.867571,7.646860,7.887911,-6.709364,4.943901,-7.078446,6.718203,-4.648884,-6.140126,4.668005,4.672354,1.074651,-5.382664,4.702027,6.628799,-3.128179,-2.290852,-9.501681,-4.312737,-8.102485,9.370302,-4.160393,-3.012153,-3.236347,-1.945367,-6.461228,-7.825165,4.223258,8.203929,3.127660,-1.196622,0.087276,5.998066,8.835474,-3.889314,4.744356,-1.975497,-0.563804,2.241949,8.480758,6.360458,5.986669,0.643788,-6.380979,2.501636,-7.912541,5.035464,-1.349278,5.228559,5.057404,8.844715,7.242260,-4.723112,1.236034,-9.403307,-1.188942,-5.407736,0.104242,-0.906590,-6.134237,0.256617,6.673615,-4.519699,-5.921923,0.821377,-5.782891,-1.204696,-5.813790,7.747204,-7.474252,-4.796244,9.283075,-4.264095,7.492640,-0.393312,-8.658867,-0.060277,4.460002,-8.051018,-8.593915,8.180452,-9.211413,-5.673847,-6.192444,-2.642178,7.226857,7.679884,-8.203666,2.653909,-7.694681,0.137789,-5.071126,6.465773,1.091383,5.605793,7.607521,-9.130316,-1.973552,6.901873,-3.431849,-6.867275,-0.521491,3.801840,7.181565,-5.335634,-1.863219,2.351736,7.930546,-4.789712,-5.954134,-2.627837,-4.361250,9.454086,6.489682,-8.171787,7.502406,4.859403,-6.915194,-9.323431,-4.508218,-2.762824,-1.695732,4.108053,-3.240709,-7.590096,1.564261,-9.645354,4.693126,-5.658971,-8.997632,1.194984,9.620520,-7.834937,5.840383,-7.511659,1.810073,-0.989132,-9.967591,-5.626462,-3.087661,8.236455,9.619416,8.076919,5.389325,-5.932621,-4.617898,6.244545,-2.894688,-0.360654,-0.045909,2.435570,8.614738,-7.466530,4.331527,-1.973567,7.504748,9.016263,2.415357,-7.143172,5.126919,7.693091,-7.202287,7.852270,-0.406032,-4.779086,-3.218025,-3.336155,7.474398,4.822495,6.023891,-9.091504,5.325287,-9.698168,8.262419,-9.482107,9.540419,-7.686238,-6.613424,-2.572120,4.914498,-3.952755,8.476558,9.194008,9.959314,4.651098,-6.490498,8.902087,-5.305716,6.839846,-0.409346,-6.277915,0.333585,1.275943,-9.752421,-1.685020,-6.697321,-0.381570,2.745244,7.551952,-9.015841,-8.526920,-1.917774,8.623168,8.747481,-1.690881,-8.156820,4.021272,-8.051120,4.171575,-8.082402,-8.261026,-0.381599,-3.266102,6.625658,-8.641152,1.342420,-7.527397,6.057186,-8.973948,-7.164933,-3.755109,6.992743,-5.643680,6.467132,-3.641327,9.515921,-4.516045,7.850507,-1.188578,-7.207498,8.523306,8.339790,-5.230375,9.357913,0.733263,0.243699,-0.461274,3.141023,-8.385002,-2.451612,-4.243429,-7.638326,-8.960123,-1.353433,-5.767552,0.232852,-5.129589,2.459657,2.252872,5.224772,6.268068,7.589314,3.076746,-3.412949,7.747010,-8.972715,3.015263,-7.978807,1.209986,-2.950300,-0.234070,1.911801,-8.718728,0.563757,1.182635,-6.130993,7.964710,-5.126737,-5.847475,1.994688,1.415129,8.421081,-2.383691,-7.348096,-1.808469,3.096249,0.075005,6.091112,1.241972,3.600952,9.097785,8.230999,8.852365,0.062128,5.040275,1.823027,8.406655,8.537307,2.634767,5.389676,-2.854597,-0.098376,3.977253,3.528838,-9.502522,0.122371,-3.781896,-5.207473,-9.296184,7.479685,-2.707704,-0.410162,6.265751,3.354567,-3.500040,8.883594,9.539819,-4.560984,9.794640,-0.475725,-5.822407,-0.694269,-3.181033,6.673421,-4.991458,-6.502031,9.800111,-0.330699,-8.353065,1.650493,-8.826450,9.689134,-0.147937,-7.532861,2.917796,1.757444,-2.768580,-6.076552,2.827750,5.715664,-4.125697,-3.326946,7.636959,7.438882,1.510436,-2.818049,9.319108,7.898510,9.165037,0.062868,-9.497764,-5.646267,-8.140360,-6.739417,-5.800976,-7.436269,2.591153,6.314450,0.779052,0.621851,1.138561,1.947144,5.899309,4.477153,-4.719902,-9.134494,3.175484,-3.738147,4.334666,6.367454,-9.382243,8.301811,7.568368,-8.393772,2.902072,9.100984,6.576819,3.672037,9.790663,4.372131,8.097818,1.481236,5.750155,1.170180,-4.160892,-5.299065,-9.650418,-3.477156,-5.942739,-2.999153,-7.535716,5.390470,-1.417725,9.714446,5.336028,-0.814465,-9.953823,8.445459,8.289122,-2.690739,-8.427133,-2.266726,-4.652700,-7.695494,-7.762968,-4.064293,-5.628158,-0.595478,-7.557505,-0.105439,9.391801,4.962545,-0.665871,0.159826,5.077004,4.757303,-5.364671,-2.094098,1.575455,-5.412262,5.826543,-3.797933,-2.692482,2.422649,-9.353739,-2.504824,-6.057956,5.324574,-9.680370,-2.733585,3.428679,1.706453,9.303384,-7.749593,-3.022029,-2.665431,-6.804898,5.305869,-5.881701,3.045928,9.790937,-5.720161,4.835861,-1.351678,-2.882971,2.467007,6.478858,0.553438,-2.435869,3.093256,-6.663639,4.520859,-3.497091,8.385648,8.497913,-6.284612,-3.983118,-7.570430,-8.875631,-0.281141,0.737176,-2.963823,-9.019604,8.189806,-4.302472,-0.028621,6.965493,5.199589,-0.746347,-5.221772,0.312796,-5.748850,7.527339,-3.535083,-5.974198,-8.474810,-5.978103,-9.514408,-1.604169,-6.116280,-4.985483,-8.417086,-4.755825,0.945536,-8.927786,-0.446395,-2.081361,-3.200406,8.252415,-4.212617,2.528056,3.257724,1.756214,-8.018892,1.674021,-3.846067,5.096150,6.587485,-0.632984,2.231556,-2.260480,0.061421,-4.057072,-9.484899,-3.911017,2.319277,0.380908,8.838064,-5.883281,0.091309,-3.777110,8.044553,-6.641062,9.248426,-8.453870,3.632272,-1.404067,1.915054,-9.400287,-5.621849,-5.525085,-8.920755,-1.922047,6.988966,-1.558809,9.160599,-4.246129,-7.553317,1.416454,-4.983696,-0.090654,6.225462,-0.824243,-1.486153,-9.968701,9.922022,-6.840202,5.512730,4.387155,-8.580207,6.044790,4.153600,-6.551323,-3.865348,4.086502,7.323143,-4.479595,1.009980,-6.612479,-2.090407,-1.120186,1.495125,4.236741,-8.721294,8.354918,-4.810410,-6.289033,7.280480,-9.614174,-6.155664,-9.850763,6.647498,-8.720430,5.385712,-4.164422,-7.212807,6.922821,-2.772677,-8.059333,8.555596,1.311266,-3.252387,3.161858,-5.094194,7.327628,-3.703917,5.017669,-5.760294,-4.764909,-0.816107,9.216113,4.919545,-8.942138,-4.702004,-3.979727,8.267846,1.001502,4.021033,7.114183,-6.039654,0.407657,-6.659178,1.797673,-0.468379,-1.082551,-1.200710,7.206403,-2.324595,0.086725,-6.030163,-3.657128,7.386150,1.973456,1.864751,1.639019,3.355689,-5.743473,2.737793,0.293418,8.895230,-5.973273,6.178267,0.301134,0.072789,-0.381884,4.175563,6.185028,9.746778,3.628004,3.760085,-6.219787,7.126707,-0.838219,-1.656091,0.291456,8.403546,-7.949703,4.173606,-4.272232,-6.265991,8.652379,-8.255899,4.093812,9.624612,-9.061336,3.950011,-5.048450,0.903490,7.595763,-0.282459,2.020977,-7.914626,-2.689644,5.251272,-3.870663,-2.947710,2.303879,5.954472,-2.134912,-1.252376,1.341961,8.785139,-5.864956,5.052499,5.066058,-0.426497,2.114677,-2.763051,5.363862,0.562052,3.018556,7.186525,-2.630152,9.747777,5.398555,8.319652,1.705765,-5.882622,3.790646,1.695243,0.159760,0.245933,-9.983907,6.307112,6.718329,-2.634881,-9.553545,-2.802344,-0.694860,3.007269,6.239844,-9.066202,3.879045,-1.539393,-3.379894,0.510500,-0.153223,4.664249,-3.145627,-0.802867,2.759402,7.199806,-8.209856,-8.538775,0.165890,-6.110332,-7.604054,-9.875201,-1.124779,-8.406650,-2.804493,-1.656464,-6.761989,-0.174222,-3.289335,-0.847889,8.347299,2.181825,1.976814,-1.275298,8.904512,8.857573,8.003307,-7.641177,8.154394,7.753801,-7.436227,-4.470319,3.875391,-1.747825,7.903890,2.639540,-7.282426,-7.442413,-4.236815,-0.183279,6.721374,8.449032,2.498980,-9.225613,-6.221030,7.200966,-0.855720,7.068560,-6.111803,9.071260,-2.294398,-6.878550,-8.653929,1.331870,6.279279,-4.580691,7.434942,5.741420,6.031223,3.341264,6.016637,1.658110,-8.983894,4.644144,-8.319822,-4.344312,2.725402,9.787450,7.641601,-4.428033,-3.431581,-3.427114,-6.504429,0.642232,8.998832,7.001743,8.058575,-6.303360,5.514212,-6.900967,7.250834,5.901027,3.080400,-5.013501,3.793332,0.492721,5.724269,1.614580,7.584704,-9.751018,-1.094132,-8.998943,-8.755830,7.678823,-6.668755,6.999607,7.430674,7.049905,0.347632,7.622289,-1.070254,-0.138231,-4.834199,-6.661054,-9.931181,3.827909,-2.248154,-4.159673,-3.919547,9.161616,5.597159,-6.582941,3.981810,8.973186,3.604954,9.775912,7.065018,-5.671719,8.910990,-1.508111,5.605746,-5.725776,0.730269,-0.526455,3.999016,-5.909381,-5.009682,8.568504,-8.259102,-3.352205,7.704441,-2.545411,6.949647,9.553654,4.487568,1.009119,7.160038,-5.993704,-5.047798,-8.711077,-8.703934,3.201795,-6.715143,-8.555074,4.219837,-1.754219,-0.981778,-8.112925,3.135894,9.374831,6.765066,1.956341,-2.986427,4.662714,-4.431702,-2.706696,-1.857932,7.847037,-9.229934,-6.264063,-7.047937,1.975642,7.212841,5.349700,9.678026,2.510869,5.293084,9.017613,-1.879765,-3.813579,-7.024794,-7.746657,-5.339197,9.476937,0.411361,5.041031,5.517968,0.934639,-4.659289,2.120583,6.725354,-6.449728,-9.856680,-3.329530,-4.899784,0.065068,-9.649050,3.674443,-1.750242,5.723138,-5.363200,5.685640,9.680282,-9.435818,7.404352,6.036565,-9.080366,9.214824,2.771257,-2.643284,5.616739,6.445182,6.901787,-9.422578,0.055770,0.898079,-4.664803,7.303676,0.675647,3.220592,-0.768143,5.003335,-1.589717,3.902826,1.068760,0.018542,0.398195,-0.713662,-5.423385,-9.772769,-2.670082,7.054944,7.863645,4.323785,5.681369,1.001807,5.622034,-3.718879,-1.135821,-4.328767,8.606781,-9.948399,-5.183050,2.830128,8.014535,-6.738691,-1.324717,6.706733,7.219225,-5.846555,7.328854,-2.696952,4.236004,4.140444,-5.138959,1.682465,5.869382,-9.051372,-4.912921,-8.139957,-8.727663,7.278821,9.145589,-1.170700,1.993359,9.632756,-0.229268,-3.783283,-4.179843,5.527676,2.494135,7.666883,-2.603637,-8.527834,1.488587,4.857064,0.208183,-3.745538,6.632077,6.085609,-8.019822,4.385301,-5.646213,-9.288450,7.743261,0.319342,-6.850119,-2.089964,5.100135,5.870609,6.447856,-0.123463,6.359925,6.745185,8.932472,-0.109834,3.113815,-6.447913,4.992432,5.341024,7.952384,8.457360,0.562453,-0.199753,-5.115980,4.808634,-7.983914,-1.806142,5.206716,-8.160090,6.145356,-0.041164,8.812409,-2.147590,9.017742,4.370567,3.723705,-5.953662,-5.375423,0.488425,-3.929054,1.029173,-3.082357,-3.744474,4.071394,-4.044562,6.640951,-8.425413,4.515618,0.677429,-5.618053,3.373083,1.914458,-4.081931,4.266107,-5.739613,-6.074323,-6.996752,-4.398804,-7.149909,-8.116429,-8.278762,0.385621,-2.884632,5.777413,1.714171,-2.474426,7.615623,-6.302836,-7.672879,5.728092,3.895242,-3.662741,-4.150274,0.621062,-4.133536,8.001830,5.310245,6.016873,-6.822962,-5.327374,-8.960146,-8.246640,-9.659781,2.324773,-2.075906,-5.114128,7.376288,-3.953871,4.143635,-2.237779,3.952930,-7.820793,0.736580,-3.954123,-6.999733,2.219074,1.314598,7.799713,4.930193,-8.829113,2.317568,0.854075,2.844365,9.816725,8.731990,7.185560,3.512695,-7.665514,8.967046,-9.438101,6.978758,0.651311,-9.819740,-3.275240,3.297708,3.072947,4.106293,4.448267,-0.001219,8.319565,9.547082,-6.968340,-3.517757,6.274452,3.294818,-1.466381,6.970540,-5.815509,-8.436864,7.454032,1.690233,-0.457280,-4.522758,-2.149606,-2.483354,-8.963703,-8.702933,0.756907,2.019703,-7.815573,-0.837054,9.987530,-7.558708,0.583574,2.383614,5.128540,-0.597078,0.173579,2.483522,0.169016,-6.006416,2.902026,0.849854,6.133192,8.257950,8.247963,-9.386929,-8.530500,-6.147918,1.800494,-3.746724,5.258598,5.198580,2.928770,-3.718793,-8.735687,5.963921,3.579473,-2.763992,0.426703,-9.864289,-5.279953,-0.177305,-3.387140,-3.004609,-9.854898,-9.331069,5.385902,-6.374693,-6.123457,-4.316396,2.692117,5.578431,-8.952294,-7.316377,8.698768,-2.707380,0.413457,-9.201259,-6.347896,-4.219504,-5.337744,-4.999527,-3.975878,-5.875403,2.617005,3.037849,-3.356803,1.625488,3.577724,0.714672,-6.884437,-9.691358,-4.631943,7.144727,6.690068,1.759239,-6.911458,-5.895506,-9.949581,-2.829845,0.695191,0.940346,-3.165755,-6.979234,-5.158524,-7.165692,3.323518,-8.515680,-4.507133,-4.859223,0.664491,9.600947,5.953619,-3.277809,-5.492726,5.908424,8.282984,-0.563741,1.670943,0.985979,-3.202507,0.715028,-4.023703,5.869958,2.260485,-6.264848,0.210501,9.231117,3.343095,-7.611094,-0.395542,3.924536,-1.523714,4.370950,-9.934768,0.388829,-9.243009,8.391886,7.106165,4.903555,-2.429661,6.915769,7.182737,9.923550,1.630757,7.482620,7.088749,2.985983,-1.068746,-2.520417,9.966975,7.150346,-9.929795,-9.733164,3.362660,-2.407064,6.303738,2.203669,-3.424102,-2.314634,-6.812857,4.348476,-2.576598,-4.096877,9.730209,-4.584419,-0.792583,5.756881,-3.630462,-6.129158,1.016815,9.033935,9.224924,-6.407356,3.791659,5.952126,-6.936923,-8.214353,6.056118,5.901348,7.160001,6.785126,2.090781,-5.472979,-8.722311,3.017976,1.047339,-1.457378,3.442289,8.009233,9.764872,-9.493684,0.819278,6.353022,9.129084,-6.437113,-2.683540,2.451359,-4.645015,5.460242,-0.555302,-6.161321,7.813938,-0.499111,2.041311,-9.433994,-1.689294,-5.228969,8.553654,-4.217848,-1.527546,3.570693,-9.242424,-4.288103,-2.185590,1.383853,-5.027522,-6.400381,5.736894,-2.447672,-0.191087,9.658628,-8.155412,4.074165,9.770417,-0.126460,-0.454853,-3.845049,-9.123767,0.063740,-8.112808,-7.527640,-2.897726,0.412528,6.547848,0.169714,-4.050467,6.368511,-7.762937,-6.133273,-9.158678,-3.430175,-2.235709,-6.271919,4.840020,2.651548,-0.030530,7.339746,-9.468188,-5.632957,-5.158946,-5.978167,7.479034,1.562711,-0.644053,7.586731,2.386046,0.211008,2.486878,-5.265883,4.382945,-9.256646,8.061909,-7.383204,-3.391003,-5.924354,-3.278613,3.503670,-0.293423,-3.682092,-9.430069,9.837428,2.610836,6.616360,-4.484787,6.901991,9.467189,-8.974205,2.730108,5.664981,5.030623,9.222422,-8.646104,6.259745,9.797576,1.662012,-8.887226,0.530495,8.948556,-6.331907,0.302239,9.627605,1.976723,2.361717,-8.051984,1.407125,-1.614590,-5.351066,6.710638,9.363014,0.080713,2.614770,-8.265830,1.898916,1.746887,5.454542,4.492090,-2.536276,-1.563491,-0.255491,-7.587201,3.597585,-0.297901,6.920845,4.910024,-1.612908,5.102937,-3.774215,2.775376,4.927435,3.229212,5.027938,7.717174,-7.312850,7.150697,-9.642437,-1.511795,7.470638,1.640576,-1.786911,7.777814,8.422954,-7.800062,-7.366059,0.636716,5.888425,9.673429,-7.322417,-7.829628,-1.735400,3.248242,8.819960,-4.741038,-0.010733,6.170343,7.938874,1.810190,7.221546,-5.524142,8.683229,4.748802,7.464882,6.406473,3.525763,-7.978377,-5.219098,-9.239933,8.200129,-9.804763,6.428921,-4.022683,-7.062973,4.355110,-7.862239,-1.232934,-6.979485,-4.567681,-4.538361,0.545245,2.702504,1.458728,0.525411,6.788626,3.397225,-0.454215,4.626840,8.250660,-6.469189,8.045986,-2.358859,1.107544,1.804208,-3.537893,1.053831,3.771451,5.630391,-1.176290,-4.747969,9.044884,3.778734,-2.242022,1.162585,4.121699,3.822790,-3.206059,-4.609374,-8.405471,2.567674,3.177285,-6.075321,3.386386,2.558828,-9.922573,7.229181,4.184782,9.816873,7.487709,7.240892,-7.135777,9.716123,0.203508,-9.069097,3.535859,-6.842887,1.821686,4.165526,6.407769,-5.741922,-1.768810,7.614068,3.565703,-9.135524,3.420441,6.792599,-1.540952,-6.879340,-8.393726,0.798906,-0.614752,-1.710390,-1.853797,-8.996941,-1.996893,9.298761,-1.890850,1.278195,5.210430,-3.843554,9.182596,-5.305816,-7.478649,3.059545,-7.889820,-6.893496,7.600626,-2.568850,-9.306741,5.752435,3.698381,-2.814760,1.588675,4.110313,2.783308,-4.679742,0.739356,-2.682048,7.210404,-9.791233,-5.998952,9.359067,8.652666,0.243437,-0.059031,1.397601,3.160955,-8.543686,5.436306,9.311767,1.648975,2.828962,-3.153986,6.295881,-1.484770,9.261434,-2.624886,-1.544961,-7.627272,-7.311434,-8.782094,2.709892,1.578296,-4.199443,1.152865,6.212950,0.226550,-9.159516,-7.522329,-3.693658,3.591245,0.489657,-4.153640,-3.325958,1.360346,3.505777,-1.369504,6.755972,-4.133210,-9.208812,1.541159,7.738723,-7.829183,-7.800408,5.710582,3.624073,0.964886,-1.476455,-5.985224,-7.205718,2.908661,9.309610,-7.232937,5.778418,7.957731,4.562822,5.635861,1.586355,-0.920061,-2.455575,-8.361110,-9.577608,-9.869994,1.982403,9.950446,-9.084348,-5.182647,-5.752386,-6.331566,5.616102,5.637618,-3.086588,6.449879,1.808769,-7.331688,2.761708,2.343589,-8.774519,4.524760,0.141115,4.479655,6.753225,0.259034,4.891822,-2.747862,2.135141,6.563193,-8.183610,-1.714427,-0.454020,-8.067949,6.081593,7.279391,8.018903,-3.258859,-1.043218,8.653061,6.578385,4.856443,-4.861841,1.287645,-7.384270,-7.672973,-4.078483,-9.212809,2.184036,-6.425823,-6.274918,-0.899506,-7.126499,-9.489305,-0.212951,9.774838,1.465533,-8.216922,-6.690896,9.645721,-6.859758,8.035219,-0.813901,9.571811,-0.603407,0.492505,-5.383736,7.303653,-0.338957,9.604779,9.762638,-2.937430,2.465239,-5.796863,-3.405467,-5.423887,6.831635,0.857704,4.027639,3.653126,8.313483,3.624202,-3.613526,-5.734379,-4.666044,-9.507958,-6.738046,-5.489265,9.486856,0.433704,2.187760,6.655264,-7.912591,-8.024702,1.560285,3.198341,-9.287465,-8.001091,1.271632,8.480590,-0.794108,5.476909,-7.462825,5.521981,8.940262,-3.309015,-6.860963,6.509662,-1.039919,8.708736,-8.274269,-2.956948,2.363738,7.961342,-2.671523,-0.316983,-5.057451,7.307502,-2.723382,1.031334,-7.566539,-1.677924,8.664537,9.206032,3.101692,1.286784,4.812699,3.284814,2.675272,-4.712708,1.811095,-0.778263,-0.136752,1.112811,-0.971374,-7.917078,-6.181122,-8.010126,2.571043,5.818536,-2.485121,-1.862578,0.713855,-8.518596,-2.512386,-4.109846,2.277287,-6.139124,-0.406418,-8.250849,-7.613803,3.162362,7.557782,-7.517111,7.982067,-2.314190,-8.265188,-0.152757,-5.946548,-3.647455,1.446661,-1.432024,-2.933731,-6.357124,-1.160252,1.347693,-5.828474,6.102634,-7.702423,-7.735034,-6.280547,7.708312,1.478831,-8.138837,-6.833037,-6.371132,9.801190,2.275535,8.401060,-1.875611,-5.175712,-4.003418,2.390119,0.646256,5.372293,0.631629,-8.502081,2.761277,-8.473971,4.138326,-9.436391,-9.640710,-6.633835,6.015790,-2.138890,-6.634503,-0.669040,0.819881,-3.926643,8.339652,-7.954899,1.530864,-0.844619,-7.397429,-9.861701,5.116940,3.172480,-5.492391,2.517498,-4.803784,-5.611801,4.099921,7.239561,-5.440957,8.596910,-2.170778,-9.529947,-3.896990,-6.399895,-6.920892,-8.433120,2.696903,4.907820,1.409996,-1.255861,-0.424214,-8.273521,8.264351,-2.604030,-5.545274,6.164146,1.405500,-9.050116,-1.072549,-4.084874,-5.142417,9.699758,3.291118,5.615833,4.240964,-0.450360,-0.685023,9.183909,-3.028181,8.351150,7.653314,0.953284,5.841082,-1.415952,-7.630254,-6.306045,3.713572,5.890255,-9.273742,-1.691742,-8.977473,-2.798792,8.483991,-9.353739,4.242151,-6.133716,-6.321942,-2.541382,-7.954319,-2.578317,8.862321,4.539137,-1.486177,4.239922,1.316580,-9.276334,-0.595895,2.224169,4.840796,-0.370322,7.570972,0.200590,-2.532314,1.413697,8.817230,-4.821610,-7.712585,2.106689,-3.746543,-5.212116,-5.954777,5.969404,9.294744,6.760413,-0.875794,3.204152,-3.825083,4.878441,-8.891079,8.999346,-3.047108,4.089191,0.682845,6.977027,0.357014,-7.031683,4.498574,3.461311,-8.999366,5.948356,-0.735601,-3.636311,5.031215,2.740247,0.214950,2.876304,-1.050972,-1.792782,-0.384110,0.654551,6.570197,1.857994,5.304158,8.852842,7.960739,-8.413928,-4.408898,9.717646,6.746116,7.855586,4.826294,-1.827272,5.680463,-8.078330,6.968200,-8.473162,9.016804,4.106489,-5.410153,-0.219905,7.575831,3.949654,2.139074,2.954755,0.812322,3.211109,-6.388224,9.822236,2.543492,2.712083,0.340653,7.235658,6.910839,-2.087098,-6.247754,-4.360642,7.930944,9.564661,-8.793172,2.536768,9.348306,-1.933136,0.398288,-4.605062,3.021599,4.653032,9.419021,3.327414,8.727858,-0.233028,-0.946175,8.965302,-1.656727,2.053037,1.640451,-7.257951,7.832663,-7.966390,-7.423537,0.950613,-7.880024,0.774412,-8.993398,9.736545,-6.929590,7.663062,-3.250278,-2.438450,4.548294,6.559277,7.041232,5.151067,-1.037347,0.073240,-7.524582,4.509563,5.537092,-5.848204,3.682439,1.995049], dtype = "float32")#candidate|7418|(2688,)|const|float32
const_7419 = relay.const([1.805974,-6.056344,5.986557,8.870807,-3.708413,4.181166,1.768347,8.663634,-0.781606,-1.179735,2.367988,9.079150,-7.321890,-9.402132,1.082513,4.651264,-2.262872,2.761684,0.158185,-5.054594,0.268563,4.364642,-7.996748,4.660855,0.504555,-0.622478,-2.462312,4.480075,-2.785217,5.407197,7.732410,-7.846611,-8.827279,2.498487,-9.659039,8.301631,-2.241289,-0.379293,-3.342011,5.667175,-3.149953,-9.894065,9.401344,6.540387,-6.930896,2.854815,-4.495885,4.581012,6.510984,-2.186415,-5.903818,6.530047,-2.321668,0.289530,3.283957,-9.177793,-9.486390,4.282438,3.278970,8.974257,3.856943,3.690955,-5.675314,-2.074904,-4.394944,8.927830,8.148711,1.781313,8.808596,-2.468213,9.170964,-5.205970,2.779007,6.054378,-3.759895,-1.982683,4.109155,7.751100,-8.869488,3.826951,5.697809,4.775995,6.554946,-4.297420,8.859063,-5.026462,-3.558567,-5.214583,-2.444427,-5.070644,-9.544033,-3.394910,-3.968950,9.763246,2.547367,6.188817,-7.528607,0.932865,4.161342,-4.085765,-2.096408,4.065577,0.473836,6.156694,6.236018,-7.961464,-5.192254,8.100023,8.338617,-2.904778,0.407269,9.792569,-2.387368,-2.798379,-5.485264,6.377299,7.925658,8.367434,-9.448140,-1.145645,-3.661066,-0.130348,1.406508,-5.162502,-5.039073,6.692068,-2.120471,5.096025], dtype = "float32")#candidate|7419|(128,)|const|float32
var_7420 = relay.var("var_7420", dtype = "uint64", shape = ())#candidate|7420|()|var|uint64
const_7421 = relay.const([5,6,-4,-9,-10,-5,-7,3,-8,5,-3,-3,7,-8,-4,3,6,5,2,1,6,4,-6,7,9,-1,8,3,-3,4,-5,7,8,1,8,3,-7,-7,-6,-6,-6,-7,-2,2,3,-5,4,-10,-5,-4,5,7,6,5,-10,-9,10,3,-6,9,10,8,5,-8,-8,-3,2,5,6,2,-10,2,-6,-4,-9,-2,7,5,-7,-4,7,-8,-7,-9,-2,9,-9,-4,8,-7,-10,-8,-8,-1,-5,-10,2,3,10,4,-10,-5,-6,6,-6,-4,4,3,4,7,-7,-4,-2,10,-9,-3,7,-2,7,-10,-4,9,-4,-10,-6,-2,3,-4,4,-6,-8,4,6,-10,-5,-6,-3,-7,-9,9,-3,2,6,-10,10,3,-6,3,4,-7,-2,-8,-9,-5,-3,8,3,1,-6,10,-10,3,-2,7,10,5,-8,8,-1,10,7,-9,7,-10,2,8,10,7,10,8], dtype = "uint64")#candidate|7421|(180,)|const|uint64
var_7422 = relay.var("var_7422", dtype = "int8", shape = (176,))#candidate|7422|(176,)|var|int8
call_7417 = relay.TupleGetItem(func_4380_call(relay.reshape(const_7418.astype('float32'), [14, 16, 12]), relay.reshape(const_7419.astype('float32'), [4, 32]), relay.reshape(var_7420.astype('uint64'), []), relay.reshape(const_7421.astype('uint64'), [180,]), relay.reshape(call_7402.astype('int32'), [1680,]), relay.reshape(var_7422.astype('int8'), [176,]), ), 1)
call_7423 = relay.TupleGetItem(func_4387_call(relay.reshape(const_7418.astype('float32'), [14, 16, 12]), relay.reshape(const_7419.astype('float32'), [4, 32]), relay.reshape(var_7420.astype('uint64'), []), relay.reshape(const_7421.astype('uint64'), [180,]), relay.reshape(call_7402.astype('int32'), [1680,]), relay.reshape(var_7422.astype('int8'), [176,]), ), 1)
output = relay.Tuple([uop_7395,call_7402,var_7403,call_7407,const_7408,var_7409,const_7410,call_7412,var_7413,call_7417,const_7418,const_7419,var_7420,const_7421,var_7422,])
output2 = relay.Tuple([uop_7395,call_7404,var_7403,call_7411,const_7408,var_7409,const_7410,call_7414,var_7413,call_7423,const_7418,const_7419,var_7420,const_7421,var_7422,])
func_7431 = relay.Function([var_7394,var_7403,var_7409,var_7413,var_7420,var_7422,], output)
mod['func_7431'] = func_7431
mod = relay.transform.InferType()(mod)
var_7432 = relay.var("var_7432", dtype = "float32", shape = (15, 7, 5))#candidate|7432|(15, 7, 5)|var|float32
var_7433 = relay.var("var_7433", dtype = "int32", shape = (1680,))#candidate|7433|(1680,)|var|int32
var_7434 = relay.var("var_7434", dtype = "uint8", shape = (14, 96))#candidate|7434|(14, 96)|var|uint8
var_7435 = relay.var("var_7435", dtype = "float32", shape = (1, 1155))#candidate|7435|(1, 1155)|var|float32
var_7436 = relay.var("var_7436", dtype = "uint64", shape = ())#candidate|7436|()|var|uint64
var_7437 = relay.var("var_7437", dtype = "int8", shape = (176,))#candidate|7437|(176,)|var|int8
output = func_7431(var_7432,var_7433,var_7434,var_7435,var_7436,var_7437,)
func_7438 = relay.Function([var_7432,var_7433,var_7434,var_7435,var_7436,var_7437,], output)
mutated_mod['func_7438'] = func_7438
mutated_mod = relay.transform.InferType()(mutated_mod)
const_8544 = relay.const([[[0.092059,4.294258,8.337094,-6.476302],[-3.993761,5.693316,2.391686,-4.626313],[-1.191348,7.399547,5.659110,-0.266784],[-3.316384,8.691751,3.347603,6.113968],[5.894122,6.778249,6.242220,-5.828461],[8.041633,-1.923259,-9.366808,-3.564583],[9.375263,2.513076,0.288402,-3.612724],[-5.801919,-4.301015,-4.198199,-4.525665],[-7.547102,-1.439538,8.374647,-4.393953],[-8.737263,5.680868,0.091383,7.893056],[-2.314495,-4.381319,5.894994,7.772002],[-2.043712,2.569473,2.700164,-0.127226]],[[-7.149320,2.285441,-5.670566,-6.425455],[-3.759418,0.463189,7.794140,0.047616],[9.263098,3.197384,-4.939425,4.702143],[-6.982480,2.818776,-9.670710,-9.769068],[9.134177,2.545562,0.358721,-8.522341],[7.299077,0.534763,4.604644,-2.179468],[-2.212595,1.996849,-7.424037,2.488243],[7.346378,9.931351,8.420124,-9.648317],[9.009006,-4.028960,2.590173,4.778728],[-0.048040,0.532002,7.621148,-0.169088],[5.413362,-5.579047,-0.607966,8.725162],[-8.985362,-8.947235,-0.529597,-5.811057]],[[-1.406707,-0.205008,-6.410514,-5.042323],[-1.939312,-5.933461,-8.157071,-2.650933],[-7.495634,7.552458,-4.710194,-9.525095],[5.793084,-9.724377,-5.190427,-9.763350],[8.352351,-0.623998,-2.407889,-0.746266],[4.802685,-9.437413,-8.395735,9.477065],[3.890677,2.824954,9.580982,-4.452186],[-8.216209,-7.480055,-8.456017,3.975799],[5.586846,9.217936,1.658793,8.180043],[-9.041079,-9.117250,-5.959432,7.073514],[-9.807747,6.016559,-3.560094,9.133937],[0.099666,1.062438,-6.825214,3.318080]]], dtype = "float32")#candidate|8544|(3, 12, 4)|const|float32
uop_8545 = relay.cosh(const_8544.astype('float32')) # shape=(3, 12, 4)
output = uop_8545
output2 = uop_8545
func_8556 = relay.Function([], output)
mod['func_8556'] = func_8556
mod = relay.transform.InferType()(mod)
output = func_8556()
func_8557 = relay.Function([], output)
mutated_mod['func_8557'] = func_8557
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8556_call = mod.get_global_var('func_8556')
func_8557_call = mutated_mod.get_global_var('func_8557')
call_8592 = func_8556_call()
call_8593 = func_8556_call()
output = call_8592
output2 = call_8593
func_8608 = relay.Function([], output)
mod['func_8608'] = func_8608
mod = relay.transform.InferType()(mod)
output = func_8608()
func_8609 = relay.Function([], output)
mutated_mod['func_8609'] = func_8609
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8608_call = mod.get_global_var('func_8608')
func_8609_call = mutated_mod.get_global_var('func_8609')
call_8677 = func_8608_call()
call_8678 = func_8608_call()
output = relay.Tuple([call_8677,])
output2 = relay.Tuple([call_8678,])
func_8701 = relay.Function([], output)
mod['func_8701'] = func_8701
mod = relay.transform.InferType()(mod)
mutated_mod['func_8701'] = func_8701
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8701_call = mutated_mod.get_global_var('func_8701')
call_8702 = func_8701_call()
output = call_8702
func_8703 = relay.Function([], output)
mutated_mod['func_8703'] = func_8703
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8556_call = mod.get_global_var('func_8556')
func_8557_call = mutated_mod.get_global_var('func_8557')
call_8781 = func_8556_call()
call_8782 = func_8556_call()
var_8788 = relay.var("var_8788", dtype = "float32", shape = (3, 12, 4))#candidate|8788|(3, 12, 4)|var|float32
bop_8789 = relay.less(call_8781.astype('bool'), relay.reshape(var_8788.astype('bool'), relay.shape_of(call_8781))) # shape=(3, 12, 4)
bop_8792 = relay.less(call_8782.astype('bool'), relay.reshape(var_8788.astype('bool'), relay.shape_of(call_8782))) # shape=(3, 12, 4)
output = bop_8789
output2 = bop_8792
func_8801 = relay.Function([var_8788,], output)
mod['func_8801'] = func_8801
mod = relay.transform.InferType()(mod)
var_8802 = relay.var("var_8802", dtype = "float32", shape = (3, 12, 4))#candidate|8802|(3, 12, 4)|var|float32
output = func_8801(var_8802)
func_8803 = relay.Function([var_8802], output)
mutated_mod['func_8803'] = func_8803
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8556_call = mod.get_global_var('func_8556')
func_8557_call = mutated_mod.get_global_var('func_8557')
call_8813 = func_8556_call()
call_8814 = func_8556_call()
var_8844 = relay.var("var_8844", dtype = "float32", shape = (3, 12, 4))#candidate|8844|(3, 12, 4)|var|float32
bop_8845 = relay.bitwise_and(call_8813.astype('uint64'), relay.reshape(var_8844.astype('uint64'), relay.shape_of(call_8813))) # shape=(3, 12, 4)
bop_8848 = relay.bitwise_and(call_8814.astype('uint64'), relay.reshape(var_8844.astype('uint64'), relay.shape_of(call_8814))) # shape=(3, 12, 4)
uop_8864 = relay.erf(var_8844.astype('float32')) # shape=(3, 12, 4)
output = relay.Tuple([bop_8845,uop_8864,])
output2 = relay.Tuple([bop_8848,uop_8864,])
func_8866 = relay.Function([var_8844,], output)
mod['func_8866'] = func_8866
mod = relay.transform.InferType()(mod)
var_8867 = relay.var("var_8867", dtype = "float32", shape = (3, 12, 4))#candidate|8867|(3, 12, 4)|var|float32
output = func_8866(var_8867)
func_8868 = relay.Function([var_8867], output)
mutated_mod['func_8868'] = func_8868
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8556_call = mod.get_global_var('func_8556')
func_8557_call = mutated_mod.get_global_var('func_8557')
call_8882 = func_8556_call()
call_8883 = func_8556_call()
output = relay.Tuple([call_8882,])
output2 = relay.Tuple([call_8883,])
func_8907 = relay.Function([], output)
mod['func_8907'] = func_8907
mod = relay.transform.InferType()(mod)
mutated_mod['func_8907'] = func_8907
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8907_call = mutated_mod.get_global_var('func_8907')
call_8908 = func_8907_call()
output = call_8908
func_8909 = relay.Function([], output)
mutated_mod['func_8909'] = func_8909
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8608_call = mod.get_global_var('func_8608')
func_8609_call = mutated_mod.get_global_var('func_8609')
call_8999 = func_8608_call()
call_9000 = func_8608_call()
var_9004 = relay.var("var_9004", dtype = "float32", shape = (3, 12, 4))#candidate|9004|(3, 12, 4)|var|float32
bop_9005 = relay.logical_or(call_8999.astype('bool'), relay.reshape(var_9004.astype('bool'), relay.shape_of(call_8999))) # shape=(3, 12, 4)
bop_9008 = relay.logical_or(call_9000.astype('bool'), relay.reshape(var_9004.astype('bool'), relay.shape_of(call_9000))) # shape=(3, 12, 4)
output = relay.Tuple([bop_9005,])
output2 = relay.Tuple([bop_9008,])
func_9009 = relay.Function([var_9004,], output)
mod['func_9009'] = func_9009
mod = relay.transform.InferType()(mod)
var_9010 = relay.var("var_9010", dtype = "float32", shape = (3, 12, 4))#candidate|9010|(3, 12, 4)|var|float32
output = func_9009(var_9010)
func_9011 = relay.Function([var_9010], output)
mutated_mod['func_9011'] = func_9011
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8556_call = mod.get_global_var('func_8556')
func_8557_call = mutated_mod.get_global_var('func_8557')
call_9081 = func_8556_call()
call_9082 = func_8556_call()
func_7183_call = mod.get_global_var('func_7183')
func_7186_call = mutated_mod.get_global_var('func_7186')
const_9100 = relay.const([-7.485937,-0.098048,-4.836940,-0.996669,-1.500216,7.422049,-8.540567,-3.531282,4.350411,-4.892341,4.812824,-6.021430,-3.868065,9.701565,6.955872,0.980480,-7.094910,1.946349,0.258915,0.202425,-9.588813,-8.066263,7.826455,8.453440,5.084615,-3.681407,9.916470,-3.223532,1.635904,-3.198247,-8.159166,1.160811,3.966532,4.322975,-5.682643,-0.460824,2.451182,7.652510,-0.629900,-5.505640,6.140733,-6.017786,6.517531,-0.271298,-2.892431,6.861343,-4.777431,4.558595,7.407014,-5.132079,3.317187,5.921442,2.029070,1.051021,8.477799,5.871166,-0.683778,8.967812,-5.177726,0.629179,-0.911097,6.114179,3.073525,3.535426,1.321238,-9.735733,-4.967779,-1.683152,2.978387,3.300657,3.134623,5.944360,-7.086780,0.832256,-4.146782,9.885751,-0.468969,7.945899,3.167846,-5.839374,-8.971311,3.026395,-4.882901,1.090143,-7.692645,-3.592974,7.976388,2.293011,4.218697,2.701480,2.577426,-0.802404,7.787371,6.646194,-6.346214,-5.023367,8.289703,-5.123723,4.626009,6.623305,-0.775154,2.039356,4.895567,-6.601644,2.671965,-6.540673,-2.644791,-0.845534,-9.849427,6.385002,-6.990658,4.032572,3.371453,6.813628,1.436538,-7.957945,8.034626,-5.213879,1.795336,1.871644,-6.844899,0.493912,-0.538247,-4.893786,-0.858137,-5.625570,0.498644,-3.028996,4.864007,2.697368,-4.010238,-3.715171,9.353331,-5.379448,0.876189,-6.090202,1.349223,0.191053,1.356136,-6.625547,2.512446,-7.808361,-7.051064,6.635360,2.551126,5.114792,0.605008,4.268389,-9.273597,8.546395,4.879842,9.561260,1.890582,-2.086176,-1.332507,-3.838873,5.088919,3.938788,5.941852,9.521770,6.132204,-8.450386,2.638413,-8.706960,2.479475,6.205206,2.316746,4.949274,4.014043,9.726160,-2.994916,5.169981,8.105756,-6.757842,-9.511453,5.571569,-5.045965,-6.821778,8.047100,4.403693,-5.801797,5.187429,4.328042,-1.758016,-1.513732,-8.297834,-1.284304,0.953851,-8.125025,-7.598946,8.979493,4.629125,-0.839668,8.231734,-4.360018,-3.512168,-0.491203,-0.686526,6.066405,-5.601161,-1.636238,-8.550109,2.032388,-4.475861,8.394529,-1.244394,-4.205291,-3.572760,1.776391,-4.496835,-4.007699,-7.105555,-5.076450,-8.087586,4.629757,-4.979507,-7.130356,-8.548480,-4.831569,8.539536,-9.619680,-1.367022,2.125249,2.712588,9.597564,-9.734546,-9.908491,-0.807329,9.503043,-8.942126,4.362313,5.984506,-4.329738,9.514368,-9.113869,-7.823991,-2.623166,-8.375073,-2.104004,-0.318923,2.819696,7.959465,2.216232,6.685132,3.758066,-5.950687,-9.671691,-6.298239,3.872310,4.517290,-5.086484,-1.805432,-6.707538,9.128378,-1.879894,-5.690302,-6.032368,-2.830799,1.108756,7.607303,0.879443,-6.185198,7.831170,-0.088984,-9.400003,-7.488317,-0.733519,-5.653664,5.469313,3.924032,7.792517,-4.343896,2.507912,-1.561471,-2.422877,2.219912,1.771295,1.410152,-0.908096,5.067073,7.869758,-3.059552,6.992838,-8.853308,-1.499222,-1.244583,-7.459298,9.331897,4.621035,-5.626395,9.766006,-1.513007,0.711885,7.651792,1.797759,9.125586,9.776180,-3.272022,-8.971561,2.964528,-5.684647,-5.422171,-7.738570,6.229237,2.547947,3.388949,3.970458,7.948973,4.603140,3.754156,-7.085158,6.817105,-8.439511,-8.436722,9.647547,9.233056,5.196145,-8.787084,4.054398,-9.352678,3.049051,-7.424676,0.796650,-6.049928,-3.324054,6.375913,-5.946400,-5.645666,1.339562,7.312095,7.243609,-4.014756,-6.911254,-1.326258,-5.951642,6.287785,2.006245,1.634004,0.972836,3.741228,9.704615,-4.006056,-9.768259,-8.934815,1.674790,-5.140555,-3.608942,-4.233930,3.541709,-5.382862,1.216014,5.095290,3.785763,0.095892,-0.361405,7.265031,1.855638,1.670769,-0.326976,5.595212,1.562853,-9.389550,6.297875,7.413032,-6.873960,-9.520285,9.695108,-6.693760,-7.984118,8.786990,-4.569757,-5.486863,7.641773,5.812774,8.731953,1.071493,-0.613712,-0.815336,-4.090981,-7.543757,-3.731840,-5.135001,4.879456,-4.510775,-6.531824,-4.174131,-3.049452,6.497356,9.652191,-3.483539,5.914708,6.376549,1.865443,5.416191,8.176853,-5.200642,6.313475,2.954443,1.163310,-4.128309,-8.039979,6.833856,-6.373080,-7.786731,3.580283,-4.611751,-5.052811,7.233865,-8.804088,-7.258790,-1.438073,1.854388,6.240123,-8.305222,-9.550711,5.048249,-0.744856,-1.741795,0.195372,-5.580755,6.071165,3.502189,-4.229981,6.215571,-4.574697,1.940347,3.709362,-6.664153,7.179364,1.366653,9.643640,-1.579030,6.593160,-2.891934,9.523422,-8.725632,-9.904959,7.138329,-2.622591,9.708553,-9.363770,5.804352,1.545715,-0.363403,9.049195,-2.760920,-8.035151,-4.456246,8.099145,-4.629557], dtype = "float32")#candidate|9100|(450,)|const|float32
call_9099 = relay.TupleGetItem(func_7183_call(relay.reshape(const_9100.astype('float32'), [6, 15, 5])), 1)
call_9101 = relay.TupleGetItem(func_7186_call(relay.reshape(const_9100.astype('float32'), [6, 15, 5])), 1)
output = relay.Tuple([call_9081,call_9099,const_9100,])
output2 = relay.Tuple([call_9082,call_9101,const_9100,])
func_9105 = relay.Function([], output)
mod['func_9105'] = func_9105
mod = relay.transform.InferType()(mod)
mutated_mod['func_9105'] = func_9105
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9105_call = mutated_mod.get_global_var('func_9105')
call_9106 = func_9105_call()
output = call_9106
func_9107 = relay.Function([], output)
mutated_mod['func_9107'] = func_9107
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9105_call = mod.get_global_var('func_9105')
func_9107_call = mutated_mod.get_global_var('func_9107')
call_9120 = relay.TupleGetItem(func_9105_call(), 0)
call_9121 = relay.TupleGetItem(func_9107_call(), 0)
output = relay.Tuple([call_9120,])
output2 = relay.Tuple([call_9121,])
func_9129 = relay.Function([], output)
mod['func_9129'] = func_9129
mod = relay.transform.InferType()(mod)
output = func_9129()
func_9130 = relay.Function([], output)
mutated_mod['func_9130'] = func_9130
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8907_call = mod.get_global_var('func_8907')
func_8909_call = mutated_mod.get_global_var('func_8909')
call_9131 = relay.TupleGetItem(func_8907_call(), 0)
call_9132 = relay.TupleGetItem(func_8909_call(), 0)
output = call_9131
output2 = call_9132
func_9147 = relay.Function([], output)
mod['func_9147'] = func_9147
mod = relay.transform.InferType()(mod)
output = func_9147()
func_9148 = relay.Function([], output)
mutated_mod['func_9148'] = func_9148
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9129_call = mod.get_global_var('func_9129')
func_9130_call = mutated_mod.get_global_var('func_9130')
call_9162 = relay.TupleGetItem(func_9129_call(), 0)
call_9163 = relay.TupleGetItem(func_9130_call(), 0)
output = call_9162
output2 = call_9163
func_9192 = relay.Function([], output)
mod['func_9192'] = func_9192
mod = relay.transform.InferType()(mod)
mutated_mod['func_9192'] = func_9192
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9192_call = mutated_mod.get_global_var('func_9192')
call_9193 = func_9192_call()
output = call_9193
func_9194 = relay.Function([], output)
mutated_mod['func_9194'] = func_9194
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8701_call = mod.get_global_var('func_8701')
func_8703_call = mutated_mod.get_global_var('func_8703')
call_9201 = relay.TupleGetItem(func_8701_call(), 0)
call_9202 = relay.TupleGetItem(func_8703_call(), 0)
func_8907_call = mod.get_global_var('func_8907')
func_8909_call = mutated_mod.get_global_var('func_8909')
call_9215 = relay.TupleGetItem(func_8907_call(), 0)
call_9216 = relay.TupleGetItem(func_8909_call(), 0)
func_3534_call = mod.get_global_var('func_3534')
func_3539_call = mutated_mod.get_global_var('func_3539')
const_9218 = relay.const([2,-7,-3,-1,-10,8,-6,2,3,-10,-1,-9,10,2,-6,9,5,6,-1,-2,-1,-6,9,-7,-5,9,-6,6,-6,2,-5,2,1,5,9,4,8,-7,7,3,-10,7], dtype = "int8")#candidate|9218|(42,)|const|int8
var_9219 = relay.var("var_9219", dtype = "float64", shape = (9, 4))#candidate|9219|(9, 4)|var|float64
call_9217 = relay.TupleGetItem(func_3534_call(relay.reshape(const_9218.astype('int8'), [3, 2, 7]), relay.reshape(const_9218.astype('int8'), [3, 2, 7]), relay.reshape(var_9219.astype('float64'), [9, 4]), ), 1)
call_9220 = relay.TupleGetItem(func_3539_call(relay.reshape(const_9218.astype('int8'), [3, 2, 7]), relay.reshape(const_9218.astype('int8'), [3, 2, 7]), relay.reshape(var_9219.astype('float64'), [9, 4]), ), 1)
func_841_call = mod.get_global_var('func_841')
func_843_call = mutated_mod.get_global_var('func_843')
call_9233 = relay.TupleGetItem(func_841_call(relay.reshape(var_9219.astype('float64'), [2, 3, 6])), 1)
call_9234 = relay.TupleGetItem(func_843_call(relay.reshape(var_9219.astype('float64'), [2, 3, 6])), 1)
func_1749_call = mod.get_global_var('func_1749')
func_1753_call = mutated_mod.get_global_var('func_1753')
const_9242 = relay.const([5,8,-4,2,7,7,1,-8,-5,-4,8,4,7,-1,3,4,-8,3,9,-8,-1,4,1,6,-10,3,-8,1,-7,10,8,9,-6,8,10,-2,10,-2,-7,-7,9,-5,6,-6,10,-2,2,2,6,3,-5,6,2,-6,-8,-6,-2,-6,8,-1,8,7,-9,-7,-1,2,5,3,7,6,4,-2,4,-5,10,3,3,7,8,-8,4,7,9,-7,-9,2,7,-10,-4,7,4,1,9,1,3,8], dtype = "uint8")#candidate|9242|(96,)|const|uint8
const_9243 = relay.const([[10,5],[-3,10],[-6,-8],[7,4],[7,1],[3,7],[4,-1],[-10,10],[-8,9],[-3,9],[1,-8],[1,10],[7,-5],[-3,-4],[-2,1],[-10,3],[5,-1],[-10,8],[8,-2],[9,-9],[3,-9],[-8,-7],[-6,2],[1,-3],[-9,7],[-5,-1],[-2,-3],[4,7],[6,6],[-9,-2],[-3,-2],[-4,-1],[9,10],[-2,10],[3,4],[3,-5],[-7,3],[-3,-2],[1,-1],[9,6],[7,-6],[9,4],[7,-9],[1,-1],[4,6],[-9,6],[-2,-5],[-6,-1],[-8,-3],[-2,9],[6,2],[-2,8],[9,5],[-2,-9],[5,-5],[6,-7],[4,-1],[8,-8],[10,2],[6,-9],[-3,2],[3,-10],[-5,3],[-3,-6],[-10,-5],[-9,-3],[-4,-4],[-4,-3],[5,-2],[7,1],[5,1],[-2,-6],[4,-1],[2,-3],[-8,7],[9,-8],[-5,5],[10,-2],[-9,4],[-10,4],[-10,6],[-8,10],[-7,7],[-5,2],[-5,2],[4,10],[-6,7],[-5,-9],[-7,-8],[-5,10],[-5,10],[3,-2],[1,-4],[7,-8],[-10,-1],[7,1],[5,10],[10,-4],[8,7],[-7,10],[4,-1],[-7,5],[8,-2],[6,-9],[-7,-2],[9,-3],[1,-8],[10,4],[-9,-6],[8,4],[7,-10],[-1,3],[8,-4],[1,-3],[7,1],[-9,-1],[2,7],[-9,7],[-8,1],[6,7],[9,-10],[-9,5],[6,3],[-2,6],[-4,-5],[3,-10],[-9,-10],[5,6],[9,8],[-10,-5],[-8,-2],[5,-4],[10,-3],[-3,3],[4,-6],[9,6],[-9,7],[7,6],[2,-8],[5,-5],[3,-5],[1,-10],[-9,5],[-8,9],[3,-9],[-10,8],[2,-7],[7,-9],[2,-9],[-1,-9],[5,2],[2,3],[9,-8],[6,9],[1,4],[-1,-10],[-8,-7],[10,-3],[1,8],[-9,1],[-4,7],[4,-7],[-3,2],[-5,-9],[3,-6],[-4,-8],[4,-8],[-9,-3],[5,-1],[7,3],[3,3],[10,-3],[-8,4],[7,6],[-7,8],[-3,-7],[10,-9],[-9,6],[8,2],[-1,-10],[5,10],[-5,-5],[1,8],[-2,-2],[6,1],[4,7],[-5,1],[-5,7],[-7,2],[-5,6],[-8,-2],[1,5],[7,-3],[3,6],[-1,6],[-10,-4],[9,-8],[-2,-10],[9,3],[6,-7],[5,-6],[2,-6],[9,-8],[4,3],[-9,8],[5,2],[-2,4],[-4,-2],[1,-7],[8,-7],[-7,5],[9,7],[-10,1],[-4,9],[-9,-3],[4,-4],[-1,-9],[6,5],[2,-7],[9,3],[8,5],[7,8],[-5,-1],[-4,3],[7,6],[9,-1],[3,-6],[-1,-2],[-10,-2],[10,-5],[1,-3],[2,-2],[-7,4],[-10,-1],[-2,-7],[-3,-3],[7,4],[-7,2],[6,3],[-1,-6],[-3,-6],[-7,8],[-3,2],[6,-1],[-5,10],[-3,-10],[-8,-6],[9,-7],[6,7],[-2,1],[-2,1],[2,-10],[-6,-9],[-3,-9],[-5,7],[-9,-6],[2,8],[-8,9],[-6,7],[2,-5],[8,-9],[-4,-1],[3,10],[-6,9],[-2,10],[-8,10],[-9,1],[6,2],[-1,-6],[-7,-3],[7,-4],[-2,1],[-2,3],[-1,-5],[2,4],[6,-2],[4,10],[-5,6],[8,8],[-5,-3],[-1,-10],[-1,-3],[-4,1],[-10,5],[-10,-9],[-9,10],[-5,7],[-7,-10],[1,9],[4,7],[10,6],[-10,5],[-7,9],[-9,5],[-9,-5],[-5,3],[4,7],[7,-6],[1,-6],[-4,-5],[7,-8],[4,10],[6,-10],[-2,-6],[-8,-4],[7,1],[-1,-1],[7,-7],[9,-1],[-1,-6],[10,-7],[-10,7],[-7,10],[-1,4],[-7,-9],[8,-1],[3,1],[6,-10],[-3,7],[3,-9],[6,-8],[2,1],[6,6],[-7,-2],[10,6],[-9,10],[-7,-5],[-4,-3],[-8,9],[3,-9],[-1,-3],[-3,-1],[-8,-9],[-7,-9],[8,7],[2,2],[2,-8],[-3,-4],[-4,-3],[3,10],[-4,8],[-7,-8],[-3,-9],[-8,5],[-4,7],[-1,-10],[-1,2],[8,5],[10,-5],[-10,-4],[-9,-2],[-5,9],[9,7],[-8,-5],[-1,-4],[8,2],[3,-6],[8,10],[4,6],[-6,-9],[10,6],[-4,-10],[-7,-3],[-4,-4],[-2,-1],[-4,-10],[2,10],[-1,-4],[-4,3],[-9,-10],[-5,-3],[1,5],[-2,4],[7,6],[9,7],[2,3],[10,-3],[-6,9],[-9,-2],[2,2],[6,-9],[1,2],[9,2],[-1,-9],[-10,1],[-7,-1],[3,-5],[-3,-8],[-4,-1],[4,4],[3,7],[2,4],[-10,10],[-5,2],[-4,-4],[5,-5],[-1,-3],[-2,-8],[-5,-6],[3,-9],[-4,8],[9,9],[8,-2],[7,1],[6,3],[-3,10],[10,-4],[-7,-5],[3,-2],[7,8],[7,10],[7,-4],[-7,10],[1,-9],[7,3],[-8,5],[-4,-4],[10,-6],[-1,-3],[-8,-1],[5,7],[3,-5],[9,4],[-8,9],[-8,1],[-6,-5],[5,-5],[-2,-10],[-10,-2],[-2,3],[7,-1],[8,5],[4,4],[-6,8],[4,2],[4,4],[8,-6],[3,4],[-9,-2],[-4,5],[-6,-9],[-7,-2],[4,10],[8,3],[7,8],[1,9],[4,10],[-2,-5],[5,1],[-5,-6],[6,9],[7,-2],[3,6],[10,7],[1,-10],[-2,1],[3,1],[2,-8],[-3,-4],[1,5],[-6,10],[-8,-7],[-4,-2],[-6,-6],[-5,-4],[6,7],[1,8],[-9,-7],[-5,10],[6,2],[6,8],[5,8],[3,-6],[6,-6],[9,6],[-10,3],[-10,9],[-10,-5],[3,8],[-7,9],[-8,9],[-10,-10],[3,-9],[9,-8],[-4,-8],[-6,-1],[-6,8],[-5,5],[1,9],[3,2],[-5,6],[-2,-6],[1,-1],[7,-7],[-2,10],[1,-3],[1,4],[1,-9],[7,-2],[-2,-5],[2,-10],[-9,4],[2,-1],[9,-5],[-7,-6],[7,7],[-1,-2],[9,3],[-3,-10],[2,4],[-8,-8],[8,-9],[4,-3],[1,4],[-9,2],[-6,-7],[10,1],[-3,-7],[-1,-2],[-6,-4],[-6,-1],[7,8],[4,1],[-7,-8],[10,-10],[-6,6],[9,6],[8,-8],[-7,3],[6,7],[1,9],[8,6],[9,-1],[-2,2],[-4,9],[-8,-8],[7,8],[-5,3],[-5,-6],[2,-1],[8,5],[8,3],[6,5],[10,1],[-7,3],[6,-9],[-2,1],[9,-4],[3,-6],[7,-4],[1,8],[-5,1],[10,5],[1,4],[-1,7],[9,6],[1,5],[-3,-10],[10,-8],[-1,-10],[-4,-4],[1,10],[6,-3],[-7,7],[4,5],[-2,-2],[6,-1],[2,5],[-6,-2],[-10,-10],[-8,-1],[3,2],[-1,5],[-3,-8],[-8,6],[-10,-5],[-4,3],[9,-10],[8,1],[-9,-9],[3,4],[2,5],[-2,-1],[3,-9],[4,1],[-7,10],[2,9],[6,10],[3,-5],[9,-6],[-2,3],[4,4],[-2,-1],[6,4],[-5,-9],[-2,-2],[4,-9],[-9,2],[-1,-9],[-7,-3],[10,7],[5,3],[-6,-1],[-3,3],[-10,8],[5,-3],[7,1],[6,2],[-8,-1],[-2,-5],[1,9],[10,-9],[2,2],[-1,8],[-10,1],[-3,-2],[-4,5],[1,6],[-7,4],[-7,-8],[2,10],[6,1],[-7,1],[-7,-2],[-10,-9],[-9,1],[-2,-1],[-9,9],[10,5],[7,3],[-8,3],[-9,-6],[-2,-10],[-10,6],[7,2],[-8,-9],[10,8],[10,1],[-8,-5],[7,-8],[6,1],[10,-9],[-5,-4],[2,3],[7,-1],[-5,-7],[5,1],[-3,3],[6,7],[-1,2],[-7,-1],[10,-3],[7,4],[-4,-4],[2,5],[4,-7],[3,-6],[-2,10],[-5,-10],[-7,1],[-7,-8],[5,4],[-7,7],[6,-4],[7,5],[8,-9],[-8,-7],[-4,-9],[-3,-3],[-8,8],[-7,-1],[-8,-4]], dtype = "uint8")#candidate|9243|(672, 2)|const|uint8
call_9241 = relay.TupleGetItem(func_1749_call(relay.reshape(const_9242.astype('uint8'), [12, 8, 1]), relay.reshape(const_9243.astype('uint8'), [12, 8, 14]), relay.reshape(call_9233.astype('uint64'), [252,]), ), 5)
call_9244 = relay.TupleGetItem(func_1753_call(relay.reshape(const_9242.astype('uint8'), [12, 8, 1]), relay.reshape(const_9243.astype('uint8'), [12, 8, 14]), relay.reshape(call_9233.astype('uint64'), [252,]), ), 5)
func_8866_call = mod.get_global_var('func_8866')
func_8868_call = mutated_mod.get_global_var('func_8868')
call_9246 = relay.TupleGetItem(func_8866_call(relay.reshape(call_9201.astype('float32'), [3, 12, 4])), 1)
call_9247 = relay.TupleGetItem(func_8868_call(relay.reshape(call_9201.astype('float32'), [3, 12, 4])), 1)
uop_9248 = relay.log(const_9243.astype('float64')) # shape=(672, 2)
var_9251 = relay.var("var_9251", dtype = "float64", shape = (672, 2))#candidate|9251|(672, 2)|var|float64
bop_9252 = relay.multiply(uop_9248.astype('uint16'), relay.reshape(var_9251.astype('uint16'), relay.shape_of(uop_9248))) # shape=(672, 2)
output = relay.Tuple([call_9201,call_9215,call_9217,const_9218,var_9219,call_9233,call_9241,const_9242,call_9246,bop_9252,])
output2 = relay.Tuple([call_9202,call_9216,call_9220,const_9218,var_9219,call_9234,call_9244,const_9242,call_9247,bop_9252,])
func_9264 = relay.Function([var_9219,var_9251,], output)
mod['func_9264'] = func_9264
mod = relay.transform.InferType()(mod)
mutated_mod['func_9264'] = func_9264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9264_call = mutated_mod.get_global_var('func_9264')
var_9266 = relay.var("var_9266", dtype = "float64", shape = (9, 4))#candidate|9266|(9, 4)|var|float64
var_9267 = relay.var("var_9267", dtype = "float64", shape = (672, 2))#candidate|9267|(672, 2)|var|float64
call_9265 = func_9264_call(var_9266,var_9267,)
output = call_9265
func_9268 = relay.Function([var_9266,var_9267,], output)
mutated_mod['func_9268'] = func_9268
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9147_call = mod.get_global_var('func_9147')
func_9148_call = mutated_mod.get_global_var('func_9148')
call_9291 = func_9147_call()
call_9292 = func_9147_call()
output = relay.Tuple([call_9291,])
output2 = relay.Tuple([call_9292,])
func_9299 = relay.Function([], output)
mod['func_9299'] = func_9299
mod = relay.transform.InferType()(mod)
output = func_9299()
func_9300 = relay.Function([], output)
mutated_mod['func_9300'] = func_9300
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9359 = relay.var("var_9359", dtype = "float64", shape = (11, 4, 13))#candidate|9359|(11, 4, 13)|var|float64
uop_9360 = relay.log(var_9359.astype('float64')) # shape=(11, 4, 13)
bop_9363 = relay.floor_mod(var_9359.astype('float64'), relay.reshape(uop_9360.astype('float64'), relay.shape_of(var_9359))) # shape=(11, 4, 13)
func_7183_call = mod.get_global_var('func_7183')
func_7186_call = mutated_mod.get_global_var('func_7186')
var_9369 = relay.var("var_9369", dtype = "float32", shape = (450,))#candidate|9369|(450,)|var|float32
call_9368 = relay.TupleGetItem(func_7183_call(relay.reshape(var_9369.astype('float32'), [6, 15, 5])), 0)
call_9370 = relay.TupleGetItem(func_7186_call(relay.reshape(var_9369.astype('float32'), [6, 15, 5])), 0)
output = relay.Tuple([bop_9363,call_9368,var_9369,])
output2 = relay.Tuple([bop_9363,call_9370,var_9369,])
func_9385 = relay.Function([var_9359,var_9369,], output)
mod['func_9385'] = func_9385
mod = relay.transform.InferType()(mod)
mutated_mod['func_9385'] = func_9385
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9385_call = mutated_mod.get_global_var('func_9385')
var_9387 = relay.var("var_9387", dtype = "float64", shape = (11, 4, 13))#candidate|9387|(11, 4, 13)|var|float64
var_9388 = relay.var("var_9388", dtype = "float32", shape = (450,))#candidate|9388|(450,)|var|float32
call_9386 = func_9385_call(var_9387,var_9388,)
output = call_9386
func_9389 = relay.Function([var_9387,var_9388,], output)
mutated_mod['func_9389'] = func_9389
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9299_call = mod.get_global_var('func_9299')
func_9300_call = mutated_mod.get_global_var('func_9300')
call_9410 = relay.TupleGetItem(func_9299_call(), 0)
call_9411 = relay.TupleGetItem(func_9300_call(), 0)
func_5537_call = mod.get_global_var('func_5537')
func_5540_call = mutated_mod.get_global_var('func_5540')
const_9413 = relay.const(-8, dtype = "int8")#candidate|9413|()|const|int8
const_9414 = relay.const([-10,3,-10,-2,-9,-4,4,-3,6,-6,-2,-7,-9,-6,-1,-8,-3,-2,7,-1,3,-1,-5,-5,4,5,-2,-4,7,10,2,8,-1,10,4,-4,9,5,-10,4,2,1,-2,-5,-4,8,2,-1,8,-1,-5,1,-10,5,-7,-5,8,2,-10,2,1,10,-10,8,-4,-10,4,2,-10,-4,-6,5,-5,-8,4,-9,-2,10,-3,9,7,-8,-3,-3,-7,-9,3,9,-10,3,8,1,-4,-3,-1,-6,-2,-7,5,9,8,5,1,-1,10,7,9,-10,-2,2,3,-2,-4,-3,1,-9,9,10,7,-3,7,-6,9,-9,-7,4,9,-9,7,2,-4,-6,-6,-3,10,-1,-7,3,-3,8,-3,1,10,-5,-2,4,-9,-8,-7,-9,8,-3,-8,-2,-9,2,5,-4,-5,-2,7,2,-6,-4,-3,1,-4,8,-3,5,-3,3,-2,4,7,4,-4,3,-9,5,9,-5,4,-5,4,-10,8,-8,10,8,10,3,-8,-3,1,-9,8,3,7,-1,-9,1,-2,-6,9,-2,-5,2,-1,-2,-5,-5,7,6,-6,-9,6,2,7,4,3,-6,1,6,4,-6,-1,3,7,-3,6,9,10,-4,1,-4,4,-3,-9,-8,-6,-4,-3,6,6,-6,1,-6,7,9,-8,2,-4,-8,5,8,10,10,-8,-5,4,-9,-9,8,-5,-5,10,6,4,9,-9,1,-8,5,5,-10,-3,6,6,-7,-10,5,-10,4,-4,-3,9,-4,-5,2,-1,1,-3,-6,-10,9,7,-10,4,3,8,-5,-2,-3,-10,-6,-7,-4,3,-9,-5,3,-2,-1,8,6,-3,-10,-10,9,7,-10,4,7,4,-10,-4,-10,-9,-3,-6,10,10,4,6,1,-1,-10,-4,2,-10,-6,-9,-1,9,5,2,5,-9,3,4,-9,-6,-10,3,-10,-6,9,5,4,-1,1,6,7,-7,-9,6,-6,4,-5,-9,1,-3,1,-8,2,-5,5,9,5,4,-6,1,-5,9,-5,6,4,-6,-7,-1,8,-2,-7,6,-8,5,5,8,-2,-1,-5,-3,-6,7,7,-4,4,-7,8,3,8,-2,6,2,-6,7,9,2,10,1,-7,-10,1,-4,-5,-9,-4,3,-10,10,-7,7,6,1,9,1,5,7,-1,8,-7,-8,-7,-3,-7,1,9,-9,-7,10,10,-10,-5,4,-7,1,-9,-6,-1,1,1,9,2,-6,-8,-5,-8,-5,3,8,-4,-5,-7,7,-10,-5,10,5,-3], dtype = "int8")#candidate|9414|(480,)|const|int8
call_9412 = func_5537_call(relay.reshape(const_9413.astype('int8'), []), relay.reshape(const_9414.astype('int8'), [5, 6, 16]), )
call_9415 = func_5537_call(relay.reshape(const_9413.astype('int8'), []), relay.reshape(const_9414.astype('int8'), [5, 6, 16]), )
uop_9416 = relay.cos(call_9410.astype('float64')) # shape=(3, 12, 4)
uop_9418 = relay.cos(call_9411.astype('float64')) # shape=(3, 12, 4)
output = relay.Tuple([call_9412,const_9413,const_9414,uop_9416,])
output2 = relay.Tuple([call_9415,const_9413,const_9414,uop_9418,])
func_9424 = relay.Function([], output)
mod['func_9424'] = func_9424
mod = relay.transform.InferType()(mod)
output = func_9424()
func_9425 = relay.Function([], output)
mutated_mod['func_9425'] = func_9425
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9192_call = mod.get_global_var('func_9192')
func_9194_call = mutated_mod.get_global_var('func_9194')
call_9428 = func_9192_call()
call_9429 = func_9192_call()
output = relay.Tuple([call_9428,])
output2 = relay.Tuple([call_9429,])
func_9439 = relay.Function([], output)
mod['func_9439'] = func_9439
mod = relay.transform.InferType()(mod)
output = func_9439()
func_9440 = relay.Function([], output)
mutated_mod['func_9440'] = func_9440
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9424_call = mod.get_global_var('func_9424')
func_9425_call = mutated_mod.get_global_var('func_9425')
call_9441 = relay.TupleGetItem(func_9424_call(), 3)
call_9442 = relay.TupleGetItem(func_9425_call(), 3)
func_7183_call = mod.get_global_var('func_7183')
func_7186_call = mutated_mod.get_global_var('func_7186')
const_9461 = relay.const([-3.417976,0.784948,5.719911,3.445457,-3.325973,-5.873946,-9.401598,7.510231,-9.127695,2.645489,-7.468384,8.087116,8.958784,7.820585,-9.947265,-6.037111,1.680742,-2.457595,7.730639,-2.579967,5.865569,-7.632232,-3.135877,3.737179,-3.791365,6.316952,-9.174908,-7.704177,-7.702627,-5.688979,2.964239,4.123774,-3.163794,8.794167,4.976708,-0.594996,-5.613208,-0.642734,-9.870295,8.980815,4.506829,7.953381,6.852809,0.394567,4.446136,-8.691946,-4.618453,3.497790,4.761560,-6.371294,-2.777224,-5.112758,7.763406,4.394427,-9.092867,-4.504195,3.475621,4.497873,0.992805,-6.947215,-2.325811,-4.807315,-1.640233,-0.128927,-4.913796,9.085569,2.187641,-9.927192,-9.428500,-6.720712,-4.270199,-0.224181,-5.842358,0.139664,-5.254682,-9.945713,-6.527702,-9.380493,-0.785836,6.294697,6.732884,0.685651,-4.954250,-7.054767,3.816914,2.552626,4.069030,3.339926,5.685705,-4.524362,-8.265989,-5.296026,3.676650,2.043155,9.978297,-0.703906,3.879096,4.075886,1.359781,6.652059,-4.731117,4.358125,-3.368005,2.770013,3.414857,-9.587222,-3.282986,-7.046637,3.629727,7.035812,-9.234344,1.189829,0.803540,3.571663,-2.691843,7.308753,3.901778,5.611901,1.185921,0.684233,-7.945809,-0.900485,7.881630,-8.352424,5.820745,7.829120,2.680613,5.269377,-7.451992,-0.513257,9.533691,4.666823,-5.536505,5.287451,-7.710930,-3.191616,-0.225298,8.892971,8.151723,-6.470117,-9.019041,2.303761,-7.566585,-3.161146,8.749292,-1.401674,1.866116,-8.636061,-5.470390,4.388743,-3.224883,6.212969,8.139965,-0.832410,-3.037033,2.650151,7.602775,-3.887166,3.185938,-1.047675,6.076945,-0.197040,-6.645564,-9.413007,-1.631527,0.832159,1.514412,2.372022,-4.459572,-0.512867,-5.460753,7.259118,-1.176996,7.508045,-1.012117,-7.634196,-8.115183,-3.877414,5.557535,7.826852,2.368163,7.504262,1.361654,5.733772,-3.137441,-7.092678,6.419253,-8.039235,-4.122700,7.733872,0.272067,-7.322746,-2.184646,1.572360,-3.231491,0.885765,7.069467,-2.297413,6.111229,-9.060514,5.668622,-9.691642,-2.440665,-7.499613,4.445810,-5.466058,-5.619555,-1.973574,4.255439,-5.979398,1.704013,0.331922,-3.929676,2.178707,4.183285,-4.540487,7.946995,2.411079,1.418425,-1.451161,-9.077926,-2.011527,1.862156,2.103035,-0.242227,-2.734784,-0.560972,-4.765559,-1.750799,-6.572760,-7.129199,-0.034588,-6.779008,2.926362,-7.864628,-7.075820,-3.714879,1.108784,8.057986,5.831438,-8.923207,5.387454,0.041101,-5.981890,-2.068457,-0.254638,3.056957,-6.936925,-5.347335,8.877611,7.423685,4.250769,-2.284518,7.443057,-9.752748,7.133942,7.247667,2.725833,5.653903,-6.438012,-5.327013,-2.678861,9.206435,9.181753,-6.984470,-8.445513,-3.393206,-7.533615,-0.499466,6.609577,-8.866252,-4.561094,8.692491,-3.038140,7.703978,-1.432085,0.687383,7.551121,9.539167,7.922109,2.319419,7.157233,8.757819,3.587936,-3.932016,-6.062488,9.398084,-3.455146,-7.163460,0.900870,9.334237,-0.700774,-8.557184,3.893318,-1.584812,-3.338943,7.520807,-3.326680,2.121141,-3.199032,-8.898098,-8.893840,1.469917,-3.697681,1.650828,1.715187,-5.806047,-7.270305,2.585064,-6.657841,-8.487646,-4.912422,5.917245,-3.462477,-5.102081,-5.425280,-5.463975,-2.340066,7.342884,9.122125,6.854340,0.846346,-1.053474,-1.462440,7.793476,-5.577824,7.459117,5.314196,7.489480,9.863465,8.268990,-2.888471,-6.538487,6.621266,0.578620,5.972630,-7.162992,-6.140299,-9.226035,-6.832958,-4.804096,9.753990,8.182384,-7.138488,-1.154512,-8.174647,7.499449,7.725589,-2.234504,0.563042,-9.085968,-6.094859,4.201347,9.515247,6.427220,3.724306,-1.773711,-8.149369,-4.395660,-8.670419,-7.699697,-6.730553,0.529090,-2.947791,-2.215715,-5.432616,-2.131826,6.075855,4.768759,1.886551,0.430971,-8.861929,2.218517,3.782066,7.904425,-4.330284,1.303574,0.204297,6.884531,-6.892403,7.653825,-4.299070,9.911752,7.819787,-6.792972,2.208865,-3.159841,-2.583663,-6.570430,8.122643,2.469210,-4.006853,-9.311860,-4.529403,9.185641,7.687104,4.868127,-7.249355,-0.399614,8.250341,-6.016600,-6.097812,6.964012,-4.730280,-0.970840,3.779999,0.402786,-0.653042,-4.303797,8.895621,8.092648,-7.544832,-5.449062,0.782875,9.280864,-2.710463,-8.073436,-4.303483,7.608848,2.616058,-6.240705,0.612987,-1.209315,6.320482,-3.743277,-6.968556,1.179258,-3.993988,1.516734,-3.857757,5.531613,-6.075880,0.333519,8.157474,1.849790,9.828672,0.374019,-9.386491,-9.115012,-2.762231,-6.084970,4.468304,-4.671805,-0.914087,9.960684,-7.603898,1.835564,-1.030774,5.476811,5.265341], dtype = "float32")#candidate|9461|(450,)|const|float32
call_9460 = relay.TupleGetItem(func_7183_call(relay.reshape(const_9461.astype('float32'), [6, 15, 5])), 1)
call_9462 = relay.TupleGetItem(func_7186_call(relay.reshape(const_9461.astype('float32'), [6, 15, 5])), 1)
bop_9464 = relay.not_equal(call_9460.astype('bool'), const_9461.astype('bool')) # shape=(6, 1, 450)
bop_9467 = relay.not_equal(call_9462.astype('bool'), const_9461.astype('bool')) # shape=(6, 1, 450)
bop_9479 = relay.bitwise_and(call_9460.astype('uint16'), const_9461.astype('uint16')) # shape=(6, 1, 450)
bop_9482 = relay.bitwise_and(call_9462.astype('uint16'), const_9461.astype('uint16')) # shape=(6, 1, 450)
func_8556_call = mod.get_global_var('func_8556')
func_8557_call = mutated_mod.get_global_var('func_8557')
call_9484 = func_8556_call()
call_9485 = func_8556_call()
output = relay.Tuple([call_9441,bop_9464,bop_9479,call_9484,])
output2 = relay.Tuple([call_9442,bop_9467,bop_9482,call_9485,])
func_9487 = relay.Function([], output)
mod['func_9487'] = func_9487
mod = relay.transform.InferType()(mod)
mutated_mod['func_9487'] = func_9487
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9487_call = mutated_mod.get_global_var('func_9487')
call_9488 = func_9487_call()
output = call_9488
func_9489 = relay.Function([], output)
mutated_mod['func_9489'] = func_9489
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8701_call = mod.get_global_var('func_8701')
func_8703_call = mutated_mod.get_global_var('func_8703')
call_9501 = relay.TupleGetItem(func_8701_call(), 0)
call_9502 = relay.TupleGetItem(func_8703_call(), 0)
var_9511 = relay.var("var_9511", dtype = "float32", shape = (3, 12, 4))#candidate|9511|(3, 12, 4)|var|float32
bop_9512 = relay.mod(call_9501.astype('float32'), relay.reshape(var_9511.astype('float32'), relay.shape_of(call_9501))) # shape=(3, 12, 4)
bop_9515 = relay.mod(call_9502.astype('float32'), relay.reshape(var_9511.astype('float32'), relay.shape_of(call_9502))) # shape=(3, 12, 4)
func_841_call = mod.get_global_var('func_841')
func_843_call = mutated_mod.get_global_var('func_843')
var_9518 = relay.var("var_9518", dtype = "float64", shape = (36,))#candidate|9518|(36,)|var|float64
call_9517 = relay.TupleGetItem(func_841_call(relay.reshape(var_9518.astype('float64'), [2, 3, 6])), 3)
call_9519 = relay.TupleGetItem(func_843_call(relay.reshape(var_9518.astype('float64'), [2, 3, 6])), 3)
func_2029_call = mod.get_global_var('func_2029')
func_2032_call = mutated_mod.get_global_var('func_2032')
var_9532 = relay.var("var_9532", dtype = "uint8", shape = (96,))#candidate|9532|(96,)|var|uint8
const_9533 = relay.const([9,-5,-2,-4,6,2,-4,-10,5,-8,4,9,3,-7,-1,3,10,2,8,-4,-9,-4,-1,-1,2,7,1,8,-1,8,5,1,-9,7,1,4,10,-5,4,9,3,10,5,9,4,5,1,5,1,9,-5,-3,1,-8,-4,-1,-5,3,8,4,-1,3,7,4,-10,-1,4,-10,2,9,6,-2,-10,9,-7,4,-3,2,5,-7,8,9,-2,6,10,-9,-9,5,4,-9,-8,2,8,-1,-9,7,8,9,9,-3,5,3,-1,-3,-4,-9,-3,-2,-7,3,1,3,-10,-9,-10,-7,-4,-10,1,-1,4,-7,-3,10,-2,-5,-5,-4,3,-3,6,9,-10,-5,2,8,-6,-5,-4,6,-7,10,-9,6,-6,4,-9,-1,4,2,2,2,-2,6,9,1,4,10,6,5,5,5,6,4,4,6,5,5,-2,-3,-4,8,10,3,-6,-9,10,6,1,-6,6,-2,-9,-8,7,-3,-10,1,1,-3,4,7,-7,10,10,5,-9,7,-4,-8,-6,4,-1,3,10,-8,-9,10,7,4,-7,5,5,-3,-5,-2,9,-9,2,4,-10,-10,-7,-7,-8,2,-9,3,-9,5,-5,-6,-2,7,-7,-9,1,-7,8,3,-4,-5,-3,9,5,7,2,6,-8,-9,2,-1,-9,-3,2,-5,4,1,8,-1,-5,-3,-2,10,-10,5,9,6,6,-5,9,7,9,3,8,-10,-2,2,10,4,-3,3,-8,-9,10,5,3,-3,9,-10,9,4,1,-5,-7,2,-1,9,-5,4,-2,7,10,-6,7,10,5,9,-7,8,5,-2,-6,8,1,1,10,9,-9,2,2,-3,-3,3,-7,4,1,-10,10,10,-9,-5,10,-2,-10,6,6,8,-2,-1,-4,-2,-4,-3,10,6,-6,-2,-4,5,9,-7,-3,-6,6,3,-4,-6,-9,3,-4,-1,-9,-7,7,8,-5,3,-7,-10,-10,-4,10,-5,9,-10,-4,-5,4,-5,-4,-9,5,7,-4,-7,-2,1,3,2,-1,-6,5,-9,3,-2,-6,-8,-6,2,-3,-6,-4,-8,-2,-10,5,9,9,-9,-1,-1,-3,-7,5,-10,-10,3,3,10,4,-10,6,-8,-7,-7,-9,5,-9,-10,-2,3,9,6,9,-7,6,3,5,4,8,2,2,-9,2,5,4,-7,-8,-2,9,-2,-5,6,6,-5,1,-4,-9,-4,-4,4,-1,-10,-4,-5,-2,-9,-2,10,-4,4,4,-10,3,-3,-5,7,-10,2,-9,-8,-4,9,-3,-5,6,6,-7,5,10,-7,7,-10,10,10,1,-10,6,-2,-8,9,6,6,-10,3,8,-7,-3,9,-3,3,-8,10,2,-4,10,-6,9,-10,-2,-10,-5,7,-6,-1,7,2,7,-9,7,-9,7,3,-7,4,8,-2,-3,-10,7,-9,-7,8,-6,-1,10,-7,-5,-4,5,-4,4,-7,6,9,1,8,10,4,-2,-6,-6,3,5,-4,7,-5,-5,-1,2,-4,7,-2,7,10,10,-6,-1,8,8,6,1,8,6,8,-9,-10,6,1,8,5,-7,4,3,4,5,7,-3,-3,6,6,4,2,-8,3,4,5,10,1,-3,-5,7,4,10,-1,-7,-2,5,-2,6,-10,-3,4,-6,9,2,-6,5,-2,-7,1,-2,-6,-8,-1,-2,-7,-5,10,-7,-9,-2,-9,6,4,-6,7,8,8,-2,10,-9,-10,-7,-8,-1,5,-3,-2,8,2,9,-6,3,-4,-3,10,9,-6,4,1,10,-1,-10,4,9,6,5,6,5,2,4,8,4,2,-10,3,10,-5,-7,10,2,3,-7,-5,8,-8,1,-8,2,3,4,1,10,-6,-2,-2,-4,4,-3,-4,8,5,-8,6,-4,1,5,-4,8,1,-8,-6,7,4,3,-2,9,-2,-2,-10,-7,6,3,-6,-10,10,-3,8,10,-1,1,-4,3,-9,4,3,10,-3,9,-3,10,7,-2,3,-9,5,-8,-10,6,-5,-9,-2,-10,-10,-6,-8,-8,10,-1,4,-7,-10,9,-5,-7,7,-3,-5,-6,1,-9,10,5,-9,-5,6,1,9,4,-9,8,-1,5,-3,-2,-2,-5,-8,4,-9,-10,3,1,-5,7,9,10,-6,5,-3,-4,-8,7,1,5,10,-5,9,6,2,-8,1,-1,2,-8,3,-9,-5,8,8,4,-1,3,-6,5,-6,-10,-2,6,9,8,10,-4,6,10,9,3,4,1,-9,-9,1,2,2,-1,3,-2,9,-9,2,-8,-3,9,1,7,-8,2,8,7,1,-1,-7,9,-1,-8,8,-1,1,6,2,1,-2,1,7,9,4,-2,3,7,-2,6,-3,10,-1,-7,2,4,8,-3,3,-3,-2,-8,-10,8,9,1,2,-7,8,7,1,5,7,4,-1,-5,-4,5,-7,6,-8,-10,-10,5,-1,9,4,-1,3,-8,-2,5,-7,10,5,10,2,-6,-8,-10,3,-1,5,-7,7,3,10,7,-10,3,-4,-9,-4,-9,-5,-9,10,7,-4,-4,-2,2,6,-1,-10,-10,-5,1,3,2,-10,-6,3,-8,8,7,10,1,-1,-2,5,5,2,-1,-5,5,-6,-6,4,5,9,-1,-3,6,-7,5,10,-3,-6,-9,1,-4,5,-5,7,1,4,-4,-6,-3,7,-4,9,-3,-4,-4,8,-2,-2,-2,-9,-3,-4,-3,7,3,5,-5,5,-9,-2,-5,-3,-3,-6,-3,9,9,5,6,-8,-8,-6,-7,-2,-1,-9,5,3,-6,7,3,5,9,-6,4,4,8,6,1,2,-4,-8,3,-9,10,8,1,-7,-3,-5,-8,-8,9,10,4,1,2,-7,3,-2,3,8,3,-6,10,-3,2,-3,-7,-10,6,9,1,1,-3,6,-4,3,10,4,-3,-8,-10,6,5,-6,-7,7,10,-1,2,10,2,3,-3,3,6,10,4,1,2,-8,-4,-9,4,7,7,-2,-3,4,6,3,-1,-7,-9,-4,-8,3,9,4,10,-9,-3,8,10,3,1,7,8,-9,-10,9,-5,-10,4,10,-9,3,-2,7,4,7,5,9,7,10,1,7,-4,2,3,10,-1,-4,-5,-6,-3,4,8,-1,1,2,3,-8,6,-2,2,-9,-6,-7,-5,10,7,-6,-7,-7,8,-8,9,-7,8,4,-1,2,-7,10,3,2,2,-4,-4,-7,2,-5,-3,-8,2,-10,4,-2,-4,-4,10,6,3,1,1,-2,-5,-4,9,-9,3,-4,5,9,-8,-6,-9,2,-10,-1,-3,4,2,-6,9,2,7,10,-3,3,1,2,10,4,-9,1,-8,9,2,-10,3,4,9,-3,-2,-4,6,5,-7,5,5,-7,-10,2,-2,-4,6,6,-3,-6,5,-8,-3,6,3,8,-9,1,-1,-3,7,1,-7,-7,-6,-5,-2,-4,7,6,3,-10,-1,2,-5,-9,2,4,-5,-2,-5,-5,-10,-1,-9,1,-3,4,3,5,9,-10,4,-4,6,-1,3,-7,5,3,5,5,4,-1,5,5,-2,9], dtype = "uint8")#candidate|9533|(1344,)|const|uint8
call_9531 = relay.TupleGetItem(func_2029_call(relay.reshape(var_9532.astype('uint8'), [96,]), relay.reshape(const_9533.astype('uint8'), [1344,]), ), 2)
call_9534 = relay.TupleGetItem(func_2032_call(relay.reshape(var_9532.astype('uint8'), [96,]), relay.reshape(const_9533.astype('uint8'), [1344,]), ), 2)
uop_9566 = relay.sqrt(var_9511.astype('float64')) # shape=(3, 12, 4)
uop_9575 = relay.log10(var_9511.astype('float32')) # shape=(3, 12, 4)
output = relay.Tuple([bop_9512,call_9517,var_9518,call_9531,var_9532,const_9533,uop_9566,uop_9575,])
output2 = relay.Tuple([bop_9515,call_9519,var_9518,call_9534,var_9532,const_9533,uop_9566,uop_9575,])
func_9581 = relay.Function([var_9511,var_9518,var_9532,], output)
mod['func_9581'] = func_9581
mod = relay.transform.InferType()(mod)
var_9582 = relay.var("var_9582", dtype = "float32", shape = (3, 12, 4))#candidate|9582|(3, 12, 4)|var|float32
var_9583 = relay.var("var_9583", dtype = "float64", shape = (36,))#candidate|9583|(36,)|var|float64
var_9584 = relay.var("var_9584", dtype = "uint8", shape = (96,))#candidate|9584|(96,)|var|uint8
output = func_9581(var_9582,var_9583,var_9584,)
func_9585 = relay.Function([var_9582,var_9583,var_9584,], output)
mutated_mod['func_9585'] = func_9585
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8701_call = mod.get_global_var('func_8701')
func_8703_call = mutated_mod.get_global_var('func_8703')
call_9589 = relay.TupleGetItem(func_8701_call(), 0)
call_9590 = relay.TupleGetItem(func_8703_call(), 0)
func_8801_call = mod.get_global_var('func_8801')
func_8803_call = mutated_mod.get_global_var('func_8803')
call_9593 = func_8801_call(relay.reshape(call_9589.astype('float32'), [3, 12, 4]))
call_9594 = func_8801_call(relay.reshape(call_9589.astype('float32'), [3, 12, 4]))
func_9299_call = mod.get_global_var('func_9299')
func_9300_call = mutated_mod.get_global_var('func_9300')
call_9596 = relay.TupleGetItem(func_9299_call(), 0)
call_9597 = relay.TupleGetItem(func_9300_call(), 0)
output = relay.Tuple([call_9589,call_9593,call_9596,])
output2 = relay.Tuple([call_9590,call_9594,call_9597,])
func_9603 = relay.Function([], output)
mod['func_9603'] = func_9603
mod = relay.transform.InferType()(mod)
mutated_mod['func_9603'] = func_9603
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9603_call = mutated_mod.get_global_var('func_9603')
call_9604 = func_9603_call()
output = call_9604
func_9605 = relay.Function([], output)
mutated_mod['func_9605'] = func_9605
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9299_call = mod.get_global_var('func_9299')
func_9300_call = mutated_mod.get_global_var('func_9300')
call_9637 = relay.TupleGetItem(func_9299_call(), 0)
call_9638 = relay.TupleGetItem(func_9300_call(), 0)
output = call_9637
output2 = call_9638
func_9641 = relay.Function([], output)
mod['func_9641'] = func_9641
mod = relay.transform.InferType()(mod)
output = func_9641()
func_9642 = relay.Function([], output)
mutated_mod['func_9642'] = func_9642
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9487_call = mod.get_global_var('func_9487')
func_9489_call = mutated_mod.get_global_var('func_9489')
call_9652 = relay.TupleGetItem(func_9487_call(), 1)
call_9653 = relay.TupleGetItem(func_9489_call(), 1)
uop_9654 = relay.acos(call_9652.astype('float32')) # shape=(6, 1, 450)
uop_9656 = relay.acos(call_9653.astype('float32')) # shape=(6, 1, 450)
output = relay.Tuple([uop_9654,])
output2 = relay.Tuple([uop_9656,])
func_9657 = relay.Function([], output)
mod['func_9657'] = func_9657
mod = relay.transform.InferType()(mod)
mutated_mod['func_9657'] = func_9657
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9657_call = mutated_mod.get_global_var('func_9657')
call_9658 = func_9657_call()
output = call_9658
func_9659 = relay.Function([], output)
mutated_mod['func_9659'] = func_9659
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9603_call = mod.get_global_var('func_9603')
func_9605_call = mutated_mod.get_global_var('func_9605')
call_9663 = relay.TupleGetItem(func_9603_call(), 1)
call_9664 = relay.TupleGetItem(func_9605_call(), 1)
output = relay.Tuple([call_9663,])
output2 = relay.Tuple([call_9664,])
func_9665 = relay.Function([], output)
mod['func_9665'] = func_9665
mod = relay.transform.InferType()(mod)
output = func_9665()
func_9666 = relay.Function([], output)
mutated_mod['func_9666'] = func_9666
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9129_call = mod.get_global_var('func_9129')
func_9130_call = mutated_mod.get_global_var('func_9130')
call_9681 = relay.TupleGetItem(func_9129_call(), 0)
call_9682 = relay.TupleGetItem(func_9130_call(), 0)
output = call_9681
output2 = call_9682
func_9685 = relay.Function([], output)
mod['func_9685'] = func_9685
mod = relay.transform.InferType()(mod)
mutated_mod['func_9685'] = func_9685
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9685_call = mutated_mod.get_global_var('func_9685')
call_9686 = func_9685_call()
output = call_9686
func_9687 = relay.Function([], output)
mutated_mod['func_9687'] = func_9687
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9105_call = mod.get_global_var('func_9105')
func_9107_call = mutated_mod.get_global_var('func_9107')
call_9719 = relay.TupleGetItem(func_9105_call(), 0)
call_9720 = relay.TupleGetItem(func_9107_call(), 0)
output = relay.Tuple([call_9719,])
output2 = relay.Tuple([call_9720,])
func_9726 = relay.Function([], output)
mod['func_9726'] = func_9726
mod = relay.transform.InferType()(mod)
output = func_9726()
func_9727 = relay.Function([], output)
mutated_mod['func_9727'] = func_9727
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9487_call = mod.get_global_var('func_9487')
func_9489_call = mutated_mod.get_global_var('func_9489')
call_9813 = relay.TupleGetItem(func_9487_call(), 1)
call_9814 = relay.TupleGetItem(func_9489_call(), 1)
func_6130_call = mod.get_global_var('func_6130')
func_6133_call = mutated_mod.get_global_var('func_6133')
const_9840 = relay.const([False,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True], dtype = "bool")#candidate|9840|(96,)|const|bool
var_9841 = relay.var("var_9841", dtype = "float64", shape = (4, 140))#candidate|9841|(4, 140)|var|float64
call_9839 = relay.TupleGetItem(func_6130_call(relay.reshape(const_9840.astype('bool'), [6, 16, 1]), relay.reshape(var_9841.astype('float64'), [560,]), ), 0)
call_9842 = relay.TupleGetItem(func_6133_call(relay.reshape(const_9840.astype('bool'), [6, 16, 1]), relay.reshape(var_9841.astype('float64'), [560,]), ), 0)
func_3928_call = mod.get_global_var('func_3928')
func_3931_call = mutated_mod.get_global_var('func_3931')
const_9867 = relay.const([-8.306107,-0.162357,2.932835,-4.853671,9.204476,4.021845,-4.380189,-0.431729,9.445181,9.217965,-5.272366,-8.245573,5.647173,0.319752,3.930881,-4.514285,9.024189,2.260872,3.682610,-1.547347,-3.078475,2.577513,9.228706,-9.012270,-2.617637,-9.020867,5.556400,-5.006194,8.446410,7.118040,5.505840,-0.991921,8.962201,6.551075,0.093599,8.123867,-6.900179,-6.291417,-6.553471,-9.913529,-5.812985,5.953579,9.774240,0.933464,-7.223407,9.624360,-0.831747,-3.376799,2.400927,-6.220470,3.069054,-7.236708,-7.780475,2.143014,6.625593,-1.986211,7.459542,8.491709,6.377661,3.256148,9.525729,0.311911,-8.686704,0.628351,-4.218403,-3.414317,0.144400,9.700409,4.692144,4.101638,-9.223493,-3.239685,1.492007,-3.753177,-1.408470,-5.930284,-5.738076,9.862531,7.115120,-1.839841,9.316095,-8.540900,7.962702,-3.829236,-4.794311,5.451964,2.053502,-6.206491,3.129321,-3.296877,-6.843951,2.727102,-9.798216,6.690275,-1.764705,9.305968,-9.796760,-0.703170,1.286611,-7.074323,-6.319128,-7.055209,-3.198154,3.573068,5.692248,7.944368,-0.770468,-1.912491,-6.446061,9.050839,0.164685,-6.842072,-3.840310,0.233677,3.162923,9.706257,5.839893,-3.101900,2.566736,0.589060,9.513088,-7.778991,-4.470321,-9.199672,8.003393,7.758414,1.478902,-1.017086], dtype = "float32")#candidate|9867|(128,)|const|float32
call_9866 = relay.TupleGetItem(func_3928_call(relay.reshape(const_9867.astype('float32'), [8, 2, 8]), relay.reshape(const_9840.astype('uint8'), [4, 24]), ), 1)
call_9868 = relay.TupleGetItem(func_3931_call(relay.reshape(const_9867.astype('float32'), [8, 2, 8]), relay.reshape(const_9840.astype('uint8'), [4, 24]), ), 1)
func_8866_call = mod.get_global_var('func_8866')
func_8868_call = mutated_mod.get_global_var('func_8868')
var_9873 = relay.var("var_9873", dtype = "float32", shape = (144,))#candidate|9873|(144,)|var|float32
call_9872 = relay.TupleGetItem(func_8866_call(relay.reshape(var_9873.astype('float32'), [3, 12, 4])), 1)
call_9874 = relay.TupleGetItem(func_8868_call(relay.reshape(var_9873.astype('float32'), [3, 12, 4])), 1)
output = relay.Tuple([call_9813,call_9839,const_9840,var_9841,call_9866,const_9867,call_9872,var_9873,])
output2 = relay.Tuple([call_9814,call_9842,const_9840,var_9841,call_9868,const_9867,call_9874,var_9873,])
func_9878 = relay.Function([var_9841,var_9873,], output)
mod['func_9878'] = func_9878
mod = relay.transform.InferType()(mod)
mutated_mod['func_9878'] = func_9878
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9878_call = mutated_mod.get_global_var('func_9878')
var_9880 = relay.var("var_9880", dtype = "float64", shape = (4, 140))#candidate|9880|(4, 140)|var|float64
var_9881 = relay.var("var_9881", dtype = "float32", shape = (144,))#candidate|9881|(144,)|var|float32
call_9879 = func_9878_call(var_9880,var_9881,)
output = call_9879
func_9882 = relay.Function([var_9880,var_9881,], output)
mutated_mod['func_9882'] = func_9882
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9657_call = mod.get_global_var('func_9657')
func_9659_call = mutated_mod.get_global_var('func_9659')
call_9906 = relay.TupleGetItem(func_9657_call(), 0)
call_9907 = relay.TupleGetItem(func_9659_call(), 0)
func_4380_call = mod.get_global_var('func_4380')
func_4387_call = mutated_mod.get_global_var('func_4387')
var_9915 = relay.var("var_9915", dtype = "float32", shape = (2688,))#candidate|9915|(2688,)|var|float32
const_9916 = relay.const([[9.461387,6.183118],[6.072460,9.683607],[-5.098150,-4.252272],[-8.681847,-7.697256],[8.294556,3.856010],[8.769023,3.497605],[1.885947,6.551886],[-4.944753,8.884158],[3.159947,-2.637394],[-9.709050,-3.467836],[-8.132616,2.788549],[-6.931972,7.061535],[-4.023695,3.517644],[-7.220294,-3.601681],[5.933500,5.133179],[-2.965009,2.766720],[9.280581,4.000697],[-7.559631,-8.784450],[-4.608907,9.039918],[3.254176,-3.284887],[-6.549030,3.613541],[-9.675479,-5.869238],[2.058409,1.131968],[-3.446323,7.215857],[-5.480043,-8.590320],[5.954061,8.764085],[-3.061146,-1.219641],[1.734364,6.840576],[-0.211501,-9.527802],[3.735840,8.909160],[3.879925,-0.172303],[0.263827,4.729723],[-4.707275,-6.461141],[4.703071,3.181141],[5.249928,8.272603],[-4.939636,-3.165015],[-5.486081,3.309564],[4.822212,-8.639098],[0.355584,5.826256],[4.882408,-8.800065],[-6.721470,3.616000],[-1.243518,9.853904],[-8.436488,-7.311239],[8.947014,-8.307059],[-7.933136,0.612043],[-2.073923,-9.892854],[7.267351,-5.512764],[-8.305904,-6.531977],[-1.009248,-8.690078],[9.360968,-1.293436],[9.793986,-6.145407],[9.531467,-1.737825],[6.220941,6.497020],[9.818608,3.950307],[0.470204,4.968033],[9.714944,-1.443682],[9.774911,-8.179040],[-0.846577,4.264799],[-2.607584,8.728098],[-3.849331,8.694883],[5.858040,4.129296],[-9.372465,2.336991],[-7.800879,6.069525],[7.651179,1.453205]], dtype = "float32")#candidate|9916|(64, 2)|const|float32
const_9917 = relay.const(-7, dtype = "uint64")#candidate|9917|()|const|uint64
const_9918 = relay.const([[-8,-1,5,1,7,-6,3,-8,9,-10,-9,7,6,-9,9,-3,2,-3,6,-2,-8,-9,2,8,7,2,-10,-8,-4,-7,6,-9,-6,5,6,2,-8,5,-10,-3,10,-5,-4,-9,9,1,-7,-4,-1,-4,8,1,9,-8,-8,8,-8,-8,-3,1],[4,9,-2,-8,-4,2,-10,-10,10,10,2,-5,8,-3,2,-4,7,10,6,2,10,-4,8,9,-5,-7,-6,7,8,4,-5,-6,2,2,6,10,10,6,1,10,-6,-10,1,-6,-7,-9,-9,-5,-5,-10,10,8,-3,10,4,9,6,4,-9,6],[-1,8,-4,-2,9,1,-2,-1,-3,-1,10,-7,-9,4,1,6,9,-3,-9,1,9,-7,-10,7,9,10,-8,-8,10,-7,-3,5,6,-6,-5,3,8,-6,-10,4,1,-9,-3,-7,8,-3,6,-5,-6,-9,8,6,4,6,6,-3,6,-7,-8,1]], dtype = "uint64")#candidate|9918|(3, 60)|const|uint64
var_9919 = relay.var("var_9919", dtype = "int32", shape = (1680,))#candidate|9919|(1680,)|var|int32
const_9920 = relay.const([4,1,4,4,4,10,3,-1,-8,8,-6,-4,-1,2,-10,8,-6,-7,-10,4,2,-1,-4,4,7,-7,-8,7,5,-1,-2,-1,9,-9,-1,-1,9,-10,4,-6,-7,-4,-1,4,-2,-10,-3,1,1,1,4,-6,5,7,-1,10,3,3,-5,-9,2,-9,2,-7,1,6,-1,8,10,5,8,9,9,7,-9,-3,6,7,4,-1,-3,10,-1,10,-6,3,2,7,-6,-7,1,-5,2,2,-6,-8,-2,-3,-7,-4,-9,6,1,-3,8,-1,10,3,-9,-5,-2,6,-1,6,-3,2,-7,3,2,4,-8,8,-2,9,7,-6,8,10,-2,-9,7,7,10,4,8,3,-5,-5,1,6,-7,-7,-6,-6,5,3,9,-8,2,4,-9,7,5,1,-5,3,1,10,-7,6,-4,-4,9,-5,-3,2,-5,6,-2,-7,5,-2,10,-4,8,10], dtype = "int8")#candidate|9920|(176,)|const|int8
call_9914 = relay.TupleGetItem(func_4380_call(relay.reshape(var_9915.astype('float32'), [14, 16, 12]), relay.reshape(const_9916.astype('float32'), [4, 32]), relay.reshape(const_9917.astype('uint64'), []), relay.reshape(const_9918.astype('uint64'), [180,]), relay.reshape(var_9919.astype('int32'), [1680,]), relay.reshape(const_9920.astype('int8'), [176,]), ), 5)
call_9921 = relay.TupleGetItem(func_4387_call(relay.reshape(var_9915.astype('float32'), [14, 16, 12]), relay.reshape(const_9916.astype('float32'), [4, 32]), relay.reshape(const_9917.astype('uint64'), []), relay.reshape(const_9918.astype('uint64'), [180,]), relay.reshape(var_9919.astype('int32'), [1680,]), relay.reshape(const_9920.astype('int8'), [176,]), ), 5)
output = relay.Tuple([call_9906,call_9914,var_9915,const_9916,const_9917,const_9918,var_9919,const_9920,])
output2 = relay.Tuple([call_9907,call_9921,var_9915,const_9916,const_9917,const_9918,var_9919,const_9920,])
func_9931 = relay.Function([var_9915,var_9919,], output)
mod['func_9931'] = func_9931
mod = relay.transform.InferType()(mod)
var_9932 = relay.var("var_9932", dtype = "float32", shape = (2688,))#candidate|9932|(2688,)|var|float32
var_9933 = relay.var("var_9933", dtype = "int32", shape = (1680,))#candidate|9933|(1680,)|var|int32
output = func_9931(var_9932,var_9933,)
func_9934 = relay.Function([var_9932,var_9933,], output)
mutated_mod['func_9934'] = func_9934
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8556_call = mod.get_global_var('func_8556')
func_8557_call = mutated_mod.get_global_var('func_8557')
call_9936 = func_8556_call()
call_9937 = func_8556_call()
output = relay.Tuple([call_9936,])
output2 = relay.Tuple([call_9937,])
func_9966 = relay.Function([], output)
mod['func_9966'] = func_9966
mod = relay.transform.InferType()(mod)
output = func_9966()
func_9967 = relay.Function([], output)
mutated_mod['func_9967'] = func_9967
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9987 = relay.var("var_9987", dtype = "float64", shape = (7, 13, 12))#candidate|9987|(7, 13, 12)|var|float64
uop_9988 = relay.atanh(var_9987.astype('float64')) # shape=(7, 13, 12)
output = relay.Tuple([uop_9988,])
output2 = relay.Tuple([uop_9988,])
func_9993 = relay.Function([var_9987,], output)
mod['func_9993'] = func_9993
mod = relay.transform.InferType()(mod)
var_9994 = relay.var("var_9994", dtype = "float64", shape = (7, 13, 12))#candidate|9994|(7, 13, 12)|var|float64
output = func_9993(var_9994)
func_9995 = relay.Function([var_9994], output)
mutated_mod['func_9995'] = func_9995
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9299_call = mod.get_global_var('func_9299')
func_9300_call = mutated_mod.get_global_var('func_9300')
call_10019 = relay.TupleGetItem(func_9299_call(), 0)
call_10020 = relay.TupleGetItem(func_9300_call(), 0)
func_9966_call = mod.get_global_var('func_9966')
func_9967_call = mutated_mod.get_global_var('func_9967')
call_10041 = relay.TupleGetItem(func_9966_call(), 0)
call_10042 = relay.TupleGetItem(func_9967_call(), 0)
output = relay.Tuple([call_10019,call_10041,])
output2 = relay.Tuple([call_10020,call_10042,])
func_10043 = relay.Function([], output)
mod['func_10043'] = func_10043
mod = relay.transform.InferType()(mod)
output = func_10043()
func_10044 = relay.Function([], output)
mutated_mod['func_10044'] = func_10044
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9726_call = mod.get_global_var('func_9726')
func_9727_call = mutated_mod.get_global_var('func_9727')
call_10088 = relay.TupleGetItem(func_9726_call(), 0)
call_10089 = relay.TupleGetItem(func_9727_call(), 0)
output = call_10088
output2 = call_10089
func_10110 = relay.Function([], output)
mod['func_10110'] = func_10110
mod = relay.transform.InferType()(mod)
output = func_10110()
func_10111 = relay.Function([], output)
mutated_mod['func_10111'] = func_10111
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9665_call = mod.get_global_var('func_9665')
func_9666_call = mutated_mod.get_global_var('func_9666')
call_10136 = relay.TupleGetItem(func_9665_call(), 0)
call_10137 = relay.TupleGetItem(func_9666_call(), 0)
uop_10156 = relay.atanh(call_10136.astype('float64')) # shape=(3, 12, 4)
uop_10158 = relay.atanh(call_10137.astype('float64')) # shape=(3, 12, 4)
var_10160 = relay.var("var_10160", dtype = "float64", shape = (3, 12, 4))#candidate|10160|(3, 12, 4)|var|float64
bop_10161 = relay.not_equal(uop_10156.astype('bool'), relay.reshape(var_10160.astype('bool'), relay.shape_of(uop_10156))) # shape=(3, 12, 4)
bop_10164 = relay.not_equal(uop_10158.astype('bool'), relay.reshape(var_10160.astype('bool'), relay.shape_of(uop_10158))) # shape=(3, 12, 4)
func_9685_call = mod.get_global_var('func_9685')
func_9687_call = mutated_mod.get_global_var('func_9687')
call_10168 = func_9685_call()
call_10169 = func_9685_call()
func_9665_call = mod.get_global_var('func_9665')
func_9666_call = mutated_mod.get_global_var('func_9666')
call_10204 = relay.TupleGetItem(func_9665_call(), 0)
call_10205 = relay.TupleGetItem(func_9666_call(), 0)
func_9385_call = mod.get_global_var('func_9385')
func_9389_call = mutated_mod.get_global_var('func_9389')
var_10248 = relay.var("var_10248", dtype = "float64", shape = (286, 2))#candidate|10248|(286, 2)|var|float64
var_10249 = relay.var("var_10249", dtype = "float32", shape = (450,))#candidate|10249|(450,)|var|float32
call_10247 = relay.TupleGetItem(func_9385_call(relay.reshape(var_10248.astype('float64'), [11, 4, 13]), relay.reshape(var_10249.astype('float32'), [450,]), ), 0)
call_10250 = relay.TupleGetItem(func_9389_call(relay.reshape(var_10248.astype('float64'), [11, 4, 13]), relay.reshape(var_10249.astype('float32'), [450,]), ), 0)
output = relay.Tuple([bop_10161,call_10168,call_10204,call_10247,var_10248,var_10249,])
output2 = relay.Tuple([bop_10164,call_10169,call_10205,call_10250,var_10248,var_10249,])
func_10280 = relay.Function([var_10160,var_10248,var_10249,], output)
mod['func_10280'] = func_10280
mod = relay.transform.InferType()(mod)
mutated_mod['func_10280'] = func_10280
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10280_call = mutated_mod.get_global_var('func_10280')
var_10282 = relay.var("var_10282", dtype = "float64", shape = (3, 12, 4))#candidate|10282|(3, 12, 4)|var|float64
var_10283 = relay.var("var_10283", dtype = "float64", shape = (286, 2))#candidate|10283|(286, 2)|var|float64
var_10284 = relay.var("var_10284", dtype = "float32", shape = (450,))#candidate|10284|(450,)|var|float32
call_10281 = func_10280_call(var_10282,var_10283,var_10284,)
output = call_10281
func_10285 = relay.Function([var_10282,var_10283,var_10284,], output)
mutated_mod['func_10285'] = func_10285
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9129_call = mod.get_global_var('func_9129')
func_9130_call = mutated_mod.get_global_var('func_9130')
call_10290 = relay.TupleGetItem(func_9129_call(), 0)
call_10291 = relay.TupleGetItem(func_9130_call(), 0)
output = call_10290
output2 = call_10291
func_10292 = relay.Function([], output)
mod['func_10292'] = func_10292
mod = relay.transform.InferType()(mod)
output = func_10292()
func_10293 = relay.Function([], output)
mutated_mod['func_10293'] = func_10293
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9299_call = mod.get_global_var('func_9299')
func_9300_call = mutated_mod.get_global_var('func_9300')
call_10305 = relay.TupleGetItem(func_9299_call(), 0)
call_10306 = relay.TupleGetItem(func_9300_call(), 0)
func_9726_call = mod.get_global_var('func_9726')
func_9727_call = mutated_mod.get_global_var('func_9727')
call_10315 = relay.TupleGetItem(func_9726_call(), 0)
call_10316 = relay.TupleGetItem(func_9727_call(), 0)
output = relay.Tuple([call_10305,call_10315,])
output2 = relay.Tuple([call_10306,call_10316,])
func_10332 = relay.Function([], output)
mod['func_10332'] = func_10332
mod = relay.transform.InferType()(mod)
mutated_mod['func_10332'] = func_10332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10332_call = mutated_mod.get_global_var('func_10332')
call_10333 = func_10332_call()
output = call_10333
func_10334 = relay.Function([], output)
mutated_mod['func_10334'] = func_10334
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8608_call = mod.get_global_var('func_8608')
func_8609_call = mutated_mod.get_global_var('func_8609')
call_10335 = func_8608_call()
call_10336 = func_8608_call()
const_10338 = relay.const([[[2.151553,0.324524,-1.734405,-2.927164],[3.765762,-6.788867,5.318332,5.136977],[-1.434715,7.163609,0.293583,7.417934],[1.027026,-0.002570,-2.476586,-7.652617],[1.499750,-1.407065,-9.519336,6.692565],[-8.732531,-4.818384,-7.591069,-6.677461],[-6.056335,-2.967789,-4.192897,2.740775],[-9.625753,2.105960,9.774964,5.987843],[9.330381,-3.439148,-3.790549,0.214099],[-5.992979,-9.914975,5.531313,0.830766],[-5.470124,8.775737,1.981854,-3.501136],[-2.948724,-1.993340,7.825158,3.835171]],[[-2.054546,-7.674082,4.982544,3.371255],[1.511956,-9.827833,-3.713974,-2.533730],[1.589891,1.613202,0.110654,8.307355],[9.346067,6.123942,0.438467,2.881108],[6.784848,-5.405419,8.828534,-6.134327],[0.449421,4.614702,-3.123797,-2.402495],[-6.389248,-2.109683,6.542357,8.738153],[-9.250626,-2.447977,9.169103,6.750416],[1.070195,0.272853,1.116115,-3.865104],[6.094208,-1.240545,6.203122,5.899945],[-2.854507,0.399378,2.356367,8.386996],[-2.408481,3.945327,8.866174,-9.821528]],[[-9.497880,-8.748621,9.806114,-8.739294],[-2.508838,-2.044735,0.120981,6.279688],[1.939262,-8.961504,-8.831367,-8.912037],[7.298547,-1.577148,-3.547862,0.225094],[3.932327,-4.217827,-1.408413,8.723892],[0.180907,0.228790,1.640837,9.222940],[1.825406,-7.217113,6.048173,-2.567994],[-2.983129,4.817085,3.062743,-5.554798],[-1.621384,5.729321,8.522437,-1.305243],[-5.166498,-4.997446,-8.236346,6.778928],[6.961609,0.465729,-3.505126,5.034525],[7.046603,-8.728150,1.595321,7.029694]]], dtype = "float32")#candidate|10338|(3, 12, 4)|const|float32
bop_10339 = relay.logical_xor(call_10335.astype('int16'), relay.reshape(const_10338.astype('int16'), relay.shape_of(call_10335))) # shape=(3, 12, 4)
bop_10342 = relay.logical_xor(call_10336.astype('int16'), relay.reshape(const_10338.astype('int16'), relay.shape_of(call_10336))) # shape=(3, 12, 4)
output = bop_10339
output2 = bop_10342
func_10343 = relay.Function([], output)
mod['func_10343'] = func_10343
mod = relay.transform.InferType()(mod)
output = func_10343()
func_10344 = relay.Function([], output)
mutated_mod['func_10344'] = func_10344
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9685_call = mod.get_global_var('func_9685')
func_9687_call = mutated_mod.get_global_var('func_9687')
call_10367 = func_9685_call()
call_10368 = func_9685_call()
output = relay.Tuple([call_10367,])
output2 = relay.Tuple([call_10368,])
func_10381 = relay.Function([], output)
mod['func_10381'] = func_10381
mod = relay.transform.InferType()(mod)
mutated_mod['func_10381'] = func_10381
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10381_call = mutated_mod.get_global_var('func_10381')
call_10382 = func_10381_call()
output = call_10382
func_10383 = relay.Function([], output)
mutated_mod['func_10383'] = func_10383
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9129_call = mod.get_global_var('func_9129')
func_9130_call = mutated_mod.get_global_var('func_9130')
call_10384 = relay.TupleGetItem(func_9129_call(), 0)
call_10385 = relay.TupleGetItem(func_9130_call(), 0)
output = call_10384
output2 = call_10385
func_10386 = relay.Function([], output)
mod['func_10386'] = func_10386
mod = relay.transform.InferType()(mod)
mutated_mod['func_10386'] = func_10386
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10386_call = mutated_mod.get_global_var('func_10386')
call_10387 = func_10386_call()
output = call_10387
func_10388 = relay.Function([], output)
mutated_mod['func_10388'] = func_10388
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9665_call = mod.get_global_var('func_9665')
func_9666_call = mutated_mod.get_global_var('func_9666')
call_10447 = relay.TupleGetItem(func_9665_call(), 0)
call_10448 = relay.TupleGetItem(func_9666_call(), 0)
func_976_call = mod.get_global_var('func_976')
func_979_call = mutated_mod.get_global_var('func_979')
var_10474 = relay.var("var_10474", dtype = "uint64", shape = ())#candidate|10474|()|var|uint64
var_10475 = relay.var("var_10475", dtype = "uint64", shape = (180,))#candidate|10475|(180,)|var|uint64
call_10473 = func_976_call(relay.reshape(var_10474.astype('uint64'), []), relay.reshape(var_10475.astype('uint64'), [5, 9, 4]), )
call_10476 = func_976_call(relay.reshape(var_10474.astype('uint64'), []), relay.reshape(var_10475.astype('uint64'), [5, 9, 4]), )
func_5960_call = mod.get_global_var('func_5960')
func_5962_call = mutated_mod.get_global_var('func_5962')
const_10479 = relay.const([[5.438731],[-5.747577],[4.064153],[6.245275],[-6.496147],[4.788614],[1.014223],[4.875417],[-9.856089],[3.059991],[-4.331861],[-0.788576],[2.559256],[0.862910],[5.605027],[4.280322],[7.595972],[-6.410619],[0.109447],[5.633854],[3.703912],[5.149977],[2.269904],[-3.027355],[-2.539235],[5.824454],[-7.586521],[-0.603703],[-7.993433],[5.312763],[-2.898571],[-9.586483],[8.934275],[-1.639329],[-3.370667],[-7.841766],[4.227258],[-7.947804],[-1.064778],[-0.981567],[1.882556],[-6.367715],[4.135344],[2.018653],[-2.039886],[-3.987964],[0.645432],[9.366748],[0.276221],[8.433702],[8.681140],[0.913724],[4.217633],[4.279552],[-2.655551],[-1.763099],[9.068930],[-7.565833],[-7.878553],[-9.637985],[-6.795050],[6.555257],[4.504459],[-5.092247],[5.455064],[3.418228],[2.489772],[5.826176],[-6.378532],[6.550085],[-0.649217],[-3.318556],[-3.116688],[2.030966],[-2.880998],[5.556294],[-5.248559],[-3.807912],[5.578815],[-3.194308],[3.383334],[2.998482],[-2.383400],[9.826028],[1.861224],[9.314274],[4.813734],[-9.158911],[-5.609482],[-3.056532],[1.462381],[-7.010950],[-5.542281],[-9.586764],[0.504797],[-8.394829],[-4.314838],[-7.022729],[-8.402812],[7.910712],[-4.634743],[-4.304323],[2.588838],[9.340520],[-2.043284],[-2.114890],[1.864235],[2.050171],[-5.648949],[-3.597073],[-6.660024],[-7.120096],[-5.772898],[0.872822],[-0.298404],[6.733603],[1.980906],[-7.304529],[-0.930965],[9.653630],[1.561463],[-6.221427],[-9.343478],[4.029791],[0.983490],[-7.912528],[-6.411845],[-6.340797],[4.110761],[-4.816061],[8.541804],[-0.261203],[1.584860],[4.313173],[-9.736305],[-7.934293],[-7.472627],[8.417448],[-7.344306],[4.781718],[-5.700648],[2.853517],[-6.463854],[2.801702],[1.453548],[-4.480316],[6.804085],[7.462001],[7.275130],[-0.801380],[0.215932],[-8.529079],[-3.209515],[-5.152240],[-4.263415],[-7.041345],[-5.078258],[5.195261],[-9.984556],[-1.935309],[-3.628632],[-1.866837],[-5.356687],[-8.221508],[-4.923698],[0.009766],[0.957499],[2.470667],[2.303102],[-1.421169],[-6.609282],[-6.625896],[-9.874427],[6.610717],[6.488015],[-8.395187],[-4.846220],[1.060434],[3.779260],[2.401437],[4.222806],[5.149993],[-6.456823],[-1.101400],[9.111162],[3.402008],[4.695655],[-4.985923],[4.197563],[-3.090848],[7.855055],[2.324952],[7.737028],[-8.838120],[-7.058229],[-9.039289],[4.766381],[2.016612],[0.948347],[7.965478],[-4.706547],[-7.912308],[0.720054],[-7.983406],[-4.946432],[8.977859],[1.233408],[-8.737987],[5.672804],[2.079747],[-1.226477],[0.420522],[-4.079421],[2.510751],[-8.131443],[-3.154487],[2.877807],[4.347360],[9.362657],[4.748098],[-9.524844],[3.545941],[5.231231],[6.655318],[2.168866],[2.310207],[-0.767263],[3.068947],[2.256622],[-9.929031],[8.823355],[-2.123964],[8.078388],[0.099369],[4.208818],[6.390132],[1.949063],[-7.755633],[-9.625557],[-2.449487],[-7.175343],[8.540914],[-8.575767],[6.014105],[9.508795],[-6.615527],[-0.704206],[7.856529],[-4.135396],[-6.440995],[9.212758],[0.943317],[8.144453],[-4.765751],[6.916704],[0.262421],[-7.474235],[5.562518],[7.241408],[-2.464166],[-3.561827],[7.458386],[2.873079],[4.820138],[-1.175291],[-4.807229],[7.697330],[-9.310640],[3.824804],[-5.342049],[3.870623],[-2.016182],[-0.566300],[5.988507],[8.734681],[-3.409045],[-3.160225],[-0.956217],[-0.677112],[2.700611],[-0.399845],[-8.733435],[4.390670],[-4.159434],[4.356466],[-7.884250],[-1.680348],[-4.791664],[-0.324036],[-9.995383],[6.718794],[6.719224],[-0.408108],[-7.732296],[1.251084],[7.450185],[9.663308],[8.077021],[9.214002],[0.189137],[-7.493748],[0.897325],[-0.305407],[4.667192],[7.864771],[-1.911280],[-4.539835],[-0.092286],[-3.441476],[6.848773],[-6.780887],[0.982535],[8.916350],[0.061065],[-5.189954],[7.046508],[-3.897094],[3.732166],[0.335835],[8.197427],[-7.841614],[2.064472],[1.708004],[2.741413],[-1.200131],[-3.446644],[-0.445660],[-3.728288],[-2.113579],[-1.174670],[-3.066692],[-1.593580],[-1.313317],[-5.646785],[-9.204287],[0.432503],[1.302819],[-5.220812],[-4.993287],[-4.204454],[-5.895159],[-5.791224],[-6.695681],[-8.289413],[-8.137184],[5.534253],[2.159795],[5.544896],[7.378245],[6.002050],[7.445137],[-3.958783],[9.275639],[5.784245],[8.601646],[2.591171],[-3.350873],[-6.209819],[-7.183652],[-9.134482],[0.006842],[-8.089801],[1.265885],[-5.610046],[9.913835],[-7.008315],[-3.346026],[1.713836],[3.318916],[-4.970887],[2.037841],[1.030092],[2.641236],[-4.847001],[-8.772701],[-6.113885],[9.646877],[-7.973586],[-6.862240],[0.277320],[-3.777448],[-1.892975],[6.095903],[9.565842],[-7.775797],[0.601926],[4.948012],[-0.319201],[-0.654680],[-6.673310],[5.497845],[-9.050423],[4.149552],[7.418235],[5.058429],[4.128654],[-1.923455],[2.456555],[-4.573367],[2.705180],[-8.860449],[-0.184237],[7.376671],[-7.195737],[4.696017],[-5.307007],[9.456389],[1.444256],[-1.006058],[-9.713725],[-2.189244],[7.832140],[7.091223],[-0.696550],[8.261378],[-6.338151],[-3.545840],[4.437075],[5.716657],[1.536103],[6.560058],[4.122973],[-6.884653],[9.446976],[3.966686],[-7.757667],[-5.818325],[0.424745],[-1.333701],[7.324314],[2.193900],[8.748324],[-1.918488],[1.743422],[-3.491467],[-9.087879],[-1.270309],[-3.991963],[9.806349],[5.215101],[8.827634],[-9.793986],[-3.962436],[5.155696],[7.681820],[-9.082875],[8.901063],[-4.664816],[2.830375],[9.202972],[-9.627503],[4.937529],[-0.212945],[1.463290],[4.302916],[-2.029058],[-1.756936],[-5.788059],[-9.020884],[-1.377872],[-8.261260],[-2.423534],[-9.153462],[7.687410],[-2.305195],[-3.164747],[2.498523],[-1.819512],[1.415105],[3.222351],[-2.296920],[-1.366626],[-6.277283],[5.851331],[-9.164917],[-6.285723],[9.641232],[-8.126726],[5.340750],[2.064171],[4.537926],[-6.402265],[5.751441],[-9.137645],[-2.483187],[2.370147],[6.874954],[4.859497],[7.212372],[9.335241],[-0.900913],[-9.882236],[-2.139635],[-5.643829],[6.095120],[-3.810513],[9.643585],[8.964061],[4.654134],[2.534963],[2.781189],[-9.006173],[-5.310084],[-7.728620],[2.684180],[-5.610065],[9.915389],[5.938309],[6.015073],[5.578103],[0.604119],[3.179768],[-9.630316],[4.113170],[-7.730279],[0.979114],[4.886617],[3.565878],[0.711722],[8.296838],[6.202079],[3.709481],[9.348226],[-0.469372],[-6.923932],[4.920480],[1.357057],[-5.591940],[8.883476],[6.177950],[-3.271395],[4.321599],[3.338406],[-4.931172],[-5.873721],[1.146036],[2.454327],[-4.652199],[7.348563],[1.314751],[-4.187435],[8.261484],[-6.520798],[6.500830],[3.255998],[3.150671],[1.025852],[7.169320],[6.727114],[0.995088],[-0.836050],[3.447542],[0.976108],[-0.051449],[7.781246],[-2.602628],[-9.106490],[2.375915],[2.253774],[-3.135929],[-0.109999],[1.663486],[-3.638940],[-5.599899],[-2.462772],[1.815539],[-8.341941],[-2.045167],[-2.790711],[-1.624676],[-1.381504],[8.084715],[-0.300347],[7.065460],[4.087464],[-9.846993],[-5.714556],[1.101007],[-8.546850],[-1.810608],[0.532292],[4.718454],[7.596010],[-5.704160],[-1.418315],[1.340794],[9.211018],[5.197142],[3.005832],[-0.568469],[-6.280801],[-6.144089],[-4.173783],[0.884770],[6.978310],[7.304775],[6.246788],[-4.030009],[-1.233239],[-3.347650],[7.466035],[4.356234],[-6.209043],[-3.956350],[-3.033083],[-7.903210],[3.301475],[4.295102],[-8.179857],[9.775430],[-5.263393],[4.153900],[3.931902],[-1.045023],[-6.918836],[0.962316],[-2.293171],[-7.044726],[9.436006],[5.797358],[0.464442],[4.822596],[-4.084436],[-1.682544],[9.987715],[2.579307],[-1.558150],[-7.942587],[-9.199587],[8.514776],[2.707318],[4.024832],[-6.746177],[8.307417],[-8.417418],[9.388024],[-3.627022],[9.718747],[7.790380],[-8.292226],[6.415267],[-7.845869],[-1.262756],[5.250363],[-2.804969],[7.311118],[3.468723],[9.143475],[-0.699035],[-2.339758],[9.932231],[2.269650],[-9.394872],[7.939649],[-5.191133],[-4.765950],[1.914983],[-7.734552],[8.795106],[-9.628678],[-6.728749],[-7.739079],[-8.736920],[1.516044],[-2.325974],[-8.875073],[2.989645],[4.887201],[-4.963081],[8.084596],[-9.257734],[-7.885274],[5.616632],[5.862369],[-4.967556],[-1.810075],[0.163441],[4.090576],[-8.629315],[8.113415],[-0.392895],[3.552227],[2.835463],[9.126356],[3.490600],[-2.909174],[-0.406418],[9.822825],[8.938211],[0.244590],[-1.076204],[2.017868],[-1.856721],[-3.915643],[5.791995],[8.484266],[0.096104],[-3.731240],[0.526709],[-9.054124],[-3.401968],[5.612667],[3.721927],[-4.855711],[6.887698],[-3.945604],[1.001204],[-8.179145],[-7.008091],[2.759920],[-7.049993],[0.038289],[7.028977],[-4.319374],[5.923521],[2.846636],[9.001450],[4.146641],[1.691997],[-2.929621],[0.040884],[-0.629980],[-4.177837],[-8.881282],[1.703721],[-7.005583],[-9.536134],[3.574871],[4.076699],[-0.404568],[-4.785653],[1.450536],[-2.267550],[-0.273053],[-7.463614],[2.399144],[-6.644526],[1.937170],[-0.392288],[7.306188],[2.450982],[8.673612],[-5.685847],[3.325004],[-5.637299],[-9.063986],[9.239379],[-5.116365],[-2.993555],[5.628528],[1.261632],[-7.945828],[-1.290272],[-4.908043],[1.630663],[1.106688],[-1.151253],[-9.562425],[8.591717],[-7.291494],[-1.756824],[6.369292],[-4.376855],[5.334918],[-6.378052],[-3.504342],[8.146131],[3.004519],[-6.225683],[-7.908524],[-0.722783],[-0.741107],[-1.288831],[6.460950],[-2.628590],[1.673789],[-8.023848],[-6.097737],[5.838687],[-6.625987],[-4.367244],[0.926727],[6.709569],[7.105955],[8.747889],[-4.292097],[9.177608],[-6.988609],[8.523140],[-4.696240],[1.395780],[-7.726404],[-2.801750],[7.309014],[0.200322],[1.982421],[-2.180587],[4.574473],[-8.452865],[7.385458],[8.914626],[2.488550],[-8.431365],[-3.479547],[4.368052],[5.243590],[6.358880],[-7.414834],[-3.957448],[7.080350],[2.838484],[7.237728],[7.283707],[-0.269544],[7.426360],[0.170116],[6.448100],[-4.109125],[-7.239917],[0.562204],[9.065994],[8.620286],[8.084116],[-5.204079],[4.237161],[4.503417],[-6.874573],[-0.346237],[4.503234],[7.145531],[-4.450829],[7.842670],[1.133975],[1.508713],[2.008596],[7.849719],[6.698306],[0.803084],[9.116576],[-7.823928],[8.326799],[6.910331],[-6.453772],[9.086177],[-8.025444],[-6.271998],[-1.474219],[-8.317673],[5.271966],[0.003743],[2.233164],[8.203891],[7.349683],[9.258090],[-3.248807],[8.486232],[7.494481],[-9.987318],[-5.170737],[5.966171],[-3.257969],[9.003062],[-7.668052],[9.396186],[1.231146],[-5.440775],[1.728709],[2.063625],[-3.573916],[3.942494],[-3.929588],[-2.679038],[-5.192745],[5.893935],[-6.835791],[8.100522],[5.108179],[7.768322],[5.270792],[8.901832],[-2.470584],[1.871133],[-4.827086],[-2.219943],[7.992916],[0.197935],[3.668732],[5.416375],[-0.604619],[-9.736929],[1.927141],[-8.637432],[1.663519],[-3.113540],[-1.074834],[9.789390],[8.288692],[-2.842200],[-4.635479],[-3.777684],[0.836973],[3.663460],[6.968746],[-1.110536],[-4.166142],[8.053417],[-8.360951],[-4.382600],[1.197861],[-9.575885],[-9.740488],[-2.405459],[-2.195676],[0.632848],[-8.455931],[-5.026301],[-5.032691],[-3.996651],[-9.422433],[1.456478],[2.338104],[4.065542],[-2.347389],[3.635349],[-7.156328],[8.477044],[-9.511623],[7.679643],[5.104046],[6.310150],[-8.441082],[0.791129],[2.273645],[3.698275],[-1.569847],[-3.075447],[7.799749],[1.292637],[8.568678],[2.755684],[6.397881],[5.263347],[7.532739],[-4.605824],[2.434041],[-6.363381],[-9.852729],[-3.713802],[9.768125],[1.276162],[4.622631],[2.501695],[7.187485],[-7.742260],[-4.819202],[0.724731],[6.053319],[6.177407],[6.224811],[3.595781],[9.325739],[-4.460908],[8.654848],[2.958044],[-6.049145],[-7.455407],[3.619295],[-7.411461],[-7.551573],[7.944108],[9.707669],[-7.785606],[9.429226],[3.407211],[-0.690397],[-8.843054],[-0.148992],[0.462883],[2.202306],[-0.029044],[1.242014],[7.237924],[-3.864043],[-1.213212],[5.281067],[2.433185],[-6.478324],[9.130962],[7.152566],[-0.195116],[5.984979],[3.914805],[6.999084],[1.584846],[-7.864856],[4.718735],[-0.715513],[-6.790898],[-3.774835],[1.236197],[-3.660795],[-9.644722],[0.201047],[9.729416],[-3.334063],[-8.151534],[-8.726644],[4.746362],[-6.023365],[-9.764270],[-4.312821],[-6.733504],[0.797539],[-6.937062],[1.282656],[4.614951],[-5.434378],[-6.349790],[7.317305],[3.327802],[0.138553],[4.267740],[9.575948],[-7.167960],[4.983646],[-1.070011],[-6.819799],[-5.870949],[3.795162],[0.713066],[-0.343607],[2.158420],[2.857187],[-8.731537],[5.707803],[-4.053605],[4.551572],[-8.935255],[1.195493],[-2.894435],[3.494000],[-2.769579],[-1.367519],[2.066299],[5.750100],[-8.221114],[9.312886],[5.694910],[-4.017916],[1.047734],[9.559559],[-1.307819],[1.818266],[5.680760],[9.340268],[5.672856],[8.734004],[-1.532605],[-9.771621],[2.083170],[6.324152],[-4.037230],[8.623634],[6.111504],[4.348191],[8.914871],[-3.843047],[-3.096454],[-7.563578],[-0.374787],[3.106341],[8.020533],[-2.342430],[-0.550900],[0.604068],[-8.110030],[-4.461737],[-9.983506],[-2.037281],[3.771924],[-3.305811],[-9.317607],[-2.939598],[2.891673],[7.076066],[3.917629],[4.142389],[4.648910],[-3.828889],[1.599560],[3.522001],[-4.917602],[-1.307906],[-4.637690],[-3.409645],[-3.809987],[-0.786022],[-7.850225],[0.761022],[-4.095791],[9.035668],[-8.616310],[-9.253970],[-5.995109],[9.083629],[-4.038034],[-4.791916],[-3.491030],[8.901221],[7.633939],[-8.597527],[1.528208],[0.287716],[-5.361227],[8.610119],[3.162829],[-2.467887],[1.554136],[5.220580],[9.460267],[1.046334],[2.927853],[1.932594],[-1.878142],[-7.838521],[-4.319431],[-1.577128],[-4.167657],[8.364850],[-6.292307],[9.930208],[-7.895910],[0.127297],[-8.194284],[2.824870],[-4.020704],[8.029327],[-6.435661],[8.273536],[-2.108975],[7.132631],[9.149508],[-0.022649],[8.363688],[-3.380088],[-3.163896],[4.978553],[6.498329],[-6.840238],[2.434221],[5.485545],[0.732918],[7.014757],[5.935014],[-3.967774]], dtype = "float32")#candidate|10479|(1155, 1)|const|float32
call_10478 = func_5960_call(relay.reshape(const_10479.astype('float32'), [7, 11, 15]))
call_10480 = func_5960_call(relay.reshape(const_10479.astype('float32'), [7, 11, 15]))
bop_10484 = relay.minimum(const_10479.astype('float32'), var_10474.astype('float32')) # shape=(1155, 1)
uop_10508 = relay.asin(call_10447.astype('float32')) # shape=(3, 12, 4)
uop_10510 = relay.asin(call_10448.astype('float32')) # shape=(3, 12, 4)
func_9424_call = mod.get_global_var('func_9424')
func_9425_call = mutated_mod.get_global_var('func_9425')
call_10523 = relay.TupleGetItem(func_9424_call(), 3)
call_10524 = relay.TupleGetItem(func_9425_call(), 3)
var_10526 = relay.var("var_10526", dtype = "float32", shape = (3, 12, 4))#candidate|10526|(3, 12, 4)|var|float32
bop_10527 = relay.divide(uop_10508.astype('float32'), relay.reshape(var_10526.astype('float32'), relay.shape_of(uop_10508))) # shape=(3, 12, 4)
bop_10530 = relay.divide(uop_10510.astype('float32'), relay.reshape(var_10526.astype('float32'), relay.shape_of(uop_10510))) # shape=(3, 12, 4)
func_841_call = mod.get_global_var('func_841')
func_843_call = mutated_mod.get_global_var('func_843')
const_10534 = relay.const([-8.538432,-4.795444,4.380481,8.011905,-5.606329,1.512261,0.082446,5.530803,-4.559851,-4.196192,-1.631381,7.895038,0.651190,-3.417081,-3.281948,-9.318509,4.396587,-9.465576,-9.733596,4.637082,-4.677966,-1.941845,-2.679860,-4.124096,1.124244,4.160512,1.287089,9.732600,1.641633,-5.509349,6.616349,0.346965,6.961394,3.457525,6.963847,-5.183816], dtype = "float64")#candidate|10534|(36,)|const|float64
call_10533 = relay.TupleGetItem(func_841_call(relay.reshape(const_10534.astype('float64'), [2, 3, 6])), 2)
call_10535 = relay.TupleGetItem(func_843_call(relay.reshape(const_10534.astype('float64'), [2, 3, 6])), 2)
output = relay.Tuple([call_10473,var_10475,call_10478,bop_10484,call_10523,bop_10527,call_10533,const_10534,])
output2 = relay.Tuple([call_10476,var_10475,call_10480,bop_10484,call_10524,bop_10530,call_10535,const_10534,])
func_10536 = relay.Function([var_10474,var_10475,var_10526,], output)
mod['func_10536'] = func_10536
mod = relay.transform.InferType()(mod)
var_10537 = relay.var("var_10537", dtype = "uint64", shape = ())#candidate|10537|()|var|uint64
var_10538 = relay.var("var_10538", dtype = "uint64", shape = (180,))#candidate|10538|(180,)|var|uint64
var_10539 = relay.var("var_10539", dtype = "float32", shape = (3, 12, 4))#candidate|10539|(3, 12, 4)|var|float32
output = func_10536(var_10537,var_10538,var_10539,)
func_10540 = relay.Function([var_10537,var_10538,var_10539,], output)
mutated_mod['func_10540'] = func_10540
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10386_call = mod.get_global_var('func_10386')
func_10388_call = mutated_mod.get_global_var('func_10388')
call_10557 = func_10386_call()
call_10558 = func_10386_call()
func_5960_call = mod.get_global_var('func_5960')
func_5962_call = mutated_mod.get_global_var('func_5962')
var_10562 = relay.var("var_10562", dtype = "float32", shape = (1155,))#candidate|10562|(1155,)|var|float32
call_10561 = func_5960_call(relay.reshape(var_10562.astype('float32'), [7, 11, 15]))
call_10563 = func_5960_call(relay.reshape(var_10562.astype('float32'), [7, 11, 15]))
uop_10572 = relay.log10(var_10562.astype('float32')) # shape=(1155,)
output = relay.Tuple([call_10557,call_10561,uop_10572,])
output2 = relay.Tuple([call_10558,call_10563,uop_10572,])
func_10574 = relay.Function([var_10562,], output)
mod['func_10574'] = func_10574
mod = relay.transform.InferType()(mod)
var_10575 = relay.var("var_10575", dtype = "float32", shape = (1155,))#candidate|10575|(1155,)|var|float32
output = func_10574(var_10575)
func_10576 = relay.Function([var_10575], output)
mutated_mod['func_10576'] = func_10576
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9685_call = mod.get_global_var('func_9685')
func_9687_call = mutated_mod.get_global_var('func_9687')
call_10580 = func_9685_call()
call_10581 = func_9685_call()
output = relay.Tuple([call_10580,])
output2 = relay.Tuple([call_10581,])
func_10598 = relay.Function([], output)
mod['func_10598'] = func_10598
mod = relay.transform.InferType()(mod)
mutated_mod['func_10598'] = func_10598
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10598_call = mutated_mod.get_global_var('func_10598')
call_10599 = func_10598_call()
output = call_10599
func_10600 = relay.Function([], output)
mutated_mod['func_10600'] = func_10600
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9603_call = mod.get_global_var('func_9603')
func_9605_call = mutated_mod.get_global_var('func_9605')
call_10643 = relay.TupleGetItem(func_9603_call(), 1)
call_10644 = relay.TupleGetItem(func_9605_call(), 1)
output = call_10643
output2 = call_10644
func_10651 = relay.Function([], output)
mod['func_10651'] = func_10651
mod = relay.transform.InferType()(mod)
output = func_10651()
func_10652 = relay.Function([], output)
mutated_mod['func_10652'] = func_10652
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10653 = relay.var("var_10653", dtype = "float32", shape = (11, 4, 16))#candidate|10653|(11, 4, 16)|var|float32
uop_10654 = relay.sqrt(var_10653.astype('float32')) # shape=(11, 4, 16)
output = uop_10654
output2 = uop_10654
func_10657 = relay.Function([var_10653,], output)
mod['func_10657'] = func_10657
mod = relay.transform.InferType()(mod)
var_10658 = relay.var("var_10658", dtype = "float32", shape = (11, 4, 16))#candidate|10658|(11, 4, 16)|var|float32
output = func_10657(var_10658)
func_10659 = relay.Function([var_10658], output)
mutated_mod['func_10659'] = func_10659
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9641_call = mod.get_global_var('func_9641')
func_9642_call = mutated_mod.get_global_var('func_9642')
call_10700 = func_9641_call()
call_10701 = func_9641_call()
output = call_10700
output2 = call_10701
func_10717 = relay.Function([], output)
mod['func_10717'] = func_10717
mod = relay.transform.InferType()(mod)
mutated_mod['func_10717'] = func_10717
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10717_call = mutated_mod.get_global_var('func_10717')
call_10718 = func_10717_call()
output = call_10718
func_10719 = relay.Function([], output)
mutated_mod['func_10719'] = func_10719
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8907_call = mod.get_global_var('func_8907')
func_8909_call = mutated_mod.get_global_var('func_8909')
call_10803 = relay.TupleGetItem(func_8907_call(), 0)
call_10804 = relay.TupleGetItem(func_8909_call(), 0)
output = relay.Tuple([call_10803,])
output2 = relay.Tuple([call_10804,])
func_10840 = relay.Function([], output)
mod['func_10840'] = func_10840
mod = relay.transform.InferType()(mod)
mutated_mod['func_10840'] = func_10840
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10840_call = mutated_mod.get_global_var('func_10840')
call_10841 = func_10840_call()
output = call_10841
func_10842 = relay.Function([], output)
mutated_mod['func_10842'] = func_10842
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10840_call = mod.get_global_var('func_10840')
func_10842_call = mutated_mod.get_global_var('func_10842')
call_10871 = relay.TupleGetItem(func_10840_call(), 0)
call_10872 = relay.TupleGetItem(func_10842_call(), 0)
output = relay.Tuple([call_10871,])
output2 = relay.Tuple([call_10872,])
func_10888 = relay.Function([], output)
mod['func_10888'] = func_10888
mod = relay.transform.InferType()(mod)
mutated_mod['func_10888'] = func_10888
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10888_call = mutated_mod.get_global_var('func_10888')
call_10889 = func_10888_call()
output = call_10889
func_10890 = relay.Function([], output)
mutated_mod['func_10890'] = func_10890
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9105_call = mod.get_global_var('func_9105')
func_9107_call = mutated_mod.get_global_var('func_9107')
call_10909 = relay.TupleGetItem(func_9105_call(), 2)
call_10910 = relay.TupleGetItem(func_9107_call(), 2)
output = call_10909
output2 = call_10910
func_10963 = relay.Function([], output)
mod['func_10963'] = func_10963
mod = relay.transform.InferType()(mod)
output = func_10963()
func_10964 = relay.Function([], output)
mutated_mod['func_10964'] = func_10964
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10043_call = mod.get_global_var('func_10043')
func_10044_call = mutated_mod.get_global_var('func_10044')
call_11056 = relay.TupleGetItem(func_10043_call(), 1)
call_11057 = relay.TupleGetItem(func_10044_call(), 1)
const_11063 = relay.const([[[5.738703,-7.993633,-9.248308,-3.789918],[5.935483,7.844527,-1.552096,-9.981197],[3.046394,-2.397385,-7.573918,7.560433],[2.185187,1.084530,0.462406,-0.033077],[-5.309081,4.153899,6.505452,-8.908324],[-0.105395,1.758087,6.652233,8.986932],[7.350334,2.077466,9.444993,-1.186372],[-7.757251,9.703713,-4.690625,-8.104252],[-5.022454,7.183316,9.713821,-8.534819],[-5.267545,0.617362,6.792916,-9.154411],[-5.783992,8.107276,-4.456189,-6.766330],[1.920487,2.903882,-5.424575,7.274990]],[[7.408941,-7.025737,-4.191495,-9.123635],[-1.032698,-6.086365,-6.947340,3.069077],[3.587470,-3.241460,-2.584244,-6.924040],[7.288962,8.241314,-0.878646,-2.954901],[-4.502339,-7.905070,-7.155022,3.425977],[-2.838028,-0.780920,-3.391985,0.132998],[-6.622285,6.030527,7.837903,7.311726],[2.561813,-8.382293,5.331749,4.321272],[0.043343,-7.890358,1.648860,9.872034],[1.435851,-1.365516,2.600205,3.681668],[-9.475401,-6.783516,3.600327,-0.988110],[-1.137986,-9.703556,0.492507,8.053195]],[[2.860005,-5.916988,7.186200,7.414679],[-0.148940,-1.936847,0.543219,9.376439],[9.055188,7.308428,8.760802,0.994375],[-8.939473,1.643119,-9.719767,1.318539],[-6.354074,-6.502454,4.036878,5.132402],[0.249432,8.282672,8.551286,-0.433048],[-6.030766,2.835954,3.920839,8.318081],[-2.742245,-6.600704,-0.283418,0.213310],[0.330547,-9.769418,6.691121,-9.806322],[-3.765381,4.807830,5.336466,-9.510285],[-7.888382,3.379667,-4.926793,9.607154],[-6.325737,7.724017,8.608894,1.300854]]], dtype = "float32")#candidate|11063|(3, 12, 4)|const|float32
bop_11064 = relay.floor_mod(call_11056.astype('float64'), relay.reshape(const_11063.astype('float64'), relay.shape_of(call_11056))) # shape=(3, 12, 4)
bop_11067 = relay.floor_mod(call_11057.astype('float64'), relay.reshape(const_11063.astype('float64'), relay.shape_of(call_11057))) # shape=(3, 12, 4)
func_9581_call = mod.get_global_var('func_9581')
func_9585_call = mutated_mod.get_global_var('func_9585')
var_11072 = relay.var("var_11072", dtype = "float64", shape = (36,))#candidate|11072|(36,)|var|float64
var_11073 = relay.var("var_11073", dtype = "uint8", shape = (4, 24))#candidate|11073|(4, 24)|var|uint8
call_11071 = relay.TupleGetItem(func_9581_call(relay.reshape(bop_11064.astype('float32'), [3, 12, 4]), relay.reshape(var_11072.astype('float64'), [36,]), relay.reshape(var_11073.astype('uint8'), [96,]), ), 3)
call_11074 = relay.TupleGetItem(func_9585_call(relay.reshape(bop_11064.astype('float32'), [3, 12, 4]), relay.reshape(var_11072.astype('float64'), [36,]), relay.reshape(var_11073.astype('uint8'), [96,]), ), 3)
var_11078 = relay.var("var_11078", dtype = "uint8", shape = (4, 24))#candidate|11078|(4, 24)|var|uint8
bop_11079 = relay.logical_or(var_11073.astype('bool'), relay.reshape(var_11078.astype('bool'), relay.shape_of(var_11073))) # shape=(4, 24)
output = relay.Tuple([bop_11064,call_11071,var_11072,bop_11079,])
output2 = relay.Tuple([bop_11067,call_11074,var_11072,bop_11079,])
func_11096 = relay.Function([var_11072,var_11073,var_11078,], output)
mod['func_11096'] = func_11096
mod = relay.transform.InferType()(mod)
mutated_mod['func_11096'] = func_11096
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11096_call = mutated_mod.get_global_var('func_11096')
var_11098 = relay.var("var_11098", dtype = "float64", shape = (36,))#candidate|11098|(36,)|var|float64
var_11099 = relay.var("var_11099", dtype = "uint8", shape = (4, 24))#candidate|11099|(4, 24)|var|uint8
var_11100 = relay.var("var_11100", dtype = "uint8", shape = (4, 24))#candidate|11100|(4, 24)|var|uint8
call_11097 = func_11096_call(var_11098,var_11099,var_11100,)
output = call_11097
func_11101 = relay.Function([var_11098,var_11099,var_11100,], output)
mutated_mod['func_11101'] = func_11101
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9299_call = mod.get_global_var('func_9299')
func_9300_call = mutated_mod.get_global_var('func_9300')
call_11105 = relay.TupleGetItem(func_9299_call(), 0)
call_11106 = relay.TupleGetItem(func_9300_call(), 0)
var_11136 = relay.var("var_11136", dtype = "float32", shape = (3, 12, 4))#candidate|11136|(3, 12, 4)|var|float32
bop_11137 = relay.maximum(call_11105.astype('int64'), relay.reshape(var_11136.astype('int64'), relay.shape_of(call_11105))) # shape=(3, 12, 4)
bop_11140 = relay.maximum(call_11106.astype('int64'), relay.reshape(var_11136.astype('int64'), relay.shape_of(call_11106))) # shape=(3, 12, 4)
func_9603_call = mod.get_global_var('func_9603')
func_9605_call = mutated_mod.get_global_var('func_9605')
call_11163 = relay.TupleGetItem(func_9603_call(), 0)
call_11164 = relay.TupleGetItem(func_9605_call(), 0)
output = relay.Tuple([bop_11137,call_11163,])
output2 = relay.Tuple([bop_11140,call_11164,])
func_11179 = relay.Function([var_11136,], output)
mod['func_11179'] = func_11179
mod = relay.transform.InferType()(mod)
var_11180 = relay.var("var_11180", dtype = "float32", shape = (3, 12, 4))#candidate|11180|(3, 12, 4)|var|float32
output = func_11179(var_11180)
func_11181 = relay.Function([var_11180], output)
mutated_mod['func_11181'] = func_11181
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9726_call = mod.get_global_var('func_9726')
func_9727_call = mutated_mod.get_global_var('func_9727')
call_11196 = relay.TupleGetItem(func_9726_call(), 0)
call_11197 = relay.TupleGetItem(func_9727_call(), 0)
func_9665_call = mod.get_global_var('func_9665')
func_9666_call = mutated_mod.get_global_var('func_9666')
call_11200 = relay.TupleGetItem(func_9665_call(), 0)
call_11201 = relay.TupleGetItem(func_9666_call(), 0)
output = relay.Tuple([call_11196,call_11200,])
output2 = relay.Tuple([call_11197,call_11201,])
func_11205 = relay.Function([], output)
mod['func_11205'] = func_11205
mod = relay.transform.InferType()(mod)
mutated_mod['func_11205'] = func_11205
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11205_call = mutated_mod.get_global_var('func_11205')
call_11206 = func_11205_call()
output = call_11206
func_11207 = relay.Function([], output)
mutated_mod['func_11207'] = func_11207
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10840_call = mod.get_global_var('func_10840')
func_10842_call = mutated_mod.get_global_var('func_10842')
call_11363 = relay.TupleGetItem(func_10840_call(), 0)
call_11364 = relay.TupleGetItem(func_10842_call(), 0)
func_1362_call = mod.get_global_var('func_1362')
func_1365_call = mutated_mod.get_global_var('func_1365')
var_11373 = relay.var("var_11373", dtype = "float32", shape = (90,))#candidate|11373|(90,)|var|float32
const_11374 = relay.const([9.994378,-3.861913,5.320668,-2.530714,8.899122,1.035393,4.996036,-9.935574,-8.624785,3.268629,-4.831883,-4.435454,4.288456,1.174046,-7.127285,-1.234251,-5.603898,-5.368133,-5.067551,8.730072,4.449951,2.877526,9.253743,-8.522557,-6.407233,-3.091050,-9.199299,9.786266,2.830071,-7.995079,4.765312,-2.552960,2.871530,-4.393954,1.649574,1.110817], dtype = "float64")#candidate|11374|(36,)|const|float64
call_11372 = relay.TupleGetItem(func_1362_call(relay.reshape(var_11373.astype('float32'), [10, 9, 1]), relay.reshape(const_11374.astype('float64'), [2, 3, 6]), ), 2)
call_11375 = relay.TupleGetItem(func_1365_call(relay.reshape(var_11373.astype('float32'), [10, 9, 1]), relay.reshape(const_11374.astype('float64'), [2, 3, 6]), ), 2)
func_7431_call = mod.get_global_var('func_7431')
func_7438_call = mutated_mod.get_global_var('func_7438')
var_11397 = relay.var("var_11397", dtype = "float32", shape = (525,))#candidate|11397|(525,)|var|float32
var_11398 = relay.var("var_11398", dtype = "int32", shape = (1680,))#candidate|11398|(1680,)|var|int32
var_11399 = relay.var("var_11399", dtype = "uint8", shape = (2, 672))#candidate|11399|(2, 672)|var|uint8
const_11400 = relay.const([7.396682,-0.028658,4.657676,-8.312711,9.162010,8.409073,8.220548,0.976925,-7.625806,1.741400,0.661333,8.281454,5.495714,6.299568,4.694053,8.951442,3.409979,2.735938,0.942678,8.877023,-0.708833,9.698072,8.338335,-2.240787,8.897559,2.506626,9.458842,-9.424443,6.338085,4.630402,3.710603,2.969787,-6.940664,-5.597788,-2.718326,8.296561,-8.966113,5.570904,9.811370,5.303914,5.196509,4.690651,5.505133,4.323094,2.479047,-8.253312,1.967052,-2.616326,-3.921767,-7.759511,-7.636848,4.079762,-7.733184,-6.070989,-3.428143,-3.386518,-2.025250,-1.265168,6.959212,-1.595799,6.635199,-2.443536,8.378622,-6.398895,8.385065,-1.168604,-0.437241,-7.350224,-4.908245,4.719078,-7.501925,-5.549516,9.447823,0.862718,-6.921724,-7.842839,-3.011934,1.672291,8.242103,5.541035,-1.967663,-5.888431,3.526661,8.322166,-3.555065,5.994597,7.444726,4.577975,-9.934739,7.233137,1.343100,-3.527147,-2.420390,1.587443,-1.831930,-7.689039,-7.801136,5.881056,8.128959,-3.284526,7.399820,7.628505,1.047482,-6.387236,9.426737,2.711437,2.288986,-1.813648,5.054558,4.901179,-2.371551,-9.971669,-0.480474,-0.344520,-9.025292,5.342483,-5.628332,-4.043651,-3.091274,-1.360052,2.177272,-5.700725,8.713045,-9.030158,-5.714838,-2.024968,-4.308347,5.888065,4.986848,-0.386296,-5.874103,4.791167,-1.297076,4.362384,-5.657317,-8.577104,8.856455,-5.319187,3.938566,5.821956,-1.840012,-0.875319,-5.821265,-4.669430,-6.395851,9.249964,-0.954636,1.907039,8.130727,3.590658,-6.967045,5.452124,-5.062527,6.294477,-3.351952,8.626323,-1.135589,8.278964,-7.545370,-6.232320,4.248187,7.272307,8.464929,-6.906937,6.667862,-2.998825,-6.110557,3.438053,-9.787037,-9.050105,4.186070,7.925590,-2.039044,-7.807781,-5.044236,0.007525,5.299831,-0.819926,0.458869,6.813054,-8.510522,5.579662,3.395693,-2.523571,8.237260,-6.524687,-3.691722,-1.000276,9.006264,6.310952,-3.621526,0.877153,-3.385084,-7.107185,-3.505953,-6.446374,2.039552,6.695193,6.144879,-8.223625,9.213784,6.808649,5.940590,-5.615751,1.823195,-6.019788,-2.254512,0.771430,6.735442,-0.601956,0.463075,8.383369,-4.577112,3.383590,-1.856811,-7.598573,-6.154000,8.140508,-6.114468,-2.463397,-0.983651,5.025072,-9.505892,5.704290,-1.082840,-0.811867,-4.993692,-6.211824,-4.362214,-5.867405,-6.119855,-2.394596,0.164029,-3.623354,4.807089,0.168976,8.148152,-1.942550,1.151774,-9.048308,-2.131086,2.813379,-1.558836,0.562648,6.147800,5.376325,7.874262,-9.566942,0.637035,-0.180357,-8.283841,-0.363010,-4.694330,1.671760,-8.890925,9.437197,-9.909302,-2.572989,-1.938419,-4.301910,1.924209,4.074468,7.090194,1.234286,-3.494510,-6.254989,9.380764,9.193894,1.423844,5.426818,-7.803836,-2.568657,4.093453,9.032750,8.640514,7.503005,7.276722,8.639002,7.846369,3.322321,-8.846544,-4.856616,5.018849,5.930396,-9.626125,-8.836726,1.072554,-7.492223,9.738176,-3.292870,1.709314,-7.049457,4.367185,8.956189,-4.173085,-6.972572,-6.819343,8.292984,-3.804240,8.532636,7.426483,3.067099,-4.972796,-7.008112,8.255995,-1.145154,-0.652665,8.082528,-4.030675,-5.204734,-5.587544,3.150770,2.273583,-6.521806,8.325100,2.912894,4.272102,9.156536,-4.569209,-0.956772,1.193224,-0.590494,1.608089,0.550282,-2.955106,-1.748690,-6.113395,-3.810041,-3.343017,-4.421664,-1.391101,4.407317,-2.518942,3.178557,-5.697012,0.907558,4.769814,4.344042,9.105857,-6.736782,6.603438,-6.332199,9.642332,1.219613,1.527667,3.576204,7.419516,-2.478241,-7.018278,-0.556754,6.233029,-0.615519,3.682956,3.406748,-7.136685,9.141687,-3.861132,3.280052,-3.689940,-1.167525,-4.365451,7.131771,-8.861302,-6.337765,3.736115,4.094643,-4.594907,6.339743,3.619634,-2.721559,4.889519,7.864943,-7.469332,0.407309,-8.379841,-3.700846,6.844683,-5.377006,6.902492,-4.324611,-6.924431,7.700157,9.628638,-5.994218,5.531186,-9.683174,-6.665787,7.305544,7.405632,0.887186,-5.715256,-0.125992,8.547282,5.567995,4.928574,-4.467870,8.979572,-8.560535,-7.610035,4.710065,-5.194998,-9.717663,-1.547103,0.082948,-4.107420,4.566002,-3.981269,3.911787,-6.716120,2.470330,-9.834271,6.402447,5.774825,2.680282,0.070379,-8.177051,-2.580170,-8.772188,-8.275449,-4.457861,4.754058,1.952046,-0.912112,8.643863,4.987014,-4.184286,-3.021082,2.236546,-9.825214,-2.099290,0.956474,8.397439,8.177773,-9.045623,0.634378,0.485208,-8.147900,-6.897588,3.225340,-5.422751,-3.291671,-7.158748,-0.333948,0.455249,-9.500773,-5.154475,-6.801934,-6.484685,-1.480162,1.489529,3.064195,-8.113587,2.610344,-7.086515,-7.939688,3.071574,-4.844703,-7.496776,7.900919,9.197426,0.951928,8.786101,7.650893,8.750823,1.997073,8.971398,7.431671,-4.317288,-7.879807,4.104505,2.786888,-0.415657,4.017707,2.167274,-5.974833,-0.305862,-4.099552,3.409073,5.843215,6.432609,1.724584,-9.013223,-3.852602,7.791447,5.170726,-0.048982,3.740714,-4.820125,2.637157,2.958189,-1.120448,1.128926,6.606318,-4.554993,6.005252,8.227568,-6.285208,-7.587294,1.175717,-9.415951,-0.537764,6.862840,0.780767,-8.530787,0.227290,-2.624068,-1.102433,5.475485,-1.814417,-9.736014,9.546107,-6.006641,9.564741,6.811017,-9.774761,-8.055642,-4.659565,-1.828983,5.171464,-0.414507,-1.657473,0.405967,-3.735724,-3.475516,-4.248476,-3.020310,3.117312,-2.895460,0.509124,8.371623,8.139253,5.297683,8.897881,2.932358,-1.206120,-6.189120,-4.964279,2.478155,-2.446432,8.807154,8.415457,-6.030717,-4.130372,5.901005,-3.910368,6.720345,-4.139386,7.427426,-1.484149,4.516596,-2.892984,1.660086,7.507692,6.696652,-4.441442,-1.975418,5.134627,-3.256132,0.847513,0.127604,-0.879645,7.578415,4.662763,8.860285,4.622595,5.467205,-6.962679,-3.506459,1.836703,6.467237,-4.847583,6.091136,-0.622824,9.075402,-8.335406,-4.906194,5.952660,7.290120,-6.481581,-3.140362,4.170249,-2.169377,-2.926912,3.741078,-1.382126,-6.677654,0.896480,-3.922312,0.156473,8.478317,5.726518,7.010219,-8.567711,4.817926,4.679875,-4.922936,0.311871,-3.717489,-1.128031,-4.278520,-3.247793,7.717579,-5.715504,0.314048,-6.514395,7.843679,-9.196637,-2.943432,-0.681776,-7.245539,-0.963482,-0.743080,9.216864,6.774338,7.244311,-1.157068,-8.793658,3.138857,-0.044005,8.171732,6.725826,-2.174943,9.403670,-0.173903,-7.879737,6.044964,-3.584457,1.899833,-5.789222,8.023227,-0.177807,7.576065,1.125402,2.568378,5.063211,-7.793011,-7.142841,9.166870,-0.363941,0.451310,-8.470740,5.777104,-0.729828,-0.488961,3.127127,-3.031619,7.384491,5.890295,-8.251134,-2.141721,7.675113,6.650928,5.151740,2.673118,-6.944488,6.557369,7.805874,5.103999,2.264747,-0.031788,1.656987,-0.393662,-9.011875,-2.590414,-9.802466,-0.428276,9.812767,2.170458,-1.070103,-3.620177,0.001452,3.797845,-7.289661,9.389611,-0.325833,2.384175,-0.940716,8.582492,6.202012,-7.442447,-4.148442,3.689782,-2.500074,7.165734,4.475323,5.897918,7.993816,0.071293,-7.090480,6.907978,-4.369648,-9.014712,-8.284298,4.947940,5.330349,8.069387,-3.014642,-4.400885,-1.408032,-2.931252,8.969968,-3.722355,-8.867817,4.375785,-8.131489,-8.786760,6.844469,-7.829658,-5.262096,8.265996,0.632511,8.472370,1.395428,-2.867515,5.517817,5.572238,-1.518772,3.198904,7.420830,7.291561,8.569003,-4.161343,2.812403,-6.753274,-9.266357,2.199651,3.165201,1.407318,-1.183328,-7.897540,-5.816167,2.592085,9.034524,-2.456257,1.753818,8.083577,7.084375,9.545957,-9.129135,-0.028604,7.104741,-6.172542,-7.871735,9.659173,0.197228,7.096635,6.448925,-3.102759,3.118326,6.613888,7.388575,-1.745520,-9.792959,9.758225,4.415534,7.603193,1.799764,9.632477,1.676662,7.844092,-1.225033,4.511250,2.768169,1.663089,-8.728542,6.465718,6.490413,-7.829907,1.582268,-9.881357,4.636331,1.516212,4.316027,-5.873919,8.649635,3.169724,-7.773067,6.150041,-9.477063,5.982046,6.473662,-1.342464,-9.654506,-5.981029,-0.970610,-6.432858,-0.244266,6.696845,5.052767,-3.473977,6.427740,-7.701614,-4.717273,4.940853,-9.616202,7.743063,9.413706,-1.810882,-3.095110,4.578555,2.416635,-7.768232,6.595693,1.042426,-9.556786,1.230713,6.890904,9.115459,7.008458,8.938715,6.331975,1.534848,-5.274736,-6.595148,-6.929119,-9.734450,-6.161904,8.241914,-4.773225,-6.871291,-3.643274,-4.367730,8.383464,-1.211749,-7.366712,2.314259,-8.686782,-5.547080,-5.170699,-0.102151,-3.812685,6.839940,9.274287,-9.822215,8.960400,-2.253751,-8.930005,-7.731579,8.778380,-5.922068,-1.818083,5.924614,-1.982052,8.047667,3.710384,0.584605,-6.415792,-6.882451,1.829759,6.670599,0.181853,-9.818913,-9.427946,0.487804,0.101590,0.390592,3.750948,9.388004,-0.935733,4.507104,-4.619045,7.555839,6.441145,-5.740806,-6.583624,7.395051,-4.186252,5.184383,-8.271440,-3.931519,-6.503681,2.584095,-7.710087,8.991179,-6.460062,-1.113383,6.299701,1.929473,6.446868,2.995314,-1.876746,7.381763,3.671826,3.769007,-4.653828,1.222802,-8.234210,-1.084019,7.675420,3.392761,-2.309627,-9.697235,-7.778572,-5.084740,-6.485811,4.531309,0.031461,5.246565,-3.875214,-6.658791,-2.964911,9.078346,8.391628,4.207654,-4.838226,-7.947406,2.961016,-5.976754,-3.558310,3.027840,8.370713,4.959772,-3.657836,0.201432,-0.934553,4.979814,7.633244,5.225767,-9.442861,-9.026821,4.505383,-6.336655,2.404000,-0.493535,8.181185,-2.760384,5.543549,6.854426,-9.937129,-5.358832,1.284126,1.803269,-6.419049,2.465381,-5.447772,9.616186,-5.454091,-7.591811,4.700813,8.430995,-3.077183,0.944704,-4.197412,9.902333,8.519614,8.262912,9.677782,2.960387,7.706853,2.105825,-3.852298,0.570188,-6.418104,0.479766,2.156906,-6.392569,-3.597726,0.340806,1.025888,-8.793616,-4.922852,5.280449,-9.013962,5.541654,9.972159,0.906571,-4.180535,-7.951851,-5.373656,-7.719632,-4.872743,-0.035414,-2.579600,3.167125,-0.710403,-0.547092,5.934160,0.830024,-1.327173,1.225790,8.213443,-7.022829,-6.499600,-9.114882,-4.618450,-1.138221,5.854644,7.305896,-3.918680,0.133849,-6.020249,7.924701,8.415112,-7.983318,5.641403,4.193172,-6.239845,-5.119508,-9.837173,-7.719012,8.552111,-2.814225,0.817722,-2.667359,-0.674068,-7.620633,3.776776,4.401834,-7.439619,3.918004,6.665783,-8.676402,-6.241043,-6.721653,4.222749,2.250452,7.260639,-8.174416,4.547928,-8.107305,-6.420265,3.558495,-7.047432,8.552324,-5.745747,8.760298,2.656159,2.043262,-1.745987,1.271284,-7.966306,9.961629,-4.188704,-5.596003,-3.103109,9.954404,-4.571117,7.945009,7.840551,1.075826,3.204373,-0.378587,9.630508,-3.454451,6.368824,4.221976,-0.221072,-4.470988,-3.562815,-6.558495,7.252806,-4.752488,-6.060100,8.048848,-5.666442,9.196213,9.952093,-2.000087,-4.318033,-6.585998,-1.116602,6.726841,-4.389996,2.987296,5.721150,-0.726903,-0.820007,-2.079214,-5.395516,-1.217141,-1.573028,-7.159709,1.372288,-4.507394,1.388014,-3.754259,1.303566,-0.435732,1.225595,-9.219632,2.356197,1.770390,4.176101,6.222773,2.013973,-2.147146,9.549437,2.004292,-0.178917,-8.291377,2.175675,8.104562,6.312223,-0.557279,-4.045106,1.941447,1.103469,8.140024,-7.089761,-7.799183,-9.327469,0.886774,2.460206,4.990026,5.508861,7.843782,-4.335679,2.586349,-3.510021,-1.498343,-2.510254,3.742958,-3.110435,1.297283,1.434292,5.385101,-7.323433,2.944276,8.603473,1.321808,0.044111,7.164558,-9.601728,1.046400,7.610611,1.382103,1.082748,2.191793,0.881650,-8.943925,4.596332,-2.206375,-0.616212,0.168448,-6.282261,-5.697511,-4.496220,1.685788,-1.499961,9.177848,-8.012344,-7.869256,9.534668,-3.720788,-1.883325,2.303611,-6.735028,6.676649,-6.687858,-7.084766,-2.246076,-1.802090,1.327539,4.227824,-8.357038], dtype = "float32")#candidate|11400|(1155,)|const|float32
const_11401 = relay.const(-3, dtype = "uint64")#candidate|11401|()|const|uint64
const_11402 = relay.const([5,-6,-4,10,8,-7,-2,7,-10,2,1,2,3,3,-2,-3,-4,8,9,3,-9,4,-7,-3,-5,3,-10,-4,-1,-10,-7,10,2,-3,-5,8,9,5,-4,-2,-3,5,-4,-8,-3,-7,-1,-4,-2,-6,5,3,8,1,6,9,10,3,-2,-8,9,-7,-10,-5,-10,-3,5,-1,6,2,-7,3,6,3,9,5,7,-8,5,-3,-4,-3,4,1,8,-6,-8,-4,7,6,-9,3,5,4,5,-6,-4,10,-5,-10,6,-7,4,-1,-9,6,8,-3,-3,2,4,8,8,-8,1,-5,-5,-3,4,-2,3,-8,-9,5,-9,9,6,1,-5,7,10,-3,6,6,2,-2,5,-7,2,4,8,3,1,9,7,-10,-10,2,8,6,5,6,-8,4,-2,1,4,-5,-2,-8,10,7,-2,-8,8,-2,-1,-3,-9,9,9,-3,-6,7,1,-8], dtype = "int8")#candidate|11402|(176,)|const|int8
call_11396 = relay.TupleGetItem(func_7431_call(relay.reshape(var_11397.astype('float32'), [15, 7, 5]), relay.reshape(var_11398.astype('int32'), [1680,]), relay.reshape(var_11399.astype('uint8'), [14, 96]), relay.reshape(const_11400.astype('float32'), [1, 1155]), relay.reshape(const_11401.astype('uint64'), []), relay.reshape(const_11402.astype('int8'), [176,]), ), 5)
call_11403 = relay.TupleGetItem(func_7438_call(relay.reshape(var_11397.astype('float32'), [15, 7, 5]), relay.reshape(var_11398.astype('int32'), [1680,]), relay.reshape(var_11399.astype('uint8'), [14, 96]), relay.reshape(const_11400.astype('float32'), [1, 1155]), relay.reshape(const_11401.astype('uint64'), []), relay.reshape(const_11402.astype('int8'), [176,]), ), 5)
output = relay.Tuple([call_11363,call_11372,var_11373,const_11374,call_11396,var_11397,var_11398,var_11399,const_11400,const_11401,const_11402,])
output2 = relay.Tuple([call_11364,call_11375,var_11373,const_11374,call_11403,var_11397,var_11398,var_11399,const_11400,const_11401,const_11402,])
func_11404 = relay.Function([var_11373,var_11397,var_11398,var_11399,], output)
mod['func_11404'] = func_11404
mod = relay.transform.InferType()(mod)
var_11405 = relay.var("var_11405", dtype = "float32", shape = (90,))#candidate|11405|(90,)|var|float32
var_11406 = relay.var("var_11406", dtype = "float32", shape = (525,))#candidate|11406|(525,)|var|float32
var_11407 = relay.var("var_11407", dtype = "int32", shape = (1680,))#candidate|11407|(1680,)|var|int32
var_11408 = relay.var("var_11408", dtype = "uint8", shape = (2, 672))#candidate|11408|(2, 672)|var|uint8
output = func_11404(var_11405,var_11406,var_11407,var_11408,)
func_11409 = relay.Function([var_11405,var_11406,var_11407,var_11408,], output)
mutated_mod['func_11409'] = func_11409
mutated_mod = relay.transform.InferType()(mutated_mod)
const_11414 = relay.const([[[4.919822,9.964950,3.675247,7.674942,-9.208007],[8.475263,-6.633993,0.311865,-6.271095,9.294769],[-8.392592,-3.456322,-5.323577,7.345918,1.716899],[6.161916,-2.662284,-6.641437,-5.402824,-4.573700],[-8.207272,-8.819744,-5.687212,7.557471,-7.478814],[5.964615,-6.164401,-1.125581,-2.635013,-9.180475],[-9.180557,-6.558474,-9.387507,-5.609032,6.697807],[1.371417,-6.634986,-1.900699,-4.285871,9.255870]],[[5.621420,3.149768,6.376431,-8.633730,2.073882],[6.572840,-7.370986,2.227786,9.470087,0.796589],[-0.510108,-7.185038,-5.888337,3.852360,-4.157596],[2.339330,4.794872,1.244971,-5.798414,5.868431],[-2.515343,7.743824,-9.832942,1.230362,-1.411491],[-5.543135,9.431722,-2.147667,-8.646914,-4.288961],[-3.141586,-9.337851,-2.975352,-6.106227,9.727218],[4.029570,3.953679,-3.204541,0.072001,6.086552]],[[6.366886,-1.061795,-9.887919,-5.350049,-2.675882],[5.731992,7.322387,5.117179,9.488844,-5.218330],[4.104923,-5.911519,8.685090,-3.975340,-5.066766],[-6.395054,-6.993898,-5.232549,8.305341,9.354560],[-1.641452,7.147870,-1.522854,5.684060,-8.084553],[-5.752608,4.514995,-8.052541,9.754648,8.361817],[-6.838567,6.789049,-4.160305,7.746059,4.561594],[-7.587391,6.201409,2.459519,-6.574261,3.853400]],[[-2.505471,-8.948540,-9.544925,-2.842235,1.804485],[4.378432,-1.502766,-2.814531,5.510920,-4.469423],[-4.027053,-6.208809,-7.990120,7.820152,-6.011999],[-8.339470,-3.086726,8.453707,9.181106,4.942880],[1.792762,8.099090,9.408077,4.402442,1.496628],[4.474337,-7.003481,-8.211646,2.435231,8.264060],[-2.162855,3.945586,-7.392888,-6.673576,-4.020023],[-9.735778,-3.970859,0.019245,-9.388247,-4.236777]],[[8.960980,6.558653,4.896866,-0.724185,-6.426697],[4.434944,9.076790,6.798313,8.012456,-3.519089],[5.892364,8.610902,-3.234551,-2.946371,8.137084],[-7.711842,-6.640244,-9.819421,4.789903,6.747896],[-7.960381,4.867915,5.508559,8.702377,-5.103176],[-1.770942,4.705128,8.668802,8.398823,-3.121261],[1.651126,1.196228,-2.383332,1.326168,-7.382325],[7.367925,7.934115,1.644167,-7.758690,5.239430]]], dtype = "float64")#candidate|11414|(5, 8, 5)|const|float64
var_11415 = relay.var("var_11415", dtype = "float64", shape = (5, 8, 5))#candidate|11415|(5, 8, 5)|var|float64
bop_11416 = relay.maximum(const_11414.astype('float64'), relay.reshape(var_11415.astype('float64'), relay.shape_of(const_11414))) # shape=(5, 8, 5)
output = bop_11416
output2 = bop_11416
func_11420 = relay.Function([var_11415,], output)
mod['func_11420'] = func_11420
mod = relay.transform.InferType()(mod)
var_11421 = relay.var("var_11421", dtype = "float64", shape = (5, 8, 5))#candidate|11421|(5, 8, 5)|var|float64
output = func_11420(var_11421)
func_11422 = relay.Function([var_11421], output)
mutated_mod['func_11422'] = func_11422
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9726_call = mod.get_global_var('func_9726')
func_9727_call = mutated_mod.get_global_var('func_9727')
call_11485 = relay.TupleGetItem(func_9726_call(), 0)
call_11486 = relay.TupleGetItem(func_9727_call(), 0)
output = relay.Tuple([call_11485,])
output2 = relay.Tuple([call_11486,])
func_11487 = relay.Function([], output)
mod['func_11487'] = func_11487
mod = relay.transform.InferType()(mod)
mutated_mod['func_11487'] = func_11487
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11487_call = mutated_mod.get_global_var('func_11487')
call_11488 = func_11487_call()
output = call_11488
func_11489 = relay.Function([], output)
mutated_mod['func_11489'] = func_11489
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8608_call = mod.get_global_var('func_8608')
func_8609_call = mutated_mod.get_global_var('func_8609')
call_11559 = func_8608_call()
call_11560 = func_8608_call()
output = relay.Tuple([call_11559,])
output2 = relay.Tuple([call_11560,])
func_11561 = relay.Function([], output)
mod['func_11561'] = func_11561
mod = relay.transform.InferType()(mod)
output = func_11561()
func_11562 = relay.Function([], output)
mutated_mod['func_11562'] = func_11562
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8608_call = mod.get_global_var('func_8608')
func_8609_call = mutated_mod.get_global_var('func_8609')
call_11587 = func_8608_call()
call_11588 = func_8608_call()
output = call_11587
output2 = call_11588
func_11609 = relay.Function([], output)
mod['func_11609'] = func_11609
mod = relay.transform.InferType()(mod)
mutated_mod['func_11609'] = func_11609
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11609_call = mutated_mod.get_global_var('func_11609')
call_11610 = func_11609_call()
output = call_11610
func_11611 = relay.Function([], output)
mutated_mod['func_11611'] = func_11611
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10381_call = mod.get_global_var('func_10381')
func_10383_call = mutated_mod.get_global_var('func_10383')
call_11636 = relay.TupleGetItem(func_10381_call(), 0)
call_11637 = relay.TupleGetItem(func_10383_call(), 0)
const_11638 = relay.const([[[8.492173,-5.255356,3.863242,-8.905800],[-8.436221,0.125568,-7.652492,1.495031],[6.754583,-0.831514,-5.998639,6.734138],[2.833617,-6.244017,0.508323,6.397167],[-2.355836,7.531228,3.995268,3.018465],[-9.397052,-2.914358,-5.202744,5.296118],[1.282292,5.584159,-4.486510,-3.107595],[-3.405752,5.925175,2.801203,-1.606404],[-9.230739,1.723879,5.165364,1.508972],[-6.976038,-3.343457,-4.323753,-0.009857],[-6.572749,1.105205,9.571548,-4.311975],[-0.312780,8.495866,-6.031509,-6.290841]],[[4.715375,-5.984617,-0.598422,-0.905230],[-1.981676,8.513536,-1.479450,-1.526270],[8.965008,4.205406,2.156563,-7.878181],[4.349246,1.022563,8.331034,4.262486],[-7.048011,9.377771,9.130790,8.542267],[-0.155558,-9.104827,-0.930275,3.679395],[4.572953,-6.941617,-4.228879,-9.941285],[-2.613512,-4.123692,9.732921,-2.284010],[3.870866,-9.460662,-8.869454,-8.437453],[-7.638024,8.733026,3.092794,-2.404513],[-5.331387,-7.309636,1.811034,-6.585787],[-3.878969,1.481917,-3.275312,9.941382]],[[8.348347,4.252889,7.209270,7.700758],[-8.109248,9.751142,0.616799,-6.670861],[-7.173748,7.431146,-0.786171,-2.471303],[-3.712307,-6.062796,8.208124,-0.862365],[-3.034348,-1.047814,-8.108243,0.828988],[2.956525,-7.589092,5.871239,-3.631196],[6.179237,7.280633,5.778597,2.084283],[-4.981816,4.770099,9.838919,-8.026035],[1.231409,-4.656862,-6.518204,-1.036260],[-1.617914,5.194546,-4.241181,1.539271],[1.350846,2.874463,-8.910982,-0.048443],[-3.693846,9.178490,4.980272,9.338695]]], dtype = "float32")#candidate|11638|(3, 12, 4)|const|float32
bop_11639 = relay.greater(call_11636.astype('bool'), relay.reshape(const_11638.astype('bool'), relay.shape_of(call_11636))) # shape=(3, 12, 4)
bop_11642 = relay.greater(call_11637.astype('bool'), relay.reshape(const_11638.astype('bool'), relay.shape_of(call_11637))) # shape=(3, 12, 4)
output = relay.Tuple([bop_11639,])
output2 = relay.Tuple([bop_11642,])
func_11666 = relay.Function([], output)
mod['func_11666'] = func_11666
mod = relay.transform.InferType()(mod)
output = func_11666()
func_11667 = relay.Function([], output)
mutated_mod['func_11667'] = func_11667
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9603_call = mod.get_global_var('func_9603')
func_9605_call = mutated_mod.get_global_var('func_9605')
call_11693 = relay.TupleGetItem(func_9603_call(), 2)
call_11694 = relay.TupleGetItem(func_9605_call(), 2)
output = relay.Tuple([call_11693,])
output2 = relay.Tuple([call_11694,])
func_11695 = relay.Function([], output)
mod['func_11695'] = func_11695
mod = relay.transform.InferType()(mod)
output = func_11695()
func_11696 = relay.Function([], output)
mutated_mod['func_11696'] = func_11696
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11666_call = mod.get_global_var('func_11666')
func_11667_call = mutated_mod.get_global_var('func_11667')
call_11721 = relay.TupleGetItem(func_11666_call(), 0)
call_11722 = relay.TupleGetItem(func_11667_call(), 0)
output = relay.Tuple([call_11721,])
output2 = relay.Tuple([call_11722,])
func_11727 = relay.Function([], output)
mod['func_11727'] = func_11727
mod = relay.transform.InferType()(mod)
output = func_11727()
func_11728 = relay.Function([], output)
mutated_mod['func_11728'] = func_11728
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10292_call = mod.get_global_var('func_10292')
func_10293_call = mutated_mod.get_global_var('func_10293')
call_11734 = func_10292_call()
call_11735 = func_10292_call()
func_976_call = mod.get_global_var('func_976')
func_979_call = mutated_mod.get_global_var('func_979')
var_11741 = relay.var("var_11741", dtype = "uint64", shape = ())#candidate|11741|()|var|uint64
var_11742 = relay.var("var_11742", dtype = "uint64", shape = (180,))#candidate|11742|(180,)|var|uint64
call_11740 = func_976_call(relay.reshape(var_11741.astype('uint64'), []), relay.reshape(var_11742.astype('uint64'), [5, 9, 4]), )
call_11743 = func_976_call(relay.reshape(var_11741.astype('uint64'), []), relay.reshape(var_11742.astype('uint64'), [5, 9, 4]), )
output = relay.Tuple([call_11734,call_11740,var_11741,var_11742,])
output2 = relay.Tuple([call_11735,call_11743,var_11741,var_11742,])
func_11745 = relay.Function([var_11741,var_11742,], output)
mod['func_11745'] = func_11745
mod = relay.transform.InferType()(mod)
var_11746 = relay.var("var_11746", dtype = "uint64", shape = ())#candidate|11746|()|var|uint64
var_11747 = relay.var("var_11747", dtype = "uint64", shape = (180,))#candidate|11747|(180,)|var|uint64
output = func_11745(var_11746,var_11747,)
func_11748 = relay.Function([var_11746,var_11747,], output)
mutated_mod['func_11748'] = func_11748
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11777 = relay.var("var_11777", dtype = "float32", shape = (16, 4, 3))#candidate|11777|(16, 4, 3)|var|float32
uop_11778 = relay.sin(var_11777.astype('float32')) # shape=(16, 4, 3)
output = relay.Tuple([uop_11778,])
output2 = relay.Tuple([uop_11778,])
func_11780 = relay.Function([var_11777,], output)
mod['func_11780'] = func_11780
mod = relay.transform.InferType()(mod)
var_11781 = relay.var("var_11781", dtype = "float32", shape = (16, 4, 3))#candidate|11781|(16, 4, 3)|var|float32
output = func_11780(var_11781)
func_11782 = relay.Function([var_11781], output)
mutated_mod['func_11782'] = func_11782
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10651_call = mod.get_global_var('func_10651')
func_10652_call = mutated_mod.get_global_var('func_10652')
call_11806 = func_10651_call()
call_11807 = func_10651_call()
func_4703_call = mod.get_global_var('func_4703')
func_4706_call = mutated_mod.get_global_var('func_4706')
var_11814 = relay.var("var_11814", dtype = "float64", shape = (560,))#candidate|11814|(560,)|var|float64
call_11813 = relay.TupleGetItem(func_4703_call(relay.reshape(var_11814.astype('float64'), [10, 8, 7]), relay.reshape(var_11814.astype('float64'), [10, 8, 7]), ), 0)
call_11815 = relay.TupleGetItem(func_4706_call(relay.reshape(var_11814.astype('float64'), [10, 8, 7]), relay.reshape(var_11814.astype('float64'), [10, 8, 7]), ), 0)
output = relay.Tuple([call_11806,call_11813,var_11814,])
output2 = relay.Tuple([call_11807,call_11815,var_11814,])
func_11819 = relay.Function([var_11814,], output)
mod['func_11819'] = func_11819
mod = relay.transform.InferType()(mod)
mutated_mod['func_11819'] = func_11819
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11820 = relay.var("var_11820", dtype = "float64", shape = (560,))#candidate|11820|(560,)|var|float64
func_11819_call = mutated_mod.get_global_var('func_11819')
call_11821 = func_11819_call(var_11820)
output = call_11821
func_11822 = relay.Function([var_11820], output)
mutated_mod['func_11822'] = func_11822
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9603_call = mod.get_global_var('func_9603')
func_9605_call = mutated_mod.get_global_var('func_9605')
call_11877 = relay.TupleGetItem(func_9603_call(), 1)
call_11878 = relay.TupleGetItem(func_9605_call(), 1)
output = relay.Tuple([call_11877,])
output2 = relay.Tuple([call_11878,])
func_11879 = relay.Function([], output)
mod['func_11879'] = func_11879
mod = relay.transform.InferType()(mod)
mutated_mod['func_11879'] = func_11879
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11879_call = mutated_mod.get_global_var('func_11879')
call_11880 = func_11879_call()
output = call_11880
func_11881 = relay.Function([], output)
mutated_mod['func_11881'] = func_11881
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9966_call = mod.get_global_var('func_9966')
func_9967_call = mutated_mod.get_global_var('func_9967')
call_11895 = relay.TupleGetItem(func_9966_call(), 0)
call_11896 = relay.TupleGetItem(func_9967_call(), 0)
func_197_call = mod.get_global_var('func_197')
func_200_call = mutated_mod.get_global_var('func_200')
const_11898 = relay.const([1,-5,-4,6,-7,-6,-3,4,9,-4,9,9,-5,6,4,10,-7,-10,6,-9,-2,-9,8,-7,-3,-1,6,2,4,-5,-1,2,10,9,7,10,2,6,-5,8,-4,10,7,-3,-2,-9,-3,-1,2,10,-9,-3,-4,-1,-2,6,-8,-7,-2,5,-9,7,5,7,-9,1,9,-6,-2,1,6,1,-8,8,-9,4,-7,-1,10,-4,-7,4,8,1,9,-4,-3,-10,1,3,-10,1,-9,-4,2,-7,-10,5,2,-7,-9,-7,-4,-3,4,-7,4,-6,10,-3,5,-1,2,-4,-3,-7,-2,5,3,10,-6,6,7,-5,9,9,-8,10,8,4,4,2,-10,-1,4,2,2,-10,-9,6,-2,3,-9,10,8,-7,-9,-10,7,-2,5,-3,-4,-6,7,-1,10,1,-7,-5,8,7,4,-6,9,5,4,10,2,-8,-7,10,-3,7,3,-4,5,-10,-1,3,6,3,-6,7,9,7,-4,-5,9,6,-5,4,-4,-10,-3,-4,-1,-9,1,4,-9,8,-9,2,-7,9,1,-2,10,-9,-5,9,9,2,2,-10,9,8,-2,-4,-9,1,-8,4,-6,-10,3,8,9,-1,-10,-6,6,-4,2,-9,3,-10,4,-1,-4,-3,4,8,5,-6,8,-1,6,7,7,9], dtype = "uint64")#candidate|11898|(252,)|const|uint64
call_11897 = relay.TupleGetItem(func_197_call(relay.reshape(const_11898.astype('uint64'), [7, 4, 9])), 0)
call_11899 = relay.TupleGetItem(func_200_call(relay.reshape(const_11898.astype('uint64'), [7, 4, 9])), 0)
func_6759_call = mod.get_global_var('func_6759')
func_6762_call = mutated_mod.get_global_var('func_6762')
var_11912 = relay.var("var_11912", dtype = "float64", shape = (54,))#candidate|11912|(54,)|var|float64
call_11911 = relay.TupleGetItem(func_6759_call(relay.reshape(var_11912.astype('float64'), [3, 3, 6])), 1)
call_11913 = relay.TupleGetItem(func_6762_call(relay.reshape(var_11912.astype('float64'), [3, 3, 6])), 1)
output = relay.Tuple([call_11895,call_11897,const_11898,call_11911,var_11912,])
output2 = relay.Tuple([call_11896,call_11899,const_11898,call_11913,var_11912,])
func_11915 = relay.Function([var_11912,], output)
mod['func_11915'] = func_11915
mod = relay.transform.InferType()(mod)
var_11916 = relay.var("var_11916", dtype = "float64", shape = (54,))#candidate|11916|(54,)|var|float64
output = func_11915(var_11916)
func_11917 = relay.Function([var_11916], output)
mutated_mod['func_11917'] = func_11917
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9966_call = mod.get_global_var('func_9966')
func_9967_call = mutated_mod.get_global_var('func_9967')
call_11961 = relay.TupleGetItem(func_9966_call(), 0)
call_11962 = relay.TupleGetItem(func_9967_call(), 0)
func_8701_call = mod.get_global_var('func_8701')
func_8703_call = mutated_mod.get_global_var('func_8703')
call_11963 = relay.TupleGetItem(func_8701_call(), 0)
call_11964 = relay.TupleGetItem(func_8703_call(), 0)
output = relay.Tuple([call_11961,call_11963,])
output2 = relay.Tuple([call_11962,call_11964,])
func_11977 = relay.Function([], output)
mod['func_11977'] = func_11977
mod = relay.transform.InferType()(mod)
mutated_mod['func_11977'] = func_11977
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11977_call = mutated_mod.get_global_var('func_11977')
call_11978 = func_11977_call()
output = call_11978
func_11979 = relay.Function([], output)
mutated_mod['func_11979'] = func_11979
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10343_call = mod.get_global_var('func_10343')
func_10344_call = mutated_mod.get_global_var('func_10344')
call_12005 = func_10343_call()
call_12006 = func_10343_call()
func_4703_call = mod.get_global_var('func_4703')
func_4706_call = mutated_mod.get_global_var('func_4706')
var_12039 = relay.var("var_12039", dtype = "float64", shape = (560,))#candidate|12039|(560,)|var|float64
call_12038 = relay.TupleGetItem(func_4703_call(relay.reshape(var_12039.astype('float64'), [10, 8, 7]), relay.reshape(var_12039.astype('float64'), [10, 8, 7]), ), 0)
call_12040 = relay.TupleGetItem(func_4706_call(relay.reshape(var_12039.astype('float64'), [10, 8, 7]), relay.reshape(var_12039.astype('float64'), [10, 8, 7]), ), 0)
output = relay.Tuple([call_12005,call_12038,var_12039,])
output2 = relay.Tuple([call_12006,call_12040,var_12039,])
func_12043 = relay.Function([var_12039,], output)
mod['func_12043'] = func_12043
mod = relay.transform.InferType()(mod)
var_12044 = relay.var("var_12044", dtype = "float64", shape = (560,))#candidate|12044|(560,)|var|float64
output = func_12043(var_12044)
func_12045 = relay.Function([var_12044], output)
mutated_mod['func_12045'] = func_12045
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8907_call = mod.get_global_var('func_8907')
func_8909_call = mutated_mod.get_global_var('func_8909')
call_12049 = relay.TupleGetItem(func_8907_call(), 0)
call_12050 = relay.TupleGetItem(func_8909_call(), 0)
func_9726_call = mod.get_global_var('func_9726')
func_9727_call = mutated_mod.get_global_var('func_9727')
call_12055 = relay.TupleGetItem(func_9726_call(), 0)
call_12056 = relay.TupleGetItem(func_9727_call(), 0)
func_7078_call = mod.get_global_var('func_7078')
func_7081_call = mutated_mod.get_global_var('func_7081')
const_12068 = relay.const([-3,4,2,5,-10,-6,10,-5,8,-2,-4,8,7,4,-2,7,-5,-3,-4,4,-7,9,8,10,-1,-3,-9,4,8,5,4,7,-5,-8,-7,3,3,-3,7,8,-10,-2,9,-5,6,9,6,-7,4,-9,8,-7,5,3,-5,-1,-4,-4,-1,-2,-10,4,6,-6,9,-1,9,-9,10,-8,6,8,4,-5,-2,1,7,-10,1,3,-3,-8,-4,7,-2,7,-4,-8,-8,5,-9,3,-2,-8,9,2,6,4,-10,2,-6,9,-7,-10,1,4,-2,7,8,-8,9,-10,-1,-4,3,-2,-8,-3,-10,-7,-8,3,8,5,-7,6,4,-2,-8,7,-4,-4,-2,5,-10,4,-7,-10,-1,2,10,4,4,1,4,-7,9,-1,8,4,2,6,7,4,-2,5,-6,8,-7,-4,-8,-9,2,-9,-8,6,3,7,9,7,8,5,-5,4,3,2,6,-2,3,-9,-4,-9,9,6,-9,-1,-9,1,-1,-5,-10,8,10,6,-1,4,-2,-4,-1,10,7,7,10,-9,2,5,-3,-1,5,6,-2,1,3,4,-8,-6,-8,9,10,6,2,-5,6,-7,3,7,4,-9,5,-3,-10,6,-1,-3,-4,4,-2,-2,6,1,5,-7,8,-7,1,-6,8,-8,-8,1,-2,2,5,6,3,3,5,-8,5,-6,5,7,3,-2,8,6,10,6,10,-9,9,-3,-1,7,-6,2,4,-3,-5,-1,10,-3,-3,-6,-10,10,-6,-6,-5,10,-8,1,2,-1,2,-9,9,-3,-10,-9,-1,-4,3,-3,-2,10,-7,-2,-6,5,-4,10,-6,-10,-1,1,-8,-10,-4,9,-6,-6,9,-2,-10,5,-1,9,-8,-8,-8,1,-3,-6,4,2,4,2,7,-2,-3,1,2,3,-1,-10,-1,4,2,2,-5,5,-4,7,-5,6,-6,1,-1,9,-9,-8,10,4,-1,-9,1,-10,-4,-4,-5,-4,9,10,-4,-1,-8,1,2,1,2,-4,3,-5,2,-6,2,-8,7,-3,7,-4,-3,-2,-2,10,2,-4,7,-1,-1,-6,7,5,1,7,-2,-2,9,1,6,5,7,-2,1,3,-10,-6,-2,1,9,-3,10,-9,1,10,3,-7,9,5,3,-3,-7,-10,-9,4,10,10,-5,10,-9,5,-8,-2,-2,-6,-5,7,-9,2,-9,-8,6,-10,-9,10,1,-1,8,5,-2,-4,-3,10,-10,-9,-1,-10,9,9,-10,-5,4,1,1,1,-10,-10,-8,4,3,10,2,-2,-2,8,-1,5,9,9,-6,3,7,-9,-6,-4,-6,-4,4,1,6,-10,-10,-2,10,1,2,-2,-1,-4,5,5,-4,-2,-4,6,10,-5,-10,-3,8,6,10,-7,-2,8,-10,-9,-4,5,-3,6,-7,-6,-9,7,5,-7,5,5,-6,-3,8,5,4,-7,-10,-2,5,-4,-9,4,-6,10,-5,-9,8,1,5,-5,5,7,7,4,9,6,1,-3,-1,10,-8,10,2,-3,7,-7,-1,10,6,-10,6,-7,8,-5,3,-6,6,-8,-9,-9,-10,-1,-3,-9,-8,5,8,10,4,-4,3,-9,-8,-1,-9,-3,9,9,6,-2,-10,-8,-1,-2,-6,-1,10,1,-8,-5,3,7,4,3,-8,6,-1,4,-3,-6,-5,-7,8,3,10,-4,-7,-4,-1,-3,-1,-4,-3,4,-7,4,-9,8,-1,-3,10,6,2,-10,-7,1,2,-10,-6,-3], dtype = "uint8")#candidate|12068|(660,)|const|uint8
call_12067 = relay.TupleGetItem(func_7078_call(relay.reshape(const_12068.astype('uint8'), [11, 4, 15])), 1)
call_12069 = relay.TupleGetItem(func_7081_call(relay.reshape(const_12068.astype('uint8'), [11, 4, 15])), 1)
func_8701_call = mod.get_global_var('func_8701')
func_8703_call = mutated_mod.get_global_var('func_8703')
call_12070 = relay.TupleGetItem(func_8701_call(), 0)
call_12071 = relay.TupleGetItem(func_8703_call(), 0)
output = relay.Tuple([call_12049,call_12055,call_12067,const_12068,call_12070,])
output2 = relay.Tuple([call_12050,call_12056,call_12069,const_12068,call_12071,])
func_12072 = relay.Function([], output)
mod['func_12072'] = func_12072
mod = relay.transform.InferType()(mod)
output = func_12072()
func_12073 = relay.Function([], output)
mutated_mod['func_12073'] = func_12073
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10043_call = mod.get_global_var('func_10043')
func_10044_call = mutated_mod.get_global_var('func_10044')
call_12107 = relay.TupleGetItem(func_10043_call(), 1)
call_12108 = relay.TupleGetItem(func_10044_call(), 1)
func_10574_call = mod.get_global_var('func_10574')
func_10576_call = mutated_mod.get_global_var('func_10576')
var_12112 = relay.var("var_12112", dtype = "float32", shape = (77, 15))#candidate|12112|(77, 15)|var|float32
call_12111 = relay.TupleGetItem(func_10574_call(relay.reshape(var_12112.astype('float32'), [1155,])), 0)
call_12113 = relay.TupleGetItem(func_10576_call(relay.reshape(var_12112.astype('float32'), [1155,])), 0)
func_9603_call = mod.get_global_var('func_9603')
func_9605_call = mutated_mod.get_global_var('func_9605')
call_12115 = relay.TupleGetItem(func_9603_call(), 0)
call_12116 = relay.TupleGetItem(func_9605_call(), 0)
uop_12121 = relay.atanh(var_12112.astype('float64')) # shape=(77, 15)
func_8907_call = mod.get_global_var('func_8907')
func_8909_call = mutated_mod.get_global_var('func_8909')
call_12123 = relay.TupleGetItem(func_8907_call(), 0)
call_12124 = relay.TupleGetItem(func_8909_call(), 0)
output = relay.Tuple([call_12107,call_12111,call_12115,uop_12121,call_12123,])
output2 = relay.Tuple([call_12108,call_12113,call_12116,uop_12121,call_12124,])
func_12129 = relay.Function([var_12112,], output)
mod['func_12129'] = func_12129
mod = relay.transform.InferType()(mod)
mutated_mod['func_12129'] = func_12129
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12130 = relay.var("var_12130", dtype = "float32", shape = (77, 15))#candidate|12130|(77, 15)|var|float32
func_12129_call = mutated_mod.get_global_var('func_12129')
call_12131 = func_12129_call(var_12130)
output = call_12131
func_12132 = relay.Function([var_12130], output)
mutated_mod['func_12132'] = func_12132
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11727_call = mod.get_global_var('func_11727')
func_11728_call = mutated_mod.get_global_var('func_11728')
call_12154 = relay.TupleGetItem(func_11727_call(), 0)
call_12155 = relay.TupleGetItem(func_11728_call(), 0)
output = relay.Tuple([call_12154,])
output2 = relay.Tuple([call_12155,])
func_12163 = relay.Function([], output)
mod['func_12163'] = func_12163
mod = relay.transform.InferType()(mod)
output = func_12163()
func_12164 = relay.Function([], output)
mutated_mod['func_12164'] = func_12164
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11727_call = mod.get_global_var('func_11727')
func_11728_call = mutated_mod.get_global_var('func_11728')
call_12255 = relay.TupleGetItem(func_11727_call(), 0)
call_12256 = relay.TupleGetItem(func_11728_call(), 0)
output = relay.Tuple([call_12255,])
output2 = relay.Tuple([call_12256,])
func_12260 = relay.Function([], output)
mod['func_12260'] = func_12260
mod = relay.transform.InferType()(mod)
mutated_mod['func_12260'] = func_12260
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12260_call = mutated_mod.get_global_var('func_12260')
call_12261 = func_12260_call()
output = call_12261
func_12262 = relay.Function([], output)
mutated_mod['func_12262'] = func_12262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10386_call = mod.get_global_var('func_10386')
func_10388_call = mutated_mod.get_global_var('func_10388')
call_12279 = func_10386_call()
call_12280 = func_10386_call()
output = call_12279
output2 = call_12280
func_12297 = relay.Function([], output)
mod['func_12297'] = func_12297
mod = relay.transform.InferType()(mod)
mutated_mod['func_12297'] = func_12297
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12297_call = mutated_mod.get_global_var('func_12297')
call_12298 = func_12297_call()
output = call_12298
func_12299 = relay.Function([], output)
mutated_mod['func_12299'] = func_12299
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12334 = relay.var("var_12334", dtype = "float32", shape = (1, 16, 4))#candidate|12334|(1, 16, 4)|var|float32
const_12335 = relay.const([[[-7.127075,-7.812493,5.425675,-4.451083],[-5.809437,9.378246,3.086678,8.163612],[-6.838139,1.657704,9.399491,5.031341],[-3.832708,2.485891,5.829692,6.288030],[4.996272,-2.943785,-3.014410,-6.865558],[-1.402182,6.991057,8.312565,1.618117],[-3.586543,0.875533,3.701182,5.825179],[0.866065,-9.881882,-7.816694,-4.530065],[5.950486,-4.758398,1.215174,-3.497661],[-3.612637,5.832452,-4.677560,5.713768],[4.392520,6.819061,3.495957,-7.629359],[4.960648,-7.918822,-1.334444,2.182215],[1.982150,-6.349790,5.807524,-3.173055],[-8.926442,4.310818,6.984804,2.951897],[8.011180,2.652879,8.625311,5.569656],[-7.176332,-8.529517,-0.715681,8.034014]],[[8.309418,9.120750,-3.094162,-1.909205],[4.466783,-9.391053,-2.689443,-1.209571],[-3.850888,1.789865,0.420372,-9.777122],[-1.154109,4.703503,-0.732381,-8.232229],[-5.806123,-0.859538,-7.444655,9.310880],[-7.704838,-1.229214,1.923437,-1.018434],[-2.974511,7.312367,-2.619792,0.641935],[1.629640,-9.983431,6.726343,7.781721],[-8.975048,2.198408,9.628222,-2.588253],[-0.214280,-8.009148,8.394092,6.736523],[-4.709586,-2.253828,-4.936731,8.463645],[-7.597124,1.131755,1.990582,8.464727],[0.930473,-5.345039,5.614080,-6.063037],[2.570694,1.264383,-5.629832,-1.089119],[5.620497,4.476356,-7.876721,7.361144],[-9.121761,2.269706,-6.663628,5.985860]],[[8.849784,-7.427467,2.532517,-7.727062],[0.665011,0.383070,-7.872593,2.527000],[-3.373181,9.042774,9.904719,8.866184],[1.982029,8.364816,6.613222,9.778644],[-9.134095,9.879502,9.085858,-2.005658],[5.767890,-6.838197,4.624600,-0.849528],[-6.952516,2.996049,-7.465809,-3.871934],[6.899045,4.366356,-8.244544,0.289837],[-1.469365,-2.692344,-3.245187,8.138805],[1.825863,2.804369,6.129890,-5.646225],[6.727287,8.221988,4.038619,8.147092],[-5.953965,9.191098,-4.043144,7.912892],[-1.333338,-9.457523,2.980922,-5.270617],[0.111834,5.945007,0.344511,-4.830948],[8.127595,5.312339,2.319368,5.870505],[5.931358,4.757494,7.938584,9.266774]],[[-9.601615,-7.470628,6.280865,-9.837349],[-4.504036,9.850926,-6.838353,-4.457732],[5.048847,-0.917304,9.306862,-8.458160],[-5.703756,-4.944030,2.094686,3.291032],[5.470073,8.601917,5.098238,5.659284],[8.473201,9.041239,-4.802392,-1.927058],[7.501152,7.692520,-0.037181,-9.129600],[6.786834,4.060439,-6.342881,-4.603638],[-4.028253,-6.433231,-6.135221,-9.598636],[-0.514148,7.627385,3.466588,-6.434903],[-7.414275,0.779863,-0.954396,4.061210],[-3.306005,-5.919400,-4.481265,-9.863529],[-7.193713,-7.861623,-2.725168,-3.684895],[-4.792869,-4.077309,3.984548,0.585431],[-9.916883,6.460460,-4.536231,-9.234833],[5.251423,1.727487,2.286131,-8.620369]],[[-5.895295,-7.150245,4.798929,4.482631],[-6.326473,-3.130258,-2.027992,8.210749],[-4.029254,0.063086,-0.217501,-0.041340],[-5.196350,8.465601,5.618026,1.156999],[-5.222067,2.587972,7.608625,5.156571],[-9.580210,2.032781,8.918595,5.806446],[4.460670,-8.458834,-8.736183,6.703591],[-2.118390,-8.333900,7.547030,0.612573],[-5.851397,8.513311,8.581361,2.453025],[-7.895351,0.764999,-3.811451,-0.474100],[4.729229,6.680396,8.713107,1.839768],[6.854616,3.203050,8.764940,-7.822323],[6.123432,8.392811,-2.317740,-8.069567],[-9.397544,3.032100,-6.695996,-7.000352],[-4.943801,6.712668,1.827716,-3.764324],[0.073920,4.973081,-6.577455,-6.870392]],[[6.857808,5.177956,-1.228759,2.218216],[0.187833,8.452938,-6.372449,9.340257],[9.279371,-5.132710,1.286108,9.189817],[-3.802372,-0.761272,-8.723473,6.142708],[-8.388433,-5.111255,-9.163429,9.049525],[-9.722439,-6.250064,9.085536,9.922403],[-0.209207,6.239778,-0.545814,-4.151038],[5.677408,-0.907059,5.796375,2.839599],[-4.501222,8.088393,9.032986,-0.890409],[9.597815,-6.833194,-2.583141,-3.860667],[0.202382,9.196385,-7.128698,9.006991],[-6.473444,-9.607820,2.027009,0.111204],[9.129789,-6.994075,-3.797007,-8.741668],[5.036796,-0.258544,-1.194499,7.264691],[-1.959285,-8.023662,-6.114188,-8.364605],[6.258305,1.861603,-2.476327,-9.833164]],[[5.967802,6.972691,5.370936,2.431095],[-7.355062,-8.655768,-6.126657,7.721935],[-5.905365,-9.003580,5.744880,6.052273],[6.611699,0.306503,-1.741311,1.285218],[-1.416546,2.648043,-6.771418,7.376677],[-9.224245,3.987467,6.982590,9.358604],[-8.581161,-4.263121,-0.272738,-2.803694],[-5.962331,6.549944,3.663983,-6.416904],[7.163535,6.691200,3.750362,9.796796],[6.536313,-6.028957,1.169761,-8.014952],[2.417725,7.068546,9.859185,3.968322],[8.904053,-0.855372,2.361278,-7.213630],[-7.849124,-4.853134,-2.965294,5.110706],[3.303733,-1.051612,9.455629,-8.202650],[-1.804192,-3.290936,-0.954928,1.863380],[-8.188488,-5.075213,7.131658,5.688787]],[[8.158075,3.387879,2.560217,2.771259],[-7.900836,3.628379,-3.021396,2.524466],[8.563507,-6.655977,2.932673,2.618842],[9.164349,-2.756166,-5.765661,-5.991816],[9.550085,-1.902499,-2.487140,6.014179],[4.787556,-9.877192,3.489417,-7.422669],[2.018418,-4.088741,6.989117,1.576879],[3.665032,0.541610,0.107282,7.936948],[3.462988,6.971486,0.644133,-1.067397],[9.406618,9.105523,-9.896800,0.931896],[-0.287549,0.475440,3.706625,3.127229],[-5.615283,-1.811776,-0.984763,-9.485181],[8.096620,-6.642331,8.048728,-3.499671],[3.554560,9.015366,5.168879,-2.696462],[-8.103130,8.405029,-2.296511,-7.139040],[1.694722,-7.718106,7.043071,0.204861]],[[-2.567591,5.499097,5.343138,-3.722682],[5.536198,-3.306799,-4.576032,4.097571],[-8.818870,-4.754732,2.123918,7.721102],[2.003485,-6.415575,3.035165,-5.734947],[6.428434,4.386636,6.222572,-7.712275],[4.091239,2.754819,9.096556,-7.489601],[-3.598997,-7.063712,3.089617,-4.213070],[9.690184,8.075125,9.413630,-9.444080],[-2.279071,5.994263,6.445104,-1.304358],[-8.380114,-5.953377,-3.436204,-1.844883],[4.521977,-8.620674,-9.887053,3.014860],[-8.758144,-5.980296,-9.974772,-7.381847],[-4.135411,-9.562593,2.577483,-5.267221],[1.226752,8.196897,7.007363,-9.449827],[-2.958440,-8.439502,7.831485,-8.767659],[-8.429644,4.796054,2.460157,1.279506]],[[4.689398,3.489739,6.158687,8.037763],[-4.548549,-9.109270,-2.910754,-7.703653],[-1.995508,1.933733,2.663225,6.382459],[6.776787,-0.068460,-9.972595,-6.204685],[-2.121538,7.000077,-8.100311,-5.878623],[4.548420,-3.278162,8.755579,4.505146],[9.572982,6.877022,-2.161037,8.904853],[-1.372058,2.402956,4.916690,-9.135360],[2.676301,4.065583,-0.535266,0.822771],[1.084668,1.585985,-1.353122,-4.478038],[-8.278912,-4.333285,-7.231913,-0.123751],[-0.162677,8.450826,2.140230,3.643092],[8.244991,-9.698310,-7.291326,-0.279991],[-8.697587,-9.608116,-8.062978,-7.897445],[-1.834070,0.656791,-4.808139,9.246845],[5.240877,5.678616,2.630962,-0.010298]],[[0.855531,-8.340340,-0.770173,6.426333],[4.910195,2.966062,-9.959886,-9.893724],[1.115795,7.582773,3.409592,-7.145183],[-5.936986,5.380703,-0.840156,-2.232335],[6.715175,7.114065,8.919362,-1.076578],[-3.516236,-0.503527,9.763238,7.232806],[5.116170,1.855721,-7.816256,2.576412],[2.496612,-8.219411,-3.139591,6.245466],[8.271396,5.588092,-1.918060,2.330028],[-8.456826,4.959281,-2.892610,-8.545143],[-5.008257,-5.181124,5.781207,9.005171],[5.738973,-2.195150,-3.236535,0.095772],[-3.112959,5.596832,-0.795530,9.914587],[-2.203072,-5.633065,0.626525,-6.836221],[-5.244440,-6.266417,0.357903,-2.018138],[8.196442,-2.309552,7.177371,-4.903493]],[[2.207753,-9.034155,-8.238643,-5.744920],[-0.686918,-3.478742,1.937115,5.981826],[4.275461,0.592836,9.551576,4.727959],[-8.888011,2.204556,6.215518,3.011200],[0.014900,-3.444024,6.405931,-0.324402],[-9.467956,7.438410,-3.024091,8.210740],[6.960878,-2.807984,9.499476,0.841370],[6.450177,8.283507,-1.921161,8.914646],[-0.157123,-7.126512,-4.083311,4.838460],[6.710735,-6.813623,-0.925878,8.219880],[-7.544227,-9.277803,-2.929881,5.179747],[-5.447925,-4.710485,9.498610,-5.385210],[-0.399497,3.938581,-0.085561,1.689244],[-9.871333,7.371270,6.049698,-8.816179],[-5.762564,8.442992,-1.295970,-7.199414],[7.474772,-7.254196,1.559915,-5.359876]],[[6.050931,-8.608864,4.568936,5.399487],[-6.603991,-1.151630,4.983890,4.008978],[5.769794,-0.270930,-2.722643,6.147702],[-6.220400,-6.997841,-4.607825,3.498483],[3.714374,3.415750,0.889930,-5.665638],[3.122779,7.944618,2.487662,-9.168540],[-0.240845,-3.834703,-6.657916,-5.303918],[6.174225,-9.393762,-2.907096,4.886836],[0.396719,-1.477213,3.431920,-0.694671],[4.607953,-5.340843,5.310651,8.096472],[5.654125,-7.865689,8.757906,-6.289585],[4.694564,9.412531,-6.063971,0.666531],[5.885174,-8.861080,-4.045941,-8.773391],[6.469155,-0.419145,5.895607,-6.476013],[-9.752989,-2.289731,8.866611,-2.832941],[3.655380,-4.915634,2.951280,-8.273482]],[[0.273110,8.411499,2.285055,6.568018],[-0.177203,7.088792,-5.553545,0.315050],[-0.689434,-8.582739,-1.628375,3.521582],[-9.121772,-9.210805,9.934570,0.940453],[0.196166,7.576766,-2.692340,1.880149],[-3.832641,-0.953817,-0.439535,0.765288],[-3.835323,5.290030,4.099007,-2.704857],[-6.651511,2.910867,4.688156,2.401027],[0.773798,-1.406048,9.403398,3.193109],[-5.036627,-2.715705,7.255187,-0.743659],[-0.591846,-7.649259,-4.412967,8.152389],[8.606169,-8.085875,2.556696,-7.610078],[-9.873746,-7.510400,-1.003293,-7.993465],[-8.258333,-5.841504,-1.652522,9.391947],[-4.894503,-2.369599,-8.696712,4.679559],[-3.836424,0.667110,5.128658,7.975566]],[[-1.910733,-1.841844,5.530385,7.973770],[6.796332,4.839715,-4.469956,-7.463413],[-7.449430,9.450434,7.781820,9.703273],[2.199769,9.717617,-3.088136,-5.884437],[9.623111,9.618974,7.987366,-3.307558],[-0.521476,3.540769,-5.132378,6.388623],[-6.400549,6.838895,-0.109396,-8.717396],[5.011566,-5.998265,-8.045881,-9.729235],[3.253624,-6.458309,7.854820,-5.020022],[-2.581189,-0.750444,0.228548,7.002469],[5.686335,7.169738,9.544705,3.784999],[-8.341688,-3.970629,-7.925447,-3.055739],[1.588930,9.901006,7.090066,-1.531185],[0.415418,-8.137883,1.831368,-1.104309],[-3.083337,-0.412727,0.420761,6.234386],[0.849559,-4.876544,-2.838137,-6.937269]],[[2.306918,-9.879998,9.482217,-8.964624],[-2.217139,0.876918,4.439863,-4.760554],[-4.927166,2.091543,-9.568320,6.828610],[9.900693,2.231938,-1.664188,3.831569],[3.139477,-8.356522,-8.447978,2.163140],[2.291602,-8.715122,6.809262,-9.068275],[2.811131,5.755625,-2.305873,-7.429050],[8.978194,-4.303202,0.286619,5.428154],[3.715675,8.050243,5.703921,-8.041139],[3.207196,2.940951,8.565616,-8.602410],[9.900402,-8.429861,-2.990698,2.673610],[2.997060,6.069456,6.479047,1.756429],[-3.589178,3.060600,-8.405920,-3.244986],[-3.176384,-2.064646,-2.035527,0.156076],[-2.218320,0.708474,-8.289749,-8.093276],[-7.782126,-1.813670,0.390115,7.182261]]], dtype = "float32")#candidate|12335|(16, 16, 4)|const|float32
bop_12336 = relay.mod(var_12334.astype('float32'), const_12335.astype('float32')) # shape=(16, 16, 4)
uop_12350 = relay.atanh(bop_12336.astype('float64')) # shape=(16, 16, 4)
output = uop_12350
output2 = uop_12350
func_12367 = relay.Function([var_12334,], output)
mod['func_12367'] = func_12367
mod = relay.transform.InferType()(mod)
var_12368 = relay.var("var_12368", dtype = "float32", shape = (1, 16, 4))#candidate|12368|(1, 16, 4)|var|float32
output = func_12367(var_12368)
func_12369 = relay.Function([var_12368], output)
mutated_mod['func_12369'] = func_12369
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9685_call = mod.get_global_var('func_9685')
func_9687_call = mutated_mod.get_global_var('func_9687')
call_12374 = func_9685_call()
call_12375 = func_9685_call()
func_5537_call = mod.get_global_var('func_5537')
func_5540_call = mutated_mod.get_global_var('func_5540')
var_12377 = relay.var("var_12377", dtype = "int8", shape = ())#candidate|12377|()|var|int8
const_12378 = relay.const([-2,-1,-7,-2,6,7,3,3,8,-2,4,-3,8,-3,3,-6,-2,-6,4,3,9,3,3,-3,6,8,-9,-7,2,-1,3,-2,4,3,7,7,7,-9,-6,1,-10,-3,1,8,-7,8,8,-6,-9,10,6,3,-7,-6,-9,-6,6,-9,-7,-2,-8,6,-2,8,-3,1,-8,-5,-9,10,9,-8,-3,-4,4,7,-6,-7,7,-4,-4,10,-9,6,7,7,-10,-1,-2,3,10,-7,3,7,-9,-10,3,-2,-6,-10,4,1,2,7,8,7,2,-4,-8,-6,-1,-10,8,-7,-2,-9,4,-10,-1,-8,9,-9,-1,-7,-4,-8,1,9,9,4,-3,-8,1,3,7,3,9,6,-6,1,-7,-7,6,-8,2,-8,2,-1,-6,-9,6,-6,5,-4,-8,-1,3,-3,-3,-6,2,-9,-2,9,7,-8,1,9,-9,-7,8,-1,-5,2,7,3,3,-4,-4,-4,3,3,7,10,-5,-2,6,-5,-10,-8,-4,6,5,-6,-5,10,-2,1,-5,5,7,-4,-1,-3,6,9,4,-9,5,6,4,7,-8,-5,-9,-6,8,-1,-9,-1,8,4,3,-1,-9,-10,2,10,4,-7,-6,1,-3,2,-7,-4,2,6,-1,6,3,-4,-3,-7,8,10,-8,-7,-1,10,3,-2,-4,-2,3,-5,-6,-3,3,-6,5,6,-6,4,-3,7,10,3,-8,-9,5,-7,-2,7,-10,10,-8,-1,-9,-2,-7,10,-8,1,8,-9,3,1,8,-5,-3,-6,-1,-5,-9,-5,-8,6,-8,4,-9,8,-8,-1,10,-5,-9,2,-7,2,-6,4,2,1,-1,9,-7,3,-7,-2,-8,-10,7,9,-10,1,8,1,-9,1,7,-1,-8,-10,7,-3,-8,-6,-6,-10,-3,-4,8,2,-10,-9,-4,1,-5,8,2,8,4,-6,8,9,-7,-4,-10,4,9,9,6,-5,3,-2,5,-7,-6,1,9,5,5,-2,-4,-5,2,4,3,8,3,3,9,-4,2,-9,5,8,-1,-5,7,-8,5,8,3,6,-3,1,10,9,3,5,-9,-10,-1,9,-6,-10,1,10,1,10,-4,8,-10,-6,-2,-5,-3,-5,-1,-4,-1,9,-2,6,5,-9,-10,-3,-5,-7,1,10,-8,-8,-9,-7,7,-2,7,4,7,2,-4,10,-5,6,1,-8,3,8,-8,-2,-1,6,4,1,-7,1,-8,-1,-9,7,-5,9,-10,-9,1,5,-8,1,5,5,5,-3,6,3,9,3], dtype = "int8")#candidate|12378|(480,)|const|int8
call_12376 = func_5537_call(relay.reshape(var_12377.astype('int8'), []), relay.reshape(const_12378.astype('int8'), [5, 6, 16]), )
call_12379 = func_5537_call(relay.reshape(var_12377.astype('int8'), []), relay.reshape(const_12378.astype('int8'), [5, 6, 16]), )
func_12297_call = mod.get_global_var('func_12297')
func_12299_call = mutated_mod.get_global_var('func_12299')
call_12397 = func_12297_call()
call_12398 = func_12297_call()
bop_12418 = relay.less_equal(call_12376.astype('bool'), relay.reshape(const_12378.astype('bool'), relay.shape_of(call_12376))) # shape=(5, 6, 16)
bop_12421 = relay.less_equal(call_12379.astype('bool'), relay.reshape(const_12378.astype('bool'), relay.shape_of(call_12379))) # shape=(5, 6, 16)
func_9009_call = mod.get_global_var('func_9009')
func_9011_call = mutated_mod.get_global_var('func_9011')
call_12431 = relay.TupleGetItem(func_9009_call(relay.reshape(call_12374.astype('float32'), [3, 12, 4])), 0)
call_12432 = relay.TupleGetItem(func_9011_call(relay.reshape(call_12374.astype('float32'), [3, 12, 4])), 0)
func_9641_call = mod.get_global_var('func_9641')
func_9642_call = mutated_mod.get_global_var('func_9642')
call_12433 = func_9641_call()
call_12434 = func_9641_call()
func_11879_call = mod.get_global_var('func_11879')
func_11881_call = mutated_mod.get_global_var('func_11881')
call_12439 = relay.TupleGetItem(func_11879_call(), 0)
call_12440 = relay.TupleGetItem(func_11881_call(), 0)
output = relay.Tuple([call_12374,var_12377,call_12397,bop_12418,call_12431,call_12433,call_12439,])
output2 = relay.Tuple([call_12375,var_12377,call_12398,bop_12421,call_12432,call_12434,call_12440,])
func_12445 = relay.Function([var_12377,], output)
mod['func_12445'] = func_12445
mod = relay.transform.InferType()(mod)
mutated_mod['func_12445'] = func_12445
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12446 = relay.var("var_12446", dtype = "int8", shape = ())#candidate|12446|()|var|int8
func_12445_call = mutated_mod.get_global_var('func_12445')
call_12447 = func_12445_call(var_12446)
output = call_12447
func_12448 = relay.Function([var_12446], output)
mutated_mod['func_12448'] = func_12448
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10651_call = mod.get_global_var('func_10651')
func_10652_call = mutated_mod.get_global_var('func_10652')
call_12450 = func_10651_call()
call_12451 = func_10651_call()
const_12454 = relay.const([[[False,True,True,False],[True,False,False,False],[False,True,True,True],[True,False,False,True],[False,True,True,False],[False,True,True,False],[True,False,False,False],[False,False,False,True],[False,True,True,True],[True,True,True,True],[True,False,False,False],[True,True,True,True]],[[False,False,True,False],[True,False,True,False],[True,True,False,True],[False,False,False,False],[True,True,True,True],[True,False,False,False],[True,True,False,False],[False,False,True,False],[False,False,False,False],[True,True,False,False],[True,True,True,True],[True,False,True,True]],[[True,False,False,False],[False,False,False,True],[True,True,True,True],[True,False,True,True],[True,False,True,False],[True,False,False,False],[True,True,True,False],[True,False,True,True],[False,True,True,True],[False,False,False,True],[True,False,True,False],[False,False,True,True]]], dtype = "bool")#candidate|12454|(3, 12, 4)|const|bool
bop_12455 = relay.bitwise_or(call_12450.astype('int8'), relay.reshape(const_12454.astype('int8'), relay.shape_of(call_12450))) # shape=(3, 12, 4)
bop_12458 = relay.bitwise_or(call_12451.astype('int8'), relay.reshape(const_12454.astype('int8'), relay.shape_of(call_12451))) # shape=(3, 12, 4)
output = relay.Tuple([bop_12455,])
output2 = relay.Tuple([bop_12458,])
func_12467 = relay.Function([], output)
mod['func_12467'] = func_12467
mod = relay.transform.InferType()(mod)
output = func_12467()
func_12468 = relay.Function([], output)
mutated_mod['func_12468'] = func_12468
mutated_mod = relay.transform.InferType()(mutated_mod)
const_12471 = relay.const([[[-5.755932,0.704649,3.563616,4.414330,6.253214,9.252382,-4.185376,4.105433,3.836177,-5.143529,-0.672251,1.436942,-5.957412,3.709819],[5.328858,-9.242074,1.101847,-8.646397,-5.797224,-0.983680,-3.003140,0.819479,-6.384844,-6.637525,-5.469006,5.031211,-3.220025,8.930670],[-9.947298,9.558124,-5.284659,-6.943591,7.915093,-3.277328,-9.190142,4.207630,0.400110,9.609900,4.128743,8.256609,-4.920010,6.273672],[1.777285,-7.087431,1.168997,5.692135,9.558470,6.518396,9.978391,-6.123318,2.265646,-9.480759,1.371613,-4.228039,-2.019320,-2.060857],[2.386139,6.674364,-7.459858,-3.218945,2.407564,8.713858,8.512551,6.924305,4.397540,-8.488158,1.729133,7.346497,-9.389727,0.322861],[3.988802,-8.372083,0.175287,6.925969,5.157787,-2.954208,-3.561915,0.635221,-3.202866,-3.457636,-1.790069,-6.634554,9.882981,-5.002472],[-5.854111,-3.978668,0.857451,-8.367732,-3.774971,5.199731,0.341471,-4.094985,5.528895,-2.621575,-8.900742,3.589765,3.825710,-8.764282],[0.272065,9.025734,2.012996,5.458563,-3.898351,8.698242,-6.667118,-4.641037,-0.417935,9.609403,-9.391275,-6.571084,-9.151913,6.094553],[7.302816,-0.138509,7.414381,-8.772328,-8.658234,8.080976,9.077935,4.573133,8.770997,-9.382100,5.657711,-9.380896,3.103634,-2.007374],[-6.811431,6.220399,-6.511712,2.758318,3.660582,-8.030933,1.717028,-1.165197,-1.841805,-1.943451,7.901514,-0.457028,-2.334488,-2.114327]],[[1.766675,6.865615,8.514668,9.396421,9.632027,6.650492,0.031477,-2.564601,5.257615,0.826735,-3.757496,-3.013207,-1.819134,-2.562006],[7.436401,-9.474443,-6.246385,-3.816181,0.638633,5.518243,-0.893183,7.901812,-7.387800,9.421601,5.345273,5.130009,-3.134777,4.870692],[-1.053261,-8.883914,1.473942,-4.836322,-0.543887,8.047686,0.813122,-5.782852,5.553279,3.769811,7.001319,1.145084,2.629866,5.897660],[-8.025866,6.289305,-7.140222,-8.554319,-8.130361,7.895629,-2.075892,-5.362917,7.325801,9.758621,7.175152,-9.389471,2.047340,5.096186],[6.100525,3.274414,5.593040,-7.188581,-3.832888,7.641612,-8.636039,2.912339,9.709276,-7.286248,5.419472,2.960644,-5.500961,3.850332],[-4.344561,-0.452072,7.834014,2.388155,-8.532135,5.083059,9.404274,-0.169311,2.165235,-5.710291,4.183240,-0.292407,-1.228399,1.685082],[9.700456,0.660541,2.173106,2.060287,5.504747,-7.945395,0.400722,-1.319859,-8.640897,-1.804527,-5.238343,8.858427,4.920952,-9.243345],[9.213098,-5.331288,5.754189,-5.183814,5.217838,5.967539,3.645164,0.493625,6.234813,8.036508,-6.359968,-0.092639,-6.761619,-5.219355],[5.949789,7.855591,3.412207,8.498102,5.270856,0.083701,-7.723176,5.705997,-0.646735,-2.294212,-4.196746,-1.003231,1.494507,-6.527532],[-7.040088,7.480071,2.425763,-2.732067,-3.945135,9.453557,-4.242803,-7.394201,-6.258440,-2.507248,-7.821688,-4.726469,-8.150358,1.215741]],[[3.143026,2.581046,8.505495,3.924545,8.545410,4.374742,-8.272141,-7.157163,7.960302,2.651132,-6.795187,1.750467,-4.038971,-0.374362],[-0.809408,-9.406877,7.587469,6.631392,-1.910657,7.364761,-1.656644,7.220405,-5.850935,8.437386,-6.776952,0.391350,-7.384530,-0.908874],[-1.136888,7.674342,-4.024960,2.208830,7.728481,-0.297646,1.996357,-5.710031,-9.247732,-9.992903,3.699479,6.281854,-9.322252,-7.713626],[4.076115,2.006228,2.001802,-5.304510,-1.616477,2.759895,-8.689156,8.801827,-1.494235,6.818363,4.443353,4.512331,-1.219539,9.407143],[0.034309,1.530858,-7.836373,-7.010280,-8.421591,3.165642,-5.669036,-0.138345,9.129590,3.673120,1.736466,-9.332478,-4.794961,1.450965],[-2.599506,-2.231026,9.708572,-9.118386,-9.055738,9.040208,6.976868,-6.952351,-5.938051,-4.300599,-6.538551,7.943839,4.636527,5.207483],[7.150353,-3.131678,0.461512,2.114374,-1.772833,-9.792548,-2.281127,1.209718,-1.898291,-9.914556,9.029094,-4.272589,-3.929152,8.332570],[-8.323600,7.269684,-4.007012,4.377072,-1.786620,-9.556874,1.937543,-5.368007,-9.339740,3.618312,1.853948,1.640643,8.678182,-2.260577],[9.061853,3.541245,-1.143042,4.940020,-9.290389,-6.238704,6.575590,1.939546,0.619170,9.160474,-8.726651,3.220694,-9.224118,-9.236767],[-8.139460,2.659193,-3.847892,4.578088,6.417372,3.011064,-2.110764,7.168706,-8.932797,-4.514046,-5.511244,-8.131075,-3.994846,-8.434247]],[[-5.787609,-6.658655,8.689257,3.950283,-7.374780,5.788752,0.980807,9.736334,-8.753477,-9.021906,-7.745226,0.048074,-7.835532,8.381283],[5.221550,4.221246,-1.064731,-2.778504,4.162002,1.214257,0.805802,2.716859,-2.294951,-3.007064,6.520446,0.528698,5.575533,-6.243885],[-4.658056,-8.604023,3.052413,-2.780067,-7.760019,-6.214372,-7.115365,0.274091,-2.303988,-5.479084,-4.415353,0.826048,1.697518,5.587881],[4.609239,-3.609726,1.773377,9.746697,-6.626415,-5.518428,3.835622,-4.735425,-7.978366,5.311548,5.572351,8.401908,-3.896008,7.471841],[-9.053436,-1.599176,1.065143,9.941319,1.678240,7.170014,-3.583406,-9.916898,-3.654966,1.802950,0.078086,9.367686,0.035882,-4.747141],[-1.850649,7.400873,-2.858992,-3.018487,8.727102,-9.029135,2.592953,-5.220735,4.004802,3.004917,-6.818258,-4.691321,8.714781,-0.133961],[7.891353,-8.060008,-0.578944,-9.644960,1.139629,-8.032900,-4.131845,5.350084,3.790676,-7.569628,1.477041,-2.422163,-5.367660,6.458906],[8.549844,-8.000515,-0.095523,-9.501267,5.070205,9.771361,4.128665,7.804082,-6.759811,2.782025,-8.683000,-4.679905,1.208471,2.253210],[9.876379,9.842747,-9.339377,6.855352,-9.334002,-0.492343,-1.188353,-9.228923,8.236905,-8.060673,3.792998,1.066061,0.879194,6.289734],[0.516206,-2.580230,7.713412,4.476268,-1.031070,-0.058393,-2.143684,-6.873865,-2.633383,-3.466684,-2.291514,5.790375,0.923052,4.520132]],[[-3.147120,7.353888,-0.762307,-5.799777,-2.694945,6.057345,2.386113,1.032533,-7.858555,-2.667777,4.377469,9.431554,9.303799,4.576255],[2.519992,5.404891,5.788726,7.384859,1.245675,3.595208,3.854000,-2.460436,-9.751755,-1.320820,1.800726,2.884639,-5.949325,-8.886752],[5.862290,-5.378053,-7.823375,-5.317458,-5.407445,2.498193,8.572194,5.046435,-5.116090,2.415211,-1.155188,9.739120,3.620230,-9.463397],[9.071898,9.588740,-1.912418,-4.262588,-8.520895,-6.755790,-9.477740,-7.606727,-7.356355,7.403898,1.396598,3.704628,-9.774063,5.021012],[5.254582,1.639378,-9.659208,9.808389,-1.004935,4.069849,-3.095739,-5.543753,-0.443079,-4.128743,-2.258601,5.758262,1.892088,0.590717],[9.006582,8.001586,-3.250951,-3.123115,2.835693,7.397068,3.535061,-1.324754,-0.652104,-5.194822,0.296839,9.634685,-9.974653,7.943403],[5.519519,-6.099469,5.425789,8.540751,-4.847713,-6.974223,7.205821,-1.530868,7.287018,-2.056249,6.385262,-2.654431,-8.858271,-5.261059],[-5.502558,-9.827937,9.574567,-0.212940,-6.243683,-0.412477,2.743070,-8.181116,5.275415,1.321808,-7.635202,-5.259829,3.158551,-7.413182],[6.630549,-8.974576,5.714693,3.707870,9.118060,5.198208,-1.084713,3.413818,7.436796,-7.047682,-8.746390,9.912209,-9.845885,-3.776576],[-4.882290,2.226162,5.066072,9.837071,-2.584416,8.424217,-8.399519,6.620720,3.519740,1.520880,-4.252671,0.814782,8.120720,4.585894]],[[-9.846639,3.256026,8.730257,-8.080577,8.063760,0.471098,9.328109,1.832689,8.246525,-6.527063,8.515668,0.147999,1.485533,-4.022231],[7.648067,-1.870286,2.121418,-0.442520,-2.220124,-0.826800,-0.624864,8.465126,-1.983408,-3.793087,9.696670,-5.842892,-1.466991,3.729321],[-3.081854,-3.701522,7.029992,-3.720993,1.450137,8.276829,9.206416,4.997603,7.126122,7.773535,9.686827,-4.994072,-0.589101,-1.500074],[-7.871085,3.644228,3.752136,3.426447,-8.192379,-8.372977,-7.165877,-4.199495,0.928484,-8.235953,-3.482982,-3.799784,9.791720,3.430742],[-0.882091,-0.308618,6.095634,6.600133,5.974186,7.402270,-1.224574,4.710717,-2.061555,4.523092,2.492867,-0.563013,2.292144,-8.825821],[0.016496,9.041241,1.341091,0.283517,5.130695,8.687062,1.519359,-6.003304,-8.425332,-8.140844,9.717592,-9.627686,4.737493,7.247069],[-9.097006,5.946994,4.474253,9.730009,-3.003975,9.202216,8.193468,3.101662,5.384318,2.864635,2.484154,-7.839927,6.058911,-7.030591],[-4.945816,7.614775,7.229287,-2.343738,5.596311,9.690397,-9.101775,0.303020,2.304001,-8.649305,4.033987,8.499683,-1.559478,3.519803],[-9.713909,-3.043445,4.360268,7.777013,4.228594,4.136591,5.872230,-1.853879,9.699068,-1.346947,-7.041386,-6.600771,-9.702426,5.022941],[7.124141,-9.751362,-0.959200,-0.093361,-8.364161,-0.879076,-1.185270,8.302940,-4.520211,8.859191,4.988697,-9.157002,8.720072,4.409430]]], dtype = "float32")#candidate|12471|(6, 10, 14)|const|float32
uop_12472 = relay.cosh(const_12471.astype('float32')) # shape=(6, 10, 14)
output = uop_12472
output2 = uop_12472
func_12480 = relay.Function([], output)
mod['func_12480'] = func_12480
mod = relay.transform.InferType()(mod)
mutated_mod['func_12480'] = func_12480
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12480_call = mutated_mod.get_global_var('func_12480')
call_12481 = func_12480_call()
output = call_12481
func_12482 = relay.Function([], output)
mutated_mod['func_12482'] = func_12482
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9685_call = mod.get_global_var('func_9685')
func_9687_call = mutated_mod.get_global_var('func_9687')
call_12522 = func_9685_call()
call_12523 = func_9685_call()
func_10657_call = mod.get_global_var('func_10657')
func_10659_call = mutated_mod.get_global_var('func_10659')
const_12525 = relay.const([7.982025,5.865037,6.497564,3.754678,5.783170,-4.742691,-4.347056,-9.862120,9.076591,4.860260,5.157379,5.921911,4.819351,7.305019,-2.290768,5.198052,2.347317,9.336646,-0.028842,-3.890766,-1.420563,-8.652461,5.417945,-6.892314,5.763962,4.113649,4.093093,-5.693834,4.821183,8.042622,-1.971003,1.150616,6.409433,-6.906842,2.571694,3.754766,-5.894918,-9.682181,-4.313057,-9.948237,-9.389826,-8.147832,-3.638100,-6.941744,2.006971,8.688818,-6.487143,7.823605,9.524672,9.858929,6.812805,-7.726551,6.126553,4.748762,1.111825,6.941893,1.179849,2.292960,4.871615,6.894366,7.789365,-9.529324,3.822320,-6.274956,3.906244,5.219052,-3.111334,-6.857271,-2.456320,-6.032958,1.020625,6.363689,0.009132,-9.002894,9.395761,5.079713,4.182687,-3.108240,-5.317436,3.250515,0.072674,-7.627935,0.707041,6.850097,-0.556167,9.297470,9.247744,2.915824,-2.324289,2.240062,4.520255,-7.754347,-0.770084,-2.559258,3.361742,1.402899,-1.987200,4.892051,-3.469732,-2.015832,-5.463090,2.803923,-6.612662,-1.632488,-5.992708,-9.134569,8.025412,-9.055175,-5.924891,-8.261415,8.148690,-8.129228,3.585322,8.893841,-7.935191,-4.219980,5.864094,-6.884361,-3.735336,-9.971440,2.198888,9.050980,-4.933388,-7.911661,-1.739559,-8.723472,-9.494575,5.960911,-2.486998,-2.833075,-6.974607,3.314644,-3.825518,-5.714642,2.442365,1.248501,4.771802,0.690162,7.557288,-0.665572,-0.073712,8.069639,7.946965,-1.483818,0.584771,-5.573065,3.139273,7.334818,-9.602986,6.547925,1.823509,-4.570205,2.612992,-1.088082,5.843935,-5.847729,3.129497,2.714013,-3.557298,9.062840,-1.086203,-4.464953,3.136268,4.650601,7.584162,1.909086,0.894156,2.385435,4.102536,0.177961,8.441503,-4.600740,4.398030,7.295531,3.026525,1.791048,4.162001,-2.823695,-1.799709,-3.182698,-6.987172,-3.893248,3.327309,-5.522787,8.717663,8.006882,0.971202,7.710672,2.385558,-4.680903,7.606441,-2.609588,7.972823,-0.290229,-7.251761,6.308436,-2.808330,7.507981,-3.522203,7.985904,0.248462,-8.709162,-3.607401,-1.612722,-9.997651,0.228176,-6.198005,-0.290826,-7.209356,2.769581,5.275358,7.300127,-1.395453,9.685796,-9.226143,-8.107260,-3.656086,-7.000638,4.284560,-1.590493,6.671972,8.756840,-9.584098,-2.467348,-0.622295,3.955766,-7.625592,-3.874762,4.691419,3.435746,-6.666799,-9.658648,-6.366555,4.527656,7.269012,-0.418917,4.590388,-4.627169,3.762935,-3.447734,4.994691,-1.889810,-6.378071,-7.353200,-2.226450,2.626647,-4.995086,5.049602,-9.958118,-4.722455,1.123576,4.551537,-6.350870,-3.996794,-4.829684,-8.374235,-3.964547,8.824458,1.087819,0.952941,-1.516101,-8.901567,-3.861234,6.584711,-2.630697,-3.465917,-8.660641,0.975127,5.494553,5.922393,-9.711779,7.006744,-6.357448,-6.185821,7.447470,0.781791,-1.874135,-9.378790,-2.849927,-9.377768,5.867885,-4.878885,-7.267639,-0.107747,3.005302,9.268977,6.732579,-5.274539,8.241387,8.234409,-3.891317,-5.394673,-6.448175,3.402255,3.765361,-1.680315,-0.386194,-7.153131,-1.244595,1.327090,-0.629368,2.895675,3.463189,5.974459,-0.329038,4.269243,-0.787814,-8.949864,-5.666256,6.610358,8.471589,-5.358817,-5.819385,-7.306638,-6.518072,-0.901674,-4.346791,-5.680488,0.917072,-3.832778,1.426372,4.699624,-7.451138,-5.099817,2.887244,-6.861322,0.348729,3.332568,9.690414,-9.450875,8.232287,6.811877,6.816405,5.626788,1.474498,-7.776687,-1.191336,-9.071074,6.428654,4.821665,-1.940511,5.113029,4.586778,7.988947,-5.508512,-7.897013,-8.717859,0.516677,2.290360,7.697963,8.595662,6.504968,2.812424,-1.099085,7.313746,1.089427,3.917095,8.330747,3.717059,2.218339,6.460938,7.198131,9.422781,2.128078,-8.479845,-8.398544,-7.592442,2.569981,0.135334,4.374611,2.807600,4.105389,6.450159,0.243608,7.381015,0.856195,-0.214018,8.854531,8.132002,8.879576,1.445391,4.664115,3.428520,6.085575,-5.574051,2.408835,3.550236,-9.628335,-8.405389,-2.486761,7.777094,-7.388376,-4.784468,0.409723,-8.153201,6.601537,-1.337666,3.448006,6.153038,2.468916,9.376986,-4.267478,5.081957,-6.520975,-6.344235,7.654427,-3.124836,-1.644176,3.230545,-3.683075,-6.528770,2.652362,3.060130,-7.983592,4.059330,-5.556775,7.208966,-0.668306,-1.174361,-3.831231,7.783828,-5.441553,1.069672,-6.800393,-6.663411,-1.611937,4.526529,-0.923350,-6.551028,0.787225,-2.782379,7.367905,-0.138144,-6.433182,-9.901840,-0.692539,-2.011123,7.786006,4.086886,7.982233,-8.138773,-6.900441,7.525691,-3.647326,6.203802,-4.867216,-3.558732,4.223780,0.735184,8.026488,-7.687496,6.026491,-9.286281,-7.241574,-3.074067,0.767272,5.758530,-9.482031,-5.596198,1.210678,2.687676,1.694993,5.532106,-0.550501,-5.367054,-4.186328,9.355749,-2.412395,-2.435940,8.838723,-6.599510,0.935951,-2.066041,-6.303772,9.917817,1.365604,3.849647,-5.707443,8.367247,1.441722,-4.336001,8.220914,7.145688,0.988756,-3.004752,5.048488,0.073542,2.756098,-7.623666,9.847233,4.350535,-7.109751,5.864898,2.362312,-1.895379,1.465484,-7.096869,-8.428269,-8.201641,7.937698,9.041621,4.627077,0.651390,-1.341288,-3.430732,9.734832,-2.374841,6.553940,-9.869054,1.415774,6.496221,9.827165,4.208760,-9.341327,6.360483,-7.656098,-1.249480,-7.542331,-6.279006,7.729463,-9.089363,-0.408558,0.135861,-1.570083,-6.617453,-7.588901,-6.205758,0.073777,7.458661,1.423733,3.201691,1.708321,7.915503,-8.587851,0.673724,5.138338,-6.334897,-3.055634,4.775634,-0.576117,-0.606607,1.899512,-7.998674,-7.558054,-5.239306,2.571372,-1.593421,6.109388,-2.441787,2.228324,-5.004449,5.451829,4.475524,-1.069471,-2.362835,-5.270252,4.247847,-1.953699,7.708736,8.162657,-8.197683,1.491256,-9.792938,8.530952,-8.800002,-7.108762,2.453619,-5.102847,0.033016,4.673553,8.187722,3.769142,5.380313,-1.324474,-6.796660,0.737832,-4.600587,2.287891,9.869554,6.117165,-4.999766,-6.889563,1.359806,-1.399708,3.995005,5.604588,9.383917,9.289018,-9.805444,5.058440,-3.173564,9.958834,-3.612223,9.659567,8.199288,2.499296,-8.271838,3.185062,-3.736210,-7.493908,0.152741,-9.137466,-9.615577,-0.732710,-9.725360,-0.673241,-5.096631,7.729422,-2.886973,-0.421632,-0.586528,9.453750,-0.795904,-1.298935,-7.066838,-4.334444,-2.429054,1.451841,1.176362,0.341305,7.040143,-1.476306,-5.738839,-2.593073,-2.882152,-7.970038,3.545790,9.425310,5.048971,-2.111144,-1.639781,3.989056,-9.464650,-0.871793,-0.410522,2.745003,1.230581,2.700464,0.481003,-3.997106,2.733464,-8.342114,7.940795,-3.179596,-1.401779,-9.704503,2.119848,4.932779,-3.320427,2.254398,-1.339154,6.463656,-7.646403,9.365181,-2.438079,5.468732,-3.616126,-0.211942,7.912423,-2.804244,-5.816642,6.739863,2.526519,6.199109,-3.017838,-8.333430,8.093493,-9.609510,6.606193,2.131604,1.861104,5.593380,0.311017,0.842722,-0.003554,-3.610597,6.013708,-6.865523,-7.864728,-5.983992,1.682616,0.123400,-4.866233,-0.797617,7.012725,-7.821811,3.593401,7.921864,8.282419,1.129348,-2.601293,-4.850076,9.135557,-9.242374,-1.935040,-7.886311,-0.480251,-3.437106,3.731494,-8.073566,5.303849,-4.485916,-0.172311,8.870203], dtype = "float32")#candidate|12525|(704,)|const|float32
call_12524 = func_10657_call(relay.reshape(const_12525.astype('float32'), [11, 4, 16]))
call_12526 = func_10657_call(relay.reshape(const_12525.astype('float32'), [11, 4, 16]))
func_11404_call = mod.get_global_var('func_11404')
func_11409_call = mutated_mod.get_global_var('func_11409')
var_12528 = relay.var("var_12528", dtype = "float32", shape = (90,))#candidate|12528|(90,)|var|float32
const_12529 = relay.const([[-2.002282,4.579221,-3.219636],[-6.125009,-9.015741,-9.758045],[-7.382269,1.689294,-2.578835],[-4.364150,-3.300104,7.445991],[7.314954,-6.492206,-1.791143],[-9.142204,9.151190,4.921933],[8.862288,8.531048,-8.851094],[-3.746990,9.389578,4.889295],[-0.879109,-6.476544,6.357531],[-1.697080,8.531008,-9.837366],[5.382786,-6.194335,-3.638897],[-0.875915,8.881996,-2.230081],[4.775807,0.426168,-7.159901],[8.639265,-9.437960,1.645381],[6.970463,-0.282102,-7.528426],[-3.293789,-3.936349,5.399271],[-5.986857,-1.950467,9.434722],[9.832411,-7.109363,-8.267567],[-5.477399,0.235805,7.421453],[-5.872533,-5.087108,0.701906],[0.056331,8.761034,-7.210471],[-0.171175,-5.212356,7.018584],[4.553677,9.140471,5.876315],[-3.098918,6.311705,-1.954747],[1.351828,1.555546,6.021350],[-4.099052,-1.054258,-6.655762],[-6.579751,-7.633391,-9.153744],[9.705067,-9.378962,4.319781],[-3.290520,8.587382,1.726195],[-3.073319,-8.329024,5.661439],[2.150534,-7.211337,7.129099],[-0.423178,-0.615813,-4.932199],[-6.372459,-1.792547,-9.088461],[-9.025073,-1.615979,-5.877026],[0.343487,-1.682185,-0.785302],[-8.270982,0.040047,-9.205389],[3.932274,6.091163,1.561076],[-1.854256,2.133437,-7.651651],[-7.267097,-6.782169,0.031256],[5.966315,1.782630,-3.564271],[7.655495,8.265455,-6.335657],[0.870262,4.655554,5.323802],[-3.775362,-5.394687,-7.794160],[-7.308731,-7.758341,9.167867],[9.931078,-8.514985,-2.927226],[9.030634,5.976110,3.819569],[-6.314386,-3.629262,6.199690],[-8.591727,5.508124,9.153525],[8.295765,6.049189,-3.215252],[0.633733,5.189647,-6.440795],[8.925905,7.086990,6.759672],[-5.838163,1.216165,5.773107],[-3.034547,-0.972329,-6.604244],[3.542382,4.679883,3.068370],[-8.311658,-9.699314,1.252977],[5.757679,-6.745447,2.949181],[2.945305,8.999831,-2.186842],[5.402269,-5.337121,9.587278],[5.705067,-9.958668,9.205752],[-1.724638,7.547595,3.403714],[-6.987933,3.994908,8.995462],[-1.870422,-4.602351,9.011157],[-0.520435,8.970327,-6.289987],[3.981912,0.541891,5.023233],[-6.718993,-9.002260,-9.991965],[-9.670696,6.036749,7.057196],[-6.625097,3.415144,3.791071],[-7.909139,-8.849447,-0.663834],[-2.417344,-4.382957,5.717686],[-3.902765,-4.863015,5.150445],[-7.381669,9.372737,9.943260],[-1.438198,-4.385234,-9.330147],[-0.269975,8.737539,-5.163454],[9.246194,8.620331,4.551501],[4.342645,-6.857733,-6.704063],[-6.864597,2.656139,-2.262829],[-3.135360,2.676879,0.930666],[-7.679159,-7.361032,-3.467980],[8.257479,5.518613,7.373961],[-0.265982,-2.633804,-5.198458],[-9.778551,9.998013,-6.164056],[9.620227,-8.145619,4.492765],[-5.152300,5.704440,7.832278],[-4.971493,5.502327,-1.245065],[-0.981279,-5.867382,0.844794],[2.257910,8.655876,-3.397842],[5.526140,9.579056,-8.048374],[1.539159,-0.337025,7.787714],[-3.684690,4.897972,6.973020],[-6.015330,-0.133079,-4.166592],[-2.953245,4.941504,-7.622698],[6.131970,9.767866,3.231050],[-1.557199,1.884989,3.172051],[-5.371718,-9.713085,6.601688],[1.709205,8.376051,-6.195518],[-3.278363,0.953443,6.725862],[0.962194,3.742852,7.307193],[-4.104460,5.898491,-7.573351],[-7.307799,-1.946000,-4.447760],[-3.145587,-5.595475,9.653691],[4.107923,7.531205,-4.963637],[-0.710276,0.764079,-7.005916],[-1.606731,-8.178635,-1.169905],[-7.316937,-6.579208,8.370084],[-2.789560,-0.366186,4.175255],[-2.209873,0.770798,-2.486609],[-2.843559,9.878327,-9.465083],[-0.287090,-1.232913,6.023330],[4.901073,3.421558,-9.480673],[6.814832,-3.275623,1.487974],[9.365582,-6.653372,5.274899],[-9.628586,9.819496,-9.947882],[-7.372959,-8.603076,0.651990],[1.413726,4.709172,-7.307061],[-6.721625,4.966673,-6.456333],[-8.550289,-0.680819,-5.011209],[2.618290,1.939981,4.383337],[9.005121,-1.506031,-1.857141],[0.170044,-1.897568,7.480550],[-6.128520,-4.937771,-6.318690],[4.690966,6.356751,-9.345911],[4.307938,-8.047740,-4.910119],[-7.597027,9.440277,-3.068871],[2.377263,-9.410158,-4.906153],[-3.351685,0.007330,-8.572680],[2.846969,-1.716575,1.733858],[1.809267,8.135666,0.633384],[5.749357,7.658238,-3.642695],[-8.338909,5.146784,-0.113070],[-4.282693,-9.126364,9.336369],[-9.151451,-7.238174,1.840541],[0.344224,7.824454,2.399691],[-3.210217,-9.906613,0.919441],[2.038383,-1.359116,-9.928839],[0.356079,-6.971349,-8.894536],[-6.232831,-9.209468,-2.987287],[9.725999,-0.316026,-7.848652],[9.605231,-6.948975,-2.057915],[4.112590,-9.575313,-6.759693],[-0.687681,8.809543,5.355642],[-0.368030,-4.771968,4.886127],[8.919551,-8.817082,1.690780],[0.006479,-9.835520,-8.428811],[8.509384,-2.079775,-9.408470],[3.218923,-0.539790,2.683430],[-6.264592,-6.813993,-7.700022],[9.653521,-9.533312,-8.221041],[-7.395634,-2.378496,0.867637],[8.871533,-0.947285,-9.895608],[-6.438347,7.695640,4.323352],[8.484009,4.873906,-2.396446],[0.795958,5.017767,-6.023636],[4.567930,9.479891,9.405983],[-6.069461,8.966609,-0.145415],[7.031569,3.892837,-2.075242],[1.274154,8.482330,8.476947],[5.305521,2.965366,-5.014437],[-5.988130,1.426365,8.146005],[-9.845125,4.834767,1.800315],[-0.580913,4.681808,7.688864],[-2.333500,7.086217,9.069394],[1.351825,1.645345,0.463714],[-4.019596,9.518009,6.510591],[-0.991164,-3.459887,-2.594076],[-1.620283,9.752778,-0.300958],[4.403590,0.499647,-8.000951],[0.111595,5.753977,7.993503],[-5.653421,-0.805445,1.104866],[-3.469758,-1.639464,6.981693],[-1.858257,2.652209,7.630117],[4.198562,-0.977501,4.584816],[8.824388,-3.837709,5.195908],[-9.594892,-8.266807,5.933022],[-9.854399,3.295635,5.314417],[4.114372,-9.559556,7.750449]], dtype = "float32")#candidate|12529|(175, 3)|const|float32
const_12530 = relay.const([-3,-8,4,-1,-1,-3,8,8,4,-9,-4,9,10,-8,-1,9,1,10,5,2,-4,-7,-9,-10,-4,9,7,10,5,2,-4,-10,6,4,-3,5,3,2,9,-8,3,1,-7,-7,-2,8,10,4,-10,-7,-5,10,6,-2,6,-8,-9,-8,3,-9,-4,10,9,-8,-2,-3,9,7,-5,-8,10,9,6,-6,-3,-1,-3,1,-7,-2,5,-6,-9,8,3,-5,6,4,3,1,6,3,5,3,4,-10,9,1,-10,-1,7,-8,2,-4,-4,1,7,9,-7,-5,-8,-7,-3,-4,-7,6,1,-8,-7,-7,7,1,1,7,2,8,7,6,6,-2,5,9,-3,-10,-9,-1,5,10,2,4,9,4,9,-5,2,-8,-7,-6,5,-1,2,-3,-4,3,-10,1,-8,7,-7,-10,2,-7,-8,1,8,2,-4,9,7,5,8,1,1,3,2,8,-3,3,9,-7,-6,10,-3,9,10,9,9,6,-8,9,-2,4,-3,9,2,10,-4,-9,9,8,3,-9,-7,-4,4,7,-10,1,9,-7,7,-9,6,-9,8,-4,5,3,8,9,1,-8,-6,-6,3,5,9,-1,4,1,5,2,1,-2,-5,3,-6,6,-1,6,-4,-4,-7,-1,4,4,9,1,-3,1,5,-3,4,-4,2,9,-3,2,-7,-2,4,2,1,-3,6,4,5,-4,-9,-6,-10,-8,9,4,10,8,-3,-7,-4,1,-2,3,4,-8,8,3,-8,-3,-10,2,-5,6,-1,-4,-3,6,2,5,-9,-9,7,-4,-3,-2,4,-3,-4,-8,-1,-9,7,-2,-5,7,9,8,5,9,-9,-1,4,-1,-2,-1,-1,-7,-6,-9,5,-2,1,-8,-1,4,-9,2,-8,2,-2,-3,3,-3,-9,9,-8,8,-10,6,3,-3,7,-6,10,5,2,7,7,6,2,-2,6,-10,6,10,-7,4,10,-1,7,-2,-5,4,-9,-10,6,3,-1,8,10,7,-5,-3,10,-5,1,5,6,-8,2,10,-9,9,8,7,9,7,-4,7,6,10,9,1,-9,-4,6,-10,-9,-7,8,4,8,1,2,6,10,-3,-3,6,-3,4,6,-4,-3,-9,5,-8,5,-4,7,-6,8,-10,4,-5,-8,-8,-3,9,-3,6,-4,-10,-6,-7,-8,2,2,9,7,7,-4,-2,-7,-2,-1,-8,-5,-5,7,-3,-7,-3,8,9,7,-3,-8,10,7,-8,2,-3,-6,-7,-10,-10,-5,8,-4,-1,10,3,-8,-5,-7,-3,-9,-6,-5,-10,3,-4,2,4,-8,6,-8,9,-4,-2,9,1,-2,-5,-2,-3,-4,5,-8,1,-3,-5,-9,-10,-1,5,-8,8,-5,-8,-7,-2,-8,8,-6,-4,-7,4,3,1,6,4,4,5,-2,-8,6,1,-9,-1,-7,7,-4,-9,3,-3,-8,3,8,5,5,-2,-7,6,-9,2,2,9,10,-4,-10,2,-7,-1,-4,-8,2,-9,-10,-3,-10,6,-6,-9,-5,-7,-4,-4,-5,6,1,-8,2,10,-10,3,-1,5,6,-2,-7,-5,-10,-1,-3,-4,-1,-9,-8,6,-3,-2,-10,2,9,6,-2,8,-1,7,-6,-10,3,-9,-8,1,-4,8,7,7,-3,-3,-5,9,10,1,8,2,-1,-2,-3,-10,3,-10,-7,8,1,7,2,3,-3,-9,-6,-2,-1,-5,5,-3,7,-1,-2,6,-10,-1,-8,-6,9,-4,8,3,8,4,-7,-4,-10,-9,-1,8,-8,4,3,9,-9,8,-6,-5,-1,10,7,2,-6,-2,6,8,8,9,6,-3,10,-10,-4,-5,-5,-5,-8,2,8,4,-5,-9,6,4,8,7,-1,-6,-4,-2,-7,-3,-1,-2,-2,-6,-9,-2,5,-9,5,2,-4,3,-1,-9,9,5,9,-3,-2,-8,4,-5,5,-3,-9,8,-3,-1,3,3,2,-4,-5,-1,-5,-7,-10,1,8,6,7,1,3,6,-10,10,9,2,-10,-1,4,8,-4,-9,-1,8,-9,1,8,9,-8,-1,-2,1,10,1,-3,7,-7,8,1,9,-4,1,-8,4,-9,3,2,7,7,3,6,7,-6,3,-2,5,-3,-2,9,4,-4,1,-2,-5,6,-1,10,6,-5,-3,-3,7,-5,6,-8,1,-9,8,-1,-10,-3,-9,-9,10,8,-4,-2,-9,-3,-2,-5,-3,-7,6,3,7,7,2,-3,-3,-6,1,2,-8,3,4,-4,4,7,1,8,-8,4,-4,-2,5,5,-9,-4,-10,4,-8,-2,-2,-4,10,1,-8,10,1,8,2,-1,-10,8,3,7,-2,4,9,7,2,7,-2,-2,9,-8,-5,3,-6,-7,-3,-10,3,-9,4,2,-5,-5,-6,-1,-9,5,7,-1,-7,2,5,6,-8,2,2,-9,1,-5,1,1,4,5,-3,6,9,3,2,3,4,-3,7,5,-5,4,-4,-7,-2,10,1,7,-6,3,10,7,1,-4,3,6,-8,6,-7,2,7,5,10,9,4,1,10,-2,1,7,5,-1,-6,-7,-2,-2,-1,-1,1,-4,-4,3,-6,-4,10,10,-7,-8,-10,5,2,-4,-4,-3,-5,-10,-5,-4,7,-5,-1,2,-7,-2,5,-10,-3,-9,9,2,10,-2,6,-3,4,-1,6,5,-4,-10,-4,-6,-7,4,9,-10,7,-4,-8,5,9,-8,-9,-6,-2,4,9,3,-8,-1,-2,-6,3,-1,8,-4,1,-2,7,-7,-6,-4,-2,-2,3,-9,-4,-3,6,-7,-9,-1,-3,5,3,-8,3,-4,9,7,-9,7,1,10,4,-2,-10,-7,8,-2,2,-9,-2,-1,-9,2,-5,3,9,-3,-5,-7,-10,8,8,8,-2,4,10,-4,4,-8,5,4,7,6,-2,4,9,1,-4,7,4,9,-9,-2,6,-9,-3,4,10,-9,5,6,9,-1,-6,6,-2,-3,-5,3,7,4,-6,-10,-10,-1,-4,9,6,-6,-10,4,7,-4,-4,-8,10,-1,-2,-5,1,5,6,-9,-4,5,-7,-8,6,-9,-3,-3,8,-1,6,1,3,3,10,10,-8,9,-5,2,-3,4,-5,-8,3,-3,5,-8,-2,6,6,-7,4,-4,5,10,6,-1,-3,5,-8,6,-4,2,9,9,5,-2,2,-5,3,-2,-1,1,3,9,8,-7,-4,-10,6,-8,5,-1,7,1,-3,-8,-7,-8,7,-4,-7,-9,9,-3,9,9,5,-9,5,-2,-5,3,-1,4,8,-5,8,-5,-3,5,2,-8,-1,-9,6,-3,2,-5,-6,-3,5,-9,-1,-4,-3,-10,1,1,-4,-8,-2,3,8,-8,-5,1,8,4,4,-8,7,1,-4,9,5,-8,2,-2,9,7,3,-3,5,2,7,6,6,1,-4,-9,2,5,-1,4,-10,-2,-8,4,6,5,-4,7,-10,3,3,-4,-1,6,-7,2,3,8,10,-7,8,10,-2,-5,9,8,-9,-4,-1,-4,5,8,9,9,10,6,7,9,6,4,1,5,6,2,-10,-10,10,2,3,-1,-1,-10,-4,8,2,-3,-7,5,-8,3,-3,4,8,-7,1,-4,2,1,-5,-5,-2,-2,-7,-4,-3,-4,9,-4,-5,-10,6,9,9,5,8,1,-10,-10,-9,3,-3,-10,6,9,-4,10,-4,7,8,7,4,9,-2,-1,5,-3,-3,-9,9,-2,9,-3,2,6,4,7,3,1,5,6,-8,-8,-2,-9,9,3,5,10,-6,9,-10,-9,2,-8,-2,9,-3,-10,-8,-7,-4,2,6,9,8,3,4,-3,-2,7,7,-3,-5,-5,-5,9,-3,-9,2,-3,3,10,-6,6,-4,-1,1,1,-8,-8,-1,10,-7,-4,-6,3,1,-1,-6,6,-1,1,2,5,-10,-2,-1,6,-3,1,7,1,5,6,8,-3,8,1,8,9,1,1,-6,-2,-7,-10,-6,4,-4,5,2,-1,2,2,7,7,5,-2,5,1,8,8,-4,-7,1,-10,-10,7,2,1,1,9,-8,-8,-6,6,-10,-10,-7,3,-1,-2,6,2,-1,9,-4,9,-3,8,-3,5,-1,10,-4,-5,-7,-7,-8,-3,3,-10,-2,1,-5,-7,3,4,9,-9,10,-9,1,-10,-4,-8,6,-5,9,6,-5,4,6,-2,-5,-7,5,2,3,-6,6,5,-6,-2,6,-2,-2,-9,-6,1,-1,6,8,3,1,-8,7,-9,-6,9,9,-3,8,9,-2,-7,3,-9,1,-2,-5,-9,6,5,-1,3,8,2,9,-1,-2,-6,-2,-5,8,7,-8,6,-6,-7,7,-6,-10,-10,8,2,10,4,-2,6,6,5,-10,9,2,-3,-8,4,7,-6,7,-8,5,-10,-1,-9,8,1,3,-3,8,3,-7,3,-3,3,-7,9,-3,9,3,-10,-3,10,3,-2,1], dtype = "int32")#candidate|12530|(1680,)|const|int32
var_12531 = relay.var("var_12531", dtype = "uint8", shape = (1344,))#candidate|12531|(1344,)|var|uint8
call_12527 = relay.TupleGetItem(func_11404_call(relay.reshape(var_12528.astype('float32'), [90,]), relay.reshape(const_12529.astype('float32'), [525,]), relay.reshape(const_12530.astype('int32'), [1680,]), relay.reshape(var_12531.astype('uint8'), [2, 672]), ), 3)
call_12532 = relay.TupleGetItem(func_11409_call(relay.reshape(var_12528.astype('float32'), [90,]), relay.reshape(const_12529.astype('float32'), [525,]), relay.reshape(const_12530.astype('int32'), [1680,]), relay.reshape(var_12531.astype('uint8'), [2, 672]), ), 3)
output = relay.Tuple([call_12522,call_12524,const_12525,call_12527,var_12528,const_12529,const_12530,var_12531,])
output2 = relay.Tuple([call_12523,call_12526,const_12525,call_12532,var_12528,const_12529,const_12530,var_12531,])
func_12541 = relay.Function([var_12528,var_12531,], output)
mod['func_12541'] = func_12541
mod = relay.transform.InferType()(mod)
mutated_mod['func_12541'] = func_12541
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12541_call = mutated_mod.get_global_var('func_12541')
var_12543 = relay.var("var_12543", dtype = "float32", shape = (90,))#candidate|12543|(90,)|var|float32
var_12544 = relay.var("var_12544", dtype = "uint8", shape = (1344,))#candidate|12544|(1344,)|var|uint8
call_12542 = func_12541_call(var_12543,var_12544,)
output = call_12542
func_12545 = relay.Function([var_12543,var_12544,], output)
mutated_mod['func_12545'] = func_12545
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12163_call = mod.get_global_var('func_12163')
func_12164_call = mutated_mod.get_global_var('func_12164')
call_12661 = relay.TupleGetItem(func_12163_call(), 0)
call_12662 = relay.TupleGetItem(func_12164_call(), 0)
func_10381_call = mod.get_global_var('func_10381')
func_10383_call = mutated_mod.get_global_var('func_10383')
call_12663 = relay.TupleGetItem(func_10381_call(), 0)
call_12664 = relay.TupleGetItem(func_10383_call(), 0)
func_12163_call = mod.get_global_var('func_12163')
func_12164_call = mutated_mod.get_global_var('func_12164')
call_12668 = relay.TupleGetItem(func_12163_call(), 0)
call_12669 = relay.TupleGetItem(func_12164_call(), 0)
func_9487_call = mod.get_global_var('func_9487')
func_9489_call = mutated_mod.get_global_var('func_9489')
call_12671 = relay.TupleGetItem(func_9487_call(), 3)
call_12672 = relay.TupleGetItem(func_9489_call(), 3)
func_9009_call = mod.get_global_var('func_9009')
func_9011_call = mutated_mod.get_global_var('func_9011')
call_12673 = relay.TupleGetItem(func_9009_call(relay.reshape(call_12671.astype('float32'), [3, 12, 4])), 0)
call_12674 = relay.TupleGetItem(func_9011_call(relay.reshape(call_12671.astype('float32'), [3, 12, 4])), 0)
func_9665_call = mod.get_global_var('func_9665')
func_9666_call = mutated_mod.get_global_var('func_9666')
call_12696 = relay.TupleGetItem(func_9665_call(), 0)
call_12697 = relay.TupleGetItem(func_9666_call(), 0)
func_4380_call = mod.get_global_var('func_4380')
func_4387_call = mutated_mod.get_global_var('func_4387')
var_12701 = relay.var("var_12701", dtype = "float32", shape = (2688,))#candidate|12701|(2688,)|var|float32
var_12702 = relay.var("var_12702", dtype = "float32", shape = (1, 128))#candidate|12702|(1, 128)|var|float32
const_12703 = relay.const(-3, dtype = "uint64")#candidate|12703|()|const|uint64
const_12704 = relay.const([1,4,8,10,9,-10,-8,8,2,2,8,1,8,1,-6,-9,2,-6,-3,-2,6,1,-10,-2,8,-2,-7,-10,6,-6,2,9,1,6,4,8,2,7,-10,-8,2,-5,-2,-6,6,3,9,2,9,-6,10,4,5,5,2,-4,-3,7,-3,4,-7,9,-8,8,1,-2,-9,-2,-10,10,10,10,2,-9,-10,-6,3,-5,-6,-10,-8,-9,-9,-1,-10,4,-6,3,2,5,-8,-1,6,-2,10,1,-4,-6,3,-3,10,-3,2,6,-10,7,2,9,-5,-4,4,-4,-8,-3,-8,4,-6,6,-2,3,3,-2,-8,-7,-5,-10,6,7,-2,5,-7,-10,5,-10,-8,1,-10,8,-7,3,-4,10,6,-4,-6,-2,7,5,-8,10,-7,-9,5,7,2,3,4,6,1,-10,-6,-1,4,6,2,-10,-9,7,6,-8,-5,-2,4,-9,-7,-3,3,7,-3,-9], dtype = "uint64")#candidate|12704|(180,)|const|uint64
const_12705 = relay.const([3,-8,3,-4,10,-2,8,-2,5,8,-4,4,-10,4,-2,-10,4,5,2,8,9,-8,-10,-6,2,2,6,-7,5,-8,8,-3,-6,10,10,-3,2,7,-4,6,8,-9,-8,-3,-8,1,8,8,4,5,-6,4,10,9,-6,-7,4,1,2,4,-8,8,1,-2,-4,1,-5,-9,8,-6,-2,9,1,-8,7,-5,-9,10,10,6,-1,5,2,9,-1,-4,-10,-1,-4,-3,2,-5,4,-2,-9,8,5,-6,-7,-7,-3,-3,2,3,-2,-7,6,-5,9,-5,-6,-8,6,6,-2,2,-3,-8,9,-3,10,7,-3,-8,-2,1,-6,6,5,-5,-6,4,-4,-8,-6,5,-2,5,5,-8,-6,2,7,6,-4,1,-10,1,9,-8,-2,-2,5,10,9,-6,4,-9,-8,5,7,-1,-10,2,4,4,-5,8,4,-10,5,-1,4,2,-4,3,2,10,-8,3,4,-6,8,9,-4,-6,-2,10,7,-9,8,4,-10,3,-7,-10,8,10,-3,-7,-5,-6,7,7,9,-5,-2,6,-3,9,-9,-1,-8,2,-1,8,9,-4,-3,10,-9,-8,4,-2,-5,9,2,3,-2,-1,2,-10,7,-9,7,10,-6,6,2,-9,8,5,9,-2,-10,3,-4,7,6,-2,5,10,2,-3,3,5,9,3,-7,8,-10,1,5,7,-6,-6,-5,-4,2,5,-9,-9,10,6,-1,-5,9,-4,8,6,4,-4,-10,-8,-8,-10,-3,5,4,-1,10,-5,5,-1,-3,-6,-3,-6,1,-5,-6,5,-5,3,6,2,3,2,7,3,-4,-8,9,10,-7,10,2,-1,6,6,-9,5,-8,-9,4,-8,1,7,-8,-2,4,8,-5,-4,-2,-4,-1,-4,8,5,-5,2,8,6,6,1,-1,-7,10,9,4,-5,-2,5,2,4,2,3,-7,6,-8,5,-7,-8,-6,9,10,-4,-2,-6,6,2,-8,-9,-6,8,3,-5,-6,9,10,1,-3,6,-1,-10,2,8,-8,7,-2,-8,-8,7,-6,7,4,7,2,-3,-6,1,-6,2,-4,8,3,2,8,5,-4,1,-10,-3,4,5,-10,1,-5,-10,1,-6,-5,-6,-8,9,3,7,-8,8,-8,-1,-1,-4,5,-7,3,1,-2,3,5,-1,1,6,10,-1,-8,9,-7,6,-9,8,-6,2,-3,-7,6,-1,-6,6,10,8,-2,-7,-2,-10,-6,4,5,-10,-8,9,5,-1,-6,10,-6,5,-5,-6,-7,-9,3,3,-7,8,-7,1,8,4,-1,-1,-3,5,-3,7,7,1,9,-10,6,-4,-5,-7,-7,9,5,6,-10,-10,-4,-1,4,1,-7,-10,10,-5,8,-10,-5,4,-8,-10,5,-1,6,10,-5,3,-3,-4,6,-8,3,9,6,8,8,-4,9,-10,9,-4,4,-10,-2,-9,-6,-3,6,9,-7,-8,6,-6,9,-9,-9,-7,-4,-9,1,-5,7,-10,-9,-7,-7,-3,-8,9,8,-8,-2,-9,1,-3,6,-1,-5,7,9,2,10,-10,-4,-8,6,-9,-2,-7,4,7,-5,4,1,-3,7,10,-1,-8,9,7,-3,-8,-3,-9,-2,-9,-9,6,-6,4,-4,-3,-5,10,-8,-1,-3,7,1,-3,6,-1,-6,-5,-8,8,-3,9,-3,-2,-7,-3,4,-6,-7,10,-2,-8,-10,1,-4,-9,9,5,-8,2,-3,-4,4,-2,1,-4,-4,3,5,-9,-10,-6,-8,-2,1,2,8,1,-7,5,-8,3,1,-4,-8,7,-3,1,-5,8,7,-2,-5,9,9,-2,-2,6,10,2,-3,8,-2,-9,-1,5,-6,-3,3,3,-5,-6,9,-10,2,-7,-1,-4,5,1,8,-4,-4,-5,8,-8,4,-9,6,4,-3,6,7,6,3,7,-5,6,-9,-6,-3,-1,-10,4,2,-5,-8,-9,-3,4,-4,7,-4,-9,-8,-10,-1,9,-1,-7,-10,10,-7,10,5,6,-9,-9,8,5,-4,8,-8,-7,2,4,10,10,4,-9,-8,-8,-10,9,4,-5,-3,-6,-1,-1,-10,-7,-10,8,-10,3,-2,4,-8,9,1,2,8,-4,-4,-6,-2,5,-1,-4,-9,-1,-7,-4,-10,-7,-8,4,1,-5,-2,7,5,6,4,8,-6,-6,-6,8,-3,8,7,7,9,-1,4,-7,-2,4,-2,3,1,-2,10,-4,6,6,3,1,7,5,2,10,-2,1,-7,3,-4,5,-5,-8,-1,4,8,-6,-9,-6,-2,8,1,9,6,7,4,-5,-1,2,9,-5,-3,-4,1,-5,8,-6,-5,-8,6,-10,-7,1,-9,-1,-9,7,-7,-6,3,-3,7,10,4,-10,3,-1,6,-10,5,3,-8,-7,3,5,-9,7,-8,7,-6,2,-8,10,7,8,9,-7,2,-4,-9,1,9,-1,6,1,-6,1,-8,-9,1,8,-9,-9,-8,7,3,-3,-7,-1,4,-5,7,-8,5,1,-5,7,3,-8,-10,8,5,8,-8,5,1,6,-3,2,-2,-5,-1,4,8,-4,-6,-2,4,3,8,-5,9,6,6,2,-8,-8,1,2,-1,-10,9,-10,-1,-4,-4,-8,2,4,2,7,-5,1,-6,-7,-9,6,6,-2,10,8,7,-6,1,-9,4,-3,3,-4,8,8,6,-7,1,-3,-5,6,8,3,9,-2,-9,3,2,-9,-9,-8,-2,-1,-4,5,-7,3,10,-5,-9,-4,-6,8,-6,-6,5,-4,-9,-9,9,-4,2,2,-5,-5,-5,-3,-7,9,-10,-10,9,2,-9,2,-5,-6,4,-1,6,3,6,-4,-7,-8,-6,-1,-2,-4,4,-3,-2,5,9,-5,3,-8,-4,-2,3,-7,8,-7,-1,-5,7,-5,7,5,8,-2,-9,-8,3,5,1,7,2,-2,-5,9,5,2,-3,-1,-8,2,3,10,3,4,-1,-3,-6,-5,6,-4,-9,-4,-3,7,-7,-9,-8,-10,6,5,6,-10,7,-3,3,-3,-6,-9,1,10,-3,-2,-10,4,-6,-3,8,-5,1,5,7,-6,-4,-2,1,7,-3,-6,1,10,8,-2,-9,1,-4,3,4,-4,6,-7,10,-10,-3,9,-6,-5,-2,-3,1,2,2,-9,-7,-7,9,-8,8,-5,2,-6,10,-5,6,7,1,5,5,10,-6,-2,10,5,8,8,-3,10,-4,10,-2,9,4,-5,-9,8,-1,-2,2,9,-9,-2,1,-10,9,-5,6,-4,-10,-9,3,4,-2,7,6,-4,4,1,-1,2,-10,-3,-3,-7,6,-1,7,-5,4,3,-1,-8,4,-2,-8,-7,1,7,4,6,1,-9,3,-7,7,10,8,2,-5,9,9,4,-5,-4,4,-9,5,5,-3,6,4,-7,-4,-4,-3,2,8,-2,6,2,-5,-5,2,-10,-4,-4,-4,1,-1,-5,-2,8,5,-5,-7,-3,9,-3,-9,5,-9,4,-3,1,1,-10,-5,5,2,2,-6,-4,-2,7,9,-5,-2,-4,-5,8,-3,1,1,-9,-3,-4,6,7,4,9,5,-4,4,-3,-4,-5,1,4,-1,5,-4,4,-7,-7,-4,-2,2,-5,5,5,10,8,-7,3,7,-3,-9,2,7,-4,-8,9,6,8,3,3,-7,-5,3,-2,10,-3,2,4,5,-2,8,-4,-7,-6,-10,-4,-9,-1,10,3,1,-8,1,6,-4,10,-10,-4,9,-9,-10,5,-3,2,-4,-3,2,1,7,-9,6,1,-4,-4,9,-1,8,8,4,7,4,-4,5,-10,-3,-1,10,6,1,6,-5,6,-5,-7,4,-7,-5,-7,-6,-1,9,7,-6,-3,5,6,8,-5,6,-2,-5,-1,1,1,6,-4,5,-4,4,-9,-9,-1,7,-10,8,-5,2,-5,5,-10,-7,-10,8,3,-1,3,7,7,-9,-9,10,2,-2,-4,-3,2,1,-2,5,-10,-10,-6,-6,1,9,-2,3,-2,-1,4,1,5,9,10,5,-10,-5,-1,9,-6,-1,-9,10,-1,-8,-4,2,-2,7,3,-5,8,-9,-1,-1,9,5,6,1,-8,-2,-9,-4,-7,4,4,3,9,2,-2,-7,5,-1,9,10,-1,2,1,3,-8,8,-8,5,-4,-7,2,-9,8,-9,4,-8,6,-6,-7,-2,8,8,-10,-3,-2,3,8,2,-4,5,-2,2,3,2,-9,-5,-4,-4,8,9,2,5,-3,-4,-9,4,1,9,6,-4,-8,3,-5,-6,-6,4,-6,6,7,-4,-10,-6,-4,7,-8,6,-3,8,6,1,-7,-10,6,-2,-7,-9,-7,-1,2,3,-10,-6,6,9,7,3,-6,9,-10,-5,7,5,-1,-7,6,-2,6,9,5,-5,-9,8,-3,7,8,-10,8,-1,4,1,-5,-6,5,5,5,-2,-8,2,-5,-5,-3,-10,-2,1,6,-8,6,-3,1], dtype = "int32")#candidate|12705|(1680,)|const|int32
const_12706 = relay.const([-8,3,-3,-7,3,3,-9,-8,-1,-9,-10,-1,-10,7,4,10,-3,10,-7,4,1,6,10,10,-3,-10,5,9,-6,9,-8,-4,1,7,-2,-7,-10,-2,-9,2,3,-4,1,-4,-4,9,-1,3,6,9,10,-1,-1,1,-7,-1,-4,9,-10,4,-5,6,-5,-9,8,1,5,8,-6,3,3,4,-1,-3,-5,7,-10,-7,1,-8,-3,6,-2,4,-7,-1,-3,6,-7,6,-5,-3,5,2,5,4,-10,6,9,7,-8,-4,3,-4,-8,4,1,-8,7,-4,-9,-10,3,10,5,5,6,-4,-1,1,9,5,-5,8,-5,4,-3,5,-10,5,4,1,-3,-1,5,6,-9,4,7,8,4,-8,-6,-2,-9,4,-1,5,9,-8,8,-8,8,5,-4,7,-2,-7,-1,-5,-8,-6,-3,10,-7,-6,-4,-5,6,8,-10,-10,-2,-3,5,-5], dtype = "int8")#candidate|12706|(176,)|const|int8
call_12700 = relay.TupleGetItem(func_4380_call(relay.reshape(var_12701.astype('float32'), [14, 16, 12]), relay.reshape(var_12702.astype('float32'), [4, 32]), relay.reshape(const_12703.astype('uint64'), []), relay.reshape(const_12704.astype('uint64'), [180,]), relay.reshape(const_12705.astype('int32'), [1680,]), relay.reshape(const_12706.astype('int8'), [176,]), ), 6)
call_12707 = relay.TupleGetItem(func_4387_call(relay.reshape(var_12701.astype('float32'), [14, 16, 12]), relay.reshape(var_12702.astype('float32'), [4, 32]), relay.reshape(const_12703.astype('uint64'), []), relay.reshape(const_12704.astype('uint64'), [180,]), relay.reshape(const_12705.astype('int32'), [1680,]), relay.reshape(const_12706.astype('int8'), [176,]), ), 6)
func_11420_call = mod.get_global_var('func_11420')
func_11422_call = mutated_mod.get_global_var('func_11422')
const_12718 = relay.const([-2.420123,2.117591,1.486715,7.121176,9.359394,-5.641419,0.292883,-3.564304,-5.820224,-7.416169,-9.228817,4.416032,-7.165703,-5.653358,-8.548482,-4.985356,-2.617125,4.036674,6.297771,3.337090,-3.156830,-3.662822,5.683400,-4.430256,-9.037730,6.745948,3.599823,-3.923169,-7.888775,3.818351,-5.623934,-2.423593,-8.933116,-2.961132,-8.957727,-2.066866,3.982519,2.718165,5.859413,-5.355502,-3.993342,-0.647779,2.681854,6.460448,-0.056225,-8.826643,-1.169982,6.975280,-6.130168,-5.512838,3.546700,7.575728,-5.199097,2.074219,6.172745,1.696560,3.540802,7.056907,-1.735948,-8.859106,-1.329931,0.951028,6.926536,1.870087,-1.644387,3.344694,-0.973116,-2.711057,4.758957,-8.781953,-1.693028,-3.037161,-5.608065,-6.323779,-9.372798,1.651281,3.737180,0.482023,5.620877,-8.916100,7.941555,7.915568,5.727871,-7.474201,2.306243,0.775089,-2.578583,9.082473,2.089574,-8.020275,-6.652735,-5.248483,-8.159684,0.801787,-0.183434,-6.509168,5.203188,4.935073,6.803013,0.986113,5.613776,-2.785703,-3.717034,-2.289596,8.165346,0.278559,-0.031422,0.674871,0.944468,-2.780708,9.126572,2.994473,-5.158652,7.682020,-9.729890,-8.075013,2.093339,-2.323777,-0.116297,2.659139,2.716306,9.745881,0.715339,-0.003886,1.465025,-1.137317,5.711319,0.615852,3.388925,-0.908627,1.084445,4.937155,9.936449,-6.502256,-1.245194,-5.780169,-4.870540,4.022775,-3.542299,7.276800,-5.585954,-0.850930,3.340727,5.225497,-5.982238,7.698962,-7.061073,-4.011440,-9.846172,3.680771,7.774501,-8.928462,1.344480,5.644556,1.185412,-9.102731,-3.977453,-4.254728,-1.586757,-2.540136,3.086478,9.821115,-9.189615,9.555367,-7.780063,2.123842,-3.452789,-7.862417,6.011746,-0.490221,-1.912231,-7.343342,1.007673,-4.135442,-6.686641,4.510744,-5.470932,0.154586,-2.196059,9.880278,0.603875,-7.965058,-0.573532,-8.213071,-8.450184,9.585636,9.718237,-0.978730,-5.923810,-0.905644,5.997489,-8.499775,-2.394526,9.609066,-3.215541,-8.514107,8.211143,-0.379615,3.801521,-4.313238], dtype = "float64")#candidate|12718|(200,)|const|float64
call_12717 = func_11420_call(relay.reshape(const_12718.astype('float64'), [5, 8, 5]))
call_12719 = func_11420_call(relay.reshape(const_12718.astype('float64'), [5, 8, 5]))
uop_12727 = relay.log(var_12701.astype('float32')) # shape=(2688,)
output = relay.Tuple([call_12661,call_12663,call_12668,call_12671,call_12673,call_12696,call_12700,var_12702,const_12703,const_12704,const_12705,const_12706,call_12717,const_12718,uop_12727,])
output2 = relay.Tuple([call_12662,call_12664,call_12669,call_12672,call_12674,call_12697,call_12707,var_12702,const_12703,const_12704,const_12705,const_12706,call_12719,const_12718,uop_12727,])
func_12732 = relay.Function([var_12701,var_12702,], output)
mod['func_12732'] = func_12732
mod = relay.transform.InferType()(mod)
mutated_mod['func_12732'] = func_12732
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12732_call = mutated_mod.get_global_var('func_12732')
var_12734 = relay.var("var_12734", dtype = "float32", shape = (2688,))#candidate|12734|(2688,)|var|float32
var_12735 = relay.var("var_12735", dtype = "float32", shape = (1, 128))#candidate|12735|(1, 128)|var|float32
call_12733 = func_12732_call(var_12734,var_12735,)
output = call_12733
func_12736 = relay.Function([var_12734,var_12735,], output)
mutated_mod['func_12736'] = func_12736
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9641_call = mod.get_global_var('func_9641')
func_9642_call = mutated_mod.get_global_var('func_9642')
call_12787 = func_9641_call()
call_12788 = func_9641_call()
output = relay.Tuple([call_12787,])
output2 = relay.Tuple([call_12788,])
func_12805 = relay.Function([], output)
mod['func_12805'] = func_12805
mod = relay.transform.InferType()(mod)
mutated_mod['func_12805'] = func_12805
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12805_call = mutated_mod.get_global_var('func_12805')
call_12806 = func_12805_call()
output = call_12806
func_12807 = relay.Function([], output)
mutated_mod['func_12807'] = func_12807
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12805_call = mod.get_global_var('func_12805')
func_12807_call = mutated_mod.get_global_var('func_12807')
call_12855 = relay.TupleGetItem(func_12805_call(), 0)
call_12856 = relay.TupleGetItem(func_12807_call(), 0)
output = relay.Tuple([call_12855,])
output2 = relay.Tuple([call_12856,])
func_12865 = relay.Function([], output)
mod['func_12865'] = func_12865
mod = relay.transform.InferType()(mod)
output = func_12865()
func_12866 = relay.Function([], output)
mutated_mod['func_12866'] = func_12866
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12297_call = mod.get_global_var('func_12297')
func_12299_call = mutated_mod.get_global_var('func_12299')
call_12867 = func_12297_call()
call_12868 = func_12297_call()
uop_12873 = relay.tan(call_12867.astype('float32')) # shape=(3, 12, 4)
uop_12875 = relay.tan(call_12868.astype('float32')) # shape=(3, 12, 4)
func_9641_call = mod.get_global_var('func_9641')
func_9642_call = mutated_mod.get_global_var('func_9642')
call_12876 = func_9641_call()
call_12877 = func_9641_call()
output = relay.Tuple([uop_12873,call_12876,])
output2 = relay.Tuple([uop_12875,call_12877,])
func_12895 = relay.Function([], output)
mod['func_12895'] = func_12895
mod = relay.transform.InferType()(mod)
output = func_12895()
func_12896 = relay.Function([], output)
mutated_mod['func_12896'] = func_12896
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12297_call = mod.get_global_var('func_12297')
func_12299_call = mutated_mod.get_global_var('func_12299')
call_12921 = func_12297_call()
call_12922 = func_12297_call()
func_1279_call = mod.get_global_var('func_1279')
func_1282_call = mutated_mod.get_global_var('func_1282')
var_12939 = relay.var("var_12939", dtype = "float64", shape = (1716,))#candidate|12939|(1716,)|var|float64
call_12938 = relay.TupleGetItem(func_1279_call(relay.reshape(var_12939.astype('float64'), [12, 13, 11])), 1)
call_12940 = relay.TupleGetItem(func_1282_call(relay.reshape(var_12939.astype('float64'), [12, 13, 11])), 1)
output = relay.Tuple([call_12921,call_12938,var_12939,])
output2 = relay.Tuple([call_12922,call_12940,var_12939,])
func_12941 = relay.Function([var_12939,], output)
mod['func_12941'] = func_12941
mod = relay.transform.InferType()(mod)
mutated_mod['func_12941'] = func_12941
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12942 = relay.var("var_12942", dtype = "float64", shape = (1716,))#candidate|12942|(1716,)|var|float64
func_12941_call = mutated_mod.get_global_var('func_12941')
call_12943 = func_12941_call(var_12942)
output = call_12943
func_12944 = relay.Function([var_12942], output)
mutated_mod['func_12944'] = func_12944
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8556_call = mod.get_global_var('func_8556')
func_8557_call = mutated_mod.get_global_var('func_8557')
call_12954 = func_8556_call()
call_12955 = func_8556_call()
output = relay.Tuple([call_12954,])
output2 = relay.Tuple([call_12955,])
func_12971 = relay.Function([], output)
mod['func_12971'] = func_12971
mod = relay.transform.InferType()(mod)
mutated_mod['func_12971'] = func_12971
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12971_call = mutated_mod.get_global_var('func_12971')
call_12972 = func_12971_call()
output = call_12972
func_12973 = relay.Function([], output)
mutated_mod['func_12973'] = func_12973
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8701_call = mod.get_global_var('func_8701')
func_8703_call = mutated_mod.get_global_var('func_8703')
call_12977 = relay.TupleGetItem(func_8701_call(), 0)
call_12978 = relay.TupleGetItem(func_8703_call(), 0)
output = relay.Tuple([call_12977,])
output2 = relay.Tuple([call_12978,])
func_12981 = relay.Function([], output)
mod['func_12981'] = func_12981
mod = relay.transform.InferType()(mod)
output = func_12981()
func_12982 = relay.Function([], output)
mutated_mod['func_12982'] = func_12982
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12163_call = mod.get_global_var('func_12163')
func_12164_call = mutated_mod.get_global_var('func_12164')
call_13020 = relay.TupleGetItem(func_12163_call(), 0)
call_13021 = relay.TupleGetItem(func_12164_call(), 0)
func_9192_call = mod.get_global_var('func_9192')
func_9194_call = mutated_mod.get_global_var('func_9194')
call_13036 = func_9192_call()
call_13037 = func_9192_call()
output = relay.Tuple([call_13020,call_13036,])
output2 = relay.Tuple([call_13021,call_13037,])
func_13045 = relay.Function([], output)
mod['func_13045'] = func_13045
mod = relay.transform.InferType()(mod)
output = func_13045()
func_13046 = relay.Function([], output)
mutated_mod['func_13046'] = func_13046
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10292_call = mod.get_global_var('func_10292')
func_10293_call = mutated_mod.get_global_var('func_10293')
call_13053 = func_10292_call()
call_13054 = func_10292_call()
func_9878_call = mod.get_global_var('func_9878')
func_9882_call = mutated_mod.get_global_var('func_9882')
var_13057 = relay.var("var_13057", dtype = "float64", shape = (560,))#candidate|13057|(560,)|var|float64
call_13056 = relay.TupleGetItem(func_9878_call(relay.reshape(var_13057.astype('float64'), [4, 140]), relay.reshape(call_13053.astype('float32'), [144,]), ), 5)
call_13058 = relay.TupleGetItem(func_9882_call(relay.reshape(var_13057.astype('float64'), [4, 140]), relay.reshape(call_13053.astype('float32'), [144,]), ), 5)
output = relay.Tuple([call_13053,call_13056,var_13057,])
output2 = relay.Tuple([call_13054,call_13058,var_13057,])
func_13070 = relay.Function([var_13057,], output)
mod['func_13070'] = func_13070
mod = relay.transform.InferType()(mod)
var_13071 = relay.var("var_13071", dtype = "float64", shape = (560,))#candidate|13071|(560,)|var|float64
output = func_13070(var_13071)
func_13072 = relay.Function([var_13071], output)
mutated_mod['func_13072'] = func_13072
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12971_call = mod.get_global_var('func_12971')
func_12973_call = mutated_mod.get_global_var('func_12973')
call_13074 = relay.TupleGetItem(func_12971_call(), 0)
call_13075 = relay.TupleGetItem(func_12973_call(), 0)
output = call_13074
output2 = call_13075
func_13076 = relay.Function([], output)
mod['func_13076'] = func_13076
mod = relay.transform.InferType()(mod)
mutated_mod['func_13076'] = func_13076
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13076_call = mutated_mod.get_global_var('func_13076')
call_13077 = func_13076_call()
output = call_13077
func_13078 = relay.Function([], output)
mutated_mod['func_13078'] = func_13078
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9424_call = mod.get_global_var('func_9424')
func_9425_call = mutated_mod.get_global_var('func_9425')
call_13082 = relay.TupleGetItem(func_9424_call(), 3)
call_13083 = relay.TupleGetItem(func_9425_call(), 3)
func_10598_call = mod.get_global_var('func_10598')
func_10600_call = mutated_mod.get_global_var('func_10600')
call_13086 = relay.TupleGetItem(func_10598_call(), 0)
call_13087 = relay.TupleGetItem(func_10600_call(), 0)
output = relay.Tuple([call_13082,call_13086,])
output2 = relay.Tuple([call_13083,call_13087,])
func_13093 = relay.Function([], output)
mod['func_13093'] = func_13093
mod = relay.transform.InferType()(mod)
output = func_13093()
func_13094 = relay.Function([], output)
mutated_mod['func_13094'] = func_13094
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12072_call = mod.get_global_var('func_12072')
func_12073_call = mutated_mod.get_global_var('func_12073')
call_13207 = relay.TupleGetItem(func_12072_call(), 1)
call_13208 = relay.TupleGetItem(func_12073_call(), 1)
func_9641_call = mod.get_global_var('func_9641')
func_9642_call = mutated_mod.get_global_var('func_9642')
call_13209 = func_9641_call()
call_13210 = func_9641_call()
func_9385_call = mod.get_global_var('func_9385')
func_9389_call = mutated_mod.get_global_var('func_9389')
const_13212 = relay.const([[-0.971195,6.320253,-5.782125,4.714543,4.240700,-8.578501,8.758362,-3.676569,9.732896,-9.081658,-9.246507,-3.549295,-0.076930,-0.354246,2.816295,1.806607,3.494176,2.833792,-1.952489,0.489443,7.049522,-9.343214,-0.982612,-7.355839,3.216507,-9.166869,4.105726,0.770867,-7.946298,9.302173,4.646654,2.080302,7.778140,-9.285627,3.950138,-7.976653,7.823392,5.299775,4.142810,-3.405291,1.156667,3.797349,2.963960,-0.807382,-2.349719,2.858903,0.925580,0.189613,8.152366,-6.915582,0.066821,8.670391,0.740780,-9.050593,-4.768087,-8.796504,3.598736,-8.621556,-5.085361,9.126422,-8.209247,-9.347836,2.275192,2.116844,-1.708036,-6.391330,-9.076293,-9.664391,-6.391335,-1.054842,8.514122,-4.029482,-1.080429,5.276257,-9.786668,-4.017020,2.617016,-7.580954,-4.654085,3.866906,0.777537,-8.857998,4.993260,1.157981,2.586442,-0.231933,-4.659694,-4.809977,-3.970861,-3.146948,-0.234062,8.618589,0.040663,-3.936527,0.885833,-3.642138,4.065622,-1.954329,-0.256185,5.618614,-7.352395,-0.922299,-1.661402,1.286383,2.271338,6.494390,-1.459600,3.188904,-8.031425,2.315081,-4.059567,-9.500966,-9.472875,-0.780288,7.637188,6.241704,-6.426780,-3.098034,-0.582849,1.534202,2.396936,3.647975,5.705965,-6.512183,-0.377237,-3.709951,0.934957,6.277936,5.193931,-5.844181,8.743487,-9.168162,-2.553951,-5.467711,1.927145,-5.547332,6.687907,-8.190912,-1.805523,-9.280304,3.339476,2.715892,-1.412720,-0.303468,4.650214,-0.705235,-7.404447,-2.507043,1.160496,6.748818,-4.678263,-0.566363,0.538951,-0.205767,1.134960,3.982612,4.214243,4.482165,1.860129,-4.982657,8.760170,6.226521,5.696819,-5.077099,-0.951332,7.262573,0.328784,-7.345720,0.977118,-6.209696,-6.015064,9.211681,0.285104,8.949700,-1.473000,8.625239,-7.616442,-8.063573,-8.612239,-9.133664,-8.169328,0.088022,0.930186,5.639225,-7.018296,1.097231,2.054954,3.213834,-8.784598,3.668694,-8.436410,-2.441656,9.123061,-0.798688,8.431139,-1.948725,4.488270,1.057482,-6.780054,0.655110,-2.467116,7.383192,0.383649,-9.082862,9.959363,-8.191392,-6.874022,-3.442838,0.665534,2.940732,9.630344,2.430062,9.950850,-7.263318,2.718223,6.982662,-2.738965,5.016070,4.243311,7.017712,6.112244,-5.578376,-0.836213,0.997919,9.091880,-8.993558,-7.137855,6.373452,-8.252962,4.051266,1.818135,-3.859269,8.509939,2.110945,7.322869,6.996858,5.775318,8.905403,-8.135444,9.817560,8.631021,0.575386,5.852559,-8.623780,-7.576294,2.131561,-9.740259,6.184157,3.819538,-5.514454,-2.385577,3.774187,3.759115,0.639984,9.874626,7.601070,7.970668,3.357893,-6.361330,-4.235974,4.567157,-9.130839,7.411910,-3.795822,2.589063,-7.457061,-7.698343,7.183864,-6.617206,-6.651335,9.187586,-3.190005,-3.867967,-3.811116,6.358327,7.980254,-1.847204,-1.488699,0.600168,3.318331,6.663240,-7.378406,0.961731,6.272920,4.366814,-3.005544,-6.144201,2.235358,-9.446379,7.673298,-2.181046,-2.865461,-9.856358,0.896269,0.434959,-1.097942,-3.500471,1.146727,-8.721656,5.831472,-5.262309,1.673871,-0.984974,2.339673,-1.561393,8.915405,9.120254,8.873128,-9.433033,8.787026,6.408247,6.397245,4.187848,-6.080024,7.321807,1.091245,0.995568,-7.973269,8.007687,-4.565647,-0.608876,-2.712919,4.568665,-0.461880,-0.446163,-1.700041,2.127974,1.057105,-6.697414,6.247485,8.979586,0.957793,4.364518,5.258583,9.377034,-3.123181,7.394864,1.999413,-1.545749,-4.238513,0.388105,9.288986,-9.334598,3.097686,-1.275023,4.625200,4.475834,-0.909457,-4.850085,4.430049,6.880783,-1.324207,3.219717,5.924420,7.321864,-7.912435,-2.184278,7.837169,3.292988,4.655469,2.399529,8.038869,5.611269,4.542723,1.256695,0.103892,-2.671676,6.288977,3.007958,-4.000936,0.216854,-2.687012,-8.549799,-6.977597,-2.860891,4.882853,-8.071606,4.482776,-0.252217,-2.268583,8.985670,-7.719365,7.170199,5.567892,-9.682433,6.049928,9.270483,-6.674497,1.956987,5.745898,-2.785646,-5.850777,4.882244,8.918831,-5.371779,-8.780233,3.857094,-4.712875,-3.754592,-2.346585,5.661172,-8.918998,1.078588,-5.093767,-7.784829,-4.353011,-5.406871,7.610340,-0.724883,3.075829,-6.405660,5.628385,-5.605943,-8.912459,3.548894,0.946110,-3.778809,6.501596,-8.959024,2.078534,2.712473,-9.693681,-3.190503,-2.819488,-2.097036,3.341663,7.285136,-2.342348,-9.905958,-9.482195,0.948544,-0.618677,-4.171714,3.806715,0.041610,3.699594,0.794855,-3.509648,5.803223,-7.034575,-0.773834,6.545278,-9.553890,8.280968,-4.371619,6.620618,-5.323082,-1.323618,1.256056,4.557288,-7.100070,-0.319097,-0.291324,3.798088,8.693715,0.199083,3.039182,6.448534,4.689594,6.115861,-8.001166,3.253420,-9.087339,0.194164,-9.038180,2.961982,2.737289,-8.156830,-7.085199,-2.125498,2.782494,-7.312619,-8.840632,0.616212,-8.628687,4.481325,7.112724,7.407237,-3.925349,5.501365,-1.463207,4.273766,-4.943802,9.214391,1.186573,-4.508611,-0.585866,-0.282235,-3.685205,-8.573571,-8.899937,-4.732652,-4.045277,5.596748,-2.856710,6.906620,8.328346,1.259348,-4.454849,9.525417,-2.185820,6.420590,-8.558558,5.517494,1.582862,5.037149,4.298858,1.393993,-3.273064,1.785981,8.651972,7.028351,9.896322,5.010281,0.770837,-9.108668,-4.660251,-9.017584,0.612981,-3.884125,3.462384,-7.604051,7.441645,1.004750,-8.732861,-4.396378,9.026093,4.645410,-8.896493,5.150249,2.681983,3.638686,8.342404,-5.889647,2.454828,7.425019,-1.600189,-8.774572,8.458035,4.135903,-5.634769,3.647536,9.390696,-5.727385,5.242246,-6.095258,1.637135,4.733500,2.953319,5.250872,-9.057959,-5.349156,-6.533192,-8.472098,-5.876177,-2.175549,0.410210,-4.821137,-8.284914,2.569228,-1.147258,-0.314998,5.240450,-8.216123,1.173949,-1.191784,-7.534046,-1.010157,6.329295,-5.234203,1.530518,-9.259475]], dtype = "float64")#candidate|13212|(1, 572)|const|float64
const_13213 = relay.const([2.229584,2.214168,-3.216218,-0.890884,3.997872,9.910614,-8.313895,-7.323312,-9.403852,-4.897273,9.203185,5.051044,1.599387,-9.185989,-1.996009,-6.524152,-6.024937,-2.903215,1.413324,-5.052710,6.948729,9.357334,1.344246,4.380380,-2.276091,1.450983,-9.461684,-5.136733,-3.064430,-1.917959,1.407758,6.758913,2.005294,-1.198341,-1.789984,8.278861,-9.224863,9.320586,3.381104,1.218745,-1.450064,9.926324,0.521383,-1.502017,-7.605943,3.821678,0.706217,5.639157,-4.527233,6.706438,0.003233,-2.539132,0.248755,7.522279,-2.533586,8.513795,-8.865232,-4.107600,-3.274018,5.917096,3.909988,-7.964270,3.007765,1.568392,-8.309772,-3.734004,-4.772754,1.453007,0.390916,-5.975819,-1.909407,-2.351469,-1.972349,-0.408953,-9.975264,-6.299648,-5.121194,-2.185499,-6.043501,9.744625,9.598503,-4.392764,8.921528,8.476059,5.854087,-8.548979,9.469499,-2.897450,2.543295,5.555291,-1.420424,-3.162315,-1.404269,7.100737,-6.274367,0.812359,-0.978178,6.018262,-5.441188,-4.067951,-5.387223,8.251809,-9.323178,-2.593734,-6.944446,5.126696,5.703554,-7.488124,-5.901177,-3.407513,-2.489502,-8.256766,-0.730549,-7.274175,5.141562,-4.100050,-9.505233,7.463396,3.125412,-6.568216,4.018110,-8.429091,9.056701,5.055101,-2.183763,4.328327,3.453871,-6.249472,4.582890,-4.165624,3.531877,6.750596,-0.539774,-3.255438,-8.856717,-6.003243,-4.330107,-5.262639,7.669021,-9.222744,0.035470,-9.821928,7.247678,-6.372406,-4.004283,9.300267,3.605645,6.332363,-1.860840,7.140102,-2.656651,-2.471457,4.216870,5.612806,-9.130018,-2.083483,6.762724,8.080608,6.024905,0.674563,-2.301517,-4.966848,7.816315,-5.828173,5.603968,-5.154784,9.275436,5.088207,4.097358,5.427853,-3.757714,-8.632675,-4.775516,-4.323879,4.234126,1.210370,2.157526,-4.781291,5.210895,-5.872921,-5.581172,3.503301,0.527057,-6.177834,6.908947,5.300749,-9.963264,1.508939,4.101484,-5.451591,3.680124,-8.244514,7.668577,-8.976746,4.628354,-4.961583,7.445139,5.243146,-5.382517,-6.376654,6.168268,8.734199,6.433188,8.345589,-2.354749,3.624803,9.398076,-0.525975,-8.387669,-3.376440,8.784936,-3.612180,-2.568508,-7.348066,8.780849,-5.728760,-9.020926,-9.202736,-2.673730,-6.017419,-2.908632,-1.902974,9.919920,-1.951015,9.532261,-3.128153,3.165786,-7.183068,-2.519488,-3.388100,6.043961,9.355017,-9.746789,5.442755,7.380515,-4.920579,8.163746,6.110326,8.274852,8.686775,-2.889825,-0.289387,-4.071621,5.182186,1.750604,-8.930843,-2.420419,-7.508924,-5.296069,6.963057,2.320517,0.533521,9.471360,5.671665,-1.833195,8.092728,-1.619492,5.904271,-9.786906,-4.954997,-8.427915,-8.580888,-1.530587,-8.707526,-6.897460,-3.701334,4.086535,5.928533,-8.915311,9.129824,3.399925,-5.461902,-1.014495,-8.451123,-8.300872,-5.141072,2.863542,-3.770336,5.830480,-6.796442,-9.790655,2.868806,-9.651516,-7.451279,-8.339726,-3.562832,6.511149,7.364384,-1.141686,-0.034840,-9.405236,6.641240,-9.059792,2.801850,-8.533411,5.671546,-2.394404,-3.821904,5.170321,-5.059312,4.519688,7.422061,2.373191,-3.525770,-5.268158,-9.757227,-5.231712,4.939429,1.509251,-8.563737,-5.508133,8.374004,8.934239,-5.588285,-9.056779,-2.237001,4.219564,-7.960026,-9.781866,-6.505057,-0.773453,-6.394252,-8.665486,7.359141,-2.903301,-2.249970,7.603666,-0.212018,0.490233,-1.030782,2.972429,7.415472,-6.136620,2.796224,8.801640,-3.498513,-6.648486,-3.654799,-9.691491,1.681700,0.492126,4.012535,9.349546,9.511776,-6.749100,-8.034391,-1.185531,-1.642982,-3.455406,-2.063525,7.710380,3.323005,1.832694,8.200512,4.381197,-6.817328,-8.887203,6.273250,8.336340,-8.851876,-6.570187,5.031647,9.183307,-5.085976,6.019724,3.994503,1.306359,1.747323,-4.737775,-5.312675,3.853645,-9.502123,-1.508899,5.322527,7.575514,-2.166244,-0.145497,-9.828168,1.747661,9.142368,8.173467,-4.772786,1.272233,9.532222,-3.553943,3.758277,7.125430,9.712892,-9.298781,4.177663,-6.335391,1.614557,-5.215170,-4.711074,-2.924063,-9.461434,-2.365036,-8.813675,-0.861642,1.740829,9.079585,-1.648965,5.965654,3.485329,-3.739540,7.544166,-2.666184,-7.168772,-8.181520,-9.253136,-4.491580,2.602949,4.577406,2.697859,1.509269,-6.155143,2.075600,7.296673,-3.776663,-9.717901,-5.083103,-5.879728,3.760388,8.857956,4.915869,-8.538511,-8.413316,0.638565,-2.958544,-5.771319,9.273762,-7.598374,4.248038,5.358724,-5.071081,1.510982,5.859772,0.512954,-2.330829,0.326199,3.001823,5.294771,7.583071,7.366195,5.445653,9.066328,5.447730,-9.870372,-5.400115,-9.999063], dtype = "float32")#candidate|13213|(450,)|const|float32
call_13211 = relay.TupleGetItem(func_9385_call(relay.reshape(const_13212.astype('float64'), [11, 4, 13]), relay.reshape(const_13213.astype('float32'), [450,]), ), 1)
call_13214 = relay.TupleGetItem(func_9389_call(relay.reshape(const_13212.astype('float64'), [11, 4, 13]), relay.reshape(const_13213.astype('float32'), [450,]), ), 1)
var_13222 = relay.var("var_13222", dtype = "float64", shape = (12, 572))#candidate|13222|(12, 572)|var|float64
bop_13223 = relay.less(const_13212.astype('bool'), var_13222.astype('bool')) # shape=(12, 572)
bop_13227 = relay.equal(call_13211.astype('bool'), relay.reshape(const_13213.astype('bool'), relay.shape_of(call_13211))) # shape=(6, 15, 5)
bop_13230 = relay.equal(call_13214.astype('bool'), relay.reshape(const_13213.astype('bool'), relay.shape_of(call_13214))) # shape=(6, 15, 5)
bop_13234 = relay.floor_mod(const_13212.astype('float32'), var_13222.astype('float32')) # shape=(12, 572)
func_9147_call = mod.get_global_var('func_9147')
func_9148_call = mutated_mod.get_global_var('func_9148')
call_13260 = func_9147_call()
call_13261 = func_9147_call()
output = relay.Tuple([call_13207,call_13209,bop_13223,bop_13227,bop_13234,call_13260,])
output2 = relay.Tuple([call_13208,call_13210,bop_13223,bop_13230,bop_13234,call_13261,])
func_13264 = relay.Function([var_13222,], output)
mod['func_13264'] = func_13264
mod = relay.transform.InferType()(mod)
mutated_mod['func_13264'] = func_13264
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13265 = relay.var("var_13265", dtype = "float64", shape = (12, 572))#candidate|13265|(12, 572)|var|float64
func_13264_call = mutated_mod.get_global_var('func_13264')
call_13266 = func_13264_call(var_13265)
output = call_13266
func_13267 = relay.Function([var_13265], output)
mutated_mod['func_13267'] = func_13267
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9105_call = mod.get_global_var('func_9105')
func_9107_call = mutated_mod.get_global_var('func_9107')
call_13311 = relay.TupleGetItem(func_9105_call(), 2)
call_13312 = relay.TupleGetItem(func_9107_call(), 2)
output = call_13311
output2 = call_13312
func_13315 = relay.Function([], output)
mod['func_13315'] = func_13315
mod = relay.transform.InferType()(mod)
mutated_mod['func_13315'] = func_13315
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13315_call = mutated_mod.get_global_var('func_13315')
call_13316 = func_13315_call()
output = call_13316
func_13317 = relay.Function([], output)
mutated_mod['func_13317'] = func_13317
mutated_mod = relay.transform.InferType()(mutated_mod)
const_13352 = relay.const([[[3.018912,6.153150,-5.770895,-3.248216,-7.154316,-7.787313,6.671008,2.890441,5.397732,5.560125,5.201953,-6.341818,6.905360,-3.488577],[4.737776,-8.687769,3.267669,-3.251409,-3.295687,-8.892608,3.752100,-5.990499,0.860431,-0.572996,1.404185,5.162078,0.237608,-9.608975],[5.400679,-6.228339,8.189461,9.786738,0.780436,-1.724418,-7.648403,-6.780414,2.259205,-5.688502,-5.746370,-0.788156,-3.410703,4.626577],[3.978112,-3.832112,-6.502905,-7.543498,-9.897646,-1.481292,9.263857,1.707377,1.557641,-1.151182,-9.327002,6.693172,3.894267,-9.316749],[3.289346,4.502348,-1.434862,-0.490950,8.436044,-1.475550,-0.194798,5.801453,5.532966,-2.240259,-1.062272,2.316332,2.978515,1.609502],[-5.693209,8.125024,9.145331,9.110099,-7.741568,6.031391,-6.957229,0.315429,-7.938795,-4.289884,7.481721,0.222717,4.941352,-4.240014],[6.262532,5.885361,-4.445105,-5.679867,-0.980863,1.107740,6.037814,-7.810466,-4.665887,-0.011141,-3.338678,-7.001087,3.041573,6.967203],[-8.496918,-5.514730,3.761142,-0.801897,-8.928932,-3.161612,-9.664741,6.562584,-5.002019,9.229390,-9.410088,3.125011,-9.744516,-0.236304],[3.007128,7.025800,-0.877036,-0.509083,5.917558,2.222357,0.802331,-1.280954,8.389548,6.132953,0.543540,-1.254561,-6.524859,-5.274201],[3.302537,4.038707,-2.065393,-6.131642,-0.103370,7.170592,2.880958,4.288891,-9.317490,-5.547460,9.584879,3.636453,-5.703187,-1.549013],[3.671022,-7.599201,-3.673187,-2.260758,-5.484094,7.507919,4.196042,-1.423596,1.490480,2.220238,-1.868187,5.011594,7.023286,-1.432933]],[[-2.684678,-6.371791,-4.773079,-3.275923,-7.341089,0.323988,2.893790,8.473888,8.476061,-1.305245,6.878875,-4.897676,1.194758,-4.694388],[-6.209701,2.736744,6.332753,2.162248,-7.284854,-1.663308,-1.507419,7.059735,-9.146757,-6.435513,-1.986544,-5.579440,-9.268908,1.784613],[-7.114806,-9.737731,5.598905,5.155906,6.989077,-3.581048,-6.561989,6.362037,-9.740830,0.830735,2.016896,0.379718,-9.767276,-9.006307],[-6.814542,-7.632468,9.011688,-8.897394,-4.757537,9.991024,-9.471252,3.087739,0.212851,2.410464,9.097046,-2.014753,-0.904008,6.445214],[-6.828863,1.352462,9.938664,4.476671,-4.263218,0.864895,-7.843494,-0.482216,-1.404157,9.958831,-9.926745,-6.275082,9.483289,2.319155],[-1.555501,-2.641010,-7.142940,0.489597,-1.107877,-5.259121,-4.722923,0.608978,-3.815344,2.986203,-1.475373,-1.998622,1.684719,-0.761439],[-9.455393,-0.785280,-3.661104,4.357247,-2.427968,6.932017,5.397729,7.521876,7.692418,-3.497317,2.950453,5.872744,3.742252,-9.641494],[-1.009412,5.250111,-7.831402,4.649059,5.002253,1.867279,6.512446,-9.070985,-4.894803,4.243594,-0.623036,-8.309565,8.321545,2.532637],[1.392844,-9.575121,7.516277,-6.946958,4.244080,-3.836150,-9.703247,2.852338,-6.693871,7.765218,3.096779,0.302451,-4.287979,5.606678],[7.750988,-0.656584,0.050923,-1.113940,2.557921,-9.506131,-9.368456,2.060084,9.077800,-8.873299,-9.644257,-6.962595,-3.369285,0.651738],[5.868617,1.432754,-8.656827,-7.243949,-9.914341,-8.784951,9.835002,-4.502618,0.031583,4.909146,-5.187923,4.648390,3.584521,0.973638]],[[9.721798,-7.836795,3.000768,4.719045,-2.074896,1.040677,-3.293552,-3.835049,5.693210,1.095044,-0.524630,7.999951,-3.054342,5.862028],[-0.985410,-9.456710,3.501980,0.394756,-8.662919,-0.962531,-4.338174,3.589867,8.729865,-6.340553,-0.154066,-5.427198,-8.705816,-5.257467],[-8.361732,-7.980820,-0.506514,-4.031538,-3.074140,-9.520542,-7.259440,3.975221,6.753152,9.187377,-8.666485,6.433665,2.565502,1.156191],[4.718392,-4.365208,2.476222,-7.271942,4.948208,8.570516,-9.783421,-0.732866,5.016896,9.036354,-6.049168,1.838159,7.083252,-6.216191],[-4.872659,-8.199414,9.572509,3.904239,-5.251377,-4.303274,-4.508285,9.512675,9.795685,8.451483,5.174747,9.957151,4.004761,-6.603041],[0.703878,8.444350,-9.339353,3.745136,7.082390,-5.821981,3.566555,2.961816,-0.041752,-7.397227,2.830504,-5.007239,5.462959,-6.764078],[4.236329,0.734656,0.041706,-7.074653,-1.700349,3.772937,6.404812,2.054769,-5.021835,-9.211079,1.394505,6.885948,4.961624,0.292867],[4.768319,0.439147,-1.413054,-2.717958,-9.835474,5.636717,-5.903545,-4.547349,-0.654787,-8.264185,-0.709704,-3.950817,-4.070211,-3.456682],[4.114353,-3.861238,-8.849940,5.266350,-7.174375,-0.134928,1.819022,7.192078,5.987776,2.176403,-6.529009,-8.375761,-4.654612,-2.138420],[-3.046760,-5.828036,3.793264,3.511956,3.740488,-5.012329,-1.531985,-0.825725,3.563333,3.281401,4.917359,-9.541156,0.005024,-6.909074],[7.477736,-2.320405,-9.732526,-6.033488,7.964408,1.822729,-0.267784,-2.486395,-9.504313,-2.690234,-0.629834,-5.803009,-7.254883,1.715074]],[[-9.286590,-8.379365,9.776049,8.531622,9.796224,9.784047,6.262360,4.274261,-9.926496,-4.299649,-3.167696,-0.270446,3.880871,-4.350891],[-7.667382,2.736128,-0.687907,-7.108267,-9.398125,7.757805,8.602130,-3.208102,4.363921,4.814946,8.608504,-7.785732,-3.214445,-0.033775],[-3.199415,-6.351689,9.559668,3.659973,6.539920,7.497008,3.805119,2.161540,6.397783,-5.055858,-4.788922,-2.702945,4.684670,7.727568],[-3.988853,4.427733,5.567160,5.576653,7.048092,-5.086168,-7.030877,-2.567672,-2.915555,4.656715,8.952182,-4.524928,3.484349,3.607046],[0.938426,-0.155125,3.862834,-1.722525,4.487381,1.989811,-0.230381,0.329257,7.320013,1.010193,-3.756665,8.621539,-9.106693,8.086281],[-6.415287,-4.391942,8.582980,5.698235,4.063814,7.947464,2.766405,7.834243,-5.138933,2.851589,6.428692,1.766582,9.240844,2.506780],[-8.607452,6.605481,-0.615104,3.178069,-8.344043,-0.421220,-0.504549,2.486725,-9.455906,-2.269706,0.973168,-8.134975,-1.037103,-8.343537],[-2.732969,9.837676,-1.585246,4.444457,-6.321975,3.423273,-4.324149,-4.991907,3.889667,-9.424063,1.450923,6.318003,-0.870386,5.000581],[4.863950,-3.387747,7.381090,1.731935,-1.556129,-0.246922,6.446148,-7.556003,5.684253,-1.152691,-7.377680,-5.895376,3.015367,-1.304291],[4.578715,-7.524035,-0.711560,-7.607386,-1.001708,2.226160,6.372668,-0.604848,7.580347,-4.482747,4.190146,-4.988908,4.845440,6.439645],[-2.917041,7.778846,6.401526,-0.770927,-5.488326,-7.607176,-6.533750,-6.267485,1.225419,-2.384916,0.607857,-4.886759,-7.802207,-9.220552]],[[2.796253,-4.463641,5.408814,-6.951152,-3.783226,-5.521035,3.603346,3.264034,8.075353,2.532273,-2.417911,1.251339,-1.823286,6.487296],[-1.906551,5.291756,8.607068,1.601446,3.452482,-1.672485,1.137058,-3.608878,3.623165,-8.483172,3.168033,6.393915,-3.320405,2.727621],[-6.197157,8.108527,-9.788050,7.485419,-1.782522,4.729251,-9.166191,8.066143,-4.803948,-6.614155,-7.685581,-0.563875,0.671153,5.881041],[7.857546,-0.746815,0.220672,-1.933160,-3.459961,-1.485794,2.135301,-2.093316,7.811792,0.010219,-1.762670,5.396289,-7.968179,-8.047061],[4.640727,7.275288,0.722827,2.482771,7.520873,-4.897720,6.645254,8.988197,-6.049306,-9.494024,8.718381,-1.596273,2.306159,-8.890077],[5.094971,9.722505,9.647733,5.271316,7.916396,2.844527,1.156647,-6.323981,-2.118953,7.127660,-8.428694,-9.878212,2.385321,8.915926],[-4.398826,-9.763439,-8.273926,0.027423,4.168031,-4.246573,9.154246,4.489007,-5.008306,8.190505,6.339946,5.653960,-5.979177,-2.587060],[-3.686655,-9.880850,5.181230,1.521362,3.029102,5.842357,9.257486,7.250328,-9.275624,0.436400,-4.704690,4.570945,9.407149,6.187373],[5.877752,1.931378,2.514928,-5.414762,0.577324,9.482942,-2.659665,1.619716,-2.135028,-4.104059,0.742352,2.402293,-3.429479,-8.131504],[-3.821286,3.365253,3.712338,0.097270,2.933352,2.964047,7.555463,4.276918,-5.291054,-9.903839,2.048760,9.252948,-8.858274,-0.230297],[8.867101,4.807672,4.342767,6.725798,4.197961,8.102385,5.904551,8.424036,6.024234,-1.746353,3.193422,3.470407,-7.611849,-7.620551]],[[3.574960,9.191137,6.731271,-0.176485,-1.502887,3.732866,0.422091,-6.792249,3.130379,3.674135,-6.399772,-0.573811,-4.639851,-2.361843],[-8.481413,-1.207416,3.775009,5.399382,-5.451311,8.586515,4.332685,-2.991642,-9.138767,2.915150,1.686494,-9.604618,0.326650,4.572492],[-4.747559,-3.250804,-3.519555,9.196923,-8.230046,-8.074700,-1.841737,0.378109,-5.237802,-8.496421,-2.155245,3.432223,2.773398,5.814921],[-0.091876,-8.285624,-1.747115,-5.043111,3.798153,6.609328,-8.660557,-8.754902,4.820150,-4.276028,-0.184197,-9.632448,8.699968,-3.807404],[-1.437167,1.611053,-8.355704,7.417693,-0.611850,-5.797861,7.843587,6.761697,5.836382,3.751045,-6.577859,4.019011,-7.696305,5.672888],[4.591503,-2.653622,-0.993570,-2.173018,-8.234143,6.434759,1.347370,-6.986779,1.855466,-8.951473,-3.420576,-3.294084,-5.089114,7.039234],[1.196314,-0.404661,-3.882499,-8.201693,-3.109892,4.847273,3.124667,2.239903,-6.785259,5.048593,2.905947,0.259575,5.192158,-0.602308],[0.714107,3.869316,1.267165,1.912103,-8.197602,-5.968410,-2.555242,2.476452,-7.120138,7.489590,2.287844,8.482431,-2.076553,-1.011330],[-3.624574,1.832904,-3.217322,-9.488890,-0.503700,3.768487,-4.364949,2.954120,6.634139,-9.552260,0.978086,3.529131,-6.743674,-2.143683],[8.625401,3.321283,9.987567,2.116015,8.710782,5.849164,2.265104,-3.094875,-6.753373,-4.635720,2.387165,-6.921099,-8.409135,6.509495],[-5.294803,-7.490011,-1.765355,2.554170,-9.657615,4.829651,-1.621008,-7.908446,8.304400,0.584820,-7.859936,7.442142,-8.058693,6.760653]]], dtype = "float64")#candidate|13352|(6, 11, 14)|const|float64
uop_13353 = relay.sigmoid(const_13352.astype('float64')) # shape=(6, 11, 14)
output = relay.Tuple([uop_13353,])
output2 = relay.Tuple([uop_13353,])
func_13355 = relay.Function([], output)
mod['func_13355'] = func_13355
mod = relay.transform.InferType()(mod)
mutated_mod['func_13355'] = func_13355
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13355_call = mutated_mod.get_global_var('func_13355')
call_13356 = func_13355_call()
output = call_13356
func_13357 = relay.Function([], output)
mutated_mod['func_13357'] = func_13357
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11205_call = mod.get_global_var('func_11205')
func_11207_call = mutated_mod.get_global_var('func_11207')
call_13366 = relay.TupleGetItem(func_11205_call(), 1)
call_13367 = relay.TupleGetItem(func_11207_call(), 1)
func_12541_call = mod.get_global_var('func_12541')
func_12545_call = mutated_mod.get_global_var('func_12545')
const_13369 = relay.const([4.563313,-4.529173,-9.809345,-4.213567,-6.973520,-8.984799,4.600148,-4.890266,6.786629,7.182299,5.732925,9.817898,-7.095316,-3.362782,-8.392303,-7.839500,9.019475,5.062816,-8.635341,3.792017,7.080073,3.694793,-1.228262,-2.628913,7.514790,3.496244,-1.585345,7.117899,-1.104850,2.207703,0.139228,-6.968577,-0.844864,-3.581813,3.884749,1.747190,-7.883604,0.402638,-6.351032,-8.988381,-7.088465,6.077210,-0.126168,9.364542,-6.097861,3.082016,-5.155662,-5.490612,5.867106,8.667762,-6.732106,1.425259,-8.862525,8.688957,-9.559590,-7.133498,-3.015568,-9.495167,-7.452153,4.920843,-0.952642,-3.810320,2.603241,1.197952,-5.459117,1.668558,-8.311608,2.364847,-3.996667,7.093743,-2.609114,3.063720,9.036477,2.298972,6.651714,-3.234989,3.945614,-9.745163,-2.787665,-7.888684,9.100350,5.971717,-7.508310,-2.470851,-0.570010,-0.123065,6.284970,8.309509,9.001661,-6.470437], dtype = "float32")#candidate|13369|(90,)|const|float32
const_13370 = relay.const([[-9,-6,-1,-7,1,2,-9,-8,5,2,4,4,-9,-5,-9,5],[-10,-2,-6,-9,4,-1,-4,-6,6,6,-4,-10,-3,4,-6,4],[3,-6,5,-6,-1,-2,5,-3,-7,-2,9,-6,7,-8,2,-8],[8,-2,3,1,-6,-10,-2,3,-4,-2,7,9,9,-8,9,-6],[3,-9,-7,-2,-3,5,7,-7,-2,-6,-9,4,2,1,-9,-8],[4,-1,-8,-5,9,-8,-7,-9,-6,-10,8,4,-8,-1,1,-1],[7,-7,9,5,1,4,10,9,-6,10,-4,4,-9,-1,4,-5],[-8,-5,-4,2,-8,3,10,6,2,-10,10,10,-2,-10,-7,-9],[-9,9,-7,-9,7,-4,6,3,-6,6,-10,7,-1,8,4,-10],[-4,-6,-10,-7,-7,-6,-1,-2,-3,-2,9,6,-8,6,4,7],[-7,-8,-8,-5,-7,1,-1,2,-5,8,-6,2,9,-8,-5,10],[9,-8,6,-3,6,9,-9,1,7,-6,4,-7,-7,7,-9,2],[8,5,3,4,-4,-7,4,-6,9,-4,-1,7,5,10,2,3],[1,-3,8,6,-2,4,2,9,-2,-4,3,1,-7,1,2,-1],[-2,1,-4,3,-9,4,-8,3,-5,5,10,3,6,9,9,-2],[6,2,-10,6,3,3,2,-5,2,-4,-5,-8,-2,-10,-8,-2],[4,4,1,3,1,-7,-9,9,-2,4,9,-2,-10,2,3,-2],[-9,10,8,6,-7,-2,7,10,2,1,-7,-4,3,6,-9,-2],[-5,-2,6,-10,-3,3,-4,3,8,-9,7,3,9,-8,8,-9],[-4,3,9,5,8,5,-3,-7,-2,-8,-10,-9,-2,7,8,-2],[9,2,-1,-1,7,10,-4,-10,3,-5,1,-10,-2,-3,-5,3],[-10,-1,2,-1,-7,8,6,-8,-8,-10,9,-1,8,-1,7,-6],[-9,-10,-8,1,-2,7,-8,6,9,4,9,7,9,10,-4,-5],[-3,5,5,-9,6,4,-2,-2,8,9,3,-5,-5,-10,-3,-1],[1,-10,-3,-3,6,7,-10,10,-6,5,4,6,7,10,1,8],[7,-8,8,1,3,-3,8,-2,2,-8,9,10,9,6,9,-4],[2,1,5,4,-10,2,-2,-4,2,-5,-3,-7,-2,4,8,2],[-10,-10,2,5,-4,-2,1,-3,8,-4,-10,5,5,-7,-7,-3],[-9,6,-8,7,-7,-8,-5,-1,-8,5,-7,2,-10,-5,6,-6],[2,8,2,-1,4,-9,-8,-3,-7,-6,9,-8,-7,-7,-2,9],[6,3,-3,-1,2,8,-10,8,-9,2,2,-8,3,-3,-2,-9],[4,-10,-4,5,-9,-8,4,-6,10,-3,-6,-3,-8,-3,3,-1],[-2,3,10,-4,3,-9,7,9,3,-2,-5,-7,-5,3,2,4],[-5,-2,7,7,7,6,-1,-5,-9,3,-4,-4,1,-7,-3,9],[-10,-2,-8,-6,5,10,8,-2,4,8,-6,-7,2,-1,4,3],[-2,10,6,-4,-9,8,-4,4,-8,6,-7,-2,-4,5,5,-2],[3,-7,-8,-1,-9,-4,-1,-9,-3,2,7,-10,-9,10,3,8],[-2,4,-8,-6,-3,-8,-1,3,3,5,-1,2,1,3,2,9],[-8,5,-7,-3,-3,7,9,9,7,-3,-8,10,6,3,-7,-3],[5,-3,9,3,6,-6,-9,-10,-1,-9,-9,-10,6,-3,4,-10],[-4,-1,6,4,5,-8,7,3,10,-6,-4,-3,10,3,-4,4],[5,-8,1,-4,4,-1,9,-8,7,-9,-10,1,-10,3,7,-1],[-3,3,3,-8,-9,-7,-4,-9,-8,-4,-5,-6,1,-1,5,3],[3,1,5,-4,-10,-5,5,-7,-4,-1,8,-4,-9,9,6,-3],[10,-4,3,9,8,-8,-8,8,-8,3,-10,-4,1,-2,-7,-4],[9,2,-6,5,-7,-1,-2,8,-9,5,-7,8,-4,3,-5,8],[6,6,-3,10,-8,4,9,7,3,9,10,-8,-8,-6,9,-7],[-6,-1,-3,-8,1,10,-5,7,-8,-8,4,3,-6,-6,-2,1],[5,-6,2,-9,7,-2,6,-10,8,5,5,-5,-8,7,-4,-10],[2,-7,-2,-7,8,1,1,-10,-3,-10,-2,1,-3,-10,7,-6],[-5,-3,-9,-6,-10,-1,-2,9,-6,4,-1,6,3,3,-5,9],[1,-7,-4,9,1,4,-3,-9,-1,6,7,-8,-9,2,-9,4],[-5,-2,5,3,-1,9,10,-2,-10,3,-2,10,1,7,-5,1],[3,8,-3,6,-10,10,3,-2,-2,-4,5,6,-8,-7,-4,-2],[10,-7,-3,-10,7,2,2,5,-9,8,3,-2,-9,-3,-7,-3],[6,-1,2,1,-1,-7,9,7,-1,3,-3,2,-4,-8,-9,-8],[-1,-6,-2,10,2,-4,-1,10,-10,-3,-8,6,1,2,4,-7],[-3,-6,1,-6,-5,-5,-3,-8,8,7,-8,7,-8,-9,3,7],[-10,8,-1,6,5,2,-8,5,4,1,7,-1,-1,5,-8,-9],[-5,10,1,2,9,8,-6,1,-4,-2,-4,-4,-5,8,-3,-2],[4,-6,9,-3,-4,4,-3,-10,1,8,6,10,-2,7,-5,-6],[2,-8,-2,7,-1,7,-8,-2,10,-4,-3,10,-3,1,-5,-9],[-10,5,-7,7,-7,-5,-1,4,7,10,2,-5,6,-5,4,-7],[2,-8,8,8,-10,-10,9,6,6,4,-7,-3,7,-5,1,-7],[8,1,-1,-1,1,3,9,-6,5,-3,10,-5,-5,8,-4,8],[-8,-8,-1,9,-4,3,-2,-8,-10,-1,-6,-7,-9,-6,8,5],[-6,-5,3,8,6,1,-10,-9,10,9,6,-7,-1,-8,-9,-6],[-9,2,5,-1,1,3,1,-10,-9,6,-6,-2,8,-3,4,-3],[-10,-7,7,10,-10,-9,-4,-3,-9,10,-2,10,2,-8,-5,-1],[6,-2,8,10,4,10,-8,2,-1,-3,-5,-4,6,-5,-5,-8],[6,5,-3,-3,-4,-6,5,-2,-10,-1,7,4,-9,6,9,4],[-5,1,-6,4,7,-4,8,9,10,7,-7,-3,-1,-2,-5,6],[-7,-6,1,-3,-2,9,5,-1,1,-4,-8,7,-6,-2,7,-10],[4,9,10,2,-9,3,2,-10,-2,1,1,-1,-9,7,10,-4],[5,-10,5,6,-6,9,3,-10,2,-4,1,10,-10,-8,6,5],[-3,-6,-10,2,3,3,-9,-10,-4,3,-4,5,-2,4,-3,1],[7,-6,-2,-2,-10,-1,-8,1,9,-7,-9,-5,-5,10,10,-8],[9,-2,2,5,1,-2,-1,4,1,1,6,-2,6,3,-3,3],[-4,-4,2,-10,-7,3,9,8,-9,-1,-8,5,7,2,-8,-4],[1,-1,-9,-6,-5,-6,6,-4,4,9,-10,-8,4,-1,-6,-7],[2,9,-8,8,6,8,8,7,9,4,2,-8,-1,-9,3,3],[3,-9,-9,-4,10,4,-4,-2,7,-4,-9,5,1,-6,-1,2],[-2,-5,-7,-5,1,-7,-2,-9,4,-10,-8,-2,1,7,-10,6],[-9,5,9,7,1,8,2,4,3,-8,1,1,-1,-5,-7,-2]], dtype = "uint8")#candidate|13370|(84, 16)|const|uint8
call_13368 = relay.TupleGetItem(func_12541_call(relay.reshape(const_13369.astype('float32'), [90,]), relay.reshape(const_13370.astype('uint8'), [1344,]), ), 7)
call_13371 = relay.TupleGetItem(func_12545_call(relay.reshape(const_13369.astype('float32'), [90,]), relay.reshape(const_13370.astype('uint8'), [1344,]), ), 7)
func_9264_call = mod.get_global_var('func_9264')
func_9268_call = mutated_mod.get_global_var('func_9268')
var_13379 = relay.var("var_13379", dtype = "float64", shape = (36,))#candidate|13379|(36,)|var|float64
call_13378 = relay.TupleGetItem(func_9264_call(relay.reshape(var_13379.astype('float64'), [9, 4]), relay.reshape(const_13370.astype('float64'), [672, 2]), ), 3)
call_13380 = relay.TupleGetItem(func_9268_call(relay.reshape(var_13379.astype('float64'), [9, 4]), relay.reshape(const_13370.astype('float64'), [672, 2]), ), 3)
func_9603_call = mod.get_global_var('func_9603')
func_9605_call = mutated_mod.get_global_var('func_9605')
call_13402 = relay.TupleGetItem(func_9603_call(), 0)
call_13403 = relay.TupleGetItem(func_9605_call(), 0)
output = relay.Tuple([call_13366,call_13368,const_13369,const_13370,call_13378,var_13379,call_13402,])
output2 = relay.Tuple([call_13367,call_13371,const_13369,const_13370,call_13380,var_13379,call_13403,])
func_13421 = relay.Function([var_13379,], output)
mod['func_13421'] = func_13421
mod = relay.transform.InferType()(mod)
mutated_mod['func_13421'] = func_13421
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13422 = relay.var("var_13422", dtype = "float64", shape = (36,))#candidate|13422|(36,)|var|float64
func_13421_call = mutated_mod.get_global_var('func_13421')
call_13423 = func_13421_call(var_13422)
output = call_13423
func_13424 = relay.Function([var_13422], output)
mutated_mod['func_13424'] = func_13424
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10110_call = mod.get_global_var('func_10110')
func_10111_call = mutated_mod.get_global_var('func_10111')
call_13479 = func_10110_call()
call_13480 = func_10110_call()
output = call_13479
output2 = call_13480
func_13482 = relay.Function([], output)
mod['func_13482'] = func_13482
mod = relay.transform.InferType()(mod)
mutated_mod['func_13482'] = func_13482
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13482_call = mutated_mod.get_global_var('func_13482')
call_13483 = func_13482_call()
output = call_13483
func_13484 = relay.Function([], output)
mutated_mod['func_13484'] = func_13484
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10651_call = mod.get_global_var('func_10651')
func_10652_call = mutated_mod.get_global_var('func_10652')
call_13496 = func_10651_call()
call_13497 = func_10651_call()
func_1780_call = mod.get_global_var('func_1780')
func_1782_call = mutated_mod.get_global_var('func_1782')
var_13503 = relay.var("var_13503", dtype = "float32", shape = (2112,))#candidate|13503|(2112,)|var|float32
call_13502 = relay.TupleGetItem(func_1780_call(relay.reshape(var_13503.astype('float32'), [11, 16, 12])), 0)
call_13504 = relay.TupleGetItem(func_1782_call(relay.reshape(var_13503.astype('float32'), [11, 16, 12])), 0)
func_9424_call = mod.get_global_var('func_9424')
func_9425_call = mutated_mod.get_global_var('func_9425')
call_13513 = relay.TupleGetItem(func_9424_call(), 3)
call_13514 = relay.TupleGetItem(func_9425_call(), 3)
output = relay.Tuple([call_13496,call_13502,var_13503,call_13513,])
output2 = relay.Tuple([call_13497,call_13504,var_13503,call_13514,])
func_13515 = relay.Function([var_13503,], output)
mod['func_13515'] = func_13515
mod = relay.transform.InferType()(mod)
var_13516 = relay.var("var_13516", dtype = "float32", shape = (2112,))#candidate|13516|(2112,)|var|float32
output = func_13515(var_13516)
func_13517 = relay.Function([var_13516], output)
mutated_mod['func_13517'] = func_13517
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12981_call = mod.get_global_var('func_12981')
func_12982_call = mutated_mod.get_global_var('func_12982')
call_13551 = relay.TupleGetItem(func_12981_call(), 0)
call_13552 = relay.TupleGetItem(func_12982_call(), 0)
output = call_13551
output2 = call_13552
func_13578 = relay.Function([], output)
mod['func_13578'] = func_13578
mod = relay.transform.InferType()(mod)
output = func_13578()
func_13579 = relay.Function([], output)
mutated_mod['func_13579'] = func_13579
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11727_call = mod.get_global_var('func_11727')
func_11728_call = mutated_mod.get_global_var('func_11728')
call_13600 = relay.TupleGetItem(func_11727_call(), 0)
call_13601 = relay.TupleGetItem(func_11728_call(), 0)
func_10332_call = mod.get_global_var('func_10332')
func_10334_call = mutated_mod.get_global_var('func_10334')
call_13636 = relay.TupleGetItem(func_10332_call(), 1)
call_13637 = relay.TupleGetItem(func_10334_call(), 1)
func_9439_call = mod.get_global_var('func_9439')
func_9440_call = mutated_mod.get_global_var('func_9440')
call_13639 = relay.TupleGetItem(func_9439_call(), 0)
call_13640 = relay.TupleGetItem(func_9440_call(), 0)
func_10043_call = mod.get_global_var('func_10043')
func_10044_call = mutated_mod.get_global_var('func_10044')
call_13646 = relay.TupleGetItem(func_10043_call(), 1)
call_13647 = relay.TupleGetItem(func_10044_call(), 1)
output = relay.Tuple([call_13600,call_13636,call_13639,call_13646,])
output2 = relay.Tuple([call_13601,call_13637,call_13640,call_13647,])
func_13649 = relay.Function([], output)
mod['func_13649'] = func_13649
mod = relay.transform.InferType()(mod)
output = func_13649()
func_13650 = relay.Function([], output)
mutated_mod['func_13650'] = func_13650
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11561_call = mod.get_global_var('func_11561')
func_11562_call = mutated_mod.get_global_var('func_11562')
call_13714 = relay.TupleGetItem(func_11561_call(), 0)
call_13715 = relay.TupleGetItem(func_11562_call(), 0)
output = call_13714
output2 = call_13715
func_13716 = relay.Function([], output)
mod['func_13716'] = func_13716
mod = relay.transform.InferType()(mod)
mutated_mod['func_13716'] = func_13716
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13716_call = mutated_mod.get_global_var('func_13716')
call_13717 = func_13716_call()
output = call_13717
func_13718 = relay.Function([], output)
mutated_mod['func_13718'] = func_13718
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9424_call = mod.get_global_var('func_9424')
func_9425_call = mutated_mod.get_global_var('func_9425')
call_13855 = relay.TupleGetItem(func_9424_call(), 3)
call_13856 = relay.TupleGetItem(func_9425_call(), 3)
func_9878_call = mod.get_global_var('func_9878')
func_9882_call = mutated_mod.get_global_var('func_9882')
const_13862 = relay.const([0.795655,-6.096028,4.818828,8.431920,2.823348,-5.231003,4.487376,4.506247,-4.687814,7.837337,-8.930031,-7.721056,9.388390,-0.413914,-1.826165,0.630691,-0.498194,7.918465,4.664779,5.363214,4.070891,5.778668,4.128001,-8.634640,-1.609450,-3.391015,3.200486,-1.319472,-8.391587,2.955088,-8.383029,-7.882879,-2.081816,4.660695,5.012823,-6.575062,-0.396965,3.230305,-3.611682,2.867208,-5.544132,0.078304,-2.418040,-4.847817,-3.161576,5.389500,4.109246,-5.743613,-8.822377,0.437078,-6.960581,-8.799174,-7.571167,1.517786,9.832427,3.938895,-1.041723,5.189936,6.648303,9.377687,-3.522574,-4.131294,5.910217,8.843214,-3.329418,7.610384,5.858842,-7.870557,7.840804,-4.959451,-4.527370,-7.490285,5.289736,-0.379199,-7.331816,-1.326433,-4.787532,-4.167984,0.741414,2.324491,-6.652694,0.508974,-2.650470,1.458980,6.881638,5.036360,-2.190555,-4.620121,8.405893,-4.749066,-5.947202,-5.284446,9.554831,-7.308968,6.832369,3.662118,-9.049597,5.150960,-3.640946,4.646401,-9.848111,5.782090,-4.672460,-6.657968,-0.382536,2.635699,-0.066374,-0.397918,-4.245802,-8.661064,-6.837326,-1.863843,-5.078726,-1.078782,-4.455462,-4.122125,-7.217013,1.381401,5.869358,-3.152719,-2.988285,4.562803,-8.979867,0.634673,-3.336002,-7.815703,0.836768,-0.884817,-0.887921,-1.079688,-2.072829,3.315444,-8.349707,2.890707,2.312748,-1.363808,-7.607493,-3.923884,1.326604,9.129927,6.059136,-0.524409,-4.302625,2.949175,6.820835,-5.784802,-6.349391,-3.266979,-7.594644,9.482824,-1.993987,-3.843592,2.154551,5.945695,-4.597967,-6.500173,-4.016394,-7.379191,3.377602,2.080826,6.560658,-8.520687,5.463664,-3.661218,6.754145,5.774367,8.627529,-6.640241,-3.037995,2.554311,-0.378721,0.460613,6.562400,-8.413440,5.174709,6.027585,4.363156,-9.847688,8.372553,-2.931963,-7.692662,-8.388467,8.830951,-6.279600,-3.530820,-0.858518,-6.796664,3.383311,1.924755,-9.303071,6.862616,5.876057,-5.706478,5.813721,0.227069,-6.554294,-7.942079,6.618564,8.461393,2.606760,-5.657945,-0.682816,8.070692,-5.130082,6.116213,3.983409,-4.481195,1.419516,4.785462,-7.237544,5.273758,-5.875873,8.461989,4.821592,-2.848490,-4.005940,6.850620,4.507365,-5.580559,6.925946,-1.313872,-8.601899,-0.897345,8.280569,0.809688,-1.884696,-0.605636,-4.980756,-4.279035,-2.132159,-3.094222,3.726067,-4.947553,0.384610,-1.740599,-0.694333,2.683889,-5.239278,4.572519,9.133117,7.386917,1.683885,6.298794,-2.019967,6.705121,-2.411139,3.197065,7.740400,-7.495281,8.130612,-3.021441,7.537551,-5.507818,0.954025,-1.990234,-0.980039,-5.566843,6.030646,1.328988,3.396024,0.251935,2.148340,-7.036585,-6.039626,2.570902,4.707756,0.677879,6.667534,-9.455798,1.031251,-4.079147,9.501802,1.681162,-0.972990,-1.693529,-8.105116,7.663620,-7.643352,-4.420765,-6.034614,-4.600100,0.839013,-8.509540,-3.418676,8.247081,0.984523,8.238700,-2.053226,-2.493325,-0.226621,0.900276,-5.350458,-7.960068,-7.650477,9.229987,-2.505050,-1.297514,9.973476,-8.227372,-8.520634,-6.973684,0.550102,-0.060899,-4.886364,-3.914330,5.542102,5.863812,-3.770802,-9.238791,9.048907,3.056987,-3.522864,0.792004,5.134643,4.894772,-4.498459,5.044103,0.332826,3.713318,-3.181620,-1.782144,9.721262,5.872087,6.853756,-7.863384,0.248624,-5.682572,-4.832364,-9.414324,-2.051115,0.370262,4.953366,-6.823323,-7.489620,-0.222649,-0.453730,-3.143340,6.297114,7.511007,0.997424,8.389091,-0.005901,-1.024256,7.768415,-4.261236,-6.684544,-8.947743,-2.365971,8.813474,4.132861,-4.726078,-6.532091,2.228206,-2.141460,3.849216,3.036485,4.576282,-1.420679,-5.072524,-7.900919,6.152837,-2.936496,-3.633138,1.875113,4.177199,7.207032,-7.910181,-0.450540,0.378348,-2.754102,-7.068395,0.967597,7.905459,-4.354982,-6.636916,-5.167730,8.776602,8.643768,-5.269361,0.566718,2.525321,8.243387,2.490818,-1.501854,-1.183513,0.880302,-3.702558,-7.600532,-4.398395,9.270785,4.878318,9.324913,-8.648707,-8.249439,0.546821,-0.972495,4.035607,-6.557978,4.532515,1.766935,6.798770,-5.133062,-3.502694,-0.850813,7.356744,8.749449,9.497208,-7.707270,1.806827,-7.379474,-7.333370,-3.091914,-4.263867,-6.548740,7.209702,-2.583888,-3.376646,-8.096535,0.161174,-5.963877,-1.621491,-9.579668,-9.734206,8.491068,7.616557,-9.785029,-0.529271,0.088092,7.599415,-5.148033,-6.329186,3.376322,0.496370,4.135625,-1.822873,-7.224480,2.247579,3.507283,2.883662,3.190764,-4.205877,-4.423484,-6.152701,-0.278103,-1.057490,-2.756122,7.882635,8.034788,4.735685,2.635082,-8.989322,-9.803889,-6.893708,8.417369,-9.315555,5.370949,-1.296526,8.818937,8.317760,-4.870708,-0.419472,-5.720538,0.064999,8.892470,-8.459563,-2.000320,-7.946034,-2.912367,-9.528824,-0.598344,4.586163,-5.784454,6.516015,-3.742939,1.770768,-7.569645,-4.624603,8.602502,3.161550,-8.895708,6.830798,-4.341099,-0.282861,9.135439,9.169413,8.992155,1.413567,-0.367073,-9.895670,0.711417,-3.759496,8.361435,7.665605,-0.046277,1.697571,-7.158775,5.099938,-9.667421,-9.104597,4.940315,3.615652,-7.203664,-0.804915,-6.201946,8.594342,-0.024012,9.743853,-6.947627,-3.078381,8.980030,-5.945525,-0.695179,0.486736,6.100587,-3.934508,2.688450,8.880746,-1.119271,-3.886176,-2.655349,0.060583,4.334393,4.553181,8.413434,-7.613169,8.359592,-9.010844,5.253001,6.614712,6.778300,8.002079,6.623532,-4.277349,-3.297287,-3.255323,8.423952,1.611323,9.504930,-9.723723,-8.893061,0.995564,9.607721,1.117814,2.422239,0.695252,2.029746,8.052105,-3.249243,-3.167433,1.336294,7.881792,-5.454489,3.010339,1.434459,-2.240860,5.754772,-9.524933,-5.829825,0.718651,-9.303462], dtype = "float64")#candidate|13862|(560,)|const|float64
call_13861 = relay.TupleGetItem(func_9878_call(relay.reshape(const_13862.astype('float64'), [4, 140]), relay.reshape(call_13855.astype('float32'), [144,]), ), 2)
call_13863 = relay.TupleGetItem(func_9882_call(relay.reshape(const_13862.astype('float64'), [4, 140]), relay.reshape(call_13855.astype('float32'), [144,]), ), 2)
output = relay.Tuple([call_13855,call_13861,const_13862,])
output2 = relay.Tuple([call_13856,call_13863,const_13862,])
func_13908 = relay.Function([], output)
mod['func_13908'] = func_13908
mod = relay.transform.InferType()(mod)
output = func_13908()
func_13909 = relay.Function([], output)
mutated_mod['func_13909'] = func_13909
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8556_call = mod.get_global_var('func_8556')
func_8557_call = mutated_mod.get_global_var('func_8557')
call_13924 = func_8556_call()
call_13925 = func_8556_call()
func_11695_call = mod.get_global_var('func_11695')
func_11696_call = mutated_mod.get_global_var('func_11696')
call_13926 = relay.TupleGetItem(func_11695_call(), 0)
call_13927 = relay.TupleGetItem(func_11696_call(), 0)
func_3828_call = mod.get_global_var('func_3828')
func_3830_call = mutated_mod.get_global_var('func_3830')
var_13937 = relay.var("var_13937", dtype = "int32", shape = (1, 1680))#candidate|13937|(1, 1680)|var|int32
call_13936 = func_3828_call(relay.reshape(var_13937.astype('int32'), [12, 14, 10]))
call_13938 = func_3828_call(relay.reshape(var_13937.astype('int32'), [12, 14, 10]))
output = relay.Tuple([call_13924,call_13926,call_13936,var_13937,])
output2 = relay.Tuple([call_13925,call_13927,call_13938,var_13937,])
func_13950 = relay.Function([var_13937,], output)
mod['func_13950'] = func_13950
mod = relay.transform.InferType()(mod)
mutated_mod['func_13950'] = func_13950
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13951 = relay.var("var_13951", dtype = "int32", shape = (1, 1680))#candidate|13951|(1, 1680)|var|int32
func_13950_call = mutated_mod.get_global_var('func_13950')
call_13952 = func_13950_call(var_13951)
output = call_13952
func_13953 = relay.Function([var_13951], output)
mutated_mod['func_13953'] = func_13953
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10717_call = mod.get_global_var('func_10717')
func_10719_call = mutated_mod.get_global_var('func_10719')
call_13960 = func_10717_call()
call_13961 = func_10717_call()
func_5572_call = mod.get_global_var('func_5572')
func_5576_call = mutated_mod.get_global_var('func_5576')
const_13963 = relay.const([10,-10,1,4,10,-5,6,10,-2,-5,-6,9,10,-10,10,-9,1,-7,-1,-8,-1,-8,6,6,-4,5,5,7,8,6,1,10,-5,6,10,-7,-7,-9,-4,-1,8,-8,9,-8,-3,7,-10,-5,4,10,-5,4,-3,9,9,-4,5,10,9,3,4,7,-6,8,-6,-3,-9,-7,9,-8,3,5,-7,-3,5,-10,5,3,-10,1,-3,-8,-1,-3,-8,-1,6,-10,5,9,1,-8,-5,-10,-4,-2,5,-9,5,-1,4,6,9,3,1,-3,1,1,-4,2,1,-7,4,-7,8,1,-9,2,-3,4,-6,8,-2,-3,9,-4,-9,-9,7,-3,-3,8,1,1,-6,-10,4,10,-5,2,-10,4,-9,6,8,-10,-2,-2,10,-7,-10,1,-4,-10,5,3,-8,9,-10,3,4,1,-6,9,6,-2,-4,10,5,-7,2,8,-6,7,-1,6,-8,1,9,9], dtype = "int8")#candidate|13963|(180,)|const|int8
call_13962 = relay.TupleGetItem(func_5572_call(relay.reshape(const_13963.astype('int8'), [3, 15, 4]), relay.reshape(const_13963.astype('int8'), [3, 15, 4]), ), 0)
call_13964 = relay.TupleGetItem(func_5576_call(relay.reshape(const_13963.astype('int8'), [3, 15, 4]), relay.reshape(const_13963.astype('int8'), [3, 15, 4]), ), 0)
output = relay.Tuple([call_13960,call_13962,const_13963,])
output2 = relay.Tuple([call_13961,call_13964,const_13963,])
func_13967 = relay.Function([], output)
mod['func_13967'] = func_13967
mod = relay.transform.InferType()(mod)
mutated_mod['func_13967'] = func_13967
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13967_call = mutated_mod.get_global_var('func_13967')
call_13968 = func_13967_call()
output = call_13968
func_13969 = relay.Function([], output)
mutated_mod['func_13969'] = func_13969
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9487_call = mod.get_global_var('func_9487')
func_9489_call = mutated_mod.get_global_var('func_9489')
call_13980 = relay.TupleGetItem(func_9487_call(), 0)
call_13981 = relay.TupleGetItem(func_9489_call(), 0)
output = relay.Tuple([call_13980,])
output2 = relay.Tuple([call_13981,])
func_13984 = relay.Function([], output)
mod['func_13984'] = func_13984
mod = relay.transform.InferType()(mod)
mutated_mod['func_13984'] = func_13984
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13984_call = mutated_mod.get_global_var('func_13984')
call_13985 = func_13984_call()
output = call_13985
func_13986 = relay.Function([], output)
mutated_mod['func_13986'] = func_13986
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10043_call = mod.get_global_var('func_10043')
func_10044_call = mutated_mod.get_global_var('func_10044')
call_13996 = relay.TupleGetItem(func_10043_call(), 0)
call_13997 = relay.TupleGetItem(func_10044_call(), 0)
output = call_13996
output2 = call_13997
func_13998 = relay.Function([], output)
mod['func_13998'] = func_13998
mod = relay.transform.InferType()(mod)
mutated_mod['func_13998'] = func_13998
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13998_call = mutated_mod.get_global_var('func_13998')
call_13999 = func_13998_call()
output = call_13999
func_14000 = relay.Function([], output)
mutated_mod['func_14000'] = func_14000
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11977_call = mod.get_global_var('func_11977')
func_11979_call = mutated_mod.get_global_var('func_11979')
call_14008 = relay.TupleGetItem(func_11977_call(), 0)
call_14009 = relay.TupleGetItem(func_11979_call(), 0)
output = relay.Tuple([call_14008,])
output2 = relay.Tuple([call_14009,])
func_14042 = relay.Function([], output)
mod['func_14042'] = func_14042
mod = relay.transform.InferType()(mod)
output = func_14042()
func_14043 = relay.Function([], output)
mutated_mod['func_14043'] = func_14043
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12895_call = mod.get_global_var('func_12895')
func_12896_call = mutated_mod.get_global_var('func_12896')
call_14065 = relay.TupleGetItem(func_12895_call(), 1)
call_14066 = relay.TupleGetItem(func_12896_call(), 1)
output = call_14065
output2 = call_14066
func_14106 = relay.Function([], output)
mod['func_14106'] = func_14106
mod = relay.transform.InferType()(mod)
mutated_mod['func_14106'] = func_14106
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14106_call = mutated_mod.get_global_var('func_14106')
call_14107 = func_14106_call()
output = call_14107
func_14108 = relay.Function([], output)
mutated_mod['func_14108'] = func_14108
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12895_call = mod.get_global_var('func_12895')
func_12896_call = mutated_mod.get_global_var('func_12896')
call_14136 = relay.TupleGetItem(func_12895_call(), 0)
call_14137 = relay.TupleGetItem(func_12896_call(), 0)
output = relay.Tuple([call_14136,])
output2 = relay.Tuple([call_14137,])
func_14150 = relay.Function([], output)
mod['func_14150'] = func_14150
mod = relay.transform.InferType()(mod)
output = func_14150()
func_14151 = relay.Function([], output)
mutated_mod['func_14151'] = func_14151
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9726_call = mod.get_global_var('func_9726')
func_9727_call = mutated_mod.get_global_var('func_9727')
call_14162 = relay.TupleGetItem(func_9726_call(), 0)
call_14163 = relay.TupleGetItem(func_9727_call(), 0)
output = call_14162
output2 = call_14163
func_14173 = relay.Function([], output)
mod['func_14173'] = func_14173
mod = relay.transform.InferType()(mod)
mutated_mod['func_14173'] = func_14173
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14173_call = mutated_mod.get_global_var('func_14173')
call_14174 = func_14173_call()
output = call_14174
func_14175 = relay.Function([], output)
mutated_mod['func_14175'] = func_14175
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12163_call = mod.get_global_var('func_12163')
func_12164_call = mutated_mod.get_global_var('func_12164')
call_14179 = relay.TupleGetItem(func_12163_call(), 0)
call_14180 = relay.TupleGetItem(func_12164_call(), 0)
output = call_14179
output2 = call_14180
func_14191 = relay.Function([], output)
mod['func_14191'] = func_14191
mod = relay.transform.InferType()(mod)
output = func_14191()
func_14192 = relay.Function([], output)
mutated_mod['func_14192'] = func_14192
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10343_call = mod.get_global_var('func_10343')
func_10344_call = mutated_mod.get_global_var('func_10344')
call_14239 = func_10343_call()
call_14240 = func_10343_call()
output = relay.Tuple([call_14239,])
output2 = relay.Tuple([call_14240,])
func_14241 = relay.Function([], output)
mod['func_14241'] = func_14241
mod = relay.transform.InferType()(mod)
output = func_14241()
func_14242 = relay.Function([], output)
mutated_mod['func_14242'] = func_14242
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10043_call = mod.get_global_var('func_10043')
func_10044_call = mutated_mod.get_global_var('func_10044')
call_14289 = relay.TupleGetItem(func_10043_call(), 0)
call_14290 = relay.TupleGetItem(func_10044_call(), 0)
output = relay.Tuple([call_14289,])
output2 = relay.Tuple([call_14290,])
func_14298 = relay.Function([], output)
mod['func_14298'] = func_14298
mod = relay.transform.InferType()(mod)
output = func_14298()
func_14299 = relay.Function([], output)
mutated_mod['func_14299'] = func_14299
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12163_call = mod.get_global_var('func_12163')
func_12164_call = mutated_mod.get_global_var('func_12164')
call_14319 = relay.TupleGetItem(func_12163_call(), 0)
call_14320 = relay.TupleGetItem(func_12164_call(), 0)
output = relay.Tuple([call_14319,])
output2 = relay.Tuple([call_14320,])
func_14348 = relay.Function([], output)
mod['func_14348'] = func_14348
mod = relay.transform.InferType()(mod)
output = func_14348()
func_14349 = relay.Function([], output)
mutated_mod['func_14349'] = func_14349
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9603_call = mod.get_global_var('func_9603')
func_9605_call = mutated_mod.get_global_var('func_9605')
call_14354 = relay.TupleGetItem(func_9603_call(), 0)
call_14355 = relay.TupleGetItem(func_9605_call(), 0)
output = call_14354
output2 = call_14355
func_14359 = relay.Function([], output)
mod['func_14359'] = func_14359
mod = relay.transform.InferType()(mod)
mutated_mod['func_14359'] = func_14359
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14359_call = mutated_mod.get_global_var('func_14359')
call_14360 = func_14359_call()
output = call_14360
func_14361 = relay.Function([], output)
mutated_mod['func_14361'] = func_14361
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12895_call = mod.get_global_var('func_12895')
func_12896_call = mutated_mod.get_global_var('func_12896')
call_14403 = relay.TupleGetItem(func_12895_call(), 0)
call_14404 = relay.TupleGetItem(func_12896_call(), 0)
func_13264_call = mod.get_global_var('func_13264')
func_13267_call = mutated_mod.get_global_var('func_13267')
var_14436 = relay.var("var_14436", dtype = "float64", shape = (6864,))#candidate|14436|(6864,)|var|float64
call_14435 = relay.TupleGetItem(func_13264_call(relay.reshape(var_14436.astype('float64'), [12, 572])), 3)
call_14437 = relay.TupleGetItem(func_13267_call(relay.reshape(var_14436.astype('float64'), [12, 572])), 3)
output = relay.Tuple([call_14403,call_14435,var_14436,])
output2 = relay.Tuple([call_14404,call_14437,var_14436,])
func_14450 = relay.Function([var_14436,], output)
mod['func_14450'] = func_14450
mod = relay.transform.InferType()(mod)
mutated_mod['func_14450'] = func_14450
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14451 = relay.var("var_14451", dtype = "float64", shape = (6864,))#candidate|14451|(6864,)|var|float64
func_14450_call = mutated_mod.get_global_var('func_14450')
call_14452 = func_14450_call(var_14451)
output = call_14452
func_14453 = relay.Function([var_14451], output)
mutated_mod['func_14453'] = func_14453
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12163_call = mod.get_global_var('func_12163')
func_12164_call = mutated_mod.get_global_var('func_12164')
call_14461 = relay.TupleGetItem(func_12163_call(), 0)
call_14462 = relay.TupleGetItem(func_12164_call(), 0)
func_12941_call = mod.get_global_var('func_12941')
func_12944_call = mutated_mod.get_global_var('func_12944')
const_14476 = relay.const([9.043277,-2.340083,-9.343282,6.764141,4.876819,5.690731,-9.362551,4.187575,7.221292,1.682731,6.212032,-5.513662,3.733928,-2.251577,-9.808318,-1.548387,-8.087357,9.196264,-7.869233,4.505968,-6.252105,0.493296,-9.259891,-0.916082,-9.242194,8.522675,-2.505319,7.131555,7.170566,-2.387583,3.403354,-8.723198,-9.685762,-0.593125,-0.183310,-0.233426,-4.035530,-7.422339,-2.239420,-2.456965,-4.322849,1.488802,5.677147,-0.463602,-3.502329,8.512670,5.426718,0.014573,5.502570,-1.218823,3.454215,8.091354,-2.833158,-5.970367,-1.448623,9.442303,9.321264,6.122183,9.592510,2.643591,-7.660836,0.261067,-9.458341,5.252415,-5.819708,-0.084483,3.042400,0.479934,2.076543,-1.628584,-4.477187,-2.677150,-9.024420,2.404023,3.760053,2.462753,8.747977,-9.116430,-5.280671,6.658910,2.410890,-0.050385,7.819041,7.694646,-0.044013,-6.951533,0.432990,-4.002373,-2.094466,-7.854830,-8.093437,-4.208705,-3.416116,-2.622186,-5.550308,-5.630700,9.597497,-2.837012,-4.642334,2.203223,-4.312306,-8.433488,-3.999176,3.109862,-4.485491,-2.564247,-2.342229,-3.734762,5.456892,7.424373,-1.952339,-4.869699,-6.797453,1.374932,-7.694506,9.579532,-9.772038,-8.938534,-0.137303,-8.200684,3.295455,-4.663802,6.941318,1.196140,3.727674,-1.373638,-4.288332,2.009517,-3.820032,9.274683,7.898194,9.034703,-5.754309,-6.062212,6.073982,9.085913,9.261851,-4.253824,-3.789401,-7.844234,-8.340626,-2.497182,8.554607,-0.471051,-2.225493,-1.228795,-3.371974,8.072888,4.993414,-3.403210,-1.212951,-7.799246,5.948223,-0.455721,-8.203774,9.905187,-9.892655,7.840598,8.808220,5.950677,8.454241,3.860004,4.141327,6.772416,-4.781458,7.950800,7.632798,-4.850001,7.775914,6.089733,2.804819,-5.209426,-5.828677,6.139193,9.313030,4.098928,-0.766131,5.443264,4.972152,4.123276,-9.681608,9.539303,-2.182382,-6.846758,-7.237794,3.239293,-6.187268,7.505673,0.359162,-2.374149,9.577956,6.768947,-3.819767,5.399176,4.686237,2.719018,-3.633076,-7.938773,-3.643550,-0.128268,-5.180418,9.124823,0.011055,9.125812,9.982233,-7.631738,0.614077,7.009923,-1.987278,5.465351,7.608466,7.166573,8.721732,-0.166662,-2.253881,1.575044,-9.307627,6.151585,7.736243,-5.369601,-0.815328,-5.379283,-5.369624,8.776781,-0.432418,6.782201,9.666227,9.076658,-5.147542,-2.952868,-4.086553,3.929025,-1.641053,3.409373,4.195209,1.173425,-8.042317,2.944224,1.978805,3.734589,8.753432,3.568704,3.297982,-3.229914,-8.951836,-9.015543,-5.080460,3.576028,-3.050633,-4.393998,-9.362058,9.336265,1.895142,2.843226,4.818949,3.834700,2.968274,9.404249,9.771664,-6.892368,-5.838329,3.298374,-0.130962,-2.813795,6.875152,-8.890122,-4.700509,-7.833391,-9.505340,-9.200406,-5.779743,3.175696,-9.511056,-0.165713,-1.137096,2.264968,4.864537,0.669842,3.523436,-7.556312,-4.878826,-4.277084,-2.778510,4.100731,-3.651902,-4.817504,0.589060,3.961458,-3.585793,9.442409,-2.722901,8.593708,5.640209,-8.542528,-1.338803,4.840753,3.183074,9.628582,-9.819441,4.911656,-4.819065,1.606568,8.671226,5.425071,-9.595711,-3.591693,3.677484,-0.965571,-3.951344,1.922191,8.664329,3.207994,-8.548206,-9.968101,2.602342,-0.402011,8.894457,4.399225,-2.460526,-6.878625,-6.237914,9.421573,8.599654,-1.564354,-9.610405,-0.328245,0.792663,4.958842,0.148882,-9.811008,2.731094,-8.843105,0.398282,8.344516,6.244513,-8.566104,-9.774229,9.555900,-0.947526,3.895423,-0.838155,-3.369304,8.411745,0.919857,-7.751395,-8.981321,-5.106541,-6.446171,-1.255357,7.548217,-6.181909,4.997792,-2.410579,-8.983316,1.544524,4.706533,2.313278,3.949351,2.929994,9.079595,-7.779164,4.297002,3.504430,-5.949916,5.221155,6.074484,-4.924849,-0.852756,8.155612,9.886206,-7.279160,-9.637105,-8.924624,2.425276,8.977634,2.646467,-2.608148,-4.881176,6.127652,3.732799,5.053841,-4.698984,-6.538683,-5.967639,2.434490,-5.991414,-1.867582,4.231490,-8.313650,0.982642,-3.849202,2.846943,7.895050,-0.766238,6.655155,-6.223975,-8.516034,-9.375436,8.843060,-7.235179,-2.925900,6.135439,-6.651063,6.587650,6.909707,-9.650505,-1.174757,-5.333471,8.362819,-1.395152,-1.550263,7.336844,0.869688,6.190343,-0.564623,9.486635,-1.697535,-8.316739,8.924615,2.560742,-3.318104,-2.210334,-4.139871,-7.201975,4.052798,-0.759242,4.148927,-1.917699,6.470127,-8.860079,-3.948966,-7.378660,-1.917808,0.899894,-4.607411,-2.729796,-6.701522,5.071486,7.062692,-0.189451,-9.600011,-0.516472,9.930737,-7.224463,1.487206,-5.156408,-1.529645,-2.581939,2.609997,2.792929,9.499801,-5.516355,-8.472026,-9.518389,-9.644804,2.322828,8.050945,-8.041399,-9.980117,8.662006,8.128979,7.648473,-2.211729,-5.481258,9.816094,9.214510,7.321073,-5.592230,-9.737848,7.042763,-9.654694,6.115483,5.234540,-2.249519,1.905956,2.129854,6.040251,-2.965557,-3.927127,-6.631810,-0.202600,-2.505836,5.064238,-4.666089,3.480398,-9.725979,-2.924284,6.660629,-1.307863,8.208898,8.305641,-9.492671,-1.921377,-2.629102,-5.557029,-8.127342,7.818882,-4.094977,-2.070759,-7.738814,6.841674,1.513058,-9.849299,6.921095,-1.497361,-3.325921,3.715214,-6.433840,-3.671796,-3.299469,5.313594,1.987684,-7.250117,-3.629715,-3.809212,-9.282070,7.554976,4.915140,7.938164,-7.069639,-7.010957,7.449227,-0.989263,6.804980,4.699067,2.373282,-3.264394,5.427363,-7.192694,0.621929,-6.872745,-6.994640,4.705115,0.270048,-1.569560,-1.436598,6.491677,-4.517518,-7.815275,-4.516991,-1.238069,-8.897280,-8.296010,4.771520,7.546018,-3.859197,-8.548840,-1.085512,-4.119756,-0.014001,4.043272,5.012438,2.085126,-0.598050,9.988892,7.579337,-8.387179,7.440414,0.733023,-2.631318,4.555462,-3.220321,3.594597,-6.398271,-2.933552,6.232054,8.098837,-9.686278,-3.942431,-4.189540,9.492483,9.673768,-5.305705,7.033271,9.503535,-6.302208,-9.719960,8.256199,4.001683,0.370953,-4.361966,-7.756988,-5.541264,-2.261523,2.077963,-8.874112,-9.509659,0.529399,-4.158402,-6.401989,-0.646750,1.196355,6.135870,-9.260333,-8.172599,0.711628,-2.915471,-6.140272,-1.790807,-9.253511,-2.355938,6.120657,-7.048041,0.452292,4.852558,7.383342,-0.032523,-5.853831,6.998939,9.136950,-7.869625,-5.694649,-5.188758,2.093736,-5.608804,-9.074890,1.008492,1.744495,-4.367468,-4.052891,4.758993,5.991034,-3.677059,6.730911,5.017668,0.514038,8.734588,-7.363686,7.989120,0.124191,3.298262,-1.700463,9.407858,4.577840,-0.944233,6.993298,7.618545,4.464287,-9.553818,5.689404,0.935773,7.342391,-9.068575,-1.812570,-6.730711,3.570190,-7.134791,-2.505795,-5.341780,8.383184,1.183087,-8.928415,-2.016074,4.957741,-8.357951,-7.808701,6.674856,4.445962,2.344246,6.289596,0.627410,-6.916976,-9.908157,9.084401,-0.685755,0.497465,0.570140,-5.842649,-2.331079,-5.296267,-5.877269,-0.441102,-1.074634,9.722748,-2.828861,6.326059,-4.573215,0.527042,-0.177761,2.582610,5.744160,5.946560,-5.927309,-3.028213,3.453503,3.540016,9.884220,6.321225,0.681254,-8.100816,-6.744205,7.542915,4.161607,0.390578,3.294727,-7.765849,-0.757218,7.032388,6.216234,2.237156,-4.204482,-2.138968,-5.357421,-1.508671,-9.889753,9.027688,-5.204832,9.832017,0.519543,-6.743542,8.975433,-0.664961,-3.828366,-1.163602,5.198586,-9.660137,9.365634,-2.408579,-8.784389,0.522123,8.731889,8.809646,-1.435013,5.204677,-4.313264,-9.169853,-5.373325,7.740207,5.565098,-2.393468,4.215322,-6.785256,5.472223,-4.097084,9.629518,-9.401539,5.092118,7.238271,7.501393,8.206415,-9.288375,3.223900,-8.794617,3.358143,1.926194,3.406387,-4.596159,1.673273,-4.253404,8.864207,3.668836,-8.512856,-9.494761,-0.622612,-2.287352,6.374818,-4.040310,9.007332,6.277738,-0.822883,-7.467922,9.129998,0.937167,-0.769261,-7.966327,-6.970311,0.468485,-3.451410,-0.058379,6.906671,6.777958,6.996533,-1.784974,-7.466457,3.283058,-3.754466,-4.942123,-2.403579,-8.784173,9.171767,-8.893261,-5.736673,-0.452257,3.874847,-7.833589,9.114155,8.385379,3.611583,0.233051,6.394129,-5.887464,-7.744538,7.688565,-7.149743,9.563324,3.602329,5.296748,-9.095282,-3.031257,-6.181171,-2.881852,-0.727828,-5.377103,5.795416,-1.669165,-6.458789,-3.692969,7.773449,6.194754,0.994250,-7.726594,1.391810,9.589296,6.340007,5.005740,-8.953570,-1.691248,-3.571945,-1.432193,-9.654266,-3.726636,7.405576,-6.111490,2.479049,-5.368382,-4.511557,2.771306,2.273484,8.957121,-5.896973,-4.157393,9.346442,-5.154282,-4.564671,9.488304,3.393484,3.754220,7.988334,3.167285,-2.877478,8.691045,-5.190899,-4.798980,3.174346,2.454031,-1.353716,-9.558816,-3.585355,1.014990,2.270907,6.146900,8.433249,0.382141,-7.046017,2.862549,5.147886,-7.452569,2.023257,8.590734,-5.883281,-2.846059,-4.076129,-9.806000,4.301192,5.031221,1.634431,2.537728,-2.981750,5.684408,-6.748971,2.446335,2.395945,7.846090,-7.179662,-4.614356,5.586808,4.134985,7.543414,-1.599260,-2.902097,-3.895851,1.578036,-2.162743,-9.610887,-1.849308,-5.542552,-4.732255,7.990095,-2.691413,-6.953550,5.774996,8.427184,-6.007412,-9.249781,-4.968029,-8.530132,-5.425186,-0.065093,4.261981,-9.895413,1.593403,6.617736,4.840978,-6.006277,-3.602036,-0.848794,-0.701036,6.634581,-0.369751,-3.640922,-8.457001,8.455970,-7.801045,9.835855,1.651954,1.897646,-6.901232,-7.002907,-7.233162,5.912510,-1.812956,-0.397480,4.359486,3.888663,5.312979,-9.475618,-9.356254,5.783008,-1.286041,6.742233,-7.671113,-6.681754,5.152802,-4.279176,2.870815,3.472122,9.121674,9.760770,3.459738,3.620182,-6.637560,-6.807268,7.280595,0.751543,-0.200900,6.432075,6.824693,4.394301,3.624858,-6.722533,3.607739,-1.857630,0.500023,1.296124,-7.309350,-9.745706,0.671191,9.398173,-5.392137,-2.998855,0.673659,8.484037,2.535795,-9.805431,2.371037,-2.486367,-8.770997,6.850640,-9.048311,-8.381776,0.918288,6.639946,4.154279,-7.705997,7.110039,-0.926476,-8.296280,6.063405,-6.358325,-6.874181,4.639642,-5.328641,5.532563,2.411904,-0.040757,-3.200741,-5.577989,-8.809843,5.442127,3.009882,1.982379,1.380820,-0.846627,-1.455346,-2.358178,-5.213405,2.455943,3.366232,-1.749192,-1.633678,-7.541976,7.176421,-3.317079,-2.126676,-4.310012,-6.830444,0.767274,7.359343,-4.549666,-9.601538,4.164545,-6.054210,0.484301,7.862271,8.046508,7.413284,9.177253,-5.516559,-7.563700,2.680024,2.267145,0.500927,3.793955,-4.255204,-3.460784,5.938784,4.592708,-2.370503,7.773209,-0.815363,6.722420,5.447087,-5.697036,-5.254690,-7.150047,5.460222,5.941219,1.375884,-1.413634,-8.673627,-1.172080,-8.398050,-5.069624,7.966164,-8.471579,-3.081128,4.524623,-4.861588,9.945665,-9.330132,-3.553438,5.088941,-6.390926,0.364273,-9.553282,2.995534,4.020925,-9.706417,-9.870591,6.131828,-1.172979,-4.429991,6.008623,9.169794,1.039800,8.489444,-8.812941,1.598389,4.791743,8.954854,1.672409,-3.180088,-0.618499,-2.806672,-2.494589,6.347532,7.475537,-0.859788,5.087106,4.896716,-3.986287,-3.953115,-2.856452,0.060892,-8.693846,5.955592,-6.288830,-5.581492,6.549796,4.319422,5.110357,-7.654146,9.431071,2.986394,-4.770530,0.335118,8.326713,3.643730,-0.159320,3.118114,9.254275,-6.459562,5.756171,-0.445456,7.319839,-6.451702,1.046796,4.338846,-0.008398,4.408809,7.279715,5.528886,-7.452538,-7.947685,6.988850,-9.084634,6.967597,-0.395748,6.847932,4.668358,3.825623,8.772890,-9.439130,2.034193,-8.579842,0.001888,4.690915,-0.075400,-9.843026,-1.337745,4.358293,-8.811683,4.207859,4.221971,-7.695997,3.561906,-5.633763,-8.830860,6.731672,3.736528,-5.752500,-6.107074,7.666735,6.899507,8.527954,-5.289296,-1.326104,6.648503,4.618488,1.392628,6.609836,6.571148,5.935074,-5.286906,1.380001,-1.291294,4.248952,-9.029379,-0.874863,-8.846076,8.132705,-8.566143,1.716360,-7.449206,-5.774649,-0.286069,-1.277402,2.243120,4.539974,7.755684,-6.019787,-2.594716,-8.350833,-6.207112,9.442326,-9.929113,9.346580,-5.163077,9.131880,-3.644711,-3.937768,3.920605,-4.118332,3.166547,5.253056,8.700363,-0.287493,6.382972,-5.015593,5.264539,-5.670568,-3.839992,-3.532542,-2.581725,6.768380,8.337166,-0.592551,6.447594,-6.224748,-3.755588,0.915090,2.356644,-0.489224,-2.451510,-4.523191,-2.517022,8.024412,1.336129,9.113260,7.185530,-7.058869,7.329976,-2.746022,1.203972,5.627355,-3.077175,8.490102,-5.041344,-5.738014,-4.806023,3.046461,4.484127,-2.831253,-1.990242,-2.190430,-4.478896,9.026715,0.190927,-2.345313,-8.485877,7.205927,-1.448253,-6.504060,-6.930688,8.783655,4.187525,7.741014,-9.628867,2.488336,5.853738,-5.948092,-6.798439,2.813528,4.029343,7.891040,5.986271,-8.216140,4.350944,5.036256,1.473877,0.533076,5.089145,4.936446,-9.488991,-2.978377,0.836681,0.719879,-5.556969,5.558686,4.058946,6.098489,6.817586,-5.235328,-5.232302,-6.256726,3.074036,9.645190,-2.481304,-1.609742,4.030464,7.512378,6.180119,4.912859,9.079927,-7.079679,7.060197,-1.344964,8.705813,8.359315,-9.878114,-5.868047,9.562266,-6.533457,-5.213434,-7.242127,7.615960,-0.641134,0.809209,4.561192,8.860717,4.190722,1.478213,6.272772,-9.661654,7.140931,5.283203,-4.503294,9.852251,-7.557202,0.597502,6.402800,-9.998388,-4.638207,7.225245,3.639818,3.251038,6.566682,-6.932805,5.631525,-2.561510,0.425136,-3.348879,-2.075513,-9.671230,-0.297442,-7.629007,-8.203858,1.641326,-4.539686,-6.328243,6.182744,-8.589657,3.482535,-2.757158,5.692162,9.142805,-0.704042,8.614691,9.792306,0.589436,6.890320,9.953096,2.114437,-6.485837,-1.345948,4.958825,-0.160288,-9.510844,-0.064710,0.049197,6.232726,-3.528068,-2.869214,4.430528,7.189830,7.692007,-8.650851,-4.308011,-1.148208,1.833517,-2.423803,-9.270819,-8.909712,-6.769224,5.767100,-6.369637,-4.990491,-7.917116,-9.427985,-5.052602,9.951815,8.908232,-5.327351,5.123920,-3.110876,7.305209,2.169735,-6.583648,4.765504,-5.871591,-2.822767,3.184261,3.026256,8.820923,4.492843,9.351910,-9.004695,-0.541638,-3.630159,7.019348,-9.704925,9.050873,-4.942074,0.095787,-2.397103,7.230212,0.052365,5.535598,-8.832325,-4.539930,-0.105112,-9.909792,-2.344499,-4.478183,-1.007980,-6.679824,-3.156667,-9.177423,5.182980,-7.729110,0.543393,-3.625521,1.559285,9.453929,-9.921135,2.391838,0.644298,6.631270,2.607246,7.895940,7.693997,-8.544606,5.142734,1.529295,4.163932,7.482416,3.081204,2.338263,0.870857,-7.210059,-7.340169,9.309114,-5.739116,-3.110420,-5.901945,5.103498,2.409754,1.331391,1.013454,4.064105,4.061134,6.179305,-4.252746,5.268617,-2.533276,5.598899,3.115049,-6.855737,-2.248181,4.770480,-8.307960,-7.559132,3.251551,1.274045,-8.661152,8.533517,6.953807,-9.718483,0.124980,8.311707,-7.887330,-6.987343,3.397754,9.840213,2.330180,-1.378368,0.983177,6.402360,2.926615,8.572376,2.783840,3.045993,-5.553692,-2.467717,4.519709,8.223788,6.170194,9.004280,-5.787525,-6.529667,-5.762074,-8.808525,2.027942,-0.090577,-0.479685,7.698613,-0.020668,-6.524402,-0.380531,-6.409721,-2.430710,9.612727,7.124076,2.041015,6.344730,-4.598309,-3.342527,-9.905726,-8.717986,-4.080078,-9.008471,4.280734,-8.271759,9.320031,-2.842980,-0.082889,7.343040,-5.856903,6.153955,7.132958,7.657618,-5.361857,-8.748985,-0.464897,0.998706,3.557573,-6.785892,-1.430533,-0.356229,5.193536,4.333981,4.900920,-7.101765,4.442827,5.583016,-4.197603,-1.449583,6.545762,2.194401,-2.055352,-3.933358,3.734780,-2.435473,-5.744510,2.073029,9.484394,4.331825,-9.201299,1.835701,5.096635,-1.764720,1.140712,-1.516919,8.782353,-9.804423,-9.252069,9.837000,4.404323,6.737831,-2.042003,-7.720455,7.672076,-9.476535,0.127104,-2.747979,9.834651,-7.341616,1.022400,5.352154,2.586973,-0.249457,-7.500372,7.190341,9.281043,1.963070,9.135696,-4.595161,-0.605131,-4.718794,-7.898011,-9.658060,8.878781,-4.074905,-6.783501,7.551257,-2.244414,0.262844,1.893395,-8.648143,-1.070934,-7.084815,1.716642,-5.127026,-5.486867,3.618361,6.174920,-2.291589,5.327418,-3.403853,-1.280792,8.100025,7.188724,3.801838,7.804399,-3.254902,-5.059476,7.259331,3.065607,2.261691,8.528176,-8.132819,-1.378897,2.867134,7.250535,2.404000,-1.500686,-3.394212,-2.183502,-8.207775,-9.234717,5.849574,-5.982796,-4.604606,-1.768592,3.125701,4.956910,4.952216,-7.035040,2.667944,-2.979328,5.618279,7.803606,-2.787110,8.014270,4.320703,5.814733,-7.954797,4.647813,7.583424,-6.851166,7.738028,-2.506596,-4.109774,-2.891871,5.355670,-1.640144,5.681458,-2.504727,9.483766,-2.005151,2.801333,7.407887,7.004961,3.771366,9.789386,1.669989,3.330004,1.751025,-3.379391,4.074476,-0.385597,-0.091932,8.517704,2.410232,9.773244,2.088752,-7.082235,-0.800536,1.125765,-9.541431,-5.698359,-5.096644,-6.662242,9.543774,4.115379,-3.677793,-2.981077,1.453407,9.387912,4.927674,-3.889558,-6.093465,8.467609,0.777045,-3.188851,9.244809,5.210233,-6.077198,2.724829,7.656329,-5.417943,-1.130140,-6.840039,-5.059234,5.362799,-7.309621,-3.768514,-7.648586,-3.057232,-2.409113,7.456506,2.376918,4.913578,-6.184800,3.098298,1.007874,5.490236,-6.477479,4.556476,-8.212791,-1.533934,5.014155,0.469182,8.611403,3.688831,-6.523096,8.424309,5.207389,2.133688,-0.065279,1.260384,-2.647758,4.445321,8.904615,2.439395,9.666941,-4.338837,-1.826670,-1.484823,0.507004,9.054335,2.494311,8.504943,-9.970101,-0.196757,7.448231], dtype = "float64")#candidate|14476|(1716,)|const|float64
call_14475 = relay.TupleGetItem(func_12941_call(relay.reshape(const_14476.astype('float64'), [1716,])), 1)
call_14477 = relay.TupleGetItem(func_12944_call(relay.reshape(const_14476.astype('float64'), [1716,])), 1)
var_14490 = relay.var("var_14490", dtype = "float64", shape = (1716,))#candidate|14490|(1716,)|var|float64
bop_14491 = relay.minimum(const_14476.astype('int16'), relay.reshape(var_14490.astype('int16'), relay.shape_of(const_14476))) # shape=(1716,)
func_1362_call = mod.get_global_var('func_1362')
func_1365_call = mutated_mod.get_global_var('func_1365')
const_14498 = relay.const([-6.372984,8.300412,-5.836399,8.397158,3.657351,5.616897,0.559139,1.988738,8.355184,2.626652,7.904048,9.730789,-9.155853,8.595082,1.762758,3.606524,-4.693980,-8.803387,0.535994,4.895340,1.087900,2.213041,-8.770911,-9.515422,-5.982453,-5.759814,-1.915572,-5.206173,3.242017,-4.192806,-1.883851,-4.722180,-7.681731,6.823405,-6.085426,5.226706,9.391683,-8.633447,4.576926,2.292748,-8.191312,5.988400,-6.204029,8.567028,8.932224,-8.818401,-9.689004,-8.559421,4.341809,-5.190294,9.695718,9.264553,-8.640048,-1.643300,8.106367,1.812137,1.674851,-1.080919,5.719647,6.667979,-1.712918,-7.965617,-7.920304,9.184024,8.296997,2.293343,2.819167,4.749596,3.322492,3.917268,-9.854633,-0.049387,5.529241,7.869694,7.891087,3.729732,-4.388342,-8.709882,6.435077,-0.366421,7.313858,9.940588,-4.710624,-9.333569,-7.413840,-6.562481,-8.220574,-2.113327,-0.581705,-5.524425], dtype = "float32")#candidate|14498|(90,)|const|float32
call_14497 = relay.TupleGetItem(func_1362_call(relay.reshape(const_14498.astype('float32'), [10, 9, 1]), relay.reshape(call_14475.astype('float64'), [2, 3, 6]), ), 1)
call_14499 = relay.TupleGetItem(func_1365_call(relay.reshape(const_14498.astype('float32'), [10, 9, 1]), relay.reshape(call_14475.astype('float64'), [2, 3, 6]), ), 1)
func_12445_call = mod.get_global_var('func_12445')
func_12448_call = mutated_mod.get_global_var('func_12448')
const_14511 = relay.const(-10, dtype = "int8")#candidate|14511|()|const|int8
call_14510 = relay.TupleGetItem(func_12445_call(relay.reshape(const_14511.astype('int8'), [])), 2)
call_14512 = relay.TupleGetItem(func_12448_call(relay.reshape(const_14511.astype('int8'), [])), 2)
uop_14516 = relay.log10(call_14475.astype('float64')) # shape=(2, 3, 6)
uop_14518 = relay.log10(call_14477.astype('float64')) # shape=(2, 3, 6)
output = relay.Tuple([call_14461,bop_14491,call_14497,const_14498,call_14510,const_14511,uop_14516,])
output2 = relay.Tuple([call_14462,bop_14491,call_14499,const_14498,call_14512,const_14511,uop_14518,])
func_14528 = relay.Function([var_14490,], output)
mod['func_14528'] = func_14528
mod = relay.transform.InferType()(mod)
var_14529 = relay.var("var_14529", dtype = "float64", shape = (1716,))#candidate|14529|(1716,)|var|float64
output = func_14528(var_14529)
func_14530 = relay.Function([var_14529], output)
mutated_mod['func_14530'] = func_14530
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10332_call = mod.get_global_var('func_10332')
func_10334_call = mutated_mod.get_global_var('func_10334')
call_14544 = relay.TupleGetItem(func_10332_call(), 1)
call_14545 = relay.TupleGetItem(func_10334_call(), 1)
output = call_14544
output2 = call_14545
func_14556 = relay.Function([], output)
mod['func_14556'] = func_14556
mod = relay.transform.InferType()(mod)
output = func_14556()
func_14557 = relay.Function([], output)
mutated_mod['func_14557'] = func_14557
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10963_call = mod.get_global_var('func_10963')
func_10964_call = mutated_mod.get_global_var('func_10964')
call_14590 = func_10963_call()
call_14591 = func_10963_call()
output = call_14590
output2 = call_14591
func_14605 = relay.Function([], output)
mod['func_14605'] = func_14605
mod = relay.transform.InferType()(mod)
mutated_mod['func_14605'] = func_14605
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14605_call = mutated_mod.get_global_var('func_14605')
call_14606 = func_14605_call()
output = call_14606
func_14607 = relay.Function([], output)
mutated_mod['func_14607'] = func_14607
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11609_call = mod.get_global_var('func_11609')
func_11611_call = mutated_mod.get_global_var('func_11611')
call_14631 = func_11609_call()
call_14632 = func_11609_call()
func_6499_call = mod.get_global_var('func_6499')
func_6505_call = mutated_mod.get_global_var('func_6505')
var_14642 = relay.var("var_14642", dtype = "float64", shape = (210,))#candidate|14642|(210,)|var|float64
const_14643 = relay.const([[-4,5,10,4,-6,-7],[-1,8,5,-9,-2,5],[8,1,-7,2,9,-1],[-3,-8,5,10,2,-3],[-3,10,-1,-3,4,7],[-3,5,6,3,-1,8],[8,-2,-5,-7,-1,6]], dtype = "int8")#candidate|14643|(7, 6)|const|int8
const_14644 = relay.const([9.215293,6.692933,4.147921,6.744333,5.578992,3.913392,-4.582533,5.035932,6.384772,-0.656206,2.208637,2.323642,-0.433749,3.049957,4.824623,6.132715,-2.345164,-4.844645,-1.614422,1.777635,6.989017,-8.230784,-5.137536,-5.135722,4.788901,2.842266,2.990162,-2.034093,8.782717,-8.541056,-6.549611,4.146161,-1.305696,-5.805598,7.743926,-2.932807], dtype = "float64")#candidate|14644|(36,)|const|float64
var_14645 = relay.var("var_14645", dtype = "float32", shape = (2112,))#candidate|14645|(2112,)|var|float32
call_14641 = relay.TupleGetItem(func_6499_call(relay.reshape(var_14642.astype('float64'), [7, 10, 3]), relay.reshape(const_14643.astype('int8'), [7, 6]), relay.reshape(const_14644.astype('float64'), [36, 1]), relay.reshape(var_14645.astype('float32'), [2112,]), ), 2)
call_14646 = relay.TupleGetItem(func_6505_call(relay.reshape(var_14642.astype('float64'), [7, 10, 3]), relay.reshape(const_14643.astype('int8'), [7, 6]), relay.reshape(const_14644.astype('float64'), [36, 1]), relay.reshape(var_14645.astype('float32'), [2112,]), ), 2)
func_12865_call = mod.get_global_var('func_12865')
func_12866_call = mutated_mod.get_global_var('func_12866')
call_14672 = relay.TupleGetItem(func_12865_call(), 0)
call_14673 = relay.TupleGetItem(func_12866_call(), 0)
func_10332_call = mod.get_global_var('func_10332')
func_10334_call = mutated_mod.get_global_var('func_10334')
call_14687 = relay.TupleGetItem(func_10332_call(), 1)
call_14688 = relay.TupleGetItem(func_10334_call(), 1)
output = relay.Tuple([call_14631,call_14641,var_14642,const_14643,const_14644,var_14645,call_14672,call_14687,])
output2 = relay.Tuple([call_14632,call_14646,var_14642,const_14643,const_14644,var_14645,call_14673,call_14688,])
func_14689 = relay.Function([var_14642,var_14645,], output)
mod['func_14689'] = func_14689
mod = relay.transform.InferType()(mod)
mutated_mod['func_14689'] = func_14689
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14689_call = mutated_mod.get_global_var('func_14689')
var_14691 = relay.var("var_14691", dtype = "float64", shape = (210,))#candidate|14691|(210,)|var|float64
var_14692 = relay.var("var_14692", dtype = "float32", shape = (2112,))#candidate|14692|(2112,)|var|float32
call_14690 = func_14689_call(var_14691,var_14692,)
output = call_14690
func_14693 = relay.Function([var_14691,var_14692,], output)
mutated_mod['func_14693'] = func_14693
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14042_call = mod.get_global_var('func_14042')
func_14043_call = mutated_mod.get_global_var('func_14043')
call_14705 = relay.TupleGetItem(func_14042_call(), 0)
call_14706 = relay.TupleGetItem(func_14043_call(), 0)
output = relay.Tuple([call_14705,])
output2 = relay.Tuple([call_14706,])
func_14724 = relay.Function([], output)
mod['func_14724'] = func_14724
mod = relay.transform.InferType()(mod)
mutated_mod['func_14724'] = func_14724
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14724_call = mutated_mod.get_global_var('func_14724')
call_14725 = func_14724_call()
output = call_14725
func_14726 = relay.Function([], output)
mutated_mod['func_14726'] = func_14726
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8608_call = mod.get_global_var('func_8608')
func_8609_call = mutated_mod.get_global_var('func_8609')
call_14734 = func_8608_call()
call_14735 = func_8608_call()
func_976_call = mod.get_global_var('func_976')
func_979_call = mutated_mod.get_global_var('func_979')
var_14741 = relay.var("var_14741", dtype = "uint64", shape = ())#candidate|14741|()|var|uint64
var_14742 = relay.var("var_14742", dtype = "uint64", shape = (180,))#candidate|14742|(180,)|var|uint64
call_14740 = func_976_call(relay.reshape(var_14741.astype('uint64'), []), relay.reshape(var_14742.astype('uint64'), [5, 9, 4]), )
call_14743 = func_976_call(relay.reshape(var_14741.astype('uint64'), []), relay.reshape(var_14742.astype('uint64'), [5, 9, 4]), )
func_4703_call = mod.get_global_var('func_4703')
func_4706_call = mutated_mod.get_global_var('func_4706')
var_14753 = relay.var("var_14753", dtype = "float64", shape = (560,))#candidate|14753|(560,)|var|float64
call_14752 = relay.TupleGetItem(func_4703_call(relay.reshape(var_14753.astype('float64'), [10, 8, 7]), relay.reshape(var_14753.astype('float64'), [10, 8, 7]), ), 0)
call_14754 = relay.TupleGetItem(func_4706_call(relay.reshape(var_14753.astype('float64'), [10, 8, 7]), relay.reshape(var_14753.astype('float64'), [10, 8, 7]), ), 0)
func_8701_call = mod.get_global_var('func_8701')
func_8703_call = mutated_mod.get_global_var('func_8703')
call_14759 = relay.TupleGetItem(func_8701_call(), 0)
call_14760 = relay.TupleGetItem(func_8703_call(), 0)
func_9581_call = mod.get_global_var('func_9581')
func_9585_call = mutated_mod.get_global_var('func_9585')
const_14762 = relay.const([-7.661221,9.568287,-5.782531,0.610209,7.303966,2.281695,-4.488702,-6.208135,-1.851639,-4.897967,-5.314130,-9.949074,4.922946,-3.183600,1.853334,9.268686,-3.758130,0.092489,9.321568,-9.690773,8.424542,-3.814070,9.536621,-3.182734,-4.094591,6.691022,8.503671,2.614954,0.660725,7.790855,-1.200940,-3.412989,-1.033320,4.816125,2.028042,-7.669432], dtype = "float64")#candidate|14762|(36,)|const|float64
const_14763 = relay.const([[1,-1,-7,-4,3,-8,3,2,1,1,-7,-2,-1,-6,-2,-3,2,8,2,4,7,-2,-10,-2],[-6,-2,5,9,2,1,8,5,-7,-9,-6,4,-7,-4,1,-9,-8,1,4,9,5,-9,3,3],[8,-1,-7,8,1,10,-9,-8,-9,-10,9,10,-9,-7,5,-4,-1,7,-2,-1,-8,-5,-9,6],[4,-4,7,-8,-3,1,-6,10,2,7,-4,-6,-9,-9,-6,8,-1,2,6,-4,-7,-8,-2,10]], dtype = "uint8")#candidate|14763|(4, 24)|const|uint8
call_14761 = relay.TupleGetItem(func_9581_call(relay.reshape(call_14759.astype('float32'), [3, 12, 4]), relay.reshape(const_14762.astype('float64'), [36,]), relay.reshape(const_14763.astype('uint8'), [96,]), ), 4)
call_14764 = relay.TupleGetItem(func_9585_call(relay.reshape(call_14759.astype('float32'), [3, 12, 4]), relay.reshape(const_14762.astype('float64'), [36,]), relay.reshape(const_14763.astype('uint8'), [96,]), ), 4)
output = relay.Tuple([call_14734,call_14740,var_14741,var_14742,call_14752,var_14753,call_14759,call_14761,const_14762,const_14763,])
output2 = relay.Tuple([call_14735,call_14743,var_14741,var_14742,call_14754,var_14753,call_14760,call_14764,const_14762,const_14763,])
func_14766 = relay.Function([var_14741,var_14742,var_14753,], output)
mod['func_14766'] = func_14766
mod = relay.transform.InferType()(mod)
var_14767 = relay.var("var_14767", dtype = "uint64", shape = ())#candidate|14767|()|var|uint64
var_14768 = relay.var("var_14768", dtype = "uint64", shape = (180,))#candidate|14768|(180,)|var|uint64
var_14769 = relay.var("var_14769", dtype = "float64", shape = (560,))#candidate|14769|(560,)|var|float64
output = func_14766(var_14767,var_14768,var_14769,)
func_14770 = relay.Function([var_14767,var_14768,var_14769,], output)
mutated_mod['func_14770'] = func_14770
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13045_call = mod.get_global_var('func_13045')
func_13046_call = mutated_mod.get_global_var('func_13046')
call_14818 = relay.TupleGetItem(func_13045_call(), 1)
call_14819 = relay.TupleGetItem(func_13046_call(), 1)
output = call_14818
output2 = call_14819
func_14844 = relay.Function([], output)
mod['func_14844'] = func_14844
mod = relay.transform.InferType()(mod)
mutated_mod['func_14844'] = func_14844
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14844_call = mutated_mod.get_global_var('func_14844')
call_14845 = func_14844_call()
output = call_14845
func_14846 = relay.Function([], output)
mutated_mod['func_14846'] = func_14846
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13967_call = mod.get_global_var('func_13967')
func_13969_call = mutated_mod.get_global_var('func_13969')
call_14854 = relay.TupleGetItem(func_13967_call(), 1)
call_14855 = relay.TupleGetItem(func_13969_call(), 1)
output = relay.Tuple([call_14854,])
output2 = relay.Tuple([call_14855,])
func_14856 = relay.Function([], output)
mod['func_14856'] = func_14856
mod = relay.transform.InferType()(mod)
output = func_14856()
func_14857 = relay.Function([], output)
mutated_mod['func_14857'] = func_14857
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14879 = relay.var("var_14879", dtype = "float32", shape = (10, 12, 10))#candidate|14879|(10, 12, 10)|var|float32
uop_14880 = relay.asinh(var_14879.astype('float32')) # shape=(10, 12, 10)
func_12445_call = mod.get_global_var('func_12445')
func_12448_call = mutated_mod.get_global_var('func_12448')
const_14887 = relay.const(-4, dtype = "int8")#candidate|14887|()|const|int8
call_14886 = relay.TupleGetItem(func_12445_call(relay.reshape(const_14887.astype('int8'), [])), 6)
call_14888 = relay.TupleGetItem(func_12448_call(relay.reshape(const_14887.astype('int8'), [])), 6)
uop_14889 = relay.rsqrt(uop_14880.astype('float64')) # shape=(10, 12, 10)
bop_14897 = relay.floor_divide(call_14886.astype('float64'), const_14887.astype('float64')) # shape=(3, 12, 4)
bop_14900 = relay.floor_divide(call_14888.astype('float64'), const_14887.astype('float64')) # shape=(3, 12, 4)
func_9665_call = mod.get_global_var('func_9665')
func_9666_call = mutated_mod.get_global_var('func_9666')
call_14932 = relay.TupleGetItem(func_9665_call(), 0)
call_14933 = relay.TupleGetItem(func_9666_call(), 0)
output = relay.Tuple([uop_14889,bop_14897,call_14932,])
output2 = relay.Tuple([uop_14889,bop_14900,call_14933,])
func_14938 = relay.Function([var_14879,], output)
mod['func_14938'] = func_14938
mod = relay.transform.InferType()(mod)
mutated_mod['func_14938'] = func_14938
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14939 = relay.var("var_14939", dtype = "float32", shape = (10, 12, 10))#candidate|14939|(10, 12, 10)|var|float32
func_14938_call = mutated_mod.get_global_var('func_14938')
call_14940 = func_14938_call(var_14939)
output = call_14940
func_14941 = relay.Function([var_14939], output)
mutated_mod['func_14941'] = func_14941
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8907_call = mod.get_global_var('func_8907')
func_8909_call = mutated_mod.get_global_var('func_8909')
call_14943 = relay.TupleGetItem(func_8907_call(), 0)
call_14944 = relay.TupleGetItem(func_8909_call(), 0)
func_14689_call = mod.get_global_var('func_14689')
func_14693_call = mutated_mod.get_global_var('func_14693')
var_14954 = relay.var("var_14954", dtype = "float64", shape = (210,))#candidate|14954|(210,)|var|float64
const_14955 = relay.const([-4.063385,5.736080,9.201033,0.415264,0.309236,5.902450,-1.772066,5.084279,0.926868,-1.738636,-3.110681,-5.549678,-4.959893,-5.429414,-4.753151,1.161370,6.465311,-4.428686,4.767599,-5.830863,-6.207566,-6.674033,2.098816,0.685793,-4.626317,-7.845687,-0.601020,4.395753,-3.756209,5.065574,2.936231,-3.682983,6.225375,5.473809,-9.185483,-0.295311,-9.738151,3.068690,-3.209926,-1.896143,1.321511,4.063408,-9.064410,-0.965394,-9.470908,7.378308,-5.401770,-5.590980,-5.327315,-5.013569,3.420666,7.065864,-3.973136,6.807590,-5.737876,8.507277,7.784886,5.095347,8.938401,-4.214038,5.874790,7.472821,1.200897,-4.634251,-8.401953,7.147286,3.010747,7.330778,1.390787,-4.298746,-1.507686,1.055863,-3.619577,1.274259,-2.474269,-8.850995,-1.458361,8.100758,1.826385,9.909356,5.775801,-0.551112,-2.784293,-8.831410,-9.277939,5.342928,-2.091094,-3.499758,3.227361,-8.368064,-1.513250,-9.376579,-2.249154,-9.902530,0.220517,7.353950,-2.697700,6.040099,3.408640,8.634268,-5.557911,4.187558,9.634178,8.089382,0.421550,9.669425,-3.493263,-1.344813,2.275510,0.685594,1.012828,0.931964,-5.337707,-2.954236,-8.942072,8.279413,-0.502739,9.403208,5.249061,-7.956945,-3.187978,-6.342398,9.561534,-7.875451,2.249846,3.851304,-5.297514,0.863213,2.497972,3.333163,0.263729,-4.966778,3.927471,1.153273,8.042457,6.339645,4.203819,-2.805442,0.326281,-8.078084,-1.139689,7.590227,-6.212872,9.089429,-8.523699,-7.541612,-6.285453,2.807760,-4.861609,-0.510192,-8.137760,-5.906826,9.240795,8.327667,0.095922,4.070912,1.861717,-8.111741,9.541764,-6.837878,-6.056620,9.846612,2.492961,-2.123968,-0.870826,1.925067,4.398351,-9.368321,4.288774,3.972300,0.091145,-4.503171,6.977812,8.161610,9.171976,-2.559872,-1.676982,-3.032363,-2.426303,3.666982,1.576049,8.798477,-8.555891,3.430360,6.942453,-0.126320,1.125655,-2.862608,-1.958044,-9.071232,6.157850,1.007947,-8.264299,6.779336,0.171291,6.062350,-3.333744,6.041237,4.611593,-2.283754,1.334935,3.668848,9.752305,6.577073,6.259469,2.621551,-2.271182,-3.936936,-5.243325,3.053395,8.630363,-8.735447,3.912759,-7.258672,-5.586313,-4.619321,-9.786411,5.866421,4.402788,2.855861,-5.649502,9.817838,7.448916,4.185120,2.560665,6.795157,-9.628538,-9.764772,5.421835,-9.805131,0.506980,9.018787,-0.395786,-2.762295,1.810134,2.236225,-6.854954,-4.215610,-0.907804,-6.588719,-6.249216,-6.506950,8.378680,3.969965,-5.905998,0.358388,-4.835840,0.939630,7.925012,-3.999902,6.734952,-3.263518,-7.827034,8.195214,-7.362817,-1.206863,-3.713855,2.360542,-9.008251,-0.242323,-4.194250,-2.586383,5.710368,-9.230143,1.955819,9.577380,-4.818937,1.459701,5.112600,2.636135,-3.429605,-5.953449,7.773887,-6.888848,-4.365912,-4.517565,-9.787763,2.913442,-0.333705,-9.546639,-3.948107,-8.957145,3.499704,9.826742,-5.909450,3.625781,9.536014,7.964648,3.480512,-8.122993,5.797707,9.077351,7.067928,5.692052,-0.827575,-9.813072,3.897098,7.508490,-8.199582,8.406854,6.420401,7.025322,8.197058,4.914087,-3.434189,-6.117220,-3.155650,-2.469041,4.847609,0.134879,6.918569,-9.099907,-5.833497,-9.620660,6.751356,-1.811492,-8.383942,2.260422,-3.086928,-2.823430,-0.613832,-5.297805,-6.462454,-7.053754,-0.149851,2.264058,6.409551,7.339692,4.755073,-8.067315,2.703044,-7.843125,-7.419422,7.633388,-1.335058,-4.748966,9.933878,-3.885202,2.209022,7.605907,-3.697913,3.836718,-0.451292,-1.397947,-6.336882,-9.212401,9.221400,4.499444,-4.896249,-3.731875,9.441351,2.819475,-6.692464,-7.439924,9.649927,8.292066,0.129384,6.685789,4.079814,9.997913,9.666733,-3.211123,-1.493527,-8.177929,-1.104914,-2.034864,3.165312,-2.190864,6.031033,3.558151,-0.983737,-9.749846,-5.717767,-9.124236,3.359100,7.084300,2.162470,1.064191,-8.781366,7.563346,1.008694,-9.949975,5.975789,-8.603111,0.571155,5.363295,-3.308381,9.359769,-5.860412,4.612964,-2.046185,-0.131718,-2.009651,1.820540,1.338488,6.899121,-0.632533,-9.563403,7.041468,-3.876061,-5.684298,-9.073188,-8.897623,2.627902,7.191685,-3.958274,-0.959326,-5.906915,0.213989,8.424555,-8.213792,9.524504,-7.110486,-5.349719,-7.830856,-2.201686,7.801114,1.372179,1.397301,-2.666981,0.950915,-9.085802,1.125685,-1.097431,-4.271286,3.364408,0.475362,-6.322361,-5.694994,4.533019,7.603103,-0.794959,-3.170074,-5.281005,-1.800761,3.411471,-0.996323,2.424415,-7.072894,-6.415798,3.571837,3.290983,-5.897896,-8.568868,-7.767790,5.939740,-1.847031,-7.031803,5.682152,-5.588055,4.713681,-1.980959,8.614590,3.860700,0.212288,-8.924957,-5.820717,0.559656,0.355552,3.947421,1.702296,-6.930663,-9.226137,2.568815,1.096973,-1.289971,5.961895,-6.446987,-3.516784,-6.831149,6.539397,8.180329,-7.385635,-3.514224,-9.072137,1.967146,-2.973147,1.327707,1.171962,8.429235,-5.274816,7.083248,-8.543937,-1.948531,-1.832796,-8.183353,-2.340520,3.799714,0.520812,-5.634710,9.622116,9.968934,9.224159,2.136560,5.316774,-3.183936,-6.424984,3.426858,3.308017,6.127236,-7.427796,-1.060300,4.322137,6.894686,4.824679,7.007948,-5.770688,3.717672,0.714582,-9.094745,7.478565,9.751919,-4.276815,-4.975641,-8.519547,9.992951,6.756657,8.372375,6.164525,2.199806,9.364529,-7.745115,-8.752865,9.996255,-3.674204,-7.508082,-9.531013,1.706512,0.720554,5.196647,6.853939,-2.880926,-6.033867,-4.408617,4.366885,-1.614163,-4.953276,-6.732762,-7.643078,-7.540664,0.591317,-3.493010,-3.003567,-3.480163,7.961297,-3.107038,0.121159,-2.197404,-1.154946,2.617263,-5.791924,-1.375669,-2.252602,6.702069,9.256744,2.329764,0.825266,-9.857165,2.793165,8.002476,-2.105978,-6.982917,-4.105622,8.053670,3.318330,-1.695143,2.514446,-2.479345,6.236392,-1.339599,4.677151,2.937683,-3.422307,9.727548,0.101104,-6.604360,-7.137005,3.175261,6.665618,3.435084,9.809498,0.621723,4.589424,1.474461,1.333828,6.935657,9.035511,9.603812,-7.658684,-3.450428,8.730722,-0.675638,6.545635,3.833415,-3.447620,3.858883,-6.844804,-1.471129,-9.079718,8.641482,-7.996434,-5.514909,2.967441,0.706739,-4.789646,6.500838,-2.817850,2.621570,1.091381,0.591649,-4.206134,-3.195469,5.863598,-1.845500,-8.854540,2.775831,-0.264119,-3.960679,-2.585864,0.292402,2.265380,-0.128196,-5.474246,6.907454,-5.565722,-5.005896,1.831769,-1.362074,6.925973,-3.077382,-3.286600,-0.563034,-9.199428,-5.943874,-0.235447,8.963012,3.151840,-4.230393,-4.927766,2.384290,-2.247284,2.412570,-5.092011,-7.938053,-0.874782,3.582375,-2.408529,5.027172,3.360750,4.355282,5.688705,3.009763,9.722406,0.406819,-5.045478,-6.565390,-7.003228,-1.541068,3.724537,-6.403995,-6.814444,-3.305857,-8.857750,2.221631,-2.256147,2.698443,6.264622,-3.637426,-9.290570,-2.053235,-4.260388,2.863266,-6.835020,-4.027784,-1.793129,3.859084,-9.846100,-5.363653,3.826755,-0.359402,-1.367721,-2.030127,4.823713,-0.938092,-2.131381,-9.215635,-3.246521,5.496223,6.200978,-5.718858,-0.829002,-0.274581,-0.730289,9.910018,-1.440219,4.553812,-9.502952,3.734286,-1.127886,0.553220,-5.836332,4.251334,-5.773041,-8.962072,-9.744747,6.487489,-0.675731,-0.172747,-0.928365,5.174438,0.508364,-0.517644,-3.108409,5.301520,7.650167,8.315270,-1.623182,-6.775262,9.286439,5.093438,-7.041804,-9.592919,-6.460364,9.938470,8.546838,-1.603667,7.049387,-4.166330,-0.091670,-9.844985,-6.406620,7.485739,-5.184542,2.942168,-2.772462,-8.164569,-1.825495,-0.986531,8.061990,4.408715,-0.464388,2.400157,-0.473098,2.093059,-4.287613,2.802671,5.163973,3.624239,-4.421671,1.177626,6.295479,1.989662,-1.273777,8.523318,4.255780,-2.739537,-2.938762,8.832266,8.240612,3.623532,-0.513660,1.328452,3.992819,-4.959391,1.185723,4.867082,8.555671,-7.882727,-5.191166,6.678477,4.988343,4.704840,2.381297,-7.251248,1.221809,-6.746897,-7.491327,3.954916,4.828966,-1.370860,6.301653,7.411213,-5.211255,-0.435740,3.513073,4.497447,-9.811927,-1.654242,2.517824,-5.865959,-3.998858,8.615948,-8.353396,6.174039,-3.632091,9.803164,1.533936,-1.239415,-2.338570,-1.674427,-5.491803,-9.180035,-6.756635,-8.746028,-9.238482,-2.290148,-4.934096,7.882011,-2.401628,-0.778641,-1.380818,-4.519404,-3.559941,-7.039798,1.135643,7.489714,-0.076423,-5.596903,-9.238823,-5.087290,-5.994786,-0.672541,-9.879034,5.145426,-1.969739,1.686910,0.899282,-0.086212,-9.403590,3.053571,2.963273,6.262054,-9.277403,-8.573457,9.463709,9.857671,9.593111,-7.321019,-7.726925,-7.848116,9.114123,2.264605,5.015352,-8.971079,-3.830093,6.250940,-0.066903,4.199519,6.415929,-0.915393,0.428262,-5.846602,2.521176,-6.009519,-9.259784,-1.082370,2.911787,5.173386,5.096491,-1.639095,4.577171,0.497899,8.063716,-9.879722,-7.524329,6.061433,5.894895,-1.512799,-8.266912,-7.555492,6.113803,-2.812522,-2.599366,8.062378,9.072738,-7.334809,5.771106,1.764519,-0.119568,2.391425,-4.665226,-4.550644,-0.683386,-4.499336,-5.645931,-8.825831,6.458369,-7.487346,-4.895522,3.642980,2.627509,-5.321511,1.265613,2.223498,8.495694,-2.613855,7.651579,7.984689,3.141386,-2.088625,-5.388419,7.778369,6.412772,-8.617614,1.589888,-5.072435,3.060110,5.559203,-8.958592,-5.721587,-0.743811,3.649298,-0.313716,5.344090,-1.824804,2.287279,-0.294873,-2.546068,-7.320758,3.922125,-8.312890,-4.930675,-1.635038,-6.517206,4.068667,4.935239,8.083377,4.465554,5.802264,4.406555,6.794071,0.214772,6.198158,0.603268,-0.092700,7.771272,-2.448553,-5.218454,4.397007,3.380100,3.107372,-9.312745,9.571877,-8.273246,4.374925,-9.424578,-3.449548,-4.200977,2.037539,1.505328,1.343638,-3.648694,8.151248,-9.153434,0.504367,0.327200,-0.955945,1.194169,2.756258,4.032366,1.281159,5.442106,1.196645,8.932602,-4.024625,-0.881597,9.878377,7.396751,4.437268,-7.465250,-2.740584,0.989715,2.883112,-7.413434,8.456474,1.334896,-8.608865,-5.728140,2.037449,-7.925039,2.845909,7.403998,-9.620237,0.069708,-0.340939,-6.774169,5.410590,-0.987389,6.660083,3.947020,-1.524327,2.919049,-7.013008,-4.193403,-3.656119,8.455003,3.660261,-6.737141,9.678078,6.479531,5.597039,-1.605526,7.673865,-1.898038,-7.162541,2.586249,-0.320467,4.048566,0.280607,-3.441325,-8.940236,1.088664,-4.024065,8.486782,0.105833,-6.449217,8.648073,9.826337,0.388690,7.760049,9.272841,-1.945592,2.120837,-8.424136,7.837613,-5.975943,-3.034377,8.065790,-7.974955,9.301950,1.784993,-8.953084,-3.017191,5.912528,2.445230,4.009430,-9.130068,1.163688,5.728410,-9.853908,-9.308125,5.327155,-1.668362,-1.852331,9.453417,-3.178001,7.088413,3.756933,-2.349212,9.090297,8.952128,-4.044805,-4.296325,-5.300715,-9.320196,-1.333323,2.860045,2.769111,-9.671641,-0.528909,6.348474,-1.269219,-3.228961,4.849000,-1.181834,-6.704494,9.727460,6.859342,-0.417785,-3.761041,-4.661692,-3.402061,-3.193609,8.065594,7.386155,-6.998901,-3.172795,3.610580,0.517709,4.163106,6.376320,1.404181,9.753630,-3.592706,-2.238734,-5.905851,1.933147,3.501145,-2.810372,-8.272195,-7.313154,6.704206,5.476629,5.991277,4.281727,-6.415085,6.056785,5.714301,4.920408,-4.577675,-0.829308,-6.477350,6.379318,8.662146,2.027133,1.840979,3.526356,-7.878410,5.372543,8.738049,8.686222,1.667801,8.162386,3.673441,-5.488809,3.908156,-6.490914,-2.508605,3.312116,5.091362,2.584753,-2.581655,3.253203,8.343810,5.645234,6.589081,1.770310,8.932934,-9.971349,7.337118,-8.001178,5.542771,-7.511801,0.669351,-4.587975,-2.312951,6.205142,-9.586564,-5.717637,-4.236039,-1.294957,-1.971504,-3.678419,-2.260094,-0.605255,-5.274064,-0.336699,9.229703,6.222328,-5.953361,0.248195,-9.596313,-6.403257,-7.077290,-8.522740,-4.558820,-0.129412,-5.352060,-0.722594,3.287052,-5.074477,2.787857,-8.817980,-4.333808,9.868057,5.457058,4.149164,-2.540033,-9.981683,-9.057591,2.020013,9.181640,7.237724,-3.142253,-7.608475,-8.453421,7.888361,-7.062562,-1.552754,-6.508542,7.082928,1.681490,5.397938,-3.551422,-7.092883,-7.069909,1.832636,4.844730,-1.158974,-8.027609,-6.721329,0.611492,2.471000,5.656044,-7.949451,9.354304,0.115387,9.544633,-4.155796,-1.612934,-8.720387,-5.713099,-0.715351,4.689047,-7.330947,7.116836,-3.118352,-8.129687,-2.105846,-6.822602,4.547980,1.802248,-8.206029,7.105981,-4.700543,6.729978,2.295921,7.795661,8.152993,-2.101646,-7.625919,-1.968691,-6.769424,-1.164994,-7.259565,-6.861156,7.998257,-9.614071,-5.148580,-6.315796,3.933017,6.954004,-7.833276,-4.626514,9.307010,7.719576,0.545713,5.876280,-4.787316,-4.765652,-2.160599,8.447272,-8.491395,4.736734,4.899071,-6.618369,1.716688,6.091813,-3.908796,9.932919,-9.524014,1.410333,9.728982,-2.507525,6.069413,-6.873248,6.961419,6.505662,-9.718257,-4.585743,-1.868265,-0.957345,-8.721538,0.024418,-8.910380,5.045080,2.145040,-9.197201,4.131201,5.130068,5.963071,-3.013245,5.353942,5.973817,-9.873244,9.870283,-1.494814,-9.492488,-8.677709,4.507941,-0.794375,4.110358,1.678558,-7.575758,-4.371486,8.877196,-7.910684,-1.180377,6.074382,6.246435,1.021082,0.339422,-7.204598,3.621552,8.193358,7.515042,3.688883,-3.970815,-4.845361,1.201663,-9.016547,8.949250,-7.739708,-1.020845,6.308524,3.962138,-7.352934,-1.144205,-5.777988,5.792465,-0.306186,8.060699,-6.187179,-9.236009,8.809942,3.767418,5.183552,-7.838965,9.136494,6.201077,-0.234755,3.331934,1.542093,8.307237,1.047723,-6.623386,-5.537156,1.724204,7.958496,1.393523,2.665056,-0.947469,4.090289,-3.947673,2.929564,9.076139,-5.911792,-4.238157,-2.090634,8.876757,1.824335,4.352403,-5.204103,-5.298799,4.642079,-1.751666,-3.204650,3.567459,1.260941,-2.435876,9.366328,-3.548661,3.698608,-9.283343,-9.734575,1.577110,4.093584,7.372798,-7.711421,4.826810,-1.752202,-3.565115,-3.384706,-5.966718,-7.392011,-8.658806,4.974614,1.935090,7.987142,-6.976489,-0.038913,0.523690,4.138178,4.648022,-3.612178,0.599855,-8.278299,-5.333867,1.998594,-8.213278,2.853194,6.780214,5.781277,9.912659,-8.790569,-1.014746,-0.081388,-3.178473,6.011684,7.822672,-0.261435,-8.348866,-3.118638,2.685128,7.283048,3.293114,-8.674471,0.779535,-9.819294,4.447780,1.291208,3.968204,5.360281,4.849016,7.533258,1.362341,6.966844,-6.039342,-8.301696,7.095313,5.742836,-2.889371,1.294185,8.907155,2.013216,0.274853,-7.503075,-7.802430,-0.887266,-5.748313,-0.088000,-9.969089,9.806885,9.805185,-1.727332,-1.553831,-7.374206,-2.678117,-5.274164,1.091733,-5.691508,-4.964301,9.398660,-3.067201,-7.578193,2.368024,-5.238698,-7.262833,-2.154231,5.314928,-4.682453,-5.098481,1.456240,0.879591,-6.902488,4.789207,5.194672,0.498150,-6.350204,-3.468631,0.386404,7.970165,8.693432,3.122707,2.906472,1.152788,-8.006381,-7.572182,-8.061707,-4.616206,-3.841470,1.926700,4.789105,-6.849860,-5.259301,9.574740,-4.664145,-1.446508,-3.453978,4.517029,-2.634772,-2.914731,-0.007112,-9.376095,-1.049534,5.292267,-5.738843,-4.979782,-7.508272,3.994139,7.786559,-6.830623,1.726640,-3.766587,-4.385884,-3.009801,-1.385133,-4.683360,1.729542,8.973006,8.947572,8.880257,5.695624,7.811998,-7.602206,-2.349427,8.578870,-7.292410,8.422448,3.872865,-5.104992,5.864766,-2.165453,-7.452495,-2.197269,8.780400,-9.320783,-2.169979,-5.501398,2.986204,-8.277917,-5.942378,-4.076773,7.164950,0.464657,-0.223671,-8.127219,-1.429151,9.916230,-6.466851,-8.391986,6.645232,-6.210296,-5.765602,3.234640,-4.686951,-4.832174,-9.901632,2.119917,-7.960705,-0.114548,-5.134609,-4.815304,4.730570,2.909349,-6.256632,2.079887,9.015894,3.302378,-0.534345,3.110912,-8.792887,5.903896,5.819559,-8.859102,-8.604400,-0.231344,6.459546,0.834028,-7.544087,5.254148,7.516832,-8.625408,-2.769416,-1.003680,-4.669394,4.135662,2.082814,0.958725,6.455391,3.725877,-6.717570,8.399042,-7.821739,-7.439137,4.201144,6.962984,-1.835133,6.574898,0.389823,1.947269,-1.724384,3.153402,-3.270957,-7.962964,-5.821635,0.949999,1.131823,5.380010,4.902605,-2.107703,7.815015,6.539834,0.985175,-6.032958,9.479209,-0.518820,7.834988,2.572867,3.369452,1.727741,3.416119,-9.965623,8.962145,4.702591,-1.128727,-6.316534,0.352150,6.732646,-7.438850,-4.519059,-5.018780,2.576990,-6.864851,8.604488,-5.535724,6.647923,9.537671,-7.487353,7.937125,9.157256,9.944108,8.725604,-3.406153,6.431804,7.817185,-3.081884,9.750477,8.770771,-9.748257,0.838535,7.655335,5.190541,-8.011887,-1.513376,0.933756,0.438773,5.924020,5.145439,-4.568833,-1.052282,-0.724858,8.499866,9.931315,3.549309,4.179242,-0.543983,-2.679972,1.157518,-6.511245,-2.432174,6.578330,-7.291929,2.843304,-1.553225,2.270502,1.524126,3.150211,7.559674,8.512224,8.587424,1.424940,9.076920,1.805452,-1.784425,-6.366327,4.684466,0.793247,-5.460858,5.066723,-0.334372,-2.116234,2.961884,-6.293188,-0.161402,9.447461,-1.977217,3.511474,-1.866136,-3.793322,-5.479397,-4.961601,-8.514798,-7.491050,-5.796448,-8.205202,-9.177863,-1.014660,-2.776763,-9.395163,-4.704981,-3.956347,-8.586295,-0.571307,-2.179476,4.609392,-1.244627,-3.781432,3.241699,4.609431,5.550776,-7.009321,-9.018685,9.497584,8.028790,8.090617,0.669184,-4.987211,-6.014198,0.417967,9.442602,2.143482,-0.583843,2.411486,-7.868790,6.627090,-7.158714,6.956458,-7.917492,5.119535,-0.311532,1.489835,8.150120,9.087829,-2.209436,-7.763932,-1.317790,7.548912,-8.633375,-7.649706,-8.935325,-3.861889,-4.633231,6.989737,-0.125593,-2.625226,-6.859607,-0.563255,-4.954420,7.519220,-3.916421,-9.670187,5.674151,0.065958,-4.598048,0.257829,1.740829,6.926095,7.588113,-3.467419,-0.148585,7.778318,-9.628777,-6.757780,1.852581,-1.068417,7.802991,-0.430750,-5.502798,-3.513229,-7.849186,7.625460,1.585537,7.695365,-5.325669,-7.585669,-8.203035,1.557100,-6.954812,0.200153,8.942766,4.039373,0.154408,0.892475,-4.888536,-5.455904,5.742609,-3.549782,9.470801,-3.691552,-6.342343,-5.395957,-3.527290,7.424499,8.590053,-1.488316,-9.199791,7.070981,-7.783959,-9.510129,3.380369,3.387389,-8.878792,7.324290,7.774702,2.721524,8.772557,-7.589094,9.672053,-1.780516,5.109345,8.572415,-2.057099,8.386793,-7.821697,1.429793,-8.324343,-3.992907,6.480839,-9.146973,7.600553,-2.952715,5.884469,-9.287970,-7.684311,7.720622,-9.772908,-8.720303,-8.984070,4.590139,5.498465,-3.772372,4.271950,-8.616213,-8.864440,3.842939,3.642010,-3.216321,-5.321733,0.404554,1.302290,-7.753659,-1.423555,2.153762,-2.485064,6.548879,9.314528,-4.340603,-6.988795,3.191732,8.977316,8.978095,-0.829895,-5.532472,-1.472962,-5.608880,-7.822010,5.952026,4.109986,0.280482,0.211550,8.148978,-2.783382,3.874141,-1.922385,-5.804619,5.390838,-6.302738,0.776514,4.145063,3.506805,-3.065712,-8.525029,-7.246650,-1.579795,-3.227996,-0.452982,-9.069423,5.201009,6.319399,4.733336,0.737333,4.900915,-4.911754,-6.695024,2.755701,9.559596,-2.514333,9.243425,6.768700,-8.067313,-2.668074,8.578404,-3.605574,-9.067417,7.132369,9.739247,3.467133,-0.089169,9.905941,2.111328,-9.600059,-2.154216,-5.861679,3.340646,7.263368,0.168748,-4.944794,4.877472,5.048863,4.803977,5.357130,-2.227412,1.415983,-2.953198,6.980292,9.332624,3.449361,-4.958062,-2.944944,1.144309,-6.339364,7.982361,-0.666996,0.207077,-4.254257,-3.929471,4.719113,-0.811666,9.197581,6.060188,-4.717629,3.040715,2.448714,-5.506583,3.911541,4.410905,-7.785319,9.293483,4.893262,7.470186,3.965694,1.862358,-3.812252,5.440773,9.611664,-0.076020,-7.856334,3.803957,-7.850681,2.322341,1.044750,4.646950,1.867767,-3.727272,1.597616,-3.693709,5.564122,2.199028,-3.342068,-8.843942,5.978601,0.360141,-7.577192,2.458227,-4.078900,-0.092082,-8.946820,-5.222377,-1.891238,-1.527048,-8.736180,-6.761344,8.176219,6.652542,8.549538,0.405798,-1.387696,-4.275587,8.438052,7.713803,-4.666156,6.220531,4.444055,-5.642925,7.153667,9.134804,9.341260,1.583371,3.803676,-5.281172,-3.256264,-6.868777,4.554042,2.273072,-4.053390,-3.991532,7.116842,8.207304,0.829437,-2.622366,7.974570,-5.625137,-4.257634,7.013212,-3.943049,-3.638539,0.601485,-0.315901,8.428843,0.489583,-1.263354,-1.578561,1.168580,0.990424,1.797153,0.707010,4.607344,1.414043,-1.979629,-5.625404,4.228091,1.036727,1.733834,2.433746,-7.525616,-1.113020,-8.994587,-7.274381,5.084561,2.581492,8.786795,3.969487,-0.443436,-9.180464,2.920234,-1.306603,0.993186,0.908439,2.020783,2.670901,4.484181,-3.456581,-3.202029,3.734230,-4.877860,-8.980715,-8.862580,6.272673,9.523503,7.586437,-8.290925,1.665832,0.236940,-6.209096,4.075789,-8.008621,0.144231,-2.197844,7.019113,7.886906,-1.152435,-5.669611,6.748618,-0.434589,2.303380,8.759774,3.765459,-7.628733,9.631413,2.438741,-9.344458,6.847924,-2.049856,-5.909132,-7.971704,-8.578912,0.587631,3.519441,-5.931708,5.771282,3.840285,5.991899,6.712194,8.072002,-2.320062,9.984837,9.889029,-2.870248,5.765290,4.180243,8.983949,-5.980152,-0.231498,0.794276,6.357877,5.355694,-2.550380,1.266266,-0.058029,-0.049074,5.102898,6.052560,7.172513,8.038560,-2.371547,-7.543873,-1.788210,8.248240,-7.222092,0.503741,9.237409,-3.467735,5.850936,-5.034637,-2.843732,-3.816694,-6.623694,-0.005274,2.798303,-3.511181,4.921066,5.860718,-1.590591,-7.022620,-1.297949,-4.927054,-9.021133,1.748918,2.169294,5.774614,-7.276825], dtype = "float32")#candidate|14955|(2112,)|const|float32
call_14953 = relay.TupleGetItem(func_14689_call(relay.reshape(var_14954.astype('float64'), [210,]), relay.reshape(const_14955.astype('float32'), [2112,]), ), 3)
call_14956 = relay.TupleGetItem(func_14693_call(relay.reshape(var_14954.astype('float64'), [210,]), relay.reshape(const_14955.astype('float32'), [2112,]), ), 3)
output = relay.Tuple([call_14943,call_14953,var_14954,const_14955,])
output2 = relay.Tuple([call_14944,call_14956,var_14954,const_14955,])
func_14966 = relay.Function([var_14954,], output)
mod['func_14966'] = func_14966
mod = relay.transform.InferType()(mod)
var_14967 = relay.var("var_14967", dtype = "float64", shape = (210,))#candidate|14967|(210,)|var|float64
output = func_14966(var_14967)
func_14968 = relay.Function([var_14967], output)
mutated_mod['func_14968'] = func_14968
mutated_mod = relay.transform.InferType()(mutated_mod)
const_14973 = relay.const([[[10,7,-3,-2,3,6,-8,1,1,2,3,-9,-3],[1,-8,5,6,-7,4,-7,9,-1,6,4,5,5],[3,8,4,5,6,2,-3,-1,8,-3,1,1,-5],[-7,4,-6,-5,2,-4,3,-6,-1,2,5,-2,-7],[4,2,-7,-10,10,6,10,7,5,-5,-5,-10,-10]],[[8,-3,7,-5,5,-8,10,10,-7,6,-8,6,-1],[-2,7,-6,-6,-10,-4,-1,-6,5,9,4,8,2],[2,-9,-8,-6,5,-9,-8,-3,3,-3,-5,5,-4],[1,-10,9,-8,6,1,10,1,6,-10,2,-3,4],[-1,-1,9,-8,3,-2,-8,-9,-8,5,-10,-9,-2]],[[-4,3,-2,-7,3,4,-7,-1,-2,-5,9,1,3],[7,-4,2,-3,-5,1,-7,-2,-6,-10,7,-7,4],[-8,-10,-8,4,3,9,-10,10,-10,8,9,-10,2],[-2,10,4,1,-2,10,-3,1,-8,10,-4,8,2],[-5,-8,-10,5,6,-9,-3,10,-6,-6,-6,-9,4]]], dtype = "int16")#candidate|14973|(3, 5, 13)|const|int16
const_14974 = relay.const([[[2,-8,4,9,-10,-6,-8,8,10,-6,4,10,5],[-10,-10,6,2,4,4,6,2,3,-10,6,1,-3],[-2,-5,-8,5,-1,-4,4,7,-1,2,-6,5,-5],[5,3,-1,2,1,2,-10,6,5,3,-10,6,10],[-6,-7,-6,-7,2,-5,3,-4,1,-7,1,-6,4]],[[9,-7,-2,-3,-4,-1,7,10,-8,5,7,10,-2],[-5,-3,6,9,-10,6,9,-2,10,6,1,-2,-7],[-4,-4,8,-7,-8,-3,-6,-7,-8,-2,-9,-2,-4],[-10,-3,7,6,6,-3,-4,-7,8,-2,6,3,2],[2,-10,9,5,9,-9,-5,8,9,-9,-1,-10,3]],[[-4,-5,2,-2,-6,-4,-5,4,9,-1,7,9,6],[4,4,1,-8,6,-6,4,-1,4,1,-4,-7,-5],[4,-4,-5,-6,8,7,-6,7,1,-5,-10,-10,6],[9,-8,-2,2,7,-4,8,-2,9,-8,-3,10,3],[6,-10,7,8,6,2,-5,9,1,1,-2,5,-7]]], dtype = "int16")#candidate|14974|(3, 5, 13)|const|int16
bop_14975 = relay.right_shift(const_14973.astype('int16'), relay.reshape(const_14974.astype('int16'), relay.shape_of(const_14973))) # shape=(3, 5, 13)
output = bop_14975
output2 = bop_14975
func_14982 = relay.Function([], output)
mod['func_14982'] = func_14982
mod = relay.transform.InferType()(mod)
mutated_mod['func_14982'] = func_14982
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14982_call = mutated_mod.get_global_var('func_14982')
call_14983 = func_14982_call()
output = call_14983
func_14984 = relay.Function([], output)
mutated_mod['func_14984'] = func_14984
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15002 = relay.var("var_15002", dtype = "float32", shape = (12, 11, 15))#candidate|15002|(12, 11, 15)|var|float32
uop_15003 = relay.asinh(var_15002.astype('float32')) # shape=(12, 11, 15)
output = uop_15003
output2 = uop_15003
func_15011 = relay.Function([var_15002,], output)
mod['func_15011'] = func_15011
mod = relay.transform.InferType()(mod)
var_15012 = relay.var("var_15012", dtype = "float32", shape = (12, 11, 15))#candidate|15012|(12, 11, 15)|var|float32
output = func_15011(var_15012)
func_15013 = relay.Function([var_15012], output)
mutated_mod['func_15013'] = func_15013
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10292_call = mod.get_global_var('func_10292')
func_10293_call = mutated_mod.get_global_var('func_10293')
call_15041 = func_10292_call()
call_15042 = func_10292_call()
func_10110_call = mod.get_global_var('func_10110')
func_10111_call = mutated_mod.get_global_var('func_10111')
call_15098 = func_10110_call()
call_15099 = func_10110_call()
func_14556_call = mod.get_global_var('func_14556')
func_14557_call = mutated_mod.get_global_var('func_14557')
call_15106 = func_14556_call()
call_15107 = func_14556_call()
output = relay.Tuple([call_15041,call_15098,call_15106,])
output2 = relay.Tuple([call_15042,call_15099,call_15107,])
func_15117 = relay.Function([], output)
mod['func_15117'] = func_15117
mod = relay.transform.InferType()(mod)
output = func_15117()
func_15118 = relay.Function([], output)
mutated_mod['func_15118'] = func_15118
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12480_call = mod.get_global_var('func_12480')
func_12482_call = mutated_mod.get_global_var('func_12482')
call_15274 = func_12480_call()
call_15275 = func_12480_call()
var_15278 = relay.var("var_15278", dtype = "float32", shape = (6, 10, 14))#candidate|15278|(6, 10, 14)|var|float32
bop_15279 = relay.greater_equal(call_15274.astype('bool'), relay.reshape(var_15278.astype('bool'), relay.shape_of(call_15274))) # shape=(6, 10, 14)
bop_15282 = relay.greater_equal(call_15275.astype('bool'), relay.reshape(var_15278.astype('bool'), relay.shape_of(call_15275))) # shape=(6, 10, 14)
uop_15285 = relay.log2(var_15278.astype('float32')) # shape=(6, 10, 14)
func_13482_call = mod.get_global_var('func_13482')
func_13484_call = mutated_mod.get_global_var('func_13484')
call_15304 = func_13482_call()
call_15305 = func_13482_call()
bop_15311 = relay.divide(uop_15285.astype('float32'), relay.reshape(bop_15279.astype('float32'), relay.shape_of(uop_15285))) # shape=(6, 10, 14)
bop_15314 = relay.divide(uop_15285.astype('float32'), relay.reshape(bop_15282.astype('float32'), relay.shape_of(uop_15285))) # shape=(6, 10, 14)
uop_15318 = relay.sinh(uop_15285.astype('float64')) # shape=(6, 10, 14)
func_11879_call = mod.get_global_var('func_11879')
func_11881_call = mutated_mod.get_global_var('func_11881')
call_15329 = relay.TupleGetItem(func_11879_call(), 0)
call_15330 = relay.TupleGetItem(func_11881_call(), 0)
output = relay.Tuple([call_15304,bop_15311,uop_15318,call_15329,])
output2 = relay.Tuple([call_15305,bop_15314,uop_15318,call_15330,])
func_15331 = relay.Function([var_15278,], output)
mod['func_15331'] = func_15331
mod = relay.transform.InferType()(mod)
mutated_mod['func_15331'] = func_15331
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15332 = relay.var("var_15332", dtype = "float32", shape = (6, 10, 14))#candidate|15332|(6, 10, 14)|var|float32
func_15331_call = mutated_mod.get_global_var('func_15331')
call_15333 = func_15331_call(var_15332)
output = call_15333
func_15334 = relay.Function([var_15332], output)
mutated_mod['func_15334'] = func_15334
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12297_call = mod.get_global_var('func_12297')
func_12299_call = mutated_mod.get_global_var('func_12299')
call_15365 = func_12297_call()
call_15366 = func_12297_call()
func_9439_call = mod.get_global_var('func_9439')
func_9440_call = mutated_mod.get_global_var('func_9440')
call_15389 = relay.TupleGetItem(func_9439_call(), 0)
call_15390 = relay.TupleGetItem(func_9440_call(), 0)
func_12805_call = mod.get_global_var('func_12805')
func_12807_call = mutated_mod.get_global_var('func_12807')
call_15399 = relay.TupleGetItem(func_12805_call(), 0)
call_15400 = relay.TupleGetItem(func_12807_call(), 0)
func_12895_call = mod.get_global_var('func_12895')
func_12896_call = mutated_mod.get_global_var('func_12896')
call_15402 = relay.TupleGetItem(func_12895_call(), 1)
call_15403 = relay.TupleGetItem(func_12896_call(), 1)
func_9487_call = mod.get_global_var('func_9487')
func_9489_call = mutated_mod.get_global_var('func_9489')
call_15406 = relay.TupleGetItem(func_9487_call(), 1)
call_15407 = relay.TupleGetItem(func_9489_call(), 1)
func_13482_call = mod.get_global_var('func_13482')
func_13484_call = mutated_mod.get_global_var('func_13484')
call_15416 = func_13482_call()
call_15417 = func_13482_call()
const_15426 = relay.const([[[True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,False,True,True],[False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True],[False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False],[False,False,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True],[False,True,False,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True],[False,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True],[False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,True]],[[False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True],[True,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True],[True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,False],[True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,True],[False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False],[False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False],[False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False]],[[False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,False],[True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,False,True],[False,True,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,False,False],[True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,True,False],[False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True],[True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,False],[True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,False,False,False,True,False]],[[True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True],[True,False,False,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False],[True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True],[False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True],[False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False],[False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True],[True,False,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False]],[[True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False],[True,True,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True],[True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,False,False,True,False,True,False,True,True,True,True],[True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,True,True,False],[False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False],[True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False],[False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True]],[[False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,False,False,False],[False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True],[False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False],[True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False],[False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,False,True],[True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True],[True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False]]], dtype = "bool")#candidate|15426|(6, 7, 450)|const|bool
bop_15427 = relay.add(call_15406.astype('float64'), const_15426.astype('float64')) # shape=(6, 7, 450)
bop_15430 = relay.add(call_15407.astype('float64'), const_15426.astype('float64')) # shape=(6, 7, 450)
output = relay.Tuple([call_15365,call_15389,call_15399,call_15402,call_15416,bop_15427,])
output2 = relay.Tuple([call_15366,call_15390,call_15400,call_15403,call_15417,bop_15430,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
