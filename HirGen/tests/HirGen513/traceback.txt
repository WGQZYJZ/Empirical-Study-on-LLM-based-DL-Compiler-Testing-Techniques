==========mod==========
#[version = "0.0.5"]
def @func_7623() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool], Tensor[(910), float64]) {
  %0 = @func_2862() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(910), bool] */, dtype="bool") /* ty=Tensor[(910), bool] */;
  %2 = reshape(%1, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), bool] */;
  %3 = @func_7397(%2) /* ty=(Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), float32], Tensor[(9, 14, 3), float64]) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(910), bool] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %5 = %0.0;
  %6 = %3.0;
  %7 = asinh(%4) /* ty=Tensor[(910), float64] */;
  (%5, %6, %7)
}

def @func_5029() -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool]) {
  %8 = @func_3231() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %9 = %8.0;
  %10 = @func_2159() /* ty=Tensor[(10, 13, 7), bool] */;
  (%9, %10)
}

def @func_4243() -> (Tensor[(10, 13, 7), float64],) {
  %11 = @func_3433() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
  %12 = %11.0;
  (%12,)
}

def @func_4323() -> (Tensor[(7, 5, 6), bool],) {
  %13 = @func_2862() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %14 = %13.0;
  (%14,)
}

def @func_9149() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
  %15 = @func_3788() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %16 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %17 = %15.0;
  %18 = @func_4340() /* ty=Tensor[(10, 13, 7), float32] */;
  %19 = %16.2;
  (%17, %18, %19)
}

def @func_8443(%var_8318: Tensor[(8, 3, 2), float32], %var_8319: Tensor[(8, 3, 2), float32], %var_8328: Tensor[(7, 130), float64], %var_8361: Tensor[(910), float64]) -> (Tensor[(7, 130), float64], Tensor[(910), float32], Tensor[(7, 5, 6), bool], Tensor[(8, 3, 2), int8], Tensor[(8, 3, 2), bool], Tensor[(8, 3, 2), float32], Tensor[(7, 5, 6), float32], Tensor[(8, 3, 2), float64]) {
  %20 = cast(%var_8328, dtype="float64") /* ty=Tensor[(7, 130), float64] */;
  %21 = reshape(%20, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %22 = @func_2685(%21) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %23 = %22.3;
  %24 = cast(%var_8361, dtype="float32") /* ty=Tensor[(910), float32] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(1), int32] */;
  %26 = cast(%23, dtype="float32") /* ty=Tensor[(910), float32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?), float32] */;
  %28 = @func_4163() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %29 = cast(%var_8319, dtype="float32") /* ty=Tensor[(8, 3, 2), float32] */;
  %30 = shape_of(%var_8318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%var_8318, dtype="float32") /* ty=Tensor[(8, 3, 2), float32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %33 = mod(%31, %32) /* ty=Tensor[(8, 3, 2), float32] */;
  %34 = cast(%33, dtype="float64") /* ty=Tensor[(8, 3, 2), float64] */;
  %35 = sigmoid(%34) /* ty=Tensor[(8, 3, 2), float64] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(8, 3, 2), float32] */;
  %37 = sin(%36) /* ty=Tensor[(8, 3, 2), float32] */;
  %38 = cast(%35, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %42 = logical_or(%40, %41) /* ty=Tensor[(8, 3, 2), bool] */;
  %43 = cast(%42, dtype="int64") /* ty=Tensor[(8, 3, 2), int64] */;
  %44 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%37, dtype="int64") /* ty=Tensor[(8, 3, 2), int64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %47 = minimum(%45, %46) /* ty=Tensor[(8, 3, 2), int64] */;
  %48 = cast(%35, dtype="int8") /* ty=Tensor[(8, 3, 2), int8] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="int8") /* ty=Tensor[(8, 3, 2), int8] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %52 = cast(%33, dtype="uint64") /* ty=Tensor[(8, 3, 2), uint64] */;
  %53 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%35, dtype="uint64") /* ty=Tensor[(8, 3, 2), uint64] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %56 = maximum(%54, %55) /* ty=Tensor[(8, 3, 2), uint64] */;
  %57 = cast(%47, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %61 = cast(%42, dtype="float32") /* ty=Tensor[(8, 3, 2), float32] */;
  %62 = @func_6907() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) */;
  %63 = cast(%56, dtype="float64") /* ty=Tensor[(8, 3, 2), float64] */;
  %64 = divide(%26, %27) /* ty=Tensor[(910), float32] */;
  %65 = %28.0;
  %66 = left_shift(%50, %51) /* ty=Tensor[(8, 3, 2), int8] */;
  %67 = less(%59, %60) /* ty=Tensor[(8, 3, 2), bool] */;
  %68 = log10(%61) /* ty=Tensor[(8, 3, 2), float32] */;
  %69 = %62.0;
  %70 = erf(%63) /* ty=Tensor[(8, 3, 2), float64] */;
  (%var_8328, %64, %65, %66, %67, %68, %69, %70)
}

def @func_791() -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  %71 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %72 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %73 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %74 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %75 = %71.2;
  %76 = %72.0;
  %77 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %78 = %73.0;
  %79 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  (%74, %75, %76, %77, %78, %79)
}

def @func_2497(%var_2494: Tensor[(8, 56), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(15, 10, 3), bool], Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float32], Tensor[(8, 56), float32]) {
  %80 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %81 = @func_1712() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %82 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %83 = %82.0;
  %84 = cast(%83, dtype="float64") /* ty=Tensor[(15, 10, 3), float64] */;
  %85 = sqrt(%84) /* ty=Tensor[(15, 10, 3), float64] */;
  %86 = cast(%83, dtype="bool") /* ty=Tensor[(15, 10, 3), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(15, 10, 3), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %91 = cast(%var_2494, dtype="float32") /* ty=Tensor[(8, 56), float32] */;
  %92 = reshape(%91, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), float32] */;
  %93 = @func_544(%92) /* ty=(Tensor[(14, 4, 8), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %94 = %80.0;
  %95 = %81.0;
  %96 = less(%88, %89) /* ty=Tensor[(15, 10, 3), bool] */;
  %97 = %90.2;
  %98 = %93.0;
  (%94, %95, %96, %97, %98, %var_2494)
}

def @func_2421() -> (Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) {
  %99 = @func_1611() /* ty=Tensor[(10, 13, 7), bool] */;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %101 = reshape(%100, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
  %102 = @func_1395(%101) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) */;
  %103 = %102.2;
  (%99, %103)
}

def @func_1817() -> (Tensor[(10, 13, 7), float64],) {
  %104 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %105 = %104.0;
  (%105,)
}

def @func_7263() -> (Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(10, 13, 7), float64]) {
  %106 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %107 = %106.1;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %109 = reshape(%108, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %110 = @func_5327(%109) /* ty=(Tensor[(11, 9, 10), float32], Tensor[(10, 13, 7), float64], Tensor[(910), float64]) */;
  %111 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %112 = %110.2;
  %113 = %111.0;
  (%107, %112, %113)
}

def @func_6327() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) {
  %114 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %115 = @func_5581() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
  %116 = @func_6271() /* ty=(Tensor[(10, 13, 7), bool],) */;
  %117 = @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %118 = %114.0;
  %119 = %115.1;
  %120 = %116.0;
  %121 = %117.0;
  (%118, %119, %120, %121)
}

def @func_2905() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) {
  %122 = @func_2862() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %123 = %122.0;
  %124 = @func_1611() /* ty=Tensor[(10, 13, 7), bool] */;
  (%123, %124)
}

def @func_7436() -> (Tensor[(7, 5, 6), bool], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) {
  %125 = cast(meta[relay.Constant][1] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %126 = reshape(%125, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %127 = @func_3758(%126) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(14, 4, 8), float64]) */;
  %128 = @func_5133() /* ty=Tensor[(7, 5, 6), bool] */;
  %129 = %127.2;
  (%128, %129, meta[relay.Constant][1] /* ty=Tensor[(448), float32] */)
}

def @func_3433() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %130 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %131 = @func_3054() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %132 = %130.0;
  %133 = %131.0;
  (%132, %133)
}

def @func_7283() -> (Tensor[(7, 5, 6), float32],) {
  %134 = @func_4279() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */;
  %135 = %134.0;
  (%135,)
}

def @func_6754() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  %136 = @func_6067() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), uint16], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */;
  %137 = @func_2421() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */;
  %138 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %139 = %136.5;
  %140 = %137.1;
  %141 = %138.0;
  (%139, %140, %141)
}

def @func_3001(%var_2990: Tensor[(12, 1, 5), float32]) -> (Tensor[(12, ?, 5), float32],) {
  %142 = cast(%var_2990, dtype="float32") /* ty=Tensor[(12, 1, 5), float32] */;
  %143 = log(%142) /* ty=Tensor[(12, 1, 5), float32] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(12, 1, 5), float32] */;
  %145 = shape_of(%var_2990, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_2990, dtype="float32") /* ty=Tensor[(12, 1, 5), float32] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %148 = divide(%146, %147) /* ty=Tensor[(12, ?, 5), float32] */;
  (%148,)
}

def @func_638() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %149 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %150 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %151 = %149.1;
  %152 = %150.0;
  (%151, %152)
}

def @func_4812() -> (Tensor[(10, 13, 7), float64],) {
  %153 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %154 = %153.0;
  (%154,)
}

def @func_5581() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %155 = @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %156 = @func_2741() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %157 = %155.0;
  %158 = %156.0;
  (%157, %158)
}

def @func_7953() -> (Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) {
  %159 = @func_5371() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %160 = cast(meta[relay.Constant][2] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %161 = reshape(%160, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %162 = @func_3758(%161) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(14, 4, 8), float64]) */;
  %163 = %159.0;
  %164 = %162.2;
  (%163, %164, meta[relay.Constant][2] /* ty=Tensor[(448), float32] */)
}

def @func_8236() -> (Tensor[(9, 14, 3), float64], Tensor[(10, 13, 7), float64]) {
  %165 = @func_6945() /* ty=(Tensor[(9, 14, 3), float64],) */;
  %166 = %165.0;
  %167 = @func_3593() /* ty=Tensor[(10, 13, 7), float64] */;
  (%166, %167)
}

def @func_5928() -> (Tensor[(9, 1, 6), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32]) {
  %168 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %169 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %170 = @func_1712() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %171 = %170.0;
  %172 = cast(%171, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %173 = @func_3609() /* ty=Tensor[(9, 1, 6), float64] */;
  %174 = %168.0;
  %175 = @func_1664() /* ty=Tensor[(10, 13, 7), float32] */;
  %176 = %169.2;
  %177 = asinh(%172) /* ty=Tensor[(10, 13, 7), float32] */;
  (%173, %174, %175, %176, %177)
}

def @func_5410() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %178 = @func_3036() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %179 = @func_4903() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %180 = %178.0;
  %181 = %179.2;
  (%180, %181)
}

def @func_1395(%var_1365: Tensor[(10, 13, 7), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
  %182 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %183 = %182.1;
  %184 = cast(%var_1365, dtype="int64") /* ty=Tensor[(10, 13, 7), int64] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="int64") /* ty=Tensor[(10, 13, 7), int64] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %188 = left_shift(%186, %187) /* ty=Tensor[(10, 13, 7), int64] */;
  %189 = cast(%188, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %190 = cast(%var_1365, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %191 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %192 = cosh(%189) /* ty=Tensor[(10, 13, 7), float64] */;
  %193 = acos(%190) /* ty=Tensor[(10, 13, 7), float32] */;
  %194 = %191.0;
  (%192, %193, %194)
}

def @func_1334() -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) {
  %195 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %196 = %195.3;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %198 = reshape(%197, newshape=[7, 5, 6]) /* ty=Tensor[(7, 5, 6), float32] */;
  %199 = @func_1192(%198) /* ty=Tensor[(7, 5, 6), float32] */;
  %200 = cast(%199, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %201 = asin(%200) /* ty=Tensor[(7, 5, 6), float32] */;
  %202 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 5, 6), float32] */, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %206 = logical_and(%204, %205) /* ty=Tensor[(7, 5, 6), bool] */;
  (%196, %206)
}

def @func_5371() -> (Tensor[(10, 13, 7), float64],) {
  %207 = @func_1712() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %208 = %207.0;
  (%208,)
}

def @func_8940(%var_8924: Tensor[(9, 3, 14), int8]) -> Tensor[(9, 3, 14), int8] {
  %209 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 3, 14), int8] */, dtype="int8") /* ty=Tensor[(9, 3, 14), int8] */;
  %210 = shape_of(%var_8924, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_8924, dtype="int8") /* ty=Tensor[(9, 3, 14), int8] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  add(%211, %212) /* ty=Tensor[(9, 3, 14), int8] */
}

def @func_6945() -> (Tensor[(9, 14, 3), float64],) {
  %213 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 14, 3), float64] */;
  %214 = cosh(%213) /* ty=Tensor[(9, 14, 3), float64] */;
  (%214,)
}

def @func_3547() -> (Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  %215 = @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %216 = cast(meta[relay.Constant][6] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %217 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 60), float64] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %218 = reshape(%216, newshape=[1, 8, 4]) /* ty=Tensor[(1, 8, 4), float64] */;
  %219 = reshape(%217, newshape=[15, 8, 4]) /* ty=Tensor[(15, 8, 4), float64] */;
  %220 = @func_1109(%218, %219) /* ty=(Tensor[(15, 8, 4), float64],) */;
  %221 = @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %222 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %223 = @func_3054() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %224 = @func_3231() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %225 = %215.0;
  %226 = %220.0;
  %227 = %221.0;
  %228 = %222.2;
  %229 = %223.1;
  %230 = %224.0;
  (%225, %226, meta[relay.Constant][6] /* ty=Tensor[(32), float64] */, meta[relay.Constant][7] /* ty=Tensor[(8, 60), float64] */, %227, %228, %229, %230)
}

def @func_7184() -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) {
  %231 = @func_7119() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) */;
  %232 = @func_2862() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %233 = @func_2905() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */;
  %234 = %231.1;
  %235 = %232.0;
  %236 = %233.0;
  (%234, %235, %236)
}

def @func_1575(%var_1533: Tensor[(294), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 3, 14), float64], Tensor[(294), float64], Tensor[(10, 13, 7), float64], Tensor[(3, 5, 3), float32]) {
  %237 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %240 = reshape(%239, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
  %241 = @func_1395(%240) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) */;
  %242 = cast(%var_1533, dtype="float64") /* ty=Tensor[(294), float64] */;
  %243 = cast(%var_1533, dtype="float64") /* ty=Tensor[(294), float64] */;
  %244 = reshape(%242, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %245 = reshape(%243, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %246 = @func_1473(%244, %245) /* ty=(Tensor[(7, 3, 14), float64],) */;
  %247 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %248 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 5, 3), float32] */;
  %249 = acos(%248) /* ty=Tensor[(3, 5, 3), float32] */;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(3, 5, 3), float32] */;
  %251 = %241.2;
  %252 = %246.0;
  %253 = %247.2;
  %254 = log(%250) /* ty=Tensor[(3, 5, 3), float32] */;
  (%238, %251, %252, %var_1533, %253, %254)
}

def @func_2708() -> Tensor[(10, 13, 7), float32] {
  %255 = @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %256 = %255.1;
  %257 = cast(%256, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  log10(%257) /* ty=Tensor[(10, 13, 7), float32] */
}

def @func_3195() -> Tensor[(10, 13, 7), float64] {
  %258 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %258.1
}

def @func_3054() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) {
  %259 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %260 = %259.0;
  %261 = @func_2781() /* ty=Tensor[(10, 13, 7), float64] */;
  (%260, %261)
}

def @func_1192(%var_1168: Tensor[(7, 5, 6), float32]) -> Tensor[(7, 5, 6), float32] {
  %262 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %263 = %262.1;
  %264 = cast(%var_1168, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%266, %267) /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_3715() -> (Tensor[(7, 5, 6), float32],) {
  %268 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %269 = %268.1;
  (%269,)
}

def @func_7583() -> (Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float32]) {
  %270 = @func_3894() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), float32]) */;
  %271 = @func_5928() /* ty=(Tensor[(9, 1, 6), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32]) */;
  %272 = %270.0;
  %273 = %271.4;
  (%272, %273)
}

def @func_9039() -> Tensor[(7, 5, 6), bool] {
  %274 = @func_2817() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %274.0
}

def @func_4597() -> Tensor[(7, 5, 6), bool] {
  %275 = @func_2595() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(15, 10, 3), uint16]) */;
  %275.0
}

def @func_5641(%var_5629: Tensor[(11, 8, 9), float64], %var_5630: Tensor[(11, 8, 9), float64]) -> (Tensor[(11, 8, 9), bool],) {
  %276 = cast(%var_5630, dtype="bool") /* ty=Tensor[(11, 8, 9), bool] */;
  %277 = shape_of(%var_5629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%var_5629, dtype="bool") /* ty=Tensor[(11, 8, 9), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %280 = greater(%278, %279) /* ty=Tensor[(11, 8, 9), bool] */;
  (%280,)
}

def @func_9613(%var_9604: Tensor[(7, 16, 15), int16], %var_9605: Tensor[(7, 16, 15), int16]) -> (Tensor[(7, 16, 15), int16], Tensor[(3, 3, 13), float64], Tensor[(117, 1), float64]) {
  %281 = cast(%var_9605, dtype="int16") /* ty=Tensor[(7, 16, 15), int16] */;
  %282 = shape_of(%var_9604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_9604, dtype="int16") /* ty=Tensor[(7, 16, 15), int16] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %285 = cast(meta[relay.Constant][9] /* ty=Tensor[(117, 1), float64] */, dtype="float64") /* ty=Tensor[(117, 1), float64] */;
  %286 = reshape(%285, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float64] */;
  %287 = @func_5427(%286) /* ty=(Tensor[(3, 3, 13), float64], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */;
  %288 = bitwise_and(%283, %284) /* ty=Tensor[(7, 16, 15), int16] */;
  %289 = %287.0;
  (%288, %289, meta[relay.Constant][9] /* ty=Tensor[(117, 1), float64] */)
}

def @func_1109(%var_1093: Tensor[(1, 8, 4), float64], %var_1094: Tensor[(15, 8, 4), float64]) -> (Tensor[(15, 8, 4), float64],) {
  %290 = cast(%var_1093, dtype="float64") /* ty=Tensor[(1, 8, 4), float64] */;
  %291 = cast(%var_1094, dtype="float64") /* ty=Tensor[(15, 8, 4), float64] */;
  %292 = divide(%290, %291) /* ty=Tensor[(15, 8, 4), float64] */;
  (%292,)
}

def @func_9594() -> (Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), float32], Tensor[(448), float32]) {
  %293 = @func_6354() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %294 = @func_7436() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) */;
  %295 = @func_9173() /* ty=Tensor[(10, 13, 7), bool] */;
  %296 = %293.0;
  %297 = %294.2;
  (%295, %296, %297)
}

def @func_5452() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %298 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %299 = %298.0;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %301 = cos(%300) /* ty=Tensor[(10, 13, 7), float32] */;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %303 = @func_5204() /* ty=Tensor[(7, 5, 6), bool] */;
  %304 = sigmoid(%302) /* ty=Tensor[(10, 13, 7), float64] */;
  %305 = @func_5204() /* ty=Tensor[(7, 5, 6), bool] */;
  (%303, %304, %305)
}

def @func_8286() -> (Tensor[(7, 5, 6), float32],) {
  %306 = @func_8047() /* ty=Tensor[(7, 5, 6), float32] */;
  (%306,)
}

def @func_7687() -> (Tensor[(16, 5, 6), float32], Tensor[(?, ?, 5), uint32]) {
  %307 = @func_2006() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */;
  %308 = @func_4180() /* ty=(Tensor[(?, ?, 5), uint32],) */;
  %309 = %307.0;
  %310 = %308.0;
  (%309, %310)
}

def @func_1898(%var_1895: Tensor[(13, 6, 10), float64]) -> Tensor[(13, 6, 10), float64] {
  %311 = cast(%var_1895, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
  acos(%311) /* ty=Tensor[(13, 6, 10), float64] */
}

def @func_9663() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  %312 = @func_3054() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %313 = %312.1;
  %314 = cast(%313, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %315 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %316 = @func_7080() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %317 = atan(%314) /* ty=Tensor[(10, 13, 7), float64] */;
  %318 = %315.0;
  %319 = %316.1;
  (%317, %318, %319)
}

def @func_1712() -> (Tensor[(10, 13, 7), float64],) {
  %320 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %321 = %320.2;
  (%321,)
}

def @func_5086() -> (Tensor[(10, 13, 7), float64],) {
  %322 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %323 = %322.0;
  (%323,)
}

def @func_544(%var_510: Tensor[(14, 4, 8), float32]) -> (Tensor[(14, 4, 8), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %324 = cast(%var_510, dtype="float32") /* ty=Tensor[(14, 4, 8), float32] */;
  %325 = @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %326 = @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %327 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %328 = asin(%324) /* ty=Tensor[(14, 4, 8), float32] */;
  %329 = %325.1;
  %330 = %326.1;
  %331 = %327.0;
  (%328, %329, %330, %331)
}

def @func_4414() -> Tensor[(10, 13, 7), bool] {
  @func_2159() /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_3374(%var_3367: Tensor[(11, 15, 14), float32], %var_3371: Tensor[(910), float64]) -> (Tensor[(11, 15, 14), float32], Tensor[(10, 13, 7), float64], Tensor[(910), float64]) {
  %332 = cast(%var_3367, dtype="float32") /* ty=Tensor[(11, 15, 14), float32] */;
  %333 = cast(%var_3371, dtype="float64") /* ty=Tensor[(910), float64] */;
  %334 = reshape(%333, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
  %335 = @func_2100(%334) /* ty=(Tensor[(10, 13, 7), uint8], Tensor[(10, 13, 7), float64]) */;
  %336 = tan(%332) /* ty=Tensor[(11, 15, 14), float32] */;
  %337 = %335.1;
  (%336, %337, %var_3371)
}

def @func_5874() -> Tensor[(7, 5, 6), float32] {
  @func_2961() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_8164(%var_8139: uint64, %var_8140: Tensor[(7, 6, 1), uint64]) -> (Tensor[(7, 6, 1), uint64], Tensor[(7, 6, ?), float64], Tensor[(10, 13, 7), float64]) {
  %338 = cast(%var_8139, dtype="uint64") /* ty=uint64 */;
  %339 = cast(%var_8140, dtype="uint64") /* ty=Tensor[(7, 6, 1), uint64] */;
  %340 = cast(%var_8140, dtype="float32") /* ty=Tensor[(7, 6, 1), float32] */;
  %341 = cast(%var_8139, dtype="float32") /* ty=float32 */;
  %342 = power(%340, %341) /* ty=Tensor[(7, 6, 1), float32] */;
  %343 = cast(%342, dtype="float64") /* ty=Tensor[(7, 6, 1), float64] */;
  %344 = shape_of(%var_8140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_8140, dtype="float64") /* ty=Tensor[(7, 6, 1), float64] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %347 = @func_3547() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %348 = right_shift(%338, %339) /* ty=Tensor[(7, 6, 1), uint64] */;
  %349 = floor_mod(%345, %346) /* ty=Tensor[(7, 6, ?), float64] */;
  %350 = %347.6;
  (%348, %349, %350)
}

def @func_5278() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %351 = @func_3547() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %352 = %351.4;
  %353 = @func_4597() /* ty=Tensor[(7, 5, 6), bool] */;
  (%352, %353)
}

def @func_6591() -> (Tensor[(10, 13, 7), float32], Tensor[(?, ?, 5), uint32], Tensor[(10, 13, 7), float64], Tensor[(448, 1), float32]) {
  %354 = @func_6067() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), uint16], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */;
  %355 = @func_4180() /* ty=(Tensor[(?, ?, 5), uint32],) */;
  %356 = cast(meta[relay.Constant][10] /* ty=Tensor[(448, 1), float32] */, dtype="float32") /* ty=Tensor[(448, 1), float32] */;
  %357 = reshape(%356, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %358 = @func_5734(%357) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(448), float32]) */;
  %359 = %354.4;
  %360 = %355.0;
  %361 = %358.0;
  (%359, %360, %361, meta[relay.Constant][10] /* ty=Tensor[(448, 1), float32] */)
}

def @func_9906() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %362 = @func_5278() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
  %363 = @func_9309() /* ty=Tensor[(10, 13, 7), float64] */;
  %364 = %362.1;
  (%363, %364)
}

def @func_6545() -> (Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
  %365 = @func_4800() /* ty=(Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), bool]) */;
  %366 = @func_1664() /* ty=Tensor[(10, 13, 7), float32] */;
  %367 = %365.1;
  (%366, %367)
}

def @func_8920() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool]) {
  %368 = @func_5581() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
  %369 = @func_7716() /* ty=(Tensor[(10, 13, 7), bool],) */;
  %370 = %368.0;
  %371 = %369.0;
  (%370, %371)
}

def @func_4775() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
  %372 = @func_1712() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %373 = @func_1793() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %374 = %372.0;
  %375 = @func_1664() /* ty=Tensor[(10, 13, 7), float32] */;
  %376 = %373.0;
  (%374, %375, %376)
}

def @func_3788() -> (Tensor[(10, 13, 7), float64],) {
  %377 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %378 = %377.0;
  (%378,)
}

def @func_9309() -> Tensor[(10, 13, 7), float64] {
  %379 = @func_6370() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %379.0
}

def @func_6067() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), uint16], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
  %380 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %381 = %380.1;
  %382 = cast(%381, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %383 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 13, 7), float64] */, dtype="uint16") /* ty=Tensor[(10, 13, 7), uint16] */;
  %384 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%381, dtype="uint16") /* ty=Tensor[(10, 13, 7), uint16] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %387 = @func_5452() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
  %388 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 13, 7), float64] */, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %389 = @func_5204() /* ty=Tensor[(7, 5, 6), bool] */;
  %390 = exp(%382) /* ty=Tensor[(10, 13, 7), float64] */;
  %391 = bitwise_xor(%385, %386) /* ty=Tensor[(10, 13, 7), uint16] */;
  %392 = %387.2;
  %393 = sinh(%388) /* ty=Tensor[(10, 13, 7), float32] */;
  %394 = @func_4597() /* ty=Tensor[(7, 5, 6), bool] */;
  (%389, %390, %391, %392, %393, %394)
}

def @func_7213() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %395 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %396 = %395.0;
  %397 = cast(%396, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %398 = reshape(%397, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float32] */;
  %399 = @func_5806(%398) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), int8]) */;
  %400 = %399.0;
  (%396, %400)
}

def @func_3894() -> (Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), float32]) {
  %401 = @func_1664() /* ty=Tensor[(10, 13, 7), float32] */;
  %402 = @func_2961() /* ty=Tensor[(7, 5, 6), float32] */;
  (%401, %402)
}

def @func_3576() -> Tensor[(7, 5, 6), float32] {
  @func_1694() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_8686(%var_8680: Tensor[(8, 13, 15), float64]) -> (Tensor[(8, 13, 15), float64],) {
  %403 = cast(%var_8680, dtype="float64") /* ty=Tensor[(8, 13, 15), float64] */;
  %404 = atanh(%403) /* ty=Tensor[(8, 13, 15), float64] */;
  (%404,)
}

def @func_3758(%var_3749: Tensor[(448), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(14, 4, 8), float64]) {
  %405 = @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %406 = cast(%var_3749, dtype="float32") /* ty=Tensor[(448), float32] */;
  %407 = reshape(%406, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), float32] */;
  %408 = @func_544(%407) /* ty=(Tensor[(14, 4, 8), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %409 = %408.0;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  %411 = %405.0;
  %412 = sinh(%410) /* ty=Tensor[(14, 4, 8), float64] */;
  (%411, %var_3749, %412)
}

def @func_7300() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %413 = @func_5086() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %414 = @func_7184() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) */;
  %415 = %413.0;
  %416 = %414.1;
  (%415, %416)
}

def @func_4560() -> (Tensor[(7, 5, 6), int32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float32]) {
  %417 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %418 = %417.5;
  %419 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 5, 6), float32] */, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %423 = @func_2421() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */;
  %424 = %423.0;
  %425 = cast(%424, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %426 = reshape(%425, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
  %427 = @func_2100(%426) /* ty=(Tensor[(10, 13, 7), uint8], Tensor[(10, 13, 7), float64]) */;
  %428 = @func_2421() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */;
  %429 = subtract(%421, %422) /* ty=Tensor[(7, 5, 6), int32] */;
  %430 = %427.1;
  %431 = %428.0;
  %432 = @func_2708() /* ty=Tensor[(10, 13, 7), float32] */;
  (%429, %424, %430, %431, %432)
}

def @func_5327(%var_5320: Tensor[(910), float64]) -> (Tensor[(11, 9, 10), float32], Tensor[(10, 13, 7), float64], Tensor[(910), float64]) {
  %433 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 9, 10), float32] */;
  %434 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(11, 9, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 9, 10), float32] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %437 = cast(%var_5320, dtype="float64") /* ty=Tensor[(910), float64] */;
  %438 = reshape(%437, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %439 = @func_2685(%438) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %440 = floor_mod(%435, %436) /* ty=Tensor[(11, 9, 10), float32] */;
  %441 = %439.5;
  (%440, %441, %var_5320)
}

def @func_4383() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %442 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %443 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %444 = %442.0;
  %445 = %443.0;
  (%444, %445)
}

def @func_1793() -> (Tensor[(10, 13, 7), float64],) {
  %446 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %447 = %446.0;
  (%447,)
}

def @func_2862() -> (Tensor[(7, 5, 6), bool],) {
  %448 = @func_1884() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %449 = %448.0;
  (%449,)
}

def @func_7014(%var_6997: Tensor[(7, 130), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool], Tensor[(7, 130), float64]) {
  %450 = @func_3894() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), float32]) */;
  %451 = cast(%var_6997, dtype="float64") /* ty=Tensor[(7, 130), float64] */;
  %452 = reshape(%451, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %453 = @func_2685(%452) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %454 = @func_5928() /* ty=(Tensor[(9, 1, 6), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32]) */;
  %455 = @func_5182() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %456 = cast(%var_6997, dtype="float64") /* ty=Tensor[(7, 130), float64] */;
  %457 = %450.1;
  %458 = %453.1;
  %459 = %454.2;
  %460 = %455.0;
  %461 = acos(%456) /* ty=Tensor[(7, 130), float64] */;
  (%457, %458, %459, %460, %461)
}

def @func_9223() -> (Tensor[(7, 5, 6), float32], Tensor[(14, 4, 8), float64], Tensor[(15, 10, 3), uint16]) {
  %462 = @func_8286() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %463 = @func_8993() /* ty=(Tensor[(14, 4, 8), float64], Tensor[(7, 5, 6), bool]) */;
  %464 = @func_2201() /* ty=(Tensor[(15, 10, 3), uint16],) */;
  %465 = %462.0;
  %466 = %463.0;
  %467 = %464.0;
  (%465, %466, %467)
}

def @func_3593() -> Tensor[(10, 13, 7), float64] {
  %468 = @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %468.0
}

def @func_3334(%var_3279: Tensor[(112, 8), float64], %var_3304: Tensor[(4, 14, 16), uint16]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(7, 3, 14), float64], Tensor[(294), float64], Tensor[(64), float64], Tensor[(112, 8), float64], Tensor[(7, 5, 6), float32], Tensor[(15, 10, 3), bool], Tensor[(448), float32], Tensor[(4, 14, 16), uint8], Tensor[(4, 14, 16), float32], Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32]) {
  %469 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %470 = @func_2006() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */;
  %471 = cast(meta[relay.Constant][15] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %472 = cast(meta[relay.Constant][15] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %473 = reshape(%471, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %474 = reshape(%472, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %475 = @func_1473(%473, %474) /* ty=(Tensor[(7, 3, 14), float64],) */;
  %476 = %469.2;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %478 = reshape(%477, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %479 = @func_2685(%478) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %480 = cast(meta[relay.Constant][17] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %481 = reshape(%480, newshape=[8, 56]) /* ty=Tensor[(8, 56), float32] */;
  %482 = @func_2497(%481) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(15, 10, 3), bool], Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float32], Tensor[(8, 56), float32]) */;
  %483 = cast(meta[relay.Constant][16] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %484 = cast(%var_3279, dtype="float64") /* ty=Tensor[(112, 8), float64] */;
  %485 = reshape(%483, newshape=[4, 1, 16]) /* ty=Tensor[(4, 1, 16), float64] */;
  %486 = reshape(%484, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %487 = @func_2538(%485, %486) /* ty=(Tensor[(4, ?, 16), bool], Tensor[(4, 14, 16), uint16]) */;
  %488 = %487.1;
  %489 = cast(%var_3304, dtype="uint8") /* ty=Tensor[(4, 14, 16), uint8] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="uint8") /* ty=Tensor[(4, 14, 16), uint8] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %493 = cast(%488, dtype="float32") /* ty=Tensor[(4, 14, 16), float32] */;
  %494 = sin(%493) /* ty=Tensor[(4, 14, 16), float32] */;
  %495 = cast(%494, dtype="float32") /* ty=Tensor[(4, 14, 16), float32] */;
  %496 = @func_1334() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) */;
  %497 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %498 = %470.1;
  %499 = %475.0;
  %500 = %479.0;
  %501 = %482.2;
  %502 = bitwise_or(%491, %492) /* ty=Tensor[(4, 14, 16), uint8] */;
  %503 = acos(%495) /* ty=Tensor[(4, 14, 16), float32] */;
  %504 = %496.1;
  %505 = %497.1;
  (%476, %498, %499, meta[relay.Constant][15] /* ty=Tensor[(294), float64] */, meta[relay.Constant][16] /* ty=Tensor[(64), float64] */, %var_3279, %500, %501, meta[relay.Constant][17] /* ty=Tensor[(448), float32] */, %502, %503, %504, %505)
}

def @func_5857() -> (Tensor[(7, 5, 6), float32], Tensor[(9, 1, 6), float64], Tensor[(16, 5, 6), float32]) {
  %506 = @func_3231() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %507 = @func_2006() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */;
  %508 = %506.0;
  %509 = @func_3609() /* ty=Tensor[(9, 1, 6), float64] */;
  %510 = %507.0;
  (%508, %509, %510)
}

def @func_9004() -> Tensor[(7, 5, 6), bool] {
  %511 = @func_8993() /* ty=(Tensor[(14, 4, 8), float64], Tensor[(7, 5, 6), bool]) */;
  %511.1
}

def @func_454() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %512 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %513 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %514 = %512.2;
  %515 = %513.2;
  (%514, %515)
}

def @func_8822(%var_8782: Tensor[(1, 8, 7), float32], %var_8790: Tensor[(780), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(780), float64], Tensor[(780), float64], Tensor[(1, 8, 7), float32], Tensor[(15, 10, 3), uint16]) {
  %516 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %517 = cast(%var_8790, dtype="float64") /* ty=Tensor[(780), float64] */;
  %518 = reshape(%517, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %519 = @func_8519(%518) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(15, 10, 3), uint16], Tensor[(8, 60), float32], Tensor[(7, 5, 6), float32], Tensor[(13, 6, 10), float64], Tensor[(780), float64]) */;
  %520 = cast(%var_8782, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %521 = tan(%520) /* ty=Tensor[(1, 8, 7), float32] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %523 = @func_3945() /* ty=(Tensor[(15, 10, 3), uint16],) */;
  %524 = %516.0;
  %525 = %519.7;
  %526 = erf(%522) /* ty=Tensor[(1, 8, 7), float32] */;
  %527 = %523.0;
  (%524, %525, %var_8790, %526, %527)
}

def @func_2201() -> (Tensor[(15, 10, 3), uint16],) {
  %528 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %529 = %528.0;
  (%529,)
}

def @func_1884() -> (Tensor[(7, 5, 6), bool],) {
  %530 = @func_1334() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) */;
  %531 = %530.1;
  (%531,)
}

def @func_8047() -> Tensor[(7, 5, 6), float32] {
  @func_588() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_5427(%var_5413: Tensor[(3, 3, 13), float64]) -> (Tensor[(3, 3, 13), float64], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
  %532 = cast(%var_5413, dtype="float64") /* ty=Tensor[(3, 3, 13), float64] */;
  %533 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(3, 3, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 3, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 3, 13), float64] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %536 = @func_3894() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), float32]) */;
  %537 = @func_2741() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %538 = divide(%534, %535) /* ty=Tensor[(3, 3, 13), float64] */;
  %539 = %536.0;
  %540 = %537.0;
  (%538, %539, %540)
}

def @func_7774() -> (Tensor[(7, 5, 6), float32],) {
  %541 = @func_5874() /* ty=Tensor[(7, 5, 6), float32] */;
  (%541,)
}

def @func_8519(%var_8516: Tensor[(780), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(15, 10, 3), uint16], Tensor[(8, 60), float32], Tensor[(7, 5, 6), float32], Tensor[(13, 6, 10), float64], Tensor[(780), float64]) {
  %542 = @func_7836() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %543 = @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %544 = @func_3231() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %545 = @func_2201() /* ty=(Tensor[(15, 10, 3), uint16],) */;
  %546 = @func_3547() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %547 = %546.3;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %549 = @func_7283() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %550 = cast(%var_8516, dtype="float64") /* ty=Tensor[(780), float64] */;
  %551 = reshape(%550, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float64] */;
  %552 = @func_1850(%551) /* ty=(Tensor[(13, 6, 10), float64],) */;
  %553 = %542.0;
  %554 = %543.1;
  %555 = %544.0;
  %556 = %545.0;
  %557 = rsqrt(%548) /* ty=Tensor[(8, 60), float32] */;
  %558 = %549.0;
  %559 = %552.0;
  (%553, %554, %555, %556, %557, %558, %559, %var_8516)
}

def @func_318() -> (Tensor[(10, 13, 7), float64],) {
  %560 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %561 = log(%560) /* ty=Tensor[(10, 13, 7), float64] */;
  %562 = cast(%561, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %563 = rsqrt(%562) /* ty=Tensor[(10, 13, 7), float64] */;
  (%563,)
}

def @func_9159() -> (Tensor[(10, 13, 7), float64],) {
  %564 = @func_4673() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %565 = %564.1;
  (%565,)
}

def @func_9705() -> (Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
  %566 = @func_2708() /* ty=Tensor[(10, 13, 7), float32] */;
  %567 = @func_3593() /* ty=Tensor[(10, 13, 7), float64] */;
  (%566, %567)
}

def @func_2159() -> Tensor[(10, 13, 7), bool] {
  @func_1611() /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_8576(%var_8565: Tensor[(14, 7, 8), float64], %var_8566: Tensor[(14, 7, 8), float64]) -> (Tensor[(14, 7, 8), float64],) {
  %568 = cast(%var_8566, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
  %569 = shape_of(%var_8565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%var_8565, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %572 = divide(%570, %571) /* ty=Tensor[(14, 7, 8), float64] */;
  (%572,)
}

def @func_6772() -> Tensor[(10, 13, 7), float64] {
  %573 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %573.0
}

def @func_4340() -> Tensor[(10, 13, 7), float32] {
  %574 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %575 = %574.1;
  %576 = cast(%575, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  asin(%576) /* ty=Tensor[(10, 13, 7), float32] */
}

def @func_1473(%var_1466: Tensor[(7, 3, 14), float64], %var_1467: Tensor[(7, 3, 14), float64]) -> (Tensor[(7, 3, 14), float64],) {
  %577 = cast(%var_1467, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %578 = shape_of(%var_1466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%var_1466, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %581 = divide(%579, %580) /* ty=Tensor[(7, 3, 14), float64] */;
  (%581,)
}

def @func_5969() -> (Tensor[(15, 10, 3), uint16],) {
  %582 = @func_2595() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(15, 10, 3), uint16]) */;
  %583 = %582.1;
  (%583,)
}

def @func_5676() -> (Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64]) {
  %584 = @func_5086() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %585 = @func_3547() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %586 = %584.0;
  %587 = %585.1;
  (%586, %587)
}

def @func_6829(%var_6826: Tensor[(10, 3, 6), float32]) -> (Tensor[(10, 3, 6), float32],) {
  %588 = cast(%var_6826, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %589 = sigmoid(%588) /* ty=Tensor[(10, 3, 6), float32] */;
  (%589,)
}

def @func_698() -> (Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %590 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 10, 3), float32] */, dtype="float32") /* ty=Tensor[(15, 10, 3), float32] */;
  %591 = sigmoid(%590) /* ty=Tensor[(15, 10, 3), float32] */;
  %592 = cast(%591, dtype="uint16") /* ty=Tensor[(15, 10, 3), uint16] */;
  %593 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(15, 10, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 10, 3), float32] */, dtype="uint16") /* ty=Tensor[(15, 10, 3), uint16] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %596 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %597 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %598 = minimum(%594, %595) /* ty=Tensor[(15, 10, 3), uint16] */;
  %599 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %600 = %596.0;
  %601 = %597.0;
  (%598, %599, %600, %601)
}

def @func_9386() -> (Tensor[(10, 13, 7), float64], Tensor[(9, 1, 6), float64]) {
  %602 = @func_4110() /* ty=Tensor[(10, 13, 7), float64] */;
  %603 = @func_3609() /* ty=Tensor[(9, 1, 6), float64] */;
  (%602, %603)
}

def @func_8993() -> (Tensor[(14, 4, 8), float64], Tensor[(7, 5, 6), bool]) {
  %604 = @func_7436() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) */;
  %605 = @func_5182() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %606 = %604.1;
  %607 = %605.0;
  (%606, %607)
}

def @func_2830() -> (Tensor[(10, 13, 7), bool],) {
  %608 = @func_2006() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */;
  %609 = %608.1;
  (%609,)
}

def @func_1694() -> Tensor[(7, 5, 6), float32] {
  %610 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %610.5
}

def @func_2100(%var_2080: Tensor[(10, 13, 7), float64]) -> (Tensor[(10, 13, 7), uint8], Tensor[(10, 13, 7), float64]) {
  %611 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %612 = %611.0;
  %613 = cast(%var_2080, dtype="uint8") /* ty=Tensor[(10, 13, 7), uint8] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="uint8") /* ty=Tensor[(10, 13, 7), uint8] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %617 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %618 = bitwise_or(%615, %616) /* ty=Tensor[(10, 13, 7), uint8] */;
  %619 = %617.0;
  (%618, %619)
}

def @func_6712() -> Tensor[(7, 5, 6), float32] {
  @func_5874() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_3036() -> (Tensor[(10, 13, 7), float64],) {
  %620 = @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %621 = %620.1;
  (%621,)
}

def @func_6181(%var_6157: Tensor[(64), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(4, ?, 16), bool], Tensor[(64), float64], Tensor[(896), float64]) {
  %622 = @func_5928() /* ty=(Tensor[(9, 1, 6), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32]) */;
  %623 = cast(%var_6157, dtype="float64") /* ty=Tensor[(64), float64] */;
  %624 = cast(meta[relay.Constant][21] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %625 = reshape(%623, newshape=[4, 1, 16]) /* ty=Tensor[(4, 1, 16), float64] */;
  %626 = reshape(%624, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %627 = @func_2538(%625, %626) /* ty=(Tensor[(4, ?, 16), bool], Tensor[(4, 14, 16), uint16]) */;
  %628 = %622.3;
  %629 = %627.0;
  (%628, %629, %var_6157, meta[relay.Constant][21] /* ty=Tensor[(896), float64] */)
}

def @func_843() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  %630 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %631 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %633 = exp(%632) /* ty=Tensor[(7, 5, 6), float32] */;
  %634 = cast(%633, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %635 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %636 = %630.0;
  %637 = log2(%634) /* ty=Tensor[(7, 5, 6), float32] */;
  %638 = %635.0;
  (%636, %637, %638)
}

def @func_3945() -> (Tensor[(15, 10, 3), uint16],) {
  %639 = @func_2201() /* ty=(Tensor[(15, 10, 3), uint16],) */;
  %640 = %639.0;
  (%640,)
}

def @func_9173() -> Tensor[(10, 13, 7), bool] {
  @func_6620() /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_414() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %641 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %642 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %643 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %644 = %641.0;
  %645 = %642.0;
  %646 = %643.0;
  (%644, %645, %646)
}

def @func_9416(%var_9397: Tensor[(3, 10, 6), float64]) -> (Tensor[(3, 10, 6), float64], Tensor[(3, 10, 6), float64]) {
  %647 = cast(%var_9397, dtype="float64") /* ty=Tensor[(3, 10, 6), float64] */;
  %648 = sqrt(%647) /* ty=Tensor[(3, 10, 6), float64] */;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(3, 10, 6), float64] */;
  %650 = cast(%var_9397, dtype="float64") /* ty=Tensor[(3, 10, 6), float64] */;
  %651 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%648, dtype="float64") /* ty=Tensor[(3, 10, 6), float64] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %654 = tan(%649) /* ty=Tensor[(3, 10, 6), float64] */;
  %655 = subtract(%652, %653) /* ty=Tensor[(3, 10, 6), float64] */;
  (%654, %655)
}

def @func_2403() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %656 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %657 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %658 = %656.0;
  %659 = %657.2;
  (%658, %659)
}

def @func_6370() -> (Tensor[(10, 13, 7), float64],) {
  %660 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %661 = %660.0;
  (%661,)
}

def @func_4741() -> Tensor[(7, 5, 6), float32] {
  @func_588() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_4110() -> Tensor[(10, 13, 7), float64] {
  @func_3195() /* ty=Tensor[(10, 13, 7), float64] */
}

def @func_7716() -> (Tensor[(10, 13, 7), bool],) {
  %662 = @func_4414() /* ty=Tensor[(10, 13, 7), bool] */;
  (%662,)
}

def @func_4800() -> (Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), bool]) {
  %663 = @func_2817() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %664 = @func_3609() /* ty=Tensor[(9, 1, 6), float64] */;
  %665 = %663.0;
  (%664, %665)
}

def @func_7029(%var_7021: Tensor[(3, 7, 15), uint8], %var_7022: Tensor[(3, 7, 15), uint8]) -> Tensor[(3, 7, 15), uint8] {
  %666 = cast(%var_7022, dtype="uint8") /* ty=Tensor[(3, 7, 15), uint8] */;
  %667 = shape_of(%var_7021, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%var_7021, dtype="uint8") /* ty=Tensor[(3, 7, 15), uint8] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%668, %669) /* ty=Tensor[(3, 7, 15), uint8] */
}

def @func_7119() -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) {
  %670 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %671 = @func_3129() /* ty=Tensor[(7, 5, 6), bool] */;
  %672 = %670.0;
  (%671, %672)
}

def @func_2781() -> Tensor[(10, 13, 7), float64] {
  %673 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %673.0
}

def @func_4279() -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) {
  %674 = @func_2905() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */;
  %675 = @func_2830() /* ty=(Tensor[(10, 13, 7), bool],) */;
  %676 = @func_2961() /* ty=Tensor[(7, 5, 6), float32] */;
  %677 = %674.0;
  %678 = %675.0;
  (%676, %677, %678)
}

def @func_6823() -> Tensor[(10, 13, 7), float64] {
  %679 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %679.1
}

def @func_2290() -> Tensor[(7, 5, 6), bool] {
  %680 = @func_1884() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %680.0
}

def @func_5359() -> (Tensor[(7, 5, 6), float32],) {
  %681 = @func_3231() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %682 = %681.0;
  (%682,)
}

def @func_588() -> Tensor[(7, 5, 6), float32] {
  %683 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  erf(%683) /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_4903() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %684 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %685 = @func_4243() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %686 = @func_1793() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %687 = %684.0;
  %688 = %685.0;
  %689 = %686.0;
  (%687, %688, %689)
}

def @func_2180() -> (Tensor[(7, 5, 6), bool],) {
  %690 = @func_1884() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %691 = %690.0;
  (%691,)
}

def @func_2247() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %692 = @func_2058() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */;
  %693 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %694 = %692.2;
  %695 = %693.0;
  (%694, %695)
}

def @func_7872() -> (Tensor[(10, 13, 7), float64],) {
  %696 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %697 = %696.0;
  (%697,)
}

def @func_2685(%var_2654: Tensor[(910), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) {
  %698 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %699 = cast(%var_2654, dtype="float64") /* ty=Tensor[(910), float64] */;
  %700 = reshape(%699, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
  %701 = @func_1054(%700) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %702 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %703 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %704 = %698.0;
  %705 = %701.3;
  %706 = @func_2290() /* ty=Tensor[(7, 5, 6), bool] */;
  %707 = %702.0;
  (%703, %704, %705, %var_2654, %706, %707)
}

def @func_8133() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %708 = @func_1793() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %709 = @func_4560() /* ty=(Tensor[(7, 5, 6), int32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float32]) */;
  %710 = @func_6370() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %711 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %712 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %713 = @func_7953() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) */;
  %714 = %708.0;
  %715 = %709.1;
  %716 = %710.0;
  %717 = %711.2;
  %718 = %712.0;
  %719 = %713.0;
  %720 = @func_6772() /* ty=Tensor[(10, 13, 7), float64] */;
  (%714, %715, %716, %717, %718, %719, %720)
}

def @func_2058() -> (Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) {
  %721 = @func_1611() /* ty=Tensor[(10, 13, 7), bool] */;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %723 = reshape(%722, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
  %724 = @func_1054(%723) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %725 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %726 = %724.1;
  %727 = %725.0;
  (%721, %726, %727)
}

def @func_6620() -> Tensor[(10, 13, 7), bool] {
  %728 = @func_4673() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %728.2
}

def @func_5998() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %729 = @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %730 = %729.0;
  %731 = @func_5204() /* ty=Tensor[(7, 5, 6), bool] */;
  (%730, %731)
}

def @func_6354() -> (Tensor[(7, 5, 6), float32],) {
  %732 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %733 = cast(%732, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %734 = log10(%733) /* ty=Tensor[(7, 5, 6), float32] */;
  (%734,)
}

def @func_6464() -> (Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) {
  %735 = @func_4323() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %736 = @func_2159() /* ty=Tensor[(10, 13, 7), bool] */;
  %737 = cast(%736, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %738 = reshape(%737, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float32] */;
  %739 = @func_5806(%738) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), int8]) */;
  %740 = %735.0;
  %741 = %739.0;
  (%736, %740, %741)
}

def @func_329() -> (Tensor[(10, 13, 7), float64],) {
  %742 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %743 = %742.0;
  (%743,)
}

def @func_7836() -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  %744 = @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %745 = @func_3576() /* ty=Tensor[(7, 5, 6), float32] */;
  %746 = %744.0;
  (%745, %746)
}

def @main(%var_9908: Tensor[(14, 6, 11), int16], %var_9909: Tensor[(14, 6, 11), int16]) -> (Tensor[(14, 6, 11), bool], Tensor[(14, 6, 11), bool]) {
  %747 = cast(%var_9909, dtype="bool") /* ty=Tensor[(14, 6, 11), bool] */;
  %748 = shape_of(%var_9908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_9908, dtype="bool") /* ty=Tensor[(14, 6, 11), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = cast(%var_9908, dtype="bool") /* ty=Tensor[(14, 6, 11), bool] */;
  %752 = shape_of(%var_9909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%var_9909, dtype="bool") /* ty=Tensor[(14, 6, 11), bool] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %755 = not_equal(%749, %750) /* ty=Tensor[(14, 6, 11), bool] */;
  %756 = less(%753, %754) /* ty=Tensor[(14, 6, 11), bool] */;
  (%755, %756)
}

def @func_6907() -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) {
  %757 = @func_4741() /* ty=Tensor[(7, 5, 6), float32] */;
  %758 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %762 = @func_5182() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %763 = power(%760, %761) /* ty=Tensor[(7, 5, 6), float32] */;
  %764 = %762.0;
  (%763, %764)
}

def @func_3231() -> (Tensor[(7, 5, 6), float32],) {
  %765 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  (%765,)
}

def @func_1850(%var_1843: Tensor[(13, 6, 10), float64]) -> (Tensor[(13, 6, 10), float64],) {
  %766 = cast(%var_1843, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
  %767 = sinh(%766) /* ty=Tensor[(13, 6, 10), float64] */;
  (%767,)
}

def @func_1054(%var_956: Tensor[(10, 13, 7), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %768 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %769 = %768.2;
  %770 = cast(%var_956, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %774 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %775 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %776 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %777 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %778 = cast(meta[relay.Constant][24] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %779 = reshape(%778, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), float32] */;
  %780 = @func_544(%779) /* ty=(Tensor[(14, 4, 8), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %781 = %780.3;
  %782 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %783 = %782.2;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %785 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%781, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %788 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %789 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %790 = logical_and(%772, %773) /* ty=Tensor[(10, 13, 7), bool] */;
  %791 = %774.2;
  %792 = %775.0;
  %793 = %776.2;
  %794 = %777.0;
  %795 = power(%786, %787) /* ty=Tensor[(10, 13, 7), float64] */;
  %796 = %788.0;
  (%789, %790, %791, %792, meta[relay.Constant][24] /* ty=Tensor[(448), float32] */, %793, %794, %795, %796)
}

def @func_2394() -> (Tensor[(10, 13, 7), float64],) {
  %797 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %798 = %797.0;
  (%798,)
}

def @func_3129() -> Tensor[(7, 5, 6), bool] {
  @func_2290() /* ty=Tensor[(7, 5, 6), bool] */
}

def @func_5941() -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  %799 = @func_3715() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %800 = @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %801 = %799.0;
  %802 = %800.0;
  (%801, %802)
}

def @func_8011(%var_7966: Tensor[(6, 4, 8), uint8], %var_7967: Tensor[(6, 4, 8), uint8], %var_7972: Tensor[(780), float64], %var_8007: Tensor[(6, 4, 8), int16]) -> (Tensor[(6, 4, 8), uint8], Tensor[(13, 6, 10), float64], Tensor[(780), float64], Tensor[(6, 4, 8), bool]) {
  %803 = cast(%var_7967, dtype="uint8") /* ty=Tensor[(6, 4, 8), uint8] */;
  %804 = shape_of(%var_7966, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%var_7966, dtype="uint8") /* ty=Tensor[(6, 4, 8), uint8] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %807 = cast(%var_7972, dtype="float64") /* ty=Tensor[(780), float64] */;
  %808 = reshape(%807, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float64] */;
  %809 = cast(%var_7966, dtype="int16") /* ty=Tensor[(6, 4, 8), int16] */;
  %810 = shape_of(%var_7967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%var_7967, dtype="int16") /* ty=Tensor[(6, 4, 8), int16] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %813 = minimum(%811, %812) /* ty=Tensor[(6, 4, 8), int16] */;
  %814 = cast(%var_8007, dtype="bool") /* ty=Tensor[(6, 4, 8), bool] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%813, dtype="bool") /* ty=Tensor[(6, 4, 8), bool] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %818 = bitwise_xor(%805, %806) /* ty=Tensor[(6, 4, 8), uint8] */;
  %819 = @func_1898(%808) /* ty=Tensor[(13, 6, 10), float64] */;
  %820 = equal(%816, %817) /* ty=Tensor[(6, 4, 8), bool] */;
  (%818, %819, %var_7972, %820)
}

def @func_7397(%var_7345: Tensor[(10, 13, 7), bool]) -> (Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), float32], Tensor[(9, 14, 3), float64]) {
  %821 = @func_4414() /* ty=Tensor[(10, 13, 7), bool] */;
  %822 = cast(%var_7345, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %826 = @func_3715() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %827 = @func_6945() /* ty=(Tensor[(9, 14, 3), float64],) */;
  %828 = logical_or(%824, %825) /* ty=Tensor[(10, 13, 7), bool] */;
  %829 = %826.0;
  %830 = %827.0;
  (%828, %829, %830)
}

def @func_2595() -> (Tensor[(7, 5, 6), bool], Tensor[(15, 10, 3), uint16]) {
  %831 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %832 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %833 = %831.0;
  %834 = %832.0;
  (%833, %834)
}

def @func_2538(%var_2522: Tensor[(4, 1, 16), float64], %var_2530: Tensor[(4, 14, 16), float64]) -> (Tensor[(4, ?, 16), bool], Tensor[(4, 14, 16), uint16]) {
  %835 = cast(%var_2522, dtype="float64") /* ty=Tensor[(4, 1, 16), float64] */;
  %836 = log10(%835) /* ty=Tensor[(4, 1, 16), float64] */;
  %837 = cast(%var_2522, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%836, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %841 = cast(%836, dtype="uint16") /* ty=Tensor[(4, 1, 16), uint16] */;
  %842 = cast(%var_2530, dtype="uint16") /* ty=Tensor[(4, 14, 16), uint16] */;
  %843 = less_equal(%839, %840) /* ty=Tensor[(4, ?, 16), bool] */;
  %844 = subtract(%841, %842) /* ty=Tensor[(4, 14, 16), uint16] */;
  (%843, %844)
}

def @func_5133() -> Tensor[(7, 5, 6), bool] {
  %845 = @func_3433() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
  %845.1
}

def @func_8621() -> Tensor[(10, 13, 7), float64] {
  %846 = @func_7872() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %846.0
}

def @func_7797() -> Tensor[(7, 5, 6), float64] {
  %847 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %848 = %847.5;
  %849 = cast(%848, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
  atanh(%849) /* ty=Tensor[(7, 5, 6), float64] */
}

def @func_7906() -> Tensor[(7, 5, 6), float64] {
  %850 = @func_7436() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) */;
  %851 = %850.0;
  %852 = cast(%851, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
  acosh(%852) /* ty=Tensor[(7, 5, 6), float64] */
}

def @func_7475() -> Tensor[(10, 13, 7), bool] {
  %853 = @func_2830() /* ty=(Tensor[(10, 13, 7), bool],) */;
  %853.0
}

def @func_3609() -> Tensor[(9, 1, 6), float64] {
  %854 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 6), float64] */;
  tan(%854) /* ty=Tensor[(9, 1, 6), float64] */
}

def @func_5718() -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  %855 = @func_2741() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %856 = @func_3715() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %857 = @func_3433() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
  %858 = %855.0;
  %859 = %856.0;
  %860 = %857.0;
  (%858, %859, %860)
}

def @func_4004(%var_3980: Tensor[(10, 13, 7), float32]) -> (Tensor[(10, 13, 7), float32],) {
  %861 = @func_2159() /* ty=Tensor[(10, 13, 7), bool] */;
  %862 = cast(%861, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %863 = sqrt(%862) /* ty=Tensor[(10, 13, 7), float32] */;
  %864 = cast(%var_3980, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %865 = shape_of(%863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %866 = cast(%863, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %868 = floor_mod(%866, %867) /* ty=Tensor[(10, 13, 7), float32] */;
  (%868,)
}

def @func_5734(%var_5726: Tensor[(448), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(448), float32]) {
  %869 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %870 = cast(%var_5726, dtype="float32") /* ty=Tensor[(448), float32] */;
  %871 = reshape(%870, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %872 = @func_3758(%871) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(14, 4, 8), float64]) */;
  %873 = %869.0;
  %874 = %872.1;
  (%873, %874, %var_5726)
}

def @func_2741() -> (Tensor[(7, 5, 6), bool],) {
  %875 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %876 = %875.0;
  (%876,)
}

def @func_5806(%var_5795: Tensor[(10, 13, 7), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), int8]) {
  %877 = @func_5533() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %878 = %877.0;
  %879 = cast(%var_5795, dtype="int8") /* ty=Tensor[(10, 13, 7), int8] */;
  %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(%878, dtype="int8") /* ty=Tensor[(10, 13, 7), int8] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %883 = @func_3593() /* ty=Tensor[(10, 13, 7), float64] */;
  %884 = subtract(%881, %882) /* ty=Tensor[(10, 13, 7), int8] */;
  (%883, %884)
}

def @func_2006() -> (Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) {
  %885 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %886 = log10(%885) /* ty=Tensor[(16, 5, 6), float32] */;
  %887 = @func_1611() /* ty=Tensor[(10, 13, 7), bool] */;
  (%886, %887)
}

def @func_7080() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  %888 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %889 = %888.0;
  %890 = @func_1694() /* ty=Tensor[(7, 5, 6), float32] */;
  (%889, %890)
}

def @func_5533() -> (Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %891 = @func_4383() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %892 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %893 = @func_4340() /* ty=Tensor[(10, 13, 7), float32] */;
  %894 = %891.1;
  %895 = %892.2;
  (%893, %894, %895)
}

def @func_2961() -> Tensor[(7, 5, 6), float32] {
  @func_1694() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_8269() -> (Tensor[(?, ?, 5), uint32], Tensor[(10, 13, 7), float64], Tensor[(7, 130), float32]) {
  %896 = @func_7687() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(?, ?, 5), uint32]) */;
  %897 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 130), float32] */, dtype="float32") /* ty=Tensor[(7, 130), float32] */;
  %898 = reshape(%897, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float32] */;
  %899 = @func_5806(%898) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), int8]) */;
  %900 = %896.1;
  %901 = %899.0;
  (%900, %901, meta[relay.Constant][27] /* ty=Tensor[(7, 130), float32] */)
}

def @func_8311(%var_8296: Tensor[(7, 5, 6), bool]) -> (Tensor[(7, 5, 6), int32],) {
  %902 = @func_2741() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %903 = %902.0;
  %904 = cast(%var_8296, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(3), int32] */;
  %906 = cast(%903, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %908 = bitwise_xor(%906, %907) /* ty=Tensor[(7, 5, 6), int32] */;
  %909 = cast(%var_8296, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %910 = shape_of(%908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%908, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %913 = logical_xor(%911, %912) /* ty=Tensor[(7, 5, 6), int32] */;
  (%913,)
}

def @func_9346() -> (Tensor[(10, 13, 7), bool],) {
  %914 = @func_2006() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */;
  %915 = %914.1;
  (%915,)
}

def @func_4180() -> (Tensor[(?, ?, 5), uint32],) {
  %916 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 5), float32] */;
  %917 = exp(%916) /* ty=Tensor[(1, 1, 5), float32] */;
  %918 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 1, 5), float32] */, dtype="uint32") /* ty=Tensor[(1, 1, 5), uint32] */;
  %919 = shape_of(%917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(%917, dtype="uint32") /* ty=Tensor[(1, 1, 5), uint32] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %922 = bitwise_xor(%920, %921) /* ty=Tensor[(?, ?, 5), uint32] */;
  (%922,)
}

def @func_4163() -> (Tensor[(7, 5, 6), bool],) {
  %923 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %924 = %923.0;
  %925 = @func_1334() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) */;
  %926 = %925.0;
  %927 = cast(%926, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
  %928 = shape_of(%924, dtype="int32") /* ty=Tensor[(3), int32] */;
  %929 = cast(%924, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
  %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %931 = less_equal(%929, %930) /* ty=Tensor[(7, 5, 6), bool] */;
  (%931,)
}

def @func_1664() -> Tensor[(10, 13, 7), float32] {
  %932 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %933 = %932.0;
  %934 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %935 = %934.0;
  %936 = cast(%935, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %937 = shape_of(%933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %938 = cast(%933, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%938, %939) /* ty=Tensor[(10, 13, 7), float32] */
}

def @func_4673() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  %940 = @func_4323() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %941 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %942 = @func_3788() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %943 = %942.0;
  %944 = @func_2905() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */;
  %945 = %944.1;
  %946 = cast(%945, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %947 = shape_of(%943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %948 = cast(%943, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %950 = @func_2830() /* ty=(Tensor[(10, 13, 7), bool],) */;
  %951 = @func_3433() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
  %952 = %940.0;
  %953 = %941.0;
  %954 = greater_equal(%948, %949) /* ty=Tensor[(10, 13, 7), bool] */;
  %955 = %950.0;
  %956 = %951.1;
  %957 = @func_3609() /* ty=Tensor[(9, 1, 6), float64] */;
  %958 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %959 = @func_3195() /* ty=Tensor[(10, 13, 7), float64] */;
  (%952, %953, %954, %955, %956, %957, %958, %959)
}

def @func_9690() -> (Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
  %960 = @func_6067() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), uint16], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */;
  %961 = @func_8993() /* ty=(Tensor[(14, 4, 8), float64], Tensor[(7, 5, 6), bool]) */;
  %962 = %960.4;
  %963 = %961.1;
  (%962, %963)
}

def @func_8862() -> (Tensor[(10, 13, 7), float64],) {
  %964 = @func_1793() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %965 = %964.0;
  (%965,)
}

def @func_5182() -> (Tensor[(7, 5, 6), bool],) {
  %966 = @func_5133() /* ty=Tensor[(7, 5, 6), bool] */;
  (%966,)
}

def @func_1611() -> Tensor[(10, 13, 7), bool] {
  %967 = @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %968 = %967.1;
  %969 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 13, 7), float64] */, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %970 = shape_of(%968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %971 = cast(%968, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %972 = dyn.reshape(%969, %970, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%971, %972) /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_2817() -> (Tensor[(7, 5, 6), bool],) {
  %973 = @func_2290() /* ty=Tensor[(7, 5, 6), bool] */;
  (%973,)
}

def @func_6271() -> (Tensor[(10, 13, 7), bool],) {
  %974 = @func_2905() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */;
  %975 = %974.1;
  (%975,)
}

def @func_7757() -> (Tensor[(10, 13, 7), float32],) {
  %976 = @func_4775() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) */;
  %977 = %976.1;
  (%977,)
}

def @func_9791() -> (Tensor[(7, 5, 6), float32],) {
  %978 = @func_7774() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %979 = %978.0;
  (%979,)
}

def @func_7126() -> (Tensor[(10, 13, 7), bool],) {
  %980 = @func_6620() /* ty=Tensor[(10, 13, 7), bool] */;
  (%980,)
}

def @func_5204() -> Tensor[(7, 5, 6), bool] {
  @func_5133() /* ty=Tensor[(7, 5, 6), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1696() -> Tensor[(7, 5, 6), float32] {
  @func_1694() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_6714() -> Tensor[(7, 5, 6), float32] {
  @func_6712() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_9309() -> Tensor[(10, 13, 7), float64] {
  %0 = @func_6370() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %0.0
}

def @func_2396() -> (Tensor[(10, 13, 7), float64],) {
  @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_5582() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %5 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
    %1 = @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %2 = @func_2741() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %3 = %1.0;
    %4 = %2.0;
    (%3, %4)
  };
  %5() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */
}

def @func_9616(%var_9614: Tensor[(7, 16, 15), int16], %var_9615: Tensor[(7, 16, 15), int16]) -> (Tensor[(7, 16, 15), int16], Tensor[(3, 3, 13), float64], Tensor[(117, 1), float64]) {
  %15 = fn (%var_9604: Tensor[(7, 16, 15), int16], %var_9605: Tensor[(7, 16, 15), int16]) -> (Tensor[(7, 16, 15), int16], Tensor[(3, 3, 13), float64], Tensor[(117, 1), float64]) {
    %6 = cast(%var_9605, dtype="int16") /* ty=Tensor[(7, 16, 15), int16] */;
    %7 = shape_of(%var_9604, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%var_9604, dtype="int16") /* ty=Tensor[(7, 16, 15), int16] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(117, 1), float64] */, dtype="float64") /* ty=Tensor[(117, 1), float64] */;
    %11 = reshape(%10, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float64] */;
    %12 = @func_5427(%11) /* ty=(Tensor[(3, 3, 13), float64], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */;
    %13 = bitwise_and(%8, %9) /* ty=Tensor[(7, 16, 15), int16] */;
    %14 = %12.0;
    (%13, %14, meta[relay.Constant][0] /* ty=Tensor[(117, 1), float64] */)
  };
  %15(%var_9614, %var_9615) /* ty=(Tensor[(7, 16, 15), int16], Tensor[(3, 3, 13), float64], Tensor[(117, 1), float64]) */
}

def @func_454() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %16 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %17 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %18 = %16.2;
  %19 = %17.2;
  (%18, %19)
}

def @func_4182() -> (Tensor[(?, ?, 5), uint32],) {
  @func_4180() /* ty=(Tensor[(?, ?, 5), uint32],) */
}

def @func_456() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_5969() -> (Tensor[(15, 10, 3), uint16],) {
  %20 = @func_2595() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(15, 10, 3), uint16]) */;
  %21 = %20.1;
  (%21,)
}

def @func_9224() -> (Tensor[(7, 5, 6), float32], Tensor[(14, 4, 8), float64], Tensor[(15, 10, 3), uint16]) {
  %28 = fn () -> (Tensor[(7, 5, 6), float32], Tensor[(14, 4, 8), float64], Tensor[(15, 10, 3), uint16]) {
    %22 = @func_8286() /* ty=(Tensor[(7, 5, 6), float32],) */;
    %23 = @func_8993() /* ty=(Tensor[(14, 4, 8), float64], Tensor[(7, 5, 6), bool]) */;
    %24 = @func_2201() /* ty=(Tensor[(15, 10, 3), uint16],) */;
    %25 = %22.0;
    %26 = %23.0;
    %27 = %24.0;
    (%25, %26, %27)
  };
  %28() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(14, 4, 8), float64], Tensor[(15, 10, 3), uint16]) */
}

def @func_2709() -> Tensor[(10, 13, 7), float32] {
  %32 = fn () -> Tensor[(10, 13, 7), float32] {
    %29 = @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %30 = %29.1;
    %31 = cast(%30, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
    log10(%31) /* ty=Tensor[(10, 13, 7), float32] */
  };
  %32() /* ty=Tensor[(10, 13, 7), float32] */
}

def @func_2403() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %33 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %34 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %35 = %33.0;
  %36 = %34.2;
  (%35, %36)
}

def @func_589() -> Tensor[(7, 5, 6), float32] {
  %38 = fn () -> Tensor[(7, 5, 6), float32] {
    %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
    erf(%37) /* ty=Tensor[(7, 5, 6), float32] */
  };
  %38() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_3433() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %39 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %40 = @func_3054() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %41 = %39.0;
  %42 = %40.0;
  (%41, %42)
}

def @func_2741() -> (Tensor[(7, 5, 6), bool],) {
  %43 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %44 = %43.0;
  (%44,)
}

def @func_5719() -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  %51 = fn () -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
    %45 = @func_2741() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %46 = @func_3715() /* ty=(Tensor[(7, 5, 6), float32],) */;
    %47 = @func_3433() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
    %48 = %45.0;
    %49 = %46.0;
    %50 = %47.0;
    (%48, %49, %50)
  };
  %51() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */
}

def @func_3788() -> (Tensor[(10, 13, 7), float64],) {
  %52 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %53 = %52.0;
  (%53,)
}

def @func_5678() -> (Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64]) {
  @func_5676() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64]) */
}

def @func_8314(%var_8312: Tensor[(7, 5, 6), bool]) -> (Tensor[(7, 5, 6), int32],) {
  @func_8311(%var_8312) /* ty=(Tensor[(7, 5, 6), int32],) */
}

def @func_7397(%var_7345: Tensor[(10, 13, 7), bool]) -> (Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), float32], Tensor[(9, 14, 3), float64]) {
  %54 = @func_4414() /* ty=Tensor[(10, 13, 7), bool] */;
  %55 = cast(%var_7345, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %59 = @func_3715() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %60 = @func_6945() /* ty=(Tensor[(9, 14, 3), float64],) */;
  %61 = logical_or(%57, %58) /* ty=Tensor[(10, 13, 7), bool] */;
  %62 = %59.0;
  %63 = %60.0;
  (%61, %62, %63)
}

def @func_2832() -> (Tensor[(10, 13, 7), bool],) {
  @func_2830() /* ty=(Tensor[(10, 13, 7), bool],) */
}

def @func_4800() -> (Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), bool]) {
  %64 = @func_2817() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %65 = @func_3609() /* ty=Tensor[(9, 1, 6), float64] */;
  %66 = %64.0;
  (%65, %66)
}

def @func_7120() -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) {
  %70 = fn () -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) {
    %67 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %68 = @func_3129() /* ty=Tensor[(7, 5, 6), bool] */;
    %69 = %67.0;
    (%68, %69)
  };
  %70() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) */
}

def @func_8047() -> Tensor[(7, 5, 6), float32] {
  @func_588() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_3334(%var_3279: Tensor[(112, 8), float64], %var_3304: Tensor[(4, 14, 16), uint16]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(7, 3, 14), float64], Tensor[(294), float64], Tensor[(64), float64], Tensor[(112, 8), float64], Tensor[(7, 5, 6), float32], Tensor[(15, 10, 3), bool], Tensor[(448), float32], Tensor[(4, 14, 16), uint8], Tensor[(4, 14, 16), float32], Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32]) {
  %71 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %72 = @func_2006() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */;
  %73 = cast(meta[relay.Constant][2] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %74 = cast(meta[relay.Constant][2] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %75 = reshape(%73, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %76 = reshape(%74, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %77 = @func_1473(%75, %76) /* ty=(Tensor[(7, 3, 14), float64],) */;
  %78 = %71.2;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %80 = reshape(%79, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %81 = @func_2685(%80) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %83 = reshape(%82, newshape=[8, 56]) /* ty=Tensor[(8, 56), float32] */;
  %84 = @func_2497(%83) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(15, 10, 3), bool], Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float32], Tensor[(8, 56), float32]) */;
  %85 = cast(meta[relay.Constant][3] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %86 = cast(%var_3279, dtype="float64") /* ty=Tensor[(112, 8), float64] */;
  %87 = reshape(%85, newshape=[4, 1, 16]) /* ty=Tensor[(4, 1, 16), float64] */;
  %88 = reshape(%86, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %89 = @func_2538(%87, %88) /* ty=(Tensor[(4, ?, 16), bool], Tensor[(4, 14, 16), uint16]) */;
  %90 = %89.1;
  %91 = cast(%var_3304, dtype="uint8") /* ty=Tensor[(4, 14, 16), uint8] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="uint8") /* ty=Tensor[(4, 14, 16), uint8] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %95 = cast(%90, dtype="float32") /* ty=Tensor[(4, 14, 16), float32] */;
  %96 = sin(%95) /* ty=Tensor[(4, 14, 16), float32] */;
  %97 = cast(%96, dtype="float32") /* ty=Tensor[(4, 14, 16), float32] */;
  %98 = @func_1334() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) */;
  %99 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %100 = %72.1;
  %101 = %77.0;
  %102 = %81.0;
  %103 = %84.2;
  %104 = bitwise_or(%93, %94) /* ty=Tensor[(4, 14, 16), uint8] */;
  %105 = acos(%97) /* ty=Tensor[(4, 14, 16), float32] */;
  %106 = %98.1;
  %107 = %99.1;
  (%78, %100, %101, meta[relay.Constant][2] /* ty=Tensor[(294), float64] */, meta[relay.Constant][3] /* ty=Tensor[(64), float64] */, %var_3279, %102, %103, meta[relay.Constant][4] /* ty=Tensor[(448), float32] */, %104, %105, %106, %107)
}

def @func_2249() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_6591() -> (Tensor[(10, 13, 7), float32], Tensor[(?, ?, 5), uint32], Tensor[(10, 13, 7), float64], Tensor[(448, 1), float32]) {
  %108 = @func_6067() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), uint16], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */;
  %109 = @func_4180() /* ty=(Tensor[(?, ?, 5), uint32],) */;
  %110 = cast(meta[relay.Constant][5] /* ty=Tensor[(448, 1), float32] */, dtype="float32") /* ty=Tensor[(448, 1), float32] */;
  %111 = reshape(%110, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %112 = @func_5734(%111) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(448), float32]) */;
  %113 = %108.4;
  %114 = %109.0;
  %115 = %112.0;
  (%113, %114, %115, meta[relay.Constant][5] /* ty=Tensor[(448, 1), float32] */)
}

def @func_8164(%var_8139: uint64, %var_8140: Tensor[(7, 6, 1), uint64]) -> (Tensor[(7, 6, 1), uint64], Tensor[(7, 6, ?), float64], Tensor[(10, 13, 7), float64]) {
  %116 = cast(%var_8139, dtype="uint64") /* ty=uint64 */;
  %117 = cast(%var_8140, dtype="uint64") /* ty=Tensor[(7, 6, 1), uint64] */;
  %118 = cast(%var_8140, dtype="float32") /* ty=Tensor[(7, 6, 1), float32] */;
  %119 = cast(%var_8139, dtype="float32") /* ty=float32 */;
  %120 = power(%118, %119) /* ty=Tensor[(7, 6, 1), float32] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(7, 6, 1), float64] */;
  %122 = shape_of(%var_8140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%var_8140, dtype="float64") /* ty=Tensor[(7, 6, 1), float64] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %125 = @func_3547() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %126 = right_shift(%116, %117) /* ty=Tensor[(7, 6, 1), uint64] */;
  %127 = floor_mod(%123, %124) /* ty=Tensor[(7, 6, ?), float64] */;
  %128 = %125.6;
  (%126, %127, %128)
}

def @func_1694() -> Tensor[(7, 5, 6), float32] {
  %129 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %129.5
}

def @func_7184() -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) {
  %130 = @func_7119() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) */;
  %131 = @func_2862() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %132 = @func_2905() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */;
  %133 = %130.1;
  %134 = %131.0;
  %135 = %132.0;
  (%133, %134, %135)
}

def @func_5327(%var_5320: Tensor[(910), float64]) -> (Tensor[(11, 9, 10), float32], Tensor[(10, 13, 7), float64], Tensor[(910), float64]) {
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 9, 10), float32] */;
  %137 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(11, 9, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 9, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 9, 10), float32] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %140 = cast(%var_5320, dtype="float64") /* ty=Tensor[(910), float64] */;
  %141 = reshape(%140, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %142 = @func_2685(%141) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %143 = floor_mod(%138, %139) /* ty=Tensor[(11, 9, 10), float32] */;
  %144 = %142.5;
  (%143, %144, %var_5320)
}

def @func_2962() -> Tensor[(7, 5, 6), float32] {
  %145 = fn () -> Tensor[(7, 5, 6), float32] {
    @func_1694() /* ty=Tensor[(7, 5, 6), float32] */
  };
  %145() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_5429(%var_5428: Tensor[(3, 3, 13), float64]) -> (Tensor[(3, 3, 13), float64], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
  %155 = fn (%var_5413: Tensor[(3, 3, 13), float64]) -> (Tensor[(3, 3, 13), float64], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
    %146 = cast(%var_5413, dtype="float64") /* ty=Tensor[(3, 3, 13), float64] */;
    %147 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(3, 3, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %148 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 3, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 3, 13), float64] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %150 = @func_3894() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), float32]) */;
    %151 = @func_2741() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %152 = divide(%148, %149) /* ty=Tensor[(3, 3, 13), float64] */;
    %153 = %150.0;
    %154 = %151.0;
    (%152, %153, %154)
  };
  %155(%var_5428) /* ty=(Tensor[(3, 3, 13), float64], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */
}

def @func_3003(%var_3002: Tensor[(12, 1, 5), float32]) -> (Tensor[(12, ?, 5), float32],) {
  %163 = fn (%var_2990: Tensor[(12, 1, 5), float32]) -> (Tensor[(12, ?, 5), float32],) {
    %156 = cast(%var_2990, dtype="float32") /* ty=Tensor[(12, 1, 5), float32] */;
    %157 = log(%156) /* ty=Tensor[(12, 1, 5), float32] */;
    %158 = cast(%157, dtype="float32") /* ty=Tensor[(12, 1, 5), float32] */;
    %159 = shape_of(%var_2990, dtype="int32") /* ty=Tensor[(3), int32] */;
    %160 = cast(%var_2990, dtype="float32") /* ty=Tensor[(12, 1, 5), float32] */;
    %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %162 = divide(%160, %161) /* ty=Tensor[(12, ?, 5), float32] */;
    (%162,)
  };
  %163(%var_3002) /* ty=(Tensor[(12, ?, 5), float32],) */
}

def @func_5330(%var_5328: Tensor[(910), float64]) -> (Tensor[(11, 9, 10), float32], Tensor[(10, 13, 7), float64], Tensor[(910), float64]) {
  @func_5327(%var_5328) /* ty=(Tensor[(11, 9, 10), float32], Tensor[(10, 13, 7), float64], Tensor[(910), float64]) */
}

def @func_9706() -> (Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
  %166 = fn () -> (Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
    %164 = @func_2708() /* ty=Tensor[(10, 13, 7), float32] */;
    %165 = @func_3593() /* ty=Tensor[(10, 13, 7), float64] */;
    (%164, %165)
  };
  %166() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) */
}

def @func_6712() -> Tensor[(7, 5, 6), float32] {
  @func_5874() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_6184(%var_6182: Tensor[(64), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(4, ?, 16), bool], Tensor[(64), float64], Tensor[(896), float64]) {
  @func_6181(%var_6182) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(4, ?, 16), bool], Tensor[(64), float64], Tensor[(896), float64]) */
}

def @func_1192(%var_1168: Tensor[(7, 5, 6), float32]) -> Tensor[(7, 5, 6), float32] {
  %167 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %168 = %167.1;
  %169 = cast(%var_1168, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%171, %172) /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_4324() -> (Tensor[(7, 5, 6), bool],) {
  %175 = fn () -> (Tensor[(7, 5, 6), bool],) {
    %173 = @func_2862() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %174 = %173.0;
    (%174,)
  };
  %175() /* ty=(Tensor[(7, 5, 6), bool],) */
}

def @func_3038() -> (Tensor[(10, 13, 7), float64],) {
  @func_3036() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_2182() -> (Tensor[(7, 5, 6), bool],) {
  @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */
}

def @func_3377(%var_3375: Tensor[(11, 15, 14), float32], %var_3376: Tensor[(910), float64]) -> (Tensor[(11, 15, 14), float32], Tensor[(10, 13, 7), float64], Tensor[(910), float64]) {
  %182 = fn (%var_3367: Tensor[(11, 15, 14), float32], %var_3371: Tensor[(910), float64]) -> (Tensor[(11, 15, 14), float32], Tensor[(10, 13, 7), float64], Tensor[(910), float64]) {
    %176 = cast(%var_3367, dtype="float32") /* ty=Tensor[(11, 15, 14), float32] */;
    %177 = cast(%var_3371, dtype="float64") /* ty=Tensor[(910), float64] */;
    %178 = reshape(%177, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
    %179 = @func_2100(%178) /* ty=(Tensor[(10, 13, 7), uint8], Tensor[(10, 13, 7), float64]) */;
    %180 = tan(%176) /* ty=Tensor[(11, 15, 14), float32] */;
    %181 = %179.1;
    (%180, %181, %var_3371)
  };
  %182(%var_3375, %var_3376) /* ty=(Tensor[(11, 15, 14), float32], Tensor[(10, 13, 7), float64], Tensor[(910), float64]) */
}

def @func_3576() -> Tensor[(7, 5, 6), float32] {
  @func_1694() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_4598() -> Tensor[(7, 5, 6), bool] {
  %184 = fn () -> Tensor[(7, 5, 6), bool] {
    %183 = @func_2595() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(15, 10, 3), uint16]) */;
    %183.0
  };
  %184() /* ty=Tensor[(7, 5, 6), bool] */
}

def @func_638() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %185 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %186 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %187 = %185.1;
  %188 = %186.0;
  (%187, %188)
}

def @func_2688(%var_2686: Tensor[(910), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) {
  @func_2685(%var_2686) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */
}

def @func_320() -> (Tensor[(10, 13, 7), float64],) {
  @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_7584() -> (Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float32]) {
  %193 = fn () -> (Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float32]) {
    %189 = @func_3894() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), float32]) */;
    %190 = @func_5928() /* ty=(Tensor[(9, 1, 6), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32]) */;
    %191 = %189.0;
    %192 = %190.4;
    (%191, %192)
  };
  %193() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float32]) */
}

def @func_2394() -> (Tensor[(10, 13, 7), float64],) {
  %194 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %195 = %194.0;
  (%195,)
}

def @func_2782() -> Tensor[(10, 13, 7), float64] {
  %197 = fn () -> Tensor[(10, 13, 7), float64] {
    %196 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %196.0
  };
  %197() /* ty=Tensor[(10, 13, 7), float64] */
}

def @func_1109(%var_1093: Tensor[(1, 8, 4), float64], %var_1094: Tensor[(15, 8, 4), float64]) -> (Tensor[(15, 8, 4), float64],) {
  %198 = cast(%var_1093, dtype="float64") /* ty=Tensor[(1, 8, 4), float64] */;
  %199 = cast(%var_1094, dtype="float64") /* ty=Tensor[(15, 8, 4), float64] */;
  %200 = divide(%198, %199) /* ty=Tensor[(15, 8, 4), float64] */;
  (%200,)
}

def @func_7082() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  @func_7080() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */
}

def @func_2292() -> Tensor[(7, 5, 6), bool] {
  @func_2290() /* ty=Tensor[(7, 5, 6), bool] */
}

def @func_8237() -> (Tensor[(9, 14, 3), float64], Tensor[(10, 13, 7), float64]) {
  %204 = fn () -> (Tensor[(9, 14, 3), float64], Tensor[(10, 13, 7), float64]) {
    %201 = @func_6945() /* ty=(Tensor[(9, 14, 3), float64],) */;
    %202 = %201.0;
    %203 = @func_3593() /* ty=Tensor[(10, 13, 7), float64] */;
    (%202, %203)
  };
  %204() /* ty=(Tensor[(9, 14, 3), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_9388() -> (Tensor[(10, 13, 7), float64], Tensor[(9, 1, 6), float64]) {
  @func_9386() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(9, 1, 6), float64]) */
}

def @func_7033(%var_7031: Tensor[(3, 7, 15), uint8], %var_7032: Tensor[(3, 7, 15), uint8]) -> Tensor[(3, 7, 15), uint8] {
  @func_7029(%var_7031, %var_7032) /* ty=Tensor[(3, 7, 15), uint8] */
}

def @func_9347() -> (Tensor[(10, 13, 7), bool],) {
  %207 = fn () -> (Tensor[(10, 13, 7), bool],) {
    %205 = @func_2006() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */;
    %206 = %205.1;
    (%206,)
  };
  %207() /* ty=(Tensor[(10, 13, 7), bool],) */
}

def @func_330() -> (Tensor[(10, 13, 7), float64],) {
  %210 = fn () -> (Tensor[(10, 13, 7), float64],) {
    %208 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %209 = %208.0;
    (%209,)
  };
  %210() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_8862() -> (Tensor[(10, 13, 7), float64],) {
  %211 = @func_1793() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %212 = %211.0;
  (%212,)
}

def @func_4111() -> Tensor[(10, 13, 7), float64] {
  %213 = fn () -> Tensor[(10, 13, 7), float64] {
    @func_3195() /* ty=Tensor[(10, 13, 7), float64] */
  };
  %213() /* ty=Tensor[(10, 13, 7), float64] */
}

def @func_7874() -> (Tensor[(10, 13, 7), float64],) {
  @func_7872() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_5278() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %214 = @func_3547() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %215 = %214.4;
  %216 = @func_4597() /* ty=Tensor[(7, 5, 6), bool] */;
  (%215, %216)
}

def @func_6355() -> (Tensor[(7, 5, 6), float32],) {
  %220 = fn () -> (Tensor[(7, 5, 6), float32],) {
    %217 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
    %218 = cast(%217, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
    %219 = log10(%218) /* ty=Tensor[(7, 5, 6), float32] */;
    (%219,)
  };
  %220() /* ty=(Tensor[(7, 5, 6), float32],) */
}

def @func_5930() -> (Tensor[(9, 1, 6), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32]) {
  @func_5928() /* ty=(Tensor[(9, 1, 6), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32]) */
}

def @func_3055() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) {
  %224 = fn () -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) {
    %221 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %222 = %221.0;
    %223 = @func_2781() /* ty=Tensor[(10, 13, 7), float64] */;
    (%222, %223)
  };
  %224() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */
}

def @func_2100(%var_2080: Tensor[(10, 13, 7), float64]) -> (Tensor[(10, 13, 7), uint8], Tensor[(10, 13, 7), float64]) {
  %225 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %226 = %225.0;
  %227 = cast(%var_2080, dtype="uint8") /* ty=Tensor[(10, 13, 7), uint8] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="uint8") /* ty=Tensor[(10, 13, 7), uint8] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %231 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %232 = bitwise_or(%229, %230) /* ty=Tensor[(10, 13, 7), uint8] */;
  %233 = %231.0;
  (%232, %233)
}

def @func_6621() -> Tensor[(10, 13, 7), bool] {
  %235 = fn () -> Tensor[(10, 13, 7), bool] {
    %234 = @func_4673() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %234.2
  };
  %235() /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_7837() -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  %239 = fn () -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
    %236 = @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %237 = @func_3576() /* ty=Tensor[(7, 5, 6), float32] */;
    %238 = %236.0;
    (%237, %238)
  };
  %239() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */
}

def @func_4244() -> (Tensor[(10, 13, 7), float64],) {
  %242 = fn () -> (Tensor[(10, 13, 7), float64],) {
    %240 = @func_3433() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
    %241 = %240.0;
    (%241,)
  };
  %242() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_8049() -> Tensor[(7, 5, 6), float32] {
  @func_8047() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_6372() -> (Tensor[(10, 13, 7), float64],) {
  @func_6370() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_8864() -> (Tensor[(10, 13, 7), float64],) {
  @func_8862() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_5372() -> (Tensor[(10, 13, 7), float64],) {
  %245 = fn () -> (Tensor[(10, 13, 7), float64],) {
    %243 = @func_1712() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %244 = %243.0;
    (%244,)
  };
  %245() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_1900(%var_1899: Tensor[(13, 6, 10), float64]) -> Tensor[(13, 6, 10), float64] {
  %247 = fn (%var_1895: Tensor[(13, 6, 10), float64]) -> Tensor[(13, 6, 10), float64] {
    %246 = cast(%var_1895, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
    acos(%246) /* ty=Tensor[(13, 6, 10), float64] */
  };
  %247(%var_1899) /* ty=Tensor[(13, 6, 10), float64] */
}

def @func_6271() -> (Tensor[(10, 13, 7), bool],) {
  %248 = @func_2905() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */;
  %249 = %248.1;
  (%249,)
}

def @func_1335() -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) {
  %262 = fn () -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) {
    %250 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
    %251 = %250.3;
    %252 = cast(%251, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
    %253 = reshape(%252, newshape=[7, 5, 6]) /* ty=Tensor[(7, 5, 6), float32] */;
    %254 = @func_1192(%253) /* ty=Tensor[(7, 5, 6), float32] */;
    %255 = cast(%254, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
    %256 = asin(%255) /* ty=Tensor[(7, 5, 6), float32] */;
    %257 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 5, 6), float32] */, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
    %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%256, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %261 = logical_and(%259, %260) /* ty=Tensor[(7, 5, 6), bool] */;
    (%251, %261)
  };
  %262() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) */
}

def @func_5134() -> Tensor[(7, 5, 6), bool] {
  %264 = fn () -> Tensor[(7, 5, 6), bool] {
    %263 = @func_3433() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
    %263.1
  };
  %264() /* ty=Tensor[(7, 5, 6), bool] */
}

def @func_5943() -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  @func_5941() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */
}

def @func_6067() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), uint16], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
  %265 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %266 = %265.1;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %268 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 13, 7), float64] */, dtype="uint16") /* ty=Tensor[(10, 13, 7), uint16] */;
  %269 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%266, dtype="uint16") /* ty=Tensor[(10, 13, 7), uint16] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %272 = @func_5452() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
  %273 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 13, 7), float64] */, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %274 = @func_5204() /* ty=Tensor[(7, 5, 6), bool] */;
  %275 = exp(%267) /* ty=Tensor[(10, 13, 7), float64] */;
  %276 = bitwise_xor(%270, %271) /* ty=Tensor[(10, 13, 7), uint16] */;
  %277 = %272.2;
  %278 = sinh(%273) /* ty=Tensor[(10, 13, 7), float32] */;
  %279 = @func_4597() /* ty=Tensor[(7, 5, 6), bool] */;
  (%274, %275, %276, %277, %278, %279)
}

def @func_4776() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
  %285 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
    %280 = @func_1712() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %281 = @func_1793() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %282 = %280.0;
    %283 = @func_1664() /* ty=Tensor[(10, 13, 7), float32] */;
    %284 = %281.0;
    (%282, %283, %284)
  };
  %285() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) */
}

def @func_7400(%var_7398: Tensor[(10, 13, 7), bool]) -> (Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), float32], Tensor[(9, 14, 3), float64]) {
  @func_7397(%var_7398) /* ty=(Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), float32], Tensor[(9, 14, 3), float64]) */
}

def @func_2405() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_6947() -> (Tensor[(9, 14, 3), float64],) {
  @func_6945() /* ty=(Tensor[(9, 14, 3), float64],) */
}

def @func_6546() -> (Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
  %289 = fn () -> (Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
    %286 = @func_4800() /* ty=(Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), bool]) */;
    %287 = @func_1664() /* ty=Tensor[(10, 13, 7), float32] */;
    %288 = %286.1;
    (%287, %288)
  };
  %289() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */
}

def @func_2290() -> Tensor[(7, 5, 6), bool] {
  %290 = @func_1884() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %290.0
}

def @func_6327() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) {
  %291 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %292 = @func_5581() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
  %293 = @func_6271() /* ty=(Tensor[(10, 13, 7), bool],) */;
  %294 = @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %295 = %291.0;
  %296 = %292.1;
  %297 = %293.0;
  %298 = %294.0;
  (%295, %296, %297, %298)
}

def @func_4674() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  %319 = fn () -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
    %299 = @func_4323() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %300 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %301 = @func_3788() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %302 = %301.0;
    %303 = @func_2905() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */;
    %304 = %303.1;
    %305 = cast(%304, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
    %306 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
    %307 = cast(%302, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %309 = @func_2830() /* ty=(Tensor[(10, 13, 7), bool],) */;
    %310 = @func_3433() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
    %311 = %299.0;
    %312 = %300.0;
    %313 = greater_equal(%307, %308) /* ty=Tensor[(10, 13, 7), bool] */;
    %314 = %309.0;
    %315 = %310.1;
    %316 = @func_3609() /* ty=Tensor[(9, 1, 6), float64] */;
    %317 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
    %318 = @func_3195() /* ty=Tensor[(10, 13, 7), float64] */;
    (%311, %312, %313, %314, %315, %316, %317, %318)
  };
  %319() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */
}

def @func_4279() -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) {
  %320 = @func_2905() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */;
  %321 = @func_2830() /* ty=(Tensor[(10, 13, 7), bool],) */;
  %322 = @func_2961() /* ty=Tensor[(7, 5, 6), float32] */;
  %323 = %320.0;
  %324 = %321.0;
  (%322, %323, %324)
}

def @func_7264() -> (Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(10, 13, 7), float64]) {
  %333 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(10, 13, 7), float64]) {
    %325 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %326 = %325.1;
    %327 = cast(%326, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
    %328 = reshape(%327, newshape=[910]) /* ty=Tensor[(910), float64] */;
    %329 = @func_5327(%328) /* ty=(Tensor[(11, 9, 10), float32], Tensor[(10, 13, 7), float64], Tensor[(910), float64]) */;
    %330 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %331 = %329.2;
    %332 = %330.0;
    (%326, %331, %332)
  };
  %333() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_1195(%var_1193: Tensor[(7, 5, 6), float32]) -> Tensor[(7, 5, 6), float32] {
  @func_1192(%var_1193) /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_3435() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  @func_3433() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */
}

def @func_2247() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %334 = @func_2058() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */;
  %335 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %336 = %334.2;
  %337 = %335.0;
  (%336, %337)
}

def @func_5411() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %342 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
    %338 = @func_3036() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %339 = @func_4903() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %340 = %338.0;
    %341 = %339.2;
    (%340, %341)
  };
  %342() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_2421() -> (Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) {
  %343 = @func_1611() /* ty=Tensor[(10, 13, 7), bool] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %345 = reshape(%344, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
  %346 = @func_1395(%345) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) */;
  %347 = %346.2;
  (%343, %347)
}

def @func_3130() -> Tensor[(7, 5, 6), bool] {
  %348 = fn () -> Tensor[(7, 5, 6), bool] {
    @func_2290() /* ty=Tensor[(7, 5, 6), bool] */
  };
  %348() /* ty=Tensor[(7, 5, 6), bool] */
}

def @func_3594() -> Tensor[(10, 13, 7), float64] {
  %350 = fn () -> Tensor[(10, 13, 7), float64] {
    %349 = @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %349.0
  };
  %350() /* ty=Tensor[(10, 13, 7), float64] */
}

def @func_3894() -> (Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), float32]) {
  %351 = @func_1664() /* ty=Tensor[(10, 13, 7), float32] */;
  %352 = @func_2961() /* ty=Tensor[(7, 5, 6), float32] */;
  (%351, %352)
}

def @func_4341() -> Tensor[(10, 13, 7), float32] {
  %356 = fn () -> Tensor[(10, 13, 7), float32] {
    %353 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %354 = %353.1;
    %355 = cast(%354, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
    asin(%355) /* ty=Tensor[(10, 13, 7), float32] */
  };
  %356() /* ty=Tensor[(10, 13, 7), float32] */
}

def @func_5859() -> (Tensor[(7, 5, 6), float32], Tensor[(9, 1, 6), float64], Tensor[(16, 5, 6), float32]) {
  @func_5857() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(9, 1, 6), float64], Tensor[(16, 5, 6), float32]) */
}

def @func_3716() -> (Tensor[(7, 5, 6), float32],) {
  %359 = fn () -> (Tensor[(7, 5, 6), float32],) {
    %357 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %358 = %357.1;
    (%358,)
  };
  %359() /* ty=(Tensor[(7, 5, 6), float32],) */
}

def @func_5999() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %363 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
    %360 = @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %361 = %360.0;
    %362 = @func_5204() /* ty=Tensor[(7, 5, 6), bool] */;
    (%361, %362)
  };
  %363() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */
}

def @func_4414() -> Tensor[(10, 13, 7), bool] {
  @func_2159() /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_7953() -> (Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) {
  %364 = @func_5371() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %365 = cast(meta[relay.Constant][11] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %366 = reshape(%365, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %367 = @func_3758(%366) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(14, 4, 8), float64]) */;
  %368 = %364.0;
  %369 = %367.2;
  (%368, %369, meta[relay.Constant][11] /* ty=Tensor[(448), float32] */)
}

def @func_9419(%var_9417: Tensor[(3, 10, 6), float64]) -> (Tensor[(3, 10, 6), float64], Tensor[(3, 10, 6), float64]) {
  @func_9416(%var_9417) /* ty=(Tensor[(3, 10, 6), float64], Tensor[(3, 10, 6), float64]) */
}

def @func_8168(%var_8166: uint64, %var_8167: Tensor[(7, 6, 1), uint64]) -> (Tensor[(7, 6, 1), uint64], Tensor[(7, 6, ?), float64], Tensor[(10, 13, 7), float64]) {
  @func_8164(%var_8166, %var_8167) /* ty=(Tensor[(7, 6, 1), uint64], Tensor[(7, 6, ?), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_7872() -> (Tensor[(10, 13, 7), float64],) {
  %370 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %371 = %370.0;
  (%371,)
}

def @func_5359() -> (Tensor[(7, 5, 6), float32],) {
  %372 = @func_3231() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %373 = %372.0;
  (%373,)
}

def @func_5534() -> (Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %379 = fn () -> (Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
    %374 = @func_4383() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %375 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %376 = @func_4340() /* ty=Tensor[(10, 13, 7), float32] */;
    %377 = %374.1;
    %378 = %375.2;
    (%376, %377, %378)
  };
  %379() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_1852(%var_1851: Tensor[(13, 6, 10), float64]) -> (Tensor[(13, 6, 10), float64],) {
  %382 = fn (%var_1843: Tensor[(13, 6, 10), float64]) -> (Tensor[(13, 6, 10), float64],) {
    %380 = cast(%var_1843, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
    %381 = sinh(%380) /* ty=Tensor[(13, 6, 10), float64] */;
    (%381,)
  };
  %382(%var_1851) /* ty=(Tensor[(13, 6, 10), float64],) */
}

def @func_9160() -> (Tensor[(10, 13, 7), float64],) {
  %385 = fn () -> (Tensor[(10, 13, 7), float64],) {
    %383 = @func_4673() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %384 = %383.1;
    (%384,)
  };
  %385() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_9596() -> (Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), float32], Tensor[(448), float32]) {
  @func_9594() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), float32], Tensor[(448), float32]) */
}

def @func_6825() -> Tensor[(10, 13, 7), float64] {
  @func_6823() /* ty=Tensor[(10, 13, 7), float64] */
}

def @func_4562() -> (Tensor[(7, 5, 6), int32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float32]) {
  @func_4560() /* ty=(Tensor[(7, 5, 6), int32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float32]) */
}

def @func_1477(%var_1475: Tensor[(7, 3, 14), float64], %var_1476: Tensor[(7, 3, 14), float64]) -> (Tensor[(7, 3, 14), float64],) {
  @func_1473(%var_1475, %var_1476) /* ty=(Tensor[(7, 3, 14), float64],) */
}

def @func_1794() -> (Tensor[(10, 13, 7), float64],) {
  %388 = fn () -> (Tensor[(10, 13, 7), float64],) {
    %386 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %387 = %386.0;
    (%387,)
  };
  %388() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_5205() -> Tensor[(7, 5, 6), bool] {
  %389 = fn () -> Tensor[(7, 5, 6), bool] {
    @func_5133() /* ty=Tensor[(7, 5, 6), bool] */
  };
  %389() /* ty=Tensor[(7, 5, 6), bool] */
}

def @func_6069() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), uint16], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
  @func_6067() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), uint16], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */
}

def @func_4416() -> Tensor[(10, 13, 7), bool] {
  @func_4414() /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_7128() -> (Tensor[(10, 13, 7), bool],) {
  @func_7126() /* ty=(Tensor[(10, 13, 7), bool],) */
}

def @func_7437() -> (Tensor[(7, 5, 6), bool], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) {
  %395 = fn () -> (Tensor[(7, 5, 6), bool], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) {
    %390 = cast(meta[relay.Constant][12] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
    %391 = reshape(%390, newshape=[448]) /* ty=Tensor[(448), float32] */;
    %392 = @func_3758(%391) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(14, 4, 8), float64]) */;
    %393 = @func_5133() /* ty=Tensor[(7, 5, 6), bool] */;
    %394 = %392.2;
    (%393, %394, meta[relay.Constant][12] /* ty=Tensor[(448), float32] */)
  };
  %395() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) */
}

def @func_2103(%var_2101: Tensor[(10, 13, 7), float64]) -> (Tensor[(10, 13, 7), uint8], Tensor[(10, 13, 7), float64]) {
  @func_2100(%var_2101) /* ty=(Tensor[(10, 13, 7), uint8], Tensor[(10, 13, 7), float64]) */
}

def @func_7302() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  @func_7300() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */
}

def @func_6593() -> (Tensor[(10, 13, 7), float32], Tensor[(?, ?, 5), uint32], Tensor[(10, 13, 7), float64], Tensor[(448, 1), float32]) {
  @func_6591() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(?, ?, 5), uint32], Tensor[(10, 13, 7), float64], Tensor[(448, 1), float32]) */
}

def @func_700() -> (Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_2203() -> (Tensor[(15, 10, 3), uint16],) {
  @func_2201() /* ty=(Tensor[(15, 10, 3), uint16],) */
}

def @func_6832(%var_6830: Tensor[(10, 3, 6), float32]) -> (Tensor[(10, 3, 6), float32],) {
  @func_6829(%var_6830) /* ty=(Tensor[(10, 3, 6), float32],) */
}

def @func_2160() -> Tensor[(10, 13, 7), bool] {
  %396 = fn () -> Tensor[(10, 13, 7), bool] {
    @func_1611() /* ty=Tensor[(10, 13, 7), bool] */
  };
  %396() /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_8270() -> (Tensor[(?, ?, 5), uint32], Tensor[(10, 13, 7), float64], Tensor[(7, 130), float32]) {
  %403 = fn () -> (Tensor[(?, ?, 5), uint32], Tensor[(10, 13, 7), float64], Tensor[(7, 130), float32]) {
    %397 = @func_7687() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(?, ?, 5), uint32]) */;
    %398 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 130), float32] */, dtype="float32") /* ty=Tensor[(7, 130), float32] */;
    %399 = reshape(%398, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float32] */;
    %400 = @func_5806(%399) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), int8]) */;
    %401 = %397.1;
    %402 = %400.0;
    (%401, %402, meta[relay.Constant][13] /* ty=Tensor[(7, 130), float32] */)
  };
  %403() /* ty=(Tensor[(?, ?, 5), uint32], Tensor[(10, 13, 7), float64], Tensor[(7, 130), float32]) */
}

def @func_1057(%var_1055: Tensor[(10, 13, 7), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  @func_1054(%var_1055) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_2201() -> (Tensor[(15, 10, 3), uint16],) {
  %404 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %405 = %404.0;
  (%405,)
}

def @func_8579(%var_8577: Tensor[(14, 7, 8), float64], %var_8578: Tensor[(14, 7, 8), float64]) -> (Tensor[(14, 7, 8), float64],) {
  %411 = fn (%var_8565: Tensor[(14, 7, 8), float64], %var_8566: Tensor[(14, 7, 8), float64]) -> (Tensor[(14, 7, 8), float64],) {
    %406 = cast(%var_8566, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
    %407 = shape_of(%var_8565, dtype="int32") /* ty=Tensor[(3), int32] */;
    %408 = cast(%var_8565, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %410 = divide(%408, %409) /* ty=Tensor[(14, 7, 8), float64] */;
    (%410,)
  };
  %411(%var_8577, %var_8578) /* ty=(Tensor[(14, 7, 8), float64],) */
}

def @func_9006() -> Tensor[(7, 5, 6), bool] {
  @func_9004() /* ty=Tensor[(7, 5, 6), bool] */
}

def @func_8011(%var_7966: Tensor[(6, 4, 8), uint8], %var_7967: Tensor[(6, 4, 8), uint8], %var_7972: Tensor[(780), float64], %var_8007: Tensor[(6, 4, 8), int16]) -> (Tensor[(6, 4, 8), uint8], Tensor[(13, 6, 10), float64], Tensor[(780), float64], Tensor[(6, 4, 8), bool]) {
  %412 = cast(%var_7967, dtype="uint8") /* ty=Tensor[(6, 4, 8), uint8] */;
  %413 = shape_of(%var_7966, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_7966, dtype="uint8") /* ty=Tensor[(6, 4, 8), uint8] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %416 = cast(%var_7972, dtype="float64") /* ty=Tensor[(780), float64] */;
  %417 = reshape(%416, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float64] */;
  %418 = cast(%var_7966, dtype="int16") /* ty=Tensor[(6, 4, 8), int16] */;
  %419 = shape_of(%var_7967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_7967, dtype="int16") /* ty=Tensor[(6, 4, 8), int16] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %422 = minimum(%420, %421) /* ty=Tensor[(6, 4, 8), int16] */;
  %423 = cast(%var_8007, dtype="bool") /* ty=Tensor[(6, 4, 8), bool] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="bool") /* ty=Tensor[(6, 4, 8), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %427 = bitwise_xor(%414, %415) /* ty=Tensor[(6, 4, 8), uint8] */;
  %428 = @func_1898(%417) /* ty=Tensor[(13, 6, 10), float64] */;
  %429 = equal(%425, %426) /* ty=Tensor[(6, 4, 8), bool] */;
  (%427, %428, %var_7972, %429)
}

def @func_7717() -> (Tensor[(10, 13, 7), bool],) {
  %431 = fn () -> (Tensor[(10, 13, 7), bool],) {
    %430 = @func_4414() /* ty=Tensor[(10, 13, 7), bool] */;
    (%430,)
  };
  %431() /* ty=(Tensor[(10, 13, 7), bool],) */
}

def @func_5857() -> (Tensor[(7, 5, 6), float32], Tensor[(9, 1, 6), float64], Tensor[(16, 5, 6), float32]) {
  %432 = @func_3231() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %433 = @func_2006() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */;
  %434 = %432.0;
  %435 = @func_3609() /* ty=Tensor[(9, 1, 6), float64] */;
  %436 = %433.0;
  (%434, %435, %436)
}

def @func_9907() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %440 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
    %437 = @func_5278() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
    %438 = @func_9309() /* ty=Tensor[(10, 13, 7), float64] */;
    %439 = %437.1;
    (%438, %439)
  };
  %440() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */
}

def @func_845() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */
}

def @func_4742() -> Tensor[(7, 5, 6), float32] {
  %441 = fn () -> Tensor[(7, 5, 6), float32] {
    @func_588() /* ty=Tensor[(7, 5, 6), float32] */
  };
  %441() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_8134() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %455 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
    %442 = @func_1793() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %443 = @func_4560() /* ty=(Tensor[(7, 5, 6), int32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float32]) */;
    %444 = @func_6370() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %445 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %446 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %447 = @func_7953() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) */;
    %448 = %442.0;
    %449 = %443.1;
    %450 = %444.0;
    %451 = %445.2;
    %452 = %446.0;
    %453 = %447.0;
    %454 = @func_6772() /* ty=Tensor[(10, 13, 7), float64] */;
    (%448, %449, %450, %451, %452, %453, %454)
  };
  %455() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_2596() -> (Tensor[(7, 5, 6), bool], Tensor[(15, 10, 3), uint16]) {
  %460 = fn () -> (Tensor[(7, 5, 6), bool], Tensor[(15, 10, 3), uint16]) {
    %456 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %457 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %458 = %456.0;
    %459 = %457.0;
    (%458, %459)
  };
  %460() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(15, 10, 3), uint16]) */
}

def @func_9004() -> Tensor[(7, 5, 6), bool] {
  %461 = @func_8993() /* ty=(Tensor[(14, 4, 8), float64], Tensor[(7, 5, 6), bool]) */;
  %461.1
}

def @func_1577(%var_1576: Tensor[(294), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 3, 14), float64], Tensor[(294), float64], Tensor[(10, 13, 7), float64], Tensor[(3, 5, 3), float32]) {
  %480 = fn (%var_1533: Tensor[(294), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 3, 14), float64], Tensor[(294), float64], Tensor[(10, 13, 7), float64], Tensor[(3, 5, 3), float32]) {
    %462 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %463 = %462.0;
    %464 = cast(%463, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
    %465 = reshape(%464, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
    %466 = @func_1395(%465) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) */;
    %467 = cast(%var_1533, dtype="float64") /* ty=Tensor[(294), float64] */;
    %468 = cast(%var_1533, dtype="float64") /* ty=Tensor[(294), float64] */;
    %469 = reshape(%467, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
    %470 = reshape(%468, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
    %471 = @func_1473(%469, %470) /* ty=(Tensor[(7, 3, 14), float64],) */;
    %472 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %473 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 5, 3), float32] */;
    %474 = acos(%473) /* ty=Tensor[(3, 5, 3), float32] */;
    %475 = cast(%474, dtype="float32") /* ty=Tensor[(3, 5, 3), float32] */;
    %476 = %466.2;
    %477 = %471.0;
    %478 = %472.2;
    %479 = log(%475) /* ty=Tensor[(3, 5, 3), float32] */;
    (%463, %476, %477, %var_1533, %478, %479)
  };
  %480(%var_1576) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 3, 14), float64], Tensor[(294), float64], Tensor[(10, 13, 7), float64], Tensor[(3, 5, 3), float32]) */
}

def @func_6329() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) {
  @func_6327() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */
}

def @func_1884() -> (Tensor[(7, 5, 6), bool],) {
  %481 = @func_1334() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) */;
  %482 = %481.1;
  (%482,)
}

def @func_6908() -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) {
  %491 = fn () -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) {
    %483 = @func_4741() /* ty=Tensor[(7, 5, 6), float32] */;
    %484 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
    %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
    %486 = cast(%483, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
    %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %488 = @func_5182() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %489 = power(%486, %487) /* ty=Tensor[(7, 5, 6), float32] */;
    %490 = %488.0;
    (%489, %490)
  };
  %491() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) */
}

def @func_3197() -> Tensor[(10, 13, 7), float64] {
  @func_3195() /* ty=Tensor[(10, 13, 7), float64] */
}

def @func_8622() -> Tensor[(10, 13, 7), float64] {
  %493 = fn () -> Tensor[(10, 13, 7), float64] {
    %492 = @func_7872() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %492.0
  };
  %493() /* ty=Tensor[(10, 13, 7), float64] */
}

def @func_8995() -> (Tensor[(14, 4, 8), float64], Tensor[(7, 5, 6), bool]) {
  @func_8993() /* ty=(Tensor[(14, 4, 8), float64], Tensor[(7, 5, 6), bool]) */
}

def @func_9311() -> Tensor[(10, 13, 7), float64] {
  @func_9309() /* ty=Tensor[(10, 13, 7), float64] */
}

def @func_843() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  %494 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %495 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %497 = exp(%496) /* ty=Tensor[(7, 5, 6), float32] */;
  %498 = cast(%497, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %499 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %500 = %494.0;
  %501 = log2(%498) /* ty=Tensor[(7, 5, 6), float32] */;
  %502 = %499.0;
  (%500, %501, %502)
}

def @func_2423() -> (Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) {
  @func_2421() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */
}

def @func_2180() -> (Tensor[(7, 5, 6), bool],) {
  %503 = @func_1884() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %504 = %503.0;
  (%504,)
}

def @func_3338(%var_3336: Tensor[(112, 8), float64], %var_3337: Tensor[(4, 14, 16), uint16]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(7, 3, 14), float64], Tensor[(294), float64], Tensor[(64), float64], Tensor[(112, 8), float64], Tensor[(7, 5, 6), float32], Tensor[(15, 10, 3), bool], Tensor[(448), float32], Tensor[(4, 14, 16), uint8], Tensor[(4, 14, 16), float32], Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32]) {
  @func_3334(%var_3336, %var_3337) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(7, 3, 14), float64], Tensor[(294), float64], Tensor[(64), float64], Tensor[(112, 8), float64], Tensor[(7, 5, 6), float32], Tensor[(15, 10, 3), bool], Tensor[(448), float32], Tensor[(4, 14, 16), uint8], Tensor[(4, 14, 16), float32], Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32]) */
}

def @func_4281() -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) {
  @func_4279() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */
}

def @func_4802() -> (Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), bool]) {
  @func_4800() /* ty=(Tensor[(9, 1, 6), float64], Tensor[(7, 5, 6), bool]) */
}

def @func_2541(%var_2539: Tensor[(4, 1, 16), float64], %var_2540: Tensor[(4, 14, 16), float64]) -> (Tensor[(4, ?, 16), bool], Tensor[(4, 14, 16), uint16]) {
  %515 = fn (%var_2522: Tensor[(4, 1, 16), float64], %var_2530: Tensor[(4, 14, 16), float64]) -> (Tensor[(4, ?, 16), bool], Tensor[(4, 14, 16), uint16]) {
    %505 = cast(%var_2522, dtype="float64") /* ty=Tensor[(4, 1, 16), float64] */;
    %506 = log10(%505) /* ty=Tensor[(4, 1, 16), float64] */;
    %507 = cast(%var_2522, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
    %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %509 = cast(%506, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
    %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %511 = cast(%506, dtype="uint16") /* ty=Tensor[(4, 1, 16), uint16] */;
    %512 = cast(%var_2530, dtype="uint16") /* ty=Tensor[(4, 14, 16), uint16] */;
    %513 = less_equal(%509, %510) /* ty=Tensor[(4, ?, 16), bool] */;
    %514 = subtract(%511, %512) /* ty=Tensor[(4, 14, 16), uint16] */;
    (%513, %514)
  };
  %515(%var_2539, %var_2540) /* ty=(Tensor[(4, ?, 16), bool], Tensor[(4, 14, 16), uint16]) */
}

def @func_6181(%var_6157: Tensor[(64), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(4, ?, 16), bool], Tensor[(64), float64], Tensor[(896), float64]) {
  %516 = @func_5928() /* ty=(Tensor[(9, 1, 6), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32]) */;
  %517 = cast(%var_6157, dtype="float64") /* ty=Tensor[(64), float64] */;
  %518 = cast(meta[relay.Constant][16] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %519 = reshape(%517, newshape=[4, 1, 16]) /* ty=Tensor[(4, 1, 16), float64] */;
  %520 = reshape(%518, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float64] */;
  %521 = @func_2538(%519, %520) /* ty=(Tensor[(4, ?, 16), bool], Tensor[(4, 14, 16), uint16]) */;
  %522 = %516.3;
  %523 = %521.0;
  (%522, %523, %var_6157, meta[relay.Constant][16] /* ty=Tensor[(896), float64] */)
}

def @func_8942(%var_8941: Tensor[(9, 3, 14), int8]) -> Tensor[(9, 3, 14), int8] {
  %528 = fn (%var_8924: Tensor[(9, 3, 14), int8]) -> Tensor[(9, 3, 14), int8] {
    %524 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 3, 14), int8] */, dtype="int8") /* ty=Tensor[(9, 3, 14), int8] */;
    %525 = shape_of(%var_8924, dtype="int32") /* ty=Tensor[(3), int32] */;
    %526 = cast(%var_8924, dtype="int8") /* ty=Tensor[(9, 3, 14), int8] */;
    %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    add(%526, %527) /* ty=Tensor[(9, 3, 14), int8] */
  };
  %528(%var_8941) /* ty=Tensor[(9, 3, 14), int8] */
}

def @func_4384() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %533 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
    %529 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %530 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %531 = %529.0;
    %532 = %530.0;
    (%531, %532)
  };
  %533() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_4180() -> (Tensor[(?, ?, 5), uint32],) {
  %534 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 5), float32] */;
  %535 = exp(%534) /* ty=Tensor[(1, 1, 5), float32] */;
  %536 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 1, 5), float32] */, dtype="uint32") /* ty=Tensor[(1, 1, 5), uint32] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="uint32") /* ty=Tensor[(1, 1, 5), uint32] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %540 = bitwise_xor(%538, %539) /* ty=Tensor[(?, ?, 5), uint32] */;
  (%540,)
}

def @func_5086() -> (Tensor[(10, 13, 7), float64],) {
  %541 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %542 = %541.0;
  (%542,)
}

def @func_8822(%var_8782: Tensor[(1, 8, 7), float32], %var_8790: Tensor[(780), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(780), float64], Tensor[(780), float64], Tensor[(1, 8, 7), float32], Tensor[(15, 10, 3), uint16]) {
  %543 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %544 = cast(%var_8790, dtype="float64") /* ty=Tensor[(780), float64] */;
  %545 = reshape(%544, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %546 = @func_8519(%545) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(15, 10, 3), uint16], Tensor[(8, 60), float32], Tensor[(7, 5, 6), float32], Tensor[(13, 6, 10), float64], Tensor[(780), float64]) */;
  %547 = cast(%var_8782, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %548 = tan(%547) /* ty=Tensor[(1, 8, 7), float32] */;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %550 = @func_3945() /* ty=(Tensor[(15, 10, 3), uint16],) */;
  %551 = %543.0;
  %552 = %546.7;
  %553 = erf(%549) /* ty=Tensor[(1, 8, 7), float32] */;
  %554 = %550.0;
  (%551, %552, %var_8790, %553, %554)
}

def @func_5029() -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool]) {
  %555 = @func_3231() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %556 = %555.0;
  %557 = @func_2159() /* ty=Tensor[(10, 13, 7), bool] */;
  (%556, %557)
}

def @func_3946() -> (Tensor[(15, 10, 3), uint16],) {
  %560 = fn () -> (Tensor[(15, 10, 3), uint16],) {
    %558 = @func_2201() /* ty=(Tensor[(15, 10, 3), uint16],) */;
    %559 = %558.0;
    (%559,)
  };
  %560() /* ty=(Tensor[(15, 10, 3), uint16],) */
}

def @func_5676() -> (Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64]) {
  %561 = @func_5086() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %562 = @func_3547() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %563 = %561.0;
  %564 = %562.1;
  (%563, %564)
}

def @func_8993() -> (Tensor[(14, 4, 8), float64], Tensor[(7, 5, 6), bool]) {
  %565 = @func_7436() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) */;
  %566 = @func_5182() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %567 = %565.1;
  %568 = %566.0;
  (%567, %568)
}

def @func_4007(%var_4005: Tensor[(10, 13, 7), float32]) -> (Tensor[(10, 13, 7), float32],) {
  @func_4004(%var_4005) /* ty=(Tensor[(10, 13, 7), float32],) */
}

def @func_7017(%var_7015: Tensor[(7, 130), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool], Tensor[(7, 130), float64]) {
  @func_7014(%var_7015) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool], Tensor[(7, 130), float64]) */
}

def @func_8686(%var_8680: Tensor[(8, 13, 15), float64]) -> (Tensor[(8, 13, 15), float64],) {
  %569 = cast(%var_8680, dtype="float64") /* ty=Tensor[(8, 13, 15), float64] */;
  %570 = atanh(%569) /* ty=Tensor[(8, 13, 15), float64] */;
  (%570,)
}

def @func_3896() -> (Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), float32]) {
  @func_3894() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), float32]) */
}

def @func_7014(%var_6997: Tensor[(7, 130), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool], Tensor[(7, 130), float64]) {
  %571 = @func_3894() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), float32]) */;
  %572 = cast(%var_6997, dtype="float64") /* ty=Tensor[(7, 130), float64] */;
  %573 = reshape(%572, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %574 = @func_2685(%573) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %575 = @func_5928() /* ty=(Tensor[(9, 1, 6), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32]) */;
  %576 = @func_5182() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %577 = cast(%var_6997, dtype="float64") /* ty=Tensor[(7, 130), float64] */;
  %578 = %571.1;
  %579 = %574.1;
  %580 = %575.2;
  %581 = %576.0;
  %582 = acos(%577) /* ty=Tensor[(7, 130), float64] */;
  (%578, %579, %580, %581, %582)
}

def @func_2863() -> (Tensor[(7, 5, 6), bool],) {
  %585 = fn () -> (Tensor[(7, 5, 6), bool],) {
    %583 = @func_1884() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %584 = %583.0;
    (%584,)
  };
  %585() /* ty=(Tensor[(7, 5, 6), bool],) */
}

def @func_318() -> (Tensor[(10, 13, 7), float64],) {
  %586 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %587 = log(%586) /* ty=Tensor[(10, 13, 7), float64] */;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %589 = rsqrt(%588) /* ty=Tensor[(10, 13, 7), float64] */;
  (%589,)
}

def @func_3195() -> Tensor[(10, 13, 7), float64] {
  %590 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %590.1
}

def @func_1113(%var_1111: Tensor[(1, 8, 4), float64], %var_1112: Tensor[(15, 8, 4), float64]) -> (Tensor[(15, 8, 4), float64],) {
  @func_1109(%var_1111, %var_1112) /* ty=(Tensor[(15, 8, 4), float64],) */
}

def @func_2907() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) {
  @func_2905() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */
}

def @func_8921() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool]) {
  %595 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool]) {
    %591 = @func_5581() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */;
    %592 = @func_7716() /* ty=(Tensor[(10, 13, 7), bool],) */;
    %593 = %591.0;
    %594 = %592.0;
    (%593, %594)
  };
  %595() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool]) */
}

def @func_5452() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %596 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %599 = cos(%598) /* ty=Tensor[(10, 13, 7), float32] */;
  %600 = cast(%599, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %601 = @func_5204() /* ty=Tensor[(7, 5, 6), bool] */;
  %602 = sigmoid(%600) /* ty=Tensor[(10, 13, 7), float64] */;
  %603 = @func_5204() /* ty=Tensor[(7, 5, 6), bool] */;
  (%601, %602, %603)
}

def @func_7775() -> (Tensor[(7, 5, 6), float32],) {
  %605 = fn () -> (Tensor[(7, 5, 6), float32],) {
    %604 = @func_5874() /* ty=Tensor[(7, 5, 6), float32] */;
    (%604,)
  };
  %605() /* ty=(Tensor[(7, 5, 6), float32],) */
}

def @func_9040() -> Tensor[(7, 5, 6), bool] {
  %607 = fn () -> Tensor[(7, 5, 6), bool] {
    %606 = @func_2817() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %606.0
  };
  %607() /* ty=Tensor[(7, 5, 6), bool] */
}

def @func_9665() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  @func_9663() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */
}

def @func_8449(%var_8445: Tensor[(8, 3, 2), float32], %var_8446: Tensor[(8, 3, 2), float32], %var_8447: Tensor[(7, 130), float64], %var_8448: Tensor[(910), float64]) -> (Tensor[(7, 130), float64], Tensor[(910), float32], Tensor[(7, 5, 6), bool], Tensor[(8, 3, 2), int8], Tensor[(8, 3, 2), bool], Tensor[(8, 3, 2), float32], Tensor[(7, 5, 6), float32], Tensor[(8, 3, 2), float64]) {
  @func_8443(%var_8445, %var_8446, %var_8447, %var_8448) /* ty=(Tensor[(7, 130), float64], Tensor[(910), float32], Tensor[(7, 5, 6), bool], Tensor[(8, 3, 2), int8], Tensor[(8, 3, 2), bool], Tensor[(8, 3, 2), float32], Tensor[(7, 5, 6), float32], Tensor[(8, 3, 2), float64]) */
}

def @func_1612() -> Tensor[(10, 13, 7), bool] {
  %614 = fn () -> Tensor[(10, 13, 7), bool] {
    %608 = @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %609 = %608.1;
    %610 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 13, 7), float64] */, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
    %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
    %612 = cast(%609, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%612, %613) /* ty=Tensor[(10, 13, 7), bool] */
  };
  %614() /* ty=Tensor[(10, 13, 7), bool] */
}

def @main(%var_9908: Tensor[(14, 6, 11), int16], %var_9909: Tensor[(14, 6, 11), int16]) -> (Tensor[(14, 6, 11), bool], Tensor[(14, 6, 11), bool]) {
  %615 = cast(%var_9909, dtype="bool") /* ty=Tensor[(14, 6, 11), bool] */;
  %616 = shape_of(%var_9908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_9908, dtype="bool") /* ty=Tensor[(14, 6, 11), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = cast(%var_9908, dtype="bool") /* ty=Tensor[(14, 6, 11), bool] */;
  %620 = shape_of(%var_9909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%var_9909, dtype="bool") /* ty=Tensor[(14, 6, 11), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %623 = not_equal(%617, %618) /* ty=Tensor[(14, 6, 11), bool] */;
  %624 = less(%621, %622) /* ty=Tensor[(14, 6, 11), bool] */;
  (%623, %624)
}

def @func_5644(%var_5642: Tensor[(11, 8, 9), float64], %var_5643: Tensor[(11, 8, 9), float64]) -> (Tensor[(11, 8, 9), bool],) {
  %630 = fn (%var_5629: Tensor[(11, 8, 9), float64], %var_5630: Tensor[(11, 8, 9), float64]) -> (Tensor[(11, 8, 9), bool],) {
    %625 = cast(%var_5630, dtype="bool") /* ty=Tensor[(11, 8, 9), bool] */;
    %626 = shape_of(%var_5629, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%var_5629, dtype="bool") /* ty=Tensor[(11, 8, 9), bool] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %629 = greater(%627, %628) /* ty=Tensor[(11, 8, 9), bool] */;
    (%629,)
  };
  %630(%var_5642, %var_5643) /* ty=(Tensor[(11, 8, 9), bool],) */
}

def @func_6829(%var_6826: Tensor[(10, 3, 6), float32]) -> (Tensor[(10, 3, 6), float32],) {
  %631 = cast(%var_6826, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %632 = sigmoid(%631) /* ty=Tensor[(10, 3, 6), float32] */;
  (%632,)
}

def @func_7477() -> Tensor[(10, 13, 7), bool] {
  @func_7475() /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_792() -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  %642 = fn () -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
    %633 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %634 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %635 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %636 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
    %637 = %633.2;
    %638 = %634.0;
    %639 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
    %640 = %635.0;
    %641 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
    (%636, %637, %638, %639, %640, %641)
  };
  %642() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */
}

def @func_5088() -> (Tensor[(10, 13, 7), float64],) {
  @func_5086() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_9791() -> (Tensor[(7, 5, 6), float32],) {
  %643 = @func_7774() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %644 = %643.0;
  (%644,)
}

def @func_5941() -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) {
  %645 = @func_3715() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %646 = @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %647 = %645.0;
  %648 = %646.0;
  (%647, %648)
}

def @func_1473(%var_1466: Tensor[(7, 3, 14), float64], %var_1467: Tensor[(7, 3, 14), float64]) -> (Tensor[(7, 3, 14), float64],) {
  %649 = cast(%var_1467, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %650 = shape_of(%var_1466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%var_1466, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %653 = divide(%651, %652) /* ty=Tensor[(7, 3, 14), float64] */;
  (%653,)
}

def @func_7687() -> (Tensor[(16, 5, 6), float32], Tensor[(?, ?, 5), uint32]) {
  %654 = @func_2006() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */;
  %655 = @func_4180() /* ty=(Tensor[(?, ?, 5), uint32],) */;
  %656 = %654.0;
  %657 = %655.0;
  (%656, %657)
}

def @func_640() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_3548() -> (Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  %674 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
    %658 = @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %659 = cast(meta[relay.Constant][21] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %660 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 60), float64] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
    %661 = reshape(%659, newshape=[1, 8, 4]) /* ty=Tensor[(1, 8, 4), float64] */;
    %662 = reshape(%660, newshape=[15, 8, 4]) /* ty=Tensor[(15, 8, 4), float64] */;
    %663 = @func_1109(%661, %662) /* ty=(Tensor[(15, 8, 4), float64],) */;
    %664 = @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %665 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %666 = @func_3054() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
    %667 = @func_3231() /* ty=(Tensor[(7, 5, 6), float32],) */;
    %668 = %658.0;
    %669 = %663.0;
    %670 = %664.0;
    %671 = %665.2;
    %672 = %666.1;
    %673 = %667.0;
    (%668, %669, meta[relay.Constant][21] /* ty=Tensor[(32), float64] */, meta[relay.Constant][22] /* ty=Tensor[(8, 60), float64] */, %670, %671, %672, %673)
  };
  %674() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */
}

def @func_3790() -> (Tensor[(10, 13, 7), float64],) {
  @func_3788() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_2499(%var_2498: Tensor[(8, 56), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(15, 10, 3), bool], Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float32], Tensor[(8, 56), float32]) {
  %694 = fn (%var_2494: Tensor[(8, 56), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(15, 10, 3), bool], Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float32], Tensor[(8, 56), float32]) {
    %675 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %676 = @func_1712() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %677 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %678 = %677.0;
    %679 = cast(%678, dtype="float64") /* ty=Tensor[(15, 10, 3), float64] */;
    %680 = sqrt(%679) /* ty=Tensor[(15, 10, 3), float64] */;
    %681 = cast(%678, dtype="bool") /* ty=Tensor[(15, 10, 3), bool] */;
    %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
    %683 = cast(%680, dtype="bool") /* ty=Tensor[(15, 10, 3), bool] */;
    %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %685 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %686 = cast(%var_2494, dtype="float32") /* ty=Tensor[(8, 56), float32] */;
    %687 = reshape(%686, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), float32] */;
    %688 = @func_544(%687) /* ty=(Tensor[(14, 4, 8), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %689 = %675.0;
    %690 = %676.0;
    %691 = less(%683, %684) /* ty=Tensor[(15, 10, 3), bool] */;
    %692 = %685.2;
    %693 = %688.0;
    (%689, %690, %691, %692, %693, %var_2494)
  };
  %694(%var_2498) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(15, 10, 3), bool], Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float32], Tensor[(8, 56), float32]) */
}

def @func_1713() -> (Tensor[(10, 13, 7), float64],) {
  %697 = fn () -> (Tensor[(10, 13, 7), float64],) {
    %695 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
    %696 = %695.2;
    (%696,)
  };
  %697() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_8689(%var_8687: Tensor[(8, 13, 15), float64]) -> (Tensor[(8, 13, 15), float64],) {
  @func_8686(%var_8687) /* ty=(Tensor[(8, 13, 15), float64],) */
}

def @func_5808(%var_5807: Tensor[(10, 13, 7), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), int8]) {
  %706 = fn (%var_5795: Tensor[(10, 13, 7), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), int8]) {
    %698 = @func_5533() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %699 = %698.0;
    %700 = cast(%var_5795, dtype="int8") /* ty=Tensor[(10, 13, 7), int8] */;
    %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %702 = cast(%699, dtype="int8") /* ty=Tensor[(10, 13, 7), int8] */;
    %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %704 = @func_3593() /* ty=Tensor[(10, 13, 7), float64] */;
    %705 = subtract(%702, %703) /* ty=Tensor[(10, 13, 7), int8] */;
    (%704, %705)
  };
  %706(%var_5807) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), int8]) */
}

def @func_9793() -> (Tensor[(7, 5, 6), float32],) {
  @func_9791() /* ty=(Tensor[(7, 5, 6), float32],) */
}

def @func_7126() -> (Tensor[(10, 13, 7), bool],) {
  %707 = @func_6620() /* ty=Tensor[(10, 13, 7), bool] */;
  (%707,)
}

def @func_2818() -> (Tensor[(7, 5, 6), bool],) {
  %709 = fn () -> (Tensor[(7, 5, 6), bool],) {
    %708 = @func_2290() /* ty=Tensor[(7, 5, 6), bool] */;
    (%708,)
  };
  %709() /* ty=(Tensor[(7, 5, 6), bool],) */
}

def @func_6754() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  %710 = @func_6067() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), uint16], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */;
  %711 = @func_2421() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */;
  %712 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %713 = %710.5;
  %714 = %711.1;
  %715 = %712.0;
  (%713, %714, %715)
}

def @func_3760(%var_3759: Tensor[(448), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(14, 4, 8), float64]) {
  %724 = fn (%var_3749: Tensor[(448), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(14, 4, 8), float64]) {
    %716 = @func_2394() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %717 = cast(%var_3749, dtype="float32") /* ty=Tensor[(448), float32] */;
    %718 = reshape(%717, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), float32] */;
    %719 = @func_544(%718) /* ty=(Tensor[(14, 4, 8), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %720 = %719.0;
    %721 = cast(%720, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
    %722 = %716.0;
    %723 = sinh(%721) /* ty=Tensor[(14, 4, 8), float64] */;
    (%722, %var_3749, %723)
  };
  %724(%var_3759) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(14, 4, 8), float64]) */
}

def @func_9175() -> Tensor[(10, 13, 7), bool] {
  @func_9173() /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_9173() -> Tensor[(10, 13, 7), bool] {
  @func_6620() /* ty=Tensor[(10, 13, 7), bool] */
}

def @func_5737(%var_5735: Tensor[(448), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(448), float32]) {
  @func_5734(%var_5735) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(448), float32]) */
}

def @func_2905() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) {
  %725 = @func_2862() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %726 = %725.0;
  %727 = @func_1611() /* ty=Tensor[(10, 13, 7), bool] */;
  (%726, %727)
}

def @func_7300() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  %728 = @func_5086() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %729 = @func_7184() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) */;
  %730 = %728.0;
  %731 = %729.1;
  (%730, %731)
}

def @func_9416(%var_9397: Tensor[(3, 10, 6), float64]) -> (Tensor[(3, 10, 6), float64], Tensor[(3, 10, 6), float64]) {
  %732 = cast(%var_9397, dtype="float64") /* ty=Tensor[(3, 10, 6), float64] */;
  %733 = sqrt(%732) /* ty=Tensor[(3, 10, 6), float64] */;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(3, 10, 6), float64] */;
  %735 = cast(%var_9397, dtype="float64") /* ty=Tensor[(3, 10, 6), float64] */;
  %736 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%733, dtype="float64") /* ty=Tensor[(3, 10, 6), float64] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %739 = tan(%734) /* ty=Tensor[(3, 10, 6), float64] */;
  %740 = subtract(%737, %738) /* ty=Tensor[(3, 10, 6), float64] */;
  (%739, %740)
}

def @func_1886() -> (Tensor[(7, 5, 6), bool],) {
  @func_1884() /* ty=(Tensor[(7, 5, 6), bool],) */
}

def @func_5928() -> (Tensor[(9, 1, 6), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32]) {
  %741 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %742 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %743 = @func_1712() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %746 = @func_3609() /* ty=Tensor[(9, 1, 6), float64] */;
  %747 = %741.0;
  %748 = @func_1664() /* ty=Tensor[(10, 13, 7), float32] */;
  %749 = %742.2;
  %750 = asinh(%745) /* ty=Tensor[(10, 13, 7), float32] */;
  (%746, %747, %748, %749, %750)
}

def @func_5876() -> Tensor[(7, 5, 6), float32] {
  @func_5874() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_1395(%var_1365: Tensor[(10, 13, 7), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
  %751 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %752 = %751.1;
  %753 = cast(%var_1365, dtype="int64") /* ty=Tensor[(10, 13, 7), int64] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="int64") /* ty=Tensor[(10, 13, 7), int64] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %757 = left_shift(%755, %756) /* ty=Tensor[(10, 13, 7), int64] */;
  %758 = cast(%757, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %759 = cast(%var_1365, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %760 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %761 = cosh(%758) /* ty=Tensor[(10, 13, 7), float64] */;
  %762 = acos(%759) /* ty=Tensor[(10, 13, 7), float32] */;
  %763 = %760.0;
  (%761, %762, %763)
}

def @func_4560() -> (Tensor[(7, 5, 6), int32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float32]) {
  %764 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %765 = %764.5;
  %766 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 5, 6), float32] */, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %770 = @func_2421() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */;
  %771 = %770.0;
  %772 = cast(%771, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %773 = reshape(%772, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
  %774 = @func_2100(%773) /* ty=(Tensor[(10, 13, 7), uint8], Tensor[(10, 13, 7), float64]) */;
  %775 = @func_2421() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */;
  %776 = subtract(%768, %769) /* ty=Tensor[(7, 5, 6), int32] */;
  %777 = %774.1;
  %778 = %775.0;
  %779 = @func_2708() /* ty=Tensor[(10, 13, 7), float32] */;
  (%776, %771, %777, %778, %779)
}

def @func_7186() -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) {
  @func_7184() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), bool]) */
}

def @func_7798() -> Tensor[(7, 5, 6), float64] {
  %783 = fn () -> Tensor[(7, 5, 6), float64] {
    %780 = @func_791() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
    %781 = %780.5;
    %782 = cast(%781, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
    atanh(%782) /* ty=Tensor[(7, 5, 6), float64] */
  };
  %783() /* ty=Tensor[(7, 5, 6), float64] */
}

def @func_6756() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  @func_6754() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */
}

def @func_7955() -> (Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) {
  @func_7953() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) */
}

def @func_7080() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  %784 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %785 = %784.0;
  %786 = @func_1694() /* ty=Tensor[(7, 5, 6), float32] */;
  (%785, %786)
}

def @func_3610() -> Tensor[(9, 1, 6), float64] {
  %788 = fn () -> Tensor[(9, 1, 6), float64] {
    %787 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 6), float64] */;
    tan(%787) /* ty=Tensor[(9, 1, 6), float64] */
  };
  %788() /* ty=Tensor[(9, 1, 6), float64] */
}

def @func_2830() -> (Tensor[(10, 13, 7), bool],) {
  %789 = @func_2006() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */;
  %790 = %789.1;
  (%790,)
}

def @func_7029(%var_7021: Tensor[(3, 7, 15), uint8], %var_7022: Tensor[(3, 7, 15), uint8]) -> Tensor[(3, 7, 15), uint8] {
  %791 = cast(%var_7022, dtype="uint8") /* ty=Tensor[(3, 7, 15), uint8] */;
  %792 = shape_of(%var_7021, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%var_7021, dtype="uint8") /* ty=Tensor[(3, 7, 15), uint8] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%793, %794) /* ty=Tensor[(3, 7, 15), uint8] */
}

def @func_8826(%var_8824: Tensor[(1, 8, 7), float32], %var_8825: Tensor[(780), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(780), float64], Tensor[(780), float64], Tensor[(1, 8, 7), float32], Tensor[(15, 10, 3), uint16]) {
  @func_8822(%var_8824, %var_8825) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(780), float64], Tensor[(780), float64], Tensor[(1, 8, 7), float32], Tensor[(15, 10, 3), uint16]) */
}

def @func_5971() -> (Tensor[(15, 10, 3), uint16],) {
  @func_5969() /* ty=(Tensor[(15, 10, 3), uint16],) */
}

def @func_2685(%var_2654: Tensor[(910), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) {
  %795 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %796 = cast(%var_2654, dtype="float64") /* ty=Tensor[(910), float64] */;
  %797 = reshape(%796, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
  %798 = @func_1054(%797) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %799 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %800 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %801 = %795.0;
  %802 = %798.3;
  %803 = @func_2290() /* ty=Tensor[(7, 5, 6), bool] */;
  %804 = %799.0;
  (%800, %801, %802, %var_2654, %803, %804)
}

def @func_4004(%var_3980: Tensor[(10, 13, 7), float32]) -> (Tensor[(10, 13, 7), float32],) {
  %805 = @func_2159() /* ty=Tensor[(10, 13, 7), bool] */;
  %806 = cast(%805, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %807 = sqrt(%806) /* ty=Tensor[(10, 13, 7), float32] */;
  %808 = cast(%var_3980, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%807, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %812 = floor_mod(%810, %811) /* ty=Tensor[(10, 13, 7), float32] */;
  (%812,)
}

def @func_5454() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  @func_5452() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */
}

def @func_9663() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) {
  %813 = @func_3054() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %814 = %813.1;
  %815 = cast(%814, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %816 = @func_1817() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %817 = @func_7080() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
  %818 = atan(%815) /* ty=Tensor[(10, 13, 7), float64] */;
  %819 = %816.0;
  %820 = %817.1;
  (%818, %819, %820)
}

def @func_7624() -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool], Tensor[(910), float64]) {
  %829 = fn () -> (Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool], Tensor[(910), float64]) {
    %821 = @func_2862() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %822 = cast(meta[relay.Constant][25] /* ty=Tensor[(910), bool] */, dtype="bool") /* ty=Tensor[(910), bool] */;
    %823 = reshape(%822, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), bool] */;
    %824 = @func_7397(%823) /* ty=(Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), float32], Tensor[(9, 14, 3), float64]) */;
    %825 = cast(meta[relay.Constant][25] /* ty=Tensor[(910), bool] */, dtype="float64") /* ty=Tensor[(910), float64] */;
    %826 = %821.0;
    %827 = %824.0;
    %828 = asinh(%825) /* ty=Tensor[(910), float64] */;
    (%826, %827, %828)
  };
  %829() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool], Tensor[(910), float64]) */
}

def @func_7475() -> Tensor[(10, 13, 7), bool] {
  %830 = @func_2830() /* ty=(Tensor[(10, 13, 7), bool],) */;
  %830.0
}

def @func_8017(%var_8013: Tensor[(6, 4, 8), uint8], %var_8014: Tensor[(6, 4, 8), uint8], %var_8015: Tensor[(780), float64], %var_8016: Tensor[(6, 4, 8), int16]) -> (Tensor[(6, 4, 8), uint8], Tensor[(13, 6, 10), float64], Tensor[(780), float64], Tensor[(6, 4, 8), bool]) {
  @func_8011(%var_8013, %var_8014, %var_8015, %var_8016) /* ty=(Tensor[(6, 4, 8), uint8], Tensor[(13, 6, 10), float64], Tensor[(780), float64], Tensor[(6, 4, 8), bool]) */
}

def @func_7214() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %837 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
    %831 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %832 = %831.0;
    %833 = cast(%832, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
    %834 = reshape(%833, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float32] */;
    %835 = @func_5806(%834) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), int8]) */;
    %836 = %835.0;
    (%832, %836)
  };
  %837() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_8287() -> (Tensor[(7, 5, 6), float32],) {
  %839 = fn () -> (Tensor[(7, 5, 6), float32],) {
    %838 = @func_8047() /* ty=Tensor[(7, 5, 6), float32] */;
    (%838,)
  };
  %839() /* ty=(Tensor[(7, 5, 6), float32],) */
}

def @func_5280() -> (Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) {
  @func_5278() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), bool]) */
}

def @func_9150() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
  %845 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
    %840 = @func_3788() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %841 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %842 = %840.0;
    %843 = @func_4340() /* ty=Tensor[(10, 13, 7), float32] */;
    %844 = %841.2;
    (%842, %843, %844)
  };
  %845() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) */
}

def @func_9594() -> (Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), float32], Tensor[(448), float32]) {
  %846 = @func_6354() /* ty=(Tensor[(7, 5, 6), float32],) */;
  %847 = @func_7436() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) */;
  %848 = @func_9173() /* ty=Tensor[(10, 13, 7), bool] */;
  %849 = %846.0;
  %850 = %847.2;
  (%848, %849, %850)
}

def @func_5734(%var_5726: Tensor[(448), float32]) -> (Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(448), float32]) {
  %851 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %852 = cast(%var_5726, dtype="float32") /* ty=Tensor[(448), float32] */;
  %853 = reshape(%852, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %854 = @func_3758(%853) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(14, 4, 8), float64]) */;
  %855 = %851.0;
  %856 = %854.1;
  (%855, %856, %var_5726)
}

def @func_5361() -> (Tensor[(7, 5, 6), float32],) {
  @func_5359() /* ty=(Tensor[(7, 5, 6), float32],) */
}

def @func_415() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %863 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
    %857 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %858 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %859 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %860 = %857.0;
    %861 = %858.0;
    %862 = %859.0;
    (%860, %861, %862)
  };
  %863() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_6774() -> Tensor[(10, 13, 7), float64] {
  @func_6772() /* ty=Tensor[(10, 13, 7), float64] */
}

def @func_6772() -> Tensor[(10, 13, 7), float64] {
  %864 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %864.0
}

def @func_9690() -> (Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
  %865 = @func_6067() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), uint16], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */;
  %866 = @func_8993() /* ty=(Tensor[(14, 4, 8), float64], Tensor[(7, 5, 6), bool]) */;
  %867 = %865.4;
  %868 = %866.1;
  (%867, %868)
}

def @func_546(%var_545: Tensor[(14, 4, 8), float32]) -> (Tensor[(14, 4, 8), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %877 = fn (%var_510: Tensor[(14, 4, 8), float32]) -> (Tensor[(14, 4, 8), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
    %869 = cast(%var_510, dtype="float32") /* ty=Tensor[(14, 4, 8), float32] */;
    %870 = @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %871 = @func_454() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %872 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %873 = asin(%869) /* ty=Tensor[(14, 4, 8), float32] */;
    %874 = %870.1;
    %875 = %871.1;
    %876 = %872.0;
    (%873, %874, %875, %876)
  };
  %877(%var_545) /* ty=(Tensor[(14, 4, 8), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_698() -> (Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %878 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 3), float32] */, dtype="float32") /* ty=Tensor[(15, 10, 3), float32] */;
  %879 = sigmoid(%878) /* ty=Tensor[(15, 10, 3), float32] */;
  %880 = cast(%879, dtype="uint16") /* ty=Tensor[(15, 10, 3), uint16] */;
  %881 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 3), float32] */, dtype="uint16") /* ty=Tensor[(15, 10, 3), uint16] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %884 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %885 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %886 = minimum(%882, %883) /* ty=Tensor[(15, 10, 3), uint16] */;
  %887 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %888 = %884.0;
  %889 = %885.0;
  (%886, %887, %888, %889)
}

def @func_6465() -> (Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) {
  %897 = fn () -> (Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) {
    %890 = @func_4323() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %891 = @func_2159() /* ty=Tensor[(10, 13, 7), bool] */;
    %892 = cast(%891, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
    %893 = reshape(%892, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float32] */;
    %894 = @func_5806(%893) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), int8]) */;
    %895 = %890.0;
    %896 = %894.0;
    (%891, %895, %896)
  };
  %897() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */
}

def @func_4904() -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %904 = fn () -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
    %898 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %899 = @func_4243() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %900 = @func_1793() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %901 = %898.0;
    %902 = %899.0;
    %903 = %900.0;
    (%901, %902, %903)
  };
  %904() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */
}

def @func_7907() -> Tensor[(7, 5, 6), float64] {
  %908 = fn () -> Tensor[(7, 5, 6), float64] {
    %905 = @func_7436() /* ty=(Tensor[(7, 5, 6), bool], Tensor[(14, 4, 8), float64], Tensor[(448), float32]) */;
    %906 = %905.0;
    %907 = cast(%906, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
    acosh(%907) /* ty=Tensor[(7, 5, 6), float64] */
  };
  %908() /* ty=Tensor[(7, 5, 6), float64] */
}

def @func_8521(%var_8520: Tensor[(780), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(15, 10, 3), uint16], Tensor[(8, 60), float32], Tensor[(7, 5, 6), float32], Tensor[(13, 6, 10), float64], Tensor[(780), float64]) {
  %927 = fn (%var_8516: Tensor[(780), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(15, 10, 3), uint16], Tensor[(8, 60), float32], Tensor[(7, 5, 6), float32], Tensor[(13, 6, 10), float64], Tensor[(780), float64]) {
    %909 = @func_7836() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
    %910 = @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %911 = @func_3231() /* ty=(Tensor[(7, 5, 6), float32],) */;
    %912 = @func_2201() /* ty=(Tensor[(15, 10, 3), uint16],) */;
    %913 = @func_3547() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(15, 8, 4), float64], Tensor[(32), float64], Tensor[(8, 60), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32]) */;
    %914 = %913.3;
    %915 = cast(%914, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
    %916 = @func_7283() /* ty=(Tensor[(7, 5, 6), float32],) */;
    %917 = cast(%var_8516, dtype="float64") /* ty=Tensor[(780), float64] */;
    %918 = reshape(%917, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), float64] */;
    %919 = @func_1850(%918) /* ty=(Tensor[(13, 6, 10), float64],) */;
    %920 = %909.0;
    %921 = %910.1;
    %922 = %911.0;
    %923 = %912.0;
    %924 = rsqrt(%915) /* ty=Tensor[(8, 60), float32] */;
    %925 = %916.0;
    %926 = %919.0;
    (%920, %921, %922, %923, %924, %925, %926, %var_8516)
  };
  %927(%var_8520) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(15, 10, 3), uint16], Tensor[(8, 60), float32], Tensor[(7, 5, 6), float32], Tensor[(13, 6, 10), float64], Tensor[(780), float64]) */
}

def @func_5031() -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool]) {
  @func_5029() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool]) */
}

def @func_2059() -> (Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) {
  %935 = fn () -> (Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) {
    %928 = @func_1611() /* ty=Tensor[(10, 13, 7), bool] */;
    %929 = cast(%928, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
    %930 = reshape(%929, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), float64] */;
    %931 = @func_1054(%930) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %932 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %933 = %931.1;
    %934 = %932.0;
    (%928, %933, %934)
  };
  %935() /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64]) */
}

def @func_2743() -> (Tensor[(7, 5, 6), bool],) {
  @func_2741() /* ty=(Tensor[(7, 5, 6), bool],) */
}

def @func_4164() -> (Tensor[(7, 5, 6), bool],) {
  %945 = fn () -> (Tensor[(7, 5, 6), bool],) {
    %936 = @func_2180() /* ty=(Tensor[(7, 5, 6), bool],) */;
    %937 = %936.0;
    %938 = @func_1334() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) */;
    %939 = %938.0;
    %940 = cast(%939, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
    %941 = shape_of(%937, dtype="int32") /* ty=Tensor[(3), int32] */;
    %942 = cast(%937, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
    %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %944 = less_equal(%942, %943) /* ty=Tensor[(7, 5, 6), bool] */;
    (%944,)
  };
  %945() /* ty=(Tensor[(7, 5, 6), bool],) */
}

def @func_5183() -> (Tensor[(7, 5, 6), bool],) {
  %947 = fn () -> (Tensor[(7, 5, 6), bool],) {
    %946 = @func_5133() /* ty=Tensor[(7, 5, 6), bool] */;
    (%946,)
  };
  %947() /* ty=(Tensor[(7, 5, 6), bool],) */
}

def @func_6273() -> (Tensor[(10, 13, 7), bool],) {
  @func_6271() /* ty=(Tensor[(10, 13, 7), bool],) */
}

def @func_7283() -> (Tensor[(7, 5, 6), float32],) {
  %948 = @func_4279() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), bool]) */;
  %949 = %948.0;
  (%949,)
}

def @func_8443(%var_8318: Tensor[(8, 3, 2), float32], %var_8319: Tensor[(8, 3, 2), float32], %var_8328: Tensor[(7, 130), float64], %var_8361: Tensor[(910), float64]) -> (Tensor[(7, 130), float64], Tensor[(910), float32], Tensor[(7, 5, 6), bool], Tensor[(8, 3, 2), int8], Tensor[(8, 3, 2), bool], Tensor[(8, 3, 2), float32], Tensor[(7, 5, 6), float32], Tensor[(8, 3, 2), float64]) {
  %950 = cast(%var_8328, dtype="float64") /* ty=Tensor[(7, 130), float64] */;
  %951 = reshape(%950, newshape=[910]) /* ty=Tensor[(910), float64] */;
  %952 = @func_2685(%951) /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64], Tensor[(910), float64], Tensor[(7, 5, 6), bool], Tensor[(10, 13, 7), float64]) */;
  %953 = %952.3;
  %954 = cast(%var_8361, dtype="float32") /* ty=Tensor[(910), float32] */;
  %955 = shape_of(%953, dtype="int32") /* ty=Tensor[(1), int32] */;
  %956 = cast(%953, dtype="float32") /* ty=Tensor[(910), float32] */;
  %957 = dyn.reshape(%954, %955, newshape=[]) /* ty=Tensor[(?), float32] */;
  %958 = @func_4163() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %959 = cast(%var_8319, dtype="float32") /* ty=Tensor[(8, 3, 2), float32] */;
  %960 = shape_of(%var_8318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %961 = cast(%var_8318, dtype="float32") /* ty=Tensor[(8, 3, 2), float32] */;
  %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %963 = mod(%961, %962) /* ty=Tensor[(8, 3, 2), float32] */;
  %964 = cast(%963, dtype="float64") /* ty=Tensor[(8, 3, 2), float64] */;
  %965 = sigmoid(%964) /* ty=Tensor[(8, 3, 2), float64] */;
  %966 = cast(%965, dtype="float32") /* ty=Tensor[(8, 3, 2), float32] */;
  %967 = sin(%966) /* ty=Tensor[(8, 3, 2), float32] */;
  %968 = cast(%965, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %969 = shape_of(%967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %970 = cast(%967, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %972 = logical_or(%970, %971) /* ty=Tensor[(8, 3, 2), bool] */;
  %973 = cast(%972, dtype="int64") /* ty=Tensor[(8, 3, 2), int64] */;
  %974 = shape_of(%967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %975 = cast(%967, dtype="int64") /* ty=Tensor[(8, 3, 2), int64] */;
  %976 = dyn.reshape(%973, %974, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %977 = minimum(%975, %976) /* ty=Tensor[(8, 3, 2), int64] */;
  %978 = cast(%965, dtype="int8") /* ty=Tensor[(8, 3, 2), int8] */;
  %979 = shape_of(%977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %980 = cast(%977, dtype="int8") /* ty=Tensor[(8, 3, 2), int8] */;
  %981 = dyn.reshape(%978, %979, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %982 = cast(%963, dtype="uint64") /* ty=Tensor[(8, 3, 2), uint64] */;
  %983 = shape_of(%965, dtype="int32") /* ty=Tensor[(3), int32] */;
  %984 = cast(%965, dtype="uint64") /* ty=Tensor[(8, 3, 2), uint64] */;
  %985 = dyn.reshape(%982, %983, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %986 = maximum(%984, %985) /* ty=Tensor[(8, 3, 2), uint64] */;
  %987 = cast(%977, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %988 = shape_of(%986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %989 = cast(%986, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %991 = cast(%972, dtype="float32") /* ty=Tensor[(8, 3, 2), float32] */;
  %992 = @func_6907() /* ty=(Tensor[(7, 5, 6), float32], Tensor[(7, 5, 6), bool]) */;
  %993 = cast(%986, dtype="float64") /* ty=Tensor[(8, 3, 2), float64] */;
  %994 = divide(%956, %957) /* ty=Tensor[(910), float32] */;
  %995 = %958.0;
  %996 = left_shift(%980, %981) /* ty=Tensor[(8, 3, 2), int8] */;
  %997 = less(%989, %990) /* ty=Tensor[(8, 3, 2), bool] */;
  %998 = log10(%991) /* ty=Tensor[(8, 3, 2), float32] */;
  %999 = %992.0;
  %1000 = erf(%993) /* ty=Tensor[(8, 3, 2), float64] */;
  (%var_8328, %994, %995, %996, %997, %998, %999, %1000)
}

def @func_5874() -> Tensor[(7, 5, 6), float32] {
  @func_2961() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_9692() -> (Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) {
  @func_9690() /* ty=(Tensor[(10, 13, 7), float32], Tensor[(7, 5, 6), bool]) */
}

def @func_1398(%var_1396: Tensor[(10, 13, 7), float64]) -> (Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) {
  @func_1395(%var_1396) /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) */
}

def @func_4812() -> (Tensor[(10, 13, 7), float64],) {
  %1001 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %1002 = %1001.0;
  (%1002,)
}

def @func_6945() -> (Tensor[(9, 14, 3), float64],) {
  %1003 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 14, 3), float64] */;
  %1004 = cosh(%1003) /* ty=Tensor[(9, 14, 3), float64] */;
  (%1004,)
}

def @func_7758() -> (Tensor[(10, 13, 7), float32],) {
  %1007 = fn () -> (Tensor[(10, 13, 7), float32],) {
    %1005 = @func_4775() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float32], Tensor[(10, 13, 7), float64]) */;
    %1006 = %1005.1;
    (%1006,)
  };
  %1007() /* ty=(Tensor[(10, 13, 7), float32],) */
}

def @func_2007() -> (Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) {
  %1011 = fn () -> (Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) {
    %1008 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
    %1009 = log10(%1008) /* ty=Tensor[(16, 5, 6), float32] */;
    %1010 = @func_1611() /* ty=Tensor[(10, 13, 7), bool] */;
    (%1009, %1010)
  };
  %1011() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(10, 13, 7), bool]) */
}

def @func_4814() -> (Tensor[(10, 13, 7), float64],) {
  @func_4812() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_7285() -> (Tensor[(7, 5, 6), float32],) {
  @func_7283() /* ty=(Tensor[(7, 5, 6), float32],) */
}

def @func_1665() -> Tensor[(10, 13, 7), float32] {
  %1020 = fn () -> Tensor[(10, 13, 7), float32] {
    %1012 = @func_329() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %1013 = %1012.0;
    %1014 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
    %1015 = %1014.0;
    %1016 = cast(%1015, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
    %1017 = shape_of(%1013, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1018 = cast(%1013, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
    %1019 = dyn.reshape(%1016, %1017, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%1018, %1019) /* ty=Tensor[(10, 13, 7), float32] */
  };
  %1020() /* ty=Tensor[(10, 13, 7), float32] */
}

def @func_3036() -> (Tensor[(10, 13, 7), float64],) {
  %1021 = @func_2403() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %1022 = %1021.1;
  (%1022,)
}

def @func_6370() -> (Tensor[(10, 13, 7), float64],) {
  %1023 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %1024 = %1023.0;
  (%1024,)
}

def @func_6823() -> Tensor[(10, 13, 7), float64] {
  %1025 = @func_2247() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %1025.1
}

def @func_3578() -> Tensor[(7, 5, 6), float32] {
  @func_3576() /* ty=Tensor[(7, 5, 6), float32] */
}

def @func_8311(%var_8296: Tensor[(7, 5, 6), bool]) -> (Tensor[(7, 5, 6), int32],) {
  %1026 = @func_2741() /* ty=(Tensor[(7, 5, 6), bool],) */;
  %1027 = %1026.0;
  %1028 = cast(%var_8296, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %1029 = shape_of(%1027, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1030 = cast(%1027, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1032 = bitwise_xor(%1030, %1031) /* ty=Tensor[(7, 5, 6), int32] */;
  %1033 = cast(%var_8296, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %1034 = shape_of(%1032, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1035 = cast(%1032, dtype="int32") /* ty=Tensor[(7, 5, 6), int32] */;
  %1036 = dyn.reshape(%1033, %1034, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1037 = logical_xor(%1035, %1036) /* ty=Tensor[(7, 5, 6), int32] */;
  (%1037,)
}

def @func_7689() -> (Tensor[(16, 5, 6), float32], Tensor[(?, ?, 5), uint32]) {
  @func_7687() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(?, ?, 5), uint32]) */
}

def @func_1818() -> (Tensor[(10, 13, 7), float64],) {
  %1040 = fn () -> (Tensor[(10, 13, 7), float64],) {
    %1038 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
    %1039 = %1038.0;
    (%1039,)
  };
  %1040() /* ty=(Tensor[(10, 13, 7), float64],) */
}

def @func_9386() -> (Tensor[(10, 13, 7), float64], Tensor[(9, 1, 6), float64]) {
  %1041 = @func_4110() /* ty=Tensor[(10, 13, 7), float64] */;
  %1042 = @func_3609() /* ty=Tensor[(9, 1, 6), float64] */;
  (%1041, %1042)
}

def @func_3232() -> (Tensor[(7, 5, 6), float32],) {
  %1044 = fn () -> (Tensor[(7, 5, 6), float32],) {
    %1043 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
    (%1043,)
  };
  %1044() /* ty=(Tensor[(7, 5, 6), float32],) */
}

def @func_1054(%var_956: Tensor[(10, 13, 7), float64]) -> (Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(448), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) {
  %1045 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %1046 = %1045.2;
  %1047 = cast(%var_956, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %1048 = shape_of(%1046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1049 = cast(%1046, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1051 = @func_698() /* ty=(Tensor[(15, 10, 3), uint16], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %1052 = @func_638() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %1053 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %1054 = @func_414() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %1055 = cast(meta[relay.Constant][29] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %1056 = reshape(%1055, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), float32] */;
  %1057 = @func_544(%1056) /* ty=(Tensor[(14, 4, 8), float32], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64], Tensor[(10, 13, 7), float64]) */;
  %1058 = %1057.3;
  %1059 = @func_843() /* ty=(Tensor[(10, 13, 7), float64], Tensor[(7, 5, 6), float32], Tensor[(10, 13, 7), float64]) */;
  %1060 = %1059.2;
  %1061 = cast(%1060, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %1062 = shape_of(%1058, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1063 = cast(%1058, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %1064 = dyn.reshape(%1061, %1062, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1065 = @func_318() /* ty=(Tensor[(10, 13, 7), float64],) */;
  %1066 = @func_588() /* ty=Tensor[(7, 5, 6), float32] */;
  %1067 = logical_and(%1049, %1050) /* ty=Tensor[(10, 13, 7), bool] */;
  %1068 = %1051.2;
  %1069 = %1052.0;
  %1070 = %1053.2;
  %1071 = %1054.0;
  %1072 = power(%1063, %1064) /* ty=Tensor[(10, 13, 7), float64] */;
  %1073 = %1065.0;
  (%1066, %1067, %1068, %1069, meta[relay.Constant][29] /* ty=Tensor[(448), float32] */, %1070, %1071, %1072, %1073)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen513/build/output.py:3705: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen513/build/output.py", line 3710, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(924) tvmgen_default_fused_cast_cast_reshape_not_equal_kernel0(signed char* __restrict__ T_not_equal, short* __restrict__ placeholder, short* __restrict__ placeholder1) {
  T_not_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) != ((bool)placeholder1[(((int)threadIdx.x))])));
}

extern "C" __global__ void __launch_bounds__(924) tvmgen_default_fused_cast_cast_reshape_less_kernel0(signed char* __restrict__ T_less, short* __restrict__ placeholder, short* __restrict__ placeholder1) {
  T_less[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) < ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

