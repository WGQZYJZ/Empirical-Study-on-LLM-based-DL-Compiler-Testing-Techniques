==========mod==========
#[version = "0.0.5"]
def @func_5489(%var_5388: Tensor[(5, 9, 2), int64], %var_5408: Tensor[(11, 33), bool], %var_5466: Tensor[(5, 9, 2), float32]) -> (Tensor[(16, 12, 4), bool], bool, Tensor[(11, 33), bool], Tensor[(520), float32], Tensor[(5, 9, 2), float32], Tensor[(520), bool], Tensor[(5, 9, 2), float64], Tensor[(5, 9, 2), bool], Tensor[(5, 9, 2), uint16], Tensor[(13, 14, 9), int8], Tensor[(5, 9, 2), float32], Tensor[(520), bool]) {
  %0 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %1 = cast(%var_5408, dtype="bool") /* ty=Tensor[(11, 33), bool] */;
  %2 = reshape(%0, newshape=[]) /* ty=bool */;
  %3 = reshape(%1, newshape=[3, 11, 11]) /* ty=Tensor[(3, 11, 11), bool] */;
  %4 = @func_4643(%2, %3) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(13, 14, 9), int8], Tensor[(16, 12, 4), bool]) */;
  %5 = cast(%var_5388, dtype="float32") /* ty=Tensor[(5, 9, 2), float32] */;
  %6 = @func_3851() /* ty=Tensor[(520), float32] */;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(520), float32] */;
  %8 = reshape(%7, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %9 = @func_4337(%8) /* ty=(Tensor[(520), bool], Tensor[(520), bool]) */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 9, 2), int64] */, dtype="float64") /* ty=Tensor[(5, 9, 2), float64] */;
  %11 = cast(%var_5388, dtype="float32") /* ty=Tensor[(5, 9, 2), float32] */;
  %12 = atanh(%11) /* ty=Tensor[(5, 9, 2), float32] */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 9, 2), int64] */, dtype="int64") /* ty=Tensor[(5, 9, 2), int64] */;
  %14 = shape_of(%var_5388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%var_5388, dtype="int64") /* ty=Tensor[(5, 9, 2), int64] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %17 = minimum(%15, %16) /* ty=Tensor[(5, 9, 2), int64] */;
  %18 = cast(%17, dtype="int64") /* ty=Tensor[(5, 9, 2), int64] */;
  %19 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%12, dtype="int64") /* ty=Tensor[(5, 9, 2), int64] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %22 = right_shift(%20, %21) /* ty=Tensor[(5, 9, 2), int64] */;
  %23 = cast(%12, dtype="bool") /* ty=Tensor[(5, 9, 2), bool] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%22, dtype="bool") /* ty=Tensor[(5, 9, 2), bool] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %27 = cast(%var_5466, dtype="uint16") /* ty=Tensor[(5, 9, 2), uint16] */;
  %28 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%12, dtype="uint16") /* ty=Tensor[(5, 9, 2), uint16] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %31 = cast(%22, dtype="float64") /* ty=Tensor[(5, 9, 2), float64] */;
  %32 = cos(%31) /* ty=Tensor[(5, 9, 2), float64] */;
  %33 = cast(%32, dtype="float32") /* ty=Tensor[(5, 9, 2), float32] */;
  %34 = @func_4463() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool]) */;
  %35 = %4.2;
  %36 = sqrt(%5) /* ty=Tensor[(5, 9, 2), float32] */;
  %37 = %9.0;
  %38 = rsqrt(%10) /* ty=Tensor[(5, 9, 2), float64] */;
  %39 = logical_or(%25, %26) /* ty=Tensor[(5, 9, 2), bool] */;
  %40 = add(%29, %30) /* ty=Tensor[(5, 9, 2), uint16] */;
  %41 = @func_5176() /* ty=Tensor[(13, 14, 9), int8] */;
  %42 = sigmoid(%33) /* ty=Tensor[(5, 9, 2), float32] */;
  %43 = %34.1;
  (%35, False /* ty=bool */, %var_5408, %6, %36, %37, %38, %39, %40, %41, %42, %43)
}

def @func_1907(%var_1881: Tensor[(14, 7, 5), float32], %var_1882: Tensor[(14, 7, 5), float32], %var_1903: Tensor[(10, 52), uint8]) -> (Tensor[(14, 7, 5), float32], Tensor[(10, 13, 4), uint8], Tensor[(10, 52), uint8]) {
  %44 = cast(%var_1882, dtype="float32") /* ty=Tensor[(14, 7, 5), float32] */;
  %45 = shape_of(%var_1881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_1881, dtype="float32") /* ty=Tensor[(14, 7, 5), float32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %48 = cast(%var_1903, dtype="uint8") /* ty=Tensor[(10, 52), uint8] */;
  %49 = reshape(%48, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), uint8] */;
  %50 = @func_292(%49) /* ty=(Tensor[(10, 13, 4), uint8],) */;
  %51 = add(%46, %47) /* ty=Tensor[(14, 7, 5), float32] */;
  %52 = %50.0;
  (%51, %52, %var_1903)
}

def @func_6493(%var_6467: Tensor[(13, 14, 9), int8], %var_6476: Tensor[(520), float32]) -> (Tensor[(13, 14, 9), int8], Tensor[(520), uint8], Tensor[(13, 14, 9), uint64]) {
  %53 = @func_3493() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(65), float64], Tensor[(16, 12, 4), float64], Tensor[(126, 1), int32], Tensor[(768), float64], Tensor[(14, 13, 5), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
  %54 = %53.6;
  %55 = cast(%var_6467, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %59 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %60 = %59.0;
  %61 = cast(%var_6476, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(1), int32] */;
  %63 = cast(%60, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %65 = subtract(%57, %58) /* ty=Tensor[(13, 14, 9), int8] */;
  %66 = bitwise_or(%63, %64) /* ty=Tensor[(520), uint8] */;
  %67 = @func_5373() /* ty=Tensor[(13, 14, 9), uint64] */;
  (%65, %66, %67)
}

def @func_5218() -> (Tensor[(13, 14, 9), int8], Tensor[(520), float32]) {
  %68 = @func_4948() /* ty=(Tensor[(520), float32], Tensor[(520), bool]) */;
  %69 = %68.1;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(520), float32] */;
  %71 = reshape(%70, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %72 = @func_4337(%71) /* ty=(Tensor[(520), bool], Tensor[(520), bool]) */;
  %73 = %72.1;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(520), float32] */;
  %75 = shape_of(%69, dtype="int32") /* ty=Tensor[(1), int32] */;
  %76 = cast(%69, dtype="float32") /* ty=Tensor[(520), float32] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?), float32] */;
  %78 = @func_5176() /* ty=Tensor[(13, 14, 9), int8] */;
  %79 = mod(%76, %77) /* ty=Tensor[(520), float32] */;
  (%78, %79)
}

def @func_6943(%var_6933: Tensor[(4, 5, 11), int16], %var_6934: Tensor[(4, 5, 11), int16]) -> (Tensor[(4, 5, 11), bool], Tensor[(13, 14, 9), int8]) {
  %80 = cast(%var_6934, dtype="bool") /* ty=Tensor[(4, 5, 11), bool] */;
  %81 = shape_of(%var_6933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%var_6933, dtype="bool") /* ty=Tensor[(4, 5, 11), bool] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %84 = @func_3399() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %85 = not_equal(%82, %83) /* ty=Tensor[(4, 5, 11), bool] */;
  %86 = %84.0;
  (%85, %86)
}

def @func_3493() -> (Tensor[(13, 14, 9), int8], Tensor[(65), float64], Tensor[(16, 12, 4), float64], Tensor[(126, 1), int32], Tensor[(768), float64], Tensor[(14, 13, 5), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) {
  %87 = cast(meta[relay.Constant][2] /* ty=Tensor[(126, 1), int32] */, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
  %88 = cast(meta[relay.Constant][2] /* ty=Tensor[(126, 1), int32] */, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %90 = reshape(%87, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %91 = reshape(%88, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %92 = reshape(%89, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %93 = @func_905(%90, %91, %92) /* ty=(Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) */;
  %94 = cast(meta[relay.Constant][1] /* ty=Tensor[(65), float64] */, dtype="float64") /* ty=Tensor[(65), float64] */;
  %95 = reshape(%94, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float64] */;
  %96 = @func_3051(%95) /* ty=Tensor[(14, 13, 5), float64] */;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(14, 13, 5), float64] */;
  %98 = sin(%97) /* ty=Tensor[(14, 13, 5), float64] */;
  %99 = cast(%96, dtype="uint64") /* ty=Tensor[(14, 13, 5), uint64] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="uint64") /* ty=Tensor[(14, 13, 5), uint64] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %103 = bitwise_and(%101, %102) /* ty=Tensor[(14, 13, 5), uint64] */;
  %104 = cast(%98, dtype="bool") /* ty=Tensor[(14, 13, 5), bool] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%103, dtype="bool") /* ty=Tensor[(14, 13, 5), bool] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %108 = cast(meta[relay.Constant][2] /* ty=Tensor[(126, 1), int32] */, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
  %109 = %93.1;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(16, 12, 4), float64] */;
  %111 = cast(meta[relay.Constant][1] /* ty=Tensor[(65), float64] */, dtype="float64") /* ty=Tensor[(65), float64] */;
  %112 = not_equal(%106, %107) /* ty=Tensor[(14, 13, 5), bool] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(14, 13, 5), float64] */;
  %114 = reshape(%108, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %115 = reshape(%110, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %116 = reshape(%111, newshape=[13, 5]) /* ty=Tensor[(13, 5), float64] */;
  %117 = reshape(%113, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), float64] */;
  %118 = @func_3223(%114, %115, %116, %117) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(2, 384), float64], Tensor[(13, 5), float64], Tensor[(14, 13, 5), int8]) */;
  %119 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %120 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
  %121 = %118.0;
  %122 = %119.0;
  (%120, meta[relay.Constant][1] /* ty=Tensor[(65), float64] */, %109, meta[relay.Constant][2] /* ty=Tensor[(126, 1), int32] */, meta[relay.Constant][3] /* ty=Tensor[(768), float64] */, %112, %121, %122)
}

def @func_2801() -> Tensor[(13, 14, 9), int8] {
  %123 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 14, 1), int8] */, dtype="int8") /* ty=Tensor[(13, 14, 1), int8] */;
  %124 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 14, 9), int8] */, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  minimum(%123, %124) /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_2929() -> (Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) {
  %125 = cast(meta[relay.Constant][6] /* ty=Tensor[(520), uint8] */, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %126 = reshape(%125, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), uint8] */;
  %127 = @func_292(%126) /* ty=(Tensor[(10, 13, 4), uint8],) */;
  %128 = cast(meta[relay.Constant][6] /* ty=Tensor[(520), uint8] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %129 = cast(meta[relay.Constant][7] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %130 = cast(meta[relay.Constant][7] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %131 = reshape(%129, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %132 = reshape(%130, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %133 = @func_1015(%131, %132) /* ty=(Tensor[(10, 14, 11), int16], Tensor[(1540), bool], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(5, 8, 8), bool], Tensor[(5, 8, 8), float64]) */;
  %134 = cast(meta[relay.Constant][8] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %135 = cast(meta[relay.Constant][8] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %136 = cast(meta[relay.Constant][9] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %137 = reshape(%134, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %138 = reshape(%135, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %139 = reshape(%136, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %140 = @func_905(%137, %138, %139) /* ty=(Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) */;
  %141 = @func_2885() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
  %142 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  %143 = %127.0;
  %144 = sin(%128) /* ty=Tensor[(520), float32] */;
  %145 = %133.4;
  %146 = %140.3;
  %147 = %141.0;
  (%142, %143, %144, %145, meta[relay.Constant][7] /* ty=Tensor[(320), float32] */, %146, meta[relay.Constant][8] /* ty=Tensor[(126), int32] */, meta[relay.Constant][9] /* ty=Tensor[(768), float64] */, %147)
}

def @func_4394() -> (Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(546, 3), float64], Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) {
  %148 = @func_3890() /* ty=(Tensor[(520), bool],) */;
  %149 = cast(meta[relay.Constant][10] /* ty=Tensor[(546, 3), int8] */, dtype="int8") /* ty=Tensor[(546, 3), int8] */;
  %150 = %148.0;
  %151 = cast(%150, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %152 = reshape(%149, newshape=[13, 14, 9]) /* ty=Tensor[(13, 14, 9), int8] */;
  %153 = reshape(%151, newshape=[520, 1]) /* ty=Tensor[(520, 1), uint8] */;
  %154 = @func_3544(%152, %153) /* ty=(Tensor[(13, 14, 9), float32], Tensor[(10, 13, 4), uint8], Tensor[(520, 1), uint8], Tensor[(14, 11, 1), float32], Tensor[(154), uint16]) */;
  %155 = cast(meta[relay.Constant][10] /* ty=Tensor[(546, 3), int8] */, dtype="float64") /* ty=Tensor[(546, 3), float64] */;
  %156 = @func_3890() /* ty=(Tensor[(520), bool],) */;
  %157 = @func_4283() /* ty=(Tensor[(520), float32], Tensor[(13, 14, 9), int8], Tensor[(520, 1), uint8]) */;
  %158 = cast(meta[relay.Constant][11] /* ty=Tensor[(154), uint16] */, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %159 = reshape(%158, newshape=[14, 11, 1]) /* ty=Tensor[(14, 11, 1), uint16] */;
  %160 = @func_181(%159) /* ty=(Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) */;
  %161 = %154.2;
  %162 = tan(%155) /* ty=Tensor[(546, 3), float64] */;
  %163 = %156.0;
  %164 = %157.2;
  %165 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  %166 = %160.0;
  (%150, %161, %162, %163, %164, %165, %166, meta[relay.Constant][11] /* ty=Tensor[(154), uint16] */)
}

def @func_3838(%var_3809: Tensor[(11, 2, 13), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(11, 2, 13), int32]) {
  %167 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %168 = cast(%var_3809, dtype="float64") /* ty=Tensor[(11, 2, 13), float64] */;
  %169 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(11, 2, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 13), float64] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %172 = divide(%170, %171) /* ty=Tensor[(11, 2, 13), float64] */;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(11, 2, 13), float32] */;
  %174 = asinh(%173) /* ty=Tensor[(11, 2, 13), float32] */;
  %175 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 2, 13), float64] */, dtype="int32") /* ty=Tensor[(11, 2, 13), int32] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="int32") /* ty=Tensor[(11, 2, 13), int32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %179 = %167.0;
  %180 = maximum(%177, %178) /* ty=Tensor[(11, 2, 13), int32] */;
  (%179, %180)
}

def @func_4859(%var_4834: bool) -> (Tensor[(768), float64], Tensor[(195), bool], Tensor[(13, 14, 9), float32], Tensor[(520), float32], Tensor[(520), bool]) {
  %181 = cast(%var_4834, dtype="bool") /* ty=bool */;
  %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(195), bool] */, dtype="bool") /* ty=Tensor[(195), bool] */;
  %183 = reshape(%181, newshape=[]) /* ty=bool */;
  %184 = reshape(%182, newshape=[195]) /* ty=Tensor[(195), bool] */;
  %185 = @func_3168(%183, %184) /* ty=(Tensor[(768), float64], Tensor[(13, 15, 1), bool], bool, Tensor[(195), bool]) */;
  %186 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %188 = cast(%var_4834, dtype="float32") /* ty=float32 */;
  %189 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %190 = %189.0;
  %191 = cast(%190, dtype="float32") /* ty=Tensor[(520), float32] */;
  %192 = reshape(%191, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %193 = @func_4337(%192) /* ty=(Tensor[(520), bool], Tensor[(520), bool]) */;
  %194 = %185.0;
  %195 = divide(%187, %188) /* ty=Tensor[(13, 14, 9), float32] */;
  %196 = %193.1;
  (%194, meta[relay.Constant][13] /* ty=Tensor[(195), bool] */, %195, %190, %196)
}

def @func_6835(%var_6829: Tensor[(16, 14, 4), float32]) -> Tensor[(16, 14, 4), float32] {
  %197 = cast(%var_6829, dtype="float32") /* ty=Tensor[(16, 14, 4), float32] */;
  acos(%197) /* ty=Tensor[(16, 14, 4), float32] */
}

def @func_6108(%var_6084: Tensor[(13, 14, 9), int8]) -> (Tensor[(5, 9, 2), uint16], Tensor[(90), int64], Tensor[(363), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), bool], Tensor[(13, 14, 9), uint64], Tensor[(13, 14, 9), int8], Tensor[(1386), float32]) {
  %198 = cast(meta[relay.Constant][14] /* ty=Tensor[(90), int64] */, dtype="int64") /* ty=Tensor[(90), int64] */;
  %199 = cast(meta[relay.Constant][15] /* ty=Tensor[(363), bool] */, dtype="bool") /* ty=Tensor[(363), bool] */;
  %200 = cast(meta[relay.Constant][14] /* ty=Tensor[(90), int64] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %201 = reshape(%198, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), int64] */;
  %202 = reshape(%199, newshape=[11, 33]) /* ty=Tensor[(11, 33), bool] */;
  %203 = reshape(%200, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), float32] */;
  %204 = @func_5489(%201, %202, %203) /* ty=(Tensor[(16, 12, 4), bool], bool, Tensor[(11, 33), bool], Tensor[(520), float32], Tensor[(5, 9, 2), float32], Tensor[(520), bool], Tensor[(5, 9, 2), float64], Tensor[(5, 9, 2), bool], Tensor[(5, 9, 2), uint16], Tensor[(13, 14, 9), int8], Tensor[(5, 9, 2), float32], Tensor[(520), bool]) */;
  %205 = @func_5896() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %206 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %207 = %206.0;
  %208 = cast(%var_6084, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = cast(meta[relay.Constant][16] /* ty=Tensor[(1386), float32] */, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %213 = reshape(%212, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), float32] */;
  %214 = @func_5778(%213) /* ty=(Tensor[(14, 9, 11), float32], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
  %215 = %204.8;
  %216 = %205.0;
  %217 = greater_equal(%210, %211) /* ty=Tensor[(13, 14, 9), bool] */;
  %218 = @func_5373() /* ty=Tensor[(13, 14, 9), uint64] */;
  %219 = %214.2;
  (%215, meta[relay.Constant][14] /* ty=Tensor[(90), int64] */, meta[relay.Constant][15] /* ty=Tensor[(363), bool] */, %216, %217, %218, %219, meta[relay.Constant][16] /* ty=Tensor[(1386), float32] */)
}

def @func_1106(%var_1100: uint32, %var_1101: Tensor[(8, 5, 13), uint32]) -> Tensor[(8, 5, 13), uint32] {
  %220 = cast(%var_1100, dtype="uint32") /* ty=uint32 */;
  %221 = cast(%var_1101, dtype="uint32") /* ty=Tensor[(8, 5, 13), uint32] */;
  logical_xor(%220, %221) /* ty=Tensor[(8, 5, 13), uint32] */
}

def @func_3544(%var_3510: Tensor[(13, 14, 9), int8], %var_3520: Tensor[(520, 1), uint8]) -> (Tensor[(13, 14, 9), float32], Tensor[(10, 13, 4), uint8], Tensor[(520, 1), uint8], Tensor[(14, 11, 1), float32], Tensor[(154), uint16]) {
  %222 = @func_3399() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %223 = %222.0;
  %224 = cast(%var_3510, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %228 = cast(%var_3520, dtype="uint8") /* ty=Tensor[(520, 1), uint8] */;
  %229 = reshape(%228, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), uint8] */;
  %230 = @func_292(%229) /* ty=(Tensor[(10, 13, 4), uint8],) */;
  %231 = cast(meta[relay.Constant][17] /* ty=Tensor[(154), uint16] */, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %232 = reshape(%231, newshape=[14, 11, 1]) /* ty=Tensor[(14, 11, 1), uint16] */;
  %233 = @func_181(%232) /* ty=(Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) */;
  %234 = mod(%226, %227) /* ty=Tensor[(13, 14, 9), float32] */;
  %235 = %230.0;
  %236 = %233.1;
  (%234, %235, %var_3520, %236, meta[relay.Constant][17] /* ty=Tensor[(154), uint16] */)
}

def @func_4759(%var_4737: Tensor[(6, 4, 16), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(6, 4, 16), uint64]) {
  %237 = cast(%var_4737, dtype="float64") /* ty=Tensor[(6, 4, 16), float64] */;
  %238 = atanh(%237) /* ty=Tensor[(6, 4, 16), float64] */;
  %239 = cast(%238, dtype="uint64") /* ty=Tensor[(6, 4, 16), uint64] */;
  %240 = shape_of(%var_4737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%var_4737, dtype="uint64") /* ty=Tensor[(6, 4, 16), uint64] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %243 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
  %244 = add(%241, %242) /* ty=Tensor[(6, 4, 16), uint64] */;
  (%243, %244)
}

def @func_5896() -> (Tensor[(13, 14, 9), int8],) {
  %245 = @func_3755() /* ty=Tensor[(13, 14, 9), int8] */;
  (%245,)
}

def @func_6717() -> (Tensor[(14, 11, ?), bool], Tensor[(14, 11, 1), float32]) {
  %246 = @func_4727() /* ty=(Tensor[(14, 11, ?), int32],) */;
  %247 = %246.0;
  %248 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 11, 1), int32] */, dtype="bool") /* ty=Tensor[(14, 11, 1), bool] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="bool") /* ty=Tensor[(14, 11, ?), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 11, 1), int32] */, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
  %253 = equal(%250, %251) /* ty=Tensor[(14, 11, ?), bool] */;
  %254 = sinh(%252) /* ty=Tensor[(14, 11, 1), float32] */;
  (%253, %254)
}

def @func_5331() -> (Tensor[(13, 14, 9), int8],) {
  %255 = @func_3755() /* ty=Tensor[(13, 14, 9), int8] */;
  (%255,)
}

def @func_6741() -> Tensor[(520), bool] {
  %256 = @func_4463() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool]) */;
  %256.1
}

def @func_1676(%var_1611: Tensor[(8, 5, 6), float64], %var_1663: uint32) -> (Tensor[(8, 5, 6), float32], Tensor[(8, 5, 6), float32], Tensor[(8, 5, 13), uint32], uint32, Tensor[(520), uint32], Tensor[(520), uint8], Tensor[(126), int32], Tensor[(768), float64]) {
  %257 = cast(%var_1611, dtype="float64") /* ty=Tensor[(8, 5, 6), float64] */;
  %258 = sigmoid(%257) /* ty=Tensor[(8, 5, 6), float64] */;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(8, 5, 6), float32] */;
  %260 = cast(%258, dtype="float32") /* ty=Tensor[(8, 5, 6), float32] */;
  %261 = cast(%var_1663, dtype="uint32") /* ty=uint32 */;
  %262 = cast(meta[relay.Constant][19] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %263 = reshape(%261, newshape=[]) /* ty=uint32 */;
  %264 = reshape(%262, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint32] */;
  %265 = cast(meta[relay.Constant][20] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %266 = cast(meta[relay.Constant][20] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %267 = cast(meta[relay.Constant][21] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %268 = reshape(%265, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %269 = reshape(%266, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %270 = reshape(%267, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %271 = @func_905(%268, %269, %270) /* ty=(Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) */;
  %272 = sinh(%259) /* ty=Tensor[(8, 5, 6), float32] */;
  %273 = exp(%260) /* ty=Tensor[(8, 5, 6), float32] */;
  %274 = @func_1106(%263, %264) /* ty=Tensor[(8, 5, 13), uint32] */;
  %275 = %271.4;
  (%272, %273, %274, %var_1663, meta[relay.Constant][19] /* ty=Tensor[(520), uint32] */, %275, meta[relay.Constant][20] /* ty=Tensor[(126), int32] */, meta[relay.Constant][21] /* ty=Tensor[(768), float64] */)
}

def @func_6899(%var_6889: Tensor[(13, 14, 9), int8]) -> (Tensor[(13, 14, 9), float32], Tensor[(13, 14, 9), float64]) {
  %276 = @func_3755() /* ty=Tensor[(13, 14, 9), int8] */;
  %277 = cast(%var_6889, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %281 = cast(%var_6889, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  %282 = reshape(%281, newshape=[13, 14, 9]) /* ty=Tensor[(13, 14, 9), int8] */;
  %283 = @func_4880(%282) /* ty=(Tensor[(13, 14, 9), float64],) */;
  %284 = power(%279, %280) /* ty=Tensor[(13, 14, 9), float32] */;
  %285 = %283.0;
  (%284, %285)
}

def @func_6774() -> Tensor[(520), float32] {
  @func_3851() /* ty=Tensor[(520), float32] */
}

def @func_6533(%var_6523: Tensor[(11, 14), uint16]) -> (Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), float32], Tensor[(11, 14), uint16], Tensor[(13, 14, 9), int8]) {
  %286 = @func_5218() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), float32]) */;
  %287 = cast(%var_6523, dtype="uint16") /* ty=Tensor[(11, 14), uint16] */;
  %288 = reshape(%287, newshape=[14, 11, 1]) /* ty=Tensor[(14, 11, 1), uint16] */;
  %289 = @func_181(%288) /* ty=(Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) */;
  %290 = %286.0;
  %291 = %289.1;
  %292 = @func_5715() /* ty=Tensor[(13, 14, 9), int8] */;
  (%290, %291, %var_6523, %292)
}

def @func_3107() -> (Tensor[(13, 14, 9), int8],) {
  %293 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  (%293,)
}

def @func_3399() -> (Tensor[(13, 14, 9), int8],) {
  %294 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
  (%294,)
}

def @func_7246() -> (Tensor[(520), float32], Tensor[(520), float32]) {
  %295 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %296 = @func_6119() /* ty=(Tensor[(520), float32],) */;
  %297 = %295.0;
  %298 = %296.0;
  (%297, %298)
}

def @func_3168(%var_3157: bool, %var_3158: Tensor[(195), bool]) -> (Tensor[(768), float64], Tensor[(13, 15, 1), bool], bool, Tensor[(195), bool]) {
  %299 = @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */;
  %300 = cast(%var_3157, dtype="bool") /* ty=bool */;
  %301 = cast(%var_3158, dtype="bool") /* ty=Tensor[(195), bool] */;
  %302 = reshape(%300, newshape=[]) /* ty=bool */;
  %303 = reshape(%301, newshape=[13, 15, 1]) /* ty=Tensor[(13, 15, 1), bool] */;
  %304 = %299.7;
  %305 = @func_3021(%302, %303) /* ty=Tensor[(13, 15, 1), bool] */;
  (%304, %305, %var_3157, %var_3158)
}

def @func_6023() -> Tensor[(13, 14, 9), int8] {
  %306 = @func_5327() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %306.0
}

def @func_4948() -> (Tensor[(520), float32], Tensor[(520), bool]) {
  %307 = @func_4463() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool]) */;
  %308 = %307.1;
  %309 = cast(%308, dtype="float32") /* ty=Tensor[(520), float32] */;
  %310 = log2(%309) /* ty=Tensor[(520), float32] */;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(520), float32] */;
  %312 = reshape(%311, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %313 = @func_4337(%312) /* ty=(Tensor[(520), bool], Tensor[(520), bool]) */;
  %314 = %313.0;
  (%310, %314)
}

def @func_3755() -> Tensor[(13, 14, 9), int8] {
  @func_3296() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_3646(%var_3627: Tensor[(6, 12, 6), float32], %var_3628: Tensor[(6, 12, 6), float32]) -> (Tensor[(6, 12, 6), float32], Tensor[(13, 14, 9), int8]) {
  %315 = cast(%var_3628, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
  %316 = shape_of(%var_3627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%var_3627, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %319 = @func_3107() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %320 = mod(%317, %318) /* ty=Tensor[(6, 12, 6), float32] */;
  %321 = %319.0;
  (%320, %321)
}

def @func_3223(%var_3195: Tensor[(126), int32], %var_3196: Tensor[(2, 384), float64], %var_3210: Tensor[(13, 5), float64], %var_3216: Tensor[(14, 13, 5), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(2, 384), float64], Tensor[(13, 5), float64], Tensor[(14, 13, 5), int8]) {
  %322 = cast(%var_3195, dtype="int32") /* ty=Tensor[(126), int32] */;
  %323 = cast(%var_3195, dtype="int32") /* ty=Tensor[(126), int32] */;
  %324 = cast(%var_3196, dtype="float64") /* ty=Tensor[(2, 384), float64] */;
  %325 = reshape(%322, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %326 = reshape(%323, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %327 = reshape(%324, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %328 = @func_905(%325, %326, %327) /* ty=(Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) */;
  %329 = cast(%var_3210, dtype="float64") /* ty=Tensor[(13, 5), float64] */;
  %330 = reshape(%329, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float64] */;
  %331 = @func_3051(%330) /* ty=Tensor[(14, 13, 5), float64] */;
  %332 = cast(%var_3216, dtype="int8") /* ty=Tensor[(14, 13, 5), int8] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="int8") /* ty=Tensor[(14, 13, 5), int8] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %336 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  %337 = %328.3;
  %338 = right_shift(%334, %335) /* ty=Tensor[(14, 13, 5), int8] */;
  (%336, %337, %var_3195, %var_3196, %var_3210, %338)
}

def @func_181(%var_173: Tensor[(14, 11, 1), uint16]) -> (Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) {
  %339 = cast(meta[relay.Constant][22] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %340 = cast(%var_173, dtype="uint16") /* ty=Tensor[(14, 11, 1), uint16] */;
  %341 = cast(%var_173, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
  %342 = maximum(%339, %340) /* ty=Tensor[(14, 11, 1), uint16] */;
  %343 = acos(%341) /* ty=Tensor[(14, 11, 1), float32] */;
  (%342, %343)
}

def @func_5176() -> Tensor[(13, 14, 9), int8] {
  @func_3755() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_5715() -> Tensor[(13, 14, 9), int8] {
  %344 = @func_5327() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %344.0
}

def @func_3859() -> Tensor[(13, 14, 9), int8] {
  @func_3296() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_4880(%var_4869: Tensor[(13, 14, 9), int8]) -> (Tensor[(13, 14, 9), float64],) {
  %345 = @func_3859() /* ty=Tensor[(13, 14, 9), int8] */;
  %346 = cast(%var_4869, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %350 = floor_mod(%348, %349) /* ty=Tensor[(13, 14, 9), float64] */;
  (%350,)
}

def @func_3021(%var_3008: bool, %var_3009: Tensor[(13, 15, 1), bool]) -> Tensor[(13, 15, 1), bool] {
  %351 = cast(%var_3008, dtype="bool") /* ty=bool */;
  %352 = cast(%var_3009, dtype="bool") /* ty=Tensor[(13, 15, 1), bool] */;
  logical_and(%351, %352) /* ty=Tensor[(13, 15, 1), bool] */
}

def @func_6051() -> (Tensor[(13, 14, 9), int8], Tensor[(520), bool], Tensor[(520), float32]) {
  %353 = @func_2885() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
  %354 = @func_4948() /* ty=(Tensor[(520), float32], Tensor[(520), bool]) */;
  %355 = @func_3890() /* ty=(Tensor[(520), bool],) */;
  %356 = %355.0;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(520), float32] */;
  %358 = %353.1;
  %359 = %354.1;
  %360 = log10(%357) /* ty=Tensor[(520), float32] */;
  (%358, %359, %360)
}

def @func_1015(%var_953: Tensor[(5, 8, 8), float32], %var_1008: Tensor[(5, 8, 8), float32]) -> (Tensor[(10, 14, 11), int16], Tensor[(1540), bool], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(5, 8, 8), bool], Tensor[(5, 8, 8), float64]) {
  %361 = cast(meta[relay.Constant][23] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %362 = cast(meta[relay.Constant][23] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %363 = cast(meta[relay.Constant][23] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %364 = reshape(%361, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
  %365 = reshape(%362, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
  %366 = reshape(%363, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
  %367 = cast(meta[relay.Constant][24] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %368 = cast(meta[relay.Constant][24] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %369 = reshape(%367, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %370 = reshape(%368, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %371 = @func_113(%369, %370) /* ty=(Tensor[(16, 12, 4), float64],) */;
  %372 = cast(%var_953, dtype="float32") /* ty=Tensor[(5, 8, 8), float32] */;
  %373 = sinh(%372) /* ty=Tensor[(5, 8, 8), float32] */;
  %374 = cast(%var_953, dtype="bool") /* ty=Tensor[(5, 8, 8), bool] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="bool") /* ty=Tensor[(5, 8, 8), bool] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %378 = cast(%var_1008, dtype="float64") /* ty=Tensor[(5, 8, 8), float64] */;
  %379 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%373, dtype="float64") /* ty=Tensor[(5, 8, 8), float64] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %382 = @func_664(%364, %365, %366) /* ty=Tensor[(10, 14, 11), int16] */;
  %383 = %371.0;
  %384 = greater_equal(%376, %377) /* ty=Tensor[(5, 8, 8), bool] */;
  %385 = floor_mod(%380, %381) /* ty=Tensor[(5, 8, 8), float64] */;
  (%382, meta[relay.Constant][23] /* ty=Tensor[(1540), bool] */, %383, meta[relay.Constant][24] /* ty=Tensor[(768), float64] */, %384, %385)
}

def @func_2395(%var_2384: uint32, %var_2385: Tensor[(12, 14, 12), uint32]) -> (Tensor[(12, 14, 12), uint32], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) {
  %386 = cast(%var_2384, dtype="uint32") /* ty=uint32 */;
  %387 = cast(%var_2385, dtype="uint32") /* ty=Tensor[(12, 14, 12), uint32] */;
  %388 = cast(meta[relay.Constant][25] /* ty=Tensor[(154), uint16] */, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %389 = reshape(%388, newshape=[14, 11, 1]) /* ty=Tensor[(14, 11, 1), uint16] */;
  %390 = @func_181(%389) /* ty=(Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) */;
  %391 = logical_xor(%386, %387) /* ty=Tensor[(12, 14, 12), uint32] */;
  %392 = %390.0;
  (%391, %392, meta[relay.Constant][25] /* ty=Tensor[(154), uint16] */)
}

def @func_6301(%var_6268: Tensor[(4, 8, 12), bool], %var_6269: Tensor[(4, 8, 12), bool]) -> (Tensor[(4, 8, 12), bool], Tensor[(4, 8, 12), uint64]) {
  %393 = cast(%var_6269, dtype="bool") /* ty=Tensor[(4, 8, 12), bool] */;
  %394 = shape_of(%var_6268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%var_6268, dtype="bool") /* ty=Tensor[(4, 8, 12), bool] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %397 = logical_or(%395, %396) /* ty=Tensor[(4, 8, 12), bool] */;
  %398 = cast(%397, dtype="float64") /* ty=Tensor[(4, 8, 12), float64] */;
  %399 = acosh(%398) /* ty=Tensor[(4, 8, 12), float64] */;
  %400 = cast(%var_6269, dtype="bool") /* ty=Tensor[(4, 8, 12), bool] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="bool") /* ty=Tensor[(4, 8, 12), bool] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %404 = cast(%399, dtype="uint64") /* ty=Tensor[(4, 8, 12), uint64] */;
  %405 = shape_of(%var_6269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_6269, dtype="uint64") /* ty=Tensor[(4, 8, 12), uint64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %408 = less_equal(%402, %403) /* ty=Tensor[(4, 8, 12), bool] */;
  %409 = multiply(%406, %407) /* ty=Tensor[(4, 8, 12), uint64] */;
  (%408, %409)
}

def @func_2885() -> (Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) {
  %410 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  %411 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  (%410, %411)
}

def @func_6677(%var_6643: Tensor[(12, 15, 1), float32]) -> (Tensor[(10, 13, 4), uint8], Tensor[(12, 15, ?), bool], Tensor[(13, 14, 9), int8]) {
  %412 = @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */;
  %413 = cast(%var_6643, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
  %414 = tan(%413) /* ty=Tensor[(12, 15, 1), float32] */;
  %415 = cast(%var_6643, dtype="bool") /* ty=Tensor[(12, 15, 1), bool] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="bool") /* ty=Tensor[(12, 15, 1), bool] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %419 = %412.5;
  %420 = less(%417, %418) /* ty=Tensor[(12, 15, ?), bool] */;
  %421 = @func_3755() /* ty=Tensor[(13, 14, 9), int8] */;
  (%419, %420, %421)
}

def @func_1953(%var_1945: Tensor[(11, 4, 1), uint16], %var_1946: Tensor[(11, 4, 1), uint16]) -> Tensor[(11, 4, ?), uint16] {
  %422 = cast(%var_1946, dtype="uint16") /* ty=Tensor[(11, 4, 1), uint16] */;
  %423 = shape_of(%var_1945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%var_1945, dtype="uint16") /* ty=Tensor[(11, 4, 1), uint16] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%424, %425) /* ty=Tensor[(11, 4, ?), uint16] */
}

def @func_3609(%var_3577: Tensor[(44), uint16], %var_3584: uint32) -> (Tensor[(13, 14, 9), int8], Tensor[(11, 4, ?), uint16], Tensor[(44), uint16], Tensor[(14, 11, 1), uint16], uint32, Tensor[(1, 2016), uint32], Tensor[(5, 8, 8), float64], Tensor[(320), float32], Tensor[(13, 14, 9), float32], Tensor[(13, 14, 9), int8], Tensor[(8, 5, 13), uint32], Tensor[(520), uint32]) {
  %426 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %427 = cast(%var_3577, dtype="uint16") /* ty=Tensor[(44), uint16] */;
  %428 = cast(%var_3577, dtype="uint16") /* ty=Tensor[(44), uint16] */;
  %429 = reshape(%427, newshape=[11, 4, 1]) /* ty=Tensor[(11, 4, 1), uint16] */;
  %430 = reshape(%428, newshape=[11, 4, 1]) /* ty=Tensor[(11, 4, 1), uint16] */;
  %431 = cast(%var_3584, dtype="uint32") /* ty=uint32 */;
  %432 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 2016), uint32] */, dtype="uint32") /* ty=Tensor[(1, 2016), uint32] */;
  %433 = reshape(%431, newshape=[]) /* ty=uint32 */;
  %434 = reshape(%432, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), uint32] */;
  %435 = @func_2395(%433, %434) /* ty=(Tensor[(12, 14, 12), uint32], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */;
  %436 = cast(meta[relay.Constant][27] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %437 = cast(meta[relay.Constant][27] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %438 = reshape(%436, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %439 = reshape(%437, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %440 = @func_1015(%438, %439) /* ty=(Tensor[(10, 14, 11), int16], Tensor[(1540), bool], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(5, 8, 8), bool], Tensor[(5, 8, 8), float64]) */;
  %441 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %443 = @func_3107() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %444 = cast(%var_3584, dtype="uint32") /* ty=uint32 */;
  %445 = cast(meta[relay.Constant][28] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %446 = reshape(%444, newshape=[]) /* ty=uint32 */;
  %447 = reshape(%445, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint32] */;
  %448 = %426.0;
  %449 = @func_1953(%429, %430) /* ty=Tensor[(11, 4, ?), uint16] */;
  %450 = %435.1;
  %451 = %440.5;
  %452 = sigmoid(%442) /* ty=Tensor[(13, 14, 9), float32] */;
  %453 = %443.0;
  %454 = @func_1106(%446, %447) /* ty=Tensor[(8, 5, 13), uint32] */;
  (%448, %449, %var_3577, %450, %var_3584, meta[relay.Constant][26] /* ty=Tensor[(1, 2016), uint32] */, %451, meta[relay.Constant][27] /* ty=Tensor[(320), float32] */, %452, %453, %454, meta[relay.Constant][28] /* ty=Tensor[(520), uint32] */)
}

def @func_5302(%var_5285: Tensor[(520), float64]) -> (Tensor[(520), bool], Tensor[(13, 14, 9), int8], Tensor[(286), float64], Tensor[(520), float64]) {
  %455 = @func_4982() /* ty=Tensor[(520), float64] */;
  %456 = cast(%var_5285, dtype="bool") /* ty=Tensor[(520), bool] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(1), int32] */;
  %458 = cast(%455, dtype="bool") /* ty=Tensor[(520), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?), bool] */;
  %460 = cast(meta[relay.Constant][29] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
  %461 = reshape(%460, newshape=[11, 2, 13]) /* ty=Tensor[(11, 2, 13), float64] */;
  %462 = @func_3838(%461) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(11, 2, 13), int32]) */;
  %463 = cast(%var_5285, dtype="float64") /* ty=Tensor[(520), float64] */;
  %464 = not_equal(%458, %459) /* ty=Tensor[(520), bool] */;
  %465 = %462.0;
  %466 = atan(%463) /* ty=Tensor[(520), float64] */;
  (%464, %465, meta[relay.Constant][29] /* ty=Tensor[(286), float64] */, %466)
}

def @func_4982() -> Tensor[(520), float64] {
  %467 = @func_3851() /* ty=Tensor[(520), float32] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(520), float64] */;
  %469 = sinh(%468) /* ty=Tensor[(520), float64] */;
  %470 = cast(%469, dtype="float64") /* ty=Tensor[(520), float64] */;
  log(%470) /* ty=Tensor[(520), float64] */
}

def @func_4786() -> Tensor[(13, 14, 9), int8] {
  @func_3755() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_2955(%var_2944: Tensor[(4), float64], %var_2945: Tensor[(2016), uint32]) -> (Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) {
  %471 = @func_2885() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
  %472 = cast(%var_2944, dtype="float64") /* ty=Tensor[(4), float64] */;
  %473 = cast(%var_2945, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %474 = cast(meta[relay.Constant][30] /* ty=Tensor[(2), int8] */, dtype="int8") /* ty=Tensor[(2), int8] */;
  %475 = reshape(%472, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
  %476 = reshape(%473, newshape=[1008, 2]) /* ty=Tensor[(1008, 2), uint32] */;
  %477 = reshape(%474, newshape=[2, 1]) /* ty=Tensor[(2, 1), int8] */;
  %478 = @func_2833(%475, %476, %477) /* ty=(Tensor[(4, 1, 1), float64], Tensor[(154), uint16], uint32, Tensor[(1008, 2), uint32], Tensor[(12, 14, 12), uint32], Tensor[(2, 12, 8), int8], Tensor[(2, 1), int8], Tensor[(192), int8]) */;
  %479 = %471.1;
  %480 = %478.3;
  (%479, %480, %var_2944, %var_2945, meta[relay.Constant][30] /* ty=Tensor[(2), int8] */)
}

def @func_4821() -> (Tensor[(13, 14, 9), int8], Tensor[(520), float32]) {
  %481 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %482 = %481.0;
  %483 = @func_3851() /* ty=Tensor[(520), float32] */;
  (%482, %483)
}

def @func_6390(%var_6387: Tensor[(1638), int8]) -> (Tensor[(520, 1), float32], Tensor[(13, 14, 9), float32], Tensor[(1638), int8]) {
  %484 = @func_4394() /* ty=(Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(546, 3), float64], Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */;
  %485 = %484.1;
  %486 = cast(%485, dtype="float32") /* ty=Tensor[(520, 1), float32] */;
  %487 = cast(%var_6387, dtype="int8") /* ty=Tensor[(1638), int8] */;
  %488 = exp(%486) /* ty=Tensor[(520, 1), float32] */;
  %489 = cast(%488, dtype="uint8") /* ty=Tensor[(520, 1), uint8] */;
  %490 = reshape(%487, newshape=[13, 14, 9]) /* ty=Tensor[(13, 14, 9), int8] */;
  %491 = reshape(%489, newshape=[520, 1]) /* ty=Tensor[(520, 1), uint8] */;
  %492 = @func_3544(%490, %491) /* ty=(Tensor[(13, 14, 9), float32], Tensor[(10, 13, 4), uint8], Tensor[(520, 1), uint8], Tensor[(14, 11, 1), float32], Tensor[(154), uint16]) */;
  %493 = %492.0;
  (%488, %493, %var_6387)
}

def @func_5688(%var_5685: Tensor[(1, 286), float64]) -> (Tensor[(13, 14, 9), float64], Tensor[(11, 2, 13), int32], Tensor[(1, 286), float64]) {
  %494 = @func_5327() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %495 = %494.0;
  %496 = cast(%495, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
  %497 = acosh(%496) /* ty=Tensor[(13, 14, 9), float64] */;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
  %499 = cast(%var_5685, dtype="float64") /* ty=Tensor[(1, 286), float64] */;
  %500 = reshape(%499, newshape=[11, 2, 13]) /* ty=Tensor[(11, 2, 13), float64] */;
  %501 = @func_3838(%500) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(11, 2, 13), int32]) */;
  %502 = rsqrt(%498) /* ty=Tensor[(13, 14, 9), float64] */;
  %503 = %501.1;
  (%502, %503, %var_5685)
}

def @func_3296() -> Tensor[(13, 14, 9), int8] {
  %504 = @func_2885() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
  %504.1
}

def @func_6969(%var_6956: Tensor[(5, 7, 4), uint32]) -> (Tensor[(5, 7, 4), uint32],) {
  %505 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 7, 4), uint32] */, dtype="uint32") /* ty=Tensor[(5, 7, 4), uint32] */;
  %506 = shape_of(%var_6956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_6956, dtype="uint32") /* ty=Tensor[(5, 7, 4), uint32] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %509 = subtract(%507, %508) /* ty=Tensor[(5, 7, 4), uint32] */;
  (%509,)
}

def @func_2833(%var_2804: Tensor[(4, 1, 1), float64], %var_2810: Tensor[(1008, 2), uint32], %var_2828: Tensor[(2, 1), int8]) -> (Tensor[(4, 1, 1), float64], Tensor[(154), uint16], uint32, Tensor[(1008, 2), uint32], Tensor[(12, 14, 12), uint32], Tensor[(2, 12, 8), int8], Tensor[(2, 1), int8], Tensor[(192), int8]) {
  %510 = cast(%var_2804, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
  %511 = cast(meta[relay.Constant][32] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %512 = cast(%var_2810, dtype="uint32") /* ty=Tensor[(1008, 2), uint32] */;
  %513 = reshape(%511, newshape=[]) /* ty=uint32 */;
  %514 = reshape(%512, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), uint32] */;
  %515 = @func_2395(%513, %514) /* ty=(Tensor[(12, 14, 12), uint32], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */;
  %516 = cast(meta[relay.Constant][32] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %517 = cast(%var_2810, dtype="uint32") /* ty=Tensor[(1008, 2), uint32] */;
  %518 = reshape(%516, newshape=[]) /* ty=uint32 */;
  %519 = reshape(%517, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), uint32] */;
  %520 = @func_2395(%518, %519) /* ty=(Tensor[(12, 14, 12), uint32], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */;
  %521 = cast(%var_2828, dtype="int8") /* ty=Tensor[(2, 1), int8] */;
  %522 = cast(meta[relay.Constant][33] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %523 = reshape(%521, newshape=[2, 1, 1]) /* ty=Tensor[(2, 1, 1), int8] */;
  %524 = reshape(%522, newshape=[2, 12, 8]) /* ty=Tensor[(2, 12, 8), int8] */;
  %525 = asinh(%510) /* ty=Tensor[(4, 1, 1), float64] */;
  %526 = %515.2;
  %527 = %520.0;
  %528 = @func_2622(%523, %524) /* ty=Tensor[(2, 12, 8), int8] */;
  (%525, %526, meta[relay.Constant][32] /* ty=uint32 */, %var_2810, %527, %528, %var_2828, meta[relay.Constant][33] /* ty=Tensor[(192), int8] */)
}

def @func_4643(%var_4490: bool, %var_4491: Tensor[(3, 11, 11), bool]) -> (Tensor[(3, 11, 11), bool], Tensor[(13, 14, 9), int8], Tensor[(16, 12, 4), bool]) {
  %529 = cast(%var_4490, dtype="bool") /* ty=bool */;
  %530 = cast(%var_4491, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %531 = cast(meta[relay.Constant][34] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %532 = cast(meta[relay.Constant][34] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %533 = reshape(%531, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %534 = reshape(%532, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %535 = @func_113(%533, %534) /* ty=(Tensor[(16, 12, 4), float64],) */;
  %536 = %535.0;
  %537 = cast(meta[relay.Constant][34] /* ty=Tensor[(768), float64] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%536, dtype="bool") /* ty=Tensor[(16, 12, 4), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %541 = logical_and(%529, %530) /* ty=Tensor[(3, 11, 11), bool] */;
  %542 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
  %543 = not_equal(%539, %540) /* ty=Tensor[(16, 12, 4), bool] */;
  (%541, %542, %543)
}

def @func_6809() -> Tensor[(13, 14, 9), bool] {
  @func_6444() /* ty=Tensor[(13, 14, 9), bool] */
}

def @func_292(%var_282: Tensor[(10, 13, 4), uint8]) -> (Tensor[(10, 13, 4), uint8],) {
  %544 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 13, 4), uint8] */, dtype="uint8") /* ty=Tensor[(10, 13, 4), uint8] */;
  %545 = shape_of(%var_282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%var_282, dtype="uint8") /* ty=Tensor[(10, 13, 4), uint8] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %548 = right_shift(%546, %547) /* ty=Tensor[(10, 13, 4), uint8] */;
  (%548,)
}

def @func_3081() -> (Tensor[(520), float32],) {
  %549 = @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */;
  %550 = %549.2;
  (%550,)
}

def @func_6001(%var_5987: Tensor[(432, 1), float32]) -> (Tensor[(10, 13, 4), uint8], Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(432, 490), bool]) {
  %551 = @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */;
  %552 = cast(meta[relay.Constant][36] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %553 = cast(meta[relay.Constant][36] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %554 = %551.1;
  %555 = cast(%554, dtype="uint8") /* ty=Tensor[(10, 13, 4), uint8] */;
  %556 = reshape(%552, newshape=[14, 7, 5]) /* ty=Tensor[(14, 7, 5), float32] */;
  %557 = reshape(%553, newshape=[14, 7, 5]) /* ty=Tensor[(14, 7, 5), float32] */;
  %558 = reshape(%555, newshape=[10, 52]) /* ty=Tensor[(10, 52), uint8] */;
  %559 = @func_1907(%556, %557, %558) /* ty=(Tensor[(14, 7, 5), float32], Tensor[(10, 13, 4), uint8], Tensor[(10, 52), uint8]) */;
  %560 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %561 = @func_3107() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %562 = cast(%var_5987, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
  %563 = cast(%var_5987, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
  %564 = reshape(%562, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), float32] */;
  %565 = reshape(%563, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), float32] */;
  %566 = @func_3646(%564, %565) /* ty=(Tensor[(6, 12, 6), float32], Tensor[(13, 14, 9), int8]) */;
  %567 = cast(meta[relay.Constant][36] /* ty=Tensor[(490), float32] */, dtype="bool") /* ty=Tensor[(490), bool] */;
  %568 = cast(%var_5987, dtype="bool") /* ty=Tensor[(432, 1), bool] */;
  %569 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
  %570 = %559.1;
  %571 = %560.0;
  %572 = @func_3859() /* ty=Tensor[(13, 14, 9), int8] */;
  %573 = %561.0;
  %574 = %566.1;
  %575 = less_equal(%567, %568) /* ty=Tensor[(432, 490), bool] */;
  (%554, %569, %570, %571, %572, %573, %574, %575)
}

def @func_3316() -> (Tensor[(13, 14, 9), int8],) {
  %576 = @func_3107() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %577 = %576.0;
  (%577,)
}

def @func_6119() -> (Tensor[(520), float32],) {
  %578 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %579 = %578.0;
  (%579,)
}

def @func_7141(%var_7120: bool, %var_7121: Tensor[(363), bool]) -> (Tensor[(520), float32], Tensor[(16, 12, 4), bool], bool, Tensor[(363), bool], Tensor[(14, 11, ?), float64], Tensor[(13, 14, 9), int8], Tensor[(1, 4), float64], Tensor[(2016), uint32]) {
  %580 = @func_6051() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool], Tensor[(520), float32]) */;
  %581 = %580.2;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(520), float32] */;
  %583 = cast(%var_7120, dtype="bool") /* ty=bool */;
  %584 = cast(%var_7121, dtype="bool") /* ty=Tensor[(363), bool] */;
  %585 = reshape(%583, newshape=[]) /* ty=bool */;
  %586 = reshape(%584, newshape=[3, 11, 11]) /* ty=Tensor[(3, 11, 11), bool] */;
  %587 = @func_4643(%585, %586) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(13, 14, 9), int8], Tensor[(16, 12, 4), bool]) */;
  %588 = @func_6717() /* ty=(Tensor[(14, 11, ?), bool], Tensor[(14, 11, 1), float32]) */;
  %589 = %588.0;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(14, 11, ?), float64] */;
  %591 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 4), float64] */;
  %592 = cast(meta[relay.Constant][38] /* ty=Tensor[(2016), uint32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %593 = reshape(%591, newshape=[4]) /* ty=Tensor[(4), float64] */;
  %594 = reshape(%592, newshape=[2016]) /* ty=Tensor[(2016), uint32] */;
  %595 = @func_2955(%593, %594) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */;
  %596 = atanh(%582) /* ty=Tensor[(520), float32] */;
  %597 = %587.2;
  %598 = sin(%590) /* ty=Tensor[(14, 11, ?), float64] */;
  %599 = %595.0;
  (%596, %597, %var_7120, %var_7121, %598, %599, meta[relay.Constant][37] /* ty=Tensor[(1, 4), float64] */, meta[relay.Constant][38] /* ty=Tensor[(2016), uint32] */)
}

def @main(%var_7339: Tensor[(520), float32]) -> (Tensor[(4), float64], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(520), float64]) {
  %600 = cast(meta[relay.Constant][39] /* ty=Tensor[(4), float64] */, dtype="float64") /* ty=Tensor[(4), float64] */;
  %601 = cast(meta[relay.Constant][40] /* ty=Tensor[(2016), uint32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %602 = reshape(%600, newshape=[4]) /* ty=Tensor[(4), float64] */;
  %603 = reshape(%601, newshape=[2016]) /* ty=Tensor[(2016), uint32] */;
  %604 = @func_2955(%602, %603) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */;
  %605 = @func_4283() /* ty=(Tensor[(520), float32], Tensor[(13, 14, 9), int8], Tensor[(520, 1), uint8]) */;
  %606 = %605.0;
  %607 = cast(%var_7339, dtype="float64") /* ty=Tensor[(520), float64] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(1), int32] */;
  %609 = cast(%606, dtype="float64") /* ty=Tensor[(520), float64] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?), float64] */;
  %611 = %604.2;
  %612 = floor_mod(%609, %610) /* ty=Tensor[(520), float64] */;
  (%611, meta[relay.Constant][39] /* ty=Tensor[(4), float64] */, meta[relay.Constant][40] /* ty=Tensor[(2016), uint32] */, %612)
}

def @func_113(%var_108: Tensor[(16, 12, 4), float64], %var_109: Tensor[(16, 12, 4), float64]) -> (Tensor[(16, 12, 4), float64],) {
  %613 = cast(%var_109, dtype="float64") /* ty=Tensor[(16, 12, 4), float64] */;
  %614 = shape_of(%var_108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_108, dtype="float64") /* ty=Tensor[(16, 12, 4), float64] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %617 = mod(%615, %616) /* ty=Tensor[(16, 12, 4), float64] */;
  (%617,)
}

def @func_5579(%var_5535: Tensor[(15, 11, 2), float64], %var_5567: Tensor[(768), float64]) -> (Tensor[(15, 11, 2), float32], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(10, 14, 11), int16], Tensor[(1540), bool]) {
  %618 = cast(%var_5535, dtype="float64") /* ty=Tensor[(15, 11, 2), float64] */;
  %619 = log10(%618) /* ty=Tensor[(15, 11, 2), float64] */;
  %620 = cast(%var_5535, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %624 = cast(%var_5567, dtype="float64") /* ty=Tensor[(768), float64] */;
  %625 = cast(%var_5567, dtype="float64") /* ty=Tensor[(768), float64] */;
  %626 = reshape(%624, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %627 = reshape(%625, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %628 = @func_113(%626, %627) /* ty=(Tensor[(16, 12, 4), float64],) */;
  %629 = cast(meta[relay.Constant][41] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %630 = cast(meta[relay.Constant][41] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %631 = cast(meta[relay.Constant][41] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %632 = reshape(%629, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
  %633 = reshape(%630, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
  %634 = reshape(%631, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
  %635 = divide(%622, %623) /* ty=Tensor[(15, 11, 2), float32] */;
  %636 = %628.0;
  %637 = @func_664(%632, %633, %634) /* ty=Tensor[(10, 14, 11), int16] */;
  (%635, %636, %var_5567, %637, meta[relay.Constant][41] /* ty=Tensor[(1540), bool] */)
}

def @func_4337(%var_4323: Tensor[(520), float32]) -> (Tensor[(520), bool], Tensor[(520), bool]) {
  %638 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %639 = %638.0;
  %640 = cast(%var_4323, dtype="bool") /* ty=Tensor[(520), bool] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(1), int32] */;
  %642 = cast(%639, dtype="bool") /* ty=Tensor[(520), bool] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?), bool] */;
  %644 = @func_3890() /* ty=(Tensor[(520), bool],) */;
  %645 = less_equal(%642, %643) /* ty=Tensor[(520), bool] */;
  %646 = %644.0;
  (%645, %646)
}

def @func_6444() -> Tensor[(13, 14, 9), bool] {
  %647 = @func_4786() /* ty=Tensor[(13, 14, 9), int8] */;
  %648 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 14, 9), int8] */, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%650, %651) /* ty=Tensor[(13, 14, 9), bool] */
}

def @func_2622(%var_2614: Tensor[(2, 1, 1), int8], %var_2615: Tensor[(2, 12, 8), int8]) -> Tensor[(2, 12, 8), int8] {
  %652 = cast(%var_2614, dtype="int8") /* ty=Tensor[(2, 1, 1), int8] */;
  %653 = cast(%var_2615, dtype="int8") /* ty=Tensor[(2, 12, 8), int8] */;
  maximum(%652, %653) /* ty=Tensor[(2, 12, 8), int8] */
}

def @func_3890() -> (Tensor[(520), bool],) {
  %654 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %655 = %654.0;
  %656 = cast(meta[relay.Constant][43] /* ty=Tensor[(520), float32] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(1), int32] */;
  %658 = cast(%655, dtype="bool") /* ty=Tensor[(520), bool] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?), bool] */;
  %660 = equal(%658, %659) /* ty=Tensor[(520), bool] */;
  (%660,)
}

def @func_4727() -> (Tensor[(14, 11, ?), int32],) {
  %661 = @func_4394() /* ty=(Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(546, 3), float64], Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */;
  %662 = %661.6;
  %663 = cast(%662, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
  %664 = tan(%663) /* ty=Tensor[(14, 11, 1), float64] */;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
  %666 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%662, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %669 = power(%667, %668) /* ty=Tensor[(14, 11, ?), float64] */;
  %670 = cast(%662, dtype="int32") /* ty=Tensor[(14, 11, 1), int32] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%669, dtype="int32") /* ty=Tensor[(14, 11, ?), int32] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %674 = subtract(%672, %673) /* ty=Tensor[(14, 11, ?), int32] */;
  (%674,)
}

def @func_7065(%var_7045: Tensor[(1540), bool]) -> (Tensor[(13, 14, 9), int8], Tensor[(1540), bool], Tensor[(10, 14, 11), float64]) {
  %675 = @func_5218() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), float32]) */;
  %676 = cast(%var_7045, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %677 = cast(%var_7045, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %678 = cast(%var_7045, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %679 = reshape(%676, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
  %680 = reshape(%677, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
  %681 = reshape(%678, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
  %682 = @func_664(%679, %680, %681) /* ty=Tensor[(10, 14, 11), int16] */;
  %683 = cast(%682, dtype="float64") /* ty=Tensor[(10, 14, 11), float64] */;
  %684 = %675.0;
  %685 = rsqrt(%683) /* ty=Tensor[(10, 14, 11), float64] */;
  (%684, %var_7045, %685)
}

def @func_6209(%var_6185: Tensor[(13, 14, 9), int8], %var_6199: Tensor[(4), float64], %var_6200: Tensor[(2016), uint32]) -> (Tensor[(13, 14, 9), int32], Tensor[(4), float64], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2016), uint32], Tensor[(13, 14, 9), int8]) {
  %686 = @func_4786() /* ty=Tensor[(13, 14, 9), int8] */;
  %687 = cast(%var_6185, dtype="int32") /* ty=Tensor[(13, 14, 9), int32] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="int32") /* ty=Tensor[(13, 14, 9), int32] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %691 = cast(%var_6199, dtype="float64") /* ty=Tensor[(4), float64] */;
  %692 = cast(%var_6200, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %693 = reshape(%691, newshape=[4]) /* ty=Tensor[(4), float64] */;
  %694 = reshape(%692, newshape=[2016]) /* ty=Tensor[(2016), uint32] */;
  %695 = @func_2955(%693, %694) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */;
  %696 = cast(%var_6199, dtype="float64") /* ty=Tensor[(4), float64] */;
  %697 = cast(%var_6200, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %698 = reshape(%696, newshape=[4]) /* ty=Tensor[(4), float64] */;
  %699 = reshape(%697, newshape=[2016]) /* ty=Tensor[(2016), uint32] */;
  %700 = @func_2955(%698, %699) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */;
  %701 = @func_5327() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %702 = right_shift(%689, %690) /* ty=Tensor[(13, 14, 9), int32] */;
  %703 = %695.2;
  %704 = %700.3;
  %705 = %701.0;
  (%702, %703, %var_6199, %var_6200, %704, %705)
}

def @func_5103(%var_5022: float32, %var_5076: Tensor[(2), int8]) -> (Tensor[(520), float64], Tensor[(15, 15, 9), bool], Tensor[(7, 3, 14), bool], Tensor[(2, 12, 8), int8], Tensor[(2), int8], Tensor[(192), int8], Tensor[(2), int8], Tensor[(4), float64], Tensor[(2016), uint32]) {
  %706 = cast(%var_5022, dtype="bool") /* ty=bool */;
  %707 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 15, 9), float32] */, dtype="bool") /* ty=Tensor[(15, 15, 9), bool] */;
  %708 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 3, 14), float32] */, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %709 = sin(%708) /* ty=Tensor[(7, 3, 14), float64] */;
  %710 = cast(%var_5022, dtype="float32") /* ty=float32 */;
  %711 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  %712 = floor_mod(%710, %711) /* ty=Tensor[(7, 3, 14), float32] */;
  %713 = cast(%712, dtype="int32") /* ty=Tensor[(7, 3, 14), int32] */;
  %714 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(7, 3, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 3, 14), float32] */, dtype="int32") /* ty=Tensor[(7, 3, 14), int32] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %717 = bitwise_xor(%715, %716) /* ty=Tensor[(7, 3, 14), int32] */;
  %718 = cast(%717, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
  %719 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%709, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %722 = cast(%var_5076, dtype="int8") /* ty=Tensor[(2), int8] */;
  %723 = cast(meta[relay.Constant][46] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %724 = reshape(%722, newshape=[2, 1, 1]) /* ty=Tensor[(2, 1, 1), int8] */;
  %725 = reshape(%723, newshape=[2, 12, 8]) /* ty=Tensor[(2, 12, 8), int8] */;
  %726 = cast(meta[relay.Constant][47] /* ty=Tensor[(4), float64] */, dtype="float64") /* ty=Tensor[(4), float64] */;
  %727 = cast(meta[relay.Constant][48] /* ty=Tensor[(2016), uint32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %728 = reshape(%726, newshape=[4]) /* ty=Tensor[(4), float64] */;
  %729 = reshape(%727, newshape=[2016]) /* ty=Tensor[(2016), uint32] */;
  %730 = @func_2955(%728, %729) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */;
  %731 = @func_4982() /* ty=Tensor[(520), float64] */;
  %732 = greater(%706, %707) /* ty=Tensor[(15, 15, 9), bool] */;
  %733 = logical_and(%720, %721) /* ty=Tensor[(7, 3, 14), bool] */;
  %734 = @func_2622(%724, %725) /* ty=Tensor[(2, 12, 8), int8] */;
  %735 = %730.4;
  (%731, %732, %733, %734, %var_5076, meta[relay.Constant][46] /* ty=Tensor[(192), int8] */, %735, meta[relay.Constant][47] /* ty=Tensor[(4), float64] */, meta[relay.Constant][48] /* ty=Tensor[(2016), uint32] */)
}

def @func_3851() -> Tensor[(520), float32] {
  %736 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %736.0
}

def @func_5778(%var_5760: Tensor[(14, 9, 11), float32]) -> (Tensor[(14, 9, 11), float32], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) {
  %737 = cast(%var_5760, dtype="float32") /* ty=Tensor[(14, 9, 11), float32] */;
  %738 = @func_4463() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool]) */;
  %739 = log10(%737) /* ty=Tensor[(14, 9, 11), float32] */;
  %740 = @func_3859() /* ty=Tensor[(13, 14, 9), int8] */;
  %741 = %738.0;
  (%739, %740, %741)
}

def @func_5327() -> (Tensor[(13, 14, 9), int8],) {
  %742 = @func_3493() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(65), float64], Tensor[(16, 12, 4), float64], Tensor[(126, 1), int32], Tensor[(768), float64], Tensor[(14, 13, 5), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
  %743 = %742.6;
  (%743,)
}

def @func_5373() -> Tensor[(13, 14, 9), uint64] {
  %744 = @func_5218() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), float32]) */;
  %745 = %744.0;
  %746 = @func_5327() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %747 = %746.0;
  %748 = cast(%747, dtype="uint64") /* ty=Tensor[(13, 14, 9), uint64] */;
  %749 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%745, dtype="uint64") /* ty=Tensor[(13, 14, 9), uint64] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%750, %751) /* ty=Tensor[(13, 14, 9), uint64] */
}

def @func_3051(%var_3045: Tensor[(1, 13, 5), float64]) -> Tensor[(14, 13, 5), float64] {
  %752 = cast(%var_3045, dtype="float64") /* ty=Tensor[(1, 13, 5), float64] */;
  %753 = cast(meta[relay.Constant][49] /* ty=Tensor[(14, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 5), float64] */;
  power(%752, %753) /* ty=Tensor[(14, 13, 5), float64] */
}

def @func_664(%var_647: Tensor[(10, 14, 11), bool], %var_648: Tensor[(10, 14, 11), bool], %var_654: Tensor[(10, 14, 11), bool]) -> Tensor[(10, 14, 11), int16] {
  %754 = cast(%var_648, dtype="bool") /* ty=Tensor[(10, 14, 11), bool] */;
  %755 = shape_of(%var_647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%var_647, dtype="bool") /* ty=Tensor[(10, 14, 11), bool] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %758 = logical_and(%756, %757) /* ty=Tensor[(10, 14, 11), bool] */;
  %759 = cast(%var_654, dtype="int16") /* ty=Tensor[(10, 14, 11), int16] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="int16") /* ty=Tensor[(10, 14, 11), int16] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%761, %762) /* ty=Tensor[(10, 14, 11), int16] */
}

def @func_905(%var_882: Tensor[(14, 3, 3), int32], %var_883: Tensor[(14, 3, 3), int32], %var_892: Tensor[(2, 384), float64]) -> (Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) {
  %763 = cast(%var_883, dtype="int32") /* ty=Tensor[(14, 3, 3), int32] */;
  %764 = shape_of(%var_882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%var_882, dtype="int32") /* ty=Tensor[(14, 3, 3), int32] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %767 = cast(%var_892, dtype="float64") /* ty=Tensor[(2, 384), float64] */;
  %768 = cast(%var_892, dtype="float64") /* ty=Tensor[(2, 384), float64] */;
  %769 = reshape(%767, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %770 = reshape(%768, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %771 = @func_113(%769, %770) /* ty=(Tensor[(16, 12, 4), float64],) */;
  %772 = cast(meta[relay.Constant][50] /* ty=Tensor[(520), uint8] */, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %773 = reshape(%772, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), uint8] */;
  %774 = @func_292(%773) /* ty=(Tensor[(10, 13, 4), uint8],) */;
  %775 = right_shift(%765, %766) /* ty=Tensor[(14, 3, 3), int32] */;
  %776 = %771.0;
  %777 = %774.0;
  (%775, %776, %var_892, %777, meta[relay.Constant][50] /* ty=Tensor[(520), uint8] */)
}

def @func_6260() -> Tensor[(13, 14, 9), int8] {
  %778 = @func_6051() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool], Tensor[(520), float32]) */;
  %778.0
}

def @func_4283() -> (Tensor[(520), float32], Tensor[(13, 14, 9), int8], Tensor[(520, 1), uint8]) {
  %779 = @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */;
  %780 = %779.8;
  %781 = cast(%780, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  %782 = @func_3851() /* ty=Tensor[(520), float32] */;
  %783 = cast(%782, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %784 = reshape(%781, newshape=[13, 14, 9]) /* ty=Tensor[(13, 14, 9), int8] */;
  %785 = reshape(%783, newshape=[520, 1]) /* ty=Tensor[(520, 1), uint8] */;
  %786 = @func_3544(%784, %785) /* ty=(Tensor[(13, 14, 9), float32], Tensor[(10, 13, 4), uint8], Tensor[(520, 1), uint8], Tensor[(14, 11, 1), float32], Tensor[(154), uint16]) */;
  %787 = %786.2;
  (%782, %780, %787)
}

def @func_6641() -> (Tensor[(520), float32], Tensor[(520, 1), float32], Tensor[(1638), int8]) {
  %788 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %789 = cast(meta[relay.Constant][51] /* ty=Tensor[(1638), int8] */, dtype="int8") /* ty=Tensor[(1638), int8] */;
  %790 = reshape(%789, newshape=[1638]) /* ty=Tensor[(1638), int8] */;
  %791 = @func_6390(%790) /* ty=(Tensor[(520, 1), float32], Tensor[(13, 14, 9), float32], Tensor[(1638), int8]) */;
  %792 = %788.0;
  %793 = %791.0;
  (%792, %793, meta[relay.Constant][51] /* ty=Tensor[(1638), int8] */)
}

def @func_4463() -> (Tensor[(13, 14, 9), int8], Tensor[(520), bool]) {
  %794 = @func_4283() /* ty=(Tensor[(520), float32], Tensor[(13, 14, 9), int8], Tensor[(520, 1), uint8]) */;
  %795 = %794.0;
  %796 = cast(meta[relay.Constant][52] /* ty=Tensor[(520), float32] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(1), int32] */;
  %798 = cast(%795, dtype="bool") /* ty=Tensor[(520), bool] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?), bool] */;
  %800 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
  %801 = logical_and(%798, %799) /* ty=Tensor[(520), bool] */;
  (%800, %801)
}

def @func_5615() -> (Tensor[(520), float32],) {
  %802 = @func_4982() /* ty=Tensor[(520), float64] */;
  %803 = cast(%802, dtype="float32") /* ty=Tensor[(520), float32] */;
  %804 = acosh(%803) /* ty=Tensor[(520), float32] */;
  (%804,)
}

def @func_5856(%var_5832: uint32) -> (Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, ?), int32], Tensor[(240), float64], uint32, Tensor[(11, 4, ?), uint16], Tensor[(44), uint16], Tensor[(8, 5, 13), float64]) {
  %805 = @func_4727() /* ty=(Tensor[(14, 11, ?), int32],) */;
  %806 = cast(meta[relay.Constant][54] /* ty=Tensor[(44), uint16] */, dtype="uint16") /* ty=Tensor[(44), uint16] */;
  %807 = cast(meta[relay.Constant][54] /* ty=Tensor[(44), uint16] */, dtype="uint16") /* ty=Tensor[(44), uint16] */;
  %808 = reshape(%806, newshape=[11, 4, 1]) /* ty=Tensor[(11, 4, 1), uint16] */;
  %809 = reshape(%807, newshape=[11, 4, 1]) /* ty=Tensor[(11, 4, 1), uint16] */;
  %810 = cast(meta[relay.Constant][53] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %811 = cast(%var_5832, dtype="uint32") /* ty=uint32 */;
  %812 = reshape(%810, newshape=[8, 5, 6]) /* ty=Tensor[(8, 5, 6), float64] */;
  %813 = reshape(%811, newshape=[]) /* ty=uint32 */;
  %814 = @func_1676(%812, %813) /* ty=(Tensor[(8, 5, 6), float32], Tensor[(8, 5, 6), float32], Tensor[(8, 5, 13), uint32], uint32, Tensor[(520), uint32], Tensor[(520), uint8], Tensor[(126), int32], Tensor[(768), float64]) */;
  %815 = %814.2;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(8, 5, 13), float64] */;
  %817 = sigmoid(%816) /* ty=Tensor[(8, 5, 13), float64] */;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(8, 5, 13), float64] */;
  %819 = log10(%818) /* ty=Tensor[(8, 5, 13), float64] */;
  %820 = cast(%819, dtype="float64") /* ty=Tensor[(8, 5, 13), float64] */;
  %821 = @func_3755() /* ty=Tensor[(13, 14, 9), int8] */;
  %822 = @func_5176() /* ty=Tensor[(13, 14, 9), int8] */;
  %823 = %805.0;
  %824 = @func_1953(%808, %809) /* ty=Tensor[(11, 4, ?), uint16] */;
  %825 = erf(%820) /* ty=Tensor[(8, 5, 13), float64] */;
  (%821, %822, %823, meta[relay.Constant][53] /* ty=Tensor[(240), float64] */, %var_5832, %824, meta[relay.Constant][54] /* ty=Tensor[(44), uint16] */, %825)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_181(%var_173: Tensor[(14, 11, 1), uint16]) -> (Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1 = cast(%var_173, dtype="uint16") /* ty=Tensor[(14, 11, 1), uint16] */;
  %2 = cast(%var_173, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
  %3 = maximum(%0, %1) /* ty=Tensor[(14, 11, 1), uint16] */;
  %4 = acos(%2) /* ty=Tensor[(14, 11, 1), float32] */;
  (%3, %4)
}

def @func_4786() -> Tensor[(13, 14, 9), int8] {
  @func_3755() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_6811() -> Tensor[(13, 14, 9), bool] {
  @func_6809() /* ty=Tensor[(13, 14, 9), bool] */
}

def @func_2838(%var_2835: Tensor[(4, 1, 1), float64], %var_2836: Tensor[(1008, 2), uint32], %var_2837: Tensor[(2, 1), int8]) -> (Tensor[(4, 1, 1), float64], Tensor[(154), uint16], uint32, Tensor[(1008, 2), uint32], Tensor[(12, 14, 12), uint32], Tensor[(2, 12, 8), int8], Tensor[(2, 1), int8], Tensor[(192), int8]) {
  @func_2833(%var_2835, %var_2836, %var_2837) /* ty=(Tensor[(4, 1, 1), float64], Tensor[(154), uint16], uint32, Tensor[(1008, 2), uint32], Tensor[(12, 14, 12), uint32], Tensor[(2, 12, 8), int8], Tensor[(2, 1), int8], Tensor[(192), int8]) */
}

def @func_3081() -> (Tensor[(520), float32],) {
  %5 = @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */;
  %6 = %5.2;
  (%6,)
}

def @func_3649(%var_3647: Tensor[(6, 12, 6), float32], %var_3648: Tensor[(6, 12, 6), float32]) -> (Tensor[(6, 12, 6), float32], Tensor[(13, 14, 9), int8]) {
  %14 = fn (%var_3627: Tensor[(6, 12, 6), float32], %var_3628: Tensor[(6, 12, 6), float32]) -> (Tensor[(6, 12, 6), float32], Tensor[(13, 14, 9), int8]) {
    %7 = cast(%var_3628, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
    %8 = shape_of(%var_3627, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%var_3627, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %11 = @func_3107() /* ty=(Tensor[(13, 14, 9), int8],) */;
    %12 = mod(%9, %10) /* ty=Tensor[(6, 12, 6), float32] */;
    %13 = %11.0;
    (%12, %13)
  };
  %14(%var_3647, %var_3648) /* ty=(Tensor[(6, 12, 6), float32], Tensor[(13, 14, 9), int8]) */
}

def @func_6390(%var_6387: Tensor[(1638), int8]) -> (Tensor[(520, 1), float32], Tensor[(13, 14, 9), float32], Tensor[(1638), int8]) {
  %15 = @func_4394() /* ty=(Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(546, 3), float64], Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */;
  %16 = %15.1;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(520, 1), float32] */;
  %18 = cast(%var_6387, dtype="int8") /* ty=Tensor[(1638), int8] */;
  %19 = exp(%17) /* ty=Tensor[(520, 1), float32] */;
  %20 = cast(%19, dtype="uint8") /* ty=Tensor[(520, 1), uint8] */;
  %21 = reshape(%18, newshape=[13, 14, 9]) /* ty=Tensor[(13, 14, 9), int8] */;
  %22 = reshape(%20, newshape=[520, 1]) /* ty=Tensor[(520, 1), uint8] */;
  %23 = @func_3544(%21, %22) /* ty=(Tensor[(13, 14, 9), float32], Tensor[(10, 13, 4), uint8], Tensor[(520, 1), uint8], Tensor[(14, 11, 1), float32], Tensor[(154), uint16]) */;
  %24 = %23.0;
  (%19, %24, %var_6387)
}

def @func_2929() -> (Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) {
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(520), uint8] */, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %26 = reshape(%25, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), uint8] */;
  %27 = @func_292(%26) /* ty=(Tensor[(10, 13, 4), uint8],) */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(520), uint8] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %31 = reshape(%29, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %32 = reshape(%30, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %33 = @func_1015(%31, %32) /* ty=(Tensor[(10, 14, 11), int16], Tensor[(1540), bool], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(5, 8, 8), bool], Tensor[(5, 8, 8), float64]) */;
  %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %36 = cast(meta[relay.Constant][4] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %37 = reshape(%34, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %38 = reshape(%35, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %39 = reshape(%36, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %40 = @func_905(%37, %38, %39) /* ty=(Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) */;
  %41 = @func_2885() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
  %42 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  %43 = %27.0;
  %44 = sin(%28) /* ty=Tensor[(520), float32] */;
  %45 = %33.4;
  %46 = %40.3;
  %47 = %41.0;
  (%42, %43, %44, %45, meta[relay.Constant][2] /* ty=Tensor[(320), float32] */, %46, meta[relay.Constant][3] /* ty=Tensor[(126), int32] */, meta[relay.Constant][4] /* ty=Tensor[(768), float64] */, %47)
}

def @func_5858(%var_5857: uint32) -> (Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, ?), int32], Tensor[(240), float64], uint32, Tensor[(11, 4, ?), uint16], Tensor[(44), uint16], Tensor[(8, 5, 13), float64]) {
  %69 = fn (%var_5832: uint32) -> (Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, ?), int32], Tensor[(240), float64], uint32, Tensor[(11, 4, ?), uint16], Tensor[(44), uint16], Tensor[(8, 5, 13), float64]) {
    %48 = @func_4727() /* ty=(Tensor[(14, 11, ?), int32],) */;
    %49 = cast(meta[relay.Constant][6] /* ty=Tensor[(44), uint16] */, dtype="uint16") /* ty=Tensor[(44), uint16] */;
    %50 = cast(meta[relay.Constant][6] /* ty=Tensor[(44), uint16] */, dtype="uint16") /* ty=Tensor[(44), uint16] */;
    %51 = reshape(%49, newshape=[11, 4, 1]) /* ty=Tensor[(11, 4, 1), uint16] */;
    %52 = reshape(%50, newshape=[11, 4, 1]) /* ty=Tensor[(11, 4, 1), uint16] */;
    %53 = cast(meta[relay.Constant][5] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %54 = cast(%var_5832, dtype="uint32") /* ty=uint32 */;
    %55 = reshape(%53, newshape=[8, 5, 6]) /* ty=Tensor[(8, 5, 6), float64] */;
    %56 = reshape(%54, newshape=[]) /* ty=uint32 */;
    %57 = @func_1676(%55, %56) /* ty=(Tensor[(8, 5, 6), float32], Tensor[(8, 5, 6), float32], Tensor[(8, 5, 13), uint32], uint32, Tensor[(520), uint32], Tensor[(520), uint8], Tensor[(126), int32], Tensor[(768), float64]) */;
    %58 = %57.2;
    %59 = cast(%58, dtype="float64") /* ty=Tensor[(8, 5, 13), float64] */;
    %60 = sigmoid(%59) /* ty=Tensor[(8, 5, 13), float64] */;
    %61 = cast(%60, dtype="float64") /* ty=Tensor[(8, 5, 13), float64] */;
    %62 = log10(%61) /* ty=Tensor[(8, 5, 13), float64] */;
    %63 = cast(%62, dtype="float64") /* ty=Tensor[(8, 5, 13), float64] */;
    %64 = @func_3755() /* ty=Tensor[(13, 14, 9), int8] */;
    %65 = @func_5176() /* ty=Tensor[(13, 14, 9), int8] */;
    %66 = %48.0;
    %67 = @func_1953(%51, %52) /* ty=Tensor[(11, 4, ?), uint16] */;
    %68 = erf(%63) /* ty=Tensor[(8, 5, 13), float64] */;
    (%64, %65, %66, meta[relay.Constant][5] /* ty=Tensor[(240), float64] */, %var_5832, %67, meta[relay.Constant][6] /* ty=Tensor[(44), uint16] */, %68)
  };
  %69(%var_5857) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, ?), int32], Tensor[(240), float64], uint32, Tensor[(11, 4, ?), uint16], Tensor[(44), uint16], Tensor[(8, 5, 13), float64]) */
}

def @func_5897() -> (Tensor[(13, 14, 9), int8],) {
  %71 = fn () -> (Tensor[(13, 14, 9), int8],) {
    %70 = @func_3755() /* ty=Tensor[(13, 14, 9), int8] */;
    (%70,)
  };
  %71() /* ty=(Tensor[(13, 14, 9), int8],) */
}

def @func_3229(%var_3225: Tensor[(126), int32], %var_3226: Tensor[(2, 384), float64], %var_3227: Tensor[(13, 5), float64], %var_3228: Tensor[(14, 13, 5), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(2, 384), float64], Tensor[(13, 5), float64], Tensor[(14, 13, 5), int8]) {
  @func_3223(%var_3225, %var_3226, %var_3227, %var_3228) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(2, 384), float64], Tensor[(13, 5), float64], Tensor[(14, 13, 5), int8]) */
}

def @func_2958(%var_2956: Tensor[(4), float64], %var_2957: Tensor[(2016), uint32]) -> (Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) {
  %82 = fn (%var_2944: Tensor[(4), float64], %var_2945: Tensor[(2016), uint32]) -> (Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) {
    %72 = @func_2885() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
    %73 = cast(%var_2944, dtype="float64") /* ty=Tensor[(4), float64] */;
    %74 = cast(%var_2945, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
    %75 = cast(meta[relay.Constant][7] /* ty=Tensor[(2), int8] */, dtype="int8") /* ty=Tensor[(2), int8] */;
    %76 = reshape(%73, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float64] */;
    %77 = reshape(%74, newshape=[1008, 2]) /* ty=Tensor[(1008, 2), uint32] */;
    %78 = reshape(%75, newshape=[2, 1]) /* ty=Tensor[(2, 1), int8] */;
    %79 = @func_2833(%76, %77, %78) /* ty=(Tensor[(4, 1, 1), float64], Tensor[(154), uint16], uint32, Tensor[(1008, 2), uint32], Tensor[(12, 14, 12), uint32], Tensor[(2, 12, 8), int8], Tensor[(2, 1), int8], Tensor[(192), int8]) */;
    %80 = %72.1;
    %81 = %79.3;
    (%80, %81, %var_2944, %var_2945, meta[relay.Constant][7] /* ty=Tensor[(2), int8] */)
  };
  %82(%var_2956, %var_2957) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */
}

def @func_4395() -> (Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(546, 3), float64], Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) {
  %102 = fn () -> (Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(546, 3), float64], Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) {
    %83 = @func_3890() /* ty=(Tensor[(520), bool],) */;
    %84 = cast(meta[relay.Constant][8] /* ty=Tensor[(546, 3), int8] */, dtype="int8") /* ty=Tensor[(546, 3), int8] */;
    %85 = %83.0;
    %86 = cast(%85, dtype="uint8") /* ty=Tensor[(520), uint8] */;
    %87 = reshape(%84, newshape=[13, 14, 9]) /* ty=Tensor[(13, 14, 9), int8] */;
    %88 = reshape(%86, newshape=[520, 1]) /* ty=Tensor[(520, 1), uint8] */;
    %89 = @func_3544(%87, %88) /* ty=(Tensor[(13, 14, 9), float32], Tensor[(10, 13, 4), uint8], Tensor[(520, 1), uint8], Tensor[(14, 11, 1), float32], Tensor[(154), uint16]) */;
    %90 = cast(meta[relay.Constant][8] /* ty=Tensor[(546, 3), int8] */, dtype="float64") /* ty=Tensor[(546, 3), float64] */;
    %91 = @func_3890() /* ty=(Tensor[(520), bool],) */;
    %92 = @func_4283() /* ty=(Tensor[(520), float32], Tensor[(13, 14, 9), int8], Tensor[(520, 1), uint8]) */;
    %93 = cast(meta[relay.Constant][9] /* ty=Tensor[(154), uint16] */, dtype="uint16") /* ty=Tensor[(154), uint16] */;
    %94 = reshape(%93, newshape=[14, 11, 1]) /* ty=Tensor[(14, 11, 1), uint16] */;
    %95 = @func_181(%94) /* ty=(Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) */;
    %96 = %89.2;
    %97 = tan(%90) /* ty=Tensor[(546, 3), float64] */;
    %98 = %91.0;
    %99 = %92.2;
    %100 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
    %101 = %95.0;
    (%85, %96, %97, %98, %99, %100, %101, meta[relay.Constant][9] /* ty=Tensor[(154), uint16] */)
  };
  %102() /* ty=(Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(546, 3), float64], Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */
}

def @func_6023() -> Tensor[(13, 14, 9), int8] {
  %103 = @func_5327() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %103.0
}

def @func_6743() -> Tensor[(520), bool] {
  @func_6741() /* ty=Tensor[(520), bool] */
}

def @func_3494() -> (Tensor[(13, 14, 9), int8], Tensor[(65), float64], Tensor[(16, 12, 4), float64], Tensor[(126, 1), int32], Tensor[(768), float64], Tensor[(14, 13, 5), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) {
  %140 = fn () -> (Tensor[(13, 14, 9), int8], Tensor[(65), float64], Tensor[(16, 12, 4), float64], Tensor[(126, 1), int32], Tensor[(768), float64], Tensor[(14, 13, 5), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) {
    %104 = cast(meta[relay.Constant][11] /* ty=Tensor[(126, 1), int32] */, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
    %105 = cast(meta[relay.Constant][11] /* ty=Tensor[(126, 1), int32] */, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
    %106 = cast(meta[relay.Constant][12] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
    %107 = reshape(%104, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
    %108 = reshape(%105, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
    %109 = reshape(%106, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
    %110 = @func_905(%107, %108, %109) /* ty=(Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) */;
    %111 = cast(meta[relay.Constant][10] /* ty=Tensor[(65), float64] */, dtype="float64") /* ty=Tensor[(65), float64] */;
    %112 = reshape(%111, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float64] */;
    %113 = @func_3051(%112) /* ty=Tensor[(14, 13, 5), float64] */;
    %114 = cast(%113, dtype="float64") /* ty=Tensor[(14, 13, 5), float64] */;
    %115 = sin(%114) /* ty=Tensor[(14, 13, 5), float64] */;
    %116 = cast(%113, dtype="uint64") /* ty=Tensor[(14, 13, 5), uint64] */;
    %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%115, dtype="uint64") /* ty=Tensor[(14, 13, 5), uint64] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %120 = bitwise_and(%118, %119) /* ty=Tensor[(14, 13, 5), uint64] */;
    %121 = cast(%115, dtype="bool") /* ty=Tensor[(14, 13, 5), bool] */;
    %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
    %123 = cast(%120, dtype="bool") /* ty=Tensor[(14, 13, 5), bool] */;
    %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %125 = cast(meta[relay.Constant][11] /* ty=Tensor[(126, 1), int32] */, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
    %126 = %110.1;
    %127 = cast(%126, dtype="float64") /* ty=Tensor[(16, 12, 4), float64] */;
    %128 = cast(meta[relay.Constant][10] /* ty=Tensor[(65), float64] */, dtype="float64") /* ty=Tensor[(65), float64] */;
    %129 = not_equal(%123, %124) /* ty=Tensor[(14, 13, 5), bool] */;
    %130 = cast(%129, dtype="float64") /* ty=Tensor[(14, 13, 5), float64] */;
    %131 = reshape(%125, newshape=[126]) /* ty=Tensor[(126), int32] */;
    %132 = reshape(%127, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
    %133 = reshape(%128, newshape=[13, 5]) /* ty=Tensor[(13, 5), float64] */;
    %134 = reshape(%130, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), float64] */;
    %135 = @func_3223(%131, %132, %133, %134) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(2, 384), float64], Tensor[(13, 5), float64], Tensor[(14, 13, 5), int8]) */;
    %136 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
    %137 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
    %138 = %135.0;
    %139 = %136.0;
    (%137, meta[relay.Constant][10] /* ty=Tensor[(65), float64] */, %126, meta[relay.Constant][11] /* ty=Tensor[(126, 1), int32] */, meta[relay.Constant][12] /* ty=Tensor[(768), float64] */, %129, %138, %139)
  };
  %140() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(65), float64], Tensor[(16, 12, 4), float64], Tensor[(126, 1), int32], Tensor[(768), float64], Tensor[(14, 13, 5), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */
}

def @func_3548(%var_3546: Tensor[(13, 14, 9), int8], %var_3547: Tensor[(520, 1), uint8]) -> (Tensor[(13, 14, 9), float32], Tensor[(10, 13, 4), uint8], Tensor[(520, 1), uint8], Tensor[(14, 11, 1), float32], Tensor[(154), uint16]) {
  @func_3544(%var_3546, %var_3547) /* ty=(Tensor[(13, 14, 9), float32], Tensor[(10, 13, 4), uint8], Tensor[(520, 1), uint8], Tensor[(14, 11, 1), float32], Tensor[(154), uint16]) */
}

def @func_6393(%var_6391: Tensor[(1638), int8]) -> (Tensor[(520, 1), float32], Tensor[(13, 14, 9), float32], Tensor[(1638), int8]) {
  @func_6390(%var_6391) /* ty=(Tensor[(520, 1), float32], Tensor[(13, 14, 9), float32], Tensor[(1638), int8]) */
}

def @func_4882(%var_4881: Tensor[(13, 14, 9), int8]) -> (Tensor[(13, 14, 9), float64],) {
  %147 = fn (%var_4869: Tensor[(13, 14, 9), int8]) -> (Tensor[(13, 14, 9), float64],) {
    %141 = @func_3859() /* ty=Tensor[(13, 14, 9), int8] */;
    %142 = cast(%var_4869, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
    %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %144 = cast(%141, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %146 = floor_mod(%144, %145) /* ty=Tensor[(13, 14, 9), float64] */;
    (%146,)
  };
  %147(%var_4881) /* ty=(Tensor[(13, 14, 9), float64],) */
}

def @func_3860() -> Tensor[(13, 14, 9), int8] {
  %148 = fn () -> Tensor[(13, 14, 9), int8] {
    @func_3296() /* ty=Tensor[(13, 14, 9), int8] */
  };
  %148() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_4464() -> (Tensor[(13, 14, 9), int8], Tensor[(520), bool]) {
  %157 = fn () -> (Tensor[(13, 14, 9), int8], Tensor[(520), bool]) {
    %149 = @func_4283() /* ty=(Tensor[(520), float32], Tensor[(13, 14, 9), int8], Tensor[(520, 1), uint8]) */;
    %150 = %149.0;
    %151 = cast(meta[relay.Constant][13] /* ty=Tensor[(520), float32] */, dtype="bool") /* ty=Tensor[(520), bool] */;
    %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(1), int32] */;
    %153 = cast(%150, dtype="bool") /* ty=Tensor[(520), bool] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?), bool] */;
    %155 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
    %156 = logical_and(%153, %154) /* ty=Tensor[(520), bool] */;
    (%155, %156)
  };
  %157() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool]) */
}

def @func_6837(%var_6836: Tensor[(16, 14, 4), float32]) -> Tensor[(16, 14, 4), float32] {
  %159 = fn (%var_6829: Tensor[(16, 14, 4), float32]) -> Tensor[(16, 14, 4), float32] {
    %158 = cast(%var_6829, dtype="float32") /* ty=Tensor[(16, 14, 4), float32] */;
    acos(%158) /* ty=Tensor[(16, 14, 4), float32] */
  };
  %159(%var_6836) /* ty=Tensor[(16, 14, 4), float32] */
}

def @func_3108() -> (Tensor[(13, 14, 9), int8],) {
  %161 = fn () -> (Tensor[(13, 14, 9), int8],) {
    %160 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
    (%160,)
  };
  %161() /* ty=(Tensor[(13, 14, 9), int8],) */
}

def @func_6121() -> (Tensor[(520), float32],) {
  @func_6119() /* ty=(Tensor[(520), float32],) */
}

def @func_6304(%var_6302: Tensor[(4, 8, 12), bool], %var_6303: Tensor[(4, 8, 12), bool]) -> (Tensor[(4, 8, 12), bool], Tensor[(4, 8, 12), uint64]) {
  %179 = fn (%var_6268: Tensor[(4, 8, 12), bool], %var_6269: Tensor[(4, 8, 12), bool]) -> (Tensor[(4, 8, 12), bool], Tensor[(4, 8, 12), uint64]) {
    %162 = cast(%var_6269, dtype="bool") /* ty=Tensor[(4, 8, 12), bool] */;
    %163 = shape_of(%var_6268, dtype="int32") /* ty=Tensor[(3), int32] */;
    %164 = cast(%var_6268, dtype="bool") /* ty=Tensor[(4, 8, 12), bool] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %166 = logical_or(%164, %165) /* ty=Tensor[(4, 8, 12), bool] */;
    %167 = cast(%166, dtype="float64") /* ty=Tensor[(4, 8, 12), float64] */;
    %168 = acosh(%167) /* ty=Tensor[(4, 8, 12), float64] */;
    %169 = cast(%var_6269, dtype="bool") /* ty=Tensor[(4, 8, 12), bool] */;
    %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %171 = cast(%168, dtype="bool") /* ty=Tensor[(4, 8, 12), bool] */;
    %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %173 = cast(%168, dtype="uint64") /* ty=Tensor[(4, 8, 12), uint64] */;
    %174 = shape_of(%var_6269, dtype="int32") /* ty=Tensor[(3), int32] */;
    %175 = cast(%var_6269, dtype="uint64") /* ty=Tensor[(4, 8, 12), uint64] */;
    %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %177 = less_equal(%171, %172) /* ty=Tensor[(4, 8, 12), bool] */;
    %178 = multiply(%175, %176) /* ty=Tensor[(4, 8, 12), uint64] */;
    (%177, %178)
  };
  %179(%var_6302, %var_6303) /* ty=(Tensor[(4, 8, 12), bool], Tensor[(4, 8, 12), uint64]) */
}

def @func_3852() -> Tensor[(520), float32] {
  %181 = fn () -> Tensor[(520), float32] {
    %180 = @func_3081() /* ty=(Tensor[(520), float32],) */;
    %180.0
  };
  %181() /* ty=Tensor[(520), float32] */
}

def @func_5219() -> (Tensor[(13, 14, 9), int8], Tensor[(520), float32]) {
  %194 = fn () -> (Tensor[(13, 14, 9), int8], Tensor[(520), float32]) {
    %182 = @func_4948() /* ty=(Tensor[(520), float32], Tensor[(520), bool]) */;
    %183 = %182.1;
    %184 = cast(%183, dtype="float32") /* ty=Tensor[(520), float32] */;
    %185 = reshape(%184, newshape=[520]) /* ty=Tensor[(520), float32] */;
    %186 = @func_4337(%185) /* ty=(Tensor[(520), bool], Tensor[(520), bool]) */;
    %187 = %186.1;
    %188 = cast(%187, dtype="float32") /* ty=Tensor[(520), float32] */;
    %189 = shape_of(%183, dtype="int32") /* ty=Tensor[(1), int32] */;
    %190 = cast(%183, dtype="float32") /* ty=Tensor[(520), float32] */;
    %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?), float32] */;
    %192 = @func_5176() /* ty=Tensor[(13, 14, 9), int8] */;
    %193 = mod(%190, %191) /* ty=Tensor[(520), float32] */;
    (%192, %193)
  };
  %194() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), float32]) */
}

def @func_7145(%var_7143: bool, %var_7144: Tensor[(363), bool]) -> (Tensor[(520), float32], Tensor[(16, 12, 4), bool], bool, Tensor[(363), bool], Tensor[(14, 11, ?), float64], Tensor[(13, 14, 9), int8], Tensor[(1, 4), float64], Tensor[(2016), uint32]) {
  @func_7141(%var_7143, %var_7144) /* ty=(Tensor[(520), float32], Tensor[(16, 12, 4), bool], bool, Tensor[(363), bool], Tensor[(14, 11, ?), float64], Tensor[(13, 14, 9), int8], Tensor[(1, 4), float64], Tensor[(2016), uint32]) */
}

def @func_669(%var_666: Tensor[(10, 14, 11), bool], %var_667: Tensor[(10, 14, 11), bool], %var_668: Tensor[(10, 14, 11), bool]) -> Tensor[(10, 14, 11), int16] {
  @func_664(%var_666, %var_667, %var_668) /* ty=Tensor[(10, 14, 11), int16] */
}

def @func_4759(%var_4737: Tensor[(6, 4, 16), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(6, 4, 16), uint64]) {
  %195 = cast(%var_4737, dtype="float64") /* ty=Tensor[(6, 4, 16), float64] */;
  %196 = atanh(%195) /* ty=Tensor[(6, 4, 16), float64] */;
  %197 = cast(%196, dtype="uint64") /* ty=Tensor[(6, 4, 16), uint64] */;
  %198 = shape_of(%var_4737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_4737, dtype="uint64") /* ty=Tensor[(6, 4, 16), uint64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %201 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
  %202 = add(%199, %200) /* ty=Tensor[(6, 4, 16), uint64] */;
  (%201, %202)
}

def @func_3223(%var_3195: Tensor[(126), int32], %var_3196: Tensor[(2, 384), float64], %var_3210: Tensor[(13, 5), float64], %var_3216: Tensor[(14, 13, 5), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(2, 384), float64], Tensor[(13, 5), float64], Tensor[(14, 13, 5), int8]) {
  %203 = cast(%var_3195, dtype="int32") /* ty=Tensor[(126), int32] */;
  %204 = cast(%var_3195, dtype="int32") /* ty=Tensor[(126), int32] */;
  %205 = cast(%var_3196, dtype="float64") /* ty=Tensor[(2, 384), float64] */;
  %206 = reshape(%203, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %207 = reshape(%204, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %208 = reshape(%205, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %209 = @func_905(%206, %207, %208) /* ty=(Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) */;
  %210 = cast(%var_3210, dtype="float64") /* ty=Tensor[(13, 5), float64] */;
  %211 = reshape(%210, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float64] */;
  %212 = @func_3051(%211) /* ty=Tensor[(14, 13, 5), float64] */;
  %213 = cast(%var_3216, dtype="int8") /* ty=Tensor[(14, 13, 5), int8] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="int8") /* ty=Tensor[(14, 13, 5), int8] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %217 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  %218 = %209.3;
  %219 = right_shift(%215, %216) /* ty=Tensor[(14, 13, 5), int8] */;
  (%217, %218, %var_3195, %var_3196, %var_3210, %219)
}

def @func_6679(%var_6678: Tensor[(12, 15, 1), float32]) -> (Tensor[(10, 13, 4), uint8], Tensor[(12, 15, ?), bool], Tensor[(13, 14, 9), int8]) {
  %230 = fn (%var_6643: Tensor[(12, 15, 1), float32]) -> (Tensor[(10, 13, 4), uint8], Tensor[(12, 15, ?), bool], Tensor[(13, 14, 9), int8]) {
    %220 = @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */;
    %221 = cast(%var_6643, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
    %222 = tan(%221) /* ty=Tensor[(12, 15, 1), float32] */;
    %223 = cast(%var_6643, dtype="bool") /* ty=Tensor[(12, 15, 1), bool] */;
    %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
    %225 = cast(%222, dtype="bool") /* ty=Tensor[(12, 15, 1), bool] */;
    %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %227 = %220.5;
    %228 = less(%225, %226) /* ty=Tensor[(12, 15, ?), bool] */;
    %229 = @func_3755() /* ty=Tensor[(13, 14, 9), int8] */;
    (%227, %228, %229)
  };
  %230(%var_6678) /* ty=(Tensor[(10, 13, 4), uint8], Tensor[(12, 15, ?), bool], Tensor[(13, 14, 9), int8]) */
}

def @func_2801() -> Tensor[(13, 14, 9), int8] {
  %231 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 14, 1), int8] */, dtype="int8") /* ty=Tensor[(13, 14, 1), int8] */;
  %232 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 14, 9), int8] */, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  minimum(%231, %232) /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_2625(%var_2623: Tensor[(2, 1, 1), int8], %var_2624: Tensor[(2, 12, 8), int8]) -> Tensor[(2, 12, 8), int8] {
  %235 = fn (%var_2614: Tensor[(2, 1, 1), int8], %var_2615: Tensor[(2, 12, 8), int8]) -> Tensor[(2, 12, 8), int8] {
    %233 = cast(%var_2614, dtype="int8") /* ty=Tensor[(2, 1, 1), int8] */;
    %234 = cast(%var_2615, dtype="int8") /* ty=Tensor[(2, 12, 8), int8] */;
    maximum(%233, %234) /* ty=Tensor[(2, 12, 8), int8] */
  };
  %235(%var_2623, %var_2624) /* ty=Tensor[(2, 12, 8), int8] */
}

def @func_5374() -> Tensor[(13, 14, 9), uint64] {
  %244 = fn () -> Tensor[(13, 14, 9), uint64] {
    %236 = @func_5218() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), float32]) */;
    %237 = %236.0;
    %238 = @func_5327() /* ty=(Tensor[(13, 14, 9), int8],) */;
    %239 = %238.0;
    %240 = cast(%239, dtype="uint64") /* ty=Tensor[(13, 14, 9), uint64] */;
    %241 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
    %242 = cast(%237, dtype="uint64") /* ty=Tensor[(13, 14, 9), uint64] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    add(%242, %243) /* ty=Tensor[(13, 14, 9), uint64] */
  };
  %244() /* ty=Tensor[(13, 14, 9), uint64] */
}

def @func_5328() -> (Tensor[(13, 14, 9), int8],) {
  %247 = fn () -> (Tensor[(13, 14, 9), int8],) {
    %245 = @func_3493() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(65), float64], Tensor[(16, 12, 4), float64], Tensor[(126, 1), int32], Tensor[(768), float64], Tensor[(14, 13, 5), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
    %246 = %245.6;
    (%246,)
  };
  %247() /* ty=(Tensor[(13, 14, 9), int8],) */
}

def @func_3609(%var_3577: Tensor[(44), uint16], %var_3584: uint32) -> (Tensor[(13, 14, 9), int8], Tensor[(11, 4, ?), uint16], Tensor[(44), uint16], Tensor[(14, 11, 1), uint16], uint32, Tensor[(1, 2016), uint32], Tensor[(5, 8, 8), float64], Tensor[(320), float32], Tensor[(13, 14, 9), float32], Tensor[(13, 14, 9), int8], Tensor[(8, 5, 13), uint32], Tensor[(520), uint32]) {
  %248 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %249 = cast(%var_3577, dtype="uint16") /* ty=Tensor[(44), uint16] */;
  %250 = cast(%var_3577, dtype="uint16") /* ty=Tensor[(44), uint16] */;
  %251 = reshape(%249, newshape=[11, 4, 1]) /* ty=Tensor[(11, 4, 1), uint16] */;
  %252 = reshape(%250, newshape=[11, 4, 1]) /* ty=Tensor[(11, 4, 1), uint16] */;
  %253 = cast(%var_3584, dtype="uint32") /* ty=uint32 */;
  %254 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 2016), uint32] */, dtype="uint32") /* ty=Tensor[(1, 2016), uint32] */;
  %255 = reshape(%253, newshape=[]) /* ty=uint32 */;
  %256 = reshape(%254, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), uint32] */;
  %257 = @func_2395(%255, %256) /* ty=(Tensor[(12, 14, 12), uint32], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */;
  %258 = cast(meta[relay.Constant][17] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %259 = cast(meta[relay.Constant][17] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %260 = reshape(%258, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %261 = reshape(%259, newshape=[5, 8, 8]) /* ty=Tensor[(5, 8, 8), float32] */;
  %262 = @func_1015(%260, %261) /* ty=(Tensor[(10, 14, 11), int16], Tensor[(1540), bool], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(5, 8, 8), bool], Tensor[(5, 8, 8), float64]) */;
  %263 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %265 = @func_3107() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %266 = cast(%var_3584, dtype="uint32") /* ty=uint32 */;
  %267 = cast(meta[relay.Constant][18] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %268 = reshape(%266, newshape=[]) /* ty=uint32 */;
  %269 = reshape(%267, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint32] */;
  %270 = %248.0;
  %271 = @func_1953(%251, %252) /* ty=Tensor[(11, 4, ?), uint16] */;
  %272 = %257.1;
  %273 = %262.5;
  %274 = sigmoid(%264) /* ty=Tensor[(13, 14, 9), float32] */;
  %275 = %265.0;
  %276 = @func_1106(%268, %269) /* ty=Tensor[(8, 5, 13), uint32] */;
  (%270, %271, %var_3577, %272, %var_3584, meta[relay.Constant][16] /* ty=Tensor[(1, 2016), uint32] */, %273, meta[relay.Constant][17] /* ty=Tensor[(320), float32] */, %274, %275, %276, meta[relay.Constant][18] /* ty=Tensor[(520), uint32] */)
}

def @func_664(%var_647: Tensor[(10, 14, 11), bool], %var_648: Tensor[(10, 14, 11), bool], %var_654: Tensor[(10, 14, 11), bool]) -> Tensor[(10, 14, 11), int16] {
  %277 = cast(%var_648, dtype="bool") /* ty=Tensor[(10, 14, 11), bool] */;
  %278 = shape_of(%var_647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%var_647, dtype="bool") /* ty=Tensor[(10, 14, 11), bool] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %281 = logical_and(%279, %280) /* ty=Tensor[(10, 14, 11), bool] */;
  %282 = cast(%var_654, dtype="int16") /* ty=Tensor[(10, 14, 11), int16] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="int16") /* ty=Tensor[(10, 14, 11), int16] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%284, %285) /* ty=Tensor[(10, 14, 11), int16] */
}

def @func_3838(%var_3809: Tensor[(11, 2, 13), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(11, 2, 13), int32]) {
  %286 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %287 = cast(%var_3809, dtype="float64") /* ty=Tensor[(11, 2, 13), float64] */;
  %288 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(11, 2, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 13), float64] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %291 = divide(%289, %290) /* ty=Tensor[(11, 2, 13), float64] */;
  %292 = cast(%291, dtype="float32") /* ty=Tensor[(11, 2, 13), float32] */;
  %293 = asinh(%292) /* ty=Tensor[(11, 2, 13), float32] */;
  %294 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 2, 13), float64] */, dtype="int32") /* ty=Tensor[(11, 2, 13), int32] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="int32") /* ty=Tensor[(11, 2, 13), int32] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %298 = %286.0;
  %299 = maximum(%296, %297) /* ty=Tensor[(11, 2, 13), int32] */;
  (%298, %299)
}

def @func_1912(%var_1909: Tensor[(14, 7, 5), float32], %var_1910: Tensor[(14, 7, 5), float32], %var_1911: Tensor[(10, 52), uint8]) -> (Tensor[(14, 7, 5), float32], Tensor[(10, 13, 4), uint8], Tensor[(10, 52), uint8]) {
  @func_1907(%var_1909, %var_1910, %var_1911) /* ty=(Tensor[(14, 7, 5), float32], Tensor[(10, 13, 4), uint8], Tensor[(10, 52), uint8]) */
}

def @func_5302(%var_5285: Tensor[(520), float64]) -> (Tensor[(520), bool], Tensor[(13, 14, 9), int8], Tensor[(286), float64], Tensor[(520), float64]) {
  %300 = @func_4982() /* ty=Tensor[(520), float64] */;
  %301 = cast(%var_5285, dtype="bool") /* ty=Tensor[(520), bool] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(1), int32] */;
  %303 = cast(%300, dtype="bool") /* ty=Tensor[(520), bool] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?), bool] */;
  %305 = cast(meta[relay.Constant][20] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
  %306 = reshape(%305, newshape=[11, 2, 13]) /* ty=Tensor[(11, 2, 13), float64] */;
  %307 = @func_3838(%306) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(11, 2, 13), int32]) */;
  %308 = cast(%var_5285, dtype="float64") /* ty=Tensor[(520), float64] */;
  %309 = not_equal(%303, %304) /* ty=Tensor[(520), bool] */;
  %310 = %307.0;
  %311 = atan(%308) /* ty=Tensor[(520), float64] */;
  (%309, %310, meta[relay.Constant][20] /* ty=Tensor[(286), float64] */, %311)
}

def @func_3296() -> Tensor[(13, 14, 9), int8] {
  %312 = @func_2885() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
  %312.1
}

def @func_4729() -> (Tensor[(14, 11, ?), int32],) {
  @func_4727() /* ty=(Tensor[(14, 11, ?), int32],) */
}

def @func_1109(%var_1107: uint32, %var_1108: Tensor[(8, 5, 13), uint32]) -> Tensor[(8, 5, 13), uint32] {
  %315 = fn (%var_1100: uint32, %var_1101: Tensor[(8, 5, 13), uint32]) -> Tensor[(8, 5, 13), uint32] {
    %313 = cast(%var_1100, dtype="uint32") /* ty=uint32 */;
    %314 = cast(%var_1101, dtype="uint32") /* ty=Tensor[(8, 5, 13), uint32] */;
    logical_xor(%313, %314) /* ty=Tensor[(8, 5, 13), uint32] */
  };
  %315(%var_1107, %var_1108) /* ty=Tensor[(8, 5, 13), uint32] */
}

def @func_6052() -> (Tensor[(13, 14, 9), int8], Tensor[(520), bool], Tensor[(520), float32]) {
  %324 = fn () -> (Tensor[(13, 14, 9), int8], Tensor[(520), bool], Tensor[(520), float32]) {
    %316 = @func_2885() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
    %317 = @func_4948() /* ty=(Tensor[(520), float32], Tensor[(520), bool]) */;
    %318 = @func_3890() /* ty=(Tensor[(520), bool],) */;
    %319 = %318.0;
    %320 = cast(%319, dtype="float32") /* ty=Tensor[(520), float32] */;
    %321 = %316.1;
    %322 = %317.1;
    %323 = log10(%320) /* ty=Tensor[(520), float32] */;
    (%321, %322, %323)
  };
  %324() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool], Tensor[(520), float32]) */
}

def @func_4647(%var_4645: bool, %var_4646: Tensor[(3, 11, 11), bool]) -> (Tensor[(3, 11, 11), bool], Tensor[(13, 14, 9), int8], Tensor[(16, 12, 4), bool]) {
  @func_4643(%var_4645, %var_4646) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(13, 14, 9), int8], Tensor[(16, 12, 4), bool]) */
}

def @func_2399(%var_2397: uint32, %var_2398: Tensor[(12, 14, 12), uint32]) -> (Tensor[(12, 14, 12), uint32], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) {
  @func_2395(%var_2397, %var_2398) /* ty=(Tensor[(12, 14, 12), uint32], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */
}

def @func_1953(%var_1945: Tensor[(11, 4, 1), uint16], %var_1946: Tensor[(11, 4, 1), uint16]) -> Tensor[(11, 4, ?), uint16] {
  %325 = cast(%var_1946, dtype="uint16") /* ty=Tensor[(11, 4, 1), uint16] */;
  %326 = shape_of(%var_1945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%var_1945, dtype="uint16") /* ty=Tensor[(11, 4, 1), uint16] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%327, %328) /* ty=Tensor[(11, 4, ?), uint16] */
}

def @func_5178() -> Tensor[(13, 14, 9), int8] {
  @func_5176() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_116(%var_114: Tensor[(16, 12, 4), float64], %var_115: Tensor[(16, 12, 4), float64]) -> (Tensor[(16, 12, 4), float64],) {
  %334 = fn (%var_108: Tensor[(16, 12, 4), float64], %var_109: Tensor[(16, 12, 4), float64]) -> (Tensor[(16, 12, 4), float64],) {
    %329 = cast(%var_109, dtype="float64") /* ty=Tensor[(16, 12, 4), float64] */;
    %330 = shape_of(%var_108, dtype="int32") /* ty=Tensor[(3), int32] */;
    %331 = cast(%var_108, dtype="float64") /* ty=Tensor[(16, 12, 4), float64] */;
    %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %333 = mod(%331, %332) /* ty=Tensor[(16, 12, 4), float64] */;
    (%333,)
  };
  %334(%var_114, %var_115) /* ty=(Tensor[(16, 12, 4), float64],) */
}

def @func_1680(%var_1678: Tensor[(8, 5, 6), float64], %var_1679: uint32) -> (Tensor[(8, 5, 6), float32], Tensor[(8, 5, 6), float32], Tensor[(8, 5, 13), uint32], uint32, Tensor[(520), uint32], Tensor[(520), uint8], Tensor[(126), int32], Tensor[(768), float64]) {
  @func_1676(%var_1678, %var_1679) /* ty=(Tensor[(8, 5, 6), float32], Tensor[(8, 5, 6), float32], Tensor[(8, 5, 13), uint32], uint32, Tensor[(520), uint32], Tensor[(520), uint8], Tensor[(126), int32], Tensor[(768), float64]) */
}

def @func_6535(%var_6534: Tensor[(11, 14), uint16]) -> (Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), float32], Tensor[(11, 14), uint16], Tensor[(13, 14, 9), int8]) {
  %342 = fn (%var_6523: Tensor[(11, 14), uint16]) -> (Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), float32], Tensor[(11, 14), uint16], Tensor[(13, 14, 9), int8]) {
    %335 = @func_5218() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), float32]) */;
    %336 = cast(%var_6523, dtype="uint16") /* ty=Tensor[(11, 14), uint16] */;
    %337 = reshape(%336, newshape=[14, 11, 1]) /* ty=Tensor[(14, 11, 1), uint16] */;
    %338 = @func_181(%337) /* ty=(Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) */;
    %339 = %335.0;
    %340 = %338.1;
    %341 = @func_5715() /* ty=Tensor[(13, 14, 9), int8] */;
    (%339, %340, %var_6523, %341)
  };
  %342(%var_6534) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), float32], Tensor[(11, 14), uint16], Tensor[(13, 14, 9), int8]) */
}

def @func_6025() -> Tensor[(13, 14, 9), int8] {
  @func_6023() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_4788() -> Tensor[(13, 14, 9), int8] {
  @func_4786() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_5582(%var_5580: Tensor[(15, 11, 2), float64], %var_5581: Tensor[(768), float64]) -> (Tensor[(15, 11, 2), float32], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(10, 14, 11), int16], Tensor[(1540), bool]) {
  %363 = fn (%var_5535: Tensor[(15, 11, 2), float64], %var_5567: Tensor[(768), float64]) -> (Tensor[(15, 11, 2), float32], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(10, 14, 11), int16], Tensor[(1540), bool]) {
    %343 = cast(%var_5535, dtype="float64") /* ty=Tensor[(15, 11, 2), float64] */;
    %344 = log10(%343) /* ty=Tensor[(15, 11, 2), float64] */;
    %345 = cast(%var_5535, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
    %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(%344, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %349 = cast(%var_5567, dtype="float64") /* ty=Tensor[(768), float64] */;
    %350 = cast(%var_5567, dtype="float64") /* ty=Tensor[(768), float64] */;
    %351 = reshape(%349, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
    %352 = reshape(%350, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
    %353 = @func_113(%351, %352) /* ty=(Tensor[(16, 12, 4), float64],) */;
    %354 = cast(meta[relay.Constant][21] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %355 = cast(meta[relay.Constant][21] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %356 = cast(meta[relay.Constant][21] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %357 = reshape(%354, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
    %358 = reshape(%355, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
    %359 = reshape(%356, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
    %360 = divide(%347, %348) /* ty=Tensor[(15, 11, 2), float32] */;
    %361 = %353.0;
    %362 = @func_664(%357, %358, %359) /* ty=Tensor[(10, 14, 11), int16] */;
    (%360, %361, %var_5567, %362, meta[relay.Constant][21] /* ty=Tensor[(1540), bool] */)
  };
  %363(%var_5580, %var_5581) /* ty=(Tensor[(15, 11, 2), float32], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(10, 14, 11), int16], Tensor[(1540), bool]) */
}

def @func_3613(%var_3611: Tensor[(44), uint16], %var_3612: uint32) -> (Tensor[(13, 14, 9), int8], Tensor[(11, 4, ?), uint16], Tensor[(44), uint16], Tensor[(14, 11, 1), uint16], uint32, Tensor[(1, 2016), uint32], Tensor[(5, 8, 8), float64], Tensor[(320), float32], Tensor[(13, 14, 9), float32], Tensor[(13, 14, 9), int8], Tensor[(8, 5, 13), uint32], Tensor[(520), uint32]) {
  @func_3609(%var_3611, %var_3612) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(11, 4, ?), uint16], Tensor[(44), uint16], Tensor[(14, 11, 1), uint16], uint32, Tensor[(1, 2016), uint32], Tensor[(5, 8, 8), float64], Tensor[(320), float32], Tensor[(13, 14, 9), float32], Tensor[(13, 14, 9), int8], Tensor[(8, 5, 13), uint32], Tensor[(520), uint32]) */
}

def @func_910(%var_907: Tensor[(14, 3, 3), int32], %var_908: Tensor[(14, 3, 3), int32], %var_909: Tensor[(2, 384), float64]) -> (Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) {
  @func_905(%var_907, %var_908, %var_909) /* ty=(Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) */
}

def @func_6261() -> Tensor[(13, 14, 9), int8] {
  %365 = fn () -> Tensor[(13, 14, 9), int8] {
    %364 = @func_6051() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool], Tensor[(520), float32]) */;
    %364.0
  };
  %365() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_905(%var_882: Tensor[(14, 3, 3), int32], %var_883: Tensor[(14, 3, 3), int32], %var_892: Tensor[(2, 384), float64]) -> (Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) {
  %366 = cast(%var_883, dtype="int32") /* ty=Tensor[(14, 3, 3), int32] */;
  %367 = shape_of(%var_882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%var_882, dtype="int32") /* ty=Tensor[(14, 3, 3), int32] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %370 = cast(%var_892, dtype="float64") /* ty=Tensor[(2, 384), float64] */;
  %371 = cast(%var_892, dtype="float64") /* ty=Tensor[(2, 384), float64] */;
  %372 = reshape(%370, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %373 = reshape(%371, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %374 = @func_113(%372, %373) /* ty=(Tensor[(16, 12, 4), float64],) */;
  %375 = cast(meta[relay.Constant][22] /* ty=Tensor[(520), uint8] */, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %376 = reshape(%375, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), uint8] */;
  %377 = @func_292(%376) /* ty=(Tensor[(10, 13, 4), uint8],) */;
  %378 = right_shift(%368, %369) /* ty=Tensor[(14, 3, 3), int32] */;
  %379 = %374.0;
  %380 = %377.0;
  (%378, %379, %var_892, %380, meta[relay.Constant][22] /* ty=Tensor[(520), uint8] */)
}

def @func_1957(%var_1955: Tensor[(11, 4, 1), uint16], %var_1956: Tensor[(11, 4, 1), uint16]) -> Tensor[(11, 4, ?), uint16] {
  @func_1953(%var_1955, %var_1956) /* ty=Tensor[(11, 4, ?), uint16] */
}

def @func_4643(%var_4490: bool, %var_4491: Tensor[(3, 11, 11), bool]) -> (Tensor[(3, 11, 11), bool], Tensor[(13, 14, 9), int8], Tensor[(16, 12, 4), bool]) {
  %381 = cast(%var_4490, dtype="bool") /* ty=bool */;
  %382 = cast(%var_4491, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %383 = cast(meta[relay.Constant][23] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %384 = cast(meta[relay.Constant][23] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %385 = reshape(%383, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %386 = reshape(%384, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
  %387 = @func_113(%385, %386) /* ty=(Tensor[(16, 12, 4), float64],) */;
  %388 = %387.0;
  %389 = cast(meta[relay.Constant][23] /* ty=Tensor[(768), float64] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(16, 12, 4), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %393 = logical_and(%381, %382) /* ty=Tensor[(3, 11, 11), bool] */;
  %394 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
  %395 = not_equal(%391, %392) /* ty=Tensor[(16, 12, 4), bool] */;
  (%393, %394, %395)
}

def @func_5176() -> Tensor[(13, 14, 9), int8] {
  @func_3755() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_6213(%var_6210: Tensor[(13, 14, 9), int8], %var_6211: Tensor[(4), float64], %var_6212: Tensor[(2016), uint32]) -> (Tensor[(13, 14, 9), int32], Tensor[(4), float64], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2016), uint32], Tensor[(13, 14, 9), int8]) {
  %416 = fn (%var_6185: Tensor[(13, 14, 9), int8], %var_6199: Tensor[(4), float64], %var_6200: Tensor[(2016), uint32]) -> (Tensor[(13, 14, 9), int32], Tensor[(4), float64], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2016), uint32], Tensor[(13, 14, 9), int8]) {
    %396 = @func_4786() /* ty=Tensor[(13, 14, 9), int8] */;
    %397 = cast(%var_6185, dtype="int32") /* ty=Tensor[(13, 14, 9), int32] */;
    %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
    %399 = cast(%396, dtype="int32") /* ty=Tensor[(13, 14, 9), int32] */;
    %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %401 = cast(%var_6199, dtype="float64") /* ty=Tensor[(4), float64] */;
    %402 = cast(%var_6200, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
    %403 = reshape(%401, newshape=[4]) /* ty=Tensor[(4), float64] */;
    %404 = reshape(%402, newshape=[2016]) /* ty=Tensor[(2016), uint32] */;
    %405 = @func_2955(%403, %404) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */;
    %406 = cast(%var_6199, dtype="float64") /* ty=Tensor[(4), float64] */;
    %407 = cast(%var_6200, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
    %408 = reshape(%406, newshape=[4]) /* ty=Tensor[(4), float64] */;
    %409 = reshape(%407, newshape=[2016]) /* ty=Tensor[(2016), uint32] */;
    %410 = @func_2955(%408, %409) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */;
    %411 = @func_5327() /* ty=(Tensor[(13, 14, 9), int8],) */;
    %412 = right_shift(%399, %400) /* ty=Tensor[(13, 14, 9), int32] */;
    %413 = %405.2;
    %414 = %410.3;
    %415 = %411.0;
    (%412, %413, %var_6199, %var_6200, %414, %415)
  };
  %416(%var_6210, %var_6211, %var_6212) /* ty=(Tensor[(13, 14, 9), int32], Tensor[(4), float64], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2016), uint32], Tensor[(13, 14, 9), int8]) */
}

def @func_5688(%var_5685: Tensor[(1, 286), float64]) -> (Tensor[(13, 14, 9), float64], Tensor[(11, 2, 13), int32], Tensor[(1, 286), float64]) {
  %417 = @func_5327() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %418 = %417.0;
  %419 = cast(%418, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
  %420 = acosh(%419) /* ty=Tensor[(13, 14, 9), float64] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
  %422 = cast(%var_5685, dtype="float64") /* ty=Tensor[(1, 286), float64] */;
  %423 = reshape(%422, newshape=[11, 2, 13]) /* ty=Tensor[(11, 2, 13), float64] */;
  %424 = @func_3838(%423) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(11, 2, 13), int32]) */;
  %425 = rsqrt(%421) /* ty=Tensor[(13, 14, 9), float64] */;
  %426 = %424.1;
  (%425, %426, %var_5685)
}

def @func_6110(%var_6109: Tensor[(13, 14, 9), int8]) -> (Tensor[(5, 9, 2), uint16], Tensor[(90), int64], Tensor[(363), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), bool], Tensor[(13, 14, 9), uint64], Tensor[(13, 14, 9), int8], Tensor[(1386), float32]) {
  %449 = fn (%var_6084: Tensor[(13, 14, 9), int8]) -> (Tensor[(5, 9, 2), uint16], Tensor[(90), int64], Tensor[(363), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), bool], Tensor[(13, 14, 9), uint64], Tensor[(13, 14, 9), int8], Tensor[(1386), float32]) {
    %427 = cast(meta[relay.Constant][24] /* ty=Tensor[(90), int64] */, dtype="int64") /* ty=Tensor[(90), int64] */;
    %428 = cast(meta[relay.Constant][25] /* ty=Tensor[(363), bool] */, dtype="bool") /* ty=Tensor[(363), bool] */;
    %429 = cast(meta[relay.Constant][24] /* ty=Tensor[(90), int64] */, dtype="float32") /* ty=Tensor[(90), float32] */;
    %430 = reshape(%427, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), int64] */;
    %431 = reshape(%428, newshape=[11, 33]) /* ty=Tensor[(11, 33), bool] */;
    %432 = reshape(%429, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), float32] */;
    %433 = @func_5489(%430, %431, %432) /* ty=(Tensor[(16, 12, 4), bool], bool, Tensor[(11, 33), bool], Tensor[(520), float32], Tensor[(5, 9, 2), float32], Tensor[(520), bool], Tensor[(5, 9, 2), float64], Tensor[(5, 9, 2), bool], Tensor[(5, 9, 2), uint16], Tensor[(13, 14, 9), int8], Tensor[(5, 9, 2), float32], Tensor[(520), bool]) */;
    %434 = @func_5896() /* ty=(Tensor[(13, 14, 9), int8],) */;
    %435 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
    %436 = %435.0;
    %437 = cast(%var_6084, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
    %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %439 = cast(%436, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
    %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %441 = cast(meta[relay.Constant][26] /* ty=Tensor[(1386), float32] */, dtype="float32") /* ty=Tensor[(1386), float32] */;
    %442 = reshape(%441, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), float32] */;
    %443 = @func_5778(%442) /* ty=(Tensor[(14, 9, 11), float32], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
    %444 = %433.8;
    %445 = %434.0;
    %446 = greater_equal(%439, %440) /* ty=Tensor[(13, 14, 9), bool] */;
    %447 = @func_5373() /* ty=Tensor[(13, 14, 9), uint64] */;
    %448 = %443.2;
    (%444, meta[relay.Constant][24] /* ty=Tensor[(90), int64] */, meta[relay.Constant][25] /* ty=Tensor[(363), bool] */, %445, %446, %447, %448, meta[relay.Constant][26] /* ty=Tensor[(1386), float32] */)
  };
  %449(%var_6109) /* ty=(Tensor[(5, 9, 2), uint16], Tensor[(90), int64], Tensor[(363), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), bool], Tensor[(13, 14, 9), uint64], Tensor[(13, 14, 9), int8], Tensor[(1386), float32]) */
}

def @func_5616() -> (Tensor[(520), float32],) {
  %453 = fn () -> (Tensor[(520), float32],) {
    %450 = @func_4982() /* ty=Tensor[(520), float64] */;
    %451 = cast(%450, dtype="float32") /* ty=Tensor[(520), float32] */;
    %452 = acosh(%451) /* ty=Tensor[(520), float32] */;
    (%452,)
  };
  %453() /* ty=(Tensor[(520), float32],) */
}

def @func_4284() -> (Tensor[(520), float32], Tensor[(13, 14, 9), int8], Tensor[(520, 1), uint8]) {
  %463 = fn () -> (Tensor[(520), float32], Tensor[(13, 14, 9), int8], Tensor[(520, 1), uint8]) {
    %454 = @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */;
    %455 = %454.8;
    %456 = cast(%455, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
    %457 = @func_3851() /* ty=Tensor[(520), float32] */;
    %458 = cast(%457, dtype="uint8") /* ty=Tensor[(520), uint8] */;
    %459 = reshape(%456, newshape=[13, 14, 9]) /* ty=Tensor[(13, 14, 9), int8] */;
    %460 = reshape(%458, newshape=[520, 1]) /* ty=Tensor[(520, 1), uint8] */;
    %461 = @func_3544(%459, %460) /* ty=(Tensor[(13, 14, 9), float32], Tensor[(10, 13, 4), uint8], Tensor[(520, 1), uint8], Tensor[(14, 11, 1), float32], Tensor[(154), uint16]) */;
    %462 = %461.2;
    (%457, %455, %462)
  };
  %463() /* ty=(Tensor[(520), float32], Tensor[(13, 14, 9), int8], Tensor[(520, 1), uint8]) */
}

def @func_4762(%var_4760: Tensor[(6, 4, 16), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(6, 4, 16), uint64]) {
  @func_4759(%var_4760) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(6, 4, 16), uint64]) */
}

def @func_2931() -> (Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) {
  @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */
}

def @func_3400() -> (Tensor[(13, 14, 9), int8],) {
  %465 = fn () -> (Tensor[(13, 14, 9), int8],) {
    %464 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
    (%464,)
  };
  %465() /* ty=(Tensor[(13, 14, 9), int8],) */
}

def @func_5493(%var_5490: Tensor[(5, 9, 2), int64], %var_5491: Tensor[(11, 33), bool], %var_5492: Tensor[(5, 9, 2), float32]) -> (Tensor[(16, 12, 4), bool], bool, Tensor[(11, 33), bool], Tensor[(520), float32], Tensor[(5, 9, 2), float32], Tensor[(520), bool], Tensor[(5, 9, 2), float64], Tensor[(5, 9, 2), bool], Tensor[(5, 9, 2), uint16], Tensor[(13, 14, 9), int8], Tensor[(5, 9, 2), float32], Tensor[(520), bool]) {
  %510 = fn (%var_5388: Tensor[(5, 9, 2), int64], %var_5408: Tensor[(11, 33), bool], %var_5466: Tensor[(5, 9, 2), float32]) -> (Tensor[(16, 12, 4), bool], bool, Tensor[(11, 33), bool], Tensor[(520), float32], Tensor[(5, 9, 2), float32], Tensor[(520), bool], Tensor[(5, 9, 2), float64], Tensor[(5, 9, 2), bool], Tensor[(5, 9, 2), uint16], Tensor[(13, 14, 9), int8], Tensor[(5, 9, 2), float32], Tensor[(520), bool]) {
    %466 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %467 = cast(%var_5408, dtype="bool") /* ty=Tensor[(11, 33), bool] */;
    %468 = reshape(%466, newshape=[]) /* ty=bool */;
    %469 = reshape(%467, newshape=[3, 11, 11]) /* ty=Tensor[(3, 11, 11), bool] */;
    %470 = @func_4643(%468, %469) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(13, 14, 9), int8], Tensor[(16, 12, 4), bool]) */;
    %471 = cast(%var_5388, dtype="float32") /* ty=Tensor[(5, 9, 2), float32] */;
    %472 = @func_3851() /* ty=Tensor[(520), float32] */;
    %473 = cast(%472, dtype="float32") /* ty=Tensor[(520), float32] */;
    %474 = reshape(%473, newshape=[520]) /* ty=Tensor[(520), float32] */;
    %475 = @func_4337(%474) /* ty=(Tensor[(520), bool], Tensor[(520), bool]) */;
    %476 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 9, 2), int64] */, dtype="float64") /* ty=Tensor[(5, 9, 2), float64] */;
    %477 = cast(%var_5388, dtype="float32") /* ty=Tensor[(5, 9, 2), float32] */;
    %478 = atanh(%477) /* ty=Tensor[(5, 9, 2), float32] */;
    %479 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 9, 2), int64] */, dtype="int64") /* ty=Tensor[(5, 9, 2), int64] */;
    %480 = shape_of(%var_5388, dtype="int32") /* ty=Tensor[(3), int32] */;
    %481 = cast(%var_5388, dtype="int64") /* ty=Tensor[(5, 9, 2), int64] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %483 = minimum(%481, %482) /* ty=Tensor[(5, 9, 2), int64] */;
    %484 = cast(%483, dtype="int64") /* ty=Tensor[(5, 9, 2), int64] */;
    %485 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %486 = cast(%478, dtype="int64") /* ty=Tensor[(5, 9, 2), int64] */;
    %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %488 = right_shift(%486, %487) /* ty=Tensor[(5, 9, 2), int64] */;
    %489 = cast(%478, dtype="bool") /* ty=Tensor[(5, 9, 2), bool] */;
    %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
    %491 = cast(%488, dtype="bool") /* ty=Tensor[(5, 9, 2), bool] */;
    %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %493 = cast(%var_5466, dtype="uint16") /* ty=Tensor[(5, 9, 2), uint16] */;
    %494 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %495 = cast(%478, dtype="uint16") /* ty=Tensor[(5, 9, 2), uint16] */;
    %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %497 = cast(%488, dtype="float64") /* ty=Tensor[(5, 9, 2), float64] */;
    %498 = cos(%497) /* ty=Tensor[(5, 9, 2), float64] */;
    %499 = cast(%498, dtype="float32") /* ty=Tensor[(5, 9, 2), float32] */;
    %500 = @func_4463() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool]) */;
    %501 = %470.2;
    %502 = sqrt(%471) /* ty=Tensor[(5, 9, 2), float32] */;
    %503 = %475.0;
    %504 = rsqrt(%476) /* ty=Tensor[(5, 9, 2), float64] */;
    %505 = logical_or(%491, %492) /* ty=Tensor[(5, 9, 2), bool] */;
    %506 = add(%495, %496) /* ty=Tensor[(5, 9, 2), uint16] */;
    %507 = @func_5176() /* ty=Tensor[(13, 14, 9), int8] */;
    %508 = sigmoid(%499) /* ty=Tensor[(5, 9, 2), float32] */;
    %509 = %500.1;
    (%501, False /* ty=bool */, %var_5408, %472, %502, %503, %504, %505, %506, %507, %508, %509)
  };
  %510(%var_5490, %var_5491, %var_5492) /* ty=(Tensor[(16, 12, 4), bool], bool, Tensor[(11, 33), bool], Tensor[(520), float32], Tensor[(5, 9, 2), float32], Tensor[(520), bool], Tensor[(5, 9, 2), float64], Tensor[(5, 9, 2), bool], Tensor[(5, 9, 2), uint16], Tensor[(13, 14, 9), int8], Tensor[(5, 9, 2), float32], Tensor[(520), bool]) */
}

def @func_5106(%var_5104: float32, %var_5105: Tensor[(2), int8]) -> (Tensor[(520), float64], Tensor[(15, 15, 9), bool], Tensor[(7, 3, 14), bool], Tensor[(2, 12, 8), int8], Tensor[(2), int8], Tensor[(192), int8], Tensor[(2), int8], Tensor[(4), float64], Tensor[(2016), uint32]) {
  %541 = fn (%var_5022: float32, %var_5076: Tensor[(2), int8]) -> (Tensor[(520), float64], Tensor[(15, 15, 9), bool], Tensor[(7, 3, 14), bool], Tensor[(2, 12, 8), int8], Tensor[(2), int8], Tensor[(192), int8], Tensor[(2), int8], Tensor[(4), float64], Tensor[(2016), uint32]) {
    %511 = cast(%var_5022, dtype="bool") /* ty=bool */;
    %512 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 15, 9), float32] */, dtype="bool") /* ty=Tensor[(15, 15, 9), bool] */;
    %513 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 3, 14), float32] */, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
    %514 = sin(%513) /* ty=Tensor[(7, 3, 14), float64] */;
    %515 = cast(%var_5022, dtype="float32") /* ty=float32 */;
    %516 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
    %517 = floor_mod(%515, %516) /* ty=Tensor[(7, 3, 14), float32] */;
    %518 = cast(%517, dtype="int32") /* ty=Tensor[(7, 3, 14), int32] */;
    %519 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(7, 3, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %520 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 3, 14), float32] */, dtype="int32") /* ty=Tensor[(7, 3, 14), int32] */;
    %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %522 = bitwise_xor(%520, %521) /* ty=Tensor[(7, 3, 14), int32] */;
    %523 = cast(%522, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
    %524 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %525 = cast(%514, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
    %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %527 = cast(%var_5076, dtype="int8") /* ty=Tensor[(2), int8] */;
    %528 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
    %529 = reshape(%527, newshape=[2, 1, 1]) /* ty=Tensor[(2, 1, 1), int8] */;
    %530 = reshape(%528, newshape=[2, 12, 8]) /* ty=Tensor[(2, 12, 8), int8] */;
    %531 = cast(meta[relay.Constant][31] /* ty=Tensor[(4), float64] */, dtype="float64") /* ty=Tensor[(4), float64] */;
    %532 = cast(meta[relay.Constant][32] /* ty=Tensor[(2016), uint32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
    %533 = reshape(%531, newshape=[4]) /* ty=Tensor[(4), float64] */;
    %534 = reshape(%532, newshape=[2016]) /* ty=Tensor[(2016), uint32] */;
    %535 = @func_2955(%533, %534) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */;
    %536 = @func_4982() /* ty=Tensor[(520), float64] */;
    %537 = greater(%511, %512) /* ty=Tensor[(15, 15, 9), bool] */;
    %538 = logical_and(%525, %526) /* ty=Tensor[(7, 3, 14), bool] */;
    %539 = @func_2622(%529, %530) /* ty=Tensor[(2, 12, 8), int8] */;
    %540 = %535.4;
    (%536, %537, %538, %539, %var_5076, meta[relay.Constant][30] /* ty=Tensor[(192), int8] */, %540, meta[relay.Constant][31] /* ty=Tensor[(4), float64] */, meta[relay.Constant][32] /* ty=Tensor[(2016), uint32] */)
  };
  %541(%var_5104, %var_5105) /* ty=(Tensor[(520), float64], Tensor[(15, 15, 9), bool], Tensor[(7, 3, 14), bool], Tensor[(2, 12, 8), int8], Tensor[(2), int8], Tensor[(192), int8], Tensor[(2), int8], Tensor[(4), float64], Tensor[(2016), uint32]) */
}

def @func_3054(%var_3052: Tensor[(1, 13, 5), float64]) -> Tensor[(14, 13, 5), float64] {
  @func_3051(%var_3052) /* ty=Tensor[(14, 13, 5), float64] */
}

def @func_6445() -> Tensor[(13, 14, 9), bool] {
  %547 = fn () -> Tensor[(13, 14, 9), bool] {
    %542 = @func_4786() /* ty=Tensor[(13, 14, 9), int8] */;
    %543 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 14, 9), int8] */, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%542, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%545, %546) /* ty=Tensor[(13, 14, 9), bool] */
  };
  %547() /* ty=Tensor[(13, 14, 9), bool] */
}

def @func_3051(%var_3045: Tensor[(1, 13, 5), float64]) -> Tensor[(14, 13, 5), float64] {
  %548 = cast(%var_3045, dtype="float64") /* ty=Tensor[(1, 13, 5), float64] */;
  %549 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 5), float64] */;
  power(%548, %549) /* ty=Tensor[(14, 13, 5), float64] */
}

def @func_6642() -> (Tensor[(520), float32], Tensor[(520, 1), float32], Tensor[(1638), int8]) {
  %556 = fn () -> (Tensor[(520), float32], Tensor[(520, 1), float32], Tensor[(1638), int8]) {
    %550 = @func_3081() /* ty=(Tensor[(520), float32],) */;
    %551 = cast(meta[relay.Constant][35] /* ty=Tensor[(1638), int8] */, dtype="int8") /* ty=Tensor[(1638), int8] */;
    %552 = reshape(%551, newshape=[1638]) /* ty=Tensor[(1638), int8] */;
    %553 = @func_6390(%552) /* ty=(Tensor[(520, 1), float32], Tensor[(13, 14, 9), float32], Tensor[(1638), int8]) */;
    %554 = %550.0;
    %555 = %553.0;
    (%554, %555, meta[relay.Constant][35] /* ty=Tensor[(1638), int8] */)
  };
  %556() /* ty=(Tensor[(520), float32], Tensor[(520, 1), float32], Tensor[(1638), int8]) */
}

def @func_4949() -> (Tensor[(520), float32], Tensor[(520), bool]) {
  %565 = fn () -> (Tensor[(520), float32], Tensor[(520), bool]) {
    %557 = @func_4463() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool]) */;
    %558 = %557.1;
    %559 = cast(%558, dtype="float32") /* ty=Tensor[(520), float32] */;
    %560 = log2(%559) /* ty=Tensor[(520), float32] */;
    %561 = cast(%560, dtype="float32") /* ty=Tensor[(520), float32] */;
    %562 = reshape(%561, newshape=[520]) /* ty=Tensor[(520), float32] */;
    %563 = @func_4337(%562) /* ty=(Tensor[(520), bool], Tensor[(520), bool]) */;
    %564 = %563.0;
    (%560, %564)
  };
  %565() /* ty=(Tensor[(520), float32], Tensor[(520), bool]) */
}

def @func_1676(%var_1611: Tensor[(8, 5, 6), float64], %var_1663: uint32) -> (Tensor[(8, 5, 6), float32], Tensor[(8, 5, 6), float32], Tensor[(8, 5, 13), uint32], uint32, Tensor[(520), uint32], Tensor[(520), uint8], Tensor[(126), int32], Tensor[(768), float64]) {
  %566 = cast(%var_1611, dtype="float64") /* ty=Tensor[(8, 5, 6), float64] */;
  %567 = sigmoid(%566) /* ty=Tensor[(8, 5, 6), float64] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(8, 5, 6), float32] */;
  %569 = cast(%567, dtype="float32") /* ty=Tensor[(8, 5, 6), float32] */;
  %570 = cast(%var_1663, dtype="uint32") /* ty=uint32 */;
  %571 = cast(meta[relay.Constant][36] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %572 = reshape(%570, newshape=[]) /* ty=uint32 */;
  %573 = reshape(%571, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint32] */;
  %574 = cast(meta[relay.Constant][37] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %575 = cast(meta[relay.Constant][37] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %576 = cast(meta[relay.Constant][38] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %577 = reshape(%574, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %578 = reshape(%575, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int32] */;
  %579 = reshape(%576, newshape=[2, 384]) /* ty=Tensor[(2, 384), float64] */;
  %580 = @func_905(%577, %578, %579) /* ty=(Tensor[(14, 3, 3), int32], Tensor[(16, 12, 4), float64], Tensor[(2, 384), float64], Tensor[(10, 13, 4), uint8], Tensor[(520), uint8]) */;
  %581 = sinh(%568) /* ty=Tensor[(8, 5, 6), float32] */;
  %582 = exp(%569) /* ty=Tensor[(8, 5, 6), float32] */;
  %583 = @func_1106(%572, %573) /* ty=Tensor[(8, 5, 13), uint32] */;
  %584 = %580.4;
  (%581, %582, %583, %var_1663, meta[relay.Constant][36] /* ty=Tensor[(520), uint32] */, %584, meta[relay.Constant][37] /* ty=Tensor[(126), int32] */, meta[relay.Constant][38] /* ty=Tensor[(768), float64] */)
}

def @func_4983() -> Tensor[(520), float64] {
  %589 = fn () -> Tensor[(520), float64] {
    %585 = @func_3851() /* ty=Tensor[(520), float32] */;
    %586 = cast(%585, dtype="float64") /* ty=Tensor[(520), float64] */;
    %587 = sinh(%586) /* ty=Tensor[(520), float64] */;
    %588 = cast(%587, dtype="float64") /* ty=Tensor[(520), float64] */;
    log(%588) /* ty=Tensor[(520), float64] */
  };
  %589() /* ty=Tensor[(520), float64] */
}

def @func_3298() -> Tensor[(13, 14, 9), int8] {
  @func_3296() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_5691(%var_5689: Tensor[(1, 286), float64]) -> (Tensor[(13, 14, 9), float64], Tensor[(11, 2, 13), int32], Tensor[(1, 286), float64]) {
  @func_5688(%var_5689) /* ty=(Tensor[(13, 14, 9), float64], Tensor[(11, 2, 13), int32], Tensor[(1, 286), float64]) */
}

def @func_6775() -> Tensor[(520), float32] {
  %590 = fn () -> Tensor[(520), float32] {
    @func_3851() /* ty=Tensor[(520), float32] */
  };
  %590() /* ty=Tensor[(520), float32] */
}

def @func_5717() -> Tensor[(13, 14, 9), int8] {
  @func_5715() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_184(%var_182: Tensor[(14, 11, 1), uint16]) -> (Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) {
  @func_181(%var_182) /* ty=(Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) */
}

def @func_4861(%var_4860: bool) -> (Tensor[(768), float64], Tensor[(195), bool], Tensor[(13, 14, 9), float32], Tensor[(520), float32], Tensor[(520), bool]) {
  %607 = fn (%var_4834: bool) -> (Tensor[(768), float64], Tensor[(195), bool], Tensor[(13, 14, 9), float32], Tensor[(520), float32], Tensor[(520), bool]) {
    %591 = cast(%var_4834, dtype="bool") /* ty=bool */;
    %592 = cast(meta[relay.Constant][39] /* ty=Tensor[(195), bool] */, dtype="bool") /* ty=Tensor[(195), bool] */;
    %593 = reshape(%591, newshape=[]) /* ty=bool */;
    %594 = reshape(%592, newshape=[195]) /* ty=Tensor[(195), bool] */;
    %595 = @func_3168(%593, %594) /* ty=(Tensor[(768), float64], Tensor[(13, 15, 1), bool], bool, Tensor[(195), bool]) */;
    %596 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
    %597 = cast(%596, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
    %598 = cast(%var_4834, dtype="float32") /* ty=float32 */;
    %599 = @func_3081() /* ty=(Tensor[(520), float32],) */;
    %600 = %599.0;
    %601 = cast(%600, dtype="float32") /* ty=Tensor[(520), float32] */;
    %602 = reshape(%601, newshape=[520]) /* ty=Tensor[(520), float32] */;
    %603 = @func_4337(%602) /* ty=(Tensor[(520), bool], Tensor[(520), bool]) */;
    %604 = %595.0;
    %605 = divide(%597, %598) /* ty=Tensor[(13, 14, 9), float32] */;
    %606 = %603.1;
    (%604, meta[relay.Constant][39] /* ty=Tensor[(195), bool] */, %605, %600, %606)
  };
  %607(%var_4860) /* ty=(Tensor[(768), float64], Tensor[(195), bool], Tensor[(13, 14, 9), float32], Tensor[(520), float32], Tensor[(520), bool]) */
}

def @func_5332() -> (Tensor[(13, 14, 9), int8],) {
  %609 = fn () -> (Tensor[(13, 14, 9), int8],) {
    %608 = @func_3755() /* ty=Tensor[(13, 14, 9), int8] */;
    (%608,)
  };
  %609() /* ty=(Tensor[(13, 14, 9), int8],) */
}

def @func_2803() -> Tensor[(13, 14, 9), int8] {
  @func_2801() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_2887() -> (Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) {
  @func_2885() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */
}

def @func_3317() -> (Tensor[(13, 14, 9), int8],) {
  %612 = fn () -> (Tensor[(13, 14, 9), int8],) {
    %610 = @func_3107() /* ty=(Tensor[(13, 14, 9), int8],) */;
    %611 = %610.0;
    (%611,)
  };
  %612() /* ty=(Tensor[(13, 14, 9), int8],) */
}

def @func_6741() -> Tensor[(520), bool] {
  %613 = @func_4463() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool]) */;
  %613.1
}

def @func_6497(%var_6495: Tensor[(13, 14, 9), int8], %var_6496: Tensor[(520), float32]) -> (Tensor[(13, 14, 9), int8], Tensor[(520), uint8], Tensor[(13, 14, 9), uint64]) {
  @func_6493(%var_6495, %var_6496) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), uint8], Tensor[(13, 14, 9), uint64]) */
}

def @func_3841(%var_3839: Tensor[(11, 2, 13), float64]) -> (Tensor[(13, 14, 9), int8], Tensor[(11, 2, 13), int32]) {
  @func_3838(%var_3839) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(11, 2, 13), int32]) */
}

def @func_4727() -> (Tensor[(14, 11, ?), int32],) {
  %614 = @func_4394() /* ty=(Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(546, 3), float64], Tensor[(520), bool], Tensor[(520, 1), uint8], Tensor[(13, 14, 9), int8], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */;
  %615 = %614.6;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
  %617 = tan(%616) /* ty=Tensor[(14, 11, 1), float64] */;
  %618 = cast(%617, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
  %619 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%615, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %622 = power(%620, %621) /* ty=Tensor[(14, 11, ?), float64] */;
  %623 = cast(%615, dtype="int32") /* ty=Tensor[(14, 11, 1), int32] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="int32") /* ty=Tensor[(14, 11, ?), int32] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %627 = subtract(%625, %626) /* ty=Tensor[(14, 11, ?), int32] */;
  (%627,)
}

def @func_3544(%var_3510: Tensor[(13, 14, 9), int8], %var_3520: Tensor[(520, 1), uint8]) -> (Tensor[(13, 14, 9), float32], Tensor[(10, 13, 4), uint8], Tensor[(520, 1), uint8], Tensor[(14, 11, 1), float32], Tensor[(154), uint16]) {
  %628 = @func_3399() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %629 = %628.0;
  %630 = cast(%var_3510, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%629, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %634 = cast(%var_3520, dtype="uint8") /* ty=Tensor[(520, 1), uint8] */;
  %635 = reshape(%634, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), uint8] */;
  %636 = @func_292(%635) /* ty=(Tensor[(10, 13, 4), uint8],) */;
  %637 = cast(meta[relay.Constant][40] /* ty=Tensor[(154), uint16] */, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %638 = reshape(%637, newshape=[14, 11, 1]) /* ty=Tensor[(14, 11, 1), uint16] */;
  %639 = @func_181(%638) /* ty=(Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) */;
  %640 = mod(%632, %633) /* ty=Tensor[(13, 14, 9), float32] */;
  %641 = %636.0;
  %642 = %639.1;
  (%640, %641, %var_3520, %642, meta[relay.Constant][40] /* ty=Tensor[(154), uint16] */)
}

def @func_4822() -> (Tensor[(13, 14, 9), int8], Tensor[(520), float32]) {
  %646 = fn () -> (Tensor[(13, 14, 9), int8], Tensor[(520), float32]) {
    %643 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
    %644 = %643.0;
    %645 = @func_3851() /* ty=Tensor[(520), float32] */;
    (%644, %645)
  };
  %646() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), float32]) */
}

def @func_5715() -> Tensor[(13, 14, 9), int8] {
  %647 = @func_5327() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %647.0
}

def @func_6119() -> (Tensor[(520), float32],) {
  %648 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %649 = %648.0;
  (%649,)
}

def @main(%var_7339: Tensor[(520), float32]) -> (Tensor[(4), float64], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(520), float64]) {
  %650 = cast(meta[relay.Constant][41] /* ty=Tensor[(4), float64] */, dtype="float64") /* ty=Tensor[(4), float64] */;
  %651 = cast(meta[relay.Constant][42] /* ty=Tensor[(2016), uint32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %652 = reshape(%650, newshape=[4]) /* ty=Tensor[(4), float64] */;
  %653 = reshape(%651, newshape=[2016]) /* ty=Tensor[(2016), uint32] */;
  %654 = @func_2958(%652, %653) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */;
  %655 = @func_4284() /* ty=(Tensor[(520), float32], Tensor[(13, 14, 9), int8], Tensor[(520, 1), uint8]) */;
  %656 = %655.0;
  %657 = cast(%var_7339, dtype="float64") /* ty=Tensor[(520), float64] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(1), int32] */;
  %659 = cast(%656, dtype="float64") /* ty=Tensor[(520), float64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?), float64] */;
  %661 = %654.2;
  %662 = floor_mod(%659, %660) /* ty=Tensor[(520), float64] */;
  (%661, meta[relay.Constant][41] /* ty=Tensor[(4), float64] */, meta[relay.Constant][42] /* ty=Tensor[(2016), uint32] */, %662)
}

def @func_3756() -> Tensor[(13, 14, 9), int8] {
  %663 = fn () -> Tensor[(13, 14, 9), int8] {
    @func_3296() /* ty=Tensor[(13, 14, 9), int8] */
  };
  %663() /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_6901(%var_6900: Tensor[(13, 14, 9), int8]) -> (Tensor[(13, 14, 9), float32], Tensor[(13, 14, 9), float64]) {
  %674 = fn (%var_6889: Tensor[(13, 14, 9), int8]) -> (Tensor[(13, 14, 9), float32], Tensor[(13, 14, 9), float64]) {
    %664 = @func_3755() /* ty=Tensor[(13, 14, 9), int8] */;
    %665 = cast(%var_6889, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
    %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
    %667 = cast(%664, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
    %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %669 = cast(%var_6889, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
    %670 = reshape(%669, newshape=[13, 14, 9]) /* ty=Tensor[(13, 14, 9), int8] */;
    %671 = @func_4880(%670) /* ty=(Tensor[(13, 14, 9), float64],) */;
    %672 = power(%667, %668) /* ty=Tensor[(13, 14, 9), float32] */;
    %673 = %671.0;
    (%672, %673)
  };
  %674(%var_6900) /* ty=(Tensor[(13, 14, 9), float32], Tensor[(13, 14, 9), float64]) */
}

def @func_2885() -> (Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) {
  %675 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  %676 = @func_2801() /* ty=Tensor[(13, 14, 9), int8] */;
  (%675, %676)
}

def @func_6972(%var_6970: Tensor[(5, 7, 4), uint32]) -> (Tensor[(5, 7, 4), uint32],) {
  @func_6969(%var_6970) /* ty=(Tensor[(5, 7, 4), uint32],) */
}

def @func_7067(%var_7066: Tensor[(1540), bool]) -> (Tensor[(13, 14, 9), int8], Tensor[(1540), bool], Tensor[(10, 14, 11), float64]) {
  %688 = fn (%var_7045: Tensor[(1540), bool]) -> (Tensor[(13, 14, 9), int8], Tensor[(1540), bool], Tensor[(10, 14, 11), float64]) {
    %677 = @func_5218() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), float32]) */;
    %678 = cast(%var_7045, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %679 = cast(%var_7045, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %680 = cast(%var_7045, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %681 = reshape(%678, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
    %682 = reshape(%679, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
    %683 = reshape(%680, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
    %684 = @func_664(%681, %682, %683) /* ty=Tensor[(10, 14, 11), int16] */;
    %685 = cast(%684, dtype="float64") /* ty=Tensor[(10, 14, 11), float64] */;
    %686 = %677.0;
    %687 = rsqrt(%685) /* ty=Tensor[(10, 14, 11), float64] */;
    (%686, %var_7045, %687)
  };
  %688(%var_7066) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1540), bool], Tensor[(10, 14, 11), float64]) */
}

def @func_6809() -> Tensor[(13, 14, 9), bool] {
  @func_6444() /* ty=Tensor[(13, 14, 9), bool] */
}

def @func_6718() -> (Tensor[(14, 11, ?), bool], Tensor[(14, 11, 1), float32]) {
  %698 = fn () -> (Tensor[(14, 11, ?), bool], Tensor[(14, 11, 1), float32]) {
    %689 = @func_4727() /* ty=(Tensor[(14, 11, ?), int32],) */;
    %690 = %689.0;
    %691 = cast(meta[relay.Constant][43] /* ty=Tensor[(14, 11, 1), int32] */, dtype="bool") /* ty=Tensor[(14, 11, 1), bool] */;
    %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
    %693 = cast(%690, dtype="bool") /* ty=Tensor[(14, 11, ?), bool] */;
    %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %695 = cast(meta[relay.Constant][43] /* ty=Tensor[(14, 11, 1), int32] */, dtype="float32") /* ty=Tensor[(14, 11, 1), float32] */;
    %696 = equal(%693, %694) /* ty=Tensor[(14, 11, ?), bool] */;
    %697 = sinh(%695) /* ty=Tensor[(14, 11, 1), float32] */;
    (%696, %697)
  };
  %698() /* ty=(Tensor[(14, 11, ?), bool], Tensor[(14, 11, 1), float32]) */
}

def @func_1907(%var_1881: Tensor[(14, 7, 5), float32], %var_1882: Tensor[(14, 7, 5), float32], %var_1903: Tensor[(10, 52), uint8]) -> (Tensor[(14, 7, 5), float32], Tensor[(10, 13, 4), uint8], Tensor[(10, 52), uint8]) {
  %699 = cast(%var_1882, dtype="float32") /* ty=Tensor[(14, 7, 5), float32] */;
  %700 = shape_of(%var_1881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%var_1881, dtype="float32") /* ty=Tensor[(14, 7, 5), float32] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %703 = cast(%var_1903, dtype="uint8") /* ty=Tensor[(10, 52), uint8] */;
  %704 = reshape(%703, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), uint8] */;
  %705 = @func_292(%704) /* ty=(Tensor[(10, 13, 4), uint8],) */;
  %706 = add(%701, %702) /* ty=Tensor[(14, 7, 5), float32] */;
  %707 = %705.0;
  (%706, %707, %var_1903)
}

def @func_6943(%var_6933: Tensor[(4, 5, 11), int16], %var_6934: Tensor[(4, 5, 11), int16]) -> (Tensor[(4, 5, 11), bool], Tensor[(13, 14, 9), int8]) {
  %708 = cast(%var_6934, dtype="bool") /* ty=Tensor[(4, 5, 11), bool] */;
  %709 = shape_of(%var_6933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%var_6933, dtype="bool") /* ty=Tensor[(4, 5, 11), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %712 = @func_3399() /* ty=(Tensor[(13, 14, 9), int8],) */;
  %713 = not_equal(%710, %711) /* ty=Tensor[(4, 5, 11), bool] */;
  %714 = %712.0;
  (%713, %714)
}

def @func_5305(%var_5303: Tensor[(520), float64]) -> (Tensor[(520), bool], Tensor[(13, 14, 9), int8], Tensor[(286), float64], Tensor[(520), float64]) {
  @func_5302(%var_5303) /* ty=(Tensor[(520), bool], Tensor[(13, 14, 9), int8], Tensor[(286), float64], Tensor[(520), float64]) */
}

def @func_6493(%var_6467: Tensor[(13, 14, 9), int8], %var_6476: Tensor[(520), float32]) -> (Tensor[(13, 14, 9), int8], Tensor[(520), uint8], Tensor[(13, 14, 9), uint64]) {
  %715 = @func_3493() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(65), float64], Tensor[(16, 12, 4), float64], Tensor[(126, 1), int32], Tensor[(768), float64], Tensor[(14, 13, 5), bool], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */;
  %716 = %715.6;
  %717 = cast(%var_6467, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %721 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %722 = %721.0;
  %723 = cast(%var_6476, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(1), int32] */;
  %725 = cast(%722, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %727 = subtract(%719, %720) /* ty=Tensor[(13, 14, 9), int8] */;
  %728 = bitwise_or(%725, %726) /* ty=Tensor[(520), uint8] */;
  %729 = @func_5373() /* ty=Tensor[(13, 14, 9), uint64] */;
  (%727, %728, %729)
}

def @func_7141(%var_7120: bool, %var_7121: Tensor[(363), bool]) -> (Tensor[(520), float32], Tensor[(16, 12, 4), bool], bool, Tensor[(363), bool], Tensor[(14, 11, ?), float64], Tensor[(13, 14, 9), int8], Tensor[(1, 4), float64], Tensor[(2016), uint32]) {
  %730 = @func_6051() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool], Tensor[(520), float32]) */;
  %731 = %730.2;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(520), float32] */;
  %733 = cast(%var_7120, dtype="bool") /* ty=bool */;
  %734 = cast(%var_7121, dtype="bool") /* ty=Tensor[(363), bool] */;
  %735 = reshape(%733, newshape=[]) /* ty=bool */;
  %736 = reshape(%734, newshape=[3, 11, 11]) /* ty=Tensor[(3, 11, 11), bool] */;
  %737 = @func_4643(%735, %736) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(13, 14, 9), int8], Tensor[(16, 12, 4), bool]) */;
  %738 = @func_6717() /* ty=(Tensor[(14, 11, ?), bool], Tensor[(14, 11, 1), float32]) */;
  %739 = %738.0;
  %740 = cast(%739, dtype="float64") /* ty=Tensor[(14, 11, ?), float64] */;
  %741 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 4), float64] */;
  %742 = cast(meta[relay.Constant][45] /* ty=Tensor[(2016), uint32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %743 = reshape(%741, newshape=[4]) /* ty=Tensor[(4), float64] */;
  %744 = reshape(%742, newshape=[2016]) /* ty=Tensor[(2016), uint32] */;
  %745 = @func_2955(%743, %744) /* ty=(Tensor[(13, 14, 9), int8], Tensor[(1008, 2), uint32], Tensor[(4), float64], Tensor[(2016), uint32], Tensor[(2), int8]) */;
  %746 = atanh(%732) /* ty=Tensor[(520), float32] */;
  %747 = %737.2;
  %748 = sin(%740) /* ty=Tensor[(14, 11, ?), float64] */;
  %749 = %745.0;
  (%746, %747, %var_7120, %var_7121, %748, %749, meta[relay.Constant][44] /* ty=Tensor[(1, 4), float64] */, meta[relay.Constant][45] /* ty=Tensor[(2016), uint32] */)
}

def @func_5780(%var_5779: Tensor[(14, 9, 11), float32]) -> (Tensor[(14, 9, 11), float32], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) {
  %755 = fn (%var_5760: Tensor[(14, 9, 11), float32]) -> (Tensor[(14, 9, 11), float32], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) {
    %750 = cast(%var_5760, dtype="float32") /* ty=Tensor[(14, 9, 11), float32] */;
    %751 = @func_4463() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(520), bool]) */;
    %752 = log10(%750) /* ty=Tensor[(14, 9, 11), float32] */;
    %753 = @func_3859() /* ty=Tensor[(13, 14, 9), int8] */;
    %754 = %751.0;
    (%752, %753, %754)
  };
  %755(%var_5779) /* ty=(Tensor[(14, 9, 11), float32], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8]) */
}

def @func_2395(%var_2384: uint32, %var_2385: Tensor[(12, 14, 12), uint32]) -> (Tensor[(12, 14, 12), uint32], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) {
  %756 = cast(%var_2384, dtype="uint32") /* ty=uint32 */;
  %757 = cast(%var_2385, dtype="uint32") /* ty=Tensor[(12, 14, 12), uint32] */;
  %758 = cast(meta[relay.Constant][46] /* ty=Tensor[(154), uint16] */, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %759 = reshape(%758, newshape=[14, 11, 1]) /* ty=Tensor[(14, 11, 1), uint16] */;
  %760 = @func_181(%759) /* ty=(Tensor[(14, 11, 1), uint16], Tensor[(14, 11, 1), float32]) */;
  %761 = logical_xor(%756, %757) /* ty=Tensor[(12, 14, 12), uint32] */;
  %762 = %760.0;
  (%761, %762, meta[relay.Constant][46] /* ty=Tensor[(154), uint16] */)
}

def @func_6003(%var_6002: Tensor[(432, 1), float32]) -> (Tensor[(10, 13, 4), uint8], Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(432, 490), bool]) {
  %788 = fn (%var_5987: Tensor[(432, 1), float32]) -> (Tensor[(10, 13, 4), uint8], Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(432, 490), bool]) {
    %763 = @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */;
    %764 = cast(meta[relay.Constant][47] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %765 = cast(meta[relay.Constant][47] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %766 = %763.1;
    %767 = cast(%766, dtype="uint8") /* ty=Tensor[(10, 13, 4), uint8] */;
    %768 = reshape(%764, newshape=[14, 7, 5]) /* ty=Tensor[(14, 7, 5), float32] */;
    %769 = reshape(%765, newshape=[14, 7, 5]) /* ty=Tensor[(14, 7, 5), float32] */;
    %770 = reshape(%767, newshape=[10, 52]) /* ty=Tensor[(10, 52), uint8] */;
    %771 = @func_1907(%768, %769, %770) /* ty=(Tensor[(14, 7, 5), float32], Tensor[(10, 13, 4), uint8], Tensor[(10, 52), uint8]) */;
    %772 = @func_3316() /* ty=(Tensor[(13, 14, 9), int8],) */;
    %773 = @func_3107() /* ty=(Tensor[(13, 14, 9), int8],) */;
    %774 = cast(%var_5987, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
    %775 = cast(%var_5987, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
    %776 = reshape(%774, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), float32] */;
    %777 = reshape(%775, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), float32] */;
    %778 = @func_3646(%776, %777) /* ty=(Tensor[(6, 12, 6), float32], Tensor[(13, 14, 9), int8]) */;
    %779 = cast(meta[relay.Constant][47] /* ty=Tensor[(490), float32] */, dtype="bool") /* ty=Tensor[(490), bool] */;
    %780 = cast(%var_5987, dtype="bool") /* ty=Tensor[(432, 1), bool] */;
    %781 = @func_3296() /* ty=Tensor[(13, 14, 9), int8] */;
    %782 = %771.1;
    %783 = %772.0;
    %784 = @func_3859() /* ty=Tensor[(13, 14, 9), int8] */;
    %785 = %773.0;
    %786 = %778.1;
    %787 = less_equal(%779, %780) /* ty=Tensor[(432, 490), bool] */;
    (%766, %781, %782, %783, %784, %785, %786, %787)
  };
  %788(%var_6002) /* ty=(Tensor[(10, 13, 4), uint8], Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(13, 14, 9), int8], Tensor[(432, 490), bool]) */
}

def @func_7247() -> (Tensor[(520), float32], Tensor[(520), float32]) {
  %793 = fn () -> (Tensor[(520), float32], Tensor[(520), float32]) {
    %789 = @func_3081() /* ty=(Tensor[(520), float32],) */;
    %790 = @func_6119() /* ty=(Tensor[(520), float32],) */;
    %791 = %789.0;
    %792 = %790.0;
    (%791, %792)
  };
  %793() /* ty=(Tensor[(520), float32], Tensor[(520), float32]) */
}

def @func_3891() -> (Tensor[(520), bool],) {
  %801 = fn () -> (Tensor[(520), bool],) {
    %794 = @func_3081() /* ty=(Tensor[(520), float32],) */;
    %795 = %794.0;
    %796 = cast(meta[relay.Constant][48] /* ty=Tensor[(520), float32] */, dtype="bool") /* ty=Tensor[(520), bool] */;
    %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(1), int32] */;
    %798 = cast(%795, dtype="bool") /* ty=Tensor[(520), bool] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?), bool] */;
    %800 = equal(%798, %799) /* ty=Tensor[(520), bool] */;
    (%800,)
  };
  %801() /* ty=(Tensor[(520), bool],) */
}

def @func_3083() -> (Tensor[(520), float32],) {
  @func_3081() /* ty=(Tensor[(520), float32],) */
}

def @func_3171(%var_3169: bool, %var_3170: Tensor[(195), bool]) -> (Tensor[(768), float64], Tensor[(13, 15, 1), bool], bool, Tensor[(195), bool]) {
  %809 = fn (%var_3157: bool, %var_3158: Tensor[(195), bool]) -> (Tensor[(768), float64], Tensor[(13, 15, 1), bool], bool, Tensor[(195), bool]) {
    %802 = @func_2929() /* ty=(Tensor[(13, 14, 9), int8], Tensor[(10, 13, 4), uint8], Tensor[(520), float32], Tensor[(5, 8, 8), bool], Tensor[(320), float32], Tensor[(10, 13, 4), uint8], Tensor[(126), int32], Tensor[(768), float64], Tensor[(13, 14, 9), int8]) */;
    %803 = cast(%var_3157, dtype="bool") /* ty=bool */;
    %804 = cast(%var_3158, dtype="bool") /* ty=Tensor[(195), bool] */;
    %805 = reshape(%803, newshape=[]) /* ty=bool */;
    %806 = reshape(%804, newshape=[13, 15, 1]) /* ty=Tensor[(13, 15, 1), bool] */;
    %807 = %802.7;
    %808 = @func_3021(%805, %806) /* ty=Tensor[(13, 15, 1), bool] */;
    (%807, %808, %var_3157, %var_3158)
  };
  %809(%var_3169, %var_3170) /* ty=(Tensor[(768), float64], Tensor[(13, 15, 1), bool], bool, Tensor[(195), bool]) */
}

def @func_294(%var_293: Tensor[(10, 13, 4), uint8]) -> (Tensor[(10, 13, 4), uint8],) {
  %815 = fn (%var_282: Tensor[(10, 13, 4), uint8]) -> (Tensor[(10, 13, 4), uint8],) {
    %810 = cast(meta[relay.Constant][49] /* ty=Tensor[(10, 13, 4), uint8] */, dtype="uint8") /* ty=Tensor[(10, 13, 4), uint8] */;
    %811 = shape_of(%var_282, dtype="int32") /* ty=Tensor[(3), int32] */;
    %812 = cast(%var_282, dtype="uint8") /* ty=Tensor[(10, 13, 4), uint8] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %814 = right_shift(%812, %813) /* ty=Tensor[(10, 13, 4), uint8] */;
    (%814,)
  };
  %815(%var_293) /* ty=(Tensor[(10, 13, 4), uint8],) */
}

def @func_3024(%var_3022: bool, %var_3023: Tensor[(13, 15, 1), bool]) -> Tensor[(13, 15, 1), bool] {
  %818 = fn (%var_3008: bool, %var_3009: Tensor[(13, 15, 1), bool]) -> Tensor[(13, 15, 1), bool] {
    %816 = cast(%var_3008, dtype="bool") /* ty=bool */;
    %817 = cast(%var_3009, dtype="bool") /* ty=Tensor[(13, 15, 1), bool] */;
    logical_and(%816, %817) /* ty=Tensor[(13, 15, 1), bool] */
  };
  %818(%var_3022, %var_3023) /* ty=Tensor[(13, 15, 1), bool] */
}

def @func_6947(%var_6945: Tensor[(4, 5, 11), int16], %var_6946: Tensor[(4, 5, 11), int16]) -> (Tensor[(4, 5, 11), bool], Tensor[(13, 14, 9), int8]) {
  @func_6943(%var_6945, %var_6946) /* ty=(Tensor[(4, 5, 11), bool], Tensor[(13, 14, 9), int8]) */
}

def @func_4340(%var_4338: Tensor[(520), float32]) -> (Tensor[(520), bool], Tensor[(520), bool]) {
  @func_4337(%var_4338) /* ty=(Tensor[(520), bool], Tensor[(520), bool]) */
}

def @func_2833(%var_2804: Tensor[(4, 1, 1), float64], %var_2810: Tensor[(1008, 2), uint32], %var_2828: Tensor[(2, 1), int8]) -> (Tensor[(4, 1, 1), float64], Tensor[(154), uint16], uint32, Tensor[(1008, 2), uint32], Tensor[(12, 14, 12), uint32], Tensor[(2, 12, 8), int8], Tensor[(2, 1), int8], Tensor[(192), int8]) {
  %819 = cast(%var_2804, dtype="float64") /* ty=Tensor[(4, 1, 1), float64] */;
  %820 = cast(meta[relay.Constant][50] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %821 = cast(%var_2810, dtype="uint32") /* ty=Tensor[(1008, 2), uint32] */;
  %822 = reshape(%820, newshape=[]) /* ty=uint32 */;
  %823 = reshape(%821, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), uint32] */;
  %824 = @func_2395(%822, %823) /* ty=(Tensor[(12, 14, 12), uint32], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */;
  %825 = cast(meta[relay.Constant][50] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %826 = cast(%var_2810, dtype="uint32") /* ty=Tensor[(1008, 2), uint32] */;
  %827 = reshape(%825, newshape=[]) /* ty=uint32 */;
  %828 = reshape(%826, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), uint32] */;
  %829 = @func_2395(%827, %828) /* ty=(Tensor[(12, 14, 12), uint32], Tensor[(14, 11, 1), uint16], Tensor[(154), uint16]) */;
  %830 = cast(%var_2828, dtype="int8") /* ty=Tensor[(2, 1), int8] */;
  %831 = cast(meta[relay.Constant][51] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %832 = reshape(%830, newshape=[2, 1, 1]) /* ty=Tensor[(2, 1, 1), int8] */;
  %833 = reshape(%831, newshape=[2, 12, 8]) /* ty=Tensor[(2, 12, 8), int8] */;
  %834 = asinh(%819) /* ty=Tensor[(4, 1, 1), float64] */;
  %835 = %824.2;
  %836 = %829.0;
  %837 = @func_2622(%832, %833) /* ty=Tensor[(2, 12, 8), int8] */;
  (%834, %835, meta[relay.Constant][50] /* ty=uint32 */, %var_2810, %836, %837, %var_2828, meta[relay.Constant][51] /* ty=Tensor[(192), int8] */)
}

def @func_4337(%var_4323: Tensor[(520), float32]) -> (Tensor[(520), bool], Tensor[(520), bool]) {
  %838 = @func_3081() /* ty=(Tensor[(520), float32],) */;
  %839 = %838.0;
  %840 = cast(%var_4323, dtype="bool") /* ty=Tensor[(520), bool] */;
  %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(1), int32] */;
  %842 = cast(%839, dtype="bool") /* ty=Tensor[(520), bool] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?), bool] */;
  %844 = @func_3890() /* ty=(Tensor[(520), bool],) */;
  %845 = less_equal(%842, %843) /* ty=Tensor[(520), bool] */;
  %846 = %844.0;
  (%845, %846)
}

def @func_1018(%var_1016: Tensor[(5, 8, 8), float32], %var_1017: Tensor[(5, 8, 8), float32]) -> (Tensor[(10, 14, 11), int16], Tensor[(1540), bool], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(5, 8, 8), bool], Tensor[(5, 8, 8), float64]) {
  %872 = fn (%var_953: Tensor[(5, 8, 8), float32], %var_1008: Tensor[(5, 8, 8), float32]) -> (Tensor[(10, 14, 11), int16], Tensor[(1540), bool], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(5, 8, 8), bool], Tensor[(5, 8, 8), float64]) {
    %847 = cast(meta[relay.Constant][52] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %848 = cast(meta[relay.Constant][52] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %849 = cast(meta[relay.Constant][52] /* ty=Tensor[(1540), bool] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %850 = reshape(%847, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
    %851 = reshape(%848, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
    %852 = reshape(%849, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), bool] */;
    %853 = cast(meta[relay.Constant][53] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
    %854 = cast(meta[relay.Constant][53] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
    %855 = reshape(%853, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
    %856 = reshape(%854, newshape=[16, 12, 4]) /* ty=Tensor[(16, 12, 4), float64] */;
    %857 = @func_113(%855, %856) /* ty=(Tensor[(16, 12, 4), float64],) */;
    %858 = cast(%var_953, dtype="float32") /* ty=Tensor[(5, 8, 8), float32] */;
    %859 = sinh(%858) /* ty=Tensor[(5, 8, 8), float32] */;
    %860 = cast(%var_953, dtype="bool") /* ty=Tensor[(5, 8, 8), bool] */;
    %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
    %862 = cast(%859, dtype="bool") /* ty=Tensor[(5, 8, 8), bool] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %864 = cast(%var_1008, dtype="float64") /* ty=Tensor[(5, 8, 8), float64] */;
    %865 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
    %866 = cast(%859, dtype="float64") /* ty=Tensor[(5, 8, 8), float64] */;
    %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %868 = @func_664(%850, %851, %852) /* ty=Tensor[(10, 14, 11), int16] */;
    %869 = %857.0;
    %870 = greater_equal(%862, %863) /* ty=Tensor[(5, 8, 8), bool] */;
    %871 = floor_mod(%866, %867) /* ty=Tensor[(5, 8, 8), float64] */;
    (%868, meta[relay.Constant][52] /* ty=Tensor[(1540), bool] */, %869, meta[relay.Constant][53] /* ty=Tensor[(768), float64] */, %870, %871)
  };
  %872(%var_1016, %var_1017) /* ty=(Tensor[(10, 14, 11), int16], Tensor[(1540), bool], Tensor[(16, 12, 4), float64], Tensor[(768), float64], Tensor[(5, 8, 8), bool], Tensor[(5, 8, 8), float64]) */
}

def @func_6969(%var_6956: Tensor[(5, 7, 4), uint32]) -> (Tensor[(5, 7, 4), uint32],) {
  %873 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 7, 4), uint32] */, dtype="uint32") /* ty=Tensor[(5, 7, 4), uint32] */;
  %874 = shape_of(%var_6956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%var_6956, dtype="uint32") /* ty=Tensor[(5, 7, 4), uint32] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %877 = subtract(%875, %876) /* ty=Tensor[(5, 7, 4), uint32] */;
  (%877,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen116/build/output.py", line 1973, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:50:52] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

