==========mod==========
#[version = "0.0.5"]
def @func_11327() -> (Tensor[(260), bool], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) {
  %0 = @func_2689() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %2 = reshape(%1, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int16] */;
  %3 = @func_1867(%2) /* ty=(Tensor[(11, 4, 3), float64],) */;
  %4 = %0.2;
  %5 = %3.0;
  (%4, %5, meta[relay.Constant][0] /* ty=Tensor[(132), int16] */)
}

def @func_13507() -> (Tensor[(1, 24), uint32],) {
  %6 = @func_7279() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(1, 24), uint32], Tensor[(?, 546), int16]) */;
  %7 = %6.1;
  (%7,)
}

def @func_10262() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(10, 2, 13), bool], Tensor[(64), bool]) {
  %8 = @func_3725() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %9 = @func_3542() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %11 = reshape(%10, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %12 = @func_7223(%11) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 4, 3), uint8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(2, 192), uint32], Tensor[(64), float32], Tensor[(320), float32]) */;
  %13 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %14 = cast(meta[relay.Constant][2] /* ty=Tensor[(64), float32] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %15 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(64), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(64), float32] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?), bool] */;
  %18 = %8.0;
  %19 = %9.1;
  %20 = %12.3;
  %21 = %13.0;
  %22 = greater(%16, %17) /* ty=Tensor[(64), bool] */;
  (%18, %19, %20, %21, %22)
}

def @func_12940() -> (Tensor[(3, 16, 6), int64], Tensor[(3, 16, 6), int64]) {
  %23 = @func_12227() /* ty=(Tensor[(64), float32], Tensor[(3, 16, 6), int64]) */;
  %24 = %23.1;
  %25 = @func_7463() /* ty=Tensor[(3, 16, 6), int64] */;
  (%24, %25)
}

def @func_12516() -> (Tensor[(10, 2, 13), float64],) {
  %26 = @func_5452() /* ty=Tensor[(10, 2, 13), bool] */;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %28 = log(%27) /* ty=Tensor[(10, 2, 13), float32] */;
  %29 = cast(%28, dtype="float64") /* ty=Tensor[(10, 2, 13), float64] */;
  %30 = log2(%29) /* ty=Tensor[(10, 2, 13), float64] */;
  (%30,)
}

def @func_6688(%var_6685: Tensor[(384), uint32]) -> (Tensor[(320), float32], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32]) {
  %31 = @func_6474() /* ty=(Tensor[(320), float32],) */;
  %32 = cast(meta[relay.Constant][3] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %33 = cast(meta[relay.Constant][4] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %34 = cast(%var_6685, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %35 = %31.0;
  %36 = cast(%35, dtype="bool") /* ty=Tensor[(320), bool] */;
  %37 = reshape(%32, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %38 = reshape(%33, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %39 = reshape(%34, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %40 = reshape(%36, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), bool] */;
  %41 = @func_2041(%37, %38, %39, %40) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) */;
  %42 = %41.2;
  (%35, %42, meta[relay.Constant][3] /* ty=Tensor[(576), float32] */, meta[relay.Constant][4] /* ty=Tensor[(24), uint32] */, %var_6685)
}

def @func_6221() -> (Tensor[(3, 16, 6), bool], Tensor[(12, 8, 9), float32], Tensor[(12, 8, 9), float32]) {
  %43 = @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */;
  %44 = @func_4920() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %45 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  %46 = %43.0;
  %47 = %44.2;
  (%45, %46, %47)
}

def @func_8666() -> Tensor[(64), float32] {
  %48 = @func_5353() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
  %48.1
}

def @func_4855() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) {
  %49 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %52 = cast(meta[relay.Constant][5] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %53 = reshape(%51, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float32] */;
  %54 = reshape(%52, newshape=[132]) /* ty=Tensor[(132), int16] */;
  %55 = @func_2099(%53, %54) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */;
  %56 = %55.0;
  (%50, %56, meta[relay.Constant][5] /* ty=Tensor[(132), int16] */)
}

def @func_13427() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) {
  %57 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %58 = @func_8185() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(6, 11, 5), int16]) */;
  %59 = %57.0;
  %60 = %58.0;
  (%59, %60)
}

def @func_2536() -> (Tensor[(3, 16, 6), bool],) {
  %61 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  (%61,)
}

def @func_5074() -> (Tensor[(3, 16, 6), float32], Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), bool]) {
  %62 = @func_4536() /* ty=Tensor[(3, 16, 6), float32] */;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %64 = cast(meta[relay.Constant][6] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %65 = reshape(%63, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float32] */;
  %66 = reshape(%64, newshape=[132]) /* ty=Tensor[(132), int16] */;
  %67 = @func_2099(%65, %66) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */;
  %68 = %67.1;
  %69 = cast(meta[relay.Constant][6] /* ty=Tensor[(132), int16] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%68, dtype="uint8") /* ty=Tensor[(11, 4, 3), uint8] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %73 = cast(meta[relay.Constant][6] /* ty=Tensor[(132), int16] */, dtype="bool") /* ty=Tensor[(132), bool] */;
  %74 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%68, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %77 = right_shift(%71, %72) /* ty=Tensor[(11, 4, 3), uint8] */;
  %78 = not_equal(%75, %76) /* ty=Tensor[(11, 4, 3), bool] */;
  (%62, %77, %78)
}

def @func_12309() -> Tensor[(3, 16, 6), bool] {
  %79 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
  %79.0
}

def @func_12558() -> (Tensor[(9, 3, 13), float64], Tensor[(3, 16, 6), bool]) {
  %80 = @func_11082() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int64]) */;
  %81 = @func_11351() /* ty=Tensor[(9, 3, 13), float64] */;
  %82 = %80.0;
  (%81, %82)
}

def @func_13624() -> (Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), int64], Tensor[(392), float64], Tensor[(3, 16, 6), bool]) {
  %83 = @func_6774() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %84 = cast(meta[relay.Constant][7] /* ty=Tensor[(392), float64] */, dtype="float64") /* ty=Tensor[(392), float64] */;
  %85 = reshape(%84, newshape=[392]) /* ty=Tensor[(392), float64] */;
  %86 = @func_12270(%85) /* ty=(Tensor[(3, 16, 6), int64], Tensor[(6, 11, 5), int16], Tensor[(392), float64]) */;
  %87 = %83.0;
  %88 = %86.0;
  %89 = @func_11658() /* ty=Tensor[(3, 16, 6), bool] */;
  (%87, %88, meta[relay.Constant][7] /* ty=Tensor[(392), float64] */, %89)
}

def @func_11082() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int64]) {
  %90 = @func_3919() /* ty=Tensor[(3, 16, 6), bool] */;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %92 = reshape(%91, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float64] */;
  %93 = @func_2261(%92) /* ty=(Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) */;
  %94 = %93.1;
  (%90, %94)
}

def @func_13767() -> (Tensor[(3, 16, 6), bool], Tensor[(11, 9, 14), int32], Tensor[(1386), int32]) {
  %95 = @func_6105() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(576), float32], Tensor[(320), float32]) */;
  %96 = cast(meta[relay.Constant][8] /* ty=Tensor[(1386), int32] */, dtype="int32") /* ty=Tensor[(1386), int32] */;
  %97 = reshape(%96, newshape=[1386]) /* ty=Tensor[(1386), int32] */;
  %98 = @func_10096(%97) /* ty=(Tensor[(10, 2, 13), float32], Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
  %99 = %95.0;
  %100 = %98.2;
  (%99, %100, meta[relay.Constant][8] /* ty=Tensor[(1386), int32] */)
}

def @func_13042(%var_13031: Tensor[(1, 440), uint16], %var_13038: Tensor[(16, 4), float32], %var_13039: Tensor[(320), float32]) -> (Tensor[(10, 2, 13), bool], Tensor[(8, 5, 11), uint16], Tensor[(1, 440), uint16], Tensor[(10, 2, 8), float64], Tensor[(384), uint32], Tensor[(16, 4), float32], Tensor[(320), float32], Tensor[(160), float64]) {
  %101 = cast(%var_13031, dtype="uint16") /* ty=Tensor[(1, 440), uint16] */;
  %102 = reshape(%101, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), uint16] */;
  %103 = cast(meta[relay.Constant][9] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %104 = cast(%var_13038, dtype="float32") /* ty=Tensor[(16, 4), float32] */;
  %105 = cast(%var_13039, dtype="float32") /* ty=Tensor[(320), float32] */;
  %106 = cast(meta[relay.Constant][10] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %107 = reshape(%103, newshape=[24, 16]) /* ty=Tensor[(24, 16), uint32] */;
  %108 = reshape(%104, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %109 = reshape(%105, newshape=[4, 80]) /* ty=Tensor[(4, 80), float32] */;
  %110 = reshape(%106, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %111 = @func_2377(%107, %108, %109, %110) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int64], Tensor[(9, 16, 4), float32], Tensor[(24, 16), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(4, 80), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), bool]) */;
  %112 = @func_11094() /* ty=Tensor[(10, 2, 13), bool] */;
  %113 = @func_11439(%102) /* ty=Tensor[(8, 5, 11), uint16] */;
  %114 = %111.7;
  (%112, %113, %var_13031, %114, meta[relay.Constant][9] /* ty=Tensor[(384), uint32] */, %var_13038, %var_13039, meta[relay.Constant][10] /* ty=Tensor[(160), float64] */)
}

def @func_2598() -> Tensor[(3, 16, 6), bool] {
  %115 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %115.0
}

def @func_4578(%var_4571: Tensor[(11, 4, 3), float64]) -> Tensor[(11, 4, 3), bool] {
  %116 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
  %117 = %116.1;
  %118 = cast(%var_4571, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
  %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%117, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%120, %121) /* ty=Tensor[(11, 4, 3), bool] */
}

def @func_5306(%var_5245: Tensor[(2112), float32]) -> (Tensor[(11, 16, 12), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(10, 2, 13), bool]) {
  %122 = cast(%var_5245, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %123 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %124 = cast(meta[relay.Constant][12] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %125 = reshape(%122, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float32] */;
  %126 = reshape(%123, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %127 = reshape(%124, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %128 = @func_2501(%125, %126, %127) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) */;
  %129 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %130 = %129.0;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %132 = asin(%131) /* ty=Tensor[(10, 2, 13), float32] */;
  %133 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 2, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 2, 13), bool] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="bool") /* ty=Tensor[(10, 2, 13), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %137 = %128.9;
  %138 = less(%135, %136) /* ty=Tensor[(10, 2, 13), bool] */;
  (%137, %var_5245, meta[relay.Constant][11] /* ty=Tensor[(576), float32] */, meta[relay.Constant][12] /* ty=Tensor[(64), float32] */, %138)
}

def @func_7651() -> (Tensor[(320), float32],) {
  %139 = @func_5098() /* ty=(Tensor[(320), float32],) */;
  %140 = %139.0;
  (%140,)
}

def @func_3963(%var_3944: Tensor[(3, 16, 6), float32], %var_3951: Tensor[(24), uint32], %var_3952: Tensor[(384), uint32], %var_3953: Tensor[(16, 4), float32]) -> (Tensor[(3, 16, 6), uint16], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(16, 4), float32], Tensor[(320), float32], Tensor[(384, 24), uint8]) {
  %141 = @func_3370() /* ty=Tensor[(3, 16, 6), float32] */;
  %142 = cast(%var_3944, dtype="uint16") /* ty=Tensor[(3, 16, 6), uint16] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="uint16") /* ty=Tensor[(3, 16, 6), uint16] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %146 = cast(meta[relay.Constant][14] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %147 = cast(%var_3951, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %148 = cast(%var_3952, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %149 = cast(%var_3953, dtype="float32") /* ty=Tensor[(16, 4), float32] */;
  %150 = cast(meta[relay.Constant][15] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %151 = cast(%var_3952, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %152 = reshape(%146, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
  %153 = reshape(%147, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %154 = reshape(%148, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %155 = reshape(%149, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %156 = reshape(%150, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %157 = reshape(%151, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %158 = @func_1076(%152, %153, %154, %155, %156, %157) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
  %159 = cast(%var_3952, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %160 = reshape(%159, newshape=[384, 1]) /* ty=Tensor[(384, 1), uint32] */;
  %161 = @func_1574(%160) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(384, 24), uint8]) */;
  %162 = add(%144, %145) /* ty=Tensor[(3, 16, 6), uint16] */;
  %163 = %158.2;
  %164 = %161.3;
  (%162, %163, meta[relay.Constant][14] /* ty=Tensor[(576), float32] */, %var_3951, %var_3952, %var_3953, meta[relay.Constant][15] /* ty=Tensor[(320), float32] */, %164)
}

def @func_7983(%var_7975: Tensor[(5, 7, 9), float64]) -> (Tensor[(5, 7, 9), float64], Tensor[(11, 9, 15), float32], Tensor[(495, 3), float32]) {
  %165 = cast(9.08845f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %166 = cast(%var_7975, dtype="float64") /* ty=Tensor[(5, 7, 9), float64] */;
  %167 = cast(meta[relay.Constant][16] /* ty=Tensor[(495, 3), float32] */, dtype="float32") /* ty=Tensor[(495, 3), float32] */;
  %168 = reshape(%167, newshape=[1485]) /* ty=Tensor[(1485), float32] */;
  %169 = @func_6133(%168) /* ty=(Tensor[(132), int16], Tensor[(11, 9, 15), float32], Tensor[(1485), float32]) */;
  %170 = floor_mod(%165, %166) /* ty=Tensor[(5, 7, 9), float64] */;
  %171 = %169.1;
  (%170, %171, meta[relay.Constant][16] /* ty=Tensor[(495, 3), float32] */)
}

def @func_1574(%var_1564: Tensor[(384, 1), uint32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(384, 24), uint8]) {
  %172 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %173 = cast(meta[relay.Constant][17] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %174 = cast(%var_1564, dtype="uint32") /* ty=Tensor[(384, 1), uint32] */;
  %175 = reshape(%173, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
  %176 = reshape(%174, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %177 = cast(%var_1564, dtype="uint8") /* ty=Tensor[(384, 1), uint8] */;
  %178 = cast(meta[relay.Constant][17] /* ty=Tensor[(24), uint32] */, dtype="uint8") /* ty=Tensor[(24), uint8] */;
  %179 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %180 = %172.0;
  %181 = @func_327(%175, %176) /* ty=Tensor[(8, 16, 3), uint32] */;
  %182 = minimum(%177, %178) /* ty=Tensor[(384, 24), uint8] */;
  (%179, %180, %181, %182)
}

def @func_3370() -> Tensor[(3, 16, 6), float32] {
  %183 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %183.0
}

def @func_13149() -> (Tensor[(3, 16, 6), bool],) {
  %184 = @func_12018() /* ty=Tensor[(3, 16, 6), bool] */;
  (%184,)
}

def @func_8608(%var_8583: Tensor[(576), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32], Tensor[(40, 8), float32], Tensor[(576), float32], Tensor[(64), float32]) {
  %185 = @func_4536() /* ty=Tensor[(3, 16, 6), float32] */;
  %186 = cast(%185, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %187 = reshape(%186, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %188 = @func_6651(%187) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
  %189 = @func_5353() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
  %190 = cast(%var_8583, dtype="float32") /* ty=Tensor[(576), float32] */;
  %191 = reshape(%190, newshape=[2, 288]) /* ty=Tensor[(2, 288), float32] */;
  %192 = @func_4405(%191) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), float64], Tensor[(384), uint32], Tensor[(2, 288), float32], Tensor[(40, 8), float32]) */;
  %193 = %188.1;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(64), float32] */;
  %195 = reshape(%194, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %196 = @func_4774(%195) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(384), uint32], Tensor[(24), uint32], Tensor[(2, 192), uint32], Tensor[(64), float32]) */;
  %197 = %189.0;
  %198 = %192.4;
  %199 = %196.5;
  (%185, %193, %197, %198, %var_8583, %199)
}

def @func_9306() -> Tensor[(3, 16, 6), bool] {
  %200 = @func_8712() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %200.0
}

def @func_9008(%var_8979: Tensor[(5, 11, 10), float32]) -> (Tensor[(5, 11, 10), float32], Tensor[(1, 160), float64], Tensor[(3, 16, 6), bool]) {
  %201 = cast(%var_8979, dtype="float32") /* ty=Tensor[(5, 11, 10), float32] */;
  %202 = @func_4800() /* ty=(Tensor[(11, 4, 3), float64], Tensor[(1, 160), float64]) */;
  %203 = @func_5544() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
  %204 = asinh(%201) /* ty=Tensor[(5, 11, 10), float32] */;
  %205 = %202.1;
  %206 = %203.0;
  (%204, %205, %206)
}

def @func_6963() -> Tensor[(3, 16, 6), bool] {
  @func_3919() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_9684() -> Tensor[(3, 16, 6), bool] {
  %207 = @func_5920() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %207.0
}

def @func_5614(%var_5557: Tensor[(576), float32], %var_5559: Tensor[(320), float32]) -> (Tensor[(3, 16, 6), int32], Tensor[(3, 16, 6), bool], Tensor[(48, 8), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  %208 = @func_4855() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
  %209 = cast(meta[relay.Constant][18] /* ty=Tensor[(48, 8), uint32] */, dtype="uint32") /* ty=Tensor[(48, 8), uint32] */;
  %210 = cast(%var_5557, dtype="float32") /* ty=Tensor[(576), float32] */;
  %211 = cast(meta[relay.Constant][19] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %212 = cast(%var_5559, dtype="float32") /* ty=Tensor[(320), float32] */;
  %213 = reshape(%209, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %214 = reshape(%210, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %215 = reshape(%211, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %216 = reshape(%212, newshape=[160, 2]) /* ty=Tensor[(160, 2), float32] */;
  %217 = @func_1832(%213, %214, %215, %216) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), bool], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(160, 2), float32], Tensor[(9, 16, 4), float32], Tensor[(8, 16, 3), uint32]) */;
  %218 = @func_4855() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
  %219 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %220 = %208.1;
  %221 = %217.0;
  %222 = %218.2;
  %223 = @func_4076() /* ty=Tensor[(3, 16, 6), float32] */;
  %224 = %219.0;
  (%220, %221, meta[relay.Constant][18] /* ty=Tensor[(48, 8), uint32] */, %var_5557, meta[relay.Constant][19] /* ty=Tensor[(64), float32] */, %var_5559, %222, %223, %224)
}

def @func_6133(%var_6129: Tensor[(1485), float32]) -> (Tensor[(132), int16], Tensor[(11, 9, 15), float32], Tensor[(1485), float32]) {
  %225 = @func_4855() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
  %226 = cast(%var_6129, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %227 = reshape(%226, newshape=[11, 9, 15]) /* ty=Tensor[(11, 9, 15), float32] */;
  %228 = @func_3839(%227) /* ty=(Tensor[(11, 9, 15), float32], Tensor[(3, 16, 6), bool]) */;
  %229 = %225.2;
  %230 = %228.0;
  (%229, %230, %var_6129)
}

def @func_8252() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) {
  %231 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %232 = cast(meta[relay.Constant][20] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %233 = cast(meta[relay.Constant][21] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %234 = cast(meta[relay.Constant][22] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %235 = reshape(%232, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %236 = reshape(%233, newshape=[24, 1]) /* ty=Tensor[(24, 1), uint32] */;
  %237 = reshape(%234, newshape=[320]) /* ty=Tensor[(320), bool] */;
  %238 = @func_4015(%235, %236, %237) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24, 1), uint32], Tensor[(384), uint32], Tensor[(320), bool]) */;
  %239 = %231.0;
  %240 = %238.0;
  (%239, %240, meta[relay.Constant][20] /* ty=Tensor[(576), float32] */, meta[relay.Constant][21] /* ty=Tensor[(24), uint32] */, meta[relay.Constant][22] /* ty=Tensor[(320), bool] */)
}

def @func_11658() -> Tensor[(3, 16, 6), bool] {
  %241 = @func_9315() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %241.0
}

def @func_11788(%var_11775: Tensor[(196, 2), float64]) -> (Tensor[(6, 11, 5), int16], Tensor[(320), float32], Tensor[(4, 7, 14), float32], Tensor[(196, 2), float64]) {
  %242 = @func_6329() /* ty=(Tensor[(6, 11, 5), int16],) */;
  %243 = @func_6474() /* ty=(Tensor[(320), float32],) */;
  %244 = cast(%var_11775, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %245 = reshape(%244, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float64] */;
  %246 = @func_10457(%245) /* ty=(Tensor[(4, 7, 14), float32],) */;
  %247 = %242.0;
  %248 = %243.0;
  %249 = %246.0;
  (%247, %248, %249, %var_11775)
}

def @func_3315(%var_3295: Tensor[(384), uint32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(384), uint32], Tensor[(1, 64), float32], Tensor[(320), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), float32]) {
  %250 = cast(%var_3295, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %251 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 64), float32] */, dtype="float32") /* ty=Tensor[(1, 64), float32] */;
  %252 = cast(meta[relay.Constant][24] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %253 = reshape(%250, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %254 = reshape(%251, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %255 = reshape(%252, newshape=[80, 4]) /* ty=Tensor[(80, 4), float32] */;
  %256 = @func_1724(%253, %254, %255) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(384, 24), uint8], Tensor[(384), uint32], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(80, 4), float32]) */;
  %257 = cast(meta[relay.Constant][25] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %258 = reshape(%257, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %259 = @func_1901(%258) /* ty=(Tensor[(10, 2, 8), float64],) */;
  %260 = @func_3198() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %261 = @func_3144() /* ty=Tensor[(3, 16, 6), bool] */;
  %262 = @func_3144() /* ty=Tensor[(3, 16, 6), bool] */;
  %263 = %256.6;
  %264 = %259.0;
  %265 = %260.1;
  (%261, %262, %263, %var_3295, meta[relay.Constant][23] /* ty=Tensor[(1, 64), float32] */, meta[relay.Constant][24] /* ty=Tensor[(320), float32] */, %264, meta[relay.Constant][25] /* ty=Tensor[(160), float64] */, %265)
}

def @func_6552(%var_6514: Tensor[(11, 9, 14), int32], %var_6515: Tensor[(11, 9, 14), int32]) -> (Tensor[(11, 9, 14), int32],) {
  %266 = cast(%var_6515, dtype="int32") /* ty=Tensor[(11, 9, 14), int32] */;
  %267 = shape_of(%var_6514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_6514, dtype="int32") /* ty=Tensor[(11, 9, 14), int32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %270 = multiply(%268, %269) /* ty=Tensor[(11, 9, 14), int32] */;
  (%270,)
}

def @func_4479() -> (Tensor[(3, 16, 6), float32],) {
  %271 = @func_3370() /* ty=Tensor[(3, 16, 6), float32] */;
  (%271,)
}

def @func_11100() -> (Tensor[(3, 16, 6), int64],) {
  %272 = @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */;
  %273 = %272.0;
  (%273,)
}

def @func_12099(%var_12048: Tensor[(6, 4), uint32], %var_12049: Tensor[(384), uint32]) -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(6, 4), uint32], Tensor[(384), uint32], Tensor[(320), bool], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) {
  %274 = @func_8281() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %275 = @func_8281() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %276 = cast(meta[relay.Constant][26] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %277 = cast(%var_12048, dtype="uint32") /* ty=Tensor[(6, 4), uint32] */;
  %278 = cast(%var_12049, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %279 = cast(meta[relay.Constant][27] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %280 = reshape(%276, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %281 = reshape(%277, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %282 = reshape(%278, newshape=[384, 1]) /* ty=Tensor[(384, 1), uint32] */;
  %283 = reshape(%279, newshape=[8, 40]) /* ty=Tensor[(8, 40), bool] */;
  %284 = @func_4330(%280, %281, %282, %283) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384, 1), uint32], Tensor[(8, 40), bool]) */;
  %285 = @func_8712() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %286 = @func_4855() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
  %287 = %274.0;
  %288 = %275.0;
  %289 = %284.1;
  %290 = %285.0;
  %291 = %286.0;
  (%287, %288, %289, meta[relay.Constant][26] /* ty=Tensor[(576), float32] */, %var_12048, %var_12049, meta[relay.Constant][27] /* ty=Tensor[(320), bool] */, %290, %291)
}

def @func_4217() -> Tensor[(3, 16, 6), float32] {
  %292 = @func_3725() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %292.0
}

def @func_11351() -> Tensor[(9, 3, 13), float64] {
  %293 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 3, 13), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  sqrt(%293) /* ty=Tensor[(9, 3, 13), float64] */
}

def @func_11936(%var_11934: Tensor[(576), float32]) -> (Tensor[(64), float32], Tensor[(3, 16, 6), float32], Tensor[(576), float32]) {
  %294 = @func_5353() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
  %295 = cast(%var_11934, dtype="float32") /* ty=Tensor[(576), float32] */;
  %296 = reshape(%295, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %297 = @func_8608(%296) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32], Tensor[(40, 8), float32], Tensor[(576), float32], Tensor[(64), float32]) */;
  %298 = %294.1;
  %299 = %297.2;
  (%298, %299, %var_11934)
}

def @func_12615(%var_12605: Tensor[(11, 12, 14), float32], %var_12606: Tensor[(11, 12, 14), float32]) -> (Tensor[(11, 12, 14), float32], Tensor[(12, 8, 9), bool]) {
  %300 = cast(%var_12606, dtype="float32") /* ty=Tensor[(11, 12, 14), float32] */;
  %301 = shape_of(%var_12605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%var_12605, dtype="float32") /* ty=Tensor[(11, 12, 14), float32] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %304 = @func_10908() /* ty=(Tensor[(12, 8, 9), bool], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) */;
  %305 = maximum(%302, %303) /* ty=Tensor[(11, 12, 14), float32] */;
  %306 = %304.0;
  (%305, %306)
}

def @func_12786() -> Tensor[(3, 16, 6), float32] {
  @func_4217() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_12768() -> (Tensor[(576), float32], Tensor[(3, 16, 6), bool]) {
  %307 = @func_8252() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) */;
  %308 = %307.2;
  %309 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  (%308, %309)
}

def @func_11917() -> (Tensor[(11, 4, 3), bool],) {
  %310 = @func_10279() /* ty=Tensor[(11, 4, 3), bool] */;
  (%310,)
}

def @func_5016() -> (Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) {
  %311 = cast(meta[relay.Constant][29] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %312 = cast(meta[relay.Constant][30] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %313 = reshape(%311, newshape=[1, 4, 16]) /* ty=Tensor[(1, 4, 16), float32] */;
  %314 = reshape(%312, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), float32] */;
  %315 = @func_791(%313, %314) /* ty=(Tensor[(5, 4, 16), bool],) */;
  %316 = @func_4240() /* ty=Tensor[(3, 16, 6), float32] */;
  %317 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %318 = %317.0;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %320 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%316, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %323 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %324 = %315.0;
  %325 = mod(%321, %322) /* ty=Tensor[(3, 16, 6), float64] */;
  %326 = %323.0;
  (%324, meta[relay.Constant][29] /* ty=Tensor[(64), float32] */, meta[relay.Constant][30] /* ty=Tensor[(320), float32] */, %325, %326)
}

def @func_2041(%var_1983: Tensor[(576), float32], %var_1984: Tensor[(24), uint32], %var_1985: Tensor[(384), uint32], %var_2017: Tensor[(5, 4, 16), bool]) -> (Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) {
  %327 = cast(%var_1983, dtype="float32") /* ty=Tensor[(576), float32] */;
  %328 = cast(%var_1984, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %329 = cast(%var_1985, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %330 = cast(meta[relay.Constant][31] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %331 = cast(meta[relay.Constant][32] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %332 = cast(%var_1985, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %333 = reshape(%327, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
  %334 = reshape(%328, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %335 = reshape(%329, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %336 = reshape(%330, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %337 = reshape(%331, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %338 = reshape(%332, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %339 = @func_1076(%333, %334, %335, %336, %337, %338) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
  %340 = %339.4;
  %341 = cast(%var_2017, dtype="int8") /* ty=Tensor[(5, 4, 16), int8] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%340, dtype="int8") /* ty=Tensor[(5, 4, 16), int8] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %345 = add(%343, %344) /* ty=Tensor[(5, 4, 16), int8] */;
  %346 = cast(%345, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
  %347 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %348 = asin(%346) /* ty=Tensor[(5, 4, 16), float64] */;
  (%347, %var_1983, %var_1984, %var_1985, meta[relay.Constant][31] /* ty=Tensor[(64), float32] */, meta[relay.Constant][32] /* ty=Tensor[(320), float32] */, %348)
}

def @func_7024(%var_6998: Tensor[(3, 13, 14), float32], %var_6999: Tensor[(3, 13, 14), float32]) -> (Tensor[(3, 13, 14), float32], Tensor[(3, 13, 14), float64]) {
  %349 = cast(%var_6999, dtype="float32") /* ty=Tensor[(3, 13, 14), float32] */;
  %350 = shape_of(%var_6998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_6998, dtype="float32") /* ty=Tensor[(3, 13, 14), float32] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %353 = cast(%var_6998, dtype="float64") /* ty=Tensor[(3, 13, 14), float64] */;
  %354 = floor_divide(%351, %352) /* ty=Tensor[(3, 13, 14), float32] */;
  %355 = acosh(%353) /* ty=Tensor[(3, 13, 14), float64] */;
  (%354, %355)
}

def @main(%var_14010: Tensor[(9, 3, 13), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(9, 3, 13), float64]) {
  %356 = @func_8025() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
  %357 = @func_11351() /* ty=Tensor[(9, 3, 13), float64] */;
  %358 = cast(%var_14010, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %362 = @func_8393() /* ty=Tensor[(3, 16, 6), bool] */;
  %363 = %356.0;
  %364 = floor_mod(%360, %361) /* ty=Tensor[(9, 3, 13), float64] */;
  (%362, %363, %364)
}

def @func_13733() -> (Tensor[(3, 16, 6), float32],) {
  %365 = @func_8964() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32]) */;
  %366 = %365.3;
  (%366,)
}

def @func_10749(%var_10743: Tensor[(9, 15, 1), int16], %var_10744: Tensor[(9, 15, 7), int16]) -> Tensor[(9, 15, 7), int16] {
  %367 = cast(%var_10743, dtype="int16") /* ty=Tensor[(9, 15, 1), int16] */;
  %368 = cast(%var_10744, dtype="int16") /* ty=Tensor[(9, 15, 7), int16] */;
  logical_xor(%367, %368) /* ty=Tensor[(9, 15, 7), int16] */
}

def @func_7327() -> (Tensor[(3, 16, 6), bool],) {
  %369 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %370 = %369.0;
  (%370,)
}

def @func_8633() -> (Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) {
  %371 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %372 = %371.0;
  %373 = @func_2598() /* ty=Tensor[(3, 16, 6), bool] */;
  (%372, %373)
}

def @func_5098() -> (Tensor[(320), float32],) {
  %374 = @func_5016() /* ty=(Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %375 = %374.2;
  (%375,)
}

def @func_7279() -> (Tensor[(3, 16, 6), float32], Tensor[(1, 24), uint32], Tensor[(?, 546), int16]) {
  %376 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
  %377 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 546), float32] */, dtype="float32") /* ty=Tensor[(1, 546), float32] */;
  %378 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 546), float32] */, dtype="float32") /* ty=Tensor[(1, 546), float32] */;
  %379 = reshape(%377, newshape=[3, 13, 14]) /* ty=Tensor[(3, 13, 14), float32] */;
  %380 = reshape(%378, newshape=[3, 13, 14]) /* ty=Tensor[(3, 13, 14), float32] */;
  %381 = @func_7024(%379, %380) /* ty=(Tensor[(3, 13, 14), float32], Tensor[(3, 13, 14), float64]) */;
  %382 = %381.0;
  %383 = cast(%382, dtype="int16") /* ty=Tensor[(3, 13, 14), int16] */;
  %384 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(1, 546), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %385 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 546), float32] */, dtype="int16") /* ty=Tensor[(1, 546), int16] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %387 = @func_4076() /* ty=Tensor[(3, 16, 6), float32] */;
  %388 = %376.2;
  %389 = logical_xor(%385, %386) /* ty=Tensor[(?, 546), int16] */;
  (%387, %388, %389)
}

def @func_5197(%var_5184: Tensor[(576), float32], %var_5185: Tensor[(64), float32]) -> (Tensor[(12, 8, 9), float32], Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32]) {
  %390 = @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */;
  %391 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %392 = cast(meta[relay.Constant][34] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %393 = cast(%var_5184, dtype="float32") /* ty=Tensor[(576), float32] */;
  %394 = cast(%var_5185, dtype="float32") /* ty=Tensor[(64), float32] */;
  %395 = reshape(%392, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float32] */;
  %396 = reshape(%393, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %397 = reshape(%394, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %398 = @func_2501(%395, %396, %397) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) */;
  %399 = %391.0;
  %400 = cast(%399, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %401 = reshape(%400, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %402 = @func_3802(%401) /* ty=(Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */;
  %403 = %390.0;
  %404 = %398.3;
  %405 = %402.2;
  (%403, %399, %404, meta[relay.Constant][34] /* ty=Tensor[(2112), float32] */, %var_5184, %var_5185, %405)
}

def @func_8433() -> (Tensor[(14, 7, 6), float64], Tensor[(3, 16, 6), bool]) {
  %406 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 7, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 7, 6), float64] */;
  %407 = tan(%406) /* ty=Tensor[(14, 7, 6), float64] */;
  %408 = @func_3144() /* ty=Tensor[(3, 16, 6), bool] */;
  (%407, %408)
}

def @func_4920() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) {
  %409 = @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */;
  %410 = @func_4217() /* ty=Tensor[(3, 16, 6), float32] */;
  %411 = @func_4536() /* ty=Tensor[(3, 16, 6), float32] */;
  %412 = %409.0;
  (%410, %411, %412)
}

def @func_11721() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float64]) {
  %413 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %414 = @func_9315() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %415 = %414.0;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %417 = %413.0;
  %418 = log2(%416) /* ty=Tensor[(3, 16, 6), float64] */;
  (%417, %418)
}

def @func_9665(%var_9618: Tensor[(64), float32], %var_9620: Tensor[(160), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(160), float64], Tensor[(3, 16, 6), float32], Tensor[(24, 16), uint8]) {
  %419 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %420 = @func_5967() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %421 = cast(meta[relay.Constant][37] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %422 = cast(%var_9618, dtype="float32") /* ty=Tensor[(64), float32] */;
  %423 = cast(meta[relay.Constant][36] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %424 = cast(%var_9620, dtype="float64") /* ty=Tensor[(160), float64] */;
  %425 = reshape(%421, newshape=[24, 16]) /* ty=Tensor[(24, 16), uint32] */;
  %426 = reshape(%422, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %427 = reshape(%423, newshape=[4, 80]) /* ty=Tensor[(4, 80), float32] */;
  %428 = reshape(%424, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %429 = @func_2377(%425, %426, %427, %428) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int64], Tensor[(9, 16, 4), float32], Tensor[(24, 16), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(4, 80), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), bool]) */;
  %430 = %429.3;
  %431 = cast(meta[relay.Constant][37] /* ty=Tensor[(384), uint32] */, dtype="uint8") /* ty=Tensor[(384), uint8] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(2), int32] */;
  %433 = cast(%430, dtype="uint8") /* ty=Tensor[(24, 16), uint8] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %435 = %419.0;
  %436 = @func_7610() /* ty=Tensor[(3, 16, 6), float32] */;
  %437 = %420.0;
  %438 = left_shift(%433, %434) /* ty=Tensor[(24, 16), uint8] */;
  (%435, %436, %var_9618, meta[relay.Constant][36] /* ty=Tensor[(320), float32] */, %var_9620, %437, %438)
}

def @func_12145() -> (Tensor[(3, 16, 6), float64], Tensor[(12, 8, 9), float32]) {
  %439 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
  %440 = @func_6221() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(12, 8, 9), float32], Tensor[(12, 8, 9), float32]) */;
  %441 = %439.0;
  %442 = %440.2;
  (%441, %442)
}

def @func_13478() -> (Tensor[(12, 8, 9), float32], Tensor[(3, 16, 6), float32]) {
  %443 = @func_4490() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %444 = @func_13427() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) */;
  %445 = %443.1;
  %446 = %444.1;
  (%445, %446)
}

def @func_6353() -> Tensor[(3, 16, 6), float32] {
  %447 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %448 = %447.0;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  sinh(%449) /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_5884(%var_5880: Tensor[(576), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320, 1), float32]) {
  %450 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %451 = cast(%var_5880, dtype="float32") /* ty=Tensor[(576), float32] */;
  %452 = cast(meta[relay.Constant][38] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %453 = cast(meta[relay.Constant][39] /* ty=Tensor[(320, 1), float32] */, dtype="float32") /* ty=Tensor[(320, 1), float32] */;
  %454 = reshape(%451, newshape=[6, 96]) /* ty=Tensor[(6, 96), float32] */;
  %455 = reshape(%452, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %456 = reshape(%453, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %457 = @func_2753(%454, %455, %456) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(6, 96), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32]) */;
  %458 = %450.1;
  %459 = %457.1;
  (%458, %459, %var_5880, meta[relay.Constant][38] /* ty=Tensor[(64), float32] */, meta[relay.Constant][39] /* ty=Tensor[(320, 1), float32] */)
}

def @func_7223(%var_7216: Tensor[(64), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(11, 4, 3), uint8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(2, 192), uint32], Tensor[(64), float32], Tensor[(320), float32]) {
  %460 = @func_5920() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %461 = @func_5074() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), bool]) */;
  %462 = %460.0;
  %463 = cast(%462, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %464 = reshape(%463, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %465 = @func_2979(%464) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
  %466 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 192), uint32] */, dtype="uint32") /* ty=Tensor[(2, 192), uint32] */;
  %467 = cast(%var_7216, dtype="float32") /* ty=Tensor[(64), float32] */;
  %468 = cast(meta[relay.Constant][41] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %469 = reshape(%466, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %470 = reshape(%467, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %471 = reshape(%468, newshape=[80, 4]) /* ty=Tensor[(80, 4), float32] */;
  %472 = @func_1724(%469, %470, %471) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(384, 24), uint8], Tensor[(384), uint32], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(80, 4), float32]) */;
  %473 = %461.1;
  %474 = %465.0;
  %475 = %472.0;
  (%462, %473, %474, %475, meta[relay.Constant][40] /* ty=Tensor[(2, 192), uint32] */, %var_7216, meta[relay.Constant][41] /* ty=Tensor[(320), float32] */)
}

def @func_9035() -> Tensor[(3, 16, 6), float32] {
  %476 = @func_4490() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %476.0
}

def @func_9487(%var_9474: Tensor[(156), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(13, 4, 3), float64], Tensor[(156), float64], Tensor[(3, 16, 6), float32]) {
  %477 = @func_9082() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
  %478 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %479 = cast(%var_9474, dtype="float64") /* ty=Tensor[(156), float64] */;
  %480 = reshape(%479, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
  %481 = @func_6381(%480) /* ty=(Tensor[(13, 4, 3), float64],) */;
  %482 = @func_4479() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %483 = %477.0;
  %484 = %478.0;
  %485 = %481.0;
  %486 = %482.0;
  (%483, %484, %485, %var_9474, %486)
}

def @func_4774(%var_4756: Tensor[(64), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(384), uint32], Tensor[(24), uint32], Tensor[(2, 192), uint32], Tensor[(64), float32]) {
  %487 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %488 = @func_3144() /* ty=Tensor[(3, 16, 6), bool] */;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %490 = cast(meta[relay.Constant][42] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %491 = cast(meta[relay.Constant][43] /* ty=Tensor[(2, 192), uint32] */, dtype="uint32") /* ty=Tensor[(2, 192), uint32] */;
  %492 = cast(%var_4756, dtype="float32") /* ty=Tensor[(64), float32] */;
  %493 = reshape(%489, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float32] */;
  %494 = reshape(%490, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %495 = reshape(%491, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %496 = reshape(%492, newshape=[16, 4]) /* ty=Tensor[(16, 4), float32] */;
  %497 = @func_3963(%493, %494, %495, %496) /* ty=(Tensor[(3, 16, 6), uint16], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(16, 4), float32], Tensor[(320), float32], Tensor[(384, 24), uint8]) */;
  %498 = %487.0;
  %499 = %497.4;
  (%498, %488, %499, meta[relay.Constant][42] /* ty=Tensor[(24), uint32] */, meta[relay.Constant][43] /* ty=Tensor[(2, 192), uint32] */, %var_4756)
}

def @func_4543() -> Tensor[(3, 16, 6), bool] {
  @func_2598() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_2979(%var_2966: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  %500 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  %501 = cast(%var_2966, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %505 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %506 = equal(%503, %504) /* ty=Tensor[(3, 16, 6), bool] */;
  %507 = %505.0;
  (%506, %507)
}

def @func_12180() -> Tensor[(260), bool] {
  %508 = @func_11327() /* ty=(Tensor[(260), bool], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */;
  %508.0
}

def @func_5544() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  %509 = @func_4596() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %510 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %511 = %509.0;
  %512 = %510.0;
  (%511, %512)
}

def @func_3198() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) {
  %513 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %514 = @func_3144() /* ty=Tensor[(3, 16, 6), bool] */;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %516 = cast(%514, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %517 = reshape(%516, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %518 = @func_2912(%517) /* ty=(Tensor[(3, 16, 6), float64],) */;
  %519 = %513.1;
  %520 = exp(%515) /* ty=Tensor[(3, 16, 6), float32] */;
  %521 = %518.0;
  %522 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  (%519, %520, %521, %522)
}

def @func_6774() -> (Tensor[(10, 2, 13), bool],) {
  %523 = @func_5452() /* ty=Tensor[(10, 2, 13), bool] */;
  (%523,)
}

def @func_4207() -> (Tensor[(12, 8, 9), float32],) {
  %524 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 8, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
  %525 = log(%524) /* ty=Tensor[(12, 8, 9), float32] */;
  (%525,)
}

def @func_2753(%var_2746: Tensor[(6, 96), float32], %var_2749: Tensor[(64), float32], %var_2750: Tensor[(320), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(6, 96), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32]) {
  %526 = cast(%var_2746, dtype="float32") /* ty=Tensor[(6, 96), float32] */;
  %527 = cast(meta[relay.Constant][45] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %528 = cast(meta[relay.Constant][46] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %529 = cast(%var_2749, dtype="float32") /* ty=Tensor[(64), float32] */;
  %530 = cast(%var_2750, dtype="float32") /* ty=Tensor[(320), float32] */;
  %531 = cast(meta[relay.Constant][46] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %532 = reshape(%526, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
  %533 = reshape(%527, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %534 = reshape(%528, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %535 = reshape(%529, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %536 = reshape(%530, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %537 = reshape(%531, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %538 = @func_1076(%532, %533, %534, %535, %536, %537) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
  %539 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  %540 = %538.3;
  (%539, %540, %var_2746, meta[relay.Constant][45] /* ty=Tensor[(24), uint32] */, meta[relay.Constant][46] /* ty=Tensor[(384), uint32] */, %var_2749, %var_2750)
}

def @func_4676(%var_4654: Tensor[(12, 48), float32], %var_4655: Tensor[(24), uint32], %var_4656: Tensor[(1, 384), uint32]) -> (Tensor[(12, 8, 9), float64], Tensor[(320), float32], Tensor[(12, 48), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(320), bool], Tensor[(3, 16, 6), bool]) {
  %541 = @func_4490() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %542 = %541.1;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %544 = cast(%var_4654, dtype="float32") /* ty=Tensor[(12, 48), float32] */;
  %545 = cast(%var_4655, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %546 = cast(%var_4656, dtype="uint32") /* ty=Tensor[(1, 384), uint32] */;
  %547 = cast(meta[relay.Constant][47] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %548 = reshape(%544, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %549 = reshape(%545, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %550 = reshape(%546, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %551 = reshape(%547, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), bool] */;
  %552 = @func_2041(%548, %549, %550, %551) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) */;
  %553 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %554 = tan(%543) /* ty=Tensor[(12, 8, 9), float64] */;
  %555 = %552.5;
  %556 = %553.0;
  (%554, %555, %var_4654, %var_4655, %var_4656, meta[relay.Constant][47] /* ty=Tensor[(320), bool] */, %556)
}

def @func_12270(%var_12268: Tensor[(392), float64]) -> (Tensor[(3, 16, 6), int64], Tensor[(6, 11, 5), int16], Tensor[(392), float64]) {
  %557 = cast(%var_12268, dtype="float64") /* ty=Tensor[(392), float64] */;
  %558 = reshape(%557, newshape=[196, 2]) /* ty=Tensor[(196, 2), float64] */;
  %559 = @func_11788(%558) /* ty=(Tensor[(6, 11, 5), int16], Tensor[(320), float32], Tensor[(4, 7, 14), float32], Tensor[(196, 2), float64]) */;
  %560 = @func_7463() /* ty=Tensor[(3, 16, 6), int64] */;
  %561 = %559.0;
  (%560, %561, %var_12268)
}

def @func_7898() -> (Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) {
  %562 = @func_6329() /* ty=(Tensor[(6, 11, 5), int16],) */;
  %563 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %564 = @func_5920() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %565 = %562.0;
  %566 = %563.0;
  %567 = %564.0;
  (%565, %566, %567)
}

def @func_9788() -> (Tensor[(3, 16, 6), bool],) {
  %568 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %569 = %568.0;
  (%569,)
}

def @func_11439(%var_11412: Tensor[(8, 5, 11), uint16]) -> Tensor[(8, 5, 11), uint16] {
  %570 = cast(%var_11412, dtype="uint16") /* ty=Tensor[(8, 5, 11), uint16] */;
  %571 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(8, 5, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 5, 11), uint16] */, dtype="uint16") /* ty=Tensor[(8, 5, 11), uint16] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%572, %573) /* ty=Tensor[(8, 5, 11), uint16] */
}

def @func_5505(%var_5463: Tensor[(11, 3, 11), uint32], %var_5464: Tensor[(11, 3, 11), uint32], %var_5483: Tensor[(2112), float32]) -> (Tensor[(11, 3, 11), uint32], Tensor[(3, 16, 6), bool], Tensor[(320), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32]) {
  %574 = cast(%var_5464, dtype="uint32") /* ty=Tensor[(11, 3, 11), uint32] */;
  %575 = shape_of(%var_5463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%var_5463, dtype="uint32") /* ty=Tensor[(11, 3, 11), uint32] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %578 = @func_4196() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %579 = cast(%var_5483, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %580 = cast(meta[relay.Constant][49] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %581 = cast(meta[relay.Constant][50] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %582 = reshape(%579, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float32] */;
  %583 = reshape(%580, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %584 = reshape(%581, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %585 = @func_2501(%582, %583, %584) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) */;
  %586 = right_shift(%576, %577) /* ty=Tensor[(11, 3, 11), uint32] */;
  %587 = %578.0;
  %588 = %585.7;
  (%586, %587, %588, %var_5483, meta[relay.Constant][49] /* ty=Tensor[(576), float32] */, meta[relay.Constant][50] /* ty=Tensor[(64), float32] */)
}

def @func_4330(%var_4319: Tensor[(576), float32], %var_4320: Tensor[(24), uint32], %var_4321: Tensor[(384, 1), uint32], %var_4322: Tensor[(8, 40), bool]) -> (Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384, 1), uint32], Tensor[(8, 40), bool]) {
  %589 = cast(%var_4319, dtype="float32") /* ty=Tensor[(576), float32] */;
  %590 = cast(%var_4320, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %591 = cast(%var_4321, dtype="uint32") /* ty=Tensor[(384, 1), uint32] */;
  %592 = cast(%var_4322, dtype="bool") /* ty=Tensor[(8, 40), bool] */;
  %593 = reshape(%589, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %594 = reshape(%590, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %595 = reshape(%591, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %596 = reshape(%592, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), bool] */;
  %597 = @func_2041(%593, %594, %595, %596) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) */;
  %598 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  %599 = %597.1;
  (%598, %599, %var_4319, %var_4320, %var_4321, %var_4322)
}

def @func_3802(%var_3779: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) {
  %600 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  %601 = cast(%var_3779, dtype="uint8") /* ty=Tensor[(3, 16, 6), uint8] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="uint8") /* ty=Tensor[(3, 16, 6), uint8] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %605 = @func_3198() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %606 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  %607 = cast(%606, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %608 = right_shift(%603, %604) /* ty=Tensor[(3, 16, 6), uint8] */;
  %609 = %605.1;
  %610 = log10(%607) /* ty=Tensor[(3, 16, 6), float32] */;
  (%608, %609, %610)
}

def @func_2689() -> (Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) {
  %611 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %612 = cast(meta[relay.Constant][51] /* ty=Tensor[(260), bool] */, dtype="bool") /* ty=Tensor[(260), bool] */;
  %613 = reshape(%612, newshape=[10, 2, 13]) /* ty=Tensor[(10, 2, 13), bool] */;
  %614 = @func_894(%613) /* ty=(Tensor[(10, 2, 13), bool],) */;
  %615 = %611.0;
  %616 = %614.0;
  (%615, %616, meta[relay.Constant][51] /* ty=Tensor[(260), bool] */)
}

def @func_10908() -> (Tensor[(12, 8, 9), bool], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) {
  %617 = @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */;
  %618 = %617.0;
  %619 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 8, 9), float32] */, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %623 = cast(meta[relay.Constant][53] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %624 = cast(meta[relay.Constant][54] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %625 = cast(meta[relay.Constant][55] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %626 = reshape(%623, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %627 = reshape(%624, newshape=[24, 1]) /* ty=Tensor[(24, 1), uint32] */;
  %628 = reshape(%625, newshape=[320]) /* ty=Tensor[(320), bool] */;
  %629 = @func_4015(%626, %627, %628) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24, 1), uint32], Tensor[(384), uint32], Tensor[(320), bool]) */;
  %630 = less(%621, %622) /* ty=Tensor[(12, 8, 9), bool] */;
  %631 = %629.1;
  (%630, %631, meta[relay.Constant][53] /* ty=Tensor[(576), float32] */, meta[relay.Constant][54] /* ty=Tensor[(24), uint32] */, meta[relay.Constant][55] /* ty=Tensor[(320), bool] */)
}

def @func_8882() -> (Tensor[(3, 16, 6), bool],) {
  %632 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  (%632,)
}

def @func_7720() -> (Tensor[(3, 16, 6), float32],) {
  %633 = @func_7610() /* ty=Tensor[(3, 16, 6), float32] */;
  (%633,)
}

def @func_3839(%var_3826: Tensor[(11, 9, 15), float32]) -> (Tensor[(11, 9, 15), float32], Tensor[(3, 16, 6), bool]) {
  %634 = cast(%var_3826, dtype="float32") /* ty=Tensor[(11, 9, 15), float32] */;
  %635 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %636 = exp(%634) /* ty=Tensor[(11, 9, 15), float32] */;
  %637 = %635.0;
  (%636, %637)
}

def @func_8025() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  %638 = @func_6875() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %639 = %638.0;
  %640 = @func_6963() /* ty=Tensor[(3, 16, 6), bool] */;
  (%639, %640)
}

def @func_4171(%var_4141: Tensor[(384), uint32], %var_4143: Tensor[(320), float32], %var_4155: Tensor[(8, 20), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int64], Tensor[(384), uint32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(320), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(8, 20), float64], Tensor[(10, 2, 8), float64]) {
  %641 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
  %642 = cast(%var_4141, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %643 = cast(meta[relay.Constant][56] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %644 = cast(%var_4143, dtype="float32") /* ty=Tensor[(320), float32] */;
  %645 = reshape(%642, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %646 = reshape(%643, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %647 = reshape(%644, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %648 = @func_2671(%645, %646, %647) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32]) */;
  %649 = cast(%var_4141, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %650 = cast(meta[relay.Constant][57] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %651 = cast(%var_4143, dtype="float32") /* ty=Tensor[(320), float32] */;
  %652 = cast(%var_4155, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %653 = reshape(%649, newshape=[24, 16]) /* ty=Tensor[(24, 16), uint32] */;
  %654 = reshape(%650, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %655 = reshape(%651, newshape=[4, 80]) /* ty=Tensor[(4, 80), float32] */;
  %656 = reshape(%652, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %657 = @func_2377(%653, %654, %655, %656) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int64], Tensor[(9, 16, 4), float32], Tensor[(24, 16), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(4, 80), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), bool]) */;
  %658 = cast(%var_4155, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %659 = reshape(%658, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %660 = @func_1901(%659) /* ty=(Tensor[(10, 2, 8), float64],) */;
  %661 = @func_3905() /* ty=Tensor[(3, 16, 6), bool] */;
  %662 = %641.5;
  %663 = %648.2;
  %664 = %657.5;
  %665 = %660.0;
  (%661, %662, %663, %var_4141, meta[relay.Constant][56] /* ty=Tensor[(576), float32] */, %var_4143, %664, meta[relay.Constant][57] /* ty=Tensor[(64), float32] */, %var_4155, %665)
}

def @func_2501(%var_2443: Tensor[(11, 16, 12), float32], %var_2457: Tensor[(576), float32], %var_2460: Tensor[(64), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) {
  %666 = cast(meta[relay.Constant][58] /* ty=Tensor[(11, 16, 12), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
  %667 = shape_of(%var_2443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%var_2443, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %670 = divide(%668, %669) /* ty=Tensor[(11, 16, 12), float32] */;
  %671 = cast(%var_2443, dtype="float64") /* ty=Tensor[(11, 16, 12), float64] */;
  %672 = acosh(%671) /* ty=Tensor[(11, 16, 12), float64] */;
  %673 = cast(%672, dtype="float64") /* ty=Tensor[(11, 16, 12), float64] */;
  %674 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%670, dtype="float64") /* ty=Tensor[(11, 16, 12), float64] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %677 = cast(%var_2457, dtype="float32") /* ty=Tensor[(576), float32] */;
  %678 = cast(meta[relay.Constant][59] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %679 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 384), uint32] */, dtype="uint32") /* ty=Tensor[(1, 384), uint32] */;
  %680 = cast(%var_2460, dtype="float32") /* ty=Tensor[(64), float32] */;
  %681 = cast(meta[relay.Constant][61] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %682 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 384), uint32] */, dtype="uint32") /* ty=Tensor[(1, 384), uint32] */;
  %683 = reshape(%677, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
  %684 = reshape(%678, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %685 = reshape(%679, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %686 = reshape(%680, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %687 = reshape(%681, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %688 = reshape(%682, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %689 = @func_1076(%683, %684, %685, %686, %687, %688) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
  %690 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %691 = cast(%672, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
  %692 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %693 = mod(%675, %676) /* ty=Tensor[(11, 16, 12), float64] */;
  %694 = %689.3;
  %695 = %690.1;
  %696 = rsqrt(%691) /* ty=Tensor[(11, 16, 12), float32] */;
  (%692, %693, %694, %var_2457, meta[relay.Constant][59] /* ty=Tensor[(24), uint32] */, meta[relay.Constant][60] /* ty=Tensor[(1, 384), uint32] */, %var_2460, meta[relay.Constant][61] /* ty=Tensor[(320), float32] */, %695, %696)
}

def @func_1537() -> Tensor[(3, 16, 6), bool] {
  %697 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %697.1
}

def @func_12885() -> (Tensor[(3, 16, 6), bool],) {
  %698 = @func_12018() /* ty=Tensor[(3, 16, 6), bool] */;
  (%698,)
}

def @func_13493() -> (Tensor[(3, 16, 6), float32],) {
  %699 = @func_8817() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */;
  %700 = %699.0;
  (%700,)
}

def @func_1076(%var_1028: Tensor[(9, 16, 4), float32], %var_1037: Tensor[(24), uint32], %var_1038: Tensor[(384), uint32], %var_1046: Tensor[(64), float32], %var_1047: Tensor[(320), float32], %var_1063: Tensor[(8, 16, 3), uint32]) -> (Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) {
  %701 = cast(%var_1028, dtype="float32") /* ty=Tensor[(9, 16, 4), float32] */;
  %702 = cast(%var_1037, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %703 = cast(%var_1038, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %704 = reshape(%702, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
  %705 = reshape(%703, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %706 = cast(%var_1046, dtype="float32") /* ty=Tensor[(64), float32] */;
  %707 = cast(%var_1047, dtype="float32") /* ty=Tensor[(320), float32] */;
  %708 = reshape(%706, newshape=[1, 4, 16]) /* ty=Tensor[(1, 4, 16), float32] */;
  %709 = reshape(%707, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), float32] */;
  %710 = @func_791(%708, %709) /* ty=(Tensor[(5, 4, 16), bool],) */;
  %711 = cast(%var_1037, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %712 = cast(%var_1037, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %713 = cast(%var_1038, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %714 = reshape(%712, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
  %715 = reshape(%713, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %716 = @func_327(%714, %715) /* ty=Tensor[(8, 16, 3), uint32] */;
  %717 = cast(%716, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
  %718 = reshape(%711, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
  %719 = reshape(%717, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %720 = cast(%var_1063, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
  %721 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%716, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %724 = asin(%701) /* ty=Tensor[(9, 16, 4), float32] */;
  %725 = @func_327(%704, %705) /* ty=Tensor[(8, 16, 3), uint32] */;
  %726 = %710.0;
  %727 = @func_327(%718, %719) /* ty=Tensor[(8, 16, 3), uint32] */;
  %728 = less(%722, %723) /* ty=Tensor[(8, 16, 3), bool] */;
  (%724, %var_1037, %var_1038, %725, %726, %var_1046, %var_1047, %727, %728)
}

def @func_1901(%var_1892: Tensor[(10, 2, 8), float64]) -> (Tensor[(10, 2, 8), float64],) {
  %729 = cast(%var_1892, dtype="float64") /* ty=Tensor[(10, 2, 8), float64] */;
  %730 = asin(%729) /* ty=Tensor[(10, 2, 8), float64] */;
  (%730,)
}

def @func_11482(%var_11479: Tensor[(576), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), int8], Tensor[(576), float32], Tensor[(864), float32]) {
  %731 = @func_4920() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %732 = cast(%var_11479, dtype="float32") /* ty=Tensor[(576), float32] */;
  %733 = cast(meta[relay.Constant][62] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %734 = reshape(%732, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %735 = reshape(%733, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), float32] */;
  %736 = @func_11274(%734, %735) /* ty=(Tensor[(64), float32], Tensor[(576), float32], Tensor[(12, 8, 9), int8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(384), uint32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(132), int16], Tensor[(132), float32]) */;
  %737 = %731.1;
  %738 = %736.2;
  (%737, %738, %var_11479, meta[relay.Constant][62] /* ty=Tensor[(864), float32] */)
}

def @func_7961() -> Tensor[(3, 16, 6), float32] {
  @func_4536() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_3905() -> Tensor[(3, 16, 6), bool] {
  @func_2428() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_6329() -> (Tensor[(6, 11, 5), int16],) {
  %739 = cast(meta[relay.Constant][63] /* ty=Tensor[(6, 11, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 11, 5), float32] */;
  %740 = rsqrt(%739) /* ty=Tensor[(6, 11, 5), float32] */;
  %741 = cast(meta[relay.Constant][63] /* ty=Tensor[(6, 11, 5), float32] */, dtype="uint64") /* ty=Tensor[(6, 11, 5), uint64] */;
  %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%740, dtype="uint64") /* ty=Tensor[(6, 11, 5), uint64] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %745 = right_shift(%743, %744) /* ty=Tensor[(6, 11, 5), uint64] */;
  %746 = cast(%740, dtype="bool") /* ty=Tensor[(6, 11, 5), bool] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%745, dtype="bool") /* ty=Tensor[(6, 11, 5), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %750 = greater_equal(%748, %749) /* ty=Tensor[(6, 11, 5), bool] */;
  %751 = cast(%740, dtype="int16") /* ty=Tensor[(6, 11, 5), int16] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%750, dtype="int16") /* ty=Tensor[(6, 11, 5), int16] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %755 = left_shift(%753, %754) /* ty=Tensor[(6, 11, 5), int16] */;
  (%755,)
}

def @func_9382() -> Tensor[(3, 16, 6), float32] {
  %756 = @func_3725() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %756.0
}

def @func_10016(%var_9995: Tensor[(10, 3, 1), float64]) -> (Tensor[(10, 3, 1), float64], Tensor[(10, 2, 13), bool]) {
  %757 = cast(%var_9995, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %758 = @func_8633() /* ty=(Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) */;
  %759 = cos(%757) /* ty=Tensor[(10, 3, 1), float64] */;
  %760 = %758.0;
  (%759, %760)
}

def @func_7118() -> Tensor[(11, 4, 3), uint8] {
  %761 = @func_5074() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), bool]) */;
  %761.1
}

def @func_2671(%var_2666: Tensor[(384), uint32], %var_2667: Tensor[(576), float32], %var_2669: Tensor[(320), float32]) -> (Tensor[(3, 16, 6), float64], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32]) {
  %762 = @func_2598() /* ty=Tensor[(3, 16, 6), bool] */;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %764 = cast(%var_2666, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %765 = cast(%var_2667, dtype="float32") /* ty=Tensor[(576), float32] */;
  %766 = cast(meta[relay.Constant][64] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %767 = cast(%var_2669, dtype="float32") /* ty=Tensor[(320), float32] */;
  %768 = reshape(%764, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %769 = reshape(%765, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %770 = reshape(%766, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %771 = reshape(%767, newshape=[160, 2]) /* ty=Tensor[(160, 2), float32] */;
  %772 = @func_1832(%768, %769, %770, %771) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), bool], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(160, 2), float32], Tensor[(9, 16, 4), float32], Tensor[(8, 16, 3), uint32]) */;
  %773 = asinh(%763) /* ty=Tensor[(3, 16, 6), float64] */;
  %774 = %772.8;
  (%773, %774, %var_2666, %var_2667, meta[relay.Constant][64] /* ty=Tensor[(64), float32] */, %var_2669)
}

def @func_13686() -> (Tensor[(3, 16, 6), bool], Tensor[(?, 546), float32]) {
  %775 = @func_9517() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(?, 546), int16]) */;
  %776 = %775.1;
  %777 = cast(%776, dtype="float32") /* ty=Tensor[(?, 546), float32] */;
  %778 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %779 = acos(%777) /* ty=Tensor[(?, 546), float32] */;
  (%778, %779)
}

def @func_10963(%var_10942: Tensor[(8, 11, 9), float32]) -> (Tensor[(8, 11, 9), uint32],) {
  %780 = cast(%var_10942, dtype="float32") /* ty=Tensor[(8, 11, 9), float32] */;
  %781 = log2(%780) /* ty=Tensor[(8, 11, 9), float32] */;
  %782 = cast(meta[relay.Constant][65] /* ty=Tensor[(8, 11, 9), float32] */, dtype="uint32") /* ty=Tensor[(8, 11, 9), uint32] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="uint32") /* ty=Tensor[(8, 11, 9), uint32] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %786 = logical_xor(%784, %785) /* ty=Tensor[(8, 11, 9), uint32] */;
  (%786,)
}

def @func_4421() -> (Tensor[(3, 16, 6), int64],) {
  %787 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
  %788 = %787.5;
  (%788,)
}

def @func_7584() -> (Tensor[(10, 2, 13), bool],) {
  %789 = @func_2689() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) */;
  %790 = %789.1;
  (%790,)
}

def @func_1724(%var_1697: Tensor[(384), uint32], %var_1717: Tensor[(64), float32], %var_1718: Tensor[(80, 4), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(384, 24), uint8], Tensor[(384), uint32], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(80, 4), float32]) {
  %791 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %792 = %791.0;
  %793 = cast(%792, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %794 = cast(%var_1697, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %795 = reshape(%794, newshape=[384, 1]) /* ty=Tensor[(384, 1), uint32] */;
  %796 = @func_1574(%795) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(384, 24), uint8]) */;
  %797 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %798 = cast(%797, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %799 = cast(meta[relay.Constant][66] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %800 = cast(%var_1697, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %801 = reshape(%799, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
  %802 = reshape(%800, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %803 = cast(meta[relay.Constant][67] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %804 = cast(meta[relay.Constant][66] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %805 = cast(%var_1697, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %806 = cast(%var_1717, dtype="float32") /* ty=Tensor[(64), float32] */;
  %807 = cast(%var_1718, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %808 = cast(%var_1697, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %809 = reshape(%803, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
  %810 = reshape(%804, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %811 = reshape(%805, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %812 = reshape(%806, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %813 = reshape(%807, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %814 = reshape(%808, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %815 = @func_1076(%809, %810, %811, %812, %813, %814) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
  %816 = acos(%793) /* ty=Tensor[(3, 16, 6), float32] */;
  %817 = %796.3;
  %818 = tan(%798) /* ty=Tensor[(3, 16, 6), float32] */;
  %819 = @func_327(%801, %802) /* ty=Tensor[(8, 16, 3), uint32] */;
  %820 = %815.7;
  (%816, %817, %var_1697, %818, %819, meta[relay.Constant][66] /* ty=Tensor[(24), uint32] */, %820, meta[relay.Constant][67] /* ty=Tensor[(576), float32] */, %var_1717, %var_1718)
}

def @func_6809() -> (Tensor[(11, 4, 3), float64],) {
  %821 = @func_4800() /* ty=(Tensor[(11, 4, 3), float64], Tensor[(1, 160), float64]) */;
  %822 = %821.0;
  (%822,)
}

def @func_12388() -> (Tensor[(10, 2, 13), bool],) {
  %823 = @func_2689() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) */;
  %824 = %823.1;
  (%824,)
}

def @func_2099(%var_2089: Tensor[(3, 16, 6), float32], %var_2096: Tensor[(132), int16]) -> (Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) {
  %825 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %826 = %825.0;
  %827 = cast(%var_2089, dtype="int32") /* ty=Tensor[(3, 16, 6), int32] */;
  %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%826, dtype="int32") /* ty=Tensor[(3, 16, 6), int32] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %831 = cast(%var_2096, dtype="int16") /* ty=Tensor[(132), int16] */;
  %832 = reshape(%831, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int16] */;
  %833 = @func_1867(%832) /* ty=(Tensor[(11, 4, 3), float64],) */;
  %834 = bitwise_and(%829, %830) /* ty=Tensor[(3, 16, 6), int32] */;
  %835 = %833.0;
  (%834, %835, %var_2096)
}

def @func_9517() -> (Tensor[(3, 16, 6), float32], Tensor[(?, 546), int16]) {
  %836 = @func_3542() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %837 = @func_7279() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(1, 24), uint32], Tensor[(?, 546), int16]) */;
  %838 = %836.0;
  %839 = %837.2;
  (%838, %839)
}

def @func_10338(%var_10301: Tensor[(384), uint32], %var_10303: Tensor[(2, 160), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(288, 2), float32], Tensor[(2, 160), float32], Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) {
  %840 = cast(%var_10301, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %841 = cast(meta[relay.Constant][68] /* ty=Tensor[(288, 2), float32] */, dtype="float32") /* ty=Tensor[(288, 2), float32] */;
  %842 = cast(%var_10303, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %843 = reshape(%840, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %844 = reshape(%841, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %845 = reshape(%842, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %846 = @func_2671(%843, %844, %845) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32]) */;
  %847 = cast(%var_10303, dtype="float64") /* ty=Tensor[(2, 160), float64] */;
  %848 = cosh(%847) /* ty=Tensor[(2, 160), float64] */;
  %849 = cast(%var_10303, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(2), int32] */;
  %851 = cast(%848, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %853 = @func_7898() /* ty=(Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) */;
  %854 = @func_6774() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %855 = @func_8281() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %856 = @func_7720() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %857 = @func_3919() /* ty=Tensor[(3, 16, 6), bool] */;
  %858 = %846.4;
  %859 = floor_mod(%851, %852) /* ty=Tensor[(2, 160), float32] */;
  %860 = %853.0;
  %861 = %854.0;
  %862 = %855.0;
  %863 = %856.0;
  (%857, %858, %var_10301, meta[relay.Constant][68] /* ty=Tensor[(288, 2), float32] */, %859, %860, %861, %862, %863)
}

def @func_8393() -> Tensor[(3, 16, 6), bool] {
  @func_5975() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_10708(%var_10651: Tensor[(8, 16, 3), uint32]) -> (Tensor[(8, 16, 3), bool], Tensor[(8, 16, 3), float32], Tensor[(132), int16]) {
  %864 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
  %865 = %864.1;
  %866 = cast(%var_10651, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
  %867 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%865, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %870 = greater_equal(%868, %869) /* ty=Tensor[(8, 16, 3), bool] */;
  %871 = cast(%var_10651, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%870, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %875 = cast(%865, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %876 = cos(%875) /* ty=Tensor[(8, 16, 3), float32] */;
  %877 = cast(%870, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %878 = shape_of(%876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%876, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %881 = @func_4855() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
  %882 = equal(%873, %874) /* ty=Tensor[(8, 16, 3), bool] */;
  %883 = floor_mod(%879, %880) /* ty=Tensor[(8, 16, 3), float32] */;
  %884 = %881.2;
  (%882, %883, %884)
}

def @func_13860(%var_13848: Tensor[(1120), int16]) -> (Tensor[(384), uint32], Tensor[(1, 2112), float32], Tensor[(1120), int16], Tensor[(576), float32]) {
  %885 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
  %886 = cast(%var_13848, dtype="int16") /* ty=Tensor[(1120), int16] */;
  %887 = cast(meta[relay.Constant][69] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %888 = reshape(%886, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), int16] */;
  %889 = reshape(%887, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %890 = @func_10858(%888, %889) /* ty=(Tensor[(5, 14, 16), bool], Tensor[(5, 10, 8), float32], Tensor[(1, 400), float32], Tensor[(24), uint32], Tensor[(1, 2112), float32], Tensor[(576), float32], Tensor[(64), float32]) */;
  %891 = %885.3;
  %892 = %890.4;
  (%891, %892, %var_13848, meta[relay.Constant][69] /* ty=Tensor[(576), float32] */)
}

def @func_2377(%var_2337: Tensor[(24, 16), uint32], %var_2339: Tensor[(64), float32], %var_2340: Tensor[(4, 80), float32], %var_2346: Tensor[(160), float64]) -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int64], Tensor[(9, 16, 4), float32], Tensor[(24, 16), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(4, 80), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), bool]) {
  %893 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %894 = %893.0;
  %895 = cast(%894, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %896 = reshape(%895, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float64] */;
  %897 = @func_2261(%896) /* ty=(Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) */;
  %898 = cast(%var_2337, dtype="uint32") /* ty=Tensor[(24, 16), uint32] */;
  %899 = cast(meta[relay.Constant][70] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %900 = cast(%var_2339, dtype="float32") /* ty=Tensor[(64), float32] */;
  %901 = cast(%var_2340, dtype="float32") /* ty=Tensor[(4, 80), float32] */;
  %902 = reshape(%898, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %903 = reshape(%899, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %904 = reshape(%900, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %905 = reshape(%901, newshape=[160, 2]) /* ty=Tensor[(160, 2), float32] */;
  %906 = @func_1832(%902, %903, %904, %905) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), bool], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(160, 2), float32], Tensor[(9, 16, 4), float32], Tensor[(8, 16, 3), uint32]) */;
  %907 = cast(%var_2346, dtype="float64") /* ty=Tensor[(160), float64] */;
  %908 = reshape(%907, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %909 = @func_1901(%908) /* ty=(Tensor[(10, 2, 8), float64],) */;
  %910 = %897.1;
  %911 = %906.10;
  %912 = %909.0;
  %913 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  (%894, %910, %911, %var_2337, meta[relay.Constant][70] /* ty=Tensor[(576), float32] */, %var_2339, %var_2340, %912, %var_2346, %913)
}

def @func_6757() -> (Tensor[(3, 16, 6), float32],) {
  %914 = @func_3370() /* ty=Tensor[(3, 16, 6), float32] */;
  (%914,)
}

def @func_9315() -> (Tensor[(3, 16, 6), bool],) {
  %915 = @func_9306() /* ty=Tensor[(3, 16, 6), bool] */;
  (%915,)
}

def @func_7441(%var_7435: Tensor[(4, 72), bool]) -> (Tensor[(11, 4, 3), float64], Tensor[(3, 16, 6), float32], Tensor[(4, 72), bool]) {
  %916 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
  %917 = %916.1;
  %918 = cast(%917, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
  %919 = cast(%var_7435, dtype="bool") /* ty=Tensor[(4, 72), bool] */;
  %920 = reshape(%919, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %921 = @func_3802(%920) /* ty=(Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */;
  %922 = log(%918) /* ty=Tensor[(11, 4, 3), float64] */;
  %923 = %921.2;
  (%922, %923, %var_7435)
}

def @func_4815() -> (Tensor[(3, 16, 6), bool],) {
  %924 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %925 = %924.0;
  (%925,)
}

def @func_7486() -> (Tensor[(320), float32],) {
  %926 = @func_6474() /* ty=(Tensor[(320), float32],) */;
  %927 = %926.0;
  (%927,)
}

def @func_10526() -> (Tensor[(3, 16, 6), bool],) {
  %928 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %929 = %928.1;
  (%929,)
}

def @func_12227() -> (Tensor[(64), float32], Tensor[(3, 16, 6), int64]) {
  %930 = @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */;
  %931 = @func_8666() /* ty=Tensor[(64), float32] */;
  %932 = %930.0;
  (%931, %932)
}

def @func_4536() -> Tensor[(3, 16, 6), float32] {
  @func_3370() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_11984() -> (Tensor[(3, 16, 6), bool],) {
  %933 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %934 = %933.0;
  (%934,)
}

def @func_6185() -> Tensor[(3, 16, 6), float32] {
  %935 = @func_4920() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %935.1
}

def @func_3507() -> (Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) {
  %936 = cast(meta[relay.Constant][71] /* ty=Tensor[(1, 24), uint32] */, dtype="uint32") /* ty=Tensor[(1, 24), uint32] */;
  %937 = cast(meta[relay.Constant][72] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %938 = reshape(%936, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
  %939 = reshape(%937, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %940 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %941 = cast(%940, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %942 = reshape(%941, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float64] */;
  %943 = @func_2261(%942) /* ty=(Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) */;
  %944 = cast(%940, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %945 = reshape(%944, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float64] */;
  %946 = @func_2261(%945) /* ty=(Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) */;
  %947 = cast(meta[relay.Constant][73] /* ty=Tensor[(1, 160), float64] */, dtype="float64") /* ty=Tensor[(1, 160), float64] */;
  %948 = reshape(%947, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %949 = @func_1901(%948) /* ty=(Tensor[(10, 2, 8), float64],) */;
  %950 = @func_327(%938, %939) /* ty=Tensor[(8, 16, 3), uint32] */;
  %951 = %943.0;
  %952 = %946.1;
  %953 = %949.0;
  (%940, %950, meta[relay.Constant][71] /* ty=Tensor[(1, 24), uint32] */, meta[relay.Constant][72] /* ty=Tensor[(384), uint32] */, %951, %952, %953, meta[relay.Constant][73] /* ty=Tensor[(1, 160), float64] */)
}

def @func_13353() -> (Tensor[(3, 16, 6), int64],) {
  %954 = @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */;
  %955 = %954.0;
  (%955,)
}

def @func_6651(%var_6609: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), float32], Tensor[(64), float32]) {
  %956 = @func_6221() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(12, 8, 9), float32], Tensor[(12, 8, 9), float32]) */;
  %957 = %956.0;
  %958 = cast(%var_6609, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %959 = shape_of(%957, dtype="int32") /* ty=Tensor[(3), int32] */;
  %960 = cast(%957, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %962 = @func_5353() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
  %963 = divide(%960, %961) /* ty=Tensor[(3, 16, 6), float32] */;
  %964 = %962.1;
  (%963, %964)
}

def @func_5975() -> Tensor[(3, 16, 6), bool] {
  %965 = @func_3542() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %965.1
}

def @func_1867(%var_1848: Tensor[(11, 4, 3), int16]) -> (Tensor[(11, 4, 3), float64],) {
  %966 = cast(meta[relay.Constant][74] /* ty=Tensor[(11, 4, 3), int16] */, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
  %967 = shape_of(%var_1848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %968 = cast(%var_1848, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
  %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %970 = less(%968, %969) /* ty=Tensor[(11, 4, 3), bool] */;
  %971 = cast(%970, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
  %972 = shape_of(meta[relay.Constant][74] /* ty=Tensor[(11, 4, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(meta[relay.Constant][74] /* ty=Tensor[(11, 4, 3), int16] */, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %975 = power(%973, %974) /* ty=Tensor[(11, 4, 3), float64] */;
  (%975,)
}

def @func_3461() -> (Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) {
  %976 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %977 = %976.0;
  %978 = cast(%977, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %979 = cast(meta[relay.Constant][75] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %980 = reshape(%979, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int16] */;
  %981 = @func_1867(%980) /* ty=(Tensor[(11, 4, 3), float64],) */;
  %982 = cast(meta[relay.Constant][75] /* ty=Tensor[(132), int16] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %983 = cosh(%978) /* ty=Tensor[(3, 16, 6), float64] */;
  %984 = %981.0;
  %985 = atan(%982) /* ty=Tensor[(132), float32] */;
  (%983, %984, %985)
}

def @func_4122() -> (Tensor[(3, 16, 6), bool],) {
  %986 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %987 = %986.0;
  (%987,)
}

def @func_4800() -> (Tensor[(11, 4, 3), float64], Tensor[(1, 160), float64]) {
  %988 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
  %989 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
  %990 = %988.1;
  %991 = %989.7;
  (%990, %991)
}

def @func_11037(%var_11000: Tensor[(24), uint32], %var_11001: Tensor[(384), uint32]) -> (Tensor[(10, 2, 13), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(2, 160), bool], Tensor[(24), uint32], Tensor[(4, 16), float32], Tensor[(3, 16, 6), bool], Tensor[(64), float32], Tensor[(3, 16, 6), float32]) {
  %992 = @func_8633() /* ty=(Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) */;
  %993 = cast(meta[relay.Constant][76] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %994 = cast(%var_11000, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %995 = cast(%var_11001, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %996 = cast(meta[relay.Constant][77] /* ty=Tensor[(2, 160), bool] */, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
  %997 = reshape(%993, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %998 = reshape(%994, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %999 = reshape(%995, newshape=[384, 1]) /* ty=Tensor[(384, 1), uint32] */;
  %1000 = reshape(%996, newshape=[8, 40]) /* ty=Tensor[(8, 40), bool] */;
  %1001 = @func_4330(%997, %998, %999, %1000) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384, 1), uint32], Tensor[(8, 40), bool]) */;
  %1002 = cast(meta[relay.Constant][78] /* ty=Tensor[(4, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 16), float32] */;
  %1003 = reshape(%1002, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1004 = @func_4774(%1003) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(384), uint32], Tensor[(24), uint32], Tensor[(2, 192), uint32], Tensor[(64), float32]) */;
  %1005 = @func_5544() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
  %1006 = %1001.2;
  %1007 = cast(%1006, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1008 = reshape(%1007, newshape=[36, 16]) /* ty=Tensor[(36, 16), float32] */;
  %1009 = @func_9190(%1008) /* ty=(Tensor[(4, 16, ?), int8], Tensor[(3, 16, 6), int64], Tensor[(495, 3), float32], Tensor[(64), float32], Tensor[(3, 16, 6), bool], Tensor[(4, 16, 315), int8], Tensor[(4, 16, ?), bool], Tensor[(3, 16, 6), float64], Tensor[(36, 16), float32]) */;
  %1010 = %992.0;
  %1011 = %1004.3;
  %1012 = %1005.1;
  %1013 = %1009.3;
  %1014 = @func_9035() /* ty=Tensor[(3, 16, 6), float32] */;
  (%1010, %1006, meta[relay.Constant][76] /* ty=Tensor[(576), float32] */, %var_11000, %var_11001, meta[relay.Constant][77] /* ty=Tensor[(2, 160), bool] */, %1011, meta[relay.Constant][78] /* ty=Tensor[(4, 16), float32] */, %1012, %1013, %1014)
}

def @func_3542() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  %1015 = @func_3198() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %1016 = %1015.1;
  %1017 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1016, %1017)
}

def @func_894(%var_881: Tensor[(10, 2, 13), bool]) -> (Tensor[(10, 2, 13), bool],) {
  %1018 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %1019 = cast(%var_881, dtype="bool") /* ty=Tensor[(10, 2, 13), bool] */;
  %1020 = logical_and(%1018, %1019) /* ty=Tensor[(10, 2, 13), bool] */;
  (%1020,)
}

def @func_6455() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  %1021 = @func_3198() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %1022 = %1021.2;
  %1023 = cast(%1022, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %1024 = @func_4196() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1025 = log(%1023) /* ty=Tensor[(3, 16, 6), float32] */;
  %1026 = %1024.0;
  (%1025, %1026)
}

def @func_8817() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) {
  %1027 = @func_4217() /* ty=Tensor[(3, 16, 6), float32] */;
  %1028 = @func_4536() /* ty=Tensor[(3, 16, 6), float32] */;
  (%1027, %1028)
}

def @func_4196() -> (Tensor[(3, 16, 6), bool],) {
  %1029 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1030 = %1029.0;
  (%1030,)
}

def @func_2428() -> Tensor[(3, 16, 6), bool] {
  %1031 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1031.1
}

def @func_7610() -> Tensor[(3, 16, 6), float32] {
  @func_4076() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_9190(%var_9185: Tensor[(36, 16), float32]) -> (Tensor[(4, 16, ?), int8], Tensor[(3, 16, 6), int64], Tensor[(495, 3), float32], Tensor[(64), float32], Tensor[(3, 16, 6), bool], Tensor[(4, 16, 315), int8], Tensor[(4, 16, ?), bool], Tensor[(3, 16, 6), float64], Tensor[(36, 16), float32]) {
  %1032 = cast(meta[relay.Constant][79] /* ty=Tensor[(4, 16, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 16, 1), float32] */;
  %1033 = sin(%1032) /* ty=Tensor[(4, 16, 1), float32] */;
  %1034 = cast(meta[relay.Constant][79] /* ty=Tensor[(4, 16, 1), float32] */, dtype="int8") /* ty=Tensor[(4, 16, 1), int8] */;
  %1035 = shape_of(%1033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1036 = cast(%1033, dtype="int8") /* ty=Tensor[(4, 16, 1), int8] */;
  %1037 = dyn.reshape(%1034, %1035, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1038 = @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */;
  %1039 = cast(meta[relay.Constant][80] /* ty=Tensor[(1, 315), float64] */, dtype="float64") /* ty=Tensor[(1, 315), float64] */;
  %1040 = reshape(%1039, newshape=[5, 7, 9]) /* ty=Tensor[(5, 7, 9), float64] */;
  %1041 = @func_7983(%1040) /* ty=(Tensor[(5, 7, 9), float64], Tensor[(11, 9, 15), float32], Tensor[(495, 3), float32]) */;
  %1042 = @func_5353() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
  %1043 = cast(meta[relay.Constant][79] /* ty=Tensor[(4, 16, 1), float32] */, dtype="bool") /* ty=Tensor[(4, 16, 1), bool] */;
  %1044 = shape_of(%1033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1045 = cast(%1033, dtype="bool") /* ty=Tensor[(4, 16, 1), bool] */;
  %1046 = dyn.reshape(%1043, %1044, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1047 = not_equal(%1045, %1046) /* ty=Tensor[(4, 16, ?), bool] */;
  %1048 = cast(%1047, dtype="float64") /* ty=Tensor[(4, 16, ?), float64] */;
  %1049 = erf(%1048) /* ty=Tensor[(4, 16, ?), float64] */;
  %1050 = cast(%1049, dtype="float32") /* ty=Tensor[(4, 16, ?), float32] */;
  %1051 = log10(%1050) /* ty=Tensor[(4, 16, ?), float32] */;
  %1052 = cast(%1051, dtype="int8") /* ty=Tensor[(4, 16, ?), int8] */;
  %1053 = cast(meta[relay.Constant][80] /* ty=Tensor[(1, 315), float64] */, dtype="int8") /* ty=Tensor[(1, 315), int8] */;
  %1054 = cast(%1051, dtype="bool") /* ty=Tensor[(4, 16, ?), bool] */;
  %1055 = shape_of(%1047, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1056 = cast(%1047, dtype="bool") /* ty=Tensor[(4, 16, ?), bool] */;
  %1057 = dyn.reshape(%1054, %1055, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1058 = cast(%var_9185, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %1059 = reshape(%1058, newshape=[2, 288]) /* ty=Tensor[(2, 288), float32] */;
  %1060 = @func_4405(%1059) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), float64], Tensor[(384), uint32], Tensor[(2, 288), float32], Tensor[(40, 8), float32]) */;
  %1061 = minimum(%1036, %1037) /* ty=Tensor[(4, 16, ?), int8] */;
  %1062 = %1038.0;
  %1063 = %1041.2;
  %1064 = %1042.1;
  %1065 = @func_2598() /* ty=Tensor[(3, 16, 6), bool] */;
  %1066 = subtract(%1052, %1053) /* ty=Tensor[(4, 16, 315), int8] */;
  %1067 = less_equal(%1056, %1057) /* ty=Tensor[(4, 16, ?), bool] */;
  %1068 = %1060.0;
  (%1061, %1062, %1063, %1064, %1065, %1066, %1067, %1068, %var_9185)
}

def @func_9974() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  %1069 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1070 = @func_9306() /* ty=Tensor[(3, 16, 6), bool] */;
  %1071 = @func_4076() /* ty=Tensor[(3, 16, 6), float32] */;
  %1072 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %1073 = %1069.0;
  (%1070, %1071, %1072, %1073)
}

def @func_2261(%var_2226: Tensor[(3, 16, 6), float64]) -> (Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) {
  %1074 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %1075 = cast(%1074, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %1076 = sin(%1075) /* ty=Tensor[(3, 16, 6), float64] */;
  %1077 = cast(%var_2226, dtype="uint32") /* ty=Tensor[(3, 16, 6), uint32] */;
  %1078 = shape_of(%1076, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1079 = cast(%1076, dtype="uint32") /* ty=Tensor[(3, 16, 6), uint32] */;
  %1080 = dyn.reshape(%1077, %1078, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1081 = cast(%var_2226, dtype="int64") /* ty=Tensor[(3, 16, 6), int64] */;
  %1082 = shape_of(%1076, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1083 = cast(%1076, dtype="int64") /* ty=Tensor[(3, 16, 6), int64] */;
  %1084 = dyn.reshape(%1081, %1082, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1085 = bitwise_xor(%1079, %1080) /* ty=Tensor[(3, 16, 6), uint32] */;
  %1086 = minimum(%1083, %1084) /* ty=Tensor[(3, 16, 6), int64] */;
  (%1085, %1086)
}

def @func_5920() -> (Tensor[(3, 16, 6), bool],) {
  %1087 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1087,)
}

def @func_7463() -> Tensor[(3, 16, 6), int64] {
  %1088 = @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */;
  %1088.0
}

def @func_13419() -> (Tensor[(3, 16, 6), float32], Tensor[(320), float32], Tensor[(64), float32]) {
  %1089 = @func_7486() /* ty=(Tensor[(320), float32],) */;
  %1090 = @func_5016() /* ty=(Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %1091 = @func_12786() /* ty=Tensor[(3, 16, 6), float32] */;
  %1092 = %1089.0;
  %1093 = %1090.1;
  (%1091, %1092, %1093)
}

def @func_5409(%var_5362: Tensor[(576), float32], %var_5363: Tensor[(64), float32], %var_5378: Tensor[(132), int16], %var_5393: Tensor[(12, 8, 9), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(64), float32], Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), int32], Tensor[(132), int16], Tensor[(12, 8, 9), float64]) {
  %1094 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %1095 = cast(%1094, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %1096 = reshape(%1095, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %1097 = @func_3802(%1096) /* ty=(Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */;
  %1098 = cast(%var_5378, dtype="int16") /* ty=Tensor[(132), int16] */;
  %1099 = reshape(%1098, newshape=[132, 1]) /* ty=Tensor[(132, 1), int16] */;
  %1100 = @func_4440(%1099) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(132, 1), int16]) */;
  %1101 = cast(%var_5362, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1102 = cast(%var_5363, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1103 = reshape(%1101, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1104 = reshape(%1102, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1105 = @func_5197(%1103, %1104) /* ty=(Tensor[(12, 8, 9), float32], Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32]) */;
  %1106 = %1105.0;
  %1107 = cast(%1106, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %1108 = log10(%1107) /* ty=Tensor[(12, 8, 9), float64] */;
  %1109 = cast(%var_5393, dtype="uint16") /* ty=Tensor[(12, 8, 9), uint16] */;
  %1110 = shape_of(%1108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1111 = cast(%1108, dtype="uint16") /* ty=Tensor[(12, 8, 9), uint16] */;
  %1112 = dyn.reshape(%1109, %1110, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1113 = bitwise_xor(%1111, %1112) /* ty=Tensor[(12, 8, 9), uint16] */;
  %1114 = cast(%1113, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %1115 = %1097.0;
  %1116 = %1100.1;
  %1117 = sin(%1114) /* ty=Tensor[(12, 8, 9), float64] */;
  (%1094, %var_5362, %var_5363, %1115, %1116, %var_5378, %1117)
}

def @func_6381(%var_6367: Tensor[(13, 4, 3), float64]) -> (Tensor[(13, 4, 3), float64],) {
  %1118 = cast(%var_6367, dtype="float64") /* ty=Tensor[(13, 4, 3), float64] */;
  %1119 = cosh(%1118) /* ty=Tensor[(13, 4, 3), float64] */;
  (%1119,)
}

def @func_9082() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  %1120 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1121 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  %1122 = %1120.0;
  (%1121, %1122)
}

def @func_4015(%var_3996: Tensor[(576), float32], %var_3997: Tensor[(24, 1), uint32], %var_3999: Tensor[(320), bool]) -> (Tensor[(3, 16, 6), float32], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24, 1), uint32], Tensor[(384), uint32], Tensor[(320), bool]) {
  %1123 = @func_3725() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %1124 = cast(%var_3996, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1125 = cast(%var_3997, dtype="uint32") /* ty=Tensor[(24, 1), uint32] */;
  %1126 = cast(meta[relay.Constant][81] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %1127 = cast(%var_3999, dtype="bool") /* ty=Tensor[(320), bool] */;
  %1128 = reshape(%1124, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1129 = reshape(%1125, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %1130 = reshape(%1126, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1131 = reshape(%1127, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), bool] */;
  %1132 = @func_2041(%1128, %1129, %1130, %1131) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) */;
  %1133 = %1123.0;
  %1134 = %1132.6;
  (%1133, %1134, %var_3996, %var_3997, meta[relay.Constant][81] /* ty=Tensor[(384), uint32] */, %var_3999)
}

def @func_4440(%var_4438: Tensor[(132, 1), int16]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(132, 1), int16]) {
  %1135 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1136 = %1135.0;
  %1137 = cast(%1136, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %1138 = cast(%var_4438, dtype="int16") /* ty=Tensor[(132, 1), int16] */;
  %1139 = reshape(%1137, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float32] */;
  %1140 = reshape(%1138, newshape=[132]) /* ty=Tensor[(132), int16] */;
  %1141 = @func_2099(%1139, %1140) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */;
  %1142 = %1141.0;
  (%1136, %1142, %var_4438)
}

def @func_4490() -> (Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) {
  %1143 = @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */;
  %1144 = @func_4076() /* ty=Tensor[(3, 16, 6), float32] */;
  %1145 = %1143.0;
  (%1144, %1145)
}

def @func_7774() -> (Tensor[(3, 16, 6), bool],) {
  %1146 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1147 = %1146.0;
  (%1147,)
}

def @func_8518() -> Tensor[(3, 16, 6), int64] {
  @func_7463() /* ty=Tensor[(3, 16, 6), int64] */
}

def @func_3892(%var_3870: Tensor[(3, 16, 6), bool], %var_3887: Tensor[(1485), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(1485), float32]) {
  %1148 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %1149 = cast(%var_3870, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %1150 = shape_of(%1148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1151 = cast(%1148, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %1152 = dyn.reshape(%1149, %1150, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1153 = cast(%var_3887, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %1154 = reshape(%1153, newshape=[11, 9, 15]) /* ty=Tensor[(11, 9, 15), float32] */;
  %1155 = @func_3839(%1154) /* ty=(Tensor[(11, 9, 15), float32], Tensor[(3, 16, 6), bool]) */;
  %1156 = multiply(%1151, %1152) /* ty=Tensor[(3, 16, 6), float32] */;
  %1157 = %1155.1;
  (%1156, %1157, %var_3887)
}

def @func_6875() -> (Tensor[(3, 16, 6), bool],) {
  %1158 = @func_5975() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1158,)
}

def @func_4405(%var_4402: Tensor[(2, 288), float32]) -> (Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), float64], Tensor[(384), uint32], Tensor[(2, 288), float32], Tensor[(40, 8), float32]) {
  %1159 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
  %1160 = cast(meta[relay.Constant][82] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %1161 = cast(%var_4402, dtype="float32") /* ty=Tensor[(2, 288), float32] */;
  %1162 = cast(meta[relay.Constant][83] /* ty=Tensor[(40, 8), float32] */, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
  %1163 = reshape(%1160, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1164 = reshape(%1161, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1165 = reshape(%1162, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %1166 = @func_2671(%1163, %1164, %1165) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32]) */;
  %1167 = %1159.0;
  %1168 = %1166.0;
  (%1167, %1168, meta[relay.Constant][82] /* ty=Tensor[(384), uint32] */, %var_4402, meta[relay.Constant][83] /* ty=Tensor[(40, 8), float32] */)
}

def @func_5967() -> (Tensor[(3, 16, 6), float32],) {
  %1169 = @func_3725() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %1170 = %1169.0;
  (%1170,)
}

def @func_9869(%var_9855: Tensor[(576), float32]) -> (Tensor[(6, 11, 5), int16], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(24), uint32], Tensor[(6, 64), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32]) {
  %1171 = @func_6329() /* ty=(Tensor[(6, 11, 5), int16],) */;
  %1172 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1173 = cast(meta[relay.Constant][84] /* ty=Tensor[(6, 64), uint32] */, dtype="uint32") /* ty=Tensor[(6, 64), uint32] */;
  %1174 = reshape(%1173, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1175 = @func_6688(%1174) /* ty=(Tensor[(320), float32], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32]) */;
  %1176 = cast(%var_9855, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1177 = reshape(%1176, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1178 = @func_5884(%1177) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320, 1), float32]) */;
  %1179 = %1171.0;
  %1180 = %1172.0;
  %1181 = @func_7961() /* ty=Tensor[(3, 16, 6), float32] */;
  %1182 = %1175.1;
  %1183 = %1178.1;
  (%1179, %1180, %1181, %1182, meta[relay.Constant][84] /* ty=Tensor[(6, 64), uint32] */, %1183, %var_9855)
}

def @func_10169() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  %1184 = @func_8281() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %1185 = @func_5920() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1186 = %1184.0;
  %1187 = %1185.0;
  (%1186, %1187)
}

def @func_8185() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(6, 11, 5), int16]) {
  %1188 = @func_4479() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %1189 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1190 = @func_6329() /* ty=(Tensor[(6, 11, 5), int16],) */;
  %1191 = %1188.0;
  %1192 = @func_5975() /* ty=Tensor[(3, 16, 6), bool] */;
  %1193 = %1189.1;
  %1194 = %1190.0;
  (%1191, %1192, %1193, %1194)
}

def @func_10279() -> Tensor[(11, 4, 3), bool] {
  %1195 = @func_5074() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), bool]) */;
  %1195.2
}

def @func_3144() -> Tensor[(3, 16, 6), bool] {
  @func_2598() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_13232() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) {
  %1196 = @func_9788() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1197 = %1196.0;
  %1198 = @func_4076() /* ty=Tensor[(3, 16, 6), float32] */;
  (%1197, %1198)
}

def @func_8964() -> (Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32]) {
  %1199 = @func_7720() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %1200 = cast(meta[relay.Constant][85] /* ty=Tensor[(1386), int32] */, dtype="int32") /* ty=Tensor[(1386), int32] */;
  %1201 = cast(meta[relay.Constant][85] /* ty=Tensor[(1386), int32] */, dtype="int32") /* ty=Tensor[(1386), int32] */;
  %1202 = reshape(%1200, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), int32] */;
  %1203 = reshape(%1201, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), int32] */;
  %1204 = @func_6552(%1202, %1203) /* ty=(Tensor[(11, 9, 14), int32],) */;
  %1205 = @func_4479() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %1206 = %1199.0;
  %1207 = %1204.0;
  %1208 = %1205.0;
  (%1206, %1207, meta[relay.Constant][85] /* ty=Tensor[(1386), int32] */, %1208)
}

def @func_12679(%var_12668: Tensor[(72, 8), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(36, 16), float32], Tensor[(72, 8), float32]) {
  %1209 = @func_8025() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
  %1210 = cast(%var_12668, dtype="float32") /* ty=Tensor[(72, 8), float32] */;
  %1211 = reshape(%1210, newshape=[36, 16]) /* ty=Tensor[(36, 16), float32] */;
  %1212 = @func_9190(%1211) /* ty=(Tensor[(4, 16, ?), int8], Tensor[(3, 16, 6), int64], Tensor[(495, 3), float32], Tensor[(64), float32], Tensor[(3, 16, 6), bool], Tensor[(4, 16, 315), int8], Tensor[(4, 16, ?), bool], Tensor[(3, 16, 6), float64], Tensor[(36, 16), float32]) */;
  %1213 = %1209.0;
  %1214 = @func_5452() /* ty=Tensor[(10, 2, 13), bool] */;
  %1215 = %1212.8;
  (%1213, %1214, %1215, %var_12668)
}

def @func_1522() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  %1216 = cast(meta[relay.Constant][87] /* ty=Tensor[(3, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %1217 = shape_of(meta[relay.Constant][86] /* ty=Tensor[(3, 16, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1218 = cast(meta[relay.Constant][86] /* ty=Tensor[(3, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %1219 = dyn.reshape(%1216, %1217, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1220 = cast(meta[relay.Constant][86] /* ty=Tensor[(3, 16, 6), float32] */, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %1221 = asin(%1220) /* ty=Tensor[(3, 16, 6), float64] */;
  %1222 = cast(meta[relay.Constant][86] /* ty=Tensor[(3, 16, 6), float32] */, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %1223 = shape_of(%1221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1224 = cast(%1221, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %1225 = dyn.reshape(%1222, %1223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1226 = floor_mod(%1218, %1219) /* ty=Tensor[(3, 16, 6), float32] */;
  %1227 = logical_and(%1224, %1225) /* ty=Tensor[(3, 16, 6), bool] */;
  (%1226, %1227)
}

def @func_6105() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(576), float32], Tensor[(320), float32]) {
  %1228 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1229 = cast(meta[relay.Constant][88] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1230 = cast(meta[relay.Constant][89] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %1231 = reshape(%1229, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1232 = reshape(%1230, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %1233 = @func_5614(%1231, %1232) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(3, 16, 6), bool], Tensor[(48, 8), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1234 = %1228.0;
  %1235 = %1233.0;
  (%1234, %1235, meta[relay.Constant][88] /* ty=Tensor[(576), float32] */, meta[relay.Constant][89] /* ty=Tensor[(320), float32] */)
}

def @func_5353() -> (Tensor[(3, 16, 6), float32], Tensor[(64), float32]) {
  %1236 = @func_5016() /* ty=(Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %1237 = @func_4217() /* ty=Tensor[(3, 16, 6), float32] */;
  %1238 = %1236.1;
  (%1237, %1238)
}

def @func_10096(%var_10054: Tensor[(1386), int32]) -> (Tensor[(10, 2, 13), float32], Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) {
  %1239 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %1240 = %1239.0;
  %1241 = cast(%1240, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %1242 = @func_7720() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %1243 = cast(%var_10054, dtype="int32") /* ty=Tensor[(1386), int32] */;
  %1244 = cast(%var_10054, dtype="int32") /* ty=Tensor[(1386), int32] */;
  %1245 = reshape(%1243, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), int32] */;
  %1246 = reshape(%1244, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), int32] */;
  %1247 = @func_6552(%1245, %1246) /* ty=(Tensor[(11, 9, 14), int32],) */;
  %1248 = cast(meta[relay.Constant][90] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %1249 = reshape(%1248, newshape=[132, 1]) /* ty=Tensor[(132, 1), int16] */;
  %1250 = @func_4440(%1249) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(132, 1), int16]) */;
  %1251 = erf(%1241) /* ty=Tensor[(10, 2, 13), float32] */;
  %1252 = %1242.0;
  %1253 = %1247.0;
  %1254 = @func_7610() /* ty=Tensor[(3, 16, 6), float32] */;
  %1255 = %1250.1;
  (%1251, %1252, %1253, %var_10054, %1254, %1255, meta[relay.Constant][90] /* ty=Tensor[(132), int16] */)
}

def @func_9918() -> (Tensor[(10, 2, 13), bool],) {
  %1256 = @func_6774() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %1257 = %1256.0;
  (%1257,)
}

def @func_1832(%var_1790: Tensor[(384), uint32], %var_1814: Tensor[(576), float32], %var_1815: Tensor[(64), float32], %var_1816: Tensor[(160, 2), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), bool], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(160, 2), float32], Tensor[(9, 16, 4), float32], Tensor[(8, 16, 3), uint32]) {
  %1258 = cast(meta[relay.Constant][91] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %1259 = cast(%var_1790, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %1260 = reshape(%1258, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
  %1261 = reshape(%1259, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %1262 = cast(%var_1814, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1263 = cast(meta[relay.Constant][91] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %1264 = @func_327(%1260, %1261) /* ty=Tensor[(8, 16, 3), uint32] */;
  %1265 = cast(%1264, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
  %1266 = cast(%var_1815, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1267 = cast(%var_1816, dtype="float32") /* ty=Tensor[(160, 2), float32] */;
  %1268 = cast(%var_1790, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %1269 = reshape(%1262, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
  %1270 = reshape(%1263, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %1271 = reshape(%1265, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1272 = reshape(%1266, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1273 = reshape(%1267, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %1274 = reshape(%1268, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %1275 = @func_1076(%1269, %1270, %1271, %1272, %1273, %1274) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
  %1276 = cast(%var_1814, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1277 = cast(meta[relay.Constant][91] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %1278 = cast(%1264, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
  %1279 = cast(%var_1815, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1280 = cast(%var_1816, dtype="float32") /* ty=Tensor[(160, 2), float32] */;
  %1281 = cast(%1264, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
  %1282 = reshape(%1276, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
  %1283 = reshape(%1277, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %1284 = reshape(%1278, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1285 = reshape(%1279, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1286 = reshape(%1280, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %1287 = reshape(%1281, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %1288 = @func_1076(%1282, %1283, %1284, %1285, %1286, %1287) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
  %1289 = cast(%1264, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
  %1290 = reshape(%1289, newshape=[384, 1]) /* ty=Tensor[(384, 1), uint32] */;
  %1291 = @func_1574(%1290) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(384, 24), uint8]) */;
  %1292 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %1293 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %1294 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %1295 = %1275.1;
  %1296 = %1288.0;
  %1297 = %1291.2;
  (%1292, %1293, %1264, meta[relay.Constant][91] /* ty=Tensor[(24), uint32] */, %var_1790, %1294, %1295, %var_1814, %var_1815, %var_1816, %1296, %1297)
}

def @func_9760() -> (Tensor[(320), float32], Tensor[(64), float32]) {
  %1298 = @func_6474() /* ty=(Tensor[(320), float32],) */;
  %1299 = %1298.0;
  %1300 = @func_8666() /* ty=Tensor[(64), float32] */;
  (%1299, %1300)
}

def @func_6474() -> (Tensor[(320), float32],) {
  %1301 = @func_5098() /* ty=(Tensor[(320), float32],) */;
  %1302 = %1301.0;
  (%1302,)
}

def @func_8712() -> (Tensor[(3, 16, 6), bool],) {
  %1303 = @func_4543() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1303,)
}

def @func_13970() -> (Tensor[(3, 16, 6), bool],) {
  %1304 = @func_8712() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1305 = %1304.0;
  (%1305,)
}

def @func_3919() -> Tensor[(3, 16, 6), bool] {
  %1306 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1306.0
}

def @func_2912(%var_2907: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), float64],) {
  %1307 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1308 = %1307.0;
  %1309 = cast(%var_2907, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %1310 = shape_of(%1308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1311 = cast(%1308, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %1312 = dyn.reshape(%1309, %1310, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1313 = floor_divide(%1311, %1312) /* ty=Tensor[(3, 16, 6), float64] */;
  (%1313,)
}

def @func_3725() -> (Tensor[(3, 16, 6), float32],) {
  %1314 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1315 = %1314.0;
  (%1315,)
}

def @func_8281() -> (Tensor[(3, 16, 6), float32],) {
  %1316 = @func_4240() /* ty=Tensor[(3, 16, 6), float32] */;
  (%1316,)
}

def @func_5452() -> Tensor[(10, 2, 13), bool] {
  %1317 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %1317.0
}

def @func_5701(%var_5695: Tensor[(5, 10, 8), float32]) -> (Tensor[(5, 10, 8), float32],) {
  %1318 = cast(%var_5695, dtype="float32") /* ty=Tensor[(5, 10, 8), float32] */;
  %1319 = asin(%1318) /* ty=Tensor[(5, 10, 8), float32] */;
  (%1319,)
}

def @func_8053() -> (Tensor[(3, 16, 6), bool],) {
  %1320 = @func_4596() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1321 = %1320.0;
  (%1321,)
}

def @func_3234() -> (Tensor[(10, 2, 13), bool],) {
  %1322 = @func_2689() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) */;
  %1323 = %1322.1;
  (%1323,)
}

def @func_10457(%var_10431: Tensor[(4, 7, 14), float64]) -> (Tensor[(4, 7, 14), float32],) {
  %1324 = cast(%var_10431, dtype="float64") /* ty=Tensor[(4, 7, 14), float64] */;
  %1325 = sinh(%1324) /* ty=Tensor[(4, 7, 14), float64] */;
  %1326 = cast(%var_10431, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
  %1327 = shape_of(%1325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1328 = cast(%1325, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
  %1329 = dyn.reshape(%1326, %1327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1330 = greater_equal(%1328, %1329) /* ty=Tensor[(4, 7, 14), bool] */;
  %1331 = cast(%1325, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
  %1332 = shape_of(%1330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1333 = cast(%1330, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
  %1334 = dyn.reshape(%1331, %1332, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1335 = mod(%1333, %1334) /* ty=Tensor[(4, 7, 14), float32] */;
  (%1335,)
}

def @func_4240() -> Tensor[(3, 16, 6), float32] {
  %1336 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1336.0
}

def @func_327(%var_317: Tensor[(8, 1, 3), uint32], %var_318: Tensor[(8, 16, 3), uint32]) -> Tensor[(8, 16, 3), uint32] {
  %1337 = cast(%var_317, dtype="uint32") /* ty=Tensor[(8, 1, 3), uint32] */;
  %1338 = cast(%var_318, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
  minimum(%1337, %1338) /* ty=Tensor[(8, 16, 3), uint32] */
}

def @func_10858(%var_10844: Tensor[(5, 14, 16), int16], %var_10853: Tensor[(576), float32]) -> (Tensor[(5, 14, 16), bool], Tensor[(5, 10, 8), float32], Tensor[(1, 400), float32], Tensor[(24), uint32], Tensor[(1, 2112), float32], Tensor[(576), float32], Tensor[(64), float32]) {
  %1339 = cast(%var_10844, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
  %1340 = shape_of(meta[relay.Constant][92] /* ty=Tensor[(5, 14, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1341 = cast(meta[relay.Constant][92] /* ty=Tensor[(5, 14, 16), int16] */, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
  %1342 = dyn.reshape(%1339, %1340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1343 = cast(meta[relay.Constant][93] /* ty=Tensor[(1, 400), float32] */, dtype="float32") /* ty=Tensor[(1, 400), float32] */;
  %1344 = reshape(%1343, newshape=[5, 10, 8]) /* ty=Tensor[(5, 10, 8), float32] */;
  %1345 = @func_5701(%1344) /* ty=(Tensor[(5, 10, 8), float32],) */;
  %1346 = cast(meta[relay.Constant][94] /* ty=Tensor[(1, 2112), float32] */, dtype="float32") /* ty=Tensor[(1, 2112), float32] */;
  %1347 = cast(%var_10853, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1348 = cast(meta[relay.Constant][95] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1349 = reshape(%1346, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float32] */;
  %1350 = reshape(%1347, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1351 = reshape(%1348, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1352 = @func_2501(%1349, %1350, %1351) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) */;
  %1353 = less(%1341, %1342) /* ty=Tensor[(5, 14, 16), bool] */;
  %1354 = %1345.0;
  %1355 = %1352.4;
  (%1353, %1354, meta[relay.Constant][93] /* ty=Tensor[(1, 400), float32] */, %1355, meta[relay.Constant][94] /* ty=Tensor[(1, 2112), float32] */, %var_10853, meta[relay.Constant][95] /* ty=Tensor[(64), float32] */)
}

def @func_2524() -> Tensor[(3, 16, 6), bool] {
  @func_1537() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_11094() -> Tensor[(10, 2, 13), bool] {
  %1356 = @func_6774() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %1356.0
}

def @func_12360(%var_12352: Tensor[(576), float32]) -> (Tensor[(10, 2, 13), bool], Tensor[(64), float32], Tensor[(1120), int16], Tensor[(576), float32]) {
  %1357 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %1358 = cast(meta[relay.Constant][96] /* ty=Tensor[(1120), int16] */, dtype="int16") /* ty=Tensor[(1120), int16] */;
  %1359 = cast(%var_12352, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1360 = reshape(%1358, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), int16] */;
  %1361 = reshape(%1359, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1362 = @func_10858(%1360, %1361) /* ty=(Tensor[(5, 14, 16), bool], Tensor[(5, 10, 8), float32], Tensor[(1, 400), float32], Tensor[(24), uint32], Tensor[(1, 2112), float32], Tensor[(576), float32], Tensor[(64), float32]) */;
  %1363 = %1357.0;
  %1364 = %1362.6;
  (%1363, %1364, meta[relay.Constant][96] /* ty=Tensor[(1120), int16] */, %var_12352)
}

def @func_12804() -> (Tensor[(3, 16, 6), float32],) {
  %1365 = @func_3370() /* ty=Tensor[(3, 16, 6), float32] */;
  (%1365,)
}

def @func_12018() -> Tensor[(3, 16, 6), bool] {
  @func_2598() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_6434(%var_6423: Tensor[(12, 8, 9), float32]) -> (Tensor[(12, 8, 9), bool],) {
  %1366 = @func_6221() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(12, 8, 9), float32], Tensor[(12, 8, 9), float32]) */;
  %1367 = %1366.2;
  %1368 = cast(%1367, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
  %1369 = asinh(%1368) /* ty=Tensor[(12, 8, 9), float32] */;
  %1370 = cast(%var_6423, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
  %1371 = shape_of(%1369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1372 = cast(%1369, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
  %1373 = dyn.reshape(%1370, %1371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1374 = logical_and(%1372, %1373) /* ty=Tensor[(12, 8, 9), bool] */;
  (%1374,)
}

def @func_11274(%var_11190: Tensor[(576), float32], %var_11198: Tensor[(12, 8, 9), float32]) -> (Tensor[(64), float32], Tensor[(576), float32], Tensor[(12, 8, 9), int8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(384), uint32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(132), int16], Tensor[(132), float32]) {
  %1375 = cast(%var_11190, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1376 = reshape(%1375, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1377 = @func_5884(%1376) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320, 1), float32]) */;
  %1378 = @func_4490() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %1379 = %1378.1;
  %1380 = cast(%var_11198, dtype="int8") /* ty=Tensor[(12, 8, 9), int8] */;
  %1381 = shape_of(%1379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1382 = cast(%1379, dtype="int8") /* ty=Tensor[(12, 8, 9), int8] */;
  %1383 = dyn.reshape(%1380, %1381, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1384 = cast(meta[relay.Constant][97] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %1385 = cast(meta[relay.Constant][98] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %1386 = reshape(%1384, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1387 = reshape(%1385, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
  %1388 = @func_10338(%1386, %1387) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(288, 2), float32], Tensor[(2, 160), float32], Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */;
  %1389 = %1388.8;
  %1390 = cast(%1389, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %1391 = cast(meta[relay.Constant][99] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %1392 = reshape(%1390, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float32] */;
  %1393 = reshape(%1391, newshape=[132]) /* ty=Tensor[(132), int16] */;
  %1394 = @func_2099(%1392, %1393) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */;
  %1395 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
  %1396 = %1377.3;
  %1397 = bitwise_or(%1382, %1383) /* ty=Tensor[(12, 8, 9), int8] */;
  %1398 = @func_4543() /* ty=Tensor[(3, 16, 6), bool] */;
  %1399 = %1394.2;
  %1400 = %1395.2;
  (%1396, %var_11190, %1397, %1398, %1389, meta[relay.Constant][97] /* ty=Tensor[(384), uint32] */, meta[relay.Constant][98] /* ty=Tensor[(320), float32] */, %1399, meta[relay.Constant][99] /* ty=Tensor[(132), int16] */, %1400)
}

def @func_4596() -> (Tensor[(3, 16, 6), bool],) {
  %1401 = @func_3919() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1401,)
}

def @func_4076() -> Tensor[(3, 16, 6), float32] {
  %1402 = @func_3542() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1402.0
}

def @func_12595() -> (Tensor[(3, 16, 6), bool], Tensor[(11, 4, 3), bool]) {
  %1403 = @func_6963() /* ty=Tensor[(3, 16, 6), bool] */;
  %1404 = @func_10279() /* ty=Tensor[(11, 4, 3), bool] */;
  (%1403, %1404)
}

def @func_2822() -> (Tensor[(3, 16, 6), bool],) {
  %1405 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1405,)
}

def @func_791(%var_778: Tensor[(1, 4, 16), float32], %var_779: Tensor[(5, 4, 16), float32]) -> (Tensor[(5, 4, 16), bool],) {
  %1406 = cast(%var_778, dtype="bool") /* ty=Tensor[(1, 4, 16), bool] */;
  %1407 = cast(%var_779, dtype="bool") /* ty=Tensor[(5, 4, 16), bool] */;
  %1408 = less_equal(%1406, %1407) /* ty=Tensor[(5, 4, 16), bool] */;
  (%1408,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4175(%var_4172: Tensor[(384), uint32], %var_4173: Tensor[(320), float32], %var_4174: Tensor[(8, 20), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int64], Tensor[(384), uint32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(320), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(8, 20), float64], Tensor[(10, 2, 8), float64]) {
  %25 = fn (%var_4141: Tensor[(384), uint32], %var_4143: Tensor[(320), float32], %var_4155: Tensor[(8, 20), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int64], Tensor[(384), uint32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(320), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(8, 20), float64], Tensor[(10, 2, 8), float64]) {
    %0 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
    %1 = cast(%var_4141, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %3 = cast(%var_4143, dtype="float32") /* ty=Tensor[(320), float32] */;
    %4 = reshape(%1, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %5 = reshape(%2, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %6 = reshape(%3, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %7 = @func_2671(%4, %5, %6) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32]) */;
    %8 = cast(%var_4141, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %10 = cast(%var_4143, dtype="float32") /* ty=Tensor[(320), float32] */;
    %11 = cast(%var_4155, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
    %12 = reshape(%8, newshape=[24, 16]) /* ty=Tensor[(24, 16), uint32] */;
    %13 = reshape(%9, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %14 = reshape(%10, newshape=[4, 80]) /* ty=Tensor[(4, 80), float32] */;
    %15 = reshape(%11, newshape=[160]) /* ty=Tensor[(160), float64] */;
    %16 = @func_2377(%12, %13, %14, %15) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int64], Tensor[(9, 16, 4), float32], Tensor[(24, 16), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(4, 80), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), bool]) */;
    %17 = cast(%var_4155, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
    %18 = reshape(%17, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
    %19 = @func_1901(%18) /* ty=(Tensor[(10, 2, 8), float64],) */;
    %20 = @func_3905() /* ty=Tensor[(3, 16, 6), bool] */;
    %21 = %0.5;
    %22 = %7.2;
    %23 = %16.5;
    %24 = %19.0;
    (%20, %21, %22, %var_4141, meta[relay.Constant][0] /* ty=Tensor[(576), float32] */, %var_4143, %23, meta[relay.Constant][1] /* ty=Tensor[(64), float32] */, %var_4155, %24)
  };
  %25(%var_4172, %var_4173, %var_4174) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int64], Tensor[(384), uint32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(320), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(8, 20), float64], Tensor[(10, 2, 8), float64]) */
}

def @func_7612() -> Tensor[(3, 16, 6), float32] {
  @func_7610() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_9317() -> (Tensor[(3, 16, 6), bool],) {
  @func_9315() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_5017() -> (Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) {
  %42 = fn () -> (Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) {
    %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %28 = reshape(%26, newshape=[1, 4, 16]) /* ty=Tensor[(1, 4, 16), float32] */;
    %29 = reshape(%27, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), float32] */;
    %30 = @func_791(%28, %29) /* ty=(Tensor[(5, 4, 16), bool],) */;
    %31 = @func_4240() /* ty=Tensor[(3, 16, 6), float32] */;
    %32 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %33 = %32.0;
    %34 = cast(%33, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
    %35 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
    %36 = cast(%31, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
    %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %38 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %39 = %30.0;
    %40 = mod(%36, %37) /* ty=Tensor[(3, 16, 6), float64] */;
    %41 = %38.0;
    (%39, meta[relay.Constant][2] /* ty=Tensor[(64), float32] */, meta[relay.Constant][3] /* ty=Tensor[(320), float32] */, %40, %41)
  };
  %42() /* ty=(Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */
}

def @func_6552(%var_6514: Tensor[(11, 9, 14), int32], %var_6515: Tensor[(11, 9, 14), int32]) -> (Tensor[(11, 9, 14), int32],) {
  %43 = cast(%var_6515, dtype="int32") /* ty=Tensor[(11, 9, 14), int32] */;
  %44 = shape_of(%var_6514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_6514, dtype="int32") /* ty=Tensor[(11, 9, 14), int32] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %47 = multiply(%45, %46) /* ty=Tensor[(11, 9, 14), int32] */;
  (%47,)
}

def @func_5099() -> (Tensor[(320), float32],) {
  %50 = fn () -> (Tensor[(320), float32],) {
    %48 = @func_5016() /* ty=(Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
    %49 = %48.2;
    (%49,)
  };
  %50() /* ty=(Tensor[(320), float32],) */
}

def @func_3146() -> Tensor[(3, 16, 6), bool] {
  @func_3144() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_13427() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) {
  %51 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %52 = @func_8185() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(6, 11, 5), int16]) */;
  %53 = %51.0;
  %54 = %52.0;
  (%53, %54)
}

def @func_6455() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  %55 = @func_3198() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %56 = %55.2;
  %57 = cast(%56, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %58 = @func_4196() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %59 = log(%57) /* ty=Tensor[(3, 16, 6), float32] */;
  %60 = %58.0;
  (%59, %60)
}

def @func_6759() -> (Tensor[(3, 16, 6), float32],) {
  @func_6757() /* ty=(Tensor[(3, 16, 6), float32],) */
}

def @func_6186() -> Tensor[(3, 16, 6), float32] {
  %62 = fn () -> Tensor[(3, 16, 6), float32] {
    %61 = @func_4920() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
    %61.1
  };
  %62() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_13625() -> (Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), int64], Tensor[(392), float64], Tensor[(3, 16, 6), bool]) {
  %70 = fn () -> (Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), int64], Tensor[(392), float64], Tensor[(3, 16, 6), bool]) {
    %63 = @func_6774() /* ty=(Tensor[(10, 2, 13), bool],) */;
    %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(392), float64] */, dtype="float64") /* ty=Tensor[(392), float64] */;
    %65 = reshape(%64, newshape=[392]) /* ty=Tensor[(392), float64] */;
    %66 = @func_12270(%65) /* ty=(Tensor[(3, 16, 6), int64], Tensor[(6, 11, 5), int16], Tensor[(392), float64]) */;
    %67 = %63.0;
    %68 = %66.0;
    %69 = @func_11658() /* ty=Tensor[(3, 16, 6), bool] */;
    (%67, %68, meta[relay.Constant][4] /* ty=Tensor[(392), float64] */, %69)
  };
  %70() /* ty=(Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), int64], Tensor[(392), float64], Tensor[(3, 16, 6), bool]) */
}

def @func_10338(%var_10301: Tensor[(384), uint32], %var_10303: Tensor[(2, 160), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(288, 2), float32], Tensor[(2, 160), float32], Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) {
  %71 = cast(%var_10301, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %72 = cast(meta[relay.Constant][5] /* ty=Tensor[(288, 2), float32] */, dtype="float32") /* ty=Tensor[(288, 2), float32] */;
  %73 = cast(%var_10303, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %74 = reshape(%71, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %75 = reshape(%72, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %76 = reshape(%73, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %77 = @func_2671(%74, %75, %76) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32]) */;
  %78 = cast(%var_10303, dtype="float64") /* ty=Tensor[(2, 160), float64] */;
  %79 = cosh(%78) /* ty=Tensor[(2, 160), float64] */;
  %80 = cast(%var_10303, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(2), int32] */;
  %82 = cast(%79, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %84 = @func_7898() /* ty=(Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) */;
  %85 = @func_6774() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %86 = @func_8281() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %87 = @func_7720() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %88 = @func_3919() /* ty=Tensor[(3, 16, 6), bool] */;
  %89 = %77.4;
  %90 = floor_mod(%82, %83) /* ty=Tensor[(2, 160), float32] */;
  %91 = %84.0;
  %92 = %85.0;
  %93 = %86.0;
  %94 = %87.0;
  (%88, %89, %var_10301, meta[relay.Constant][5] /* ty=Tensor[(288, 2), float32] */, %90, %91, %92, %93, %94)
}

def @func_2261(%var_2226: Tensor[(3, 16, 6), float64]) -> (Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) {
  %95 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %97 = sin(%96) /* ty=Tensor[(3, 16, 6), float64] */;
  %98 = cast(%var_2226, dtype="uint32") /* ty=Tensor[(3, 16, 6), uint32] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="uint32") /* ty=Tensor[(3, 16, 6), uint32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %102 = cast(%var_2226, dtype="int64") /* ty=Tensor[(3, 16, 6), int64] */;
  %103 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%97, dtype="int64") /* ty=Tensor[(3, 16, 6), int64] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %106 = bitwise_xor(%100, %101) /* ty=Tensor[(3, 16, 6), uint32] */;
  %107 = minimum(%104, %105) /* ty=Tensor[(3, 16, 6), int64] */;
  (%106, %107)
}

def @func_8055() -> (Tensor[(3, 16, 6), bool],) {
  @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_7487() -> (Tensor[(320), float32],) {
  %110 = fn () -> (Tensor[(320), float32],) {
    %108 = @func_6474() /* ty=(Tensor[(320), float32],) */;
    %109 = %108.0;
    (%109,)
  };
  %110() /* ty=(Tensor[(320), float32],) */
}

def @func_8818() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) {
  %113 = fn () -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) {
    %111 = @func_4217() /* ty=Tensor[(3, 16, 6), float32] */;
    %112 = @func_4536() /* ty=Tensor[(3, 16, 6), float32] */;
    (%111, %112)
  };
  %113() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */
}

def @func_3919() -> Tensor[(3, 16, 6), bool] {
  %114 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %114.0
}

def @func_6475() -> (Tensor[(320), float32],) {
  %117 = fn () -> (Tensor[(320), float32],) {
    %115 = @func_5098() /* ty=(Tensor[(320), float32],) */;
    %116 = %115.0;
    (%116,)
  };
  %117() /* ty=(Tensor[(320), float32],) */
}

def @func_7653() -> (Tensor[(320), float32],) {
  @func_7651() /* ty=(Tensor[(320), float32],) */
}

def @func_12019() -> Tensor[(3, 16, 6), bool] {
  %118 = fn () -> Tensor[(3, 16, 6), bool] {
    @func_2598() /* ty=Tensor[(3, 16, 6), bool] */
  };
  %118() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_3199() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) {
  %129 = fn () -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) {
    %119 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
    %120 = @func_3144() /* ty=Tensor[(3, 16, 6), bool] */;
    %121 = cast(%120, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
    %122 = cast(%120, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
    %123 = reshape(%122, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
    %124 = @func_2912(%123) /* ty=(Tensor[(3, 16, 6), float64],) */;
    %125 = %119.1;
    %126 = exp(%121) /* ty=Tensor[(3, 16, 6), float32] */;
    %127 = %124.0;
    %128 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
    (%125, %126, %127, %128)
  };
  %129() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */
}

def @func_9315() -> (Tensor[(3, 16, 6), bool],) {
  %130 = @func_9306() /* ty=Tensor[(3, 16, 6), bool] */;
  (%130,)
}

def @func_9686() -> Tensor[(3, 16, 6), bool] {
  @func_9684() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_2824() -> (Tensor[(3, 16, 6), bool],) {
  @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_4405(%var_4402: Tensor[(2, 288), float32]) -> (Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), float64], Tensor[(384), uint32], Tensor[(2, 288), float32], Tensor[(40, 8), float32]) {
  %131 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %133 = cast(%var_4402, dtype="float32") /* ty=Tensor[(2, 288), float32] */;
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(40, 8), float32] */, dtype="float32") /* ty=Tensor[(40, 8), float32] */;
  %135 = reshape(%132, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %136 = reshape(%133, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %137 = reshape(%134, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %138 = @func_2671(%135, %136, %137) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32]) */;
  %139 = %131.0;
  %140 = %138.0;
  (%139, %140, meta[relay.Constant][6] /* ty=Tensor[(384), uint32] */, %var_4402, meta[relay.Constant][7] /* ty=Tensor[(40, 8), float32] */)
}

def @func_9668(%var_9666: Tensor[(64), float32], %var_9667: Tensor[(160), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(160), float64], Tensor[(3, 16, 6), float32], Tensor[(24, 16), uint8]) {
  %161 = fn (%var_9618: Tensor[(64), float32], %var_9620: Tensor[(160), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(160), float64], Tensor[(3, 16, 6), float32], Tensor[(24, 16), uint8]) {
    %141 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %142 = @func_5967() /* ty=(Tensor[(3, 16, 6), float32],) */;
    %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %144 = cast(%var_9618, dtype="float32") /* ty=Tensor[(64), float32] */;
    %145 = cast(meta[relay.Constant][8] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %146 = cast(%var_9620, dtype="float64") /* ty=Tensor[(160), float64] */;
    %147 = reshape(%143, newshape=[24, 16]) /* ty=Tensor[(24, 16), uint32] */;
    %148 = reshape(%144, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %149 = reshape(%145, newshape=[4, 80]) /* ty=Tensor[(4, 80), float32] */;
    %150 = reshape(%146, newshape=[160]) /* ty=Tensor[(160), float64] */;
    %151 = @func_2377(%147, %148, %149, %150) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int64], Tensor[(9, 16, 4), float32], Tensor[(24, 16), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(4, 80), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), bool]) */;
    %152 = %151.3;
    %153 = cast(meta[relay.Constant][9] /* ty=Tensor[(384), uint32] */, dtype="uint8") /* ty=Tensor[(384), uint8] */;
    %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(2), int32] */;
    %155 = cast(%152, dtype="uint8") /* ty=Tensor[(24, 16), uint8] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %157 = %141.0;
    %158 = @func_7610() /* ty=Tensor[(3, 16, 6), float32] */;
    %159 = %142.0;
    %160 = left_shift(%155, %156) /* ty=Tensor[(24, 16), uint8] */;
    (%157, %158, %var_9618, meta[relay.Constant][8] /* ty=Tensor[(320), float32] */, %var_9620, %159, %160)
  };
  %161(%var_9666, %var_9667) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(160), float64], Tensor[(3, 16, 6), float32], Tensor[(24, 16), uint8]) */
}

def @func_5618(%var_5616: Tensor[(576), float32], %var_5617: Tensor[(320), float32]) -> (Tensor[(3, 16, 6), int32], Tensor[(3, 16, 6), bool], Tensor[(48, 8), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  @func_5614(%var_5616, %var_5617) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(3, 16, 6), bool], Tensor[(48, 8), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */
}

def @func_4490() -> (Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) {
  %162 = @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */;
  %163 = @func_4076() /* ty=Tensor[(3, 16, 6), float32] */;
  %164 = %162.0;
  (%163, %164)
}

def @func_4219() -> Tensor[(3, 16, 6), float32] {
  @func_4217() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_4019(%var_4016: Tensor[(576), float32], %var_4017: Tensor[(24, 1), uint32], %var_4018: Tensor[(320), bool]) -> (Tensor[(3, 16, 6), float32], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24, 1), uint32], Tensor[(384), uint32], Tensor[(320), bool]) {
  %177 = fn (%var_3996: Tensor[(576), float32], %var_3997: Tensor[(24, 1), uint32], %var_3999: Tensor[(320), bool]) -> (Tensor[(3, 16, 6), float32], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24, 1), uint32], Tensor[(384), uint32], Tensor[(320), bool]) {
    %165 = @func_3725() /* ty=(Tensor[(3, 16, 6), float32],) */;
    %166 = cast(%var_3996, dtype="float32") /* ty=Tensor[(576), float32] */;
    %167 = cast(%var_3997, dtype="uint32") /* ty=Tensor[(24, 1), uint32] */;
    %168 = cast(meta[relay.Constant][10] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %169 = cast(%var_3999, dtype="bool") /* ty=Tensor[(320), bool] */;
    %170 = reshape(%166, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %171 = reshape(%167, newshape=[24]) /* ty=Tensor[(24), uint32] */;
    %172 = reshape(%168, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %173 = reshape(%169, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), bool] */;
    %174 = @func_2041(%170, %171, %172, %173) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) */;
    %175 = %165.0;
    %176 = %174.6;
    (%175, %176, %var_3996, %var_3997, meta[relay.Constant][10] /* ty=Tensor[(384), uint32] */, %var_3999)
  };
  %177(%var_4016, %var_4017, %var_4018) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24, 1), uint32], Tensor[(384), uint32], Tensor[(320), bool]) */
}

def @func_12560() -> (Tensor[(9, 3, 13), float64], Tensor[(3, 16, 6), bool]) {
  @func_12558() /* ty=(Tensor[(9, 3, 13), float64], Tensor[(3, 16, 6), bool]) */
}

def @func_13151() -> (Tensor[(3, 16, 6), bool],) {
  @func_13149() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_13507() -> (Tensor[(1, 24), uint32],) {
  %178 = @func_7279() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(1, 24), uint32], Tensor[(?, 546), int16]) */;
  %179 = %178.1;
  (%179,)
}

def @func_2525() -> Tensor[(3, 16, 6), bool] {
  %180 = fn () -> Tensor[(3, 16, 6), bool] {
    @func_1537() /* ty=Tensor[(3, 16, 6), bool] */
  };
  %180() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_12786() -> Tensor[(3, 16, 6), float32] {
  @func_4217() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_9192(%var_9191: Tensor[(36, 16), float32]) -> (Tensor[(4, 16, ?), int8], Tensor[(3, 16, 6), int64], Tensor[(495, 3), float32], Tensor[(64), float32], Tensor[(3, 16, 6), bool], Tensor[(4, 16, 315), int8], Tensor[(4, 16, ?), bool], Tensor[(3, 16, 6), float64], Tensor[(36, 16), float32]) {
  %218 = fn (%var_9185: Tensor[(36, 16), float32]) -> (Tensor[(4, 16, ?), int8], Tensor[(3, 16, 6), int64], Tensor[(495, 3), float32], Tensor[(64), float32], Tensor[(3, 16, 6), bool], Tensor[(4, 16, 315), int8], Tensor[(4, 16, ?), bool], Tensor[(3, 16, 6), float64], Tensor[(36, 16), float32]) {
    %181 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 16, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 16, 1), float32] */;
    %182 = sin(%181) /* ty=Tensor[(4, 16, 1), float32] */;
    %183 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 16, 1), float32] */, dtype="int8") /* ty=Tensor[(4, 16, 1), int8] */;
    %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
    %185 = cast(%182, dtype="int8") /* ty=Tensor[(4, 16, 1), int8] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %187 = @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */;
    %188 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 315), float64] */, dtype="float64") /* ty=Tensor[(1, 315), float64] */;
    %189 = reshape(%188, newshape=[5, 7, 9]) /* ty=Tensor[(5, 7, 9), float64] */;
    %190 = @func_7983(%189) /* ty=(Tensor[(5, 7, 9), float64], Tensor[(11, 9, 15), float32], Tensor[(495, 3), float32]) */;
    %191 = @func_5353() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
    %192 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 16, 1), float32] */, dtype="bool") /* ty=Tensor[(4, 16, 1), bool] */;
    %193 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
    %194 = cast(%182, dtype="bool") /* ty=Tensor[(4, 16, 1), bool] */;
    %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %196 = not_equal(%194, %195) /* ty=Tensor[(4, 16, ?), bool] */;
    %197 = cast(%196, dtype="float64") /* ty=Tensor[(4, 16, ?), float64] */;
    %198 = erf(%197) /* ty=Tensor[(4, 16, ?), float64] */;
    %199 = cast(%198, dtype="float32") /* ty=Tensor[(4, 16, ?), float32] */;
    %200 = log10(%199) /* ty=Tensor[(4, 16, ?), float32] */;
    %201 = cast(%200, dtype="int8") /* ty=Tensor[(4, 16, ?), int8] */;
    %202 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 315), float64] */, dtype="int8") /* ty=Tensor[(1, 315), int8] */;
    %203 = cast(%200, dtype="bool") /* ty=Tensor[(4, 16, ?), bool] */;
    %204 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
    %205 = cast(%196, dtype="bool") /* ty=Tensor[(4, 16, ?), bool] */;
    %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %207 = cast(%var_9185, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
    %208 = reshape(%207, newshape=[2, 288]) /* ty=Tensor[(2, 288), float32] */;
    %209 = @func_4405(%208) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), float64], Tensor[(384), uint32], Tensor[(2, 288), float32], Tensor[(40, 8), float32]) */;
    %210 = minimum(%185, %186) /* ty=Tensor[(4, 16, ?), int8] */;
    %211 = %187.0;
    %212 = %190.2;
    %213 = %191.1;
    %214 = @func_2598() /* ty=Tensor[(3, 16, 6), bool] */;
    %215 = subtract(%201, %202) /* ty=Tensor[(4, 16, 315), int8] */;
    %216 = less_equal(%205, %206) /* ty=Tensor[(4, 16, ?), bool] */;
    %217 = %209.0;
    (%210, %211, %212, %213, %214, %215, %216, %217, %var_9185)
  };
  %218(%var_9191) /* ty=(Tensor[(4, 16, ?), int8], Tensor[(3, 16, 6), int64], Tensor[(495, 3), float32], Tensor[(64), float32], Tensor[(3, 16, 6), bool], Tensor[(4, 16, 315), int8], Tensor[(4, 16, ?), bool], Tensor[(3, 16, 6), float64], Tensor[(36, 16), float32]) */
}

def @func_5309(%var_5307: Tensor[(2112), float32]) -> (Tensor[(11, 16, 12), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(10, 2, 13), bool]) {
  @func_5306(%var_5307) /* ty=(Tensor[(11, 16, 12), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(10, 2, 13), bool]) */
}

def @func_2041(%var_1983: Tensor[(576), float32], %var_1984: Tensor[(24), uint32], %var_1985: Tensor[(384), uint32], %var_2017: Tensor[(5, 4, 16), bool]) -> (Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) {
  %219 = cast(%var_1983, dtype="float32") /* ty=Tensor[(576), float32] */;
  %220 = cast(%var_1984, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %221 = cast(%var_1985, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %222 = cast(meta[relay.Constant][13] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %223 = cast(meta[relay.Constant][14] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %224 = cast(%var_1985, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %225 = reshape(%219, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
  %226 = reshape(%220, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %227 = reshape(%221, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %228 = reshape(%222, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %229 = reshape(%223, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %230 = reshape(%224, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %231 = @func_1076(%225, %226, %227, %228, %229, %230) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
  %232 = %231.4;
  %233 = cast(%var_2017, dtype="int8") /* ty=Tensor[(5, 4, 16), int8] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="int8") /* ty=Tensor[(5, 4, 16), int8] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %237 = add(%235, %236) /* ty=Tensor[(5, 4, 16), int8] */;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
  %239 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %240 = asin(%238) /* ty=Tensor[(5, 4, 16), float64] */;
  (%239, %var_1983, %var_1984, %var_1985, meta[relay.Constant][13] /* ty=Tensor[(64), float32] */, meta[relay.Constant][14] /* ty=Tensor[(320), float32] */, %240)
}

def @func_9517() -> (Tensor[(3, 16, 6), float32], Tensor[(?, 546), int16]) {
  %241 = @func_3542() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %242 = @func_7279() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(1, 24), uint32], Tensor[(?, 546), int16]) */;
  %243 = %241.0;
  %244 = %242.2;
  (%243, %244)
}

def @func_11094() -> Tensor[(10, 2, 13), bool] {
  %245 = @func_6774() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %245.0
}

def @func_11722() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float64]) {
  %252 = fn () -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float64]) {
    %246 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %247 = @func_9315() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %248 = %247.0;
    %249 = cast(%248, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
    %250 = %246.0;
    %251 = log2(%249) /* ty=Tensor[(3, 16, 6), float64] */;
    (%250, %251)
  };
  %252() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float64]) */
}

def @func_5975() -> Tensor[(3, 16, 6), bool] {
  %253 = @func_3542() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %253.1
}

def @func_2691() -> (Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) {
  @func_2689() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) */
}

def @func_12940() -> (Tensor[(3, 16, 6), int64], Tensor[(3, 16, 6), int64]) {
  %254 = @func_12227() /* ty=(Tensor[(64), float32], Tensor[(3, 16, 6), int64]) */;
  %255 = %254.1;
  %256 = @func_7463() /* ty=Tensor[(3, 16, 6), int64] */;
  (%255, %256)
}

def @func_5454() -> Tensor[(10, 2, 13), bool] {
  @func_5452() /* ty=Tensor[(10, 2, 13), bool] */
}

def @func_4537() -> Tensor[(3, 16, 6), float32] {
  %257 = fn () -> Tensor[(3, 16, 6), float32] {
    @func_3370() /* ty=Tensor[(3, 16, 6), float32] */
  };
  %257() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_7585() -> (Tensor[(10, 2, 13), bool],) {
  %260 = fn () -> (Tensor[(10, 2, 13), bool],) {
    %258 = @func_2689() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) */;
    %259 = %258.1;
    (%259,)
  };
  %260() /* ty=(Tensor[(10, 2, 13), bool],) */
}

def @func_12805() -> (Tensor[(3, 16, 6), float32],) {
  %262 = fn () -> (Tensor[(3, 16, 6), float32],) {
    %261 = @func_3370() /* ty=Tensor[(3, 16, 6), float32] */;
    (%261,)
  };
  %262() /* ty=(Tensor[(3, 16, 6), float32],) */
}

def @func_4408(%var_4406: Tensor[(2, 288), float32]) -> (Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), float64], Tensor[(384), uint32], Tensor[(2, 288), float32], Tensor[(40, 8), float32]) {
  @func_4405(%var_4406) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), float64], Tensor[(384), uint32], Tensor[(2, 288), float32], Tensor[(40, 8), float32]) */
}

def @func_13233() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) {
  %266 = fn () -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) {
    %263 = @func_9788() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %264 = %263.0;
    %265 = @func_4076() /* ty=Tensor[(3, 16, 6), float32] */;
    (%264, %265)
  };
  %266() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) */
}

def @func_12389() -> (Tensor[(10, 2, 13), bool],) {
  %269 = fn () -> (Tensor[(10, 2, 13), bool],) {
    %267 = @func_2689() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) */;
    %268 = %267.1;
    (%268,)
  };
  %269() /* ty=(Tensor[(10, 2, 13), bool],) */
}

def @func_4207() -> (Tensor[(12, 8, 9), float32],) {
  %270 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 8, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
  %271 = log(%270) /* ty=Tensor[(12, 8, 9), float32] */;
  (%271,)
}

def @func_1537() -> Tensor[(3, 16, 6), bool] {
  %272 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %272.1
}

def @func_2047(%var_2043: Tensor[(576), float32], %var_2044: Tensor[(24), uint32], %var_2045: Tensor[(384), uint32], %var_2046: Tensor[(5, 4, 16), bool]) -> (Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) {
  @func_2041(%var_2043, %var_2044, %var_2045, %var_2046) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) */
}

def @func_12146() -> (Tensor[(3, 16, 6), float64], Tensor[(12, 8, 9), float32]) {
  %277 = fn () -> (Tensor[(3, 16, 6), float64], Tensor[(12, 8, 9), float32]) {
    %273 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
    %274 = @func_6221() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(12, 8, 9), float32], Tensor[(12, 8, 9), float32]) */;
    %275 = %273.0;
    %276 = %274.2;
    (%275, %276)
  };
  %277() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(12, 8, 9), float32]) */
}

def @func_7443(%var_7442: Tensor[(4, 72), bool]) -> (Tensor[(11, 4, 3), float64], Tensor[(3, 16, 6), float32], Tensor[(4, 72), bool]) {
  %286 = fn (%var_7435: Tensor[(4, 72), bool]) -> (Tensor[(11, 4, 3), float64], Tensor[(3, 16, 6), float32], Tensor[(4, 72), bool]) {
    %278 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
    %279 = %278.1;
    %280 = cast(%279, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
    %281 = cast(%var_7435, dtype="bool") /* ty=Tensor[(4, 72), bool] */;
    %282 = reshape(%281, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
    %283 = @func_3802(%282) /* ty=(Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */;
    %284 = log(%280) /* ty=Tensor[(11, 4, 3), float64] */;
    %285 = %283.2;
    (%284, %285, %var_7435)
  };
  %286(%var_7442) /* ty=(Tensor[(11, 4, 3), float64], Tensor[(3, 16, 6), float32], Tensor[(4, 72), bool]) */
}

def @func_10861(%var_10859: Tensor[(5, 14, 16), int16], %var_10860: Tensor[(576), float32]) -> (Tensor[(5, 14, 16), bool], Tensor[(5, 10, 8), float32], Tensor[(1, 400), float32], Tensor[(24), uint32], Tensor[(1, 2112), float32], Tensor[(576), float32], Tensor[(64), float32]) {
  %304 = fn (%var_10844: Tensor[(5, 14, 16), int16], %var_10853: Tensor[(576), float32]) -> (Tensor[(5, 14, 16), bool], Tensor[(5, 10, 8), float32], Tensor[(1, 400), float32], Tensor[(24), uint32], Tensor[(1, 2112), float32], Tensor[(576), float32], Tensor[(64), float32]) {
    %287 = cast(%var_10844, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
    %288 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(5, 14, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %289 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 14, 16), int16] */, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
    %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %291 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 400), float32] */, dtype="float32") /* ty=Tensor[(1, 400), float32] */;
    %292 = reshape(%291, newshape=[5, 10, 8]) /* ty=Tensor[(5, 10, 8), float32] */;
    %293 = @func_5701(%292) /* ty=(Tensor[(5, 10, 8), float32],) */;
    %294 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 2112), float32] */, dtype="float32") /* ty=Tensor[(1, 2112), float32] */;
    %295 = cast(%var_10853, dtype="float32") /* ty=Tensor[(576), float32] */;
    %296 = cast(meta[relay.Constant][19] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %297 = reshape(%294, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float32] */;
    %298 = reshape(%295, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %299 = reshape(%296, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %300 = @func_2501(%297, %298, %299) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) */;
    %301 = less(%289, %290) /* ty=Tensor[(5, 14, 16), bool] */;
    %302 = %293.0;
    %303 = %300.4;
    (%301, %302, meta[relay.Constant][17] /* ty=Tensor[(1, 400), float32] */, %303, meta[relay.Constant][18] /* ty=Tensor[(1, 2112), float32] */, %var_10853, meta[relay.Constant][19] /* ty=Tensor[(64), float32] */)
  };
  %304(%var_10859, %var_10860) /* ty=(Tensor[(5, 14, 16), bool], Tensor[(5, 10, 8), float32], Tensor[(1, 400), float32], Tensor[(24), uint32], Tensor[(1, 2112), float32], Tensor[(576), float32], Tensor[(64), float32]) */
}

def @func_13480() -> (Tensor[(12, 8, 9), float32], Tensor[(3, 16, 6), float32]) {
  @func_13478() /* ty=(Tensor[(12, 8, 9), float32], Tensor[(3, 16, 6), float32]) */
}

def @func_12270(%var_12268: Tensor[(392), float64]) -> (Tensor[(3, 16, 6), int64], Tensor[(6, 11, 5), int16], Tensor[(392), float64]) {
  %305 = cast(%var_12268, dtype="float64") /* ty=Tensor[(392), float64] */;
  %306 = reshape(%305, newshape=[196, 2]) /* ty=Tensor[(196, 2), float64] */;
  %307 = @func_11788(%306) /* ty=(Tensor[(6, 11, 5), int16], Tensor[(320), float32], Tensor[(4, 7, 14), float32], Tensor[(196, 2), float64]) */;
  %308 = @func_7463() /* ty=Tensor[(3, 16, 6), int64] */;
  %309 = %307.0;
  (%308, %309, %var_12268)
}

def @func_9920() -> (Tensor[(10, 2, 13), bool],) {
  @func_9918() /* ty=(Tensor[(10, 2, 13), bool],) */
}

def @func_10169() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  %310 = @func_8281() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %311 = @func_5920() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %312 = %310.0;
  %313 = %311.0;
  (%312, %313)
}

def @func_5977() -> Tensor[(3, 16, 6), bool] {
  @func_5975() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_12273(%var_12271: Tensor[(392), float64]) -> (Tensor[(3, 16, 6), int64], Tensor[(6, 11, 5), int16], Tensor[(392), float64]) {
  @func_12270(%var_12271) /* ty=(Tensor[(3, 16, 6), int64], Tensor[(6, 11, 5), int16], Tensor[(392), float64]) */
}

def @func_1524() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */
}

def @func_9760() -> (Tensor[(320), float32], Tensor[(64), float32]) {
  %314 = @func_6474() /* ty=(Tensor[(320), float32],) */;
  %315 = %314.0;
  %316 = @func_8666() /* ty=Tensor[(64), float32] */;
  (%315, %316)
}

def @func_7983(%var_7975: Tensor[(5, 7, 9), float64]) -> (Tensor[(5, 7, 9), float64], Tensor[(11, 9, 15), float32], Tensor[(495, 3), float32]) {
  %317 = cast(9.08845f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %318 = cast(%var_7975, dtype="float64") /* ty=Tensor[(5, 7, 9), float64] */;
  %319 = cast(meta[relay.Constant][20] /* ty=Tensor[(495, 3), float32] */, dtype="float32") /* ty=Tensor[(495, 3), float32] */;
  %320 = reshape(%319, newshape=[1485]) /* ty=Tensor[(1485), float32] */;
  %321 = @func_6133(%320) /* ty=(Tensor[(132), int16], Tensor[(11, 9, 15), float32], Tensor[(1485), float32]) */;
  %322 = floor_mod(%317, %318) /* ty=Tensor[(5, 7, 9), float64] */;
  %323 = %321.1;
  (%322, %323, meta[relay.Constant][20] /* ty=Tensor[(495, 3), float32] */)
}

def @func_6775() -> (Tensor[(10, 2, 13), bool],) {
  %325 = fn () -> (Tensor[(10, 2, 13), bool],) {
    %324 = @func_5452() /* ty=Tensor[(10, 2, 13), bool] */;
    (%324,)
  };
  %325() /* ty=(Tensor[(10, 2, 13), bool],) */
}

def @func_9383() -> Tensor[(3, 16, 6), float32] {
  %327 = fn () -> Tensor[(3, 16, 6), float32] {
    %326 = @func_3725() /* ty=(Tensor[(3, 16, 6), float32],) */;
    %326.0
  };
  %327() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_6964() -> Tensor[(3, 16, 6), bool] {
  %328 = fn () -> Tensor[(3, 16, 6), bool] {
    @func_3919() /* ty=Tensor[(3, 16, 6), bool] */
  };
  %328() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_7464() -> Tensor[(3, 16, 6), int64] {
  %330 = fn () -> Tensor[(3, 16, 6), int64] {
    %329 = @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */;
    %329.0
  };
  %330() /* ty=Tensor[(3, 16, 6), int64] */
}

def @func_2599() -> Tensor[(3, 16, 6), bool] {
  %332 = fn () -> Tensor[(3, 16, 6), bool] {
    %331 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %331.0
  };
  %332() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_3895(%var_3893: Tensor[(3, 16, 6), bool], %var_3894: Tensor[(1485), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(1485), float32]) {
  %343 = fn (%var_3870: Tensor[(3, 16, 6), bool], %var_3887: Tensor[(1485), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(1485), float32]) {
    %333 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
    %334 = cast(%var_3870, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
    %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
    %336 = cast(%333, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %338 = cast(%var_3887, dtype="float32") /* ty=Tensor[(1485), float32] */;
    %339 = reshape(%338, newshape=[11, 9, 15]) /* ty=Tensor[(11, 9, 15), float32] */;
    %340 = @func_3839(%339) /* ty=(Tensor[(11, 9, 15), float32], Tensor[(3, 16, 6), bool]) */;
    %341 = multiply(%336, %337) /* ty=Tensor[(3, 16, 6), float32] */;
    %342 = %340.1;
    (%341, %342, %var_3887)
  };
  %343(%var_3893, %var_3894) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(1485), float32]) */
}

def @func_3507() -> (Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) {
  %344 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 24), uint32] */, dtype="uint32") /* ty=Tensor[(1, 24), uint32] */;
  %345 = cast(meta[relay.Constant][22] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %346 = reshape(%344, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
  %347 = reshape(%345, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %348 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %350 = reshape(%349, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float64] */;
  %351 = @func_2261(%350) /* ty=(Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) */;
  %352 = cast(%348, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %353 = reshape(%352, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float64] */;
  %354 = @func_2261(%353) /* ty=(Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) */;
  %355 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 160), float64] */, dtype="float64") /* ty=Tensor[(1, 160), float64] */;
  %356 = reshape(%355, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %357 = @func_1901(%356) /* ty=(Tensor[(10, 2, 8), float64],) */;
  %358 = @func_327(%346, %347) /* ty=Tensor[(8, 16, 3), uint32] */;
  %359 = %351.0;
  %360 = %354.1;
  %361 = %357.0;
  (%348, %358, meta[relay.Constant][21] /* ty=Tensor[(1, 24), uint32] */, meta[relay.Constant][22] /* ty=Tensor[(384), uint32] */, %359, %360, %361, meta[relay.Constant][23] /* ty=Tensor[(1, 160), float64] */)
}

def @func_8884() -> (Tensor[(3, 16, 6), bool],) {
  @func_8882() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_8053() -> (Tensor[(3, 16, 6), bool],) {
  %362 = @func_4596() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %363 = %362.0;
  (%363,)
}

def @func_11919() -> (Tensor[(11, 4, 3), bool],) {
  @func_11917() /* ty=(Tensor[(11, 4, 3), bool],) */
}

def @func_1083(%var_1077: Tensor[(9, 16, 4), float32], %var_1078: Tensor[(24), uint32], %var_1079: Tensor[(384), uint32], %var_1080: Tensor[(64), float32], %var_1081: Tensor[(320), float32], %var_1082: Tensor[(8, 16, 3), uint32]) -> (Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) {
  %392 = fn (%var_1028: Tensor[(9, 16, 4), float32], %var_1037: Tensor[(24), uint32], %var_1038: Tensor[(384), uint32], %var_1046: Tensor[(64), float32], %var_1047: Tensor[(320), float32], %var_1063: Tensor[(8, 16, 3), uint32]) -> (Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) {
    %364 = cast(%var_1028, dtype="float32") /* ty=Tensor[(9, 16, 4), float32] */;
    %365 = cast(%var_1037, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %366 = cast(%var_1038, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %367 = reshape(%365, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
    %368 = reshape(%366, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %369 = cast(%var_1046, dtype="float32") /* ty=Tensor[(64), float32] */;
    %370 = cast(%var_1047, dtype="float32") /* ty=Tensor[(320), float32] */;
    %371 = reshape(%369, newshape=[1, 4, 16]) /* ty=Tensor[(1, 4, 16), float32] */;
    %372 = reshape(%370, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), float32] */;
    %373 = @func_791(%371, %372) /* ty=(Tensor[(5, 4, 16), bool],) */;
    %374 = cast(%var_1037, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %375 = cast(%var_1037, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %376 = cast(%var_1038, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %377 = reshape(%375, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
    %378 = reshape(%376, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %379 = @func_327(%377, %378) /* ty=Tensor[(8, 16, 3), uint32] */;
    %380 = cast(%379, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
    %381 = reshape(%374, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
    %382 = reshape(%380, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %383 = cast(%var_1063, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
    %384 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%379, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %387 = asin(%364) /* ty=Tensor[(9, 16, 4), float32] */;
    %388 = @func_327(%367, %368) /* ty=Tensor[(8, 16, 3), uint32] */;
    %389 = %373.0;
    %390 = @func_327(%381, %382) /* ty=Tensor[(8, 16, 3), uint32] */;
    %391 = less(%385, %386) /* ty=Tensor[(8, 16, 3), bool] */;
    (%387, %var_1037, %var_1038, %388, %389, %var_1046, %var_1047, %390, %391)
  };
  %392(%var_1077, %var_1078, %var_1079, %var_1080, %var_1081, %var_1082) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */
}

def @func_2536() -> (Tensor[(3, 16, 6), bool],) {
  %393 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  (%393,)
}

def @func_5306(%var_5245: Tensor[(2112), float32]) -> (Tensor[(11, 16, 12), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(10, 2, 13), bool]) {
  %394 = cast(%var_5245, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %395 = cast(meta[relay.Constant][24] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %396 = cast(meta[relay.Constant][25] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %397 = reshape(%394, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float32] */;
  %398 = reshape(%395, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %399 = reshape(%396, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %400 = @func_2501(%397, %398, %399) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) */;
  %401 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %402 = %401.0;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %404 = asin(%403) /* ty=Tensor[(10, 2, 13), float32] */;
  %405 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 2, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 2, 13), bool] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="bool") /* ty=Tensor[(10, 2, 13), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = %400.9;
  %410 = less(%407, %408) /* ty=Tensor[(10, 2, 13), bool] */;
  (%409, %var_5245, meta[relay.Constant][24] /* ty=Tensor[(576), float32] */, meta[relay.Constant][25] /* ty=Tensor[(64), float32] */, %410)
}

def @func_3144() -> Tensor[(3, 16, 6), bool] {
  @func_2598() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_13429() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) {
  @func_13427() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) */
}

def @func_1728(%var_1725: Tensor[(384), uint32], %var_1726: Tensor[(64), float32], %var_1727: Tensor[(80, 4), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(384, 24), uint8], Tensor[(384), uint32], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(80, 4), float32]) {
  %441 = fn (%var_1697: Tensor[(384), uint32], %var_1717: Tensor[(64), float32], %var_1718: Tensor[(80, 4), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(384, 24), uint8], Tensor[(384), uint32], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(80, 4), float32]) {
    %411 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
    %412 = %411.0;
    %413 = cast(%412, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
    %414 = cast(%var_1697, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %415 = reshape(%414, newshape=[384, 1]) /* ty=Tensor[(384, 1), uint32] */;
    %416 = @func_1574(%415) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(384, 24), uint8]) */;
    %417 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
    %418 = cast(%417, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
    %419 = cast(meta[relay.Constant][27] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %420 = cast(%var_1697, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %421 = reshape(%419, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
    %422 = reshape(%420, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %423 = cast(meta[relay.Constant][28] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %424 = cast(meta[relay.Constant][27] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %425 = cast(%var_1697, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %426 = cast(%var_1717, dtype="float32") /* ty=Tensor[(64), float32] */;
    %427 = cast(%var_1718, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
    %428 = cast(%var_1697, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %429 = reshape(%423, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
    %430 = reshape(%424, newshape=[24]) /* ty=Tensor[(24), uint32] */;
    %431 = reshape(%425, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %432 = reshape(%426, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %433 = reshape(%427, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %434 = reshape(%428, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %435 = @func_1076(%429, %430, %431, %432, %433, %434) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
    %436 = acos(%413) /* ty=Tensor[(3, 16, 6), float32] */;
    %437 = %416.3;
    %438 = tan(%418) /* ty=Tensor[(3, 16, 6), float32] */;
    %439 = @func_327(%421, %422) /* ty=Tensor[(8, 16, 3), uint32] */;
    %440 = %435.7;
    (%436, %437, %var_1697, %438, %439, meta[relay.Constant][27] /* ty=Tensor[(24), uint32] */, %440, meta[relay.Constant][28] /* ty=Tensor[(576), float32] */, %var_1717, %var_1718)
  };
  %441(%var_1725, %var_1726, %var_1727) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(384, 24), uint8], Tensor[(384), uint32], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(80, 4), float32]) */
}

def @func_12311() -> Tensor[(3, 16, 6), bool] {
  @func_12309() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_13354() -> (Tensor[(3, 16, 6), int64],) {
  %444 = fn () -> (Tensor[(3, 16, 6), int64],) {
    %442 = @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */;
    %443 = %442.0;
    (%443,)
  };
  %444() /* ty=(Tensor[(3, 16, 6), int64],) */
}

def @func_6354() -> Tensor[(3, 16, 6), float32] {
  %448 = fn () -> Tensor[(3, 16, 6), float32] {
    %445 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %446 = %445.0;
    %447 = cast(%446, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
    sinh(%447) /* ty=Tensor[(3, 16, 6), float32] */
  };
  %448() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_1522() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  %449 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %450 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(3, 16, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %453 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 16, 6), float32] */, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %454 = asin(%453) /* ty=Tensor[(3, 16, 6), float64] */;
  %455 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 16, 6), float32] */, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %459 = floor_mod(%451, %452) /* ty=Tensor[(3, 16, 6), float32] */;
  %460 = logical_and(%457, %458) /* ty=Tensor[(3, 16, 6), bool] */;
  (%459, %460)
}

def @func_11986() -> (Tensor[(3, 16, 6), bool],) {
  @func_11984() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_2753(%var_2746: Tensor[(6, 96), float32], %var_2749: Tensor[(64), float32], %var_2750: Tensor[(320), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(6, 96), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32]) {
  %461 = cast(%var_2746, dtype="float32") /* ty=Tensor[(6, 96), float32] */;
  %462 = cast(meta[relay.Constant][31] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %463 = cast(meta[relay.Constant][32] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %464 = cast(%var_2749, dtype="float32") /* ty=Tensor[(64), float32] */;
  %465 = cast(%var_2750, dtype="float32") /* ty=Tensor[(320), float32] */;
  %466 = cast(meta[relay.Constant][32] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %467 = reshape(%461, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
  %468 = reshape(%462, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %469 = reshape(%463, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %470 = reshape(%464, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %471 = reshape(%465, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %472 = reshape(%466, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
  %473 = @func_1076(%467, %468, %469, %470, %471, %472) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
  %474 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  %475 = %473.3;
  (%474, %475, %var_2746, meta[relay.Constant][31] /* ty=Tensor[(24), uint32] */, meta[relay.Constant][32] /* ty=Tensor[(384), uint32] */, %var_2749, %var_2750)
}

def @func_6757() -> (Tensor[(3, 16, 6), float32],) {
  %476 = @func_3370() /* ty=Tensor[(3, 16, 6), float32] */;
  (%476,)
}

def @func_9519() -> (Tensor[(3, 16, 6), float32], Tensor[(?, 546), int16]) {
  @func_9517() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(?, 546), int16]) */
}

def @func_327(%var_317: Tensor[(8, 1, 3), uint32], %var_318: Tensor[(8, 16, 3), uint32]) -> Tensor[(8, 16, 3), uint32] {
  %477 = cast(%var_317, dtype="uint32") /* ty=Tensor[(8, 1, 3), uint32] */;
  %478 = cast(%var_318, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
  minimum(%477, %478) /* ty=Tensor[(8, 16, 3), uint32] */
}

def @func_7024(%var_6998: Tensor[(3, 13, 14), float32], %var_6999: Tensor[(3, 13, 14), float32]) -> (Tensor[(3, 13, 14), float32], Tensor[(3, 13, 14), float64]) {
  %479 = cast(%var_6999, dtype="float32") /* ty=Tensor[(3, 13, 14), float32] */;
  %480 = shape_of(%var_6998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%var_6998, dtype="float32") /* ty=Tensor[(3, 13, 14), float32] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %483 = cast(%var_6998, dtype="float64") /* ty=Tensor[(3, 13, 14), float64] */;
  %484 = floor_divide(%481, %482) /* ty=Tensor[(3, 13, 14), float32] */;
  %485 = acosh(%483) /* ty=Tensor[(3, 13, 14), float64] */;
  (%484, %485)
}

def @func_8608(%var_8583: Tensor[(576), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32], Tensor[(40, 8), float32], Tensor[(576), float32], Tensor[(64), float32]) {
  %486 = @func_4536() /* ty=Tensor[(3, 16, 6), float32] */;
  %487 = cast(%486, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %488 = reshape(%487, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %489 = @func_6651(%488) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
  %490 = @func_5353() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
  %491 = cast(%var_8583, dtype="float32") /* ty=Tensor[(576), float32] */;
  %492 = reshape(%491, newshape=[2, 288]) /* ty=Tensor[(2, 288), float32] */;
  %493 = @func_4405(%492) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), float64], Tensor[(384), uint32], Tensor[(2, 288), float32], Tensor[(40, 8), float32]) */;
  %494 = %489.1;
  %495 = cast(%494, dtype="float32") /* ty=Tensor[(64), float32] */;
  %496 = reshape(%495, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %497 = @func_4774(%496) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(384), uint32], Tensor[(24), uint32], Tensor[(2, 192), uint32], Tensor[(64), float32]) */;
  %498 = %490.0;
  %499 = %493.4;
  %500 = %497.5;
  (%486, %494, %498, %499, %var_8583, %500)
}

def @func_10753(%var_10751: Tensor[(9, 15, 1), int16], %var_10752: Tensor[(9, 15, 7), int16]) -> Tensor[(9, 15, 7), int16] {
  @func_10749(%var_10751, %var_10752) /* ty=Tensor[(9, 15, 7), int16] */
}

def @func_9307() -> Tensor[(3, 16, 6), bool] {
  %502 = fn () -> Tensor[(3, 16, 6), bool] {
    %501 = @func_8712() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %501.0
  };
  %502() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_6809() -> (Tensor[(11, 4, 3), float64],) {
  %503 = @func_4800() /* ty=(Tensor[(11, 4, 3), float64], Tensor[(1, 160), float64]) */;
  %504 = %503.0;
  (%504,)
}

def @func_6875() -> (Tensor[(3, 16, 6), bool],) {
  %505 = @func_5975() /* ty=Tensor[(3, 16, 6), bool] */;
  (%505,)
}

def @func_13970() -> (Tensor[(3, 16, 6), bool],) {
  %506 = @func_8712() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %507 = %506.0;
  (%507,)
}

def @func_3318(%var_3316: Tensor[(384), uint32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(384), uint32], Tensor[(1, 64), float32], Tensor[(320), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), float32]) {
  @func_3315(%var_3316) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(384), uint32], Tensor[(1, 64), float32], Tensor[(320), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), float32]) */
}

def @func_11041(%var_11039: Tensor[(24), uint32], %var_11040: Tensor[(384), uint32]) -> (Tensor[(10, 2, 13), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(2, 160), bool], Tensor[(24), uint32], Tensor[(4, 16), float32], Tensor[(3, 16, 6), bool], Tensor[(64), float32], Tensor[(3, 16, 6), float32]) {
  @func_11037(%var_11039, %var_11040) /* ty=(Tensor[(10, 2, 13), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(2, 160), bool], Tensor[(24), uint32], Tensor[(4, 16), float32], Tensor[(3, 16, 6), bool], Tensor[(64), float32], Tensor[(3, 16, 6), float32]) */
}

def @func_10262() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(10, 2, 13), bool], Tensor[(64), bool]) {
  %508 = @func_3725() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %509 = @func_3542() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %510 = cast(meta[relay.Constant][33] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %511 = reshape(%510, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %512 = @func_7223(%511) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 4, 3), uint8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(2, 192), uint32], Tensor[(64), float32], Tensor[(320), float32]) */;
  %513 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %514 = cast(meta[relay.Constant][34] /* ty=Tensor[(64), float32] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %515 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(64), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %516 = cast(meta[relay.Constant][33] /* ty=Tensor[(64), float32] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?), bool] */;
  %518 = %508.0;
  %519 = %509.1;
  %520 = %512.3;
  %521 = %513.0;
  %522 = greater(%516, %517) /* ty=Tensor[(64), bool] */;
  (%518, %519, %520, %521, %522)
}

def @func_11102() -> (Tensor[(3, 16, 6), int64],) {
  @func_11100() /* ty=(Tensor[(3, 16, 6), int64],) */
}

def @func_3370() -> Tensor[(3, 16, 6), float32] {
  %523 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %523.0
}

def @func_10710(%var_10709: Tensor[(8, 16, 3), uint32]) -> (Tensor[(8, 16, 3), bool], Tensor[(8, 16, 3), float32], Tensor[(132), int16]) {
  %545 = fn (%var_10651: Tensor[(8, 16, 3), uint32]) -> (Tensor[(8, 16, 3), bool], Tensor[(8, 16, 3), float32], Tensor[(132), int16]) {
    %524 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
    %525 = %524.1;
    %526 = cast(%var_10651, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
    %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
    %528 = cast(%525, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %530 = greater_equal(%528, %529) /* ty=Tensor[(8, 16, 3), bool] */;
    %531 = cast(%var_10651, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
    %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
    %533 = cast(%530, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %535 = cast(%525, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
    %536 = cos(%535) /* ty=Tensor[(8, 16, 3), float32] */;
    %537 = cast(%530, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
    %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
    %539 = cast(%536, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %541 = @func_4855() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
    %542 = equal(%533, %534) /* ty=Tensor[(8, 16, 3), bool] */;
    %543 = floor_mod(%539, %540) /* ty=Tensor[(8, 16, 3), float32] */;
    %544 = %541.2;
    (%542, %543, %544)
  };
  %545(%var_10709) /* ty=(Tensor[(8, 16, 3), bool], Tensor[(8, 16, 3), float32], Tensor[(132), int16]) */
}

def @func_9918() -> (Tensor[(10, 2, 13), bool],) {
  %546 = @func_6774() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %547 = %546.0;
  (%547,)
}

def @func_4122() -> (Tensor[(3, 16, 6), bool],) {
  %548 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %549 = %548.0;
  (%549,)
}

def @func_13419() -> (Tensor[(3, 16, 6), float32], Tensor[(320), float32], Tensor[(64), float32]) {
  %550 = @func_7486() /* ty=(Tensor[(320), float32],) */;
  %551 = @func_5016() /* ty=(Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %552 = @func_12786() /* ty=Tensor[(3, 16, 6), float32] */;
  %553 = %550.0;
  %554 = %551.1;
  (%552, %553, %554)
}

def @func_9083() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  %558 = fn () -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
    %555 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %556 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
    %557 = %555.0;
    (%556, %557)
  };
  %558() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */
}

def @func_2981(%var_2980: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  %567 = fn (%var_2966: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
    %559 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
    %560 = cast(%var_2966, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
    %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
    %562 = cast(%559, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %564 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %565 = equal(%562, %563) /* ty=Tensor[(3, 16, 6), bool] */;
    %566 = %564.0;
    (%565, %566)
  };
  %567(%var_2980) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */
}

def @func_3802(%var_3779: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) {
  %568 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  %569 = cast(%var_3779, dtype="uint8") /* ty=Tensor[(3, 16, 6), uint8] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="uint8") /* ty=Tensor[(3, 16, 6), uint8] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %573 = @func_3198() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %574 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %576 = right_shift(%571, %572) /* ty=Tensor[(3, 16, 6), uint8] */;
  %577 = %573.1;
  %578 = log10(%575) /* ty=Tensor[(3, 16, 6), float32] */;
  (%576, %577, %578)
}

def @func_3509() -> (Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) {
  @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */
}

def @func_7225(%var_7224: Tensor[(64), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(11, 4, 3), uint8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(2, 192), uint32], Tensor[(64), float32], Tensor[(320), float32]) {
  %595 = fn (%var_7216: Tensor[(64), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(11, 4, 3), uint8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(2, 192), uint32], Tensor[(64), float32], Tensor[(320), float32]) {
    %579 = @func_5920() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %580 = @func_5074() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), bool]) */;
    %581 = %579.0;
    %582 = cast(%581, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
    %583 = reshape(%582, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
    %584 = @func_2979(%583) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
    %585 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 192), uint32] */, dtype="uint32") /* ty=Tensor[(2, 192), uint32] */;
    %586 = cast(%var_7216, dtype="float32") /* ty=Tensor[(64), float32] */;
    %587 = cast(meta[relay.Constant][36] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %588 = reshape(%585, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %589 = reshape(%586, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %590 = reshape(%587, newshape=[80, 4]) /* ty=Tensor[(80, 4), float32] */;
    %591 = @func_1724(%588, %589, %590) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(384, 24), uint8], Tensor[(384), uint32], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(80, 4), float32]) */;
    %592 = %580.1;
    %593 = %584.0;
    %594 = %591.0;
    (%581, %592, %593, %594, meta[relay.Constant][35] /* ty=Tensor[(2, 192), uint32] */, %var_7216, meta[relay.Constant][36] /* ty=Tensor[(320), float32] */)
  };
  %595(%var_7224) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 4, 3), uint8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(2, 192), uint32], Tensor[(64), float32], Tensor[(320), float32]) */
}

def @func_10018(%var_10017: Tensor[(10, 3, 1), float64]) -> (Tensor[(10, 3, 1), float64], Tensor[(10, 2, 13), bool]) {
  %600 = fn (%var_9995: Tensor[(10, 3, 1), float64]) -> (Tensor[(10, 3, 1), float64], Tensor[(10, 2, 13), bool]) {
    %596 = cast(%var_9995, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
    %597 = @func_8633() /* ty=(Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) */;
    %598 = cos(%596) /* ty=Tensor[(10, 3, 1), float64] */;
    %599 = %597.0;
    (%598, %599)
  };
  %600(%var_10017) /* ty=(Tensor[(10, 3, 1), float64], Tensor[(10, 2, 13), bool]) */
}

def @func_10963(%var_10942: Tensor[(8, 11, 9), float32]) -> (Tensor[(8, 11, 9), uint32],) {
  %601 = cast(%var_10942, dtype="float32") /* ty=Tensor[(8, 11, 9), float32] */;
  %602 = log2(%601) /* ty=Tensor[(8, 11, 9), float32] */;
  %603 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 11, 9), float32] */, dtype="uint32") /* ty=Tensor[(8, 11, 9), uint32] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="uint32") /* ty=Tensor[(8, 11, 9), uint32] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %607 = logical_xor(%605, %606) /* ty=Tensor[(8, 11, 9), uint32] */;
  (%607,)
}

def @func_8964() -> (Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32]) {
  %608 = @func_7720() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %609 = cast(meta[relay.Constant][38] /* ty=Tensor[(1386), int32] */, dtype="int32") /* ty=Tensor[(1386), int32] */;
  %610 = cast(meta[relay.Constant][38] /* ty=Tensor[(1386), int32] */, dtype="int32") /* ty=Tensor[(1386), int32] */;
  %611 = reshape(%609, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), int32] */;
  %612 = reshape(%610, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), int32] */;
  %613 = @func_6552(%611, %612) /* ty=(Tensor[(11, 9, 14), int32],) */;
  %614 = @func_4479() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %615 = %608.0;
  %616 = %613.0;
  %617 = %614.0;
  (%615, %616, meta[relay.Constant][38] /* ty=Tensor[(1386), int32] */, %617)
}

def @func_9869(%var_9855: Tensor[(576), float32]) -> (Tensor[(6, 11, 5), int16], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(24), uint32], Tensor[(6, 64), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32]) {
  %618 = @func_6329() /* ty=(Tensor[(6, 11, 5), int16],) */;
  %619 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %620 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 64), uint32] */, dtype="uint32") /* ty=Tensor[(6, 64), uint32] */;
  %621 = reshape(%620, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %622 = @func_6688(%621) /* ty=(Tensor[(320), float32], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32]) */;
  %623 = cast(%var_9855, dtype="float32") /* ty=Tensor[(576), float32] */;
  %624 = reshape(%623, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %625 = @func_5884(%624) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320, 1), float32]) */;
  %626 = %618.0;
  %627 = %619.0;
  %628 = @func_7961() /* ty=Tensor[(3, 16, 6), float32] */;
  %629 = %622.1;
  %630 = %625.1;
  (%626, %627, %628, %629, meta[relay.Constant][39] /* ty=Tensor[(6, 64), uint32] */, %630, %var_9855)
}

def @func_4921() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) {
  %635 = fn () -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) {
    %631 = @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */;
    %632 = @func_4217() /* ty=Tensor[(3, 16, 6), float32] */;
    %633 = @func_4536() /* ty=Tensor[(3, 16, 6), float32] */;
    %634 = %631.0;
    (%632, %633, %634)
  };
  %635() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */
}

def @func_2538() -> (Tensor[(3, 16, 6), bool],) {
  @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_6690(%var_6689: Tensor[(384), uint32]) -> (Tensor[(320), float32], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32]) {
  %648 = fn (%var_6685: Tensor[(384), uint32]) -> (Tensor[(320), float32], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32]) {
    %636 = @func_6474() /* ty=(Tensor[(320), float32],) */;
    %637 = cast(meta[relay.Constant][40] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %638 = cast(meta[relay.Constant][41] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %639 = cast(%var_6685, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %640 = %636.0;
    %641 = cast(%640, dtype="bool") /* ty=Tensor[(320), bool] */;
    %642 = reshape(%637, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %643 = reshape(%638, newshape=[24]) /* ty=Tensor[(24), uint32] */;
    %644 = reshape(%639, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %645 = reshape(%641, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), bool] */;
    %646 = @func_2041(%642, %643, %644, %645) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) */;
    %647 = %646.2;
    (%640, %647, meta[relay.Constant][40] /* ty=Tensor[(576), float32] */, meta[relay.Constant][41] /* ty=Tensor[(24), uint32] */, %var_6685)
  };
  %648(%var_6689) /* ty=(Tensor[(320), float32], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32]) */
}

def @func_13733() -> (Tensor[(3, 16, 6), float32],) {
  %649 = @func_8964() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32]) */;
  %650 = %649.3;
  (%650,)
}

def @func_11660() -> Tensor[(3, 16, 6), bool] {
  @func_11658() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_2689() -> (Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) {
  %651 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %652 = cast(meta[relay.Constant][42] /* ty=Tensor[(260), bool] */, dtype="bool") /* ty=Tensor[(260), bool] */;
  %653 = reshape(%652, newshape=[10, 2, 13]) /* ty=Tensor[(10, 2, 13), bool] */;
  %654 = @func_894(%653) /* ty=(Tensor[(10, 2, 13), bool],) */;
  %655 = %651.0;
  %656 = %654.0;
  (%655, %656, meta[relay.Constant][42] /* ty=Tensor[(260), bool] */)
}

def @func_5452() -> Tensor[(10, 2, 13), bool] {
  %657 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %657.0
}

def @func_9010(%var_9009: Tensor[(5, 11, 10), float32]) -> (Tensor[(5, 11, 10), float32], Tensor[(1, 160), float64], Tensor[(3, 16, 6), bool]) {
  %664 = fn (%var_8979: Tensor[(5, 11, 10), float32]) -> (Tensor[(5, 11, 10), float32], Tensor[(1, 160), float64], Tensor[(3, 16, 6), bool]) {
    %658 = cast(%var_8979, dtype="float32") /* ty=Tensor[(5, 11, 10), float32] */;
    %659 = @func_4800() /* ty=(Tensor[(11, 4, 3), float64], Tensor[(1, 160), float64]) */;
    %660 = @func_5544() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
    %661 = asinh(%658) /* ty=Tensor[(5, 11, 10), float32] */;
    %662 = %659.1;
    %663 = %660.0;
    (%661, %662, %663)
  };
  %664(%var_9009) /* ty=(Tensor[(5, 11, 10), float32], Tensor[(1, 160), float64], Tensor[(3, 16, 6), bool]) */
}

def @func_13509() -> (Tensor[(1, 24), uint32],) {
  @func_13507() /* ty=(Tensor[(1, 24), uint32],) */
}

def @func_4336(%var_4332: Tensor[(576), float32], %var_4333: Tensor[(24), uint32], %var_4334: Tensor[(384, 1), uint32], %var_4335: Tensor[(8, 40), bool]) -> (Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384, 1), uint32], Tensor[(8, 40), bool]) {
  @func_4330(%var_4332, %var_4333, %var_4334, %var_4335) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384, 1), uint32], Tensor[(8, 40), bool]) */
}

def @func_11658() -> Tensor[(3, 16, 6), bool] {
  %665 = @func_9315() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %665.0
}

def @func_5354() -> (Tensor[(3, 16, 6), float32], Tensor[(64), float32]) {
  %669 = fn () -> (Tensor[(3, 16, 6), float32], Tensor[(64), float32]) {
    %666 = @func_5016() /* ty=(Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
    %667 = @func_4217() /* ty=Tensor[(3, 16, 6), float32] */;
    %668 = %666.1;
    (%667, %668)
  };
  %669() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */
}

def @func_3372() -> Tensor[(3, 16, 6), float32] {
  @func_3370() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_4856() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) {
  %678 = fn () -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) {
    %670 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
    %671 = %670.0;
    %672 = cast(%671, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
    %673 = cast(meta[relay.Constant][43] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
    %674 = reshape(%672, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float32] */;
    %675 = reshape(%673, newshape=[132]) /* ty=Tensor[(132), int16] */;
    %676 = @func_2099(%674, %675) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */;
    %677 = %676.0;
    (%671, %677, meta[relay.Constant][43] /* ty=Tensor[(132), int16] */)
  };
  %678() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */
}

def @func_3906() -> Tensor[(3, 16, 6), bool] {
  %679 = fn () -> Tensor[(3, 16, 6), bool] {
    @func_2428() /* ty=Tensor[(3, 16, 6), bool] */
  };
  %679() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_7610() -> Tensor[(3, 16, 6), float32] {
  @func_4076() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_8882() -> (Tensor[(3, 16, 6), bool],) {
  %680 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  (%680,)
}

def @func_6107() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(576), float32], Tensor[(320), float32]) {
  @func_6105() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(576), float32], Tensor[(320), float32]) */
}

def @func_11084() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int64]) {
  @func_11082() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int64]) */
}

def @func_2822() -> (Tensor[(3, 16, 6), bool],) {
  %681 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
  (%681,)
}

def @func_3839(%var_3826: Tensor[(11, 9, 15), float32]) -> (Tensor[(11, 9, 15), float32], Tensor[(3, 16, 6), bool]) {
  %682 = cast(%var_3826, dtype="float32") /* ty=Tensor[(11, 9, 15), float32] */;
  %683 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %684 = exp(%682) /* ty=Tensor[(11, 9, 15), float32] */;
  %685 = %683.0;
  (%684, %685)
}

def @func_11278(%var_11276: Tensor[(576), float32], %var_11277: Tensor[(12, 8, 9), float32]) -> (Tensor[(64), float32], Tensor[(576), float32], Tensor[(12, 8, 9), int8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(384), uint32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(132), int16], Tensor[(132), float32]) {
  @func_11274(%var_11276, %var_11277) /* ty=(Tensor[(64), float32], Tensor[(576), float32], Tensor[(12, 8, 9), int8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(384), uint32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(132), int16], Tensor[(132), float32]) */
}

def @func_12102(%var_12100: Tensor[(6, 4), uint32], %var_12101: Tensor[(384), uint32]) -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(6, 4), uint32], Tensor[(384), uint32], Tensor[(320), bool], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) {
  %704 = fn (%var_12048: Tensor[(6, 4), uint32], %var_12049: Tensor[(384), uint32]) -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(6, 4), uint32], Tensor[(384), uint32], Tensor[(320), bool], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) {
    %686 = @func_8281() /* ty=(Tensor[(3, 16, 6), float32],) */;
    %687 = @func_8281() /* ty=(Tensor[(3, 16, 6), float32],) */;
    %688 = cast(meta[relay.Constant][44] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %689 = cast(%var_12048, dtype="uint32") /* ty=Tensor[(6, 4), uint32] */;
    %690 = cast(%var_12049, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %691 = cast(meta[relay.Constant][45] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
    %692 = reshape(%688, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %693 = reshape(%689, newshape=[24]) /* ty=Tensor[(24), uint32] */;
    %694 = reshape(%690, newshape=[384, 1]) /* ty=Tensor[(384, 1), uint32] */;
    %695 = reshape(%691, newshape=[8, 40]) /* ty=Tensor[(8, 40), bool] */;
    %696 = @func_4330(%692, %693, %694, %695) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384, 1), uint32], Tensor[(8, 40), bool]) */;
    %697 = @func_8712() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %698 = @func_4855() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
    %699 = %686.0;
    %700 = %687.0;
    %701 = %696.1;
    %702 = %697.0;
    %703 = %698.0;
    (%699, %700, %701, meta[relay.Constant][44] /* ty=Tensor[(576), float32] */, %var_12048, %var_12049, meta[relay.Constant][45] /* ty=Tensor[(320), bool] */, %702, %703)
  };
  %704(%var_12100, %var_12101) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(6, 4), uint32], Tensor[(384), uint32], Tensor[(320), bool], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) */
}

def @func_8252() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) {
  %705 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %706 = cast(meta[relay.Constant][46] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %707 = cast(meta[relay.Constant][47] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %708 = cast(meta[relay.Constant][48] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %709 = reshape(%706, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %710 = reshape(%707, newshape=[24, 1]) /* ty=Tensor[(24, 1), uint32] */;
  %711 = reshape(%708, newshape=[320]) /* ty=Tensor[(320), bool] */;
  %712 = @func_4015(%709, %710, %711) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24, 1), uint32], Tensor[(384), uint32], Tensor[(320), bool]) */;
  %713 = %705.0;
  %714 = %712.0;
  (%713, %714, meta[relay.Constant][46] /* ty=Tensor[(576), float32] */, meta[relay.Constant][47] /* ty=Tensor[(24), uint32] */, meta[relay.Constant][48] /* ty=Tensor[(320), bool] */)
}

def @func_4076() -> Tensor[(3, 16, 6), float32] {
  %715 = @func_3542() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %715.0
}

def @func_7651() -> (Tensor[(320), float32],) {
  %716 = @func_5098() /* ty=(Tensor[(320), float32],) */;
  %717 = %716.0;
  (%717,)
}

def @func_13767() -> (Tensor[(3, 16, 6), bool], Tensor[(11, 9, 14), int32], Tensor[(1386), int32]) {
  %718 = @func_6105() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(576), float32], Tensor[(320), float32]) */;
  %719 = cast(meta[relay.Constant][49] /* ty=Tensor[(1386), int32] */, dtype="int32") /* ty=Tensor[(1386), int32] */;
  %720 = reshape(%719, newshape=[1386]) /* ty=Tensor[(1386), int32] */;
  %721 = @func_10096(%720) /* ty=(Tensor[(10, 2, 13), float32], Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
  %722 = %718.0;
  %723 = %721.2;
  (%722, %723, meta[relay.Constant][49] /* ty=Tensor[(1386), int32] */)
}

def @func_3842(%var_3840: Tensor[(11, 9, 15), float32]) -> (Tensor[(11, 9, 15), float32], Tensor[(3, 16, 6), bool]) {
  @func_3839(%var_3840) /* ty=(Tensor[(11, 9, 15), float32], Tensor[(3, 16, 6), bool]) */
}

def @func_4580(%var_4579: Tensor[(11, 4, 3), float64]) -> Tensor[(11, 4, 3), bool] {
  %730 = fn (%var_4571: Tensor[(11, 4, 3), float64]) -> Tensor[(11, 4, 3), bool] {
    %724 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
    %725 = %724.1;
    %726 = cast(%var_4571, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
    %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
    %728 = cast(%725, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%728, %729) /* ty=Tensor[(11, 4, 3), bool] */
  };
  %730(%var_4579) /* ty=Tensor[(11, 4, 3), bool] */
}

def @func_8667() -> Tensor[(64), float32] {
  %732 = fn () -> Tensor[(64), float32] {
    %731 = @func_5353() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
    %731.1
  };
  %732() /* ty=Tensor[(64), float32] */
}

def @func_10909() -> (Tensor[(12, 8, 9), bool], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) {
  %748 = fn () -> (Tensor[(12, 8, 9), bool], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) {
    %733 = @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */;
    %734 = %733.0;
    %735 = cast(meta[relay.Constant][50] /* ty=Tensor[(12, 8, 9), float32] */, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
    %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
    %737 = cast(%734, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
    %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %739 = cast(meta[relay.Constant][51] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %740 = cast(meta[relay.Constant][52] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %741 = cast(meta[relay.Constant][53] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
    %742 = reshape(%739, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %743 = reshape(%740, newshape=[24, 1]) /* ty=Tensor[(24, 1), uint32] */;
    %744 = reshape(%741, newshape=[320]) /* ty=Tensor[(320), bool] */;
    %745 = @func_4015(%742, %743, %744) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24, 1), uint32], Tensor[(384), uint32], Tensor[(320), bool]) */;
    %746 = less(%737, %738) /* ty=Tensor[(12, 8, 9), bool] */;
    %747 = %745.1;
    (%746, %747, meta[relay.Constant][51] /* ty=Tensor[(576), float32] */, meta[relay.Constant][52] /* ty=Tensor[(24), uint32] */, meta[relay.Constant][53] /* ty=Tensor[(320), bool] */)
  };
  %748() /* ty=(Tensor[(12, 8, 9), bool], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) */
}

def @func_12558() -> (Tensor[(9, 3, 13), float64], Tensor[(3, 16, 6), bool]) {
  %749 = @func_11082() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int64]) */;
  %750 = @func_11351() /* ty=Tensor[(9, 3, 13), float64] */;
  %751 = %749.0;
  (%750, %751)
}

def @func_11938(%var_11937: Tensor[(576), float32]) -> (Tensor[(64), float32], Tensor[(3, 16, 6), float32], Tensor[(576), float32]) {
  %758 = fn (%var_11934: Tensor[(576), float32]) -> (Tensor[(64), float32], Tensor[(3, 16, 6), float32], Tensor[(576), float32]) {
    %752 = @func_5353() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
    %753 = cast(%var_11934, dtype="float32") /* ty=Tensor[(576), float32] */;
    %754 = reshape(%753, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %755 = @func_8608(%754) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32], Tensor[(40, 8), float32], Tensor[(576), float32], Tensor[(64), float32]) */;
    %756 = %752.1;
    %757 = %755.2;
    (%756, %757, %var_11934)
  };
  %758(%var_11937) /* ty=(Tensor[(64), float32], Tensor[(3, 16, 6), float32], Tensor[(576), float32]) */
}

def @func_13862(%var_13861: Tensor[(1120), int16]) -> (Tensor[(384), uint32], Tensor[(1, 2112), float32], Tensor[(1120), int16], Tensor[(576), float32]) {
  %767 = fn (%var_13848: Tensor[(1120), int16]) -> (Tensor[(384), uint32], Tensor[(1, 2112), float32], Tensor[(1120), int16], Tensor[(576), float32]) {
    %759 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
    %760 = cast(%var_13848, dtype="int16") /* ty=Tensor[(1120), int16] */;
    %761 = cast(meta[relay.Constant][54] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %762 = reshape(%760, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), int16] */;
    %763 = reshape(%761, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %764 = @func_10858(%762, %763) /* ty=(Tensor[(5, 14, 16), bool], Tensor[(5, 10, 8), float32], Tensor[(1, 400), float32], Tensor[(24), uint32], Tensor[(1, 2112), float32], Tensor[(576), float32], Tensor[(64), float32]) */;
    %765 = %759.3;
    %766 = %764.4;
    (%765, %766, %var_13848, meta[relay.Constant][54] /* ty=Tensor[(576), float32] */)
  };
  %767(%var_13861) /* ty=(Tensor[(384), uint32], Tensor[(1, 2112), float32], Tensor[(1120), int16], Tensor[(576), float32]) */
}

def @func_6383(%var_6382: Tensor[(13, 4, 3), float64]) -> (Tensor[(13, 4, 3), float64],) {
  %770 = fn (%var_6367: Tensor[(13, 4, 3), float64]) -> (Tensor[(13, 4, 3), float64],) {
    %768 = cast(%var_6367, dtype="float64") /* ty=Tensor[(13, 4, 3), float64] */;
    %769 = cosh(%768) /* ty=Tensor[(13, 4, 3), float64] */;
    (%769,)
  };
  %770(%var_6382) /* ty=(Tensor[(13, 4, 3), float64],) */
}

def @func_4442(%var_4441: Tensor[(132, 1), int16]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(132, 1), int16]) {
  %779 = fn (%var_4438: Tensor[(132, 1), int16]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(132, 1), int16]) {
    %771 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %772 = %771.0;
    %773 = cast(%772, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
    %774 = cast(%var_4438, dtype="int16") /* ty=Tensor[(132, 1), int16] */;
    %775 = reshape(%773, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float32] */;
    %776 = reshape(%774, newshape=[132]) /* ty=Tensor[(132), int16] */;
    %777 = @func_2099(%775, %776) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */;
    %778 = %777.0;
    (%772, %778, %var_4438)
  };
  %779(%var_4441) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(132, 1), int16]) */
}

def @func_11442(%var_11440: Tensor[(8, 5, 11), uint16]) -> Tensor[(8, 5, 11), uint16] {
  @func_11439(%var_11440) /* ty=Tensor[(8, 5, 11), uint16] */
}

def @func_13972() -> (Tensor[(3, 16, 6), bool],) {
  @func_13970() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_8712() -> (Tensor[(3, 16, 6), bool],) {
  %780 = @func_4543() /* ty=Tensor[(3, 16, 6), bool] */;
  (%780,)
}

def @func_6651(%var_6609: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), float32], Tensor[(64), float32]) {
  %781 = @func_6221() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(12, 8, 9), float32], Tensor[(12, 8, 9), float32]) */;
  %782 = %781.0;
  %783 = cast(%var_6609, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %787 = @func_5353() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */;
  %788 = divide(%785, %786) /* ty=Tensor[(3, 16, 6), float32] */;
  %789 = %787.1;
  (%788, %789)
}

def @func_5704(%var_5702: Tensor[(5, 10, 8), float32]) -> (Tensor[(5, 10, 8), float32],) {
  @func_5701(%var_5702) /* ty=(Tensor[(5, 10, 8), float32],) */
}

def @func_2675(%var_2672: Tensor[(384), uint32], %var_2673: Tensor[(576), float32], %var_2674: Tensor[(320), float32]) -> (Tensor[(3, 16, 6), float64], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32]) {
  %803 = fn (%var_2666: Tensor[(384), uint32], %var_2667: Tensor[(576), float32], %var_2669: Tensor[(320), float32]) -> (Tensor[(3, 16, 6), float64], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32]) {
    %790 = @func_2598() /* ty=Tensor[(3, 16, 6), bool] */;
    %791 = cast(%790, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
    %792 = cast(%var_2666, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %793 = cast(%var_2667, dtype="float32") /* ty=Tensor[(576), float32] */;
    %794 = cast(meta[relay.Constant][55] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %795 = cast(%var_2669, dtype="float32") /* ty=Tensor[(320), float32] */;
    %796 = reshape(%792, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %797 = reshape(%793, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %798 = reshape(%794, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %799 = reshape(%795, newshape=[160, 2]) /* ty=Tensor[(160, 2), float32] */;
    %800 = @func_1832(%796, %797, %798, %799) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), bool], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(160, 2), float32], Tensor[(9, 16, 4), float32], Tensor[(8, 16, 3), uint32]) */;
    %801 = asinh(%791) /* ty=Tensor[(3, 16, 6), float64] */;
    %802 = %800.8;
    (%801, %802, %var_2666, %var_2667, meta[relay.Constant][55] /* ty=Tensor[(64), float32] */, %var_2669)
  };
  %803(%var_2672, %var_2673, %var_2674) /* ty=(Tensor[(3, 16, 6), float64], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32]) */
}

def @func_13769() -> (Tensor[(3, 16, 6), bool], Tensor[(11, 9, 14), int32], Tensor[(1386), int32]) {
  @func_13767() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 9, 14), int32], Tensor[(1386), int32]) */
}

def @func_7028(%var_7026: Tensor[(3, 13, 14), float32], %var_7027: Tensor[(3, 13, 14), float32]) -> (Tensor[(3, 13, 14), float32], Tensor[(3, 13, 14), float64]) {
  @func_7024(%var_7026, %var_7027) /* ty=(Tensor[(3, 13, 14), float32], Tensor[(3, 13, 14), float64]) */
}

def @func_5509(%var_5506: Tensor[(11, 3, 11), uint32], %var_5507: Tensor[(11, 3, 11), uint32], %var_5508: Tensor[(2112), float32]) -> (Tensor[(11, 3, 11), uint32], Tensor[(3, 16, 6), bool], Tensor[(320), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32]) {
  %819 = fn (%var_5463: Tensor[(11, 3, 11), uint32], %var_5464: Tensor[(11, 3, 11), uint32], %var_5483: Tensor[(2112), float32]) -> (Tensor[(11, 3, 11), uint32], Tensor[(3, 16, 6), bool], Tensor[(320), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32]) {
    %804 = cast(%var_5464, dtype="uint32") /* ty=Tensor[(11, 3, 11), uint32] */;
    %805 = shape_of(%var_5463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %806 = cast(%var_5463, dtype="uint32") /* ty=Tensor[(11, 3, 11), uint32] */;
    %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %808 = @func_4196() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %809 = cast(%var_5483, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %810 = cast(meta[relay.Constant][56] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %811 = cast(meta[relay.Constant][57] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %812 = reshape(%809, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float32] */;
    %813 = reshape(%810, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %814 = reshape(%811, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %815 = @func_2501(%812, %813, %814) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) */;
    %816 = right_shift(%806, %807) /* ty=Tensor[(11, 3, 11), uint32] */;
    %817 = %808.0;
    %818 = %815.7;
    (%816, %817, %818, %var_5483, meta[relay.Constant][56] /* ty=Tensor[(576), float32] */, meta[relay.Constant][57] /* ty=Tensor[(64), float32] */)
  };
  %819(%var_5506, %var_5507, %var_5508) /* ty=(Tensor[(11, 3, 11), uint32], Tensor[(3, 16, 6), bool], Tensor[(320), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32]) */
}

def @func_8634() -> (Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) {
  %823 = fn () -> (Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) {
    %820 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
    %821 = %820.0;
    %822 = @func_2598() /* ty=Tensor[(3, 16, 6), bool] */;
    (%821, %822)
  };
  %823() /* ty=(Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) */
}

def @func_4676(%var_4654: Tensor[(12, 48), float32], %var_4655: Tensor[(24), uint32], %var_4656: Tensor[(1, 384), uint32]) -> (Tensor[(12, 8, 9), float64], Tensor[(320), float32], Tensor[(12, 48), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(320), bool], Tensor[(3, 16, 6), bool]) {
  %824 = @func_4490() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %825 = %824.1;
  %826 = cast(%825, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %827 = cast(%var_4654, dtype="float32") /* ty=Tensor[(12, 48), float32] */;
  %828 = cast(%var_4655, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %829 = cast(%var_4656, dtype="uint32") /* ty=Tensor[(1, 384), uint32] */;
  %830 = cast(meta[relay.Constant][58] /* ty=Tensor[(320), bool] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %831 = reshape(%827, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %832 = reshape(%828, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %833 = reshape(%829, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %834 = reshape(%830, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), bool] */;
  %835 = @func_2041(%831, %832, %833, %834) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) */;
  %836 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %837 = tan(%826) /* ty=Tensor[(12, 8, 9), float64] */;
  %838 = %835.5;
  %839 = %836.0;
  (%837, %838, %var_4654, %var_4655, %var_4656, meta[relay.Constant][58] /* ty=Tensor[(320), bool] */, %839)
}

def @func_10099(%var_10097: Tensor[(1386), int32]) -> (Tensor[(10, 2, 13), float32], Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) {
  @func_10096(%var_10097) /* ty=(Tensor[(10, 2, 13), float32], Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */
}

def @func_12362(%var_12361: Tensor[(576), float32]) -> (Tensor[(10, 2, 13), bool], Tensor[(64), float32], Tensor[(1120), int16], Tensor[(576), float32]) {
  %848 = fn (%var_12352: Tensor[(576), float32]) -> (Tensor[(10, 2, 13), bool], Tensor[(64), float32], Tensor[(1120), int16], Tensor[(576), float32]) {
    %840 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
    %841 = cast(meta[relay.Constant][59] /* ty=Tensor[(1120), int16] */, dtype="int16") /* ty=Tensor[(1120), int16] */;
    %842 = cast(%var_12352, dtype="float32") /* ty=Tensor[(576), float32] */;
    %843 = reshape(%841, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), int16] */;
    %844 = reshape(%842, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %845 = @func_10858(%843, %844) /* ty=(Tensor[(5, 14, 16), bool], Tensor[(5, 10, 8), float32], Tensor[(1, 400), float32], Tensor[(24), uint32], Tensor[(1, 2112), float32], Tensor[(576), float32], Tensor[(64), float32]) */;
    %846 = %840.0;
    %847 = %845.6;
    (%846, %847, meta[relay.Constant][59] /* ty=Tensor[(1120), int16] */, %var_12352)
  };
  %848(%var_12361) /* ty=(Tensor[(10, 2, 13), bool], Tensor[(64), float32], Tensor[(1120), int16], Tensor[(576), float32]) */
}

def @func_5075() -> (Tensor[(3, 16, 6), float32], Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), bool]) {
  %866 = fn () -> (Tensor[(3, 16, 6), float32], Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), bool]) {
    %849 = @func_4536() /* ty=Tensor[(3, 16, 6), float32] */;
    %850 = cast(%849, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
    %851 = cast(meta[relay.Constant][60] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
    %852 = reshape(%850, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float32] */;
    %853 = reshape(%851, newshape=[132]) /* ty=Tensor[(132), int16] */;
    %854 = @func_2099(%852, %853) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */;
    %855 = %854.1;
    %856 = cast(meta[relay.Constant][60] /* ty=Tensor[(132), int16] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
    %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
    %858 = cast(%855, dtype="uint8") /* ty=Tensor[(11, 4, 3), uint8] */;
    %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %860 = cast(meta[relay.Constant][60] /* ty=Tensor[(132), int16] */, dtype="bool") /* ty=Tensor[(132), bool] */;
    %861 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
    %862 = cast(%855, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %864 = right_shift(%858, %859) /* ty=Tensor[(11, 4, 3), uint8] */;
    %865 = not_equal(%862, %863) /* ty=Tensor[(11, 4, 3), bool] */;
    (%849, %864, %865)
  };
  %866() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), bool]) */
}

def @func_6654(%var_6652: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), float32], Tensor[(64), float32]) {
  @func_6651(%var_6652) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32]) */
}

def @func_2102(%var_2100: Tensor[(3, 16, 6), float32], %var_2101: Tensor[(132), int16]) -> (Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) {
  %878 = fn (%var_2089: Tensor[(3, 16, 6), float32], %var_2096: Tensor[(132), int16]) -> (Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) {
    %867 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
    %868 = %867.0;
    %869 = cast(%var_2089, dtype="int32") /* ty=Tensor[(3, 16, 6), int32] */;
    %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
    %871 = cast(%868, dtype="int32") /* ty=Tensor[(3, 16, 6), int32] */;
    %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %873 = cast(%var_2096, dtype="int16") /* ty=Tensor[(132), int16] */;
    %874 = reshape(%873, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int16] */;
    %875 = @func_1867(%874) /* ty=(Tensor[(11, 4, 3), float64],) */;
    %876 = bitwise_and(%871, %872) /* ty=Tensor[(3, 16, 6), int32] */;
    %877 = %875.0;
    (%876, %877, %var_2096)
  };
  %878(%var_2100, %var_2101) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */
}

def @func_2264(%var_2262: Tensor[(3, 16, 6), float64]) -> (Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) {
  @func_2261(%var_2262) /* ty=(Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) */
}

def @func_9036() -> Tensor[(3, 16, 6), float32] {
  %880 = fn () -> Tensor[(3, 16, 6), float32] {
    %879 = @func_4490() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
    %879.0
  };
  %880() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_9974() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  %881 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %882 = @func_9306() /* ty=Tensor[(3, 16, 6), bool] */;
  %883 = @func_4076() /* ty=Tensor[(3, 16, 6), float32] */;
  %884 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %885 = %881.0;
  (%882, %883, %884, %885)
}

def @func_6877() -> (Tensor[(3, 16, 6), bool],) {
  @func_6875() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_12518() -> (Tensor[(10, 2, 13), float64],) {
  @func_12516() /* ty=(Tensor[(10, 2, 13), float64],) */
}

def @func_9976() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  @func_9974() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */
}

def @func_10096(%var_10054: Tensor[(1386), int32]) -> (Tensor[(10, 2, 13), float32], Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) {
  %886 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
  %887 = %886.0;
  %888 = cast(%887, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %889 = @func_7720() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %890 = cast(%var_10054, dtype="int32") /* ty=Tensor[(1386), int32] */;
  %891 = cast(%var_10054, dtype="int32") /* ty=Tensor[(1386), int32] */;
  %892 = reshape(%890, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), int32] */;
  %893 = reshape(%891, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), int32] */;
  %894 = @func_6552(%892, %893) /* ty=(Tensor[(11, 9, 14), int32],) */;
  %895 = cast(meta[relay.Constant][61] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %896 = reshape(%895, newshape=[132, 1]) /* ty=Tensor[(132, 1), int16] */;
  %897 = @func_4440(%896) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(132, 1), int16]) */;
  %898 = erf(%888) /* ty=Tensor[(10, 2, 13), float32] */;
  %899 = %889.0;
  %900 = %894.0;
  %901 = @func_7610() /* ty=Tensor[(3, 16, 6), float32] */;
  %902 = %897.1;
  (%898, %899, %900, %var_10054, %901, %902, meta[relay.Constant][61] /* ty=Tensor[(132), int16] */)
}

def @func_11790(%var_11789: Tensor[(196, 2), float64]) -> (Tensor[(6, 11, 5), int16], Tensor[(320), float32], Tensor[(4, 7, 14), float32], Tensor[(196, 2), float64]) {
  %911 = fn (%var_11775: Tensor[(196, 2), float64]) -> (Tensor[(6, 11, 5), int16], Tensor[(320), float32], Tensor[(4, 7, 14), float32], Tensor[(196, 2), float64]) {
    %903 = @func_6329() /* ty=(Tensor[(6, 11, 5), int16],) */;
    %904 = @func_6474() /* ty=(Tensor[(320), float32],) */;
    %905 = cast(%var_11775, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
    %906 = reshape(%905, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float64] */;
    %907 = @func_10457(%906) /* ty=(Tensor[(4, 7, 14), float32],) */;
    %908 = %903.0;
    %909 = %904.0;
    %910 = %907.0;
    (%908, %909, %910, %var_11775)
  };
  %911(%var_11789) /* ty=(Tensor[(6, 11, 5), int16], Tensor[(320), float32], Tensor[(4, 7, 14), float32], Tensor[(196, 2), float64]) */
}

def @func_8393() -> Tensor[(3, 16, 6), bool] {
  @func_5975() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_9489(%var_9488: Tensor[(156), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(13, 4, 3), float64], Tensor[(156), float64], Tensor[(3, 16, 6), float32]) {
  %922 = fn (%var_9474: Tensor[(156), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(13, 4, 3), float64], Tensor[(156), float64], Tensor[(3, 16, 6), float32]) {
    %912 = @func_9082() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
    %913 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %914 = cast(%var_9474, dtype="float64") /* ty=Tensor[(156), float64] */;
    %915 = reshape(%914, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
    %916 = @func_6381(%915) /* ty=(Tensor[(13, 4, 3), float64],) */;
    %917 = @func_4479() /* ty=(Tensor[(3, 16, 6), float32],) */;
    %918 = %912.0;
    %919 = %913.0;
    %920 = %916.0;
    %921 = %917.0;
    (%918, %919, %920, %var_9474, %921)
  };
  %922(%var_9488) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(13, 4, 3), float64], Tensor[(156), float64], Tensor[(3, 16, 6), float32]) */
}

def @func_6136(%var_6134: Tensor[(1485), float32]) -> (Tensor[(132), int16], Tensor[(11, 9, 15), float32], Tensor[(1485), float32]) {
  @func_6133(%var_6134) /* ty=(Tensor[(132), int16], Tensor[(11, 9, 15), float32], Tensor[(1485), float32]) */
}

def @func_8520() -> Tensor[(3, 16, 6), int64] {
  @func_8518() /* ty=Tensor[(3, 16, 6), int64] */
}

def @func_8254() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) {
  @func_8252() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) */
}

def @func_3315(%var_3295: Tensor[(384), uint32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(384), uint32], Tensor[(1, 64), float32], Tensor[(320), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), float32]) {
  %923 = cast(%var_3295, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %924 = cast(meta[relay.Constant][62] /* ty=Tensor[(1, 64), float32] */, dtype="float32") /* ty=Tensor[(1, 64), float32] */;
  %925 = cast(meta[relay.Constant][63] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %926 = reshape(%923, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %927 = reshape(%924, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %928 = reshape(%925, newshape=[80, 4]) /* ty=Tensor[(80, 4), float32] */;
  %929 = @func_1724(%926, %927, %928) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(384, 24), uint8], Tensor[(384), uint32], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(80, 4), float32]) */;
  %930 = cast(meta[relay.Constant][64] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %931 = reshape(%930, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %932 = @func_1901(%931) /* ty=(Tensor[(10, 2, 8), float64],) */;
  %933 = @func_3198() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
  %934 = @func_3144() /* ty=Tensor[(3, 16, 6), bool] */;
  %935 = @func_3144() /* ty=Tensor[(3, 16, 6), bool] */;
  %936 = %929.6;
  %937 = %932.0;
  %938 = %933.1;
  (%934, %935, %936, %var_3295, meta[relay.Constant][62] /* ty=Tensor[(1, 64), float32] */, meta[relay.Constant][63] /* ty=Tensor[(320), float32] */, %937, meta[relay.Constant][64] /* ty=Tensor[(160), float64] */, %938)
}

def @func_4421() -> (Tensor[(3, 16, 6), int64],) {
  %939 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
  %940 = %939.5;
  (%940,)
}

def @func_11037(%var_11000: Tensor[(24), uint32], %var_11001: Tensor[(384), uint32]) -> (Tensor[(10, 2, 13), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(2, 160), bool], Tensor[(24), uint32], Tensor[(4, 16), float32], Tensor[(3, 16, 6), bool], Tensor[(64), float32], Tensor[(3, 16, 6), float32]) {
  %941 = @func_8633() /* ty=(Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) */;
  %942 = cast(meta[relay.Constant][65] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %943 = cast(%var_11000, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %944 = cast(%var_11001, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %945 = cast(meta[relay.Constant][66] /* ty=Tensor[(2, 160), bool] */, dtype="bool") /* ty=Tensor[(2, 160), bool] */;
  %946 = reshape(%942, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %947 = reshape(%943, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %948 = reshape(%944, newshape=[384, 1]) /* ty=Tensor[(384, 1), uint32] */;
  %949 = reshape(%945, newshape=[8, 40]) /* ty=Tensor[(8, 40), bool] */;
  %950 = @func_4330(%946, %947, %948, %949) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384, 1), uint32], Tensor[(8, 40), bool]) */;
  %951 = cast(meta[relay.Constant][67] /* ty=Tensor[(4, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 16), float32] */;
  %952 = reshape(%951, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %953 = @func_4774(%952) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(384), uint32], Tensor[(24), uint32], Tensor[(2, 192), uint32], Tensor[(64), float32]) */;
  %954 = @func_5544() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
  %955 = %950.2;
  %956 = cast(%955, dtype="float32") /* ty=Tensor[(576), float32] */;
  %957 = reshape(%956, newshape=[36, 16]) /* ty=Tensor[(36, 16), float32] */;
  %958 = @func_9190(%957) /* ty=(Tensor[(4, 16, ?), int8], Tensor[(3, 16, 6), int64], Tensor[(495, 3), float32], Tensor[(64), float32], Tensor[(3, 16, 6), bool], Tensor[(4, 16, 315), int8], Tensor[(4, 16, ?), bool], Tensor[(3, 16, 6), float64], Tensor[(36, 16), float32]) */;
  %959 = %941.0;
  %960 = %953.3;
  %961 = %954.1;
  %962 = %958.3;
  %963 = @func_9035() /* ty=Tensor[(3, 16, 6), float32] */;
  (%959, %955, meta[relay.Constant][65] /* ty=Tensor[(576), float32] */, %var_11000, %var_11001, meta[relay.Constant][66] /* ty=Tensor[(2, 160), bool] */, %960, meta[relay.Constant][67] /* ty=Tensor[(4, 16), float32] */, %961, %962, %963)
}

def @func_5922() -> (Tensor[(3, 16, 6), bool],) {
  @func_5920() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_4492() -> (Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) {
  @func_4490() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */
}

def @func_2429() -> Tensor[(3, 16, 6), bool] {
  %965 = fn () -> Tensor[(3, 16, 6), bool] {
    %964 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
    %964.1
  };
  %965() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_7328() -> (Tensor[(3, 16, 6), bool],) {
  %968 = fn () -> (Tensor[(3, 16, 6), bool],) {
    %966 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %967 = %966.0;
    (%967,)
  };
  %968() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_8611(%var_8609: Tensor[(576), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32], Tensor[(40, 8), float32], Tensor[(576), float32], Tensor[(64), float32]) {
  @func_8608(%var_8609) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32], Tensor[(40, 8), float32], Tensor[(576), float32], Tensor[(64), float32]) */
}

def @func_11984() -> (Tensor[(3, 16, 6), bool],) {
  %969 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %970 = %969.0;
  (%970,)
}

def @func_4209() -> (Tensor[(12, 8, 9), float32],) {
  @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */
}

def @func_896(%var_895: Tensor[(10, 2, 13), bool]) -> (Tensor[(10, 2, 13), bool],) {
  %974 = fn (%var_881: Tensor[(10, 2, 13), bool]) -> (Tensor[(10, 2, 13), bool],) {
    %971 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %972 = cast(%var_881, dtype="bool") /* ty=Tensor[(10, 2, 13), bool] */;
    %973 = logical_and(%971, %972) /* ty=Tensor[(10, 2, 13), bool] */;
    (%973,)
  };
  %974(%var_895) /* ty=(Tensor[(10, 2, 13), bool],) */
}

def @func_13493() -> (Tensor[(3, 16, 6), float32],) {
  %975 = @func_8817() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */;
  %976 = %975.0;
  (%976,)
}

def @func_12516() -> (Tensor[(10, 2, 13), float64],) {
  %977 = @func_5452() /* ty=Tensor[(10, 2, 13), bool] */;
  %978 = cast(%977, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %979 = log(%978) /* ty=Tensor[(10, 2, 13), float32] */;
  %980 = cast(%979, dtype="float64") /* ty=Tensor[(10, 2, 13), float64] */;
  %981 = log2(%980) /* ty=Tensor[(10, 2, 13), float64] */;
  (%981,)
}

def @func_794(%var_792: Tensor[(1, 4, 16), float32], %var_793: Tensor[(5, 4, 16), float32]) -> (Tensor[(5, 4, 16), bool],) {
  %985 = fn (%var_778: Tensor[(1, 4, 16), float32], %var_779: Tensor[(5, 4, 16), float32]) -> (Tensor[(5, 4, 16), bool],) {
    %982 = cast(%var_778, dtype="bool") /* ty=Tensor[(1, 4, 16), bool] */;
    %983 = cast(%var_779, dtype="bool") /* ty=Tensor[(5, 4, 16), bool] */;
    %984 = less_equal(%982, %983) /* ty=Tensor[(5, 4, 16), bool] */;
    (%984,)
  };
  %985(%var_792, %var_793) /* ty=(Tensor[(5, 4, 16), bool],) */
}

def @func_10171() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  @func_10169() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */
}

def @func_3726() -> (Tensor[(3, 16, 6), float32],) {
  %988 = fn () -> (Tensor[(3, 16, 6), float32],) {
    %986 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
    %987 = %986.0;
    (%987,)
  };
  %988() /* ty=(Tensor[(3, 16, 6), float32],) */
}

def @func_9789() -> (Tensor[(3, 16, 6), bool],) {
  %991 = fn () -> (Tensor[(3, 16, 6), bool],) {
    %989 = @func_8053() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %990 = %989.0;
    (%990,)
  };
  %991() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_5200(%var_5198: Tensor[(576), float32], %var_5199: Tensor[(64), float32]) -> (Tensor[(12, 8, 9), float32], Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32]) {
  %1008 = fn (%var_5184: Tensor[(576), float32], %var_5185: Tensor[(64), float32]) -> (Tensor[(12, 8, 9), float32], Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32]) {
    %992 = @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */;
    %993 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %994 = cast(meta[relay.Constant][68] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %995 = cast(%var_5184, dtype="float32") /* ty=Tensor[(576), float32] */;
    %996 = cast(%var_5185, dtype="float32") /* ty=Tensor[(64), float32] */;
    %997 = reshape(%994, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float32] */;
    %998 = reshape(%995, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %999 = reshape(%996, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %1000 = @func_2501(%997, %998, %999) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) */;
    %1001 = %993.0;
    %1002 = cast(%1001, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
    %1003 = reshape(%1002, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
    %1004 = @func_3802(%1003) /* ty=(Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */;
    %1005 = %992.0;
    %1006 = %1000.3;
    %1007 = %1004.2;
    (%1005, %1001, %1006, meta[relay.Constant][68] /* ty=Tensor[(2112), float32] */, %var_5184, %var_5185, %1007)
  };
  %1008(%var_5198, %var_5199) /* ty=(Tensor[(12, 8, 9), float32], Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32]) */
}

def @func_8282() -> (Tensor[(3, 16, 6), float32],) {
  %1010 = fn () -> (Tensor[(3, 16, 6), float32],) {
    %1009 = @func_4240() /* ty=Tensor[(3, 16, 6), float32] */;
    (%1009,)
  };
  %1010() /* ty=(Tensor[(3, 16, 6), float32],) */
}

def @func_10966(%var_10964: Tensor[(8, 11, 9), float32]) -> (Tensor[(8, 11, 9), uint32],) {
  @func_10963(%var_10964) /* ty=(Tensor[(8, 11, 9), uint32],) */
}

def @func_1837(%var_1833: Tensor[(384), uint32], %var_1834: Tensor[(576), float32], %var_1835: Tensor[(64), float32], %var_1836: Tensor[(160, 2), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), bool], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(160, 2), float32], Tensor[(9, 16, 4), float32], Tensor[(8, 16, 3), uint32]) {
  %1051 = fn (%var_1790: Tensor[(384), uint32], %var_1814: Tensor[(576), float32], %var_1815: Tensor[(64), float32], %var_1816: Tensor[(160, 2), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), bool], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(160, 2), float32], Tensor[(9, 16, 4), float32], Tensor[(8, 16, 3), uint32]) {
    %1011 = cast(meta[relay.Constant][69] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %1012 = cast(%var_1790, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %1013 = reshape(%1011, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
    %1014 = reshape(%1012, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %1015 = cast(%var_1814, dtype="float32") /* ty=Tensor[(576), float32] */;
    %1016 = cast(meta[relay.Constant][69] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %1017 = @func_327(%1013, %1014) /* ty=Tensor[(8, 16, 3), uint32] */;
    %1018 = cast(%1017, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
    %1019 = cast(%var_1815, dtype="float32") /* ty=Tensor[(64), float32] */;
    %1020 = cast(%var_1816, dtype="float32") /* ty=Tensor[(160, 2), float32] */;
    %1021 = cast(%var_1790, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %1022 = reshape(%1015, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
    %1023 = reshape(%1016, newshape=[24]) /* ty=Tensor[(24), uint32] */;
    %1024 = reshape(%1018, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %1025 = reshape(%1019, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %1026 = reshape(%1020, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %1027 = reshape(%1021, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %1028 = @func_1076(%1022, %1023, %1024, %1025, %1026, %1027) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
    %1029 = cast(%var_1814, dtype="float32") /* ty=Tensor[(576), float32] */;
    %1030 = cast(meta[relay.Constant][69] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %1031 = cast(%1017, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
    %1032 = cast(%var_1815, dtype="float32") /* ty=Tensor[(64), float32] */;
    %1033 = cast(%var_1816, dtype="float32") /* ty=Tensor[(160, 2), float32] */;
    %1034 = cast(%1017, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
    %1035 = reshape(%1029, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
    %1036 = reshape(%1030, newshape=[24]) /* ty=Tensor[(24), uint32] */;
    %1037 = reshape(%1031, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %1038 = reshape(%1032, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %1039 = reshape(%1033, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %1040 = reshape(%1034, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %1041 = @func_1076(%1035, %1036, %1037, %1038, %1039, %1040) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
    %1042 = cast(%1017, dtype="uint32") /* ty=Tensor[(8, 16, 3), uint32] */;
    %1043 = reshape(%1042, newshape=[384, 1]) /* ty=Tensor[(384, 1), uint32] */;
    %1044 = @func_1574(%1043) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(384, 24), uint8]) */;
    %1045 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
    %1046 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
    %1047 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
    %1048 = %1028.1;
    %1049 = %1041.0;
    %1050 = %1044.2;
    (%1045, %1046, %1017, meta[relay.Constant][69] /* ty=Tensor[(24), uint32] */, %var_1790, %1047, %1048, %var_1814, %var_1815, %var_1816, %1049, %1050)
  };
  %1051(%var_1833, %var_1834, %var_1835, %var_1836) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), bool], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(160, 2), float32], Tensor[(9, 16, 4), float32], Tensor[(8, 16, 3), uint32]) */
}

def @func_7899() -> (Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) {
  %1058 = fn () -> (Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) {
    %1052 = @func_6329() /* ty=(Tensor[(6, 11, 5), int16],) */;
    %1053 = @func_3234() /* ty=(Tensor[(10, 2, 13), bool],) */;
    %1054 = @func_5920() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %1055 = %1052.0;
    %1056 = %1053.0;
    %1057 = %1054.0;
    (%1055, %1056, %1057)
  };
  %1058() /* ty=(Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), bool]) */
}

def @func_9762() -> (Tensor[(320), float32], Tensor[(64), float32]) {
  @func_9760() /* ty=(Tensor[(320), float32], Tensor[(64), float32]) */
}

def @func_4681(%var_4678: Tensor[(12, 48), float32], %var_4679: Tensor[(24), uint32], %var_4680: Tensor[(1, 384), uint32]) -> (Tensor[(12, 8, 9), float64], Tensor[(320), float32], Tensor[(12, 48), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(320), bool], Tensor[(3, 16, 6), bool]) {
  @func_4676(%var_4678, %var_4679, %var_4680) /* ty=(Tensor[(12, 8, 9), float64], Tensor[(320), float32], Tensor[(12, 48), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(320), bool], Tensor[(3, 16, 6), bool]) */
}

def @func_1869(%var_1868: Tensor[(11, 4, 3), int16]) -> (Tensor[(11, 4, 3), float64],) {
  %1069 = fn (%var_1848: Tensor[(11, 4, 3), int16]) -> (Tensor[(11, 4, 3), float64],) {
    %1059 = cast(meta[relay.Constant][70] /* ty=Tensor[(11, 4, 3), int16] */, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
    %1060 = shape_of(%var_1848, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1061 = cast(%var_1848, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
    %1062 = dyn.reshape(%1059, %1060, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1063 = less(%1061, %1062) /* ty=Tensor[(11, 4, 3), bool] */;
    %1064 = cast(%1063, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
    %1065 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(11, 4, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1066 = cast(meta[relay.Constant][70] /* ty=Tensor[(11, 4, 3), int16] */, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
    %1067 = dyn.reshape(%1064, %1065, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1068 = power(%1066, %1067) /* ty=Tensor[(11, 4, 3), float64] */;
    (%1068,)
  };
  %1069(%var_1868) /* ty=(Tensor[(11, 4, 3), float64],) */
}

def @func_2377(%var_2337: Tensor[(24, 16), uint32], %var_2339: Tensor[(64), float32], %var_2340: Tensor[(4, 80), float32], %var_2346: Tensor[(160), float64]) -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int64], Tensor[(9, 16, 4), float32], Tensor[(24, 16), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(4, 80), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), bool]) {
  %1070 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1071 = %1070.0;
  %1072 = cast(%1071, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %1073 = reshape(%1072, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float64] */;
  %1074 = @func_2261(%1073) /* ty=(Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) */;
  %1075 = cast(%var_2337, dtype="uint32") /* ty=Tensor[(24, 16), uint32] */;
  %1076 = cast(meta[relay.Constant][71] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1077 = cast(%var_2339, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1078 = cast(%var_2340, dtype="float32") /* ty=Tensor[(4, 80), float32] */;
  %1079 = reshape(%1075, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1080 = reshape(%1076, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1081 = reshape(%1077, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1082 = reshape(%1078, newshape=[160, 2]) /* ty=Tensor[(160, 2), float32] */;
  %1083 = @func_1832(%1079, %1080, %1081, %1082) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), bool], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(160, 2), float32], Tensor[(9, 16, 4), float32], Tensor[(8, 16, 3), uint32]) */;
  %1084 = cast(%var_2346, dtype="float64") /* ty=Tensor[(160), float64] */;
  %1085 = reshape(%1084, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float64] */;
  %1086 = @func_1901(%1085) /* ty=(Tensor[(10, 2, 8), float64],) */;
  %1087 = %1074.1;
  %1088 = %1083.10;
  %1089 = %1086.0;
  %1090 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1071, %1087, %1088, %var_2337, meta[relay.Constant][71] /* ty=Tensor[(576), float32] */, %var_2339, %var_2340, %1089, %var_2346, %1090)
}

def @func_6811() -> (Tensor[(11, 4, 3), float64],) {
  @func_6809() /* ty=(Tensor[(11, 4, 3), float64],) */
}

def @func_11439(%var_11412: Tensor[(8, 5, 11), uint16]) -> Tensor[(8, 5, 11), uint16] {
  %1091 = cast(%var_11412, dtype="uint16") /* ty=Tensor[(8, 5, 11), uint16] */;
  %1092 = shape_of(meta[relay.Constant][72] /* ty=Tensor[(8, 5, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1093 = cast(meta[relay.Constant][72] /* ty=Tensor[(8, 5, 11), uint16] */, dtype="uint16") /* ty=Tensor[(8, 5, 11), uint16] */;
  %1094 = dyn.reshape(%1091, %1092, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%1093, %1094) /* ty=Tensor[(8, 5, 11), uint16] */
}

def @func_5415(%var_5411: Tensor[(576), float32], %var_5412: Tensor[(64), float32], %var_5413: Tensor[(132), int16], %var_5414: Tensor[(12, 8, 9), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(64), float32], Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), int32], Tensor[(132), int16], Tensor[(12, 8, 9), float64]) {
  @func_5409(%var_5411, %var_5412, %var_5413, %var_5414) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(64), float32], Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), int32], Tensor[(132), int16], Tensor[(12, 8, 9), float64]) */
}

def @func_8395() -> Tensor[(3, 16, 6), bool] {
  @func_8393() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_7279() -> (Tensor[(3, 16, 6), float32], Tensor[(1, 24), uint32], Tensor[(?, 546), int16]) {
  %1095 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
  %1096 = cast(meta[relay.Constant][73] /* ty=Tensor[(1, 546), float32] */, dtype="float32") /* ty=Tensor[(1, 546), float32] */;
  %1097 = cast(meta[relay.Constant][73] /* ty=Tensor[(1, 546), float32] */, dtype="float32") /* ty=Tensor[(1, 546), float32] */;
  %1098 = reshape(%1096, newshape=[3, 13, 14]) /* ty=Tensor[(3, 13, 14), float32] */;
  %1099 = reshape(%1097, newshape=[3, 13, 14]) /* ty=Tensor[(3, 13, 14), float32] */;
  %1100 = @func_7024(%1098, %1099) /* ty=(Tensor[(3, 13, 14), float32], Tensor[(3, 13, 14), float64]) */;
  %1101 = %1100.0;
  %1102 = cast(%1101, dtype="int16") /* ty=Tensor[(3, 13, 14), int16] */;
  %1103 = shape_of(meta[relay.Constant][73] /* ty=Tensor[(1, 546), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1104 = cast(meta[relay.Constant][73] /* ty=Tensor[(1, 546), float32] */, dtype="int16") /* ty=Tensor[(1, 546), int16] */;
  %1105 = dyn.reshape(%1102, %1103, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1106 = @func_4076() /* ty=Tensor[(3, 16, 6), float32] */;
  %1107 = %1095.2;
  %1108 = logical_xor(%1104, %1105) /* ty=Tensor[(?, 546), int16] */;
  (%1106, %1107, %1108)
}

def @func_12768() -> (Tensor[(576), float32], Tensor[(3, 16, 6), bool]) {
  %1109 = @func_8252() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) */;
  %1110 = %1109.2;
  %1111 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1110, %1111)
}

def @func_10342(%var_10340: Tensor[(384), uint32], %var_10341: Tensor[(2, 160), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(288, 2), float32], Tensor[(2, 160), float32], Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) {
  @func_10338(%var_10340, %var_10341) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(288, 2), float32], Tensor[(2, 160), float32], Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */
}

def @func_3921() -> Tensor[(3, 16, 6), bool] {
  @func_3919() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_4815() -> (Tensor[(3, 16, 6), bool],) {
  %1112 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1113 = %1112.0;
  (%1113,)
}

def @func_10264() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(10, 2, 13), bool], Tensor[(64), bool]) {
  @func_10262() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(10, 2, 13), bool], Tensor[(64), bool]) */
}

def @func_5967() -> (Tensor[(3, 16, 6), float32],) {
  %1114 = @func_3725() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %1115 = %1114.0;
  (%1115,)
}

def @func_12618(%var_12616: Tensor[(11, 12, 14), float32], %var_12617: Tensor[(11, 12, 14), float32]) -> (Tensor[(11, 12, 14), float32], Tensor[(12, 8, 9), bool]) {
  %1123 = fn (%var_12605: Tensor[(11, 12, 14), float32], %var_12606: Tensor[(11, 12, 14), float32]) -> (Tensor[(11, 12, 14), float32], Tensor[(12, 8, 9), bool]) {
    %1116 = cast(%var_12606, dtype="float32") /* ty=Tensor[(11, 12, 14), float32] */;
    %1117 = shape_of(%var_12605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1118 = cast(%var_12605, dtype="float32") /* ty=Tensor[(11, 12, 14), float32] */;
    %1119 = dyn.reshape(%1116, %1117, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1120 = @func_10908() /* ty=(Tensor[(12, 8, 9), bool], Tensor[(5, 4, 16), float64], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(320), bool]) */;
    %1121 = maximum(%1118, %1119) /* ty=Tensor[(11, 12, 14), float32] */;
    %1122 = %1120.0;
    (%1121, %1122)
  };
  %1123(%var_12616, %var_12617) /* ty=(Tensor[(11, 12, 14), float32], Tensor[(12, 8, 9), bool]) */
}

def @func_4480() -> (Tensor[(3, 16, 6), float32],) {
  %1125 = fn () -> (Tensor[(3, 16, 6), float32],) {
    %1124 = @func_3370() /* ty=Tensor[(3, 16, 6), float32] */;
    (%1124,)
  };
  %1125() /* ty=(Tensor[(3, 16, 6), float32],) */
}

def @func_7721() -> (Tensor[(3, 16, 6), float32],) {
  %1127 = fn () -> (Tensor[(3, 16, 6), float32],) {
    %1126 = @func_7610() /* ty=Tensor[(3, 16, 6), float32] */;
    (%1126,)
  };
  %1127() /* ty=(Tensor[(3, 16, 6), float32],) */
}

def @func_11082() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int64]) {
  %1128 = @func_3919() /* ty=Tensor[(3, 16, 6), bool] */;
  %1129 = cast(%1128, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %1130 = reshape(%1129, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float64] */;
  %1131 = @func_2261(%1130) /* ty=(Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64]) */;
  %1132 = %1131.1;
  (%1128, %1132)
}

def @func_4544() -> Tensor[(3, 16, 6), bool] {
  %1133 = fn () -> Tensor[(3, 16, 6), bool] {
    @func_2598() /* ty=Tensor[(3, 16, 6), bool] */
  };
  %1133() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_11100() -> (Tensor[(3, 16, 6), int64],) {
  %1134 = @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */;
  %1135 = %1134.0;
  (%1135,)
}

def @func_11917() -> (Tensor[(11, 4, 3), bool],) {
  %1136 = @func_10279() /* ty=Tensor[(11, 4, 3), bool] */;
  (%1136,)
}

def @func_1576(%var_1575: Tensor[(384, 1), uint32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(384, 24), uint8]) {
  %1148 = fn (%var_1564: Tensor[(384, 1), uint32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(384, 24), uint8]) {
    %1137 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
    %1138 = cast(meta[relay.Constant][74] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %1139 = cast(%var_1564, dtype="uint32") /* ty=Tensor[(384, 1), uint32] */;
    %1140 = reshape(%1138, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), uint32] */;
    %1141 = reshape(%1139, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %1142 = cast(%var_1564, dtype="uint8") /* ty=Tensor[(384, 1), uint8] */;
    %1143 = cast(meta[relay.Constant][74] /* ty=Tensor[(24), uint32] */, dtype="uint8") /* ty=Tensor[(24), uint8] */;
    %1144 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
    %1145 = %1137.0;
    %1146 = @func_327(%1140, %1141) /* ty=Tensor[(8, 16, 3), uint32] */;
    %1147 = minimum(%1142, %1143) /* ty=Tensor[(384, 24), uint8] */;
    (%1144, %1145, %1146, %1147)
  };
  %1148(%var_1575) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(384, 24), uint8]) */
}

def @func_13687() -> (Tensor[(3, 16, 6), bool], Tensor[(?, 546), float32]) {
  %1154 = fn () -> (Tensor[(3, 16, 6), bool], Tensor[(?, 546), float32]) {
    %1149 = @func_9517() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(?, 546), int16]) */;
    %1150 = %1149.1;
    %1151 = cast(%1150, dtype="float32") /* ty=Tensor[(?, 546), float32] */;
    %1152 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
    %1153 = acos(%1151) /* ty=Tensor[(?, 546), float32] */;
    (%1152, %1153)
  };
  %1154() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(?, 546), float32]) */
}

def @func_7986(%var_7984: Tensor[(5, 7, 9), float64]) -> (Tensor[(5, 7, 9), float64], Tensor[(11, 9, 15), float32], Tensor[(495, 3), float32]) {
  @func_7983(%var_7984) /* ty=(Tensor[(5, 7, 9), float64], Tensor[(11, 9, 15), float32], Tensor[(495, 3), float32]) */
}

def @func_7774() -> (Tensor[(3, 16, 6), bool],) {
  %1155 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1156 = %1155.0;
  (%1156,)
}

def @func_8966() -> (Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32]) {
  @func_8964() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(11, 9, 14), int32], Tensor[(1386), int32], Tensor[(3, 16, 6), float32]) */
}

def @func_11327() -> (Tensor[(260), bool], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) {
  %1157 = @func_2689() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) */;
  %1158 = cast(meta[relay.Constant][75] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %1159 = reshape(%1158, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int16] */;
  %1160 = @func_1867(%1159) /* ty=(Tensor[(11, 4, 3), float64],) */;
  %1161 = %1157.2;
  %1162 = %1160.0;
  (%1161, %1162, meta[relay.Constant][75] /* ty=Tensor[(132), int16] */)
}

def @func_4197() -> (Tensor[(3, 16, 6), bool],) {
  %1165 = fn () -> (Tensor[(3, 16, 6), bool],) {
    %1163 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %1164 = %1163.0;
    (%1164,)
  };
  %1165() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_11274(%var_11190: Tensor[(576), float32], %var_11198: Tensor[(12, 8, 9), float32]) -> (Tensor[(64), float32], Tensor[(576), float32], Tensor[(12, 8, 9), int8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(384), uint32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(132), int16], Tensor[(132), float32]) {
  %1166 = cast(%var_11190, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1167 = reshape(%1166, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1168 = @func_5884(%1167) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320, 1), float32]) */;
  %1169 = @func_4490() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %1170 = %1169.1;
  %1171 = cast(%var_11198, dtype="int8") /* ty=Tensor[(12, 8, 9), int8] */;
  %1172 = shape_of(%1170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1173 = cast(%1170, dtype="int8") /* ty=Tensor[(12, 8, 9), int8] */;
  %1174 = dyn.reshape(%1171, %1172, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1175 = cast(meta[relay.Constant][76] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %1176 = cast(meta[relay.Constant][77] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %1177 = reshape(%1175, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1178 = reshape(%1176, newshape=[2, 160]) /* ty=Tensor[(2, 160), float32] */;
  %1179 = @func_10338(%1177, %1178) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(64), float32], Tensor[(384), uint32], Tensor[(288, 2), float32], Tensor[(2, 160), float32], Tensor[(6, 11, 5), int16], Tensor[(10, 2, 13), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */;
  %1180 = %1179.8;
  %1181 = cast(%1180, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %1182 = cast(meta[relay.Constant][78] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %1183 = reshape(%1181, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float32] */;
  %1184 = reshape(%1182, newshape=[132]) /* ty=Tensor[(132), int16] */;
  %1185 = @func_2099(%1183, %1184) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */;
  %1186 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
  %1187 = %1168.3;
  %1188 = bitwise_or(%1173, %1174) /* ty=Tensor[(12, 8, 9), int8] */;
  %1189 = @func_4543() /* ty=Tensor[(3, 16, 6), bool] */;
  %1190 = %1185.2;
  %1191 = %1186.2;
  (%1187, %var_11190, %1188, %1189, %1180, meta[relay.Constant][76] /* ty=Tensor[(384), uint32] */, meta[relay.Constant][77] /* ty=Tensor[(320), float32] */, %1190, meta[relay.Constant][78] /* ty=Tensor[(132), int16] */, %1191)
}

def @func_2914(%var_2913: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), float64],) {
  %1199 = fn (%var_2907: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), float64],) {
    %1192 = @func_2822() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %1193 = %1192.0;
    %1194 = cast(%var_2907, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
    %1195 = shape_of(%1193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1196 = cast(%1193, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
    %1197 = dyn.reshape(%1194, %1195, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1198 = floor_divide(%1196, %1197) /* ty=Tensor[(3, 16, 6), float64] */;
    (%1198,)
  };
  %1199(%var_2913) /* ty=(Tensor[(3, 16, 6), float64],) */
}

def @func_13478() -> (Tensor[(12, 8, 9), float32], Tensor[(3, 16, 6), float32]) {
  %1200 = @func_4490() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %1201 = @func_13427() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32]) */;
  %1202 = %1200.1;
  %1203 = %1201.1;
  (%1202, %1203)
}

def @func_4817() -> (Tensor[(3, 16, 6), bool],) {
  @func_4815() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_5614(%var_5557: Tensor[(576), float32], %var_5559: Tensor[(320), float32]) -> (Tensor[(3, 16, 6), int32], Tensor[(3, 16, 6), bool], Tensor[(48, 8), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  %1204 = @func_4855() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
  %1205 = cast(meta[relay.Constant][79] /* ty=Tensor[(48, 8), uint32] */, dtype="uint32") /* ty=Tensor[(48, 8), uint32] */;
  %1206 = cast(%var_5557, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1207 = cast(meta[relay.Constant][80] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1208 = cast(%var_5559, dtype="float32") /* ty=Tensor[(320), float32] */;
  %1209 = reshape(%1205, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1210 = reshape(%1206, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1211 = reshape(%1207, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1212 = reshape(%1208, newshape=[160, 2]) /* ty=Tensor[(160, 2), float32] */;
  %1213 = @func_1832(%1209, %1210, %1211, %1212) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), bool], Tensor[(24), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(160, 2), float32], Tensor[(9, 16, 4), float32], Tensor[(8, 16, 3), uint32]) */;
  %1214 = @func_4855() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
  %1215 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1216 = %1204.1;
  %1217 = %1213.0;
  %1218 = %1214.2;
  %1219 = @func_4076() /* ty=Tensor[(3, 16, 6), float32] */;
  %1220 = %1215.0;
  (%1216, %1217, meta[relay.Constant][79] /* ty=Tensor[(48, 8), uint32] */, %var_5557, meta[relay.Constant][80] /* ty=Tensor[(64), float32] */, %var_5559, %1218, %1219, %1220)
}

def @func_6457() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  @func_6455() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */
}

def @func_6556(%var_6554: Tensor[(11, 9, 14), int32], %var_6555: Tensor[(11, 9, 14), int32]) -> (Tensor[(11, 9, 14), int32],) {
  @func_6552(%var_6554, %var_6555) /* ty=(Tensor[(11, 9, 14), int32],) */
}

def @func_7776() -> (Tensor[(3, 16, 6), bool],) {
  @func_7774() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_6223() -> (Tensor[(3, 16, 6), bool], Tensor[(12, 8, 9), float32], Tensor[(12, 8, 9), float32]) {
  @func_6221() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(12, 8, 9), float32], Tensor[(12, 8, 9), float32]) */
}

def @func_6133(%var_6129: Tensor[(1485), float32]) -> (Tensor[(132), int16], Tensor[(11, 9, 15), float32], Tensor[(1485), float32]) {
  %1221 = @func_4855() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int32], Tensor[(132), int16]) */;
  %1222 = cast(%var_6129, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %1223 = reshape(%1222, newshape=[11, 9, 15]) /* ty=Tensor[(11, 9, 15), float32] */;
  %1224 = @func_3839(%1223) /* ty=(Tensor[(11, 9, 15), float32], Tensor[(3, 16, 6), bool]) */;
  %1225 = %1221.2;
  %1226 = %1224.0;
  (%1225, %1226, %var_6129)
}

def @func_4597() -> (Tensor[(3, 16, 6), bool],) {
  %1228 = fn () -> (Tensor[(3, 16, 6), bool],) {
    %1227 = @func_3919() /* ty=Tensor[(3, 16, 6), bool] */;
    (%1227,)
  };
  %1228() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_12942() -> (Tensor[(3, 16, 6), int64], Tensor[(3, 16, 6), int64]) {
  @func_12940() /* ty=(Tensor[(3, 16, 6), int64], Tensor[(3, 16, 6), int64]) */
}

def @func_9872(%var_9870: Tensor[(576), float32]) -> (Tensor[(6, 11, 5), int16], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(24), uint32], Tensor[(6, 64), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32]) {
  @func_9869(%var_9870) /* ty=(Tensor[(6, 11, 5), int16], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(24), uint32], Tensor[(6, 64), uint32], Tensor[(8, 16, 3), uint32], Tensor[(576), float32]) */
}

def @func_4801() -> (Tensor[(11, 4, 3), float64], Tensor[(1, 160), float64]) {
  %1233 = fn () -> (Tensor[(11, 4, 3), float64], Tensor[(1, 160), float64]) {
    %1229 = @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */;
    %1230 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
    %1231 = %1229.1;
    %1232 = %1230.7;
    (%1231, %1232)
  };
  %1233() /* ty=(Tensor[(11, 4, 3), float64], Tensor[(1, 160), float64]) */
}

def @func_8434() -> (Tensor[(14, 7, 6), float64], Tensor[(3, 16, 6), bool]) {
  %1237 = fn () -> (Tensor[(14, 7, 6), float64], Tensor[(3, 16, 6), bool]) {
    %1234 = cast(meta[relay.Constant][81] /* ty=Tensor[(14, 7, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 7, 6), float64] */;
    %1235 = tan(%1234) /* ty=Tensor[(14, 7, 6), float64] */;
    %1236 = @func_3144() /* ty=Tensor[(3, 16, 6), bool] */;
    (%1235, %1236)
  };
  %1237() /* ty=(Tensor[(14, 7, 6), float64], Tensor[(3, 16, 6), bool]) */
}

def @func_7119() -> Tensor[(11, 4, 3), uint8] {
  %1239 = fn () -> Tensor[(11, 4, 3), uint8] {
    %1238 = @func_5074() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), bool]) */;
    %1238.1
  };
  %1239() /* ty=Tensor[(11, 4, 3), uint8] */
}

def @func_6221() -> (Tensor[(3, 16, 6), bool], Tensor[(12, 8, 9), float32], Tensor[(12, 8, 9), float32]) {
  %1240 = @func_4207() /* ty=(Tensor[(12, 8, 9), float32],) */;
  %1241 = @func_4920() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
  %1242 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  %1243 = %1240.0;
  %1244 = %1241.2;
  (%1242, %1243, %1244)
}

def @func_12597() -> (Tensor[(3, 16, 6), bool], Tensor[(11, 4, 3), bool]) {
  @func_12595() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 4, 3), bool]) */
}

def @func_12681(%var_12680: Tensor[(72, 8), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(36, 16), float32], Tensor[(72, 8), float32]) {
  %1252 = fn (%var_12668: Tensor[(72, 8), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(36, 16), float32], Tensor[(72, 8), float32]) {
    %1245 = @func_8025() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
    %1246 = cast(%var_12668, dtype="float32") /* ty=Tensor[(72, 8), float32] */;
    %1247 = reshape(%1246, newshape=[36, 16]) /* ty=Tensor[(36, 16), float32] */;
    %1248 = @func_9190(%1247) /* ty=(Tensor[(4, 16, ?), int8], Tensor[(3, 16, 6), int64], Tensor[(495, 3), float32], Tensor[(64), float32], Tensor[(3, 16, 6), bool], Tensor[(4, 16, 315), int8], Tensor[(4, 16, ?), bool], Tensor[(3, 16, 6), float64], Tensor[(36, 16), float32]) */;
    %1249 = %1245.0;
    %1250 = @func_5452() /* ty=Tensor[(10, 2, 13), bool] */;
    %1251 = %1248.8;
    (%1249, %1250, %1251, %var_12668)
  };
  %1252(%var_12680) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(36, 16), float32], Tensor[(72, 8), float32]) */
}

def @func_5409(%var_5362: Tensor[(576), float32], %var_5363: Tensor[(64), float32], %var_5378: Tensor[(132), int16], %var_5393: Tensor[(12, 8, 9), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(64), float32], Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), int32], Tensor[(132), int16], Tensor[(12, 8, 9), float64]) {
  %1253 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
  %1254 = cast(%1253, dtype="bool") /* ty=Tensor[(3, 16, 6), bool] */;
  %1255 = reshape(%1254, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), bool] */;
  %1256 = @func_3802(%1255) /* ty=(Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */;
  %1257 = cast(%var_5378, dtype="int16") /* ty=Tensor[(132), int16] */;
  %1258 = reshape(%1257, newshape=[132, 1]) /* ty=Tensor[(132, 1), int16] */;
  %1259 = @func_4440(%1258) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(132, 1), int16]) */;
  %1260 = cast(%var_5362, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1261 = cast(%var_5363, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1262 = reshape(%1260, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1263 = reshape(%1261, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1264 = @func_5197(%1262, %1263) /* ty=(Tensor[(12, 8, 9), float32], Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(2112), float32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(3, 16, 6), float32]) */;
  %1265 = %1264.0;
  %1266 = cast(%1265, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %1267 = log10(%1266) /* ty=Tensor[(12, 8, 9), float64] */;
  %1268 = cast(%var_5393, dtype="uint16") /* ty=Tensor[(12, 8, 9), uint16] */;
  %1269 = shape_of(%1267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1270 = cast(%1267, dtype="uint16") /* ty=Tensor[(12, 8, 9), uint16] */;
  %1271 = dyn.reshape(%1268, %1269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1272 = bitwise_xor(%1270, %1271) /* ty=Tensor[(12, 8, 9), uint16] */;
  %1273 = cast(%1272, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %1274 = %1256.0;
  %1275 = %1259.1;
  %1276 = sin(%1273) /* ty=Tensor[(12, 8, 9), float64] */;
  (%1253, %var_5362, %var_5363, %1274, %1275, %var_5378, %1276)
}

def @func_10460(%var_10458: Tensor[(4, 7, 14), float64]) -> (Tensor[(4, 7, 14), float32],) {
  @func_10457(%var_10458) /* ty=(Tensor[(4, 7, 14), float32],) */
}

def @func_4078() -> Tensor[(3, 16, 6), float32] {
  @func_4076() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_13735() -> (Tensor[(3, 16, 6), float32],) {
  @func_13733() /* ty=(Tensor[(3, 16, 6), float32],) */
}

def @func_8027() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  @func_8025() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */
}

def @func_5920() -> (Tensor[(3, 16, 6), bool],) {
  %1277 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1277,)
}

def @func_8714() -> (Tensor[(3, 16, 6), bool],) {
  @func_8712() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_2383(%var_2379: Tensor[(24, 16), uint32], %var_2380: Tensor[(64), float32], %var_2381: Tensor[(4, 80), float32], %var_2382: Tensor[(160), float64]) -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int64], Tensor[(9, 16, 4), float32], Tensor[(24, 16), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(4, 80), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), bool]) {
  @func_2377(%var_2379, %var_2380, %var_2381, %var_2382) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int64], Tensor[(9, 16, 4), float32], Tensor[(24, 16), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(4, 80), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), bool]) */
}

def @func_9684() -> Tensor[(3, 16, 6), bool] {
  %1278 = @func_5920() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1278.0
}

def @func_4124() -> (Tensor[(3, 16, 6), bool],) {
  @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_12770() -> (Tensor[(576), float32], Tensor[(3, 16, 6), bool]) {
  @func_12768() /* ty=(Tensor[(576), float32], Tensor[(3, 16, 6), bool]) */
}

def @func_12595() -> (Tensor[(3, 16, 6), bool], Tensor[(11, 4, 3), bool]) {
  %1279 = @func_6963() /* ty=Tensor[(3, 16, 6), bool] */;
  %1280 = @func_10279() /* ty=Tensor[(11, 4, 3), bool] */;
  (%1279, %1280)
}

def @func_12309() -> Tensor[(3, 16, 6), bool] {
  %1281 = @func_3507() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(1, 24), uint32], Tensor[(384), uint32], Tensor[(3, 16, 6), uint32], Tensor[(3, 16, 6), int64], Tensor[(10, 2, 8), float64], Tensor[(1, 160), float64]) */;
  %1281.0
}

def @func_8185() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(6, 11, 5), int16]) {
  %1282 = @func_4479() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %1283 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1284 = @func_6329() /* ty=(Tensor[(6, 11, 5), int16],) */;
  %1285 = %1282.0;
  %1286 = @func_5975() /* ty=Tensor[(3, 16, 6), bool] */;
  %1287 = %1283.1;
  %1288 = %1284.0;
  (%1285, %1286, %1287, %1288)
}

def @func_3463() -> (Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) {
  @func_3461() /* ty=(Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) */
}

def @func_6105() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), int32], Tensor[(576), float32], Tensor[(320), float32]) {
  %1289 = @func_4122() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1290 = cast(meta[relay.Constant][82] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1291 = cast(meta[relay.Constant][83] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %1292 = reshape(%1290, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1293 = reshape(%1291, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %1294 = @func_5614(%1292, %1293) /* ty=(Tensor[(3, 16, 6), int32], Tensor[(3, 16, 6), bool], Tensor[(48, 8), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1295 = %1289.0;
  %1296 = %1294.0;
  (%1295, %1296, meta[relay.Constant][82] /* ty=Tensor[(576), float32] */, meta[relay.Constant][83] /* ty=Tensor[(320), float32] */)
}

def @func_12886() -> (Tensor[(3, 16, 6), bool],) {
  %1298 = fn () -> (Tensor[(3, 16, 6), bool],) {
    %1297 = @func_12018() /* ty=Tensor[(3, 16, 6), bool] */;
    (%1297,)
  };
  %1298() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_5969() -> (Tensor[(3, 16, 6), float32],) {
  @func_5967() /* ty=(Tensor[(3, 16, 6), float32],) */
}

def @func_2758(%var_2755: Tensor[(6, 96), float32], %var_2756: Tensor[(64), float32], %var_2757: Tensor[(320), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(6, 96), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32]) {
  @func_2753(%var_2755, %var_2756, %var_2757) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(6, 96), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32]) */
}

def @func_3543() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
  %1302 = fn () -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) {
    %1299 = @func_3198() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float64], Tensor[(3, 16, 6), bool]) */;
    %1300 = %1299.1;
    %1301 = @func_2524() /* ty=Tensor[(3, 16, 6), bool] */;
    (%1300, %1301)
  };
  %1302() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */
}

def @func_8187() -> (Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(6, 11, 5), int16]) {
  @func_8185() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(6, 11, 5), int16]) */
}

def @func_11352() -> Tensor[(9, 3, 13), float64] {
  %1304 = fn () -> Tensor[(9, 3, 13), float64] {
    %1303 = cast(meta[relay.Constant][84] /* ty=Tensor[(9, 3, 13), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
    sqrt(%1303) /* ty=Tensor[(9, 3, 13), float64] */
  };
  %1304() /* ty=Tensor[(9, 3, 13), float64] */
}

def @func_5545() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  %1309 = fn () -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
    %1305 = @func_4596() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %1306 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
    %1307 = %1305.0;
    %1308 = %1306.0;
    (%1307, %1308)
  };
  %1309() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */
}

def @func_11484(%var_11483: Tensor[(576), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), int8], Tensor[(576), float32], Tensor[(864), float32]) {
  %1318 = fn (%var_11479: Tensor[(576), float32]) -> (Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), int8], Tensor[(576), float32], Tensor[(864), float32]) {
    %1310 = @func_4920() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), float32]) */;
    %1311 = cast(%var_11479, dtype="float32") /* ty=Tensor[(576), float32] */;
    %1312 = cast(meta[relay.Constant][85] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
    %1313 = reshape(%1311, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %1314 = reshape(%1312, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), float32] */;
    %1315 = @func_11274(%1313, %1314) /* ty=(Tensor[(64), float32], Tensor[(576), float32], Tensor[(12, 8, 9), int8], Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(384), uint32], Tensor[(320), float32], Tensor[(132), int16], Tensor[(132), int16], Tensor[(132), float32]) */;
    %1316 = %1310.1;
    %1317 = %1315.2;
    (%1316, %1317, %var_11479, meta[relay.Constant][85] /* ty=Tensor[(864), float32] */)
  };
  %1318(%var_11483) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(12, 8, 9), int8], Tensor[(576), float32], Tensor[(864), float32]) */
}

def @func_4777(%var_4775: Tensor[(64), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(384), uint32], Tensor[(24), uint32], Tensor[(2, 192), uint32], Tensor[(64), float32]) {
  @func_4774(%var_4775) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(384), uint32], Tensor[(24), uint32], Tensor[(2, 192), uint32], Tensor[(64), float32]) */
}

def @func_5887(%var_5885: Tensor[(576), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320, 1), float32]) {
  @func_5884(%var_5885) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320, 1), float32]) */
}

def @func_10280() -> Tensor[(11, 4, 3), bool] {
  %1320 = fn () -> Tensor[(11, 4, 3), bool] {
    %1319 = @func_5074() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), bool]) */;
    %1319.2
  };
  %1320() /* ty=Tensor[(11, 4, 3), bool] */
}

def @func_8025() -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) {
  %1321 = @func_6875() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1322 = %1321.0;
  %1323 = @func_6963() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1322, %1323)
}

def @func_4774(%var_4756: Tensor[(64), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(384), uint32], Tensor[(24), uint32], Tensor[(2, 192), uint32], Tensor[(64), float32]) {
  %1324 = @func_2536() /* ty=(Tensor[(3, 16, 6), bool],) */;
  %1325 = @func_3144() /* ty=Tensor[(3, 16, 6), bool] */;
  %1326 = cast(%1325, dtype="float32") /* ty=Tensor[(3, 16, 6), float32] */;
  %1327 = cast(meta[relay.Constant][86] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %1328 = cast(meta[relay.Constant][87] /* ty=Tensor[(2, 192), uint32] */, dtype="uint32") /* ty=Tensor[(2, 192), uint32] */;
  %1329 = cast(%var_4756, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1330 = reshape(%1326, newshape=[3, 16, 6]) /* ty=Tensor[(3, 16, 6), float32] */;
  %1331 = reshape(%1327, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %1332 = reshape(%1328, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1333 = reshape(%1329, newshape=[16, 4]) /* ty=Tensor[(16, 4), float32] */;
  %1334 = @func_3963(%1330, %1331, %1332, %1333) /* ty=(Tensor[(3, 16, 6), uint16], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(16, 4), float32], Tensor[(320), float32], Tensor[(384, 24), uint8]) */;
  %1335 = %1324.0;
  %1336 = %1334.4;
  (%1335, %1325, %1336, meta[relay.Constant][86] /* ty=Tensor[(24), uint32] */, meta[relay.Constant][87] /* ty=Tensor[(2, 192), uint32] */, %var_4756)
}

def @func_3805(%var_3803: Tensor[(3, 16, 6), bool]) -> (Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) {
  @func_3802(%var_3803) /* ty=(Tensor[(3, 16, 6), uint8], Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), float32]) */
}

def @func_10457(%var_10431: Tensor[(4, 7, 14), float64]) -> (Tensor[(4, 7, 14), float32],) {
  %1337 = cast(%var_10431, dtype="float64") /* ty=Tensor[(4, 7, 14), float64] */;
  %1338 = sinh(%1337) /* ty=Tensor[(4, 7, 14), float64] */;
  %1339 = cast(%var_10431, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
  %1340 = shape_of(%1338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1341 = cast(%1338, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
  %1342 = dyn.reshape(%1339, %1340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1343 = greater_equal(%1341, %1342) /* ty=Tensor[(4, 7, 14), bool] */;
  %1344 = cast(%1338, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
  %1345 = shape_of(%1343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1346 = cast(%1343, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
  %1347 = dyn.reshape(%1344, %1345, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1348 = mod(%1346, %1347) /* ty=Tensor[(4, 7, 14), float32] */;
  (%1348,)
}

def @func_13495() -> (Tensor[(3, 16, 6), float32],) {
  @func_13493() /* ty=(Tensor[(3, 16, 6), float32],) */
}

def @func_1903(%var_1902: Tensor[(10, 2, 8), float64]) -> (Tensor[(10, 2, 8), float64],) {
  %1351 = fn (%var_1892: Tensor[(10, 2, 8), float64]) -> (Tensor[(10, 2, 8), float64],) {
    %1349 = cast(%var_1892, dtype="float64") /* ty=Tensor[(10, 2, 8), float64] */;
    %1350 = asin(%1349) /* ty=Tensor[(10, 2, 8), float64] */;
    (%1350,)
  };
  %1351(%var_1902) /* ty=(Tensor[(10, 2, 8), float64],) */
}

def @func_12228() -> (Tensor[(64), float32], Tensor[(3, 16, 6), int64]) {
  %1355 = fn () -> (Tensor[(64), float32], Tensor[(3, 16, 6), int64]) {
    %1352 = @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */;
    %1353 = @func_8666() /* ty=Tensor[(64), float32] */;
    %1354 = %1352.0;
    (%1353, %1354)
  };
  %1355() /* ty=(Tensor[(64), float32], Tensor[(3, 16, 6), int64]) */
}

def @func_4423() -> (Tensor[(3, 16, 6), int64],) {
  @func_4421() /* ty=(Tensor[(3, 16, 6), int64],) */
}

def @main(%var_14010: Tensor[(9, 3, 13), float64]) -> (Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool], Tensor[(9, 3, 13), float64]) {
  %1356 = @func_8027() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), bool]) */;
  %1357 = @func_11351() /* ty=Tensor[(9, 3, 13), float64] */;
  %1358 = cast(%var_14010, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %1359 = shape_of(%1357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1360 = cast(%1357, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %1361 = dyn.reshape(%1358, %1359, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1362 = @func_8393() /* ty=Tensor[(3, 16, 6), bool] */;
  %1363 = %1356.0;
  %1364 = floor_mod(%1360, %1361) /* ty=Tensor[(9, 3, 13), float64] */;
  (%1362, %1363, %1364)
}

def @func_13149() -> (Tensor[(3, 16, 6), bool],) {
  %1365 = @func_12018() /* ty=Tensor[(3, 16, 6), bool] */;
  (%1365,)
}

def @func_3968(%var_3964: Tensor[(3, 16, 6), float32], %var_3965: Tensor[(24), uint32], %var_3966: Tensor[(384), uint32], %var_3967: Tensor[(16, 4), float32]) -> (Tensor[(3, 16, 6), uint16], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(16, 4), float32], Tensor[(320), float32], Tensor[(384, 24), uint8]) {
  %1390 = fn (%var_3944: Tensor[(3, 16, 6), float32], %var_3951: Tensor[(24), uint32], %var_3952: Tensor[(384), uint32], %var_3953: Tensor[(16, 4), float32]) -> (Tensor[(3, 16, 6), uint16], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(16, 4), float32], Tensor[(320), float32], Tensor[(384, 24), uint8]) {
    %1366 = @func_3370() /* ty=Tensor[(3, 16, 6), float32] */;
    %1367 = cast(%var_3944, dtype="uint16") /* ty=Tensor[(3, 16, 6), uint16] */;
    %1368 = shape_of(%1366, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1369 = cast(%1366, dtype="uint16") /* ty=Tensor[(3, 16, 6), uint16] */;
    %1370 = dyn.reshape(%1367, %1368, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1371 = cast(meta[relay.Constant][88] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
    %1372 = cast(%var_3951, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %1373 = cast(%var_3952, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %1374 = cast(%var_3953, dtype="float32") /* ty=Tensor[(16, 4), float32] */;
    %1375 = cast(meta[relay.Constant][89] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %1376 = cast(%var_3952, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %1377 = reshape(%1371, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
    %1378 = reshape(%1372, newshape=[24]) /* ty=Tensor[(24), uint32] */;
    %1379 = reshape(%1373, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %1380 = reshape(%1374, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %1381 = reshape(%1375, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %1382 = reshape(%1376, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %1383 = @func_1076(%1377, %1378, %1379, %1380, %1381, %1382) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
    %1384 = cast(%var_3952, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %1385 = reshape(%1384, newshape=[384, 1]) /* ty=Tensor[(384, 1), uint32] */;
    %1386 = @func_1574(%1385) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(3, 16, 6), float32], Tensor[(8, 16, 3), uint32], Tensor[(384, 24), uint8]) */;
    %1387 = add(%1369, %1370) /* ty=Tensor[(3, 16, 6), uint16] */;
    %1388 = %1383.2;
    %1389 = %1386.3;
    (%1387, %1388, meta[relay.Constant][88] /* ty=Tensor[(576), float32] */, %var_3951, %var_3952, %var_3953, meta[relay.Constant][89] /* ty=Tensor[(320), float32] */, %1389)
  };
  %1390(%var_3964, %var_3965, %var_3966, %var_3967) /* ty=(Tensor[(3, 16, 6), uint16], Tensor[(384), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(16, 4), float32], Tensor[(320), float32], Tensor[(384, 24), uint8]) */
}

def @func_1539() -> Tensor[(3, 16, 6), bool] {
  @func_1537() /* ty=Tensor[(3, 16, 6), bool] */
}

def @func_3461() -> (Tensor[(3, 16, 6), float64], Tensor[(11, 4, 3), float64], Tensor[(132), float32]) {
  %1391 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1392 = %1391.0;
  %1393 = cast(%1392, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %1394 = cast(meta[relay.Constant][90] /* ty=Tensor[(132), int16] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %1395 = reshape(%1394, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), int16] */;
  %1396 = @func_1867(%1395) /* ty=(Tensor[(11, 4, 3), float64],) */;
  %1397 = cast(meta[relay.Constant][90] /* ty=Tensor[(132), int16] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %1398 = cosh(%1393) /* ty=Tensor[(3, 16, 6), float64] */;
  %1399 = %1396.0;
  %1400 = atan(%1397) /* ty=Tensor[(132), float32] */;
  (%1398, %1399, %1400)
}

def @func_4241() -> Tensor[(3, 16, 6), float32] {
  %1402 = fn () -> Tensor[(3, 16, 6), float32] {
    %1401 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
    %1401.0
  };
  %1402() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_5701(%var_5695: Tensor[(5, 10, 8), float32]) -> (Tensor[(5, 10, 8), float32],) {
  %1403 = cast(%var_5695, dtype="float32") /* ty=Tensor[(5, 10, 8), float32] */;
  %1404 = asin(%1403) /* ty=Tensor[(5, 10, 8), float32] */;
  (%1404,)
}

def @func_7962() -> Tensor[(3, 16, 6), float32] {
  %1405 = fn () -> Tensor[(3, 16, 6), float32] {
    @func_4536() /* ty=Tensor[(3, 16, 6), float32] */
  };
  %1405() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_10527() -> (Tensor[(3, 16, 6), bool],) {
  %1408 = fn () -> (Tensor[(3, 16, 6), bool],) {
    %1406 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
    %1407 = %1406.1;
    (%1407,)
  };
  %1408() /* ty=(Tensor[(3, 16, 6), bool],) */
}

def @func_11096() -> Tensor[(10, 2, 13), bool] {
  @func_11094() /* ty=Tensor[(10, 2, 13), bool] */
}

def @func_6330() -> (Tensor[(6, 11, 5), int16],) {
  %1426 = fn () -> (Tensor[(6, 11, 5), int16],) {
    %1409 = cast(meta[relay.Constant][91] /* ty=Tensor[(6, 11, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 11, 5), float32] */;
    %1410 = rsqrt(%1409) /* ty=Tensor[(6, 11, 5), float32] */;
    %1411 = cast(meta[relay.Constant][91] /* ty=Tensor[(6, 11, 5), float32] */, dtype="uint64") /* ty=Tensor[(6, 11, 5), uint64] */;
    %1412 = shape_of(%1410, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1413 = cast(%1410, dtype="uint64") /* ty=Tensor[(6, 11, 5), uint64] */;
    %1414 = dyn.reshape(%1411, %1412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1415 = right_shift(%1413, %1414) /* ty=Tensor[(6, 11, 5), uint64] */;
    %1416 = cast(%1410, dtype="bool") /* ty=Tensor[(6, 11, 5), bool] */;
    %1417 = shape_of(%1415, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1418 = cast(%1415, dtype="bool") /* ty=Tensor[(6, 11, 5), bool] */;
    %1419 = dyn.reshape(%1416, %1417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1420 = greater_equal(%1418, %1419) /* ty=Tensor[(6, 11, 5), bool] */;
    %1421 = cast(%1410, dtype="int16") /* ty=Tensor[(6, 11, 5), int16] */;
    %1422 = shape_of(%1420, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1423 = cast(%1420, dtype="int16") /* ty=Tensor[(6, 11, 5), int16] */;
    %1424 = dyn.reshape(%1421, %1422, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1425 = left_shift(%1423, %1424) /* ty=Tensor[(6, 11, 5), int16] */;
    (%1425,)
  };
  %1426() /* ty=(Tensor[(6, 11, 5), int16],) */
}

def @func_12788() -> Tensor[(3, 16, 6), float32] {
  @func_12786() /* ty=Tensor[(3, 16, 6), float32] */
}

def @func_3235() -> (Tensor[(10, 2, 13), bool],) {
  %1429 = fn () -> (Tensor[(10, 2, 13), bool],) {
    %1427 = @func_2689() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(10, 2, 13), bool], Tensor[(260), bool]) */;
    %1428 = %1427.1;
    (%1428,)
  };
  %1429() /* ty=(Tensor[(10, 2, 13), bool],) */
}

def @func_6436(%var_6435: Tensor[(12, 8, 9), float32]) -> (Tensor[(12, 8, 9), bool],) {
  %1439 = fn (%var_6423: Tensor[(12, 8, 9), float32]) -> (Tensor[(12, 8, 9), bool],) {
    %1430 = @func_6221() /* ty=(Tensor[(3, 16, 6), bool], Tensor[(12, 8, 9), float32], Tensor[(12, 8, 9), float32]) */;
    %1431 = %1430.2;
    %1432 = cast(%1431, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
    %1433 = asinh(%1432) /* ty=Tensor[(12, 8, 9), float32] */;
    %1434 = cast(%var_6423, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
    %1435 = shape_of(%1433, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1436 = cast(%1433, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
    %1437 = dyn.reshape(%1434, %1435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1438 = logical_and(%1436, %1437) /* ty=Tensor[(12, 8, 9), bool] */;
    (%1438,)
  };
  %1439(%var_6435) /* ty=(Tensor[(12, 8, 9), bool],) */
}

def @func_10749(%var_10743: Tensor[(9, 15, 1), int16], %var_10744: Tensor[(9, 15, 7), int16]) -> Tensor[(9, 15, 7), int16] {
  %1440 = cast(%var_10743, dtype="int16") /* ty=Tensor[(9, 15, 1), int16] */;
  %1441 = cast(%var_10744, dtype="int16") /* ty=Tensor[(9, 15, 7), int16] */;
  logical_xor(%1440, %1441) /* ty=Tensor[(9, 15, 7), int16] */
}

def @func_2505(%var_2502: Tensor[(11, 16, 12), float32], %var_2503: Tensor[(576), float32], %var_2504: Tensor[(64), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) {
  %1473 = fn (%var_2443: Tensor[(11, 16, 12), float32], %var_2457: Tensor[(576), float32], %var_2460: Tensor[(64), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) {
    %1442 = cast(meta[relay.Constant][92] /* ty=Tensor[(11, 16, 12), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
    %1443 = shape_of(%var_2443, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1444 = cast(%var_2443, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
    %1445 = dyn.reshape(%1442, %1443, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1446 = divide(%1444, %1445) /* ty=Tensor[(11, 16, 12), float32] */;
    %1447 = cast(%var_2443, dtype="float64") /* ty=Tensor[(11, 16, 12), float64] */;
    %1448 = acosh(%1447) /* ty=Tensor[(11, 16, 12), float64] */;
    %1449 = cast(%1448, dtype="float64") /* ty=Tensor[(11, 16, 12), float64] */;
    %1450 = shape_of(%1446, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1451 = cast(%1446, dtype="float64") /* ty=Tensor[(11, 16, 12), float64] */;
    %1452 = dyn.reshape(%1449, %1450, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1453 = cast(%var_2457, dtype="float32") /* ty=Tensor[(576), float32] */;
    %1454 = cast(meta[relay.Constant][93] /* ty=Tensor[(24), uint32] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %1455 = cast(meta[relay.Constant][94] /* ty=Tensor[(1, 384), uint32] */, dtype="uint32") /* ty=Tensor[(1, 384), uint32] */;
    %1456 = cast(%var_2460, dtype="float32") /* ty=Tensor[(64), float32] */;
    %1457 = cast(meta[relay.Constant][95] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %1458 = cast(meta[relay.Constant][94] /* ty=Tensor[(1, 384), uint32] */, dtype="uint32") /* ty=Tensor[(1, 384), uint32] */;
    %1459 = reshape(%1453, newshape=[9, 16, 4]) /* ty=Tensor[(9, 16, 4), float32] */;
    %1460 = reshape(%1454, newshape=[24]) /* ty=Tensor[(24), uint32] */;
    %1461 = reshape(%1455, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %1462 = reshape(%1456, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %1463 = reshape(%1457, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %1464 = reshape(%1458, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), uint32] */;
    %1465 = @func_1076(%1459, %1460, %1461, %1462, %1463, %1464) /* ty=(Tensor[(9, 16, 4), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(8, 16, 3), uint32], Tensor[(5, 4, 16), bool], Tensor[(64), float32], Tensor[(320), float32], Tensor[(8, 16, 3), uint32], Tensor[(8, 16, 3), bool]) */;
    %1466 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
    %1467 = cast(%1448, dtype="float32") /* ty=Tensor[(11, 16, 12), float32] */;
    %1468 = @func_1537() /* ty=Tensor[(3, 16, 6), bool] */;
    %1469 = mod(%1451, %1452) /* ty=Tensor[(11, 16, 12), float64] */;
    %1470 = %1465.3;
    %1471 = %1466.1;
    %1472 = rsqrt(%1467) /* ty=Tensor[(11, 16, 12), float32] */;
    (%1468, %1469, %1470, %var_2457, meta[relay.Constant][93] /* ty=Tensor[(24), uint32] */, meta[relay.Constant][94] /* ty=Tensor[(1, 384), uint32] */, %var_2460, meta[relay.Constant][95] /* ty=Tensor[(320), float32] */, %1471, %1472)
  };
  %1473(%var_2502, %var_2503, %var_2504) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float64], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(1, 384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(3, 16, 6), bool], Tensor[(11, 16, 12), float32]) */
}

def @func_13046(%var_13043: Tensor[(1, 440), uint16], %var_13044: Tensor[(16, 4), float32], %var_13045: Tensor[(320), float32]) -> (Tensor[(10, 2, 13), bool], Tensor[(8, 5, 11), uint16], Tensor[(1, 440), uint16], Tensor[(10, 2, 8), float64], Tensor[(384), uint32], Tensor[(16, 4), float32], Tensor[(320), float32], Tensor[(160), float64]) {
  %1488 = fn (%var_13031: Tensor[(1, 440), uint16], %var_13038: Tensor[(16, 4), float32], %var_13039: Tensor[(320), float32]) -> (Tensor[(10, 2, 13), bool], Tensor[(8, 5, 11), uint16], Tensor[(1, 440), uint16], Tensor[(10, 2, 8), float64], Tensor[(384), uint32], Tensor[(16, 4), float32], Tensor[(320), float32], Tensor[(160), float64]) {
    %1474 = cast(%var_13031, dtype="uint16") /* ty=Tensor[(1, 440), uint16] */;
    %1475 = reshape(%1474, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), uint16] */;
    %1476 = cast(meta[relay.Constant][96] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %1477 = cast(%var_13038, dtype="float32") /* ty=Tensor[(16, 4), float32] */;
    %1478 = cast(%var_13039, dtype="float32") /* ty=Tensor[(320), float32] */;
    %1479 = cast(meta[relay.Constant][97] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %1480 = reshape(%1476, newshape=[24, 16]) /* ty=Tensor[(24, 16), uint32] */;
    %1481 = reshape(%1477, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %1482 = reshape(%1478, newshape=[4, 80]) /* ty=Tensor[(4, 80), float32] */;
    %1483 = reshape(%1479, newshape=[160]) /* ty=Tensor[(160), float64] */;
    %1484 = @func_2377(%1480, %1481, %1482, %1483) /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), int64], Tensor[(9, 16, 4), float32], Tensor[(24, 16), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(4, 80), float32], Tensor[(10, 2, 8), float64], Tensor[(160), float64], Tensor[(3, 16, 6), bool]) */;
    %1485 = @func_11094() /* ty=Tensor[(10, 2, 13), bool] */;
    %1486 = @func_11439(%1475) /* ty=Tensor[(8, 5, 11), uint16] */;
    %1487 = %1484.7;
    (%1485, %1486, %var_13031, %1487, meta[relay.Constant][96] /* ty=Tensor[(384), uint32] */, %var_13038, %var_13039, meta[relay.Constant][97] /* ty=Tensor[(160), float64] */)
  };
  %1488(%var_13043, %var_13044, %var_13045) /* ty=(Tensor[(10, 2, 13), bool], Tensor[(8, 5, 11), uint16], Tensor[(1, 440), uint16], Tensor[(10, 2, 8), float64], Tensor[(384), uint32], Tensor[(16, 4), float32], Tensor[(320), float32], Tensor[(160), float64]) */
}

def @func_11329() -> (Tensor[(260), bool], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) {
  @func_11327() /* ty=(Tensor[(260), bool], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */
}

def @func_8518() -> Tensor[(3, 16, 6), int64] {
  @func_7463() /* ty=Tensor[(3, 16, 6), int64] */
}

def @func_331(%var_329: Tensor[(8, 1, 3), uint32], %var_330: Tensor[(8, 16, 3), uint32]) -> Tensor[(8, 16, 3), uint32] {
  @func_327(%var_329, %var_330) /* ty=Tensor[(8, 16, 3), uint32] */
}

def @func_5884(%var_5880: Tensor[(576), float32]) -> (Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(576), float32], Tensor[(64), float32], Tensor[(320, 1), float32]) {
  %1489 = @func_1522() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(3, 16, 6), bool]) */;
  %1490 = cast(%var_5880, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1491 = cast(meta[relay.Constant][98] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1492 = cast(meta[relay.Constant][99] /* ty=Tensor[(320, 1), float32] */, dtype="float32") /* ty=Tensor[(320, 1), float32] */;
  %1493 = reshape(%1490, newshape=[6, 96]) /* ty=Tensor[(6, 96), float32] */;
  %1494 = reshape(%1491, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1495 = reshape(%1492, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %1496 = @func_2753(%1493, %1494, %1495) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(8, 16, 3), uint32], Tensor[(6, 96), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32]) */;
  %1497 = %1489.1;
  %1498 = %1496.1;
  (%1497, %1498, %var_5880, meta[relay.Constant][98] /* ty=Tensor[(64), float32] */, meta[relay.Constant][99] /* ty=Tensor[(320, 1), float32] */)
}

def @func_4217() -> Tensor[(3, 16, 6), float32] {
  %1499 = @func_3725() /* ty=(Tensor[(3, 16, 6), float32],) */;
  %1499.0
}

def @func_7281() -> (Tensor[(3, 16, 6), float32], Tensor[(1, 24), uint32], Tensor[(?, 546), int16]) {
  @func_7279() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(1, 24), uint32], Tensor[(?, 546), int16]) */
}

def @func_4330(%var_4319: Tensor[(576), float32], %var_4320: Tensor[(24), uint32], %var_4321: Tensor[(384, 1), uint32], %var_4322: Tensor[(8, 40), bool]) -> (Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384, 1), uint32], Tensor[(8, 40), bool]) {
  %1500 = cast(%var_4319, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1501 = cast(%var_4320, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %1502 = cast(%var_4321, dtype="uint32") /* ty=Tensor[(384, 1), uint32] */;
  %1503 = cast(%var_4322, dtype="bool") /* ty=Tensor[(8, 40), bool] */;
  %1504 = reshape(%1500, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %1505 = reshape(%1501, newshape=[24]) /* ty=Tensor[(24), uint32] */;
  %1506 = reshape(%1502, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %1507 = reshape(%1503, newshape=[5, 4, 16]) /* ty=Tensor[(5, 4, 16), bool] */;
  %1508 = @func_2041(%1504, %1505, %1506, %1507) /* ty=(Tensor[(3, 16, 6), bool], Tensor[(576), float32], Tensor[(24), uint32], Tensor[(384), uint32], Tensor[(64), float32], Tensor[(320), float32], Tensor[(5, 4, 16), float64]) */;
  %1509 = @func_2428() /* ty=Tensor[(3, 16, 6), bool] */;
  %1510 = %1508.1;
  (%1509, %1510, %var_4319, %var_4320, %var_4321, %var_4322)
}

def @func_12181() -> Tensor[(260), bool] {
  %1512 = fn () -> Tensor[(260), bool] {
    %1511 = @func_11327() /* ty=(Tensor[(260), bool], Tensor[(11, 4, 3), float64], Tensor[(132), int16]) */;
    %1511.0
  };
  %1512() /* ty=Tensor[(260), bool] */
}

def @func_13421() -> (Tensor[(3, 16, 6), float32], Tensor[(320), float32], Tensor[(64), float32]) {
  @func_13419() /* ty=(Tensor[(3, 16, 6), float32], Tensor[(320), float32], Tensor[(64), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen607/build/output.py", line 4357, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:39:08] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

