import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_384 = relay.const([[[True,True,True,True,False,False,False,False,False,False,False,True,False,True],[False,True,True,True,False,False,True,False,True,True,True,True,False,True],[False,True,True,True,True,False,False,True,False,False,True,True,False,False],[False,True,True,False,False,False,True,False,False,False,False,True,True,False],[True,False,True,True,True,False,True,False,False,True,True,True,False,True],[False,False,True,False,True,False,False,True,False,True,False,False,True,False],[True,True,False,False,True,True,False,False,True,True,True,False,False,False],[True,False,True,True,True,False,True,False,False,True,False,False,False,False],[False,True,False,False,False,True,False,True,False,False,False,False,True,True],[False,False,True,True,False,True,False,True,True,True,False,False,False,False],[False,False,False,True,True,False,True,False,True,True,True,False,False,True],[False,True,False,False,True,False,True,False,True,True,True,False,False,True],[False,False,True,True,False,True,False,True,False,True,True,True,False,True],[True,False,False,True,False,True,True,True,True,False,True,False,True,True],[False,True,False,True,True,False,False,True,True,False,True,True,True,False],[True,True,True,False,False,False,False,False,True,True,True,False,False,True]],[[False,True,False,False,True,False,True,False,False,True,False,False,True,True],[True,False,True,False,False,True,True,False,True,True,False,False,False,True],[False,False,False,False,False,False,False,True,True,False,True,True,True,True],[True,True,False,True,True,False,True,True,True,False,True,False,True,True],[False,False,True,False,False,True,False,False,False,False,True,True,False,True],[False,False,False,False,True,True,True,False,True,False,False,False,True,True],[False,False,True,False,False,False,False,True,True,False,True,True,False,True],[False,True,False,True,True,False,True,False,True,False,False,False,False,False],[False,True,False,False,False,True,False,False,True,False,True,False,False,True],[False,True,False,False,False,False,True,True,False,False,True,False,False,True],[False,True,False,True,False,False,True,False,True,False,True,False,False,False],[False,True,True,False,False,True,True,False,True,False,True,False,True,False],[False,True,True,False,False,True,True,True,True,True,True,False,True,False],[False,True,True,True,False,False,True,False,False,False,False,True,True,True],[True,False,True,True,True,True,False,False,False,True,True,False,False,False],[False,True,True,True,True,False,False,True,False,True,False,False,False,False]],[[False,True,False,True,True,True,True,False,False,True,False,True,False,True],[True,True,False,True,False,True,False,True,True,False,True,True,False,True],[False,False,True,False,True,True,True,False,True,False,False,True,True,True],[False,False,False,True,True,False,True,True,True,True,True,False,False,False],[False,False,True,False,False,False,False,True,False,True,True,True,False,True],[False,True,False,True,True,True,False,False,True,True,False,True,True,True],[True,True,True,True,True,False,True,True,False,True,False,False,True,True],[True,True,False,False,False,True,True,False,False,True,False,True,True,False],[False,False,True,False,True,False,True,False,False,True,True,True,False,True],[True,True,False,True,False,False,True,True,True,False,True,True,True,True],[True,False,False,True,False,True,True,True,False,True,True,False,False,False],[True,False,True,True,False,True,False,False,False,True,True,True,True,False],[True,False,False,False,True,False,True,True,True,True,True,True,False,False],[False,False,True,True,False,False,False,False,False,False,True,False,True,False],[True,False,True,False,True,True,False,False,True,False,True,False,True,False],[False,True,True,False,True,False,True,True,False,False,False,False,False,True]],[[False,False,True,False,False,False,False,True,True,True,True,False,True,True],[True,False,True,True,True,False,True,False,False,False,True,True,False,True],[True,True,False,False,True,False,False,True,False,False,True,False,True,False],[False,False,True,True,False,True,False,True,True,True,True,False,False,True],[True,False,False,False,True,True,False,False,True,False,False,True,True,True],[True,False,True,False,True,True,True,True,False,False,True,True,True,False],[True,True,True,False,False,False,True,True,True,True,False,False,False,False],[True,True,True,True,True,False,True,False,True,False,False,True,False,True],[True,False,True,False,True,True,True,True,True,False,True,False,True,True],[False,True,True,True,False,False,False,False,False,True,False,False,False,False],[True,False,True,False,False,True,True,False,False,False,True,True,False,False],[True,True,True,True,True,False,False,True,False,True,True,True,False,False],[True,False,False,False,True,False,True,True,True,False,True,True,False,True],[False,False,True,True,True,True,False,False,True,False,False,False,True,True],[True,False,True,False,False,False,False,True,False,True,True,True,True,False],[False,True,True,False,True,True,True,True,False,True,True,True,True,True]],[[True,True,True,False,True,False,False,True,False,True,True,False,False,False],[True,False,False,True,True,False,True,True,True,False,False,True,True,True],[False,True,True,False,False,False,False,True,False,True,False,True,False,True],[True,False,True,True,False,False,False,False,False,False,True,True,False,True],[False,False,False,False,True,True,False,True,True,True,False,False,False,False],[True,False,False,False,False,True,True,True,True,False,True,True,False,False],[False,False,True,False,False,True,True,True,True,True,False,False,False,False],[False,False,True,True,False,True,False,True,False,True,False,False,True,True],[True,True,True,False,False,False,False,False,True,True,False,False,True,False],[True,True,True,True,False,False,True,False,True,True,True,True,False,True],[True,False,False,True,True,True,True,True,True,True,False,True,True,False],[True,False,False,False,True,True,False,True,True,True,False,False,False,True],[False,False,True,True,False,True,False,False,True,True,True,False,True,True],[True,False,True,True,False,False,True,True,True,True,True,True,False,True],[True,False,False,True,True,True,True,True,True,True,True,False,True,True],[False,False,False,False,False,False,True,False,False,False,True,True,False,False]],[[False,False,True,False,True,False,True,False,True,False,True,False,False,True],[False,True,False,True,True,False,True,True,False,False,True,False,False,False],[False,False,True,False,True,False,False,False,False,False,False,False,False,True],[False,False,False,True,True,False,False,False,True,True,True,True,True,False],[False,True,True,False,False,False,False,True,False,True,True,True,True,True],[True,True,False,True,False,True,False,True,True,False,False,False,True,True],[False,False,False,False,False,True,False,False,True,False,True,True,True,False],[False,False,True,True,False,True,True,False,False,True,True,False,False,True],[False,True,True,False,False,True,False,False,False,False,False,True,True,True],[False,False,True,True,True,False,False,True,True,True,True,False,True,False],[False,True,False,False,False,True,True,False,False,True,False,False,False,False],[True,True,True,True,True,False,False,False,False,True,True,False,False,False],[False,True,True,False,False,True,False,True,False,True,True,False,True,False],[False,True,False,True,False,False,False,True,False,True,False,True,False,True],[True,False,False,True,False,True,True,False,False,True,True,False,True,True],[False,False,True,False,True,True,True,True,True,True,False,False,False,False]],[[True,False,False,False,True,False,True,True,True,False,True,True,True,True],[True,False,False,True,False,True,True,True,False,False,False,False,True,True],[False,False,True,True,False,True,True,True,True,False,False,False,False,False],[True,True,True,False,False,True,True,False,False,False,False,False,False,False],[False,False,True,False,False,True,True,False,False,False,False,False,False,False],[False,False,False,False,False,True,False,False,False,False,False,False,False,False],[True,True,True,True,True,False,False,True,True,True,True,False,False,True],[False,False,False,False,True,False,False,True,False,True,True,False,True,True],[True,True,False,False,False,True,True,True,True,True,False,True,True,False],[True,True,True,True,True,True,True,False,False,False,True,False,True,False],[False,False,False,True,True,False,True,False,True,True,True,False,False,False],[True,True,False,False,False,True,True,False,True,True,False,True,True,False],[True,False,False,True,False,False,True,True,False,False,True,True,True,True],[False,False,True,True,True,True,False,False,False,True,False,True,False,False],[False,True,False,True,True,True,True,True,True,False,True,False,False,False],[True,False,True,True,False,False,True,True,True,True,True,False,False,True]],[[True,True,False,False,False,False,True,False,True,False,True,True,False,False],[True,True,True,False,True,False,False,True,True,True,False,False,False,False],[False,False,True,False,True,True,False,False,False,True,False,True,False,True],[False,False,False,True,True,True,False,False,True,False,True,False,True,False],[True,True,False,True,True,True,True,True,True,True,True,True,True,True],[False,True,False,True,True,False,False,True,True,False,True,True,False,True],[True,True,True,False,False,True,False,False,False,True,True,True,True,False],[False,False,True,True,True,True,False,False,False,False,True,True,True,True],[False,True,False,False,True,True,False,True,False,False,True,False,False,False],[False,True,False,False,True,True,True,False,True,True,False,True,False,False],[False,True,True,True,False,True,True,True,False,True,True,False,False,False],[False,False,True,False,True,True,True,False,True,False,False,False,False,False],[True,False,False,True,True,True,False,True,False,True,True,False,True,False],[False,True,False,True,True,True,True,False,True,False,False,False,True,False],[False,True,False,True,True,True,False,False,False,True,True,True,False,False],[True,True,False,False,False,True,True,True,False,False,True,True,True,True]],[[True,False,True,True,True,False,False,False,True,True,False,True,False,True],[False,False,False,False,False,False,False,False,True,True,False,False,True,True],[True,False,True,True,False,False,False,True,False,True,True,True,False,True],[True,False,True,True,False,True,True,False,True,True,True,True,False,True],[True,False,False,False,False,True,True,True,False,False,False,False,True,False],[False,True,True,True,True,False,False,True,True,False,False,True,True,True],[False,False,False,True,False,False,True,False,False,True,True,False,True,False],[False,False,False,False,True,True,True,False,False,False,True,True,False,True],[False,True,False,False,True,False,True,True,True,True,False,True,False,True],[True,True,True,True,True,True,False,False,True,True,False,True,True,True],[False,True,True,True,True,True,True,False,False,True,False,True,False,False],[False,False,True,True,True,True,False,False,False,False,False,True,False,False],[False,True,True,True,True,False,False,False,False,True,False,False,False,False],[True,False,False,True,False,False,False,True,True,False,True,True,True,True],[True,True,True,True,False,True,False,True,True,False,True,True,False,False],[True,False,False,False,True,True,True,True,True,True,True,False,False,False]],[[True,True,False,False,False,True,False,False,False,False,False,False,True,True],[True,True,True,True,True,False,True,False,True,True,False,False,False,True],[False,False,True,True,True,True,False,True,True,False,False,True,False,False],[True,True,True,True,False,True,False,False,True,True,False,False,False,False],[False,True,True,False,True,True,True,True,False,True,False,True,True,False],[True,False,False,False,True,False,True,False,True,True,False,False,True,False],[False,True,True,False,False,False,False,False,True,True,True,False,True,True],[True,False,False,False,False,False,True,False,False,False,False,True,False,False],[True,True,False,True,False,True,True,True,False,True,True,True,True,False],[True,False,True,True,False,True,True,True,False,False,True,False,True,True],[False,True,True,True,False,True,True,False,True,False,True,True,False,False],[False,True,False,False,True,False,True,True,True,False,False,True,True,True],[False,False,False,False,True,True,True,True,True,False,True,False,True,True],[True,True,True,True,False,False,True,True,False,False,False,True,True,True],[True,False,False,True,False,True,True,True,False,False,False,True,True,True],[True,False,False,False,True,False,False,True,False,True,False,False,False,False]]], dtype = "bool")#candidate|384|(10, 16, 14)|const|bool
var_385 = relay.var("var_385", dtype = "bool", shape = (10, 16, 14))#candidate|385|(10, 16, 14)|var|bool
bop_386 = relay.logical_or(const_384.astype('bool'), relay.reshape(var_385.astype('bool'), relay.shape_of(const_384))) # shape=(10, 16, 14)
output = bop_386
output2 = bop_386
func_396 = relay.Function([var_385,], output)
mod['func_396'] = func_396
mod = relay.transform.InferType()(mod)
var_397 = relay.var("var_397", dtype = "bool", shape = (10, 16, 14))#candidate|397|(10, 16, 14)|var|bool
output = func_396(var_397)
func_398 = relay.Function([var_397], output)
mutated_mod['func_398'] = func_398
mutated_mod = relay.transform.InferType()(mutated_mod)
var_514 = relay.var("var_514", dtype = "float64", shape = (7, 10, 6))#candidate|514|(7, 10, 6)|var|float64
uop_515 = relay.erf(var_514.astype('float64')) # shape=(7, 10, 6)
uop_517 = relay.log(uop_515.astype('float64')) # shape=(7, 10, 6)
bop_521 = relay.subtract(uop_517.astype('uint32'), relay.reshape(var_514.astype('uint32'), relay.shape_of(uop_517))) # shape=(7, 10, 6)
func_396_call = mod.get_global_var('func_396')
func_398_call = mutated_mod.get_global_var('func_398')
var_530 = relay.var("var_530", dtype = "bool", shape = (2240,))#candidate|530|(2240,)|var|bool
call_529 = func_396_call(relay.reshape(var_530.astype('bool'), [10, 16, 14]))
call_531 = func_396_call(relay.reshape(var_530.astype('bool'), [10, 16, 14]))
func_396_call = mod.get_global_var('func_396')
func_398_call = mutated_mod.get_global_var('func_398')
call_536 = func_396_call(relay.reshape(var_530.astype('bool'), [10, 16, 14]))
call_537 = func_396_call(relay.reshape(var_530.astype('bool'), [10, 16, 14]))
uop_538 = relay.log10(call_536.astype('float64')) # shape=(10, 16, 14)
uop_540 = relay.log10(call_537.astype('float64')) # shape=(10, 16, 14)
bop_548 = relay.divide(uop_538.astype('float64'), relay.reshape(call_536.astype('float64'), relay.shape_of(uop_538))) # shape=(10, 16, 14)
bop_551 = relay.divide(uop_540.astype('float64'), relay.reshape(call_537.astype('float64'), relay.shape_of(uop_540))) # shape=(10, 16, 14)
func_396_call = mod.get_global_var('func_396')
func_398_call = mutated_mod.get_global_var('func_398')
call_561 = func_396_call(relay.reshape(uop_538.astype('bool'), [10, 16, 14]))
call_562 = func_396_call(relay.reshape(uop_538.astype('bool'), [10, 16, 14]))
func_396_call = mod.get_global_var('func_396')
func_398_call = mutated_mod.get_global_var('func_398')
call_568 = func_396_call(relay.reshape(call_561.astype('bool'), [10, 16, 14]))
call_569 = func_396_call(relay.reshape(call_561.astype('bool'), [10, 16, 14]))
output = relay.Tuple([bop_521,call_529,var_530,bop_548,call_561,call_568,])
output2 = relay.Tuple([bop_521,call_531,var_530,bop_551,call_562,call_569,])
func_573 = relay.Function([var_514,var_530,], output)
mod['func_573'] = func_573
mod = relay.transform.InferType()(mod)
var_574 = relay.var("var_574", dtype = "float64", shape = (7, 10, 6))#candidate|574|(7, 10, 6)|var|float64
var_575 = relay.var("var_575", dtype = "bool", shape = (2240,))#candidate|575|(2240,)|var|bool
output = func_573(var_574,var_575,)
func_576 = relay.Function([var_574,var_575,], output)
mutated_mod['func_576'] = func_576
mutated_mod = relay.transform.InferType()(mutated_mod)
const_739 = relay.const([[[1.300308,-3.739459,-8.401311,4.873674,-9.276579,-4.141547,-4.442498,-5.431331,-3.394252],[-2.139329,-1.037925,-5.425234,6.671487,-6.987811,-4.332433,-7.277237,-3.169854,7.753957],[-8.868821,2.887334,8.689561,7.668586,-9.098135,4.958661,-5.046833,9.207500,-1.219786],[7.381608,8.679533,6.929503,8.127269,4.629597,-4.312159,-9.235817,9.485934,6.446339],[-0.844922,-5.246908,-3.380779,9.265927,-5.895825,-8.220398,-2.446144,-0.449835,0.342422],[2.049608,8.142549,-7.467281,2.716184,8.882590,-4.421010,4.386248,5.334440,8.408691],[4.722673,-4.534108,1.838144,7.032192,-6.233936,3.972278,2.518548,-3.300018,-8.343431],[-8.922275,-9.141976,-2.273895,1.824783,2.403892,-0.747632,-3.952315,1.520971,1.215876],[9.715860,-9.848843,-1.560220,7.717402,4.907886,8.633342,6.359764,7.521237,3.794895],[-1.040817,-6.211254,3.956336,3.863497,-7.238133,6.410960,6.309032,-9.922976,-1.660108],[-7.968343,-1.923969,-7.961524,8.799129,-1.940575,6.220518,-8.556701,-3.949127,9.183542],[8.096505,9.623892,2.398740,0.196320,-9.575075,-4.525836,4.475087,-9.199886,-8.558030],[6.853111,-7.088965,8.026327,3.698446,-5.573146,-9.879309,5.351397,-0.422994,3.584800]],[[1.445237,-3.127762,5.157258,6.881340,5.810200,-7.888452,-6.202544,9.637799,1.510434],[-2.475499,3.536550,-4.628055,-4.588133,5.096808,1.293722,-2.228223,-8.694052,-6.280111],[5.219146,-7.428112,8.490230,3.316413,-7.641411,7.193175,2.116230,-9.135722,-3.299933],[-1.730956,-7.760250,6.745064,-8.637090,5.378788,-8.387662,-4.317586,3.031669,9.258043],[-0.676368,-1.913439,9.042860,-8.255305,3.921404,3.553794,-7.442585,-5.511426,-7.912507],[-0.637674,5.526719,2.393514,7.042921,6.357326,-3.146139,7.844433,9.979215,5.818884],[9.633062,7.788813,-5.092083,-8.522491,-4.009701,8.213752,-5.006513,-4.174438,2.387583],[-3.735052,3.816608,2.549297,-6.945169,-0.049980,-4.598896,-6.418309,-9.815828,-8.292855],[4.390585,2.121834,3.222231,-9.704028,-9.619255,1.694823,-8.979661,-7.023170,-1.593862],[2.796267,-9.870524,-4.751782,7.829862,6.176519,6.770610,-8.380557,-8.375899,-2.357208],[-3.646027,-1.079558,0.513944,0.616085,0.706254,-0.540799,1.361201,-7.009483,0.475918],[1.570602,3.485908,-1.090212,-0.556919,6.863938,-8.400736,7.332058,-0.990111,1.976932],[3.027132,0.545553,-2.388223,-0.163683,2.759336,-3.068733,-3.028856,2.544946,-2.940703]],[[-4.411134,-9.200874,1.313385,3.096326,-2.974305,-8.129103,-0.562055,-4.974439,-0.344892],[7.660929,-1.336308,3.899735,1.783476,-1.633742,-3.871420,8.230725,-7.867968,-0.161801],[-4.686433,-8.463256,-4.385979,5.916723,-5.918790,-1.662382,-3.863303,-9.225014,6.815099],[6.497425,0.622475,6.621814,-2.385585,-0.853371,5.465489,4.456742,-9.929057,-5.178010],[-6.565083,4.893975,5.569835,-1.705265,4.988046,-2.905332,-2.912825,-2.351718,-3.665728],[7.737394,-6.370818,7.097355,8.884635,3.041387,-7.237273,-1.428579,8.632888,5.259408],[5.101039,8.230686,-3.043907,7.543727,5.629395,-0.434338,-4.004345,6.411840,1.970212],[-1.090413,5.852315,5.229978,6.041421,-6.059673,0.267401,9.335224,0.008202,-5.417619],[-4.558089,8.936765,1.386645,5.083134,9.529440,-8.126746,2.286549,8.180045,-7.612275],[-1.707855,-1.749011,4.518455,5.212603,2.243998,0.647785,-5.429300,7.081343,4.544841],[-1.934853,-7.585562,3.667595,-2.807195,6.188706,7.827814,-9.198908,6.179220,9.328304],[5.981725,3.208518,5.132598,-9.166086,4.933699,7.417237,-4.494950,8.108118,-8.147245],[7.305295,-0.898311,-0.952625,-0.658313,9.986544,-1.324242,-9.735718,1.099663,-8.806141]],[[-5.579088,4.935087,-4.711200,3.458053,-8.272462,-0.858259,7.233131,5.168597,-2.060631],[-5.631860,3.272674,3.113242,-5.943354,5.587930,5.383087,-9.993376,-4.687839,8.259243],[3.216911,0.533107,-0.072163,-4.680413,8.211037,5.568711,6.111697,-0.731022,1.874358],[-5.063468,-5.827587,-9.351127,4.435676,9.489001,-5.527877,9.089778,0.257473,8.027440],[-4.506245,-6.524463,2.533549,6.028882,2.560933,1.889396,6.832812,-9.283500,5.935713],[-9.336344,1.688378,-9.135841,-8.770720,1.948951,-6.554103,9.118815,-7.697267,-2.071408],[3.149833,9.310973,-2.260583,-0.680930,-4.870183,3.830353,3.986171,7.906285,4.399855],[-7.659320,6.438773,-7.942233,-5.478435,-2.583886,0.783290,-4.773195,-0.619411,9.740435],[8.973802,8.434421,-8.615836,5.484134,-9.235322,-9.451193,0.211176,7.522046,2.275151],[-6.695516,-0.626103,-6.148210,-9.508330,-6.874704,-4.501995,1.173396,6.049026,-1.486510],[2.777864,9.956154,-1.279913,1.502600,-8.334325,-3.765835,-9.531056,7.309128,2.056827],[-4.571258,0.094001,-4.460618,-7.874127,5.829459,-4.497070,2.419278,1.475746,3.996096],[8.145343,7.173117,-8.103466,4.114210,4.643550,4.927418,-9.049741,-5.332629,-1.752913]],[[-4.798506,-8.728118,2.955407,8.020084,-2.423833,4.495604,-0.666455,-1.669748,3.868277],[0.258246,-5.492575,1.713802,8.440545,1.261494,9.252974,-4.073864,1.321028,2.864495],[-6.014819,1.894249,-0.546912,-9.959842,0.379666,-5.826964,9.774312,4.387555,-4.966731],[0.765145,8.263704,9.720938,9.223827,-7.773460,-5.191439,7.929799,-5.463363,1.940720],[3.632354,6.283790,7.002080,2.453762,6.609210,-5.228126,-2.615366,9.982401,-7.103982],[-8.209545,-0.907515,-7.378293,1.521504,6.783280,2.640828,-2.951430,4.820858,9.536105],[0.445196,3.130662,-8.341393,4.705344,-4.888627,-1.304805,7.678111,-3.064615,8.308321],[0.823088,-1.955572,-4.031735,2.340157,-7.114673,-2.619527,8.041904,8.490491,-1.717314],[-7.533311,-3.495283,-7.031524,-1.996998,1.643683,9.988698,6.282185,9.424154,-8.263001],[1.705048,-8.085909,-1.674289,-2.129614,5.388194,-5.113534,9.964884,8.045132,1.297421],[-9.035277,2.447994,-3.277905,-9.579509,4.419032,3.050308,0.364645,-7.071766,8.260775],[-8.442833,-8.156378,2.864066,7.463790,-7.648735,-7.209859,-1.064920,0.155818,-3.439174],[-8.084802,0.141402,1.049591,4.648623,-3.049388,-4.044843,-5.625514,7.280206,-7.817598]],[[-2.165631,6.011601,-1.478813,-4.525241,-4.027008,1.267480,-2.261913,5.684728,3.335629],[-2.879889,3.460196,-4.007554,-7.732901,-6.037640,-6.085759,-6.892220,-7.180609,7.093902],[9.988257,2.886110,1.631630,2.216308,-2.530156,7.120494,5.467080,4.685665,-7.206557],[-2.149058,-7.667317,-6.220654,-3.602666,4.588752,-8.528529,7.594770,1.364377,9.888059],[9.473114,-4.285065,4.515083,-2.342553,5.595553,5.628466,5.242151,9.074300,-9.415854],[-5.659334,-0.526071,5.371843,-5.315252,0.584996,7.011663,-2.416547,9.365236,6.959235],[1.845148,4.510887,9.111402,-3.234547,-4.666272,-1.091674,-5.768564,1.222805,5.284853],[7.177503,-1.628216,9.612288,-3.380334,-0.872637,-1.948037,-7.411655,5.805932,-7.425144],[4.760580,-8.514923,-0.092731,-1.641160,0.343733,-0.357167,7.529166,6.994352,-5.622539],[5.732273,-4.450052,-5.391407,4.486504,-9.083589,-0.827164,6.983570,-5.970001,3.650585],[4.504192,9.658958,-7.663108,5.501639,8.351277,9.217282,2.439755,-2.826198,-2.930353],[-4.690762,-2.955411,5.994322,6.577040,-2.136647,-5.249662,1.934523,9.794009,-5.258935],[-6.673953,9.909765,-8.465096,9.609944,-0.042459,-5.259205,-2.042306,-6.292890,8.700917]]], dtype = "float32")#candidate|739|(6, 13, 9)|const|float32
const_740 = relay.const([[[7.808464,-4.786641,1.290100,9.454761,-6.874898,-6.419907,6.915964,0.022873,-9.733450],[1.492463,-4.117187,-0.894518,-4.831443,8.858876,-9.489348,-3.551363,-2.277059,3.145900],[-0.702606,7.172718,-2.607537,1.136789,4.895739,-6.031374,3.101652,-9.998084,6.163637],[-1.543012,-3.462447,7.173262,-5.741048,-4.541756,9.976296,7.170921,-0.800295,-9.570673],[-6.234864,-9.781410,-9.156435,-1.181643,-2.138726,-0.025423,5.136789,6.046548,-4.193813],[-9.665283,-2.794342,-7.997500,-1.305573,-2.209869,-5.679999,4.626297,-1.911944,-6.320009],[-2.749408,3.258258,-6.647975,-4.616449,-8.774879,6.067417,3.729646,-3.618571,-5.662103],[9.039238,-1.513282,5.449055,-4.229153,2.773794,-4.282147,-8.686675,-4.717170,5.614178],[2.908133,-9.149322,5.401685,-0.050812,4.689361,-3.507208,5.420787,-4.163495,4.063333],[-2.593770,0.258644,3.420239,-7.413574,-1.463179,3.518876,1.832197,-3.101439,-9.449077],[8.012799,-6.608881,6.135965,-7.694385,-5.586306,-8.315536,-0.743960,5.064020,0.009370],[0.780529,-1.684719,-6.692535,7.584089,-6.985818,-3.102175,2.023687,-2.694106,-4.278993],[-0.089109,-0.496142,-5.315661,6.827519,-8.961111,-3.220614,5.101141,6.334441,3.921593]],[[2.235989,9.341580,-9.420356,-7.733371,2.722793,6.492198,5.863558,-5.196691,-5.619667],[-7.114864,2.141133,0.711150,-2.346472,1.524681,-1.754627,-6.469122,9.934270,-0.162107],[0.653238,7.717404,2.277453,-2.152853,-6.585927,-8.297946,9.385245,-6.933969,9.753815],[-1.645800,-9.523810,0.852846,6.256203,-4.495610,2.582134,-9.343663,-3.397597,0.375710],[0.211929,-0.334758,-8.137997,-4.197498,3.326614,-5.444373,-8.646295,7.365548,-8.060316],[-7.439061,-7.680356,-4.182374,5.906207,-7.878075,-3.469042,3.478266,2.551524,-6.324111],[-9.012858,-1.079421,9.792180,2.664415,9.785293,9.919499,1.979696,9.151809,-0.711523],[-8.875113,1.533730,5.477950,-2.785122,3.245457,-2.609892,-9.338956,-2.969174,7.463176],[6.950455,-4.675302,9.905697,4.861206,0.064684,-2.549159,-5.679907,7.946083,4.536261],[-2.230345,2.705635,8.112350,0.499020,-8.715194,-3.810122,6.387685,-7.781922,6.928830],[2.111919,8.259915,3.704296,8.225505,-7.226271,3.316616,4.418132,1.004304,0.497825],[4.226969,-2.449351,5.213052,6.209502,0.806652,-0.292520,9.375739,6.871117,-3.708861],[-5.170604,-0.803824,-8.459538,-3.141808,2.803585,-5.679840,-9.450138,4.555424,1.817338]],[[-8.311888,-7.868744,8.785737,-1.850789,-9.154183,8.306804,-3.125170,-1.914502,-3.623216],[3.426132,9.188698,-1.502946,1.972297,8.769020,-8.595318,3.903808,2.525900,-0.765098],[-6.127226,3.705049,-1.323887,9.606323,-6.628788,4.221564,-3.543866,4.479338,-2.867035],[4.929726,-5.912699,-1.239714,-9.422206,7.301945,5.670393,-6.892495,-7.941789,4.342782],[-1.423157,-9.170656,-5.728633,9.021639,-8.162961,-2.187902,-0.920994,-7.417031,-7.583853],[4.919402,2.084087,-9.027307,-6.358059,-4.417895,-9.235885,9.184045,2.790093,8.775790],[-2.856293,-5.128403,3.031601,0.463967,9.501750,1.411478,-4.832952,-4.828983,2.022876],[3.992013,0.558734,1.872621,6.338314,-9.654757,-7.166581,-1.125247,-1.748795,1.933148],[-3.703327,6.469025,-3.234053,7.305312,-3.580640,-2.411714,7.276024,7.394806,-0.341006],[-5.489581,-2.424498,-6.433770,2.490648,7.063355,3.388924,9.359174,4.724484,3.039720],[8.463570,-9.103965,-5.279755,-7.484269,-9.942953,-4.247191,-4.121999,-4.496353,6.747700],[1.252907,-6.117512,-1.624453,2.259535,3.003171,3.669722,-8.009523,1.520297,-4.191891],[-9.636243,2.469555,-6.816597,6.259385,5.499491,9.857013,-5.325487,5.108718,5.566003]],[[-0.983455,5.757223,7.156525,9.905289,-5.048603,4.887313,-9.978797,5.285672,-9.141694],[-8.330827,-5.303026,-4.658030,-7.604707,-0.446112,6.756598,-6.544664,-3.974441,6.011727],[-6.710933,2.618252,2.426982,3.643848,-5.709582,-6.977855,-8.945902,-3.854408,-4.586638],[4.573210,2.528629,-5.215984,3.012692,8.994805,-9.063333,-8.649748,1.242544,9.777693],[-5.099610,-7.238509,9.241245,2.281417,7.742830,-3.286674,-5.776381,7.009484,2.240814],[-5.764490,-8.775545,-9.272250,-1.626426,5.506887,0.152954,2.688372,0.434731,-5.847398],[-2.330924,-3.009606,-1.764204,4.344889,-7.764433,-9.675436,-9.333568,8.139274,-5.781866],[2.717609,-9.609522,-6.478968,-4.001607,5.371404,-7.680059,-1.353087,6.187580,-6.625084],[-0.416548,5.591780,-3.488007,-7.632379,-0.704163,7.214640,-1.087707,-7.016898,2.001986],[-0.257512,-6.411313,4.326738,7.529874,4.589208,6.651140,-8.844728,3.149437,-1.152121],[-7.091498,-1.431510,-5.047191,3.066594,-0.715166,1.272315,7.481006,0.567377,5.951738],[-6.092897,1.397977,-6.089668,7.747533,-6.499979,-7.160061,1.972345,3.972186,6.314055],[0.381410,-5.351055,-0.246175,-9.518809,7.063702,9.717155,-7.877504,-7.503484,0.042189]],[[-3.208316,0.529398,9.876600,-5.262315,-7.915037,-7.872417,8.389525,6.350407,-4.749467],[-7.431741,6.754920,-6.177301,-1.583215,-4.194444,-2.803785,6.399393,-7.720337,7.401696],[-2.101939,-7.189599,-5.530974,2.137373,4.385446,1.667352,-8.085293,-3.758953,-7.655695],[6.232712,8.344666,5.652370,7.485986,2.855006,9.583053,-1.382103,-0.511273,8.031949],[9.867402,-5.793092,5.788588,-2.860597,4.483692,5.914838,-7.552768,3.256870,-6.035873],[7.304673,2.346685,6.582806,-3.944868,1.042873,3.274359,0.479776,0.855603,4.149952],[0.292570,-1.943878,-2.942180,-9.917076,-9.094435,-7.164409,-2.706794,1.929657,-9.862606],[6.206466,-1.709289,8.453165,9.135406,-6.880705,7.445524,6.608867,-9.622123,0.360385],[6.910444,2.285574,8.321657,-4.857048,9.351203,-2.644118,-9.571269,-1.378540,-1.779696],[-5.281796,-4.392436,-4.227183,-5.655862,8.430668,0.785182,4.525036,-5.406416,9.678664],[5.935997,-7.743426,9.808707,-0.646239,-6.544068,-7.499881,0.237895,-6.421055,8.240142],[4.863302,-1.131100,-4.009953,8.528119,-3.529550,-8.440408,-0.747334,4.096571,3.293773],[0.428941,-0.781766,-9.841665,-1.119685,-4.263741,-1.816600,9.046092,4.292900,-4.580273]],[[7.009443,-4.207932,9.290259,6.856334,-5.032309,-2.887584,5.539064,8.137376,6.249499],[-5.018400,2.456360,-8.067640,6.326429,0.368720,7.394114,-9.861610,-3.115348,-7.952781],[-3.364599,5.346010,-9.084947,-7.194370,9.194632,-2.892601,9.080018,-5.966887,7.983327],[-9.620325,-8.750687,5.641762,5.301017,-7.686990,-9.927032,-2.715304,0.546614,3.317969],[5.171012,6.589685,-5.350740,-9.749662,0.548308,-2.011204,3.671459,1.763887,5.758636],[-1.694418,-6.211310,-3.154543,7.830400,2.447038,-8.219213,9.429551,-4.702517,-9.970294],[-3.904796,9.719336,0.169723,-1.291772,-3.692291,-0.317513,-2.742797,2.791987,7.748672],[-8.736058,-8.238001,6.491981,-2.458154,-0.111533,-6.638430,1.567928,6.568865,-0.210005],[7.142540,-1.180442,-7.780395,9.352590,6.081460,6.815782,-4.588677,3.130063,-2.580719],[7.112040,8.862930,6.576521,-1.772416,-1.336575,8.100082,-1.441057,1.859694,2.592250],[9.332748,7.143402,1.933298,1.664529,-0.358515,-7.552091,-7.716880,2.352353,8.918032],[8.577794,-4.250520,-9.335106,-4.511243,-1.565773,3.049224,3.555374,-2.165936,8.042707],[3.773356,0.473161,7.032644,-7.599141,9.841765,-6.804687,0.459043,-5.864624,2.348004]]], dtype = "float32")#candidate|740|(6, 13, 9)|const|float32
bop_741 = relay.greater_equal(const_739.astype('bool'), relay.reshape(const_740.astype('bool'), relay.shape_of(const_739))) # shape=(6, 13, 9)
func_396_call = mod.get_global_var('func_396')
func_398_call = mutated_mod.get_global_var('func_398')
var_746 = relay.var("var_746", dtype = "bool", shape = (2240,))#candidate|746|(2240,)|var|bool
call_745 = func_396_call(relay.reshape(var_746.astype('bool'), [10, 16, 14]))
call_747 = func_396_call(relay.reshape(var_746.astype('bool'), [10, 16, 14]))
output = relay.Tuple([bop_741,call_745,var_746,])
output2 = relay.Tuple([bop_741,call_747,var_746,])
func_757 = relay.Function([var_746,], output)
mod['func_757'] = func_757
mod = relay.transform.InferType()(mod)
mutated_mod['func_757'] = func_757
mutated_mod = relay.transform.InferType()(mutated_mod)
var_758 = relay.var("var_758", dtype = "bool", shape = (2240,))#candidate|758|(2240,)|var|bool
func_757_call = mutated_mod.get_global_var('func_757')
call_759 = func_757_call(var_758)
output = call_759
func_760 = relay.Function([var_758], output)
mutated_mod['func_760'] = func_760
mutated_mod = relay.transform.InferType()(mutated_mod)
var_853 = relay.var("var_853", dtype = "float32", shape = (14, 12, 8))#candidate|853|(14, 12, 8)|var|float32
uop_854 = relay.sinh(var_853.astype('float32')) # shape=(14, 12, 8)
output = uop_854
output2 = uop_854
func_868 = relay.Function([var_853,], output)
mod['func_868'] = func_868
mod = relay.transform.InferType()(mod)
mutated_mod['func_868'] = func_868
mutated_mod = relay.transform.InferType()(mutated_mod)
var_869 = relay.var("var_869", dtype = "float32", shape = (14, 12, 8))#candidate|869|(14, 12, 8)|var|float32
func_868_call = mutated_mod.get_global_var('func_868')
call_870 = func_868_call(var_869)
output = call_870
func_871 = relay.Function([var_869], output)
mutated_mod['func_871'] = func_871
mutated_mod = relay.transform.InferType()(mutated_mod)
var_942 = relay.var("var_942", dtype = "float64", shape = (12, 9, 2))#candidate|942|(12, 9, 2)|var|float64
uop_943 = relay.sin(var_942.astype('float64')) # shape=(12, 9, 2)
func_573_call = mod.get_global_var('func_573')
func_576_call = mutated_mod.get_global_var('func_576')
const_947 = relay.const([-7.853601,4.100824,-4.559920,-6.820230,7.056142,9.102817,-7.915568,0.463837,-4.948908,-5.477485,-3.815994,0.911795,-9.829386,6.438455,-7.959435,-3.899075,-8.059848,-5.485562,-5.045516,-1.013972,-2.843712,-2.939708,-7.214511,7.474349,7.920486,-4.644887,1.091732,2.552338,1.884117,1.893542,9.871479,-6.811395,9.369661,2.000734,9.724276,5.692121,1.213673,8.587241,5.667520,-7.349219,-6.537092,2.298870,-2.000486,9.742133,9.573781,2.633571,-2.723626,2.258684,-2.938965,9.458934,-0.900249,-1.343624,-9.055350,5.612449,-2.300015,4.675851,-4.885056,-6.579029,5.311535,-0.122949,-8.197167,5.151931,-9.529873,-1.811815,5.296823,-5.818423,8.432743,9.119947,-3.153776,9.584355,-8.074200,-7.081179,0.021127,6.490923,-0.203506,-9.243851,-3.499585,-2.710525,-6.836048,4.463419,-9.495310,3.131103,-5.147231,-4.778655,9.252051,4.834640,-4.372757,-6.055520,-6.058604,-0.628684,-4.038820,9.082546,-9.062453,7.326658,0.337586,6.926260,-1.180571,4.884938,4.293843,-7.964606,1.599732,5.500050,7.221650,-9.314873,0.527725,-2.058147,6.983586,-3.775818,2.302777,-2.942793,1.712847,6.704843,-1.367451,-2.148898,-1.435680,-6.437090,1.217703,0.346631,9.672173,-2.911921,-2.901866,-6.188077,2.756982,4.855236,-6.338575,3.344572,0.568046,-9.403282,5.059265,-3.916379,8.980513,5.721436,-8.794206,8.679313,-9.681473,-4.140825,-9.410991,-9.786688,-1.957795,0.798461,2.117169,-8.799394,6.591019,-3.322538,1.522872,-7.792280,5.945790,4.841777,-8.896685,-9.051899,6.976036,9.646309,0.376510,4.107644,6.322440,8.807110,7.006590,-1.457276,-4.055146,9.928171,4.822641,-4.894356,9.143978,-6.470043,-1.394504,6.516712,5.135301,3.365645,-2.413522,-9.987935,7.599377,8.785181,5.214990,4.514351,-3.403243,-4.998182,-6.611643,3.599657,-4.459291,0.937260,-8.056674,-7.629959,4.003961,-4.323601,-4.315167,-7.487242,-6.591481,-5.683977,4.831464,5.329294,-9.525947,5.851346,-1.337050,2.192266,-3.030031,0.593647,0.349230,-1.330677,-1.806851,-2.325224,-1.961829,-6.503929,-5.711031,-2.169519,6.648862,-3.524173,3.924205,-7.193721,-8.491632,3.493035,4.259566,0.038704,-7.169182,5.241764,-3.822410,-5.002287,-2.194617,-1.648037,1.740394,-4.279991,-8.983321,8.471709,-0.321444,-1.474626,7.206799,3.379071,-8.825330,1.240780,9.884018,9.961943,-7.840243,-6.079065,1.393722,-8.691438,2.484976,2.108769,8.715047,-0.649560,-6.221478,-9.023490,-9.977815,-7.750174,-4.210094,3.679710,0.701118,3.243679,-1.238009,-0.072401,-1.895642,3.033862,-9.852326,-0.892985,7.017905,1.236741,3.451707,5.175532,-6.835350,-2.251748,6.261077,-7.049480,0.578368,-8.321462,8.055570,4.177626,8.160530,7.408686,6.125395,4.078956,-7.653894,-7.502712,-1.287452,5.124345,-4.486636,2.253168,-0.317139,-4.085691,-7.217123,0.580530,8.155312,0.095029,4.984410,-1.065614,-1.079256,5.711736,4.445378,-7.835299,2.868600,-8.351164,-1.848905,1.531663,1.307284,-3.321361,0.310818,5.276647,-3.554393,9.555590,7.186483,-9.016932,-4.448355,2.389663,5.176507,0.743518,0.789513,-7.964793,-5.171266,-4.352248,6.381928,6.140401,7.308217,-9.265648,9.714931,8.302766,4.670034,6.864260,-3.121745,4.286822,-1.290689,-4.411851,-8.569325,2.401179,6.586857,-1.032906,-4.538461,6.614294,-5.036979,4.196377,2.849040,8.387238,-3.534729,-6.477224,4.269399,1.511524,9.115631,1.011837,-6.247276,-9.104813,5.138893,6.581958,-3.536184,1.044873,-1.531083,-7.378040,9.351190,-6.550298,-1.730900,-2.224549,1.267300,-2.953904,-0.625760,-7.772084,-4.390717,-2.827778,-5.866039,-3.557182,-4.209106,0.103022,-9.656222,-0.053710,0.079925,-7.954609,-2.729088,7.361782,-6.654753,-3.540528,-7.919672,2.227514,9.866040,-5.506956,3.896362,-3.317301,-1.450345,-9.114375,1.633261,-6.619371,-1.285834,0.219135,-3.784182,-7.261594,-6.325073,6.645028,9.432734,1.402866,-4.762348,-8.890685,-6.649861,1.872971,9.412945,-1.121850,-4.703596,1.647784,5.692703,5.333175,-0.043566,-6.268710,-2.225901,8.763508,-6.216942,-9.246447,-9.342727,0.913100,5.512711,0.214750,-6.007139,-8.498797,-8.466168,0.718245,-0.990413,7.618308,-9.032494,4.081128,9.846255,4.257401,0.513720,-3.121976,-2.373454,3.949649,-7.605066,-1.017906,-8.629213,-6.135427], dtype = "float64")#candidate|947|(420,)|const|float64
const_948 = relay.const([True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False], dtype = "bool")#candidate|948|(2240,)|const|bool
call_946 = relay.TupleGetItem(func_573_call(relay.reshape(const_947.astype('float64'), [7, 10, 6]), relay.reshape(const_948.astype('bool'), [2240,]), ), 2)
call_949 = relay.TupleGetItem(func_576_call(relay.reshape(const_947.astype('float64'), [7, 10, 6]), relay.reshape(const_948.astype('bool'), [2240,]), ), 2)
func_868_call = mod.get_global_var('func_868')
func_871_call = mutated_mod.get_global_var('func_871')
var_971 = relay.var("var_971", dtype = "float32", shape = (1344,))#candidate|971|(1344,)|var|float32
call_970 = func_868_call(relay.reshape(var_971.astype('float32'), [14, 12, 8]))
call_972 = func_868_call(relay.reshape(var_971.astype('float32'), [14, 12, 8]))
bop_974 = relay.greater_equal(uop_943.astype('bool'), relay.reshape(var_942.astype('bool'), relay.shape_of(uop_943))) # shape=(12, 9, 2)
uop_985 = relay.erf(bop_974.astype('float64')) # shape=(12, 9, 2)
output = relay.Tuple([call_946,const_947,const_948,call_970,var_971,uop_985,])
output2 = relay.Tuple([call_949,const_947,const_948,call_972,var_971,uop_985,])
func_987 = relay.Function([var_942,var_971,], output)
mod['func_987'] = func_987
mod = relay.transform.InferType()(mod)
mutated_mod['func_987'] = func_987
mutated_mod = relay.transform.InferType()(mutated_mod)
func_987_call = mutated_mod.get_global_var('func_987')
var_989 = relay.var("var_989", dtype = "float64", shape = (12, 9, 2))#candidate|989|(12, 9, 2)|var|float64
var_990 = relay.var("var_990", dtype = "float32", shape = (1344,))#candidate|990|(1344,)|var|float32
call_988 = func_987_call(var_989,var_990,)
output = call_988
func_991 = relay.Function([var_989,var_990,], output)
mutated_mod['func_991'] = func_991
mutated_mod = relay.transform.InferType()(mutated_mod)
var_993 = relay.var("var_993", dtype = "float64", shape = (3, 14, 15))#candidate|993|(3, 14, 15)|var|float64
uop_994 = relay.asinh(var_993.astype('float64')) # shape=(3, 14, 15)
output = uop_994
output2 = uop_994
func_1006 = relay.Function([var_993,], output)
mod['func_1006'] = func_1006
mod = relay.transform.InferType()(mod)
var_1007 = relay.var("var_1007", dtype = "float64", shape = (3, 14, 15))#candidate|1007|(3, 14, 15)|var|float64
output = func_1006(var_1007)
func_1008 = relay.Function([var_1007], output)
mutated_mod['func_1008'] = func_1008
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1180 = relay.const([[[8.381675,-8.374956,7.846595,-9.783379,5.759730,-3.504050,-6.831871],[-6.170645,-6.483243,5.833797,-7.263165,7.255256,5.290512,-9.133231],[6.368015,8.798308,6.161856,-9.098613,-2.273228,7.315382,-3.021211],[-6.371046,0.653933,1.986734,-9.536925,-8.694645,-3.449034,-6.492899],[-5.143590,2.424531,-6.962793,-4.569911,-2.495272,7.886672,0.609883],[-4.241638,-6.799603,-0.957656,-0.327309,8.091078,-4.676237,1.115054],[0.735595,1.825432,-8.095514,7.421584,8.287975,-2.120625,-5.403959],[8.250901,-7.845112,-9.946193,-5.394863,-4.629182,-9.501369,3.824839],[-3.678980,-7.542417,-8.276095,8.513241,-9.328271,-7.478084,-7.518544],[2.784178,-0.313523,-9.749929,9.279079,7.674398,3.299192,-8.512708],[4.019517,-6.428822,-4.272727,9.833499,-1.194147,-3.194526,-3.839898],[9.615738,4.439784,9.368555,6.840986,6.826673,-9.858406,-7.276118]],[[-6.441410,-3.236904,9.754820,6.711726,7.436789,-8.361301,9.411813],[-9.509041,3.626537,-8.640308,-7.410868,-7.130673,8.691993,-8.194008],[-8.575180,2.466277,4.600336,-4.379611,9.581413,1.720764,5.475046],[-2.081295,-2.106140,-2.112515,-0.603337,-4.391280,-6.024066,-1.863969],[-1.752210,-4.818175,-7.957023,-5.523008,0.708571,-7.284262,-1.052012],[1.635603,8.457338,9.839350,-6.097578,-0.727628,-3.056698,4.324218],[2.835591,0.196426,0.966731,5.506439,2.126068,1.572158,-2.343283],[1.670643,5.706500,-4.520441,3.486112,-8.724255,8.270015,-1.023240],[-6.244467,6.699551,-1.243867,9.392513,-6.858883,1.191872,-3.860935],[-5.918502,-4.194124,-3.489483,-7.159941,-6.013490,-9.483447,7.529225],[9.946162,1.462109,5.702900,-0.484875,4.536838,3.106164,-2.528969],[-6.943821,-4.147887,1.376601,-5.569407,-5.018173,4.410837,-7.078928]],[[-8.633342,5.183145,-8.484817,7.659725,2.408144,1.448322,8.237842],[-7.896129,9.722421,3.032100,0.185805,-6.571477,-4.468443,-9.707867],[2.800567,6.594907,-3.633888,-7.491756,6.054469,6.071673,5.459706],[-8.735729,8.010864,-7.454746,5.359027,-1.445069,-6.386607,-2.327452],[-1.529354,-2.318412,-5.376183,2.788765,9.363483,5.874398,3.113537],[9.217432,6.929041,5.881500,9.579144,8.705364,4.940223,6.435951],[-9.256332,-6.648552,9.551399,-6.749605,-6.471031,-6.197703,6.379372],[2.736478,-8.715731,9.053180,-8.383159,6.366872,-0.866845,-8.388036],[-9.325494,-0.461456,4.655253,3.351082,3.663096,-3.311177,2.159655],[6.466973,-1.470439,0.202407,-5.784543,-2.256335,-8.914280,-4.351996],[-6.809147,-0.598338,-1.624933,9.010448,-6.498097,-1.821943,4.931480],[3.492818,-4.553646,4.016501,9.481846,6.837370,-2.522368,-4.541779]],[[6.974065,1.364540,4.220867,7.369498,-1.116143,-2.275369,0.860081],[5.565986,9.654054,-4.466294,9.938576,6.683699,-8.651528,-2.859080],[-0.493815,6.649440,0.499082,-8.431358,4.607708,1.598611,-6.106552],[-7.213835,-6.423654,-1.307967,-4.422239,9.433494,1.604999,5.318617],[-4.457600,-2.656142,-4.224927,-1.044318,-0.297120,7.846462,-7.922257],[-1.437489,-0.726247,0.793430,-0.322907,-2.781931,-0.452419,-9.979668],[-7.746202,7.511648,-3.641652,-5.011040,-8.358692,-0.548830,6.948788],[-2.256261,-9.932549,-9.371135,2.779683,-6.504872,-3.390980,-2.274115],[-2.739860,-1.101877,-5.906003,1.673463,2.117199,-8.438967,8.763747],[-1.058888,-2.823532,-3.989560,0.614689,8.638561,-8.005306,-4.585896],[-3.509820,5.799826,-2.146371,-4.293368,-2.928904,0.952204,9.936516],[9.953013,-6.488544,8.469107,-1.371661,-2.991079,-1.992033,-5.321973]],[[7.667803,9.860881,8.188225,-5.171757,-9.922159,6.885171,9.618739],[-6.827995,-3.617759,8.798835,-1.407546,6.631597,-3.792879,-4.189082],[0.119276,-0.071643,-5.408684,-1.391897,-4.727990,5.878446,6.413012],[7.027223,4.519371,8.793851,4.205969,-4.112599,5.595431,-4.446015],[6.648003,3.230107,0.069130,9.676626,6.369456,-8.962743,2.209055],[8.131079,-2.414329,3.856788,-3.189784,0.256509,5.272676,3.464756],[3.942764,-5.868013,7.921592,5.190469,7.833570,-1.261032,-7.802719],[3.582260,-2.104191,6.760570,3.461168,-2.159351,3.011890,-1.230141],[7.877809,-3.032681,8.774053,-0.429029,-6.903289,-0.390618,-8.042886],[-7.367573,9.160358,-4.871376,-6.049650,-1.980507,-3.991306,-7.288537],[-9.403269,-0.589780,-7.627482,-2.003789,-6.412143,-8.742138,-8.548288],[-1.146086,5.321053,4.881509,-3.417232,-4.485686,2.557297,5.163533]],[[6.067339,-5.843244,-7.487816,-9.020091,5.351533,-5.751027,5.788239],[-3.389858,1.152764,-6.843833,2.582951,7.014737,-8.787626,7.956987],[-8.344697,0.966065,-9.205463,5.503623,1.032012,4.225595,-1.903294],[-4.965911,3.280890,6.184372,9.471959,0.997242,-5.402189,4.295372],[3.720258,-4.578574,5.184136,8.919424,8.144126,-9.568478,-9.522167],[5.824244,0.377850,-8.524621,-3.136034,-5.260149,-1.141861,7.883378],[-8.123494,0.366264,4.841973,-5.937224,6.510307,-3.773875,-1.108704],[8.539709,-2.138604,-3.719076,-6.231058,-0.706506,-0.487881,0.382420],[1.709502,0.345311,9.212638,4.816600,8.644936,1.370395,7.544777],[5.379749,-3.562164,8.409409,-0.685533,-0.902343,-1.235094,6.057224],[4.422898,0.408815,1.460656,8.589077,4.916371,6.410408,-8.321371],[-0.764942,-4.468962,2.605516,-3.495431,-3.649308,-2.830667,-2.883028]],[[1.050563,-7.619019,-9.440236,5.740735,-0.917912,-1.832667,2.690106],[-3.164276,-8.461895,-2.090474,8.023650,1.614007,-4.447453,-5.091048],[-8.996795,6.879615,-2.108418,7.780710,-2.499212,2.901888,1.180218],[-3.593067,8.637721,-4.923629,1.820127,3.552264,-0.727501,4.167128],[-7.196529,-7.529685,-1.305852,-8.378834,6.489566,2.472428,8.434500],[-2.788205,-4.982194,2.530010,-5.088751,6.974241,-3.359847,-3.810520],[8.945272,1.528159,5.375708,-2.125490,-6.340622,-6.460362,-3.030083],[5.154269,-1.224596,-8.128406,-2.071116,8.329906,4.153040,3.354398],[5.544531,2.123717,8.641780,-9.983592,-4.538564,-7.555165,6.851315],[-8.826507,-4.121252,4.903275,2.322339,7.029276,-0.428893,-7.697314],[1.841471,8.206635,1.655573,5.622073,-3.644685,5.918837,-5.111015],[2.248578,2.169045,-0.337683,5.358432,-6.254943,2.630691,-8.599802]],[[-9.981869,-0.641022,-6.370311,-0.651337,-7.859132,-1.342173,7.435200],[4.596490,6.442381,-9.112060,-2.774395,-8.108921,-1.905717,-6.051789],[-3.782743,8.082482,-7.844219,-9.472820,-6.756182,-0.863166,-4.232033],[9.744433,6.568626,-6.863660,5.769461,6.200891,5.962167,4.011257],[-9.893140,6.740013,-7.979810,-6.316411,-6.893416,-9.135284,6.613376],[5.129701,0.478500,-9.125678,0.350508,-5.726669,2.165567,-0.129523],[8.869193,-0.564005,-5.001641,1.732324,3.760678,3.077989,-5.810065],[-4.667589,-4.995647,-2.500634,-4.555503,-3.344955,0.918226,-3.768353],[-6.669466,6.910051,-4.894713,-8.795913,3.624569,1.035070,1.737845],[2.989196,-2.241331,1.141772,0.766467,7.692691,-2.651269,-0.758002],[-9.593370,-7.978118,2.724436,-1.756862,-9.439494,-9.651086,-6.716940],[-1.521942,-7.477634,-8.719320,4.284464,-0.333861,2.890923,-0.214156]],[[9.973575,0.417662,1.154796,6.851552,4.228261,-8.182493,-5.008155],[8.125836,-8.365184,-3.285102,3.191472,-0.374865,-8.747106,-3.777794],[-7.541880,-3.595345,7.975289,3.800331,8.581493,3.266713,-6.238750],[-1.101632,6.443440,-8.624498,5.100400,-0.927490,6.514989,4.908137],[5.351155,9.268278,-7.142809,-4.965597,7.358063,-5.685005,-3.798743],[8.480533,2.257855,8.166108,6.649566,3.200352,-8.769337,-7.001936],[-4.573642,4.542877,7.264299,7.350686,-1.276436,8.172957,3.799457],[6.938913,5.886061,-6.712998,-1.494631,8.521163,9.817875,1.079417],[7.089442,3.853190,2.196871,3.265699,3.272198,9.825520,-7.200760],[6.322432,-5.485534,0.425920,0.770763,4.603587,9.863205,-7.555049],[7.763340,-9.419144,5.708888,-3.796276,4.394902,3.218439,-7.637908],[-7.685764,6.571959,-8.886769,-7.709558,9.074891,6.764871,-8.609186]],[[-8.588422,-2.508075,-7.350336,-5.335675,-2.529218,-4.279356,-8.914091],[9.920514,-6.155392,-4.461999,4.195914,-7.224954,-9.207953,-2.460717],[-4.395667,1.563659,6.799827,-6.294809,-5.283270,7.399393,5.360268],[-9.476453,0.155021,-9.880034,-8.374778,0.538944,4.884356,9.409648],[1.027208,2.532403,-6.729652,-9.700023,-1.128436,7.824320,0.495975],[-3.974522,0.188944,5.498011,-6.544027,-2.330251,-4.742395,-7.897629],[3.790136,4.222786,1.943620,-7.499714,8.297514,7.198014,8.361505],[5.065346,0.614342,7.614453,-3.412151,2.533005,-9.796789,4.548117],[6.991810,-5.562155,-4.042162,-9.694436,6.600625,3.643723,0.394968],[-1.769858,-1.601801,-7.825221,9.926933,-0.102039,-6.168406,-0.042789],[9.714513,0.147689,-0.266139,-1.200615,9.025918,-5.797159,5.978604],[-4.231477,7.310965,-1.372470,-7.455918,5.468924,-5.658402,4.947983]],[[-5.965464,-4.672336,-5.144362,-0.420663,3.232514,2.227895,6.320315],[9.735295,6.498562,-4.776493,8.574272,-5.419638,2.206752,2.459189],[1.550732,-5.384585,3.824782,-1.017122,-2.940556,-1.067177,1.082679],[-4.987726,3.719936,8.878649,6.867157,5.037989,-5.549987,-1.708519],[-6.067275,-3.609523,4.984928,2.346240,1.428931,-6.884478,-8.412131],[5.104656,-1.696195,9.423915,-3.858989,-6.927886,-3.502190,-0.095703],[-3.924392,-7.936755,-2.258299,-9.576828,7.077233,-4.565294,4.274477],[-6.022411,2.882416,7.336755,4.086993,-7.100375,-1.718939,-5.169768],[-7.453071,3.276416,5.420080,8.567412,-3.658123,9.968705,9.534217],[-0.375196,-1.037480,2.334513,2.477024,6.520471,0.795631,-4.344459],[7.352728,-0.562570,4.668406,-7.910159,6.906829,-6.508633,2.958536],[4.364080,-5.727722,-9.739095,-4.012316,-1.357951,-8.182910,-1.713220]]], dtype = "float32")#candidate|1180|(11, 12, 7)|const|float32
const_1181 = relay.const([[[4.528516,4.692822,3.561940,-9.372944,-8.160515,2.338503,7.822407],[-6.154175,-7.041707,7.413997,-5.945953,-1.852079,9.334761,-9.473038],[-6.170537,-3.747159,-8.019605,1.870630,-0.480372,7.058112,5.912870],[1.346420,-6.746048,4.849027,-5.249042,2.787855,-6.067752,-8.431918],[-1.970143,7.051823,-5.025187,0.748730,-2.813129,-2.544237,-6.011678],[7.451868,2.008915,-0.733240,-2.429268,-6.628789,-7.323038,7.357059],[8.134465,-3.248422,1.113228,-2.617326,4.658809,-7.676731,-9.375367],[-1.717657,2.204866,-4.015134,4.960632,-4.209745,-8.504266,-8.218034],[-0.821963,1.851243,9.674234,3.537815,3.331660,2.655795,3.208804],[-1.074265,-1.177715,-7.971999,-6.911111,-8.608266,-9.052913,-7.598523],[6.050358,0.664422,-6.713827,8.147986,1.550190,-9.881829,-8.988023],[4.132283,-0.828560,7.679044,3.362035,-4.354815,-8.771861,1.882815]],[[0.779310,6.463946,-4.423238,-5.714441,9.338475,0.857695,-2.032283],[-0.272973,3.698342,7.955984,7.777809,-8.786832,-4.320071,0.621712],[-6.006974,9.499676,-0.780086,-6.661200,-3.679534,4.878222,2.401280],[-7.846852,8.621449,-4.208414,-6.485488,-1.817084,9.955519,-4.370303],[5.033296,-4.282434,-9.457353,1.957317,9.496612,-1.176130,-8.251825],[3.101741,-6.417587,5.557285,-7.042603,-0.429013,7.863867,2.703390],[3.715282,2.005581,7.873708,-0.797898,8.764040,-8.403985,-0.784458],[-3.436359,-6.572057,-6.418385,1.077291,-5.296607,7.829289,4.968003],[6.089461,5.967686,-7.791955,0.778900,3.908307,-1.312642,0.777913],[8.338274,3.269968,-4.862497,0.807925,-5.835232,5.028013,6.658903],[3.509945,2.922321,4.606653,5.002743,2.234591,7.197587,4.204484],[-5.578076,-3.002158,-8.262305,7.576573,6.326743,5.638746,-8.296385]],[[3.915603,4.792363,-6.402543,1.510399,-9.407014,5.362009,-3.709986],[-6.548137,-5.998848,-7.809281,-0.150349,-8.581555,-0.463979,-4.968720],[2.174687,-1.120908,-8.964771,0.069966,-3.365399,-3.002441,-5.883362],[1.413740,-6.159173,-5.018009,-2.415020,5.580430,8.484677,-1.465617],[-4.791046,1.227740,3.918124,-0.664566,9.968002,-7.746228,-6.819954],[-5.385859,5.965704,7.613679,0.271866,-4.287135,9.676426,-2.265044],[-2.092437,-7.808035,-8.186269,-3.258130,7.048118,5.982641,3.463088],[-3.764763,5.510784,-1.108544,-0.320472,-5.531260,7.536795,7.316478],[1.426826,2.197376,0.574359,-9.336373,6.039522,6.809621,9.742832],[9.351410,8.579572,-0.966245,8.425483,8.533060,0.027125,0.968099],[-9.009764,6.566429,4.652294,9.820339,-2.818094,-6.799535,8.369496],[-7.445959,-0.246716,7.299512,4.168623,-8.285336,-9.178753,9.338371]],[[-2.237165,-7.477951,5.542669,-7.519341,-8.527902,6.636992,0.344082],[-8.893301,-5.074456,0.784797,-7.473300,-9.099964,-5.590997,-9.356041],[-1.573791,-9.733596,7.202397,8.350348,-5.091681,4.241479,-9.715300],[7.690264,-6.311966,-5.474592,-1.535377,2.229917,-1.119224,1.621052],[1.901519,0.946092,1.615397,-2.107681,-4.700010,1.178556,6.224272],[7.395317,-8.108390,9.411056,-3.620258,4.448481,3.026778,9.920042],[-7.188908,-9.541912,6.371775,7.416066,-1.961277,2.940613,3.111385],[0.903565,6.099333,-8.208869,-7.030642,-1.113088,0.795112,7.159433],[-1.344913,-0.808328,6.628609,-9.265212,-9.350517,8.724113,3.149802],[0.447327,-2.495484,5.153069,3.610717,0.695356,6.075585,-6.278904],[3.124787,7.558048,8.814894,-4.221624,6.296513,2.435222,-5.525046],[-0.518292,9.754866,-9.807268,-4.162885,1.580329,-5.764111,8.665555]],[[-0.370289,-7.738923,-5.831302,9.516549,-2.211272,-6.121148,5.159993],[5.141383,3.449219,0.533093,-3.526458,-9.921727,-0.609530,-5.184294],[-0.331196,-4.324572,-7.962300,-7.351438,6.603233,-8.412330,6.372720],[0.883999,-1.360903,-6.586225,-9.109107,-2.701476,6.278155,5.326225],[-1.495944,-9.886355,-9.786661,8.154066,-2.708472,4.905345,5.982025],[5.652646,-4.320061,0.307990,4.171433,-7.951804,-6.248905,-4.360269],[4.530847,6.504608,-6.246252,-0.841313,-8.786668,9.879204,2.186365],[-4.802621,-1.854992,0.100598,-7.550858,4.378825,-1.666158,2.949776],[-6.568122,5.523595,-7.326995,1.348261,-2.444815,8.966062,9.681492],[0.113222,9.921699,7.569162,2.396613,-9.783810,-2.581132,-3.491407],[-3.475425,8.286786,9.326240,-0.266331,4.110975,-3.563917,-9.256590],[-0.217318,-5.640901,-9.691532,-2.474925,5.882042,6.732400,8.868786]],[[9.588349,-0.820016,-7.538710,-9.339985,-1.071698,4.942495,-5.679155],[-8.675094,3.035224,-3.188456,-9.036821,9.635953,0.248344,2.898690],[-8.766607,-9.904187,-3.087123,7.930339,-4.676049,-8.380624,6.981208],[-9.898536,-7.648014,-4.060747,3.367780,5.080906,2.635005,-2.520697],[-0.112502,8.414177,1.206775,-8.353295,3.549661,-2.515237,-8.666721],[-4.802174,-8.518572,4.478795,1.566576,-3.071578,1.165736,4.777272],[-8.447426,0.542597,7.355160,8.268873,-5.902214,-1.523599,-5.636173],[5.416717,1.033072,-2.625211,-3.430589,-5.744965,2.383085,-6.031382],[0.389601,0.072174,-9.653888,-7.999936,-7.912674,-6.818317,8.797805],[-4.230134,3.990740,-9.312155,1.147926,-0.763184,5.534486,-1.670717],[4.056551,7.372656,-3.315050,-3.428207,1.094105,-5.251879,-5.657252],[-7.200503,2.358450,7.094166,-5.197462,2.693487,-8.163511,1.234957]],[[1.895039,-3.456991,-3.128274,3.731798,4.375333,6.289303,-0.806575],[-8.487707,-6.148023,-0.376428,0.876306,-3.062221,-6.903184,2.453414],[1.448556,-7.069329,-1.516248,9.378738,-5.635477,7.600579,-6.298813],[-5.257118,-8.065631,-4.876576,6.663618,-4.429977,-0.778755,-3.730210],[1.655690,-6.556300,-1.655073,5.714942,1.663656,8.865935,3.391080],[6.819772,-0.614469,-8.706225,-4.556627,6.642467,1.191336,-9.885367],[6.039608,-8.499586,5.874807,7.215051,2.532352,-8.639315,-1.049873],[-8.475894,2.376532,4.121562,7.729855,-0.932196,-3.309173,5.410707],[-7.440147,-1.847616,-6.503648,-4.019088,2.039517,8.144412,-9.387778],[9.148654,-5.843185,-8.974383,-2.611809,9.202023,0.076281,0.724374],[5.464328,5.586756,3.308893,1.378364,0.839937,4.400488,-7.996890],[1.660352,-1.070512,5.020143,3.643688,-8.130074,6.019360,2.064323]],[[-7.571585,7.381999,-0.622135,9.209439,-0.545033,0.736245,-4.725667],[-8.451492,-7.114785,1.331081,-9.488419,2.670882,-5.824839,6.481118],[5.828166,-8.489145,-8.135008,1.219345,-1.901392,-5.759909,-4.248126],[-5.317797,-7.701006,6.185340,1.507523,2.832918,7.112966,1.182832],[5.801875,7.242511,6.533573,-1.470206,9.923982,-8.714946,-8.721541],[-5.527054,8.522702,0.684382,4.854352,-3.144863,1.058048,9.497405],[-5.705520,-6.335471,4.810220,-6.113026,3.147875,-3.655256,-6.630947],[-4.713580,8.242494,7.422011,-0.012834,-3.651148,3.392624,-5.334315],[3.374903,1.909867,-9.885798,5.692559,-0.832526,-4.160872,-2.665165],[-4.786278,-5.381724,9.256850,-5.938553,-7.803422,8.878783,-1.943128],[9.426436,9.360866,-1.156088,-0.660896,-1.950831,7.416762,8.683963],[-5.500569,-6.096911,-6.327207,3.147662,1.544332,8.502703,-8.857358]],[[-5.673262,4.249251,5.014775,-6.326138,-4.463029,-1.568000,-9.937141],[0.903476,-2.718821,5.461202,-1.929712,6.474342,4.449096,4.559031],[-2.663626,7.770094,3.303245,-8.196870,4.084765,-2.099480,3.857175],[-7.011412,-2.903676,1.325213,3.151784,-7.108211,-7.429622,-9.680742],[-8.165486,-0.048939,5.304056,3.939393,2.565172,-0.387400,8.750115],[-4.999716,7.167095,-1.242140,-0.123790,-7.464618,6.833240,0.074890],[-8.422070,1.406712,-9.566854,4.975205,-4.334253,-6.457346,-0.031605],[-2.174049,2.789686,-5.406574,-3.313666,3.966239,-9.019693,-6.676595],[-3.353689,-9.506488,4.489921,0.259592,0.748514,-4.056473,3.970380],[0.785397,6.461670,9.846508,-2.295819,9.421257,8.049108,9.067734],[4.758865,3.973589,-7.751422,-1.441554,5.425022,5.814405,5.771816],[-9.606191,-4.410251,-3.247780,-1.861511,-9.071199,-5.135870,0.301258]],[[-7.405120,7.795679,-8.881762,7.342645,-5.185926,4.245980,8.980840],[9.653013,-9.561356,-3.806056,9.267108,-7.927452,-0.512533,5.874280],[-8.915385,-0.163170,7.582124,-0.359622,-3.041869,-5.608098,-4.881779],[9.837771,-3.397801,-2.162517,-7.127007,3.557341,2.815463,6.045966],[8.059749,-9.164712,1.124661,-1.471587,0.558567,2.576146,3.693839],[-0.368981,9.029983,0.482041,-4.950395,-6.369605,-6.007077,9.977895],[9.386152,-4.500223,5.213450,-2.502322,3.863863,1.393092,-7.523768],[3.857174,9.675664,0.827200,6.008010,-9.814962,-9.892904,-1.427925],[8.778139,-7.821723,6.684252,1.163650,-9.643427,4.105253,-1.614036],[-1.669846,0.241452,-3.919471,1.365113,9.306628,1.673405,9.291702],[-7.193341,-2.866495,4.660225,-2.603144,5.183796,4.861514,-8.841006],[-2.418396,8.550842,4.679584,-2.613265,1.678450,7.282916,-3.977578]],[[5.922759,-0.622493,6.830788,3.973337,4.106612,1.930133,9.958159],[-3.522162,-4.032990,-6.210516,0.711684,-5.009507,-1.992611,-7.119547],[2.479065,-3.535682,-0.308416,-3.251195,0.636399,-8.786311,-7.310300],[-7.277503,-5.361100,7.134769,5.041999,-8.690648,8.609634,-8.785478],[8.959375,1.703257,6.712189,5.469382,-6.898579,6.677016,6.438934],[-6.764493,-8.967999,8.553692,-9.596951,1.220422,-1.151976,-2.206710],[-9.844472,5.669216,8.880979,-1.688455,-6.167116,-5.578621,-3.319797],[2.389655,1.977222,8.287908,-4.901922,-2.967237,6.007335,-2.078612],[-7.262547,7.001977,4.673446,-7.352288,6.690097,8.917316,-0.283842],[-5.951440,2.109475,-4.610137,8.629804,-5.259707,-7.694615,-8.305331],[-3.783973,3.308581,-8.963588,-0.161998,-7.515068,-0.614116,0.725103],[0.831581,-6.036577,-6.216819,5.492825,-6.623681,-2.874269,-3.767925]]], dtype = "float32")#candidate|1181|(11, 12, 7)|const|float32
bop_1182 = relay.floor_divide(const_1180.astype('float32'), relay.reshape(const_1181.astype('float32'), relay.shape_of(const_1180))) # shape=(11, 12, 7)
func_868_call = mod.get_global_var('func_868')
func_871_call = mutated_mod.get_global_var('func_871')
var_1187 = relay.var("var_1187", dtype = "float32", shape = (1344,))#candidate|1187|(1344,)|var|float32
call_1186 = func_868_call(relay.reshape(var_1187.astype('float32'), [14, 12, 8]))
call_1188 = func_868_call(relay.reshape(var_1187.astype('float32'), [14, 12, 8]))
func_396_call = mod.get_global_var('func_396')
func_398_call = mutated_mod.get_global_var('func_398')
var_1205 = relay.var("var_1205", dtype = "bool", shape = (2240,))#candidate|1205|(2240,)|var|bool
call_1204 = func_396_call(relay.reshape(var_1205.astype('bool'), [10, 16, 14]))
call_1206 = func_396_call(relay.reshape(var_1205.astype('bool'), [10, 16, 14]))
output = relay.Tuple([bop_1182,call_1186,var_1187,call_1204,var_1205,])
output2 = relay.Tuple([bop_1182,call_1188,var_1187,call_1206,var_1205,])
func_1210 = relay.Function([var_1187,var_1205,], output)
mod['func_1210'] = func_1210
mod = relay.transform.InferType()(mod)
var_1211 = relay.var("var_1211", dtype = "float32", shape = (1344,))#candidate|1211|(1344,)|var|float32
var_1212 = relay.var("var_1212", dtype = "bool", shape = (2240,))#candidate|1212|(2240,)|var|bool
output = func_1210(var_1211,var_1212,)
func_1213 = relay.Function([var_1211,var_1212,], output)
mutated_mod['func_1213'] = func_1213
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1335 = relay.var("var_1335", dtype = "float32", shape = (11, 15, 2))#candidate|1335|(11, 15, 2)|var|float32
uop_1336 = relay.log2(var_1335.astype('float32')) # shape=(11, 15, 2)
bop_1338 = relay.add(uop_1336.astype('int64'), relay.reshape(var_1335.astype('int64'), relay.shape_of(uop_1336))) # shape=(11, 15, 2)
bop_1347 = relay.logical_or(uop_1336.astype('bool'), relay.reshape(var_1335.astype('bool'), relay.shape_of(uop_1336))) # shape=(11, 15, 2)
func_573_call = mod.get_global_var('func_573')
func_576_call = mutated_mod.get_global_var('func_576')
const_1351 = relay.const([-0.037162,6.013242,3.248861,5.436251,2.468990,-7.271313,9.614890,-8.061344,-5.308724,-9.624237,5.105191,-3.872815,-4.546850,1.160508,4.242603,-1.051515,2.098069,-7.184844,-0.362491,-1.334800,-7.556912,-8.968258,-8.277832,9.501354,-8.689633,-8.105159,4.438375,6.014523,-9.753648,1.136635,-7.435568,-8.677112,0.686751,-6.679985,-3.016894,-1.745025,1.371079,-6.453846,6.450471,-0.063520,-7.884086,6.631394,-0.153058,9.332151,-5.715281,-6.440437,-3.626549,-8.973687,-0.432644,1.176368,1.404206,4.677712,-2.829299,7.261620,-3.876516,8.037710,-9.475465,-7.056899,-5.702067,-5.650743,9.890434,5.390302,9.014820,2.412777,-7.715905,-9.740169,-2.610011,-8.615085,-6.621446,1.868512,0.597145,2.659975,8.924253,-4.656447,5.283492,-4.925800,-5.434427,-0.034403,9.499201,6.792202,-7.385987,-5.426786,0.273153,-8.361495,-6.084768,-2.317444,-3.299980,2.634083,-5.171919,8.253536,-2.635841,-5.906169,3.384507,-8.337118,-3.390321,-6.192121,-7.566003,-3.083373,0.795229,7.988144,-6.360214,-4.884237,9.597700,-4.647835,2.046645,0.803630,-6.493490,-1.391771,-8.345241,-9.061555,-7.709479,5.875555,0.864890,5.168596,-3.227686,-9.535900,-7.011367,-9.505472,9.475008,2.255182,-7.123199,-1.206849,-9.749279,3.028318,-4.846369,-9.558321,-6.155646,4.200568,8.081638,1.503747,5.054468,-3.868685,-4.502846,2.752632,9.744203,-8.613567,2.684876,-4.060943,-3.875754,-0.276272,-4.388309,0.293266,-9.797051,-0.271527,4.894134,-8.768274,-5.200127,3.443794,6.347808,-1.222718,0.602471,-7.972489,7.195414,0.401939,-5.764611,-4.197041,-4.518621,-0.860920,-4.705547,-7.185244,-4.370101,-3.144230,7.094298,8.437796,-6.359318,6.262617,-7.781893,-6.165174,9.556806,9.591182,1.246118,-2.276415,-8.710605,8.937809,8.726484,-4.487548,-7.035974,-4.316233,-8.133618,-0.540008,9.492239,3.153359,3.694245,-6.617958,2.916204,6.457424,0.102846,-5.841043,-4.982715,6.696810,0.482289,3.152370,-3.825964,9.851390,6.418812,-7.500373,9.888945,-2.708656,9.642069,4.562420,2.855572,-3.267806,-0.783858,-5.720928,-6.181453,4.360556,3.275147,6.028606,-3.031856,8.633355,-9.965962,7.543245,6.198572,-4.331444,-4.964010,8.706718,-6.911608,-7.432465,-5.748648,3.761447,-6.690857,-8.494065,7.962171,-1.226385,-7.183475,6.602849,7.601047,-2.624876,2.314880,6.575076,0.637620,5.878916,-3.343847,-0.899212,-2.765667,7.428184,-9.316333,-1.287840,8.955908,-2.458542,-2.886188,-2.880728,-6.684418,-3.605607,-7.704326,8.300497,-1.073088,9.386804,-5.356648,2.568174,-0.847297,-8.444511,-2.105812,-8.944402,6.586593,0.328938,7.836271,0.644983,2.998364,9.948987,1.320710,6.393912,3.559503,8.839836,-2.973694,-8.952708,9.051595,-9.146635,4.381609,-8.220790,2.067804,5.394122,3.982519,-8.014394,-1.200175,-5.634021,-5.616963,-1.951764,7.149531,9.475274,-1.656079,-2.945227,-4.413451,-5.224398,2.497835,-0.712942,-4.867200,8.420611,-5.923440,-0.868752,2.173881,9.187639,-3.069171,5.507500,5.860093,-5.020208,-1.874237,0.610436,7.039599,7.258512,-3.004541,7.117634,9.442835,4.934640,-0.673452,-8.882952,-6.799474,1.032952,2.911108,-3.149303,4.270475,8.382847,6.098308,2.400043,-1.801854,-0.496187,-6.305449,4.324779,-0.934612,-4.229559,6.777106,4.011127,-8.361145,-3.634090,8.987242,-9.826699,9.942949,5.685603,-4.076024,4.876207,4.827959,-7.569133,9.776170,6.277274,-7.807340,-6.044203,-2.611971,6.865943,-2.468946,2.499524,6.983761,3.360911,9.996452,2.461069,1.737681,-4.554554,-0.750022,-4.471540,-1.339525,-1.525092,5.749666,-2.034983,-1.834644,-8.035784,-4.966364,-0.936510,0.095804,-8.820172,-7.429719,3.919120,0.805228,-1.720505,-1.036785,1.750899,-6.642252,5.702652,9.744565,-3.602501,2.911863,-6.111121,-7.745784,7.284872,-0.462541,-6.686733,-6.919516,-9.108274,0.633449,7.035123,-6.423791,-2.934571,-4.327038,-8.709701,-6.275579,7.033979,-4.913241,4.498419,5.998335,-9.570095,-4.842069,-0.235093,-4.392312,-9.932543,-0.019966,1.686116,3.098000,6.418874,0.972268,7.259575,-8.745888,-9.837334,-6.474636,6.345005,-1.666813,-4.478624,-8.062702,7.722000,4.516432,-5.176980,-0.694391,-0.726070,-4.947445,4.799253,-2.228546,3.829483,-7.326778,6.831741,2.519781,-8.199714,-5.508534,-8.636938], dtype = "float64")#candidate|1351|(420,)|const|float64
const_1352 = relay.const([True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False], dtype = "bool")#candidate|1352|(2240,)|const|bool
call_1350 = relay.TupleGetItem(func_573_call(relay.reshape(const_1351.astype('float64'), [7, 10, 6]), relay.reshape(const_1352.astype('bool'), [2240,]), ), 0)
call_1353 = relay.TupleGetItem(func_576_call(relay.reshape(const_1351.astype('float64'), [7, 10, 6]), relay.reshape(const_1352.astype('bool'), [2240,]), ), 0)
func_573_call = mod.get_global_var('func_573')
func_576_call = mutated_mod.get_global_var('func_576')
call_1357 = relay.TupleGetItem(func_573_call(relay.reshape(const_1351.astype('float64'), [7, 10, 6]), relay.reshape(const_1352.astype('bool'), [2240,]), ), 1)
call_1358 = relay.TupleGetItem(func_576_call(relay.reshape(const_1351.astype('float64'), [7, 10, 6]), relay.reshape(const_1352.astype('bool'), [2240,]), ), 1)
func_396_call = mod.get_global_var('func_396')
func_398_call = mutated_mod.get_global_var('func_398')
call_1363 = func_396_call(relay.reshape(call_1357.astype('bool'), [10, 16, 14]))
call_1364 = func_396_call(relay.reshape(call_1357.astype('bool'), [10, 16, 14]))
output = relay.Tuple([bop_1338,bop_1347,call_1350,const_1351,const_1352,call_1357,call_1363,])
output2 = relay.Tuple([bop_1338,bop_1347,call_1353,const_1351,const_1352,call_1358,call_1364,])
func_1365 = relay.Function([var_1335,], output)
mod['func_1365'] = func_1365
mod = relay.transform.InferType()(mod)
var_1366 = relay.var("var_1366", dtype = "float32", shape = (11, 15, 2))#candidate|1366|(11, 15, 2)|var|float32
output = func_1365(var_1366)
func_1367 = relay.Function([var_1366], output)
mutated_mod['func_1367'] = func_1367
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1632 = relay.var("var_1632", dtype = "float64", shape = (3, 11, 6))#candidate|1632|(3, 11, 6)|var|float64
var_1633 = relay.var("var_1633", dtype = "float64", shape = (3, 11, 6))#candidate|1633|(3, 11, 6)|var|float64
bop_1634 = relay.less_equal(var_1632.astype('bool'), relay.reshape(var_1633.astype('bool'), relay.shape_of(var_1632))) # shape=(3, 11, 6)
output = relay.Tuple([bop_1634,])
output2 = relay.Tuple([bop_1634,])
func_1639 = relay.Function([var_1632,var_1633,], output)
mod['func_1639'] = func_1639
mod = relay.transform.InferType()(mod)
mutated_mod['func_1639'] = func_1639
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1639_call = mutated_mod.get_global_var('func_1639')
var_1641 = relay.var("var_1641", dtype = "float64", shape = (3, 11, 6))#candidate|1641|(3, 11, 6)|var|float64
var_1642 = relay.var("var_1642", dtype = "float64", shape = (3, 11, 6))#candidate|1642|(3, 11, 6)|var|float64
call_1640 = func_1639_call(var_1641,var_1642,)
output = call_1640
func_1643 = relay.Function([var_1641,var_1642,], output)
mutated_mod['func_1643'] = func_1643
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1655 = relay.const([[[3.212556,-8.843711,-3.816337,-8.097301,-1.080566,-2.764661,-4.933008,9.510880,7.186789],[0.067969,8.150118,0.601270,1.581680,0.833999,-6.669518,7.209660,-3.380748,6.720088],[-7.125475,-7.505903,-1.033503,-7.579490,3.880627,-0.056401,-1.878111,-8.787426,-6.248953],[-6.090406,-1.519938,-1.828183,-9.324418,-1.814423,6.103962,5.917780,-1.355290,-4.061625],[0.562757,0.002475,-9.863725,1.522455,1.589037,-3.151844,0.203841,5.294007,-5.556954]],[[-7.104431,8.071318,-5.327730,-5.083757,6.671263,5.261834,0.164568,-5.974308,-3.841743],[0.265897,0.057925,8.942447,-3.769760,-7.016583,-2.936909,1.114364,-6.646289,-8.974238],[8.537306,-1.814199,5.368182,-3.218339,-2.377472,1.886204,3.064312,-9.418506,-1.088942],[8.948547,-7.913432,-8.778220,-7.544002,7.961391,8.299733,8.196739,-6.759297,5.062191],[-9.849772,7.482592,-0.690954,7.038393,1.517035,-4.122387,4.310802,-6.068484,4.540176]],[[-8.620881,-7.359433,-3.431091,1.023203,-2.850983,-5.476888,0.515614,6.961749,2.253748],[-6.236434,3.415369,8.244467,2.318403,1.913549,-6.154556,-7.875237,7.096020,5.493152],[-3.393668,0.540365,-2.127100,-1.327193,-5.673609,-3.631672,3.393772,-1.043486,-2.582923],[-2.752947,-6.474406,9.599377,4.747052,-1.297317,-0.132590,-9.833054,-4.359050,5.113254],[6.721105,5.052922,1.925391,-9.054659,-2.853928,-7.031949,-3.866083,-8.197415,-4.854328]],[[0.506670,9.094379,-9.731764,7.495233,1.036633,8.572365,8.169786,-5.816561,-6.798828],[-3.400861,6.871573,-0.017431,-8.563721,-1.415015,4.456314,-8.503734,-3.451102,-0.029022],[-3.232468,-0.172675,-3.187108,-9.180581,-3.752637,-4.321011,0.458213,5.571106,0.739960],[-6.138135,-2.095250,-4.597420,1.284641,3.744097,-0.544802,8.507065,1.215201,-1.624393],[2.977637,3.601636,-0.842490,-8.131103,1.747249,-3.752342,3.272801,-5.826990,2.523779]],[[-4.934440,4.841753,4.727311,8.260062,-1.015659,-3.162102,-8.510820,-0.953366,3.872448],[6.455422,-9.197774,-4.515707,6.066094,7.439849,7.662727,-4.506388,2.583617,4.342189],[-0.028680,4.577266,-6.682634,8.942326,4.393712,-0.230625,-2.718482,6.915736,-3.319020],[4.556124,0.779802,2.069007,-0.344927,-0.085515,-6.922657,-9.593193,3.981932,8.861055],[5.500142,-6.845686,-4.238193,0.226480,8.127643,2.474454,-0.375699,5.688346,3.723322]],[[0.971505,1.252502,-4.274653,6.827886,-9.587140,-7.914477,-9.971433,-7.012990,6.507417],[-6.265447,-0.787921,5.374882,4.224019,-9.842560,9.426279,-2.193620,8.933996,5.902699],[6.942821,-0.485149,2.927490,9.370008,-9.442021,-3.946096,2.497622,9.357461,-7.624349],[2.409582,-4.159906,3.009203,-2.243121,-7.198214,0.815611,9.155195,8.276954,-4.141545],[-4.590072,-5.851580,7.900830,-4.697725,8.144971,-1.240046,-4.899216,-5.350046,-5.263870]],[[8.815100,9.831881,-2.680027,0.885657,8.211602,-1.439999,1.372630,5.694501,3.499962],[-6.948552,5.648580,1.735735,-5.510048,-6.753244,6.878453,-7.530994,1.538407,-3.300989],[-3.865469,9.346301,-1.084078,1.455836,-2.026211,-5.144813,5.550636,-3.918630,-0.758125],[3.958197,1.349982,3.218480,-1.315743,7.699252,3.483319,3.174361,2.733634,5.441872],[-5.347333,8.369643,-3.504849,0.678214,7.738872,-9.986472,0.791097,-6.697616,8.756499]],[[0.205468,8.134338,8.315391,6.552198,-1.345194,2.560890,-7.841953,-9.473152,9.297823],[6.419779,-0.035608,-8.208064,0.107131,-8.452917,-5.737970,9.161511,1.602964,6.525561],[-3.926021,-3.162834,9.044593,-6.929831,2.245351,-9.484624,7.576770,1.753633,-9.232012],[6.102017,-1.395365,5.344155,4.212610,-6.492836,8.566246,-1.396395,-1.533063,-2.566487],[-3.511813,-0.820273,9.759355,-6.954613,-5.507588,-6.446947,0.414901,-9.173366,-4.835277]],[[3.579625,6.307628,-3.808067,3.216702,-6.854383,4.453118,0.926936,5.086066,-5.383882],[-9.351176,-3.052119,-1.566050,6.858304,-2.516060,2.031126,6.413030,-6.458342,3.165890],[4.305665,7.939222,-4.517782,-8.290218,7.119380,8.372037,-6.473654,-5.255438,3.878247],[-5.426663,2.227003,-3.608562,6.009316,0.120555,-0.112013,-4.438743,1.310731,9.624169],[1.897305,3.018552,-6.124974,-2.829820,2.384580,6.975757,8.842552,2.095727,-1.717565]],[[-1.067532,-8.586501,2.765719,-7.067700,-4.053929,-8.503504,0.997973,-6.327694,-4.442918],[-4.162087,0.134463,0.270092,-2.964128,-1.402373,7.067706,0.836354,-7.305187,6.540480],[1.630437,-5.523932,0.907253,0.786412,-4.866146,-8.293833,-7.823773,0.058545,-0.364128],[-3.865351,7.306320,-4.894289,6.503164,-3.563127,2.056120,-4.530099,7.778331,9.800940],[1.670768,-8.805746,-2.656903,-9.195867,1.453828,-2.227677,-0.310327,-6.027474,-6.120635]],[[2.679906,-8.904733,6.535800,5.049863,-5.211619,-9.052378,-0.318939,7.758492,6.209023],[3.421232,-0.369663,2.795636,-7.452424,-2.770772,-0.988320,1.580787,-9.401383,5.939994],[-7.955476,1.648140,-4.098801,-4.868035,9.317518,7.558539,1.877961,-9.220633,1.529615],[-5.845279,-4.707805,-8.096982,0.332035,-7.187274,6.627535,-1.799389,-3.883923,8.947309],[1.402398,0.509447,8.166031,-3.147345,4.533932,-1.000689,-8.236003,-7.618065,1.079663]],[[9.981830,0.684433,8.698415,-5.031589,-6.706498,0.540963,1.688172,4.940537,-9.771827],[2.336777,0.833246,1.268023,1.464904,-6.649112,-2.248962,-5.404328,8.492039,0.812906],[-2.546724,-5.351021,9.898273,-1.388818,-3.172031,9.861882,-2.620569,4.610429,-2.412723],[-4.379998,7.593437,4.737474,-3.688034,8.193599,4.387590,-9.248883,-9.595715,-0.642253],[0.451858,-3.625394,-6.548405,-7.241795,-6.058134,-5.607158,-0.850609,-4.989511,-0.950154]],[[-5.664182,8.441208,-7.377920,-6.611142,2.351397,8.525118,-2.001821,-7.451021,-1.946115],[3.417353,-2.970986,0.669497,-5.480341,4.160752,6.813507,-7.048277,-7.364852,9.762974],[4.870434,-4.233529,8.429032,-3.693106,-1.425592,-6.682338,-6.460444,8.638950,-9.750816],[6.168734,-3.725239,0.087841,-8.637662,0.950786,-2.410649,2.274174,7.704060,-6.741505],[3.659927,-2.454877,3.016398,2.098703,-9.081175,-5.784881,0.089088,7.576919,-5.821441]],[[0.324240,1.611515,-6.773508,8.255962,5.028702,0.471949,3.765687,-0.173302,-7.611833],[3.300080,0.439648,-6.022625,-0.041982,-2.299548,7.648901,-3.270404,6.848382,-1.094691],[4.220790,-6.525631,-3.946637,-9.604522,-5.969279,0.332717,6.178878,-1.119420,5.557581],[-7.038213,-7.452818,6.872422,-4.883287,-5.114916,0.517808,7.920937,9.074162,1.110798],[7.312742,4.646044,2.661191,-6.942106,9.567051,8.341173,5.020870,-2.412805,-8.124820]],[[4.614603,-2.562338,1.780897,-0.366728,-0.613823,-7.297598,9.103726,-8.637442,6.171476],[-8.292342,-3.162958,3.948282,-2.349074,3.565171,-9.533363,-0.776516,-1.323413,-0.818589],[4.005628,-7.861047,-3.394133,0.566572,-3.531957,-7.786073,2.461548,0.165049,5.208774],[-5.973784,2.644841,-9.122104,3.151862,-5.198947,4.539394,9.469711,9.709179,9.891669],[-5.101656,-4.172671,-1.857161,6.547020,5.800142,4.860218,1.943018,-0.579899,2.146519]]], dtype = "float64")#candidate|1655|(15, 5, 9)|const|float64
uop_1656 = relay.log(const_1655.astype('float64')) # shape=(15, 5, 9)
output = uop_1656
output2 = uop_1656
func_1658 = relay.Function([], output)
mod['func_1658'] = func_1658
mod = relay.transform.InferType()(mod)
mutated_mod['func_1658'] = func_1658
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1658_call = mutated_mod.get_global_var('func_1658')
call_1659 = func_1658_call()
output = call_1659
func_1660 = relay.Function([], output)
mutated_mod['func_1660'] = func_1660
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1658_call = mod.get_global_var('func_1658')
func_1660_call = mutated_mod.get_global_var('func_1660')
call_1680 = func_1658_call()
call_1681 = func_1658_call()
output = relay.Tuple([call_1680,])
output2 = relay.Tuple([call_1681,])
func_1685 = relay.Function([], output)
mod['func_1685'] = func_1685
mod = relay.transform.InferType()(mod)
mutated_mod['func_1685'] = func_1685
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1685_call = mutated_mod.get_global_var('func_1685')
call_1686 = func_1685_call()
output = call_1686
func_1687 = relay.Function([], output)
mutated_mod['func_1687'] = func_1687
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1685_call = mod.get_global_var('func_1685')
func_1687_call = mutated_mod.get_global_var('func_1687')
call_1698 = relay.TupleGetItem(func_1685_call(), 0)
call_1699 = relay.TupleGetItem(func_1687_call(), 0)
func_757_call = mod.get_global_var('func_757')
func_760_call = mutated_mod.get_global_var('func_760')
var_1701 = relay.var("var_1701", dtype = "bool", shape = (560, 4))#candidate|1701|(560, 4)|var|bool
call_1700 = relay.TupleGetItem(func_757_call(relay.reshape(var_1701.astype('bool'), [2240,])), 0)
call_1702 = relay.TupleGetItem(func_760_call(relay.reshape(var_1701.astype('bool'), [2240,])), 0)
output = relay.Tuple([call_1698,call_1700,var_1701,])
output2 = relay.Tuple([call_1699,call_1702,var_1701,])
func_1715 = relay.Function([var_1701,], output)
mod['func_1715'] = func_1715
mod = relay.transform.InferType()(mod)
mutated_mod['func_1715'] = func_1715
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1716 = relay.var("var_1716", dtype = "bool", shape = (560, 4))#candidate|1716|(560, 4)|var|bool
func_1715_call = mutated_mod.get_global_var('func_1715')
call_1717 = func_1715_call(var_1716)
output = call_1717
func_1718 = relay.Function([var_1716], output)
mutated_mod['func_1718'] = func_1718
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1685_call = mod.get_global_var('func_1685')
func_1687_call = mutated_mod.get_global_var('func_1687')
call_1760 = relay.TupleGetItem(func_1685_call(), 0)
call_1761 = relay.TupleGetItem(func_1687_call(), 0)
uop_1762 = relay.exp(call_1760.astype('float64')) # shape=(15, 5, 9)
uop_1764 = relay.exp(call_1761.astype('float64')) # shape=(15, 5, 9)
bop_1774 = relay.equal(uop_1762.astype('bool'), relay.reshape(call_1760.astype('bool'), relay.shape_of(uop_1762))) # shape=(15, 5, 9)
bop_1777 = relay.equal(uop_1764.astype('bool'), relay.reshape(call_1761.astype('bool'), relay.shape_of(uop_1764))) # shape=(15, 5, 9)
output = relay.Tuple([bop_1774,])
output2 = relay.Tuple([bop_1777,])
func_1787 = relay.Function([], output)
mod['func_1787'] = func_1787
mod = relay.transform.InferType()(mod)
mutated_mod['func_1787'] = func_1787
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1787_call = mutated_mod.get_global_var('func_1787')
call_1788 = func_1787_call()
output = call_1788
func_1789 = relay.Function([], output)
mutated_mod['func_1789'] = func_1789
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1685_call = mod.get_global_var('func_1685')
func_1687_call = mutated_mod.get_global_var('func_1687')
call_1796 = relay.TupleGetItem(func_1685_call(), 0)
call_1797 = relay.TupleGetItem(func_1687_call(), 0)
func_1685_call = mod.get_global_var('func_1685')
func_1687_call = mutated_mod.get_global_var('func_1687')
call_1802 = relay.TupleGetItem(func_1685_call(), 0)
call_1803 = relay.TupleGetItem(func_1687_call(), 0)
const_1806 = relay.const([[[9.754117,-6.425611,-8.504703,0.023369,4.377057,-7.339933,-1.082608,1.370007,5.257963],[-3.672793,9.465664,-9.945783,8.870730,-7.278832,5.596749,-2.799008,8.930506,3.275120],[7.276213,-1.783524,-0.628046,-2.571344,-0.835002,-8.642871,-8.960705,-3.580899,2.453000],[9.704740,-0.030955,-6.394479,2.914466,9.038521,1.473532,4.497716,3.863555,4.550254],[-6.799201,-9.869965,6.342107,-2.529080,7.008495,8.249787,4.234082,-5.348802,1.692969]],[[-5.900059,4.907258,4.590890,-1.970778,4.706270,0.385618,1.871003,-1.722526,-5.101522],[-1.475328,-0.382229,9.808687,6.117839,-4.891292,5.712274,-1.876958,-7.038562,8.510528],[-5.489224,-9.394610,6.719184,3.102142,-1.966821,9.000330,7.902559,5.336751,6.930255],[-6.797876,-4.679205,-0.400437,-4.233035,3.761868,-6.813344,-2.211769,-4.915289,-4.818536],[-2.384863,1.761952,-6.430709,4.994338,-0.945753,7.183903,-2.575211,-2.474114,-1.829498]],[[-4.620643,1.773617,5.677185,-7.554139,2.592070,4.789177,-8.298183,6.032326,-9.780841],[-2.339157,0.576346,-1.715623,3.971651,-2.317475,3.888165,-7.427173,0.973767,4.081158],[-5.138653,8.332794,7.766957,7.278258,-9.598544,5.901648,-1.262601,6.747675,-7.050489],[-7.644142,-9.409282,-8.484032,1.988292,0.054626,-3.963244,-4.698852,-0.599815,-4.094753],[-7.310529,2.191487,-4.502423,8.465311,2.287299,5.227258,-5.330173,6.107017,-1.660068]],[[5.819196,-4.908229,0.373951,8.232299,8.799341,6.609014,3.852107,-1.399526,-0.216737],[9.453980,8.508933,-5.644981,3.850890,8.940597,6.285758,-4.379556,5.988287,6.568364],[4.764071,-5.817247,-0.136145,5.372701,9.305953,9.205207,-4.785790,3.502869,1.020971],[-2.421505,9.816356,4.693876,-3.004492,6.034168,-9.843179,-7.733791,8.427498,1.078226],[-3.263299,-4.992163,-5.888947,3.565711,-3.676166,-1.272026,8.542580,-3.171288,-2.097819]],[[0.450741,1.447579,8.375148,-9.178078,-0.841535,-4.265014,2.511545,-1.449513,9.820992],[7.964294,8.431537,9.056181,8.924695,3.513526,6.810406,9.988394,-1.902318,0.321429],[2.035918,7.937350,-3.854359,6.395116,-8.323025,3.867601,-1.730527,-9.439286,-6.048281],[7.845344,-6.762230,-1.261000,9.733342,7.570607,-5.564360,7.955624,-4.726660,7.925680],[-2.507009,-2.347063,-7.251298,-7.597032,0.224325,1.063234,3.780297,4.860623,1.654865]],[[2.085676,-5.652623,-8.899375,-0.868490,-9.166050,-3.282239,7.174365,-7.167714,6.495120],[2.100458,7.300599,-8.437601,-6.810527,1.452122,-8.799331,6.067021,9.640071,-7.455744],[8.728367,5.799776,7.649149,4.825735,3.987635,-0.353043,7.898192,-0.653715,-6.147355],[7.344630,-0.668323,3.692786,2.577681,1.890876,-5.133618,-4.357800,-7.456920,4.072179],[6.342887,-6.277275,-8.190911,8.732407,-1.396859,-5.163757,-8.795819,4.008803,-8.296051]],[[0.389715,-2.834818,1.009836,-7.027363,-1.211415,9.283389,-9.167902,-4.362185,1.564450],[-4.643877,-4.728934,8.830261,0.940646,-0.400942,-6.958004,5.754357,-5.830426,-5.206743],[-4.876009,8.947276,4.787490,-3.272598,4.003836,-3.221626,9.091502,8.608520,7.655126],[-6.634264,4.740113,-1.970439,-5.235082,9.783644,8.644028,-6.084264,7.358183,-7.543308],[-6.521703,-3.502013,3.020577,3.198115,4.174591,2.400947,0.108122,-3.559247,-5.084720]],[[-6.875816,-7.598164,-8.447415,-5.909771,-9.596001,-7.417062,-2.813780,0.017831,0.025961],[-3.388081,-0.523649,2.495922,-1.967313,3.173490,7.482450,3.582791,-6.997824,-6.029863],[1.649762,0.928533,-0.557958,-9.979368,1.527589,8.267868,0.009048,5.192141,-1.918661],[2.299529,7.401037,4.958940,-5.827965,-4.829117,-1.708090,8.960828,5.668806,4.983129],[2.568110,7.131788,-0.405509,2.546638,-5.539659,4.232543,9.368583,2.157157,6.261735]],[[-0.394850,-5.482830,8.251471,9.213274,-8.331885,7.779323,-8.375260,-2.085292,2.104242],[-5.268394,-1.057349,3.646775,0.833053,-3.379994,0.450798,5.826466,8.475312,2.903872],[3.924187,-7.638443,4.886097,0.005839,-8.120855,7.622331,-6.864676,-5.291586,-0.129960],[-1.638168,-3.965356,9.285479,1.698295,4.901614,-0.753505,6.937782,5.585903,0.227790],[4.673784,-1.268741,-2.531084,-7.332147,-0.857079,1.109812,-3.443787,-0.423742,-5.986878]],[[2.437693,2.427858,7.566031,6.388968,5.116744,-2.707497,5.399171,2.222478,5.568791],[-0.295992,4.150493,-3.333052,2.240825,-7.771237,4.281827,8.023175,-8.167583,-5.827342],[-1.737604,-1.623915,-9.524253,3.008069,5.350857,-3.328551,-6.416191,-2.458635,6.472612],[2.081414,2.946216,-7.350229,-4.816981,3.865869,-4.586535,-9.803022,3.642549,-8.384105],[9.537871,-3.575787,2.488685,7.908089,4.410891,0.302825,-4.245479,6.739150,-7.170475]],[[2.818804,-9.399472,-4.257407,-5.112865,0.563158,3.858476,3.090660,4.764140,5.100631],[-1.771615,1.889617,-4.350421,-3.859597,4.710471,5.359161,-9.016836,-2.242528,5.610160],[5.229972,-6.314012,-9.262843,3.146204,-8.322146,4.708734,3.055790,9.780088,6.922900],[0.670079,-4.714035,2.761912,-1.092817,-8.772461,-7.726455,1.024243,3.818623,8.843229],[-7.887663,-7.213371,8.427219,-5.517788,4.228189,7.725319,-5.447766,2.734694,4.572529]],[[-2.285487,-2.999523,0.838286,-8.916264,-9.483732,-6.498827,4.426839,-1.981762,9.163722],[8.744341,-4.875177,0.781412,8.794855,-4.109712,8.645490,-7.353042,-8.351551,-6.908798],[1.942951,-8.819998,1.723866,5.090385,7.809424,-4.667232,-2.509760,7.089133,-1.081801],[-1.400545,-0.513163,-3.030894,5.415294,9.912049,9.274637,9.995131,-8.984991,6.848590],[-6.978828,5.646990,-3.341942,-2.317250,7.662738,-2.491111,6.438664,-3.087190,4.664862]],[[3.379272,3.650284,-1.257760,-9.543767,5.869004,-2.805842,-6.158256,-7.054324,-2.848562],[9.365235,3.427081,-7.817405,0.214060,-0.366168,7.018630,-6.507767,-5.574805,9.946253],[6.948099,-5.637392,3.391207,1.114602,3.257978,3.292848,-7.404369,9.834508,3.874608],[7.747308,7.623373,-0.457851,-4.715626,0.990208,-7.113806,8.761295,-0.215824,5.560549],[-8.373598,-8.269212,-3.961546,-8.538448,-1.751979,-8.806642,7.139664,-4.372745,1.636510]],[[-8.511296,-7.549509,1.618110,-5.177628,-4.416738,-6.355083,-9.388759,-4.792859,2.759005],[-3.316917,5.568697,8.985623,2.295012,-4.815625,0.136559,-7.671197,0.878171,9.587193],[-1.893389,2.604990,-2.906631,-3.066310,2.730234,7.139423,8.322276,-9.093801,4.131000],[-9.917060,-7.219228,-5.650502,-0.189173,5.637086,1.952076,-2.563299,6.042704,-2.671148],[-0.987615,-7.497294,8.622901,-3.781125,-8.820797,-4.715734,-0.858395,-9.961121,0.470040]],[[-8.412427,0.542287,9.850982,-5.374399,-3.474203,3.646251,7.256886,8.786472,9.482108],[-7.971435,8.613483,-9.981948,-8.959811,-1.044457,-8.164190,6.658402,-2.017172,-8.621410],[-6.289653,1.297037,-3.633510,1.113529,-9.127291,-9.246645,-8.749486,0.653914,2.611438],[8.852317,-3.878024,-6.265647,9.892615,6.063891,-6.744651,8.409315,-8.050133,-0.330348],[6.018903,7.174584,-0.202269,-9.430472,-4.354970,4.783808,0.961942,0.343197,-4.276708]]], dtype = "float64")#candidate|1806|(15, 5, 9)|const|float64
bop_1807 = relay.logical_xor(call_1796.astype('uint64'), relay.reshape(const_1806.astype('uint64'), relay.shape_of(call_1796))) # shape=(15, 5, 9)
bop_1810 = relay.logical_xor(call_1797.astype('uint64'), relay.reshape(const_1806.astype('uint64'), relay.shape_of(call_1797))) # shape=(15, 5, 9)
output = relay.Tuple([call_1802,bop_1807,])
output2 = relay.Tuple([call_1803,bop_1810,])
func_1813 = relay.Function([], output)
mod['func_1813'] = func_1813
mod = relay.transform.InferType()(mod)
mutated_mod['func_1813'] = func_1813
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1813_call = mutated_mod.get_global_var('func_1813')
call_1814 = func_1813_call()
output = call_1814
func_1815 = relay.Function([], output)
mutated_mod['func_1815'] = func_1815
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1813_call = mod.get_global_var('func_1813')
func_1815_call = mutated_mod.get_global_var('func_1815')
call_1820 = relay.TupleGetItem(func_1813_call(), 1)
call_1821 = relay.TupleGetItem(func_1815_call(), 1)
output = call_1820
output2 = call_1821
func_1822 = relay.Function([], output)
mod['func_1822'] = func_1822
mod = relay.transform.InferType()(mod)
mutated_mod['func_1822'] = func_1822
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1822_call = mutated_mod.get_global_var('func_1822')
call_1823 = func_1822_call()
output = call_1823
func_1824 = relay.Function([], output)
mutated_mod['func_1824'] = func_1824
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1822_call = mod.get_global_var('func_1822')
func_1824_call = mutated_mod.get_global_var('func_1824')
call_1890 = func_1822_call()
call_1891 = func_1822_call()
var_1899 = relay.var("var_1899", dtype = "uint64", shape = (15, 5, 9))#candidate|1899|(15, 5, 9)|var|uint64
bop_1900 = relay.power(call_1890.astype('float32'), relay.reshape(var_1899.astype('float32'), relay.shape_of(call_1890))) # shape=(15, 5, 9)
bop_1903 = relay.power(call_1891.astype('float32'), relay.reshape(var_1899.astype('float32'), relay.shape_of(call_1891))) # shape=(15, 5, 9)
output = bop_1900
output2 = bop_1903
func_1909 = relay.Function([var_1899,], output)
mod['func_1909'] = func_1909
mod = relay.transform.InferType()(mod)
mutated_mod['func_1909'] = func_1909
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1910 = relay.var("var_1910", dtype = "uint64", shape = (15, 5, 9))#candidate|1910|(15, 5, 9)|var|uint64
func_1909_call = mutated_mod.get_global_var('func_1909')
call_1911 = func_1909_call(var_1910)
output = call_1911
func_1912 = relay.Function([var_1910], output)
mutated_mod['func_1912'] = func_1912
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1982 = relay.var("var_1982", dtype = "int32", shape = (13, 3, 14))#candidate|1982|(13, 3, 14)|var|int32
var_1983 = relay.var("var_1983", dtype = "int32", shape = (13, 3, 14))#candidate|1983|(13, 3, 14)|var|int32
bop_1984 = relay.logical_xor(var_1982.astype('int32'), relay.reshape(var_1983.astype('int32'), relay.shape_of(var_1982))) # shape=(13, 3, 14)
bop_1987 = relay.add(bop_1984.astype('float64'), relay.reshape(var_1983.astype('float64'), relay.shape_of(bop_1984))) # shape=(13, 3, 14)
func_1639_call = mod.get_global_var('func_1639')
func_1643_call = mutated_mod.get_global_var('func_1643')
var_1992 = relay.var("var_1992", dtype = "float64", shape = (198,))#candidate|1992|(198,)|var|float64
call_1991 = relay.TupleGetItem(func_1639_call(relay.reshape(var_1992.astype('float64'), [3, 11, 6]), relay.reshape(var_1992.astype('float64'), [3, 11, 6]), ), 0)
call_1993 = relay.TupleGetItem(func_1643_call(relay.reshape(var_1992.astype('float64'), [3, 11, 6]), relay.reshape(var_1992.astype('float64'), [3, 11, 6]), ), 0)
func_1006_call = mod.get_global_var('func_1006')
func_1008_call = mutated_mod.get_global_var('func_1008')
var_2003 = relay.var("var_2003", dtype = "float64", shape = (630,))#candidate|2003|(630,)|var|float64
call_2002 = func_1006_call(relay.reshape(var_2003.astype('float64'), [3, 14, 15]))
call_2004 = func_1006_call(relay.reshape(var_2003.astype('float64'), [3, 14, 15]))
const_2009 = relay.const([-8.095547,8.032528,7.323009,-0.415130,3.897800,7.586442,-6.481505,6.499704,-4.947687,-2.760441,7.145184,8.679399,-3.321078,0.184009,1.285348,8.273982,-9.550435,0.100651,-8.514714,5.522546,3.278901,-2.337034,4.143142,-0.171644,-1.349806,5.381432,3.555172,3.450180,-0.647687,9.200802,1.459005,3.877904,3.274660,-7.262751,-2.172482,8.825046,-2.873766,-8.582319,-0.710362,6.907679,9.266974,-6.422424,7.526331,-7.471710,-6.412237,2.530944,5.819127,-6.185460,-7.116261,-6.589417,-4.307439,-3.564023,-9.209631,-8.638424,-4.904781,6.538928,-7.706335,-5.109591,2.236577,2.418068,4.064326,7.256970,0.252086,1.909862,-0.839152,7.346710,-7.089883,5.904365,-2.656914,2.128993,-6.373010,-2.398821,-1.074356,-7.469011,-9.149030,2.899321,6.812940,-3.863883,-5.502601,-2.984053,3.567702,0.757674,1.105365,-6.129427,-5.963752,-6.551315,-7.475456,-3.652478,-0.407125,-8.961622,-5.987969,-6.610210,8.234985,6.099899,-6.925906,-4.854411,6.644051,2.054618,3.044956,-7.781247,1.363440,-0.826381,5.651119,-7.975750,6.022342,-8.611887,6.804270,4.001041,6.595496,-0.141234,-1.368142,-5.591851,1.544944,4.055788,6.121850,-8.300497,-3.625616,1.209074,0.520882,9.357099,-0.710859,4.396051,-0.263503,-2.617019,5.496564,-2.473600,-7.484043,6.262338,-4.585631,-9.751846,-9.709655,5.243888,9.499301,-0.132887,-5.456883,3.191070,-7.485412,-6.477667,-3.426394,-7.583441,-1.580935,2.280315,7.077174,-8.006945,8.521570,-2.530252,8.706429,0.796965,-7.781063,-4.227371,0.399327,1.549201,-8.876495,9.959699,5.598221,-6.182860,-5.930441,-7.089500,-6.509699,4.035464,2.768284,6.650685,5.928639,2.521382,-4.265516,9.216191,5.006562,8.689338,-8.327740,-8.847168,1.446399,8.810989,2.572550,5.172177,-1.909786,4.761600,-2.529572,8.991990,8.814906,8.836885,-7.150688,-2.865003,-3.231129,2.017004,-1.322567,-2.467173,-7.296618,7.942304,3.413559,1.532637,7.716113,6.147907,9.249520,-5.922234,4.125953,-2.156142,-2.986396,8.081627], dtype = "float64")#candidate|2009|(198,)|const|float64
bop_2010 = relay.power(var_1992.astype('float32'), relay.reshape(const_2009.astype('float32'), relay.shape_of(var_1992))) # shape=(198,)
func_757_call = mod.get_global_var('func_757')
func_760_call = mutated_mod.get_global_var('func_760')
var_2035 = relay.var("var_2035", dtype = "bool", shape = (1120, 2))#candidate|2035|(1120, 2)|var|bool
call_2034 = relay.TupleGetItem(func_757_call(relay.reshape(var_2035.astype('bool'), [2240,])), 0)
call_2036 = relay.TupleGetItem(func_760_call(relay.reshape(var_2035.astype('bool'), [2240,])), 0)
output = relay.Tuple([bop_1987,call_1991,call_2002,var_2003,bop_2010,call_2034,var_2035,])
output2 = relay.Tuple([bop_1987,call_1993,call_2004,var_2003,bop_2010,call_2036,var_2035,])
func_2061 = relay.Function([var_1982,var_1983,var_1992,var_2003,var_2035,], output)
mod['func_2061'] = func_2061
mod = relay.transform.InferType()(mod)
var_2062 = relay.var("var_2062", dtype = "int32", shape = (13, 3, 14))#candidate|2062|(13, 3, 14)|var|int32
var_2063 = relay.var("var_2063", dtype = "int32", shape = (13, 3, 14))#candidate|2063|(13, 3, 14)|var|int32
var_2064 = relay.var("var_2064", dtype = "float64", shape = (198,))#candidate|2064|(198,)|var|float64
var_2065 = relay.var("var_2065", dtype = "float64", shape = (630,))#candidate|2065|(630,)|var|float64
var_2066 = relay.var("var_2066", dtype = "bool", shape = (1120, 2))#candidate|2066|(1120, 2)|var|bool
output = func_2061(var_2062,var_2063,var_2064,var_2065,var_2066,)
func_2067 = relay.Function([var_2062,var_2063,var_2064,var_2065,var_2066,], output)
mutated_mod['func_2067'] = func_2067
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1822_call = mod.get_global_var('func_1822')
func_1824_call = mutated_mod.get_global_var('func_1824')
call_2072 = func_1822_call()
call_2073 = func_1822_call()
func_1639_call = mod.get_global_var('func_1639')
func_1643_call = mutated_mod.get_global_var('func_1643')
var_2090 = relay.var("var_2090", dtype = "float64", shape = (198,))#candidate|2090|(198,)|var|float64
call_2089 = relay.TupleGetItem(func_1639_call(relay.reshape(var_2090.astype('float64'), [3, 11, 6]), relay.reshape(var_2090.astype('float64'), [3, 11, 6]), ), 0)
call_2091 = relay.TupleGetItem(func_1643_call(relay.reshape(var_2090.astype('float64'), [3, 11, 6]), relay.reshape(var_2090.astype('float64'), [3, 11, 6]), ), 0)
uop_2094 = relay.sqrt(call_2072.astype('float32')) # shape=(15, 5, 9)
uop_2096 = relay.sqrt(call_2073.astype('float32')) # shape=(15, 5, 9)
output = relay.Tuple([call_2089,var_2090,uop_2094,])
output2 = relay.Tuple([call_2091,var_2090,uop_2096,])
func_2103 = relay.Function([var_2090,], output)
mod['func_2103'] = func_2103
mod = relay.transform.InferType()(mod)
var_2104 = relay.var("var_2104", dtype = "float64", shape = (198,))#candidate|2104|(198,)|var|float64
output = func_2103(var_2104)
func_2105 = relay.Function([var_2104], output)
mutated_mod['func_2105'] = func_2105
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1787_call = mod.get_global_var('func_1787')
func_1789_call = mutated_mod.get_global_var('func_1789')
call_2133 = relay.TupleGetItem(func_1787_call(), 0)
call_2134 = relay.TupleGetItem(func_1789_call(), 0)
output = call_2133
output2 = call_2134
func_2140 = relay.Function([], output)
mod['func_2140'] = func_2140
mod = relay.transform.InferType()(mod)
mutated_mod['func_2140'] = func_2140
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2140_call = mutated_mod.get_global_var('func_2140')
call_2141 = func_2140_call()
output = call_2141
func_2142 = relay.Function([], output)
mutated_mod['func_2142'] = func_2142
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1813_call = mod.get_global_var('func_1813')
func_1815_call = mutated_mod.get_global_var('func_1815')
call_2143 = relay.TupleGetItem(func_1813_call(), 1)
call_2144 = relay.TupleGetItem(func_1815_call(), 1)
output = call_2143
output2 = call_2144
func_2145 = relay.Function([], output)
mod['func_2145'] = func_2145
mod = relay.transform.InferType()(mod)
output = func_2145()
func_2146 = relay.Function([], output)
mutated_mod['func_2146'] = func_2146
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2147 = relay.var("var_2147", dtype = "float64", shape = (13, 1, 16))#candidate|2147|(13, 1, 16)|var|float64
uop_2148 = relay.sigmoid(var_2147.astype('float64')) # shape=(13, 1, 16)
func_573_call = mod.get_global_var('func_573')
func_576_call = mutated_mod.get_global_var('func_576')
const_2163 = relay.const([0.739122,-5.411140,-2.331143,2.282928,1.457234,5.856314,6.154671,3.168248,7.568256,8.870880,4.454792,7.806930,0.461328,-3.835285,-9.697701,-6.698605,4.922368,9.413872,5.841581,6.933491,-5.924198,4.265394,-8.220301,8.324127,9.384536,7.550298,3.450693,-5.813446,-6.570739,5.462963,-1.324936,3.395352,2.364294,4.932860,6.296326,7.026060,8.552489,-3.992651,3.515458,1.169442,-5.289175,4.871733,2.515661,-4.206267,4.960719,2.926012,-1.754341,2.869906,6.088351,-4.961902,3.866600,-7.190583,-4.467923,-6.981095,-3.314575,-0.308132,1.795398,7.035394,-5.119927,-2.598593,4.904235,5.949194,-0.535732,2.282457,4.463866,4.200048,6.236441,1.512762,-0.685759,3.720179,-3.891660,9.146511,-7.077225,-5.077007,4.671445,-9.444064,-5.456774,-6.813969,-4.470368,6.433432,9.212414,-4.675105,-9.329107,-4.599573,1.293410,-7.969617,-7.247584,2.330522,-4.962103,5.835675,5.332348,-5.532048,1.494779,-4.214603,1.708796,2.043387,-6.476424,7.274719,7.513867,7.199274,-8.896197,-0.944254,-5.653309,8.137863,-2.949448,-0.566109,-9.342101,1.605485,5.337010,2.780964,1.130662,1.797303,-2.532716,7.367504,-5.926918,-4.205486,-2.459026,0.160275,8.481470,8.470871,9.727699,7.393388,-5.603673,9.030834,-3.892589,-5.873419,3.754247,-6.361764,2.041421,-7.434747,-1.395646,-8.129374,7.659020,0.601334,-7.690317,-9.318003,-7.864077,4.148389,8.929259,-2.557248,0.793707,0.860130,-8.928538,-7.254141,7.806637,-8.107213,7.942331,-7.569355,-5.529326,2.273737,-0.057405,7.620333,0.677266,-6.998267,1.443098,3.773104,0.133079,-1.023587,-1.310427,6.302128,2.815332,0.557890,-8.793972,4.824382,-3.636157,0.641778,6.517630,3.432469,5.160933,1.062180,5.391528,1.911085,6.405227,-4.499858,-5.328189,-8.123289,5.576295,6.957538,9.200882,1.867016,2.297344,7.114560,5.162277,-8.233014,-2.563330,4.987462,-4.709506,-8.670578,-4.501459,2.128651,4.015817,-9.878737,4.354820,-5.385747,2.749053,-1.834731,4.810754,7.638815,9.650422,1.747183,9.169566,5.593462,-7.366105,5.816047,-3.623112,8.259045,-7.944258,6.161291,8.007866,6.648443,7.723694,-9.309817,7.434112,2.390114,8.823046,-6.927861,1.245901,-3.033413,5.876197,3.534408,-1.185131,1.130256,-0.936043,-4.911029,2.842716,-5.057774,-3.534585,5.167971,-2.810498,-6.387318,2.556093,-1.201353,-8.925134,-9.751882,6.851139,5.634982,6.332602,-6.029942,1.474446,5.075035,-7.716171,9.070200,-5.743499,-9.902244,6.212024,-4.700625,2.892927,-7.701229,4.583671,-5.196512,-8.297584,-1.334346,-4.361525,2.349642,-9.521438,-3.699547,6.926704,5.148735,-6.830580,-7.251479,-9.581979,5.961807,-7.156830,1.495378,-8.194281,-4.657524,7.135918,-2.618172,6.777739,-9.410356,4.019182,0.666624,-7.585076,-0.279953,-8.635694,9.839738,-6.229409,8.499584,-4.794686,-2.144322,-8.063631,0.773330,-3.550141,7.355766,9.389735,1.839515,4.551161,8.721356,5.175319,-9.958723,3.921442,-5.365069,-3.190761,-0.282834,-2.937455,-0.647519,6.063124,-8.537890,0.010047,7.414855,6.351732,6.055544,9.204795,4.285045,4.055057,8.387228,3.772643,-3.658941,6.157811,-6.627910,5.281133,-1.624655,-8.570431,-9.935338,-9.820985,-2.211413,-2.729624,-4.720688,3.145192,-2.400379,-4.720524,4.772670,4.443368,5.236310,-3.664654,-3.540763,-6.862088,-8.159395,-7.398714,6.325602,-6.512547,-6.607286,6.308782,5.974571,-6.616780,8.415366,9.740248,-6.830899,-9.818366,0.745826,6.808674,0.575705,-2.982944,-5.451155,-8.402065,2.486963,-6.755130,-6.082617,8.659868,-5.518939,6.925841,-6.425891,-6.118356,-1.645653,-4.612234,4.330707,4.622612,-3.350299,-0.602758,-9.431985,-6.241339,9.657370,-6.306035,-2.789053,1.050171,6.001164,7.341257,6.148684,8.058898,-8.693229,5.105887,2.926578,-7.073942,-3.128975,8.138492,-0.506107,4.237130,-2.780451,5.917033,1.702864,3.108525,1.473642,-7.164788,-5.682710,-6.751653,9.148066,-4.456410,8.801282,-9.415179,7.495745,-0.281100,6.582289,5.909304,2.173663,6.238028,-6.154831,-8.338420,9.209066,-9.424112,-3.794682,-9.814885,3.629981,-3.836259,-0.453131,-9.097364,-5.626537,0.844249,-7.880528,5.097837,6.024902,-9.628773,1.204978,5.724405,8.351848,-6.060099,0.813877,-1.780402,1.486810,3.272451,1.811104], dtype = "float64")#candidate|2163|(420,)|const|float64
const_2164 = relay.const([True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False], dtype = "bool")#candidate|2164|(2240,)|const|bool
call_2162 = relay.TupleGetItem(func_573_call(relay.reshape(const_2163.astype('float64'), [7, 10, 6]), relay.reshape(const_2164.astype('bool'), [2240,]), ), 3)
call_2165 = relay.TupleGetItem(func_576_call(relay.reshape(const_2163.astype('float64'), [7, 10, 6]), relay.reshape(const_2164.astype('bool'), [2240,]), ), 3)
bop_2166 = relay.maximum(uop_2148.astype('int64'), relay.reshape(var_2147.astype('int64'), relay.shape_of(uop_2148))) # shape=(13, 1, 16)
func_1658_call = mod.get_global_var('func_1658')
func_1660_call = mutated_mod.get_global_var('func_1660')
call_2170 = func_1658_call()
call_2171 = func_1658_call()
func_2061_call = mod.get_global_var('func_2061')
func_2067_call = mutated_mod.get_global_var('func_2067')
const_2175 = relay.const([-8,3,4,4,-7,-8,3,-7,7,4,9,-6,-3,-8,-6,-3,4,8,3,6,6,4,-9,4,6,-1,8,-9,8,1,8,2,4,-4,1,7,-3,9,-4,8,-3,-7,8,1,-5,2,8,7,-4,-9,8,-6,-8,5,-2,-2,-3,3,6,9,-8,-5,7,-8,-1,-7,2,-4,-10,4,3,6,-6,-9,-5,-4,-9,9,10,-6,4,-2,9,-9,-4,-3,-9,-4,8,-7,-10,-5,-7,5,-2,8,4,-4,-7,-6,-6,-7,7,-9,-3,-9,-5,-1,1,-2,7,-10,-2,-8,7,-10,-10,-7,-10,-4,-3,7,-9,2,4,-2,-6,4,9,6,5,-9,5,-3,-4,-8,-10,-7,-3,9,-5,-2,5,10,7,10,-4,-6,8,-5,-6,1,8,-5,9,2,-6,6,10,5,-3,-1,7,9,-9,-8,-7,-1,7,8,9,-1,-6,-6,6,-6,-8,10,-6,-1,-1,-10,-9,3,-4,-3,5,-7,4,7,-7,-9,-10,2,-7,-9,-3,-5,9,-8,1,7,7,6,7,1,4,9,-10,10,-4,-4,-7,9,8,-8,-7,6,-8,5,-4,1,6,-4,3,-4,10,-5,-8,2,10,-7,-6,2,3,-1,-4,7,-6,-8,4,7,-9,-2,9,-5,5,-9,-4,4,8,6,-10,6,3,-7,8,-10,10,-6,-7,7,2,2,-7,-3,4,1,-10,1,2,2,-4,7,-6,3,3,-7,8,-8,8,3,9,-7,10,-4,-10,2,-1,-7,1,10,2,8,-9,-6,-8,-8,-1,-7,4,5,10,-7,-8,7,6,5,7,7,-10,10,10,-6,-4,5,-6,4,-2,6,9,1,-1,3,-10,1,-5,-9,-2,7,-5,5,-5,-7,2,-6,5,6,4,3,2,-3,8,2,-4,-5,3,2,9,-4,-3,1,8,5,7,-3,3,-5,-7,-10,-6,-3,2,-7,-5,3,-1,-5,4,-10,-7,1,10,-10,3,-9,-2,9,8,-9,9,10,-6,1,-4,-2,-6,10,9,5,7,-4,-8,6,-9,8,5,-7,2,5,-1,-4,10,-2,-3,4,1,-10,-10,-5,-1,6,1,-9,5,7,-10,10,-7,8,1,10,9,1,8,8,-8,-5,10,-10,-7,1,-9,7,5,-8,9,-8,-9,6,4,-5,8,1,-4,-3,1,-10,6,8,5,6,3,-10,3,-10,-2,1,-4,10,-7,-1,-8,9,-10,-3,-5,9,-5,10,7,-8,4,-10,4,-8,-2,1,2,4,-9,7,8,-1,6,-2,1,3,9,-4,3,8,-1,-7,-9,6,-8,3,10,-10,5,-1,-1,-2,10,-7,-7,10,2,-2,-8,10,-1,1,-8,10,-2,2,7,-6,-9,10,8,4,5,2,4,1,-8,1,-5,9,-3,-3,-4,-7,-3,-1,-7,10,2,-7,-5,-4,-1,9], dtype = "int32")#candidate|2175|(546,)|const|int32
const_2176 = relay.const([2.493017,2.655844,2.439620,-7.095103,-3.689453,-3.525665,2.022233,-5.818244,0.679201,-7.521952,-6.366126,-7.057261,-1.917721,8.429255,-9.404213,3.472656,-6.768667,-9.125298,1.498954,3.908669,2.953119,-7.755346,-5.180186,-6.426780,-3.476337,7.309827,-4.349341,3.506986,3.816497,7.357055,0.044656,-2.482910,3.568862,-5.019916,0.374312,-3.459649,2.780939,4.714635,3.556473,1.623912,1.342077,-6.327772,6.822784,-8.997830,-4.175210,-1.184720,-1.868952,-7.136602,4.633040,4.336529,-9.373216,2.916290,-9.044854,-8.639473,8.691537,-2.528924,-2.479296,-6.011571,-9.030961,9.820561,-7.661128,-9.184080,-4.700229,-3.339516,0.451751,-6.736361,-8.418167,-6.999089,8.223844,-3.128347,-4.945296,0.045364,-3.473178,-8.910574,-8.601995,6.711495,1.294930,-2.823811,-4.873703,-4.462003,-8.893115,-3.328821,-1.370713,9.301650,2.488042,-4.591938,-3.706551,-0.192739,-3.135234,6.777383,-8.473664,9.950503,1.276151,5.703575,6.914877,2.367748,4.046840,-3.685106,-0.386268,3.591999,8.304239,-2.148709,2.081744,-8.344780,3.531862,-2.216604,6.253466,-1.229590,0.946252,-8.303401,6.099726,-2.657180,6.474595,-5.552055,1.727910,2.898317,-4.847807,-7.262433,9.695028,4.609112,1.772312,-1.119941,0.988164,7.188907,3.464509,4.298425,3.549446,5.236577,-8.879677,0.852148,3.986890,2.212888,-0.702758,9.509129,-3.760394,-7.648644,-3.984440,-2.610175,8.952741,9.942736,-2.349860,5.723742,-8.730996,-6.213866,1.185594,-6.753838,1.749709,-9.112239,-1.851750,9.282846,-3.455026,-7.271930,-3.992147,-8.197074,-1.930188,-1.018730,8.544827,-8.305774,-0.636445,-8.893859,-6.906296,-6.901018,-0.173837,7.646667,-1.009471,-4.065443,9.755701,-5.339516,8.608879,8.690156,-9.390626,-5.961302,-2.149919,9.077372,-7.065934,-0.484043,3.244592,-6.596095,4.464745,-8.525348,-1.372429,-7.919517,9.123936,5.695485,6.568914,-3.183445,7.663381,9.804927,8.788683,-6.438143,2.827025,3.007041,-0.958029,-8.752148,5.273838,7.242886,3.596058,9.825265], dtype = "float64")#candidate|2176|(198,)|const|float64
var_2177 = relay.var("var_2177", dtype = "float64", shape = (630,))#candidate|2177|(630,)|var|float64
call_2174 = relay.TupleGetItem(func_2061_call(relay.reshape(const_2175.astype('int32'), [13, 3, 14]), relay.reshape(const_2175.astype('int32'), [13, 3, 14]), relay.reshape(const_2176.astype('float64'), [198,]), relay.reshape(var_2177.astype('float64'), [630,]), relay.reshape(call_2162.astype('bool'), [1120, 2]), ), 3)
call_2178 = relay.TupleGetItem(func_2067_call(relay.reshape(const_2175.astype('int32'), [13, 3, 14]), relay.reshape(const_2175.astype('int32'), [13, 3, 14]), relay.reshape(const_2176.astype('float64'), [198,]), relay.reshape(var_2177.astype('float64'), [630,]), relay.reshape(call_2162.astype('bool'), [1120, 2]), ), 3)
var_2181 = relay.var("var_2181", dtype = "int64", shape = (13, 12, 16))#candidate|2181|(13, 12, 16)|var|int64
bop_2182 = relay.floor_mod(bop_2166.astype('float64'), var_2181.astype('float64')) # shape=(13, 12, 16)
func_757_call = mod.get_global_var('func_757')
func_760_call = mutated_mod.get_global_var('func_760')
call_2185 = relay.TupleGetItem(func_757_call(relay.reshape(call_2162.astype('bool'), [2240,])), 1)
call_2186 = relay.TupleGetItem(func_760_call(relay.reshape(call_2162.astype('bool'), [2240,])), 1)
uop_2196 = relay.asin(bop_2166.astype('float64')) # shape=(13, 1, 16)
output = relay.Tuple([call_2162,const_2163,const_2164,call_2170,call_2174,const_2175,const_2176,var_2177,bop_2182,call_2185,uop_2196,])
output2 = relay.Tuple([call_2165,const_2163,const_2164,call_2171,call_2178,const_2175,const_2176,var_2177,bop_2182,call_2186,uop_2196,])
func_2204 = relay.Function([var_2147,var_2177,var_2181,], output)
mod['func_2204'] = func_2204
mod = relay.transform.InferType()(mod)
var_2205 = relay.var("var_2205", dtype = "float64", shape = (13, 1, 16))#candidate|2205|(13, 1, 16)|var|float64
var_2206 = relay.var("var_2206", dtype = "float64", shape = (630,))#candidate|2206|(630,)|var|float64
var_2207 = relay.var("var_2207", dtype = "int64", shape = (13, 12, 16))#candidate|2207|(13, 12, 16)|var|int64
output = func_2204(var_2205,var_2206,var_2207,)
func_2208 = relay.Function([var_2205,var_2206,var_2207,], output)
mutated_mod['func_2208'] = func_2208
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1822_call = mod.get_global_var('func_1822')
func_1824_call = mutated_mod.get_global_var('func_1824')
call_2231 = func_1822_call()
call_2232 = func_1822_call()
output = call_2231
output2 = call_2232
func_2240 = relay.Function([], output)
mod['func_2240'] = func_2240
mod = relay.transform.InferType()(mod)
mutated_mod['func_2240'] = func_2240
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2240_call = mutated_mod.get_global_var('func_2240')
call_2241 = func_2240_call()
output = call_2241
func_2242 = relay.Function([], output)
mutated_mod['func_2242'] = func_2242
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2145_call = mod.get_global_var('func_2145')
func_2146_call = mutated_mod.get_global_var('func_2146')
call_2301 = func_2145_call()
call_2302 = func_2145_call()
var_2307 = relay.var("var_2307", dtype = "uint64", shape = (15, 5, 9))#candidate|2307|(15, 5, 9)|var|uint64
bop_2308 = relay.add(call_2301.astype('uint8'), relay.reshape(var_2307.astype('uint8'), relay.shape_of(call_2301))) # shape=(15, 5, 9)
bop_2311 = relay.add(call_2302.astype('uint8'), relay.reshape(var_2307.astype('uint8'), relay.shape_of(call_2302))) # shape=(15, 5, 9)
output = relay.Tuple([bop_2308,])
output2 = relay.Tuple([bop_2311,])
func_2315 = relay.Function([var_2307,], output)
mod['func_2315'] = func_2315
mod = relay.transform.InferType()(mod)
mutated_mod['func_2315'] = func_2315
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2316 = relay.var("var_2316", dtype = "uint64", shape = (15, 5, 9))#candidate|2316|(15, 5, 9)|var|uint64
func_2315_call = mutated_mod.get_global_var('func_2315')
call_2317 = func_2315_call(var_2316)
output = call_2317
func_2318 = relay.Function([var_2316], output)
mutated_mod['func_2318'] = func_2318
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2322 = relay.var("var_2322", dtype = "float64", shape = (7, 7, 14))#candidate|2322|(7, 7, 14)|var|float64
var_2323 = relay.var("var_2323", dtype = "float64", shape = (7, 7, 14))#candidate|2323|(7, 7, 14)|var|float64
bop_2324 = relay.maximum(var_2322.astype('float64'), relay.reshape(var_2323.astype('float64'), relay.shape_of(var_2322))) # shape=(7, 7, 14)
uop_2327 = relay.erf(var_2323.astype('float32')) # shape=(7, 7, 14)
func_1685_call = mod.get_global_var('func_1685')
func_1687_call = mutated_mod.get_global_var('func_1687')
call_2329 = relay.TupleGetItem(func_1685_call(), 0)
call_2330 = relay.TupleGetItem(func_1687_call(), 0)
bop_2334 = relay.not_equal(bop_2324.astype('bool'), relay.reshape(var_2322.astype('bool'), relay.shape_of(bop_2324))) # shape=(7, 7, 14)
bop_2341 = relay.logical_xor(uop_2327.astype('uint8'), relay.reshape(bop_2324.astype('uint8'), relay.shape_of(uop_2327))) # shape=(7, 7, 14)
bop_2348 = relay.equal(bop_2324.astype('bool'), relay.reshape(bop_2341.astype('bool'), relay.shape_of(bop_2324))) # shape=(7, 7, 14)
uop_2359 = relay.rsqrt(bop_2348.astype('float64')) # shape=(7, 7, 14)
func_2061_call = mod.get_global_var('func_2061')
func_2067_call = mutated_mod.get_global_var('func_2067')
var_2377 = relay.var("var_2377", dtype = "int32", shape = (546,))#candidate|2377|(546,)|var|int32
const_2378 = relay.const([[1.190122,4.446759,-6.852076,2.179349,0.103733,-0.079807,5.987598,7.389192,-4.135079,3.427689,-9.751531,-3.789799,0.700854,0.235702,-0.383403,7.167882,-5.563857,-8.449038,-9.306763,1.666237,-2.534364,6.094650,-5.593485,-8.504859,9.456640,6.101563,9.546613,-3.129049,-5.530348,-5.549225,0.540038,-5.220585,-9.571561,-0.233339,-6.064753,1.719248,6.519794,-7.415535,8.364962,-9.904038,-8.892529,-5.600257,-0.705450,5.600861,9.701751,8.698902,7.172540,-3.155640,-7.995856,-2.383209,-3.921266,2.416297,-0.239342,3.563453,-6.512396,4.681956,4.928684,-8.344702,-8.585586,-7.772871,9.033695,-5.120856,2.590260,6.514655,0.895173,-7.153798],[4.013411,-1.958967,-6.599994,9.847223,0.470615,2.163522,1.409154,-4.496795,8.791936,7.280014,-8.044348,-4.633914,-5.576387,6.013952,6.410393,7.743992,5.276917,2.251146,7.882616,9.915879,2.474781,0.777098,-9.891950,-9.174032,1.017783,1.212676,-4.846089,1.575093,5.532596,-7.417731,4.686426,8.508049,1.178365,-6.035308,4.456625,-1.707589,-1.877860,4.996485,8.756660,2.282006,8.795619,0.792323,-0.871022,-1.692411,8.414552,-3.909286,-2.436812,-4.839473,-3.215792,-4.251168,-0.109343,-9.042526,2.377788,0.400293,-9.621056,5.434303,1.907269,1.004468,9.540080,5.895472,-5.168558,9.282208,9.559776,3.755211,-8.093596,-4.621065],[-8.414558,-1.462272,-8.188939,-2.244876,-7.497215,1.823808,-1.729510,3.127858,-9.365012,7.029568,-7.577994,-6.951584,-9.546480,-4.622582,4.614182,8.978005,7.136530,5.595389,2.929905,-8.209988,2.592344,-7.682686,-4.009942,-7.360625,-4.244880,-6.692632,-3.127529,2.893674,-3.158073,-8.460295,-5.529037,0.343701,2.898636,6.015968,-2.610451,-7.771227,1.703769,-3.017567,-5.500517,5.040186,-7.380404,4.746520,-4.634712,1.470346,-1.141529,-6.026559,8.981984,2.064421,6.369343,3.382493,-7.877841,6.120022,-5.979102,-5.874820,-4.991983,-1.095450,1.952858,-5.513329,-5.586891,-6.297340,7.552406,6.471888,-8.375181,8.277668,1.536707,4.021657]], dtype = "float64")#candidate|2378|(3, 66)|const|float64
var_2379 = relay.var("var_2379", dtype = "float64", shape = (630,))#candidate|2379|(630,)|var|float64
var_2380 = relay.var("var_2380", dtype = "bool", shape = (2240,))#candidate|2380|(2240,)|var|bool
call_2376 = relay.TupleGetItem(func_2061_call(relay.reshape(var_2377.astype('int32'), [13, 3, 14]), relay.reshape(var_2377.astype('int32'), [13, 3, 14]), relay.reshape(const_2378.astype('float64'), [198,]), relay.reshape(var_2379.astype('float64'), [630,]), relay.reshape(var_2380.astype('bool'), [1120, 2]), ), 2)
call_2381 = relay.TupleGetItem(func_2067_call(relay.reshape(var_2377.astype('int32'), [13, 3, 14]), relay.reshape(var_2377.astype('int32'), [13, 3, 14]), relay.reshape(const_2378.astype('float64'), [198,]), relay.reshape(var_2379.astype('float64'), [630,]), relay.reshape(var_2380.astype('bool'), [1120, 2]), ), 2)
bop_2387 = relay.minimum(bop_2341.astype('int32'), relay.reshape(bop_2334.astype('int32'), relay.shape_of(bop_2341))) # shape=(7, 7, 14)
const_2399 = relay.const([[[2.727506,-5.988522,-4.111301,5.184556,-0.720098,-8.470283,-6.341181,-4.098340,0.987231,-4.977162,-7.998741,3.706238,1.406754,-0.455075],[-3.580417,-3.761963,3.243417,-7.619500,5.083786,2.797893,4.462703,5.531541,8.900860,-0.793233,1.475428,2.985022,7.030390,-5.794400],[3.412944,-9.843626,4.397997,2.866683,7.584262,-8.547834,9.370395,-8.394297,-1.206375,-6.581605,1.524275,-6.460916,-1.754096,-6.080328],[-6.402048,-7.867716,4.446489,-3.150903,8.052449,9.337021,1.629703,-5.260501,8.841134,9.714384,-3.822608,6.122263,-0.263509,-1.894121],[1.075764,-6.646130,-9.137598,-1.370023,3.145958,-4.248609,-6.583858,5.895996,0.916933,3.876093,-4.209723,-4.224500,-5.252478,-9.333452],[-7.224705,7.820035,6.275465,4.836450,-1.955137,7.224642,-3.816410,8.056741,-2.756022,-3.757913,-9.035505,-2.161464,-7.436395,1.497246],[4.669732,7.971482,2.092537,8.298120,9.064405,-5.387994,-1.613942,4.454024,1.854094,-2.368320,-7.340332,9.263146,-7.762640,8.394856]],[[0.007566,1.482058,7.837227,-7.255826,-3.080326,5.889679,-0.797425,9.852934,-9.687248,-8.381929,7.348956,5.280947,3.911656,-2.903415],[-7.580312,2.246772,7.436397,-8.250572,8.216889,8.833132,2.375546,1.569493,-2.909141,-0.054523,-0.762167,-0.528372,0.875175,2.642268],[-8.417948,-9.484475,2.968011,-4.249917,7.215455,7.983917,2.637570,-1.013698,-3.768803,4.551053,-9.818290,8.217186,-1.641349,5.394439],[9.586938,-8.178984,-7.557648,-9.956867,-2.693180,-9.552796,-4.352969,7.273158,-3.242008,-7.062515,5.583777,3.660928,8.259879,-3.446521],[-9.506977,-4.170650,-9.212848,-0.879553,6.176695,0.579534,9.140488,4.376406,8.535473,-4.927246,-9.348130,-4.813755,-6.387887,-1.426385],[-0.125309,1.573558,-6.344293,-1.882828,-7.415270,3.933786,-6.648811,-3.483758,0.446802,6.961686,-7.772901,-7.809162,-6.965369,-6.286804],[5.798795,-7.751780,-8.520334,-1.576028,8.259598,6.370238,8.297532,-7.642005,5.676424,-9.216264,-9.631757,-9.453018,6.965594,-2.172836]],[[9.560230,-9.228627,9.687344,7.797048,-6.565076,-4.067622,-5.257532,1.592760,-6.467482,9.001114,-8.974595,-6.669920,8.853804,9.866276],[-3.921853,-7.873644,3.309387,-0.921558,-3.058141,-7.223640,3.694578,-8.464192,-6.149604,-0.977783,9.243448,6.670268,3.058109,3.528905],[-5.572639,8.306099,-3.573519,-0.787781,-1.444782,-7.562169,-6.594030,9.329099,0.859257,-2.528554,2.164370,-5.544241,-2.398026,7.646459],[-8.104068,6.861869,7.395213,4.059152,-1.091017,9.189642,-8.574638,3.938523,-5.222782,-6.770678,3.584006,-4.173290,7.406409,2.136070],[-4.674377,6.313573,0.933470,8.732483,9.585574,-5.611073,-3.960904,-3.690024,0.575747,-5.892306,-1.434260,9.414205,5.471364,6.928008],[7.077123,-0.180980,2.459502,-4.372568,-6.544067,9.819906,-0.112782,-2.509792,-0.908955,5.097040,-0.827928,9.803121,-5.533310,-8.859491],[-4.065162,5.619076,9.240439,9.749776,5.529819,4.693776,5.146820,-2.026180,7.070277,4.907088,0.536167,8.750020,-7.133177,6.468306]],[[-8.471482,-4.156964,0.779382,-7.470022,0.753793,9.204985,2.263095,7.958620,3.438598,-8.478514,-5.154159,-5.732816,-3.513673,0.989749],[6.248766,8.317727,9.944052,-6.080080,7.057156,9.085168,3.752953,-9.000636,7.331776,1.545703,6.962980,9.620694,4.263597,7.908481],[-2.853930,-4.591871,4.719078,2.245776,4.404621,8.487204,-4.762334,-5.900518,2.580787,-0.548781,-2.158350,-1.564725,7.795430,7.770816],[1.197003,-9.271777,4.234385,3.199255,-0.526145,2.414716,0.182396,6.082193,1.261178,9.758576,-8.466456,-7.015919,6.094073,-9.398667],[-7.512338,-7.942459,-5.834920,1.425297,1.325337,6.112158,4.335261,-4.230136,1.566747,-7.801176,2.595296,-8.858617,9.395112,-1.263476],[4.100853,8.790995,-9.776917,1.762881,-9.238430,-0.528311,-7.864257,-6.204551,7.547005,-7.298244,-6.335483,9.571236,-1.688575,0.140270],[-7.362618,-2.205849,-3.257100,-9.448622,0.681329,1.954910,-9.869273,-5.517733,6.894240,5.256791,1.233254,-0.094638,-7.907140,2.934738]],[[5.326569,9.051593,-6.626613,3.458057,5.186931,3.346493,0.354582,6.647660,-2.546364,-8.996941,-1.194514,-5.813480,1.727739,7.793367],[9.105809,-7.224514,5.899880,-4.639217,-4.644814,-5.612112,9.380391,-4.946958,-7.268096,8.952164,0.616792,5.621573,6.268408,7.560288],[-2.207969,-4.191164,5.256991,-4.210161,-0.751763,-8.944414,-1.561401,5.345070,-0.233433,-1.983618,3.061751,-8.234630,-3.593725,-7.452371],[2.679992,-0.528146,-8.401871,0.786419,-6.394962,-9.859912,4.736587,2.514160,6.646314,4.105555,-6.253278,-7.957617,9.529791,0.044200],[-9.530279,5.580802,3.737917,9.548725,1.076708,-4.763291,-2.106412,-3.934256,9.180367,2.368779,-6.389015,1.136756,0.095826,-6.601597],[-2.890527,-4.538637,0.007313,-5.000632,8.558986,-8.302724,1.662059,-9.328925,7.422981,0.559827,-9.865782,6.935793,1.527940,-6.994163],[9.610479,-7.969215,-3.937390,-7.944958,-4.585407,-3.894403,9.628809,-4.956462,5.452594,-7.418724,-6.337626,-9.915717,1.076432,3.678926]],[[-3.986114,5.634382,9.890730,3.536753,-1.121960,4.504291,-2.805925,-7.942146,0.273105,-3.963146,-8.509842,2.790908,-9.889402,8.041719],[-0.589297,0.137541,-5.472782,-6.022865,-8.942285,7.672220,6.698071,1.200329,4.927970,1.865041,3.555619,8.633734,6.441706,-7.399546],[-0.054348,8.840902,-4.114759,3.705370,7.197835,-5.357757,5.475962,-2.006480,0.811124,5.770893,9.896902,7.509248,-8.689141,-5.587898],[6.931040,-8.741188,1.679259,-7.325543,-4.399452,-7.410471,7.756199,1.178770,7.663448,-5.229928,9.124793,2.191378,-6.855123,3.420924],[1.495875,-6.372719,-9.128624,7.158904,-8.676155,-3.472479,8.428824,-7.285816,3.399471,-4.474144,4.513965,4.008329,-5.471118,-7.073153],[2.820574,0.699388,4.319779,-0.868202,-8.663119,5.744407,0.033258,0.253263,9.432230,-9.988074,3.276634,2.088646,0.027930,-9.178832],[5.683608,-1.263649,-1.117513,4.853013,-6.122784,-5.059268,2.840443,8.474178,6.180212,-5.869767,1.696124,7.736270,8.596667,6.304050]],[[-4.486698,-7.011817,-6.769485,-9.116683,-4.576049,7.565311,5.892166,-2.353919,3.662069,-4.815007,-4.522276,1.601240,1.261419,1.088047],[0.174566,7.163057,-8.737948,8.250853,-9.550443,1.807591,-1.471241,8.046757,-6.601778,-4.862693,-9.722627,-4.093737,2.360327,-2.417724],[2.376260,7.870037,-1.892983,-3.469814,-4.473403,-6.702435,5.924152,-8.219601,-9.336181,-9.737271,7.902184,-1.018810,1.774444,-8.160070],[4.220704,1.141691,-9.138648,2.004985,9.127148,2.561254,-5.621265,-3.060778,-8.600598,0.817802,5.401231,3.117998,-0.900936,-3.855922],[0.754969,4.477520,5.211479,3.515791,7.820825,-4.603230,-8.979032,9.706838,7.533614,-7.733317,-4.723530,-8.141002,9.083815,-9.080135],[-9.585784,7.102298,2.560223,-7.679837,6.935914,2.224704,-8.191518,1.618989,4.648507,3.251107,2.659373,-4.373663,0.984183,2.310071],[2.988096,0.488162,-9.008786,4.721209,7.644667,-0.987343,5.351386,1.499980,6.793047,-6.748341,8.826309,-0.895664,3.476823,-4.511943]]], dtype = "float64")#candidate|2399|(7, 7, 14)|const|float64
bop_2400 = relay.greater_equal(uop_2359.astype('bool'), relay.reshape(const_2399.astype('bool'), relay.shape_of(uop_2359))) # shape=(7, 7, 14)
const_2411 = relay.const([[[False,True,False,False,True,False,False,False,True,False,True,True,False,True],[False,True,False,False,False,False,False,False,False,False,False,False,False,False],[True,False,False,True,True,False,False,False,True,False,False,False,False,False],[True,False,True,True,True,True,False,False,False,False,False,False,False,False],[False,False,False,True,False,True,True,True,True,True,False,False,True,False],[False,True,False,True,True,True,True,False,True,True,False,True,True,False],[True,True,False,False,True,True,True,False,False,False,True,True,True,True]],[[False,False,False,False,True,False,False,False,False,True,True,True,False,True],[False,True,False,True,False,False,True,True,True,True,True,True,True,True],[True,True,False,True,True,False,True,True,True,True,True,True,False,False],[False,False,False,False,True,False,True,True,False,True,True,False,False,False],[True,True,True,False,False,False,True,False,False,True,True,True,False,False],[False,True,True,False,True,True,False,True,True,False,False,True,True,True],[True,True,False,True,False,True,True,True,True,True,True,False,False,False]],[[True,False,False,False,True,True,False,True,False,True,False,True,True,False],[True,False,False,False,True,False,True,True,True,True,False,True,False,True],[True,False,True,False,False,False,False,False,True,True,True,False,False,True],[True,True,True,False,True,True,True,False,True,False,True,True,True,False],[False,True,True,True,True,True,True,False,True,False,False,False,True,True],[False,True,False,False,False,True,False,True,True,True,True,False,False,False],[True,True,False,True,True,False,False,False,True,False,False,False,False,False]],[[False,True,True,True,False,True,True,False,True,True,True,False,True,False],[False,True,False,False,False,True,True,True,True,False,False,False,False,False],[False,False,True,False,True,False,True,True,False,False,True,True,False,False],[True,True,False,True,False,False,True,False,True,True,False,False,True,False],[False,True,False,False,True,True,True,False,False,False,True,False,True,False],[True,True,False,False,False,False,True,False,False,True,False,False,False,False],[False,True,False,True,False,True,True,True,False,False,True,False,True,False]],[[False,False,False,True,True,False,True,True,False,True,True,False,False,True],[False,False,False,True,True,False,False,True,True,True,False,False,False,True],[False,True,True,True,True,True,False,False,True,False,True,True,True,False],[True,True,True,False,True,True,True,False,False,True,True,True,False,True],[True,False,False,False,True,True,True,False,False,True,False,True,True,True],[False,False,True,True,True,True,True,False,False,False,False,False,True,True],[False,False,False,True,False,False,True,False,True,False,False,True,False,True]],[[False,True,False,False,False,False,False,True,True,True,False,True,False,False],[False,True,False,False,True,False,True,False,True,True,False,False,True,False],[False,True,True,False,True,False,True,True,False,True,False,True,False,False],[False,False,True,False,False,True,False,True,True,False,True,False,True,True],[True,False,False,True,False,True,True,True,True,False,False,True,True,False],[False,False,True,True,False,False,True,False,True,False,False,False,False,True],[True,True,True,False,True,True,True,True,False,False,False,False,True,False]],[[True,False,True,False,False,False,True,True,False,False,True,True,False,True],[True,False,True,False,True,False,False,True,True,True,False,True,False,True],[True,True,True,True,True,False,True,False,False,False,True,False,False,False],[True,True,False,True,True,True,True,True,True,False,False,False,True,False],[True,True,True,True,False,True,False,False,True,True,False,False,True,True],[False,True,True,False,False,True,True,False,False,False,True,True,False,True],[True,False,True,True,True,True,False,False,False,False,False,True,True,False]]], dtype = "bool")#candidate|2411|(7, 7, 14)|const|bool
bop_2412 = relay.left_shift(bop_2400.astype('int32'), relay.reshape(const_2411.astype('int32'), relay.shape_of(bop_2400))) # shape=(7, 7, 14)
output = relay.Tuple([call_2329,call_2376,var_2377,const_2378,var_2379,var_2380,bop_2387,bop_2412,])
output2 = relay.Tuple([call_2330,call_2381,var_2377,const_2378,var_2379,var_2380,bop_2387,bop_2412,])
func_2433 = relay.Function([var_2322,var_2323,var_2377,var_2379,var_2380,], output)
mod['func_2433'] = func_2433
mod = relay.transform.InferType()(mod)
var_2434 = relay.var("var_2434", dtype = "float64", shape = (7, 7, 14))#candidate|2434|(7, 7, 14)|var|float64
var_2435 = relay.var("var_2435", dtype = "float64", shape = (7, 7, 14))#candidate|2435|(7, 7, 14)|var|float64
var_2436 = relay.var("var_2436", dtype = "int32", shape = (546,))#candidate|2436|(546,)|var|int32
var_2437 = relay.var("var_2437", dtype = "float64", shape = (630,))#candidate|2437|(630,)|var|float64
var_2438 = relay.var("var_2438", dtype = "bool", shape = (2240,))#candidate|2438|(2240,)|var|bool
output = func_2433(var_2434,var_2435,var_2436,var_2437,var_2438,)
func_2439 = relay.Function([var_2434,var_2435,var_2436,var_2437,var_2438,], output)
mutated_mod['func_2439'] = func_2439
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2145_call = mod.get_global_var('func_2145')
func_2146_call = mutated_mod.get_global_var('func_2146')
call_2513 = func_2145_call()
call_2514 = func_2145_call()
output = call_2513
output2 = call_2514
func_2519 = relay.Function([], output)
mod['func_2519'] = func_2519
mod = relay.transform.InferType()(mod)
mutated_mod['func_2519'] = func_2519
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2519_call = mutated_mod.get_global_var('func_2519')
call_2520 = func_2519_call()
output = call_2520
func_2521 = relay.Function([], output)
mutated_mod['func_2521'] = func_2521
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1787_call = mod.get_global_var('func_1787')
func_1789_call = mutated_mod.get_global_var('func_1789')
call_2549 = relay.TupleGetItem(func_1787_call(), 0)
call_2550 = relay.TupleGetItem(func_1789_call(), 0)
output = call_2549
output2 = call_2550
func_2568 = relay.Function([], output)
mod['func_2568'] = func_2568
mod = relay.transform.InferType()(mod)
mutated_mod['func_2568'] = func_2568
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2568_call = mutated_mod.get_global_var('func_2568')
call_2569 = func_2568_call()
output = call_2569
func_2570 = relay.Function([], output)
mutated_mod['func_2570'] = func_2570
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1658_call = mod.get_global_var('func_1658')
func_1660_call = mutated_mod.get_global_var('func_1660')
call_2625 = func_1658_call()
call_2626 = func_1658_call()
uop_2636 = relay.cos(call_2625.astype('float32')) # shape=(15, 5, 9)
uop_2638 = relay.cos(call_2626.astype('float32')) # shape=(15, 5, 9)
output = uop_2636
output2 = uop_2638
func_2653 = relay.Function([], output)
mod['func_2653'] = func_2653
mod = relay.transform.InferType()(mod)
output = func_2653()
func_2654 = relay.Function([], output)
mutated_mod['func_2654'] = func_2654
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2673 = relay.var("var_2673", dtype = "float32", shape = (6, 11, 2))#candidate|2673|(6, 11, 2)|var|float32
uop_2674 = relay.log10(var_2673.astype('float32')) # shape=(6, 11, 2)
func_987_call = mod.get_global_var('func_987')
func_991_call = mutated_mod.get_global_var('func_991')
var_2678 = relay.var("var_2678", dtype = "float64", shape = (36, 6))#candidate|2678|(36, 6)|var|float64
const_2679 = relay.const([-7.158174,3.361677,8.899545,8.531230,-9.147991,-6.163747,0.038773,9.068578,-7.011530,-6.948742,-7.920407,9.124863,-4.228653,6.972881,3.300837,-0.760921,-4.190583,0.503362,0.473504,6.069354,6.766284,8.532228,7.399983,-1.325719,-5.484049,1.268404,0.686636,5.231203,-0.835194,-3.032478,-0.605796,-4.549162,-9.270986,-5.616229,-5.322641,1.732607,4.321519,-9.805924,1.870928,-8.737181,9.868551,1.499019,3.307190,6.279151,6.554385,0.947204,-7.782500,-8.393635,7.321751,-4.055714,7.703566,0.943766,9.268721,8.866039,3.423994,-9.223523,1.999823,3.139041,-9.798434,7.277756,-1.903926,7.780539,-1.295897,1.004733,-5.204039,8.846163,7.158644,6.820231,-3.686977,-3.762786,-2.582707,-2.518959,-7.639496,-1.631112,-8.517673,-0.812798,-4.896163,9.921790,-5.935067,-9.403572,2.348127,-8.042571,6.194128,3.290088,-9.218832,6.271956,-5.394080,-5.641803,4.238462,5.494356,-9.326054,1.569486,-1.942146,7.993892,7.548205,0.622431,1.119101,-7.565505,5.387237,-1.264920,7.468805,9.115105,-2.021488,-2.837741,-4.818017,8.750451,2.682405,-5.425109,-0.539327,-5.039545,2.770043,-1.699267,4.659000,0.994929,-4.680036,-5.028309,2.855166,8.209701,-3.959619,-9.719855,3.986899,9.224886,-4.539436,-3.802369,-0.841539,-0.066947,5.489357,-1.003261,7.919226,1.868566,-6.641028,8.555266,1.049636,8.640897,-7.826666,1.192029,0.258575,4.070863,-5.995578,-1.327917,-0.057716,-4.170139,6.004152,4.680092,2.999976,-8.989382,-7.257611,0.747921,-5.140347,2.933197,-4.558658,4.545995,-4.908860,7.198198,-1.075618,0.251541,2.485969,-1.282723,-3.939709,1.868720,8.133659,2.301819,-6.771932,8.006202,7.204928,4.934410,6.248767,-8.690239,2.422969,-1.816787,9.997244,7.113650,-4.471524,-7.840449,3.734265,-7.134533,2.342981,-2.735754,-6.719108,1.152240,8.695413,-4.415148,7.678994,-4.844701,-0.404398,-6.449827,-9.233027,-6.921041,-7.462253,8.354866,5.336904,-3.549935,-1.022588,-6.903355,-1.191265,-9.914205,-4.170854,2.915074,0.122672,9.876227,-0.631401,-1.475183,8.920674,8.204849,1.354742,2.237781,-5.660503,7.123378,-2.133290,-4.469467,9.145703,-1.232932,5.771961,7.988244,2.945326,-3.859736,3.711197,-5.582067,-5.772482,-5.088080,7.366922,-4.614832,0.668351,-6.338896,1.643730,-9.692608,3.878112,-4.575138,-1.762775,-0.651234,-0.519667,-9.509634,6.783885,-6.359624,-5.007901,1.630342,-6.831046,-3.646368,9.690483,-2.544205,1.975800,-0.360076,7.344720,8.043011,-5.553184,-2.025081,-6.094923,-9.862272,7.567299,7.473634,7.349533,6.646009,-7.485861,4.349584,-2.734736,-5.526911,9.868614,6.440227,-0.868048,-8.311924,-3.271553,9.009088,5.416423,-7.753198,7.533408,2.811826,-1.415905,-0.274527,-2.795766,-4.977963,0.203009,-5.872843,2.494609,-8.383609,-2.035074,7.996446,8.111588,4.644685,-9.601312,7.060105,-6.621325,5.538224,-9.389768,2.295029,8.217065,8.843275,7.509778,3.792205,6.729049,-2.026550,6.650767,-9.779493,-3.728591,4.520680,7.286880,-7.868739,5.326031,-1.024294,-8.627475,-7.050501,-5.593056,-5.864283,7.499214,-9.854909,1.770054,-8.506637,-8.891642,3.895503,8.065873,-5.197880,-4.899603,-0.500210,-0.547134,7.142458,-2.231234,-9.112986,2.972094,-0.604499,2.022898,-7.276846,7.665171,0.496617,1.985139,3.322980,3.696140,-4.212012,-5.472324,-1.418121,3.350389,1.462991,6.088302,-9.591814,4.579860,-6.111121,-0.940766,1.023584,9.269914,5.734054,-9.489022,6.787432,-6.334268,4.258876,-0.525260,3.234216,1.620126,-1.394991,8.892023,2.539279,0.473994,8.662979,-9.835365,-2.109955,9.714269,5.361706,-5.627052,6.019638,-4.515635,2.335658,-7.027859,-1.390028,-9.704198,6.717477,-7.100333,-2.021773,-4.559455,1.925715,-5.321355,-9.350068,7.726918,3.497787,3.602427,6.928946,4.527425,-6.014254,6.067658,4.124894,9.459173,9.194743,-7.474476,-5.905831,9.347172,7.088334,0.925361,6.984510,5.251793,-5.558775,-8.380492,-0.795620,-3.673010,4.485612,-9.346952,2.262161,1.097517,4.448717,-2.949266,-9.251282,3.672885,-6.012181,-9.936245,5.123516,-9.252741,-4.097472,3.037421,4.915759,8.682268,-5.091242,3.864992,-1.661493,-1.725333,-3.508451,8.742671,1.279684,4.077926,1.819660,7.745917,4.344230,-0.904419,-1.746265,9.113447,7.330978,7.714342,-8.085467,-6.424984,8.069248,-7.737829,7.725612,4.622862,-2.030898,-4.546880,-3.101758,-3.992352,-4.856222,3.242762,2.762426,-5.433478,7.246674,-3.928862,-1.903988,-8.893902,0.514632,-3.939547,-4.156916,0.431110,-3.265098,-8.799146,-6.910487,-4.312021,8.303840,0.247199,-3.081244,-7.794290,3.158454,4.366678,4.631321,-3.647068,-7.238986,3.946807,-8.779798,3.084697,1.985819,4.241095,9.791313,-4.893494,7.081932,6.101424,1.101977,0.787184,-3.825898,-5.422209,0.654583,-0.824418,0.081837,-0.226540,2.507026,-7.031877,-2.389138,-7.266275,-1.972560,-1.282565,-1.825114,8.540088,9.555591,3.020415,-4.268891,7.094880,-5.088640,1.406666,-3.528915,0.011619,-4.815799,-6.078812,0.376055,-4.868801,9.522097,2.098495,-4.131992,4.935860,5.050450,2.166838,-8.784988,9.588019,-9.305514,9.025164,9.101167,-8.962436,-8.533344,-3.059929,8.968635,9.612286,7.442179,8.758452,-6.398157,-8.676169,4.243641,6.276518,-5.160709,-2.556256,8.767186,2.964600,-3.745509,-8.247475,-5.424742,-4.499124,4.530327,-5.841933,-5.167060,-7.363672,-3.181106,-7.779216,-5.082646,-2.431945,0.934725,-6.875052,-0.208994,2.981977,2.248928,3.962428,-8.322656,-8.847566,-1.934196,-1.589577,-3.113776,4.121947,8.646504,-2.851611,8.486682,5.621038,3.493881,1.240370,4.218314,-2.122823,5.902753,3.422360,1.859501,1.668832,-6.532488,-5.271711,3.075803,-2.233233,4.344937,-2.586073,7.646340,9.495865,9.459558,-1.205009,3.726972,-3.046644,-7.142359,-3.097738,7.216215,7.387642,-8.275278,-1.850749,6.523091,-4.401256,0.585983,0.369661,-0.323798,4.276565,-4.637058,3.443646,-0.760284,-1.204846,6.819502,-6.299677,-3.344635,-5.316481,3.620936,-6.232630,7.672257,8.689809,-3.017106,7.658531,-9.728711,-8.501167,-5.008817,-6.821338,9.039808,-5.459143,-4.104169,8.743974,-1.060805,8.285246,-7.723230,1.697245,-1.829734,-2.258482,3.817218,-6.665785,-1.579303,-3.397674,-5.740287,5.287372,0.379704,-8.532831,-7.721944,1.250562,3.637014,-5.005271,-8.110297,-7.736404,0.210303,9.494193,-6.792004,-2.244598,2.436866,-2.132445,4.545016,0.596744,3.772510,-3.717921,-8.967340,-0.199807,-0.711108,3.474194,-8.703008,-7.493576,1.766089,5.961760,5.123554,-4.863928,-9.578340,-0.058610,6.422716,8.078247,4.408343,-4.599900,8.537597,1.950974,-7.907253,-8.031936,-1.298063,-9.185182,4.717110,-9.675998,1.871201,2.531059,7.373892,5.700009,0.118013,0.514132,0.614732,-3.305441,-6.656628,-6.157463,1.659237,-9.177698,7.529734,4.452003,-0.229367,4.996594,-6.968034,0.028508,-5.611507,-7.632109,7.877101,-7.885600,-6.428126,6.308729,2.721628,0.668955,7.133240,-3.708678,-8.427181,8.467094,1.902905,-9.947732,4.024406,8.618153,-9.221852,9.957939,1.163150,-8.537159,3.199581,8.503451,-7.743941,0.731438,-2.268267,-5.904995,9.402867,6.169676,7.473666,-4.015822,3.225232,-9.130465,-0.503185,-5.061442,-8.115624,7.055253,-1.263809,-0.059279,8.103717,-1.931874,5.423041,-9.113218,-0.223773,-8.493991,1.736300,-2.503427,-3.327204,-6.715877,2.910990,5.550847,-9.822016,2.677927,2.497428,4.390647,2.530235,-4.291788,-3.110786,1.416645,-1.507787,-3.115974,-2.117492,-0.413920,-2.493154,1.720782,3.490071,3.764266,8.040721,5.710627,-1.525121,4.944642,-2.470439,-9.993472,-2.695376,-2.851608,8.716458,-3.882383,1.320369,0.490724,-2.433256,4.136950,8.220329,5.616885,3.936204,5.121936,1.582932,4.950686,-6.622485,-0.131853,7.494229,9.593303,-8.774217,1.681398,-2.080473,1.136986,5.256551,9.430014,3.305974,-1.908504,3.794114,-0.881571,-9.128359,-5.214491,5.504238,-4.681478,1.719566,-8.969619,2.679466,-9.957562,-5.893077,-3.404063,-7.569239,-2.317814,-6.343261,8.383728,-8.265011,-6.937315,8.889675,9.209823,-0.567946,-7.601823,2.480526,7.712347,-5.851108,-6.444687,0.128869,-2.706890,-7.216480,2.516143,0.412426,-2.052692,-0.522945,5.654046,-4.081236,-1.383386,-7.763176,-1.903985,4.139964,-7.850773,6.789619,-5.531926,-6.352804,6.838185,6.462440,1.146891,9.668013,-7.798266,5.020129,9.416346,-7.486730,-3.781341,-8.214895,-5.464340,-1.987556,7.211005,-0.176019,-8.307247,0.421323,7.943933,-5.695651,7.330757,6.582601,4.516519,7.490818,-7.511003,-0.651449,-6.598693,3.292656,0.706222,-2.088740,-9.641443,-4.719586,8.100426,-2.911264,5.486937,3.619693,-6.579721,-5.224508,1.722125,-7.276811,-5.775370,-3.674998,-8.648070,3.100670,0.181840,-0.731742,-8.481758,-0.247979,-1.061460,8.874763,1.209451,1.661434,8.902987,1.484862,9.616170,-5.049668,1.438215,1.060478,-4.212790,6.607240,-7.778631,4.442277,-3.796748,-9.319336,-8.228164,-4.076756,-7.114789,3.914515,-7.627807,7.973205,1.643191,7.779772,-5.804703,-6.114312,4.686497,6.361514,7.623813,6.261708,-3.714149,8.194368,7.728535,6.634854,5.936503,4.348513,4.874480,9.505176,-7.566702,6.521749,4.524754,4.519379,9.823700,-3.087210,-2.061229,6.004178,7.957514,7.738966,-2.417394,6.932163,-1.210426,1.094823,1.719277,-0.369350,9.320036,-1.798125,3.367603,-4.017647,-2.995311,2.356185,-0.127651,-7.967853,2.301499,-7.778570,-0.796036,6.443739,-0.883341,-4.928465,-3.999323,6.578262,8.996938,-9.436911,6.747184,5.873034,-8.834353,-1.880802,2.571405,-8.557263,4.645572,2.461490,-2.596617,-8.718691,7.994256,-6.054139,2.855637,-6.770375,-6.276090,2.396497,5.223386,0.935523,7.332179,-7.740763,-4.969685,-6.738928,2.629238,2.663323,-7.587180,-0.590236,7.506390,4.672926,-8.740174,4.909298,9.731939,-2.870180,8.834159,-7.762840,-6.168771,-2.365054,9.153717,-2.927554,-4.008128,6.368287,8.581149,-7.816656,-0.360190,8.051196,6.386739,4.883524,7.171843,8.017772,-8.779068,8.965504,-2.237800,8.631611,-0.282584,-2.568028,-3.199919,-5.039033,3.400552,-4.277195,-6.946352,-3.835315,-2.077523,-8.305743,-8.439295,-9.910594,7.183625,8.024467,8.904676,-3.722567,-2.442025,-1.658567,-5.152428,-9.721807,-0.972750,2.500267,-4.220834,-1.726178,-5.947407,-5.696360,3.324489,4.296432,-8.557128,-5.933565,7.696508,-5.034314,-0.552043,-9.832472,6.067397,-5.265978,2.967303,-8.156231,-3.317809,-5.141558,-6.185786,3.860401,-2.223565,-5.336352,7.833370,-6.384200,0.915615,-3.637811,-9.477199,-8.269140,5.385503,8.067331,4.335906,-6.667682,-7.093160,-6.193649,6.675205,-4.536216,-8.909062,-5.163271,-6.667304,-9.883142,8.846780,2.828273,-1.077304,7.885178,-8.881143,-2.340603,9.732076,1.989955,-3.241581,-8.359199,6.751979,2.092007,9.541489,9.197805,-5.136269,-7.354878,-5.091649,3.373625,4.144476,-6.250808,7.293451,8.276314,3.529911,4.634937,-0.457361,5.859138,-1.421684,5.229408,6.207096,6.440918,8.266573,5.409882,2.121607,-3.360462,-0.222818,3.178416,5.466583,-1.381156,0.147085,-9.960780,1.244220,-6.550466,-1.629190,2.076590,-8.551973,-7.037733,-9.471154,-6.572672,-8.147924,6.524401,3.678214,2.444993,2.675522,-5.333663,1.419244,6.776305,-7.287079,-0.308335,7.665941,-9.594969,4.779772,1.918644,1.829214,2.381058,-9.163804,-5.404644,4.295448,1.533183,9.524771,-0.651891,-5.714150,9.166655,6.085348,-6.682363,9.524245,-3.070935,6.155432,5.345053,6.403103,-4.308935,6.997932,-6.457521,-5.412119,1.444430,2.619868,-7.430465,5.543736,-4.723630,-9.645006,-8.342608,-6.952427,-6.314120,-1.550071,-3.915047,-6.627473,-5.418902,4.810388,1.677675,-6.230069,1.885681,-9.395837,8.221084,4.770564,-0.068043,-9.972079,8.257301,2.192408,-7.233533,6.151601,-5.084555,-4.461139,0.234079,0.551164,2.124605,-9.323787,8.908586,8.202784,-8.142562,-7.637643,-9.601696,2.291293,2.387533,6.564902,0.269039,-6.929850,-7.227352,-6.711874,-2.227427,-2.609720,5.831316,-9.095566,4.379884,6.688517,-1.328095,-1.196677,1.802591,0.035068,3.790227,-7.230834,9.402751,-1.741422,6.831329,-5.247480,-4.154764,-1.628371,0.350002,-6.234365,-1.251350,-9.339342,0.268379,3.087440,1.437257,-2.740900,1.862583,7.752231,0.012495,-4.097866,-4.273480,7.014154,-6.523071,-4.493576,-3.404688,-1.045376,-2.143929,-5.641286,-5.462012,-7.648343,-1.689682,-0.769336,-7.674346,-7.368928,5.860938,-1.170402,7.931251,-8.826370,8.245708,2.319382,3.058041,-6.801683,1.243665,8.220579,-9.875769,1.177292,-4.742538,-1.566183,3.310159,2.523698,-3.161463,-7.121177,5.232057,8.381403,3.429822,-3.548490,-4.828692,-9.313657,1.956774,3.013808,-8.514072,-4.322771,-9.709507,2.496196,-9.814762,-8.171509,-1.179462,-5.273946,9.010781,8.529091,0.034919,1.147777,-5.909106,8.939624,-5.900512,-6.793081,3.170953,9.012086,4.303922,5.317550,2.066368,-0.109184,-0.707476,5.366236,-7.018464,-0.022057,5.120575,-8.742620,2.290457,0.652205,-5.708643,-6.748627,9.825164,-1.563683,-7.305665,-6.952816,6.560081,-8.197560,7.845065,-3.357832,-7.873121,5.628780,-4.375348,7.440992,5.352264,6.145900,-3.424940,9.737032,-8.573318,9.656863,9.599619,-0.422681,-1.465030,-3.895733,3.480136,-6.077804,4.555620,2.353971,8.465576,-5.988408,8.487315,-9.734365,4.972713,1.713352,6.384085,5.449341,-8.846699,-3.254812,-1.390334,9.560507,3.207304,4.918933,9.214165,-9.492505,4.523401,-6.555780,5.829789,9.965206,-9.291421,-2.118978,7.001179,9.612252,0.528738,-6.310824,-4.755458,1.284648,5.336194,3.410958,8.522619,2.088130,-5.454181,-1.843630,3.165471,-0.625356,-6.113704,1.150714,-5.718640,-3.523247,-1.375077,8.360567,-1.582080], dtype = "float32")#candidate|2679|(1344,)|const|float32
call_2677 = relay.TupleGetItem(func_987_call(relay.reshape(var_2678.astype('float64'), [12, 9, 2]), relay.reshape(const_2679.astype('float32'), [1344,]), ), 0)
call_2680 = relay.TupleGetItem(func_991_call(relay.reshape(var_2678.astype('float64'), [12, 9, 2]), relay.reshape(const_2679.astype('float32'), [1344,]), ), 0)
func_987_call = mod.get_global_var('func_987')
func_991_call = mutated_mod.get_global_var('func_991')
call_2683 = relay.TupleGetItem(func_987_call(relay.reshape(var_2678.astype('float64'), [12, 9, 2]), relay.reshape(const_2679.astype('float32'), [1344,]), ), 0)
call_2684 = relay.TupleGetItem(func_991_call(relay.reshape(var_2678.astype('float64'), [12, 9, 2]), relay.reshape(const_2679.astype('float32'), [1344,]), ), 0)
func_573_call = mod.get_global_var('func_573')
func_576_call = mutated_mod.get_global_var('func_576')
var_2707 = relay.var("var_2707", dtype = "float64", shape = (420, 1))#candidate|2707|(420, 1)|var|float64
call_2706 = relay.TupleGetItem(func_573_call(relay.reshape(var_2707.astype('float64'), [7, 10, 6]), relay.reshape(call_2683.astype('bool'), [2240,]), ), 2)
call_2708 = relay.TupleGetItem(func_576_call(relay.reshape(var_2707.astype('float64'), [7, 10, 6]), relay.reshape(call_2683.astype('bool'), [2240,]), ), 2)
func_396_call = mod.get_global_var('func_396')
func_398_call = mutated_mod.get_global_var('func_398')
call_2726 = func_396_call(relay.reshape(call_2706.astype('bool'), [10, 16, 14]))
call_2727 = func_396_call(relay.reshape(call_2706.astype('bool'), [10, 16, 14]))
output = relay.Tuple([uop_2674,call_2677,var_2678,const_2679,call_2683,call_2706,var_2707,call_2726,])
output2 = relay.Tuple([uop_2674,call_2680,var_2678,const_2679,call_2684,call_2708,var_2707,call_2727,])
func_2733 = relay.Function([var_2673,var_2678,var_2707,], output)
mod['func_2733'] = func_2733
mod = relay.transform.InferType()(mod)
var_2734 = relay.var("var_2734", dtype = "float32", shape = (6, 11, 2))#candidate|2734|(6, 11, 2)|var|float32
var_2735 = relay.var("var_2735", dtype = "float64", shape = (36, 6))#candidate|2735|(36, 6)|var|float64
var_2736 = relay.var("var_2736", dtype = "float64", shape = (420, 1))#candidate|2736|(420, 1)|var|float64
output = func_2733(var_2734,var_2735,var_2736,)
func_2737 = relay.Function([var_2734,var_2735,var_2736,], output)
mutated_mod['func_2737'] = func_2737
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2653_call = mod.get_global_var('func_2653')
func_2654_call = mutated_mod.get_global_var('func_2654')
call_2766 = func_2653_call()
call_2767 = func_2653_call()
var_2771 = relay.var("var_2771", dtype = "float32", shape = (15, 5, 9))#candidate|2771|(15, 5, 9)|var|float32
bop_2772 = relay.not_equal(call_2766.astype('bool'), relay.reshape(var_2771.astype('bool'), relay.shape_of(call_2766))) # shape=(15, 5, 9)
bop_2775 = relay.not_equal(call_2767.astype('bool'), relay.reshape(var_2771.astype('bool'), relay.shape_of(call_2767))) # shape=(15, 5, 9)
func_2103_call = mod.get_global_var('func_2103')
func_2105_call = mutated_mod.get_global_var('func_2105')
var_2784 = relay.var("var_2784", dtype = "float64", shape = (198,))#candidate|2784|(198,)|var|float64
call_2783 = relay.TupleGetItem(func_2103_call(relay.reshape(var_2784.astype('float64'), [198,])), 1)
call_2785 = relay.TupleGetItem(func_2105_call(relay.reshape(var_2784.astype('float64'), [198,])), 1)
output = relay.Tuple([bop_2772,call_2783,var_2784,])
output2 = relay.Tuple([bop_2775,call_2785,var_2784,])
func_2789 = relay.Function([var_2771,var_2784,], output)
mod['func_2789'] = func_2789
mod = relay.transform.InferType()(mod)
var_2790 = relay.var("var_2790", dtype = "float32", shape = (15, 5, 9))#candidate|2790|(15, 5, 9)|var|float32
var_2791 = relay.var("var_2791", dtype = "float64", shape = (198,))#candidate|2791|(198,)|var|float64
output = func_2789(var_2790,var_2791,)
func_2792 = relay.Function([var_2790,var_2791,], output)
mutated_mod['func_2792'] = func_2792
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2140_call = mod.get_global_var('func_2140')
func_2142_call = mutated_mod.get_global_var('func_2142')
call_2839 = func_2140_call()
call_2840 = func_2140_call()
func_1909_call = mod.get_global_var('func_1909')
func_1912_call = mutated_mod.get_global_var('func_1912')
call_2841 = func_1909_call(relay.reshape(call_2839.astype('uint64'), [15, 5, 9]))
call_2842 = func_1909_call(relay.reshape(call_2839.astype('uint64'), [15, 5, 9]))
output = relay.Tuple([call_2839,call_2841,])
output2 = relay.Tuple([call_2840,call_2842,])
func_2850 = relay.Function([], output)
mod['func_2850'] = func_2850
mod = relay.transform.InferType()(mod)
output = func_2850()
func_2851 = relay.Function([], output)
mutated_mod['func_2851'] = func_2851
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2653_call = mod.get_global_var('func_2653')
func_2654_call = mutated_mod.get_global_var('func_2654')
call_2901 = func_2653_call()
call_2902 = func_2653_call()
func_1639_call = mod.get_global_var('func_1639')
func_1643_call = mutated_mod.get_global_var('func_1643')
const_2906 = relay.const([-4.790545,-3.388282,-0.100076,1.276419,-2.569831,-6.794293,5.336726,6.985941,-2.560102,3.638419,-4.127580,2.523835,-5.326217,-7.503197,-7.093042,6.301656,3.433771,-2.332770,-0.487652,0.771681,-3.661498,-4.207091,4.310155,-6.452711,-9.574610,9.231735,8.292309,-1.185368,4.954520,2.349046,3.732119,-9.720816,-1.317062,-8.379471,-1.454565,5.039348,9.943843,-1.125403,-0.410023,-9.685314,-6.914244,7.711935,-3.921366,8.195550,-2.937022,9.440780,-2.423171,7.427605,3.004480,6.134507,4.493900,-3.203513,-9.682656,3.244628,4.312181,5.873648,-8.825115,1.077344,9.257171,-9.327164,7.690506,0.068425,2.541555,2.309686,-2.868798,4.236437,0.476963,-6.691703,-7.355696,-6.175492,6.439125,-7.801571,-0.473301,-3.644733,-2.148291,-2.750259,-9.826987,7.355653,-7.825264,-4.772356,0.841467,-8.595230,-4.137366,9.294021,-3.347870,-2.288313,5.999591,2.753521,2.548356,2.245919,-7.191939,0.938122,4.232136,9.379683,1.114635,-3.771582,4.285981,-0.699863,6.456975,-1.321530,1.057436,8.125705,7.162634,2.041170,-0.808454,9.868493,-3.572762,-8.752904,7.721252,1.706238,6.140081,-0.249513,-4.130708,-3.442695,-0.539586,7.455585,-4.875560,-5.562596,-4.116981,-4.145341,3.174805,6.796985,-5.215294,9.888907,2.303285,3.987758,1.543133,1.203595,-4.807287,9.354430,3.920390,-5.775797,-7.793958,8.289351,-8.447697,0.759671,8.092373,8.152015,-4.024413,-3.128773,4.201776,8.646218,9.817240,-6.559222,-3.882833,-8.307437,5.602272,7.561268,5.379491,-1.676113,-8.999495,5.910924,-0.720735,-9.818651,-8.982640,4.827076,-4.429740,-4.253833,0.399068,2.656505,-9.406116,0.779278,-2.714715,1.049240,-0.063630,-4.117368,-5.504702,-7.815662,-5.076480,3.510787,8.429487,5.093103,5.721746,8.187439,-5.313987,4.008149,-0.289713,-9.255058,6.952070,5.894329,3.072642,9.157545,0.537705,4.516799,-0.290815,-6.447233,3.487810,8.534051,9.126628,7.195542,7.512026,0.548944,-5.949917,-3.284163,9.000180,2.912485,2.993779,-4.088878], dtype = "float64")#candidate|2906|(198,)|const|float64
call_2905 = relay.TupleGetItem(func_1639_call(relay.reshape(const_2906.astype('float64'), [3, 11, 6]), relay.reshape(const_2906.astype('float64'), [3, 11, 6]), ), 0)
call_2907 = relay.TupleGetItem(func_1643_call(relay.reshape(const_2906.astype('float64'), [3, 11, 6]), relay.reshape(const_2906.astype('float64'), [3, 11, 6]), ), 0)
output = relay.Tuple([call_2901,call_2905,const_2906,])
output2 = relay.Tuple([call_2902,call_2907,const_2906,])
func_2922 = relay.Function([], output)
mod['func_2922'] = func_2922
mod = relay.transform.InferType()(mod)
mutated_mod['func_2922'] = func_2922
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2922_call = mutated_mod.get_global_var('func_2922')
call_2923 = func_2922_call()
output = call_2923
func_2924 = relay.Function([], output)
mutated_mod['func_2924'] = func_2924
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2935 = relay.var("var_2935", dtype = "uint16", shape = (11, 1, 16))#candidate|2935|(11, 1, 16)|var|uint16
var_2936 = relay.var("var_2936", dtype = "uint16", shape = (11, 13, 16))#candidate|2936|(11, 13, 16)|var|uint16
bop_2937 = relay.not_equal(var_2935.astype('bool'), var_2936.astype('bool')) # shape=(11, 13, 16)
func_1006_call = mod.get_global_var('func_1006')
func_1008_call = mutated_mod.get_global_var('func_1008')
const_2957 = relay.const([2.904336,-5.118450,-6.050827,3.191734,3.289395,-3.386862,-6.059492,9.445331,0.591721,8.434710,-4.146121,-9.405979,4.584368,-1.053954,-1.736245,-1.043311,6.055885,-6.054669,-3.699037,9.433099,-9.470305,-1.815258,8.760670,-5.934960,-7.394698,9.752768,5.760691,-1.907589,-7.846737,8.742923,-9.852695,-9.543073,-4.123555,7.381958,-5.400907,6.268889,-4.390943,1.512823,8.784312,-4.087283,-4.812363,-3.153443,9.765850,-3.600897,5.689646,-4.122940,1.571921,-8.707782,-4.705478,9.473276,-2.306407,7.528797,-1.374034,-2.870440,8.236835,7.454659,-4.366872,4.410903,-9.312451,-6.871790,3.779049,8.663085,0.593048,6.920768,-2.404864,8.116525,9.049495,0.287942,1.941906,5.575442,4.569750,-5.214054,9.435069,0.195665,-5.566241,6.748608,3.045538,-6.615783,-0.471427,-8.121500,-6.479651,5.679591,-9.047560,-1.741792,5.549795,-4.504030,-2.394530,-8.800314,-9.675449,-8.204517,1.854048,4.310296,-4.919264,-0.777337,7.980149,1.615697,-4.745244,3.173095,-2.022454,-7.482460,8.424863,-4.030785,-4.259039,6.802799,-6.123526,6.363171,-7.639274,-9.212807,-6.165162,4.742828,3.675804,-1.459720,-5.522080,8.133472,2.492327,-5.839290,-0.675460,-6.593834,5.452769,-8.110100,8.557678,-4.219340,-9.440267,4.923767,2.769319,-1.679905,1.471752,-2.721268,-4.735888,-1.791195,0.464669,-9.215385,7.595127,-6.216125,8.053241,6.532755,-0.326715,-5.744121,-5.524183,-3.168723,-5.659357,7.204162,7.737980,8.842432,8.038955,1.786723,-1.347017,-3.116202,-3.255255,7.683177,3.359569,1.683185,-3.357249,-2.868493,4.554437,-1.491245,4.936042,5.413239,9.186686,-0.721631,2.515705,6.784375,-6.677913,1.237163,2.714172,-9.652302,5.473200,-2.488511,3.312702,0.208951,5.778076,-7.717299,9.145209,4.395135,1.730069,8.862134,7.281735,-6.205788,-4.571316,2.530807,-8.946465,4.649864,6.906996,2.529461,-3.733810,7.808499,-4.491326,2.373213,4.669849,-9.197312,-6.448760,5.378958,5.657685,7.232796,-1.704691,0.605458,-2.379699,-9.223185,-5.993291,-7.544585,-2.443526,6.855981,-1.538856,-2.607574,9.720923,-7.668180,-2.038567,-0.980296,7.373320,-1.613961,-3.686648,9.382160,-6.238194,-0.408732,9.672364,1.474721,-7.183734,1.335880,2.172807,-3.657367,-1.989481,4.698612,5.027610,-1.744350,6.460321,-8.536090,-4.015039,1.506305,6.024624,-2.820267,-7.524947,4.522841,-4.745820,7.289543,-7.898043,-3.226875,-0.700072,-4.321375,6.180895,4.250406,9.616480,-7.168726,1.169148,-0.307979,6.822656,8.664062,-0.361963,-7.891793,8.721629,9.075492,-2.216322,0.080857,4.014273,-1.847442,-8.948433,5.724796,1.187293,-1.609000,5.105560,4.938588,8.356843,9.826493,0.535493,-0.006832,5.765906,7.714844,6.479901,3.774968,-9.250673,-0.077107,0.231283,-9.411147,2.432310,9.451058,0.858131,-1.090664,2.822752,-0.556181,1.060755,-4.017264,-2.685967,-8.016649,-0.431496,-8.773503,0.297534,3.378600,5.279940,2.921943,-0.648930,5.226855,-4.591961,-3.725382,6.173378,-8.217677,4.560738,-0.831686,-4.034126,-9.122600,-9.819532,5.725863,4.700066,-8.090227,-2.286135,2.598004,-9.257667,-8.400820,-0.336776,-8.315290,-1.118681,8.267920,3.632328,9.857264,-9.428800,-1.626053,4.620023,1.046642,6.483361,3.865825,0.902260,-8.455170,9.222611,-5.606371,-3.193351,-2.996904,-1.336579,-1.045833,1.495404,7.327008,8.704601,-4.553780,-6.304627,6.729961,7.857622,7.223414,-6.425898,-0.887577,3.895560,4.824394,0.938859,-2.156356,2.618865,-4.633896,-3.477035,8.197055,7.271403,-4.507825,1.713988,8.534301,-8.482918,8.285101,3.474034,0.504954,2.059738,-0.825269,-6.304024,-1.676408,5.358204,-1.855663,-8.554076,-7.651355,3.009803,7.967771,-4.292008,9.866981,-4.739666,0.180685,-7.045498,-9.734670,-7.625588,-9.456263,7.392469,-0.622315,7.785619,-0.665964,-9.019769,-8.296239,-3.889770,-3.327531,-0.570037,7.223343,6.484551,-4.596788,3.679897,0.056364,9.642579,-9.336299,-7.407865,-9.096145,4.811240,0.761346,7.968941,3.377879,-4.546241,-9.029535,8.750935,6.229483,0.835608,-0.213938,-6.314833,-7.837810,-9.216624,-8.812734,0.942172,-9.869853,2.820870,4.690981,8.914776,-7.082708,-5.197227,0.435945,4.914828,-5.711888,-4.305481,9.285761,-5.055540,3.847237,6.938932,6.253241,-2.295474,7.080552,-4.752269,-9.903274,-3.314885,1.512747,8.952922,-8.000921,2.421622,7.277692,-5.899857,-8.916829,-6.259793,9.512556,1.447419,6.750872,-4.592732,4.357825,8.151211,1.856951,8.231916,-0.600361,0.875732,6.941167,-0.565758,-0.322676,9.620904,0.672083,-1.256725,8.404664,-9.046689,1.150738,-5.874785,2.568442,-4.216575,3.150378,9.449744,4.676898,-2.592186,3.925275,3.026798,9.318212,-4.913108,8.487951,7.400604,-0.127051,2.324081,7.326726,-7.179104,0.744064,0.760391,-2.055260,-3.910256,1.846180,-3.525797,0.657853,-2.714435,5.652302,-9.266372,-4.017173,9.259893,0.582183,-3.811262,-7.687015,8.208335,-5.257066,-6.227799,3.271156,-2.968895,-5.128046,3.614972,-6.364056,-2.946671,-2.103022,-8.637395,2.921875,5.112871,-5.910813,3.359103,-0.141240,-2.902910,8.765117,-9.606845,-0.857006,9.122673,8.949819,-4.694350,-7.399800,0.755472,2.310042,9.830773,-1.846598,2.535086,0.503098,5.431423,1.890274,-0.475445,6.353778,4.505879,8.588784,-2.743820,7.354264,-4.762530,0.194713,-7.647751,-4.463545,7.920644,-6.846520,9.171205,3.386104,-5.049792,2.285504,6.193827,7.687266,-8.603775,4.871302,6.047753,6.429884,6.008964,-8.375290,-6.770238,2.119700,8.031606,-2.225369,4.238862,0.587349,5.930199,-5.088727,6.235812,6.234918,-5.051852,-2.876643,-7.155503,-3.007908,6.511344,5.540240,5.691383,4.730203,8.588603,6.153605,-6.688181,-5.459916,8.458781,-0.815953,-7.872260,-6.892927,9.632879,-7.129739,6.792818,9.919666,4.506120,-0.374067,6.706411,9.730946,2.545552,-3.676273,-8.039823,9.077469,8.243430,-0.490542,-0.828802,1.386720,-4.124945,9.938548,-8.594683,-3.800495,4.852576,-8.071246,-8.232892,3.847127,-1.310463,0.641800,-5.880780,9.279823,2.738694,7.717581,-0.708764,6.155787,9.061155,-1.767299,4.514714,8.562904,3.120069,8.817611,-6.649468,-5.842554,-7.117683,4.959734,-8.803463,6.561063,-1.766688,4.614957,6.544575,4.931596,4.061879,-7.098395,-5.793186,-9.996911,8.869863,-1.771881,-4.632898,-5.857212,-1.032759,-5.090806,-9.109869,-7.751960,-2.486867,-7.764749,-2.202429,-8.202519,4.265679,-9.392532], dtype = "float64")#candidate|2957|(630,)|const|float64
call_2956 = func_1006_call(relay.reshape(const_2957.astype('float64'), [3, 14, 15]))
call_2958 = func_1006_call(relay.reshape(const_2957.astype('float64'), [3, 14, 15]))
bop_2967 = relay.greater(var_2936.astype('bool'), relay.reshape(bop_2937.astype('bool'), relay.shape_of(var_2936))) # shape=(11, 13, 16)
output = relay.Tuple([call_2956,const_2957,bop_2967,])
output2 = relay.Tuple([call_2958,const_2957,bop_2967,])
func_2970 = relay.Function([var_2935,var_2936,], output)
mod['func_2970'] = func_2970
mod = relay.transform.InferType()(mod)
var_2971 = relay.var("var_2971", dtype = "uint16", shape = (11, 1, 16))#candidate|2971|(11, 1, 16)|var|uint16
var_2972 = relay.var("var_2972", dtype = "uint16", shape = (11, 13, 16))#candidate|2972|(11, 13, 16)|var|uint16
output = func_2970(var_2971,var_2972,)
func_2973 = relay.Function([var_2971,var_2972,], output)
mutated_mod['func_2973'] = func_2973
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2850_call = mod.get_global_var('func_2850')
func_2851_call = mutated_mod.get_global_var('func_2851')
call_3025 = relay.TupleGetItem(func_2850_call(), 1)
call_3026 = relay.TupleGetItem(func_2851_call(), 1)
output = relay.Tuple([call_3025,])
output2 = relay.Tuple([call_3026,])
func_3028 = relay.Function([], output)
mod['func_3028'] = func_3028
mod = relay.transform.InferType()(mod)
output = func_3028()
func_3029 = relay.Function([], output)
mutated_mod['func_3029'] = func_3029
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3028_call = mod.get_global_var('func_3028')
func_3029_call = mutated_mod.get_global_var('func_3029')
call_3039 = relay.TupleGetItem(func_3028_call(), 0)
call_3040 = relay.TupleGetItem(func_3029_call(), 0)
const_3058 = relay.const([[[9.761425,9.362418,-7.422915,-9.236076,-6.396932,-8.840357,5.567130,-1.561509,4.289209],[-6.594621,2.042253,7.533717,-4.397130,8.398409,-1.276719,0.765676,-5.848225,-8.864793],[-7.050432,-3.295928,5.971731,-9.286975,-7.992980,-2.666006,1.717554,9.358865,2.613712],[7.960858,8.710708,1.956598,7.924275,5.588124,5.353020,-3.339346,-5.104269,-7.360235],[6.718928,-1.219913,3.089997,-8.697625,6.018466,4.707672,-7.003344,3.018044,9.590444]],[[6.389176,6.535740,-2.872084,-5.180557,-3.176205,-5.739289,-5.303268,-6.721027,6.707452],[-0.580560,-0.226784,2.158319,-7.751554,-7.238555,7.799216,-3.690563,-5.400152,0.080594],[-5.948677,3.935911,-3.279653,8.847710,-8.334898,-5.256937,7.201644,7.524399,-8.983071],[0.874241,-3.726017,-5.645236,-1.953028,1.102921,3.225612,2.377073,-8.783037,-9.658145],[-4.560218,-2.936870,1.891169,-8.659972,1.041262,-7.091053,9.908482,-1.032953,0.564621]],[[7.552818,-4.539946,-0.617998,-5.789785,8.262018,5.866342,6.805031,-6.525170,-5.984164],[-0.845521,-1.290336,-1.967061,-8.560038,1.335666,8.452139,7.832765,-2.239147,3.487760],[1.128600,-7.622910,6.506843,9.006539,-9.560666,-5.413525,4.424030,2.378557,-7.761510],[3.906613,7.106172,4.211996,9.272637,-6.730617,-7.348030,3.789152,1.443291,3.684026],[7.612209,1.483427,-7.764580,-3.869180,8.115978,0.534497,8.948119,-3.183100,4.795069]],[[6.341603,-8.729858,-9.559517,-6.759551,2.189240,-1.269094,-1.926858,6.165624,0.593658],[7.650505,4.719749,2.193508,-4.694437,3.527623,-9.354257,-2.749453,-4.996244,3.189122],[-2.340061,-4.223906,4.798903,-6.016757,-0.156120,1.632648,1.567429,4.293586,7.799593],[3.369435,2.441987,-1.462242,-1.242949,9.285729,-4.718591,0.005454,-6.434542,-0.454746],[-5.910354,1.817644,-7.883878,-4.085274,0.404516,-4.846436,3.631529,-6.329124,6.248957]],[[-6.513112,-2.779716,-1.530151,-0.375656,1.004840,8.397630,-9.118878,-1.769444,-5.595186],[-2.764237,-6.287607,-9.315084,7.955157,-4.868127,-1.817367,-7.011017,8.537955,-4.947346],[5.770099,-2.726406,-9.749569,-4.713680,5.669043,-7.089457,5.441898,1.964521,4.869572],[3.244400,4.499743,-7.017002,9.336439,-9.713361,1.305911,-7.767039,0.367720,4.538525],[-7.346500,-7.392869,-2.646935,9.762760,3.542441,4.070690,-7.442536,2.053962,3.302231]],[[6.519381,3.384339,6.583412,-6.535544,1.539602,-9.920822,4.292692,8.377908,2.467117],[7.044136,4.728990,9.355998,1.935812,6.495126,8.863658,-2.523264,9.779585,-5.040678],[1.613910,-6.841640,-0.758611,4.611518,5.469578,1.621430,5.715487,9.564888,3.306989],[6.305981,-0.348245,-7.414952,1.501675,-8.425489,-8.530823,-3.092231,-2.064664,-8.772706],[0.069948,-8.565363,-1.275013,0.405346,-4.439693,0.525107,8.079880,-0.872731,5.267679]],[[9.477123,-8.051022,-3.155961,-6.965354,-1.538044,5.186676,1.833287,-7.813440,-2.347166],[8.160534,-5.680101,-9.198976,-4.082924,3.446179,-7.697507,9.632690,3.311815,8.011929],[-3.350717,-3.885806,-0.358140,1.374457,4.572774,-1.226600,8.208235,6.995132,5.660055],[4.966033,-4.270986,3.496869,2.662625,-5.273182,-2.450591,-4.689557,-9.653094,7.964489],[9.056146,-6.686948,-2.732129,-6.091536,3.674438,-3.228418,9.180507,-8.056078,-9.523613]],[[-4.232205,-8.031181,-3.356695,4.097029,7.924730,-2.451787,-1.771248,1.307686,-7.631149],[0.337873,6.254472,-2.424793,-6.082088,2.590155,5.049020,-1.440630,-6.034874,2.612141],[5.450933,4.885863,-9.911859,2.729735,2.516632,4.039829,-9.188057,-7.326765,4.080057],[1.352609,0.170429,-7.413490,-6.773091,-2.138735,1.249625,-2.471460,-1.599639,6.701522],[0.214756,-8.349273,-5.134591,-4.486705,-5.106246,-7.582662,5.510815,8.667853,7.032926]],[[-6.531088,-3.122852,-6.702865,-8.620841,-7.567942,-5.679775,2.980852,-9.492928,7.872102],[5.703979,-8.666937,-9.189233,-8.834114,-0.425568,-1.059027,9.612357,-6.847269,-4.514216],[-9.506179,1.080869,6.969639,-2.608931,4.428605,-2.508454,5.651550,-2.475318,-7.437602],[2.292349,-3.317677,-2.185680,2.711470,5.671032,-6.248560,-4.501946,-3.068444,0.169777],[0.942646,-2.179494,8.805226,1.123292,3.043193,-2.617582,1.381623,-7.012131,4.157715]],[[-4.220425,-4.762494,-8.784704,5.921767,5.436284,-7.718103,-7.159133,6.442449,-9.357269],[5.793998,7.860003,3.722579,-1.568148,8.706922,6.572972,-6.149398,2.379992,0.681081],[7.816436,-0.946852,5.402992,8.955460,3.895094,-8.525529,3.074402,4.593694,-5.227006],[-2.236856,8.256819,6.019665,3.778000,6.606790,9.286622,-1.259942,5.672835,3.051065],[-1.256131,-2.632767,4.299851,3.077018,9.151055,-9.870036,-9.271880,-8.777943,-8.693736]],[[-1.985781,4.837648,1.347434,-0.984170,8.619043,-8.988911,-1.859119,-0.827208,-6.325067],[-3.416569,-3.302708,4.862545,3.351507,-7.837381,6.247534,-3.552533,-2.172460,4.545574],[-2.447276,6.892669,-6.550153,-4.121387,-4.328531,8.003423,8.053576,2.988153,5.762399],[-2.301702,-5.303362,9.030580,4.658326,7.017353,8.943645,5.663767,-1.280798,-6.990805],[8.824033,-6.210483,3.785519,-5.200109,0.080260,-0.332687,-9.105355,5.971078,1.360665]],[[8.166066,-7.691672,-8.489953,1.023391,5.557296,8.296688,-1.331633,3.192292,-8.200393],[1.269930,5.785032,-4.968518,3.366539,-6.265774,6.744814,2.292693,-0.951200,6.506702],[-8.736900,7.079105,8.068367,6.307474,9.651997,-7.367955,8.305255,-2.594789,-1.637660],[-0.893885,-4.701990,-9.895309,0.436232,-1.204771,-5.934582,-1.307847,-0.381677,-6.012879],[-0.321656,-2.232726,-0.520889,-4.991802,-5.792332,-2.210533,7.966791,-7.242632,2.643602]],[[-2.325885,3.487746,8.554266,-9.697300,-4.242716,0.362567,-8.302850,-0.846208,0.187682],[0.059411,-0.076327,-7.697230,-3.277690,7.067362,3.915740,-0.985061,2.252283,-1.202982],[6.546289,2.284703,-4.239317,-6.820394,-6.270216,5.886380,-7.831747,9.641555,-6.413569],[4.428686,-7.421934,2.272211,-3.296099,2.110088,9.081997,-6.219403,-0.244309,-1.196405],[-8.806992,-2.762955,8.904649,-3.325082,-1.295019,-5.863769,5.184932,-8.323848,5.076300]],[[-9.883527,3.296211,4.552380,3.225568,0.060835,2.920707,-4.973778,-5.563378,0.233491],[-3.364699,9.256179,9.973219,9.684798,-4.645252,-7.867954,-7.614460,4.699486,-0.301509],[-0.904310,-4.134725,-6.324820,-6.426789,3.250038,4.907932,-7.252016,-4.371232,-6.207738],[-9.043096,-7.609374,7.293348,-3.119999,3.219679,8.649359,-6.505553,-8.227017,1.731366],[9.456110,3.532795,3.983933,3.414965,2.052917,2.708245,7.325655,7.483384,-6.888510]],[[7.043882,-7.521865,-4.912539,-3.095637,-4.560395,9.947228,1.877821,0.293024,2.066999],[1.362362,-5.401199,-7.408553,8.810184,8.365692,-7.654247,5.876336,-0.221545,-5.865754],[-7.338294,-5.680892,1.331900,-6.837369,-7.700302,-9.195823,-6.502123,-2.092590,-3.976090],[6.543527,-9.281269,-0.772562,-6.149695,-8.109304,-1.369265,-5.011777,-0.956915,4.100803],[-8.204070,-5.410258,7.169845,3.215510,6.545200,-8.686915,-5.073950,5.181590,0.265078]]], dtype = "float32")#candidate|3058|(15, 5, 9)|const|float32
bop_3059 = relay.subtract(call_3039.astype('int32'), relay.reshape(const_3058.astype('int32'), relay.shape_of(call_3039))) # shape=(15, 5, 9)
bop_3062 = relay.subtract(call_3040.astype('int32'), relay.reshape(const_3058.astype('int32'), relay.shape_of(call_3040))) # shape=(15, 5, 9)
output = relay.Tuple([bop_3059,])
output2 = relay.Tuple([bop_3062,])
func_3063 = relay.Function([], output)
mod['func_3063'] = func_3063
mod = relay.transform.InferType()(mod)
mutated_mod['func_3063'] = func_3063
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3063_call = mutated_mod.get_global_var('func_3063')
call_3064 = func_3063_call()
output = call_3064
func_3065 = relay.Function([], output)
mutated_mod['func_3065'] = func_3065
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3028_call = mod.get_global_var('func_3028')
func_3029_call = mutated_mod.get_global_var('func_3029')
call_3072 = relay.TupleGetItem(func_3028_call(), 0)
call_3073 = relay.TupleGetItem(func_3029_call(), 0)
func_868_call = mod.get_global_var('func_868')
func_871_call = mutated_mod.get_global_var('func_871')
const_3078 = relay.const([7.156713,-2.105031,0.444798,-3.193434,-5.182294,5.487995,0.707200,4.037995,3.201511,3.318475,1.910497,9.468174,-3.327735,4.504522,-5.247735,-1.403528,-9.615476,-4.866491,-6.255906,8.055571,1.693829,-5.487208,1.203637,-2.331096,9.320549,-8.541664,-0.711360,9.277027,0.391506,-3.583737,0.056092,3.709019,9.061791,-4.069912,-7.528592,4.673861,-3.917294,-7.569527,6.801138,2.589290,5.730116,2.694446,7.544197,-5.840840,7.331003,-1.210696,5.882129,-9.716052,9.873666,-9.662532,-1.983635,3.704894,-5.747563,3.584027,9.015965,-4.195686,-8.230723,-0.934946,-9.567045,0.803782,-0.768687,6.844940,0.845145,-7.784258,-3.096119,8.334289,-5.567089,8.154168,-8.840557,-0.788175,4.263279,-1.949208,-8.190684,-4.143451,4.517472,0.387147,3.510438,9.864309,-0.986634,-3.549367,4.368107,-7.140827,-5.821378,-4.057992,-5.823695,-4.770564,7.222636,4.069271,-4.704936,-1.622378,1.859219,1.003939,-3.754292,-2.204129,-2.468041,3.749662,-7.113951,-8.164186,-4.760812,2.247829,2.867150,-7.064506,3.322173,5.551989,4.489967,9.011135,8.916614,-0.572250,-2.940625,-9.887071,8.747205,-3.278107,6.267714,-7.442614,1.307267,-4.327837,-1.878073,0.683574,4.919856,3.602502,-2.858805,7.077638,2.048280,-7.827096,-8.837953,-6.783696,-7.837196,5.807669,8.697874,8.777167,-0.041755,-0.735638,1.737364,-7.492681,-1.644661,1.540829,-4.518897,-3.191120,-5.051889,6.324125,9.569504,-9.260408,-2.222628,-6.803568,-4.192272,-2.841573,6.544745,3.702362,-2.939414,9.473652,7.090964,-9.950534,-5.937623,1.148549,1.767895,3.791572,-1.988185,-0.929291,-9.452019,6.437551,7.081004,2.468364,-6.233141,9.772487,-8.868530,5.747222,7.477389,1.186610,-0.506005,2.897031,-6.809697,-8.181314,-6.710904,9.659555,7.646415,9.849042,5.226630,-6.546843,1.015168,-5.939092,-4.050922,9.974816,2.537807,9.130417,1.069236,1.331514,-7.439809,1.401274,2.967386,6.826202,8.794826,3.949752,9.978045,-9.698820,9.329762,-3.392774,-5.862122,9.850971,-7.882016,2.031571,7.189277,1.818623,-6.717735,9.146173,-7.430086,6.509827,3.086444,-8.045326,-4.544923,-5.365771,5.364008,7.872236,-5.280924,-8.794732,-8.587793,7.241895,-9.765092,9.871062,6.366970,-3.451082,8.727874,0.721167,-9.826505,1.129501,-2.683092,-4.675528,-6.035812,4.122939,4.250531,1.079076,5.456017,3.414814,-4.693024,-8.055247,7.804447,5.262477,-0.175233,-6.147214,-6.570275,4.111488,2.068057,-1.577835,-1.591462,-7.526894,3.816912,9.080246,-3.947372,9.079048,2.321825,-4.607118,-4.969393,7.422629,-3.203385,-9.667767,1.312570,6.025622,7.319437,-5.293612,0.718378,2.755579,-3.311112,2.794951,-8.072851,1.376045,8.197016,-9.293495,6.877904,-7.754246,2.148510,-5.277492,0.705923,1.078323,-7.788844,-3.574364,9.568556,-2.402125,-4.438048,-3.790495,-2.308634,-4.531134,-5.338841,-7.396401,-5.293619,1.225246,6.851735,-4.630153,-9.524087,2.812978,8.421237,-7.086474,-8.636621,-5.509577,8.075259,1.369969,8.629822,0.075813,-7.310710,2.987225,-0.053031,7.847875,1.576361,-9.219092,2.733988,-7.604855,2.411256,1.532367,3.128038,-5.041412,9.919281,2.972035,5.344377,-0.856839,-4.058948,-6.344164,-3.901495,-0.952800,0.577505,8.449846,-9.596754,8.094863,1.745726,4.996889,6.477717,7.581065,3.179642,3.371486,7.022070,9.724640,0.495660,-0.931250,8.281034,9.567180,-0.591766,5.559741,-5.287059,-1.467966,-5.428893,3.138941,-4.955450,-2.989189,6.389237,-2.041367,5.758970,-3.085416,-0.743996,-5.233378,3.501053,-1.187956,3.058185,-6.036248,2.761921,7.273207,1.016673,2.193974,2.675508,2.366910,9.014886,5.236929,0.376825,7.663195,-5.222722,5.056955,-7.594525,9.015760,-3.957862,6.778615,6.785417,5.614428,4.053204,-0.882115,-7.473882,6.492706,4.698253,-9.356625,-8.942774,-4.934746,1.467820,-6.216760,-4.744207,6.865519,-4.712630,-9.417148,9.931222,-1.515657,-0.227722,2.458161,-8.430235,-8.462308,6.215751,2.350177,-7.264921,4.332905,6.271416,2.780687,6.158365,-0.601544,-8.216867,8.208870,-0.913041,-9.316594,-3.431476,2.301688,3.784047,6.505059,-1.996460,-6.069822,-0.052057,4.759880,-0.984219,0.822709,2.021111,4.816987,-2.358308,-5.756497,-3.592661,3.252244,-8.536672,2.143692,-3.583018,7.048777,8.492468,-5.942884,9.003807,-9.902445,-2.719285,3.843903,0.811412,3.223405,-3.227508,0.058567,6.708788,9.601311,2.204933,1.509236,4.801977,1.760909,-9.439017,9.914962,9.311167,9.738321,7.972950,2.992181,8.238383,5.530463,-9.577426,-1.217666,9.872965,-8.011722,3.201072,5.330436,-2.526452,3.441967,-1.112258,-4.301170,-4.949168,4.169561,-8.691258,7.138852,-8.615682,2.345868,8.941347,-4.245190,-4.806493,2.351703,-1.261673,-1.736689,0.812813,3.406801,-9.460647,7.888792,-5.347584,0.043513,-3.023614,-6.554821,4.258592,1.434818,-7.934684,8.737461,-8.259723,-2.065431,3.517799,1.658256,-1.280977,-4.200477,-6.470885,-8.080485,1.713078,-0.028433,-7.848326,-0.294541,-5.301682,-4.257680,6.155736,3.838755,-3.076209,-4.728345,4.329970,3.096284,-3.470456,-3.862674,2.716811,3.205932,-4.936908,-3.186794,0.998101,-9.426995,1.865497,-9.955541,9.040670,-6.333727,2.323395,4.756149,8.435314,-5.648907,8.195037,-7.290035,5.757894,1.073560,7.796048,-7.665643,-4.634910,2.133271,8.392443,-5.565072,2.186488,7.189649,5.950855,6.084080,8.607847,-8.415647,7.024853,4.754560,4.766519,-4.080746,5.613988,7.996345,-6.248283,3.150488,-0.333814,-6.373026,-1.126779,-4.493082,-8.994158,-0.401921,6.355602,-4.988611,-6.922202,-3.218064,-3.501714,-7.777658,4.456062,0.334851,-7.134333,-3.427659,-3.596267,6.305574,-0.896808,-5.652976,8.077417,-3.634312,-3.525469,1.145880,-7.527239,-7.502113,2.965731,-8.959514,-5.951865,-8.543070,-5.990786,9.760776,4.455153,-9.601652,-4.016230,-0.065387,3.450217,-0.163028,-5.617515,-1.674864,7.916312,9.279176,-4.436990,-4.343172,-8.572588,5.048629,3.951283,2.119933,6.403064,-9.228026,8.807618,-9.809775,3.863308,-7.856330,-3.060988,-1.602865,8.817838,-2.782619,-1.313461,-5.442933,7.268321,4.273683,-1.369426,8.412683,-2.196875,3.558829,7.660484,3.497195,-0.818808,-6.182667,-1.271702,0.539893,-4.917300,9.925462,-2.004345,8.371009,-2.518309,-4.433027,-3.546137,-4.567249,7.545991,-9.651926,9.005281,9.241417,8.635665,5.194710,-0.792885,8.123355,-3.668836,3.997770,-3.729390,9.076952,-9.558929,9.434933,8.114302,4.991035,0.748083,9.849626,1.782236,-8.885443,-7.657088,7.071450,-5.751124,-5.118043,0.057520,0.214035,-7.986632,-1.427263,-4.481866,7.233472,-6.252918,-4.363879,-9.592137,-0.417373,-1.863564,-0.549806,-4.705865,-7.906470,-5.552871,-9.533630,-4.883943,5.391171,-9.851715,0.959263,3.136797,-2.279068,-6.231130,2.771484,8.819059,-3.494775,6.788675,-0.365586,-6.680516,-8.376679,5.062052,2.045454,1.457053,9.180599,-2.130292,-9.319920,4.878467,2.197753,-5.883235,6.860303,5.303784,6.885036,-1.853147,-9.073881,-1.517742,-9.202010,5.961844,-3.403290,-8.687016,-3.426637,-1.382098,3.417019,-3.400361,0.348204,1.454672,-8.394841,5.803442,1.007588,7.683936,-2.239564,3.023700,-2.662042,-7.313148,5.087304,-2.266592,-1.138096,-7.720251,-8.607773,-6.512546,4.870797,-3.012364,-5.860738,-7.011804,-5.399211,-4.485557,3.155533,3.429189,-1.094288,-2.848051,-4.046296,-3.079663,-3.350765,-3.328582,3.956753,-0.697745,1.754571,-6.588201,-6.496369,2.356843,-7.780559,-0.464843,4.517517,4.245259,1.013586,4.414375,-4.414475,-4.202166,0.671632,-0.940875,-4.779223,6.727236,0.516028,7.374623,-4.400032,-1.946725,-8.443283,4.099463,-6.992892,-9.462187,-4.430723,-3.939070,1.259780,2.578448,9.999403,7.975874,6.033852,3.658489,-8.393432,-9.062705,-6.738696,6.403811,5.672356,-1.948362,-0.319796,-6.671409,8.120194,5.649886,0.300192,9.034141,-6.063255,-7.161896,3.715771,6.152749,3.828108,5.739045,-0.424584,-2.985192,4.348241,-9.651281,7.725887,-3.945301,1.892426,8.199478,0.965221,6.571650,8.809813,2.205131,-6.193364,-8.261781,-4.790953,6.410146,3.175580,9.060765,-8.374885,-7.012480,-8.791912,-6.298504,-5.383222,-4.924502,-8.076263,-1.979634,-6.075637,3.640052,-8.811268,-5.135357,1.606311,6.706180,4.889539,9.804115,-8.277417,-5.038753,-4.752490,-1.186290,-4.287100,-3.009372,6.367655,1.904516,-5.273530,-1.778338,-9.443969,-0.034143,-3.737257,-8.000946,-5.697856,6.188621,3.022886,5.794412,6.061047,9.676585,-1.970527,-4.944335,-7.605036,4.507762,-3.072074,2.338079,-2.711901,-2.444887,0.981111,7.655431,-6.254581,3.063457,-9.324971,-3.549910,-5.473379,5.682295,5.105744,-2.529878,1.711278,4.624305,8.151470,3.666818,-6.915063,-5.552126,-5.854185,2.673507,4.592745,1.546536,7.656110,1.321927,3.238386,-5.890863,-2.980803,-8.436811,7.586898,-5.326739,-2.920882,-4.073773,9.477139,-4.614833,-0.558750,2.399092,-5.674513,2.768616,-7.807184,-9.892607,-5.550274,-6.231921,9.205082,-6.437780,-7.169672,-3.744096,-7.317866,5.570183,4.026813,-1.560783,6.919956,5.741569,-3.585182,7.749959,0.552605,-2.366624,5.338358,3.675971,3.159528,4.442517,-5.180212,-8.507642,-5.476500,-3.588279,2.692030,-8.220316,-7.603240,8.806535,-9.751775,6.393789,-1.515528,5.402396,2.113637,-8.543674,6.564780,-3.709414,6.008039,-0.412139,1.150348,-6.106845,3.908994,2.017972,-3.572674,-0.951233,-6.526242,5.581452,7.581505,-1.238059,0.310291,6.167528,-5.491097,-1.725446,-1.578919,7.384164,4.383934,8.186074,-4.560804,5.053886,1.010815,-9.495834,7.997837,-8.760819,-1.278599,4.899590,5.451444,-9.496312,0.274018,-0.810909,-2.918165,1.879583,4.795724,-7.346883,5.002362,-7.394923,-9.234656,-6.572968,-9.950379,-3.976990,2.035381,-5.571295,2.110504,-4.949932,8.061440,-7.579420,9.628127,-7.224190,-0.716808,-6.860387,-7.462899,-9.726400,8.269474,-7.250014,9.148813,4.466173,3.060692,-2.916286,-1.741110,1.527753,0.537347,0.591954,8.428723,0.077197,6.378656,0.022884,-4.658933,-7.285000,7.939424,-4.779335,9.590053,7.611576,0.167826,5.554336,9.408057,-6.181423,3.189831,3.474886,9.065733,-5.697446,-3.178448,-4.449111,-7.206496,3.002361,3.883606,-7.147274,4.717939,6.325529,6.788273,-3.140731,5.998300,2.088783,6.568642,4.473773,9.638823,5.880312,-3.140036,4.167772,-4.904473,-8.081053,-8.332655,-2.463773,-1.861111,-6.641163,1.193877,-8.977768,9.048307,7.091410,-8.506522,9.560781,-8.841103,-7.225246,-9.131460,5.926284,-9.483468,7.703557,2.041611,-5.975344,3.974890,7.045417,3.414002,-1.469726,-6.836244,1.088650,-9.657079,-1.909666,3.378953,8.472702,-5.681501,-1.574144,-8.181822,1.979354,-9.025426,-5.352779,1.867322,-9.175763,5.079346,0.830304,-5.732882,3.761311,-8.616287,5.594121,-3.699687,4.768888,-7.688281,2.978126,3.127271,-8.149261,-9.502762,-0.477284,-2.785893,-1.880386,8.668799,2.319156,9.141789,-7.867241,1.715802,9.963271,0.609245,-5.588281,5.747353,-9.266806,2.795584,-3.631184,6.267481,2.071266,9.551693,-3.746792,9.122875,-6.743937,-3.901755,-9.734834,-4.128457,5.577669,9.229180,2.884729,9.420654,6.566718,-8.784221,-1.121779,-0.283193,-9.310409,4.181591,-2.398012,-2.711097,3.023847,-4.592511,-6.786499,-2.607834,-9.224691,-8.779292,-9.414803,5.759043,-1.971266,4.669912,-1.240215,-7.240400,3.005559,8.082157,-2.522278,-8.025432,-3.194176,-1.456831,1.751090,-8.878231,-3.889830,-3.502296,-8.717357,-1.125452,6.489225,7.469600,-6.471170,-4.796491,0.779715,1.069937,-7.645978,-7.506257,-6.066387,7.831441,0.203846,9.425748,-6.937141,-1.183461,-4.239491,0.209451,-3.264465,7.114414,-0.707439,-2.194138,9.928438,-8.497772,9.423863,-7.946156,4.560830,1.876016,1.537331,-5.802592,-5.482232,-0.458775,2.362129,1.480818,-1.242453,-1.506786,-5.861001,-4.473671,6.025632,3.050498,0.430884,-9.002156,-6.219706,5.053272,1.220155,9.117242,-0.883862,-5.500302,-6.770405,7.111628,-1.993062,2.240644,-7.914040,-9.402059,-9.222697,-2.578388,0.789093,-7.937330,8.589081,6.070965,6.154143,-4.274821,-2.354754,-3.875129,-8.320649,5.926919,0.692793,-1.892313,-1.093228,9.672964,-7.672308,7.159232,2.246908,9.745423,6.240314,2.527941,-7.641864,9.400685,-6.369622,1.006841,9.901906,2.996068,6.570736,8.256522,-9.453871,4.721209,-2.900822,-9.692130,-5.807024,-2.454757,-8.918588,0.827705,-3.174291,3.625305,-4.280254,2.053513,8.975789,-5.792844,-2.643462,-8.679384,1.342380,-9.256315,-9.780918,4.954162,-5.581373,4.150332,2.998567,0.828143,0.771083,-4.853303,3.082908,6.186356,-2.270826,-3.258922,1.452160,9.679427,-8.306627,2.258699,-7.085753,0.568936,-6.624425,1.046423,5.200530,8.618639,5.686920,-6.820099,-7.818603,1.975773,-9.650947,8.398200,-1.327422,-4.332128,-0.405343,-0.636905,-5.481067,-9.251256,-1.657789,-9.632256,-6.389293,-7.299839,9.920709,0.269787,-5.919509,-0.773569,-1.191741,3.025163,-7.068396,5.219470,8.581497,7.430618,2.064757,-9.143433,3.715001,-6.006086,7.722379,2.483086,1.276456,-8.964926,3.084380,-5.202089,-3.263979,-5.875964,2.422267,-8.208257,5.451896,-6.461638,9.184005,-0.575182,9.539000,-5.569998,0.280151,5.158024,-6.510505,2.702960,-1.382595,3.885497,2.979090,7.938459,0.899986,1.762014,2.711185,-6.920687,-7.688193,8.067976,2.657469,-2.313474,3.739300,3.170442,9.767201,5.062750,2.905605,2.159367,3.814036,8.154629,-4.837025,2.441003,4.780430,-0.863554,6.175292,6.916372,6.494166,0.782014,-9.794737,3.573947,3.532265,6.274790,9.699066,7.363897,-5.326862,-6.344376,8.701707,-7.199352,1.814425,3.254242,6.725596,1.556499,-0.105444,6.867714,5.983482,2.405320,-4.764686,7.204833], dtype = "float32")#candidate|3078|(1344,)|const|float32
call_3077 = func_868_call(relay.reshape(const_3078.astype('float32'), [14, 12, 8]))
call_3079 = func_868_call(relay.reshape(const_3078.astype('float32'), [14, 12, 8]))
output = relay.Tuple([call_3072,call_3077,const_3078,])
output2 = relay.Tuple([call_3073,call_3079,const_3078,])
func_3109 = relay.Function([], output)
mod['func_3109'] = func_3109
mod = relay.transform.InferType()(mod)
output = func_3109()
func_3110 = relay.Function([], output)
mutated_mod['func_3110'] = func_3110
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2140_call = mod.get_global_var('func_2140')
func_2142_call = mutated_mod.get_global_var('func_2142')
call_3117 = func_2140_call()
call_3118 = func_2140_call()
output = relay.Tuple([call_3117,])
output2 = relay.Tuple([call_3118,])
func_3127 = relay.Function([], output)
mod['func_3127'] = func_3127
mod = relay.transform.InferType()(mod)
mutated_mod['func_3127'] = func_3127
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3127_call = mutated_mod.get_global_var('func_3127')
call_3128 = func_3127_call()
output = call_3128
func_3129 = relay.Function([], output)
mutated_mod['func_3129'] = func_3129
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3163 = relay.var("var_3163", dtype = "int64", shape = ())#candidate|3163|()|var|int64
var_3164 = relay.var("var_3164", dtype = "int64", shape = (7, 11, 16))#candidate|3164|(7, 11, 16)|var|int64
bop_3165 = relay.left_shift(var_3163.astype('int64'), var_3164.astype('int64')) # shape=(7, 11, 16)
func_1658_call = mod.get_global_var('func_1658')
func_1660_call = mutated_mod.get_global_var('func_1660')
call_3172 = func_1658_call()
call_3173 = func_1658_call()
func_3028_call = mod.get_global_var('func_3028')
func_3029_call = mutated_mod.get_global_var('func_3029')
call_3184 = relay.TupleGetItem(func_3028_call(), 0)
call_3185 = relay.TupleGetItem(func_3029_call(), 0)
func_1658_call = mod.get_global_var('func_1658')
func_1660_call = mutated_mod.get_global_var('func_1660')
call_3196 = func_1658_call()
call_3197 = func_1658_call()
func_2922_call = mod.get_global_var('func_2922')
func_2924_call = mutated_mod.get_global_var('func_2924')
call_3198 = relay.TupleGetItem(func_2922_call(), 2)
call_3199 = relay.TupleGetItem(func_2924_call(), 2)
output = relay.Tuple([bop_3165,call_3172,call_3184,call_3196,call_3198,])
output2 = relay.Tuple([bop_3165,call_3173,call_3185,call_3197,call_3199,])
func_3225 = relay.Function([var_3163,var_3164,], output)
mod['func_3225'] = func_3225
mod = relay.transform.InferType()(mod)
var_3226 = relay.var("var_3226", dtype = "int64", shape = ())#candidate|3226|()|var|int64
var_3227 = relay.var("var_3227", dtype = "int64", shape = (7, 11, 16))#candidate|3227|(7, 11, 16)|var|int64
output = func_3225(var_3226,var_3227,)
func_3228 = relay.Function([var_3226,var_3227,], output)
mutated_mod['func_3228'] = func_3228
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3063_call = mod.get_global_var('func_3063')
func_3065_call = mutated_mod.get_global_var('func_3065')
call_3262 = relay.TupleGetItem(func_3063_call(), 0)
call_3263 = relay.TupleGetItem(func_3065_call(), 0)
output = call_3262
output2 = call_3263
func_3277 = relay.Function([], output)
mod['func_3277'] = func_3277
mod = relay.transform.InferType()(mod)
mutated_mod['func_3277'] = func_3277
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3277_call = mutated_mod.get_global_var('func_3277')
call_3278 = func_3277_call()
output = call_3278
func_3279 = relay.Function([], output)
mutated_mod['func_3279'] = func_3279
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2519_call = mod.get_global_var('func_2519')
func_2521_call = mutated_mod.get_global_var('func_2521')
call_3333 = func_2519_call()
call_3334 = func_2519_call()
func_2145_call = mod.get_global_var('func_2145')
func_2146_call = mutated_mod.get_global_var('func_2146')
call_3344 = func_2145_call()
call_3345 = func_2145_call()
uop_3356 = relay.sin(call_3344.astype('float64')) # shape=(15, 5, 9)
uop_3358 = relay.sin(call_3345.astype('float64')) # shape=(15, 5, 9)
func_1822_call = mod.get_global_var('func_1822')
func_1824_call = mutated_mod.get_global_var('func_1824')
call_3360 = func_1822_call()
call_3361 = func_1822_call()
output = relay.Tuple([call_3333,uop_3356,call_3360,])
output2 = relay.Tuple([call_3334,uop_3358,call_3361,])
func_3369 = relay.Function([], output)
mod['func_3369'] = func_3369
mod = relay.transform.InferType()(mod)
output = func_3369()
func_3370 = relay.Function([], output)
mutated_mod['func_3370'] = func_3370
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2240_call = mod.get_global_var('func_2240')
func_2242_call = mutated_mod.get_global_var('func_2242')
call_3378 = func_2240_call()
call_3379 = func_2240_call()
func_2145_call = mod.get_global_var('func_2145')
func_2146_call = mutated_mod.get_global_var('func_2146')
call_3384 = func_2145_call()
call_3385 = func_2145_call()
bop_3400 = relay.mod(call_3378.astype('float32'), relay.reshape(call_3384.astype('float32'), relay.shape_of(call_3378))) # shape=(15, 5, 9)
bop_3403 = relay.mod(call_3379.astype('float32'), relay.reshape(call_3385.astype('float32'), relay.shape_of(call_3379))) # shape=(15, 5, 9)
func_1685_call = mod.get_global_var('func_1685')
func_1687_call = mutated_mod.get_global_var('func_1687')
call_3405 = relay.TupleGetItem(func_1685_call(), 0)
call_3406 = relay.TupleGetItem(func_1687_call(), 0)
uop_3410 = relay.rsqrt(call_3378.astype('float64')) # shape=(15, 5, 9)
uop_3412 = relay.rsqrt(call_3379.astype('float64')) # shape=(15, 5, 9)
output = relay.Tuple([bop_3400,call_3405,uop_3410,])
output2 = relay.Tuple([bop_3403,call_3406,uop_3412,])
func_3414 = relay.Function([], output)
mod['func_3414'] = func_3414
mod = relay.transform.InferType()(mod)
mutated_mod['func_3414'] = func_3414
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3414_call = mutated_mod.get_global_var('func_3414')
call_3415 = func_3414_call()
output = call_3415
func_3416 = relay.Function([], output)
mutated_mod['func_3416'] = func_3416
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1787_call = mod.get_global_var('func_1787')
func_1789_call = mutated_mod.get_global_var('func_1789')
call_3420 = relay.TupleGetItem(func_1787_call(), 0)
call_3421 = relay.TupleGetItem(func_1789_call(), 0)
func_987_call = mod.get_global_var('func_987')
func_991_call = mutated_mod.get_global_var('func_991')
var_3425 = relay.var("var_3425", dtype = "float64", shape = (216,))#candidate|3425|(216,)|var|float64
const_3426 = relay.const([-5.720141,7.147875,-8.162503,-2.299076,4.144787,3.563136,-5.715515,1.530674,3.159017,-7.148259,-2.111293,-1.706384,-1.381632,9.321730,3.706806,7.011383,-6.266020,-2.460586,7.343182,8.065093,3.242921,-6.086693,6.880931,-0.430815,6.309016,-2.954544,0.257889,-8.918870,0.769445,0.682781,5.693071,-9.945340,7.643462,3.943781,8.053575,-1.690062,9.258161,7.180454,-4.630134,8.167113,-8.400799,4.351357,-9.788954,4.503629,7.023461,-7.887674,7.130055,-6.559423,3.192818,6.450967,-3.615533,0.616567,-8.999918,8.776527,2.181980,-6.121221,-5.995647,1.290450,-0.863429,-6.740274,2.844575,-3.332001,0.126934,7.921863,-2.520467,9.601302,-7.932445,-7.128103,1.992008,4.694048,-2.202259,-3.628672,9.313096,4.424623,1.315562,-7.505519,-2.269997,5.419605,2.691756,-9.718847,-3.196283,1.905352,8.313310,5.347936,6.822999,9.538261,5.839707,-8.187138,1.289197,-0.192333,2.648498,8.538700,8.514752,4.938613,1.906633,0.879456,9.816250,1.010013,-1.720376,-0.622089,3.530355,-5.599322,9.617086,-5.954163,-5.080997,1.501726,1.247183,-3.386001,-3.906051,8.427561,1.890606,2.848752,5.186004,7.637629,7.425927,5.376210,6.622396,8.903120,-5.644240,7.360459,-6.750054,-8.979762,0.013077,3.220195,-1.545011,-0.887092,0.978299,0.228174,-6.457214,-9.287007,-5.492681,-6.238913,3.701973,-9.255433,7.510152,3.960110,4.481091,0.636214,-7.480836,-1.187202,-8.731082,-6.558392,-5.410109,-6.006705,0.454642,-9.924183,5.089239,4.127715,4.824639,-5.239432,-8.533153,-7.304720,-9.469612,-6.638647,-8.687030,1.170432,2.437650,-2.128992,8.573767,-4.937713,-2.752087,-9.754036,-1.173346,-4.587284,-7.261497,-1.304506,-5.000486,-2.274740,0.205708,9.212203,8.724848,-1.138292,4.994580,-0.826106,5.609418,6.249328,4.678969,2.641971,6.346606,7.023320,7.833597,-3.830289,6.667115,-5.186948,-3.158450,-2.659262,-9.344080,-1.766104,-4.694068,9.845911,-4.448621,2.908349,-4.967198,3.991476,-6.788685,6.920694,-2.275335,-9.192498,-8.545477,-1.795469,-9.735190,-3.326928,3.224030,-5.332026,4.797606,-5.021012,-6.133958,-6.984783,-9.737169,3.633186,-9.514821,-1.909674,-0.502619,-2.941997,1.050432,5.346322,-9.874957,0.455503,1.360876,5.542162,9.505215,-0.780341,0.620760,-1.848826,-0.344992,-2.097082,0.512723,9.615138,8.360194,-3.223685,5.413129,4.049751,-8.024441,9.255210,-1.541644,-2.791155,-8.157400,-9.891624,1.732269,-8.616680,-6.766816,1.268613,5.343069,0.889408,-2.947391,-8.316058,-5.562223,4.993918,-1.107217,-4.515186,2.765651,-7.803482,5.968016,9.480835,9.122214,-7.737777,4.359978,7.818171,-1.386400,2.347669,2.116365,-0.043034,6.123908,-0.042216,6.068188,8.924069,2.016832,-1.607536,-9.062200,-5.505572,1.391078,2.405855,-7.908381,-8.407167,7.791446,4.811693,9.132949,-2.671180,-9.690556,-6.129437,1.030139,-1.665873,2.485904,7.065905,0.727703,5.389627,-5.047043,1.134792,-2.159472,-2.941013,8.459134,-1.289311,6.025950,-5.097169,9.199782,8.355653,-5.425643,3.413460,7.560281,7.017703,-4.950703,8.828307,3.389544,5.961140,-3.989035,9.061840,-4.631430,-2.539901,2.974163,4.370996,8.897761,3.057379,-9.209871,7.645552,-1.993836,-4.253988,-4.862294,4.929075,-4.530593,1.472215,-8.980005,6.838315,-8.637546,4.217469,-9.014336,-2.012728,3.507398,5.696893,-4.545304,6.123766,1.416034,-0.897340,-1.638354,2.555968,-4.120796,4.638990,7.661739,7.003672,2.812196,4.644841,4.393496,3.099617,-5.090752,3.586342,-0.505643,0.952235,-0.803734,7.915848,1.090992,-9.315532,1.033107,0.976219,-5.821490,-9.490947,9.083280,4.591170,5.357034,2.378476,6.766309,-8.493382,-9.108402,4.611792,5.244953,7.614217,4.492409,4.934424,5.747593,0.665862,4.174955,8.938030,-2.877133,-3.776157,-0.166151,5.790868,-1.005586,2.006766,2.308855,8.391443,5.548917,4.527525,-6.687718,1.416681,8.947492,8.936048,-1.256175,4.694392,7.340736,-5.168157,-3.968139,2.786652,0.163715,2.956262,0.927276,-6.030302,1.690207,4.185761,-9.876084,7.990817,-2.715861,-3.589389,-0.807971,5.480530,9.096676,9.771168,6.184064,-7.257773,3.605315,5.930003,0.662687,4.835879,0.523509,-3.025139,4.863564,-7.365927,1.862199,-8.768252,-2.213997,4.867273,7.004333,6.952005,-9.254231,6.116597,8.555984,-1.642131,-5.756100,3.513941,2.480044,4.810265,-2.940211,-0.882210,1.465276,8.135541,-0.223482,5.671118,5.046320,-3.522911,8.066176,6.022047,-2.860732,9.404141,3.816712,-2.083187,-2.080553,4.503640,0.430546,-5.204735,-1.857383,5.874209,7.145485,-4.928049,0.001511,-7.032122,-2.694651,-0.025185,2.219384,-0.148328,-3.875395,0.093035,-3.871141,5.039767,-1.700936,-3.723409,5.662999,0.126155,2.804906,5.973450,-1.644346,5.952748,2.955944,4.957990,9.634269,7.633581,5.320508,-7.561878,5.457540,8.919166,-3.017730,-0.737460,0.629831,-3.107591,9.269418,-9.447613,3.454349,8.480336,5.684773,9.001210,-0.283459,-4.961807,-7.385414,0.652756,5.438034,2.821502,7.244859,2.804906,-3.099207,8.504922,-8.046708,2.145691,5.128407,-8.731164,-7.205268,5.691843,4.820984,-8.319960,-6.253920,9.789671,-5.607561,4.535271,3.672833,8.013005,-5.282255,3.745871,-7.536819,-3.111915,9.104746,-7.107104,1.126065,-1.990929,1.683210,-6.324340,5.533914,6.367822,-7.400437,5.758503,-7.938616,8.317539,7.517156,8.762286,-4.522804,2.750638,-0.025903,6.191350,3.134849,-3.210907,-5.703533,-8.869485,3.579002,2.820040,2.255694,1.127289,6.392198,-4.590115,0.872059,-8.581699,-1.266267,-1.620010,8.892150,-0.556924,0.901997,-2.481993,4.958138,2.021726,-7.933633,-0.136944,1.931952,5.766674,4.954824,9.160435,2.412757,-2.041183,8.030363,6.031923,-6.037713,8.773524,-9.558266,8.793594,1.423363,-5.303331,2.281732,3.850895,-2.412951,-3.445535,-1.485321,9.617683,5.926191,0.163314,-1.548384,-4.664568,-1.795410,-2.104745,4.541933,-3.896711,0.444373,-2.832080,-3.299371,0.045079,3.455609,-2.503352,-3.607448,1.552468,5.569446,-9.735096,1.247103,-8.897122,4.650042,9.713951,-1.077898,1.904833,-5.803888,-5.028170,5.858160,-0.713302,8.300250,-3.713083,-0.810222,-5.891622,5.102968,7.193184,0.313190,-3.444527,-5.792345,8.970041,-1.888492,-4.242209,-2.661895,1.295621,6.692646,-6.938116,-5.025415,-3.069258,9.513066,-9.207708,1.134910,1.158079,9.509964,2.022658,5.356001,-5.940832,7.073320,8.491809,7.564223,0.726321,-2.315291,-9.186331,8.394193,2.602585,2.649154,9.706874,5.590897,5.994299,-8.488312,-0.536522,1.098167,1.030387,-6.026529,-1.018329,5.470203,-6.578697,-7.519421,-2.043294,9.917553,-1.354790,3.322969,5.571123,-1.473902,4.035957,-4.406780,9.556339,-5.527972,-4.500942,7.582787,2.712481,9.953896,-4.161450,-1.444331,2.545624,-6.429890,-3.557668,1.965460,-9.364083,-3.829608,-5.957389,8.446095,-7.921305,5.975214,-6.434535,9.859454,8.385463,9.909759,-0.134314,4.457876,1.346477,7.473270,0.326458,-0.218214,8.396462,-6.134377,8.786771,0.675052,0.443110,-1.424636,7.788081,4.150753,-7.482684,-7.949070,-3.961202,-1.797837,0.543099,4.027396,-0.181428,-8.150528,-3.729027,-1.250010,-8.099656,5.114950,-5.691046,-5.020214,-2.616490,-1.147899,-0.693515,3.673612,-2.818952,4.768359,-2.414572,9.409156,-4.899277,-0.103604,-2.944820,-1.977197,-9.751334,-2.973839,0.822100,-0.503879,2.070428,5.881139,9.811165,-8.297609,-3.185697,1.019812,0.966269,-3.402173,-9.559279,-4.373996,6.036967,3.191243,3.211381,-2.093469,-2.947531,-6.320546,4.991616,-5.490363,-2.367544,8.585271,-2.046247,6.195845,5.683725,0.080701,-0.541377,-3.596702,-0.596367,3.341496,7.239143,-6.588269,-9.607704,4.949998,-6.456404,-9.757894,5.920591,-8.968671,-8.949323,1.852227,5.920676,0.650346,-5.012731,1.848235,-6.736573,-4.803061,-2.665166,8.413033,1.012764,-9.717516,-3.313626,5.405969,-2.472310,9.599745,0.516502,-8.517361,0.859707,9.833572,7.229904,-1.617313,7.299731,-8.715380,-7.502881,2.384664,-8.265927,0.736993,-1.688866,-9.818483,-5.726961,-1.413056,-6.032365,-1.079000,-2.346695,-9.062767,-4.155091,9.205236,5.516778,3.272837,-2.200144,-8.072341,2.194898,3.632280,-5.134875,-8.373136,-9.385602,-8.576339,-3.915119,-4.742745,-4.771591,-5.985595,-5.067765,5.906467,3.846865,8.340866,0.381587,1.849257,4.902340,-2.042054,-7.707042,1.072741,6.030208,-4.023010,-2.909509,7.712335,5.898010,-0.749000,9.122049,2.423152,-3.669438,-0.048756,-4.624716,-0.270064,3.266213,8.053044,-2.894441,-4.198815,2.500980,8.839216,6.791569,-9.184013,-6.567989,-3.465070,-8.547299,5.045755,-7.091925,-7.407352,7.881090,7.055810,-8.529895,-4.584025,1.877338,-5.856346,6.754744,-2.865967,-1.011871,9.935351,4.702415,3.865808,-6.221685,3.530765,-3.947205,6.790467,-8.918525,-2.805339,-0.093706,6.244946,4.633007,-9.708303,7.333117,-4.981810,7.449826,1.310572,8.828896,8.575782,4.729765,9.611185,-4.445014,2.156428,4.472407,4.885560,-7.970896,2.887447,9.897242,2.115201,-8.301158,-0.670352,2.523507,9.066333,-3.026233,-0.414400,7.926040,-4.560791,6.733515,-1.202230,7.828530,-0.861958,8.965699,-6.252577,2.962822,9.147791,9.056582,7.053364,0.938616,6.307274,9.413453,2.764188,9.019625,4.357860,6.407043,5.532300,1.143050,5.124417,4.442968,4.565826,7.896503,1.539853,5.371465,3.664009,2.740955,-5.741058,0.874569,3.513193,8.296858,1.631100,-7.534817,-3.864680,-1.586770,-0.373886,2.764016,-0.537516,0.605153,4.302588,-4.011178,5.000353,2.139839,6.475823,-0.063674,-7.615143,4.026313,-9.747742,-4.457545,3.419985,-9.992572,3.319583,-1.458451,-6.260092,5.726002,-5.033889,1.435769,7.978345,6.508224,9.015759,8.328445,-0.794972,4.706620,-1.164200,6.759878,-2.569936,-5.058571,4.427192,8.781152,-9.810563,6.768303,-2.648942,-9.819332,8.021166,-5.226662,7.679021,-7.549033,-7.415597,8.207160,-4.638799,8.866309,-3.852993,-2.997216,-7.847932,-9.267253,-6.979491,2.296461,-8.385322,-2.889895,6.350401,-3.104896,-4.382676,-1.269780,-5.589104,8.487454,-4.612438,2.091568,-2.582736,-4.368246,6.864590,1.909780,-0.972163,-7.266991,5.563207,9.667873,-0.844633,4.019714,-8.238688,8.308933,7.176609,5.187405,6.611563,2.658653,-1.970366,-3.037438,-3.345444,7.808552,-4.407314,8.218372,-5.911201,2.884433,-3.970651,2.816391,-1.378328,2.088181,-2.500686,-5.532374,1.110056,6.051115,0.930096,3.911474,-5.148698,6.590179,-8.821675,-8.798009,1.671549,5.645875,-7.005645,-7.709550,-9.317400,3.441068,4.374846,-4.064158,9.041852,-5.518888,-3.725792,-2.342724,7.071969,9.538558,-2.932154,-0.513526,5.734054,9.256556,3.742182,8.113429,9.705044,-0.996259,-7.202667,5.330399,-1.518358,-2.629955,9.073046,5.047198,-4.991099,-5.091188,-3.380503,-5.487379,0.290688,-3.001153,-6.988533,-9.948217,-0.419996,-3.799943,9.252641,-7.141927,8.730398,-2.920430,7.156072,2.172039,9.955296,-2.860822,7.451387,4.095216,-1.995141,5.388863,1.975718,-5.668009,-7.502398,-5.874570,-0.582427,6.559973,-7.882153,-8.749707,-1.284491,3.566132,3.881191,2.255425,7.925450,5.561762,-2.052316,-4.765546,-9.820958,7.196325,3.061175,8.914552,-0.526817,9.680701,-4.582741,-2.850797,-3.044808,-5.832218,4.714961,-6.002912,3.886975,-0.886327,-6.642639,7.296911,8.189890,4.997780,9.754131,-9.877110,8.453982,-2.132726,1.427281,-0.073851,-5.748943,-9.382607,7.008716,-0.573785,-1.231581,-3.200601,5.999950,-2.440460,7.505612,1.448071,-7.739193,-2.696236,-5.876211,7.365015,-8.502358,2.616212,1.423604,-7.691906,-6.717468,5.395393,-3.962186,5.436221,9.945620,-9.670791,9.396019,5.629141,-6.833997,0.030261,-1.847200,-9.164036,6.606400,-4.584152,2.236532,8.804521,0.630489,7.077847,-6.687524,-6.066030,-0.710019,-7.982106,-4.836498,4.532821,-0.497115,4.285654,6.335021,4.684917,3.919746,5.810668,-0.240185,-9.724843,4.425178,1.458828,-9.261092,-5.556504,5.176819,-1.727402,-1.948000,-5.015397,2.458254,-8.965671,5.692914,6.576166,9.356187,-2.574122,2.437395,8.625604,-7.478640,-7.498423,-6.516451,2.767073,-0.814149,-6.636191,8.830166,5.497858,-7.667098,0.398595,0.804012,0.402789,-4.437490,-2.316475,-0.693760,-7.608658,2.177493,-8.629838,4.419622,0.749482,4.634721,3.966216,-7.072936,4.770509,-6.760956,-5.194349,8.631289,-3.852147,5.207160,5.717288,-6.899423,-7.834369,2.118091,-6.401076,-6.781248,-5.671919,2.135779,-5.696813,-2.555966,-8.429770,2.948030,-0.874609,-2.014088,-4.586221,1.301712,-6.302531,3.512115,1.541221,9.085092,-9.108297,8.972895,6.173892,-8.624846,-7.797227,-5.064930,3.873766,-7.493088,-5.683147,-1.313678,-7.931479,3.146240,6.104455,-2.030021,1.919056,-0.755656,3.269385,-4.432386,-9.986262,3.586512,6.330041,-4.988045,0.067901,-6.847626,0.623137,-9.965098,-4.541499,-9.095083,-9.802353,4.878519,-0.332754,6.713329,6.629474,5.353049,-2.217933,5.775740,-8.347955,-4.916924,-3.225965,3.119103,4.739008,7.437448,1.950436,-8.495155,-2.796588,6.017616,8.610676,6.833795,-9.945393,3.689699,9.062756,-7.232068,-0.646414,9.380384,4.362731,-1.918135,-7.496779,0.070883,-5.671164,3.424045,4.223822,8.170706,-8.365491,5.911422,1.807185,6.371957,7.049645,-7.169887,1.850272,-1.558517,2.570703,1.769294,6.788457,6.013996,-5.721792,-8.146911,-4.385809,4.266657,-7.219540,0.134781,0.028603,-2.483771,6.576527,-0.232031,-0.002814,6.151252,2.397375,2.718568,0.236753,-6.177878,-4.248943,6.165906,7.027768,4.530074,-1.644526,1.288742,6.954676,-8.315885,7.375024,2.025627,-5.074886,4.199530,-4.794979,-6.634226,6.897754,7.670654,1.381275,-4.399233,6.692586,1.199742,8.685221], dtype = "float32")#candidate|3426|(1344,)|const|float32
call_3424 = relay.TupleGetItem(func_987_call(relay.reshape(var_3425.astype('float64'), [12, 9, 2]), relay.reshape(const_3426.astype('float32'), [1344,]), ), 4)
call_3427 = relay.TupleGetItem(func_991_call(relay.reshape(var_3425.astype('float64'), [12, 9, 2]), relay.reshape(const_3426.astype('float32'), [1344,]), ), 4)
var_3441 = relay.var("var_3441", dtype = "bool", shape = (15, 5, 9))#candidate|3441|(15, 5, 9)|var|bool
bop_3442 = relay.greater_equal(call_3420.astype('bool'), relay.reshape(var_3441.astype('bool'), relay.shape_of(call_3420))) # shape=(15, 5, 9)
bop_3445 = relay.greater_equal(call_3421.astype('bool'), relay.reshape(var_3441.astype('bool'), relay.shape_of(call_3421))) # shape=(15, 5, 9)
func_1210_call = mod.get_global_var('func_1210')
func_1213_call = mutated_mod.get_global_var('func_1213')
var_3465 = relay.var("var_3465", dtype = "bool", shape = (2240,))#candidate|3465|(2240,)|var|bool
call_3464 = relay.TupleGetItem(func_1210_call(relay.reshape(call_3424.astype('float32'), [1344,]), relay.reshape(var_3465.astype('bool'), [2240,]), ), 1)
call_3466 = relay.TupleGetItem(func_1213_call(relay.reshape(call_3424.astype('float32'), [1344,]), relay.reshape(var_3465.astype('bool'), [2240,]), ), 1)
output = relay.Tuple([call_3424,var_3425,const_3426,bop_3442,call_3464,var_3465,])
output2 = relay.Tuple([call_3427,var_3425,const_3426,bop_3445,call_3466,var_3465,])
func_3469 = relay.Function([var_3425,var_3441,var_3465,], output)
mod['func_3469'] = func_3469
mod = relay.transform.InferType()(mod)
var_3470 = relay.var("var_3470", dtype = "float64", shape = (216,))#candidate|3470|(216,)|var|float64
var_3471 = relay.var("var_3471", dtype = "bool", shape = (15, 5, 9))#candidate|3471|(15, 5, 9)|var|bool
var_3472 = relay.var("var_3472", dtype = "bool", shape = (2240,))#candidate|3472|(2240,)|var|bool
output = func_3469(var_3470,var_3471,var_3472,)
func_3473 = relay.Function([var_3470,var_3471,var_3472,], output)
mutated_mod['func_3473'] = func_3473
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2922_call = mod.get_global_var('func_2922')
func_2924_call = mutated_mod.get_global_var('func_2924')
call_3480 = relay.TupleGetItem(func_2922_call(), 0)
call_3481 = relay.TupleGetItem(func_2924_call(), 0)
var_3496 = relay.var("var_3496", dtype = "float32", shape = (15, 5, 9))#candidate|3496|(15, 5, 9)|var|float32
bop_3497 = relay.minimum(call_3480.astype('uint8'), relay.reshape(var_3496.astype('uint8'), relay.shape_of(call_3480))) # shape=(15, 5, 9)
bop_3500 = relay.minimum(call_3481.astype('uint8'), relay.reshape(var_3496.astype('uint8'), relay.shape_of(call_3481))) # shape=(15, 5, 9)
output = relay.Tuple([bop_3497,])
output2 = relay.Tuple([bop_3500,])
func_3503 = relay.Function([var_3496,], output)
mod['func_3503'] = func_3503
mod = relay.transform.InferType()(mod)
mutated_mod['func_3503'] = func_3503
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3504 = relay.var("var_3504", dtype = "float32", shape = (15, 5, 9))#candidate|3504|(15, 5, 9)|var|float32
func_3503_call = mutated_mod.get_global_var('func_3503')
call_3505 = func_3503_call(var_3504)
output = call_3505
func_3506 = relay.Function([var_3504], output)
mutated_mod['func_3506'] = func_3506
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3028_call = mod.get_global_var('func_3028')
func_3029_call = mutated_mod.get_global_var('func_3029')
call_3523 = relay.TupleGetItem(func_3028_call(), 0)
call_3524 = relay.TupleGetItem(func_3029_call(), 0)
func_2315_call = mod.get_global_var('func_2315')
func_2318_call = mutated_mod.get_global_var('func_2318')
call_3542 = relay.TupleGetItem(func_2315_call(relay.reshape(call_3523.astype('uint64'), [15, 5, 9])), 0)
call_3543 = relay.TupleGetItem(func_2318_call(relay.reshape(call_3523.astype('uint64'), [15, 5, 9])), 0)
func_2140_call = mod.get_global_var('func_2140')
func_2142_call = mutated_mod.get_global_var('func_2142')
call_3544 = func_2140_call()
call_3545 = func_2140_call()
output = relay.Tuple([call_3523,call_3542,call_3544,])
output2 = relay.Tuple([call_3524,call_3543,call_3545,])
func_3557 = relay.Function([], output)
mod['func_3557'] = func_3557
mod = relay.transform.InferType()(mod)
output = func_3557()
func_3558 = relay.Function([], output)
mutated_mod['func_3558'] = func_3558
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3570 = relay.const([[[-0.171111],[-8.969315],[-8.749996],[4.898760],[4.269049],[8.313570],[0.710366],[5.050588],[0.495934],[-7.095249],[-5.452162],[1.739374]],[[-9.720609],[6.852074],[-6.125666],[2.532728],[1.074907],[2.999433],[-6.958631],[-3.037051],[1.695392],[-9.608977],[6.610098],[-6.964645]],[[-2.634348],[-5.838342],[-3.980782],[-2.002773],[3.435584],[-9.518291],[7.570689],[4.607986],[3.918321],[-5.991014],[6.838236],[-5.323029]],[[-0.275073],[4.944005],[-8.735378],[-8.722111],[-7.913367],[1.115711],[7.249922],[-8.998684],[1.233826],[-1.586875],[-9.954086],[0.091911]],[[-2.068124],[9.671064],[3.241846],[-7.452898],[-6.903670],[8.888156],[-8.520383],[3.055414],[-3.569291],[7.308320],[5.015179],[8.218678]],[[-2.633230],[2.998682],[1.383697],[-2.196277],[-5.251979],[0.554733],[5.606237],[4.351167],[1.544819],[-9.997489],[-9.463033],[0.220830]],[[-0.248558],[-2.525438],[-7.078733],[0.035939],[8.497494],[1.561847],[4.244194],[-8.995082],[-9.486692],[0.801512],[-4.417793],[6.386837]],[[-2.445444],[5.722273],[-2.147796],[5.546003],[9.287678],[-6.538924],[1.327841],[-9.393701],[-4.558139],[2.836854],[3.264454],[7.870789]],[[5.587319],[-1.883209],[1.670969],[-3.018247],[0.992405],[-1.732165],[-3.334147],[9.689678],[-0.212598],[7.891549],[0.763919],[-1.564567]],[[0.724371],[8.910852],[-5.312267],[-4.701000],[-9.414307],[8.586073],[3.163190],[5.386651],[8.576791],[-6.052877],[9.207301],[3.802436]],[[2.626728],[-7.164439],[-6.520194],[-1.450082],[-8.875883],[-2.725738],[-5.844974],[1.493074],[9.026624],[-6.137446],[-1.730237],[-9.593499]],[[7.734146],[2.691491],[-3.701242],[-7.510017],[1.592023],[-7.490096],[-1.699654],[8.789592],[-3.654287],[1.211906],[5.059644],[0.075199]],[[8.150794],[9.545500],[1.413992],[0.790556],[-6.642862],[-3.936951],[8.276994],[-4.896603],[4.148474],[-1.455860],[7.656792],[-4.174842]]], dtype = "float64")#candidate|3570|(13, 12, 1)|const|float64
uop_3571 = relay.asin(const_3570.astype('float64')) # shape=(13, 12, 1)
bop_3573 = relay.left_shift(uop_3571.astype('uint64'), relay.reshape(const_3570.astype('uint64'), relay.shape_of(uop_3571))) # shape=(13, 12, 1)
func_3369_call = mod.get_global_var('func_3369')
func_3370_call = mutated_mod.get_global_var('func_3370')
call_3592 = relay.TupleGetItem(func_3369_call(), 1)
call_3593 = relay.TupleGetItem(func_3370_call(), 1)
output = relay.Tuple([bop_3573,call_3592,])
output2 = relay.Tuple([bop_3573,call_3593,])
func_3630 = relay.Function([], output)
mod['func_3630'] = func_3630
mod = relay.transform.InferType()(mod)
output = func_3630()
func_3631 = relay.Function([], output)
mutated_mod['func_3631'] = func_3631
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2519_call = mod.get_global_var('func_2519')
func_2521_call = mutated_mod.get_global_var('func_2521')
call_3650 = func_2519_call()
call_3651 = func_2519_call()
func_3063_call = mod.get_global_var('func_3063')
func_3065_call = mutated_mod.get_global_var('func_3065')
call_3653 = relay.TupleGetItem(func_3063_call(), 0)
call_3654 = relay.TupleGetItem(func_3065_call(), 0)
output = relay.Tuple([call_3650,call_3653,])
output2 = relay.Tuple([call_3651,call_3654,])
func_3660 = relay.Function([], output)
mod['func_3660'] = func_3660
mod = relay.transform.InferType()(mod)
mutated_mod['func_3660'] = func_3660
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3660_call = mutated_mod.get_global_var('func_3660')
call_3661 = func_3660_call()
output = call_3661
func_3662 = relay.Function([], output)
mutated_mod['func_3662'] = func_3662
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2140_call = mod.get_global_var('func_2140')
func_2142_call = mutated_mod.get_global_var('func_2142')
call_3717 = func_2140_call()
call_3718 = func_2140_call()
output = relay.Tuple([call_3717,])
output2 = relay.Tuple([call_3718,])
func_3723 = relay.Function([], output)
mod['func_3723'] = func_3723
mod = relay.transform.InferType()(mod)
mutated_mod['func_3723'] = func_3723
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3723_call = mutated_mod.get_global_var('func_3723')
call_3724 = func_3723_call()
output = call_3724
func_3725 = relay.Function([], output)
mutated_mod['func_3725'] = func_3725
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1787_call = mod.get_global_var('func_1787')
func_1789_call = mutated_mod.get_global_var('func_1789')
call_3767 = relay.TupleGetItem(func_1787_call(), 0)
call_3768 = relay.TupleGetItem(func_1789_call(), 0)
func_3503_call = mod.get_global_var('func_3503')
func_3506_call = mutated_mod.get_global_var('func_3506')
call_3769 = relay.TupleGetItem(func_3503_call(relay.reshape(call_3767.astype('float32'), [15, 5, 9])), 0)
call_3770 = relay.TupleGetItem(func_3506_call(relay.reshape(call_3767.astype('float32'), [15, 5, 9])), 0)
func_3028_call = mod.get_global_var('func_3028')
func_3029_call = mutated_mod.get_global_var('func_3029')
call_3779 = relay.TupleGetItem(func_3028_call(), 0)
call_3780 = relay.TupleGetItem(func_3029_call(), 0)
func_1909_call = mod.get_global_var('func_1909')
func_1912_call = mutated_mod.get_global_var('func_1912')
call_3793 = func_1909_call(relay.reshape(call_3769.astype('uint64'), [15, 5, 9]))
call_3794 = func_1909_call(relay.reshape(call_3769.astype('uint64'), [15, 5, 9]))
bop_3797 = relay.floor_divide(call_3793.astype('float32'), relay.reshape(call_3769.astype('float32'), relay.shape_of(call_3793))) # shape=(15, 5, 9)
bop_3800 = relay.floor_divide(call_3794.astype('float32'), relay.reshape(call_3770.astype('float32'), relay.shape_of(call_3794))) # shape=(15, 5, 9)
bop_3822 = relay.greater(call_3793.astype('bool'), relay.reshape(bop_3797.astype('bool'), relay.shape_of(call_3793))) # shape=(15, 5, 9)
bop_3825 = relay.greater(call_3794.astype('bool'), relay.reshape(bop_3800.astype('bool'), relay.shape_of(call_3794))) # shape=(15, 5, 9)
output = relay.Tuple([call_3767,call_3779,bop_3822,])
output2 = relay.Tuple([call_3768,call_3780,bop_3825,])
func_3828 = relay.Function([], output)
mod['func_3828'] = func_3828
mod = relay.transform.InferType()(mod)
output = func_3828()
func_3829 = relay.Function([], output)
mutated_mod['func_3829'] = func_3829
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2519_call = mod.get_global_var('func_2519')
func_2521_call = mutated_mod.get_global_var('func_2521')
call_3893 = func_2519_call()
call_3894 = func_2519_call()
output = relay.Tuple([call_3893,])
output2 = relay.Tuple([call_3894,])
func_3907 = relay.Function([], output)
mod['func_3907'] = func_3907
mod = relay.transform.InferType()(mod)
output = func_3907()
func_3908 = relay.Function([], output)
mutated_mod['func_3908'] = func_3908
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3926 = relay.const([[[2.450577,-3.591231,-2.602599,8.459812,-4.052613],[-3.351176,7.224408,-4.743277,1.343741,-6.841413]],[[7.100848,-3.161016,5.396769,9.331506,-3.916278],[-4.453212,9.279346,5.738343,-0.641617,6.114229]],[[-2.635412,-3.005659,-0.806107,6.067972,8.500378],[2.410538,9.586814,-0.195026,-3.293127,7.491406]],[[-9.428876,-8.283137,-7.218058,4.581665,3.008732],[1.084298,-6.763770,5.042934,-8.023412,5.601725]],[[1.146314,4.110129,-0.746539,9.800952,4.233149],[-9.356329,-0.737659,6.115653,-3.780454,-9.341160]],[[-0.011267,5.380395,6.704932,1.976726,-2.152896],[1.376599,0.123993,-4.374477,-4.828601,-9.817448]],[[-8.828670,9.611773,-3.857560,8.843659,1.002624],[-6.031563,2.713506,2.518187,-5.586265,0.273951]],[[0.946983,-2.144720,7.032393,-1.963981,5.564420],[5.306687,8.309136,-9.809902,-9.617792,3.128684]],[[2.457174,3.397474,9.719036,-6.436448,1.231275],[-1.985343,-4.151648,-1.442952,8.225463,-6.574670]],[[3.518243,-6.039920,-3.599134,-1.061206,-3.370925],[6.948017,5.404374,8.217303,0.876282,5.799859]]], dtype = "float64")#candidate|3926|(10, 2, 5)|const|float64
uop_3927 = relay.sinh(const_3926.astype('float64')) # shape=(10, 2, 5)
bop_3929 = relay.logical_xor(const_3926.astype('uint32'), relay.reshape(uop_3927.astype('uint32'), relay.shape_of(const_3926))) # shape=(10, 2, 5)
bop_3938 = relay.divide(bop_3929.astype('float64'), relay.reshape(const_3926.astype('float64'), relay.shape_of(bop_3929))) # shape=(10, 2, 5)
output = relay.Tuple([bop_3938,])
output2 = relay.Tuple([bop_3938,])
func_3945 = relay.Function([], output)
mod['func_3945'] = func_3945
mod = relay.transform.InferType()(mod)
mutated_mod['func_3945'] = func_3945
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3945_call = mutated_mod.get_global_var('func_3945')
call_3946 = func_3945_call()
output = call_3946
func_3947 = relay.Function([], output)
mutated_mod['func_3947'] = func_3947
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2922_call = mod.get_global_var('func_2922')
func_2924_call = mutated_mod.get_global_var('func_2924')
call_3948 = relay.TupleGetItem(func_2922_call(), 0)
call_3949 = relay.TupleGetItem(func_2924_call(), 0)
func_987_call = mod.get_global_var('func_987')
func_991_call = mutated_mod.get_global_var('func_991')
const_3969 = relay.const([3.000726,-2.669748,-0.619310,9.135912,0.673037,3.822911,6.105111,-4.810762,-7.284550,1.063426,-3.918523,8.371186,-8.023993,-2.134831,1.383395,0.447332,-2.883342,-5.547221,3.216120,-6.456695,-1.911794,0.922042,-2.024390,-0.453517,4.450191,9.971228,2.487955,1.673813,8.818578,4.972805,0.621351,1.268007,-6.663729,-5.468174,4.475459,-2.748923,-5.087596,-0.563718,4.835874,-4.739090,-8.728123,-5.020256,-2.111241,5.870666,-3.312176,4.727396,-0.776444,7.223515,-7.372335,-3.684890,-7.833355,5.142681,-1.910739,9.216085,5.967384,-8.904797,4.106619,7.324962,-3.010146,1.940213,6.815737,-1.563596,4.573719,3.122985,9.454755,9.929764,-4.689467,1.532604,-4.076580,9.754201,-5.303298,-6.050155,-5.165874,9.859480,-8.062459,7.564202,3.153342,4.749805,3.752909,-5.600312,-6.413109,-5.487526,2.439344,8.592318,-7.093999,4.534563,-3.720042,-1.956666,4.975972,5.386589,-8.687679,9.372257,-2.082938,-0.918570,6.022617,8.015468,3.244924,9.731074,3.857021,-9.227206,0.419008,-3.798950,4.541733,-3.616587,-1.420273,3.114284,8.689097,0.642666,7.823156,6.642333,-4.827999,1.191090,4.643929,-7.401098,0.402597,-0.501571,-1.726369,4.265225,-0.625970,-9.318187,3.367920,6.730053,3.679696,5.775644,2.927977,2.581212,1.659371,1.590531,7.572063,0.288135,-6.965495,5.631953,-7.089924,9.180623,2.238183,9.961436,6.904407,3.908011,0.692003,9.128061,3.860006,2.062804,2.238115,4.305789,-1.914493,-9.743923,4.882378,-9.864348,-6.953163,-0.729412,5.666283,-5.231673,-2.833602,1.194598,-0.560876,-0.465054,-6.230382,-6.454957,-3.525967,-2.396692,-9.242799,-8.864724,2.599177,3.831987,-3.766497,3.717755,-7.746857,-6.797930,3.250438,-3.221853,-9.705606,2.546264,-5.026763,6.621586,-4.144935,-7.758561,-8.978372,-2.926124,2.818157,6.875878,4.113015,7.083612,-9.191305,-7.842885,-8.662504,-1.142770,-0.793223,5.169415,7.076928,4.238888,-2.633047,8.324678,-8.637971,-7.988991,3.696990,6.175567,-4.116090,-0.716043,-1.163948,-0.414852,-3.331745,-8.321745,3.992001,8.780397,-0.894632,-5.799983,-9.470707,6.133817,6.740980,-0.343582,3.457406,6.733403,4.612612,-9.270359,-0.631273,-8.974477], dtype = "float64")#candidate|3969|(216,)|const|float64
const_3970 = relay.const([-1.210597,-8.859185,-4.365186,6.028897,-7.795045,1.615212,5.690410,-5.623385,-4.939832,-8.211398,-8.382015,7.633172,-1.884562,4.976854,-3.514998,-8.003967,3.498161,8.040507,8.606390,8.106575,8.384220,7.440834,-9.448826,9.267220,9.318642,-4.644249,2.883388,-2.384377,6.363162,7.490744,8.281545,-9.214912,-9.953103,-9.598938,9.797596,5.246639,-1.615148,3.053495,7.333491,5.732362,-3.724097,-7.237200,-3.429176,9.698462,-1.208891,8.649042,-2.509167,-4.578879,-1.925073,-2.172952,-6.743236,-4.882238,-4.149283,-7.964938,4.628048,-6.095040,0.483040,7.713070,-4.618428,-2.420536,4.164612,-7.812342,4.390101,4.882575,9.481692,9.111155,5.671255,-5.204173,9.216501,4.564314,9.662360,9.984110,-9.652035,-1.995698,4.619343,4.725125,-7.959336,3.439435,8.472733,4.254566,-9.714385,-7.304892,0.892535,-9.073151,5.642128,4.692696,3.664749,-1.710514,1.378457,-4.553508,3.643305,1.075884,7.261186,7.082399,1.601908,0.258852,-6.075087,-8.995093,5.668655,-4.978636,-4.747068,5.796103,-0.100651,-6.782506,-9.411735,6.940632,-6.397258,1.101288,6.016296,-3.764096,-9.773209,-7.809254,-6.229826,-3.634802,7.442998,-1.475195,-4.724584,-0.631886,2.880049,-0.599124,0.838513,6.289998,-6.944856,-0.553433,-1.132075,5.064495,-6.567298,8.844790,-5.285183,-7.904414,-9.635585,5.195564,-0.917053,-8.745117,-2.954051,6.250703,-2.766596,-2.375663,-2.123324,-4.160863,6.774563,1.923297,6.732632,-2.703049,-3.575251,-7.053625,-5.890977,3.988609,5.703487,-4.465046,-7.222225,7.595170,3.955190,5.093712,-5.532778,-2.317967,5.750935,-8.164323,-7.120060,-0.749000,8.815292,5.234546,1.440604,6.253886,-5.595047,-1.670053,0.971958,0.922559,8.486568,-6.361359,-4.879419,-0.508113,-1.943277,8.382159,1.314639,2.957422,-1.480971,-1.039358,0.486320,-1.790012,-1.889854,-9.362729,-0.675820,-5.335530,8.092308,-9.282662,2.038177,1.990531,4.500947,-5.053546,3.867521,0.535987,-7.817060,0.055045,6.121817,-7.016195,-8.154582,-4.081916,-8.869400,6.363731,1.704365,-2.078540,-4.183502,8.522003,-3.004817,-8.299205,6.771312,6.292645,-2.450354,-3.937036,-7.380099,7.894727,7.758453,5.084539,-9.462259,2.739279,-6.137545,-1.121159,-5.717333,-9.662059,2.915582,-2.819081,6.678157,-4.226331,-7.930799,4.760404,2.547376,5.677006,-9.583239,0.515766,7.390369,3.473052,-7.471457,-4.078995,4.400922,0.622802,-8.524928,2.626144,6.615275,4.546416,-2.701279,-6.886358,9.195766,6.805677,-6.569325,-9.880175,9.994344,-6.088269,0.337359,-8.502555,0.625686,6.236411,9.532589,8.718442,-9.829442,-5.034760,-7.400201,1.217318,4.769548,5.249678,7.828424,5.638922,1.786413,-9.066497,8.116129,6.248040,-7.296350,-9.999908,-7.279834,-2.677350,-9.638279,0.671565,7.224871,-9.167221,3.309717,-9.836304,7.194451,-4.673616,6.251325,4.080448,5.885524,-3.090494,4.906773,-4.460040,-1.338249,-4.375785,3.699609,9.233028,-0.518602,9.539043,-4.707621,-3.436824,-4.460908,-0.303202,5.817423,-4.206536,9.933596,-2.687989,6.584710,-1.832580,3.023625,-2.181630,-3.068228,0.237162,2.924897,5.599154,2.354720,6.963770,-8.952509,7.055700,2.845849,-9.722408,-3.179964,8.350997,1.173152,-7.187720,-0.635795,-8.981638,-8.516657,-8.455370,-0.599994,7.062107,8.346009,8.767947,9.717073,-1.501769,-8.389640,9.590173,8.693017,-3.400954,-8.854937,-9.785674,8.761044,6.091946,-1.341705,1.159981,6.018610,-1.526821,8.214843,-9.129893,4.456214,5.363155,-8.128286,-8.157212,3.618302,-5.135716,3.988646,4.071062,2.118116,4.659036,-6.717681,3.041419,9.742226,-3.085494,7.328512,6.707866,4.462321,0.204325,1.997898,-4.252176,-9.188645,-5.407194,2.494442,6.073163,3.170821,-9.290087,0.821522,0.720733,-2.825251,-6.474464,9.872612,-1.845738,-1.643352,-8.580022,9.782787,2.486598,0.455263,-3.657720,5.663352,-9.135355,-7.991002,-2.481954,-8.820279,-7.415169,4.607559,-0.710158,5.200069,-9.438147,-8.876578,4.304616,2.138879,-7.601080,4.344482,9.319380,-1.557302,1.852402,-7.586894,-0.986354,2.814075,5.956656,9.569572,5.507142,-3.663496,5.320958,-8.046050,8.317394,4.207905,5.328617,-0.639430,3.672804,-0.702746,7.147688,-6.179655,8.894016,-6.898935,-2.119890,-8.051915,-1.006687,6.657455,-3.517223,7.486548,8.672815,8.734195,3.547334,9.865070,-1.825163,6.991916,7.076246,3.105072,3.667609,2.392723,-0.307650,-3.369188,4.263388,-5.902044,1.789841,4.424395,-0.368206,4.731723,-9.738595,-0.066559,-3.528136,-1.562656,4.003735,-8.830371,8.511994,-2.629070,-6.713859,9.270508,5.480430,0.456927,4.076606,8.035150,8.075615,9.811745,-4.517821,-7.391323,7.331472,-1.448944,-0.853566,7.947103,-6.699595,6.355260,-5.001879,-4.944945,-9.862197,2.897156,-7.642730,5.023599,2.304720,2.717728,-8.199619,2.646257,-5.221176,-6.104349,-4.655366,6.825325,-6.957583,7.698909,1.091022,-5.063167,9.843300,8.120613,-8.281883,1.123739,9.535507,0.313410,-3.232610,1.379388,-0.440544,-8.563839,3.071097,-2.458276,-0.945846,3.510091,4.220149,-5.896973,4.236574,9.164108,-4.933371,5.609802,8.657477,-8.151048,4.036715,6.713321,1.203631,3.705231,3.756998,-4.704194,8.038145,1.847667,0.343285,-5.774542,8.473966,7.858115,-9.099326,3.805304,5.843561,-2.883295,8.342825,4.270568,0.204045,7.977631,-8.473067,-7.779101,9.781339,-9.904615,0.151409,1.497399,-0.103563,6.913188,-3.717622,1.260801,-4.427237,-5.883900,8.900194,-4.194826,-8.594852,3.185482,-3.113084,5.550197,7.257143,-0.613487,-3.242048,1.685977,-6.834557,5.002375,1.561612,8.044264,-9.306820,2.136150,0.011323,-7.859487,0.602836,-1.568914,-6.389536,-2.288429,0.398242,-1.715937,-4.405526,7.672472,-8.654560,9.270391,9.382711,7.234160,6.027462,4.401884,1.605567,-4.698133,1.766928,-3.712876,-4.049148,7.251161,1.602374,7.796665,8.326952,0.076535,-0.645526,9.161778,3.478783,1.340545,5.614974,8.052749,0.823710,5.927414,-5.505895,-5.309801,-1.086835,-4.792762,8.493483,-7.463800,-1.474226,2.656625,-0.031210,-6.445149,1.035417,-1.962322,-2.792351,8.277882,-0.045825,-8.123750,-5.138352,4.196765,-0.400304,2.645653,-7.920060,-0.581273,6.744951,6.907587,-3.569960,2.314620,5.435584,-4.875502,5.554645,5.654161,8.421887,-5.889220,-4.311714,-5.065665,3.726708,5.719556,4.570245,9.370925,6.416737,8.809582,-6.371285,6.530534,-8.696728,-8.909656,-8.884550,7.107394,0.320918,6.842540,-2.942386,9.877491,0.636748,4.307164,-3.268886,1.247777,6.841155,-2.546017,4.524880,7.039810,6.482798,7.365660,-6.143770,2.667591,-0.343750,7.125604,5.226101,0.730560,2.430204,5.214935,1.745977,0.612677,8.449634,-0.648912,-2.298694,9.605243,7.369829,6.670441,3.486824,-7.318279,6.724763,-7.868258,-3.285528,-3.589611,-6.226337,9.894831,-5.472649,-3.251777,-9.703220,5.225162,0.440487,9.505584,9.356172,-9.993737,3.083140,4.101225,-6.260826,0.496494,7.129513,3.576177,-5.300713,4.619471,6.804935,-7.401445,-8.881169,-7.546735,-0.736149,1.766272,-6.680282,1.218291,-1.880191,5.003425,-6.961218,6.692761,-8.488726,-5.190123,1.317248,7.062245,2.037532,5.483812,0.039718,3.095374,1.713519,-0.889775,-2.449633,3.038880,-1.445642,-0.493281,-7.519006,-4.802058,-4.155043,9.257004,-1.348890,-1.820780,-6.654786,1.900486,-4.524168,-7.486156,6.447192,7.490626,-5.793580,-2.294635,3.294185,9.947628,-1.183916,-5.664536,-2.020041,7.116918,2.901501,0.126727,4.514243,2.167126,5.762112,1.672944,-4.627267,2.037796,4.745814,8.475103,-6.979596,-6.590994,-8.336962,0.956119,-0.984230,1.376579,-2.672622,-4.132470,-3.584649,2.806212,3.001847,-2.208155,-7.282876,-9.072220,-2.755798,-0.866832,-2.773432,3.184610,-8.158922,-0.565287,4.731054,-5.922732,-0.771737,1.789416,-1.490074,-4.629462,5.251023,-6.250660,-0.231205,-5.409283,-1.381095,9.640201,7.938877,-9.404548,2.528802,2.572092,-3.530807,9.098118,-1.260589,5.092407,6.179666,-0.161594,7.120947,-5.922839,2.000665,-8.934309,-3.939595,-7.790462,-7.173125,7.157718,6.759832,5.228034,-5.829988,-0.717002,7.003452,6.050753,-8.144479,-8.413555,-9.550312,5.227169,4.575337,-6.022651,-0.764219,0.226520,2.977336,-9.888788,6.478188,-5.130989,-4.725707,-3.816245,5.310755,6.211089,0.798239,3.536083,-2.280629,8.041759,-6.665142,3.695397,7.498839,2.056667,0.370266,7.453793,7.634903,-0.488687,8.041149,-6.156086,2.589944,-1.671854,6.777369,-0.773779,-1.413240,4.694823,4.710120,1.769734,8.825442,7.604372,4.658583,-4.466363,4.762063,-7.526618,2.678689,0.839883,-4.465044,-2.990628,0.537243,-0.494223,-6.545481,-2.532191,-5.259328,-6.894476,-2.329148,7.145439,1.602723,6.220971,-5.191847,5.787749,-1.628379,-5.678483,-1.033902,-3.983869,-4.670527,6.850795,-5.426203,-1.490696,-2.259479,-5.203648,7.311823,-5.474641,5.530106,4.083296,8.127826,-3.804617,2.355578,1.703530,8.985211,7.335852,-7.103122,-7.172837,-6.878056,3.583647,-9.429764,7.288924,3.629330,-0.334662,8.030416,8.097622,-7.842667,-7.984339,-5.198036,3.238502,8.704554,2.778557,4.223638,-5.469604,2.508152,-4.594495,-5.302813,5.236721,4.178921,-3.200455,3.720695,-9.035271,6.492091,2.536404,-9.917944,6.690758,4.252981,8.928901,9.970822,-8.130129,4.541737,-1.041129,-1.646846,-6.999082,0.813178,5.741192,-8.080498,-0.988007,-8.479886,4.409374,-7.786807,1.452002,-1.781381,-9.692741,-2.377413,-5.573264,-6.230630,2.796844,-7.187144,-7.661044,4.372457,-0.977204,6.400184,3.764227,-3.581354,-9.441816,-4.365082,-2.133740,-3.601286,-7.510192,8.799439,4.036698,2.238291,-7.175790,-0.076921,8.762405,-8.830070,1.886064,-1.987836,-5.781474,5.772472,0.348974,-0.069894,-0.209043,-6.291480,9.523670,6.078897,9.297242,-1.587324,-3.068539,4.604742,-8.729669,2.519094,9.376959,-7.829565,-0.141947,5.722915,0.830803,1.642729,-7.141289,-4.653970,1.075207,-7.796745,-7.107977,3.527044,5.283642,-4.187678,-8.175467,6.370858,7.607635,6.036396,-9.715489,1.305718,-1.537732,9.895565,3.068662,0.033920,-4.465102,5.580268,-7.571553,4.915744,2.691166,1.288035,-2.701941,-0.455378,-0.033202,8.985812,-9.606107,1.835468,-5.258798,4.535378,-6.292863,-8.690171,4.518099,-6.859434,-3.858447,4.475377,5.150915,-1.614871,-1.796672,-3.317610,-9.684831,8.665420,-8.670278,-1.366977,1.121125,-7.999656,-5.505279,-2.442081,0.823241,1.231042,5.603373,0.430905,6.786454,-9.334164,-6.949715,-8.677749,-0.649794,9.499424,-4.749639,6.605418,-7.935619,-7.052667,6.455960,-8.069374,6.794489,-6.159985,-5.889828,4.674826,3.960357,6.535781,-4.569718,7.380979,4.442171,-7.153120,-8.050725,-9.128162,6.205446,0.034848,7.633294,7.419525,9.459816,7.774368,-9.036020,7.962824,-4.974245,2.719336,-9.928541,-4.824190,-5.581201,-4.434621,-8.799589,3.674162,7.253972,-2.492921,-0.867429,5.698931,-6.370941,0.830840,7.868793,-9.909244,-4.236414,5.511612,-9.997809,-5.723236,-3.761162,6.399777,4.444183,-2.008037,6.745786,-5.275414,0.640449,8.634006,-3.248248,-0.173021,3.203170,-2.787733,-6.640682,4.325677,6.496410,7.251384,-0.934953,-8.690072,8.451782,-7.001266,-9.292791,-2.430357,-4.675967,1.192391,6.828170,-3.941498,-5.269629,-5.986322,-3.481996,-1.124896,1.972555,5.065727,-7.562900,-3.719989,7.265608,8.692310,1.341732,5.684430,4.992524,-1.163499,-3.439882,-1.412180,7.257693,4.350640,-3.037999,9.381719,-8.931975,6.541665,5.924720,-9.937376,-5.412102,-2.304571,-4.677288,6.173931,-0.272872,-2.426114,-6.332356,9.341474,8.026217,-8.584778,-2.158235,6.914032,-9.832962,-4.048349,-0.840992,-0.365991,-6.039535,-3.808469,-3.191421,-9.787259,-3.210409,7.133816,6.060791,-4.595232,-5.384806,-0.634720,8.486145,2.251135,-1.532481,0.193978,-7.612244,8.558890,-4.131118,1.222274,4.267215,6.356319,-4.114924,7.505290,2.667730,-8.855165,-1.650445,0.838276,5.759257,9.517995,-8.093888,-8.548863,5.900896,6.471130,-1.785118,-1.507217,-9.263871,4.347936,7.339909,7.344640,-9.850586,-7.763390,-5.661893,-5.124885,-0.049178,-9.627762,-0.910827,6.498953,-4.634376,7.932501,-2.062543,0.834901,5.270294,4.201795,6.619251,-3.803469,7.012173,-3.525290,-2.809790,2.332195,-5.966710,3.937187,-9.677525,-9.251223,7.804709,3.456169,-9.977037,-1.836275,2.195419,-1.560784,-9.541917,4.359771,0.621025,-8.114315,-3.184357,-4.556090,4.575064,-4.449186,-7.790520,-1.253699,-6.213717,9.433677,-5.981809,7.343375,-7.673050,-6.791032,-9.640859,-7.753327,7.794457,4.031488,-9.249068,2.383638,4.959398,7.490932,-1.873824,2.554506,-5.726399,3.450444,-7.852579,-7.744009,-4.928546,-7.328260,-1.670044,-7.714107,8.545283,-3.381211,5.286534,7.741734,0.067891,6.491845,-4.292352,-0.138696,3.075347,-5.686475,-3.517091,-5.336753,8.445415,6.849828,8.487192,-0.243109,4.263626,-7.147001,-3.585470,4.629481,1.906660,8.786111,4.706601,-1.736449,-3.202043,6.730753,2.073172,1.776885,-2.532102,4.483211,4.719078,-0.080753,-7.634692,7.442814,-5.998109,-2.103019,5.109146,6.383293,6.945962,-9.614638,-7.216064,1.795875,1.951111,3.678771,0.582692,-8.455864,-1.050208,-5.657214,0.009452,4.734308,-8.292453,7.369812,9.698051,8.347602,-4.234560,-1.984675,3.281443,7.513992,6.338523,-0.470468,9.957588,8.560518,4.998024,-1.325137,7.285798,-8.360867,3.746949,-5.985532,-2.461762,2.243894,6.178959,-2.060965,7.363489,4.728591,-3.376322,-6.810295,-0.791993,0.779576,4.990673,1.195983,0.999429,-3.255755,0.666473,7.114923,-0.418623,2.126965,9.927721,-8.209844,1.858522,1.929494,0.957806,1.251542,2.479226,3.499182,-4.320397,0.546946,-1.870145,-8.045596,-1.747806,-3.427228], dtype = "float32")#candidate|3970|(1344,)|const|float32
call_3968 = relay.TupleGetItem(func_987_call(relay.reshape(const_3969.astype('float64'), [12, 9, 2]), relay.reshape(const_3970.astype('float32'), [1344,]), ), 0)
call_3971 = relay.TupleGetItem(func_991_call(relay.reshape(const_3969.astype('float64'), [12, 9, 2]), relay.reshape(const_3970.astype('float32'), [1344,]), ), 0)
output = relay.Tuple([call_3948,call_3968,const_3969,const_3970,])
output2 = relay.Tuple([call_3949,call_3971,const_3969,const_3970,])
func_3976 = relay.Function([], output)
mod['func_3976'] = func_3976
mod = relay.transform.InferType()(mod)
mutated_mod['func_3976'] = func_3976
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3976_call = mutated_mod.get_global_var('func_3976')
call_3977 = func_3976_call()
output = call_3977
func_3978 = relay.Function([], output)
mutated_mod['func_3978'] = func_3978
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3828_call = mod.get_global_var('func_3828')
func_3829_call = mutated_mod.get_global_var('func_3829')
call_3998 = relay.TupleGetItem(func_3828_call(), 0)
call_3999 = relay.TupleGetItem(func_3829_call(), 0)
uop_4003 = relay.log2(call_3998.astype('float64')) # shape=(15, 5, 9)
uop_4005 = relay.log2(call_3999.astype('float64')) # shape=(15, 5, 9)
output = uop_4003
output2 = uop_4005
func_4024 = relay.Function([], output)
mod['func_4024'] = func_4024
mod = relay.transform.InferType()(mod)
output = func_4024()
func_4025 = relay.Function([], output)
mutated_mod['func_4025'] = func_4025
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4028 = relay.var("var_4028", dtype = "int16", shape = (12, 14, 6))#candidate|4028|(12, 14, 6)|var|int16
var_4029 = relay.var("var_4029", dtype = "int16", shape = (12, 14, 6))#candidate|4029|(12, 14, 6)|var|int16
bop_4030 = relay.minimum(var_4028.astype('int16'), relay.reshape(var_4029.astype('int16'), relay.shape_of(var_4028))) # shape=(12, 14, 6)
bop_4033 = relay.left_shift(bop_4030.astype('int8'), relay.reshape(var_4029.astype('int8'), relay.shape_of(bop_4030))) # shape=(12, 14, 6)
bop_4046 = relay.not_equal(var_4029.astype('bool'), relay.reshape(var_4028.astype('bool'), relay.shape_of(var_4029))) # shape=(12, 14, 6)
bop_4053 = relay.floor_mod(bop_4033.astype('float32'), relay.reshape(bop_4030.astype('float32'), relay.shape_of(bop_4033))) # shape=(12, 14, 6)
bop_4075 = relay.maximum(bop_4053.astype('uint8'), relay.reshape(bop_4033.astype('uint8'), relay.shape_of(bop_4053))) # shape=(12, 14, 6)
uop_4086 = relay.sqrt(var_4029.astype('float64')) # shape=(12, 14, 6)
bop_4092 = relay.logical_or(bop_4075.astype('bool'), relay.reshape(bop_4046.astype('bool'), relay.shape_of(bop_4075))) # shape=(12, 14, 6)
var_4098 = relay.var("var_4098", dtype = "float64", shape = (12, 14, 6))#candidate|4098|(12, 14, 6)|var|float64
bop_4099 = relay.mod(uop_4086.astype('float32'), relay.reshape(var_4098.astype('float32'), relay.shape_of(uop_4086))) # shape=(12, 14, 6)
bop_4102 = relay.multiply(bop_4030.astype('uint8'), relay.reshape(uop_4086.astype('uint8'), relay.shape_of(bop_4030))) # shape=(12, 14, 6)
func_1787_call = mod.get_global_var('func_1787')
func_1789_call = mutated_mod.get_global_var('func_1789')
call_4106 = relay.TupleGetItem(func_1787_call(), 0)
call_4107 = relay.TupleGetItem(func_1789_call(), 0)
func_3414_call = mod.get_global_var('func_3414')
func_3416_call = mutated_mod.get_global_var('func_3416')
call_4111 = relay.TupleGetItem(func_3414_call(), 1)
call_4112 = relay.TupleGetItem(func_3416_call(), 1)
output = relay.Tuple([bop_4092,bop_4099,bop_4102,call_4106,call_4111,])
output2 = relay.Tuple([bop_4092,bop_4099,bop_4102,call_4107,call_4112,])
func_4121 = relay.Function([var_4028,var_4029,var_4098,], output)
mod['func_4121'] = func_4121
mod = relay.transform.InferType()(mod)
mutated_mod['func_4121'] = func_4121
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4121_call = mutated_mod.get_global_var('func_4121')
var_4123 = relay.var("var_4123", dtype = "int16", shape = (12, 14, 6))#candidate|4123|(12, 14, 6)|var|int16
var_4124 = relay.var("var_4124", dtype = "int16", shape = (12, 14, 6))#candidate|4124|(12, 14, 6)|var|int16
var_4125 = relay.var("var_4125", dtype = "float64", shape = (12, 14, 6))#candidate|4125|(12, 14, 6)|var|float64
call_4122 = func_4121_call(var_4123,var_4124,var_4125,)
output = call_4122
func_4126 = relay.Function([var_4123,var_4124,var_4125,], output)
mutated_mod['func_4126'] = func_4126
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1822_call = mod.get_global_var('func_1822')
func_1824_call = mutated_mod.get_global_var('func_1824')
call_4133 = func_1822_call()
call_4134 = func_1822_call()
uop_4141 = relay.cosh(call_4133.astype('float32')) # shape=(15, 5, 9)
uop_4143 = relay.cosh(call_4134.astype('float32')) # shape=(15, 5, 9)
func_3225_call = mod.get_global_var('func_3225')
func_3228_call = mutated_mod.get_global_var('func_3228')
const_4163 = relay.const(6, dtype = "int64")#candidate|4163|()|const|int64
var_4164 = relay.var("var_4164", dtype = "int64", shape = (4, 308))#candidate|4164|(4, 308)|var|int64
call_4162 = relay.TupleGetItem(func_3225_call(relay.reshape(const_4163.astype('int64'), []), relay.reshape(var_4164.astype('int64'), [7, 11, 16]), ), 4)
call_4165 = relay.TupleGetItem(func_3228_call(relay.reshape(const_4163.astype('int64'), []), relay.reshape(var_4164.astype('int64'), [7, 11, 16]), ), 4)
func_3414_call = mod.get_global_var('func_3414')
func_3416_call = mutated_mod.get_global_var('func_3416')
call_4167 = relay.TupleGetItem(func_3414_call(), 1)
call_4168 = relay.TupleGetItem(func_3416_call(), 1)
func_3660_call = mod.get_global_var('func_3660')
func_3662_call = mutated_mod.get_global_var('func_3662')
call_4169 = relay.TupleGetItem(func_3660_call(), 0)
call_4170 = relay.TupleGetItem(func_3662_call(), 0)
func_3828_call = mod.get_global_var('func_3828')
func_3829_call = mutated_mod.get_global_var('func_3829')
call_4175 = relay.TupleGetItem(func_3828_call(), 0)
call_4176 = relay.TupleGetItem(func_3829_call(), 0)
func_1658_call = mod.get_global_var('func_1658')
func_1660_call = mutated_mod.get_global_var('func_1660')
call_4177 = func_1658_call()
call_4178 = func_1658_call()
func_3630_call = mod.get_global_var('func_3630')
func_3631_call = mutated_mod.get_global_var('func_3631')
call_4185 = relay.TupleGetItem(func_3630_call(), 1)
call_4186 = relay.TupleGetItem(func_3631_call(), 1)
output = relay.Tuple([uop_4141,call_4162,const_4163,var_4164,call_4167,call_4169,call_4175,call_4177,call_4185,])
output2 = relay.Tuple([uop_4143,call_4165,const_4163,var_4164,call_4168,call_4170,call_4176,call_4178,call_4186,])
func_4193 = relay.Function([var_4164,], output)
mod['func_4193'] = func_4193
mod = relay.transform.InferType()(mod)
var_4194 = relay.var("var_4194", dtype = "int64", shape = (4, 308))#candidate|4194|(4, 308)|var|int64
output = func_4193(var_4194)
func_4195 = relay.Function([var_4194], output)
mutated_mod['func_4195'] = func_4195
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3414_call = mod.get_global_var('func_3414')
func_3416_call = mutated_mod.get_global_var('func_3416')
call_4214 = relay.TupleGetItem(func_3414_call(), 2)
call_4215 = relay.TupleGetItem(func_3416_call(), 2)
var_4218 = relay.var("var_4218", dtype = "float64", shape = (15, 5, 9))#candidate|4218|(15, 5, 9)|var|float64
bop_4219 = relay.divide(call_4214.astype('float64'), relay.reshape(var_4218.astype('float64'), relay.shape_of(call_4214))) # shape=(15, 5, 9)
bop_4222 = relay.divide(call_4215.astype('float64'), relay.reshape(var_4218.astype('float64'), relay.shape_of(call_4215))) # shape=(15, 5, 9)
output = relay.Tuple([bop_4219,])
output2 = relay.Tuple([bop_4222,])
func_4231 = relay.Function([var_4218,], output)
mod['func_4231'] = func_4231
mod = relay.transform.InferType()(mod)
var_4232 = relay.var("var_4232", dtype = "float64", shape = (15, 5, 9))#candidate|4232|(15, 5, 9)|var|float64
output = func_4231(var_4232)
func_4233 = relay.Function([var_4232], output)
mutated_mod['func_4233'] = func_4233
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4245 = relay.constdtype = "float32")#candidate|4245|(16, 10, 13)|const|float32
var_4246 = relay.var("var_4246", dtype = "float32", shape = (16, 10, 13))#candidate|4246|(16, 10, 13)|var|float32
bop_4247 = relay.less_equal(const_4245.astype('bool'), relay.reshape(var_4246.astype('bool'), relay.shape_of(const_4245))) # shape=(16, 10, 13)
output = relay.Tuple([bop_4247,])
output2 = relay.Tuple([bop_4247,])
func_4252 = relay.Function([var_4246,], output)
mod['func_4252'] = func_4252
mod = relay.transform.InferType()(mod)
mutated_mod['func_4252'] = func_4252
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4253 = relay.var("var_4253", dtype = "float32", shape = (16, 10, 13))#candidate|4253|(16, 10, 13)|var|float32
func_4252_call = mutated_mod.get_global_var('func_4252')
call_4254 = func_4252_call(var_4253)
output = call_4254
func_4255 = relay.Function([var_4253], output)
mutated_mod['func_4255'] = func_4255
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1813_call = mod.get_global_var('func_1813')
func_1815_call = mutated_mod.get_global_var('func_1815')
call_4262 = relay.TupleGetItem(func_1813_call(), 1)
call_4263 = relay.TupleGetItem(func_1815_call(), 1)
output = call_4262
output2 = call_4263
func_4264 = relay.Function([], output)
mod['func_4264'] = func_4264
mod = relay.transform.InferType()(mod)
output = func_4264()
func_4265 = relay.Function([], output)
mutated_mod['func_4265'] = func_4265
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1787_call = mod.get_global_var('func_1787')
func_1789_call = mutated_mod.get_global_var('func_1789')
call_4278 = relay.TupleGetItem(func_1787_call(), 0)
call_4279 = relay.TupleGetItem(func_1789_call(), 0)
func_3469_call = mod.get_global_var('func_3469')
func_3473_call = mutated_mod.get_global_var('func_3473')
var_4287 = relay.var("var_4287", dtype = "float64", shape = (216,))#candidate|4287|(216,)|var|float64
const_4288 = relay.const([True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False], dtype = "bool")#candidate|4288|(2240,)|const|bool
call_4286 = relay.TupleGetItem(func_3469_call(relay.reshape(var_4287.astype('float64'), [216,]), relay.reshape(call_4278.astype('bool'), [15, 5, 9]), relay.reshape(const_4288.astype('bool'), [2240,]), ), 5)
call_4289 = relay.TupleGetItem(func_3473_call(relay.reshape(var_4287.astype('float64'), [216,]), relay.reshape(call_4278.astype('bool'), [15, 5, 9]), relay.reshape(const_4288.astype('bool'), [2240,]), ), 5)
func_4252_call = mod.get_global_var('func_4252')
func_4255_call = mutated_mod.get_global_var('func_4255')
const_4297 = relay.const([-2.236582,-9.113038,-4.888402,1.024950,0.848644,3.708862,-3.695393,-1.608515,9.353758,7.740742,3.207982,9.835932,7.913746,4.148752,4.256689,9.785909,4.192433,-7.917410,5.749358,8.498831,-9.046020,-8.469961,-2.281389,2.330049,-2.024039,-2.656476,6.770616,7.715096,-1.820528,-9.060572,0.329171,9.468997,9.654444,7.829869,5.215691,7.183955,7.748243,-5.503626,-5.532191,-3.631850,-1.957958,5.230367,-5.414916,-0.558769,4.507216,-0.591378,-6.040761,1.063028,7.989403,5.682000,9.126750,8.186644,-8.440023,0.120375,7.482698,-9.467874,-6.559607,-3.032009,-2.291097,8.748309,0.916724,-1.057583,6.084095,9.727427,-2.580012,1.051679,1.767055,5.464711,9.548267,-1.823528,-4.542162,-2.836790,-8.123872,1.396894,-9.699929,4.874034,-6.943562,2.654565,5.762606,-2.620156,6.869424,-6.434327,-4.086867,9.093208,-5.205701,3.368674,-5.032143,6.397827,-8.916854,0.574986,-1.215835,-7.050944,-4.042402,-9.125901,-1.760806,-8.804424,6.580568,-2.373713,-4.554890,0.231326,7.679067,6.386878,-4.930445,9.139658,5.322064,3.964825,8.186557,-0.533642,-4.597050,1.015326,0.872627,-2.240709,-0.635268,1.774800,-5.262733,2.171770,0.046118,3.207565,-3.758655,-5.509662,3.724327,8.477785,3.318923,1.815160,-7.884831,-6.448531,-9.746524,-1.809450,1.737516,2.560181,-6.962488,0.482840,5.442019,-3.405941,5.146119,3.649715,-7.348788,3.313350,-8.220250,7.615256,-5.473057,-2.938270,2.721431,3.325587,-0.391025,-9.521997,-0.965962,-7.342608,1.887730,5.957993,9.909637,4.224392,2.751131,5.952348,1.407727,-9.331522,-4.414247,-9.592865,-1.503844,-1.110422,-0.857311,0.556566,2.021591,-7.934375,-5.219076,1.364748,-8.766095,-2.239772,-9.454730,6.945238,-4.060225,5.191448,7.592441,-6.006876,4.288338,-2.711687,-0.461227,-0.971699,-6.539409,-2.596023,-2.285619,-1.097309,-9.509070,-6.147175,4.140703,9.993368,-4.990391,-3.416167,-4.275432,5.274809,-4.271367,-8.614497,8.273959,-8.241839,1.177241,1.239405,-9.434479,0.683476,-1.055839,4.292147,0.668165,9.423988,3.481306,9.833732,2.330691,-7.185418,3.957275,-7.053737,9.716506,-8.710927,3.188780,1.323490,9.068503,-2.228644,-3.643115,3.081247,-9.308550,1.202233,8.802266,-0.626932,0.887884,-9.871954,3.992516,-1.237571,1.786947,3.713244,-4.838363,-3.718587,8.566948,9.157606,0.781539,-4.913852,0.529504,6.817657,-7.233038,0.313133,-3.009894,-6.156155,-0.767188,3.119229,4.679234,-6.221701,1.582905,-3.633596,-4.490175,-4.611081,-4.504853,2.962659,7.299078,-8.250038,-0.545807,2.326451,7.951991,-9.797087,-1.840319,8.355573,7.374000,7.693664,7.727662,1.607184,0.563990,2.081803,-0.925875,-1.949253,1.305541,-5.019191,-3.592607,3.016284,1.235783,-7.462438,1.032237,-8.649347,4.263937,5.491225,7.506540,-4.623815,-0.585585,-4.431918,2.209690,-5.405858,-5.234794,-2.135290,2.403082,-1.730738,-6.018068,-4.299828,0.884539,-4.232711,0.278974,8.502674,-6.587460,1.703571,6.683521,-5.296998,-9.136959,9.491044,3.415539,-0.854935,3.380478,3.660723,6.941295,4.651402,-3.214810,4.126612,7.458628,-7.383970,6.813767,3.929438,-5.874989,5.458470,-0.953710,8.619542,-1.391835,-1.518637,-0.686284,1.146677,-8.595026,-7.458100,-7.859186,-5.708406,-1.894935,-0.084079,-3.479240,-7.496411,9.834963,-5.396059,1.800026,6.641627,6.821954,6.496861,7.221427,6.984206,-1.274076,6.369540,7.373856,-0.206218,-3.103952,6.460497,-3.580323,4.549989,4.796933,-0.519875,2.418037,2.435658,2.584468,1.677446,1.954880,-6.832328,-8.382820,4.755044,0.201348,-3.707059,-5.953636,5.300937,6.663916,-1.697974,-7.272566,2.839850,-5.612375,-9.463856,-6.347998,-8.307274,-2.393874,5.844217,-8.652384,-6.036717,-2.294923,-3.497241,3.484589,-3.341249,-9.690414,0.655924,8.044688,0.936274,9.327810,1.344512,4.119782,-7.043332,7.832562,-1.311052,-3.481629,0.501954,8.497364,9.744974,5.666339,-9.133233,-3.912619,-2.618649,-6.395053,2.368533,2.440158,7.615158,-0.661174,-5.882765,9.427294,-4.226456,-6.892249,5.024525,5.715487,-4.254269,-2.725064,-8.952421,-2.374121,-4.073465,-2.501279,8.531720,-4.289643,-7.873650,-7.712655,-3.327785,-2.936908,5.823758,3.753654,-8.375174,7.672583,3.560346,0.409564,-4.011709,6.869712,4.372877,-5.280149,3.284950,0.246243,2.369942,9.672785,-8.539359,-4.861049,-3.388051,-6.220751,-1.702049,8.340182,2.404041,-9.534805,-6.650561,-3.490657,0.807651,-4.636858,9.122537,4.541658,5.730886,3.021173,-2.042474,2.964378,6.356794,9.961716,3.609771,9.711601,-4.584659,-1.322686,9.790843,-6.658018,4.469334,-1.914575,-7.262415,-6.480842,-7.330142,4.615477,2.314191,2.431374,-9.468215,8.858489,1.024901,-9.156839,-8.264471,-7.823655,1.668122,-2.514141,-7.962260,-7.526003,-3.115358,-5.714431,-5.337717,1.229030,7.441632,-8.544798,-7.784607,9.714622,-1.334474,5.361979,6.017350,8.299557,-5.473758,8.842890,-3.851718,6.975069,-4.054272,3.240761,-7.321907,5.357541,7.260218,7.034923,4.569510,4.205872,6.084147,-4.419342,-3.921592,1.304291,6.018882,5.752664,-5.480655,0.815298,9.389917,1.044946,5.486309,6.825148,-1.977713,-0.398856,0.551624,-7.615833,-4.810063,1.651489,-5.434020,8.643775,-2.993325,0.028297,-5.968516,6.486205,3.127682,9.223746,7.500452,3.000534,4.385647,7.711646,4.799688,2.723332,-8.943526,-3.101401,-5.239536,4.829643,0.281332,5.813371,8.102028,4.628018,-1.378693,8.388971,0.466274,0.403985,6.013822,8.822215,-2.849264,-3.331211,-7.212152,1.402157,8.316631,7.732129,3.623036,-0.134206,5.891870,4.573528,-8.303360,-4.800189,2.792731,-4.559679,-2.408418,9.831973,7.813149,-6.110457,4.906598,-7.524999,-0.866661,5.025834,-8.123473,-6.536537,6.484756,4.699124,-9.786362,2.250501,-9.482610,-9.351550,0.985175,9.630762,-3.362030,-9.995161,-3.945484,-9.423063,-4.258825,-9.953876,6.789178,5.474684,7.905180,-4.800412,-3.219907,1.284325,9.896367,5.902815,-3.580566,8.519216,-8.115591,-6.668016,-7.418056,2.883315,-2.836578,-7.871579,-3.137343,-3.594730,-3.634160,-2.881544,-1.011005,1.849097,5.066641,-4.519155,-8.749774,-0.031875,-5.811514,9.109101,8.165567,5.755001,-6.753899,2.496733,1.526069,-8.745650,-9.197703,-9.574776,6.917251,5.153415,3.781762,-2.331782,1.448130,-1.837936,3.818799,4.668015,3.410865,-1.033466,-9.246976,-5.314217,4.669381,5.960637,6.374448,-0.718029,-9.305692,-3.936279,1.189451,4.550568,4.546826,-2.985602,4.878912,-0.730757,1.436044,-1.451992,-6.321699,8.188453,-0.276038,-8.085171,6.788286,-2.423414,-1.983661,2.131484,0.975350,-0.164787,-3.274567,2.878522,-8.794988,-5.653589,-5.666810,4.542141,-1.508100,-5.608088,-5.906999,-6.659064,5.345878,7.858459,5.904703,8.123267,9.797980,-7.091722,2.546113,6.145212,4.868633,0.951370,-5.024759,-0.928302,3.501484,4.808434,9.906514,2.462279,-6.040599,-0.079163,1.444230,-6.821659,-8.114531,2.998130,-3.056865,8.908262,-7.927044,5.746831,-1.220889,3.539423,-7.412051,0.097302,2.456547,-1.757819,2.795968,7.093865,6.309930,7.639231,-6.021158,3.980918,8.879596,-2.060087,6.244637,-7.244127,-8.281842,0.816904,8.936880,-8.025077,-6.367566,-6.576665,-9.630957,-1.590894,-3.239214,5.237839,-3.910697,3.013335,6.960485,-0.594485,-1.934677,-9.831435,-6.934270,3.471216,-6.031902,-8.168176,4.209612,-0.624105,0.275346,1.054729,-9.544533,-8.885467,4.300690,-6.458157,-2.298513,7.553769,-8.640031,7.699789,8.368192,-1.676463,-1.295292,-6.510368,6.978405,8.169928,-5.351875,-0.885576,2.125592,9.341112,1.985751,-7.366282,-8.954584,-6.158799,9.666937,-2.426152,-2.207149,9.607684,8.640480,-9.566560,-3.497999,7.387979,-6.790248,-3.668433,1.535142,-1.050843,8.140297,-6.415502,-4.048031,-6.997754,-2.849509,4.132033,4.968666,8.155867,-7.095321,-4.948710,-2.551351,7.435305,9.574549,-3.402526,-1.988567,3.507844,8.408497,9.032389,-0.882368,-3.408629,-8.647210,-6.707149,-5.145372,1.895068,5.516255,1.678421,1.220537,2.836956,-5.211450,8.136940,-2.528096,2.685355,-0.856757,-2.905646,-5.174906,0.953234,-8.918005,6.376251,-6.209163,4.896898,-7.349664,9.071788,-3.013172,-8.532739,-4.164676,7.111089,1.692531,2.629726,3.456036,-8.560954,-3.967309,0.851521,2.891876,5.585212,0.024519,-2.155996,8.066765,9.690438,-7.708429,6.156315,-1.619573,6.037562,9.890579,5.476612,-3.989932,-8.262287,-8.330198,7.462255,-3.907627,4.483780,-0.543990,1.157646,3.282017,7.885588,1.358386,-2.714413,3.739724,0.995856,-2.747222,5.687441,-6.523429,9.590131,6.951926,9.613951,4.468715,3.113523,-6.356439,-0.245841,-7.255455,6.661322,-8.608827,2.162098,4.792691,-8.315189,7.533047,7.006354,7.563852,-0.543607,2.996056,3.362703,-7.308405,-9.808410,1.574979,-5.946417,-5.136032,2.514868,-3.383426,-3.255464,5.235383,3.898383,7.486389,7.006414,-2.855787,8.375182,9.020277,-5.876489,-0.852396,-1.443098,8.934343,5.843176,-0.364525,-6.432934,3.181485,-6.001220,5.657470,0.176655,-3.845655,-1.388646,0.099922,6.182133,-2.686029,-2.624220,-8.771649,-5.683405,-5.416388,-5.145497,9.137555,5.627401,2.306906,2.871057,3.185064,4.934480,3.818977,-8.400951,-0.486256,4.331176,-3.054955,8.014273,-3.579550,-2.641590,0.240960,6.991214,-0.653146,3.781920,1.122766,-4.231203,5.658571,-6.413414,2.109669,8.186065,-4.516640,-2.916966,5.257329,-4.762927,-1.445757,-4.909565,8.310557,-4.485292,-9.424813,0.936332,-1.659189,-2.910769,-5.224922,2.481221,-2.355098,9.415910,7.007866,4.771780,8.487617,6.797350,-4.072167,1.897146,2.703219,4.282919,0.622670,1.878948,5.969379,2.476526,7.649997,6.481454,-9.803537,-3.802073,8.048087,-3.805519,5.163837,-4.508267,8.661415,5.092094,3.599193,-6.191617,-7.718245,-4.985506,1.831757,5.700211,-0.144427,-7.289830,0.059146,7.561324,-6.097582,8.162776,1.278202,-9.245956,4.436521,0.304782,-4.488874,5.999977,-6.342811,-8.797206,7.974095,-2.598946,5.770001,-4.105328,8.590240,5.170888,7.216451,-1.944413,-9.864062,0.447601,-3.133021,-5.525251,-7.657942,5.053737,4.233241,1.734363,7.237471,1.098196,-1.961990,3.977689,8.981152,-3.024303,6.412868,8.097130,0.609010,2.969366,5.681305,-2.545215,4.014786,-1.168592,-4.705792,-5.476441,5.062706,-0.404171,5.710773,-5.368533,-6.082940,-1.469758,9.367015,9.806041,-8.556253,-7.239955,-6.874934,-7.196775,8.821123,-3.325720,-0.019539,5.722496,-4.821556,1.470893,-4.505553,-7.586671,-7.552066,-0.826746,-1.122602,-9.971205,6.925807,4.088864,-5.572057,2.049556,-2.449285,8.409449,-2.537555,2.925767,-9.992030,8.373187,-7.831627,4.742217,-6.822337,-0.578936,5.033918,8.494070,2.967269,-6.990643,-1.716837,3.635469,3.775220,8.215956,-5.207715,4.550204,-6.598847,7.808373,-0.821599,2.316193,-8.845430,-3.082575,7.135775,-5.632365,-1.150694,-3.740621,6.089530,0.963585,-3.646623,-9.845565,5.245007,0.319914,-2.332219,-4.408496,7.231395,2.300863,4.914551,9.618974,-6.606234,-1.106894,-6.870312,5.509426,-1.947372,-6.585236,-8.039591,4.339260,-4.240378,8.201996,4.045102,-4.876945,7.642059,6.245932,9.195201,0.780213,-9.319143,-7.743991,-9.725765,-7.215983,-0.497309,0.299369,-4.390508,6.605445,9.096704,7.328620,-3.323135,3.118168,-1.026826,5.017982,2.342540,7.843157,-0.049551,-7.362195,8.931286,6.655649,-2.031106,-3.971877,-9.966273,3.975150,-7.604600,-4.530055,-8.008865,6.535820,-6.314256,-2.332807,2.406279,-9.773066,1.112486,7.628291,4.763082,0.671512,3.746737,-5.807513,7.409030,-5.839435,7.819461,-3.726134,-7.742956,-8.301402,-3.004701,1.817038,-9.247237,3.409725,-0.712909,-5.959924,-9.159649,0.717353,-4.694486,3.832105,-7.879004,2.437432,-8.774390,0.047272,4.244595,-5.741525,5.038575,-7.797056,2.378404,2.723132,-8.978088,3.817164,9.253120,-9.855408,9.791873,8.114358,0.734132,2.379769,0.969545,1.455609,-1.755930,-9.201813,3.415209,7.683867,8.496750,-5.957757,-1.810811,-7.542568,2.300439,3.712686,-7.287055,-8.010161,-8.137099,6.571962,-6.737457,-7.631021,-5.644683,-0.070304,1.866582,-3.962281,3.823287,-2.601523,1.498775,9.186884,-0.878085,7.617356,-1.193636,-8.104357,8.427795,-8.377857,-3.991121,-3.982465,1.367652,-0.506744,-7.380107,2.925013,-2.839096,7.035729,-3.736799,-5.022175,-2.446332,1.476633,1.914494,4.163016,-4.496779,-4.175887,-8.315905,0.366348,-6.466453,1.926754,5.961928,-8.301859,-2.694296,0.023145,-1.751868,1.083588,8.691539,6.633632,2.265621,9.038939,-8.064730,-4.663031,-5.326384,5.117893,-4.492699,5.548698,6.247370,3.924765,5.112595,7.339042,-2.734326,-4.277368,4.454504,-7.141710,-9.368938,-2.587083,9.377367,-3.900770,8.736208,-3.560955,-0.408297,3.854431,0.351478,4.992327,0.169856,2.228635,-9.971377,0.174312,0.458695,-5.679615,4.761127,3.472782,4.126130,-3.794537,1.445255,-7.263882,-9.542841,4.082994,-4.182024,-0.718543,3.539190,2.015980,-9.325009,-4.428601,-0.633181,9.310492,9.290408,3.304600,-4.788558,2.718821,-3.384670,4.103983,2.799527,2.999383,-8.643581,1.862167,9.674487,7.976389,9.549325,1.409589,-5.919856,7.406247,4.974444,-9.890067,-3.425851,5.396104,-5.481472,7.729709,-5.500582,9.712074,1.400335,-8.467390,-2.270406,-8.367801,5.902291,4.322689,-3.855439,-9.995329,7.918190,-9.505043,-7.808741,2.314923,-4.296322,6.480976,6.974125,0.802052,7.071067,4.510327,7.595477,-7.344612,8.713973,-5.390521,-6.545023,-9.393600,-2.434855,-9.863943,-5.308733,5.162140,-7.445119,9.055379,5.260019,-1.002935,3.295525,-3.372284,1.215848,2.792586,2.101505,8.318976,-4.462507,2.675531,-1.439682,-6.997370,0.946616,1.910293,-7.276702,4.512067,-9.055543,-0.173467,3.213336,-8.894172,0.800178,-4.201017,-9.888908,5.099339,1.947653,2.272769,-0.630710,-2.616122,4.469783,5.347948,4.493022,4.230293,4.498054,8.927856,9.954238,5.861868,1.165056,4.568059,1.164537,6.262367,2.035508,-6.106793,-2.417250,-4.628986,5.393615,5.900058,-8.737395,-0.763955,-6.842395,7.816039,6.850754,1.538577,-9.933642,-9.282232,6.515911,-0.042982,-5.817709,-8.847788,7.702403,-3.870195,-6.148785,5.330428,3.156171,-6.076633,9.577875,5.546431,4.812521,-0.794214,7.256320,5.295025,-9.234680,0.245134,5.256193,6.937195,-4.672248,8.447413,8.411221,-0.147808,-4.663986,-5.801940,-3.880242,-3.783184,-1.218788,4.479354,-4.162750,-5.871808,-7.450962,2.673637,2.509090,-6.139591,7.728647,3.641379,3.174528,6.122467,-7.174248,2.824468,8.975358,-5.728472,-9.942451,9.145162,5.341586,6.044565,8.918348,4.486129,6.094441,6.749748,4.270762,7.502526,-1.394868,-3.788213,3.378286,7.377901,6.676372,-6.703882,6.048809,-7.996204,-1.491503,-4.384571,8.347538,-3.268760,5.049861,5.670365,-6.336790,3.817476,7.336891,-9.839290,-3.028529,4.813618,0.358866,6.002103,1.566045,1.116540,-5.146562,1.820890,2.154311,-7.296109,9.329687,9.926578,1.228746,-6.041820,-2.184212,1.553112,-0.231528,3.843607,-1.298806,-5.785422,-8.719372,5.685423,8.514217,-2.521545,0.751172,-3.252023,-8.896830,-9.381769,-4.536991,-4.584273,2.181927,4.190945,-1.058358,-5.594737,-8.774325,-0.723539,-3.587730,2.156487,1.175551,6.218350,-5.504954,8.054472,5.654875,-0.879259,2.934703,8.318201,-8.037824,-2.586040,1.016385,-8.972664,-8.039212,-8.987514,-8.763597,-5.921095,-4.376530,-9.978362,6.443796,9.989570,-9.319082,6.454295,9.365957,-2.036055,8.082256,-8.860398,9.642685,-1.883648,-5.626664,4.966182,-6.717614,-5.170073,0.059383,-6.687582,-9.020224,4.765657,0.274027,-3.254305,6.381972,0.186541,-8.604049,1.776187,-5.847798,6.720853,8.685218,2.854094,-7.443247,-4.148788,6.152667,8.537466,-5.452501,-2.410658,2.663887,-2.630770,1.838064,4.240178,-5.698780,-3.907089,5.083261,7.913969,-6.404467,-9.578792,-3.038075,-8.421688,1.959562,8.193744,-5.674433,-9.173025,8.755967,7.330276,-2.031797,-5.261321,9.659042,1.072534,-6.302847,5.866187,4.403090,1.646416,-2.752967,0.404911,3.427581,-3.624417,-3.361977,4.986131,7.516278,6.633409,-2.120927,-6.796660,-2.113929,-9.794130,-0.553632,0.571803,2.924641,7.934635,-4.260309,-1.950040,-0.346324,9.609067,9.433877,-8.847417,7.146811,-2.141718,0.461257,-8.894065,-3.095267,-1.057745,-1.416019,-7.663084,-4.082793,-1.588546,3.998245,9.223807,7.862767,-3.724296,1.509603,3.033149,-6.149132,-1.188272,5.596389,0.524291,2.585956,-7.296229,3.625443,-7.052607,6.125017,-4.090013,6.465591,-2.665430,2.742766,5.814794,0.492240,6.608878,-4.162505,9.068459,-9.980511,9.227829,-6.773431,-3.266995,-7.196094,6.893924,6.322452,-4.725997,1.880494,8.619649,-7.168975,-8.348111,7.651265,6.333998,5.655634,2.637240,-7.502802,-5.210107,2.517211,-5.304715,1.431667,7.553975,-6.964448,4.670578,-8.342344,-2.671812,9.692410,-5.070856,-5.385851,-6.665893,-2.730824,-5.662344,-5.653463,0.655864,3.452188,4.688632,3.797956,0.530041,7.171020,-0.583946,3.860906,-2.872686,9.874709,0.099924,-2.286952,1.028109,-3.952371,6.637639,-6.586294,-2.216978,2.653904,-7.477519,-8.294352,-4.101602,-3.318707,9.967715,4.527372,-6.700605,-2.372682,-1.199187,0.390993,1.059491,0.240090,-4.098976,3.836925,5.774224,3.039093,4.450977,1.567977,1.628287,-3.245555,5.130596,-6.870067,-2.938553,-6.632064,2.167325,3.096194,1.842054,-3.782778,-4.988963,-9.960291,-6.442212,-8.144569,5.521063,3.059393,9.743194,1.017014,0.331968,9.922037,-0.675954,-3.937615,5.819020,-9.614359,5.791731,2.485100,-2.131949,1.459932,5.684645,-0.535450,-1.724724,4.700872,-8.984013,-8.483244,-1.256558,6.083471,4.562382,-2.332064,2.731843,5.539900,9.258768,6.583766,-7.073009,-9.508748,-5.032968,-3.479408,-2.312045,-2.331361,-7.289203,-0.415852,-3.493804,1.508797,-8.779390,9.380338,-3.128987,-5.606826,9.042667,2.710992,-9.135171,2.692255,6.787718,7.102359,8.101855,-7.689069,1.697659,-8.380391,-1.673367,5.074713,0.419771,0.754239,-8.682565,-2.720493,6.108110,5.034614,2.122276,-3.915783,9.900004,5.738389,6.313448,-5.173273,-8.261489,2.364276,8.602396,6.996775,1.323983,-9.910759,-3.718825,9.591393,5.535656,-0.021843,1.749025,6.037712,-4.887748,6.899108,-0.033588,-2.546826,-1.103028,6.266255,2.756157,-0.434180,5.513377,-7.213648,1.612506,2.596005,-5.963249,-4.988246,-8.181647,-4.361356,-5.911461,1.043611,-6.359912,5.638971,0.878432,-1.184719,-0.592372,1.736970,3.727592,2.608880,4.420468,5.659554,-0.581650,4.250465,0.881277,-7.659554,9.770592,-6.640827,1.702927,-4.015417,4.967000,5.080527,0.808454,0.682527,-3.270362,-8.638485,-1.879131,-5.116938,3.995642,5.530971,2.161496,-2.450808,0.679677,-0.609821,-0.323741,3.334972,1.468293,5.302087,8.042286,-4.073090,-7.227023,9.388443,-0.318363,3.735411,7.478791,8.754724,-0.525367,2.165142,-8.066661,6.916142,-4.641599,-1.693677,0.278623,6.847063,0.650703,2.838591,-3.337381,-1.880913,-1.510111,-9.776268,-5.320291,-9.924599,0.838528,8.165104,-8.813559,-0.561242,7.471506,-1.053148,1.101664,-0.110783,1.080444,-4.908712,-5.182895,1.827949,-0.100965,3.288216,6.906102,-6.121624,0.794511,-9.443125,-3.038860,6.387878,-8.273560,-6.333745,5.904324,-6.357218,-8.953057,-9.182796,1.752289,3.138399,3.732317,-1.933963,6.757054,7.738228,-5.972375,-6.249439,-0.431375,9.251949,5.658989,-1.579814,-5.654088,-6.953194,5.639016,5.178797,-1.613738,9.667209,9.193386,-8.034937,-7.376546,-2.510169,2.655413,6.164608,-5.113520,-8.698957,-2.724430,-5.461814,1.760224,-8.405581,0.093551,9.348716,-4.580537,5.622050,8.745251,-6.223880,2.405800,-5.925521,2.874280,-1.180836,-4.698776,-3.284477,-6.807218,7.998747,8.112108,-5.282139,-3.183755,-1.080865,-5.109643,-9.329610,3.015331,5.785836,4.563949,8.609333,3.606841,-6.151635,8.469373,7.821998,4.398448,6.430015,-1.671902,2.911197,-0.504518,3.053330,2.784876,-2.909846,4.457057,9.828544,3.596899,9.325620,3.714772,9.018330,-3.930717,-9.023390,3.031542,-8.698516,1.401071,-6.135918,7.338261,0.844910,-8.207882,6.570280,7.722282,-4.094714,-8.883017,-9.345672,-6.744760,-3.696064,-8.645568,-1.985916,-3.029159,8.831754,2.005115,4.444488,2.667980,8.680203,-8.570350,1.568068,-8.921973,9.103766,-2.108192,-5.060346,0.664489,4.674059,8.272291,8.605260,0.274391,6.618172,3.283989,8.216250,5.232254,-8.595587,-7.201146,-2.798657,3.372547,8.132461,5.015481,-3.110506,-8.482065,-5.523174,-6.031595,3.489089,-3.835178,-1.941985,-6.158207,-4.220842,-2.191229,1.453614,3.202360,0.844929,8.520560,-4.102917,-6.538820,6.638974,-7.508615,-7.016790,-3.853172,-5.325484,7.767635,-2.298717,6.915774,0.187294,0.123332,-3.006424,-8.703554,2.537799,-6.686516,-1.598641,6.320655,1.132007,8.632592,-3.214983,7.511952,-2.438507,2.170262,-5.026988,-8.179245,-6.308941,9.843255,-0.801399,6.638060,8.504589,2.579674,-4.115451,-0.535816,-9.947890,-1.288489,3.745630,-6.460101,-5.802547,-6.519670,-7.959027,-8.629711,-1.276707,1.662176,-1.611716,-7.590801,-8.534342,2.313202,-6.980121,-2.816971,-0.427419,7.803968,-8.361132,3.972614,2.783744,-2.344877,-5.506072], dtype = "float32")#candidate|4297|(2080,)|const|float32
call_4296 = relay.TupleGetItem(func_4252_call(relay.reshape(const_4297.astype('float32'), [16, 10, 13])), 0)
call_4298 = relay.TupleGetItem(func_4255_call(relay.reshape(const_4297.astype('float32'), [16, 10, 13])), 0)
output = relay.Tuple([call_4278,call_4286,var_4287,const_4288,call_4296,const_4297,])
output2 = relay.Tuple([call_4279,call_4289,var_4287,const_4288,call_4298,const_4297,])
func_4299 = relay.Function([var_4287,], output)
mod['func_4299'] = func_4299
mod = relay.transform.InferType()(mod)
var_4300 = relay.var("var_4300", dtype = "float64", shape = (216,))#candidate|4300|(216,)|var|float64
output = func_4299(var_4300)
func_4301 = relay.Function([var_4300], output)
mutated_mod['func_4301'] = func_4301
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3907_call = mod.get_global_var('func_3907')
func_3908_call = mutated_mod.get_global_var('func_3908')
call_4344 = relay.TupleGetItem(func_3907_call(), 0)
call_4345 = relay.TupleGetItem(func_3908_call(), 0)
func_2315_call = mod.get_global_var('func_2315')
func_2318_call = mutated_mod.get_global_var('func_2318')
call_4350 = relay.TupleGetItem(func_2315_call(relay.reshape(call_4344.astype('uint64'), [15, 5, 9])), 0)
call_4351 = relay.TupleGetItem(func_2318_call(relay.reshape(call_4344.astype('uint64'), [15, 5, 9])), 0)
func_1658_call = mod.get_global_var('func_1658')
func_1660_call = mutated_mod.get_global_var('func_1660')
call_4373 = func_1658_call()
call_4374 = func_1658_call()
func_3127_call = mod.get_global_var('func_3127')
func_3129_call = mutated_mod.get_global_var('func_3129')
call_4388 = relay.TupleGetItem(func_3127_call(), 0)
call_4389 = relay.TupleGetItem(func_3129_call(), 0)
uop_4394 = relay.log10(call_4350.astype('float64')) # shape=(15, 5, 9)
uop_4396 = relay.log10(call_4351.astype('float64')) # shape=(15, 5, 9)
func_4193_call = mod.get_global_var('func_4193')
func_4195_call = mutated_mod.get_global_var('func_4195')
const_4416 = relay.const([3,-1,8,-1,3,9,-8,1,10,-1,-8,10,3,5,6,-5,2,3,9,-8,-8,10,-8,7,8,6,6,-1,-6,10,-2,10,9,4,7,-10,-7,-4,-1,4,-6,5,-6,4,1,-5,7,7,-9,5,2,-3,-6,-5,8,8,10,8,10,-10,-6,-5,2,-10,-2,-9,2,5,-10,7,-8,10,8,7,-1,-10,4,7,-9,9,2,8,-1,-4,-1,-7,-5,10,6,-3,6,2,-1,8,-8,1,-4,-5,-2,-5,9,-6,8,10,-5,3,-6,-5,-5,-7,9,-4,9,-7,-8,5,-4,-2,9,10,-4,-7,-7,-9,5,-7,6,-9,-1,-5,1,-6,3,9,1,7,-2,8,-7,4,-5,-8,2,-5,4,-2,9,1,-8,-3,-10,8,5,3,-5,5,8,10,-3,-3,-4,-3,4,7,4,5,-10,-8,-1,10,10,7,-1,9,1,-10,-8,-9,6,-6,-6,6,6,-3,-7,-2,-10,-8,-5,2,1,-2,-4,-3,5,-1,-2,8,-1,4,6,8,6,-5,-2,-8,9,-4,-1,3,8,-6,9,8,-7,-1,-10,-6,-4,7,10,-1,-5,1,-1,1,-6,-2,3,8,-4,-10,7,-1,9,-9,5,-7,4,-8,2,-4,6,-5,8,8,2,6,-4,-10,-7,1,6,2,-3,5,-10,4,-7,-7,-2,-6,-3,-4,3,9,3,-2,5,1,6,5,-6,-4,-8,7,5,6,10,-4,-4,-3,-10,-5,10,-5,1,4,9,-10,10,8,-5,-5,2,7,2,-2,4,-1,3,-3,-6,-10,7,-1,-9,4,3,6,1,-3,3,9,-3,4,-6,10,5,6,-2,-1,-6,-5,-8,-6,4,4,-5,9,-5,5,1,5,7,-10,-8,2,-5,3,-7,2,8,-1,3,2,2,-1,-5,8,8,3,-8,10,-1,9,-3,9,1,6,-9,-3,-10,-5,1,-8,-3,4,7,7,8,4,-8,-3,-3,2,1,-5,10,-5,3,-9,-6,6,-9,-1,-8,8,-8,-7,-4,-2,-6,6,-5,6,-4,-2,10,-4,-2,7,10,8,-10,8,5,9,-7,7,3,9,10,8,1,2,6,5,-7,-3,-9,-9,1,8,-2,-9,10,-4,1,-4,-5,8,-6,-9,-10,-9,5,5,-5,-3,10,4,2,-2,-2,-7,-3,-10,10,1,6,-10,8,-7,10,2,4,10,5,-10,8,-4,10,1,5,-1,4,2,-7,-6,10,7,-5,-1,10,-7,-7,-1,-5,1,6,1,-1,3,3,-7,9,-9,10,7,1,10,5,7,8,9,9,-6,-4,-10,-8,10,-10,2,-8,2,2,-9,5,-6,5,-7,-7,5,-1,10,2,7,-10,-4,9,-2,-7,-8,7,5,9,-6,-6,2,8,9,4,3,-4,-6,2,3,-9,2,-3,9,9,-2,8,4,-6,9,-8,5,9,6,9,1,-10,-3,-7,9,-10,5,-3,-6,-2,8,-9,-4,2,2,-9,9,-3,4,-5,-10,-2,-4,3,-3,-7,5,-3,6,8,7,10,-9,-8,-5,-8,1,9,6,-5,7,1,10,2,1,4,9,6,7,3,-9,8,-2,5,-8,-8,-4,8,2,2,10,-3,-9,9,3,9,-2,3,-3,3,-1,-8,-9,-1,-6,6,10,-7,6,-5,7,-2,1,4,-4,-5,7,1,10,8,-6,6,-4,5,8,-1,-5,5,-8,10,-5,8,10,7,-1,8,1,-3,4,9,7,-8,-4,-8,1,6,-7,-9,4,-7,-2,4,8,2,-5,-5,-2,-5,-5,9,-5,5,1,-8,-1,-2,9,-8,-3,-10,-3,3,7,2,-4,-1,7,-2,-9,1,-5,-5,-9,3,5,-4,-8,4,4,-9,-8,-9,8,1,-10,-7,7,1,-7,2,10,2,3,-3,-3,-5,-5,-4,-4,10,1,-2,1,6,10,10,4,-7,-8,-3,-5,2,5,-4,-2,4,4,-2,9,-3,-6,10,4,8,-8,-5,-9,4,2,4,2,5,-6,-1,5,-6,8,2,1,-8,-8,3,-9,-3,7,-2,7,-7,4,-8,3,-9,-9,-6,10,-1,-6,-10,-5,5,10,1,7,-10,5,2,-1,-10,4,1,10,4,10,1,7,-5,5,6,-3,3,-4,7,-5,-8,-3,-3,-2,-10,-1,6,-9,4,-9,6,-9,-10,-5,10,4,-1,6,-3,-2,-1,-6,-8,-9,10,5,10,6,-6,-6,3,2,-8,-7,-7,2,10,4,-4,4,-1,-2,4,-10,1,7,-6,7,9,3,-4,3,-4,4,2,-3,-9,-5,-5,3,10,1,1,8,-5,-6,-7,-3,-8,10,-6,-2,-8,-10,-1,-2,-7,7,-2,-9,-7,3,6,4,4,-1,-6,9,-9,10,4,-10,-4,8,-1,2,4,1,-5,1,10,-2,-6,-4,-10,4,6,-4,1,8,-8,10,-10,-1,8,4,5,-8,-5,-5,-9,-8,5,7,3,-7,-10,5,10,4,-8,-7,4,-4,-10,-5,-2,-3,-4,-6,-10,2,-2,9,-4,9,5,7,-3,-10,3,-9,-10,-5,-5,-3,-4,4,-3,7,9,-1,3,-6,10,7,-3,10,1,8,-6,10,8,-5,10,-10,7,-5,-1,7,7,7,-10,-3,-4,-6,4,10,3,-4,-9,-4,-6,-9,10,-10,-9,6,6,2,-10,2,-8,3,10,-6,2,5,9,-6,-7,-7,-3,-10,10,-1,-2,-2,7,-2,5,-4,-8,-6,3,7,8,8,6,-2,-10,7,-8,-10,6,-2,10,9,-6,-6,-7,-9,-6,8,-5,-8,-5,-6,-6,8,8,5,7,-7,-9,2,-5,-2,-9,3,-9,8,-8,9,-3,-5,8,-1,4,-9,-1,10,1,-7,10,-4,-2,5,9,3,-10,4,-8,2,-5,4,2,-9,4,1,7,5,10,-1,-3,-10,3,-10,1,1,-2,9,9,-7,6,-8,-5,-2,2,-3,-8,-7,-7,9,8,-3,7,6,-1,-10,5,10,3,-5,7,-10,-1,5,-4,7,8,-6,-1,2,7,1,-10,-2,-4,7,-2,-6,6,2,-8,3,8,-1,-2,-3,5,-1,-4,7,9,-9,3,-6,1,-10,-7,-6,-4,6,-2,-7,2,3,2,-5,-5,1,-4,-8,5,3,-3,-8,8,5,2,6,-1,-1,-10,-3,1,-3,-1,9,1,1,-2,2,-1,-1,-8,-9,7,-1,6,-10,-8,-1,7,6,-1,1,5,5,-10,-1,5,-7,-9,7], dtype = "int64")#candidate|4416|(1232,)|const|int64
call_4415 = relay.TupleGetItem(func_4193_call(relay.reshape(const_4416.astype('int64'), [4, 308])), 2)
call_4417 = relay.TupleGetItem(func_4195_call(relay.reshape(const_4416.astype('int64'), [4, 308])), 2)
output = relay.Tuple([call_4344,call_4373,call_4388,uop_4394,call_4415,const_4416,])
output2 = relay.Tuple([call_4345,call_4374,call_4389,uop_4396,call_4417,const_4416,])
func_4418 = relay.Function([], output)
mod['func_4418'] = func_4418
mod = relay.transform.InferType()(mod)
output = func_4418()
func_4419 = relay.Function([], output)
mutated_mod['func_4419'] = func_4419
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4439 = relay.var("var_4439", dtype = "uint64", shape = ())#candidate|4439|()|var|uint64
var_4440 = relay.var("var_4440", dtype = "uint64", shape = (5, 13, 13))#candidate|4440|(5, 13, 13)|var|uint64
bop_4441 = relay.logical_xor(var_4439.astype('uint64'), var_4440.astype('uint64')) # shape=(5, 13, 13)
func_2240_call = mod.get_global_var('func_2240')
func_2242_call = mutated_mod.get_global_var('func_2242')
call_4444 = func_2240_call()
call_4445 = func_2240_call()
func_573_call = mod.get_global_var('func_573')
func_576_call = mutated_mod.get_global_var('func_576')
var_4448 = relay.var("var_4448", dtype = "float64", shape = (420,))#candidate|4448|(420,)|var|float64
var_4449 = relay.var("var_4449", dtype = "bool", shape = (140, 16))#candidate|4449|(140, 16)|var|bool
call_4447 = relay.TupleGetItem(func_573_call(relay.reshape(var_4448.astype('float64'), [7, 10, 6]), relay.reshape(var_4449.astype('bool'), [2240,]), ), 3)
call_4450 = relay.TupleGetItem(func_576_call(relay.reshape(var_4448.astype('float64'), [7, 10, 6]), relay.reshape(var_4449.astype('bool'), [2240,]), ), 3)
uop_4451 = relay.erf(var_4449.astype('float64')) # shape=(140, 16)
output = relay.Tuple([bop_4441,call_4444,call_4447,var_4448,uop_4451,])
output2 = relay.Tuple([bop_4441,call_4445,call_4450,var_4448,uop_4451,])
func_4453 = relay.Function([var_4439,var_4440,var_4448,var_4449,], output)
mod['func_4453'] = func_4453
mod = relay.transform.InferType()(mod)
mutated_mod['func_4453'] = func_4453
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4453_call = mutated_mod.get_global_var('func_4453')
var_4455 = relay.var("var_4455", dtype = "uint64", shape = ())#candidate|4455|()|var|uint64
var_4456 = relay.var("var_4456", dtype = "uint64", shape = (5, 13, 13))#candidate|4456|(5, 13, 13)|var|uint64
var_4457 = relay.var("var_4457", dtype = "float64", shape = (420,))#candidate|4457|(420,)|var|float64
var_4458 = relay.var("var_4458", dtype = "bool", shape = (140, 16))#candidate|4458|(140, 16)|var|bool
call_4454 = func_4453_call(var_4455,var_4456,var_4457,var_4458,)
output = call_4454
func_4459 = relay.Function([var_4455,var_4456,var_4457,var_4458,], output)
mutated_mod['func_4459'] = func_4459
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3063_call = mod.get_global_var('func_3063')
func_3065_call = mutated_mod.get_global_var('func_3065')
call_4470 = relay.TupleGetItem(func_3063_call(), 0)
call_4471 = relay.TupleGetItem(func_3065_call(), 0)
func_4453_call = mod.get_global_var('func_4453')
func_4459_call = mutated_mod.get_global_var('func_4459')
var_4494 = relay.var("var_4494", dtype = "uint64", shape = ())#candidate|4494|()|var|uint64
var_4495 = relay.var("var_4495", dtype = "uint64", shape = (845,))#candidate|4495|(845,)|var|uint64
const_4496 = relay.const([[-8.931242,8.281469,-7.262558,-1.336766,-5.009669,3.255213,-9.431151,-9.818552,7.506111,-4.327146,5.330452,-0.383432,8.226510,5.216520,3.758751,-2.129674,-7.668796,-6.440386,1.051519,-7.035807,-2.762881,6.866851,4.414509,8.722508,7.755434,-4.134014,-9.042174,-9.677998,-4.079273,-3.006654,-7.745028,-4.476951,-2.072037,2.732723,4.639380,3.655594,7.824606,-9.951001,-4.490740,8.828342,7.337280,-8.867058],[-7.423109,-8.279797,0.144381,3.071832,1.544381,-2.363865,-1.735429,-0.388961,-1.216949,5.555226,-3.942447,-6.148007,6.299473,-6.376265,-6.371524,3.196542,6.139380,9.014257,-6.116878,2.346245,-7.959314,3.323061,3.774535,-4.672978,2.917200,-9.441194,-1.625658,-0.288196,-8.738487,-1.571371,8.513981,-2.601497,5.482716,5.574388,-0.561995,-4.801674,1.343456,9.161954,0.982966,-0.212172,8.506043,-7.819291],[4.890098,-7.246572,9.588335,-1.967185,-6.027854,5.256887,8.811980,2.101776,2.222937,-6.265051,4.307911,-5.407430,-2.626416,2.787959,3.598607,6.524594,-5.754988,-8.707018,-7.602671,-1.364919,4.823389,1.605099,5.550972,-5.471138,-7.119527,0.847871,-8.635218,-5.294371,-4.755219,2.994431,4.398857,-1.898710,-2.321871,6.419976,-5.429165,9.488746,0.038772,-9.236572,4.643209,-8.753280,9.984675,1.493057],[0.163621,-4.512596,6.770626,2.202743,-8.461357,-8.621854,-5.094998,-3.957058,9.014614,7.262504,-2.053732,1.715387,-4.244699,8.272441,7.041096,-2.626536,-0.861941,-3.528590,-8.840708,-6.760835,-4.568630,3.517627,-8.276562,0.175508,7.316431,-2.325552,-9.093735,6.112271,7.223601,-7.984669,4.056929,1.960526,-5.172320,2.743164,0.167198,3.325562,-7.974842,5.235860,-1.361963,-3.780690,9.161352,9.636149],[2.606342,-9.676958,4.497247,7.812822,1.487008,-5.973880,8.414352,-2.144994,1.733680,-4.344295,-1.723407,-0.788357,-5.278737,-2.136968,-6.013492,1.393697,-7.925115,-9.559036,-2.184112,-8.886474,0.651690,6.240185,-5.118219,0.957520,-3.305911,1.704172,2.607782,6.970278,3.755668,3.101849,-6.157700,3.367988,2.716787,-0.311894,7.880818,4.309105,-7.035394,8.324848,1.056696,-2.264041,-3.238051,-0.834763],[-4.521895,3.590472,-3.296129,1.213988,0.203059,1.420233,-5.797624,1.718265,6.514522,-4.605028,9.652387,-2.472400,2.631335,-6.338753,3.222048,5.650624,4.843013,9.192198,-2.428771,-0.701489,5.140784,-3.878360,7.938789,2.430032,-1.061109,-5.742894,-6.817357,-9.655204,-4.114136,5.961609,-4.409534,1.940575,-2.184574,6.533401,3.799748,-1.757482,8.560133,-8.635767,-2.025168,3.110590,-4.576595,9.163492],[8.920079,-9.307879,-9.675121,2.190338,-9.613110,-4.227319,4.874806,5.053368,5.862813,1.694943,-6.112233,-0.972343,0.537331,-0.882526,8.809020,-6.524648,0.644934,-8.202137,5.276640,-5.697432,-6.083213,-7.797795,-3.181564,-5.925613,8.313904,1.989195,-8.493341,2.800635,8.461484,7.970266,0.331652,0.085906,-0.118521,-2.118945,2.985407,7.957844,-6.828005,3.192672,-5.998567,-5.707512,8.701860,5.075637],[4.171799,-8.505146,-2.216897,-3.911977,0.687413,8.121261,4.568173,2.948279,-3.859498,4.910707,-3.826977,-5.261710,-4.862952,8.917280,-4.291013,5.492950,0.730386,-4.321098,0.508418,7.467774,1.762527,-9.712089,-0.025551,7.487706,8.455103,0.389423,-9.119398,-3.363161,7.851117,-5.042561,-7.439180,4.111961,2.808475,-2.540141,-1.061931,-7.713292,-0.252968,3.883262,-0.988959,5.050215,4.101797,-2.136590],[-1.346417,-9.150378,-6.074841,9.521834,3.171091,-5.905308,8.063151,2.648857,-7.385878,3.767219,3.124713,7.161158,0.035643,2.918466,-1.746586,-8.880226,-1.240035,-5.336297,-3.179670,3.637662,-0.471589,-3.975860,-5.920373,-6.451476,6.552882,8.021103,-3.699734,4.609494,-2.655901,-1.485323,-8.128563,3.646362,6.670117,8.720376,-3.085400,6.653455,-2.837827,-6.053721,-5.771444,3.648487,-1.046288,-5.346124],[9.119815,-5.508225,-4.803971,-4.985660,-8.508039,1.468551,5.251178,5.584291,3.402253,3.602169,-8.780022,8.413953,-8.077344,5.009718,5.111970,9.930062,3.940633,-2.450128,-3.381363,-0.548314,1.232857,-5.774320,-5.806857,-2.189583,8.529943,6.558794,8.922880,-2.050421,7.587298,-1.539024,6.671822,6.412073,6.141120,-5.739518,3.161783,-3.433290,-5.195841,0.308812,-1.288849,-9.651618,6.395791,-0.062076]], dtype = "float64")#candidate|4496|(10, 42)|const|float64
var_4497 = relay.var("var_4497", dtype = "bool", shape = (560, 4))#candidate|4497|(560, 4)|var|bool
call_4493 = relay.TupleGetItem(func_4453_call(relay.reshape(var_4494.astype('uint64'), []), relay.reshape(var_4495.astype('uint64'), [5, 13, 13]), relay.reshape(const_4496.astype('float64'), [420,]), relay.reshape(var_4497.astype('bool'), [140, 16]), ), 3)
call_4498 = relay.TupleGetItem(func_4459_call(relay.reshape(var_4494.astype('uint64'), []), relay.reshape(var_4495.astype('uint64'), [5, 13, 13]), relay.reshape(const_4496.astype('float64'), [420,]), relay.reshape(var_4497.astype('bool'), [140, 16]), ), 3)
output = relay.Tuple([call_4470,call_4493,var_4494,var_4495,const_4496,var_4497,])
output2 = relay.Tuple([call_4471,call_4498,var_4494,var_4495,const_4496,var_4497,])
func_4501 = relay.Function([var_4494,var_4495,var_4497,], output)
mod['func_4501'] = func_4501
mod = relay.transform.InferType()(mod)
var_4502 = relay.var("var_4502", dtype = "uint64", shape = ())#candidate|4502|()|var|uint64
var_4503 = relay.var("var_4503", dtype = "uint64", shape = (845,))#candidate|4503|(845,)|var|uint64
var_4504 = relay.var("var_4504", dtype = "bool", shape = (560, 4))#candidate|4504|(560, 4)|var|bool
output = func_4501(var_4502,var_4503,var_4504,)
func_4505 = relay.Function([var_4502,var_4503,var_4504,], output)
mutated_mod['func_4505'] = func_4505
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3828_call = mod.get_global_var('func_3828')
func_3829_call = mutated_mod.get_global_var('func_3829')
call_4545 = relay.TupleGetItem(func_3828_call(), 0)
call_4546 = relay.TupleGetItem(func_3829_call(), 0)
func_1787_call = mod.get_global_var('func_1787')
func_1789_call = mutated_mod.get_global_var('func_1789')
call_4552 = relay.TupleGetItem(func_1787_call(), 0)
call_4553 = relay.TupleGetItem(func_1789_call(), 0)
func_2850_call = mod.get_global_var('func_2850')
func_2851_call = mutated_mod.get_global_var('func_2851')
call_4556 = relay.TupleGetItem(func_2850_call(), 1)
call_4557 = relay.TupleGetItem(func_2851_call(), 1)
func_3277_call = mod.get_global_var('func_3277')
func_3279_call = mutated_mod.get_global_var('func_3279')
call_4561 = func_3277_call()
call_4562 = func_3277_call()
uop_4566 = relay.sinh(call_4545.astype('float64')) # shape=(15, 5, 9)
uop_4568 = relay.sinh(call_4546.astype('float64')) # shape=(15, 5, 9)
func_3945_call = mod.get_global_var('func_3945')
func_3947_call = mutated_mod.get_global_var('func_3947')
call_4577 = relay.TupleGetItem(func_3945_call(), 0)
call_4578 = relay.TupleGetItem(func_3947_call(), 0)
uop_4583 = relay.asin(call_4577.astype('float64')) # shape=(10, 2, 5)
uop_4585 = relay.asin(call_4578.astype('float64')) # shape=(10, 2, 5)
func_2433_call = mod.get_global_var('func_2433')
func_2439_call = mutated_mod.get_global_var('func_2439')
const_4611 = relay.const([-6.815789,-4.477723,2.858819,1.492337,3.700019,-7.868456,-9.909923,1.813913,4.392661,-3.808437,9.471858,1.038716,5.720341,-6.152576,-3.122800,4.888095,-8.873741,1.243565,8.872824,4.419806,-9.538806,-5.626596,-6.718557,2.598200,4.008130,-1.697464,5.335046,-0.171169,9.795428,3.986902,-9.855933,7.790514,-8.685205,-2.625350,8.921847,-9.756576,6.029555,-0.988343,-9.651157,-9.606150,8.737842,-2.623528,-5.927924,-9.637214,-5.151898,6.548017,-4.618920,2.138061,2.152625,-0.865061,-1.479016,-7.049641,-2.897097,5.980682,-6.482082,-7.962104,-8.368858,-6.979102,0.737986,3.122837,-2.591748,-5.147708,3.321447,0.156429,-5.816099,2.232665,-3.298423,-2.246404,-8.049078,-0.416850,0.054824,8.396893,9.330157,-6.732474,-9.840804,-6.447464,-1.251977,0.487809,5.915071,-8.447054,9.761733,-4.710949,-8.746062,-8.062816,-6.013496,5.287714,3.157154,4.388175,2.799247,0.736836,3.497909,-1.933647,-6.395701,2.007483,5.995480,5.881683,9.237697,-2.840796,1.011129,3.828869,6.241802,9.039479,8.491897,-0.301179,3.124365,-1.167905,9.180819,-4.682282,-3.933160,0.860878,-5.290299,-3.020119,-2.878636,5.890458,3.105604,5.458762,9.719712,7.105895,-1.131240,4.217484,2.355508,-8.431986,3.448765,9.153891,0.768501,2.284849,6.517903,5.285674,-3.955141,6.840904,6.409735,4.253125,-7.243692,4.771497,-6.509458,-2.735218,-2.607461,-8.426828,1.464502,-9.720068,8.135671,-2.893229,0.476768,-2.491773,-2.432628,-8.153634,5.252525,0.357960,-0.875489,-7.758536,2.356291,0.039371,6.593641,8.836212,5.327295,4.354250,7.747096,8.203068,-9.036391,4.653605,-0.049058,-8.610260,0.070942,0.156697,9.896090,-9.618657,-3.630673,-0.463994,0.648566,-9.893124,8.715540,5.873701,-3.176742,-0.905006,6.283060,6.362707,5.347733,0.811438,8.672486,-3.088512,-2.591895,-7.287913,-3.809191,-2.565131,-6.123300,-5.587873,8.947093,7.691673,1.414556,-3.853465,3.696957,-1.144177,7.866177,2.464729,-9.667624,2.939021,-4.427424,9.478926,9.116249,-6.933008,-0.299035,0.913561,6.734264,2.273523,-6.562119,1.267203,-2.170055,-5.124705,7.958079,-5.890412,-8.664910,-4.236599,0.984606,5.380486,5.872619,4.535767,0.970025,3.381877,7.289354,1.510852,-8.829579,2.140471,-5.036400,8.473777,7.625211,5.594930,1.374419,-6.895206,8.656492,3.833710,4.813974,-4.324502,-3.596607,1.019045,3.070127,1.305868,5.370732,-4.117137,0.636561,2.787815,9.504399,-4.842672,-3.150667,-0.091847,-6.041987,6.042340,-6.055402,-2.198441,5.385995,-8.576128,-3.159070,0.816517,-2.478447,1.911838,8.381228,-1.253843,1.674320,3.478663,7.572329,1.109981,-9.947278,3.220469,3.408984,5.714392,-3.370500,7.687622,9.210331,-9.754201,-6.860296,1.216007,8.138889,-5.490996,-6.811229,-8.516660,5.860361,-6.953989,-8.928868,-0.318095,2.793353,5.599679,5.185732,8.292911,3.934891,-2.128189,0.255473,3.904474,7.095630,-0.354686,1.663068,9.345885,-9.599806,-6.389710,-4.247010,-4.122395,-6.602643,1.751755,-0.729733,7.795637,-9.445914,8.811599,3.599365,-3.998965,9.343023,7.605422,-6.059550,4.601673,-4.085235,0.400271,1.796821,-3.634921,4.044463,7.461520,-5.699019,8.119871,8.264111,2.643718,3.850206,1.370807,-1.384961,-6.404020,-6.429322,6.706155,9.160415,7.691048,8.389281,3.615972,1.202133,-5.835355,7.931227,-0.941090,0.451141,0.769872,-6.643860,8.043497,9.112538,9.531838,7.651666,-0.786353,0.638476,4.517203,-9.597032,-2.241367,-6.351164,4.536114,-9.198636,-9.581040,4.392010,0.947462,-5.623642,-4.243674,-0.434170,5.343531,7.619255,-3.073181,0.755680,5.681119,-9.100445,5.653564,-5.937022,-9.578036,7.822670,-9.556731,2.916948,-6.903962,-3.620249,5.033573,-0.917221,5.317897,1.787448,-5.205440,8.013643,-6.565345,2.102809,-6.620597,-7.464898,9.944860,5.021731,6.429858,7.094785,9.740924,-3.100389,-4.639865,5.591557,-0.236618,2.228025,-7.973691,-4.201725,6.485710,-3.389096,-8.901782,-0.157327,-4.881829,4.819277,-8.420607,6.338812,0.445490,5.348182,-0.665361,8.258075,3.298735,-9.211379,5.575016,-5.920039,-2.616485,7.831601,4.045485,-8.455513,7.442736,8.931403,-0.767271,1.168178,9.571909,1.164657,-0.276405,-9.727867,-1.319877,5.654411,-2.042982,-1.712006,-7.813166,8.690564,7.172183,-0.839908,8.624997,2.708739,-1.184999,2.988271,4.589175,-9.522387,1.321285,0.740174,4.802689,-1.347096,-1.927288,-5.599243,-5.905590,-3.963008,-1.243184,-9.675293,0.868452,3.619319,4.475012,1.695336,-3.581376,-8.718790,-3.515458,6.126596,-0.799383,0.506940,-8.384433,6.056664,1.176854,-8.755151,-4.267694,-7.934800,-2.700069,-0.638382,-5.174115,-1.458383,7.964286,3.887666,-1.109377,3.291469,-9.084517,9.544273,-4.867209,0.604320,8.410887,1.713592,-0.696998,6.294285,-0.262644,-0.627506,4.574938,4.864555,7.761571,-0.881616,4.844187,-0.414296,3.376788,-5.939032,3.034866,2.764405,9.493717,-9.100900,-0.328549,0.921491,4.503699,-4.490878,-6.464950,7.021085,-0.081337,-0.855656,7.919557,1.747654,-9.954021,0.816763,8.343181,-1.781660,6.750771,-8.254887,-5.915569,-6.990636,-9.272994,-4.163240,-0.580207,-3.837648,-2.742200,-7.030100,-1.871774,-0.333638,3.707682,-3.429175,-2.401079,-7.320600,4.978431,-8.489109,-1.729101,-6.113131,2.432852,5.295889,-3.060627,-6.834932,-2.581314,9.614728,-7.858954,-4.599085,5.722950,-6.576615,4.674560,7.610045,0.306471,0.926282,9.108440,-4.515356,-5.102683,-6.656107,-6.259013,1.123651,-7.651838,6.193998,-5.481870,-3.395678,-1.882576,-7.821659,8.753132,-8.682961,2.320233,-1.485258,2.421090,8.343784,5.454161,3.756418,-7.055028,-5.520628,2.356525,5.408429,6.045731,4.370220,-0.432816,-7.607192,9.972135,-7.282952,-0.666501,6.124678,-4.327070,6.512664,7.095428,1.899329,-7.990178,-3.069271,6.399358,6.110888,0.485053,-6.723572,-5.836046,-7.743051,8.635899,-8.764794,8.783042,-7.106024,-9.934706,1.660836,-6.274027,3.249943,7.259395,-9.523187,3.017381,7.787073,-1.866892,-1.463306,-6.170805,-0.961012,-4.412186,8.586155,8.041959,8.441807,-3.719977,9.817125,4.736525,7.562332,-0.841043,6.681227,5.579179,-0.217509,-6.410480,7.790077,9.000273,-9.449823,-6.750766,-0.950237,1.167507,-8.231479,-8.745493,-7.807229,-6.908305,-0.275675,3.926971,3.498090,9.276242,-1.973971,-2.182357,-6.639360,-1.599192,2.508827,3.336272,-4.893544,5.987605,-4.853979,-1.274582,0.824222,-2.597920,7.761581,8.664365,-2.036456,-9.958953,-6.772869,-2.480163,2.625797,-0.792711,-2.930324,-8.841462,-5.911685,9.508841,7.478042,-0.713717,-1.862220,4.237200,-1.960560,-7.988523,4.082924,-4.326597,-6.590128,-2.981336,1.389394,-4.660792,-5.309279,-9.653916,7.421904,4.547816,6.204248,7.557749,-0.926893,9.695556,-1.603340,-1.683442,-3.849112,2.818636,5.792384,-1.776401,-7.928241,-9.776278,6.222471,-6.983098,-5.856505,-9.777446,0.937229,-5.579971,-9.427524,-0.246932,2.183469,-6.541303,1.390405,-0.424882,7.722209,1.203057], dtype = "float64")#candidate|4611|(686,)|const|float64
const_4612 = relay.const([10,-2,-3,-3,-6,8,-5,-2,7,-6,-8,3,-4,7,3,-4,-8,-10,-1,-1,-1,-9,-9,-5,8,5,6,3,5,7,10,3,-8,-8,-7,-8,-7,-7,9,-7,3,-2,-8,-9,6,10,-7,-3,-9,-6,1,-7,10,-7,5,-7,-3,-9,5,-5,6,-9,10,8,5,8,-5,-4,-8,-5,6,3,-2,-4,2,9,5,-9,-4,-4,10,-4,-6,1,3,9,1,-1,-6,-1,4,-6,-10,2,1,-2,10,7,8,2,-7,3,4,-10,-8,-1,-1,-9,-2,-4,9,-6,-3,6,5,5,8,-10,9,-7,1,9,-4,2,1,1,-3,10,-3,9,4,-8,9,9,7,7,3,-9,-6,5,8,-1,6,-9,10,5,-2,-8,-2,-3,2,-7,7,4,-9,-5,8,10,-9,-2,-8,3,-1,-3,8,2,-7,5,-6,-9,9,-4,10,-10,4,8,-9,4,-3,-3,-4,-3,5,-2,8,-8,5,-5,-7,-4,8,-4,6,-7,4,2,-4,-8,-2,9,-4,-10,-2,-4,1,-1,3,-6,-1,7,-2,5,3,-6,-4,8,4,6,2,-5,9,2,1,-10,2,2,-8,1,-10,8,-1,-1,6,-3,7,-1,-5,-8,-2,3,-6,7,1,5,4,5,-2,4,-4,-6,6,7,4,-2,-4,10,7,1,-5,7,-10,7,-9,-1,10,5,-9,-9,-10,9,3,3,7,10,-2,3,1,5,-3,-4,6,-8,6,7,-10,1,4,-5,-9,4,2,-3,-7,5,-5,-2,-10,5,10,1,6,3,-5,-2,-5,-4,-4,-2,-5,3,-7,10,-7,-3,-5,-9,8,3,-2,8,3,-4,10,10,-4,5,9,-9,10,-5,10,-8,-8,2,5,-7,1,-5,-9,6,9,-7,7,-7,9,4,6,8,10,-3,-9,5,-4,-8,-9,-8,-6,-7,10,9,-5,-1,-4,6,10,-1,10,6,8,6,-10,6,-9,10,6,-9,4,-4,10,2,-1,-8,9,-4,-1,6,7,7,6,3,9,-5,-5,-9,10,4,4,-2,-7,-2,9,8,-4,1,-4,-4,-8,4,-7,-8,-4,-10,-6,1,-1,10,5,-7,6,-8,4,-5,-10,-8,4,6,10,-6,8,-10,4,-8,-1,-7,5,-9,-9,1,-5,-10,5,-9,-2,3,-4,-1,-4,-7,-6,-4,-4,-7,-9,-4,-7,5,10,9,9,-6,-5,-1,-5,-6,3,-1,-4,9,7,10,-8,8,-9,4,8,-10,4,-2,10,-2,-7,-9,1,4,1,-4,9,1,-10,5,-4,3,-6,10,2,-8,-3,1,5,4,9,9,3,-5,4,2,-5,-9,-9,-7,-9,1,-2,-7,-8,-2,-10,-3,10,5,8,-5,10,3,1,10,3,-3,6,1,-1,-8,-4,2,-1,-2,-4,-1,9,4,2,-1,9,-9,3,6], dtype = "int32")#candidate|4612|(546,)|const|int32
var_4613 = relay.var("var_4613", dtype = "float64", shape = (210, 3))#candidate|4613|(210, 3)|var|float64
const_4614 = relay.const([True,True,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False], dtype = "bool")#candidate|4614|(2240,)|const|bool
call_4610 = relay.TupleGetItem(func_2433_call(relay.reshape(const_4611.astype('float64'), [7, 7, 14]), relay.reshape(const_4611.astype('float64'), [7, 7, 14]), relay.reshape(const_4612.astype('int32'), [546,]), relay.reshape(var_4613.astype('float64'), [630,]), relay.reshape(const_4614.astype('bool'), [2240,]), ), 3)
call_4615 = relay.TupleGetItem(func_2439_call(relay.reshape(const_4611.astype('float64'), [7, 7, 14]), relay.reshape(const_4611.astype('float64'), [7, 7, 14]), relay.reshape(const_4612.astype('int32'), [546,]), relay.reshape(var_4613.astype('float64'), [630,]), relay.reshape(const_4614.astype('bool'), [2240,]), ), 3)
func_3127_call = mod.get_global_var('func_3127')
func_3129_call = mutated_mod.get_global_var('func_3129')
call_4618 = relay.TupleGetItem(func_3127_call(), 0)
call_4619 = relay.TupleGetItem(func_3129_call(), 0)
func_1909_call = mod.get_global_var('func_1909')
func_1912_call = mutated_mod.get_global_var('func_1912')
call_4626 = func_1909_call(relay.reshape(call_4618.astype('uint64'), [15, 5, 9]))
call_4627 = func_1909_call(relay.reshape(call_4618.astype('uint64'), [15, 5, 9]))
output = relay.Tuple([call_4552,call_4556,call_4561,uop_4566,uop_4583,call_4610,const_4611,const_4612,var_4613,const_4614,call_4618,call_4626,])
output2 = relay.Tuple([call_4553,call_4557,call_4562,uop_4568,uop_4585,call_4615,const_4611,const_4612,var_4613,const_4614,call_4619,call_4627,])
func_4632 = relay.Function([var_4613,], output)
mod['func_4632'] = func_4632
mod = relay.transform.InferType()(mod)
var_4633 = relay.var("var_4633", dtype = "float64", shape = (210, 3))#candidate|4633|(210, 3)|var|float64
output = func_4632(var_4633)
func_4634 = relay.Function([var_4633], output)
mutated_mod['func_4634'] = func_4634
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3127_call = mod.get_global_var('func_3127')
func_3129_call = mutated_mod.get_global_var('func_3129')
call_4753 = relay.TupleGetItem(func_3127_call(), 0)
call_4754 = relay.TupleGetItem(func_3129_call(), 0)
func_3945_call = mod.get_global_var('func_3945')
func_3947_call = mutated_mod.get_global_var('func_3947')
call_4755 = relay.TupleGetItem(func_3945_call(), 0)
call_4756 = relay.TupleGetItem(func_3947_call(), 0)
func_3063_call = mod.get_global_var('func_3063')
func_3065_call = mutated_mod.get_global_var('func_3065')
call_4760 = relay.TupleGetItem(func_3063_call(), 0)
call_4761 = relay.TupleGetItem(func_3065_call(), 0)
output = relay.Tuple([call_4753,call_4755,call_4760,])
output2 = relay.Tuple([call_4754,call_4756,call_4761,])
func_4778 = relay.Function([], output)
mod['func_4778'] = func_4778
mod = relay.transform.InferType()(mod)
output = func_4778()
func_4779 = relay.Function([], output)
mutated_mod['func_4779'] = func_4779
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3723_call = mod.get_global_var('func_3723')
func_3725_call = mutated_mod.get_global_var('func_3725')
call_4851 = relay.TupleGetItem(func_3723_call(), 0)
call_4852 = relay.TupleGetItem(func_3725_call(), 0)
uop_4854 = relay.asinh(call_4851.astype('float32')) # shape=(15, 5, 9)
uop_4856 = relay.asinh(call_4852.astype('float32')) # shape=(15, 5, 9)
func_4193_call = mod.get_global_var('func_4193')
func_4195_call = mutated_mod.get_global_var('func_4195')
var_4860 = relay.var("var_4860", dtype = "int64", shape = (1, 1232))#candidate|4860|(1, 1232)|var|int64
call_4859 = relay.TupleGetItem(func_4193_call(relay.reshape(var_4860.astype('int64'), [4, 308])), 3)
call_4861 = relay.TupleGetItem(func_4195_call(relay.reshape(var_4860.astype('int64'), [4, 308])), 3)
func_4501_call = mod.get_global_var('func_4501')
func_4505_call = mutated_mod.get_global_var('func_4505')
var_4863 = relay.var("var_4863", dtype = "uint64", shape = ())#candidate|4863|()|var|uint64
var_4864 = relay.var("var_4864", dtype = "uint64", shape = (845,))#candidate|4864|(845,)|var|uint64
const_4865 = relay.const([True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True], dtype = "bool")#candidate|4865|(2240,)|const|bool
call_4862 = relay.TupleGetItem(func_4501_call(relay.reshape(var_4863.astype('uint64'), []), relay.reshape(var_4864.astype('uint64'), [845,]), relay.reshape(const_4865.astype('bool'), [560, 4]), ), 0)
call_4866 = relay.TupleGetItem(func_4505_call(relay.reshape(var_4863.astype('uint64'), []), relay.reshape(var_4864.astype('uint64'), [845,]), relay.reshape(const_4865.astype('bool'), [560, 4]), ), 0)
bop_4877 = relay.power(call_4859.astype('float64'), var_4863.astype('float64')) # shape=(4, 308)
bop_4880 = relay.power(call_4861.astype('float64'), var_4863.astype('float64')) # shape=(4, 308)
func_2061_call = mod.get_global_var('func_2061')
func_2067_call = mutated_mod.get_global_var('func_2067')
const_4891 = relay.const([[-7],[-6],[-4],[9],[-9],[4],[7],[-2],[-10],[-2],[-10],[-10],[-4],[1],[-9],[8],[3],[-6],[3],[2],[-10],[-9],[8],[5],[-8],[-8],[-9],[3],[9],[9],[-2],[-7],[3],[9],[7],[-9],[8],[3],[1],[5],[5],[8],[-4],[-7],[5],[-3],[3],[2],[-1],[3],[2],[6],[-1],[-7],[-9],[2],[8],[7],[-10],[-6],[-10],[-4],[9],[10],[-6],[-10],[4],[10],[5],[8],[2],[7],[1],[-3],[-8],[-10],[10],[-3],[1],[-8],[8],[-7],[4],[-10],[7],[-2],[-9],[8],[-4],[-2],[1],[-3],[7],[9],[1],[7],[9],[-4],[3],[3],[-1],[8],[5],[1],[-10],[10],[-7],[4],[8],[4],[-3],[1],[-4],[7],[8],[-9],[5],[10],[-7],[7],[-5],[9],[-1],[8],[8],[-1],[2],[5],[6],[7],[-1],[2],[6],[-6],[-2],[-10],[-4],[-1],[-4],[6],[-2],[7],[10],[3],[-3],[9],[-9],[-10],[10],[9],[2],[1],[10],[1],[-2],[10],[-8],[1],[8],[-4],[-6],[-4],[4],[1],[-1],[6],[-2],[9],[10],[8],[1],[-9],[2],[6],[3],[10],[3],[-8],[10],[-10],[10],[6],[4],[3],[-7],[7],[8],[6],[-3],[-9],[-2],[-10],[5],[-1],[7],[-9],[9],[8],[3],[7],[-4],[-10],[8],[10],[6],[-2],[10],[-5],[-9],[-1],[-8],[-3],[8],[-10],[5],[-2],[2],[9],[8],[3],[-3],[-4],[4],[10],[-6],[10],[-3],[-10],[-4],[-1],[10],[8],[-5],[-1],[-10],[-7],[-7],[8],[8],[7],[-8],[7],[9],[2],[10],[2],[7],[3],[1],[-3],[8],[4],[10],[-1],[7],[-2],[4],[-8],[-9],[-6],[-4],[-10],[-2],[-2],[-6],[-2],[4],[-2],[-7],[3],[-10],[2],[-6],[-6],[-3],[-3],[-3],[-9],[-7],[6],[6],[8],[5],[4],[-2],[9],[-6],[5],[-3],[5],[5],[4],[-5],[1],[-2],[5],[-4],[-7],[4],[2],[-2],[9],[3],[-8],[-7],[2],[-2],[-10],[-9],[-9],[5],[-10],[9],[-9],[-1],[-1],[3],[1],[-6],[-2],[-3],[-6],[3],[4],[-6],[-3],[-6],[-1],[10],[-10],[-2],[-6],[-10],[3],[-5],[2],[-1],[4],[6],[-8],[-2],[-3],[-5],[5],[-4],[-8],[5],[1],[10],[-5],[9],[4],[-8],[6],[8],[-8],[4],[-1],[6],[4],[-3],[6],[6],[-5],[-3],[1],[10],[4],[4],[3],[5],[-4],[-5],[-9],[3],[2],[-8],[3],[-10],[-8],[1],[-7],[-5],[-10],[-2],[-2],[-6],[-9],[3],[3],[1],[-1],[-8],[3],[-5],[10],[-2],[-6],[7],[-7],[10],[-9],[10],[-9],[-4],[-9],[2],[6],[-4],[-7],[-9],[6],[4],[-8],[9],[4],[-9],[-6],[-1],[-9],[9],[-1],[-8],[10],[-3],[-1],[-4],[4],[1],[2],[1],[9],[-9],[6],[2],[-4],[-5],[-4],[10],[-5],[1],[-7],[-4],[-4],[5],[5],[2],[-6],[1],[-8],[9],[-5],[-6],[7],[3],[1],[7],[10],[1],[6],[-1],[-3],[-5],[3],[-3],[10],[-4],[-6],[6],[-8],[-5],[-4],[7],[4],[9],[5],[1],[3],[9],[1],[-7],[-5],[5],[-3],[7],[9],[-10],[-4],[8],[-6],[-6],[-7],[3],[2],[-5],[5],[3],[7],[3],[1],[1],[2],[5],[-8],[-4],[2],[-9],[8],[10],[-3],[2],[-9],[10],[-6],[-5],[-3],[-7],[8],[4],[6],[2],[9],[-6],[3],[-6],[3],[4],[6],[-9],[7],[7],[10],[8],[5],[6],[10],[-1],[9],[-6],[5],[9],[-2],[9],[9],[8],[4]], dtype = "int32")#candidate|4891|(546, 1)|const|int32
const_4892 = relay.const([-8.434444,-6.646314,-1.531489,-1.792224,1.430726,-6.366753,4.572464,6.019367,-7.936947,9.952036,-5.800773,-7.469784,-4.182484,0.682746,7.295140,-5.455481,6.100989,5.764417,8.168600,-0.059711,-7.081678,-8.342030,-3.246988,-5.254478,2.447507,-0.228150,1.178703,9.932319,-6.050436,-4.908022,-4.223037,5.357409,3.596301,8.859997,0.174761,9.643982,-3.178445,4.270649,4.422231,1.966048,1.619192,-9.854076,3.568694,-7.267870,-6.390686,0.530832,-0.816446,-4.567085,5.052986,-8.303538,-8.377144,-1.630158,0.271106,3.977572,-6.495325,-8.116933,9.412695,-4.244203,-3.123414,-6.588664,6.720781,6.948359,3.039738,9.857237,5.583725,6.059652,7.040525,-9.398440,2.698551,-5.198287,9.400383,-3.615957,6.199302,8.978437,1.182739,7.828960,9.963780,-0.263674,-7.376932,1.081919,-3.034312,5.329225,6.103111,-3.009192,-4.016956,-0.626161,3.208578,-1.451168,4.647996,3.711570,0.981636,-6.251664,4.654058,2.182885,-9.451506,-7.737337,1.175075,8.273085,9.212423,-6.877044,-6.929843,4.623048,2.522683,-7.111454,2.747030,3.943065,-4.336172,8.450653,2.703801,-2.422655,-0.830422,-6.064465,-1.927710,-9.209362,3.790635,6.801843,6.718557,-0.251362,-8.020036,4.978865,-0.812858,5.418743,-7.942859,-0.370809,3.673538,-8.294021,0.119291,-1.378693,-9.524336,-6.902131,0.548251,4.938688,-0.280742,7.240125,-1.786700,7.035759,8.168922,-2.968008,3.005656,3.541535,5.085124,-4.414662,-6.319607,-4.010303,5.605597,1.489514,5.318120,9.760516,-7.477068,-8.806854,-0.288133,2.050171,-3.180374,2.226895,-8.516565,1.021549,-3.783528,3.046154,-4.725445,0.249674,-2.057333,-6.985897,2.783053,3.495835,-6.592429,1.809130,7.723367,-6.187026,-5.554399,-4.911973,9.429497,-8.059793,9.326211,-9.042764,0.779739,-6.033194,-8.980703,6.481088,-7.677749,6.466095,7.120088,1.286596,4.311099,-5.393815,-1.508887,0.987429,-0.994583,6.398563,9.312584,8.161142,-5.729278,-5.985126,-4.329593,-8.670605,-4.089739,7.272828,-6.774431,2.327870], dtype = "float64")#candidate|4892|(198,)|const|float64
const_4893 = relay.const([-6.606360,3.916803,-5.739543,-9.338576,-5.014921,5.809259,5.149484,-8.557778,1.610434,6.418128,-2.340887,1.251229,5.173461,6.840214,4.273168,-4.639930,8.899890,-3.743720,0.498938,5.700125,0.170418,-1.749482,-2.002685,-5.183533,7.117781,9.563830,1.187730,9.489765,7.653599,1.146626,8.089825,-0.408225,4.140462,9.204328,-7.505185,-4.495841,6.416288,-7.522862,6.999865,6.150162,-3.988181,7.755270,-4.529718,0.781910,2.580107,-5.647840,-2.173264,2.537799,1.927182,-7.237382,3.943909,6.374928,6.926157,-2.835774,9.401931,-0.803618,-9.420184,8.204657,-2.185603,2.688431,6.811334,-3.769821,-4.877767,9.870220,-7.934384,8.782264,-4.599746,-8.112233,8.339527,8.587156,8.437513,-5.525078,4.757791,-4.507489,-8.227881,0.815524,4.408737,-4.994998,6.125718,6.076833,8.236154,7.243653,-7.154215,-2.040450,-1.885294,-6.324724,2.837427,3.097172,-4.857584,-8.529693,7.271628,-5.353028,5.031355,5.410618,-8.106366,5.153317,9.758825,3.169419,-3.115677,5.679807,1.541695,-3.615006,2.299659,9.451683,9.761439,-1.938252,1.901111,2.179220,8.240944,1.069268,-4.295214,-0.412546,9.198912,2.097231,8.880388,-5.879771,-6.812542,8.873472,3.608238,1.121250,-6.104387,7.023525,-1.279617,-9.150530,9.648996,6.262638,-9.490019,-0.208932,4.849979,-4.847219,-1.828464,-4.431015,6.906339,-3.743923,-1.006198,-0.618046,-6.441866,1.156185,-8.854114,-4.582643,8.810873,5.000373,9.000255,-8.134299,7.566613,9.699508,8.039040,-7.363404,5.225724,7.886117,-9.973580,-8.110828,-1.013775,1.576464,-5.911458,-7.863724,0.516018,8.291502,2.782105,-5.515607,-6.053499,8.362223,6.835823,7.521255,-4.268566,-4.741615,-5.106074,8.369528,-3.975885,0.109406,7.256069,6.368584,-2.709655,5.448359,-4.417375,-0.712669,-1.806648,-9.577901,-5.350646,-5.034446,4.301771,7.394128,-0.919812,-0.439041,-0.627383,7.803644,3.876659,-1.557851,0.110905,-1.201809,7.860813,8.619166,-5.344212,5.404195,6.055587,6.161093,5.135933,-5.980822,-5.445119,-4.932643,-9.342192,-7.260125,-3.431278,7.541283,-8.255280,3.173721,6.723489,2.180504,9.689308,-1.619740,5.721250,3.387391,-1.090474,-0.678397,-1.989125,2.046869,-1.106865,-6.453878,2.250138,-1.849975,4.248198,0.800816,-2.276659,-8.635975,-8.873772,-7.912104,9.171294,-7.224044,1.265419,-5.460306,7.514833,4.384306,8.061446,1.967015,0.052874,-6.247853,5.567765,5.230323,7.669990,9.116306,-5.918153,6.058640,0.043750,-9.614001,-3.038074,-4.595422,-2.022678,1.879881,-3.168206,-8.905333,-7.879495,-6.699267,6.876816,-5.144757,-9.548278,-8.208499,7.695700,-2.879923,7.741215,-8.663956,5.404717,6.392470,-4.736978,4.811346,5.231171,-8.435980,-3.995988,-1.928229,4.500915,-6.313786,-1.309615,-5.585345,-6.772356,5.973497,1.865674,5.058760,-0.273108,4.826274,5.947893,1.705656,-1.768636,1.782796,4.540291,-4.848046,-7.801658,-8.088976,5.088428,-2.194117,7.003149,1.248334,0.985252,3.753112,-1.316338,-6.361331,6.600963,-2.995421,-5.092620,-8.292142,7.973500,-6.582428,-6.260740,8.996773,8.675401,3.400340,4.944560,-2.064090,-4.921141,-1.945278,-5.786489,-9.523966,1.656548,7.727267,-4.553331,8.130599,5.943401,7.218364,-8.472349,4.290657,7.970798,-8.688054,-6.170461,8.958848,-4.391427,6.306301,3.241313,-8.196986,-0.017892,-4.865833,4.974272,7.307319,4.566200,-6.714047,7.323634,0.182399,7.334884,1.419837,-3.840674,-8.609133,-5.844123,4.269061,9.391307,-3.624887,-2.145781,5.518476,-6.144157,-0.665530,0.297826,3.859065,-1.636819,9.364160,-2.652752,5.094952,-7.072347,5.325248,4.758892,-8.837814,-9.534925,7.341098,0.973303,8.128546,8.931331,2.845746,-7.112054,5.484716,3.808491,-1.614881,2.405550,5.357133,0.734090,-8.354699,9.227034,-6.165663,-0.394286,-3.093870,-7.962202,9.423653,6.021689,-6.002443,-8.024660,1.104548,8.864915,3.032666,9.476105,-1.160436,-6.532484,-3.347254,6.739341,7.404558,-7.156726,7.728744,6.180990,-9.387283,6.411655,7.059433,-4.559156,8.436268,-7.347140,-9.365720,3.894786,5.849414,7.617936,-5.707903,-8.272280,-6.202872,5.460295,1.352752,2.993174,-5.091329,-5.878803,-4.456378,-2.947304,-0.920819,-3.927003,-3.791058,9.268398,2.901609,4.164767,1.763648,-2.983082,-3.837346,1.291601,-3.469606,3.445785,8.012665,-2.721119,-0.442148,-6.402088,-2.725852,5.721507,-0.094213,-7.863954,-4.997761,5.212749,2.933343,8.705007,-9.643284,1.579931,8.743860,4.638166,-9.258215,-3.380420,-1.837242,-5.375908,-7.490981,0.409602,-9.475704,-5.702138,-8.774209,8.602358,4.595287,0.924021,1.457711,2.023169,-0.099733,-9.825397,-2.107224,8.989770,3.067618,4.704354,-8.051010,-0.406069,-5.094163,1.133711,0.745369,-1.205560,9.157748,-0.998850,-4.052487,-5.205366,-1.325469,-1.667020,3.869522,7.765389,4.000159,-8.293587,3.044439,-6.005794,-1.708802,-7.102079,-9.372038,-6.512785,1.071082,4.016128,-4.670108,-7.149397,-8.494445,-0.238854,-0.990067,-3.679696,-1.043575,2.563896,3.473616,-1.830159,4.622932,8.359967,6.969571,-9.894534,-4.326605,7.262130,7.580244,7.652767,-3.467464,8.503715,4.000575,-6.520343,0.950785,-7.734580,9.091483,-5.607736,4.914604,4.050637,9.315213,2.006685,9.574742,7.316192,-8.740828,-7.075943,-7.726548,-6.999440,9.332444,5.814629,-8.991191,4.621600,-1.611010,9.882176,-2.750606,7.719168,-7.308811,8.098173,9.039019,-6.294945,-9.970971,-6.770997,-5.890194,-8.789283,6.074421,-2.421507,1.120151,2.361513,9.257382,-3.403640,1.744176,-7.578575,-3.315687,0.030146,-1.320210,-5.563553,-6.447981,1.387756,0.317056,-0.910150,5.659295,-2.447051,5.150842,7.401590,-6.687630,-4.128716,8.187495,0.557991,-8.309833,1.861445,-0.890240,2.694077,-5.749774,-9.360353,4.565494,-8.081349,2.810416,3.553200,-3.594795,-2.780480,-0.363435,2.211190,9.757612,-1.599811,2.235762,-4.157677,4.690664,1.697782,-6.591549,7.147645,-3.086311,-8.694815,-5.184658,-9.330699,-1.258079,-3.072555,7.375723,-6.586934,-8.134214,4.681082,-9.574210,-4.844281,1.063769,3.683922,7.341632,7.304273,-1.547996,8.402489,-3.818429,-7.388144,-0.793858,9.248320,-9.301081,-8.046523,-6.098959,-0.181311,6.668840,-3.142013,-7.267796,-1.141351,-2.799727,-1.069892,-6.952222,-9.135144,2.047059,6.468932,3.302213,-6.058732,4.706311,-5.904223,-2.103195,-0.421219,6.068061,-5.327549,0.528053,7.059748,6.681302,-5.645096,-8.765781], dtype = "float64")#candidate|4893|(630,)|const|float64
call_4890 = relay.TupleGetItem(func_2061_call(relay.reshape(const_4891.astype('int32'), [13, 3, 14]), relay.reshape(const_4891.astype('int32'), [13, 3, 14]), relay.reshape(const_4892.astype('float64'), [198,]), relay.reshape(const_4893.astype('float64'), [630,]), relay.reshape(const_4865.astype('bool'), [1120, 2]), ), 2)
call_4894 = relay.TupleGetItem(func_2067_call(relay.reshape(const_4891.astype('int32'), [13, 3, 14]), relay.reshape(const_4891.astype('int32'), [13, 3, 14]), relay.reshape(const_4892.astype('float64'), [198,]), relay.reshape(const_4893.astype('float64'), [630,]), relay.reshape(const_4865.astype('bool'), [1120, 2]), ), 2)
output = relay.Tuple([uop_4854,var_4860,call_4862,var_4864,const_4865,bop_4877,call_4890,const_4891,const_4892,const_4893,])
output2 = relay.Tuple([uop_4856,var_4860,call_4866,var_4864,const_4865,bop_4880,call_4894,const_4891,const_4892,const_4893,])
func_4900 = relay.Function([var_4860,var_4863,var_4864,], output)
mod['func_4900'] = func_4900
mod = relay.transform.InferType()(mod)
var_4901 = relay.var("var_4901", dtype = "int64", shape = (1, 1232))#candidate|4901|(1, 1232)|var|int64
var_4902 = relay.var("var_4902", dtype = "uint64", shape = ())#candidate|4902|()|var|uint64
var_4903 = relay.var("var_4903", dtype = "uint64", shape = (845,))#candidate|4903|(845,)|var|uint64
output = func_4900(var_4901,var_4902,var_4903,)
func_4904 = relay.Function([var_4901,var_4902,var_4903,], output)
mutated_mod['func_4904'] = func_4904
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3369_call = mod.get_global_var('func_3369')
func_3370_call = mutated_mod.get_global_var('func_3370')
call_4945 = relay.TupleGetItem(func_3369_call(), 1)
call_4946 = relay.TupleGetItem(func_3370_call(), 1)
output = relay.Tuple([call_4945,])
output2 = relay.Tuple([call_4946,])
func_4951 = relay.Function([], output)
mod['func_4951'] = func_4951
mod = relay.transform.InferType()(mod)
output = func_4951()
func_4952 = relay.Function([], output)
mutated_mod['func_4952'] = func_4952
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3127_call = mod.get_global_var('func_3127')
func_3129_call = mutated_mod.get_global_var('func_3129')
call_4996 = relay.TupleGetItem(func_3127_call(), 0)
call_4997 = relay.TupleGetItem(func_3129_call(), 0)
output = relay.Tuple([call_4996,])
output2 = relay.Tuple([call_4997,])
func_5000 = relay.Function([], output)
mod['func_5000'] = func_5000
mod = relay.transform.InferType()(mod)
output = func_5000()
func_5001 = relay.Function([], output)
mutated_mod['func_5001'] = func_5001
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1822_call = mod.get_global_var('func_1822')
func_1824_call = mutated_mod.get_global_var('func_1824')
call_5084 = func_1822_call()
call_5085 = func_1822_call()
func_3945_call = mod.get_global_var('func_3945')
func_3947_call = mutated_mod.get_global_var('func_3947')
call_5092 = relay.TupleGetItem(func_3945_call(), 0)
call_5093 = relay.TupleGetItem(func_3947_call(), 0)
const_5097 = relay.const([[[5.616214,-3.445067,1.991261,3.118831,-4.531732],[-8.703223,-4.544487,2.719083,-7.411153,-7.293930]],[[-5.885765,3.364505,-3.226680,0.183524,-5.347008],[-3.407702,-6.997977,9.545705,6.477411,-7.333895]],[[9.192638,-6.891192,9.265570,1.263281,4.894555],[8.078625,3.500446,1.100777,-8.500664,-2.743209]],[[0.133322,-6.544117,5.736235,-1.513888,-1.846840],[2.006897,8.307850,9.823584,1.801093,-9.181967]],[[2.636959,1.667280,-0.490346,-3.110809,1.641839],[5.041215,-0.973089,-9.339405,4.441718,-6.706302]],[[1.568684,-1.502201,7.164538,5.412796,-1.063966],[-3.610402,1.043414,-7.735430,-5.717283,4.022336]],[[3.365798,-5.340240,-2.526620,-1.821922,6.851729],[-3.726234,-6.380110,0.615550,-0.060830,-9.778148]],[[-3.445642,-8.274539,-9.003302,3.520576,-7.605638],[5.686726,7.606630,3.915331,-2.502503,-0.897086]],[[-5.144705,3.961327,4.501541,8.133842,6.736311],[-9.990389,-8.129017,-0.220162,7.117868,7.804222]],[[-6.317476,9.509159,-0.689930,2.584578,-3.403035],[9.286725,-4.078102,6.538541,5.232096,-2.163082]]], dtype = "float64")#candidate|5097|(10, 2, 5)|const|float64
bop_5098 = relay.greater_equal(call_5092.astype('bool'), relay.reshape(const_5097.astype('bool'), relay.shape_of(call_5092))) # shape=(10, 2, 5)
bop_5101 = relay.greater_equal(call_5093.astype('bool'), relay.reshape(const_5097.astype('bool'), relay.shape_of(call_5093))) # shape=(10, 2, 5)
func_2145_call = mod.get_global_var('func_2145')
func_2146_call = mutated_mod.get_global_var('func_2146')
call_5104 = func_2145_call()
call_5105 = func_2145_call()
uop_5106 = relay.acos(bop_5098.astype('float64')) # shape=(10, 2, 5)
uop_5108 = relay.acos(bop_5101.astype('float64')) # shape=(10, 2, 5)
func_3660_call = mod.get_global_var('func_3660')
func_3662_call = mutated_mod.get_global_var('func_3662')
call_5114 = relay.TupleGetItem(func_3660_call(), 0)
call_5115 = relay.TupleGetItem(func_3662_call(), 0)
output = relay.Tuple([call_5084,call_5104,uop_5106,call_5114,])
output2 = relay.Tuple([call_5085,call_5105,uop_5108,call_5115,])
func_5136 = relay.Function([], output)
mod['func_5136'] = func_5136
mod = relay.transform.InferType()(mod)
output = func_5136()
func_5137 = relay.Function([], output)
mutated_mod['func_5137'] = func_5137
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5136_call = mod.get_global_var('func_5136')
func_5137_call = mutated_mod.get_global_var('func_5137')
call_5179 = relay.TupleGetItem(func_5136_call(), 2)
call_5180 = relay.TupleGetItem(func_5137_call(), 2)
var_5181 = relay.var("var_5181", dtype = "float64", shape = (10, 2, 5))#candidate|5181|(10, 2, 5)|var|float64
bop_5182 = relay.less(call_5179.astype('bool'), relay.reshape(var_5181.astype('bool'), relay.shape_of(call_5179))) # shape=(10, 2, 5)
bop_5185 = relay.less(call_5180.astype('bool'), relay.reshape(var_5181.astype('bool'), relay.shape_of(call_5180))) # shape=(10, 2, 5)
func_4024_call = mod.get_global_var('func_4024')
func_4025_call = mutated_mod.get_global_var('func_4025')
call_5197 = func_4024_call()
call_5198 = func_4024_call()
var_5206 = relay.var("var_5206", dtype = "float64", shape = (10, 2, 5))#candidate|5206|(10, 2, 5)|var|float64
bop_5207 = relay.mod(var_5181.astype('float64'), relay.reshape(var_5206.astype('float64'), relay.shape_of(var_5181))) # shape=(10, 2, 5)
output = relay.Tuple([bop_5182,call_5197,bop_5207,])
output2 = relay.Tuple([bop_5185,call_5198,bop_5207,])
func_5214 = relay.Function([var_5181,var_5206,], output)
mod['func_5214'] = func_5214
mod = relay.transform.InferType()(mod)
mutated_mod['func_5214'] = func_5214
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5214_call = mutated_mod.get_global_var('func_5214')
var_5216 = relay.var("var_5216", dtype = "float64", shape = (10, 2, 5))#candidate|5216|(10, 2, 5)|var|float64
var_5217 = relay.var("var_5217", dtype = "float64", shape = (10, 2, 5))#candidate|5217|(10, 2, 5)|var|float64
call_5215 = func_5214_call(var_5216,var_5217,)
output = call_5215
func_5218 = relay.Function([var_5216,var_5217,], output)
mutated_mod['func_5218'] = func_5218
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5237 = relay.var("var_5237", dtype = "float32", shape = (6, 12, 16))#candidate|5237|(6, 12, 16)|var|float32
uop_5238 = relay.atanh(var_5237.astype('float32')) # shape=(6, 12, 16)
output = uop_5238
output2 = uop_5238
func_5241 = relay.Function([var_5237,], output)
mod['func_5241'] = func_5241
mod = relay.transform.InferType()(mod)
mutated_mod['func_5241'] = func_5241
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5242 = relay.var("var_5242", dtype = "float32", shape = (6, 12, 16))#candidate|5242|(6, 12, 16)|var|float32
func_5241_call = mutated_mod.get_global_var('func_5241')
call_5243 = func_5241_call(var_5242)
output = call_5243
func_5244 = relay.Function([var_5242], output)
mutated_mod['func_5244'] = func_5244
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2850_call = mod.get_global_var('func_2850')
func_2851_call = mutated_mod.get_global_var('func_2851')
call_5269 = relay.TupleGetItem(func_2850_call(), 0)
call_5270 = relay.TupleGetItem(func_2851_call(), 0)
var_5277 = relay.var("var_5277", dtype = "bool", shape = (15, 5, 9))#candidate|5277|(15, 5, 9)|var|bool
bop_5278 = relay.bitwise_xor(call_5269.astype('int32'), relay.reshape(var_5277.astype('int32'), relay.shape_of(call_5269))) # shape=(15, 5, 9)
bop_5281 = relay.bitwise_xor(call_5270.astype('int32'), relay.reshape(var_5277.astype('int32'), relay.shape_of(call_5270))) # shape=(15, 5, 9)
output = relay.Tuple([bop_5278,])
output2 = relay.Tuple([bop_5281,])
func_5285 = relay.Function([var_5277,], output)
mod['func_5285'] = func_5285
mod = relay.transform.InferType()(mod)
mutated_mod['func_5285'] = func_5285
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5286 = relay.var("var_5286", dtype = "bool", shape = (15, 5, 9))#candidate|5286|(15, 5, 9)|var|bool
func_5285_call = mutated_mod.get_global_var('func_5285')
call_5287 = func_5285_call(var_5286)
output = call_5287
func_5288 = relay.Function([var_5286], output)
mutated_mod['func_5288'] = func_5288
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3945_call = mod.get_global_var('func_3945')
func_3947_call = mutated_mod.get_global_var('func_3947')
call_5316 = relay.TupleGetItem(func_3945_call(), 0)
call_5317 = relay.TupleGetItem(func_3947_call(), 0)
uop_5318 = relay.cos(call_5316.astype('float64')) # shape=(10, 2, 5)
uop_5320 = relay.cos(call_5317.astype('float64')) # shape=(10, 2, 5)
func_4024_call = mod.get_global_var('func_4024')
func_4025_call = mutated_mod.get_global_var('func_4025')
call_5326 = func_4024_call()
call_5327 = func_4024_call()
func_4299_call = mod.get_global_var('func_4299')
func_4301_call = mutated_mod.get_global_var('func_4301')
const_5332 = relay.const([8.251184,5.720753,-8.949810,4.000157,8.555873,-1.012534,7.568262,-6.925293,6.702694,1.040266,-6.661732,7.653355,-6.510274,0.140583,2.474391,8.113574,1.550631,5.004215,-7.713073,8.984381,-3.064946,0.271782,-4.417772,-8.202130,1.790224,-3.409420,8.493198,-0.441172,-7.354455,2.222507,-3.079155,1.102435,-8.002027,6.832301,4.413468,-7.229000,-2.625369,5.096141,-1.932282,-6.419584,-8.501366,9.650671,5.313532,9.322178,3.152102,2.345115,6.068238,0.887593,8.650954,-8.088035,-3.233518,-1.997387,0.491573,6.668237,6.435405,6.291913,-5.640395,0.548512,-5.994164,-9.099404,-5.745364,-5.910963,-7.094220,3.134222,-5.457838,-6.257857,-5.043647,-7.570274,-1.449633,5.038759,9.008801,8.318826,9.801705,3.595486,3.182684,2.429741,5.012152,0.897757,-9.876095,-4.314749,9.275356,1.792920,3.220207,1.343074,6.295631,-0.097216,5.158334,4.768525,-7.190400,-1.672921,-1.890282,2.751212,2.201106,2.764076,2.351451,3.818162,-2.786316,5.178987,-0.044628,8.808867,0.664886,-2.868393,-5.784261,-7.025952,3.171676,-5.355175,-4.157004,6.583064,5.701262,4.065473,-4.214005,7.109934,2.630401,0.404593,3.882774,-3.133390,-5.098917,0.030515,-4.231408,4.367953,-9.882374,7.204213,-4.333852,0.940098,2.986039,-9.508327,3.260482,-7.527812,-3.183255,-3.909755,-5.264937,3.348050,3.808861,2.365049,-6.529402,4.656672,2.725834,5.634620,-8.128066,6.871441,-3.215465,6.053922,2.152429,-5.248310,0.676507,1.583554,1.625885,-8.790478,1.349681,-3.675969,4.296314,-2.807218,-4.233983,-3.386035,-2.922680,-5.154189,0.280631,-3.589211,4.746114,5.774432,9.210983,0.889939,8.470737,-7.511137,0.743888,-2.562358,-4.233615,4.285421,-1.873114,9.363475,6.883058,9.022143,-2.500847,7.575394,2.016193,-7.829035,0.694669,1.696974,-4.689576,7.111794,5.262109,-6.201212,2.172216,-3.722916,9.076434,-3.265408,-8.624011,3.048788,-0.243563,-2.196265,2.808609,-2.346981,-9.245016,1.411570,6.432035,0.730372,-4.359007,5.233535,3.797273,-7.281310,1.476208,-4.227699,-3.797748,-9.295669,-3.211700,-5.635782,-0.449788,2.160902,3.179521,2.928015,8.489209,5.737760,-8.689529,3.627398,-6.555035,-2.331387], dtype = "float64")#candidate|5332|(216,)|const|float64
call_5331 = relay.TupleGetItem(func_4299_call(relay.reshape(const_5332.astype('float64'), [216,])), 2)
call_5333 = relay.TupleGetItem(func_4301_call(relay.reshape(const_5332.astype('float64'), [216,])), 2)
output = relay.Tuple([uop_5318,call_5326,call_5331,const_5332,])
output2 = relay.Tuple([uop_5320,call_5327,call_5333,const_5332,])
func_5334 = relay.Function([], output)
mod['func_5334'] = func_5334
mod = relay.transform.InferType()(mod)
mutated_mod['func_5334'] = func_5334
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5334_call = mutated_mod.get_global_var('func_5334')
call_5335 = func_5334_call()
output = call_5335
func_5336 = relay.Function([], output)
mutated_mod['func_5336'] = func_5336
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1685_call = mod.get_global_var('func_1685')
func_1687_call = mutated_mod.get_global_var('func_1687')
call_5391 = relay.TupleGetItem(func_1685_call(), 0)
call_5392 = relay.TupleGetItem(func_1687_call(), 0)
const_5396 = relay.const([[[-5.018215,-9.563394,0.867746,5.875810,2.201778,-3.273570,6.158236,-1.342754,7.528993],[4.131482,-8.574880,1.449179,-5.778216,-5.058144,0.268815,5.454862,6.558803,-7.744050],[-8.015935,-3.316527,-6.372886,-3.854844,-9.005484,2.077153,-0.311241,-0.500677,-1.883762],[-8.650111,2.026734,-0.748143,-5.657933,-8.741729,8.024749,6.104113,1.847554,4.400531],[-2.592845,5.587947,2.715571,4.110282,4.050459,-2.175953,5.358902,-3.489118,5.307474]],[[5.288411,6.072966,-8.240524,-4.807419,-6.287896,9.943508,0.124070,7.259943,-2.967505],[-9.211794,1.352531,3.842468,4.774072,-6.578006,8.816756,3.282735,2.007687,4.807063],[3.040071,5.471246,9.843852,-0.871727,8.639915,9.927334,-5.128376,2.461785,5.689904],[8.668918,6.985440,-2.560349,6.931447,0.551876,-5.214239,-1.102587,-3.332567,6.666035],[-1.949341,8.367154,-7.130213,-3.011561,-0.990584,-0.806097,-1.113670,-2.734250,2.488687]],[[5.426715,-9.381708,9.564368,5.793547,9.978052,-5.785545,9.803806,-3.351250,-4.900573],[3.620054,5.760837,-3.013885,4.062278,6.793026,-6.187803,-4.305647,0.911917,-9.998202],[-5.457906,2.705283,7.749914,-4.548285,-9.822098,5.573261,1.440720,8.636490,-6.046867],[-2.885979,6.525142,-2.098367,-7.517222,7.267770,3.825083,3.298088,6.564724,3.327216],[-7.719899,1.051699,-0.761784,5.471825,6.028135,-4.872083,-6.257602,0.037177,-9.509614]],[[8.189518,-5.310837,4.711792,-5.202508,7.094841,8.425673,-3.832577,2.129457,-8.907448],[3.826921,2.148197,8.339375,-4.185525,9.689741,7.403597,0.759046,-7.171827,6.746671],[-3.746401,-2.328200,6.895211,-3.074111,5.304820,3.310165,-1.127241,1.470551,9.606249],[4.588842,-8.880192,2.319133,5.576143,-4.804696,-8.976221,1.379292,7.062768,8.134746],[0.383936,8.864941,1.648939,-0.485575,2.436345,6.416659,-1.279095,-6.500842,4.697473]],[[-7.303394,0.613242,6.281303,-4.086651,-6.315461,-6.165014,-9.551644,0.904575,0.067358],[-5.082209,-3.048698,6.671680,-1.830391,3.168582,2.631053,-0.218404,0.101549,-5.733209],[-9.855007,9.677881,5.638843,-0.138334,6.741825,7.108129,-5.113463,-4.906620,3.880636],[-9.739173,-1.098548,-0.469643,5.769895,4.913238,-1.253705,5.310961,0.051301,4.209711],[-2.892042,-4.091720,-2.108978,-0.190721,-8.016563,0.188711,4.053393,2.414980,9.780626]],[[9.618775,1.056717,8.199867,-2.954908,-6.970542,1.356681,-2.784251,9.672513,0.320291],[-8.188963,-5.234349,6.049458,-7.364267,3.428525,-6.124171,-6.479779,7.609956,-2.766517],[4.527246,3.152979,-6.063007,-6.435785,9.430773,-7.498454,2.567065,-5.556440,9.055756],[1.048410,-7.764088,9.731771,-1.493449,-9.177233,8.655530,-9.771811,-7.871299,-6.693724],[4.380772,7.311332,-8.414033,1.702322,1.559078,1.550913,5.322563,-9.071752,-9.650872]],[[-3.223055,3.382596,-4.705961,-5.591498,-3.302336,9.666311,7.577971,0.768990,1.966890],[-8.225270,8.248805,-5.477959,-0.546406,8.323492,-7.791588,2.814521,-7.633503,7.265954],[9.741931,-0.733840,-9.745283,3.225983,-9.760390,5.951845,-0.019701,-7.337599,5.450328],[2.073439,8.739529,-6.611313,-4.806278,-4.718900,0.331676,0.108675,1.791717,-3.036095],[2.184182,-9.902738,-6.780912,9.024727,4.128822,-6.981346,5.145022,1.388788,-9.360657]],[[-6.736255,9.921135,-3.025176,-6.994329,6.101346,9.932026,-5.639464,8.533783,-2.962655],[-6.519052,9.475410,9.574505,-9.107040,3.599302,2.355769,6.812062,-0.640281,3.785815],[8.001394,-4.451089,1.450765,-9.048147,5.820675,-4.337683,1.554343,2.894858,6.674201],[-3.290778,9.277702,0.797047,-5.326703,-2.598474,6.417935,5.702786,-6.361398,6.418285],[1.288889,6.343006,-2.090941,-8.012294,-3.417421,-7.936158,-7.439834,1.247061,-7.183232]],[[8.860003,3.534821,6.309261,6.635858,-7.684380,-5.651161,5.736599,6.088471,-5.873041],[8.482612,-4.553415,4.149158,3.915263,4.742683,4.125909,3.907826,-2.388497,2.017809],[8.407676,-8.645384,-9.260350,3.570669,-8.436469,-0.882937,-9.861172,4.449258,5.394485],[5.086715,5.837821,8.148446,-1.341875,1.232923,7.822670,-7.760828,3.226292,-5.088518],[-1.099517,0.653479,5.136338,0.281703,6.268240,-4.885365,7.258838,0.507027,-9.450500]],[[-2.855979,7.717458,-3.784626,-8.321174,3.787220,6.271173,9.529961,-8.657404,0.285927],[-8.275434,9.618234,3.013120,-8.789896,-5.339617,9.074866,-2.101635,2.069563,2.357463],[-2.042687,7.795352,0.326825,-4.236197,-7.287618,-5.948264,-0.745569,-3.651438,-3.950444],[3.842455,6.490016,3.376580,-8.171237,-3.631608,3.916007,7.084909,8.966766,-5.347576],[-1.404590,6.939762,2.377937,-4.929994,-2.161547,9.810896,-0.452598,2.208448,-2.515567]],[[6.901026,-1.639186,5.317310,8.349769,1.801002,9.508836,-6.161294,-9.981697,-6.561855],[7.649635,6.142523,3.663481,-1.478008,5.123035,6.767913,-2.463204,3.059850,-7.391293],[1.742758,8.411468,-4.149495,-1.082418,-2.790276,-6.750260,-1.825752,0.084986,8.969637],[-3.281243,5.739092,5.530889,-0.879907,3.065753,-7.100850,-5.771833,5.165786,0.793228],[-7.225187,-9.318507,-3.723014,8.170750,-6.406181,6.274438,6.719990,-3.990639,9.821968]],[[-1.295431,9.543942,3.988597,3.497361,7.185667,-0.596827,0.606414,-0.116705,1.752688],[-1.626817,7.256304,-0.218227,9.592045,2.728695,-7.229320,4.684118,-2.920924,-3.829664],[5.545651,4.677061,-7.041184,8.862663,-8.468444,-7.679488,-4.430940,-4.440703,5.218439],[-6.671370,-9.747749,-9.204392,7.168161,6.011884,5.768033,2.580073,-5.904134,5.351980],[-4.156752,-0.078642,0.617291,1.133769,6.943851,5.048161,-6.664279,0.787058,8.823499]],[[5.728769,-2.148388,-0.505275,-8.767347,-8.424541,-4.599104,7.765478,-5.042509,4.782503],[-9.820231,4.860737,-4.476496,0.798958,7.858105,-2.447948,-7.776904,8.566567,-7.841017],[-2.741938,2.032268,3.104261,7.956012,4.043792,-8.630009,4.567253,2.611981,1.595286],[5.043738,-0.128450,8.241781,-8.847986,-6.294732,-4.543713,4.517058,6.842736,4.518738],[3.479972,6.736480,-2.742220,2.006230,3.366103,0.771108,4.417797,1.447721,5.578323]],[[-2.002138,-3.799368,5.697357,9.763380,-9.185208,3.625190,-9.570439,-4.585321,0.024107],[1.429703,-0.375186,3.523447,9.764845,-2.806575,-8.792492,-6.713871,7.265848,5.854013],[7.025188,-6.740383,0.990741,-5.294961,-8.017986,-2.846369,8.202896,-5.833723,-8.743403],[3.394101,-2.100549,-8.767540,4.219840,9.852809,0.623733,5.086714,-5.605998,-2.256105],[-0.543149,1.599491,3.100945,-1.041008,5.171500,-9.929672,5.544258,-8.613971,-5.913250]],[[-8.619461,0.994101,-4.375245,0.423470,6.047794,3.409257,3.800594,-6.589782,-3.543882],[-3.944823,5.888475,-1.671748,8.343136,8.804834,4.172178,-8.021034,-1.484364,-0.311683],[2.157296,-5.696065,4.958691,-9.394156,1.851662,6.398469,9.681958,5.125094,4.435077],[-9.909058,9.719317,-5.709690,2.659096,-8.287677,-9.924970,0.100598,-7.172099,0.970516],[0.302756,2.334033,-3.379203,2.728568,-4.446387,-6.830126,-0.459917,1.162696,7.039409]]], dtype = "float64")#candidate|5396|(15, 5, 9)|const|float64
bop_5397 = relay.less_equal(call_5391.astype('bool'), relay.reshape(const_5396.astype('bool'), relay.shape_of(call_5391))) # shape=(15, 5, 9)
bop_5400 = relay.less_equal(call_5392.astype('bool'), relay.reshape(const_5396.astype('bool'), relay.shape_of(call_5392))) # shape=(15, 5, 9)
func_3028_call = mod.get_global_var('func_3028')
func_3029_call = mutated_mod.get_global_var('func_3029')
call_5408 = relay.TupleGetItem(func_3028_call(), 0)
call_5409 = relay.TupleGetItem(func_3029_call(), 0)
func_4024_call = mod.get_global_var('func_4024')
func_4025_call = mutated_mod.get_global_var('func_4025')
call_5417 = func_4024_call()
call_5418 = func_4024_call()
func_1822_call = mod.get_global_var('func_1822')
func_1824_call = mutated_mod.get_global_var('func_1824')
call_5432 = func_1822_call()
call_5433 = func_1822_call()
output = relay.Tuple([bop_5397,call_5408,call_5417,call_5432,])
output2 = relay.Tuple([bop_5400,call_5409,call_5418,call_5433,])
func_5443 = relay.Function([], output)
mod['func_5443'] = func_5443
mod = relay.transform.InferType()(mod)
mutated_mod['func_5443'] = func_5443
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5443_call = mutated_mod.get_global_var('func_5443')
call_5444 = func_5443_call()
output = call_5444
func_5445 = relay.Function([], output)
mutated_mod['func_5445'] = func_5445
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2519_call = mod.get_global_var('func_2519')
func_2521_call = mutated_mod.get_global_var('func_2521')
call_5520 = func_2519_call()
call_5521 = func_2519_call()
output = call_5520
output2 = call_5521
func_5524 = relay.Function([], output)
mod['func_5524'] = func_5524
mod = relay.transform.InferType()(mod)
output = func_5524()
func_5525 = relay.Function([], output)
mutated_mod['func_5525'] = func_5525
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4024_call = mod.get_global_var('func_4024')
func_4025_call = mutated_mod.get_global_var('func_4025')
call_5531 = func_4024_call()
call_5532 = func_4024_call()
output = call_5531
output2 = call_5532
func_5533 = relay.Function([], output)
mod['func_5533'] = func_5533
mod = relay.transform.InferType()(mod)
output = func_5533()
func_5534 = relay.Function([], output)
mutated_mod['func_5534'] = func_5534
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1658_call = mod.get_global_var('func_1658')
func_1660_call = mutated_mod.get_global_var('func_1660')
call_5539 = func_1658_call()
call_5540 = func_1658_call()
func_2789_call = mod.get_global_var('func_2789')
func_2792_call = mutated_mod.get_global_var('func_2792')
const_5546 = relay.const([6.772000,-3.273188,8.238710,2.485023,-6.802471,-9.400056,7.536578,5.675392,1.149572,7.248693,4.025463,-8.527468,-8.567745,7.518200,7.545143,0.936053,6.661608,9.478929,-3.943162,3.645499,-5.550701,7.429827,-3.166561,-5.509901,-1.344942,-6.427669,-2.516334,-4.996694,1.829405,-6.461819,5.886303,1.658818,-3.547102,2.824421,-1.456405,3.504146,-8.260068,-6.180108,9.126431,-8.244454,9.661963,9.649576,-7.792005,-7.694795,2.568759,-9.058978,-0.276308,0.842503,-1.679328,-1.660113,5.342178,1.040558,-6.032867,5.398206,6.127813,7.170629,-2.959519,-2.264118,-9.544635,-5.742896,-2.337016,-8.107801,-8.211176,3.911292,6.950389,4.558296,5.078029,-4.612468,8.325404,8.295436,-9.374642,5.599890,7.740303,7.458206,-1.185733,-3.095124,-9.550782,5.442822,-0.271911,2.029111,-3.934016,3.100400,6.839529,9.099712,4.544130,7.436286,2.107909,-6.739527,0.124867,7.715610,1.208274,-2.882036,-8.310470,-9.680524,-1.059882,-3.533175,4.567008,-2.692494,-5.125578,3.309202,-3.339440,2.848510,1.467654,-5.340279,2.498614,-0.986823,3.947955,-8.582343,-0.012636,7.140809,-2.654664,-1.564313,6.577574,-9.066589,-0.755023,3.830869,9.251939,8.305208,-5.278638,2.615302,3.883907,-6.433189,-6.957417,-1.526888,0.556361,7.338997,-3.630728,0.001876,-4.936117,4.696364,2.230233,3.596977,0.979203,9.594960,-8.587410,2.741984,-8.107583,0.623344,-6.679644,-2.915841,1.674973,8.799665,5.300349,1.633705,-7.963644,-1.494601,4.213505,-9.075650,-1.382825,-3.431046,-1.288780,-0.896816,4.250192,1.007571,-3.858703,6.982029,4.422147,2.451007,-6.963118,-6.426252,8.882016,-6.384680,-7.017560,3.806151,7.216522,-3.839924,8.645418,-7.981682,-1.137853,-3.989924,2.540048,-3.356268,-3.967883,3.565786,-9.475803,7.188385,3.923491,-4.578220,6.124113,-2.556704,2.545630,-0.315748,-7.338823,1.099548,7.804162,0.840228,9.855757,6.497396,7.522372,-7.996470,3.078730,8.798760,-6.893437,-1.734830,5.903819,-2.901646,1.485453,2.871415], dtype = "float64")#candidate|5546|(198,)|const|float64
call_5545 = relay.TupleGetItem(func_2789_call(relay.reshape(call_5539.astype('float32'), [15, 5, 9]), relay.reshape(const_5546.astype('float64'), [198,]), ), 1)
call_5547 = relay.TupleGetItem(func_2792_call(relay.reshape(call_5539.astype('float32'), [15, 5, 9]), relay.reshape(const_5546.astype('float64'), [198,]), ), 1)
output = relay.Tuple([call_5539,call_5545,const_5546,])
output2 = relay.Tuple([call_5540,call_5547,const_5546,])
func_5552 = relay.Function([], output)
mod['func_5552'] = func_5552
mod = relay.transform.InferType()(mod)
mutated_mod['func_5552'] = func_5552
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5552_call = mutated_mod.get_global_var('func_5552')
call_5553 = func_5552_call()
output = call_5553
func_5554 = relay.Function([], output)
mutated_mod['func_5554'] = func_5554
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5558 = relay.var("var_5558", dtype = "float64", shape = (1, 16, 15))#candidate|5558|(1, 16, 15)|var|float64
uop_5559 = relay.asin(var_5558.astype('float64')) # shape=(1, 16, 15)
func_3369_call = mod.get_global_var('func_3369')
func_3370_call = mutated_mod.get_global_var('func_3370')
call_5562 = relay.TupleGetItem(func_3369_call(), 0)
call_5563 = relay.TupleGetItem(func_3370_call(), 0)
uop_5565 = relay.atanh(uop_5559.astype('float64')) # shape=(1, 16, 15)
func_3630_call = mod.get_global_var('func_3630')
func_3631_call = mutated_mod.get_global_var('func_3631')
call_5575 = relay.TupleGetItem(func_3630_call(), 0)
call_5576 = relay.TupleGetItem(func_3631_call(), 0)
output = relay.Tuple([call_5562,uop_5565,call_5575,])
output2 = relay.Tuple([call_5563,uop_5565,call_5576,])
func_5585 = relay.Function([var_5558,], output)
mod['func_5585'] = func_5585
mod = relay.transform.InferType()(mod)
mutated_mod['func_5585'] = func_5585
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5586 = relay.var("var_5586", dtype = "float64", shape = (1, 16, 15))#candidate|5586|(1, 16, 15)|var|float64
func_5585_call = mutated_mod.get_global_var('func_5585')
call_5587 = func_5585_call(var_5586)
output = call_5587
func_5588 = relay.Function([var_5586], output)
mutated_mod['func_5588'] = func_5588
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5590 = relay.const([[[6.928648,1.075313,-7.935311,2.002025,-4.094154,8.425098,-6.718848,3.796817,-1.938455,7.393882,2.169021,9.766707,-9.098672,-1.850349,5.623089,2.447807],[4.658374,0.623341,-4.126424,-1.070114,-1.451727,4.079068,5.803275,-3.155391,-2.890688,-9.535147,0.080922,3.675612,-1.002834,9.566115,4.779966,3.764749],[2.183351,-5.881889,1.896511,-4.343646,0.141090,-0.011631,-5.421501,-0.392979,6.316814,-7.846188,-6.724535,-1.992901,6.713575,2.991835,-0.262349,-4.717527],[5.992497,3.237015,2.409013,-7.281004,5.004321,6.577069,3.822714,-4.205023,-0.322924,-4.729592,-9.809476,-8.260088,-7.938758,-2.271026,-6.889922,-5.643456],[-8.062749,-3.412966,9.988633,-9.877020,-0.801715,-9.314984,8.425428,-7.541953,9.805696,8.715602,9.803151,-9.809781,9.644826,-4.750837,9.133905,7.595242],[-8.996526,3.175410,9.295604,-1.838405,0.427528,2.407778,1.849378,2.513124,-6.816071,9.224673,-1.264270,7.998586,-9.994024,2.923720,-7.391386,4.458295],[-6.967343,-0.327775,-6.452014,9.043494,2.208136,6.212015,-9.124010,-3.539551,3.544370,-0.780983,8.348815,6.359501,8.178791,6.567804,3.234967,-5.053567],[6.710764,7.466508,5.419258,1.546036,-9.288575,-6.618743,1.749021,0.898169,-0.767556,-6.098984,-2.885657,4.907084,-0.682341,8.098908,-4.633879,-6.221129],[1.229862,8.380599,-7.243987,8.224743,3.770484,-5.809038,-4.003259,7.573844,9.558770,-1.190640,0.848638,-9.660345,-6.001356,-4.519848,9.875064,-9.336193],[-2.265134,-0.595105,7.430259,7.023900,3.701809,6.526484,-4.898085,-4.652693,8.109067,1.674263,-7.064470,-9.549428,8.622406,2.034644,0.559758,8.623418],[-7.213624,9.401488,-7.894444,-4.891536,-2.299406,7.697503,5.184322,-3.721458,4.554948,9.354689,3.484070,-5.676854,-6.271512,-8.558915,-8.872089,-5.935154],[0.028771,-2.030991,-5.242674,5.086099,-9.454238,0.746674,-6.281798,-2.189274,9.799781,6.906206,-8.632041,-2.716795,-2.853029,-6.434641,-8.388933,5.305790],[-9.701208,2.870273,-6.889773,7.901240,-6.504545,-1.162838,9.141587,-1.372021,7.138382,1.924647,1.697651,-5.800708,-5.632433,-2.430673,2.923466,-3.084947]]], dtype = "float64")#candidate|5590|(1, 13, 16)|const|float64
uop_5591 = relay.acosh(const_5590.astype('float64')) # shape=(1, 13, 16)
output = uop_5591
output2 = uop_5591
func_5598 = relay.Function([], output)
mod['func_5598'] = func_5598
mod = relay.transform.InferType()(mod)
output = func_5598()
func_5599 = relay.Function([], output)
mutated_mod['func_5599'] = func_5599
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3945_call = mod.get_global_var('func_3945')
func_3947_call = mutated_mod.get_global_var('func_3947')
call_5608 = relay.TupleGetItem(func_3945_call(), 0)
call_5609 = relay.TupleGetItem(func_3947_call(), 0)
output = relay.Tuple([call_5608,])
output2 = relay.Tuple([call_5609,])
func_5623 = relay.Function([], output)
mod['func_5623'] = func_5623
mod = relay.transform.InferType()(mod)
output = func_5623()
func_5624 = relay.Function([], output)
mutated_mod['func_5624'] = func_5624
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3723_call = mod.get_global_var('func_3723')
func_3725_call = mutated_mod.get_global_var('func_3725')
call_5718 = relay.TupleGetItem(func_3723_call(), 0)
call_5719 = relay.TupleGetItem(func_3725_call(), 0)
output = relay.Tuple([call_5718,])
output2 = relay.Tuple([call_5719,])
func_5721 = relay.Function([], output)
mod['func_5721'] = func_5721
mod = relay.transform.InferType()(mod)
mutated_mod['func_5721'] = func_5721
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5721_call = mutated_mod.get_global_var('func_5721')
call_5722 = func_5721_call()
output = call_5722
func_5723 = relay.Function([], output)
mutated_mod['func_5723'] = func_5723
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3414_call = mod.get_global_var('func_3414')
func_3416_call = mutated_mod.get_global_var('func_3416')
call_5748 = relay.TupleGetItem(func_3414_call(), 1)
call_5749 = relay.TupleGetItem(func_3416_call(), 1)
func_5136_call = mod.get_global_var('func_5136')
func_5137_call = mutated_mod.get_global_var('func_5137')
call_5762 = relay.TupleGetItem(func_5136_call(), 1)
call_5763 = relay.TupleGetItem(func_5137_call(), 1)
func_5552_call = mod.get_global_var('func_5552')
func_5554_call = mutated_mod.get_global_var('func_5554')
call_5767 = relay.TupleGetItem(func_5552_call(), 2)
call_5768 = relay.TupleGetItem(func_5554_call(), 2)
func_2653_call = mod.get_global_var('func_2653')
func_2654_call = mutated_mod.get_global_var('func_2654')
call_5770 = func_2653_call()
call_5771 = func_2653_call()
var_5776 = relay.var("var_5776", dtype = "uint64", shape = (15, 5, 9))#candidate|5776|(15, 5, 9)|var|uint64
bop_5777 = relay.right_shift(call_5762.astype('uint32'), relay.reshape(var_5776.astype('uint32'), relay.shape_of(call_5762))) # shape=(15, 5, 9)
bop_5780 = relay.right_shift(call_5763.astype('uint32'), relay.reshape(var_5776.astype('uint32'), relay.shape_of(call_5763))) # shape=(15, 5, 9)
func_4951_call = mod.get_global_var('func_4951')
func_4952_call = mutated_mod.get_global_var('func_4952')
call_5798 = relay.TupleGetItem(func_4951_call(), 0)
call_5799 = relay.TupleGetItem(func_4952_call(), 0)
output = relay.Tuple([call_5748,call_5767,call_5770,bop_5777,call_5798,])
output2 = relay.Tuple([call_5749,call_5768,call_5771,bop_5780,call_5799,])
func_5802 = relay.Function([var_5776,], output)
mod['func_5802'] = func_5802
mod = relay.transform.InferType()(mod)
mutated_mod['func_5802'] = func_5802
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5803 = relay.var("var_5803", dtype = "uint64", shape = (15, 5, 9))#candidate|5803|(15, 5, 9)|var|uint64
func_5802_call = mutated_mod.get_global_var('func_5802')
call_5804 = func_5802_call(var_5803)
output = call_5804
func_5805 = relay.Function([var_5803], output)
mutated_mod['func_5805'] = func_5805
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2568_call = mod.get_global_var('func_2568')
func_2570_call = mutated_mod.get_global_var('func_2570')
call_5853 = func_2568_call()
call_5854 = func_2568_call()
output = call_5853
output2 = call_5854
func_5855 = relay.Function([], output)
mod['func_5855'] = func_5855
mod = relay.transform.InferType()(mod)
mutated_mod['func_5855'] = func_5855
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5855_call = mutated_mod.get_global_var('func_5855')
call_5856 = func_5855_call()
output = call_5856
func_5857 = relay.Function([], output)
mutated_mod['func_5857'] = func_5857
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4778_call = mod.get_global_var('func_4778')
func_4779_call = mutated_mod.get_global_var('func_4779')
call_5881 = relay.TupleGetItem(func_4778_call(), 2)
call_5882 = relay.TupleGetItem(func_4779_call(), 2)
output = relay.Tuple([call_5881,])
output2 = relay.Tuple([call_5882,])
func_5887 = relay.Function([], output)
mod['func_5887'] = func_5887
mod = relay.transform.InferType()(mod)
mutated_mod['func_5887'] = func_5887
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5887_call = mutated_mod.get_global_var('func_5887')
call_5888 = func_5887_call()
output = call_5888
func_5889 = relay.Function([], output)
mutated_mod['func_5889'] = func_5889
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5956 = relay.const([[[1.956354,-2.366953,2.445183,8.493088,1.470186,-9.701089,2.120086],[-8.632746,-1.305692,7.930925,5.200117,6.890127,-2.799844,3.770722],[-7.081838,0.657547,6.865399,-4.966176,-5.869716,3.677865,-8.672449],[-0.585676,6.482398,-4.463149,5.542449,-5.604692,-9.590256,-8.655380],[1.556310,-9.833567,-6.122901,8.677466,6.166751,6.244292,1.126529],[6.627524,-9.691699,4.928792,-1.205859,-7.400000,4.392155,5.450842],[-2.012871,9.526440,1.293638,-7.676226,4.832779,6.009067,1.646932],[-0.074493,-7.249044,-5.556375,6.433974,-2.964809,-6.591025,1.912814],[-3.249377,2.262769,-7.366033,-5.370469,-2.346573,-0.435541,-0.419137]],[[-3.831517,-3.214042,4.771514,-4.281375,7.402225,9.669199,0.610614],[-2.584146,-8.572999,9.539752,-8.935683,-5.311169,-9.933993,0.102925],[-7.457009,-2.890418,7.972896,0.997648,1.607464,2.929778,5.828651],[4.872380,-7.257890,0.984560,-1.103866,-1.670605,5.436068,9.845119],[2.813841,-6.083209,-0.796052,-8.580180,9.876581,-1.832939,9.298441],[7.335529,4.812708,9.034598,3.811351,-2.114151,-2.555067,-2.315177],[5.255916,5.810947,-9.263932,-2.894489,-5.727693,-0.760057,-8.858749],[5.165465,-6.159765,-7.988238,9.814625,3.836199,-8.233279,-2.531767],[-1.656763,-4.543704,-2.349649,-1.538284,2.343406,2.674202,4.455863]],[[7.014394,9.018288,1.344176,-4.593798,2.793667,-4.039232,-3.740434],[-0.885819,8.389349,0.247195,-1.052336,8.367808,-3.307964,5.087776],[-9.054961,6.953982,-2.497642,-8.150011,1.502355,9.134515,-1.257275],[4.633092,-4.817799,0.721901,9.732392,-9.601419,-9.947153,-3.231611],[-5.364404,1.187961,0.564158,2.963908,0.418063,0.948333,-9.580341],[9.317258,-5.341267,9.556950,-7.706776,-1.542805,7.251787,6.628713],[-0.999799,-7.495361,9.843711,-4.878620,-0.429575,-6.199156,8.491274],[-7.606824,-6.252520,0.718198,8.482004,4.229485,3.215860,3.115697],[-3.029017,8.318683,-5.287747,-1.989210,9.537448,-4.850539,-0.378685]]], dtype = "float32")#candidate|5956|(3, 9, 7)|const|float32
uop_5957 = relay.tan(const_5956.astype('float32')) # shape=(3, 9, 7)
func_5623_call = mod.get_global_var('func_5623')
func_5624_call = mutated_mod.get_global_var('func_5624')
call_5962 = relay.TupleGetItem(func_5623_call(), 0)
call_5963 = relay.TupleGetItem(func_5624_call(), 0)
func_3828_call = mod.get_global_var('func_3828')
func_3829_call = mutated_mod.get_global_var('func_3829')
call_5973 = relay.TupleGetItem(func_3828_call(), 0)
call_5974 = relay.TupleGetItem(func_3829_call(), 0)
output = relay.Tuple([uop_5957,call_5962,call_5973,])
output2 = relay.Tuple([uop_5957,call_5963,call_5974,])
func_5977 = relay.Function([], output)
mod['func_5977'] = func_5977
mod = relay.transform.InferType()(mod)
output = func_5977()
func_5978 = relay.Function([], output)
mutated_mod['func_5978'] = func_5978
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4024_call = mod.get_global_var('func_4024')
func_4025_call = mutated_mod.get_global_var('func_4025')
call_5991 = func_4024_call()
call_5992 = func_4024_call()
func_987_call = mod.get_global_var('func_987')
func_991_call = mutated_mod.get_global_var('func_991')
var_5996 = relay.var("var_5996", dtype = "float64", shape = (216, 1))#candidate|5996|(216, 1)|var|float64
var_5997 = relay.var("var_5997", dtype = "float32", shape = (672, 2))#candidate|5997|(672, 2)|var|float32
call_5995 = relay.TupleGetItem(func_987_call(relay.reshape(var_5996.astype('float64'), [12, 9, 2]), relay.reshape(var_5997.astype('float32'), [1344,]), ), 4)
call_5998 = relay.TupleGetItem(func_991_call(relay.reshape(var_5996.astype('float64'), [12, 9, 2]), relay.reshape(var_5997.astype('float32'), [1344,]), ), 4)
uop_6006 = relay.sqrt(var_5997.astype('float64')) # shape=(672, 2)
func_2433_call = mod.get_global_var('func_2433')
func_2439_call = mutated_mod.get_global_var('func_2439')
var_6010 = relay.var("var_6010", dtype = "float64", shape = (686, 1))#candidate|6010|(686, 1)|var|float64
const_6011 = relay.const([-3,-8,-5,7,6,-9,1,-4,4,6,-9,-2,10,4,-10,-7,-3,-10,-7,2,-6,-10,4,-2,9,-8,10,3,-9,-9,1,-2,2,5,-8,1,-7,-3,-7,3,-2,6,10,3,6,10,9,-2,-5,-10,-3,9,4,-2,6,6,-6,-1,10,8,5,5,-2,-4,-3,2,-5,-5,2,9,5,-7,8,9,-9,5,-9,-9,-7,-7,-9,-6,9,-5,-3,10,-10,10,2,-5,8,-8,-10,9,-4,-8,5,-9,-9,7,9,-9,4,-4,-9,-1,8,-6,-8,6,1,-5,1,-3,8,-10,7,5,-9,10,-9,6,2,-6,9,2,-7,8,-1,-8,-1,6,-10,-1,-2,-8,6,6,10,-10,-5,8,-9,2,7,1,-8,8,-9,-8,2,10,2,5,2,-8,8,-1,-4,1,10,-9,-8,-6,-6,8,2,7,5,-3,-9,-4,-1,-6,-5,-4,8,5,10,2,8,5,9,-2,-6,-1,-8,-2,9,3,4,1,3,-7,-7,-1,3,3,-2,6,1,-2,2,7,-5,-7,8,-10,-2,-5,10,-4,-6,4,-3,5,-8,3,3,3,-2,7,-8,2,6,1,-5,-10,1,8,-2,7,10,-2,-2,10,-7,4,4,5,3,-9,-8,-1,10,-4,2,4,3,-6,-3,9,-3,-5,-10,8,-6,-4,-5,7,6,-10,3,2,-2,-1,3,6,4,3,-4,7,-10,-6,8,10,5,2,-6,5,3,6,7,-1,5,-5,9,-9,-5,-3,8,-6,-5,-10,5,10,3,-3,8,-1,10,-2,-10,-7,7,9,-5,-8,-7,3,6,-9,9,-7,-8,2,8,6,-6,-4,-4,8,-2,-10,-7,-1,6,9,-6,4,9,-3,-3,-5,-3,-2,6,4,8,-6,-7,-5,-9,-10,-3,8,-2,8,-9,6,4,8,-10,7,-6,-1,2,-8,10,-5,-4,-4,-3,4,5,-5,-8,10,-3,5,2,6,2,4,-2,5,-3,4,1,-9,8,5,4,3,4,1,-4,9,-1,-5,1,8,-9,1,8,6,3,1,9,-9,2,1,4,-1,3,7,8,-10,-8,6,-1,4,-6,-3,1,-9,9,10,-10,-10,6,6,3,-10,-7,8,1,-3,-7,1,6,2,10,1,-10,2,6,-2,6,-1,10,-2,-1,7,9,7,-8,3,10,9,-2,-10,8,9,-3,6,2,-2,3,5,7,-1,3,-4,-5,5,-3,6,-6,-5,9,-10,-9,6,-2,-8,-2,-4,1,10,-3,3,-9,-7,-6,-1,4,-8,4,7,-4,6,3,3,-10,-10,-7,10,4,10,-10,6,4,8,-7,-5,9,-9,1,-8,4,-5,3,-8,5,-6,10,-8,6,-4,1,6,-1,6,-8,7,4,-4,9,1,-9,-8,9,-3,4,-9,-5,8,-9,-1,9,-8,10,-10,-3,5], dtype = "int32")#candidate|6011|(546,)|const|int32
var_6012 = relay.var("var_6012", dtype = "float64", shape = (630,))#candidate|6012|(630,)|var|float64
const_6013 = relay.const([[False],[False],[True],[False],[False],[False],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[True],[True],[True],[True],[False],[True],[False],[False],[True],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[False],[False],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[True],[True],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[True],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[False],[True],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[False],[False],[True],[True],[True],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[False],[True],[True],[False],[True],[False],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[False],[False],[False],[False],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[True],[False],[False],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[False],[True],[False],[True],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[True],[True],[False],[False],[False],[True],[True],[False],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[False],[False],[False],[True],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[True],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[True],[False],[False],[False],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[True],[True],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[False],[False],[True],[True],[False],[True],[False],[True],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[True],[True],[True],[True],[True],[True],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[False],[False],[False],[False],[False],[False],[False],[True],[False],[False],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[True],[True],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[True],[True],[False],[True],[False],[True],[True],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[True],[True],[True],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[False],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[False],[True],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[False],[False],[True],[False],[False],[False],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[False],[False],[False],[False],[False],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[False],[False],[False],[True],[True],[True],[True],[True],[False],[False],[True],[False]], dtype = "bool")#candidate|6013|(2240, 1)|const|bool
call_6009 = relay.TupleGetItem(func_2433_call(relay.reshape(var_6010.astype('float64'), [7, 7, 14]), relay.reshape(var_6010.astype('float64'), [7, 7, 14]), relay.reshape(const_6011.astype('int32'), [546,]), relay.reshape(var_6012.astype('float64'), [630,]), relay.reshape(const_6013.astype('bool'), [2240,]), ), 2)
call_6014 = relay.TupleGetItem(func_2439_call(relay.reshape(var_6010.astype('float64'), [7, 7, 14]), relay.reshape(var_6010.astype('float64'), [7, 7, 14]), relay.reshape(const_6011.astype('int32'), [546,]), relay.reshape(var_6012.astype('float64'), [630,]), relay.reshape(const_6013.astype('bool'), [2240,]), ), 2)
uop_6018 = relay.asinh(uop_6006.astype('float64')) # shape=(672, 2)
output = relay.Tuple([call_5991,call_5995,var_5996,call_6009,var_6010,const_6011,var_6012,const_6013,uop_6018,])
output2 = relay.Tuple([call_5992,call_5998,var_5996,call_6014,var_6010,const_6011,var_6012,const_6013,uop_6018,])
func_6020 = relay.Function([var_5996,var_5997,var_6010,var_6012,], output)
mod['func_6020'] = func_6020
mod = relay.transform.InferType()(mod)
mutated_mod['func_6020'] = func_6020
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6020_call = mutated_mod.get_global_var('func_6020')
var_6022 = relay.var("var_6022", dtype = "float64", shape = (216, 1))#candidate|6022|(216, 1)|var|float64
var_6023 = relay.var("var_6023", dtype = "float32", shape = (672, 2))#candidate|6023|(672, 2)|var|float32
var_6024 = relay.var("var_6024", dtype = "float64", shape = (686, 1))#candidate|6024|(686, 1)|var|float64
var_6025 = relay.var("var_6025", dtype = "float64", shape = (630,))#candidate|6025|(630,)|var|float64
call_6021 = func_6020_call(var_6022,var_6023,var_6024,var_6025,)
output = call_6021
func_6026 = relay.Function([var_6022,var_6023,var_6024,var_6025,], output)
mutated_mod['func_6026'] = func_6026
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3109_call = mod.get_global_var('func_3109')
func_3110_call = mutated_mod.get_global_var('func_3110')
call_6060 = relay.TupleGetItem(func_3109_call(), 1)
call_6061 = relay.TupleGetItem(func_3110_call(), 1)
var_6068 = relay.var("var_6068", dtype = "float32", shape = (14, 12, 8))#candidate|6068|(14, 12, 8)|var|float32
bop_6069 = relay.power(call_6060.astype('float32'), relay.reshape(var_6068.astype('float32'), relay.shape_of(call_6060))) # shape=(14, 12, 8)
bop_6072 = relay.power(call_6061.astype('float32'), relay.reshape(var_6068.astype('float32'), relay.shape_of(call_6061))) # shape=(14, 12, 8)
var_6076 = relay.var("var_6076", dtype = "float32", shape = (14, 12, 8))#candidate|6076|(14, 12, 8)|var|float32
bop_6077 = relay.not_equal(call_6060.astype('bool'), relay.reshape(var_6076.astype('bool'), relay.shape_of(call_6060))) # shape=(14, 12, 8)
bop_6080 = relay.not_equal(call_6061.astype('bool'), relay.reshape(var_6076.astype('bool'), relay.shape_of(call_6061))) # shape=(14, 12, 8)
func_987_call = mod.get_global_var('func_987')
func_991_call = mutated_mod.get_global_var('func_991')
var_6082 = relay.var("var_6082", dtype = "float64", shape = (36, 6))#candidate|6082|(36, 6)|var|float64
call_6081 = relay.TupleGetItem(func_987_call(relay.reshape(var_6082.astype('float64'), [12, 9, 2]), relay.reshape(bop_6077.astype('float32'), [1344,]), ), 2)
call_6083 = relay.TupleGetItem(func_991_call(relay.reshape(var_6082.astype('float64'), [12, 9, 2]), relay.reshape(bop_6077.astype('float32'), [1344,]), ), 2)
output = relay.Tuple([bop_6069,bop_6077,call_6081,var_6082,])
output2 = relay.Tuple([bop_6072,bop_6080,call_6083,var_6082,])
func_6085 = relay.Function([var_6068,var_6076,var_6082,], output)
mod['func_6085'] = func_6085
mod = relay.transform.InferType()(mod)
mutated_mod['func_6085'] = func_6085
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6085_call = mutated_mod.get_global_var('func_6085')
var_6087 = relay.var("var_6087", dtype = "float32", shape = (14, 12, 8))#candidate|6087|(14, 12, 8)|var|float32
var_6088 = relay.var("var_6088", dtype = "float32", shape = (14, 12, 8))#candidate|6088|(14, 12, 8)|var|float32
var_6089 = relay.var("var_6089", dtype = "float64", shape = (36, 6))#candidate|6089|(36, 6)|var|float64
call_6086 = func_6085_call(var_6087,var_6088,var_6089,)
output = call_6086
func_6090 = relay.Function([var_6087,var_6088,var_6089,], output)
mutated_mod['func_6090'] = func_6090
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2653_call = mod.get_global_var('func_2653')
func_2654_call = mutated_mod.get_global_var('func_2654')
call_6173 = func_2653_call()
call_6174 = func_2653_call()
func_5721_call = mod.get_global_var('func_5721')
func_5723_call = mutated_mod.get_global_var('func_5723')
call_6203 = relay.TupleGetItem(func_5721_call(), 0)
call_6204 = relay.TupleGetItem(func_5723_call(), 0)
func_1822_call = mod.get_global_var('func_1822')
func_1824_call = mutated_mod.get_global_var('func_1824')
call_6205 = func_1822_call()
call_6206 = func_1822_call()
output = relay.Tuple([call_6173,call_6203,call_6205,])
output2 = relay.Tuple([call_6174,call_6204,call_6206,])
func_6212 = relay.Function([], output)
mod['func_6212'] = func_6212
mod = relay.transform.InferType()(mod)
mutated_mod['func_6212'] = func_6212
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6212_call = mutated_mod.get_global_var('func_6212')
call_6213 = func_6212_call()
output = call_6213
func_6214 = relay.Function([], output)
mutated_mod['func_6214'] = func_6214
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4264_call = mod.get_global_var('func_4264')
func_4265_call = mutated_mod.get_global_var('func_4265')
call_6215 = func_4264_call()
call_6216 = func_4264_call()
func_2970_call = mod.get_global_var('func_2970')
func_2973_call = mutated_mod.get_global_var('func_2973')
const_6233 = relay.const([10,-2,9,-1,5,10,7,-4,2,2,4,8,-7,9,-1,-3,-8,1,10,-8,10,-5,-6,5,7,-7,-9,-2,6,-2,-4,8,-9,9,-9,-2,-7,-7,6,-10,-9,-3,4,7,-9,-6,4,-4,1,2,-10,-10,-3,-9,-8,3,-6,8,-2,-1,-3,-3,-3,10,2,-5,-8,9,-9,-2,7,-6,2,4,-8,6,-6,-6,5,2,-8,10,-1,9,7,-8,-9,-9,8,-6,2,8,8,-4,10,2,4,-7,-3,4,-10,-6,7,-1,-9,-1,-6,9,-3,-10,-1,-2,-6,-8,7,-1,-4,-5,4,-8,-2,6,-6,-1,7,1,-6,1,-3,-3,2,-7,-2,-9,-10,-1,-6,8,9,-2,-3,-4,-7,10,-7,2,6,-8,-6,7,4,8,-5,3,-10,-2,-7,3,-5,-5,6,2,1,-2,-6,4,-7,1,3,-7,6,-5,6,-8,10,1], dtype = "uint16")#candidate|6233|(176,)|const|uint16
const_6234 = relay.const([8,2,-4,1,8,4,-1,3,9,5,-4,-3,4,-10,-9,-10,2,1,10,-5,1,8,-6,9,-2,-1,-7,-3,-8,-6,7,-6,-7,6,-8,-6,2,-10,-6,-4,-3,-9,9,-1,-2,-4,4,9,-8,9,-5,6,10,8,6,8,-6,2,-6,2,2,8,-5,-9,1,-8,6,6,1,4,5,-7,-9,-6,-3,-5,-4,3,2,-4,-2,1,-8,4,8,-7,1,6,2,-3,2,-10,-2,8,4,7,6,-4,3,-4,-7,6,4,8,-3,8,10,4,10,-6,-5,10,8,-8,5,4,2,2,1,1,-2,1,-7,-5,-8,1,1,7,-7,-10,8,6,3,5,7,-10,-6,-2,8,10,-6,1,4,7,-4,6,1,1,10,-10,3,8,2,2,7,8,-3,-3,9,-10,8,-5,6,5,-2,-4,4,6,-2,-8,10,-4,-6,-2,10,-8,-6,9,8,9,-8,7,-5,-10,1,5,3,-4,8,-4,8,7,4,7,10,4,-8,-2,1,-7,-9,4,4,2,6,10,-7,-7,3,-5,-9,-10,7,10,-3,2,1,-7,6,7,-5,-5,6,-5,5,1,-8,-2,5,5,-1,2,-3,-9,8,10,-4,8,-6,-8,-3,-4,4,-6,-8,-6,7,2,-9,-10,6,-4,4,10,-5,8,1,-10,10,3,8,6,1,7,7,-1,-9,3,5,1,6,-1,-3,-2,-7,-8,6,2,2,-9,9,3,-3,1,-2,9,2,-4,10,-8,3,-6,2,6,9,4,-5,8,-5,-5,1,-4,-5,8,6,-6,1,-8,10,-8,1,-9,-9,4,5,-1,-5,-9,-7,8,2,2,8,8,-8,-6,-8,-5,1,-1,9,3,10,6,9,-1,-2,6,-5,-5,-9,-1,-8,-4,-6,-5,8,10,-2,-3,2,3,7,3,4,-4,-1,-1,-3,-7,-1,-5,2,7,2,4,6,-10,-7,-6,1,3,6,10,-9,8,9,7,9,-5,5,-6,7,3,-1,4,-8,-5,-10,-4,1,-7,3,4,-9,2,-10,-5,8,-2,7,-2,-2,-9,-1,-1,3,7,-1,8,1,4,-2,-10,-6,-7,10,-6,-6,7,6,-4,-4,-6,3,7,-8,5,7,-8,10,6,5,-4,-6,10,9,-4,-6,-9,4,1,6,-2,5,-8,5,7,-7,-3,-2,-7,-1,-5,1,4,-2,9,-4,3,-9,4,-6,-6,-10,5,3,6,-5,1,-8,1,-1,-10,-1,4,-5,-4,7,-1,8,-2,10,-7,8,-10,2,-8,4,-7,10,-3,-8,-5,6,4,4,8,-4,8,2,10,-9,-6,6,-6,-7,-3,-7,-1,-6,8,1,-3,-1,-8,-7,9,-9,-9,-10,-3,-5,1,-9,-6,7,5,9,4,-7,7,1,1,10,-6,8,-7,-10,-4,1,1,3,-6,4,-6,-2,-8,-8,-4,-3,-9,2,4,2,-8,-10,-1,-7,-7,8,-3,-6,-7,1,3,2,3,-7,5,-4,4,-1,7,3,10,-9,6,-3,-2,-4,6,-8,-1,5,4,-8,5,3,-9,8,-10,2,6,8,-8,4,10,3,5,-5,1,-5,-5,8,5,-3,7,-2,9,-1,-2,-2,-5,4,-5,8,4,-2,-4,-3,10,-5,-9,10,-6,-6,-5,3,-3,1,7,6,5,-2,-10,-7,1,7,-6,10,7,-2,-4,2,3,-9,-3,4,3,-4,-1,3,-2,1,-7,-1,7,-5,-10,10,10,-8,4,-10,7,2,-6,9,-7,-5,-3,1,10,5,-4,-5,-4,-7,4,7,-3,1,-4,-7,-3,7,9,-10,-5,10,9,4,-10,-4,-10,8,-10,5,9,6,8,-2,3,-7,6,-8,7,-10,2,-3,-7,-8,-10,-10,8,-5,-1,-3,-6,3,-10,-8,-10,3,-4,-6,9,-5,-8,-2,-3,3,1,-8,-6,8,9,-2,6,-3,-4,-9,-5,-4,1,1,10,-8,2,9,-7,6,4,-7,5,-1,10,-4,6,2,-5,-3,-9,-7,9,10,2,3,6,-6,-1,2,7,-10,5,2,5,4,-8,-6,4,4,4,1,9,-10,4,-4,9,2,6,-5,-9,6,9,-6,-9,-10,8,-4,-1,-7,-10,4,7,-5,-1,-5,-9,-8,4,-3,2,10,7,7,10,-10,7,10,-1,-6,-5,-3,-3,-3,4,-1,-9,8,-5,-3,1,5,-9,-9,-10,-5,5,9,8,4,-6,-10,-8,-3,5,9,-9,-3,1,-1,6,-8,-3,-10,7,-2,-1,-9,5,3,8,-8,-8,7,1,-2,5,10,7,8,-4,-8,-7,5,1,-1,-9,7,-8,-9,-4,7,-3,1,7,-3,-2,-7,7,10,-9,8,2,7,10,10,-9,7,-4,-1,8,1,4,-10,9,1,-2,7,-4,5,-4,-10,-2,6,-3,-6,-10,10,6,-5,1,4,-4,-7,-9,2,7,-8,-9,4,1,3,-6,5,7,8,5,1,-7,10,3,9,6,-9,-2,-8,-3,-4,8,-3,-9,-10,5,6,10,-7,-1,-2,-4,3,4,-10,-2,7,4,-4,-5,7,-4,3,10,8,8,10,1,-9,5,-3,4,7,-2,-10,5,-8,-2,-4,2,-6,2,-4,9,7,5,-1,9,-6,10,9,-3,6,-9,8,2,4,1,-6,-3,4,-2,6,4,-4,8,-2,2,6,8,-7,-9,-4,-8,9,-3,9,8,7,-9,-6,4,-6,6,10,-6,-4,-7,-3,1,8,7,-1,5,6,-9,-1,-2,1,-8,2,9,1,6,-3,-8,-3,10,-9,-2,-9,9,3,-6,1,-7,-10,-9,-4,-4,2,-8,8,-6,5,4,-8,3,-6,6,-4,10,-1,4,-4,2,10,-10,8,-7,-4,6,-4,3,-1,-9,4,-9,-10,2,-3,9,-4,4,-5,-6,10,10,4,-7,-2,8,-8,5,-3,-2,-1,10,10,-9,4,5,-9,9,-8,-6,3,-10,-4,6,10,-2,9,-6,5,-5,3,3,6,-5,8,-7,-7,1,10,9,-5,2,-4,-4,-6,-9,10,-10,6,3,9,7,6,7,5,-7,8,6,-8,2,1,2,5,-10,-7,7,10,2,-1,-2,-7,-7,-8,9,-5,-9,-4,8,3,10,-8,8,8,5,-10,-6,-6,6,-7,-8,-5,7,-8,-9,-4,2,6,1,1,3,-1,-10,1,-10,10,1,5,-7,6,5,-6,1,9,6,-5,3,8,-4,-9,9,2,-7,1,-1,1,-4,-7,7,-6,5,-1,-9,4,-10,-10,4,-1,1,6,-7,-10,-4,-6,2,-5,3,-7,-7,-8,4,5,9,9,-8,-2,4,9,-8,2,-7,8,2,-6,6,5,-1,-8,-8,10,3,-4,3,-6,8,-10,-4,-7,-4,7,-7,10,5,-10,-4,-1,-10,6,8,-6,-10,3,5,-10,5,8,2,-1,5,-1,10,8,9,-7,5,-3,-8,-9,-6,-3,-8,2,9,6,5,-5,-9,8,8,-5,9,-8,-2,-1,5,1,4,-1,9,9,7,2,8,4,-5,8,6,-10,-2,9,6,-1,5,5,1,7,-1,-4,9,6,-8,10,10,-2,-3,-10,-3,1,-4,2,-4,3,-10,-4,-8,4,5,-10,6,-9,-7,9,-1,9,-9,-1,2,8,-5,-2,3,9,-2,2,2,-6,-10,8,7,5,8,9,-1,3,-9,9,1,-9,6,10,3,-7,-10,4,-2,-3,6,10,1,5,8,-4,-3,-1,-4,-9,6,-10,10,-4,-5,-1,-1,10,4,-1,-9,-1,-8,1,3,1,-5,8,8,-6,-8,-4,9,10,9,-8,-8,1,1,-2,-2,-6,7,-10,5,-8,4,4,5,-7,-9,3,3,-5,-5,-3,-1,4,4,-3,-10,3,-2,-7,3,1,8,9,-7,-6,-3,-9,-9,-2,-7,-9,5,-10,1,6,-1,5,-3,1,-3,2,7,10,-4,-6,-9,-7,8,-3,-7,2,8,-9,6,-10,-6,-2,-6,8,7,3,8,-10,9,5,4,6,-7,-2,-5,-1,-9,-6,5,6,-6,8,9,2,3,6,9,9,8,-10,-6,-6,3,-9,-3,-2,4,-7,-10,-10,8,-10,7,4,1,-8,4,9,5,-10,2,9,4,8,-5,-6,-6,4,6,-1,-4,3,3,7,-9,-6,9,-9,-1,6,9,1,-8,9,2,2,-10,-6,-6,-1,-10,-8,-4,1,-7,-1,8,-2,-6,-2,-2,6,9,5,5,-10,4,-5,8,4,-4,2,9,-10,-6,5,9,1,5,3,3,6,-5,8,10,9,-6,-8,6,2,-2,-9,10,9,6,-5,7,-8,4,-4,-7,8,3,-10,4,10,-9,-5,8,2,7,-5,-9,-5,-9,7,1,1,3,-4,1,1,2,7,-1,6,-8,-2,-1,2,-5,6,-6,3,-8,4,-10,9,4,-6,7,-5,-2,-2,4,-5,-4,-7,7,10,7,-5,3,-1,-2,-4,-8,3,-5,-2,-10,-10,-7,-7,-4,-2,-2,-10,-2,2,9,-10,6,-6,2,-2,7,9,8,10,2,5,-10,-1,-7,4,-10,4,2,8,9,8,-3,-10,2,5,4,10,-4,-8,-3,-8,9,-10,1,6,-2,-6,1,8,-7,-9,-10,9,-9,8,9,6,7,10,-6,7,-1,4,10,5,-2,2,-3,-9,-6,-6,-2,-5,-10,6,3,5,8,-6,-1,8,7,-9,-9,-5,-5,1,5,4,-5,1,-6,2,8,-2,2,4,8,-2,-4,-5,9,-6,-4,-8,-1,-6,7,-10,-9,4,2,3,-3,-8,-3,6,1,-4,2,-5,-3,1,1,5,-6,3,10,8,2,-2,1,7,-10,6,-5,9,1,9,3,-4,-4,-5,-3,-10,10,-2,-10,2,9,5,8,5,-6,-1,-10,-8,-2,-1,-7,-3,-2,10,1,-3,-2,8,4,9,-8,9,-7,-2,-9,7,-3,6,5,-7,-10,9,-1,-1,-10,3,5,4,8,-5,9,6,2,7,-8,6,-7,1,1,2,-6,-9,-8,5,9,4,1,9,-10,3,-9,7,3,5,-9,7,-2,6,-9,8,8,5,-10,5,9,9,6,-5,3,4,6,7,6,-10,4,-3,7,-6,-10,-8,-8,8,-2,-2,2,-9,5,-6,1,8,-5,-2,10,-1,8,1,8,-7,-2,-7,4,3,-2,-4,9,2,4,-6,1,-7,7,-2,-9,7,-9,8,-10,5,-3,7,-1,-4,3,1,7,3,-8,-1,6,-10,2,-8,-8,4,-10,-3,-2,-7,-9,10,-8,2,-2,3,-10,-2,-1,-7,-3,-2,6,7,-4,-4,5,-9,-1,-9,3,-10,6,-7,4,8,7,-2,7,8,4,-6,-7,1,3,10,3,1,2,8,2,-3,8,-9,-7,-8,-10,-1,7,-7,-4,-8,-7,-8,-9,-2,2,9,3,3,-6,2,-5,-4,-4,5,-8,-5,-4,-3,-9,3,2,-9,9,-6,5,10,2,-4,-5,-6,-4,9,6,-10,-8,-6,4,-7,9,7,-3,8,10,-4,1,-7,1,-2,7,1,6,6,-3,4,-8,10,7,-7,-7,10,-10,-2,5,7,-7,-9,-6,-6,8,4,10,-7,1,-4,2,-8,-2,-3,-6,1,3,-8,-3,-9,-4,-8,7,1,-7,8,-8,-4,-9,-9,9,6,-10,-10,-9,-5,-4,-7,-6,10,-5,5,-7,8,-5,-8,-7,-8,-1,9,9,-2,6,-5,2,-8,-4,-4,1,6,9,2,-10,-2,-9,10,-4,3,6,4,1,-6,-4,-5,-10,-1,-5,-4,1,4,4,10,-10,10,8,3,6,4,10,3,2,-9,-4,10,9,-9,-1,5,-1,5,-8,9,-8,2,-6,-7,8,5,-1,9,-10,4,-7,-3,3,6,-8,5,-1,3,-1,-6,-8,-1,6,8,-8,1,5,-2,2,10,-6,-6,-2,-6,9,2,-3,-4,-4,-8,9,8,3,-2,1,-5,-9,-3,7,-5,-3,2,1,8,-2,-10,6,-5,-9,4,-9,6,-9,10,-10,2,4,-9,2,2,4], dtype = "uint16")#candidate|6234|(2288,)|const|uint16
call_6232 = relay.TupleGetItem(func_2970_call(relay.reshape(const_6233.astype('uint16'), [11, 1, 16]), relay.reshape(const_6234.astype('uint16'), [11, 13, 16]), ), 1)
call_6235 = relay.TupleGetItem(func_2973_call(relay.reshape(const_6233.astype('uint16'), [11, 1, 16]), relay.reshape(const_6234.astype('uint16'), [11, 13, 16]), ), 1)
func_6212_call = mod.get_global_var('func_6212')
func_6214_call = mutated_mod.get_global_var('func_6214')
call_6245 = relay.TupleGetItem(func_6212_call(), 0)
call_6246 = relay.TupleGetItem(func_6214_call(), 0)
uop_6247 = relay.acos(call_6215.astype('float32')) # shape=(15, 5, 9)
uop_6249 = relay.acos(call_6216.astype('float32')) # shape=(15, 5, 9)
output = relay.Tuple([call_6232,const_6233,const_6234,call_6245,uop_6247,])
output2 = relay.Tuple([call_6235,const_6233,const_6234,call_6246,uop_6249,])
func_6250 = relay.Function([], output)
mod['func_6250'] = func_6250
mod = relay.transform.InferType()(mod)
mutated_mod['func_6250'] = func_6250
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6250_call = mutated_mod.get_global_var('func_6250')
call_6251 = func_6250_call()
output = call_6251
func_6252 = relay.Function([], output)
mutated_mod['func_6252'] = func_6252
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3369_call = mod.get_global_var('func_3369')
func_3370_call = mutated_mod.get_global_var('func_3370')
call_6297 = relay.TupleGetItem(func_3369_call(), 2)
call_6298 = relay.TupleGetItem(func_3370_call(), 2)
output = relay.Tuple([call_6297,])
output2 = relay.Tuple([call_6298,])
func_6304 = relay.Function([], output)
mod['func_6304'] = func_6304
mod = relay.transform.InferType()(mod)
mutated_mod['func_6304'] = func_6304
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6304_call = mutated_mod.get_global_var('func_6304')
call_6305 = func_6304_call()
output = call_6305
func_6306 = relay.Function([], output)
mutated_mod['func_6306'] = func_6306
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6415 = relay.const(6, dtype = "uint64")#candidate|6415|()|const|uint64
var_6416 = relay.var("var_6416", dtype = "uint64", shape = (14, 2, 6))#candidate|6416|(14, 2, 6)|var|uint64
bop_6417 = relay.minimum(const_6415.astype('uint64'), var_6416.astype('uint64')) # shape=(14, 2, 6)
func_4453_call = mod.get_global_var('func_4453')
func_4459_call = mutated_mod.get_global_var('func_4459')
const_6430 = relay.const([4,2,-4,-8,-1,-9,-3,-5,5,6,-4,-2,-1,-3,10,-4,1,2,7,6,-4,6,-7,-6,-4,6,3,-1,4,3,-6,-10,-4,-10,2,-3,-2,4,2,2,4,2,-7,-4,-8,4,-5,-3,-7,-4,-1,-7,-5,-4,3,-1,-5,6,9,-2,-6,-3,3,2,8,-8,2,-4,6,-2,-6,-8,7,5,-4,2,-7,1,-10,-9,10,9,-3,-8,3,-10,2,-3,1,-4,-7,5,3,2,-10,6,-10,-1,-8,-4,9,-1,3,2,2,-7,4,2,7,-5,-7,-8,-5,-2,9,5,1,1,-10,5,8,-10,5,4,-8,-8,1,3,-6,1,2,-5,2,6,8,-1,-5,-1,-4,2,-5,8,8,-1,8,-2,-8,3,3,-9,3,7,2,8,-6,-10,3,-6,1,7,-1,-2,-6,-6,-6,-9,-6,9,-8,-4,7,7,1,-1,3,6,7,-3,-4,-3,4,1,2,-8,9,7,5,8,-7,10,6,-6,-3,9,5,-10,-6,1,-3,8,-10,-7,-9,10,-3,8,8,6,10,-1,-7,-6,-5,1,-5,-9,-4,-9,-1,-10,1,6,1,-3,7,-8,8,-7,2,-1,7,-1,6,5,-8,4,3,3,3,-7,-1,-5,8,1,10,-6,-10,9,6,5,-8,-7,10,7,5,8,-8,6,4,7,-7,-10,-9,-5,2,-10,9,-5,7,-6,7,-10,-6,-10,-2,-6,-1,6,-7,6,-10,-2,-6,-10,1,5,10,3,-10,8,-2,-10,1,3,-8,-7,-7,-7,-10,-6,-5,-8,-4,2,-4,5,5,8,-1,5,-2,-8,-3,-4,2,-3,10,-3,-2,8,5,3,9,9,-4,9,-7,9,-2,5,2,2,-9,6,-9,-1,-8,-8,8,6,10,-2,-2,8,-3,-9,-1,8,-5,-3,-9,-1,-9,-3,-4,8,4,-4,-10,-4,5,9,4,8,-4,-4,-5,1,3,8,-2,-3,8,-5,-10,-3,-2,-3,-2,8,1,-10,-8,-10,-6,10,7,-6,-3,-5,-2,9,1,-2,4,10,1,-4,2,10,2,-7,5,6,-6,10,9,4,5,2,6,-7,-1,-8,4,-2,7,-9,-5,-10,-6,-3,-2,-5,-4,8,-9,7,-7,5,-2,-2,-8,-3,6,6,-6,8,-5,-6,-4,-9,1,-4,-2,4,8,4,6,9,-3,-5,3,10,8,8,-2,6,-2,6,9,-9,5,-3,3,5,8,-8,3,10,5,5,5,-3,-2,-3,10,-10,-7,7,6,7,-10,-6,4,6,5,7,5,-7,10,9,-1,-4,-3,-8,3,-4,2,-7,7,-6,-7,2,-2,8,-8,3,-6,-6,9,8,9,4,4,-8,3,5,6,3,-6,-3,7,-4,2,-2,3,-1,-5,-6,4,-2,-9,-10,-4,-4,-1,-7,-10,3,-10,-2,-8,7,-8,10,8,-3,-9,-1,-4,-3,3,-5,-10,6,-3,5,3,-3,-7,-7,7,2,-2,10,10,-3,5,6,4,5,10,1,2,-6,-10,-3,-2,-4,-8,10,-10,-10,9,-8,8,4,-5,-5,10,-5,-4,-9,1,-1,-8,6,-2,-10,-4,5,6,-2,-4,-6,-8,-7,9,-9,9,-9,8,4,-4,2,5,-2,7,-1,-2,-9,10,-3,10,-7,-9,-6,4,9,-6,-7,-8,-1,-2,-10,-1,-5,3,-8,-9,3,-3,-6,-1,-6,6,8,-4,-1,-3,-3,9,3,-5,8,6,-3,-2,-8,6,10,9,7,6,10,-10,4,-10,-3,8,10,-3,-2,3,-10,4,-2,7,-6,1,4,8,3,3,-6,7,6,8,9,-8,2,-8,-6,-8,-9,10,-2,-9,8,-1,4,10,-10,-8,2,5,-1,-2,9,9,9,-9,-8,6,-10,-10,-2,4,1,-10,-9,8,-9,7,10,-4,-7,-10,1,3,-2,8,5,8,6,-10,-5,7,9,-2,9,-10,10,3,7,-3,-1,2,6,2,8,-9,10,-6,7,2,5,4,3,7,3,8,2,10,10,10,-3,2,2,-6,8,-8,-9,8,-10,-1,-4,9,-9,-4,10,-8,2,10,-9,-4,4,2,4,5,-7,-1,3,9,-6,8,6,10,-5,-1,-7,-1,-8,-4,3,8,-4,-10,-8,9,-1,-3,5,4,-6,-6,1,3,10,-4,7,-4,-3,-9,5,-9,5,3,5,-1,4,3,-5,-7,-8,-10,2,-7,10,8,-4,-10,-8,8], dtype = "uint64")#candidate|6430|(845,)|const|uint64
var_6431 = relay.var("var_6431", dtype = "float64", shape = (5, 84))#candidate|6431|(5, 84)|var|float64
var_6432 = relay.var("var_6432", dtype = "bool", shape = (280, 8))#candidate|6432|(280, 8)|var|bool
call_6429 = relay.TupleGetItem(func_4453_call(relay.reshape(const_6415.astype('uint64'), []), relay.reshape(const_6430.astype('uint64'), [5, 13, 13]), relay.reshape(var_6431.astype('float64'), [420,]), relay.reshape(var_6432.astype('bool'), [140, 16]), ), 1)
call_6433 = relay.TupleGetItem(func_4459_call(relay.reshape(const_6415.astype('uint64'), []), relay.reshape(const_6430.astype('uint64'), [5, 13, 13]), relay.reshape(var_6431.astype('float64'), [420,]), relay.reshape(var_6432.astype('bool'), [140, 16]), ), 1)
output = relay.Tuple([bop_6417,call_6429,const_6430,var_6431,var_6432,])
output2 = relay.Tuple([bop_6417,call_6433,const_6430,var_6431,var_6432,])
func_6443 = relay.Function([var_6416,var_6431,var_6432,], output)
mod['func_6443'] = func_6443
mod = relay.transform.InferType()(mod)
var_6444 = relay.var("var_6444", dtype = "uint64", shape = (14, 2, 6))#candidate|6444|(14, 2, 6)|var|uint64
var_6445 = relay.var("var_6445", dtype = "float64", shape = (5, 84))#candidate|6445|(5, 84)|var|float64
var_6446 = relay.var("var_6446", dtype = "bool", shape = (280, 8))#candidate|6446|(280, 8)|var|bool
output = func_6443(var_6444,var_6445,var_6446,)
func_6447 = relay.Function([var_6444,var_6445,var_6446,], output)
mutated_mod['func_6447'] = func_6447
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6514 = relay.var("var_6514", dtype = "float64", shape = (10, 13, 7))#candidate|6514|(10, 13, 7)|var|float64
uop_6515 = relay.sin(var_6514.astype('float64')) # shape=(10, 13, 7)
uop_6520 = relay.tan(uop_6515.astype('float32')) # shape=(10, 13, 7)
output = relay.Tuple([uop_6520,])
output2 = relay.Tuple([uop_6520,])
F = relay.Function([var_6514,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_6514,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
