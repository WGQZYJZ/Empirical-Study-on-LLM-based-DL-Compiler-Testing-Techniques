==========mod==========
#[version = "0.0.5"]
def @func_1658() -> Tensor[(15, 5, 9), float64] {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  log(%0) /* ty=Tensor[(15, 5, 9), float64] */
}

def @func_4418() -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], int64, Tensor[(1232), int64]) {
  %1 = @func_3907() /* ty=(Tensor[(15, 5, 9), uint64],) */;
  %2 = @func_3127() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %3 = %1.0;
  %4 = cast(%3, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %5 = reshape(%4, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint64] */;
  %6 = @func_2315(%5) /* ty=(Tensor[(15, 5, 9), uint8],) */;
  %7 = %6.0;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(1232), int64] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %10 = reshape(%9, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
  %11 = @func_4193(%10) /* ty=(Tensor[(15, 5, 9), float32], Tensor[(198), float64], int64, Tensor[(4, 308), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
  %12 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
  %13 = %2.0;
  %14 = log10(%8) /* ty=Tensor[(15, 5, 9), float64] */;
  %15 = %11.2;
  (%3, %12, %13, %14, %15, meta[relay.Constant][1] /* ty=Tensor[(1232), int64] */)
}

def @func_3063() -> (Tensor[(15, 5, 9), int32],) {
  %16 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
  %17 = %16.0;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 5, 9), float32] */, dtype="int32") /* ty=Tensor[(15, 5, 9), int32] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="int32") /* ty=Tensor[(15, 5, 9), int32] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %22 = subtract(%20, %21) /* ty=Tensor[(15, 5, 9), int32] */;
  (%22,)
}

def @func_3660() -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), int32]) {
  %23 = @func_3063() /* ty=(Tensor[(15, 5, 9), int32],) */;
  %24 = @func_2519() /* ty=Tensor[(15, 5, 9), uint64] */;
  %25 = %23.0;
  (%24, %25)
}

def @func_4632(%var_4613: Tensor[(210, 3), float64]) -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), int32], Tensor[(15, 5, 9), float64], Tensor[(10, 2, 5), float64], Tensor[(3, 66), float64], Tensor[(686), float64], Tensor[(546), int32], Tensor[(210, 3), float64], Tensor[(2240), bool], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) {
  %26 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %27 = @func_2850() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) */;
  %28 = @func_3828() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) */;
  %29 = %28.0;
  %30 = cast(%29, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %31 = @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */;
  %32 = %31.0;
  %33 = cast(%32, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(686), float64] */, dtype="float64") /* ty=Tensor[(686), float64] */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(686), float64] */, dtype="float64") /* ty=Tensor[(686), float64] */;
  %36 = cast(meta[relay.Constant][4] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %37 = cast(%var_4613, dtype="float64") /* ty=Tensor[(210, 3), float64] */;
  %38 = cast(meta[relay.Constant][5] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %39 = reshape(%34, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), float64] */;
  %40 = reshape(%35, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), float64] */;
  %41 = reshape(%36, newshape=[546]) /* ty=Tensor[(546), int32] */;
  %42 = reshape(%37, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %43 = reshape(%38, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %44 = @func_2433(%39, %40, %41, %42, %43) /* ty=(Tensor[(15, 5, 9), float64], Tensor[(3, 14, 15), float64], Tensor[(546), int32], Tensor[(3, 66), float64], Tensor[(630), float64], Tensor[(2240), bool], Tensor[(7, 7, 14), int32], Tensor[(7, 7, 14), int32]) */;
  %45 = @func_3127() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %46 = %45.0;
  %47 = cast(%46, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %48 = reshape(%47, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint64] */;
  %49 = %26.0;
  %50 = %27.1;
  %51 = @func_3277() /* ty=Tensor[(15, 5, 9), int32] */;
  %52 = sinh(%30) /* ty=Tensor[(15, 5, 9), float64] */;
  %53 = asin(%33) /* ty=Tensor[(10, 2, 5), float64] */;
  %54 = %44.3;
  %55 = @func_1909(%48) /* ty=Tensor[(15, 5, 9), float32] */;
  (%49, %50, %51, %52, %53, %54, meta[relay.Constant][3] /* ty=Tensor[(686), float64] */, meta[relay.Constant][4] /* ty=Tensor[(546), int32] */, %var_4613, meta[relay.Constant][5] /* ty=Tensor[(2240), bool] */, %46, %55)
}

def @func_1685() -> (Tensor[(15, 5, 9), float64],) {
  %56 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
  (%56,)
}

def @func_5241(%var_5237: Tensor[(6, 12, 16), float32]) -> Tensor[(6, 12, 16), float32] {
  %57 = cast(%var_5237, dtype="float32") /* ty=Tensor[(6, 12, 16), float32] */;
  atanh(%57) /* ty=Tensor[(6, 12, 16), float32] */
}

def @func_3028() -> (Tensor[(15, 5, 9), float32],) {
  %58 = @func_2850() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) */;
  %59 = %58.1;
  (%59,)
}

def @func_2850() -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) {
  %60 = @func_2140() /* ty=Tensor[(15, 5, 9), bool] */;
  %61 = cast(%60, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %62 = reshape(%61, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint64] */;
  %63 = @func_1909(%62) /* ty=Tensor[(15, 5, 9), float32] */;
  (%60, %63)
}

def @func_3503(%var_3496: Tensor[(15, 5, 9), float32]) -> (Tensor[(15, 5, 9), uint8],) {
  %64 = @func_2922() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(3, 11, 6), bool], Tensor[(198), float64]) */;
  %65 = %64.0;
  %66 = cast(%var_3496, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %70 = minimum(%68, %69) /* ty=Tensor[(15, 5, 9), uint8] */;
  (%70,)
}

def @func_4193(%var_4164: Tensor[(4, 308), int64]) -> (Tensor[(15, 5, 9), float32], Tensor[(198), float64], int64, Tensor[(4, 308), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) {
  %71 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
  %72 = cast(%71, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %73 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %74 = cast(%var_4164, dtype="int64") /* ty=Tensor[(4, 308), int64] */;
  %75 = reshape(%73, newshape=[]) /* ty=int64 */;
  %76 = reshape(%74, newshape=[7, 11, 16]) /* ty=Tensor[(7, 11, 16), int64] */;
  %77 = @func_3225(%75, %76) /* ty=(Tensor[(7, 11, 16), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(198), float64]) */;
  %78 = @func_3414() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
  %79 = @func_3660() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), int32]) */;
  %80 = @func_3828() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) */;
  %81 = @func_3630() /* ty=(Tensor[(13, 12, ?), uint64], Tensor[(15, 5, 9), float64]) */;
  %82 = cosh(%72) /* ty=Tensor[(15, 5, 9), float32] */;
  %83 = %77.4;
  %84 = %78.1;
  %85 = %79.0;
  %86 = %80.0;
  %87 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
  %88 = %81.1;
  (%82, %83, 6 /* ty=int64 */, %var_4164, %84, %85, %86, %87, %88)
}

def @func_5533() -> Tensor[(15, 5, 9), float64] {
  @func_4024() /* ty=Tensor[(15, 5, 9), float64] */
}

def @func_6250() -> (Tensor[(630), float64], Tensor[(176), uint16], Tensor[(2288), uint16], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float32]) {
  %89 = cast(meta[relay.Constant][6] /* ty=Tensor[(176), uint16] */, dtype="uint16") /* ty=Tensor[(176), uint16] */;
  %90 = cast(meta[relay.Constant][7] /* ty=Tensor[(2288), uint16] */, dtype="uint16") /* ty=Tensor[(2288), uint16] */;
  %91 = reshape(%89, newshape=[11, 1, 16]) /* ty=Tensor[(11, 1, 16), uint16] */;
  %92 = reshape(%90, newshape=[11, 13, 16]) /* ty=Tensor[(11, 13, 16), uint16] */;
  %93 = @func_2970(%91, %92) /* ty=(Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(11, 13, 16), bool]) */;
  %94 = @func_6212() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), uint64]) */;
  %95 = @func_4264() /* ty=Tensor[(15, 5, 9), uint64] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %97 = %93.1;
  %98 = %94.0;
  %99 = acos(%96) /* ty=Tensor[(15, 5, 9), float32] */;
  (%97, meta[relay.Constant][6] /* ty=Tensor[(176), uint16] */, meta[relay.Constant][7] /* ty=Tensor[(2288), uint16] */, %98, %99)
}

def @func_3828() -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) {
  %100 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %101 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
  %102 = %100.0;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %104 = reshape(%103, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float32] */;
  %105 = @func_3503(%104) /* ty=(Tensor[(15, 5, 9), uint8],) */;
  %106 = %105.0;
  %107 = cast(%106, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %108 = reshape(%107, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint64] */;
  %109 = @func_1909(%108) /* ty=Tensor[(15, 5, 9), float32] */;
  %110 = cast(%106, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %114 = floor_divide(%112, %113) /* ty=Tensor[(15, 5, 9), float32] */;
  %115 = cast(%114, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %116 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%109, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %119 = %101.0;
  %120 = greater(%117, %118) /* ty=Tensor[(15, 5, 9), bool] */;
  (%102, %119, %120)
}

def @func_1006(%var_993: Tensor[(3, 14, 15), float64]) -> Tensor[(3, 14, 15), float64] {
  %121 = cast(%var_993, dtype="float64") /* ty=Tensor[(3, 14, 15), float64] */;
  asinh(%121) /* ty=Tensor[(3, 14, 15), float64] */
}

def @func_5598() -> Tensor[(1, 13, 16), float64] {
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 13, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 13, 16), float64] */;
  acosh(%122) /* ty=Tensor[(1, 13, 16), float64] */
}

def @func_3414() -> (Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) {
  %123 = @func_2240() /* ty=Tensor[(15, 5, 9), uint64] */;
  %124 = @func_2145() /* ty=Tensor[(15, 5, 9), uint64] */;
  %125 = cast(%124, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %126 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%123, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %129 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %130 = cast(%123, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %131 = mod(%127, %128) /* ty=Tensor[(15, 5, 9), float32] */;
  %132 = %129.0;
  %133 = rsqrt(%130) /* ty=Tensor[(15, 5, 9), float64] */;
  (%131, %132, %133)
}

def @func_1813() -> (Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) {
  %134 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %135 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %136 = %135.0;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 5, 9), float64] */, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %141 = %134.0;
  %142 = logical_xor(%139, %140) /* ty=Tensor[(15, 5, 9), uint64] */;
  (%141, %142)
}

def @func_868(%var_853: Tensor[(14, 12, 8), float32]) -> Tensor[(14, 12, 8), float32] {
  %143 = cast(%var_853, dtype="float32") /* ty=Tensor[(14, 12, 8), float32] */;
  sinh(%143) /* ty=Tensor[(14, 12, 8), float32] */
}

def @func_2519() -> Tensor[(15, 5, 9), uint64] {
  @func_2145() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_4778() -> (Tensor[(15, 5, 9), bool], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), int32]) {
  %144 = @func_3127() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %145 = @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */;
  %146 = @func_3063() /* ty=(Tensor[(15, 5, 9), int32],) */;
  %147 = %144.0;
  %148 = %145.0;
  %149 = %146.0;
  (%147, %148, %149)
}

def @func_5802(%var_5776: Tensor[(15, 5, 9), uint64]) -> (Tensor[(15, 5, 9), float64], Tensor[(198), float64], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), uint32], Tensor[(15, 5, 9), float64]) {
  %150 = @func_3414() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
  %151 = @func_5552() /* ty=(Tensor[(15, 5, 9), float64], Tensor[(198), float64], Tensor[(198), float64]) */;
  %152 = @func_5136() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), uint64]) */;
  %153 = %152.1;
  %154 = cast(%var_5776, dtype="uint32") /* ty=Tensor[(15, 5, 9), uint32] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="uint32") /* ty=Tensor[(15, 5, 9), uint32] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %158 = @func_4951() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %159 = %150.1;
  %160 = %151.2;
  %161 = @func_2653() /* ty=Tensor[(15, 5, 9), float32] */;
  %162 = right_shift(%156, %157) /* ty=Tensor[(15, 5, 9), uint32] */;
  %163 = %158.0;
  (%159, %160, %161, %162, %163)
}

def @func_4121(%var_4028: Tensor[(12, 14, 6), int16], %var_4029: Tensor[(12, 14, 6), int16], %var_4098: Tensor[(12, 14, 6), float64]) -> (Tensor[(12, 14, 6), bool], Tensor[(12, 14, 6), float32], Tensor[(12, 14, 6), uint8], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64]) {
  %164 = cast(%var_4029, dtype="int16") /* ty=Tensor[(12, 14, 6), int16] */;
  %165 = shape_of(%var_4028, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_4028, dtype="int16") /* ty=Tensor[(12, 14, 6), int16] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %168 = minimum(%166, %167) /* ty=Tensor[(12, 14, 6), int16] */;
  %169 = cast(%var_4029, dtype="int8") /* ty=Tensor[(12, 14, 6), int8] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="int8") /* ty=Tensor[(12, 14, 6), int8] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %173 = left_shift(%171, %172) /* ty=Tensor[(12, 14, 6), int8] */;
  %174 = cast(%168, dtype="float32") /* ty=Tensor[(12, 14, 6), float32] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="float32") /* ty=Tensor[(12, 14, 6), float32] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %178 = floor_mod(%176, %177) /* ty=Tensor[(12, 14, 6), float32] */;
  %179 = cast(%173, dtype="uint8") /* ty=Tensor[(12, 14, 6), uint8] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="uint8") /* ty=Tensor[(12, 14, 6), uint8] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %183 = maximum(%181, %182) /* ty=Tensor[(12, 14, 6), uint8] */;
  %184 = cast(%var_4028, dtype="bool") /* ty=Tensor[(12, 14, 6), bool] */;
  %185 = shape_of(%var_4029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%var_4029, dtype="bool") /* ty=Tensor[(12, 14, 6), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = not_equal(%186, %187) /* ty=Tensor[(12, 14, 6), bool] */;
  %189 = cast(%188, dtype="bool") /* ty=Tensor[(12, 14, 6), bool] */;
  %190 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%183, dtype="bool") /* ty=Tensor[(12, 14, 6), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = cast(%var_4029, dtype="float64") /* ty=Tensor[(12, 14, 6), float64] */;
  %194 = sqrt(%193) /* ty=Tensor[(12, 14, 6), float64] */;
  %195 = cast(%var_4098, dtype="float32") /* ty=Tensor[(12, 14, 6), float32] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="float32") /* ty=Tensor[(12, 14, 6), float32] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %199 = cast(%194, dtype="uint8") /* ty=Tensor[(12, 14, 6), uint8] */;
  %200 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%168, dtype="uint8") /* ty=Tensor[(12, 14, 6), uint8] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %203 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %204 = @func_3414() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
  %205 = logical_or(%191, %192) /* ty=Tensor[(12, 14, 6), bool] */;
  %206 = mod(%197, %198) /* ty=Tensor[(12, 14, 6), float32] */;
  %207 = multiply(%201, %202) /* ty=Tensor[(12, 14, 6), uint8] */;
  %208 = %203.0;
  %209 = %204.1;
  (%205, %206, %207, %208, %209)
}

def @func_2433(%var_2322: Tensor[(7, 7, 14), float64], %var_2323: Tensor[(7, 7, 14), float64], %var_2377: Tensor[(546), int32], %var_2379: Tensor[(630), float64], %var_2380: Tensor[(2240), bool]) -> (Tensor[(15, 5, 9), float64], Tensor[(3, 14, 15), float64], Tensor[(546), int32], Tensor[(3, 66), float64], Tensor[(630), float64], Tensor[(2240), bool], Tensor[(7, 7, 14), int32], Tensor[(7, 7, 14), int32]) {
  %210 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %211 = cast(%var_2377, dtype="int32") /* ty=Tensor[(546), int32] */;
  %212 = cast(%var_2377, dtype="int32") /* ty=Tensor[(546), int32] */;
  %213 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 66), float64] */, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
  %214 = cast(%var_2379, dtype="float64") /* ty=Tensor[(630), float64] */;
  %215 = cast(%var_2380, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %216 = reshape(%211, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
  %217 = reshape(%212, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
  %218 = reshape(%213, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %219 = reshape(%214, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %220 = reshape(%215, newshape=[1120, 2]) /* ty=Tensor[(1120, 2), bool] */;
  %221 = @func_2061(%216, %217, %218, %219, %220) /* ty=(Tensor[(13, 3, 14), float64], Tensor[(3, 11, 6), bool], Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(198), float32], Tensor[(6, 13, 9), bool], Tensor[(1120, 2), bool]) */;
  %222 = cast(%var_2323, dtype="float32") /* ty=Tensor[(7, 7, 14), float32] */;
  %223 = erf(%222) /* ty=Tensor[(7, 7, 14), float32] */;
  %224 = cast(%var_2323, dtype="float64") /* ty=Tensor[(7, 7, 14), float64] */;
  %225 = shape_of(%var_2322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%var_2322, dtype="float64") /* ty=Tensor[(7, 7, 14), float64] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %228 = maximum(%226, %227) /* ty=Tensor[(7, 7, 14), float64] */;
  %229 = cast(%228, dtype="uint8") /* ty=Tensor[(7, 7, 14), uint8] */;
  %230 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%223, dtype="uint8") /* ty=Tensor[(7, 7, 14), uint8] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %233 = logical_xor(%231, %232) /* ty=Tensor[(7, 7, 14), uint8] */;
  %234 = cast(%var_2322, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
  %235 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%228, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %238 = not_equal(%236, %237) /* ty=Tensor[(7, 7, 14), bool] */;
  %239 = cast(%238, dtype="int32") /* ty=Tensor[(7, 7, 14), int32] */;
  %240 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%233, dtype="int32") /* ty=Tensor[(7, 7, 14), int32] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %243 = cast(%233, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
  %244 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%228, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = equal(%245, %246) /* ty=Tensor[(7, 7, 14), bool] */;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(7, 7, 14), float64] */;
  %249 = rsqrt(%248) /* ty=Tensor[(7, 7, 14), float64] */;
  %250 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 7, 14), float64] */, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
  %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%249, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %254 = greater_equal(%252, %253) /* ty=Tensor[(7, 7, 14), bool] */;
  %255 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 7, 14), bool] */, dtype="int32") /* ty=Tensor[(7, 7, 14), int32] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="int32") /* ty=Tensor[(7, 7, 14), int32] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %259 = %210.0;
  %260 = %221.2;
  %261 = minimum(%241, %242) /* ty=Tensor[(7, 7, 14), int32] */;
  %262 = left_shift(%257, %258) /* ty=Tensor[(7, 7, 14), int32] */;
  (%259, %260, %var_2377, meta[relay.Constant][10] /* ty=Tensor[(3, 66), float64] */, %var_2379, %var_2380, %261, %262)
}

def @func_6304() -> (Tensor[(15, 5, 9), uint64],) {
  %263 = @func_3369() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
  %264 = %263.2;
  (%264,)
}

def @func_6020(%var_5996: Tensor[(216, 1), float64], %var_5997: Tensor[(672, 2), float32], %var_6010: Tensor[(686, 1), float64], %var_6012: Tensor[(630), float64]) -> (Tensor[(15, 5, 9), float64], Tensor[(1344), float32], Tensor[(216, 1), float64], Tensor[(546), int32], Tensor[(686, 1), float64], Tensor[(546), int32], Tensor[(630), float64], Tensor[(2240, 1), bool], Tensor[(672, 2), float64]) {
  %265 = cast(%var_5996, dtype="float64") /* ty=Tensor[(216, 1), float64] */;
  %266 = cast(%var_5997, dtype="float32") /* ty=Tensor[(672, 2), float32] */;
  %267 = reshape(%265, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
  %268 = reshape(%266, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %269 = @func_987(%267, %268) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
  %270 = cast(%var_6010, dtype="float64") /* ty=Tensor[(686, 1), float64] */;
  %271 = cast(%var_6010, dtype="float64") /* ty=Tensor[(686, 1), float64] */;
  %272 = cast(meta[relay.Constant][13] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %273 = cast(%var_6012, dtype="float64") /* ty=Tensor[(630), float64] */;
  %274 = cast(meta[relay.Constant][14] /* ty=Tensor[(2240, 1), bool] */, dtype="bool") /* ty=Tensor[(2240, 1), bool] */;
  %275 = reshape(%270, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), float64] */;
  %276 = reshape(%271, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), float64] */;
  %277 = reshape(%272, newshape=[546]) /* ty=Tensor[(546), int32] */;
  %278 = reshape(%273, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %279 = reshape(%274, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %280 = @func_2433(%275, %276, %277, %278, %279) /* ty=(Tensor[(15, 5, 9), float64], Tensor[(3, 14, 15), float64], Tensor[(546), int32], Tensor[(3, 66), float64], Tensor[(630), float64], Tensor[(2240), bool], Tensor[(7, 7, 14), int32], Tensor[(7, 7, 14), int32]) */;
  %281 = cast(%var_5997, dtype="float64") /* ty=Tensor[(672, 2), float64] */;
  %282 = sqrt(%281) /* ty=Tensor[(672, 2), float64] */;
  %283 = cast(%282, dtype="float64") /* ty=Tensor[(672, 2), float64] */;
  %284 = @func_4024() /* ty=Tensor[(15, 5, 9), float64] */;
  %285 = %269.4;
  %286 = %280.2;
  %287 = asinh(%283) /* ty=Tensor[(672, 2), float64] */;
  (%284, %285, %var_5996, %286, %var_6010, meta[relay.Constant][13] /* ty=Tensor[(546), int32] */, %var_6012, meta[relay.Constant][14] /* ty=Tensor[(2240, 1), bool] */, %287)
}

def @func_396(%var_385: Tensor[(10, 16, 14), bool]) -> Tensor[(10, 16, 14), bool] {
  %288 = cast(%var_385, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %289 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(10, 16, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 16, 14), bool] */, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%290, %291) /* ty=Tensor[(10, 16, 14), bool] */
}

def @func_4024() -> Tensor[(15, 5, 9), float64] {
  %292 = @func_3828() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) */;
  %293 = %292.0;
  %294 = cast(%293, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  log2(%294) /* ty=Tensor[(15, 5, 9), float64] */
}

def @func_987(%var_942: Tensor[(12, 9, 2), float64], %var_971: Tensor[(1344), float32]) -> (Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) {
  %295 = cast(meta[relay.Constant][16] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %296 = cast(meta[relay.Constant][17] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %297 = reshape(%295, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
  %298 = reshape(%296, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %299 = @func_573(%297, %298) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
  %300 = cast(%var_971, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %301 = reshape(%300, newshape=[14, 12, 8]) /* ty=Tensor[(14, 12, 8), float32] */;
  %302 = cast(%var_942, dtype="float64") /* ty=Tensor[(12, 9, 2), float64] */;
  %303 = sin(%302) /* ty=Tensor[(12, 9, 2), float64] */;
  %304 = cast(%var_942, dtype="bool") /* ty=Tensor[(12, 9, 2), bool] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="bool") /* ty=Tensor[(12, 9, 2), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %308 = greater_equal(%306, %307) /* ty=Tensor[(12, 9, 2), bool] */;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(12, 9, 2), float64] */;
  %310 = %299.2;
  %311 = @func_868(%301) /* ty=Tensor[(14, 12, 8), float32] */;
  %312 = erf(%309) /* ty=Tensor[(12, 9, 2), float64] */;
  (%310, meta[relay.Constant][16] /* ty=Tensor[(420), float64] */, meta[relay.Constant][17] /* ty=Tensor[(2240), bool] */, %311, %var_971, %312)
}

def @func_2568() -> Tensor[(15, 5, 9), bool] {
  %313 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %313.0
}

def @func_5552() -> (Tensor[(15, 5, 9), float64], Tensor[(198), float64], Tensor[(198), float64]) {
  %314 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %316 = cast(meta[relay.Constant][18] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %317 = reshape(%315, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float32] */;
  %318 = reshape(%316, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %319 = @func_2789(%317, %318) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(198), float64], Tensor[(198), float64]) */;
  %320 = %319.1;
  (%314, %320, meta[relay.Constant][18] /* ty=Tensor[(198), float64] */)
}

def @func_5855() -> Tensor[(15, 5, 9), bool] {
  @func_2568() /* ty=Tensor[(15, 5, 9), bool] */
}

def @main(%var_6514: Tensor[(10, 13, 7), float64]) -> (Tensor[(10, 13, 7), float32],) {
  %321 = cast(%var_6514, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %322 = sin(%321) /* ty=Tensor[(10, 13, 7), float64] */;
  %323 = cast(%322, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %324 = tan(%323) /* ty=Tensor[(10, 13, 7), float32] */;
  (%324,)
}

def @func_3945() -> (Tensor[(10, 2, 5), float64],) {
  %325 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %326 = sinh(%325) /* ty=Tensor[(10, 2, 5), float64] */;
  %327 = cast(%326, dtype="uint32") /* ty=Tensor[(10, 2, 5), uint32] */;
  %328 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(10, 2, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 2, 5), float64] */, dtype="uint32") /* ty=Tensor[(10, 2, 5), uint32] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %331 = logical_xor(%329, %330) /* ty=Tensor[(10, 2, 5), uint32] */;
  %332 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %336 = divide(%334, %335) /* ty=Tensor[(10, 2, 5), float64] */;
  (%336,)
}

def @func_3723() -> (Tensor[(15, 5, 9), bool],) {
  %337 = @func_2140() /* ty=Tensor[(15, 5, 9), bool] */;
  (%337,)
}

def @func_3907() -> (Tensor[(15, 5, 9), uint64],) {
  %338 = @func_2519() /* ty=Tensor[(15, 5, 9), uint64] */;
  (%338,)
}

def @func_3469(%var_3425: Tensor[(216), float64], %var_3441: Tensor[(15, 5, 9), bool], %var_3465: Tensor[(2240), bool]) -> (Tensor[(1344), float32], Tensor[(216), float64], Tensor[(1344), float32], Tensor[(15, 5, 9), bool], Tensor[(14, 12, 8), float32], Tensor[(2240), bool]) {
  %339 = cast(%var_3425, dtype="float64") /* ty=Tensor[(216), float64] */;
  %340 = cast(meta[relay.Constant][20] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %341 = reshape(%339, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
  %342 = reshape(%340, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %343 = @func_987(%341, %342) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
  %344 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %345 = %344.0;
  %346 = cast(%var_3441, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %350 = %343.4;
  %351 = cast(%350, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %352 = cast(%var_3465, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %353 = reshape(%351, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %354 = reshape(%352, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %355 = @func_1210(%353, %354) /* ty=(Tensor[(11, 12, 7), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) */;
  %356 = greater_equal(%348, %349) /* ty=Tensor[(15, 5, 9), bool] */;
  %357 = %355.1;
  (%350, %var_3425, meta[relay.Constant][20] /* ty=Tensor[(1344), float32] */, %356, %357, %var_3465)
}

def @func_3630() -> (Tensor[(13, 12, ?), uint64], Tensor[(15, 5, 9), float64]) {
  %358 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 12, 1), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
  %359 = asin(%358) /* ty=Tensor[(13, 12, 1), float64] */;
  %360 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 12, 1), float64] */, dtype="uint64") /* ty=Tensor[(13, 12, 1), uint64] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="uint64") /* ty=Tensor[(13, 12, 1), uint64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %364 = @func_3369() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
  %365 = left_shift(%362, %363) /* ty=Tensor[(13, 12, ?), uint64] */;
  %366 = %364.1;
  (%365, %366)
}

def @func_4501(%var_4494: uint64, %var_4495: Tensor[(845), uint64], %var_4497: Tensor[(560, 4), bool]) -> (Tensor[(15, 5, 9), int32], Tensor[(420), float64], uint64, Tensor[(845), uint64], Tensor[(10, 42), float64], Tensor[(560, 4), bool]) {
  %367 = @func_3063() /* ty=(Tensor[(15, 5, 9), int32],) */;
  %368 = cast(%var_4494, dtype="uint64") /* ty=uint64 */;
  %369 = cast(%var_4495, dtype="uint64") /* ty=Tensor[(845), uint64] */;
  %370 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 42), float64] */, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
  %371 = cast(%var_4497, dtype="bool") /* ty=Tensor[(560, 4), bool] */;
  %372 = reshape(%368, newshape=[]) /* ty=uint64 */;
  %373 = reshape(%369, newshape=[5, 13, 13]) /* ty=Tensor[(5, 13, 13), uint64] */;
  %374 = reshape(%370, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %375 = reshape(%371, newshape=[140, 16]) /* ty=Tensor[(140, 16), bool] */;
  %376 = @func_4453(%372, %373, %374, %375) /* ty=(Tensor[(5, 13, 13), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(140, 16), float64]) */;
  %377 = %367.0;
  %378 = %376.3;
  (%377, %378, %var_4494, %var_4495, meta[relay.Constant][22] /* ty=Tensor[(10, 42), float64] */, %var_4497)
}

def @func_5214(%var_5181: Tensor[(10, 2, 5), float64], %var_5206: Tensor[(10, 2, 5), float64]) -> (Tensor[(10, 2, 5), bool], Tensor[(15, 5, 9), float64], Tensor[(10, 2, 5), float64]) {
  %379 = @func_5136() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), uint64]) */;
  %380 = %379.2;
  %381 = cast(%var_5181, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%380, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %385 = cast(%var_5206, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %386 = shape_of(%var_5181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_5181, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %389 = less(%383, %384) /* ty=Tensor[(10, 2, 5), bool] */;
  %390 = @func_4024() /* ty=Tensor[(15, 5, 9), float64] */;
  %391 = mod(%387, %388) /* ty=Tensor[(10, 2, 5), float64] */;
  (%389, %390, %391)
}

def @func_5623() -> (Tensor[(10, 2, 5), float64],) {
  %392 = @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */;
  %393 = %392.0;
  (%393,)
}

def @func_5285(%var_5277: Tensor[(15, 5, 9), bool]) -> (Tensor[(15, 5, 9), int32],) {
  %394 = @func_2850() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) */;
  %395 = %394.0;
  %396 = cast(%var_5277, dtype="int32") /* ty=Tensor[(15, 5, 9), int32] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="int32") /* ty=Tensor[(15, 5, 9), int32] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %400 = bitwise_xor(%398, %399) /* ty=Tensor[(15, 5, 9), int32] */;
  (%400,)
}

def @func_6085(%var_6068: Tensor[(14, 12, 8), float32], %var_6076: Tensor[(14, 12, 8), float32], %var_6082: Tensor[(36, 6), float64]) -> (Tensor[(14, 12, 8), float32], Tensor[(14, 12, 8), bool], Tensor[(2240), bool], Tensor[(36, 6), float64]) {
  %401 = @func_3109() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32]) */;
  %402 = %401.1;
  %403 = cast(%var_6068, dtype="float32") /* ty=Tensor[(14, 12, 8), float32] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="float32") /* ty=Tensor[(14, 12, 8), float32] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %407 = cast(%var_6076, dtype="bool") /* ty=Tensor[(14, 12, 8), bool] */;
  %408 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%402, dtype="bool") /* ty=Tensor[(14, 12, 8), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %411 = cast(%var_6082, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %412 = not_equal(%409, %410) /* ty=Tensor[(14, 12, 8), bool] */;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(14, 12, 8), float32] */;
  %414 = reshape(%411, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
  %415 = reshape(%413, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %416 = @func_987(%414, %415) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
  %417 = power(%405, %406) /* ty=Tensor[(14, 12, 8), float32] */;
  %418 = %416.2;
  (%417, %412, %418, %var_6082)
}

def @func_5721() -> (Tensor[(15, 5, 9), bool],) {
  %419 = @func_3723() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %420 = %419.0;
  (%420,)
}

def @func_2204(%var_2147: Tensor[(13, 1, 16), float64], %var_2177: Tensor[(630), float64], %var_2181: Tensor[(13, 12, 16), int64]) -> (Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(15, 5, 9), float64], Tensor[(630), float64], Tensor[(546), int32], Tensor[(198), float64], Tensor[(630), float64], Tensor[(13, 12, 16), float64], Tensor[(10, 16, 14), bool], Tensor[(13, ?, 16), float64]) {
  %421 = cast(meta[relay.Constant][23] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %422 = cast(meta[relay.Constant][24] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %423 = reshape(%421, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
  %424 = reshape(%422, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %425 = @func_573(%423, %424) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
  %426 = cast(meta[relay.Constant][25] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %427 = cast(meta[relay.Constant][25] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %428 = cast(meta[relay.Constant][26] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %429 = cast(%var_2177, dtype="float64") /* ty=Tensor[(630), float64] */;
  %430 = %425.3;
  %431 = cast(%430, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %432 = reshape(%426, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
  %433 = reshape(%427, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
  %434 = reshape(%428, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %435 = reshape(%429, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %436 = reshape(%431, newshape=[1120, 2]) /* ty=Tensor[(1120, 2), bool] */;
  %437 = @func_2061(%432, %433, %434, %435, %436) /* ty=(Tensor[(13, 3, 14), float64], Tensor[(3, 11, 6), bool], Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(198), float32], Tensor[(6, 13, 9), bool], Tensor[(1120, 2), bool]) */;
  %438 = cast(%var_2147, dtype="float64") /* ty=Tensor[(13, 1, 16), float64] */;
  %439 = sigmoid(%438) /* ty=Tensor[(13, 1, 16), float64] */;
  %440 = cast(%var_2147, dtype="int64") /* ty=Tensor[(13, 1, 16), int64] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="int64") /* ty=Tensor[(13, 1, 16), int64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %444 = maximum(%442, %443) /* ty=Tensor[(13, ?, 16), int64] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(13, ?, 16), float64] */;
  %446 = cast(%var_2181, dtype="float64") /* ty=Tensor[(13, 12, 16), float64] */;
  %447 = cast(%430, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %448 = reshape(%447, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %449 = @func_757(%448) /* ty=(Tensor[(6, 13, 9), bool], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) */;
  %450 = cast(%444, dtype="float64") /* ty=Tensor[(13, ?, 16), float64] */;
  %451 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
  %452 = %437.3;
  %453 = floor_mod(%445, %446) /* ty=Tensor[(13, 12, 16), float64] */;
  %454 = %449.1;
  %455 = asin(%450) /* ty=Tensor[(13, ?, 16), float64] */;
  (%430, meta[relay.Constant][23] /* ty=Tensor[(420), float64] */, meta[relay.Constant][24] /* ty=Tensor[(2240), bool] */, %451, %452, meta[relay.Constant][25] /* ty=Tensor[(546), int32] */, meta[relay.Constant][26] /* ty=Tensor[(198), float64] */, %var_2177, %453, %454, %455)
}

def @func_2103(%var_2090: Tensor[(198), float64]) -> (Tensor[(3, 11, 6), bool], Tensor[(198), float64], Tensor[(15, 5, 9), float32]) {
  %456 = cast(%var_2090, dtype="float64") /* ty=Tensor[(198), float64] */;
  %457 = cast(%var_2090, dtype="float64") /* ty=Tensor[(198), float64] */;
  %458 = reshape(%456, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
  %459 = reshape(%457, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
  %460 = @func_1639(%458, %459) /* ty=(Tensor[(3, 11, 6), bool],) */;
  %461 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %463 = %460.0;
  %464 = sqrt(%462) /* ty=Tensor[(15, 5, 9), float32] */;
  (%463, %var_2090, %464)
}

def @func_4951() -> (Tensor[(15, 5, 9), float64],) {
  %465 = @func_3369() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
  %466 = %465.1;
  (%466,)
}

def @func_2240() -> Tensor[(15, 5, 9), uint64] {
  @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_2653() -> Tensor[(15, 5, 9), float32] {
  %467 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  cos(%468) /* ty=Tensor[(15, 5, 9), float32] */
}

def @func_3277() -> Tensor[(15, 5, 9), int32] {
  %469 = @func_3063() /* ty=(Tensor[(15, 5, 9), int32],) */;
  %469.0
}

def @func_5136() -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), uint64]) {
  %470 = @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */;
  %471 = %470.0;
  %472 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 2, 5), float64] */, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %476 = greater_equal(%474, %475) /* ty=Tensor[(10, 2, 5), bool] */;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %478 = @func_3660() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), int32]) */;
  %479 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
  %480 = @func_2145() /* ty=Tensor[(15, 5, 9), uint64] */;
  %481 = acos(%477) /* ty=Tensor[(10, 2, 5), float64] */;
  %482 = %478.0;
  (%479, %480, %481, %482)
}

def @func_5443() -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) {
  %483 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %484 = %483.0;
  %485 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 5, 9), float64] */, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
  %490 = less_equal(%487, %488) /* ty=Tensor[(15, 5, 9), bool] */;
  %491 = %489.0;
  %492 = @func_4024() /* ty=Tensor[(15, 5, 9), float64] */;
  %493 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
  (%490, %491, %492, %493)
}

def @func_4264() -> Tensor[(15, 5, 9), uint64] {
  %494 = @func_1813() /* ty=(Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
  %494.1
}

def @func_2061(%var_1982: Tensor[(13, 3, 14), int32], %var_1983: Tensor[(13, 3, 14), int32], %var_1992: Tensor[(198), float64], %var_2003: Tensor[(630), float64], %var_2035: Tensor[(1120, 2), bool]) -> (Tensor[(13, 3, 14), float64], Tensor[(3, 11, 6), bool], Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(198), float32], Tensor[(6, 13, 9), bool], Tensor[(1120, 2), bool]) {
  %495 = cast(%var_1983, dtype="int32") /* ty=Tensor[(13, 3, 14), int32] */;
  %496 = shape_of(%var_1982, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%var_1982, dtype="int32") /* ty=Tensor[(13, 3, 14), int32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %499 = logical_xor(%497, %498) /* ty=Tensor[(13, 3, 14), int32] */;
  %500 = cast(%var_1983, dtype="float64") /* ty=Tensor[(13, 3, 14), float64] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="float64") /* ty=Tensor[(13, 3, 14), float64] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %504 = cast(%var_1992, dtype="float64") /* ty=Tensor[(198), float64] */;
  %505 = cast(%var_1992, dtype="float64") /* ty=Tensor[(198), float64] */;
  %506 = reshape(%504, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
  %507 = reshape(%505, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
  %508 = @func_1639(%506, %507) /* ty=(Tensor[(3, 11, 6), bool],) */;
  %509 = cast(%var_2003, dtype="float64") /* ty=Tensor[(630), float64] */;
  %510 = reshape(%509, newshape=[3, 14, 15]) /* ty=Tensor[(3, 14, 15), float64] */;
  %511 = cast(meta[relay.Constant][29] /* ty=Tensor[(198), float64] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %512 = shape_of(%var_1992, dtype="int32") /* ty=Tensor[(1), int32] */;
  %513 = cast(%var_1992, dtype="float32") /* ty=Tensor[(198), float32] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?), float32] */;
  %515 = cast(%var_2035, dtype="bool") /* ty=Tensor[(1120, 2), bool] */;
  %516 = reshape(%515, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %517 = @func_757(%516) /* ty=(Tensor[(6, 13, 9), bool], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) */;
  %518 = add(%502, %503) /* ty=Tensor[(13, 3, 14), float64] */;
  %519 = %508.0;
  %520 = @func_1006(%510) /* ty=Tensor[(3, 14, 15), float64] */;
  %521 = power(%513, %514) /* ty=Tensor[(198), float32] */;
  %522 = %517.0;
  (%518, %519, %520, %var_2003, %521, %522, %var_2035)
}

def @func_3976() -> (Tensor[(15, 5, 9), float32], Tensor[(2240), bool], Tensor[(216), float64], Tensor[(1344), float32]) {
  %523 = @func_2922() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(3, 11, 6), bool], Tensor[(198), float64]) */;
  %524 = cast(meta[relay.Constant][30] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %525 = cast(meta[relay.Constant][31] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %526 = reshape(%524, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
  %527 = reshape(%525, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %528 = @func_987(%526, %527) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
  %529 = %523.0;
  %530 = %528.0;
  (%529, %530, meta[relay.Constant][30] /* ty=Tensor[(216), float64] */, meta[relay.Constant][31] /* ty=Tensor[(1344), float32] */)
}

def @func_5334() -> (Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), float64], Tensor[(216), float64], Tensor[(216), float64]) {
  %531 = @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */;
  %532 = %531.0;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %534 = cast(meta[relay.Constant][32] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %535 = reshape(%534, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %536 = @func_4299(%535) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(2240), bool], Tensor[(216), float64], Tensor[(2240), bool], Tensor[(16, 10, 13), bool], Tensor[(2080), float32]) */;
  %537 = cos(%533) /* ty=Tensor[(10, 2, 5), float64] */;
  %538 = @func_4024() /* ty=Tensor[(15, 5, 9), float64] */;
  %539 = %536.2;
  (%537, %538, %539, meta[relay.Constant][32] /* ty=Tensor[(216), float64] */)
}

def @func_2140() -> Tensor[(15, 5, 9), bool] {
  %540 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %540.0
}

def @func_1210(%var_1187: Tensor[(1344), float32], %var_1205: Tensor[(2240), bool]) -> (Tensor[(11, 12, 7), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) {
  %541 = cast(meta[relay.Constant][34] /* ty=Tensor[(11, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 7), float32] */;
  %542 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(11, 12, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 7), float32] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %545 = cast(%var_1187, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %546 = reshape(%545, newshape=[14, 12, 8]) /* ty=Tensor[(14, 12, 8), float32] */;
  %547 = cast(%var_1205, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %548 = reshape(%547, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
  %549 = floor_divide(%543, %544) /* ty=Tensor[(11, 12, 7), float32] */;
  %550 = @func_868(%546) /* ty=Tensor[(14, 12, 8), float32] */;
  %551 = @func_396(%548) /* ty=Tensor[(10, 16, 14), bool] */;
  (%549, %550, %var_1187, %551, %var_1205)
}

def @func_2922() -> (Tensor[(15, 5, 9), float32], Tensor[(3, 11, 6), bool], Tensor[(198), float64]) {
  %552 = cast(meta[relay.Constant][35] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %553 = cast(meta[relay.Constant][35] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %554 = reshape(%552, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
  %555 = reshape(%553, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
  %556 = @func_1639(%554, %555) /* ty=(Tensor[(3, 11, 6), bool],) */;
  %557 = @func_2653() /* ty=Tensor[(15, 5, 9), float32] */;
  %558 = %556.0;
  (%557, %558, meta[relay.Constant][35] /* ty=Tensor[(198), float64] */)
}

def @func_4900(%var_4860: Tensor[(1, 1232), int64], %var_4863: uint64, %var_4864: Tensor[(845), uint64]) -> (Tensor[(15, 5, 9), float32], Tensor[(1, 1232), int64], Tensor[(15, 5, 9), int32], Tensor[(845), uint64], Tensor[(2240), bool], Tensor[(4, 308), float64], Tensor[(3, 14, 15), float64], Tensor[(546, 1), int32], Tensor[(198), float64], Tensor[(630), float64]) {
  %559 = @func_3723() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %560 = %559.0;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %562 = cast(%var_4863, dtype="uint64") /* ty=uint64 */;
  %563 = cast(%var_4864, dtype="uint64") /* ty=Tensor[(845), uint64] */;
  %564 = cast(meta[relay.Constant][36] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %565 = reshape(%562, newshape=[]) /* ty=uint64 */;
  %566 = reshape(%563, newshape=[845]) /* ty=Tensor[(845), uint64] */;
  %567 = reshape(%564, newshape=[560, 4]) /* ty=Tensor[(560, 4), bool] */;
  %568 = @func_4501(%565, %566, %567) /* ty=(Tensor[(15, 5, 9), int32], Tensor[(420), float64], uint64, Tensor[(845), uint64], Tensor[(10, 42), float64], Tensor[(560, 4), bool]) */;
  %569 = cast(%var_4860, dtype="int64") /* ty=Tensor[(1, 1232), int64] */;
  %570 = reshape(%569, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
  %571 = @func_4193(%570) /* ty=(Tensor[(15, 5, 9), float32], Tensor[(198), float64], int64, Tensor[(4, 308), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
  %572 = %571.3;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(4, 308), float64] */;
  %574 = cast(%var_4863, dtype="float64") /* ty=float64 */;
  %575 = cast(meta[relay.Constant][37] /* ty=Tensor[(546, 1), int32] */, dtype="int32") /* ty=Tensor[(546, 1), int32] */;
  %576 = cast(meta[relay.Constant][37] /* ty=Tensor[(546, 1), int32] */, dtype="int32") /* ty=Tensor[(546, 1), int32] */;
  %577 = cast(meta[relay.Constant][38] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %578 = cast(meta[relay.Constant][39] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %579 = cast(meta[relay.Constant][36] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %580 = reshape(%575, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
  %581 = reshape(%576, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
  %582 = reshape(%577, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %583 = reshape(%578, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %584 = reshape(%579, newshape=[1120, 2]) /* ty=Tensor[(1120, 2), bool] */;
  %585 = @func_2061(%580, %581, %582, %583, %584) /* ty=(Tensor[(13, 3, 14), float64], Tensor[(3, 11, 6), bool], Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(198), float32], Tensor[(6, 13, 9), bool], Tensor[(1120, 2), bool]) */;
  %586 = asinh(%561) /* ty=Tensor[(15, 5, 9), float32] */;
  %587 = %568.0;
  %588 = power(%573, %574) /* ty=Tensor[(4, 308), float64] */;
  %589 = %585.2;
  (%586, %var_4860, %587, %var_4864, meta[relay.Constant][36] /* ty=Tensor[(2240), bool] */, %588, %589, meta[relay.Constant][37] /* ty=Tensor[(546, 1), int32] */, meta[relay.Constant][38] /* ty=Tensor[(198), float64] */, meta[relay.Constant][39] /* ty=Tensor[(630), float64] */)
}

def @func_5977() -> (Tensor[(3, 9, 7), float32], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), bool]) {
  %590 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %591 = @func_5623() /* ty=(Tensor[(10, 2, 5), float64],) */;
  %592 = @func_3828() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) */;
  %593 = tan(%590) /* ty=Tensor[(3, 9, 7), float32] */;
  %594 = %591.0;
  %595 = %592.0;
  (%593, %594, %595)
}

def @func_5585(%var_5558: Tensor[(1, 16, 15), float64]) -> (Tensor[(15, 5, 9), uint64], Tensor[(1, 16, 15), float64], Tensor[(13, 12, ?), uint64]) {
  %596 = @func_3369() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
  %597 = cast(%var_5558, dtype="float64") /* ty=Tensor[(1, 16, 15), float64] */;
  %598 = asin(%597) /* ty=Tensor[(1, 16, 15), float64] */;
  %599 = cast(%598, dtype="float64") /* ty=Tensor[(1, 16, 15), float64] */;
  %600 = @func_3630() /* ty=(Tensor[(13, 12, ?), uint64], Tensor[(15, 5, 9), float64]) */;
  %601 = %596.0;
  %602 = atanh(%599) /* ty=Tensor[(1, 16, 15), float64] */;
  %603 = %600.0;
  (%601, %602, %603)
}

def @func_4252(%var_4246: Tensor[(16, 10, 13), float32]) -> (Tensor[(16, 10, 13), bool],) {
  %604 = cast(%var_4246, dtype="bool") /* ty=Tensor[(16, 10, 13), bool] */;
  %605 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(16, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 10, 13), float32] */, dtype="bool") /* ty=Tensor[(16, 10, 13), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %608 = less_equal(%606, %607) /* ty=Tensor[(16, 10, 13), bool] */;
  (%608,)
}

def @func_3127() -> (Tensor[(15, 5, 9), bool],) {
  %609 = @func_2140() /* ty=Tensor[(15, 5, 9), bool] */;
  (%609,)
}

def @func_4231(%var_4218: Tensor[(15, 5, 9), float64]) -> (Tensor[(15, 5, 9), float64],) {
  %610 = @func_3414() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
  %611 = %610.2;
  %612 = cast(%var_4218, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %616 = divide(%614, %615) /* ty=Tensor[(15, 5, 9), float64] */;
  (%616,)
}

def @func_2145() -> Tensor[(15, 5, 9), uint64] {
  %617 = @func_1813() /* ty=(Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
  %617.1
}

def @func_5524() -> Tensor[(15, 5, 9), uint64] {
  @func_2519() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_2733(%var_2673: Tensor[(6, 11, 2), float32], %var_2678: Tensor[(36, 6), float64], %var_2707: Tensor[(420, 1), float64]) -> (Tensor[(6, 11, 2), float32], Tensor[(2240), bool], Tensor[(36, 6), float64], Tensor[(1344), float32], Tensor[(2240), bool], Tensor[(2240), bool], Tensor[(420, 1), float64], Tensor[(10, 16, 14), bool]) {
  %618 = cast(%var_2673, dtype="float32") /* ty=Tensor[(6, 11, 2), float32] */;
  %619 = cast(%var_2678, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %620 = cast(meta[relay.Constant][42] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %621 = reshape(%619, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
  %622 = reshape(%620, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %623 = @func_987(%621, %622) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
  %624 = cast(%var_2678, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %625 = cast(meta[relay.Constant][42] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %626 = reshape(%624, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
  %627 = reshape(%625, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %628 = @func_987(%626, %627) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
  %629 = cast(%var_2707, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
  %630 = %628.0;
  %631 = cast(%630, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %632 = reshape(%629, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
  %633 = reshape(%631, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %634 = @func_573(%632, %633) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
  %635 = %634.2;
  %636 = cast(%635, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %637 = reshape(%636, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
  %638 = log10(%618) /* ty=Tensor[(6, 11, 2), float32] */;
  %639 = %623.0;
  %640 = @func_396(%637) /* ty=Tensor[(10, 16, 14), bool] */;
  (%638, %639, %var_2678, meta[relay.Constant][42] /* ty=Tensor[(1344), float32] */, %630, %635, %var_2707, %640)
}

def @func_3557() -> (Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), uint8], Tensor[(15, 5, 9), bool]) {
  %641 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
  %642 = %641.0;
  %643 = cast(%642, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %644 = reshape(%643, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint64] */;
  %645 = @func_2315(%644) /* ty=(Tensor[(15, 5, 9), uint8],) */;
  %646 = %645.0;
  %647 = @func_2140() /* ty=Tensor[(15, 5, 9), bool] */;
  (%642, %646, %647)
}

def @func_573(%var_514: Tensor[(7, 10, 6), float64], %var_530: Tensor[(2240), bool]) -> (Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) {
  %648 = cast(%var_514, dtype="float64") /* ty=Tensor[(7, 10, 6), float64] */;
  %649 = erf(%648) /* ty=Tensor[(7, 10, 6), float64] */;
  %650 = cast(%649, dtype="float64") /* ty=Tensor[(7, 10, 6), float64] */;
  %651 = log(%650) /* ty=Tensor[(7, 10, 6), float64] */;
  %652 = cast(%var_514, dtype="uint32") /* ty=Tensor[(7, 10, 6), uint32] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="uint32") /* ty=Tensor[(7, 10, 6), uint32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %656 = cast(%var_530, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %657 = reshape(%656, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
  %658 = cast(%var_530, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %659 = reshape(%658, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
  %660 = @func_396(%659) /* ty=Tensor[(10, 16, 14), bool] */;
  %661 = cast(%660, dtype="float64") /* ty=Tensor[(10, 16, 14), float64] */;
  %662 = log10(%661) /* ty=Tensor[(10, 16, 14), float64] */;
  %663 = cast(%660, dtype="float64") /* ty=Tensor[(10, 16, 14), float64] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%662, dtype="float64") /* ty=Tensor[(10, 16, 14), float64] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %667 = cast(%662, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %668 = reshape(%667, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
  %669 = @func_396(%668) /* ty=Tensor[(10, 16, 14), bool] */;
  %670 = cast(%669, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %671 = reshape(%670, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
  %672 = subtract(%654, %655) /* ty=Tensor[(7, 10, 6), uint32] */;
  %673 = @func_396(%657) /* ty=Tensor[(10, 16, 14), bool] */;
  %674 = divide(%665, %666) /* ty=Tensor[(10, 16, 14), float64] */;
  %675 = @func_396(%671) /* ty=Tensor[(10, 16, 14), bool] */;
  (%672, %673, %var_530, %674, %669, %675)
}

def @func_1639(%var_1632: Tensor[(3, 11, 6), float64], %var_1633: Tensor[(3, 11, 6), float64]) -> (Tensor[(3, 11, 6), bool],) {
  %676 = cast(%var_1633, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %677 = shape_of(%var_1632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_1632, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = less_equal(%678, %679) /* ty=Tensor[(3, 11, 6), bool] */;
  (%680,)
}

def @func_757(%var_746: Tensor[(2240), bool]) -> (Tensor[(6, 13, 9), bool], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) {
  %681 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 13, 9), float32] */, dtype="bool") /* ty=Tensor[(6, 13, 9), bool] */;
  %682 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(6, 13, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 13, 9), float32] */, dtype="bool") /* ty=Tensor[(6, 13, 9), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %685 = cast(%var_746, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %686 = reshape(%685, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
  %687 = greater_equal(%683, %684) /* ty=Tensor[(6, 13, 9), bool] */;
  %688 = @func_396(%686) /* ty=Tensor[(10, 16, 14), bool] */;
  (%687, %688, %var_746)
}

def @func_1787() -> (Tensor[(15, 5, 9), bool],) {
  %689 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %692 = exp(%691) /* ty=Tensor[(15, 5, 9), float64] */;
  %693 = cast(%690, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%692, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %697 = equal(%695, %696) /* ty=Tensor[(15, 5, 9), bool] */;
  (%697,)
}

def @func_1822() -> Tensor[(15, 5, 9), uint64] {
  %698 = @func_1813() /* ty=(Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
  %698.1
}

def @func_5887() -> (Tensor[(15, 5, 9), int32],) {
  %699 = @func_4778() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), int32]) */;
  %700 = %699.2;
  (%700,)
}

def @func_4453(%var_4439: uint64, %var_4440: Tensor[(5, 13, 13), uint64], %var_4448: Tensor[(420), float64], %var_4449: Tensor[(140, 16), bool]) -> (Tensor[(5, 13, 13), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(140, 16), float64]) {
  %701 = cast(%var_4439, dtype="uint64") /* ty=uint64 */;
  %702 = cast(%var_4440, dtype="uint64") /* ty=Tensor[(5, 13, 13), uint64] */;
  %703 = cast(%var_4448, dtype="float64") /* ty=Tensor[(420), float64] */;
  %704 = cast(%var_4449, dtype="bool") /* ty=Tensor[(140, 16), bool] */;
  %705 = reshape(%703, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
  %706 = reshape(%704, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %707 = @func_573(%705, %706) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
  %708 = cast(%var_4449, dtype="float64") /* ty=Tensor[(140, 16), float64] */;
  %709 = logical_xor(%701, %702) /* ty=Tensor[(5, 13, 13), uint64] */;
  %710 = @func_2240() /* ty=Tensor[(15, 5, 9), uint64] */;
  %711 = %707.3;
  %712 = erf(%708) /* ty=Tensor[(140, 16), float64] */;
  (%709, %710, %711, %var_4448, %712)
}

def @func_3225(%var_3163: int64, %var_3164: Tensor[(7, 11, 16), int64]) -> (Tensor[(7, 11, 16), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(198), float64]) {
  %713 = cast(%var_3163, dtype="int64") /* ty=int64 */;
  %714 = cast(%var_3164, dtype="int64") /* ty=Tensor[(7, 11, 16), int64] */;
  %715 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
  %716 = @func_2922() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(3, 11, 6), bool], Tensor[(198), float64]) */;
  %717 = left_shift(%713, %714) /* ty=Tensor[(7, 11, 16), int64] */;
  %718 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
  %719 = %715.0;
  %720 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
  %721 = %716.2;
  (%717, %718, %719, %720, %721)
}

def @func_6212() -> (Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), uint64]) {
  %722 = @func_5721() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %723 = @func_2653() /* ty=Tensor[(15, 5, 9), float32] */;
  %724 = %722.0;
  %725 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
  (%723, %724, %725)
}

def @func_1909(%var_1899: Tensor[(15, 5, 9), uint64]) -> Tensor[(15, 5, 9), float32] {
  %726 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
  %727 = cast(%var_1899, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%729, %730) /* ty=Tensor[(15, 5, 9), float32] */
}

def @func_4299(%var_4287: Tensor[(216), float64]) -> (Tensor[(15, 5, 9), bool], Tensor[(2240), bool], Tensor[(216), float64], Tensor[(2240), bool], Tensor[(16, 10, 13), bool], Tensor[(2080), float32]) {
  %731 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %732 = cast(%var_4287, dtype="float64") /* ty=Tensor[(216), float64] */;
  %733 = %731.0;
  %734 = cast(%733, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %735 = cast(meta[relay.Constant][45] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %736 = reshape(%732, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %737 = reshape(%734, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %738 = reshape(%735, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %739 = @func_3469(%736, %737, %738) /* ty=(Tensor[(1344), float32], Tensor[(216), float64], Tensor[(1344), float32], Tensor[(15, 5, 9), bool], Tensor[(14, 12, 8), float32], Tensor[(2240), bool]) */;
  %740 = cast(meta[relay.Constant][46] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %741 = reshape(%740, newshape=[16, 10, 13]) /* ty=Tensor[(16, 10, 13), float32] */;
  %742 = @func_4252(%741) /* ty=(Tensor[(16, 10, 13), bool],) */;
  %743 = %739.5;
  %744 = %742.0;
  (%733, %743, %var_4287, meta[relay.Constant][45] /* ty=Tensor[(2240), bool] */, %744, meta[relay.Constant][46] /* ty=Tensor[(2080), float32] */)
}

def @func_5000() -> (Tensor[(15, 5, 9), bool],) {
  %745 = @func_3127() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %746 = %745.0;
  (%746,)
}

def @func_1715(%var_1701: Tensor[(560, 4), bool]) -> (Tensor[(15, 5, 9), float64], Tensor[(6, 13, 9), bool], Tensor[(560, 4), bool]) {
  %747 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %748 = cast(%var_1701, dtype="bool") /* ty=Tensor[(560, 4), bool] */;
  %749 = reshape(%748, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %750 = @func_757(%749) /* ty=(Tensor[(6, 13, 9), bool], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) */;
  %751 = %747.0;
  %752 = %750.0;
  (%751, %752, %var_1701)
}

def @func_3369() -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) {
  %753 = @func_2145() /* ty=Tensor[(15, 5, 9), uint64] */;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %755 = @func_2519() /* ty=Tensor[(15, 5, 9), uint64] */;
  %756 = sin(%754) /* ty=Tensor[(15, 5, 9), float64] */;
  %757 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
  (%755, %756, %757)
}

def @func_2970(%var_2935: Tensor[(11, 1, 16), uint16], %var_2936: Tensor[(11, 13, 16), uint16]) -> (Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(11, 13, 16), bool]) {
  %758 = cast(meta[relay.Constant][47] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %759 = reshape(%758, newshape=[3, 14, 15]) /* ty=Tensor[(3, 14, 15), float64] */;
  %760 = cast(%var_2935, dtype="bool") /* ty=Tensor[(11, 1, 16), bool] */;
  %761 = cast(%var_2936, dtype="bool") /* ty=Tensor[(11, 13, 16), bool] */;
  %762 = not_equal(%760, %761) /* ty=Tensor[(11, 13, 16), bool] */;
  %763 = cast(%762, dtype="bool") /* ty=Tensor[(11, 13, 16), bool] */;
  %764 = shape_of(%var_2936, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%var_2936, dtype="bool") /* ty=Tensor[(11, 13, 16), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %767 = @func_1006(%759) /* ty=Tensor[(3, 14, 15), float64] */;
  %768 = greater(%765, %766) /* ty=Tensor[(11, 13, 16), bool] */;
  (%767, meta[relay.Constant][47] /* ty=Tensor[(630), float64] */, %768)
}

def @func_2315(%var_2307: Tensor[(15, 5, 9), uint64]) -> (Tensor[(15, 5, 9), uint8],) {
  %769 = @func_2145() /* ty=Tensor[(15, 5, 9), uint64] */;
  %770 = cast(%var_2307, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %774 = add(%772, %773) /* ty=Tensor[(15, 5, 9), uint8] */;
  (%774,)
}

def @func_2789(%var_2771: Tensor[(15, 5, 9), float32], %var_2784: Tensor[(198), float64]) -> (Tensor[(15, 5, 9), bool], Tensor[(198), float64], Tensor[(198), float64]) {
  %775 = @func_2653() /* ty=Tensor[(15, 5, 9), float32] */;
  %776 = cast(%var_2771, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %780 = cast(%var_2784, dtype="float64") /* ty=Tensor[(198), float64] */;
  %781 = reshape(%780, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %782 = @func_2103(%781) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(198), float64], Tensor[(15, 5, 9), float32]) */;
  %783 = not_equal(%778, %779) /* ty=Tensor[(15, 5, 9), bool] */;
  %784 = %782.1;
  (%783, %784, %var_2784)
}

def @func_6443(%var_6416: Tensor[(14, 2, 6), uint64], %var_6431: Tensor[(5, 84), float64], %var_6432: Tensor[(280, 8), bool]) -> (Tensor[(14, 2, 6), uint64], Tensor[(15, 5, 9), uint64], Tensor[(845), uint64], Tensor[(5, 84), float64], Tensor[(280, 8), bool]) {
  %785 = cast(meta[relay.Constant][48] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %786 = cast(%var_6416, dtype="uint64") /* ty=Tensor[(14, 2, 6), uint64] */;
  %787 = cast(meta[relay.Constant][48] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %788 = cast(meta[relay.Constant][49] /* ty=Tensor[(845), uint64] */, dtype="uint64") /* ty=Tensor[(845), uint64] */;
  %789 = cast(%var_6431, dtype="float64") /* ty=Tensor[(5, 84), float64] */;
  %790 = cast(%var_6432, dtype="bool") /* ty=Tensor[(280, 8), bool] */;
  %791 = reshape(%787, newshape=[]) /* ty=uint64 */;
  %792 = reshape(%788, newshape=[5, 13, 13]) /* ty=Tensor[(5, 13, 13), uint64] */;
  %793 = reshape(%789, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %794 = reshape(%790, newshape=[140, 16]) /* ty=Tensor[(140, 16), bool] */;
  %795 = @func_4453(%791, %792, %793, %794) /* ty=(Tensor[(5, 13, 13), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(140, 16), float64]) */;
  %796 = minimum(%785, %786) /* ty=Tensor[(14, 2, 6), uint64] */;
  %797 = %795.1;
  (%796, %797, meta[relay.Constant][49] /* ty=Tensor[(845), uint64] */, %var_6431, %var_6432)
}

def @func_3109() -> (Tensor[(15, 5, 9), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32]) {
  %798 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
  %799 = cast(meta[relay.Constant][50] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %800 = reshape(%799, newshape=[14, 12, 8]) /* ty=Tensor[(14, 12, 8), float32] */;
  %801 = %798.0;
  %802 = @func_868(%800) /* ty=Tensor[(14, 12, 8), float32] */;
  (%801, %802, meta[relay.Constant][50] /* ty=Tensor[(1344), float32] */)
}

def @func_1365(%var_1335: Tensor[(11, 15, 2), float32]) -> (Tensor[(11, 15, 2), int64], Tensor[(11, 15, 2), bool], Tensor[(7, 10, 6), uint32], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) {
  %803 = cast(%var_1335, dtype="float32") /* ty=Tensor[(11, 15, 2), float32] */;
  %804 = log2(%803) /* ty=Tensor[(11, 15, 2), float32] */;
  %805 = cast(%var_1335, dtype="int64") /* ty=Tensor[(11, 15, 2), int64] */;
  %806 = shape_of(%804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(%804, dtype="int64") /* ty=Tensor[(11, 15, 2), int64] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %809 = cast(%var_1335, dtype="bool") /* ty=Tensor[(11, 15, 2), bool] */;
  %810 = shape_of(%804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%804, dtype="bool") /* ty=Tensor[(11, 15, 2), bool] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %813 = cast(meta[relay.Constant][51] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %814 = cast(meta[relay.Constant][52] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %815 = reshape(%813, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
  %816 = reshape(%814, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %817 = @func_573(%815, %816) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
  %818 = cast(meta[relay.Constant][51] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %819 = cast(meta[relay.Constant][52] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %820 = reshape(%818, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
  %821 = reshape(%819, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %822 = @func_573(%820, %821) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
  %823 = %822.1;
  %824 = cast(%823, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
  %825 = reshape(%824, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
  %826 = add(%807, %808) /* ty=Tensor[(11, 15, 2), int64] */;
  %827 = logical_or(%811, %812) /* ty=Tensor[(11, 15, 2), bool] */;
  %828 = %817.0;
  %829 = @func_396(%825) /* ty=Tensor[(10, 16, 14), bool] */;
  (%826, %827, %828, meta[relay.Constant][51] /* ty=Tensor[(420), float64] */, meta[relay.Constant][52] /* ty=Tensor[(2240), bool] */, %823, %829)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1687() -> (Tensor[(15, 5, 9), float64],) {
  @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */
}

def @func_5889() -> (Tensor[(15, 5, 9), int32],) {
  @func_5887() /* ty=(Tensor[(15, 5, 9), int32],) */
}

def @func_576(%var_574: Tensor[(7, 10, 6), float64], %var_575: Tensor[(2240), bool]) -> (Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) {
  %28 = fn (%var_514: Tensor[(7, 10, 6), float64], %var_530: Tensor[(2240), bool]) -> (Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) {
    %0 = cast(%var_514, dtype="float64") /* ty=Tensor[(7, 10, 6), float64] */;
    %1 = erf(%0) /* ty=Tensor[(7, 10, 6), float64] */;
    %2 = cast(%1, dtype="float64") /* ty=Tensor[(7, 10, 6), float64] */;
    %3 = log(%2) /* ty=Tensor[(7, 10, 6), float64] */;
    %4 = cast(%var_514, dtype="uint32") /* ty=Tensor[(7, 10, 6), uint32] */;
    %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(%3, dtype="uint32") /* ty=Tensor[(7, 10, 6), uint32] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %8 = cast(%var_530, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %9 = reshape(%8, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
    %10 = cast(%var_530, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %11 = reshape(%10, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
    %12 = @func_396(%11) /* ty=Tensor[(10, 16, 14), bool] */;
    %13 = cast(%12, dtype="float64") /* ty=Tensor[(10, 16, 14), float64] */;
    %14 = log10(%13) /* ty=Tensor[(10, 16, 14), float64] */;
    %15 = cast(%12, dtype="float64") /* ty=Tensor[(10, 16, 14), float64] */;
    %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
    %17 = cast(%14, dtype="float64") /* ty=Tensor[(10, 16, 14), float64] */;
    %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %19 = cast(%14, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
    %20 = reshape(%19, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
    %21 = @func_396(%20) /* ty=Tensor[(10, 16, 14), bool] */;
    %22 = cast(%21, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
    %23 = reshape(%22, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
    %24 = subtract(%6, %7) /* ty=Tensor[(7, 10, 6), uint32] */;
    %25 = @func_396(%9) /* ty=Tensor[(10, 16, 14), bool] */;
    %26 = divide(%17, %18) /* ty=Tensor[(10, 16, 14), float64] */;
    %27 = @func_396(%23) /* ty=Tensor[(10, 16, 14), bool] */;
    (%24, %25, %var_530, %26, %21, %27)
  };
  %28(%var_574, %var_575) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */
}

def @func_3370() -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) {
  %34 = fn () -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) {
    %29 = @func_2145() /* ty=Tensor[(15, 5, 9), uint64] */;
    %30 = cast(%29, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
    %31 = @func_2519() /* ty=Tensor[(15, 5, 9), uint64] */;
    %32 = sin(%30) /* ty=Tensor[(15, 5, 9), float64] */;
    %33 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
    (%31, %32, %33)
  };
  %34() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */
}

def @func_2105(%var_2104: Tensor[(198), float64]) -> (Tensor[(3, 11, 6), bool], Tensor[(198), float64], Tensor[(15, 5, 9), float32]) {
  %44 = fn (%var_2090: Tensor[(198), float64]) -> (Tensor[(3, 11, 6), bool], Tensor[(198), float64], Tensor[(15, 5, 9), float32]) {
    %35 = cast(%var_2090, dtype="float64") /* ty=Tensor[(198), float64] */;
    %36 = cast(%var_2090, dtype="float64") /* ty=Tensor[(198), float64] */;
    %37 = reshape(%35, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
    %38 = reshape(%36, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
    %39 = @func_1639(%37, %38) /* ty=(Tensor[(3, 11, 6), bool],) */;
    %40 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
    %41 = cast(%40, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
    %42 = %39.0;
    %43 = sqrt(%41) /* ty=Tensor[(15, 5, 9), float32] */;
    (%42, %var_2090, %43)
  };
  %44(%var_2104) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(198), float64], Tensor[(15, 5, 9), float32]) */
}

def @func_4252(%var_4246: Tensor[(16, 10, 13), float32]) -> (Tensor[(16, 10, 13), bool],) {
  %45 = cast(%var_4246, dtype="bool") /* ty=Tensor[(16, 10, 13), bool] */;
  %46 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(16, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 10, 13), float32] */, dtype="bool") /* ty=Tensor[(16, 10, 13), bool] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %49 = less_equal(%47, %48) /* ty=Tensor[(16, 10, 13), bool] */;
  (%49,)
}

def @func_3065() -> (Tensor[(15, 5, 9), int32],) {
  @func_3063() /* ty=(Tensor[(15, 5, 9), int32],) */
}

def @func_1718(%var_1716: Tensor[(560, 4), bool]) -> (Tensor[(15, 5, 9), float64], Tensor[(6, 13, 9), bool], Tensor[(560, 4), bool]) {
  @func_1715(%var_1716) /* ty=(Tensor[(15, 5, 9), float64], Tensor[(6, 13, 9), bool], Tensor[(560, 4), bool]) */
}

def @func_4459(%var_4455: uint64, %var_4456: Tensor[(5, 13, 13), uint64], %var_4457: Tensor[(420), float64], %var_4458: Tensor[(140, 16), bool]) -> (Tensor[(5, 13, 13), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(140, 16), float64]) {
  @func_4453(%var_4455, %var_4456, %var_4457, %var_4458) /* ty=(Tensor[(5, 13, 13), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(140, 16), float64]) */
}

def @func_1639(%var_1632: Tensor[(3, 11, 6), float64], %var_1633: Tensor[(3, 11, 6), float64]) -> (Tensor[(3, 11, 6), bool],) {
  %50 = cast(%var_1633, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %51 = shape_of(%var_1632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%var_1632, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %54 = less_equal(%52, %53) /* ty=Tensor[(3, 11, 6), bool] */;
  (%54,)
}

def @func_2519() -> Tensor[(15, 5, 9), uint64] {
  @func_2145() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_2315(%var_2307: Tensor[(15, 5, 9), uint64]) -> (Tensor[(15, 5, 9), uint8],) {
  %55 = @func_2145() /* ty=Tensor[(15, 5, 9), uint64] */;
  %56 = cast(%var_2307, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
  %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%55, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %60 = add(%58, %59) /* ty=Tensor[(15, 5, 9), uint8] */;
  (%60,)
}

def @func_4419() -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], int64, Tensor[(1232), int64]) {
  %76 = fn () -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], int64, Tensor[(1232), int64]) {
    %61 = @func_3907() /* ty=(Tensor[(15, 5, 9), uint64],) */;
    %62 = @func_3127() /* ty=(Tensor[(15, 5, 9), bool],) */;
    %63 = %61.0;
    %64 = cast(%63, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
    %65 = reshape(%64, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint64] */;
    %66 = @func_2315(%65) /* ty=(Tensor[(15, 5, 9), uint8],) */;
    %67 = %66.0;
    %68 = cast(%67, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
    %69 = cast(meta[relay.Constant][1] /* ty=Tensor[(1232), int64] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
    %70 = reshape(%69, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
    %71 = @func_4193(%70) /* ty=(Tensor[(15, 5, 9), float32], Tensor[(198), float64], int64, Tensor[(4, 308), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
    %72 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
    %73 = %62.0;
    %74 = log10(%68) /* ty=Tensor[(15, 5, 9), float64] */;
    %75 = %71.2;
    (%63, %72, %73, %74, %75, meta[relay.Constant][1] /* ty=Tensor[(1232), int64] */)
  };
  %76() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], int64, Tensor[(1232), int64]) */
}

def @func_4453(%var_4439: uint64, %var_4440: Tensor[(5, 13, 13), uint64], %var_4448: Tensor[(420), float64], %var_4449: Tensor[(140, 16), bool]) -> (Tensor[(5, 13, 13), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(140, 16), float64]) {
  %77 = cast(%var_4439, dtype="uint64") /* ty=uint64 */;
  %78 = cast(%var_4440, dtype="uint64") /* ty=Tensor[(5, 13, 13), uint64] */;
  %79 = cast(%var_4448, dtype="float64") /* ty=Tensor[(420), float64] */;
  %80 = cast(%var_4449, dtype="bool") /* ty=Tensor[(140, 16), bool] */;
  %81 = reshape(%79, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
  %82 = reshape(%80, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %83 = @func_573(%81, %82) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
  %84 = cast(%var_4449, dtype="float64") /* ty=Tensor[(140, 16), float64] */;
  %85 = logical_xor(%77, %78) /* ty=Tensor[(5, 13, 13), uint64] */;
  %86 = @func_2240() /* ty=Tensor[(15, 5, 9), uint64] */;
  %87 = %83.3;
  %88 = erf(%84) /* ty=Tensor[(140, 16), float64] */;
  (%85, %86, %87, %var_4448, %88)
}

def @func_2146() -> Tensor[(15, 5, 9), uint64] {
  %90 = fn () -> Tensor[(15, 5, 9), uint64] {
    %89 = @func_1813() /* ty=(Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
    %89.1
  };
  %90() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_4195(%var_4194: Tensor[(4, 308), int64]) -> (Tensor[(15, 5, 9), float32], Tensor[(198), float64], int64, Tensor[(4, 308), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) {
  %109 = fn (%var_4164: Tensor[(4, 308), int64]) -> (Tensor[(15, 5, 9), float32], Tensor[(198), float64], int64, Tensor[(4, 308), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) {
    %91 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
    %93 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %94 = cast(%var_4164, dtype="int64") /* ty=Tensor[(4, 308), int64] */;
    %95 = reshape(%93, newshape=[]) /* ty=int64 */;
    %96 = reshape(%94, newshape=[7, 11, 16]) /* ty=Tensor[(7, 11, 16), int64] */;
    %97 = @func_3225(%95, %96) /* ty=(Tensor[(7, 11, 16), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(198), float64]) */;
    %98 = @func_3414() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
    %99 = @func_3660() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), int32]) */;
    %100 = @func_3828() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) */;
    %101 = @func_3630() /* ty=(Tensor[(13, 12, ?), uint64], Tensor[(15, 5, 9), float64]) */;
    %102 = cosh(%92) /* ty=Tensor[(15, 5, 9), float32] */;
    %103 = %97.4;
    %104 = %98.1;
    %105 = %99.0;
    %106 = %100.0;
    %107 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
    %108 = %101.1;
    (%102, %103, 6 /* ty=int64 */, %var_4164, %104, %105, %106, %107, %108)
  };
  %109(%var_4194) /* ty=(Tensor[(15, 5, 9), float32], Tensor[(198), float64], int64, Tensor[(4, 308), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */
}

def @func_1822() -> Tensor[(15, 5, 9), uint64] {
  %110 = @func_1813() /* ty=(Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
  %110.1
}

def @func_3279() -> Tensor[(15, 5, 9), int32] {
  @func_3277() /* ty=Tensor[(15, 5, 9), int32] */
}

def @func_6447(%var_6444: Tensor[(14, 2, 6), uint64], %var_6445: Tensor[(5, 84), float64], %var_6446: Tensor[(280, 8), bool]) -> (Tensor[(14, 2, 6), uint64], Tensor[(15, 5, 9), uint64], Tensor[(845), uint64], Tensor[(5, 84), float64], Tensor[(280, 8), bool]) {
  %124 = fn (%var_6416: Tensor[(14, 2, 6), uint64], %var_6431: Tensor[(5, 84), float64], %var_6432: Tensor[(280, 8), bool]) -> (Tensor[(14, 2, 6), uint64], Tensor[(15, 5, 9), uint64], Tensor[(845), uint64], Tensor[(5, 84), float64], Tensor[(280, 8), bool]) {
    %111 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %112 = cast(%var_6416, dtype="uint64") /* ty=Tensor[(14, 2, 6), uint64] */;
    %113 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %114 = cast(meta[relay.Constant][3] /* ty=Tensor[(845), uint64] */, dtype="uint64") /* ty=Tensor[(845), uint64] */;
    %115 = cast(%var_6431, dtype="float64") /* ty=Tensor[(5, 84), float64] */;
    %116 = cast(%var_6432, dtype="bool") /* ty=Tensor[(280, 8), bool] */;
    %117 = reshape(%113, newshape=[]) /* ty=uint64 */;
    %118 = reshape(%114, newshape=[5, 13, 13]) /* ty=Tensor[(5, 13, 13), uint64] */;
    %119 = reshape(%115, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %120 = reshape(%116, newshape=[140, 16]) /* ty=Tensor[(140, 16), bool] */;
    %121 = @func_4453(%117, %118, %119, %120) /* ty=(Tensor[(5, 13, 13), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(140, 16), float64]) */;
    %122 = minimum(%111, %112) /* ty=Tensor[(14, 2, 6), uint64] */;
    %123 = %121.1;
    (%122, %123, meta[relay.Constant][3] /* ty=Tensor[(845), uint64] */, %var_6431, %var_6432)
  };
  %124(%var_6444, %var_6445, %var_6446) /* ty=(Tensor[(14, 2, 6), uint64], Tensor[(15, 5, 9), uint64], Tensor[(845), uint64], Tensor[(5, 84), float64], Tensor[(280, 8), bool]) */
}

def @func_4634(%var_4633: Tensor[(210, 3), float64]) -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), int32], Tensor[(15, 5, 9), float64], Tensor[(10, 2, 5), float64], Tensor[(3, 66), float64], Tensor[(686), float64], Tensor[(546), int32], Tensor[(210, 3), float64], Tensor[(2240), bool], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) {
  %155 = fn (%var_4613: Tensor[(210, 3), float64]) -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), int32], Tensor[(15, 5, 9), float64], Tensor[(10, 2, 5), float64], Tensor[(3, 66), float64], Tensor[(686), float64], Tensor[(546), int32], Tensor[(210, 3), float64], Tensor[(2240), bool], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) {
    %125 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
    %126 = @func_2850() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) */;
    %127 = @func_3828() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) */;
    %128 = %127.0;
    %129 = cast(%128, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
    %130 = @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */;
    %131 = %130.0;
    %132 = cast(%131, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
    %133 = cast(meta[relay.Constant][4] /* ty=Tensor[(686), float64] */, dtype="float64") /* ty=Tensor[(686), float64] */;
    %134 = cast(meta[relay.Constant][4] /* ty=Tensor[(686), float64] */, dtype="float64") /* ty=Tensor[(686), float64] */;
    %135 = cast(meta[relay.Constant][5] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
    %136 = cast(%var_4613, dtype="float64") /* ty=Tensor[(210, 3), float64] */;
    %137 = cast(meta[relay.Constant][6] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %138 = reshape(%133, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), float64] */;
    %139 = reshape(%134, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), float64] */;
    %140 = reshape(%135, newshape=[546]) /* ty=Tensor[(546), int32] */;
    %141 = reshape(%136, newshape=[630]) /* ty=Tensor[(630), float64] */;
    %142 = reshape(%137, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
    %143 = @func_2433(%138, %139, %140, %141, %142) /* ty=(Tensor[(15, 5, 9), float64], Tensor[(3, 14, 15), float64], Tensor[(546), int32], Tensor[(3, 66), float64], Tensor[(630), float64], Tensor[(2240), bool], Tensor[(7, 7, 14), int32], Tensor[(7, 7, 14), int32]) */;
    %144 = @func_3127() /* ty=(Tensor[(15, 5, 9), bool],) */;
    %145 = %144.0;
    %146 = cast(%145, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
    %147 = reshape(%146, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint64] */;
    %148 = %125.0;
    %149 = %126.1;
    %150 = @func_3277() /* ty=Tensor[(15, 5, 9), int32] */;
    %151 = sinh(%129) /* ty=Tensor[(15, 5, 9), float64] */;
    %152 = asin(%132) /* ty=Tensor[(10, 2, 5), float64] */;
    %153 = %143.3;
    %154 = @func_1909(%147) /* ty=Tensor[(15, 5, 9), float32] */;
    (%148, %149, %150, %151, %152, %153, meta[relay.Constant][4] /* ty=Tensor[(686), float64] */, meta[relay.Constant][5] /* ty=Tensor[(546), int32] */, %var_4613, meta[relay.Constant][6] /* ty=Tensor[(2240), bool] */, %145, %154)
  };
  %155(%var_4633) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), int32], Tensor[(15, 5, 9), float64], Tensor[(10, 2, 5), float64], Tensor[(3, 66), float64], Tensor[(686), float64], Tensor[(546), int32], Tensor[(210, 3), float64], Tensor[(2240), bool], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) */
}

def @func_1658() -> Tensor[(15, 5, 9), float64] {
  %156 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  log(%156) /* ty=Tensor[(15, 5, 9), float64] */
}

def @func_1909(%var_1899: Tensor[(15, 5, 9), uint64]) -> Tensor[(15, 5, 9), float32] {
  %157 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
  %158 = cast(%var_1899, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%160, %161) /* ty=Tensor[(15, 5, 9), float32] */
}

def @func_4779() -> (Tensor[(15, 5, 9), bool], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), int32]) {
  %168 = fn () -> (Tensor[(15, 5, 9), bool], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), int32]) {
    %162 = @func_3127() /* ty=(Tensor[(15, 5, 9), bool],) */;
    %163 = @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */;
    %164 = @func_3063() /* ty=(Tensor[(15, 5, 9), int32],) */;
    %165 = %162.0;
    %166 = %163.0;
    %167 = %164.0;
    (%165, %166, %167)
  };
  %168() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), int32]) */
}

def @func_4952() -> (Tensor[(15, 5, 9), float64],) {
  %171 = fn () -> (Tensor[(15, 5, 9), float64],) {
    %169 = @func_3369() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
    %170 = %169.1;
    (%170,)
  };
  %171() /* ty=(Tensor[(15, 5, 9), float64],) */
}

def @func_4126(%var_4123: Tensor[(12, 14, 6), int16], %var_4124: Tensor[(12, 14, 6), int16], %var_4125: Tensor[(12, 14, 6), float64]) -> (Tensor[(12, 14, 6), bool], Tensor[(12, 14, 6), float32], Tensor[(12, 14, 6), uint8], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64]) {
  @func_4121(%var_4123, %var_4124, %var_4125) /* ty=(Tensor[(12, 14, 6), bool], Tensor[(12, 14, 6), float32], Tensor[(12, 14, 6), uint8], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64]) */
}

def @func_5554() -> (Tensor[(15, 5, 9), float64], Tensor[(198), float64], Tensor[(198), float64]) {
  @func_5552() /* ty=(Tensor[(15, 5, 9), float64], Tensor[(198), float64], Tensor[(198), float64]) */
}

def @func_3976() -> (Tensor[(15, 5, 9), float32], Tensor[(2240), bool], Tensor[(216), float64], Tensor[(1344), float32]) {
  %172 = @func_2922() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(3, 11, 6), bool], Tensor[(198), float64]) */;
  %173 = cast(meta[relay.Constant][8] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %174 = cast(meta[relay.Constant][9] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %175 = reshape(%173, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
  %176 = reshape(%174, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %177 = @func_987(%175, %176) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
  %178 = %172.0;
  %179 = %177.0;
  (%178, %179, meta[relay.Constant][8] /* ty=Tensor[(216), float64] */, meta[relay.Constant][9] /* ty=Tensor[(1344), float32] */)
}

def @func_2318(%var_2316: Tensor[(15, 5, 9), uint64]) -> (Tensor[(15, 5, 9), uint8],) {
  @func_2315(%var_2316) /* ty=(Tensor[(15, 5, 9), uint8],) */
}

def @func_6090(%var_6087: Tensor[(14, 12, 8), float32], %var_6088: Tensor[(14, 12, 8), float32], %var_6089: Tensor[(36, 6), float64]) -> (Tensor[(14, 12, 8), float32], Tensor[(14, 12, 8), bool], Tensor[(2240), bool], Tensor[(36, 6), float64]) {
  @func_6085(%var_6087, %var_6088, %var_6089) /* ty=(Tensor[(14, 12, 8), float32], Tensor[(14, 12, 8), bool], Tensor[(2240), bool], Tensor[(36, 6), float64]) */
}

def @func_2242() -> Tensor[(15, 5, 9), uint64] {
  @func_2240() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_5855() -> Tensor[(15, 5, 9), bool] {
  @func_2568() /* ty=Tensor[(15, 5, 9), bool] */
}

def @func_5585(%var_5558: Tensor[(1, 16, 15), float64]) -> (Tensor[(15, 5, 9), uint64], Tensor[(1, 16, 15), float64], Tensor[(13, 12, ?), uint64]) {
  %180 = @func_3369() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
  %181 = cast(%var_5558, dtype="float64") /* ty=Tensor[(1, 16, 15), float64] */;
  %182 = asin(%181) /* ty=Tensor[(1, 16, 15), float64] */;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(1, 16, 15), float64] */;
  %184 = @func_3630() /* ty=(Tensor[(13, 12, ?), uint64], Tensor[(15, 5, 9), float64]) */;
  %185 = %180.0;
  %186 = atanh(%183) /* ty=Tensor[(1, 16, 15), float64] */;
  %187 = %184.0;
  (%185, %186, %187)
}

def @func_6020(%var_5996: Tensor[(216, 1), float64], %var_5997: Tensor[(672, 2), float32], %var_6010: Tensor[(686, 1), float64], %var_6012: Tensor[(630), float64]) -> (Tensor[(15, 5, 9), float64], Tensor[(1344), float32], Tensor[(216, 1), float64], Tensor[(546), int32], Tensor[(686, 1), float64], Tensor[(546), int32], Tensor[(630), float64], Tensor[(2240, 1), bool], Tensor[(672, 2), float64]) {
  %188 = cast(%var_5996, dtype="float64") /* ty=Tensor[(216, 1), float64] */;
  %189 = cast(%var_5997, dtype="float32") /* ty=Tensor[(672, 2), float32] */;
  %190 = reshape(%188, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
  %191 = reshape(%189, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %192 = @func_987(%190, %191) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
  %193 = cast(%var_6010, dtype="float64") /* ty=Tensor[(686, 1), float64] */;
  %194 = cast(%var_6010, dtype="float64") /* ty=Tensor[(686, 1), float64] */;
  %195 = cast(meta[relay.Constant][10] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %196 = cast(%var_6012, dtype="float64") /* ty=Tensor[(630), float64] */;
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(2240, 1), bool] */, dtype="bool") /* ty=Tensor[(2240, 1), bool] */;
  %198 = reshape(%193, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), float64] */;
  %199 = reshape(%194, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), float64] */;
  %200 = reshape(%195, newshape=[546]) /* ty=Tensor[(546), int32] */;
  %201 = reshape(%196, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %202 = reshape(%197, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %203 = @func_2433(%198, %199, %200, %201, %202) /* ty=(Tensor[(15, 5, 9), float64], Tensor[(3, 14, 15), float64], Tensor[(546), int32], Tensor[(3, 66), float64], Tensor[(630), float64], Tensor[(2240), bool], Tensor[(7, 7, 14), int32], Tensor[(7, 7, 14), int32]) */;
  %204 = cast(%var_5997, dtype="float64") /* ty=Tensor[(672, 2), float64] */;
  %205 = sqrt(%204) /* ty=Tensor[(672, 2), float64] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(672, 2), float64] */;
  %207 = @func_4024() /* ty=Tensor[(15, 5, 9), float64] */;
  %208 = %192.4;
  %209 = %203.2;
  %210 = asinh(%206) /* ty=Tensor[(672, 2), float64] */;
  (%207, %208, %var_5996, %209, %var_6010, meta[relay.Constant][10] /* ty=Tensor[(546), int32] */, %var_6012, meta[relay.Constant][11] /* ty=Tensor[(2240, 1), bool] */, %210)
}

def @func_2924() -> (Tensor[(15, 5, 9), float32], Tensor[(3, 11, 6), bool], Tensor[(198), float64]) {
  @func_2922() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(3, 11, 6), bool], Tensor[(198), float64]) */
}

def @func_6250() -> (Tensor[(630), float64], Tensor[(176), uint16], Tensor[(2288), uint16], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float32]) {
  %211 = cast(meta[relay.Constant][12] /* ty=Tensor[(176), uint16] */, dtype="uint16") /* ty=Tensor[(176), uint16] */;
  %212 = cast(meta[relay.Constant][13] /* ty=Tensor[(2288), uint16] */, dtype="uint16") /* ty=Tensor[(2288), uint16] */;
  %213 = reshape(%211, newshape=[11, 1, 16]) /* ty=Tensor[(11, 1, 16), uint16] */;
  %214 = reshape(%212, newshape=[11, 13, 16]) /* ty=Tensor[(11, 13, 16), uint16] */;
  %215 = @func_2970(%213, %214) /* ty=(Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(11, 13, 16), bool]) */;
  %216 = @func_6212() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), uint64]) */;
  %217 = @func_4264() /* ty=Tensor[(15, 5, 9), uint64] */;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %219 = %215.1;
  %220 = %216.0;
  %221 = acos(%218) /* ty=Tensor[(15, 5, 9), float32] */;
  (%219, meta[relay.Constant][12] /* ty=Tensor[(176), uint16] */, meta[relay.Constant][13] /* ty=Tensor[(2288), uint16] */, %220, %221)
}

def @func_2439(%var_2434: Tensor[(7, 7, 14), float64], %var_2435: Tensor[(7, 7, 14), float64], %var_2436: Tensor[(546), int32], %var_2437: Tensor[(630), float64], %var_2438: Tensor[(2240), bool]) -> (Tensor[(15, 5, 9), float64], Tensor[(3, 14, 15), float64], Tensor[(546), int32], Tensor[(3, 66), float64], Tensor[(630), float64], Tensor[(2240), bool], Tensor[(7, 7, 14), int32], Tensor[(7, 7, 14), int32]) {
  %275 = fn (%var_2322: Tensor[(7, 7, 14), float64], %var_2323: Tensor[(7, 7, 14), float64], %var_2377: Tensor[(546), int32], %var_2379: Tensor[(630), float64], %var_2380: Tensor[(2240), bool]) -> (Tensor[(15, 5, 9), float64], Tensor[(3, 14, 15), float64], Tensor[(546), int32], Tensor[(3, 66), float64], Tensor[(630), float64], Tensor[(2240), bool], Tensor[(7, 7, 14), int32], Tensor[(7, 7, 14), int32]) {
    %222 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
    %223 = cast(%var_2377, dtype="int32") /* ty=Tensor[(546), int32] */;
    %224 = cast(%var_2377, dtype="int32") /* ty=Tensor[(546), int32] */;
    %225 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 66), float64] */, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
    %226 = cast(%var_2379, dtype="float64") /* ty=Tensor[(630), float64] */;
    %227 = cast(%var_2380, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %228 = reshape(%223, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
    %229 = reshape(%224, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
    %230 = reshape(%225, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %231 = reshape(%226, newshape=[630]) /* ty=Tensor[(630), float64] */;
    %232 = reshape(%227, newshape=[1120, 2]) /* ty=Tensor[(1120, 2), bool] */;
    %233 = @func_2061(%228, %229, %230, %231, %232) /* ty=(Tensor[(13, 3, 14), float64], Tensor[(3, 11, 6), bool], Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(198), float32], Tensor[(6, 13, 9), bool], Tensor[(1120, 2), bool]) */;
    %234 = cast(%var_2323, dtype="float32") /* ty=Tensor[(7, 7, 14), float32] */;
    %235 = erf(%234) /* ty=Tensor[(7, 7, 14), float32] */;
    %236 = cast(%var_2323, dtype="float64") /* ty=Tensor[(7, 7, 14), float64] */;
    %237 = shape_of(%var_2322, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(%var_2322, dtype="float64") /* ty=Tensor[(7, 7, 14), float64] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %240 = maximum(%238, %239) /* ty=Tensor[(7, 7, 14), float64] */;
    %241 = cast(%240, dtype="uint8") /* ty=Tensor[(7, 7, 14), uint8] */;
    %242 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
    %243 = cast(%235, dtype="uint8") /* ty=Tensor[(7, 7, 14), uint8] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %245 = logical_xor(%243, %244) /* ty=Tensor[(7, 7, 14), uint8] */;
    %246 = cast(%var_2322, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
    %247 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(%240, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %250 = not_equal(%248, %249) /* ty=Tensor[(7, 7, 14), bool] */;
    %251 = cast(%250, dtype="int32") /* ty=Tensor[(7, 7, 14), int32] */;
    %252 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(%245, dtype="int32") /* ty=Tensor[(7, 7, 14), int32] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %255 = cast(%245, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
    %256 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
    %257 = cast(%240, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
    %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %259 = equal(%257, %258) /* ty=Tensor[(7, 7, 14), bool] */;
    %260 = cast(%259, dtype="float64") /* ty=Tensor[(7, 7, 14), float64] */;
    %261 = rsqrt(%260) /* ty=Tensor[(7, 7, 14), float64] */;
    %262 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 7, 14), float64] */, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
    %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
    %264 = cast(%261, dtype="bool") /* ty=Tensor[(7, 7, 14), bool] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %266 = greater_equal(%264, %265) /* ty=Tensor[(7, 7, 14), bool] */;
    %267 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 7, 14), bool] */, dtype="int32") /* ty=Tensor[(7, 7, 14), int32] */;
    %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %269 = cast(%266, dtype="int32") /* ty=Tensor[(7, 7, 14), int32] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %271 = %222.0;
    %272 = %233.2;
    %273 = minimum(%253, %254) /* ty=Tensor[(7, 7, 14), int32] */;
    %274 = left_shift(%269, %270) /* ty=Tensor[(7, 7, 14), int32] */;
    (%271, %272, %var_2377, meta[relay.Constant][14] /* ty=Tensor[(3, 66), float64] */, %var_2379, %var_2380, %273, %274)
  };
  %275(%var_2434, %var_2435, %var_2436, %var_2437, %var_2438) /* ty=(Tensor[(15, 5, 9), float64], Tensor[(3, 14, 15), float64], Tensor[(546), int32], Tensor[(3, 66), float64], Tensor[(630), float64], Tensor[(2240), bool], Tensor[(7, 7, 14), int32], Tensor[(7, 7, 14), int32]) */
}

def @func_5978() -> (Tensor[(3, 9, 7), float32], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), bool]) {
  %282 = fn () -> (Tensor[(3, 9, 7), float32], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), bool]) {
    %276 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %277 = @func_5623() /* ty=(Tensor[(10, 2, 5), float64],) */;
    %278 = @func_3828() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) */;
    %279 = tan(%276) /* ty=Tensor[(3, 9, 7), float32] */;
    %280 = %277.0;
    %281 = %278.0;
    (%279, %280, %281)
  };
  %282() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), bool]) */
}

def @func_2737(%var_2734: Tensor[(6, 11, 2), float32], %var_2735: Tensor[(36, 6), float64], %var_2736: Tensor[(420, 1), float64]) -> (Tensor[(6, 11, 2), float32], Tensor[(2240), bool], Tensor[(36, 6), float64], Tensor[(1344), float32], Tensor[(2240), bool], Tensor[(2240), bool], Tensor[(420, 1), float64], Tensor[(10, 16, 14), bool]) {
  %306 = fn (%var_2673: Tensor[(6, 11, 2), float32], %var_2678: Tensor[(36, 6), float64], %var_2707: Tensor[(420, 1), float64]) -> (Tensor[(6, 11, 2), float32], Tensor[(2240), bool], Tensor[(36, 6), float64], Tensor[(1344), float32], Tensor[(2240), bool], Tensor[(2240), bool], Tensor[(420, 1), float64], Tensor[(10, 16, 14), bool]) {
    %283 = cast(%var_2673, dtype="float32") /* ty=Tensor[(6, 11, 2), float32] */;
    %284 = cast(%var_2678, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
    %285 = cast(meta[relay.Constant][18] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %286 = reshape(%284, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
    %287 = reshape(%285, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
    %288 = @func_987(%286, %287) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
    %289 = cast(%var_2678, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
    %290 = cast(meta[relay.Constant][18] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %291 = reshape(%289, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
    %292 = reshape(%290, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
    %293 = @func_987(%291, %292) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
    %294 = cast(%var_2707, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
    %295 = %293.0;
    %296 = cast(%295, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %297 = reshape(%294, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
    %298 = reshape(%296, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
    %299 = @func_573(%297, %298) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
    %300 = %299.2;
    %301 = cast(%300, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %302 = reshape(%301, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
    %303 = log10(%283) /* ty=Tensor[(6, 11, 2), float32] */;
    %304 = %288.0;
    %305 = @func_396(%302) /* ty=Tensor[(10, 16, 14), bool] */;
    (%303, %304, %var_2678, meta[relay.Constant][18] /* ty=Tensor[(1344), float32] */, %295, %300, %var_2707, %305)
  };
  %306(%var_2734, %var_2735, %var_2736) /* ty=(Tensor[(6, 11, 2), float32], Tensor[(2240), bool], Tensor[(36, 6), float64], Tensor[(1344), float32], Tensor[(2240), bool], Tensor[(2240), bool], Tensor[(420, 1), float64], Tensor[(10, 16, 14), bool]) */
}

def @main(%var_6514: Tensor[(10, 13, 7), float64]) -> (Tensor[(10, 13, 7), float32],) {
  %307 = cast(%var_6514, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %308 = sin(%307) /* ty=Tensor[(10, 13, 7), float64] */;
  %309 = cast(%308, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %310 = tan(%309) /* ty=Tensor[(10, 13, 7), float32] */;
  (%310,)
}

def @func_871(%var_869: Tensor[(14, 12, 8), float32]) -> Tensor[(14, 12, 8), float32] {
  @func_868(%var_869) /* ty=Tensor[(14, 12, 8), float32] */
}

def @func_2140() -> Tensor[(15, 5, 9), bool] {
  %311 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %311.0
}

def @func_3558() -> (Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), uint8], Tensor[(15, 5, 9), bool]) {
  %319 = fn () -> (Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), uint8], Tensor[(15, 5, 9), bool]) {
    %312 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
    %313 = %312.0;
    %314 = cast(%313, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
    %315 = reshape(%314, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint64] */;
    %316 = @func_2315(%315) /* ty=(Tensor[(15, 5, 9), uint8],) */;
    %317 = %316.0;
    %318 = @func_2140() /* ty=Tensor[(15, 5, 9), bool] */;
    (%313, %317, %318)
  };
  %319() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), uint8], Tensor[(15, 5, 9), bool]) */
}

def @func_2792(%var_2790: Tensor[(15, 5, 9), float32], %var_2791: Tensor[(198), float64]) -> (Tensor[(15, 5, 9), bool], Tensor[(198), float64], Tensor[(198), float64]) {
  %330 = fn (%var_2771: Tensor[(15, 5, 9), float32], %var_2784: Tensor[(198), float64]) -> (Tensor[(15, 5, 9), bool], Tensor[(198), float64], Tensor[(198), float64]) {
    %320 = @func_2653() /* ty=Tensor[(15, 5, 9), float32] */;
    %321 = cast(%var_2771, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%320, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %325 = cast(%var_2784, dtype="float64") /* ty=Tensor[(198), float64] */;
    %326 = reshape(%325, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %327 = @func_2103(%326) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(198), float64], Tensor[(15, 5, 9), float32]) */;
    %328 = not_equal(%323, %324) /* ty=Tensor[(15, 5, 9), bool] */;
    %329 = %327.1;
    (%328, %329, %var_2784)
  };
  %330(%var_2790, %var_2791) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(198), float64], Tensor[(198), float64]) */
}

def @func_4301(%var_4300: Tensor[(216), float64]) -> (Tensor[(15, 5, 9), bool], Tensor[(2240), bool], Tensor[(216), float64], Tensor[(2240), bool], Tensor[(16, 10, 13), bool], Tensor[(2080), float32]) {
  %345 = fn (%var_4287: Tensor[(216), float64]) -> (Tensor[(15, 5, 9), bool], Tensor[(2240), bool], Tensor[(216), float64], Tensor[(2240), bool], Tensor[(16, 10, 13), bool], Tensor[(2080), float32]) {
    %331 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
    %332 = cast(%var_4287, dtype="float64") /* ty=Tensor[(216), float64] */;
    %333 = %331.0;
    %334 = cast(%333, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %335 = cast(meta[relay.Constant][19] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %336 = reshape(%332, newshape=[216]) /* ty=Tensor[(216), float64] */;
    %337 = reshape(%334, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
    %338 = reshape(%335, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
    %339 = @func_3469(%336, %337, %338) /* ty=(Tensor[(1344), float32], Tensor[(216), float64], Tensor[(1344), float32], Tensor[(15, 5, 9), bool], Tensor[(14, 12, 8), float32], Tensor[(2240), bool]) */;
    %340 = cast(meta[relay.Constant][20] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
    %341 = reshape(%340, newshape=[16, 10, 13]) /* ty=Tensor[(16, 10, 13), float32] */;
    %342 = @func_4252(%341) /* ty=(Tensor[(16, 10, 13), bool],) */;
    %343 = %339.5;
    %344 = %342.0;
    (%333, %343, %var_4287, meta[relay.Constant][19] /* ty=Tensor[(2240), bool] */, %344, meta[relay.Constant][20] /* ty=Tensor[(2080), float32] */)
  };
  %345(%var_4300) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(2240), bool], Tensor[(216), float64], Tensor[(2240), bool], Tensor[(16, 10, 13), bool], Tensor[(2080), float32]) */
}

def @func_4233(%var_4232: Tensor[(15, 5, 9), float64]) -> (Tensor[(15, 5, 9), float64],) {
  %353 = fn (%var_4218: Tensor[(15, 5, 9), float64]) -> (Tensor[(15, 5, 9), float64],) {
    %346 = @func_3414() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
    %347 = %346.2;
    %348 = cast(%var_4218, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
    %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
    %350 = cast(%347, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
    %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %352 = divide(%350, %351) /* ty=Tensor[(15, 5, 9), float64] */;
    (%352,)
  };
  %353(%var_4232) /* ty=(Tensor[(15, 5, 9), float64],) */
}

def @func_6212() -> (Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), uint64]) {
  %354 = @func_5721() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %355 = @func_2653() /* ty=Tensor[(15, 5, 9), float32] */;
  %356 = %354.0;
  %357 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
  (%355, %356, %357)
}

def @func_1660() -> Tensor[(15, 5, 9), float64] {
  @func_1658() /* ty=Tensor[(15, 5, 9), float64] */
}

def @func_5588(%var_5586: Tensor[(1, 16, 15), float64]) -> (Tensor[(15, 5, 9), uint64], Tensor[(1, 16, 15), float64], Tensor[(13, 12, ?), uint64]) {
  @func_5585(%var_5586) /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(1, 16, 15), float64], Tensor[(13, 12, ?), uint64]) */
}

def @func_1789() -> (Tensor[(15, 5, 9), bool],) {
  @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */
}

def @func_3129() -> (Tensor[(15, 5, 9), bool],) {
  @func_3127() /* ty=(Tensor[(15, 5, 9), bool],) */
}

def @func_3829() -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) {
  %379 = fn () -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) {
    %358 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
    %359 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
    %360 = %358.0;
    %361 = cast(%360, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
    %362 = reshape(%361, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float32] */;
    %363 = @func_3503(%362) /* ty=(Tensor[(15, 5, 9), uint8],) */;
    %364 = %363.0;
    %365 = cast(%364, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
    %366 = reshape(%365, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint64] */;
    %367 = @func_1909(%366) /* ty=Tensor[(15, 5, 9), float32] */;
    %368 = cast(%364, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
    %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
    %370 = cast(%367, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
    %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %372 = floor_divide(%370, %371) /* ty=Tensor[(15, 5, 9), float32] */;
    %373 = cast(%372, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %374 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
    %375 = cast(%367, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %377 = %359.0;
    %378 = greater(%375, %376) /* ty=Tensor[(15, 5, 9), bool] */;
    (%360, %377, %378)
  };
  %379() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) */
}

def @func_1787() -> (Tensor[(15, 5, 9), bool],) {
  %380 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %381 = %380.0;
  %382 = cast(%381, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %383 = exp(%382) /* ty=Tensor[(15, 5, 9), float64] */;
  %384 = cast(%381, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %388 = equal(%386, %387) /* ty=Tensor[(15, 5, 9), bool] */;
  (%388,)
}

def @func_1008(%var_1007: Tensor[(3, 14, 15), float64]) -> Tensor[(3, 14, 15), float64] {
  %390 = fn (%var_993: Tensor[(3, 14, 15), float64]) -> Tensor[(3, 14, 15), float64] {
    %389 = cast(%var_993, dtype="float64") /* ty=Tensor[(3, 14, 15), float64] */;
    asinh(%389) /* ty=Tensor[(3, 14, 15), float64] */
  };
  %390(%var_1007) /* ty=Tensor[(3, 14, 15), float64] */
}

def @func_3978() -> (Tensor[(15, 5, 9), float32], Tensor[(2240), bool], Tensor[(216), float64], Tensor[(1344), float32]) {
  @func_3976() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(2240), bool], Tensor[(216), float64], Tensor[(1344), float32]) */
}

def @func_5802(%var_5776: Tensor[(15, 5, 9), uint64]) -> (Tensor[(15, 5, 9), float64], Tensor[(198), float64], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), uint32], Tensor[(15, 5, 9), float64]) {
  %391 = @func_3414() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
  %392 = @func_5552() /* ty=(Tensor[(15, 5, 9), float64], Tensor[(198), float64], Tensor[(198), float64]) */;
  %393 = @func_5136() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), uint64]) */;
  %394 = %393.1;
  %395 = cast(%var_5776, dtype="uint32") /* ty=Tensor[(15, 5, 9), uint32] */;
  %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%394, dtype="uint32") /* ty=Tensor[(15, 5, 9), uint32] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %399 = @func_4951() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %400 = %391.1;
  %401 = %392.2;
  %402 = @func_2653() /* ty=Tensor[(15, 5, 9), float32] */;
  %403 = right_shift(%397, %398) /* ty=Tensor[(15, 5, 9), uint32] */;
  %404 = %399.0;
  (%400, %401, %402, %403, %404)
}

def @func_4025() -> Tensor[(15, 5, 9), float64] {
  %408 = fn () -> Tensor[(15, 5, 9), float64] {
    %405 = @func_3828() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool]) */;
    %406 = %405.0;
    %407 = cast(%406, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
    log2(%407) /* ty=Tensor[(15, 5, 9), float64] */
  };
  %408() /* ty=Tensor[(15, 5, 9), float64] */
}

def @func_3725() -> (Tensor[(15, 5, 9), bool],) {
  @func_3723() /* ty=(Tensor[(15, 5, 9), bool],) */
}

def @func_5218(%var_5216: Tensor[(10, 2, 5), float64], %var_5217: Tensor[(10, 2, 5), float64]) -> (Tensor[(10, 2, 5), bool], Tensor[(15, 5, 9), float64], Tensor[(10, 2, 5), float64]) {
  @func_5214(%var_5216, %var_5217) /* ty=(Tensor[(10, 2, 5), bool], Tensor[(15, 5, 9), float64], Tensor[(10, 2, 5), float64]) */
}

def @func_757(%var_746: Tensor[(2240), bool]) -> (Tensor[(6, 13, 9), bool], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) {
  %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 13, 9), float32] */, dtype="bool") /* ty=Tensor[(6, 13, 9), bool] */;
  %410 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(6, 13, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 13, 9), float32] */, dtype="bool") /* ty=Tensor[(6, 13, 9), bool] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %413 = cast(%var_746, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %414 = reshape(%413, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
  %415 = greater_equal(%411, %412) /* ty=Tensor[(6, 13, 9), bool] */;
  %416 = @func_396(%414) /* ty=Tensor[(10, 16, 14), bool] */;
  (%415, %416, %var_746)
}

def @func_1643(%var_1641: Tensor[(3, 11, 6), float64], %var_1642: Tensor[(3, 11, 6), float64]) -> (Tensor[(3, 11, 6), bool],) {
  @func_1639(%var_1641, %var_1642) /* ty=(Tensor[(3, 11, 6), bool],) */
}

def @func_5857() -> Tensor[(15, 5, 9), bool] {
  @func_5855() /* ty=Tensor[(15, 5, 9), bool] */
}

def @func_2067(%var_2062: Tensor[(13, 3, 14), int32], %var_2063: Tensor[(13, 3, 14), int32], %var_2064: Tensor[(198), float64], %var_2065: Tensor[(630), float64], %var_2066: Tensor[(1120, 2), bool]) -> (Tensor[(13, 3, 14), float64], Tensor[(3, 11, 6), bool], Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(198), float32], Tensor[(6, 13, 9), bool], Tensor[(1120, 2), bool]) {
  %445 = fn (%var_1982: Tensor[(13, 3, 14), int32], %var_1983: Tensor[(13, 3, 14), int32], %var_1992: Tensor[(198), float64], %var_2003: Tensor[(630), float64], %var_2035: Tensor[(1120, 2), bool]) -> (Tensor[(13, 3, 14), float64], Tensor[(3, 11, 6), bool], Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(198), float32], Tensor[(6, 13, 9), bool], Tensor[(1120, 2), bool]) {
    %417 = cast(%var_1983, dtype="int32") /* ty=Tensor[(13, 3, 14), int32] */;
    %418 = shape_of(%var_1982, dtype="int32") /* ty=Tensor[(3), int32] */;
    %419 = cast(%var_1982, dtype="int32") /* ty=Tensor[(13, 3, 14), int32] */;
    %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %421 = logical_xor(%419, %420) /* ty=Tensor[(13, 3, 14), int32] */;
    %422 = cast(%var_1983, dtype="float64") /* ty=Tensor[(13, 3, 14), float64] */;
    %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
    %424 = cast(%421, dtype="float64") /* ty=Tensor[(13, 3, 14), float64] */;
    %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %426 = cast(%var_1992, dtype="float64") /* ty=Tensor[(198), float64] */;
    %427 = cast(%var_1992, dtype="float64") /* ty=Tensor[(198), float64] */;
    %428 = reshape(%426, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
    %429 = reshape(%427, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
    %430 = @func_1639(%428, %429) /* ty=(Tensor[(3, 11, 6), bool],) */;
    %431 = cast(%var_2003, dtype="float64") /* ty=Tensor[(630), float64] */;
    %432 = reshape(%431, newshape=[3, 14, 15]) /* ty=Tensor[(3, 14, 15), float64] */;
    %433 = cast(meta[relay.Constant][23] /* ty=Tensor[(198), float64] */, dtype="float32") /* ty=Tensor[(198), float32] */;
    %434 = shape_of(%var_1992, dtype="int32") /* ty=Tensor[(1), int32] */;
    %435 = cast(%var_1992, dtype="float32") /* ty=Tensor[(198), float32] */;
    %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?), float32] */;
    %437 = cast(%var_2035, dtype="bool") /* ty=Tensor[(1120, 2), bool] */;
    %438 = reshape(%437, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
    %439 = @func_757(%438) /* ty=(Tensor[(6, 13, 9), bool], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) */;
    %440 = add(%424, %425) /* ty=Tensor[(13, 3, 14), float64] */;
    %441 = %430.0;
    %442 = @func_1006(%432) /* ty=Tensor[(3, 14, 15), float64] */;
    %443 = power(%435, %436) /* ty=Tensor[(198), float32] */;
    %444 = %439.0;
    (%440, %441, %442, %var_2003, %443, %444, %var_2035)
  };
  %445(%var_2062, %var_2063, %var_2064, %var_2065, %var_2066) /* ty=(Tensor[(13, 3, 14), float64], Tensor[(3, 11, 6), bool], Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(198), float32], Tensor[(6, 13, 9), bool], Tensor[(1120, 2), bool]) */
}

def @func_4505(%var_4502: uint64, %var_4503: Tensor[(845), uint64], %var_4504: Tensor[(560, 4), bool]) -> (Tensor[(15, 5, 9), int32], Tensor[(420), float64], uint64, Tensor[(845), uint64], Tensor[(10, 42), float64], Tensor[(560, 4), bool]) {
  %458 = fn (%var_4494: uint64, %var_4495: Tensor[(845), uint64], %var_4497: Tensor[(560, 4), bool]) -> (Tensor[(15, 5, 9), int32], Tensor[(420), float64], uint64, Tensor[(845), uint64], Tensor[(10, 42), float64], Tensor[(560, 4), bool]) {
    %446 = @func_3063() /* ty=(Tensor[(15, 5, 9), int32],) */;
    %447 = cast(%var_4494, dtype="uint64") /* ty=uint64 */;
    %448 = cast(%var_4495, dtype="uint64") /* ty=Tensor[(845), uint64] */;
    %449 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 42), float64] */, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
    %450 = cast(%var_4497, dtype="bool") /* ty=Tensor[(560, 4), bool] */;
    %451 = reshape(%447, newshape=[]) /* ty=uint64 */;
    %452 = reshape(%448, newshape=[5, 13, 13]) /* ty=Tensor[(5, 13, 13), uint64] */;
    %453 = reshape(%449, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %454 = reshape(%450, newshape=[140, 16]) /* ty=Tensor[(140, 16), bool] */;
    %455 = @func_4453(%451, %452, %453, %454) /* ty=(Tensor[(5, 13, 13), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(140, 16), float64]) */;
    %456 = %446.0;
    %457 = %455.3;
    (%456, %457, %var_4494, %var_4495, meta[relay.Constant][24] /* ty=Tensor[(10, 42), float64] */, %var_4497)
  };
  %458(%var_4502, %var_4503, %var_4504) /* ty=(Tensor[(15, 5, 9), int32], Tensor[(420), float64], uint64, Tensor[(845), uint64], Tensor[(10, 42), float64], Tensor[(560, 4), bool]) */
}

def @func_1815() -> (Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) {
  @func_1813() /* ty=(Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */
}

def @func_5336() -> (Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), float64], Tensor[(216), float64], Tensor[(216), float64]) {
  @func_5334() /* ty=(Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), float64], Tensor[(216), float64], Tensor[(216), float64]) */
}

def @func_5552() -> (Tensor[(15, 5, 9), float64], Tensor[(198), float64], Tensor[(198), float64]) {
  %459 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %461 = cast(meta[relay.Constant][25] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %462 = reshape(%460, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float32] */;
  %463 = reshape(%461, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %464 = @func_2789(%462, %463) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(198), float64], Tensor[(198), float64]) */;
  %465 = %464.1;
  (%459, %465, meta[relay.Constant][25] /* ty=Tensor[(198), float64] */)
}

def @func_5137() -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), uint64]) {
  %479 = fn () -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), uint64]) {
    %466 = @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */;
    %467 = %466.0;
    %468 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 2, 5), float64] */, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
    %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%467, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %472 = greater_equal(%470, %471) /* ty=Tensor[(10, 2, 5), bool] */;
    %473 = cast(%472, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
    %474 = @func_3660() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), int32]) */;
    %475 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
    %476 = @func_2145() /* ty=Tensor[(15, 5, 9), uint64] */;
    %477 = acos(%473) /* ty=Tensor[(10, 2, 5), float64] */;
    %478 = %474.0;
    (%475, %476, %477, %478)
  };
  %479() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), uint64]) */
}

def @func_2570() -> Tensor[(15, 5, 9), bool] {
  @func_2568() /* ty=Tensor[(15, 5, 9), bool] */
}

def @func_3503(%var_3496: Tensor[(15, 5, 9), float32]) -> (Tensor[(15, 5, 9), uint8],) {
  %480 = @func_2922() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(3, 11, 6), bool], Tensor[(198), float64]) */;
  %481 = %480.0;
  %482 = cast(%var_3496, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %486 = minimum(%484, %485) /* ty=Tensor[(15, 5, 9), uint8] */;
  (%486,)
}

def @func_3945() -> (Tensor[(10, 2, 5), float64],) {
  %487 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %488 = sinh(%487) /* ty=Tensor[(10, 2, 5), float64] */;
  %489 = cast(%488, dtype="uint32") /* ty=Tensor[(10, 2, 5), uint32] */;
  %490 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(10, 2, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 2, 5), float64] */, dtype="uint32") /* ty=Tensor[(10, 2, 5), uint32] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %493 = logical_xor(%491, %492) /* ty=Tensor[(10, 2, 5), uint32] */;
  %494 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %498 = divide(%496, %497) /* ty=Tensor[(10, 2, 5), float64] */;
  (%498,)
}

def @func_4255(%var_4253: Tensor[(16, 10, 13), float32]) -> (Tensor[(16, 10, 13), bool],) {
  @func_4252(%var_4253) /* ty=(Tensor[(16, 10, 13), bool],) */
}

def @func_5599() -> Tensor[(1, 13, 16), float64] {
  %500 = fn () -> Tensor[(1, 13, 16), float64] {
    %499 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 13, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 13, 16), float64] */;
    acosh(%499) /* ty=Tensor[(1, 13, 16), float64] */
  };
  %500() /* ty=Tensor[(1, 13, 16), float64] */
}

def @func_1213(%var_1211: Tensor[(1344), float32], %var_1212: Tensor[(2240), bool]) -> (Tensor[(11, 12, 7), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) {
  %512 = fn (%var_1187: Tensor[(1344), float32], %var_1205: Tensor[(2240), bool]) -> (Tensor[(11, 12, 7), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) {
    %501 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 7), float32] */;
    %502 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(11, 12, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %503 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 7), float32] */;
    %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %505 = cast(%var_1187, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %506 = reshape(%505, newshape=[14, 12, 8]) /* ty=Tensor[(14, 12, 8), float32] */;
    %507 = cast(%var_1205, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %508 = reshape(%507, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
    %509 = floor_divide(%503, %504) /* ty=Tensor[(11, 12, 7), float32] */;
    %510 = @func_868(%506) /* ty=Tensor[(14, 12, 8), float32] */;
    %511 = @func_396(%508) /* ty=Tensor[(10, 16, 14), bool] */;
    (%509, %510, %var_1187, %511, %var_1205)
  };
  %512(%var_1211, %var_1212) /* ty=(Tensor[(11, 12, 7), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) */
}

def @func_991(%var_989: Tensor[(12, 9, 2), float64], %var_990: Tensor[(1344), float32]) -> (Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) {
  @func_987(%var_989, %var_990) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */
}

def @func_6304() -> (Tensor[(15, 5, 9), uint64],) {
  %513 = @func_3369() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
  %514 = %513.2;
  (%514,)
}

def @func_5285(%var_5277: Tensor[(15, 5, 9), bool]) -> (Tensor[(15, 5, 9), int32],) {
  %515 = @func_2850() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) */;
  %516 = %515.0;
  %517 = cast(%var_5277, dtype="int32") /* ty=Tensor[(15, 5, 9), int32] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%516, dtype="int32") /* ty=Tensor[(15, 5, 9), int32] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %521 = bitwise_xor(%519, %520) /* ty=Tensor[(15, 5, 9), int32] */;
  (%521,)
}

def @func_5721() -> (Tensor[(15, 5, 9), bool],) {
  %522 = @func_3723() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %523 = %522.0;
  (%523,)
}

def @func_1715(%var_1701: Tensor[(560, 4), bool]) -> (Tensor[(15, 5, 9), float64], Tensor[(6, 13, 9), bool], Tensor[(560, 4), bool]) {
  %524 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %525 = cast(%var_1701, dtype="bool") /* ty=Tensor[(560, 4), bool] */;
  %526 = reshape(%525, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %527 = @func_757(%526) /* ty=(Tensor[(6, 13, 9), bool], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) */;
  %528 = %524.0;
  %529 = %527.0;
  (%528, %529, %var_1701)
}

def @func_3414() -> (Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) {
  %530 = @func_2240() /* ty=Tensor[(15, 5, 9), uint64] */;
  %531 = @func_2145() /* ty=Tensor[(15, 5, 9), uint64] */;
  %532 = cast(%531, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %533 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%530, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %536 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %537 = cast(%530, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %538 = mod(%534, %535) /* ty=Tensor[(15, 5, 9), float32] */;
  %539 = %536.0;
  %540 = rsqrt(%537) /* ty=Tensor[(15, 5, 9), float64] */;
  (%538, %539, %540)
}

def @func_3947() -> (Tensor[(10, 2, 5), float64],) {
  @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */
}

def @func_3662() -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), int32]) {
  @func_3660() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), int32]) */
}

def @func_6306() -> (Tensor[(15, 5, 9), uint64],) {
  @func_6304() /* ty=(Tensor[(15, 5, 9), uint64],) */
}

def @func_6252() -> (Tensor[(630), float64], Tensor[(176), uint16], Tensor[(2288), uint16], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float32]) {
  @func_6250() /* ty=(Tensor[(630), float64], Tensor[(176), uint16], Tensor[(2288), uint16], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float32]) */
}

def @func_5288(%var_5286: Tensor[(15, 5, 9), bool]) -> (Tensor[(15, 5, 9), int32],) {
  @func_5285(%var_5286) /* ty=(Tensor[(15, 5, 9), int32],) */
}

def @func_5244(%var_5242: Tensor[(6, 12, 16), float32]) -> Tensor[(6, 12, 16), float32] {
  @func_5241(%var_5242) /* ty=Tensor[(6, 12, 16), float32] */
}

def @func_6214() -> (Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), uint64]) {
  @func_6212() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), uint64]) */
}

def @func_3631() -> (Tensor[(13, 12, ?), uint64], Tensor[(15, 5, 9), float64]) {
  %550 = fn () -> (Tensor[(13, 12, ?), uint64], Tensor[(15, 5, 9), float64]) {
    %541 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 12, 1), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
    %542 = asin(%541) /* ty=Tensor[(13, 12, 1), float64] */;
    %543 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 12, 1), float64] */, dtype="uint64") /* ty=Tensor[(13, 12, 1), uint64] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%542, dtype="uint64") /* ty=Tensor[(13, 12, 1), uint64] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %547 = @func_3369() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
    %548 = left_shift(%545, %546) /* ty=Tensor[(13, 12, ?), uint64] */;
    %549 = %547.1;
    (%548, %549)
  };
  %550() /* ty=(Tensor[(13, 12, ?), uint64], Tensor[(15, 5, 9), float64]) */
}

def @func_5445() -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) {
  @func_5443() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */
}

def @func_3029() -> (Tensor[(15, 5, 9), float32],) {
  %553 = fn () -> (Tensor[(15, 5, 9), float32],) {
    %551 = @func_2850() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) */;
    %552 = %551.1;
    (%552,)
  };
  %553() /* ty=(Tensor[(15, 5, 9), float32],) */
}

def @func_2922() -> (Tensor[(15, 5, 9), float32], Tensor[(3, 11, 6), bool], Tensor[(198), float64]) {
  %554 = cast(meta[relay.Constant][32] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %555 = cast(meta[relay.Constant][32] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %556 = reshape(%554, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
  %557 = reshape(%555, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), float64] */;
  %558 = @func_1639(%556, %557) /* ty=(Tensor[(3, 11, 6), bool],) */;
  %559 = @func_2653() /* ty=Tensor[(15, 5, 9), float32] */;
  %560 = %558.0;
  (%559, %560, meta[relay.Constant][32] /* ty=Tensor[(198), float64] */)
}

def @func_2654() -> Tensor[(15, 5, 9), float32] {
  %563 = fn () -> Tensor[(15, 5, 9), float32] {
    %561 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
    %562 = cast(%561, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
    cos(%562) /* ty=Tensor[(15, 5, 9), float32] */
  };
  %563() /* ty=Tensor[(15, 5, 9), float32] */
}

def @func_4121(%var_4028: Tensor[(12, 14, 6), int16], %var_4029: Tensor[(12, 14, 6), int16], %var_4098: Tensor[(12, 14, 6), float64]) -> (Tensor[(12, 14, 6), bool], Tensor[(12, 14, 6), float32], Tensor[(12, 14, 6), uint8], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64]) {
  %564 = cast(%var_4029, dtype="int16") /* ty=Tensor[(12, 14, 6), int16] */;
  %565 = shape_of(%var_4028, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%var_4028, dtype="int16") /* ty=Tensor[(12, 14, 6), int16] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %568 = minimum(%566, %567) /* ty=Tensor[(12, 14, 6), int16] */;
  %569 = cast(%var_4029, dtype="int8") /* ty=Tensor[(12, 14, 6), int8] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="int8") /* ty=Tensor[(12, 14, 6), int8] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %573 = left_shift(%571, %572) /* ty=Tensor[(12, 14, 6), int8] */;
  %574 = cast(%568, dtype="float32") /* ty=Tensor[(12, 14, 6), float32] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="float32") /* ty=Tensor[(12, 14, 6), float32] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %578 = floor_mod(%576, %577) /* ty=Tensor[(12, 14, 6), float32] */;
  %579 = cast(%573, dtype="uint8") /* ty=Tensor[(12, 14, 6), uint8] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="uint8") /* ty=Tensor[(12, 14, 6), uint8] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %583 = maximum(%581, %582) /* ty=Tensor[(12, 14, 6), uint8] */;
  %584 = cast(%var_4028, dtype="bool") /* ty=Tensor[(12, 14, 6), bool] */;
  %585 = shape_of(%var_4029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%var_4029, dtype="bool") /* ty=Tensor[(12, 14, 6), bool] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %588 = not_equal(%586, %587) /* ty=Tensor[(12, 14, 6), bool] */;
  %589 = cast(%588, dtype="bool") /* ty=Tensor[(12, 14, 6), bool] */;
  %590 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%583, dtype="bool") /* ty=Tensor[(12, 14, 6), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = cast(%var_4029, dtype="float64") /* ty=Tensor[(12, 14, 6), float64] */;
  %594 = sqrt(%593) /* ty=Tensor[(12, 14, 6), float64] */;
  %595 = cast(%var_4098, dtype="float32") /* ty=Tensor[(12, 14, 6), float32] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="float32") /* ty=Tensor[(12, 14, 6), float32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %599 = cast(%594, dtype="uint8") /* ty=Tensor[(12, 14, 6), uint8] */;
  %600 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%568, dtype="uint8") /* ty=Tensor[(12, 14, 6), uint8] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %603 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %604 = @func_3414() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
  %605 = logical_or(%591, %592) /* ty=Tensor[(12, 14, 6), bool] */;
  %606 = mod(%597, %598) /* ty=Tensor[(12, 14, 6), float32] */;
  %607 = multiply(%601, %602) /* ty=Tensor[(12, 14, 6), uint8] */;
  %608 = %603.0;
  %609 = %604.1;
  (%605, %606, %607, %608, %609)
}

def @func_6026(%var_6022: Tensor[(216, 1), float64], %var_6023: Tensor[(672, 2), float32], %var_6024: Tensor[(686, 1), float64], %var_6025: Tensor[(630), float64]) -> (Tensor[(15, 5, 9), float64], Tensor[(1344), float32], Tensor[(216, 1), float64], Tensor[(546), int32], Tensor[(686, 1), float64], Tensor[(546), int32], Tensor[(630), float64], Tensor[(2240, 1), bool], Tensor[(672, 2), float64]) {
  @func_6020(%var_6022, %var_6023, %var_6024, %var_6025) /* ty=(Tensor[(15, 5, 9), float64], Tensor[(1344), float32], Tensor[(216, 1), float64], Tensor[(546), int32], Tensor[(686, 1), float64], Tensor[(546), int32], Tensor[(630), float64], Tensor[(2240, 1), bool], Tensor[(672, 2), float64]) */
}

def @func_4904(%var_4901: Tensor[(1, 1232), int64], %var_4902: uint64, %var_4903: Tensor[(845), uint64]) -> (Tensor[(15, 5, 9), float32], Tensor[(1, 1232), int64], Tensor[(15, 5, 9), int32], Tensor[(845), uint64], Tensor[(2240), bool], Tensor[(4, 308), float64], Tensor[(3, 14, 15), float64], Tensor[(546, 1), int32], Tensor[(198), float64], Tensor[(630), float64]) {
  %641 = fn (%var_4860: Tensor[(1, 1232), int64], %var_4863: uint64, %var_4864: Tensor[(845), uint64]) -> (Tensor[(15, 5, 9), float32], Tensor[(1, 1232), int64], Tensor[(15, 5, 9), int32], Tensor[(845), uint64], Tensor[(2240), bool], Tensor[(4, 308), float64], Tensor[(3, 14, 15), float64], Tensor[(546, 1), int32], Tensor[(198), float64], Tensor[(630), float64]) {
    %610 = @func_3723() /* ty=(Tensor[(15, 5, 9), bool],) */;
    %611 = %610.0;
    %612 = cast(%611, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
    %613 = cast(%var_4863, dtype="uint64") /* ty=uint64 */;
    %614 = cast(%var_4864, dtype="uint64") /* ty=Tensor[(845), uint64] */;
    %615 = cast(meta[relay.Constant][33] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %616 = reshape(%613, newshape=[]) /* ty=uint64 */;
    %617 = reshape(%614, newshape=[845]) /* ty=Tensor[(845), uint64] */;
    %618 = reshape(%615, newshape=[560, 4]) /* ty=Tensor[(560, 4), bool] */;
    %619 = @func_4501(%616, %617, %618) /* ty=(Tensor[(15, 5, 9), int32], Tensor[(420), float64], uint64, Tensor[(845), uint64], Tensor[(10, 42), float64], Tensor[(560, 4), bool]) */;
    %620 = cast(%var_4860, dtype="int64") /* ty=Tensor[(1, 1232), int64] */;
    %621 = reshape(%620, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
    %622 = @func_4193(%621) /* ty=(Tensor[(15, 5, 9), float32], Tensor[(198), float64], int64, Tensor[(4, 308), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */;
    %623 = %622.3;
    %624 = cast(%623, dtype="float64") /* ty=Tensor[(4, 308), float64] */;
    %625 = cast(%var_4863, dtype="float64") /* ty=float64 */;
    %626 = cast(meta[relay.Constant][34] /* ty=Tensor[(546, 1), int32] */, dtype="int32") /* ty=Tensor[(546, 1), int32] */;
    %627 = cast(meta[relay.Constant][34] /* ty=Tensor[(546, 1), int32] */, dtype="int32") /* ty=Tensor[(546, 1), int32] */;
    %628 = cast(meta[relay.Constant][35] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %629 = cast(meta[relay.Constant][36] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
    %630 = cast(meta[relay.Constant][33] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %631 = reshape(%626, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
    %632 = reshape(%627, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
    %633 = reshape(%628, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %634 = reshape(%629, newshape=[630]) /* ty=Tensor[(630), float64] */;
    %635 = reshape(%630, newshape=[1120, 2]) /* ty=Tensor[(1120, 2), bool] */;
    %636 = @func_2061(%631, %632, %633, %634, %635) /* ty=(Tensor[(13, 3, 14), float64], Tensor[(3, 11, 6), bool], Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(198), float32], Tensor[(6, 13, 9), bool], Tensor[(1120, 2), bool]) */;
    %637 = asinh(%612) /* ty=Tensor[(15, 5, 9), float32] */;
    %638 = %619.0;
    %639 = power(%624, %625) /* ty=Tensor[(4, 308), float64] */;
    %640 = %636.2;
    (%637, %var_4860, %638, %var_4864, meta[relay.Constant][33] /* ty=Tensor[(2240), bool] */, %639, %640, meta[relay.Constant][34] /* ty=Tensor[(546, 1), int32] */, meta[relay.Constant][35] /* ty=Tensor[(198), float64] */, meta[relay.Constant][36] /* ty=Tensor[(630), float64] */)
  };
  %641(%var_4901, %var_4902, %var_4903) /* ty=(Tensor[(15, 5, 9), float32], Tensor[(1, 1232), int64], Tensor[(15, 5, 9), int32], Tensor[(845), uint64], Tensor[(2240), bool], Tensor[(4, 308), float64], Tensor[(3, 14, 15), float64], Tensor[(546, 1), int32], Tensor[(198), float64], Tensor[(630), float64]) */
}

def @func_3110() -> (Tensor[(15, 5, 9), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32]) {
  %647 = fn () -> (Tensor[(15, 5, 9), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32]) {
    %642 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
    %643 = cast(meta[relay.Constant][37] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %644 = reshape(%643, newshape=[14, 12, 8]) /* ty=Tensor[(14, 12, 8), float32] */;
    %645 = %642.0;
    %646 = @func_868(%644) /* ty=Tensor[(14, 12, 8), float32] */;
    (%645, %646, meta[relay.Constant][37] /* ty=Tensor[(1344), float32] */)
  };
  %647() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32]) */
}

def @func_5241(%var_5237: Tensor[(6, 12, 16), float32]) -> Tensor[(6, 12, 16), float32] {
  %648 = cast(%var_5237, dtype="float32") /* ty=Tensor[(6, 12, 16), float32] */;
  atanh(%648) /* ty=Tensor[(6, 12, 16), float32] */
}

def @func_5214(%var_5181: Tensor[(10, 2, 5), float64], %var_5206: Tensor[(10, 2, 5), float64]) -> (Tensor[(10, 2, 5), bool], Tensor[(15, 5, 9), float64], Tensor[(10, 2, 5), float64]) {
  %649 = @func_5136() /* ty=(Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), uint64], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), uint64]) */;
  %650 = %649.2;
  %651 = cast(%var_5181, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
  %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%650, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %655 = cast(%var_5206, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %656 = shape_of(%var_5181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%var_5181, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %659 = less(%653, %654) /* ty=Tensor[(10, 2, 5), bool] */;
  %660 = @func_4024() /* ty=Tensor[(15, 5, 9), float64] */;
  %661 = mod(%657, %658) /* ty=Tensor[(10, 2, 5), float64] */;
  (%659, %660, %661)
}

def @func_5525() -> Tensor[(15, 5, 9), uint64] {
  %662 = fn () -> Tensor[(15, 5, 9), uint64] {
    @func_2519() /* ty=Tensor[(15, 5, 9), uint64] */
  };
  %662() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_5001() -> (Tensor[(15, 5, 9), bool],) {
  %665 = fn () -> (Tensor[(15, 5, 9), bool],) {
    %663 = @func_3127() /* ty=(Tensor[(15, 5, 9), bool],) */;
    %664 = %663.0;
    (%664,)
  };
  %665() /* ty=(Tensor[(15, 5, 9), bool],) */
}

def @func_2851() -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) {
  %670 = fn () -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) {
    %666 = @func_2140() /* ty=Tensor[(15, 5, 9), bool] */;
    %667 = cast(%666, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
    %668 = reshape(%667, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint64] */;
    %669 = @func_1909(%668) /* ty=Tensor[(15, 5, 9), float32] */;
    (%666, %669)
  };
  %670() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32]) */
}

def @func_987(%var_942: Tensor[(12, 9, 2), float64], %var_971: Tensor[(1344), float32]) -> (Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) {
  %671 = cast(meta[relay.Constant][38] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %672 = cast(meta[relay.Constant][39] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
  %673 = reshape(%671, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
  %674 = reshape(%672, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
  %675 = @func_573(%673, %674) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
  %676 = cast(%var_971, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %677 = reshape(%676, newshape=[14, 12, 8]) /* ty=Tensor[(14, 12, 8), float32] */;
  %678 = cast(%var_942, dtype="float64") /* ty=Tensor[(12, 9, 2), float64] */;
  %679 = sin(%678) /* ty=Tensor[(12, 9, 2), float64] */;
  %680 = cast(%var_942, dtype="bool") /* ty=Tensor[(12, 9, 2), bool] */;
  %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%679, dtype="bool") /* ty=Tensor[(12, 9, 2), bool] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %684 = greater_equal(%682, %683) /* ty=Tensor[(12, 9, 2), bool] */;
  %685 = cast(%684, dtype="float64") /* ty=Tensor[(12, 9, 2), float64] */;
  %686 = %675.2;
  %687 = @func_868(%677) /* ty=Tensor[(14, 12, 8), float32] */;
  %688 = erf(%685) /* ty=Tensor[(12, 9, 2), float64] */;
  (%686, meta[relay.Constant][38] /* ty=Tensor[(420), float64] */, meta[relay.Constant][39] /* ty=Tensor[(2240), bool] */, %687, %var_971, %688)
}

def @func_2240() -> Tensor[(15, 5, 9), uint64] {
  @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_760(%var_758: Tensor[(2240), bool]) -> (Tensor[(6, 13, 9), bool], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) {
  @func_757(%var_758) /* ty=(Tensor[(6, 13, 9), bool], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) */
}

def @func_2568() -> Tensor[(15, 5, 9), bool] {
  %689 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
  %689.0
}

def @func_2521() -> Tensor[(15, 5, 9), uint64] {
  @func_2519() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_5805(%var_5803: Tensor[(15, 5, 9), uint64]) -> (Tensor[(15, 5, 9), float64], Tensor[(198), float64], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), uint32], Tensor[(15, 5, 9), float64]) {
  @func_5802(%var_5803) /* ty=(Tensor[(15, 5, 9), float64], Tensor[(198), float64], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), uint32], Tensor[(15, 5, 9), float64]) */
}

def @func_3723() -> (Tensor[(15, 5, 9), bool],) {
  %690 = @func_2140() /* ty=Tensor[(15, 5, 9), bool] */;
  (%690,)
}

def @func_5534() -> Tensor[(15, 5, 9), float64] {
  %691 = fn () -> Tensor[(15, 5, 9), float64] {
    @func_4024() /* ty=Tensor[(15, 5, 9), float64] */
  };
  %691() /* ty=Tensor[(15, 5, 9), float64] */
}

def @func_3908() -> (Tensor[(15, 5, 9), uint64],) {
  %693 = fn () -> (Tensor[(15, 5, 9), uint64],) {
    %692 = @func_2519() /* ty=Tensor[(15, 5, 9), uint64] */;
    (%692,)
  };
  %693() /* ty=(Tensor[(15, 5, 9), uint64],) */
}

def @func_2208(%var_2205: Tensor[(13, 1, 16), float64], %var_2206: Tensor[(630), float64], %var_2207: Tensor[(13, 12, 16), int64]) -> (Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(15, 5, 9), float64], Tensor[(630), float64], Tensor[(546), int32], Tensor[(198), float64], Tensor[(630), float64], Tensor[(13, 12, 16), float64], Tensor[(10, 16, 14), bool], Tensor[(13, ?, 16), float64]) {
  %729 = fn (%var_2147: Tensor[(13, 1, 16), float64], %var_2177: Tensor[(630), float64], %var_2181: Tensor[(13, 12, 16), int64]) -> (Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(15, 5, 9), float64], Tensor[(630), float64], Tensor[(546), int32], Tensor[(198), float64], Tensor[(630), float64], Tensor[(13, 12, 16), float64], Tensor[(10, 16, 14), bool], Tensor[(13, ?, 16), float64]) {
    %694 = cast(meta[relay.Constant][40] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %695 = cast(meta[relay.Constant][41] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %696 = reshape(%694, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
    %697 = reshape(%695, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
    %698 = @func_573(%696, %697) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
    %699 = cast(meta[relay.Constant][42] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
    %700 = cast(meta[relay.Constant][42] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
    %701 = cast(meta[relay.Constant][43] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %702 = cast(%var_2177, dtype="float64") /* ty=Tensor[(630), float64] */;
    %703 = %698.3;
    %704 = cast(%703, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
    %705 = reshape(%699, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
    %706 = reshape(%700, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), int32] */;
    %707 = reshape(%701, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %708 = reshape(%702, newshape=[630]) /* ty=Tensor[(630), float64] */;
    %709 = reshape(%704, newshape=[1120, 2]) /* ty=Tensor[(1120, 2), bool] */;
    %710 = @func_2061(%705, %706, %707, %708, %709) /* ty=(Tensor[(13, 3, 14), float64], Tensor[(3, 11, 6), bool], Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(198), float32], Tensor[(6, 13, 9), bool], Tensor[(1120, 2), bool]) */;
    %711 = cast(%var_2147, dtype="float64") /* ty=Tensor[(13, 1, 16), float64] */;
    %712 = sigmoid(%711) /* ty=Tensor[(13, 1, 16), float64] */;
    %713 = cast(%var_2147, dtype="int64") /* ty=Tensor[(13, 1, 16), int64] */;
    %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
    %715 = cast(%712, dtype="int64") /* ty=Tensor[(13, 1, 16), int64] */;
    %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %717 = maximum(%715, %716) /* ty=Tensor[(13, ?, 16), int64] */;
    %718 = cast(%717, dtype="float64") /* ty=Tensor[(13, ?, 16), float64] */;
    %719 = cast(%var_2181, dtype="float64") /* ty=Tensor[(13, 12, 16), float64] */;
    %720 = cast(%703, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
    %721 = reshape(%720, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
    %722 = @func_757(%721) /* ty=(Tensor[(6, 13, 9), bool], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) */;
    %723 = cast(%717, dtype="float64") /* ty=Tensor[(13, ?, 16), float64] */;
    %724 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
    %725 = %710.3;
    %726 = floor_mod(%718, %719) /* ty=Tensor[(13, 12, 16), float64] */;
    %727 = %722.1;
    %728 = asin(%723) /* ty=Tensor[(13, ?, 16), float64] */;
    (%703, meta[relay.Constant][40] /* ty=Tensor[(420), float64] */, meta[relay.Constant][41] /* ty=Tensor[(2240), bool] */, %724, %725, meta[relay.Constant][42] /* ty=Tensor[(546), int32] */, meta[relay.Constant][43] /* ty=Tensor[(198), float64] */, %var_2177, %726, %727, %728)
  };
  %729(%var_2205, %var_2206, %var_2207) /* ty=(Tensor[(10, 16, 14), float64], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(15, 5, 9), float64], Tensor[(630), float64], Tensor[(546), int32], Tensor[(198), float64], Tensor[(630), float64], Tensor[(13, 12, 16), float64], Tensor[(10, 16, 14), bool], Tensor[(13, ?, 16), float64]) */
}

def @func_3277() -> Tensor[(15, 5, 9), int32] {
  %730 = @func_3063() /* ty=(Tensor[(15, 5, 9), int32],) */;
  %730.0
}

def @func_5443() -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) {
  %731 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %732 = %731.0;
  %733 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 5, 9), float64] */, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %737 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
  %738 = less_equal(%735, %736) /* ty=Tensor[(15, 5, 9), bool] */;
  %739 = %737.0;
  %740 = @func_4024() /* ty=Tensor[(15, 5, 9), float64] */;
  %741 = @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */;
  (%738, %739, %740, %741)
}

def @func_1685() -> (Tensor[(15, 5, 9), float64],) {
  %742 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
  (%742,)
}

def @func_3228(%var_3226: int64, %var_3227: Tensor[(7, 11, 16), int64]) -> (Tensor[(7, 11, 16), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(198), float64]) {
  %752 = fn (%var_3163: int64, %var_3164: Tensor[(7, 11, 16), int64]) -> (Tensor[(7, 11, 16), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(198), float64]) {
    %743 = cast(%var_3163, dtype="int64") /* ty=int64 */;
    %744 = cast(%var_3164, dtype="int64") /* ty=Tensor[(7, 11, 16), int64] */;
    %745 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
    %746 = @func_2922() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(3, 11, 6), bool], Tensor[(198), float64]) */;
    %747 = left_shift(%743, %744) /* ty=Tensor[(7, 11, 16), int64] */;
    %748 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
    %749 = %745.0;
    %750 = @func_1658() /* ty=Tensor[(15, 5, 9), float64] */;
    %751 = %746.2;
    (%747, %748, %749, %750, %751)
  };
  %752(%var_3226, %var_3227) /* ty=(Tensor[(7, 11, 16), int64], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(198), float64]) */
}

def @func_2973(%var_2971: Tensor[(11, 1, 16), uint16], %var_2972: Tensor[(11, 13, 16), uint16]) -> (Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(11, 13, 16), bool]) {
  %764 = fn (%var_2935: Tensor[(11, 1, 16), uint16], %var_2936: Tensor[(11, 13, 16), uint16]) -> (Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(11, 13, 16), bool]) {
    %753 = cast(meta[relay.Constant][45] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
    %754 = reshape(%753, newshape=[3, 14, 15]) /* ty=Tensor[(3, 14, 15), float64] */;
    %755 = cast(%var_2935, dtype="bool") /* ty=Tensor[(11, 1, 16), bool] */;
    %756 = cast(%var_2936, dtype="bool") /* ty=Tensor[(11, 13, 16), bool] */;
    %757 = not_equal(%755, %756) /* ty=Tensor[(11, 13, 16), bool] */;
    %758 = cast(%757, dtype="bool") /* ty=Tensor[(11, 13, 16), bool] */;
    %759 = shape_of(%var_2936, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(%var_2936, dtype="bool") /* ty=Tensor[(11, 13, 16), bool] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %762 = @func_1006(%754) /* ty=Tensor[(3, 14, 15), float64] */;
    %763 = greater(%760, %761) /* ty=Tensor[(11, 13, 16), bool] */;
    (%762, meta[relay.Constant][45] /* ty=Tensor[(630), float64] */, %763)
  };
  %764(%var_2971, %var_2972) /* ty=(Tensor[(3, 14, 15), float64], Tensor[(630), float64], Tensor[(11, 13, 16), bool]) */
}

def @func_6085(%var_6068: Tensor[(14, 12, 8), float32], %var_6076: Tensor[(14, 12, 8), float32], %var_6082: Tensor[(36, 6), float64]) -> (Tensor[(14, 12, 8), float32], Tensor[(14, 12, 8), bool], Tensor[(2240), bool], Tensor[(36, 6), float64]) {
  %765 = @func_3109() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32]) */;
  %766 = %765.1;
  %767 = cast(%var_6068, dtype="float32") /* ty=Tensor[(14, 12, 8), float32] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="float32") /* ty=Tensor[(14, 12, 8), float32] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %771 = cast(%var_6076, dtype="bool") /* ty=Tensor[(14, 12, 8), bool] */;
  %772 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%766, dtype="bool") /* ty=Tensor[(14, 12, 8), bool] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %775 = cast(%var_6082, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %776 = not_equal(%773, %774) /* ty=Tensor[(14, 12, 8), bool] */;
  %777 = cast(%776, dtype="float32") /* ty=Tensor[(14, 12, 8), float32] */;
  %778 = reshape(%775, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
  %779 = reshape(%777, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %780 = @func_987(%778, %779) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
  %781 = power(%769, %770) /* ty=Tensor[(14, 12, 8), float32] */;
  %782 = %780.2;
  (%781, %776, %782, %var_6082)
}

def @func_5887() -> (Tensor[(15, 5, 9), int32],) {
  %783 = @func_4778() /* ty=(Tensor[(15, 5, 9), bool], Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), int32]) */;
  %784 = %783.2;
  (%784,)
}

def @func_5723() -> (Tensor[(15, 5, 9), bool],) {
  @func_5721() /* ty=(Tensor[(15, 5, 9), bool],) */
}

def @func_868(%var_853: Tensor[(14, 12, 8), float32]) -> Tensor[(14, 12, 8), float32] {
  %785 = cast(%var_853, dtype="float32") /* ty=Tensor[(14, 12, 8), float32] */;
  sinh(%785) /* ty=Tensor[(14, 12, 8), float32] */
}

def @func_398(%var_397: Tensor[(10, 16, 14), bool]) -> Tensor[(10, 16, 14), bool] {
  %790 = fn (%var_385: Tensor[(10, 16, 14), bool]) -> Tensor[(10, 16, 14), bool] {
    %786 = cast(%var_385, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
    %787 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(10, 16, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %788 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 16, 14), bool] */, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
    %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%788, %789) /* ty=Tensor[(10, 16, 14), bool] */
  };
  %790(%var_397) /* ty=Tensor[(10, 16, 14), bool] */
}

def @func_3660() -> (Tensor[(15, 5, 9), uint64], Tensor[(15, 5, 9), int32]) {
  %791 = @func_3063() /* ty=(Tensor[(15, 5, 9), int32],) */;
  %792 = @func_2519() /* ty=Tensor[(15, 5, 9), uint64] */;
  %793 = %791.0;
  (%792, %793)
}

def @func_5334() -> (Tensor[(10, 2, 5), float64], Tensor[(15, 5, 9), float64], Tensor[(216), float64], Tensor[(216), float64]) {
  %794 = @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */;
  %795 = %794.0;
  %796 = cast(%795, dtype="float64") /* ty=Tensor[(10, 2, 5), float64] */;
  %797 = cast(meta[relay.Constant][47] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %798 = reshape(%797, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %799 = @func_4299(%798) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(2240), bool], Tensor[(216), float64], Tensor[(2240), bool], Tensor[(16, 10, 13), bool], Tensor[(2080), float32]) */;
  %800 = cos(%796) /* ty=Tensor[(10, 2, 5), float64] */;
  %801 = @func_4024() /* ty=Tensor[(15, 5, 9), float64] */;
  %802 = %799.2;
  (%800, %801, %802, meta[relay.Constant][47] /* ty=Tensor[(216), float64] */)
}

def @func_2142() -> Tensor[(15, 5, 9), bool] {
  @func_2140() /* ty=Tensor[(15, 5, 9), bool] */
}

def @func_1912(%var_1910: Tensor[(15, 5, 9), uint64]) -> Tensor[(15, 5, 9), float32] {
  @func_1909(%var_1910) /* ty=Tensor[(15, 5, 9), float32] */
}

def @func_3473(%var_3470: Tensor[(216), float64], %var_3471: Tensor[(15, 5, 9), bool], %var_3472: Tensor[(2240), bool]) -> (Tensor[(1344), float32], Tensor[(216), float64], Tensor[(1344), float32], Tensor[(15, 5, 9), bool], Tensor[(14, 12, 8), float32], Tensor[(2240), bool]) {
  %822 = fn (%var_3425: Tensor[(216), float64], %var_3441: Tensor[(15, 5, 9), bool], %var_3465: Tensor[(2240), bool]) -> (Tensor[(1344), float32], Tensor[(216), float64], Tensor[(1344), float32], Tensor[(15, 5, 9), bool], Tensor[(14, 12, 8), float32], Tensor[(2240), bool]) {
    %803 = cast(%var_3425, dtype="float64") /* ty=Tensor[(216), float64] */;
    %804 = cast(meta[relay.Constant][48] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %805 = reshape(%803, newshape=[12, 9, 2]) /* ty=Tensor[(12, 9, 2), float64] */;
    %806 = reshape(%804, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
    %807 = @func_987(%805, %806) /* ty=(Tensor[(2240), bool], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(12, 9, 2), float64]) */;
    %808 = @func_1787() /* ty=(Tensor[(15, 5, 9), bool],) */;
    %809 = %808.0;
    %810 = cast(%var_3441, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
    %812 = cast(%809, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %814 = %807.4;
    %815 = cast(%814, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %816 = cast(%var_3465, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %817 = reshape(%815, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
    %818 = reshape(%816, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
    %819 = @func_1210(%817, %818) /* ty=(Tensor[(11, 12, 7), float32], Tensor[(14, 12, 8), float32], Tensor[(1344), float32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool]) */;
    %820 = greater_equal(%812, %813) /* ty=Tensor[(15, 5, 9), bool] */;
    %821 = %819.1;
    (%814, %var_3425, meta[relay.Constant][48] /* ty=Tensor[(1344), float32] */, %820, %821, %var_3465)
  };
  %822(%var_3470, %var_3471, %var_3472) /* ty=(Tensor[(1344), float32], Tensor[(216), float64], Tensor[(1344), float32], Tensor[(15, 5, 9), bool], Tensor[(14, 12, 8), float32], Tensor[(2240), bool]) */
}

def @func_3416() -> (Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) {
  @func_3414() /* ty=(Tensor[(15, 5, 9), float32], Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float64]) */
}

def @func_1824() -> Tensor[(15, 5, 9), uint64] {
  @func_1822() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_1367(%var_1366: Tensor[(11, 15, 2), float32]) -> (Tensor[(11, 15, 2), int64], Tensor[(11, 15, 2), bool], Tensor[(7, 10, 6), uint32], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) {
  %850 = fn (%var_1335: Tensor[(11, 15, 2), float32]) -> (Tensor[(11, 15, 2), int64], Tensor[(11, 15, 2), bool], Tensor[(7, 10, 6), uint32], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) {
    %823 = cast(%var_1335, dtype="float32") /* ty=Tensor[(11, 15, 2), float32] */;
    %824 = log2(%823) /* ty=Tensor[(11, 15, 2), float32] */;
    %825 = cast(%var_1335, dtype="int64") /* ty=Tensor[(11, 15, 2), int64] */;
    %826 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
    %827 = cast(%824, dtype="int64") /* ty=Tensor[(11, 15, 2), int64] */;
    %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %829 = cast(%var_1335, dtype="bool") /* ty=Tensor[(11, 15, 2), bool] */;
    %830 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
    %831 = cast(%824, dtype="bool") /* ty=Tensor[(11, 15, 2), bool] */;
    %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %833 = cast(meta[relay.Constant][49] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %834 = cast(meta[relay.Constant][50] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %835 = reshape(%833, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
    %836 = reshape(%834, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
    %837 = @func_573(%835, %836) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
    %838 = cast(meta[relay.Constant][49] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %839 = cast(meta[relay.Constant][50] /* ty=Tensor[(2240), bool] */, dtype="bool") /* ty=Tensor[(2240), bool] */;
    %840 = reshape(%838, newshape=[7, 10, 6]) /* ty=Tensor[(7, 10, 6), float64] */;
    %841 = reshape(%839, newshape=[2240]) /* ty=Tensor[(2240), bool] */;
    %842 = @func_573(%840, %841) /* ty=(Tensor[(7, 10, 6), uint32], Tensor[(10, 16, 14), bool], Tensor[(2240), bool], Tensor[(10, 16, 14), float64], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */;
    %843 = %842.1;
    %844 = cast(%843, dtype="bool") /* ty=Tensor[(10, 16, 14), bool] */;
    %845 = reshape(%844, newshape=[10, 16, 14]) /* ty=Tensor[(10, 16, 14), bool] */;
    %846 = add(%827, %828) /* ty=Tensor[(11, 15, 2), int64] */;
    %847 = logical_or(%831, %832) /* ty=Tensor[(11, 15, 2), bool] */;
    %848 = %837.0;
    %849 = @func_396(%845) /* ty=Tensor[(10, 16, 14), bool] */;
    (%846, %847, %848, meta[relay.Constant][49] /* ty=Tensor[(420), float64] */, meta[relay.Constant][50] /* ty=Tensor[(2240), bool] */, %843, %849)
  };
  %850(%var_1366) /* ty=(Tensor[(11, 15, 2), int64], Tensor[(11, 15, 2), bool], Tensor[(7, 10, 6), uint32], Tensor[(420), float64], Tensor[(2240), bool], Tensor[(10, 16, 14), bool], Tensor[(10, 16, 14), bool]) */
}

def @func_3063() -> (Tensor[(15, 5, 9), int32],) {
  %851 = @func_3028() /* ty=(Tensor[(15, 5, 9), float32],) */;
  %852 = %851.0;
  %853 = cast(meta[relay.Constant][51] /* ty=Tensor[(15, 5, 9), float32] */, dtype="int32") /* ty=Tensor[(15, 5, 9), int32] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="int32") /* ty=Tensor[(15, 5, 9), int32] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %857 = subtract(%855, %856) /* ty=Tensor[(15, 5, 9), int32] */;
  (%857,)
}

def @func_4265() -> Tensor[(15, 5, 9), uint64] {
  %859 = fn () -> Tensor[(15, 5, 9), uint64] {
    %858 = @func_1813() /* ty=(Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) */;
    %858.1
  };
  %859() /* ty=Tensor[(15, 5, 9), uint64] */
}

def @func_1813() -> (Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), uint64]) {
  %860 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %861 = @func_1685() /* ty=(Tensor[(15, 5, 9), float64],) */;
  %862 = %861.0;
  %863 = cast(meta[relay.Constant][52] /* ty=Tensor[(15, 5, 9), float64] */, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %867 = %860.0;
  %868 = logical_xor(%865, %866) /* ty=Tensor[(15, 5, 9), uint64] */;
  (%867, %868)
}

def @func_5624() -> (Tensor[(10, 2, 5), float64],) {
  %871 = fn () -> (Tensor[(10, 2, 5), float64],) {
    %869 = @func_3945() /* ty=(Tensor[(10, 2, 5), float64],) */;
    %870 = %869.0;
    (%870,)
  };
  %871() /* ty=(Tensor[(10, 2, 5), float64],) */
}

def @func_3506(%var_3504: Tensor[(15, 5, 9), float32]) -> (Tensor[(15, 5, 9), uint8],) {
  @func_3503(%var_3504) /* ty=(Tensor[(15, 5, 9), uint8],) */
}

def @func_3127() -> (Tensor[(15, 5, 9), bool],) {
  %872 = @func_2140() /* ty=Tensor[(15, 5, 9), bool] */;
  (%872,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen278/build/output.py:2011: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen278/build/output.py", line 2016, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(910) tvmgen_default_fused_sin_cast_tan_kernel0(float* __restrict__ T_tan, double* __restrict__ placeholder) {
  T_tan[(((int)threadIdx.x))] = tanf(((float)sin(placeholder[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

